commit ea8302df9b5519b18081d03e603c89727b066a8e
Author: Stephen Cefali <scefali@sentry.io>
Date:   Wed Jan 15 11:06:45 2020 -0800

    feat(integration): Modal open analytics (#16419)

diff --git a/src/sentry/static/sentry/app/actionCreators/modal.tsx b/src/sentry/static/sentry/app/actionCreators/modal.tsx
index 03d970dc47..d0679bcc5a 100644
--- a/src/sentry/static/sentry/app/actionCreators/modal.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/modal.tsx
@@ -24,6 +24,7 @@ export type IntegrationDetailsModalOptions = {
   onAddIntegration: (integration: Integration) => void;
   provider: IntegrationProvider;
   organization: Organization;
+  isInstalled: boolean; //used for analytics
 };
 
 export type SentryAppDetailsModalOptions = {
diff --git a/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx b/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
index 15846e91ff..7bf0ef5315 100644
--- a/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
+++ b/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
@@ -3,7 +3,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
 
-import {analytics} from 'app/utils/analytics';
+import {trackIntegrationEvent} from 'app/utils/integrationUtil';
 import {t} from 'app/locale';
 import Access from 'app/components/acl/access';
 import AddIntegrationButton from 'app/views/organizationIntegrations/addIntegrationButton';
@@ -57,10 +57,17 @@ class IntegrationDetailsModal extends React.Component<Props> {
   };
 
   componentDidMount() {
-    analytics('integrations.install_modal_opened', {
-      org_id: parseInt(this.props.organization.id, 10),
-      integration: this.props.provider.key,
-    });
+    trackIntegrationEvent(
+      {
+        eventKey: 'integrations.install_modal_opened',
+        eventName: 'Integrations: Install Modal Opened',
+        integration_type: 'first_party',
+        integration: this.props.provider.key,
+        already_installed: this.props.isInstalled,
+        view: 'integrations_page',
+      },
+      this.props.organization
+    );
   }
 
   onAddIntegration = (integration: Integration) => {
@@ -68,7 +75,7 @@ class IntegrationDetailsModal extends React.Component<Props> {
     this.props.onAddIntegration(integration);
   };
 
-  featureTags(features) {
+  featureTags(features: string[]) {
     return features.map(feature => (
       <StyledTag key={feature}>{feature.replace(/-/g, ' ')}</StyledTag>
     ));
diff --git a/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx b/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
index 18f9cbcdf0..5e08f718a4 100644
--- a/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
+++ b/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
@@ -20,9 +20,11 @@ import CircleIndicator from 'app/components/circleIndicator';
 import {SentryAppDetailsModalOptions} from 'app/actionCreators/modal';
 import {Hooks} from 'app/types/hooks';
 import {IntegrationFeature} from 'app/types';
+import {recordInteraction} from 'app/utils/recordSentryAppInteraction';
+import {trackIntegrationEvent} from 'app/utils/integrationUtil';
 
 type Props = {
-  closeOnInstall?: boolean;
+  view?: 'integrations_page' | 'external_install';
   closeModal: () => void;
 } & SentryAppDetailsModalOptions &
   AsyncComponent['props'];
@@ -55,13 +57,42 @@ export default class SentryAppDetailsModal extends AsyncComponent<Props, State>
     onInstall: PropTypes.func.isRequired,
     isInstalled: PropTypes.bool.isRequired,
     closeModal: PropTypes.func.isRequired,
-    closeOnInstall: PropTypes.bool.isRequired,
+    view: PropTypes.string.isRequired,
   };
 
   static defaultProps = {
-    closeOnInstall: true,
+    view: 'integrations_page',
   };
 
+  componentDidUpdate(prevProps: Props) {
+    //if the user changes org, count this as a fresh event to track
+    if (this.props.organization.id !== prevProps.organization.id) {
+      this.trackOpened();
+    }
+  }
+
+  componentDidMount() {
+    this.trackOpened();
+  }
+
+  trackOpened() {
+    const {sentryApp, organization, isInstalled, view} = this.props;
+    recordInteraction(sentryApp.slug, 'sentry_app_viewed');
+
+    trackIntegrationEvent(
+      {
+        eventKey: 'integrations.install_modal_opened',
+        eventName: 'Integrations: Install Modal Opened',
+        integration_type: 'sentry_app',
+        integration: sentryApp.slug,
+        already_installed: isInstalled,
+        view,
+      },
+      organization,
+      {startSession: view === 'external_install'} //new session on external installs
+    );
+  }
+
   getEndpoints(): [string, string][] {
     const {sentryApp} = this.props;
     return [['featureData', `/sentry-apps/${sentryApp.slug}/features/`]];
@@ -79,10 +110,10 @@ export default class SentryAppDetailsModal extends AsyncComponent<Props, State>
   }
 
   onInstall() {
-    const {onInstall, closeModal, closeOnInstall} = this.props;
+    const {onInstall, closeModal, view} = this.props;
     onInstall();
-    // let onInstall handle redirection post install when onCloseInstall is false
-    closeOnInstall && closeModal();
+    // let onInstall handle redirection post install on the external install flow
+    view !== 'external_install' && closeModal();
   }
 
   renderPermissions() {
diff --git a/src/sentry/static/sentry/app/utils/integrationUtil.tsx b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
new file mode 100644
index 0000000000..52054ba67f
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
@@ -0,0 +1,65 @@
+import {uniqueId} from 'app/utils/guid';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
+import {Organization} from 'app/types';
+import {Hooks} from 'app/types/hooks';
+
+const INTEGRATIONS_ANALYTICS_SESSION_KEY = 'integrationsAnalyticsSession';
+
+export const startAnalyticsSession = () => {
+  const sessionId = uniqueId();
+  window.sessionStorage.setItem(INTEGRATIONS_ANALYTICS_SESSION_KEY, sessionId);
+  return sessionId;
+};
+
+export const clearAnalyticsSession = () => {
+  window.sessionStorage.removeItem(INTEGRATIONS_ANALYTICS_SESSION_KEY);
+};
+
+export const getAnalyticsSessionId = () => {
+  return window.sessionStorage.getItem(INTEGRATIONS_ANALYTICS_SESSION_KEY);
+};
+
+type SingleIntegrationEvent = {
+  eventKey: 'integrations.install_modal_opened';
+  eventName: 'Integrations: Install Modal Opened';
+  integration: string; //the slug
+  integration_type: 'sentry_app' | 'plugin' | 'first_party';
+  already_installed: boolean;
+};
+
+//TODO(Steve): hook up events
+type MultipleIntegrationsEvent = {
+  eventKey: 'integrations.index_viewed';
+  eventName: 'Integrations: Index Page Viewed';
+  integrations_installed: number;
+};
+
+type IntegrationsEventParams = (MultipleIntegrationsEvent | SingleIntegrationEvent) & {
+  view?: 'external_install' | 'integrations_page' | 'legacy_integrations';
+} & Parameters<Hooks['analytics:track-event']>[0];
+
+/**
+ * Tracks an event for ecosystem analytics
+ * Must be tied to an organization
+ * Uses the current session ID or generates a new one if startSession == true
+ */
+export const trackIntegrationEvent = (
+  analtyicsParams: IntegrationsEventParams,
+  org: Organization,
+  options?: {startSession: boolean}
+) => {
+  const {startSession} = options || {};
+  const sessionId = startSession ? startAnalyticsSession() : getAnalyticsSessionId();
+  const fullParams = {
+    analytics_session_id: sessionId,
+    organization_id: org.id,
+    role: org.role,
+    ...analtyicsParams,
+  };
+  //could put this into a debug method or for the main trackAnalyticsEvent event
+  if (window.localStorage.getItem('DEBUG') === '1') {
+    // eslint-disable-next-line no-console
+    console.log('trackIntegrationEvent', fullParams);
+  }
+  return trackAnalyticsEvent(fullParams);
+};
diff --git a/src/sentry/static/sentry/app/views/integrationInstallation.tsx b/src/sentry/static/sentry/app/views/integrationInstallation.tsx
index fc73409798..b59e77deb6 100644
--- a/src/sentry/static/sentry/app/views/integrationInstallation.tsx
+++ b/src/sentry/static/sentry/app/views/integrationInstallation.tsx
@@ -13,6 +13,7 @@ import IndicatorStore from 'app/stores/indicatorStore';
 import NarrowLayout from 'app/components/narrowLayout';
 import SelectControl from 'app/components/forms/selectControl';
 import {Organization, IntegrationProvider, Integration} from 'app/types';
+import {trackIntegrationEvent} from 'app/utils/integrationUtil';
 
 type Props = RouteComponentProps<{providerId: string; installationId: string}, {}>;
 
@@ -40,6 +41,29 @@ export default class IntegrationInstallation extends AsyncView<Props, State> {
     return t('Choose Installation Organization');
   }
 
+  trackOpened() {
+    const {organization} = this.state;
+    const provider = this.provider;
+    //should have these set but need to make TS happy
+    if (!organization || !provider) {
+      return;
+    }
+
+    trackIntegrationEvent(
+      {
+        eventKey: 'integrations.install_modal_opened',
+        eventName: 'Integrations: Install Modal Opened',
+        integration_type: 'first_party',
+        integration: provider.key,
+        //We actually don't know if it's installed but neither does the user in the view and multiple installs is possible
+        already_installed: false,
+        view: 'external_install',
+      },
+      organization,
+      {startSession: true}
+    );
+  }
+
   get provider(): IntegrationProvider | undefined {
     return this.state.providers.find(p => p.key === this.props.params.providerId);
   }
@@ -57,7 +81,8 @@ export default class IntegrationInstallation extends AsyncView<Props, State> {
     const reloading = false;
 
     this.api.request(`/organizations/${orgId}/`, {
-      success: (organization: Organization) => this.setState({organization, reloading}),
+      success: (organization: Organization) =>
+        this.setState({organization, reloading}, this.trackOpened),
       error: () => {
         this.setState({reloading});
         IndicatorStore.addError(t('Failed to retrieve organization details'));
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx
index e77e843cc0..9b511f1a6e 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx
@@ -75,7 +75,12 @@ export default class ProviderRow extends React.Component<Props> {
     const organization = this.context.organization;
     const provider = this.props.provider;
     const onAddIntegration = this.props.onInstall;
-    openIntegrationDetails({provider, organization, onAddIntegration});
+    openIntegrationDetails({
+      provider,
+      organization,
+      onAddIntegration,
+      isInstalled: this.isEnabled,
+    });
   };
 
   // Rendering
diff --git a/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx b/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx
index affdeea52d..b3240a581b 100644
--- a/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx
+++ b/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx
@@ -14,7 +14,6 @@ import OrganizationAvatar from 'app/components/avatar/organizationAvatar';
 import SentryAppDetailsModal from 'app/components/modals/sentryAppDetailsModal';
 import {installSentryApp} from 'app/actionCreators/sentryAppInstallations';
 import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
-import {recordInteraction} from 'app/utils/recordSentryAppInteraction';
 import {
   LightWeightOrganization,
   Organization,
@@ -33,10 +32,6 @@ type State = AsyncView['state'] & {
 };
 
 export default class SentryAppExternalInstallation extends AsyncView<Props, State> {
-  componentDidMount() {
-    recordInteraction(this.sentryAppSlug, 'sentry_app_viewed');
-  }
-
   getDefaultState() {
     const state = super.getDefaultState();
     return {
@@ -128,13 +123,14 @@ export default class SentryAppExternalInstallation extends AsyncView<Props, Stat
       const isInstalled = installations
         .map(install => install.app.slug)
         .includes(this.sentryAppSlug);
-      this.setState({organization, isInstalled});
+      //all state fields should be set at the same time so analytics in SentryAppDetailsModal works properly
+      this.setState({organization, isInstalled, reloading: false});
     } catch (err) {
       IndicatorStore.addError(
         t('Failed to retrieve organization or integration details')
       );
+      this.setState({reloading: false});
     }
-    this.setState({reloading: false});
   };
 
   onRequestSuccess = ({stateKey, data}) => {
@@ -273,7 +269,7 @@ export default class SentryAppExternalInstallation extends AsyncView<Props, Stat
             onInstall={this.onInstall}
             closeModal={this.onClose}
             isInstalled={this.disableInstall}
-            closeOnInstall={false}
+            view="external_install"
           />
         )}
       </div>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/index.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/index.tsx
index 8e3e48bc45..b533646087 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/index.tsx
@@ -15,7 +15,6 @@ import PluginIcon from 'app/plugins/components/pluginIcon';
 import {openSentryAppDetailsModal, openModal} from 'app/actionCreators/modal';
 import SentryAppPublishRequestModal from 'app/components/modals/sentryAppPublishRequestModal';
 import {Organization, SentryApp, SentryAppInstallation} from 'app/types';
-import {recordInteraction} from 'app/utils/recordSentryAppInteraction';
 import theme from 'app/utils/theme';
 import SentryApplicationRowButtons from './sentryApplicationRowButtons';
 
@@ -100,8 +99,6 @@ export default class SentryApplicationRow extends React.PureComponent<Props> {
     const {app, onInstall, organization} = this.props;
     const isInstalled = !!this.isInstalled;
 
-    recordInteraction(app.slug, 'sentry_app_viewed');
-
     onInstall &&
       openSentryAppDetailsModal({
         sentryApp: app,
diff --git a/tests/js/spec/components/modals/sentryAppDetailsModal.spec.jsx b/tests/js/spec/components/modals/sentryAppDetailsModal.spec.jsx
index b7156eb96d..d88d5d2df1 100644
--- a/tests/js/spec/components/modals/sentryAppDetailsModal.spec.jsx
+++ b/tests/js/spec/components/modals/sentryAppDetailsModal.spec.jsx
@@ -11,6 +11,7 @@ describe('SentryAppDetailsModal', function() {
   let isInstalled;
   let closeModal;
   const installButton = 'Button[data-test-id="install"]';
+  let sentryAppInteractionRequest;
 
   function render() {
     return mountWithTheme(
@@ -38,6 +39,13 @@ describe('SentryAppDetailsModal', function() {
       body: [],
     });
 
+    sentryAppInteractionRequest = MockApiClient.addMockResponse({
+      url: `/sentry-apps/${sentryApp.slug}/interaction/`,
+      method: 'POST',
+      statusCode: 200,
+      body: {},
+    });
+
     wrapper = render();
   });
 
@@ -45,6 +53,18 @@ describe('SentryAppDetailsModal', function() {
     expect(wrapper.find('Name').text()).toBe(sentryApp.name);
   });
 
+  it('records interaction request', () => {
+    expect(sentryAppInteractionRequest).toHaveBeenCalledWith(
+      `/sentry-apps/${sentryApp.slug}/interaction/`,
+      expect.objectContaining({
+        method: 'POST',
+        data: {
+          tsdbField: 'sentry_app_viewed',
+        },
+      })
+    );
+  });
+
   it('displays the Integrations description', () => {
     expect(wrapper.find('Description').text()).toContain(sentryApp.overview);
   });
diff --git a/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
index 73e535b8b0..0e26ebc601 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
@@ -219,13 +219,6 @@ describe('OrganizationIntegrations', () => {
           body: [sentryApp],
         });
 
-        const sentryAppInteractionRequest = Client.addMockResponse({
-          url: `/sentry-apps/${sentryApp.slug}/interaction/`,
-          method: 'POST',
-          statusCode: 200,
-          body: {},
-        });
-
         wrapper = mountWithTheme(
           <OrganizationIntegrations organization={org} {...otherProps} />,
           routerContext
@@ -239,16 +232,6 @@ describe('OrganizationIntegrations', () => {
           onInstall: expect.any(Function),
           organization: org,
         });
-
-        expect(sentryAppInteractionRequest).toHaveBeenCalledWith(
-          `/sentry-apps/${sentryApp.slug}/interaction/`,
-          expect.objectContaining({
-            method: 'POST',
-            data: {
-              tsdbField: 'sentry_app_viewed',
-            },
-          })
-        );
       });
 
       it('Opens the integration dialog on install', function() {
@@ -256,6 +239,7 @@ describe('OrganizationIntegrations', () => {
           provider: githubProvider,
           onAddIntegration: wrapper.instance().onInstall,
           organization: routerContext.context.organization,
+          isInstalled: false,
         };
 
         wrapper
diff --git a/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx
index f001901f87..847ca78926 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx
+++ b/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx
@@ -41,21 +41,12 @@ describe('Sentry App Installations', function() {
   });
 
   describe('when installing', () => {
-    let sentryAppInteractionRequest;
-
     beforeEach(() => {
       Client.addMockResponse({
         url: `/organizations/${org.slug}/sentry-app-installations/`,
         method: 'POST',
         body: install,
       });
-
-      sentryAppInteractionRequest = Client.addMockResponse({
-        url: `/sentry-apps/${sentryApp.slug}/interaction/`,
-        method: 'POST',
-        statusCode: 200,
-        body: {},
-      });
     });
 
     it('disallows installation when already installed', () => {
@@ -77,16 +68,6 @@ describe('Sentry App Installations', function() {
           isInstalled: false,
         })
       );
-
-      expect(sentryAppInteractionRequest).toHaveBeenCalledWith(
-        `/sentry-apps/${sentryApp.slug}/interaction/`,
-        expect.objectContaining({
-          method: 'POST',
-          data: {
-            tsdbField: 'sentry_app_viewed',
-          },
-        })
-      );
     });
 
     it('sentry app is shown as installed', async () => {
@@ -114,15 +95,6 @@ describe('Sentry App Installations', function() {
           isInstalled: false,
         })
       );
-      expect(sentryAppInteractionRequest).toHaveBeenCalledWith(
-        `/sentry-apps/${sentryApp.slug}/interaction/`,
-        expect.objectContaining({
-          method: 'POST',
-          data: {
-            tsdbField: 'sentry_app_viewed',
-          },
-        })
-      );
       wrapper.instance().handleInstall(sentryApp);
       await tick();
       expect(window.location.assign).toHaveBeenCalledWith(
