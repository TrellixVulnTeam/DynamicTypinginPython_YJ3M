commit e650ab725c731f1c776f4fcbfa7f1b7dac3adca7
Author: Pascal Borreli <pascal@borreli.com>
Date:   Thu Mar 14 10:15:40 2013 +0000

    Fixed typos

diff --git a/CHANGES b/CHANGES
index 78f4283f74..6b2544e260 100644
--- a/CHANGES
+++ b/CHANGES
@@ -3,7 +3,7 @@ Version 5.4.0
 
 SENTRY_PUBLIC now dictates whether or not a Sentry install should be considered
 accessible by all users or not. This should better solve the use-case of companies
-hosting a Sentry instance internally and not nescesarily needing the permissions
+hosting a Sentry instance internally and not necessarily needing the permissions
 that teams give you.
 
 If enabled, all teams and all projects will be accessible all members (for any endpoint
@@ -344,14 +344,14 @@ now __init__(request, project).
 Version 3.6.0
 -------------
 
-This version focuses on improving mebership control. It includes the ability to revoke
+This version focuses on improving membership control. It includes the ability to revoke
 project members access temporarily (by suspending them), as well as revoking users
 (outside of Sentry) via the user.is_active flag.
 
 Additionally, it brings the beginnings of an "invite user" flow, allowing you to
 invite users who may or may not already have accounts in the system. We plan to improve
 this flow in an upcoming release to allow invitees easy registration within the system
-if they dont already have an account.
+if they don't already have an account.
 
 Version 3.5.0
 -------------
@@ -539,7 +539,7 @@ Version 2.2.1
 Version 2.2.0
 -------------
 
-* Sentry has a brand new design utlizing Bootstrap 2.
+* Sentry has a brand new design utilizing Bootstrap 2.
 * Superusers can now create projects for users.
 
 Version 2.1.3
diff --git a/docs/client/index.rst b/docs/client/index.rst
index 387931d284..ad78a9ec7b 100644
--- a/docs/client/index.rst
+++ b/docs/client/index.rst
@@ -14,7 +14,7 @@ protocol:
 - iOS / Objective-C (`raven-objc <https://github.com/getsentry/raven-objc>`_)
 - C# (`raven-csharp <https://github.com/getsentry/raven-csharp>`_)
 
-Additionally, the following experimental clients are availabe:
+Additionally, the following experimental clients are available:
 
 - Action Script 3 (`raven-as3 <https://github.com/skitoo/raven-as3>`_)
 - CFML (`raven-cfml <https://github.com/jmacul2/raven-cfml>`_)
diff --git a/docs/contributing/index.rst b/docs/contributing/index.rst
index fb210d25bc..97c73c955b 100644
--- a/docs/contributing/index.rst
+++ b/docs/contributing/index.rst
@@ -62,7 +62,7 @@ You'll likely want to make some changes to the default configuration (we recomme
 Coding Standards
 ----------------
 
-Sentry follows the guidelines layed out in `pep8 <http://www.python.org/dev/peps/pep-0008/>`_  with a little bit
+Sentry follows the guidelines laid out in `pep8 <http://www.python.org/dev/peps/pep-0008/>`_  with a little bit
 of flexibility on things like line length. We always give way for the `Zen of Python <http://www.python.org/dev/peps/pep-0020/>`_. We also use strict mode for JavaScript, enforced by jshint.
 
 You can run all linters with ``make lint``, or respectively ``lint-python`` or ``lint-js``.
@@ -104,7 +104,7 @@ Developing with Django
 
 Because Sentry is just Django, you can use all of the standard Django functionality. The only difference is you'll be accessing commands that would normally go through manage.py using the ``sentry`` CLI helper instead.
 
-For example, you probably don't want to use ``sentry start`` for development, as it doesnt support anything like
+For example, you probably don't want to use ``sentry start`` for development, as it doesn't support anything like
 automatic reloading on code changes. For that you'd want to use the standard builtin ``runserver`` command:
 
 ::
diff --git a/docs/developer/client/index.rst b/docs/developer/client/index.rst
index 0601749fec..c44155a3f6 100644
--- a/docs/developer/client/index.rst
+++ b/docs/developer/client/index.rst
@@ -495,7 +495,7 @@ And then you capture an event::
         'tags': {'foo': 'baz'},
     })
 
-The client should send the following usptream for ``tags``::
+The client should send the following upstream for ``tags``::
 
     {
         "tags": [
diff --git a/src/sentry/buffer/redis.py b/src/sentry/buffer/redis.py
index 98dc570fbb..296aceb9f2 100644
--- a/src/sentry/buffer/redis.py
+++ b/src/sentry/buffer/redis.py
@@ -106,7 +106,7 @@ class RedisBuffer(Buffer):
                     continue
                 extra[key] = pickle.loads(str(value))
 
-        # Filter out empty or zero'd results to avoid a potentially unnescesary update
+        # Filter out empty or zero'd results to avoid a potentially unnecessary update
         results = dict((k, int(v)) for k, v in results.iteritems() if int(v or 0) > 0)
         if not results:
             return
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index e2886a0be9..85b7b1f11b 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -7,7 +7,7 @@ sentry.coreapi
 """
 # TODO: We should make the API a class, and UDP/HTTP just inherit from it
 #       This will make it so we can more easily control logging with various
-#       metadata (rather than generic log messages which arent useful).
+#       metadata (rather than generic log messages which aren't useful).
 
 from datetime import datetime, timedelta
 import base64
@@ -142,7 +142,7 @@ def project_from_auth_vars(auth_vars):
         except TeamMember.DoesNotExist:
             raise APIUnauthorized('Member does not have access to project')
 
-        # We have to refetch this as it may have been catched
+        # We have to refetch this as it may have been caught
         pk.user = User.objects.get(id=pk.user_id)
         if not pk.user.is_active:
             raise APIUnauthorized('Account is not active')
@@ -177,7 +177,7 @@ def project_from_api_key_and_id(api_key, project_id):
         except TeamMember.DoesNotExist:
             raise APIUnauthorized('Member does not have access to project')
 
-        # We have to refetch this as it may have been catched
+        # We have to refetch this as it may have been caught
         pk.user = User.objects.get(id=pk.user_id)
         if not pk.user.is_active:
             raise APIUnauthorized('Account is not active')
diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index abbe565f26..b3971b9305 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -90,7 +90,7 @@ def get_context(lineno, context_line, pre_context=None, post_context=None, filen
 
 class Interface(object):
     """
-    An interface is a structured represntation of data, which may
+    An interface is a structured representation of data, which may
     render differently than the default ``extra`` metadata in an event.
     """
 
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index ec86949df8..4ecb9d9b7d 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -120,7 +120,7 @@ class BaseManager(models.Manager):
             # store pointers
             cache.set(self.__get_lookup_cache_key(**{key: getattr(instance, key)}), pk_val, self.cache_ttl)  # 1 hour
 
-        # Ensure we dont serialize the database into the cache
+        # Ensure we don't serialize the database into the cache
         db = instance._state.db
         instance._state.db = None
         # store actual object
@@ -248,7 +248,7 @@ class ScoreClause(object):
         elif engine.startswith('mysql'):
             sql = 'log(times_seen) * 600 + unix_timestamp(last_seen)'
         else:
-            # XXX: if we cant do it atomicly let's do it the best we can
+            # XXX: if we cant do it atomically let's do it the best we can
             sql = self.group.get_score()
 
         return (sql, [])
@@ -438,7 +438,7 @@ class GroupManager(BaseManager, ChartMixin):
             **kwargs
         )
 
-        # Calculcate the checksum from the first highest scoring interface
+        # Calculate the checksum from the first highest scoring interface
         if not checksum:
             checksum = get_checksum_from_event(event)
 
@@ -534,7 +534,7 @@ class GroupManager(BaseManager, ChartMixin):
                 extra['message'] = message
 
             if group.status == STATUS_RESOLVED or group.is_over_resolve_age():
-                # Makin things atomic
+                # Making things atomic
                 is_new = bool(self.filter(
                     id=group.id,
                 ).exclude(
diff --git a/src/sentry/middleware.py b/src/sentry/middleware.py
index 3b2d4fa051..af1c6ca0d0 100644
--- a/src/sentry/middleware.py
+++ b/src/sentry/middleware.py
@@ -6,7 +6,7 @@ from django.core.urlresolvers import reverse
 
 class SentryMiddleware(object):
     def process_request(self, request):
-        # HACK: bootstrap some env crud if we havent yet
+        # HACK: bootstrap some env crud if we haven't yet
         if not settings.URL_PREFIX:
             settings.URL_PREFIX = request.build_absolute_uri(reverse('sentry')).strip('/')
 
diff --git a/src/sentry/models.py b/src/sentry/models.py
index a8fa021b42..8c6f06a20a 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -221,8 +221,8 @@ class Project(Model):
         super(Project, self).save(*args, **kwargs)
 
     def delete(self):
-        # This hadles cascades properly
-        # TODO: this doesnt clean up the index
+        # This handles cascades properly
+        # TODO: this doesn't clean up the index
         for model in (Event, Group, FilterValue, GroupTag, GroupCountByMinute):
             model.objects.filter(project=self).delete()
         super(Project, self).delete()
@@ -723,7 +723,7 @@ class GroupBookmark(Model):
     """
     project = models.ForeignKey(Project, related_name="bookmark_set")  # denormalized
     group = models.ForeignKey(Group, related_name="bookmark_set")
-    # namespace related_name on User since we dont own the model
+    # namespace related_name on User since we don't own the model
     user = models.ForeignKey(User, related_name="sentry_bookmark_set")
 
     objects = BaseManager()
diff --git a/src/sentry/pool/redis.py b/src/sentry/pool/redis.py
index bc5e0b492f..8df101a2c0 100644
--- a/src/sentry/pool/redis.py
+++ b/src/sentry/pool/redis.py
@@ -11,7 +11,7 @@ from nydus.db import create_cluster
 
 class RedisCappedPool(object):
     """
-    Implements a capped queue based on Reservoir Sammpling
+    Implements a capped queue based on Reservoir Sampling
     """
     key_expire = 60 * 60  # 1 hour
 
@@ -27,7 +27,7 @@ class RedisCappedPool(object):
             'hosts': hosts,
         })
         # We could set this to the maximum value of random.random() (1.0) if we new this pool class
-        # could stay instantiated. Unfortuantely we'll need an offset per project, which could grow
+        # could stay instantiated. Unfortunately we'll need an offset per project, which could grow
         # indefinitely and would require us to have an LRU.
         self.offset = None
 
@@ -53,11 +53,11 @@ class RedisCappedPool(object):
         """
         val = random.random()
         with self.conn.map() as conn:
-            # we have to fetch both values as we dont know which one is actually set
+            # we have to fetch both values as we don't know which one is actually set
             item_a = conn.zrange(self.keyspace, val, 1, withscores=True)
             item_b = conn.zrevrange(self.keyspace, val, 1, withscores=True)
 
-        # pick either item, doesnt matter
+        # pick either item, doesn't matter
         item, score = (item_a or item_b)
 
         # remove matching scored item (even if its not the same item)
diff --git a/src/sentry/tasks/check_alerts.py b/src/sentry/tasks/check_alerts.py
index 6994f9e164..6ca7b5e1f0 100644
--- a/src/sentry/tasks/check_alerts.py
+++ b/src/sentry/tasks/check_alerts.py
@@ -63,7 +63,7 @@ def check_alerts(**kwargs):
     min_date = max_date - timedelta(minutes=MINUTE_NORMALIZATION)
 
     # find each project which has data for the last interval
-    # TODO: we could force more work on the db by eliminating onces which dont have the full aggregate we need
+    # TODO: we could force more work on the db by eliminating onces which don't have the full aggregate we need
     qs = ProjectCountByMinute.objects.filter(
         date__lte=max_date,
         date__gt=min_date,
@@ -112,7 +112,7 @@ def check_project_alerts(project_id, when, count, **kwargs):
         date__gt=min_date,
     ).values_list('times_seen', flat=True))
 
-    # Bail if we dont have enough data points
+    # Bail if we don't have enough data points
     if len(data) != intervals:
         return
 
diff --git a/src/sentry/tasks/cleanup.py b/src/sentry/tasks/cleanup.py
index 4bc959eac9..195a78ef77 100644
--- a/src/sentry/tasks/cleanup.py
+++ b/src/sentry/tasks/cleanup.py
@@ -14,7 +14,7 @@ def cleanup(days=30, project=None, chunk_size=1000, **kwargs):
     """
     Deletes a portion of the trailing data in Sentry based on
     their creation dates. For example, if ``days`` is 30, this
-    would attempt to clean up all data thats older than 30 days.
+    would attempt to clean up all data that's older than 30 days.
 
     :param project: limit all deletion scopes to messages that are part
                     of the given project
diff --git a/src/sentry/tasks/fetch_source.py b/src/sentry/tasks/fetch_source.py
index 179037456b..6dbebd9f9f 100644
--- a/src/sentry/tasks/fetch_source.py
+++ b/src/sentry/tasks/fetch_source.py
@@ -136,7 +136,7 @@ def fetch_sourcemap(url, logger=None):
 
     body = result.body
     # According to spec (https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.h7yy76c5il9v)
-    # A SouceMap may be prepended with ")]}'" to cause a Javascript error.
+    # A SourceMap may be prepended with ")]}'" to cause a Javascript error.
     # If the file starts with that string, ignore the entire first line.
     if body.startswith(")]}'"):
         body = body.split('\n', 1)[1]
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index a553a72ba8..aab6367213 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -5,7 +5,7 @@ sentry.templatetags.sentry_helpers
 :copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-# XXX: Import django-paging's template tags so we dont have to worry about
+# XXX: Import django-paging's template tags so we don't have to worry about
 #      INSTALLED_APPS
 from django import template
 from django.template import RequestContext
diff --git a/src/sentry/utils/db.py b/src/sentry/utils/db.py
index d2eee3e5fa..46ecb08542 100644
--- a/src/sentry/utils/db.py
+++ b/src/sentry/utils/db.py
@@ -25,7 +25,7 @@ def get_db_engine(alias='default'):
 
 
 def has_trending(alias='default'):
-    # we only support trend queriess for postgres to db optimization
+    # we only support trend queries for postgres to db optimization
     # issues in mysql, and lack of anything useful in sqlite
     return get_db_engine('default').startswith('postgres')
 
diff --git a/src/sentry/utils/query.py b/src/sentry/utils/query.py
index 58aac453ba..b5854d2c35 100644
--- a/src/sentry/utils/query.py
+++ b/src/sentry/utils/query.py
@@ -110,7 +110,7 @@ class RangeQuerySetWrapper(object):
                 if cur_value == last_value:
                     offset += 1
                 else:
-                    # offset needs to be based at 1 so we dont return a row
+                    # offset needs to be based at 1 so we don't return a row
                     # that was already selected
                     last_value = cur_value
                     offset = 1
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index c2d9dfa7dd..4286eca84b 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -216,7 +216,7 @@ class StoreView(APIView):
     The primary endpoint for storing new events.
 
     This will validate the client's authentication and data, and if
-    successfull pass on the payload to the internal database handler.
+    successful pass on the payload to the internal database handler.
 
     Authentication works in three flavors:
 
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 414db44c1b..0dcc007173 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -28,7 +28,7 @@ class RegistrationForm(forms.ModelForm):
         value = self.cleaned_data.get('email')
         if not value:
             return
-        # We dont really care about why people think they need multiple User accounts with the same
+        # We don't really care about why people think they need multiple User accounts with the same
         # email address -- dealwithit.jpg
         if User.objects.filter(email__iexact=value).exists():
             raise forms.ValidationError(_('An account is already registered with that email address.'))
@@ -77,7 +77,7 @@ class AccountSettingsForm(forms.Form):
         self.user = user
         super(AccountSettingsForm, self).__init__(*args, **kwargs)
 
-        # HACK: dont require current password if they dont have one
+        # HACK: don't require current password if they don't have one
         if self.user.password in EMPTY_PASSWORD_VALUES:
             del self.fields['old_password']
 
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index da07df1818..90252ef40e 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -83,7 +83,7 @@ class RemoveProjectForm(forms.Form):
             self.fields['project'].choices = [(p.pk, p.name) for p in project_list]
             self.fields['project'].widget.choices = self.fields['project'].choices
 
-        # HACK: dont require current password if they dont have one
+        # HACK: don't require current password if they don't have one
         if self.user.password in EMPTY_PASSWORD_VALUES:
             del self.fields['password']
 
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index 7f06e2e0dc..f92e3630c5 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -133,7 +133,7 @@ def _get_group_list(request, project):
         event_list = event_list.extra(
             select={'sort_value': score_clause},
         )
-        # HACK: dont sort by the same column twice
+        # HACK: don't sort by the same column twice
         if sort == 'date':
             event_list = event_list.order_by('-last_seen')
         else:
diff --git a/src/sentry/web/frontend/projects.py b/src/sentry/web/frontend/projects.py
index 9ba54b54ba..80205db9f3 100644
--- a/src/sentry/web/frontend/projects.py
+++ b/src/sentry/web/frontend/projects.py
@@ -146,7 +146,7 @@ def manage_project(request, team, project):
     if result is False and not request.user.has_perm('sentry.can_change_project'):
         return HttpResponseRedirect(reverse('sentry'))
 
-    # XXX: We probably shouldnt allow changing the team unless they're the project owner
+    # XXX: We probably shouldn't allow changing the team unless they're the project owner
     team_list = Team.objects.get_for_user(project.owner or request.user, MEMBER_OWNER)
 
     can_admin_project = request.user == project.owner or request.user.has_perm('sentry.can_change_project')
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 7be1afc51d..16bfc75101 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -38,7 +38,7 @@ def group_is_public(group, user):
     verifying if the user should have a restricted view of something they already have access
     to.
     """
-    # if the group isn't public, this check doesnt matter
+    # if the group isn't public, this check doesn't matter
     if not group.is_public:
         return False
     # anonymous users always are viewing as if it were public
