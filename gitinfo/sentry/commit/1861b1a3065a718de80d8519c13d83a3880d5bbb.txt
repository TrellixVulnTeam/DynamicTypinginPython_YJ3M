commit 1861b1a3065a718de80d8519c13d83a3880d5bbb
Author: Mark Story <mark@mark-story.com>
Date:   Fri Mar 8 16:30:35 2019 -0500

    perf: Don't show all teams when modifying/creating users (#12313)
    
    Some users have 100s of teams, rendering them all results in poor
    performance and isn't great to use. Instead only render the active teams
    and use our typeahead pattern for adding teams. Typeahead results are
    fetched from the server as necessary.
    
    Fixes SEN-233

diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
index 2b6d3a8920..2c51c56372 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
@@ -195,45 +195,24 @@ const InviteMember = createReactClass({
       });
   },
 
-  toggleTeam(slug) {
-    this.setState(state => {
-      const {selectedTeams} = state;
-      if (selectedTeams.has(slug)) {
-        selectedTeams.delete(slug);
-      } else {
-        selectedTeams.add(slug);
-      }
-      return {
-        selectedTeams,
-      };
-    });
-  },
-
-  allSelected() {
-    const {teams} = this.getOrganization();
+  handleAddTeam(slug) {
     const {selectedTeams} = this.state;
-    return teams.length === selectedTeams.size;
+    if (!selectedTeams.has(slug)) {
+      selectedTeams.add(slug);
+    }
+    this.setState({selectedTeams});
   },
 
-  handleSelectAll() {
-    const {teams} = this.getOrganization();
+  handleRemoveTeam(slug) {
+    const {selectedTeams} = this.state;
+    selectedTeams.delete(slug);
 
-    this.setState(state => {
-      let {selectedTeams} = state;
-      if (this.allSelected()) {
-        selectedTeams.clear();
-      } else {
-        selectedTeams = new Set(teams.map(({slug}) => slug));
-      }
-      return {
-        selectedTeams,
-      };
-    });
+    this.setState({selectedTeams});
   },
 
   render() {
     const {error, loading, roleList, selectedRole, selectedTeams} = this.state;
-    const {teams} = this.getOrganization();
+    const organization = this.getOrganization();
     const {invitesEnabled} = ConfigStore.getConfig();
     const {isSuperuser} = ConfigStore.get('user');
 
@@ -271,11 +250,10 @@ const InviteMember = createReactClass({
               setRole={slug => this.setState({selectedRole: slug})}
             />
             <TeamSelect
-              teams={teams}
-              selectedTeams={selectedTeams}
-              toggleTeam={this.toggleTeam}
-              onSelectAll={this.handleSelectAll}
-              allSelected={this.allSelected}
+              organization={organization}
+              selectedTeams={Array.from(selectedTeams.values())}
+              onAddTeam={this.handleAddTeam}
+              onRemoveTeam={this.handleRemoveTeam}
             />
             <Button
               priority="primary"
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/roleSelect.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/roleSelect.jsx
index 8230f905d8..a8ceb5b3b1 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/roleSelect.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/roleSelect.jsx
@@ -31,7 +31,7 @@ class RoleSelect extends React.Component {
     const {disabled, enforceAllowed, roleList, selectedRole} = this.props;
 
     return (
-      <Panel className="new-invite-team">
+      <Panel>
         <PanelHeader>{t('Role')}</PanelHeader>
 
         <PanelBody>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/teamSelect.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/teamSelect.jsx
index 6d3b8e7b32..e227f33717 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/teamSelect.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/teamSelect.jsx
@@ -1,85 +1,159 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
+import {debounce} from 'lodash';
 
+import {Box} from 'grid-emotion';
 import {t} from 'app/locale';
 import Button from 'app/components/button';
-import Checkbox from 'app/components/checkbox';
-import IdBadge from 'app/components/idBadge';
+import SentryTypes from 'app/sentryTypes';
+import Link from 'app/components/link';
 import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
+import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
+import DropdownButton from 'app/components/dropdownButton';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import space from 'app/styles/space';
+import withApi from 'app/utils/withApi';
 
 class TeamSelect extends React.Component {
   static propTypes = {
+    api: PropTypes.object.isRequired,
+    organization: SentryTypes.Organization.isRequired,
     disabled: PropTypes.bool,
-    selectedTeams: PropTypes.instanceOf(Set),
-    teams: PropTypes.array,
-    toggleTeam: PropTypes.func,
-    onSelectAll: PropTypes.func,
-    allSelected: PropTypes.func,
+    selectedTeams: PropTypes.array.isRequired,
+    onAddTeam: PropTypes.func.isRequired,
+    onRemoveTeam: PropTypes.func.isRequired,
   };
 
-  render() {
-    const {
-      disabled,
-      teams,
-      selectedTeams,
-      toggleTeam,
-      onSelectAll,
-      allSelected,
-    } = this.props;
-    //no need to select a team when there's only one option
-    if (teams.length < 2) return null;
-    const hasSelectAll = !!onSelectAll && !!allSelected;
+  state = {
+    teams: null,
+  };
+
+  componentDidMount() {
+    this.fetchTeams();
+  }
+
+  fetchTeams = debounce(query => {
+    const {organization} = this.props;
+    this.props.api
+      .requestPromise(`/organizations/${organization.slug}/teams/`, {
+        query: {query},
+      })
+      .then(teams => this.setState({teams}));
+  }, 100);
+
+  handleQueryUpdate = event => {
+    this.fetchTeams(event.target.value);
+  };
+
+  handleAddTeam = option => {
+    this.props.onAddTeam(option.value);
+  };
+
+  handleRemove = value => {
+    this.props.onRemoveTeam(value);
+  };
+
+  renderTeamAddDropDown() {
+    const {disabled, selectedTeams} = this.props;
+    const {teams} = this.state;
+    const noTeams = teams === null || teams.length === 0;
+    const isDisabled = noTeams || disabled;
+
+    let options;
+    if (noTeams) {
+      options = [];
+    } else {
+      options = teams
+        .filter(team => {
+          return !selectedTeams.includes(team.slug);
+        })
+        .map(team => ({
+          value: team.slug,
+          searchKey: team.slug,
+          label: <TeamDropdownElement>#{team.slug}</TeamDropdownElement>,
+        }));
+    }
 
     return (
-      <Panel className="new-invite-team">
-        <PanelHeader hasButtons={hasSelectAll}>
+      <DropdownAutoComplete
+        items={options}
+        onChange={this.handleQueryUpdate}
+        onSelect={this.handleAddTeam}
+        emptyMessage={t('No teams')}
+        disabled={isDisabled}
+      >
+        {({isOpen}) => (
+          <DropdownButton isOpen={isOpen} size="xsmall" disabled={isDisabled}>
+            {t('Add Team')}
+          </DropdownButton>
+        )}
+      </DropdownAutoComplete>
+    );
+  }
+
+  renderBody() {
+    const {organization, selectedTeams, disabled} = this.props;
+    if (selectedTeams.length === 0) {
+      return <EmptyMessage>{t('No Teams assigned')}</EmptyMessage>;
+    }
+
+    return selectedTeams.map(team => {
+      return (
+        <TeamRow
+          key={team}
+          orgId={organization.slug}
+          team={team}
+          onRemove={this.handleRemove}
+          disabled={disabled}
+        />
+      );
+    });
+  }
+
+  render() {
+    return (
+      <Panel>
+        <PanelHeader hasButtons={true}>
           {t('Team')}
-          {hasSelectAll && (
-            <Button
-              data-test-id="select-all"
-              size="small"
-              disabled={disabled}
-              onClick={onSelectAll}
-            >
-              <SelectAll>{allSelected() ? t('Deselect') : t('Select All')}</SelectAll>
-            </Button>
-          )}
+          {this.renderTeamAddDropDown()}
         </PanelHeader>
 
-        <PanelBody className="grouping-controls team-choices">
-          <PanelItem css={{flexWrap: 'wrap'}}>
-            {teams.map(team => (
-              <TeamItem key={team.slug}>
-                <label disabled={disabled} className="checkbox">
-                  <Checkbox
-                    id={team.slug}
-                    disabled={disabled}
-                    checked={selectedTeams.has(team.slug)}
-                    onChange={e => {
-                      toggleTeam(team.slug);
-                    }}
-                    style={{verticalAlign: 'middle'}}
-                  />
-                  <IdBadge team={team} hideAvatar />
-                </label>
-              </TeamItem>
-            ))}
-          </PanelItem>
-        </PanelBody>
+        <PanelBody>{this.renderBody()}</PanelBody>
       </Panel>
     );
   }
 }
 
-const TeamItem = styled.div`
-  width: 25%;
-  padding: 6px;
-`;
+const TeamRow = props => {
+  const {orgId, team, onRemove, disabled} = props;
+  return (
+    <PanelItem p={2} align="center">
+      <Box flex={1}>
+        <Link to={`/settings/${orgId}/teams/${team}/`}>#{team}</Link>
+      </Box>
+      <Button
+        size="xsmall"
+        icon="icon-circle-subtract"
+        onClick={() => onRemove(team)}
+        disabled={disabled}
+      >
+        {t('Remove')}
+      </Button>
+    </PanelItem>
+  );
+};
+
+TeamRow.propTypes = {
+  disabled: PropTypes.bool,
+  team: PropTypes.string.isRequired,
+  orgId: PropTypes.string.isRequired,
+  onRemove: PropTypes.func.isRequired,
+};
 
-const SelectAll = styled.span`
-  font-size: 13px;
-  color: ${p => (p.lightText ? p.theme.gray2 : p.theme.gray3)};
+const TeamDropdownElement = styled.div`
+  padding: ${space(0.5)} ${space(0.25)};
+  text-transform: none;
 `;
 
-export default TeamSelect;
+export default withApi(TeamSelect);
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
index 2305a50cd0..13e4fa6cb9 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
@@ -37,11 +37,9 @@ class OrganizationMemberDetail extends AsyncView {
 
   constructor(...args) {
     super(...args);
-    const {teams} = this.getOrganization();
 
     this.state = {
       ...this.state,
-      selectedTeams: new Set(teams.map(({slug}) => slug)),
       roleList: [],
       selectedRole: '',
       member: null,
@@ -115,44 +113,23 @@ class OrganizationMemberDetail extends AsyncView {
       });
   };
 
-  handleToggleTeam = slug => {
+  handleAddTeam = slug => {
     const {member} = this.state;
-    const selectedTeams = new Set(member.teams);
-    if (selectedTeams.has(slug)) {
-      selectedTeams.delete(slug);
-    } else {
-      selectedTeams.add(slug);
+    if (!member.teams.includes(slug)) {
+      member.teams.push(slug);
     }
-
-    this.setState({
-      member: {
-        ...member,
-        teams: Array.from(selectedTeams.values()),
-      },
-    });
+    this.setState({member});
   };
 
-  allSelected = () => {
+  handleRemoveTeam = slug => {
     const {member} = this.state;
-    const {teams} = this.getOrganization();
-    return teams.length === member.teams.length;
-  };
-
-  handleSelectAll = () => {
-    let {selectedTeams} = this.state;
-    const {member} = this.state;
-    const {teams} = this.getOrganization();
-
-    if (this.allSelected()) {
-      selectedTeams.clear();
-    } else {
-      selectedTeams = new Set(teams.map(({slug}) => slug));
-    }
+    const teams = new Set(member.teams);
+    teams.delete(slug);
 
     this.setState({
       member: {
         ...member,
-        teams: Array.from(selectedTeams.values()),
+        teams: Array.from(teams.values()),
       },
     });
   };
@@ -203,7 +180,8 @@ class OrganizationMemberDetail extends AsyncView {
 
   renderBody() {
     const {error, member} = this.state;
-    const {teams, access} = this.getOrganization();
+    const organization = this.getOrganization();
+    const access = organization.access;
 
     if (!member) return <NotFound />;
 
@@ -354,12 +332,11 @@ class OrganizationMemberDetail extends AsyncView {
         />
 
         <TeamSelect
-          teams={teams}
-          selectedTeams={new Set(member.teams)}
-          toggleTeam={this.handleToggleTeam}
+          organization={organization}
+          selectedTeams={member.teams}
           disabled={!canEdit}
-          onSelectAll={this.handleSelectAll}
-          allSelected={this.allSelected}
+          onAddTeam={this.handleAddTeam}
+          onRemoveTeam={this.handleRemoveTeam}
         />
 
         <Button
diff --git a/tests/acceptance/test_create_organization_member.py b/tests/acceptance/test_create_organization_member.py
index b42e009a1c..b14177ee4a 100644
--- a/tests/acceptance/test_create_organization_member.py
+++ b/tests/acceptance/test_create_organization_member.py
@@ -33,7 +33,6 @@ class CreateOrganizationMemberTest(AcceptanceTestCase):
         self.browser.get(
             u'/organizations/{}/members/new/'.format(self.org.slug))
         self.browser.wait_until_not('.loading')
-        self.browser.element('.checkbox').click()
 
         self.browser.element(
             'input#id-email').send_keys('test@gmail.com, invalidemail')
diff --git a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
index efc7baa77c..77a8c73343 100644
--- a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
+++ b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
@@ -146,14 +146,12 @@ exports[`CreateProject should render roles when available and allowed, and handl
         selectedRole="member"
         setRole={[Function]}
       >
-        <Panel
-          className="new-invite-team"
-        >
+        <Panel>
           <Component
-            className="new-invite-team css-yahxlu-Panel e1laxa7d0"
+            className="css-yahxlu-Panel e1laxa7d0"
           >
             <div
-              className="new-invite-team css-yahxlu-Panel e1laxa7d0"
+              className="css-yahxlu-Panel e1laxa7d0"
             >
               <PanelHeader>
                 <Component
@@ -347,457 +345,306 @@ exports[`CreateProject should render roles when available and allowed, and handl
           </Component>
         </Panel>
       </RoleSelect>
-      <TeamSelect
-        allSelected={[Function]}
-        onSelectAll={[Function]}
-        selectedTeams={
-          Set {
-            "bar",
+      <withApi(TeamSelect)
+        onAddTeam={[Function]}
+        onRemoveTeam={[Function]}
+        organization={
+          Object {
+            "id": "1",
+            "slug": "testOrg",
+            "teams": Array [
+              Object {
+                "hasAccess": true,
+                "id": "1",
+                "name": "bar",
+                "slug": "bar",
+              },
+              Object {
+                "hasAccess": false,
+                "id": "2",
+                "name": "foo",
+                "slug": "foo",
+              },
+            ],
           }
         }
-        teams={
-          Array [
+        selectedTeams={Array []}
+      >
+        <TeamSelect
+          api={Client {}}
+          onAddTeam={[Function]}
+          onRemoveTeam={[Function]}
+          organization={
             Object {
-              "hasAccess": true,
               "id": "1",
-              "name": "bar",
-              "slug": "bar",
-            },
-            Object {
-              "hasAccess": false,
-              "id": "2",
-              "name": "foo",
-              "slug": "foo",
-            },
-          ]
-        }
-        toggleTeam={[Function]}
-      >
-        <Panel
-          className="new-invite-team"
+              "slug": "testOrg",
+              "teams": Array [
+                Object {
+                  "hasAccess": true,
+                  "id": "1",
+                  "name": "bar",
+                  "slug": "bar",
+                },
+                Object {
+                  "hasAccess": false,
+                  "id": "2",
+                  "name": "foo",
+                  "slug": "foo",
+                },
+              ],
+            }
+          }
+          selectedTeams={Array []}
         >
-          <Component
-            className="new-invite-team css-yahxlu-Panel e1laxa7d0"
-          >
-            <div
-              className="new-invite-team css-yahxlu-Panel e1laxa7d0"
+          <Panel>
+            <Component
+              className="css-yahxlu-Panel e1laxa7d0"
             >
-              <PanelHeader
-                hasButtons={true}
+              <div
+                className="css-yahxlu-Panel e1laxa7d0"
               >
-                <Component
-                  className="css-jmvceg-PanelHeader-getPadding e1p8v8nv0"
+                <PanelHeader
                   hasButtons={true}
                 >
-                  <Flex
-                    align="center"
+                  <Component
                     className="css-jmvceg-PanelHeader-getPadding e1p8v8nv0"
-                    justify="space-between"
+                    hasButtons={true}
                   >
-                    <Base
+                    <Flex
                       align="center"
-                      className="e1p8v8nv0 css-19i62qd-PanelHeader-getPadding"
+                      className="css-jmvceg-PanelHeader-getPadding e1p8v8nv0"
                       justify="space-between"
                     >
-                      <div
+                      <Base
+                        align="center"
                         className="e1p8v8nv0 css-19i62qd-PanelHeader-getPadding"
-                        is={null}
+                        justify="space-between"
                       >
-                        Team
-                        <Button
-                          data-test-id="select-all"
-                          disabled={false}
-                          onClick={[Function]}
-                          size="small"
+                        <div
+                          className="e1p8v8nv0 css-19i62qd-PanelHeader-getPadding"
+                          is={null}
                         >
-                          <StyledButton
-                            data-test-id="select-all"
-                            disabled={false}
-                            onClick={[Function]}
-                            role="button"
-                            size="small"
+                          Team
+                          <DropdownAutoComplete
+                            alignMenu="right"
+                            disabled={true}
+                            emptyMessage="No teams"
+                            items={Array []}
+                            onChange={[Function]}
+                            onSelect={[Function]}
                           >
-                            <Component
-                              className="css-dkprmi-StyledButton-getColors eqrebog0"
-                              data-test-id="select-all"
-                              disabled={false}
-                              onClick={[Function]}
-                              role="button"
-                              size="small"
+                            <DropdownAutoCompleteMenu
+                              alignMenu="right"
+                              blendCorner={true}
+                              disabled={true}
+                              emptyMessage="No teams"
+                              items={Array []}
+                              maxHeight={300}
+                              onChange={[Function]}
+                              onSelect={[Function]}
+                              searchPlaceholder="Filter search"
                             >
-                              <button
-                                className="css-dkprmi-StyledButton-getColors eqrebog0"
-                                data-test-id="select-all"
-                                disabled={false}
-                                onClick={[Function]}
-                                role="button"
-                                size="small"
+                              <AutoComplete
+                                closeOnSelect={true}
+                                disabled={true}
+                                inputIsActor={false}
+                                itemToString={[Function]}
+                                onSelect={[Function]}
+                                resetInputOnClose={true}
+                                shouldSelectWithEnter={true}
+                                shouldSelectWithTab={false}
                               >
-                                <ButtonLabel
-                                  size="small"
+                                <DropdownMenu
+                                  closeOnEscape={true}
+                                  isOpen={false}
+                                  keepMenuOpen={false}
+                                  onClickOutside={[Function]}
                                 >
-                                  <Component
-                                    className="css-7ui8bl-ButtonLabel eqrebog1"
-                                    size="small"
-                                  >
-                                    <span
-                                      className="css-7ui8bl-ButtonLabel eqrebog1"
+                                  <AutoCompleteRoot>
+                                    <Component
+                                      className="css-6v04yn-AutoCompleteRoot ejumqxq0"
                                     >
-                                      <SelectAll>
-                                        <span
-                                          className="css-7qfmdl-SelectAll e1tbg1m41"
-                                        >
-                                          Select All
-                                        </span>
-                                      </SelectAll>
-                                    </span>
-                                  </Component>
-                                </ButtonLabel>
-                              </button>
-                            </Component>
-                          </StyledButton>
-                        </Button>
-                      </div>
-                    </Base>
-                  </Flex>
-                </Component>
-              </PanelHeader>
-              <PanelBody
-                className="grouping-controls team-choices"
-                direction="column"
-                disablePadding={true}
-                flex={false}
-              >
-                <div
-                  className="css-9vq8an-textStyles grouping-controls team-choices"
-                >
-                  <PanelItem
-                    className="css-1jkp9i7"
-                    p={2}
-                  >
-                    <Base
-                      className="css-15ezwr8-PanelItem eo8n7lk0"
-                      p={2}
-                    >
-                      <div
-                        className="css-15ezwr8-PanelItem eo8n7lk0"
-                        is={null}
-                      >
-                        <TeamItem
-                          key="bar"
-                        >
-                          <div
-                            className="css-16v1fbz-TeamItem e1tbg1m40"
-                          >
-                            <label
-                              className="checkbox"
-                            >
-                              <Checkbox
-                                checked={false}
-                                id="bar"
-                                onChange={[Function]}
-                                style={
-                                  Object {
-                                    "verticalAlign": "middle",
-                                  }
-                                }
-                              >
-                                <input
-                                  checked={false}
-                                  className="chk-select"
-                                  id="bar"
-                                  onChange={[Function]}
-                                  style={
-                                    Object {
-                                      "verticalAlign": "middle",
-                                    }
-                                  }
-                                  type="checkbox"
-                                />
-                              </Checkbox>
-                              <IdBadge
-                                hideAvatar={true}
-                                team={
-                                  Object {
-                                    "hasAccess": true,
-                                    "id": "1",
-                                    "name": "bar",
-                                    "slug": "bar",
-                                  }
-                                }
-                              >
-                                <InlineErrorBoundary
-                                  mini={true}
-                                >
-                                  <ErrorBoundary
-                                    className="css-otlbo1-InlineErrorBoundary e83vi020"
-                                    mini={true}
-                                  >
-                                    <TeamBadgeContainer
-                                      hideAvatar={true}
-                                      team={
-                                        Object {
-                                          "hasAccess": true,
-                                          "id": "1",
-                                          "name": "bar",
-                                          "slug": "bar",
-                                        }
-                                      }
-                                    >
-                                      <TeamBadge
-                                        avatarSize={24}
-                                        hideAvatar={true}
-                                        hideOverflow={true}
-                                        team={
-                                          Object {
-                                            "hasAccess": true,
-                                            "id": "1",
-                                            "name": "bar",
-                                            "slug": "bar",
-                                          }
-                                        }
+                                      <div
+                                        className="css-6v04yn-AutoCompleteRoot ejumqxq0"
                                       >
-                                        <BaseBadge
-                                          avatarProps={Object {}}
-                                          avatarSize={24}
-                                          displayName={
-                                            <BadgeDisplayName
-                                              hideOverflow={true}
-                                            >
-                                              #
-                                              bar
-                                            </BadgeDisplayName>
-                                          }
-                                          hideAvatar={true}
-                                          team={
+                                        <Actor
+                                          innerRef={[Function]}
+                                          isOpen={false}
+                                          onClick={[Function]}
+                                          onKeyDown={[Function]}
+                                          onMouseEnter={[Function]}
+                                          onMouseLeave={[Function]}
+                                          role="button"
+                                          style={
                                             Object {
-                                              "hasAccess": true,
-                                              "id": "1",
-                                              "name": "bar",
-                                              "slug": "bar",
+                                              "outline": "none",
                                             }
                                           }
+                                          tabIndex={-1}
                                         >
-                                          <Flex
-                                            align="center"
+                                          <div
+                                            className="css-17fe80j-Actor e53us8t0"
+                                            onClick={[Function]}
+                                            onKeyDown={[Function]}
+                                            onMouseEnter={[Function]}
+                                            onMouseLeave={[Function]}
+                                            role="button"
+                                            style={
+                                              Object {
+                                                "outline": "none",
+                                              }
+                                            }
+                                            tabIndex={-1}
                                           >
-                                            <Base
-                                              align="center"
-                                              className="css-5ipae5"
+                                            <DropdownButton
+                                              disabled={true}
+                                              isOpen={false}
+                                              size="xsmall"
                                             >
-                                              <div
-                                                className="css-5ipae5"
-                                                is={null}
+                                              <StyledButton
+                                                disabled={true}
+                                                isOpen={false}
+                                                size="xsmall"
                                               >
-                                                <DisplayNameAndDescription>
-                                                  <Base
-                                                    className="css-1h9j57p-DisplayNameAndDescription e165dl3i1"
+                                                <Component
+                                                  className="css-o27a2e-StyledButton e1yghndz1"
+                                                  disabled={true}
+                                                  isOpen={false}
+                                                  size="xsmall"
+                                                >
+                                                  <Button
+                                                    className="css-o27a2e-StyledButton e1yghndz1"
+                                                    disabled={true}
+                                                    size="xsmall"
                                                   >
-                                                    <div
-                                                      className="css-1h9j57p-DisplayNameAndDescription e165dl3i1"
-                                                      is={null}
+                                                    <StyledButton
+                                                      className="css-o27a2e-StyledButton e1yghndz1"
+                                                      disabled={true}
+                                                      href={null}
+                                                      onClick={[Function]}
+                                                      role="button"
+                                                      size="xsmall"
+                                                      to={null}
                                                     >
-                                                      <DisplayName
-                                                        data-test-id="badge-display-name"
+                                                      <Component
+                                                        className="e1yghndz1 css-1wbxhyw-StyledButton-getColors-StyledButton eqrebog0"
+                                                        disabled={true}
+                                                        href={null}
+                                                        onClick={[Function]}
+                                                        role="button"
+                                                        size="xsmall"
+                                                        to={null}
                                                       >
-                                                        <span
-                                                          className="css-d0rtl9-DisplayName e165dl3i2"
-                                                          data-test-id="badge-display-name"
+                                                        <button
+                                                          className="e1yghndz1 css-1wbxhyw-StyledButton-getColors-StyledButton eqrebog0"
+                                                          disabled={true}
+                                                          href={null}
+                                                          onClick={[Function]}
+                                                          role="button"
+                                                          size="xsmall"
+                                                          to={null}
                                                         >
-                                                          <BadgeDisplayName
-                                                            hideOverflow={true}
+                                                          <ButtonLabel
+                                                            size="xsmall"
                                                           >
                                                             <Component
-                                                              className="css-1boiawc-BadgeDisplayName eeoia0v0"
-                                                              hideOverflow={true}
+                                                              className="css-uthd1f-ButtonLabel eqrebog1"
+                                                              size="xsmall"
                                                             >
                                                               <span
-                                                                className="css-1boiawc-BadgeDisplayName eeoia0v0"
+                                                                className="css-uthd1f-ButtonLabel eqrebog1"
                                                               >
-                                                                #
-                                                                bar
+                                                                Add Team
+                                                                <StyledChevronDown>
+                                                                  <Component
+                                                                    className="css-17v3tc-StyledChevronDown e1yghndz0"
+                                                                  >
+                                                                    <InlineSvg
+                                                                      className="css-17v3tc-StyledChevronDown e1yghndz0"
+                                                                      src="icon-chevron-down"
+                                                                    >
+                                                                      <StyledSvg
+                                                                        className="css-17v3tc-StyledChevronDown e1yghndz0"
+                                                                        height="1em"
+                                                                        viewBox={Object {}}
+                                                                        width="1em"
+                                                                      >
+                                                                        <svg
+                                                                          className="e1yghndz0 css-1gdv3x4-StyledSvg-StyledChevronDown e2idor0"
+                                                                          height="1em"
+                                                                          viewBox={Object {}}
+                                                                          width="1em"
+                                                                        >
+                                                                          <use
+                                                                            href="#test"
+                                                                            xlinkHref="#test"
+                                                                          />
+                                                                        </svg>
+                                                                      </StyledSvg>
+                                                                    </InlineSvg>
+                                                                  </Component>
+                                                                </StyledChevronDown>
                                                               </span>
                                                             </Component>
-                                                          </BadgeDisplayName>
-                                                        </span>
-                                                      </DisplayName>
-                                                    </div>
-                                                  </Base>
-                                                </DisplayNameAndDescription>
-                                              </div>
-                                            </Base>
-                                          </Flex>
-                                        </BaseBadge>
-                                      </TeamBadge>
-                                    </TeamBadgeContainer>
-                                  </ErrorBoundary>
-                                </InlineErrorBoundary>
-                              </IdBadge>
-                            </label>
-                          </div>
-                        </TeamItem>
-                        <TeamItem
-                          key="foo"
+                                                          </ButtonLabel>
+                                                        </button>
+                                                      </Component>
+                                                    </StyledButton>
+                                                  </Button>
+                                                </Component>
+                                              </StyledButton>
+                                            </DropdownButton>
+                                          </div>
+                                        </Actor>
+                                      </div>
+                                    </Component>
+                                  </AutoCompleteRoot>
+                                </DropdownMenu>
+                              </AutoComplete>
+                            </DropdownAutoCompleteMenu>
+                          </DropdownAutoComplete>
+                        </div>
+                      </Base>
+                    </Flex>
+                  </Component>
+                </PanelHeader>
+                <PanelBody
+                  direction="column"
+                  disablePadding={true}
+                  flex={false}
+                >
+                  <div
+                    className="css-9vq8an-textStyles"
+                  >
+                    <EmptyMessage>
+                      <Wrapper>
+                        <div
+                          className="css-ev9qm0-Wrapper eh488yo0"
                         >
-                          <div
-                            className="css-16v1fbz-TeamItem e1tbg1m40"
+                          <Description
+                            noMargin={true}
                           >
-                            <label
-                              className="checkbox"
+                            <Component
+                              className="css-pwn5v-TextBlock-Description-MarginStyles eh488yo1"
+                              noMargin={true}
                             >
-                              <Checkbox
-                                checked={false}
-                                id="foo"
-                                onChange={[Function]}
-                                style={
-                                  Object {
-                                    "verticalAlign": "middle",
-                                  }
-                                }
-                              >
-                                <input
-                                  checked={false}
-                                  className="chk-select"
-                                  id="foo"
-                                  onChange={[Function]}
-                                  style={
-                                    Object {
-                                      "verticalAlign": "middle",
-                                    }
-                                  }
-                                  type="checkbox"
-                                />
-                              </Checkbox>
-                              <IdBadge
-                                hideAvatar={true}
-                                team={
-                                  Object {
-                                    "hasAccess": false,
-                                    "id": "2",
-                                    "name": "foo",
-                                    "slug": "foo",
-                                  }
-                                }
+                              <div
+                                className="css-pwn5v-TextBlock-Description-MarginStyles eh488yo1"
                               >
-                                <InlineErrorBoundary
-                                  mini={true}
-                                >
-                                  <ErrorBoundary
-                                    className="css-otlbo1-InlineErrorBoundary e83vi020"
-                                    mini={true}
-                                  >
-                                    <TeamBadgeContainer
-                                      hideAvatar={true}
-                                      team={
-                                        Object {
-                                          "hasAccess": false,
-                                          "id": "2",
-                                          "name": "foo",
-                                          "slug": "foo",
-                                        }
-                                      }
-                                    >
-                                      <TeamBadge
-                                        avatarSize={24}
-                                        hideAvatar={true}
-                                        hideOverflow={true}
-                                        team={
-                                          Object {
-                                            "hasAccess": false,
-                                            "id": "2",
-                                            "name": "foo",
-                                            "slug": "foo",
-                                          }
-                                        }
-                                      >
-                                        <BaseBadge
-                                          avatarProps={Object {}}
-                                          avatarSize={24}
-                                          displayName={
-                                            <BadgeDisplayName
-                                              hideOverflow={true}
-                                            >
-                                              #
-                                              foo
-                                            </BadgeDisplayName>
-                                          }
-                                          hideAvatar={true}
-                                          team={
-                                            Object {
-                                              "hasAccess": false,
-                                              "id": "2",
-                                              "name": "foo",
-                                              "slug": "foo",
-                                            }
-                                          }
-                                        >
-                                          <Flex
-                                            align="center"
-                                          >
-                                            <Base
-                                              align="center"
-                                              className="css-5ipae5"
-                                            >
-                                              <div
-                                                className="css-5ipae5"
-                                                is={null}
-                                              >
-                                                <DisplayNameAndDescription>
-                                                  <Base
-                                                    className="css-1h9j57p-DisplayNameAndDescription e165dl3i1"
-                                                  >
-                                                    <div
-                                                      className="css-1h9j57p-DisplayNameAndDescription e165dl3i1"
-                                                      is={null}
-                                                    >
-                                                      <DisplayName
-                                                        data-test-id="badge-display-name"
-                                                      >
-                                                        <span
-                                                          className="css-d0rtl9-DisplayName e165dl3i2"
-                                                          data-test-id="badge-display-name"
-                                                        >
-                                                          <BadgeDisplayName
-                                                            hideOverflow={true}
-                                                          >
-                                                            <Component
-                                                              className="css-1boiawc-BadgeDisplayName eeoia0v0"
-                                                              hideOverflow={true}
-                                                            >
-                                                              <span
-                                                                className="css-1boiawc-BadgeDisplayName eeoia0v0"
-                                                              >
-                                                                #
-                                                                foo
-                                                              </span>
-                                                            </Component>
-                                                          </BadgeDisplayName>
-                                                        </span>
-                                                      </DisplayName>
-                                                    </div>
-                                                  </Base>
-                                                </DisplayNameAndDescription>
-                                              </div>
-                                            </Base>
-                                          </Flex>
-                                        </BaseBadge>
-                                      </TeamBadge>
-                                    </TeamBadgeContainer>
-                                  </ErrorBoundary>
-                                </InlineErrorBoundary>
-                              </IdBadge>
-                            </label>
-                          </div>
-                        </TeamItem>
-                      </div>
-                    </Base>
-                  </PanelItem>
-                </div>
-              </PanelBody>
-            </div>
-          </Component>
-        </Panel>
-      </TeamSelect>
+                                No Teams assigned
+                              </div>
+                            </Component>
+                          </Description>
+                        </div>
+                      </Wrapper>
+                    </EmptyMessage>
+                  </div>
+                </PanelBody>
+              </div>
+            </Component>
+          </Panel>
+        </TeamSelect>
+      </withApi(TeamSelect)>
       <Button
         busy={false}
         className="invite-member-submit"
diff --git a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
index bd7d0896f1..a96f550b9e 100644
--- a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
+++ b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
@@ -16,6 +16,11 @@ describe('CreateProject', function() {
     location: {query: {}},
   };
 
+  const teams = [
+    {slug: 'bar', id: '1', name: 'bar', hasAccess: true},
+    {slug: 'foo', id: '2', name: 'foo', hasAccess: false},
+  ];
+
   const baseContext = TestStubs.routerContext([
     {
       organization: {
@@ -34,6 +39,11 @@ describe('CreateProject', function() {
     sandbox = sinon.sandbox.create();
     sandbox.stub(ConfigStore, 'getConfig').returns({id: 1, invitesEnabled: true});
     MockApiClient.clearMockResponses();
+
+    MockApiClient.addMockResponse({
+      url: '/organizations/testOrg/teams/',
+      body: teams,
+    });
   });
 
   afterEach(function() {
@@ -71,58 +81,6 @@ describe('CreateProject', function() {
     expect(wrapper.state('selectedTeams').has(team[0].slug)).toBe(true);
   });
 
-  it('can select and deselect all teams', function() {
-    MockApiClient.addMockResponse({
-      url: '/organizations/testOrg/members/me/',
-      body: {
-        roles: [
-          {
-            id: '1',
-            name: 'member',
-            desc: 'a normal member',
-            allowed: true,
-          },
-        ],
-      },
-    });
-
-    const wrapper = mount(<InviteMember {...baseProps} />, baseContext);
-
-    const first = 'TeamSelect Checkbox[id="bar"]';
-    const last = 'TeamSelect Checkbox[id="foo"]';
-    const selectAllButton = wrapper.find('Button[data-test-id="select-all"]');
-
-    expect(wrapper.state('selectedTeams').size).toBe(0);
-    expect(selectAllButton).toHaveLength(1);
-
-    // select and deselect all
-    selectAllButton.simulate('click');
-    expect(wrapper.state('selectedTeams').size).toBe(2);
-    expect(wrapper.find(first).prop('checked')).toBe(true);
-    expect(wrapper.find(last).prop('checked')).toBe(true);
-
-    selectAllButton.simulate('click');
-    expect(wrapper.state('selectedTeams').size).toBe(0);
-    expect(wrapper.find(first).prop('checked')).toBe(false);
-    expect(wrapper.find(last).prop('checked')).toBe(false);
-
-    // select one, then select all
-    wrapper.find(first).simulate('change');
-    expect(wrapper.state('selectedTeams').size).toBe(1);
-    selectAllButton.simulate('click');
-    expect(wrapper.state('selectedTeams').size).toBe(2);
-    selectAllButton.simulate('click');
-    expect(wrapper.state('selectedTeams').size).toBe(0);
-
-    // select both, then deselect all
-    wrapper.find(first).simulate('change');
-    expect(wrapper.state('selectedTeams').size).toBe(1);
-    wrapper.find(last).simulate('change');
-    expect(wrapper.state('selectedTeams').size).toBe(2);
-    selectAllButton.simulate('click');
-    expect(wrapper.state('selectedTeams').size).toBe(0);
-  });
-
   it('should use invite/add language based on config', function() {
     sandbox.restore(ConfigStore, 'getConfig');
     sandbox.stub(ConfigStore, 'getConfig').returns({id: 1, invitesEnabled: false});
@@ -211,9 +169,6 @@ describe('CreateProject', function() {
     let node = wrapper.find('RoleSelect PanelItem').first();
     node.props().onClick();
 
-    node = wrapper.find('.team-choices input').first();
-    node.props().onChange({preventDefault: () => {}});
-
     expect(wrapper).toMatchSnapshot();
 
     node = wrapper.find('.invite-member-submit').first();
@@ -255,9 +210,6 @@ describe('CreateProject', function() {
     let node = wrapper.find('RoleSelect PanelItem').first();
     node.props().onClick();
 
-    node = wrapper.find('.team-choices input').first();
-    node.props().onChange({preventDefault: () => {}});
-
     node = wrapper.find('.invite-member-submit').first();
     node.props().onClick({preventDefault: () => {}});
     expect(wrapper.state('busy')).toBe(false);
diff --git a/tests/js/spec/views/settings/organizationMembers/index.spec.jsx b/tests/js/spec/views/settings/organizationMembers/index.spec.jsx
index b05ca10b74..b34b2aecca 100644
--- a/tests/js/spec/views/settings/organizationMembers/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/index.spec.jsx
@@ -83,6 +83,11 @@ describe('OrganizationMembers', function() {
         require_link: true,
       },
     });
+    Client.addMockResponse({
+      url: '/organizations/org-id/teams/',
+      method: 'GET',
+      body: TestStubs.Team(),
+    });
     browserHistory.push.mockReset();
     OrganizationsStore.load([organization]);
   });
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationMemberDetail.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationMemberDetail.spec.jsx
index 2b229fc14c..b65a826982 100644
--- a/tests/js/spec/views/settings/organizationMembers/organizationMemberDetail.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/organizationMemberDetail.spec.jsx
@@ -65,6 +65,10 @@ describe('OrganizationMemberDetail', function() {
         url: `/organizations/${organization.slug}/members/${expiredMember.id}/`,
         body: expiredMember,
       });
+      MockApiClient.addMockResponse({
+        url: `/organizations/${organization.slug}/teams/`,
+        body: teams,
+      });
     });
 
     it('changes role to owner', function() {
@@ -101,37 +105,50 @@ describe('OrganizationMemberDetail', function() {
       );
     });
 
-    it('joins a team', function() {
+    it('leaves a team', async function() {
       wrapper = mount(
         <OrganizationMemberDetail params={{memberId: member.id}} />,
         routerContext
       );
 
-      expect(
-        wrapper
-          .find('TeamSelect Checkbox')
-          .first()
-          .prop('checked')
-      ).toBe(true);
-      expect(
-        wrapper
-          .find('TeamSelect Checkbox')
-          .last()
-          .prop('checked')
-      ).toBe(false);
+      // Remove our one team
+      const button = wrapper.find('TeamSelect TeamRow Button');
+      expect(button).toHaveLength(1);
+      button.simulate('click');
+
+      // Save Member
+      wrapper.find('Button[priority="primary"]').simulate('click');
+
+      expect(updateMember).toHaveBeenCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          data: expect.objectContaining({
+            teams: [],
+          }),
+        })
+      );
+    });
+
+    it('joins a team', async function() {
+      wrapper = mount(
+        <OrganizationMemberDetail params={{memberId: member.id}} />,
+        routerContext
+      );
+      // Wait for team list to fetch.
+      await wrapper.update();
+
+      // Should have one team enabled
+      expect(wrapper.find('TeamSelect PanelItem')).toHaveLength(1);
 
       // Select new team to join
-      wrapper
-        .find('TeamSelect Checkbox')
-        .last()
-        .simulate('change');
+      // Open the dropdown
+      wrapper.find('TeamSelect DropdownButton').simulate('click');
 
-      expect(
-        wrapper
-          .find('TeamSelect Checkbox')
-          .last()
-          .prop('checked')
-      ).toBe(true);
+      // Click the first item
+      wrapper
+        .find('TeamSelect TeamDropdownElement')
+        .first()
+        .simulate('click');
 
       // Save Member
       wrapper.find('Button[priority="primary"]').simulate('click');
@@ -147,70 +164,31 @@ describe('OrganizationMemberDetail', function() {
     });
   });
 
-  it('can select and deselect all', function() {
-    wrapper = mount(
-      <OrganizationMemberDetail params={{memberId: member.id}} />,
-      routerContext
-    );
-
-    const first = 'TeamSelect Checkbox[id="team-slug"]';
-    const last = 'TeamSelect Checkbox[id="new-team"]';
-    const selectAllButton = wrapper.find('Button[data-test-id="select-all"]');
-
-    expect(selectAllButton).toHaveLength(1);
-    expect(wrapper.find(first).prop('checked')).toBe(true);
-    expect(wrapper.find(last).prop('checked')).toBe(false);
-    expect(wrapper.state('member').teams).toHaveLength(1);
-
-    // select and deselect all
-    selectAllButton.simulate('click');
-    expect(wrapper.find(first).prop('checked')).toBe(true);
-    expect(wrapper.find(last).prop('checked')).toBe(true);
-    expect(wrapper.state('member').teams).toHaveLength(2);
-
-    selectAllButton.simulate('click');
-    expect(wrapper.find(first).prop('checked')).toBe(false);
-    expect(wrapper.find(last).prop('checked')).toBe(false);
-    expect(wrapper.state('member').teams).toHaveLength(0);
-
-    // select one, then select all
-    wrapper.find(first).simulate('change');
-    expect(wrapper.state('member').teams).toHaveLength(1);
-    selectAllButton.simulate('click');
-    expect(wrapper.state('member').teams).toHaveLength(2);
-    selectAllButton.simulate('click');
-    expect(wrapper.state('member').teams).toHaveLength(0);
-
-    // select both, then deselect all
-    wrapper.find(first).simulate('change');
-    expect(wrapper.state('member').teams).toHaveLength(1);
-    wrapper.find(last).simulate('change');
-    expect(wrapper.state('member').teams).toHaveLength(2);
-    selectAllButton.simulate('click');
-    expect(wrapper.state('member').teams).toHaveLength(0);
-  });
-
   describe('Cannot Edit', function() {
     beforeAll(function() {
       organization = TestStubs.Organization({teams, access: ['org:read']});
       routerContext = TestStubs.routerContext([{organization}]);
     });
 
-    it('can not change roles, teams, or save', function() {
+    it('can not change roles, teams, or save', async function() {
       wrapper = mount(
         <OrganizationMemberDetail params={{memberId: member.id}} />,
         routerContext
       );
+      await wrapper.update();
 
       // Should have 4 roles
       expect(wrapper.find('RoleSelect').prop('disabled')).toBe(true);
       expect(wrapper.find('TeamSelect').prop('disabled')).toBe(true);
+      expect(
+        wrapper
+          .find('TeamRow Button')
+          .first()
+          .prop('disabled')
+      ).toBe(true);
       expect(
         wrapper.find('Button[className="invite-member-submit"]').prop('disabled')
       ).toBe(true);
-      expect(wrapper.find('Button[data-test-id="select-all"]').prop('disabled')).toBe(
-        true
-      );
     });
   });
 
@@ -337,6 +315,10 @@ describe('OrganizationMemberDetail', function() {
         url: `/organizations/${organization.slug}/members/${multipleOrgs.id}/`,
         body: multipleOrgs,
       });
+      MockApiClient.addMockResponse({
+        url: `/organizations/${organization.slug}/teams/`,
+        body: teams,
+      });
     });
 
     const button = 'Button[data-test-id="reset-2fa"]';
