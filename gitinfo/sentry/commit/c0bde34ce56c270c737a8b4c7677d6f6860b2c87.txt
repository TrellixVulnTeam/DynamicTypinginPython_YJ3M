commit c0bde34ce56c270c737a8b4c7677d6f6860b2c87
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Nov 23 18:34:41 2011 -0800

    initial implementation of trends

diff --git a/sentry/templates/sentry/index.html b/sentry/templates/sentry/index.html
index 656a7fa6c1..84a3ef9dec 100644
--- a/sentry/templates/sentry/index.html
+++ b/sentry/templates/sentry/index.html
@@ -34,6 +34,7 @@
                 {% endfor %}
                 <div class="sort-by">{% trans "Sort by" %} <select name="sort" onchange="this.form.submit()">
                     <option value=""{% ifequal sort 'priority' %} selected="selected"{% endifequal %}>{% trans "Priority" %}</option>
+                    <option value="trending"{% ifequal sort 'trending' %} selected="selected"{% endifequal %}>{% trans "Trending" %}</option>
                     <option value="date"{% ifequal sort 'date' %} selected="selected"{% endifequal %}>{% trans "Last Seen" %}</option>
                     <option value="new"{% ifequal sort 'new' %} selected="selected"{% endifequal %}>{% trans "First Seen" %}</option>
                     <option value="freq"{% ifequal sort 'freq' %} selected="selected"{% endifequal %}>{% trans "Frequency" %}</option>
diff --git a/sentry/templates/sentry/partial/_pager.html b/sentry/templates/sentry/partial/_pager.html
index 2bfe2bfdda..d5efa6754b 100644
--- a/sentry/templates/sentry/partial/_pager.html
+++ b/sentry/templates/sentry/partial/_pager.html
@@ -1,7 +1,6 @@
 {% load i18n %}
 
 <div class="paging">
-    
     {% if paginator.num_pages %}
         <ul class="paging-numeric">
             <li class="paging-first">{% if not paginator.is_first %}<a href="?{{ query_string|escape }}&amp;p=1">{% trans "First" %}</a>{% else %}<span>{% trans "First" %}</span>{% endif %}</li>
diff --git a/sentry/utils/manager.py b/sentry/utils/manager.py
index 88ecabb9b6..485591eb18 100644
--- a/sentry/utils/manager.py
+++ b/sentry/utils/manager.py
@@ -372,3 +372,41 @@ class GroupManager(models.Manager):
             first_seen -= 1
 
         return [rows.get(today-datetime.timedelta(hours=d), 0) for d in xrange(first_seen, -1, -1)]
+
+    def get_trending(self, queryset=None):
+        from sentry.models import MessageCountByMinute
+        mcbm_tbl = MessageCountByMinute._meta.db_table
+        if queryset is None:
+            queryset = self
+        queryset = queryset.extra(where=["%s.date >= now() - interval '15 minutes'" % mcbm_tbl]).annotate(x=Sum('messagecountbyminute__times_seen'))
+        sql, params = queryset.query.get_compiler(queryset.db).as_sql()
+        before_select, after_select = str(sql).split('SELECT ', 1)
+        before_where, after_where = after_select.split(' WHERE ', 1)
+        before_group, after_group = after_where.split(' GROUP BY ', 1)
+        query = """
+        SELECT (SUM(%(mcbm_tbl)s.times_seen) + 1.0) / (COALESCE(z.freq, 0) + 1.0) as zfreq, SUM(%(mcbm_tbl)s.times_seen) as nfreq, z.freq as pfreq, %(before_where)s
+        LEFT JOIN (SELECT a.group_id, SUM(a.times_seen) / 3.0 as freq FROM %(mcbm_tbl)s as a WHERE a.date BETWEEN now() - interval '1 hour' AND now() - interval '16 minutes'
+        GROUP BY a.group_id) as z ON z.group_id = %(mcbm_tbl)s.group_id WHERE %(before_group)s GROUP BY pfreq, %(after_group)s ORDER BY zfreq DESC
+        """ % dict(
+            mcbm_tbl=mcbm_tbl,
+            before_where=before_where,
+            before_group=before_group,
+            after_group=after_group,
+        )
+        return RawQuerySet(self.model.objects, query, params)
+
+class RawQuerySet(object):
+    def __init__(self, queryset, query, params):
+        self.queryset = queryset
+        self.query = query
+        self.params = params
+
+    def __getitem__(self, k):
+        offset = k.start
+        limit = k.stop - k.start
+
+        limit_clause = ' LIMIT %d OFFSET %d' % (limit, offset)
+
+        query = self.query + limit_clause
+
+        return self.queryset.raw(query, self.params)
diff --git a/sentry/web/views.py b/sentry/web/views.py
index c2bf0ec39c..ce83b22ce3 100644
--- a/sentry/web/views.py
+++ b/sentry/web/views.py
@@ -31,6 +31,8 @@ from sentry.web.helpers import login_required, render_to_response, get_search_qu
 uuid_re = re.compile(r'^[a-z0-9]{32}$', re.I)
 message_re = re.compile(r'^(?P<message_id>[a-z0-9]{32})\$(?P<checksum>[a-z0-9]{32})$', re.I)
 
+MESSAGES_PER_PAGE = 25
+
 def can_manage(perm_or_func=None):
     """
     Tests and transforms project_id for permissions based on the requesting user. Passes
@@ -122,6 +124,14 @@ def ajax_handler(request):
 
         message_list = Group.objects.filter(Q(project__in=projects.keys()) | Q(project__isnull=True))
 
+        offset = 0
+        limit = MESSAGES_PER_PAGE
+
+        for filter_ in filters:
+            if not filter_.is_set():
+                continue
+            message_list = filter_.get_query_set(message_list)
+
         sort = request.GET.get('sort')
         if sort == 'date':
             message_list = message_list.order_by('-last_seen')
@@ -129,15 +139,12 @@ def ajax_handler(request):
             message_list = message_list.order_by('-first_seen')
         elif sort == 'freq':
             message_list = message_list.order_by('-times_seen')
+        elif sort == 'trending':
+            message_list = Group.objects.get_trending(message_list)
         else:
             sort = 'priority'
             message_list = message_list.order_by('-score', '-last_seen')
 
-        for filter_ in filters:
-            if not filter_.is_set():
-                continue
-            message_list = filter_.get_query_set(message_list)
-
         data = [
             (m.pk, {
                 'html': render_to_string('sentry/partial/_group.html', {
@@ -151,7 +158,7 @@ def ajax_handler(request):
                 'logger': m.logger,
                 'count': m.times_seen,
                 'priority': p,
-            }) for m, p in with_priority(message_list[0:15])]
+            }) for m, p in with_priority(message_list[offset:limit])]
 
         response = HttpResponse(json.dumps(data))
         response['Content-Type'] = 'application/json'
@@ -306,6 +313,17 @@ def index(request, project):
 
     message_list = Group.objects.filter(project=project)
 
+    # Filters only apply if we're not searching
+    any_filter = False
+    for filter_ in filters:
+        if not filter_.is_set():
+            continue
+        any_filter = True
+        message_list = filter_.get_query_set(message_list)
+
+    offset = (page-1)*MESSAGES_PER_PAGE
+    limit = page*MESSAGES_PER_PAGE
+
     sort = request.GET.get('sort')
     if sort == 'date':
         message_list = message_list.order_by('-last_seen')
@@ -313,18 +331,12 @@ def index(request, project):
         message_list = message_list.order_by('-first_seen')
     elif sort == 'freq':
         message_list = message_list.order_by('-times_seen')
+    elif sort == 'trending':
+        message_list = Group.objects.get_trending(message_list)
     else:
         sort = 'priority'
         message_list = message_list.order_by('-score', '-last_seen')
 
-    # Filters only apply if we're not searching
-    any_filter = False
-    for filter_ in filters:
-        if not filter_.is_set():
-            continue
-        any_filter = True
-        message_list = filter_.get_query_set(message_list)
-
     today = datetime.datetime.now()
 
     has_realtime = page == 1
@@ -332,7 +344,7 @@ def index(request, project):
     return render_to_response('sentry/index.html', {
         'project': project,
         'has_realtime': has_realtime,
-        'message_list': message_list,
+        'message_list': message_list[offset:limit],
         'today': today,
         'sort': sort,
         'any_filter': any_filter,
