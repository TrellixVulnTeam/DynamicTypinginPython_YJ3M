commit b1effd6b756caab78696fcc0bae9423dd35a03b1
Author: James Cunningham <cunninghamjt09@gmail.com>
Date:   Tue Jul 19 10:18:22 2016 -1000

    Use stdlib logging pipeline instead of direct structlog. (#3714)
    
    * Use stdlib logging pipeline instead.
    
    * Change logger names.

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 6e8fc271fe..b87f173733 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 __all__ = ['DocSection', 'Endpoint', 'StatsMixin']
 
+import logging
 import time
 
 from datetime import datetime, timedelta
@@ -15,7 +16,6 @@ from rest_framework.parsers import JSONParser
 from rest_framework.renderers import JSONRenderer
 from rest_framework.response import Response
 from rest_framework.views import APIView
-from structlog import get_logger
 
 from sentry.app import raven, tsdb
 from sentry.models import ApiKey, AuditLogEntry
@@ -39,7 +39,8 @@ DEFAULT_AUTHENTICATION = (
     SessionAuthentication,
 )
 
-logger = get_logger()
+logger = logging.getLogger(__name__)
+audit_logger = logging.getLogger('sentry.audit.api')
 
 
 class DocSection(Enum):
@@ -108,17 +109,16 @@ class Endpoint(APIView):
             **kwargs
         )
 
+        extra = {
+            'entry_id': entry.id,
+            'actor_label': entry.actor_label
+        }
         if entry.actor_id:
-            logger.bind(actor_id=entry.actor_id)
+            extra['actor_id'] = entry.actor_id
         if entry.actor_key_id:
-            logger.bind(actor_key_id=entry.actor_key_id)
+            extra['actor_key_id'] = entry.actor_key_id
 
-        logger.info(
-            name='sentry.audit.entry',
-            entry_id=entry.id,
-            event=entry.get_event_display(),
-            actor_label=entry.actor_label,
-        )
+        audit_logger.info(entry.get_event_display(), extra=extra)
 
     @csrf_exempt
     def dispatch(self, request, *args, **kwargs):
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index 140c194927..fb1f3b0353 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -7,6 +7,7 @@ sentry.utils.email
 """
 from __future__ import absolute_import
 
+import logging
 import os
 import subprocess
 import tempfile
@@ -15,7 +16,6 @@ from email.utils import parseaddr
 from functools import partial
 from operator import attrgetter
 from random import randrange
-from structlog import get_logger
 
 from django.conf import settings
 from django.core.mail import get_connection as _get_connection
@@ -40,7 +40,7 @@ from sentry.web.helpers import render_to_string
 # The maximum amount of recipients to display in human format.
 MAX_RECIPIENTS = 5
 
-logger = get_logger(name='sentry.mail')
+logger = logging.getLogger('sentry.mail')
 
 
 class _CaseInsensitiveSigner(Signer):
@@ -365,29 +365,24 @@ class MessageBuilder(object):
         from sentry.tasks.email import send_email
         fmt = options.get('system.logging-format')
         messages = self.get_built_messages(to, bcc=bcc)
-        log_mail_queued = partial(
-            logger.info,
-            event='mail.queued',
-            message_type=self.type,
-        )
+        extra = {
+            'message_type': self.type
+        }
+        log_mail_queued = partial(logger.info, 'mail.queued', extra=extra)
         for message in messages:
             safe_execute(
                 send_email.delay,
                 message=message,
                 _with_transaction=False,
             )
-            message_id = message.extra_headers['Message-Id']
+            extra['message_id'] = message.extra_headers['Message-Id']
             if fmt == LoggingFormat.HUMAN:
-                log_mail_queued(
-                    message_id=message_id,
-                    message_to=self.format_to(message.to),
-                )
+                extra['message_to'] = self.format_to(message.to),
+                log_mail_queued()
             elif fmt == LoggingFormat.MACHINE:
                 for recipient in message.to:
-                    log_mail_queued(
-                        message_id=message_id,
-                        message_to=recipient,
-                    )
+                    extra['message_to'] = recipient
+                    log_mail_queued()
 
 
 def send_messages(messages, fail_silently=False):
@@ -395,10 +390,8 @@ def send_messages(messages, fail_silently=False):
     sent = connection.send_messages(messages)
     metrics.incr('email.sent', len(messages))
     for message in messages:
-        logger.info(
-            event='mail.sent',
-            message_id=message.extra_headers['Message-Id'],
-        )
+        extra = {'message_id': message.extra_headers['Message-Id']}
+        logger.info('mail.sent', extra=extra)
     return sent
 
 
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index d25acdab58..0b5481a9d8 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -10,7 +10,6 @@ from django.utils.decorators import method_decorator
 from django.utils.translation import ugettext_lazy as _
 from django.views.decorators.csrf import csrf_protect
 from django.views.generic import View
-from structlog import get_logger
 from sudo.views import redirect_to_sudo
 
 from sentry.auth import access
@@ -22,7 +21,8 @@ from sentry.web.helpers import get_login_url, render_to_response
 
 ERR_MISSING_SSO_LINK = _('You need to link your account with the SSO provider to continue.')
 
-logger = get_logger()
+logger = logging.getLogger(__name__)
+audit_logger = logging.getLogger('sentry.audit.ui')
 
 
 class OrganizationMixin(object):
@@ -63,8 +63,8 @@ class OrganizationMixin(object):
                     if active_organization.status != OrganizationStatus.VISIBLE:
                         raise Organization.DoesNotExist
                 except Organization.DoesNotExist:
-                    logging.info('Active organization [%s] not found',
-                                 organization_slug)
+                    logger.info('Active organization [%s] not found',
+                        organization_slug)
                     return None
 
         if active_organization is None:
@@ -79,8 +79,8 @@ class OrganizationMixin(object):
                     if o.slug == organization_slug
                 ).next()
             except StopIteration:
-                logging.info('Active organization [%s] not found in scope',
-                             organization_slug)
+                logger.info('Active organization [%s] not found in scope',
+                    organization_slug)
                 if is_implicit:
                     del request.session['activeorg']
                 active_organization = None
@@ -92,7 +92,7 @@ class OrganizationMixin(object):
             try:
                 active_organization = organizations[0]
             except IndexError:
-                logging.info('User is not a member of any organizations')
+                logger.info('User is not a member of any organizations')
                 pass
 
         if active_organization and self._is_org_member(request.user, active_organization):
@@ -243,13 +243,11 @@ class BaseView(View, OrganizationMixin):
             ip_address=request.META['REMOTE_ADDR'],
             **kwargs
         )
-        logger.info(
-            name='sentry.audit.entry',
-            entry_id=entry.id,
-            event=entry.get_event_display(),
-            actor_id=entry.actor_id,
-            actor_label=entry.actor_label,
-        )
+        audit_logger.info(entry.get_event_display(), extra={
+            'entry_id': entry.id,
+            'actor_id': entry.actor_id,
+            'actor_label': entry.actor_label,
+        })
 
 
 class OrganizationView(BaseView):
@@ -280,8 +278,8 @@ class OrganizationView(BaseView):
         if self.valid_sso_required and not request.access.sso_is_valid:
             return False
         if self.required_scope and not request.access.has_scope(self.required_scope):
-            logging.info('User %s does not have %s permission to access organization %s',
-                         request.user, self.required_scope, organization)
+            logger.info('User %s does not have %s permission to access organization %s',
+                request.user, self.required_scope, organization)
             return False
         return True
 
@@ -364,12 +362,12 @@ class TeamView(OrganizationView):
             return rv
         if self.required_scope:
             if not request.access.has_team_scope(team, self.required_scope):
-                logging.info('User %s does not have %s permission to access team %s',
-                             request.user, self.required_scope, team)
+                logger.info('User %s does not have %s permission to access team %s',
+                    request.user, self.required_scope, team)
                 return False
         elif not request.access.has_team(team):
-            logging.info('User %s does not have access to team %s',
-                         request.user, team)
+            logger.info('User %s does not have access to team %s',
+                request.user, team)
             return False
         return True
 
@@ -420,12 +418,12 @@ class ProjectView(TeamView):
             return rv
         if self.required_scope:
             if not request.access.has_team_scope(team, self.required_scope):
-                logging.info('User %s does not have %s permission to access project %s',
-                             request.user, self.required_scope, project)
+                logger.info('User %s does not have %s permission to access project %s',
+                    request.user, self.required_scope, project)
                 return False
         elif not request.access.has_team(team):
-            logging.info('User %s does not have access to project %s',
-                         request.user, project)
+            logger.info('User %s does not have access to project %s',
+                request.user, project)
             return False
         return True
 
