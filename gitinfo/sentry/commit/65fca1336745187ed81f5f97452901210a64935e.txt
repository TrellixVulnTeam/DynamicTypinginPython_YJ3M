commit 65fca1336745187ed81f5f97452901210a64935e
Author: James Cunningham <cunninghamjt09@gmail.com>
Date:   Wed Aug 17 11:18:14 2016 -1000

    Event-ize various natural language log events. (#3969)
    
    * Event-ize various natural language log events.
    
    * Add classifier to audit logger.

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 9e73826191..83a982073e 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -565,8 +565,7 @@ class EventManager(object):
                 EventMapping.objects.create(
                     project=project, group=group, event_id=event_id)
         except IntegrityError:
-            self.logger.info('Duplicate EventMapping found for event_id=%s', event_id,
-                             exc_info=True)
+            self.logger.info('duplicate.found', extra={'event_id': event_id}, exc_info=True)
             return event
 
         environment = Environment.get_or_create(
@@ -632,8 +631,7 @@ class EventManager(object):
                 with transaction.atomic(using=router.db_for_write(Event)):
                     event.save()
             except IntegrityError:
-                self.logger.info('Duplicate Event found for event_id=%s', event_id,
-                                 exc_info=True)
+                self.logger.info('duplicate.found', extra={'event_id': event_id}, exc_info=True)
                 return event
 
             index_event_tags.delay(
@@ -670,7 +668,7 @@ class EventManager(object):
                 is_regression=is_regression,
             )
         else:
-            self.logger.info('Raw event passed; skipping post process for event_id=%s', event_id)
+            self.logger.info('post_process.skip.raw_event', extra={'event_id': event_id})
 
         # TODO: move this to the queue
         if is_regression and not raw:
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index 264369e327..5cf0528219 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -19,7 +19,7 @@ from django.utils.translation import ugettext_lazy as _
 from sentry.db.models import BaseManager, BaseModel, BoundedAutoField
 from sentry.utils.http import absolute_uri
 
-audit_logger = logging.getLogger('sentry.audit')
+audit_logger = logging.getLogger('sentry.audit.user')
 
 
 class UserManager(BaseManager, UserManager):
diff --git a/src/sentry/plugins/base/manager.py b/src/sentry/plugins/base/manager.py
index 4b79677e96..d492e5cbc9 100644
--- a/src/sentry/plugins/base/manager.py
+++ b/src/sentry/plugins/base/manager.py
@@ -65,11 +65,11 @@ class PluginManager(InstanceManager):
             try:
                 result = getattr(plugin, func_name)(*args, **kwargs)
             except Exception as e:
-                logger = logging.getLogger('sentry.plugins')
-                logger.error('Error processing %s() on %r: %s', func_name, plugin.__class__, e, extra={
-                    'func_arg': args,
-                    'func_kwargs': kwargs,
-                }, exc_info=True)
+                logger = logging.getLogger('sentry.plugins.%s' % (type(plugin).slug,))
+                logger.error('%s.process_error', func_name,
+                    exc_info=True,
+                    extra={'exception': e},
+                )
                 continue
 
             if result is not None:
diff --git a/src/sentry/tasks/merge.py b/src/sentry/tasks/merge.py
index 2ca15daecc..078625754d 100644
--- a/src/sentry/tasks/merge.py
+++ b/src/sentry/tasks/merge.py
@@ -33,19 +33,19 @@ def merge_group(from_object_id=None, to_object_id=None, **kwargs):
     )
 
     if not (from_object_id and to_object_id):
-        logger.error('merge_group called with missing params')
+        logger.error('merge_group.malformed.missing_params')
         return
 
     try:
         group = Group.objects.get(id=from_object_id)
     except Group.DoesNotExist:
-        logger.warn('merge_group called with invalid from_object_id: %s', from_object_id)
+        logger.warn('merge_group.malformed.invalid_id', extra={'object_id': from_object_id})
         return
 
     try:
         new_group = Group.objects.get(id=to_object_id)
     except Group.DoesNotExist:
-        logger.warn('merge_group called with invalid to_object_id: %s', to_object_id)
+        logger.warn('merge_group.malformed.invalid_id', extra={'object_id': from_object_id})
         return
 
     model_list = (
@@ -167,8 +167,10 @@ def merge_objects(models, group, new_group, limit=1000,
     has_more = False
     for model in models:
         if logger is not None:
-            logger.info('Merging %r objects where %r into %r', model, group,
-                        new_group)
+            logger.info('%s.merge', model.__name__.lower(), extra={
+                'group_id': group.id,
+                'new_group_id': new_group.id
+            })
         all_fields = model._meta.get_all_field_names()
         has_group = 'group' in all_fields
         if has_group:
diff --git a/src/sentry/tasks/process_buffer.py b/src/sentry/tasks/process_buffer.py
index eb02506e6f..4fe71639a0 100644
--- a/src/sentry/tasks/process_buffer.py
+++ b/src/sentry/tasks/process_buffer.py
@@ -29,7 +29,7 @@ def process_pending():
         with lock.acquire():
             app.buffer.process_pending()
     except UnableToAcquireLock as error:
-        logger.warning('Failed to process pending buffers due to error: %s', error)
+        logger.warning('process_pending.fail', extra={'error': error})
 
 
 @instrumented_task(
diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index 891628a0e3..0669259c22 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -26,7 +26,7 @@ def safe_execute(func, *args, **kwargs):
                 result = func(*args, **kwargs)
         else:
             result = func(*args, **kwargs)
-    except Exception as exc:
+    except Exception as e:
         if hasattr(func, 'im_class'):
             cls = func.im_class
         else:
@@ -35,11 +35,8 @@ def safe_execute(func, *args, **kwargs):
         func_name = getattr(func, '__name__', six.text_type(func))
         cls_name = cls.__name__
 
-        logger = logging.getLogger('sentry.safe')
-        logger.error(
-            'Error processing %r on %r: %s', func_name, cls_name, exc,
-            exc_info=True,
-        )
+        logger = logging.getLogger('sentry.safe.%s' % (cls_name.lower(),))
+        logger.error('%s.process_error', func_name, exc_info=True, extra={'exception': e})
     else:
         return result
 
