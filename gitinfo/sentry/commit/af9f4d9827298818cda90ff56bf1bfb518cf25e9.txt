commit af9f4d9827298818cda90ff56bf1bfb518cf25e9
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Jun 11 12:01:17 2019 -0700

    ref(sentry10): Clean up action creators (#13636)
    
    Remove setting active environment by project as this is now handled by the
    global selection store.

diff --git a/src/sentry/static/sentry/app/actionCreators/environments.jsx b/src/sentry/static/sentry/app/actionCreators/environments.jsx
index fde6abd417..6ba32061c3 100644
--- a/src/sentry/static/sentry/app/actionCreators/environments.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/environments.jsx
@@ -1,22 +1,4 @@
 import EnvironmentActions from 'app/actions/environmentActions';
-import EnvironmentStore from 'app/stores/environmentStore';
-
-export function setActiveEnvironment(environment) {
-  EnvironmentActions.setActive(environment);
-}
-
-export function setActiveEnvironmentName(name) {
-  const environment = EnvironmentStore.getByName(name);
-
-  if (!environment) {
-    return;
-  }
-  setActiveEnvironment(environment);
-}
-
-export function clearActiveEnvironment() {
-  EnvironmentActions.clearActive();
-}
 
 export function loadEnvironments(data, envName) {
   EnvironmentActions.loadData(data, envName);
diff --git a/src/sentry/static/sentry/app/actionCreators/projects.jsx b/src/sentry/static/sentry/app/actionCreators/projects.jsx
index b807ddc006..3ecbbf0d4d 100644
--- a/src/sentry/static/sentry/app/actionCreators/projects.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/projects.jsx
@@ -9,15 +9,6 @@ import {t, tct} from 'app/locale';
 import ProjectActions from 'app/actions/projectActions';
 import ProjectsStatsStore from 'app/stores/projectsStatsStore';
 
-export function fetchProject(api, orgId, slug) {
-  const promise = api.requestPromise(`/projects/${orgId}/${slug}/`, {method: 'GET'});
-  promise.then(project => {
-    ProjectActions.fetchSuccess(project);
-  });
-
-  return promise;
-}
-
 export function update(api, params) {
   ProjectActions.update(params.projectId, params.data);
 
diff --git a/src/sentry/static/sentry/app/actionCreators/tags.jsx b/src/sentry/static/sentry/app/actionCreators/tags.jsx
index a5de4f2490..a5406bf05d 100644
--- a/src/sentry/static/sentry/app/actionCreators/tags.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/tags.jsx
@@ -60,23 +60,6 @@ function tagFetchSuccess(tags) {
   TagActions.loadTagsSuccess(trimmedTags);
 }
 
-/**
- * Fetch tag values for a single project. Used for sentry9 views.
- */
-export function fetchProjectTagValues(api, orgId, projectId, tagKey, search = null) {
-  const url = `/projects/${orgId}/${projectId}/tags/${tagKey}/values/`;
-
-  const query = {};
-  if (search) {
-    query.query = search;
-  }
-
-  return api.requestPromise(url, {
-    method: 'GET',
-    query,
-  });
-}
-
 /**
  * Fetch tags for an organization or a subset or projects.
  */
diff --git a/src/sentry/static/sentry/app/actions/environmentActions.jsx b/src/sentry/static/sentry/app/actions/environmentActions.jsx
index 9210fa47bb..bb5a8ef54d 100644
--- a/src/sentry/static/sentry/app/actions/environmentActions.jsx
+++ b/src/sentry/static/sentry/app/actions/environmentActions.jsx
@@ -1,8 +1,6 @@
 import Reflux from 'reflux';
 
 const EnvironmentActions = Reflux.createActions([
-  'setActive',
-  'clearActive',
   'loadData',
   'loadActiveData',
   'loadHiddenData',
diff --git a/src/sentry/static/sentry/app/actions/projectActions.jsx b/src/sentry/static/sentry/app/actions/projectActions.jsx
index 575c4bc683..de1c6ef0f4 100644
--- a/src/sentry/static/sentry/app/actions/projectActions.jsx
+++ b/src/sentry/static/sentry/app/actions/projectActions.jsx
@@ -2,7 +2,6 @@ import Reflux from 'reflux';
 
 export default Reflux.createActions([
   'createSuccess',
-  'fetchSuccess',
   'update',
   'updateError',
   'updateSuccess',
diff --git a/src/sentry/static/sentry/app/stores/environmentStore.jsx b/src/sentry/static/sentry/app/stores/environmentStore.jsx
index 2b99898b2a..e77f5070d4 100644
--- a/src/sentry/static/sentry/app/stores/environmentStore.jsx
+++ b/src/sentry/static/sentry/app/stores/environmentStore.jsx
@@ -4,9 +4,6 @@ import {toTitleCase} from 'app/utils';
 import ProjectActions from 'app/actions/projectActions';
 import EnvironmentActions from 'app/actions/environmentActions';
 
-import {setActiveEnvironment} from 'app/actionCreators/environments';
-import {ALL_ENVIRONMENTS_KEY} from 'app/constants';
-
 const DEFAULT_EMPTY_ENV_NAME = '(No Environment)';
 const DEFAULT_EMPTY_ROUTING_NAME = 'none';
 
@@ -23,14 +20,6 @@ const EnvironmentStore = Reflux.createStore({
 
   loadInitialData(items, activeEnvironmentName) {
     this.loadActiveData(items);
-    // Update the default environment in the latest context store
-    // The active environment will be null (aka All Environments) if the name matches
-    // ALL_ENVIRONMENTS_KEY otherwise find the environment matching the name provided
-    let activeEnvironment = null;
-    if (activeEnvironmentName !== ALL_ENVIRONMENTS_KEY) {
-      activeEnvironment = this.getByName(activeEnvironmentName) || this.getDefault();
-    }
-    setActiveEnvironment(activeEnvironment);
   },
 
   loadHiddenData(items) {
diff --git a/src/sentry/static/sentry/app/stores/latestContextStore.jsx b/src/sentry/static/sentry/app/stores/latestContextStore.jsx
index e77804646c..34f0f09ddd 100644
--- a/src/sentry/static/sentry/app/stores/latestContextStore.jsx
+++ b/src/sentry/static/sentry/app/stores/latestContextStore.jsx
@@ -2,7 +2,6 @@ import Reflux from 'reflux';
 
 import ProjectActions from 'app/actions/projectActions';
 import OrganizationsActions from 'app/actions/organizationsActions';
-import EnvironmentActions from 'app/actions/environmentActions';
 import NavigationActions from 'app/actions/navigationActions';
 
 // Keeps track of last usable project/org
@@ -22,8 +21,6 @@ const LatestContextStore = Reflux.createStore({
     this.listenTo(ProjectActions.updateSuccess, this.onUpdateProject);
     this.listenTo(OrganizationsActions.setActive, this.onSetActiveOrganization);
     this.listenTo(OrganizationsActions.update, this.onUpdateOrganization);
-    this.listenTo(EnvironmentActions.setActive, this.onSetActiveEnvironment);
-    this.listenTo(EnvironmentActions.clearActive, this.onClearActiveEnvironment);
     this.listenTo(NavigationActions.setLastRoute, this.onSetLastRoute);
   },
 
@@ -112,23 +109,6 @@ const LatestContextStore = Reflux.createStore({
     };
     this.trigger(this.state);
   },
-
-  onSetActiveEnvironment(environment) {
-    this.state = {
-      ...this.state,
-      environment,
-    };
-
-    this.trigger(this.state);
-  },
-
-  onClearActiveEnvironment() {
-    this.state = {
-      ...this.state,
-      environment: null,
-    };
-    this.trigger(this.state);
-  },
 });
 
 export default LatestContextStore;
diff --git a/src/sentry/static/sentry/app/stores/projectsStore.jsx b/src/sentry/static/sentry/app/stores/projectsStore.jsx
index ac42beb265..6ddf480747 100644
--- a/src/sentry/static/sentry/app/stores/projectsStore.jsx
+++ b/src/sentry/static/sentry/app/stores/projectsStore.jsx
@@ -8,7 +8,6 @@ const ProjectsStore = Reflux.createStore({
   init() {
     this.reset();
     this.listenTo(ProjectActions.createSuccess, this.onCreateSuccess);
-    this.listenTo(ProjectActions.fetchSuccess, this.onFetchSuccess);
     this.listenTo(ProjectActions.updateSuccess, this.onUpdateSuccess);
     this.listenTo(ProjectActions.loadStatsSuccess, this.onStatsLoadSuccess);
     this.listenTo(ProjectActions.changeSlug, this.onChangeSlug);
@@ -60,14 +59,6 @@ const ProjectsStore = Reflux.createStore({
     this.trigger(new Set([project.id]));
   },
 
-  onFetchSuccess(project) {
-    this.itemsById = {
-      ...this.itemsById,
-      [project.id]: project,
-    };
-    this.trigger(new Set([project.id]));
-  },
-
   onUpdateSuccess(data) {
     const project = this.getById(data.id);
     const newProject = Object.assign({}, project, data);
