commit 709fb45846993bb8ff064308c419fe4a440105e9
Author: Mark Story <mark@sentry.io>
Date:   Tue Feb 18 11:17:53 2020 -0500

    ref(discover) Update chart tooltips round 2 (#17063)
    
    The last round of tooltip updates were not well loved. These changes put
    the tooltip content *back* into a tooltip. They also make the tooltip
    better looking and snappier.

diff --git a/src/sentry/static/sentry/app/components/charts/releaseSeries.jsx b/src/sentry/static/sentry/app/components/charts/releaseSeries.jsx
index 0c4c5a670d..ed75fe9cd8 100644
--- a/src/sentry/static/sentry/app/components/charts/releaseSeries.jsx
+++ b/src/sentry/static/sentry/app/components/charts/releaseSeries.jsx
@@ -12,6 +12,7 @@ import SentryTypes from 'app/sentryTypes';
 import theme from 'app/utils/theme';
 import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
+import {escape} from 'app/utils';
 import {formatVersion} from 'app/utils/formatters';
 
 // This is not an exported action/function because releases list uses AsyncComponent
@@ -98,11 +99,21 @@ class ReleaseSeries extends React.Component {
         },
         tooltip: tooltip || {
           formatter: ({data}) => {
-            return `<div>${moment
+            const time = moment
               .tz(data.value, utc ? 'UTC' : getUserTimezone())
-              .format('MMM D, YYYY LT')} <br />
-            Release: ${formatVersion(data.name, true)}<br />
-            </div>`;
+              .format('MMM D, YYYY LT');
+            const version = escape(formatVersion(data.name, true));
+            return [
+              '<div class="tooltip-series">',
+              `<div><span class="tooltip-label"><strong>${t(
+                'Release'
+              )}</strong></span> ${version}</div>`,
+              '</div>',
+              '<div class="tooltip-date">',
+              time,
+              '</div>',
+              '</div>',
+            ].join('');
           },
         },
         label: {
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index b3329badc9..91fb64d2ba 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -800,7 +800,7 @@ export const EChartsTooltip = PropTypes.shape({
 
   // The position of the tooltip's floating layer, which would follow the position of mouse by default.
   // See https://ecomfe.github.io/echarts-doc/public/en/option.html#tooltip.position
-  position: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),
+  position: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.func]),
 
   // The content formatter of tooltip's floating layer which supports string template and callback function.
   // See https://ecomfe.github.io/echarts-doc/public/en/option.html#tooltip.formatter
diff --git a/src/sentry/static/sentry/app/views/events/eventsChart.jsx b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
index 5da3079da3..3c2b06d54f 100644
--- a/src/sentry/static/sentry/app/views/events/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
@@ -1,9 +1,8 @@
-import isEqual from 'lodash/isEqual';
 import PropTypes from 'prop-types';
 import React from 'react';
+import isEqual from 'lodash/isEqual';
 import styled from '@emotion/styled';
 
-import {t} from 'app/locale';
 import {getInterval} from 'app/components/charts/utils';
 import ChartZoom from 'app/components/charts/chartZoom';
 import AreaChart from 'app/components/charts/areaChart';
@@ -12,9 +11,11 @@ import LoadingPanel from 'app/views/events/loadingPanel';
 import ReleaseSeries from 'app/components/charts/releaseSeries';
 import SentryTypes from 'app/sentryTypes';
 import withApi from 'app/utils/withApi';
+import {getFormattedDate} from 'app/utils/dates';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 import {IconWarning} from 'app/icons';
 import theme from 'app/utils/theme';
+import space from 'app/styles/space';
 
 import EventsRequest from './utils/eventsRequest';
 
@@ -74,6 +75,35 @@ class EventsAreaChart extends React.Component {
       data: ['Current', 'Previous'],
     };
 
+    const tooltip = {
+      backgroundColor: 'transparent',
+      transitionDuration: 0,
+      position(pos, _params, dom, _rect, _size) {
+        // Center the tooltip slightly above the cursor.
+        const tipWidth = dom.clientWidth;
+        const tipHeight = dom.clientHeight;
+        return [pos[0] - tipWidth / 2, pos[1] - tipHeight - 16];
+      },
+      formatter(seriesData) {
+        const series = Array.isArray(seriesData) ? seriesData : [seriesData];
+        return [
+          '<div class="tooltip-series">',
+          series
+            .map(
+              s =>
+                `<div><span class="tooltip-label">${s.marker} <strong>${
+                  s.seriesName
+                }</strong></span> ${s.data[1].toLocaleString()}</div>`
+            )
+            .join(''),
+          '</div>',
+          `<div class="tooltip-date">${getFormattedDate(series[0].data[0], 'MMM D, LTS', {
+            local: true,
+          })}</div>`,
+        ].join('');
+      },
+    };
+
     return (
       <AreaChart
         {...props}
@@ -90,6 +120,7 @@ class EventsAreaChart extends React.Component {
           top: '24px',
           bottom: '12px',
         }}
+        tooltip={tooltip}
       />
     );
   }
@@ -108,7 +139,6 @@ class EventsChart extends React.Component {
     router: PropTypes.object,
     showLegend: PropTypes.bool,
     yAxis: PropTypes.string,
-    onTooltipUpdate: PropTypes.func,
   };
 
   render() {
@@ -124,35 +154,11 @@ class EventsChart extends React.Component {
       environments,
       showLegend,
       yAxis,
-      onTooltipUpdate,
       ...props
     } = this.props;
     // Include previous only on relative dates (defaults to relative if no start and end)
     const includePrevious = !start && !end;
 
-    let tooltip = undefined;
-    if (onTooltipUpdate) {
-      tooltip = {
-        formatter(seriesData) {
-          // Releases are the only markline we use right now.
-          if (seriesData.componentType === 'markLine') {
-            onTooltipUpdate({
-              values: [{name: t('Release'), value: seriesData.data.name}],
-              timestamp: seriesData.data.coord[0],
-            });
-
-            return null;
-          }
-          const series = Array.isArray(seriesData) ? seriesData : [seriesData];
-          onTooltipUpdate({
-            values: series.map(item => ({name: item.seriesName, value: item.data[1]})),
-            timestamp: series[0].data[0],
-          });
-          return null;
-        },
-      };
-    }
-
     return (
       <ChartZoom
         router={router}
@@ -179,7 +185,7 @@ class EventsChart extends React.Component {
           >
             {({loading, reloading, errored, timeseriesData, previousTimeseriesData}) => {
               return (
-                <ReleaseSeries tooltip={tooltip} utc={utc} api={api} projects={projects}>
+                <ReleaseSeries utc={utc} api={api} projects={projects}>
                   {({releaseSeries}) => {
                     if (errored) {
                       return (
@@ -193,7 +199,7 @@ class EventsChart extends React.Component {
                     }
 
                     return (
-                      <React.Fragment>
+                      <ChartContainer>
                         <TransparentLoadingMask visible={reloading} />
                         <EventsAreaChart
                           {...zoomRenderProps}
@@ -204,9 +210,8 @@ class EventsChart extends React.Component {
                           releaseSeries={releaseSeries}
                           timeseriesData={timeseriesData}
                           previousTimeseriesData={previousTimeseriesData}
-                          tooltip={tooltip}
                         />
-                      </React.Fragment>
+                      </ChartContainer>
                     );
                   }}
                 </ReleaseSeries>
@@ -252,6 +257,56 @@ const TransparentLoadingMask = styled(LoadingMask)`
   z-index: 1;
 `;
 
+// Contains styling for chart elements as we can't easily style those
+// elements directly
+const ChartContainer = styled('div')`
+  /* Tooltip styling */
+  .tooltip-series,
+  .tooltip-date {
+    color: ${p => p.theme.gray2};
+    font-family: ${p => p.theme.text.family};
+    background: ${p => p.theme.gray5};
+    padding: ${space(1)} ${space(2)};
+    border-radius: ${p => p.theme.borderRadius} ${p => p.theme.borderRadius} 0 0;
+  }
+  .tooltip-label {
+    margin-right: ${space(1)};
+  }
+  .tooltip-label strong {
+    font-weight: normal;
+    color: #fff;
+  }
+  .tooltip-series > div {
+    display: flex;
+    justify-content: space-between;
+    align-items: baseline;
+  }
+  .tooltip-date {
+    border-top: 1px solid ${p => p.theme.gray3};
+    position: relative;
+    width: auto;
+    border-radius: ${p => p.theme.borderRadiusBottom};
+  }
+  .tooltip-date:after {
+    top: 100%;
+    left: 50%;
+    border: solid transparent;
+    content: ' ';
+    height: 0;
+    width: 0;
+    position: absolute;
+    pointer-events: none;
+    border-color: transparent;
+    border-top-color: ${p => p.theme.gray5};
+    border-width: 8px;
+    margin-left: -8px;
+  }
+
+  .echarts-for-react div:first-child {
+    width: 100% !important;
+  }
+`;
+
 const ErrorPanel = styled('div')`
   display: flex;
   justify-content: center;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/chartFooter.tsx b/src/sentry/static/sentry/app/views/eventsV2/chartFooter.tsx
index 6fe23e712d..b4e187cdff 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/chartFooter.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/chartFooter.tsx
@@ -3,99 +3,31 @@ import styled from '@emotion/styled';
 
 import {t} from 'app/locale';
 import {SelectValue} from 'app/types';
-import Duration from 'app/components/duration';
 import YAxisSelector from 'app/views/events/yAxisSelector';
-import {getFormattedDate} from 'app/utils/dates';
 import space from 'app/styles/space';
-import Version from 'app/components/version';
 
-import {decodeColumnOrder} from './utils';
 import {ChartControls, InlineContainer, SectionHeading} from './styles';
 
-type TooltipSeries = {
-  name: string;
-  value: number;
-};
-
-export type TooltipData = {
-  values: TooltipSeries[];
-  timestamp: number;
-};
-
 type Props = {
   total: number | null;
   yAxisValue: string;
   yAxisOptions: SelectValue<string>[];
   onChange: (value: string) => void;
-  hoverState: TooltipData;
 };
 
-function formatValue(val: string | number, columnName: string, itemName: string) {
-  // Extract metadata from the columnName so we can format the
-  // value appropriately.
-  const columnData = decodeColumnOrder([{field: columnName}])[0];
-
-  if (itemName === t('Release')) {
-    return (
-      <Value>
-        <Version version={String(val)} anchor={false} withPackage />
-      </Value>
-    );
-  }
-
-  if (val === null || val === undefined) {
-    return <Value>-</Value>;
-  }
-
-  if (columnData.type === 'duration' && typeof val === 'number') {
-    return (
-      <Value>
-        <Duration seconds={val / 1000} fixedDigits={2} abbreviation />
-      </Value>
-    );
-  }
-
-  const formatted = typeof val === 'number' ? val.toLocaleString() : val;
-  return <Value>{formatted}</Value>;
-}
-
-export default function ChartFooter({
-  total,
-  yAxisValue,
-  yAxisOptions,
-  hoverState,
-  onChange,
-}: Props) {
+export default function ChartFooter({total, yAxisValue, yAxisOptions, onChange}: Props) {
   const elements: React.ReactNode[] = [];
-  if (hoverState.values.length === 0) {
-    elements.push(<SectionHeading key="total-label">{t('Total')}</SectionHeading>);
-    elements.push(
-      total === null ? (
-        <Value data-test-id="loading-placeholder" key="total-value">
-          -
-        </Value>
-      ) : (
-        <Value key="total-value">{total.toLocaleString()}</Value>
-      )
-    );
-  } else {
-    elements.push(<SectionHeading key="time-label">{t('Time')}</SectionHeading>);
-    elements.push(
-      <Value key="time-value">
-        {getFormattedDate(hoverState.timestamp, 'MMM D, LTS', {local: true})}
+
+  elements.push(<SectionHeading key="total-label">{t('Total')}</SectionHeading>);
+  elements.push(
+    total === null ? (
+      <Value data-test-id="loading-placeholder" key="total-value">
+        -
       </Value>
-    );
-    hoverState.values.forEach(item => {
-      elements.push(
-        <SectionHeading key={`${item.name}-label`}>{item.name}</SectionHeading>
-      );
-      elements.push(
-        <React.Fragment key={`${item.name}-value`}>
-          {formatValue(item.value, yAxisValue, item.name)}
-        </React.Fragment>
-      );
-    });
-  }
+    ) : (
+      <Value key="total-value">{total.toLocaleString()}</Value>
+    )
+  );
 
   return (
     <ChartControls>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
index c7f35d1d9b..e8ca1be355 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
@@ -9,14 +9,9 @@ import {Panel} from 'app/components/panels';
 import getDynamicText from 'app/utils/getDynamicText';
 import EventsChart from 'app/views/events/eventsChart';
 
-import ChartFooter, {TooltipData} from './chartFooter';
+import ChartFooter from './chartFooter';
 import EventView from './eventView';
 
-const defaultTooltip: TooltipData = {
-  values: [],
-  timestamp: 0,
-};
-
 type Props = {
   router: ReactRouter.InjectedRouter;
   organization: Organization;
@@ -27,26 +22,14 @@ type Props = {
   onAxisChange: (value: string) => void;
 };
 
-type State = {
-  tooltipData: TooltipData;
-};
-
-export default class ResultsChart extends React.Component<Props, State> {
-  state = {
-    tooltipData: defaultTooltip,
-  };
-
-  handleTooltipUpdate = (state: TooltipData) => {
-    this.setState({tooltipData: state});
-  };
-
+export default class ResultsChart extends React.Component<Props> {
   render() {
     const {eventView, location, organization, router, total, onAxisChange} = this.props;
 
     const yAxisValue = eventView.getYAxis();
 
     return (
-      <StyledPanel onMouseLeave={() => this.handleTooltipUpdate(defaultTooltip)}>
+      <StyledPanel>
         {getDynamicText({
           value: (
             <EventsChart
@@ -57,13 +40,11 @@ export default class ResultsChart extends React.Component<Props, State> {
               yAxis={yAxisValue}
               project={eventView.project as number[]}
               environment={eventView.environment as string[]}
-              onTooltipUpdate={this.handleTooltipUpdate}
             />
           ),
           fixed: 'events chart',
         })}
         <ChartFooter
-          hoverState={this.state.tooltipData}
           total={total}
           yAxisValue={yAxisValue}
           yAxisOptions={eventView.getYAxisOptions()}
@@ -75,10 +56,6 @@ export default class ResultsChart extends React.Component<Props, State> {
 }
 
 export const StyledPanel = styled(Panel)`
-  .echarts-for-react div:first-child {
-    width: 100% !important;
-  }
-
   @media (min-width: ${p => p.theme.breakpoints[1]}) {
     margin: 0;
   }
