commit ddb3276c560920a3a3078e2b4016b8464ac99abc
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Oct 13 22:31:19 2015 +0200

    Reuse connection pools between Rb clusters

diff --git a/src/sentry/buffer/redis.py b/src/sentry/buffer/redis.py
index bce1ccdbdc..7ad9424b44 100644
--- a/src/sentry/buffer/redis.py
+++ b/src/sentry/buffer/redis.py
@@ -10,7 +10,6 @@ from __future__ import absolute_import
 from django.conf import settings
 from django.db import models
 from django.utils.encoding import force_bytes
-from rb import Cluster
 from time import time
 
 from sentry.buffer import Buffer
@@ -20,6 +19,7 @@ from sentry.utils import metrics
 from sentry.utils.compat import pickle
 from sentry.utils.hashlib import md5
 from sentry.utils.imports import import_string
+from sentry.utils.redis import make_rb_cluster
 
 
 class RedisBuffer(Buffer):
@@ -34,7 +34,7 @@ class RedisBuffer(Buffer):
         options.setdefault('hosts', {
             0: {},
         })
-        self.cluster = Cluster(options['hosts'])
+        self.cluster = make_rb_cluster(options['hosts'])
 
     def validate(self):
         try:
diff --git a/src/sentry/cache/redis.py b/src/sentry/cache/redis.py
index 22f9117c07..4e28c554b1 100644
--- a/src/sentry/cache/redis.py
+++ b/src/sentry/cache/redis.py
@@ -9,9 +9,9 @@ sentry.cache.redis
 from __future__ import absolute_import
 
 from django.conf import settings
-from rb import Cluster
 
 from sentry.utils import json
+from sentry.utils.redis import make_rb_cluster
 
 from .base import BaseCache
 
@@ -27,7 +27,7 @@ class RedisCache(BaseCache):
         options.setdefault('hosts', {
             0: {},
         })
-        self.cluster = Cluster(options['hosts'])
+        self.cluster = make_rb_cluster(options['hosts'])
         self.client = self.cluster.get_routing_client()
 
         super(RedisCache, self).__init__(version=version, prefix=prefix)
diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
index bf005046ba..212eb38d0b 100644
--- a/src/sentry/quotas/redis.py
+++ b/src/sentry/quotas/redis.py
@@ -10,10 +10,10 @@ from __future__ import absolute_import
 import time
 
 from django.conf import settings
-from rb import Cluster
 
 from sentry.exceptions import InvalidConfiguration
 from sentry.quotas.base import Quota, RateLimited, NotRateLimited
+from sentry.utils.redis import make_rb_cluster
 
 
 class RedisQuota(Quota):
@@ -25,7 +25,7 @@ class RedisQuota(Quota):
             options = settings.SENTRY_REDIS_OPTIONS
         super(RedisQuota, self).__init__(**options)
         options.setdefault('hosts', {0: {}})
-        self.cluster = Cluster(options['hosts'])
+        self.cluster = make_rb_cluster(options['hosts'])
 
     def validate(self):
         try:
diff --git a/src/sentry/ratelimits/redis.py b/src/sentry/ratelimits/redis.py
index 8f698d3dc2..292da3264a 100644
--- a/src/sentry/ratelimits/redis.py
+++ b/src/sentry/ratelimits/redis.py
@@ -1,11 +1,11 @@
 from __future__ import absolute_import
 
 from django.conf import settings
-from rb import Cluster
 from time import time
 
 from sentry.exceptions import InvalidConfiguration
 from sentry.ratelimits.base import RateLimiter
+from sentry.utils.redis import make_rb_cluster
 
 
 class RedisRateLimiter(RateLimiter):
@@ -17,7 +17,7 @@ class RedisRateLimiter(RateLimiter):
             options = settings.SENTRY_REDIS_OPTIONS
         options.setdefault('hosts', {0: {}})
 
-        self.cluster = Cluster(options['hosts'])
+        self.cluster = make_rb_cluster(options['hosts'])
 
     def validate(self):
         try:
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index 169553b108..b6fbe7fb4f 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -17,11 +17,10 @@ from django.conf import settings
 from django.utils import timezone
 from hashlib import md5
 
-from rb import Cluster
-
 from sentry.exceptions import InvalidConfiguration
 from sentry.tsdb.base import BaseTSDB
 from sentry.utils.dates import to_timestamp
+from sentry.utils.redis import make_rb_cluster
 from sentry.utils.versioning import (
     Version,
     check_versions,
@@ -75,7 +74,7 @@ class RedisTSDB(BaseTSDB):
         if hosts is None:
             hosts = defaults.get('hosts', {0: {}})
 
-        self.cluster = Cluster(hosts)
+        self.cluster = make_rb_cluster(hosts)
         self.prefix = prefix
         self.vnodes = vnodes
         super(RedisTSDB, self).__init__(**kwargs)
diff --git a/src/sentry/utils/redis.py b/src/sentry/utils/redis.py
new file mode 100644
index 0000000000..21b834e0e6
--- /dev/null
+++ b/src/sentry/utils/redis.py
@@ -0,0 +1,36 @@
+from __future__ import absolute_import
+
+from threading import Lock
+
+import rb
+
+from redis.connection import ConnectionPool
+
+
+_pool_cache = {}
+_pool_lock = Lock()
+
+
+def _shared_pool(**opts):
+    key = '%s:%s/%s' % (
+        opts['host'],
+        opts['port'],
+        opts['db'],
+    )
+    pool = _pool_cache.get(key)
+    if pool is not None:
+        return pool
+    with _pool_lock:
+        pool = _pool_cache.get(key)
+        if pool is not None:
+            return pool
+        pool = ConnectionPool(**opts)
+        _pool_cache[key] = pool
+        return pool
+
+
+def make_rb_cluster(hosts):
+    """Returns a rb cluster that internally shares the pools more
+    intelligetly.
+    """
+    return rb.Cluster(hosts, pool_cls=_shared_pool)
