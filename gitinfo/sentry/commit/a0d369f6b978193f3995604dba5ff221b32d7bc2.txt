commit a0d369f6b978193f3995604dba5ff221b32d7bc2
Author: Ben Vinegar <ben@benv.ca>
Date:   Thu Aug 27 18:09:58 2015 -0700

    Move exported React components into their own files; fixes importing bug

diff --git a/src/sentry/static/sentry/app/components/interfaces/definitionList.jsx b/src/sentry/static/sentry/app/components/interfaces/definitionList.jsx
new file mode 100644
index 0000000000..5ba5b845ad
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/interfaces/definitionList.jsx
@@ -0,0 +1,22 @@
+import React from "react";
+
+var DefinitionList = React.createClass({
+  propTypes: {
+    data: React.PropTypes.object.isRequired
+  },
+
+  render() {
+    return (
+      <dl className="vars">
+        {this.props.data.map(function ([key, value]) {
+            return [
+              <dt key={'dt-' + key }>{key}</dt>,
+              <dd key={'dd-' + key }><pre>{value}</pre></dd>
+            ];
+        })}
+      </dl>
+    );
+  }
+});
+
+export default DefinitionList;
diff --git a/src/sentry/static/sentry/app/components/interfaces/request.jsx b/src/sentry/static/sentry/app/components/interfaces/request.jsx
index d1417b9942..8fd3f02553 100644
--- a/src/sentry/static/sentry/app/components/interfaces/request.jsx
+++ b/src/sentry/static/sentry/app/components/interfaces/request.jsx
@@ -1,30 +1,10 @@
 import React from "react";
 import ConfigStore from "../../stores/configStore";
-import ClippedBox from "../../components/clippedBox";
 import GroupEventDataSection from "../eventDataSection";
 import PropTypes from "../../proptypes";
-import {objectIsEmpty} from "../../utils";
+import RichHttpContent from "./richHttpContent";
 import {getCurlCommand} from "./utils";
 
-export var DefinitionList = React.createClass({
-  propTypes: {
-    data: React.PropTypes.object.isRequired
-  },
-
-  render() {
-    return (
-      <dl className="vars">
-        {this.props.data.map(function ([key, value]) {
-            return [
-              <dt key={'dt-' + key }>{key}</dt>,
-              <dd key={'dd-' + key }><pre>{value}</pre></dd>
-            ];
-        })}
-      </dl>
-    );
-  }
-});
-
 var RequestActions = React.createClass({
   render(){
     var org = this.props.organization;
@@ -43,52 +23,6 @@ var RequestActions = React.createClass({
   }
 });
 
-export var RichHttpContent = React.createClass({
-
-  objectToTupleArray(obj) {
-    return Object.keys(obj).map((k) => [k, obj[k]]);
-  },
-
-  render(){
-    let data = this.props.data;
-
-    return (
-      <div>
-        {data.query &&
-          <ClippedBox title="Query String">
-            <pre>{data.query}</pre>
-          </ClippedBox>
-        }
-        {data.fragment &&
-          <ClippedBox title="Fragment">
-            <pre>{data.fragment}</pre>
-          </ClippedBox>
-        }
-        {data.data &&
-          <ClippedBox title="Body">
-            <pre>{data.data}</pre>
-          </ClippedBox>
-        }
-        {data.cookies &&
-          <ClippedBox title="Cookies" defaultCollapsed>
-            <DefinitionList data={data.cookies} />
-          </ClippedBox>
-        }
-        {!objectIsEmpty(data.headers) &&
-          <ClippedBox title="Headers">
-            <DefinitionList data={data.headers} />
-          </ClippedBox>
-        }
-        {!objectIsEmpty(data.env) &&
-          <ClippedBox title="Environment" defaultCollapsed>
-            <DefinitionList data={this.objectToTupleArray(data.env)}/>
-          </ClippedBox>
-        }
-      </div>
-    );
-  }
-});
-
 var RequestInterface = React.createClass({
   propTypes: {
     group: PropTypes.Group.isRequired,
diff --git a/src/sentry/static/sentry/app/components/interfaces/richHttpContent.jsx b/src/sentry/static/sentry/app/components/interfaces/richHttpContent.jsx
new file mode 100644
index 0000000000..d1e7c0df82
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/interfaces/richHttpContent.jsx
@@ -0,0 +1,53 @@
+import React from "react";
+import ClippedBox from "../../components/clippedBox";
+import DefinitionList from "./definitionList";
+
+import {objectIsEmpty} from "../../utils";
+
+var RichHttpContent = React.createClass({
+
+  objectToTupleArray(obj) {
+    return Object.keys(obj).map((k) => [k, obj[k]]);
+  },
+
+  render(){
+    let data = this.props.data;
+
+    return (
+      <div>
+        {data.query &&
+          <ClippedBox title="Query String">
+            <pre>{data.query}</pre>
+          </ClippedBox>
+        }
+        {data.fragment &&
+          <ClippedBox title="Fragment">
+            <pre>{data.fragment}</pre>
+          </ClippedBox>
+        }
+        {data.data &&
+          <ClippedBox title="Body">
+            <pre>{data.data}</pre>
+          </ClippedBox>
+        }
+        {data.cookies &&
+          <ClippedBox title="Cookies" defaultCollapsed>
+            <DefinitionList data={data.cookies} />
+          </ClippedBox>
+        }
+        {!objectIsEmpty(data.headers) &&
+          <ClippedBox title="Headers">
+            <DefinitionList data={data.headers} />
+          </ClippedBox>
+        }
+        {!objectIsEmpty(data.env) &&
+          <ClippedBox title="Environment" defaultCollapsed>
+            <DefinitionList data={this.objectToTupleArray(data.env)}/>
+          </ClippedBox>
+        }
+      </div>
+    );
+  }
+});
+
+export default RichHttpContent;
diff --git a/tests/js/spec/components/interfaces/definitionList.spec.jsx b/tests/js/spec/components/interfaces/definitionList.spec.jsx
new file mode 100644
index 0000000000..e2b5e15c82
--- /dev/null
+++ b/tests/js/spec/components/interfaces/definitionList.spec.jsx
@@ -0,0 +1,22 @@
+import React from "react/addons";
+var TestUtils = React.addons.TestUtils;
+import DefinitionList from "app/components/interfaces/definitionList";
+
+describe('DefinitionList', function () {
+  describe("render", function () {
+    it("should render a definition list of key/value pairs", function () {
+      var data = [
+        ['a', 'x'], ['b', 'y']
+      ];
+      var elem = TestUtils.renderIntoDocument(<DefinitionList data={data} />);
+
+      var dts = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dt');
+      expect(dts[0].getDOMNode().textContent).to.eql('a');
+      expect(dts[1].getDOMNode().textContent).to.eql('b');
+
+      var dds = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dd');
+      expect(dds[0].getDOMNode().textContent).to.eql('x');
+      expect(dds[1].getDOMNode().textContent).to.eql('y');
+    });
+  });
+});
diff --git a/tests/js/spec/components/interfaces/request.spec.jsx b/tests/js/spec/components/interfaces/request.spec.jsx
deleted file mode 100644
index 1a2c8def1b..0000000000
--- a/tests/js/spec/components/interfaces/request.spec.jsx
+++ /dev/null
@@ -1,61 +0,0 @@
-import React from "react/addons";
-var TestUtils = React.addons.TestUtils;
-import stubReactComponents from "../../../helpers/stubReactComponent";
-
-import {RichHttpContent, DefinitionList} from "app/components/interfaces/request";
-import ClippedBox from "app/components/clippedBox";
-
-describe("request", function() {
-  beforeEach(function () {
-    this.sandbox = sinon.sandbox.create();
-  });
-
-  afterEach(function () {
-    this.sandbox.restore();
-  });
-
-  describe("RichHttpContent", function () {
-    beforeEach(function () {
-      stubReactComponents(this.sandbox, [ClippedBox, DefinitionList]);
-    });
-
-    describe("objectToTupleArray", function () {
-      it("should convert a key/value object to an array of key/value tuples", function () {
-        var data = {
-          query: '',
-          data: '',
-          headers: [],
-          cookies: [],
-          env: {}
-        };
-
-        var elem = TestUtils.renderIntoDocument(<RichHttpContent data={data} />);
-        expect(elem.objectToTupleArray({
-          foo: 'bar',
-          bar: 'baz'
-        })).to.eql([
-          ['foo', 'bar'], ['bar', 'baz']
-        ]);
-      });
-    });
-  });
-
-  describe('DefinitionList', function () {
-    describe("render", function () {
-      it("should render a definition list of key/value pairs", function () {
-        var data = [
-          ['a', 'x'], ['b', 'y']
-        ];
-        var elem = TestUtils.renderIntoDocument(<DefinitionList data={data} />);
-
-        var dts = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dt');
-        expect(dts[0].getDOMNode().textContent).to.eql('a');
-        expect(dts[1].getDOMNode().textContent).to.eql('b');
-
-        var dds = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dd');
-        expect(dds[0].getDOMNode().textContent).to.eql('x');
-        expect(dds[1].getDOMNode().textContent).to.eql('y');
-      });
-    });
-  });
-});
diff --git a/tests/js/spec/components/interfaces/richHttpContent.spec.jsx b/tests/js/spec/components/interfaces/richHttpContent.spec.jsx
new file mode 100644
index 0000000000..0f8cc41839
--- /dev/null
+++ b/tests/js/spec/components/interfaces/richHttpContent.spec.jsx
@@ -0,0 +1,38 @@
+import React from "react/addons";
+var TestUtils = React.addons.TestUtils;
+import stubReactComponents from "../../../helpers/stubReactComponent";
+
+import RichHttpContent from "app/components/interfaces/richHttpContent";
+import DefinitionList from "app/components/interfaces/definitionList";
+import ClippedBox from "app/components/clippedBox";
+
+describe("RichHttpContent", function () {
+  beforeEach(function () {
+    this.sandbox = sinon.sandbox.create();
+    stubReactComponents(this.sandbox, [ClippedBox, DefinitionList]);
+  });
+
+  afterEach(function () {
+    this.sandbox.restore();
+  });
+
+  describe("objectToTupleArray", function () {
+    it("should convert a key/value object to an array of key/value tuples", function () {
+      var data = {
+        query: '',
+        data: '',
+        headers: [],
+        cookies: [],
+        env: {}
+      };
+
+      var elem = TestUtils.renderIntoDocument(<RichHttpContent data={data} />);
+      expect(elem.objectToTupleArray({
+        foo: 'bar',
+        bar: 'baz'
+      })).to.eql([
+        ['foo', 'bar'], ['bar', 'baz']
+      ]);
+    });
+  });
+});
