commit dd50f1fdb70297b9c9fccd31cf51e26d5601e144
Author: Jan Michael Auer <account@jauer.org>
Date:   Tue Apr 3 10:06:39 2018 +0200

    ref(native): Use debug identifiers instead of UUIDs for DSymFiles (#7802)
    
    * ref(db): Increase size of ProjectDSymFile.uuid
    
    * ref: Remove all usages of UUIDs and use plain strings instead
    
    * ref(api): Additionally serialize UUIDs for backward compatibility
    
    * ref(minidump): Use the new "id" image attribute
    
    * ref(native): Allow debug_meta.image.id
    
    * ref(native): Attach platform in merge_minidump_event
    
    * test(native): Add tests for minidumps and debug identifiers
    
    * test(native): Add symcache update tests
    
    * db: Update migration
    
    * build: Update symbolic requirement
    
    * ref(api): Rename debug_id to debugId
    
    * style: Consistent variable naming in assemble task
    
    * ref(ui): Use and display debug identifiers
    
    * ref(native): Add a "symbolic" image type
    
    * ref(minidump): Emit symbolic images in debugmeta
    
    * fix(db): Use CharField for projectdsymfile.uuid to support MySQL
    
    * fix(native): Only allow "arch" in "symbolic" images
    
    * fix(ui): Use correct wording for DIFs in processing issues
    
    * fix(native): Compute correct image name for Windows paths
    
    * db(native): Update the migration

diff --git a/requirements-base.txt b/requirements-base.txt
index 2e45f3a421..040081781c 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -51,7 +51,7 @@ statsd>=3.1.0,<3.2.0
 strict-rfc3339>=0.7
 structlog==16.1.0
 sqlparse>=0.1.16,<0.2.0
-symbolic>=2.0.7,<3.0.0
+symbolic>=3.0.0,<4.0.0
 toronado>=0.0.11,<0.1.0
 ua-parser>=0.6.1,<0.8.0
 urllib3>=1.22,<1.23
diff --git a/src/sentry/api/endpoints/dsym_files.py b/src/sentry/api/endpoints/dsym_files.py
index e600b2da2e..985881fb86 100644
--- a/src/sentry/api/endpoints/dsym_files.py
+++ b/src/sentry/api/endpoints/dsym_files.py
@@ -23,7 +23,7 @@ except ImportError:
 
 
 logger = logging.getLogger('sentry.api')
-ERR_FILE_EXISTS = 'A file matching this uuid already exists'
+ERR_FILE_EXISTS = 'A file matching this debug identifier already exists'
 
 
 class AssociateDsymSerializer(serializers.Serializer):
@@ -69,26 +69,26 @@ class DSymFilesEndpoint(ProjectEndpoint):
                 }, status=403
             )
 
-        dsym = ProjectDSymFile.objects.filter(
+        debug_file = ProjectDSymFile.objects.filter(
             id=project_dsym_id
         ).first()
 
-        if dsym is None:
+        if debug_file is None:
             raise Http404
 
         suffix = ".dSYM"
-        if dsym.dsym_type == 'proguard' and dsym.object_name == 'proguard-mapping':
+        if debug_file.dsym_type == 'proguard' and debug_file.object_name == 'proguard-mapping':
             suffix = ".txt"
 
         try:
-            fp = dsym.file.getfile()
+            fp = debug_file.file.getfile()
             response = StreamingHttpResponse(
                 iter(lambda: fp.read(4096), b''),
                 content_type='application/octet-stream'
             )
-            response['Content-Length'] = dsym.file.size
+            response['Content-Length'] = debug_file.file.size
             response['Content-Disposition'] = 'attachment; filename="%s%s"' % (posixpath.basename(
-                dsym.uuid
+                debug_file.debug_id
             ), suffix)
             return response
         except IOError:
diff --git a/src/sentry/api/serializers/models/dsym_file.py b/src/sentry/api/serializers/models/dsym_file.py
index 7c6d8f0129..9061f48d0d 100644
--- a/src/sentry/api/serializers/models/dsym_file.py
+++ b/src/sentry/api/serializers/models/dsym_file.py
@@ -11,7 +11,8 @@ class DSymFileSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         d = {
             'id': six.text_type(obj.id),
-            'uuid': obj.uuid,
+            'uuid': obj.debug_id[:36],
+            'debugId': obj.debug_id,
             'cpuName': obj.cpu_name,
             'objectName': obj.object_name,
             'symbolType': obj.dsym_type,
diff --git a/src/sentry/interfaces/debug_meta.py b/src/sentry/interfaces/debug_meta.py
index 209b01aeb6..06693a001a 100644
--- a/src/sentry/interfaces/debug_meta.py
+++ b/src/sentry/interfaces/debug_meta.py
@@ -7,7 +7,7 @@ __all__ = ('DebugMeta', )
 
 from sentry.interfaces.base import Interface, InterfaceValidationError
 
-from symbolic import parse_addr
+from symbolic import parse_addr, normalize_debug_id
 
 image_types = {}
 
@@ -20,28 +20,51 @@ def imagetype(name):
     return decorator
 
 
+def _addr(x):
+    return '0x%x' % parse_addr(x)
+
+
+@imagetype('symbolic')
+def process_symbolic_image(image):
+    try:
+        symbolic_image = {
+            'id': normalize_debug_id(image['id']),
+            'image_addr': _addr(image.get('image_addr')),
+            'image_size': parse_addr(image['image_size']),
+            'image_vmaddr': _addr(image.get('image_vmaddr') or 0),
+            'name': image.get('name'),
+        }
+
+        if image.get('arch') is not None:
+            symbolic_image['arch'] = image.get('arch')
+
+        return symbolic_image
+    except KeyError as e:
+        raise InterfaceValidationError('Missing value for symbolic image: %s' % e.args[0])
+
+
 @imagetype('apple')
 def process_apple_image(image):
-    def _addr(x):
-        return '0x%x' % parse_addr(x)
-
     try:
         apple_image = {
-            'arch': image.get('arch'),
+            'uuid': six.text_type(uuid.UUID(image['uuid'])),
             'cpu_type': image.get('cpu_type'),
             'cpu_subtype': image.get('cpu_subtype'),
             'image_addr': _addr(image.get('image_addr')),
             'image_size': image['image_size'],
             'image_vmaddr': _addr(image.get('image_vmaddr') or 0),
             'name': image.get('name'),
-            'uuid': six.text_type(uuid.UUID(image['uuid']))
         }
+
+        if image.get('arch') is not None:
+            apple_image['arch'] = image.get('arch')
         if image.get('major_version') is not None:
             apple_image['major_version'] = image['major_version']
         if image.get('minor_version') is not None:
             apple_image['minor_version'] = image['minor_version']
         if image.get('revision_version') is not None:
             apple_image['revision_version'] = image['revision_version']
+
         return apple_image
     except KeyError as e:
         raise InterfaceValidationError('Missing value for apple image: %s' % e.args[0])
@@ -96,7 +119,7 @@ class DebugMeta(Interface):
         if func is None:
             raise InterfaceValidationError('Unknown image type %r' % image)
         rv = func(image)
-        assert 'uuid' in rv, 'debug image normalizer did not produce a UUID'
+        assert 'uuid' in rv or 'id' in rv, 'debug image normalizer did not produce a UUID'
         rv['type'] = ty
         return rv
 
diff --git a/src/sentry/lang/java/plugin.py b/src/sentry/lang/java/plugin.py
index 5b46c6aa8d..f314c4602c 100644
--- a/src/sentry/lang/java/plugin.py
+++ b/src/sentry/lang/java/plugin.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import
 
 import six
-import uuid
 
 from symbolic import ProguardMappingView
 from sentry.plugins import Plugin2
@@ -22,7 +21,7 @@ class JavaStacktraceProcessor(StacktraceProcessor):
             self.debug_meta = debug_meta
             for img in debug_meta['images']:
                 if img['type'] == 'proguard':
-                    self.images.add(uuid.UUID(img['uuid']))
+                    self.images.add(six.text_type(img['uuid']).lower())
         else:
             self.available = False
 
@@ -45,10 +44,10 @@ class JavaStacktraceProcessor(StacktraceProcessor):
         dsym_paths = ProjectDSymFile.dsymcache.fetch_dsyms(self.project, self.images)
         self.mapping_views = []
 
-        for image_uuid in self.images:
+        for debug_id in self.images:
             error_type = None
 
-            dsym_path = dsym_paths.get(image_uuid)
+            dsym_path = dsym_paths.get(debug_id)
             if dsym_path is None:
                 error_type = EventError.PROGUARD_MISSING_MAPPING
             else:
@@ -64,15 +63,15 @@ class JavaStacktraceProcessor(StacktraceProcessor):
             self.data.setdefault('errors',
                                  []).append({
                                      'type': error_type,
-                                     'mapping_uuid': six.text_type(image_uuid),
+                                     'mapping_uuid': debug_id,
                                  })
             report_processing_issue(
                 self.data,
                 scope='proguard',
-                object='mapping:%s' % image_uuid,
+                object='mapping:%s' % debug_id,
                 type=error_type,
                 data={
-                    'mapping_uuid': six.text_type(image_uuid),
+                    'mapping_uuid': debug_id,
                 }
             )
 
diff --git a/src/sentry/lang/native/applecrashreport.py b/src/sentry/lang/native/applecrashreport.py
index 35e21a6427..01784cc49a 100644
--- a/src/sentry/lang/native/applecrashreport.py
+++ b/src/sentry/lang/native/applecrashreport.py
@@ -1,20 +1,14 @@
 from __future__ import absolute_import
 
 import posixpath
-import re
 
+from sentry.lang.native.utils import image_name
 from sentry.utils.compat import implements_to_string
 from sentry.constants import NATIVE_UNKNOWN_STRING
 
 from symbolic import parse_addr
 
 REPORT_VERSION = '104'
-WINDOWS_PATH_RE = re.compile(r'^[a-z]:\\', re.IGNORECASE)
-
-
-def package_name(pkg):
-    split = '\\' if WINDOWS_PATH_RE.match(pkg) else '/'
-    return pkg.rsplit(split, 1)[-1]
 
 
 @implements_to_string
@@ -152,7 +146,7 @@ class AppleCrashReport(object):
                 symbol = '[inlined] ' + symbol
         return '%s%s%s%s%s' % (
             str(number).ljust(4, ' '),
-            package_name(frame.get('package') or NATIVE_UNKNOWN_STRING).ljust(32, ' '),
+            image_name(frame.get('package') or NATIVE_UNKNOWN_STRING).ljust(32, ' '),
             hex(instruction_addr).ljust(20, ' '), symbol, offset
         )
 
@@ -180,6 +174,6 @@ class AppleCrashReport(object):
         image_addr = parse_addr(debug_image['image_addr']) + slide_value
         return '%s - %s %s %s  <%s> %s' % (
             hex(image_addr), hex(image_addr + debug_image['image_size'] - 1),
-            package_name(debug_image['name']), self.context['device']['arch'],
+            image_name(debug_image['name']), self.context['device']['arch'],
             debug_image['uuid'].replace('-', '').lower(), debug_image['name']
         )
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index d8f26f7608..d3838048ff 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-import six
 import logging
 import posixpath
 
@@ -27,6 +26,7 @@ FRAME_CACHE_VERSION = 6
 
 class NativeStacktraceProcessor(StacktraceProcessor):
     supported_platforms = ('cocoa', 'native')
+    supported_images = ('apple', 'symbolic')
 
     def __init__(self, *args, **kwargs):
         StacktraceProcessor.__init__(self, *args, **kwargs)
@@ -39,7 +39,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
             self.debug_meta = debug_meta
             self.sdk_info = get_sdk_from_event(self.data)
             self.object_lookup = ObjectLookup(
-                [img for img in self.debug_meta['images'] if img['type'] == 'apple']
+                [img for img in self.debug_meta['images'] if img['type'] in self.supported_images]
             )
         else:
             self.available = False
@@ -107,7 +107,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
         processable_frame.data = {
             'instruction_addr': instr_addr,
             'obj': obj,
-            'obj_uuid': six.text_type(obj.uuid) if obj is not None else None,
+            'obj_uuid': obj.id if obj is not None else None,
             'symbolserver_match': None,
         }
 
@@ -119,7 +119,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                     # the address for the cache key to be within the image
                     # the same way as we do it in the symbolizer.
                     rebase_addr(instr_addr, obj),
-                    six.text_type(obj.uuid),
+                    obj.id,
                     obj.arch,
                     obj.size,
                 )
@@ -181,7 +181,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                 continue
             to_lookup.append(
                 {
-                    'object_uuid': six.text_type(obj.uuid),
+                    'object_uuid': obj.id,
                     'object_name': obj.name or '<unknown>',
                     'addr': '0x%x' % rebase_addr(pf.data['instruction_addr'], obj)
                 }
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 854c40bcf9..df755d30c5 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -8,7 +8,7 @@ from symbolic import SymbolicError, ObjectLookup, LineInfo, parse_addr
 from sentry.utils.safe import trim
 from sentry.utils.compat import implements_to_string
 from sentry.models import EventError, ProjectDSymFile
-from sentry.lang.native.utils import rebase_addr
+from sentry.lang.native.utils import image_name, rebase_addr
 from sentry.constants import MAX_SYM, NATIVE_UNKNOWN_STRING
 
 FATAL_ERRORS = (EventError.NATIVE_MISSING_DSYM, EventError.NATIVE_BAD_DSYM, )
@@ -59,10 +59,10 @@ class SymbolicationFailed(Exception):
         self.image_name = None
         self.image_path = None
         if obj is not None:
-            self.image_uuid = six.text_type(obj.uuid)
+            self.image_uuid = six.text_type(obj.id)
             if obj.name:
                 self.image_path = obj.name
-                self.image_name = obj.name.rsplit('/', 1)[-1]
+                self.image_name = image_name(obj.name)
             self.image_arch = obj.arch
         else:
             self.image_uuid = None
@@ -218,13 +218,13 @@ class Symbolizer(object):
         return obj.name and _sim_platform_re.search(obj.name) is not None
 
     def _symbolize_app_frame(self, instruction_addr, obj, sdk_info=None):
-        symcache = self.symcaches.get(obj.uuid)
+        symcache = self.symcaches.get(obj.id)
         if symcache is None:
             # In case we know what error happened on symcache conversion
             # we can report it to the user now.
-            if obj.uuid in self.symcaches_conversion_errors:
+            if obj.id in self.symcaches_conversion_errors:
                 raise SymbolicationFailed(
-                    message=self.symcaches_conversion_errors[obj.uuid],
+                    message=self.symcaches_conversion_errors[obj.id],
                     type=EventError.NATIVE_BAD_DSYM,
                     obj=obj
                 )
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index 64404d930f..7c346f6385 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -6,7 +6,7 @@ import logging
 
 from collections import namedtuple
 from django.core.files.uploadedfile import InMemoryUploadedFile, TemporaryUploadedFile
-from symbolic import parse_addr, arch_from_breakpad, arch_from_macho, arch_is_known, ProcessState
+from symbolic import parse_addr, arch_from_breakpad, arch_from_macho, arch_is_known, ProcessState, id_from_breakpad
 
 from sentry.interfaces.contexts import DeviceContextType
 
@@ -22,6 +22,9 @@ KNOWN_DSYM_TYPES = {
 # Regular expression to parse OS versions from a minidump OS string
 VERSION_RE = re.compile(r'(\d+\.\d+\.\d+)\s+(.*)')
 
+# Regular expression to guess whether we're dealing with Windows or Unix paths
+WINDOWS_PATH_RE = re.compile(r'^[a-z]:\\', re.IGNORECASE)
+
 # Mapping of well-known minidump OS constants to our internal names
 MINIDUMP_OS_TYPES = {
     'Mac OS X': 'macOS',
@@ -31,6 +34,11 @@ MINIDUMP_OS_TYPES = {
 AppInfo = namedtuple('AppInfo', ['id', 'version', 'build', 'name'])
 
 
+def image_name(pkg):
+    split = '\\' if WINDOWS_PATH_RE.match(pkg) else '/'
+    return pkg.rsplit(split, 1)[-1]
+
+
 def find_all_stacktraces(data):
     """Given a data dictionary from an event this returns all
     relevant stacktraces in a list.  If a frame contains a raw_stacktrace
@@ -160,8 +168,9 @@ def merge_minidump_event(data, minidump):
     elif isinstance(minidump, TemporaryUploadedFile):
         state = ProcessState.from_minidump(minidump.temporary_file_path())
     else:
-        state = ProcessState.from_minidump(minidump.name)
+        state = ProcessState.from_minidump(minidump)
 
+    data['platform'] = 'native'
     data['level'] = 'fatal' if state.crashed else 'info'
     data['message'] = 'Assertion Error: %s' % state.assertion if state.assertion \
         else 'Fatal Error: %s' % state.crash_reason
@@ -212,10 +221,10 @@ def merge_minidump_event(data, minidump):
 
     # Extract referenced (not all loaded) images
     images = [{
-        'type': 'apple',  # Required by interface
-        'uuid': six.text_type(module.uuid),
+        'type': 'symbolic',
+        'id': id_from_breakpad(module.id),
         'image_addr': '0x%x' % module.addr,
-        'image_size': '0x%x' % module.size,
+        'image_size': module.size,
         'name': module.name,
     } for module in state.modules()]
     data.setdefault('debug_meta', {})['images'] = images
diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index 6e545b50d5..e2c8198573 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -220,15 +220,15 @@ class ProjectDSymFile(Model):
     object_name = models.TextField()
     cpu_name = models.CharField(max_length=40)
     project = FlexibleForeignKey('sentry.Project', null=True)
-    uuid = models.CharField(max_length=36)
+    debug_id = models.CharField(max_length=64, db_column='uuid')
     objects = ProjectDSymFileManager()
 
     class Meta:
-        unique_together = (('project', 'uuid'), )
+        unique_together = (('project', 'debug_id'), )
         db_table = 'sentry_projectdsymfile'
         app_label = 'sentry'
 
-    __repr__ = sane_repr('object_name', 'cpu_name', 'uuid')
+    __repr__ = sane_repr('object_name', 'cpu_name', 'debug_id')
 
     @property
     def dsym_type(self):
@@ -258,18 +258,18 @@ class ProjectSymCacheFile(Model):
         db_table = 'sentry_projectsymcachefile'
         app_label = 'sentry'
 
-    __repr__ = sane_repr('uuid')
+    __repr__ = sane_repr('debug_id')
 
     def delete(self, *args, **kwargs):
         super(ProjectSymCacheFile, self).delete(*args, **kwargs)
         self.cache_file.delete()
 
 
-def create_dsym_from_uuid(project, dsym_type, cpu_name, uuid,
-                          basename, fileobj=None, file=None):
+def create_dsym_from_id(project, dsym_type, cpu_name, debug_id,
+                        basename, fileobj=None, file=None):
     """This creates a mach dsym file or proguard mapping from the given
-    uuid and open file object to a dsym file.  This will not verify the
-    uuid (intentionally so).  Use `create_files_from_dsym_zip` for doing
+    debug id and open file object to a dsym file.  This will not verify the
+    debug id (intentionally so).  Use `create_files_from_dsym_zip` for doing
     everything.
     """
     if dsym_type == 'proguard':
@@ -293,7 +293,7 @@ def create_dsym_from_uuid(project, dsym_type, cpu_name, uuid,
         fileobj.seek(0, 0)
 
         try:
-            rv = ProjectDSymFile.objects.get(uuid=uuid, project=project)
+            rv = ProjectDSymFile.objects.get(debug_id=debug_id, project=project)
             if rv.file.checksum == checksum:
                 return rv, False
         except ProjectDSymFile.DoesNotExist:
@@ -304,7 +304,7 @@ def create_dsym_from_uuid(project, dsym_type, cpu_name, uuid,
             rv.delete()
 
         file = File.objects.create(
-            name=uuid,
+            name=debug_id,
             type='project.dsym',
             headers={'Content-Type': DSYM_MIMETYPES[dsym_type]},
         )
@@ -313,29 +313,29 @@ def create_dsym_from_uuid(project, dsym_type, cpu_name, uuid,
             with transaction.atomic():
                 rv = ProjectDSymFile.objects.create(
                     file=file,
-                    uuid=uuid,
+                    debug_id=debug_id,
                     cpu_name=cpu_name,
                     object_name=object_name,
                     project=project,
                 )
         except IntegrityError:
             file.delete()
-            rv = ProjectDSymFile.objects.get(uuid=uuid, project=project)
+            rv = ProjectDSymFile.objects.get(debug_id=debug_id, project=project)
     else:
         try:
-            rv = ProjectDSymFile.objects.get(uuid=uuid, project=project)
+            rv = ProjectDSymFile.objects.get(debug_id=debug_id, project=project)
         except ProjectDSymFile.DoesNotExist:
             try:
                 with transaction.atomic():
                     rv = ProjectDSymFile.objects.create(
                         file=file,
-                        uuid=uuid,
+                        debug_id=debug_id,
                         cpu_name=cpu_name,
                         object_name=object_name,
                         project=project,
                     )
             except IntegrityError:
-                rv = ProjectDSymFile.objects.get(uuid=uuid, project=project)
+                rv = ProjectDSymFile.objects.get(debug_id=debug_id, project=project)
                 rv.file.delete()
                 rv.file = file
                 rv.save()
@@ -349,7 +349,7 @@ def create_dsym_from_uuid(project, dsym_type, cpu_name, uuid,
     resolve_processing_issue(
         project=project,
         scope='native',
-        object='dsym:%s' % uuid,
+        object='dsym:%s' % debug_id,
     )
 
     return rv, True
@@ -363,7 +363,7 @@ def _analyze_progard_filename(filename):
     ident = match.group(1)
 
     try:
-        return uuid.UUID(ident)
+        return six.text_type(uuid.UUID(ident))
     except Exception:
         pass
 
@@ -375,9 +375,9 @@ def detect_dif_from_path(path):
     """
     # proguard files (proguard/UUID.txt) or
     # (proguard/mapping-UUID.txt).
-    proguard_uuid = _analyze_progard_filename(path)
-    if proguard_uuid is not None:
-        return [('proguard', 'any', six.text_type(proguard_uuid), path)]
+    proguard_id = _analyze_progard_filename(path)
+    if proguard_id is not None:
+        return [('proguard', 'any', proguard_id, path)]
 
     # macho style debug symbols
     try:
@@ -390,7 +390,7 @@ def detect_dif_from_path(path):
     else:
         objs = []
         for obj in fo.iter_objects():
-            objs.append((obj.kind, obj.arch, six.text_type(obj.uuid), path))
+            objs.append((obj.kind, obj.arch, obj.id, path))
         return objs
 
 
@@ -399,13 +399,13 @@ def create_dsym_from_dif(to_create, project, overwrite_filename=None):
     return an array of created objects.
     """
     rv = []
-    for dsym_type, cpu, file_uuid, filename in to_create:
+    for dsym_type, cpu, file_id, filename in to_create:
         with open(filename, 'rb') as f:
             result_filename = os.path.basename(filename)
             if overwrite_filename is not None:
                 result_filename = overwrite_filename
-            dsym, created = create_dsym_from_uuid(
-                project, dsym_type, cpu, file_uuid, result_filename,
+            dsym, created = create_dsym_from_id(
+                project, dsym_type, cpu, file_id, result_filename,
                 fileobj=f
             )
             if created:
@@ -441,11 +441,11 @@ def create_files_from_dsym_zip(fileobj, project,
         # some obvious dogpiling.
         if update_symcaches:
             from sentry.tasks.symcache_update import symcache_update
-            uuids_to_update = [six.text_type(x.uuid) for x in rv
-                               if x.supports_symcache]
-            if uuids_to_update:
+            ids_to_update = [six.text_type(dif.debug_id) for dif in rv
+                             if dif.supports_symcache]
+            if ids_to_update:
                 symcache_update.delay(project_id=project.id,
-                                      uuids=uuids_to_update)
+                                      debug_ids=ids_to_update)
 
         # Uploading new dsysm changes the reprocessing revision
         bump_reprocessing_revision(project)
@@ -455,13 +455,13 @@ def create_files_from_dsym_zip(fileobj, project,
         shutil.rmtree(scratchpad)
 
 
-def find_dsym_file(project, image_uuid):
-    """Finds a dsym file for the given uuid."""
-    image_uuid = image_uuid.lower()
+def find_dsym_file(project, debug_id):
+    """Finds a dsym file for the given debug id."""
     try:
-        return ProjectDSymFile.objects.filter(
-            uuid=image_uuid, project=project
-        ).select_related('file').get()
+        return ProjectDSymFile.objects \
+            .filter(debug_id=debug_id.lower(), project=project) \
+            .select_related('file') \
+            .get()
     except ProjectDSymFile.DoesNotExist:
         pass
 
@@ -474,155 +474,154 @@ class DSymCache(object):
     def get_project_path(self, project):
         return os.path.join(self.cache_path, six.text_type(project.id))
 
-    def update_symcaches(self, project, uuids):
-        """Given some uuids of dsyms this will update the symcaches for
+    def update_symcaches(self, project, debug_ids):
+        """Given some debug ids of dsyms this will update the symcaches for
         all of these if a symcache is supported for that symbol.
         """
-        self._get_symcaches_impl(project, uuids)
+        self._get_symcaches_impl(project, debug_ids)
 
-    def get_symcaches(self, project, uuids, on_dsym_file_referenced=None,
+    def get_symcaches(self, project, debug_ids, on_dsym_file_referenced=None,
                       with_conversion_errors=False):
-        """Given some uuids returns the symcaches loaded for these uuids."""
+        """Given some debug ids returns the symcaches loaded for these debug ids."""
         cachefiles, conversion_errors = self._get_symcaches_impl(
-            project, uuids, on_dsym_file_referenced)
+            project, debug_ids, on_dsym_file_referenced)
         symcaches = self._load_cachefiles_via_fs(project, cachefiles)
         if with_conversion_errors:
-            return symcaches, dict((uuid.UUID(k), v)
-                                   for k, v in conversion_errors.items())
+            return symcaches, dict((k, v) for k, v in conversion_errors.items())
         return symcaches
 
-    def generate_symcache(self, project, dsym_file, tf=None):
-        """Generate a single symcache for a uuid based on the passed file
+    def generate_symcache(self, project, debug_file, tf=None):
+        """Generate a single symcache for a debug id based on the passed file
         contents.  If the tempfile is not passed then its opened again.
         """
-        if not dsym_file.supports_symcache:
+        if not debug_file.supports_symcache:
             raise RuntimeError('This file type does not support symcaches')
         close_tf = False
         if tf is None:
-            tf = dsym_file.file.getfile(as_tempfile=True)
+            tf = debug_file.file.getfile(as_tempfile=True)
             close_tf = True
         else:
             tf.seek(0)
         try:
-            return self._update_cachefile(dsym_file, tf)
+            return self._update_cachefile(debug_file, tf)
         finally:
             if close_tf:
                 tf.close()
 
-    def fetch_dsyms(self, project, uuids):
-        """Given some uuids returns a uuid to path mapping for where the
+    def fetch_dsyms(self, project, debug_ids):
+        """Given some ids returns an id to path mapping for where the
         debug symbol files are on the FS.
         """
         rv = {}
-        for image_uuid in uuids:
-            image_uuid = six.text_type(image_uuid).lower()
-            dsym_path = os.path.join(self.get_project_path(project), image_uuid)
+        for debug_id in debug_ids:
+            debug_id = six.text_type(debug_id).lower()
+            dsym_path = os.path.join(self.get_project_path(project), debug_id)
 
             try:
                 os.stat(dsym_path)
             except OSError as e:
                 if e.errno != errno.ENOENT:
                     raise
-                dsym_file = find_dsym_file(project, image_uuid)
-                if dsym_file is None:
+                debug_file = find_dsym_file(project, debug_id)
+                if debug_file is None:
                     continue
-                dsym_file.file.save_to(dsym_path)
-            rv[uuid.UUID(image_uuid)] = dsym_path
+                debug_file.file.save_to(dsym_path)
+            rv[debug_id] = dsym_path
 
         return rv
 
-    def _get_symcaches_impl(self, project, uuids, on_dsym_file_referenced=None):
+    def _get_symcaches_impl(self, project, debug_ids, on_dsym_file_referenced=None):
         # Fetch dsym files first and invoke the callback if we need
-        uuid_strings = list(map(six.text_type, uuids))
-        dsym_files = [x for x in ProjectDSymFile.objects.filter(
+        debug_ids = list(map(six.text_type, debug_ids))
+        debug_files = [x for x in ProjectDSymFile.objects.filter(
             project=project,
-            uuid__in=uuid_strings,
+            debug_id__in=debug_ids,
         ).select_related('file') if x.supports_symcache]
-        if not dsym_files:
+        if not debug_files:
             return {}, {}
 
-        dsym_files_by_uuid = {}
-        for dsym_file in dsym_files:
+        debug_files_by_id = {}
+        for debug_file in debug_files:
             if on_dsym_file_referenced is not None:
-                on_dsym_file_referenced(dsym_file)
-            dsym_files_by_uuid[dsym_file.uuid] = dsym_file
+                on_dsym_file_referenced(debug_file)
+            debug_files_by_id[debug_file.debug_id] = debug_file
 
         # Now find all the cache files we already have.
         q = ProjectSymCacheFile.objects.filter(
             project=project,
-            dsym_file_id__in=[x.id for x in dsym_files],
-        ).select_related('cache_file', 'dsym_file__uuid')
+            dsym_file_id__in=[x.id for x in debug_files],
+        ).select_related('cache_file', 'dsym_file__debug_id')
 
         conversion_errors = {}
         cachefiles = []
-        cachefiles_to_update = dict.fromkeys(x.uuid for x in dsym_files)
+        cachefiles_to_update = dict.fromkeys(x.debug_id for x in debug_files)
         for cache_file in q:
-            dsym_uuid = cache_file.dsym_file.uuid
-            dsym_file = dsym_files_by_uuid[dsym_uuid]
+            debug_id = cache_file.dsym_file.debug_id
+            debug_file = debug_files_by_id[debug_id]
             if cache_file.version == SYMCACHE_LATEST_VERSION and \
-               cache_file.checksum == dsym_file.file.checksum:
-                cachefiles_to_update.pop(dsym_uuid, None)
-                cachefiles.append((dsym_uuid, cache_file))
+               cache_file.checksum == debug_file.file.checksum:
+                cachefiles_to_update.pop(debug_id, None)
+                cachefiles.append((debug_id, cache_file))
             else:
-                cachefiles_to_update[dsym_uuid] = \
-                    (cache_file, dsym_file)
+                cachefiles_to_update[debug_id] = \
+                    (cache_file, debug_file)
 
         # if any cache files need to be updated, do that now.
         if cachefiles_to_update:
             to_update = []
-            for dsym_uuid, it in six.iteritems(cachefiles_to_update):
+            for debug_id, it in six.iteritems(cachefiles_to_update):
                 if it is None:
-                    dsym_file = dsym_files_by_uuid[dsym_uuid]
+                    debug_file = debug_files_by_id[debug_id]
                 else:
-                    cache_file, dsym_file = it
+                    cache_file, debug_file = it
                     cache_file.delete()
-                to_update.append(dsym_file)
+                to_update.append(debug_file)
             updated_cachefiles, conversion_errors = self._update_cachefiles(
                 project, to_update)
             cachefiles.extend(updated_cachefiles)
 
         return cachefiles, conversion_errors
 
-    def _update_cachefiles(self, project, dsym_files):
+    def _update_cachefiles(self, project, debug_files):
         rv = []
 
         # Find all the known bad files we could not convert last time
         # around
         conversion_errors = {}
-        for dsym_file in dsym_files:
-            cache_key = 'scbe:%s:%s' % (dsym_file.uuid, dsym_file.file.checksum)
+        for debug_file in debug_files:
+            cache_key = 'scbe:%s:%s' % (debug_file.debug_id, debug_file.file.checksum)
             err = default_cache.get(cache_key)
             if err is not None:
-                conversion_errors[dsym_file.uuid] = err
+                conversion_errors[debug_file.debug_id] = err
 
-        for dsym_file in dsym_files:
-            dsym_uuid = dsym_file.uuid
-            if dsym_uuid in conversion_errors:
+        for debug_file in debug_files:
+            dsym_id = debug_file.debug_id
+            if dsym_id in conversion_errors:
                 continue
 
-            with dsym_file.file.getfile(as_tempfile=True) as tf:
+            with debug_file.file.getfile(as_tempfile=True) as tf:
                 symcache_file, conversion_error = self._update_cachefile(
-                    dsym_file, tf)
+                    debug_file, tf)
             if symcache_file is not None:
-                rv.append((dsym_uuid, symcache_file))
+                rv.append((dsym_id, symcache_file))
             elif conversion_error is not None:
-                conversion_errors[dsym_uuid] = conversion_error
+                conversion_errors[dsym_id] = conversion_error
 
         return rv, conversion_errors
 
-    def _update_cachefile(self, dsym_file, tf):
+    def _update_cachefile(self, debug_file, tf):
         try:
             fo = FatObject.from_path(tf.name)
-            o = fo.get_object(uuid=dsym_file.uuid)
+            o = fo.get_object(id=debug_file.debug_id)
             if o is None:
                 return None, None
             symcache = o.make_symcache()
         except SymbolicError as e:
             default_cache.set('scbe:%s:%s' % (
-                dsym_file.uuid, dsym_file.file.checksum), e.message,
+                debug_file.debug_id, debug_file.file.checksum), e.message,
                 CONVERSION_ERROR_TTL)
             logger.error('dsymfile.symcache-build-error',
-                         exc_info=True, extra=dict(dsym_uuid=dsym_file.uuid))
+                         exc_info=True, extra=dict(debug_id=debug_file.debug_id))
             return None, e.message
 
         # We seem to have this task running onconcurrently or some
@@ -631,18 +630,18 @@ class DSymCache(object):
         # on get.
         for iteration in range(5):
             file = File.objects.create(
-                name=dsym_file.uuid,
+                name=debug_file.debug_id,
                 type='project.symcache',
             )
             file.putfile(symcache.open_stream())
             try:
                 with transaction.atomic():
                     return ProjectSymCacheFile.objects.get_or_create(
-                        project=dsym_file.project,
+                        project=debug_file.project,
                         cache_file=file,
-                        dsym_file=dsym_file,
+                        dsym_file=debug_file,
                         defaults=dict(
-                            checksum=dsym_file.file.checksum,
+                            checksum=debug_file.file.checksum,
                             version=symcache.file_format_version,
                         )
                     )[0], None
@@ -650,8 +649,8 @@ class DSymCache(object):
                 file.delete()
                 try:
                     return ProjectSymCacheFile.objects.get(
-                        project=dsym_file.project,
-                        dsym_file=dsym_file,
+                        project=debug_file.project,
+                        dsym_file=debug_file,
                     ), None
                 except ProjectSymCacheFile.DoesNotExist:
                     continue
@@ -661,8 +660,8 @@ class DSymCache(object):
     def _load_cachefiles_via_fs(self, project, cachefiles):
         rv = {}
         base = self.get_project_path(project)
-        for dsym_uuid, symcache_file in cachefiles:
-            cachefile_path = os.path.join(base, dsym_uuid + '.symcache')
+        for dsym_id, symcache_file in cachefiles:
+            cachefile_path = os.path.join(base, dsym_id + '.symcache')
             try:
                 stat = os.stat(cachefile_path)
             except OSError as e:
@@ -671,7 +670,7 @@ class DSymCache(object):
                 symcache_file.cache_file.save_to(cachefile_path)
             else:
                 self._try_bump_timestamp(cachefile_path, stat)
-            rv[uuid.UUID(dsym_uuid)] = SymCache.from_path(cachefile_path)
+            rv[dsym_id] = SymCache.from_path(cachefile_path)
         return rv
 
     def _try_bump_timestamp(self, path, old_stat):
diff --git a/src/sentry/models/eventerror.py b/src/sentry/models/eventerror.py
index a0c42deee2..6450c64b71 100644
--- a/src/sentry/models/eventerror.py
+++ b/src/sentry/models/eventerror.py
@@ -85,10 +85,10 @@ class EventError(object):
         FETCH_TIMEOUT: u'Remote file took too long to load: ({timeout}s, {url})',
         NATIVE_NO_CRASHED_THREAD: u'No crashed thread found in crash report',
         NATIVE_INTERNAL_FAILURE: u'Internal failure when attempting to symbolicate: {error}',
-        NATIVE_BAD_DSYM: u'The debug symbol file used was broken.',
-        NATIVE_MISSING_OPTIONALLY_BUNDLED_DSYM: u'An optional debug symbol file was missing.',
-        NATIVE_MISSING_DSYM: u'A required debug symbol file was missing.',
-        NATIVE_MISSING_SYSTEM_DSYM: u'A system debug symbol file was missing.',
+        NATIVE_BAD_DSYM: u'The debug information file used was broken.',
+        NATIVE_MISSING_OPTIONALLY_BUNDLED_DSYM: u'An optional debug information file was missing.',
+        NATIVE_MISSING_DSYM: u'A required debug information file was missing.',
+        NATIVE_MISSING_SYSTEM_DSYM: u'A system debug information file was missing.',
         NATIVE_MISSING_SYMBOL: u'Unable to resolve a symbol.',
         NATIVE_SIMULATOR_FRAME: u'Encountered an unprocessable simulator frame.',
         NATIVE_UNKNOWN_IMAGE: u'A binary image is referenced that is unknown.',
diff --git a/src/sentry/south_migrations/0401_auto__chg_field_projectdsymfile_uuid.py b/src/sentry/south_migrations/0401_auto__chg_field_projectdsymfile_uuid.py
new file mode 100644
index 0000000000..138da45ad8
--- /dev/null
+++ b/src/sentry/south_migrations/0401_auto__chg_field_projectdsymfile_uuid.py
@@ -0,0 +1,1124 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    # Flag to indicate if this migration is too risky
+    # to run online and needs to be coordinated for offline
+    is_dangerous = False
+
+    def forwards(self, orm):
+
+        # Changing field 'ProjectDSymFile.uuid'
+        db.alter_column(
+            'sentry_projectdsymfile',
+            'uuid',
+            self.gf('django.db.models.fields.CharField')(
+                max_length=64,
+                db_column='uuid'))
+
+    def backwards(self, orm):
+
+        # Changing field 'ProjectDSymFile.uuid'
+        db.alter_column('sentry_projectdsymfile', 'uuid', self.gf(
+            'django.db.models.fields.CharField')(max_length=36))
+
+    models = {
+        'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.apiapplication': {
+            'Meta': {'object_name': 'ApiApplication'},
+            'allowed_origins': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'client_id': ('django.db.models.fields.CharField', [], {'default': "'301f80ad4ae943faaf5be0b9a4384a5e5cacd90a06c34658aa721e5357f4746e'", 'unique': 'True', 'max_length': '64'}),
+            'client_secret': ('sentry.db.models.fields.encrypted.EncryptedTextField', [], {'default': "'7a1fe2be644240c0b7701eb6d6a346ba4945c9ad6c3244be8b185eac2053e6b1'"}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'homepage_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'default': "'Obliging Tuna'", 'max_length': '64', 'blank': 'True'}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'privacy_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
+            'redirect_uris': ('django.db.models.fields.TextField', [], {}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'terms_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'})
+        },
+        'sentry.apiauthorization': {
+            'Meta': {'unique_together': "(('user', 'application'),)", 'object_name': 'ApiAuthorization'},
+            'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']", 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'scope_list': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.apigrant': {
+            'Meta': {'object_name': 'ApiGrant'},
+            'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']"}),
+            'code': ('django.db.models.fields.CharField', [], {'default': "'6c8fae560e70408a910671bef465c826'", 'max_length': '64', 'db_index': 'True'}),
+            'expires_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2018, 4, 3, 0, 0)', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'redirect_uri': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
+            'scope_list': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.apikey': {
+            'Meta': {'object_name': 'ApiKey'},
+            'allowed_origins': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'default': "'Default'", 'max_length': '64', 'blank': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Organization']"}),
+            'scope_list': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.apitoken': {
+            'Meta': {'object_name': 'ApiToken'},
+            'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']", 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'expires_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2018, 5, 3, 0, 0)', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'refresh_token': ('django.db.models.fields.CharField', [], {'default': "'090eeba1094744c0af0d7eff090cd6cae7b4f5719fc14455bc3741c03ed939d5'", 'max_length': '64', 'unique': 'True', 'null': 'True'}),
+            'scope_list': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'token': ('django.db.models.fields.CharField', [], {'default': "'93ba13a5f7674d00a14684a47bf25e4d148ca944a5d54ab983810fa559425935'", 'unique': 'True', 'max_length': '64'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.assistantactivity': {
+            'Meta': {'unique_together': "(('user', 'guide_id'),)", 'object_name': 'AssistantActivity', 'db_table': "'sentry_assistant_activity'"},
+            'dismissed_ts': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'guide_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'useful': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'viewed_ts': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
+        },
+        'sentry.auditlogentry': {
+            'Meta': {'object_name': 'AuditLogEntry'},
+            'actor': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_actors'", 'null': 'True', 'to': "orm['sentry.User']"}),
+            'actor_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiKey']", 'null': 'True', 'blank': 'True'}),
+            'actor_label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'target_object': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'target_user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_targets'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.authenticator': {
+            'Meta': {'unique_together': "(('user', 'type'),)", 'object_name': 'Authenticator', 'db_table': "'auth_authenticator'"},
+            'config': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {}),
+            'created_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'last_used_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.authidentity': {
+            'Meta': {'unique_together': "(('auth_provider', 'ident'), ('auth_provider', 'user'))", 'object_name': 'AuthIdentity'},
+            'auth_provider': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.AuthProvider']"}),
+            'data': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'last_synced': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_verified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.authprovider': {
+            'Meta': {'object_name': 'AuthProvider'},
+            'config': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'default_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'default_role': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'default_teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_sync': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']", 'unique': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'sync_time': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.broadcast': {
+            'Meta': {'object_name': 'Broadcast'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2018, 4, 10, 0, 0)', 'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
+            'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
+            'title': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'upstream_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.broadcastseen': {
+            'Meta': {'unique_together': "(('broadcast', 'user'),)", 'object_name': 'BroadcastSeen'},
+            'broadcast': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Broadcast']"}),
+            'date_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.commit': {
+            'Meta': {'unique_together': "(('repository_id', 'key'),)", 'object_name': 'Commit', 'index_together': "(('repository_id', 'date_added'),)"},
+            'author': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.CommitAuthor']", 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'message': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'repository_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.commitauthor': {
+            'Meta': {'unique_together': "(('organization_id', 'email'), ('organization_id', 'external_id'))", 'object_name': 'CommitAuthor'},
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '164', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
+        },
+        'sentry.commitfilechange': {
+            'Meta': {'unique_together': "(('commit', 'filename'),)", 'object_name': 'CommitFileChange'},
+            'commit': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Commit']"}),
+            'filename': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '1'})
+        },
+        'sentry.counter': {
+            'Meta': {'object_name': 'Counter', 'db_table': "'sentry_projectcounter'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'unique': 'True'}),
+            'value': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.deletedorganization': {
+            'Meta': {'object_name': 'DeletedOrganization'},
+            'actor_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'actor_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'actor_label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'date_created': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'date_deleted': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'reason': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'slug': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
+        },
+        'sentry.deletedproject': {
+            'Meta': {'object_name': 'DeletedProject'},
+            'actor_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'actor_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'actor_label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'date_created': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'date_deleted': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'organization_name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'organization_slug': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'reason': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'slug': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
+        },
+        'sentry.deletedteam': {
+            'Meta': {'object_name': 'DeletedTeam'},
+            'actor_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'actor_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'actor_label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'date_created': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'date_deleted': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'organization_name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'organization_slug': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
+            'reason': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'slug': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
+        },
+        'sentry.deploy': {
+            'Meta': {'object_name': 'Deploy'},
+            'date_finished': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_started': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'notified': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.distribution': {
+            'Meta': {'unique_together': "(('release', 'name'),)", 'object_name': 'Distribution'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.dsymapp': {
+            'Meta': {'unique_together': "(('project', 'platform', 'app_id'),)", 'object_name': 'DSymApp'},
+            'app_id': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_synced': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'platform': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'sync_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'})
+        },
+        'sentry.email': {
+            'Meta': {'object_name': 'Email'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('sentry.db.models.fields.citext.CIEmailField', [], {'unique': 'True', 'max_length': '75'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'})
+        },
+        'sentry.environment': {
+            'Meta': {'unique_together': "(('project_id', 'name'), ('organization_id', 'name'))", 'object_name': 'Environment'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Project']", 'through': "orm['sentry.EnvironmentProject']", 'symmetrical': 'False'})
+        },
+        'sentry.environmentproject': {
+            'Meta': {'unique_together': "(('project', 'environment'),)", 'object_name': 'EnvironmentProject'},
+            'environment': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Environment']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_hidden': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project_id', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group_id', 'datetime'),)"},
+            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'time_spent': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'null': 'True'})
+        },
+        'sentry.eventmapping': {
+            'Meta': {'unique_together': "(('project_id', 'event_id'),)", 'object_name': 'EventMapping'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.eventprocessingissue': {
+            'Meta': {'unique_together': "(('raw_event', 'processing_issue'),)", 'object_name': 'EventProcessingIssue'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'processing_issue': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ProcessingIssue']"}),
+            'raw_event': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.RawEvent']"})
+        },
+        'sentry.eventtag': {
+            'Meta': {'unique_together': "(('event_id', 'key_id', 'value_id'),)", 'object_name': 'EventTag', 'index_together': "(('group_id', 'key_id', 'value_id'),)"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'value_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.eventuser': {
+            'Meta': {'unique_together': "(('project_id', 'ident'), ('project_id', 'hash'))", 'object_name': 'EventUser', 'index_together': "(('project_id', 'email'), ('project_id', 'username'), ('project_id', 'ip_address'))"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
+        },
+        'sentry.featureadoption': {
+            'Meta': {'unique_together': "(('organization', 'feature_id'),)", 'object_name': 'FeatureAdoption'},
+            'applicable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'complete': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_completed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'feature_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"})
+        },
+        'sentry.file': {
+            'Meta': {'object_name': 'File'},
+            'blob': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'legacy_blob'", 'null': 'True', 'to': "orm['sentry.FileBlob']"}),
+            'blobs': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.FileBlob']", 'through': "orm['sentry.FileBlobIndex']", 'symmetrical': 'False'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True', 'db_index': 'True'}),
+            'headers': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.fileblob': {
+            'Meta': {'object_name': 'FileBlob'},
+            'checksum': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '40'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'})
+        },
+        'sentry.fileblobindex': {
+            'Meta': {'unique_together': "(('file', 'blob', 'offset'),)", 'object_name': 'FileBlobIndex'},
+            'blob': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.FileBlob']"}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'offset': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.fileblobowner': {
+            'Meta': {'unique_together': "(('blob', 'organization'),)", 'object_name': 'FileBlobOwner'},
+            'blob': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.FileBlob']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'short_id'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'", 'index_together': "(('project', 'first_release'),)"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']", 'null': 'True', 'on_delete': 'models.PROTECT'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'short_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'time_spent_total': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupassignee': {
+            'Meta': {'object_name': 'GroupAssignee', 'db_table': "'sentry_groupasignee'"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'unique': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'to': "orm['sentry.Project']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_assignee_set'", 'null': 'True', 'to': "orm['sentry.Team']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_assignee_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupcommitresolution': {
+            'Meta': {'unique_together': "(('group_id', 'commit_id'),)", 'object_name': 'GroupCommitResolution'},
+            'commit_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'})
+        },
+        'sentry.groupemailthread': {
+            'Meta': {'unique_together': "(('email', 'group'), ('email', 'msgid'))", 'object_name': 'GroupEmailThread'},
+            'date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'msgid': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.groupenvironment': {
+            'Meta': {'unique_together': "[('group_id', 'environment_id')]", 'object_name': 'GroupEnvironment', 'index_together': "[('environment_id', 'first_release_id')]"},
+            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'first_release_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'})
+        },
+        'sentry.grouphash': {
+            'Meta': {'unique_together': "(('project', 'hash'),)", 'object_name': 'GroupHash'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'group_tombstone_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'state': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.grouplink': {
+            'Meta': {'unique_together': "(('group_id', 'linked_type', 'linked_id'),)", 'object_name': 'GroupLink'},
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'linked_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'linked_type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '1'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
+            'relationship': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '2'})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.groupredirect': {
+            'Meta': {'object_name': 'GroupRedirect'},
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'previous_group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'unique': 'True'})
+        },
+        'sentry.grouprelease': {
+            'Meta': {'unique_together': "(('group_id', 'release_id', 'environment'),)", 'object_name': 'GroupRelease'},
+            'environment': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '64'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'release_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
+        },
+        'sentry.groupresolution': {
+            'Meta': {'object_name': 'GroupResolution'},
+            'actor_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'unique': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.grouprulestatus': {
+            'Meta': {'unique_together': "(('rule', 'group'),)", 'object_name': 'GroupRuleStatus'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_active': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'rule': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Rule']"}),
+            'status': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'})
+        },
+        'sentry.groupseen': {
+            'Meta': {'unique_together': "(('user', 'group'),)", 'object_name': 'GroupSeen'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'db_index': 'False'})
+        },
+        'sentry.groupshare': {
+            'Meta': {'object_name': 'GroupShare'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'unique': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'}),
+            'uuid': ('django.db.models.fields.CharField', [], {'default': "'c7c2c294f10c4ddeb7edc0a15a15006b'", 'unique': 'True', 'max_length': '32'})
+        },
+        'sentry.groupsnooze': {
+            'Meta': {'object_name': 'GroupSnooze'},
+            'actor_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'count': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'unique': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'state': ('jsonfield.fields.JSONField', [], {'null': 'True'}),
+            'until': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'user_count': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'user_window': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'window': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.groupsubscription': {
+            'Meta': {'unique_together': "(('group', 'user'),)", 'object_name': 'GroupSubscription'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'subscription_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'subscription_set'", 'to': "orm['sentry.Project']"}),
+            'reason': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.grouptagkey': {
+            'Meta': {'unique_together': "(('project_id', 'group_id', 'key'),)", 'object_name': 'GroupTagKey'},
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouptagvalue': {
+            'Meta': {'unique_together': "(('group_id', 'key', 'value'),)", 'object_name': 'GroupTagValue', 'db_table': "'sentry_messagefiltervalue'", 'index_together': "(('project_id', 'key', 'value', 'last_seen'),)"},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.grouptombstone': {
+            'Meta': {'object_name': 'GroupTombstone'},
+            'actor_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'level': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '40', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'previous_group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'unique': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.identity': {
+            'Meta': {'unique_together': "(('idp', 'external_id'), ('idp', 'user'))", 'object_name': 'Identity'},
+            'data': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_verified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'idp': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.IdentityProvider']"}),
+            'scopes': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.identityprovider': {
+            'Meta': {'unique_together': "(('type', 'organization'),)", 'object_name': 'IdentityProvider'},
+            'config': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.integration': {
+            'Meta': {'unique_together': "(('provider', 'external_id'),)", 'object_name': 'Integration'},
+            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'metadata': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organizations': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'integrations'", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationIntegration']", 'to': "orm['sentry.Organization']"}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'integrations'", 'symmetrical': 'False', 'through': "orm['sentry.ProjectIntegration']", 'to': "orm['sentry.Project']"}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.latestrelease': {
+            'Meta': {'unique_together': "(('repository_id', 'environment_id'),)", 'object_name': 'LatestRelease'},
+            'commit_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'deploy_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'environment_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'release_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'repository_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'unique': 'True'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'last_updated': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.organization': {
+            'Meta': {'object_name': 'Organization'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'default_role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'org_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMember']", 'to': "orm['sentry.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.organizationaccessrequest': {
+            'Meta': {'unique_together': "(('team', 'member'),)", 'object_name': 'OrganizationAccessRequest'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'member': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.organizationavatar': {
+            'Meta': {'object_name': 'OrganizationAvatar'},
+            'avatar_type': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']", 'unique': 'True', 'null': 'True', 'on_delete': 'models.SET_NULL'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32', 'db_index': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'avatar'", 'unique': 'True', 'to': "orm['sentry.Organization']"})
+        },
+        'sentry.organizationintegration': {
+            'Meta': {'unique_together': "(('organization', 'integration'),)", 'object_name': 'OrganizationIntegration'},
+            'config': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
+            'default_auth_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'integration': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Integration']"}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"})
+        },
+        'sentry.organizationmember': {
+            'Meta': {'unique_together': "(('organization', 'user'), ('organization', 'email'))", 'object_name': 'OrganizationMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'has_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Organization']"}),
+            'role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
+            'teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMemberTeam']", 'blank': 'True'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '64', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50', 'blank': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'sentry_orgmember_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.organizationmemberteam': {
+            'Meta': {'unique_together': "(('team', 'organizationmember'),)", 'object_name': 'OrganizationMemberTeam', 'db_table': "'sentry_organizationmember_teams'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'organizationmember': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.organizationonboardingtask': {
+            'Meta': {'unique_together': "(('organization', 'task'),)", 'object_name': 'OrganizationOnboardingTask'},
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_completed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'task': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.organizationoption': {
+            'Meta': {'unique_together': "(('organization', 'key'),)", 'object_name': 'OrganizationOption', 'db_table': "'sentry_organizationoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.processingissue': {
+            'Meta': {'unique_together': "(('project', 'checksum', 'type'),)", 'object_name': 'ProcessingIssue'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '40', 'db_index': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '30'})
+        },
+        'sentry.project': {
+            'Meta': {'unique_together': "(('organization', 'slug'),)", 'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'first_event': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0', 'null': 'True'}),
+            'forced_color': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'teams': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'teams'", 'symmetrical': 'False', 'through': "orm['sentry.ProjectTeam']", 'to': "orm['sentry.Team']"})
+        },
+        'sentry.projectbookmark': {
+            'Meta': {'unique_together': "(('project_id', 'user'),)", 'object_name': 'ProjectBookmark'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.projectdsymfile': {
+            'Meta': {'unique_together': "(('project', 'debug_id'),)", 'object_name': 'ProjectDSymFile'},
+            'cpu_name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'debug_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'db_column': "'uuid'"}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object_name': ('django.db.models.fields.TextField', [], {}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'})
+        },
+        'sentry.projectintegration': {
+            'Meta': {'unique_together': "(('project', 'integration'),)", 'object_name': 'ProjectIntegration'},
+            'config': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'integration': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Integration']"}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'rate_limit_count': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'rate_limit_window': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'roles': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.projectownership': {
+            'Meta': {'object_name': 'ProjectOwnership'},
+            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'fallthrough': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'last_updated': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'unique': 'True'}),
+            'raw': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'schema': ('jsonfield.fields.JSONField', [], {'null': 'True'})
+        },
+        'sentry.projectplatform': {
+            'Meta': {'unique_together': "(('project_id', 'platform'),)", 'object_name': 'ProjectPlatform'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.projectredirect': {
+            'Meta': {'unique_together': "(('organization', 'redirect_slug'),)", 'object_name': 'ProjectRedirect'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'redirect_slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'})
+        },
+        'sentry.projectsymcachefile': {
+            'Meta': {'unique_together': "(('project', 'dsym_file'),)", 'object_name': 'ProjectSymCacheFile'},
+            'cache_file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'dsym_file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ProjectDSymFile']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'version': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.projectteam': {
+            'Meta': {'unique_together': "(('project', 'team'),)", 'object_name': 'ProjectTeam'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.pullrequest': {
+            'Meta': {'unique_together': "(('repository_id', 'key'),)", 'object_name': 'PullRequest', 'db_table': "'sentry_pull_request'", 'index_together': "(('repository_id', 'date_added'),)"},
+            'author': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.CommitAuthor']", 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'merge_commit_sha': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'repository_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'title': ('django.db.models.fields.TextField', [], {'null': 'True'})
+        },
+        'sentry.pullrequestcommit': {
+            'Meta': {'unique_together': "(('pull_request', 'commit'),)", 'object_name': 'PullRequestCommit', 'db_table': "'sentry_pullrequest_commit'"},
+            'commit': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Commit']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'pull_request': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.PullRequest']"})
+        },
+        'sentry.rawevent': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'RawEvent'},
+            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.release': {
+            'Meta': {'unique_together': "(('organization', 'version'),)", 'object_name': 'Release'},
+            'authors': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
+            'commit_count': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_released': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'date_started': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_commit_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'last_deploy_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'new_groups': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True', 'blank': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'releases'", 'symmetrical': 'False', 'through': "orm['sentry.ReleaseProject']", 'to': "orm['sentry.Project']"}),
+            'ref': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True', 'blank': 'True'}),
+            'total_deploys': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'version': ('django.db.models.fields.CharField', [], {'max_length': '250'})
+        },
+        'sentry.releasecommit': {
+            'Meta': {'unique_together': "(('release', 'commit'), ('release', 'order'))", 'object_name': 'ReleaseCommit'},
+            'commit': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Commit']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'order': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.releaseenvironment': {
+            'Meta': {'unique_together': "(('organization_id', 'release_id', 'environment_id'),)", 'object_name': 'ReleaseEnvironment', 'db_table': "'sentry_environmentrelease'"},
+            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'release_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
+        },
+        'sentry.releasefile': {
+            'Meta': {'unique_together': "(('release', 'ident'),)", 'object_name': 'ReleaseFile'},
+            'dist': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Distribution']", 'null': 'True'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'name': ('django.db.models.fields.TextField', [], {}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.releaseheadcommit': {
+            'Meta': {'unique_together': "(('repository_id', 'release'),)", 'object_name': 'ReleaseHeadCommit'},
+            'commit': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Commit']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"}),
+            'repository_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.releaseproject': {
+            'Meta': {'unique_together': "(('project', 'release'),)", 'object_name': 'ReleaseProject', 'db_table': "'sentry_release_project'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'new_groups': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.releaseprojectenvironment': {
+            'Meta': {'unique_together': "(('project', 'release', 'environment'),)", 'object_name': 'ReleaseProjectEnvironment'},
+            'environment': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Environment']"}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'new_issues_count': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.repository': {
+            'Meta': {'unique_together': "(('organization_id', 'name'), ('organization_id', 'provider', 'external_id'))", 'object_name': 'Repository'},
+            'config': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'integration_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'})
+        },
+        'sentry.reprocessingreport': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'ReprocessingReport'},
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.rule': {
+            'Meta': {'object_name': 'Rule'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.savedsearch': {
+            'Meta': {'unique_together': "(('project', 'name'),)", 'object_name': 'SavedSearch'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_default': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'query': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.savedsearchuserdefault': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'SavedSearchUserDefault', 'db_table': "'sentry_savedsearch_userdefault'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'savedsearch': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.SavedSearch']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.scheduleddeletion': {
+            'Meta': {'unique_together': "(('app_label', 'model_name', 'object_id'),)", 'object_name': 'ScheduledDeletion'},
+            'aborted': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'actor_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_scheduled': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2018, 5, 3, 0, 0)'}),
+            'guid': ('django.db.models.fields.CharField', [], {'default': "'5752452b0af04e69ad591b12f5395e32'", 'unique': 'True', 'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'in_progress': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'model_name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'object_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.scheduledjob': {
+            'Meta': {'object_name': 'ScheduledJob'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_scheduled': ('django.db.models.fields.DateTimeField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'payload': ('jsonfield.fields.JSONField', [], {'default': '{}'})
+        },
+        'sentry.servicehook': {
+            'Meta': {'object_name': 'ServiceHook'},
+            'actor_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']", 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'events': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
+            'guid': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'secret': ('sentry.db.models.fields.encrypted.EncryptedTextField', [], {'default': "'143c2a1354574dd8ab0a6e8fe7b3418b28fa94d02dbd4b329971a7d943c9e4d5'"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '512'}),
+            'version': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.tagkey': {
+            'Meta': {'unique_together': "(('project_id', 'key'),)", 'object_name': 'TagKey', 'db_table': "'sentry_filterkey'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.tagvalue': {
+            'Meta': {'unique_together': "(('project_id', 'key', 'value'),)", 'object_name': 'TagValue', 'db_table': "'sentry_filtervalue'", 'index_together': "(('project_id', 'key', 'last_seen'),)"},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.team': {
+            'Meta': {'unique_together': "(('organization', 'slug'),)", 'object_name': 'Team'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_password_expired': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_active': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'last_password_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_column': "'first_name'", 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'session_nonce': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
+        },
+        'sentry.useravatar': {
+            'Meta': {'object_name': 'UserAvatar'},
+            'avatar_type': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']", 'unique': 'True', 'null': 'True', 'on_delete': 'models.SET_NULL'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32', 'db_index': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'avatar'", 'unique': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.useremail': {
+            'Meta': {'unique_together': "(('user', 'email'),)", 'object_name': 'UserEmail'},
+            'date_hash_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_verified': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'emails'", 'to': "orm['sentry.User']"}),
+            'validation_hash': ('django.db.models.fields.CharField', [], {'default': "u'BbkHtpjWFecNvQn6a8hQCv6uGlOUvYmP'", 'max_length': '32'})
+        },
+        'sentry.userip': {
+            'Meta': {'unique_together': "(('user', 'ip_address'),)", 'object_name': 'UserIP'},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'), ('user', 'organization', 'key'))", 'object_name': 'UserOption'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']", 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.userpermission': {
+            'Meta': {'unique_together': "(('user', 'permission'),)", 'object_name': 'UserPermission'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'permission': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.userreport': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'UserReport', 'index_together': "(('project', 'event_id'), ('project', 'date_added'))"},
+            'comments': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'environment': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Environment']", 'null': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'event_user_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.versiondsymfile': {
+            'Meta': {'unique_together': "(('dsym_file', 'version', 'build'),)", 'object_name': 'VersionDSymFile'},
+            'build': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'dsym_app': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymApp']"}),
+            'dsym_file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ProjectDSymFile']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'version': ('django.db.models.fields.CharField', [], {'max_length': '32'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/src/sentry/static/sentry/app/components/events/errorItem.jsx b/src/sentry/static/sentry/app/components/events/errorItem.jsx
index cac2e27322..5e9ac8cb91 100644
--- a/src/sentry/static/sentry/app/components/events/errorItem.jsx
+++ b/src/sentry/static/sentry/app/components/events/errorItem.jsx
@@ -4,6 +4,12 @@ import React from 'react';
 import KeyValueList from './interfaces/keyValueList';
 import {t} from '../../locale';
 
+const keyMapping = {
+  image_uuid: 'Debug ID',
+  image_name: 'File Name',
+  image_path: 'File Path',
+};
+
 class EventErrorItem extends React.Component {
   static propTypes = {
     error: PropTypes.object.isRequired,
@@ -40,7 +46,7 @@ class EventErrorItem extends React.Component {
       data.image_path = path.length ? path.join(separator) + separator : '';
     }
 
-    return _.mapKeys(data, (value, key) => _.startCase(key));
+    return _.mapKeys(data, (value, key) => t(keyMapping[key] || _.startCase(key)));
   }
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
index 72e5228fa4..a3db92d0eb 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
@@ -33,7 +33,7 @@ class DebugMetaInterface extends React.Component {
         version = (evt.release && evt.release.shortVersion) || 'unknown';
       } else
         version = `${img.major_version}.${img.minor_version}.${img.revision_version}`;
-    } else version = img.uuid;
+    } else version = img.id || img.uuid;
 
     if (version) return [name, version];
 
diff --git a/src/sentry/static/sentry/app/views/projectDebugSymbols.jsx b/src/sentry/static/sentry/app/views/projectDebugSymbols.jsx
index 2a9236d2df..824ab5b5fd 100644
--- a/src/sentry/static/sentry/app/views/projectDebugSymbols.jsx
+++ b/src/sentry/static/sentry/app/views/projectDebugSymbols.jsx
@@ -293,7 +293,7 @@ const ProjectDebugSymbols = createReactClass({
       return (
         <tr key={key}>
           <td>
-            <code className="small">{dsym.uuid}</code>
+            <code className="small">{dsym.debugId || dsym.uuid}</code>
           </td>
           <td>
             {dsym.symbolType === 'proguard' && dsym.objectName === 'proguard-mapping'
@@ -347,7 +347,7 @@ const ProjectDebugSymbols = createReactClass({
         <table className="table">
           <thead>
             <tr>
-              <th>{t('UUID')}</th>
+              <th>{t('Debug ID')}</th>
               <th>{t('Object')}</th>
               <th>{t('Type')}</th>
               <th>{t('Uploaded')}</th>
@@ -398,7 +398,7 @@ const ProjectDebugSymbols = createReactClass({
             <table className="table">
               <thead>
                 <tr>
-                  <th>{t('UUID')}</th>
+                  <th>{t('Debug ID')}</th>
                   <th>{t('Object')}</th>
                   <th>{t('Type')}</th>
                   <th>{t('Uploaded')}</th>
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx b/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx
index e8cf7879ef..0eb54835f3 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx
@@ -17,10 +17,12 @@ import TimeSince from '../../../components/timeSince';
 const MESSAGES = {
   native_no_crashed_thread: t('No crashed thread found in crash report'),
   native_internal_failure: t('Internal failure when attempting to symbolicate: {error}'),
-  native_bad_dsym: t('The debug symbol file used was broken.'),
-  native_missing_optionally_bundled_dsym: t('An optional debug symbol file was missing.'),
-  native_missing_dsym: t('A required debug symbol file was missing.'),
-  native_missing_system_dsym: t('A system debug symbol file was missing.'),
+  native_bad_dsym: t('The debug information file used was broken.'),
+  native_missing_optionally_bundled_dsym: t(
+    'An optional debug information file was missing.'
+  ),
+  native_missing_dsym: t('A required debug information file was missing.'),
+  native_missing_system_dsym: t('A system debug information file was missing.'),
   native_missing_symbol: t('Unable to resolve a symbol.'),
   native_simulator_frame: t('Encountered an unprocessable simulator frame.'),
   native_unknown_image: t('A binary image is referenced that is unknown.'),
@@ -222,7 +224,7 @@ const ProjectProcessingIssues = createReactClass({
   },
 
   getImageName(path) {
-    let pathSegments = path.split(/\//g);
+    let pathSegments = path.split(/^[a-z]:\\/i.test(path) ? '\\' : '/');
     return pathSegments[pathSegments.length - 1];
   },
 
@@ -297,7 +299,7 @@ const ProjectProcessingIssues = createReactClass({
       fixLinkBlock = (
         <div className="panel panel-info">
           <div className="panel-heading">
-            <h3>{t('Having trouble uploading debug symbols? We can help!')}</h3>
+            <h3>{t('Having trouble uploading debug informations? We can help!')}</h3>
           </div>
           <div className="panel-body">
             <div className="form-group" style={{marginBottom: 0}}>
diff --git a/src/sentry/tasks/assemble.py b/src/sentry/tasks/assemble.py
index bb643ae842..85e900990a 100644
--- a/src/sentry/tasks/assemble.py
+++ b/src/sentry/tasks/assemble.py
@@ -46,9 +46,9 @@ def assemble_dif(project_id, name, checksum, chunks, **kwargs):
                                     % len(result))
                 return
 
-            dsym_type, cpu, file_uuid, filename = result[0]
-            dsym, created = dsymfile.create_dsym_from_uuid(
-                project, dsym_type, cpu, file_uuid,
+            dsym_type, cpu, file_id, filename = result[0]
+            dsym, created = dsymfile.create_dsym_from_id(
+                project, dsym_type, cpu, file_id,
                 os.path.basename(name),
                 file=file)
             delete_file = False
diff --git a/src/sentry/tasks/symcache_update.py b/src/sentry/tasks/symcache_update.py
index ead2c22242..ac74d0d86c 100644
--- a/src/sentry/tasks/symcache_update.py
+++ b/src/sentry/tasks/symcache_update.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-import uuid
 from sentry.tasks.base import instrumented_task
 from sentry.models import Project, ProjectDSymFile
 
@@ -10,11 +9,10 @@ from sentry.models import Project, ProjectDSymFile
     time_limit=65,
     soft_time_limit=60,
 )
-def symcache_update(project_id, uuids, **kwargs):
+def symcache_update(project_id, debug_ids, **kwargs):
     try:
         project = Project.objects.get(id=project_id)
     except Project.DoesNotExist:
         return
 
-    uuids = list(map(uuid.UUID, uuids))
-    ProjectDSymFile.dsymcache.update_symcaches(project, uuids)
+    ProjectDSymFile.dsymcache.update_symcaches(project, debug_ids)
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index ef0885aa38..d1d60e90f3 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -26,7 +26,7 @@ from uuid import uuid4
 from sentry.models import (
     Activity, Environment, Event, EventError, EventMapping, Group, Organization, OrganizationMember,
     OrganizationMemberTeam, Project, Team, User, UserEmail, Release, Commit, ReleaseCommit,
-    CommitAuthor, Repository, CommitFileChange
+    CommitAuthor, Repository, CommitFileChange, ProjectDSymFile, File
 )
 
 loremipsum = Generator()
@@ -605,4 +605,13 @@ class Fixtures(object):
             )
         if 'short_id' not in kwargs:
             kwargs['short_id'] = project.next_short_id()
-        return Group.objects.create(project=project, **kwargs)
+        return Group.objects.create(project=project, ** kwargs)
+
+    def create_file(self, **kwargs):
+        return File.objects.create(**kwargs)
+
+    def create_dsym_file(self, project=None, **kwargs):
+        if project is None:
+            project = self.project
+
+        return ProjectDSymFile.objects.create(project=project, **kwargs)
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 3bd647586f..2d050035f4 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -560,7 +560,6 @@ class MinidumpView(StoreView):
         # data from the event payload and set defaults for processing.
         extra.update(data.get('extra', {}))
         data['extra'] = extra
-        data['platform'] = 'native'
 
         # At this point, we only extract the bare minimum information
         # needed to continue processing. This requires to process the
diff --git a/tests/js/spec/views/__snapshots__/projectDebugSymbols.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectDebugSymbols.spec.jsx.snap
index a8dd104298..8f26f56440 100644
--- a/tests/js/spec/views/__snapshots__/projectDebugSymbols.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectDebugSymbols.spec.jsx.snap
@@ -468,7 +468,7 @@ exports[`ProjectDebugSymbols renders 1`] = `
         <thead>
           <tr>
             <th>
-              UUID
+              Debug ID
             </th>
             <th>
               Object
@@ -613,7 +613,7 @@ exports[`ProjectDebugSymbols renders empty 1`] = `
         <thead>
           <tr>
             <th>
-              UUID
+              Debug ID
             </th>
             <th>
               Object
diff --git a/tests/sentry/api/endpoints/test_dif_assemble.py b/tests/sentry/api/endpoints/test_dif_assemble.py
index fb14e5d454..e09d9a5655 100644
--- a/tests/sentry/api/endpoints/test_dif_assemble.py
+++ b/tests/sentry/api/endpoints/test_dif_assemble.py
@@ -138,7 +138,7 @@ class DifAssembleEndpoint(APITestCase):
             object_name='baz.dSYM',
             cpu_name='x86_64',
             project=self.project,
-            uuid='df449af8-0dcd-4320-9943-ec192134d593',
+            debug_id='df449af8-0dcd-4320-9943-ec192134d593',
         )
 
         # Request now tells us that everything is alright
@@ -260,7 +260,7 @@ class DifAssembleEndpoint(APITestCase):
         file_blob_index = FileBlobIndex.objects.all()
         assert len(file_blob_index) == 3
 
-    def test_dif_reponse(self):
+    def test_dif_response(self):
         sym_file = self.load_fixture('crash.sym')
         blob1 = FileBlob.from_file(ContentFile(sym_file))
         total_checksum = sha1(sym_file).hexdigest()
@@ -289,7 +289,7 @@ class DifAssembleEndpoint(APITestCase):
         assert response.data[total_checksum]['dif']['cpuName'] == 'x86_64'
         assert response.data[total_checksum]['dif']['uuid'] == '67e9247c-814e-392b-a027-dbde6748fcbf'
 
-    def test_dif_error_reponse(self):
+    def test_dif_error_response(self):
         sym_file = 'fail'
         blob1 = FileBlob.from_file(ContentFile(sym_file))
         total_checksum = sha1(sym_file).hexdigest()
diff --git a/tests/sentry/api/endpoints/test_dsym_files.py b/tests/sentry/api/endpoints/test_dsym_files.py
index 4da245a8e8..cef1f3dbc4 100644
--- a/tests/sentry/api/endpoints/test_dsym_files.py
+++ b/tests/sentry/api/endpoints/test_dsym_files.py
@@ -124,7 +124,7 @@ class DSymFilesUploadTest(APITestCase):
         assert vdf.version == '1.0'
         assert vdf.build == '1'
         assert vdf.dsym_app.app_id == 'com.example.myapp'
-        assert vdf.dsym_file.uuid == PROGUARD_UUID
+        assert vdf.dsym_file.debug_id == PROGUARD_UUID
 
     def test_associate_proguard_dsym_no_build(self):
         project = self.create_project(name='foo')
@@ -190,7 +190,7 @@ class DSymFilesUploadTest(APITestCase):
         assert vdf.version == '1.0'
         assert vdf.build is None
         assert vdf.dsym_app.app_id == 'com.example.myapp'
-        assert vdf.dsym_file.uuid == PROGUARD_UUID
+        assert vdf.dsym_file.debug_id == PROGUARD_UUID
 
     def test_dsyms_requests(self):
         project = self.create_project(name='foo')
diff --git a/tests/sentry/api/serializers/test_dsymfile.py b/tests/sentry/api/serializers/test_dsymfile.py
new file mode 100644
index 0000000000..6b0502024e
--- /dev/null
+++ b/tests/sentry/api/serializers/test_dsymfile.py
@@ -0,0 +1,68 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.api.serializers import serialize
+from sentry.testutils import TestCase
+
+
+class DSymFileSerializerTest(TestCase):
+    def test_simple(self):
+        file = self.create_file(
+            name='baz.dSYM',
+            size=42,
+            headers={'Content-Type': 'application/x-mach-binary'},
+            checksum='dc1e3f3e411979d336c3057cce64294f3420f93a',
+        )
+
+        dsym_file = self.create_dsym_file(
+            debug_id='dfb8e43a-f242-3d73-a453-aeb6a777ef75',
+            object_name='baz.dSYM',
+            cpu_name='x86_64',
+            file=file,
+        )
+
+        result = serialize(dsym_file)
+        result.pop('id')
+        result.pop('dateCreated')
+
+        assert result == {
+            'uuid': 'dfb8e43a-f242-3d73-a453-aeb6a777ef75',
+            'debugId': 'dfb8e43a-f242-3d73-a453-aeb6a777ef75',
+            'cpuName': 'x86_64',
+            'objectName': 'baz.dSYM',
+            'symbolType': 'macho',
+            'size': 42,
+            'sha1': 'dc1e3f3e411979d336c3057cce64294f3420f93a',
+            'headers': {'Content-Type': 'application/x-mach-binary'},
+        }
+
+    def test_long_debug_id(self):
+        file = self.create_file(
+            name='baz.dSYM',
+            size=42,
+            headers={'Content-Type': 'application/x-mach-binary'},
+            checksum='dc1e3f3e411979d336c3057cce64294f3420f93a',
+        )
+
+        dsym_file = self.create_dsym_file(
+            debug_id='dfb8e43a-f242-3d73-a453-aeb6a777ef75-feedface',
+            object_name='baz.dSYM',
+            cpu_name='x86_64',
+            file=file,
+        )
+
+        result = serialize(dsym_file)
+        result.pop('id')
+        result.pop('dateCreated')
+
+        assert result == {
+            'uuid': 'dfb8e43a-f242-3d73-a453-aeb6a777ef75',
+            'debugId': 'dfb8e43a-f242-3d73-a453-aeb6a777ef75-feedface',
+            'cpuName': 'x86_64',
+            'objectName': 'baz.dSYM',
+            'symbolType': 'macho',
+            'size': 42,
+            'sha1': 'dc1e3f3e411979d336c3057cce64294f3420f93a',
+            'headers': {'Content-Type': 'application/x-mach-binary'},
+        }
diff --git a/tests/sentry/deletions/test_project.py b/tests/sentry/deletions/test_project.py
index 201831ab15..550255a709 100644
--- a/tests/sentry/deletions/test_project.py
+++ b/tests/sentry/deletions/test_project.py
@@ -52,7 +52,7 @@ class DeleteProjectTest(TestCase):
         )
         dsym_file = ProjectDSymFile.objects.create(
             file=file,
-            uuid='uuid',
+            debug_id='uuid',
             cpu_name='cpu',
             object_name='object',
             project=project,
diff --git a/tests/sentry/interfaces/test_debug_meta.py b/tests/sentry/interfaces/test_debug_meta.py
index 8997a6f276..974cf73b81 100644
--- a/tests/sentry/interfaces/test_debug_meta.py
+++ b/tests/sentry/interfaces/test_debug_meta.py
@@ -36,20 +36,119 @@ class DebugMetaTest(TestCase):
         )
 
         assert len(interface.images) == 1
-        img = interface.images[0]
-        assert img['type'] == 'apple'
-        assert img['cpu_type'] == 16777228
-        assert img['cpu_subtype'] == 0
-        assert img['uuid'] == 'c05b4ddd-69a7-3840-a649-32180d341587'
-        assert img['image_vmaddr'] == '0x100000000'
-        assert img['image_addr'] == '0x100020000'
-        assert img['image_size'] == 32768
-        assert img['name'] == image_name
+        assert interface.images[0] == {
+            'type': 'apple',
+            'cpu_type': 16777228,
+            'cpu_subtype': 0,
+            'uuid': 'c05b4ddd-69a7-3840-a649-32180d341587',
+            'image_vmaddr': '0x100000000',
+            'image_addr': '0x100020000',
+            'image_size': 32768,
+            'name': image_name,
+        }
+        assert interface.sdk_info == {
+            'build': None,
+            'dsym_type': 'none',
+            'sdk_name': 'iOS',
+            'version_major': 9,
+            'version_minor': 3,
+            'version_patchlevel': 0,
+        }
+
+    def test_apple_behavior_with_arch(self):
+        image_name = (
+            '/var/containers/Bundle/Application/'
+            'B33C37A8-F933-4B6B-9FFA-152282BFDF13/SentryTest.app/SentryTest'
+        )
+        interface = DebugMeta.to_python(
+            {
+                "images": [
+                    {
+                        "type": "apple",
+                        "arch": "x86_64",
+                        "cpu_subtype": 0,
+                        "uuid": "C05B4DDD-69A7-3840-A649-32180D341587",
+                        "image_vmaddr": 4294967296,
+                        "image_addr": '0x100020000',
+                        "cpu_type": 16777228,
+                        "image_size": 32768,
+                        "name": image_name,
+                    }
+                ],
+                "sdk_info": {
+                    "sdk_name": "iOS",
+                    "version_major": 9,
+                    "version_minor": 3,
+                    "version_patchlevel": 0
+                }
+            }
+        )
+
+        assert interface.images[0]['arch'] == 'x86_64'
+
+    def test_symbolic_behavior(self):
+        interface = DebugMeta.to_python(
+            {
+                "images": [
+                    {
+                        "type": "symbolic",
+                        "id": "3249d99d-0c40-4931-8610-f4e4fb0b6936-1",
+                        "image_addr": 2752512,
+                        "image_size": 36864,
+                        "name": "C:\\projects\\breakpad-tools\\windows\\Release\\crash.exe",
+                    }
+                ],
+                "sdk_info": {
+                    "sdk_name": "Windows",
+                    "version_major": 10,
+                    "version_minor": 0,
+                    "version_patchlevel": 14393
+                }
+            }
+        )
+
+        assert len(interface.images) == 1
+        assert interface.images[0] == {
+            'type': 'symbolic',
+            'id': '3249d99d-0c40-4931-8610-f4e4fb0b6936-1',
+            'image_vmaddr': '0x0',
+            'image_addr': '0x2a0000',
+            'image_size': 36864,
+            'name': 'C:\\projects\\breakpad-tools\\windows\\Release\\crash.exe',
+        }
+
+        assert interface.sdk_info == {
+            'build': None,
+            'dsym_type': 'none',
+            'sdk_name': 'Windows',
+            'version_major': 10,
+            'version_minor': 0,
+            'version_patchlevel': 14393,
+        }
+
+    def test_symbolic_behavior_with_arch(self):
+        interface = DebugMeta.to_python(
+            {
+                "images": [
+                    {
+                        "type": "symbolic",
+                        "arch": "x86",
+                        "id": "3249d99d-0c40-4931-8610-f4e4fb0b6936-1",
+                        "image_addr": 2752512,
+                        "image_size": 36864,
+                        "name": "C:\\projects\\breakpad-tools\\windows\\Release\\crash.exe",
+                    }
+                ],
+                "sdk_info": {
+                    "sdk_name": "Windows",
+                    "version_major": 10,
+                    "version_minor": 0,
+                    "version_patchlevel": 14393
+                }
+            }
+        )
 
-        assert interface.sdk_info['sdk_name'] == 'iOS'
-        assert interface.sdk_info['version_major'] == 9
-        assert interface.sdk_info['version_minor'] == 3
-        assert interface.sdk_info['version_patchlevel'] == 0
+        assert interface.images[0]['arch'] == 'x86'
 
     def test_proguard_behavior(self):
         interface = DebugMeta.to_python(
diff --git a/tests/sentry/lang/native/fixtures/linux.dmp b/tests/sentry/lang/native/fixtures/linux.dmp
new file mode 100644
index 0000000000..bd467b400d
Binary files /dev/null and b/tests/sentry/lang/native/fixtures/linux.dmp differ
diff --git a/tests/sentry/lang/native/fixtures/macos.dmp b/tests/sentry/lang/native/fixtures/macos.dmp
new file mode 100644
index 0000000000..4b6bc99ac9
Binary files /dev/null and b/tests/sentry/lang/native/fixtures/macos.dmp differ
diff --git a/tests/sentry/lang/native/fixtures/windows.dmp b/tests/sentry/lang/native/fixtures/windows.dmp
new file mode 100755
index 0000000000..da8437e6c3
Binary files /dev/null and b/tests/sentry/lang/native/fixtures/windows.dmp differ
diff --git a/tests/sentry/lang/native/fixtures/windows.sym b/tests/sentry/lang/native/fixtures/windows.sym
new file mode 100755
index 0000000000..9753845779
--- /dev/null
+++ b/tests/sentry/lang/native/fixtures/windows.sym
@@ -0,0 +1,1191 @@
+MODULE windows x86 3249D99D0C4049318610F4E4FB0B69361 crash.pdb
+INFO CODE_ID 5AB380779000 crash.exe
+FILE 1 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\system_error
+FILE 2 c:\program files (x86)\windows kits\10\include\10.0.16299.0\um\processthreadsapi.h
+FILE 3 c:\projects\breakpad-tools\deps\breakpad\src\common\scoped_ptr.h
+FILE 4 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\xcall_once.h
+FILE 5 c:\projects\breakpad-tools\deps\breakpad\src\common\windows\string_utils-inl.h
+FILE 6 c:\program files (x86)\windows kits\10\include\10.0.16299.0\shared\stralign.h
+FILE 7 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\cmath
+FILE 8 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\xstring
+FILE 9 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\cstdlib
+FILE 10 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\xmemory0
+FILE 11 c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\stdlib.h
+FILE 12 c:\program files (x86)\windows kits\10\include\10.0.16299.0\shared\basetsd.h
+FILE 13 c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_math.h
+FILE 14 c:\projects\breakpad-tools\deps\breakpad\src\client\windows\crash_generation\client_info.h
+FILE 15 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\vadefs.h
+FILE 16 c:\projects\breakpad-tools\deps\breakpad\src\client\windows\crash_generation\client_info.cc
+FILE 17 c:\program files (x86)\windows kits\10\include\10.0.16299.0\um\winbase.h
+FILE 18 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\vcruntime_exception.h
+FILE 19 c:\program files (x86)\windows kits\10\include\10.0.16299.0\um\propidl.h
+FILE 20 c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_wio.h
+FILE 21 c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\wchar.h
+FILE 22 c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_wconio.h
+FILE 23 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\limits
+FILE 24 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\xutility
+FILE 25 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\utility
+FILE 26 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\iosfwd
+FILE 27 c:\program files (x86)\windows kits\10\include\10.0.16299.0\um\oleauto.h
+FILE 28 c:\program files (x86)\windows kits\10\include\10.0.16299.0\shared\guiddef.h
+FILE 29 c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_wstring.h
+FILE 30 c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\stdio.h
+FILE 31 c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_wstdio.h
+FILE 32 c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_stdio_config.h
+FILE 33 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\xatomic0.h
+FILE 34 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\vcruntime_typeinfo.h
+FILE 35 c:\projects\breakpad-tools\deps\breakpad\src\client\windows\common\ipc_protocol.h
+FILE 36 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\string
+FILE 37 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\istream
+FILE 38 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\ostream
+FILE 39 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\ios
+FILE 40 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\xlocnum
+FILE 41 c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\string.h
+FILE 42 c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\sys\stat.h
+FILE 43 c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_memory.h
+FILE 44 c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_memcpy_s.h
+FILE 45 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\vcruntime_new.h
+FILE 46 c:\program files (x86)\windows kits\10\include\10.0.16299.0\um\dbghelp.h
+FILE 47 c:\program files (x86)\windows kits\10\include\10.0.16299.0\um\memoryapi.h
+FILE 48 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\xtgmath.h
+FILE 49 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\xfacet
+FILE 50 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\streambuf
+FILE 51 c:\program files (x86)\windows kits\10\include\10.0.16299.0\um\winnt.h
+FILE 52 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\xiosbase
+FILE 53 c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\ctype.h
+FILE 54 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\xlocale
+FILE 55 c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\malloc.h
+FILE 56 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\xlocinfo
+FILE 57 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\stdexcept
+FILE 58 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\exception
+FILE 59 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\type_traits
+FILE 60 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\xstddef
+FILE 61 c:\program files (x86)\windows kits\10\include\10.0.16299.0\shared\winerror.h
+FILE 62 c:\program files (x86)\windows kits\10\include\10.0.16299.0\um\winuser.h
+FILE 63 c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_wtime.h
+FILE 78 c:\projects\breakpad-tools\deps\breakpad\src\client\windows\crash_generation\crash_generation_client.h
+FILE 80 c:\projects\breakpad-tools\deps\breakpad\src\client\windows\crash_generation\crash_generation_client.cc
+FILE 127 c:\projects\breakpad-tools\deps\breakpad\src\client\windows\common\auto_critical_section.h
+FILE 137 c:\projects\breakpad-tools\deps\breakpad\src\client\windows\crash_generation\crash_generation_server.h
+FILE 138 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\list
+FILE 143 c:\projects\breakpad-tools\deps\breakpad\src\client\windows\crash_generation\crash_generation_server.cc
+FILE 146 c:\projects\breakpad-tools\deps\breakpad\src\client\windows\crash_generation\minidump_generator.h
+FILE 211 c:\projects\breakpad-tools\deps\breakpad\src\client\windows\crash_generation\minidump_generator.cc
+FILE 218 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\vector
+FILE 219 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\iterator
+FILE 232 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\xmemory
+FILE 237 c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\algorithm
+FILE 288 c:\projects\breakpad-tools\deps\breakpad\src\client\windows\handler\exception_handler.cc
+FILE 308 c:\projects\breakpad-tools\deps\breakpad\src\client\windows\handler\exception_handler.h
+FILE 346 c:\projects\breakpad-tools\deps\breakpad\src\common\windows\guid_string.cc
+FILE 391 c:\projects\breakpad-tools\deps\breakpad\src\common\windows\string_utils.cc
+FILE 443 c:\projects\breakpad-tools\windows\crash\main.cpp
+FILE 493 C:\Users\appveyor\AppData\Local\Temp\1\lnk{DF0D61F8-A737-40D4-A117-7BE058EF8579}.tmp
+FILE 494 f:\dd\externalapis\windows\10\sdk\inc\evntprov.h
+FILE 495 f:\dd\externalapis\unifiedcrt\inc\corecrt_wstring.h
+FILE 496 f:\dd\vctools\crt\vcruntime\inc\vcruntime_internal.h
+FILE 497 f:\dd\vctools\crt\vcstartup\src\misc\i386\cpu_disp.c
+FILE 498 f:\dd\externalapis\windows\10\sdk\inc\stralign.h
+FILE 499 f:\dd\externalapis\windows\10\sdk\inc\processthreadsapi.h
+FILE 500 f:\dd\externalapis\windows\10\sdk\inc\winnt.h
+FILE 501 f:\dd\externalapis\unifiedcrt\inc\ctype.h
+FILE 502 f:\dd\externalapis\unifiedcrt\inc\string.h
+FILE 503 f:\dd\externalapis\unifiedcrt\inc\corecrt_memcpy_s.h
+FILE 504 f:\dd\vctools\crt\vcruntime\inc\internal_shared.h
+FILE 505 f:\dd\vctools\crt\vcruntime\inc\i386\xmmintrin.h
+FILE 506 f:\dd\externalapis\windows\10\sdk\inc\winbase.h
+FILE 507 f:\dd\externalapis\windows\10\sdk\inc\winerror.h
+FILE 508 f:\dd\externalapis\windows\10\sdk\inc\basetsd.h
+FILE 509 f:\dd\externalapis\unifiedcrt\inc\malloc.h
+FILE 512 f:\dd\vctools\crt\vcstartup\src\rtc\initsect.cpp
+FILE 520 f:\dd\externalapis\unifiedcrt\inc\stdlib.h
+FILE 524 f:\dd\externalapis\windows\10\sdk\inc\guiddef.h
+FILE 525 f:\dd\vctools\crt\vcruntime\inc\vcruntime_new.h
+FILE 526 f:\dd\externalapis\windows\10\sdk\inc\winuser.h
+FILE 528 f:\dd\externalapis\unifiedcrt\inc\corecrt_memory.h
+FILE 531 f:\dd\vctools\crt\vcstartup\src\eh\i386\sehprolg4.asm
+FILE 535 f:\dd\vctools\crt\vcstartup\src\eh\i386\chandler4gs.c
+FILE 551 f:\dd\vctools\crt\vcstartup\src\eh\i386\secchk.c
+FILE 577 f:\dd\vctools\crt\vcstartup\src\gs\gs_report.c
+FILE 590 f:\dd\vctools\crt\vcstartup\src\gs\gs_support.c
+FILE 604 f:\dd\vctools\crt\vcstartup\src\misc\checkcfg.c
+FILE 617 f:\dd\vctools\crt\vcstartup\src\misc\guard_support.c
+FILE 638 f:\dd\vctools\crt\vcstartup\src\utility\dyn_tls_dtor.c
+FILE 649 f:\dd\externalapis\unifiedcrt\inc\math.h
+FILE 650 f:\dd\vctools\crt\vcstartup\src\utility\dyn_tls_init.c
+FILE 661 f:\dd\vctools\crt\vcstartup\src\utility\matherr_detection.c
+FILE 662 f:\dd\vctools\crt\vcstartup\src\utility\ucrt_detection.c
+FILE 663 f:\dd\vctools\crt\vcstartup\src\defaults\argv_mode.cpp
+FILE 664 f:\dd\vctools\crt\vcstartup\src\defaults\commit_mode.cpp
+FILE 671 f:\dd\vctools\crt\vcstartup\src\defaults\default_local_stdio_options.cpp
+FILE 677 f:\dd\vctools\crt\vcstartup\inc\vcstartup_internal.h
+FILE 684 f:\dd\externalapis\unifiedcrt\inc\stdio.h
+FILE 685 f:\dd\externalapis\unifiedcrt\inc\corecrt_wstdio.h
+FILE 686 f:\dd\externalapis\unifiedcrt\inc\corecrt_stdio_config.h
+FILE 689 f:\dd\vctools\crt\vcruntime\inc\vadefs.h
+FILE 690 f:\dd\vctools\crt\vcstartup\src\defaults\denormal_control.cpp
+FILE 691 f:\dd\vctools\crt\vcstartup\src\defaults\env_mode.cpp
+FILE 692 f:\dd\vctools\crt\vcstartup\src\defaults\file_mode.cpp
+FILE 693 f:\dd\vctools\crt\vcstartup\src\defaults\invalid_parameter_handler.cpp
+FILE 694 f:\dd\vctools\crt\vcstartup\src\defaults\matherr.cpp
+FILE 696 f:\dd\vctools\crt\vcstartup\src\defaults\new_mode.cpp
+FILE 697 f:\dd\vctools\crt\vcstartup\src\defaults\thread_locale.cpp
+FILE 698 f:\dd\vctools\crt\vcstartup\src\eh\std_type_info_static.cpp
+FILE 699 f:\dd\vctools\crt\vcruntime\inc\vcruntime_typeinfo.h
+FILE 700 f:\dd\vctools\crt\vcruntime\inc\vcruntime_exception.h
+FILE 703 f:\dd\vctools\crt\vcstartup\src\eh\tncleanup.cpp
+FILE 726 f:\dd\vctools\crt\vcstartup\src\heap\delete_array.cpp
+FILE 747 f:\dd\vctools\crt\vcstartup\src\heap\delete_array_size.cpp
+FILE 766 f:\dd\vctools\crt\vcstartup\src\heap\delete_scalar.cpp
+FILE 771 f:\dd\vctools\crt\vcstartup\src\heap\delete_scalar_size.cpp
+FILE 792 f:\dd\vctools\crt\vcstartup\src\heap\new_array.cpp
+FILE 816 f:\dd\vctools\crt\vcstartup\src\heap\new_scalar.cpp
+FILE 838 f:\dd\vctools\crt\vcstartup\src\heap\throw_bad_alloc.cpp
+FILE 861 f:\dd\vctools\crt\vcstartup\src\startup\exe_main.cpp
+FILE 867 f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl
+FILE 910 f:\dd\vctools\crt\vcstartup\src\utility\utility.cpp
+FILE 925 f:\dd\vctools\crt\vcstartup\src\utility\ucrt_stubs.cpp
+FILE 932 f:\dd\vctools\crt\vcstartup\src\utility\utility_desktop.cpp
+FILE 954 f:\dd\vctools\crt\vcstartup\src\defaults\default_precision.cpp
+FUNC 1000 114 0 google_breakpad::CrashGenerationClient::RequestDump(_EXCEPTION_POINTERS *,MDRawAssertionInfo *)
+1000 11 323 80
+1011 6 324 80
+1017 3 325 80
+101a 11 338 80
+102b 8 328 80
+1033 6 329 80
+1039 e 331 80
+1047 b 332 80
+1052 2 333 80
+1054 10 334 80
+1064 99 337 80
+10fd 4 338 80
+1101 6 337 80
+1107 d 338 80
+FUNC 1120 54 0 std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >()
+1120 3 2424 8
+1123 49 2425 8
+116c 1 2426 8
+116d 7 2425 8
+FUNC 1180 150 0 std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign(wchar_t const * const,unsigned int)
+1180 15 2612 8
+1195 b 2614 8
+11a0 9 2616 8
+11a9 7 2618 8
+11b0 3 2617 8
+11b3 c 2618 8
+11bf 6 2619 8
+11c5 3 2623 8
+11c8 9 2627 8
+11d1 f0 2623 8
+12c1 9 2627 8
+12ca 6 2623 8
+FUNC 12d0 c 0 std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen()
+12d0 0 3918 8
+12d0 c 3919 8
+FUNC 12e0 7f 0 std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &&)
+12e0 8 2267 8
+12e8 4 2268 8
+12ec 48 2270 8
+1334 1e 2274 8
+1352 2 2277 8
+1354 4 2278 8
+1358 7 2270 8
+FUNC 1360 6 0 __local_stdio_printf_options
+1360 0 85 32
+1360 5 87 32
+1365 1 88 32
+FUNC 1370 35 c swprintf_s
+1370 9 1538 31
+1379 28 1542 31
+13a1 4 1545 31
+FUNC 13b0 34 0 _snwprintf_s
+13b0 4 1723 31
+13b4 2f 1727 31
+13e3 1 1730 31
+FUNC 13f0 24 0 fprintf
+13f0 4 833 30
+13f4 1f 837 30
+1413 1 840 30
+FUNC 1420 34a 0 google_breakpad::ExceptionHandler::Initialize(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &,bool (*)(void *,_EXCEPTION_POINTERS *,MDRawAssertionInfo *),bool (*)(wchar_t const *,wchar_t const *,void *,_EXCEPTION_POINTERS *,MDRawAssertionInfo *,bool),void *,int,_MINIDUMP_TYPE,wchar_t const *,void *,google_breakpad::CrashGenerationClient *,google_breakpad::CustomClientInfo const *)
+1420 30 148 288
+1450 e 149 288
+145e 6 150 288
+1464 7 151 288
+146b 7 152 288
+1472 7 153 288
+1479 7 154 288
+1480 7 155 288
+1487 7 156 288
+148e 7 157 288
+1495 7 158 288
+149c 7 159 288
+14a3 7 160 288
+14aa 7 161 288
+14b1 7 162 288
+14b8 a 164 288
+14c2 a 166 288
+14cc d 167 288
+14d9 7 168 288
+14e0 a 169 288
+14ea a 170 288
+14f4 a 171 288
+14fe a 172 288
+1508 a 173 288
+1512 9 174 288
+151b 7 176 288
+1522 e 180 288
+1530 a 199 288
+153a d 209 288
+1547 e 210 288
+1555 24 211 288
+1579 14 213 288
+158d 18 214 288
+15a5 12 217 288
+15b7 1f 220 288
+15d6 18 226 288
+15ee b 229 288
+15f9 d 230 288
+1606 b 231 288
+1611 e 238 288
+161f 4 239 288
+1623 b 240 288
+162e 2e 246 288
+165c d 253 288
+1669 c 252 288
+1675 2a 253 288
+169f 4 266 288
+16a3 b 253 288
+16ae 2 266 288
+16b0 b 267 288
+16bb b 271 288
+16c6 9 275 288
+16cf 31 276 288
+1700 e 278 288
+170e b 281 288
+1719 e 285 288
+1727 1a 289 288
+1741 b 291 288
+174c 1e 293 288
+FUNC 1770 310 0 google_breakpad::ExceptionHandler::~ExceptionHandler()
+1770 d 295 288
+177d 10 296 288
+178d 3 297 288
+1790 7 300 288
+1797 3 301 288
+179a a 304 288
+17a4 b 305 288
+17af 7 307 288
+17b6 c 308 288
+17c2 4 311 288
+17c6 12 312 288
+17d8 4 315 288
+17dc f 316 288
+17eb 10 318 288
+17fb 3 319 288
+17fe 2 320 288
+1800 16 323 288
+1816 6 324 288
+181c 3 323 288
+181f 2 324 288
+1821 5 325 288
+1826 a 323 288
+1830 4 326 288
+1834 15 327 288
+1849 8 328 288
+1851 6 329 288
+1857 6 325 288
+185d 7 334 288
+1864 53 337 288
+18b7 a 338 288
+18c1 b 341 288
+18cc c 346 288
+18d8 e 359 288
+18e6 e 362 288
+18f4 13 364 288
+1907 8 365 288
+190f 8 366 288
+1917 d 375 288
+1924 7 376 288
+192b 14e 378 288
+1a79 7 337 288
+FUNC 1a80 109 0 google_breakpad::ExceptionHandler::ExceptionHandlerThreadMain(void *)
+1a80 3 385 288
+1a83 23 387 288
+1aa6 1d 388 288
+1ac3 1d 389 288
+1ae0 12 392 288
+1af2 c 395 288
+1afe 67 399 288
+1b65 16 406 288
+1b7b 5 408 288
+1b80 6 412 288
+1b86 3 413 288
+FUNC 1b90 70 0 google_breakpad::AutoExceptionHandler::AutoExceptionHandler()
+1b90 2 422 288
+1b92 d 439 288
+1b9f 2e 440 288
+1bcd 9 446 288
+1bd6 e 448 288
+1be4 11 450 288
+1bf5 5 451 288
+1bfa 6 440 288
+FUNC 1c00 36 0 google_breakpad::AutoExceptionHandler::~AutoExceptionHandler()
+1c00 0 453 288
+1c00 b 455 288
+1c0b b 457 288
+1c16 b 459 288
+1c21 9 461 288
+1c2a b 462 288
+1c35 1 463 288
+FUNC 1c40 11d 0 google_breakpad::ExceptionHandler::HandleException(_EXCEPTION_POINTERS *)
+1c40 2d 472 288
+1c6d 16 473 288
+1c83 4 481 288
+1c87 22 485 288
+1ca9 18 488 288
+1cc1 d 495 288
+1cce 4 503 288
+1cd2 13 504 288
+1ce5 2 508 288
+1ce7 7 509 288
+1cee 4 520 288
+1cf2 5 521 288
+1cf7 2 522 288
+1cf9 7 531 288
+1d00 5 532 288
+1d05 2 533 288
+1d07 2 534 288
+1d09 37 538 288
+1d40 1d 539 288
+FUNC 1d60 18b 0 google_breakpad::ExceptionHandler::HandleInvalidParameter(wchar_t const *,wchar_t const *,wchar_t const *,unsigned int,unsigned int)
+1d60 31 547 288
+1d91 1b 550 288
+1dac 12 554 288
+1dbe 3 551 288
+1dc1 8 554 288
+1dc9 19 555 288
+1de2 19 558 288
+1dfb 1e 561 288
+1e19 9 564 288
+1e22 14 571 288
+1e36 16 572 288
+1e4c 15 573 288
+1e61 7 575 288
+1e68 10 583 288
+1e78 9 585 288
+1e81 6 587 288
+1e87 14 593 288
+1e9b 4 592 288
+1e9f 11 593 288
+1eb0 2 597 288
+1eb2 7 598 288
+1eb9 4 602 288
+1ebd a 603 288
+1ec7 13 606 288
+1eda 2 611 288
+1edc 6 624 288
+1ee2 9 632 288
+FUNC 1ef0 129 0 google_breakpad::ExceptionHandler::HandlePureVirtualCall()
+1ef0 2c 637 288
+1f1c f 640 288
+1f2b 12 644 288
+1f3d 3 641 288
+1f40 8 644 288
+1f48 14 651 288
+1f5c 16 652 288
+1f72 15 653 288
+1f87 7 655 288
+1f8e 10 663 288
+1f9e 9 665 288
+1fa7 6 667 288
+1fad 14 674 288
+1fc1 4 673 288
+1fc5 11 674 288
+1fd6 2 678 288
+1fd8 7 679 288
+1fdf 4 683 288
+1fe3 a 684 288
+1fed 2 687 288
+1fef 8 698 288
+1ff7 8 691 288
+1fff 1a 699 288
+FUNC 2020 da 0 google_breakpad::ExceptionHandler::WriteMinidumpOnHandlerThread(_EXCEPTION_POINTERS *,MDRawAssertionInfo *)
+2020 4 702 288
+2024 d 703 288
+2031 9 707 288
+203a 8 708 288
+2042 2 709 288
+2044 4 736 288
+2048 24 713 288
+206c 1d 714 288
+2089 6 717 288
+208f 2a 722 288
+20b9 e 725 288
+20c7 6 726 288
+20cd 25 733 288
+20f2 4 735 288
+20f6 4 736 288
+FUNC 2100 71 0 google_breakpad::ExceptionHandler::WriteMinidumpWithException(unsigned long,_EXCEPTION_POINTERS *,MDRawAssertionInfo *)
+2100 1 839 288
+2101 20 846 288
+2121 6 871 288
+2127 7 851 288
+212e 7 852 288
+2135 2 853 288
+2137 15 854 288
+214c b 861 288
+2157 14 866 288
+216b 6 871 288
+FUNC 2180 84 0 google_breakpad::ExceptionHandler::MinidumpWriteDumpCallback(void *,_MINIDUMP_CALLBACK_INPUT * const,_MINIDUMP_CALLBACK_OUTPUT *)
+2180 0 877 288
+2180 1c 878 288
+219c 7 882 288
+21a3 3 883 288
+21a6 3 910 288
+21a9 b 886 288
+21b4 9 887 288
+21bd 6 888 288
+21c3 5 889 288
+21c8 3 910 288
+21cb 6 904 288
+21d1 7 905 288
+21d8 5 906 288
+21dd 3 910 288
+21e0 2 909 288
+21e2 22 910 288
+FUNC 2210 22c 14 google_breakpad::ExceptionHandler::WriteMinidumpWithExceptionForProcess(unsigned long,_EXCEPTION_POINTERS *,MDRawAssertionInfo *,void *,bool)
+2210 28 917 288
+2238 b 918 288
+2243 a 919 288
+224d 21 920 288
+226e 9 927 288
+2277 7 929 288
+227e 1c 938 288
+229a 8 949 288
+22a2 6 951 288
+22a8 4 955 288
+22ac c 957 288
+22b8 1b 961 288
+22d3 b 963 288
+22de 8 964 288
+22e6 7 965 288
+22ed 4 966 288
+22f1 8 972 288
+22f9 3 977 288
+22fc 26 988 288
+2322 26 995 288
+2348 2e 998 288
+2376 6 1003 288
+237c 2 1001 288
+237e 2 1003 288
+2380 a 1004 288
+238a 3 1005 288
+238d 4 988 288
+2391 6 1010 288
+2397 10 1009 288
+23a7 6 1010 288
+23ad 4 1011 288
+23b1 8 1014 288
+23b9 6 1015 288
+23bf 10 1020 288
+23cf 2f 1023 288
+23fe a 1031 288
+2408 2 1035 288
+240a 17 1036 288
+2421 4 1035 288
+2425 17 1036 288
+FUNC 2440 11e 0 google_breakpad::ExceptionHandler::UpdateNextID()
+2440 1e 1038 288
+245e 22 1039 288
+2480 8 1040 288
+2488 4 1041 288
+248c 7 1042 288
+2493 56 1044 288
+24e9 8 1045 288
+24f1 1e 1048 288
+250f 4 1054 288
+2513 2 1052 288
+2515 3 1054 288
+2518 8 1052 288
+2520 1f 1054 288
+253f 8 1055 288
+2547 17 1056 288
+FUNC 2560 121 0 std::vector<google_breakpad::ExceptionHandler *,std::allocator<google_breakpad::ExceptionHandler *> >::emplace_back<google_breakpad::ExceptionHandler *>(google_breakpad::ExceptionHandler * &&)
+2560 5 947 218
+2565 a 948 218
+256f d 950 218
+257c 5 987 218
+2581 7 954 218
+2588 c 956 218
+2594 11 962 218
+25a5 3 961 218
+25a8 10 962 218
+25b8 5c 964 218
+2614 9 968 218
+261d 10 970 218
+262d 2 981 218
+262f 3 970 218
+2632 44 981 218
+2676 5 987 218
+267b 6 958 218
+FUNC 2690 d 0 google_breakpad::scoped_ptr<google_breakpad::CrashGenerationClient>::~scoped_ptr<google_breakpad::CrashGenerationClient>()
+2690 0 96 3
+2690 c 98 3
+269c 1 99 3
+FUNC 26a0 43 0 std::list<google_breakpad::AppMemory,std::allocator<google_breakpad::AppMemory> >::~list<google_breakpad::AppMemory,std::allocator<google_breakpad::AppMemory> >()
+26a0 3 1034 138
+26a3 33 1035 138
+26d6 d 1036 138
+FUNC 26f0 8c 0 google_breakpad::CrashGenerationClient::`scalar deleting destructor'(unsigned int)
+FUNC 2780 c 0 std::vector<google_breakpad::ExceptionHandler *,std::allocator<google_breakpad::ExceptionHandler *> >::_Xrange()
+2780 0 2031 218
+2780 c 2032 218
+FUNC 2790 c 0 std::vector<google_breakpad::ExceptionHandler *,std::allocator<google_breakpad::ExceptionHandler *> >::_Xlength()
+2790 0 2026 218
+2790 c 2027 218
+FUNC 27a0 2a 0 std::_List_alloc<std::_List_base_types<google_breakpad::AppMemory,std::allocator<google_breakpad::AppMemory> > >::_Buynode0(std::_List_node<google_breakpad::AppMemory,void *> *,std::_List_node<google_breakpad::AppMemory,void *> *)
+27a0 0 659 138
+27a0 7 660 138
+27a7 4 662 138
+27ab 3 660 138
+27ae 4 662 138
+27b2 2 664 138
+27b4 2 665 138
+27b6 2 670 138
+27b8 3 671 138
+27bb 3 678 138
+27be 4 662 138
+27c2 2 670 138
+27c4 3 671 138
+27c7 3 678 138
+FUNC 27d0 1b 0 std::_List_buy<google_breakpad::AppMemory,std::allocator<google_breakpad::AppMemory> >::_Buynode<google_breakpad::AppMemory const &>(std::_List_node<google_breakpad::AppMemory,void *> *,std::_List_node<google_breakpad::AppMemory,void *> *,google_breakpad::AppMemory const &)
+27d0 0 761 138
+27d0 d 762 138
+27dd b 766 138
+27e8 3 775 138
+FUNC 27f0 ae 0 google_breakpad::GUIDString::GUIDToWString(_GUID *)
+27f0 e 43 346
+27fe 4f 45 346
+284d 7 56 346
+2854 2 54 346
+2856 a 56 346
+2860 5 54 346
+2865 27 56 346
+288c 12 57 346
+FUNC 28a0 2e 0 printf
+28a0 1 952 30
+28a1 2b 956 30
+28cc 1 958 30
+28cd 1 959 30
+FUNC 28d0 33 0 `anonymous namespace'::callback
+28d0 1 11 443
+28d1 8 12 443
+28d9 15 13 443
+28ee 3 19 443
+28f1 1 20 443
+28f2 d 16 443
+28ff 3 19 443
+2902 1 20 443
+FUNC 2910 15e 8 main
+2910 49 33 443
+2959 da 34 443
+2a33 3 36 443
+2a36 7 34 443
+2a3d a 35 443
+2a47 7 36 443
+2a4e 20 37 443
+FUNC 2a6e 11 0 __security_check_cookie
+FUNC 2a7f 30 0 operator new(unsigned int)
+2a7f 3 31 816
+2a82 2 34 816
+2a84 d 39 816
+2a91 d 34 816
+2a9e 2 53 816
+2aa0 a 41 816
+2aaa 5 47 816
+FUNC 2aaf e 0 operator delete(void *,unsigned int)
+2aaf 3 29 771
+2ab2 9 30 771
+2abb 2 31 771
+FUNC 2abd 28 0 __raise_securityfailure
+2abd 3 140 577
+2ac0 8 146 577
+2ac8 9 147 577
+2ad1 12 160 577
+2ae3 2 161 577
+FUNC 2ae5 fb 0 __report_gsfailure
+2ae5 9 217 577
+2aee b 218 577
+2af9 5 220 577
+2afe 5 245 577
+2b03 6 246 577
+2b09 6 247 577
+2b0f 6 248 577
+2b15 6 249 577
+2b1b 6 250 577
+2b21 7 251 577
+2b28 7 252 577
+2b2f 7 253 577
+2b36 7 254 577
+2b3d 7 255 577
+2b44 7 256 577
+2b4b 1 257 577
+2b4c 6 258 577
+2b52 3 262 577
+2b55 5 263 577
+2b5a 3 264 577
+2b5d 5 265 577
+2b62 3 266 577
+2b65 5 267 577
+2b6a 6 270 577
+2b70 a 273 577
+2b7a a 274 577
+2b84 a 286 577
+2b8e a 287 577
+2b98 a 288 577
+2ba2 10 289 577
+2bb2 10 293 577
+2bc2 10 294 577
+2bd2 a 298 577
+2bdc 4 299 577
+FUNC 2be0 a4 0 pre_c_initialization
+2be0 1 147 867
+2be1 7 148 867
+2be8 b 150 867
+2bf3 c 151 867
+2bff 2 153 867
+2c01 2 151 867
+2c03 d 153 867
+2c10 2 159 867
+2c12 5 163 867
+2c17 a 164 867
+2c21 11 167 867
+2c32 5 170 867
+2c37 9 176 867
+2c40 b 178 867
+2c4b 5 182 867
+2c50 5 183 867
+2c55 5 186 867
+2c5a c 189 867
+2c66 9 191 867
+2c6f 5 192 867
+2c74 5 194 867
+2c79 2 196 867
+2c7b 1 197 867
+2c7c 8 154 867
+FUNC 2c84 8 0 post_pgo_initialization
+2c84 0 200 867
+2c84 5 205 867
+2c89 2 207 867
+2c8b 1 208 867
+FUNC 2c8c 12 0 pre_cpp_initialization
+2c8c 0 211 867
+2c8c 5 215 867
+2c91 c 217 867
+2c9d 1 218 867
+FUNC 2c9e 177 0 __scrt_common_main_seh
+2c9e c 231 867
+2caa 10 232 867
+2cba 5 235 867
+2cbf 4 236 867
+2cc3 8 238 867
+2ccb 10 240 867
+2cdb 4 244 867
+2cdf 6 246 867
+2ce5 15 248 867
+2cfa 11 249 867
+2d0b 11 251 867
+2d1c a 253 867
+2d26 2 255 867
+2d28 5 257 867
+2d2d 9 260 867
+2d36 7 265 867
+2d3d 11 266 867
+2d4e 8 268 867
+2d56 5 15732480 867
+2d5b 2 268 867
+2d5d 7 273 867
+2d64 f 274 867
+2d73 8 276 867
+2d7b 21 283 867
+2d9c 9 289 867
+2da5 4 292 867
+2da9 5 293 867
+2dae b 296 867
+2db9 b 297 867
+2dc4 17 299 867
+2ddb 9 304 867
+2de4 6 307 867
+2dea 5 308 867
+2def a 310 867
+2df9 6 312 867
+2dff 7 233 867
+2e06 6 290 867
+2e0c 9 305 867
+FUNC 2e15 a 0 mainCRTStartup
+2e15 0 15 861
+2e15 a 16 861
+FUNC 2e1f 5 0 operator delete(void *)
+2e1f 0 30 766
+2e1f 5 34 766
+FUNC 2e24 1b 0 std::bad_alloc::bad_alloc(std::bad_alloc const &)
+FUNC 2e3f 18 0 std::bad_alloc::bad_alloc()
+2e3f 0 115 700
+2e3f 4 114 700
+2e43 2 116 700
+2e45 b 114 700
+2e50 6 115 700
+2e56 1 116 700
+FUNC 2e57 1b 0 std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length const &)
+FUNC 2e72 18 0 std::bad_array_new_length::bad_array_new_length()
+2e72 0 135 700
+2e72 4 134 700
+2e76 2 136 700
+2e78 b 134 700
+2e83 6 135 700
+2e89 1 136 700
+FUNC 2e8a 2c 0 std::exception::exception(std::exception const &)
+2e8a 16 66 700
+2ea0 f 67 700
+2eaf 7 68 700
+FUNC m 2eb6 11 0 std::bad_alloc::~bad_alloc()
+FUNC m 2ec7 2d 0 std::bad_alloc::`scalar deleting destructor'(unsigned int)
+FUNC 2ef4 1d 0 __scrt_throw_std_bad_alloc()
+2ef4 6 32 838
+2efa 17 33 838
+FUNC 2f11 1d 0 __scrt_throw_std_bad_array_new_length()
+2f11 6 37 838
+2f17 17 38 838
+FUNC 2f2e d 0 std::exception::what()
+2f2e 0 88 700
+2f2e c 89 700
+2f3a 1 90 700
+FUNC 2f3b 44 0 find_pe_section
+2f3b 3 61 910
+2f3e 9 63 910
+2f47 9 69 910
+2f50 9 70 910
+2f59 7 71 910
+2f60 f 73 910
+2f6f 7 71 910
+2f76 3 79 910
+2f79 2 80 910
+2f7b 4 75 910
+FUNC 2f7f 35 0 __scrt_acquire_startup_lock
+2f7f 0 139 910
+2f7f 9 140 910
+2f88 2 143 910
+2f8a 1 157 910
+2f8b 7 146 910
+2f92 a 148 910
+2f9c 4 150 910
+2fa0 c 148 910
+2fac 3 156 910
+2faf 1 157 910
+2fb0 3 152 910
+2fb3 1 157 910
+FUNC 2fb4 39 0 __scrt_initialize_crt
+2fb4 3 185 910
+2fb7 6 186 910
+2fbd 7 188 910
+2fc4 5 191 910
+2fc9 9 194 910
+2fd2 2 196 910
+2fd4 2 206 910
+2fd6 9 199 910
+2fdf 8 201 910
+2fe7 2 202 910
+2fe9 2 205 910
+2feb 2 206 910
+FUNC 2fed aa 0 __scrt_initialize_onexit_tables
+2fed 6 296 910
+2ff3 9 297 910
+2ffc 8 299 910
+3004 c 302 910
+3010 d 307 910
+301d f 310 910
+302c f 315 910
+303b 4 317 910
+303f 5 325 910
+3044 4 327 910
+3048 3 325 910
+304b 5 327 910
+3050 10 325 910
+3060 c 327 910
+306c 15 328 910
+3081 7 331 910
+3088 3 332 910
+308b 4 333 910
+308f 8 304 910
+FUNC 3097 8a 0 __scrt_is_nonwritable_in_current_image
+3097 c 88 910
+30a3 4 92 910
+30a7 2d 99 910
+30d4 a 107 910
+30de 9 108 910
+30e7 4 109 910
+30eb 6 116 910
+30f1 b 121 910
+30fc 16 123 910
+3112 9 127 910
+311b 6 129 910
+FUNC 3121 1d 0 __scrt_release_startup_lock
+3121 3 160 910
+3124 9 161 910
+312d 6 167 910
+3133 9 172 910
+313c 2 173 910
+FUNC 313e 28 0 __scrt_uninitialize_crt
+313e 3 209 910
+3141 f 214 910
+3150 8 220 910
+3158 a 221 910
+3162 2 223 910
+3164 2 224 910
+FUNC 3166 3b 0 _onexit
+3166 3 256 910
+3169 10 257 910
+3179 3 261 910
+317c 2 257 910
+317e 5 259 910
+3183 7 261 910
+318a 15 267 910
+319f 2 271 910
+FUNC 31a1 15 0 atexit
+31a1 3 274 910
+31a4 10 275 910
+31b4 2 278 910
+FUNC 31b6 4f 0 __get_entropy
+31b6 6 90 590
+31bc 4 92 590
+31c0 e 95 590
+31ce 9 100 590
+31d7 9 103 590
+31e0 9 104 590
+31e9 a 113 590
+31f3 e 124 590
+3201 4 136 590
+FUNC 3205 4b 0 __security_init_cookie
+3205 0 158 590
+3205 1a 171 590
+321f 7 184 590
+3226 4 191 590
+322a 5 193 590
+322f 2 194 590
+3231 4 196 590
+3235 a 198 590
+323f 6 202 590
+3245 2 203 590
+3247 9 205 590
+FUNC m 3250 3 0 __scrt_initialize_winrt
+3250 0 21 694
+3250 2 22 694
+3252 1 23 694
+FUNC 3253 4 0 _get_startup_argv_mode
+3253 0 14 663
+3253 3 15 663
+3256 1 16 663
+FUNC 3257 6 0 _get_startup_file_mode
+3257 0 15 692
+3257 5 16 692
+325c 1 17 692
+FUNC 325d c 0 __scrt_initialize_type_info()
+325d 0 16 703
+325d b 17 703
+3268 1 18 703
+FUNC m 3269 3 0 __scrt_stub_for_acrt_initialize
+3269 0 14 691
+3269 2 15 691
+326b 1 16 691
+FUNC 326c 21 0 _initialize_default_precision
+326c 0 19 954
+326c 18 20 954
+3284 1 22 954
+3285 8 21 954
+FUNC m 328d 1 0 _guard_check_icall_nop
+328d 0 15 693
+328d 1 17 693
+FUNC 328e 6 0 __local_stdio_scanf_options
+328e 0 89 686
+328e 5 91 686
+3293 1 92 686
+FUNC 3294 1d 0 __scrt_initialize_default_local_stdio_options
+3294 0 16 671
+3294 e 17 671
+32a2 e 18 671
+32b0 1 19 671
+FUNC 32b1 c 0 __scrt_is_user_matherr_present
+32b1 0 22 661
+32b1 b 23 661
+32bc 1 24 661
+FUNC 32bd 6 0 __scrt_get_dyn_tls_init_callback
+32bd 0 19 650
+32bd 5 20 650
+32c2 1 21 650
+FUNC 32c3 6 0 __scrt_get_dyn_tls_dtor_callback
+32c3 0 20 638
+32c3 5 21 638
+32c8 1 22 638
+FUNC 32c9 11c 0 __scrt_fastfail
+32c9 a 131 932
+32d3 b 134 932
+32de 5 135 932
+32e3 7 142 932
+32ea 18 144 932
+3302 6 150 932
+3308 6 151 932
+330e 6 152 932
+3314 6 153 932
+331a 6 154 932
+3320 6 155 932
+3326 7 156 932
+332d 7 157 932
+3334 7 158 932
+333b 7 159 932
+3342 7 160 932
+3349 7 161 932
+3350 1 162 932
+3351 6 163 932
+3357 9 167 932
+3360 13 168 932
+3373 3 169 932
+3376 13 200 932
+3389 17 203 932
+33a0 6 205 932
+33a6 20 210 932
+33c6 a 211 932
+33d0 8 215 932
+33d8 8 216 932
+33e0 5 217 932
+FUNC 33e5 44 0 __scrt_is_managed_app
+33e5 0 32 932
+33e5 a 33 932
+33ef 4 34 932
+33f3 2 35 932
+33f5 1 62 932
+33f6 a 37 932
+3400 5 41 932
+3405 8 43 932
+340d b 46 932
+3418 6 53 932
+341e a 58 932
+3428 1 62 932
+FUNC 3429 c 0 __scrt_set_unhandled_exception_filter
+3429 0 82 932
+3429 b 83 932
+3434 1 84 932
+FUNC 3435 41 4 __scrt_unhandled_exception_filter
+3435 3 71 932
+3438 5 72 932
+343d 2d 73 932
+346a 2 78 932
+346c 4 79 932
+3470 6 75 932
+FUNC 3476 8 4 _crt_debugger_hook
+3476 0 110 932
+3476 7 115 932
+347d 1 116 932
+FUNC 347e 2b 0 _RTC_Initialize
+FUNC 34a9 2b 0 _RTC_Terminate
+FUNC 34d4 6 0 _guard_check_icall
+34d4 0 61 604
+34d4 6 63 604
+FUNC 34e0 46 0 _SEH_prolog4
+FUNC 3526 15 0 _SEH_epilog4
+FUNC 353b 23 0 _except_handler4
+FUNC 355e 23 0 type_info::`scalar deleting destructor'(unsigned int)
+FUNC 3581 199 0 __isa_available_init
+FUNC 371a c 0 __scrt_is_ucrt_dll_in_use
+371a 0 22 662
+371a b 23 662
+3725 1 24 662
+PUBLIC 3726 0 __CxxFrameHandler3
+PUBLIC 372c 0 __std_exception_copy
+PUBLIC 3732 0 __std_exception_destroy
+PUBLIC 3738 8 _CxxThrowException
+PUBLIC 373e 0 memset
+PUBLIC 3744 0 _except_handler4_common
+PUBLIC 374a 0 exit
+PUBLIC 3750 0 _callnewh
+PUBLIC 3756 0 malloc
+PUBLIC 375c 0 _seh_filter_exe
+PUBLIC 3762 0 _set_app_type
+PUBLIC 3768 0 __setusermatherr
+PUBLIC 376e 0 _configure_narrow_argv
+PUBLIC 3774 0 _initialize_narrow_environment
+PUBLIC 377a 0 _get_initial_narrow_environment
+PUBLIC 3780 0 _initterm
+PUBLIC 3786 0 _initterm_e
+PUBLIC 378c 0 _exit
+PUBLIC 3792 0 _set_fmode
+PUBLIC 3798 0 __p___argc
+PUBLIC 379e 0 __p___argv
+PUBLIC 37a4 0 _cexit
+PUBLIC 37aa 0 _c_exit
+PUBLIC 37b0 0 _register_thread_local_exe_atexit_callback
+PUBLIC 37b6 0 _configthreadlocale
+PUBLIC 37bc 0 _set_new_mode
+PUBLIC 37c2 0 __p__commode
+PUBLIC 37c8 0 free
+PUBLIC 37ce 0 _initialize_onexit_table
+PUBLIC 37d4 0 _register_onexit_function
+PUBLIC 37da 0 _crt_atexit
+PUBLIC 37e0 0 _controlfp_s
+PUBLIC 37e6 0 terminate
+PUBLIC 37ec 4 IsProcessorFeaturePresent
+PUBLIC 37f2 0 memcpy
+STACK WIN 4 1000 114 11 0 8 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 100f f5 2 0 8 4 c 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 16 - ^ =
+STACK WIN 4 1030 92 0 0 8 8 c 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 16 - ^ =  $23 $T0 20 - ^ =
+STACK WIN 4 1048 a 0 0 8 c c 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 16 - ^ =  $23 $T0 20 - ^ =  $24 $T0 24 - ^ =
+STACK WIN 4 1120 54 3 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 1121 4b 2 0 0 4 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $23 $T0 4 - ^ =
+STACK WIN 4 1180 150 11 0 8 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 1188 13c 9 0 8 4 8 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 12 - ^ =
+STACK WIN 4 1189 13a 8 0 8 8 8 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 12 - ^ =  $22 $T0 16 - ^ =
+STACK WIN 4 118e 134 3 0 8 c 8 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 12 - ^ =  $22 $T0 16 - ^ =  $23 $T0 20 - ^ =
+STACK WIN 4 118f 132 2 0 8 10 8 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 12 - ^ =  $22 $T0 16 - ^ =  $23 $T0 20 - ^ =  $24 $T0 24 - ^ =
+STACK WIN 4 12ca 6 0 0 8 10 8 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 12 - ^ =  $22 $T0 16 - ^ =  $23 $T0 20 - ^ =  $24 $T0 24 - ^ =
+STACK WIN 4 12d0 c 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 12e0 7f 8 0 4 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 12e1 74 7 0 4 4 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $23 $T0 4 - ^ =
+STACK WIN 4 12e2 70 6 0 4 8 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $23 $T0 4 - ^ =  $24 $T0 8 - ^ =
+STACK WIN 4 1360 6 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 1370 35 6 0 c 0 0 0 1 $T1 .raSearch = $T0  $T1 4 - 8 @ = $ebp $T1 4 - ^ = $eip $T1 ^ = $esp $T1 4 + =
+STACK WIN 4 13b0 34 0 0 10 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 13f0 24 0 0 8 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 1420 34a 2d 0 28 10 30 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $20 $T0 52 - ^ =  $23 $T0 56 - ^ =  $24 $T0 60 - ^ =
+STACK WIN 4 1770 310 16 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 177c 2f4 a 0 0 4 4 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 8 - ^ =
+STACK WIN 4 177d 2f2 9 0 0 8 4 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 8 - ^ =  $23 $T0 12 - ^ =
+STACK WIN 4 1784 2ea 2 0 0 c 4 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 8 - ^ =  $23 $T0 12 - ^ =  $24 $T0 16 - ^ =
+STACK WIN 4 1827 36 0 0 0 10 4 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 8 - ^ =  $23 $T0 12 - ^ =  $24 $T0 16 - ^ =  $22 $T0 32 - ^ =
+STACK WIN 4 1a80 109 8 0 4 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 1a81 105 7 0 4 4 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 4 - ^ =
+STACK WIN 4 1a82 101 6 0 4 8 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 4 - ^ =  $22 $T0 8 - ^ =
+STACK WIN 4 1a83 ff 5 0 4 c 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 4 - ^ =  $22 $T0 8 - ^ =  $23 $T0 12 - ^ =
+STACK WIN 4 1a88 f9 0 0 4 10 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 4 - ^ =  $22 $T0 8 - ^ =  $23 $T0 12 - ^ =  $24 $T0 16 - ^ =
+STACK WIN 4 1b90 70 9 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 1b91 68 8 0 0 4 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $23 $T0 4 - ^ =
+STACK WIN 4 1b92 66 7 0 0 8 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $23 $T0 4 - ^ =  $24 $T0 8 - ^ =
+STACK WIN 4 1c00 36 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 1c40 11d 2a 0 4 c 14 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $23 $T0 24 - ^ =  $24 $T0 28 - ^ =
+STACK WIN 4 1d60 18b 2e 0 14 10 644 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $20 $T0 1608 - ^ =  $23 $T0 1612 - ^ =  $24 $T0 1616 - ^ =
+STACK WIN 4 1ef0 129 2c 0 0 8 640 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $23 $T0 1604 - ^ =
+STACK WIN 4 2020 da 3 0 8 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 2021 d6 2 0 8 4 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $23 $T0 4 - ^ =
+STACK WIN 4 2024 d2 0 0 8 8 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $23 $T0 4 - ^ =  $24 $T0 8 - ^ =
+STACK WIN 4 2050 a5 0 0 8 c 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $23 $T0 4 - ^ =  $24 $T0 8 - ^ =  $20 $T0 12 - ^ =
+STACK WIN 4 2100 71 8 0 c 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 2101 6d 7 0 c 4 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 4 - ^ =
+STACK WIN 4 2106 67 2 0 c 8 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 4 - ^ =  $23 $T0 8 - ^ =
+STACK WIN 4 2109 63 0 0 c c 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 4 - ^ =  $23 $T0 8 - ^ =  $24 $T0 12 - ^ =
+STACK WIN 4 2180 84 0 0 c 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 219c 1b 0 0 c 4 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $23 $T0 4 - ^ =
+STACK WIN 4 2210 22c 24 0 14 c 84 0 1 $T1 .raSearch = $T0  $T1 4 - 8 @ = $ebp $T1 4 - ^ = $eip $T1 ^ = $esp $T1 4 + = $20 $T0 136 - ^ =  $23 $T0 140 - ^ =  $24 $T0 144 - ^ =
+STACK WIN 4 2440 11e 1e 0 0 8 238 0 1 $T1 .raSearch = $T0  $T1 4 - 16 @ = $ebp $T1 4 - ^ = $eip $T1 ^ = $esp $T1 4 + = $23 $T0 572 - ^ =  $24 $T0 576 - ^ =
+STACK WIN 4 2560 121 5 0 4 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 2562 115 3 0 4 4 4 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 8 - ^ =
+STACK WIN 4 2563 113 2 0 4 8 4 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 8 - ^ =  $23 $T0 12 - ^ =
+STACK WIN 4 25a5 cd 0 0 4 c 4 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 8 - ^ =  $23 $T0 12 - ^ =  $22 $T0 16 - ^ =
+STACK WIN 4 25c4 ad 0 0 4 10 4 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 8 - ^ =  $23 $T0 12 - ^ =  $22 $T0 16 - ^ =  $24 $T0 20 - ^ =
+STACK WIN 4 267b 6 0 0 4 8 4 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 8 - ^ =  $23 $T0 12 - ^ =  $22 $T0 16 - ^ =  $24 $T0 20 - ^ =
+STACK WIN 4 2690 d 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 26a0 43 3 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 26a1 41 2 0 0 4 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $24 $T0 4 - ^ =
+STACK WIN 4 26bc 1a 0 0 0 8 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $24 $T0 4 - ^ =  $23 $T0 8 - ^ =
+STACK WIN 4 26f0 8c 3 0 4 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 26f1 81 2 0 4 4 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $23 $T0 4 - ^ =
+STACK WIN 4 26f4 7d 0 0 4 8 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $23 $T0 4 - ^ =  $24 $T0 8 - ^ =
+STACK WIN 4 2780 c 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 2790 c 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 27a0 2a 0 0 8 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 27d0 1b 0 0 c 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 27f0 ae 15 0 0 4 60 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $23 $T0 100 - ^ =
+STACK WIN 4 28a0 2e 1 0 4 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 28a1 2c 0 0 4 4 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $23 $T0 4 - ^ =
+STACK WIN 4 28d0 33 1 0 18 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 28d1 31 0 0 18 4 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 4 - ^ =
+STACK WIN 4 2910 15e 36 0 8 4 f4 0 1 $T0 $ebp 204 + =$eip $T0 4 + ^ =$ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 2a6e 11 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 2a7f 30 3 0 4 0 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 2aaf e 3 0 8 0 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 2abd 28 3 0 4 0 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 2ae5 fb 9 0 0 0 324 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 2be0 a4 1 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 2be1 2b 0 0 0 4 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $23 $T0 4 - ^ =
+STACK WIN 4 2c84 8 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 2c8c 12 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 2c9e 177 c 0 0 10 24 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $20 $T0 40 - ^ =  $23 $T0 44 - ^ =  $24 $T0 48 - ^ =
+STACK WIN 4 2dc4 14 0 0 0 10 24 0 1 $T0 $ebp = $T2 $esp = $T1 .raSearchStart = $eip $T1 ^ = $ebp $T0 = $esp $T1 4 + =
+STACK WIN 4 2e15 a 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 2e1f 5 0 0 4 0 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 2e24 1b 9 0 4 0 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 2e28 13 5 0 4 4 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $23 $T0 4 - ^ =
+STACK WIN 4 2e3f 18 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 2e57 1b 9 0 4 0 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 2e5b 13 5 0 4 4 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $23 $T0 4 - ^ =
+STACK WIN 4 2e72 18 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 2e8a 2c 6 0 4 0 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 2e8e 24 2 0 4 4 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $23 $T0 4 - ^ =
+STACK WIN 4 2eb6 11 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 2ec7 2d 6 0 4 0 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 2ecb 25 2 0 4 4 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $23 $T0 4 - ^ =
+STACK WIN 4 2ef4 1d 6 0 0 0 c 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 2f11 1d 6 0 0 0 c 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 2f2e d 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 2f3b 44 7 0 8 0 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 2f42 37 0 0 8 4 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $23 $T0 4 - ^ =
+STACK WIN 4 2f7f 35 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 2f92 21 0 0 0 4 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $23 $T0 4 - ^ =
+STACK WIN 4 2fb4 39 3 0 4 0 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 2fed aa 6 0 4 0 c 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 3004 87 0 0 4 4 c 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $23 $T0 16 - ^ =
+STACK WIN 4 3048 39 0 0 4 8 c 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $23 $T0 16 - ^ =  $24 $T0 20 - ^ =
+STACK WIN 4 3097 8a c 0 4 10 18 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $20 $T0 28 - ^ =  $23 $T0 32 - ^ =  $24 $T0 36 - ^ =
+STACK WIN 4 30fc 13 0 0 4 10 18 0 1 $T0 $ebp = $T2 $esp = $T1 .raSearchStart = $eip $T1 ^ = $ebp $T0 = $esp $T1 4 + =
+STACK WIN 4 3121 1d 3 0 4 0 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 313e 28 3 0 8 0 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 3166 3b 3 0 4 0 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 31a1 15 3 0 4 0 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 31b6 4f 6 0 0 0 14 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 3205 4b 8 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 320c 43 1 0 0 4 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $23 $T0 4 - ^ =
+STACK WIN 4 320d 3b 0 0 0 8 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $23 $T0 4 - ^ =  $24 $T0 8 - ^ =
+STACK WIN 4 3250 3 0 0 4 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 3253 4 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 3257 6 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 325d c 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 3269 3 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 326c 21 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 328d 1 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 328e 6 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 3294 1d 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 32b1 c 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 32bd 6 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 32c3 6 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 32c9 11c a 0 4 4 324 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $20 $T0 808 - ^ =
+STACK WIN 4 33e5 44 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 3429 c 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 3435 41 3 0 4 0 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 3476 8 0 0 4 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 347e 2b 2 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 347f 29 1 0 0 4 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 4 - ^ =
+STACK WIN 4 3480 27 0 0 0 8 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 4 - ^ =  $23 $T0 8 - ^ =
+STACK WIN 4 348f 17 0 0 0 c 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 4 - ^ =  $23 $T0 8 - ^ =  $24 $T0 12 - ^ =
+STACK WIN 4 34a9 2b 2 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 34aa 29 1 0 0 4 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 4 - ^ =
+STACK WIN 4 34ab 27 0 0 0 8 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 4 - ^ =  $23 $T0 8 - ^ =
+STACK WIN 4 34ba 17 0 0 0 c 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =  $20 $T0 4 - ^ =  $23 $T0 8 - ^ =  $24 $T0 12 - ^ =
+STACK WIN 4 34d4 6 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 4 353b 23 3 0 10 0 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 355e 23 a 0 4 0 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 3566 17 2 0 4 4 0 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $23 $T0 4 - ^ =
+STACK WIN 4 3581 199 e 0 0 0 24 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =
+STACK WIN 4 358f 187 0 0 0 4 24 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $20 $T0 40 - ^ =
+STACK WIN 4 35b7 ef 0 0 0 8 24 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $20 $T0 40 - ^ =  $23 $T0 44 - ^ =
+STACK WIN 4 35b8 ed 0 0 0 c 24 0 1 $T0 $ebp = $eip $T0 4 + ^ = $ebp $T0 ^ = $esp $T0 8 + =  $20 $T0 40 - ^ =  $23 $T0 44 - ^ =  $24 $T0 48 - ^ =
+STACK WIN 4 371a c 0 0 0 0 0 0 1 $T0 .raSearch = $eip $T0 ^ = $esp $T0 4 + =
+STACK WIN 0 2dc4 14 0 0 0 0 0 0 0 0
+STACK WIN 0 30fc 13 0 0 0 0 0 0 0 0
diff --git a/tests/sentry/lang/native/test_plugin.py b/tests/sentry/lang/native/test_plugin.py
index d6375bb059..ceac5a5568 100644
--- a/tests/sentry/lang/native/test_plugin.py
+++ b/tests/sentry/lang/native/test_plugin.py
@@ -8,7 +8,7 @@ from six import BytesIO
 from django.core.files.uploadedfile import SimpleUploadedFile
 from django.core.urlresolvers import reverse
 
-from sentry.models import Event
+from sentry.models import Event, File, ProjectDSymFile
 from sentry.testutils import TestCase
 from sentry.lang.native.symbolizer import Symbolizer
 
@@ -1207,3 +1207,78 @@ class RealResolvingIntegrationTest(TestCase):
                 event.delete()
         finally:
             Object.make_symcache = original_make_symcache
+
+    def test_debug_id_resolving(self):
+        file = File.objects.create(
+            name='crash.pdb',
+            type='default',
+            headers={'Content-Type': 'text/x-breakpad'},
+        )
+
+        path = os.path.join(os.path.dirname(__file__), 'fixtures', 'windows.sym')
+        with open(path) as f:
+            file.putfile(f)
+
+        ProjectDSymFile.objects.create(
+            file=file,
+            object_name='crash.pdb',
+            cpu_name='x86',
+            project=self.project,
+            debug_id='3249d99d-0c40-4931-8610-f4e4fb0b6936-1',
+        )
+
+        self.login_as(user=self.user)
+
+        event_data = {
+            'contexts': {
+                'device': {
+                    'arch': 'x86'
+                },
+                'os': {
+                    'build': u'',
+                    'name': 'Windows',
+                    'type': 'os',
+                    'version': u'10.0.14393'
+                }
+            },
+            'debug_meta': {
+                'images': [
+                    {
+                        'id': u'3249d99d-0c40-4931-8610-f4e4fb0b6936-1',
+                        'image_addr': '0x2a0000',
+                        'image_size': 36864,
+                        'name': u'C:\\projects\\breakpad-tools\\windows\\Release\\crash.exe',
+                        'type': 'symbolic'
+                    }
+                ]
+            },
+            'exception': {
+                'stacktrace': {
+                    'frames': [
+                        {
+                            'function': '<unknown>',
+                            'instruction_addr': '0x2a2a3d',
+                            'package': u'C:\\projects\\breakpad-tools\\windows\\Release\\crash.exe'
+                        }
+                    ]
+                },
+                'thread_id': 1636,
+                'type': u'EXCEPTION_ACCESS_VIOLATION_WRITE',
+                'value': u'Fatal Error: EXCEPTION_ACCESS_VIOLATION_WRITE'
+            },
+            'platform': 'native'
+        }
+
+        resp = self._postWithHeader(event_data)
+        assert resp.status_code == 200
+
+        event = Event.objects.get()
+
+        bt = event.interfaces['sentry.interfaces.Exception'].values[0].stacktrace
+        frames = bt.frames
+
+        assert frames[0].function == 'main'
+        # NOTE: Breakpad symbols only contain entire paths
+        assert frames[0].filename == 'c:\\projects\\breakpad-tools\\windows\\crash\\main.cpp'
+        assert frames[0].abs_path == 'c:\\projects\\breakpad-tools\\windows\\crash\\main.cpp'
+        assert frames[0].lineno == 35
diff --git a/tests/sentry/lang/native/test_utils.py b/tests/sentry/lang/native/test_utils.py
index f8729b84c5..8f9d3ec7ac 100644
--- a/tests/sentry/lang/native/test_utils.py
+++ b/tests/sentry/lang/native/test_utils.py
@@ -1,7 +1,8 @@
 from __future__ import absolute_import
+import os
 
 from sentry.lang.native.utils import get_sdk_from_event, cpu_name_from_data, \
-    version_build_from_data
+    version_build_from_data, merge_minidump_event
 
 
 def test_get_sdk_from_event():
@@ -143,3 +144,438 @@ def test_cpu_name_from_data_inferred_type():
     )
 
     assert cpu_name == 'arm64'
+
+
+def test_minidump_linux():
+    event = {'release': 'test-1.0.0'}
+    minidump = os.path.join(os.path.dirname(__file__), 'fixtures', 'linux.dmp')
+    merge_minidump_event(event, minidump)
+
+    assert event == {
+        'contexts': {
+            'device': {
+                'arch': 'x86_64'
+            },
+            'os': {
+                'build': u'#1 SMP Mon Nov 6 16:00:12 UTC 2017',
+                'name': u'Linux',
+                'type': 'os',
+                'version': u'4.9.60-linuxkit-aufs'
+            }
+        },
+        'debug_meta': {
+            'images': [
+                {
+                    'id': u'451a38b5-0679-79d2-0738-22a5ceb24c4b',
+                    'image_addr': '0x7f514015d000',
+                    'image_size': 1835008,
+                    'name': u'/lib/x86_64-linux-gnu/libc-2.23.so',
+                    'type': 'symbolic'
+                },
+                {
+                    'id': u'59627b5d-2255-a375-c17b-d4c3fd05f5a6',
+                    'image_addr': '0x7f5140cdc000',
+                    'image_size': 155648,
+                    'name': u'/lib/x86_64-linux-gnu/ld-2.23.so',
+                    'type': 'symbolic'
+                },
+                {
+                    'id': u'c0bcc3f1-9827-fe65-3058-404b2831d9e6',
+                    'image_addr': '0x400000',
+                    'image_size': 106496,
+                    'name': u'/work/linux/build/crash',
+                    'type': 'symbolic'
+                }
+            ]
+        },
+        'exception': {
+            'stacktrace': {
+                'frames': [
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x401dc0',
+                        'package': u'/work/linux/build/crash'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x7f5140cdc000',
+                        'package': None
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x400040',
+                        'package': u'/work/linux/build/crash'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x7fff5aef1000',
+                        'package': None
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x401de9',
+                        'package': u'/work/linux/build/crash'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x401dc0',
+                        'package': u'/work/linux/build/crash'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x414ca0',
+                        'package': u'/work/linux/build/crash'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x401c70',
+                        'package': u'/work/linux/build/crash'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x401dc0',
+                        'package': u'/work/linux/build/crash'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x401c70',
+                        'package': u'/work/linux/build/crash'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x7f514017d830',
+                        'package': u'/lib/x86_64-linux-gnu/libc-2.23.so'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x414c30',
+                        'package': u'/work/linux/build/crash'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x401ec0',
+                        'package': u'/work/linux/build/crash'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x7f5140cebac6',
+                        'package': u'/lib/x86_64-linux-gnu/ld-2.23.so'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x400000',
+                        'package': None
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x7f51401e4800',
+                        'package': u'/lib/x86_64-linux-gnu/libc-2.23.so'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x7f514025002e',
+                        'package': u'/lib/x86_64-linux-gnu/libc-2.23.so'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x401d72',
+                        'package': u'/work/linux/build/crash'
+                    }
+                ]
+            },
+            'thread_id': 1304,
+            'type': u'SIGSEGV',
+            'value': u'Fatal Error: SIGSEGV'
+        },
+        'level': 'fatal',
+        'message': u'Fatal Error: SIGSEGV',
+        'platform': 'native',
+        'release': 'test-1.0.0',
+        'threads': [
+            {
+                'crashed': True,
+                'id': 1304
+            }
+        ],
+        'timestamp': 1522061032.0
+    }
+
+
+def test_minidump_macos():
+    event = {'release': 'test-1.0.0'}
+    minidump = os.path.join(os.path.dirname(__file__), 'fixtures', 'macos.dmp')
+    merge_minidump_event(event, minidump)
+
+    assert event == {
+        'contexts': {
+            'device': {
+                'arch': 'x86_64'
+            },
+            'os': {
+                'build': u'16G29',
+                'name': 'macOS',
+                'type': 'os',
+                'version': u'10.12.6'
+            }
+        },
+        'debug_meta': {
+            'images': [
+                {
+                    'id': u'67e9247c-814e-392b-a027-dbde6748fcbf',
+                    'image_addr': '0x109b9b000',
+                    'image_size': 69632,
+                    'name': u'/Users/travis/build/getsentry/breakpad-tools/macos/build/./crash',
+                    'type': 'symbolic'
+                },
+                {
+                    'id': u'9b2ac56d-107c-3541-a127-9094a751f2c9',
+                    'image_addr': '0x7fffe7ee6000',
+                    'image_size': 24576,
+                    'name': u'/usr/lib/system/libdyld.dylib',
+                    'type': 'symbolic'
+                }
+            ]
+        },
+        'exception': {
+            'stacktrace': {
+                'frames': [
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x7fffe7eeb235',
+                        'package': u'/usr/lib/system/libdyld.dylib'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x7fffe7eeb235',
+                        'package': u'/usr/lib/system/libdyld.dylib'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x109ba8c70',
+                        'package': u'/Users/travis/build/getsentry/breakpad-tools/macos/build/./crash'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x109ba8c15',
+                        'package': u'/Users/travis/build/getsentry/breakpad-tools/macos/build/./crash'
+                    }
+                ]
+            },
+            'thread_id': 775,
+            'type': u'EXC_BAD_ACCESS / KERN_INVALID_ADDRESS',
+            'value': u'Fatal Error: EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+        },
+        'level': 'fatal',
+        'message': u'Fatal Error: EXC_BAD_ACCESS / KERN_INVALID_ADDRESS',
+        'platform': 'native',
+        'release': 'test-1.0.0',
+        'threads': [
+            {
+                'crashed': True,
+                'id': 775
+            }
+        ],
+        'timestamp': 1521713398.0
+    }
+
+
+def test_minidump_windows():
+    event = {'release': 'test-1.0.0'}
+    minidump = os.path.join(os.path.dirname(__file__), 'fixtures', 'windows.dmp')
+    merge_minidump_event(event, minidump)
+
+    assert event == {
+        'contexts': {
+            'device': {
+                'arch': 'x86'
+            },
+            'os': {
+                'build': u'',
+                'name': 'Windows',
+                'type': 'os',
+                'version': u'10.0.14393'
+            }
+        },
+        'debug_meta': {
+            'images': [
+                {
+                    'id': u'3249d99d-0c40-4931-8610-f4e4fb0b6936-1',
+                    'image_addr': '0x2a0000',
+                    'image_size': 36864,
+                    'name': u'C:\\projects\\breakpad-tools\\windows\\Release\\crash.exe',
+                    'type': 'symbolic'
+                },
+                {
+                    'id': u'971f98e5-ce60-41ff-b2d7-235bbeb34578-1',
+                    'image_addr': '0x77170000',
+                    'image_size': 1585152,
+                    'name': u'C:\\Windows\\System32\\ntdll.dll',
+                    'type': 'symbolic'
+                },
+                {
+                    'id': u'ae131c67-27a7-4fa1-9916-b5a4aef41190-1',
+                    'image_addr': '0x75810000',
+                    'image_size': 790528,
+                    'name': u'C:\\Windows\\System32\\rpcrt4.dll',
+                    'type': 'symbolic'
+                },
+                {
+                    'id': u'aec7ef2f-df4b-4642-a471-4c3e5fe8760a-1',
+                    'image_addr': '0x70b70000',
+                    'image_size': 151552,
+                    'name': u'C:\\Windows\\System32\\dbgcore.dll',
+                    'type': 'symbolic'
+                },
+                {
+                    'id': u'd3474559-96f7-47d6-bf43-c176b2171e68-1',
+                    'image_addr': '0x75050000',
+                    'image_size': 917504,
+                    'name': u'C:\\Windows\\System32\\kernel32.dll',
+                    'type': 'symbolic'
+                }
+            ]
+        },
+        'exception': {
+            'stacktrace': {
+                'frames': [
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x771d0f44',
+                        'package': u'C:\\Windows\\System32\\ntdll.dll'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x771d0f79',
+                        'package': u'C:\\Windows\\System32\\ntdll.dll'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x750662c4',
+                        'package': u'C:\\Windows\\System32\\kernel32.dll'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x2a2d97',
+                        'package': u'C:\\projects\\breakpad-tools\\windows\\Release\\crash.exe'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x2a3435',
+                        'package': u'C:\\projects\\breakpad-tools\\windows\\Release\\crash.exe'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x7584e9c0',
+                        'package': u'C:\\Windows\\System32\\rpcrt4.dll'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x75810000',
+                        'package': None
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x70b7ae40',
+                        'package': u'C:\\Windows\\System32\\dbgcore.dll'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x70850000',
+                        'package': None
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x7584e9c0',
+                        'package': u'C:\\Windows\\System32\\rpcrt4.dll'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x2a28d0',
+                        'package': u'C:\\projects\\breakpad-tools\\windows\\Release\\crash.exe'
+                    },
+                    {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x2a2a3d',
+                        'package': u'C:\\projects\\breakpad-tools\\windows\\Release\\crash.exe'
+                    }
+                ]
+            },
+            'thread_id': 1636,
+            'type': u'EXCEPTION_ACCESS_VIOLATION_WRITE',
+            'value': u'Fatal Error: EXCEPTION_ACCESS_VIOLATION_WRITE'
+        },
+        'level': 'fatal',
+        'message': u'Fatal Error: EXCEPTION_ACCESS_VIOLATION_WRITE',
+        'platform': 'native',
+        'release': 'test-1.0.0',
+        'threads': [
+            {
+                'crashed': True,
+                'id': 1636
+            },
+            {
+                'crashed': False,
+                'id': 3580,
+                'stacktrace': {
+                    'frames': [{
+                        'function': '<unknown>',
+                        'instruction_addr': '0x771d0f44',
+                        'package': u'C:\\Windows\\System32\\ntdll.dll'
+                    },
+                        {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x771d0f79',
+                        'package': u'C:\\Windows\\System32\\ntdll.dll'
+                    },
+                        {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x750662c4',
+                        'package': u'C:\\Windows\\System32\\kernel32.dll'
+                    },
+                        {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x771e016c',
+                        'package': u'C:\\Windows\\System32\\ntdll.dll'
+                    }]
+                }
+            },
+            {
+                'crashed': False,
+                'id': 2600,
+                'stacktrace': {
+                    'frames': [{
+                        'function': '<unknown>',
+                        'instruction_addr': '0x771d0f44',
+                        'package': u'C:\\Windows\\System32\\ntdll.dll'
+                    },
+                        {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x771d0f79',
+                        'package': u'C:\\Windows\\System32\\ntdll.dll'
+                    },
+                        {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x750662c4',
+                        'package': u'C:\\Windows\\System32\\kernel32.dll'
+                    },
+                        {
+                        'function': '<unknown>',
+                        'instruction_addr': '0x771e016c',
+                        'package': u'C:\\Windows\\System32\\ntdll.dll'
+                    }]
+                }
+            },
+            {
+                'crashed': False,
+                'id': 2920,
+                'stacktrace': {
+                    'frames': [{
+                        'function': '<unknown>',
+                        'instruction_addr': '0x771df3dc',
+                        'package': u'C:\\Windows\\System32\\ntdll.dll'
+                    }]
+                }
+            }
+        ],
+        'timestamp': 1521713273.0
+    }
diff --git a/tests/sentry/models/fixtures/crash.dsym b/tests/sentry/models/fixtures/crash.dsym
new file mode 100644
index 0000000000..8b18d3a3b6
Binary files /dev/null and b/tests/sentry/models/fixtures/crash.dsym differ
diff --git a/tests/sentry/models/fixtures/v1.symc b/tests/sentry/models/fixtures/v1.symc
new file mode 100644
index 0000000000..8d7e6995bc
Binary files /dev/null and b/tests/sentry/models/fixtures/v1.symc differ
diff --git a/tests/sentry/models/test_dsymfile.py b/tests/sentry/models/test_dsymfile.py
index bb058569a4..a3081e13ca 100644
--- a/tests/sentry/models/test_dsymfile.py
+++ b/tests/sentry/models/test_dsymfile.py
@@ -2,19 +2,18 @@ from __future__ import absolute_import
 
 import os
 import time
-import uuid
 import zipfile
 from six import BytesIO, text_type
 
 from django.core.files.uploadedfile import SimpleUploadedFile
 from django.core.urlresolvers import reverse
 
-from sentry.testutils import APITestCase
-from sentry.models import ProjectDSymFile
+from sentry.testutils import APITestCase, TestCase
+from sentry.models import File, ProjectDSymFile, ProjectSymCacheFile
 
 # This is obviously a freely generated UUID and not the checksum UUID.
 # This is permissible if users want to send different UUIDs
-PROGUARD_UUID = uuid.UUID('6dc7fdb0-d2fb-4c8e-9d6b-bb1aa98929b1')
+PROGUARD_UUID = text_type('6dc7fdb0-d2fb-4c8e-9d6b-bb1aa98929b1')
 PROGUARD_SOURCE = b'''\
 org.slf4j.helpers.Util$ClassContextSecurityManager -> org.a.b.g$a:
 65:65:void <init>() -> <init>
@@ -57,14 +56,14 @@ class DSymFilesClearTest(APITestCase):
         assert response.data[0]['headers'] == {
             'Content-Type': 'text/x-proguard+plain'}
         assert response.data[0]['sha1'] == 'e6d3c5185dac63eddfdc1a5edfffa32d46103b44'
-        assert response.data[0]['uuid'] == text_type(PROGUARD_UUID)
+        assert response.data[0]['uuid'] == PROGUARD_UUID
         assert response.data[0]['objectName'] == 'proguard-mapping'
         assert response.data[0]['cpuName'] == 'any'
         assert response.data[0]['symbolType'] == 'proguard'
 
         dsyms = ProjectDSymFile.dsymcache.fetch_dsyms(
             project=project,
-            uuids=[PROGUARD_UUID])
+            debug_ids=[PROGUARD_UUID])
         assert len(dsyms) == 1
         assert os.path.isfile(dsyms[PROGUARD_UUID])
 
@@ -82,3 +81,75 @@ class DSymFilesClearTest(APITestCase):
 
         # But it's gone now
         assert not os.path.isfile(dsyms[PROGUARD_UUID])
+
+
+class SymCacheTest(TestCase):
+    def test_create_symcache(self):
+        file = File.objects.create(
+            name='crash.dSYM',
+            type='default',
+            headers={'Content-Type': 'application/x-mach-binary'},
+        )
+
+        path = os.path.join(os.path.dirname(__file__), 'fixtures', 'crash.dsym')
+        with open(path) as f:
+            file.putfile(f)
+
+        debug_id = '67e9247c-814e-392b-a027-dbde6748fcbf'
+        ProjectDSymFile.objects.create(
+            file=file,
+            object_name='crash.dSYM',
+            cpu_name='x86',
+            project=self.project,
+            debug_id=debug_id,
+        )
+
+        symcaches = ProjectDSymFile.dsymcache.get_symcaches(self.project, [debug_id])
+        symcache = symcaches['67e9247c-814e-392b-a027-dbde6748fcbf']
+
+        assert symcache.id == debug_id
+        assert symcache.is_latest_file_format
+
+    def test_update_symcache(self):
+        file = File.objects.create(
+            name='crash.dSYM',
+            type='default',
+            headers={'Content-Type': 'application/x-mach-binary'},
+        )
+
+        path = os.path.join(os.path.dirname(__file__), 'fixtures', 'crash.dsym')
+        with open(path) as f:
+            file.putfile(f)
+
+        debug_id = '67e9247c-814e-392b-a027-dbde6748fcbf'
+        debug_file = ProjectDSymFile.objects.create(
+            file=file,
+            object_name='crash.dSYM',
+            cpu_name='x86',
+            project=self.project,
+            debug_id=debug_id,
+        )
+
+        file = File.objects.create(
+            name='v1.symc',
+            type='project.symcache',
+        )
+
+        path = os.path.join(os.path.dirname(__file__), 'fixtures', 'v1.symc')
+        with open(path) as f:
+            file.putfile(f)
+
+        # Create an outdated SymCache to replace
+        ProjectSymCacheFile.objects.create(
+            project=debug_file.project,
+            cache_file=file,
+            dsym_file=debug_file,
+            checksum=debug_file.file.checksum,
+            version=1,
+        )
+
+        symcaches = ProjectDSymFile.dsymcache.get_symcaches(self.project, [debug_id])
+        symcache = symcaches['67e9247c-814e-392b-a027-dbde6748fcbf']
+
+        assert symcache.id == debug_id
+        assert symcache.is_latest_file_format
