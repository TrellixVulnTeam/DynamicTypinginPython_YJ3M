commit 095b89406874c31fc5efb6bf106bdf14df5f584e
Author: Matte Noble <me@mattenoble.com>
Date:   Tue Feb 26 10:35:54 2019 -0800

    feat(app-platform): UI Component Endpoints (#12139)
    
    Adds an endpoint to expose Sentry App Components for a particular Sentry
    App.
    
    Also updates the Sentry App Creator to parse schema and create
    SentryAppComponent records.

diff --git a/src/sentry/api/endpoints/sentry_app_components.py b/src/sentry/api/endpoints/sentry_app_components.py
new file mode 100644
index 0000000000..83c6d18f2a
--- /dev/null
+++ b/src/sentry/api/endpoints/sentry_app_components.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+
+from sentry.api.bases import SentryAppBaseEndpoint
+from sentry.api.paginator import OffsetPaginator
+from sentry.api.serializers import serialize
+from sentry.features.helpers import requires_feature
+
+
+class SentryAppComponentsEndpoint(SentryAppBaseEndpoint):
+    @requires_feature('organizations:sentry-apps', any_org=True)
+    def get(self, request, sentry_app):
+        return self.paginate(
+            request=request,
+            queryset=sentry_app.components.all(),
+            paginator_cls=OffsetPaginator,
+            on_results=lambda x: serialize(x, request.user),
+        )
diff --git a/src/sentry/api/serializers/models/sentry_app_component.py b/src/sentry/api/serializers/models/sentry_app_component.py
new file mode 100644
index 0000000000..b16337130b
--- /dev/null
+++ b/src/sentry/api/serializers/models/sentry_app_component.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.api.serializers import Serializer, register
+from sentry.models import SentryAppComponent
+
+
+@register(SentryAppComponent)
+class SentryAppComponentSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        return {
+            'uuid': six.binary_type(obj.uuid),
+            'type': obj.type,
+            'schema': obj.schema,
+            'sentryAppId': obj.sentry_app_id,
+        }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index b34bb86152..3c8e0beced 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -174,6 +174,7 @@ from .endpoints.release_deploys import ReleaseDeploysEndpoint
 from .endpoints.debug_files import DebugFilesEndpoint, DifAssembleEndpoint, \
     UnknownDebugFilesEndpoint, AssociateDSymFilesEndpoint
 from .endpoints.sentry_apps import SentryAppsEndpoint
+from .endpoints.sentry_app_components import SentryAppComponentsEndpoint
 from .endpoints.sentry_app_details import SentryAppDetailsEndpoint
 from .endpoints.sentry_app_authorizations import SentryAppAuthorizationsEndpoint
 from .endpoints.shared_group_details import SharedGroupDetailsEndpoint
@@ -1220,7 +1221,11 @@ urlpatterns = patterns(
         SentryAppDetailsEndpoint.as_view(),
         name='sentry-api-0-sentry-app-details'
     ),
-
+    url(
+        r'^/sentry-apps/(?P<sentry_app_slug>[^\/]+)/components/$',
+        SentryAppComponentsEndpoint.as_view(),
+        name='sentry-api-0-sentry-app-components'
+    ),
     url(
         r'^sentry-app-installations/(?P<uuid>[^\/]+)/authorizations/$',
         SentryAppAuthorizationsEndpoint.as_view(),
diff --git a/src/sentry/mediators/sentry_apps/creator.py b/src/sentry/mediators/sentry_apps/creator.py
index 1ddab86097..97e17adb4b 100644
--- a/src/sentry/mediators/sentry_apps/creator.py
+++ b/src/sentry/mediators/sentry_apps/creator.py
@@ -5,7 +5,8 @@ import six
 from collections import Iterable
 
 from sentry.mediators import Mediator, Param
-from sentry.models import (ApiApplication, SentryApp, User)
+from sentry.models import (ApiApplication, SentryApp, SentryAppComponent, User,)
+from sentry.utils import json
 
 
 class Creator(Mediator):
@@ -13,6 +14,7 @@ class Creator(Mediator):
     organization = Param('sentry.models.Organization')
     scopes = Param(Iterable)
     events = Param(Iterable, default=lambda self: [])
+    schema = Param(six.string_types, default=lambda self: '{}')
     webhook_url = Param(six.string_types)
     redirect_url = Param(six.string_types, required=False)
     is_alertable = Param(bool, default=False)
@@ -22,6 +24,7 @@ class Creator(Mediator):
         self.proxy = self._create_proxy_user()
         self.api_app = self._create_api_application()
         self.app = self._create_sentry_app()
+        self._create_ui_components()
         return self.app
 
     def _create_proxy_user(self):
@@ -45,8 +48,19 @@ class Creator(Mediator):
             proxy_user_id=self.proxy.id,
             scope_list=self.scopes,
             events=expand_events(self.events),
+            schema=self.schema or '{}',
             webhook_url=self.webhook_url,
             redirect_url=self.redirect_url,
             is_alertable=self.is_alertable,
             overview=self.overview,
         )
+
+    def _create_ui_components(self):
+        schema = json.loads(self.schema or '{}')
+
+        for element in schema.get('elements', []):
+            SentryAppComponent.objects.create(
+                type=element['type'],
+                sentry_app_id=self.app.id,
+                schema=element,
+            )
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 86d4e973be..009d78cc34 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -31,7 +31,7 @@ from sentry.models import (
     Activity, Environment, Event, EventError, EventMapping, Group, Organization, OrganizationMember,
     OrganizationMemberTeam, Project, ProjectBookmark, Team, User, UserEmail, Release, Commit, ReleaseCommit,
     CommitAuthor, Repository, CommitFileChange, ProjectDebugFile, File, UserPermission, EventAttachment,
-    UserReport
+    UserReport,
 )
 from sentry.utils.canonical import CanonicalKeyDict
 
@@ -751,6 +751,7 @@ class Fixtures(object):
             'scopes': scopes,
             'webhook_url': webhook_url,
             'events': [],
+            'schema': '{}',
         }
 
         _kwargs.update(kwargs)
@@ -774,6 +775,69 @@ class Fixtures(object):
             user=(user or self.create_user()),
         )
 
+    def create_issue_link_schema(self):
+        return {
+            'type': 'issue-link',
+            'link': {
+                'uri': '/sentry/issues/link',
+                'required_fields': [
+                    {
+                        'type': 'select',
+                        'name': 'assignee',
+                        'label': 'Assignee',
+                        'uri': '/sentry/members',
+                    },
+                ],
+            },
+
+            'create': {
+                'uri': '/sentry/issues/create',
+                'required_fields': [
+                    {
+                        'type': 'text',
+                        'name': 'title',
+                        'label': 'Title',
+                    },
+                    {
+                        'type': 'text',
+                        'name': 'summary',
+                        'label': 'Summary',
+                    },
+                ],
+
+                'optional_fields': [
+                    {
+                        'type': 'select',
+                        'name': 'points',
+                        'label': 'Points',
+                        'options': [
+                            ['1', '1'],
+                            ['2', '2'],
+                            ['3', '3'],
+                            ['5', '5'],
+                            ['8', '8'],
+                        ],
+                    },
+                    {
+                        'type': 'select',
+                        'name': 'assignee',
+                        'label': 'Assignee',
+                        'uri': '/sentry/members',
+                    },
+                ],
+            },
+        }
+
+    def create_alert_rule_action_schema(self):
+        return {
+            'type': 'alert-rule-action',
+            'required_fields': [{
+                'type': 'text',
+                'name': 'channel',
+                'label': 'Channel',
+            }],
+        }
+
     def create_service_hook(self, actor=None, org=None, project=None,
                             events=None, url=None, **kwargs):
         if not actor:
diff --git a/tests/sentry/api/endpoints/test_sentry_app_components.py b/tests/sentry/api/endpoints/test_sentry_app_components.py
new file mode 100644
index 0000000000..60d1dd50b2
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_sentry_app_components.py
@@ -0,0 +1,46 @@
+from __future__ import absolute_import
+
+import six
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase
+from sentry.testutils.helpers import with_feature
+from sentry.utils import json
+
+
+class SentryAppComponentsTest(APITestCase):
+    def setUp(self):
+        self.superuser = self.create_user(email='a@example.com', is_superuser=True)
+        self.user = self.create_user(email='boop@example.com')
+        self.org = self.create_organization(owner=self.user)
+
+        self.sentry_app = self.create_sentry_app(
+            name='Test',
+            organization=self.org,
+            published=True,
+            schema=json.dumps({
+                'elements': [self.create_issue_link_schema()],
+            }),
+        )
+
+        self.component = self.sentry_app.components.first()
+
+        self.url = reverse(
+            'sentry-api-0-sentry-app-components',
+            args=[self.sentry_app.slug],
+        )
+
+        self.login_as(user=self.user)
+
+    @with_feature('organizations:sentry-apps')
+    def test_retrieves_all_components(self):
+        response = self.client.get(self.url, format='json')
+
+        assert response.status_code == 200
+        assert response.data[0] == {
+            'uuid': six.binary_type(self.component.uuid),
+            'type': 'issue-link',
+            'schema': self.component.schema,
+            'sentryAppId': self.sentry_app.id,
+        }
diff --git a/tests/sentry/mediators/sentry_apps/test_creator.py b/tests/sentry/mediators/sentry_apps/test_creator.py
index 23e81570a8..323e642ba6 100644
--- a/tests/sentry/mediators/sentry_apps/test_creator.py
+++ b/tests/sentry/mediators/sentry_apps/test_creator.py
@@ -1,18 +1,24 @@
 from __future__ import absolute_import
 
 from sentry.mediators.sentry_apps import Creator
-from sentry.models import ApiApplication, SentryApp, User
+from sentry.models import ApiApplication, SentryApp, SentryAppComponent, User
 from sentry.testutils import TestCase
+from sentry.utils import json
 
 
 class TestCreator(TestCase):
     def setUp(self):
         self.user = self.create_user()
         self.org = self.create_organization(owner=self.user)
-        self.creator = Creator(name='nulldb',
-                               organization=self.org,
-                               scopes=('project:read',),
-                               webhook_url='http://example.com')
+        self.creator = Creator(
+            name='nulldb',
+            organization=self.org,
+            scopes=('project:read',),
+            webhook_url='http://example.com',
+            schema=json.dumps({
+                'elements': [self.create_issue_link_schema()],
+            }),
+        )
 
     def test_creates_proxy_user(self):
         self.creator.call()
@@ -51,3 +57,35 @@ class TestCreator(TestCase):
         sentry_app = SentryApp.objects.get(id=app.id)
 
         assert 'issue.created' in sentry_app.events
+
+    def test_creates_ui_components(self):
+        self.creator.schema = json.dumps({
+            'elements': [
+                self.create_issue_link_schema(),
+                self.create_alert_rule_action_schema(),
+            ],
+        })
+
+        app = self.creator.call()
+
+        assert SentryAppComponent.objects.filter(
+            sentry_app_id=app.id,
+            type='issue-link',
+        ).exists()
+
+        assert SentryAppComponent.objects.filter(
+            sentry_app_id=app.id,
+            type='alert-rule-action',
+        ).exists()
+
+    def test_blank_schema(self):
+        self.creator.schema = ''
+        assert self.creator.call()
+
+    def test_none_schema(self):
+        self.creator.schema = None
+        assert self.creator.call()
+
+    def test_schema_with_no_elements(self):
+        self.creator.schema = '{"elements":[]}'
+        assert self.creator.call()
