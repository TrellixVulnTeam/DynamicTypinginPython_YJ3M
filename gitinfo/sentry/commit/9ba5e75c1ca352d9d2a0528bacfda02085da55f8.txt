commit 9ba5e75c1ca352d9d2a0528bacfda02085da55f8
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Wed Oct 30 11:01:34 2019 -0700

    feat(analytics): Add invite request tracking (#15314)

diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteRequestRow.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteRequestRow.tsx
index cd58b287cf..bbe8c4810d 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteRequestRow.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteRequestRow.tsx
@@ -16,8 +16,8 @@ type Props = {
   inviteRequest: Member;
   inviteRequestBusy: {[key: string]: boolean};
   organization: Organization;
-  onApprove: (id: string, email: string) => Promise<void>;
-  onDeny: (id: string, email: string) => Promise<void>;
+  onApprove: (inviteRequest: Member) => void;
+  onDeny: (inviteRequest: Member) => void;
 };
 
 const InviteModalHook = HookOrDefault({
@@ -29,7 +29,7 @@ const InviteModalHook = HookOrDefault({
 type InviteModalRenderFunc = React.ComponentProps<typeof InviteModalHook>['children'];
 
 const InviteRequestRow = ({
-  inviteRequest: {id, email, inviteStatus, inviterName, roleName},
+  inviteRequest,
   inviteRequestBusy,
   organization,
   onApprove,
@@ -40,17 +40,19 @@ const InviteRequestRow = ({
     <StyledPanelItem>
       <div>
         <h5 style={{marginBottom: '3px'}}>
-          <UserName>{email}</UserName>
+          <UserName>{inviteRequest.email}</UserName>
         </h5>
-        {inviteStatus === 'requested_to_be_invited' ? (
-          inviterName && (
+        {inviteRequest.inviteStatus === 'requested_to_be_invited' ? (
+          inviteRequest.inviterName && (
             <Tooltip
               title={t(
                 'An existing member has asked to invite this user to your organization'
               )}
             >
               <Description>
-                {tct('Requested by [inviterName]', {inviterName})}
+                {tct('Requested by [inviterName]', {
+                  inviterName: inviteRequest.inviterName,
+                })}
               </Description>
             </Tooltip>
           )
@@ -60,7 +62,7 @@ const InviteRequestRow = ({
           </Tooltip>
         )}
       </div>
-      <div>{roleName}</div>
+      <div>{inviteRequest.roleName}</div>
       <ButtonGroup>
         <Confirm
           onConfirm={sendInvites}
@@ -68,20 +70,24 @@ const InviteRequestRow = ({
           message={
             <React.Fragment>
               {tct('Are you sure you want to invite [email] to your organization?', {
-                email,
+                email: inviteRequest.email,
               })}
               {headerInfo}
             </React.Fragment>
           }
         >
-          <Button priority="primary" size="small" busy={inviteRequestBusy[id]}>
+          <Button
+            priority="primary"
+            size="small"
+            busy={inviteRequestBusy[inviteRequest.id]}
+          >
             {t('Approve')}
           </Button>
         </Confirm>
         <Button
           size="small"
-          busy={inviteRequestBusy[id]}
-          onClick={() => onDeny(id, email)}
+          busy={inviteRequestBusy[inviteRequest.id]}
+          onClick={() => onDeny(inviteRequest)}
         >
           {t('Deny')}
         </Button>
@@ -93,7 +99,7 @@ const InviteRequestRow = ({
     <InviteModalHook
       willInvite
       organization={organization}
-      onSendInvites={() => onApprove(id, email)}
+      onSendInvites={() => onApprove(inviteRequest)}
     >
       {hookRenderer}
     </InviteModalHook>
@@ -106,6 +112,7 @@ InviteRequestRow.propTypes = {
     id: PropTypes.string,
     inviterName: PropTypes.string,
     inviteStatus: PropTypes.string,
+    roleName: PropTypes.string,
   }),
   onApprove: PropTypes.func,
   onDeny: PropTypes.func,
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx
index 2dbfe771ae..65507c6fa4 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx
@@ -5,6 +5,7 @@ import {openInviteMembersModal} from 'app/actionCreators/modal';
 import {OrganizationDetailed} from 'app/types';
 import {Panel} from 'app/components/panels';
 import {t} from 'app/locale';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
 import AsyncView from 'app/views/asyncView';
 import Badge from 'app/components/badge';
 import Button from 'app/components/button';
@@ -22,6 +23,19 @@ type Props = AsyncView['props'] & {
 };
 
 class OrganizationMembersWrapper extends AsyncView<Props> {
+  componentDidMount() {
+    const {organization} = this.props;
+
+    // record when requests tab is viewed on members page
+    if (this.showInviteRequests && !this.onRequestsTab) {
+      trackAnalyticsEvent({
+        eventKey: 'invite_request.tab_viewed',
+        eventName: 'Invite Request Tab Viewed',
+        organization_id: organization.id,
+      });
+    }
+  }
+
   getEndpoints(): [string, string][] {
     const {orgId} = this.props.params;
 
@@ -48,6 +62,10 @@ class OrganizationMembersWrapper extends AsyncView<Props> {
     );
   }
 
+  get onRequestsTab() {
+    return location.pathname.includes('/requests/');
+  }
+
   get hasWriteAccess() {
     const {organization} = this.props;
     if (!organization || !organization.access) {
@@ -66,7 +84,7 @@ class OrganizationMembersWrapper extends AsyncView<Props> {
     // show the requests tab if there are pending team requests,
     // or if the organization is exposed to the experiment and
     // the user has access to approve or deny requests
-    return requestList.length > 0 || this.showInviteRequests;
+    return (requestList && requestList.length > 0) || this.showInviteRequests;
   }
 
   get requestCount() {
@@ -96,6 +114,7 @@ class OrganizationMembersWrapper extends AsyncView<Props> {
   renderBody() {
     const {
       children,
+      organization,
       params: {orgId},
     } = this.props;
     const {requestList, inviteRequests} = this.state;
@@ -131,15 +150,23 @@ class OrganizationMembersWrapper extends AsyncView<Props> {
           <NavTabs underlined>
             <ListLink
               to={`/settings/${orgId}/members/`}
-              isActive={() => !location.pathname.includes('/requests/')}
+              isActive={() => !this.onRequestsTab}
               data-test-id="members-tab"
             >
               {t('Members')}
             </ListLink>
             <ListLink
               to={`/settings/${orgId}/members/requests/`}
-              isActive={() => location.pathname.includes('/requests/')}
+              isActive={() => this.onRequestsTab}
               data-test-id="requests-tab"
+              onClick={() => {
+                this.showInviteRequests &&
+                  trackAnalyticsEvent({
+                    eventKey: 'invite_request.tab_clicked',
+                    eventName: 'Invite Request Tab Clicked',
+                    organization_id: organization.id,
+                  });
+              }}
             >
               {t('Requests')}
             </ListLink>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx
index 4b34026b57..4101a6595c 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx
@@ -6,6 +6,7 @@ import {AccessRequest, Member, Organization} from 'app/types';
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {t, tct} from 'app/locale';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
@@ -51,6 +52,16 @@ class OrganizationRequestsView extends React.Component<Props, State> {
     this.handleRedirect();
   }
 
+  componentDidMount() {
+    const {organization, showInviteRequests} = this.props;
+    showInviteRequests &&
+      trackAnalyticsEvent({
+        eventKey: 'invite_request.page_viewed',
+        eventName: 'Invite Request Page Viewed',
+        organization_id: organization.id,
+      });
+  }
+
   componentDidUpdate() {
     this.handleRedirect();
   }
@@ -67,47 +78,76 @@ class OrganizationRequestsView extends React.Component<Props, State> {
     return router.push(`/settings/${params.orgId}/members/`);
   }
 
-  handleAction = async ({id, method, data, successMessage, errorMessage}) => {
-    const {api, params, onUpdateInviteRequests} = this.props;
+  handleAction = async ({
+    inviteRequest,
+    method,
+    data,
+    successMessage,
+    errorMessage,
+    eventKey,
+    eventName,
+  }) => {
+    const {api, params, organization, onUpdateInviteRequests} = this.props;
 
     this.setState(state => ({
-      inviteRequestBusy: {...state.inviteRequestBusy, [id]: true},
+      inviteRequestBusy: {...state.inviteRequestBusy, [inviteRequest.id]: true},
     }));
 
     try {
-      await api.requestPromise(`/organizations/${params.orgId}/invite-requests/${id}/`, {
-        method,
-        data,
-      });
-      onUpdateInviteRequests(id);
+      await api.requestPromise(
+        `/organizations/${params.orgId}/invite-requests/${inviteRequest.id}/`,
+        {
+          method,
+          data,
+        }
+      );
+
+      onUpdateInviteRequests(inviteRequest.id);
       addSuccessMessage(successMessage);
+      trackAnalyticsEvent({
+        eventKey,
+        eventName,
+        organization_id: organization.id,
+        member_id: parseInt(inviteRequest.id, 10),
+        invite_status: inviteRequest.inviteStatus,
+      });
     } catch (err) {
       addErrorMessage(errorMessage);
       throw err;
     }
 
     this.setState(state => ({
-      inviteRequestBusy: {...state.inviteRequestBusy, [id]: false},
+      inviteRequestBusy: {...state.inviteRequestBusy, [inviteRequest.id]: false},
     }));
   };
 
-  handleApprove = (id: string, email: string) =>
+  handleApprove = (inviteRequest: Member) => {
     this.handleAction({
-      id,
+      inviteRequest,
       method: 'PUT',
       data: {approve: 1},
-      successMessage: tct('[email] has been invited', {email}),
-      errorMessage: tct('Error inviting [email]', {email}),
+      successMessage: tct('[email] has been invited', {email: inviteRequest.email}),
+      errorMessage: tct('Error inviting [email]', {email: inviteRequest.email}),
+      eventKey: 'invite_request.approved',
+      eventName: 'Invite Request Approved',
     });
+  };
 
-  handleDeny = (id: string, email: string) =>
+  handleDeny = (inviteRequest: Member) => {
     this.handleAction({
-      id,
+      inviteRequest,
       method: 'DELETE',
       data: {},
-      successMessage: tct('Invite request for [email] denied', {email}),
-      errorMessage: tct('Error denying invite request for [email]', {email}),
+      successMessage: tct('Invite request for [email] denied', {
+        email: inviteRequest.email,
+      }),
+      errorMessage: tct('Error denying invite request for [email]', {
+        email: inviteRequest.email,
+      }),
+      eventKey: 'invite_request.denied',
+      eventName: 'Invite Request Denied',
     });
+  };
 
   render() {
     const {
diff --git a/tests/js/spec/views/settings/organizationMembers/inviteRequestRow.spec.jsx b/tests/js/spec/views/settings/organizationMembers/inviteRequestRow.spec.jsx
index c45ee10a56..eac1962931 100644
--- a/tests/js/spec/views/settings/organizationMembers/inviteRequestRow.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/inviteRequestRow.spec.jsx
@@ -67,7 +67,7 @@ describe('InviteRequestRow', function() {
 
     wrapper.find('button[aria-label="Approve"]').simulate('click');
     wrapper.find('button[aria-label="Confirm"]').simulate('click');
-    expect(mockApprove).toHaveBeenCalledWith(inviteRequest.id, inviteRequest.email);
+    expect(mockApprove).toHaveBeenCalledWith(inviteRequest);
     expect(mockDeny).not.toHaveBeenCalled();
   });
 
@@ -86,7 +86,7 @@ describe('InviteRequestRow', function() {
     );
 
     wrapper.find('button[aria-label="Deny"]').simulate('click');
-    expect(mockDeny).toHaveBeenCalledWith(inviteRequest.id, inviteRequest.email);
+    expect(mockDeny).toHaveBeenCalledWith(inviteRequest);
     expect(mockApprove).not.toHaveBeenCalled();
   });
 });
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx
index 1ad300fed0..e79802ef5a 100644
--- a/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx
@@ -2,9 +2,13 @@ import React from 'react';
 import {mountWithTheme} from 'sentry-test/enzyme';
 
 import {openInviteMembersModal} from 'app/actionCreators/modal';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
 import OrganizationMembers from 'app/views/settings/organizationMembers';
 import OrganizationMembersWrapper from 'app/views/settings/organizationMembers/organizationMembersWrapper';
 
+jest.mock('app/utils/analytics', () => ({
+  trackAnalyticsEvent: jest.fn(),
+}));
 jest.mock('app/actionCreators/modal', () => ({
   openInviteMembersModal: jest.fn(),
 }));
@@ -35,6 +39,7 @@ describe('OrganizationMembersWrapper', function() {
   });
 
   beforeEach(function() {
+    trackAnalyticsEvent.mockClear();
     MockApiClient.clearMockResponses();
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/invite-requests/',
@@ -82,6 +87,7 @@ describe('OrganizationMembersWrapper', function() {
     );
 
     expect(wrapper.find('NavTabs').exists()).toBe(false);
+    expect(trackAnalyticsEvent).not.toHaveBeenCalled();
   });
 
   it('renders requests tab with InviteRequestExperiment', function() {
@@ -107,6 +113,19 @@ describe('OrganizationMembersWrapper', function() {
     expect(wrapper.find('Badge[text="2"]').exists()).toBe(true);
     expect(wrapper.find('ListLink[data-test-id="members-tab"]').exists()).toBe(true);
     expect(wrapper.find('ListLink[data-test-id="requests-tab"]').exists()).toBe(true);
+
+    expect(trackAnalyticsEvent).toHaveBeenCalledWith({
+      eventKey: 'invite_request.tab_viewed',
+      eventName: 'Invite Request Tab Viewed',
+      organization_id: org.id,
+    });
+
+    wrapper.find('a[data-test-id="requests-tab"]').simulate('click');
+    expect(trackAnalyticsEvent).toHaveBeenCalledWith({
+      eventKey: 'invite_request.tab_clicked',
+      eventName: 'Invite Request Tab Clicked',
+      organization_id: org.id,
+    });
   });
 
   it('renders requests tab with JoinRequestExperiment', function() {
@@ -144,6 +163,8 @@ describe('OrganizationMembersWrapper', function() {
     expect(wrapper.find('NavTabs').exists()).toBe(true);
     expect(wrapper.find('ListLink[data-test-id="members-tab"]').exists()).toBe(true);
     expect(wrapper.find('ListLink[data-test-id="requests-tab"]').exists()).toBe(true);
+
+    expect(trackAnalyticsEvent).not.toHaveBeenCalled();
   });
 
   it('renders requests tab with team requests and no access', function() {
@@ -173,6 +194,8 @@ describe('OrganizationMembersWrapper', function() {
     expect(wrapper.find('Badge[text="1"]').exists()).toBe(true);
     expect(wrapper.find('ListLink[data-test-id="members-tab"]').exists()).toBe(true);
     expect(wrapper.find('ListLink[data-test-id="requests-tab"]').exists()).toBe(true);
+
+    expect(trackAnalyticsEvent).not.toHaveBeenCalled();
   });
 
   it('can invite member', function() {
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationRequestsView.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationRequestsView.spec.jsx
index 5f0f84d3d8..658cda7868 100644
--- a/tests/js/spec/views/settings/organizationMembers/organizationRequestsView.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/organizationRequestsView.spec.jsx
@@ -1,9 +1,14 @@
 import React from 'react';
 import {mountWithTheme} from 'sentry-test/enzyme';
 
+import {trackAnalyticsEvent} from 'app/utils/analytics';
 import OrganizationRequestsView from 'app/views/settings/organizationMembers/organizationRequestsView';
 import OrganizationMembersWrapper from 'app/views/settings/organizationMembers/organizationMembersWrapper';
 
+jest.mock('app/utils/analytics', () => ({
+  trackAnalyticsEvent: jest.fn(),
+}));
+
 describe('OrganizationRequestsView', function() {
   const organization = TestStubs.Organization({
     access: ['member:admin', 'org:admin', 'member:write'],
@@ -33,6 +38,7 @@ describe('OrganizationRequestsView', function() {
   });
 
   beforeEach(function() {
+    trackAnalyticsEvent.mockClear();
     MockApiClient.clearMockResponses();
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/invite-requests/',
@@ -59,6 +65,7 @@ describe('OrganizationRequestsView', function() {
     );
 
     expect(wrapper.find('PanelHeader').exists()).toBe(false);
+    expect(trackAnalyticsEvent).not.toHaveBeenCalled();
   });
 
   it('can approve access request and update', async function() {
@@ -98,6 +105,8 @@ describe('OrganizationRequestsView', function() {
 
     expect(wrapper.find('[data-test-id="request-message"]').exists()).toBe(false);
     expect(wrapper.find('NavTabs').exists()).toBe(false);
+
+    expect(trackAnalyticsEvent).not.toHaveBeenCalled();
   });
 
   it('can deny access request and update', async function() {
@@ -130,6 +139,8 @@ describe('OrganizationRequestsView', function() {
 
     expect(wrapper.find('[data-test-id="request-message"]').exists()).toBe(false);
     expect(wrapper.find('NavTabs').exists()).toBe(false);
+
+    expect(trackAnalyticsEvent).not.toHaveBeenCalled();
   });
 
   it('does not render invite requests without experiment', function() {
@@ -157,6 +168,8 @@ describe('OrganizationRequestsView', function() {
     expect(wrapper.find('NavTabs').exists()).toBe(true);
     expect(wrapper.find('Badge[text="1"]').exists()).toBe(true);
     expect(wrapper.find('InviteRequestRow').exists()).toBe(false);
+
+    expect(trackAnalyticsEvent).not.toHaveBeenCalled();
   });
 
   it('does not render invite requests without access', function() {
@@ -189,6 +202,8 @@ describe('OrganizationRequestsView', function() {
     expect(wrapper.find('NavTabs').exists()).toBe(true);
     expect(wrapper.find('Badge[text="1"]').exists()).toBe(true);
     expect(wrapper.find('InviteRequestRow').exists()).toBe(false);
+
+    expect(trackAnalyticsEvent).not.toHaveBeenCalled();
   });
 
   it('can approve invite request and update', async function() {
@@ -236,6 +251,20 @@ describe('OrganizationRequestsView', function() {
     expect(wrapper.find('NavTabs').exists()).toBe(true);
     expect(wrapper.find('Badge').exists()).toBe(false);
     expect(wrapper.find('InviteRequestRow').exists()).toBe(false);
+
+    expect(trackAnalyticsEvent).toHaveBeenCalledWith({
+      eventKey: 'invite_request.page_viewed',
+      eventName: 'Invite Request Page Viewed',
+      organization_id: org.id,
+    });
+
+    expect(trackAnalyticsEvent).toHaveBeenCalledWith({
+      eventKey: 'invite_request.approved',
+      eventName: 'Invite Request Approved',
+      organization_id: org.id,
+      invite_status: inviteRequest.inviteStatus,
+      member_id: parseInt(inviteRequest.id, 10),
+    });
   });
 
   it('can deny invite request and update', async function() {
@@ -282,5 +311,19 @@ describe('OrganizationRequestsView', function() {
     expect(wrapper.find('NavTabs').exists()).toBe(true);
     expect(wrapper.find('Badge').exists()).toBe(false);
     expect(wrapper.find('InviteRequestRow').exists()).toBe(false);
+
+    expect(trackAnalyticsEvent).toHaveBeenCalledWith({
+      eventKey: 'invite_request.page_viewed',
+      eventName: 'Invite Request Page Viewed',
+      organization_id: org.id,
+    });
+
+    expect(trackAnalyticsEvent).toHaveBeenCalledWith({
+      eventKey: 'invite_request.denied',
+      eventName: 'Invite Request Denied',
+      organization_id: org.id,
+      invite_status: joinRequest.inviteStatus,
+      member_id: parseInt(joinRequest.id, 10),
+    });
   });
 });
