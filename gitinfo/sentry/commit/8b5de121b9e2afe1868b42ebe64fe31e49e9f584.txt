commit 8b5de121b9e2afe1868b42ebe64fe31e49e9f584
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Oct 8 09:47:49 2019 -0700

    test(tagstore): Run tests with SnubaCompatibilityTagStorage backend (#14778)
    
    This is the first step to removing the LegacyTagStorage tagstore backend. We do not use this backend anymore except for running tests, and it will not work properly when we deprecate the Postgres events table.

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 0eab93fbc3..337932f58a 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1056,7 +1056,9 @@ _SENTRY_TAGSTORE_DEFAULT_MULTI_OPTIONS = {
     "backends": [("sentry.tagstore.legacy.LegacyTagStorage", {})],
     "runner": "ImmediateRunner",
 }
-SENTRY_TAGSTORE = os.environ.get("SENTRY_TAGSTORE", "sentry.tagstore.legacy.LegacyTagStorage")
+SENTRY_TAGSTORE = os.environ.get(
+    "SENTRY_TAGSTORE", "sentry.tagstore.snuba.SnubaCompatibilityTagStorage"
+)
 SENTRY_TAGSTORE_OPTIONS = (
     _SENTRY_TAGSTORE_DEFAULT_MULTI_OPTIONS
     if "SENTRY_TAGSTORE_DEFAULT_MULTI_OPTIONS" in os.environ
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index e9109afa84..1913e8f75c 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -100,7 +100,6 @@ def pytest_configure(config):
 
     if os.environ.get("USE_SNUBA", False):
         settings.SENTRY_SEARCH = "sentry.search.snuba.SnubaSearchBackend"
-        settings.SENTRY_TAGSTORE = "sentry.tagstore.snuba.SnubaCompatibilityTagStorage"
         settings.SENTRY_TSDB = "sentry.tsdb.redissnuba.RedisSnubaTSDB"
         settings.SENTRY_EVENTSTREAM = "sentry.eventstream.snuba.SnubaEventStream"
 
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index 80a1439dcf..fba7ed3e9f 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -7,7 +7,6 @@ from base64 import b64encode
 from datetime import timedelta
 from django.utils import timezone
 
-from sentry import tagstore
 from sentry.models import (
     Activity,
     ApiKey,
@@ -67,18 +66,9 @@ class GroupDetailsTest(APITestCase):
     def test_with_first_release(self):
         self.login_as(user=self.user)
 
-        group = self.create_group()
-        release = Release.objects.create(
-            organization_id=group.project.organization_id, version="1.0"
-        )
-        release.add_project(group.project)
-        tagstore.create_group_tag_value(
-            group_id=group.id,
-            project_id=group.project_id,
-            environment_id=self.environment.id,
-            key="sentry:release",
-            value=release.version,
-        )
+        event = self.store_event(data={"release": "1.0"}, project_id=self.project.id)
+
+        group = event.group
 
         url = u"/api/0/issues/{}/".format(group.id)
 
@@ -86,7 +76,7 @@ class GroupDetailsTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert response.data["id"] == six.text_type(group.id)
-        assert response.data["firstRelease"]["version"] == release.version
+        assert response.data["firstRelease"]["version"] == "1.0"
 
     def test_pending_delete_pending_merge_excluded(self):
         group1 = self.create_group(status=GroupStatus.PENDING_DELETION)
diff --git a/tests/sentry/api/endpoints/test_group_tagkey_details.py b/tests/sentry/api/endpoints/test_group_tagkey_details.py
index 64c054266b..97d65e62c8 100644
--- a/tests/sentry/api/endpoints/test_group_tagkey_details.py
+++ b/tests/sentry/api/endpoints/test_group_tagkey_details.py
@@ -2,43 +2,29 @@ from __future__ import absolute_import
 
 import six
 
-from sentry import tagstore
-from sentry.testutils import APITestCase
+from sentry.models import Group
+from sentry.testutils import APITestCase, SnubaTestCase
+from sentry.testutils.helpers.datetime import iso_format, before_now
 
 
-class GroupTagDetailsTest(APITestCase):
+class GroupTagDetailsTest(APITestCase, SnubaTestCase):
     def test_simple(self):
-        group = self.create_group()
-        group.data["tags"] = (["foo", "bar"],)
-        group.save()
+        for i in xrange(3):
+            self.store_event(
+                data={
+                    "tags": {"foo": "bar"},
+                    "fingerprint": ["group1"],
+                    "timestamp": iso_format(before_now(seconds=1)),
+                },
+                project_id=self.project.id,
+            )
 
-        key, value = group.data["tags"][0]
-        tagkey = tagstore.create_tag_key(
-            project_id=group.project_id, environment_id=None, key=key, values_seen=2
-        )
-        tagstore.create_tag_value(
-            project_id=group.project_id, environment_id=None, key=key, value=value, times_seen=4
-        )
-        tagstore.create_group_tag_key(
-            project_id=group.project_id,
-            group_id=group.id,
-            environment_id=None,
-            key=key,
-            values_seen=1,
-        )
-        tagstore.create_group_tag_value(
-            project_id=group.project_id,
-            group_id=group.id,
-            environment_id=None,
-            key=key,
-            value=value,
-            times_seen=3,
-        )
+        group = Group.objects.first()
 
         self.login_as(user=self.user)
 
-        url = u"/api/0/issues/{}/tags/{}/".format(group.id, tagkey.key)
+        url = u"/api/0/issues/{}/tags/{}/".format(group.id, "foo")
         response = self.client.get(url, format="json")
         assert response.status_code == 200, response.content
-        assert response.data["key"] == six.text_type(tagkey.key)
+        assert response.data["key"] == six.text_type("foo")
         assert response.data["totalValues"] == 3
diff --git a/tests/sentry/api/endpoints/test_group_tagkey_values.py b/tests/sentry/api/endpoints/test_group_tagkey_values.py
index ac7dcd998a..cf0473ed28 100644
--- a/tests/sentry/api/endpoints/test_group_tagkey_values.py
+++ b/tests/sentry/api/endpoints/test_group_tagkey_values.py
@@ -1,21 +1,20 @@
 from __future__ import absolute_import
 
-from sentry import tagstore
-from sentry.models import EventUser
-from sentry.testutils import APITestCase
+from sentry.testutils import APITestCase, SnubaTestCase
+from sentry.testutils.helpers.datetime import iso_format, before_now
 
 
-class GroupTagKeyValuesTest(APITestCase):
+class GroupTagKeyValuesTest(APITestCase, SnubaTestCase):
     def test_simple(self):
         key, value = "foo", "bar"
 
         project = self.create_project()
-        group = self.create_group(project=project)
-        tagstore.create_tag_key(project_id=project.id, environment_id=None, key=key)
-        tagstore.create_tag_value(project_id=project.id, environment_id=None, key=key, value=value)
-        tagstore.create_group_tag_value(
-            project_id=project.id, group_id=group.id, environment_id=None, key=key, value=value
+
+        event = self.store_event(
+            data={"tags": {key: value}, "timestamp": iso_format(before_now(seconds=1))},
+            project_id=project.id,
         )
+        group = event.group
 
         self.login_as(user=self.user)
 
@@ -30,25 +29,19 @@ class GroupTagKeyValuesTest(APITestCase):
 
     def test_user_tag(self):
         project = self.create_project()
-        group = self.create_group(project=project)
-        euser = EventUser.objects.create(
-            project_id=project.id,
-            ident="1",
-            email="foo@example.com",
-            username="foo",
-            ip_address="127.0.0.1",
-        )
-        tagstore.create_tag_key(project_id=project.id, environment_id=None, key="sentry:user")
-        tagstore.create_tag_value(
-            project_id=project.id, environment_id=None, key="sentry:user", value=euser.tag_value
-        )
-        tagstore.create_group_tag_value(
+        event = self.store_event(
+            data={
+                "user": {
+                    "id": 1,
+                    "email": "foo@example.com",
+                    "username": "foo",
+                    "ip_address": "127.0.0.1",
+                },
+                "timestamp": iso_format(before_now(seconds=1)),
+            },
             project_id=project.id,
-            group_id=group.id,
-            environment_id=None,
-            key="sentry:user",
-            value=euser.tag_value,
         )
+        group = event.group
 
         self.login_as(user=self.user)
 
@@ -60,4 +53,4 @@ class GroupTagKeyValuesTest(APITestCase):
         assert len(response.data) == 1
 
         assert response.data[0]["email"] == "foo@example.com"
-        assert response.data[0]["value"] == euser.tag_value
+        assert response.data[0]["value"] == "id:1"
diff --git a/tests/sentry/api/endpoints/test_group_tags.py b/tests/sentry/api/endpoints/test_group_tags.py
index 18ae9d587c..7a0a1e6f32 100644
--- a/tests/sentry/api/endpoints/test_group_tags.py
+++ b/tests/sentry/api/endpoints/test_group_tags.py
@@ -1,59 +1,45 @@
 from __future__ import absolute_import
 
-from sentry import tagstore
-from sentry.testutils import APITestCase
-
-
-class GroupTagsTest(APITestCase):
-    def _create_tags(self, group, environment_id=None):
-        for key, values in group.data["tags"]:
-            tagstore.create_tag_key(
-                project_id=group.project_id, environment_id=environment_id, key=key
-            )
-            tagstore.create_group_tag_key(
-                project_id=group.project_id,
-                group_id=group.id,
-                environment_id=environment_id,
-                key=key,
-            )
-
-            if not isinstance(values, list):
-                values = [values]
-            for value in values:
-                tagstore.create_tag_value(
-                    project_id=group.project_id, environment_id=environment_id, key=key, value=value
-                )
-                tagstore.create_group_tag_value(
-                    project_id=group.project_id,
-                    group_id=group.id,
-                    environment_id=environment_id,
-                    key=key,
-                    value=value,
-                )
+from sentry.testutils import APITestCase, SnubaTestCase
+from sentry.testutils.helpers.datetime import iso_format, before_now
 
+
+class GroupTagsTest(APITestCase, SnubaTestCase):
     def test_simple(self):
-        this_group = self.create_group()
-        this_group.data["tags"] = (
-            ["foo", ["bar", "quux"]],
-            ["biz", "baz"],
-            ["sentry:release", "releaseme"],
+        event1 = self.store_event(
+            data={
+                "fingerprint": ["group-1"],
+                "tags": {"foo": "bar", "biz": "baz"},
+                "release": "releaseme",
+                "timestamp": iso_format(before_now(minutes=1)),
+            },
+            project_id=self.project.id,
+        )
+        self.store_event(
+            data={
+                "fingerprint": ["group-1"],
+                "tags": {"foo": "quux"},
+                "release": "releaseme",
+                "timestamp": iso_format(before_now(minutes=1)),
+            },
+            project_id=self.project.id,
         )
 
-        this_group.save()
-
-        other_group = self.create_group()
-        other_group.data["tags"] = (["abc", "xyz"],)
-        other_group.save()
-
-        for group in (this_group, other_group):
-            self._create_tags(group)
+        self.store_event(
+            data={
+                "fingerprint": ["group-2"],
+                "tags": {"abc": "xyz"},
+                "timestamp": iso_format(before_now(minutes=1)),
+            },
+            project_id=self.project.id,
+        )
 
         self.login_as(user=self.user)
 
-        url = u"/api/0/issues/{}/tags/".format(this_group.id)
+        url = u"/api/0/issues/{}/tags/".format(event1.group.id)
         response = self.client.get(url, format="json")
         assert response.status_code == 200, response.content
-        assert len(response.data) == 3
+        assert len(response.data) == 4
 
         data = sorted(response.data, key=lambda r: r["key"])
         assert data[0]["key"] == "biz"
@@ -62,11 +48,14 @@ class GroupTagsTest(APITestCase):
         assert data[1]["key"] == "foo"
         assert len(data[1]["topValues"]) == 2
 
-        assert data[2]["key"] == "release"  # Formatted from sentry:release
+        assert data[2]["key"] == "level"
         assert len(data[2]["topValues"]) == 1
 
+        assert data[3]["key"] == "release"  # Formatted from sentry:release
+        assert len(data[3]["topValues"]) == 1
+
         # Use the key= queryparam to grab results for specific tags
-        url = u"/api/0/issues/{}/tags/?key=foo&key=sentry:release".format(this_group.id)
+        url = u"/api/0/issues/{}/tags/?key=foo&key=sentry:release".format(event1.group.id)
         response = self.client.get(url, format="json")
         assert response.status_code == 200, response.content
         assert len(response.data) == 2
@@ -88,15 +77,52 @@ class GroupTagsTest(APITestCase):
         assert response.status_code == 404
 
     def test_valid_env(self):
-        group = self.create_group()
-        group.data["tags"] = (["foo", "bar"], ["biz", "baz"])
-        group.save()
-
-        env = self.create_environment(project=group.project)
-        self._create_tags(group, environment_id=env.id)
+        event = self.store_event(
+            data={
+                "tags": {"foo": "bar", "biz": "baz"},
+                "environment": "prod",
+                "timestamp": iso_format(before_now(minutes=1)),
+            },
+            project_id=self.project.id,
+        )
+        group = event.group
 
         self.login_as(user=self.user)
         url = u"/api/0/issues/{}/tags/".format(group.id)
-        response = self.client.get(url, {"environment": env.name}, format="json")
+        response = self.client.get(url, {"environment": "prod"}, format="json")
         assert response.status_code == 200
-        assert len(response.data) == 2
+        assert len(response.data) == 4
+        assert set([tag["key"] for tag in response.data]) == set(
+            ["foo", "biz", "environment", "level"]
+        )
+
+    def test_multi_env(self):
+        min_ago = before_now(minutes=1)
+        env = self.create_environment(project=self.project, name="prod")
+        env2 = self.create_environment(project=self.project, name="staging")
+        self.store_event(
+            data={
+                "fingerprint": ["put-me-in-group1"],
+                "timestamp": iso_format(min_ago),
+                "environment": env.name,
+                "tags": {"foo": "bar"},
+            },
+            project_id=self.project.id,
+        )
+        event2 = self.store_event(
+            data={
+                "fingerprint": ["put-me-in-group1"],
+                "timestamp": iso_format(min_ago),
+                "environment": env2.name,
+                "tags": {"biz": "baz"},
+            },
+            project_id=self.project.id,
+        )
+
+        self.login_as(user=self.user)
+        url = u"/api/0/issues/{}/tags/?enable_snuba=1".format(event2.group.id)
+        response = self.client.get(
+            "%s&environment=%s&environment=%s" % (url, env.name, env2.name), format="json"
+        )
+        assert response.status_code == 200
+        assert set([tag["key"] for tag in response.data]) >= set(["biz", "environment", "foo"])
diff --git a/tests/sentry/api/endpoints/test_organization_user_issues.py b/tests/sentry/api/endpoints/test_organization_user_issues.py
index 069f81cbe7..671d95f828 100644
--- a/tests/sentry/api/endpoints/test_organization_user_issues.py
+++ b/tests/sentry/api/endpoints/test_organization_user_issues.py
@@ -2,16 +2,14 @@ from __future__ import absolute_import
 
 import six
 
-from datetime import timedelta
 from django.core.urlresolvers import reverse
-from django.utils import timezone
 
-from sentry import tagstore
 from sentry.models import EventUser, OrganizationMemberTeam
-from sentry.testutils import APITestCase
+from sentry.testutils import APITestCase, SnubaTestCase
+from sentry.testutils.helpers.datetime import iso_format, before_now
 
 
-class OrganizationUserIssuesTest(APITestCase):
+class OrganizationUserIssuesTest(APITestCase, SnubaTestCase):
     def setUp(self):
         super(OrganizationUserIssuesTest, self).setUp()
         self.org = self.create_organization()
@@ -21,36 +19,42 @@ class OrganizationUserIssuesTest(APITestCase):
         self.team2 = self.create_team(organization=self.org)
         self.project1 = self.create_project(teams=[self.team1])
         self.project2 = self.create_project(teams=[self.team2])
-        self.group1 = self.create_group(
-            project=self.project1, last_seen=timezone.now() - timedelta(minutes=1)
-        )
-        self.group2 = self.create_group(project=self.project2)
-
-        self.euser1 = EventUser.objects.create(email="foo@example.com", project_id=self.project1.id)
-        self.euser2 = EventUser.objects.create(email="bar@example.com", project_id=self.project1.id)
-        self.euser3 = EventUser.objects.create(email="foo@example.com", project_id=self.project2.id)
 
-        tagstore.create_group_tag_value(
-            key="sentry:user",
-            value=self.euser1.tag_value,
-            group_id=self.group1.id,
+        event1 = self.store_event(
+            data={
+                "fingerprint": ["group1"],
+                "timestamp": iso_format(before_now(seconds=3)),
+                "user": {"email": "foo@example.com"},
+            },
             project_id=self.project1.id,
-            environment_id=None,
         )
-        tagstore.create_group_tag_value(
-            key="sentry:user",
-            value=self.euser2.tag_value,
-            group_id=self.group1.id,
+
+        event2 = self.store_event(
+            data={
+                "fingerprint": ["group2"],
+                "timestamp": iso_format(before_now(seconds=2)),
+                "user": {"email": "bar@example.com"},
+            },
             project_id=self.project1.id,
-            environment_id=None,
         )
-        tagstore.create_group_tag_value(
-            key="sentry:user",
-            value=self.euser3.tag_value,
-            group_id=self.group2.id,
+
+        event3 = self.store_event(
+            data={
+                "fingerprint": ["group3"],
+                "timestamp": iso_format(before_now(seconds=1)),
+                "user": {"email": "foo@example.com"},
+            },
             project_id=self.project2.id,
-            environment_id=None,
         )
+
+        self.group1 = event1.group
+        self.group2 = event2.group
+        self.group3 = event3.group
+
+        self.euser1 = EventUser.objects.get(email="foo@example.com", project_id=self.project1.id)
+        self.euser2 = EventUser.objects.get(email="bar@example.com", project_id=self.project1.id)
+        self.euser3 = EventUser.objects.get(email="foo@example.com", project_id=self.project2.id)
+
         self.path = reverse(
             "sentry-api-0-organization-user-issues", args=[self.org.slug, self.euser1.id]
         )
@@ -86,5 +90,5 @@ class OrganizationUserIssuesTest(APITestCase):
         # now result should include results from team2/project2
         assert response.status_code == 200
         assert len(response.data) == 2
-        assert response.data[0]["id"] == six.text_type(self.group2.id)
+        assert response.data[0]["id"] == six.text_type(self.group3.id)
         assert response.data[1]["id"] == six.text_type(self.group1.id)
diff --git a/tests/sentry/api/endpoints/test_organization_user_issues_search.py b/tests/sentry/api/endpoints/test_organization_user_issues_search.py
index ecca235a21..bf8642dc01 100644
--- a/tests/sentry/api/endpoints/test_organization_user_issues_search.py
+++ b/tests/sentry/api/endpoints/test_organization_user_issues_search.py
@@ -2,53 +2,48 @@ from __future__ import absolute_import
 
 from six.moves.urllib.parse import urlencode
 
-from datetime import timedelta
 from django.core.urlresolvers import reverse
-from django.utils import timezone
 
-from sentry import tagstore
-from sentry.models import EventUser, OrganizationMemberTeam
-from sentry.testutils import APITestCase
+from sentry.models import OrganizationMemberTeam
+from sentry.testutils import APITestCase, SnubaTestCase
+from sentry.testutils.helpers.datetime import iso_format, before_now
 
 
-class OrganizationUserIssuesSearchTest(APITestCase):
+class OrganizationUserIssuesSearchTest(APITestCase, SnubaTestCase):
     def setUp(self):
         super(OrganizationUserIssuesSearchTest, self).setUp()
-        self.org = self.create_organization()
+        self.org = self.create_organization(owner=None)
         self.org.flags.allow_joinleave = False
         self.org.save()
         self.team1 = self.create_team(organization=self.org)
         self.team2 = self.create_team(organization=self.org)
         self.project1 = self.create_project(teams=[self.team1])
         self.project2 = self.create_project(teams=[self.team2])
-        group1 = self.create_group(
-            project=self.project1, last_seen=timezone.now() - timedelta(minutes=1)
-        )
-        group2 = self.create_group(project=self.project2)
-
-        EventUser.objects.create(email="foo@example.com", project_id=self.project1.id)
-        EventUser.objects.create(email="bar@example.com", project_id=self.project1.id)
-        EventUser.objects.create(email="foo@example.com", project_id=self.project2.id)
 
-        tagstore.create_group_tag_value(
-            key="sentry:user",
-            value="email:foo@example.com",
-            group_id=group1.id,
-            environment_id=None,
+        self.store_event(
+            data={
+                "user": {"email": "foo@example.com"},
+                "fingerprint": ["group1"],
+                "timestamp": iso_format(before_now(minutes=1)),
+            },
             project_id=self.project1.id,
         )
-        tagstore.create_group_tag_value(
-            key="sentry:user",
-            value="email:bar@example.com",
-            group_id=group1.id,
-            environment_id=None,
+
+        self.store_event(
+            data={
+                "user": {"email": "bar@example.com"},
+                "fingerprint": ["group1"],
+                "timestamp": iso_format(before_now(minutes=1)),
+            },
             project_id=self.project1.id,
         )
-        tagstore.create_group_tag_value(
-            key="sentry:user",
-            value="email:foo@example.com",
-            group_id=group2.id,
-            environment_id=None,
+
+        self.store_event(
+            data={
+                "user": {"email": "foo@example.com"},
+                "fingerprint": ["group2"],
+                "timestamp": iso_format(before_now(minutes=1)),
+            },
             project_id=self.project2.id,
         )
 
@@ -77,7 +72,6 @@ class OrganizationUserIssuesSearchTest(APITestCase):
 
         url = "%s?%s" % (self.get_url(), urlencode({"email": "foo@example.com"}))
         response = self.client.get(url, format="json")
-
         # result shouldn't include results from team2/project2 or bar@example.com
         assert response.status_code == 200
         assert len(response.data) == 1
@@ -92,5 +86,6 @@ class OrganizationUserIssuesSearchTest(APITestCase):
         # now result should include results from team2/project2
         assert response.status_code == 200
         assert len(response.data) == 2
-        assert response.data[0]["project"]["slug"] == self.project2.slug
-        assert response.data[1]["project"]["slug"] == self.project1.slug
+        assert set([r["project"]["slug"] for r in response.data]) == set(
+            [self.project1.slug, self.project2.slug]
+        )
diff --git a/tests/sentry/api/endpoints/test_project_tagkey_details.py b/tests/sentry/api/endpoints/test_project_tagkey_details.py
index e4589d1ea2..51851691fd 100644
--- a/tests/sentry/api/endpoints/test_project_tagkey_details.py
+++ b/tests/sentry/api/endpoints/test_project_tagkey_details.py
@@ -6,15 +6,25 @@ from django.core.urlresolvers import reverse
 
 from sentry import tagstore
 from sentry.tagstore import TagKeyStatus
-from sentry.testutils import APITestCase
+from sentry.testutils import APITestCase, SnubaTestCase
+from sentry.testutils.helpers.datetime import iso_format, before_now
 
 
-class ProjectTagKeyDetailsTest(APITestCase):
+class ProjectTagKeyDetailsTest(APITestCase, SnubaTestCase):
     def test_simple(self):
         project = self.create_project()
-        tagkey = tagstore.create_tag_key(
-            project_id=project.id, environment_id=None, key="foo", values_seen=16
-        )
+
+        def make_event(i):
+            self.store_event(
+                data={
+                    "tags": {"foo": "val{}".format(i)},
+                    "timestamp": iso_format(before_now(seconds=1)),
+                },
+                project_id=project.id,
+            )
+
+        for i in xrange(0, 16):
+            make_event(i)
 
         self.login_as(user=self.user)
 
@@ -23,22 +33,27 @@ class ProjectTagKeyDetailsTest(APITestCase):
             kwargs={
                 "organization_slug": project.organization.slug,
                 "project_slug": project.slug,
-                "key": tagkey.key,
+                "key": "foo",
             },
         )
 
         response = self.client.get(url)
 
         assert response.status_code == 200
-        assert response.data["uniqueValues"] == tagkey.values_seen
+        assert response.data["uniqueValues"] == 16
 
 
 class ProjectTagKeyDeleteTest(APITestCase):
     @mock.patch("sentry.eventstream")
-    @mock.patch("sentry.tagstore.tasks.delete_tag_key")
-    def test_simple(self, mock_delete_tag_key, mock_eventstream):
+    def test_simple(self, mock_eventstream):
+        key = "foo"
+        val = "bar"
+
         project = self.create_project()
-        tagkey = tagstore.create_tag_key(project_id=project.id, environment_id=None, key="foo")
+        self.store_event(
+            data={"tags": {key: val}, "timestamp": iso_format(before_now(seconds=1))},
+            project_id=project.id,
+        )
 
         self.login_as(user=self.user)
 
@@ -50,7 +65,7 @@ class ProjectTagKeyDeleteTest(APITestCase):
             kwargs={
                 "organization_slug": project.organization.slug,
                 "project_slug": project.slug,
-                "key": tagkey.key,
+                "key": key,
             },
         )
 
@@ -58,25 +73,15 @@ class ProjectTagKeyDeleteTest(APITestCase):
 
         assert response.status_code == 204
 
-        from sentry.tagstore.models import TagKey
-
-        mock_delete_tag_key.delay.assert_called_once_with(object_id=tagkey.id, model=TagKey)
-
-        assert (
-            tagstore.get_tag_key(
-                project.id, None, tagkey.key, status=TagKeyStatus.PENDING_DELETION  # environment_id
-            ).status
-            == TagKeyStatus.PENDING_DELETION
-        )
-
         mock_eventstream.start_delete_tag.assert_called_once_with(project.id, "foo")
         mock_eventstream.end_delete_tag.assert_called_once_with(eventstream_state)
 
     @mock.patch("sentry.tagstore.tasks.delete_tag_key")
     def test_protected(self, mock_delete_tag_key):
         project = self.create_project()
-        tagkey = tagstore.create_tag_key(
-            project_id=project.id, environment_id=None, key="environment"
+        self.store_event(
+            data={"environment": "prod", "timestamp": iso_format(before_now(seconds=1))},
+            project_id=project.id,
         )
 
         self.login_as(user=self.user)
@@ -86,7 +91,7 @@ class ProjectTagKeyDeleteTest(APITestCase):
             kwargs={
                 "organization_slug": project.organization.slug,
                 "project_slug": project.slug,
-                "key": tagkey.key,
+                "key": "environment",
             },
         )
 
@@ -97,7 +102,7 @@ class ProjectTagKeyDeleteTest(APITestCase):
 
         assert (
             tagstore.get_tag_key(
-                project.id, None, tagkey.key, status=TagKeyStatus.VISIBLE  # environment_id
+                project.id, None, "environment", status=TagKeyStatus.VISIBLE  # environment_id
             ).status
             == TagKeyStatus.VISIBLE
         )
diff --git a/tests/sentry/api/endpoints/test_project_tagkey_values.py b/tests/sentry/api/endpoints/test_project_tagkey_values.py
index b4ab534f92..72e8f8984e 100644
--- a/tests/sentry/api/endpoints/test_project_tagkey_values.py
+++ b/tests/sentry/api/endpoints/test_project_tagkey_values.py
@@ -2,16 +2,16 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry import tagstore
-from sentry.testutils import APITestCase
+from sentry.testutils import APITestCase, SnubaTestCase
+from sentry.testutils.helpers.datetime import iso_format, before_now
 
 
-class ProjectTagKeyValuesTest(APITestCase):
+class ProjectTagKeyValuesTest(APITestCase, SnubaTestCase):
     def test_simple(self):
         project = self.create_project()
-        tagkey = tagstore.create_tag_key(project_id=project.id, environment_id=None, key="foo")
-        tagstore.create_tag_value(
-            project_id=project.id, environment_id=None, key="foo", value="bar"
+        self.store_event(
+            data={"tags": {"foo": "bar"}, "timestamp": iso_format(before_now(seconds=1))},
+            project_id=project.id,
         )
 
         self.login_as(user=self.user)
@@ -21,7 +21,7 @@ class ProjectTagKeyValuesTest(APITestCase):
             kwargs={
                 "organization_slug": project.organization.slug,
                 "project_slug": project.slug,
-                "key": tagkey.key,
+                "key": "foo",
             },
         )
 
@@ -34,9 +34,9 @@ class ProjectTagKeyValuesTest(APITestCase):
 
     def test_query(self):
         project = self.create_project()
-        tagkey = tagstore.create_tag_key(project_id=project.id, environment_id=None, key="foo")
-        tagstore.create_tag_value(
-            project_id=project.id, environment_id=None, key="foo", value="bar"
+        self.store_event(
+            data={"tags": {"foo": "bar"}, "timestamp": iso_format(before_now(seconds=1))},
+            project_id=project.id,
         )
 
         self.login_as(user=self.user)
@@ -46,7 +46,7 @@ class ProjectTagKeyValuesTest(APITestCase):
             kwargs={
                 "organization_slug": project.organization.slug,
                 "project_slug": project.slug,
-                "key": tagkey.key,
+                "key": "foo",
             },
         )
         response = self.client.get(url + "?query=bar")
diff --git a/tests/sentry/api/serializers/test_release.py b/tests/sentry/api/serializers/test_release.py
index a27340a3cc..a30cb478cc 100644
--- a/tests/sentry/api/serializers/test_release.py
+++ b/tests/sentry/api/serializers/test_release.py
@@ -2,10 +2,8 @@
 
 from __future__ import absolute_import
 
-import datetime
 import six
 
-from django.utils import timezone
 from uuid import uuid4
 
 from sentry import tagstore
@@ -23,16 +21,19 @@ from sentry.models import (
     User,
     UserEmail,
 )
-from sentry.testutils import TestCase
+from sentry.testutils import SnubaTestCase, TestCase
+from sentry.testutils.helpers.datetime import iso_format, before_now
 
 
-class ReleaseSerializerTest(TestCase):
+class ReleaseSerializerTest(TestCase, SnubaTestCase):
     def test_simple(self):
         user = self.create_user()
         project = self.create_project()
         project2 = self.create_project(organization=project.organization)
+        release_version = uuid4().hex
+
         release = Release.objects.create(
-            organization_id=project.organization_id, version=uuid4().hex
+            organization_id=project.organization_id, version=release_version
         )
         release.add_project(project)
         release.add_project(project2)
@@ -40,44 +41,16 @@ class ReleaseSerializerTest(TestCase):
         ReleaseProject.objects.filter(release=release, project=project).update(new_groups=1)
         ReleaseProject.objects.filter(release=release, project=project2).update(new_groups=1)
 
-        environment = Environment.objects.create(
-            organization_id=project.organization_id, name="prod"
-        )
-        environment.add_project(project)
-        environment.add_project(project2)
-
-        ReleaseProjectEnvironment.objects.create(
+        self.store_event(
+            data={
+                "timestamp": iso_format(before_now(seconds=1)),
+                "release": release_version,
+                "environment": "prod",
+            },
             project_id=project.id,
-            release_id=release.id,
-            environment_id=environment.id,
-            new_issues_count=1,
-        )
-        ReleaseProjectEnvironment.objects.create(
-            project_id=project2.id,
-            release_id=release.id,
-            environment_id=environment.id,
-            new_issues_count=1,
-        )
-        key = "sentry:release"
-        value = release.version
-        tagstore.create_tag_value(
-            project_id=project.id,
-            environment_id=None,
-            key=key,
-            value=value,
-            first_seen=timezone.now(),
-            last_seen=timezone.now(),
-            times_seen=5,
-        )
-        tagstore.create_tag_value(
-            project_id=project2.id,
-            environment_id=None,
-            key=key,
-            value=value,
-            first_seen=timezone.now() - datetime.timedelta(days=2),
-            last_seen=timezone.now() - datetime.timedelta(days=1),
-            times_seen=5,
         )
+
+        release = Release.objects.get(version=release_version)
         commit_author = CommitAuthor.objects.create(
             name="stebe", email="stebe@sentry.io", organization_id=project.organization_id
         )
@@ -103,18 +76,13 @@ class ReleaseSerializerTest(TestCase):
         assert result["version"] == release.version
         # should be sum of all projects
         assert result["newGroups"] == 2
-        # should be tags from all projects
-        tagvalue1 = tagstore.get_tag_value(project.id, None, key, value)
-        tagvalue2 = tagstore.get_tag_value(project2.id, None, key, value)
-        assert result["firstEvent"] == tagvalue2.first_seen
+        tagvalue1 = tagstore.get_tag_value(project.id, None, "sentry:release", release_version)
         assert result["lastEvent"] == tagvalue1.last_seen
         assert result["commitCount"] == 1
         assert result["authors"] == [{"name": "stebe", "email": "stebe@sentry.io"}]
 
         result = serialize(release, user, project=project)
-        # should be groups from one project
         assert result["newGroups"] == 1
-        # should be tags from one project
         assert result["firstEvent"] == tagvalue1.first_seen
         assert result["lastEvent"] == tagvalue1.last_seen
 
diff --git a/tests/sentry/deletions/test_event.py b/tests/sentry/deletions/test_event.py
index 6015584f54..1812fd0723 100644
--- a/tests/sentry/deletions/test_event.py
+++ b/tests/sentry/deletions/test_event.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry import nodestore, tagstore
+from sentry import nodestore
 from sentry.tagstore.models import EventTag
 from sentry.models import Event, EventAttachment, File, ScheduledDeletion, UserReport
 from sentry.tasks.deletion import run_deletion
@@ -23,21 +23,6 @@ class DeleteEventTest(TestCase):
         UserReport.objects.create(
             event_id=event.event_id, project_id=event.project_id, name="Jane Doe"
         )
-        key = "key"
-        value = "value"
-        tk = tagstore.create_tag_key(
-            project_id=project.id, environment_id=self.environment.id, key=key
-        )
-        tv = tagstore.create_tag_value(
-            project_id=project.id, environment_id=self.environment.id, key=key, value=value
-        )
-        tagstore.create_event_tags(
-            event_id=event.id,
-            group_id=group.id,
-            project_id=project.id,
-            environment_id=self.environment.id,
-            tags=[(tk.key, tv.value)],
-        )
         assert nodestore.get(node_id) is not None
         deletion = ScheduledDeletion.schedule(event, days=0)
         deletion.update(in_progress=True)
diff --git a/tests/sentry/deletions/test_group.py b/tests/sentry/deletions/test_group.py
index f60260381f..cbc387850b 100644
--- a/tests/sentry/deletions/test_group.py
+++ b/tests/sentry/deletions/test_group.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 from uuid import uuid4
 
-from sentry import tagstore
 from sentry.tagstore.models import EventTag
 from sentry.models import (
     Event,
@@ -11,35 +10,39 @@ from sentry.models import (
     GroupHash,
     GroupMeta,
     GroupRedirect,
+    GroupStatus,
     ScheduledDeletion,
     UserReport,
 )
 from sentry.tasks.deletion import run_deletion
 from sentry.testutils import TestCase
+from sentry.testutils.helpers.datetime import iso_format, before_now
 
 
 class DeleteGroupTest(TestCase):
     def test_simple(self):
+        key = "key"
+        value = "value"
+
+        event_id = "a" * 32
+        project = self.create_project()
+        event = self.store_event(
+            data={
+                "event_id": event_id,
+                "tags": {key: value},
+                "timestamp": iso_format(before_now(minutes=1)),
+            },
+            project_id=project.id,
+        )
+        group = event.group
+        group.update(status=GroupStatus.PENDING_DELETION)
+
         project = self.create_project()
         group = self.create_group(project=project)
         event = self.create_event(group=group)
 
         UserReport.objects.create(group_id=group.id, project_id=event.project_id, name="Jane Doe")
-        key = "key"
-        value = "value"
-        tk = tagstore.create_tag_key(
-            project_id=project.id, environment_id=self.environment.id, key=key
-        )
-        tv = tagstore.create_tag_value(
-            project_id=project.id, environment_id=self.environment.id, key=key, value=value
-        )
-        tagstore.create_event_tags(
-            event_id=event.id,
-            group_id=group.id,
-            project_id=project.id,
-            environment_id=self.environment.id,
-            tags=[(tk.key, tv.value)],
-        )
+
         GroupAssignee.objects.create(group=group, project=project, user=self.user)
         GroupHash.objects.create(project=project, group=group, hash=uuid4().hex)
         GroupMeta.objects.create(group=group, key="foo", value="bar")
diff --git a/tests/sentry/deletions/test_tagkey.py b/tests/sentry/deletions/test_tagkey.py
deleted file mode 100644
index cc7086aebc..0000000000
--- a/tests/sentry/deletions/test_tagkey.py
+++ /dev/null
@@ -1,97 +0,0 @@
-from __future__ import absolute_import
-
-from sentry import tagstore
-from sentry.tagstore.models import EventTag
-from sentry.models import ScheduledDeletion
-from sentry.tasks.deletion import run_deletion
-from sentry.testutils import TestCase
-
-
-class DeleteTagKeyTest(TestCase):
-    def test_simple(self):
-        team = self.create_team(name="test", slug="test")
-        project = self.create_project(teams=[team], name="test1", slug="test1")
-        group = self.create_group(project=project)
-        key = "foo"
-        value = "bar"
-        tk = tagstore.create_tag_key(
-            key=key, project_id=project.id, environment_id=self.environment.id
-        )
-        tv = tagstore.create_tag_value(
-            key=key, value=value, project_id=project.id, environment_id=self.environment.id
-        )
-        tagstore.create_group_tag_key(
-            key=key, group_id=group.id, project_id=project.id, environment_id=self.environment.id
-        )
-        tagstore.create_group_tag_value(
-            key=key,
-            value=value,
-            group_id=group.id,
-            project_id=project.id,
-            environment_id=self.environment.id,
-        )
-        tagstore.create_event_tags(
-            group_id=group.id,
-            project_id=project.id,
-            event_id=1,
-            environment_id=self.environment.id,
-            tags=[(tk.key, tv.value)],
-        )
-
-        project2 = self.create_project(teams=[team], name="test2")
-        env2 = self.create_environment(project=project2)
-        group2 = self.create_group(project=project2)
-        tk2 = tagstore.create_tag_key(project2.id, env2.id, key)
-        tv2 = tagstore.create_tag_value(
-            key=key, value=value, project_id=project2.id, environment_id=env2.id
-        )
-        tagstore.create_group_tag_key(
-            key=key, group_id=group2.id, project_id=project2.id, environment_id=env2.id
-        )
-        tagstore.create_group_tag_value(
-            key=key, value=value, group_id=group2.id, project_id=project2.id, environment_id=env2.id
-        )
-        tagstore.create_event_tags(
-            group_id=group2.id,
-            project_id=project2.id,
-            environment_id=env2.id,
-            event_id=1,
-            tags=[(tk2.key, tv2.value)],
-        )
-
-        deletion = ScheduledDeletion.schedule(tk, days=0)
-        deletion.update(in_progress=True)
-
-        with self.tasks():
-            run_deletion(deletion.id)
-
-        try:
-            tagstore.get_group_tag_value(
-                group.project_id, group.id, self.environment.id, key, value
-            )
-            assert False  # verify exception thrown
-        except tagstore.GroupTagValueNotFound:
-            pass
-        try:
-            tagstore.get_group_tag_key(group.project_id, group.id, self.environment.id, key)
-            assert False  # verify exception thrown
-        except tagstore.GroupTagKeyNotFound:
-            pass
-        try:
-            tagstore.get_tag_value(project.id, self.environment.id, key, value)
-            assert False  # verify exception thrown
-        except tagstore.TagValueNotFound:
-            pass
-        try:
-            tagstore.get_tag_key(project.id, self.environment.id, key)
-            assert False  # verify exception thrown
-        except tagstore.TagKeyNotFound:
-            pass
-
-        assert tagstore.get_tag_key(project2.id, env2.id, key) is not None
-        assert tagstore.get_group_tag_key(group2.project_id, group2.id, env2.id, key) is not None
-        assert (
-            tagstore.get_group_tag_value(group2.project_id, group2.id, env2.id, key, value)
-            is not None
-        )
-        assert EventTag.objects.filter(key_id=tk2.id).exists()
diff --git a/tests/sentry/lang/java/test_plugin.py b/tests/sentry/lang/java/test_plugin.py
index 00e5c5b4a6..c0dcbe5b39 100644
--- a/tests/sentry/lang/java/test_plugin.py
+++ b/tests/sentry/lang/java/test_plugin.py
@@ -93,12 +93,9 @@ class BasicResolvingIntegrationTest(TestCase):
         with self.assertWriteQueries(
             {
                 "nodestore_node": 2,
-                "sentry_eventtag": 1,
                 "sentry_eventuser": 1,
-                "sentry_filtervalue": 2,
                 "sentry_groupedmessage": 1,
                 "sentry_message": 1,
-                "sentry_messagefiltervalue": 2,
                 "sentry_userip": 1,
                 "sentry_userreport": 1,
             }
diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
index 172f5e8679..5be30fff36 100644
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ b/tests/sentry/lang/javascript/test_plugin.py
@@ -61,12 +61,9 @@ class JavascriptIntegrationTest(TestCase, SnubaTestCase):
         with self.assertWriteQueries(
             {
                 "nodestore_node": 2,
-                "sentry_eventtag": 1,
                 "sentry_eventuser": 1,
-                "sentry_filtervalue": 6,
                 "sentry_groupedmessage": 1,
                 "sentry_message": 1,
-                "sentry_messagefiltervalue": 6,
                 "sentry_userreport": 1,
             },
             debug=True,
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 86ef7b55ce..f732973ab5 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -1,8 +1,5 @@
-# -*- coding: utf-8 -*-
-
 from __future__ import absolute_import
 
-from sentry import tagstore
 from sentry.models import Group, Project, Team, User
 from sentry.testutils import TestCase
 
@@ -14,38 +11,6 @@ class SentryManagerTest(TestCase):
         self.assertEquals(event.message, "foo")
         self.assertEquals(event.project_id, 1)
 
-    def test_add_tags(self):
-        event = Group.objects.from_kwargs(1, message="rrr")
-        group = event.group
-        environment = self.create_environment()
-
-        with self.tasks():
-            Group.objects.add_tags(
-                group, environment, tags=[("foo", "bar"), ("foo", "baz"), ("biz", "boz")]
-            )
-
-        results = sorted(
-            tagstore.get_group_tag_values(
-                group.project_id, group.id, environment_id=None, key="foo"
-            ),
-            key=lambda x: x.value,
-        )
-        assert len(results) == 2
-        res = results[0]
-        self.assertEquals(res.value, "bar")
-        self.assertEquals(res.times_seen, 1)
-        res = results[1]
-        self.assertEquals(res.value, "baz")
-        self.assertEquals(res.times_seen, 1)
-
-        results = tagstore.get_group_tag_values(
-            group.project_id, group.id, environment_id=None, key="biz"
-        )
-        assert len(results) == 1
-        res = list(results)[0]
-        self.assertEquals(res.value, "boz")
-        self.assertEquals(res.times_seen, 1)
-
 
 class TeamManagerTest(TestCase):
     def test_simple(self):
diff --git a/tests/sentry/models/test_group.py b/tests/sentry/models/test_group.py
index 505129fe44..f730db449a 100644
--- a/tests/sentry/models/test_group.py
+++ b/tests/sentry/models/test_group.py
@@ -6,7 +6,6 @@ import pytest
 from django.db.models import ProtectedError
 from django.utils import timezone
 
-from sentry import tagstore
 from sentry.models import (
     Group,
     GroupRedirect,
@@ -15,11 +14,11 @@ from sentry.models import (
     Release,
     get_group_with_redirect,
 )
-from sentry.testutils import TestCase
+from sentry.testutils import SnubaTestCase, TestCase
 from sentry.testutils.helpers.datetime import iso_format, before_now
 
 
-class GroupTest(TestCase):
+class GroupTest(TestCase, SnubaTestCase):
     def setUp(self):
         super(GroupTest, self).setUp()
         self.min_ago = iso_format(before_now(minutes=1))
@@ -174,17 +173,12 @@ class GroupTest(TestCase):
     def test_first_last_release(self):
         project = self.create_project()
         release = Release.objects.create(version="a", organization_id=project.organization_id)
-        release.add_project(project)
-
-        group = self.create_group(project=project, first_release=release)
-
-        tagstore.create_group_tag_value(
-            project_id=project.id,
-            group_id=group.id,
-            environment_id=self.environment.id,
-            key="sentry:release",
-            value=release.version,
+        event = self.store_event(
+            data={"release": "a", "timestamp": self.min_ago}, project_id=project.id
         )
+        group = event.group
+
+        release = Release.objects.get(version="a")
 
         assert group.first_release == release
         assert group.get_first_release() == release.version
@@ -192,22 +186,14 @@ class GroupTest(TestCase):
 
     def test_first_release_from_tag(self):
         project = self.create_project()
-        release = Release.objects.create(version="a", organization_id=project.organization_id)
-        release.add_project(project)
-
-        group = self.create_group(project=project)
-
-        tagstore.create_group_tag_value(
-            project_id=project.id,
-            group_id=group.id,
-            environment_id=self.environment.id,
-            key="sentry:release",
-            value=release.version,
+        event = self.store_event(
+            data={"release": "a", "timestamp": self.min_ago}, project_id=project.id
         )
 
-        assert group.first_release is None
-        assert group.get_first_release() == release.version
-        assert group.get_last_release() == release.version
+        group = event.group
+
+        assert group.get_first_release() == "a"
+        assert group.get_last_release() == "a"
 
     def test_first_last_release_miss(self):
         project = self.create_project()
diff --git a/tests/sentry/models/test_groupsnooze.py b/tests/sentry/models/test_groupsnooze.py
index 4e5c521c00..aacadeaa94 100644
--- a/tests/sentry/models/test_groupsnooze.py
+++ b/tests/sentry/models/test_groupsnooze.py
@@ -6,13 +6,14 @@ import pytest
 
 from datetime import datetime, timedelta
 from django.utils import timezone
-from sentry import tagstore, tsdb
-from sentry.testutils import TestCase
-from sentry.models import GroupSnooze
+from sentry import tsdb
+from sentry.testutils import SnubaTestCase, TestCase
+from sentry.models import Group, GroupSnooze
 from six.moves import xrange
+from sentry.testutils.helpers.datetime import iso_format, before_now
 
 
-class GroupSnoozeTest(TestCase):
+class GroupSnoozeTest(TestCase, SnubaTestCase):
     sequence = itertools.count()  # generates unique values, class scope doesn't matter
 
     def test_until_not_reached(self):
@@ -48,16 +49,20 @@ class GroupSnoozeTest(TestCase):
         assert snooze.is_valid(test_rates=True)
 
     def test_user_delta_reached(self):
-        snooze = GroupSnooze.objects.create(
-            group=self.group, user_count=100, state={"users_seen": 0}
-        )
-        tagstore.create_group_tag_key(
-            project_id=self.group.project_id,
-            group_id=self.group.id,
-            environment_id=None,
-            key="sentry:user",
-            values_seen=100,
-        )
+        project = self.create_project()
+
+        for i in xrange(0, 100):
+            self.store_event(
+                data={
+                    "user": {"id": i},
+                    "timestamp": iso_format(before_now(seconds=1)),
+                    "fingerprint": ["group1"],
+                },
+                project_id=project.id,
+            )
+
+        group = list(Group.objects.all())[-1]
+        snooze = GroupSnooze.objects.create(group=group, user_count=100, state={"users_seen": 0})
         assert not snooze.is_valid(test_rates=True)
 
     @mock.patch("django.utils.timezone.now")
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 7fccca3231..ca79055455 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -3,6 +3,7 @@
 from __future__ import absolute_import
 
 from datetime import timedelta
+import pytest
 from django.utils import timezone
 from mock import Mock, patch, ANY
 
@@ -391,6 +392,7 @@ class PostProcessGroupTest(TestCase):
         assert not delay.called
 
 
+@pytest.mark.skip(reason="Legacy")
 class IndexEventTagsTest(TestCase):
     def test_simple(self):
         group = self.create_group(project=self.project)
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index 4fcedd124b..75c6f60e7b 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -6,7 +6,6 @@ from uuid import uuid4
 
 import pytest
 
-from sentry import tagstore
 from sentry.tagstore.models import EventTag
 from sentry.constants import ObjectStatus
 from sentry.exceptions import DeleteAborted
@@ -50,6 +49,7 @@ from sentry.tasks.deletion import (
     revoke_api_tokens,
 )
 from sentry.testutils import TestCase
+from sentry.testutils.helpers.datetime import iso_format, before_now
 
 
 class DeleteOrganizationTest(TestCase):
@@ -176,108 +176,18 @@ class DeleteProjectTest(TestCase):
         assert Project.objects.filter(id=project.id).exists()
 
 
-class DeleteTagKeyTest(TestCase):
-    def test_simple(self):
-        from sentry.tagstore.tasks import delete_tag_key as delete_tag_key_task
-
-        team = self.create_team(name="test", slug="test")
-        project = self.create_project(teams=[team], name="test1", slug="test1")
-        group = self.create_group(project=project)
-        key = "foo"
-        value = "bar"
-        tk = tagstore.create_tag_key(
-            key=key, project_id=project.id, environment_id=self.environment.id
-        )
-        tv = tagstore.create_tag_value(
-            key=key, value=value, project_id=project.id, environment_id=self.environment.id
-        )
-        tagstore.create_group_tag_key(
-            key=key, group_id=group.id, project_id=project.id, environment_id=self.environment.id
-        )
-        tagstore.create_group_tag_value(
-            key=key,
-            value=value,
-            group_id=group.id,
-            project_id=project.id,
-            environment_id=self.environment.id,
-        )
-        tagstore.create_event_tags(
-            group_id=group.id,
-            project_id=project.id,
-            environment_id=self.environment.id,
-            event_id=1,
-            tags=[(tk.key, tv.value)],
-        )
-
-        project2 = self.create_project(teams=[team], name="test2")
-        env2 = self.create_environment(project=project2)
-        group2 = self.create_group(project=project2)
-        tk2 = tagstore.create_tag_key(key=key, project_id=project2.id, environment_id=env2.id)
-        tv2 = tagstore.create_tag_value(
-            project_id=project2.id, environment_id=env2.id, key=key, value=value
-        )
-        tagstore.create_group_tag_key(
-            key=key, group_id=group2.id, project_id=project2.id, environment_id=env2.id
-        )
-        tagstore.create_group_tag_value(
-            key=key, value=value, group_id=group2.id, project_id=project2.id, environment_id=env2.id
-        )
-        tagstore.create_event_tags(
-            group_id=group2.id,
-            project_id=project2.id,
-            environment_id=env2.id,
-            event_id=1,
-            tags=[(tk2.key, tv2.value)],
-        )
-
-        with self.tasks():
-            from sentry.tagstore.models import TagKey
-
-            delete_tag_key_task(object_id=tk.id, model=TagKey)
-
-            try:
-                tagstore.get_group_tag_value(group.project_id, group.id, None, key, value)
-                assert False  # verify exception thrown
-            except tagstore.GroupTagValueNotFound:
-                pass
-            try:
-                tagstore.get_group_tag_key(group.project_id, group.id, None, key)
-                assert False  # verify exception thrown
-            except tagstore.GroupTagKeyNotFound:
-                pass
-            try:
-                tagstore.get_tag_value(project.id, None, key, value)
-                assert False  # verify exception thrown
-            except tagstore.TagValueNotFound:
-                pass
-            try:
-                tagstore.get_tag_key(project.id, None, key)
-                assert False  # verify exception thrown
-            except tagstore.TagKeyNotFound:
-                pass
-
-        assert tagstore.get_tag_key(project2.id, env2.id, key) is not None
-        assert tagstore.get_group_tag_key(group2.project_id, group2.id, env2.id, key) is not None
-        assert (
-            tagstore.get_group_tag_value(group2.project_id, group2.id, env2.id, key, value)
-            is not None
-        )
-        assert EventTag.objects.filter(key_id=tk2.id).exists()
-
-
 class DeleteGroupTest(TestCase):
     def test_simple(self):
+        event_id = "a" * 32
         project = self.create_project()
-        group = self.create_group(project=project, status=GroupStatus.PENDING_DELETION)
-        event = self.create_event(group=group)
-        tv, _ = tagstore.get_or_create_tag_value(project.id, self.environment.id, "key1", "value1")
-        tagstore.create_event_tags(
-            event_id=event.id,
-            group_id=group.id,
+
+        event = self.store_event(
+            data={"event_id": event_id, "timestamp": iso_format(before_now(minutes=1))},
             project_id=project.id,
-            environment_id=self.environment.id,
-            tags=[(tv.key, tv.value)],
         )
+        group = event.group
+        group.update(status=GroupStatus.PENDING_DELETION)
+
         GroupAssignee.objects.create(group=group, project=project, user=self.user)
         GroupHash.objects.create(project=project, group=group, hash=uuid4().hex)
         GroupMeta.objects.create(group=group, key="foo", value="bar")
diff --git a/tests/sentry/tasks/test_merge.py b/tests/sentry/tasks/test_merge.py
index 53533254fe..05e4de5f8f 100644
--- a/tests/sentry/tasks/test_merge.py
+++ b/tests/sentry/tasks/test_merge.py
@@ -1,15 +1,14 @@
 from __future__ import absolute_import
 
-from collections import defaultdict
 from mock import patch
 
-from sentry import tagstore
 from sentry.tagstore.models import GroupTagValue
 from sentry.tasks.merge import merge_groups
 from sentry.models import Event, Group, GroupEnvironment, GroupMeta, GroupRedirect, UserReport
 from sentry.similarity import _make_index_backend
 from sentry.testutils import TestCase
 from sentry.utils import redis
+from sentry.testutils.helpers.datetime import iso_format, before_now
 
 # Use the default redis client as a cluster client in the similarity index
 index = _make_index_backend(redis.clusters.get("default").get_local_client(0))
@@ -96,82 +95,37 @@ class MergeGroupTest(TestCase):
 
     def test_merge_updates_tag_values_seen(self):
         project = self.create_project()
-        target, other = [self.create_group(project) for _ in range(0, 2)]
-
-        data = {
-            "sentry:user": {"id:1": {target: 2}, "id:2": {other: 3}, "id:3": {target: 1, other: 2}},
-            "key": {"foo": {other: 3}},
-        }
-
-        input_group_tag_keys = defaultdict(int)  # [(group, key)] = values_seen
-        input_group_tag_values = defaultdict(int)  # [(group, key, value)] = times_seen
-        output_group_tag_keys = defaultdict(int)  # [key] = values_seen
-        output_group_tag_values = defaultdict(int)  # [(key, value)] = times_seen
-
-        for key, values in data.items():
-            output_group_tag_keys[key] = len(values)
-
-            for value, groups in values.items():
-                for group, count in groups.items():
-                    input_group_tag_keys[(group, key)] += 1
-                    input_group_tag_values[(group, key, value)] += count
-                    output_group_tag_values[(key, value)] += count
-
-        for ((group, key), values_seen) in input_group_tag_keys.items():
-            tagstore.create_group_tag_key(
-                project_id=project.id,
-                group_id=group.id,
-                environment_id=self.environment.id,
-                key=key,
-                values_seen=values_seen,
-            )
-
-        for ((group, key, value), times_seen) in input_group_tag_values.items():
-            tagstore.create_group_tag_value(
-                project_id=project.id,
-                group_id=group.id,
-                environment_id=self.environment.id,
-                key=key,
-                value=value,
-                times_seen=times_seen,
-            )
+        event1 = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "timestamp": iso_format(before_now(seconds=1)),
+                "fingerprint": ["group-1"],
+                "tags": {"foo": "bar"},
+                "environment": self.environment.name,
+            },
+            project_id=project.id,
+        )
+        event2 = self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "timestamp": iso_format(before_now(seconds=1)),
+                "fingerprint": ["group-2"],
+                "tags": {"foo": "bar"},
+                "environment": self.environment.name,
+            },
+            project_id=project.id,
+        )
+        target = event1.group
+        other = event2.group
 
         with self.tasks():
             merge_groups([other.id], target.id)
 
         assert not Group.objects.filter(id=other.id).exists()
-        assert (
-            len(
-                tagstore.get_group_tag_keys(
-                    other.project_id, other.id, environment_ids=[self.environment.id]
-                )
-            )
-            == 0
-        )
         assert (
             len(GroupTagValue.objects.filter(project_id=other.project_id, group_id=other.id)) == 0
         )
 
-        for key, values_seen in output_group_tag_keys.items():
-            assert (
-                tagstore.get_group_tag_key(
-                    target.project_id, target.id, environment_id=self.environment.id, key=key
-                ).values_seen
-                == values_seen
-            )
-
-        for (key, value), times_seen in output_group_tag_values.items():
-            assert (
-                tagstore.get_group_tag_value(
-                    project_id=target.project_id,
-                    group_id=target.id,
-                    environment_id=self.environment.id,
-                    key=key,
-                    value=value,
-                ).times_seen
-                == times_seen
-            )
-
     def test_merge_with_group_meta(self):
         project1 = self.create_project()
         group1 = self.create_group(project1)
diff --git a/tests/sentry/web/frontend/test_group_tag_export.py b/tests/sentry/web/frontend/test_group_tag_export.py
index 5399634e9f..b3626e9b6f 100644
--- a/tests/sentry/web/frontend/test_group_tag_export.py
+++ b/tests/sentry/web/frontend/test_group_tag_export.py
@@ -1,8 +1,6 @@
 from __future__ import absolute_import
 
-from datetime import datetime, timedelta
-
-from django.conf import settings
+from datetime import datetime
 
 from sentry.testutils import SnubaTestCase, TestCase
 from sentry.testutils.helpers.datetime import before_now, iso_format
@@ -13,55 +11,24 @@ class GroupTagExportTest(TestCase, SnubaTestCase):
         key, value = "foo", u"b\xe4r"
         project = self.create_project()
 
-        if settings.SENTRY_TAGSTORE in [
-            "sentry.tagstore.snuba.SnubaCompatibilityTagStorage",
-            "sentry.tagstore.snuba.SnubaTagStorage",
-        ]:
-            event_timestamp = iso_format(before_now(seconds=1))
-
-            event = self.store_event(
-                data={
-                    "tags": {key: value},
-                    "timestamp": event_timestamp,
-                    "environment": self.environment.name,
-                },
-                project_id=project.id,
-                assert_no_errors=False,
-            )
-
-            group = event.group
-
-            first_seen = datetime.strptime(event_timestamp, "%Y-%m-%dT%H:%M:%S").strftime(
-                "%Y-%m-%dT%H:%M:%S.%fZ"
-            )
-            last_seen = first_seen
+        event_timestamp = iso_format(before_now(seconds=1))
 
-        else:
-            from django.utils import timezone
-            from sentry import tagstore
-
-            now = timezone.now()
+        event = self.store_event(
+            data={
+                "tags": {key: value},
+                "timestamp": event_timestamp,
+                "environment": self.environment.name,
+            },
+            project_id=project.id,
+            assert_no_errors=False,
+        )
 
-            group = self.create_group(project=project)
-            tagstore.create_tag_key(
-                project_id=project.id, environment_id=self.environment.id, key=key
-            )
-            tagstore.create_tag_value(
-                project_id=project.id, environment_id=self.environment.id, key=key, value=value
-            )
-            group_tag_value = tagstore.create_group_tag_value(
-                project_id=project.id,
-                group_id=group.id,
-                environment_id=self.environment.id,
-                key=key,
-                value=value,
-                times_seen=1,
-                first_seen=now - timedelta(hours=1),
-                last_seen=now,
-            )
+        group = event.group
 
-            first_seen = group_tag_value.first_seen.strftime("%Y-%m-%dT%H:%M:%S.%fZ")
-            last_seen = group_tag_value.last_seen.strftime("%Y-%m-%dT%H:%M:%S.%fZ")
+        first_seen = datetime.strptime(event_timestamp, "%Y-%m-%dT%H:%M:%S").strftime(
+            "%Y-%m-%dT%H:%M:%S.%fZ"
+        )
+        last_seen = first_seen
 
         self.login_as(user=self.user)
 
diff --git a/tests/snuba/api/endpoints/test_group_tags.py b/tests/snuba/api/endpoints/test_group_tags.py
deleted file mode 100644
index c5a9fe0231..0000000000
--- a/tests/snuba/api/endpoints/test_group_tags.py
+++ /dev/null
@@ -1,37 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.testutils import APITestCase, SnubaTestCase
-from sentry.testutils.helpers.datetime import iso_format, before_now
-
-
-class GroupTagsTest(APITestCase, SnubaTestCase):
-    def test_multi_env(self):
-        min_ago = before_now(minutes=1)
-        env = self.create_environment(project=self.project, name="prod")
-        env2 = self.create_environment(project=self.project, name="staging")
-        self.store_event(
-            data={
-                "fingerprint": ["put-me-in-group1"],
-                "timestamp": iso_format(min_ago),
-                "environment": env.name,
-                "tags": {"foo": "bar"},
-            },
-            project_id=self.project.id,
-        )
-        event2 = self.store_event(
-            data={
-                "fingerprint": ["put-me-in-group1"],
-                "timestamp": iso_format(min_ago),
-                "environment": env2.name,
-                "tags": {"biz": "baz"},
-            },
-            project_id=self.project.id,
-        )
-
-        self.login_as(user=self.user)
-        url = u"/api/0/issues/{}/tags/?enable_snuba=1".format(event2.group.id)
-        response = self.client.get(
-            "%s&environment=%s&environment=%s" % (url, env.name, env2.name), format="json"
-        )
-        assert response.status_code == 200
-        assert set([tag["key"] for tag in response.data]) >= set(["biz", "environment", "foo"])
diff --git a/tests/snuba/tasks/test_unmerge.py b/tests/snuba/tasks/test_unmerge.py
index d56f1488e2..320818c88e 100644
--- a/tests/snuba/tasks/test_unmerge.py
+++ b/tests/snuba/tasks/test_unmerge.py
@@ -11,7 +11,7 @@ import pytz
 
 from mock import patch
 
-from sentry import eventstream
+from sentry import eventstream, tagstore
 from sentry.app import tsdb
 from sentry.models import Environment, Event, Group, GroupHash, GroupRelease, Release, UserReport
 from sentry.similarity import features, _make_index_backend
@@ -28,7 +28,6 @@ from sentry.utils.dates import to_timestamp
 from sentry.utils import redis
 from sentry.testutils.helpers.datetime import before_now, iso_format
 from sentry.tasks.merge import merge_groups
-from sentry.tagstore.snuba.backend import SnubaTagStorage
 
 from six.moves import xrange
 
@@ -153,7 +152,6 @@ class UnmergeTestCase(TestCase, SnubaTestCase):
         }
 
     def test_unmerge(self):
-        tagstore = SnubaTagStorage()  # Snuba is not the default tag storage for tests yet
         now = before_now(seconds=20).replace(microsecond=0, tzinfo=pytz.utc)
 
         def time_from_now(offset=0):
