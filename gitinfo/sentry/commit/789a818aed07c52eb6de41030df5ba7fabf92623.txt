commit 789a818aed07c52eb6de41030df5ba7fabf92623
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jan 15 11:40:16 2015 -0800

    Switch key to callable

diff --git a/src/sentry/api/paginator.py b/src/sentry/api/paginator.py
index fa8774beb6..7a047bdefc 100644
--- a/src/sentry/api/paginator.py
+++ b/src/sentry/api/paginator.py
@@ -7,6 +7,8 @@ sentry.api.paginator
 """
 from __future__ import absolute_import
 
+import math
+
 from django.db import connections
 
 from sentry.utils.cursors import build_cursor, Cursor
@@ -22,6 +24,12 @@ class Paginator(object):
             self.key, self.desc = order_by, False
         self.queryset = queryset
 
+    def _get_item_key(self, item):
+        value = getattr(item, self.key)
+        if self.desc:
+            return math.ceil(value)
+        return math.floor(value)
+
     def _get_results_from_qs(self, value, is_prev):
         results = self.queryset
 
@@ -95,5 +103,5 @@ class Paginator(object):
             results=results,
             limit=limit,
             cursor=cursor,
-            key=self.key,
+            key=self._get_item_key,
         )
diff --git a/src/sentry/utils/cursors.py b/src/sentry/utils/cursors.py
index 85c175bdc3..6d996ed43e 100644
--- a/src/sentry/utils/cursors.py
+++ b/src/sentry/utils/cursors.py
@@ -107,13 +107,13 @@ def build_cursor(results, key, limit=100, cursor=None):
         has_next = True
     elif num_results:
         if not value:
-            value = getattr(results[0], key)
+            value = long(key(results[0]))
 
         # Are there more results than whats on the current page?
         has_next = num_results > limit
 
         # Determine what our next cursor is by ensuring we have a unique offset
-        next_value = getattr(results[-1], key)
+        next_value = long(key(results[-1]))
 
         if next_value == value:
             next_offset = offset + limit
@@ -123,7 +123,7 @@ def build_cursor(results, key, limit=100, cursor=None):
             # skip the last result
             result_iter.next()
             for result in result_iter:
-                if getattr(result, key) == next_value:
+                if long(key(result)) == next_value:
                     next_offset += 1
                 else:
                     break
@@ -134,11 +134,11 @@ def build_cursor(results, key, limit=100, cursor=None):
 
     # Determine what our pervious cursor is by ensuring we have a unique offset
     if is_prev and num_results:
-        prev_value = getattr(results[0], key)
+        prev_value = long(key(results[0]))
 
         if num_results > 2:
             i = 1
-            while i < num_results and prev_value == getattr(results[i], key):
+            while i < num_results and prev_value == long(key(results[i])):
                 i += 1
             i -= 1
         else:
