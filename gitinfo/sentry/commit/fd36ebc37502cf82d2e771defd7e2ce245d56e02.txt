commit fd36ebc37502cf82d2e771defd7e2ce245d56e02
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Fri Jan 6 12:55:10 2017 -0800

    Browser filter (#4693)

diff --git a/CHANGES b/CHANGES
index 8723a085ab..d791cfba28 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,5 +1,6 @@
 Version 8.13 (Unreleased)
 -------------------------
+- Added individual filters for legacy browsers to improve customization of error filtering based on browser versions
 
 - Support for setting a custom security header for javascript fetching.
 
diff --git a/src/sentry/api/endpoints/project_filter_details.py b/src/sentry/api/endpoints/project_filter_details.py
index 27eb12af41..d417d4e0b6 100644
--- a/src/sentry/api/endpoints/project_filter_details.py
+++ b/src/sentry/api/endpoints/project_filter_details.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-from rest_framework import serializers
 from rest_framework.response import Response
 
 from sentry import filters
@@ -8,10 +7,6 @@ from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 
 
-class ProjectFilterSerializer(serializers.Serializer):
-    active = serializers.BooleanField()
-
-
 class ProjectFilterDetailsEndpoint(ProjectEndpoint):
     def put(self, request, project, filter_id):
         """
@@ -27,10 +22,10 @@ class ProjectFilterDetailsEndpoint(ProjectEndpoint):
         except filters.FilterNotRegistered:
             raise ResourceDoesNotExist
 
-        serializer = ProjectFilterSerializer(data=request.DATA, partial=True)
+        serializer = filter.serializer_cls(data=request.DATA, partial=True)
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        if 'active' in serializer.object:
-            filter.enable(serializer.object['active'])
+        filter.enable(serializer.object)
+
         return Response(status=201)
diff --git a/src/sentry/api/endpoints/project_filters.py b/src/sentry/api/endpoints/project_filters.py
index 82987e08b5..787a6c311a 100644
--- a/src/sentry/api/endpoints/project_filters.py
+++ b/src/sentry/api/endpoints/project_filters.py
@@ -21,6 +21,8 @@ class ProjectFiltersEndpoint(ProjectEndpoint):
             filter = f_cls(project)
             results.append({
                 'id': filter.id,
+                # 'active' will be either a boolean or list for the legacy browser filters
+                # all other filters will be boolean
                 'active': filter.is_enabled(),
                 'description': filter.description,
                 'name': filter.name,
diff --git a/src/sentry/filters/base.py b/src/sentry/filters/base.py
index 4688bd8e78..13132402e4 100644
--- a/src/sentry/filters/base.py
+++ b/src/sentry/filters/base.py
@@ -3,6 +3,11 @@ from __future__ import absolute_import
 __all__ = ['Filter']
 
 from sentry.models import ProjectOption
+from rest_framework import serializers
+
+
+class FilterSerializer(serializers.Serializer):
+    active = serializers.BooleanField()
 
 
 class Filter(object):
@@ -10,6 +15,7 @@ class Filter(object):
     description = None
     name = None
     default = False
+    serializer_cls = FilterSerializer
 
     def __init__(self, project):
         self.project = project
@@ -21,11 +27,14 @@ class Filter(object):
             default='1' if self.default else '0',
         ) == '1'
 
-    def enable(self, status=True):
+    def enable(self, value=None):
+        if value is None:
+            value = {'active': True}
+
         ProjectOption.objects.set_value(
             project=self.project,
             key='filters:{}'.format(self.id),
-            value='1' if status else '0',
+            value='1' if value.get('active', False) else '0',
         )
 
     def disable(self):
diff --git a/src/sentry/filters/legacy_browsers.py b/src/sentry/filters/legacy_browsers.py
index 6b2bd2cd4b..d1ad327148 100644
--- a/src/sentry/filters/legacy_browsers.py
+++ b/src/sentry/filters/legacy_browsers.py
@@ -3,6 +3,9 @@ from __future__ import absolute_import
 from .base import Filter
 
 from ua_parser.user_agent_parser import Parse
+from rest_framework import serializers
+from sentry.models import ProjectOption
+from sentry.api.fields import MultipleChoiceField
 
 MIN_VERSIONS = {
     'Chrome': 0,
@@ -11,14 +14,62 @@ MIN_VERSIONS = {
     'Safari': 6,
     'Edge': 0,
     'Opera': 15,
+    'Android': 4,
 }
 
 
+class LegacyBrowserFilterSerializer(serializers.Serializer):
+    active = serializers.BooleanField()
+    subfilters = MultipleChoiceField(choices=[
+        'ie_pre_9',
+        'ie9',
+        'opera_pre_15',
+        'android_pre_4',
+        'safari_pre_6'
+    ])
+
+
 class LegacyBrowsersFilter(Filter):
     id = 'legacy-browsers'
     name = 'Filter out known errors from legacy browsers'
     description = 'Older browsers often give less accurate information, and while they may report valid issues, the context to understand them is incorrect or missing.'
     default = False
+    serializer_cls = LegacyBrowserFilterSerializer
+
+    def is_enabled(self):
+        # May be either a '1' or an iterable for new style
+        # The javascript code requires this to return either
+        # a boolean or a list of subfilters depending on if all, none, or some
+        # legacy browsers should be filtered
+        rv = ProjectOption.objects.get_value(
+            project=self.project,
+            key='filters:{}'.format(self.id),
+            default='1' if self.default else '0',
+        )
+
+        if rv == '1':
+            return True
+        if rv == '0':
+            return False
+
+        return rv
+
+    def enable(self, value=None):
+        if value is None:
+            value = {}
+
+        option_val = '0'
+        if 'active' in value:
+            if value['active']:
+                option_val = '1'
+        elif 'subfilters' in value and len(value['subfilters']) > 0:
+            option_val = set(value['subfilters'])
+
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:{}'.format(self.id),
+            value=option_val,
+        )
 
     def get_user_agent(self, data):
         try:
@@ -28,25 +79,52 @@ class LegacyBrowsersFilter(Filter):
         except LookupError:
             return ''
 
-    def test(self, data):
-        if data.get('platform') != 'javascript':
+    def filter_default(self, browser):
+        try:
+            minimum_version = MIN_VERSIONS[browser['family']]
+        except KeyError:
             return False
 
-        value = self.get_user_agent(data)
-        if not value:
+        try:
+            major_browser_version = int(browser['major'])
+        except (TypeError, ValueError):
             return False
 
-        ua = Parse(value)
-        if not ua:
+        if minimum_version > major_browser_version:
+            return True
+
+        return False
+
+    def filter_opera_pre_15(self, browser):
+        if not browser['family'] == "Opera":
             return False
 
-        browser = ua['user_agent']
-        if not browser['family']:
+        try:
+            major_browser_version = int(browser['major'])
+        except (TypeError, ValueError):
+            return False
+
+        if major_browser_version < 15:
+            return True
+
+        return False
+
+    def filter_safari_pre_6(self, browser):
+        if not browser['family'] == "Safari":
             return False
 
         try:
-            minimum_version = MIN_VERSIONS[browser['family']]
-        except KeyError:
+            major_browser_version = int(browser['major'])
+        except (TypeError, ValueError):
+            return False
+
+        if major_browser_version < 6:
+            return True
+
+        return False
+
+    def filter_android_pre_4(self, browser):
+        if not browser['family'] == "Android":
             return False
 
         try:
@@ -54,7 +132,75 @@ class LegacyBrowsersFilter(Filter):
         except (TypeError, ValueError):
             return False
 
-        if minimum_version > major_browser_version:
+        if major_browser_version < 4:
+            return True
+
+        return False
+
+    def filter_ie9(self, browser):
+        if not browser['family'] == "IE":
+            return False
+
+        try:
+            major_browser_version = int(browser['major'])
+        except (TypeError, ValueError):
+            return False
+
+        if major_browser_version == 9:
+            return True
+
+        return False
+
+    def filter_ie_pre_9(self, browser):
+        if not browser['family'] == "IE":
+            return False
+
+        try:
+            major_browser_version = int(browser['major'])
+        except (TypeError, ValueError):
+            return False
+
+        if major_browser_version <= 8:
             return True
 
         return False
+
+    def test(self, data):
+        if data.get('platform') != 'javascript':
+            return False
+
+        opts = ProjectOption.objects.get_value(
+            project=self.project,
+            key='filters:{}'.format(self.id),
+        )
+
+        value = self.get_user_agent(data)
+        if not value:
+            return False
+
+        ua = Parse(value)
+        if not ua:
+            return False
+
+        browser = ua['user_agent']
+
+        if not browser['family']:
+            return False
+
+        # handle old style config
+        if opts == '1':
+            return self.filter_default(browser)
+
+        # New style is not a simple boolean, but a list of
+        # specific filters to apply
+        if opts:
+            for key in opts:
+                try:
+                    fn = getattr(self, 'filter_' + key)
+                except AttributeError:
+                    pass
+                else:
+                    if fn(browser):
+                        return True
+
+        return False
diff --git a/src/sentry/static/sentry/app/views/projectFilters.jsx b/src/sentry/static/sentry/app/views/projectFilters.jsx
index d4469eb429..097d581203 100644
--- a/src/sentry/static/sentry/app/views/projectFilters.jsx
+++ b/src/sentry/static/sentry/app/views/projectFilters.jsx
@@ -1,14 +1,31 @@
 import React from 'react';
+import _ from 'underscore';
 
 import ApiMixin from '../mixins/apiMixin';
 import IndicatorStore from '../stores/indicatorStore';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import Switch from '../components/switch';
-import TooltipMixin from '../mixins/tooltip';
 import {t} from '../locale';
 import marked from '../utils/marked';
 
+const FilterSwitch = function(props) {
+  return (
+    <Switch size={props.size}
+      isActive={props.data.active}
+      toggle={function () {
+        props.onToggle(props.data, !props.data.active);
+      }} />
+  );
+};
+
+FilterSwitch.propTypes = {
+  data: React.PropTypes.object.isRequired,
+  onToggle: React.PropTypes.func.isRequired,
+  size: React.PropTypes.string.isRequired
+};
+
+
 const FilterRow = React.createClass({
   propTypes: {
     orgId: React.PropTypes.string.isRequired,
@@ -17,65 +34,161 @@ const FilterRow = React.createClass({
     onToggle: React.PropTypes.func.isRequired,
   },
 
-  mixins: [
-    ApiMixin,
-    TooltipMixin({
-      selector: '.tip'
-    })
-  ],
+  getInitialState() {
+    return {
+      loading: false,
+      error: false,
+    };
+  },
+
+  onToggleSubfilters(active) {
+    this.props.onToggle(this.props.data.subFilters, active);
+  },
+
+  render() {
+    let data = this.props.data;
+
+    return (
+      <div style={{borderTop: '1px solid #f2f3f4', padding: '20px 0 0'}}>
+        <div className="row">
+          <div className="col-md-9">
+            <h5 style={{marginBottom: 10}}>{data.name}</h5>
+            {data.description &&
+              <small className="help-block" dangerouslySetInnerHTML={{
+                __html: marked(data.description)
+              }} />
+            }
+          </div>
+          <div className="col-md-3 align-right" style={{paddingRight: '25px'}}>
+            <FilterSwitch {...this.props} size="lg"/>
+          </div>
+        </div>
+      </div>
+    );
+  }
+});
+
+const LEGACY_BROWSER_SUBFILTERS = {
+  'ie_pre_9': {
+    icon: 'internet-explorer',
+    helpText: 'Version 8 and lower',
+    title: 'Internet Explorer',
+  },
+  'ie9': {
+    icon: 'internet-explorer',
+    helpText: 'Version 9',
+    title: 'Internet Explorer',
+  },
+  'opera_pre_15': {
+    icon: 'opera',
+    helpText: 'Version 14 and lower',
+    title: 'Opera',
+  },
+  'safari_pre_6': {
+    icon: 'safari',
+    helpText: 'Version 5 and lower',
+    title: 'Safari',
+  },
+  'android_pre_4': {
+    icon: 'android',
+    helpText: 'Version 3 and lower',
+    title: 'Android',
+  },
+};
+
+const LEGACY_BROWSER_KEYS = Object.keys(LEGACY_BROWSER_SUBFILTERS);
+
+const LegacyBrowserFilterRow = React.createClass({
+  propTypes: {
+    orgId: React.PropTypes.string.isRequired,
+    projectId: React.PropTypes.string.isRequired,
+    data: React.PropTypes.object.isRequired,
+    onToggle: React.PropTypes.func.isRequired,
+  },
 
   getInitialState() {
+    let initialSubfilters;
+    if (this.props.data.active === true) {
+      initialSubfilters = new Set(LEGACY_BROWSER_KEYS);
+    } else if (this.props.data.active === false) {
+      initialSubfilters = new Set();
+    } else {
+      initialSubfilters = new Set(this.props.data.active);
+    }
     return {
       loading: false,
       error: false,
+      subfilters: initialSubfilters,
     };
   },
 
-  toggle() {
-    if (this.state.loading)
-      return;
+  onToggleSubfilters(subfilter) {
+    let {subfilters} = this.state;
 
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-    let {orgId, projectId, data} = this.props;
-    this.api.request(`/projects/${orgId}/${projectId}/filters/${data.id}/`, {
-      method: 'PUT',
-      data: {
-        active: !data.active,
-      },
-      success: (d, _, jqXHR) => {
-        this.props.onToggle(!data.active);
-        IndicatorStore.remove(loadingIndicator);
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false
-        });
-        IndicatorStore.remove(loadingIndicator);
-        IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
-      }
+    if (subfilter === true) {
+      subfilters = new Set(LEGACY_BROWSER_KEYS);
+    } else if (subfilter === false) {
+      subfilters = new Set();
+    } else if (subfilters.has(subfilter)) {
+      subfilters.delete(subfilter);
+    } else {
+      subfilters.add(subfilter);
+    }
+
+    this.setState({
+      subfilters: new Set(subfilters)
+    }, () => {
+      this.props.onToggle(this.props.data, subfilters);
     });
   },
 
+  renderSubfilters() {
+    let entries = LEGACY_BROWSER_KEYS.map(key => {
+      let subfilter = LEGACY_BROWSER_SUBFILTERS[key];
+      return (
+        <div className="col-md-4">
+          <div className="filter-grid-item">
+            <div className={'filter-grid-icon icon-' + subfilter.icon} />
+            <h5>{subfilter.title}</h5>
+            <p className="help-block">{subfilter.helpText}</p>
+            <Switch isActive={this.state.subfilters.has(key)} toggle={this.onToggleSubfilters.bind(this, key)} size="lg"/>
+          </div>
+        </div>
+      );
+    });
+
+    // group entries into rows of 3
+    let rows = _.groupBy(entries, (entry, i) => Math.floor(i / 3));
+
+    return _.toArray(rows).map((row, i) => <div className="row m-b-1" key={i}>{row}</div>);
+  },
+
   render() {
     let data = this.props.data;
+
     return (
-      <tr>
-        <td>
-          <h5>{data.name}</h5>
-          {data.description &&
-            <small className="help-block" dangerouslySetInnerHTML={{
-              __html: marked(data.description)
-            }} />
-          }
-        </td>
-        <td style={{textAlign: 'right'}}>
-          <Switch size="lg"
-                  isActive={data.active}
-                  isLoading={this.state.loading}
-                  toggle={this.toggle} />
-        </td>
-      </tr>
+      <div style={{borderTop: '1px solid #f2f3f4', padding: '20px 0 0'}}>
+        <div className="row">
+          <div className="col-md-9">
+            <h5 style={{marginBottom: 10}}>{data.name}</h5>
+            {data.description &&
+              <small className="help-block" dangerouslySetInnerHTML={{
+                __html: marked(data.description)
+              }} />
+            }
+          </div>
+          <div className="col-md-3 align-right">
+            <div className="filter-grid-filter">
+              <strong>Filter:</strong>
+              <a onClick={this.onToggleSubfilters.bind(this, true)}>All</a>
+              <span className="divider" />
+              <a onClick={this.onToggleSubfilters.bind(this, false)}>None</a>
+            </div>
+          </div>
+        </div>
+
+        {this.renderSubfilters()}
+      </div>
     );
   }
 });
@@ -98,7 +211,7 @@ const ProjectFilters = React.createClass({
   fetchData() {
     let {orgId, projectId} = this.props.params;
     this.api.request(`/projects/${orgId}/${projectId}/filters/`, {
-      success: (data, _, jqXHR) => {
+      success: (data, textStatus, jqXHR) => {
         this.setState({
           error: false,
           loading: false,
@@ -115,9 +228,40 @@ const ProjectFilters = React.createClass({
   },
 
   onToggleFilter(filter, active) {
-    this.state.filterList.find(f => f.id === filter.id).active = active;
-    this.setState({
-      filterList: this.state.filterList
+    if (this.state.loading)
+      return;
+
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    let {orgId, projectId} = this.props.params;
+
+    let endpoint = `/projects/${orgId}/${projectId}/filters/${filter.id}/`; // ?id=a&id=b
+
+    let data;
+    if (typeof active === 'boolean') {
+      data = {active: active};
+    } else {
+      data = {subfilters: active};
+    }
+    this.api.request(endpoint, {
+      method: 'PUT',
+      data: data,
+      success: (d, textStatus, jqXHR) => {
+        let stateFilter = this.state.filterList.find(f => f.id === filter.id);
+        stateFilter.active = active;
+
+        this.setState({
+          filterList: [...this.state.filterList]
+        });
+        IndicatorStore.remove(loadingIndicator);
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+        IndicatorStore.remove(loadingIndicator);
+        IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
+      }
     });
   },
 
@@ -144,21 +288,22 @@ const ProjectFilters = React.createClass({
 
   renderResults() {
     let {orgId, projectId} = this.props.params;
+
     return (
-      <table className="table">
-        <tbody>
-          {this.state.filterList.map((filter) => {
-            return (
-              <FilterRow
-                key={filter.id}
-                data={filter}
-                orgId={orgId}
-                projectId={projectId}
-                onToggle={this.onToggleFilter.bind(this, filter)} />
-            );
-          })}
-        </tbody>
-      </table>
+      <div>
+        {this.state.filterList.map(filter => {
+          let props = {
+            key: filter.id,
+            data: filter,
+            orgId: orgId,
+            projectId: projectId,
+            onToggle: this.onToggleFilter
+          };
+          return filter.id === 'legacy-browsers'
+            ? <LegacyBrowserFilterRow {...props}/>
+            : <FilterRow {...props}/>;
+        })}
+      </div>
     );
   },
 
diff --git a/src/sentry/static/sentry/images/icons/context/android.png b/src/sentry/static/sentry/images/icons/context/android.png
new file mode 100644
index 0000000000..2050ac8143
Binary files /dev/null and b/src/sentry/static/sentry/images/icons/context/android.png differ
diff --git a/src/sentry/static/sentry/images/icons/context/safari.png b/src/sentry/static/sentry/images/icons/context/safari.png
new file mode 100644
index 0000000000..ca177bee38
Binary files /dev/null and b/src/sentry/static/sentry/images/icons/context/safari.png differ
diff --git a/src/sentry/static/sentry/less/browser-icons.less b/src/sentry/static/sentry/less/browser-icons.less
new file mode 100644
index 0000000000..8705286b26
--- /dev/null
+++ b/src/sentry/static/sentry/less/browser-icons.less
@@ -0,0 +1,25 @@
+// Browser icons
+
+.icon-android {
+  background-image: url(../images/icons/context/android.png);
+}
+
+.icon-chrome {
+  background-image: url(../images/icons/context/chrome.png);
+}
+
+.icon-edge {
+  background-image: url(../images/icons/context/edge.png);
+}
+
+.icon-internet-explorer {
+  background-image: url(../images/icons/context/internet-explorer.png);
+}
+
+.icon-opera {
+  background-image: url(../images/icons/context/opera.png);
+}
+
+.icon-safari {
+  background-image: url(../images/icons/context/safari.png);
+}
diff --git a/src/sentry/static/sentry/less/sentry.less b/src/sentry/static/sentry/less/sentry.less
index 179f235b31..1a336644f1 100644
--- a/src/sentry/static/sentry/less/sentry.less
+++ b/src/sentry/static/sentry/less/sentry.less
@@ -23,6 +23,7 @@
 @import url("./required-admin-actions.less");
 @import url("./result-grid.less");
 @import url("./type.less");
+@import url("./browser-icons.less");
 
 // Page specific
 
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 87d69bf97b..0718415ca5 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -854,6 +854,59 @@ table.integrations {
   }
 }
 
+/**
+* Filter Grid
+* ============================================================================
+*/
+
+.filter-grid-item {
+  background: #F7F8F9;
+  border-radius: 3px;
+  position: relative;
+  padding: 10px 65px 6px 58px;
+
+  h5 {
+    font-size: 14px;
+    margin: 0 0 2px;
+  }
+
+  p {
+    margin: 0;
+    font-size: 13px;
+  }
+
+  .switch {
+    background: #fff;
+    position: absolute;
+    top: 17px;
+    right: 12px;
+  }
+}
+
+.filter-grid-icon {
+  position: absolute;
+  top: 10px;
+  left: 10px;
+  width: 38px;
+  height: 38px;
+  background-repeat: no-repeat;
+  background-position: center;
+  background-size: 38px 38px;
+}
+
+.filter-grid-filter {
+  strong {
+    margin-right: 5px;
+  }
+
+  .divider {
+    display: inline-block;
+    height: 16px;
+    border-left: 1px solid #f1f2f3;
+    margin: 0 5px;
+  }
+}
+
 /**
 * Auth providers
 * ============================================================================
diff --git a/tests/sentry/filters/test_legacy_browsers.py b/tests/sentry/filters/test_legacy_browsers.py
index 555255960f..4b985d5a9d 100644
--- a/tests/sentry/filters/test_legacy_browsers.py
+++ b/tests/sentry/filters/test_legacy_browsers.py
@@ -1,7 +1,171 @@
 from __future__ import absolute_import
 
+from django.core.urlresolvers import reverse
+
+from ua_parser.user_agent_parser import Parse
+
 from sentry.filters.legacy_browsers import LegacyBrowsersFilter
-from sentry.testutils import TestCase
+from sentry.models import ProjectOption
+from sentry.testutils import APITestCase, TestCase
+
+USER_AGENTS = {
+    'android_2': 'Mozilla/5.0 (Linux; U; Android 2.3.5; en-us; HTC Vision Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',
+    'android_4': 'Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19',
+    'ie_5': 'Mozilla/4.0 (compatible; MSIE 5.50; Windows NT; SiteKiosk 4.9; SiteCoach 1.0)',
+    'ie_8': 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; MDDC; Tablet PC 2.0)',
+    'ie_9': 'Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US))',
+    'ie_10': 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 7.0; InfoPath.3; .NET CLR 3.1.40767; Trident/6.0; en-IN)',
+    'opera_11': 'Opera/9.80 (Windows NT 5.1; U; it) Presto/2.7.62 Version/11.00',
+    'opera_12': 'Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16',
+    'opera_15': 'Mozilla/5.0 (X11; Linux x86_64; Debian) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.52 Safari/537.36 OPR/15.0.1147.100',
+    'chrome': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36',
+    'edge': 'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10136',
+    'safari_5': 'Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-HK) AppleWebKit/533.18.1 (KHTML, like Gecko) Version/5.0.2 Safari/533.18.5',
+    'safari_7': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A',
+}
+
+
+class SetLegacyBrowserFilterTest(APITestCase):
+
+    def test_set_default_all_browsers(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+
+        url = reverse('sentry-api-0-project-filters', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'filter_id': "legacy-browsers"
+        })
+        response = self.client.put(url, data={
+            'active': True,
+        })
+        assert response.status_code == 201, response.content
+
+        options = ProjectOption.objects.get_value(
+            project=project,
+            key='filters:legacy-browsers'
+        )
+        assert options == '1'
+
+    def test_set_default_no_browsers(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+
+        url = reverse('sentry-api-0-project-filters', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'filter_id': "legacy-browsers"
+        })
+        response = self.client.put(url, data={
+            'active': False,
+        })
+        assert response.status_code == 201, response.content
+
+        options = ProjectOption.objects.get_value(
+            project=project,
+            key='filters:legacy-browsers'
+        )
+        assert options == '0'
+
+    def test_set_opera(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+
+        url = reverse('sentry-api-0-project-filters', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'filter_id': "legacy-browsers"
+        })
+        response = self.client.put(url, data={
+            'subfilters': ["opera_pre_15"]
+        })
+        assert response.status_code == 201, response.content
+
+        options = ProjectOption.objects.get_value(
+            project=project,
+            key='filters:legacy-browsers'
+        )
+        assert options == {'opera_pre_15'}
+
+    def test_set_ie9(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+
+        url = reverse('sentry-api-0-project-filters', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'filter_id': "legacy-browsers"
+        })
+        response = self.client.put(url, data={
+            'subfilters': ["ie9"]
+        })
+        assert response.status_code == 201, response.content
+
+        options = ProjectOption.objects.get_value(
+            project=project,
+            key='filters:legacy-browsers'
+        )
+        assert options == {'ie9'}
+
+    def test_set_ie8(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+
+        url = reverse('sentry-api-0-project-filters', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'filter_id': "legacy-browsers"
+        })
+        response = self.client.put(url, data={
+            'subfilters': ["ie_pre_9"]
+        })
+        assert response.status_code == 201, response.content
+
+        options = ProjectOption.objects.get_value(
+            project=project,
+            key='filters:legacy-browsers'
+        )
+        assert options == {'ie_pre_9'}
+
+    def test_set_android(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+
+        url = reverse('sentry-api-0-project-filters', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'filter_id': "legacy-browsers"
+        })
+        response = self.client.put(url, data={
+            'subfilters': ["android_pre_4"]
+        })
+        assert response.status_code == 201, response.content
+
+        options = ProjectOption.objects.get_value(
+            project=project,
+            key='filters:legacy-browsers'
+        )
+        assert options == {'android_pre_4'}
+
+    def test_set_safari(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+
+        url = reverse('sentry-api-0-project-filters', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'filter_id': "legacy-browsers"
+        })
+        response = self.client.put(url, data={
+            'subfilters': ["safari_pre_6"]
+        })
+        assert response.status_code == 201, response.content
+
+        options = ProjectOption.objects.get_value(
+            project=project,
+            key='filters:legacy-browsers'
+        )
+        assert options == {'safari_pre_6'}
 
 
 class LegacyBrowsersFilterTest(TestCase):
@@ -22,22 +186,157 @@ class LegacyBrowsersFilterTest(TestCase):
             }
         }
 
-    def test_filters_ie_9(self):
+    def test_filters_android_2_by_default(self):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:legacy-browsers',
+            value='1',
+        )
+        data = self.get_mock_data(USER_AGENTS['android_2'])
+        assert self.apply_filter(data) is True
+
+    def test_does_not_filter_android_4_by_default(self):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:legacy-browsers',
+            value='1',
+        )
+        data = self.get_mock_data('Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19')
+        assert self.apply_filter(data) is False
+
+    def test_filters_ie_9_by_default(self):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:legacy-browsers',
+            value='1',
+        )
         data = self.get_mock_data('Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US))')
         assert self.apply_filter(data) is True
 
-    def test_filters_ie_10(self):
-        data = self.get_mock_data('Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 7.0; InfoPath.3; .NET CLR 3.1.40767; Trident/6.0; en-IN)')
+    def test_does_not_filter_ie_10_by_default(self):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:legacy-browsers',
+            value='1',
+        )
+        data = self.get_mock_data(USER_AGENTS['ie_10'])
         assert self.apply_filter(data) is False
 
-    def test_filters_opera_12(self):
+    def test_filters_opera_12_by_default(self):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:legacy-browsers',
+            value='1',
+        )
         data = self.get_mock_data('Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16')
         assert self.apply_filter(data) is True
 
-    def test_does_not_filter_chrome(self):
+    def test_does_not_filter_chrome_by_default(self):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:legacy-browsers',
+            value='1',
+        )
         data = self.get_mock_data('Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36')
         assert self.apply_filter(data) is False
 
-    def test_does_not_filter_edge(self):
+    def test_does_not_filter_edge_by_default(self):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:legacy-browsers',
+            value='1',
+        )
         data = self.get_mock_data('Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10136')
         assert self.apply_filter(data) is False
+
+    def test_filter_opera(self):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:legacy-browsers',
+            value={'opera_pre_15'}
+        )
+        data = self.get_mock_data(USER_AGENTS['opera_12'])
+        assert self.apply_filter(data) is True
+
+    def test_filter_opera_method(self):
+        data = self.get_mock_data(USER_AGENTS['opera_12'])
+        ua_data = self.filter_cls(self.project).get_user_agent(data)
+        ua = Parse(ua_data)
+        browser = ua['user_agent']
+        assert self.filter_cls(self.project).filter_opera_pre_15(browser) is True
+
+    def test_dont_filter_opera_15(self):
+        data = self.get_mock_data(USER_AGENTS['opera_15'])
+        ua_data = self.filter_cls(self.project).get_user_agent(data)
+        ua = Parse(ua_data)
+        browser = ua['user_agent']
+        assert self.filter_cls(self.project).filter_opera_pre_15(browser) is False
+
+    def test_filters_ie8(self):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:legacy-browsers',
+            value={'ie_pre_9'}
+        )
+        data = self.get_mock_data(USER_AGENTS['ie_8'])
+        assert self.apply_filter(data) is True
+
+    def test_filters_ie8_method(self):
+        data = self.get_mock_data(USER_AGENTS['ie_8'])
+        ua_data = self.filter_cls(self.project).get_user_agent(data)
+        ua = Parse(ua_data)
+        browser = ua['user_agent']
+        assert self.filter_cls(self.project).filter_ie_pre_9(browser) is True
+
+    def test_does_not_filter_ie10(self):
+        data = self.get_mock_data(USER_AGENTS['ie_10'])
+        ua_data = self.filter_cls(self.project).get_user_agent(data)
+        ua = Parse(ua_data)
+        browser = ua['user_agent']
+        assert self.filter_cls(self.project).filter_ie_pre_9(browser) is False
+
+    def test_filters_safari(self):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:legacy-browsers',
+            value={'safari_pre_6'}
+        )
+        data = self.get_mock_data(USER_AGENTS['safari_5'])
+        assert self.apply_filter(data) is True
+
+    def test_filters_safari_method(self):
+        data = self.get_mock_data(USER_AGENTS['safari_5'])
+        ua_data = self.filter_cls(self.project).get_user_agent(data)
+        ua = Parse(ua_data)
+        browser = ua['user_agent']
+        assert self.filter_cls(self.project).filter_safari_pre_6(browser) is True
+
+    def test_method_does_not_filter_safari_7(self):
+        data = self.get_mock_data(USER_AGENTS['safari_7'])
+        ua_data = self.filter_cls(self.project).get_user_agent(data)
+        ua = Parse(ua_data)
+        browser = ua['user_agent']
+        assert self.filter_cls(self.project).filter_safari_pre_6(browser) is False
+
+    def test_filters_android(self):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:legacy-browsers',
+            value={'android_pre_4'}
+        )
+        data = self.get_mock_data(USER_AGENTS['android_2'])
+        assert self.apply_filter(data) is True
+
+    def test_filters_android_method(self):
+        data = self.get_mock_data(USER_AGENTS['android_2'])
+        ua_data = self.filter_cls(self.project).get_user_agent(data)
+        ua = Parse(ua_data)
+        browser = ua['user_agent']
+        assert self.filter_cls(self.project).filter_android_pre_4(browser) is True
+
+    def test_method_does_not_filter_android_4(self):
+        data = self.get_mock_data(USER_AGENTS['android_4'])
+        ua_data = self.filter_cls(self.project).get_user_agent(data)
+        ua = Parse(ua_data)
+        browser = ua['user_agent']
+        assert self.filter_cls(self.project).filter_android_pre_4(browser) is False
