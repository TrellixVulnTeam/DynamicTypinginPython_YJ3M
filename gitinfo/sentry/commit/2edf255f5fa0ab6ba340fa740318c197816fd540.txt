commit 2edf255f5fa0ab6ba340fa740318c197816fd540
Author: Mark Story <mark@sentry.io>
Date:   Fri Sep 20 12:17:37 2019 -0400

    fix(discover2) Fix pagination when array fields are used (#14777)
    
    When a query contains an aggregate and an array field we should not jam
    the entire array value in the condition as snuba cannot generate a query
    for that scenario. Instead pick the last value in the list and use that.
    This is arbitrary but for stack frames, the 0th element generally is
    from the framework which isn't helpful.
    
    Refs SEN-997

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 4c12984d0f..92688b0235 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -860,6 +860,10 @@ def get_reference_event_conditions(snuba_args, event_slug):
             value = tags.get(match.group(1), None)
         else:
             value = event_data.get(field, None)
+            # If the value is a sequence use the first element as snuba
+            # doesn't support `=` or `IN` operations on fields like exception_frames.filename
+            if isinstance(value, (list, set)) and value:
+                value = value.pop()
         if value:
             conditions.append([field, "=", value])
 
diff --git a/tests/js/spec/components/sidebar/discover2Item.spec.jsx b/tests/js/spec/components/sidebar/discover2Item.spec.jsx
index eb16887375..9343e310f4 100644
--- a/tests/js/spec/components/sidebar/discover2Item.spec.jsx
+++ b/tests/js/spec/components/sidebar/discover2Item.spec.jsx
@@ -69,9 +69,11 @@ describe('Sidebar > Discover2Item', function() {
     const wrapper = makeWrapper({organization, client});
     // Wait for reflux
     await tick();
+    await tick();
 
     const nav = wrapper.find('nav');
     nav.simulate('mouseEnter');
+    await wrapper.update();
 
     const menu = wrapper.find('Menu');
     expect(menu).toHaveLength(1);
@@ -89,10 +91,11 @@ describe('Sidebar > Discover2Item', function() {
     const wrapper = makeWrapper({organization, client});
     // Wait for reflux
     await tick();
+    await tick();
 
     const nav = wrapper.find('nav');
     nav.simulate('mouseEnter');
-    await tick();
+    await wrapper.update();
 
     const item = wrapper.find('Menu MenuItem').first();
     item.find('MenuItemButton[icon="icon-trash"]').simulate('click');
@@ -105,10 +108,11 @@ describe('Sidebar > Discover2Item', function() {
     const wrapper = makeWrapper({organization, client});
     // Wait for reflux
     await tick();
+    await tick();
 
     const nav = wrapper.find('nav');
     nav.simulate('mouseEnter');
-    await tick();
+    await wrapper.update();
 
     const item = wrapper.find('Menu MenuItem').first();
     item.find('MenuItemButton[icon="icon-edit"]').simulate('click');
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 6859be7ff8..7f5f0601d8 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -1336,9 +1336,8 @@ class GetReferenceEventConditionsTest(SnubaTestCase, TestCase):
         slug = "{}:{}".format(self.project.slug, event.event_id)
         result = get_reference_event_conditions(self.conditions, slug)
         assert result == [
-            ["exception_stacks.value", "=", ["This is a test exception sent from the Raven CLI."]],
-            ["exception_stacks.type", "=", ["Exception"]],
-            ["exception_stacks.mechanism_handled", "=", [None]],
+            ["exception_stacks.value", "=", "This is a test exception sent from the Raven CLI."],
+            ["exception_stacks.type", "=", "Exception"],
         ]
 
     def test_stack_field(self):
@@ -1349,17 +1348,8 @@ class GetReferenceEventConditionsTest(SnubaTestCase, TestCase):
         slug = "{}:{}".format(self.project.slug, event.event_id)
         result = get_reference_event_conditions(self.conditions, slug)
         assert result == [
-            [
-                "exception_frames.filename",
-                "=",
-                [
-                    "/Users/example/Development/raven-php/bin/raven",
-                    "/Users/example/Development/raven-php/bin/raven",
-                    "/Users/example/Development/raven-php/bin/raven",
-                    "/Users/example/Development/raven-php/bin/raven",
-                ],
-            ],
-            ["exception_frames.function", "=", ["null", "main", "cmd_test", "raven_cli_test"]],
+            ["exception_frames.filename", "=", "/Users/example/Development/raven-php/bin/raven"],
+            ["exception_frames.function", "=", "raven_cli_test"],
         ]
 
     def test_tag_value(self):
