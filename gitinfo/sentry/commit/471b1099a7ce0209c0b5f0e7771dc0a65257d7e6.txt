commit 471b1099a7ce0209c0b5f0e7771dc0a65257d7e6
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Fri May 31 10:32:41 2019 -0700

    feat(search): Added error handling to issue search. (#13457)
    
    * Added error handling to issue search.
    
    * Added Enclose any text in double quotes.
    
    * found unchanged test case

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index d9651cc8c3..d4f6a72ac8 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -484,7 +484,7 @@ def parse_search_query(query):
         raise InvalidSearchQuery(
             '%s %s' % (
                 u'Parse error: %r (column %d).' % (e.expr.name, e.column()),
-                'This is commonly caused by unmatched-parentheses.',
+                'This is commonly caused by unmatched-parentheses. Enclose any text in double quotes.',
             )
         )
     return SearchVisitor().visit(tree)
diff --git a/src/sentry/api/issue_search.py b/src/sentry/api/issue_search.py
index 26511cd9ad..7d076e19bf 100644
--- a/src/sentry/api/issue_search.py
+++ b/src/sentry/api/issue_search.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from django.utils.functional import cached_property
+from parsimonious.exceptions import IncompleteParseError
 
 from sentry.api.event_search import (
     event_search_grammar,
@@ -73,7 +74,15 @@ class IssueSearchVisitor(SearchVisitor):
 
 
 def parse_search_query(query):
-    tree = event_search_grammar.parse(query)
+    try:
+        tree = event_search_grammar.parse(query)
+    except IncompleteParseError as e:
+        raise InvalidSearchQuery(
+            '%s %s' % (
+                u'Parse error: %r (column %d).' % (e.expr.name, e.column()),
+                'This is commonly caused by unmatched-parentheses. Enclose any text in double quotes.',
+            )
+        )
     return IssueSearchVisitor().visit(tree)
 
 
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 1e8d1369c0..b41209c8da 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -923,25 +923,25 @@ class ParseBooleanSearchQueryTest(TestCase):
                 '(user.email:foo@example.com OR user.email:bar@example.com'
             )
         assert six.text_type(
-            error.value) == "Parse error: 'search' (column 1). This is commonly caused by unmatched-parentheses."
+            error.value) == "Parse error: 'search' (column 1). This is commonly caused by unmatched-parentheses. Enclose any text in double quotes."
         with pytest.raises(InvalidSearchQuery) as error:
             parse_search_query(
                 '((user.email:foo@example.com OR user.email:bar@example.com AND  user.email:bar@example.com)'
             )
         assert six.text_type(
-            error.value) == "Parse error: 'search' (column 1). This is commonly caused by unmatched-parentheses."
+            error.value) == "Parse error: 'search' (column 1). This is commonly caused by unmatched-parentheses. Enclose any text in double quotes."
         with pytest.raises(InvalidSearchQuery) as error:
             parse_search_query(
                 'user.email:foo@example.com OR user.email:bar@example.com)'
             )
         assert six.text_type(
-            error.value) == "Parse error: 'search' (column 57). This is commonly caused by unmatched-parentheses."
+            error.value) == "Parse error: 'search' (column 57). This is commonly caused by unmatched-parentheses. Enclose any text in double quotes."
         with pytest.raises(InvalidSearchQuery) as error:
             parse_search_query(
                 '(user.email:foo@example.com OR user.email:bar@example.com AND  user.email:bar@example.com))'
             )
         assert six.text_type(
-            error.value) == "Parse error: 'search' (column 91). This is commonly caused by unmatched-parentheses."
+            error.value) == "Parse error: 'search' (column 91). This is commonly caused by unmatched-parentheses. Enclose any text in double quotes."
 
     def test_grouping_without_boolean_terms(self):
         with pytest.raises(InvalidSearchQuery) as error:
@@ -954,7 +954,7 @@ class ParseBooleanSearchQueryTest(TestCase):
                     raw_value='undefined is not an object (evaluating "function.name")'),
             )]
         assert six.text_type(
-            error.value) == "Parse error: 'search' (column 28). This is commonly caused by unmatched-parentheses."
+            error.value) == "Parse error: 'search' (column 28). This is commonly caused by unmatched-parentheses. Enclose any text in double quotes."
 
 
 class GetSnubaQueryArgsTest(TestCase):
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index 6b96abe4f1..694d09ffd7 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -156,7 +156,7 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
         response = self.client.get(url, {'query': 'hi \n there'}, format='json')
 
         assert response.status_code == 400, response.content
-        assert response.data['detail'] == "Parse error: 'search' (column 4). This is commonly caused by unmatched-parentheses."
+        assert response.data['detail'] == "Parse error: 'search' (column 4). This is commonly caused by unmatched-parentheses. Enclose any text in double quotes."
 
     def test_project_filtering(self):
         user = self.create_user(is_staff=False, is_superuser=False)
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 4b9595e5aa..07c2de41f9 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -82,7 +82,7 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
             response = self.client.get(self.url, {'query': 'hi \n there'}, format='json')
 
         assert response.status_code == 400, response.content
-        assert response.data['detail'] == "Parse error: 'search' (column 4). This is commonly caused by unmatched-parentheses."
+        assert response.data['detail'] == "Parse error: 'search' (column 4). This is commonly caused by unmatched-parentheses. Enclose any text in double quotes."
 
     def test_raw_data(self):
         self.login_as(user=self.user)
