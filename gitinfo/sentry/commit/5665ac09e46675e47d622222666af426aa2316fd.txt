commit 5665ac09e46675e47d622222666af426aa2316fd
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 13 16:45:56 2010 -0700

    Fix failures for emails

diff --git a/sentry/__init__.py b/sentry/__init__.py
index 08d776df30..a2fe6327a6 100644
--- a/sentry/__init__.py
+++ b/sentry/__init__.py
@@ -1 +1 @@
-__version__ = (1, 0, 5)
\ No newline at end of file
+__version__ = (1, 0, 6)
\ No newline at end of file
diff --git a/sentry/client/base.py b/sentry/client/base.py
index c1e2779b75..95a3cf04b5 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -43,9 +43,6 @@ class SentryClient(object):
 
     def send(self, **kwargs):
         if settings.REMOTE_URL:
-            if not type(settings.REMOTE_URL) == list:
-                raise ValueError("SENTRY_REMOTE_URL must be of type list.")
-
             for url in settings.REMOTE_URL:
                 data = {
                     'data': base64.b64encode(pickle.dumps(transform(kwargs)).encode('zlib')),
@@ -56,10 +53,10 @@ class SentryClient(object):
                 try:
                     response = urllib2.urlopen(req, None, settings.REMOTE_TIMEOUT).read()
                 except urllib2.URLError, e:
-                    logger.critical('Unable to reach Sentry log server')
+                    logger.critical('Unable to reach Sentry log server', extra={'remote_url': url})
                     logger.log(kwargs.pop('level', None) or logging.ERROR, kwargs.pop('message', None))
                 except urllib2.HTTPError, e:
-                    logger.critical('Unable to reach Sentry log server', extra={'body': e.read()})
+                    logger.critical('Unable to reach Sentry log server', extra={'body': e.read(), 'remote_url': url})
                     logger.log(kwargs.pop('level', None) or logging.ERROR, kwargs.pop('message', None))
         else:
             from sentry.models import GroupedMessage
diff --git a/sentry/manager.py b/sentry/manager.py
index ce756923a0..8e8c2b81a7 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -82,7 +82,7 @@ class SentryManager(models.Manager):
             except Exception, exc:
                 warnings.warn(u'Unable to process log entry: %s' % (exc,))
         else:
-            if settings.ADMINS and mail:
+            if mail:
                 group.mail_admins()
             return instance
 
diff --git a/sentry/models.py b/sentry/models.py
index 40a7e7b252..7da0f39d69 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -139,6 +139,9 @@ class GroupedMessage(MessageBase):
         return 'times_seen'
 
     def mail_admins(self, request=None, fail_silently=True):
+        if not settings.ADMINS:
+            return
+        
         from django.core.mail import send_mail
         from django.template.loader import render_to_string
 
diff --git a/sentry/settings.py b/sentry/settings.py
index fb651126b8..42bbc6d0ad 100644
--- a/sentry/settings.py
+++ b/sentry/settings.py
@@ -34,6 +34,9 @@ LOG_LEVELS = (
 # This should be the full URL to sentries store view
 REMOTE_URL = getattr(settings, 'SENTRY_REMOTE_URL', None)
 
+if REMOTE_URL and not isinstance(settings.REMOTE_URL, (list, tuple)):
+    raise ValueError("SENTRY_REMOTE_URL must be of type list.")
+
 REMOTE_TIMEOUT = getattr(settings, 'SENTRY_REMOTE_TIMEOUT', 5)
 
 ADMINS = getattr(settings, 'SENTRY_ADMINS', [])
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 5c52b1d9fa..4c3adb5bee 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -653,7 +653,7 @@ class SentryMailTest(TestCase):
     urls = 'sentry.tests.urls'
     
     def setUp(self):
-        settings.ADMINS = ((getpass.getuser(), '%s@localhost' % getpass.getuser()),)
+        settings.ADMINS = ('%s@localhost' % getpass.getuser(),)
     
     def test_mail_admins(self):
         group = GroupedMessage.objects.get()
