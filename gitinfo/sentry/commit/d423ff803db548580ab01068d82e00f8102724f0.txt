commit d423ff803db548580ab01068d82e00f8102724f0
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Jun 20 16:39:11 2019 -0700

    ref(events-v2): Move events endpoints into separate files (#13758)
    
    This moves the code for each endpoint into its own file, rather than
    attempting to put all code for every events related endpoint into this
    one file. Follows the pattern more commonly used in the rest of the codebase.

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index bc33872bd4..ee61fe728a 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -2,25 +2,18 @@ from __future__ import absolute_import
 
 import logging
 import six
-
-from datetime import timedelta
 from functools import partial
 from rest_framework.response import Response
 
-from sentry import tagstore
 from sentry.api.bases import OrganizationEventsEndpointBase, OrganizationEventsError, NoProjects
 from sentry.api.helpers.events import get_direct_hit_response
 from sentry.api.paginator import GenericOffsetPaginator
 from sentry.api.serializers import EventSerializer, serialize, SimpleEventSerializer
-from sentry.api.serializers.snuba import SnubaTSResultSerializer
 from sentry.models import SnubaEvent
-from sentry.tagstore.snuba.utils import lookup_tags
-from sentry.utils.dates import parse_stats_period
 from sentry.utils.snuba import (
     raw_query,
-    transform_aliases_and_query,
-    SnubaTSResult,
     SnubaError,
+    transform_aliases_and_query,
 )
 from sentry import features
 from sentry.models.project import Project
@@ -151,134 +144,3 @@ class OrganizationEventsEndpoint(OrganizationEventsEndpointBase):
                     del result['project.id']
 
         return results
-
-
-class OrganizationEventsStatsEndpoint(OrganizationEventsEndpointBase):
-
-    def get(self, request, organization):
-        try:
-            snuba_args = self.get_snuba_query_args(request, organization)
-        except OrganizationEventsError as exc:
-            return Response({'detail': exc.message}, status=400)
-        except NoProjects:
-            return Response({'data': []})
-
-        interval = parse_stats_period(request.GET.get('interval', '1h'))
-        if interval is None:
-            interval = timedelta(hours=1)
-
-        rollup = int(interval.total_seconds())
-
-        y_axis = request.GET.get('yAxis', None)
-        if not y_axis or y_axis == 'event_count':
-            aggregations = [('count()', '', 'count')]
-        elif y_axis == 'user_count':
-            aggregations = [
-                ('uniq', 'tags[sentry:user]', 'count'),
-            ]
-            snuba_args['filter_keys']['tags_key'] = ['sentry:user']
-        else:
-            return Response(
-                {'detail': 'Param yAxis value %s not recognized.' % y_axis}, status=400)
-
-        result = raw_query(
-            aggregations=aggregations,
-            orderby='time',
-            groupby=['time'],
-            rollup=rollup,
-            referrer='api.organization-events-stats',
-            limit=10000,
-            **snuba_args
-        )
-
-        serializer = SnubaTSResultSerializer(organization, None, request.user)
-        return Response(
-            serializer.serialize(
-                SnubaTSResult(result, snuba_args['start'], snuba_args['end'], rollup),
-            ),
-            status=200,
-        )
-
-
-class OrganizationEventsHeatmapEndpoint(OrganizationEventsEndpointBase):
-
-    def get(self, request, organization):
-        try:
-            snuba_args = self.get_snuba_query_args(request, organization)
-        except OrganizationEventsError as exc:
-            return Response({'detail': exc.message}, status=400)
-        except NoProjects:
-            return Response({'detail': 'A valid project must be included.'}, status=400)
-
-        try:
-            keys = self._validate_keys(request)
-            self._validate_project_ids(request, organization, snuba_args)
-        except OrganizationEventsError as error:
-            return Response({'detail': six.text_type(error)}, status=400)
-
-        try:
-            tags = lookup_tags(keys, **snuba_args)
-        except (KeyError, SnubaError) as error:
-            logger.info(
-                'api.organization-events-heatmap',
-                extra={
-                    'organization_id': organization.id,
-                    'user_id': request.user.id,
-                    'keys': keys,
-                    'snuba_args': snuba_args,
-                    'error': six.text_type(error)
-                }
-            )
-            return Response({
-                'detail': 'Invalid query.'
-            }, status=400)
-
-        return Response(serialize(tags, request.user))
-
-    def _validate_keys(self, request):
-        keys = request.GET.getlist('key')
-        if not keys:
-            raise OrganizationEventsError('Tag keys must be specified.')
-
-        for key in keys:
-            if not tagstore.is_valid_key(key):
-                raise OrganizationEventsError('Tag key %s is not valid.' % key)
-
-        return keys
-
-    def _validate_project_ids(self, request, organization, snuba_args):
-        project_ids = snuba_args['filter_keys']['project_id']
-
-        has_global_views = features.has(
-            'organizations:global-views',
-            organization,
-            actor=request.user)
-
-        if not has_global_views and len(project_ids) > 1:
-            raise OrganizationEventsError('You cannot view events from multiple projects.')
-
-        return project_ids
-
-
-class OrganizationEventsMetaEndpoint(OrganizationEventsEndpointBase):
-
-    def get(self, request, organization):
-        try:
-            snuba_args = self.get_snuba_query_args(request, organization)
-        except OrganizationEventsError as exc:
-            return Response({'detail': exc.message}, status=400)
-        except NoProjects:
-            return Response({'count': 0})
-
-        data = raw_query(
-            aggregations=[['count()', '', 'count']],
-            referrer='api.organization-event-meta',
-            turbo=True,
-            **snuba_args
-        )['data'][0]
-
-        return Response({
-            # this needs to be multiplied to account for the `TURBO_SAMPLE_RATE`
-            # in snuba
-            'count': data['count'] * 10,
-        })
diff --git a/src/sentry/api/endpoints/organization_events_heatmap.py b/src/sentry/api/endpoints/organization_events_heatmap.py
new file mode 100644
index 0000000000..1a872b4d9f
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_events_heatmap.py
@@ -0,0 +1,75 @@
+from __future__ import absolute_import
+
+import logging
+import six
+
+from rest_framework.response import Response
+
+from sentry import tagstore
+from sentry.api.bases import OrganizationEventsEndpointBase, OrganizationEventsError, NoProjects
+from sentry.api.serializers import serialize
+from sentry.tagstore.snuba.utils import lookup_tags
+from sentry.utils.snuba import SnubaError
+from sentry import features
+
+logger = logging.getLogger('sentry.api.organization-events-heatmap')
+
+
+class OrganizationEventsHeatmapEndpoint(OrganizationEventsEndpointBase):
+
+    def get(self, request, organization):
+        try:
+            snuba_args = self.get_snuba_query_args(request, organization)
+        except OrganizationEventsError as exc:
+            return Response({'detail': exc.message}, status=400)
+        except NoProjects:
+            return Response({'detail': 'A valid project must be included.'}, status=400)
+
+        try:
+            keys = self._validate_keys(request)
+            self._validate_project_ids(request, organization, snuba_args)
+        except OrganizationEventsError as error:
+            return Response({'detail': six.text_type(error)}, status=400)
+
+        try:
+            tags = lookup_tags(keys, **snuba_args)
+        except (KeyError, SnubaError) as error:
+            logger.info(
+                'api.organization-events-heatmap',
+                extra={
+                    'organization_id': organization.id,
+                    'user_id': request.user.id,
+                    'keys': keys,
+                    'snuba_args': snuba_args,
+                    'error': six.text_type(error)
+                }
+            )
+            return Response({
+                'detail': 'Invalid query.'
+            }, status=400)
+
+        return Response(serialize(tags, request.user))
+
+    def _validate_keys(self, request):
+        keys = request.GET.getlist('key')
+        if not keys:
+            raise OrganizationEventsError('Tag keys must be specified.')
+
+        for key in keys:
+            if not tagstore.is_valid_key(key):
+                raise OrganizationEventsError('Tag key %s is not valid.' % key)
+
+        return keys
+
+    def _validate_project_ids(self, request, organization, snuba_args):
+        project_ids = snuba_args['filter_keys']['project_id']
+
+        has_global_views = features.has(
+            'organizations:global-views',
+            organization,
+            actor=request.user)
+
+        if not has_global_views and len(project_ids) > 1:
+            raise OrganizationEventsError('You cannot view events from multiple projects.')
+
+        return project_ids
diff --git a/src/sentry/api/endpoints/organization_events_meta.py b/src/sentry/api/endpoints/organization_events_meta.py
new file mode 100644
index 0000000000..04d8397211
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_events_meta.py
@@ -0,0 +1,30 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases import OrganizationEventsEndpointBase, OrganizationEventsError, NoProjects
+from sentry.utils.snuba import raw_query
+
+
+class OrganizationEventsMetaEndpoint(OrganizationEventsEndpointBase):
+
+    def get(self, request, organization):
+        try:
+            snuba_args = self.get_snuba_query_args(request, organization)
+        except OrganizationEventsError as exc:
+            return Response({'detail': exc.message}, status=400)
+        except NoProjects:
+            return Response({'count': 0})
+
+        data = raw_query(
+            aggregations=[['count()', '', 'count']],
+            referrer='api.organization-event-meta',
+            turbo=True,
+            **snuba_args
+        )['data'][0]
+
+        return Response({
+            # this needs to be multiplied to account for the `TURBO_SAMPLE_RATE`
+            # in snuba
+            'count': data['count'] * 10,
+        })
diff --git a/src/sentry/api/endpoints/organization_events_stats.py b/src/sentry/api/endpoints/organization_events_stats.py
new file mode 100644
index 0000000000..358be22663
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_events_stats.py
@@ -0,0 +1,59 @@
+from __future__ import absolute_import
+
+from datetime import timedelta
+from rest_framework.response import Response
+
+from sentry.api.bases import OrganizationEventsEndpointBase, OrganizationEventsError, NoProjects
+from sentry.api.serializers.snuba import SnubaTSResultSerializer
+from sentry.utils.dates import parse_stats_period
+from sentry.utils.snuba import (
+    raw_query,
+    SnubaTSResult,
+)
+
+
+class OrganizationEventsStatsEndpoint(OrganizationEventsEndpointBase):
+
+    def get(self, request, organization):
+        try:
+            snuba_args = self.get_snuba_query_args(request, organization)
+        except OrganizationEventsError as exc:
+            return Response({'detail': exc.message}, status=400)
+        except NoProjects:
+            return Response({'data': []})
+
+        interval = parse_stats_period(request.GET.get('interval', '1h'))
+        if interval is None:
+            interval = timedelta(hours=1)
+
+        rollup = int(interval.total_seconds())
+
+        y_axis = request.GET.get('yAxis', None)
+        if not y_axis or y_axis == 'event_count':
+            aggregations = [('count()', '', 'count')]
+        elif y_axis == 'user_count':
+            aggregations = [
+                ('uniq', 'tags[sentry:user]', 'count'),
+            ]
+            snuba_args['filter_keys']['tags_key'] = ['sentry:user']
+        else:
+            return Response(
+                {'detail': 'Param yAxis value %s not recognized.' % y_axis}, status=400)
+
+        result = raw_query(
+            aggregations=aggregations,
+            orderby='time',
+            groupby=['time'],
+            rollup=rollup,
+            referrer='api.organization-events-stats',
+            limit=10000,
+            **snuba_args
+        )
+
+        serializer = SnubaTSResultSerializer(organization, None, request.user)
+        return Response(
+            serializer.serialize(
+                SnubaTSResult(result, snuba_args['start'], snuba_args['end'], rollup),
+            ),
+            status=200,
+        )
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 81f7e62efd..672314f7ea 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -71,7 +71,10 @@ from .endpoints.organization_details import OrganizationDetailsEndpoint
 from .endpoints.organization_discover_query import OrganizationDiscoverQueryEndpoint
 from .endpoints.organization_discover_saved_queries import OrganizationDiscoverSavedQueriesEndpoint
 from .endpoints.organization_discover_saved_query_detail import OrganizationDiscoverSavedQueryDetailEndpoint
-from .endpoints.organization_events import OrganizationEventsEndpoint, OrganizationEventsMetaEndpoint, OrganizationEventsStatsEndpoint, OrganizationEventsHeatmapEndpoint
+from .endpoints.organization_events import OrganizationEventsEndpoint
+from .endpoints.organization_events_meta import OrganizationEventsMetaEndpoint
+from .endpoints.organization_events_stats import OrganizationEventsStatsEndpoint
+from .endpoints.organization_events_heatmap import OrganizationEventsHeatmapEndpoint
 from .endpoints.organization_event_details import OrganizationEventDetailsEndpoint, OrganizationEventDetailsLatestEndpoint, OrganizationEventDetailsOldestEndpoint
 from .endpoints.organization_group_index import OrganizationGroupIndexEndpoint
 from .endpoints.organization_dashboard_details import OrganizationDashboardDetailsEndpoint
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index 69c804a1ed..d089a17385 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -5,20 +5,16 @@ from six.moves.urllib.parse import urlencode
 from datetime import timedelta
 from django.utils import timezone
 from django.core.urlresolvers import reverse
-from uuid import uuid4
 
-from sentry.tagstore.base import TOP_VALUES_DEFAULT_LIMIT
 from sentry.testutils import APITestCase, SnubaTestCase
 
 
-class OrganizationEventsTestBase(APITestCase, SnubaTestCase):
+class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
     def setUp(self):
-        super(OrganizationEventsTestBase, self).setUp()
+        super(OrganizationEventsEndpointTest, self).setUp()
         self.min_ago = timezone.now() - timedelta(minutes=1)
         self.day_ago = timezone.now() - timedelta(days=1)
 
-
-class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
     def assert_events_in_response(self, response, event_ids):
         assert sorted(map(lambda x: x['eventID'], response.data)) == sorted(event_ids)
 
@@ -659,1133 +655,3 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
             response,
             [event_1.event_id, event_2.event_id, event_3.event_id, event_4.event_id],
         )
-
-
-class OrganizationEventsStatsEndpointTest(OrganizationEventsTestBase):
-    def setUp(self):
-        super(OrganizationEventsStatsEndpointTest, self).setUp()
-        self.login_as(user=self.user)
-
-        self.day_ago = self.day_ago.replace(hour=10, minute=0, second=0, microsecond=0)
-
-        self.project = self.create_project()
-        self.project2 = self.create_project()
-
-        self.group = self.create_group(project=self.project)
-        self.group2 = self.create_group(project=self.project2)
-
-        self.user = self.create_user()
-        self.user2 = self.create_user()
-        self.create_event(
-            event_id='a' * 32,
-            group=self.group,
-            datetime=self.day_ago + timedelta(minutes=1),
-            tags={'sentry:user': self.user.email},
-        )
-        self.create_event(
-            event_id='b' * 32,
-            group=self.group2,
-            datetime=self.day_ago + timedelta(hours=1, minutes=1),
-            tags={'sentry:user': self.user2.email},
-        )
-        self.create_event(
-            event_id='c' * 32,
-            group=self.group2,
-            datetime=self.day_ago + timedelta(hours=1, minutes=2),
-            tags={'sentry:user': self.user2.email},
-        )
-
-    def test_simple(self):
-        url = reverse(
-            'sentry-api-0-organization-events-stats',
-            kwargs={
-                'organization_slug': self.project.organization.slug,
-            }
-        )
-        response = self.client.get('%s?%s' % (url, urlencode({
-            'start': self.day_ago.isoformat()[:19],
-            'end': (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
-            'interval': '1h',
-        })), format='json')
-
-        assert response.status_code == 200, response.content
-        assert [attrs for time, attrs in response.data['data']] == [
-            [],
-            [{'count': 1}],
-            [{'count': 2}],
-        ]
-
-    def test_no_projects(self):
-        org = self.create_organization(owner=self.user)
-        self.login_as(user=self.user)
-
-        url = reverse(
-            'sentry-api-0-organization-events-stats',
-            kwargs={
-                'organization_slug': org.slug,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data['data']) == 0
-
-    def test_groupid_filter(self):
-        url = reverse(
-            'sentry-api-0-organization-events-stats',
-            kwargs={
-                'organization_slug': self.organization.slug,
-            }
-        )
-        url = '%s?%s' % (url, urlencode({
-            'start': self.day_ago.isoformat()[:19],
-            'end': (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
-            'interval': '1h',
-            'group': self.group.id
-        }))
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data['data'])
-
-    def test_groupid_filter_invalid_value(self):
-        url = reverse(
-            'sentry-api-0-organization-events-stats',
-            kwargs={
-                'organization_slug': self.organization.slug,
-            }
-        )
-        url = '%s?group=not-a-number' % (url,)
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 400, response.content
-
-    def test_user_count(self):
-        self.create_event(
-            event_id='d' * 32,
-            group=self.group2,
-            datetime=self.day_ago + timedelta(minutes=2),
-            tags={'sentry:user': self.user2.email},
-        )
-        url = reverse(
-            'sentry-api-0-organization-events-stats',
-            kwargs={
-                'organization_slug': self.project.organization.slug,
-            }
-        )
-        response = self.client.get('%s?%s' % (url, urlencode({
-            'start': self.day_ago.isoformat()[:19],
-            'end': (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
-            'interval': '1h',
-            'yAxis': 'user_count',
-        })), format='json')
-
-        assert response.status_code == 200, response.content
-
-        assert [attrs for time, attrs in response.data['data']] == [
-            [],
-            [{'count': 2}],
-            [{'count': 1}],
-        ]
-
-    def test_with_event_count_flag(self):
-        url = reverse(
-            'sentry-api-0-organization-events-stats',
-            kwargs={
-                'organization_slug': self.project.organization.slug,
-            }
-        )
-        response = self.client.get('%s?%s' % (url, urlencode({
-            'start': self.day_ago.isoformat()[:19],
-            'end': (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
-            'interval': '1h',
-            'yAxis': 'event_count',
-        })), format='json')
-
-        assert response.status_code == 200, response.content
-        assert [attrs for time, attrs in response.data['data']] == [
-            [],
-            [{'count': 1}],
-            [{'count': 2}],
-        ]
-
-    def test_special_fields_ignored(self):
-        url = reverse(
-            'sentry-api-0-organization-events-stats',
-            kwargs={
-                'organization_slug': self.project.organization.slug,
-            }
-        )
-        response = self.client.get('%s?%s' % (url, urlencode({
-            'start': self.day_ago.isoformat()[:19],
-            'end': (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
-            'interval': '1h',
-            'yAxis': 'event_count',
-            'query': 'event_count:>5'
-        })), format='json')
-
-        assert response.status_code == 200, response.content
-        assert [attrs for time, attrs in response.data['data']] == [
-            [],
-            [{'count': 1}],
-            [{'count': 2}],
-        ]
-
-
-class OrganizationEventsHeatmapEndpointTest(OrganizationEventsTestBase):
-    def setUp(self):
-        super(OrganizationEventsHeatmapEndpointTest, self).setUp()
-        self.login_as(user=self.user)
-        self.project = self.create_project()
-        self.project2 = self.create_project()
-        self.url = reverse(
-            'sentry-api-0-organization-events-heatmap',
-            kwargs={
-                'organization_slug': self.project.organization.slug,
-            }
-        )
-        self.min_ago = self.min_ago.replace(microsecond=0)
-        self.min_ago_iso = self.min_ago.isoformat()
-        self.day_ago = self.day_ago.replace(microsecond=0)
-
-    def test_simple(self):
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'green'},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'number': 'one'},
-            },
-            project_id=self.project2.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'green'},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'red'},
-            },
-            project_id=self.project.id
-        )
-
-        with self.feature('organizations:global-views'):
-            response = self.client.get(self.url, {'key': ['number', 'color']}, format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 2
-        assert response.data[0] == {
-            'topValues': [
-                {
-                    'count': 1,
-                    'name': 'one',
-                    'value': 'one',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'number',
-                    'firstSeen': self.min_ago_iso
-                }
-            ],
-            'totalValues': 4,
-            'name': 'Number',
-            'key': 'number'
-        }
-        assert response.data[1] == {
-            'topValues': [
-                {
-                    'count': 2,
-                    'name': 'green',
-                    'value': 'green',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
-                },
-                {
-                    'count': 1,
-                    'name': 'red',
-                    'value': 'red',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
-                }
-            ],
-            'totalValues': 4,
-            'name': 'Color',
-            'key': 'color'
-        }
-
-    def test_single_key(self):
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'world': 'hello'},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'yellow'},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'red'},
-            },
-            project_id=self.project2.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'yellow'},
-            },
-            project_id=self.project.id
-        )
-
-        with self.feature('organizations:global-views'):
-            response = self.client.get(self.url, {'key': ['color']}, format='json')
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data[0] == {
-            'topValues': [
-                {
-                    'count': 2,
-                    'name': 'yellow',
-                    'value': 'yellow',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
-                },
-                {
-                    'count': 1,
-                    'name': 'red',
-                    'value': 'red',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
-                }
-            ],
-            'totalValues': 4,
-            'name': 'Color',
-            'key': 'color'
-        }
-
-    def test_with_message_query(self):
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'message': 'how to make fast',
-                'tags': {'color': 'green'},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'message': 'Delet the Data',
-                'tags': {'color': 'red'},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'message': 'Data the Delet ',
-                'tags': {'color': 'yellow'},
-            },
-            project_id=self.project2.id
-        )
-
-        with self.feature('organizations:global-views'):
-            response = self.client.get(
-                self.url, {
-                    'query': 'delet', 'key': ['color']}, format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-
-        assert response.data[0] == {
-            'topValues': [
-                {
-                    'count': 1,
-                    'name': 'yellow',
-                    'value': 'yellow',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
-                },
-                {
-                    'count': 1,
-                    'name': 'red',
-                    'value': 'red',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
-                }
-            ],
-            'totalValues': 2,
-            'name': 'Color',
-            'key': 'color'
-        }
-
-    def test_with_condition(self):
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'message': 'how to make fast',
-                'tags': {'color': 'green'},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'message': 'Delet the Data',
-                'tags': {'color': 'red'},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'message': 'Data the Delet ',
-                'tags': {'color': 'yellow'},
-            },
-            project_id=self.project2.id
-        )
-
-        with self.feature('organizations:global-views'):
-            response = self.client.get(
-                self.url, {
-                    'query': 'color:yellow', 'key': ['color', 'project.name']}, format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 2
-
-        assert response.data[0] == {
-            'topValues': [
-                {
-                    'count': 1,
-                    'name': 'yellow',
-                    'value': 'yellow',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
-                },
-            ],
-            'totalValues': 1,
-            'name': 'Color',
-            'key': 'color'
-        }
-
-        assert response.data[1] == {
-            'topValues': [
-                {
-                    'count': 1,
-                    'name': self.project2.slug,
-                    'value': self.project2.slug,
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'project.name',
-                    'firstSeen': self.min_ago_iso
-                }
-            ],
-            'totalValues': 1,
-            'name': 'Project.Name',
-            'key': 'project.name'
-        }
-
-    def test_start_end(self):
-        two_days_ago = self.day_ago - timedelta(days=1)
-        hour_ago = self.min_ago - timedelta(hours=1)
-        two_hours_ago = hour_ago - timedelta(hours=1)
-
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': two_days_ago.isoformat(),
-                'tags': {'color': 'red'},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': hour_ago.isoformat(),
-                'tags': {'color': 'red'},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': two_hours_ago.isoformat(),
-                'tags': {'color': 'red'},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': timezone.now().isoformat(),
-                'tags': {'color': 'red'},
-            },
-            project_id=self.project2.id
-        )
-
-        with self.feature('organizations:global-views'):
-            response = self.client.get(
-                self.url,
-                {
-                    'start': self.day_ago.isoformat()[:19],
-                    'end': self.min_ago.isoformat()[:19],
-                    'key': ['color'],
-                },
-                format='json'
-            )
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data[0] == {
-            'topValues': [
-                {
-                    'count': 2,
-                    'name': 'red',
-                    'value': 'red',
-                    'lastSeen': hour_ago.isoformat(),
-                    'key': 'color',
-                    'firstSeen': two_hours_ago.isoformat()
-                }
-            ],
-            'totalValues': 2,
-            'name': 'Color',
-            'key': 'color'
-        }
-
-    def test_excluded_tag(self):
-        self.user = self.create_user()
-        self.user2 = self.create_user()
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.day_ago.isoformat(),
-                'tags': {'sentry:user': self.user.email},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.day_ago.isoformat(),
-                'tags': {'sentry:user': self.user2.email},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.day_ago.isoformat(),
-                'tags': {'sentry:user': self.user2.email},
-            },
-            project_id=self.project.id
-        )
-
-        response = self.client.get(
-            self.url,
-            {
-                'key': ['user'],
-                'project': [self.project.id]
-            },
-            format='json'
-        )
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data[0] == {
-            'topValues': [
-                {
-                    'count': 2,
-                    'name': self.user2.email,
-                    'value': self.user2.email,
-                    'lastSeen': self.day_ago.isoformat(),
-                    'key': 'user',
-                    'firstSeen': self.day_ago.isoformat()
-                },
-                {
-                    'count': 1,
-                    'name': self.user.email,
-                    'value': self.user.email,
-                    'lastSeen': self.day_ago.isoformat(),
-                    'key': 'user',
-                    'firstSeen': self.day_ago.isoformat()
-                }
-            ],
-            'totalValues': 3,
-            'name': 'User',
-            'key': 'user'
-        }
-
-    def test_no_projects(self):
-        org = self.create_organization(owner=self.user)
-        url = reverse(
-            'sentry-api-0-organization-events-heatmap',
-            kwargs={
-                'organization_slug': org.slug,
-            }
-        )
-        response = self.client.get(url, {'key': ['color']}, format='json')
-        assert response.status_code == 400, response.content
-        assert response.data == {'detail': 'A valid project must be included.'}
-
-    def test_no_key_param(self):
-        response = self.client.get(self.url, {'project': [self.project.id]}, format='json')
-        assert response.status_code == 400, response.content
-        assert response.data == {'detail': 'Tag keys must be specified.'}
-
-    def test_multiple_projects_without_global_view(self):
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-            },
-            project_id=self.project2.id
-        )
-
-        response = self.client.get(self.url, {'key': ['color']}, format='json')
-        assert response.status_code == 400, response.content
-        assert response.data == {'detail': 'You cannot view events from multiple projects.'}
-
-    def test_project_selected(self):
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'green'},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'number': 'one'},
-            },
-            project_id=self.project2.id
-        )
-
-        with self.feature('organizations:global-views'):
-            response = self.client.get(
-                self.url, {
-                    'key': [
-                        'number', 'color', 'project.name'], 'project': [
-                        self.project.id]}, format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 3
-        assert response.data[0] == {
-            'topValues': [],
-            'totalValues': 1,
-            'name': 'Number',
-            'key': 'number'
-        }
-        assert response.data[1] == {
-            'topValues': [
-                {
-                    'count': 1,
-                    'name': 'green',
-                    'value': 'green',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
-                },
-            ],
-            'totalValues': 1,
-            'name': 'Color',
-            'key': 'color'
-        }
-
-        assert response.data[2] == {
-            'topValues': [
-                {
-                    'count': 1,
-                    'name': self.project.slug,
-                    'value': self.project.slug,
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'project.name',
-                    'firstSeen': self.min_ago_iso
-                },
-            ],
-            'totalValues': 1,
-            'name': 'Project.Name',
-            'key': 'project.name'
-        }
-
-    def test_project_key(self):
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'green'},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'number': 'one'},
-            },
-            project_id=self.project2.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'green'},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'red'},
-            },
-            project_id=self.project.id
-        )
-
-        with self.feature('organizations:global-views'):
-            response = self.client.get(
-                self.url, {
-                    'key': [
-                        'project.name', 'number', 'color']}, format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 3
-        assert response.data[0] == {
-            'topValues': [
-                {
-                    'count': 3,
-                    'name': self.project.slug,
-                    'value': self.project.slug,
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'project.name',
-                    'firstSeen': self.min_ago_iso
-                },
-                {
-                    'count': 1,
-                    'name': self.project2.slug,
-                    'value': self.project2.slug,
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'project.name',
-                    'firstSeen': self.min_ago_iso
-                }
-            ],
-            'totalValues': 4,
-            'name': 'Project.Name',
-            'key': 'project.name'
-        }
-        assert response.data[1] == {
-            'topValues': [
-                {
-                    'count': 1,
-                    'name': 'one',
-                    'value': 'one',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'number',
-                    'firstSeen': self.min_ago_iso
-                }
-            ],
-            'totalValues': 4,
-            'name': 'Number',
-            'key': 'number'
-        }
-        assert response.data[2] == {
-            'topValues': [
-                {
-                    'count': 2,
-                    'name': 'green',
-                    'value': 'green',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
-                },
-                {
-                    'count': 1,
-                    'name': 'red',
-                    'value': 'red',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
-                }
-            ],
-            'totalValues': 4,
-            'name': 'Color',
-            'key': 'color'
-        }
-
-    def test_non_tag_key(self):
-        user1 = {
-            'id': '1',
-            'ip_address': '127.0.0.1',
-            'email': 'foo@example.com',
-            'username': 'foo',
-        }
-        user2 = {
-            'id': '2',
-            'ip_address': '127.0.0.2',
-            'email': 'bar@example.com',
-            'username': 'bar',
-        }
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'user': user1,
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'green'},
-                'user': user2,
-            },
-            project_id=self.project2.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'green'},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'red'},
-                'user': user1,
-            },
-            project_id=self.project.id
-        )
-
-        with self.feature('organizations:global-views'):
-            response = self.client.get(
-                self.url, {
-                    'key': [
-                        'user.email', 'user.ip']}, format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 2
-
-        assert response.data[0] == {
-            'topValues': [
-                {
-                    'count': 2,
-                    'name': user1['email'],
-                    'value': user1['email'],
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'user.email',
-                    'firstSeen': self.min_ago_iso
-                },
-                {
-                    'count': 1,
-                    'name': user2['email'],
-                    'value': user2['email'],
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'user.email',
-                    'firstSeen': self.min_ago_iso
-                }
-            ],
-            'totalValues': 4,
-            'name': 'User.Email',
-            'key': 'user.email'
-        }
-        assert response.data[1] == {
-            'topValues': [
-                {
-                    'count': 2,
-                    'name': user1['ip_address'],
-                    'value': user1['ip_address'],
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'user.ip',
-                    'firstSeen': self.min_ago_iso
-                },
-                {
-                    'count': 1,
-                    'name': user2['ip_address'],
-                    'value': user2['ip_address'],
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'user.ip',
-                    'firstSeen': self.min_ago_iso
-                },
-            ],
-            'totalValues': 4,
-            'name': 'User.Ip',
-            'key': 'user.ip'
-        }
-
-    def test_non_tag_key__multiple_values_and_no_value(self):
-        frame = {
-            'filename': 'server.php',
-            'lineno': 21,
-            'in_app': True,
-        }
-
-        # Check that error.type works with chained exceptions
-        # as they create multiple results for exception_stacks.type
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'exception': {
-                    'values': [
-                        {'type': 'PDOException', 'stacktrace': {
-                            'frames': [frame]}, 'value': 'Database error'},
-                        {'type': 'QueryException', 'stacktrace': {
-                            'frames': [frame]}, 'value': 'Query failed'},
-                    ]
-                }
-            },
-            project_id=self.project.id
-        )
-        # No stack traces
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'exception': {
-                    'values': []
-                }
-            },
-            project_id=self.project.id
-        )
-
-        response = self.client.get(
-            self.url,
-            {'key': ['error.type'], 'project': [self.project.id]},
-            format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-
-        assert response.data[0] == {
-            'topValues': [
-                {
-                    'count': 1,
-                    'name': '',
-                    'value': '',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'error.type',
-                    'firstSeen': self.min_ago_iso
-                },
-                {
-                    'count': 1,
-                    'name': 'QueryException',
-                    'value': 'QueryException',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'error.type',
-                    'firstSeen': self.min_ago_iso
-                },
-            ],
-            'totalValues': 2,
-            'name': 'Error.Type',
-            'key': 'error.type'
-        }
-
-    def test_value_limit(self):
-        for i in range(0, 12):
-            self.store_event(
-                data={
-                    'event_id': uuid4().hex,
-                    'timestamp': self.min_ago_iso,
-                    'tags': {'color': 'color%d' % i}
-                },
-                project_id=self.create_project().id
-            )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'yellow'}
-            },
-            project_id=self.project2.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'yellow'}
-            },
-            project_id=self.project2.id
-        )
-        with self.feature('organizations:global-views'):
-            response = self.client.get(
-                self.url, {
-                    'key': ['project.name', 'color']}, format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 2
-        assert len(response.data[0]['topValues']) == TOP_VALUES_DEFAULT_LIMIT
-        assert response.data[0]['topValues'][0] == {
-            'count': 2, 'name': self.project2.slug, 'value': self.project2.slug,
-            'lastSeen': self.min_ago_iso, 'key': 'project.name', 'firstSeen': self.min_ago_iso
-        }
-        assert len(response.data[1]['topValues']) == TOP_VALUES_DEFAULT_LIMIT
-        assert response.data[1]['topValues'][0] == {
-            'count': 2, 'name': 'yellow', 'value': 'yellow',
-            'lastSeen': self.min_ago_iso, 'key': 'color', 'firstSeen': self.min_ago_iso
-        }
-
-    def test_special_fields_ignored(self):
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'yellow'}
-            },
-            project_id=self.project2.id
-        )
-        with self.feature('organizations:global-views'):
-            response = self.client.get(
-                self.url, {
-                    'key': ['color'], 'query': 'user_count:>5'}, format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data[0] == {
-            'topValues': [{
-                'count': 1, 'name': 'yellow', 'value': 'yellow',
-                'lastSeen': self.min_ago_iso, 'key': 'color', 'firstSeen': self.min_ago_iso
-            }],
-            'totalValues': 1,
-            'name': 'Color',
-            'key': 'color'
-        }
-
-    def test_malformed_query(self):
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-            },
-            project_id=self.project2.id
-        )
-
-        response = self.client.get(
-            self.url, {
-                'key': ['color'], 'query': '\n\n\n\n'}, format='json')
-        assert response.status_code == 400, response.content
-        assert response.data == {
-            'detail': "Parse error: 'search' (column 1). This is commonly caused by unmatched-parentheses. Enclose any text in double quotes."}
-
-    def test_invalid_tag(self):
-        response = self.client.get(
-            self.url, {
-                'key': ['color;;;']}, format='json')
-        assert response.status_code == 400, response.content
-        assert response.data == {'detail': "Tag key color;;; is not valid."}
-
-
-class OrganizationEventsMetaEndpoint(OrganizationEventsTestBase):
-    def test_simple(self):
-        self.login_as(user=self.user)
-
-        project = self.create_project()
-        project2 = self.create_project()
-        group = self.create_group(project=project)
-        group2 = self.create_group(project=project2)
-        self.create_event(event_id='a' * 32, group=group, datetime=self.min_ago)
-        self.create_event(event_id='m' * 32, group=group2, datetime=self.min_ago)
-
-        url = reverse(
-            'sentry-api-0-organization-events-meta',
-            kwargs={
-                'organization_slug': project.organization.slug,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        # this is not exact because of turbo=True
-        assert response.data['count'] == 10
-
-    def test_search(self):
-        self.login_as(user=self.user)
-
-        project = self.create_project()
-        group = self.create_group(project=project)
-        self.create_event(
-            event_id='x' * 32,
-            group=group,
-            message="how to make fast",
-            datetime=self.min_ago)
-        self.create_event(
-            event_id='m' * 32,
-            group=group,
-            message="Delet the Data",
-            datetime=self.min_ago,
-        )
-
-        url = reverse(
-            'sentry-api-0-organization-events-meta',
-            kwargs={
-                'organization_slug': project.organization.slug,
-            }
-        )
-        response = self.client.get(url, {'query': 'delet'}, format='json')
-
-        assert response.status_code == 200, response.content
-        # this is not exact because of turbo=True
-        assert response.data['count'] == 10
-
-    def test_no_projects(self):
-        org = self.create_organization(owner=self.user)
-        self.login_as(user=self.user)
-
-        url = reverse(
-            'sentry-api-0-organization-events-meta',
-            kwargs={
-                'organization_slug': org.slug,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['count'] == 0
diff --git a/tests/snuba/api/endpoints/test_organization_events_heatmap.py b/tests/snuba/api/endpoints/test_organization_events_heatmap.py
new file mode 100644
index 0000000000..937be81f35
--- /dev/null
+++ b/tests/snuba/api/endpoints/test_organization_events_heatmap.py
@@ -0,0 +1,900 @@
+from __future__ import absolute_import
+
+from datetime import timedelta
+from django.utils import timezone
+from django.core.urlresolvers import reverse
+from uuid import uuid4
+
+from sentry.tagstore.base import TOP_VALUES_DEFAULT_LIMIT
+from sentry.testutils import APITestCase, SnubaTestCase
+
+
+class OrganizationEventsHeatmapEndpointTest(APITestCase, SnubaTestCase):
+    def setUp(self):
+        super(OrganizationEventsHeatmapEndpointTest, self).setUp()
+        self.min_ago = (timezone.now() - timedelta(minutes=1)).replace(microsecond=0)
+        self.day_ago = (timezone.now() - timedelta(days=1)).replace(microsecond=0)
+        self.login_as(user=self.user)
+        self.project = self.create_project()
+        self.project2 = self.create_project()
+        self.url = reverse(
+            'sentry-api-0-organization-events-heatmap',
+            kwargs={
+                'organization_slug': self.project.organization.slug,
+            }
+        )
+        self.min_ago_iso = self.min_ago.isoformat()
+
+    def test_simple(self):
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'color': 'green'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'number': 'one'},
+            },
+            project_id=self.project2.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'color': 'green'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'color': 'red'},
+            },
+            project_id=self.project.id
+        )
+
+        with self.feature('organizations:global-views'):
+            response = self.client.get(self.url, {'key': ['number', 'color']}, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        assert response.data[0] == {
+            'topValues': [
+                {
+                    'count': 1,
+                    'name': 'one',
+                    'value': 'one',
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'number',
+                    'firstSeen': self.min_ago_iso
+                }
+            ],
+            'totalValues': 4,
+            'name': 'Number',
+            'key': 'number'
+        }
+        assert response.data[1] == {
+            'topValues': [
+                {
+                    'count': 2,
+                    'name': 'green',
+                    'value': 'green',
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'color',
+                    'firstSeen': self.min_ago_iso
+                },
+                {
+                    'count': 1,
+                    'name': 'red',
+                    'value': 'red',
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'color',
+                    'firstSeen': self.min_ago_iso
+                }
+            ],
+            'totalValues': 4,
+            'name': 'Color',
+            'key': 'color'
+        }
+
+    def test_single_key(self):
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'world': 'hello'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'color': 'yellow'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'color': 'red'},
+            },
+            project_id=self.project2.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'color': 'yellow'},
+            },
+            project_id=self.project.id
+        )
+
+        with self.feature('organizations:global-views'):
+            response = self.client.get(self.url, {'key': ['color']}, format='json')
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0] == {
+            'topValues': [
+                {
+                    'count': 2,
+                    'name': 'yellow',
+                    'value': 'yellow',
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'color',
+                    'firstSeen': self.min_ago_iso
+                },
+                {
+                    'count': 1,
+                    'name': 'red',
+                    'value': 'red',
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'color',
+                    'firstSeen': self.min_ago_iso
+                }
+            ],
+            'totalValues': 4,
+            'name': 'Color',
+            'key': 'color'
+        }
+
+    def test_with_message_query(self):
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'message': 'how to make fast',
+                'tags': {'color': 'green'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'message': 'Delet the Data',
+                'tags': {'color': 'red'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'message': 'Data the Delet ',
+                'tags': {'color': 'yellow'},
+            },
+            project_id=self.project2.id
+        )
+
+        with self.feature('organizations:global-views'):
+            response = self.client.get(
+                self.url, {
+                    'query': 'delet', 'key': ['color']}, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+
+        assert response.data[0] == {
+            'topValues': [
+                {
+                    'count': 1,
+                    'name': 'yellow',
+                    'value': 'yellow',
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'color',
+                    'firstSeen': self.min_ago_iso
+                },
+                {
+                    'count': 1,
+                    'name': 'red',
+                    'value': 'red',
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'color',
+                    'firstSeen': self.min_ago_iso
+                }
+            ],
+            'totalValues': 2,
+            'name': 'Color',
+            'key': 'color'
+        }
+
+    def test_with_condition(self):
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'message': 'how to make fast',
+                'tags': {'color': 'green'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'message': 'Delet the Data',
+                'tags': {'color': 'red'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'message': 'Data the Delet ',
+                'tags': {'color': 'yellow'},
+            },
+            project_id=self.project2.id
+        )
+
+        with self.feature('organizations:global-views'):
+            response = self.client.get(
+                self.url, {
+                    'query': 'color:yellow', 'key': ['color', 'project.name']}, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+
+        assert response.data[0] == {
+            'topValues': [
+                {
+                    'count': 1,
+                    'name': 'yellow',
+                    'value': 'yellow',
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'color',
+                    'firstSeen': self.min_ago_iso
+                },
+            ],
+            'totalValues': 1,
+            'name': 'Color',
+            'key': 'color'
+        }
+
+        assert response.data[1] == {
+            'topValues': [
+                {
+                    'count': 1,
+                    'name': self.project2.slug,
+                    'value': self.project2.slug,
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'project.name',
+                    'firstSeen': self.min_ago_iso
+                }
+            ],
+            'totalValues': 1,
+            'name': 'Project.Name',
+            'key': 'project.name'
+        }
+
+    def test_start_end(self):
+        two_days_ago = self.day_ago - timedelta(days=1)
+        hour_ago = self.min_ago - timedelta(hours=1)
+        two_hours_ago = hour_ago - timedelta(hours=1)
+
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': two_days_ago.isoformat(),
+                'tags': {'color': 'red'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': hour_ago.isoformat(),
+                'tags': {'color': 'red'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': two_hours_ago.isoformat(),
+                'tags': {'color': 'red'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': timezone.now().isoformat(),
+                'tags': {'color': 'red'},
+            },
+            project_id=self.project2.id
+        )
+
+        with self.feature('organizations:global-views'):
+            response = self.client.get(
+                self.url,
+                {
+                    'start': self.day_ago.isoformat()[:19],
+                    'end': self.min_ago.isoformat()[:19],
+                    'key': ['color'],
+                },
+                format='json'
+            )
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0] == {
+            'topValues': [
+                {
+                    'count': 2,
+                    'name': 'red',
+                    'value': 'red',
+                    'lastSeen': hour_ago.isoformat(),
+                    'key': 'color',
+                    'firstSeen': two_hours_ago.isoformat()
+                }
+            ],
+            'totalValues': 2,
+            'name': 'Color',
+            'key': 'color'
+        }
+
+    def test_excluded_tag(self):
+        self.user = self.create_user()
+        self.user2 = self.create_user()
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.day_ago.isoformat(),
+                'tags': {'sentry:user': self.user.email},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.day_ago.isoformat(),
+                'tags': {'sentry:user': self.user2.email},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.day_ago.isoformat(),
+                'tags': {'sentry:user': self.user2.email},
+            },
+            project_id=self.project.id
+        )
+
+        response = self.client.get(
+            self.url,
+            {
+                'key': ['user'],
+                'project': [self.project.id]
+            },
+            format='json'
+        )
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0] == {
+            'topValues': [
+                {
+                    'count': 2,
+                    'name': self.user2.email,
+                    'value': self.user2.email,
+                    'lastSeen': self.day_ago.isoformat(),
+                    'key': 'user',
+                    'firstSeen': self.day_ago.isoformat()
+                },
+                {
+                    'count': 1,
+                    'name': self.user.email,
+                    'value': self.user.email,
+                    'lastSeen': self.day_ago.isoformat(),
+                    'key': 'user',
+                    'firstSeen': self.day_ago.isoformat()
+                }
+            ],
+            'totalValues': 3,
+            'name': 'User',
+            'key': 'user'
+        }
+
+    def test_no_projects(self):
+        org = self.create_organization(owner=self.user)
+        url = reverse(
+            'sentry-api-0-organization-events-heatmap',
+            kwargs={
+                'organization_slug': org.slug,
+            }
+        )
+        response = self.client.get(url, {'key': ['color']}, format='json')
+        assert response.status_code == 400, response.content
+        assert response.data == {'detail': 'A valid project must be included.'}
+
+    def test_no_key_param(self):
+        response = self.client.get(self.url, {'project': [self.project.id]}, format='json')
+        assert response.status_code == 400, response.content
+        assert response.data == {'detail': 'Tag keys must be specified.'}
+
+    def test_multiple_projects_without_global_view(self):
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+            },
+            project_id=self.project2.id
+        )
+
+        response = self.client.get(self.url, {'key': ['color']}, format='json')
+        assert response.status_code == 400, response.content
+        assert response.data == {'detail': 'You cannot view events from multiple projects.'}
+
+    def test_project_selected(self):
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'color': 'green'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'number': 'one'},
+            },
+            project_id=self.project2.id
+        )
+
+        with self.feature('organizations:global-views'):
+            response = self.client.get(
+                self.url, {
+                    'key': [
+                        'number', 'color', 'project.name'], 'project': [
+                        self.project.id]}, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 3
+        assert response.data[0] == {
+            'topValues': [],
+            'totalValues': 1,
+            'name': 'Number',
+            'key': 'number'
+        }
+        assert response.data[1] == {
+            'topValues': [
+                {
+                    'count': 1,
+                    'name': 'green',
+                    'value': 'green',
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'color',
+                    'firstSeen': self.min_ago_iso
+                },
+            ],
+            'totalValues': 1,
+            'name': 'Color',
+            'key': 'color'
+        }
+
+        assert response.data[2] == {
+            'topValues': [
+                {
+                    'count': 1,
+                    'name': self.project.slug,
+                    'value': self.project.slug,
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'project.name',
+                    'firstSeen': self.min_ago_iso
+                },
+            ],
+            'totalValues': 1,
+            'name': 'Project.Name',
+            'key': 'project.name'
+        }
+
+    def test_project_key(self):
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'color': 'green'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'number': 'one'},
+            },
+            project_id=self.project2.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'color': 'green'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'color': 'red'},
+            },
+            project_id=self.project.id
+        )
+
+        with self.feature('organizations:global-views'):
+            response = self.client.get(
+                self.url, {
+                    'key': [
+                        'project.name', 'number', 'color']}, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 3
+        assert response.data[0] == {
+            'topValues': [
+                {
+                    'count': 3,
+                    'name': self.project.slug,
+                    'value': self.project.slug,
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'project.name',
+                    'firstSeen': self.min_ago_iso
+                },
+                {
+                    'count': 1,
+                    'name': self.project2.slug,
+                    'value': self.project2.slug,
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'project.name',
+                    'firstSeen': self.min_ago_iso
+                }
+            ],
+            'totalValues': 4,
+            'name': 'Project.Name',
+            'key': 'project.name'
+        }
+        assert response.data[1] == {
+            'topValues': [
+                {
+                    'count': 1,
+                    'name': 'one',
+                    'value': 'one',
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'number',
+                    'firstSeen': self.min_ago_iso
+                }
+            ],
+            'totalValues': 4,
+            'name': 'Number',
+            'key': 'number'
+        }
+        assert response.data[2] == {
+            'topValues': [
+                {
+                    'count': 2,
+                    'name': 'green',
+                    'value': 'green',
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'color',
+                    'firstSeen': self.min_ago_iso
+                },
+                {
+                    'count': 1,
+                    'name': 'red',
+                    'value': 'red',
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'color',
+                    'firstSeen': self.min_ago_iso
+                }
+            ],
+            'totalValues': 4,
+            'name': 'Color',
+            'key': 'color'
+        }
+
+    def test_non_tag_key(self):
+        user1 = {
+            'id': '1',
+            'ip_address': '127.0.0.1',
+            'email': 'foo@example.com',
+            'username': 'foo',
+        }
+        user2 = {
+            'id': '2',
+            'ip_address': '127.0.0.2',
+            'email': 'bar@example.com',
+            'username': 'bar',
+        }
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'user': user1,
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'color': 'green'},
+                'user': user2,
+            },
+            project_id=self.project2.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'color': 'green'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'color': 'red'},
+                'user': user1,
+            },
+            project_id=self.project.id
+        )
+
+        with self.feature('organizations:global-views'):
+            response = self.client.get(
+                self.url, {
+                    'key': [
+                        'user.email', 'user.ip']}, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+
+        assert response.data[0] == {
+            'topValues': [
+                {
+                    'count': 2,
+                    'name': user1['email'],
+                    'value': user1['email'],
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'user.email',
+                    'firstSeen': self.min_ago_iso
+                },
+                {
+                    'count': 1,
+                    'name': user2['email'],
+                    'value': user2['email'],
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'user.email',
+                    'firstSeen': self.min_ago_iso
+                }
+            ],
+            'totalValues': 4,
+            'name': 'User.Email',
+            'key': 'user.email'
+        }
+        assert response.data[1] == {
+            'topValues': [
+                {
+                    'count': 2,
+                    'name': user1['ip_address'],
+                    'value': user1['ip_address'],
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'user.ip',
+                    'firstSeen': self.min_ago_iso
+                },
+                {
+                    'count': 1,
+                    'name': user2['ip_address'],
+                    'value': user2['ip_address'],
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'user.ip',
+                    'firstSeen': self.min_ago_iso
+                },
+            ],
+            'totalValues': 4,
+            'name': 'User.Ip',
+            'key': 'user.ip'
+        }
+
+    def test_non_tag_key__multiple_values_and_no_value(self):
+        frame = {
+            'filename': 'server.php',
+            'lineno': 21,
+            'in_app': True,
+        }
+
+        # Check that error.type works with chained exceptions
+        # as they create multiple results for exception_stacks.type
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'exception': {
+                    'values': [
+                        {'type': 'PDOException', 'stacktrace': {
+                            'frames': [frame]}, 'value': 'Database error'},
+                        {'type': 'QueryException', 'stacktrace': {
+                            'frames': [frame]}, 'value': 'Query failed'},
+                    ]
+                }
+            },
+            project_id=self.project.id
+        )
+        # No stack traces
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'exception': {
+                    'values': []
+                }
+            },
+            project_id=self.project.id
+        )
+
+        response = self.client.get(
+            self.url,
+            {'key': ['error.type'], 'project': [self.project.id]},
+            format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+
+        assert response.data[0] == {
+            'topValues': [
+                {
+                    'count': 1,
+                    'name': '',
+                    'value': '',
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'error.type',
+                    'firstSeen': self.min_ago_iso
+                },
+                {
+                    'count': 1,
+                    'name': 'QueryException',
+                    'value': 'QueryException',
+                    'lastSeen': self.min_ago_iso,
+                    'key': 'error.type',
+                    'firstSeen': self.min_ago_iso
+                },
+            ],
+            'totalValues': 2,
+            'name': 'Error.Type',
+            'key': 'error.type'
+        }
+
+    def test_value_limit(self):
+        for i in range(0, 12):
+            self.store_event(
+                data={
+                    'event_id': uuid4().hex,
+                    'timestamp': self.min_ago_iso,
+                    'tags': {'color': 'color%d' % i}
+                },
+                project_id=self.create_project().id
+            )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'color': 'yellow'}
+            },
+            project_id=self.project2.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'color': 'yellow'}
+            },
+            project_id=self.project2.id
+        )
+        with self.feature('organizations:global-views'):
+            response = self.client.get(
+                self.url, {
+                    'key': ['project.name', 'color']}, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        assert len(response.data[0]['topValues']) == TOP_VALUES_DEFAULT_LIMIT
+        assert response.data[0]['topValues'][0] == {
+            'count': 2, 'name': self.project2.slug, 'value': self.project2.slug,
+            'lastSeen': self.min_ago_iso, 'key': 'project.name', 'firstSeen': self.min_ago_iso
+        }
+        assert len(response.data[1]['topValues']) == TOP_VALUES_DEFAULT_LIMIT
+        assert response.data[1]['topValues'][0] == {
+            'count': 2, 'name': 'yellow', 'value': 'yellow',
+            'lastSeen': self.min_ago_iso, 'key': 'color', 'firstSeen': self.min_ago_iso
+        }
+
+    def test_special_fields_ignored(self):
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'color': 'yellow'}
+            },
+            project_id=self.project2.id
+        )
+        with self.feature('organizations:global-views'):
+            response = self.client.get(
+                self.url, {
+                    'key': ['color'], 'query': 'user_count:>5'}, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0] == {
+            'topValues': [{
+                'count': 1, 'name': 'yellow', 'value': 'yellow',
+                'lastSeen': self.min_ago_iso, 'key': 'color', 'firstSeen': self.min_ago_iso
+            }],
+            'totalValues': 1,
+            'name': 'Color',
+            'key': 'color'
+        }
+
+    def test_malformed_query(self):
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+            },
+            project_id=self.project2.id
+        )
+
+        response = self.client.get(
+            self.url, {
+                'key': ['color'], 'query': '\n\n\n\n'}, format='json')
+        assert response.status_code == 400, response.content
+        assert response.data == {
+            'detail': "Parse error: 'search' (column 1). This is commonly caused by unmatched-parentheses. Enclose any text in double quotes."}
+
+    def test_invalid_tag(self):
+        response = self.client.get(
+            self.url, {
+                'key': ['color;;;']}, format='json')
+        assert response.status_code == 400, response.content
+        assert response.data == {'detail': "Tag key color;;; is not valid."}
diff --git a/tests/snuba/api/endpoints/test_organization_events_meta.py b/tests/snuba/api/endpoints/test_organization_events_meta.py
new file mode 100644
index 0000000000..58ca6bde58
--- /dev/null
+++ b/tests/snuba/api/endpoints/test_organization_events_meta.py
@@ -0,0 +1,79 @@
+from __future__ import absolute_import
+
+from datetime import timedelta
+from django.utils import timezone
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase, SnubaTestCase
+
+
+class OrganizationEventsMetaEndpoint(APITestCase, SnubaTestCase):
+    def setUp(self):
+        super(OrganizationEventsMetaEndpoint, self).setUp()
+        self.min_ago = timezone.now() - timedelta(minutes=1)
+
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        project2 = self.create_project()
+        group = self.create_group(project=project)
+        group2 = self.create_group(project=project2)
+        self.create_event(event_id='a' * 32, group=group, datetime=self.min_ago)
+        self.create_event(event_id='m' * 32, group=group2, datetime=self.min_ago)
+
+        url = reverse(
+            'sentry-api-0-organization-events-meta',
+            kwargs={
+                'organization_slug': project.organization.slug,
+            }
+        )
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        # this is not exact because of turbo=True
+        assert response.data['count'] == 10
+
+    def test_search(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        group = self.create_group(project=project)
+        self.create_event(
+            event_id='x' * 32,
+            group=group,
+            message="how to make fast",
+            datetime=self.min_ago)
+        self.create_event(
+            event_id='m' * 32,
+            group=group,
+            message="Delet the Data",
+            datetime=self.min_ago,
+        )
+
+        url = reverse(
+            'sentry-api-0-organization-events-meta',
+            kwargs={
+                'organization_slug': project.organization.slug,
+            }
+        )
+        response = self.client.get(url, {'query': 'delet'}, format='json')
+
+        assert response.status_code == 200, response.content
+        # this is not exact because of turbo=True
+        assert response.data['count'] == 10
+
+    def test_no_projects(self):
+        org = self.create_organization(owner=self.user)
+        self.login_as(user=self.user)
+
+        url = reverse(
+            'sentry-api-0-organization-events-meta',
+            kwargs={
+                'organization_slug': org.slug,
+            }
+        )
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['count'] == 0
diff --git a/tests/snuba/api/endpoints/test_organization_events_stats.py b/tests/snuba/api/endpoints/test_organization_events_stats.py
new file mode 100644
index 0000000000..7bcfba9590
--- /dev/null
+++ b/tests/snuba/api/endpoints/test_organization_events_stats.py
@@ -0,0 +1,188 @@
+from __future__ import absolute_import
+
+from six.moves.urllib.parse import urlencode
+
+from datetime import timedelta
+from django.utils import timezone
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase, SnubaTestCase
+
+
+class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
+    def setUp(self):
+        super(OrganizationEventsStatsEndpointTest, self).setUp()
+        self.login_as(user=self.user)
+
+        self.day_ago = (
+            timezone.now() -
+            timedelta(
+                days=1)).replace(
+            hour=10,
+            minute=0,
+            second=0,
+            microsecond=0)
+
+        self.project = self.create_project()
+        self.project2 = self.create_project()
+
+        self.group = self.create_group(project=self.project)
+        self.group2 = self.create_group(project=self.project2)
+
+        self.user = self.create_user()
+        self.user2 = self.create_user()
+        self.create_event(
+            event_id='a' * 32,
+            group=self.group,
+            datetime=self.day_ago + timedelta(minutes=1),
+            tags={'sentry:user': self.user.email},
+        )
+        self.create_event(
+            event_id='b' * 32,
+            group=self.group2,
+            datetime=self.day_ago + timedelta(hours=1, minutes=1),
+            tags={'sentry:user': self.user2.email},
+        )
+        self.create_event(
+            event_id='c' * 32,
+            group=self.group2,
+            datetime=self.day_ago + timedelta(hours=1, minutes=2),
+            tags={'sentry:user': self.user2.email},
+        )
+
+    def test_simple(self):
+        url = reverse(
+            'sentry-api-0-organization-events-stats',
+            kwargs={
+                'organization_slug': self.project.organization.slug,
+            }
+        )
+        response = self.client.get('%s?%s' % (url, urlencode({
+            'start': self.day_ago.isoformat()[:19],
+            'end': (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
+            'interval': '1h',
+        })), format='json')
+
+        assert response.status_code == 200, response.content
+        assert [attrs for time, attrs in response.data['data']] == [
+            [],
+            [{'count': 1}],
+            [{'count': 2}],
+        ]
+
+    def test_no_projects(self):
+        org = self.create_organization(owner=self.user)
+        self.login_as(user=self.user)
+
+        url = reverse(
+            'sentry-api-0-organization-events-stats',
+            kwargs={
+                'organization_slug': org.slug,
+            }
+        )
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data['data']) == 0
+
+    def test_groupid_filter(self):
+        url = reverse(
+            'sentry-api-0-organization-events-stats',
+            kwargs={
+                'organization_slug': self.organization.slug,
+            }
+        )
+        url = '%s?%s' % (url, urlencode({
+            'start': self.day_ago.isoformat()[:19],
+            'end': (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
+            'interval': '1h',
+            'group': self.group.id
+        }))
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data['data'])
+
+    def test_groupid_filter_invalid_value(self):
+        url = reverse(
+            'sentry-api-0-organization-events-stats',
+            kwargs={
+                'organization_slug': self.organization.slug,
+            }
+        )
+        url = '%s?group=not-a-number' % (url,)
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 400, response.content
+
+    def test_user_count(self):
+        self.create_event(
+            event_id='d' * 32,
+            group=self.group2,
+            datetime=self.day_ago + timedelta(minutes=2),
+            tags={'sentry:user': self.user2.email},
+        )
+        url = reverse(
+            'sentry-api-0-organization-events-stats',
+            kwargs={
+                'organization_slug': self.project.organization.slug,
+            }
+        )
+        response = self.client.get('%s?%s' % (url, urlencode({
+            'start': self.day_ago.isoformat()[:19],
+            'end': (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
+            'interval': '1h',
+            'yAxis': 'user_count',
+        })), format='json')
+
+        assert response.status_code == 200, response.content
+
+        assert [attrs for time, attrs in response.data['data']] == [
+            [],
+            [{'count': 2}],
+            [{'count': 1}],
+        ]
+
+    def test_with_event_count_flag(self):
+        url = reverse(
+            'sentry-api-0-organization-events-stats',
+            kwargs={
+                'organization_slug': self.project.organization.slug,
+            }
+        )
+        response = self.client.get('%s?%s' % (url, urlencode({
+            'start': self.day_ago.isoformat()[:19],
+            'end': (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
+            'interval': '1h',
+            'yAxis': 'event_count',
+        })), format='json')
+
+        assert response.status_code == 200, response.content
+        assert [attrs for time, attrs in response.data['data']] == [
+            [],
+            [{'count': 1}],
+            [{'count': 2}],
+        ]
+
+    def test_special_fields_ignored(self):
+        url = reverse(
+            'sentry-api-0-organization-events-stats',
+            kwargs={
+                'organization_slug': self.project.organization.slug,
+            }
+        )
+        response = self.client.get('%s?%s' % (url, urlencode({
+            'start': self.day_ago.isoformat()[:19],
+            'end': (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
+            'interval': '1h',
+            'yAxis': 'event_count',
+            'query': 'event_count:>5'
+        })), format='json')
+
+        assert response.status_code == 200, response.content
+        assert [attrs for time, attrs in response.data['data']] == [
+            [],
+            [{'count': 1}],
+            [{'count': 2}],
+        ]
