commit e6bb67aa05d6f58e3d3c5dd06e8c21810a495bd3
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Mar 5 16:56:27 2019 -0800

    test: Support pytest-style fixtures
    
    - Move factory-style Fixtures into Factories (create_X helpers)
    - Add default_X fixtures for pytest
    - Add session fixture for pytest
    - Move sentry_sdk cleanup to pytest helper
    - Move several database TestCase tests to standard unit tests (didnt require a database)

diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index f7c1e299a9..c5bbc6eab7 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -27,8 +27,6 @@ import types
 import logging
 import mock
 
-from sentry_sdk import Hub
-
 from click.testing import CliRunner
 from datetime import datetime
 from django.conf import settings
@@ -42,8 +40,7 @@ from django.http import HttpRequest
 from django.test import TestCase, TransactionTestCase
 from django.test.utils import CaptureQueriesContext
 from django.utils import timezone
-from django.utils.importlib import import_module
-from exam import before, after, fixture, Exam
+from exam import before, fixture, Exam
 from mock import patch
 from pkg_resources import iter_entry_points
 from rest_framework.test import APITestCase as BaseAPITestCase
@@ -84,24 +81,11 @@ class BaseTestCase(Fixtures, Exam):
         assert resp.status_code == 302
         assert resp['Location'].startswith('http://testserver' + reverse('sentry-login'))
 
-    @after
-    def teardown_internal_sdk(self):
-        Hub.main.bind_client(None)
-
     @before
     def setup_dummy_auth_provider(self):
         auth.register('dummy', DummyProvider)
         self.addCleanup(auth.unregister, 'dummy', DummyProvider)
 
-    @before
-    def setup_session(self):
-        engine = import_module(settings.SESSION_ENGINE)
-
-        session = engine.SessionStore()
-        session.save()
-
-        self.session = session
-
     def tasks(self):
         return TaskRunner()
 
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
new file mode 100644
index 0000000000..dfd64e0e81
--- /dev/null
+++ b/src/sentry/testutils/factories.py
@@ -0,0 +1,817 @@
+# -*- coding: utf-8 -*-
+from __future__ import absolute_import, print_function, unicode_literals
+
+from django.conf import settings
+from django.utils.importlib import import_module
+
+import copy
+import json
+import os
+import petname
+import random
+import six
+import warnings
+
+from django.utils import timezone
+from django.utils.text import slugify
+from hashlib import sha1
+from loremipsum import Generator
+from uuid import uuid4
+
+from sentry.event_manager import EventManager
+from sentry.constants import SentryAppStatus
+from sentry.mediators import sentry_apps, sentry_app_installations, service_hooks
+from sentry.models import (
+    Activity, Environment, Event, EventError, EventMapping, Group, Organization, OrganizationMember,
+    OrganizationMemberTeam, Project, ProjectBookmark, Team, User, UserEmail, Release, Commit, ReleaseCommit,
+    CommitAuthor, Repository, CommitFileChange, ProjectDebugFile, File, UserPermission, EventAttachment,
+    UserReport,
+)
+from sentry.utils.canonical import CanonicalKeyDict
+
+loremipsum = Generator()
+
+
+def make_sentence(words=None):
+    if words is None:
+        words = int(random.weibullvariate(8, 3))
+    return ' '.join(random.choice(loremipsum.words) for _ in range(words))
+
+
+def make_word(words=None):
+    if words is None:
+        words = int(random.weibullvariate(8, 3))
+    return random.choice(loremipsum.words)
+
+
+DEFAULT_EVENT_DATA = {
+    'extra': {
+        'loadavg': [0.97607421875, 0.88330078125, 0.833984375],
+        'sys.argv': [
+            '/Users/dcramer/.virtualenvs/sentry/bin/raven', 'test',
+            'https://ebc35f33e151401f9deac549978bda11:f3403f81e12e4c24942d505f086b2cad@sentry.io/1'
+        ],
+        'user':
+        'dcramer'
+    },
+    'modules': {
+        'raven': '3.1.13'
+    },
+    'request': {
+        'cookies': {},
+        'data': {},
+        'env': {},
+        'headers': {},
+        'method': 'GET',
+        'query_string': '',
+        'url': 'http://example.com',
+    },
+    'stacktrace': {
+        'frames': [
+            {
+                'abs_path':
+                'www/src/sentry/models/foo.py',
+                'context_line':
+                '                        string_max_length=self.string_max_length)',
+                'filename':
+                'sentry/models/foo.py',
+                'function':
+                'build_msg',
+                'in_app':
+                True,
+                'lineno':
+                29,
+                'module':
+                'raven.base',
+                'post_context': [
+                    '                },', '            })', '',
+                    "        if 'stacktrace' in data:",
+                    '            if self.include_paths:'
+                ],
+                'pre_context': [
+                    '', '            data.update({',
+                    "                'stacktrace': {",
+                    "                    'frames': get_stack_info(frames,",
+                    '                        list_max_length=self.list_max_length,'
+                ],
+                'vars': {
+                    'culprit': 'raven.scripts.runner',
+                    'date': 'datetime.datetime(2013, 2, 14, 20, 6, 33, 479471)',
+                    'event_id': '598fb19363e745ec8be665e6ba88b1b2',
+                    'event_type': 'raven.events.Message',
+                    'frames': '<generator object iter_stack_frames at 0x103fef050>',
+                    'handler': '<raven.events.Message object at 0x103feb710>',
+                    'k': 'logentry',
+                    'public_key': None,
+                    'result': {
+                        'logentry':
+                        "{'message': 'This is a test message generated using ``raven test``', 'params': []}"
+                    },
+                    'self': '<raven.base.Client object at 0x104397f10>',
+                    'stack': True,
+                    'tags': None,
+                    'time_spent': None,
+                },
+            },
+            {
+                'abs_path':
+                '/Users/dcramer/.virtualenvs/sentry/lib/python2.7/site-packages/raven/base.py',
+                'context_line':
+                '                        string_max_length=self.string_max_length)',
+                'filename':
+                'raven/base.py',
+                'function':
+                'build_msg',
+                'in_app':
+                False,
+                'lineno':
+                290,
+                'module':
+                'raven.base',
+                'post_context': [
+                    '                },', '            })', '',
+                    "        if 'stacktrace' in data:",
+                    '            if self.include_paths:'
+                ],
+                'pre_context': [
+                    '', '            data.update({',
+                    "                'stacktrace': {",
+                    "                    'frames': get_stack_info(frames,",
+                    '                        list_max_length=self.list_max_length,'
+                ],
+                'vars': {
+                    'culprit': 'raven.scripts.runner',
+                    'date': 'datetime.datetime(2013, 2, 14, 20, 6, 33, 479471)',
+                    'event_id': '598fb19363e745ec8be665e6ba88b1b2',
+                    'event_type': 'raven.events.Message',
+                    'frames': '<generator object iter_stack_frames at 0x103fef050>',
+                    'handler': '<raven.events.Message object at 0x103feb710>',
+                    'k': 'logentry',
+                    'public_key': None,
+                    'result': {
+                        'logentry':
+                        "{'message': 'This is a test message generated using ``raven test``', 'params': []}"
+                    },
+                    'self': '<raven.base.Client object at 0x104397f10>',
+                    'stack': True,
+                    'tags': None,
+                    'time_spent': None,
+                },
+            },
+        ],
+    },
+    'tags': [],
+    'platform': 'python',
+}
+
+
+# TODO(dcramer): consider moving to something more scaleable like factoryboy
+class Factories(object):
+    @staticmethod
+    def create_organization(name=None, owner=None, **kwargs):
+        if not name:
+            name = petname.Generate(2, ' ', letters=10).title()
+
+        org = Organization.objects.create(name=name, **kwargs)
+        if owner:
+            Factories.create_member(
+                organization=org,
+                user=owner,
+                role='owner',
+            )
+        return org
+
+    @staticmethod
+    def create_member(teams=None, **kwargs):
+        kwargs.setdefault('role', 'member')
+
+        om = OrganizationMember.objects.create(**kwargs)
+        if teams:
+            for team in teams:
+                Factories.create_team_membership(
+                    team=team,
+                    member=om,
+                )
+        return om
+
+    @staticmethod
+    def create_team_membership(team, member=None, user=None):
+        if member is None:
+            member, _ = OrganizationMember.objects.get_or_create(
+                user=user,
+                organization=team.organization,
+                defaults={
+                    'role': 'member',
+                }
+            )
+
+        return OrganizationMemberTeam.objects.create(
+            team=team,
+            organizationmember=member,
+            is_active=True,
+        )
+
+    @staticmethod
+    def create_team(organization, **kwargs):
+        if not kwargs.get('name'):
+            kwargs['name'] = petname.Generate(2, ' ', letters=10).title()
+        if not kwargs.get('slug'):
+            kwargs['slug'] = slugify(six.text_type(kwargs['name']))
+        members = kwargs.pop('members', None)
+
+        team = Team.objects.create(organization=organization, **kwargs)
+        if members:
+            for user in members:
+                Factories.create_team_membership(team=team, user=user)
+        return team
+
+    @staticmethod
+    def create_environment(project, **kwargs):
+        name = kwargs.get('name', petname.Generate(3, ' ', letters=10)[:64])
+        env = Environment.objects.create(
+            organization_id=project.organization_id,
+            project_id=project.id,
+            name=name,
+        )
+        env.add_project(project, is_hidden=kwargs.get('is_hidden'))
+        return env
+
+    @staticmethod
+    def create_project(organization=None, teams=None, **kwargs):
+        if not kwargs.get('name'):
+            kwargs['name'] = petname.Generate(2, ' ', letters=10).title()
+        if not kwargs.get('slug'):
+            kwargs['slug'] = slugify(six.text_type(kwargs['name']))
+        if not organization and teams:
+            organization = teams[0].organization
+
+        project = Project.objects.create(organization=organization, **kwargs)
+        if teams:
+            for team in teams:
+                project.add_team(team)
+        return project
+
+    @staticmethod
+    def create_project_bookmark(project, user):
+        return ProjectBookmark.objects.create(project_id=project.id, user=user)
+
+    @staticmethod
+    def create_project_key(project):
+        return project.key_set.get_or_create()[0]
+
+    @staticmethod
+    def create_release(project, user=None, version=None, date_added=None):
+        if version is None:
+            version = os.urandom(20).encode('hex')
+
+        if date_added is None:
+            date_added = timezone.now().replace(microsecond=0)
+
+        release = Release.objects.create(
+            version=version,
+            organization_id=project.organization_id,
+            date_added=date_added,
+        )
+
+        release.add_project(project)
+
+        Activity.objects.create(
+            type=Activity.RELEASE,
+            project=project,
+            ident=Activity.get_version_ident(version),
+            user=user,
+            data={'version': version},
+        )
+
+        # add commits
+        if user:
+            author = Factories.create_commit_author(project=project, user=user)
+            repo = Factories.create_repo(project, name='organization-{}'.format(project.slug))
+            commit = Factories.create_commit(
+                project=project,
+                repo=repo,
+                author=author,
+                release=release,
+                key='deadbeef',
+                message='placeholder commit message',
+            )
+
+            release.update(
+                authors=[six.text_type(author.id)],
+                commit_count=1,
+                last_commit_id=commit.id,
+            )
+
+        return release
+
+    @staticmethod
+    def create_repo(project, name=None):
+        repo = Repository.objects.create(
+            organization_id=project.organization_id,
+            name=name or '{}-{}'.format(petname.Generate(2, '',
+                                                            letters=10), random.randint(1000, 9999)),
+        )
+        return repo
+
+    @staticmethod
+    def create_commit(repo, project=None, author=None, release=None,
+                      message=None, key=None, date_added=None):
+        commit = Commit.objects.get_or_create(
+            organization_id=repo.organization_id,
+            repository_id=repo.id,
+            key=key or sha1(uuid4().hex).hexdigest(),
+            defaults={
+                'message': message or make_sentence(),
+                'author': author or Factories.create_commit_author(organization_id=repo.organization_id),
+                'date_added': date_added or timezone.now(),
+            }
+        )[0]
+
+        if release:
+            assert project
+            ReleaseCommit.objects.create(
+                organization_id=repo.organization_id,
+                project_id=project.id,
+                release=release,
+                commit=commit,
+                order=1,
+            )
+
+        Factories.create_commit_file_change(commit=commit, filename='/models/foo.py')
+        Factories.create_commit_file_change(commit=commit, filename='/worsematch/foo.py')
+        Factories.create_commit_file_change(commit=commit, filename='/models/other.py')
+
+        return commit
+
+    @staticmethod
+    def create_commit_author(organization_id=None, project=None, user=None):
+        return CommitAuthor.objects.get_or_create(
+            organization_id=organization_id or project.organization_id,
+            email=user.email if user else '{}@example.com'.format(make_word()),
+            defaults={
+                'name': user.name if user else make_word(),
+            }
+        )[0]
+
+    @staticmethod
+    def create_commit_file_change(commit, filename):
+        return CommitFileChange.objects.get_or_create(
+            organization_id=commit.organization_id,
+            commit=commit,
+            filename=filename,
+            type='M',
+        )
+
+    @staticmethod
+    def create_user(email=None, **kwargs):
+        if email is None:
+            email = uuid4().hex + '@example.com'
+
+        kwargs.setdefault('username', email)
+        kwargs.setdefault('is_staff', True)
+        kwargs.setdefault('is_active', True)
+        kwargs.setdefault('is_superuser', False)
+
+        user = User(email=email, **kwargs)
+        if not kwargs.get('password'):
+            user.set_password('admin')
+        user.save()
+
+        # UserEmail is created by a signal
+        assert UserEmail.objects.filter(
+            user=user,
+            email=email,
+        ).update(is_verified=True)
+
+        return user
+
+    @staticmethod
+    def create_useremail(user, email, **kwargs):
+        if not email:
+            email = uuid4().hex + '@example.com'
+
+        kwargs.setdefault('is_verified', True)
+
+        useremail = UserEmail(user=user, email=email, **kwargs)
+        useremail.save()
+
+        return useremail
+
+    @staticmethod
+    def create_event(group, event_id=None, normalize=True, **kwargs):
+        # XXX: Do not use this method for new tests! Prefer `store_event`.
+        if event_id is None:
+            event_id = uuid4().hex
+        kwargs.setdefault('project', group.project)
+        kwargs.setdefault('data', copy.deepcopy(DEFAULT_EVENT_DATA))
+        kwargs.setdefault('platform', kwargs['data'].get('platform', 'python'))
+        kwargs.setdefault('message', kwargs['data'].get('message', 'message'))
+        if kwargs.get('tags'):
+            tags = kwargs.pop('tags')
+            if isinstance(tags, dict):
+                tags = list(tags.items())
+            kwargs['data']['tags'] = tags
+        if kwargs.get('stacktrace'):
+            stacktrace = kwargs.pop('stacktrace')
+            kwargs['data']['stacktrace'] = stacktrace
+
+        user = kwargs.pop('user', None)
+        if user is not None:
+            kwargs['data']['user'] = user
+
+        kwargs['data'].setdefault(
+            'errors', [{
+                'type': EventError.INVALID_DATA,
+                'name': 'foobar',
+            }]
+        )
+
+        # maintain simple event Factories by supporting the legacy message
+        # parameter just like our API would
+        if 'logentry' not in kwargs['data']:
+            kwargs['data']['logentry'] = {
+                'message': kwargs['message'] or '<unlabeled event>',
+            }
+
+        if normalize:
+            manager = EventManager(CanonicalKeyDict(kwargs['data']),
+                                   for_store=False)
+            manager.normalize()
+            kwargs['data'] = manager.get_data()
+            kwargs['data'].update(manager.materialize_metadata())
+            kwargs['message'] = manager.get_search_message()
+
+        event = Event(event_id=event_id, group=group, **kwargs)
+        EventMapping.objects.create(
+            project_id=event.project.id,
+            event_id=event_id,
+            group=group,
+        )
+        # emulate EventManager refs
+        event.data.bind_ref(event)
+        event.save()
+        return event
+
+    @staticmethod
+    def store_event(data, project_id, assert_no_errors=True):
+        # Like `create_event`, but closer to how events are actually
+        # ingested. Prefer to use this method over `create_event`
+        manager = EventManager(data)
+        manager.normalize()
+        if assert_no_errors:
+            errors = manager.get_data().get('errors')
+            assert not errors, errors
+
+        event = manager.save(project_id)
+        event.group.save()
+        return event
+
+    @staticmethod
+    def create_full_event(group, event_id='a', **kwargs):
+        payload = """
+            {
+                "event_id": "f5dd88e612bc406ba89dfebd09120769",
+                "project": 11276,
+                "release": "e1b5d1900526feaf20fe2bc9cad83d392136030a",
+                "platform": "javascript",
+                "culprit": "app/components/events/eventEntries in map",
+                "logentry": {"formatted": "TypeError: Cannot read property '1' of null"},
+                "tags": [
+                    ["environment", "prod"],
+                    ["sentry_version", "e1b5d1900526feaf20fe2bc9cad83d392136030a"],
+                    ["level", "error"],
+                    ["logger", "javascript"],
+                    ["sentry:release", "e1b5d1900526feaf20fe2bc9cad83d392136030a"],
+                    ["browser", "Chrome 48.0"],
+                    ["device", "Other"],
+                    ["os", "Windows 10"],
+                    ["url", "https://sentry.io/katon-direct/localhost/issues/112734598/"],
+                    ["sentry:user", "id:41656"]
+                ],
+                "errors": [{
+                    "url": "<anonymous>",
+                    "type": "js_no_source"
+                }],
+                "extra": {
+                    "session:duration": 40364
+                },
+                "exception": {
+                    "exc_omitted": null,
+                    "values": [{
+                        "stacktrace": {
+                            "frames": [{
+                                "function": "batchedUpdates",
+                                "abs_path": "webpack:////usr/src/getsentry/src/sentry/~/react/lib/ReactUpdates.js",
+                                "pre_context": ["  // verify that that's the case. (This is called by each top-level update", "  // function, like setProps, setState, forceUpdate, etc.; creation and", "  // destruction of top-level components is guarded in ReactMount.)", "", "  if (!batchingStrategy.isBatchingUpdates) {"],
+                                "post_context": ["    return;", "  }", "", "  dirtyComponents.push(component);", "}"],
+                                "filename": "~/react/lib/ReactUpdates.js",
+                                "module": "react/lib/ReactUpdates",
+                                "colno": 0,
+                                "in_app": false,
+                                "data": {
+                                    "orig_filename": "/_static/29e365f8b0d923bc123e8afa38d890c3/sentry/dist/vendor.js",
+                                    "orig_abs_path": "https://media.sentry.io/_static/29e365f8b0d923bc123e8afa38d890c3/sentry/dist/vendor.js",
+                                    "sourcemap": "https://media.sentry.io/_static/29e365f8b0d923bc123e8afa38d890c3/sentry/dist/vendor.js.map",
+                                    "orig_lineno": 37,
+                                    "orig_function": "Object.s [as enqueueUpdate]",
+                                    "orig_colno": 16101
+                                },
+                                "context_line": "    batchingStrategy.batchedUpdates(enqueueUpdate, component);",
+                                "lineno": 176
+                            }],
+                            "frames_omitted": null
+                        },
+                        "type": "TypeError",
+                        "value": "Cannot read property '1' of null",
+                        "module": null
+                    }]
+                },
+                "request": {
+                    "url": "https://sentry.io/katon-direct/localhost/issues/112734598/",
+                    "headers": [
+                        ["Referer", "https://sentry.io/welcome/"],
+                        ["User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36"]
+                    ]
+                },
+                "user": {
+                    "ip_address": "0.0.0.0",
+                    "id": "41656",
+                    "email": "test@example.com"
+                },
+                "version": "7",
+                "breadcrumbs": {
+                    "values": [
+                        {
+                            "category": "xhr",
+                            "timestamp": 1496395011.63,
+                            "type": "http",
+                            "data": {
+                                "url": "/api/path/here",
+                                "status_code": "500",
+                                "method": "POST"
+                            }
+                        }
+                    ]
+                }
+            }"""
+
+        event = Factories.create_event(
+            group=group,
+            event_id=event_id, platform='javascript',
+            data=json.loads(payload),
+
+            # This payload already went through sourcemap
+            # processing, normalizing it would remove
+            # frame.data (orig_filename, etc)
+            normalize=False
+        )
+        return event
+
+    @staticmethod
+    def create_group(project, checksum=None, **kwargs):
+        if checksum:
+            warnings.warn('Checksum passed to create_group', DeprecationWarning)
+        kwargs.setdefault('message', 'Hello world')
+        kwargs.setdefault('data', {})
+        if 'type' not in kwargs['data']:
+            kwargs['data'].update(
+                {
+                    'type': 'default',
+                    'metadata': {
+                        'title': kwargs['message'],
+                    },
+                }
+            )
+        if 'short_id' not in kwargs:
+            kwargs['short_id'] = project.next_short_id()
+        return Group.objects.create(project=project, **kwargs)
+
+    @staticmethod
+    def create_file(**kwargs):
+        return File.objects.create(**kwargs)
+
+    @staticmethod
+    def create_file_from_path(path, name=None, **kwargs):
+        if name is None:
+            name = os.path.basename(path)
+
+        file = Factories.create_file(name=name, **kwargs)
+        with open(path) as f:
+            file.putfile(f)
+        return file
+
+    @staticmethod
+    def create_event_attachment(event, file=None, **kwargs):
+        if file is None:
+            file = Factories.create_file(
+                name='log.txt',
+                size=32,
+                headers={'Content-Type': 'text/plain'},
+                checksum='dc1e3f3e411979d336c3057cce64294f3420f93a',
+            )
+
+        return EventAttachment.objects.create(
+            project_id=event.project_id,
+            group_id=event.group_id,
+            event_id=event.event_id,
+            file=file,
+            **kwargs
+        )
+
+    @staticmethod
+    def create_dif_file(project, debug_id=None, object_name=None,
+                        features=None, data=None, file=None, cpu_name=None, **kwargs):
+        if debug_id is None:
+            debug_id = six.text_type(uuid4())
+
+        if object_name is None:
+            object_name = '%s.dSYM' % debug_id
+
+        if features is not None:
+            if data is None:
+                data = {}
+            data['features'] = features
+
+        if file is None:
+            file = Factories.create_file(
+                name=object_name,
+                size=42,
+                headers={'Content-Type': 'application/x-mach-binary'},
+                checksum='dc1e3f3e411979d336c3057cce64294f3420f93a',
+            )
+
+        return ProjectDebugFile.objects.create(
+            debug_id=debug_id,
+            project=project,
+            object_name=object_name,
+            cpu_name=cpu_name or 'x86_64',
+            file=file,
+            data=data,
+            **kwargs
+        )
+
+        return ProjectDebugFile.objects.create(project=project, **kwargs)
+
+    @staticmethod
+    def create_dif_from_path(path, object_name=None, **kwargs):
+        if object_name is None:
+            object_name = os.path.basename(path)
+
+        headers = {'Content-Type': 'application/x-mach-binary'}
+        file = Factories.create_file_from_path(path, name=object_name, headers=headers)
+        return Factories.create_dif_file(file=file, object_name=object_name, **kwargs)
+
+    @staticmethod
+    def add_user_permission(user, permission):
+        UserPermission.objects.create(user=user, permission=permission)
+
+    @staticmethod
+    def create_sentry_app(name=None, organization=None, published=False, scopes=(),
+                          webhook_url=None, **kwargs):
+        if not name:
+            name = petname.Generate(2, ' ', letters=10).title()
+        if not organization:
+            organization = Factories.create_organization()
+        if not webhook_url:
+            webhook_url = 'https://example.com/webhook'
+
+        _kwargs = {
+            'name': name,
+            'organization': organization,
+            'scopes': scopes,
+            'webhook_url': webhook_url,
+            'events': [],
+            'schema': '{}',
+        }
+
+        _kwargs.update(kwargs)
+
+        app = sentry_apps.Creator.run(**_kwargs)
+
+        if published:
+            app.update(status=SentryAppStatus.PUBLISHED)
+
+        return app
+
+    @staticmethod
+    def create_sentry_app_installation(organization=None, slug=None, user=None):
+        if not organization:
+            organization = Factories.create_organization()
+
+        Factories.create_project(organization=organization)
+
+        return sentry_app_installations.Creator.run(
+            slug=(slug or Factories.create_sentry_app().slug),
+            organization=organization,
+            user=(user or Factories.create_user()),
+        )
+
+    @staticmethod
+    def create_issue_link_schema():
+        return {
+            'type': 'issue-link',
+            'link': {
+                'uri': '/sentry/issues/link',
+                'required_fields': [
+                    {
+                        'type': 'select',
+                        'name': 'assignee',
+                        'label': 'Assignee',
+                        'uri': '/sentry/members',
+                    },
+                ],
+            },
+
+            'create': {
+                'uri': '/sentry/issues/create',
+                'required_fields': [
+                    {
+                        'type': 'text',
+                        'name': 'title',
+                        'label': 'Title',
+                    },
+                    {
+                        'type': 'text',
+                        'name': 'summary',
+                        'label': 'Summary',
+                    },
+                ],
+
+                'optional_fields': [
+                    {
+                        'type': 'select',
+                        'name': 'points',
+                        'label': 'Points',
+                        'options': [
+                            ['1', '1'],
+                            ['2', '2'],
+                            ['3', '3'],
+                            ['5', '5'],
+                            ['8', '8'],
+                        ],
+                    },
+                    {
+                        'type': 'select',
+                        'name': 'assignee',
+                        'label': 'Assignee',
+                        'uri': '/sentry/members',
+                    },
+                ],
+            },
+        }
+
+    @staticmethod
+    def create_alert_rule_action_schema():
+        return {
+            'type': 'alert-rule-action',
+            'required_fields': [{
+                'type': 'text',
+                'name': 'channel',
+                'label': 'Channel',
+            }],
+        }
+
+    @staticmethod
+    def create_service_hook(actor=None, org=None, project=None,
+                            events=None, url=None, **kwargs):
+        if not actor:
+            actor = Factories.create_user()
+        if not org:
+            org = Factories.create_organization(owner=actor)
+        if not project:
+            project = Factories.create_project(organization=org)
+        if events is None:
+            events = ('event.created',)
+        if not url:
+            url = 'https://example.com/sentry/webhook'
+
+        _kwargs = {
+            'actor': actor,
+            'projects': [project],
+            'organization': org,
+            'events': events,
+            'url': url,
+        }
+
+        _kwargs.update(kwargs)
+
+        return service_hooks.Creator.run(**_kwargs)
+
+    @staticmethod
+    def create_userreport(group, project=None, **kwargs):
+        return UserReport.objects.create(
+            group=group,
+            event_id='a' * 32,
+            project=project or group.project,
+            name='Jane Doe',
+            email='jane@example.com',
+            comments="the application crashed"
+        )
+
+    @staticmethod
+    def create_session():
+        engine = import_module(settings.SESSION_ENGINE)
+
+        session = engine.SessionStore()
+        session.save()
+        return session
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 009d78cc34..c43ba615c6 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -1,186 +1,28 @@
-# -*- coding: utf-8 -*-
-"""
-sentry.testutils.fixtures
-~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
 from __future__ import absolute_import, print_function, unicode_literals
 
-import copy
-import json
-import os
-import petname
-import random
-import six
-import warnings
-
-from django.db import IntegrityError, transaction
-from django.utils import timezone
-from django.utils.text import slugify
-from exam import fixture
-from hashlib import sha1
-from loremipsum import Generator
-from uuid import uuid4
-
-from sentry.event_manager import EventManager
-from sentry.constants import SentryAppStatus
-from sentry.mediators import sentry_apps, sentry_app_installations, service_hooks
-from sentry.models import (
-    Activity, Environment, Event, EventError, EventMapping, Group, Organization, OrganizationMember,
-    OrganizationMemberTeam, Project, ProjectBookmark, Team, User, UserEmail, Release, Commit, ReleaseCommit,
-    CommitAuthor, Repository, CommitFileChange, ProjectDebugFile, File, UserPermission, EventAttachment,
-    UserReport,
-)
-from sentry.utils.canonical import CanonicalKeyDict
-
-loremipsum = Generator()
-
-
-def make_sentence(words=None):
-    if words is None:
-        words = int(random.weibullvariate(8, 3))
-    return ' '.join(random.choice(loremipsum.words) for _ in range(words))
-
-
-def make_word(words=None):
-    if words is None:
-        words = int(random.weibullvariate(8, 3))
-    return random.choice(loremipsum.words)
-
-
-DEFAULT_EVENT_DATA = {
-    'extra': {
-        'loadavg': [0.97607421875, 0.88330078125, 0.833984375],
-        'sys.argv': [
-            '/Users/dcramer/.virtualenvs/sentry/bin/raven', 'test',
-            'https://ebc35f33e151401f9deac549978bda11:f3403f81e12e4c24942d505f086b2cad@sentry.io/1'
-        ],
-        'user':
-        'dcramer'
-    },
-    'modules': {
-        'raven': '3.1.13'
-    },
-    'request': {
-        'cookies': {},
-        'data': {},
-        'env': {},
-        'headers': {},
-        'method': 'GET',
-        'query_string': '',
-        'url': 'http://example.com',
-    },
-    'stacktrace': {
-        'frames': [
-            {
-                'abs_path':
-                'www/src/sentry/models/foo.py',
-                'context_line':
-                '                        string_max_length=self.string_max_length)',
-                'filename':
-                'sentry/models/foo.py',
-                'function':
-                'build_msg',
-                'in_app':
-                True,
-                'lineno':
-                29,
-                'module':
-                'raven.base',
-                'post_context': [
-                    '                },', '            })', '',
-                    "        if 'stacktrace' in data:",
-                    '            if self.include_paths:'
-                ],
-                'pre_context': [
-                    '', '            data.update({',
-                    "                'stacktrace': {",
-                    "                    'frames': get_stack_info(frames,",
-                    '                        list_max_length=self.list_max_length,'
-                ],
-                'vars': {
-                    'culprit': 'raven.scripts.runner',
-                    'date': 'datetime.datetime(2013, 2, 14, 20, 6, 33, 479471)',
-                    'event_id': '598fb19363e745ec8be665e6ba88b1b2',
-                    'event_type': 'raven.events.Message',
-                    'frames': '<generator object iter_stack_frames at 0x103fef050>',
-                    'handler': '<raven.events.Message object at 0x103feb710>',
-                    'k': 'logentry',
-                    'public_key': None,
-                    'result': {
-                        'logentry':
-                        "{'message': 'This is a test message generated using ``raven test``', 'params': []}"
-                    },
-                    'self': '<raven.base.Client object at 0x104397f10>',
-                    'stack': True,
-                    'tags': None,
-                    'time_spent': None,
-                },
-            },
-            {
-                'abs_path':
-                '/Users/dcramer/.virtualenvs/sentry/lib/python2.7/site-packages/raven/base.py',
-                'context_line':
-                '                        string_max_length=self.string_max_length)',
-                'filename':
-                'raven/base.py',
-                'function':
-                'build_msg',
-                'in_app':
-                False,
-                'lineno':
-                290,
-                'module':
-                'raven.base',
-                'post_context': [
-                    '                },', '            })', '',
-                    "        if 'stacktrace' in data:",
-                    '            if self.include_paths:'
-                ],
-                'pre_context': [
-                    '', '            data.update({',
-                    "                'stacktrace': {",
-                    "                    'frames': get_stack_info(frames,",
-                    '                        list_max_length=self.list_max_length,'
-                ],
-                'vars': {
-                    'culprit': 'raven.scripts.runner',
-                    'date': 'datetime.datetime(2013, 2, 14, 20, 6, 33, 479471)',
-                    'event_id': '598fb19363e745ec8be665e6ba88b1b2',
-                    'event_type': 'raven.events.Message',
-                    'frames': '<generator object iter_stack_frames at 0x103fef050>',
-                    'handler': '<raven.events.Message object at 0x103feb710>',
-                    'k': 'logentry',
-                    'public_key': None,
-                    'result': {
-                        'logentry':
-                        "{'message': 'This is a test message generated using ``raven test``', 'params': []}"
-                    },
-                    'self': '<raven.base.Client object at 0x104397f10>',
-                    'stack': True,
-                    'tags': None,
-                    'time_spent': None,
-                },
-            },
-        ],
-    },
-    'tags': [],
-    'platform': 'python',
-}
+from sentry.models import Activity, OrganizationMember, OrganizationMemberTeam
 
+from django.utils.functional import cached_property
+from sentry.testutils.factories import Factories
 
+
+# XXX(dcramer): this is a compatibility layer to transition to pytest-based fixtures
+# all of the memoized fixtures are copypasta due to our inability to use pytest fixtures
+# on a per-class method basis
 class Fixtures(object):
-    @fixture
+    @cached_property
+    def session(self):
+        return Factories.create_session()
+
+    @cached_property
     def projectkey(self):
         return self.create_project_key(project=self.project)
 
-    @fixture
+    @cached_property
     def user(self):
         return self.create_user('admin@localhost', is_superuser=True)
 
-    @fixture
+    @cached_property
     def organization(self):
         # XXX(dcramer): ensure that your org slug doesnt match your team slug
         # and the same for your project slug
@@ -190,7 +32,7 @@ class Fixtures(object):
             owner=self.user,
         )
 
-    @fixture
+    @cached_property
     def team(self):
         team = self.create_team(
             organization=self.organization,
@@ -209,7 +51,7 @@ class Fixtures(object):
             )
         return team
 
-    @fixture
+    @cached_property
     def project(self):
         return self.create_project(
             name='Bar',
@@ -217,660 +59,145 @@ class Fixtures(object):
             teams=[self.team],
         )
 
-    @fixture
+    @cached_property
     def environment(self):
         return self.create_environment(
             name='development',
             project=self.project,
         )
 
-    @fixture
+    @cached_property
     def group(self):
         return self.create_group(message=u'\u3053\u3093\u306b\u3061\u306f')
 
-    @fixture
+    @cached_property
     def event(self):
         return self.create_event(
             event_id='a' * 32,
             message=u'\u3053\u3093\u306b\u3061\u306f',
         )
 
-    @fixture
+    @cached_property
     def activity(self):
         return Activity.objects.create(
             group=self.group, project=self.project, type=Activity.NOTE, user=self.user, data={}
         )
 
-    def create_organization(self, name=None, owner=None, **kwargs):
-        if not name:
-            name = petname.Generate(2, ' ', letters=10).title()
+    def create_organization(self, *args, **kwargs):
+        return Factories.create_organization(*args, **kwargs)
 
-        org = Organization.objects.create(name=name, **kwargs)
-        if owner:
-            self.create_member(
-                organization=org,
-                user=owner,
-                role='owner',
-            )
-        return org
-
-    def create_member(self, teams=None, **kwargs):
-        kwargs.setdefault('role', 'member')
-
-        om = OrganizationMember.objects.create(**kwargs)
-        if teams:
-            for team in teams:
-                self.create_team_membership(
-                    team=team,
-                    member=om,
-                )
-        return om
-
-    def create_team_membership(self, team, member=None, user=None):
-        if member is None:
-            member, _ = OrganizationMember.objects.get_or_create(
-                user=user,
-                organization=team.organization,
-                defaults={
-                    'role': 'member',
-                }
-            )
+    def create_member(self, *args, **kwargs):
+        return Factories.create_member(*args, **kwargs)
 
-        return OrganizationMemberTeam.objects.create(
-            team=team,
-            organizationmember=member,
-            is_active=True,
-        )
+    def create_team_membership(self, *args, **kwargs):
+        return Factories.create_team_membership(*args, **kwargs)
 
-    def create_team(self, **kwargs):
-        if not kwargs.get('name'):
-            kwargs['name'] = petname.Generate(2, ' ', letters=10).title()
-        if not kwargs.get('slug'):
-            kwargs['slug'] = slugify(six.text_type(kwargs['name']))
-        if not kwargs.get('organization'):
-            kwargs['organization'] = self.organization
-        members = kwargs.pop('members', None)
-
-        team = Team.objects.create(**kwargs)
-        if members:
-            for user in members:
-                self.create_team_membership(team=team, user=user)
-        return team
+    def create_team(self, organization=None, **kwargs):
+        if organization is None:
+            organization = self.organization
 
-    def create_environment(self, **kwargs):
-        project = kwargs.get('project', self.project)
-        name = kwargs.get('name', petname.Generate(3, ' ', letters=10)[:64])
-        env = Environment.objects.create(
-            organization_id=project.organization_id,
-            project_id=project.id,
-            name=name,
-        )
-        env.add_project(project, is_hidden=kwargs.get('is_hidden'))
-        return env
+        return Factories.create_team(organization=organization, **kwargs)
 
-    def create_project(self, **kwargs):
-        teams = kwargs.pop('teams', None)
-
-        if teams is None:
-            teams = [self.team]
-
-        if not kwargs.get('name'):
-            kwargs['name'] = petname.Generate(2, ' ', letters=10).title()
-        if not kwargs.get('slug'):
-            kwargs['slug'] = slugify(six.text_type(kwargs['name']))
-        if not kwargs.get('organization'):
-            kwargs['organization'] = teams[0].organization
+    def create_environment(self, project=None, **kwargs):
+        if project is None:
+            project = self.project
+        return Factories.create_environment(project=project, **kwargs)
 
-        project = Project.objects.create(**kwargs)
-        for team in teams:
-            project.add_team(team)
-        return project
+    def create_project(self, **kwargs):
+        kwargs.setdefault('teams', [self.team])
+        return Factories.create_project(**kwargs)
 
-    def create_project_bookmark(self, project, user):
-        return ProjectBookmark.objects.create(project_id=project.id, user=user)
+    def create_project_bookmark(self, project=None, *args, **kwargs):
+        if project is None:
+            project = self.project
+        return Factories.create_project_bookmark(project=project, *args, **kwargs)
 
-    def create_project_key(self, project):
-        return project.key_set.get_or_create()[0]
+    def create_project_key(self, project=None, *args, **kwargs):
+        if project is None:
+            project = self.project
+        return Factories.create_project_key(project=project, *args, **kwargs)
 
-    # TODO(maxbittker) make new fixtures less hardcoded
-    def create_release(self, project, user=None, version=None, date_added=None):
-        if version is None:
-            version = os.urandom(20).encode('hex')
+    def create_release(self, project=None, user=None, *args, **kwargs):
+        if project is None:
+            project = self.project
+        return Factories.create_release(project=project, user=user, *args, **kwargs)
 
-        if date_added is None:
-            date_added = timezone.now().replace(microsecond=0)
+    def create_repo(self, project=None, *args, **kwargs):
+        if project is None:
+            project = self.project
+        return Factories.create_repo(project=project, *args, **kwargs)
 
-        release = Release.objects.create(
-            version=version,
-            organization_id=project.organization_id,
-            date_added=date_added,
-        )
+    def create_commit(self, *args, **kwargs):
+        return Factories.create_commit(*args, **kwargs)
 
-        release.add_project(project)
+    def create_commit_author(self, *args, **kwargs):
+        return Factories.create_commit_author(*args, **kwargs)
 
-        Activity.objects.create(
-            type=Activity.RELEASE,
-            project=project,
-            ident=Activity.get_version_ident(version),
-            user=user,
-            data={'version': version},
-        )
+    def create_commit_file_change(self, *args, **kwargs):
+        return Factories.create_commit_file_change(*args, **kwargs)
 
-        # add commits
-        if user:
-            author = self.create_commit_author(project=project, user=user)
-            repo = self.create_repo(project, name='organization-{}'.format(project.slug))
-            commit = self.create_commit(
-                project=project,
-                repo=repo,
-                author=author,
-                release=release,
-                key='deadbeef',
-                message='placeholder commit message',
-            )
+    def create_user(self, *args, **kwargs):
+        return Factories.create_user(*args, **kwargs)
 
-            release.update(
-                authors=[six.text_type(author.id)],
-                commit_count=1,
-                last_commit_id=commit.id,
-            )
+    def create_useremail(self, *args, **kwargs):
+        return Factories.create_useremail(*args, **kwargs)
 
-        return release
+    def create_event(self, event_id=None, group=None, *args, **kwargs):
+        if group is None:
+            group = self.group
+        return Factories.create_event(event_id=event_id, group=group, *args, **kwargs)
 
-    def create_repo(self, project, name=None):
-        repo = Repository.objects.create(
-            organization_id=project.organization_id,
-            name=name or '{}-{}'.format(petname.Generate(2, '',
-                                                         letters=10), random.randint(1000, 9999)),
-        )
-        return repo
-
-    def create_commit(self, repo, project=None, author=None, release=None,
-                      message=None, key=None, date_added=None):
-        commit = Commit.objects.get_or_create(
-            organization_id=repo.organization_id,
-            repository_id=repo.id,
-            key=key or sha1(uuid4().hex).hexdigest(),
-            defaults={
-                'message': message or make_sentence(),
-                'author': author or self.create_commit_author(organization_id=repo.organization_id),
-                'date_added': date_added or timezone.now(),
-            }
-        )[0]
-
-        if release:
-            assert project
-            ReleaseCommit.objects.create(
-                organization_id=repo.organization_id,
-                project_id=project.id,
-                release=release,
-                commit=commit,
-                order=1,
-            )
+    def store_event(self, *args, **kwargs):
+        return Factories.store_event(*args, **kwargs)
 
-        self.create_commit_file_change(commit=commit, filename='/models/foo.py')
-        self.create_commit_file_change(commit=commit, filename='/worsematch/foo.py')
-        self.create_commit_file_change(commit=commit, filename='/models/other.py')
-
-        return commit
-
-    def create_commit_author(self, organization_id=None, project=None, user=None):
-        return CommitAuthor.objects.get_or_create(
-            organization_id=organization_id or project.organization_id,
-            email=user.email if user else '{}@example.com'.format(make_word()),
-            defaults={
-                'name': user.name if user else make_word(),
-            }
-        )[0]
-
-    def create_commit_file_change(self, commit, filename):
-        commit_file_change = CommitFileChange.objects.get_or_create(
-            organization_id=commit.organization_id,
-            commit=commit,
-            filename=filename,
-            type='M',
-        )
-        return commit_file_change
-
-    def create_user(self, email=None, **kwargs):
-        if email is None:
-            email = uuid4().hex + '@example.com'
-
-        kwargs.setdefault('username', email)
-        kwargs.setdefault('is_staff', True)
-        kwargs.setdefault('is_active', True)
-        kwargs.setdefault('is_superuser', False)
-
-        user = User(email=email, **kwargs)
-        if not kwargs.get('password'):
-            user.set_password('admin')
-        user.save()
-
-        # UserEmail is created by a signal
-        assert UserEmail.objects.filter(
-            user=user,
-            email=email,
-        ).update(is_verified=True)
-
-        return user
-
-    def create_useremail(self, user, email, **kwargs):
-        if not email:
-            email = uuid4().hex + '@example.com'
-
-        kwargs.setdefault('is_verified', True)
-
-        useremail = UserEmail(user=user, email=email, **kwargs)
-        useremail.save()
-
-        return useremail
-
-    def create_event(self, event_id=None, normalize=True, **kwargs):
-        # XXX: Do not use this method for new tests! Prefer `store_event`.
-        if event_id is None:
-            event_id = uuid4().hex
-        if 'group' not in kwargs:
-            kwargs['group'] = self.group
-        kwargs.setdefault('project', kwargs['group'].project)
-        kwargs.setdefault('data', copy.deepcopy(DEFAULT_EVENT_DATA))
-        kwargs.setdefault('platform', kwargs['data'].get('platform', 'python'))
-        kwargs.setdefault('message', kwargs['data'].get('message', 'message'))
-        if kwargs.get('tags'):
-            tags = kwargs.pop('tags')
-            if isinstance(tags, dict):
-                tags = list(tags.items())
-            kwargs['data']['tags'] = tags
-        if kwargs.get('stacktrace'):
-            stacktrace = kwargs.pop('stacktrace')
-            kwargs['data']['stacktrace'] = stacktrace
-
-        user = kwargs.pop('user', None)
-        if user is not None:
-            kwargs['data']['user'] = user
-
-        kwargs['data'].setdefault(
-            'errors', [{
-                'type': EventError.INVALID_DATA,
-                'name': 'foobar',
-            }]
-        )
+    def create_full_event(self, group=None, *args, **kwargs):
+        if group is None:
+            group = self.group
+        return Factories.create_full_event(group=group, *args, **kwargs)
 
-        # maintain simple event fixtures by supporting the legacy message
-        # parameter just like our API would
-        if 'logentry' not in kwargs['data']:
-            kwargs['data']['logentry'] = {
-                'message': kwargs['message'] or '<unlabeled event>',
-            }
-
-        if normalize:
-            manager = EventManager(CanonicalKeyDict(kwargs['data']),
-                                   for_store=False)
-            manager.normalize()
-            kwargs['data'] = manager.get_data()
-            kwargs['data'].update(manager.materialize_metadata())
-            kwargs['message'] = manager.get_search_message()
-
-        event = Event(event_id=event_id, **kwargs)
-        EventMapping.objects.create(
-            project_id=event.project.id,
-            event_id=event_id,
-            group=event.group,
-        )
-        # emulate EventManager refs
-        event.data.bind_ref(event)
-        event.save()
-        return event
-
-    def store_event(self, data, project_id, assert_no_errors=True):
-        # Like `create_event`, but closer to how events are actually
-        # ingested. Prefer to use this method over `create_event`
-        manager = EventManager(data)
-        manager.normalize()
-        if assert_no_errors:
-            errors = manager.get_data().get('errors')
-            assert not errors, errors
-
-        event = manager.save(project_id)
-        event.group.save()
-        return event
-
-    def create_full_event(self, event_id='a', **kwargs):
-        payload = """
-            {
-                "event_id": "f5dd88e612bc406ba89dfebd09120769",
-                "project": 11276,
-                "release": "e1b5d1900526feaf20fe2bc9cad83d392136030a",
-                "platform": "javascript",
-                "culprit": "app/components/events/eventEntries in map",
-                "logentry": {"formatted": "TypeError: Cannot read property '1' of null"},
-                "tags": [
-                    ["environment", "prod"],
-                    ["sentry_version", "e1b5d1900526feaf20fe2bc9cad83d392136030a"],
-                    ["level", "error"],
-                    ["logger", "javascript"],
-                    ["sentry:release", "e1b5d1900526feaf20fe2bc9cad83d392136030a"],
-                    ["browser", "Chrome 48.0"],
-                    ["device", "Other"],
-                    ["os", "Windows 10"],
-                    ["url", "https://sentry.io/katon-direct/localhost/issues/112734598/"],
-                    ["sentry:user", "id:41656"]
-                ],
-                "errors": [{
-                    "url": "<anonymous>",
-                    "type": "js_no_source"
-                }],
-                "extra": {
-                    "session:duration": 40364
-                },
-                "exception": {
-                    "exc_omitted": null,
-                    "values": [{
-                        "stacktrace": {
-                            "frames": [{
-                                "function": "batchedUpdates",
-                                "abs_path": "webpack:////usr/src/getsentry/src/sentry/~/react/lib/ReactUpdates.js",
-                                "pre_context": ["  // verify that that's the case. (This is called by each top-level update", "  // function, like setProps, setState, forceUpdate, etc.; creation and", "  // destruction of top-level components is guarded in ReactMount.)", "", "  if (!batchingStrategy.isBatchingUpdates) {"],
-                                "post_context": ["    return;", "  }", "", "  dirtyComponents.push(component);", "}"],
-                                "filename": "~/react/lib/ReactUpdates.js",
-                                "module": "react/lib/ReactUpdates",
-                                "colno": 0,
-                                "in_app": false,
-                                "data": {
-                                    "orig_filename": "/_static/29e365f8b0d923bc123e8afa38d890c3/sentry/dist/vendor.js",
-                                    "orig_abs_path": "https://media.sentry.io/_static/29e365f8b0d923bc123e8afa38d890c3/sentry/dist/vendor.js",
-                                    "sourcemap": "https://media.sentry.io/_static/29e365f8b0d923bc123e8afa38d890c3/sentry/dist/vendor.js.map",
-                                    "orig_lineno": 37,
-                                    "orig_function": "Object.s [as enqueueUpdate]",
-                                    "orig_colno": 16101
-                                },
-                                "context_line": "    batchingStrategy.batchedUpdates(enqueueUpdate, component);",
-                                "lineno": 176
-                            }],
-                            "frames_omitted": null
-                        },
-                        "type": "TypeError",
-                        "value": "Cannot read property '1' of null",
-                        "module": null
-                    }]
-                },
-                "request": {
-                    "url": "https://sentry.io/katon-direct/localhost/issues/112734598/",
-                    "headers": [
-                        ["Referer", "https://sentry.io/welcome/"],
-                        ["User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36"]
-                    ]
-                },
-                "user": {
-                    "ip_address": "0.0.0.0",
-                    "id": "41656",
-                    "email": "test@example.com"
-                },
-                "version": "7",
-                "breadcrumbs": {
-                    "values": [
-                        {
-                            "category": "xhr",
-                            "timestamp": 1496395011.63,
-                            "type": "http",
-                            "data": {
-                                "url": "/api/path/here",
-                                "status_code": "500",
-                                "method": "POST"
-                            }
-                        }
-                    ]
-                }
-            }"""
-
-        event = self.create_event(
-            event_id=event_id, platform='javascript',
-            data=json.loads(payload),
-
-            # This payload already went through sourcemap
-            # processing, normalizing it would remove
-            # frame.data (orig_filename, etc)
-            normalize=False
-        )
-        return event
-
-    def create_group(self, project=None, checksum=None, **kwargs):
-        if checksum:
-            warnings.warn('Checksum passed to create_group', DeprecationWarning)
+    def create_group(self, project=None, *args, **kwargs):
         if project is None:
             project = self.project
-        kwargs.setdefault('message', 'Hello world')
-        kwargs.setdefault('data', {})
-        if 'type' not in kwargs['data']:
-            kwargs['data'].update(
-                {
-                    'type': 'default',
-                    'metadata': {
-                        'title': kwargs['message'],
-                    },
-                }
-            )
-        if 'short_id' not in kwargs:
-            kwargs['short_id'] = project.next_short_id()
-        return Group.objects.create(project=project, **kwargs)
+        return Factories.create_group(project=project, *args, **kwargs)
 
     def create_file(self, **kwargs):
-        return File.objects.create(**kwargs)
+        return Factories.create_file(**kwargs)
 
-    def create_file_from_path(self, path, name=None, **kwargs):
-        if name is None:
-            name = os.path.basename(path)
+    def create_file_from_path(self, *args, **kwargs):
+        return Factories.create_file_from_path(*args, **kwargs)
 
-        file = self.create_file(name=name, **kwargs)
-        with open(path) as f:
-            file.putfile(f)
-        return file
-
-    def create_event_attachment(self, event=None, file=None, **kwargs):
+    def create_event_attachment(self, event=None, *args, **kwargs):
         if event is None:
             event = self.event
+        return Factories.create_event_attachment(event=event, *args, **kwargs)
 
-        if file is None:
-            file = self.create_file(
-                name='log.txt',
-                size=32,
-                headers={'Content-Type': 'text/plain'},
-                checksum='dc1e3f3e411979d336c3057cce64294f3420f93a',
-            )
-
-        return EventAttachment.objects.create(
-            project_id=event.project_id,
-            group_id=event.group_id,
-            event_id=event.event_id,
-            file=file,
-            **kwargs
-        )
-
-    def create_dif_file(self, debug_id=None, project=None, object_name=None,
-                        features=None, data=None, file=None, cpu_name=None, **kwargs):
+    def create_dif_file(self, project=None, *args, **kwargs):
         if project is None:
             project = self.project
+        return Factories.create_dif_file(project=project, *args, **kwargs)
 
-        if debug_id is None:
-            debug_id = six.text_type(uuid4())
-
-        if object_name is None:
-            object_name = '%s.dSYM' % debug_id
-
-        if features is not None:
-            if data is None:
-                data = {}
-            data['features'] = features
-
-        if file is None:
-            file = self.create_file(
-                name=object_name,
-                size=42,
-                headers={'Content-Type': 'application/x-mach-binary'},
-                checksum='dc1e3f3e411979d336c3057cce64294f3420f93a',
-            )
-
-        return ProjectDebugFile.objects.create(
-            debug_id=debug_id,
-            project=project,
-            object_name=object_name,
-            cpu_name=cpu_name or 'x86_64',
-            file=file,
-            data=data,
-            **kwargs
-        )
-
-        return ProjectDebugFile.objects.create(project=project, **kwargs)
-
-    def create_dif_from_path(self, path, object_name=None, **kwargs):
-        if object_name is None:
-            object_name = os.path.basename(path)
-
-        headers = {'Content-Type': 'application/x-mach-binary'}
-        file = self.create_file_from_path(path, name=object_name, headers=headers)
-        return self.create_dif_file(file=file, object_name=object_name, **kwargs)
-
-    def add_user_permission(self, user, permission):
-        try:
-            with transaction.atomic():
-                UserPermission.objects.create(user=user, permission=permission)
-        except IntegrityError:
-            raise
-
-    def create_sentry_app(self, name=None, organization=None, published=False, scopes=(),
-                          webhook_url=None, **kwargs):
-        if not name:
-            name = petname.Generate(2, ' ', letters=10).title()
-        if not organization:
-            organization = self.create_organization()
-        if not webhook_url:
-            webhook_url = 'https://example.com/webhook'
-
-        _kwargs = {
-            'name': name,
-            'organization': organization,
-            'scopes': scopes,
-            'webhook_url': webhook_url,
-            'events': [],
-            'schema': '{}',
-        }
-
-        _kwargs.update(kwargs)
+    def create_dif_from_path(self, project=None, *args, **kwargs):
+        if project is None:
+            project = self.project
+        return Factories.create_dif_from_path(project=project, *args, **kwargs)
 
-        app = sentry_apps.Creator.run(**_kwargs)
+    def add_user_permission(self, *args, **kwargs):
+        return Factories.add_user_permission(*args, **kwargs)
 
-        if published:
-            app.update(status=SentryAppStatus.PUBLISHED)
+    def create_sentry_app(self, *args, **kwargs):
+        return Factories.create_sentry_app(*args, **kwargs)
 
-        return app
+    def create_sentry_app_installation(self, *args, **kwargs):
+        return Factories.create_sentry_app_installation(*args, **kwargs)
 
-    def create_sentry_app_installation(self, organization=None, slug=None, user=None):
-        if not organization:
-            organization = self.create_organization()
+    def create_issue_link_schema(self, *args, **kwargs):
+        return Factories.create_issue_link_schema(*args, **kwargs)
 
-        self.create_project(organization=organization)
+    def create_alert_rule_action_schema(self, *args, **kwargs):
+        return Factories.create_alert_rule_action_schema(*args, **kwargs)
 
-        return sentry_app_installations.Creator.run(
-            slug=(slug or self.create_sentry_app().slug),
-            organization=organization,
-            user=(user or self.create_user()),
-        )
-
-    def create_issue_link_schema(self):
-        return {
-            'type': 'issue-link',
-            'link': {
-                'uri': '/sentry/issues/link',
-                'required_fields': [
-                    {
-                        'type': 'select',
-                        'name': 'assignee',
-                        'label': 'Assignee',
-                        'uri': '/sentry/members',
-                    },
-                ],
-            },
-
-            'create': {
-                'uri': '/sentry/issues/create',
-                'required_fields': [
-                    {
-                        'type': 'text',
-                        'name': 'title',
-                        'label': 'Title',
-                    },
-                    {
-                        'type': 'text',
-                        'name': 'summary',
-                        'label': 'Summary',
-                    },
-                ],
-
-                'optional_fields': [
-                    {
-                        'type': 'select',
-                        'name': 'points',
-                        'label': 'Points',
-                        'options': [
-                            ['1', '1'],
-                            ['2', '2'],
-                            ['3', '3'],
-                            ['5', '5'],
-                            ['8', '8'],
-                        ],
-                    },
-                    {
-                        'type': 'select',
-                        'name': 'assignee',
-                        'label': 'Assignee',
-                        'uri': '/sentry/members',
-                    },
-                ],
-            },
-        }
-
-    def create_alert_rule_action_schema(self):
-        return {
-            'type': 'alert-rule-action',
-            'required_fields': [{
-                'type': 'text',
-                'name': 'channel',
-                'label': 'Channel',
-            }],
-        }
-
-    def create_service_hook(self, actor=None, org=None, project=None,
-                            events=None, url=None, **kwargs):
-        if not actor:
-            actor = self.create_user()
-        if not org:
-            org = self.create_organization(owner=actor)
-        if not project:
-            project = self.create_project(organization=org)
-        if events is None:
-            events = ('event.created',)
-        if not url:
-            url = 'https://example.com/sentry/webhook'
-
-        _kwargs = {
-            'actor': actor,
-            'projects': [project],
-            'organization': org,
-            'events': events,
-            'url': url,
-        }
-
-        _kwargs.update(kwargs)
-
-        return service_hooks.Creator.run(**_kwargs)
-
-    def create_userreport(self, **kwargs):
-        userreport = UserReport.objects.create(
-            group=kwargs['group'],
-            event_id='a' * 32,
-            project=kwargs['project'],
-            name='Jane Doe',
-            email='jane@example.com',
-            comments="the application crashed"
-        )
+    def create_service_hook(self, *args, **kwargs):
+        return Factories.create_service_hook(*args, **kwargs)
 
-        return userreport
+    def create_userreport(self, *args, **kwargs):
+        return Factories.create_userreport(*args, **kwargs)
diff --git a/src/sentry/utils/pytest/__init__.py b/src/sentry/utils/pytest/__init__.py
index 17eaa2f35c..0c7625cb57 100644
--- a/src/sentry/utils/pytest/__init__.py
+++ b/src/sentry/utils/pytest/__init__.py
@@ -3,4 +3,6 @@ from __future__ import absolute_import
 pytest_plugins = [
     'sentry.utils.pytest.sentry',
     'sentry.utils.pytest.selenium',
+    'sentry.utils.pytest.fixtures',
+    'sentry.utils.pytest.unittest',
 ]
diff --git a/src/sentry/utils/pytest/fixtures.py b/src/sentry/utils/pytest/fixtures.py
new file mode 100644
index 0000000000..053eac90bf
--- /dev/null
+++ b/src/sentry/utils/pytest/fixtures.py
@@ -0,0 +1,240 @@
+# -*- coding: utf-8 -*-
+"""
+A number of generic default fixtures to use with tests.
+
+All model-related fixtures defined here require the database, and should imply as much by
+including ``db`` fixture in the function resolution scope.
+"""
+from __future__ import absolute_import, print_function, unicode_literals
+
+import pytest
+
+
+DEFAULT_EVENT_DATA = {
+    'extra': {
+        'loadavg': [0.97607421875, 0.88330078125, 0.833984375],
+        'sys.argv': [
+            '/Users/dcramer/.virtualenvs/sentry/bin/raven', 'test',
+            'https://ebc35f33e151401f9deac549978bda11:f3403f81e12e4c24942d505f086b2cad@sentry.io/1'
+        ],
+        'user':
+        'dcramer'
+    },
+    'modules': {
+        'raven': '3.1.13'
+    },
+    'request': {
+        'cookies': {},
+        'data': {},
+        'env': {},
+        'headers': {},
+        'method': 'GET',
+        'query_string': '',
+        'url': 'http://example.com',
+    },
+    'stacktrace': {
+        'frames': [
+            {
+                'abs_path':
+                'www/src/sentry/models/foo.py',
+                'context_line':
+                '                        string_max_length=self.string_max_length)',
+                'filename':
+                'sentry/models/foo.py',
+                'function':
+                'build_msg',
+                'in_app':
+                True,
+                'lineno':
+                29,
+                'module':
+                'raven.base',
+                'post_context': [
+                    '                },', '            })', '',
+                    "        if 'stacktrace' in data:",
+                    '            if self.include_paths:'
+                ],
+                'pre_context': [
+                    '', '            data.update({',
+                    "                'stacktrace': {",
+                    "                    'frames': get_stack_info(frames,",
+                    '                        list_max_length=self.list_max_length,'
+                ],
+                'vars': {
+                    'culprit': 'raven.scripts.runner',
+                    'date': 'datetime.datetime(2013, 2, 14, 20, 6, 33, 479471)',
+                    'event_id': '598fb19363e745ec8be665e6ba88b1b2',
+                    'event_type': 'raven.events.Message',
+                    'frames': '<generator object iter_stack_frames at 0x103fef050>',
+                    'handler': '<raven.events.Message object at 0x103feb710>',
+                    'k': 'logentry',
+                    'public_key': None,
+                    'result': {
+                        'logentry':
+                        "{'message': 'This is a test message generated using ``raven test``', 'params': []}"
+                    },
+                    'self': '<raven.base.Client object at 0x104397f10>',
+                    'stack': True,
+                    'tags': None,
+                    'time_spent': None,
+                },
+            },
+            {
+                'abs_path':
+                '/Users/dcramer/.virtualenvs/sentry/lib/python2.7/site-packages/raven/base.py',
+                'context_line':
+                '                        string_max_length=self.string_max_length)',
+                'filename':
+                'raven/base.py',
+                'function':
+                'build_msg',
+                'in_app':
+                False,
+                'lineno':
+                290,
+                'module':
+                'raven.base',
+                'post_context': [
+                    '                },', '            })', '',
+                    "        if 'stacktrace' in data:",
+                    '            if self.include_paths:'
+                ],
+                'pre_context': [
+                    '', '            data.update({',
+                    "                'stacktrace': {",
+                    "                    'frames': get_stack_info(frames,",
+                    '                        list_max_length=self.list_max_length,'
+                ],
+                'vars': {
+                    'culprit': 'raven.scripts.runner',
+                    'date': 'datetime.datetime(2013, 2, 14, 20, 6, 33, 479471)',
+                    'event_id': '598fb19363e745ec8be665e6ba88b1b2',
+                    'event_type': 'raven.events.Message',
+                    'frames': '<generator object iter_stack_frames at 0x103fef050>',
+                    'handler': '<raven.events.Message object at 0x103feb710>',
+                    'k': 'logentry',
+                    'public_key': None,
+                    'result': {
+                        'logentry':
+                        "{'message': 'This is a test message generated using ``raven test``', 'params': []}"
+                    },
+                    'self': '<raven.base.Client object at 0x104397f10>',
+                    'stack': True,
+                    'tags': None,
+                    'time_spent': None,
+                },
+            },
+        ],
+    },
+    'tags': [],
+    'platform': 'python',
+}
+
+
+@pytest.mark.django_db
+@pytest.fixture
+def factories():
+    # XXX(dcramer): hack to prevent recursive imports
+    from sentry.testutils.factories import Factories
+
+    return Factories
+
+
+@pytest.fixture(scope='function')
+def session():
+    return factories.create_session()
+
+
+@pytest.mark.django_db
+@pytest.fixture(scope='function')
+def default_user(factories):
+    return factories.create_user(email='admin@localhost', is_superuser=True)
+
+
+@pytest.mark.django_db
+@pytest.fixture(scope='function')
+def default_organization(factories, default_user):
+    # XXX(dcramer): ensure that your org slug doesnt match your team slug
+    # and the same for your project slug
+    return factories.create_organization(
+        name='baz',
+        slug='baz',
+        owner=default_user,
+    )
+
+
+@pytest.mark.django_db
+@pytest.fixture(scope='function')
+def default_team(factories, default_organization):
+    from sentry.models import OrganizationMember, OrganizationMemberTeam
+
+    team = factories.create_team(
+        organization=default_organization,
+        name='foo',
+        slug='foo',
+    )
+    # XXX: handle legacy team fixture
+    queryset = OrganizationMember.objects.filter(
+        organization=default_organization,
+    )
+    for om in queryset:
+        OrganizationMemberTeam.objects.create(
+            team=team,
+            organizationmember=om,
+            is_active=True,
+        )
+    return team
+
+
+@pytest.mark.django_db
+@pytest.fixture(scope='function')
+def default_project(factories, default_team):
+    return factories.create_project(
+        name='Bar',
+        slug='bar',
+        teams=[default_team],
+    )
+
+
+@pytest.mark.django_db
+@pytest.fixture(scope='function')
+def default_projectkey(factories, default_project):
+    return factories.create_project_key(project=default_project)
+
+
+@pytest.mark.django_db
+@pytest.fixture(scope='function')
+def default_environment(factories, default_project):
+    return factories.create_environment(
+        name='development',
+        project=default_project,
+    )
+
+
+@pytest.mark.django_db
+@pytest.fixture(scope='function')
+def default_group(factories, default_project):
+    return factories.create_group(
+        project=default_project,
+        message=u'\u3053\u3093\u306b\u3061\u306f',
+    )
+
+
+@pytest.mark.django_db
+@pytest.fixture(scope='function')
+def default_event(factories, default_group):
+    return factories.create_event(
+        group=default_group,
+        event_id='a' * 32,
+        message=u'\u3053\u3093\u306b\u3061\u306f',
+    )
+
+
+@pytest.mark.django_db
+@pytest.fixture(scope='function')
+def default_activity(default_group, default_project, default_user):
+    from sentry.models import Activity
+
+    return Activity.objects.create(
+        group=default_group, project=default_project, type=Activity.NOTE, user=default_user, data={}
+    )
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index d06416cb3a..385a08829c 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -4,6 +4,8 @@ import mock
 import os
 
 from django.conf import settings
+from sentry_sdk import Hub
+
 
 TEST_ROOT = os.path.normpath(
     os.path.join(
@@ -258,3 +260,5 @@ def pytest_runtest_teardown(item):
     from sentry.models import OrganizationOption, ProjectOption, UserOption
     for model in (OrganizationOption, ProjectOption, UserOption):
         model.objects.clear_local_cache()
+
+    Hub.main.bind_client(None)
diff --git a/src/sentry/utils/pytest/unittest.py b/src/sentry/utils/pytest/unittest.py
new file mode 100644
index 0000000000..a79e9b8a9b
--- /dev/null
+++ b/src/sentry/utils/pytest/unittest.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import
+
+import pytest
+
+
+@pytest.fixture(scope="function")
+def factories_class(request, default_user, default_organization, default_team, default_project,
+                    default_projectkey, default_environment, default_group, default_event, default_activity):
+    # set a class attribute on the invoking test context
+    request.cls.user = default_user
+    request.cls.organization = default_organization
+    request.cls.team = default_team
+    request.cls.project = default_project
+    request.cls.projectkey = default_projectkey
+    request.cls.environment = default_environment
+    request.cls.group = default_group
+    request.cls.event = default_event
+    request.cls.activity = default_activity
+
+
+@pytest.fixture(scope="function")
+def session_class(request, session):
+    request.cls.session = session
diff --git a/tests/sentry/api/endpoints/test_group_events.py b/tests/sentry/api/endpoints/test_group_events.py
index 1fca521cb9..87aa9fc16b 100644
--- a/tests/sentry/api/endpoints/test_group_events.py
+++ b/tests/sentry/api/endpoints/test_group_events.py
@@ -22,8 +22,8 @@ class GroupEventsTest(APITestCase):
         self.login_as(user=self.user)
 
         group = self.create_group()
-        event_1 = self.create_event('a' * 32, group=group)
-        event_2 = self.create_event('b' * 32, group=group)
+        event_1 = self.create_event(event_id='a' * 32, group=group)
+        event_2 = self.create_event(event_id='b' * 32, group=group)
 
         url = u'/api/0/issues/{}/events/'.format(group.id)
         response = self.client.get(url, format='json')
@@ -41,8 +41,8 @@ class GroupEventsTest(APITestCase):
         self.login_as(user=self.user)
 
         group = self.create_group()
-        event_1 = self.create_event('a' * 32, group=group)
-        event_2 = self.create_event('b' * 32, group=group)
+        event_1 = self.create_event(event_id='a' * 32, group=group)
+        event_2 = self.create_event(event_id='b' * 32, group=group)
 
         tagkey_1 = tagstore.create_tag_key(
             project_id=group.project_id,
@@ -136,8 +136,8 @@ class GroupEventsTest(APITestCase):
         self.login_as(user=self.user)
 
         group = self.create_group()
-        event_1 = self.create_event('a' * 32, group=group)
-        self.create_event('b' * 32, group=group)
+        event_1 = self.create_event(event_id='a' * 32, group=group)
+        self.create_event(event_id='b' * 32, group=group)
         query = event_1.event_id
 
         url = u'/api/0/issues/{}/events/?query={}'.format(group.id, query)
@@ -245,11 +245,11 @@ class GroupEventsTest(APITestCase):
         project = self.create_project()
         group = self.create_group(project=project)
         self.create_event(
-            'a' * 32,
+            event_id='a' * 32,
             group=group,
             datetime=timezone.now() - timedelta(days=2),
         )
-        event_2 = self.create_event('b' * 32, group=group)
+        event_2 = self.create_event(event_id='b' * 32, group=group)
 
         with self.options({'system.event-retention-days': 1}):
             response = self.client.get(u'/api/0/issues/{}/events/'.format(group.id))
@@ -269,11 +269,11 @@ class GroupEventsTest(APITestCase):
         project = self.create_project()
         group = self.create_group(project=project)
         event_1 = self.create_event(
-            'a' * 32,
+            event_id='a' * 32,
             group=group,
             datetime=timezone.now() - timedelta(days=2),
         )
-        event_2 = self.create_event('b' * 32, group=group)
+        event_2 = self.create_event(event_id='b' * 32, group=group)
 
         response = self.client.get(
             u'/api/0/issues/{}/events/'.format(group.id),
diff --git a/tests/sentry/test_canonical.py b/tests/sentry/test_canonical.py
index 2990fa0f14..b706933998 100644
--- a/tests/sentry/test_canonical.py
+++ b/tests/sentry/test_canonical.py
@@ -2,13 +2,14 @@
 
 from __future__ import absolute_import, print_function
 
+import unittest
+
 from collections import OrderedDict
 
-from sentry.testutils import TestCase
 from sentry.utils.canonical import CanonicalKeyView, CanonicalKeyDict
 
 
-class CanonicalKeyViewTests(TestCase):
+class CanonicalKeyViewTests(unittest.TestCase):
     canonical_data = OrderedDict([
         ('release', 'asdf'),
         ('exception', {'type': 'DemoException'}),
@@ -58,7 +59,7 @@ class CanonicalKeyViewTests(TestCase):
         assert CanonicalKeyView(self.mixed_data)['sentry.interfaces.User'] == {'id': 'DemoUser'}
 
 
-class CanonicalKeyDictTests(TestCase):
+class CanonicalKeyDictTests(unittest.TestCase):
     canonical_data = {
         'release': 'asdf',
         'exception': {'type': 'DemoException'},
@@ -123,7 +124,7 @@ class CanonicalKeyDictTests(TestCase):
         })) == 3
 
 
-class LegacyCanonicalKeyDictTests(TestCase):
+class LegacyCanonicalKeyDictTests(unittest.TestCase):
     canonical_data = {
         'release': 'asdf',
         'sentry.interfaces.Exception': {'type': 'DemoException'},
@@ -165,7 +166,7 @@ class LegacyCanonicalKeyDictTests(TestCase):
         assert d['sentry.interfaces.User'] == {'id': 'other'}
 
 
-class DoubleAliasingTests(TestCase):
+class DoubleAliasingTests(unittest.TestCase):
     def test_canonical(self):
         view = CanonicalKeyView({'logentry': 'foo'})
         assert len(view) == 1
diff --git a/tests/sentry/test_constants.py b/tests/sentry/test_constants.py
index a5805885fb..5e55e9f953 100644
--- a/tests/sentry/test_constants.py
+++ b/tests/sentry/test_constants.py
@@ -4,35 +4,35 @@ from mock import patch
 
 from sentry.constants import get_integration_id_for_marketing_slug, get_integration_id_for_event, \
     INTEGRATION_ID_TO_PLATFORM_DATA
-from sentry.testutils import TestCase
-
-
-class ConstantsTest(TestCase):
-    mock_integration_ids = {
-        'java': {},
-        'java-log4j': {},
-        'java-log4j2': {},
-        'java-android': {},
-        'javascript': {},
-    }
-
-    def test_marketing_slug_to_integration_id(self):
-        with patch.dict(INTEGRATION_ID_TO_PLATFORM_DATA, self.mock_integration_ids):
-            assert get_integration_id_for_marketing_slug('java') == 'java'
-            # kotlin uses the java library, too
-            assert get_integration_id_for_marketing_slug('kotlin') == 'java'
-            assert get_integration_id_for_marketing_slug('android') == 'java-android'
-            assert get_integration_id_for_marketing_slug('foobar') is None
-
-    def test_integration_id_for_event(self):
-        with patch.dict(INTEGRATION_ID_TO_PLATFORM_DATA, self.mock_integration_ids):
-            assert get_integration_id_for_event('java', 'sentry-java', None) == 'java'
-            assert get_integration_id_for_event('java', 'raven-java', None) == 'java'
-            assert get_integration_id_for_event('java', 'raven-java:log4j', None) == 'java-log4j'
-            assert get_integration_id_for_event('java', 'sentry-java',
-                                                ['android']) == 'java-android'
-            assert get_integration_id_for_event('java', 'sentry-java', ['foobar',
-                                                                        'log4j2']) == 'java-log4j2'
-            assert get_integration_id_for_event('foobar', 'sentry-java', None) == 'java'
-            assert get_integration_id_for_event('java', 'foobar', None) == 'java'
-            assert get_integration_id_for_event('foobar', 'foobar', None) is None
+
+
+mock_integration_ids = {
+    'java': {},
+    'java-log4j': {},
+    'java-log4j2': {},
+    'java-android': {},
+    'javascript': {},
+}
+
+
+def test_marketing_slug_to_integration_id():
+    with patch.dict(INTEGRATION_ID_TO_PLATFORM_DATA, mock_integration_ids):
+        assert get_integration_id_for_marketing_slug('java') == 'java'
+        # kotlin uses the java library, too
+        assert get_integration_id_for_marketing_slug('kotlin') == 'java'
+        assert get_integration_id_for_marketing_slug('android') == 'java-android'
+        assert get_integration_id_for_marketing_slug('foobar') is None
+
+
+def test_integration_id_for_event():
+    with patch.dict(INTEGRATION_ID_TO_PLATFORM_DATA, mock_integration_ids):
+        assert get_integration_id_for_event('java', 'sentry-java', None) == 'java'
+        assert get_integration_id_for_event('java', 'raven-java', None) == 'java'
+        assert get_integration_id_for_event('java', 'raven-java:log4j', None) == 'java-log4j'
+        assert get_integration_id_for_event('java', 'sentry-java',
+                                            ['android']) == 'java-android'
+        assert get_integration_id_for_event('java', 'sentry-java', ['foobar',
+                                                                    'log4j2']) == 'java-log4j2'
+        assert get_integration_id_for_event('foobar', 'sentry-java', None) == 'java'
+        assert get_integration_id_for_event('java', 'foobar', None) == 'java'
+        assert get_integration_id_for_event('foobar', 'foobar', None) is None
diff --git a/tests/sentry/test_http.py b/tests/sentry/test_http.py
index 8fa114b211..751a4771b8 100644
--- a/tests/sentry/test_http.py
+++ b/tests/sentry/test_http.py
@@ -10,75 +10,79 @@ from mock import patch
 from urllib3.util.connection import HAS_IPV6
 
 from sentry import http
-from sentry.testutils import TestCase
 from sentry.testutils.helpers import override_blacklist
 
 
-class HttpTest(TestCase):
-    @responses.activate
-    @patch('socket.getaddrinfo')
-    def test_simple(self, mock_getaddrinfo):
-        mock_getaddrinfo.return_value = [(2, 1, 6, '', ('81.0.0.1', 0))]
-        responses.add(responses.GET, 'http://example.com', body='foo bar')
-
-        resp = http.safe_urlopen('http://example.com')
-        data = http.safe_urlread(resp)
-        assert data.decode('utf-8') == 'foo bar'
-
-        request = responses.calls[0].request
-        assert 'User-Agent' in request.headers
-        assert 'gzip' in request.headers.get('Accept-Encoding', '')
-
-    # XXX(dcramer): we can't use responses here as it hooks Session.send
-    # @responses.activate
-    @override_blacklist('127.0.0.1', '::1', '10.0.0.0/8')
-    def test_ip_blacklist_ipv4(self):
-        with pytest.raises(SuspiciousOperation):
-            http.safe_urlopen('http://127.0.0.1')
-        with pytest.raises(SuspiciousOperation):
-            http.safe_urlopen('http://10.0.0.10')
-        with pytest.raises(SuspiciousOperation):
-            # '2130706433' is dword for '127.0.0.1'
-            http.safe_urlopen('http://2130706433')
-
-    @pytest.mark.skipif(not HAS_IPV6, reason='needs ipv6')
-    @override_blacklist('::1')
-    def test_ip_blacklist_ipv6(self):
-        with pytest.raises(SuspiciousOperation):
-            http.safe_urlopen('http://[::1]')
-
-    @pytest.mark.skipif(HAS_IPV6, reason='stub for non-ipv6 systems')
-    @override_blacklist('::1')
-    @patch('socket.getaddrinfo')
-    def test_ip_blacklist_ipv6_fallback(self, mock_getaddrinfo):
-        mock_getaddrinfo.return_value = [(10, 1, 6, '', ('::1', 0, 0, 0))]
-        with pytest.raises(SuspiciousOperation):
-            http.safe_urlopen('http://[::1]')
-
-    @pytest.mark.skipif(
-        platform.system() == 'Darwin',
-        reason='macOS is always broken, see comment in sentry/http.py'
+@responses.activate
+@patch('socket.getaddrinfo')
+def test_simple(mock_getaddrinfo):
+    mock_getaddrinfo.return_value = [(2, 1, 6, '', ('81.0.0.1', 0))]
+    responses.add(responses.GET, 'http://example.com', body='foo bar')
+
+    resp = http.safe_urlopen('http://example.com')
+    data = http.safe_urlread(resp)
+    assert data.decode('utf-8') == 'foo bar'
+
+    request = responses.calls[0].request
+    assert 'User-Agent' in request.headers
+    assert 'gzip' in request.headers.get('Accept-Encoding', '')
+
+
+@override_blacklist('127.0.0.1', '::1', '10.0.0.0/8')
+# XXX(dcramer): we can't use responses here as it hooks Session.send
+# @responses.activate
+def test_ip_blacklist_ipv4():
+    with pytest.raises(SuspiciousOperation):
+        http.safe_urlopen('http://127.0.0.1')
+    with pytest.raises(SuspiciousOperation):
+        http.safe_urlopen('http://10.0.0.10')
+    with pytest.raises(SuspiciousOperation):
+        # '2130706433' is dword for '127.0.0.1'
+        http.safe_urlopen('http://2130706433')
+
+
+@pytest.mark.skipif(not HAS_IPV6, reason='needs ipv6')
+@override_blacklist('::1')
+def test_ip_blacklist_ipv6():
+    with pytest.raises(SuspiciousOperation):
+        http.safe_urlopen('http://[::1]')
+
+
+@pytest.mark.skipif(HAS_IPV6, reason='stub for non-ipv6 systems')
+@override_blacklist('::1')
+@patch('socket.getaddrinfo')
+def test_ip_blacklist_ipv6_fallback(mock_getaddrinfo):
+    mock_getaddrinfo.return_value = [(10, 1, 6, '', ('::1', 0, 0, 0))]
+    with pytest.raises(SuspiciousOperation):
+        http.safe_urlopen('http://[::1]')
+
+
+@pytest.mark.skipif(
+    platform.system() == 'Darwin',
+    reason='macOS is always broken, see comment in sentry/http.py'
+)
+@override_blacklist('127.0.0.1')
+def test_garbage_ip():
+    with pytest.raises(SuspiciousOperation):
+        # '0177.0000.0000.0001' is an octal for '127.0.0.1'
+        http.safe_urlopen('http://0177.0000.0000.0001')
+
+
+@override_blacklist('127.0.0.1')
+def test_safe_socket_connect():
+    with pytest.raises(SuspiciousOperation):
+        http.safe_socket_connect(('127.0.0.1', 80))
+
+
+@responses.activate
+def test_fetch_file():
+    responses.add(
+        responses.GET, 'http://example.com', body='foo bar', content_type='application/json'
     )
-    @override_blacklist('127.0.0.1')
-    def test_garbage_ip(self):
-        with pytest.raises(SuspiciousOperation):
-            # '0177.0000.0000.0001' is an octal for '127.0.0.1'
-            http.safe_urlopen('http://0177.0000.0000.0001')
-
-    @override_blacklist('127.0.0.1')
-    def test_safe_socket_connect(self):
-        with pytest.raises(SuspiciousOperation):
-            http.safe_socket_connect(('127.0.0.1', 80))
-
-    @responses.activate
-    def test_fetch_file(self):
-        responses.add(
-            responses.GET, 'http://example.com', body='foo bar', content_type='application/json'
-        )
-
-        temp = tempfile.TemporaryFile()
-        result = http.fetch_file(url='http://example.com', domain_lock_enabled=False, outfile=temp)
-        temp.seek(0)
-        assert result.body is None
-        assert temp.read() == 'foo bar'
-        temp.close()
+
+    temp = tempfile.TemporaryFile()
+    result = http.fetch_file(url='http://example.com', domain_lock_enabled=False, outfile=temp)
+    temp.seek(0)
+    assert result.body is None
+    assert temp.read() == 'foo bar'
+    temp.close()
