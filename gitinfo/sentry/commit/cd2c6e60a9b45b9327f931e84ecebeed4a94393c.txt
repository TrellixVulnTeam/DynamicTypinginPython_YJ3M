commit cd2c6e60a9b45b9327f931e84ecebeed4a94393c
Author: Dan Fuller <dfuller@sentry.io>
Date:   Fri May 24 16:01:19 2019 -0700

    feat(api): Send emails to incident subscribers when someone comments, or on status changes (SEN-655)
    
    As per title. We send these emails to all subscribers unless they're the creator of the activity.

diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index 59fc242593..4bccf50843 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -18,6 +18,7 @@ from sentry.incidents.models import (
     IncidentSubscription,
     TimeSeriesSnapshot,
 )
+from sentry.incidents.tasks import send_subscriber_notifications
 from sentry.utils.snuba import (
     raw_query,
     SnubaTSResult,
@@ -164,7 +165,7 @@ def create_incident_activity(
         subscribe_to_incident(incident, user)
     value = six.text_type(value) if value is not None else value
     previous_value = six.text_type(previous_value) if previous_value is not None else previous_value
-    return IncidentActivity.objects.create(
+    activity = IncidentActivity.objects.create(
         incident=incident,
         type=activity_type.value,
         user=user,
@@ -173,6 +174,11 @@ def create_incident_activity(
         comment=comment,
         event_stats_snapshot=event_stats_snapshot,
     )
+    send_subscriber_notifications.apply_async(
+        kwargs={'activity_id': activity.id},
+        countdown=10,
+    )
+    return activity
 
 
 def update_comment(activity, comment):
@@ -274,6 +280,10 @@ def unsubscribe_from_incident(incident, user):
     return IncidentSubscription.objects.filter(incident=incident, user=user).delete()
 
 
+def get_incident_subscribers(incident):
+    return IncidentSubscription.objects.filter(incident=incident)
+
+
 def get_incident_activity(incident):
     return IncidentActivity.objects.filter(
         incident=incident,
diff --git a/src/sentry/incidents/tasks.py b/src/sentry/incidents/tasks.py
new file mode 100644
index 0000000000..d6a9323728
--- /dev/null
+++ b/src/sentry/incidents/tasks.py
@@ -0,0 +1,70 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.incidents.models import (
+    IncidentActivity,
+    IncidentActivityType,
+    IncidentStatus,
+)
+from sentry.tasks.base import instrumented_task
+from sentry.utils.email import MessageBuilder
+from sentry.utils.http import absolute_uri
+
+
+@instrumented_task(name='sentry.incidents.tasks.send_subscriber_notifications')
+def send_subscriber_notifications(activity_id):
+    from sentry.incidents.logic import get_incident_subscribers
+    try:
+        activity = IncidentActivity.objects.select_related(
+            'incident',
+            'user',
+            'incident__organization',
+        ).get(
+            id=activity_id,
+        )
+    except IncidentActivity.DoesNotExist:
+        return
+
+    subscribers = get_incident_subscribers(activity.incident).select_related('user')
+    msg = generate_incident_activity_email(activity)
+    msg.send_async([sub.user.email for sub in subscribers if sub.user != activity.user])
+
+
+def generate_incident_activity_email(activity):
+    incident = activity.incident
+    return MessageBuilder(
+        subject=u'Activity on Incident {} (#{})'.format(incident.title, incident.identifier),
+        template=u'sentry/emails/incidents/activity.txt',
+        html_template=u'sentry/emails/incidents/activity.html',
+        type='incident.activity',
+        context=build_activity_context(activity),
+    )
+
+
+def build_activity_context(activity):
+    if activity.type == IncidentActivityType.COMMENT.value:
+        action = 'left a comment'
+    else:
+        action = 'changed status from %s to %s' % (
+            IncidentStatus(int(activity.previous_value)).name.lower(),
+            IncidentStatus(int(activity.value)).name.lower(),
+        )
+    incident = activity.incident
+
+    action = '%s on incident %s (#%s)' % (action, incident.title, incident.identifier)
+
+    return {
+        'user_name': activity.user.name if activity.user else 'Sentry',
+        'action': action,
+        'link': absolute_uri(reverse(
+            'sentry-incident',
+            kwargs={
+                'organization_slug': incident.organization.slug,
+                'incident_id': incident.identifier,
+            },
+        )),
+        'comment': activity.comment,
+        # TODO: Build unsubscribe page and link to it
+        'unsubscribe_link': '',
+    }
diff --git a/src/sentry/templates/sentry/emails/incidents/activity.html b/src/sentry/templates/sentry/emails/incidents/activity.html
new file mode 100644
index 0000000000..d223936669
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/incidents/activity.html
@@ -0,0 +1,33 @@
+{% extends "sentry/emails/activity/generic.html" %}
+
+{% load sentry_avatars %}
+{% load sentry_helpers %}
+{% load sentry_assets %}
+
+{% block activity %}
+  <h3>{{ user_name }} {{ action }}</h3>
+
+  {% if enhanced_privacy %}
+    <div class="notice">
+      Details about this activity are not shown in this email since enhanced privacy
+      controls are enabled. For more details about this activity, <a href="{{ link }}">view on Sentry.</a>
+    </div>
+
+  {% else %}
+    {% if comment %}
+      <table class="note">
+        <tr>
+          <td class="avatar-column">
+            {% email_avatar user_name user_email size 48 %}
+          </td>
+          <td class="notch-column">
+            <img width="7" height="48" src="{% absolute_asset_url 'sentry' 'images/email/avatar-notch.png' %}">
+          </td>
+          <td>
+            <div class="note-body">{{ comment|urlize|linebreaks }}</div>
+          </td>
+        </tr>
+      </table>
+    {% endif %}
+  {% endif %}
+{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/incidents/activity.txt b/src/sentry/templates/sentry/emails/incidents/activity.txt
new file mode 100644
index 0000000000..a33e6c1ce7
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/incidents/activity.txt
@@ -0,0 +1,22 @@
+{% spaceless %}
+{% autoescape off %}
+# New Incident Activity
+
+{{ user_name }} {{ action }}:
+{% if enhanced_privacy %}
+Details about this activity are not shown in this email since enhanced privacy
+controls are enabled. For more details about this activity, view on Sentry:
+{{ link }}.
+{% else %}
+Incident: {{ link }}
+{% if comment %}
+Comment Details:
+{{ comment }}
+{% endif %}
+
+{% endif %}
+
+Unsubscribe: {{ unsubscribe_link }}
+
+{% endautoescape %}
+{% endspaceless %}
diff --git a/src/sentry/web/debug_urls.py b/src/sentry/web/debug_urls.py
index 638e0b068d..8a2b95fdf3 100644
--- a/src/sentry/web/debug_urls.py
+++ b/src/sentry/web/debug_urls.py
@@ -10,6 +10,7 @@ from sentry.web.frontend.debug.debug_assigned_email import (
 )
 from sentry.web.frontend.debug.debug_trigger_error import (DebugTriggerErrorView)
 from sentry.web.frontend.debug.debug_error_embed import (DebugErrorPageEmbedView)
+from sentry.web.frontend.debug.debug_incident_activity_email import DebugIncidentActivityEmailView
 from sentry.web.frontend.debug.debug_invalid_identity_email import DebugInvalidIdentityEmailView
 from sentry.web.frontend.debug.debug_mfa_added_email import (DebugMfaAddedEmailView)
 from sentry.web.frontend.debug.debug_mfa_removed_email import (DebugMfaRemovedEmailView)
@@ -87,7 +88,7 @@ urlpatterns = patterns(
     url(r'^debug/mail/sso-linked/$', DebugSsoLinkedEmailView.as_view()),
     url(r'^debug/mail/sso-unlinked/$', DebugSsoUnlinkedEmailView.as_view()),
     url(r'^debug/mail/sso-unlinked/no-password$', DebugSsoUnlinkedNoPasswordEmailView.as_view()),
-
+    url(r'^debug/mail/incident-activity$', DebugIncidentActivityEmailView.as_view()),
     url(r'^debug/mail/setup-2fa/$', DebugSetup2faEmailView.as_view()),
 
     url(r'^debug/embed/error-page/$', DebugErrorPageEmbedView.as_view()),
diff --git a/src/sentry/web/frontend/debug/debug_incident_activity_email.py b/src/sentry/web/frontend/debug/debug_incident_activity_email.py
new file mode 100644
index 0000000000..741843d200
--- /dev/null
+++ b/src/sentry/web/frontend/debug/debug_incident_activity_email.py
@@ -0,0 +1,36 @@
+from __future__ import absolute_import, print_function
+
+from sentry.models import User
+from django.views.generic import View
+
+from sentry.incidents.models import (
+    Incident,
+    IncidentActivity,
+    IncidentActivityType,
+)
+from sentry.models.organization import Organization
+from sentry.incidents.tasks import generate_incident_activity_email
+
+from .mail import MailPreview
+
+
+class DebugIncidentActivityEmailView(View):
+    def get(self, request):
+        organization = Organization(slug='myorg')
+        incident = Incident(
+            identifier=123,
+            organization=organization,
+            title='Something broke',
+        )
+        activity = IncidentActivity(
+            incident=incident,
+            user=User(name='Hello There'),
+            type=IncidentActivityType.COMMENT.value,
+            comment='hi'
+        )
+        email = generate_incident_activity_email(activity)
+        return MailPreview(
+            html_template=email.html_template,
+            text_template=email.template,
+            context=email.context,
+        ).render(request)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 5a6fbc0525..7ac39f9377 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -604,6 +604,11 @@ urlpatterns += patterns(
         react_page_view,
         name='sentry-stream'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[\w_-]+)/incidents/(?P<incident_id>\d+)/$',
+        react_page_view,
+        name='sentry-incident',
+    ),
     url(
         r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/issues/(?P<group_id>\d+)/tags/(?P<key>[^\/]+)/export/$',
         GroupTagExportView.as_view(),
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 52d2475708..61656bdfa9 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -1,7 +1,9 @@
 from __future__ import absolute_import
 
-from datetime import timedelta
+from exam import patcher
 from freezegun import freeze_time
+
+from datetime import timedelta
 from uuid import uuid4
 
 import six
@@ -15,6 +17,8 @@ from sentry.incidents.logic import (
     create_initial_event_stats_snapshot,
     get_incident_aggregates,
     get_incident_event_stats,
+    get_incident_subscribers,
+    subscribe_to_incident,
     StatusAlreadyChangedError,
     update_incident_status,
 )
@@ -244,6 +248,13 @@ class CreateEventStatTest(TestCase, BaseIncidentsTest):
 
 @freeze_time()
 class CreateIncidentActivityTest(TestCase, BaseIncidentsTest):
+    send_subscriber_notifications = patcher('sentry.incidents.logic.send_subscriber_notifications')
+
+    def assert_notifications_sent(self, activity):
+        self.send_subscriber_notifications.apply_async.assert_called_once_with(
+            kwargs={'activity_id': activity.id},
+            countdown=10,
+        )
 
     def test_no_snapshot(self):
         incident = self.create_incident()
@@ -259,6 +270,7 @@ class CreateIncidentActivityTest(TestCase, BaseIncidentsTest):
         assert activity.user == self.user
         assert activity.value == six.text_type(IncidentStatus.CLOSED.value)
         assert activity.previous_value == six.text_type(IncidentStatus.CREATED.value)
+        self.assert_notifications_sent(activity)
 
     def test_snapshot(self):
         self.create_event(self.now - timedelta(minutes=2))
@@ -289,6 +301,7 @@ class CreateIncidentActivityTest(TestCase, BaseIncidentsTest):
         assert activity.previous_value is None
 
         assert event_stats_snapshot == activity.event_stats_snapshot
+        self.assert_notifications_sent(activity)
 
     def test_comment(self):
         incident = self.create_incident()
@@ -313,6 +326,7 @@ class CreateIncidentActivityTest(TestCase, BaseIncidentsTest):
         assert activity.comment == comment
         assert activity.value is None
         assert activity.previous_value is None
+        self.assert_notifications_sent(activity)
 
 
 @freeze_time()
@@ -338,3 +352,12 @@ class CreateInitialEventStatsSnapshotTest(TestCase, BaseIncidentsTest):
         event_stat_snapshot = create_initial_event_stats_snapshot(incident)
         assert event_stat_snapshot.start == self.now - timedelta(minutes=40)
         assert [row[1] for row in event_stat_snapshot.values] == [1, 1, 2, 1]
+
+
+class GetIncidentSuscribersTest(TestCase, BaseIncidentsTest):
+
+    def test_simple(self):
+        incident = self.create_incident()
+        assert list(get_incident_subscribers(incident)) == []
+        subscription = subscribe_to_incident(incident, self.user)[0]
+        assert list(get_incident_subscribers(incident)) == [subscription]
diff --git a/tests/sentry/incidents/test_tasks.py b/tests/sentry/incidents/test_tasks.py
new file mode 100644
index 0000000000..e9207aaadc
--- /dev/null
+++ b/tests/sentry/incidents/test_tasks.py
@@ -0,0 +1,121 @@
+from __future__ import absolute_import
+
+from exam import patcher
+
+
+import six
+from django.core.urlresolvers import reverse
+
+from sentry.incidents.logic import (
+    create_incident_activity,
+    subscribe_to_incident,
+)
+from sentry.incidents.models import (
+    IncidentActivityType,
+    IncidentStatus,
+)
+from sentry.incidents.tasks import (
+    build_activity_context,
+    generate_incident_activity_email,
+    send_subscriber_notifications,
+)
+from sentry.testutils import TestCase
+from sentry.utils.http import absolute_uri
+
+
+class BaseIncidentActivityTest(object):
+    @property
+    def incident(self):
+        return self.create_incident(title='hello')
+
+
+class TestSendSubscriberNotifications(BaseIncidentActivityTest, TestCase):
+    send_async = patcher('sentry.utils.email.MessageBuilder.send_async')
+
+    def test_simple(self):
+        activity = create_incident_activity(
+            self.incident,
+            IncidentActivityType.COMMENT,
+            user=self.user,
+            comment='hello',
+        )
+        send_subscriber_notifications(activity.id)
+        subscribe_to_incident(activity.incident, self.user)
+        # User shouldn't receive an email for their own activity
+        self.send_async.assert_called_once_with([])
+        self.send_async.reset_mock()
+        user = self.create_user(email='test@test.com')
+        subscribe_to_incident(activity.incident, user)
+        send_subscriber_notifications(activity.id)
+        self.send_async.assert_called_once_with([user.email])
+
+
+class TestGenerateIncidentActivityEmail(BaseIncidentActivityTest, TestCase):
+    def test_simple(self):
+        activity = create_incident_activity(
+            self.incident,
+            IncidentActivityType.COMMENT,
+            user=self.user,
+            comment='hello',
+        )
+        incident = activity.incident
+        message = generate_incident_activity_email(activity)
+        assert message.subject == 'Activity on Incident {} (#{})'.format(
+            incident.title,
+            incident.identifier,
+        )
+        assert message.type == 'incident.activity'
+        assert message.context == build_activity_context(activity)
+
+
+class TestBuildActivityContext(BaseIncidentActivityTest, TestCase):
+    def run_test(
+        self,
+        activity,
+        expected_username,
+        expected_action,
+        expected_comment,
+    ):
+        incident = activity.incident
+        context = build_activity_context(activity)
+        assert context['user_name'] == expected_username
+        assert context['action'] == '%s on incident %s (#%s)' % (
+            expected_action,
+            activity.incident.title,
+            activity.incident.identifier,
+        )
+        assert context['link'] == absolute_uri(reverse(
+            'sentry-incident',
+            kwargs={
+                'organization_slug': incident.organization.slug,
+                'incident_id': incident.identifier,
+            },
+        ))
+        assert context['comment'] == expected_comment
+        assert context['unsubscribe_link'] == ''
+
+    def test_simple(self):
+        activity = create_incident_activity(
+            self.incident,
+            IncidentActivityType.COMMENT,
+            user=self.user,
+            comment='hello',
+        )
+        self.run_test(
+            activity,
+            expected_username=activity.user.name,
+            expected_action='left a comment',
+            expected_comment=activity.comment,
+        )
+        activity.type = IncidentActivityType.STATUS_CHANGE
+        activity.value = six.text_type(IncidentStatus.CLOSED.value)
+        activity.previous_value = six.text_type(IncidentStatus.CREATED.value)
+        self.run_test(
+            activity,
+            expected_username=activity.user.name,
+            expected_action='changed status from %s to %s' % (
+                IncidentStatus.CREATED.name.lower(),
+                IncidentStatus.CLOSED.name.lower(),
+            ),
+            expected_comment=activity.comment,
+        )
