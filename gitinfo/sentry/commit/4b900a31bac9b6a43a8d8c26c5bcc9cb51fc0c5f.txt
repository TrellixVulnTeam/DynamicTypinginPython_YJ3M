commit 4b900a31bac9b6a43a8d8c26c5bcc9cb51fc0c5f
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Oct 24 13:07:25 2018 -0700

    ref(ui): Change "Org Members" to use AsyncView search input (#10224)
    
    Refactored some common code into `AsyncComponentSearchInput` as well

diff --git a/src/sentry/static/sentry/app/components/asyncComponent.jsx b/src/sentry/static/sentry/app/components/asyncComponent.jsx
index f38dde04f7..c85099922d 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.jsx
@@ -247,12 +247,13 @@ export default class AsyncComponent extends React.Component {
     return [['data', endpoint, this.getEndpointParams()]];
   }
 
-  renderSearchInput({onSearchSubmit, stateKey, url, ...other}) {
+  renderSearchInput({onSearchSubmit, stateKey, url, updateRoute, ...other}) {
     const [firstEndpoint] = this.getEndpoints() || [];
     const stateKeyOrDefault = stateKey || (firstEndpoint && firstEndpoint[0]);
     const urlOrDefault = url || (firstEndpoint && firstEndpoint[1]);
     return (
       <AsyncComponentSearchInput
+        updateRoute={updateRoute}
         onSearchSubmit={onSearchSubmit}
         stateKey={stateKeyOrDefault}
         url={urlOrDefault}
diff --git a/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx b/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx
index 63a1442464..5a2f2d94f9 100644
--- a/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx
@@ -18,6 +18,8 @@ class AsyncComponentSearchInput extends React.Component {
     url: PropTypes.string.isRequired,
     onSuccess: PropTypes.func.isRequired,
     onError: PropTypes.func.isRequired,
+    // Updates URL with search query in the URL param: `query`
+    updateRoute: PropTypes.bool,
     router: PropTypes.object.isRequired,
     placeholder: PropTypes.string,
     onSearchSubmit: PropTypes.func,
@@ -61,9 +63,24 @@ class AsyncComponentSearchInput extends React.Component {
     this.setState({query: searchQuery});
   };
 
+  /**
+   * This is called when "Enter" (more specifically a form "submit" event) is pressed.
+   */
   handleSearch = evt => {
-    let {onSearchSubmit} = this.props;
+    let {updateRoute, onSearchSubmit} = this.props;
     evt.preventDefault();
+
+    // Update the URL to reflect search term.
+    if (updateRoute) {
+      let {router, location} = this.props;
+      router.push({
+        pathname: location.pathname,
+        query: {
+          query: this.state.query,
+        },
+      });
+    }
+
     if (typeof onSearchSubmit !== 'function') return;
     onSearchSubmit(this.state.query, evt);
   };
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx
index 2b3f6f3cb1..82d7faf803 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx
@@ -11,7 +11,6 @@ import Button from 'app/components/button';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import ConfigStore from 'app/stores/configStore';
 import GuideAnchor from 'app/components/assistant/guideAnchor';
-import Input from 'app/views/settings/components/forms/controls/input';
 import Pagination from 'app/components/pagination';
 import SentryTypes from 'app/sentryTypes';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
@@ -83,18 +82,6 @@ class OrganizationMembersView extends AsyncView {
     return `${org.name} Members`;
   }
 
-  handleSearch = e => {
-    let {router} = this.context;
-    let {location} = this.props;
-    e.preventDefault();
-    router.push({
-      pathname: location.pathname,
-      query: {
-        query: this.state.searchQuery,
-      },
-    });
-  };
-
   removeMember = id => {
     let {params} = this.props;
     let {orgId} = params || {};
@@ -282,14 +269,12 @@ class OrganizationMembersView extends AsyncView {
         <Panel>
           <PanelHeader hasButtons>
             {t('Member')}
-            <form onSubmit={this.handleSearch}>
-              <Input
-                value={this.state.searchQuery}
-                onChange={this.handleChange}
-                className="search"
-                placeholder={t('Search Members')}
-              />
-            </form>
+
+            {this.renderSearchInput({
+              updateRoute: true,
+              placeholder: t('Search Members'),
+              className: 'search',
+            })}
           </PanelHeader>
 
           <PanelBody>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationProjects/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationProjects/index.jsx
index a7a82f4aa6..c6cd1b895d 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationProjects/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationProjects/index.jsx
@@ -69,29 +69,12 @@ export default class OrganizationProjects extends AsyncView {
     return `${org.name} Projects`;
   }
 
-  /**
-   * This is called when "Enter" (more specifically a "submit" event) is pressed.
-   * Update the URL to reflect search term.
-   */
-  handleSearch = (query, e) => {
-    let {router} = this.context;
-    let {location} = this.props;
-    e.preventDefault();
-    router.push({
-      pathname: location.pathname,
-      query: {
-        query,
-      },
-    });
-  };
-
   renderBody() {
     let {projectList, projectListPageLinks, projectStats} = this.state;
     let {organization} = this.context;
     let canCreateProjects = getOrganizationState(this.context.organization)
       .getAccess()
       .has('project:admin');
-    let [stateKey, url] = this.getEndpoints()[0];
 
     let action = (
       <Button
@@ -118,11 +101,9 @@ export default class OrganizationProjects extends AsyncView {
             {t('Projects')}
 
             {this.renderSearchInput({
-              onSearchSubmit: this.handleSearch,
+              updateRoute: true,
               placeholder: t('Search Projects'),
               className: 'search',
-              url,
-              stateKey,
             })}
           </PanelHeader>
           <PanelBody css={{width: '100%'}}>
diff --git a/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap
index 1e03d74321..158c6377bc 100644
--- a/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap
@@ -211,10 +211,10 @@ exports[`OrganizationProjects Should render the projects in the store 1`] = `
                           api={Client {}}
                           className="search"
                           onError={[Function]}
-                          onSearchSubmit={[Function]}
                           onSuccess={[Function]}
                           placeholder="Search Projects"
                           stateKey="projectList"
+                          updateRoute={true}
                           url="/organizations/org-slug/projects/"
                         >
                           <AsyncComponentSearchInput
@@ -226,7 +226,6 @@ exports[`OrganizationProjects Should render the projects in the store 1`] = `
                               }
                             }
                             onError={[Function]}
-                            onSearchSubmit={[Function]}
                             onSuccess={[Function]}
                             placeholder="Search Projects"
                             router={
@@ -272,6 +271,7 @@ exports[`OrganizationProjects Should render the projects in the store 1`] = `
                               }
                             }
                             stateKey="projectList"
+                            updateRoute={true}
                             url="/organizations/org-slug/projects/"
                           >
                             <Form
diff --git a/tests/js/spec/views/settings/organizationMembers/index.spec.jsx b/tests/js/spec/views/settings/organizationMembers/index.spec.jsx
index 1b639710cf..123d650e8a 100644
--- a/tests/js/spec/views/settings/organizationMembers/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/index.spec.jsx
@@ -304,7 +304,7 @@ describe('OrganizationMembers', function() {
 
   it('can search organization members', async function() {
     let searchMock = MockApiClient.addMockResponse({
-      url: '/organizations/org-id/members/?query=member',
+      url: '/organizations/org-id/members/',
       body: [],
     });
     let routerContext = TestStubs.routerContext();
@@ -319,16 +319,17 @@ describe('OrganizationMembers', function() {
       routerContext
     );
 
-    expect(searchMock).not.toHaveBeenCalled();
-
-    wrapper.find('Input').simulate('change', {target: {value: 'member'}});
+    wrapper
+      .find('AsyncComponentSearchInput input')
+      .simulate('change', {target: {value: 'member'}});
 
-    expect(wrapper.state('searchQuery')).toBe('member');
-    expect(searchMock).toHaveBeenCalled();
-    expect(searchMock).toHaveBeenCalledWith(
-      '/organizations/org-id/members/?query=member',
+    expect(searchMock).toHaveBeenLastCalledWith(
+      '/organizations/org-id/members/',
       expect.objectContaining({
         method: 'GET',
+        query: {
+          query: 'member',
+        },
       })
     );
 
