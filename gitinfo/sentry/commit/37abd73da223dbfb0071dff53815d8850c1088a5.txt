commit 37abd73da223dbfb0071dff53815d8850c1088a5
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 3 18:27:34 2015 -0700

    Improve formatting

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index dc755650f9..67db5fbd9c 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -222,9 +222,8 @@ class ClientApiHelper(object):
             # This error should be caught as it suggests that there's a
             # bug somewhere in the client's code.
             self.log.info(unicode(e), exc_info=True)
-            raise APIError('Bad data decoding request (%s, %s)' % (
-                type(e).__name__, e
-            ))
+            raise APIError('Bad data decoding request (%s, %s)',
+                           type(e).__name__, e)
 
     def decompress_gzip(self, encoded_data):
         try:
@@ -251,8 +250,8 @@ class ClientApiHelper(object):
             # This error should be caught as it suggests that there's a
             # bug somewhere in the client's code.
             self.log.info(unicode(e), exc_info=True)
-            raise APIError('Bad data decoding request (%s, %s)' % (
-                           type(e).__name__, e))
+            raise APIError('Bad data decoding request (%s, %s)',
+                           type(e).__name__, e)
 
     def safely_load_json_string(self, json_string):
         try:
@@ -261,8 +260,8 @@ class ClientApiHelper(object):
             # This error should be caught as it suggests that there's a
             # bug somewhere in the client's code.
             self.log.info(unicode(e), exc_info=True)
-            raise APIError('Bad data reconstructing object (%s, %s)' % (
-                           type(e).__name__, e))
+            raise APIError('Bad data reconstructing object (%s, %s)',
+                           type(e).__name__, e)
 
         # XXX: ensure keys are coerced to strings
         return dict((smart_str(k), v) for k, v in obj.iteritems())
@@ -408,8 +407,7 @@ class ClientApiHelper(object):
                     value = {'values': value}
                 else:
                     self.log.info(
-                        'Invalid parameter for value: %s (%r)', k,
-                        type(value))
+                        'Invalid parameter for value: %s (%r)', k, type(value))
                     continue
 
             try:
@@ -420,7 +418,7 @@ class ClientApiHelper(object):
                     log = self.log.info
                 else:
                     log = self.log.error
-                log('Discarded invalid value for interface: %s (%r)', k,
+                log('Discarded invalid value for interface: %s (%r)', k, value,
                     exc_info=True)
 
         level = data.get('level') or DEFAULT_LOG_LEVEL
