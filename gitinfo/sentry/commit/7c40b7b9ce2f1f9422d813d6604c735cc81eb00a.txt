commit 7c40b7b9ce2f1f9422d813d6604c735cc81eb00a
Author: ted kaemming <ted@kaemming.com>
Date:   Wed Mar 1 14:35:34 2017 -0800

    Add search support for `timesSeen`. (#5009)

diff --git a/CHANGES b/CHANGES
index 31f4d59fe0..d26b3c9b2c 100644
--- a/CHANGES
+++ b/CHANGES
@@ -18,6 +18,7 @@ Version 8.14 (Unreleased)
 - Plugins can now add tasks that run in sentry as celery workers.
 - Added the ability to verify TLS connections when fetching artifacts.
 - Added data migration to merge environments across an organization
+- Added ``timesSeen`` keyword to issue search.
 
 API Changes
 ~~~~~~~~~~~
diff --git a/src/sentry/search/django/backend.py b/src/sentry/search/django/backend.py
index 36bfebf1a7..24b97cc663 100644
--- a/src/sentry/search/django/backend.py
+++ b/src/sentry/search/django/backend.py
@@ -75,6 +75,9 @@ class DjangoSearchBackend(SearchBackend):
                         date_to=None, date_to_inclusive=True,
                         active_at_from=None, active_at_from_inclusive=True,
                         active_at_to=None, active_at_to_inclusive=True,
+                        times_seen=None,
+                        times_seen_lower=None, times_seen_lower_inclusive=True,
+                        times_seen_upper=None, times_seen_upper_inclusive=True,
                         cursor=None, limit=None):
         from sentry.models import Event, Group, GroupSubscription, GroupStatus
 
@@ -185,6 +188,23 @@ class DjangoSearchBackend(SearchBackend):
                     params['active_at__lt'] = active_at_to
             queryset = queryset.filter(**params)
 
+        if times_seen is not None:
+            queryset = queryset.filter(times_seen=times_seen)
+
+        if times_seen_lower is not None or times_seen_upper is not None:
+            params = {}
+            if times_seen_lower is not None:
+                if times_seen_lower_inclusive:
+                    params['times_seen__gte'] = times_seen_lower
+                else:
+                    params['times_seen__gt'] = times_seen_lower
+            if times_seen_upper is not None:
+                if times_seen_upper_inclusive:
+                    params['times_seen__lte'] = times_seen_upper
+                else:
+                    params['times_seen__lt'] = times_seen_upper
+            queryset = queryset.filter(**params)
+
         if date_from or date_to:
             params = {
                 'project_id': project.id,
diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index 6f6948e23c..a2263f49af 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -164,6 +164,39 @@ def get_date_params(value, from_field, to_field):
         })
     return result
 
+
+numeric_modifiers = [
+    ('>=', lambda field, value: {
+        '{}_lower'.format(field): value,
+        '{}_lower_inclusive'.format(field): True,
+    }),
+    ('<=', lambda field, value: {
+        '{}_upper'.format(field): value,
+        '{}_upper_inclusive'.format(field): True,
+    }),
+    ('>', lambda field, value: {
+        '{}_lower'.format(field): value,
+        '{}_lower_inclusive'.format(field): False,
+    }),
+    ('<', lambda field, value: {
+        '{}_upper'.format(field): value,
+        '{}_upper_inclusive'.format(field): False,
+    }),
+]
+
+
+def get_numeric_field_value(field, raw_value, type=int):
+    for modifier, function in numeric_modifiers:
+        if raw_value.startswith(modifier):
+            return function(
+                field,
+                type(raw_value[len(modifier):]),
+            )
+    else:
+        return {
+            field: type(raw_value),
+        }
+
 reserved_tag_names = frozenset([
     'query',
     'is',
@@ -190,7 +223,9 @@ reserved_tag_names = frozenset([
     'app',
     'os.name',
     'url',
-    'event.timestamp'])
+    'event.timestamp'
+    'timesSeen',
+])
 
 
 def tokenize_query(query):
@@ -312,6 +347,8 @@ def parse_query(project, query, user):
                     project, key.split('.', 1)[1], value)
             elif key == 'event.timestamp':
                 results.update(get_date_params(value, 'date_from', 'date_to'))
+            elif key == 'timesSeen':
+                results.update(get_numeric_field_value('times_seen', value))
             else:
                 results['tags'][key] = value
 
diff --git a/tests/sentry/search/test_utils.py b/tests/sentry/search/test_utils.py
index d815f13dbd..4c53158b83 100644
--- a/tests/sentry/search/test_utils.py
+++ b/tests/sentry/search/test_utils.py
@@ -8,7 +8,43 @@ from django.utils import timezone
 from sentry.models import EventUser, GroupStatus, Release
 from sentry.testutils import TestCase
 from sentry.search.base import ANY
-from sentry.search.utils import parse_query
+from sentry.search.utils import parse_query, get_numeric_field_value
+
+
+def test_get_numeric_field_value():
+    assert get_numeric_field_value('foo', '10') == {
+        'foo': 10,
+    }
+
+    assert get_numeric_field_value('foo', '>10') == {
+        'foo_lower': 10,
+        'foo_lower_inclusive': False,
+    }
+
+    assert get_numeric_field_value('foo', '>=10') == {
+        'foo_lower': 10,
+        'foo_lower_inclusive': True,
+    }
+
+    assert get_numeric_field_value('foo', '<10') == {
+        'foo_upper': 10,
+        'foo_upper_inclusive': False,
+    }
+
+    assert get_numeric_field_value('foo', '<=10') == {
+        'foo_upper': 10,
+        'foo_upper_inclusive': True,
+    }
+
+    assert get_numeric_field_value('foo', '>3.5', type=float) == {
+        'foo_lower': 3.5,
+        'foo_lower_inclusive': False,
+    }
+
+    assert get_numeric_field_value('foo', '<=-3.5', type=float) == {
+        'foo_upper': -3.5,
+        'foo_upper_inclusive': True,
+    }
 
 
 class ParseQueryTest(TestCase):
