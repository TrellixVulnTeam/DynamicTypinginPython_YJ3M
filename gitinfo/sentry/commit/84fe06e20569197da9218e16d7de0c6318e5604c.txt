commit 84fe06e20569197da9218e16d7de0c6318e5604c
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Jan 7 11:34:08 2020 -0800

    perf(eventstore): Fetch event from nodestore instead of Snuba (#16210)
    
    Fetches a single event (via get_event_by_id) from nodestore instead of Snuba. Since node data is always loaded, we never need to manually bind nodes after fetching from eventstore. We only perform the Snuba fetch if the event is not a transaction and we need to populate the group id. get_event_by_id also returns an instance of the new event model, rather than SnubaEvent, which is to be deprecated. This feature is implemented behind the "eventstore.use-nodestore" switch.

diff --git a/src/sentry/api/endpoints/event_apple_crash_report.py b/src/sentry/api/endpoints/event_apple_crash_report.py
index 0738d7318a..eb79bd595a 100644
--- a/src/sentry/api/endpoints/event_apple_crash_report.py
+++ b/src/sentry/api/endpoints/event_apple_crash_report.py
@@ -4,7 +4,7 @@ import six
 
 from django.http import HttpResponse, StreamingHttpResponse
 
-from sentry import eventstore
+from sentry import eventstore, options
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.lang.native.applecrashreport import AppleCrashReport
@@ -24,7 +24,8 @@ class EventAppleCrashReportEndpoint(ProjectEndpoint):
         if event is None:
             raise ResourceDoesNotExist
 
-        event.bind_node_data()
+        if not options.get("eventstore.use-nodestore"):
+            event.bind_node_data()
 
         if event.platform not in ("cocoa", "native"):
             return HttpResponse(
diff --git a/src/sentry/api/endpoints/event_file_committers.py b/src/sentry/api/endpoints/event_file_committers.py
index 33e95596af..099686801c 100644
--- a/src/sentry/api/endpoints/event_file_committers.py
+++ b/src/sentry/api/endpoints/event_file_committers.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
-from sentry import eventstore
+from sentry import eventstore, options
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.models import Commit, Release
 from sentry.utils.committers import get_serialized_event_file_committers
@@ -27,7 +27,8 @@ class EventFileCommittersEndpoint(ProjectEndpoint):
             return Response({"detail": "Event not found"}, status=404)
 
         # populate event data
-        event.bind_node_data()
+        if not options.get("eventstore.use-nodestore"):
+            event.bind_node_data()
 
         try:
             committers = get_serialized_event_file_committers(
diff --git a/src/sentry/api/endpoints/event_grouping_info.py b/src/sentry/api/endpoints/event_grouping_info.py
index 1c5e276c11..9b3bd1a361 100644
--- a/src/sentry/api/endpoints/event_grouping_info.py
+++ b/src/sentry/api/endpoints/event_grouping_info.py
@@ -4,7 +4,7 @@ import six
 
 from django.http import HttpResponse
 
-from sentry import eventstore
+from sentry import eventstore, options
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.grouping.api import GroupingConfigNotFound
@@ -24,7 +24,8 @@ class EventGroupingInfoEndpoint(ProjectEndpoint):
         if event is None:
             raise ResourceDoesNotExist
 
-        event.bind_node_data()
+        if not options.get("eventstore.use-nodestore"):
+            event.bind_node_data()
 
         rv = {}
         config_name = request.GET.get("config") or None
diff --git a/src/sentry/api/endpoints/event_owners.py b/src/sentry/api/endpoints/event_owners.py
index c33c106d80..cac75bdc42 100644
--- a/src/sentry/api/endpoints/event_owners.py
+++ b/src/sentry/api/endpoints/event_owners.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 import six
 from rest_framework.response import Response
 
-from sentry import eventstore
+from sentry import eventstore, options
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.fields.actor import Actor
 from sentry.api.serializers import serialize
@@ -27,7 +27,8 @@ class EventOwnersEndpoint(ProjectEndpoint):
             return Response({"detail": "Event not found"}, status=404)
 
         # populate event data
-        event.bind_node_data()
+        if not options.get("eventstore.use-nodestore"):
+            event.bind_node_data()
 
         owners, rules = ProjectOwnership.get_owners(project.id, event.data)
 
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index cf7e2a47fa..2eaab4fb98 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -5,7 +5,7 @@ import functools
 import six
 from rest_framework.response import Response
 
-from sentry import analytics, eventstore, search
+from sentry import analytics, eventstore, options, search
 from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases.project import ProjectEndpoint, ProjectEventPermission
 from sentry.api.helpers.group_index import (
@@ -152,7 +152,8 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
                 else:
                     matching_event = eventstore.get_event_by_id(project.id, event_id)
                     if matching_event is not None:
-                        matching_event.bind_node_data()
+                        if not options.get("eventstore.use-nodestore"):
+                            matching_event.bind_node_data()
             elif matching_group is None:
                 matching_group = get_by_short_id(
                     project.organization_id, request.GET.get("shortIdLookup"), query
diff --git a/src/sentry/eventstore/base.py b/src/sentry/eventstore/base.py
index f951ee5879..b4e218d329 100644
--- a/src/sentry/eventstore/base.py
+++ b/src/sentry/eventstore/base.py
@@ -172,11 +172,13 @@ class EventStorage(Service):
         """
         raise NotImplementedError
 
-    def create_event(self, project_id=None, event_id=None, group_id=None, data=None):
+    def create_event(self, project_id=None, event_id=None, group_id=None, message=None, data=None):
         """
         Returns an Event from processed data
         """
-        return Event(project_id=project_id, event_id=event_id, group_id=group_id, data=data)
+        return Event(
+            project_id=project_id, event_id=event_id, group_id=group_id, message=message, data=data
+        )
 
     def bind_nodes(self, object_list, node_name="data"):
         """
diff --git a/src/sentry/eventstore/snuba/backend.py b/src/sentry/eventstore/snuba/backend.py
index 586727ae74..48585b554f 100644
--- a/src/sentry/eventstore/snuba/backend.py
+++ b/src/sentry/eventstore/snuba/backend.py
@@ -3,7 +3,9 @@ from __future__ import absolute_import
 import six
 
 from copy import deepcopy
+from datetime import datetime, timedelta
 
+from sentry import options
 from sentry.eventstore.base import EventStorage
 from sentry.snuba.events import Columns
 from sentry.utils import snuba
@@ -78,13 +80,16 @@ class SnubaEventStorage(EventStorage):
         Get an event given a project ID and event ID
         Returns None if an event cannot be found
         """
-        cols = self.__get_columns(additional_columns)
-
         event_id = normalize_event_id(event_id)
 
         if not event_id:
             return None
 
+        if options.get("eventstore.use-nodestore"):
+            return self.__get_event_by_id_nodestore(project_id, event_id)
+
+        cols = self.__get_columns(additional_columns)
+
         result = snuba.raw_query(
             selected_columns=cols,
             filter_keys={"event_id": [event_id], "project_id": [project_id]},
@@ -95,6 +100,31 @@ class SnubaEventStorage(EventStorage):
             return self.__make_event(result["data"][0])
         return None
 
+    def __get_event_by_id_nodestore(self, project_id, event_id):
+        event = Event(project_id=project_id, event_id=event_id)
+        event.bind_node_data()
+
+        # Return None if there was no data in nodestore
+        if len(event.data) == 0:
+            return None
+
+        event_time = datetime.fromtimestamp(event.data["timestamp"])
+
+        # Load group_id from Snuba if not a transaction
+        if event.get_event_type() != "transaction":
+            result = snuba.raw_query(
+                selected_columns=["group_id"],
+                start=event_time,
+                end=event_time + timedelta(seconds=1),
+                filter_keys={"project_id": [project_id], "event_id": [event_id]},
+                limit=1,
+            )
+
+            assert len(result["data"]) == 1
+            event.group_id = result["data"][0]["group_id"]
+
+        return event
+
     def get_earliest_event_id(self, event, filter):
         filter = deepcopy(filter)
         filter.conditions = filter.conditions or []
diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
index fbd48a10f2..a1e15e4347 100644
--- a/src/sentry/integrations/issues.py
+++ b/src/sentry/integrations/issues.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 import logging
 import six
 
-from sentry import features
+from sentry import features, options
 from sentry.integrations.exceptions import ApiError, IntegrationError
 from sentry.models import Activity, ExternalIssue, Group, GroupLink, GroupStatus, Organization
 from sentry.utils.http import absolute_uri
@@ -59,7 +59,8 @@ class IssueBasicMixin(object):
         """
         event = group.get_latest_event()
         if event is not None:
-            event.bind_node_data()
+            if not options.get("eventstore.use-nodestore"):
+                event.bind_node_data()
 
         return [
             {
diff --git a/src/sentry/web/frontend/error_page_embed.py b/src/sentry/web/frontend/error_page_embed.py
index f83429a2c5..33359f9317 100644
--- a/src/sentry/web/frontend/error_page_embed.py
+++ b/src/sentry/web/frontend/error_page_embed.py
@@ -152,7 +152,8 @@ class ErrorPageEmbedView(View):
             event = eventstore.get_event_by_id(report.project.id, report.event_id)
 
             if event is not None:
-                event.bind_node_data()
+                if not options.get("eventstore.use-nodestore"):
+                    event.bind_node_data()
                 report.environment = event.get_environment()
                 report.group = event.group
 
diff --git a/src/sentry/web/frontend/group_event_json.py b/src/sentry/web/frontend/group_event_json.py
index 8cb1311108..34c608872f 100644
--- a/src/sentry/web/frontend/group_event_json.py
+++ b/src/sentry/web/frontend/group_event_json.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import, division
 
 from django.http import Http404, HttpResponse
 
-from sentry import eventstore
+from sentry import eventstore, options
 from sentry.models import Group, GroupMeta, get_group_with_redirect
 
 from sentry.utils import json
@@ -28,7 +28,8 @@ class GroupEventJsonView(OrganizationView):
         if event is None:
             raise Http404
 
-        event.bind_node_data()
+        if event_id_or_latest != "latest" and not options.get("eventstore.use-nodestore"):
+            event.bind_node_data()
 
         GroupMeta.objects.populate_cache([group])
 
diff --git a/tests/sentry/eventstore/snuba/test_backend.py b/tests/sentry/eventstore/snuba/test_backend.py
index 4001199c7d..efecdfdf77 100644
--- a/tests/sentry/eventstore/snuba/test_backend.py
+++ b/tests/sentry/eventstore/snuba/test_backend.py
@@ -3,6 +3,8 @@ from __future__ import absolute_import
 import six
 import pytest
 
+from django.conf import settings
+
 from sentry.testutils import TestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import iso_format, before_now
 from sentry.eventstore.snuba.backend import SnubaEventStorage
@@ -94,7 +96,6 @@ class SnubaEventStorageTest(TestCase, SnubaTestCase):
         assert event.id == "a" * 32
         assert event.event_id == "a" * 32
         assert event.project_id == self.project1.id
-        assert len(event._snuba_data.keys()) == 4
 
         # Get all columns
         event = self.eventstore.get_event_by_id(
@@ -103,12 +104,36 @@ class SnubaEventStorageTest(TestCase, SnubaTestCase):
         assert event.id == "b" * 32
         assert event.event_id == "b" * 32
         assert event.project_id == self.project2.id
-        assert len(event._snuba_data.keys()) == 17
 
         # Get non existent event
         event = self.eventstore.get_event_by_id(self.project2.id, "f" * 32)
         assert event is None
 
+        # Get transaction
+        event = self.eventstore.get_event_by_id(self.project2.id, self.transaction_event.event_id)
+
+        assert event.id == "d" * 32
+        assert event.get_event_type() == "transaction"
+        assert event.project_id == self.project2.id
+
+    def test_get_event_by_id_nodestore(self):
+        options = settings.SENTRY_OPTIONS.copy()
+        options["eventstore.use-nodestore"] = True
+        with self.settings(SENTRY_OPTIONS=options):
+            event = self.eventstore.get_event_by_id(self.project1.id, "a" * 32)
+            assert event
+            assert event.group_id == event.group.id
+
+            # Transaction event
+            event = self.eventstore.get_event_by_id(self.project2.id, "d" * 32)
+            assert event
+            assert not event.group_id
+            assert not event.group
+
+            # Non existent event
+            event = self.eventstore.get_event_by_id(self.project.id, "f" * 32)
+            assert not event
+
     def test_get_next_prev_event_id(self):
         event = self.eventstore.get_event_by_id(self.project2.id, "b" * 32)
 
@@ -144,13 +169,6 @@ class SnubaEventStorageTest(TestCase, SnubaTestCase):
         assert oldest_event is None
         assert latest_event is None
 
-    def test_transaction_get_event_by_id(self):
-        event = self.eventstore.get_event_by_id(self.project2.id, self.transaction_event.event_id)
-
-        assert event.id == "d" * 32
-        assert event.get_event_type() == "transaction"
-        assert event.project_id == self.project2.id
-
     @pytest.mark.skip(reason="Not yet implemented")
     def test_transaction_get_next_prev_event_id(self):
         filter = Filter(
diff --git a/tests/sentry/eventstore/snuba_discover/test_backend.py b/tests/sentry/eventstore/snuba_discover/test_backend.py
index f3ba468324..eddabfea12 100644
--- a/tests/sentry/eventstore/snuba_discover/test_backend.py
+++ b/tests/sentry/eventstore/snuba_discover/test_backend.py
@@ -98,7 +98,6 @@ class SnubaDiscoverEventStorageTest(TestCase, SnubaTestCase):
         assert event.id == "a" * 32
         assert event.event_id == "a" * 32
         assert event.project_id == self.project1.id
-        assert len(event._snuba_data.keys()) == 4
 
         # Get all columns
         event = self.eventstore.get_event_by_id(
@@ -107,7 +106,6 @@ class SnubaDiscoverEventStorageTest(TestCase, SnubaTestCase):
         assert event.id == "b" * 32
         assert event.event_id == "b" * 32
         assert event.project_id == self.project2.id
-        assert len(event._snuba_data.keys()) == 17
 
         # Get non existent event
         event = self.eventstore.get_event_by_id(self.project2.id, "f" * 32)
diff --git a/tests/sentry/eventstore/test_base.py b/tests/sentry/eventstore/test_base.py
index fe472580b9..16ca650b9e 100644
--- a/tests/sentry/eventstore/test_base.py
+++ b/tests/sentry/eventstore/test_base.py
@@ -5,6 +5,7 @@ import mock
 import six
 
 from sentry import eventstore
+from sentry.eventstore.models import Event
 from sentry.testutils import SnubaTestCase, TestCase
 from sentry.testutils.helpers.datetime import iso_format, before_now
 from sentry.eventstore.base import EventStorage
@@ -36,8 +37,8 @@ class EventStorageTest(TestCase):
             project_id=self.project.id,
         )
 
-        event = eventstore.get_event_by_id(self.project.id, "a" * 32)
-        event2 = eventstore.get_event_by_id(self.project.id, "b" * 32)
+        event = Event(project_id=self.project.id, event_id="a" * 32)
+        event2 = Event(project_id=self.project.id, event_id="b" * 32)
         assert event.data._node_data is None
         self.eventstorage.bind_nodes([event, event2], "data")
         assert event.data._node_data is not None
diff --git a/tests/snuba/models/test_event.py b/tests/snuba/models/test_event.py
index b32d631b23..d4a4bd1b80 100644
--- a/tests/snuba/models/test_event.py
+++ b/tests/snuba/models/test_event.py
@@ -5,7 +5,6 @@ from datetime import datetime, timedelta
 from sentry.api.serializers import serialize
 from sentry.models.event import SnubaEvent
 from sentry.testutils import SnubaTestCase, TestCase
-from sentry import eventstore, nodestore
 from sentry.testutils.helpers.datetime import iso_format, before_now
 
 
@@ -38,8 +37,14 @@ class SnubaEventTest(TestCase, SnubaTestCase):
         self.proj1group1 = event1.group
 
     def test_fetch(self):
-        event = eventstore.get_event_by_id(self.proj1.id, self.event_id)
-
+        event = SnubaEvent(
+            {
+                "event_id": self.event_id,
+                "project_id": self.proj1.id,
+                "group_id": self.proj1group1.id,
+                "timestamp": self.data["timestamp"],
+            }
+        )
         # Make sure we get back event properties from snuba
         assert event.event_id == self.event_id
         assert event.group.id == self.proj1group1.id
@@ -59,9 +64,15 @@ class SnubaEventTest(TestCase, SnubaTestCase):
         Test that a SnubaEvent that only loads minimal data from snuba
         can still be serialized completely by falling back to nodestore data.
         """
-        snuba_event = eventstore.get_event_by_id(self.proj1.id, self.event_id)
-
-        snuba_serialized = serialize(snuba_event)
+        event = SnubaEvent(
+            {
+                "event_id": self.event_id,
+                "project_id": self.proj1.id,
+                "group_id": self.proj1group1.id,
+                "timestamp": self.data["timestamp"],
+            }
+        )
+        snuba_serialized = serialize(event)
 
         assert snuba_serialized["message"] == self.data["message"]
         assert snuba_serialized["eventID"] == self.data["event_id"]
@@ -73,31 +84,15 @@ class SnubaEventTest(TestCase, SnubaTestCase):
         Test that bind_nodes works on snubaevents to populate their
         NodeDatas.
         """
-        event = eventstore.get_event_by_id(self.proj1.id, self.event_id)
+        event = SnubaEvent(
+            {
+                "event_id": self.event_id,
+                "project_id": self.proj1.id,
+                "group_id": self.proj1group1.id,
+                "timestamp": self.data["timestamp"],
+            }
+        )
         assert event.data._node_data is None
         event.bind_node_data()
         assert event.data._node_data is not None
         assert event.data["user"]["id"] == u"user1"
-
-    def test_event_with_no_body(self):
-        # remove the event from nodestore to simulate an event with no body.
-        node_id = SnubaEvent.generate_node_id(self.proj1.id, self.event_id)
-        nodestore.delete(node_id)
-        assert nodestore.get(node_id) is None
-
-        # Check that we can still serialize it
-        event = eventstore.get_event_by_id(
-            self.proj1.id, self.event_id, additional_columns=eventstore.full_columns
-        )
-        serialized = serialize(event)
-        assert event.data == {}
-
-        # Check that the regular serializer still gives us back tags
-        assert serialized["tags"] == [
-            {"_meta": None, "key": "baz", "value": "quux"},
-            {"_meta": None, "key": "environment", "value": "prod"},
-            {"_meta": None, "key": "foo", "value": "bar"},
-            {"_meta": None, "key": "level", "value": "error"},
-            {"_meta": None, "key": "release", "value": "release1"},
-            {"_meta": None, "key": "user", "query": 'user.id:"user1"', "value": "id:user1"},
-        ]
