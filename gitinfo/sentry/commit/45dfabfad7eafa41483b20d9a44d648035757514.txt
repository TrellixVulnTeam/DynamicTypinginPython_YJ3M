commit 45dfabfad7eafa41483b20d9a44d648035757514
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Nov 8 14:33:08 2018 -0800

    fix(integrations): Azure DevOps fix subscription check. (#10407)
    
    * first draft of fixing subscription check.
    
    * Added logging to subscription check.
    
    * moved generate secret to common place in tegrations
    
    * moved generate secret to common place in tegrations
    
    * Removed unnecessary spacing on comments.
    
    * corrected test.
    
    * simplified assert subscription.
    
    * swapped bb's functionality for generate_secret in repositories.
    
    * Reused apitoken generate_token method for creating secret.
    
    * Added a check for get_subscription
    
    * Simplified to ApiError
    
    * changed to generate_token

diff --git a/src/sentry/integrations/bitbucket/repository.py b/src/sentry/integrations/bitbucket/repository.py
index 57febb66a3..3a4b6c13a5 100644
--- a/src/sentry/integrations/bitbucket/repository.py
+++ b/src/sentry/integrations/bitbucket/repository.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-from uuid import uuid4
 import six
 from sentry.app import locks
 from sentry.models import OrganizationOption
@@ -9,6 +8,7 @@ from sentry.models import Integration
 from sentry.utils.http import absolute_uri
 
 from sentry.integrations.exceptions import ApiError
+from sentry.models.apitoken import generate_token
 
 from .webhook import parse_raw_user_email, parse_raw_user_name
 
@@ -48,7 +48,7 @@ class BitbucketRepositoryProvider(providers.IntegrationRepositoryProvider):
                 key='bitbucket:webhook_secret',
             )
             if secret is None:
-                secret = uuid4().hex + uuid4().hex
+                secret = generate_token()
                 OrganizationOption.objects.set_value(
                     organization=organization,
                     key='bitbucket:webhook_secret',
diff --git a/src/sentry/integrations/vsts/webhooks.py b/src/sentry/integrations/vsts/webhooks.py
index 8ad796d644..4a617a68fd 100644
--- a/src/sentry/integrations/vsts/webhooks.py
+++ b/src/sentry/integrations/vsts/webhooks.py
@@ -5,8 +5,9 @@ import logging
 import six
 
 from sentry.models import Identity, Integration, OrganizationIntegration, sync_group_assignee_inbound
+from sentry.models.apitoken import generate_token
 from sentry.api.base import Endpoint
-from uuid import uuid4
+
 from django.views.decorators.csrf import csrf_exempt
 from django.utils.crypto import constant_time_compare
 
@@ -175,10 +176,5 @@ class WorkItemWebhook(Endpoint):
 
     def create_subscription(self, instance, identity_data, oauth_redirect_url):
         client = self.get_client(Identity(data=identity_data), oauth_redirect_url)
-        shared_secret = self.create_webhook_secret()
+        shared_secret = generate_token()
         return client.create_subscription(instance, shared_secret), shared_secret
-
-    def create_webhook_secret(self):
-        # following this example
-        # https://github.com/getsentry/sentry-plugins/blob/master/src/sentry_plugins/github/plugin.py#L305
-        return uuid4().hex + uuid4().hex
diff --git a/src/sentry/tasks/integrations.py b/src/sentry/tasks/integrations.py
index 8f104c5d9d..ac349da69c 100644
--- a/src/sentry/tasks/integrations.py
+++ b/src/sentry/tasks/integrations.py
@@ -4,6 +4,7 @@ from time import time
 from datetime import timedelta
 
 import logging
+import six
 
 from sentry import analytics, features
 from sentry.models import (
@@ -12,6 +13,7 @@ from sentry.models import (
 )
 
 from sentry.integrations.exceptions import ApiError, ApiUnauthorized, IntegrationError
+from sentry.models.apitoken import generate_token
 from sentry.tasks.base import instrumented_task, retry
 
 logger = logging.getLogger('sentry.tasks.integrations')
@@ -257,17 +259,72 @@ def vsts_subscription_check(integration_id, organization_id, **kwargs):
     integration = Integration.objects.get(id=integration_id)
     installation = integration.get_installation(organization_id=organization_id)
     client = installation.get_client()
-    subscription_id = integration.metadata['subscription']['id']
-    subscription = client.get_subscription(
-        instance=installation.instance,
-        subscription_id=subscription_id,
-    )
 
-    # https://docs.microsoft.com/en-us/rest/api/vsts/hooks/subscriptions/replace%20subscription?view=vsts-rest-4.1#subscriptionstatus
-    if subscription['status'] == 'disabledBySystem':
-        client.update_subscription(
+    try:
+        subscription_id = integration.metadata['subscription']['id']
+        subscription = client.get_subscription(
             instance=installation.instance,
             subscription_id=subscription_id,
         )
+    except (KeyError, ApiError) as e:
+        logger.info(
+            'vsts_subscription_check.failed_to_get_subscription',
+            extra={
+                'integration_id': integration_id,
+                'organization_id': organization_id,
+                'error': six.text_type(e),
+            }
+        )
+        subscription = None
+
+    # https://docs.microsoft.com/en-us/rest/api/vsts/hooks/subscriptions/replace%20subscription?view=vsts-rest-4.1#subscriptionstatus
+    if not subscription or subscription['status'] == 'disabledBySystem':
+        # Update subscription does not work for disabled subscriptions
+        # We instead will try to delete and then create a new one.
+
+        if subscription:
+            try:
+                client.delete_subscription(
+                    instance=installation.instance,
+                    subscription_id=subscription_id,
+                )
+            except ApiError as e:
+                logger.info(
+                    'vsts_subscription_check.failed_to_delete_subscription',
+                    extra={
+                        'integration_id': integration_id,
+                        'organization_id': organization_id,
+                        'subscription_id': subscription_id,
+                        'error': six.text_type(e),
+                    }
+                )
+
+        try:
+            secret = generate_token()
+            subscription = client.create_subscription(
+                instance=installation.instance,
+                shared_secret=secret,
+            )
+        except ApiError as e:
+            logger.info(
+                'vsts_subscription_check.failed_to_create_subscription',
+                extra={
+                    'integration_id': integration_id,
+                    'organization_id': organization_id,
+                    'error': six.text_type(e),
+                }
+            )
+        else:
+            integration.metadata['subscription']['id'] = subscription['id']
+            integration.metadata['subscription']['secret'] = secret
+            logger.info(
+                'vsts_subscription_check.updated_diabled_subscription',
+                extra={
+                    'integration_id': integration_id,
+                    'organization_id': organization_id,
+                    'subscription_id': subscription_id,
+                }
+            )
+
         integration.metadata['subscription']['check'] = time()
         integration.save()
diff --git a/tests/sentry/tasks/test_integrations.py b/tests/sentry/tasks/test_integrations.py
index 606dbd7d24..a4afe34dbf 100644
--- a/tests/sentry/tasks/test_integrations.py
+++ b/tests/sentry/tasks/test_integrations.py
@@ -17,19 +17,20 @@ class VstsSubscriptionCheckTest(TestCase):
             json={'status': 'disabledBySystem'}
         )
         responses.add(
-            responses.PUT,
+            responses.DELETE,
             'https://vsts1.visualstudio.com/_apis/hooks/subscriptions/subscription1',
             json={}
         )
         responses.add(
-            responses.GET,
-            'https://vsts1.visualstudio.com/_apis/hooks/subscriptions/subscription3',
-            json={'status': 'enabled'}
+            responses.POST,
+            'https://vsts1.visualstudio.com/_apis/hooks/subscriptions',
+            json={'id': 'subscription1_new_id'},
+
         )
         responses.add(
-            responses.PUT,
+            responses.GET,
             'https://vsts1.visualstudio.com/_apis/hooks/subscriptions/subscription3',
-            json={}
+            json={'status': 'enabled'}
         )
         self.identity = Identity.objects.create(
             idp=IdentityProvider.objects.create(
@@ -44,6 +45,11 @@ class VstsSubscriptionCheckTest(TestCase):
             }
         )
 
+    def assert_subscription(self, subscription_data, subscription_id):
+        assert subscription_data['id'] == subscription_id
+        assert subscription_data['check']
+        assert subscription_data['secret']
+
     @responses.activate
     def test_kickoff_subscription(self):
         integration3_check_time = time()
@@ -74,6 +80,7 @@ class VstsSubscriptionCheckTest(TestCase):
                 'subscription': {
                     'id': 'subscription3',
                     'check': integration3_check_time,
+                    'secret': '1234567890'
                 }
             }
         )
@@ -82,12 +89,15 @@ class VstsSubscriptionCheckTest(TestCase):
         with self.tasks():
             kickoff_vsts_subscription_check()
 
-        assert 'check' in Integration.objects.get(
+        subscription1 = Integration.objects.get(
             provider='vsts',
             external_id='vsts1',
         ).metadata['subscription']
+        self.assert_subscription(subscription1, 'subscription1_new_id')
 
-        assert integration3_check_time == Integration.objects.get(
+        subscription3 = Integration.objects.get(
             provider='vsts',
             external_id='vsts3',
-        ).metadata['subscription']['check']
+        ).metadata['subscription']
+        self.assert_subscription(subscription3, 'subscription3')
+        assert integration3_check_time == subscription3['check']
