commit 3aa1b48a50e52a0af3892484559625c8c25528a0
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Tue Aug 20 16:22:03 2019 -0400

    feat(apm): Display cursor guide on the span rows on current timeslice (#14452)

diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/transactionView/cursorGuideHandler.tsx b/src/sentry/static/sentry/app/views/organizationEventsV2/transactionView/cursorGuideHandler.tsx
new file mode 100644
index 0000000000..6d67f666bf
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/transactionView/cursorGuideHandler.tsx
@@ -0,0 +1,120 @@
+import React from 'react';
+
+import {rectOfContent, clamp} from './utils';
+import {ParsedTraceType} from './types';
+import {DragManagerChildrenProps} from './dragManager';
+
+export type CursorGuideManagerChildrenProps = {
+  showCursorGuide: boolean;
+  mouseLeft: number | undefined;
+  traceViewMouseLeft: number | undefined;
+
+  displayCursorGuide: (mousePageX: number) => void;
+  hideCursorGuide: () => void;
+};
+
+const CursorGuideManagerContext = React.createContext<CursorGuideManagerChildrenProps>({
+  showCursorGuide: false,
+  mouseLeft: void 0,
+  traceViewMouseLeft: void 0,
+
+  displayCursorGuide: () => {},
+  hideCursorGuide: () => {},
+});
+
+type PropType = {
+  trace: ParsedTraceType;
+  children: React.ReactNode;
+  dragProps: DragManagerChildrenProps;
+
+  // this is the DOM element where the drag events occur. it's also the reference point
+  // for calculating the relative mouse x coordinate.
+  interactiveLayerRef: React.RefObject<HTMLDivElement>;
+};
+
+type StateType = {
+  showCursorGuide: boolean;
+  mouseLeft: number | undefined;
+  traceViewMouseLeft: number | undefined;
+};
+
+export class Provider extends React.Component<PropType, StateType> {
+  state: StateType = {
+    showCursorGuide: false,
+    mouseLeft: void 0,
+    traceViewMouseLeft: void 0,
+  };
+
+  hasInteractiveLayer = (): boolean => {
+    return !!this.props.interactiveLayerRef.current;
+  };
+
+  displayCursorGuide = (mousePageX: number) => {
+    if (!this.hasInteractiveLayer()) {
+      return;
+    }
+
+    const {trace, dragProps} = this.props;
+
+    const interactiveLayer = this.props.interactiveLayerRef.current!;
+
+    const rect = rectOfContent(interactiveLayer);
+
+    // duration of the entire trace in seconds
+    const traceDuration = trace.traceEndTimestamp - trace.traceStartTimestamp;
+
+    const viewStart = dragProps.viewWindowStart;
+    const viewEnd = dragProps.viewWindowEnd;
+
+    const viewStartTimestamp = trace.traceStartTimestamp + viewStart * traceDuration;
+    const viewEndTimestamp = trace.traceEndTimestamp - (1 - viewEnd) * traceDuration;
+    const viewDuration = viewEndTimestamp - viewStartTimestamp;
+
+    // clamp mouseLeft to be within [0, 1]
+    const mouseLeft = clamp((mousePageX - rect.x) / rect.width, 0, 1);
+
+    const duration =
+      mouseLeft * Math.abs(trace.traceEndTimestamp - trace.traceStartTimestamp);
+
+    const startTimestamp = trace.traceStartTimestamp + duration;
+
+    const start = (startTimestamp - viewStartTimestamp) / viewDuration;
+
+    this.setState({
+      showCursorGuide: true,
+      mouseLeft,
+      traceViewMouseLeft: start,
+    });
+  };
+
+  hideCursorGuide = () => {
+    if (!this.hasInteractiveLayer()) {
+      return;
+    }
+
+    this.setState({
+      showCursorGuide: false,
+      mouseLeft: void 0,
+      traceViewMouseLeft: void 0,
+    });
+  };
+
+  render() {
+    const childrenProps = {
+      showCursorGuide: this.state.showCursorGuide,
+      mouseLeft: this.state.mouseLeft,
+      traceViewMouseLeft: this.state.traceViewMouseLeft,
+
+      displayCursorGuide: this.displayCursorGuide,
+      hideCursorGuide: this.hideCursorGuide,
+    };
+
+    return (
+      <CursorGuideManagerContext.Provider value={childrenProps}>
+        {this.props.children}
+      </CursorGuideManagerContext.Provider>
+    );
+  }
+}
+
+export const Consumer = CursorGuideManagerContext.Consumer;
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/transactionView/minimap.tsx b/src/sentry/static/sentry/app/views/organizationEventsV2/transactionView/minimap.tsx
index d9005d4b83..6cbc995baf 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/transactionView/minimap.tsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/transactionView/minimap.tsx
@@ -6,7 +6,6 @@ import {get} from 'lodash';
 
 import {
   rectOfContent,
-  clamp,
   toPercent,
   getHumanDuration,
   pickSpanBarColour,
@@ -15,6 +14,7 @@ import {
   SpanGeneratedBoundsType,
 } from './utils';
 import {DragManagerChildrenProps} from './dragManager';
+import * as CursorGuideHandler from './cursorGuideHandler';
 import {ParsedTraceType, TickAlignment, SpanType, SpanChildrenLookupType} from './types';
 import {zIndex} from './styles';
 
@@ -31,35 +31,20 @@ type PropType = {
   trace: ParsedTraceType;
 };
 
-type StateType = {
-  showCursorGuide: boolean;
-  mousePageX: number | undefined;
-  startViewHandleX: number;
-};
-
-class Minimap extends React.Component<PropType, StateType> {
-  state: StateType = {
-    showCursorGuide: false,
-    mousePageX: void 0,
-    startViewHandleX: 100,
-  };
-
-  renderCursorGuide = (cursorGuideHeight: number) => {
-    if (!this.state.showCursorGuide || !this.state.mousePageX) {
-      return null;
-    }
-
-    const interactiveLayer = this.props.minimapInteractiveRef.current;
-
-    if (!interactiveLayer) {
+class Minimap extends React.Component<PropType> {
+  renderCursorGuide = ({
+    cursorGuideHeight,
+    showCursorGuide,
+    mouseLeft,
+  }: {
+    cursorGuideHeight: number;
+    showCursorGuide: boolean;
+    mouseLeft: number | undefined;
+  }) => {
+    if (!showCursorGuide || !mouseLeft) {
       return null;
     }
 
-    const rect = rectOfContent(interactiveLayer);
-
-    // clamp mouseLeft to be within [0, 1]
-    const mouseLeft = clamp((this.state.mousePageX - rect.x) / rect.width, 0, 1);
-
     return (
       <CursorGuide
         style={{
@@ -136,8 +121,14 @@ class Minimap extends React.Component<PropType, StateType> {
     );
   };
 
-  renderDurationGuide = () => {
-    if (!this.state.showCursorGuide || !this.state.mousePageX) {
+  renderDurationGuide = ({
+    showCursorGuide,
+    mouseLeft,
+  }: {
+    showCursorGuide: boolean;
+    mouseLeft: number | undefined;
+  }) => {
+    if (!showCursorGuide || !mouseLeft) {
       return null;
     }
 
@@ -149,9 +140,6 @@ class Minimap extends React.Component<PropType, StateType> {
 
     const rect = rectOfContent(interactiveLayer);
 
-    // clamp mouseLeft to be within [0, 1]
-    const mouseLeft = clamp((this.state.mousePageX - rect.x) / rect.width, 0, 1);
-
     const {trace} = this.props;
 
     const duration =
@@ -168,7 +156,13 @@ class Minimap extends React.Component<PropType, StateType> {
     );
   };
 
-  renderTimeAxis = () => {
+  renderTimeAxis = ({
+    showCursorGuide,
+    mouseLeft,
+  }: {
+    showCursorGuide: boolean;
+    mouseLeft: number | undefined;
+  }) => {
     const {trace} = this.props;
 
     const duration = Math.abs(trace.traceEndTimestamp - trace.traceStartTimestamp);
@@ -229,8 +223,15 @@ class Minimap extends React.Component<PropType, StateType> {
         {thirdTick}
         {fourthTick}
         {lastTick}
-        {this.renderCursorGuide(TIME_AXIS_HEIGHT)}
-        {this.renderDurationGuide()}
+        {this.renderCursorGuide({
+          showCursorGuide,
+          mouseLeft,
+          cursorGuideHeight: TIME_AXIS_HEIGHT,
+        })}
+        {this.renderDurationGuide({
+          showCursorGuide,
+          mouseLeft,
+        })}
       </TimeAxis>
     );
   };
@@ -239,38 +240,45 @@ class Minimap extends React.Component<PropType, StateType> {
     return (
       <MinimapContainer>
         <ActualMinimap trace={this.props.trace} />
-        <div
-          ref={this.props.minimapInteractiveRef}
-          style={{
-            width: '100%',
-            height: `${MINIMAP_HEIGHT + TIME_AXIS_HEIGHT}px`,
-            position: 'absolute',
-            left: 0,
-            top: 0,
-          }}
-          onMouseEnter={event => {
-            this.setState({
-              showCursorGuide: true,
-              mousePageX: event.pageX,
-            });
-          }}
-          onMouseLeave={() => {
-            this.setState({showCursorGuide: false, mousePageX: void 0});
-          }}
-          onMouseMove={event => {
-            this.setState({
-              showCursorGuide: true,
-              mousePageX: event.pageX,
-            });
+        <CursorGuideHandler.Consumer>
+          {({displayCursorGuide, hideCursorGuide, mouseLeft, showCursorGuide}) => {
+            return (
+              <div
+                ref={this.props.minimapInteractiveRef}
+                style={{
+                  width: '100%',
+                  height: `${MINIMAP_HEIGHT + TIME_AXIS_HEIGHT}px`,
+                  position: 'absolute',
+                  left: 0,
+                  top: 0,
+                }}
+                onMouseEnter={event => {
+                  displayCursorGuide(event.pageX);
+                }}
+                onMouseLeave={() => {
+                  hideCursorGuide();
+                }}
+                onMouseMove={event => {
+                  displayCursorGuide(event.pageX);
+                }}
+              >
+                <InteractiveLayer>
+                  {this.renderFog(this.props.dragProps)}
+                  {this.renderCursorGuide({
+                    showCursorGuide,
+                    mouseLeft,
+                    cursorGuideHeight: MINIMAP_HEIGHT,
+                  })}
+                  {this.renderViewHandles(this.props.dragProps)}
+                </InteractiveLayer>
+                {this.renderTimeAxis({
+                  showCursorGuide,
+                  mouseLeft,
+                })}
+              </div>
+            );
           }}
-        >
-          <InteractiveLayer>
-            {this.renderFog(this.props.dragProps)}
-            {this.renderCursorGuide(MINIMAP_HEIGHT)}
-            {this.renderViewHandles(this.props.dragProps)}
-          </InteractiveLayer>
-          {this.renderTimeAxis()}
-        </div>
+        </CursorGuideHandler.Consumer>
       </MinimapContainer>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/transactionView/spanBar.tsx b/src/sentry/static/sentry/app/views/organizationEventsV2/transactionView/spanBar.tsx
index 8e5c6e3b0e..35035b08f9 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/transactionView/spanBar.tsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/transactionView/spanBar.tsx
@@ -22,6 +22,7 @@ import {
 } from './minimap';
 import {SPAN_ROW_HEIGHT, SpanRow, zIndex} from './styles';
 import * as DividerHandlerManager from './dividerHandlerManager';
+import * as CursorGuideHandler from './cursorGuideHandler';
 import SpanDetail from './spanDetail';
 
 // TODO: maybe use babel-plugin-preval
@@ -480,6 +481,32 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
     this.disconnectObservers();
   }
 
+  renderCursorGuide = () => {
+    return (
+      <CursorGuideHandler.Consumer>
+        {({
+          showCursorGuide,
+          traceViewMouseLeft,
+        }: {
+          showCursorGuide: boolean;
+          traceViewMouseLeft: number | undefined;
+        }) => {
+          if (!showCursorGuide || !traceViewMouseLeft) {
+            return null;
+          }
+
+          return (
+            <CursorGuide
+              style={{
+                left: toPercent(traceViewMouseLeft),
+              }}
+            />
+          );
+        }}
+      </CursorGuideHandler.Consumer>
+    );
+  };
+
   renderDivider = (
     dividerHandlerChildrenProps: DividerHandlerManager.DividerHandlerManagerChildrenProps
   ) => {
@@ -608,6 +635,7 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
             <DurationPill>{durationString}</DurationPill>
           </Duration>
           {this.renderWarningText({warningText: bounds.warning})}
+          {this.renderCursorGuide()}
         </SpanRowCell>
         {this.renderDivider(dividerHandlerChildrenProps)}
       </SpanRowCellContainer>
@@ -658,6 +686,17 @@ const SpanRowCell = styled('div')`
   overflow: hidden;
 `;
 
+const CursorGuide = styled('div')`
+  position: absolute;
+  top: 0;
+  width: 1px;
+  background-color: #e03e2f;
+
+  transform: translateX(-50%);
+
+  height: ${SPAN_ROW_HEIGHT}px;
+`;
+
 export const DividerLine = styled('div')`
   position: absolute;
   height: ${SPAN_ROW_HEIGHT}px;
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/transactionView/traceView.tsx b/src/sentry/static/sentry/app/views/organizationEventsV2/transactionView/traceView.tsx
index b5e05a40ce..36702cb70f 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/transactionView/traceView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/transactionView/traceView.tsx
@@ -9,6 +9,7 @@ import SpanTree from './spanTree';
 import {SpanType, SpanEntry, SentryEvent, ParsedTraceType} from './types';
 import {isValidSpanID} from './utils';
 import TraceViewMinimap from './minimap';
+import * as CursorGuideHandler from './cursorGuideHandler';
 
 type TraceContextType = {
   type: 'trace';
@@ -151,10 +152,14 @@ class TraceView extends React.Component<PropType> {
       <DragManager interactiveLayerRef={this.minimapInteractiveRef}>
         {(dragProps: DragManagerChildrenProps) => {
           return (
-            <React.Fragment>
+            <CursorGuideHandler.Provider
+              interactiveLayerRef={this.minimapInteractiveRef}
+              dragProps={dragProps}
+              trace={parsedTrace}
+            >
               {this.renderMinimap(dragProps, parsedTrace)}
               <SpanTree trace={parsedTrace} dragProps={dragProps} />
-            </React.Fragment>
+            </CursorGuideHandler.Provider>
           );
         }}
       </DragManager>
