commit fb001a544a74ee8e6aa9776ca4b046cd42d46be8
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Oct 14 22:38:13 2013 +0100

    Various activity additions
    
    - Added email notifications for notes
    - Corrected duplicate ident check for notes
    - Refactored some standard email code into sentry.utils.email

diff --git a/src/sentry/models.py b/src/sentry/models.py
index 9d6ece2392..0f28c9738e 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -1129,6 +1129,48 @@ class Activity(Model):
             if self.event:
                 self.event.update(num_comments=F('num_comments') + 1)
 
+    def send_notification(self):
+        from sentry.utils.email import MessageBuilder
+
+        if self.type != Activity.NOTE or not self.group:
+            return
+
+        user_list = list(User.objects.filter(groupseen__group=self.group))
+        disabled = set(UserOption.objects.filter(
+            user__in=user_list, key='subscribe_comments', value='0'))
+
+        send_to = [
+            u.email for u in user_list
+            if u.id not in disabled
+            and u.email
+        ]
+
+        author = self.user.first_name or self.user.username
+
+        subject = '%s: %s' % (
+            author,
+            self.data['text'].splitlines()[0][:64])
+
+        context = {
+            'text': self.data['text'],
+            'author': author,
+            'group': self.group,
+            'link': self.group.get_absolute_url(),
+        }
+
+        msg = MessageBuilder(
+            subject=subject,
+            context=context,
+            template='sentry/emails/new_note.txt',
+            html_template='sentry/emails/new_note.html',
+        )
+
+        try:
+            msg.send(to=send_to)
+        except Exception, e:
+            logger = logging.getLogger('sentry.mail.errors')
+            logger.exception(e)
+
 
 class GroupSeen(Model):
     """
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 13a693ae7a..3773b0b8f1 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -8,7 +8,6 @@ sentry.plugins.sentry_mail.models
 import sentry
 
 from django.conf import settings
-from django.core.mail import EmailMultiAlternatives
 from django.core.urlresolvers import reverse
 from django.template.loader import render_to_string
 from django.utils.safestring import mark_safe
@@ -17,24 +16,12 @@ from sentry.models import User, UserOption
 from sentry.plugins import register
 from sentry.plugins.bases.notify import NotificationPlugin
 from sentry.utils.cache import cache
+from sentry.utils.email import MessageBuilder
 from sentry.utils.http import absolute_uri
 
-from pynliner import Pynliner
-
 NOTSET = object()
 
 
-class UnicodeSafePynliner(Pynliner):
-    def _get_output(self):
-        """
-        Generate Unicode string of `self.soup` and set it to `self.output`
-
-        Returns self.output
-        """
-        self.output = unicode(self.soup)
-        return self.output
-
-
 class MailPlugin(NotificationPlugin):
     title = _('Mail')
     conf_key = 'mail'
@@ -46,27 +33,20 @@ class MailPlugin(NotificationPlugin):
     project_conf_form = None
     subject_prefix = settings.EMAIL_SUBJECT_PREFIX
 
-    def _send_mail(self, subject, body, html_body=None, project=None, fail_silently=False, headers=None):
+    def _send_mail(self, subject, body, html_body=None, project=None,
+                   fail_silently=False):
         send_to = self.get_send_to(project)
         if not send_to:
             return
 
         subject_prefix = self.get_option('subject_prefix', project) or self.subject_prefix
 
-        if headers is None:
-            headers = {}
-
-        headers.setdefault('Reply-To', ', '.join(send_to))
-
-        msg = EmailMultiAlternatives(
-            '%s%s' % (subject_prefix, subject),
-            body,
-            settings.SERVER_EMAIL,
-            send_to,
-            headers=headers)
-        if html_body:
-            msg.attach_alternative(html_body, "text/html")
-        msg.send(fail_silently=fail_silently)
+        msg = MessageBuilder(
+            subject='%s%s' % (subject_prefix, subject),
+            txt_body=body,
+            html_body=html_body,
+        )
+        msg.send(send_to, fail_silently=fail_silently)
 
     def send_test_mail(self, project=None):
         self._send_mail(
@@ -108,11 +88,11 @@ class MailPlugin(NotificationPlugin):
         })
 
     def get_alert_html_body(self, alert):
-        return UnicodeSafePynliner().from_string(render_to_string('sentry/emails/alert.html', {
+        return render_to_string('sentry/emails/alert.html', {
             'alert': alert,
             'link': alert.get_absolute_url(),
             'settings_link': self.get_notification_settings_url(),
-        })).run()
+        })
 
     def get_emails_for_users(self, user_ids, project=None):
         email_list = set()
@@ -220,13 +200,13 @@ class MailPlugin(NotificationPlugin):
         })
 
     def get_html_body(self, group, event, link, interface_list):
-        return UnicodeSafePynliner().from_string(render_to_string('sentry/emails/error.html', {
+        return render_to_string('sentry/emails/error.html', {
             'group': group,
             'event': event,
             'link': link,
             'interfaces': interface_list,
             'settings_link': self.get_notification_settings_url(),
-        })).run()
+        })
 
 
 # Legacy compatibility
diff --git a/src/sentry/static/sentry/less/sentry.less b/src/sentry/static/sentry/less/sentry.less
index 654dfb22f1..3f9f5e6135 100644
--- a/src/sentry/static/sentry/less/sentry.less
+++ b/src/sentry/static/sentry/less/sentry.less
@@ -2024,7 +2024,7 @@ table.table td .select2-container {
 
 .btn.disabled, .btn[disabled] {
   background: #ecf0f4;
-  .opacity(55);
+  .opacity(35);
 }
 
 .navbar-inverse .nav .active > a, .navbar-inverse .nav .active > a:hover, .navbar-inverse .nav .active > a:focus {
@@ -2204,7 +2204,7 @@ table.vars {
 
     > li {
       margin-bottom: 5px;
-      line-height: 26px;
+      line-height: 30px;
       position: relative;
       padding-left: 20px;
 
@@ -2245,58 +2245,59 @@ table.vars {
 
   .add-note-btn {
     font-size: 12px;
+    font-weight: 300;
+    letter-spacing: -0.1px;
     position: absolute;
     right: 0;
     top: 0;
-    padding: 5px;
-    color: @gray;
-    border: 1px solid #fff;
+    padding: 2px 5px;
+    background: #eff3f7;
+    color: #666d73;
+    border: 1px solid #eff3f7;
+    .border-radius(4px);
+
     .icon-comment {
-      .opacity(70);
-    }
-    &.selected,
-    &:hover {
-      z-index: 1001;
-      background: #eee;
-      border-color: #ddd;
+      .opacity(50);
     }
     &:hover.selected,
     &.selected {
-      border-bottom-color: #eee;
+      z-index: 1001;
+      border-color: darken(#eff3f7, 10%);
+      .border-radius(4px 4px 0 0);
+      border-bottom-color: #eff3f7;
     }
 
   }
 
-}
-
-form.add-note-form {
-  z-index: 1000;
-  position: absolute;
-  right: 0;
-  top: 30px;
-  background: #eee;
-  border: 1px solid #ddd;
-  padding: 10px;
-
-  > textarea {
-    font-size: 13px;
-    max-width: 600px;
-    background: #fff;
-    border: 1px solid #eee;
-    font-weight: 300;
-    height: 80px;
-    margin: 0;
+  form.add-note-form {
+    z-index: 1000;
+    position: absolute;
     right: 0;
-    left: 0;
-    margin-bottom: 10px;
-    .box-shadow(none);
-    .placeholder(#ddd);
-  }
+    top: 25px;
+    background: #eff3f7;
+    padding: 10px;
+    border: 1px solid darken(#eff3f7, 10%);
 
-  .form-actions {
-    text-align: right;
-    padding: 0;
-    margin: 0;
+    > textarea {
+      font-size: 13px;
+      max-width: 600px;
+      background: #fff;
+      border: 1px solid darken(#eff3f7, 10%);
+      font-weight: 300;
+      height: 80px;
+      margin: 0;
+      right: 0;
+      left: 0;
+      margin-bottom: 10px;
+      .box-shadow(none);
+      .placeholder(#ddd);
+    }
+
+    .form-actions {
+      text-align: right;
+      padding: 0;
+      margin: 0;
+    }
   }
 }
 
diff --git a/src/sentry/static/sentry/styles/global.min.css b/src/sentry/static/sentry/styles/global.min.css
index c1af7707f9..b43e7f9dce 100644
--- a/src/sentry/static/sentry/styles/global.min.css
+++ b/src/sentry/static/sentry/styles/global.min.css
@@ -8546,8 +8546,8 @@ table.table td .select2-container {
 .btn.disabled,
 .btn[disabled] {
   background: #ecf0f4;
-  opacity: 0.55;
-  filter: alpha(opacity=55);
+  opacity: 0.35;
+  filter: alpha(opacity=35);
 }
 .navbar-inverse .nav .active > a,
 .navbar-inverse .nav .active > a:hover,
@@ -8720,7 +8720,7 @@ table.vars table.vars th {
 }
 .activity > ul > li {
   margin-bottom: 5px;
-  line-height: 26px;
+  line-height: 30px;
   position: relative;
   padding-left: 20px;
 }
@@ -8759,41 +8759,46 @@ table.vars table.vars th {
 }
 .activity .add-note-btn {
   font-size: 12px;
+  font-weight: 300;
+  letter-spacing: -0.1px;
   position: absolute;
   right: 0;
   top: 0;
-  padding: 5px;
-  color: #465262;
-  border: 1px solid #fff;
+  padding: 2px 5px;
+  background: #eff3f7;
+  color: #666d73;
+  border: 1px solid #eff3f7;
+  -webkit-border-radius: 4px;
+  -moz-border-radius: 4px;
+  border-radius: 4px;
 }
 .activity .add-note-btn .icon-comment {
-  opacity: 0.7;
-  filter: alpha(opacity=70);
-}
-.activity .add-note-btn.selected,
-.activity .add-note-btn:hover {
-  z-index: 1001;
-  background: #eee;
-  border-color: #ddd;
+  opacity: 0.5;
+  filter: alpha(opacity=50);
 }
 .activity .add-note-btn:hover.selected,
 .activity .add-note-btn.selected {
-  border-bottom-color: #eee;
+  z-index: 1001;
+  border-color: #cdd9e6;
+  -webkit-border-radius: 4px 4px 0 0;
+  -moz-border-radius: 4px 4px 0 0;
+  border-radius: 4px 4px 0 0;
+  border-bottom-color: #eff3f7;
 }
-form.add-note-form {
+.activity form.add-note-form {
   z-index: 1000;
   position: absolute;
   right: 0;
-  top: 30px;
-  background: #eee;
-  border: 1px solid #ddd;
+  top: 25px;
+  background: #eff3f7;
   padding: 10px;
+  border: 1px solid #cdd9e6;
 }
-form.add-note-form > textarea {
+.activity form.add-note-form > textarea {
   font-size: 13px;
   max-width: 600px;
   background: #fff;
-  border: 1px solid #eee;
+  border: 1px solid #cdd9e6;
   font-weight: 300;
   height: 80px;
   margin: 0;
@@ -8804,16 +8809,16 @@ form.add-note-form > textarea {
   -moz-box-shadow: none;
   box-shadow: none;
 }
-form.add-note-form > textarea:-moz-placeholder {
+.activity form.add-note-form > textarea:-moz-placeholder {
   color: #dddddd;
 }
-form.add-note-form > textarea:-ms-input-placeholder {
+.activity form.add-note-form > textarea:-ms-input-placeholder {
   color: #dddddd;
 }
-form.add-note-form > textarea::-webkit-input-placeholder {
+.activity form.add-note-form > textarea::-webkit-input-placeholder {
   color: #dddddd;
 }
-form.add-note-form .form-actions {
+.activity form.add-note-form .form-actions {
   text-align: right;
   padding: 0;
   margin: 0;
diff --git a/src/sentry/static/sentry/styles/sentry.css b/src/sentry/static/sentry/styles/sentry.css
index c1af7707f9..b43e7f9dce 100644
--- a/src/sentry/static/sentry/styles/sentry.css
+++ b/src/sentry/static/sentry/styles/sentry.css
@@ -8546,8 +8546,8 @@ table.table td .select2-container {
 .btn.disabled,
 .btn[disabled] {
   background: #ecf0f4;
-  opacity: 0.55;
-  filter: alpha(opacity=55);
+  opacity: 0.35;
+  filter: alpha(opacity=35);
 }
 .navbar-inverse .nav .active > a,
 .navbar-inverse .nav .active > a:hover,
@@ -8720,7 +8720,7 @@ table.vars table.vars th {
 }
 .activity > ul > li {
   margin-bottom: 5px;
-  line-height: 26px;
+  line-height: 30px;
   position: relative;
   padding-left: 20px;
 }
@@ -8759,41 +8759,46 @@ table.vars table.vars th {
 }
 .activity .add-note-btn {
   font-size: 12px;
+  font-weight: 300;
+  letter-spacing: -0.1px;
   position: absolute;
   right: 0;
   top: 0;
-  padding: 5px;
-  color: #465262;
-  border: 1px solid #fff;
+  padding: 2px 5px;
+  background: #eff3f7;
+  color: #666d73;
+  border: 1px solid #eff3f7;
+  -webkit-border-radius: 4px;
+  -moz-border-radius: 4px;
+  border-radius: 4px;
 }
 .activity .add-note-btn .icon-comment {
-  opacity: 0.7;
-  filter: alpha(opacity=70);
-}
-.activity .add-note-btn.selected,
-.activity .add-note-btn:hover {
-  z-index: 1001;
-  background: #eee;
-  border-color: #ddd;
+  opacity: 0.5;
+  filter: alpha(opacity=50);
 }
 .activity .add-note-btn:hover.selected,
 .activity .add-note-btn.selected {
-  border-bottom-color: #eee;
+  z-index: 1001;
+  border-color: #cdd9e6;
+  -webkit-border-radius: 4px 4px 0 0;
+  -moz-border-radius: 4px 4px 0 0;
+  border-radius: 4px 4px 0 0;
+  border-bottom-color: #eff3f7;
 }
-form.add-note-form {
+.activity form.add-note-form {
   z-index: 1000;
   position: absolute;
   right: 0;
-  top: 30px;
-  background: #eee;
-  border: 1px solid #ddd;
+  top: 25px;
+  background: #eff3f7;
   padding: 10px;
+  border: 1px solid #cdd9e6;
 }
-form.add-note-form > textarea {
+.activity form.add-note-form > textarea {
   font-size: 13px;
   max-width: 600px;
   background: #fff;
-  border: 1px solid #eee;
+  border: 1px solid #cdd9e6;
   font-weight: 300;
   height: 80px;
   margin: 0;
@@ -8804,16 +8809,16 @@ form.add-note-form > textarea {
   -moz-box-shadow: none;
   box-shadow: none;
 }
-form.add-note-form > textarea:-moz-placeholder {
+.activity form.add-note-form > textarea:-moz-placeholder {
   color: #dddddd;
 }
-form.add-note-form > textarea:-ms-input-placeholder {
+.activity form.add-note-form > textarea:-ms-input-placeholder {
   color: #dddddd;
 }
-form.add-note-form > textarea::-webkit-input-placeholder {
+.activity form.add-note-form > textarea::-webkit-input-placeholder {
   color: #dddddd;
 }
-form.add-note-form .form-actions {
+.activity form.add-note-form .form-actions {
   text-align: right;
   padding: 0;
   margin: 0;
diff --git a/src/sentry/templates/sentry/emails/new_note.html b/src/sentry/templates/sentry/emails/new_note.html
new file mode 100644
index 0000000000..598f269b7d
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/new_note.html
@@ -0,0 +1,17 @@
+{% extends "sentry/emails/base.html" %}
+
+{% load i18n %}
+
+{% block header %}
+    <h1>Sentry <small>New Note</small></h1>
+{% endblock %}
+
+{% block inner %}
+    <pre>{{ group.message_top }}</pre>
+
+    <p>A note was added by {{ author }}:</p>
+
+    <blockquote>{{ text|urlize|linebreaks }}</blockquote>
+
+    <p><a href="{{ link }}">{{ link }}</a></p>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/new_note.txt b/src/sentry/templates/sentry/emails/new_note.txt
new file mode 100644
index 0000000000..2f6ae84efa
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/new_note.txt
@@ -0,0 +1,16 @@
+{% spaceless %}
+{% autoescape off %}
+A new note was posted on an event in Sentry:
+
+{{ text }}
+
+
+Details
+-------
+
+{{ group.message_top }}
+
+{{ link }}
+
+{% endautoescape %}
+{% endspaceless %}
diff --git a/src/sentry/templates/sentry/groups/details.html b/src/sentry/templates/sentry/groups/details.html
index f0b360ba97..50a32d4857 100644
--- a/src/sentry/templates/sentry/groups/details.html
+++ b/src/sentry/templates/sentry/groups/details.html
@@ -39,7 +39,7 @@
                             {% endwith %}
                         {% endfor %}
                     </ul>
-                    <a href="#add-note" class="add-note-btn"><i class="icon-comment"></i></a>
+                    <a href="#add-note" class="add-note-btn"><i class="icon-comment"></i> Add Note</a>
                     <form class="add-note-form hide" method="POST" action="">
                         {% csrf_token %}
                         <input type="hidden" name="o" value="note">
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
new file mode 100644
index 0000000000..c47dd75372
--- /dev/null
+++ b/src/sentry/utils/email.py
@@ -0,0 +1,73 @@
+"""
+sentry.utils.email
+~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from django.conf import settings
+from django.core.mail import EmailMultiAlternatives
+
+from pynliner import Pynliner
+
+from sentry.web.helpers import render_to_string
+
+
+class MessageBuilder(object):
+    def __init__(self, subject, context=None, template=None, html_template=None,
+                 body=None, html_body=None):
+        assert not (body and template)
+        assert not (html_body and html_template)
+        assert context or not (template or html_template)
+
+        self.subject = subject
+        self.context = context
+        self.template = template
+        self.html_template = html_template
+        self.body = body
+        self.html_body = html_body
+
+    def build(self, to):
+        headers = {
+            'Reply-To': ', '.join(to),
+        }
+
+        if self.template:
+            txt_body = render_to_string(self.template, self.context)
+        else:
+            txt_body = self.body
+
+        if self.html_template:
+            html_body = render_to_string(self.html_template, self.context)
+        else:
+            html_body = self.html_body
+
+        msg = EmailMultiAlternatives(
+            self.subject,
+            txt_body,
+            settings.SERVER_EMAIL,
+            to,
+            headers=headers
+        )
+        if html_body:
+            msg.attach_alternative(
+                UnicodeSafePynliner().from_string(html_body),
+                "text/html")
+
+        return msg
+
+    def send(self, to, fail_silently=False):
+        msg = self.build(to)
+        msg.send(fail_silently=fail_silently)
+
+
+class UnicodeSafePynliner(Pynliner):
+    def _get_output(self):
+        """
+        Generate Unicode string of `self.soup` and set it to `self.output`
+
+        Returns self.output
+        """
+        self.output = unicode(self.soup)
+        return self.output
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 55c5989271..c38a7a5014 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -69,10 +69,18 @@ class RegistrationForm(forms.ModelForm):
 
 class NotificationSettingsForm(forms.Form):
     alert_email = forms.EmailField(help_text=_('Designate an alternative email address to send email notifications to.'), required=False)
-    subscribe_by_default = forms.ChoiceField(choices=(
-        ('1', _('Automatically subscribe to notifications for new projects')),
-        ('0', _('Do not subscribe to notifications for new projects')),
-    ), required=False)
+    subscribe_by_default = forms.ChoiceField(
+        choices=(
+            ('1', _('Automatically subscribe to notifications for new projects')),
+            ('0', _('Do not subscribe to notifications for new projects')),
+        ), required=False,
+        widget=forms.Select(attrs={'class': 'input-xxlarge'}))
+    subscribe_notes = forms.ChoiceField(
+        choices=(
+            ('1', _('Get notified about new notes on events I\'ve seen')),
+            ('0', _('Do not subscribe to note notifications')),
+        ), required=False,
+        widget=forms.Select(attrs={'class': 'input-xxlarge'}))
 
     def __init__(self, user, *args, **kwargs):
         self.user = user
@@ -89,6 +97,12 @@ class NotificationSettingsForm(forms.Form):
             key='subscribe_by_default',
             default='1',
         )
+        self.fields['subscribe_notes'].initial = UserOption.objects.get_value(
+            user=self.user,
+            project=None,
+            key='subscribe_notes',
+            default='1',
+        )
 
     def get_title(self):
         return "General"
@@ -106,6 +120,12 @@ class NotificationSettingsForm(forms.Form):
             key='subscribe_by_default',
             value=self.cleaned_data['subscribe_by_default'],
         )
+        UserOption.objects.set_value(
+            user=self.user,
+            project=None,
+            key='subscribe_notes',
+            value=self.cleaned_data['subscribe_notes'],
+        )
 
 
 class AccountSettingsForm(forms.Form):
@@ -144,17 +164,19 @@ class AccountSettingsForm(forms.Form):
 
 class AppearanceSettingsForm(forms.Form):
     language = forms.ChoiceField(
-        label=_('Language'), choices=LANGUAGES, required=False)
+        label=_('Language'), choices=LANGUAGES, required=False,
+        widget=forms.Select(attrs={'class': 'input-xlarge'}))
     stacktrace_order = forms.ChoiceField(
         label=_('Stacktrace order'), choices=(
             ('-1', _('Default (let Sentry decide)')),
             ('1', _('Most recent call last')),
             ('2', _('Most recent call first')),
         ), help_text=_('Choose the default ordering of frames in stacktraces.'),
-        required=False)
+        required=False,
+        widget=forms.Select(attrs={'class': 'input-xlarge'}))
     timezone = forms.ChoiceField(
         label=_('Time zone'), choices=TIMEZONE_CHOICES, required=False,
-        widget=forms.Select(attrs={'class': 'span4'}))
+        widget=forms.Select(attrs={'class': 'input-xxlarge'}))
 
     def __init__(self, user, *args, **kwargs):
         self.user = user
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index c79a5bb3cd..1ea1581ea9 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -392,11 +392,12 @@ def group(request, team, project, group, event_id=None):
     if request.POST.get('o') == 'note' and request.user.is_authenticated():
         add_note_form = NewNoteForm(request.POST)
         if add_note_form.is_valid():
-            Activity.objects.create(
+            activity = Activity.objects.create(
                 group=group, event=event, project=project,
                 type=Activity.NOTE, user=request.user,
                 data=add_note_form.cleaned_data
             )
+            activity.send_notification()
             return HttpResponseRedirect(request.path)
     else:
         add_note_form = NewNoteForm()
@@ -423,9 +424,13 @@ def group(request, team, project, group, event_id=None):
     # filter out dupe activity items
     activity_items = set()
     activity = []
-    for item in activity_qs.filter(group=group)[:10]:
+    for item in activity_qs.filter(group=group)[:20]:
         sig = (item.event_id, item.type, item.ident, item.user_id)
-        if sig not in activity_items:
+        # TODO: we could just generate a signature (hash(text)) for notes
+        # so theres no special casing
+        if item.type == Activity.NOTE:
+            activity.append(item)
+        elif sig not in activity_items:
             activity_items.add(sig)
             activity.append(item)
 
@@ -434,7 +439,7 @@ def group(request, team, project, group, event_id=None):
         datetime=group.first_seen))
 
     # trim to latest 5
-    activity = activity[:5]
+    activity = activity[:7]
 
     seen_by = sorted(filter(lambda ls: ls[0] != request.user and ls[0].email, [
         (gs.user, gs.last_seen)
