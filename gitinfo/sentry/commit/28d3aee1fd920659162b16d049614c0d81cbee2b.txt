commit 28d3aee1fd920659162b16d049614c0d81cbee2b
Author: David Cramer <dcramer@David-Cramers-MacBook.local>
Date:   Fri Nov 13 16:57:50 2009 -0600

    There is now a data field in Error. Some fixes for failing unit tests (including fix from @walen).

diff --git a/djangodblog/__init__.py b/djangodblog/__init__.py
index f74441f391..ad792a0e53 100644
--- a/djangodblog/__init__.py
+++ b/djangodblog/__init__.py
@@ -1 +1 @@
-__version__ = (1, 4, 0)
\ No newline at end of file
+__version__ = (1, 5, 0)
\ No newline at end of file
diff --git a/djangodblog/manager.py b/djangodblog/manager.py
index db2e557889..3c35456cb2 100644
--- a/djangodblog/manager.py
+++ b/djangodblog/manager.py
@@ -121,10 +121,13 @@ class DBLogManager(models.Manager):
         checksum.update(defaults.get('traceback') or defaults['message'])
         checksum    = checksum.hexdigest()
 
+        data = defaults.pop('data', {})
+
         try:
             instance = Error.objects.create(
                 class_name=class_name,
                 server_name=server_name,
+                data=data,
                 **defaults
             )
             batch, created = ErrorBatch.objects.get_or_create(
diff --git a/djangodblog/middleware.py b/djangodblog/middleware.py
index b18476e41f..45901d623b 100644
--- a/djangodblog/middleware.py
+++ b/djangodblog/middleware.py
@@ -10,4 +10,8 @@ class DBLogMiddleware(object):
         if not getattr(settings, 'DBLOG_CATCH_404_ERRORS', False) and isinstance(exception, Http404):
             return
 
-        Error.objects.create_from_exception(exception, url=request.build_absolute_uri())
\ No newline at end of file
+        Error.objects.create_from_exception(exception, url=request.build_absolute_uri(), data=dict(
+            META=request.META,
+            POST=request.POST,
+            GET=request.GET,
+        ))
\ No newline at end of file
diff --git a/djangodblog/models.py b/djangodblog/models.py
index e09a782bfc..bda10f2cb5 100644
--- a/djangodblog/models.py
+++ b/djangodblog/models.py
@@ -10,6 +10,7 @@ except ImportError:
 import datetime
 
 from manager import DBLogManager
+from utils import JSONDictField
 
 __all__ = ('Error', 'ErrorBatch')
 
@@ -60,6 +61,7 @@ class Error(Model):
     traceback       = models.TextField(blank=True, null=True)
     datetime        = models.DateTimeField(default=datetime.datetime.now)
     url             = models.URLField(verify_exists=False, null=True, blank=True)
+    data            = JSONDictField(blank=True, null=True)
     server_name     = models.CharField(max_length=128, db_index=True)
 
     objects         = DBLogManager()
diff --git a/djangodblog/tests.py b/djangodblog/tests.py
index 4f991abbc2..22894c112b 100644
--- a/djangodblog/tests.py
+++ b/djangodblog/tests.py
@@ -2,11 +2,12 @@ from django.test.client import Client
 from django.test import TestCase
 from django.core.handlers.wsgi import WSGIRequest
 from django.conf import settings
+from django.db import models
 from django.utils.encoding import smart_unicode
 
 from models import Error, ErrorBatch
 from middleware import DBLogMiddleware
-
+from utils import JSONDictField
 import logging
 
 class RequestFactory(Client):
@@ -28,6 +29,21 @@ class RequestFactory(Client):
  
 RF = RequestFactory()
 
+class JSONDictModel(models.Model):
+    data = JSONDictField(blank=True, null=True)
+
+class JSONDictTestCase(TestCase):
+    def testField(self):
+        # Let's make sure the default value is correct
+        instance = JSONDictModel()
+        self.assertEquals(instance.data, {})
+        
+        instance = JSONDictModel.objects.create(data={'foo': 'bar'})
+        self.assertEquals(instance.data.get('foo'), 'bar')
+        
+        instance = JSONDictModel.objects.get()
+        self.assertEquals(instance.data.get('foo'), 'bar')
+
 class DBLogTestCase(TestCase):
     def setUp(self):
         settings.DBLOG_DATABASE = None
@@ -35,13 +51,18 @@ class DBLogTestCase(TestCase):
 
     def testLogger(self):
         from handlers import DBLogHandler
-        
+
         Error.objects.all().delete()
         ErrorBatch.objects.all().delete()
 
-        logging.getLogger().addHandler(DBLogHandler())
+        logger = logging.getLogger()
+        for h in logger.handlers:
+            logger.removeHandler(h)
+
+        logger.setLevel(logging.DEBUG)
+        logger.addHandler(DBLogHandler())
 
-        logging.error('This is a test error')
+        logger.error('This is a test error')
         cur = (Error.objects.count(), ErrorBatch.objects.count())
         self.assertEquals(cur, (1, 1), 'Assumed logs failed to save. %s' % (cur,))
         last = Error.objects.all().order_by('-id')[0:1].get()
@@ -49,7 +70,7 @@ class DBLogTestCase(TestCase):
         self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, 'This is a test error')
 
-        logging.warning('This is a test warning')
+        logger.warning('This is a test warning')
         cur = (Error.objects.count(), ErrorBatch.objects.count())
         self.assertEquals(cur, (2, 2), 'Assumed logs failed to save. %s' % (cur,))
         last = Error.objects.all().order_by('-id')[0:1].get()
@@ -57,7 +78,7 @@ class DBLogTestCase(TestCase):
         self.assertEquals(last.level, logging.WARNING)
         self.assertEquals(last.message, 'This is a test warning')
         
-        logging.error('This is a test error')
+        logger.error('This is a test error')
         cur = (Error.objects.count(), ErrorBatch.objects.count())
         self.assertEquals(cur, (3, 2), 'Assumed logs failed to save. %s' % (cur,))
         last = Error.objects.all().order_by('-id')[0:1].get()
@@ -132,6 +153,7 @@ class DBLogTestCase(TestCase):
             DATABASE_USER=settings.DATABASE_USER,
             DATABASE_PASSWORD=settings.DATABASE_PASSWORD,
             DATABASE_OPTIONS=settings.DATABASE_OPTIONS,
+            TIME_ZONE=settings.TIME_ZONE,
         )
         
         Error.objects.all().delete()
diff --git a/djangodblog/utils.py b/djangodblog/utils.py
new file mode 100644
index 0000000000..2ed8eaf562
--- /dev/null
+++ b/djangodblog/utils.py
@@ -0,0 +1,69 @@
+from django.utils import simplejson as json
+from django.utils.encoding import smart_unicode
+from django.db import models
+from django import forms
+from django.core.serializers.json import DjangoJSONEncoder
+
+import uuid
+
+class BetterJSONEncoder(DjangoJSONEncoder):
+    def default(self, obj):
+        if isinstance(obj, uuid.UUID):
+            return obj.hex
+        elif not isinstance(obj, (basestring, tuple, list, dict, int, bool)):
+            return unicode(obj)
+        else:
+            return super(BetterJSONEncoder, self).default(obj)
+
+def json_dumps(value, **kwargs):
+    return json.dumps(value, cls=BetterJSONEncoder, **kwargs)
+
+class JSONDictWidget(forms.Textarea):
+    def render(self, name, value, attrs=None):
+        if not isinstance(value, basestring):
+            value = json_dumps(value, indent=2)
+        return super(JSONDictWidget, self).render(name, value, attrs)
+
+class JSONDictFormField(forms.CharField):
+    def __init__(self, *args, **kwargs):
+        kwargs['widget'] = JSONDictWidget
+        super(JSONDictField, self).__init__(*args, **kwargs)
+ 
+    def clean(self, value):
+        if not value: return
+        try:
+            return json.loads(value)
+        except Exception, exc:
+            raise forms.ValidationError(u'JSONDict decode error: %s' % (smart_unicode(exc),))
+
+class JSONDictField(models.TextField):
+    """
+    Slightly different from a JSONField in the sense that the default
+    value is a dictionary.
+    """
+    __metaclass__ = models.SubfieldBase
+ 
+    def formfield(self, **kwargs):
+        return super(JSONDictField, self).formfield(form_class=JSONDictFormField, **kwargs)
+ 
+    def to_python(self, value):
+        if isinstance(value, basestring) and value:
+            value = json.loads(value)
+        elif not value:
+            return {}
+        return value
+ 
+    def get_db_prep_save(self, value):
+        if value is None: return
+        return json_dumps(value)
+ 
+    def value_to_string(self, obj):
+        value = self._get_val_from_obj(obj)
+        return self.get_db_prep_value(value)
+
+    def south_field_triple(self):
+        "Returns a suitable description of this field for South."
+        from south.modelsinspector import introspector
+        field_class = "django.db.models.fields.TextField"
+        args, kwargs = introspector(self)
+        return (field_class, args, kwargs)
\ No newline at end of file
