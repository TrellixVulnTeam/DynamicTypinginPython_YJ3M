commit cb68a37c174d491be3df9b9f03a8548dae2a0a16
Author: Matte Noble <me@mattenoble.com>
Date:   Fri Nov 30 14:17:36 2018 -0800

    fix(service-hooks): Handle race conditions (#10842)
    
    I suspect the Issues we've seen pop up with this are due to a race
    condition where the task executes before the transaction to create the
    resource commits.
    
    This change handles DoesNotExist errors explicitly without reporting to
    Sentry (until the max retries happen).
    
    This also changes the `post_save` signal that enqueues a task when an
    Issue is saved, to only do so when it's a brand new Issue. Meaning
    updates to existing issues will not enqueue anything.

diff --git a/src/sentry/models/signals.py b/src/sentry/models/signals.py
index 9ffef8cb33..2fdf79130e 100644
--- a/src/sentry/models/signals.py
+++ b/src/sentry/models/signals.py
@@ -8,5 +8,6 @@ from sentry.models import Group
 
 @receiver(post_save, sender=Group)
 def resource_changed(sender, instance, created, **kwargs):
-    from sentry.tasks.servicehooks import process_resource_change
-    process_resource_change.delay(sender, instance.id, created)
+    if created:
+        from sentry.tasks.servicehooks import process_resource_change
+        process_resource_change.delay(sender, instance.id)
diff --git a/src/sentry/tasks/servicehooks.py b/src/sentry/tasks/servicehooks.py
index 71abb9eb58..d52ca8dcf4 100644
--- a/src/sentry/tasks/servicehooks.py
+++ b/src/sentry/tasks/servicehooks.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import, print_function
 import six
 
 from time import time
+from celery.task import current
 
 from sentry.api.serializers import serialize, app_platform_event
 from sentry.http import safe_urlopen
@@ -31,14 +32,20 @@ RESOURCE_RENAMES = {
     max_retries=5,
 )
 @retry()
-def process_resource_change(sender, instance_id, created):
+def process_resource_change(sender, instance_id):
     model = sender.__name__
     model = RESOURCE_RENAMES.get(model, model.lower())
 
-    instance = sender.objects.get(id=instance_id)
+    # We may run into a race condition where this task executes before the
+    # transaction that creates the Group has committed.
+    try:
+        instance = sender.objects.get(id=instance_id)
+    except sender.DoesNotExist as e:
+        # Explicitly requeue the task, so we don't report this to Sentry until
+        # we hit the max number of retries.
+        return current.retry(exc=e)
 
-    event = 'created' if created else 'updated'
-    action = u'{}.{}'.format(model, event)
+    action = u'{}.created'.format(model)
 
     if action not in ALLOWED_ACTIONS:
         return
diff --git a/tests/sentry/tasks/test_servicehooks.py b/tests/sentry/tasks/test_servicehooks.py
index bf72d788eb..6415aa8379 100644
--- a/tests/sentry/tasks/test_servicehooks.py
+++ b/tests/sentry/tasks/test_servicehooks.py
@@ -2,8 +2,10 @@ from __future__ import absolute_import
 
 import six
 
+from datetime import datetime
 from mock import patch
 
+from sentry.models import Group
 from sentry.testutils import TestCase
 from sentry.tasks.servicehooks import get_payload_v0, process_service_hook
 from sentry.testutils.helpers.faux import faux
@@ -79,3 +81,24 @@ class TestServiceHooks(TestCase):
             'X-ServiceHook-GUID',
             'X-ServiceHook-Signature',
         ))
+
+    @patch('sentry.models.Group.objects.get')
+    @patch('sentry.tasks.servicehooks.process_resource_change.retry')
+    def test_gracefully_handles_commit_race_condition(self, retry, get):
+        does_not_exist = Group.DoesNotExist()
+
+        # Fail once, then transaction commits, and next retry succeeds
+        get.side_effect = [does_not_exist, None]
+
+        with self.tasks():
+            self.create_group(project=self.project)
+
+        retry.assert_called_with(exc=does_not_exist)
+
+    @patch('sentry.tasks.servicehooks.process_resource_change.delay')
+    def test_does_not_enqueue_tasks_for_resource_updates(self, delay):
+        group = self.create_group(project=self.project)
+        group.update(last_seen=datetime.now())
+
+        # Only called once for the create, not also for the update.
+        delay.assert_called_once_with(Group, group.id)
