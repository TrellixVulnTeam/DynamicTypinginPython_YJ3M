commit 2540aec9d55a6617bd714c5b1d0c614912d957cd
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jul 20 16:00:02 2016 -0700

    Support environment attribute in rule condition
    
    @getsentry/infrastructure

diff --git a/src/sentry/rules/conditions/event_attribute.py b/src/sentry/rules/conditions/event_attribute.py
index eaaaf6cae7..69fa6b73bd 100644
--- a/src/sentry/rules/conditions/event_attribute.py
+++ b/src/sentry/rules/conditions/event_attribute.py
@@ -41,6 +41,7 @@ MATCH_CHOICES = OrderedDict([
 ATTR_CHOICES = [
     'message',
     'platform',
+    'environment',
     'exception.type',
     'exception.value',
     'user.id',
@@ -104,6 +105,9 @@ class EventAttributeCondition(EventCondition):
                 return []
             return [getattr(event, path[0])]
 
+        elif path[0] == 'environment':
+            return [event.get_tag('environment')]
+
         elif len(path) == 1:
             return []
 
diff --git a/tests/sentry/rules/conditions/test_event_attribute.py b/tests/sentry/rules/conditions/test_event_attribute.py
index c922b5ba42..215c838d22 100644
--- a/tests/sentry/rules/conditions/test_event_attribute.py
+++ b/tests/sentry/rules/conditions/test_event_attribute.py
@@ -41,6 +41,7 @@ class EventAttributeConditionTest(RuleTestCase):
                         },
                     ],
                 },
+                'tags': [('environment', 'production')],
                 'extra': {
                     'foo': {
                         'bar': 'baz',
@@ -172,6 +173,22 @@ class EventAttributeConditionTest(RuleTestCase):
         })
         self.assertDoesNotPass(rule, event)
 
+    def test_environment(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'environment',
+            'value': 'production',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'environment',
+            'value': 'staging',
+        })
+        self.assertDoesNotPass(rule, event)
+
     def test_http_method(self):
         event = self.get_event()
         rule = self.get_rule({
