commit 3c376b53e71b82cc0000427f282791871058f2d1
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Mon Jun 29 13:58:47 2020 +0200

    ref(relay): removed func bind (#19597)

diff --git a/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/modalManager.tsx b/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/modalManager.tsx
index 1b4ac06c9a..95c1911c44 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/modalManager.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/modalManager.tsx
@@ -35,22 +35,15 @@ class DialogManager<
   P extends Props = Props,
   S extends State = State
 > extends React.Component<P, S> {
-  constructor(props: P) {
-    super(props);
-    this.handleValidate = this.handleValidate.bind(this);
-    this.handleChange = this.handleChange.bind(this);
-    this.handleValidateKey = this.handleValidateKey.bind(this);
-    this.handleSave = this.handleSave.bind(this);
-    this.state = this.getDefaultState() as Readonly<S>;
-  }
+  state = this.getDefaultState();
 
   componentDidMount() {
-    this.handleValidateForm();
+    this.validateForm();
   }
 
   componentDidUpdate(_prevProps: Props, prevState: S) {
     if (!isEqual(prevState.values, this.state.values)) {
-      this.handleValidateForm();
+      this.validateForm();
     }
     if (
       !isEqual(prevState.errors, this.state.errors) &&
@@ -84,6 +77,17 @@ class DialogManager<
     this.setState({isFormValid});
   }
 
+  validateForm() {
+    const {values, requiredValues, errors} = this.state;
+
+    const isFormValid = requiredValues.every(
+      requiredValue =>
+        !!values[requiredValue].replace(/\s/g, '') && !errors[requiredValue]
+    );
+
+    this.setValidForm(isFormValid);
+  }
+
   clearError<F extends keyof Values>(field: F) {
     this.setState(prevState => ({
       errors: omit(prevState.errors, field),
@@ -109,7 +113,7 @@ class DialogManager<
     }
   }
 
-  handleChange<F extends keyof Values>(field: F, value: Values[F]) {
+  handleChange = <F extends keyof Values>(field: F, value: Values[F]) => {
     this.setState(prevState => ({
       values: {
         ...prevState.values,
@@ -117,9 +121,9 @@ class DialogManager<
       },
       errors: omit(prevState.errors, field),
     }));
-  }
+  };
 
-  async handleSave() {
+  handleSave = async () => {
     const {onSubmitSuccess, closeModal, orgSlug, api} = this.props;
 
     const trustedRelays = this.getData().trustedRelays.map(trustedRelay =>
@@ -136,46 +140,33 @@ class DialogManager<
     } catch (error) {
       this.convertErrorXhrResponse(handleXhrErrorResponse(error));
     }
-  }
-
-  handleValidateForm() {
-    const {values, requiredValues, errors} = this.state;
-
-    const isFormValid = requiredValues.every(
-      requiredValue =>
-        !!values[requiredValue].replace(/\s/g, '') && !errors[requiredValue]
-    );
+  };
 
-    this.setValidForm(isFormValid);
-  }
+  handleValidate = <F extends keyof Values>(field: F) => () => {
+    const isFieldValueEmpty = !this.state.values[field].replace(/\s/g, '');
 
-  handleValidate<F extends keyof Values>(field: F) {
-    return () => {
-      const isFieldValueEmpty = !this.state.values[field].replace(/\s/g, '');
+    const fieldErrorAlreadyExist = this.state.errors[field];
 
-      const fieldErrorAlreadyExist = this.state.errors[field];
-
-      if (isFieldValueEmpty && fieldErrorAlreadyExist) {
-        return;
-      }
+    if (isFieldValueEmpty && fieldErrorAlreadyExist) {
+      return;
+    }
 
-      if (isFieldValueEmpty && !fieldErrorAlreadyExist) {
-        this.setState(prevState => ({
-          errors: {
-            ...prevState.errors,
-            [field]: t('Field Required'),
-          },
-        }));
-        return;
-      }
+    if (isFieldValueEmpty && !fieldErrorAlreadyExist) {
+      this.setState(prevState => ({
+        errors: {
+          ...prevState.errors,
+          [field]: t('Field Required'),
+        },
+      }));
+      return;
+    }
 
-      if (!isFieldValueEmpty && fieldErrorAlreadyExist) {
-        this.clearError(field);
-      }
-    };
-  }
+    if (!isFieldValueEmpty && fieldErrorAlreadyExist) {
+      this.clearError(field);
+    }
+  };
 
-  handleValidateKey() {
+  handleValidateKey = () => {
     const {savedRelays} = this.props;
     const {values, errors} = this.state;
     const isKeyAlreadyTaken = savedRelays.find(
@@ -199,7 +190,7 @@ class DialogManager<
     }
 
     this.handleValidate('publicKey')();
-  }
+  };
 
   render() {
     const {values, errors, title, isFormValid, disables} = this.state;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRelays/relays.tsx b/src/sentry/static/sentry/app/views/settings/organizationRelays/relays.tsx
index 31f5063978..7d9b75418e 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationRelays/relays.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationRelays/relays.tsx
@@ -38,11 +38,6 @@ type State = AsyncComponent['state'] & {
 };
 
 class Relays extends AsyncComponent<Props, State> {
-  constructor(props: Props, context: AsyncComponent['context']) {
-    super(props, context);
-    this.handleOpenAddDialog = this.handleOpenAddDialog.bind(this);
-  }
-
   getDefaultState() {
     return {
       ...super.getDefaultState(),
@@ -54,59 +49,55 @@ class Relays extends AsyncComponent<Props, State> {
     this.setState({relays: trustedRelays});
   }
 
-  handleDelete(publicKey: Relay['publicKey']) {
-    return async () => {
-      const {relays} = this.state;
-
-      const trustedRelays = relays
-        .filter(relay => relay.publicKey !== publicKey)
-        .map(relay => omit(relay, ['created', 'lastModified']));
+  handleDelete = (publicKey: Relay['publicKey']) => async () => {
+    const {relays} = this.state;
 
-      try {
-        const response = await this.api.requestPromise(
-          `/organizations/${this.props.organization.slug}/`,
-          {
-            method: 'PUT',
-            data: {trustedRelays},
-          }
-        );
-        addSuccessMessage(t('Successfully deleted Relay public key'));
-        this.setRelays(response.trustedRelays);
-      } catch {
-        addErrorMessage(t('An unknown error occurred while deleting Relay public key'));
-      }
-    };
-  }
+    const trustedRelays = relays
+      .filter(relay => relay.publicKey !== publicKey)
+      .map(relay => omit(relay, ['created', 'lastModified']));
+
+    try {
+      const response = await this.api.requestPromise(
+        `/organizations/${this.props.organization.slug}/`,
+        {
+          method: 'PUT',
+          data: {trustedRelays},
+        }
+      );
+      addSuccessMessage(t('Successfully deleted Relay public key'));
+      this.setRelays(response.trustedRelays);
+    } catch {
+      addErrorMessage(t('An unknown error occurred while deleting Relay public key'));
+    }
+  };
 
   successfullySaved(response: Organization, successMessage: string) {
     addSuccessMessage(successMessage);
     this.setRelays(response.trustedRelays);
   }
 
-  handleOpenEditDialog(publicKey: Relay['publicKey']) {
-    return () => {
-      const editRelay = this.state.relays.find(relay => relay.publicKey === publicKey);
-
-      if (!editRelay) {
-        return;
-      }
-
-      openModal(modalProps => (
-        <Edit
-          {...modalProps}
-          savedRelays={this.state.relays}
-          api={this.api}
-          orgSlug={this.props.organization.slug}
-          relay={editRelay}
-          onSubmitSuccess={response => {
-            this.successfullySaved(response, t('Successfully updated Relay public key'));
-          }}
-        />
-      ));
-    };
-  }
+  handleOpenEditDialog = (publicKey: Relay['publicKey']) => () => {
+    const editRelay = this.state.relays.find(relay => relay.publicKey === publicKey);
+
+    if (!editRelay) {
+      return;
+    }
+
+    openModal(modalProps => (
+      <Edit
+        {...modalProps}
+        savedRelays={this.state.relays}
+        api={this.api}
+        orgSlug={this.props.organization.slug}
+        relay={editRelay}
+        onSubmitSuccess={response => {
+          this.successfullySaved(response, t('Successfully updated Relay public key'));
+        }}
+      />
+    ));
+  };
 
-  handleOpenAddDialog() {
+  handleOpenAddDialog = () => {
     openModal(modalProps => (
       <Add
         {...modalProps}
@@ -118,7 +109,7 @@ class Relays extends AsyncComponent<Props, State> {
         }}
       />
     ));
-  }
+  };
 
   renderBody() {
     const {relays} = this.state;
