commit 5fad96fd3c95233fcbccaa3d9f74d848786a5fff
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Sep 3 07:52:04 2019 -1000

    ref(ts): Refactor Incident Details: Related Issues to typescriâ€¦ (#14514)
    
    Just typescript things

diff --git a/src/sentry/static/sentry/app/views/incidents/details/relatedIssues/index.jsx b/src/sentry/static/sentry/app/views/incidents/details/relatedIssues/index.jsx
deleted file mode 100644
index 3abd54645a..0000000000
--- a/src/sentry/static/sentry/app/views/incidents/details/relatedIssues/index.jsx
+++ /dev/null
@@ -1,82 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from 'react-emotion';
-
-import {Panel, PanelBody, PanelItem} from 'app/components/panels';
-import {t} from 'app/locale';
-import EventOrGroupExtraDetails from 'app/components/eventOrGroupExtraDetails';
-import EventOrGroupHeader from 'app/components/eventOrGroupHeader';
-import Placeholder from 'app/components/placeholder';
-import SentryTypes from 'app/sentryTypes';
-import space from 'app/styles/space';
-import withApi from 'app/utils/withApi';
-import withOrganization from 'app/utils/withOrganization';
-
-import IssuesFetcher from './issuesFetcher';
-import SideHeader from '../sideHeader';
-
-const RelatedIssues = styled(
-  class RelatedIssues extends React.Component {
-    static propTypes = {
-      api: PropTypes.object.isRequired,
-      params: PropTypes.object.isRequired,
-      incident: SentryTypes.Incident,
-      loading: PropTypes.bool,
-    };
-
-    render() {
-      const {className, api, params, incident} = this.props;
-
-      return (
-        <div className={className}>
-          <IssuesFetcher api={api} issueIds={incident && incident.groups}>
-            {({issues, loading}) => {
-              // If loading is finished, and there are no issues, do not display anything
-              if (!loading && issues && issues.length === 0) {
-                return null;
-              }
-
-              return (
-                <React.Fragment>
-                  <SideHeader loading={loading}>
-                    {t('Related Issues')} ({loading || !issues ? '-' : issues.length})
-                  </SideHeader>
-                  {loading ? (
-                    <Placeholder height="60px" bottomGutter={1} />
-                  ) : (
-                    issues &&
-                    issues.length > 0 && (
-                      <Panel>
-                        <PanelBody>
-                          {issues.map(issue => (
-                            <RelatedItem p={1} key={issue.id}>
-                              <EventOrGroupHeader
-                                params={params}
-                                size="small"
-                                hideLevel
-                                data={issue}
-                              />
-                              <EventOrGroupExtraDetails params={params} {...issue} />
-                            </RelatedItem>
-                          ))}
-                        </PanelBody>
-                      </Panel>
-                    )
-                  )}
-                </React.Fragment>
-              );
-            }}
-          </IssuesFetcher>
-        </div>
-      );
-    }
-  }
-)`
-  margin-top: ${space(1)};
-`;
-
-export default withOrganization(withApi(RelatedIssues));
-
-const RelatedItem = styled(PanelItem)`
-  flex-direction: column;
-`;
diff --git a/src/sentry/static/sentry/app/views/incidents/details/relatedIssues/index.tsx b/src/sentry/static/sentry/app/views/incidents/details/relatedIssues/index.tsx
new file mode 100644
index 0000000000..36a17804db
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/incidents/details/relatedIssues/index.tsx
@@ -0,0 +1,83 @@
+import {Params} from 'react-router/lib/Router';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {Client} from 'app/api';
+import {Panel, PanelBody, PanelItem} from 'app/components/panels';
+import {t} from 'app/locale';
+import EventOrGroupExtraDetails from 'app/components/eventOrGroupExtraDetails';
+import EventOrGroupHeader from 'app/components/eventOrGroupHeader';
+import Placeholder from 'app/components/placeholder';
+import space from 'app/styles/space';
+import withApi from 'app/utils/withApi';
+import withOrganization from 'app/utils/withOrganization';
+
+import IssuesFetcher from './issuesFetcher';
+import SideHeader from '../sideHeader';
+import {Incident} from '../../types';
+
+type Props = {
+  api: Client;
+  className?: string;
+  incident?: Incident;
+  params: Params;
+};
+
+class RelatedIssues extends React.Component<Props> {
+  render() {
+    const {className, api, params, incident} = this.props;
+
+    return (
+      <div className={className}>
+        <IssuesFetcher api={api} issueIds={incident && incident.groups}>
+          {({issues, loading}) => {
+            // If loading is finished, and there are no issues, do not display anything
+            if (!loading && issues && issues.length === 0) {
+              return null;
+            }
+
+            return (
+              <React.Fragment>
+                <SideHeader loading={loading}>
+                  {t('Related Issues')} ({loading || !issues ? '-' : issues.length})
+                </SideHeader>
+                {loading ? (
+                  <Placeholder height="60px" bottomGutter={1} />
+                ) : (
+                  issues &&
+                  issues.length > 0 && (
+                    <Panel>
+                      <PanelBody>
+                        {issues.map(issue => (
+                          <RelatedItem p={1} key={issue.id}>
+                            <EventOrGroupHeader
+                              params={params}
+                              size="small"
+                              hideLevel
+                              data={issue}
+                            />
+                            <EventOrGroupExtraDetails params={params} {...issue} />
+                          </RelatedItem>
+                        ))}
+                      </PanelBody>
+                    </Panel>
+                  )
+                )}
+              </React.Fragment>
+            );
+          }}
+        </IssuesFetcher>
+      </div>
+    );
+  }
+}
+
+const StyledRelatedIssues = styled(RelatedIssues)`
+  margin-top: ${space(1)};
+`;
+
+export default withOrganization(withApi(StyledRelatedIssues));
+
+const RelatedItem = styled(PanelItem)`
+  flex-direction: column;
+`;
diff --git a/src/sentry/static/sentry/app/views/incidents/details/relatedIssues/issuesFetcher.jsx b/src/sentry/static/sentry/app/views/incidents/details/relatedIssues/issuesFetcher.tsx
similarity index 63%
rename from src/sentry/static/sentry/app/views/incidents/details/relatedIssues/issuesFetcher.jsx
rename to src/sentry/static/sentry/app/views/incidents/details/relatedIssues/issuesFetcher.tsx
index 2fe03c7acf..5e3c67db47 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/relatedIssues/issuesFetcher.jsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/relatedIssues/issuesFetcher.tsx
@@ -1,13 +1,22 @@
-import PropTypes from 'prop-types';
+import {Client} from 'app/api';
+import {Group} from 'app/types';
 import React from 'react';
 
-class IssuesFetcher extends React.PureComponent {
-  static propTypes = {
-    api: PropTypes.object,
-    issueIds: PropTypes.arrayOf(PropTypes.string),
-  };
+type State = {
+  loading: boolean;
+  issues: null | Group[];
+  error: null | Error;
+};
+
+type Props = {
+  api: Client;
+  // If issueIds is not defined, then we are in loading state
+  issueIds?: string[];
+  children: (renderProps: State) => React.ReactNode;
+};
 
-  state = {
+class IssuesFetcher extends React.PureComponent<Props, State> {
+  state: State = {
     loading: true,
     issues: null,
     error: null,
@@ -17,7 +26,7 @@ class IssuesFetcher extends React.PureComponent {
     this.fetchData();
   }
 
-  componentDidUpdate(prevProps) {
+  componentDidUpdate(prevProps: Props) {
     if (prevProps.issueIds !== this.props.issueIds) {
       this.fetchData();
     }
@@ -26,12 +35,12 @@ class IssuesFetcher extends React.PureComponent {
   fetchData = async () => {
     const {api, issueIds} = this.props;
 
+    this.setState({loading: true});
+
     if (!issueIds) {
       return;
     }
 
-    this.setState({loading: true});
-
     try {
       const issues = await Promise.all(
         issueIds.map(issueId => findIssueById(api, issueId))
@@ -51,7 +60,7 @@ class IssuesFetcher extends React.PureComponent {
   }
 }
 
-function findIssueById(api, issueId) {
+function findIssueById(api: Client, issueId: string) {
   return api.requestPromise(`/issues/${issueId}/`);
 }
 
diff --git a/src/sentry/static/sentry/app/views/incidents/types.ts b/src/sentry/static/sentry/app/views/incidents/types.ts
index 945e901d14..49e728c81b 100644
--- a/src/sentry/static/sentry/app/views/incidents/types.ts
+++ b/src/sentry/static/sentry/app/views/incidents/types.ts
@@ -1,4 +1,4 @@
-import {User, Group, Repository} from 'app/types';
+import {User, Repository} from 'app/types';
 import {IncidentActivityType} from './utils';
 
 type Data = [number, {count: number}[]][];
@@ -14,7 +14,7 @@ export type Incident = {
   id: string;
   identifier: string;
   isSubscribed: boolean;
-  groups: Group[];
+  groups: string[]; // Array of group ids
   query: string;
   organizationId: string;
   projects: number[];
