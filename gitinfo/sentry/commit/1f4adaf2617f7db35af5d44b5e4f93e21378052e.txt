commit 1f4adaf2617f7db35af5d44b5e4f93e21378052e
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Fri Jan 4 17:10:02 2019 +0100

    fix: Only return dsn if it's a valid dsn (#11355)
    
    * fix: Only render dsn if it's a valid dsn
    
    * fix: Tests (use created project)
    
    * fix: Remove regex, check for scheme and domain

diff --git a/src/sentry/models/projectkey.py b/src/sentry/models/projectkey.py
index d47e17c2a6..6dd06a30e0 100644
--- a/src/sentry/models/projectkey.py
+++ b/src/sentry/models/projectkey.py
@@ -153,6 +153,10 @@ class ProjectKey(Model):
         else:
             urlparts = urlparse(options.get('system.url-prefix'))
 
+        # If we do not have a scheme or domain/hostname, dsn is never valid
+        if not urlparts.netloc or not urlparts.scheme:
+            return ''
+
         return '%s://%s@%s/%s' % (
             urlparts.scheme, key, urlparts.netloc + urlparts.path, self.project_id,
         )
diff --git a/src/sentry/templatetags/sentry_dsn.py b/src/sentry/templatetags/sentry_dsn.py
index 05ab13d198..a1e7d6a1db 100644
--- a/src/sentry/templatetags/sentry_dsn.py
+++ b/src/sentry/templatetags/sentry_dsn.py
@@ -20,8 +20,7 @@ def _get_project_key(project_id):
         return None
 
 
-@register.simple_tag
-def public_dsn():
+def get_public_dsn():
     project_id = settings.SENTRY_FRONTEND_PROJECT or settings.SENTRY_PROJECT
     cache_key = 'dsn:%s' % (project_id, )
 
@@ -34,3 +33,8 @@ def public_dsn():
             result = ''
         default_cache.set(cache_key, result, 60)
     return result
+
+
+@register.simple_tag
+def public_dsn():
+    return get_public_dsn()
diff --git a/src/sentry/templatetags/sentry_react.py b/src/sentry/templatetags/sentry_react.py
index 09aaf23eb1..f03148382e 100644
--- a/src/sentry/templatetags/sentry_react.py
+++ b/src/sentry/templatetags/sentry_react.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-import logging
 import sentry
 
 from django import template
@@ -12,12 +11,12 @@ from pkg_resources import parse_version
 from sentry import features, options
 from sentry.api.serializers.base import serialize
 from sentry.api.serializers.models.user import DetailedUserSerializer
-from sentry.models import ProjectKey
 from sentry.utils import auth, json
 from sentry.utils.email import is_smtp_enabled
 from sentry.utils.assets import get_asset_url
 from sentry.utils.functional import extract_lazy_object
 from sentry.utils.support import get_support_mail
+from sentry.templatetags.sentry_dsn import get_public_dsn
 
 register = template.Library()
 
@@ -61,17 +60,6 @@ def _needs_upgrade():
     return False
 
 
-def _get_public_dsn():
-    try:
-        projectkey = ProjectKey.objects.filter(
-            project=settings.SENTRY_FRONTEND_PROJECT or settings.SENTRY_PROJECT,
-        )[0]
-    except Exception:
-        logging.exception('Unable to fetch ProjectKey for internal project')
-        return
-    return projectkey.dsn_public
-
-
 def _get_statuspage():
     id = settings.STATUS_PAGE_ID
     if id is None:
@@ -120,7 +108,7 @@ def get_react_config(context):
         'features': enabled_features,
         'mediaUrl': get_asset_url('sentry', ''),
         'needsUpgrade': needs_upgrade,
-        'dsn': _get_public_dsn(),
+        'dsn': get_public_dsn(),
         'statuspage': _get_statuspage(),
         'messages': [{
             'message': msg.message,
diff --git a/tests/sentry/templatetags/test_sentry_dsn.py b/tests/sentry/templatetags/test_sentry_dsn.py
new file mode 100644
index 0000000000..3be8a3ebf8
--- /dev/null
+++ b/tests/sentry/templatetags/test_sentry_dsn.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import
+
+from django.conf import settings
+from django.template import Context, Template
+
+from sentry.models import ProjectKey
+from sentry.testutils import TestCase
+
+
+class DsnTest(TestCase):
+    TEMPLATE = Template("{% load sentry_dsn %}{% public_dsn %}")
+
+    def test_valid_dsn(self):
+        project = self.create_project()
+        with self.settings(SENTRY_PROJECT=project.id):
+            key = ProjectKey.objects.get_or_create(project=project)[0]
+            result = self.TEMPLATE.render(Context())
+
+            assert key.dsn_public in result
+            assert len(result) > 0
+
+    def test_no_system_url(self):
+        project = self.create_project()
+
+        new_options = settings.SENTRY_OPTIONS.copy()
+        new_options['system.url-prefix'] = ''
+
+        with self.settings(SENTRY_PROJECT=project.id, SENTRY_OPTIONS=new_options):
+            result = self.TEMPLATE.render(Context())
+
+            assert not result
+            assert len(result) == 0
