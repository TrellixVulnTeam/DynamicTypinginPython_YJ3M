commit 1726b5a877f91b8f14b73604c298b479b9a97c9c
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Aug 28 00:36:45 2013 -0700

    Automatically set User.ip_address from client-side events if not present

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 5b0ed46762..99bd1bf8c5 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -376,5 +376,15 @@ def validate_data(project, data, client=None):
     return data
 
 
+def ensure_has_ip(data, ip_address):
+    if data.get('sentry.interfaces.Http', {}).get('env', {}).get('REMOTE_ADDR'):
+        return
+
+    if data.get('sentry.interfaces.User', {}).get('ip_address'):
+        return
+
+    data.setdefault('sentry.interfaces.User', {})['ip_address'] = ip_address
+
+
 def insert_data_to_database(data):
     preprocess_event.delay(data=data)
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 1c42a777c6..cd744ad598 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -28,7 +28,7 @@ from sentry.constants import (
 from sentry.coreapi import (
     project_from_auth_vars, decode_and_decompress_data,
     safely_load_json_string, validate_data, insert_data_to_database, APIError,
-    APIForbidden, APIRateLimited, extract_auth_vars)
+    APIForbidden, APIRateLimited, extract_auth_vars, ensure_has_ip)
 from sentry.exceptions import InvalidData
 from sentry.models import (
     Group, GroupBookmark, Project, ProjectCountByMinute, TagValue, Activity,
@@ -69,11 +69,12 @@ def api(func):
 
 
 class Auth(object):
-    def __init__(self, auth_vars):
+    def __init__(self, auth_vars, is_public=False):
         self.client = auth_vars.get('sentry_client')
         self.version = int(float(auth_vars.get('sentry_version')))
         self.secret_key = auth_vars.get('sentry_secret')
         self.public_key = auth_vars.get('sentry_key')
+        self.is_public = is_public
 
 
 class APIView(BaseView):
@@ -194,7 +195,7 @@ class APIView(BaseView):
             elif project_ != project:
                 return HttpResponse('Project ID mismatch', content_type='text/plain', status=400)
 
-            auth = Auth(auth_vars)
+            auth = Auth(auth_vars, is_public=bool(origin))
 
             if auth.version >= 3:
                 # Version 3 enforces secret key for server side requests
@@ -293,6 +294,10 @@ class StoreView(APIView):
         # mutates data
         Group.objects.normalize_event_data(data)
 
+        # insert IP address if not available
+        if auth.is_public:
+            ensure_has_ip(data, request.META['REMOTE_ADDR'])
+
         event_id = data['event_id']
 
         # mutates data (strips a lot of context if not queued)
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 4f43a7371b..fdc85b81e9 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -8,7 +8,7 @@ import mock
 from sentry.models import Project, User
 from sentry.exceptions import InvalidTimestamp
 from sentry.coreapi import (
-    extract_auth_vars, project_from_auth_vars, APIForbidden,
+    extract_auth_vars, project_from_auth_vars, APIForbidden, ensure_has_ip,
     process_data_timestamp, validate_data, INTERFACE_ALIASES, get_interface)
 from sentry.testutils import TestCase
 
@@ -274,3 +274,43 @@ class GetInterfaceTest(TestCase):
         from sentry.interfaces import Http
         result = get_interface('sentry.interfaces.Http')
         assert result is Http
+
+
+class EnsureHasIpTest(TestCase):
+    def test_with_remote_addr(self):
+        inp = {
+            'sentry.interfaces.Http': {
+                'env': {
+                    'REMOTE_ADDR': '192.168.0.1',
+                },
+            },
+        }
+        out = inp.copy()
+        ensure_has_ip(out, '127.0.0.1')
+        assert inp == out
+
+    def test_with_user_ip(self):
+        inp = {
+            'sentry.interfaces.User': {
+                'ip_address': '192.168.0.1',
+            },
+        }
+        out = inp.copy()
+        ensure_has_ip(out, '127.0.0.1')
+        assert inp == out
+
+    def test_without_ip_values(self):
+        out = {
+            'sentry.interfaces.User': {
+            },
+            'sentry.interfaces.Http': {
+                'env': {},
+            },
+        }
+        ensure_has_ip(out, '127.0.0.1')
+        assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
+
+    def test_without_any_values(self):
+        out = {}
+        ensure_has_ip(out, '127.0.0.1')
+        assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
