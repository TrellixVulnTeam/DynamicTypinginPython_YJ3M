commit d230cfb98e8affe1ffc6ac35d2df37bc02e9efa2
Author: David Cramer <dcramer@gmail.com>
Date:   Fri May 29 16:07:24 2015 +0200

    Various fixes based on new React specs

diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index acab55342c..312e1f6c44 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -91,14 +91,14 @@ class Client {
   _chain() {
     var funcs = [];
     for (var i = 0; i < arguments.length; i++) {
-      if (typeof arguments[i] !== "undefined") {
+      if (typeof arguments[i] !== "undefined" && arguments[i]) {
         funcs.push(arguments[i]);
       }
     }
 
     return () => {
       funcs.forEach((func) => {
-        funcs[i].apply(this, arguments);
+        func.apply(this, arguments);
       });
     };
   }
diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index 23ff51e4c5..f31fb665bf 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -10,7 +10,7 @@ var DropdownLink = require("./dropdownLink");
 var MenuItem = require("./menuItem");
 var PropTypes = require("../proptypes");
 var LoadingIndicator = require("../components/loadingIndicator");
-var utils = require("../utils");
+var {compareArrays} = require("../utils");
 
 var AssigneeSelector = React.createClass({
   mixins: [Reflux.ListenerMixin],
@@ -61,19 +61,29 @@ var AssigneeSelector = React.createClass({
   },
 
   shouldComponentUpdate(nextProps, nextState) {
-    if (!utils.objectMatchesSubset(nextProps.group.assignedTo, this.props.group.assignedTo)) {
+    if (nextProps.group.assignedTo !== this.props.group.assignedTo) {
       return true;
     }
-    if (nextState.filterQuery !== this.state.filterQuery) {
+    if (!nextProps.group.assignedTo && this.props.group.assignedTo) {
       return true;
     }
-    if (nextState.loading !== this.state.loading) {
+    if (nextProps.group.assignedTo && this.props.group.assignedTo) {
+      if (nextProps.group.assignedTo.email !== this.props.group.assignedTo) {
+        return true;
+      }
+    } else if (!nextProps.group.assignedTo || !this.props.group.assignedTo) {
       return true;
     }
-    if (!utils.arrayIsEqual(this.props.memberList, nextProps.memberList)) {
+    if (nextState.filterQuery !== this.state.filterQuery) {
       return true;
     }
-    return false;
+    if (nextState.loading !== this.state.loading) {
+      return true;
+    }
+    var memberListEqual = compareArrays(this.props.memberList, nextProps.memberList, (obj, other) => {
+      return obj.email === other.email;
+    });
+    return !memberListEqual;
   },
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/barChart.jsx b/src/sentry/static/sentry/app/components/barChart.jsx
index 6c4b849061..251283d74d 100644
--- a/src/sentry/static/sentry/app/components/barChart.jsx
+++ b/src/sentry/static/sentry/app/components/barChart.jsx
@@ -3,6 +3,7 @@ var moment = require("moment");
 var React = require("react");
 
 var TooltipTrigger = require("./TooltipTrigger");
+var {compareArrays} = require("../utils");
 
 var BarChart = React.createClass({
   propTypes: {
@@ -72,21 +73,10 @@ var BarChart = React.createClass({
   shouldComponentUpdate(nextProps, nextState) {
     var curPoints = this.props.points || [];
     var nextPoints = nextProps.points || [];
-    for (var i = 0; i < Math.max(curPoints.length, nextPoints.length); i++) {
-      if (!curPoints[i]) {
-        return true;
-      }
-      if (!nextPoints[i]) {
-        return true;
-      }
-      if (curPoints[i].x !== nextPoints[i].x) {
-        return true;
-      }
-      if (curPoints[i].y !== nextPoints[i].y) {
-        return true;
-      }
-    }
-    return false;
+    var equal = compareArrays(this.props.points, nextProps.points, (obj, other) => {
+      return (obj.x === other.x && obj.y === other.y);
+    });
+    return !equal;
   },
 
   render(){
diff --git a/src/sentry/static/sentry/app/components/count.jsx b/src/sentry/static/sentry/app/components/count.jsx
index 4c475427fc..282898c26a 100644
--- a/src/sentry/static/sentry/app/components/count.jsx
+++ b/src/sentry/static/sentry/app/components/count.jsx
@@ -12,12 +12,12 @@ var Count = React.createClass({
       [1000, 'k']
   ],
 
-  floatFormat: function(number, places) {
+  floatFormat(number, places) {
       var multi = Math.pow(10, places);
       return parseInt(number * multi, 10) / multi;
   },
 
-  formatNumber: function(number){
+  formatNumber(number){
       var b, x, y, o, p;
 
       number = parseInt(number, 10);
@@ -36,7 +36,11 @@ var Count = React.createClass({
       return '' + number;
   },
 
-  render: function() {
+  shouldComponentUpdate(nextProps, nextState) {
+    return this.props.value !== nextProps.value;
+  },
+
+  render() {
     return (
       <span>{this.formatNumber(this.props.value)}</span>
     );
diff --git a/src/sentry/static/sentry/app/components/timeSince.jsx b/src/sentry/static/sentry/app/components/timeSince.jsx
index ab8fa93902..2cb83993c8 100644
--- a/src/sentry/static/sentry/app/components/timeSince.jsx
+++ b/src/sentry/static/sentry/app/components/timeSince.jsx
@@ -25,6 +25,10 @@ var TimeSince = React.createClass({
     this.forceUpdate();
   },
 
+  shouldComponentUpdate(nextProps, nextState) {
+    return this.props.date !== nextProps.date;
+  },
+
   render() {
     var date = this.props.date;
 
diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index dae8313c98..8382128012 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -15,7 +15,7 @@ var ERR_UPDATE = 'Unable to update events. Please try again.';
 var OK_SCHEDULE_DELETE = 'The selected events have been scheduled for deletion.';
 var OK_SCHEDULE_MERGE = 'The selected events have been scheduled for merge.';
 
-var GroupListStore = Reflux.createStore({
+var GroupStore = Reflux.createStore({
   init() {
     this.items = [];
     this.statuses = {};
@@ -56,7 +56,7 @@ var GroupListStore = Reflux.createStore({
 
     for (var i = 0, item; (item = this.items[i]); i++) {
       if (itemsById[item.id]) {
-        jQuery.extend(true, this.items[i], itemsById[item.id]);
+        this.items[i] = jQuery.extend(true, {}, this.items[i], itemsById[item.id]);
         delete itemsById[item.id];
       }
     }
@@ -122,10 +122,10 @@ var GroupListStore = Reflux.createStore({
         var rItem = this.items[i];
         if (pendingForId.length) {
           // copy the object so dirty state doesnt mutate original
-          rItem = $.extend(true, {}, rItem);
+          rItem = jQuery.extend(true, {}, rItem);
 
           for (var c = 0; c < pendingForId.length; c++) {
-            rItem = $.extend(true, rItem, pendingForId[c].params);
+            rItem = jQuery.extend(true, rItem, pendingForId[c].params);
           }
         }
         return rItem;
@@ -151,9 +151,9 @@ var GroupListStore = Reflux.createStore({
       var rItem = item;
       if (typeof pendingById[item.id] !== 'undefined') {
         // copy the object so dirty state doesnt mutate original
-        rItem = $.extend(true, {}, rItem);
+        rItem = jQuery.extend(true, {}, rItem);
         pendingById[item.id].forEach(change => {
-          rItem = $.extend(true, rItem, change.params);
+          rItem = jQuery.extend(true, rItem, change.params);
         });
       }
       return rItem;
@@ -254,8 +254,9 @@ var GroupListStore = Reflux.createStore({
       itemIds = this.items.map(item => item.id);
     }
     this.items.forEach(item => {
-      if (itemIds.indexOf(item.id) !== -1) {
-        $.extend(true, item, response);
+      var idx = itemIds.indexOf(item.id);
+      if (idx !== -1) {
+        this.items[idx] = jQuery.extend(true, {}, item, response);
         this.clearStatus(item.id, 'update');
       }
     });
@@ -264,4 +265,4 @@ var GroupListStore = Reflux.createStore({
   }
 });
 
-module.exports = GroupListStore;
+module.exports = GroupStore;
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index b9c185fd36..9aebd076d8 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -1,6 +1,24 @@
 /*** @jsx React.DOM */
 
-var instanceListMatches = function(arr1, arr2) {
+var modelCompare = function(obj1, obj2) {
+  return obj1.id === obj2.id;
+};
+
+var compareArrays = function(arr1, arr2, compFunc) {
+  if (arr1 === arr2) {
+    return true;
+  }
+  if (!arr1) {
+    arr1 = [];
+  }
+  if (!arr2) {
+    arr2 = [];
+  }
+
+  if (arr1.length != arr2.length) {
+    return true;
+  }
+
   for (var i = 0; i < Math.max(arr1.length, arr2.length); i++) {
     if (!arr1[i]) {
       return true;
@@ -8,13 +26,13 @@ var instanceListMatches = function(arr1, arr2) {
     if (!arr2[i]) {
       return true;
     }
-    if (arr1[i].id != arr2[i].id) {
+    if (!compFunc(arr1[i], arr2[i])) {
       return true;
     }
   }
+  return false;
 };
 
-
 var objectMatchesSubset = function(obj, other, deep){
   var k;
 
@@ -145,7 +163,7 @@ module.exports = {
 
   arrayIsEqual: arrayIsEqual,
   objectMatchesSubset: objectMatchesSubset,
-  instanceListMatches: instanceListMatches,
+  compareArrays: compareArrays,
   parseLinkHeader: require('./utils/parseLinkHeader'),
 
   Collection: require('./utils/collection'),
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 7ce0888e79..b44b28df5f 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -52,10 +52,10 @@ var Stream = React.createClass({
     if (curState.groupList.length != nextState.groupList.length) {
       return true;
     }
-    if (!utils.instanceListMatches(curState.groupList, nextState.groupList)) {
-      return true;
-    }
-    return false;
+    var equal = utils.compareArrays(curState.groupList, nextState.groupList, (obj, other) => {
+      return obj.id === other.id;
+    });
+    return !equal;
   },
 
   componentWillMount() {
@@ -170,7 +170,7 @@ var Stream = React.createClass({
     var groupNodes = this.state.groupList.map((node) => {
       return <StreamGroup
           key={node.id}
-          data={node}
+          id={node.id}
           memberList={this.props.memberList}
           statsPeriod={this.state.statsPeriod} />;
     });
diff --git a/src/sentry/static/sentry/app/views/stream/group.jsx b/src/sentry/static/sentry/app/views/stream/group.jsx
index 6a92357366..c077ca0fea 100644
--- a/src/sentry/static/sentry/app/views/stream/group.jsx
+++ b/src/sentry/static/sentry/app/views/stream/group.jsx
@@ -1,4 +1,5 @@
 /*** @jsx React.DOM */
+var jQuery = require("jquery");
 var React = require("react");
 var Reflux = require("reflux");
 var Router = require("react-router");
@@ -6,9 +7,10 @@ var Router = require("react-router");
 var AssigneeSelector = require("../../components/assigneeSelector");
 var BarChart = require("../../components/barChart");
 var Count = require("../../components/count");
+var GroupStore = require("../../stores/groupStore");
 var SelectedGroupStore = require("../../stores/selectedGroupStore");
 var TimeSince = require("../../components/timeSince");
-var utils = require("../../utils");
+var {compareArrays, objectMatchesSubset} = require("../../utils");
 
 var StreamGroup = React.createClass({
   contextTypes: {
@@ -20,9 +22,7 @@ var StreamGroup = React.createClass({
   ],
 
   propTypes: {
-    data: React.PropTypes.shape({
-      id: React.PropTypes.string.isRequired
-    }).isRequired,
+    id: React.PropTypes.string.isRequired,
     memberList: React.PropTypes.instanceOf(Array).isRequired,
     statsPeriod: React.PropTypes.string.isRequired,
   },
@@ -30,9 +30,22 @@ var StreamGroup = React.createClass({
   getInitialState() {
     return {
       isSelected: false,
+      data: null
     };
   },
 
+  componentWillMount() {
+    this.setState({
+      data: GroupStore.getItem(this.props.id)
+    });
+  },
+
+  componentWillReceiveProps(nextProps) {
+    this.setState({
+      data: GroupStore.getItem(this.props.id)
+    });
+  },
+
   shouldComponentUpdate(nextProps, nextState) {
     if (nextProps.statsPeriod !== this.props.statsPeriod) {
       return true;
@@ -40,17 +53,17 @@ var StreamGroup = React.createClass({
     if (nextState.isSelected !== this.state.isSelected) {
       return true;
     }
-    if (!utils.objectMatchesSubset(this.props.data, nextProps.data, true)) {
-      return true;
-    }
-    if (!utils.arrayIsEqual(this.props.memberList, nextProps.data)) {
+    if (!objectMatchesSubset(this.state.data, nextState.data, true)) {
       return true;
     }
-    return false;
+    var memberListEqual = compareArrays(this.props.memberList, nextProps.memberList, (obj, other) => {
+      return obj.email === other.email;
+    });
+    return !memberListEqual;
   },
 
   onSelectedGroupChange() {
-    var id = this.props.data.id;
+    var id = this.state.data.id;
     var isSelected = SelectedGroupStore.isSelected(id);
     if (isSelected !== this.state.isSelected) {
       this.setState({
@@ -60,14 +73,14 @@ var StreamGroup = React.createClass({
   },
 
   onSelect() {
-    var id = this.props.data.id;
+    var id = this.state.data.id;
     SelectedGroupStore.toggleSelect(id);
   },
 
   render() {
     var router = this.context.router;
     var params = router.getCurrentParams();
-    var data = this.props.data;
+    var data = this.state.data;
     var userCount = 0;
     var points;
 
