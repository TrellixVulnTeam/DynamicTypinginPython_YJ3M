commit ea00e831952b8574f0a3f780af76abf05af42ea0
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Jul 6 10:28:43 2018 -0700

    feat(discover): Prevent invalid queries (#8915)
    
    Try to prevent invalid queries by removing any invalid conditions and aggregations before fetching query
    
    This will most likely be an empty condition or aggregation as they are also being validated on input

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
index f239fcaffa..cc8c2d149d 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
@@ -1,3 +1,40 @@
+/**
+ * Returns true if an aggregation is valid and false if not
+ *
+ * @param {Array} aggregation Aggregation in external Snuba format
+ * @param {Object} cols List of column objects
+ * @param {String} cols.name Column name
+ * @param {String} cols.type Type of column
+ * @returns {Boolean} True if valid aggregatoin, false if not
+ */
+export function isValidAggregation(aggregation, cols) {
+  const columns = new Set(cols.map(({name}) => name));
+  const topKRegex = /topK\((\d+)\)/;
+
+  const [func, col] = aggregation;
+
+  if (!func) {
+    return false;
+  }
+
+  if (func === 'count()') {
+    return col === null;
+  }
+
+  if (func === 'uniq' || func.match(topKRegex)) {
+    return columns.has(col);
+  }
+
+  if (func === 'avg') {
+    const validCols = new Set(
+      cols.filter(({type}) => type === 'number').map(({name}) => name)
+    );
+    return validCols.has(col);
+  }
+
+  return false;
+}
+
 /**
 * Converts aggregation from external Snuba format to internal format for dropdown
 *
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index 651f334427..d14d71a2a0 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -18,6 +18,9 @@ import Aggregations from './aggregations';
 import Conditions from './conditions';
 import Result from './result';
 
+import {isValidCondition} from './conditions/utils';
+import {isValidAggregation} from './aggregations/utils';
+
 export default class OrganizationDiscover extends React.Component {
   static propTypes = {
     organization: SentryTypes.Organization,
@@ -37,6 +40,25 @@ export default class OrganizationDiscover extends React.Component {
   };
 
   runQuery = () => {
+    const {queryBuilder} = this.props;
+    // Strip any invalid conditions and aggregations
+    const {conditions, aggregations} = queryBuilder.getInternal();
+    const filteredConditions = conditions.filter(condition =>
+      isValidCondition(condition, queryBuilder.getColumns())
+    );
+
+    const filteredAggregations = aggregations.filter(aggregation =>
+      isValidAggregation(aggregation, queryBuilder.getColumns())
+    );
+
+    if (filteredConditions.length !== conditions.length) {
+      this.updateField('conditions', filteredConditions);
+    }
+
+    if (filteredAggregations.length !== aggregations.length) {
+      this.updateField('aggregations', filteredAggregations);
+    }
+
     this.props.queryBuilder.fetch().then(
       result => this.setState({result}),
       () => {
diff --git a/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
index edd48ace4d..d4a309441e 100644
--- a/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
@@ -1,8 +1,11 @@
 import {
   getInternal,
   getExternal,
+  isValidAggregation,
 } from 'app/views/organizationDiscover/aggregations/utils';
 
+import {COLUMNS} from 'app/views/organizationDiscover/data';
+
 const aggregationList = [
   {
     internal: 'count',
@@ -36,4 +39,38 @@ describe('Aggregations', function() {
       });
     });
   });
+
+  describe('isValidAggregation()', function() {
+    it('validates count', function() {
+      expect(isValidAggregation(['count()', null, 'count'], COLUMNS)).toEqual(true);
+      expect(isValidAggregation(['count', null, 'count'], COLUMNS)).toEqual(false);
+      expect(isValidAggregation(['count()', 'email', 'count'], COLUMNS)).toEqual(false);
+    });
+
+    it('validates topK', function() {
+      expect(isValidAggregation(['topK(5)', 'email', 'topK_5_email'], COLUMNS)).toEqual(
+        true
+      );
+      expect(isValidAggregation(['topK()', 'email', 'topK_5_email'], COLUMNS)).toEqual(
+        false
+      );
+      expect(isValidAggregation(['topK(5)', null, 'topK_5_email'], COLUMNS)).toEqual(
+        false
+      );
+    });
+
+    it('validates uniq', function() {
+      expect(isValidAggregation(['uniq', 'email', 'uniq_email'], COLUMNS)).toEqual(true);
+
+      expect(isValidAggregation(['uniq', 'mail', 'uniq_mail'], COLUMNS)).toEqual(false);
+    });
+
+    it('validates avg', function() {
+      expect(
+        isValidAggregation(['avg', 'device_battery_level', 'avg_email'], COLUMNS)
+      ).toEqual(true);
+
+      expect(isValidAggregation(['avg', 'email', 'avg_email'], COLUMNS)).toEqual(false);
+    });
+  });
 });
