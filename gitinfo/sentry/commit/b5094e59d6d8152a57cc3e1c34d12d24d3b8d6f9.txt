commit b5094e59d6d8152a57cc3e1c34d12d24d3b8d6f9
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Nov 28 13:05:36 2015 -0800

    Update API names to reflect product changes
    
    This is a first pass at some initial naming changes to ensure the API reflects how we now think of datatypes in Sentry
    
    - Groups => Issues
    - Notes => Comments

diff --git a/src/sentry/api/bases/__init__.py b/src/sentry/api/bases/__init__.py
index c3961685ab..666352d928 100644
--- a/src/sentry/api/bases/__init__.py
+++ b/src/sentry/api/bases/__init__.py
@@ -1 +1,6 @@
 from __future__ import absolute_import
+
+from .group import *  # NOQA
+from .organization import *  # NOQA
+from .project import *  # NOQA
+from .team import *  # NOQA
diff --git a/src/sentry/api/bases/group.py b/src/sentry/api/bases/group.py
index 3f19726e71..c5de983ae3 100644
--- a/src/sentry/api/bases/group.py
+++ b/src/sentry/api/bases/group.py
@@ -22,10 +22,10 @@ class GroupPermission(ProjectPermission):
 class GroupEndpoint(Endpoint):
     permission_classes = (GroupPermission,)
 
-    def convert_args(self, request, group_id, *args, **kwargs):
+    def convert_args(self, request, issue_id, *args, **kwargs):
         try:
             group = Group.objects.select_related('project').get(
-                id=group_id,
+                id=issue_id,
             )
         except Group.DoesNotExist:
             raise ResourceDoesNotExist
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 71f27cd2cb..fbd028c2b7 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -7,7 +7,7 @@ from rest_framework.response import Response
 
 from sentry.app import tsdb
 from sentry.api.base import DocSection
-from sentry.api.bases.group import GroupEndpoint
+from sentry.api.bases import GroupEndpoint
 from sentry.api.fields import UserField
 from sentry.api.serializers import serialize
 from sentry.db.models.query import create_or_update
@@ -26,7 +26,7 @@ def retrieve_aggregate_scenario(runner):
     group = Group.objects.filter(project=runner.default_project).first()
     runner.request(
         method='GET',
-        path='/groups/%s/' % group.id,
+        path='/issues/%s/' % group.id,
     )
 
 
@@ -35,7 +35,7 @@ def update_aggregate_scenario(runner):
     group = Group.objects.filter(project=runner.default_project).first()
     runner.request(
         method='PUT',
-        path='/groups/%s/' % group.id,
+        path='/issues/%s/' % group.id,
         data={'status': 'unresolved'}
     )
 
@@ -46,7 +46,7 @@ def delete_aggregate_scenario(runner):
         group = Group.objects.filter(project=project).first()
         runner.request(
             method='DELETE',
-            path='/groups/%s/' % group.id,
+            path='/issues/%s/' % group.id,
         )
 
 
@@ -126,15 +126,14 @@ class GroupDetailsEndpoint(GroupEndpoint):
     @attach_scenarios([retrieve_aggregate_scenario])
     def get(self, request, group):
         """
-        Retrieve an Aggregate
-        `````````````````````
+        Retrieve an Issue
+        `````````````````
 
-        Return details on an individual aggregate.  Aggregates are also
-        sometimes referred to as groups.  This returns the basic stats for
-        the group (the bar graph), some overall numbers (number of comments,
-        user reports) as well as the summarized event data.
+        Return details on an individual issue. This returns the basic stats for
+        the issue (title, last seen, first seen), some overall numbers (number
+        of comments, user reports) as well as the summarized event data.
 
-        :pparam string group_id: the ID of the group to retrieve.
+        :pparam string issue_id: the ID of the issue to retrieve.
         :auth: required
         """
         # TODO(dcramer): handle unauthenticated/public response
@@ -216,18 +215,18 @@ class GroupDetailsEndpoint(GroupEndpoint):
     @attach_scenarios([update_aggregate_scenario])
     def put(self, request, group):
         """
-        Update an Aggregate
-        ```````````````````
+        Update an Issue
+        ```````````````
 
-        Updates an individual aggregate's attributes.  Only the attributes
+        Updates an individual issues's attributes.  Only the attributes
         submitted are modified.
 
-        :pparam string group_id: the ID of the group to retrieve.
+        :pparam string issue_id: the ID of the group to retrieve.
         :param string status: the new status for the groups.  Valid values
                               are ``"resolved"``, ``"unresolved"`` and
                               ``"muted"``.
         :param int assignedTo: the user ID of the user that should be
-                               assigned to this group.
+                               assigned to this issue.
         :param boolean hasSeen: in case this API call is invoked with a user
                                 context this allows changing of the flag
                                 that indicates if the user has seen the
@@ -334,12 +333,12 @@ class GroupDetailsEndpoint(GroupEndpoint):
     @attach_scenarios([delete_aggregate_scenario])
     def delete(self, request, group):
         """
-        Remove an Aggregate
-        ```````````````````
+        Remove an Issue
+        ```````````````
 
-        Removes an individual aggregate.
+        Removes an individual issue.
 
-        :pparam string group_id: the ID of the group to delete.
+        :pparam string issue_id: the ID of the issue to delete.
         :auth: required
         """
         from sentry.tasks.deletion import delete_group
diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
index 51c35a57ef..7ccfc065e2 100644
--- a/src/sentry/api/endpoints/group_events.py
+++ b/src/sentry/api/endpoints/group_events.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 from sentry.api.base import DocSection
-from sentry.api.bases.group import GroupEndpoint
+from sentry.api.bases import GroupEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.paginator import DateTimePaginator
 from sentry.models import Event, Group
@@ -13,7 +13,7 @@ def list_available_samples_scenario(runner):
     group = Group.objects.filter(project=runner.default_project).first()
     runner.request(
         method='GET',
-        path='/groups/%s/events/' % group.id
+        path='/issues/%s/events/' % group.id
     )
 
 
@@ -23,12 +23,12 @@ class GroupEventsEndpoint(GroupEndpoint):
     @attach_scenarios([list_available_samples_scenario])
     def get(self, request, group):
         """
-        List Available Samples
+        List an Issue's Events
         ``````````````````````
 
-        This endpoint lists an aggregate's available samples.
+        This endpoint lists an issue's events.
 
-        :pparam string group_id: the ID of the group to retrieve.
+        :pparam string issue_id: the ID of the issue to retrieve.
         :auth: required
         """
 
diff --git a/src/sentry/api/endpoints/group_events_latest.py b/src/sentry/api/endpoints/group_events_latest.py
index 1fd05e33d8..cef4f0466b 100644
--- a/src/sentry/api/endpoints/group_events_latest.py
+++ b/src/sentry/api/endpoints/group_events_latest.py
@@ -15,7 +15,7 @@ def get_latest_group_sample_scenario(runner):
     group = Group.objects.filter(project=project).first()
     runner.request(
         method='GET',
-        path='/groups/%s/events/latest/' % group.id,
+        path='/issues/%s/events/latest/' % group.id,
     )
 
 
diff --git a/src/sentry/api/endpoints/group_events_oldest.py b/src/sentry/api/endpoints/group_events_oldest.py
index effb8db850..f8bea5c2ab 100644
--- a/src/sentry/api/endpoints/group_events_oldest.py
+++ b/src/sentry/api/endpoints/group_events_oldest.py
@@ -15,7 +15,7 @@ def get_oldest_group_sample_scenario(runner):
     group = Group.objects.filter(project=project).last()
     runner.request(
         method='GET',
-        path='/groups/%s/events/oldest/' % group.id,
+        path='/issues/%s/events/oldest/' % group.id,
     )
 
 
diff --git a/src/sentry/api/endpoints/group_tagkey_details.py b/src/sentry/api/endpoints/group_tagkey_details.py
index bc0e5ccb73..f6e67d4035 100644
--- a/src/sentry/api/endpoints/group_tagkey_details.py
+++ b/src/sentry/api/endpoints/group_tagkey_details.py
@@ -15,7 +15,7 @@ def list_tag_details_scenario(runner):
     group = Group.objects.filter(project=runner.default_project).first()
     runner.request(
         method='GET',
-        path='/groups/%s/tags/%s/' % (
+        path='/issues/%s/tags/%s/' % (
             group.id, 'browser'),
     )
 
@@ -27,12 +27,12 @@ class GroupTagKeyDetailsEndpoint(GroupEndpoint):
     # @attach_scenarios([list_tag_details_scenario])
     def get(self, request, group, key):
         """
-        List Tag Details
-        ````````````````
+        Retrieve Tag Details
+        ````````````````````
 
-        Returns a list of details about the given tag key.
+        Returns details for given tag key related to an issue.
 
-        :pparam string group_id: the ID of the group to retrieve.
+        :pparam string issue_id: the ID of the issue to retrieve.
         :pparam string key: the tag key to look the values up for.
         :auth: required
         """
diff --git a/src/sentry/api/endpoints/group_tagkey_values.py b/src/sentry/api/endpoints/group_tagkey_values.py
index 62659d978b..8650fe6437 100644
--- a/src/sentry/api/endpoints/group_tagkey_values.py
+++ b/src/sentry/api/endpoints/group_tagkey_values.py
@@ -13,7 +13,7 @@ def list_tag_values_scenario(runner):
     group = Group.objects.filter(project=runner.default_project).first()
     runner.request(
         method='GET',
-        path='/groups/%s/tags/%s/values/' % (
+        path='/issues/%s/tags/%s/values/' % (
             group.id, 'browser'),
     )
 
@@ -28,9 +28,9 @@ class GroupTagKeyValuesEndpoint(GroupEndpoint):
         List a Tag's Values
         ```````````````````
 
-        Return a list of values associated with this key.
+        Return a list of values associated with this key for an issue.
 
-        :pparam string group_id: the ID of the group to retrieve.
+        :pparam string issue_id: the ID of the issue to retrieve.
         :pparam string key: the tag key to look the values up for.
         :auth: required
         """
diff --git a/src/sentry/api/endpoints/group_user_reports.py b/src/sentry/api/endpoints/group_user_reports.py
index 701d17bd4a..8574b941e0 100644
--- a/src/sentry/api/endpoints/group_user_reports.py
+++ b/src/sentry/api/endpoints/group_user_reports.py
@@ -9,12 +9,14 @@ from sentry.models import UserReport
 class GroupUserReportsEndpoint(GroupEndpoint):
     def get(self, request, group):
         """
-        List an aggregate's user reports
+        List User Reports
+        `````````````````
 
-        Return a list of user submitted crash reports for the given an aggregate.
-
-            {method} {path}
+        Returns a list of user reports for an issue.
 
+        :pparam string issue_id: the ID of the issue to retrieve.
+        :pparam string key: the tag key to look the values up for.
+        :auth: required
         """
 
         report_list = UserReport.objects.filter(
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 969119e060..fc58bcf5c2 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -33,7 +33,7 @@ def bulk_update_aggregates_scenario(runner):
     group1, group2 = Group.objects.filter(project=project)[:2]
     runner.request(
         method='PUT',
-        path='/projects/%s/%s/groups/?id=%s&id=%s' % (
+        path='/projects/%s/%s/issues/?id=%s&id=%s' % (
             runner.org.slug, project.slug, group1.id, group2.id),
         data={'status': 'unresolved', 'isPublic': False}
     )
@@ -45,7 +45,7 @@ def bulk_remove_aggregates_scenario(runner):
         group1, group2 = Group.objects.filter(project=project)[:2]
         runner.request(
             method='DELETE',
-            path='/projects/%s/%s/groups/?id=%s&id=%s' % (
+            path='/projects/%s/%s/issues/?id=%s&id=%s' % (
                 runner.org.slug, project.slug, group1.id, group2.id),
         )
 
@@ -55,7 +55,7 @@ def list_project_aggregates_scenario(runner):
     project = runner.default_project
     runner.request(
         method='GET',
-        path='/projects/%s/%s/groups/?statsPeriod=24h' % (
+        path='/projects/%s/%s/issues/?statsPeriod=24h' % (
             runner.org.slug, project.slug),
     )
 
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index daf5241c96..63a8ac4686 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -113,10 +113,10 @@ urlpatterns = patterns(
     url(r'^teams/(?P<organization_slug>[^\/]+)/(?P<team_slug>[^\/]+)/$',
         TeamDetailsEndpoint.as_view(),
         name='sentry-api-0-team-details'),
-    url(r'^teams/(?P<organization_slug>[^\/]+)/(?P<team_slug>[^\/]+)/groups/new/$',
+    url(r'^teams/(?P<organization_slug>[^\/]+)/(?P<team_slug>[^\/]+)/(?:groups|issues)/new/$',
         TeamGroupsNewEndpoint.as_view(),
         name='sentry-api-0-team-groups-new'),
-    url(r'^teams/(?P<organization_slug>[^\/]+)/(?P<team_slug>[^\/]+)/groups/trending/$',
+    url(r'^teams/(?P<organization_slug>[^\/]+)/(?P<team_slug>[^\/]+)/(?:groups|issues)/trending/$',
         TeamGroupsTrendingEndpoint.as_view(),
         name='sentry-api-0-team-groups-trending'),
     url(r'^teams/(?P<organization_slug>[^\/]+)/(?P<team_slug>[^\/]+)/projects/$',
@@ -147,10 +147,10 @@ urlpatterns = patterns(
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/events/(?P<event_id>[\w-]+)/$',
         ProjectEventDetailsEndpoint.as_view(),
         name='sentry-api-0-project-event-details'),
-    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/groups/$',
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/(?:groups|issues)/$',
         ProjectGroupIndexEndpoint.as_view(),
         name='sentry-api-0-project-group-index'),
-    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/groups/stats/$',
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/(?:groups|issues)/stats/$',
         ProjectGroupStatsEndpoint.as_view(),
         name='sentry-api-0-project-group-stats'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/keys/$',
@@ -203,41 +203,41 @@ urlpatterns = patterns(
         name='sentry-api-0-project-users'),
 
     # Groups
-    url(r'^groups/(?P<group_id>\d+)/$',
+    url(r'^(?:groups|issues)/(?P<issue_id>\d+)/$',
         GroupDetailsEndpoint.as_view(),
         name='sentry-api-0-group-details'),
-    url(r'^groups/(?P<group_id>\d+)/events/$',
+    url(r'^(?:groups|issues)/(?P<issue_id>\d+)/events/$',
         GroupEventsEndpoint.as_view(),
         name='sentry-api-0-group-events'),
-    url(r'^groups/(?P<group_id>\d+)/events/latest/$',
+    url(r'^(?:groups|issues)/(?P<issue_id>\d+)/events/latest/$',
         GroupEventsLatestEndpoint.as_view(),
         name='sentry-api-0-group-events-latest'),
-    url(r'^groups/(?P<group_id>\d+)/events/oldest/$',
+    url(r'^(?:groups|issues)/(?P<issue_id>\d+)/events/oldest/$',
         GroupEventsOldestEndpoint.as_view(),
         name='sentry-api-0-group-events-oldest'),
-    url(r'^groups/(?P<group_id>\d+)/notes/$',
+    url(r'^(?:groups|issues)/(?P<issue_id>\d+)/(?:notes|comments)/$',
         GroupNotesEndpoint.as_view(),
         name='sentry-api-0-group-notes'),
-    url(r'^groups/(?P<group_id>\d+)/notes/(?P<note_id>[^\/]+)/$',
+    url(r'^(?:groups|issues)/(?P<issue_id>\d+)/(?:notes|comments)/(?P<note_id>[^\/]+)/$',
         GroupNotesDetailsEndpoint.as_view(),
         name='sentry-api-0-group-notes-details'),
-    url(r'^groups/(?P<group_id>\d+)/stats/$',
+    url(r'^(?:groups|issues)/(?P<issue_id>\d+)/stats/$',
         GroupStatsEndpoint.as_view(),
         name='sentry-api-0-group-stats'),
-    url(r'^groups/(?P<group_id>\d+)/tags/$',
+    url(r'^(?:groups|issues)/(?P<issue_id>\d+)/tags/$',
         GroupTagsEndpoint.as_view(),
         name='sentry-api-0-group-tags'),
-    url(r'^groups/(?P<group_id>\d+)/tags/(?P<key>[^/]+)/$',
+    url(r'^(?:groups|issues)/(?P<issue_id>\d+)/tags/(?P<key>[^/]+)/$',
         GroupTagKeyDetailsEndpoint.as_view(),
         name='sentry-api-0-group-tagkey-details'),
-    url(r'^groups/(?P<group_id>\d+)/tags/(?P<key>[^/]+)/values/$',
+    url(r'^(?:groups|issues)/(?P<issue_id>\d+)/tags/(?P<key>[^/]+)/values/$',
         GroupTagKeyValuesEndpoint.as_view(),
         name='sentry-api-0-group-tagkey-values'),
-    url(r'^groups/(?P<group_id>\d+)/user-reports/$',
+    url(r'^(?:groups|issues)/(?P<issue_id>\d+)/user-reports/$',
         GroupUserReportsEndpoint.as_view(),
         name='sentry-api-0-group-user-reports'),
 
-    url(r'^shared/groups/(?P<share_id>[^\/]+)/$',
+    url(r'^shared/(?:groups|issues)/(?P<share_id>[^\/]+)/$',
         SharedGroupDetailsEndpoint.as_view(),
         name='sentry-api-0-shared-group-details'),
 
diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 19cf3c3d5f..4f1fa5b588 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -112,7 +112,7 @@ class Client {
   }
 
   bulkDelete(params, options) {
-    let path = '/projects/' + params.orgId + '/' + params.projectId + '/groups/';
+    let path = '/projects/' + params.orgId + '/' + params.projectId + '/issues/';
     let query = (params.itemIds ? {id: params.itemIds} : undefined);
     let id = this.uniqueId();
 
@@ -131,7 +131,7 @@ class Client {
   }
 
   bulkUpdate(params, options) {
-    let path = '/projects/' + params.orgId + '/' + params.projectId + '/groups/';
+    let path = '/projects/' + params.orgId + '/' + params.projectId + '/issues/';
     let query = (params.itemIds ? {id: params.itemIds} : undefined);
     let id = this.uniqueId();
 
@@ -151,7 +151,7 @@ class Client {
   }
 
   merge(params, options) {
-    let path = '/projects/' + params.orgId + '/' + params.projectId + '/groups/';
+    let path = '/projects/' + params.orgId + '/' + params.projectId + '/issues/';
     let query = (params.itemIds ? {id: params.itemIds} : undefined);
     let id = this.uniqueId();
 
@@ -171,7 +171,7 @@ class Client {
   }
 
   assignTo(params, options) {
-    let path = '/groups/' + params.id + '/';
+    let path = '/issues/' + params.id + '/';
     let id = this.uniqueId();
 
     GroupActions.assignTo(id, params.id, {email: params.email});
diff --git a/src/sentry/static/sentry/app/components/events/eventRow.jsx b/src/sentry/static/sentry/app/components/events/eventRow.jsx
index fa7edbc2ba..f0a6fbb72d 100644
--- a/src/sentry/static/sentry/app/components/events/eventRow.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventRow.jsx
@@ -29,7 +29,7 @@ const EventRow = React.createClass({
 
   render() {
     let event = this.state.event;
-    let eventLink = `/${this.props.orgSlug}/${this.props.projectSlug}/groups/${event.groupID}/events/${event.id}/`;
+    let eventLink = `/${this.props.orgSlug}/${this.props.projectSlug}/issues/${event.groupID}/events/${event.id}/`;
 
     let tagList = [];
     for (let key in event.tags) {
diff --git a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
index 568c98f1b5..1825e3f384 100644
--- a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
+++ b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
@@ -36,7 +36,7 @@ const TagDistributionMeter = React.createClass({
   },
 
   fetchData() {
-    let url = '/groups/' + this.props.group.id + '/tags/' + encodeURIComponent(this.props.tag) + '/';
+    let url = '/issues/' + this.props.group.id + '/tags/' + encodeURIComponent(this.props.tag) + '/';
 
     this.setState({
       loading: true,
diff --git a/src/sentry/static/sentry/app/components/groupList.jsx b/src/sentry/static/sentry/app/components/groupList.jsx
index 58db2acccc..fac59855bd 100644
--- a/src/sentry/static/sentry/app/components/groupList.jsx
+++ b/src/sentry/static/sentry/app/components/groupList.jsx
@@ -97,7 +97,7 @@ const GroupList = React.createClass({
     let querystring = jQuery.param(queryParams);
 
     let props = this.props;
-    return '/projects/' + props.orgId + '/' + props.projectId + '/groups/?' + querystring;
+    return '/projects/' + props.orgId + '/' + props.projectId + '/issues/?' + querystring;
   },
 
   onGroupChange() {
@@ -141,7 +141,7 @@ const GroupList = React.createClass({
                 id={id}
                 orgId={orgId}
                 projectId={projectId}
-                canSelect={this.props.canSelectGroups} 
+                canSelect={this.props.canSelectGroups}
               />
             );
           })}
diff --git a/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx b/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx
index 6937dcbffb..d899a89d86 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx
@@ -33,7 +33,7 @@ const NoteContainer = React.createClass({
         return;
     }
 
-    api.request('/groups/' + group.id + '/notes/' + item.id + '/' , {
+    api.request('/issues/' + group.id + '/comments/' + item.id + '/' , {
       method: 'DELETE',
       error: (error) => {
         // TODO(mattrobenolt): Show an actual error that this failed,
diff --git a/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx b/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx
index 59c3193dda..bd9bcc1a40 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx
@@ -91,7 +91,7 @@ const NoteInput = React.createClass({
 
     let loadingIndicator = IndicatorStore.add('Posting comment..');
 
-    api.request('/groups/' + group.id + '/notes/', {
+    api.request('/issues/' + group.id + '/comments/', {
       method: 'POST',
       data: {
         text: this.state.value
@@ -125,7 +125,7 @@ const NoteInput = React.createClass({
 
     let loadingIndicator = IndicatorStore.add('Updating comment..');
 
-    api.request('/groups/' + group.id + '/notes/' + item.id + '/', {
+    api.request('/issues/' + group.id + '/comments/' + item.id + '/', {
       method: 'PUT',
       data: {
         text: this.state.value
diff --git a/src/sentry/static/sentry/app/views/groupDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails.jsx
index bb95757cde..cad891bdea 100644
--- a/src/sentry/static/sentry/app/views/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails.jsx
@@ -84,7 +84,7 @@ const GroupDetails = React.createClass({
   getGroupDetailsEndpoint() {
     let id = this.props.params.groupId;
 
-    return '/groups/' + id + '/';
+    return '/issues/' + id + '/';
   },
 
   getTitle() {
diff --git a/src/sentry/static/sentry/app/views/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
index 19cdc19d28..ed317e8560 100644
--- a/src/sentry/static/sentry/app/views/groupEventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
@@ -39,7 +39,7 @@ const GroupEventDetails = React.createClass({
     let eventId = this.props.params.eventId || 'latest';
 
     let url = (eventId === 'latest' || eventId === 'oldest' ?
-      '/groups/' + this.getGroup().id + '/events/' + eventId + '/' :
+      '/issues/' + this.getGroup().id + '/events/' + eventId + '/' :
       '/events/' + eventId + '/');
 
     this.setState({
diff --git a/src/sentry/static/sentry/app/views/groupEvents.jsx b/src/sentry/static/sentry/app/views/groupEvents.jsx
index f5a97eb7bb..68b1e5c002 100644
--- a/src/sentry/static/sentry/app/views/groupEvents.jsx
+++ b/src/sentry/static/sentry/app/views/groupEvents.jsx
@@ -44,7 +44,7 @@ const GroupEvents = React.createClass({
       error: false
     });
 
-    api.request(`/groups/${this.getGroup().id}/events/`, {
+    api.request(`/issues/${this.getGroup().id}/events/`, {
       method: 'GET',
       data: queryParams,
       success: (data, _, jqXHR) => {
diff --git a/src/sentry/static/sentry/app/views/groupTagValues.jsx b/src/sentry/static/sentry/app/views/groupTagValues.jsx
index 80b5a376d6..e355d543a4 100644
--- a/src/sentry/static/sentry/app/views/groupTagValues.jsx
+++ b/src/sentry/static/sentry/app/views/groupTagValues.jsx
@@ -46,7 +46,7 @@ const GroupTagValues = React.createClass({
       error: false
     });
 
-    api.request('/groups/' + this.getGroup().id + '/tags/' + params.tagKey + '/', {
+    api.request('/issues/' + this.getGroup().id + '/tags/' + params.tagKey + '/', {
       success: (data) => {
         this.setState({
           tagKey: data,
@@ -61,7 +61,7 @@ const GroupTagValues = React.createClass({
       }
     });
 
-    api.request('/groups/' + this.getGroup().id + '/tags/' + params.tagKey + '/values/?' + querystring, {
+    api.request('/issues/' + this.getGroup().id + '/tags/' + params.tagKey + '/values/?' + querystring, {
       success: (data, _, jqXHR) => {
         this.setState({
           tagValueList: data,
diff --git a/src/sentry/static/sentry/app/views/groupTags.jsx b/src/sentry/static/sentry/app/views/groupTags.jsx
index a9df91ad7a..30aa88cd2a 100644
--- a/src/sentry/static/sentry/app/views/groupTags.jsx
+++ b/src/sentry/static/sentry/app/views/groupTags.jsx
@@ -33,7 +33,7 @@ const GroupTags = React.createClass({
 
     // TODO(dcramer): each tag should be a separate query as the tags endpoint
     // is not performant
-    this.apiRequest('/groups/' + this.getGroup().id + '/tags/', {
+    this.apiRequest('/issues/' + this.getGroup().id + '/tags/', {
       success: (data) => {
         if (!this.isMounted()) {
           return;
diff --git a/src/sentry/static/sentry/app/views/groupUserReports.jsx b/src/sentry/static/sentry/app/views/groupUserReports.jsx
index 5f43b6dd4d..196532629b 100644
--- a/src/sentry/static/sentry/app/views/groupUserReports.jsx
+++ b/src/sentry/static/sentry/app/views/groupUserReports.jsx
@@ -43,7 +43,7 @@ const GroupUserReports = React.createClass({
       error: false
     });
 
-    api.request('/groups/' + this.getGroup().id + '/user-reports/?' + querystring, {
+    api.request('/issues/' + this.getGroup().id + '/user-reports/?' + querystring, {
       success: (data, _, jqXHR) => {
         this.setState({
           error: false,
diff --git a/src/sentry/static/sentry/app/views/projectDashboard.jsx b/src/sentry/static/sentry/app/views/projectDashboard.jsx
index 0463f74b52..cac60640d6 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard.jsx
@@ -84,7 +84,7 @@ const ProjectDashboard = React.createClass({
       query: 'is:unresolved',
       since: dateSince
     });
-    return '/projects/' + params.orgId + '/' + params.projectId + '/groups/?' + qs;
+    return '/projects/' + params.orgId + '/' + params.projectId + '/issues/?' + qs;
   },
 
   getNewEventsEndpoint(dateSince) {
@@ -94,7 +94,7 @@ const ProjectDashboard = React.createClass({
       query: 'is:unresolved',
       since: dateSince
     });
-    return '/projects/' + params.orgId + '/' + params.projectId + '/groups/?' + qs;
+    return '/projects/' + params.orgId + '/' + params.projectId + '/issues/?' + qs;
   },
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx b/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
index d2e59358ad..00fb693ecc 100644
--- a/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
+++ b/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
@@ -71,7 +71,7 @@ const SharedGroupDetails = React.createClass({
   getGroupDetailsEndpoint() {
     let id = this.props.params.shareId;
 
-    return '/shared/groups/' + id + '/';
+    return '/shared/issues/' + id + '/';
   },
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 9cedb1ff24..d05a1213eb 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -246,7 +246,7 @@ const Stream = React.createClass({
   getGroupListEndpoint() {
     let params = this.props.params;
 
-    return '/projects/' + params.orgId + '/' + params.projectId + '/groups/';
+    return '/projects/' + params.orgId + '/' + params.projectId + '/issues/';
   },
 
   onRealtimeChange(realtime) {
diff --git a/tests/js/spec/components/group/tagDistributionMeter.spec.jsx b/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
index 16ebed6d1b..d18f417241 100644
--- a/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
+++ b/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
@@ -31,7 +31,7 @@ describe('TagDistributionMeter', function() {
       this.element.fetchData();
 
       expect(this.stubbedApiRequest.callCount).to.equal(1);
-      expect(this.stubbedApiRequest.getCall(0).args[0]).to.equal('/groups/1337/tags/browser/');
+      expect(this.stubbedApiRequest.getCall(0).args[0]).to.equal('/issues/1337/tags/browser/');
     });
   });
 
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index d30d249a8b..3b7c0c1c8f 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import TestUtils from 'react-addons-test-utils';
 import Cookies from 'js-cookie';
-import Sticky from 'react-sticky';  
+import Sticky from 'react-sticky';
 import Api from 'app/api';
 import CursorPoller from 'app/utils/cursorPoller';
 import LoadingError from 'app/components/loadingError';
@@ -17,8 +17,8 @@ const findWithClass = TestUtils.findRenderedDOMComponentWithClass;
 const findWithType = TestUtils.findRenderedComponentWithType;
 
 const DEFAULT_LINKS_HEADER =
-  '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/groups/?cursor=1443575731:0:1>; rel="previous"; results="false"; cursor="1443575731:0:1", ' +
-  '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/groups/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
+  '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/issues/?cursor=1443575731:0:1>; rel="previous"; results="false"; cursor="1443575731:0:1", ' +
+  '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/issues/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
 
 describe('Stream', function() {
 
@@ -56,7 +56,7 @@ describe('Stream', function() {
         stream.fetchData();
 
         expect(CursorPoller.prototype.setEndpoint
-          .calledWith('http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/groups/?cursor=1443575731:0:1'))
+          .calledWith('http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/issues/?cursor=1443575731:0:1'))
           .to.be.true;
       });
 
@@ -72,8 +72,8 @@ describe('Stream', function() {
       it('should not enable the poller if the \'previous\' link has results', function () {
         let stream = TestUtils.renderIntoDocument(this.Element);
         stream.state.pageLinks =
-          '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/groups/?cursor=1443575731:0:1>; rel="previous"; results="true"; cursor="1443575731:0:1", ' +
-          '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/groups/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
+          '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/issues/?cursor=1443575731:0:1>; rel="previous"; results="true"; cursor="1443575731:0:1", ' +
+          '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/issues/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
 
         stream.state.realtimeActive = true;
         stream.fetchData();
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index c27c8c1ce3..952a2d79a8 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import, print_function
 
 from datetime import timedelta
-from django.core.urlresolvers import reverse
 from django.utils import timezone
 
 from sentry.models import (
@@ -17,9 +16,7 @@ class GroupDetailsTest(APITestCase):
 
         group = self.create_group()
 
-        url = reverse('sentry-api-0-group-details', kwargs={
-            'group_id': group.id,
-        })
+        url = '/api/0/issues/{}/'.format(group.id)
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
@@ -41,9 +38,8 @@ class GroupDetailsTest(APITestCase):
             value=release.version,
         )
 
-        url = reverse('sentry-api-0-group-details', kwargs={
-            'group_id': group.id,
-        })
+        url = '/api/0/issues/{}/'.format(group.id)
+
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
@@ -57,9 +53,8 @@ class GroupUpdateTest(APITestCase):
 
         group = self.create_group()
 
-        url = reverse('sentry-api-0-group-details', kwargs={
-            'group_id': group.id,
-        })
+        url = '/api/0/issues/{}/'.format(group.id)
+
         response = self.client.put(url, data={
             'status': 'resolved',
         }, format='json')
@@ -76,9 +71,7 @@ class GroupUpdateTest(APITestCase):
 
         self.login_as(user=self.user)
 
-        url = reverse('sentry-api-0-group-details', kwargs={
-            'group_id': group.id,
-        })
+        url = '/api/0/issues/{}/'.format(group.id)
 
         response = self.client.put(url, data={
             'status': 'muted',
@@ -102,9 +95,8 @@ class GroupUpdateTest(APITestCase):
 
         group = self.create_group()
 
-        url = reverse('sentry-api-0-group-details', kwargs={
-            'group_id': group.id
-        })
+        url = '/api/0/issues/{}/'.format(group.id)
+
         response = self.client.put(url, data={
             'isBookmarked': '1',
         }, format='json')
@@ -120,9 +112,8 @@ class GroupUpdateTest(APITestCase):
 
         group = self.create_group()
 
-        url = reverse('sentry-api-0-group-details', kwargs={
-            'group_id': group.id
-        })
+        url = '/api/0/issues/{}/'.format(group.id)
+
         response = self.client.put(url, data={
             'assignedTo': self.user.username,
         }, format='json')
@@ -160,9 +151,8 @@ class GroupUpdateTest(APITestCase):
 
         group = self.create_group()
 
-        url = reverse('sentry-api-0-group-details', kwargs={
-            'group_id': group.id
-        })
+        url = '/api/0/issues/{}/'.format(group.id)
+
         response = self.client.put(url, data={
             'hasSeen': '1',
         }, format='json')
@@ -187,9 +177,8 @@ class GroupUpdateTest(APITestCase):
 
         group = self.create_group()
 
-        url = reverse('sentry-api-0-group-details', kwargs={
-            'group_id': group.id
-        })
+        url = '/api/0/issues/{}/'.format(group.id)
+
         response = self.client.put(url, data={
             'hasSeen': '1',
         }, format='json')
@@ -206,9 +195,8 @@ class GroupDeleteTest(APITestCase):
 
         group = self.create_group()
 
-        url = reverse('sentry-api-0-group-details', kwargs={
-            'group_id': group.id
-        })
+        url = '/api/0/issues/{}/'.format(group.id)
+
         with self.tasks():
             response = self.client.delete(url, format='json')
 
diff --git a/tests/sentry/api/endpoints/test_group_events.py b/tests/sentry/api/endpoints/test_group_events.py
index 33514274f4..96c5082050 100644
--- a/tests/sentry/api/endpoints/test_group_events.py
+++ b/tests/sentry/api/endpoints/test_group_events.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-from django.core.urlresolvers import reverse
 from sentry.testutils import APITestCase
 
 
@@ -12,9 +11,7 @@ class GroupEventsTest(APITestCase):
         event_1 = self.create_event('a' * 32, group=group)
         event_2 = self.create_event('b' * 32, group=group)
 
-        url = reverse('sentry-api-0-group-events', kwargs={
-            'group_id': group.id
-        })
+        url = '/api/0/issues/{}/events/'.format(group.id)
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
diff --git a/tests/sentry/api/endpoints/test_group_events_latest.py b/tests/sentry/api/endpoints/test_group_events_latest.py
index 761f38cf96..5c557befca 100644
--- a/tests/sentry/api/endpoints/test_group_events_latest.py
+++ b/tests/sentry/api/endpoints/test_group_events_latest.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import
 
 from datetime import datetime
-from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase
 
@@ -22,9 +21,7 @@ class GroupEventsLatestTest(APITestCase):
             datetime=datetime(2013, 8, 13, 3, 8, 26),
         )
 
-        url = reverse('sentry-api-0-group-events-latest', kwargs={
-            'group_id': group.id,
-        })
+        url = '/api/0/issues/{}/events/latest/'.format(group.id)
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200
diff --git a/tests/sentry/api/endpoints/test_group_events_oldest.py b/tests/sentry/api/endpoints/test_group_events_oldest.py
new file mode 100644
index 0000000000..c52ce5a377
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_events_oldest.py
@@ -0,0 +1,28 @@
+from __future__ import absolute_import
+
+from datetime import datetime
+
+from sentry.testutils import APITestCase
+
+
+class GroupEventsOldestTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+        event_1 = self.create_event(
+            event_id='a',
+            group=group,
+            datetime=datetime(2013, 8, 13, 3, 8, 25),
+        )
+        self.create_event(
+            event_id='b',
+            group=group,
+            datetime=datetime(2013, 8, 13, 3, 8, 26),
+        )
+
+        url = '/api/0/issues/{}/events/oldest/'.format(group.id)
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200
+        assert response.data['id'] == str(event_1.id)
diff --git a/tests/sentry/api/endpoints/test_group_notes.py b/tests/sentry/api/endpoints/test_group_notes.py
index 7f8b0ea440..077ee3a388 100644
--- a/tests/sentry/api/endpoints/test_group_notes.py
+++ b/tests/sentry/api/endpoints/test_group_notes.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-from django.core.urlresolvers import reverse
-
 from sentry.models import Activity
 from sentry.testutils import APITestCase
 
@@ -20,9 +18,7 @@ class GroupNoteTest(APITestCase):
 
         self.login_as(user=self.user)
 
-        url = reverse('sentry-api-0-group-notes', kwargs={
-            'group_id': self.group.id,
-        })
+        url = '/api/0/issues/{}/comments/'.format(group.id)
         response = self.client.get(url, format='json')
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
@@ -35,9 +31,7 @@ class GroupNoteCreateTest(APITestCase):
 
         self.login_as(user=self.user)
 
-        url = reverse('sentry-api-0-group-notes', kwargs={
-            'group_id': self.group.id,
-        })
+        url = '/api/0/issues/{}/comments/'.format(group.id)
 
         response = self.client.post(url, format='json')
         assert response.status_code == 400
diff --git a/tests/sentry/api/endpoints/test_group_notes_details.py b/tests/sentry/api/endpoints/test_group_notes_details.py
index f2d37fb3db..e3a6fefcf3 100644
--- a/tests/sentry/api/endpoints/test_group_notes_details.py
+++ b/tests/sentry/api/endpoints/test_group_notes_details.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import
 
 from exam import fixture
-from django.core.urlresolvers import reverse
 
 from sentry.models import Activity, Group
 from sentry.testutils import APITestCase
@@ -10,10 +9,10 @@ from sentry.testutils import APITestCase
 class GroupNotesDetailsTest(APITestCase):
     @fixture
     def url(self):
-        return reverse('sentry-api-0-group-notes-details', kwargs={
-            'group_id': self.group.id,
-            'note_id': self.activity.id,
-        })
+        return '/api/0/issues/{}/comments/{}/'.format(
+            self.group.id,
+            self.activity.id,
+        )
 
     def test_delete(self):
         self.login_as(user=self.user)
diff --git a/tests/sentry/api/endpoints/test_group_stats.py b/tests/sentry/api/endpoints/test_group_stats.py
index 9dfec104ba..fc69f11017 100644
--- a/tests/sentry/api/endpoints/test_group_stats.py
+++ b/tests/sentry/api/endpoints/test_group_stats.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-from django.core.urlresolvers import reverse
-
 from sentry.app import tsdb
 from sentry.testutils import APITestCase
 
@@ -13,9 +11,7 @@ class GroupStatsTest(APITestCase):
         group1 = self.create_group()
         group2 = self.create_group()
 
-        url = reverse('sentry-api-0-group-stats', kwargs={
-            'group_id': group1.id,
-        })
+        url = '/api/0/issues/{}/stats/'.format(group1.id)
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
diff --git a/tests/sentry/api/endpoints/test_group_tagkey_details.py b/tests/sentry/api/endpoints/test_group_tagkey_details.py
index 098875f255..42440c4bc3 100644
--- a/tests/sentry/api/endpoints/test_group_tagkey_details.py
+++ b/tests/sentry/api/endpoints/test_group_tagkey_details.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-from django.core.urlresolvers import reverse
-
 from sentry.models import GroupTagKey, GroupTagValue, TagKey, TagValue
 from sentry.testutils import APITestCase
 
@@ -41,10 +39,7 @@ class GroupTagDetailsTest(APITestCase):
 
         self.login_as(user=self.user)
 
-        url = reverse('sentry-api-0-group-tagkey-details', kwargs={
-            'group_id': group.id,
-            'key': tagkey.key,
-        })
+        url = '/api/0/issues/{}/tags/{}/'.format(group.id, tagkey.key)
         response = self.client.get(url, format='json')
         assert response.status_code == 200, response.content
         assert response.data['key'] == str(tagkey.key)
diff --git a/tests/sentry/api/endpoints/test_group_tagkey_values.py b/tests/sentry/api/endpoints/test_group_tagkey_values.py
index 33a9009d71..63c31acca0 100644
--- a/tests/sentry/api/endpoints/test_group_tagkey_values.py
+++ b/tests/sentry/api/endpoints/test_group_tagkey_values.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-from django.core.urlresolvers import reverse
-
 from sentry.models import GroupTagValue, TagKey, TagValue
 from sentry.testutils import APITestCase
 
@@ -27,10 +25,7 @@ class GroupTagKeyValuesTest(APITestCase):
 
         self.login_as(user=self.user)
 
-        url = reverse('sentry-api-0-group-tagkey-values', kwargs={
-            'group_id': group.id,
-            'key': key,
-        })
+        url = '/api/0/issues/{}/tags/{}/values/'.format(group.id, key)
 
         response = self.client.get(url)
 
diff --git a/tests/sentry/api/endpoints/test_group_tags.py b/tests/sentry/api/endpoints/test_group_tags.py
index b5a1fddea6..a418876398 100644
--- a/tests/sentry/api/endpoints/test_group_tags.py
+++ b/tests/sentry/api/endpoints/test_group_tags.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-from django.core.urlresolvers import reverse
-
 from sentry.models import GroupTagKey, GroupTagValue, TagKey, TagValue
 from sentry.testutils import APITestCase
 
@@ -36,9 +34,7 @@ class GroupTagsTest(APITestCase):
 
         self.login_as(user=self.user)
 
-        url = reverse('sentry-api-0-group-tags', kwargs={
-            'group_id': group.id,
-        })
+        url = '/api/0/issues/{}/tags/'.format(group.id)
         response = self.client.get(url, format='json')
         assert response.status_code == 200, response.content
         assert len(response.data) == 2
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 269a0866d5..a293666481 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -1,8 +1,8 @@
 from __future__ import absolute_import
 
 from datetime import timedelta
-from django.core.urlresolvers import reverse
 from django.utils import timezone
+from exam import fixture
 from mock import patch
 
 from sentry.models import (
@@ -22,6 +22,13 @@ class GroupListTest(APITestCase):
             attrs['href'] = url
         return links
 
+    @fixture
+    def path(self):
+        return '/api/0/projects/{}/{}/issues/'.format(
+            self.project.organization.slug,
+            self.project.slug,
+        )
+
     def test_sort_by_date_with_tag(self):
         # XXX(dcramer): this tests a case where an ambiguous column name existed
         now = timezone.now()
@@ -30,11 +37,11 @@ class GroupListTest(APITestCase):
             last_seen=now - timedelta(seconds=1),
         )
         self.login_as(user=self.user)
-        url = reverse('sentry-api-0-project-group-index', kwargs={
-            'organization_slug': self.project.organization.slug,
-            'project_slug': self.project.slug,
-        })
-        response = self.client.get(url + '?sort_by=date&query=is:unresolved', format='json')
+
+        response = self.client.get(
+            '{}?sort_by=date&query=is:unresolved'.format(self.path),
+            format='json',
+        )
         assert response.status_code == 200
         assert len(response.data) == 1
         assert response.data[0]['id'] == str(group1.id)
@@ -55,11 +62,10 @@ class GroupListTest(APITestCase):
         # )
 
         self.login_as(user=self.user)
-        url = reverse('sentry-api-0-project-group-index', kwargs={
-            'organization_slug': self.project.organization.slug,
-            'project_slug': self.project.slug,
-        })
-        response = self.client.get(url + '?sort_by=date&limit=1', format='json')
+        response = self.client.get(
+            '{}?sort_by=date&limit=1'.format(self.path),
+            format='json',
+        )
         assert response.status_code == 200
         assert len(response.data) == 1
         assert response.data[0]['id'] == str(group2.id)
@@ -127,20 +133,21 @@ class GroupListTest(APITestCase):
         )
 
         self.login_as(user=self.user)
-        url = reverse('sentry-api-0-project-group-index', kwargs={
-            'organization_slug': self.project.organization.slug,
-            'project_slug': self.project.slug,
-        })
-        response = self.client.get(url + '?statsPeriod=24h', format='json')
+
+        response = self.client.get('{}?statsPeriod=24h'.format(self.path),
+                                   format='json')
         assert response.status_code == 200
 
-        response = self.client.get(url + '?statsPeriod=14d', format='json')
+        response = self.client.get('{}?statsPeriod=14d'.format(self.path),
+                                   format='json')
         assert response.status_code == 200
 
-        response = self.client.get(url + '?statsPeriod=', format='json')
+        response = self.client.get('{}?statsPeriod='.format(self.path),
+                                   format='json')
         assert response.status_code == 200
 
-        response = self.client.get(url + '?statsPeriod=48h', format='json')
+        response = self.client.get('{}?statsPeriod=48h'.format(self.path),
+                                   format='json')
         assert response.status_code == 400
 
     def test_auto_resolved(self):
@@ -157,11 +164,7 @@ class GroupListTest(APITestCase):
         )
 
         self.login_as(user=self.user)
-        url = reverse('sentry-api-0-project-group-index', kwargs={
-            'organization_slug': self.project.organization.slug,
-            'project_slug': self.project.slug,
-        })
-        response = self.client.get(url, format='json')
+        response = self.client.get(self.path, format='json')
         assert response.status_code == 200
         assert len(response.data) == 1
         assert response.data[0]['id'] == str(group2.id)
@@ -178,11 +181,8 @@ class GroupListTest(APITestCase):
         )
 
         self.login_as(user=self.user)
-        url = reverse('sentry-api-0-project-group-index', kwargs={
-            'organization_slug': self.project.organization.slug,
-            'project_slug': self.project.slug,
-        })
-        response = self.client.get(url + '?query=' + ('c' * 32), format='json')
+        response = self.client.get('{}?query={}'.format(self.path, 'c' * 32),
+                                   format='json')
         assert response.status_code == 200
         assert len(response.data) == 1
         assert response.data[0]['id'] == str(group.id)
@@ -194,16 +194,20 @@ class GroupListTest(APITestCase):
         self.create_group(checksum='b' * 32)
 
         self.login_as(user=self.user)
-        url = reverse('sentry-api-0-project-group-index', kwargs={
-            'organization_slug': self.project.organization.slug,
-            'project_slug': self.project.slug,
-        })
-        response = self.client.get(url + '?query=' + ('c' * 32), format='json')
+        response = self.client.get('{}?query={}'.format(self.path, 'c' * 32),
+                                   format='json')
         assert response.status_code == 200
         assert len(response.data) == 0
 
 
 class GroupUpdateTest(APITestCase):
+    @fixture
+    def path(self):
+        return '/api/0/projects/{}/{}/issues/'.format(
+            self.project.organization.slug,
+            self.project.slug,
+        )
+
     def test_global_resolve(self):
         group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
         group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
@@ -213,13 +217,13 @@ class GroupUpdateTest(APITestCase):
             checksum='b' * 32, status=GroupStatus.UNRESOLVED)
 
         self.login_as(user=self.user)
-        url = reverse('sentry-api-0-project-group-index', kwargs={
-            'organization_slug': self.project.organization.slug,
-            'project_slug': self.project.slug,
-        })
-        response = self.client.put(url + '?status=unresolved', data={
-            'status': 'resolved',
-        }, format='json')
+        response = self.client.put(
+            '{}?status=unresolved'.format(self.path),
+            data={
+                'status': 'resolved',
+            },
+            format='json',
+        )
         assert response.status_code == 200, response.data
         assert response.data == {
             'status': 'resolved',
@@ -254,10 +258,7 @@ class GroupUpdateTest(APITestCase):
 
         self.login_as(user=self.user)
         url = '{url}?id={group1.id}&id={group2.id}&group4={group4.id}'.format(
-            url=reverse('sentry-api-0-project-group-index', kwargs={
-                'organization_slug': self.project.organization.slug,
-                'project_slug': self.project.slug,
-            }),
+            url=self.path,
             group1=group1,
             group2=group2,
             group4=group4,
@@ -297,10 +298,7 @@ class GroupUpdateTest(APITestCase):
         self.login_as(user=self.user)
 
         url = '{url}?id={group.id}'.format(
-            url=reverse('sentry-api-0-project-group-index', kwargs={
-                'organization_slug': self.project.organization.slug,
-                'project_slug': self.project.slug,
-            }),
+            url=self.path,
             group=group,
         )
         response = self.client.put(url, data={
@@ -334,10 +332,7 @@ class GroupUpdateTest(APITestCase):
         self.login_as(user=self.user)
 
         url = '{url}?id={group.id}'.format(
-            url=reverse('sentry-api-0-project-group-index', kwargs={
-                'organization_slug': self.project.organization.slug,
-                'project_slug': self.project.slug,
-            }),
+            url=self.path,
             group=group,
         )
         response = self.client.put(url, data={
@@ -363,10 +358,7 @@ class GroupUpdateTest(APITestCase):
         self.login_as(user=self.user)
 
         url = '{url}?id={group.id}'.format(
-            url=reverse('sentry-api-0-project-group-index', kwargs={
-                'organization_slug': self.project.organization.slug,
-                'project_slug': self.project.slug,
-            }),
+            url=self.path,
             group=group,
         )
         response = self.client.put(url, data={
@@ -387,10 +379,7 @@ class GroupUpdateTest(APITestCase):
         self.login_as(user=self.user)
 
         url = '{url}?id={group.id}'.format(
-            url=reverse('sentry-api-0-project-group-index', kwargs={
-                'organization_slug': self.project.organization.slug,
-                'project_slug': self.project.slug,
-            }),
+            url=self.path,
             group=group,
         )
         response = self.client.put(url, data={
@@ -425,10 +414,7 @@ class GroupUpdateTest(APITestCase):
 
         self.login_as(user=self.user)
         url = '{url}?id={group1.id}&id={group2.id}&group4={group4.id}'.format(
-            url=reverse('sentry-api-0-project-group-index', kwargs={
-                'organization_slug': self.project.organization.slug,
-                'project_slug': self.project.slug,
-            }),
+            url=self.path,
             group1=group1,
             group2=group2,
             group4=group4,
@@ -459,10 +445,7 @@ class GroupUpdateTest(APITestCase):
 
         self.login_as(user=self.user)
         url = '{url}?id={group1.id}&id={group2.id}'.format(
-            url=reverse('sentry-api-0-project-group-index', kwargs={
-                'organization_slug': self.project.organization.slug,
-                'project_slug': self.project.slug,
-            }),
+            url=self.path,
             group1=group1,
             group2=group2,
         )
@@ -486,10 +469,7 @@ class GroupUpdateTest(APITestCase):
 
         self.login_as(user=self.user)
         url = '{url}?id={group1.id}&id={group2.id}'.format(
-            url=reverse('sentry-api-0-project-group-index', kwargs={
-                'organization_slug': self.project.organization.slug,
-                'project_slug': self.project.slug,
-            }),
+            url=self.path,
             group1=group1,
             group2=group2,
         )
@@ -517,10 +497,7 @@ class GroupUpdateTest(APITestCase):
 
         self.login_as(user=self.user)
         url = '{url}?id={group1.id}&id={group2.id}&group4={group4.id}'.format(
-            url=reverse('sentry-api-0-project-group-index', kwargs={
-                'organization_slug': self.project.organization.slug,
-                'project_slug': self.project.slug,
-            }),
+            url=self.path,
             group1=group1,
             group2=group2,
             group4=group4,
@@ -554,10 +531,7 @@ class GroupUpdateTest(APITestCase):
 
         self.login_as(user=self.user)
         url = '{url}?id={group1.id}&id={group2.id}&id={group3.id}'.format(
-            url=reverse('sentry-api-0-project-group-index', kwargs={
-                'organization_slug': self.project.organization.slug,
-                'project_slug': self.project.slug,
-            }),
+            url=self.path,
             group1=group1,
             group2=group2,
             group3=group3,
@@ -578,13 +552,16 @@ class GroupUpdateTest(APITestCase):
 
 
 class GroupDeleteTest(APITestCase):
+    @fixture
+    def path(self):
+        return '/api/0/projects/{}/{}/issues/'.format(
+            self.project.organization.slug,
+            self.project.slug,
+        )
+
     def test_global_is_forbidden(self):
         self.login_as(user=self.user)
-        url = reverse('sentry-api-0-project-group-index', kwargs={
-            'organization_slug': self.project.organization.slug,
-            'project_slug': self.project.slug,
-        })
-        response = self.client.delete(url, data={
+        response = self.client.delete(self.path, data={
             'status': 'resolved',
         }, format='json')
         assert response.status_code == 400
@@ -599,10 +576,7 @@ class GroupDeleteTest(APITestCase):
 
         self.login_as(user=self.user)
         url = '{url}?id={group1.id}&id={group2.id}&group4={group4.id}'.format(
-            url=reverse('sentry-api-0-project-group-index', kwargs={
-                'organization_slug': self.project.organization.slug,
-                'project_slug': self.project.slug,
-            }),
+            url=self.path,
             group1=group1,
             group2=group2,
             group4=group4,
diff --git a/tests/sentry/api/endpoints/test_project_group_stats.py b/tests/sentry/api/endpoints/test_project_group_stats.py
index 02532a6ba8..eba266f22c 100644
--- a/tests/sentry/api/endpoints/test_project_group_stats.py
+++ b/tests/sentry/api/endpoints/test_project_group_stats.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-from django.core.urlresolvers import reverse
-
 from sentry.app import tsdb
 from sentry.testutils import APITestCase
 
@@ -14,10 +12,10 @@ class ProjectGroupStatsTest(APITestCase):
         group1 = self.create_group(project=project)
         group2 = self.create_group(project=project)
 
-        url = reverse('sentry-api-0-project-group-stats', kwargs={
-            'organization_slug': project.organization.slug,
-            'project_slug': project.slug,
-        })
+        url = '/api/0/projects/{}/{}/issues/stats/'.format(
+            project.organization.slug,
+            project.slug,
+        )
         response = self.client.get('%s?id=%s&id=%s' % (url, group1.id, group2.id),
                                    format='json')
 
diff --git a/tests/sentry/api/endpoints/test_shared_group_details.py b/tests/sentry/api/endpoints/test_shared_group_details.py
index 21e1ad32f3..b21dbb8dc8 100644
--- a/tests/sentry/api/endpoints/test_shared_group_details.py
+++ b/tests/sentry/api/endpoints/test_shared_group_details.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import, print_function
 
-from django.core.urlresolvers import reverse
-
 from sentry.testutils import APITestCase
 
 
@@ -12,9 +10,7 @@ class SharedGroupDetailsTest(APITestCase):
         group = self.create_group()
         event = self.create_event(group=group)
 
-        url = reverse('sentry-api-0-shared-group-details', kwargs={
-            'share_id': group.get_share_id(),
-        })
+        url = '/api/0/shared/issues/{}/'.format(group.get_share_id())
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
diff --git a/tests/sentry/api/endpoints/test_team_groups_new.py b/tests/sentry/api/endpoints/test_team_groups_new.py
index 38d14a056a..cc3d1b2943 100644
--- a/tests/sentry/api/endpoints/test_team_groups_new.py
+++ b/tests/sentry/api/endpoints/test_team_groups_new.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-from django.core.urlresolvers import reverse
 from sentry.testutils import APITestCase
 
 
@@ -12,10 +11,10 @@ class TeamGroupsNewTest(APITestCase):
         group2 = self.create_group(checksum='b' * 32, project=project2, score=5)
 
         self.login_as(user=self.user)
-        url = reverse('sentry-api-0-team-groups-new', kwargs={
-            'organization_slug': self.team.organization.slug,
-            'team_slug': self.team.slug
-        })
+        url = '/api/0/teams/{}/{}/issues/new/'.format(
+            self.team.organization.slug,
+            self.team.slug,
+        )
         response = self.client.get(url, format='json')
         assert response.status_code == 200
         assert len(response.data) == 2
diff --git a/tests/sentry/api/endpoints/test_team_groups_trending.py b/tests/sentry/api/endpoints/test_team_groups_trending.py
index 3f0533e98e..3e995e3c37 100644
--- a/tests/sentry/api/endpoints/test_team_groups_trending.py
+++ b/tests/sentry/api/endpoints/test_team_groups_trending.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-from django.core.urlresolvers import reverse
 from sentry.testutils import APITestCase
 
 
@@ -12,10 +11,11 @@ class TeamGroupsTrendingTest(APITestCase):
         group2 = self.create_group(checksum='b' * 32, project=project2, score=5)
 
         self.login_as(user=self.user)
-        url = reverse('sentry-api-0-team-groups-trending', kwargs={
-            'organization_slug': self.team.organization.slug,
-            'team_slug': self.team.slug
-        })
+
+        url = '/api/0/teams/{}/{}/issues/trending/'.format(
+            self.team.organization.slug,
+            self.team.slug,
+        )
         response = self.client.get(url, format='json')
         assert response.status_code == 200
         assert len(response.data) == 2
