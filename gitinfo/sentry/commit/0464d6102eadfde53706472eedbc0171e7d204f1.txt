commit 0464d6102eadfde53706472eedbc0171e7d204f1
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Mar 4 15:47:50 2015 -0800

    Correct breadcrumbs using reservations

diff --git a/src/sentry/static/sentry/app/mixins/breadcrumbMixin.jsx b/src/sentry/static/sentry/app/mixins/breadcrumbMixin.jsx
index af02b4d057..f0b2d702c5 100644
--- a/src/sentry/static/sentry/app/mixins/breadcrumbMixin.jsx
+++ b/src/sentry/static/sentry/app/mixins/breadcrumbMixin.jsx
@@ -42,24 +42,26 @@ module.exports = {
 
   componentWillMount() {
     this.crumbs = [];
-    this.crumbs.forEach((node) => {
-      BreadcrumbStore.push(this.breadcrumbFromNode(node));
-    });
+    for (var i = 0; i < (this.crumbReservations || 0); i++) {
+      this.crumbs.push(BreadcrumbStore.reserve());
+    }
   },
 
   componentWillUnmount() {
-    this.crumbs.forEach(() => {
-      BreadcrumbStore.pop();
+    this.crumbs.forEach((idx) => {
+      BreadcrumbStore.pop(idx);
     });
   },
 
   setBreadcrumbs(nodes) {
-    this.crumbs.forEach(() => {
-      BreadcrumbStore.pop();
-    });
-    this.crumbs = nodes;
-    this.crumbs.forEach((node) => {
-      BreadcrumbStore.push(this.breadcrumbFromNode(node));
+    if (this.crumbs.length !== nodes.length) {
+      throw new Error('You must reserve crumbs before setting them.');
+    }
+    nodes.forEach((node, nodeIdx) => {
+      BreadcrumbStore.update(
+        this.crumbs[nodeIdx],
+        this.breadcrumbFromNode(node)
+      );
     });
   }
 };
diff --git a/src/sentry/static/sentry/app/stores/breadcrumbStore.jsx b/src/sentry/static/sentry/app/stores/breadcrumbStore.jsx
index 9c879db25d..1ff92485e0 100644
--- a/src/sentry/static/sentry/app/stores/breadcrumbStore.jsx
+++ b/src/sentry/static/sentry/app/stores/breadcrumbStore.jsx
@@ -4,21 +4,51 @@ var Reflux = require("reflux");
 
 var BreadcrumbStore = Reflux.createStore({
   init() {
+    this.RESERVATION = -1;
+    this.counter = 0;
     this.nodes = [];
   },
 
   push(node) {
-    this.nodes.push(node);
+    // Create a unique ID for this node, append it to the list
+    // and return the ID.
+    this.counter += 1;
+    this.nodes.push([this.counter, node]);
     this.trigger();
+    return this.counter;
   },
 
-  pop() {
-    this.nodes.pop();
+  pop(idx) {
+    this.nodes = this.nodes.filter((node) => {
+      return node[0] !== idx;
+    });
     this.trigger();
   },
 
+  update(idx, node) {
+    for (var i = 0; i < this.nodes.length; i++) {
+      if (this.nodes[i][0] === idx) {
+        this.nodes[i][1] = node;
+        this.trigger();
+        return true;
+      }
+    }
+    return false;
+  },
+
+  reserve() {
+    return this.push(this.RESERVATION);
+  },
+
   getNodes() {
-    return this.nodes;
+    var nodes = [];
+    for (var i = 0; i < this.nodes.length; i++) {
+      if (this.nodes[i][1] == this.RESERVATION) {
+        break;
+      }
+      nodes.push(this.nodes[i][1]);
+    }
+    return nodes;
   }
 });
 
diff --git a/src/sentry/static/sentry/app/views/groupDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails.jsx
index f1a56a9fd8..ef6c7bafe4 100644
--- a/src/sentry/static/sentry/app/views/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails.jsx
@@ -22,6 +22,8 @@ var GroupDetails = React.createClass({
     memberList: React.PropTypes.instanceOf(Array).isRequired
   },
 
+  crumbReservations: 1,
+
   childContextTypes: {
     group: PropTypes.Group,
   },
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index a52f45a5d2..739451ad3d 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -19,13 +19,7 @@ var OrganizationDetails = React.createClass({
     Router.State
   ],
 
-  getInitialState() {
-    return {
-      loading: false,
-      error: false,
-      organization: null
-    };
-  },
+  crumbReservations: 1,
 
   childContextTypes: {
     organization: PropTypes.Organization
@@ -37,6 +31,14 @@ var OrganizationDetails = React.createClass({
     };
   },
 
+  getInitialState() {
+    return {
+      loading: false,
+      error: false,
+      organization: null
+    };
+  },
+
   componentWillMount() {
     this.fetchData();
   },
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index 52fa6e912a..1a2eae8bbe 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -21,13 +21,7 @@ var ProjectDetails = React.createClass({
     Router.State
   ],
 
-  getInitialState() {
-    return {
-      memberList: [],
-      project: null,
-      team: null
-    };
-  },
+  crumbReservations: 2,
 
   childContextTypes: {
     organization: PropTypes.Organization,
@@ -43,6 +37,13 @@ var ProjectDetails = React.createClass({
     };
   },
 
+  getInitialState() {
+    return {
+      memberList: [],
+      project: null,
+      team: null
+    };
+  },
   componentWillMount() {
     this.fetchData();
   },
diff --git a/src/sentry/static/sentry/app/views/teamDetails.jsx b/src/sentry/static/sentry/app/views/teamDetails.jsx
index 578547d2e9..3fecffa73b 100644
--- a/src/sentry/static/sentry/app/views/teamDetails.jsx
+++ b/src/sentry/static/sentry/app/views/teamDetails.jsx
@@ -19,11 +19,7 @@ var TeamDetails = React.createClass({
     Router.State
   ],
 
-  getInitialState() {
-    return {
-      team: null
-    };
-  },
+  crumbReservations: 1,
 
   childContextTypes: {
     organization: PropTypes.Organization,
@@ -37,6 +33,12 @@ var TeamDetails = React.createClass({
     };
   },
 
+  getInitialState() {
+    return {
+      team: null
+    };
+  },
+
   componentWillMount() {
     this.fetchData();
   },
