commit 92843400c377535118119f86dbf13a04aecc558c
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Wed May 29 15:36:16 2019 +0200

    ref: Remove old interface validation code (#13332)
    
    cont https://github.com/getsentry/sentry/pull/12375

diff --git a/.travis.yml b/.travis.yml
index b1dbaac0ee..8d7e6eb6bc 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -130,11 +130,6 @@ matrix:
       name: 'Backend [Postgres] (2/2)'
       env: TEST_SUITE=postgres DB=postgres TOTAL_TEST_GROUPS=2 TEST_GROUP=1
 
-    # XXX(markus): Remove after rust interfaces are done
-    - <<: *postgres_default
-      name: 'Backend [Postgres] (Rust Interface Renormalization)'
-      env: TEST_SUITE=postgres DB=postgres SENTRY_TEST_USE_RUST_INTERFACE_RENORMALIZATION=1
-
     - python: 2.7
       name: 'Backend [Riak]'
       env: TEST_SUITE=riak DB=postgres
@@ -157,12 +152,6 @@ matrix:
       name: 'Acceptance'
       env: TEST_SUITE=acceptance USE_SNUBA=1
 
-    # XXX(markus): Remove after rust interfaces are done
-    - <<: *acceptance_default
-      python: 2.7
-      name: 'Acceptance (Rust Interface Renormalization)'
-      env: TEST_SUITE=acceptance USE_SNUBA=1 SENTRY_TEST_USE_RUST_INTERFACE_RENORMALIZATION=1 PERCY_ENABLE=0
-
     - python: 2.7
       name: 'Frontend'
       env: TEST_SUITE=js
@@ -224,28 +213,6 @@ matrix:
       before_script:
         - psql -c 'create database sentry;' -U postgres
 
-    # XXX(markus): Remove after rust interfaces are done
-    - python: 2.7
-      name: 'Snuba Integration (Rust Interface Renormalization)'
-      env: TEST_SUITE=snuba USE_SNUBA=1 SENTRY_ZOOKEEPER_HOSTS=localhost:2181 SENTRY_KAFKA_HOSTS=localhost:9092 SENTRY_TEST_USE_RUST_INTERFACE_RENORMALIZATION=1
-      services:
-        - docker
-        - memcached
-        - redis-server
-        - postgresql
-      before_install:
-        - docker run -d --network host --name zookeeper -e ZOOKEEPER_CLIENT_PORT=2181 confluentinc/cp-zookeeper:4.1.0
-        - docker run -d --network host --name kafka -e KAFKA_ZOOKEEPER_CONNECT=localhost:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 confluentinc/cp-kafka:4.1.0
-        - docker run -d --network host --name clickhouse-server --ulimit nofile=262144:262144 yandex/clickhouse-server:18.14.9
-        - docker run -d --network host --name snuba --env SNUBA_SETTINGS=test --env CLICKHOUSE_SERVER=localhost:9000 getsentry/snuba
-        - docker ps -a
-      install:
-        - python setup.py install_egg_info
-        - pip install -e ".[dev,tests,optional]"
-        - pip install confluent-kafka
-      before_script:
-        - psql -c 'create database sentry;' -U postgres
-
     # Deploy 'storybook' (component & style guide) - allowed to fail
     - language: node_js
       name: 'Storybook Deploy'
@@ -278,9 +245,6 @@ matrix:
     # is changed.
     - env: TEST_SUITE=symbolicator
 
-    # XXX(markus): Remove after rust interfaces are done
-    - env: TEST_SUITE=postgres DB=postgres SENTRY_TEST_USE_RUST_INTERFACE_RENORMALIZATION=1
-
 notifications:
   webhooks:
     urls:
diff --git a/requirements-base.txt b/requirements-base.txt
index 84037407fd..25c55632b0 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -56,7 +56,7 @@ redis>=2.10.3,<2.10.6
 requests-oauthlib==0.3.3
 requests[security]>=2.20.0,<2.21.0
 selenium==3.141.0
-semaphore>=0.4.34,<0.5.0
+semaphore>=0.4.35,<0.5.0
 sentry-sdk>=0.8.0
 setproctitle>=1.1.7,<1.2.0
 simplejson>=3.2.0,<3.9.0
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index 617d580f65..9adeb3af5f 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-import os
 
 from collections import OrderedDict
 import logging
@@ -19,14 +18,6 @@ from sentry.utils.decorators import classproperty
 logger = logging.getLogger("sentry.events")
 interface_logger = logging.getLogger("sentry.interfaces")
 
-# This flag is only effectively used for the testsuite. In production the
-# return value of `sentry.models.event._should_skip_to_python` is explicitly
-# passed to interfaces.
-RUST_RENORMALIZED_DEFAULT = os.environ.get(
-    "SENTRY_TEST_USE_RUST_INTERFACE_RENORMALIZATION",
-    "false"
-).lower() in ("true", "1")
-
 
 def get_interface(name):
     try:
@@ -43,7 +34,7 @@ def get_interface(name):
     return interface
 
 
-def get_interfaces(data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+def get_interfaces(data):
     result = []
     for key, data in six.iteritems(data):
         # Skip invalid interfaces that were nulled out during normalization
@@ -55,9 +46,7 @@ def get_interfaces(data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
         except ValueError:
             continue
 
-        value = safe_execute(cls.to_python, data,
-                             rust_renormalized=rust_renormalized,
-                             _with_transaction=False)
+        value = safe_execute(cls.to_python, data, _with_transaction=False)
         if not value:
             continue
 
@@ -139,7 +128,7 @@ class Interface(object):
             self._data[name] = value
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+    def to_python(cls, data):
         """Creates a python interface object from the given raw data.
 
         This function can assume fully normalized and valid data. It can create
diff --git a/src/sentry/interfaces/breadcrumbs.py b/src/sentry/interfaces/breadcrumbs.py
index 02e23fcbaf..8f6c5ca32c 100644
--- a/src/sentry/interfaces/breadcrumbs.py
+++ b/src/sentry/interfaces/breadcrumbs.py
@@ -10,11 +10,8 @@ from __future__ import absolute_import
 
 __all__ = ('Breadcrumbs', )
 
-import six
-
-from sentry.constants import LOG_LEVELS_MAP
-from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
-from sentry.utils.safe import get_path, trim
+from sentry.interfaces.base import Interface, prune_empty_keys
+from sentry.utils.safe import get_path
 from sentry.utils.dates import to_timestamp, to_datetime, parse_timestamp
 
 
@@ -37,19 +34,11 @@ class Breadcrumbs(Interface):
     score = 800
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+    def to_python(cls, data):
         values = []
         for index, crumb in enumerate(get_path(data, 'values', filter=True, default=())):
             # TODO(ja): Handle already invalid and None breadcrumbs
-
-            try:
-                values.append(cls.normalize_crumb(crumb, rust_renormalized=rust_renormalized))
-            except Exception:
-                # TODO(dcramer): we dont want to discard the entirety of data
-                # when one breadcrumb errors, but it'd be nice if we could still
-                # record an error
-                if rust_renormalized:
-                    raise
+            values.append(cls.normalize_crumb(crumb))
 
         return cls(values=values)
 
@@ -69,70 +58,25 @@ class Breadcrumbs(Interface):
         })
 
     @classmethod
-    def normalize_crumb(cls, crumb, rust_renormalized):
-        if rust_renormalized:
-            crumb = dict(crumb)
-            ts = parse_timestamp(crumb.get('timestamp'))
-            if ts:
-                crumb['timestamp'] = to_timestamp(ts)
-            else:
-                crumb['timestamp'] = None
-
-            for key in (
-                'type',
-                'level',
-                'message',
-                'category',
-                'event_id',
-                'data',
-            ):
-                crumb.setdefault(key, None)
-
-            return crumb
-
-        ty = crumb.get('type') or 'default'
-        level = crumb.get('level')
-        if not isinstance(level, six.string_types) or \
-           (level not in LOG_LEVELS_MAP and level != 'critical'):
-            level = 'info'
-
+    def normalize_crumb(cls, crumb):
+        crumb = dict(crumb)
         ts = parse_timestamp(crumb.get('timestamp'))
-        if ts is None:
-            raise InterfaceValidationError('Unable to determine timestamp for crumb')
-        ts = to_timestamp(ts)
-
-        msg = crumb.get('message')
-        if msg is not None:
-            msg = trim(six.text_type(msg), 4096)
-
-        category = crumb.get('category')
-        if category is not None:
-            category = trim(six.text_type(category), 256)
-
-        event_id = crumb.get('event_id')
-
-        data = crumb.get('data')
-        if not isinstance(data, dict):
-            # TODO(dcramer): we dont want to discard the the rest of the
-            # crumb, but it'd be nice if we could record an error
-            # raise InterfaceValidationError(
-            #     'The ``data`` on breadcrumbs must be a mapping (received {})'.format(
-            #         type(crumb['data']),
-            #     )
-            # )
-            data = None
+        if ts:
+            crumb['timestamp'] = to_timestamp(ts)
         else:
-            data = trim(data, 4096)
-
-        return {
-            'type': ty,
-            'level': level,
-            'timestamp': ts,
-            'message': msg,
-            'category': category,
-            'event_id': event_id,
-            'data': data
-        }
+            crumb['timestamp'] = None
+
+        for key in (
+            'type',
+            'level',
+            'message',
+            'category',
+            'event_id',
+            'data',
+        ):
+            crumb.setdefault(key, None)
+
+        return crumb
 
     def get_api_context(self, is_public=False, platform=None):
         def _convert(x):
diff --git a/src/sentry/interfaces/contexts.py b/src/sentry/interfaces/contexts.py
index b0fe2d8369..a9de0832e8 100644
--- a/src/sentry/interfaces/contexts.py
+++ b/src/sentry/interfaces/contexts.py
@@ -13,7 +13,7 @@ import string
 
 from django.utils.encoding import force_text
 
-from sentry.interfaces.base import Interface, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
+from sentry.interfaces.base import Interface, prune_empty_keys
 from sentry.utils.contexts_normalization import normalize_os, normalize_runtime
 from sentry.utils.safe import get_path, trim
 
@@ -186,7 +186,7 @@ class Contexts(Interface):
     score = 800
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+    def to_python(cls, data):
         rv = {}
         for alias, value in six.iteritems(data):
             # XXX(markus): The `None`-case should be handled in the UI and
diff --git a/src/sentry/interfaces/debug_meta.py b/src/sentry/interfaces/debug_meta.py
index 8fbb2e6063..c5771f33ed 100644
--- a/src/sentry/interfaces/debug_meta.py
+++ b/src/sentry/interfaces/debug_meta.py
@@ -1,73 +1,8 @@
 from __future__ import absolute_import
 
-import six
-import uuid
-
 __all__ = ('DebugMeta', )
 
-from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
-
-from symbolic import parse_addr, normalize_debug_id
-
-image_types = {}
-
-
-def imagetype(name):
-    def decorator(f):
-        image_types[name] = f
-        return f
-
-    return decorator
-
-
-def _addr(x):
-    if x is None:
-        return None
-    return '0x%x' % parse_addr(x)
-
-
-@imagetype('apple')
-@imagetype('macho')
-@imagetype('elf')
-@imagetype('pe')
-@imagetype('symbolic')
-def process_native_image(image):
-    # NOTE that this is dead code as soon as Rust renormalization is fully
-    # enabled. After that, this code should be deleted. There is a difference
-    # TODO(untitaker): Remove with other normalization code.
-    try:
-        native_image = {
-            'code_file': image.get('code_file') or image.get('name'),
-            'debug_id': normalize_debug_id(
-                image.get('debug_id') or image.get('id') or image.get('uuid')),
-            'image_addr': _addr(image.get('image_addr')),
-            'image_size': _addr(image.get('image_size')),
-            'image_vmaddr': _addr(image.get('image_vmaddr')),
-        }
-
-        if image.get('arch') is not None:
-            native_image['arch'] = image.get('arch')
-        if image.get('code_id') is not None:
-            native_image['code_id'] = image.get('code_id')
-        if image.get('debug_file') is not None:
-            native_image['debug_file'] = image.get('debug_file')
-
-        return native_image
-    except KeyError as e:
-        raise InterfaceValidationError('Missing value for symbolic image: %s' % e.args[0])
-
-
-@imagetype('proguard')
-def process_proguard_image(image):
-    try:
-        if image['uuid'] is None:
-            raise KeyError('uuid')
-
-        return {
-            'uuid': six.text_type(uuid.UUID(image['uuid'])),
-        }
-    except KeyError as e:
-        raise InterfaceValidationError('Missing value for proguard image: %s' % e.args[0])
+from sentry.interfaces.base import Interface, prune_empty_keys
 
 
 class DebugMeta(Interface):
@@ -89,25 +24,11 @@ class DebugMeta(Interface):
     external_type = 'debugmeta'
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
-        is_debug_build = data.get('is_debug_build', None)
-
-        if rust_renormalized:
-            images = data.get('images', None) or []
-        else:
-            if is_debug_build is not None and not isinstance(is_debug_build, bool):
-                raise InterfaceValidationError('Invalid value for "is_debug_build"')
-
-            images = []
-            for x in data.get('images', None) or ():
-                if x is None:
-                    continue
-                images.append(cls.normalize_image(x))
-
+    def to_python(cls, data):
         return cls(
-            images=images,
-            sdk_info=cls.normalize_sdk_info(data.get('sdk_info')),
-            is_debug_build=is_debug_build,
+            images=data.get('images', None) or [],
+            sdk_info=data.get('sdk_info'),
+            is_debug_build=data.get('is_debug_build'),
         )
 
     def to_json(self):
@@ -116,37 +37,3 @@ class DebugMeta(Interface):
             'sdk_info': self.sdk_info or None,
             'is_debug_build': self.is_debug_build
         })
-
-    @staticmethod
-    def normalize_image(image):
-        ty = image.get('type')
-        if not ty:
-            raise InterfaceValidationError('Image type not provided')
-        if ty == 'apple':
-            # Legacy alias. The schema is actually slightly different, but
-            # process_native_image can deal with this and convert to a valid
-            # MachO image payload.
-            ty = 'macho'
-        func = image_types.get(ty)
-        if func is None:
-            raise InterfaceValidationError('Unknown image type %r' % image)
-        rv = func(image)
-        assert 'uuid' in rv or 'debug_id' in rv, 'debug image normalizer did not produce an identifier'
-        rv['type'] = ty
-        return rv
-
-    @staticmethod
-    def normalize_sdk_info(sdk_info):
-        if not sdk_info:
-            return None
-        try:
-            return {
-                'dsym_type': sdk_info.get('dsym_type') or 'none',
-                'sdk_name': sdk_info['sdk_name'],
-                'version_major': sdk_info['version_major'],
-                'version_minor': sdk_info['version_minor'],
-                'version_patchlevel': sdk_info.get('version_patchlevel') or 0,
-                'build': sdk_info.get('build'),
-            }
-        except KeyError as e:
-            raise InterfaceValidationError('Missing value for sdk_info: %s' % e.args[0])
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 76f4973d50..027f50d299 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -15,11 +15,9 @@ import six
 
 from django.conf import settings
 
-from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
-from sentry.interfaces.schemas import validate_and_default_interface
+from sentry.interfaces.base import Interface, prune_empty_keys
 from sentry.interfaces.stacktrace import Stacktrace, slim_frame_data
-from sentry.utils import json
-from sentry.utils.safe import get_path, trim
+from sentry.utils.safe import get_path
 
 _type_value_re = re.compile('^(\w+):(.*)$')
 
@@ -137,70 +135,19 @@ class Mechanism(Interface):
     """
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
-        if rust_renormalized:
-            for key in (
-                'type',
-                'synthetic',
-                'description',
-                'help_link',
-                'handled',
-                'data',
-                'meta',
-            ):
-                data.setdefault(key, None)
-
-            return cls(**data)
-
-        data = upgrade_legacy_mechanism(data)
-        is_valid, errors = validate_and_default_interface(data, cls.path)
-        if not is_valid:
-            raise InterfaceValidationError("Invalid mechanism")
-
-        if not data.get('type'):
-            raise InterfaceValidationError("No 'type' present")
-
-        mechanism_meta = data.get('meta') or {}
-        mach_exception = mechanism_meta.get('mach_exception')
-        if mach_exception is not None:
-            mach_exception = prune_empty_keys({
-                'exception': mach_exception['exception'],
-                'code': mach_exception['code'],
-                'subcode': mach_exception['subcode'],
-                'name': mach_exception.get('name'),
-            })
-
-        signal = mechanism_meta.get('signal')
-        if signal is not None:
-            signal = prune_empty_keys({
-                'number': signal['number'],
-                'code': signal.get('code'),
-                'name': signal.get('name'),
-                'code_name': signal.get('code_name'),
-            })
-
-        errno = mechanism_meta.get('errno')
-        if errno is not None:
-            errno = prune_empty_keys({
-                'number': errno['number'],
-                'name': errno.get('name'),
-            })
-
-        kwargs = {
-            'type': trim(data['type'], 128),
-            'synthetic': data.get('synthetic'),
-            'description': trim(data.get('description'), 1024),
-            'help_link': trim(data.get('help_link'), 1024),
-            'handled': data.get('handled'),
-            'data': trim(data.get('data'), 4096),
-            'meta': {
-                'errno': errno,
-                'mach_exception': mach_exception,
-                'signal': signal,
-            },
-        }
-
-        return cls(**kwargs)
+    def to_python(cls, data):
+        for key in (
+            'type',
+            'synthetic',
+            'description',
+            'help_link',
+            'handled',
+            'data',
+            'meta',
+        ):
+            data.setdefault(key, None)
+
+        return cls(**data)
 
     def to_json(self):
         return prune_empty_keys({
@@ -282,20 +229,11 @@ class SingleException(Interface):
     grouping_variants = ['system', 'app']
 
     @classmethod
-    def to_python(cls, data, slim_frames=True, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
-        if not rust_renormalized:
-            is_valid, errors = validate_and_default_interface(data, cls.path)
-            if not is_valid:
-                raise InterfaceValidationError("Invalid exception")
-
-            if not (data.get('type') or data.get('value')):
-                raise InterfaceValidationError("No 'type' or 'value' present")
-
+    def to_python(cls, data, slim_frames=True):
         if get_path(data, 'stacktrace', 'frames', filter=True):
             stacktrace = Stacktrace.to_python(
                 data['stacktrace'],
                 slim_frames=slim_frames,
-                rust_renormalized=rust_renormalized
             )
         else:
             stacktrace = None
@@ -303,7 +241,6 @@ class SingleException(Interface):
         if get_path(data, 'raw_stacktrace', 'frames', filter=True):
             raw_stacktrace = Stacktrace.to_python(
                 data['raw_stacktrace'], slim_frames=slim_frames, raw=True,
-                rust_renormalized=rust_renormalized
             )
         else:
             raw_stacktrace = None
@@ -311,31 +248,18 @@ class SingleException(Interface):
         type = data.get('type')
         value = data.get('value')
 
-        if not rust_renormalized:
-            if isinstance(value, six.string_types):
-                if type is None:
-                    m = _type_value_re.match(value)
-                    if m:
-                        type = m.group(1)
-                        value = m.group(2).strip()
-            elif value is not None:
-                value = json.dumps(value)
-
-            value = trim(value, 4096)
-
         if data.get('mechanism'):
-            mechanism = Mechanism.to_python(data['mechanism'],
-                                            rust_renormalized=rust_renormalized)
+            mechanism = Mechanism.to_python(data['mechanism'])
         else:
             mechanism = None
 
         kwargs = {
-            'type': trim(type, 128),
+            'type': type,
             'value': value,
-            'module': trim(data.get('module'), 128),
+            'module': data.get('module'),
             'mechanism': mechanism,
             'stacktrace': stacktrace,
-            'thread_id': trim(data.get('thread_id'), 40),
+            'thread_id': data.get('thread_id'),
             'raw_stacktrace': raw_stacktrace,
         }
 
@@ -461,42 +385,14 @@ class Exception(Interface):
         return len(self.exceptions())
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
-        if not rust_renormalized:
-            if data and 'values' not in data and 'exc_omitted' not in data:
-                data = {"values": [data]}
-
-        values = get_path(data, 'values', default=[])
-
-        if not rust_renormalized:
-            if not isinstance(values, list):
-                raise InterfaceValidationError("Invalid value for 'values'")
-
-        kwargs = {
-            'values': [
-                v and SingleException.to_python(
-                    v, slim_frames=False, rust_renormalized=rust_renormalized)
-                for v in values
+    def to_python(cls, data):
+        return cls(
+            values=[
+                v and SingleException.to_python(v, slim_frames=False)
+                for v in get_path(data, 'values', default=[])
             ],
-        }
-
-        if not rust_renormalized:
-            if data.get('exc_omitted'):
-                if len(data['exc_omitted']) != 2:
-                    raise InterfaceValidationError("Invalid value for 'exc_omitted'")
-                kwargs['exc_omitted'] = data['exc_omitted']
-            else:
-                kwargs['exc_omitted'] = None
-        else:
-            kwargs.setdefault('exc_omitted', None)
-
-        instance = cls(**kwargs)
-
-        if not rust_renormalized:
-            # we want to wait to slim things til we've reconciled in_app
-            slim_exception_data(instance)
-
-        return instance
+            exc_omitted=data.get('exc_omitted')
+        )
 
     # TODO(ja): Fix all following methods when to_python is refactored. All
     # methods below might throw if None exceptions are in ``values``.
diff --git a/src/sentry/interfaces/geo.py b/src/sentry/interfaces/geo.py
index b6a6ee49f3..1ee5307f1f 100644
--- a/src/sentry/interfaces/geo.py
+++ b/src/sentry/interfaces/geo.py
@@ -4,7 +4,7 @@ __all__ = ('Geo', )
 
 import six
 
-from sentry.interfaces.base import Interface, RUST_RENORMALIZED_DEFAULT
+from sentry.interfaces.base import Interface
 from sentry.utils.geo import geo_by_addr
 
 
@@ -20,7 +20,7 @@ class Geo(Interface):
     """
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+    def to_python(cls, data):
         data = {
             'country_code': data.get('country_code'),
             'city': data.get('city'),
diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index d97993d8bf..68c14c0b17 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -13,18 +13,14 @@ __all__ = ('Http', )
 import re
 import six
 
-from django.conf import settings
 from django.utils.translation import ugettext as _
 from django.utils.http import urlencode
-from six.moves.urllib.parse import parse_qsl, urlsplit, urlunsplit
+from six.moves.urllib.parse import parse_qsl
 
-from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
-from sentry.interfaces.schemas import validate_and_default_interface
+from sentry.interfaces.base import Interface, prune_empty_keys
 from sentry.utils import json
 from sentry.utils.strings import to_unicode
-from sentry.utils.safe import trim, trim_dict, trim_pairs, get_path
-from sentry.utils.http import heuristic_decode
-from sentry.utils.validators import validate_ip
+from sentry.utils.safe import get_path
 from sentry.web.helpers import render_to_string
 
 # Instead of relying on a list of hardcoded methods, just loosly match
@@ -124,127 +120,20 @@ class Http(Interface):
     FORM_TYPE = 'application/x-www-form-urlencoded'
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
-        if rust_renormalized:
-            data.setdefault('query_string', [])
-            for key in (
-                "method",
-                "url",
-                "fragment",
-                "cookies",
-                "headers",
-                "data",
-                "env",
-                "inferred_content_type",
-            ):
-                data.setdefault(key, None)
-            return cls(**data)
-
-        is_valid, errors = validate_and_default_interface(data, cls.path)
-        if not is_valid:
-            raise InterfaceValidationError("Invalid interface data")
-
-        kwargs = {}
-
-        if data.get('method'):
-            method = data['method'].upper()
-            # Optimize for the common path here, where it's a GET/POST, falling
-            # back to a regular expresion test
-            if method not in ('GET', 'POST') and not http_method_re.match(method):
-                raise InterfaceValidationError("Invalid value for 'method'")
-            kwargs['method'] = method
-        else:
-            kwargs['method'] = None
-
-        if data.get('url', None):
-            url = to_unicode(data['url'])
-            # The JavaScript SDK used to send an ellipsis character for
-            # truncated URLs. Canonical URLs do not contain UTF-8 characters in
-            # either the path, query string or fragment, so we replace it with
-            # three dots (which is the behavior of other SDKs). This effectively
-            # makes the string two characters longer, but it will be trimmed
-            # again down below.
-            if url.endswith(u"\u2026"):
-                url = url[:-1] + "..."
-            scheme, netloc, path, query_bit, fragment_bit = urlsplit(url)
-        else:
-            scheme = netloc = path = query_bit = fragment_bit = None
-
-        query_string = data.get('query_string') or query_bit
-        if query_string:
-            if isinstance(query_string, six.string_types):
-                if query_string[0] == '?':
-                    query_string = query_string[1:]
-                if query_string.endswith(u"\u2026"):
-                    query_string = query_string[:-1] + "..."
-                query_string = [
-                    (to_unicode(k), jsonify(v))
-                    for k, v in parse_qsl(query_string, keep_blank_values=True)
-                ]
-            elif isinstance(query_string, dict):
-                query_string = [(to_unicode(k), jsonify(v)) for k, v in six.iteritems(query_string)]
-            elif isinstance(query_string, list):
-                query_string = [
-                    tuple(tup) for tup in query_string
-                    if isinstance(tup, (tuple, list)) and len(tup) == 2
-                ]
-            else:
-                query_string = []
-            kwargs['query_string'] = trim(query_string, 4096)
-        else:
-            kwargs['query_string'] = []
-
-        fragment = data.get('fragment') or fragment_bit
-
-        cookies = data.get('cookies')
-        # if cookies were [also] included in headers we
-        # strip them out
-        if data.get("headers"):
-            headers, cookie_header = format_headers(get_path(data, "headers", filter=True))
-            if not cookies and cookie_header:
-                cookies = cookie_header
-        else:
-            headers = ()
-
-        # We prefer the body to be a string, since we can then attempt to parse it
-        # as JSON OR decode it as a URL encoded query string, without relying on
-        # the correct content type header being passed.
-        body = data.get('data')
-
-        content_type = next((v for k, v in headers if k == 'Content-Type'), None)
-
-        # Remove content type parameters
-        if content_type is not None:
-            content_type = content_type.partition(';')[0].rstrip()
-
-        # We process request data once during ingestion and again when
-        # requesting the http interface over the API. Avoid overwriting
-        # decoding the body again.
-        inferred_content_type = data.get('inferred_content_type', content_type)
-
-        if 'inferred_content_type' not in data and not isinstance(body, dict):
-            body, inferred_content_type = heuristic_decode(body, content_type)
-
-        if body:
-            body = trim(body, settings.SENTRY_MAX_HTTP_BODY_SIZE)
-
-        env = data.get('env', {})
-        # TODO (alex) This could also be accomplished with schema (with formats)
-        if 'REMOTE_ADDR' in env:
-            try:
-                validate_ip(env['REMOTE_ADDR'], required=False)
-            except ValueError:
-                del env['REMOTE_ADDR']
-
-        kwargs['inferred_content_type'] = inferred_content_type
-        kwargs['cookies'] = trim_pairs(format_cookies(cookies))
-        kwargs['env'] = trim_dict(env)
-        kwargs['headers'] = trim_pairs(headers)
-        kwargs['data'] = fix_broken_encoding(body)
-        kwargs['url'] = urlunsplit((scheme, netloc, path, '', ''))
-        kwargs['fragment'] = trim(fragment, 1024)
-
-        return cls(**kwargs)
+    def to_python(cls, data):
+        data.setdefault('query_string', [])
+        for key in (
+            "method",
+            "url",
+            "fragment",
+            "cookies",
+            "headers",
+            "data",
+            "env",
+            "inferred_content_type",
+        ):
+            data.setdefault(key, None)
+        return cls(**data)
 
     def to_json(self):
         return prune_empty_keys({
diff --git a/src/sentry/interfaces/message.py b/src/sentry/interfaces/message.py
index cd794213e6..f895f6b6ce 100644
--- a/src/sentry/interfaces/message.py
+++ b/src/sentry/interfaces/message.py
@@ -12,11 +12,8 @@ __all__ = ('Message', )
 
 import six
 
-from django.conf import settings
-
-from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
+from sentry.interfaces.base import Interface, prune_empty_keys
 from sentry.utils import json
-from sentry.utils.safe import trim
 
 
 def stringify(value):
@@ -48,48 +45,14 @@ class Message(Interface):
     external_type = 'message'
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
-        if rust_renormalized:
-            for key in (
-                'message',
-                'formatted',
-                'params',
-            ):
-                data.setdefault(key, None)
-            return cls(**data)
-
-        formatted = stringify(data.get('formatted'))
-        message = stringify(data.get('message'))
-        if formatted is None and message is None:
-            raise InterfaceValidationError("No message present")
-
-        params = data.get('params')
-        if isinstance(params, (list, tuple)):
-            params = tuple(p for p in params)
-        elif isinstance(params, dict):
-            params = {k: v for k, v in six.iteritems(params)}
-        else:
-            params = ()
-
-        if formatted is None and params:
-            try:
-                if '%' in message:
-                    formatted = message % params
-                elif '{}' in message and isinstance(params, tuple):
-                    formatted = message.format(*params)
-                # NB: Named newstyle arguments were never supported
-            except Exception:
-                pass
-
-        if formatted is None or message == formatted:
-            formatted = message
-            message = None
-
-        return cls(
-            formatted=trim(formatted, settings.SENTRY_MAX_MESSAGE_LENGTH),
-            message=trim(message, settings.SENTRY_MAX_MESSAGE_LENGTH),
-            params=trim(params, 1024),
-        )
+    def to_python(cls, data):
+        for key in (
+            'message',
+            'formatted',
+            'params',
+        ):
+            data.setdefault(key, None)
+        return cls(**data)
 
     def to_json(self):
         return prune_empty_keys({
diff --git a/src/sentry/interfaces/sdk.py b/src/sentry/interfaces/sdk.py
index 84591c93e3..4c3ec968ce 100644
--- a/src/sentry/interfaces/sdk.py
+++ b/src/sentry/interfaces/sdk.py
@@ -5,8 +5,7 @@ __all__ = ('Sdk', )
 from distutils.version import LooseVersion
 from django.conf import settings
 
-from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
-from sentry.utils.safe import trim
+from sentry.interfaces.base import Interface, prune_empty_keys
 
 
 def get_with_prefix(d, k, default=None, delimiter=":"):
@@ -50,37 +49,16 @@ class Sdk(Interface):
     """
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
-        if rust_renormalized:
-            for key in (
-                'name',
-                'version',
-                'integrations',
-                'packages',
-            ):
-                data.setdefault(key, None)
-
-            return cls(**data)
-
-        name = data.get('name')
-        version = data.get('version')
-
-        integrations = data.get('integrations')
-        if integrations and not isinstance(integrations, list):
-            raise InterfaceValidationError("'integrations' must be a list")
-
-        packages = data.get('packages')
-        if packages and not isinstance(packages, list):
-            raise InterfaceValidationError("'packages' must be a list")
-
-        kwargs = {
-            'name': trim(name, 128),
-            'version': trim(version, 128),
-            'integrations': integrations,
-            'packages': packages,
-        }
-
-        return cls(**kwargs)
+    def to_python(cls, data):
+        for key in (
+            'name',
+            'version',
+            'integrations',
+            'packages',
+        ):
+            data.setdefault(key, None)
+
+        return cls(**data)
 
     def to_json(self):
         return prune_empty_keys({
diff --git a/src/sentry/interfaces/security.py b/src/sentry/interfaces/security.py
index ea7e2761fb..bf8d24d9a8 100644
--- a/src/sentry/interfaces/security.py
+++ b/src/sentry/interfaces/security.py
@@ -15,7 +15,7 @@ __all__ = ('Csp', 'Hpkp', 'ExpectCT', 'ExpectStaple')
 
 from six.moves.urllib.parse import urlsplit, urlunsplit
 
-from sentry.interfaces.base import Interface, InterfaceValidationError, RUST_RENORMALIZED_DEFAULT
+from sentry.interfaces.base import Interface, InterfaceValidationError
 from sentry.interfaces.schemas import validate_and_default_interface, INPUT_SCHEMAS
 from sentry.utils import json
 from sentry.utils.cache import memoize
@@ -100,7 +100,7 @@ class SecurityReport(Interface):
         raise NotImplementedError
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+    def to_python(cls, data):
         # TODO(markus): semaphore does not validate security interfaces yet
         is_valid, errors = validate_and_default_interface(data, cls.path)
         if not is_valid:
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 169a263fc8..a4a956b365 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -11,17 +11,13 @@ from __future__ import absolute_import
 __all__ = ('Stacktrace', )
 
 import six
-from itertools import islice, chain
 
 from django.conf import settings
 from django.utils.translation import ugettext as _
-from six.moves.urllib.parse import urlparse
 
 from sentry.app import env
-from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
-from sentry.interfaces.schemas import validate_and_default_interface
+from sentry.interfaces.base import Interface, prune_empty_keys
 from sentry.models import UserOption
-from sentry.utils.safe import trim, trim_dict
 from sentry.web.helpers import render_to_string
 
 
@@ -194,146 +190,32 @@ class Frame(Interface):
     grouping_variants = ['system', 'app']
 
     @classmethod
-    def to_python(cls, data, raw=False, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
-        if rust_renormalized:
-            for key in (
-                'abs_path',
-                'colno',
-                'context_line',
-                'data',
-                'errors',
-                'filename',
-                'function',
-                'raw_function',
-                'image_addr',
-                'in_app',
-                'instruction_addr',
-                'lineno',
-                'module',
-                'package',
-                'platform',
-                'post_context',
-                'pre_context',
-                'symbol',
-                'symbol_addr',
-                'trust',
-                'vars',
-            ):
-                data.setdefault(key, None)
-            return cls(**data)
-
-        is_valid, errors = validate_and_default_interface(data, cls.path)
-        if not is_valid:
-            raise InterfaceValidationError("Invalid stack frame data.")
-
-        abs_path = data.get('abs_path')
-        filename = data.get('filename')
-        symbol = data.get('symbol')
-        function = data.get('function')
-        raw_function = data.get('raw_function')
-        module = data.get('module')
-        package = data.get('package')
-
-        # For legacy reasons
-        if function in ('?', ''):
-            function = None
-
-        # For consistency reasons
-        if symbol in ('?', ''):
-            symbol = None
-
-        # Some of this processing should only be done for non raw frames
-        if not raw:
-            # absolute path takes priority over filename
-            # (in the end both will get set)
-            if not abs_path:
-                abs_path = filename
-                filename = None
-
-            if not filename and abs_path:
-                if is_url(abs_path):
-                    urlparts = urlparse(abs_path)
-                    if urlparts.path:
-                        filename = urlparts.path
-                    else:
-                        filename = abs_path
-                else:
-                    filename = abs_path
-
-        platform = data.get('platform')
-
-        context_locals = data.get('vars') or {}
-        if isinstance(context_locals, (list, tuple)):
-            context_locals = dict(enumerate(context_locals))
-        elif not isinstance(context_locals, dict):
-            context_locals = {}
-        context_locals = trim_dict(context_locals, object_hook=handle_nan)
-
-        # extra data is used purely by internal systems,
-        # so we dont trim it
-        extra_data = data.get('data') or {}
-        if isinstance(extra_data, (list, tuple)):
-            extra_data = dict(enumerate(extra_data))
-
-        # XXX: handle lines which were sent as 'null'
-        context_line = trim(data.get('context_line'), 256)
-        pre_context = data.get('pre_context', None)
-        if isinstance(pre_context, list) and pre_context:
-            pre_context = [c or '' for c in pre_context]
-        else:
-            pre_context = None
-
-        post_context = data.get('post_context', None)
-        if isinstance(post_context, list) and post_context:
-            post_context = [c or '' for c in post_context]
-        else:
-            post_context = None
-
-        if not context_line and (pre_context or post_context):
-            context_line = ''
-
-        in_app = validate_bool(data.get('in_app'), False)
-
-        kwargs = {
-            'abs_path': trim(abs_path, 2048),
-            'filename': trim(filename, 256),
-            'platform': platform,
-            'module': trim(module, 256),
-            'function': trim(function, 256),
-            'raw_function': trim(raw_function, 256),
-            'package': package,
-            'image_addr': to_hex_addr(data.get('image_addr')),
-            'symbol': trim(symbol, 256),
-            'symbol_addr': to_hex_addr(data.get('symbol_addr')),
-            'instruction_addr': to_hex_addr(data.get('instruction_addr')),
-            'trust': trim(data.get('trust'), 16),
-            'in_app': in_app,
-            'context_line': context_line,
-            # TODO(dcramer): trim pre/post_context
-            'pre_context': pre_context,
-            'post_context': post_context,
-            'vars': context_locals or None,
-            'data': extra_data or None,
-            'errors': data.get('errors'),
-        }
-
-        if data.get('lineno') is not None:
-            lineno = int(data['lineno'])
-            if lineno < 0:
-                lineno = None
-            kwargs['lineno'] = lineno
-        else:
-            kwargs['lineno'] = None
-
-        if data.get('colno') is not None:
-            colno = int(data['colno'])
-            if colno < 0:
-                colno = None
-            kwargs['colno'] = colno
-        else:
-            kwargs['colno'] = None
-
-        return cls(**kwargs)
+    def to_python(cls, data, raw=False):
+        for key in (
+            'abs_path',
+            'colno',
+            'context_line',
+            'data',
+            'errors',
+            'filename',
+            'function',
+            'raw_function',
+            'image_addr',
+            'in_app',
+            'instruction_addr',
+            'lineno',
+            'module',
+            'package',
+            'platform',
+            'post_context',
+            'pre_context',
+            'symbol',
+            'symbol_addr',
+            'trust',
+            'vars',
+        ):
+            data.setdefault(key, None)
+        return cls(**data)
 
     def to_json(self):
         return prune_empty_keys({
@@ -590,61 +472,17 @@ class Stacktrace(Interface):
         return iter(self.frames)
 
     @classmethod
-    def to_python(cls, data, slim_frames=True, raw=False,
-                  rust_renormalized=RUST_RENORMALIZED_DEFAULT):
-        if rust_renormalized:
-            data = dict(data)
-            frame_list = []
-            for f in data.get('frames') or []:
-                # XXX(dcramer): handle PHP sending an empty array for a frame
-                frame_list.append(
-                    Frame.to_python(
-                        f or {},
-                        raw=raw,
-                        rust_renormalized=rust_renormalized))
-
-            data['frames'] = frame_list
-            data.setdefault('registers', None)
-            data.setdefault('frames_omitted', None)
-            return cls(**data)
-
-        is_valid, errors = validate_and_default_interface(data, cls.path)
-        if not is_valid:
-            raise InterfaceValidationError("Invalid stack frame data.")
-
-        # Trim down the frame list to a hard limit. Leave the last frame in place in case
-        # it's useful for debugging.
-        frameiter = data.get('frames') or []
-        if len(frameiter) > settings.SENTRY_STACKTRACE_FRAMES_HARD_LIMIT:
-            frameiter = chain(
-                islice(data['frames'], settings.SENTRY_STACKTRACE_FRAMES_HARD_LIMIT - 1), (data['frames'][-1],))
-
+    def to_python(cls, data, slim_frames=True, raw=False):
+        data = dict(data)
         frame_list = []
-
-        for f in frameiter:
-            if f is None:
-                continue
+        for f in data.get('frames') or []:
             # XXX(dcramer): handle PHP sending an empty array for a frame
-            frame_list.append(
-                Frame.to_python(
-                    f or {},
-                    raw=raw,
-                    rust_renormalized=rust_renormalized))
-
-        kwargs = {
-            'frames': frame_list,
-        }
-
-        kwargs['registers'] = None
-        if data.get('registers') and isinstance(data['registers'], dict):
-            kwargs['registers'] = data.get('registers')
-
-        kwargs['frames_omitted'] = data.get('frames_omitted') or None
+            frame_list.append(Frame.to_python(f or {}, raw=raw))
 
-        instance = cls(**kwargs)
-        if slim_frames:
-            slim_frame_data(instance)
-        return instance
+        data['frames'] = frame_list
+        data.setdefault('registers', None)
+        data.setdefault('frames_omitted', None)
+        return cls(**data)
 
     def get_has_system_frames(self):
         # This is a simplified logic from how the normalizer works.
diff --git a/src/sentry/interfaces/template.py b/src/sentry/interfaces/template.py
index f240ecdf0f..fcd2bdd50b 100644
--- a/src/sentry/interfaces/template.py
+++ b/src/sentry/interfaces/template.py
@@ -9,10 +9,8 @@ from __future__ import absolute_import
 
 __all__ = ('Template', )
 
-from sentry.interfaces.base import Interface, InterfaceValidationError, RUST_RENORMALIZED_DEFAULT
-from sentry.interfaces.schemas import validate_and_default_interface
+from sentry.interfaces.base import Interface
 from sentry.interfaces.stacktrace import get_context
-from sentry.utils.safe import trim
 
 
 class Template(Interface):
@@ -42,33 +40,17 @@ class Template(Interface):
     score = 1100
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
-        if rust_renormalized:
-            for key in (
-                'abs_path',
-                'filename',
-                'context_line',
-                'lineno',
-                'pre_context',
-                'post_context',
-            ):
-                data.setdefault(key, None)
-            return cls(**data)
-
-        is_valid, errors = validate_and_default_interface(data, cls.path)
-        if not is_valid:
-            raise InterfaceValidationError("Invalid template")
-
-        kwargs = {
-            'abs_path': trim(data.get('abs_path', None), 256),
-            'filename': trim(data.get('filename', None), 256),
-            'context_line': trim(data.get('context_line', None), 256),
-            'lineno': int(data['lineno']) if data.get('lineno', None) is not None else None,
-            # TODO(dcramer): trim pre/post_context
-            'pre_context': data.get('pre_context'),
-            'post_context': data.get('post_context'),
-        }
-        return cls(**kwargs)
+    def to_python(cls, data):
+        for key in (
+            'abs_path',
+            'filename',
+            'context_line',
+            'lineno',
+            'pre_context',
+            'post_context',
+        ):
+            data.setdefault(key, None)
+        return cls(**data)
 
     def to_string(self, event, is_public=False, **kwargs):
         context = get_context(
diff --git a/src/sentry/interfaces/threads.py b/src/sentry/interfaces/threads.py
index bdc4b310b5..c3ca33cdde 100644
--- a/src/sentry/interfaces/threads.py
+++ b/src/sentry/interfaces/threads.py
@@ -1,13 +1,13 @@
 from __future__ import absolute_import
 
-from sentry.interfaces.base import Interface, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
+from sentry.interfaces.base import Interface, prune_empty_keys
 from sentry.interfaces.stacktrace import Stacktrace
 from sentry.utils.safe import trim
 
 __all__ = ('Threads', )
 
 
-def get_stacktrace(value, raw=False, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+def get_stacktrace(value, raw=False):
     # Special case: if the thread has no frames we set the
     # stacktrace to none.  Otherwise this will fail really
     # badly.
@@ -20,7 +20,7 @@ class Threads(Interface):
     grouping_variants = ['system', 'app']
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+    def to_python(cls, data):
         threads = []
 
         for thread in data.get('values') or ():
@@ -30,8 +30,8 @@ class Threads(Interface):
                 continue
             threads.append(
                 {
-                    'stacktrace': get_stacktrace(thread.get('stacktrace'), rust_renormalized=rust_renormalized),
-                    'raw_stacktrace': get_stacktrace(thread.get('raw_stacktrace'), raw=True, rust_renormalized=rust_renormalized),
+                    'stacktrace': get_stacktrace(thread.get('stacktrace')),
+                    'raw_stacktrace': get_stacktrace(thread.get('raw_stacktrace'), raw=True),
                     'id': trim(thread.get('id'), 40),
                     'crashed': bool(thread.get('crashed')),
                     'current': bool(thread.get('current')),
diff --git a/src/sentry/interfaces/user.py b/src/sentry/interfaces/user.py
index 4e2db5d24f..fa723e27a2 100644
--- a/src/sentry/interfaces/user.py
+++ b/src/sentry/interfaces/user.py
@@ -9,14 +9,10 @@ from __future__ import absolute_import
 
 __all__ = ('User', )
 
-import six
 
-from sentry.interfaces.base import Interface, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
+from sentry.interfaces.base import Interface, prune_empty_keys
 from sentry.interfaces.geo import Geo
-from sentry.utils.safe import trim, trim_dict
 from sentry.web.helpers import render_to_string
-from sentry.utils.validators import validate_ip
-from sentry.constants import MAX_EMAIL_FIELD_LENGTH
 
 
 class User(Interface):
@@ -41,73 +37,21 @@ class User(Interface):
     display_score = 2020
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
-        if rust_renormalized:
-            data = data.copy()
-            for key in (
-                'id',
-                'email',
-                'username',
-                'ip_address',
-                'name',
-                'geo',
-                'data',
-            ):
-                data.setdefault(key, None)
-            if data['geo'] is not None:
-                data['geo'] = Geo.to_python(data['geo'])
-            return cls(**data)
-
+    def to_python(cls, data):
         data = data.copy()
-
-        ident = data.pop('id', None)
-        if ident is not None:
-            ident = trim(six.text_type(ident), 128)
-
-        email = data.pop('email', None)
-        if not isinstance(email, six.string_types):
-            email = None
-        email = trim(email, MAX_EMAIL_FIELD_LENGTH)
-
-        username = data.pop('username', None)
-        if username is not None:
-            username = trim(six.text_type(username), 128)
-
-        name = data.pop('name', None)
-        if name is not None:
-            name = trim(six.text_type(name), 128)
-
-        try:
-            ip_address = validate_ip(data.pop('ip_address', None), False)
-        except ValueError:
-            ip_address = None
-
-        geo = data.pop('geo', None)
-        if not geo and ip_address:
-            geo = Geo.from_ip_address(ip_address)
-        elif geo:
-            geo = Geo.to_python(geo)
-
-        extra_data = data.pop('data', None)
-        if not isinstance(extra_data, dict):
-            extra_data = {}
-        extra_data.update(data)
-
-        # TODO(dcramer): patch in fix to deal w/ old data but not allow new
-        # if not (ident or email or username or ip_address):
-        #     raise ValueError('No identifying value')
-
-        kwargs = {
-            'id': ident,
-            'email': email,
-            'username': username,
-            'ip_address': ip_address,
-            'name': name,
-            'geo': geo,
-            'data': trim_dict(extra_data)
-        }
-
-        return cls(**kwargs)
+        for key in (
+            'id',
+            'email',
+            'username',
+            'ip_address',
+            'name',
+            'geo',
+            'data',
+        ):
+            data.setdefault(key, None)
+        if data['geo'] is not None:
+            data['geo'] = Geo.to_python(data['geo'])
+        return cls(**data)
 
     def to_json(self):
         return prune_empty_keys({
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 30329b5903..7a1d6ba3ae 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -22,7 +22,7 @@ from hashlib import md5
 
 from semaphore.processing import StoreNormalizer
 
-from sentry import eventtypes, options
+from sentry import eventtypes
 from sentry.constants import EVENT_ORDERING_KEY
 from sentry.db.models import (
     BoundedBigIntegerField,
@@ -34,23 +34,11 @@ from sentry.db.models import (
 )
 from sentry.db.models.manager import EventManager, SnubaEventManager
 from sentry.interfaces.base import get_interfaces
-from sentry.utils import json, metrics
+from sentry.utils import json
 from sentry.utils.cache import memoize
 from sentry.utils.canonical import CanonicalKeyDict, CanonicalKeyView
 from sentry.utils.safe import get_path
 from sentry.utils.strings import truncatechars
-from sentry.utils.sdk import configure_scope
-
-
-def _should_skip_to_python(event_id):
-    if not event_id:
-        return False
-
-    sample_rate = options.get('store.empty-interface-sample-rate')
-    if sample_rate == 0:
-        return False
-
-    return int(md5(event_id).hexdigest(), 16) % (10 ** 8) <= (sample_rate * (10 ** 8))
 
 
 class EventDict(CanonicalKeyDict):
@@ -69,22 +57,9 @@ class EventDict(CanonicalKeyDict):
             (isinstance(data, NodeData) and isinstance(data.data, EventDict))
         )
 
-        with configure_scope() as scope:
-            scope.set_tag("rust.is_renormalized", is_renormalized)
-            scope.set_tag("rust.skip_renormalization", skip_renormalization)
-            scope.set_tag("rust.renormalized", "null")
-
         if not skip_renormalization and not is_renormalized:
-            rust_renormalized = _should_skip_to_python(data.get('event_id'))
-            if rust_renormalized:
-                normalizer = StoreNormalizer(is_renormalize=True)
-                data = normalizer.normalize_event(dict(data))
-
-            metrics.incr('rust.renormalized',
-                         tags={'value': rust_renormalized})
-
-            with configure_scope() as scope:
-                scope.set_tag("rust.renormalized", rust_renormalized)
+            normalizer = StoreNormalizer(is_renormalize=True)
+            data = normalizer.normalize_event(dict(data))
 
         CanonicalKeyDict.__init__(self, data, **kwargs)
 
@@ -136,12 +111,7 @@ class EventCommon(object):
         self._project_cache = project
 
     def get_interfaces(self):
-        was_renormalized = _should_skip_to_python(self.event_id)
-
-        metrics.incr('event.get_interfaces',
-                     tags={'rust_renormalized': was_renormalized})
-
-        return CanonicalKeyView(get_interfaces(self.data, rust_renormalized=was_renormalized))
+        return CanonicalKeyView(get_interfaces(self.data))
 
     @memoize
     def interfaces(self):
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index a9783c9a65..20fc77159d 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-import pytest
 import mock
 import os
 
@@ -253,11 +252,3 @@ def pytest_runtest_teardown(item):
         model.objects.clear_local_cache()
 
     Hub.main.bind_client(None)
-
-
-@pytest.fixture(autouse=True)
-def _mock_skip_to_python(monkeypatch, request):
-    from sentry.interfaces.base import RUST_RENORMALIZED_DEFAULT
-    monkeypatch.setattr(
-        'sentry.models.event._should_skip_to_python',
-        lambda _: RUST_RENORMALIZED_DEFAULT)
diff --git a/tests/sentry/api/serializers/test_event.py b/tests/sentry/api/serializers/test_event.py
index fb4e008b3b..8851c510b4 100644
--- a/tests/sentry/api/serializers/test_event.py
+++ b/tests/sentry/api/serializers/test_event.py
@@ -215,7 +215,7 @@ class SnubaEventSerializerTest(TestCase):
             'location': 'somewhere',
             'culprit': 'foo',
             'timestamp': '2011-01-01T00:00:00Z',
-            'user_id': 123,
+            'user_id': '123',
             'email': 'test@test.com',
             'username': 'test',
             'ip_address': '192.168.0.1',
@@ -238,7 +238,7 @@ class SnubaEventSerializerTest(TestCase):
         assert result['location'] == event.location
         assert result['culprit'] == event.culprit
         assert result['dateCreated'] == event.datetime
-        assert result['user']['id'] == six.text_type(event.user_id)
+        assert result['user']['id'] == event.user_id
         assert result['user']['email'] == event.email
         assert result['user']['username'] == event.username
         assert result['user']['ip_address'] == event.ip_address
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_non_string_keys.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_non_string_keys.pysnap
index c3e7bed6fa..73b3c6de8f 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_non_string_keys.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_non_string_keys.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:34.876206Z'
+created: '2019-05-27T14:36:16.428735Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_breadcrumbs.py
 ---
@@ -8,7 +8,7 @@ to_json:
   values:
   - data:
       extra:
-        foo: '"bar"'
+        foo: bar
     level: info
     timestamp: 1458857193.973
     type: message
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input2.pysnap
index 5cd4b48f58..f9ed32534d 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input2.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input2.pysnap
@@ -1,7 +1,10 @@
 ---
-created: '2019-03-14T17:12:34.847215Z'
+created: '2019-05-22T14:45:11.044881Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_breadcrumbs.py
 ---
 errors: null
-to_json: {}
+to_json:
+  values:
+  - level: info
+    type: default
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input3.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input3.pysnap
index d27546f65b..b18f3c2462 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input3.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input3.pysnap
@@ -1,7 +1,10 @@
 ---
-created: '2019-03-14T17:12:34.856872Z'
+created: '2019-05-22T14:45:11.052228Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_breadcrumbs.py
 ---
 errors: null
-to_json: {}
+to_json:
+  values:
+  - level: info
+    type: default
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input4.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input4.pysnap
index d0d15f4d9d..988f3743db 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input4.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input4.pysnap
@@ -1,7 +1,7 @@
 ---
-created: '2019-03-14T17:12:34.866383Z'
+created: '2019-05-22T14:45:11.059085Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_breadcrumbs.py
 ---
 errors: null
-to_json: {}
+to_json: null
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_apple_behavior.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_apple_behavior.pysnap
index c8c9259568..9b3de9715e 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_apple_behavior.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_apple_behavior.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-19T19:18:09.262739Z'
+created: '2019-05-22T14:45:11.342313Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_debug_meta.py
 ---
@@ -9,12 +9,10 @@ to_json:
   - code_file: /var/containers/Bundle/Application/B33C37A8-F933-4B6B-9FFA-152282BFDF13/SentryTest.app/SentryTest
     debug_id: c05b4ddd-69a7-3840-a649-32180d341587
     image_addr: '0x100020000'
-    image_size: '0x8000'
+    image_size: 32768
     image_vmaddr: '0x100000000'
     type: macho
   sdk_info:
-    build: null
-    dsym_type: none
     sdk_name: iOS
     version_major: 9
     version_minor: 3
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_apple_behavior_with_arch.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_apple_behavior_with_arch.pysnap
index 96b6fb7d3a..d71c186328 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_apple_behavior_with_arch.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_apple_behavior_with_arch.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-19T19:18:09.270927Z'
+created: '2019-05-22T14:45:11.352473Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_debug_meta.py
 ---
@@ -10,12 +10,10 @@ to_json:
     code_file: /var/containers/Bundle/Application/B33C37A8-F933-4B6B-9FFA-152282BFDF13/SentryTest.app/SentryTest
     debug_id: c05b4ddd-69a7-3840-a649-32180d341587
     image_addr: '0x100020000'
-    image_size: '0x8000'
+    image_size: 32768
     image_vmaddr: '0x100000000'
     type: macho
   sdk_info:
-    build: null
-    dsym_type: none
     sdk_name: iOS
     version_major: 9
     version_minor: 3
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_null_values/input2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_null_values/input2.pysnap
index 10e745cb75..a61c82eee5 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_null_values/input2.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_null_values/input2.pysnap
@@ -1,7 +1,9 @@
 ---
-created: '2019-03-14T17:12:35.216716Z'
+created: '2019-05-22T14:45:11.332344Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_debug_meta.py
 ---
 errors: null
-to_json: {}
+to_json:
+  images:
+  - null
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_symbolic_behavior.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_symbolic_behavior.pysnap
index 01fef71c96..bd1d58fc52 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_symbolic_behavior.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_symbolic_behavior.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-19T19:18:09.279589Z'
+created: '2019-05-22T14:45:11.363053Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_debug_meta.py
 ---
@@ -9,12 +9,9 @@ to_json:
   - code_file: C:\projects\breakpad-tools\windows\Release\crash.exe
     debug_id: 3249d99d-0c40-4931-8610-f4e4fb0b6936-1
     image_addr: '0x2a0000'
-    image_size: '0x9000'
-    image_vmaddr: null
+    image_size: 36864
     type: symbolic
   sdk_info:
-    build: null
-    dsym_type: none
     sdk_name: Windows
     version_major: 10
     version_minor: 0
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_symbolic_behavior_with_arch.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_symbolic_behavior_with_arch.pysnap
index 14b7d2a7a2..0cb4003029 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_symbolic_behavior_with_arch.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_symbolic_behavior_with_arch.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-19T19:18:09.287387Z'
+created: '2019-05-22T14:45:11.372794Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_debug_meta.py
 ---
@@ -10,12 +10,9 @@ to_json:
     code_file: C:\projects\breakpad-tools\windows\Release\crash.exe
     debug_id: 3249d99d-0c40-4931-8610-f4e4fb0b6936-1
     image_addr: '0x2a0000'
-    image_size: '0x9000'
-    image_vmaddr: null
+    image_size: 36864
     type: symbolic
   sdk_info:
-    build: null
-    dsym_type: none
     sdk_name: Windows
     version_major: 10
     version_minor: 0
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_slim_exception_data_over_max.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_slim_exception_data_over_max.pysnap
index d6f3256f7a..9105144221 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_slim_exception_data_over_max.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_slim_exception_data_over_max.pysnap
@@ -1,13 +1,12 @@
 ---
-created: '2019-03-14T17:12:35.455057Z'
+created: '2019-05-22T14:45:11.531485Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_exception.py
 ---
 values:
 - stacktrace:
     frames:
-    - abs_path: exc 0 frame 0
-      context_line: b
+    - context_line: b
       filename: exc 0 frame 0
       post_context:
       - c
@@ -15,8 +14,7 @@ values:
       - a
       vars:
         foo: bar
-    - abs_path: exc 0 frame 1
-      context_line: b
+    - context_line: b
       filename: exc 0 frame 1
       post_context:
       - c
@@ -24,8 +22,7 @@ values:
       - a
       vars:
         foo: bar
-    - abs_path: exc 0 frame 2
-      context_line: b
+    - context_line: b
       filename: exc 0 frame 2
       post_context:
       - c
@@ -33,8 +30,7 @@ values:
       - a
       vars:
         foo: bar
-    - abs_path: exc 0 frame 3
-      context_line: b
+    - context_line: b
       filename: exc 0 frame 3
       post_context:
       - c
@@ -42,8 +38,7 @@ values:
       - a
       vars:
         foo: bar
-    - abs_path: exc 0 frame 4
-      context_line: b
+    - context_line: b
       filename: exc 0 frame 4
       post_context:
       - c
@@ -54,62 +49,46 @@ values:
   value: exc 0
 - stacktrace:
     frames:
-    - abs_path: exc 1 frame 0
-      context_line: b
+    - context_line: b
       filename: exc 1 frame 0
-    - abs_path: exc 1 frame 1
-      context_line: b
+    - context_line: b
       filename: exc 1 frame 1
-    - abs_path: exc 1 frame 2
-      context_line: b
+    - context_line: b
       filename: exc 1 frame 2
-    - abs_path: exc 1 frame 3
-      context_line: b
+    - context_line: b
       filename: exc 1 frame 3
-    - abs_path: exc 1 frame 4
-      context_line: b
+    - context_line: b
       filename: exc 1 frame 4
   value: exc 1
 - stacktrace:
     frames:
-    - abs_path: exc 2 frame 0
-      context_line: b
+    - context_line: b
       filename: exc 2 frame 0
-    - abs_path: exc 2 frame 1
-      context_line: b
+    - context_line: b
       filename: exc 2 frame 1
-    - abs_path: exc 2 frame 2
-      context_line: b
+    - context_line: b
       filename: exc 2 frame 2
-    - abs_path: exc 2 frame 3
-      context_line: b
+    - context_line: b
       filename: exc 2 frame 3
-    - abs_path: exc 2 frame 4
-      context_line: b
+    - context_line: b
       filename: exc 2 frame 4
   value: exc 2
 - stacktrace:
     frames:
-    - abs_path: exc 3 frame 0
-      context_line: b
+    - context_line: b
       filename: exc 3 frame 0
-    - abs_path: exc 3 frame 1
-      context_line: b
+    - context_line: b
       filename: exc 3 frame 1
-    - abs_path: exc 3 frame 2
-      context_line: b
+    - context_line: b
       filename: exc 3 frame 2
-    - abs_path: exc 3 frame 3
-      context_line: b
+    - context_line: b
       filename: exc 3 frame 3
-    - abs_path: exc 3 frame 4
-      context_line: b
+    - context_line: b
       filename: exc 3 frame 4
   value: exc 3
 - stacktrace:
     frames:
-    - abs_path: exc 4 frame 0
-      context_line: b
+    - context_line: b
       filename: exc 4 frame 0
       post_context:
       - c
@@ -117,8 +96,7 @@ values:
       - a
       vars:
         foo: bar
-    - abs_path: exc 4 frame 1
-      context_line: b
+    - context_line: b
       filename: exc 4 frame 1
       post_context:
       - c
@@ -126,8 +104,7 @@ values:
       - a
       vars:
         foo: bar
-    - abs_path: exc 4 frame 2
-      context_line: b
+    - context_line: b
       filename: exc 4 frame 2
       post_context:
       - c
@@ -135,8 +112,7 @@ values:
       - a
       vars:
         foo: bar
-    - abs_path: exc 4 frame 3
-      context_line: b
+    - context_line: b
       filename: exc 4 frame 3
       post_context:
       - c
@@ -144,8 +120,7 @@ values:
       - a
       vars:
         foo: bar
-    - abs_path: exc 4 frame 4
-      context_line: b
+    - context_line: b
       filename: exc 4 frame 4
       post_context:
       - c
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_slim_exception_data_under_max.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_slim_exception_data_under_max.pysnap
index 5aef84bc47..a8c130dfd1 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_slim_exception_data_under_max.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_slim_exception_data_under_max.pysnap
@@ -1,11 +1,10 @@
 ---
-created: '2019-03-14T17:12:35.431280Z'
+created: '2019-05-22T14:45:11.515847Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_exception.py
 ---
 values:
 - stacktrace:
     frames:
-    - abs_path: foo
-      filename: foo
+    - filename: foo
   value: foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input0.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input0.pysnap
index de31a00da0..529574172b 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input0.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input0.pysnap
@@ -1,9 +1,19 @@
 ---
-created: '2019-03-14T17:12:36.665542Z'
+created: '2019-05-22T14:45:12.475131Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_template.py
 ---
-api_context: null
+api_context:
+  context: []
+  filename: null
+  lineNo: null
 errors: null
-to_json: null
-to_string: null
+to_json: {}
+to_string: 'Stacktrace (most recent call last):
+
+
+
+
+  File "None", line None
+
+  '
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input1.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input1.pysnap
index ac8910384b..43d6472a29 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input1.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input1.pysnap
@@ -1,9 +1,20 @@
 ---
-created: '2019-03-14T17:12:36.677443Z'
+created: '2019-05-22T14:45:12.483030Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_template.py
 ---
-api_context: null
+api_context:
+  context: []
+  filename: null
+  lineNo: null
 errors: null
-to_json: null
-to_string: null
+to_json:
+  context_line: ''
+to_string: 'Stacktrace (most recent call last):
+
+
+
+
+  File "None", line None
+
+  '
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input2.pysnap
index 476b28b3dd..4be137351e 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input2.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input2.pysnap
@@ -1,9 +1,24 @@
 ---
-created: '2019-03-14T17:12:36.688569Z'
+created: '2019-05-22T14:45:12.490554Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_template.py
 ---
-api_context: null
+api_context:
+  context:
+  - - 0
+    - ''
+  filename: null
+  lineNo: 0
 errors: null
-to_json: null
-to_string: null
+to_json:
+  context_line: ''
+  lineno: 0
+to_string: 'Stacktrace (most recent call last):
+
+
+
+
+  File "None", line 0
+
+
+  '
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input3.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input3.pysnap
index 7af5a62021..aaa557e298 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input3.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input3.pysnap
@@ -1,9 +1,20 @@
 ---
-created: '2019-03-14T17:12:36.699582Z'
+created: '2019-05-22T14:45:12.498368Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_template.py
 ---
-api_context: null
+api_context:
+  context: []
+  filename: null
+  lineNo: 1
 errors: null
-to_json: null
-to_string: null
+to_json:
+  lineno: 1
+to_string: 'Stacktrace (most recent call last):
+
+
+
+
+  File "None", line 1
+
+  '
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input4.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input4.pysnap
index e914502080..32c9951b61 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input4.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input4.pysnap
@@ -1,13 +1,24 @@
 ---
-created: '2019-03-14T17:12:36.713418Z'
+created: '2019-05-22T14:45:12.506048Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_template.py
 ---
-api_context: null
+api_context:
+  context: []
+  filename: null
+  lineNo: 1
 errors:
 - name: template.context_line
   reason: expected a string
   type: invalid_data
   value: 42
-to_json: null
-to_string: null
+to_json:
+  lineno: 1
+to_string: 'Stacktrace (most recent call last):
+
+
+
+
+  File "None", line 1
+
+  '
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_basics.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_basics.pysnap
index 69f31fbe26..f151415dac 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_basics.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_basics.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-30T08:25:10.021819Z'
+created: '2019-05-27T10:51:12.052455Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_threads.py
 ---
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input0.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input0.pysnap
index 2a6610a324..185b0ad401 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input0.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input0.pysnap
@@ -1,10 +1,8 @@
 ---
-created: '2019-03-14T17:12:36.736298Z'
+created: '2019-05-22T14:45:12.528837Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_threads.py
 ---
-api_context:
-  values: []
+api_context: null
 errors: null
-to_json:
-  values: []
+to_json: null
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input1.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input1.pysnap
index 7f9d9b1b93..e513af73af 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input1.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input1.pysnap
@@ -1,10 +1,8 @@
 ---
-created: '2019-03-14T17:12:36.743295Z'
+created: '2019-05-22T14:45:12.536637Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_threads.py
 ---
-api_context:
-  values: []
+api_context: null
 errors: null
-to_json:
-  values: []
+to_json: null
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input2.pysnap
index 7f0fc0601c..a6c2cbadd4 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input2.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input2.pysnap
@@ -1,10 +1,8 @@
 ---
-created: '2019-03-14T17:12:36.750438Z'
+created: '2019-05-22T14:45:12.544280Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_threads.py
 ---
-api_context:
-  values: []
+api_context: null
 errors: null
-to_json:
-  values: []
+to_json: null
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input3.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input3.pysnap
index 1a57332bd3..62fbd4e427 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input3.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input3.pysnap
@@ -1,10 +1,8 @@
 ---
-created: '2019-03-14T17:12:36.761053Z'
+created: '2019-05-22T14:45:12.552014Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_threads.py
 ---
-api_context:
-  values: []
+api_context: null
 errors: null
-to_json:
-  values: []
+to_json: null
diff --git a/tests/sentry/event_manager/test_event_manager.py b/tests/sentry/event_manager/test_event_manager.py
index 97dc922ffc..70f342bc6c 100644
--- a/tests/sentry/event_manager/test_event_manager.py
+++ b/tests/sentry/event_manager/test_event_manager.py
@@ -1118,6 +1118,8 @@ class EventManagerTest(TestCase):
         assert event.data['sdk'] == {
             'name': 'sentry-unity',
             'version': '1.0',
+            'integrations': None,
+            'packages': None
         }
 
     def test_no_message(self):
@@ -1146,6 +1148,8 @@ class EventManagerTest(TestCase):
 
         assert event.data['logentry'] == {
             'formatted': '1234',
+            'message': None,
+            'params': None
         }
 
     def test_bad_message(self):
@@ -1167,6 +1171,8 @@ class EventManagerTest(TestCase):
         event = manager.save(self.project.id)
         assert event.data['logentry'] == {
             'formatted': 'hello world',
+            'message': None,
+            'params': None
         }
 
     def test_message_attribute_shadowing(self):
@@ -1185,6 +1191,8 @@ class EventManagerTest(TestCase):
         event = manager.save(self.project.id)
         assert event.data['logentry'] == {
             'formatted': 'hello world',
+            'message': None,
+            'params': None
         }
 
     def test_message_attribute_interface_both_strings(self):
@@ -1200,6 +1208,8 @@ class EventManagerTest(TestCase):
         event = manager.save(self.project.id)
         assert event.data['logentry'] == {
             'formatted': 'a plain string',
+            'message': None,
+            'params': None
         }
 
     def test_throws_when_matches_discarded_hash(self):
diff --git a/tests/sentry/models/test_event.py b/tests/sentry/models/test_event.py
index 607b37cb54..99cdd4eb20 100644
--- a/tests/sentry/models/test_event.py
+++ b/tests/sentry/models/test_event.py
@@ -177,12 +177,6 @@ def test_renormalization(monkeypatch, factories, task_runner, default_project):
     monkeypatch.setattr('semaphore.processing.StoreNormalizer.normalize_event',
                         normalize)
 
-    sample_mock_calls = []
-
-    def sample(*args, **kwargs):
-        sample_mock_calls.append(1)
-        return False
-
     with task_runner():
         factories.store_event(
             data={
@@ -196,7 +190,6 @@ def test_renormalization(monkeypatch, factories, task_runner, default_project):
     # that you will encounter severe performance issues during event processing
     # or postprocessing.
     assert len(normalize_mock_calls) == 1
-    assert len(sample_mock_calls) == 0
 
 
 class EventGetLegacyMessageTest(TestCase):
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 2cdb10ce98..5eca4433a8 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -82,7 +82,7 @@ class MailPluginTest(TestCase):
             project_id=self.project.id,
             message='Soubor ji\xc5\xbe existuje',
             # Create interface so get_title will be called on it.
-            data={'stacktrace': {'frames': []}},
+            data={'stacktrace': {'frames': [{}]}},
         )
 
         notification = Notification(event=event)
