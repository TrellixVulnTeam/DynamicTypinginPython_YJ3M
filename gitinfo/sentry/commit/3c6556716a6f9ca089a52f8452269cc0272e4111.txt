commit 3c6556716a6f9ca089a52f8452269cc0272e4111
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Dec 19 17:05:29 2018 -0800

    feat(releases): Refactor project releases and implement org header (#11102)
    
    - Refactor project releases header to make resuable for organizations
    - Implement org releases detail header behind sentry10 feature flag
    - Put org releases list page behind sentry10 feature flag

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index b3f6c7cfad..782a734f1f 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -788,6 +788,12 @@ function routes() {
               import(/*webpackChunkName: "OrganizationReleases"*/ './views/releases/list/organizationReleases')}
             component={errorHandler(LazyLoad)}
           />
+          <Route
+            path="/organizations/:orgId/releases/:version/"
+            componentPromise={() =>
+              import(/*webpackChunkName: "OrganizationReleasesDetail"*/ './views/releases/detail/organization')}
+            component={errorHandler(LazyLoad)}
+          />
 
           <Route
             path="/organizations/:orgId/teams/new/"
@@ -876,38 +882,38 @@ function routes() {
           <Route
             path="releases/:version/"
             componentPromise={() =>
-              import(/*webpackChunkName:"ReleaseDetails"*/ './views/releases/detail/releaseDetails')}
+              import(/*webpackChunkName:"ReleaseDetails"*/ './views/releases/detail/project')}
             component={errorHandler(LazyLoad)}
           >
             <IndexRoute
               componentPromise={() =>
-                import(/*webpackChunkName:"ReleaseOverview"*/ './views/releases/detail/releaseOverview')}
+                import(/*webpackChunkName:"ReleaseOverview"*/ './views/releases/detail/project/releaseOverview')}
               component={errorHandler(LazyLoad)}
             />
 
             <Route
               path="new-events/"
               componentPromise={() =>
-                import(/*webpackChunkName:"ReleaseNewEvents"*/ './views/releases/detail/releaseNewEvents')}
+                import(/*webpackChunkName:"ReleaseNewEvents"*/ './views/releases/detail/project/releaseNewEvents')}
               component={errorHandler(LazyLoad)}
             />
 
             <Route
               path="all-events/"
               componentPromise={() =>
-                import(/*webpackChunkName:"ReleaseAllEvents"*/ './views/releases/detail/releaseAllEvents')}
+                import(/*webpackChunkName:"ReleaseAllEvents"*/ './views/releases/detail/project/releaseAllEvents')}
               component={errorHandler(LazyLoad)}
             />
             <Route
               path="artifacts/"
               componentPromise={() =>
-                import(/*webpackChunkName:"ReleaseArtifacts"*/ './views/releases/detail/releaseArtifacts')}
+                import(/*webpackChunkName:"ReleaseArtifacts"*/ './views/releases/detail/project/releaseArtifacts')}
               component={errorHandler(LazyLoad)}
             />
             <Route
               path="commits/"
               componentPromise={() =>
-                import(/*webpackChunkName:"ReleaseCommits"*/ './views/releases/detail/releaseCommits')}
+                import(/*webpackChunkName:"ReleaseCommits"*/ './views/releases/detail/project/releaseCommits')}
               component={errorHandler(LazyLoad)}
             />
           </Route>
diff --git a/src/sentry/static/sentry/app/views/releases/detail/organization/index.jsx b/src/sentry/static/sentry/app/views/releases/detail/organization/index.jsx
new file mode 100644
index 0000000000..afb3e32c1f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releases/detail/organization/index.jsx
@@ -0,0 +1,115 @@
+import DocumentTitle from 'react-document-title';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import SentryTypes from 'app/sentryTypes';
+import Feature from 'app/components/acl/feature';
+import {t} from 'app/locale';
+import Alert from 'app/components/alert';
+import LoadingError from 'app/components/loadingError';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import withOrganization from 'app/utils/withOrganization';
+import space from 'app/styles/space';
+
+import ReleaseHeader from '../shared/releaseHeader';
+import {getRelease} from '../shared/utils';
+
+class OrganizationReleaseDetails extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization,
+  };
+
+  static childContextTypes = {
+    release: PropTypes.object,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      release: null,
+      loading: true,
+      error: false,
+    };
+  }
+
+  getChildContext() {
+    return {
+      release: this.state.release,
+    };
+  }
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  getTitle() {
+    const {params: {version}, organization} = this.props;
+    return `Release ${version} | ${organization.slug}`;
+  }
+
+  fetchData() {
+    this.setState({
+      loading: true,
+      error: false,
+    });
+
+    const {orgId, version} = this.props.params;
+
+    getRelease(orgId, version)
+      .then(release => {
+        this.setState({loading: false, release});
+      })
+      .catch(() => {
+        this.setState({loading: false, error: true});
+      });
+  }
+
+  renderNoAccess() {
+    return (
+      <Content>
+        <Alert type="warning">{t("You don't have access to this feature")}</Alert>
+      </Content>
+    );
+  }
+
+  renderContent() {
+    const release = this.state.release;
+    const {orgId, projectId} = this.props.params;
+
+    if (this.state.loading) return <LoadingIndicator />;
+    if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+
+    return (
+      <Content>
+        <Feature
+          features={['organizations:sentry10']}
+          organization={this.props.organization}
+          renderDisabled={this.renderNoAccess}
+        >
+          <ReleaseHeader release={release} orgId={orgId} projectId={projectId} />
+          {/*React.cloneElement(this.props.children, {
+          release,
+          environment: this.props.environment,
+        })*/}
+        </Feature>
+      </Content>
+    );
+  }
+
+  render() {
+    return <DocumentTitle title={this.getTitle()}>{this.renderContent()}</DocumentTitle>;
+  }
+}
+
+export default withOrganization(OrganizationReleaseDetails);
+
+// TODO: refactor as this same component is used in events, release list and user feedback
+const Content = styled('div')`
+  display: flex;
+  flex-direction: column;
+  flex: 1;
+  overflow: hidden;
+  padding: ${space(2)} ${space(4)} ${space(3)};
+  margin-bottom: -20px; /* <footer> has margin-top: 20px; */
+`;
diff --git a/src/sentry/static/sentry/app/views/releases/detail/project/index.jsx b/src/sentry/static/sentry/app/views/releases/detail/project/index.jsx
new file mode 100644
index 0000000000..ad2e205ffe
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releases/detail/project/index.jsx
@@ -0,0 +1,118 @@
+import DocumentTitle from 'react-document-title';
+import PropTypes from 'prop-types';
+import React from 'react';
+import createReactClass from 'create-react-class';
+
+import ApiMixin from 'app/mixins/apiMixin';
+
+import LoadingError from 'app/components/loadingError';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import ProjectState from 'app/mixins/projectState';
+import SentryTypes from 'app/sentryTypes';
+
+import withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';
+
+import ReleaseHeader from '../shared/releaseHeader';
+
+const ProjectReleaseDetails = createReactClass({
+  displayName: 'ProjectReleaseDetails',
+
+  propTypes: {
+    setProjectNavSection: PropTypes.func,
+    environment: SentryTypes.Environment,
+  },
+
+  childContextTypes: {
+    release: PropTypes.object,
+  },
+
+  mixins: [ApiMixin, ProjectState],
+
+  getInitialState() {
+    return {
+      release: null,
+      loading: true,
+      error: false,
+    };
+  },
+
+  getChildContext() {
+    return {
+      release: this.state.release,
+    };
+  },
+
+  componentWillMount() {
+    this.props.setProjectNavSection('releases');
+    this.fetchData();
+  },
+
+  componentDidUpdate(prevProps) {
+    if (this.props.environment !== prevProps.environment) {
+      this.fetchData();
+    }
+  },
+
+  getTitle() {
+    let project = this.getProject();
+    let params = this.props.params;
+    return 'Release ' + params.version + ' | ' + project.slug;
+  },
+
+  fetchData() {
+    this.setState({
+      loading: true,
+      error: false,
+    });
+
+    const {environment} = this.props;
+    const query = environment ? {environment: environment.name} : {};
+
+    this.api.request(this.getReleaseDetailsEndpoint(), {
+      query,
+      success: data => {
+        this.setState({
+          loading: false,
+          release: data,
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true,
+        });
+      },
+    });
+  },
+
+  getReleaseDetailsEndpoint() {
+    let params = this.props.params;
+    let orgId = params.orgId;
+    let projectId = params.projectId;
+    let version = encodeURIComponent(params.version);
+
+    return `/projects/${orgId}/${projectId}/releases/${version}/`;
+  },
+
+  render() {
+    if (this.state.loading) return <LoadingIndicator />;
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+
+    let release = this.state.release;
+    let {orgId, projectId} = this.props.params;
+
+    return (
+      <DocumentTitle title={this.getTitle()}>
+        <div className="ref-release-details">
+          <ReleaseHeader release={release} orgId={orgId} projectId={projectId} />
+          {React.cloneElement(this.props.children, {
+            release,
+            environment: this.props.environment,
+          })}
+        </div>
+      </DocumentTitle>
+    );
+  },
+});
+
+export default withEnvironmentInQueryString(ProjectReleaseDetails);
diff --git a/src/sentry/static/sentry/app/views/releases/detail/releaseAllEvents.jsx b/src/sentry/static/sentry/app/views/releases/detail/project/releaseAllEvents.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/releases/detail/releaseAllEvents.jsx
rename to src/sentry/static/sentry/app/views/releases/detail/project/releaseAllEvents.jsx
diff --git a/src/sentry/static/sentry/app/views/releases/detail/releaseArtifacts.jsx b/src/sentry/static/sentry/app/views/releases/detail/project/releaseArtifacts.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/releases/detail/releaseArtifacts.jsx
rename to src/sentry/static/sentry/app/views/releases/detail/project/releaseArtifacts.jsx
diff --git a/src/sentry/static/sentry/app/views/releases/detail/releaseCommits.jsx b/src/sentry/static/sentry/app/views/releases/detail/project/releaseCommits.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/releases/detail/releaseCommits.jsx
rename to src/sentry/static/sentry/app/views/releases/detail/project/releaseCommits.jsx
diff --git a/src/sentry/static/sentry/app/views/releases/detail/releaseNewEvents.jsx b/src/sentry/static/sentry/app/views/releases/detail/project/releaseNewEvents.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/releases/detail/releaseNewEvents.jsx
rename to src/sentry/static/sentry/app/views/releases/detail/project/releaseNewEvents.jsx
diff --git a/src/sentry/static/sentry/app/views/releases/detail/releaseOverview.jsx b/src/sentry/static/sentry/app/views/releases/detail/project/releaseOverview.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/releases/detail/releaseOverview.jsx
rename to src/sentry/static/sentry/app/views/releases/detail/project/releaseOverview.jsx
diff --git a/src/sentry/static/sentry/app/views/releases/detail/releaseDetails.jsx b/src/sentry/static/sentry/app/views/releases/detail/releaseDetails.jsx
deleted file mode 100644
index f1fbfe0264..0000000000
--- a/src/sentry/static/sentry/app/views/releases/detail/releaseDetails.jsx
+++ /dev/null
@@ -1,266 +0,0 @@
-import DocumentTitle from 'react-document-title';
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-import {browserHistory} from 'react-router';
-
-import {t} from 'app/locale';
-import ApiMixin from 'app/mixins/apiMixin';
-import Button from 'app/components/button';
-import Confirm from 'app/components/confirm';
-import Count from 'app/components/count';
-import ExternalLink from 'app/components/externalLink';
-import {addErrorMessage, addLoadingMessage} from 'app/actionCreators/indicator';
-import ListLink from 'app/components/listLink';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import NavTabs from 'app/components/navTabs';
-import ProjectState from 'app/mixins/projectState';
-import ReleaseStats from 'app/components/releaseStats';
-import SentryTypes from 'app/sentryTypes';
-import TextOverflow from 'app/components/textOverflow';
-import TimeSince from 'app/components/timeSince';
-import Version from 'app/components/version';
-import withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';
-
-class ReleaseDetailsActions extends React.Component {
-  static propTypes = {
-    api: PropTypes.object.isRequired,
-    orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
-    release: SentryTypes.Release,
-  };
-
-  handleDelete = () => {
-    let {orgId, projectId, release, api} = this.props;
-    let version = encodeURIComponent(release.version);
-    let path = `/organizations/${orgId}/releases/${version}/`;
-    let redirectPath = `/${orgId}/${projectId}/releases/`;
-    addLoadingMessage(t('Deleting Release...'));
-
-    api.request(path, {
-      method: 'DELETE',
-      success: () => {
-        browserHistory.push(redirectPath);
-      },
-      error: () => {
-        addErrorMessage(
-          t('This release is referenced by active issues and cannot be removed.')
-        );
-      },
-    });
-  };
-
-  render() {
-    return (
-      <div className="m-b-1">
-        <div className="btn-group">
-          <Confirm
-            onConfirm={this.handleDelete}
-            message={t(
-              'Deleting this release is permanent. Are you sure you wish to continue?'
-            )}
-          >
-            <Button size="small" icon="icon-trash">
-              {t('Delete')}
-            </Button>
-          </Confirm>
-        </div>
-      </div>
-    );
-  }
-}
-
-const ReleaseDetails = createReactClass({
-  displayName: 'ReleaseDetails',
-
-  propTypes: {
-    setProjectNavSection: PropTypes.func,
-    environment: SentryTypes.Environment,
-  },
-
-  contextTypes: {
-    location: PropTypes.object,
-  },
-
-  childContextTypes: {
-    release: PropTypes.object,
-  },
-
-  mixins: [ApiMixin, ProjectState],
-
-  getInitialState() {
-    return {
-      release: null,
-      loading: true,
-      error: false,
-    };
-  },
-
-  getChildContext() {
-    return {
-      release: this.state.release,
-    };
-  },
-
-  componentWillMount() {
-    this.props.setProjectNavSection('releases');
-    this.fetchData();
-  },
-
-  componentDidUpdate(prevProps) {
-    if (this.props.environment !== prevProps.environment) {
-      this.fetchData();
-    }
-  },
-
-  getTitle() {
-    let project = this.getProject();
-    let params = this.props.params;
-    return 'Release ' + params.version + ' | ' + project.slug;
-  },
-
-  fetchData() {
-    this.setState({
-      loading: true,
-      error: false,
-    });
-
-    const {environment} = this.props;
-    const query = environment ? {environment: environment.name} : {};
-
-    this.api.request(this.getReleaseDetailsEndpoint(), {
-      query,
-      success: data => {
-        this.setState({
-          loading: false,
-          release: data,
-        });
-      },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true,
-        });
-      },
-    });
-  },
-
-  getReleaseDetailsEndpoint() {
-    let params = this.props.params;
-    let orgId = params.orgId;
-    let projectId = params.projectId;
-    let version = encodeURIComponent(params.version);
-
-    return `/projects/${orgId}/${projectId}/releases/${version}/`;
-  },
-
-  render() {
-    if (this.state.loading) return <LoadingIndicator />;
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
-
-    let release = this.state.release;
-    let {orgId, projectId} = this.props.params;
-    let releasePath = `/${orgId}/${projectId}/releases/${encodeURIComponent(
-      release.version
-    )}`;
-
-    return (
-      <DocumentTitle title={this.getTitle()}>
-        <div className="ref-release-details">
-          <div className="release-details">
-            <div className="row">
-              <div className="col-sm-4 col-xs-12">
-                <h3>
-                  {t('Release')}{' '}
-                  <strong>
-                    <Version
-                      orgId={orgId}
-                      projectId={projectId}
-                      version={release.version}
-                      anchor={false}
-                    />
-                  </strong>
-                </h3>
-                {!!release.url && (
-                  <div>
-                    <ExternalLink href={release.url}>
-                      <TextOverflow>{release.url}</TextOverflow>
-                    </ExternalLink>
-                  </div>
-                )}
-                <div className="release-meta">
-                  <span className="icon icon-clock" />{' '}
-                  <TimeSince date={release.dateCreated} />
-                </div>
-              </div>
-              <div className="col-sm-2 hidden-xs">
-                <ReleaseStats release={release} />
-              </div>
-              <div className="col-sm-2 hidden-xs">
-                <div className="release-stats">
-                  <h6 className="nav-header">{t('New Issues')}</h6>
-                  <span className="stream-count">
-                    <Count value={release.newGroups} />
-                  </span>
-                </div>
-              </div>
-              <div className="col-sm-2 hidden-xs">
-                <div className="release-stats">
-                  <h6 className="nav-header">{t('First Event')}</h6>
-                  {release.firstEvent ? (
-                    <span className="stream-count">
-                      <TimeSince date={release.firstEvent} />
-                    </span>
-                  ) : (
-                    <span>—</span>
-                  )}
-                </div>
-              </div>
-              <div className="col-sm-2 hidden-xs">
-                <div className="release-stats">
-                  <h6 className="nav-header">{t('Last Event')}</h6>
-                  {release.lastEvent ? (
-                    <span className="stream-count">
-                      <TimeSince date={release.lastEvent} />
-                    </span>
-                  ) : (
-                    <span>—</span>
-                  )}
-                </div>
-              </div>
-            </div>
-            <ReleaseDetailsActions
-              api={this.api}
-              orgId={orgId}
-              projectId={projectId}
-              release={release}
-            />
-            <NavTabs>
-              <ListLink
-                to={`${releasePath}/`}
-                isActive={loc => {
-                  // react-router isActive will return true for any route that is part of the active route
-                  // e.g. parent routes. To avoid matching on sub-routes, insist on strict path equality.
-                  return loc.pathname === this.props.location.pathname;
-                }}
-              >
-                {t('Overview')}
-              </ListLink>
-              <ListLink to={`${releasePath}/new-events/`}>{t('New Issues')}</ListLink>
-              <ListLink to={`${releasePath}/all-events/`}>{t('All Issues')}</ListLink>
-              <ListLink to={`${releasePath}/artifacts/`}>{t('Artifacts')}</ListLink>
-              <ListLink to={`${releasePath}/commits/`}>{t('Commits')}</ListLink>
-            </NavTabs>
-          </div>
-          {React.cloneElement(this.props.children, {
-            release,
-            environment: this.props.environment,
-          })}
-        </div>
-      </DocumentTitle>
-    );
-  },
-});
-
-export default withEnvironmentInQueryString(ReleaseDetails);
diff --git a/src/sentry/static/sentry/app/views/releases/detail/shared/releaseDetailActions.jsx b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseDetailActions.jsx
new file mode 100644
index 0000000000..182e368356
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseDetailActions.jsx
@@ -0,0 +1,57 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import {browserHistory} from 'react-router';
+
+import {t} from 'app/locale';
+import {addErrorMessage, addLoadingMessage} from 'app/actionCreators/indicator';
+import SentryTypes from 'app/sentryTypes';
+import Button from 'app/components/button';
+import Confirm from 'app/components/confirm';
+
+import {deleteRelease} from './utils';
+
+export default class ReleaseDetailsActions extends React.Component {
+  static propTypes = {
+    orgId: PropTypes.string.isRequired,
+    // Provided in the project release page only
+    projectId: PropTypes.string,
+    release: SentryTypes.Release.isRequired,
+  };
+
+  handleDelete = () => {
+    let {orgId, projectId, release} = this.props;
+    let redirectPath = projectId
+      ? `/${orgId}/${projectId}/releases/`
+      : `/organizations/${orgId}/releases/`;
+    addLoadingMessage(t('Deleting Release...'));
+
+    deleteRelease(orgId, release.version)
+      .then(() => {
+        browserHistory.push(redirectPath);
+      })
+      .catch(() => {
+        addErrorMessage(
+          t('This release is referenced by active issues and cannot be removed.')
+        );
+      });
+  };
+
+  render() {
+    return (
+      <div className="m-b-1">
+        <div className="btn-group">
+          <Confirm
+            onConfirm={this.handleDelete}
+            message={t(
+              'Deleting this release is permanent. Are you sure you wish to continue?'
+            )}
+          >
+            <Button size="small" icon="icon-trash">
+              {t('Delete')}
+            </Button>
+          </Confirm>
+        </div>
+      </div>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/releases/detail/shared/releaseHeader.jsx b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseHeader.jsx
new file mode 100644
index 0000000000..e357f121e3
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseHeader.jsx
@@ -0,0 +1,123 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t} from 'app/locale';
+
+import Count from 'app/components/count';
+import ExternalLink from 'app/components/externalLink';
+import ListLink from 'app/components/listLink';
+import NavTabs from 'app/components/navTabs';
+import ReleaseStats from 'app/components/releaseStats';
+import TextOverflow from 'app/components/textOverflow';
+import TimeSince from 'app/components/timeSince';
+import Version from 'app/components/version';
+
+import ReleaseDetailsActions from './releaseDetailActions';
+
+export default class ReleaseHeader extends React.Component {
+  static propTypes = {
+    release: PropTypes.object.isRequired,
+    orgId: PropTypes.string.isRequired,
+    projectId: PropTypes.string,
+  };
+
+  static contextTypes = {
+    location: PropTypes.object,
+  };
+
+  render() {
+    const {release, orgId, projectId} = this.props;
+
+    const releasePath = projectId
+      ? `/${orgId}/${projectId}/releases/${encodeURIComponent(release.version)}`
+      : `/organizations/releases/${encodeURIComponent(release.version)}`;
+
+    return (
+      <div className="release-details">
+        <div className="row">
+          <div className="col-sm-4 col-xs-12">
+            <h3>
+              {t('Release')}{' '}
+              <strong>
+                <Version
+                  orgId={orgId}
+                  projectId={projectId}
+                  version={release.version}
+                  anchor={false}
+                />
+              </strong>
+            </h3>
+            {!!release.url && (
+              <div>
+                <ExternalLink href={release.url}>
+                  <TextOverflow>{release.url}</TextOverflow>
+                </ExternalLink>
+              </div>
+            )}
+            <div className="release-meta">
+              <span className="icon icon-clock" />{' '}
+              <TimeSince date={release.dateCreated} />
+            </div>
+          </div>
+          <div className="col-sm-2 hidden-xs">
+            <ReleaseStats release={release} />
+          </div>
+          <div className="col-sm-2 hidden-xs">
+            <div className="release-stats">
+              <h6 className="nav-header">{t('New Issues')}</h6>
+              <span className="stream-count">
+                <Count value={release.newGroups} />
+              </span>
+            </div>
+          </div>
+          <div className="col-sm-2 hidden-xs">
+            <div className="release-stats">
+              <h6 className="nav-header">{t('First Event')}</h6>
+              {release.firstEvent ? (
+                <span className="stream-count">
+                  <TimeSince date={release.firstEvent} />
+                </span>
+              ) : (
+                <span>—</span>
+              )}
+            </div>
+          </div>
+          <div className="col-sm-2 hidden-xs">
+            <div className="release-stats">
+              <h6 className="nav-header">{t('Last Event')}</h6>
+              {release.lastEvent ? (
+                <span className="stream-count">
+                  <TimeSince date={release.lastEvent} />
+                </span>
+              ) : (
+                <span>—</span>
+              )}
+            </div>
+          </div>
+        </div>
+        <ReleaseDetailsActions
+          api={this.api}
+          orgId={orgId}
+          projectId={projectId}
+          release={release}
+        />
+        <NavTabs>
+          <ListLink
+            to={`${releasePath}/`}
+            isActive={loc => {
+              // react-router isActive will return true for any route that is part of the active route
+              // e.g. parent routes. To avoid matching on sub-routes, insist on strict path equality.
+              return loc.pathname === this.context.location.pathname;
+            }}
+          >
+            {t('Overview')}
+          </ListLink>
+          <ListLink to={`${releasePath}/new-events/`}>{t('New Issues')}</ListLink>
+          <ListLink to={`${releasePath}/all-events/`}>{t('All Issues')}</ListLink>
+          <ListLink to={`${releasePath}/artifacts/`}>{t('Artifacts')}</ListLink>
+          <ListLink to={`${releasePath}/commits/`}>{t('Commits')}</ListLink>
+        </NavTabs>
+      </div>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/releases/detail/shared/utils.jsx b/src/sentry/static/sentry/app/views/releases/detail/shared/utils.jsx
new file mode 100644
index 0000000000..436ce23e6c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releases/detail/shared/utils.jsx
@@ -0,0 +1,38 @@
+import {Client} from 'app/api';
+
+/**
+ * Delete release version
+ *
+ * @param {String} orgId Organization slug
+ * @param {String} version Version
+ * @returns {Promise}
+ */
+export function deleteRelease(orgId, version) {
+  const api = new Client();
+
+  return api.requestPromise(
+    `/organizations/${orgId}/releases/${encodeURIComponent(version)}/`,
+    {
+      method: 'DELETE',
+    }
+  );
+}
+
+/**
+ * Get release version
+ *
+ * @param {String} orgId Organization slug
+ * @param {String} version Version
+ * @param {Object} query Query params
+ * @returns {Promise}
+ */
+export function getRelease(orgId, version, query = {}) {
+  const api = new Client();
+
+  return api.requestPromise(
+    `/organizations/${orgId}/releases/${encodeURIComponent(version)}/`,
+    {
+      query,
+    }
+  );
+}
diff --git a/src/sentry/static/sentry/app/views/releases/list/organizationReleases/index.jsx b/src/sentry/static/sentry/app/views/releases/list/organizationReleases/index.jsx
index e3891ef569..ed0cc44365 100644
--- a/src/sentry/static/sentry/app/views/releases/list/organizationReleases/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/organizationReleases/index.jsx
@@ -93,10 +93,18 @@ class OrganizationReleases extends React.Component {
   }
 
   renderNoAccess() {
-    return <Alert type="warning">{t("You don't have access to this feature")}</Alert>;
+    return (
+      <Content>
+        <Alert type="warning">{t("You don't have access to this feature")}</Alert>
+      </Content>
+    );
   }
 
   render() {
+    if (!new Set(this.props.organization.features).has('sentry10')) {
+      return this.renderNoAccess();
+    }
+
     return (
       <Content>
         <Header>
diff --git a/tests/js/spec/views/releases/detail/releaseArtifacts.spec.jsx b/tests/js/spec/views/releases/detail/releaseArtifacts.spec.jsx
index c92d3e52c9..a631780f51 100644
--- a/tests/js/spec/views/releases/detail/releaseArtifacts.spec.jsx
+++ b/tests/js/spec/views/releases/detail/releaseArtifacts.spec.jsx
@@ -2,7 +2,7 @@ import React from 'react';
 import {shallow} from 'enzyme';
 
 import {Client} from 'app/api';
-import ReleaseArtifacts from 'app/views/releases/detail/releaseArtifacts';
+import ReleaseArtifacts from 'app/views/releases/detail/project/releaseArtifacts';
 
 describe('ReleaseArtifacts', function() {
   let sandbox;
diff --git a/tests/js/spec/views/releases/detail/releaseDetails.spec.jsx b/tests/js/spec/views/releases/detail/releaseDetails.spec.jsx
index aee447aa87..9069fd7c3f 100644
--- a/tests/js/spec/views/releases/detail/releaseDetails.spec.jsx
+++ b/tests/js/spec/views/releases/detail/releaseDetails.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import ReleaseDetails from 'app/views/releases/detail/releaseDetails';
+import ReleaseDetails from 'app/views/releases/detail/project';
 
 describe('ReleaseDetails', function() {
   let deleteMock;
