commit 9178343bac4f895dfa59c98786f9d8075666c6d8
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Dec 7 10:27:33 2018 -0800

    ref(ui): Remove Project Events UI (#10956)
    
    Removes "global-events" flag and UI components/routes.

diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 3764e0ee50..6917537f5e 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -505,7 +505,7 @@ class SharedProjectSerializer(Serializer):
         from sentry import features
 
         feature_list = []
-        for feature in ('global-events', ):
+        for feature in ():
             if features.has('projects:' + feature, obj, actor=user):
                 feature_list.append(feature)
 
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 9cc6e96867..ee459fccfb 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -836,8 +836,6 @@ SENTRY_FEATURES = {
     'projects:discard-groups': False,
     # DEPRECATED: pending removal
     'projects:dsym': False,
-    # DEPRECATED: pending removal.
-    'projects:global-events': False,
     # Enable functionality for attaching  minidumps to events and displaying
     # then in the group UI.
     'projects:minidump': True,
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 84dc69f1cf..8907f5e439 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -79,7 +79,6 @@ default_manager.add('organizations:large-debug-files', OrganizationFeature)  # N
 
 # Project scoped features
 default_manager.add('projects:similarity-view', ProjectFeature)  # NOQA
-default_manager.add('projects:global-events', ProjectFeature)  # NOQA
 default_manager.add('projects:data-forwarding', ProjectFeature)  # NOQA
 default_manager.add('projects:rate-limits', ProjectFeature)  # NOQA
 default_manager.add('projects:sample-events', ProjectFeature)  # NOQA
diff --git a/src/sentry/static/sentry/app/components/projectHeader/index.jsx b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
index 22b8d0a32a..14e87fc6f0 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
@@ -36,7 +36,6 @@ class ProjectHeader extends React.Component {
     let {project, environments, activeEnvironment} = this.props;
     let navSection = this.props.activeSection;
     let org = this.props.organization;
-    let features = new Set(project.features);
     let allEnvironmentsLabel = t('All environments');
 
     let pagesWithEnvironments = new Set([
@@ -67,13 +66,6 @@ class ProjectHeader extends React.Component {
                   {t('Issues')}
                 </ProjectLink>
               </li>
-              {features.has('global-events') && (
-                <li className={navSection == 'events' ? 'active' : ''}>
-                  <ProjectLink to={`/${org.slug}/${project.slug}/events/`}>
-                    {t('Events')}
-                  </ProjectLink>
-                </li>
-              )}
               <li className={navSection == 'dashboard' ? 'active' : ''}>
                 <ProjectLink to={`/${org.slug}/${project.slug}/dashboard/`}>
                   {t('Overview')}
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index a461f78e78..f8ed22c5a6 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -36,7 +36,6 @@ import ProjectDataForwarding from 'app/views/projectDataForwarding';
 import ProjectDebugFiles from 'app/views/projectDebugFiles';
 import ProjectDetails from 'app/views/projectDetails';
 import ProjectDocsContext from 'app/views/projectInstall/docsContext';
-import ProjectEvents from 'app/views/projectEvents';
 import ProjectGettingStarted from 'app/views/projectInstall/gettingStarted';
 import ProjectInstallOverview from 'app/views/projectInstall/overview';
 import ProjectInstallPlatform from 'app/views/projectInstall/platform';
@@ -903,7 +902,6 @@ function routes() {
 
           <Route path="searches/:searchId/" component={errorHandler(Stream)} />
           <Route path="dashboard/" component={errorHandler(ProjectDashboard)} />
-          <Route path="events/" component={errorHandler(ProjectEvents)} />
           <Route path="releases/" component={errorHandler(ProjectReleases)} />
           <Route
             name="releaseDetails"
diff --git a/src/sentry/static/sentry/app/views/projectEvents/index.jsx b/src/sentry/static/sentry/app/views/projectEvents/index.jsx
deleted file mode 100644
index 8b913ee640..0000000000
--- a/src/sentry/static/sentry/app/views/projectEvents/index.jsx
+++ /dev/null
@@ -1,233 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-import {browserHistory} from 'react-router';
-import {omit, isEqual} from 'lodash';
-import qs from 'query-string';
-
-import SentryTypes from 'app/sentryTypes';
-import ProjectLink from 'app/components/projectLink';
-import ApiMixin from 'app/mixins/apiMixin';
-import DateTime from 'app/components/dateTime';
-import Avatar from 'app/components/avatar';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import Pagination from 'app/components/pagination';
-import SearchBar from 'app/components/searchBar';
-import {t} from 'app/locale';
-import withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
-
-const ProjectEvents = createReactClass({
-  displayName: 'ProjectEvents',
-
-  propTypes: {
-    defaultQuery: PropTypes.string,
-    setProjectNavSection: PropTypes.func,
-    environment: SentryTypes.Environment,
-  },
-
-  mixins: [ApiMixin],
-
-  getDefaultProps() {
-    return {
-      defaultQuery: '',
-    };
-  },
-
-  getInitialState() {
-    let queryParams = this.props.location.query;
-
-    return {
-      eventList: [],
-      loading: true,
-      error: false,
-      query: queryParams.query || this.props.defaultQuery,
-      pageLinks: '',
-      environment: this.props.environment,
-    };
-  },
-
-  componentWillMount() {
-    this.props.setProjectNavSection('events');
-    this.fetchData();
-  },
-
-  componentWillReceiveProps(nextProps) {
-    // omit when environment changes in query string since we handle that separately
-    const searchHasChanged = !isEqual(
-      omit(qs.parse(nextProps.location.search), 'environment'),
-      omit(qs.parse(this.props.location.search), 'environment')
-    );
-
-    if (searchHasChanged) {
-      let queryParams = nextProps.location.query;
-      this.setState(
-        {
-          query: queryParams.query,
-        },
-        this.fetchData
-      );
-    }
-
-    if (nextProps.environment !== this.props.environment) {
-      this.setState({environment: nextProps.environment}, this.fetchData);
-    }
-  },
-
-  onSearch(query) {
-    let targetQueryParams = {};
-    if (query !== '') targetQueryParams.query = query;
-
-    let {orgId, projectId} = this.props.params;
-    browserHistory.push({
-      pathname: `/${orgId}/${projectId}/events/`,
-      query: targetQueryParams,
-    });
-  },
-
-  fetchData() {
-    this.setState({
-      loading: true,
-      error: false,
-    });
-
-    const {params} = this.props;
-
-    const query = {
-      ...this.props.location.query,
-      limit: 50,
-      query: this.state.query,
-    };
-
-    if (this.state.environment) {
-      query.environment = this.state.environment.name;
-    } else {
-      delete query.environment;
-    }
-
-    this.api.request(`/projects/${params.orgId}/${params.projectId}/events/`, {
-      query,
-      success: (data, _, jqXHR) => {
-        this.setState({
-          error: false,
-          loading: false,
-          eventList: data,
-          pageLinks: jqXHR.getResponseHeader('Link'),
-        });
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-      },
-    });
-  },
-
-  getEventTitle(event) {
-    return event.message.split('\n')[0].substr(0, 100);
-  },
-
-  renderStreamBody() {
-    let body;
-
-    if (this.state.loading) body = this.renderLoading();
-    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
-    else if (this.state.eventList.length > 0) body = this.renderResults();
-    else if (this.state.query && this.state.query !== this.props.defaultQuery)
-      body = this.renderNoQueryResults();
-    else body = this.renderEmpty();
-
-    return body;
-  },
-
-  renderLoading() {
-    return <LoadingIndicator />;
-  },
-
-  renderNoQueryResults() {
-    return (
-      <EmptyStateWarning>
-        <p>{t('Sorry, no events match your filters.')}</p>
-      </EmptyStateWarning>
-    );
-  },
-
-  renderEmpty() {
-    return (
-      <EmptyStateWarning>
-        <p>{t("There don't seem to be any events.")}</p>
-      </EmptyStateWarning>
-    );
-  },
-
-  renderResults() {
-    let {orgId, projectId} = this.props.params;
-
-    let children = this.state.eventList.map((event, eventIdx) => {
-      return (
-        <tr key={event.id}>
-          <td style={{width: 240}}>
-            <small>
-              <DateTime date={event.dateCreated} />
-            </small>
-          </td>
-          <td>
-            <h5>
-              <ProjectLink
-                to={`/${orgId}/${projectId}/issues/${event.groupID}/events/${event.id}/`}
-              >
-                {this.getEventTitle(event)}
-              </ProjectLink>
-            </h5>
-          </td>
-          <td className="event-user table-user-info" style={{textAlign: 'right'}}>
-            {event.user ? (
-              <div>
-                <Avatar user={event.user} />
-                {event.user.email}
-              </div>
-            ) : (
-              <span>—</span>
-            )}
-          </td>
-        </tr>
-      );
-    });
-
-    return (
-      <table className="table">
-        <tbody>{children}</tbody>
-      </table>
-    );
-  },
-
-  render() {
-    return (
-      <div>
-        <div className="row release-list-header">
-          <div className="col-sm-7">
-            <h3>{t('Events')}</h3>
-          </div>
-          <div className="col-sm-5 release-search">
-            <SearchBar
-              defaultQuery=""
-              placeholder={t('Search event message')}
-              query={this.state.query}
-              onSearch={this.onSearch}
-            />
-          </div>
-        </div>
-        <div className="alert alert-block alert-info">
-          {t(`Psst! This feature is still a work-in-progress. Thanks for being an early
-          adopter!`)}
-        </div>
-        <div className="event-list">{this.renderStreamBody()}</div>
-        <Pagination pageLinks={this.state.pageLinks} />
-      </div>
-    );
-  },
-});
-
-export default withEnvironmentInQueryString(ProjectEvents);
diff --git a/tests/acceptance/test_project_events.py b/tests/acceptance/test_project_events.py
deleted file mode 100644
index 80b53ba27c..0000000000
--- a/tests/acceptance/test_project_events.py
+++ /dev/null
@@ -1,84 +0,0 @@
-from __future__ import absolute_import
-
-import os
-
-import json
-import uuid
-from datetime import datetime
-from django.utils import timezone
-
-from sentry.constants import DATA_ROOT
-from sentry.event_manager import EventManager
-from sentry.testutils import AcceptanceTestCase
-
-
-class ProjectEventsTest(AcceptanceTestCase):
-    def setUp(self):
-        super(ProjectEventsTest, self).setUp()
-        self.user = self.create_user('foo@example.com')
-        self.org = self.create_organization(owner=self.user, name='Rowdy Tiger')
-        self.team = self.create_team(organization=self.org, name='Mariachi Band')
-        self.project = self.create_project(
-            organization=self.org,
-            teams=[self.team],
-            name='Bengal',
-        )
-        self.environment = self.create_environment(name="staging")
-        self.login_as(self.user)
-        self.path = u'/{}/{}/events/'.format(self.org.slug, self.project.slug)
-        self.clock_seq = 0
-
-    def next_uuid(self):
-        self.clock_seq += 1
-        return uuid.uuid1(node=4711, clock_seq=self.clock_seq).hex
-
-    def create_sample_event(self, platform):
-        json_path = os.path.join(DATA_ROOT, 'samples', '%s.json' % (platform.encode('utf-8'), ))
-        with open(json_path) as fp:
-            data = json.loads(fp.read())
-
-        data.update(
-            platform=platform,
-            event_id=self.next_uuid(),
-        )
-
-        manager = EventManager(data)
-        manager.normalize()
-        event = manager.save(self.project.id, raw=True)
-
-        event.group.update(
-            first_seen=datetime(2015, 8, 13, 3, 8, 25, tzinfo=timezone.utc),
-            last_seen=datetime(2016, 1, 13, 3, 8, 25, tzinfo=timezone.utc),
-        )
-
-        return event
-
-    def test_with_events(self):
-        self.project.update(first_event=timezone.now())
-
-        self.create_sample_event(platform='cocoa')
-        self.create_sample_event(platform='cordova')
-        self.create_sample_event(platform='aspnetcore')
-        self.create_sample_event(platform='unity')
-        self.create_sample_event(platform='elixir')
-        self.create_sample_event(platform='empty-exception')
-        self.create_sample_event(platform='java')
-        self.create_sample_event(platform='javascript')
-        self.create_sample_event(platform='native')
-        self.create_sample_event(platform='php')
-        self.create_sample_event(platform='pii')
-        self.create_sample_event(platform='python')
-        self.create_sample_event(platform='react-native')
-        self.create_sample_event(platform='ruby')
-
-        self.browser.get(self.path)
-        self.browser.wait_until('.event-list')
-        self.browser.wait_until('.table')
-        self.browser.snapshot('project events with events')
-
-    def test_with_no_events(self):
-        self.project.update(first_event=timezone.now())
-        self.browser.get(self.path)
-        self.browser.wait_until('.event-list')
-        self.browser.wait_until('.ref-empty-state')
-        self.browser.snapshot('project events without events')
