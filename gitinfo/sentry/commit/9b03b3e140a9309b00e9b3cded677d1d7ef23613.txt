commit 9b03b3e140a9309b00e9b3cded677d1d7ef23613
Author: Mark Story <mark@sentry.io>
Date:   Thu Sep 13 13:41:50 2018 -0400

    feat(docs) Add tests to pure functions in apidocs

diff --git a/src/sentry/utils/apidocs.py b/src/sentry/utils/apidocs.py
index fc5061e4e1..5c86922342 100644
--- a/src/sentry/utils/apidocs.py
+++ b/src/sentry/utils/apidocs.py
@@ -145,7 +145,6 @@ def parse_params(params):
         field_value = field_values.item(i)
         if field_value:
             value = get_node_text(field_value.childNodes)
-        field_type = 'param'
         if name.startswith('pparam'):
             field_type = 'path'
             name = name[7:]
@@ -155,6 +154,9 @@ def parse_params(params):
         elif name.startswith('auth'):
             field_type = 'auth'
             name = ''
+        else:
+            field_type = 'param'
+            _, name = name.split(' ', 1)
 
         # Split out the parameter type
         param_type = ''
diff --git a/tests/sentry/utils/test_apidocs.py b/tests/sentry/utils/test_apidocs.py
new file mode 100644
index 0000000000..a4fe8a6343
--- /dev/null
+++ b/tests/sentry/utils/test_apidocs.py
@@ -0,0 +1,51 @@
+from __future__ import absolute_import
+from sentry.utils import apidocs
+
+
+def test_simplify_regex():
+    out = apidocs.simplify_regex(r'^/organizations/(?P<org_id>\w+)/$')
+    assert out == '/organizations/{org_id}/'
+
+    out = apidocs.simplify_regex(r'^/orgs/(?P<org_id>[\w]+)/project/(?P<id>[\d]+)/$')
+    assert out == '/orgs/{org_id}/project/{id}/'
+
+
+def test_parse_doc_string():
+    text = """
+Glory!
+~~~~~~
+
+This is a glorious function
+
+:param int id: An id.
+:qparam bool louder: Make it louder?
+:pparam string orgid: The orgid
+:auth: required
+"""
+    result = apidocs.parse_doc_string(text)
+    assert result[0] == 'Glory!'
+    assert result[1] == ['This is a glorious function']
+    params = result[2]
+    assert 'path' in params, 'Should have path params'
+    assert params['path'][0] == dict(name='orgid', type="string",
+                                     description='The orgid')
+    assert 'query' in params, 'Should have query params'
+    assert params['query'][0] == dict(name='louder', type="bool",
+                                     description='Make it louder?')
+    assert 'auth' in params, 'Should have auth'
+    assert params['auth'][0] == dict(name='', type="", description='required')
+
+    assert 'param' in params, 'Should have regular param'
+    assert params['param'][0] == dict(name='id', type="int",
+                                     description='An id.')
+
+
+def test_camelcase_to_dashes():
+    result = apidocs.camelcase_to_dashes('CamelCase')
+    assert result == 'camel-case'
+
+    result = apidocs.camelcase_to_dashes('CaCa')
+    assert result == 'ca-ca'
+
+    result = apidocs.camelcase_to_dashes('CCM')
+    assert result == 'CCM'
