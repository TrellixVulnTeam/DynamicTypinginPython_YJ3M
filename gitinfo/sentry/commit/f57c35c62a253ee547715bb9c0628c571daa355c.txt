commit f57c35c62a253ee547715bb9c0628c571daa355c
Author: ckj <chriskjennings@gmail.com>
Date:   Mon Apr 27 23:42:44 2015 -0400

    Give events their own view

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index a559ebe53d..3019f6e673 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -11,6 +11,7 @@ var GroupEvents = require("./views/groupEvents");
 var GroupTags = require("./views/groupTags");
 var GroupTagValues = require("./views/groupTagValues");
 var GroupOverview = require("./views/groupOverview");
+var GroupEventDetails = require("./views/groupEventDetails");
 var OrganizationDetails = require("./views/organizationDetails");
 var OrganizationTeams = require("./views/organizationTeams");
 var ProjectDetails = require("./views/projectDetails");
@@ -31,7 +32,7 @@ var routes = (
         <Route name="groupDetails" path="group/:groupId/" handler={GroupDetails}
                ignoreScrollBehavior>
           <DefaultRoute name="groupOverview" handler={GroupOverview} />
-          <Route name="groupEventDetails" path="events/:eventId/" handler={GroupOverview} />
+          <Route name="groupEventDetails" path="events/:eventId/" handler={GroupEventDetails} />
           <Route name="groupTags" path="tags/" handler={GroupTags} />
           <Route name="groupTagValues" path="tags/:tagKey/" handler={GroupTagValues} />
           <Route name="groupEvents" path="events/" handler={GroupEvents} />
diff --git a/src/sentry/static/sentry/app/views/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
new file mode 100644
index 0000000000..00a6cdaa02
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
@@ -0,0 +1,145 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+var Router = require("react-router");
+
+var api = require("../api");
+var ApiMixin = require("../mixins/apiMixin");
+var GroupActivity = require("./groupDetails/activity");
+var GroupChart = require("./groupDetails/chart");
+var GroupEvent = require("./groupDetails/event");
+var GroupEventToolbar = require("./groupDetails/eventToolbar");
+var GroupState = require("../mixins/groupState");
+var MutedBox = require("../components/mutedBox");
+var LoadingError = require("../components/loadingError");
+var LoadingIndicator = require("../components/loadingIndicator");
+var PropTypes = require("../proptypes");
+var RouteMixin = require("../mixins/routeMixin");
+var TimeSince = require("../components/timeSince");
+var utils = require("../utils");
+
+
+var GroupEventDetails = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  mixins: [
+    ApiMixin,
+    GroupState,
+    RouteMixin
+  ],
+
+  propTypes: {
+    statsPeriod: React.PropTypes.string.isRequired
+  },
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      event: null,
+      eventNavLinks: ''
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  routeDidChange(prevPath) {
+    this.fetchData();
+  },
+
+  fetchData() {
+    var eventId = this.context.router.getCurrentParams().eventId || 'latest';
+
+    var url = (eventId === 'latest' ?
+      '/groups/' + this.getGroup().id + '/events/' + eventId + '/' :
+      '/events/' + eventId + '/');
+
+    this.setState({
+      loading: true,
+      error: false
+    });
+
+    this.apiRequest(url, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          event: data,
+          error: false,
+          loading: false
+        });
+
+        api.bulkUpdate({
+          orgId: this.getOrganization().slug,
+          projectId: this.getProject().slug,
+          itemIds: [this.getGroup().id],
+          failSilently: true,
+          data: {hasSeen: true}
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
+  render() {
+    var group = this.getGroup();
+    var evt = this.state.event;
+    var params = this.context.router.getCurrentParams();
+
+    if (evt) {
+      var eventNavNodes = [
+        (evt.nextEventID ?
+          <Router.Link to="groupEventDetails"
+            params={{orgId: params.orgId,
+                     projectId: params.projectId,
+                     groupId: params.groupId,
+                     eventId: evt.nextEventID}}
+            className="btn btn-default btn-lg">Newer</Router.Link>
+        : <a class="btn btn-default btn-lg disabled">Newer</a>),
+        (evt.previousEventID ?
+          <Router.Link to="groupEventDetails"
+            params={{orgId: params.orgId,
+                     projectId: params.projectId,
+                     groupId: params.groupId,
+                     eventId: evt.previousEventID}}
+            className="btn btn-default btn-lg">Older</Router.Link>
+        : <a class="btn btn-default btn-lg disabled">Older</a>),
+      ];
+    }
+
+    var firstRelease = (group.firstRelease ?
+      group.firstRelease.version :
+      <span>&mdash;</span>);
+
+    return (
+      <div>
+        <MutedBox status={group.status} />
+        {evt &&
+          <GroupEventToolbar
+              group={group}
+              event={evt}
+              orgId={params.orgId}
+              projectId={params.projectId} />
+        }
+        {this.state.loading ?
+          <LoadingIndicator />
+        : (this.state.error ?
+          <LoadingError onRetry={this.fetchData} />
+        :
+          <div>
+            <GroupEvent group={group} event={evt} />
+          </div>
+        )}
+      </div>
+    );
+  }
+});
+
+module.exports = GroupEventDetails;
