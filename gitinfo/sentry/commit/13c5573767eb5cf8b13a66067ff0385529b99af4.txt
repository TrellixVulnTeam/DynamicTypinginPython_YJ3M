commit 13c5573767eb5cf8b13a66067ff0385529b99af4
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Feb 7 16:15:40 2019 +0100

    test(interfaces): Refactor tests to no longer call get_hash directly (#11958)

diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index 2c03e88fd7..4ed15de01a 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -198,11 +198,11 @@ class Interface(object):
     def to_json(self):
         return prune_empty_keys(self._data)
 
-    def get_hash(self):
+    def get_hash(self, platform=None):
         return []
 
-    def compute_hashes(self, platform):
-        result = self.get_hash()
+    def compute_hashes(self, platform=None):
+        result = self.get_hash(platform)
         if not result:
             return []
         return [result]
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 64fea67193..34368aa063 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -1031,7 +1031,7 @@ class Exception(Interface):
             'exc_omitted': self.exc_omitted,
         })
 
-    def compute_hashes(self, platform):
+    def compute_hashes(self, platform=None):
         system_hash = self.get_hash(platform, system_frames=True)
         if not system_hash:
             return []
diff --git a/src/sentry/interfaces/message.py b/src/sentry/interfaces/message.py
index c212d8c185..c8bcb752de 100644
--- a/src/sentry/interfaces/message.py
+++ b/src/sentry/interfaces/message.py
@@ -89,7 +89,7 @@ class Message(Interface):
             'params': self.params or None
         })
 
-    def get_hash(self):
+    def get_hash(self, platform=None):
         return [self.message or self.formatted]
 
     def to_string(self, event, is_public=False, **kwargs):
diff --git a/src/sentry/interfaces/security.py b/src/sentry/interfaces/security.py
index bba8bc6a03..ae9405f678 100644
--- a/src/sentry/interfaces/security.py
+++ b/src/sentry/interfaces/security.py
@@ -171,7 +171,7 @@ class Hpkp(SecurityReport):
     def get_culprit(self):
         return None
 
-    def get_hash(self, is_processed_data=True):
+    def get_hash(self, platform=None, is_processed_data=True):
         return ['hpkp', self.hostname]
 
     def get_message(self):
@@ -235,7 +235,7 @@ class ExpectStaple(SecurityReport):
     def get_culprit(self):
         return self.hostname
 
-    def get_hash(self, is_processed_data=True):
+    def get_hash(self, platform=None, is_processed_data=True):
         return ['expect-staple', self.hostname]
 
     def get_message(self):
@@ -297,7 +297,7 @@ class ExpectCT(SecurityReport):
     def get_culprit(self):
         return self.hostname
 
-    def get_hash(self, is_processed_data=True):
+    def get_hash(self, platform=None, is_processed_data=True):
         return ['expect-ct', self.hostname]
 
     def get_message(self):
@@ -353,7 +353,7 @@ class Csp(SecurityReport):
 
         return cls.to_python(kwargs)
 
-    def get_hash(self, is_processed_data=True):
+    def get_hash(self, platform=None, is_processed_data=True):
         if self._local_script_violation_type:
             uri = "'%s'" % self._local_script_violation_type
         else:
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 3aee8990ad..a44700a574 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -833,7 +833,7 @@ class Stacktrace(Interface):
             'registers': self.registers,
         })
 
-    def compute_hashes(self, platform):
+    def compute_hashes(self, platform=None):
         system_hash = self.get_hash(platform, system_frames=True)
         if not system_hash:
             return []
diff --git a/src/sentry/interfaces/template.py b/src/sentry/interfaces/template.py
index d1cb372cc8..20c8522749 100644
--- a/src/sentry/interfaces/template.py
+++ b/src/sentry/interfaces/template.py
@@ -58,7 +58,7 @@ class Template(Interface):
         }
         return cls(**kwargs)
 
-    def get_hash(self):
+    def get_hash(self, platform=None):
         return [self.filename, self.context_line]
 
     def to_string(self, event, is_public=False, **kwargs):
diff --git a/src/sentry/interfaces/threads.py b/src/sentry/interfaces/threads.py
index 7802370c59..63fdfbdbfc 100644
--- a/src/sentry/interfaces/threads.py
+++ b/src/sentry/interfaces/threads.py
@@ -86,7 +86,7 @@ class Threads(Interface):
         else:
             return meta
 
-    def get_hash(self):
+    def get_hash(self, platform=None):
         if len(self.values) != 1:
             return []
         stacktrace = self.values[0].get('stacktrace')
diff --git a/src/sentry/interfaces/user.py b/src/sentry/interfaces/user.py
index 640c9d80fb..df3fdc2166 100644
--- a/src/sentry/interfaces/user.py
+++ b/src/sentry/interfaces/user.py
@@ -125,9 +125,6 @@ class User(Interface):
             'data': meta.get('data'),
         }
 
-    def get_hash(self):
-        return []
-
     def get_display_name(self):
         return self.email or self.username
 
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index 4b3bbaff2d..7f6675c4ea 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -3,6 +3,7 @@
 from __future__ import absolute_import
 
 from exam import fixture
+from itertools import chain
 
 from sentry.interfaces.exception import (SingleException, Exception, slim_exception_data,
                                          Mechanism, normalize_mechanism_meta, upgrade_legacy_mechanism)
@@ -109,11 +110,11 @@ class ExceptionTest(TestCase):
 ValueError: hello world
   File "foo/baz.py", line 1"""
 
-    def test_get_hash(self):
+    def test_compute_hashes(self):
         inst = self.interface
 
-        all_values = sum([v.get_hash() for v in inst.values], [])
-        assert inst.get_hash() == all_values
+        all_values = [sum(chain.from_iterable(v.compute_hashes() for v in inst.values), [])]
+        assert inst.compute_hashes() == all_values
 
     def test_context_with_mixed_frames(self):
         inst = Exception.to_python(
@@ -353,23 +354,23 @@ class SingleExceptionTest(TestCase):
             'module': self.interface.module,
         }
 
-    def test_get_hash(self):
-        assert self.interface.get_hash() == [
+    def test_comput_hashes(self):
+        assert self.interface.compute_hashes() == [[
             self.interface.type,
             self.interface.value,
-        ]
+        ]]
 
-    def test_get_hash_without_type(self):
+    def test_compute_hashes_without_type(self):
         self.interface.type = None
-        assert self.interface.get_hash() == [
+        assert self.interface.compute_hashes() == [[
             self.interface.value,
-        ]
+        ]]
 
-    def test_get_hash_without_value(self):
+    def test_compute_hashes_without_value(self):
         self.interface.value = None
-        assert self.interface.get_hash() == [
+        assert self.interface.compute_hashes() == [[
             self.interface.type,
-        ]
+        ]]
 
     def test_serialize_unserialize_behavior(self):
         result = type(self.interface).to_python(self.interface.to_json())
diff --git a/tests/sentry/interfaces/test_message.py b/tests/sentry/interfaces/test_message.py
index 518af23c9c..e10cdf555d 100644
--- a/tests/sentry/interfaces/test_message.py
+++ b/tests/sentry/interfaces/test_message.py
@@ -26,16 +26,16 @@ class MessageTest(TestCase):
             'formatted': 'Hello there world!'
         }
 
-    def test_get_hash_prefers_message(self):
-        assert self.interface.get_hash() == [self.interface.message]
+    def test_compute_hashes_prefers_message(self):
+        assert self.interface.compute_hashes() == [[self.interface.message]]
 
-    def test_get_hash_uses_formatted(self):
+    def test_compute_hashes_uses_formatted(self):
         interface = Message.to_python(dict(
             message=None,
             params=(),
             formatted='Hello there world!'
         ))
-        assert interface.get_hash() == [interface.formatted]
+        assert interface.compute_hashes() == [[interface.formatted]]
 
     def test_format_kwargs(self):
         interface = Message.to_python(dict(
diff --git a/tests/sentry/interfaces/test_security.py b/tests/sentry/interfaces/test_security.py
index 1cb98c3003..c41184246a 100644
--- a/tests/sentry/interfaces/test_security.py
+++ b/tests/sentry/interfaces/test_security.py
@@ -97,7 +97,7 @@ class CspTest(TestCase):
         )
         assert result.get_culprit() == "style-src http://example2.com 'self'"
 
-    def test_get_hash(self):
+    def test_compute_hashes(self):
         result = Csp.to_python(
             dict(
                 document_uri='http://example.com/foo',
@@ -105,7 +105,7 @@ class CspTest(TestCase):
                 blocked_uri='',
             )
         )
-        assert result.get_hash() == ['script-src', "'self'"]
+        assert result.compute_hashes() == [['script-src', "'self'"]]
 
         result = Csp.to_python(
             dict(
@@ -114,7 +114,7 @@ class CspTest(TestCase):
                 blocked_uri='self',
             )
         )
-        assert result.get_hash() == ['script-src', "'self'"]
+        assert result.compute_hashes() == [['script-src', "'self'"]]
 
         result = Csp.to_python(
             dict(
@@ -123,7 +123,7 @@ class CspTest(TestCase):
                 blocked_uri='http://example.com/lol.js',
             )
         )
-        assert result.get_hash() == ['script-src', 'example.com']
+        assert result.compute_hashes() == [['script-src', 'example.com']]
 
         result = Csp.to_python(
             dict(
@@ -132,7 +132,7 @@ class CspTest(TestCase):
                 blocked_uri='data:foo',
             )
         )
-        assert result.get_hash() == ['img-src', 'data:']
+        assert result.compute_hashes() == [['img-src', 'data:']]
 
         result = Csp.to_python(
             dict(
@@ -141,7 +141,7 @@ class CspTest(TestCase):
                 blocked_uri='ftp://example.com/foo',
             )
         )
-        assert result.get_hash() == ['img-src', 'ftp://example.com']
+        assert result.compute_hashes() == [['img-src', 'ftp://example.com']]
 
     def test_get_tags(self):
         assert self.interface.get_tags() == [
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index c1c094f900..47c6eb2e76 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -152,11 +152,12 @@ class StacktraceTest(TestCase):
                 ]
             )
         )
-        result = interface.get_hash(system_frames=False)
-        assert result == ['foo.py', 1]
 
-        result = interface.get_hash(system_frames=True)
-        assert result == ['foo.py', 1, 'bar.py', 1]
+        result = interface.compute_hashes()
+        assert result == [
+            ['foo.py', 1, 'bar.py', 1],
+            ['foo.py', 1],
+        ]
 
     def test_compute_hashes(self):
         interface = Stacktrace.to_python(
@@ -196,7 +197,7 @@ class StacktraceTest(TestCase):
         result = interface.compute_hashes('cocoa')
         assert result == [['bar.m', 1, 'baz.m', 1], ['bar.m', 1]]
 
-    def test_get_hash_with_minimal_app_frames(self):
+    def test_compute_hashes_with_minimal_app_frames(self):
         frames = [{
             'lineno': 1,
             'filename': 'foo.py',
@@ -207,18 +208,18 @@ class StacktraceTest(TestCase):
             'in_app': False,
         } for _ in range(11)]
         interface = Stacktrace.to_python(dict(frames=frames))
-        result = interface.get_hash(system_frames=False)
-        assert not result
+        result = interface.compute_hashes()
+        assert result == [['foo.py', 1, 'bar.py', 1]]
 
-    def test_get_hash_with_only_required_vars(self):
+    def test_compute_hashes_with_only_required_vars(self):
         interface = Frame.to_python({
             'lineno': 1,
             'filename': 'foo.py',
         })
-        result = interface.get_hash()
-        self.assertEquals(result, ['foo.py', 1])
+        result = interface.compute_hashes()
+        self.assertEquals(result, [['foo.py', 1]])
 
-    def test_get_hash_sanitizes_block_functions(self):
+    def test_compute_hashes_sanitizes_block_functions(self):
         # This is Ruby specific
         interface = Frame.to_python(
             {
@@ -226,10 +227,10 @@ class StacktraceTest(TestCase):
                 'function': 'block in _conditional_callback_around_233',
             }
         )
-        result = interface.get_hash()
-        self.assertEquals(result, ['foo.py', 'block'])
+        result = interface.compute_hashes()
+        self.assertEquals(result, [['foo.py', 'block']])
 
-    def test_get_hash_sanitizes_versioned_filenames(self):
+    def test_compute_hashes_sanitizes_versioned_filenames(self):
         # This is Ruby specific
         interface = Frame.to_python(
             {
@@ -237,12 +238,12 @@ class StacktraceTest(TestCase):
                 'context_line': '<% if @hotels.size > 0 %>',
             }
         )
-        result = interface.get_hash()
+        result = interface.compute_hashes()
         self.assertEquals(
-            result, [
+            result, [[
                 '/data/foo/releases/<version>/app/views/foo.html.erb',
                 '<% if @hotels.size > 0 %>',
-            ]
+            ]]
         )
 
         interface = Frame.to_python(
@@ -251,67 +252,67 @@ class StacktraceTest(TestCase):
                 'context_line': '<% if @hotels.size > 0 %>',
             }
         )
-        result = interface.get_hash()
+        result = interface.compute_hashes()
         self.assertEquals(
-            result, [
+            result, [[
                 '<version>/app/views/foo.html.erb',
                 '<% if @hotels.size > 0 %>',
-            ]
+            ]]
         )
 
-    def test_get_hash_ignores_java8_lambda_module(self):
+    def test_compute_hashes_ignores_java8_lambda_module(self):
         interface = Frame.to_python(
             {
                 'module': 'foo.bar.Baz$$Lambda$40/1673859467',
                 'function': 'call',
             }
         )
-        result = interface.get_hash(platform='java')
-        self.assertEquals(result, [
+        result = interface.compute_hashes(platform='java')
+        self.assertEquals(result, [[
             '<module>',
             'call',
-        ])
+        ]])
 
-    def test_get_hash_ignores_java8_lambda_function(self):
+    def test_compute_hashes_ignores_java8_lambda_function(self):
         interface = Frame.to_python({
             'module': 'foo.bar.Baz',
             'function': 'lambda$work$1',
         })
-        result = interface.get_hash()
-        self.assertEquals(result, [
+        result = interface.compute_hashes()
+        self.assertEquals(result, [[
             'foo.bar.Baz',
             '<function>',
-        ])
+        ]])
 
-    def test_get_hash_ignores_ENHANCED_clojure_classes(self):
+    def test_comput_hashes_ignores_ENHANCED_clojure_classes(self):
         interface = Frame.to_python(
             {
                 'module': 'sentry_clojure_example.core$_main$fn__1539',
                 'function': 'invoke'
             }
         )
-        result = interface.get_hash(platform='java')
-        self.assertEquals(result, [
+        result = interface.compute_hashes(platform='java')
+        self.assertEquals(result, [[
             'sentry_clojure_example.core$_main$fn__<auto>',
             'invoke',
-        ])
+        ]])
 
-    def test_get_hash_ignores_extra_ENHANCED_clojure_classes(self):
+    def test_compute_hashes_ignores_extra_ENHANCED_clojure_classes(self):
         interface = Frame.to_python(
             {
                 'module': 'sentry_clojure_example.core$_main$fn__1539$fn__1540',
                 'function': 'invoke'
             }
         )
-        result = interface.get_hash(platform='java')
+        result = interface.compute_hashes(platform='java')
         self.assertEquals(
-            result, [
+            result, [[
                 'sentry_clojure_example.core$_main$fn__<auto>$fn__<auto>',
                 'invoke',
-            ]
+            ]]
         )
 
-    def test_get_hash_ignores_ENHANCED_spring_classes(self):
+    def test_compute_hashes_ignores_ENHANCED_spring_classes(self):
         interface = Frame.to_python(
             {
                 'module':
@@ -321,16 +322,16 @@ class StacktraceTest(TestCase):
                 'jipJipManagementApplication'
             }
         )
-        result = interface.get_hash(platform='java')
+        result = interface.compute_hashes(platform='java')
         self.assertEquals(
-            result, [
+            result, [[
                 'invalid.gruml.talkytalkyhub.common.config.JipJipConfig'
                 '$$EnhancerBySpringCGLIB$$<auto>',
                 'jipJipManagementApplication',
-            ]
+            ]]
         )
 
-    def test_get_hash_ignores_extra_ENHANCED_spring_classes(self):
+    def test_compute_hashes_ignores_extra_ENHANCED_spring_classes(self):
         interface = Frame.to_python(
             {
                 'module':
@@ -342,28 +343,28 @@ class StacktraceTest(TestCase):
                 'jipJipManagementApplication'
             }
         )
-        result = interface.get_hash(platform='java')
+        result = interface.compute_hashes(platform='java')
         self.assertEquals(
-            result, [
+            result, [[
                 'invalid.gruml.talkytalkyhub.common.config.JipJipConfig'
                 '$$EnhancerBySpringCGLIB$$<auto>$$EnhancerBySpringCGLIB$$<auto>'
                 '$$FastClassBySpringCGLIB$$<auto>',
                 'jipJipManagementApplication',
-            ]
+            ]]
         )
 
-    def test_get_hash_ignores_javassist(self):
+    def test_compute_hashes_ignores_javassist(self):
         interface = Frame.to_python(
             {
                 'module': 'com.example.api.entry.EntriesResource_$$_javassist_seam_74',
                 'function': 'fn',
             }
         )
-        result = interface.get_hash(platform='java')
+        result = interface.compute_hashes(platform='java')
         self.assertEquals(
-            result, [
+            result, [[
                 'com.example.api.entry.EntriesResource_$$_javassist<auto>', 'fn'
-            ]
+            ]]
         )
 
         interface = Frame.to_python(
@@ -372,11 +373,11 @@ class StacktraceTest(TestCase):
                 'function': 'fn',
             }
         )
-        result = interface.get_hash(platform='java')
+        result = interface.compute_hashes(platform='java')
         self.assertEquals(
-            result, [
+            result, [[
                 'com.example.api.entry.EntriesResource_$$_javassist<auto>', 'fn'
-            ]
+            ]]
         )
 
         interface = Frame.to_python(
@@ -385,25 +386,25 @@ class StacktraceTest(TestCase):
                 'function': 'fn',
             }
         )
-        result = interface.get_hash(platform='java')
+        result = interface.compute_hashes(platform='java')
         self.assertEquals(
-            result, [
+            result, [[
                 'EntriesResource_$$_javassist<auto>.java', 'fn'
-            ]
+            ]]
         )
 
-    def test_get_hash_ignores_sun_java_generated_constructors(self):
+    def test_compute_hashes_ignores_sun_java_generated_constructors(self):
         interface = Frame.to_python(
             {
                 'module': 'sun.reflect.GeneratedSerializationConstructorAccessor1',
                 'function': 'invoke',
             }
         )
-        result = interface.get_hash(platform='java')
-        self.assertEquals(result, [
+        result = interface.compute_hashes(platform='java')
+        self.assertEquals(result, [[
             'sun.reflect.GeneratedSerializationConstructorAccessor<auto>',
             'invoke',
-        ])
+        ]])
 
         interface = Frame.to_python(
             {
@@ -411,26 +412,26 @@ class StacktraceTest(TestCase):
                 'function': 'invoke',
             }
         )
-        result = interface.get_hash(platform='java')
-        self.assertEquals(result, [
+        result = interface.compute_hashes(platform='java')
+        self.assertEquals(result, [[
             'sun.reflect.GeneratedConstructorAccessor<auto>',
             'invoke',
-        ])
+        ]])
 
-    def test_get_hash_ignores_sun_java_generated_methods(self):
+    def test_compute_hashes_ignores_sun_java_generated_methods(self):
         interface = Frame.to_python(
             {
                 'module': 'sun.reflect.GeneratedMethodAccessor12345',
                 'function': 'invoke',
             }
         )
-        result = interface.get_hash(platform='java')
-        self.assertEquals(result, [
+        result = interface.compute_hashes(platform='java')
+        self.assertEquals(result, [[
             'sun.reflect.GeneratedMethodAccessor',
             'invoke',
-        ])
+        ]])
 
-    def test_get_hash_sanitizes_erb_templates(self):
+    def test_compute_hashes_sanitizes_erb_templates(self):
         # This is Ruby specific
         interface = Frame.to_python(
             {
@@ -438,22 +439,22 @@ class StacktraceTest(TestCase):
                 'function': '_foo_html_erb__3327151541118998292_70361296749460',
             }
         )
-        result = interface.get_hash()
-        self.assertEquals(result, [
+        result = interface.compute_hashes()
+        self.assertEquals(result, [[
             'foo.html.erb',
             '_foo_html_erb__<anon>_<anon>',
-        ])
+        ]])
 
-    def test_get_hash_ignores_filename_if_blob(self):
+    def test_compute_hashes_ignores_filename_if_blob(self):
         interface = Frame.to_python(
             {
                 'filename': 'blob:http://example.com/7f7aaadf-a006-4217-9ed5-5fbf8585c6c0',
             }
         )
-        result = interface.get_hash()
+        result = interface.compute_hashes()
         self.assertEquals(result, [])
 
-    def test_get_hash_ignores_filename_if_http(self):
+    def test_compute_hashes_ignores_filename_if_http(self):
         interface = Frame.to_python(
             {
                 'context_line': 'hello world',
@@ -461,10 +462,10 @@ class StacktraceTest(TestCase):
                 'function': 'test',
             }
         )
-        result = interface.get_hash()
-        self.assertEquals(result, ['hello world'])
+        result = interface.compute_hashes()
+        self.assertEquals(result, [['hello world']])
 
-    def test_get_hash_ignores_filename_if_https(self):
+    def test_compute_hashes_ignores_filename_if_https(self):
         interface = Frame.to_python(
             {
                 'context_line': 'hello world',
@@ -472,10 +473,10 @@ class StacktraceTest(TestCase):
                 'function': 'test',
             }
         )
-        result = interface.get_hash()
-        self.assertEquals(result, ['hello world'])
+        result = interface.compute_hashes()
+        self.assertEquals(result, [['hello world']])
 
-    def test_get_hash_ignores_filename_if_abs_path_is_http(self):
+    def test_compute_hashes_ignores_filename_if_abs_path_is_http(self):
         interface = Frame.to_python(
             {
                 'context_line': 'hello world',
@@ -484,20 +485,20 @@ class StacktraceTest(TestCase):
                 'filename': 'foo.py',
             }
         )
-        result = interface.get_hash()
-        self.assertEquals(result, ['hello world'])
+        result = interface.compute_hashes()
+        self.assertEquals(result, [['hello world']])
 
-    def test_get_hash_uses_module_over_filename(self):
+    def test_compute_hashes_uses_module_over_filename(self):
         interface = Frame.to_python({'lineno': 1, 'filename': 'foo.py', 'module': 'foo'})
-        result = interface.get_hash()
-        self.assertEquals(result, ['foo', 1])
+        result = interface.compute_hashes()
+        self.assertEquals(result, [['foo', 1]])
 
-    def test_get_hash_uses_function_over_lineno(self):
+    def test_compute_hashes_uses_function_over_lineno(self):
         interface = Frame.to_python({'lineno': 1, 'filename': 'foo.py', 'function': 'bar'})
-        result = interface.get_hash()
-        self.assertEquals(result, ['foo.py', 'bar'])
+        result = interface.compute_hashes()
+        self.assertEquals(result, [['foo.py', 'bar']])
 
-    def test_get_hash_uses_context_line_over_function(self):
+    def test_compute_hashes_uses_context_line_over_function(self):
         interface = Frame.to_python(
             {
                 'context_line': 'foo bar',
@@ -506,10 +507,10 @@ class StacktraceTest(TestCase):
                 'function': 'bar'
             }
         )
-        result = interface.get_hash()
-        self.assertEquals(result, ['foo.py', 'foo bar'])
+        result = interface.compute_hashes()
+        self.assertEquals(result, [['foo.py', 'foo bar']])
 
-    def test_get_hash_discards_seemingly_useless_stack(self):
+    def test_compute_hashes_discards_seemingly_useless_stack(self):
         interface = Stacktrace.to_python(
             {
                 'frames': [
@@ -523,10 +524,10 @@ class StacktraceTest(TestCase):
                 ],
             }
         )
-        result = interface.get_hash()
+        result = interface.compute_hashes()
         assert result == []
 
-    def test_get_hash_does_not_discard_non_urls(self):
+    def test_compute_hashes_does_not_discard_non_urls(self):
         interface = Stacktrace.to_python(
             {
                 'frames': [
@@ -540,10 +541,10 @@ class StacktraceTest(TestCase):
                 ],
             }
         )
-        result = interface.get_hash()
+        result = interface.compute_hashes()
         assert result != []
 
-    def test_get_hash_excludes_single_frame_urls(self):
+    def test_compute_hashes_excludes_single_frame_urls(self):
         """
         Browser JS will often throw errors (from inlined code in an HTML page)
         which contain only a single frame, no function name, and have the HTML
@@ -565,10 +566,10 @@ class StacktraceTest(TestCase):
                 ],
             }
         )
-        result = interface.get_hash()
+        result = interface.compute_hashes()
         assert result == []
 
-    def test_get_hash_ignores_module_if_page_url(self):
+    def test_compute_hashes_ignores_module_if_page_url(self):
         """
         When the abs_path is a URL without a file extension, and the module is
         a suffix of that URL, we should ignore the module. This takes care of a
@@ -581,18 +582,18 @@ class StacktraceTest(TestCase):
             'abs_path': 'https://sentry.io/foo/bar/baz.js',
             'module': 'foo/bar/baz',
         })
-        result = interface.get_hash(platform='javascript')
-        assert result == ['foo/bar/baz']
+        result = interface.compute_hashes(platform='javascript')
+        assert result == [['foo/bar/baz']]
 
         interface = Frame.to_python({
             'filename': 'foo.py',
             'abs_path': 'https://sentry.io/foo/bar/baz',
             'module': 'foo/bar/baz',
         })
-        result = interface.get_hash(platform='javascript')
-        assert result == ['<module>']
+        result = interface.compute_hashes(platform='javascript')
+        assert result == [['<module>']]
 
-    def test_get_hash_ignores_singular_anonymous_frame(self):
+    def test_compute_hashes_ignores_singular_anonymous_frame(self):
         interface = Stacktrace.to_python({
             'frames': [
                 {"abs_path": "<anonymous>", "filename": "<anonymous>", "in_app": False},
@@ -610,7 +611,7 @@ class StacktraceTest(TestCase):
                  "filename": "/C:/Users/redacted/AppData/Local/redacted/app-2.4.1/resources/app.asar/dojo/dojo.js"}
             ]
         })
-        result = interface.get_hash(platform='javascript')
+        result = interface.compute_hashes(platform='javascript')
 
         assert result == []
 
@@ -677,8 +678,8 @@ class StacktraceTest(TestCase):
                 ]
             }
         )
-        result = interface.get_hash()
-        self.assertEquals(result, [
+        result = interface.compute_hashes()
+        self.assertEquals(result, [[
             'io.sentry.example.Application', 'main',
             'io.sentry.example.Application', 'normalFunc',
             # first call to recursive function
@@ -687,7 +688,7 @@ class StacktraceTest(TestCase):
             # call from *different location* in recursive function
             'io.sentry.example.Application', 'recurFunc',
             'io.sentry.example.Application', 'throwError'
-        ])
+        ]])
 
     def test_frame_hard_limit(self):
         hard_limit = settings.SENTRY_STACKTRACE_FRAMES_HARD_LIMIT
@@ -709,7 +710,7 @@ class StacktraceTest(TestCase):
         # second to last frame (lineno:250) should be removed
         assert interface.frames[-2].lineno == hard_limit - 1
 
-    def test_get_hash_ignores_safari_native_code(self):
+    def test_compute_hashes_ignores_safari_native_code(self):
         interface = Frame.to_python(
             {
                 'abs_path': '[native code]',
@@ -717,7 +718,7 @@ class StacktraceTest(TestCase):
                 'function': 'forEach',
             }
         )
-        result = interface.get_hash()
+        result = interface.compute_hashes()
         self.assertEquals(result, [])
 
     def test_cocoa_culprit(self):
@@ -778,7 +779,7 @@ class StacktraceTest(TestCase):
         )
         assert stacktrace.get_culprit_string(platform='cocoa') == '-[CRLCrashAsyncSafeThread crash]'
 
-    def test_get_hash_does_not_group_different_js_errors(self):
+    def test_compute_hashes_does_not_group_different_js_errors(self):
         interface = Stacktrace.to_python(
             {
                 'frames': [
@@ -791,10 +792,10 @@ class StacktraceTest(TestCase):
                 ],
             }
         )
-        result = interface.get_hash()
+        result = interface.compute_hashes()
         assert result == []
 
-    def test_get_hash_uses_symbol_instead_of_function(self):
+    def test_compute_hashes_uses_symbol_instead_of_function(self):
         interface = Frame.to_python(
             {
                 'module': 'libfoo',
@@ -802,23 +803,23 @@ class StacktraceTest(TestCase):
                 'symbol': '_main',
             }
         )
-        result = interface.get_hash()
-        self.assertEquals(result, [
+        result = interface.compute_hashes()
+        self.assertEquals(result, [[
             'libfoo',
             '_main',
-        ])
+        ]])
 
-    def test_get_hash_skips_symbol_if_unknown(self):
+    def test_compute_hashes_skips_symbol_if_unknown(self):
         interface = Frame.to_python({
             'module': 'libfoo',
             'function': 'main',
             'symbol': '?',
         })
-        result = interface.get_hash()
-        self.assertEquals(result, [
+        result = interface.compute_hashes()
+        self.assertEquals(result, [[
             'libfoo',
             'main',
-        ])
+        ]])
 
     @mock.patch('sentry.interfaces.stacktrace.Stacktrace.get_stacktrace')
     def test_to_string_returns_stacktrace(self, get_stacktrace):
diff --git a/tests/sentry/interfaces/test_template.py b/tests/sentry/interfaces/test_template.py
index a22f9ad057..403290b450 100644
--- a/tests/sentry/interfaces/test_template.py
+++ b/tests/sentry/interfaces/test_template.py
@@ -41,9 +41,9 @@ class TemplateTest(TestCase):
         with pytest.raises(InterfaceValidationError):
             Template.to_python({"lineno": 1, "context_line": 42})
 
-    def test_get_hash(self):
-        result = self.interface.get_hash()
-        self.assertEquals(result, ['foo.html', 'hello world'])
+    def test_compute_hashes(self):
+        result = self.interface.compute_hashes()
+        self.assertEquals(result, [['foo.html', 'hello world']])
 
     @mock.patch('sentry.interfaces.template.get_context')
     @mock.patch('sentry.interfaces.template.Template.get_traceback')
diff --git a/tests/sentry/interfaces/test_threads.py b/tests/sentry/interfaces/test_threads.py
index 54b9e7dff4..6c84d293e7 100644
--- a/tests/sentry/interfaces/test_threads.py
+++ b/tests/sentry/interfaces/test_threads.py
@@ -76,9 +76,9 @@ class ThreadsTest(TestCase):
         assert Threads.to_python({"values": [{"name": None}]}).to_json() == sink
         assert Threads.to_python({"values": [{"stacktrace": None}]}).to_json() == sink
 
-    def test_get_hash(self):
-        result = self.interface.get_hash()
-        self.assertEquals(result, [['foo/baz.c', 'main']])
+    def test_compute_hashes(self):
+        result = self.interface.compute_hashes()
+        self.assertEquals(result, [[['foo/baz.c', 'main']]])
 
     def test_no_hash(self):
         interface = Threads.to_python(
@@ -138,5 +138,4 @@ class ThreadsTest(TestCase):
                 ]
             )
         )
-        result = interface.get_hash()
-        assert not result
+        assert interface.compute_hashes() == []
