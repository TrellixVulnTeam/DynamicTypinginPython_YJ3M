commit 726a9db6b1e4dc073fb1afdc164b60dbc56a45fc
Author: Mark Story <mark@sentry.io>
Date:   Fri Oct 25 17:16:04 2019 -0400

    feat(ui) Add 'All projects' and 'my projects' options (#15223)
    
    Organizations with the 'allow_leavejoin' flag and global-views will now
    see two new options that allow them to view 'my projects' which is all
    projects they are a member of (formerly known as All Projects) and a new
    'All Projects' option which is all projects that current user has access
    to in the organization.
    
    For organizations without global-views neither of these options will be
    visible. Organizations with global-views and no allow_leavejoin will not
    see the 'All Projects' option as it is not useful.
    
    Refs SEN-1176

diff --git a/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx b/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
index df4a836657..2e8974cc1c 100644
--- a/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
@@ -5,6 +5,7 @@ import {uniq} from 'lodash';
 
 import {analytics} from 'app/utils/analytics';
 import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
+import {ALL_ACCESS_PROJECTS} from 'app/constants/globalSelectionHeader';
 import {t} from 'app/locale';
 import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
 import GlobalSelectionHeaderRow from 'app/components/globalSelectionHeaderRow';
@@ -43,14 +44,14 @@ class MultipleEnvironmentSelector extends React.PureComponent {
     onUpdate: PropTypes.func,
   };
 
-  static defaultProps = {
-    value: [],
-  };
-
   static contextTypes = {
     router: PropTypes.object,
   };
 
+  static defaultProps = {
+    value: [],
+  };
+
   constructor(props) {
     super(props);
     this.state = {
@@ -59,7 +60,7 @@ class MultipleEnvironmentSelector extends React.PureComponent {
     };
   }
 
-  componentDidUpdate(prevProps, prevState) {
+  componentDidUpdate(prevProps) {
     // Need to sync state
     if (this.props.value !== prevProps.value) {
       this.syncSelectedStateFromProps();
@@ -164,7 +165,7 @@ class MultipleEnvironmentSelector extends React.PureComponent {
       org_id: parseInt(this.props.organization.id, 10),
     });
 
-    this.setState(state => {
+    this.setState(() => {
       this.doChange([env], e);
 
       return {
@@ -186,8 +187,18 @@ class MultipleEnvironmentSelector extends React.PureComponent {
     let environments = [];
     organization.projects.forEach(function(project) {
       const projectId = parseInt(project.id, 10);
-      // When selectedProjects is empty all projects are selected.
-      if (selectedProjects.includes(projectId) || selectedProjects.length === 0) {
+
+      // Include environments from:
+      // - the requested projects
+      // - all member projects if 'my projects' (empty list) is selected.
+      // - all projects if -1 is the only selected project.
+      if (
+        (selectedProjects.length === 1 &&
+          selectedProjects[0] === ALL_ACCESS_PROJECTS &&
+          project.hasAccess) ||
+        (selectedProjects.length === 0 && project.isMember) ||
+        selectedProjects.includes(projectId)
+      ) {
         environments = environments.concat(project.environments);
       }
     });
@@ -241,7 +252,7 @@ class MultipleEnvironmentSelector extends React.PureComponent {
           ),
         }))}
       >
-        {({isOpen, getActorProps, actions}) => (
+        {({isOpen, getActorProps}) => (
           <StyledHeaderItem
             data-test-id="global-header-environment-selector"
             icon={<StyledInlineSvg src="icon-window" />}
diff --git a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
index dd6a492a04..3b8007b2ab 100644
--- a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
@@ -4,13 +4,16 @@ import styled, {css} from 'react-emotion';
 
 import SentryTypes from 'app/sentryTypes';
 import {analytics} from 'app/utils/analytics';
+import {ALL_ACCESS_PROJECTS} from 'app/constants/globalSelectionHeader';
 import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
 import {t} from 'app/locale';
+import Button from 'app/components/button';
 import ProjectSelector from 'app/components/projectSelector';
 import InlineSvg from 'app/components/inlineSvg';
 
 import HeaderItem from 'app/components/organizations/headerItem';
-import MultipleSelectorSubmitRow from 'app/components/organizations/multipleSelectorSubmitRow';
+import {growIn} from 'app/styles/animations';
+import space from 'app/styles/space';
 
 const rootContainerStyles = css`
   display: flex;
@@ -29,14 +32,14 @@ export default class MultipleProjectSelector extends React.PureComponent {
     forceProject: SentryTypes.Project,
   };
 
-  static defaultProps = {
-    multi: true,
-  };
-
   static contextTypes = {
     router: PropTypes.object,
   };
 
+  static defaultProps = {
+    multi: true,
+  };
+
   constructor() {
     super();
     this.state = {
@@ -65,13 +68,14 @@ export default class MultipleProjectSelector extends React.PureComponent {
    *
    * Should perform an "update" callback
    */
-  handleQuickSelect = (selected, checked, e) => {
+  handleQuickSelect = selected => {
     analytics('projectselector.direct_selection', {
       path: getRouteStringFromRoutes(this.context.router.routes),
       org_id: parseInt(this.props.organization.id, 10),
     });
 
-    this.props.onChange([parseInt(selected.id, 10)]);
+    const value = selected.id === null ? [] : [parseInt(selected.id, 10)];
+    this.props.onChange(value);
     this.doUpdate();
   };
 
@@ -80,7 +84,7 @@ export default class MultipleProjectSelector extends React.PureComponent {
    *
    * Should perform an "update" callback
    */
-  handleClose = props => {
+  handleClose = () => {
     // Only update if there are changes
     if (!this.state.hasChanges) {
       return;
@@ -117,7 +121,7 @@ export default class MultipleProjectSelector extends React.PureComponent {
   /**
    * Handler for selecting multiple items, should NOT call update
    */
-  handleMultiSelect = (selected, checked, e) => {
+  handleMultiSelect = selected => {
     const {onChange, value} = this.props;
 
     analytics('projectselector.toggle', {
@@ -125,7 +129,9 @@ export default class MultipleProjectSelector extends React.PureComponent {
       path: getRouteStringFromRoutes(this.context.router.routes),
       org_id: parseInt(this.props.organization.id, 10),
     });
-    onChange(selected.map(({id}) => parseInt(id, 10)));
+
+    selected = selected.map(({id}) => parseInt(id, 10)).filter(i => i);
+    onChange(selected);
     this.setState({hasChanges: true});
   };
 
@@ -142,7 +148,6 @@ export default class MultipleProjectSelector extends React.PureComponent {
     const selectedProjectIds = new Set(value);
 
     const allProjects = [...projects, ...nonMemberProjects];
-
     const selected = allProjects.filter(project =>
       selectedProjectIds.has(parseInt(project.id, 10))
     );
@@ -176,25 +181,32 @@ export default class MultipleProjectSelector extends React.PureComponent {
         onClose={this.handleClose}
         onMultiSelect={this.handleMultiSelect}
         rootClassName={rootContainerStyles}
-        menuFooter={({actions}) =>
-          this.state.hasChanges && (
-            <MultipleSelectorSubmitRow onSubmit={() => this.handleUpdate(actions)} />
-          )
-        }
+        menuFooter={({actions}) => (
+          <SelectorFooterControls
+            selected={selectedProjectIds}
+            multi={multi}
+            organization={organization}
+            hasChanges={this.state.hasChanges}
+            onApply={() => this.handleUpdate(actions)}
+            onShowAllProjects={() => {
+              this.handleQuickSelect({id: ALL_ACCESS_PROJECTS});
+              actions.close();
+            }}
+            onShowMyProjects={() => {
+              this.handleClear();
+              actions.close();
+            }}
+          />
+        )}
       >
-        {({
-          getActorProps,
-          selectedItem,
-          activeProject,
-          selectedProjects,
-          isOpen,
-          actions,
-          onBlur,
-        }) => {
+        {({getActorProps, selectedProjects, isOpen}) => {
           const hasSelected = !!selectedProjects.length;
           const title = hasSelected
             ? selectedProjects.map(({slug}) => slug).join(', ')
-            : t('All Projects');
+            : selectedProjectIds.has(ALL_ACCESS_PROJECTS)
+            ? t('All Projects')
+            : t('My Projects');
+
           return (
             <StyledHeaderItem
               data-test-id="global-header-project-selector"
@@ -216,6 +228,78 @@ export default class MultipleProjectSelector extends React.PureComponent {
   }
 }
 
+const SelectorFooterControls = props => {
+  const {
+    selected,
+    multi,
+    hasChanges,
+    onApply,
+    onShowAllProjects,
+    onShowMyProjects,
+    organization,
+  } = props;
+  let showMyProjects = false;
+  let showAllProjects = false;
+  if (multi) {
+    showMyProjects = true;
+
+    const hasGlobalRole = ['owner', 'manager'].includes(organization.role);
+    const hasOpenMembership = organization.features.includes('open-membership');
+    const allSelected = selected && selected.has(ALL_ACCESS_PROJECTS);
+    if ((hasGlobalRole || hasOpenMembership) && !allSelected) {
+      showAllProjects = true;
+      showMyProjects = false;
+    }
+  }
+
+  // Nothing to show.
+  if (!(showAllProjects || showMyProjects || hasChanges)) {
+    return null;
+  }
+
+  return (
+    <FooterContainer>
+      {showAllProjects && (
+        <Button onClick={onShowAllProjects} priority="default" size="xsmall">
+          {t('View All Projects')}
+        </Button>
+      )}
+      {showMyProjects && (
+        <Button onClick={onShowMyProjects} priority="default" size="xsmall">
+          {t('View My Projects')}
+        </Button>
+      )}
+      {hasChanges && (
+        <SubmitButton onClick={onApply} size="xsmall" priority="primary">
+          {t('Apply Filter')}
+        </SubmitButton>
+      )}
+    </FooterContainer>
+  );
+};
+SelectorFooterControls.propTypes = {
+  // Actually a set
+  selected: PropTypes.instanceOf(Set),
+  organization: SentryTypes.Organization,
+  multi: PropTypes.bool,
+  hasChanges: PropTypes.bool,
+  onApply: PropTypes.func,
+  onShowAllProjects: PropTypes.func,
+  onShowMyProjects: PropTypes.func,
+};
+
+const FooterContainer = styled('div')`
+  display: flex;
+  justify-content: flex-end;
+  padding: ${space(1)} 0;
+  & > * {
+    margin-left: ${space(0.5)};
+  }
+`;
+const SubmitButton = styled(Button)`
+  animation: 0.1s ${growIn} ease-in;
+`;
+
 const StyledProjectSelector = styled(ProjectSelector)`
   margin: 1px 0 0 -1px;
   border-radius: ${p => p.theme.borderRadiusBottom};
diff --git a/src/sentry/static/sentry/app/constants/globalSelectionHeader.tsx b/src/sentry/static/sentry/app/constants/globalSelectionHeader.tsx
index fe2f8362f0..7b8e52dc84 100644
--- a/src/sentry/static/sentry/app/constants/globalSelectionHeader.tsx
+++ b/src/sentry/static/sentry/app/constants/globalSelectionHeader.tsx
@@ -17,3 +17,5 @@ export const DATE_TIME = {
 export const DATE_TIME_KEYS = Object.values(DATE_TIME);
 
 export const LOCAL_STORAGE_KEY = 'global-selection';
+
+export const ALL_ACCESS_PROJECTS = -1;
diff --git a/src/sentry/static/sentry/app/views/releases/list/index.jsx b/src/sentry/static/sentry/app/views/releases/list/index.jsx
index e8e52dd72b..2c3a51e097 100644
--- a/src/sentry/static/sentry/app/views/releases/list/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/index.jsx
@@ -9,6 +9,7 @@ import Pagination from 'app/components/pagination';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
+import {ALL_ACCESS_PROJECTS} from 'app/constants/globalSelectionHeader';
 import NoProjectMessage from 'app/components/noProjectMessage';
 import AsyncView from 'app/views/asyncView';
 import withOrganization from 'app/utils/withOrganization';
@@ -120,11 +121,13 @@ class OrganizationReleases extends AsyncView {
       return null;
     }
 
-    const releaseProject = selection.projects.length
-      ? allAccessibleProjects.find(
-          project => parseInt(project.id, 10) === selection.projects[0]
-        )
-      : allAccessibleProjects[0];
+    let releaseProject = allAccessibleProjects[0];
+    // Don't look for meta values which have named values
+    if (selection.projects.length && selection.projects[0] !== ALL_ACCESS_PROJECTS) {
+      releaseProject = allAccessibleProjects.find(
+        project => parseInt(project.id, 10) === selection.projects[0]
+      );
+    }
 
     return <ReleaseProgress project={releaseProject} />;
   }
diff --git a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
index 30d9b87e7a..8b1b5d26d2 100644
--- a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
+++ b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
@@ -680,6 +680,7 @@ describe('GlobalSelectionHeader', function() {
         initialData.routerContext
       );
     });
+
     it('gets member projects', function() {
       expect(wrapper.find('MultipleProjectSelector').prop('projects')).toEqual([
         memberProject,
@@ -706,5 +707,108 @@ describe('GlobalSelectionHeader', function() {
         nonMemberProject,
       ]);
     });
+
+    it('shows "My Projects" button', function() {
+      initialData.organization.features.push('global-views');
+      wrapper = mountWithTheme(
+        <GlobalSelectionHeader
+          organization={initialData.organization}
+          projects={initialData.organization.projects}
+        />,
+        initialData.routerContext
+      );
+
+      // open the project menu.
+      wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
+      const projectSelector = wrapper.find('MultipleProjectSelector');
+
+      // Two projects
+      expect(projectSelector.find('AutoCompleteItem')).toHaveLength(2);
+      // My projects in the footer
+      expect(
+        projectSelector
+          .find('SelectorFooterControls Button')
+          .first()
+          .text()
+      ).toEqual('View My Projects');
+    });
+
+    it('shows "All Projects" button based on features', function() {
+      initialData.organization.features.push('global-views');
+      initialData.organization.features.push('open-membership');
+      wrapper = mountWithTheme(
+        <GlobalSelectionHeader
+          organization={initialData.organization}
+          projects={initialData.organization.projects}
+        />,
+        initialData.routerContext
+      );
+
+      // open the project menu.
+      wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
+      const projectSelector = wrapper.find('MultipleProjectSelector');
+
+      // Two projects
+      expect(projectSelector.find('AutoCompleteItem')).toHaveLength(2);
+      // All projects in the footer
+      expect(
+        projectSelector
+          .find('SelectorFooterControls Button')
+          .first()
+          .text()
+      ).toEqual('View All Projects');
+    });
+
+    it('shows "All Projects" button based on role', function() {
+      initialData.organization.features.push('global-views');
+      initialData.organization.role = 'owner';
+      wrapper = mountWithTheme(
+        <GlobalSelectionHeader
+          organization={initialData.organization}
+          projects={initialData.organization.projects}
+        />,
+        initialData.routerContext
+      );
+
+      // open the project menu.
+      wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
+      const projectSelector = wrapper.find('MultipleProjectSelector');
+
+      // Two projects
+      expect(projectSelector.find('AutoCompleteItem')).toHaveLength(2);
+      // All projects in the footer
+      expect(
+        projectSelector
+          .find('SelectorFooterControls Button')
+          .first()
+          .text()
+      ).toEqual('View All Projects');
+    });
+
+    it('shows "My Projects" when "all projects" is selected', async function() {
+      initialData.organization.features.push('global-views');
+      initialData.organization.role = 'owner';
+
+      wrapper = mountWithTheme(
+        <GlobalSelectionHeader
+          organization={initialData.organization}
+          projects={initialData.organization.projects}
+        />,
+        changeQuery(initialData.routerContext, {project: -1})
+      );
+      await tick();
+
+      // open the project menu.
+      wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
+      const projectSelector = wrapper.find('MultipleProjectSelector');
+
+      // My projects in the footer
+      expect(
+        projectSelector
+          .find('SelectorFooterControls Button')
+          .first()
+          .text()
+      ).toEqual('View My Projects');
+    });
   });
 });
diff --git a/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx b/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx
index 5f2c84e3ac..0201bac6c3 100644
--- a/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx
+++ b/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx
@@ -2,6 +2,7 @@ import React from 'react';
 
 import {mountWithTheme} from 'sentry-test/enzyme';
 import MultipleEnvironmentSelector from 'app/components/organizations/multipleEnvironmentSelector';
+import {ALL_ACCESS_PROJECTS} from 'app/constants/globalSelectionHeader';
 
 describe('MultipleEnvironmentSelector', function() {
   let wrapper;
@@ -21,6 +22,12 @@ describe('MultipleEnvironmentSelector', function() {
         slug: 'second',
         environments: ['dev'],
       }),
+      TestStubs.Project({
+        id: '3',
+        slug: 'no member',
+        environments: ['no-env'],
+        isMember: false,
+      }),
     ],
   });
   const selectedProjects = [1, 2];
@@ -48,7 +55,7 @@ describe('MultipleEnvironmentSelector', function() {
     await wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
 
     // Select all envs
-    envs.forEach((env, i) => {
+    envs.forEach((_env, i) => {
       wrapper
         .find('EnvironmentSelectorItem')
         .at(i)
@@ -104,7 +111,7 @@ describe('MultipleEnvironmentSelector', function() {
     expect(items.at(0).text()).toBe('dev');
   });
 
-  it('shows the all environments when there are no projects selected', async function() {
+  it('shows member project environments when there are no projects selected', async function() {
     wrapper.setProps({selectedProjects: []});
     wrapper.update();
 
@@ -117,6 +124,20 @@ describe('MultipleEnvironmentSelector', function() {
     expect(items.at(2).text()).toBe('dev');
   });
 
+  it('shows all project environments when "all projects" is selected', async function() {
+    wrapper.setProps({selectedProjects: [ALL_ACCESS_PROJECTS]});
+    wrapper.update();
+
+    await wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
+    const items = wrapper.find('MultipleEnvironmentSelector GlobalSelectionHeaderRow');
+
+    expect(items.length).toEqual(4);
+    expect(items.at(0).text()).toBe('production');
+    expect(items.at(1).text()).toBe('staging');
+    expect(items.at(2).text()).toBe('dev');
+    expect(items.at(3).text()).toBe('no-env');
+  });
+
   it('shows the distinct union of environments across all projects', async function() {
     wrapper.setProps({selectedProjects: [1, 2]});
     await wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
diff --git a/tests/js/spec/views/events/events.spec.jsx b/tests/js/spec/views/events/events.spec.jsx
index ef4856272d..e7bfa52e07 100644
--- a/tests/js/spec/views/events/events.spec.jsx
+++ b/tests/js/spec/views/events/events.spec.jsx
@@ -389,8 +389,8 @@ describe('EventsContainer', function() {
     wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
 
     wrapper
-      .find('MultipleProjectSelector AutoCompleteItem')
-      .at(0)
+      .find('MultipleProjectSelector AutoCompleteItem ProjectSelectorItem')
+      .first()
       .simulate('click');
 
     await tick();
diff --git a/tests/js/spec/views/events/index.spec.jsx b/tests/js/spec/views/events/index.spec.jsx
index 19434df284..8d3f540c99 100644
--- a/tests/js/spec/views/events/index.spec.jsx
+++ b/tests/js/spec/views/events/index.spec.jsx
@@ -151,8 +151,8 @@ describe('EventsContainer', function() {
       wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
 
       wrapper
-        .find('MultipleProjectSelector AutoCompleteItem')
-        .at(0)
+        .find('MultipleProjectSelector AutoCompleteItem ProjectSelectorItem')
+        .first()
         .simulate('click');
 
       await tick();
