commit a18ee6c293cbf094917905fb8233c9f0a34a6e22
Author: Ted Kaemming <ted@kaemming.com>
Date:   Thu Oct 8 11:18:53 2015 -0700

    Add simple test case for distinct counts.

diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index 8500d21660..2858f12269 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -176,7 +176,7 @@ class RedisTSDB(BaseTSDB):
         return dict(results_by_key)
 
     def record(self, model, key, values, timestamp=None):
-        self.record_multi((model, key, values), timestamp)
+        self.record_multi(((model, key, values),), timestamp)
 
     def record_multi(self, items, timestamp=None):
         """
diff --git a/tests/sentry/tsdb/test_redis.py b/tests/sentry/tsdb/test_redis.py
index 6014cbf206..91b88a64a3 100644
--- a/tests/sentry/tsdb/test_redis.py
+++ b/tests/sentry/tsdb/test_redis.py
@@ -81,3 +81,71 @@ class RedisTSDBTest(TestCase):
             1: 9,
             2: 4,
         }
+
+    def test_count_distinct(self):
+        now = datetime.utcnow().replace(tzinfo=pytz.UTC)
+        dts = [now + timedelta(hours=i) for i in xrange(4)]
+
+        model = TSDBModel.users_affected_by_event
+
+        def timestamp(d):
+            t = int(d.strftime('%s'))
+            return t - (t % 3600)
+
+        self.db.record(
+            model,
+            1,
+            ('foo', 'bar'),
+            dts[0],
+        )
+
+        self.db.record(
+            model,
+            1,
+            ('baz',),
+            dts[1],
+        )
+
+        self.db.record_multi((
+            (
+                model,
+                1,
+                ('foo', 'bar', 'baz'),
+            ),
+            (
+                model,
+                2,
+                ('bar',),
+            ),
+        ), dts[2])
+
+        self.db.record(
+            model,
+            2,
+            ('foo',),
+            dts[3],
+        )
+
+        assert self.db.get_distinct_counts_series(model, [1], dts[0], dts[-1]) == {
+            1: [
+                (timestamp(dts[0]), 2),
+                (timestamp(dts[1]), 1),
+                (timestamp(dts[2]), 3),
+                (timestamp(dts[3]), 0),
+            ],
+        }
+
+        assert self.db.get_distinct_counts_series(model, [2], dts[0], dts[-1]) == {
+            2: [
+                (timestamp(dts[0]), 0),
+                (timestamp(dts[1]), 0),
+                (timestamp(dts[2]), 1),
+                (timestamp(dts[3]), 1),
+            ],
+        }
+
+        results = self.db.get_distinct_counts_totals(model, [1, 2], dts[0], dts[-1])
+        assert results == {
+            1: 3,
+            2: 2,
+        }
