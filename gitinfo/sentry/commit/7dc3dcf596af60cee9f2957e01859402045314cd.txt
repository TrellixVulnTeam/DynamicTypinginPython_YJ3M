commit 7dc3dcf596af60cee9f2957e01859402045314cd
Author: Billy Vong <billyvg@gmail.com>
Date:   Wed Jun 28 17:10:45 2017 -0700

    Enable realtime stream when project has no events

diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 90fe44a8eb..e1bea71ac7 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -52,6 +52,12 @@ const Stream = React.createClass({
 
   getInitialState() {
     let searchId = this.props.params.searchId || null;
+    let project = this.getProject();
+    let realtimeActiveCookie = Cookies.get('realtimeActive');
+    let realtimeActive = typeof realtimeActiveCookie === 'undefined'
+      ? project && !project.firstEvent
+      : realtimeActiveCookie === 'true';
+
     return {
       groupIds: [],
       isDefaultSearch: null,
@@ -64,7 +70,7 @@ const Stream = React.createClass({
       multiSelected: false,
       anySelected: false,
       statsPeriod: this.props.defaultStatsPeriod,
-      realtimeActive: Cookies.get('realtimeActive') === 'true',
+      realtimeActive,
       pageLinks: '',
       dataLoading: true,
       error: false,
@@ -571,10 +577,8 @@ const Stream = React.createClass({
       );
       showButton = true;
     } else {
-      /* we should not go here but what do we know */
-      return null;
+      /* we should not go here but what do we know */ return null;
     }
-
     return (
       <div className={classNames(className)}>
         {showButton &&
@@ -590,7 +594,6 @@ const Stream = React.createClass({
       </div>
     );
   },
-
   renderGroupNodes(ids, statsPeriod) {
     let {orgId, projectId} = this.props.params;
     let groupNodes = ids.map(id => {
@@ -604,15 +607,12 @@ const Stream = React.createClass({
         />
       );
     });
-
     return <ul className="group-list" ref="groupList">{groupNodes}</ul>;
   },
-
   renderAwaitingEvents() {
     let org = this.getOrganization();
     let project = this.getProject();
     let sampleLink = null;
-
     if (this.state.groupIds.length > 0) {
       let sampleIssueId = this.state.groupIds[0];
       sampleLink = (
@@ -623,7 +623,6 @@ const Stream = React.createClass({
         </p>
       );
     }
-
     return (
       <div className="box awaiting-events">
         <div className="wrap">
@@ -632,7 +631,9 @@ const Stream = React.createClass({
           <p>
             {tct(
               'Our error robot is waiting to [cross:devour] receive your first event.',
-              {cross: <span className="strikethrough" />}
+              {
+                cross: <span className="strikethrough" />
+              }
             )}
           </p>
           <p>
@@ -647,7 +648,6 @@ const Stream = React.createClass({
       </div>
     );
   },
-
   renderEmpty() {
     return (
       <div className="box empty-stream">
@@ -656,7 +656,6 @@ const Stream = React.createClass({
       </div>
     );
   },
-
   renderLoading() {
     return (
       <div className="box">
@@ -664,10 +663,8 @@ const Stream = React.createClass({
       </div>
     );
   },
-
   renderStreamBody() {
     let body;
-
     let project = this.getProject();
     if (this.state.dataLoading) {
       body = this.renderLoading();
@@ -680,26 +677,20 @@ const Stream = React.createClass({
     } else {
       body = this.renderEmpty();
     }
-
     return body;
   },
-
   render() {
     // global loading
     if (this.state.loading) {
       return this.renderLoading();
     }
-
     let params = this.props.params;
-
     let classes = ['stream-row'];
     if (this.state.isSidebarVisible) classes.push('show-sidebar');
-
     let {orgId, projectId} = this.props.params;
     let searchId = this.state.searchId;
     let access = this.getAccess();
     let projectFeatures = this.getProjectFeatures();
-
     return (
       <StickyContainer>
         <div className={classNames(classes)}>
@@ -756,5 +747,4 @@ const Stream = React.createClass({
     );
   }
 });
-
 export default Stream;
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index 35f59f0d6c..8b8c45351b 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -1,6 +1,7 @@
 import React from 'react';
 import Reflux from 'reflux';
 import ApiMixin from '../../mixins/apiMixin';
+import TooltipMixin from '../../mixins/tooltip';
 import ActionLink from './actionLink';
 import DropdownLink from '../../components/dropdownLink';
 import Duration from '../../components/duration';
@@ -60,13 +61,13 @@ const IgnoreActions = React.createClass({
     let extraDescription = null;
     if (this.state.allInQuerySelected) {
       extraDescription = this.props.query
-        ? (<div>
+        ? <div>
             <p>{t('This will apply to the current search query:')}</p>
             <pre>{this.props.query}</pre>
-          </div>)
-        : (<p className="error">
+          </div>
+        : <p className="error">
             <strong>{t('This will apply to ALL issues in this project!')}</strong>
-          </p>);
+          </p>;
     }
     let linkClassName = 'group-ignore btn btn-default btn-sm';
     let actionLinkProps = {
@@ -381,6 +382,16 @@ const StreamActions = React.createClass({
 
   mixins: [
     ApiMixin,
+    TooltipMixin({
+      selector: '.tip',
+      placement: 'bottom',
+      container: 'body',
+      constraints: [
+        {
+          attachment: 'together'
+        }
+      ]
+    }),
     Reflux.listenTo(SelectedGroupStore, 'onSelectedGroupChange'),
     PureRenderMixin
   ],
@@ -400,6 +411,14 @@ const StreamActions = React.createClass({
     };
   },
 
+  componentWillReceiveProps({realtimeActive}) {
+    // Need to re-attach tooltips
+    if (this.props.realtimeActive !== realtimeActive) {
+      this.removeTooltips();
+      this.attachTooltips();
+    }
+  },
+
   selectAll() {
     this.setState({
       allInQuerySelected: true
@@ -514,13 +533,13 @@ const StreamActions = React.createClass({
     let extraDescription = null;
     if (this.state.allInQuerySelected) {
       extraDescription = this.props.query
-        ? (<div>
+        ? <div>
             <p>{t('This will apply to the current search query:')}</p>
             <pre>{this.props.query}</pre>
-          </div>)
-        : (<p className="error">
+          </div>
+        : <p className="error">
             <strong>{t('This will apply to ALL issues in this project!')}</strong>
-          </p>);
+          </p>;
     }
 
     return (
@@ -719,7 +738,8 @@ const StreamActions = React.createClass({
 
             <div className="btn-group">
               <a
-                className="btn btn-default btn-sm hidden-xs realtime-control"
+                className="btn btn-default btn-sm hidden-xs realtime-control tip"
+                title={`${this.props.realtimeActive ? 'Pause' : 'Enable'} real-time updates`}
                 onClick={this.onRealtimeChange}>
                 {this.props.realtimeActive
                   ? <span className="icon icon-pause" />
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index 60ed56fdd9..16e86fca85 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -196,6 +196,64 @@ describe('Stream', function() {
 
       this.context.project.firstEvent = true; // Reset for other tests
     });
+
+    it('does not have real time event updates when events exist', function() {
+      let wrapper = shallow(<Stream {...this.wrapper.instance().props} />, {
+        context: {
+          ...this.context,
+          project: {
+            ...this.context.project,
+            firstEvent: true
+          }
+        }
+      });
+
+      expect(wrapper.state('realtimeActive')).toBe(false);
+    });
+
+    it('does not have real time event updates enabled when cookie is present (even if there are no events)', function() {
+      Cookies.set('realtimeActive', 'false');
+      let wrapper = shallow(<Stream {...this.wrapper.instance().props} />, {
+        context: {
+          ...this.context,
+          project: {
+            ...this.context.project,
+            firstEvent: false
+          }
+        }
+      });
+
+      wrapper.setState({
+        error: false,
+        groupIds: [],
+        loading: false,
+        dataLoading: false
+      });
+
+      Cookies.remove('realtimeActive');
+      expect(wrapper.state('realtimeActive')).toBe(false);
+    });
+
+    it('has real time event updates enabled when there are no events', function() {
+      let wrapper = shallow(<Stream {...this.wrapper.instance().props} />, {
+        context: {
+          ...this.context,
+          project: {
+            ...this.context.project,
+            firstEvent: false
+          }
+        }
+      });
+
+      wrapper.setState({
+        error: false,
+        groupIds: [],
+        loading: false,
+        dataLoading: false
+      });
+
+      expect(wrapper.state('realtimeActive')).toBe(true);
+    });
   });
 
   describe('componentWillMount()', function() {
