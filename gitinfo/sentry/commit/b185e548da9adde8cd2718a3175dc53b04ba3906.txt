commit b185e548da9adde8cd2718a3175dc53b04ba3906
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Mon May 4 16:16:24 2020 -0400

    feat(apm): Display orphan/stray spans (#17902)

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
index 235d1b0d5c..f63202a1a6 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
@@ -18,8 +18,11 @@ import {
   getHumanDuration,
   getSpanID,
   getSpanOperation,
+  isOrphanSpan,
+  unwrapTreeDepth,
+  isOrphanTreeDepth,
 } from './utils';
-import {ParsedTraceType, ProcessedSpanType} from './types';
+import {ParsedTraceType, ProcessedSpanType, TreeDepthType} from './types';
 import {
   MINIMAP_CONTAINER_HEIGHT,
   MINIMAP_SPAN_BAR_HEIGHT,
@@ -174,7 +177,7 @@ type SpanBarProps = {
   spanBarHatch?: boolean;
   generateBounds: (bounds: SpanBoundsType) => SpanGeneratedBoundsType;
   treeDepth: number;
-  continuingTreeDepths: Array<number>;
+  continuingTreeDepths: Array<TreeDepthType>;
   showSpanTree: boolean;
   numOfSpanChildren: number;
   spanNumber: number;
@@ -309,7 +312,13 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
   };
 
   renderSpanTreeConnector = ({hasToggler}: {hasToggler: boolean}) => {
-    const {isLast, isRoot, treeDepth, continuingTreeDepths, span} = this.props;
+    const {
+      isLast,
+      isRoot,
+      treeDepth: spanTreeDepth,
+      continuingTreeDepths,
+      span,
+    } = this.props;
 
     const spanID = getSpanID(span);
 
@@ -319,6 +328,7 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
           <ConnectorBar
             style={{right: '16px', height: '10px', bottom: '-5px', top: 'auto'}}
             key={`${spanID}-last`}
+            orphanBranch={false}
           />
         );
       }
@@ -326,22 +336,49 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
       return null;
     }
 
-    const connectorBars: Array<React.ReactNode> = continuingTreeDepths.map(depth => {
-      const left = ((treeDepth - depth) * (TOGGLE_BORDER_BOX / 2) + 1) * -1;
-      return <ConnectorBar style={{left}} key={`${spanID}-${depth}`} />;
+    const connectorBars: Array<React.ReactNode> = continuingTreeDepths.map(treeDepth => {
+      const depth: number = unwrapTreeDepth(treeDepth);
+
+      if (depth === 0) {
+        // do not render a connector bar at depth 0,
+        // if we did render a connector bar, this bar would be placed at depth -1
+        // which does not exist.
+        return null;
+      }
+      const left = ((spanTreeDepth - depth) * (TOGGLE_BORDER_BOX / 2) + 1) * -1;
+
+      return (
+        <ConnectorBar
+          style={{left}}
+          key={`${spanID}-${depth}`}
+          orphanBranch={isOrphanTreeDepth(treeDepth)}
+        />
+      );
     });
 
     if (hasToggler) {
+      // if there is a toggle button, we add a connector bar to create an attachment
+      // between the toggle button and any connector bars below the toggle button
       connectorBars.push(
         <ConnectorBar
-          style={{right: '16px', height: '10px', bottom: '0', top: 'auto'}}
+          style={{
+            right: '16px',
+            height: '10px',
+            bottom: isLast ? `-${SPAN_ROW_HEIGHT / 2}px` : '0',
+            top: 'auto',
+          }}
           key={`${spanID}-last`}
+          orphanBranch={false}
         />
       );
     }
 
     return (
-      <SpanTreeConnector isLast={isLast} hasToggler={hasToggler}>
+      <SpanTreeConnector
+        isLast={isLast}
+        hasToggler={hasToggler}
+        orphanBranch={isOrphanSpan(span)}
+      >
         {connectorBars}
       </SpanTreeConnector>
     );
@@ -868,26 +905,28 @@ type TogglerTypes = OmitHtmlDivProps<{
 
 const SpanTreeTogglerContainer = styled('div')<TogglerTypes>`
   position: relative;
-  height: 16px;
+  height: ${SPAN_ROW_HEIGHT}px;
   width: ${p => (p.hasToggler ? '40px' : '12px')};
   min-width: ${p => (p.hasToggler ? '40px' : '12px')};
   margin-right: ${p => (p.hasToggler ? space(0.5) : space(1))};
   z-index: ${zIndex.spanTreeToggler};
   display: flex;
   justify-content: flex-end;
+  align-items: center;
 `;
 
-const SpanTreeConnector = styled('div')<TogglerTypes>`
-  height: ${p => (p.isLast ? '80%' : '160%')};
+const SpanTreeConnector = styled('div')<TogglerTypes & {orphanBranch: boolean}>`
+  height: ${p => (p.isLast ? SPAN_ROW_HEIGHT / 2 : SPAN_ROW_HEIGHT)}px;
   width: 100%;
-  border-left: 1px solid ${p => p.theme.gray1};
+  border-left: 1px ${p => (p.orphanBranch ? 'dashed' : 'solid')} ${p => p.theme.gray1};
   position: absolute;
-  top: -5px;
+  top: 0;
 
   &:before {
     content: '';
     height: 1px;
-    background-color: ${p => p.theme.gray1};
+    border-bottom: 1px ${p => (p.orphanBranch ? 'dashed' : 'solid')} ${p => p.theme.gray1};
+
     width: 100%;
     position: absolute;
     bottom: ${p => (p.isLast ? '0' : '50%')};
@@ -901,13 +940,14 @@ const SpanTreeConnector = styled('div')<TogglerTypes>`
     width: 3px;
     position: absolute;
     right: 0;
-    top: 11px;
+    top: ${SPAN_ROW_HEIGHT / 2 - 2}px;
   }
 `;
 
-const ConnectorBar = styled('div')`
+const ConnectorBar = styled('div')<{orphanBranch: boolean}>`
   height: 250%;
-  border-left: 1px solid ${p => p.theme.gray1};
+
+  border-left: 1px ${p => (p.orphanBranch ? 'dashed' : 'solid')} ${p => p.theme.gray1};
   top: -5px;
   position: absolute;
 `;
@@ -945,6 +985,7 @@ type SpanTreeTogglerAndDivProps = OmitHtmlDivProps<{
 }>;
 
 const SpanTreeToggler = styled('div')<SpanTreeTogglerAndDivProps>`
+  height: 16px;
   white-space: nowrap;
   min-width: 30px;
   display: flex;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
index 7761e8d05a..f847be5d24 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
@@ -21,7 +21,7 @@ import {TableDataRow} from 'app/views/eventsV2/table/types';
 import Link from 'app/components/links/link';
 
 import {ProcessedSpanType, RawSpanType, ParsedTraceType} from './types';
-import {isGapSpan, getTraceDateTimeRange} from './utils';
+import {isGapSpan, isOrphanSpan, getTraceDateTimeRange} from './utils';
 
 type TransactionResult = {
   'project.name': string;
@@ -209,6 +209,32 @@ class SpanDetail extends React.Component<Props, State> {
     );
   }
 
+  renderOrphanSpanMessage() {
+    const {span} = this.props;
+
+    if (!isOrphanSpan(span)) {
+      return null;
+    }
+
+    return (
+      <AlertMessage
+        alert={{
+          id: `orphan-span-${span.span_id}`,
+          message: (
+            <span>
+              {t(
+                'This is a span that has no parent span within this transaction. It has been attached to the transaction root span by default.'
+              )}
+            </span>
+          ),
+          type: 'info',
+        }}
+        system
+        hideCloseButton
+      />
+    );
+  }
+
   renderSpanErrorMessage() {
     const {orgId, spanErrors, totalNumberOfErrors, span, trace, eventView} = this.props;
 
@@ -310,6 +336,7 @@ class SpanDetail extends React.Component<Props, State> {
           event.stopPropagation();
         }}
       >
+        {this.renderOrphanSpanMessage()}
         {this.renderSpanErrorMessage()}
         <SpanDetails>
           <table className="table key-value">
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
index 767146b468..6d032c3d39 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
@@ -4,7 +4,7 @@ import EventView from 'app/utils/discover/eventView';
 import {TableData, TableDataRow} from 'app/views/eventsV2/table/types';
 
 import {SpanBoundsType, SpanGeneratedBoundsType, isGapSpan, getSpanID} from './utils';
-import {ProcessedSpanType, ParsedTraceType} from './types';
+import {ProcessedSpanType, ParsedTraceType, TreeDepthType} from './types';
 import SpanBar from './spanBar';
 
 type PropType = {
@@ -14,7 +14,7 @@ type PropType = {
   trace: Readonly<ParsedTraceType>;
   generateBounds: (bounds: SpanBoundsType) => SpanGeneratedBoundsType;
   treeDepth: number;
-  continuingTreeDepths: Array<number>;
+  continuingTreeDepths: Array<TreeDepthType>;
   numOfSpanChildren: number;
   renderedSpanChildren: Array<JSX.Element>;
   spanBarColour?: string;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
index e2f9465ed7..dc76b6eda5 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
@@ -12,6 +12,8 @@ import {
   SpanChildrenLookupType,
   ParsedTraceType,
   GapSpanType,
+  TreeDepthType,
+  OrphanTreeDepth,
 } from './types';
 import {
   boundsGenerator,
@@ -23,6 +25,7 @@ import {
   getSpanOperation,
   getSpanTraceID,
   isGapSpan,
+  isOrphanSpan,
 } from './utils';
 import {DragManagerChildrenProps} from './dragManager';
 import SpanGroup from './spanGroup';
@@ -128,7 +131,7 @@ class SpanTree extends React.Component<PropType> {
   }: {
     spanNumber: number;
     treeDepth: number;
-    continuingTreeDepths: Array<number>;
+    continuingTreeDepths: Array<TreeDepthType>;
     isLast: boolean;
     isRoot?: boolean;
     numOfSpansOutOfViewAbove: number;
@@ -176,7 +179,13 @@ class SpanTree extends React.Component<PropType> {
       previousSiblingEndTimestamp: undefined | number;
     };
 
-    const treeArr = isLast ? continuingTreeDepths : [...continuingTreeDepths, treeDepth];
+    const treeDepthEntry = isOrphanSpan(span)
+      ? ({type: 'orphan', depth: treeDepth} as OrphanTreeDepth)
+      : treeDepth;
+
+    const treeArr = isLast
+      ? continuingTreeDepths
+      : [...continuingTreeDepths, treeDepthEntry];
 
     const reduced: AccType = spanChildren.reduce(
       (acc: AccType, spanChild, index) => {
@@ -233,6 +242,7 @@ class SpanTree extends React.Component<PropType> {
       start_timestamp: previousSiblingEndTimestamp || span.start_timestamp,
       timestamp: span.start_timestamp, // this is essentially end_timestamp
       description: t('Missing instrumentation'),
+      isOrphan: isOrphanSpan(span),
     };
 
     const spanGapComponent =
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/types.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/types.tsx
index 822369b877..a36a5d3ca3 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/types.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/types.tsx
@@ -3,6 +3,7 @@ export type GapSpanType = {
   start_timestamp: number;
   timestamp: number; // this is essentially end_timestamp
   description?: string;
+  isOrphan: boolean;
 };
 
 export type RawSpanType = {
@@ -18,14 +19,23 @@ export type RawSpanType = {
   tags?: {[key: string]: string};
 };
 
-export type ProcessedSpanType = RawSpanType | GapSpanType;
+export type OrphanSpanType = {
+  type: 'orphan';
+} & RawSpanType;
+
+export type SpanType = RawSpanType | OrphanSpanType;
+
+// this type includes natural spans which are part of the transaction event payload,
+// and as well as pseudo-spans (e.g. gap spans)
+export type ProcessedSpanType = SpanType | GapSpanType;
 
 export type SpanEntry = {
   type: 'spans';
   data: Array<RawSpanType>;
 };
 
-export type SpanChildrenLookupType = {[span_id: string]: Array<RawSpanType>};
+// map span_id to children whose parent_span_id is equal to span_id
+export type SpanChildrenLookupType = {[span_id: string]: Array<SpanType>};
 
 export type ParsedTraceType = {
   op: string;
@@ -36,7 +46,7 @@ export type ParsedTraceType = {
   traceStartTimestamp: number;
   traceEndTimestamp: number;
   numOfSpans: number;
-  spans: RawSpanType[];
+  spans: SpanType[];
 };
 
 export enum TickAlignment {
@@ -52,3 +62,12 @@ export type TraceContextType = {
   trace_id?: string;
   parent_span_id?: string;
 };
+
+type SpanTreeDepth = number;
+
+export type OrphanTreeDepth = {
+  type: 'orphan';
+  depth: number;
+};
+
+export type TreeDepthType = SpanTreeDepth | OrphanTreeDepth;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
index 78ce610aa0..09c49836aa 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
@@ -4,6 +4,7 @@ import set from 'lodash/set';
 import isNumber from 'lodash/isNumber';
 
 import {SentryTransactionEvent} from 'app/types';
+import {assert} from 'app/types/utils';
 import CHART_PALETTE from 'app/constants/chartPalette';
 
 import {
@@ -11,8 +12,12 @@ import {
   ProcessedSpanType,
   GapSpanType,
   RawSpanType,
+  OrphanSpanType,
+  SpanType,
   SpanEntry,
   TraceContextType,
+  TreeDepthType,
+  OrphanTreeDepth,
 } from './types';
 
 type Rect = {
@@ -346,8 +351,25 @@ export function getTraceDateTimeRange(input: {
 }
 
 export function isGapSpan(span: ProcessedSpanType): span is GapSpanType {
-  // @ts-ignore
-  return span.type === 'gap';
+  if ('type' in span) {
+    return span.type === 'gap';
+  }
+
+  return false;
+}
+
+export function isOrphanSpan(span: ProcessedSpanType): span is OrphanSpanType {
+  if ('type' in span) {
+    if (span.type === 'orphan') {
+      return true;
+    }
+
+    if (span.type === 'gap') {
+      return span.isOrphan;
+    }
+  }
+
+  return false;
 }
 
 export function getSpanID(span: ProcessedSpanType, defaultSpanID: string = ''): string {
@@ -415,6 +437,16 @@ export function parseTrace(event: Readonly<SentryTransactionEvent>): ParsedTrace
     };
   }
 
+  // any span may be a parent of another span
+  const potentialParents = new Set(
+    spans.map(span => {
+      return span.span_id;
+    })
+  );
+
+  // the root transaction span is a parent of all other spans
+  potentialParents.add(rootSpanID);
+
   // we reduce spans to become an object mapping span ids to their children
 
   const init: ParsedTraceType = {
@@ -429,16 +461,36 @@ export function parseTrace(event: Readonly<SentryTransactionEvent>): ParsedTrace
     spans,
   };
 
-  const reduced: ParsedTraceType = spans.reduce((acc, span) => {
-    if (!isValidSpanID(getSpanParentSpanID(span))) {
-      return acc;
+  const reduced: ParsedTraceType = spans.reduce((acc, inputSpan) => {
+    let span: SpanType = inputSpan;
+
+    const parentSpanId = getSpanParentSpanID(span);
+
+    const hasParent = parentSpanId && potentialParents.has(parentSpanId);
+
+    if (!isValidSpanID(parentSpanId) || !hasParent) {
+      // this span is considered an orphan with respect to the spans within this transaction.
+      // although the span is an orphan, it's still a descendant of this transaction,
+      // so we set its parent span id to be the root transaction span's id
+      span.parent_span_id = rootSpanID;
+
+      span = {
+        type: 'orphan',
+        ...span,
+      } as OrphanSpanType;
     }
 
-    const spanChildren: Array<RawSpanType> = acc.childSpans?.[span.parent_span_id!] ?? [];
+    assert(span.parent_span_id);
+
+    // get any span children whose parent_span_id is equal to span.parent_span_id,
+    // otherwise start with an empty array
+    const spanChildren: Array<SpanType> = acc.childSpans?.[span.parent_span_id] ?? [];
 
     spanChildren.push(span);
 
-    set(acc.childSpans, span.parent_span_id!, spanChildren);
+    set(acc.childSpans, span.parent_span_id, spanChildren);
+
+    // set trace start & end timestamps based on given span's start and end timestamps
 
     if (!acc.traceStartTimestamp || span.start_timestamp < acc.traceStartTimestamp) {
       acc.traceStartTimestamp = span.start_timestamp;
@@ -470,21 +522,56 @@ export function parseTrace(event: Readonly<SentryTransactionEvent>): ParsedTrace
     return acc;
   }, init);
 
-  // sort span children by their start timestamps in ascending order
+  // sort span children
 
   Object.values(reduced.childSpans).forEach(spanChildren => {
-    spanChildren.sort((firstSpan, secondSpan) => {
-      if (firstSpan.start_timestamp < secondSpan.start_timestamp) {
-        return -1;
-      }
-
-      if (firstSpan.start_timestamp === secondSpan.start_timestamp) {
-        return 0;
-      }
-
-      return 1;
-    });
+    spanChildren.sort(sortSpans);
   });
 
   return reduced;
 }
+
+function sortSpans(firstSpan: SpanType, secondSpan: SpanType) {
+  // orphan spans come after non-ophan spans.
+
+  if (isOrphanSpan(firstSpan) && !isOrphanSpan(secondSpan)) {
+    // sort secondSpan before firstSpan
+    return 1;
+  }
+
+  if (!isOrphanSpan(firstSpan) && isOrphanSpan(secondSpan)) {
+    // sort firstSpan before secondSpan
+    return -1;
+  }
+
+  // sort spans by their start timestamp in ascending order
+
+  if (firstSpan.start_timestamp < secondSpan.start_timestamp) {
+    // sort firstSpan before secondSpan
+    return -1;
+  }
+
+  if (firstSpan.start_timestamp === secondSpan.start_timestamp) {
+    return 0;
+  }
+
+  // sort secondSpan before firstSpan
+  return 1;
+}
+
+export function isOrphanTreeDepth(
+  treeDepth: TreeDepthType
+): treeDepth is OrphanTreeDepth {
+  if (typeof treeDepth === 'number') {
+    return false;
+  }
+  return treeDepth?.type === 'orphan';
+}
+
+export function unwrapTreeDepth(treeDepth: TreeDepthType): number {
+  if (isOrphanTreeDepth(treeDepth)) {
+    return treeDepth.depth;
+  }
+
+  return treeDepth;
+}
