commit 492f8c4ea3f9935cb4be79f3ad14fb428228cbea
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Mar 24 10:36:00 2020 -0700

    chore(ts): Convert utils/{withP,p}rofiler (#17855)

diff --git a/src/sentry/static/sentry/app/components/asyncComponent.tsx b/src/sentry/static/sentry/app/components/asyncComponent.tsx
index 9b2ce03dbb..7b89c39dec 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.tsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.tsx
@@ -15,9 +15,12 @@ import RouteError from 'app/views/routeError';
 import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
 
 type AsyncComponentProps = {
-  // optional sentry APM profiling
-  // Note we don't decorate `AsyncComponent` but rather the subclass
-  // so we can get its component name
+  /**
+   * Optional sentry APM profiling.
+   *
+   * NOTE: we don't decorate `AsyncComponent` but rather the subclass so we can
+   *       get its component name
+   */
   finishProfile?: () => void;
 } & Partial<RouteComponentProps<{}, {}>>;
 
diff --git a/src/sentry/static/sentry/app/components/loadingIndicator.tsx b/src/sentry/static/sentry/app/components/loadingIndicator.tsx
index 23c33a29a1..1b5cb536cf 100644
--- a/src/sentry/static/sentry/app/components/loadingIndicator.tsx
+++ b/src/sentry/static/sentry/app/components/loadingIndicator.tsx
@@ -2,7 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import classNames from 'classnames';
 
-import profiler from 'app/utils/profiler';
+import withProfiler from 'app/utils/withProfiler';
 
 type Props = {
   overlay?: boolean;
@@ -17,6 +17,7 @@ type Props = {
   className?: string;
   style?: React.CSSProperties;
   children?: React.ReactChildren;
+  finishProfile: () => void;
 };
 
 function LoadingIndicator(props: Props) {
@@ -81,4 +82,4 @@ LoadingIndicator.propTypes = {
   hideSpinner: PropTypes.bool,
 };
 
-export default profiler()(LoadingIndicator);
+export default withProfiler(LoadingIndicator);
diff --git a/src/sentry/static/sentry/app/utils/profiler.jsx b/src/sentry/static/sentry/app/utils/profiler.jsx
deleted file mode 100644
index 0a0e0e1d8c..0000000000
--- a/src/sentry/static/sentry/app/utils/profiler.jsx
+++ /dev/null
@@ -1,50 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import {Integrations} from '@sentry/apm';
-
-import getDisplayName from 'app/utils/getDisplayName';
-
-export default function profiler() {
-  return WrappedComponent => {
-    const componentDisplayName = getDisplayName(WrappedComponent);
-
-    return class extends React.Component {
-      static displayName = `profiler(${componentDisplayName})`;
-
-      static propTypes = {
-        api: PropTypes.object,
-      };
-
-      componentWillUnmount() {
-        this.finishProfile();
-      }
-
-      activity = Integrations.Tracing.pushActivity(
-        componentDisplayName,
-        {
-          data: {},
-          op: 'react',
-          description: `<${componentDisplayName}>`,
-        },
-        {
-          autoPopAfter: 2000, // After this timeout we'll pop this activity regardless
-        }
-      );
-      // For whatever reason it's not guaranteed that `finishProfile` will be called, that's why we need
-      // the previously described timeout to make sure our transaction will be finished.
-
-      finishProfile = () => {
-        if (!this.activity) {
-          return;
-        }
-
-        Integrations.Tracing.popActivity(this.activity);
-        this.activity = null;
-      };
-
-      render() {
-        return <WrappedComponent {...this.props} finishProfile={this.finishProfile} />;
-      }
-    };
-  };
-}
diff --git a/src/sentry/static/sentry/app/utils/withProfiler.tsx b/src/sentry/static/sentry/app/utils/withProfiler.tsx
new file mode 100644
index 0000000000..aa7693a513
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/withProfiler.tsx
@@ -0,0 +1,53 @@
+import React from 'react';
+import {Integrations} from '@sentry/apm';
+
+import getDisplayName from 'app/utils/getDisplayName';
+
+type InjectedProps = {
+  finishProfile: () => void;
+};
+
+export default function withProfiler<P extends InjectedProps>(
+  WrappedComponent: React.ComponentType<P>
+) {
+  const componentDisplayName = getDisplayName(WrappedComponent);
+
+  return class extends React.Component<Omit<P, keyof InjectedProps>> {
+    static displayName = `profiler(${componentDisplayName})`;
+
+    componentWillUnmount() {
+      this.finishProfile();
+    }
+
+    activity: number | null = Integrations.Tracing.pushActivity(
+      componentDisplayName,
+      {
+        data: {},
+        op: 'react',
+        description: `<${componentDisplayName}>`,
+      },
+      {
+        autoPopAfter: 2000, // After this timeout we'll pop this activity regardless
+      }
+    );
+
+    // For whatever reason it's not guaranteed that `finishProfile` will be
+    // called, that's why we need the previously described timeout to make
+    // sure our transaction will be finished.
+
+    finishProfile = () => {
+      if (!this.activity) {
+        return;
+      }
+
+      Integrations.Tracing.popActivity(this.activity);
+      this.activity = null;
+    };
+
+    render() {
+      return (
+        <WrappedComponent {...(this.props as P)} finishProfile={this.finishProfile} />
+      );
+    }
+  };
+}
diff --git a/src/sentry/static/sentry/app/views/issueList/overview.jsx b/src/sentry/static/sentry/app/views/issueList/overview.jsx
index 60ef3964cd..f4b43d2f2b 100644
--- a/src/sentry/static/sentry/app/views/issueList/overview.jsx
+++ b/src/sentry/static/sentry/app/views/issueList/overview.jsx
@@ -36,7 +36,7 @@ import StreamManager from 'app/utils/streamManager';
 import TagStore from 'app/stores/tagStore';
 import parseApiError from 'app/utils/parseApiError';
 import parseLinkHeader from 'app/utils/parseLinkHeader';
-import profiler from 'app/utils/profiler';
+import withProfiler from 'app/utils/withProfiler';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 import withOrganization from 'app/utils/withOrganization';
 import withSavedSearches from 'app/utils/withSavedSearches';
@@ -666,6 +666,6 @@ const IssueListOverview = createReactClass({
 });
 
 export default withSavedSearches(
-  withGlobalSelection(withOrganization(profiler()(IssueListOverview)))
+  withGlobalSelection(withOrganization(withProfiler(IssueListOverview)))
 );
 export {IssueListOverview};
diff --git a/src/sentry/static/sentry/app/views/organizationContext.jsx b/src/sentry/static/sentry/app/views/organizationContext.jsx
index abdc567d36..6f4e110a91 100644
--- a/src/sentry/static/sentry/app/views/organizationContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationContext.jsx
@@ -22,7 +22,7 @@ import ProjectActions from 'app/actions/projectActions';
 import SentryTypes from 'app/sentryTypes';
 import Sidebar from 'app/components/sidebar';
 import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
-import profiler from 'app/utils/profiler';
+import withProfiler from 'app/utils/withProfiler';
 import space from 'app/styles/space';
 import withApi from 'app/utils/withApi';
 import withOrganizations from 'app/utils/withOrganizations';
@@ -312,7 +312,7 @@ const OrganizationContext = createReactClass({
   },
 });
 
-export default withApi(withOrganizations(profiler()(OrganizationContext)));
+export default withApi(withOrganizations(withProfiler(OrganizationContext)));
 export {OrganizationContext};
 
 const ErrorWrapper = styled('div')`
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupDetails.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupDetails.jsx
index 9b5b5cf73f..ab12638b93 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupDetails.jsx
@@ -15,7 +15,7 @@ import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import Projects from 'app/utils/projects';
 import SentryTypes from 'app/sentryTypes';
-import profiler from 'app/utils/profiler';
+import withProfiler from 'app/utils/withProfiler';
 import withApi from 'app/utils/withApi';
 
 import {ERROR_TYPES} from './constants';
@@ -306,4 +306,4 @@ const GroupDetails = createReactClass({
 
 export {GroupDetails};
 
-export default withApi(profiler()(GroupDetails));
+export default withApi(withProfiler(GroupDetails));
diff --git a/src/sentry/static/sentry/app/views/projectsDashboard/index.jsx b/src/sentry/static/sentry/app/views/projectsDashboard/index.jsx
index ee059f804a..3eb3a43bf8 100644
--- a/src/sentry/static/sentry/app/views/projectsDashboard/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectsDashboard/index.jsx
@@ -16,7 +16,7 @@ import PageHeading from 'app/components/pageHeading';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import ProjectsStatsStore from 'app/stores/projectsStatsStore';
 import SentryTypes from 'app/sentryTypes';
-import profiler from 'app/utils/profiler';
+import withProfiler from 'app/utils/withProfiler';
 import space from 'app/styles/space';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import withApi from 'app/utils/withApi';
@@ -161,5 +161,5 @@ const OrganizationDashboardWrapper = styled('div')`
 
 export {Dashboard};
 export default withApi(
-  withOrganization(withTeamsForUser(profiler()(OrganizationDashboard)))
+  withOrganization(withTeamsForUser(withProfiler(OrganizationDashboard)))
 );
diff --git a/src/sentry/static/sentry/app/views/releases/detail/index.jsx b/src/sentry/static/sentry/app/views/releases/detail/index.jsx
index b181b94ec7..d2ac655c7b 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/index.jsx
@@ -11,7 +11,7 @@ import GlobalSelectionHeader from 'app/components/organizations/globalSelectionH
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import SentryTypes from 'app/sentryTypes';
-import profiler from 'app/utils/profiler';
+import withProfiler from 'app/utils/withProfiler';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 import withOrganization from 'app/utils/withOrganization';
 import withProjects from 'app/utils/withProjects';
@@ -132,5 +132,5 @@ class OrganizationReleaseDetails extends AsyncView {
 }
 
 export default withProjects(
-  withOrganization(withGlobalSelection(profiler()(ReleaseDetailsContainer)))
+  withOrganization(withGlobalSelection(withProfiler(ReleaseDetailsContainer)))
 );
diff --git a/src/sentry/static/sentry/app/views/releases/list/index.jsx b/src/sentry/static/sentry/app/views/releases/list/index.jsx
index 83688f5c8c..357fc29bc7 100644
--- a/src/sentry/static/sentry/app/views/releases/list/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/index.jsx
@@ -14,7 +14,7 @@ import PageHeading from 'app/components/pageHeading';
 import Pagination from 'app/components/pagination';
 import SearchBar from 'app/components/searchBar';
 import SentryTypes from 'app/sentryTypes';
-import profiler from 'app/utils/profiler';
+import withProfiler from 'app/utils/withProfiler';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 import withOrganization from 'app/utils/withOrganization';
 
@@ -182,4 +182,4 @@ class OrganizationReleases extends AsyncView {
   }
 }
 
-export default withOrganization(withGlobalSelection(profiler()(ReleasesContainer)));
+export default withOrganization(withGlobalSelection(withProfiler(ReleasesContainer)));
diff --git a/src/sentry/static/sentry/app/views/userFeedback/index.tsx b/src/sentry/static/sentry/app/views/userFeedback/index.tsx
index 8b76dac740..b2a14b052d 100644
--- a/src/sentry/static/sentry/app/views/userFeedback/index.tsx
+++ b/src/sentry/static/sentry/app/views/userFeedback/index.tsx
@@ -16,8 +16,7 @@ import LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMess
 import LoadingIndicator from 'app/components/loadingIndicator';
 import PageHeading from 'app/components/pageHeading';
 import Pagination from 'app/components/pagination';
-import SentryTypes from 'app/sentryTypes';
-import profiler from 'app/utils/profiler';
+import withProfiler from 'app/utils/withProfiler';
 import space from 'app/styles/space';
 import withOrganization from 'app/utils/withOrganization';
 
@@ -30,13 +29,10 @@ type State = AsyncView['state'] & {
 
 type Props = RouteComponentProps<{orgId: string}, {}> & {
   organization: Organization;
+  finishProfile: () => void;
 };
 
 class OrganizationUserFeedback extends AsyncView<Props, State> {
-  static propTypes = {
-    organization: SentryTypes.Organization.isRequired,
-  };
-
   getEndpoints(): [string, string, any][] {
     const {
       organization,
@@ -157,7 +153,7 @@ class OrganizationUserFeedback extends AsyncView<Props, State> {
   }
 }
 
-export default withOrganization(profiler()(OrganizationUserFeedback));
+export default withOrganization(withProfiler(OrganizationUserFeedback));
 
 const Header = styled('div')`
   display: flex;
