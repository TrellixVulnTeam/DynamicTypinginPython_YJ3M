commit 846aff465b1c4476de7e754b37bd45966c59b1ac
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Jun 10 11:28:49 2012 -0700

    Large refactor of notifications/settings pages including the addition of an alert_email option for users

diff --git a/sentry/manager.py b/sentry/manager.py
index 82557de12f..fe83e796e5 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -802,6 +802,75 @@ class InstanceMetaManager(BaseManager):
         self._metadata = {}
 
 
+class UserOptionManager(BaseManager):
+    NOTSET = object()
+
+    def __init__(self, *args, **kwargs):
+        super(UserOptionManager, self).__init__(*args, **kwargs)
+        request_finished.connect(self.clear_cache)
+
+    def get_value(self, user, project, key, default=NOTSET):
+        result = self.get_all_values(user, project)
+        if default is self.NOTSET:
+            return result[key]
+        return result.get(key, default)
+
+    def unset_value(self, user, project, key):
+        self.filter(user=user, project=project, key=key).delete()
+        if not hasattr(self, '_metadata'):
+            return
+        if project:
+            metakey = (user.pk, project.pk)
+        else:
+            metakey = (user.pk, None)
+        if metakey not in self._metadata:
+            return
+        self._metadata[metakey].pop(key, None)
+
+    def set_value(self, user, project, key, value):
+        inst, created = self.get_or_create(
+            user=user,
+            project=project,
+            key=key,
+            defaults={
+                'value': value,
+            },
+        )
+        if not created and inst.value != value:
+            inst.update(value=value)
+
+        if not hasattr(self, '_metadata'):
+            return
+        if project:
+            metakey = (user.pk, project.pk)
+        else:
+            metakey = (user.pk, None)
+        if metakey not in self._metadata:
+            return
+        self._metadata[metakey][key] = value
+
+    def get_all_values(self, user, project):
+        if not hasattr(self, '_metadata'):
+            self._metadata = {}
+        if project:
+            metakey = (user.pk, project.pk)
+        else:
+            metakey = (user.pk, None)
+        if metakey not in self._metadata:
+            result = dict(
+                (i.key, i.value) for i in
+                self.filter(
+                    user=user,
+                    project=project,
+                )
+            )
+            self._metadata[metakey] = result
+        return self._metadata[metakey]
+
+    def clear_cache(self, **kwargs):
+        self._metadata = {}
+
+
 class SearchDocumentManager(BaseManager):
     # Words which should not be indexed
     STOP_WORDS = set(['the', 'of', 'to', 'and', 'a', 'in', 'is', 'it', 'you', 'that'])
diff --git a/sentry/migrations/0058_auto__add_useroption__add_unique_useroption_user_project_key.py b/sentry/migrations/0058_auto__add_useroption__add_unique_useroption_user_project_key.py
new file mode 100644
index 0000000000..e4bca64ee9
--- /dev/null
+++ b/sentry/migrations/0058_auto__add_useroption__add_unique_useroption_user_project_key.py
@@ -0,0 +1,257 @@
+# -*- coding: utf-8 -*-
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Adding model 'UserOption'
+        db.create_table('sentry_useroption', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
+            ('project', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.Project'], null=True)),
+            ('key', self.gf('django.db.models.fields.CharField')(max_length=64)),
+            ('value', self.gf('picklefield.fields.PickledObjectField')()),
+        ))
+        db.send_create_signal('sentry', ['UserOption'])
+
+        # Adding unique constraint on 'UserOption', fields ['user', 'project', 'key']
+        db.create_unique('sentry_useroption', ['user_id', 'project_id', 'key'])
+
+
+    def backwards(self, orm):
+        # Removing unique constraint on 'UserOption', fields ['user', 'project', 'key']
+        db.delete_unique('sentry_useroption', ['user_id', 'project_id', 'key'])
+
+        # Deleting model 'UserOption'
+        db.delete_table('sentry_useroption')
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'logger', 'culprit', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'views': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.View']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.pendingteammember': {
+            'Meta': {'unique_together': "(('team', 'email'),)", 'object_name': 'PendingTeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pending_member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'unique': 'True', 'null': 'True'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Team']", 'null': 'True'})
+        },
+        'sentry.projectcountbyminute': {
+            'Meta': {'unique_together': "(('project', 'date'),)", 'object_name': 'ProjectCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.searchdocument': {
+            'Meta': {'unique_together': "(('project', 'group'),)", 'object_name': 'SearchDocument'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_changed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'total_events': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'})
+        },
+        'sentry.searchtoken': {
+            'Meta': {'unique_together': "(('document', 'field', 'token'),)", 'object_name': 'SearchToken'},
+            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'token_set'", 'to': "orm['sentry.SearchDocument']"}),
+            'field': ('django.db.models.fields.CharField', [], {'default': "'text'", 'max_length': '64'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.team': {
+            'Meta': {'object_name': 'Team'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
+        },
+        'sentry.teammember': {
+            'Meta': {'unique_together': "(('team', 'user'),)", 'object_name': 'TeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_teammember_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.view': {
+            'Meta': {'object_name': 'View'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
+            'verbose_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'verbose_name_plural': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
+        }
+    }
+
+    complete_apps = ['sentry']
\ No newline at end of file
diff --git a/sentry/models.py b/sentry/models.py
index 272de9365a..f0fca8232b 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -31,7 +31,8 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry.conf import settings
 from sentry.manager import GroupManager, ProjectManager, \
-  MetaManager, InstanceMetaManager, SearchDocumentManager, BaseManager
+  MetaManager, InstanceMetaManager, SearchDocumentManager, BaseManager, \
+  UserOptionManager
 from sentry.utils import cached_property, \
   MockDjangoRequest
 from sentry.utils.models import Model, GzippedDictField, update
@@ -288,6 +289,8 @@ class PendingTeamMember(Model):
     type = models.IntegerField(choices=MEMBER_TYPES, default=globals().get(settings.DEFAULT_PROJECT_ACCESS))
     date_added = models.DateTimeField(default=datetime.now)
 
+    objects = BaseManager()
+
     class Meta:
         unique_together = (('team', 'email'),)
 
@@ -691,6 +694,28 @@ class SearchToken(Model):
     class Meta:
         unique_together = (('document', 'field', 'token'),)
 
+
+class UserOption(Model):
+    """
+    User options apply only to a user, and optionally a project.
+
+    Options which are specific to a plugin should namespace
+    their key. e.g. key='myplugin:optname'
+    """
+    user = models.ForeignKey(User)
+    project = models.ForeignKey(Project, null=True)
+    key = models.CharField(max_length=64)
+    value = PickledObjectField()
+
+    objects = UserOptionManager()
+
+    class Meta:
+        unique_together = (('user', 'project', 'key',),)
+
+    def __unicode__(self):
+        return u'user=%s, project=%s, key=%s, value=%s' % (self.user_id, self.project_id, self.key, self.value)
+
+
 ### django-indexer
 
 
diff --git a/sentry/plugins/base.py b/sentry/plugins/base.py
index cd120f8b37..2f3955f7e8 100644
--- a/sentry/plugins/base.py
+++ b/sentry/plugins/base.py
@@ -168,7 +168,7 @@ class IPlugin(local):
                 return False
         return True
 
-    def get_option(self, key, project=None):
+    def get_option(self, key, project=None, user=None):
         """
         Returns the value of an option in your plugins keyspace, or ``None`` if
         one is not present.
@@ -178,9 +178,9 @@ class IPlugin(local):
         >>> value = plugin.get_option('my_option')
         """
         from .helpers import get_option
-        return get_option(self._get_option_key(key), project)
+        return get_option(self._get_option_key(key), project, user)
 
-    def set_option(self, key, value, project=None):
+    def set_option(self, key, value, project=None, user=None):
         """
         Updates the value of an option in your plugins keyspace.
 
@@ -189,9 +189,9 @@ class IPlugin(local):
         >>> plugin.set_option('my_option', 'http://example.com')
         """
         from .helpers import set_option
-        return set_option(self._get_option_key(key), value, project)
+        return set_option(self._get_option_key(key), value, project, user)
 
-    def unset_option(self, key, project=None):
+    def unset_option(self, key, project=None, user=None):
         """
         Removes an option in your plugins keyspace.
 
@@ -200,7 +200,7 @@ class IPlugin(local):
         >>> plugin.unset_option('my_option')
         """
         from .helpers import unset_option
-        return unset_option(self._get_option_key(key), project)
+        return unset_option(self._get_option_key(key), project, user)
 
     def get_url(self, group):
         """
diff --git a/sentry/plugins/bases/notify.py b/sentry/plugins/bases/notify.py
index 09a689ff56..b8404e0334 100644
--- a/sentry/plugins/bases/notify.py
+++ b/sentry/plugins/bases/notify.py
@@ -6,9 +6,11 @@ sentry.plugins.bases.notify
 :license: BSD, see LICENSE for more details.
 """
 from django import forms
+from django.contrib.auth.models import User
 from django.utils.translation import ugettext_lazy as _
 from sentry.conf import settings
 from sentry.plugins import Plugin
+from sentry.models import UserOption
 
 
 class NotifyConfigurationForm(forms.Form):
@@ -24,13 +26,12 @@ class NotifyPlugin(Plugin):
     # site_conf_form = NotifyConfigurationForm
     project_conf_form = NotifyConfigurationForm
 
-    def __init__(self, *args, **kwargs):
-        super(NotifyPlugin, self).__init__(*args, **kwargs)
-
     def notify_users(self, group, event, fail_silently=False):
         raise NotImplementedError
 
     def get_send_to(self, project=None):
+        # TODO: this method is pretty expensive, and users is a small enough amount of data that we should
+        # be able to keep most of this in memory constantly
         send_to_list = set()
 
         send_to_admins = self.get_option('send_to_admins', project)
@@ -40,7 +41,24 @@ class NotifyPlugin(Plugin):
 
         send_to_members = self.get_option('send_to_members', project)
         if send_to_members and project and project.team:
-            send_to_list |= set(project.team.member_set.values_list('user__email', flat=True))
+            member_set = set(project.team.member_set.values_list('user', flat=True))
+
+            alert_queryset = UserOption.objects.filter(
+                user__in=member_set,
+                key='alert_email',
+            ).values_list(
+                'user',
+                'alert_email',
+            )
+
+            # We need to first fetch their specified alert email address
+            for user_id, email in alert_queryset:
+                member_set.remove(user_id)
+                send_to_list.add(email)
+
+            # If any didnt exist, grab their default email
+            if member_set:
+                send_to_list |= set(User.objects.filter(pk__in=member_set).values_list('email', flat=True))
 
         return filter(bool, send_to_list)
 
diff --git a/sentry/plugins/helpers.py b/sentry/plugins/helpers.py
index 721a400000..de4c317f12 100644
--- a/sentry/plugins/helpers.py
+++ b/sentry/plugins/helpers.py
@@ -6,13 +6,15 @@ sentry.plugins.helpers
 :license: BSD, see LICENSE for more details.
 """
 
-from sentry.models import ProjectOption, Option
+from sentry.models import ProjectOption, Option, UserOption
 
 __all__ = ('set_option', 'get_option', 'unset_option')
 
 
-def set_option(key, value, project=None):
-    if project:
+def set_option(key, value, project=None, user=None):
+    if user:
+        result = UserOption.objects.set_value(user, project, key, value)
+    elif project:
         result = ProjectOption.objects.set_value(project, key, value)
     else:
         result = Option.objects.set_value(key, value)
@@ -20,8 +22,10 @@ def set_option(key, value, project=None):
     return result
 
 
-def get_option(key, project=None):
-    if project:
+def get_option(key, project=None, user=None):
+    if user:
+        result = UserOption.objects.get_value(user, project, key)
+    elif project:
         result = ProjectOption.objects.get_value(project, key, None)
     else:
         result = Option.objects.get_value(key, None)
@@ -29,8 +33,10 @@ def get_option(key, project=None):
     return result
 
 
-def unset_option(key, project=None):
-    if project:
+def unset_option(key, project=None, user=None):
+    if user:
+        result = UserOption.objects.unset_value(user, project, key)
+    elif project:
         result = ProjectOption.objects.unset_value(project, key)
     else:
         result = Option.objects.unset_value(key)
diff --git a/sentry/templates/sentry/account/base.html b/sentry/templates/sentry/account/base.html
new file mode 100644
index 0000000000..0063e133be
--- /dev/null
+++ b/sentry/templates/sentry/account/base.html
@@ -0,0 +1,28 @@
+{% extends "sentry/layout.html" %}
+
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block title %}{% trans "Settings" %} | {{ block.super }}{% endblock %}
+
+{% block page_header %}
+    <ul class="breadcrumb">
+        <li><a href="#">{% trans "Settings" %}</a></li>
+        {% block breadcrumb %}{% endblock %}
+    </ul>
+{% endblock %}
+
+{% block heading %}
+    {% trans "Settings" %}
+{% endblock %}
+
+{% block main %}
+    <section class="body">
+        {% block inner %}
+        {% endblock %}
+    </section>
+{% endblock %}
+
+{% block sidebar %}
+    {% include "sentry/partial/_account_sidebar.html" %}
+{% endblock %}
diff --git a/sentry/templates/sentry/account/notifications.html b/sentry/templates/sentry/account/notifications.html
new file mode 100644
index 0000000000..10aa165e54
--- /dev/null
+++ b/sentry/templates/sentry/account/notifications.html
@@ -0,0 +1,41 @@
+{% extends "sentry/account/base.html" %}
+
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block title %}{% trans "Notification Settings" %} | {{ block.super }}{% endblock %}
+
+{% block breadcrumb %}
+    {{ block.super }}
+    <li class="divider">/</li>
+    <li><a href="{% url sentry-account-settings-notifications %}">{% trans "Notifications" %}</a></li>
+{% endblock %}
+
+{% block heading %}
+    {% trans "Notification Settings" %}
+{% endblock %}
+
+{% block inner %}
+    <form action="" method="post">
+        {% csrf_token %}
+        {% if form.non_field_errors %}
+            <div class="alert alert-block alert-error">
+                <p>{% trans "There were errors saving your changes:" %}</p>
+                <ul>
+                    {% for error in form.non_field_errors %}
+                        <li>{{ error }}</li>
+                    {% endfor %}
+                </ul>
+            </div>
+        {% endif %}
+        <fieldset>
+            <div><legend>{% trans "General" %}</legend></div>
+            {% for field in form %}
+                {% include "sentry/partial/_form_field.html" %}
+            {% endfor %}
+        </fieldset>
+        <fieldset class="form-actions">
+            <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
+        </fieldset>
+    </form>
+{% endblock %}
diff --git a/sentry/templates/sentry/account/settings.html b/sentry/templates/sentry/account/settings.html
index 43453ffef2..55ca53a98b 100644
--- a/sentry/templates/sentry/account/settings.html
+++ b/sentry/templates/sentry/account/settings.html
@@ -1,78 +1,71 @@
-{% extends "sentry/layout.html" %}
+{% extends "sentry/account/base.html" %}
 
 {% load i18n %}
 {% load sentry_helpers %}
 
 {% block title %}{% trans "Account Settings" %} | {{ block.super }}{% endblock %}
 
-{% block page_header %}
-    <ul class="breadcrumb">
-        <li><a href="#">{% trans "Account Settings" %}</a></li>
-        {% block breadcrumb %}{% endblock %}
-    </ul>
+{% block breadcrumb %}
+    {{ block.super }}
+    <li class="divider">/</li>
+    <li><a href="{% url sentry-account-settings %}">{% trans "Account" %}</a></li>
 {% endblock %}
 
 {% block heading %}
     {% trans "Account Settings" %}
 {% endblock %}
 
-{% block main %}
-    <section class="body">
-        <form action="" method="post">
-            {% csrf_token %}
-            {% if form.non_field_errors %}
-                <div class="alert alert-block alert-error">
-                    <p>{% trans "There were errors saving your changes:" %}</p>
-                    <ul>
-                        {% for error in form.non_field_errors %}
-                            <li>{{ error }}</li>
-                        {% endfor %}
-                    </ul>
-                </div>
-            {% endif %}
-            <p>{% trans "To make changes to your account, you must first enter your current password." %}</p>
-            {% with form.old_password as field %}
-                {% include "sentry/partial/_form_field.html" %}
-            {% endwith %}
-            <hr>
-            <fieldset class="control-group">
-                <label>Username</label>
-                <div class="controls">
-                    {{ request.user.username }}
-                </div>
-            </fieldset>
-            {% with form.first_name as field %}
-                {% include "sentry/partial/_form_field.html" %}
-            {% endwith %}
-            {% with form.email as field %}
-                {% include "sentry/partial/_form_field.html" %}
-            {% endwith %}
-            {% with form.language as field %}
-                {% include "sentry/partial/_form_field.html" %}
-            {% endwith %}
-            <fieldset class="control-group">
-                <label>Avatar</label>
-                <div class="controls">
-                    <img class="avatar" src="{% gravatar_url user.email size 32 %}">
-                    <a href="http://gravatar.com/">Change your avatar at Gravatar.com</a>
-                </div>
-            </fieldset>
-            <hr>
-            <p>{% trans "You may also optionally change your password." %}</p>
-            {% with form.new_password1 as field %}
-                {% include "sentry/partial/_form_field.html" %}
-            {% endwith %}
-            {% with form.new_password2 as field %}
-                {% include "sentry/partial/_form_field.html" %}
-            {% endwith %}
+{% block inner %}
+    <form action="" method="post">
+        {% csrf_token %}
+        {% if form.non_field_errors %}
+            <div class="alert alert-block alert-error">
+                <p>{% trans "There were errors saving your changes:" %}</p>
+                <ul>
+                    {% for error in form.non_field_errors %}
+                        <li>{{ error }}</li>
+                    {% endfor %}
+                </ul>
+            </div>
+        {% endif %}
+        <p>{% trans "To make changes to your account, you must first enter your current password." %}</p>
+        {% with form.old_password as field %}
+            {% include "sentry/partial/_form_field.html" %}
+        {% endwith %}
+        <hr>
+        <fieldset class="control-group">
+            <label>Username</label>
+            <div class="controls">
+                {{ request.user.username }}
+            </div>
+        </fieldset>
+        {% with form.first_name as field %}
+            {% include "sentry/partial/_form_field.html" %}
+        {% endwith %}
+        {% with form.email as field %}
+            {% include "sentry/partial/_form_field.html" %}
+        {% endwith %}
+        {% with form.language as field %}
+            {% include "sentry/partial/_form_field.html" %}
+        {% endwith %}
+        <fieldset class="control-group">
+            <label>Avatar</label>
+            <div class="controls">
+                <img class="avatar" src="{% gravatar_url user.email size 32 %}">
+                <a href="http://gravatar.com/">Change your avatar at Gravatar.com</a>
+            </div>
+        </fieldset>
+        <hr>
+        <p>{% trans "You may also optionally change your password." %}</p>
+        {% with form.new_password1 as field %}
+            {% include "sentry/partial/_form_field.html" %}
+        {% endwith %}
+        {% with form.new_password2 as field %}
+            {% include "sentry/partial/_form_field.html" %}
+        {% endwith %}
 
-            <fieldset class="form-actions">
-                <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
-            </fieldset>
-        </form>
-    </section>
-{% endblock %}
-
-{% block sidebar %}
-    {% include "sentry/partial/_account_sidebar.html" %}
+        <fieldset class="form-actions">
+            <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
+        </fieldset>
+    </form>
 {% endblock %}
diff --git a/sentry/templates/sentry/partial/_account_sidebar.html b/sentry/templates/sentry/partial/_account_sidebar.html
index 6443512cb7..4e05fafe25 100644
--- a/sentry/templates/sentry/partial/_account_sidebar.html
+++ b/sentry/templates/sentry/partial/_account_sidebar.html
@@ -1,8 +1,9 @@
 {% load i18n %}
 
-<h6>{% trans "Account" %}</h6>
+<h6>{% trans "Settings" %}</h6>
 <ul class="nav nav-tabs nav-stacked">
-    <li{% if page == 'settings' %} class="active"{% endif %}><a href="{% url sentry-account-settings %}">{% trans "Settings" %}</a></li>
+    <li{% if page == 'settings' %} class="active"{% endif %}><a href="{% url sentry-account-settings %}">{% trans "Account" %}</a></li>
+    <li{% if page == 'notifications' %} class="active"{% endif %}><a href="{% url sentry-account-settings-notifications %}">{% trans "Notifications" %}</a></li>
 </ul>
 
 <h6>{% trans "Projects" %}</h6>
diff --git a/sentry/templates/sentry/projects/manage.html b/sentry/templates/sentry/projects/manage.html
index e7eb82ea27..520942f574 100644
--- a/sentry/templates/sentry/projects/manage.html
+++ b/sentry/templates/sentry/projects/manage.html
@@ -53,7 +53,7 @@
                     {% endfor %}
                 </fieldset>
                 <fieldset id="client-security">
-                    <div><legend>Client Security</legend></div>
+                    <div><legend>{% trans "Client Security" %}</legend></div>
                     {% with form.origins as field %}
                         <p>{% blocktrans with 'https://github.com/lincolnloop/raven-js' as link %}Configure origin URLs which Sentry should accept events from. This is used for communication with client's like <a href="{{ link }}">raven-js</a>.{% endblocktrans %}
                         <p>{% blocktrans with 'http://en.wikipedia.org/wiki/Cross-origin_resource_sharing' as link %}For more information check out the <a href="{{ link }}">Wikipedia page on CORS</a>.{% endblocktrans %}</p>
diff --git a/sentry/templates/sentry/teams/members/edit.html b/sentry/templates/sentry/teams/members/edit.html
index ba70bc34a2..677aa9eb47 100644
--- a/sentry/templates/sentry/teams/members/edit.html
+++ b/sentry/templates/sentry/teams/members/edit.html
@@ -23,20 +23,20 @@
         <form class="form-stacked" action="" method="post">
             {% csrf_token %}
             <legend>{% trans "Details" %}</legend>
-            <fieldset class="control-group">
+            <div class="control-group">
                 <label>{% trans "User" %}</label>
                 <div class="controls">
                     {{ member.user.username }}
                 </div>
-            </fieldset>
+            </div>
             <br/>
             <legend>{% trans "Access" %}</legend>
             {% for field in form %}
                 {% include "sentry/partial/_form_field.html" %}
             {% endfor %}
-            <fieldset class="form-actions">
+            <div class="form-actions">
                 <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
-            </fieldset>
+            </div>
         </form>
     </section>
 {% endblock %}
diff --git a/sentry/web/forms/__init__.py b/sentry/web/forms/__init__.py
index c719a5d6eb..6566618dcd 100644
--- a/sentry/web/forms/__init__.py
+++ b/sentry/web/forms/__init__.py
@@ -12,7 +12,7 @@ from django.core.validators import URLValidator
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.conf import settings
-from sentry.models import Project
+from sentry.models import Project, UserOption
 from sentry.interfaces import Http
 from sentry.permissions import can_set_public_projects
 from sentry.web.forms.fields import RadioFieldRenderer, UserField
@@ -168,8 +168,30 @@ class RemoveUserForm(forms.Form):
     ), widget=forms.RadioSelect(renderer=RadioFieldRenderer))
 
 
+class NotificationSettingsForm(forms.Form):
+    alert_email = forms.EmailField(help_text='Designate an alternative email address to send email notifications to.')
+
+    def __init__(self, user, *args, **kwargs):
+        self.user = user
+        super(NotificationSettingsForm, self).__init__(*args, **kwargs)
+        self.fields['alert_email'].initial = UserOption.objects.get_value(
+            user=self.user,
+            project=None,
+            key='alert_email',
+            default=user.email,
+        )
+
+    def save(self):
+        UserOption.objects.set_value(
+            user=self.user,
+            project=None,
+            key='alert_email',
+            value=self.cleaned_data['alert_email'],
+        )
+
+
 class AccountSettingsForm(forms.Form):
-    old_password = forms.CharField(label=_("Old password"), widget=forms.PasswordInput)
+    old_password = forms.CharField(label=_("Current password"), widget=forms.PasswordInput)
     email = forms.EmailField()
     first_name = forms.CharField(required=True, label='Name')
     new_password1 = forms.CharField(label=_("New password"), widget=forms.PasswordInput, required=False)
diff --git a/sentry/web/frontend/accounts.py b/sentry/web/frontend/accounts.py
index a61c73149c..9229e3e976 100644
--- a/sentry/web/frontend/accounts.py
+++ b/sentry/web/frontend/accounts.py
@@ -12,7 +12,7 @@ from django.http import HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
 
 from sentry.web.decorators import login_required
-from sentry.web.forms import AccountSettingsForm
+from sentry.web.forms import AccountSettingsForm, NotificationSettingsForm
 from sentry.web.helpers import render_to_response
 
 
@@ -66,3 +66,20 @@ def settings(request):
         'page': 'settings',
     })
     return render_to_response('sentry/account/settings.html', context, request)
+
+
+@csrf_protect
+@login_required
+def notification_settings(request):
+    form = NotificationSettingsForm(request.user, request.POST or None)
+    if form.is_valid():
+        form.save()
+        response = HttpResponseRedirect(reverse('sentry-account-settings-notifications') + '?success=1')
+        return response
+
+    context = csrf(request)
+    context.update({
+        'form': form,
+        'page': 'notifications',
+    })
+    return render_to_response('sentry/account/notifications.html', context, request)
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
index e1f89b7255..7959471d8b 100644
--- a/sentry/web/urls.py
+++ b/sentry/web/urls.py
@@ -49,6 +49,7 @@ urlpatterns = patterns('',
     url(r'^login/$', accounts.login, name='sentry-login'),
     url(r'^logout/$', accounts.logout, name='sentry-logout'),
     url(r'^account/settings/$', accounts.settings, name='sentry-account-settings'),
+    url(r'^account/settings/notifications/$', accounts.notification_settings, name='sentry-account-settings-notifications'),
 
     # Teams
 
