commit 38d4ecf919218d1c31c61ba4f31fcf494b917a41
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Mar 11 09:58:27 2019 +0100

    feat(grouping): Remove some of the now unused grouping code (#12323)
    
    This completely removes calculate_hashes and moves all test code into fixtures that asserts on hashes. This is the last step before the code can be moved away from the interfaces entirely.

diff --git a/src/sentry/event_hashing.py b/src/sentry/event_hashing.py
index 8db9e2fc16..cdd4aade5b 100644
--- a/src/sentry/event_hashing.py
+++ b/src/sentry/event_hashing.py
@@ -103,23 +103,22 @@ class GroupingComponent(object):
         if contributes is not None:
             self.contributes = contributes
 
-    def flatten_values(self):
+    def iter_values(self):
         """Recursively walks the component and flattens it into a list of
         values.
         """
-        rv = []
         if self.contributes:
             for value in self.values:
                 if isinstance(value, GroupingComponent):
-                    rv.extend(value.flatten_values())
+                    for x in value.iter_values():
+                        yield x
                 else:
-                    rv.append(value)
-        return rv
+                    yield value
 
     def get_hash(self):
         """Returns the hash of the values if it contributes."""
         if self.contributes:
-            return hash_from_values(self.flatten_values())
+            return hash_from_values(self.iter_values())
 
     def as_dict(self):
         """Converts the component tree into a dictionary."""
@@ -150,8 +149,12 @@ class GroupingComponent(object):
 
 
 class BaseVariant(object):
+    # The type of the variant that is reported to the UI.
     type = None
 
+    # This is true if `get_hash` does not return `None`.
+    contributes = True
+
     def get_hash(self):
         return None
 
@@ -197,6 +200,14 @@ class ChecksumVariant(BaseVariant):
         return self.hash
 
 
+class FallbackVariant(BaseVariant):
+    id = 'fallback'
+    contributes = True
+
+    def get_hash(self):
+        return hash_from_values([])
+
+
 class ComponentVariant(BaseVariant):
     """A component variant is a variant that produces a hash from the
     `GroupComponent` it encloses.
@@ -210,6 +221,10 @@ class ComponentVariant(BaseVariant):
     def description(self):
         return self.component.description
 
+    @property
+    def contributes(self):
+        return self.component.contributes
+
     def get_hash(self):
         return self.component.get_hash()
 
@@ -251,13 +266,17 @@ class SaltedComponentVariant(BaseVariant):
     def description(self):
         return 'modified ' + self.component.description
 
+    @property
+    def contributes(self):
+        return self.component.contributes
+
     def get_hash(self):
         if not self.component.contributes:
             return None
         final_values = []
         for value in self.values:
             if value in DEFAULT_FINGERPRINT_VALUES:
-                final_values.extend(self.component.flatten_values())
+                final_values.extend(self.component.iter_values())
             else:
                 final_values.append(value)
         return hash_from_values(final_values)
@@ -322,6 +341,7 @@ def get_calculated_grouping_variants_for_event(event):
 
 
 def get_grouping_variants_for_event(event):
+    """Returns a dict of all grouping variants for this event."""
     # If a checksum is set the only variant that comes back from this
     # event is the checksum variant.
     checksum = event.data.get('checksum')
@@ -361,54 +381,8 @@ def get_grouping_variants_for_event(event):
         for (key, component) in six.iteritems(components):
             rv[key] = SaltedComponentVariant(fingerprint, component)
 
-    return rv
-
+    # Ensure we have a fallback hash if nothing else works out
+    if not any(x.contributes for x in six.itervalues(rv)):
+        rv['fallback'] = FallbackVariant()
 
-# legacy functionality follows:
-#
-# This is at present still the main grouping code in the event processing
-# but it should be possible to replace all of these with
-# `get_grouping_variants_for_event` once we feel more confident that no
-# regression ocurred.
-
-
-def get_hashes_for_event(event):
-    interfaces = event.get_interfaces()
-    for interface in six.itervalues(interfaces):
-        result = interface.compute_hashes(event.platform)
-        if not result:
-            continue
-        return result
-    return ['']
-
-
-def get_hashes_from_fingerprint(event, fingerprint):
-    if any(d in fingerprint for d in DEFAULT_FINGERPRINT_VALUES):
-        default_hashes = get_hashes_for_event(event)
-        hash_count = len(default_hashes)
-    else:
-        hash_count = 1
-
-    hashes = []
-    for idx in range(hash_count):
-        result = []
-        for bit in fingerprint:
-            if bit in DEFAULT_FINGERPRINT_VALUES:
-                result.extend(default_hashes[idx])
-            else:
-                result.append(bit)
-        hashes.append(result)
-    return hashes
-
-
-def calculate_event_hashes(event):
-    # If a checksum is set, use that one.
-    checksum = event.data.get('checksum')
-    if checksum:
-        if HASH_RE.match(checksum):
-            return [checksum]
-        return [hash_from_values([checksum]), checksum]
-
-    # Otherwise go with the new style fingerprint code
-    fingerprint = event.data.get('fingerprint') or ['{{ default }}']
-    return [hash_from_values(h) for h in get_hashes_from_fingerprint(event, fingerprint)]
+    return rv
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index a6b7976582..67495029ae 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -273,16 +273,6 @@ class Interface(object):
 
         return rv
 
-    def compute_hashes(self, platform=None):
-        # legacy function, really only used for tests these days
-        # XXX: remove/rename, this does not return hashes but returns
-        # components that contribute into a hash
-        variant_components = self.get_grouping_component_variants(platform)
-        return [
-            x.flatten_values() for x in six.itervalues(variant_components)
-            if x.contributes
-        ]
-
     def get_title(self):
         return _(type(self).__name__)
 
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 99ae644000..bffc01f64b 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -521,7 +521,11 @@ class Frame(Interface):
         if self.module:
             if self.is_unhashable_module(platform):
                 module_component.update(
-                    values=[GroupingComponent(id='salt', values=['<module>'])],
+                    values=[GroupingComponent(
+                        id='salt',
+                        values=['<module>'],
+                        hint='normalized generated module name'
+                    )],
                     hint='ignored module',
                 )
             else:
@@ -577,7 +581,8 @@ class Frame(Interface):
                     function_component.update(values=[
                         GroupingComponent(
                             id='salt',
-                            values=['<function>']
+                            values=['<function>'],
+                            hint='normalized lambda function name'
                         )
                     ])
                 else:
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 9492ebb808..901ff2e4f6 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -150,13 +150,12 @@ class Event(Model):
         information if available.  Grouping hashes will take into account
         fingerprinting and checksums.
         """
-        from sentry.event_hashing import calculate_event_hashes
         # If we have hashes stored in the data we use them, otherwise we
         # fall back to generating new ones from the data
         hashes = self.data.get('hashes')
         if hashes is not None:
             return hashes
-        return calculate_event_hashes(self)
+        return filter(None, [x.get_hash() for x in self.get_grouping_variants().values()])
 
     def get_grouping_variants(self):
         """
diff --git a/tests/sentry/event_hashing/fixtures/csp-img-src.json b/tests/sentry/event_hashing/fixtures/csp-img-src.json
new file mode 100644
index 0000000000..a56dc42f40
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/csp-img-src.json
@@ -0,0 +1,7 @@
+{
+  "csp": {
+    "document_uri": "http://example.com/foo",
+    "effective_directive": "img-src",
+    "blocked_uri": "ftp://example.com/foo"
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/csp-img-src.out b/tests/sentry/event_hashing/fixtures/csp-img-src.out
new file mode 100644
index 0000000000..a5776436eb
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/csp-img-src.out
@@ -0,0 +1,10 @@
+default:
+  hash: '1742101e08eb1608f569751dfedd0062'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'img-src'
+        violation (not a local script violation)
+        uri*
+          u'ftp://example.com'
diff --git a/tests/sentry/event_hashing/fixtures/csp-no-blocked-uri.json b/tests/sentry/event_hashing/fixtures/csp-no-blocked-uri.json
new file mode 100644
index 0000000000..ffd53db4d5
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/csp-no-blocked-uri.json
@@ -0,0 +1,7 @@
+{
+  "csp": {
+    "document_uri": "http://example.com/foo",
+    "effective_directive": "script-src",
+    "blocked_uri": ""
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/csp-no-blocked-uri.out b/tests/sentry/event_hashing/fixtures/csp-no-blocked-uri.out
new file mode 100644
index 0000000000..444fba966a
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/csp-no-blocked-uri.out
@@ -0,0 +1,10 @@
+default:
+  hash: 'efddf1cde918097259aa7d4904fb1942'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'script-src'
+        violation (not a local script violation)
+        uri*
+          "'self'"
diff --git a/tests/sentry/event_hashing/fixtures/csp-script-data-uri.json b/tests/sentry/event_hashing/fixtures/csp-script-data-uri.json
new file mode 100644
index 0000000000..f239022cbb
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/csp-script-data-uri.json
@@ -0,0 +1,7 @@
+{
+  "csp": {
+    "document_uri": "http://example.com/foo",
+    "effective_directive": "img-src",
+    "blocked_uri": "data:foo"
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/csp-script-data-uri.out b/tests/sentry/event_hashing/fixtures/csp-script-data-uri.out
new file mode 100644
index 0000000000..124788e233
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/csp-script-data-uri.out
@@ -0,0 +1,10 @@
+default:
+  hash: '4e6f2bce9d121aa89f4dc5e5da08afb5'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'img-src'
+        violation (not a local script violation)
+        uri*
+          u'data:'
diff --git a/tests/sentry/event_hashing/fixtures/csp-script-src-uri.json b/tests/sentry/event_hashing/fixtures/csp-script-src-uri.json
new file mode 100644
index 0000000000..3312c00f2c
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/csp-script-src-uri.json
@@ -0,0 +1,7 @@
+{
+  "csp": {
+    "document_uri": "http://example.com/foo",
+    "effective_directive": "script-src",
+    "blocked_uri": "http://example.com/lol.js"
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/csp-script-src-uri.out b/tests/sentry/event_hashing/fixtures/csp-script-src-uri.out
new file mode 100644
index 0000000000..ef3549fa18
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/csp-script-src-uri.out
@@ -0,0 +1,10 @@
+default:
+  hash: '223cdacfe5b4b830dc700b5c18cc21b4'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'script-src'
+        violation (not a local script violation)
+        uri*
+          u'example.com'
diff --git a/tests/sentry/event_hashing/fixtures/empty.json b/tests/sentry/event_hashing/fixtures/empty.json
new file mode 100644
index 0000000000..0967ef424b
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/empty.json
@@ -0,0 +1 @@
+{}
diff --git a/tests/sentry/event_hashing/fixtures/empty.out b/tests/sentry/event_hashing/fixtures/empty.out
new file mode 100644
index 0000000000..cd1f2fcc85
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/empty.out
@@ -0,0 +1,2 @@
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
diff --git a/tests/sentry/event_hashing/fixtures/exception-comput-hashes.json b/tests/sentry/event_hashing/fixtures/exception-comput-hashes.json
new file mode 100644
index 0000000000..dc3568cd0d
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/exception-comput-hashes.json
@@ -0,0 +1,7 @@
+{
+  "exception": {
+    "type": "ValueError",
+    "module": "foo.bar",
+    "value": "hello world"
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/exception-comput-hashes.out b/tests/sentry/event_hashing/fixtures/exception-comput-hashes.out
new file mode 100644
index 0000000000..ff247af743
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/exception-comput-hashes.out
@@ -0,0 +1,19 @@
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'ValueError'
+        value*
+          u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: 'b23ee1963904c2ca87b145febf94b66c'
+  component:
+    system*
+      exception*
+        type*
+          u'ValueError'
+        value*
+          u'hello world'
diff --git a/tests/sentry/event_hashing/fixtures/exception-compute-hashes-2.json b/tests/sentry/event_hashing/fixtures/exception-compute-hashes-2.json
new file mode 100644
index 0000000000..7928d7e2bb
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/exception-compute-hashes-2.json
@@ -0,0 +1,17 @@
+{
+  "exception": {
+    "stacktrace": {
+      "frames": [
+        {
+          "abs_path": "foo/baz.py",
+          "filename": "foo/baz.py",
+          "lineno": 1,
+          "in_app": true
+        }
+      ]
+    },
+    "type": "ValueError",
+    "module": "foo.bar",
+    "value": "hello world"
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/exception-compute-hashes-2.out b/tests/sentry/event_hashing/fixtures/exception-compute-hashes-2.out
new file mode 100644
index 0000000000..bda5c76b40
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/exception-compute-hashes-2.out
@@ -0,0 +1,31 @@
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame*
+            filename*
+              u'foo/baz.py'
+            lineno*
+              1
+        type*
+          u'ValueError'
+        value (stacktrace and type take precedence)
+          u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: 'baf0bfa8bb312627cd5ef4171aec9f4e'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'foo/baz.py'
+            lineno*
+              1
+        type*
+          u'ValueError'
+        value (stacktrace and type take precedence)
+          u'hello world'
diff --git a/tests/sentry/event_hashing/fixtures/exception-compute-hashes-3.json b/tests/sentry/event_hashing/fixtures/exception-compute-hashes-3.json
new file mode 100644
index 0000000000..e781592b7c
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/exception-compute-hashes-3.json
@@ -0,0 +1,36 @@
+{
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "abs_path": "foo/baz.py",
+              "filename": "foo/baz.py",
+              "lineno": 1,
+              "in_app": true
+            }
+          ]
+        },
+        "type": "ValueError",
+        "module": "foo.bar",
+        "value": "hello world"
+      },
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "abs_path": "foo/baz.py",
+              "filename": "foo/baz.py",
+              "lineno": 1,
+              "in_app": true
+            }
+          ]
+        },
+        "type": "ValueError",
+        "module": "foo.bar",
+        "value": "hello world"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/exception-compute-hashes-3.out b/tests/sentry/event_hashing/fixtures/exception-compute-hashes-3.out
new file mode 100644
index 0000000000..27f90ab301
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/exception-compute-hashes-3.out
@@ -0,0 +1,55 @@
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      chained-exception (ignored because hash matches system variant)
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'foo/baz.py'
+              lineno*
+                1
+          type*
+            u'ValueError'
+          value (stacktrace and type take precedence)
+            u'hello world'
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'foo/baz.py'
+              lineno*
+                1
+          type*
+            u'ValueError'
+          value (stacktrace and type take precedence)
+            u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '9aef9026a457d312531c07644b271314'
+  component:
+    system*
+      chained-exception*
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'foo/baz.py'
+              lineno*
+                1
+          type*
+            u'ValueError'
+          value (stacktrace and type take precedence)
+            u'hello world'
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'foo/baz.py'
+              lineno*
+                1
+          type*
+            u'ValueError'
+          value (stacktrace and type take precedence)
+            u'hello world'
diff --git a/tests/sentry/event_hashing/fixtures/exception-compute-hashes.json b/tests/sentry/event_hashing/fixtures/exception-compute-hashes.json
new file mode 100644
index 0000000000..7928d7e2bb
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/exception-compute-hashes.json
@@ -0,0 +1,17 @@
+{
+  "exception": {
+    "stacktrace": {
+      "frames": [
+        {
+          "abs_path": "foo/baz.py",
+          "filename": "foo/baz.py",
+          "lineno": 1,
+          "in_app": true
+        }
+      ]
+    },
+    "type": "ValueError",
+    "module": "foo.bar",
+    "value": "hello world"
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/exception-compute-hashes.out b/tests/sentry/event_hashing/fixtures/exception-compute-hashes.out
new file mode 100644
index 0000000000..bda5c76b40
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/exception-compute-hashes.out
@@ -0,0 +1,31 @@
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame*
+            filename*
+              u'foo/baz.py'
+            lineno*
+              1
+        type*
+          u'ValueError'
+        value (stacktrace and type take precedence)
+          u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: 'baf0bfa8bb312627cd5ef4171aec9f4e'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'foo/baz.py'
+            lineno*
+              1
+        type*
+          u'ValueError'
+        value (stacktrace and type take precedence)
+          u'hello world'
diff --git a/tests/sentry/event_hashing/fixtures/exception-without-type.json b/tests/sentry/event_hashing/fixtures/exception-without-type.json
new file mode 100644
index 0000000000..ddd54ea655
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/exception-without-type.json
@@ -0,0 +1,6 @@
+{
+  "exception": {
+    "module": "foo.bar",
+    "value": "hello world"
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/exception-without-type.out b/tests/sentry/event_hashing/fixtures/exception-without-type.out
new file mode 100644
index 0000000000..65086e1bc5
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/exception-without-type.out
@@ -0,0 +1,15 @@
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        value*
+          u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '5eb63bbbe01eeed093cb22bb8f5acdc3'
+  component:
+    system*
+      exception*
+        value*
+          u'hello world'
diff --git a/tests/sentry/event_hashing/fixtures/exception-without-value.json b/tests/sentry/event_hashing/fixtures/exception-without-value.json
new file mode 100644
index 0000000000..652706652c
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/exception-without-value.json
@@ -0,0 +1,6 @@
+{
+  "exception": {
+    "type": "ValueError",
+    "module": "foo.bar"
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/exception-without-value.out b/tests/sentry/event_hashing/fixtures/exception-without-value.out
new file mode 100644
index 0000000000..968d479c36
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/exception-without-value.out
@@ -0,0 +1,15 @@
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'ValueError'
+--------------------------------------------------------------------------
+system:
+  hash: '5a2cfd89b7b171fd7b4794b08023d04f'
+  component:
+    system*
+      exception*
+        type*
+          u'ValueError'
diff --git a/tests/sentry/event_hashing/fixtures/frame-comput-hashes-ignores-ENHANCED-clojure-classes.json b/tests/sentry/event_hashing/fixtures/frame-comput-hashes-ignores-ENHANCED-clojure-classes.json
new file mode 100644
index 0000000000..acf8458a4c
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-comput-hashes-ignores-ENHANCED-clojure-classes.json
@@ -0,0 +1,11 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "invoke",
+        "module": "sentry_clojure_example.core$_main$fn__1539"
+      }
+    ]
+  },
+  "platform": "java"
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-comput-hashes-ignores-ENHANCED-clojure-classes.out b/tests/sentry/event_hashing/fixtures/frame-comput-hashes-ignores-ENHANCED-clojure-classes.out
new file mode 100644
index 0000000000..5f0618d5eb
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-comput-hashes-ignores-ENHANCED-clojure-classes.out
@@ -0,0 +1,21 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '526b64456c48836a46ec1a89544fd412'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-ENHANCED-spring-classes.json b/tests/sentry/event_hashing/fixtures/frame-ignores-ENHANCED-spring-classes.json
new file mode 100644
index 0000000000..db0c3c0553
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-ENHANCED-spring-classes.json
@@ -0,0 +1,11 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "jipJipManagementApplication",
+        "module": "invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$1ebdddb0"
+      }
+    ]
+  },
+  "platform": "java"
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-ENHANCED-spring-classes.out b/tests/sentry/event_hashing/fixtures/frame-ignores-ENHANCED-spring-classes.out
new file mode 100644
index 0000000000..bfd10971d0
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-ENHANCED-spring-classes.out
@@ -0,0 +1,21 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
+--------------------------------------------------------------------------
+system:
+  hash: '45c0b0a8c777e7a7040d7c39233a08a5'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-clojure-classes.json b/tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-clojure-classes.json
new file mode 100644
index 0000000000..372a8a14d9
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-clojure-classes.json
@@ -0,0 +1,11 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "invoke",
+        "module": "sentry_clojure_example.core$_main$fn__1539$fn__1540"
+      }
+    ]
+  },
+  "platform": "java"
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-clojure-classes.out b/tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-clojure-classes.out
new file mode 100644
index 0000000000..da6826af70
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-clojure-classes.out
@@ -0,0 +1,21 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>$fn__<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '353e05904b48bd3ae4fa9623934a70d0'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>$fn__<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-spring-classes.json b/tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-spring-classes.json
new file mode 100644
index 0000000000..89cfeaa347
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-spring-classes.json
@@ -0,0 +1,11 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "jipJipManagementApplication",
+        "module": "invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$1ebdddb0$$EnhancerBySpringCGLIB$$8219cd38$$FastClassBySpringCGLIB$$6c0b35d1"
+      }
+    ]
+  },
+  "platform": "java"
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-spring-classes.out b/tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-spring-classes.out
new file mode 100644
index 0000000000..b40045d1ce
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-spring-classes.out
@@ -0,0 +1,21 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>$$EnhancerBySpringCGLIB$$<auto>$$FastClassBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
+--------------------------------------------------------------------------
+system:
+  hash: 'be15ca3d511b96918e087c4f42503ca2'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>$$EnhancerBySpringCGLIB$$<auto>$$FastClassBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-abs-path-is-http.json b/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-abs-path-is-http.json
new file mode 100644
index 0000000000..fee59b5d6f
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-abs-path-is-http.json
@@ -0,0 +1,12 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "test",
+        "abs_path": "https://foo.com/foo.py",
+        "context_line": "hello world",
+        "filename": "foo.py"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-abs-path-is-http.out b/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-abs-path-is-http.out
new file mode 100644
index 0000000000..994683c351
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-abs-path-is-http.out
@@ -0,0 +1,25 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          filename (ignored because filename is a URL)
+            u'foo.py'
+          context-line*
+            u'hello world'
+          function (function name is used only if module or filename are available)
+            u'test'
+--------------------------------------------------------------------------
+system:
+  hash: '5eb63bbbe01eeed093cb22bb8f5acdc3'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because filename is a URL)
+            u'foo.py'
+          context-line*
+            u'hello world'
+          function (function name is used only if module or filename are available)
+            u'test'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-blob.json b/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-blob.json
new file mode 100644
index 0000000000..ea59ffc3ac
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-blob.json
@@ -0,0 +1,10 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "abs_path": "blob:http://example.com/7f7aaadf-a006-4217-9ed5-5fbf8585c6c0",
+        "filename": "blob:http://example.com/7f7aaadf-a006-4217-9ed5-5fbf8585c6c0"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-blob.out b/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-blob.out
new file mode 100644
index 0000000000..66a58241f5
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-blob.out
@@ -0,0 +1,20 @@
+app:
+  hash: None
+  component:
+    app
+      stacktrace (ignored single frame stack)
+        frame (non app frame)
+          filename (ignored because filename is a URL)
+            u'blob:http://example.com/7f7aaadf-a006-4217-9ed5-5fbf8585c6c0'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace (ignored single frame stack)
+        frame
+          filename (ignored because filename is a URL)
+            u'blob:http://example.com/7f7aaadf-a006-4217-9ed5-5fbf8585c6c0'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-http.json b/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-http.json
new file mode 100644
index 0000000000..9dfc8751d7
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-http.json
@@ -0,0 +1,12 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "test",
+        "abs_path": "http://foo.com/foo.py",
+        "context_line": "hello world",
+        "filename": "/foo.py"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-http.out b/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-http.out
new file mode 100644
index 0000000000..851a5f3592
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-http.out
@@ -0,0 +1,25 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          filename (ignored because filename is a URL)
+            u'/foo.py'
+          context-line*
+            u'hello world'
+          function (function name is used only if module or filename are available)
+            u'test'
+--------------------------------------------------------------------------
+system:
+  hash: '5eb63bbbe01eeed093cb22bb8f5acdc3'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because filename is a URL)
+            u'/foo.py'
+          context-line*
+            u'hello world'
+          function (function name is used only if module or filename are available)
+            u'test'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-https.json b/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-https.json
new file mode 100644
index 0000000000..57fd115bf0
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-https.json
@@ -0,0 +1,12 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "test",
+        "abs_path": "https://foo.com/foo.py",
+        "context_line": "hello world",
+        "filename": "/foo.py"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-https.out b/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-https.out
new file mode 100644
index 0000000000..851a5f3592
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-https.out
@@ -0,0 +1,25 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          filename (ignored because filename is a URL)
+            u'/foo.py'
+          context-line*
+            u'hello world'
+          function (function name is used only if module or filename are available)
+            u'test'
+--------------------------------------------------------------------------
+system:
+  hash: '5eb63bbbe01eeed093cb22bb8f5acdc3'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because filename is a URL)
+            u'/foo.py'
+          context-line*
+            u'hello world'
+          function (function name is used only if module or filename are available)
+            u'test'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-function.json b/tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-function.json
new file mode 100644
index 0000000000..1b5a190c17
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-function.json
@@ -0,0 +1,10 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "lambda$work$1",
+        "module": "foo.bar.Baz"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-function.out b/tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-function.out
new file mode 100644
index 0000000000..08dc22e63c
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-function.out
@@ -0,0 +1,23 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          module*
+            u'foo.bar.Baz'
+          function*
+            salt* (normalized lambda function name)
+              '<function>'
+--------------------------------------------------------------------------
+system:
+  hash: 'aee9aaca552e7fd593d085ca5a2260cf'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'foo.bar.Baz'
+          function*
+            salt* (normalized lambda function name)
+              '<function>'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-module.json b/tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-module.json
new file mode 100644
index 0000000000..1581f94831
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-module.json
@@ -0,0 +1,11 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "call",
+        "module": "foo.bar.Baz$$Lambda$40/1673859467"
+      }
+    ]
+  },
+  "platform": "java"
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-module.out b/tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-module.out
new file mode 100644
index 0000000000..dd0a5950f6
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-module.out
@@ -0,0 +1,23 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          module* (ignored module)
+            salt* (normalized generated module name)
+              '<module>'
+          function*
+            u'call'
+--------------------------------------------------------------------------
+system:
+  hash: '5fd1358271b3a3dba3287e135029688d'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (ignored module)
+            salt* (normalized generated module name)
+              '<module>'
+          function*
+            u'call'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-javassist-2.json b/tests/sentry/event_hashing/fixtures/frame-ignores-javassist-2.json
new file mode 100644
index 0000000000..1c22d4da96
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-javassist-2.json
@@ -0,0 +1,11 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "fn",
+        "module": "com.example.api.entry.EntriesResource_$$_javassist_74"
+      }
+    ]
+  },
+  "platform": "java"
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-javassist-2.out b/tests/sentry/event_hashing/fixtures/frame-ignores-javassist-2.out
new file mode 100644
index 0000000000..de875f32fc
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-javassist-2.out
@@ -0,0 +1,21 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
+--------------------------------------------------------------------------
+system:
+  hash: '538bdfd8d7bb2495d0d6429c3689a420'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-javassist-3.json b/tests/sentry/event_hashing/fixtures/frame-ignores-javassist-3.json
new file mode 100644
index 0000000000..367429aa34
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-javassist-3.json
@@ -0,0 +1,12 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "fn",
+        "abs_path": "EntriesResource_$$_javassist_seam_74.java",
+        "filename": "EntriesResource_$$_javassist_seam_74.java"
+      }
+    ]
+  },
+  "platform": "java"
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-javassist-3.out b/tests/sentry/event_hashing/fixtures/frame-ignores-javassist-3.out
new file mode 100644
index 0000000000..604dcf69c0
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-javassist-3.out
@@ -0,0 +1,21 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          filename* (removed javassist parts)
+            u'EntriesResource_$$_javassist<auto>.java'
+          function*
+            u'fn'
+--------------------------------------------------------------------------
+system:
+  hash: '813856376ba744b15a01916ed2557344'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename* (removed javassist parts)
+            u'EntriesResource_$$_javassist<auto>.java'
+          function*
+            u'fn'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-javassist.json b/tests/sentry/event_hashing/fixtures/frame-ignores-javassist.json
new file mode 100644
index 0000000000..bc9abde96d
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-javassist.json
@@ -0,0 +1,11 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "fn",
+        "module": "com.example.api.entry.EntriesResource_$$_javassist_seam_74"
+      }
+    ]
+  },
+  "platform": "java"
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-javassist.out b/tests/sentry/event_hashing/fixtures/frame-ignores-javassist.out
new file mode 100644
index 0000000000..de875f32fc
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-javassist.out
@@ -0,0 +1,21 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
+--------------------------------------------------------------------------
+system:
+  hash: '538bdfd8d7bb2495d0d6429c3689a420'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url-2.json b/tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url-2.json
new file mode 100644
index 0000000000..c92ff98c07
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url-2.json
@@ -0,0 +1,12 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "abs_path": "https://sentry.io/foo/bar/baz",
+        "module": "foo/bar/baz",
+        "filename": "foo.py"
+      }
+    ]
+  },
+  "platform": "javascript"
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url-2.out b/tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url-2.out
new file mode 100644
index 0000000000..0b3a2d2e00
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url-2.out
@@ -0,0 +1,26 @@
+app:
+  hash: None
+  component:
+    app
+      stacktrace (ignored single frame stack)
+        frame (non app frame)
+          module* (ignored module)
+            salt* (normalized generated module name)
+              '<module>'
+          filename (module takes precedence)
+            u'foo.py'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace (ignored single frame stack)
+        frame*
+          module* (ignored module)
+            salt* (normalized generated module name)
+              '<module>'
+          filename (module takes precedence)
+            u'foo.py'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url.json b/tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url.json
new file mode 100644
index 0000000000..aa91d7dada
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url.json
@@ -0,0 +1,12 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "abs_path": "https://sentry.io/foo/bar/baz.js",
+        "module": "foo/bar/baz",
+        "filename": "foo.py"
+      }
+    ]
+  },
+  "platform": "javascript"
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url.out b/tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url.out
new file mode 100644
index 0000000000..3417c52c6f
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url.out
@@ -0,0 +1,24 @@
+app:
+  hash: None
+  component:
+    app
+      stacktrace (ignored single frame stack)
+        frame (non app frame)
+          module*
+            u'foo/bar/baz'
+          filename (module takes precedence)
+            u'foo.py'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace (ignored single frame stack)
+        frame*
+          module*
+            u'foo/bar/baz'
+          filename (module takes precedence)
+            u'foo.py'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-safari-native-code.json b/tests/sentry/event_hashing/fixtures/frame-ignores-safari-native-code.json
new file mode 100644
index 0000000000..96410d0688
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-safari-native-code.json
@@ -0,0 +1,11 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "forEach",
+        "abs_path": "[native code]",
+        "filename": "[native code]"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-safari-native-code.out b/tests/sentry/event_hashing/fixtures/frame-ignores-safari-native-code.out
new file mode 100644
index 0000000000..2cd2e0b33a
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-safari-native-code.out
@@ -0,0 +1,20 @@
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (frame considered in-app because no frame is in-app)
+          function (function name is used only if module or filename are available)
+            u'forEach'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame (native code indicated by filename)
+          function (function name is used only if module or filename are available)
+            u'forEach'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors-2.json b/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors-2.json
new file mode 100644
index 0000000000..231bf2c409
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors-2.json
@@ -0,0 +1,11 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "invoke",
+        "module": "sun.reflect.GeneratedConstructorAccessor2"
+      }
+    ]
+  },
+  "platform": "java"
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors-2.out b/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors-2.out
new file mode 100644
index 0000000000..f161250179
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors-2.out
@@ -0,0 +1,21 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedConstructorAccessor<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '09e0efcab18f545166318118ed4e0292'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedConstructorAccessor<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors.json b/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors.json
new file mode 100644
index 0000000000..2e193b1714
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors.json
@@ -0,0 +1,11 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "invoke",
+        "module": "sun.reflect.GeneratedSerializationConstructorAccessor1"
+      }
+    ]
+  },
+  "platform": "java"
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors.out b/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors.out
new file mode 100644
index 0000000000..42bb4cdde3
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors.out
@@ -0,0 +1,21 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedSerializationConstructorAccessor<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '07d1a8e5728b3c4c7aa8b8273fd0e753'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedSerializationConstructorAccessor<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-methods.json b/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-methods.json
new file mode 100644
index 0000000000..b81612d5e1
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-methods.json
@@ -0,0 +1,11 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "invoke",
+        "module": "sun.reflect.GeneratedMethodAccessor12345"
+      }
+    ]
+  },
+  "platform": "java"
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-methods.out b/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-methods.out
new file mode 100644
index 0000000000..afd8b576ef
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-methods.out
@@ -0,0 +1,21 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          module* (removed reflection marker)
+            'sun.reflect.GeneratedMethodAccessor'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: 'df0a8233b314c542a0b98a4e8865c7b5'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed reflection marker)
+            'sun.reflect.GeneratedMethodAccessor'
+          function*
+            u'invoke'
diff --git a/tests/sentry/event_hashing/fixtures/frame-sanitizes-block-functions.json b/tests/sentry/event_hashing/fixtures/frame-sanitizes-block-functions.json
new file mode 100644
index 0000000000..88ad4c3cdd
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-sanitizes-block-functions.json
@@ -0,0 +1,11 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "block in _conditional_callback_around_233",
+        "abs_path": "foo.py",
+        "filename": "foo.py"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-sanitizes-block-functions.out b/tests/sentry/event_hashing/fixtures/frame-sanitizes-block-functions.out
new file mode 100644
index 0000000000..22c2f1a25d
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-sanitizes-block-functions.out
@@ -0,0 +1,21 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          filename*
+            u'foo.py'
+          function* (ruby block)
+            'block'
+--------------------------------------------------------------------------
+system:
+  hash: '27eed4125fc13d42163ddb0b8f357b48'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          function* (ruby block)
+            'block'
diff --git a/tests/sentry/event_hashing/fixtures/frame-sanitizes-erb-templates.json b/tests/sentry/event_hashing/fixtures/frame-sanitizes-erb-templates.json
new file mode 100644
index 0000000000..7a46d553fe
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-sanitizes-erb-templates.json
@@ -0,0 +1,11 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "_foo_html_erb__3327151541118998292_70361296749460",
+        "abs_path": "foo.html.erb",
+        "filename": "foo.html.erb"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-sanitizes-erb-templates.out b/tests/sentry/event_hashing/fixtures/frame-sanitizes-erb-templates.out
new file mode 100644
index 0000000000..869db0374f
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-sanitizes-erb-templates.out
@@ -0,0 +1,21 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          filename*
+            u'foo.html.erb'
+          function* (trimmed integer suffix)
+            u'_foo_html_erb__<anon>_<anon>'
+--------------------------------------------------------------------------
+system:
+  hash: '140d61119ffa316766cf0f710bf1e7f1'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.html.erb'
+          function* (trimmed integer suffix)
+            u'_foo_html_erb__<anon>_<anon>'
diff --git a/tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames-2.json b/tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames-2.json
new file mode 100644
index 0000000000..30c2a0aa91
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames-2.json
@@ -0,0 +1,11 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "abs_path": "20140114151955/app/views/foo.html.erb",
+        "context_line": "<% if @hotels.size > 0 %>",
+        "filename": "20140114151955/app/views/foo.html.erb"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames-2.out b/tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames-2.out
new file mode 100644
index 0000000000..bd6517b4b4
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames-2.out
@@ -0,0 +1,21 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          filename* (removed version)
+            u'<version>/app/views/foo.html.erb'
+          context-line*
+            u'<% if @hotels.size > 0 %>'
+--------------------------------------------------------------------------
+system:
+  hash: 'babff59ccf75f6cade7c5805f6d9aa59'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename* (removed version)
+            u'<version>/app/views/foo.html.erb'
+          context-line*
+            u'<% if @hotels.size > 0 %>'
diff --git a/tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames.json b/tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames.json
new file mode 100644
index 0000000000..e55bde889f
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames.json
@@ -0,0 +1,11 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "abs_path": "/data/foo/releases/20140114151955/app/views/foo.html.erb",
+        "context_line": "<% if @hotels.size > 0 %>",
+        "filename": "/data/foo/releases/20140114151955/app/views/foo.html.erb"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames.out b/tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames.out
new file mode 100644
index 0000000000..2b3e9d3d6b
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames.out
@@ -0,0 +1,21 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          filename* (removed version)
+            u'/data/foo/releases/<version>/app/views/foo.html.erb'
+          context-line*
+            u'<% if @hotels.size > 0 %>'
+--------------------------------------------------------------------------
+system:
+  hash: '00ffe2f3150414a00633fb5671a918f8'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename* (removed version)
+            u'/data/foo/releases/<version>/app/views/foo.html.erb'
+          context-line*
+            u'<% if @hotels.size > 0 %>'
diff --git a/tests/sentry/event_hashing/fixtures/frame-skips-symbol-if-unknown.json b/tests/sentry/event_hashing/fixtures/frame-skips-symbol-if-unknown.json
new file mode 100644
index 0000000000..0b4c933fa0
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-skips-symbol-if-unknown.json
@@ -0,0 +1,10 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "main",
+        "module": "libfoo"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-skips-symbol-if-unknown.out b/tests/sentry/event_hashing/fixtures/frame-skips-symbol-if-unknown.out
new file mode 100644
index 0000000000..eae927031d
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-skips-symbol-if-unknown.out
@@ -0,0 +1,21 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          module*
+            u'libfoo'
+          function*
+            u'main'
+--------------------------------------------------------------------------
+system:
+  hash: 'a972f399399f5566f39b14a7afdd24ff'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'libfoo'
+          function*
+            u'main'
diff --git a/tests/sentry/event_hashing/fixtures/frame-uses-context-line-over-function.json b/tests/sentry/event_hashing/fixtures/frame-uses-context-line-over-function.json
new file mode 100644
index 0000000000..3dfc55dc6b
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-uses-context-line-over-function.json
@@ -0,0 +1,13 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "bar",
+        "abs_path": "foo.py",
+        "lineno": 1,
+        "context_line": "foo bar",
+        "filename": "foo.py"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-uses-context-line-over-function.out b/tests/sentry/event_hashing/fixtures/frame-uses-context-line-over-function.out
new file mode 100644
index 0000000000..46070d417d
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-uses-context-line-over-function.out
@@ -0,0 +1,29 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          filename*
+            u'foo.py'
+          context-line*
+            u'foo bar'
+          function (function name is used only if module or filename are available)
+            u'bar'
+          lineno (line number is used only if module or filename are available)
+            1
+--------------------------------------------------------------------------
+system:
+  hash: '60e0a667027bef0d0b7c4882891df7e8'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          context-line*
+            u'foo bar'
+          function (function name is used only if module or filename are available)
+            u'bar'
+          lineno (line number is used only if module or filename are available)
+            1
diff --git a/tests/sentry/event_hashing/fixtures/frame-uses-function-over-lineno.json b/tests/sentry/event_hashing/fixtures/frame-uses-function-over-lineno.json
new file mode 100644
index 0000000000..110d859ed1
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-uses-function-over-lineno.json
@@ -0,0 +1,12 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "bar",
+        "abs_path": "foo.py",
+        "lineno": 1,
+        "filename": "foo.py"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-uses-function-over-lineno.out b/tests/sentry/event_hashing/fixtures/frame-uses-function-over-lineno.out
new file mode 100644
index 0000000000..40e652f9df
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-uses-function-over-lineno.out
@@ -0,0 +1,25 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
+          lineno (function takes precedence)
+            1
+--------------------------------------------------------------------------
+system:
+  hash: 'fb73cb54ced59b1c0c60d9bb40b7336b'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
+          lineno (function takes precedence)
+            1
diff --git a/tests/sentry/event_hashing/fixtures/frame-uses-module-over-filename.json b/tests/sentry/event_hashing/fixtures/frame-uses-module-over-filename.json
new file mode 100644
index 0000000000..170b90d29d
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-uses-module-over-filename.json
@@ -0,0 +1,12 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "abs_path": "foo.py",
+        "lineno": 1,
+        "module": "foo",
+        "filename": "foo.py"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-uses-module-over-filename.out b/tests/sentry/event_hashing/fixtures/frame-uses-module-over-filename.out
new file mode 100644
index 0000000000..19660b0eb5
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-uses-module-over-filename.out
@@ -0,0 +1,25 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          module*
+            u'foo'
+          filename (module takes precedence)
+            u'foo.py'
+          lineno*
+            1
+--------------------------------------------------------------------------
+system:
+  hash: '299a0be4a5a79e6a59fdd251b19d78bb'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'foo'
+          filename (module takes precedence)
+            u'foo.py'
+          lineno*
+            1
diff --git a/tests/sentry/event_hashing/fixtures/frame-uses-symbol-instead-of-function.json b/tests/sentry/event_hashing/fixtures/frame-uses-symbol-instead-of-function.json
new file mode 100644
index 0000000000..038bf7fa18
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-uses-symbol-instead-of-function.json
@@ -0,0 +1,11 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "int main()",
+        "symbol": "_main",
+        "module": "libfoo"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-uses-symbol-instead-of-function.out b/tests/sentry/event_hashing/fixtures/frame-uses-symbol-instead-of-function.out
new file mode 100644
index 0000000000..500df1e0d7
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-uses-symbol-instead-of-function.out
@@ -0,0 +1,25 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          module*
+            u'libfoo'
+          symbol*
+            u'_main'
+          function (symbol takes precedence)
+            u'int main()'
+--------------------------------------------------------------------------
+system:
+  hash: '01143b49f8875c22617bac5bb1aaf638'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'libfoo'
+          symbol*
+            u'_main'
+          function (symbol takes precedence)
+            u'int main()'
diff --git a/tests/sentry/event_hashing/fixtures/frame-with-only-required-vars.json b/tests/sentry/event_hashing/fixtures/frame-with-only-required-vars.json
new file mode 100644
index 0000000000..37342c5e6c
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-with-only-required-vars.json
@@ -0,0 +1,11 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "abs_path": "foo.py",
+        "lineno": 1,
+        "filename": "foo.py"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/frame-with-only-required-vars.out b/tests/sentry/event_hashing/fixtures/frame-with-only-required-vars.out
new file mode 100644
index 0000000000..0121759970
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/frame-with-only-required-vars.out
@@ -0,0 +1,21 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          filename*
+            u'foo.py'
+          lineno*
+            1
+--------------------------------------------------------------------------
+system:
+  hash: '19fcc04a0c59eaf564ee1a00c58574cc'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          lineno*
+            1
diff --git a/tests/sentry/event_hashing/fixtures/logentry-prefers-message.json b/tests/sentry/event_hashing/fixtures/logentry-prefers-message.json
new file mode 100644
index 0000000000..a6605f646a
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/logentry-prefers-message.json
@@ -0,0 +1,9 @@
+{
+  "logentry": {
+    "message": "Hello there %s!",
+    "params": [
+      "world"
+    ],
+    "formatted": "Hello there world!"
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/logentry-prefers-message.out b/tests/sentry/event_hashing/fixtures/logentry-prefers-message.out
new file mode 100644
index 0000000000..09894f054d
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/logentry-prefers-message.out
@@ -0,0 +1,6 @@
+default:
+  hash: '8ec8bbc71eb6e2af7fbe5076a8534f96'
+  component:
+    default*
+      message*
+        u'Hello there %s!'
diff --git a/tests/sentry/event_hashing/fixtures/logentry-uses-formatted.json b/tests/sentry/event_hashing/fixtures/logentry-uses-formatted.json
new file mode 100644
index 0000000000..87fda4fd7e
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/logentry-uses-formatted.json
@@ -0,0 +1,5 @@
+{
+  "logentry": {
+    "formatted": "Hello there world!"
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/logentry-uses-formatted.out b/tests/sentry/event_hashing/fixtures/logentry-uses-formatted.out
new file mode 100644
index 0000000000..fb6a93fddb
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/logentry-uses-formatted.out
@@ -0,0 +1,6 @@
+default:
+  hash: '329b29efcf1f77067a063e34f56e7791'
+  component:
+    default*
+      message*
+        u'Hello there world!'
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-cocoa.json b/tests/sentry/event_hashing/fixtures/stacktrace-cocoa.json
new file mode 100644
index 0000000000..64de2d1acb
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-cocoa.json
@@ -0,0 +1,18 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "abs_path": "/foo/bar/bar.m",
+        "filename": "/foo/bar/bar.m",
+        "lineno": 1,
+        "in_app": true
+      },
+      {
+        "abs_path": "/foo/bar/baz.m",
+        "lineno": 1,
+        "filename": "/foo/bar/baz.m"
+      }
+    ]
+  },
+  "platform": "cocoa"
+}
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-cocoa.out b/tests/sentry/event_hashing/fixtures/stacktrace-cocoa.out
new file mode 100644
index 0000000000..7cac2605b7
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-cocoa.out
@@ -0,0 +1,31 @@
+app:
+  hash: '84ed5488c9c498282e0f1691b658f17f'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename* (stripped to basename)
+            u'bar.m'
+          lineno*
+            1
+        frame (non app frame)
+          filename* (stripped to basename)
+            u'baz.m'
+          lineno*
+            1
+--------------------------------------------------------------------------
+system:
+  hash: '41156b93307634d3815da88429911825'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename* (stripped to basename)
+            u'bar.m'
+          lineno*
+            1
+        frame*
+          filename* (stripped to basename)
+            u'baz.m'
+          lineno*
+            1
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-collapse-recursion.json b/tests/sentry/event_hashing/fixtures/stacktrace-collapse-recursion.json
new file mode 100644
index 0000000000..347ed0407e
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-collapse-recursion.json
@@ -0,0 +1,62 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "main",
+        "abs_path": "Application.java",
+        "module": "io.sentry.example.Application",
+        "filename": "Application.java",
+        "lineno": 13,
+        "in_app": false
+      },
+      {
+        "function": "normalFunc",
+        "abs_path": "Application.java",
+        "module": "io.sentry.example.Application",
+        "filename": "Application.java",
+        "lineno": 20,
+        "in_app": false
+      },
+      {
+        "function": "recurFunc",
+        "abs_path": "Application.java",
+        "module": "io.sentry.example.Application",
+        "filename": "Application.java",
+        "lineno": 27,
+        "in_app": false
+      },
+      {
+        "function": "recurFunc",
+        "abs_path": "Application.java",
+        "module": "io.sentry.example.Application",
+        "filename": "Application.java",
+        "lineno": 27,
+        "in_app": false
+      },
+      {
+        "function": "recurFunc",
+        "abs_path": "Application.java",
+        "module": "io.sentry.example.Application",
+        "filename": "Application.java",
+        "lineno": 27,
+        "in_app": false
+      },
+      {
+        "function": "recurFunc",
+        "abs_path": "Application.java",
+        "module": "io.sentry.example.Application",
+        "filename": "Application.java",
+        "lineno": 25,
+        "in_app": false
+      },
+      {
+        "function": "throwError",
+        "abs_path": "Application.java",
+        "module": "io.sentry.example.Application",
+        "filename": "Application.java",
+        "lineno": 32,
+        "in_app": false
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-collapse-recursion.out b/tests/sentry/event_hashing/fixtures/stacktrace-collapse-recursion.out
new file mode 100644
index 0000000000..0a7aabad54
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-collapse-recursion.out
@@ -0,0 +1,137 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'Application.java'
+          function*
+            u'main'
+          lineno (function takes precedence)
+            13
+        frame* (frame considered in-app because no frame is in-app)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'Application.java'
+          function*
+            u'normalFunc'
+          lineno (function takes precedence)
+            20
+        frame* (frame considered in-app because no frame is in-app)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'Application.java'
+          function*
+            u'recurFunc'
+          lineno (function takes precedence)
+            27
+        frame (ignored due to recursion)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'Application.java'
+          function*
+            u'recurFunc'
+          lineno (function takes precedence)
+            27
+        frame (ignored due to recursion)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'Application.java'
+          function*
+            u'recurFunc'
+          lineno (function takes precedence)
+            27
+        frame* (frame considered in-app because no frame is in-app)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'Application.java'
+          function*
+            u'recurFunc'
+          lineno (function takes precedence)
+            25
+        frame* (frame considered in-app because no frame is in-app)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'Application.java'
+          function*
+            u'throwError'
+          lineno (function takes precedence)
+            32
+--------------------------------------------------------------------------
+system:
+  hash: '894c3489e2ade384dc107bca6829d134'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'Application.java'
+          function*
+            u'main'
+          lineno (function takes precedence)
+            13
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'Application.java'
+          function*
+            u'normalFunc'
+          lineno (function takes precedence)
+            20
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'Application.java'
+          function*
+            u'recurFunc'
+          lineno (function takes precedence)
+            27
+        frame (ignored due to recursion)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'Application.java'
+          function*
+            u'recurFunc'
+          lineno (function takes precedence)
+            27
+        frame (ignored due to recursion)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'Application.java'
+          function*
+            u'recurFunc'
+          lineno (function takes precedence)
+            27
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'Application.java'
+          function*
+            u'recurFunc'
+          lineno (function takes precedence)
+            25
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'Application.java'
+          function*
+            u'throwError'
+          lineno (function takes precedence)
+            32
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-compute-hashes.json b/tests/sentry/event_hashing/fixtures/stacktrace-compute-hashes.json
new file mode 100644
index 0000000000..80e797dfc9
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-compute-hashes.json
@@ -0,0 +1,18 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "abs_path": "a/foo.py",
+        "filename": "a/foo.py",
+        "lineno": 1,
+        "in_app": true
+      },
+      {
+        "abs_path": "a/bar.py",
+        "lineno": 1,
+        "filename": "a/bar.py"
+      }
+    ]
+  },
+  "platform": "python"
+}
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-compute-hashes.out b/tests/sentry/event_hashing/fixtures/stacktrace-compute-hashes.out
new file mode 100644
index 0000000000..2f740b84c0
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-compute-hashes.out
@@ -0,0 +1,31 @@
+app:
+  hash: 'fbad177f80c1eff3bd6b252e09576292'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'a/foo.py'
+          lineno*
+            1
+        frame (non app frame)
+          filename*
+            u'a/bar.py'
+          lineno*
+            1
+--------------------------------------------------------------------------
+system:
+  hash: '06d370794820bec071005bf2e589d247'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'a/foo.py'
+          lineno*
+            1
+        frame*
+          filename*
+            u'a/bar.py'
+          lineno*
+            1
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-discards-seemingly-useless-stack.json b/tests/sentry/event_hashing/fixtures/stacktrace-discards-seemingly-useless-stack.json
new file mode 100644
index 0000000000..5c163ceeaf
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-discards-seemingly-useless-stack.json
@@ -0,0 +1,12 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "abs_path": "http://example.com/foo",
+        "lineno": 1,
+        "context_line": "<HTML>",
+        "filename": "foo"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-discards-seemingly-useless-stack.out b/tests/sentry/event_hashing/fixtures/stacktrace-discards-seemingly-useless-stack.out
new file mode 100644
index 0000000000..dfbd3ccba4
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-discards-seemingly-useless-stack.out
@@ -0,0 +1,26 @@
+app:
+  hash: None
+  component:
+    app
+      stacktrace (ignored single frame stack)
+        frame (non app frame)
+          filename (ignored because filename is a URL)
+            u'foo'
+          context-line (discarded because from URL origin)
+          lineno (line number is used only if module or filename are available)
+            1
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace (ignored single frame stack)
+        frame
+          filename (ignored because filename is a URL)
+            u'foo'
+          context-line (discarded because from URL origin)
+          lineno (line number is used only if module or filename are available)
+            1
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-does-not-discard-non-urls.json b/tests/sentry/event_hashing/fixtures/stacktrace-does-not-discard-non-urls.json
new file mode 100644
index 0000000000..a3c38737d2
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-does-not-discard-non-urls.json
@@ -0,0 +1,12 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "abs_path": "foo",
+        "lineno": 1,
+        "context_line": "<HTML>",
+        "filename": "foo"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-does-not-discard-non-urls.out b/tests/sentry/event_hashing/fixtures/stacktrace-does-not-discard-non-urls.out
new file mode 100644
index 0000000000..e02ee99317
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-does-not-discard-non-urls.out
@@ -0,0 +1,25 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          filename*
+            u'foo'
+          context-line*
+            u'<HTML>'
+          lineno (line number is used only if module or filename are available)
+            1
+--------------------------------------------------------------------------
+system:
+  hash: '9b478586e7375aef8bedb80ae2fcaab7'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo'
+          context-line*
+            u'<HTML>'
+          lineno (line number is used only if module or filename are available)
+            1
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-does-not-group-different-js-errors.json b/tests/sentry/event_hashing/fixtures/stacktrace-does-not-group-different-js-errors.json
new file mode 100644
index 0000000000..8482ac6ed1
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-does-not-group-different-js-errors.json
@@ -0,0 +1,12 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "abs_path": "https://foo.com/index.js",
+        "lineno": 20,
+        "context_line": "{snip}",
+        "filename": "/index.js"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-does-not-group-different-js-errors.out b/tests/sentry/event_hashing/fixtures/stacktrace-does-not-group-different-js-errors.out
new file mode 100644
index 0000000000..0b2c588ad2
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-does-not-group-different-js-errors.out
@@ -0,0 +1,26 @@
+app:
+  hash: None
+  component:
+    app
+      stacktrace (ignored single frame stack)
+        frame (non app frame)
+          filename (ignored because filename is a URL)
+            u'/index.js'
+          context-line (discarded because from URL origin)
+          lineno (line number is used only if module or filename are available)
+            20
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace (ignored single frame stack)
+        frame
+          filename (ignored because filename is a URL)
+            u'/index.js'
+          context-line (discarded because from URL origin)
+          lineno (line number is used only if module or filename are available)
+            20
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-excludes-single-frame-urls.json b/tests/sentry/event_hashing/fixtures/stacktrace-excludes-single-frame-urls.json
new file mode 100644
index 0000000000..5b5ab18e7d
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-excludes-single-frame-urls.json
@@ -0,0 +1,13 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "lineno": 107,
+        "abs_path": "http://foo.com/bar/",
+        "context_line": "hello world",
+        "module": "<unknown module>",
+        "filename": "/bar/"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-excludes-single-frame-urls.out b/tests/sentry/event_hashing/fixtures/stacktrace-excludes-single-frame-urls.out
new file mode 100644
index 0000000000..d6edebbd4e
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-excludes-single-frame-urls.out
@@ -0,0 +1,30 @@
+app:
+  hash: None
+  component:
+    app
+      stacktrace (ignored single frame stack)
+        frame (non app frame)
+          module*
+            u'<unknown module>'
+          filename (module takes precedence)
+            u'/bar/'
+          context-line (discarded because from URL origin)
+          lineno*
+            107
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace (ignored single frame stack)
+        frame*
+          module*
+            u'<unknown module>'
+          filename (module takes precedence)
+            u'/bar/'
+          context-line (discarded because from URL origin)
+          lineno*
+            107
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-hash-without-system-frames.json b/tests/sentry/event_hashing/fixtures/stacktrace-hash-without-system-frames.json
new file mode 100644
index 0000000000..09714868b7
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-hash-without-system-frames.json
@@ -0,0 +1,17 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "abs_path": "foo.py",
+        "filename": "foo.py",
+        "lineno": 1,
+        "in_app": true
+      },
+      {
+        "abs_path": "bar.py",
+        "lineno": 1,
+        "filename": "bar.py"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-hash-without-system-frames.out b/tests/sentry/event_hashing/fixtures/stacktrace-hash-without-system-frames.out
new file mode 100644
index 0000000000..2f2447daa0
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-hash-without-system-frames.out
@@ -0,0 +1,31 @@
+app:
+  hash: '19fcc04a0c59eaf564ee1a00c58574cc'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          lineno*
+            1
+        frame (non app frame)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+--------------------------------------------------------------------------
+system:
+  hash: '3aa7e7dacc3a98cf8316a226c4485053'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          lineno*
+            1
+        frame*
+          filename*
+            u'bar.py'
+          lineno*
+            1
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-ignores-singular-anonymous-frame.json b/tests/sentry/event_hashing/fixtures/stacktrace-ignores-singular-anonymous-frame.json
new file mode 100644
index 0000000000..44976dda89
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-ignores-singular-anonymous-frame.json
@@ -0,0 +1,28 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "abs_path": "<anonymous>",
+        "filename": "<anonymous>",
+        "in_app": false
+      },
+      {
+        "function": "c",
+        "abs_path": "file:///C:/Users/redacted/AppData/Local/redacted/resources/app.asar/dojo/dojo.js",
+        "filename": "/C:/Users/redacted/AppData/Local/redacted/app-2.4.1/resources/app.asar/dojo/dojo.js",
+        "lineno": 1188,
+        "colno": 125,
+        "in_app": false
+      },
+      {
+        "function": "Object._createDocumentViewModel",
+        "abs_path": "file:///C:/Users/redacted/AppData/Local/redacted/app-2.4.1/resources/app.asar/dojo/dojo.js",
+        "filename": "/C:/Users/redacted/AppData/Local/redacted/app-2.4.1/resources/app.asar/dojo/dojo.js",
+        "lineno": 1184,
+        "colno": 92,
+        "in_app": false
+      }
+    ]
+  },
+  "platform": "javascript"
+}
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-ignores-singular-anonymous-frame.out b/tests/sentry/event_hashing/fixtures/stacktrace-ignores-singular-anonymous-frame.out
new file mode 100644
index 0000000000..93ba134b8f
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-ignores-singular-anonymous-frame.out
@@ -0,0 +1,48 @@
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (frame considered in-app because no frame is in-app)
+          filename (anonymous filename discarded)
+            u'<anonymous>'
+        frame (frame considered in-app because no frame is in-app)
+          filename (ignored because filename is a URL)
+            u'/C:/Users/redacted/AppData/Local/redacted/app-2.4.1/resources/app.asar/dojo/dojo.js'
+          function (function name is used only if module or filename are available)
+            u'c'
+          lineno (line number is used only if module or filename are available)
+            1188
+        frame (frame considered in-app because no frame is in-app)
+          filename (ignored because filename is a URL)
+            u'/C:/Users/redacted/AppData/Local/redacted/app-2.4.1/resources/app.asar/dojo/dojo.js'
+          function (function name is used only if module or filename are available)
+            u'Object._createDocumentViewModel'
+          lineno (line number is used only if module or filename are available)
+            1184
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame
+          filename (anonymous filename discarded)
+            u'<anonymous>'
+        frame
+          filename (ignored because filename is a URL)
+            u'/C:/Users/redacted/AppData/Local/redacted/app-2.4.1/resources/app.asar/dojo/dojo.js'
+          function (function name is used only if module or filename are available)
+            u'c'
+          lineno (line number is used only if module or filename are available)
+            1188
+        frame
+          filename (ignored because filename is a URL)
+            u'/C:/Users/redacted/AppData/Local/redacted/app-2.4.1/resources/app.asar/dojo/dojo.js'
+          function (function name is used only if module or filename are available)
+            u'Object._createDocumentViewModel'
+          lineno (line number is used only if module or filename are available)
+            1184
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-with-minimal-app-frames.json b/tests/sentry/event_hashing/fixtures/stacktrace-with-minimal-app-frames.json
new file mode 100644
index 0000000000..3a3cec9cc2
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-with-minimal-app-frames.json
@@ -0,0 +1,78 @@
+{
+  "stacktrace": {
+    "frames": [
+      {
+        "abs_path": "foo.py",
+        "filename": "foo.py",
+        "lineno": 1,
+        "in_app": true
+      },
+      {
+        "abs_path": "bar.py",
+        "filename": "bar.py",
+        "lineno": 1,
+        "in_app": false
+      },
+      {
+        "abs_path": "bar.py",
+        "filename": "bar.py",
+        "lineno": 1,
+        "in_app": false
+      },
+      {
+        "abs_path": "bar.py",
+        "filename": "bar.py",
+        "lineno": 1,
+        "in_app": false
+      },
+      {
+        "abs_path": "bar.py",
+        "filename": "bar.py",
+        "lineno": 1,
+        "in_app": false
+      },
+      {
+        "abs_path": "bar.py",
+        "filename": "bar.py",
+        "lineno": 1,
+        "in_app": false
+      },
+      {
+        "abs_path": "bar.py",
+        "filename": "bar.py",
+        "lineno": 1,
+        "in_app": false
+      },
+      {
+        "abs_path": "bar.py",
+        "filename": "bar.py",
+        "lineno": 1,
+        "in_app": false
+      },
+      {
+        "abs_path": "bar.py",
+        "filename": "bar.py",
+        "lineno": 1,
+        "in_app": false
+      },
+      {
+        "abs_path": "bar.py",
+        "filename": "bar.py",
+        "lineno": 1,
+        "in_app": false
+      },
+      {
+        "abs_path": "bar.py",
+        "filename": "bar.py",
+        "lineno": 1,
+        "in_app": false
+      },
+      {
+        "abs_path": "bar.py",
+        "filename": "bar.py",
+        "lineno": 1,
+        "in_app": false
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-with-minimal-app-frames.out b/tests/sentry/event_hashing/fixtures/stacktrace-with-minimal-app-frames.out
new file mode 100644
index 0000000000..b253b2bf6c
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/stacktrace-with-minimal-app-frames.out
@@ -0,0 +1,131 @@
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (less than 10% of frames are in-app)
+        frame*
+          filename*
+            u'foo.py'
+          lineno*
+            1
+        frame (non app frame)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (non app frame)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (non app frame)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (non app frame)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (non app frame)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (non app frame)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (non app frame)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (non app frame)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (non app frame)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (non app frame)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (non app frame)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+--------------------------------------------------------------------------
+system:
+  hash: '3aa7e7dacc3a98cf8316a226c4485053'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          lineno*
+            1
+        frame*
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+          lineno*
+            1
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+          lineno*
+            1
diff --git a/tests/sentry/event_hashing/fixtures/template-compute-hashes.json b/tests/sentry/event_hashing/fixtures/template-compute-hashes.json
new file mode 100644
index 0000000000..fc8c410e8d
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/template-compute-hashes.json
@@ -0,0 +1,7 @@
+{
+  "template": {
+    "lineno": 1,
+    "context_line": "hello world",
+    "filename": "foo.html"
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/template-compute-hashes.out b/tests/sentry/event_hashing/fixtures/template-compute-hashes.out
new file mode 100644
index 0000000000..12e91a727f
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/template-compute-hashes.out
@@ -0,0 +1,9 @@
+default:
+  hash: '826f66ef602835f68030c04c634df320'
+  component:
+    default*
+      template*
+        filename*
+          u'foo.html'
+        context-line*
+          u'hello world'
diff --git a/tests/sentry/event_hashing/fixtures/threads-compute-hashes.json b/tests/sentry/event_hashing/fixtures/threads-compute-hashes.json
new file mode 100644
index 0000000000..1e3444dcdc
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/threads-compute-hashes.json
@@ -0,0 +1,32 @@
+{
+  "threads": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "main",
+              "abs_path": "foo/baz.c",
+              "filename": "foo/baz.c",
+              "lineno": 1,
+              "in_app": true
+            }
+          ]
+        },
+        "name": "Main Thread",
+        "current": true,
+        "crashed": false,
+        "raw_stacktrace": {
+          "frames": [
+            {
+              "function": "<redacted>",
+              "lineno": 1,
+              "in_app": true
+            }
+          ]
+        },
+        "id": 42
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/threads-compute-hashes.out b/tests/sentry/event_hashing/fixtures/threads-compute-hashes.out
new file mode 100644
index 0000000000..84a120e7bc
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/threads-compute-hashes.out
@@ -0,0 +1,27 @@
+app:
+  hash: None
+  component:
+    app (threads of system takes precedence)
+      threads (ignored because hash matches system variant)
+        stacktrace*
+          frame*
+            filename*
+              u'foo/baz.c'
+            function*
+              u'main'
+            lineno (function takes precedence)
+              1
+--------------------------------------------------------------------------
+system:
+  hash: '39db5b4edf187e89cec12245e5c9fb3c'
+  component:
+    system*
+      threads*
+        stacktrace*
+          frame*
+            filename*
+              u'foo/baz.c'
+            function*
+              u'main'
+            lineno (function takes precedence)
+              1
diff --git a/tests/sentry/event_hashing/fixtures/threads-no-hash.json b/tests/sentry/event_hashing/fixtures/threads-no-hash.json
new file mode 100644
index 0000000000..c28ce678d5
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/threads-no-hash.json
@@ -0,0 +1,58 @@
+{
+  "threads": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "main",
+              "abs_path": "foo/baz.c",
+              "filename": "foo/baz.c",
+              "lineno": 1,
+              "in_app": true
+            }
+          ]
+        },
+        "name": "Main Thread",
+        "current": true,
+        "crashed": false,
+        "raw_stacktrace": {
+          "frames": [
+            {
+              "function": "<redacted>",
+              "lineno": 1,
+              "in_app": true
+            }
+          ]
+        },
+        "id": 42
+      },
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "main",
+              "abs_path": "foo/baz.c",
+              "filename": "foo/baz.c",
+              "lineno": 1,
+              "in_app": true
+            }
+          ]
+        },
+        "name": "Main Thread",
+        "current": true,
+        "crashed": false,
+        "raw_stacktrace": {
+          "frames": [
+            {
+              "function": "<redacted>",
+              "lineno": 1,
+              "in_app": true
+            }
+          ]
+        },
+        "id": 43
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/event_hashing/fixtures/threads-no-hash.out b/tests/sentry/event_hashing/fixtures/threads-no-hash.out
new file mode 100644
index 0000000000..5c1d8c6670
--- /dev/null
+++ b/tests/sentry/event_hashing/fixtures/threads-no-hash.out
@@ -0,0 +1,14 @@
+app:
+  hash: None
+  component:
+    app
+      threads (ignored because contains 2 threads)
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      threads (ignored because contains 2 threads)
diff --git a/tests/sentry/event_hashing/test_variants.py b/tests/sentry/event_hashing/test_variants.py
index 10da311745..0547a565c1 100644
--- a/tests/sentry/event_hashing/test_variants.py
+++ b/tests/sentry/event_hashing/test_variants.py
@@ -54,12 +54,16 @@ _fixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')
 def test_event_hash_variant(infile):
     with open(os.path.join(_fixture_path, infile + '.json')) as f:
         input = json.load(f)
-    with open(os.path.join(_fixture_path, infile + '.out')) as f:
-        refval = f.read().decode('utf-8').rstrip()
+    try:
+        with open(os.path.join(_fixture_path, infile + '.out')) as f:
+            refval = f.read().decode('utf-8').rstrip()
+    except IOError:
+        refval = ''
 
     mgr = EventManager(data=input)
     mgr.normalize()
-    evt = Event(data=mgr.get_data())
+    data = mgr.get_data()
+    evt = Event(data=data, platform=data['platform'])
 
     rv = []
     for (key, value) in sorted(evt.get_grouping_variants().items()):
diff --git a/tests/sentry/event_manager/test_event_manager.py b/tests/sentry/event_manager/test_event_manager.py
index 7f9cdd1284..ad7e6f4827 100644
--- a/tests/sentry/event_manager/test_event_manager.py
+++ b/tests/sentry/event_manager/test_event_manager.py
@@ -1263,7 +1263,7 @@ class EventManagerTest(TransactionTestCase):
         event = manager.save(self.project.id)
 
         hashes = [gh.hash for gh in GroupHash.objects.filter(group=event.group)]
-        assert hashes == [hash_from_values(checksum), checksum]
+        assert sorted(hashes) == sorted([hash_from_values(checksum), checksum])
 
     @mock.patch('sentry.event_manager.is_valid_error_message')
     def test_should_filter_message(self, mock_is_valid_error_message):
diff --git a/tests/sentry/event_manager/test_get_hashes_from_fingerprint.py b/tests/sentry/event_manager/test_get_hashes_from_fingerprint.py
deleted file mode 100644
index f9db3b194c..0000000000
--- a/tests/sentry/event_manager/test_get_hashes_from_fingerprint.py
+++ /dev/null
@@ -1,37 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import, print_function
-
-import mock
-
-from sentry.models import Event
-from sentry.event_hashing import hash_from_values
-
-
-@mock.patch('sentry.interfaces.stacktrace.Stacktrace.compute_hashes')
-@mock.patch('sentry.interfaces.http.Http.compute_hashes')
-def test_stacktrace_wins_over_http(http_comp_hash, stack_comp_hash):
-    # this was a regression, and a very important one
-    http_comp_hash.return_value = [['baz']]
-    stack_comp_hash.return_value = [['foo', 'bar']]
-    event = Event(
-        data={
-            'stacktrace': {
-                'frames': [{
-                    'lineno': 1,
-                    'filename': 'foo.py',
-                }],
-            },
-            'request': {
-                'url': 'http://example.com'
-            },
-        },
-        platform='python',
-        message='Foo bar',
-    )
-    hashes = event.get_hashes()
-    assert len(hashes) == 1
-    hash_one = hashes[0]
-    stack_comp_hash.assert_called_once_with('python')
-    assert not http_comp_hash.called
-    assert hash_one == hash_from_values(['foo', 'bar'])
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index 7f6675c4ea..8f169a3dab 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -3,7 +3,6 @@
 from __future__ import absolute_import
 
 from exam import fixture
-from itertools import chain
 
 from sentry.interfaces.exception import (SingleException, Exception, slim_exception_data,
                                          Mechanism, normalize_mechanism_meta, upgrade_legacy_mechanism)
@@ -110,12 +109,6 @@ class ExceptionTest(TestCase):
 ValueError: hello world
   File "foo/baz.py", line 1"""
 
-    def test_compute_hashes(self):
-        inst = self.interface
-
-        all_values = [sum(chain.from_iterable(v.compute_hashes() for v in inst.values), [])]
-        assert inst.compute_hashes() == all_values
-
     def test_context_with_mixed_frames(self):
         inst = Exception.to_python(
             dict(
@@ -354,24 +347,6 @@ class SingleExceptionTest(TestCase):
             'module': self.interface.module,
         }
 
-    def test_comput_hashes(self):
-        assert self.interface.compute_hashes() == [[
-            self.interface.type,
-            self.interface.value,
-        ]]
-
-    def test_compute_hashes_without_type(self):
-        self.interface.type = None
-        assert self.interface.compute_hashes() == [[
-            self.interface.value,
-        ]]
-
-    def test_compute_hashes_without_value(self):
-        self.interface.value = None
-        assert self.interface.compute_hashes() == [[
-            self.interface.type,
-        ]]
-
     def test_serialize_unserialize_behavior(self):
         result = type(self.interface).to_python(self.interface.to_json())
         assert result.to_json() == self.interface.to_json()
diff --git a/tests/sentry/interfaces/test_message.py b/tests/sentry/interfaces/test_message.py
index 1019f38f53..49a0f138ac 100644
--- a/tests/sentry/interfaces/test_message.py
+++ b/tests/sentry/interfaces/test_message.py
@@ -26,17 +26,6 @@ class MessageTest(TestCase):
             'formatted': 'Hello there world!'
         }
 
-    def test_compute_hashes_prefers_message(self):
-        assert self.interface.compute_hashes() == [[self.interface.message]]
-
-    def test_compute_hashes_uses_formatted(self):
-        interface = Message.to_python(dict(
-            message=None,
-            params=(),
-            formatted='Hello there world!'
-        ))
-        assert interface.compute_hashes() == [[interface.formatted]]
-
     def test_grouping_components_prefers_message(self):
         assert self.interface.get_grouping_component().as_dict() == {
             'hint': None,
diff --git a/tests/sentry/interfaces/test_security.py b/tests/sentry/interfaces/test_security.py
index c41184246a..c331c7fb82 100644
--- a/tests/sentry/interfaces/test_security.py
+++ b/tests/sentry/interfaces/test_security.py
@@ -97,52 +97,6 @@ class CspTest(TestCase):
         )
         assert result.get_culprit() == "style-src http://example2.com 'self'"
 
-    def test_compute_hashes(self):
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                effective_directive='script-src',
-                blocked_uri='',
-            )
-        )
-        assert result.compute_hashes() == [['script-src', "'self'"]]
-
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                effective_directive='script-src',
-                blocked_uri='self',
-            )
-        )
-        assert result.compute_hashes() == [['script-src', "'self'"]]
-
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                effective_directive='script-src',
-                blocked_uri='http://example.com/lol.js',
-            )
-        )
-        assert result.compute_hashes() == [['script-src', 'example.com']]
-
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                effective_directive='img-src',
-                blocked_uri='data:foo',
-            )
-        )
-        assert result.compute_hashes() == [['img-src', 'data:']]
-
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                effective_directive='img-src',
-                blocked_uri='ftp://example.com/foo',
-            )
-        )
-        assert result.compute_hashes() == [['img-src', 'ftp://example.com']]
-
     def test_get_tags(self):
         assert self.interface.get_tags() == [
             ('effective-directive', 'style-src'), ('blocked-uri', 'http://example.com/lol.css'),
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 335fb4fcab..f038138e76 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -149,561 +149,6 @@ class StacktraceTest(TestCase):
         result = interface.to_json()
         assert 'frames' in result
 
-    def test_hash_without_system_frames(self):
-        interface = Stacktrace.to_python(
-            dict(
-                frames=[
-                    {
-                        'lineno': 1,
-                        'filename': 'foo.py',
-                        'in_app': True,
-                    }, {
-                        'lineno': 1,
-                        'filename': 'bar.py',
-                        'in_app': None,
-                    }
-                ]
-            )
-        )
-
-        result = interface.compute_hashes()
-        assert sorted(result) == sorted([
-            ['foo.py', 1, 'bar.py', 1],
-            ['foo.py', 1],
-        ])
-
-    def test_compute_hashes(self):
-        interface = Stacktrace.to_python(
-            dict(
-                frames=[
-                    {
-                        'lineno': 1,
-                        'filename': 'a/foo.py',
-                        'in_app': True,
-                    }, {
-                        'lineno': 1,
-                        'filename': 'a/bar.py',
-                        'in_app': None,
-                    }
-                ]
-            )
-        )
-
-        result = interface.compute_hashes('python')
-        assert sorted(result) == sorted([['a/foo.py', 1, 'a/bar.py', 1], ['a/foo.py', 1]])
-
-    def test_compute_hashes_cocoa(self):
-        interface = Stacktrace.to_python(
-            dict(
-                frames=[
-                    {
-                        'lineno': 1,
-                        'filename': '/foo/bar/bar.m',
-                        'in_app': True,
-                    }, {
-                        'lineno': 1,
-                        'filename': '/foo/bar/baz.m',
-                        'in_app': None,
-                    }
-                ]
-            )
-        )
-        result = interface.compute_hashes('cocoa')
-        assert sorted(result) == sorted([['bar.m', 1, 'baz.m', 1], ['bar.m', 1]])
-
-    def test_compute_hashes_with_minimal_app_frames(self):
-        frames = [{
-            'lineno': 1,
-            'filename': 'foo.py',
-            'in_app': True,
-        }] + [{
-            'lineno': 1,
-            'filename': 'bar.py',
-            'in_app': False,
-        } for _ in range(11)]
-        interface = Stacktrace.to_python(dict(frames=frames))
-        result = interface.compute_hashes()
-        assert result == [['foo.py', 1, 'bar.py', 1]]
-
-    def test_compute_hashes_with_only_required_vars(self):
-        interface = Frame.to_python({
-            'lineno': 1,
-            'filename': 'foo.py',
-        })
-        result = interface.compute_hashes()
-        self.assertEquals(result, [['foo.py', 1]])
-
-    def test_compute_hashes_sanitizes_block_functions(self):
-        # This is Ruby specific
-        interface = Frame.to_python(
-            {
-                'filename': 'foo.py',
-                'function': 'block in _conditional_callback_around_233',
-            }
-        )
-        result = interface.compute_hashes()
-        self.assertEquals(result, [['foo.py', 'block']])
-
-    def test_compute_hashes_sanitizes_versioned_filenames(self):
-        # This is Ruby specific
-        interface = Frame.to_python(
-            {
-                'filename': '/data/foo/releases/20140114151955/app/views/foo.html.erb',
-                'context_line': '<% if @hotels.size > 0 %>',
-            }
-        )
-        result = interface.compute_hashes()
-        self.assertEquals(
-            result, [[
-                '/data/foo/releases/<version>/app/views/foo.html.erb',
-                '<% if @hotels.size > 0 %>',
-            ]]
-        )
-
-        interface = Frame.to_python(
-            {
-                'filename': '20140114151955/app/views/foo.html.erb',
-                'context_line': '<% if @hotels.size > 0 %>',
-            }
-        )
-        result = interface.compute_hashes()
-        self.assertEquals(
-            result, [[
-                '<version>/app/views/foo.html.erb',
-                '<% if @hotels.size > 0 %>',
-            ]]
-        )
-
-    def test_compute_hashes_ignores_java8_lambda_module(self):
-        interface = Frame.to_python(
-            {
-                'module': 'foo.bar.Baz$$Lambda$40/1673859467',
-                'function': 'call',
-            }
-        )
-        result = interface.compute_hashes(platform='java')
-        self.assertEquals(result, [[
-            '<module>',
-            'call',
-        ]])
-
-    def test_compute_hashes_ignores_java8_lambda_function(self):
-        interface = Frame.to_python({
-            'module': 'foo.bar.Baz',
-            'function': 'lambda$work$1',
-        })
-        result = interface.compute_hashes()
-        self.assertEquals(result, [[
-            'foo.bar.Baz',
-            '<function>',
-        ]])
-
-    def test_comput_hashes_ignores_ENHANCED_clojure_classes(self):
-        interface = Frame.to_python(
-            {
-                'module': 'sentry_clojure_example.core$_main$fn__1539',
-                'function': 'invoke'
-            }
-        )
-        result = interface.compute_hashes(platform='java')
-        self.assertEquals(result, [[
-            'sentry_clojure_example.core$_main$fn__<auto>',
-            'invoke',
-        ]])
-
-    def test_compute_hashes_ignores_extra_ENHANCED_clojure_classes(self):
-        interface = Frame.to_python(
-            {
-                'module': 'sentry_clojure_example.core$_main$fn__1539$fn__1540',
-                'function': 'invoke'
-            }
-        )
-        result = interface.compute_hashes(platform='java')
-        self.assertEquals(
-            result, [[
-                'sentry_clojure_example.core$_main$fn__<auto>$fn__<auto>',
-                'invoke',
-            ]]
-        )
-
-    def test_compute_hashes_ignores_ENHANCED_spring_classes(self):
-        interface = Frame.to_python(
-            {
-                'module':
-                'invalid.gruml.talkytalkyhub.common.config.'
-                'JipJipConfig$$EnhancerBySpringCGLIB$$1ebdddb0',
-                'function':
-                'jipJipManagementApplication'
-            }
-        )
-        result = interface.compute_hashes(platform='java')
-        self.assertEquals(
-            result, [[
-                'invalid.gruml.talkytalkyhub.common.config.JipJipConfig'
-                '$$EnhancerBySpringCGLIB$$<auto>',
-                'jipJipManagementApplication',
-            ]]
-        )
-
-    def test_compute_hashes_ignores_extra_ENHANCED_spring_classes(self):
-        interface = Frame.to_python(
-            {
-                'module':
-                'invalid.gruml.talkytalkyhub.common.config.'
-                'JipJipConfig$$EnhancerBySpringCGLIB$$1ebdddb0'
-                '$$EnhancerBySpringCGLIB$$8219cd38'
-                '$$FastClassBySpringCGLIB$$6c0b35d1',
-                'function':
-                'jipJipManagementApplication'
-            }
-        )
-        result = interface.compute_hashes(platform='java')
-        self.assertEquals(
-            result, [[
-                'invalid.gruml.talkytalkyhub.common.config.JipJipConfig'
-                '$$EnhancerBySpringCGLIB$$<auto>$$EnhancerBySpringCGLIB$$<auto>'
-                '$$FastClassBySpringCGLIB$$<auto>',
-                'jipJipManagementApplication',
-            ]]
-        )
-
-    def test_compute_hashes_ignores_javassist(self):
-        interface = Frame.to_python(
-            {
-                'module': 'com.example.api.entry.EntriesResource_$$_javassist_seam_74',
-                'function': 'fn',
-            }
-        )
-        result = interface.compute_hashes(platform='java')
-        self.assertEquals(
-            result, [[
-                'com.example.api.entry.EntriesResource_$$_javassist<auto>', 'fn'
-            ]]
-        )
-
-        interface = Frame.to_python(
-            {
-                'module': 'com.example.api.entry.EntriesResource_$$_javassist_74',
-                'function': 'fn',
-            }
-        )
-        result = interface.compute_hashes(platform='java')
-        self.assertEquals(
-            result, [[
-                'com.example.api.entry.EntriesResource_$$_javassist<auto>', 'fn'
-            ]]
-        )
-
-        interface = Frame.to_python(
-            {
-                'filename': 'EntriesResource_$$_javassist_seam_74.java',
-                'function': 'fn',
-            }
-        )
-        result = interface.compute_hashes(platform='java')
-        self.assertEquals(
-            result, [[
-                'EntriesResource_$$_javassist<auto>.java', 'fn'
-            ]]
-        )
-
-    def test_compute_hashes_ignores_sun_java_generated_constructors(self):
-        interface = Frame.to_python(
-            {
-                'module': 'sun.reflect.GeneratedSerializationConstructorAccessor1',
-                'function': 'invoke',
-            }
-        )
-        result = interface.compute_hashes(platform='java')
-        self.assertEquals(result, [[
-            'sun.reflect.GeneratedSerializationConstructorAccessor<auto>',
-            'invoke',
-        ]])
-
-        interface = Frame.to_python(
-            {
-                'module': 'sun.reflect.GeneratedConstructorAccessor2',
-                'function': 'invoke',
-            }
-        )
-        result = interface.compute_hashes(platform='java')
-        self.assertEquals(result, [[
-            'sun.reflect.GeneratedConstructorAccessor<auto>',
-            'invoke',
-        ]])
-
-    def test_compute_hashes_ignores_sun_java_generated_methods(self):
-        interface = Frame.to_python(
-            {
-                'module': 'sun.reflect.GeneratedMethodAccessor12345',
-                'function': 'invoke',
-            }
-        )
-        result = interface.compute_hashes(platform='java')
-        self.assertEquals(result, [[
-            'sun.reflect.GeneratedMethodAccessor',
-            'invoke',
-        ]])
-
-    def test_compute_hashes_sanitizes_erb_templates(self):
-        # This is Ruby specific
-        interface = Frame.to_python(
-            {
-                'filename': 'foo.html.erb',
-                'function': '_foo_html_erb__3327151541118998292_70361296749460',
-            }
-        )
-        result = interface.compute_hashes()
-        self.assertEquals(result, [[
-            'foo.html.erb',
-            '_foo_html_erb__<anon>_<anon>',
-        ]])
-
-    def test_compute_hashes_ignores_filename_if_blob(self):
-        interface = Frame.to_python(
-            {
-                'filename': 'blob:http://example.com/7f7aaadf-a006-4217-9ed5-5fbf8585c6c0',
-            }
-        )
-        result = interface.compute_hashes()
-        self.assertEquals(result, [])
-
-    def test_compute_hashes_ignores_filename_if_http(self):
-        interface = Frame.to_python(
-            {
-                'context_line': 'hello world',
-                'filename': 'http://foo.com/foo.py',
-                'function': 'test',
-            }
-        )
-        result = interface.compute_hashes()
-        self.assertEquals(result, [['hello world']])
-
-    def test_compute_hashes_ignores_filename_if_https(self):
-        interface = Frame.to_python(
-            {
-                'context_line': 'hello world',
-                'filename': 'https://foo.com/foo.py',
-                'function': 'test',
-            }
-        )
-        result = interface.compute_hashes()
-        self.assertEquals(result, [['hello world']])
-
-    def test_compute_hashes_ignores_filename_if_abs_path_is_http(self):
-        interface = Frame.to_python(
-            {
-                'context_line': 'hello world',
-                'abs_path': 'https://foo.com/foo.py',
-                'function': 'test',
-                'filename': 'foo.py',
-            }
-        )
-        result = interface.compute_hashes()
-        self.assertEquals(result, [['hello world']])
-
-    def test_compute_hashes_uses_module_over_filename(self):
-        interface = Frame.to_python({'lineno': 1, 'filename': 'foo.py', 'module': 'foo'})
-        result = interface.compute_hashes()
-        self.assertEquals(result, [['foo', 1]])
-
-    def test_compute_hashes_uses_function_over_lineno(self):
-        interface = Frame.to_python({'lineno': 1, 'filename': 'foo.py', 'function': 'bar'})
-        result = interface.compute_hashes()
-        self.assertEquals(result, [['foo.py', 'bar']])
-
-    def test_compute_hashes_uses_context_line_over_function(self):
-        interface = Frame.to_python(
-            {
-                'context_line': 'foo bar',
-                'lineno': 1,
-                'filename': 'foo.py',
-                'function': 'bar'
-            }
-        )
-        result = interface.compute_hashes()
-        self.assertEquals(result, [['foo.py', 'foo bar']])
-
-    def test_compute_hashes_discards_seemingly_useless_stack(self):
-        interface = Stacktrace.to_python(
-            {
-                'frames': [
-                    {
-                        'context_line': '<HTML>',
-                        'lineno': 1,
-                        'abs_path': 'http://example.com/foo',
-                        'filename': 'foo',
-                        'function': '?',
-                    }
-                ],
-            }
-        )
-        result = interface.compute_hashes()
-        assert result == []
-
-    def test_compute_hashes_does_not_discard_non_urls(self):
-        interface = Stacktrace.to_python(
-            {
-                'frames': [
-                    {
-                        'context_line': '<HTML>',
-                        'lineno': 1,
-                        'abs_path': 'foo',
-                        'filename': 'foo',
-                        'function': '?',
-                    }
-                ],
-            }
-        )
-        result = interface.compute_hashes()
-        assert result != []
-
-    def test_compute_hashes_excludes_single_frame_urls(self):
-        """
-        Browser JS will often throw errors (from inlined code in an HTML page)
-        which contain only a single frame, no function name, and have the HTML
-        document as the filename.
-
-        In this case the hash is often not usable as the context cannot be
-        trusted and the URL is dynamic.
-        """
-        interface = Stacktrace.to_python(
-            {
-                'frames': [
-                    {
-                        'context_line': 'hello world',
-                        'abs_path': 'http://foo.com/bar/',
-                        'lineno': 107,
-                        'filename': '/bar/',
-                        'module': '<unknown module>',
-                    }
-                ],
-            }
-        )
-        result = interface.compute_hashes()
-        assert result == []
-
-    def test_compute_hashes_ignores_module_if_page_url(self):
-        """
-        When the abs_path is a URL without a file extension, and the module is
-        a suffix of that URL, we should ignore the module. This takes care of a
-        raven-js issue where page URLs (not source filenames) are being used as
-        the module.
-        """
-
-        interface = Frame.to_python({
-            'filename': 'foo.py',
-            'abs_path': 'https://sentry.io/foo/bar/baz.js',
-            'module': 'foo/bar/baz',
-        })
-        result = interface.compute_hashes(platform='javascript')
-        assert result == [['foo/bar/baz']]
-
-        interface = Frame.to_python({
-            'filename': 'foo.py',
-            'abs_path': 'https://sentry.io/foo/bar/baz',
-            'module': 'foo/bar/baz',
-        })
-        result = interface.compute_hashes(platform='javascript')
-        assert result == [['<module>']]
-
-    def test_compute_hashes_ignores_singular_anonymous_frame(self):
-        interface = Stacktrace.to_python({
-            'frames': [
-                {"abs_path": "<anonymous>", "filename": "<anonymous>", "in_app": False},
-                {"function": "c",
-                 "abs_path": "file:///C:/Users/redacted/AppData/Local/redacted/resources/app.asar/dojo/dojo.js",
-                 "in_app": False,
-                 "lineno": 1188,
-                 "colno": 125,
-                 "filename": "/C:/Users/redacted/AppData/Local/redacted/app-2.4.1/resources/app.asar/dojo/dojo.js"},
-                {"function": "Object._createDocumentViewModel",
-                 "abs_path": "file:///C:/Users/redacted/AppData/Local/redacted/app-2.4.1/resources/app.asar/dojo/dojo.js",
-                 "in_app": False,
-                 "lineno": 1184,
-                 "colno": 92,
-                 "filename": "/C:/Users/redacted/AppData/Local/redacted/app-2.4.1/resources/app.asar/dojo/dojo.js"}
-            ]
-        })
-        result = interface.compute_hashes(platform='javascript')
-
-        assert result == []
-
-    def test_collapse_recursion(self):
-        interface = Stacktrace.to_python(
-            {
-                'frames': [
-                    {
-                        'abs_path': 'Application.java',
-                        'filename': 'Application.java',
-                        'function': 'main',
-                        'in_app': False,
-                        'lineno': 13,
-                        'module': 'io.sentry.example.Application'
-                    },
-                    {
-                        'abs_path': 'Application.java',
-                        'filename': 'Application.java',
-                        'function': 'normalFunc',
-                        'in_app': False,
-                        'lineno': 20,
-                        'module': 'io.sentry.example.Application'
-                    },
-                    {
-                        'abs_path': 'Application.java',
-                        'filename': 'Application.java',
-                        'function': 'recurFunc',
-                        'in_app': False,
-                        'lineno': 27,
-                        'module': 'io.sentry.example.Application'
-                    },
-                    {
-                        'abs_path': 'Application.java',
-                        'filename': 'Application.java',
-                        'function': 'recurFunc',
-                        'in_app': False,
-                        'lineno': 27,
-                        'module': 'io.sentry.example.Application'
-                    },
-                    {
-                        'abs_path': 'Application.java',
-                        'filename': 'Application.java',
-                        'function': 'recurFunc',
-                        'in_app': False,
-                        'lineno': 27,
-                        'module': 'io.sentry.example.Application'
-                    },
-                    {
-                        'abs_path': 'Application.java',
-                        'filename': 'Application.java',
-                        'function': 'recurFunc',
-                        'in_app': False,
-                        'lineno': 25,
-                        'module': 'io.sentry.example.Application'
-                    },
-                    {
-                        'abs_path': 'Application.java',
-                        'filename': 'Application.java',
-                        'function': 'throwError',
-                        'in_app': False,
-                        'lineno': 32,
-                        'module': 'io.sentry.example.Application'
-                    }
-                ]
-            }
-        )
-        result = interface.compute_hashes()
-        self.assertEquals(result, [[
-            'io.sentry.example.Application', 'main',
-            'io.sentry.example.Application', 'normalFunc',
-            # first call to recursive function
-            'io.sentry.example.Application', 'recurFunc',
-            # (exact) recursive frames omitted here
-            # call from *different location* in recursive function
-            'io.sentry.example.Application', 'recurFunc',
-            'io.sentry.example.Application', 'throwError'
-        ]])
-
     def test_frame_hard_limit(self):
         hard_limit = settings.SENTRY_STACKTRACE_FRAMES_HARD_LIMIT
         interface = Stacktrace.to_python(
@@ -724,59 +169,6 @@ class StacktraceTest(TestCase):
         # second to last frame (lineno:250) should be removed
         assert interface.frames[-2].lineno == hard_limit - 1
 
-    def test_compute_hashes_ignores_safari_native_code(self):
-        interface = Frame.to_python(
-            {
-                'abs_path': '[native code]',
-                'filename': '[native code]',
-                'function': 'forEach',
-            }
-        )
-        result = interface.compute_hashes()
-        self.assertEquals(result, [])
-
-    def test_compute_hashes_does_not_group_different_js_errors(self):
-        interface = Stacktrace.to_python(
-            {
-                'frames': [
-                    {
-                        'context_line': '{snip}',
-                        'lineno': 20,
-                        'filename': 'https://foo.com/index.js',
-                        'function': '?',
-                    }
-                ],
-            }
-        )
-        result = interface.compute_hashes()
-        assert result == []
-
-    def test_compute_hashes_uses_symbol_instead_of_function(self):
-        interface = Frame.to_python(
-            {
-                'module': 'libfoo',
-                'function': 'int main()',
-                'symbol': '_main',
-            }
-        )
-        result = interface.compute_hashes()
-        self.assertEquals(result, [[
-            'libfoo',
-            '_main',
-        ]])
-
-    def test_compute_hashes_skips_symbol_if_unknown(self):
-        interface = Frame.to_python({
-            'module': 'libfoo',
-            'function': 'main',
-            'symbol': '?',
-        })
-        result = interface.compute_hashes()
-        self.assertEquals(result, [[
-            'libfoo',
-            'main',
-        ]])
-
     @mock.patch('sentry.interfaces.stacktrace.Stacktrace.get_stacktrace')
     def test_to_string_returns_stacktrace(self, get_stacktrace):
         event = mock.Mock(spec=Event())
diff --git a/tests/sentry/interfaces/test_template.py b/tests/sentry/interfaces/test_template.py
index 403290b450..d629ae4534 100644
--- a/tests/sentry/interfaces/test_template.py
+++ b/tests/sentry/interfaces/test_template.py
@@ -41,10 +41,6 @@ class TemplateTest(TestCase):
         with pytest.raises(InterfaceValidationError):
             Template.to_python({"lineno": 1, "context_line": 42})
 
-    def test_compute_hashes(self):
-        result = self.interface.compute_hashes()
-        self.assertEquals(result, [['foo.html', 'hello world']])
-
     @mock.patch('sentry.interfaces.template.get_context')
     @mock.patch('sentry.interfaces.template.Template.get_traceback')
     def test_to_string_returns_traceback(self, get_traceback, get_context):
diff --git a/tests/sentry/interfaces/test_threads.py b/tests/sentry/interfaces/test_threads.py
index dcca036fcf..679340e0fd 100644
--- a/tests/sentry/interfaces/test_threads.py
+++ b/tests/sentry/interfaces/test_threads.py
@@ -75,67 +75,3 @@ class ThreadsTest(TestCase):
         assert Threads.to_python({"values": [{"id": None}]}).to_json() == sink
         assert Threads.to_python({"values": [{"name": None}]}).to_json() == sink
         assert Threads.to_python({"values": [{"stacktrace": None}]}).to_json() == sink
-
-    def test_compute_hashes(self):
-        result = self.interface.compute_hashes()
-        self.assertEquals(result, [['foo/baz.c', 'main']])
-
-    def test_no_hash(self):
-        interface = Threads.to_python(
-            dict(
-                values=[
-                    {
-                        'id': 42,
-                        'crashed': False,
-                        'current': True,
-                        'name': 'Main Thread',
-                        'stacktrace': {
-                            'frames': [
-                                {
-                                    'filename': 'foo/baz.c',
-                                    'function': 'main',
-                                    'lineno': 1,
-                                    'in_app': True,
-                                }
-                            ]
-                        },
-                        'raw_stacktrace': {
-                            'frames': [
-                                {
-                                    'filename': None,
-                                    'lineno': 1,
-                                    'function': '<redacted>',
-                                    'in_app': True,
-                                }
-                            ]
-                        },
-                    }, {
-                        'id': 43,
-                        'crashed': False,
-                        'current': True,
-                        'name': 'Main Thread',
-                        'stacktrace': {
-                            'frames': [
-                                {
-                                    'filename': 'foo/baz.c',
-                                    'function': 'main',
-                                    'lineno': 1,
-                                    'in_app': True,
-                                }
-                            ]
-                        },
-                        'raw_stacktrace': {
-                            'frames': [
-                                {
-                                    'filename': None,
-                                    'lineno': 1,
-                                    'function': '<redacted>',
-                                    'in_app': True,
-                                }
-                            ]
-                        },
-                    }
-                ]
-            )
-        )
-        assert interface.compute_hashes() == []
