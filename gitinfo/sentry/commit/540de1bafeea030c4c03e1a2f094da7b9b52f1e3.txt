commit 540de1bafeea030c4c03e1a2f094da7b9b52f1e3
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Thu Jan 19 12:38:32 2017 +0100

    Version number binary images (#4788)
    
    * Add version number to binary images
    
    * Add CHANGES entry

diff --git a/CHANGES b/CHANGES
index 0343e2cc8d..24d64cccca 100644
--- a/CHANGES
+++ b/CHANGES
@@ -9,6 +9,7 @@ Version 8.13 (Unreleased)
 - Added the ability to download an apple compatible crash report for cocoa events.
 - Add memory and storage information for apple devices
 - The legacy API keys feature is now disabled by default.
+- Show Images Loaded section for cocoa events with version number.
 
 Version 8.12
 ------------
diff --git a/src/sentry/interfaces/debug_meta.py b/src/sentry/interfaces/debug_meta.py
index 327c99e8c1..3315f03e14 100644
--- a/src/sentry/interfaces/debug_meta.py
+++ b/src/sentry/interfaces/debug_meta.py
@@ -21,15 +21,22 @@ def process_apple_image(image):
     def _addr(x):
         return '0x%x' % parse_addr(x)
     try:
-        return {
+        apple_image = {
             'cpu_type': image['cpu_type'],
             'cpu_subtype': image['cpu_subtype'],
             'image_addr': _addr(image['image_addr']),
             'image_size': image['image_size'],
             'image_vmaddr': _addr(image.get('image_vmaddr') or 0),
             'name': image['name'],
-            'uuid': image['uuid'],
+            'uuid': image['uuid']
         }
+        if image.get('major_version') is not None:
+            apple_image['major_version'] = image['major_version']
+        if image.get('minor_version') is not None:
+            apple_image['minor_version'] = image['minor_version']
+        if image.get('revision_version') is not None:
+            apple_image['revision_version'] = image['revision_version']
+        return apple_image
     except KeyError as e:
         raise InterfaceValidationError('Missing value for apple image: %s'
                                        % e.args[0])
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
index 0b8b957a4c..05a7d9e487 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
@@ -12,17 +12,42 @@ const DebugMetaInterface = React.createClass({
     data: React.PropTypes.object.isRequired
   },
 
+  getImageDetail(img, evt) {
+    let name = img.name.split('/').pop();
+
+    if (name == 'dyld_sim')
+      return null; // this is only for simulator builds
+
+    let version = null;
+
+    if (Number.isInteger(img.major_version) &&
+      Number.isInteger(img.minor_version) &&
+      Number.isInteger(img.revision_version)) {
+      if (img.major_version == 0 &&
+        img.minor_version == 0 &&
+        img.revision_version == 0) { // we show the version
+        version = `${evt.release.version}`;
+      } else
+        version = `${img.major_version}.${img.minor_version}.${img.revision_version}`;
+    } else
+      version = img.uuid;
+
+    if (version)
+      return [name, version];
+
+    return null;
+  },
+
   render() {
     let data = this.props.data;
-
-    // TODO(hazat): don't use image.uuid should be version number
-    // as soon as this is implemented in KSCrash
     let images = data.images.map(
-        (image) => [image.name.split('/').pop(), image.uuid]
-    );
+        (img) => this.getImageDetail(img, this.props.event)
+    ).filter(img => img); // removes null values
 
-    return (
-      <div>
+    let result = null;
+
+    if (images.length > 0) {
+      result = (<div>
         <EventDataSection
             group={this.props.group}
             event={this.props.event}
@@ -32,8 +57,10 @@ const DebugMetaInterface = React.createClass({
                 <KeyValueList data={images} isSorted={false} />
             </ClippedBox>
         </EventDataSection>
-      </div>
-    );
+      </div>);
+    }
+
+    return result;
   }
 });
 
