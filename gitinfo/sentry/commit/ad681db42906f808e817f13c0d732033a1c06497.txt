commit ad681db42906f808e817f13c0d732033a1c06497
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 4 19:26:02 2014 -0700

    Update date handling

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 6093cb05c6..b26567ffce 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -235,6 +235,8 @@ def process_data_timestamp(data, current_datetime=None):
     if data['timestamp'] < current_datetime - timedelta(days=30):
         raise InvalidTimestamp('Invalid value for timestamp (too old): %r' % data['timestamp'])
 
+    data['timestamp'] = float(data['timestamp'].strftime('%s'))
+
     return data
 
 
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 54da6bb88e..5a2966b662 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -10,17 +10,16 @@ from __future__ import absolute_import
 
 import hashlib
 import logging
+import six
 import warnings
 import uuid
 
+from datetime import datetime
 from django.conf import settings
 from django.contrib.auth.models import UserManager
 from django.db import transaction, IntegrityError
 from django.utils import timezone
 from django.utils.datastructures import SortedDict
-
-import six
-
 from raven.utils.encoding import to_string
 
 from sentry import app
@@ -125,13 +124,16 @@ class GroupManager(BaseManager):
         if not timestamp:
             timestamp = timezone.now()
 
-        # We must convert date to local time so Django doesn't mess it up
-        # based on TIME_ZONE
-        if settings.TIME_ZONE:
-            if not timezone.is_aware(timestamp):
-                timestamp = timestamp.replace(tzinfo=timezone.utc)
-        elif timezone.is_aware(timestamp):
-            timestamp = timestamp.replace(tzinfo=None)
+        if isinstance(timestamp, datetime):
+            # We must convert date to local time so Django doesn't mess it up
+            # based on TIME_ZONE
+            if settings.TIME_ZONE:
+                if not timezone.is_aware(timestamp):
+                    timestamp = timestamp.replace(tzinfo=timezone.utc)
+            elif timezone.is_aware(timestamp):
+                timestamp = timestamp.replace(tzinfo=None)
+            timestamp = float(timestamp.strftime('%s'))
+
         data['timestamp'] = timestamp
 
         if not data.get('event_id'):
@@ -214,10 +216,12 @@ class GroupManager(BaseManager):
         logger_name = data.pop('logger')
         server_name = data.pop('server_name')
         site = data.pop('site')
-        date = data.pop('timestamp')
         checksum = data.pop('checksum')
         platform = data.pop('platform')
 
+        date = datetime.fromtimestamp(data.pop('timestamp'))
+        date = date.replace(tzinfo=timezone.utc)
+
         kwargs = {
             'message': message,
             'platform': platform,
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index d0e9bb333e..5a3b2518f2 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -87,7 +87,7 @@ class ProcessDataTimestampTest(BaseAPITest):
             'timestamp': '2012-01-01T10:30:45'
         }, current_datetime=d)
         self.assertTrue('timestamp' in data)
-        self.assertEquals(data['timestamp'], d)
+        self.assertEquals(data['timestamp'], 1325413845.0)
 
     def test_iso_timestamp_with_ms(self):
         d = datetime(2012, 01, 01, 10, 30, 45, 434000)
@@ -95,7 +95,7 @@ class ProcessDataTimestampTest(BaseAPITest):
             'timestamp': '2012-01-01T10:30:45.434'
         }, current_datetime=d)
         self.assertTrue('timestamp' in data)
-        self.assertEquals(data['timestamp'], d)
+        self.assertEquals(data['timestamp'], 1325413845.0)
 
     def test_timestamp_iso_timestamp_with_Z(self):
         d = datetime(2012, 01, 01, 10, 30, 45)
@@ -103,7 +103,7 @@ class ProcessDataTimestampTest(BaseAPITest):
             'timestamp': '2012-01-01T10:30:45Z'
         }, current_datetime=d)
         self.assertTrue('timestamp' in data)
-        self.assertEquals(data['timestamp'], d)
+        self.assertEquals(data['timestamp'], 1325413845.0)
 
     def test_invalid_timestamp(self):
         self.assertRaises(InvalidTimestamp, process_data_timestamp, {
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 57e8f2f6b0..f4ec6355f3 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -2,10 +2,8 @@
 
 from __future__ import absolute_import
 
-import datetime
 import mock
 
-from django.utils import timezone
 from sentry.constants import MEMBER_OWNER, MEMBER_USER
 from sentry.manager import get_checksum_from_event
 from sentry.models import (
@@ -43,15 +41,6 @@ class SentryManagerTest(TestCase):
         self.assertEquals(event.message, 'foo')
         self.assertEquals(event.project_id, 1)
 
-    def test_valid_timestamp_without_tz(self):
-        # TODO: this doesn't error, but it will throw a warning. What should we do?
-        with self.settings(USE_TZ=True):
-            date = datetime.datetime.utcnow()
-            event = Group.objects.from_kwargs(1, message='foo', timestamp=date)
-            self.assertEquals(event.message, 'foo')
-            self.assertEquals(event.project_id, 1)
-            self.assertEquals(event.datetime, date.replace(tzinfo=timezone.utc))
-
     @mock.patch('sentry.manager.send_group_processors', mock.Mock())
     @mock.patch('sentry.manager.GroupManager.add_tags')
     def test_tags_as_list(self, add_tags):
