commit 3b992a26a2c3ba7d569d935169bc3353fd297ca2
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri May 6 00:19:19 2016 +0200

    Implemented basic device info support.

diff --git a/src/sentry/interfaces/device.py b/src/sentry/interfaces/device.py
index d84f7638b6..55b96a6955 100644
--- a/src/sentry/interfaces/device.py
+++ b/src/sentry/interfaces/device.py
@@ -41,9 +41,8 @@ class Device(Interface):
             'name': name,
             'version': version,
             'build': build,
-            'data': trim_dict(data),
+            'data': trim_dict(extra_data),
         }
-        kwargs['data'] = trim_dict(data)
         return cls(**kwargs)
 
     def get_api_context(self, is_public=False):
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 9df9643859..e88676c8ae 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -5,6 +5,7 @@ import posixpath
 from sentry.models import Project
 from sentry.plugins import Plugin2
 from sentry.lang.native.symbolizer import Symbolizer, have_symsynd
+from sentry.models.dsymfile import SDK_MAPPING
 
 
 def exception_from_apple_error_or_diagnosis(error, diagnosis=None):
@@ -95,6 +96,29 @@ def inject_apple_backtrace(data, frames, diagnosis=None, error=None,
     data['sentry.interfaces.Stacktrace'] = stacktrace
 
 
+def inject_apple_device_data(data, system):
+    container = data.setdefault('device', {})
+    try:
+        container['name'] = SDK_MAPPING[system['system_name']]
+    except LookupError:
+        container['name'] = system.get('system_name') or 'Generic Apple'
+
+    if 'system_version' in system:
+        container['version'] = system['system_version']
+    if 'os_version' in system:
+        container['build'] = system['os_version']
+
+    extra = container.setdefault('data', {})
+    if 'cpu_arch' in system:
+        extra['cpu_arch'] = system['cpu_arch']
+    if 'model' in system:
+        extra['device_model_id'] = system['model']
+    if 'machine' in system:
+        extra['device_model'] = system['machine']
+    if 'kernel_version' in system:
+        extra['kernel_version'] = system['kernel_version']
+
+
 def preprocess_apple_crash_event(data):
     crash_report = data.get('sentry.interfaces.AppleCrashReport')
     if crash_report is None:
@@ -121,6 +145,9 @@ def preprocess_apple_crash_event(data):
         inject_apple_backtrace(data, bt, crash.get('diagnosis'),
                                crash.get('error'), system)
 
+    if system:
+        inject_apple_device_data(data, system)
+
     return data
 
 
diff --git a/src/sentry/static/sentry/app/components/events/device.jsx b/src/sentry/static/sentry/app/components/events/device.jsx
new file mode 100644
index 0000000000..c869fb853f
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/device.jsx
@@ -0,0 +1,62 @@
+import React from 'react';
+
+import GroupEventDataSection from './eventDataSection';
+import PropTypes from '../../proptypes';
+import {t} from '../../locale';
+
+const DeviceInterface = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    event: PropTypes.Event.isRequired
+  },
+
+  getInitialState() {
+    return {};
+  },
+
+  render() {
+    let {group, event} = this.props;
+    let data = event.device;
+    let extras = Object.keys(data.data || {}).map((key) => {
+      let value = data.data[key];
+      return (
+        <tr key={key}>
+          <td className="key">{key}</td>
+          <td className="value"><pre>{value}</pre></td>
+        </tr>
+      );
+    });
+
+    return (
+      <GroupEventDataSection
+        group={group}
+        event={event}
+        type="device"
+        title={t('Device')}
+        wrapTitle={true}>
+        <table className="table key-value">
+          <tbody>
+            {data.name &&
+              <tr>
+                <td className="key">Name</td>
+                <td className="value"><pre>{data.name}</pre></td>
+              </tr>}
+            {data.version && 
+              <tr>
+                <td className="key">Version</td>
+                <td className="value"><pre>{data.version}</pre></td>
+              </tr>}
+            {data.build &&
+              <tr>
+                <td className="key">Build</td>
+                <td className="value"><pre>{data.build}</pre></td>
+              </tr>}
+            {extras}
+          </tbody>
+        </table>
+      </GroupEventDataSection>
+    );
+  }
+});
+
+export default DeviceInterface;
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index f114a4c081..4592b4a5d8 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -8,6 +8,7 @@ import EventPackageData from './packageData';
 import EventTags from './eventTags';
 import EventMessage from './message';
 import EventSdk from './sdk';
+import EventDevice from './device';
 import EventUser from './user';
 import EventUserReport from './userReport';
 import PropTypes from '../../proptypes';
@@ -122,6 +123,11 @@ const EventEntries = React.createClass({
             group={group}
             event={evt} />
         }
+        {!utils.objectIsEmpty(evt.device) &&
+          <EventDevice
+            group={group}
+            event={evt} />
+        }
         {!utils.objectIsEmpty(evt.sdk) &&
           <EventSdk
             group={group}
