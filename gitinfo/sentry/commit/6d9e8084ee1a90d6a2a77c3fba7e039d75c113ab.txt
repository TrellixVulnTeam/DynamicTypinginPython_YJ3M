commit 6d9e8084ee1a90d6a2a77c3fba7e039d75c113ab
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Sep 23 17:57:49 2015 -0700

    Return correct events for next/prev with identical datetimes
    
    Fixes GH-1830

diff --git a/src/sentry/api/endpoints/event_details.py b/src/sentry/api/endpoints/event_details.py
index 3bd907adc3..b11d8609d1 100644
--- a/src/sentry/api/endpoints/event_details.py
+++ b/src/sentry/api/endpoints/event_details.py
@@ -44,25 +44,31 @@ class EventDetailsEndpoint(Endpoint):
         # HACK(dcramer): work around lack of unique sorting on datetime
         base_qs = Event.objects.filter(
             group=event.group_id,
-        ).exclude(id=event.id)
+        )
         try:
             next_event = sorted(
                 base_qs.filter(
-                    datetime__gte=event.datetime
+                    id__gt=event.id,
+                    datetime__gte=event.datetime,
                 ).order_by('datetime')[0:5],
-                key=lambda x: (x.datetime, x.id)
+                key=lambda x: (x.datetime, x.id),
             )[0]
+            if next_event.id < event.id:
+                next_event = None
         except IndexError:
             next_event = None
 
         try:
             prev_event = sorted(
                 base_qs.filter(
+                    id__lt=event.id,
                     datetime__lte=event.datetime,
                 ).order_by('-datetime')[0:5],
                 key=lambda x: (x.datetime, x.id),
-                reverse=True
+                reverse=True,
             )[0]
+            if prev_event.id > event.id:
+                prev_event = None
         except IndexError:
             prev_event = None
 
diff --git a/tests/sentry/api/endpoints/test_event_details.py b/tests/sentry/api/endpoints/test_event_details.py
index 706ebff617..cc29f85571 100644
--- a/tests/sentry/api/endpoints/test_event_details.py
+++ b/tests/sentry/api/endpoints/test_event_details.py
@@ -40,6 +40,63 @@ class EventDetailsTest(APITestCase):
         assert response.data['groupID'] == group.id
         assert not response.data['userReport']
 
+    def test_identical_datetime(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+        created = datetime(2013, 8, 13, 3, 8, 24)
+        prev_event = self.create_event(
+            event_id='a',
+            group=group,
+            datetime=created,
+        )
+        cur_event = self.create_event(
+            event_id='b',
+            group=group,
+            datetime=created,
+        )
+        next_event = self.create_event(
+            event_id='c',
+            group=group,
+            datetime=created,
+        )
+
+        url = reverse('sentry-api-0-event-details', kwargs={
+            'event_id': cur_event.id,
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == str(cur_event.id)
+        assert response.data['nextEventID'] == str(next_event.id)
+        assert response.data['previousEventID'] == str(prev_event.id)
+        assert response.data['groupID'] == group.id
+        assert not response.data['userReport']
+
+        url = reverse('sentry-api-0-event-details', kwargs={
+            'event_id': prev_event.id,
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == str(prev_event.id)
+        assert response.data['nextEventID'] == str(cur_event.id)
+        assert response.data['previousEventID'] is None
+        assert response.data['groupID'] == group.id
+        assert not response.data['userReport']
+
+        url = reverse('sentry-api-0-event-details', kwargs={
+            'event_id': next_event.id,
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == str(next_event.id)
+        assert response.data['nextEventID'] is None
+        assert response.data['previousEventID'] == str(cur_event.id)
+        assert response.data['groupID'] == group.id
+        assert not response.data['userReport']
+
     def test_user_report(self):
         self.login_as(user=self.user)
 
