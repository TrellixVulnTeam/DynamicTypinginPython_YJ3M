commit 19d90bb8f04263b0e36576e9be1250c56b6e5324
Author: Matte Noble <me@mattenoble.com>
Date:   Tue Jan 29 13:05:45 2019 -0800

    fix(app-platform): Don't raise on every retry (#11767)
    
    Celery by default uses exceptions to control retry logic, which logs an
    event to Sentry on every retry.
    
    This changes to not throw an exception during retry. Hopefully this
    decreases the number of unnecessary errors we see.

diff --git a/src/sentry/receivers/sentry_apps.py b/src/sentry/receivers/sentry_apps.py
index 520bdf6c67..a6b8604d8d 100644
--- a/src/sentry/receivers/sentry_apps.py
+++ b/src/sentry/receivers/sentry_apps.py
@@ -11,7 +11,7 @@ from sentry.signals import (
     resolved_with_commit,
 )
 from sentry.tasks.sentry_apps import (
-    process_resource_change,
+    process_resource_change_bound,
     workflow_notification,
 )
 
@@ -24,7 +24,7 @@ def issue_saved(sender, instance, created, **kwargs):
     if not created:
         return
 
-    process_resource_change.delay(
+    process_resource_change_bound.delay(
         action='created',
         sender=sender.__name__,
         instance_id=issue.id,
diff --git a/src/sentry/tasks/sentry_apps.py b/src/sentry/tasks/sentry_apps.py
index 9a96ac48c2..41a575c35b 100644
--- a/src/sentry/tasks/sentry_apps.py
+++ b/src/sentry/tasks/sentry_apps.py
@@ -103,9 +103,7 @@ def send_alert_event(event, rule, sentry_app_id):
     )
 
 
-@instrumented_task('sentry.tasks.process_resource_change', **TASK_OPTIONS)
-@retry()
-def process_resource_change(action, sender, instance_id, *args, **kwargs):
+def _process_resource_change(action, sender, instance_id, retryer=None, *args, **kwargs):
     # The class is serialized as a string when enqueueing the class.
     model = TYPES[sender]
 
@@ -113,6 +111,10 @@ def process_resource_change(action, sender, instance_id, *args, **kwargs):
     # Issue. Looks up the human name for the model. Defaults to the model name.
     name = RESOURCE_RENAMES.get(model.__name__, model.__name__.lower())
 
+    # By default, use Celery's `current` but allow a value to be passed for the
+    # bound Task.
+    retryer = retryer or current
+
     # We may run into a race condition where this task executes before the
     # transaction that creates the Group has committed.
     try:
@@ -120,7 +122,7 @@ def process_resource_change(action, sender, instance_id, *args, **kwargs):
     except model.DoesNotExist as e:
         # Explicitly requeue the task, so we don't report this to Sentry until
         # we hit the max number of retries.
-        return current.retry(exc=e)
+        return retryer.retry(exc=e)
 
     event = '{}.{}'.format(name, action)
 
@@ -141,6 +143,18 @@ def process_resource_change(action, sender, instance_id, *args, **kwargs):
         send_webhooks(installation, event, data=serialize(instance))
 
 
+@instrumented_task('sentry.tasks.process_resource_change', **TASK_OPTIONS)
+@retry()
+def process_resource_change(action, sender, instance_id, *args, **kwargs):
+    _process_resource_change(action, sender, instance_id, *args, **kwargs)
+
+
+@instrumented_task('sentry.tasks.process_resource_change_bound', bind=True, **TASK_OPTIONS)
+@retry()
+def process_resource_change_bound(self, action, sender, instance_id, *args, **kwargs):
+    _process_resource_change(action, sender, instance_id, retryer=self, *args, **kwargs)
+
+
 @instrumented_task(name='sentry.tasks.sentry_apps.installation_webhook', **TASK_OPTIONS)
 @retry(on=(RequestException, ))
 def installation_webhook(installation_id, user_id, *args, **kwargs):
diff --git a/tests/sentry/receivers/test_sentry_apps.py b/tests/sentry/receivers/test_sentry_apps.py
index c65eb54957..fff38da00d 100644
--- a/tests/sentry/receivers/test_sentry_apps.py
+++ b/tests/sentry/receivers/test_sentry_apps.py
@@ -7,7 +7,7 @@ from sentry.testutils import APITestCase, TestCase
 from sentry.testutils.helpers.faux import faux
 
 
-@patch('sentry.tasks.sentry_apps.process_resource_change.delay')
+@patch('sentry.tasks.sentry_apps.process_resource_change_bound.delay')
 class TestIssueSaved(TestCase):
     def test_processes_created_issues(self, delay):
         issue = self.create_group()
diff --git a/tests/sentry/tasks/test_sentry_apps.py b/tests/sentry/tasks/test_sentry_apps.py
index 1b334416ee..85a89b779e 100644
--- a/tests/sentry/tasks/test_sentry_apps.py
+++ b/tests/sentry/tasks/test_sentry_apps.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import six
 
+from celery import Task
 from collections import namedtuple
 from django.core.urlresolvers import reverse
 from mock import patch
@@ -16,6 +17,7 @@ from sentry.tasks.sentry_apps import (
     send_alert_event,
     notify_sentry_app,
     process_resource_change,
+    process_resource_change_bound,
     installation_webhook,
     workflow_notification,
 )
@@ -206,6 +208,15 @@ class TestProcessResourceChange(TestCase):
 
         assert len(safe_urlopen.mock_calls) == 0
 
+    @patch('sentry.tasks.sentry_apps._process_resource_change')
+    def test_process_resource_change_bound_passes_retry_object(self, process, safe_urlopen):
+        group = self.create_group(project=self.project)
+
+        process_resource_change_bound('created', 'Group', group.id)
+
+        task = faux(process).kwargs['retryer']
+        assert isinstance(task, Task)
+
 
 @patch('sentry.mediators.sentry_app_installations.InstallationNotifier.run')
 class TestInstallationWebhook(TestCase):
