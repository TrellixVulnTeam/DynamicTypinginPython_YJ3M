commit 20026c984f0a2f5871b3d18031d843cc24a0125c
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Tue Apr 17 15:09:11 2018 -0700

    feat(api): Add project avatar settings endpoint

diff --git a/src/sentry/api/endpoints/project_avatar.py b/src/sentry/api/endpoints/project_avatar.py
new file mode 100644
index 0000000000..375e81b167
--- /dev/null
+++ b/src/sentry/api/endpoints/project_avatar.py
@@ -0,0 +1,10 @@
+from __future__ import absolute_import
+
+from sentry.api.bases.avatar import AvatarMixin
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.models import ProjectAvatar
+
+
+class ProjectAvatarEndpoint(AvatarMixin, ProjectEndpoint):
+    object_type = 'project'
+    model = ProjectAvatar
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index ac1bb41284..f536ac2f41 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -17,8 +17,8 @@ from sentry.auth.superuser import is_active_superuser
 from sentry.constants import StatsPeriod
 from sentry.digests import backend as digests
 from sentry.models import (
-    Project, ProjectBookmark, ProjectOption, ProjectPlatform, ProjectStatus, ProjectTeam,
-    Release, UserOption, DEFAULT_SUBJECT_TEMPLATE
+    Project, ProjectAvatar, ProjectBookmark, ProjectOption, ProjectPlatform,
+    ProjectStatus, ProjectTeam, Release, UserOption, DEFAULT_SUBJECT_TEMPLATE
 )
 from sentry.utils.data_filters import FilterTypes
 
@@ -130,6 +130,7 @@ class ProjectSerializer(Serializer):
         else:
             stats = None
 
+        avatars = {a.project_id: a for a in ProjectAvatar.objects.filter(project__in=item_list)}
         result = self.get_access_by_project(item_list, user)
         for item in item_list:
             result[item].update({
@@ -139,6 +140,7 @@ class ProjectSerializer(Serializer):
                     (item.id, 'mail:alert'),
                     default_subscribe,
                 )),
+                'avatar': avatars.get(item.id),
             })
             if stats:
                 result[item]['stats'] = stats[item.id]
@@ -160,6 +162,14 @@ class ProjectSerializer(Serializer):
 
         status_label = STATUS_LABELS.get(obj.status, 'unknown')
 
+        if attrs.get('avatar'):
+            avatar = {
+                'avatarType': attrs['avatar'].get_avatar_type_display(),
+                'avatarUuid': attrs['avatar'].ident if attrs['avatar'].file else None
+            }
+        else:
+            avatar = {'avatarType': 'letter_avatar', 'avatarUuid': None}
+
         context = {
             'id': six.text_type(obj.id),
             'slug': obj.slug,
@@ -175,6 +185,7 @@ class ProjectSerializer(Serializer):
             'isInternal': obj.is_internal_project(),
             'isMember': attrs['is_member'],
             'hasAccess': attrs['has_access'],
+            'avatar': avatar,
         }
         if 'stats' in attrs:
             context['stats'] = attrs['stats']
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 73d2569865..2acdba68df 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -77,6 +77,7 @@ from .endpoints.organization_stats import OrganizationStatsEndpoint
 from .endpoints.organization_teams import OrganizationTeamsEndpoint
 from .endpoints.organization_user_issues import OrganizationUserIssuesEndpoint
 from .endpoints.organization_user_issues_search import OrganizationUserIssuesSearchEndpoint
+from .endpoints.project_avatar import ProjectAvatarEndpoint
 from .endpoints.project_details import ProjectDetailsEndpoint
 from .endpoints.project_transfer import ProjectTransferEndpoint
 from .endpoints.project_create_sample import ProjectCreateSampleEndpoint
@@ -552,6 +553,11 @@ urlpatterns = patterns(
         ProjectDetailsEndpoint.as_view(),
         name='sentry-api-0-project-details'
     ),
+    url(
+        r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/avatar/$',
+        ProjectAvatarEndpoint.as_view(),
+        name='sentry-api-0-project-avatar'
+    ),
     url(
         r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/create-sample/$',
         ProjectCreateSampleEndpoint.as_view(),
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index 66f7bbe9d1..d2e5377e17 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -45,7 +45,7 @@ class OrganizationDetailsTest(APITestCase):
         )
         # TODO(dcramer): we need to pare this down -- lots of duplicate queries
         # for membership data
-        with self.assertNumQueries(24, using='default'):
+        with self.assertNumQueries(25, using='default'):
             from django.db import connections
             response = self.client.get(url, format='json')
             print(connections['default'].queries)
diff --git a/tests/sentry/api/endpoints/test_project_avatar.py b/tests/sentry/api/endpoints/test_project_avatar.py
new file mode 100644
index 0000000000..741b79b47c
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_avatar.py
@@ -0,0 +1,90 @@
+from __future__ import absolute_import
+
+import six
+
+from base64 import b64encode
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import ProjectAvatar
+from sentry.testutils import APITestCase
+
+
+class ProjectAvatarTest(APITestCase):
+    def test_get(self):
+        project = self.project  # force creation
+        self.login_as(user=self.user)
+        url = reverse(
+            'sentry-api-0-project-avatar',
+            kwargs={
+                'organization_slug': project.organization.slug,
+                'project_slug': project.slug,
+            }
+        )
+        response = self.client.get(url)
+        assert response.status_code == 200
+        assert response.data['id'] == six.text_type(project.id)
+        assert response.data['avatar']['avatarType'] == 'letter_avatar'
+        assert response.data['avatar']['avatarUuid'] is None
+
+    def test_upload(self):
+        project = self.project  # force creation
+        self.login_as(user=self.user)
+        url = reverse(
+            'sentry-api-0-project-avatar',
+            kwargs={
+                'organization_slug': project.organization.slug,
+                'project_slug': project.slug,
+            }
+        )
+        response = self.client.put(
+            url,
+            data={
+                'avatar_type': 'upload',
+                'avatar_photo': b64encode(self.load_fixture('avatar.jpg')),
+            },
+            format='json'
+        )
+
+        avatar = ProjectAvatar.objects.get(project=project)
+        assert response.status_code == 200, response.content
+        assert avatar.get_avatar_type_display() == 'upload'
+        assert avatar.file
+
+    def test_put_bad(self):
+        project = self.project  # force creation
+        ProjectAvatar.objects.create(project=project)
+        self.login_as(user=self.user)
+        url = reverse(
+            'sentry-api-0-project-avatar',
+            kwargs={
+                'organization_slug': project.organization.slug,
+                'project_slug': project.slug,
+            }
+        )
+        response = self.client.put(url, data={'avatar_type': 'upload'}, format='json')
+
+        avatar = ProjectAvatar.objects.get(project=project)
+        assert response.status_code == 400
+        assert avatar.get_avatar_type_display() == 'letter_avatar'
+
+        response = self.client.put(url, data={'avatar_type': 'foo'}, format='json')
+        assert response.status_code == 400
+        assert avatar.get_avatar_type_display() == 'letter_avatar'
+
+    def test_put_forbidden(self):
+        project = self.project  # force creation
+        user = self.create_user(email='a@example.com')
+
+        self.login_as(user=user)
+
+        url = reverse(
+            'sentry-api-0-project-avatar',
+            kwargs={
+                'organization_slug': project.organization.slug,
+                'project_slug': project.slug,
+            }
+        )
+        response = self.client.put(url, data={'avatar_type': 'gravatar'}, format='json')
+
+        assert response.status_code == 403
