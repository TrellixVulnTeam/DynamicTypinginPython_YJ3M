commit 7bc10aeaf00cf954f61ddcbaed9b2317437f6aec
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Oct 11 17:29:06 2016 +0200

    Added basic support for raw stacktraces for cocoa

diff --git a/src/sentry/interfaces/threads.py b/src/sentry/interfaces/threads.py
index 33aeed7340..77bfc61752 100644
--- a/src/sentry/interfaces/threads.py
+++ b/src/sentry/interfaces/threads.py
@@ -7,6 +7,14 @@ from sentry.utils.safe import trim
 __all__ = ('Threads',)
 
 
+def get_stacktrace(value):
+    # Special case: if the thread has no frames we set the
+    # stacktrace to none.  Otherwise this will fail really
+    # badly.
+    if value and value.get('frames'):
+        return Stacktrace.to_python(value, slim_frames=True)
+
+
 class Threads(Interface):
     score = 1900
 
@@ -15,18 +23,9 @@ class Threads(Interface):
         threads = []
 
         for thread in data.get('values') or ():
-            stacktrace = thread.get('stacktrace')
-            if stacktrace is not None:
-                # Special case: if the thread has no frames we set the
-                # stacktrace to none.  Otherwise this will fail really
-                # badly.
-                if not stacktrace.get('frames'):
-                    stacktrace = None
-                else:
-                    stacktrace = Stacktrace.to_python(stacktrace,
-                                                      slim_frames=True)
             threads.append({
-                'stacktrace': stacktrace,
+                'stacktrace': get_stacktrace(thread.get('stacktrace')),
+                'raw_stacktrace': get_stacktrace(thread.get('raw_stacktrace')),
                 'id': trim(thread.get('id'), 40),
                 'crashed': bool(thread.get('crashed')),
                 'current': bool(thread.get('current')),
@@ -46,6 +45,8 @@ class Threads(Interface):
             }
             if data['stacktrace']:
                 rv['stacktrace'] = data['stacktrace'].to_json()
+            if data['raw_stacktrace']:
+                rv['raw_stacktrace'] = data['raw_stacktrace'].to_json()
             return rv
 
         return {
@@ -60,10 +61,14 @@ class Threads(Interface):
                 'crashed': data['crashed'],
                 'name': data['name'],
                 'stacktrace': None,
+                'rawStacktrace': None,
             }
             if data['stacktrace']:
                 rv['stacktrace'] = data['stacktrace'].get_api_context(
                     is_public=is_public)
+            if data['raw_stacktrace']:
+                rv['rawStacktrace'] = data['raw_stacktrace'].get_api_context(
+                    is_public=is_public)
             return rv
 
         return {
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index acc9982149..0ce3b263ab 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -351,7 +351,7 @@ def resolve_frame_symbols(data):
 
     errors = []
     referenced_images = find_stacktrace_referenced_images(
-        debug_images, stacktraces)
+        debug_images, [x[0] for x in stacktraces])
     sym = Symbolizer(project, debug_images,
                      referenced_images=referenced_images)
 
@@ -371,12 +371,14 @@ def resolve_frame_symbols(data):
 
     processed_frames = []
     with sym:
-        for stacktrace in stacktraces:
+        for stacktrace, container in stacktraces:
+            store_raw = False
             for idx, frame in enumerate(stacktrace['frames']):
                 if 'image_addr' not in frame or \
                    'instruction_addr' not in frame or \
                    'symbol_addr' not in frame:
                     continue
+                store_raw = True
                 try:
                     sfrm = sym.symbolize_frame({
                         'object_name': frame.get('package'),
@@ -413,6 +415,12 @@ def resolve_frame_symbols(data):
                         'error': 'The symbolicator encountered an internal failure',
                     })
 
+            # Remember the raw stacktrace.
+            if store_raw and container is not None:
+                container['raw_stacktrace'] = {
+                    'frames': stacktrace['frames'],
+                }
+
     if errors:
         data.setdefault('errors', []).extend(errors)
 
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index 6ee9f2dc2a..4ae017fe93 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -66,18 +66,18 @@ def find_all_stacktraces(data):
         for exc in exc_container['values']:
             stacktrace = exc.get('stacktrace')
             if stacktrace:
-                rv.append(stacktrace)
+                rv.append((stacktrace, exc))
 
     stacktrace = data.get('sentry.interfaces.Stacktrace')
     if stacktrace:
-        rv.append(stacktrace)
+        rv.append((stacktrace, None))
 
     threads = data.get('threads')
     if threads:
         for thread in threads['values']:
             stacktrace = thread.get('stacktrace')
             if stacktrace:
-                rv.append(stacktrace)
+                rv.append((stacktrace, thread))
 
     return rv
 
