commit 960af123fe18f6ae1638df9f03e86c0e4a222d28
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Nov 24 23:53:47 2012 -0800

    Basic registration view

diff --git a/src/sentry/conf/defaults.py b/src/sentry/conf/defaults.py
index d52481ca53..3a5c0f6d64 100644
--- a/src/sentry/conf/defaults.py
+++ b/src/sentry/conf/defaults.py
@@ -128,6 +128,11 @@ ALLOW_TEAM_CREATION = False
 # make projects public
 ALLOW_PUBLIC_PROJECTS = True
 
+# Should users be allowed to register an account? If this is disabled
+# accounts can only be created when someone is invited or added
+# manually.
+ALLOW_REGISTRATION = True
+
 # Instructs Sentry to utilize it's queue for background jobs. You will
 # need to ensure that you have workers running if you enable the queue.
 
diff --git a/src/sentry/templates/sentry/register.html b/src/sentry/templates/sentry/register.html
new file mode 100644
index 0000000000..60bdf3fb32
--- /dev/null
+++ b/src/sentry/templates/sentry/register.html
@@ -0,0 +1,62 @@
+{% extends "sentry/layout.html" %}
+
+{% load i18n %}
+
+{% block title %}{% trans "Login" %} | {{ block.super }}{% endblock %}
+
+{% block page_header_block %}{% endblock %}
+{% block bodyclass %}{% endblock %}
+
+{% block main %}
+    <section class="body">
+       {% if next %}
+            <p class="alert alert-info">{% trans "Please login to continue." %}</p>
+        {% endif %}
+
+        {% if form.non_field_errors %}
+            <div class="alert alert-block alert-error">
+                <ul>
+                    {% for error in form.non_field_errors %}
+                        <li>{{ error }}</li>
+                    {% endfor %}
+                </ul>
+            </div>
+        {% endif %}
+
+        <div class="row">
+            <div class="span6">
+                <form class="form-stacked" action="" method="post">
+                    <fieldset>
+                        <legend>Login with your Sentry account</legend>
+                    </fieldset>
+                    {% csrf_token %}
+                    <input type="hidden" name="next" value="{{ next }}" />
+
+                    {% for field in form %}
+                        {% include "sentry/partial/_form_field.html" %}
+                    {% endfor %}
+
+                    <fieldset class="form-actions">
+                        <button type="submit" class="btn btn-primary">{% trans "Login" %}</button>
+                    </fieldset>
+                </form>
+            </div>
+            {% if AUTH_PROVIDERS and SOCIAL_AUTH_CREATE_USERS %}
+                <div class="span6">
+                    <fieldset>
+                        <legend>Register using another service</legend>
+                    </fieldset>
+                    {% url sentry-account-settings-identities as identities_link %}
+                    <p>{% blocktrans with identities_link as link %}If you already have an account, you can associate a social identity in the
+                        <a href="{{ link }}">identities</a> page in your account settings (after you login).{% endblocktrans %}</p>
+                    <br>
+                    <ul class="auth-options">
+                        {% for engine in AUTH_PROVIDERS %}
+                            <li><a href="{% url socialauth_begin engine %}" class="auth-{{ engine }}">Sign in with {{ engine|title }}</a></li>
+                        {% endfor %}
+                    </ul>
+                </div>
+            {% endif %}
+        </div>
+    </section>
+{% endblock %}
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 469bbf19e4..9d1be64aba 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -15,6 +15,32 @@ from sentry.conf import settings
 from sentry.models import UserOption
 
 
+class RegistrationForm(forms.ModelForm):
+    email = forms.EmailField()
+    password = forms.CharField(widget=forms.PasswordInput)
+
+    class Meta:
+        fields = ('username', 'email')
+        model = User
+
+    def clean_email(self):
+        value = self.cleaned_data.get('email')
+        if not value:
+            return
+        # We dont really care about why people think they need multiple User accounts with the same
+        # email address -- dealwithit.jpg
+        if User.objects.filter(email__iexact=value).exists():
+            raise forms.ValidationError(_('An account is already registered with that email address.'))
+        return value
+
+    def save(self, commit=True):
+        user = super(RegistrationForm, self).save(commit=False)
+        user.set_password(self.cleaned_data['password'])
+        if commit:
+            user.save()
+        return user
+
+
 class NotificationSettingsForm(forms.Form):
     alert_email = forms.EmailField(help_text='Designate an alternative email address to send email notifications to.')
 
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 186671bc33..b478631cbc 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -21,7 +21,7 @@ from sentry.models import UserOption
 from sentry.plugins import plugins
 from sentry.web.decorators import login_required
 from sentry.web.forms.accounts import AccountSettingsForm, NotificationSettingsForm, \
-  AppearanceSettingsForm
+  AppearanceSettingsForm, RegistrationForm
 from sentry.web.helpers import render_to_response
 from sentry.utils.auth import get_auth_providers
 from sentry.utils.safe import safe_execute
@@ -54,6 +54,31 @@ def login(request):
     return render_to_response('sentry/login.html', context, request)
 
 
+@csrf_protect
+@never_cache
+@transaction.commit_on_success
+def register(request):
+    from sentry.conf import settings
+
+    if not settings.ALLOW_REGISTRATION:
+        return HttpResponseRedirect(reverse('sentry'))
+
+    form = RegistrationForm(request.POST or None)
+    if form.is_valid():
+        user = form.save()
+
+        # HACK: grab whatever the first backend is and assume it works
+        user.backend = dj_settings.AUTHENTICATION_BACKENDS[0]
+
+        login_user(request, user)
+
+        return login_redirect(request)
+
+    return render_to_response('sentry/register.html', {
+        'form': form,
+    }, request)
+
+
 @login_required
 def login_redirect(request):
     default = reverse('sentry')
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index a4da4e1466..ce032e3b5b 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -39,6 +39,7 @@ urlpatterns = patterns('',
     url(r'^login/$', accounts.login, name='sentry-login'),
     url(r'^login-redirect/$', accounts.login_redirect, name='sentry-login-redirect'),
     url(r'^logout/$', accounts.logout, name='sentry-logout'),
+    url(r'^register/$', accounts.register, name='sentry-register'),
     url(r'^account/settings/$', accounts.settings, name='sentry-account-settings'),
     url(r'^account/settings/appearance/$', accounts.appearance_settings, name='sentry-account-settings-appearance'),
     url(r'^account/settings/identities/$', accounts.list_identities, name='sentry-account-settings-identities'),
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 38d310a662..5e271ff6d8 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -7,7 +7,6 @@ import mock
 
 from django.utils import timezone
 from nose.plugins.skip import SkipTest
-from sentry.conf import settings
 from sentry.interfaces import Interface
 from sentry.models import Event, Group, Project, MessageCountByMinute, ProjectCountByMinute, \
   SearchDocument
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index f2b2720424..60942b95f5 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -17,17 +17,38 @@ class LoginTest(TestCase):
         user.save()
         return user
 
+    @fixture
+    def path(self):
+        return reverse('sentry-login')
+
     def test_auth(self):
         # load it once for test cookie
-        self.client.get(reverse('sentry-login'))
+        self.client.get(self.path)
 
-        resp = self.client.post(reverse('sentry-login'), {
+        resp = self.client.post(self.path, {
             'username': self.user.username,
             'password': 'foobar',
         })
         self.assertEquals(resp.status_code, 302)
 
 
+class RegisterTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-register')
+
+    def test_with_required_params(self):
+        resp = self.client.post(self.path, {
+            'username': 'test',
+            'email': 'test@example.com',
+            'password': 'foobar',
+        })
+        self.assertEquals(resp.status_code, 302)
+        user = User.objects.get(username='test')
+        self.assertEquals(user.email, 'test@example.com')
+        self.assertTrue(user.check_password('foobar'))
+
+
 class AppearanceSettingsTest(TestCase):
     @fixture
     def user(self):
