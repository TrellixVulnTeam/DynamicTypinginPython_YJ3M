commit 5073e21b4f1ebc7f6c0870af1bcf8fe75faafec9
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Nov 30 12:17:33 2015 -0800

    Some basic components for setup wizard

diff --git a/src/sentry/api/endpoints/system_options.py b/src/sentry/api/endpoints/system_options.py
new file mode 100644
index 0000000000..b72bee3997
--- /dev/null
+++ b/src/sentry/api/endpoints/system_options.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry import options
+from sentry.api.base import Endpoint
+from sentry.api.permissions import SuperuserPermission
+
+
+class SystemOptionsEndpoint(Endpoint):
+    permission_classes = (SuperuserPermission,)
+
+    option_names = set(['system.url-prefix', 'system.admin-email'])
+
+    def get(self, request):
+        results = {
+            k: options.get(k)
+            for k in self.option_names
+        }
+
+        return Response(results)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 07c552841c..27d39ba439 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -58,6 +58,7 @@ from .endpoints.release_files import ReleaseFilesEndpoint
 from .endpoints.release_file_details import ReleaseFileDetailsEndpoint
 from .endpoints.shared_group_details import SharedGroupDetailsEndpoint
 from .endpoints.system_health import SystemHealthEndpoint
+from .endpoints.system_options import SystemOptionsEndpoint
 from .endpoints.team_details import TeamDetailsEndpoint
 from .endpoints.team_groups_new import TeamGroupsNewEndpoint
 from .endpoints.team_groups_trending import TeamGroupsTrendingEndpoint
@@ -266,6 +267,9 @@ urlpatterns = patterns(
     url(r'^internal/health/$',
         SystemHealthEndpoint.as_view(),
         name='sentry-api-0-system-health'),
+    url(r'^internal/options/$',
+        SystemOptionsEndpoint.as_view(),
+        name='sentry-api-0-system-options'),
     url(r'^internal/stats/$',
         InternalStatsEndpoint.as_view(),
         name='sentry-api-0-internal-stats'),
diff --git a/src/sentry/static/sentry/app/components/forms/emailField.jsx b/src/sentry/static/sentry/app/components/forms/emailField.jsx
new file mode 100644
index 0000000000..8a797bf3f2
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/emailField.jsx
@@ -0,0 +1,7 @@
+import InputField from './inputField';
+
+export default class EmailField extends InputField {
+  getType() {
+    return 'email';
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/forms/formField.jsx b/src/sentry/static/sentry/app/components/forms/formField.jsx
new file mode 100644
index 0000000000..01dbf2deb7
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/formField.jsx
@@ -0,0 +1,14 @@
+import React from 'react';
+
+class FormField extends React.Component {
+  constructor(props) {
+    super(props);
+    this.state = {};
+  }
+}
+
+FormField.defaultProps = {
+  onChange: (value) => {},
+};
+
+export default FormField;
diff --git a/src/sentry/static/sentry/app/components/forms/index.jsx b/src/sentry/static/sentry/app/components/forms/index.jsx
new file mode 100644
index 0000000000..300960d7c6
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/index.jsx
@@ -0,0 +1,2 @@
+export {default as EmailField} from './emailField';
+export {default as TextField} from './textField';
diff --git a/src/sentry/static/sentry/app/components/forms/inputfield.jsx b/src/sentry/static/sentry/app/components/forms/inputfield.jsx
new file mode 100644
index 0000000000..001f8d66d1
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/inputfield.jsx
@@ -0,0 +1,35 @@
+import React from 'react';
+import FormField from './formField';
+
+export default class InputField extends FormField {
+  constructor(props) {
+    super(props);
+    this.state.value = props.defaultValue || '';
+  }
+
+  onChange(e) {
+    this.setState({
+      value: e.target.value,
+    }, () => {
+      this.props.onChange(this.state.value);
+    });
+  }
+
+  render() {
+    return (
+      <div className="control-group">
+        <div className="controls">
+          <label>{this.props.label}</label>
+          <input type={this.getType()}
+                 className="form-control"
+                 placeholder={this.props.placeholder}
+                 onChange={this.onChange.bind(this)}
+                 value={this.state.value} />
+          {this.props.help &&
+            <p className="help-block">{this.props.help}</p>
+          }
+        </div>
+      </div>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/forms/textField.jsx b/src/sentry/static/sentry/app/components/forms/textField.jsx
new file mode 100644
index 0000000000..6c2d5bdab3
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/textField.jsx
@@ -0,0 +1,7 @@
+import InputField from './inputField';
+
+export default class TextField extends InputField {
+  getType() {
+    return 'text';
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 043872e37a..31c99cd06d 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -2,10 +2,11 @@ import React from 'react';
 import ApiMixin from '../mixins/apiMixin';
 import Alerts from '../components/alerts';
 import AlertActions from '../actions/alertActions.jsx';
+import ConfigStore from '../stores/configStore';
 import Indicators from '../components/indicators';
+import InstallWizard from './installWizard';
 import LoadingIndicator from '../components/loadingIndicator';
 import OrganizationStore from '../stores/organizationStore';
-import ConfigStore from '../stores/configStore';
 
 const App = React.createClass({
   mixins: [
@@ -59,6 +60,18 @@ const App = React.createClass({
   },
 
   render() {
+    let user = ConfigStore.get('user');
+    let needsUpgrade = ConfigStore.get('needsUpgrade');
+
+    if (user.isSuperuser && needsUpgrade) {
+      return (
+        <div>
+          <Indicators className="indicators-container" />
+          <InstallWizard />
+        </div>
+      );
+    }
+
     if (this.state.loading) {
       return (
         <LoadingIndicator triangle={true}>
diff --git a/src/sentry/static/sentry/app/views/installWizard.jsx b/src/sentry/static/sentry/app/views/installWizard.jsx
new file mode 100644
index 0000000000..1f2dd8bd01
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/installWizard.jsx
@@ -0,0 +1,121 @@
+import React from 'react';
+import DocumentTitle from 'react-document-title';
+
+import {t} from '../locale';
+import api from '../api';
+import ConfigStore from '../stores/configStore';
+import LoadingIndicator from '../components/loadingIndicator';
+import {EmailField, TextField} from '../components/forms';
+
+const InstallWizardSettings = React.createClass({
+  getDefaultRootUrl() {
+    return `${document.location.protocol}//${document.location.host}`;
+  },
+
+  onFieldChange(name, value) {
+    this.setState({[name]: value});
+  },
+
+  render() {
+    let options = this.props.options;
+    let requiredOptions = ['system.url-perfix', 'system.admin-email'];
+    let missingOptions = new Set(requiredOptions.filter(option => options[option]));
+    let formValid = false;
+
+    return (
+      <div>
+        <p>Welcome to Sentry, yo! Complete setup by filling out the required
+          configuration.</p>
+
+        {missingOptions.has('system.url-prefix') &&
+          <TextField label={t('Root URL')} defaultValue={this.getDefaultRootUrl()}
+              placeholder="https://sentry.example.com"
+              help={t('The root web address which is used to communication with the Sentry backend.')}
+              onChange={this.onFieldChange.bind(this, 'system.url-prefix')} />
+        }
+
+        {missingOptions.has('system.admin-email') &&
+          <EmailField label={t('Admin Email')}
+              placeholder="admin@example.com"
+              help={t('The technical contact for this Sentry installation.')}
+              onChange={this.onFieldChange.bind(this, 'system.admin-email')} />
+        }
+
+        <div className="form-actions" style={{marginTop: 25}}>
+          <button className="btn btn-primary"
+                  disabled={!formValid}>{t('Continue')}</button>
+        </div>
+      </div>
+    );
+  }
+});
+
+const InstallWizard = React.createClass({
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      options: {},
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  remountComponent() {
+    this.setState(this.getInitialState(), this.fetchData);
+  },
+
+  fetchData(callback) {
+    api.request('/internal/options/', {
+      method: 'GET',
+      success: (data) => {
+        this.setState({
+          options: data,
+          loading: false,
+          error: false
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true
+        });
+      }
+    });
+  },
+
+  render() {
+    let {error, loading, options} = this.state;
+    let version = ConfigStore.get('version');
+    return (
+      <DocumentTitle title="Sentry Setup">
+        <div className="app">
+          <div className="container">
+            <div className="setup-wizard">
+              <h1>
+                <span>{t('Welcome to Sentry')}</span>
+                <small>{version.current}</small>
+              </h1>
+              {loading ?
+                <LoadingIndicator>
+                  Please wait while we loading configuration.
+                </LoadingIndicator>
+              : (error ?
+                <div className="loading-error">
+                  <span className="icon" />
+                  {t('We were unable to load the required configuration from the Sentry server. Please take a look at the service logs.')}
+                </div>
+              :
+                <InstallWizardSettings options={options} />
+              )}
+            </div>
+          </div>
+        </div>
+      </DocumentTitle>
+    );
+  }
+});
+
+export default InstallWizard;
diff --git a/src/sentry/static/sentry/less/sentry.less b/src/sentry/static/sentry/less/sentry.less
index 67a48688a9..0ac5fe75de 100644
--- a/src/sentry/static/sentry/less/sentry.less
+++ b/src/sentry/static/sentry/less/sentry.less
@@ -10,6 +10,7 @@
 @import url("./dashboard.less");
 @import url("./organization.less");
 @import url("./project-settings.less");
+@import url("./setup-wizard.less");
 @import url("./docs.less");
 @import url("./auth.less");
 @import url("./misc.less");
diff --git a/src/sentry/static/sentry/less/setup-wizard.less b/src/sentry/static/sentry/less/setup-wizard.less
new file mode 100644
index 0000000000..9e263a22ba
--- /dev/null
+++ b/src/sentry/static/sentry/less/setup-wizard.less
@@ -0,0 +1,42 @@
+.setup-wizard {
+  .clearfix;
+  max-width: 600px;
+  margin: 30px auto;
+  border: 1px solid @trim;
+  padding: 20px 20px 0;
+  border-radius: 4px;
+
+  h1 {
+    .clearfix;
+    line-height: 36px;
+
+    > span {
+      display: block;
+      float: left;
+    }
+    > small {
+      float: right;
+      display: block;
+      font-size: 18px;
+      line-height: inherit;
+    }
+  }
+
+  .loading {
+    margin: 0 0 20px;
+  }
+
+  .loading-error {
+    .clearfix;
+    margin: 0 0 20px;
+
+    .icon:before {
+      float: left;
+      display: block;
+      font-size: 50px;
+      margin-right: 10px;
+      color: @red;
+      content: "\e615";
+    }
+  }
+}
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index ea511d21e0..2795e74381 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -614,7 +614,7 @@ table.integrations {
   }
 
   .loading-message {
-    margin-top: 15px;
+    margin-top: 20px;
     text-align: center;
   }
 }
diff --git a/src/sentry/templatetags/sentry_react.py b/src/sentry/templatetags/sentry_react.py
index a50be3ebf1..381e6fe420 100644
--- a/src/sentry/templatetags/sentry_react.py
+++ b/src/sentry/templatetags/sentry_react.py
@@ -55,12 +55,17 @@ def get_react_config(context):
     if features.has('auth:register', actor=user):
         enabled_features.append('auth:register')
 
+    version_info = _get_version_info()
+
     context = {
         'singleOrganization': settings.SENTRY_SINGLE_ORGANIZATION,
         'urlPrefix': settings.SENTRY_URL_PREFIX,
-        'version': _get_version_info(),
+        'version': version_info,
         'features': enabled_features,
         'mediaUrl': get_asset_url('sentry', ''),
+        # TODO(dcramer): we should confirm that no options need configured
+        # when upgrading, and if so, we simply bump the version??
+        'needsUpgrade': options.get('sentry:version-configured') != version_info['current'],
         'messages': [{
             'message': msg.message,
             'level': msg.tags,
