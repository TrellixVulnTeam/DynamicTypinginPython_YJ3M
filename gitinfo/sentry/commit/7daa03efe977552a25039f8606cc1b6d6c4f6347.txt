commit 7daa03efe977552a25039f8606cc1b6d6c4f6347
Author: David Cramer <dcramer@gmail.com>
Date:   Wed May 31 09:23:14 2017 -0700

    [feedback] correct handling of name updates

diff --git a/src/sentry/api/endpoints/project_user_reports.py b/src/sentry/api/endpoints/project_user_reports.py
index 2fce44e175..93678e5b17 100644
--- a/src/sentry/api/endpoints/project_user_reports.py
+++ b/src/sentry/api/endpoints/project_user_reports.py
@@ -94,6 +94,15 @@ class ProjectUserReportsEndpoint(ProjectEndpoint):
 
         report = serializer.object
         report.project = project
+
+        # TODO(dcramer): we should probably create the user if they dont
+        # exist, and ideally we'd also associate that with the event
+        euser = self.find_event_user(report)
+        if euser and not euser.name and report.name:
+            euser.update(name=report.name)
+        if euser:
+            report.event_user_id = euser.id
+
         try:
             mapping = EventMapping.objects.get(
                 event_id=report.event_id,
@@ -119,9 +128,6 @@ class ProjectUserReportsEndpoint(ProjectEndpoint):
                 project=report.project,
                 event_id=report.event_id,
             )
-            euser = self.find_event_user(existing_report)
-            if euser and not euser.uname and report.name:
-                euser.update(report.name)
 
             existing_report.update(
                 name=report.name,
diff --git a/tests/sentry/api/endpoints/test_project_user_reports.py b/tests/sentry/api/endpoints/test_project_user_reports.py
index 9864e03ad1..42f00468b7 100644
--- a/tests/sentry/api/endpoints/test_project_user_reports.py
+++ b/tests/sentry/api/endpoints/test_project_user_reports.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 import six
 
 from sentry.testutils import APITestCase
-from sentry.models import GroupStatus, UserReport
+from sentry.models import EventUser, GroupStatus, UserReport
 
 
 class ProjectUserReportListTest(APITestCase):
@@ -150,3 +150,52 @@ class CreateProjectUserReportTest(APITestCase):
         assert report.email == 'foo@example.com'
         assert report.name == 'Foo Bar'
         assert report.comments == 'It broke!'
+
+    def test_already_present_with_matching_user(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        group = self.create_group(project=project)
+        event = self.create_event(group=group, tags={
+            'sentry:user': 'email:foo@example.com',
+        })
+        euser = EventUser.objects.create(
+            project_id=project.id,
+            name='',
+            email='foo@example.com',
+        )
+        UserReport.objects.create(
+            group=group,
+            project=project,
+            event_id=event.event_id,
+            name='foo',
+            email='bar@example.com',
+            comments='',
+        )
+
+        url = '/api/0/projects/{}/{}/user-feedback/'.format(
+            project.organization.slug,
+            project.slug,
+        )
+
+        response = self.client.post(url, data={
+            'event_id': event.event_id,
+            'email': 'foo@example.com',
+            'name': 'Foo Bar',
+            'comments': 'It broke!',
+        })
+
+        assert response.status_code == 200, response.content
+
+        report = UserReport.objects.get(
+            id=response.data['id'],
+        )
+        assert report.project == project
+        assert report.group == group
+        assert report.email == 'foo@example.com'
+        assert report.name == 'Foo Bar'
+        assert report.comments == 'It broke!'
+        assert report.event_user_id == euser.id
+
+        euser = EventUser.objects.get(id=euser.id)
+        assert euser.name == 'Foo Bar'
