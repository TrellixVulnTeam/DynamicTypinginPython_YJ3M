commit 630027d688dea5787c22bd4735204d5f7bde27ad
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jun 3 15:32:17 2010 -0700

    Some general cleanup of the admin functions. Added additional indexes required for performant queries.

diff --git a/djangodblog/admin.py b/djangodblog/admin.py
index 5c2d6508b8..3f2f72fb43 100644
--- a/djangodblog/admin.py
+++ b/djangodblog/admin.py
@@ -1,5 +1,6 @@
 from django.conf import settings
 from django.contrib import admin
+from django.contrib.admin.filterspecs import AllValuesFilterSpec, FilterSpec
 from django.contrib.admin.util import unquote
 from django.contrib.admin.views.main import ChangeList, Paginator
 from django.forms.util import flatatt
@@ -24,41 +25,7 @@ except ImportError:
 
 logger = logging.getLogger('dblog')
 
-class PreformattedText(forms.Textarea):
-    input_type = 'textarea'
-    
-    def render(self, name, value, attrs=None):
-        if value is None: value = ''
-        if value != '':
-            # Only add the 'value' attribute if a value is non-empty.
-            value = force_unicode(value)
-        return mark_safe(u'<pre style="clear:left;display:block;padding-top:5px;white-space: pre-wrap;white-space: -moz-pre-wrap;white-space: -pre-wrap;white-space: -o-pre-wrap;word-wrap: break-word;">%s</pre>' % (escape(value),))
-
-class Link(forms.TextInput):
-    input_type = 'a'
-
-    def render(self, name, value, attrs=None):
-        if value is None: value = ''
-        if value != '':
-            # Only add the 'value' attribute if a value is non-empty.
-            value = force_unicode(value)
-        return mark_safe(u'<a href="%s">%s</a>' % (value, escape(value)))
-
-class ErrorBatchAdminForm(forms.ModelForm):
-    traceback = forms.CharField(widget=PreformattedText())
-    url = forms.CharField(widget=Link())
-    
-    class Meta:
-        fields = ('url', 'logger', 'server_name', 'class_name', 'level', 'message', 'times_seen', 'first_seen', 'last_seen', 'traceback')
-        model = ErrorBatch
-
-class ErrorAdminForm(forms.ModelForm):
-    traceback = forms.CharField(widget=PreformattedText())
-    url = forms.CharField(widget=Link())
-    
-    class Meta:
-        fields = ('url', 'logger', 'server_name', 'class_name', 'level', 'message', 'datetime', 'traceback')
-        model = ErrorBatch
+# Custom admin and pagination clauses for efficiency
 
 class EfficientPaginator(Paginator):
     def _get_count(self):
@@ -93,10 +60,70 @@ class EfficientModelAdmin(admin.ModelAdmin):
     def get_changelist(self, request, **kwargs):
         return EfficientChangeList
 
+class EfficientAllValuesFilterSpec(AllValuesFilterSpec):
+    def __init__(self, f, request, params, model, model_admin):
+        super(AllValuesFilterSpec, self).__init__(f, request, params, model, model_admin)
+        self.lookup_val = request.GET.get(f.name, None)
+        self.lookup_choices = model_admin.queryset(request).distinct().order_by(f.name).values_list(f.name, flat=True)
+
+    def title(self):
+        return self.field.verbose_name
+
+    def choices(self, cl):
+        yield {'selected': self.lookup_val is None,
+               'query_string': cl.get_query_string({}, [self.field.name]),
+               'display': _('All')}
+        for val in self.lookup_choices:
+            val = smart_unicode(val)
+            yield {'selected': self.lookup_val == val,
+                   'query_string': cl.get_query_string({self.field.name: val}),
+                   'display': val}
+FilterSpec.filter_specs.insert(-1, (lambda f: f.model._meta.app_label == 'djangodblog', EfficientAllValuesFilterSpec))
+
 UNDEFINED = object()
 
 class FakeRequest(object):
     def build_absolute_uri(self): return self.url
+    
+# Custom forms/fields for the admin
+
+class PreformattedText(forms.Textarea):
+    input_type = 'textarea'
+    
+    def render(self, name, value, attrs=None):
+        if value is None: value = ''
+        if value != '':
+            # Only add the 'value' attribute if a value is non-empty.
+            value = force_unicode(value)
+        return mark_safe(u'<pre style="clear:left;display:block;padding-top:5px;white-space: pre-wrap;white-space: -moz-pre-wrap;white-space: -pre-wrap;white-space: -o-pre-wrap;word-wrap: break-word;">%s</pre>' % (escape(value),))
+
+class Link(forms.TextInput):
+    input_type = 'a'
+
+    def render(self, name, value, attrs=None):
+        if value is None: value = ''
+        if value != '':
+            # Only add the 'value' attribute if a value is non-empty.
+            value = force_unicode(value)
+        return mark_safe(u'<a href="%s">%s</a>' % (value, escape(value)))
+
+class ErrorBatchAdminForm(forms.ModelForm):
+    traceback = forms.CharField(widget=PreformattedText())
+    url = forms.CharField(widget=Link())
+    
+    class Meta:
+        fields = ('url', 'logger', 'server_name', 'class_name', 'level', 'message', 'times_seen', 'first_seen', 'last_seen', 'traceback')
+        model = ErrorBatch
+
+class ErrorAdminForm(forms.ModelForm):
+    traceback = forms.CharField(widget=PreformattedText())
+    url = forms.CharField(widget=Link())
+    
+    class Meta:
+        fields = ('url', 'logger', 'server_name', 'class_name', 'level', 'message', 'datetime', 'traceback')
+        model = ErrorBatch
+
+# Actual admin modules
 
 class ErrorBatchAdmin(EfficientModelAdmin):
     form            = ErrorBatchAdminForm
diff --git a/djangodblog/models.py b/djangodblog/models.py
index 27e6abf698..1a24b75b1c 100644
--- a/djangodblog/models.py
+++ b/djangodblog/models.py
@@ -38,8 +38,8 @@ class ErrorBatch(Model):
     # XXX: We're using the legacy column for `is_resolved` for status
     status          = models.PositiveIntegerField(default=0, db_column="is_resolved", choices=STATUS_LEVELS)
     times_seen      = models.PositiveIntegerField(default=1)
-    last_seen       = models.DateTimeField(default=datetime.datetime.now)
-    first_seen      = models.DateTimeField(default=datetime.datetime.now)
+    last_seen       = models.DateTimeField(default=datetime.datetime.now, db_index=True)
+    first_seen      = models.DateTimeField(default=datetime.datetime.now, db_index=True)
     url             = models.URLField(verify_exists=False, null=True, blank=True)
     server_name     = models.CharField(max_length=128, db_index=True)
     checksum        = models.CharField(max_length=32, db_index=True)
@@ -78,11 +78,11 @@ class ErrorBatch(Model):
 
 class Error(Model):
     logger          = models.CharField(max_length=64, blank=True, default='root', db_index=True)
-    class_name      = models.CharField(_('type'), max_length=128, blank=True, null=True)
+    class_name      = models.CharField(_('type'), max_length=128, blank=True, null=True, db_index=True)
     level           = models.PositiveIntegerField(choices=LOG_LEVELS, default=logging.ERROR, blank=True, db_index=True)
     message         = models.TextField()
     traceback       = models.TextField(blank=True, null=True)
-    datetime        = models.DateTimeField(default=datetime.datetime.now)
+    datetime        = models.DateTimeField(default=datetime.datetime.now, db_index=True)
     url             = models.URLField(verify_exists=False, null=True, blank=True)
     data            = JSONDictField(blank=True, null=True)
     server_name     = models.CharField(max_length=128, db_index=True)
diff --git a/djangodblog/tests.py b/djangodblog/tests.py
index 2eb36dfbe7..39eab9b153 100644
--- a/djangodblog/tests.py
+++ b/djangodblog/tests.py
@@ -53,8 +53,7 @@ class JSONDictTestCase(TestCase):
 
 class DBLogTestCase(TestCase):
     def setUp(self):
-        settings.DBLOG_DATABASE = None
-        settings.DBLOG_WITH_LOGGER = False
+        settings.DBLOG_DATABASE_USING = None
         self._handlers = None
         self._level = None
     
@@ -208,7 +207,7 @@ class DBLogTestCase(TestCase):
         self.assertEquals(last.message, 'This is an error')
         
     def testAlternateDatabase(self):
-        settings.DBLOG_USING = 'default'
+        settings.DBLOG_DATABASE_USING = 'default'
         
         Error.objects.all().delete()
         ErrorBatch.objects.all().delete()
