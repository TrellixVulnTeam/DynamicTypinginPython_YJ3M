commit 63941faa929236b9d31c1ddaf62d12cee9ef8d24
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Tue Nov 6 11:02:58 2018 +0100

    ref(EventManager): Move Event model creation into separate method (#10416)
    
    * ref(EventManager): Move Event model creation into separate method
    
    * fix: Minimize diff
    
    * ref: Avoid mutating self in get_event_model
    
    * ref: Rename _get_event_model
    
    * fix: Also copy norm_func in CanonicalKeyDict.copy

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 66a9f187f6..f8a4e21387 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -705,6 +705,27 @@ class EventManager(object):
     def get_data(self):
         return self._data
 
+    def _get_event_instance(self, project_id=None):
+        data = self._data.copy()
+        event_id = data.pop('event_id')
+        platform = data.pop('platform', None)
+
+        recorded_timestamp = data.pop('timestamp')
+        date = datetime.fromtimestamp(recorded_timestamp)
+        date = date.replace(tzinfo=timezone.utc)
+
+        # unused
+        time_spent = data.pop('time_spent', None)
+
+        return Event(
+            project_id=project_id or self._project.id,
+            event_id=event_id,
+            data=data,
+            time_spent=time_spent,
+            datetime=date,
+            platform=platform
+        )
+
     def save(self, project_id, raw=False):
         from sentry.tasks.post_process import index_event_tags
 
@@ -736,8 +757,7 @@ class EventManager(object):
             )
             return event
 
-        # First we pull out our top-level (non-data attr) kwargs
-        event_id = data.pop('event_id')
+        # pull out our top-level (non-data attr) kwargs
         level = data.pop('level')
         transaction_name = data.pop('transaction', None)
         culprit = data.pop('culprit', None)
@@ -746,15 +766,23 @@ class EventManager(object):
         site = data.pop('site', None)
         checksum = data.pop('checksum', None)
         fingerprint = data.pop('fingerprint', None)
-        platform = data.pop('platform', None)
         release = data.pop('release', None)
         dist = data.pop('dist', None)
         environment = data.pop('environment', None)
+        recorded_timestamp = data.get("timestamp")
 
         # unused
-        time_spent = data.pop('time_spent', None)
         message = data.pop('message', '')
 
+        event = self._get_event_instance(project_id=project_id)
+        event._project_cache = project
+
+        date = event.datetime
+        platform = event.platform
+        event_id = event.event_id
+        data = event.data.data
+        self._data = None
+
         if not culprit:
             if transaction_name:
                 culprit = transaction_name
@@ -765,25 +793,6 @@ class EventManager(object):
         if transaction_name:
             transaction_name = force_text(transaction_name)
 
-        recorded_timestamp = data.pop('timestamp')
-        date = datetime.fromtimestamp(recorded_timestamp)
-        date = date.replace(tzinfo=timezone.utc)
-
-        kwargs = {
-            'platform': platform,
-        }
-
-        event = Event(
-            project_id=project.id,
-            event_id=event_id,
-            data=data,
-            time_spent=time_spent,
-            datetime=date,
-            **kwargs
-        )
-        event._project_cache = project
-        data = event.data.data
-
         # convert this to a dict to ensure we're only storing one value per key
         # as most parts of Sentry dont currently play well with multiple values
         tags = dict(data.get('tags') or [])
@@ -898,11 +907,13 @@ class EventManager(object):
         message = trim(message.strip(), settings.SENTRY_MAX_MESSAGE_LENGTH)
 
         event.message = message
-        kwargs['message'] = message
+        kwargs = {
+            'platform': platform,
+            'message': message
+        }
 
         received_timestamp = event.data.get('received') or float(event.datetime.strftime('%s'))
-        group_kwargs = kwargs.copy()
-        group_kwargs.update(
+        kwargs.update(
             {
                 'culprit': culprit,
                 'logger': logger_name,
@@ -923,11 +934,11 @@ class EventManager(object):
         )
 
         if release:
-            group_kwargs['first_release'] = release
+            kwargs['first_release'] = release
 
         try:
             group, is_new, is_regression, is_sample = self._save_aggregate(
-                event=event, hashes=hashes, release=release, **group_kwargs
+                event=event, hashes=hashes, release=release, **kwargs
             )
         except HashDiscarded:
             event_discarded.send_robust(
diff --git a/src/sentry/utils/canonical.py b/src/sentry/utils/canonical.py
index be668370a6..d75d0d7096 100644
--- a/src/sentry/utils/canonical.py
+++ b/src/sentry/utils/canonical.py
@@ -104,6 +104,7 @@ class CanonicalKeyDict(collections.MutableMapping):
 
     def copy(self):
         rv = object.__new__(self.__class__)
+        rv._norm_func = self._norm_func
         rv.data = copy.copy(self.data)
         return rv
 
