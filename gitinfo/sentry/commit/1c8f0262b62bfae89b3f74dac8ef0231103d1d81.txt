commit 1c8f0262b62bfae89b3f74dac8ef0231103d1d81
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Jun 6 10:35:39 2018 -0700

    chore(api): Remove unused GroupEnvironmentDetails endpoint (#8660)
    
    Completely remove the GroupEnvironmentDetails endpoint as we are not using it anymore.
    
    This is a follow up to https://github.com/getsentry/sentry/pull/8539.

diff --git a/src/sentry/api/endpoints/group_environment_details.py b/src/sentry/api/endpoints/group_environment_details.py
deleted file mode 100644
index 716ba5809c..0000000000
--- a/src/sentry/api/endpoints/group_environment_details.py
+++ /dev/null
@@ -1,85 +0,0 @@
-from __future__ import absolute_import
-
-from rest_framework.response import Response
-
-from sentry.api.bases.group import GroupEndpoint
-from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.api.serializers import serialize
-from sentry.api.serializers.models.environment import (GroupEnvironmentWithStatsSerializer)
-from sentry.api.serializers.models.grouprelease import (GroupReleaseWithStatsSerializer)
-from sentry.models import Environment, GroupRelease, ReleaseEnvironment, ReleaseProject
-from sentry.utils.dates import to_datetime
-
-
-class GroupEnvironmentDetailsEndpoint(GroupEndpoint):
-    def get(self, request, group, environment):
-        project = group.project
-        try:
-            environment = Environment.objects.get(
-                projects=project,
-                organization_id=project.organization_id,
-                name=Environment.get_name_from_path_segment(environment),
-            )
-        except Environment.DoesNotExist:
-            raise ResourceDoesNotExist
-
-        first_release = GroupRelease.objects.filter(
-            group_id=group.id,
-            environment=environment.name,
-        ).order_by('first_seen').first()
-
-        last_release = GroupRelease.objects.filter(
-            group_id=group.id,
-            environment=environment.name,
-        ).order_by('-first_seen').first()
-
-        # the current release is the 'latest seen' release within the
-        # environment even if it hasnt affected this issue
-
-        current_release = GroupRelease.objects.filter(
-            group_id=group.id,
-            environment=environment.name,
-            release_id=ReleaseEnvironment.objects.filter(
-                release_id__in=ReleaseProject.objects.filter(project_id=group.project_id
-                                                             ).values_list('release_id', flat=True),
-                organization_id=group.project.organization_id,
-                environment_id=environment.id,
-            ).order_by('-first_seen').values_list('release_id', flat=True).first(),
-        ).first()
-
-        last_seen = GroupRelease.objects.filter(
-            group_id=group.id,
-            environment=environment.name,
-        ).order_by('-last_seen').values_list(
-            'last_seen', flat=True
-        ).first()
-
-        until = request.GET.get('until')
-        if until:
-            until = to_datetime(float(until))
-
-        context = {
-            'environment':
-            serialize(
-                environment, request.user,
-                GroupEnvironmentWithStatsSerializer(
-                    group=group,
-                    until=until,
-                )
-            ),
-            'firstRelease':
-            serialize(first_release, request.user),
-            'lastRelease':
-            serialize(last_release, request.user),
-            'currentRelease':
-            serialize(
-                current_release, request.user, GroupReleaseWithStatsSerializer(
-                    until=until,
-                )
-            ),
-            'lastSeen':
-            last_seen,
-            'firstSeen':
-            first_release.first_seen if first_release else None,
-        }
-        return Response(context)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 92c46c8fe2..d9b55385d9 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -23,7 +23,6 @@ from .endpoints.event_details import EventDetailsEndpoint
 from .endpoints.event_owners import EventOwnersEndpoint
 from .endpoints.event_apple_crash_report import EventAppleCrashReportEndpoint
 from .endpoints.group_details import GroupDetailsEndpoint
-from .endpoints.group_environment_details import GroupEnvironmentDetailsEndpoint
 from .endpoints.group_events import GroupEventsEndpoint
 from .endpoints.group_events_latest import GroupEventsLatestEndpoint
 from .endpoints.group_events_oldest import GroupEventsOldestEndpoint
@@ -932,11 +931,6 @@ urlpatterns = patterns(
         GroupStatsEndpoint.as_view(),
         name='sentry-api-0-group-stats'
     ),
-    url(
-        r'^(?:issues|groups)/(?P<issue_id>\d+)/environments/(?P<environment>[^/]+)/$',
-        GroupEnvironmentDetailsEndpoint.as_view(),
-        name='sentry-api-0-group-environment-details'
-    ),
     url(
         r'^(?:issues|groups)/(?P<issue_id>\d+)/tags/$',
         GroupTagsEndpoint.as_view(),
diff --git a/tests/sentry/api/endpoints/test_group_environment_details.py b/tests/sentry/api/endpoints/test_group_environment_details.py
deleted file mode 100644
index b564cd0d90..0000000000
--- a/tests/sentry/api/endpoints/test_group_environment_details.py
+++ /dev/null
@@ -1,91 +0,0 @@
-from __future__ import absolute_import, print_function
-
-from sentry.models import Environment, GroupRelease, Release
-from sentry.testutils import APITestCase
-
-
-class GroupEnvironmentDetailsTest(APITestCase):
-    def test_no_data_empty_env(self):
-        self.login_as(user=self.user)
-
-        group = self.create_group()
-        env = Environment.objects.create(
-            project_id=group.project_id, organization_id=group.project.organization_id, name=''
-        )
-        env.add_project(group.project)
-
-        url = '/api/0/issues/{}/environments/none/'.format(group.id)
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['lastRelease'] is None
-        assert response.data['firstRelease'] is None
-        assert response.data['environment']['name'] == ''
-
-    def test_no_data_named_env(self):
-        self.login_as(user=self.user)
-
-        group = self.create_group()
-
-        env = Environment.objects.create(
-            project_id=group.project_id,
-            organization_id=group.project.organization_id,
-            name='production',
-        )
-        env.add_project(group.project)
-
-        url = '/api/0/issues/{}/environments/production/'.format(group.id)
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['lastRelease'] is None
-        assert response.data['firstRelease'] is None
-        assert response.data['environment']['name'] == 'production'
-
-    def test_with_data_named_env(self):
-        self.login_as(user=self.user)
-
-        project = self.create_project()
-        group = self.create_group(project=project)
-        env = Environment.objects.create(
-            project_id=group.project_id,
-            organization_id=group.project.organization_id,
-            name='production',
-        )
-        env.add_project(project)
-
-        release = Release.objects.create(
-            organization_id=project.organization_id,
-            version='abcdef',
-        )
-        release.add_project(project)
-
-        GroupRelease.objects.create(
-            release_id=release.id,
-            group_id=group.id,
-            project_id=project.id,
-            environment='production',
-        )
-
-        url = '/api/0/issues/{}/environments/production/'.format(group.id)
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['lastRelease']['release']['version'] == release.version
-        assert response.data['firstRelease']['release']['version'] == release.version
-        assert response.data['environment']['name'] == 'production'
-        assert response.data['environment'].get('stats')
-
-    def test_missing_env(self):
-        self.login_as(user=self.user)
-
-        group = self.create_group()
-        env = Environment.objects.create(
-            project_id=group.project_id, organization_id=group.project.organization_id, name=''
-        )
-        env.add_project(group.project)
-
-        url = '/api/0/issues/{}/environments/doesnotexist/'.format(group.id)
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 404, response.content
