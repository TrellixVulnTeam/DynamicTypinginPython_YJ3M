commit 9cda50672d602907fdab3a9f5ce07190d068fda5
Author: Mark Story <mark@sentry.io>
Date:   Thu Oct 24 15:08:59 2019 -0400

    fix(discover) Make 'All Projects' work in discover (#15231)
    
    Refactor the `get_projects()` method so that it is compatible with
    discover1. This change also makes discover1 apply the same project
    conditions as the rest of the application does. Previously it did not
    respect the allowjoin flag for orgs that turned it off.
    
    Refs SEN-1176

diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index 94f132fee4..33776c6079 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -173,9 +173,20 @@ class OrganizationEndpoint(Endpoint):
             project_ids = set(map(int, request.GET.getlist("project")))
         except ValueError:
             raise ParseError(detail="Invalid project parameter. Values must be numbers.")
+        return self._get_projects_by_id(
+            project_ids, request, organization, force_global_perms, include_all_accessible
+        )
 
-        user = getattr(request, "user", None)
+    def _get_projects_by_id(
+        self,
+        project_ids,
+        request,
+        organization,
+        force_global_perms=False,
+        include_all_accessible=False,
+    ):
         qs = Project.objects.filter(organization=organization, status=ProjectStatus.VISIBLE)
+        user = getattr(request, "user", None)
 
         # A project_id of -1 means 'all projects I have access to'
         # While no project_ids means 'all projects I am a member of'.
diff --git a/src/sentry/discover/endpoints/discover_query.py b/src/sentry/discover/endpoints/discover_query.py
index f76710833a..487ea5aae8 100644
--- a/src/sentry/discover/endpoints/discover_query.py
+++ b/src/sentry/discover/endpoints/discover_query.py
@@ -7,8 +7,8 @@ from rest_framework.response import Response
 
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.bases import OrganizationEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.paginator import GenericOffsetPaginator
-from sentry.models import Project, ProjectStatus
 from sentry.utils import snuba
 from sentry import features
 
@@ -100,18 +100,11 @@ class DiscoverQueryEndpoint(OrganizationEndpoint):
         if not features.has("organizations:discover", organization, actor=request.user):
             return Response(status=404)
 
-        requested_projects = request.data["projects"]
-
-        projects = list(
-            Project.objects.filter(
-                id__in=requested_projects, organization=organization, status=ProjectStatus.VISIBLE
-            )
-        )
-
-        has_invalid_projects = len(projects) < len(requested_projects)
-
-        if has_invalid_projects or not request.access.has_projects_access(projects):
-            return Response("Invalid projects", status=403)
+        try:
+            requested_projects = set(map(int, request.data["projects"]))
+        except ValueError:
+            raise ResourceDoesNotExist()
+        projects = self._get_projects_by_id(requested_projects, request, organization)
 
         serializer = DiscoverQuerySerializer(data=request.data)
 
@@ -152,7 +145,7 @@ class DiscoverQueryEndpoint(OrganizationEndpoint):
             limit=serialized.get("limit"),
             aggregations=serialized.get("aggregations"),
             rollup=serialized.get("rollup"),
-            filter_keys={"project.id": serialized.get("projects")},
+            filter_keys={"project.id": projects_map.keys()},
             arrayjoin=serialized.get("arrayjoin"),
             request=request,
             turbo=serialized.get("turbo"),
diff --git a/tests/snuba/api/endpoints/test_discover_query.py b/tests/snuba/api/endpoints/test_discover_query.py
index d0cfb4bf7a..8f53d5d15a 100644
--- a/tests/snuba/api/endpoints/test_discover_query.py
+++ b/tests/snuba/api/endpoints/test_discover_query.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 from datetime import datetime, timedelta
 
 from sentry.testutils import APITestCase, SnubaTestCase
+from sentry.testutils.helpers.datetime import iso_format
 from django.core.urlresolvers import reverse
 
 
@@ -61,8 +62,8 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
                 {
                     "projects": [self.project.id],
                     "fields": ["message", "platform.name"],
-                    "start": (datetime.now() - timedelta(seconds=10)).strftime("%Y-%m-%dT%H:%M:%S"),
-                    "end": (datetime.now()).strftime("%Y-%m-%dT%H:%M:%S"),
+                    "start": iso_format(datetime.now() - timedelta(seconds=10)),
+                    "end": iso_format(datetime.now()),
                     "orderby": "-timestamp",
                     "range": None,
                 },
@@ -102,8 +103,8 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
                     "projects": [self.project.id],
                     "fields": ["message", "platform"],
                     "range": "1d",
-                    "start": (datetime.now() - timedelta(seconds=10)).strftime("%Y-%m-%dT%H:%M:%S"),
-                    "end": (datetime.now()).strftime("%Y-%m-%dT%H:%M:%S"),
+                    "start": iso_format(datetime.now() - timedelta(seconds=10)),
+                    "end": iso_format(datetime.now()),
                     "orderby": "-timestamp",
                 },
             )
@@ -119,8 +120,8 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
                     "fields": ["message", "platform"],
                     "statsPeriodStart": "7d",
                     "statsPeriodEnd": "1d",
-                    "start": (datetime.now() - timedelta(seconds=10)).strftime("%Y-%m-%dT%H:%M:%S"),
-                    "end": (datetime.now()).strftime("%Y-%m-%dT%H:%M:%S"),
+                    "start": iso_format(datetime.now() - timedelta(seconds=10)),
+                    "end": iso_format(datetime.now()),
                     "orderby": "-timestamp",
                 },
             )
@@ -159,8 +160,8 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
                             "release",
                         ]
                     ],
-                    "start": (datetime.now() - timedelta(seconds=10)).strftime("%Y-%m-%dT%H:%M:%S"),
-                    "end": (datetime.now()).strftime("%Y-%m-%dT%H:%M:%S"),
+                    "start": iso_format(datetime.now() - timedelta(seconds=10)),
+                    "end": iso_format(datetime.now()),
                     "groupby": ["time", "release"],
                     "rollup": 86400,
                     "limit": 1000,
@@ -500,11 +501,39 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
                 {
                     "projects": [self.new_project.id],
                     "fields": ["message", "platform"],
-                    "start": (datetime.now() - timedelta(seconds=10)).strftime("%Y-%m-%dT%H:%M:%S"),
-                    "end": (datetime.now()).strftime("%Y-%m-%dT%H:%M:%S"),
+                    "start": iso_format(datetime.now() - timedelta(seconds=10)),
+                    "end": iso_format(datetime.now()),
                     "orderby": "-timestamp",
                     "range": None,
                 },
             )
 
         assert response.status_code == 200, response.content
+
+    def test_all_projects(self):
+        project = self.create_project(organization=self.org)
+        self.event = self.store_event(
+            data={
+                "message": "other message",
+                "platform": "python",
+                "timestamp": iso_format(self.now - timedelta(minutes=1)),
+            },
+            project_id=project.id,
+        )
+
+        with self.feature("organizations:discover"):
+            url = reverse("sentry-api-0-discover-query", args=[self.org.slug])
+            response = self.client.post(
+                url,
+                {
+                    "projects": [-1],
+                    "fields": ["message", "platform.name"],
+                    "range": "1d",
+                    "orderby": "-timestamp",
+                    "start": None,
+                    "end": None,
+                },
+            )
+
+        assert response.status_code == 200, response.content
+        assert len(response.data["data"]) == 2
