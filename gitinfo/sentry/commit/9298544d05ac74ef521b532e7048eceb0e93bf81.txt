commit 9298544d05ac74ef521b532e7048eceb0e93bf81
Author: Steven Klass <sklass@pointcircle.com>
Date:   Tue Nov 18 12:13:38 2014 -0700

    Added a level rule for matching event rules.

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 62e6b9aadc..07d5e064fe 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -193,6 +193,7 @@ SENTRY_RULES = (
     'sentry.rules.conditions.regression_event.RegressionEventCondition',
     'sentry.rules.conditions.tagged_event.TaggedEventCondition',
     'sentry.rules.conditions.event_frequency.EventFrequencyCondition',
+    'sentry.rules.conditions.level.LevelCondition',
 )
 
 # methods as defined by http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html + PATCH
diff --git a/src/sentry/rules/conditions/level.py b/src/sentry/rules/conditions/level.py
new file mode 100644
index 0000000000..d83ff4cc30
--- /dev/null
+++ b/src/sentry/rules/conditions/level.py
@@ -0,0 +1,59 @@
+"""
+sentry.rules.conditions.minimum_level
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from django import forms
+from sentry.constants import LOG_LEVELS
+
+from sentry.rules.conditions.base import EventCondition
+
+
+class LevelMatchType(object):
+    EQUAL = 'eq'
+    LESS_THAN = 'lt'
+    GREATER_THAN = 'gt'
+
+
+class LevelEventForm(forms.Form):
+    level = forms.ChoiceField(
+        choices=[("{0}".format(k), "{0}".format(v.capitalize())) for k, v in LOG_LEVELS.items()],
+        initial=30)
+    match = forms.ChoiceField(
+        choices=(
+            (LevelMatchType.EQUAL, 'equals'),
+            (LevelMatchType.LESS_THAN, 'less than'),
+            (LevelMatchType.GREATER_THAN, 'greater than')),
+        initial="gt")
+
+
+class LevelCondition(EventCondition):
+    form_cls = LevelEventForm
+    label = 'An event matching {match} {level}'
+
+    def passes(self, event, state, **kwargs):
+        desired_level = self.get_option('level')
+        desired_match = self.get_option('match')
+
+        if not (desired_level and desired_match):
+            return False
+
+        desired_level = int(desired_level)
+        level = int(event.level)
+
+        if desired_match == LevelMatchType.EQUAL:
+            return level == desired_level
+        elif desired_match == LevelMatchType.GREATER_THAN:
+            return level > desired_level
+        elif desired_match == LevelMatchType.GREATER_THAN_EQUAL:
+            return level >= desired_level
+        elif desired_match == LevelMatchType.LESS_THAN:
+            return level < desired_level
+        elif desired_match == LevelMatchType.LESS_THAN_EQUAL:
+            return level <= desired_level
+        return False
