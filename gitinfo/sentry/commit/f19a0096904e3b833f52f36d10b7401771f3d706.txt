commit f19a0096904e3b833f52f36d10b7401771f3d706
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Feb 19 16:12:36 2015 -0800

    Move webhooks into builtins

diff --git a/docs/plugins/index.rst b/docs/plugins/index.rst
index bcbf01afc5..e0b61acde1 100644
--- a/docs/plugins/index.rst
+++ b/docs/plugins/index.rst
@@ -60,7 +60,6 @@ The following extensions are available and maintained by members of the Sentry c
 * `sentry-statsd <https://github.com/dreadatour/sentry-statsd>`_
 * `sentry-top <https://github.com/getsentry/sentry-top>`_
 * `sentry-trello <https://github.com/DamianZaremba/sentry-trello>`_
-* `sentry-webhooks <https://github.com/getsentry/sentry-webhooks>`_
 * `sentry-whatsapp <https://github.com/ecarreras/sentry-whatsapp>`_
 * `sentry-xmpp <https://github.com/chroto/sentry-xmpp>`_
 * `sentry-youtrack <https://github.com/bogdal/sentry-youtrack>`_
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 4d0831aaf3..0177ed204d 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -250,6 +250,7 @@ INSTALLED_APPS = (
     'sentry.plugins.sentry_mail',
     'sentry.plugins.sentry_urls',
     'sentry.plugins.sentry_useragents',
+    'sentry.plugins.sentry_webhooks',
     'social_auth',
     'south',
     'sudo',
diff --git a/src/sentry/http.py b/src/sentry/http.py
index b88c4700fd..8e3b07c09d 100644
--- a/src/sentry/http.py
+++ b/src/sentry/http.py
@@ -22,29 +22,30 @@ USER_AGENT = 'sentry/%s' % sentry.VERSION
 DISALLOWED_IPS = set((IPNetwork(i) for i in settings.SENTRY_DISALLOWED_IPS))
 
 
-class BlacklistAdapter(HTTPAdapter):
-    def is_allowed_url(self, url):
-        """
-        Tests a URL to ensure it doesn't appear to be a blacklisted IP range.
-        """
-        parsed = urlparse(url)
-        if not parsed.hostname:
-            return False
-
-        try:
-            ip_address = socket.gethostbyname(parsed.hostname)
-        except socket.gaierror:
+def is_valid_url(url):
+    """
+    Tests a URL to ensure it doesn't appear to be a blacklisted IP range.
+    """
+    parsed = urlparse(url)
+    if not parsed.hostname:
+        return False
+
+    try:
+        ip_address = socket.gethostbyname(parsed.hostname)
+    except socket.gaierror:
+        return False
+
+    ip_network = IPNetwork(ip_address)
+    for addr in DISALLOWED_IPS:
+        if ip_network in addr:
             return False
 
-        ip_network = IPNetwork(ip_address)
-        for addr in DISALLOWED_IPS:
-            if ip_network in addr:
-                return False
+    return True
 
-        return True
 
+class BlacklistAdapter(HTTPAdapter):
     def send(self, request, *args, **kwargs):
-        if not self.is_allowed_url(request.url):
+        if not is_valid_url(request.url):
             raise SuspiciousOperation('%s matches the URL blacklist' % (request.url,))
         return super(BlacklistAdapter, self).send(request, *args, **kwargs)
 
diff --git a/src/sentry/plugins/sentry_webhooks/__init__.py b/src/sentry/plugins/sentry_webhooks/__init__.py
new file mode 100644
index 0000000000..29af00498e
--- /dev/null
+++ b/src/sentry/plugins/sentry_webhooks/__init__.py
@@ -0,0 +1,7 @@
+from __future__ import absolute_import
+
+from sentry.plugins import register
+
+from .plugin import WebHooksPlugin
+
+register(WebHooksPlugin)
diff --git a/src/sentry/plugins/sentry_webhooks/models.py b/src/sentry/plugins/sentry_webhooks/models.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/sentry/plugins/sentry_webhooks/models.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/sentry/plugins/sentry_webhooks/plugin.py b/src/sentry/plugins/sentry_webhooks/plugin.py
new file mode 100644
index 0000000000..6bd36e87f1
--- /dev/null
+++ b/src/sentry/plugins/sentry_webhooks/plugin.py
@@ -0,0 +1,84 @@
+from __future__ import absolute_import
+
+import logging
+import sentry
+
+from django.conf import settings
+from django import forms
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.plugins.bases import notify
+from sentry.http import is_valid_url, safe_urlopen
+from sentry.utils.safe import safe_execute
+
+
+class WebHooksOptionsForm(notify.NotificationConfigurationForm):
+    urls = forms.CharField(
+        label=_('Callback URLs'),
+        widget=forms.Textarea(attrs={
+            'class': 'span6', 'placeholder': 'https://getsentry.com/callback/url'}),
+        help_text=_('Enter callback URLs to POST new events to (one per line).'))
+
+    def clean_url(self):
+        value = self.cleaned_data.get('url')
+        if not is_valid_url(value):
+            raise forms.ValidationError('Invalid hostname')
+        return value
+
+
+class WebHooksPlugin(notify.NotificationPlugin):
+    author = 'Sentry Team'
+    author_url = 'https://github.com/getsentry/sentry'
+    version = sentry.VERSION
+    description = "Integrates web hooks."
+    resource_links = [
+        ('Bug Tracker', 'https://github.com/getsentry/sentry/issues'),
+        ('Source', 'https://github.com/getsentry/sentry'),
+    ]
+
+    slug = 'webhooks'
+    title = _('WebHooks')
+    conf_title = title
+    conf_key = 'webhooks'
+    project_conf_form = WebHooksOptionsForm
+    timeout = getattr(settings, 'SENTRY_WEBHOOK_TIMEOUT', 3)
+    logger = logging.getLogger('sentry.plugins.webhooks')
+    user_agent = 'sentry-webhooks/%s' % version
+
+    def is_configured(self, project, **kwargs):
+        return bool(self.get_option('urls', project))
+
+    def get_group_data(self, group, event):
+        data = {
+            'id': str(group.id),
+            'checksum': group.checksum,
+            'project': group.project.slug,
+            'project_name': group.project.name,
+            'logger': group.logger,
+            'level': group.get_level_display(),
+            'culprit': group.culprit,
+            'message': event.message,
+            'url': group.get_absolute_url(),
+        }
+        data['event'] = dict(event.data or {})
+        data['event']['tags'] = event.get_tags()
+        return data
+
+    def get_webhook_urls(self, project):
+        urls = self.get_option('urls', project)
+        if not urls:
+            return ()
+        return filter(bool, urls.strip().splitlines())
+
+    def send_webhook(self, url, payload):
+        return safe_urlopen(
+            url=url,
+            json=payload,
+            timeout=self.timeout,
+            user_agent=self.user_agent,
+        )
+
+    def notify_users(self, group, event, fail_silently=False):
+        payload = self.get_group_data(group, event)
+        for url in self.get_webhook_urls(group.project):
+            safe_execute(self.send_webhook, url, payload)
