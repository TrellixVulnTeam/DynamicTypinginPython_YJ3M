commit 1eb96e63ca445132131498037d036b364fcea45f
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Dec 23 00:01:37 2011 -0800

    Initial work on Http interface and replaying of requests

diff --git a/sentry/interfaces.py b/sentry/interfaces.py
index 3e0e4274ff..c8238a9b86 100644
--- a/sentry/interfaces.py
+++ b/sentry/interfaces.py
@@ -32,6 +32,8 @@ class Interface(object):
     render differently than the default ``extra`` metadata in an event.
     """
 
+    score = 0
+
     def __init__(self, **kwargs):
         self.attrs = kwargs.keys()
         self.__dict__.update(kwargs)
@@ -111,6 +113,7 @@ class Stacktrace(Interface):
 
     def to_html(self, event):
         return render_to_string('sentry/partial/interfaces/stacktrace.html', {
+            'event': event,
             'frames': self.frames,
         })
 
@@ -149,6 +152,7 @@ class Exception(Interface):
 
     def to_html(self, event):
         return render_to_string('sentry/partial/interfaces/exception.html', {
+            'event': event,
             'exception_value': self.value,
             'exception_type': self.type,
             'exception_module': self.module,
@@ -166,7 +170,9 @@ class Http(Interface):
         env: {REMOTE_ADDR: '192.168.0.1'}
     }
     """
-        # methods as defined by http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html
+    score = 100
+
+    # methods as defined by http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html
     METHODS = ('GET', 'POST', 'PUT', 'OPTIONS', 'HEAD', 'DELETE', 'TRACE', 'CONNECT')
 
     def __init__(self, url, method, data=None, query_string=None, cookies=None, env=None, **kwargs):
@@ -206,6 +212,7 @@ class Http(Interface):
 
     def to_html(self, event):
         return render_to_string('sentry/partial/interfaces/http.html', {
+            'event': event,
             'full_url': '?'.join(filter(None, [self.url, self.query_string])),
             'url': self.url,
             'method': self.method,
@@ -250,6 +257,7 @@ class Template(Interface):
 
     def to_html(self, event):
         return render_to_string('sentry/partial/interfaces/template.html', {
+            'event': event,
             'filename': self.filename,
             'context_line': self.context_line,
             'lineno': self.lineno,
diff --git a/sentry/models.py b/sentry/models.py
index 1ed3082876..bf41d0ebfb 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -21,6 +21,7 @@ from django.contrib.auth.models import User
 from django.db import models
 from django.db.models import Sum
 from django.db.models.signals import post_syncdb
+from django.utils.datastructures import SortedDict
 from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
@@ -296,15 +297,15 @@ class Event(MessageBase):
 
     @cached_property
     def interfaces(self):
-        result = {}
+        result = []
         for k, v in self.data.iteritems():
             if '.' not in k:
                 continue
             m, c = k.rsplit('.', 1)
             cls = getattr(__import__(m, {}, {}, [c]), c)
             v = cls(**v)
-            result[k] = v
-        return result
+            result.append((v.score, k,  v))
+        return SortedDict((k, v) for _, k, v in sorted(result, key=lambda x: x[0], reverse=True))
 
     def get_version(self):
         if not self.data:
diff --git a/sentry/replays.py b/sentry/replays.py
new file mode 100644
index 0000000000..b7f91f43eb
--- /dev/null
+++ b/sentry/replays.py
@@ -0,0 +1,36 @@
+from httplib import HTTPConnection, HTTPSConnection
+from urllib import urlencode
+from urlparse import urlparse
+
+
+class Replayer(object):
+    def __init__(self, url, method, data=None, headers=None):
+        self.url = url
+        self.method = method
+        self.data = data
+        self.headers = headers
+
+    def replay(self):
+        urlparts = urlparse(self.url)
+        if urlparts.scheme == 'http':
+            conn_cls = HTTPConnection
+        elif urlparts.scheme == 'https':
+            conn_cls = HTTPSConnection
+        else:
+            raise ValueError(self.url)
+
+        data = self.data
+        if isinstance(data, dict):
+            data = urlencode(data)
+
+        conn = conn_cls(urlparts.netloc, timeout=5)
+        conn.request(self.method, urlparts.path, data, self.headers or {})
+
+        response = conn.getresponse()
+
+        return {
+            'status': response.status,
+            'reason': response.reason,
+            'headers': response.getheaders(),
+            'body': response.read(),
+        }
diff --git a/sentry/templates/sentry/events/replay_request.html b/sentry/templates/sentry/events/replay_request.html
new file mode 100644
index 0000000000..257e22310a
--- /dev/null
+++ b/sentry/templates/sentry/events/replay_request.html
@@ -0,0 +1,53 @@
+{% extends "sentry/layout.html" %}
+
+{% load i18n %}
+
+{% block title %}{% trans "Replay Request" %} | {{ block.super }}{% endblock %}
+
+{% block heading %}{% trans "Replay Request" %}{% endblock %}
+
+{% block content %}
+    <div id="body">
+        <h2>Request</h2>
+        {% if form.errors %}
+            <p class="error">{% trans "Please fill out all fields." %}</p>
+        {% endif %}
+
+        <form method="post" action="" class="replay-form">
+            {% csrf_token %}
+            <table>
+                <colgroup>
+                    <col width="100px"/>
+                    <col/>
+                </colgroup>
+                <tr>
+                    <td>{{ form.url.label_tag }}</td>
+                    <td>{{ form.url }}</td>
+                </tr>
+                <tr>
+                    <td>{{ form.method.label_tag }}</td>
+                    <td>{{ form.method }}</td>
+                </tr>
+                <tr>
+                    <td>{{ form.headers.label_tag }}</td>
+                    <td>{{ form.headers }}</td>
+                </tr>
+                <tr>
+                    <td>{{ form.data.label_tag }}</td>
+                    <td>{{ form.data }}</td>
+                </tr>
+            </table>
+            <div class="submit">
+                <button type="submit" class="button">{% trans "Submit" %}</button>
+            </div>
+        </form>
+
+        {% if result %}
+            <h2>Result</h2>
+            <pre><strong>{{ result.status }} {{ result.reason }}</strong>
+{% for key, value in result.headers %}{{ key }}: {{ value }}
+{% endfor %}
+{{ result.body }}</pre>
+        {% endif %}
+    </div>
+{% endblock %}
diff --git a/sentry/templates/sentry/partial/interfaces/http.html b/sentry/templates/sentry/partial/interfaces/http.html
index e69de29bb2..fa123ba16e 100644
--- a/sentry/templates/sentry/partial/interfaces/http.html
+++ b/sentry/templates/sentry/partial/interfaces/http.html
@@ -0,0 +1,16 @@
+<div id="request" class="module">
+    <h2>Request</h2>
+    <div class="module-content">
+        <table class="meta">
+            <tr>
+                <th>URL:</th>
+                <td><a href="{{ url }}">{{ url|escape }}</a></td>
+            </tr>
+            <tr>
+                <th>Method:</th>
+                <td>{{ method }}</td>
+            </tr>
+        </table>
+        <p><a href="{% url sentry-replay event.project_id event.id %}">Replay this request</a></p>
+    </div>
+</div>
\ No newline at end of file
diff --git a/sentry/web/forms.py b/sentry/web/forms.py
index 993bb67571..ece979662a 100644
--- a/sentry/web/forms.py
+++ b/sentry/web/forms.py
@@ -2,8 +2,25 @@ from django import forms
 
 from sentry.models import Project
 
-class EditProjectForm(forms.ModelForm):
 
+class EditProjectForm(forms.ModelForm):
     class Meta:
         fields = ('name',)
-        model = Project
\ No newline at end of file
+        model = Project
+
+
+class ReplayForm(forms.Form):
+    url = forms.URLField()
+    method = forms.ChoiceField(choices=((k, k) for k in (
+        'POST', 'GET', 'PUT', 'DELETE', 'HEAD', 'OPTIONS',
+        'CONNECT', 'TRACE',
+    )))
+    headers = forms.CharField(required=False, widget=forms.Textarea())
+    data = forms.CharField(required=False, widget=forms.Textarea())
+
+    def clean_headers(self):
+        value = self.cleaned_data.get('headers')
+        if not value:
+            return
+
+        return dict(line.split(': ') for line in value.split('\n'))
diff --git a/sentry/web/frontend/events.py b/sentry/web/frontend/events.py
index 9a38b30f29..c9618897bc 100644
--- a/sentry/web/frontend/events.py
+++ b/sentry/web/frontend/events.py
@@ -1,9 +1,14 @@
 import datetime
 
+from django.core.context_processors import csrf
+from django.views.decorators.csrf import csrf_protect
+
 from sentry.conf import settings
 from sentry.models import Event
 from sentry.web.decorators import login_required, can_manage, render_to_response
+from sentry.web.forms import ReplayForm
 from sentry.utils import get_filters
+from sentry.replays import Replayer
 
 
 @login_required
@@ -44,3 +49,42 @@ def event_list(request, project):
         'request': request,
         'filters': filters,
     })
+
+
+@login_required
+@csrf_protect
+def replay_event(request, project_id, event_id):
+    event = Event.objects.get(pk=event_id)
+    interfaces = event.interfaces
+    if 'sentry.interfaces.Http' not in interfaces:
+        # TODO: show a proper error
+        raise ValueError
+    http = interfaces['sentry.interfaces.Http']
+
+    initial = {
+        'url': http.url,
+        'method': http.method,
+        'headers': '\n'.join('%s: %v' % (k, v) for k, v in http.env.iteritems()),
+        'data': http.data,
+    }
+
+    form = ReplayForm(request.POST or None, initial=initial)
+    if form.is_valid():
+        result = Replayer(
+            url=form.cleaned_data['url'],
+            method=form.cleaned_data['method'],
+            data=form.cleaned_data['data'],
+            headers=form.cleaned_data['headers'],
+        ).replay()
+    else:
+        result = None
+
+    context = {
+        'request': request,
+        'event': event,
+        'form': form,
+        'result': result,
+    }
+    context.update(csrf(request))
+
+    return render_to_response('sentry/events/replay_request.html', context)
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
index 7f6a97207f..bbe01dbd3c 100644
--- a/sentry/web/urls.py
+++ b/sentry/web/urls.py
@@ -79,6 +79,7 @@ urlpatterns = patterns('',
     url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)', groups.group_plugin_action, name='sentry-group-plugin-action'),
 
     url(r'^(?P<project_id>\d+)/events$', events.event_list, name='sentry'),
+    url(r'^(?P<project_id>\d+)/events/(?P<event_id>\d+)/replay$', events.replay_event, name='sentry-replay'),
 
     url(r'^(?P<project_id>\d+)/search$', groups.search, name='sentry-search'),
 
