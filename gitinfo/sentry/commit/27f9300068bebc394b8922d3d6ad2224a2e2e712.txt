commit 27f9300068bebc394b8922d3d6ad2224a2e2e712
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Sep 12 21:43:22 2012 -0700

    Scrap terrible idea of a custom gunicorn worker and use awesome new Logan magic to fix gevent support (fixes GH-400)

diff --git a/setup.py b/setup.py
index a8b7c9f10c..898c6c1a4f 100755
--- a/setup.py
+++ b/setup.py
@@ -57,7 +57,7 @@ install_requires = [
     'django-picklefield>=0.2.0',
     'django-templatetag-sugar>=0.1.0',
     'gunicorn>=0.14.6',
-    'logan>=0.4.0',
+    'logan>=0.5.0',
     'pynliner>=0.4.0',
     'python-dateutil>=1.5.0,<2.0.0',
     'raven>=2.0.5',
diff --git a/src/sentry/services/http.py b/src/sentry/services/http.py
index 898255581b..87b853b0e4 100644
--- a/src/sentry/services/http.py
+++ b/src/sentry/services/http.py
@@ -6,56 +6,10 @@ sentry.services.http
 :license: BSD, see LICENSE for more details.
 """
 
-import sys
-import gunicorn
-
-from gunicorn import arbiter
-from gunicorn.app import djangoapp
-import gunicorn.util
-
+from django.core.management import call_command
 from sentry.services.base import Service
 
 
-def _setup_app(app):
-    djangoapp.make_default_env(app.cfg)
-    djwsgi = gunicorn.util.import_module("gunicorn.app.django_wsgi")
-    djwsgi.make_wsgi_application()
-
-
-class SentryApplication(djangoapp.DjangoApplication):
-
-    def __init__(self, options):
-        self.usage = None
-        self.cfg = None
-        self.config_file = options.get("config") or ""
-        self.options = options
-        self.callable = None
-        self.project_path = None
-
-        self.do_load_config()
-
-        for k, v in self.options.items():
-            if k.lower() in self.cfg.settings and v is not None:
-                self.cfg.set(k.lower(), v)
-
-    def init(self, parser, opts, args):
-        pass
-
-    def do_load_config(self):
-        original_args = sys.argv
-        sys.argv = sys.argv[0:1]
-        try:
-            return super(SentryApplication, self).do_load_config()
-        finally:
-            sys.argv = original_args
-
-    def load(self):
-        # application should be imported at first to setup env
-        from sentry.wsgi import application
-        _setup_app(self)
-        return application
-
-
 class SentryHTTPServer(Service):
     name = 'http'
 
@@ -86,12 +40,7 @@ class SentryHTTPServer(Service):
         if workers:
             options['workers'] = workers
 
-        self.app = SentryApplication(options)
+        self.options = options
 
     def run(self):
-        try:
-            arbiter.Arbiter(self.app).run()
-        except RuntimeError, e:
-            sys.stderr.write("\nError: %s\n\n" % e)
-            sys.stderr.flush()
-            sys.exit(1)
+        call_command('run_gunicorn', **self.options)
