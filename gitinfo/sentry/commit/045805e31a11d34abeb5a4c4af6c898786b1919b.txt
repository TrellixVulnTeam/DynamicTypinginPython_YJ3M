commit 045805e31a11d34abeb5a4c4af6c898786b1919b
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed Feb 12 13:20:38 2020 -0800

    chore(ts): Convert DropdownLink (#16920)

diff --git a/src/sentry/static/sentry/app/components/dropdownLink.jsx b/src/sentry/static/sentry/app/components/dropdownLink.jsx
deleted file mode 100644
index fbc600b74a..0000000000
--- a/src/sentry/static/sentry/app/components/dropdownLink.jsx
+++ /dev/null
@@ -1,110 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import classNames from 'classnames';
-
-import DropdownMenu from 'app/components/dropdownMenu';
-
-class DropdownLink extends React.Component {
-  static propTypes = {
-    ...DropdownMenu.propTypes,
-
-    title: PropTypes.node,
-    /** display dropdown caret */
-    caret: PropTypes.bool,
-    disabled: PropTypes.bool,
-
-    /** anchors menu to the right */
-    anchorRight: PropTypes.bool,
-
-    /**
-     * Always render children of dropdown menu, this is included to support
-     * menu items that open a confirm modal. Otherwise when dropdown menu hides,
-     * the modal also gets unmounted
-     */
-    alwaysRenderMenu: PropTypes.bool,
-
-    topLevelClasses: PropTypes.string,
-    menuClasses: PropTypes.string,
-  };
-
-  static defaultProps = {
-    alwaysRenderMenu: true,
-    disabled: false,
-    anchorRight: false,
-    caret: true,
-  };
-
-  constructor(...args) {
-    super(...args);
-  }
-
-  render() {
-    const {
-      anchorRight,
-      disabled,
-      title,
-      caret,
-      children,
-      menuClasses,
-      className,
-      alwaysRenderMenu,
-      topLevelClasses,
-      ...otherProps
-    } = this.props;
-
-    // Default anchor = left
-    const isRight = anchorRight;
-
-    // .dropdown-actor-title = flexbox to fix vertical alignment on firefox
-    // Need the extra container because dropdown-menu alignment is off if `dropdown-actor` is a flexbox
-    return (
-      <DropdownMenu alwaysRenderMenu={alwaysRenderMenu} {...otherProps}>
-        {({isOpen, getRootProps, getActorProps, getMenuProps}) => {
-          const shouldRenderMenu = alwaysRenderMenu || isOpen;
-          const cx = classNames('dropdown-actor', className, {
-            'dropdown-menu-right': isRight,
-            'dropdown-toggle': true,
-            hover: isOpen,
-            disabled,
-          });
-          const topLevelCx = classNames('dropdown', topLevelClasses, {
-            'pull-right': isRight,
-            'anchor-right': isRight,
-            open: isOpen,
-          });
-
-          return (
-            <span
-              {...getRootProps({
-                className: topLevelCx,
-              })}
-            >
-              <a
-                {...getActorProps({
-                  className: cx,
-                })}
-              >
-                <div className="dropdown-actor-title">
-                  <span>{title}</span>
-                  {caret && <i className="icon-arrow-down" />}
-                </div>
-              </a>
-
-              {shouldRenderMenu && (
-                <ul
-                  {...getMenuProps({
-                    className: classNames(menuClasses, 'dropdown-menu'),
-                  })}
-                >
-                  {children}
-                </ul>
-              )}
-            </span>
-          );
-        }}
-      </DropdownMenu>
-    );
-  }
-}
-
-export default DropdownLink;
diff --git a/src/sentry/static/sentry/app/components/dropdownLink.tsx b/src/sentry/static/sentry/app/components/dropdownLink.tsx
new file mode 100644
index 0000000000..0a1e0a3e59
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/dropdownLink.tsx
@@ -0,0 +1,115 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import classNames from 'classnames';
+
+import DropdownMenu from 'app/components/dropdownMenu';
+
+// .dropdown-actor-title = flexbox to fix vertical alignment on firefox Need
+// the extra container because dropdown-menu alignment is off if
+// `dropdown-actor` is a flexbox
+
+type Props = Omit<
+  Omit<DropdownMenu['props'], 'children'>,
+  keyof typeof DropdownMenu.defaultProps
+> &
+  Partial<typeof DropdownMenu.defaultProps> & {
+    title: React.ReactNode;
+    children: React.ReactNode;
+    /**
+     * display dropdown caret
+     */
+    caret?: boolean;
+    disabled?: boolean;
+    /**
+     * Anchors menu to the right
+     */
+    anchorRight?: boolean;
+    /**
+     * Always render children of dropdown menu, this is included to support menu
+     * items that open a confirm modal. Otherwise when dropdown menu hides, the
+     * modal also gets unmounted
+     */
+    alwaysRenderMenu?: boolean;
+    topLevelClasses?: string;
+    menuClasses?: string;
+    className?: string;
+  };
+
+const DropdownLink = ({
+  anchorRight,
+  disabled,
+  title,
+  caret,
+  children,
+  menuClasses,
+  className,
+  alwaysRenderMenu,
+  topLevelClasses,
+  ...otherProps
+}: Props) => (
+  <DropdownMenu alwaysRenderMenu={alwaysRenderMenu} {...otherProps}>
+    {({isOpen, getRootProps, getActorProps, getMenuProps}) => {
+      const shouldRenderMenu = alwaysRenderMenu || isOpen;
+      const cx = classNames('dropdown-actor', className, {
+        'dropdown-menu-right': anchorRight,
+        'dropdown-toggle': true,
+        hover: isOpen,
+        disabled,
+      });
+      const topLevelCx = classNames('dropdown', topLevelClasses, {
+        'pull-right': anchorRight,
+        'anchor-right': anchorRight,
+        open: isOpen,
+      });
+
+      return (
+        <span
+          {...getRootProps({
+            className: topLevelCx,
+          })}
+        >
+          <a
+            {...getActorProps({
+              className: cx,
+            })}
+          >
+            <div className="dropdown-actor-title">
+              <span>{title}</span>
+              {caret && <i className="icon-arrow-down" />}
+            </div>
+          </a>
+
+          {shouldRenderMenu && (
+            <ul
+              {...getMenuProps({
+                className: classNames(menuClasses, 'dropdown-menu'),
+              })}
+            >
+              {children}
+            </ul>
+          )}
+        </span>
+      );
+    }}
+  </DropdownMenu>
+);
+
+DropdownLink.defaultProps = {
+  alwaysRenderMenu: true,
+  disabled: false,
+  anchorRight: false,
+  caret: true,
+};
+
+DropdownLink.propTypes = {
+  ...DropdownMenu.propTypes,
+  title: PropTypes.node,
+  caret: PropTypes.bool,
+  disabled: PropTypes.bool,
+  anchorRight: PropTypes.bool,
+  alwaysRenderMenu: PropTypes.bool,
+  topLevelClasses: PropTypes.string,
+  menuClasses: PropTypes.string,
+};
+
+export default DropdownLink;
diff --git a/src/sentry/static/sentry/app/components/dropdownMenu.tsx b/src/sentry/static/sentry/app/components/dropdownMenu.tsx
index ab55d1fe35..a79415dd40 100644
--- a/src/sentry/static/sentry/app/components/dropdownMenu.tsx
+++ b/src/sentry/static/sentry/app/components/dropdownMenu.tsx
@@ -10,12 +10,14 @@ type GetActorArgs = {
   onMouseLeave?: (e: React.MouseEvent<Element>) => void;
   onKeyDown?: (e: React.KeyboardEvent<Element>) => void;
   style?: React.CSSProperties;
+  className?: string;
 };
 
 type GetMenuArgs = {
   onClick?: (e: React.MouseEvent<Element>) => void;
   onMouseEnter?: (e: React.MouseEvent<Element>) => void;
   onMouseLeave?: (e: React.MouseEvent<Element>) => void;
+  className?: string;
 };
 
 // Props for the "actor" element of `<DropdownMenu>`
