commit a58a01c3032f33151e2239e5ad57f6ec3d5ba35c
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Tue Feb 25 12:35:00 2020 +0100

    ref(ui): Added tooltip - Datascrubbers v2 - Part 9 (#17090)

diff --git a/src/sentry/static/sentry/app/components/contextData.jsx b/src/sentry/static/sentry/app/components/contextData.jsx
index 140cd7f74c..d822fb965d 100644
--- a/src/sentry/static/sentry/app/components/contextData.jsx
+++ b/src/sentry/static/sentry/app/components/contextData.jsx
@@ -1,11 +1,10 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-
 import isString from 'lodash/isString';
 import isNumber from 'lodash/isNumber';
 import isArray from 'lodash/isArray';
-import AnnotatedText from 'app/components/events/meta/annotatedText';
 
+import AnnotatedText from 'app/components/events/meta/annotatedText';
 import {isUrl} from 'app/utils';
 
 function looksLikeObjectRepr(value) {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/assembly.tsx b/src/sentry/static/sentry/app/components/events/interfaces/assembly.tsx
index 2bbb504eb6..269db96459 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/assembly.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/assembly.tsx
@@ -13,7 +13,7 @@ interface Props {
   version: string;
   culture: string;
   publicKeyToken: string;
-  filePath: string;
+  filePath: string | null;
 }
 
 const Assembly = ({name, version, culture, publicKeyToken, filePath}: Props) => {
@@ -53,7 +53,7 @@ Assembly.propTypes = {
   version: PropTypes.string.isRequired,
   culture: PropTypes.string.isRequired,
   publicKeyToken: PropTypes.string.isRequired,
-  filePath: PropTypes.string.isRequired,
+  filePath: PropTypes.string,
 };
 
 const AssemblyWrapper = styled('div')`
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
index 768f0828cd..2c455329a7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
@@ -21,7 +21,7 @@ type Props = {
 const KeyValueList = ({
   data,
   isContextData = false,
-  isSorted = false,
+  isSorted = true,
   raw = false,
   longKeys = false,
   onClick,
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
index 8fbf24d818..272c53fbe0 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
@@ -1,10 +1,10 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import styled from '@emotion/styled';
 
+import styled from '@emotion/styled';
 import EventDataSection from 'app/components/events/eventDataSection';
 import SentryTypes from 'app/sentryTypes';
-import RichHttpContent from 'app/components/events/interfaces/richHttpContent';
+import RichHttpContent from 'app/components/events/interfaces/richHttpContent/richHttpContent';
 import {getFullUrl, getCurlCommand} from 'app/components/events/interfaces/utils';
 import {isUrl} from 'app/utils';
 import {t} from 'app/locale';
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
deleted file mode 100644
index a3447f8e22..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
+++ /dev/null
@@ -1,116 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import {objectIsEmpty} from 'app/utils';
-import {objectToSortedTupleArray} from 'app/components/events/interfaces/utils';
-import {t} from 'app/locale';
-import ClippedBox from 'app/components/clippedBox';
-import ContextData from 'app/components/contextData';
-import ErrorBoundary from 'app/components/errorBoundary';
-import KeyValueList from 'app/components/events/interfaces/keyValueList/keyValueList';
-import AnnotatedText from 'app/components/events/meta/annotatedText';
-import MetaData from 'app/components/events/meta/metaData';
-
-class RichHttpContent extends React.Component {
-  static propTypes = {
-    data: PropTypes.object.isRequired,
-  };
-
-  getBodySection = (data, value, meta) => {
-    // The http interface provides an inferred content type for the data body.
-    if (meta && (!value || value instanceof String)) {
-      // TODO(markus): Currently annotated nested objects are shown without
-      // annotations.
-      return (
-        <pre>
-          <AnnotatedText
-            value={value}
-            chunks={meta.chunks}
-            remarks={meta.rem}
-            errors={meta.err}
-          />
-        </pre>
-      );
-    } else if (value) {
-      switch (data.inferredContentType) {
-        case 'application/json':
-          return <ContextData data={value} preserveQuotes />;
-        case 'application/x-www-form-urlencoded':
-        case 'multipart/form-data':
-          return <KeyValueList data={objectToSortedTupleArray(value)} isContextData />;
-        default:
-          return <pre>{JSON.stringify(value, null, 2)}</pre>;
-      }
-    } else {
-      return null;
-    }
-  };
-
-  getQueryStringOrRaw = data => {
-    try {
-      // Sentry API abbreviates long query string values, sometimes resulting in
-      // an un-parsable querystring ... stay safe kids
-      return <KeyValueList data={data} isContextData />;
-    } catch (e) {
-      return <pre>{data}</pre>;
-    }
-  };
-
-  render() {
-    const data = this.props.data;
-    return (
-      <div>
-        {!objectIsEmpty(data.query) && (
-          <ClippedBox title={t('Query String')}>
-            <ErrorBoundary mini>{this.getQueryStringOrRaw(data.query)}</ErrorBoundary>
-          </ClippedBox>
-        )}
-        {data.fragment && (
-          <ClippedBox title={t('Fragment')}>
-            <ErrorBoundary mini>
-              <pre>{data.fragment}</pre>
-            </ErrorBoundary>
-          </ClippedBox>
-        )}
-
-        <MetaData object={data} prop="data">
-          {(value, meta) => {
-            if (value || meta) {
-              return (
-                <ClippedBox title={t('Body')}>
-                  {this.getBodySection(data, value, meta)}
-                </ClippedBox>
-              );
-            }
-
-            return null;
-          }}
-        </MetaData>
-
-        {data.cookies && !objectIsEmpty(data.cookies) && (
-          <ClippedBox title={t('Cookies')} defaultCollapsed>
-            <ErrorBoundary mini>
-              <KeyValueList data={data.cookies} />
-            </ErrorBoundary>
-          </ClippedBox>
-        )}
-        {!objectIsEmpty(data.headers) && (
-          <ClippedBox title={t('Headers')}>
-            <ErrorBoundary mini>
-              <KeyValueList data={data.headers} />
-            </ErrorBoundary>
-          </ClippedBox>
-        )}
-        {!objectIsEmpty(data.env) && (
-          <ClippedBox title={t('Environment')} defaultCollapsed>
-            <ErrorBoundary mini>
-              <KeyValueList data={objectToSortedTupleArray(data.env)} />
-            </ErrorBoundary>
-          </ClippedBox>
-        )}
-      </div>
-    );
-  }
-}
-
-export default RichHttpContent;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/getTransformedData.tsx b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/getTransformedData.tsx
new file mode 100644
index 0000000000..7594e5f50d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/getTransformedData.tsx
@@ -0,0 +1,15 @@
+import {defined} from 'app/utils';
+
+function getTransformedData(data: any) {
+  if (Array.isArray(data)) {
+    return data.filter(dataValue => defined(dataValue));
+  }
+
+  if (typeof data === 'object') {
+    return Object.keys(data).map(key => [key, data[key]]);
+  }
+
+  return [];
+}
+
+export default getTransformedData;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContent.tsx b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContent.tsx
new file mode 100644
index 0000000000..f57fe412b2
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContent.tsx
@@ -0,0 +1,62 @@
+import React from 'react';
+
+import {getMeta} from 'app/components/events/meta/metaProxy';
+import {defined} from 'app/utils';
+import {t} from 'app/locale';
+import ClippedBox from 'app/components/clippedBox';
+import ErrorBoundary from 'app/components/errorBoundary';
+
+import RichHttpContentClippedBoxKeyValueList from './richHttpContentClippedBoxKeyValueList';
+import RichHttpContentClippedBoxBodySection from './richHttpContentClippedBoxBodySection';
+import {RichHttpContentData} from './types';
+
+const RichHttpContent = ({data}: RichHttpContentData) => (
+  <React.Fragment>
+    {defined(data.query) && (
+      <RichHttpContentClippedBoxKeyValueList
+        title={t('Query String')}
+        data={data.query}
+        meta={getMeta(data, 'query')}
+        isContextData
+      />
+    )}
+    {defined(data.fragment) && (
+      <ClippedBox title={t('Fragment')}>
+        <ErrorBoundary mini>
+          <pre>{data.fragment}</pre>
+        </ErrorBoundary>
+      </ClippedBox>
+    )}
+    {defined(data.data) && (
+      <RichHttpContentClippedBoxBodySection
+        data={data.data}
+        meta={getMeta(data, 'data')}
+        inferredContentType={data.inferredContentType}
+      />
+    )}
+    {defined(data.cookies) && Object.keys(data.cookies).length > 0 && (
+      <RichHttpContentClippedBoxKeyValueList
+        defaultCollapsed
+        title={t('Cookies')}
+        data={data.cookies}
+        meta={getMeta(data, 'cookies')}
+      />
+    )}
+    {defined(data.headers) && (
+      <RichHttpContentClippedBoxKeyValueList
+        title={t('Headers')}
+        data={data.headers}
+        meta={getMeta(data, 'headers')}
+      />
+    )}
+    {defined(data.env) && (
+      <RichHttpContentClippedBoxKeyValueList
+        defaultCollapsed
+        title={t('Environment')}
+        data={data.env}
+        meta={getMeta(data, 'env')}
+      />
+    )}
+  </React.Fragment>
+);
+export default RichHttpContent;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxBodySection.tsx b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxBodySection.tsx
new file mode 100644
index 0000000000..338d82e6a1
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxBodySection.tsx
@@ -0,0 +1,92 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import AnnotatedText from 'app/components/events/meta/annotatedText';
+import KeyValueList from 'app/components/events/interfaces/keyValueList/keyValueListV2';
+import {Meta} from 'app/types';
+import ContextData from 'app/components/contextData';
+import {defined} from 'app/utils';
+import ErrorBoundary from 'app/components/errorBoundary';
+import ClippedBox from 'app/components/clippedBox';
+import {t} from 'app/locale';
+
+import getTransformedData from './getTransformedData';
+import {SubData, InferredContentType} from './types';
+
+type Props = {
+  data: SubData;
+  inferredContentType: InferredContentType;
+  meta?: Meta;
+};
+
+const RichHttpContentClippedBoxBodySection = ({
+  data: value,
+  meta,
+  inferredContentType,
+}: Props) => {
+  const getContent = () => {
+    if (!defined(value)) {
+      return null;
+    }
+
+    if (meta && typeof value === 'string') {
+      return (
+        // <pre> is wrapping AnnotatedText to avoid breaking certain tooltips (untested, yolo)
+        <pre>
+          <AnnotatedText
+            value={value}
+            chunks={meta.chunks}
+            remarks={meta.rem}
+            errors={meta.err}
+            data-test-id="rich-http-content-body-context-data"
+          />
+        </pre>
+      );
+    }
+
+    switch (inferredContentType) {
+      case 'application/json':
+        return (
+          <ContextData
+            data-test-id="rich-http-content-body-context-data"
+            data={value}
+            preserveQuotes
+          />
+        );
+      case 'application/x-www-form-urlencoded':
+      case 'multipart/form-data':
+        return (
+          <KeyValueList
+            data-test-id="rich-http-content-body-key-value-list"
+            data={getTransformedData(value).map(([key, v]) => ({
+              key,
+              subject: key,
+              value: v,
+              meta,
+            }))}
+            isContextData
+          />
+        );
+      default:
+        return (
+          <pre data-test-id="rich-http-content-body-section-pre">
+            {JSON.stringify(value, null, 2)}
+          </pre>
+        );
+    }
+  };
+
+  const content = getContent();
+
+  return content ? (
+    <ClippedBox title={t('Body')} defaultCollapsed>
+      <ErrorBoundary mini>{content}</ErrorBoundary>
+    </ClippedBox>
+  ) : null;
+};
+
+RichHttpContentClippedBoxBodySection.propTypes = {
+  meta: PropTypes.object,
+};
+
+export default RichHttpContentClippedBoxBodySection;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxKeyValueList.tsx b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxKeyValueList.tsx
new file mode 100644
index 0000000000..2fd90adf6f
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxKeyValueList.tsx
@@ -0,0 +1,59 @@
+import React from 'react';
+
+import ErrorBoundary from 'app/components/errorBoundary';
+import ClippedBox from 'app/components/clippedBox';
+import KeyValueList from 'app/components/events/interfaces/keyValueList/keyValueListV2';
+import {Meta} from 'app/types';
+
+import getTransformedData from './getTransformedData';
+import {Data} from './types';
+
+type Props = {
+  title: string;
+  data: Data[keyof Data];
+  defaultCollapsed?: boolean;
+  isContextData?: boolean;
+  meta?: Meta;
+};
+
+const RichHttpContentClippedBoxKeyValueList = ({
+  data,
+  title,
+  defaultCollapsed = false,
+  isContextData = false,
+  meta,
+}: Props) => {
+  const getContent = (transformedData: Array<[string, string]>) => {
+    // Sentry API abbreviates long query string values, sometimes resulting in
+    // an un-parsable querystring ... stay safe kids
+    try {
+      return (
+        <KeyValueList
+          data={transformedData.map(([key, value]) => ({
+            key,
+            subject: key,
+            value,
+            meta,
+          }))}
+          isContextData={isContextData}
+        />
+      );
+    } catch {
+      return <pre>{data}</pre>;
+    }
+  };
+
+  const transformedData = getTransformedData(data);
+
+  if (transformedData.length === 0) {
+    return null;
+  }
+
+  return (
+    <ClippedBox title={title} defaultCollapsed={defaultCollapsed}>
+      <ErrorBoundary mini>{getContent(transformedData)}</ErrorBoundary>
+    </ClippedBox>
+  );
+};
+
+export default RichHttpContentClippedBoxKeyValueList;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/types.tsx b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/types.tsx
new file mode 100644
index 0000000000..85464b41e0
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/types.tsx
@@ -0,0 +1,21 @@
+export type RichHttpContentData = {
+  data: Data;
+};
+
+export type Data = {
+  headers: Array<[string, string]>;
+  query: Array<[string, string] | null> | {[key: string]: any};
+  env: {[key: string]: any} | null;
+  fragment: string | null;
+  cookies: Array<[string, string]>;
+  data: SubData;
+  inferredContentType: InferredContentType;
+};
+
+export type InferredContentType =
+  | null
+  | 'application/json'
+  | 'application/x-www-form-urlencoded'
+  | 'multipart/form-data';
+
+export type SubData = string | null | {[key: string]: any} | Array<{[key: string]: any}>;
diff --git a/tests/acceptance/test_issue_details.py b/tests/acceptance/test_issue_details.py
index 2ef73042f8..ca736f579f 100644
--- a/tests/acceptance/test_issue_details.py
+++ b/tests/acceptance/test_issue_details.py
@@ -61,7 +61,7 @@ class IssueDetailsTest(AcceptanceTestCase, SnubaTestCase):
     def test_python_rawbody_event(self):
         event = self.create_sample_event(platform="python-rawbody")
         self.page.visit_issue(self.org.slug, event.group.id)
-        self.browser.move_to(".request pre span")
+        self.browser.move_to('[data-test-id="rich-http-content-body-context-data"]')
         self.browser.snapshot("issue details python raw body")
 
     def test_python_formdata_event(self):
diff --git a/tests/js/spec/components/events/interfaces/contexts.spec.jsx b/tests/js/spec/components/events/interfaces/contexts.spec.jsx
index 924c8fa5ec..233b80da8b 100644
--- a/tests/js/spec/components/events/interfaces/contexts.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/contexts.spec.jsx
@@ -1,17 +1,17 @@
 import React from 'react';
 import {mount} from 'sentry-test/enzyme';
 
-import UserContextType from 'app/components/events/contexts/user/user';
+import User from 'app/components/events/contexts/user/user';
 import {FILTER_MASK} from 'app/constants';
 
-describe('UserContextType', function() {
+describe('User', function() {
   it("displays filtered values but doesn't use them for avatar", function() {
     const user1 = {
       id: '26',
       name: FILTER_MASK,
     };
 
-    const wrapper1 = mount(<UserContextType data={user1} />);
+    const wrapper1 = mount(<User data={user1} />);
     expect(wrapper1.find('[data-test-id="user-context-name-value"]').text()).toEqual(
       FILTER_MASK
     );
@@ -22,7 +22,7 @@ describe('UserContextType', function() {
       email: FILTER_MASK,
     };
 
-    const wrapper2 = mount(<UserContextType data={user2} />);
+    const wrapper2 = mount(<User data={user2} />);
     expect(wrapper2.find('[data-test-id="user-context-email-value"]').text()).toEqual(
       FILTER_MASK
     );
@@ -33,7 +33,7 @@ describe('UserContextType', function() {
       username: FILTER_MASK,
     };
 
-    const wrapper3 = mount(<UserContextType data={user3} />);
+    const wrapper3 = mount(<User data={user3} />);
     expect(wrapper3.find('[data-test-id="user-context-username-value"]').text()).toEqual(
       FILTER_MASK
     );
diff --git a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
index ded91d95e2..1213626fe0 100644
--- a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
@@ -1,63 +1,57 @@
 import React from 'react';
-import {mount, shallow} from 'sentry-test/enzyme';
 
-import RichHttpContent from 'app/components/events/interfaces/richHttpContent';
+import {mount, shallow} from 'sentry-test/enzyme';
+import RichHttpContent from 'app/components/events/interfaces/richHttpContent/richHttpContent';
 
 describe('RichHttpContent', function() {
   let data;
-  let elem;
-
-  beforeEach(function() {
-    data = {
-      query: '',
-      data: '',
-      headers: [],
-      cookies: [],
-      env: {},
-    };
-    elem = shallow(<RichHttpContent data={data} />).instance();
-  });
 
   afterEach(function() {});
 
   describe('getBodySection', function() {
     it('should return plain-text when given unrecognized inferred Content-Type', function() {
-      const out = elem.getBodySection(
-        {inferredContentType: null}, // no inferred content type
-        'helloworld',
-        null
-      );
-
-      expect(out.type).toEqual('pre');
+      data = {
+        query: '',
+        data: 'helloworld',
+        headers: [],
+        cookies: [],
+        env: {},
+        inferredContentType: null,
+      };
+      const wrapper = mount(<RichHttpContent data={data} />);
+      expect(
+        wrapper.find('[data-test-id="rich-http-content-body-section-pre"]')
+      ).toBeTruthy();
     });
 
     it('should return a KeyValueList element when inferred Content-Type is x-www-form-urlencoded', function() {
-      const out = elem.getBodySection(
-        {inferredContentType: 'application/x-www-form-urlencoded'},
-        {foo: ['bar'], bar: ['baz']},
-        null
-      );
-
-      // NOTE: displayName is set manually in this class
-      expect(out.type.displayName).toEqual('KeyValueList');
-      expect(out.props.data).toEqual([
-        ['bar', 'baz'],
-        ['foo', 'bar'],
-      ]);
+      data = {
+        query: '',
+        data: {foo: ['bar'], bar: ['baz']},
+        headers: [],
+        cookies: [],
+        env: {},
+        inferredContentType: 'application/x-www-form-urlencoded',
+      };
+      const wrapper = mount(<RichHttpContent data={data} />);
+      expect(
+        wrapper.find('[data-test-id="rich-http-content-body-key-value-list"]')
+      ).toBeTruthy();
     });
 
     it('should return a ContextData element when inferred Content-Type is application/json', function() {
-      const out = elem.getBodySection(
-        {inferredContentType: 'application/json'},
-        {foo: 'bar'},
-        null
-      );
-
-      // NOTE: displayName is set manually in this class
-      expect(out.type.displayName).toEqual('ContextData');
-      expect(out.props.data).toEqual({
-        foo: 'bar',
-      });
+      data = {
+        query: '',
+        data: {foo: 'bar'},
+        headers: [],
+        cookies: [],
+        env: {},
+        inferredContentType: 'application/json',
+      };
+      const wrapper = mount(<RichHttpContent data={data} />);
+      expect(
+        wrapper.find('[data-test-id="rich-http-content-body-context-data"]')
+      ).toBeTruthy();
     });
 
     it('should not blow up in a malformed uri', function() {
