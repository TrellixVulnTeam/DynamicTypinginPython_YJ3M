commit 5b079abd543cd98b5099f8f47707173bc06a4fdf
Author: Jan Michael Auer <account@jauer.org>
Date:   Wed Oct 17 10:16:10 2018 +0200

    fix(debug_files): Fix None query in DIF search (#10160)
    
    * fix(debug_files): Fix None query in DIF search
    
    * fix: Add basic search tests

diff --git a/src/sentry/api/endpoints/debug_files.py b/src/sentry/api/endpoints/debug_files.py
index 8cf0b8b719..eefbaafda0 100644
--- a/src/sentry/api/endpoints/debug_files.py
+++ b/src/sentry/api/endpoints/debug_files.py
@@ -119,12 +119,17 @@ class DebugFilesEndpoint(ProjectEndpoint):
         ).select_related('file')
 
         if query:
+            q = Q(object_name__icontains=query) \
+                | Q(debug_id__icontains=query) \
+                | Q(cpu_name__icontains=query) \
+                | Q(file__headers__icontains=query)
+
             KNOWN_DIF_TYPES_REVERSE = dict((v, k) for (k, v) in six.iteritems(KNOWN_DIF_TYPES))
-            queryset = queryset.filter(
-                Q(object_name__icontains=query) | Q(debug_id__icontains=query) | Q(
-                    cpu_name__icontains=query) | Q(file__headers__icontains=query) | Q(
-                        file__headers__icontains=KNOWN_DIF_TYPES_REVERSE.get(query))
-            )
+            dif_type = KNOWN_DIF_TYPES_REVERSE.get(query)
+            if dif_type:
+                q |= Q(file__headers__icontains=dif_type)
+
+            queryset = queryset.filter(q)
 
         download_requested = request.GET.get('id') is not None
         if download_requested and (request.access.has_scope('project:write')):
@@ -135,6 +140,7 @@ class DebugFilesEndpoint(ProjectEndpoint):
             queryset=queryset,
             order_by='-id',
             paginator_cls=OffsetPaginator,
+            default_per_page=20,
             on_results=lambda x: serialize(x, request.user),
         )
 
diff --git a/tests/sentry/api/endpoints/test_debug_files.py b/tests/sentry/api/endpoints/test_debug_files.py
index f37803cb9c..e242de95fd 100644
--- a/tests/sentry/api/endpoints/test_debug_files.py
+++ b/tests/sentry/api/endpoints/test_debug_files.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import zipfile
+from uuid import uuid4
 from six import BytesIO, text_type
 
 from django.core.files.uploadedfile import SimpleUploadedFile
@@ -21,6 +22,21 @@ org.slf4j.helpers.Util$ClassContextSecurityManager -> org.a.b.g$a:
 
 
 class DebugFilesUploadTest(APITestCase):
+    def _upload_proguard(self, url, uuid):
+        out = BytesIO()
+        f = zipfile.ZipFile(out, 'w')
+        f.writestr('proguard/%s.txt' % uuid, PROGUARD_SOURCE)
+        f.close()
+
+        return self.client.post(
+            url, {
+                'file':
+                SimpleUploadedFile('symbols.zip', out.getvalue(),
+                                   content_type='application/zip'),
+            },
+            format='multipart'
+        )
+
     def test_simple_proguard_upload(self):
         project = self.create_project(name='foo')
 
@@ -34,20 +50,7 @@ class DebugFilesUploadTest(APITestCase):
 
         self.login_as(user=self.user)
 
-        out = BytesIO()
-        f = zipfile.ZipFile(out, 'w')
-        f.writestr('proguard/%s.txt' % PROGUARD_UUID, PROGUARD_SOURCE)
-        f.writestr('ignored-file.txt', b'This is just some stuff')
-        f.close()
-
-        response = self.client.post(
-            url, {
-                'file':
-                SimpleUploadedFile('symbols.zip', out.getvalue(),
-                                   content_type='application/zip'),
-            },
-            format='multipart'
-        )
+        response = self._upload_proguard(url, PROGUARD_UUID)
 
         assert response.status_code == 201, response.content
         assert len(response.data) == 1
@@ -72,19 +75,7 @@ class DebugFilesUploadTest(APITestCase):
 
         self.login_as(user=self.user)
 
-        out = BytesIO()
-        f = zipfile.ZipFile(out, 'w')
-        f.writestr('proguard/%s.txt' % PROGUARD_UUID, PROGUARD_SOURCE)
-        f.close()
-
-        response = self.client.post(
-            url, {
-                'file':
-                SimpleUploadedFile('symbols.zip', out.getvalue(),
-                                   content_type='application/zip'),
-            },
-            format='multipart'
-        )
+        response = self._upload_proguard(url, PROGUARD_UUID)
 
         assert response.status_code == 201, response.content
         assert len(response.data) == 1
@@ -139,19 +130,7 @@ class DebugFilesUploadTest(APITestCase):
 
         self.login_as(user=self.user)
 
-        out = BytesIO()
-        f = zipfile.ZipFile(out, 'w')
-        f.writestr('proguard/%s.txt' % PROGUARD_UUID, PROGUARD_SOURCE)
-        f.close()
-
-        response = self.client.post(
-            url, {
-                'file':
-                SimpleUploadedFile('symbols.zip', out.getvalue(),
-                                   content_type='application/zip'),
-            },
-            format='multipart'
-        )
+        response = self._upload_proguard(url, PROGUARD_UUID)
 
         assert response.status_code == 201, response.content
         assert len(response.data) == 1
@@ -205,19 +184,7 @@ class DebugFilesUploadTest(APITestCase):
 
         self.login_as(user=self.user)
 
-        out = BytesIO()
-        f = zipfile.ZipFile(out, 'w')
-        f.writestr('proguard/%s.txt' % PROGUARD_UUID, PROGUARD_SOURCE)
-        f.close()
-
-        response = self.client.post(
-            url, {
-                'file':
-                SimpleUploadedFile('symbols.zip', out.getvalue(),
-                                   content_type='application/zip'),
-            },
-            format='multipart'
-        )
+        response = self._upload_proguard(url, PROGUARD_UUID)
 
         assert response.status_code == 201, response.content
         assert len(response.data) == 1
@@ -302,3 +269,41 @@ class DebugFilesUploadTest(APITestCase):
         assert response.status_code == 204, response.content
 
         assert ProjectDebugFile.objects.count() == 0
+
+    def test_dsyms_search(self):
+        project = self.create_project(name='foo')
+
+        url = reverse(
+            'sentry-api-0-dsym-files',
+            kwargs={
+                'organization_slug': project.organization.slug,
+                'project_slug': project.slug,
+            }
+        )
+
+        self.login_as(user=self.user)
+
+        first_uuid = None
+        last_uuid = None
+        for i in range(25):
+            last_uuid = text_type(uuid4())
+            if first_uuid is None:
+                first_uuid = last_uuid
+            self._upload_proguard(url, last_uuid)
+
+        # Test max 20 per page
+        response = self.client.get(url)
+        assert response.status_code == 200, response.content
+        dsyms = response.data
+        assert len(dsyms) == 20
+
+        # Test should return last
+        response = self.client.get(url + "?query=" + last_uuid)
+        assert response.status_code == 200, response.content
+        dsyms = response.data
+        assert len(dsyms) == 1
+
+        response = self.client.get(url + "?query=proguard")
+        assert response.status_code == 200, response.content
+        dsyms = response.data
+        assert len(dsyms) == 20
