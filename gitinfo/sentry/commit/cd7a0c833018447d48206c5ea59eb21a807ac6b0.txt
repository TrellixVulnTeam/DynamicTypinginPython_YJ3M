commit cd7a0c833018447d48206c5ea59eb21a807ac6b0
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Mon Jul 2 14:16:13 2018 -0500

    feat: Add 'geo' (via GeoIP) to User interface if ip_address is present (#8853)

diff --git a/.travis.yml b/.travis.yml
index ad5238efc8..525278dcee 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,6 +21,7 @@ addons:
     update: true
     packages:
       - libxmlsec1-dev
+      - libgeoip-dev
   chrome: stable
 
 env:
diff --git a/requirements-optional.txt b/requirements-optional.txt
index 47805e4320..9885acb2dd 100644
--- a/requirements-optional.txt
+++ b/requirements-optional.txt
@@ -2,3 +2,4 @@ google-cloud-pubsub>=0.28.3,<0.29
 # See https://github.com/GoogleCloudPlatform/google-cloud-python/issues/4001
 grpcio==1.4.0
 python3-saml>=1.4.0,<1.5
+GeoIP==1.3.2
diff --git a/src/sentry/interfaces/geo.py b/src/sentry/interfaces/geo.py
new file mode 100644
index 0000000000..a4b5d0f2cd
--- /dev/null
+++ b/src/sentry/interfaces/geo.py
@@ -0,0 +1,48 @@
+from __future__ import absolute_import
+
+__all__ = ('Geo', )
+
+from sentry.interfaces.base import Interface
+from sentry.utils.geo import geo_by_addr
+
+
+class Geo(Interface):
+    """
+    The (approximate) geographical location of the end user.
+
+    >>> {
+    >>>     'country_code': 'US',
+    >>>     'city': 'San Francisco',
+    >>>     'region': 'CA',
+    >>> }
+    """
+
+    def get_path(self):
+        return 'geo'
+
+    @classmethod
+    def to_python(cls, data):
+        kwargs = {
+            'country_code': data.get('country_code'),
+            'city': data.get('city'),
+            'region': data.get('region'),
+        }
+
+        return cls(**kwargs)
+
+    @classmethod
+    def from_ip_address(cls, ip_address):
+        try:
+            geo = geo_by_addr(ip_address)
+        except Exception:
+            geo = None
+
+        if not geo:
+            return None
+
+        data = {
+            'country_code': geo.get('country_code'),
+            'city': geo.get('city'),
+            'region': geo.get('region'),
+        }
+        return cls.to_python(data)
diff --git a/src/sentry/interfaces/schemas.py b/src/sentry/interfaces/schemas.py
index d4a6fbf3af..22ded0696c 100644
--- a/src/sentry/interfaces/schemas.py
+++ b/src/sentry/interfaces/schemas.py
@@ -255,6 +255,16 @@ EXCEPTION_INTERFACE_SCHEMA = {
     'additionalProperties': True,
 }
 
+GEO_INTERFACE_SCHEMA = {
+    'type': 'object',
+    'properties': {
+        'country_code': {'type': 'string'},
+        'city': {'type': 'string'},
+        'region': {'type': 'string'},
+    },
+    'additionalProperties': False,
+}
+
 DEVICE_INTERFACE_SCHEMA = {
     'type': 'object',
     'properties': {
@@ -438,6 +448,7 @@ EVENT_SCHEMA = {
         # Other interfaces
         'sentry.interfaces.User': {'type': 'object'},
         'sentry.interfaces.Http': {},
+        'geo': {},  # GEO_INTERFACE_SCHEMA
 
         # Other reserved keys. (some are added in processing)
         'project': {'type': ['number', 'string']},
@@ -705,6 +716,7 @@ INTERFACE_SCHEMAS = {
     'template': TEMPLATE_INTERFACE_SCHEMA,
     'sentry.interfaces.Template': TEMPLATE_INTERFACE_SCHEMA,
     'device': DEVICE_INTERFACE_SCHEMA,
+    'geo': GEO_INTERFACE_SCHEMA,
 
     # Security reports
     'sentry.interfaces.Csp': CSP_INTERFACE_SCHEMA,
diff --git a/src/sentry/interfaces/user.py b/src/sentry/interfaces/user.py
index c69ae5d65c..3d41ec3d28 100644
--- a/src/sentry/interfaces/user.py
+++ b/src/sentry/interfaces/user.py
@@ -12,6 +12,7 @@ __all__ = ('User', )
 import six
 
 from sentry.interfaces.base import Interface, InterfaceValidationError
+from sentry.interfaces.geo import Geo
 from sentry.utils.safe import trim, trim_dict
 from sentry.web.helpers import render_to_string
 from sentry.utils.validators import validate_ip
@@ -78,6 +79,12 @@ class User(Interface):
         except ValueError:
             raise InterfaceValidationError("Invalid value for 'ip_address'")
 
+        geo = data.pop('geo', None)
+        if not geo and ip_address:
+            geo = Geo.from_ip_address(ip_address)
+        elif geo:
+            geo = Geo.to_python(geo)
+
         # TODO(dcramer): patch in fix to deal w/ old data but not allow new
         # if not (ident or email or username or ip_address):
         #     raise ValueError('No identifying value')
@@ -88,11 +95,20 @@ class User(Interface):
             'username': username,
             'ip_address': ip_address,
             'name': name,
+            'geo': geo,
         }
 
         kwargs['data'] = trim_dict(extra_data)
         return cls(**kwargs)
 
+    def to_json(self):
+        # geo needs to be JSON encoded if it exists
+        geo = self._data.pop('geo') if 'geo' in self._data else {}
+        json = super(User, self).to_json()
+        if geo:
+            json['geo'] = geo.to_json()
+        return json
+
     def get_api_context(self, is_public=False):
         return {
             'id': self.id,
diff --git a/src/sentry/utils/geo.py b/src/sentry/utils/geo.py
new file mode 100644
index 0000000000..f391522178
--- /dev/null
+++ b/src/sentry/utils/geo.py
@@ -0,0 +1,28 @@
+from __future__ import absolute_import
+
+import logging
+
+from django.conf import settings
+
+
+logger = logging.getLogger(__name__)
+
+
+# default is no-op
+geo_by_addr = lambda ip: None
+
+try:
+    import GeoIP
+except ImportError:
+    logger.warning("GeoIP module not available.")
+else:
+    geoip_path = getattr(settings, 'GEOIP_PATH', None)
+    if geoip_path:
+        try:
+            geo_db = GeoIP.open(geoip_path, GeoIP.GEOIP_MEMORY_CACHE)
+        except Exception:
+            logger.warning("Error opening GeoIP database: %s" % geoip_path)
+        else:
+            geo_by_addr = geo_db.record_by_addr
+    else:
+        logger.warning("settings.GEOIP_PATH not configured.")
diff --git a/tests/sentry/interfaces/test_geo.py b/tests/sentry/interfaces/test_geo.py
new file mode 100644
index 0000000000..76e458efb4
--- /dev/null
+++ b/tests/sentry/interfaces/test_geo.py
@@ -0,0 +1,46 @@
+from __future__ import absolute_import
+
+import mock
+
+from sentry.interfaces.geo import Geo
+from sentry.testutils import TestCase
+
+
+class GeoTest(TestCase):
+    def test_serialize_behavior(self):
+        assert Geo.to_python({
+            'country_code': 'US',
+            'city': 'San Francisco',
+            'region': 'CA',
+        }).to_json() == {
+            'country_code': 'US',
+            'city': 'San Francisco',
+            'region': 'CA',
+        }
+
+    @mock.patch('sentry.interfaces.geo.geo_by_addr')
+    def test_from_ip_address(self, geo_by_addr_mock):
+        geo_by_addr_mock.return_value = {
+            'area_code': 415,
+            'city': 'San Francisco',
+            'country_code': 'US',
+            'country_code3': 'USA',
+            'country_name': 'United States',
+            'dma_code': 807,
+            'latitude': 37.79570007324219,
+            'longitude': -122.4208984375,
+            'metro_code': 807,
+            'postal_code': '94109',
+            'region': 'CA',
+            'region_name': 'California',
+            'time_zone': 'America/Los_Angeles'
+        }
+
+        assert Geo.from_ip_address('192.168.0.1').to_json() == {
+            'country_code': 'US',
+            'city': 'San Francisco',
+            'region': 'CA',
+        }
+
+    def test_path(self):
+        assert Geo().get_path() == 'geo'
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index b4b942f770..b04f8df752 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -151,6 +151,47 @@ class EventManagerTest(TransactionTestCase):
         data = manager.normalize()
         assert data['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
 
+    @mock.patch('sentry.interfaces.geo.Geo.from_ip_address')
+    def test_does_geo_from_ip(self, from_ip_address_mock):
+        from sentry.interfaces.geo import Geo
+
+        geo = {
+            'city': 'San Francisco',
+            'country_code': 'US',
+            'region': 'CA',
+        }
+        from_ip_address_mock.return_value = Geo.to_python(geo)
+
+        manager = EventManager(
+            self.make_event(
+                **{
+                    'sentry.interfaces.User': {
+                        'ip_address': '192.168.0.1',
+                    },
+                }
+            )
+        )
+        data = manager.normalize()
+        assert data['sentry.interfaces.User']['ip_address'] == '192.168.0.1'
+        assert data['sentry.interfaces.User']['geo'] == geo
+
+    @mock.patch('sentry.interfaces.geo.geo_by_addr')
+    def test_skips_geo_with_no_result(self, geo_by_addr_mock):
+        geo_by_addr_mock.return_value = None
+
+        manager = EventManager(
+            self.make_event(
+                **{
+                    'sentry.interfaces.User': {
+                        'ip_address': '127.0.0.1',
+                    },
+                }
+            )
+        )
+        data = manager.normalize()
+        assert data['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
+        assert 'geo' not in data['sentry.interfaces.User']
+
     def test_does_default_ip_address_if_present(self):
         manager = EventManager(
             self.make_event(
