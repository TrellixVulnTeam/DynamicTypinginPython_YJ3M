commit 8dba53434d52de8574780ef71fbb2285ac983133
Author: Jan Michael Auer <account@jauer.org>
Date:   Thu Nov 22 16:43:48 2018 +0100

    feat(utils): Improve safe dict utilities (#10727)

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index edcf69144c..8226017575 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -577,16 +577,10 @@ class EventManager(object):
 
         # Fill in ip addresses marked as {{auto}}
         if self._client_ip:
-            if get_path(data, ['request', 'env', 'REMOTE_ADDR']) == '{{auto}}':
+            if get_path(data, 'request', 'env', 'REMOTE_ADDR') == '{{auto}}':
                 data['request']['env']['REMOTE_ADDR'] = self._client_ip
 
-            if get_path(data, ['request', 'env', 'REMOTE_ADDR']) == '{{auto}}':
-                data['request']['env']['REMOTE_ADDR'] = self._client_ip
-
-            if get_path(data, ['user', 'ip_address']) == '{{auto}}':
-                data['user']['ip_address'] = self._client_ip
-
-            if get_path(data, ['user', 'ip_address']) == '{{auto}}':
+            if get_path(data, 'user', 'ip_address') == '{{auto}}':
                 data['user']['ip_address'] = self._client_ip
 
         # Validate main event body and tags against schema.
diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index d0879e76a7..f0cde1d9aa 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -122,16 +122,73 @@ def trim_dict(value, max_items=settings.SENTRY_MAX_DICTIONARY_ITEMS, **kwargs):
     return value
 
 
-def get_path(data, path, default=None):
+def get_path(data, *path, **kwargs):
     """
-    Looks up a path of properties in a nested dictionary safely.
-    Returns the value at the final level, or the default value if
-    property lookup failed at any step in the path.
+    Safely resolves data from a recursive data structure. A value is only
+    returned if the full path exists, otherwise ``None`` is returned.
+
+    If the ``default`` argument is specified, it is returned instead of ``None``.
+
+    If the ``filter`` argument is specified and the value is a list, it is
+    filtered with the given callback. Alternatively, pass ``True`` as filter to
+    only filter ``None`` values.
     """
-    if not isinstance(path, (list, tuple)) or len(path) == 0:
-        raise ValueError
     for p in path:
-        if not isinstance(data, collections.Mapping) or p not in data:
-            return default
+        if isinstance(data, collections.Mapping) and p in data:
+            data = data[p]
+        elif isinstance(data, (list, tuple)) and -len(data) <= p < len(data):
+            data = data[p]
+        else:
+            return kwargs.get('default')
+
+    f = kwargs.get('filter')
+    if f and data and isinstance(data, (list, tuple)):
+        data = list(filter((lambda x: x is not None) if f is True else f, data))
+
+    return data if data is not None else kwargs.get('default')
+
+
+def set_path(data, *path, **kwargs):
+    """
+    Recursively traverses or creates the specified path and sets the given value
+    argument. `None` is treated like a missing value. If a non-mapping is
+    encountered while traversing, the value is not set.
+
+    This function is equivalent to a recursive dict.__setitem__. Returns True if
+    the value was set, otherwise False.
+
+    If the ``overwrite` kwarg is set to False, the value is only set if there is
+    no existing value or it is None. See ``setdefault_path``.
+    """
+
+    value = kwargs['value']
+
+    for p in path[:-1]:
+        if not isinstance(data, collections.Mapping):
+            return False
+        if data.get(p) is None:
+            data[p] = {}
         data = data[p]
-    return data
+
+    if not isinstance(data, collections.Mapping):
+        return False
+
+    p = path[-1]
+    if kwargs.get('overwrite', True) or data.get(p) is None:
+        data[p] = value
+        return True
+
+    return False
+
+
+def setdefault_path(data, *path, **kwargs):
+    """
+    Recursively traverses or creates the specified path and sets the given value
+    argument if it does not exist. `None` is treated like a missing value. If a
+    non-mapping is encountered while traversing, the value is not set.
+
+    This function is equivalent to a recursive dict.setdefault, except for None
+    values. Returns True if the value was set, otherwise False.
+    """
+    kwargs['overwrite'] = False
+    return set_path(data, *path, **kwargs)
diff --git a/tests/sentry/utils/test_safe.py b/tests/sentry/utils/test_safe.py
index 61e3071c0c..858af72ad9 100644
--- a/tests/sentry/utils/test_safe.py
+++ b/tests/sentry/utils/test_safe.py
@@ -5,7 +5,8 @@ from functools import partial
 
 from sentry.testutils import TestCase
 from sentry.utils.canonical import CanonicalKeyDict
-from sentry.utils.safe import safe_execute, trim, trim_dict, get_path
+from sentry.utils.safe import safe_execute, trim, trim_dict, get_path, set_path, \
+    setdefault_path
 
 a_very_long_string = 'a' * 1024
 
@@ -92,13 +93,82 @@ class SafeExecuteTest(TestCase):
         assert safe_execute(Foo().simple, 1) is None
 
 
-class GetChainTest(TestCase):
-    def test_get_path(self):
-        assert get_path({}, ['a']) is None
-        assert get_path({}, ['a'], 1) == 1
-        assert get_path({'a': 2}, ['a']) == 2
-        assert get_path({'a': 2}, ['b']) is None
-        assert get_path({'a': 2}, ['b'], 1) == 1
-        assert get_path({'a': {'b': []}}, ['a', 'b']) == []
-        assert get_path({'a': []}, ['a', 'b']) is None
-        assert get_path(CanonicalKeyDict({'a': 2}), ['a']) == 2
+class GetPathTest(TestCase):
+    def test_get_none(self):
+        assert get_path(None, 'foo') is None
+        assert get_path('foo', 'foo') is None
+        assert get_path(42, 'foo') is None
+        assert get_path(ValueError(), 'foo') is None
+        assert get_path(True, 'foo') is None
+
+    def test_get_path_dict(self):
+        assert get_path({}, 'a') is None
+        assert get_path({'a': 2}, 'a') == 2
+        assert get_path({'a': 2}, 'b') is None
+        assert get_path({'a': {'b': []}}, 'a', 'b') == []
+        assert get_path({'a': []}, 'a', 'b') is None
+        assert get_path(CanonicalKeyDict({'a': 2}), 'a') == 2
+
+    def test_get_default(self):
+        assert get_path({'a': 2}, 'b', default=1) == 1
+        assert get_path({'a': 2}, 'a', default=1) == 2
+        assert get_path({'a': None}, 'a', default=1) == 1
+
+    def test_get_path_list(self):
+        arr = [1, 2]
+        assert get_path(arr, 1) == 2
+        assert get_path(arr, -1) == 2
+        assert get_path(arr, 2) is None
+        assert get_path(arr, '1') is None
+        assert get_path([], 1) is None
+
+    def test_filter_list(self):
+        data = {'a': [False, 1, None]}
+        assert get_path(data, 'a', filter=True) == [False, 1]
+        assert get_path(data, 'a', filter=lambda x: x) == [1]
+
+    def test_filter_tuple(self):
+        data = {'a': (False, 1, None)}
+        assert get_path(data, 'a', filter=True) == [False, 1]
+        assert get_path(data, 'a', filter=lambda x: x) == [1]
+
+    def test_filter_other(self):
+        assert get_path({'a': 42}, 'a', filter=True) == 42
+        assert get_path({'a': True}, 'a', filter=True) is True
+        assert get_path({'a': {'b': 42}}, 'a', filter=True) == {'b': 42}
+        assert get_path({'a': 42}, 'b', filter=True) is None
+
+
+class SetPathTest(TestCase):
+    def test_set_none(self):
+        assert not set_path(None, 'foo', value=42)
+        assert not set_path('foo', 'foo', value=42)
+        assert not set_path(42, 'foo', value=42)
+        assert not set_path(ValueError(), 'foo', value=42)
+        assert not set_path(True, 'foo', value=42)
+
+    def test_set_dict(self):
+        data = {}
+        assert set_path(data, 'a', value=42)
+        assert data == {'a': 42}
+
+        data = {'a': 2}
+        assert set_path(data, 'a', value=42)
+        assert data == {'a': 42}
+
+        data = {}
+        assert set_path(data, 'a', 'b', value=42)
+        assert data == {'a': {'b': 42}}
+
+        data = CanonicalKeyDict({})
+        assert set_path(data, 'a', value=42)
+        assert data == {'a': 42}
+
+    def test_set_default(self):
+        data = {'a': {'b': 2}}
+        assert not setdefault_path(data, 'a', 'b', value=42)
+        assert data == {'a': {'b': 2}}
+
+        data = {}
+        assert setdefault_path(data, 'a', 'b', value=42)
+        assert data == {'a': {'b': 42}}
