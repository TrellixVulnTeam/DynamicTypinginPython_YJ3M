commit eed6157b477d9bd45b04ee69976c697a30280730
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Nov 14 17:52:02 2018 +0100

    feat: Added minidump download links to event page (#10588)

diff --git a/src/sentry/api/endpoints/event_attachments.py b/src/sentry/api/endpoints/event_attachments.py
index 00923c2f65..393585675e 100644
--- a/src/sentry/api/endpoints/event_attachments.py
+++ b/src/sentry/api/endpoints/event_attachments.py
@@ -1,10 +1,9 @@
 from __future__ import absolute_import
 
-import six
-
 from sentry import features
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.paginator import OffsetPaginator
+from sentry.api.serializers import serialize
 from sentry.models import Event, EventAttachment
 
 
@@ -21,7 +20,8 @@ class EventAttachmentsEndpoint(ProjectEndpoint):
         :pparam string event_id: the id of the event.
         :auth: required
         """
-        if not features.has('organizations:event-attachments', project.organization, actor=request.user):
+        if not features.has('organizations:event-attachments',
+                            project.organization, actor=request.user):
             return self.respond(status=404)
 
         try:
@@ -41,13 +41,6 @@ class EventAttachmentsEndpoint(ProjectEndpoint):
             request=request,
             queryset=queryset,
             order_by='name',
+            on_results=lambda x: serialize(x, request.user),
             paginator_cls=OffsetPaginator,
-            on_results=lambda attachments: [{
-                'id': six.text_type(a.id),
-                'name': a.name,
-                'headers': a.file.headers,
-                'size': a.file.size,
-                'sha1': a.file.checksum,
-                'dateCreated': a.file.timestamp,
-            } for a in attachments],
         )
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 4238d17c18..309f63418a 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -4,10 +4,26 @@ import six
 
 from datetime import datetime
 from django.utils import timezone
-
 from semaphore import meta_with_chunks
-from sentry.api.serializers import Serializer, register
-from sentry.models import Event, EventError
+
+from sentry.api.serializers import Serializer, register, serialize
+from sentry.models import Event, EventError, EventAttachment
+
+
+CRASH_FILE_TYPES = set(['event.minidump'])
+
+
+def get_crash_files(events):
+    event_ids = [x.event_id for x in events if x.platform == 'native']
+    rv = {}
+    if event_ids:
+        attachments = EventAttachment.objects.filter(
+            event_id__in=event_ids,
+        ).select_related('file')
+        for attachment in attachments:
+            if attachment.file.type in CRASH_FILE_TYPES:
+                rv[attachment.event_id] = attachment
+    return rv
 
 
 @register(Event)
@@ -110,6 +126,7 @@ class EventSerializer(Serializer):
     def get_attrs(self, item_list, user, is_public=False):
         Event.objects.bind_nodes(item_list, 'data')
 
+        crash_files = get_crash_files(item_list)
         results = {}
         for item in item_list:
             # TODO(dcramer): convert to get_api_context
@@ -119,11 +136,14 @@ class EventSerializer(Serializer):
 
             (entries, entries_meta) = self._get_entries(item, user, is_public=is_public)
 
+            crash_file = crash_files.get(item.event_id)
+
             results[item] = {
                 'entries': entries,
                 'user': user_data,
                 'contexts': contexts_data or {},
                 'sdk': sdk_data,
+                'crash_file': serialize(crash_file, user=user),
                 '_meta': {
                     'entries': entries_meta,
                     'user': user_meta,
@@ -177,6 +197,7 @@ class EventSerializer(Serializer):
             'message': message,
             'user': attrs['user'],
             'contexts': attrs['contexts'],
+            'crashFile': attrs['crash_file'],
             'sdk': attrs['sdk'],
             # TODO(dcramer): move into contexts['extra']
             'context': context,
diff --git a/src/sentry/api/serializers/models/eventattachment.py b/src/sentry/api/serializers/models/eventattachment.py
new file mode 100644
index 0000000000..1defc3b572
--- /dev/null
+++ b/src/sentry/api/serializers/models/eventattachment.py
@@ -0,0 +1,20 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.api.serializers import Serializer, register
+from sentry.models import EventAttachment
+
+
+@register(EventAttachment)
+class EventAttachmentSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        return {
+            'id': six.text_type(obj.id),
+            'name': obj.name,
+            'headers': obj.file.headers,
+            'size': obj.file.size,
+            'sha1': obj.file.checksum,
+            'dateCreated': obj.file.timestamp,
+            'type': obj.file.type,
+        }
diff --git a/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx b/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
index 649ee9c3a5..e85367d5f0 100644
--- a/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
+++ b/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
@@ -6,6 +6,7 @@ import CustomPropTypes from 'app/sentryTypes';
 import Avatar from 'app/components/avatar';
 import DateTime from 'app/components/dateTime';
 import DeviceName from 'app/components/deviceName';
+import FileSize from 'app/components/fileSize';
 
 class EventsTableRow extends React.Component {
   static propTypes = {
@@ -32,6 +33,22 @@ class EventsTableRow extends React.Component {
     }
   };
 
+  renderCrashFileLink() {
+    let {orgId, event, projectId} = this.props;
+    if (!event.crashFile) {
+      return null;
+    }
+    let url = `/api/0/projects/${orgId}/${projectId}/events/${event.id}/attachments/${event
+      .crashFile.id}/?download=1`;
+    let crashFileType =
+      event.crashFile.type === 'event.minidump' ? 'Minidump' : 'Crash file';
+    return (
+      <small>
+        {crashFileType}: <a href={url}>{event.crashFile.name}</a> (<FileSize bytes={event.crashFile.size} />)
+      </small>
+    );
+  }
+
   render() {
     let {className, event, orgId, projectId, groupId, tagList, hasUser} = this.props;
     let tagMap = {};
@@ -47,6 +64,7 @@ class EventsTableRow extends React.Component {
               <DateTime date={event.dateCreated} />
             </Link>
             <small>{(this.getEventTitle(event) || '').substr(0, 100)}</small>
+            {this.renderCrashFileLink()}
           </h5>
         </td>
 
