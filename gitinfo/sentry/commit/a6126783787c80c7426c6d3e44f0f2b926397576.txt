commit a6126783787c80c7426c6d3e44f0f2b926397576
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Mar 24 12:23:30 2013 -0700

    Change queue behavior to exploit CELERY_ALWAYS_EAGER

diff --git a/src/sentry/app.py b/src/sentry/app.py
index 9f104cf4bd..9430005c49 100644
--- a/src/sentry/app.py
+++ b/src/sentry/app.py
@@ -6,6 +6,7 @@ sentry.app
 :license: BSD, see LICENSE for more details.
 """
 
+from django.conf import settings as dj_settings
 from sentry.conf import settings
 from sentry.utils.imports import import_string
 from threading import local
@@ -22,3 +23,6 @@ def get_instance(path, options):
 
 buffer = get_instance(settings.BUFFER, settings.BUFFER_OPTIONS)
 env = State()
+
+# XXX: support for Sentry's USE_QUEUE setting
+dj_settings.CELERY_ALWAYS_EAGER = not settings.USE_QUEUE
diff --git a/src/sentry/buffer/base.py b/src/sentry/buffer/base.py
index 6f7abe909a..e0ec7f20bd 100644
--- a/src/sentry/buffer/base.py
+++ b/src/sentry/buffer/base.py
@@ -9,7 +9,6 @@ sentry.buffer.base
 from django.db.models import F
 from sentry.signals import buffer_incr_complete
 from sentry.tasks.process_buffer import process_incr
-from sentry.utils.queue import maybe_async
 
 
 class Buffer(object):
@@ -32,7 +31,7 @@ class Buffer(object):
         """
         >>> incr(Group, columns={'times_seen': 1}, filters={'pk': group.pk})
         """
-        maybe_async(process_incr, kwargs={
+        process_incr.apply_async(kwargs={
             'model': model,
             'columns': columns,
             'filters': filters,
diff --git a/src/sentry/conf/defaults.py b/src/sentry/conf/defaults.py
index 5a7e572cad..2aba4f6592 100644
--- a/src/sentry/conf/defaults.py
+++ b/src/sentry/conf/defaults.py
@@ -112,16 +112,6 @@ ALLOW_REGISTRATION = True
 
 # Instructs Sentry to utilize it's queue for background jobs. You will
 # need to ensure that you have workers running if you enable the queue.
-
-# You can also set this to a list of fully qualified job names to only
-# selectively enable the queue:
-# USE_QUEUE = (
-#     'sentry.tasks.store.store_event',
-#     'sentry.tasks.cleanup.cleanup',
-#     'sentry.tasks.index.index_event',
-#     'sentry.tasks.post_process.post_process_group',
-#     'sentry.tasks.process_buffer.process_incr',
-# )
 USE_QUEUE = False
 
 # Instructs Sentry to utilize it's internal search indexer on all incoming
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 85b7b1f11b..2aca28df69 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -27,7 +27,6 @@ from sentry.tasks.store import store_event
 from sentry.utils import is_float, json
 from sentry.utils.auth import parse_auth_header
 from sentry.utils.imports import import_string
-from sentry.utils.queue import maybe_delay
 from sentry.utils.strings import decompress
 
 
@@ -386,4 +385,4 @@ def validate_data(project, data, client=None):
 
 
 def insert_data_to_database(data):
-    maybe_delay(store_event, data=data)
+    store_event.delay(data=data)
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 18ded24590..3396eae67e 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -40,7 +40,6 @@ from sentry.utils.cache import cache, memoize, Lock
 from sentry.utils.dates import get_sql_date_trunc, normalize_datetime
 from sentry.utils.db import get_db_engine, has_charts, attach_foreignkey
 from sentry.utils.models import create_or_update, make_key
-from sentry.utils.queue import maybe_delay
 
 logger = logging.getLogger('sentry.errors')
 
@@ -513,7 +512,7 @@ class GroupManager(BaseManager, ChartMixin):
 
         if settings.USE_SEARCH:
             try:
-                maybe_delay(index_event, event)
+                index_event.delay(event)
             except Exception, e:
                 transaction.rollback_unless_managed(using=group._state.db)
                 logger.exception(u'Error indexing document: %s', e)
diff --git a/src/sentry/processors/base.py b/src/sentry/processors/base.py
index b832580d4f..e431da59d3 100644
--- a/src/sentry/processors/base.py
+++ b/src/sentry/processors/base.py
@@ -7,11 +7,10 @@ sentry.processors.base
 """
 
 from sentry.tasks.post_process import post_process_group
-from sentry.utils.queue import maybe_delay
 
 
 __all__ = ('send_group_processors',)
 
 
 def send_group_processors(group, **kwargs):
-    maybe_delay(post_process_group, group=group, **kwargs)
+    post_process_group.delay(group=group, **kwargs)
diff --git a/src/sentry/tasks/check_alerts.py b/src/sentry/tasks/check_alerts.py
index 843ffb767b..75dc415140 100644
--- a/src/sentry/tasks/check_alerts.py
+++ b/src/sentry/tasks/check_alerts.py
@@ -57,7 +57,6 @@ def check_alerts(**kwargs):
     project's alert settings.
     """
     from sentry.models import ProjectCountByMinute
-    from sentry.utils.queue import maybe_delay
 
     now = timezone.now()
     # we want at least a 60 second window of events
@@ -73,7 +72,7 @@ def check_alerts(**kwargs):
     ).values_list('project_id', 'date', 'times_seen')
     for project_id, date, count in qs:
         normalized_count = int(count / ((now - date).seconds / 60))
-        maybe_delay(check_project_alerts,
+        check_project_alerts.delay(
             project_id=project_id,
             when=max_date,
             count=normalized_count,
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 32eb4cdcc1..8869276f3b 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -9,7 +9,6 @@ sentry.tasks.post_process
 from celery.task import task
 from sentry.plugins import plugins
 from sentry.utils.safe import safe_execute
-from sentry.utils.queue import maybe_delay
 
 
 @task(name='sentry.tasks.post_process.post_process_group', queue='triggers')
@@ -19,8 +18,7 @@ def post_process_group(group, **kwargs):
     """
     for plugin in plugins.all():
         if safe_execute(plugin.is_enabled, group.project):
-            maybe_delay(plugin_post_process_group,
-                plugin.slug, group=group, **kwargs)
+            plugin_post_process_group.delay(plugin.slug, group=group, **kwargs)
 
 
 @task(
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index fc6114f5f0..9ad4980a45 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -14,7 +14,6 @@ from sentry.conf import settings
 def preprocess_event(data, **kwargs):
     from sentry.models import Group
     from sentry.tasks.fetch_source import expand_javascript_source
-    from sentry.utils.queue import maybe_delay
 
     logger = preprocess_event.get_logger()
 
@@ -27,7 +26,7 @@ def preprocess_event(data, **kwargs):
             except Exception, e:
                 logger.exception(u'Error fetching javascript source: %s', e)
     finally:
-        maybe_delay(save_event, data=data)
+        save_event.delay(data=data)
 
 
 @task(name='sentry.tasks.store.save_event', queue='events')
@@ -47,6 +46,4 @@ def store_event(data, **kwargs):
 
     Deprecated.
     """
-    from sentry.utils.queue import maybe_delay
-
-    maybe_delay(preprocess_event, data=data)
+    preprocess_event.delay(data=data)
diff --git a/src/sentry/utils/queue.py b/src/sentry/utils/queue.py
deleted file mode 100644
index 84aaaa6e31..0000000000
--- a/src/sentry/utils/queue.py
+++ /dev/null
@@ -1,42 +0,0 @@
-"""
-sentry.utils.queue
-~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from sentry.conf import settings
-
-
-def can_queue(func):
-    """
-    Returns a boolean describing if func should be passed through the queueing
-    infrastructure based on the ``USE_QUEUE`` setting.
-
-    >>> can_queue(task_func)
-    True
-    """
-    if not settings.USE_QUEUE:
-        return False
-    elif settings.USE_QUEUE is True:
-        return True
-    elif '%s.%s' % (func.__module__, func.__name__) in settings.USE_QUEUE:
-        return True
-    return False
-
-
-def maybe_delay(func, *args, **kwargs):
-    if can_queue(func):
-        return func.delay(*args, **kwargs)
-    return func(*args, **kwargs)
-
-
-def maybe_async(func, args=None, kwargs=None, *fargs, **fkwargs):
-    if args is None:
-        args = []
-    if kwargs is None:
-        kwargs = {}
-    if can_queue(func):
-        return func.apply_async(args=args, kwargs=kwargs, *fargs, **fkwargs)
-    return func(*args, **kwargs)
diff --git a/tests/sentry/buffer/base/tests.py b/tests/sentry/buffer/base/tests.py
index 3179a0810a..05ffde1806 100644
--- a/tests/sentry/buffer/base/tests.py
+++ b/tests/sentry/buffer/base/tests.py
@@ -8,7 +8,6 @@ from datetime import timedelta
 from django.utils import timezone
 from sentry.buffer.base import Buffer
 from sentry.models import Group, Project
-from sentry.tasks.process_buffer import process_incr
 from sentry.testutils import TestCase
 
 
@@ -16,21 +15,22 @@ class BufferTest(TestCase):
     def setUp(self):
         self.buf = Buffer()
 
-    @mock.patch('sentry.buffer.base.maybe_async')
-    def test_incr_delays_task(self, maybe_async):
+    @mock.patch('sentry.buffer.base.process_incr')
+    def test_incr_delays_task(self, process_incr):
         model = mock.Mock()
         columns = {'times_seen': 1}
         filters = {'pk': 1}
         self.buf.incr(model, columns, filters)
         kwargs = dict(model=model, columns=columns, filters=filters, extra=None)
-        maybe_async.assert_called_once_with(process_incr, kwargs=kwargs, countdown=5)
+        process_incr.apply_async.assert_called_once_with(
+            kwargs=kwargs, countdown=5)
 
     def test_process_saves_data(self):
         group = Group.objects.create(project=Project(id=1))
         columns = {'times_seen': 1}
         filters = {'pk': group.pk}
         self.buf.process(Group, columns, filters)
-        self.assertEquals(Group.objects.get(pk=group.pk).times_seen, group.times_seen + 1)
+        assert Group.objects.get(pk=group.pk).times_seen == group.times_seen + 1
 
     def test_process_saves_extra(self):
         group = Group.objects.create(project=Project(id=1))
@@ -40,5 +40,5 @@ class BufferTest(TestCase):
         the_date = (timezone.now() + timedelta(days=5)).replace(microsecond=0)
         self.buf.process(Group, columns, filters, {'last_seen': the_date})
         group_ = Group.objects.get(pk=group.pk)
-        self.assertEquals(group_.times_seen, group.times_seen + 1)
-        self.assertEquals(group_.last_seen.replace(microsecond=0), the_date)
+        assert group_.times_seen == group.times_seen + 1
+        assert group_.last_seen.replace(microsecond=0) == the_date
diff --git a/tests/sentry/buffer/redis/tests.py b/tests/sentry/buffer/redis/tests.py
index 02d0c2affc..18831e4788 100644
--- a/tests/sentry/buffer/redis/tests.py
+++ b/tests/sentry/buffer/redis/tests.py
@@ -42,18 +42,19 @@ class RedisBufferTest(TestCase):
 
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_extra_key', mock.Mock(return_value='extra'))
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_key', mock.Mock(return_value='foo'))
-    @mock.patch('sentry.buffer.base.maybe_async')
-    def test_incr_delays_task(self, maybe_async):
+    @mock.patch('sentry.buffer.base.process_incr')
+    def test_incr_delays_task(self, process_incr):
         model = mock.Mock()
         columns = {'times_seen': 1}
         filters = {'pk': 1}
         self.buf.incr(model, columns, filters)
         kwargs = dict(model=model, columns=columns, filters=filters, extra=None)
-        maybe_async.assert_called_once_with(process_incr, kwargs=kwargs, countdown=5)
+        process_incr.apply_async.assert_called_once_with(
+            kwargs=kwargs, countdown=5)
 
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_extra_key', mock.Mock(return_value='extra'))
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_key', mock.Mock(return_value='foo'))
-    @mock.patch('sentry.buffer.base.maybe_async', mock.Mock())
+    @mock.patch('sentry.buffer.base.process_incr', mock.Mock())
     def test_incr_does_buffer_to_conn(self):
         model = mock.Mock()
         columns = {'times_seen': 1}
@@ -95,7 +96,7 @@ class RedisBufferTest(TestCase):
 
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_extra_key', mock.Mock(return_value='extra'))
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_key', mock.Mock(return_value='foo'))
-    @mock.patch('sentry.buffer.base.maybe_async', mock.Mock())
+    @mock.patch('sentry.buffer.base.process_incr', mock.Mock())
     def test_incr_does_buffer_extra_to_conn(self):
         model = mock.Mock()
         columns = {'times_seen': 1}
diff --git a/tests/sentry/tasks/check_alerts/tests.py b/tests/sentry/tasks/check_alerts/tests.py
index 22e8db0b27..e30ade12f5 100644
--- a/tests/sentry/tasks/check_alerts/tests.py
+++ b/tests/sentry/tasks/check_alerts/tests.py
@@ -21,8 +21,8 @@ class BaseTestCase(TestCase):
 
 
 class CheckAlertsTest(BaseTestCase):
-    @mock.patch('sentry.utils.queue.maybe_delay')
-    def test_does_fire_jobs(self, maybe_delay):
+    @mock.patch('sentry.tasks.check_alerts.check_project_alerts')
+    def test_does_fire_jobs(self, check_project_alerts):
         when = timezone.now()
         self.create_counts(when, 50, 5, normalize=False)
 
@@ -31,8 +31,7 @@ class CheckAlertsTest(BaseTestCase):
             check_alerts()
             now.assert_called_once_with()
 
-        maybe_delay.assert_called_once_with(
-            check_project_alerts,
+        check_project_alerts.delay.assert_called_once_with(
             project_id=self.project.id,
             when=when - timedelta(minutes=1),
             count=10,
diff --git a/tests/sentry/tasks/store/tests.py b/tests/sentry/tasks/store/tests.py
index 5808b9fcad..b9546cfb33 100644
--- a/tests/sentry/tasks/store/tests.py
+++ b/tests/sentry/tasks/store/tests.py
@@ -17,4 +17,4 @@ class StoreEventTest(TestCase):
     def test_calls_from_kwargs(self, preprocess_event):
         data = {'foo': 'bar'}
         store_event(data=data)
-        preprocess_event.assert_called_once_with(data=data)
+        preprocess_event.delay.assert_called_once_with(data=data)
diff --git a/tests/sentry/utils/queue/__init__.py b/tests/sentry/utils/queue/__init__.py
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/tests/sentry/utils/queue/tests.py b/tests/sentry/utils/queue/tests.py
deleted file mode 100644
index da2384603c..0000000000
--- a/tests/sentry/utils/queue/tests.py
+++ /dev/null
@@ -1,30 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.utils.queue import can_queue
-from sentry.testutils import TestCase
-
-
-def test_func():
-    pass
-
-
-class CanQueueTest(TestCase):
-    def test_disabled(self):
-        with self.Settings(SENTRY_USE_QUEUE=False):
-            self.assertFalse(can_queue(test_func))
-
-    def test_empty_whitelist(self):
-        with self.Settings(SENTRY_USE_QUEUE=()):
-            self.assertFalse(can_queue(test_func))
-
-    def test_enabled(self):
-        with self.Settings(SENTRY_USE_QUEUE=True):
-            self.assertTrue(can_queue(test_func))
-
-    def test_in_whitelist(self):
-        with self.Settings(SENTRY_USE_QUEUE=('%s.test_func' % (__name__,))):
-            self.assertTrue(can_queue(test_func))
-
-    def test_not_in_whitelist(self):
-        with self.Settings(SENTRY_USE_QUEUE=('%s.foo' % (__name__,))):
-            self.assertFalse(can_queue(test_func))
