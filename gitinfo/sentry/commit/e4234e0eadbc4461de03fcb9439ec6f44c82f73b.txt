commit e4234e0eadbc4461de03fcb9439ec6f44c82f73b
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Feb 17 01:23:00 2012 -0800

    Fairly massive doc refactor to move developer docs where they belong

diff --git a/docs/client/index.rst b/docs/client/index.rst
index eb1b246523..7b2df4173d 100644
--- a/docs/client/index.rst
+++ b/docs/client/index.rst
@@ -1,8 +1,5 @@
-Clients
-=======
-
-Recognized Clients
-------------------
+Available Clients
+=================
 
 The following clients are officially recognized and support the current Sentry protocol:
 
@@ -11,6 +8,9 @@ The following clients are officially recognized and support the current Sentry p
 * Java (`raven-java <https://github.com/kencochrane/raven-java>`_)
 * JavaScript (`raven-js <https://github.com/lincolnloop/raven-js>`_)
 
+Client Critera
+--------------
+
 To become a recognized client, a library is expected to meet several criteria:
 
 * It must fully implement the current version of the Sentry protocol.
@@ -20,270 +20,3 @@ To become a recognized client, a library is expected to meet several criteria:
 * It must contain an acceptable level of documentation and tests.
 
 * The client must be properly packaged, and named raven-<language>.
-
-Writing a Client
-----------------
-
-A client at it's core is simply a set of utilities for capturing various
-logging parameters. Given these parameters, it then builds a JSON payload
-which it will send to a the Sentry server, using some sort of authentication
-method.
-
-Generally, a client consists of three steps to the end user, which should look
-almost identical no matter the language:
-
-1. Creation of the client (sometimes this is hidden to the user)
-
-  ::
-
-      var myClient = new RavenClient('http://public_key:secret_key@example.com/1');
-
-2. Capturing an event
-
-  ::
-
-      var $resultId = myClient->captureException($myException);
-
-3. Using the result of an event capture
-
-  ::
-
-      println("Your exception was recorded as %s", $resultId);
-
-The standard methods as of writing which all clients are expected to provide are:
-
-* RavenClient::captureMessage(string $message)
-* RavenClient::captureException(exception $exception)
-
-Parsing the DSN
-~~~~~~~~~~~~~~~
-
-Clients are encouraged to allow arbitrary options via the constructor, but must
-allow the first argument as a DSN string. This string contains the following bits:
-
-::
-
-    '{PROTOCOL}://{PUBLIC_KEY}:{SECRET_KEY}@{HOST}/{PATH}{PROJECT_ID}'
-
-For example, given the following constructor::
-
-    new RavenClient('https://public:secret@example.com/sentry/1')
-
-You should parse the following settings:
-
-* URI = https://example.com/sentry/
-* Public Key = Public
-* Secret Key = Secret
-* Project ID = 1
-
-If any of these values are not present, the client should notify the user immediately
-that they've misconfigured the client.
-
-Building the JSON Packet
-~~~~~~~~~~~~~~~~~~~~~~~~
-
-The body of the post is a string representation of a JSON object. It is also preferabblly gzipped encoding,
-which also means its expected to be base64-encoded.
-
-For example, with an included Exception event, a basic JSON body might resemble the following::
-
-        {
-            "event_id": "fc6d8c0c43fc4630ad850ee518f1b9d0",
-            "culprit": "my.module.function_name",
-            "timestamp": "2011-05-02T17:41:36",
-            "message": "SyntaxError: Wattttt!"
-            "sentry.interfaces.Exception": {
-                "type": "SyntaxError":
-                "value": "Wattttt!",
-                "module": "__builtins__"
-            }
-        }
-
-The following attributes are required for all events:
-
-.. data:: event_id
-
-    Hexadecimal string representing a uuid4 value.
-
-    ::
-
-        {
-            "event_id": "fc6d8c0c43fc4630ad850ee518f1b9d0"
-        }
-
-.. data:: message
-
-    User-readable representation of this event
-
-    ::
-
-        {
-            "message": "SyntaxError: Wattttt!"
-        }
-
-.. data:: timestamp
-
-    Indicates when the logging record was created (in the Sentry client).
-
-    Defaults to ``datetime.datetime.utcnow()``
-
-    The Sentry server assumes the time is in UTC.
-
-    The timestamp should be in ISO 8601 format, without a timezone.
-
-    ::
-
-        {
-            "timestamp": "2011-05-02T17:41:36"
-        }
-
-.. data:: level
-
-    The record severity.
-
-    Defaults to ``logging.ERROR``.
-
-    The value can either be the integar value or the string label
-    as specified in ``SENTRY_LOG_LEVELS``.
-
-    ::
-
-        {
-            "level": "warn"
-        }
-
-.. data:: logger
-
-    The name of the logger which created the record.
-
-    If missing, defaults to the string ``root``.
-
-    ::
-
-        {
-            "logger": "my.logger.name"
-        }
-
-Additionally, there are several optional values which Sentry recognizes and are
-highly encouraged:
-
-.. data:: culprit
-
-    Function call which was the primary perpetrator of this event.
-
-    ::
-
-        {
-            "culprit": "my.module.function_name"
-        }
-
-.. data:: server_name
-
-    Identifies the host client from which the event was recorded.
-
-    ::
-
-        {
-            "server_name": "foo.example.com"
-        }
-
-.. data:: modules
-
-    A list of relevant modules and their versions.
-
-    ::
-
-        {
-            "modules": [
-                ["my.module.name", "1.0"]
-            ]
-        }
-
-.. data:: extra
-
-    An arbitrary mapping of additional metadata to store with the event.
-
-    ::
-
-        {
-            "extra": {
-                "my_key": 1,
-                "some_other_value": "foo bar"
-            }
-        }
-
-Any additional value is assumed to be a data interface, where the key is the Python path to the interface
-class name, and the value is the data expected by the interface. Interfaces are used in a variety of ways
-including storing stacktraces, HTTP request information, and other metadata.
-
-See :doc:`../interfaces/index` for information on Sentry's builtin interfaces and how to create your own.
-
-Authentication
-~~~~~~~~~~~~~~
-
-An authentication header is expected to be sent along with the message body, which acts as both a signature
-for the message, as well as an ownership identifier::
-
-    X-Sentry-Auth: Sentry sentry_version=2.0,
-    sentry_client=<client version, arbitrary>]]
-    sentry_timestamp=<signature timestamp>[,
-    sentry_key=<public api key>,[
-    sentry_signature=<hmac signature>,
-
-.. data:: sentry_version
-
-    The protocol version. This should be sent as the value "2.0".
-
-.. data:: sentry_client
-
-    An arbitrary string which identifies your client, including it's version.
-
-    For example, the Python client might send this as "raven-python/1.0"
-
-.. data:: sentry_timestamp
-
-    The unix timestamp representing the time at which this POST request was generated.
-
-.. data:: sentry_key
-
-    The public key which should be provided as part of the client configuration
-
-.. data:: sentry_signature
-
-    A SHA1-signed HMAC, for example::
-
-        hmac.new(secret_key, '%s %s' % (timestamp, message), hashlib.sha1).hexdigest()
-
-    The variables which are required within the signing of the message consist of the following:
-
-    - ``secret_key`` is provided as part of the client configuration.
-    - ``timestamp`` is the timestamp of which this message was generated
-    - ``message`` is the encoded JSON body
-
-
-A Working Example
-~~~~~~~~~~~~~~~~~
-
-When all is said and done, you should be sending an HTTP POST request to a Sentry webserver, where
-the path is the BASE_URI/api/store/. So given the following DSN::
-
-    https://b70a31b3510c4cf793964a185cfe1fd0:b7d80b520139450f903720eb7991bf3d@example.com/1
-
-The request body should then somewhat resemble the following::
-
-    POST /api/store/
-    X-Sentry-Auth: Sentry sentry_version=2.0, sentry_signature=a3901c854752a61636560638937237c8d7a9561d,
-        sentry_timestamp=1329096377, sentry_key=b70a31b3510c4cf793964a185cfe1fd0,
-        sentry_client=raven-python/1.0
-
-    {
-        "event_id": "fc6d8c0c43fc4630ad850ee518f1b9d0",
-        "culprit": "my.module.function_name",
-        "timestamp": "2011-05-02T17:41:36",
-        "message": "SyntaxError: Wattttt!"
-        "sentry.interfaces.Exception": {
-            "type": "SyntaxError":
-            "value": "Wattttt!",
-            "module": "__builtins__"
-        }
-    }
diff --git a/docs/contributing/index.rst b/docs/contributing/index.rst
index efd6733eb8..8dc3ab6330 100644
--- a/docs/contributing/index.rst
+++ b/docs/contributing/index.rst
@@ -6,6 +6,12 @@ our philosophy, the test suite, and issue tracking.
 
 (Though it actually doesn't describe all of that, yet)
 
+Coding Standards
+----------------
+
+Sentry follows the guidelines layed out in `pep8 <http://www.python.org/dev/peps/pep-0008/>`_  with a little bit
+of flexibility on things like line length. We always give way for the `Zen of Python <http://www.python.org/dev/peps/pep-0020/>`_.
+
 Setting up an Environment
 -------------------------
 
diff --git a/docs/developer/client/index.rst b/docs/developer/client/index.rst
new file mode 100644
index 0000000000..35be48d9c7
--- /dev/null
+++ b/docs/developer/client/index.rst
@@ -0,0 +1,266 @@
+Writing a Client
+================
+
+A client at it's core is simply a set of utilities for capturing various
+logging parameters. Given these parameters, it then builds a JSON payload
+which it will send to a the Sentry server, using some sort of authentication
+method.
+
+Generally, a client consists of three steps to the end user, which should look
+almost identical no matter the language:
+
+1. Creation of the client (sometimes this is hidden to the user)
+
+  ::
+
+      var myClient = new RavenClient('http://public_key:secret_key@example.com/1');
+
+2. Capturing an event
+
+  ::
+
+      var $resultId = myClient->captureException($myException);
+
+3. Using the result of an event capture
+
+  ::
+
+      println("Your exception was recorded as %s", $resultId);
+
+The standard methods as of writing which all clients are expected to provide are:
+
+* RavenClient::captureMessage(string $message)
+* RavenClient::captureException(exception $exception)
+
+Parsing the DSN
+---------------
+
+Clients are encouraged to allow arbitrary options via the constructor, but must
+allow the first argument as a DSN string. This string contains the following bits:
+
+::
+
+    '{PROTOCOL}://{PUBLIC_KEY}:{SECRET_KEY}@{HOST}/{PATH}{PROJECT_ID}'
+
+For example, given the following constructor::
+
+    new RavenClient('https://public:secret@example.com/sentry/1')
+
+You should parse the following settings:
+
+* URI = https://example.com/sentry/
+* Public Key = Public
+* Secret Key = Secret
+* Project ID = 1
+
+If any of these values are not present, the client should notify the user immediately
+that they've misconfigured the client.
+
+Building the JSON Packet
+------------------------
+
+The body of the post is a string representation of a JSON object. It is also preferabblly gzipped encoding,
+which also means its expected to be base64-encoded.
+
+For example, with an included Exception event, a basic JSON body might resemble the following::
+
+        {
+            "event_id": "fc6d8c0c43fc4630ad850ee518f1b9d0",
+            "culprit": "my.module.function_name",
+            "timestamp": "2011-05-02T17:41:36",
+            "message": "SyntaxError: Wattttt!"
+            "sentry.interfaces.Exception": {
+                "type": "SyntaxError":
+                "value": "Wattttt!",
+                "module": "__builtins__"
+            }
+        }
+
+The following attributes are required for all events:
+
+.. data:: event_id
+
+    Hexadecimal string representing a uuid4 value.
+
+    ::
+
+        {
+            "event_id": "fc6d8c0c43fc4630ad850ee518f1b9d0"
+        }
+
+.. data:: message
+
+    User-readable representation of this event
+
+    ::
+
+        {
+            "message": "SyntaxError: Wattttt!"
+        }
+
+.. data:: timestamp
+
+    Indicates when the logging record was created (in the Sentry client).
+
+    Defaults to ``datetime.datetime.utcnow()``
+
+    The Sentry server assumes the time is in UTC.
+
+    The timestamp should be in ISO 8601 format, without a timezone.
+
+    ::
+
+        {
+            "timestamp": "2011-05-02T17:41:36"
+        }
+
+.. data:: level
+
+    The record severity.
+
+    Defaults to ``logging.ERROR``.
+
+    The value can either be the integar value or the string label
+    as specified in ``SENTRY_LOG_LEVELS``.
+
+    ::
+
+        {
+            "level": "warn"
+        }
+
+.. data:: logger
+
+    The name of the logger which created the record.
+
+    If missing, defaults to the string ``root``.
+
+    ::
+
+        {
+            "logger": "my.logger.name"
+        }
+
+Additionally, there are several optional values which Sentry recognizes and are
+highly encouraged:
+
+.. data:: culprit
+
+    Function call which was the primary perpetrator of this event.
+
+    ::
+
+        {
+            "culprit": "my.module.function_name"
+        }
+
+.. data:: server_name
+
+    Identifies the host client from which the event was recorded.
+
+    ::
+
+        {
+            "server_name": "foo.example.com"
+        }
+
+.. data:: modules
+
+    A list of relevant modules and their versions.
+
+    ::
+
+        {
+            "modules": [
+                ["my.module.name", "1.0"]
+            ]
+        }
+
+.. data:: extra
+
+    An arbitrary mapping of additional metadata to store with the event.
+
+    ::
+
+        {
+            "extra": {
+                "my_key": 1,
+                "some_other_value": "foo bar"
+            }
+        }
+
+Any additional value is assumed to be a data interface, where the key is the Python path to the interface
+class name, and the value is the data expected by the interface. Interfaces are used in a variety of ways
+including storing stacktraces, HTTP request information, and other metadata.
+
+See :doc:`../interfaces/index` for information on Sentry's builtin interfaces and how to create your own.
+
+Authentication
+--------------
+
+An authentication header is expected to be sent along with the message body, which acts as both a signature
+for the message, as well as an ownership identifier::
+
+    X-Sentry-Auth: Sentry sentry_version=2.0,
+    sentry_client=<client version, arbitrary>]]
+    sentry_timestamp=<signature timestamp>[,
+    sentry_key=<public api key>,[
+    sentry_signature=<hmac signature>,
+
+.. data:: sentry_version
+
+    The protocol version. This should be sent as the value "2.0".
+
+.. data:: sentry_client
+
+    An arbitrary string which identifies your client, including it's version.
+
+    For example, the Python client might send this as "raven-python/1.0"
+
+.. data:: sentry_timestamp
+
+    The unix timestamp representing the time at which this POST request was generated.
+
+.. data:: sentry_key
+
+    The public key which should be provided as part of the client configuration
+
+.. data:: sentry_signature
+
+    A SHA1-signed HMAC, for example::
+
+        hmac.new(secret_key, '%s %s' % (timestamp, message), hashlib.sha1).hexdigest()
+
+    The variables which are required within the signing of the message consist of the following:
+
+    - ``secret_key`` is provided as part of the client configuration.
+    - ``timestamp`` is the timestamp of which this message was generated
+    - ``message`` is the encoded JSON body
+
+
+A Working Example
+-----------------
+
+When all is said and done, you should be sending an HTTP POST request to a Sentry webserver, where
+the path is the BASE_URI/api/store/. So given the following DSN::
+
+    https://b70a31b3510c4cf793964a185cfe1fd0:b7d80b520139450f903720eb7991bf3d@example.com/1
+
+The request body should then somewhat resemble the following::
+
+    POST /api/store/
+    X-Sentry-Auth: Sentry sentry_version=2.0, sentry_signature=a3901c854752a61636560638937237c8d7a9561d,
+        sentry_timestamp=1329096377, sentry_key=b70a31b3510c4cf793964a185cfe1fd0,
+        sentry_client=raven-python/1.0
+
+    {
+        "event_id": "fc6d8c0c43fc4630ad850ee518f1b9d0",
+        "culprit": "my.module.function_name",
+        "timestamp": "2011-05-02T17:41:36",
+        "message": "SyntaxError: Wattttt!"
+        "sentry.interfaces.Exception": {
+            "type": "SyntaxError":
+            "value": "Wattttt!",
+            "module": "__builtins__"
+        }
+    }
diff --git a/docs/interfaces/index.rst b/docs/developer/interfaces/index.rst
similarity index 100%
rename from docs/interfaces/index.rst
rename to docs/developer/interfaces/index.rst
diff --git a/docs/developer/plugins/index.rst b/docs/developer/plugins/index.rst
new file mode 100644
index 0000000000..a0e1e1e215
--- /dev/null
+++ b/docs/developer/plugins/index.rst
@@ -0,0 +1,25 @@
+Writing a Plugin
+================
+
+**The plugin interface is a work in progress.**
+
+Several interfaces exist for extending Sentry:
+
+* Event Filters (sentry.filters)
+* Data Interfaces (sentry.interfaces)
+* Aggregate Views (sentry.views)
+* Plugins (sentry.plugins)
+
+Until we get sample docs up, it's suggested that you review the builtin plugins
+and the base classes to understand how the system works.
+
+One thing to note, is that all extended methods (outside of data interfaces) should
+accept ``**kwargs`` to handle future changes.
+
+
+.. toctree::
+   :maxdepth: 2
+
+   interface
+
+More and better docs coming soon..
\ No newline at end of file
diff --git a/docs/plugins/interface.rst b/docs/developer/plugins/interface.rst
similarity index 79%
rename from docs/plugins/interface.rst
rename to docs/developer/plugins/interface.rst
index a5a64d0b13..1fbaac15dc 100644
--- a/docs/plugins/interface.rst
+++ b/docs/developer/plugins/interface.rst
@@ -1,8 +1,6 @@
 Plugin Interface
 ================
 
-.. currentmodule:: sentry.plugins.base
-
 This document describes the basics of the Plugin API Interface.
 
 .. autoclass:: sentry.plugins.base.IPlugin
diff --git a/docs/index.rst b/docs/index.rst
index fbc59c7bed..702c5707a5 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -18,14 +18,23 @@ Users Guide
    queue/index
    cli/index
    client/index
-   interfaces/index
    plugins/index
 
+Developers
+----------
+
+.. toctree::
+   :maxdepth: 2
+
+   developer/client/index
+   developer/plugins/index
+   developer/interfaces/index
+
 Reference
 ---------
 
 .. toctree::
-   :maxdepth: 1
+   :maxdepth: 2
 
    contributing/index
    changelog/index
diff --git a/docs/plugins/index.rst b/docs/plugins/index.rst
index 409875a16b..63edc78f29 100644
--- a/docs/plugins/index.rst
+++ b/docs/plugins/index.rst
@@ -10,12 +10,12 @@ Bundled Plugins
 Sentry includes several plugins by default. To enable a plugin, it's as simple as adding it to
 your ``INSTALLED_APPS``::
 
-	INSTALLED_APPS = [
-	  ...
-	  'sentry.plugins.sentry_servers',
-	  'sentry.plugins.sentry_sites',
-	  'sentry.plugins.sentry_urls',
-	]
+    INSTALLED_APPS = [
+      ...
+      'sentry.plugins.sentry_servers',
+      'sentry.plugins.sentry_sites',
+      'sentry.plugins.sentry_urls',
+    ]
 
 .. data:: sentry.plugins.sentry_server
     :noindex:
@@ -25,9 +25,9 @@ your ``INSTALLED_APPS``::
 
     ::
 
-    	INSTALLED_APPS = [
-    	  'sentry.plugins.sentry_servers',
-    	]
+        INSTALLED_APPS = [
+          'sentry.plugins.sentry_servers',
+        ]
 
 .. data:: sentry.plugins.sentry_urls
     :noindex:
@@ -37,9 +37,9 @@ your ``INSTALLED_APPS``::
 
     ::
 
-    	INSTALLED_APPS = [
-    	  'sentry.plugins.sentry_urls',
-    	]
+        INSTALLED_APPS = [
+          'sentry.plugins.sentry_urls',
+        ]
 
 .. data:: sentry.plugins.sentry_sites
     :noindex:
@@ -51,9 +51,9 @@ your ``INSTALLED_APPS``::
 
     ::
 
-    	INSTALLED_APPS = [
-    	  'sentry.plugins.sentry_sites',
-    	]
+        INSTALLED_APPS = [
+          'sentry.plugins.sentry_sites',
+        ]
 
 Recognized 3rd Party Extensions
 -------------------------------
@@ -62,22 +62,5 @@ The extensions are officially recognized and support the current Sentry protocol
 
 * `sentry-phabricator <https://github.com/dcramer/sentry-phabricator>`_
 
-Writing a Plugin
-----------------
-
-*The plugin interface is a work in progress and the API is not frozen.**
-
-Several interfaces exist for extending Sentry:
-
-* Event Filters (sentry.filters)
-* Data Interfaces (sentry.interfaces)
-* Aggregate Views (sentry.views)
-* Plugins (sentry.plugins)
-
-Until we get sample docs up, it's suggested that you review the builtin plugins
-and the base classes to understand how the system works.
-
-One thing to note, is that all extended methods (outside of data interfaces) should
-accept ``**kwargs`` to handle future changes.
-
-More and better docs coming soon, for now, take a look at the :doc:`interface`
+Have an extension that should be listed here? Submit a `pull request <https://github.com/dcramer/sentry`_ and we'll
+get it added.
\ No newline at end of file
