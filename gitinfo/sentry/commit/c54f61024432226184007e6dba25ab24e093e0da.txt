commit c54f61024432226184007e6dba25ab24e093e0da
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Dec 19 14:38:15 2019 -0800

    test: Migrate event tests (#16189)
    
    Migrate Event tests to test the new Eventstore model instead of the
    deprecated Django model

diff --git a/tests/sentry/models/test_event.py b/tests/sentry/eventstore/test_models.py
similarity index 71%
rename from tests/sentry/models/test_event.py
rename to tests/sentry/eventstore/test_models.py
index 9551ec4545..599cdd1560 100644
--- a/tests/sentry/models/test_event.py
+++ b/tests/sentry/eventstore/test_models.py
@@ -1,18 +1,22 @@
 from __future__ import absolute_import
 
-import pytest
 import pickle
+import pytest
 
-from sentry.models import Environment
 from sentry.db.models.fields.node import NodeData
+from sentry.models import Environment
 from sentry.testutils import TestCase
-from sentry.testutils.factories import Factories
+from sentry.testutils.helpers.datetime import iso_format, before_now
 
 
 class EventTest(TestCase):
     def test_pickling_compat(self):
-        event = self.create_event(
-            data={"tags": [("logger", "foobar"), ("site", "foo"), ("server_name", "bar")]}
+        event = self.store_event(
+            data={
+                "message": "Hello World!",
+                "tags": {"logger": "foobar", "site": "foo", "server_name": "bar"},
+            },
+            project_id=self.project.id,
         )
 
         # Ensure we load and memoize the interfaces as well.
@@ -40,19 +44,34 @@ class EventTest(TestCase):
         assert event2.data == event.data
 
     def test_event_as_dict(self):
-        event = self.create_event(data={"logentry": {"formatted": "Hello World!"}})
+        event = self.store_event(data={"message": "Hello World!"}, project_id=self.project.id)
 
         d = event.as_dict()
-        assert d["logentry"] == {"formatted": "Hello World!"}
+        assert d["logentry"] == {"formatted": "Hello World!", "message": None, "params": None}
 
     def test_email_subject(self):
-        event1 = self.create_event(
-            event_id="a" * 32, group=self.group, tags={"level": "info"}, message="Foo bar"
+        event1 = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "message": "Foo bar",
+                "level": "info",
+                "fingerprint": ["group-1"],
+            },
+            project_id=self.project.id,
         )
-        event2 = self.create_event(
-            event_id="b" * 32, group=self.group, tags={"level": "ERROR"}, message="Foo bar"
+        event2 = self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "message": "Foo bar",
+                "level": "error",
+                "fingerprint": ["group-1"],
+            },
+            project_id=self.project.id,
         )
-        self.group.level = 30
+
+        group = event1.group
+
+        group.level = 30
 
         assert event1.get_email_subject() == "BAR-1 - Foo bar"
         assert event2.get_email_subject() == "BAR-1 - Foo bar"
@@ -77,11 +96,17 @@ class EventTest(TestCase):
         assert event1.get_email_subject() == "BAR-1 - production@0 $ baz ${tag:invalid} $invalid"
 
     def test_as_dict_hides_client_ip(self):
-        event = self.create_event(
-            data={"sdk": {"name": "foo", "version": "1.0", "client_ip": "127.0.0.1"}}
+        event = self.store_event(
+            data={"sdk": {"name": "foo", "version": "1.0", "client_ip": "127.0.0.1"}},
+            project_id=self.project.id,
         )
         result = event.as_dict()
-        assert result["sdk"] == {"name": "foo", "version": "1.0"}
+        assert result["sdk"] == {
+            "name": "foo",
+            "version": "1.0",
+            "integrations": None,
+            "packages": None,
+        }
 
     def test_get_environment(self):
         environment = Environment.get_or_create(self.project, "production")
@@ -131,13 +156,20 @@ class EventTest(TestCase):
         assert event.ip_address is None
 
     def test_issueless_event(self):
-        event = Factories.create_event(
-            group=None,
-            project=self.project,
-            event_id="a" * 32,
-            tags={"level": "info"},
-            message="Foo bar",
-            data={"culprit": "app/components/events/eventEntries in map"},
+        min_ago = iso_format(before_now(minutes=1))
+
+        event = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "level": "info",
+                "message": "Foo bar",
+                "culprit": "app/components/events/eventEntries in map",
+                "type": "transaction",
+                "timestamp": min_ago,
+                "start_timestamp": min_ago,
+                "contexts": {"trace": {"trace_id": "b" * 32, "span_id": "c" * 16, "op": ""}},
+            },
+            project_id=self.project.id,
         )
         assert event.group is None
         assert event.culprit == "app/components/events/eventEntries in map"
