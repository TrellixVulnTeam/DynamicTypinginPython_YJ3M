commit 01e58c1078b77616e5bf961cbf34a70d31ee72a6
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Jul 24 11:27:18 2018 -0700

    feat(integrations: Use choice mapper for forward stats sync conf (#9167)

diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index 64e1bfa57b..8a2c6d7695 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -66,39 +66,34 @@ JIRA_CUSTOM_FIELD_TYPES = {
 
 
 class JiraIntegration(Integration, IssueSyncMixin):
-    def get_project_config(self):
+    def get_organization_config(self):
         configuration = [
             {
-                'name': 'resolve_status',
-                'type': 'choice',
-                'allowEmpty': True,
-                'label': _('Jira Resolved Status'),
-                'placeholder': _('Select a Status'),
-                'help': _('Declares what the linked Jira ticket workflow status should be transitioned to when the Sentry issue is resolved.'),
-            },
-            {
-                'name': 'unresolve_status',
-                'type': 'choice',
-                'allowEmpty': True,
-                'label': _('Jira Un-Resolved Status'),
-                'placeholder': _('Select a Status'),
-                'help': _('Declares what the linked Jira ticket workflow status should be transitioned to when the Sentry issue is unresolved.'),
-            },
-            {
-                'name': 'resolve_when',
-                'type': 'choice',
-                'allowEmpty': True,
-                'label': _('Resolve in Sentry When'),
-                'placeholder': _('Select a Status'),
-                'help': _('When a Jira ticket is transitioned to this status, trigger resolution of the Sentry issue.'),
+                'name': 'sync_status_reverse',
+                'type': 'boolean',
+                'label': _('Sync Status from Jira to Sentry'),
+                'help': _("When a Jira ticket is moved to a done category, it's linked Sentry issue will be resolved. When a Jira ticket is moved out of a Done category, it's linked sentry issue will be unresolved."),
             },
             {
-                'name': 'unresolve_when',
-                'type': 'choice',
-                'allowEmpty': True,
-                'label': _('Un-Resolve in Sentry When'),
-                'placeholder': _('Select a Status'),
-                'help': _('When a Jira ticket is transitioned to this status, mark the Sentry issue as unresolved.'),
+                'name': 'sync_status_forward',
+                'type': 'choice_mapper',
+                'label': _('Sync Status from Sentry to Jira'),
+                'help': _('Declares what the linked Jira ticket workflow status should be transitioned to when the Sentry issue is resolved or unresolved.'),
+                'addButtonText': _('Map Project'),
+                'addDropdown': {
+                    'emptyMessage': _('All projects configured'),
+                    'noResultsMessage': _('Could not find Jira project'),
+                    'items': [],  # Populated with projects
+                },
+                'mappedSelectors': {
+                    'on_resolve': {'choices': [], 'placeholder': _('Select a status')},
+                    'on_unresolve': {'choices': [], 'placeholder': _('Select a status')},
+                },
+                'columnLabels': {
+                    'on_resolve': _('When resolved'),
+                    'on_unresolve': _('When unresolved'),
+                },
+                'mappedColumnLabel': _('Jira Project'),
             },
             {
                 'name': 'sync_comments',
@@ -124,18 +119,15 @@ class JiraIntegration(Integration, IssueSyncMixin):
 
         try:
             statuses = [(c['id'], c['name']) for c in client.get_valid_statuses()]
-            configuration[0]['choices'] = statuses
-            configuration[1]['choices'] = statuses
-            configuration[2]['choices'] = statuses
-            configuration[3]['choices'] = statuses
+            configuration[1]['mappedSelectors']['on_resolve']['choices'] = statuses
+            configuration[1]['mappedSelectors']['on_unresolve']['choices'] = statuses
+
+            projects = [{'value': p['id'], 'label': p['name']} for p in client.get_projects_list()]
+            configuration[1]['addDropdown']['items'] = projects
         except ApiError:
-            # TODO(epurkhsier): Maybe disabling the inputs for the resolve
-            # statuses is a little heavy handed. Is there something better we
-            # can fall back to?
-            configuration[0]['disabled'] = True
             configuration[1]['disabled'] = True
-            configuration[2]['disabled'] = True
-            configuration[3]['disabled'] = True
+            configuration[1]['disabledReason'] = _(
+                'Unable to communicate with the Jira instance. You may need to reinstall the addon.')
 
         return configuration
 
@@ -590,7 +582,7 @@ class JiraIntegrationProvider(IntegrationProvider):
     features = frozenset([IntegrationFeatures.ISSUE_SYNC])
 
     can_add = False
-    can_add_project = True
+    can_add_project = False
 
     def get_pipeline_views(self):
         return []
