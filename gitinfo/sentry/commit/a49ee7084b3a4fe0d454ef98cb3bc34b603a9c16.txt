commit a49ee7084b3a4fe0d454ef98cb3bc34b603a9c16
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Oct 14 14:58:06 2014 +0100

    Return modified groups

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index b238270e18..20cf6528eb 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -162,6 +162,8 @@ class ProjectGroupIndexEndpoint(Endpoint):
 
             if not group_ids:
                 return Response(status=204)
+        else:
+            group_list = None
 
         serializer = GroupSerializer(data=request.DATA, partial=True)
         if not serializer.is_valid():
@@ -188,8 +190,10 @@ class ProjectGroupIndexEndpoint(Endpoint):
                 resolved_at=now,
             )
 
-            if group_ids and happened:
+            if group_list and happened:
                 for group in group_list:
+                    group.status = GroupStatus.RESOLVED
+                    group.resolved_at = now
                     create_or_update(
                         Activity,
                         project=group.project,
@@ -200,11 +204,14 @@ class ProjectGroupIndexEndpoint(Endpoint):
         elif result.get('status'):
             new_status = STATUS_CHOICES[result['status']]
 
-            Group.objects.filter(filters).exclude(
+            happened = Group.objects.filter(filters).exclude(
                 status=new_status,
             ).update(
                 status=new_status,
             )
+            if group_list and happened:
+                for group in group_list:
+                    group.status = new_status
 
         if result.get('isBookmarked'):
             for group in group_list:
@@ -231,6 +238,12 @@ class ProjectGroupIndexEndpoint(Endpoint):
                     to_object_id=primary_group.id,
                 )
 
+        if group_list:
+            GroupMeta.objects.populate_cache(group_list)
+            # TODO(dcramer): we need create a public API for 'sort_value'
+            context = serialize(list(group_list), request.user)
+            return Response(context)
+
         return Response(status=204)
 
     def delete(self, request, project_id):
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 41dc09d4c8..967a78f2dd 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -72,7 +72,7 @@ class GroupUpdateTest(APITestCase):
         response = self.client.put(url, data={
             'status': 'resolved',
         }, format='json')
-        assert response.status_code == 204
+        assert response.status_code == 200
 
         new_group1 = Group.objects.get(id=group1.id)
         assert new_group1.resolved_at is None
@@ -109,7 +109,7 @@ class GroupUpdateTest(APITestCase):
         response = self.client.put(url, data={
             'isBookmarked': '1',
         }, format='json')
-        assert response.status_code == 204
+        assert response.status_code == 200
 
         bookmark1 = GroupBookmark.objects.filter(group=group1, user=self.user)
         assert bookmark1.exists()
@@ -142,7 +142,7 @@ class GroupUpdateTest(APITestCase):
         response = self.client.put(url, data={
             'merge': '1',
         }, format='json')
-        assert response.status_code == 204
+        assert response.status_code == 200
 
         assert len(merge_group.mock_calls) == 2
         merge_group.delay.assert_any_call(from_object_id=group1.id, to_object_id=group2.id)
