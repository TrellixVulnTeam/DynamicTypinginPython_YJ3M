commit 522714c52af6f7497a2742cecc205d3e4e6257d4
Author: Colleen O'Rourke <colleen@sentry.io>
Date:   Wed Jun 24 15:27:53 2020 -0700

    feat(Vercel): Set environment variables (#19380)
    
    * feat(Vercel): Set environment variables

diff --git a/src/sentry/integrations/vercel/client.py b/src/sentry/integrations/vercel/client.py
index bf77fae36c..0074deb9e2 100644
--- a/src/sentry/integrations/vercel/client.py
+++ b/src/sentry/integrations/vercel/client.py
@@ -13,6 +13,10 @@ class VercelClient(ApiClient):
     USER_URL = "/www/user"
     PROJECTS_URL = "/v4/projects/"
     WEBHOOK_URL = "/v1/integrations/webhooks"
+    ENV_VAR_URL = "/v4/projects/%s/env"
+    GET_ENV_VAR_URL = "/v5/projects/%s/env"
+    SECRETS_URL = "/v2/now/secrets"
+    GET_SECRET_URL = "/v3/now/secrets/%s"
 
     def __init__(self, access_token, team_id=None):
         super(VercelClient, self).__init__()
@@ -46,3 +50,19 @@ class VercelClient(ApiClient):
         }
         response = self.post(self.WEBHOOK_URL, data=data)
         return response
+
+    def get_env_vars(self, vercel_project_id):
+        return self.get(self.GET_ENV_VAR_URL % vercel_project_id)
+
+    def get_secret(self, name):
+        return self.get(self.GET_SECRET_URL % name.lower())["uid"]
+
+    def create_secret(self, vercel_project_id, name, value):
+        data = {"name": name, "value": value}
+        response = self.post(self.SECRETS_URL, data=data)["uid"]
+        return response
+
+    def create_env_variable(self, vercel_project_id, key, value):
+        data = {"key": key, "value": value, "target": "production"}
+        response = self.post(self.ENV_VAR_URL % vercel_project_id, data=data)
+        return response
diff --git a/src/sentry/integrations/vercel/integration.py b/src/sentry/integrations/vercel/integration.py
index 179a4bd5c9..651d72be33 100644
--- a/src/sentry/integrations/vercel/integration.py
+++ b/src/sentry/integrations/vercel/integration.py
@@ -17,7 +17,13 @@ from sentry import options
 from sentry.pipeline import NestedPipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.utils.http import absolute_uri
-from sentry.models import Project, User, SentryAppInstallation, SentryAppInstallationForProvider
+from sentry.models import (
+    Project,
+    ProjectKey,
+    User,
+    SentryAppInstallation,
+    SentryAppInstallationForProvider,
+)
 from sentry.utils.compat import map
 from sentry.shared_integrations.exceptions import IntegrationError, ApiError
 from sentry.mediators.sentry_apps import InternalCreator
@@ -108,6 +114,75 @@ class VercelIntegration(IntegrationInstallation):
 
         return fields
 
+    def update_organization_config(self, data):
+        # data = {"project_mappings": [[sentry_project_id, vercel_project_id]]}
+
+        metadata = self.model.metadata
+        vercel_client = VercelClient(metadata["access_token"], metadata.get("team_id"))
+        config = self.org_integration.config
+        [sentry_project_id, vercel_project_id] = data["project_mappings"][
+            -1
+        ]  # TODO: update this to work in the case where a project is removed
+        sentry_project = Project.objects.get(id=sentry_project_id)
+        enabled_dsn = ProjectKey.get_default(project=sentry_project)
+        if not enabled_dsn:
+            raise IntegrationError("You must have an enabled DSN to continue!")
+        sentry_project_dsn = enabled_dsn.get_dsn(public=True)
+
+        org_secret = self.create_secret(
+            vercel_client, vercel_project_id, "SENTRY_ORG", sentry_project.organization.slug
+        )
+        project_secret = self.create_secret(
+            vercel_client,
+            vercel_project_id,
+            "SENTRY_PROJECT_%s" % sentry_project_id,
+            sentry_project.slug,
+        )
+        dsn_secret = self.create_secret(
+            vercel_client,
+            vercel_project_id,
+            "NEXT_PUBLIC_SENTRY_DSN_%s" % sentry_project_id,
+            sentry_project_dsn,
+        )
+
+        self.create_env_var(vercel_client, vercel_project_id, "SENTRY_ORG", org_secret)
+        self.create_env_var(vercel_client, vercel_project_id, "SENTRY_PROJECT", project_secret)
+        self.create_env_var(vercel_client, vercel_project_id, "NEXT_PUBLIC_SENTRY_DSN", dsn_secret)
+
+        config.update(data)
+        self.org_integration.update(config=config)
+
+    def get_env_vars(self, client, vercel_project_id):
+        return client.get_env_vars(vercel_project_id)
+
+    def get_secret(self, client, name):
+        try:
+            return client.get_secret(name)
+        except ApiError as e:
+            if e.code == 404:
+                return None
+            raise
+
+    def env_var_already_exists(self, client, vercel_project_id, name):
+        return any(
+            [
+                env_var
+                for env_var in self.get_env_vars(client, vercel_project_id)["envs"]
+                if env_var["key"] == name
+            ]
+        )
+
+    def create_secret(self, client, vercel_project_id, name, value):
+        secret = self.get_secret(client, name)
+        if secret:
+            return secret
+        else:
+            return client.create_secret(vercel_project_id, name, value)
+
+    def create_env_var(self, client, vercel_project_id, key, value):
+        if not self.env_var_already_exists(client, vercel_project_id, key):
+            client.create_env_variable(vercel_project_id, key, value)
+
 
 class VercelIntegrationProvider(IntegrationProvider):
     key = "vercel"
diff --git a/tests/sentry/integrations/vercel/test_integration.py b/tests/sentry/integrations/vercel/test_integration.py
index d58992ecfc..a0bd19de81 100644
--- a/tests/sentry/integrations/vercel/test_integration.py
+++ b/tests/sentry/integrations/vercel/test_integration.py
@@ -1,16 +1,20 @@
 from __future__ import absolute_import
 
 import responses
+import json
 
 from six.moves.urllib.parse import parse_qs
-
 from sentry.integrations.vercel import VercelIntegrationProvider
 from sentry.models import (
     Integration,
     OrganizationIntegration,
+    Project,
+    ProjectKey,
+    ProjectKeyStatus,
     SentryAppInstallationForProvider,
     SentryAppInstallation,
 )
+from sentry.shared_integrations.exceptions import IntegrationError
 from sentry.testutils import IntegrationTestCase
 
 
@@ -118,3 +122,157 @@ class VercelIntegrationTest(IntegrationTestCase):
         )
         self.assert_setup_flow(is_team=False)
         assert SentryAppInstallation.objects.count() == 1
+
+    @responses.activate
+    def test_update_organization_config(self):
+        """Test that Vercel environment variables are created"""
+        with self.tasks():
+            self.assert_setup_flow()
+
+        project_id = self.project.id
+        secret_names = [
+            "sentry_org",
+            "sentry_project_%s" % project_id,
+            "next_public_sentry_dsn_%s" % project_id,
+        ]
+
+        for i, name in enumerate(secret_names):
+            responses.add(
+                responses.GET, "https://api.vercel.com/v3/now/secrets/%s" % name, status=404
+            )
+            responses.add(
+                responses.POST, "https://api.vercel.com/v2/now/secrets", json={"uid": "sec_%s" % i},
+            )
+        # mock get envs for all
+        responses.add(
+            responses.GET,
+            "https://api.vercel.com/v5/projects/%s/env"
+            % "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H",
+            json={"envs": []},
+        )
+
+        for i, name in enumerate(secret_names):
+            responses.add(
+                responses.POST,
+                "https://api.vercel.com/v4/projects/%s/env"
+                % "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H",
+                json={"value": "sec_%s" % i, "target": "production", "key": name},
+            )
+
+        org = self.organization
+        data = {
+            "project_mappings": [[project_id, "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H"]]
+        }
+        enabled_dsn = ProjectKey.get_default(project=Project.objects.get(id=project_id)).get_dsn(
+            public=True
+        )
+        integration = Integration.objects.get(provider=self.provider.key)
+        installation = integration.get_installation(org.id)
+        org_integration = OrganizationIntegration.objects.get(
+            organization_id=org.id, integration_id=integration.id
+        )
+        assert org_integration.config == {}
+        installation.update_organization_config(data)
+        org_integration = OrganizationIntegration.objects.get(
+            organization_id=org.id, integration_id=integration.id
+        )
+        assert org_integration.config == {
+            "project_mappings": [[project_id, "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H"]]
+        }
+
+        req_params = json.loads(responses.calls[5].request.body)
+        assert req_params["name"] == "SENTRY_ORG"
+        assert req_params["value"] == org.slug
+
+        req_params = json.loads(responses.calls[7].request.body)
+        assert req_params["name"] == "SENTRY_PROJECT_%s" % project_id
+        assert req_params["value"] == self.project.slug
+
+        req_params = json.loads(responses.calls[9].request.body)
+        assert req_params["name"] == "NEXT_PUBLIC_SENTRY_DSN_%s" % project_id
+        assert req_params["value"] == enabled_dsn
+
+        req_params = json.loads(responses.calls[11].request.body)
+        assert req_params["key"] == "SENTRY_ORG"
+        assert req_params["value"] == "sec_0"
+        assert req_params["target"] == "production"
+
+        req_params = json.loads(responses.calls[13].request.body)
+        assert req_params["key"] == "SENTRY_PROJECT"
+        assert req_params["value"] == "sec_1"
+        assert req_params["target"] == "production"
+
+        req_params = json.loads(responses.calls[15].request.body)
+        assert req_params["key"] == "NEXT_PUBLIC_SENTRY_DSN"
+        assert req_params["value"] == "sec_2"
+        assert req_params["target"] == "production"
+
+    @responses.activate
+    def test_update_org_config_vars_exist(self):
+        """Test the case wherein the secrets and env vars already exist"""
+
+        with self.tasks():
+            self.assert_setup_flow()
+
+        project_id = self.project.id
+        secret_names = [
+            "sentry_org",
+            "sentry_project_%s" % project_id,
+            "next_public_sentry_dsn_%s" % project_id,
+        ]
+        env_var_names = ["SENTRY_ORG", "SENTRY_PROJECT", "NEXT_PUBLIC_SENTRY_DSN"]
+
+        for i, name in enumerate(secret_names):
+            responses.add(
+                responses.GET,
+                "https://api.vercel.com/v3/now/secrets/%s" % name,
+                json={"uid": "sec_%s" % i, "name": name},
+            )
+
+        for i, env_var_name in enumerate(env_var_names):
+            responses.add(
+                responses.GET,
+                "https://api.vercel.com/v5/projects/%s/env"
+                % "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H",
+                json={
+                    "envs": [{"value": "sec_%s" % i, "target": "production", "key": env_var_name}],
+                },
+            )
+
+        org = self.organization
+        data = {
+            "project_mappings": [[project_id, "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H"]]
+        }
+        integration = Integration.objects.get(provider=self.provider.key)
+        installation = integration.get_installation(org.id)
+        org_integration = OrganizationIntegration.objects.get(
+            organization_id=org.id, integration_id=integration.id
+        )
+        assert org_integration.config == {}
+        installation.update_organization_config(data)
+        org_integration = OrganizationIntegration.objects.get(
+            organization_id=org.id, integration_id=integration.id
+        )
+        assert org_integration.config == {
+            "project_mappings": [[project_id, "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H"]]
+        }
+
+    @responses.activate
+    def test_upgrade_org_config_no_dsn(self):
+        """Test that the function doesn't progress if there is no active DSN"""
+
+        with self.tasks():
+            self.assert_setup_flow()
+
+        project_id = self.project.id
+        org = self.organization
+        data = {
+            "project_mappings": [[project_id, "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H"]]
+        }
+        integration = Integration.objects.get(provider=self.provider.key)
+        installation = integration.get_installation(org.id)
+
+        dsn = ProjectKey.get_default(project=Project.objects.get(id=project_id))
+        dsn.update(id=dsn.id, status=ProjectKeyStatus.INACTIVE)
+        with self.assertRaises(IntegrationError):
+            installation.update_organization_config(data)
