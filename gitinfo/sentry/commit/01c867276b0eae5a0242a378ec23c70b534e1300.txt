commit 01c867276b0eae5a0242a378ec23c70b534e1300
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Jan 13 11:32:57 2020 -0800

    perf: Make binding nodes noop if node was already fetched (#16400)
    
    Make eventstore.bind_nodes() and event.bind_node_data() noop if node was already fetched. This is a temporary measure to prevent overfetching from nodestore.

diff --git a/src/sentry/eventstore/base.py b/src/sentry/eventstore/base.py
index b4e218d329..438f8a60e9 100644
--- a/src/sentry/eventstore/base.py
+++ b/src/sentry/eventstore/base.py
@@ -190,8 +190,12 @@ class EventStorage(Service):
         For binding a single Event object (most use cases), it's easier to use
         event.bind_node_data().
         """
+        # Temporarily make bind_nodes noop to prevent unnecessary additional calls
+        # to nodestore by the event serializer.
+        unfetched_object_list = [i for i in object_list if not getattr(i, node_name)._node_data]
+
         object_node_list = [
-            (i, getattr(i, node_name)) for i in object_list if getattr(i, node_name).id
+            (i, getattr(i, node_name)) for i in unfetched_object_list if getattr(i, node_name).id
         ]
 
         node_ids = [n.id for _, n in object_node_list]
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index c6e1b646c0..0eb165e410 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -343,6 +343,10 @@ class EventCommon(object):
         return data
 
     def bind_node_data(self):
+        # Do not rebind if node_data is already loaded
+        if self.data._node_data:
+            return
+
         node_id = Event.generate_node_id(self.project_id, self.event_id)
         node_data = nodestore.get(node_id) or {}
         ref = self.data.get_ref(self)
diff --git a/tests/sentry/eventstore/test_base.py b/tests/sentry/eventstore/test_base.py
index 9dd2baa870..64713242d5 100644
--- a/tests/sentry/eventstore/test_base.py
+++ b/tests/sentry/eventstore/test_base.py
@@ -5,7 +5,7 @@ import mock
 import pytest
 import six
 
-from sentry import eventstore
+from sentry import eventstore, nodestore
 from sentry.eventstore.models import Event
 from sentry.testutils import SnubaTestCase, TestCase
 from sentry.testutils.helpers.datetime import iso_format, before_now
@@ -45,6 +45,11 @@ class EventStorageTest(TestCase):
         assert event.data._node_data is not None
         assert event.data["user"]["id"] == u"user1"
 
+        # Bind nodes is noop if node data was already fetched
+        with mock.patch.object(nodestore, "get_multi") as mock_get_multi:
+            self.eventstorage.bind_nodes([event, event2])
+            assert mock_get_multi.call_count == 0
+
 
 class ServiceDelegationTest(TestCase, SnubaTestCase):
     def setUp(self):
diff --git a/tests/sentry/eventstore/test_models.py b/tests/sentry/eventstore/test_models.py
index 14166e1b78..bff1a462ea 100644
--- a/tests/sentry/eventstore/test_models.py
+++ b/tests/sentry/eventstore/test_models.py
@@ -1,9 +1,10 @@
 from __future__ import absolute_import
 
+import mock
 import pickle
 import pytest
 
-from sentry import eventstore
+from sentry import eventstore, nodestore
 from sentry.db.models.fields.node import NodeData
 from sentry.eventstore.models import Event
 from sentry.models import Environment
@@ -227,6 +228,26 @@ class EventTest(TestCase):
         assert not event_from_nodestore.group_id
         assert not event_from_nodestore.group
 
+    def test_bind_node_data(self):
+        event = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "message": "test",
+                "timestamp": iso_format(before_now(seconds=1)),
+                "type": "error",
+            },
+            project_id=self.project.id,
+        )
+        group_id = event.group.id
+
+        e1 = Event(self.project.id, "a" * 32, group_id=group_id)
+        e1.bind_node_data()
+
+        with mock.patch.object(nodestore, "get") as mock_get:
+            event.bind_node_data()
+            event.bind_node_data()
+            assert mock_get.call_count == 0
+
 
 @pytest.mark.django_db
 def test_renormalization(monkeypatch, factories, task_runner, default_project):
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index 47579cd03f..a68b1c45d3 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -135,11 +135,15 @@ class EventNodeStoreTest(TestCase):
 
         assert event.data.get_ref(event) != event.data.get_ref(invalid_event)
 
+        # Unload node data to force reloading from nodestore
+        event.data._node_data = None
+
         with pytest.raises(NodeIntegrityFailure):
             event.bind_node_data()
 
     def test_accepts_valid_ref(self):
-        event = self.store_event(data={}, project_id=self.project.id)
+        self.store_event(data={"event_id": "a" * 32}, project_id=self.project.id)
+        event = Event(project_id=self.project.id, event_id="a" * 32)
         event.data.bind_ref(event)
         event.bind_node_data()
         assert event.data.ref == event.project.id
