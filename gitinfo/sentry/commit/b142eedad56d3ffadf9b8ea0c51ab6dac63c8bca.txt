commit b142eedad56d3ffadf9b8ea0c51ab6dac63c8bca
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Mar 17 18:06:37 2020 -0700

    chore(ts): Convert serviceIncidents (#17719)

diff --git a/src/sentry/static/sentry/app/actionCreators/serviceIncidents.jsx b/src/sentry/static/sentry/app/actionCreators/serviceIncidents.jsx
deleted file mode 100644
index de9d42ea63..0000000000
--- a/src/sentry/static/sentry/app/actionCreators/serviceIncidents.jsx
+++ /dev/null
@@ -1,50 +0,0 @@
-import ConfigStore from 'app/stores/configStore';
-import ServiceIncidentActions from 'app/actions/serviceIncidentActions';
-
-function getIncidentsFromIncidentResponse(incidents) {
-  if (incidents === null || incidents.length === 0) {
-    return [[], 'none'];
-  }
-
-  let isMajor = false;
-  const log = [];
-  incidents.forEach(item => {
-    if (!isMajor && item.impact === 'major') {
-      isMajor = true;
-    }
-    log.push({
-      name: item.name,
-      updates: item.incident_updates.map(update => update.body),
-      url: item.shortlink,
-      status: item.status,
-    });
-  });
-
-  return [log, isMajor ? 'major' : 'minor'];
-}
-
-export async function load() {
-  const cfg = ConfigStore.get('statuspage');
-  if (cfg && cfg.id) {
-    ServiceIncidentActions.update();
-
-    const response = await fetch(
-      `https://${cfg.id}.${cfg.api_host}/api/v2/incidents/unresolved.json`
-    );
-    if (response.ok) {
-      const data = await response.json();
-      const [incidents, indicator] = getIncidentsFromIncidentResponse(data.incidents);
-      ServiceIncidentActions.updateSuccess({
-        status: {
-          incidents,
-          indicator,
-          url: data.page.url,
-        },
-      });
-    } else {
-      ServiceIncidentActions.updateError({
-        status: null,
-      });
-    }
-  }
-}
diff --git a/src/sentry/static/sentry/app/actionCreators/serviceIncidents.tsx b/src/sentry/static/sentry/app/actionCreators/serviceIncidents.tsx
new file mode 100644
index 0000000000..c629c94dab
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/serviceIncidents.tsx
@@ -0,0 +1,67 @@
+import ConfigStore from 'app/stores/configStore';
+import {SentryServiceIncident, SentryServiceStatus} from 'app/types';
+
+type IncidentImpact = SentryServiceStatus['indicator'];
+
+/**
+ * This is a partial typing of the statuspage API [0]
+ *
+ * [0]: https://doers.statuspage.io/api/v2/incidents/
+ */
+type StatuspageIncident = {
+  id: string;
+  name: string;
+  status: string;
+  impact: IncidentImpact;
+  shortlink: string;
+  incident_updates: {body: string}[];
+};
+
+function getIncidentsFromIncidentResponse(
+  statuspageIncidents: StatuspageIncident[]
+): {incidents: SentryServiceIncident[]; indicator: IncidentImpact} {
+  if (statuspageIncidents === null || statuspageIncidents.length === 0) {
+    return {incidents: [], indicator: 'none'};
+  }
+
+  let isMajor = false;
+  const incidents: SentryServiceIncident[] = [];
+
+  statuspageIncidents.forEach(item => {
+    if (!isMajor && item.impact === 'major') {
+      isMajor = true;
+    }
+    incidents.push({
+      id: item.id,
+      name: item.name,
+      updates: item.incident_updates.map(update => update.body),
+      url: item.shortlink,
+      status: item.status,
+    });
+  });
+
+  return {incidents, indicator: isMajor ? 'major' : 'minor'};
+}
+
+export async function loadIncidents(): Promise<SentryServiceStatus | null> {
+  const cfg = ConfigStore.get('statuspage');
+  if (!cfg || !cfg.id) {
+    return null;
+  }
+  const response = await fetch(
+    `https://${cfg.id}.${cfg.api_host}/api/v2/incidents/unresolved.json`
+  );
+
+  if (!response.ok) {
+    return null;
+  }
+
+  const data = await response.json();
+  const {incidents, indicator} = getIncidentsFromIncidentResponse(data.incidents);
+
+  return {
+    incidents,
+    indicator,
+    url: data.page.url,
+  };
+}
diff --git a/src/sentry/static/sentry/app/actions/serviceIncidentActions.tsx b/src/sentry/static/sentry/app/actions/serviceIncidentActions.tsx
deleted file mode 100644
index 897b8e2fc7..0000000000
--- a/src/sentry/static/sentry/app/actions/serviceIncidentActions.tsx
+++ /dev/null
@@ -1,3 +0,0 @@
-import Reflux from 'reflux';
-
-export default Reflux.createActions(['update', 'updateError', 'updateSuccess']);
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index 9739267d0d..a5dffa4dd7 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -27,7 +27,6 @@ import {
 import {extractSelectionParameters} from 'app/components/organizations/globalSelectionHeader/utils';
 import {getDiscoverLandingUrl} from 'app/views/eventsV2/utils';
 import {hideSidebar, showSidebar} from 'app/actionCreators/preferences';
-import {load as loadIncidents} from 'app/actionCreators/serviceIncidents';
 import {t} from 'app/locale';
 import ConfigStore from 'app/stores/configStore';
 import Feature from 'app/components/acl/feature';
@@ -76,8 +75,6 @@ class Sidebar extends React.Component {
     document.body.classList.add('body-sidebar');
     document.addEventListener('click', this.flyoutCloseHandler);
 
-    loadIncidents();
-
     this.hashChangeHandler();
     this.doCollapse(this.props.collapsed);
   }
diff --git a/src/sentry/static/sentry/app/components/sidebar/serviceIncidents.jsx b/src/sentry/static/sentry/app/components/sidebar/serviceIncidents.tsx
similarity index 74%
rename from src/sentry/static/sentry/app/components/sidebar/serviceIncidents.jsx
rename to src/sentry/static/sentry/app/components/sidebar/serviceIncidents.tsx
index 0318cba308..32d7a8d0ea 100644
--- a/src/sentry/static/sentry/app/components/sidebar/serviceIncidents.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/serviceIncidents.tsx
@@ -1,55 +1,55 @@
-import PropTypes from 'prop-types';
 import React from 'react';
-import Reflux from 'reflux';
-import createReactClass from 'create-react-class';
 import styled from '@emotion/styled';
 
 import {t} from 'app/locale';
 import Button from 'app/components/button';
-import ServiceIncidentStore from 'app/stores/serviceIncidentStore';
 import InlineSvg from 'app/components/inlineSvg';
+import {loadIncidents} from 'app/actionCreators/serviceIncidents';
+import {SentryServiceStatus} from 'app/types';
+import space from 'app/styles/space';
 
+import {SidebarOrientation, SidebarPanelKey} from './types';
+import SidebarPanelEmpty from './sidebarPanelEmpty';
 import SidebarItem from './sidebarItem';
 import SidebarPanel from './sidebarPanel';
-import SidebarPanelEmpty from './sidebarPanelEmpty';
 
-const ServiceIncidents = createReactClass({
-  displayName: 'ServiceIncidents',
+type Props = {
+  orientation: SidebarOrientation;
+  collapsed: boolean;
+  showPanel: boolean;
+  currentPanel: SidebarPanelKey;
+  hidePanel: () => void;
+  onShowPanel: () => void;
+};
 
-  propTypes: {
-    orientation: PropTypes.oneOf(['top', 'left']),
-    collapsed: PropTypes.bool,
-    showPanel: PropTypes.bool,
-    currentPanel: PropTypes.string,
-    hidePanel: PropTypes.func,
-    onShowPanel: PropTypes.func.isRequired,
-  },
+type State = {
+  status: SentryServiceStatus | null;
+};
 
-  mixins: [Reflux.listenTo(ServiceIncidentStore, 'onIncidentChange')],
+class ServiceIncidents extends React.Component<Props, State> {
+  state: State = {
+    status: null,
+  };
 
-  getInitialState() {
-    return {
-      status: null,
-    };
-  },
+  componentDidMount() {
+    this.fetchData();
+  }
 
-  onIncidentChange(status) {
-    this.setState({
-      status: {...status},
-    });
-  },
+  async fetchData() {
+    this.setState({status: await loadIncidents()});
+  }
 
   render() {
     const {
-      orientation,
-      collapsed,
       currentPanel,
       showPanel,
-      hidePanel,
       onShowPanel,
+      hidePanel,
+      collapsed,
+      orientation,
     } = this.props;
-
     const {status} = this.state;
+
     if (!status) {
       return null;
     }
@@ -92,7 +92,7 @@ const ServiceIncidents = createReactClass({
             <IncidentList className="incident-list">
               {status.incidents.map(incident => (
                 <IncidentItem key={incident.id}>
-                  <IncidentTitle>{incident.title}</IncidentTitle>
+                  <IncidentTitle>{incident.name}</IncidentTitle>
                   {incident.updates ? (
                     <div>
                       <StatusHeader>{t('Latest updates:')}</StatusHeader>
@@ -115,33 +115,33 @@ const ServiceIncidents = createReactClass({
         )}
       </React.Fragment>
     );
-  },
-});
+  }
+}
 
 export default ServiceIncidents;
 
 const IncidentList = styled('ul')`
-  list-style: none;
-  padding: 20px 20px 0;
   font-size: 13px;
+  list-style: none;
+  padding: ${space(3)} ${space(3)} 0;
 `;
 
 const IncidentItem = styled('li')`
   border-bottom: 1px solid ${p => p.theme.borderLight};
-  margin-bottom: 20px;
-  padding-bottom: 5px;
+  margin-bottom: ${space(3)};
+  padding-bottom: ${space(0.75)};
 `;
 
 const IncidentTitle = styled('div')`
-  font-size: 18px;
+  font-size: ${p => p.theme.fontSizeExtraLarge};
   font-weight: 600;
   line-height: 1.2;
-  margin-bottom: 15px;
+  margin-bottom: ${space(2)};
 `;
 const StatusHeader = styled('div')`
   color: #7c6a8e;
-  margin-bottom: 15px;
-  font-size: 14px;
+  margin-bottom: ${space(2)};
+  font-size: ${p => p.theme.fontSizeMedium};
   font-weight: 600;
   line-height: 1;
 `;
@@ -150,6 +150,6 @@ const StatusList = styled('ul')`
   padding: 0;
 `;
 const StatusItem = styled('li')`
-  margin-bottom: 15px;
+  margin-bottom: ${space(2)};
   line-height: 1.5;
 `;
diff --git a/src/sentry/static/sentry/app/stores/serviceIncidentStore.jsx b/src/sentry/static/sentry/app/stores/serviceIncidentStore.jsx
deleted file mode 100644
index c8080faf06..0000000000
--- a/src/sentry/static/sentry/app/stores/serviceIncidentStore.jsx
+++ /dev/null
@@ -1,26 +0,0 @@
-import Reflux from 'reflux';
-
-import ServiceIncidentActions from 'app/actions/serviceIncidentActions';
-
-const ServiceIncidentStore = Reflux.createStore({
-  init() {
-    this.reset();
-
-    this.listenTo(ServiceIncidentActions.updateSuccess, this.onUpdateSuccess);
-  },
-
-  reset() {
-    this.status = {};
-  },
-
-  onUpdateSuccess(data) {
-    this.status = data.status;
-    this.trigger(this.status);
-  },
-
-  getStatus() {
-    return this.status;
-  },
-});
-
-export default ServiceIncidentStore;
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 4dd070fdd3..b4db2ccb47 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -1048,3 +1048,17 @@ export type Broadcast = {
   dateExpires: string;
   hasSeen: boolean;
 };
+
+export type SentryServiceIncident = {
+  id: string;
+  name: string;
+  updates?: string[];
+  url: string;
+  status: string;
+};
+
+export type SentryServiceStatus = {
+  indicator: 'major' | 'minor' | 'none';
+  incidents: SentryServiceIncident[];
+  url: string;
+};
diff --git a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
index 19d424526b..85ab59c4a8 100644
--- a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
@@ -1120,38 +1120,36 @@ exports[`Sidebar SidebarPanel can show Incidents in Sidebar Panel 1`] = `
   className="incident-list"
 >
   <ul
-    className="incident-list css-1iut4k0-IncidentList eglisrw0"
+    className="incident-list css-1brq3ev-IncidentList e1467r1t0"
   >
     <IncidentItem
       key="1"
     >
       <li
-        className="css-16z7ejm-IncidentItem eglisrw1"
+        className="css-10usrjr-IncidentItem e1467r1t1"
       >
         <IncidentTitle>
           <div
-            className="css-c7gclf-IncidentTitle eglisrw2"
-          >
-            Test Incident
-          </div>
+            className="css-1luh9do-IncidentTitle e1467r1t2"
+          />
         </IncidentTitle>
         <div>
           <StatusHeader>
             <div
-              className="css-1p5jdbq-StatusHeader eglisrw3"
+              className="css-4apn99-StatusHeader e1467r1t3"
             >
               Latest updates:
             </div>
           </StatusHeader>
           <StatusList>
             <ul
-              className="css-xjcuzc-StatusList eglisrw4"
+              className="css-xjcuzc-StatusList e1467r1t4"
             >
               <StatusItem
                 key="0"
               >
                 <li
-                  className="css-y8e5o2-StatusItem eglisrw5"
+                  className="css-nuktmw-StatusItem e1467r1t5"
                 >
                   First Update
                 </li>
@@ -1160,7 +1158,7 @@ exports[`Sidebar SidebarPanel can show Incidents in Sidebar Panel 1`] = `
                 key="1"
               >
                 <li
-                  className="css-y8e5o2-StatusItem eglisrw5"
+                  className="css-nuktmw-StatusItem e1467r1t5"
                 >
                   Second Update
                 </li>
diff --git a/tests/js/spec/components/sidebar/index.spec.jsx b/tests/js/spec/components/sidebar/index.spec.jsx
index e5dcd81454..d94b435fb9 100644
--- a/tests/js/spec/components/sidebar/index.spec.jsx
+++ b/tests/js/spec/components/sidebar/index.spec.jsx
@@ -1,9 +1,11 @@
 import React from 'react';
 
 import {mountWithTheme, shallow} from 'sentry-test/enzyme';
-import ServiceIncidentStore from 'app/stores/serviceIncidentStore';
 import ConfigStore from 'app/stores/configStore';
 import SidebarContainer, {Sidebar} from 'app/components/sidebar';
+import * as incidentActions from 'app/actionCreators/serviceIncidents';
+
+jest.mock('app/actionCreators/serviceIncidents');
 
 describe('Sidebar', function() {
   let wrapper;
@@ -299,14 +301,16 @@ describe('Sidebar', function() {
       // This advances timers enough so that mark as seen should be called if it wasn't unmounted
       jest.advanceTimersByTime(600);
       expect(apiMocks.broadcastsMarkAsSeen).not.toHaveBeenCalled();
+      jest.useRealTimers();
     });
 
     it('can show Incidents in Sidebar Panel', async function() {
+      incidentActions.loadIncidents = jest.fn(() => ({
+        incidents: [TestStubs.ServiceIncident()],
+      }));
+
       wrapper = createWrapper();
-      ServiceIncidentStore.onUpdateSuccess({
-        status: {incidents: [TestStubs.ServiceIncident()]},
-      });
-      wrapper.update();
+      await tick();
 
       wrapper.find('ServiceIncidents').simulate('click');
       wrapper.update();
