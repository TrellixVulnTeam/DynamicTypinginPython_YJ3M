commit 82f5272bfa237f0eba522622681048f35e3e1c1f
Author: ted kaemming <ted@kaemming.com>
Date:   Thu Oct 20 12:41:56 2016 -0700

    Extend retention period for 1 day TSDB storage. (#4387)

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 741521479b..bcc3f19025 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -838,7 +838,7 @@ SENTRY_TSDB_ROLLUPS = (
     # (time in seconds, samples to keep)
     (10, 360),  # 60 minutes at 10 seconds
     (3600, 24 * 7),  # 7 days at 1 hour
-    (3600 * 24, 60),  # 60 days at 1 day
+    (3600 * 24, 90),  # 90 days at 1 day
 )
 
 
diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index 8bce96744f..3742f7aca8 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -77,9 +77,21 @@ class TSDBModel(Enum):
 class BaseTSDB(object):
     models = TSDBModel
 
-    def __init__(self, rollups=settings.SENTRY_TSDB_ROLLUPS):
+    def __init__(self, rollups=None, legacy_rollups=None):
+        if rollups is None:
+            rollups = settings.SENTRY_TSDB_ROLLUPS
+
         self.rollups = OrderedDict(rollups)
 
+        # The ``SENTRY_TSDB_LEGACY_ROLLUPS`` setting should be used to store
+        # previous rollup configuration values after they are modified in
+        # ``SENTRY_TSDB_ROLLUPS``. The values can be removed after the new
+        # rollup period is full of new data.
+        if legacy_rollups is None:
+            legacy_rollups = getattr(settings, 'SENTRY_TSDB_LEGACY_ROLLUPS', {})
+
+        self.__legacy_rollups = legacy_rollups
+
     def validate(self):
         """
         Validates the settings for this backend (i.e. such as proper connection
@@ -179,7 +191,11 @@ class BaseTSDB(object):
         if timestamp is None:
             timestamp = timezone.now()
 
-        lifespan = timedelta(seconds=rollup * (self.rollups[rollup] - 1))
+        samples = self.__legacy_rollups.get(rollup)
+        if samples is None:
+            samples = self.rollups[rollup]
+
+        lifespan = timedelta(seconds=rollup * (samples - 1))
         return self.normalize_to_epoch(
             timestamp - lifespan,
             rollup,
