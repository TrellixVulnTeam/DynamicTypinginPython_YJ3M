commit ed2c8fe0f3b2b87a96176fe3a6135751f845e556
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Mon Feb 27 21:20:58 2017 +0100

    Use StringIO to keep api consistent, Rename plugin task/queue getters

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 5fa8d40498..e57c2b2b20 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -432,7 +432,7 @@ CELERY_DEFAULT_ROUTING_KEY = "default"
 CELERY_CREATE_MISSING_QUEUES = True
 CELERY_REDIRECT_STDOUTS = False
 CELERYD_HIJACK_ROOT_LOGGER = False
-CELERY_IMPORTS = [
+CELERY_IMPORTS = (
     'sentry.tasks.auth',
     'sentry.tasks.auto_resolve_issues',
     'sentry.tasks.beacon',
@@ -451,7 +451,7 @@ CELERY_IMPORTS = [
     'sentry.tasks.process_buffer',
     'sentry.tasks.reports',
     'sentry.tasks.store',
-]
+)
 CELERY_QUEUES = [
     Queue('alerts', routing_key='alerts'),
     Queue('auth', routing_key='auth'),
diff --git a/src/sentry/http.py b/src/sentry/http.py
index cf95d847fd..b56a591d5c 100644
--- a/src/sentry/http.py
+++ b/src/sentry/http.py
@@ -272,7 +272,14 @@ def fetch_file(url, headers=None, domain_lock_enabled=True, outfile=None):
             if cl > settings.SENTRY_FETCH_MAX_SIZE:
                 raise OverflowError()
 
-            contents = []
+            try:
+                from cStringIO import StringIO
+            except ImportError:
+                from StringIO import StringIO
+
+            if outfile is None:
+                outfile = StringIO()
+
             cl = 0
 
             # Only need to even attempt to read the response body if we
@@ -281,11 +288,7 @@ def fetch_file(url, headers=None, domain_lock_enabled=True, outfile=None):
                 for chunk in response.iter_content(16 * 1024):
                     if time.time() - start > settings.SENTRY_FETCH_TIMEOUT:
                         raise Timeout()
-                    # we write to a file instead of writing a string
-                    if outfile is not None:
-                        outfile.write(chunk)
-                    else:
-                        contents.append(chunk)
+                    outfile.write(chunk)
                     cl += len(chunk)
                     if cl > settings.SENTRY_FETCH_MAX_SIZE:
                         raise OverflowError()
@@ -331,16 +334,18 @@ def fetch_file(url, headers=None, domain_lock_enabled=True, outfile=None):
             # TODO(dcramer): we want to be less aggressive on disabling domains
             if domain_lock_enabled:
                 cache.set(domain_key, error or '', 300)
-            logger.warning('source.disabled', extra=error)
+                logger.warning('source.disabled', extra=error)
             raise CannotFetch(error)
 
-        if outfile is not None:
-            body = None
-        else:
-            body = b''.join(contents)
         headers = {k.lower(): v for k, v in response.headers.items()}
         encoding = response.encoding
 
+        if isinstance(outfile, file):
+            body = None
+        else:
+            body = outfile.getvalue()
+            outfile.close()  # we only want to close StringIO
+
         result = (headers, body, response.status_code, encoding)
     finally:
         if response is not None:
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index f1a766b59b..9f638e7a54 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -49,17 +49,22 @@ def init_plugin(plugin):
         for cls in plugin.get_custom_contexts() or ():
             contexttype(cls)
 
-    if (hasattr(plugin, 'get_celerybeat_schedule') and plugin.is_enabled()):
-        settings.CELERYBEAT_SCHEDULE.update(plugin.get_celerybeat_schedule())
+    if (hasattr(plugin, 'get_cron_schedule') and plugin.is_enabled()):
+        settings.CELERYBEAT_SCHEDULE.update(plugin.get_cron_schedule())
 
-    if (hasattr(plugin, 'get_celery_imports') and plugin.is_enabled()):
-        settings.CELERY_IMPORTS.append(plugin.get_celery_imports())
+    if (hasattr(plugin, 'get_worker_imports') and plugin.is_enabled()):
+        settings.CELERY_IMPORTS += (plugin.get_worker_imports(),)
 
-    if (hasattr(plugin, 'get_celery_queues') and plugin.is_enabled()):
+    if (hasattr(plugin, 'get_worker_queues') and plugin.is_enabled()):
         from kombu import Queue
-        for queue in plugin.get_celery_queues():
-            # queue[0] == name, queue[1] == routing_key
-            settings.CELERY_QUEUES.append(Queue(queue[0], routing_key=queue[1]))
+        for queue in plugin.get_worker_queues():
+            try:
+                name, routing_key = queue
+            except ValueError:
+                name = routing_key = queue
+            q = Queue(name, routing_key=routing_key)
+            q.durable = False
+            settings.CELERY_QUEUES.append(q)
 
 
 def initialize_receivers():
