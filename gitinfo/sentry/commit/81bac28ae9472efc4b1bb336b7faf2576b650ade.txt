commit 81bac28ae9472efc4b1bb336b7faf2576b650ade
Author: Matte Noble <me@mattenoble.com>
Date:   Tue Apr 16 16:16:10 2019 -0700

    feat(api): Add `refreshed` attribute to ApiToken (#12738)
    
    * feat(api): Add `refreshed` attribute to ApiToken
    
    Adds a boolean attribute to `ApiToken` to denote whether it has been
    refreshed or not.
    
    Once a token is refreshed, it should no longer be allowed to be
    refreshed again. It should be completely inactive.
    
    * ref(app-platform): Delete token on refresh
    
    When a token is refreshed, we delete it all together. It's no longer
    active nor should be refreshable.

diff --git a/src/sentry/mediators/token_exchange/refresher.py b/src/sentry/mediators/token_exchange/refresher.py
index 1d875902d2..6d239b3a61 100644
--- a/src/sentry/mediators/token_exchange/refresher.py
+++ b/src/sentry/mediators/token_exchange/refresher.py
@@ -1,9 +1,6 @@
 from __future__ import absolute_import
 
 import six
-import pytz
-
-from datetime import datetime
 
 from sentry import analytics
 from sentry.coreapi import APIUnauthorized
@@ -26,7 +23,7 @@ class Refresher(Mediator):
 
     def call(self):
         self._validate()
-        self._expire_token()
+        self._delete_token()
 
         return ApiToken.objects.create(
             user=self.user,
@@ -50,18 +47,13 @@ class Refresher(Mediator):
         )
 
         self._validate_token_belongs_to_app()
-        self._validate_token_is_active()
 
     def _validate_token_belongs_to_app(self):
         if self.token.application != self.application:
             raise APIUnauthorized
 
-    def _validate_token_is_active(self):
-        if self.token.expires_at < datetime.utcnow().replace(tzinfo=pytz.UTC):
-            raise APIUnauthorized
-
-    def _expire_token(self):
-        self.token.update(expires_at=datetime.utcnow())
+    def _delete_token(self):
+        self.token.delete()
 
     @memoize
     def token(self):
diff --git a/tests/sentry/api/endpoints/test_sentry_app_authorizations.py b/tests/sentry/api/endpoints/test_sentry_app_authorizations.py
index e3272a6a1e..d527a4ba56 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_authorizations.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_authorizations.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import
 
 import six
-import pytz
 
 from datetime import datetime, timedelta
 from django.core.urlresolvers import reverse
@@ -154,5 +153,5 @@ class TestSentryAppAuthorizations(APITestCase):
         assert response.data['refreshToken'] != refresh_token
         assert response.data['expiresAt'] > datetime.utcnow()
 
-        old_token = ApiToken.objects.get(id=token_id)
-        assert old_token.expires_at < datetime.now(pytz.UTC)
+        old_token = ApiToken.objects.filter(id=token_id)
+        assert not old_token.exists()
diff --git a/tests/sentry/mediators/token_exchange/test_refresher.py b/tests/sentry/mediators/token_exchange/test_refresher.py
index 9d765f5b2f..b260c9c876 100644
--- a/tests/sentry/mediators/token_exchange/test_refresher.py
+++ b/tests/sentry/mediators/token_exchange/test_refresher.py
@@ -1,9 +1,6 @@
 from __future__ import absolute_import
 
-import pytz
-
 from mock import patch
-from datetime import datetime, timedelta
 
 from sentry.coreapi import APIUnauthorized
 from sentry.models import ApiApplication, ApiToken, SentryApp
@@ -34,9 +31,9 @@ class TestRefresher(TestCase):
     def test_happy_path(self):
         assert self.refresher.call()
 
-    def test_expires_active_token(self):
+    def test_deletes_refreshed_token(self):
         self.refresher.call()
-        assert ApiToken.objects.get(id=self.token.id).expires_at < datetime.now(pytz.UTC)
+        assert not ApiToken.objects.filter(id=self.token.id).exists()
 
     @patch('sentry.mediators.token_exchange.Validator.run')
     def test_validates_generic_token_exchange_requirements(self, validator):
@@ -59,12 +56,6 @@ class TestRefresher(TestCase):
         with self.assertRaises(APIUnauthorized):
             self.refresher.call()
 
-    def test_cannot_exchange_expired_token(self):
-        self.token.update(expires_at=(datetime.utcnow() - timedelta(hours=1)))
-
-        with self.assertRaises(APIUnauthorized):
-            self.refresher.call()
-
     @patch('sentry.models.ApiToken.objects.get', side_effect=ApiToken.DoesNotExist)
     def test_token_must_exist(self, _):
         with self.assertRaises(APIUnauthorized):
