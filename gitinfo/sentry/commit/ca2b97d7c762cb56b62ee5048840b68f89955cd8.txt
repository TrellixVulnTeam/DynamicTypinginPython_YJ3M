commit ca2b97d7c762cb56b62ee5048840b68f89955cd8
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Jul 2 09:25:34 2019 -0700

    feat(events-v2): Events v2 endpoint also supports group id values (#13809)
    
    This will be required for Incidents search to work together with Events V2

diff --git a/src/sentry/api/bases/organization_events.py b/src/sentry/api/bases/organization_events.py
index fbc2159167..1605b4770b 100644
--- a/src/sentry/api/bases/organization_events.py
+++ b/src/sentry/api/bases/organization_events.py
@@ -37,6 +37,23 @@ class Direction(Enum):
 class OrganizationEventsEndpointBase(OrganizationEndpoint):
     def get_snuba_query_args(self, request, organization, params):
         query = request.GET.get('query')
+
+        group_ids = request.GET.getlist('group')
+        if group_ids:
+            try:
+                group_ids = set(map(int, filter(None, group_ids)))
+            except ValueError:
+                raise OrganizationEventsError('Invalid group parameter. Values must be numbers')
+
+            projects = Project.objects.filter(
+                organization=organization,
+                group__id__in=group_ids,
+            ).distinct()
+            if any(p for p in projects if not request.access.has_project_access(p)):
+                raise PermissionDenied
+            params['issue.id'] = list(group_ids)
+            params['project_id'] = list(set([p.id for p in projects] + params['project_id']))
+
         try:
             snuba_args = get_snuba_query_args(query=query, params=params)
         except InvalidSearchQuery as exc:
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index d72ca57dff..72769c6d1a 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -20,6 +20,9 @@ class OrganizationEventsTestBase(APITestCase, SnubaTestCase):
             }
         )
 
+    def assert_events_in_response(self, response, event_ids):
+        assert sorted(map(lambda x: x['eventID'], response.data)) == sorted(event_ids)
+
 
 class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
 
@@ -593,3 +596,73 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
         assert response.data[0]['issue.id'] == event1.group_id
         assert response.data[1]['issue.id'] == event2.group_id
         assert response.data[2]['issue.id'] == event2.group_id
+
+    def test_group_filtering(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        self.login_as(user=user)
+
+        team = self.create_team(organization=org, members=[user])
+
+        self.login_as(user=user)
+
+        project = self.create_project(organization=org, teams=[team])
+        events = []
+        for event_id, fingerprint in [
+            ('a' * 32, 'put-me-in-group1'),
+            ('b' * 32, 'put-me-in-group1'),
+            ('c' * 32, 'put-me-in-group2'),
+            ('d' * 32, 'put-me-in-group3'),
+        ]:
+            events.append(self.store_event(
+                data={
+                    'event_id': event_id,
+                    'timestamp': self.min_ago,
+                    'fingerprint': [fingerprint],
+                },
+                project_id=project.id
+            ))
+
+        event_1, event_2, event_3, event_4 = events
+        group_1, group_2, group_3 = event_1.group, event_3.group, event_4.group
+
+        base_url = reverse(
+            'sentry-api-0-organization-events',
+            kwargs={
+                'organization_slug': org.slug,
+            }
+        )
+
+        response = self.client.get(base_url, format='json', data={'group': [group_1.id]})
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        self.assert_events_in_response(response, [event_1.event_id, event_2.event_id])
+
+        response = self.client.get(base_url, format='json', data={'group': [group_3.id]})
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        self.assert_events_in_response(response, [event_4.event_id])
+
+        response = self.client.get(
+            base_url,
+            format='json',
+            data={'group': [group_1.id, group_3.id]},
+        )
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 3
+        self.assert_events_in_response(
+            response,
+            [event_1.event_id, event_2.event_id, event_4.event_id],
+        )
+
+        response = self.client.get(
+            base_url,
+            format='json',
+            data={'group': [group_1.id, group_2.id, group_3.id]},
+        )
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 4
+        self.assert_events_in_response(
+            response,
+            [event_1.event_id, event_2.event_id, event_3.event_id, event_4.event_id],
+        )
