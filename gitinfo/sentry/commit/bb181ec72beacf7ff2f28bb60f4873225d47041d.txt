commit bb181ec72beacf7ff2f28bb60f4873225d47041d
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Apr 26 12:56:55 2019 -0700

    nodestore: Remove cassandra and multi backends
    
    These are both entirely unused in production.

diff --git a/requirements-test.txt b/requirements-test.txt
index 2a843c1fc9..267b282dbf 100644
--- a/requirements-test.txt
+++ b/requirements-test.txt
@@ -1,10 +1,3 @@
-# cassandra
-blist
-# TODO(dcramer): figure out why Travis needs this
-cassandra-driver<=3.5.0
-casscache
-cqlsh
-# /cassandra
 datadog
 freezegun==0.3.11
 msgpack-python<0.5.0
diff --git a/src/sentry/nodestore/cassandra/__init__.py b/src/sentry/nodestore/cassandra/__init__.py
deleted file mode 100644
index aaabb4cff9..0000000000
--- a/src/sentry/nodestore/cassandra/__init__.py
+++ /dev/null
@@ -1,10 +0,0 @@
-"""
-sentry.nodestore.cassandra
-~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import, print_function
-
-from .backend import *  # NOQA
diff --git a/src/sentry/nodestore/cassandra/backend.py b/src/sentry/nodestore/cassandra/backend.py
deleted file mode 100644
index 12b4c1e98c..0000000000
--- a/src/sentry/nodestore/cassandra/backend.py
+++ /dev/null
@@ -1,54 +0,0 @@
-"""
-sentry.nodestore.cassandra.backend
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from __future__ import absolute_import, print_function
-
-import casscache
-
-from sentry.nodestore.base import NodeStorage
-from sentry.utils.cache import memoize
-
-
-class CassandraNodeStorage(NodeStorage):
-    """
-    A Cassandra-based backend for storing node data.
-
-    >>> CassandraNodeStorage(
-    ...     servers=['127.0.0.1:9042'],
-    ...     keyspace='sentry',
-    ...     columnfamily='nodestore',
-    ... )
-    """
-
-    def __init__(self, servers, keyspace='sentry', columnfamily='nodestore', **kwargs):
-        self.servers = servers
-        self.keyspace = keyspace
-        self.columnfamily = columnfamily
-        self.options = kwargs
-        super(CassandraNodeStorage, self).__init__()
-
-    @memoize
-    def connection(self):
-        return casscache.Client(
-            servers=self.servers,
-            keyspace=self.keyspace,
-            columnfamily=self.columnfamily,
-            **self.options
-        )
-
-    def delete(self, id):
-        self.connection.delete(id)
-
-    def get(self, id):
-        return self.connection.get(id)
-
-    def get_multi(self, id_list):
-        return self.connection.get_multi(id_list)
-
-    def set(self, id, data, ttl=None):
-        self.connection.set(id, data)
diff --git a/src/sentry/nodestore/multi/__init__.py b/src/sentry/nodestore/multi/__init__.py
deleted file mode 100644
index bb865ee334..0000000000
--- a/src/sentry/nodestore/multi/__init__.py
+++ /dev/null
@@ -1,10 +0,0 @@
-"""
-sentry.nodestore.multi
-~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-from .backend import *  # NOQA
diff --git a/src/sentry/nodestore/multi/backend.py b/src/sentry/nodestore/multi/backend.py
deleted file mode 100644
index 6089b0e5e4..0000000000
--- a/src/sentry/nodestore/multi/backend.py
+++ /dev/null
@@ -1,95 +0,0 @@
-"""
-sentry.nodestore.multi.backend
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from __future__ import absolute_import
-
-import random
-
-import six
-
-from sentry.nodestore.base import NodeStorage
-from sentry.utils.imports import import_string
-
-
-class MultiNodeStorage(NodeStorage):
-    """
-    A backend which will write to multiple backends, and read from a random
-    choice.
-
-    This is not intended for consistency, but is instead designed to allow you
-    to dual-write for purposes of migrations.
-
-    >>> MultiNodeStorage(backends=[
-    >>>     ('sentry.nodestore.django.backend.DjangoNodeStorage', {}),
-    >>>     ('sentry.nodestore.riak.backend.RiakNodeStorage', {}),
-    >>> ], read_selector=lambda backends: backends[0])
-    """
-
-    def __init__(self, backends, read_selector=random.choice, **kwargs):
-        assert backends, "you should provide at least one backend"
-
-        self.backends = []
-        for backend, backend_options in backends:
-            if isinstance(backend, six.string_types):
-                backend = import_string(backend)
-            self.backends.append(backend(**backend_options))
-        self.read_selector = read_selector
-        super(MultiNodeStorage, self).__init__(**kwargs)
-
-    def get(self, id):
-        # just fetch it from a random backend, we're not aiming for consistency
-        backend = self.read_selector(self.backends)
-        return backend.get(id)
-
-    def get_multi(self, id_list):
-        backend = self.read_selector(self.backends)
-        return backend.get_multi(id_list=id_list)
-
-    def set(self, id, data, ttl=None):
-        should_raise = False
-        for backend in self.backends:
-            try:
-                backend.set(id, data, ttl=ttl)
-            except Exception:
-                should_raise = True
-
-        if should_raise:
-            raise
-
-    def set_multi(self, values):
-        should_raise = False
-        for backend in self.backends:
-            try:
-                backend.set_multi(values)
-            except Exception:
-                should_raise = True
-
-        if should_raise:
-            raise
-
-    def delete(self, id):
-        should_raise = False
-        for backend in self.backends:
-            try:
-                backend.delete(id)
-            except Exception:
-                should_raise = True
-
-        if should_raise:
-            raise
-
-    def cleanup(self, cutoff_timestamp):
-        should_raise = False
-        for backend in self.backends:
-            try:
-                backend.cleanup(cutoff_timestamp)
-            except Exception:
-                should_raise = True
-
-        if should_raise:
-            raise
diff --git a/tests/sentry/nodestore/cassandra/__init__.py b/tests/sentry/nodestore/cassandra/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/tests/sentry/nodestore/cassandra/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/tests/sentry/nodestore/cassandra/backend/__init__.py b/tests/sentry/nodestore/cassandra/backend/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/tests/sentry/nodestore/cassandra/backend/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/tests/sentry/nodestore/cassandra/backend/tests.py b/tests/sentry/nodestore/cassandra/backend/tests.py
deleted file mode 100644
index 060de5e207..0000000000
--- a/tests/sentry/nodestore/cassandra/backend/tests.py
+++ /dev/null
@@ -1,41 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from sentry.nodestore.cassandra.backend import CassandraNodeStorage
-from sentry.testutils import TestCase, requires_cassandra
-
-
-@requires_cassandra
-class CassandraNodeStorageTest(TestCase):
-    def setUp(self):
-        self.ns = CassandraNodeStorage(servers=[
-            '127.0.0.1:9042',
-        ])
-
-    def test_integration(self):
-        node_id = self.ns.create({
-            'foo': 'bar',
-        })
-        assert node_id is not None
-
-        self.ns.set(node_id, {
-            'foo': 'baz',
-        })
-
-        result = self.ns.get(node_id)
-        assert result == {
-            'foo': 'baz',
-        }
-
-        node_id2 = self.ns.create({
-            'foo': 'bar',
-        })
-
-        result = self.ns.get_multi([node_id, node_id2])
-        assert result[node_id] == {
-            'foo': 'baz',
-        }
-        assert result[node_id2] == {
-            'foo': 'bar',
-        }
diff --git a/tests/sentry/nodestore/multi/__init__.py b/tests/sentry/nodestore/multi/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/tests/sentry/nodestore/multi/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/tests/sentry/nodestore/multi/backend/__init__.py b/tests/sentry/nodestore/multi/backend/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/tests/sentry/nodestore/multi/backend/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/tests/sentry/nodestore/multi/backend/tests.py b/tests/sentry/nodestore/multi/backend/tests.py
deleted file mode 100644
index d6a2984e2c..0000000000
--- a/tests/sentry/nodestore/multi/backend/tests.py
+++ /dev/null
@@ -1,82 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from sentry.nodestore.base import NodeStorage
-from sentry.nodestore.multi.backend import MultiNodeStorage
-from sentry.testutils import TestCase
-
-
-class InMemoryBackend(NodeStorage):
-    def __init__(self):
-        self._data = {}
-
-    def set(self, id, data, ttl=None):
-        self._data[id] = data
-
-    def get(self, id):
-        return self._data.get(id)
-
-
-class MultiNodeStorageTest(TestCase):
-    def setUp(self):
-        self.ns = MultiNodeStorage([
-            (InMemoryBackend, {}),
-            (InMemoryBackend, {}),
-        ])
-
-    def test_basic_integration(self):
-        node_id = self.ns.create({
-            'foo': 'bar',
-        })
-        assert node_id is not None
-        for backend in self.ns.backends:
-            assert backend.get(node_id) == {
-                'foo': 'bar',
-            }
-
-        self.ns.set(node_id, {
-            'foo': 'baz',
-        })
-        for backend in self.ns.backends:
-            assert backend.get(node_id) == {
-                'foo': 'baz',
-            }
-
-        result = self.ns.get(node_id)
-        assert result == {
-            'foo': 'baz',
-        }
-
-        node_id2 = self.ns.create({
-            'foo': 'bar',
-        })
-        for backend in self.ns.backends:
-            assert backend.get(node_id2) == {
-                'foo': 'bar',
-            }
-
-        result = self.ns.get_multi([node_id, node_id2])
-        assert result[node_id] == {
-            'foo': 'baz',
-        }
-        assert result[node_id2] == {
-            'foo': 'bar',
-        }
-
-        result = self.ns.set_multi({
-            node_id: {
-                'foo': 'biz',
-            },
-            node_id2: {
-                'foo': 'bir',
-            },
-        })
-
-        for backend in self.ns.backends:
-            assert backend.get(node_id) == {
-                'foo': 'biz',
-            }
-            assert backend.get(node_id2) == {
-                'foo': 'bir',
-            }
