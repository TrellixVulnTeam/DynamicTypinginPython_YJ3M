commit d7a062125e3ed99af40d4895a7bb8de188110c67
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Sep 16 11:38:32 2016 -0700

    Notify owners about organization deletion (#4116)
    
    And prompt them to cancel and restore the organization.

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 6490505217..83961928be 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -127,6 +127,8 @@ class Endpoint(APIView):
 
         audit_logger.info(entry.get_event_display(), extra=extra)
 
+        return entry
+
     @csrf_exempt
     def dispatch(self, request, *args, **kwargs):
         """
diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index a3af6a575f..d7b5f94cf4 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -168,16 +168,9 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
         ).update(status=OrganizationStatus.PENDING_DELETION)
         if updated:
             transaction_id = uuid4().hex
+            countdown = 86400
 
-            delete_organization.apply_async(
-                kwargs={
-                    'object_id': organization.id,
-                    'transaction_id': transaction_id,
-                },
-                countdown=86400,
-            )
-
-            self.create_audit_entry(
+            entry = self.create_audit_entry(
                 request=request,
                 organization=organization,
                 target_object=organization.id,
@@ -186,6 +179,16 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
                 transaction_id=transaction_id,
             )
 
+            organization.send_delete_confirmation(entry, countdown)
+
+            delete_organization.apply_async(
+                kwargs={
+                    'object_id': organization.id,
+                    'transaction_id': transaction_id,
+                },
+                countdown=countdown,
+            )
+
             delete_logger.info('object.delete.queued', extra={
                 'object_id': organization.id,
                 'transaction_id': transaction_id,
diff --git a/src/sentry/models/auditlogentry.py b/src/sentry/models/auditlogentry.py
index 6148832e5e..437cf13a96 100644
--- a/src/sentry/models/auditlogentry.py
+++ b/src/sentry/models/auditlogentry.py
@@ -28,6 +28,7 @@ class AuditLogEntryEvent(object):
     ORG_ADD = 10
     ORG_EDIT = 11
     ORG_REMOVE = 12
+    ORG_RESTORE = 13
 
     TEAM_ADD = 20
     TEAM_EDIT = 21
diff --git a/src/sentry/models/organization.py b/src/sentry/models/organization.py
index f44906aba5..3b66bb75d8 100644
--- a/src/sentry/models/organization.py
+++ b/src/sentry/models/organization.py
@@ -7,8 +7,11 @@ sentry.models.organization
 """
 from __future__ import absolute_import, print_function
 
+from datetime import timedelta
+
 from bitfield import BitField
 from django.conf import settings
+from django.core.urlresolvers import reverse
 from django.db import IntegrityError, models, transaction
 from django.utils import timezone
 from django.utils.functional import cached_property
@@ -21,6 +24,7 @@ from sentry.db.models import (
     BaseManager, BoundedPositiveIntegerField, Model, sane_repr
 )
 from sentry.db.models.utils import slugify_instance
+from sentry.utils.http import absolute_uri
 from sentry.utils.retries import TimedRetryPolicy
 
 
@@ -35,7 +39,7 @@ class OrganizationManager(BaseManager):
     # def get_by_natural_key(self, slug):
     #     return self.get(slug=slug)
 
-    def get_for_user(self, user, scope=None):
+    def get_for_user(self, user, scope=None, only_visible=True):
         """
         Returns a set of all organizations a user has access to.
         """
@@ -45,12 +49,16 @@ class OrganizationManager(BaseManager):
             return []
 
         if settings.SENTRY_PUBLIC and scope is None:
-            return list(self.filter(status=OrganizationStatus.VISIBLE))
+            if only_visible:
+                return list(self.filter(status=OrganizationStatus.VISIBLE))
+            else:
+                return list(self.filter())
+
+        qs = OrganizationMember.objects.filter(user=user).select_related('organization')
+        if only_visible:
+            qs = qs.filter(organization__status=OrganizationStatus.VISIBLE)
 
-        results = list(OrganizationMember.objects.filter(
-            user=user,
-            organization__status=OrganizationStatus.VISIBLE,
-        ).select_related('organization'))
+        results = list(qs)
 
         if scope is not None:
             return [
@@ -150,23 +158,27 @@ class Organization(Model):
             'default_role': self.default_role,
         }
 
+    def get_owners(self):
+        from sentry.models import User
+        return User.objects.filter(
+            sentry_orgmember_set__role=roles.get_top_dog().id,
+            sentry_orgmember_set__organization=self,
+            is_active=True,
+        )
+
     def get_default_owner(self):
         if not hasattr(self, '_default_owner'):
-            from sentry.models import User
-
-            self._default_owner = User.objects.filter(
-                sentry_orgmember_set__role=roles.get_top_dog().id,
-                sentry_orgmember_set__organization=self,
-            )[0]
+            self._default_owner = self.get_owners()[0]
         return self._default_owner
 
     def has_single_owner(self):
         from sentry.models import OrganizationMember
         count = OrganizationMember.objects.filter(
             organization=self,
-            role='owner',
+            role=roles.get_top_dog().id,
             user__isnull=False,
-        ).count()
+            user__is_active=True,
+        )[:2].count()
         return count == 1
 
     def merge_to(from_org, to_org):
@@ -240,3 +252,27 @@ class Organization(Model):
         from sentry.models import OrganizationOption
 
         return OrganizationOption.objects.unset_value(self, *args, **kwargs)
+
+    def send_delete_confirmation(self, audit_log_entry, countdown):
+        from sentry import options
+        from sentry.utils.email import MessageBuilder
+
+        owners = self.get_owners()
+
+        context = {
+            'organization': self,
+            'audit_log_entry': audit_log_entry,
+            'eta': timezone.now() + timedelta(seconds=countdown),
+            'url': absolute_uri(reverse(
+                'sentry-restore-organization',
+                args=[self.slug],
+            )),
+        }
+
+        MessageBuilder(
+            subject='%sOrganization Queued for Deletion' % (options.get('mail.subject-prefix'),),
+            template='sentry/emails/org_delete_confirm.txt',
+            html_template='sentry/emails/org_delete_confirm.html',
+            type='org.confirm_delete',
+            context=context,
+        ).send_async([o.email for o in owners])
diff --git a/src/sentry/templates/sentry/emails/org_delete_confirm.html b/src/sentry/templates/sentry/emails/org_delete_confirm.html
new file mode 100644
index 0000000000..867ecaa572
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/org_delete_confirm.html
@@ -0,0 +1,14 @@
+{% extends "sentry/emails/base.html" %}
+
+{% load i18n %}
+
+{% block main %}
+    <h3>Organization Queued for Deletion</h3>
+    <p>The <strong>{{ organization.name }}</strong> organization has been scheduled for deletion by:</p>
+    <p><pre>User: {{ audit_log_entry.actor.get_display_name }}
+IP: {{ audit_log_entry.ip_address }}
+Date: {{ audit_log_entry.datetime }}</pre></p>
+    <p>This irreversible deletion will take place at <strong>{{ eta }}</strong> and will permanently remove all associated data including events, projects, and team members.</p>
+    <p><strong>If this was unintentional and you would like to cancel the deletion:<strong></p>
+    <p><a href="{{ url }}" class="btn">Restore Organization</a></p>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/org_delete_confirm.txt b/src/sentry/templates/sentry/emails/org_delete_confirm.txt
new file mode 100644
index 0000000000..726fbfe26a
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/org_delete_confirm.txt
@@ -0,0 +1,11 @@
+The {{ organization.name }} organization has been scheduled for deletion by:
+
+User: {{ audit_log_entry.actor.get_display_name }}
+IP: {{ audit_log_entry.ip_address }}
+Date: {{ audit_log_entry.datetime }}
+
+This irreversible deletion will take place at {{ eta }} and will permanently remove all associated data including events, projects, and team members.
+
+If this was unintentional and you would like to cancel the deletion:
+
+{{ url }}
diff --git a/src/sentry/templates/sentry/restore-organization.html b/src/sentry/templates/sentry/restore-organization.html
new file mode 100644
index 0000000000..edb048daa2
--- /dev/null
+++ b/src/sentry/templates/sentry/restore-organization.html
@@ -0,0 +1,23 @@
+{% extends "sentry/bases/modal.html" %}
+
+{% load i18n %}
+
+{% block title %}{% trans "Restore Organization" %} | {{ block.super }}{% endblock %}
+
+{% block main %}
+  <section class="body">
+    {% if pending_deletion %}
+    <form class="form-stacked" action="" method="post">
+      {% csrf_token %}
+      <p>The <strong>{{ deleting_organization.name }}</strong> organization is currently scheduled for deletion deletion.</p>
+      <p>{% blocktrans %}Would you like to cancel and restore the organization back to the original state?{% endblocktrans %}</p>
+
+      <div class="actions">
+        <button type="submit" class="btn btn-primary">{% trans "Restore Organization" %}</button>
+      </div>
+    </form>
+    {% else %}
+    <p>{% blocktrans %}Sorry, but this organization is currently in progress of being deleted. No turning back.{% endblocktrans %} :(</p>
+    {% endif %}
+  </section>
+{% endblock %}
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index d2055c2350..716647e527 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -270,6 +270,8 @@ class BaseView(View, OrganizationMixin):
 
         audit_logger.info(entry.get_event_display(), extra=extra)
 
+        return entry
+
 
 class OrganizationView(BaseView):
     """
diff --git a/src/sentry/web/frontend/debug/mail.py b/src/sentry/web/frontend/debug/mail.py
index 04a7cd3cd5..377ecde3c4 100644
--- a/src/sentry/web/frontend/debug/mail.py
+++ b/src/sentry/web/frontend/debug/mail.py
@@ -632,3 +632,29 @@ def recover_account(request):
             'domain': get_server_hostname(),
         },
     ).render(request)
+
+
+@login_required
+def org_delete_confirm(request):
+    from sentry.models import AuditLogEntry
+
+    org = Organization.get_default()
+    entry = AuditLogEntry(
+        organization=org,
+        actor=request.user,
+        ip_address=request.META['REMOTE_ADDR'],
+    )
+
+    return MailPreview(
+        html_template='sentry/emails/org_delete_confirm.html',
+        text_template='sentry/emails/org_delete_confirm.txt',
+        context={
+            'organization': org,
+            'audit_log_entry': entry,
+            'eta': timezone.now() + timedelta(days=1),
+            'url': absolute_uri(reverse(
+                'sentry-restore-organization',
+                args=[org.slug],
+            )),
+        },
+    ).render(request)
diff --git a/src/sentry/web/frontend/remove_organization.py b/src/sentry/web/frontend/remove_organization.py
index 5e3dea2bca..23f61f7b13 100644
--- a/src/sentry/web/frontend/remove_organization.py
+++ b/src/sentry/web/frontend/remove_organization.py
@@ -47,16 +47,9 @@ class RemoveOrganizationView(OrganizationView):
             ).update(status=OrganizationStatus.PENDING_DELETION)
             if updated:
                 transaction_id = uuid4().hex
+                countdown = 86400
 
-                delete_organization.apply_async(
-                    kwargs={
-                        'object_id': organization.id,
-                        'transaction_id': transaction_id,
-                    },
-                    countdown=86400,
-                )
-
-                self.create_audit_entry(
+                entry = self.create_audit_entry(
                     request=request,
                     organization=organization,
                     target_object=organization.id,
@@ -65,6 +58,16 @@ class RemoveOrganizationView(OrganizationView):
                     transaction_id=transaction_id,
                 )
 
+                organization.send_delete_confirmation(entry, countdown)
+
+                delete_organization.apply_async(
+                    kwargs={
+                        'object_id': organization.id,
+                        'transaction_id': transaction_id,
+                    },
+                    countdown=countdown,
+                )
+
                 delete_logger.info('object.delete.queued', extra={
                     'object_id': organization.id,
                     'transaction_id': transaction_id,
diff --git a/src/sentry/web/frontend/restore_organization.py b/src/sentry/web/frontend/restore_organization.py
new file mode 100644
index 0000000000..9d94ad42e3
--- /dev/null
+++ b/src/sentry/web/frontend/restore_organization.py
@@ -0,0 +1,88 @@
+from __future__ import absolute_import
+
+import logging
+import six
+
+from django.contrib import messages
+from django.core.urlresolvers import reverse
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.models import Organization, OrganizationStatus, AuditLogEntryEvent
+from sentry.web.frontend.base import OrganizationView
+from sentry.web.helpers import render_to_response
+
+
+ERR_MESSAGES = {
+    OrganizationStatus.VISIBLE: _('Deletion already canceled.'),
+    OrganizationStatus.DELETION_IN_PROGRESS: _('Deletion cannot be canceled, already in progress'),
+}
+
+MSG_RESTORE_SUCCESS = _('Organization restored successfully.')
+
+delete_logger = logging.getLogger('sentry.deletions.ui')
+
+
+class RestoreOrganizationView(OrganizationView):
+    required_scope = 'org:delete'
+    sudo_required = True
+
+    def get_active_organization(self, request, organization_slug):
+        # A simply version than what comes from the base
+        # OrganizationView. We need to grab an organization
+        # that is in any state, not just VISIBLE.
+        organizations = Organization.objects.get_for_user(
+            user=request.user,
+            only_visible=False,
+        )
+
+        try:
+            return six.next(
+                o for o in organizations
+                if o.slug == organization_slug
+            )
+        except StopIteration:
+            return None
+
+    def get(self, request, organization):
+        if organization.status == OrganizationStatus.VISIBLE:
+            return self.redirect(
+                reverse('sentry-organization-home', args=[organization.slug])
+            )
+
+        context = {
+            # If this were named 'organization', it triggers logic in the base
+            # template to render organization related content, which isn't relevant
+            # here.
+            'deleting_organization': organization,
+            'pending_deletion': organization.status == OrganizationStatus.PENDING_DELETION,
+        }
+
+        return render_to_response('sentry/restore-organization.html', context, self.request)
+
+    def post(self, request, organization):
+        if organization.status != OrganizationStatus.PENDING_DELETION:
+            messages.add_message(request, messages.ERROR, ERR_MESSAGES[organization.status])
+            return self.redirect(reverse('sentry'))
+
+        updated = Organization.objects.filter(
+            id=organization.id,
+            status=OrganizationStatus.PENDING_DELETION,
+        ).update(status=OrganizationStatus.VISIBLE)
+        if updated:
+            self.create_audit_entry(
+                request=request,
+                organization=organization,
+                target_object=organization.id,
+                event=AuditLogEntryEvent.ORG_RESTORE,
+                data=organization.get_audit_log_data(),
+            )
+            delete_logger.info('object.delete.canceled', extra={
+                'object_id': organization.id,
+                'model': Organization.__name__,
+            })
+            messages.add_message(request, messages.SUCCESS,
+                MSG_RESTORE_SUCCESS)
+
+        return self.redirect(
+            reverse('sentry-organization-home', args=[organization.slug])
+        )
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 7e3b44f3f3..4a4696e3e3 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -73,6 +73,7 @@ from sentry.web.frontend.reactivate_account import ReactivateAccountView
 from sentry.web.frontend.release_webhook import ReleaseWebhookView
 from sentry.web.frontend.remove_account import RemoveAccountView
 from sentry.web.frontend.remove_organization import RemoveOrganizationView
+from sentry.web.frontend.restore_organization import RestoreOrganizationView
 from sentry.web.frontend.remove_project import RemoveProjectView
 from sentry.web.frontend.remove_project_key import RemoveProjectKeyView
 from sentry.web.frontend.remove_team import RemoveTeamView
@@ -171,6 +172,8 @@ if getattr(settings, 'DEBUG_VIEWS', settings.DEBUG):
             sentry.web.frontend.debug.mail.recover_account),
         url(r'^debug/mail/unassigned/$',
             DebugUnassignedEmailView.as_view()),
+        url(r'^debug/mail/org-delete-confirm/$',
+            sentry.web.frontend.debug.mail.org_delete_confirm),
         url(r'^debug/embed/error-page/$',
             DebugErrorPageEmbedView.as_view()),
         url(r'^debug/trigger-error/$',
@@ -350,6 +353,8 @@ urlpatterns += patterns(
         name='sentry-create-project'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/remove/$', RemoveOrganizationView.as_view(),
         name='sentry-remove-organization'),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/restore/$', RestoreOrganizationView.as_view(),
+        name='sentry-restore-organization'),
     url(r'^accept/(?P<member_id>\d+)/(?P<token>\w+)/$', AcceptOrganizationInviteView.as_view(),
         name='sentry-accept-invite'),
 
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index 8950f0d8ce..c2c9411a61 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import six
 
 from django.core.urlresolvers import reverse
+from django.core import mail
 from mock import patch
 
 from sentry.models import Organization, OrganizationOption, OrganizationStatus
@@ -89,7 +90,11 @@ class OrganizationDeleteTest(APITestCase):
             'organization_slug': org.slug,
         })
 
-        response = self.client.delete(url)
+        owners = org.get_owners()
+        assert len(owners) > 0
+
+        with self.tasks():
+            response = self.client.delete(url)
 
         org = Organization.objects.get(id=org.id)
 
@@ -105,6 +110,16 @@ class OrganizationDeleteTest(APITestCase):
             countdown=86400,
         )
 
+        # Make sure we've emailed all owners
+        assert len(mail.outbox) == len(owners)
+        owner_emails = set(o.email for o in owners)
+        for msg in mail.outbox:
+            assert 'Deletion' in msg.subject
+            assert len(msg.to) == 1
+            owner_emails.remove(msg.to[0])
+        # No owners should be remaining
+        assert len(owner_emails) == 0
+
     def test_cannot_remove_as_admin(self):
         org = self.create_organization(owner=self.user)
 
diff --git a/tests/sentry/web/frontend/test_remove_organization.py b/tests/sentry/web/frontend/test_remove_organization.py
index fdf4e5809d..a59cb72b01 100644
--- a/tests/sentry/web/frontend/test_remove_organization.py
+++ b/tests/sentry/web/frontend/test_remove_organization.py
@@ -1,6 +1,9 @@
 from __future__ import absolute_import
 
+from mock import patch
+
 from django.core.urlresolvers import reverse
+from django.core import mail
 
 from sentry.models import Organization, OrganizationStatus
 from sentry.testutils import TestCase, PermissionTestCase
@@ -42,14 +45,43 @@ class RemoveOrganizationTest(TestCase):
         assert resp.context['form']
         assert resp.context['team_list']
 
-    def test_success(self):
-        resp = self.client.post(self.path)
+    @patch('sentry.web.frontend.remove_organization.uuid4')
+    @patch('sentry.web.frontend.remove_organization.delete_organization')
+    def test_success(self, mock_delete_organization, mock_uuid4):
+        class uuid(object):
+            hex = 'abc123'
 
-        assert resp.status_code == 302
+        mock_uuid4.return_value = uuid
+
+        owners = self.organization.get_owners()
+        assert len(owners) > 0
 
-        organization = Organization.objects.get(id=self.organization.id)
+        with self.tasks():
+            resp = self.client.post(self.path)
+
+        assert resp.status_code == 302
 
-        assert organization.status == OrganizationStatus.PENDING_DELETION
+        org = Organization.objects.get(id=self.organization.id)
+
+        assert org.status == OrganizationStatus.PENDING_DELETION
+
+        mock_delete_organization.apply_async.assert_called_once_with(
+            kwargs={
+                'object_id': org.id,
+                'transaction_id': 'abc123',
+            },
+            countdown=86400,
+        )
+
+        # Make sure we've emailed all owners
+        assert len(mail.outbox) == len(owners)
+        owner_emails = set(o.email for o in owners)
+        for msg in mail.outbox:
+            assert 'Deletion' in msg.subject
+            assert len(msg.to) == 1
+            owner_emails.remove(msg.to[0])
+        # No owners should be remaining
+        assert len(owner_emails) == 0
 
     def test_cannot_remove_default(self):
         Organization.objects.all().delete()
diff --git a/tests/sentry/web/frontend/test_restore_organization.py b/tests/sentry/web/frontend/test_restore_organization.py
new file mode 100644
index 0000000000..7877ccaeb0
--- /dev/null
+++ b/tests/sentry/web/frontend/test_restore_organization.py
@@ -0,0 +1,78 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import Organization, OrganizationStatus
+from sentry.testutils import TestCase, PermissionTestCase
+
+
+class RestoreOrganizationPermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(RestoreOrganizationPermissionTest, self).setUp()
+        self.organization = self.create_organization(name='foo', owner=self.user, status=OrganizationStatus.PENDING_DELETION)
+        self.path = reverse('sentry-restore-organization', args=[self.organization.slug])
+
+    def test_teamless_admin_cannot_load(self):
+        self.assert_teamless_admin_cannot_access(self.path)
+
+    def test_team_admin_cannot_load(self):
+        self.assert_team_admin_cannot_access(self.path)
+
+    def test_owner_can_load(self):
+        self.assert_owner_can_access(self.path)
+
+
+class RemoveOrganizationTest(TestCase):
+    def setUp(self):
+        super(RemoveOrganizationTest, self).setUp()
+
+        self.organization = self.create_organization(name='foo', owner=self.user, status=OrganizationStatus.PENDING_DELETION)
+        self.team = self.create_team(organization=self.organization)
+        self.path = reverse('sentry-restore-organization', args=[self.organization.slug])
+
+        self.login_as(self.user)
+
+    def test_renders_with_context(self):
+        resp = self.client.get(self.path)
+
+        assert resp.status_code == 200
+
+        self.assertTemplateUsed(resp, 'sentry/restore-organization.html')
+
+        assert resp.context['deleting_organization'] == self.organization
+        assert resp.context['pending_deletion'] is True
+
+        Organization.objects.filter(
+            id=self.organization.id,
+        ).update(status=OrganizationStatus.DELETION_IN_PROGRESS)
+
+        resp = self.client.get(self.path)
+
+        assert resp.status_code == 200
+
+        self.assertTemplateUsed(resp, 'sentry/restore-organization.html')
+
+        assert resp.context['deleting_organization'] == self.organization
+        assert resp.context['pending_deletion'] is False
+
+    def test_success(self):
+        resp = self.client.post(self.path)
+
+        assert resp.status_code == 302
+
+        org = Organization.objects.get(id=self.organization.id)
+
+        assert org.status == OrganizationStatus.VISIBLE
+
+    def test_too_late(self):
+        Organization.objects.filter(
+            id=self.organization.id,
+        ).update(status=OrganizationStatus.DELETION_IN_PROGRESS)
+
+        resp = self.client.post(self.path)
+
+        assert resp.status_code == 302
+
+        org = Organization.objects.get(id=self.organization.id)
+
+        assert org.status == OrganizationStatus.DELETION_IN_PROGRESS
