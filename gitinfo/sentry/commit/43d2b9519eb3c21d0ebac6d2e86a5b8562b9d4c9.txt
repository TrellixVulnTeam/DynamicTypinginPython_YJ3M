commit 43d2b9519eb3c21d0ebac6d2e86a5b8562b9d4c9
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Feb 4 16:57:14 2015 -0800

    Additional work towards functional actions

diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 6da410b392..4a39a0ecc5 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -41,22 +41,61 @@ class Client {
     });
   }
 
+  bulkDelete(params) {
+    var path = "/projects/" + params.orgId + "/" + params.projectId + "/groups/";
+    var query = (params.itemIds ? {id: params.itemIds} : undefined);
+    var id = this.uniqueId();
+
+    AggregateListActions.delete(id, params.itemIds);
+
+    return this.request(path, {
+      query: query,
+      method: "DELETE",
+      success: function(response){
+       AggregateListActions.deleteSuccess(id, params.itemIds, response);
+      },
+      error: function(error){
+       AggregateListActions.deleteError(id, params.itemIds, error);
+      }
+    });
+  }
+
   bulkUpdate(params) {
     var path = "/projects/" + params.orgId + "/" + params.projectId + "/groups/";
     var query = (params.itemIds ? {id: params.itemIds} : undefined);
     var id = this.uniqueId();
 
-    AggregateListActions.bulkUpdate(id, params.itemIds, params.data);
+    AggregateListActions.update(id, params.itemIds, params.data);
 
     return this.request(path, {
       query: query,
       method: "PUT",
       data: params.data,
       success: function(response){
-       AggregateListActions.bulkUpdateSuccess(id, params.itemIds, response);
+       AggregateListActions.updateSuccess(id, params.itemIds, response);
+      },
+      error: function(error){
+       AggregateListActions.updateError(id, params.itemIds, error);
+      }
+    });
+  }
+
+  merge(params) {
+    var path = "/projects/" + params.orgId + "/" + params.projectId + "/groups/";
+    var query = (params.itemIds ? {id: params.itemIds} : undefined);
+    var id = this.uniqueId();
+
+    AggregateListActions.merge(id, params.itemIds);
+
+    return this.request(path, {
+      query: query,
+      method: "PUT",
+      data: {merge: 1},
+      success: function(response){
+       AggregateListActions.mergeSuccess(id, params.itemIds, response);
       },
       error: function(error){
-       AggregateListActions.bulkUpdateError(id, params.itemIds, error);
+       AggregateListActions.mergeError(id, params.itemIds, error);
       }
     });
   }
diff --git a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
index 40ca2d4d20..0456286c37 100644
--- a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
+++ b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
@@ -114,7 +114,7 @@ var AggregateListStore = Reflux.createStore({
   // on each individual event when its a global action (i.e. id-less)
   onUpdate(changeId, itemIds, data){
     if (typeof itemIds === 'undefined') this.items.map(item => item.id);
-    itemIds.forEach(item => {
+    itemIds.forEach(itemId => {
       this.addStatus(itemId, 'update');
       this.pendingChanges.push(changeId, itemId, data);
     });
diff --git a/src/sentry/static/sentry/app/stores/selectedAggregateStore.jsx b/src/sentry/static/sentry/app/stores/selectedAggregateStore.jsx
index ed7f277090..36ef567b34 100644
--- a/src/sentry/static/sentry/app/stores/selectedAggregateStore.jsx
+++ b/src/sentry/static/sentry/app/stores/selectedAggregateStore.jsx
@@ -56,7 +56,7 @@ var SelectedAggregateStore = Reflux.createStore({
 
   toggleSelect(itemId) {
     if (this.selected.has(itemId)) {
-      this.selected.remove(itemId);
+      this.selected.delete(itemId);
     } else {
       this.selected.add(itemId);
     }
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 5a1f694956..f580ddf5d0 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -170,6 +170,8 @@ var Stream = React.createClass({
           statsPeriod={this.state.statsPeriod} />;
     });
 
+    var params = this.getParams();
+
     return (
       <div>
         <StreamFilters query={this.state.query} onQueryChange={this.handleQueryChange} />
@@ -177,6 +179,8 @@ var Stream = React.createClass({
           <div className="container">
             <div className="group-header">
               <StreamActions
+                orgId={params.orgId}
+                projectId={params.projectId}
                 onResolve={this.handleResolve}
                 onBookmark={this.handleBookmark}
                 onDelete={this.handleDelete}
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index 5dab39956d..8227ad8ea5 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -4,6 +4,7 @@ var Reflux = require("reflux");
 
 var utils = require("../../utils");
 
+var api = require("../../api");
 var AggregateListStore = require("../../stores/aggregateListStore");
 var DateTimeField = require("../../modules/datepicker/DateTimeField");
 var DropdownLink = require("../../components/dropdownLink");
@@ -140,6 +141,8 @@ var StreamActions = React.createClass({
   ],
 
   propTypes: {
+    orgId: React.PropTypes.string.isRequired,
+    projectId: React.PropTypes.string.isRequired,
     aggList: React.PropTypes.instanceOf(Array).isRequired,
     onRealtimeChange: React.PropTypes.func.isRequired,
     onSelectStatsPeriod: React.PropTypes.func.isRequired,
@@ -163,56 +166,79 @@ var StreamActions = React.createClass({
       datePickerActive: !this.state.datePickerActive
     });
   },
-  actionSelectedAggregates(action, data) {
+  actionSelectedAggregates(callback, data) {
     var itemIds;
-    var params = this.getParams();
     var selectedAggList;
 
-    if (SelectedAggregateStore.allSelected) {
-      selectedAggList = this.state.aggList;
+    if (StreamActions.ALL) {
+      selectedAggList = this.props.aggList;
     } else {
-      itemIds = new SelectedAggregateStore.getSelectedIds();
-      selectedAggList = this.state.aggList.filter(
-        (item) => itemIds.has(item.id)
+      itemIdSet = SelectedAggregateStore.getSelectedIds();
+      selectedAggList = this.props.aggList.filter(
+        (item) => itemIdSet.has(item.id)
+      );
+      itemIds = selectedAggList.map(
+        (item) => item.id
       );
     }
 
-    action({
-      orgId: params.orgId,
-      projectId: params.projectId,
-      itemIds: itemIds,
-      data: data
-    });
+    callback(itemIds);
 
     SelectedAggregateStore.clearAll();
-
-    selectedAggList.forEach((node) => {
-      node.version = new Date().getTime() + 10;
-      for (var key in data) {
-        node[key] = data[key];
-      }
-    });
-
-    this.setState({
-      aggList: this.state.aggList,
-    });
   },
   onResolve(aggList, event) {
-    return this.actionAggregates(AggregateListActions.bulkUpdate, aggList, {status: 'resolved'});
+    this.actionSelectedAggregates((itemIds) => {
+      api.bulkUpdate({
+        orgId: this.props.orgId,
+        projectId: this.props.projectId,
+        itemIds: itemIds,
+        data: {
+          status: 'resolved'
+        }
+      });
+    });
   },
   onBookmark(aggList, event) {
-    return this.actionAggregates(AggregateListActions.bulkUpdate, aggList, {isBookmarked: true});
+    this.actionSelectedAggregates((itemIds) => {
+      api.bulkUpdate({
+        orgId: this.props.orgId,
+        projectId: this.props.projectId,
+        itemIds: itemIds,
+        data: {
+          isBookmarked: true
+        }
+      });
+    });
   },
   onRemoveBookmark(aggList, event) {
-    return this.actionAggregates(AggregateListActions.bulkUpdate, aggList, {isBookmarked: false});
+    this.actionSelectedAggregates((itemIds) => {
+      api.bulkUpdate({
+        orgId: this.props.orgId,
+        projectId: this.props.projectId,
+        itemIds: itemIds,
+        data: {
+          isBookmarked: false
+        }
+      });
+    });
   },
   onDelete(aggList, event) {
-    return this.actionAggregates(AggregateListActions.bulkDelete, aggList, {
-      method: 'DELETE',
+    this.actionSelectedAggregates((itemIds) => {
+      api.bulkDelete({
+        orgId: this.props.orgId,
+        projectId: this.props.projectId,
+        itemIds: itemIds
+      });
     });
   },
   onMerge(aggList, event) {
-    return this.actionAggregates(AggregateListActions.merge, {merge: 1});
+    this.actionSelectedAggregates((itemIds) => {
+      api.merge({
+        orgId: this.props.orgId,
+        projectId: this.props.projectId,
+        itemIds: itemIds,
+      });
+    });
   },
   onSelectedAggregateChange() {
     this.setState({
diff --git a/src/sentry/static/sentry/app/views/stream/aggregate.jsx b/src/sentry/static/sentry/app/views/stream/aggregate.jsx
index dfa2162b34..92ac9ed859 100644
--- a/src/sentry/static/sentry/app/views/stream/aggregate.jsx
+++ b/src/sentry/static/sentry/app/views/stream/aggregate.jsx
@@ -31,14 +31,14 @@ var StreamAggregate = React.createClass({
 
   onSelectedAggregateChange() {
     var id = this.getParams().aggregateId;
-
     this.setState({
       isSelected: SelectedAggregateStore.isSelected(id),
     });
   },
 
   onSelect() {
-    SelectedAggregateStore.toggleSelect(this.props.data.id);
+    var id = this.getParams().aggregateId;
+    SelectedAggregateStore.toggleSelect(id);
   },
 
   render() {
