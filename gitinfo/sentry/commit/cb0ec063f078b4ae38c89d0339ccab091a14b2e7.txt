commit cb0ec063f078b4ae38c89d0339ccab091a14b2e7
Author: Eric Feng <erichfeng@gmail.com>
Date:   Thu Feb 25 19:07:30 2016 -0800

    removing queryset first function call from onboarding

diff --git a/src/sentry/migrations/0238_fill_org_onboarding_tasks.py b/src/sentry/migrations/0238_fill_org_onboarding_tasks.py
index bb651f5712..a94404cdcf 100644
--- a/src/sentry/migrations/0238_fill_org_onboarding_tasks.py
+++ b/src/sentry/migrations/0238_fill_org_onboarding_tasks.py
@@ -44,7 +44,9 @@ class Migration(DataMigration):
                 except IntegrityError:
                     pass
 
-            projects = list(Project.objects.filter(organization=org).exclude(first_event=None).order_by('first_event'))
+            projects = list(Project.objects.filter(organization=org))
+            projects = [project for project in projects if project.first_event]
+            projects = sorted(projects, key=lambda project: project.first_event)
             if len(projects) == 1:
                 try:
                     with transaction.atomic():
@@ -68,8 +70,11 @@ class Migration(DataMigration):
                     }
 
                     # Lazily assume project's events are uniformly of the same platform
-                    group = Group.objects.filter(project=project).first()
-                    if group:
+                    try:
+                        group = Group.objects.filter(project=project)[0]
+                    except IndexError:
+                        pass
+                    else:
                         platforms.add(group.platform)
 
                         # If only one project with platform
@@ -117,11 +122,14 @@ class Migration(DataMigration):
                     pass
 
             # ISSUE_TRACKER
-            option = ProjectOption.objects.filter(
-                project__organization=org,
-                key__in=issue_keys,
-            ).first()
-            if option:
+            try:
+                option = ProjectOption.objects.filter(
+                    project__organization=org,
+                    key__in=issue_keys,
+                )[0]
+            except IndexError:
+                pass
+            else:
                 try:
                     with transaction.atomic():
                         OrganizationOnboardingTask.objects.create(
@@ -135,11 +143,14 @@ class Migration(DataMigration):
                     pass
 
             # NOTIFICATION_SERVICE
-            option = ProjectOption.objects.filter(
-                project__organization=org,
-                key__in=notification_keys,
-            ).first()
-            if option:
+            try:
+                option = ProjectOption.objects.filter(
+                    project__organization=org,
+                    key__in=notification_keys,
+                )[0]
+            except IndexError:
+                pass
+            else:
                 try:
                     with transaction.atomic():
                         OrganizationOnboardingTask.objects.create(
diff --git a/src/sentry/receivers/onboarding.py b/src/sentry/receivers/onboarding.py
index 507514c69b..50054f7a46 100644
--- a/src/sentry/receivers/onboarding.py
+++ b/src/sentry/receivers/onboarding.py
@@ -92,7 +92,7 @@ def record_first_event(project, group, **kwargs):
                 organization=project.organization,
                 task=OnboardingTask.FIRST_EVENT
             )[0]
-        except OrganizationOnboardingTask.DoesNotExist:
+        except IndexError:
             return
 
         # Only counts if it's a new project and platform
