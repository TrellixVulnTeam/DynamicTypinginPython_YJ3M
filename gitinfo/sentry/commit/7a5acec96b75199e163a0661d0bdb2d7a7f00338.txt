commit 7a5acec96b75199e163a0661d0bdb2d7a7f00338
Author: ted kaemming <ted@kaemming.com>
Date:   Thu Jun 8 15:20:49 2017 -0700

    Add `RedisQuota.get_usage`. (#5548)

diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
index 7d9ba153c2..cc57827eb2 100644
--- a/src/sentry/quotas/redis.py
+++ b/src/sentry/quotas/redis.py
@@ -7,6 +7,7 @@ sentry.quotas.redis
 """
 from __future__ import absolute_import
 
+import functools
 import six
 
 from time import time
@@ -24,7 +25,7 @@ class BasicRedisQuota(object):
     def __init__(self, key, limit=0, window=60, reason_code=None,
                  enforce=True):
         self.key = key
-        # maximum number of events in the given window
+        # maximum number of events in the given window, 0 indicates "no limit"
         self.limit = limit
         # time in seconds that this quota reflects
         self.window = window
@@ -52,6 +53,10 @@ class RedisQuota(Quota):
         except Exception as e:
             raise InvalidConfiguration(six.text_type(e))
 
+    def get_redis_key(self, key, timestamp, interval):
+        # TODO: This is going to be made "private" (name mangled.)
+        return '{}:{}:{}'.format(self.namespace, key, int(timestamp // interval))
+
     def get_quotas(self, project, key=None):
         if key:
             key.project = project
@@ -79,13 +84,49 @@ class RedisQuota(Quota):
                 window=kquota[1],
                 reason_code='key_quota',
             ))
-        return tuple(results)
-
-    def get_redis_key(self, key, timestamp, interval):
-        return '{}:{}:{}'.format(self.namespace, key, int(timestamp // interval))
-
-    def is_rate_limited(self, project, key=None):
-        timestamp = time()
+        return results
+
+    def get_usage(self, project, quotas, timestamp=None):
+        if timestamp is None:
+            timestamp = time()
+
+        def get_usage_for_quota(client, quota):
+            if quota.limit == 0:
+                return None
+
+            return client.get(
+                self.get_redis_key(
+                    quota.key,
+                    timestamp,
+                    quota.window,
+                ),
+            )
+
+        def get_value_for_result(result):
+            if result is None:
+                return None
+
+            return int(result.value or 0)
+
+        with self.cluster.fanout() as client:
+            results = map(
+                functools.partial(
+                    get_usage_for_quota,
+                    client.target_key(
+                        six.text_type(project.organization.pk),
+                    ),
+                ),
+                quotas,
+            )
+
+        return map(
+            get_value_for_result,
+            results,
+        )
+
+    def is_rate_limited(self, project, key=None, timestamp=None):
+        if timestamp is None:
+            timestamp = time()
 
         quotas = [
             quota
diff --git a/tests/sentry/quotas/redis/tests.py b/tests/sentry/quotas/redis/tests.py
index 090f38310e..eea93ab38a 100644
--- a/tests/sentry/quotas/redis/tests.py
+++ b/tests/sentry/quotas/redis/tests.py
@@ -135,3 +135,34 @@ class RedisQuotaTest(TestCase):
         )
 
         assert self.quota.is_rate_limited(self.project).is_limited
+
+    def test_get_usage(self):
+        timestamp = time.time()
+
+        self.get_project_quota.return_value = (200, 60)
+        self.get_organization_quota.return_value = (300, 60)
+
+        n = 10
+        for _ in xrange(n):
+            self.quota.is_rate_limited(self.project, timestamp=timestamp)
+
+        quotas = self.quota.get_quotas(self.project)
+
+        assert self.quota.get_usage(
+            self.project,
+            quotas + [
+                BasicRedisQuota(
+                    key='unlimited',
+                    limit=0,
+                    window=60,
+                    reason_code='unlimited',
+                ),
+                BasicRedisQuota(
+                    key='dummy',
+                    limit=10,
+                    window=60,
+                    reason_code='dummy',
+                ),
+            ],
+            timestamp=timestamp,
+        ) == [n for _ in quotas] + [None, 0]
