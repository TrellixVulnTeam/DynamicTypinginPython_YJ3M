commit a8e7dafb5802b071e1f6ee7d93e5e199f15cd4fc
Author: maxbittker <maxbittker@gmail.com>
Date:   Tue Sep 27 14:55:16 2016 -0700

    filter repeated stack frames in UI
    
    this works by comparing if two stack frames share a lineNo and function name. displays a small card eg: (↻ 20248)
    fixes #4078
    /cc @getsentry/product

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index ea47162f64..b0c062f503 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -257,28 +257,33 @@ const Frame = React.createClass({
     return !this.props.data.inApp && this.props.nextFrameInApp;
   },
 
-  renderLeadHint(nRepeats) {
+  renderLeadHint() {
     if (this.leadsToApp() && !this.state.isExpanded) {
       return (
         <span className="leads-to-app-hint">
           {'Called from: '}
         </span>
       );
-    } else if (nRepeats > 0) {
+    } else return null;
+  },
+  renderRepeats() {
+    if (this.props.timesRepeated > 0) {
       return (
-      <span className="repeated-frames">
-        ↻  {nRepeats} 
+      <span className="repeated-frames"
+        title={`Frame repeated ${this.props.timesRepeated} times`}>
+        ↻  {this.props.timesRepeated}
       </span>
       );
-    } else return null;
+    } else
+     return null;
   },
-
-  renderDefaultLine(nRepeats) {
+  renderDefaultLine() {
     return (
       <StrictClick onClick={this.isExpandable() ? this.toggleContext : null}>
         <div className="title">
-          {this.renderLeadHint(nRepeats)}
+          {this.renderLeadHint()}
           {this.renderDefaultTitle()}
+          {this.renderRepeats()}
         </div>
       </StrictClick>
     );
@@ -316,13 +321,13 @@ const Frame = React.createClass({
     );
   },
 
-  renderLine(nRepeats) {
+  renderLine() {
     switch (this.getPlatform()) {
       case 'objc':
       case 'cocoa':
         return this.renderCocoaLine();
       default:
-        return this.renderDefaultLine(nRepeats);
+        return this.renderDefaultLine();
     }
   },
 
@@ -343,7 +348,7 @@ const Frame = React.createClass({
 
     return (
       <li {...props}>
-        {this.renderLine(this.props.timesRepeated)}
+        {this.renderLine()}
         {context}
       </li>
     );
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index c0d99f811e..86087d9485 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -69,12 +69,15 @@ const StacktraceContent = React.createClass({
     let nRepeats = 0;
     data.frames.forEach((frame, frameIdx) => {
       let nextFrame = data.frames[frameIdx + 1];
-      let repeatedFrame = nextFrame && frame.lineNo == nextFrame.lineNo && frame.function == nextFrame.function;
+      let repeatedFrame = nextFrame &&
+       frame.lineNo === nextFrame.lineNo &&
+       frame.function === nextFrame.function;
+
       if(repeatedFrame){
         nRepeats++;
       }
-      if (this.frameIsVisible(frame, nextFrame)
-          && !repeatedFrame ){
+
+      if (this.frameIsVisible(frame, nextFrame) && !repeatedFrame ){
         frames.push(
           <Frame
             key={frameIdx}
@@ -87,9 +90,11 @@ const StacktraceContent = React.createClass({
             timesRepeated={nRepeats}/>
         );
       }
+
       if(!repeatedFrame){
         nRepeats = 0;
       }
+
       if (frameIdx === firstFrameOmitted) {
         frames.push(this.renderOmittedFrames(
           firstFrameOmitted, lastFrameOmitted));
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index d8c71cffe6..b0c56665cf 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1403,7 +1403,18 @@ div.traceback > ul {
       }
     }
   }
-
+  .repeated-frames{
+    border-radius: 50px;
+    padding: 1px 3px 0 3px;
+    margin-top: -2px;
+    margin-right: 30px;
+    border-width: thin;
+    border-style: solid;
+    float: right;
+    border-color: @yellow-orange-dark;
+    color: @yellow-orange-dark;
+    background-color: @white-dark;
+  }
   &.in-app-traceback .frame.leads-to-app {
     .leads-to-app-hint {
       display: none;
diff --git a/src/sentry/static/sentry/less/palette.less b/src/sentry/static/sentry/less/palette.less
index 404a7c6c94..a432662b77 100644
--- a/src/sentry/static/sentry/less/palette.less
+++ b/src/sentry/static/sentry/less/palette.less
@@ -33,7 +33,7 @@
 
 @purple:              #836CC2;
 @purple-light:        #A290D1;
-@purple-lightest:     lighten(#A290D1, 6);
+@purple-lightest:     lighten(@purple-light, 6);
 @purple-dark:         #6958A2;
 
 @gray:                #6F7E94;
