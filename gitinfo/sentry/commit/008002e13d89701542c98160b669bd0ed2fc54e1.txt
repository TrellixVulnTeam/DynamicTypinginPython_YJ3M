commit 008002e13d89701542c98160b669bd0ed2fc54e1
Author: Ben Vinegar <ben@benv.ca>
Date:   Wed Nov 11 15:22:01 2015 -0500

    Fix assignee selector not case insensitive (fixes #2199)

diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index 05868f33bb..c604fcaa8d 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -26,6 +26,20 @@ const AssigneeSelector = React.createClass({
     })
   ],
 
+  statics: {
+    filterMembers(memberList, filter) {
+      if (!filter)
+        return memberList;
+
+      filter = filter.toLowerCase();
+      return memberList.filter(item => {
+        let fullName = [item.name, item.email].join(' ').toLowerCase();
+
+        return fullName.indexOf(filter) !== -1;
+      });
+    }
+  },
+
   getInitialState() {
     let group = GroupStore.get(this.props.id);
 
@@ -126,20 +140,15 @@ const AssigneeSelector = React.createClass({
   render() {
     let loading = this.state.loading;
     let assignedTo = this.state.assignedTo;
-    let filter = this.state.filter;
 
     let className = 'assignee-selector anchor-right';
     if (!assignedTo) {
       className += ' unassigned';
     }
 
-    let memberNodes = [];
-    this.state.memberList.forEach(function(item){
-      let fullName = [item.name, item.email].join(' ').toLowerCase();
-      if (filter && fullName.indexOf(filter) === -1) {
-        return;
-      }
-      memberNodes.push(
+    let members = AssigneeSelector.filterMembers(this.state.memberList, this.state.filter);
+    let memberNodes = members.map((item) => {
+      return (
         <MenuItem key={item.id}
                   disabled={!loading}
                   onSelect={this.assignTo.bind(this, item)} >
@@ -148,7 +157,7 @@ const AssigneeSelector = React.createClass({
           {this.highlight(item.name || item.email, this.state.filter)}
         </MenuItem>
       );
-    }.bind(this));
+    });
 
     let tooltipTitle = null;
     if (assignedTo) {
diff --git a/tests/js/spec/components/assigneeSelector.spec.jsx b/tests/js/spec/components/assigneeSelector.spec.jsx
new file mode 100644
index 0000000000..482c441257
--- /dev/null
+++ b/tests/js/spec/components/assigneeSelector.spec.jsx
@@ -0,0 +1,38 @@
+import AssigneeSelector from 'app/components/assigneeSelector';
+
+describe('AssigneeSelector', function() {
+  describe('statics', function () {
+    const USER_1 = {
+      name: 'Jane Doe',
+      email: 'janedoe@example.com'
+    };
+    const USER_2 = {
+      name: 'John Smith',
+      email: 'johnsmith@example.com'
+    };
+
+    const filterMembers = AssigneeSelector.filterMembers;
+
+    describe('filterMembers()', function () {
+      it('should return the full array when filter is falsy', function () {
+        expect(filterMembers([USER_1, USER_2], '')).to.eql([USER_1, USER_2]);
+        expect(filterMembers([USER_1, USER_2], null)).to.eql([USER_1, USER_2]);
+        expect(filterMembers([USER_1, USER_2], undefined)).to.eql([USER_1, USER_2]);
+      });
+
+      it('should match on email', function () {
+        expect(filterMembers([USER_1, USER_2], 'johnsmith@example.com')).to.eql([USER_2]);
+      });
+
+      it('should match on name', function () {
+        expect(filterMembers([USER_1, USER_2], 'John Smith')).to.eql([USER_2]);
+      });
+
+      it('should ignore capitalization', function () {
+        expect(filterMembers([USER_1], 'Jane')).to.eql([USER_1]);
+        expect(filterMembers([USER_1], 'jane')).to.eql([USER_1]);
+      });
+    });
+  });
+});
+
