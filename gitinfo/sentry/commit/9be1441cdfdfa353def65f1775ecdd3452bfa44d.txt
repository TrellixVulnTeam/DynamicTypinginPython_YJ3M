commit 9be1441cdfdfa353def65f1775ecdd3452bfa44d
Author: Mark Story <mark@sentry.io>
Date:   Mon Apr 20 11:32:54 2020 -0400

    ref(ts) Convert issue ignore actions to typescript (#18348)
    
    Improve the typings on customIgnoreCountModal too as they are related to
    the ignore actions. I'll make another pass on this component to update
    buttons and other UI conventions.

diff --git a/src/sentry/static/sentry/app/components/actions/ignore.jsx b/src/sentry/static/sentry/app/components/actions/ignore.tsx
similarity index 79%
rename from src/sentry/static/sentry/app/components/actions/ignore.jsx
rename to src/sentry/static/sentry/app/components/actions/ignore.tsx
index 43e5fa87b9..79b19844bb 100644
--- a/src/sentry/static/sentry/app/components/actions/ignore.jsx
+++ b/src/sentry/static/sentry/app/components/actions/ignore.tsx
@@ -2,6 +2,7 @@ import React from 'react';
 import PropTypes from 'prop-types';
 import classNames from 'classnames';
 
+import {ResolutionStatusDetails} from 'app/types';
 import {t, tn} from 'app/locale';
 import MenuItem from 'app/components/menuItem';
 import DropdownLink from 'app/components/dropdownLink';
@@ -11,7 +12,42 @@ import CustomIgnoreDurationModal from 'app/components/customIgnoreDurationModal'
 import ActionLink from 'app/components/actions/actionLink';
 import Tooltip from 'app/components/tooltip';
 
-export default class IgnoreActions extends React.Component {
+enum ModalStates {
+  COUNT,
+  DURATION,
+  USERS,
+}
+
+const IGNORE_DURATIONS = [30, 120, 360, 60 * 24, 60 * 24 * 7];
+const IGNORE_COUNTS = [1, 10, 100, 1000, 10000, 100000];
+const IGNORE_WINDOWS: [number, string][] = [
+  [60, 'per hour'],
+  [24 * 60, 'per day'],
+  [24 * 7 * 60, 'per week'],
+];
+
+const defaultProps = {
+  isIgnored: false,
+  confirmLabel: t('Ignore'),
+};
+
+type UpdateParams = {
+  status: string;
+  statusDetails?: ResolutionStatusDetails;
+};
+
+type Props = {
+  onUpdate: (params: UpdateParams) => void;
+  disabled?: boolean;
+  shouldConfirm?: boolean;
+  confirmMessage?: string;
+} & typeof defaultProps;
+
+type State = {
+  modal: ModalStates | null;
+};
+
+export default class IgnoreActions extends React.Component<Props, State> {
   static propTypes = {
     isIgnored: PropTypes.bool,
     onUpdate: PropTypes.func.isRequired,
@@ -21,39 +57,20 @@ export default class IgnoreActions extends React.Component {
     confirmLabel: PropTypes.string,
   };
 
-  static defaultProps = {
-    isIgnored: false,
-    confirmLabel: 'Ignore',
-  };
+  static defaultProps = defaultProps;
 
-  constructor(props) {
-    super(props);
-    this.state = {modal: false};
-  }
-  getIgnoreDurations() {
-    return [30, 120, 360, 60 * 24, 60 * 24 * 7];
-  }
-
-  getIgnoreCounts() {
-    return [1, 10, 100, 1000, 10000, 100000];
-  }
-
-  getIgnoreWindows() {
-    return [
-      [60, 'per hour'],
-      [24 * 60, 'per day'],
-      [24 * 7 * 60, 'per week'],
-    ];
-  }
+  state = {
+    modal: null,
+  };
 
-  onCustomIgnore(statusDetails) {
+  onCustomIgnore(statusDetails: ResolutionStatusDetails) {
     this.setState({
-      modal: false,
+      modal: null,
     });
     this.onIgnore(statusDetails);
   }
 
-  onIgnore(statusDetails) {
+  onIgnore(statusDetails: ResolutionStatusDetails) {
     return this.props.onUpdate({
       status: 'ignored',
       statusDetails: statusDetails || {},
@@ -101,29 +118,29 @@ export default class IgnoreActions extends React.Component {
     return (
       <div style={{display: 'inline-block'}}>
         <CustomIgnoreDurationModal
-          show={this.state.modal === 'duration'}
+          show={this.state.modal === ModalStates.DURATION}
           onSelected={details => this.onCustomIgnore(details)}
           onCanceled={() => this.setState({modal: null})}
         />
         <CustomIgnoreCountModal
-          show={this.state.modal === 'count'}
+          show={this.state.modal === ModalStates.COUNT}
           onSelected={details => this.onCustomIgnore(details)}
           onCanceled={() => this.setState({modal: null})}
           label={t('Ignore this issue until it occurs again\u2026')}
           countLabel={t('Number of times')}
           countName="ignoreCount"
           windowName="ignoreWindow"
-          windowChoices={this.getIgnoreWindows()}
+          windowChoices={IGNORE_WINDOWS}
         />
         <CustomIgnoreCountModal
-          show={this.state.modal === 'users'}
+          show={this.state.modal === ModalStates.USERS}
           onSelected={details => this.onCustomIgnore(details)}
           onCanceled={() => this.setState({modal: null})}
           label={t('Ignore this issue until it affects an additional\u2026')}
           countLabel={t('Number of users')}
           countName="ignoreUserCount"
           windowName="ignoreUserWindow"
-          windowChoices={this.getIgnoreWindows()}
+          windowChoices={IGNORE_WINDOWS}
         />
         <div className="btn-group">
           <ActionLink
@@ -151,7 +168,7 @@ export default class IgnoreActions extends React.Component {
                 isNestedDropdown
                 alwaysRenderMenu
               >
-                {this.getIgnoreDurations().map(duration => (
+                {IGNORE_DURATIONS.map(duration => (
                   <MenuItem noAnchor key={duration}>
                     <ActionLink
                       {...actionLinkProps}
@@ -163,7 +180,9 @@ export default class IgnoreActions extends React.Component {
                 ))}
                 <MenuItem divider />
                 <MenuItem noAnchor>
-                  <a onClick={() => this.setState({modal: 'duration'})}>{t('Custom')}</a>
+                  <a onClick={() => this.setState({modal: ModalStates.DURATION})}>
+                    {t('Custom')}
+                  </a>
                 </MenuItem>
               </DropdownLink>
             </li>
@@ -174,7 +193,7 @@ export default class IgnoreActions extends React.Component {
                 isNestedDropdown
                 alwaysRenderMenu
               >
-                {this.getIgnoreCounts().map(count => (
+                {IGNORE_COUNTS.map(count => (
                   <li className="dropdown-submenu" key={count}>
                     <DropdownLink
                       title={tn('one time\u2026', '%s times\u2026', count)}
@@ -190,7 +209,7 @@ export default class IgnoreActions extends React.Component {
                           {t('from now')}
                         </ActionLink>
                       </MenuItem>
-                      {this.getIgnoreWindows().map(([hours, label]) => (
+                      {IGNORE_WINDOWS.map(([hours, label]) => (
                         <MenuItem noAnchor key={hours}>
                           <ActionLink
                             {...actionLinkProps}
@@ -210,7 +229,9 @@ export default class IgnoreActions extends React.Component {
                 ))}
                 <MenuItem divider />
                 <MenuItem noAnchor>
-                  <a onClick={() => this.setState({modal: 'count'})}>{t('Custom')}</a>
+                  <a onClick={() => this.setState({modal: ModalStates.USERS})}>
+                    {t('Custom')}
+                  </a>
                 </MenuItem>
               </DropdownLink>
             </li>
@@ -221,7 +242,7 @@ export default class IgnoreActions extends React.Component {
                 isNestedDropdown
                 alwaysRenderMenu
               >
-                {this.getIgnoreCounts().map(count => (
+                {IGNORE_COUNTS.map(count => (
                   <li className="dropdown-submenu" key={count}>
                     <DropdownLink
                       title={tn('one user\u2026', '%s users\u2026', count)}
@@ -237,7 +258,7 @@ export default class IgnoreActions extends React.Component {
                           {t('from now')}
                         </ActionLink>
                       </MenuItem>
-                      {this.getIgnoreWindows().map(([hours, label]) => (
+                      {IGNORE_WINDOWS.map(([hours, label]) => (
                         <MenuItem noAnchor key={hours}>
                           <ActionLink
                             {...actionLinkProps}
@@ -257,7 +278,9 @@ export default class IgnoreActions extends React.Component {
                 ))}
                 <MenuItem divider />
                 <MenuItem noAnchor>
-                  <a onClick={() => this.setState({modal: 'users'})}>{t('Custom')}</a>
+                  <a onClick={() => this.setState({modal: ModalStates.USERS})}>
+                    {t('Custom')}
+                  </a>
                 </MenuItem>
               </DropdownLink>
             </li>
diff --git a/src/sentry/static/sentry/app/components/customIgnoreCountModal.tsx b/src/sentry/static/sentry/app/components/customIgnoreCountModal.tsx
index 701f694cb8..7f8d074d36 100644
--- a/src/sentry/static/sentry/app/components/customIgnoreCountModal.tsx
+++ b/src/sentry/static/sentry/app/components/customIgnoreCountModal.tsx
@@ -4,20 +4,24 @@ import React from 'react';
 import styled from '@emotion/styled';
 
 import {t} from 'app/locale';
+import {ResolutionStatusDetails} from 'app/types';
 import Button from 'app/components/button';
 import InputField from 'app/views/settings/components/forms/inputField';
 import SelectField from 'app/views/settings/components/forms/selectField';
 import space from 'app/styles/space';
 
+type CountNames = 'ignoreCount' | 'ignoreUserCount';
+type WindowNames = 'ignoreWindow' | 'ignoreUserWindow';
+
 type Props = {
-  onSelected: (statusDetails: {[key: string]: number}) => void;
+  onSelected: (statusDetails: ResolutionStatusDetails) => void;
   onCanceled: () => void;
   show: boolean;
   label: string;
   countLabel: string;
-  countName: string;
-  windowName: string;
-  windowChoices: string[];
+  countName: CountNames;
+  windowName: WindowNames;
+  windowChoices: string[] | [number, string][];
 };
 
 type State = {
@@ -46,7 +50,7 @@ export default class CustomIgnoreCountModal extends React.Component<Props, State
     const {count, window} = this.state;
     const {countName, windowName} = this.props;
 
-    const statusDetails: {[key: string]: number} = {[countName]: count};
+    const statusDetails: ResolutionStatusDetails = {[countName]: count};
     if (window) {
       statusDetails[windowName] = window;
     }
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index deb08b6009..9cbfe2493b 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -1097,10 +1097,12 @@ export type ResolutionStatusDetails = {
   actor?: AvatarUser;
   autoResolved?: boolean;
   ignoreCount?: number;
+  // Sent in requests. ignoreUntil is used in responses.
+  ignoreDuration?: number;
   ignoreUntil?: string;
   ignoreUserCount?: number;
-  ignoreUserWindow?: string;
-  ignoreWindow?: string;
+  ignoreUserWindow?: number;
+  ignoreWindow?: number;
   inCommit?: Commit;
   inRelease?: string;
   inNextRelease?: boolean;
