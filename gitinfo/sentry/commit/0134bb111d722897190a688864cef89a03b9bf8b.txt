commit 0134bb111d722897190a688864cef89a03b9bf8b
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Tue Nov 5 16:09:06 2019 +0100

    ref: Manually trace relay projectconfig endpoint (#15442)

diff --git a/src/sentry/api/endpoints/relay_projectconfigs.py b/src/sentry/api/endpoints/relay_projectconfigs.py
index e21c57a5b8..f79cdcdc53 100644
--- a/src/sentry/api/endpoints/relay_projectconfigs.py
+++ b/src/sentry/api/endpoints/relay_projectconfigs.py
@@ -3,6 +3,9 @@ from __future__ import absolute_import
 import six
 from rest_framework.response import Response
 
+from sentry_sdk import Hub
+from sentry_sdk.tracing import Span
+
 from sentry.api.base import Endpoint
 from sentry.api.permissions import RelayPermission
 from sentry.api.authentication import RelayAuthentication
@@ -16,7 +19,12 @@ class RelayProjectConfigsEndpoint(Endpoint):
     permission_classes = (RelayPermission,)
 
     def post(self, request):
+        with Hub.current.start_span(
+            Span(op="http.server", transaction="RelayProjectConfigsEndpoint", sampled=True)
+        ):
+            return self._post(request)
 
+    def _post(self, request):
         relay = request.relay
         assert relay is not None  # should be provided during Authentication
 
@@ -25,26 +33,30 @@ class RelayProjectConfigsEndpoint(Endpoint):
         if full_config_requested and not relay.is_internal:
             return Response("Relay unauthorized for full config information", 403)
 
-        project_ids = set(request.relay_request_data.get("projects") or ())
-        if project_ids:
-            with metrics.timer("relay_project_configs.fetching_projects.duration"):
-                projects = {p.id: p for p in Project.objects.filter(pk__in=project_ids)}
-        else:
-            projects = {}
-
-        # Preload all organizations and their options to prevent repeated
-        # database access when computing the project configuration.
-        org_ids = set(project.organization_id for project in six.itervalues(projects))
-        if org_ids:
-            with metrics.timer("relay_project_configs.fetching_orgs.duration"):
-                orgs = {
-                    o.id: o
-                    for o in Organization.objects.filter(pk__in=org_ids)
-                    if request.relay.has_org_access(o)
-                }
-        else:
-            orgs = {}
-        org_options = {i: OrganizationOption.objects.get_all_values(i) for i in six.iterkeys(orgs)}
+        with Hub.current.start_span(op="relay_fetch_projects"):
+            project_ids = set(request.relay_request_data.get("projects") or ())
+            if project_ids:
+                with metrics.timer("relay_project_configs.fetching_projects.duration"):
+                    projects = {p.id: p for p in Project.objects.filter(pk__in=project_ids)}
+            else:
+                projects = {}
+
+        with Hub.current.start_span(op="relay_fetch_orgs"):
+            # Preload all organizations and their options to prevent repeated
+            # database access when computing the project configuration.
+            org_ids = set(project.organization_id for project in six.itervalues(projects))
+            if org_ids:
+                with metrics.timer("relay_project_configs.fetching_orgs.duration"):
+                    orgs = {
+                        o.id: o
+                        for o in Organization.objects.filter(pk__in=org_ids)
+                        if request.relay.has_org_access(o)
+                    }
+            else:
+                orgs = {}
+            org_options = {
+                i: OrganizationOption.objects.get_all_values(i) for i in six.iterkeys(orgs)
+            }
 
         metrics.timing("relay_project_configs.projects_requested", len(project_ids))
         metrics.timing("relay_project_configs.projects_fetched", len(projects))
@@ -65,10 +77,11 @@ class RelayProjectConfigsEndpoint(Endpoint):
             project.organization = organization
             org_opts = org_options.get(organization.id) or {}
 
-            with metrics.timer("relay_project_configs.get_config.duration"):
-                project_config = config.get_project_config(
-                    project, org_options=org_opts, full_config=full_config_requested
-                )
-            configs[six.text_type(project_id)] = project_config.to_camel_case_dict()
+            with Hub.current.start_span(op="get_config"):
+                with metrics.timer("relay_project_configs.get_config.duration"):
+                    project_config = config.get_project_config(
+                        project, org_options=org_opts, full_config=full_config_requested
+                    )
+                configs[six.text_type(project_id)] = project_config.to_camel_case_dict()
 
         return Response({"configs": configs}, status=200)
