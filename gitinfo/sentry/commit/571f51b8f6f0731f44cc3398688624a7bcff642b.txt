commit 571f51b8f6f0731f44cc3398688624a7bcff642b
Author: Dora <dora.l.chan@gmail.com>
Date:   Mon Jan 6 14:53:57 2020 -0800

    fix(discv2): hatch text color (#16239)
    
    * trying to fix hatch color
    
    * pass spanBarHatch through Duration pill
    
    * enforcing spanBarHatch booelan

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
index 5ffae2e25c..30ca5d236f 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
@@ -679,20 +679,13 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
     dividerHandlerChildrenProps: DividerHandlerManager.DividerHandlerManagerChildrenProps
   ) => {
     const {span, spanBarColour, spanBarHatch, spanNumber} = this.props;
-
     const startTimestamp: number = span.start_timestamp;
     const endTimestamp: number = span.timestamp;
-
     const duration = Math.abs(endTimestamp - startTimestamp);
-
     const durationString = getHumanDuration(duration);
-
     const bounds = this.getBounds();
-
     const {dividerPosition} = dividerHandlerChildrenProps;
-
     const displaySpanBar = defined(bounds.left) && defined(bounds.width);
-
     const durationDisplay = getDurationDisplay(bounds);
 
     return (
@@ -726,6 +719,7 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
               <DurationPill
                 durationDisplay={durationDisplay}
                 showDetail={this.state.showDetail}
+                spanBarHatch={!!spanBarHatch}
               >
                 {durationString}
                 {this.renderWarningText({warningText: bounds.warning})}
@@ -955,7 +949,15 @@ const SpanTreeToggler = styled('div')<SpanTreeTogglerAndDivProps>`
   ${p => getTogglerTheme(p)}
 `;
 
-const getDurationPillAlignment = ({durationDisplay}) => {
+const getDurationPillAlignment = ({
+  durationDisplay,
+  theme,
+  spanBarHatch,
+}: {
+  durationDisplay: DurationDisplay;
+  theme: any;
+  spanBarHatch: boolean;
+}) => {
   switch (durationDisplay) {
     case 'left':
       return `right: calc(100% + ${space(0.5)});`;
@@ -964,7 +966,7 @@ const getDurationPillAlignment = ({durationDisplay}) => {
     default:
       return `
         right: ${space(0.75)};
-        color: #fff;
+        color: ${spanBarHatch === true ? theme.gray2 : theme.white};
       `;
   }
 };
@@ -972,6 +974,7 @@ const getDurationPillAlignment = ({durationDisplay}) => {
 const DurationPill = styled('div')<{
   durationDisplay: DurationDisplay;
   showDetail: boolean;
+  spanBarHatch: boolean;
 }>`
   position: absolute;
   top: 50%;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
index 3ea57ef4aa..50e711d4ab 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
@@ -224,7 +224,7 @@ class SpanTree extends React.Component<PropType> {
       type: 'gap',
       start_timestamp: previousSiblingEndTimestamp || span.start_timestamp,
       timestamp: span.start_timestamp, // this is essentially end_timestamp
-      description: t('Potential area for tracing instrumentation'),
+      description: t('Missing instrumentation'),
     };
 
     const spanGapComponent =
