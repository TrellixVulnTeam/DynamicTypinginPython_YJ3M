commit 6ba3b1e63fc442680792ff566e5a2b14632739cd
Author: josh <josh@jrl.ninja>
Date:   Wed Oct 23 15:38:54 2019 -0700

    py3(django): finish deferring more model imports until after Django setup (#15233)

diff --git a/src/sentry/auth/__init__.py b/src/sentry/auth/__init__.py
index 076baf6d47..f88f0df8fc 100644
--- a/src/sentry/auth/__init__.py
+++ b/src/sentry/auth/__init__.py
@@ -1,8 +1,6 @@
 from __future__ import absolute_import, print_function
 
-from .provider import *  # NOQA
 from .manager import ProviderManager
-from .view import *  # NOQA
 
 manager = ProviderManager()
 register = manager.register
diff --git a/src/sentry/auth/providers/dummy.py b/src/sentry/auth/providers/dummy.py
index 77d9b87285..7cfcff598b 100644
--- a/src/sentry/auth/providers/dummy.py
+++ b/src/sentry/auth/providers/dummy.py
@@ -2,8 +2,8 @@ from __future__ import absolute_import, print_function
 
 from django.http import HttpResponse
 
-from sentry.auth import Provider, AuthView
-from sentry.auth.provider import MigratingIdentityId
+from sentry.auth.provider import Provider, MigratingIdentityId
+from sentry.auth.view import AuthView
 
 
 class AskEmail(AuthView):
diff --git a/src/sentry/auth/providers/google/__init__.py b/src/sentry/auth/providers/google/__init__.py
index 42c56ca6b4..c3961685ab 100644
--- a/src/sentry/auth/providers/google/__init__.py
+++ b/src/sentry/auth/providers/google/__init__.py
@@ -1,14 +1 @@
 from __future__ import absolute_import
-
-from sentry import auth, options
-
-from .provider import GoogleOAuth2Provider
-
-auth.register("google", GoogleOAuth2Provider)
-
-options.register(
-    "auth-google.client-id", flags=options.FLAG_ALLOW_EMPTY | options.FLAG_PRIORITIZE_DISK
-)
-options.register(
-    "auth-google.client-secret", flags=options.FLAG_ALLOW_EMPTY | options.FLAG_PRIORITIZE_DISK
-)
diff --git a/src/sentry/auth/providers/google/apps.py b/src/sentry/auth/providers/google/apps.py
new file mode 100644
index 0000000000..425d032553
--- /dev/null
+++ b/src/sentry/auth/providers/google/apps.py
@@ -0,0 +1,22 @@
+from __future__ import absolute_import
+
+from django.apps import AppConfig
+
+
+class Config(AppConfig):
+    name = "sentry.auth.providers.google"
+
+    def ready(self):
+        from sentry import auth, options
+
+        from .provider import GoogleOAuth2Provider
+
+        auth.register("google", GoogleOAuth2Provider)
+
+        options.register(
+            "auth-google.client-id", flags=options.FLAG_ALLOW_EMPTY | options.FLAG_PRIORITIZE_DISK
+        )
+        options.register(
+            "auth-google.client-secret",
+            flags=options.FLAG_ALLOW_EMPTY | options.FLAG_PRIORITIZE_DISK,
+        )
diff --git a/src/sentry/auth/providers/oauth2.py b/src/sentry/auth/providers/oauth2.py
index b2847c28ae..30c48a76fb 100644
--- a/src/sentry/auth/providers/oauth2.py
+++ b/src/sentry/auth/providers/oauth2.py
@@ -6,7 +6,8 @@ from six.moves.urllib.parse import parse_qsl, urlencode
 from time import time
 from uuid import uuid4
 
-from sentry.auth import Provider, AuthView
+from sentry.auth.provider import Provider
+from sentry.auth.view import AuthView
 from sentry.auth.exceptions import IdentityNotValid
 from sentry.http import safe_urlopen, safe_urlread
 from sentry.utils import json
diff --git a/src/sentry/auth/providers/saml2.py b/src/sentry/auth/providers/saml2.py
index 4aa670b5a8..4930894186 100644
--- a/src/sentry/auth/providers/saml2.py
+++ b/src/sentry/auth/providers/saml2.py
@@ -12,7 +12,8 @@ from six import iteritems, add_metaclass
 from six.moves.urllib.parse import urlparse
 
 from sentry import options
-from sentry.auth import Provider, AuthView
+from sentry.auth.provider import Provider
+from sentry.auth.view import AuthView
 from sentry.auth.exceptions import IdentityNotValid
 from sentry.models import AuthProvider, Organization, OrganizationStatus
 from sentry.utils.auth import get_login_url
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index f9dfcdf80b..a6e6609d77 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -332,7 +332,7 @@ INSTALLED_APPS = (
     "social_auth",
     "sudo",
     "sentry.eventstream",
-    "sentry.auth.providers.google",
+    "sentry.auth.providers.google.apps.Config",
     "django.contrib.staticfiles",
 )
 
diff --git a/src/sentry/features/manager.py b/src/sentry/features/manager.py
index 754a002ef5..02656f181c 100644
--- a/src/sentry/features/manager.py
+++ b/src/sentry/features/manager.py
@@ -4,7 +4,6 @@ __all__ = ["FeatureManager"]
 
 from django.conf import settings
 
-from sentry.plugins.base import plugins
 from sentry.utils.safe import safe_execute
 
 from .base import Feature
@@ -83,6 +82,8 @@ class FeatureManager(object):
         return False
 
     def _get_plugin_value(self, feature, actor):
+        from sentry.plugins.base import plugins
+
         for plugin in plugins.all(version=2):
             handlers = safe_execute(plugin.get_feature_hooks, _with_transaction=False)
             for handler in handlers or ():
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 8a071d688b..318c1846b0 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -6,13 +6,9 @@ import time
 from django.conf import settings
 
 from sentry import features
-from sentry.models import EventDict
-from sentry.utils import snuba
 from sentry.utils.cache import cache
 from sentry.exceptions import PluginError
-from sentry.plugins.base import plugins
 from sentry.signals import event_processed
-from sentry.tasks.sentry_apps import process_resource_change_bound
 from sentry.tasks.base import instrumented_task
 from sentry.utils import metrics
 from sentry.utils.redis import redis_clusters
@@ -123,6 +119,8 @@ def post_process_group(event, is_new, is_regression, is_new_group_environment, *
     """
     Fires post processing hooks for a group.
     """
+    from sentry.utils import snuba
+
     with snuba.options_override({"consistent": True}):
         if check_event_already_post_processed(event):
             logger.info(
@@ -138,7 +136,7 @@ def post_process_group(event, is_new, is_regression, is_new_group_environment, *
         # NOTE: we must pass through the full Event object, and not an
         # event_id since the Event object may not actually have been stored
         # in the database due to sampling.
-        from sentry.models import Project, Organization
+        from sentry.models import Project, Organization, EventDict
         from sentry.models.group import get_group_with_redirect
         from sentry.rules.processor import RuleProcessor
         from sentry.tasks.servicehooks import process_service_hook
@@ -192,6 +190,8 @@ def post_process_group(event, is_new, is_regression, is_new_group_environment, *
                         if any(e in allowed_events for e in events):
                             process_service_hook.delay(servicehook_id=servicehook_id, event=event)
 
+            from sentry.tasks.sentry_apps import process_resource_change_bound
+
             if event.get_event_type() == "error" and _should_send_error_created_hooks(
                 event.project
             ):
@@ -203,6 +203,8 @@ def post_process_group(event, is_new, is_regression, is_new_group_environment, *
                     action="created", sender="Group", instance_id=event.group_id
                 )
 
+            from sentry.plugins.base import plugins
+
             for plugin in plugins.for_project(event.project):
                 plugin_post_process_group(
                     plugin_slug=plugin.slug, event=event, is_new=is_new, is_regresion=is_regression
@@ -254,6 +256,8 @@ def plugin_post_process_group(plugin_slug, event, **kwargs):
     with configure_scope() as scope:
         scope.set_tag("project", event.project_id)
 
+    from sentry.plugins.base import plugins
+
     plugin = plugins.get(plugin_slug)
     safe_execute(
         plugin.post_process,
