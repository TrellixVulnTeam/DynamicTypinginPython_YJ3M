commit 37189860ecca11dec3a3ee9c8fb8418450283a91
Author: Ben Vinegar <ben@benv.ca>
Date:   Wed May 25 15:41:07 2016 -0700

    First pass at rendering minified stack separately

diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 028c7a535b..ff923dad70 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -501,8 +501,7 @@ class SourceProcessor(object):
         self.ensure_module_names(frames)
         self.fix_culprit(data, stacktraces)
         self.update_stacktraces(stacktraces)
-        self.add_raw_stacktraces(data)
-
+        self.add_raw_stacktraces(data, release)
         return data
 
     def fix_culprit(self, data, stacktraces):
@@ -523,7 +522,7 @@ class SourceProcessor(object):
         for raw, interface in stacktraces:
             raw.update(interface.to_json())
 
-    def add_raw_stacktraces(self, data):
+    def add_raw_stacktraces(self, data, release):
         try:
             values = data['sentry.interfaces.Exception']['values']
         except KeyError:
@@ -534,6 +533,18 @@ class SourceProcessor(object):
                 continue
 
             raw_frames = []
+            for frame in exc['stacktrace']['frames']:
+                frame = frame['data']['raw']
+
+                if frame['lineno'] is not None:
+                    source = self.get_source(frame['abs_path'], release)
+                    if source is None:
+                        logger.debug('No source found for %s', frame['abs_path'])
+                        continue
+
+                    frame['pre_context'], frame['context_line'], frame['post_context'] = get_source_context(
+                        source=source, lineno=frame['lineno'], colno=frame['colno'] or 0)
+
             for frame in exc['stacktrace']['frames']:
                 try:
                     # TODO(dcramer): we should refactor this to avoid this
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
index cb2d2cd35f..d730f633a4 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
@@ -34,11 +34,12 @@ const ExceptionInterface = React.createClass({
 
     return {
       stackView: (this.props.data.hasSystemFrames ? 'app' : 'full'),
+      stackType: 'original',
       newestFirst: newestFirst
     };
   },
 
-  toggleStack(value) {
+  toggleStackView(value) {
     this.setState({
       stackView: value
     });
@@ -49,16 +50,21 @@ const ExceptionInterface = React.createClass({
     let evt = this.props.event;
     let data = this.props.data;
     let stackView = this.state.stackView;
+    let stackType = this.state.stackType;
     let newestFirst = this.state.newestFirst;
 
     let title = (
       <div>
-        <div className="btn-group">
+        <div className="btn-group" style={{marginLeft:'10px'}}>
           {data.hasSystemFrames &&
-            <a className={(stackView === 'app' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'app')}>{t('App Only')}</a>
+            <a className={(stackView === 'app' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStackView.bind(this, 'app')}>{t('App Only')}</a>
           }
-          <a className={(stackView === 'full' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'full')}>{t('Full')}</a>
-          <a className={(stackView === 'raw' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'raw')}>{t('Raw')}</a>
+          <a className={(stackView === 'full' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStackView.bind(this, 'full')}>{t('Full')}</a>
+          <a className={(stackView === 'raw' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStackView.bind(this, 'raw')}>{t('Text')}</a>
+        </div>
+        <div className="btn-group">
+          <a className={(stackType === 'minified' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.setState.bind(this, {stackType: 'minified'})}>{t('Minified')}</a>
+          <a className={(stackType === 'original' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.setState.bind(this, {stackType: 'original'})}>{t('Original')}</a>
         </div>
         <h3>
           {t('Exception')}
@@ -80,12 +86,15 @@ const ExceptionInterface = React.createClass({
           type={this.props.type}
           title={title}
           wrapTitle={false}>
+        {/*stackType === 'original' ?
+        */}
         {stackView === 'raw' ?
           <RawExceptionContent
             values={data.values}
             platform={evt.platform}/> :
 
           <ExceptionContent
+            type={this.state.stackType}
             view={stackView}
             values={data.values}
             platform={evt.platform}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
index 43cec66293..c610495c81 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
@@ -5,6 +5,7 @@ import StacktraceContent from './stacktraceContent';
 
 const ExceptionContent = React.createClass({
   propTypes: {
+    type: React.PropTypes.string,
     values: React.PropTypes.array.isRequired,
     view: React.PropTypes.string.isRequired,
     platform: React.PropTypes.string,
@@ -24,7 +25,7 @@ const ExceptionContent = React.createClass({
           }
           {defined(exc.stacktrace) &&
             <StacktraceContent
-                data={exc.stacktrace}
+                data={this.props.type === 'original' ? exc.stacktrace : exc.rawStacktrace}
                 includeSystemFrames={stackView === 'full'}
                 platform={this.props.platform}
                 newestFirst={this.props.newestFirst} />
