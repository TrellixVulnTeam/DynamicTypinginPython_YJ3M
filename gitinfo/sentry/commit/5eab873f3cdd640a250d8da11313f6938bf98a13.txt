commit 5eab873f3cdd640a250d8da11313f6938bf98a13
Author: Mark Story <mark@sentry.io>
Date:   Mon Jun 15 11:58:12 2020 -0400

    fix(discover) Retain chart interval on sort operations (#19308)
    
    Add interval to EventView so we can retain its value when using
    EventView to manipulate query strings. I've not added interval to the
    saved query model as that has not come up as something people want yet.

diff --git a/src/sentry/static/sentry/app/components/charts/eventsChart.tsx b/src/sentry/static/sentry/app/components/charts/eventsChart.tsx
index 595a73acca..58307680cc 100644
--- a/src/sentry/static/sentry/app/components/charts/eventsChart.tsx
+++ b/src/sentry/static/sentry/app/components/charts/eventsChart.tsx
@@ -35,6 +35,7 @@ type ChartProps = {
   previousTimeseriesData?: Series | null;
   previousSeriesName?: string;
   showDaily?: boolean;
+  interval?: string;
   yAxis: string;
 };
 
@@ -200,6 +201,10 @@ type Props = {
    * The fields that act as grouping conditions when generating a topEvents chart.
    */
   field?: string[];
+  /**
+   * The interval resolution for a chart e.g. 1m, 5m, 1d
+   */
+  interval?: string;
   /**
    * Order condition when showing topEvents
    */
@@ -263,6 +268,7 @@ class EventsChart extends React.Component<Props> {
       currentSeriesName: currentName,
       previousSeriesName: previousName,
       field,
+      interval,
       showDaily,
       topEvents,
       orderby,
@@ -292,9 +298,7 @@ class EventsChart extends React.Component<Props> {
         }
       },
     };
-    const interval = showDaily
-      ? '1d'
-      : router?.location?.query?.interval || getInterval(this.props, true);
+    const intervalVal = showDaily ? '1d' : interval || getInterval(this.props, true);
 
     let chartImplementation = ({
       zoomRenderProps,
@@ -365,7 +369,7 @@ class EventsChart extends React.Component<Props> {
             environment={environments}
             start={start}
             end={end}
-            interval={interval}
+            interval={intervalVal}
             query={query}
             includePrevious={includePrevious}
             currentSeriesName={currentSeriesName}
diff --git a/src/sentry/static/sentry/app/utils/discover/eventView.tsx b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
index 0a18150ede..4b1d177bbe 100644
--- a/src/sentry/static/sentry/app/utils/discover/eventView.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
@@ -14,7 +14,7 @@ import {getParams} from 'app/components/organizations/globalSelectionHeader/getP
 import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable';
 import {TableColumn, TableColumnSort} from 'app/views/eventsV2/table/types';
 import {decodeColumnOrder} from 'app/views/eventsV2/utils';
-import {decodeScalar} from 'app/utils/queryString';
+import {decodeScalar, decodeList} from 'app/utils/queryString';
 
 import {
   Sort,
@@ -100,17 +100,8 @@ const decodeFields = (location: Location): Array<Field> => {
     return [];
   }
 
-  // TODO(leedongwei): Probably need to refactor this into utils.tsx
-  const fields: string[] = Array.isArray(query.field)
-    ? query.field
-    : isString(query.field)
-    ? [query.field]
-    : [];
-  const widths = Array.isArray(query.widths)
-    ? query.widths
-    : isString(query.widths)
-    ? [query.widths]
-    : [];
+  const fields = decodeList(query.field) || [];
+  const widths = decodeList(query.widths) || [];
 
   const parsed: Field[] = [];
   fields.forEach((field, i) => {
@@ -162,7 +153,7 @@ const decodeSorts = (location: Location): Array<Sort> => {
     return [];
   }
 
-  const sorts: Array<string> = isString(query.sort) ? [query.sort] : query.sort;
+  const sorts = decodeList(query.sort);
 
   return fromSorts(sorts);
 };
@@ -186,12 +177,7 @@ const encodeSorts = (sorts: Readonly<Array<Sort>>): Array<string> =>
 
 const collectQueryStringByKey = (query: Query, key: string): Array<string> => {
   const needle = query[key];
-  const collection: Array<string> = Array.isArray(needle)
-    ? needle
-    : typeof needle === 'string'
-    ? [needle]
-    : [];
-
+  const collection = decodeList(needle) || [];
   return collection.reduce((acc: Array<string>, item: string) => {
     item = item.trim();
 
@@ -210,13 +196,7 @@ const decodeQuery = (location: Location): string | undefined => {
 
   const queryParameter = location.query.query;
 
-  const query =
-    Array.isArray(queryParameter) && queryParameter.length > 0
-      ? queryParameter[0]
-      : isString(queryParameter)
-      ? queryParameter
-      : undefined;
-
+  const query = decodeScalar(queryParameter);
   return isString(query) ? query.trim() : undefined;
 };
 
@@ -253,6 +233,7 @@ class EventView {
   environment: Readonly<string[]>;
   yAxis: string | undefined;
   display: string | undefined;
+  interval: string | undefined;
   createdBy: User | undefined;
 
   constructor(props: {
@@ -268,6 +249,7 @@ class EventView {
     environment: Readonly<string[]>;
     yAxis: string | undefined;
     display: string | undefined;
+    interval?: string;
     createdBy: User | undefined;
   }) {
     const fields: Field[] = Array.isArray(props.fields) ? props.fields : [];
@@ -297,6 +279,7 @@ class EventView {
     this.environment = environment;
     this.yAxis = props.yAxis;
     this.display = props.display;
+    this.interval = props.interval;
     this.createdBy = props.createdBy;
   }
 
@@ -316,6 +299,7 @@ class EventView {
       environment: collectQueryStringByKey(location.query, 'environment'),
       yAxis: decodeScalar(location.query.yAxis),
       display: decodeScalar(location.query.display),
+      interval: decodeScalar(location.query.interval),
       createdBy: undefined,
     });
   }
@@ -488,6 +472,7 @@ class EventView {
       query: undefined,
       yAxis: undefined,
       display: undefined,
+      interval: undefined,
     };
 
     for (const field of EXTERNAL_QUERY_STRING_KEYS) {
@@ -509,6 +494,7 @@ class EventView {
       query: this.query,
       yAxis: this.yAxis,
       display: this.display,
+      interval: this.interval,
     };
 
     for (const field of EXTERNAL_QUERY_STRING_KEYS) {
@@ -566,6 +552,7 @@ class EventView {
       environment: this.environment,
       yAxis: this.yAxis,
       display: this.display,
+      interval: this.interval,
       createdBy: this.createdBy,
     });
   }
@@ -854,7 +841,7 @@ class EventView {
   ): Exclude<EventQuery & LocationQuery, 'sort' | 'cursor'> {
     const payload = this.getEventsAPIPayload(location);
 
-    const remove = ['id', 'name', 'per_page', 'sort', 'cursor', 'field'];
+    const remove = ['id', 'name', 'per_page', 'sort', 'cursor', 'field', 'interval'];
     for (const key of remove) {
       delete payload[key];
     }
diff --git a/src/sentry/static/sentry/app/utils/queryString.tsx b/src/sentry/static/sentry/app/utils/queryString.tsx
index 6a6e2b42e5..faf079a71e 100644
--- a/src/sentry/static/sentry/app/utils/queryString.tsx
+++ b/src/sentry/static/sentry/app/utils/queryString.tsx
@@ -71,7 +71,17 @@ export function decodeScalar(
   return isString(unwrapped) ? unwrapped : undefined;
 }
 
+export function decodeList(
+  value: string[] | string | undefined | null
+): string[] | undefined {
+  if (!value) {
+    return undefined;
+  }
+  return Array.isArray(value) ? value : isString(value) ? [value] : [];
+}
+
 export default {
+  decodeList,
   decodeScalar,
   formatQueryString,
   addQueryParamsToExistingUrl,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
index b044e149b8..3f0ca2a284 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
@@ -78,6 +78,7 @@ class ResultsChart extends React.Component<ResultsChartProps> {
               disablePrevious={eventView.display !== DisplayModes.PREVIOUS}
               disableReleases={eventView.display !== DisplayModes.RELEASES}
               field={isTopEvents ? apiPayload.field : undefined}
+              interval={eventView.interval}
               showDaily={isDaily}
               topEvents={isTopEvents ? 5 : undefined}
               orderby={isTopEvents ? decodeScalar(apiPayload.sort) : undefined}
diff --git a/tests/js/spec/utils/discover/eventView.spec.jsx b/tests/js/spec/utils/discover/eventView.spec.jsx
index 998ec59c60..3f636bfbdb 100644
--- a/tests/js/spec/utils/discover/eventView.spec.jsx
+++ b/tests/js/spec/utils/discover/eventView.spec.jsx
@@ -561,6 +561,7 @@ describe('EventView.generateQueryStringObject()', function() {
       environment: ['staging'],
       yAxis: 'count()',
       display: 'releases',
+      interval: '1m',
     };
 
     const eventView = new EventView(state);
@@ -579,6 +580,7 @@ describe('EventView.generateQueryStringObject()', function() {
       environment: ['staging'],
       yAxis: 'count()',
       display: 'releases',
+      interval: '1m',
     };
 
     expect(eventView.generateQueryStringObject()).toEqual(expected);
@@ -1176,6 +1178,7 @@ describe('EventView.clone()', function() {
       end: '2019-10-02T00:00:00',
       statsPeriod: '14d',
       environment: ['staging'],
+      interval: '5m',
       display: 'releases',
     };
 
diff --git a/tests/js/spec/utils/queryString.spec.js b/tests/js/spec/utils/queryString.spec.js
index b7eb928b20..9dcb13d593 100644
--- a/tests/js/spec/utils/queryString.spec.js
+++ b/tests/js/spec/utils/queryString.spec.js
@@ -86,3 +86,19 @@ describe('decodeScalar()', function() {
     expect(utils.decodeScalar('')).toBeUndefined();
   });
 });
+
+describe('decodeList()', function() {
+  it('wraps string values', function() {
+    expect(utils.decodeList('one')).toEqual(['one']);
+  });
+
+  it('handles arrays', function() {
+    expect(utils.decodeList(['one', 'two'])).toEqual(['one', 'two']);
+  });
+
+  it('handles falsey values', function() {
+    expect(utils.decodeList(undefined)).toBeUndefined();
+    expect(utils.decodeList(false)).toBeUndefined();
+    expect(utils.decodeList('')).toBeUndefined();
+  });
+});
