commit 766b86bca0a3054ab66cfb83d416ab722d8af73d
Author: Sarah Lohmeier <sarah.lohmeier@sentry.io>
Date:   Wed Jun 3 12:52:18 2020 -0700

    feat(api): Move GitHub authentication to header (#18798)
    
    Move GitHub API authentication to header, in response to GItHub deprecating API authentication via query parameters. The code updated in this PR seems to be the only place in the codebase that was authenticating via query params, but if we missed a spot, we'll be alerted by emails from GitHub and a "brownout" well before the official removal date of November 13, 2020.
    
    More info: https://developer.github.com/changes/2020-02-10-deprecating-auth-through-query-param/
    
    Also includes a small refactor: instead of passing the access_token in to every method call for GitHubClient, pass it into the constructor and store it as an object attribute.
    
    Part of ENT-16.

diff --git a/src/sentry/auth/providers/github/client.py b/src/sentry/auth/providers/github/client.py
index fdf193dd84..145fdf9985 100644
--- a/src/sentry/auth/providers/github/client.py
+++ b/src/sentry/auth/providers/github/client.py
@@ -15,21 +15,16 @@ class GitHubApiError(Exception):
 
 
 class GitHubClient(object):
-    def __init__(self, client_id, client_secret):
-        self.client_id = client_id
-        self.client_secret = client_secret
+    def __init__(self, access_token):
         self.http = http.build_session()
+        self.access_token = access_token
 
-    def _request(self, path, access_token):
-        params = {"client_id": self.client_id, "client_secret": self.client_secret}
-
-        headers = {"Authorization": "token {0}".format(access_token)}
+    def _request(self, path):
+        headers = {"Authorization": "token {0}".format(self.access_token)}
 
         try:
             req = self.http.get(
-                "https://{0}/{1}".format(API_DOMAIN, path.lstrip("/")),
-                params=params,
-                headers=headers,
+                "https://{0}/{1}".format(API_DOMAIN, path.lstrip("/")), headers=headers,
             )
         except RequestException as e:
             raise GitHubApiError(six.text_type(e), status=getattr(e, "status_code", 0))
@@ -37,19 +32,18 @@ class GitHubClient(object):
             raise GitHubApiError(req.content, status=req.status_code)
         return json.loads(req.content)
 
-    def get_org_list(self, access_token):
-        return self._request("/user/orgs", access_token)
+    def get_org_list(self):
+        return self._request("/user/orgs")
 
-    def get_user(self, access_token):
-        return self._request("/user", access_token)
+    def get_user(self):
+        return self._request("/user")
 
-    def get_user_emails(self, access_token):
-        return self._request("/user/emails", access_token)
+    def get_user_emails(self):
+        return self._request("/user/emails")
 
-    def is_org_member(self, access_token, org_id):
-        org_list = self.get_org_list(access_token)
+    def is_org_member(self, org_id):
         org_id = six.text_type(org_id)
-        for o in org_list:
+        for o in self.get_org_list():
             if six.text_type((o["id"])) == org_id:
                 return True
         return False
diff --git a/src/sentry/auth/providers/github/provider.py b/src/sentry/auth/providers/github/provider.py
index bb751cd34a..632edcb85a 100644
--- a/src/sentry/auth/providers/github/provider.py
+++ b/src/sentry/auth/providers/github/provider.py
@@ -30,15 +30,13 @@ class GitHubOAuth2Provider(OAuth2Provider):
                 client_id=self.client_id,
                 client_secret=self.client_secret,
             ),
-            FetchUser(client_id=self.client_id, client_secret=self.client_secret, org=self.org),
+            FetchUser(org=self.org),
             ConfirmEmail(),
         ]
 
     def get_setup_pipeline(self):
         pipeline = self.get_auth_pipeline()
-        pipeline.append(
-            SelectOrganization(client_id=self.client_id, client_secret=self.client_secret)
-        )
+        pipeline.append(SelectOrganization())
         return pipeline
 
     def get_refresh_token_url(self):
@@ -58,11 +56,10 @@ class GitHubOAuth2Provider(OAuth2Provider):
         }
 
     def refresh_identity(self, auth_identity):
-        client = GitHubClient(self.client_id, self.client_secret)
-        access_token = auth_identity.data["access_token"]
+        client = GitHubClient(auth_identity.data["access_token"])
 
         try:
-            if not client.is_org_member(access_token, self.org["id"]):
+            if not client.is_org_member(self.org["id"]):
                 raise IdentityNotValid
         except GitHubApiError as e:
             raise IdentityNotValid(e)
diff --git a/src/sentry/auth/providers/github/views.py b/src/sentry/auth/providers/github/views.py
index 2b4454ec03..a803da2e1f 100644
--- a/src/sentry/auth/providers/github/views.py
+++ b/src/sentry/auth/providers/github/views.py
@@ -26,22 +26,21 @@ def _get_name_from_email(email):
 
 
 class FetchUser(AuthView):
-    def __init__(self, client_id, client_secret, org=None, *args, **kwargs):
+    def __init__(self, org=None, *args, **kwargs):
         self.org = org
-        self.client = GitHubClient(client_id, client_secret)
         super(FetchUser, self).__init__(*args, **kwargs)
 
     def handle(self, request, helper):
-        access_token = helper.fetch_state("data")["access_token"]
+        client = GitHubClient(helper.fetch_state("data")["access_token"])
 
         if self.org is not None:
-            if not self.client.is_org_member(access_token, self.org["id"]):
+            if not client.is_org_member(self.org["id"]):
                 return helper.error(ERR_NO_ORG_ACCESS)
 
-        user = self.client.get_user(access_token)
+        user = client.get_user()
 
         if not user.get("email"):
-            emails = self.client.get_user_emails(access_token)
+            emails = client.get_user_emails()
             email = [
                 e["email"]
                 for e in emails
@@ -114,13 +113,12 @@ class SelectOrganizationForm(forms.Form):
 
 
 class SelectOrganization(AuthView):
-    def __init__(self, client_id, client_secret, *args, **kwargs):
-        self.client = GitHubClient(client_id, client_secret)
+    def __init__(self, *args, **kwargs):
         super(SelectOrganization, self).__init__(*args, **kwargs)
 
     def handle(self, request, helper):
-        access_token = helper.fetch_state("data")["access_token"]
-        org_list = self.client.get_org_list(access_token)
+        client = GitHubClient(helper.fetch_state("data")["access_token"])
+        org_list = client.get_org_list()
 
         form = SelectOrganizationForm(org_list, request.POST or None)
         if form.is_valid():
diff --git a/tests/sentry/auth/providers/github/test_client.py b/tests/sentry/auth/providers/github/test_client.py
new file mode 100644
index 0000000000..15f9fa4c4f
--- /dev/null
+++ b/tests/sentry/auth/providers/github/test_client.py
@@ -0,0 +1,48 @@
+from __future__ import absolute_import
+
+import pytest
+import responses
+
+from sentry.auth.providers.github.client import GitHubClient
+from sentry.auth.providers.github.constants import API_DOMAIN
+from sentry.utils.compat import mock
+
+
+@pytest.fixture
+def client():
+    return GitHubClient("accessToken")
+
+
+@responses.activate
+def test_request_sends_access_token(client):
+    responses.add(
+        responses.GET, "https://{0}/".format(API_DOMAIN), json={"status": "SUCCESS"}, status=200
+    )
+    client._request("/")
+
+    assert len(responses.calls) == 1
+    assert responses.calls[0].request.headers["Authorization"] == "token accessToken"
+
+
+@mock.patch.object(GitHubClient, "_request")
+def test_get_org_list(mock_request, client):
+    client.get_org_list()
+    mock_request.assert_called_once_with("/user/orgs")
+
+
+@mock.patch.object(GitHubClient, "_request")
+def test_get_user(mock_request, client):
+    client.get_user()
+    mock_request.assert_called_once_with("/user")
+
+
+@mock.patch.object(GitHubClient, "_request")
+def test_get_user_emails(mock_request, client):
+    client.get_user_emails()
+    mock_request.assert_called_once_with("/user/emails")
+
+
+@mock.patch.object(GitHubClient, "_request", return_value=[{"id": 1396951}])
+def test_is_org_member(mock_request, client):
+    got = client.is_org_member(1396951)
+    assert got is True
