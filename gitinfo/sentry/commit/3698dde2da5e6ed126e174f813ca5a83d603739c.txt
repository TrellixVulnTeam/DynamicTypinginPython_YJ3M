commit 3698dde2da5e6ed126e174f813ca5a83d603739c
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Mon Feb 12 17:23:48 2018 -0800

    feat(api): Allow owners and managers to add and remove members to/from teams

diff --git a/src/sentry/api/endpoints/organization_member_team_details.py b/src/sentry/api/endpoints/organization_member_team_details.py
index f424c016b7..91ef4c32c7 100644
--- a/src/sentry/api/endpoints/organization_member_team_details.py
+++ b/src/sentry/api/endpoints/organization_member_team_details.py
@@ -4,6 +4,7 @@ from django.db.models import Q
 from rest_framework import serializers
 from rest_framework.response import Response
 
+from sentry import roles
 from sentry.api.bases.organization import (OrganizationEndpoint, OrganizationPermission)
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
@@ -44,8 +45,7 @@ class RelaxedOrganizationPermission(OrganizationPermission):
 class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
     permission_classes = [RelaxedOrganizationPermission]
 
-    def _can_access(self, request, member):
-        # TODO(dcramer): ideally org owners/admins could perform these actions
+    def _can_access(self, request, member, organization):
         if is_active_superuser(request):
             return True
 
@@ -55,6 +55,16 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
         if request.user.id == member.user_id:
             return True
 
+        acting_member = OrganizationMember.objects.get(
+            organization=organization,
+            user__id=request.user.id,
+            user__is_active=True,
+        )
+
+        if roles.get(acting_member.role).is_global and \
+                roles.can_manage(acting_member.role, member.role):
+            return True
+
         return False
 
     def _get_member(self, request, organization, member_id):
@@ -74,9 +84,9 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
 
     def post(self, request, organization, member_id, team_slug):
         """
-        Join a team
+        Join or add a member to a team
 
-        Join or request access to a team.
+        Join, request access to or add a member to a team.
 
         If the user is already a member of the team, this will simply return
         a 204.
@@ -89,7 +99,7 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
         except OrganizationMember.DoesNotExist:
             raise ResourceDoesNotExist
 
-        if not self._can_access(request, om):
+        if not self._can_access(request, om, organization):
             return Response({'detail': ERR_INSUFFICIENT_ROLE}, status=400)
 
         try:
@@ -135,16 +145,14 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
 
     def delete(self, request, organization, member_id, team_slug):
         """
-        Leave a team
-
-        Leave a team.
+        Leave or remove a member from a team
         """
         try:
             om = self._get_member(request, organization, member_id)
         except OrganizationMember.DoesNotExist:
             raise ResourceDoesNotExist
 
-        if not self._can_access(request, om):
+        if not self._can_access(request, om, organization):
             return Response({'detail': ERR_INSUFFICIENT_ROLE}, status=400)
 
         try:
