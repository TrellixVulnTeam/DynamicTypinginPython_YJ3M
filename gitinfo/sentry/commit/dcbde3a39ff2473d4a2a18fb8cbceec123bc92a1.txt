commit dcbde3a39ff2473d4a2a18fb8cbceec123bc92a1
Author: David Cramer <dcramer@gmail.com>
Date:   Mon May 11 14:01:59 2015 -0700

    Basic release tracking plugin API

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 1c831ce6d5..ab4ee29f77 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -536,6 +536,7 @@ SENTRY_FEATURES = {
     'organizations:create': True,
     'organizations:sso': False,
     'projects:quotas': True,
+    'projects:release-tracking': True,
     'teams:create': True,
 }
 
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 83c1713a78..fd8de41a0c 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -11,6 +11,7 @@ default_manager.add('organizations:create')
 default_manager.add('organizations:sso', OrganizationFeature)
 default_manager.add('teams:create', OrganizationFeature)
 default_manager.add('projects:quotas', ProjectFeature)
+default_manager.add('projects:release-tracking', ProjectFeature)
 
 # expose public api
 add = default_manager.add
diff --git a/src/sentry/plugins/__init__.py b/src/sentry/plugins/__init__.py
index 9dd44fd4d2..8ad232756c 100644
--- a/src/sentry/plugins/__init__.py
+++ b/src/sentry/plugins/__init__.py
@@ -8,3 +8,5 @@ sentry.plugins
 from __future__ import absolute_import
 
 from sentry.plugins.base import *  # NOQA
+from sentry.plugins.bases import *  # NOQA
+from sentry.plugins.interfaces import *  # NOQA
diff --git a/src/sentry/plugins/base/v2.py b/src/sentry/plugins/base/v2.py
index 814351c721..7e5d7e59db 100644
--- a/src/sentry/plugins/base/v2.py
+++ b/src/sentry/plugins/base/v2.py
@@ -141,7 +141,7 @@ class IPlugin2(local):
         Returns a string representing the configuration keyspace prefix for this plugin.
         """
         if not self.conf_key:
-            return self.get_conf_title().lower().replace(' ', '_')
+            self.conf_key = self.get_conf_title().lower().replace(' ', '_')
         return self.conf_key
 
     def get_conf_title(self):
@@ -308,6 +308,21 @@ class IPlugin2(local):
         """
         return []
 
+    def get_release_hook(self, **kwargs):
+        """
+        Return an implementation of ``ReleaseHook``.
+
+        >>> from sentry.plugins import ReleaseHook
+        >>>
+        >>> class MyReleaseHook(ReleaseHook):
+        >>>     def handle(self, request):
+        >>>         self.finish_release(version=request.POST['version'])
+
+        >>> def get_release_hook(self, **kwargs):
+        >>>     return MyReleaseHook
+        """
+        return []
+
 
 class Plugin2(IPlugin2):
     """
diff --git a/src/sentry/plugins/bases/__init__.py b/src/sentry/plugins/bases/__init__.py
index c3961685ab..daa11e5ff4 100644
--- a/src/sentry/plugins/bases/__init__.py
+++ b/src/sentry/plugins/bases/__init__.py
@@ -1 +1,6 @@
 from __future__ import absolute_import
+
+from .issue import IssuePlugin  # NOQA
+from .notify import NotificationPlugin  # NOQA
+from .releasetracking import ReleaseTrackingPlugin  # NOQA
+from .tag import TagPlugin  # NOQA
diff --git a/src/sentry/plugins/bases/releasetracking.py b/src/sentry/plugins/bases/releasetracking.py
new file mode 100644
index 0000000000..de6f1fa705
--- /dev/null
+++ b/src/sentry/plugins/bases/releasetracking.py
@@ -0,0 +1,8 @@
+from __future__ import absolute_import
+
+from sentry.plugins import Plugin2
+
+
+class ReleaseTrackingPlugin(Plugin2):
+    def get_release_doc_html(self, hook_url):
+        raise NotImplementedError
diff --git a/src/sentry/plugins/interfaces/__init__.py b/src/sentry/plugins/interfaces/__init__.py
new file mode 100644
index 0000000000..5f99e6fa31
--- /dev/null
+++ b/src/sentry/plugins/interfaces/__init__.py
@@ -0,0 +1,3 @@
+from __future__ import absolute_import
+
+from .releasehook import *  # NOQA
diff --git a/src/sentry/plugins/interfaces/releasehook.py b/src/sentry/plugins/interfaces/releasehook.py
new file mode 100644
index 0000000000..7f730b7cc5
--- /dev/null
+++ b/src/sentry/plugins/interfaces/releasehook.py
@@ -0,0 +1,38 @@
+"""
+sentry.plugins.base.structs
+~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import, print_function
+
+__all__ = ['ReleaseHook']
+
+from django.utils import timezone
+
+from sentry.models import Release
+
+
+class ReleaseHook(object):
+    def __init__(self, project):
+        self.project = project
+
+    def start_release(self, version):
+        Release.objects.create_or_update(
+            version=version,
+            project=self.project,
+        )
+
+    def finish_release(self, version):
+        Release.objects.create_or_update(
+            version=version,
+            project=self.project,
+            defaults={
+                'date_released': timezone.now(),
+            }
+        )
+
+    def handle(self, request):
+        raise NotImplementedError
diff --git a/src/sentry/static/sentry/less/sentry.less b/src/sentry/static/sentry/less/sentry.less
index ef9308e9c5..8660d607a0 100644
--- a/src/sentry/static/sentry/less/sentry.less
+++ b/src/sentry/static/sentry/less/sentry.less
@@ -3377,6 +3377,39 @@ pre {
   }
 }
 
+.integration-list {
+  .clearfix;
+
+  li {
+    display: inline-block;
+
+    button {
+      width: 150px;
+      text-align: center;
+      font-size: 12px;
+      color: darken(#e4e8ed, 30%);
+      letter-spacing: 0.1px;
+      font-weight: 600;
+      text-transform: uppercase;
+      border: 1px solid #eee;
+      background: inherit;
+      .border-radius(4px);
+      padding: 10px;
+      display: block;
+
+      &:hover {
+        border-color: #ccc;
+      }
+    }
+
+    .border-radius(4px);
+
+    &:nth-child(5n) {
+      margin-right: 0 !important;
+    }
+  }
+}
+
 .client-platform-list {
   list-style: none;
   margin-left: 0;
@@ -3519,6 +3552,10 @@ pre {
   }
 }
 
+fieldset {
+  margin-bottom: 20px;
+}
+
 .org-login {
   text-align: center;
 
diff --git a/src/sentry/templates/sentry/project-release-tracking.html b/src/sentry/templates/sentry/project-release-tracking.html
new file mode 100644
index 0000000000..b284c8222c
--- /dev/null
+++ b/src/sentry/templates/sentry/project-release-tracking.html
@@ -0,0 +1,65 @@
+{% extends "sentry/projects/manage.html" %}
+
+{% load i18n %}
+{% load sentry_helpers %}
+{% load sentry_plugins %}
+
+{% block title %}{% trans "Release Tracking" %} | {{ block.super }}{% endblock %}
+
+{% block inner %}
+  <div class="page-header">
+    <h2>{% trans "Release Tracking" %}</h2>
+  </div>
+  <p>Configure release tracking for this project to automatically record new releases of your application.</p>
+
+  {% if not enabled_plugins and not other_plugins %}
+    <div class="alert alert-error alert-block">
+      <p>There are no release tracking integrations available.</p>
+    </div>
+  {% else %}
+    <form method="POST">
+      {% csrf_token %}
+      <fieldset>
+        <legend>Token</legend>
+        <p>Your token is a unique secret which is used to generate deploy hook URLs. If a service becomes compromised, you should regenerate the token and re-configure any deploy hooks with the newly generated URL.</p>
+        <pre style="display:inline-block;margin-bottom:0" class="clippy">{{ token }}</pre>
+        <button type="submit" class="btn btn-small btn-danger" name="op" value="regenerate-token">Regenerate Token</button>
+      </fieldset>
+    </form>
+
+    {% for plugin, content in enabled_plugins %}
+      <form method="POST">
+        {% csrf_token %}
+        <input type="hidden" name="plugin" value="{{ plugin.slug }}" />
+        <fieldset>
+          <legend>
+            {{ plugin.get_title }}
+            {% if plugin.can_disable %}
+              <button type="submit" class="btn btn-small btn-default" name="op" value="disable">Disable</button>
+            {% endif %}
+          </legend>
+          {{ content }}
+        </fieldset>
+      </form>
+    {% endfor %}
+
+    {% if other_plugins %}
+      <fieldset>
+        <legend>Inactive Integrations</legend>
+
+        <ul class="integration-list unstyled">
+          {% for plugin in other_plugins %}
+            <li>
+              <form method="POST">
+                {% csrf_token %}
+                <input type="hidden" name="op" value="enable" />
+                <input type="hidden" name="plugin" value="{{ plugin.slug }}" />
+                <button type="submit">{{ plugin.get_title }}</button>
+              </form>
+            </li>
+          {% endfor %}
+        </ul>
+      </fieldset>
+    {% endif %}
+  {% endif %}
+{% endblock %}
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 650eb45f6a..0d9c61bad1 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -92,6 +92,11 @@
         <li{% if page == 'keys' %} class="active"{% endif %}>
             <a href="{% url 'sentry-manage-project-keys' project.organization.slug project.slug %}">{% trans "Client Keys" %}</a>
         </li>
+        {% feature projects:release-tracking project %}
+        <li{% if page == 'release-tracking' %} class="active"{% endif %}>
+            <a href="{% url 'sentry-project-release-tracking' project.organization.slug project.slug %}">{% trans "Release Tracking" %}</a>
+        </li>
+        {% endfeature %}
         <li class="nav-header">{% trans "Help" %}</li>
         <li>
             <a href="{% url 'sentry-help-platform-list' %}?pid={{ project.id }}">{% trans "Setup &amp; Installation" %}</a>
diff --git a/src/sentry/web/frontend/project_release_tracking.py b/src/sentry/web/frontend/project_release_tracking.py
new file mode 100644
index 0000000000..4ba2e3fbe2
--- /dev/null
+++ b/src/sentry/web/frontend/project_release_tracking.py
@@ -0,0 +1,105 @@
+from __future__ import absolute_import
+
+import hashlib
+import hmac
+
+from django.contrib import messages
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from django.utils.safestring import mark_safe
+from django.utils.translation import ugettext_lazy as _
+from uuid import uuid1
+
+from sentry.models import OrganizationMemberType, ProjectOption
+from sentry.plugins import plugins, ReleaseTrackingPlugin
+from sentry.web.frontend.base import ProjectView
+
+
+OK_TOKEN_REGENERATED = _("Your deploy token has been regenerated. You will need to update any pre-existing deploy hooks.")
+
+OK_PLUGIN_ENABLED = _("The {name} integration has been enabled.")
+
+OK_PLUGIN_DISABLED = _("The {name} integration has been disabled.")
+
+
+class ProjectReleaseTrackingView(ProjectView):
+    required_access = OrganizationMemberType.ADMIN
+
+    def _iter_plugins(self):
+        for plugin in plugins.all(version=2):
+            if not isinstance(plugin, ReleaseTrackingPlugin):
+                continue
+            yield plugin
+
+    def _handle_enable_plugin(self, request, project):
+        plugin = plugins.get(request.POST['plugin'])
+        plugin.set_option('enabled', True, project)
+        messages.add_message(
+            request, messages.SUCCESS,
+            OK_PLUGIN_ENABLED.format(name=plugin.get_title()),
+        )
+
+    def _handle_disable_plugin(self, request, project):
+        plugin = plugins.get(request.POST['plugin'])
+        plugin.set_option('enabled', False, project)
+        messages.add_message(
+            request, messages.SUCCESS,
+            OK_PLUGIN_DISABLED.format(name=plugin.get_title()),
+        )
+
+    def _regenerate_token(self, project):
+        token = uuid1().hex
+        ProjectOption.objects.set_value(project, 'sentry:release-token', token)
+        return token
+
+    def _get_signature(self, project_id, plugin_id, token):
+        return hmac.new(
+            key=str(token),
+            msg='{}-{}'.format(plugin_id, project_id),
+            digestmod=hashlib.sha256
+        ).hexdigest()
+
+    def handle(self, request, organization, team, project):
+        token = None
+
+        if request.method == 'POST':
+            op = request.POST.get('op')
+            if op == 'regenerate-token':
+                token = self._regenerate_token(project)
+                messages.add_message(
+                    request, messages.SUCCESS,
+                    OK_TOKEN_REGENERATED,
+                )
+            elif op == 'enable':
+                self._handle_enable_plugin(request, project)
+            elif op == 'disable':
+                self._handle_disable_plugin(request, project)
+            return HttpResponseRedirect(request.path)
+
+        if token is None:
+            token = ProjectOption.objects.get_value(project, 'sentry:release-token')
+        if token is None:
+            token = self._regenerate_token(project)
+
+        enabled_plugins = []
+        other_plugins = []
+        for plugin in self._iter_plugins():
+            if plugin.is_enabled(project):
+                hook_url = reverse('sentry-release-hook', kwargs={
+                    'plugin_id': plugin.slug,
+                    'project_id': project.id,
+                    'signature': self._get_signature(project.id, plugin.slug, token),
+                })
+                content = plugin.get_release_doc_html(hook_url=hook_url)
+                enabled_plugins.append((plugin, mark_safe(content)))
+            else:
+                other_plugins.append(plugin)
+
+        context = {
+            'page': 'release-tracking',
+            'token': token,
+            'enabled_plugins': enabled_plugins,
+            'other_plugins': other_plugins,
+        }
+
+        return self.respond('sentry/project-release-tracking.html', context)
diff --git a/src/sentry/web/frontend/release_webhook.py b/src/sentry/web/frontend/release_webhook.py
new file mode 100644
index 0000000000..38cd02ea08
--- /dev/null
+++ b/src/sentry/web/frontend/release_webhook.py
@@ -0,0 +1,38 @@
+from __future__ import absolute_import, print_function
+
+import hashlib
+import hmac
+import logging
+
+from django.http import HttpResponse
+from django.views.generic import View
+from django.utils.crypto import constant_time_compare
+
+from sentry.models import Project
+from sentry.plugins import plugins
+
+
+class ReleaseWebhookView(View):
+    auth_required = False
+
+    def verify(self, project_id, plugin_id, token, signature):
+        return constant_time_compare(signature, hmac.new(
+            key=str(token),
+            msg='{}-{}'.format(plugin_id, project_id),
+            digestmod=hashlib.sha256
+        ).hexdigest())
+
+    def post(self, request, project_id, plugin_id, signature):
+        project = Project.objects.get_from_cache(id=project_id)
+
+        plugin = plugins.get(plugin_id)
+        token = plugin.get_option(project, 'token')
+
+        if not self.verify(project_id, plugin_id, token, signature):
+            logging.info('Unable to verify signature for release hook')
+            return HttpResponse(status=403)
+
+        cls = plugin.get_release_hook()
+        hook = cls(project)
+        hook.handle(request)
+        return HttpResponse(status=204)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 5fd37f659a..04064553b3 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -58,6 +58,8 @@ from sentry.web.frontend.create_organization_member import CreateOrganizationMem
 from sentry.web.frontend.create_project import CreateProjectView
 from sentry.web.frontend.create_team import CreateTeamView
 from sentry.web.frontend.project_settings import ProjectSettingsView
+from sentry.web.frontend.project_release_tracking import ProjectReleaseTrackingView
+from sentry.web.frontend.release_webhook import ReleaseWebhookView
 from sentry.web.frontend.remove_organization import RemoveOrganizationView
 from sentry.web.frontend.remove_project import RemoveProjectView
 from sentry.web.frontend.remove_team import RemoveTeamView
@@ -108,6 +110,8 @@ urlpatterns += patterns('',
     url(r'^api/0/', include('sentry.api.urls')),
     url(r'^api/hooks/mailgun/inbound/', MailgunInboundWebhookView.as_view(),
         name='sentry-mailgun-inbound-hook'),
+    url(r'^api/hooks/release/(?P<plugin_id>[^/]+)/(?P<project_id>[^/]+)/(?P<signature>[^/]+)/', ReleaseWebhookView.as_view(),
+        name='sentry-release-hook'),
 
     # Auth
     url(r'^auth/link/(?P<organization_slug>[^/]+)/$', AuthLinkIdentityView.as_view(),
@@ -237,6 +241,9 @@ urlpatterns += patterns('',
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/$',
         ProjectSettingsView.as_view(),
         name='sentry-manage-project'),
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/release-tracking/$',
+        ProjectReleaseTrackingView.as_view(),
+        name='sentry-project-release-tracking'),
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/$',
         sentry.web.frontend.projects.keys.manage_project_keys,
         name='sentry-manage-project-keys'),
