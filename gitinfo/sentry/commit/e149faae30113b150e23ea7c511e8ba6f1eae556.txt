commit e149faae30113b150e23ea7c511e8ba6f1eae556
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jun 8 15:01:33 2015 -0700

    Move group barcharts into standalone component/listener

diff --git a/src/sentry/static/sentry/app/views/stream/group.jsx b/src/sentry/static/sentry/app/views/stream/group.jsx
index 6f0ebfaab1..100453e2a9 100644
--- a/src/sentry/static/sentry/app/views/stream/group.jsx
+++ b/src/sentry/static/sentry/app/views/stream/group.jsx
@@ -5,8 +5,8 @@ var Reflux = require("reflux");
 var Router = require("react-router");
 
 var AssigneeSelector = require("../../components/assigneeSelector");
-var BarChart = require("../../components/barChart");
 var Count = require("../../components/count");
+var GroupChart = require("./groupChart");
 var GroupStore = require("../../stores/groupStore");
 var SelectedGroupStore = require("../../stores/selectedGroupStore");
 var TimeSince = require("../../components/timeSince");
@@ -116,19 +116,6 @@ var StreamGroup = React.createClass({
     var params = router.getCurrentParams();
     var data = this.state.data;
     var userCount = 0;
-    var points;
-
-    switch(this.props.statsPeriod) {
-      case '24h':
-        points = data.stats['24h'].slice(-24);
-        break;
-      default:
-        points = data.stats[this.props.statsPeriod];
-    }
-
-    var chartData = points.map((point) => {
-      return {x: point[0], y: point[1]};
-    });
 
     if (data.tags["sentry:user"] !== undefined) {
       userCount = data.tags["sentry:user"].count;
@@ -176,7 +163,7 @@ var StreamGroup = React.createClass({
           <AssigneeSelector id={data.id} />
         </div>
         <div className="col-md-2 hidden-sm hidden-xs event-graph align-right">
-          <BarChart points={chartData} className="sparkline" />
+          <GroupChart id={data.id} statsPeriod={this.props.statsPeriod} />
         </div>
         <div className="col-md-1 hidden-xs event-occurrences align-right">
           <Count value={data.count} />
diff --git a/src/sentry/static/sentry/app/views/stream/groupChart.jsx b/src/sentry/static/sentry/app/views/stream/groupChart.jsx
new file mode 100644
index 0000000000..82ed47e21b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/stream/groupChart.jsx
@@ -0,0 +1,72 @@
+/*** @jsx React.DOM */
+var React = require("react");
+var Reflux = require("reflux");
+
+var BarChart = require("../../components/barChart");
+var GroupStore = require("../../stores/groupStore");
+var {valueIsEqual} = require("../../utils");
+
+var GroupChart = React.createClass({
+  mixins: [
+    Reflux.listenTo(GroupStore, "onGroupChange")
+  ],
+
+  propTypes: {
+    id: React.PropTypes.string.isRequired,
+    statsPeriod: React.PropTypes.string.isRequired,
+  },
+
+  getInitialState() {
+    var data = GroupStore.get(this.props.id);
+    return {
+      stats: data ? data.stats[this.props.statsPeriod] : null
+    };
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (!valueIsEqual(nextProps, this.props)) {
+      var data = GroupStore.get(this.props.id);
+      this.setState({
+        stats: data.stats[this.props.statsPeriod]
+      });
+    }
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    if (!valueIsEqual(this.props, nextProps, true)) {
+      return true;
+    }
+    if (!valueIsEqual(this.state.stats, nextState.stats, true)) {
+      return true;
+    }
+    return false;
+  },
+
+  onGroupChange(itemIds) {
+    if (!itemIds.has(this.props.id)) {
+      return;
+    }
+
+    var id = this.props.id;
+    var data = GroupStore.get(id);
+
+    this.setState({
+      stats: data.stats[this.props.statsPeriod],
+    });
+  },
+
+  render() {
+    if (!this.state.stats)
+      return <div />;
+
+    var chartData = this.state.stats.map((point) => {
+      return {x: point[0], y: point[1]};
+    });
+
+    return (
+      <BarChart points={chartData} className="sparkline" />
+    );
+  }
+});
+
+module.exports = GroupChart;
