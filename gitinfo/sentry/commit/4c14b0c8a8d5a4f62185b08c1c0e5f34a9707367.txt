commit 4c14b0c8a8d5a4f62185b08c1c0e5f34a9707367
Author: Ted Kaemming <ted@kaemming.com>
Date:   Fri Oct 2 11:53:59 2015 -0700

    Add `result` tag to `jobs.duration` metric.

diff --git a/src/sentry/metrics/logging.py b/src/sentry/metrics/logging.py
index 869f5c282f..e9e888a34f 100644
--- a/src/sentry/metrics/logging.py
+++ b/src/sentry/metrics/logging.py
@@ -12,11 +12,11 @@ class LoggingBackend(MetricsBackend):
     def incr(self, key, instance=None, tags=None, amount=1, sample_rate=1):
         logger.debug('%r: %+g', key, amount, extra={
             'instance': instance,
-            'tags': tags or [],
+            'tags': tags or {},
         })
 
     def timing(self, key, value, instance=None, tags=None, sample_rate=1):
         logger.debug('%r: %g ms', key, value, extra={
             'instance': instance,
-            'tags': tags or [],
+            'tags': tags or {},
         })
diff --git a/src/sentry/tasks/base.py b/src/sentry/tasks/base.py
index 7a0dd179f7..dce1c10222 100644
--- a/src/sentry/tasks/base.py
+++ b/src/sentry/tasks/base.py
@@ -23,8 +23,14 @@ def instrumented_task(name, stat_suffix=None, **kwargs):
                 instance = '{}.{}'.format(name, stat_suffix(*args, **kwargs))
             else:
                 instance = name
-            with metrics.timer(key, instance=instance):
-                result = func(*args, **kwargs)
+            with metrics.timer(key, instance=instance) as tags:
+                try:
+                    result = func(*args, **kwargs)
+                except Exception:
+                    tags['result'] = 'failure'
+                    raise
+                else:
+                    tags['result'] = 'success'
             return result
         return app.task(name=name, **kwargs)(_wrapped)
     return wrapped
diff --git a/src/sentry/utils/metrics.py b/src/sentry/utils/metrics.py
index 5a3cf090aa..def52d699b 100644
--- a/src/sentry/utils/metrics.py
+++ b/src/sentry/utils/metrics.py
@@ -66,6 +66,11 @@ def timing(key, value, instance=None, tags=None):
 
 @contextmanager
 def timer(key, instance=None, tags=None):
+    if tags is None:
+        tags = {}
+
     start = time()
-    yield
-    timing(key, time() - start, instance, tags)
+    try:
+        yield tags
+    finally:
+        timing(key, time() - start, instance, tags)
