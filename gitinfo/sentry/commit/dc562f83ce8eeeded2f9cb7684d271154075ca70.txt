commit dc562f83ce8eeeded2f9cb7684d271154075ca70
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Wed Mar 18 15:31:47 2020 -0400

    feat(perf-view): Transaction Summary page (#17582)
    
    Co-authored-by: Mark Story <mark@sentry.io>

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 2b26ceba9d..c4688a0c62 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1486,6 +1486,24 @@ function routes() {
               component={errorHandler(LazyLoad)}
             />
           </Route>
+          <Route
+            path="/organizations/:orgId/performance/summary/"
+            componentPromise={() =>
+              import(
+                /* webpackChunkName: "PerformanceContainer" */ 'app/views/performance'
+              )
+            }
+            component={errorHandler(LazyLoad)}
+          >
+            <IndexRoute
+              componentPromise={() =>
+                import(
+                  /* webpackChunkName: "PerformanceTransactionSummary" */ 'app/views/performance/transaction_summary'
+                )
+              }
+              component={errorHandler(LazyLoad)}
+            />
+          </Route>
           <Route
             path="/organizations/:orgId/events/"
             componentPromise={() =>
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index b4db2ccb47..fc2af7aecc 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -234,6 +234,7 @@ type SentryEventBase = {
   previousEventID?: string;
   nextEventID?: string;
   projectSlug: string;
+  projectID: string;
 
   tags: EventTag[];
 
diff --git a/src/sentry/static/sentry/app/utils/discover/eventsv2/index.tsx b/src/sentry/static/sentry/app/utils/discover/eventsv2/index.tsx
new file mode 100644
index 0000000000..2a0feb8142
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/discover/eventsv2/index.tsx
@@ -0,0 +1,124 @@
+import React from 'react';
+import {Location} from 'history';
+
+import {Organization} from 'app/types';
+import {Client} from 'app/api';
+import withApi from 'app/utils/withApi';
+import EventView, {isAPIPayloadSimilar} from 'app/views/eventsV2/eventView';
+import {TableData} from 'app/views/eventsV2/table/types';
+
+type ChildrenProps = {
+  isLoading: boolean;
+  error: null | string;
+  tableData: TableData | null | undefined;
+  pageLinks: null | string;
+};
+
+type Props = {
+  api: Client;
+  location: Location;
+  eventView: EventView;
+  organization: Organization;
+  extraQuery?: {[key: string]: any};
+
+  children: (props: ChildrenProps) => React.ReactNode;
+};
+
+type State = {
+  tableFetchID: symbol | undefined;
+} & ChildrenProps;
+
+class EventsV2 extends React.Component<Props, State> {
+  state: State = {
+    isLoading: true,
+    tableFetchID: undefined,
+    error: null,
+
+    tableData: null,
+    pageLinks: null,
+  };
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  componentDidUpdate(prevProps: Props) {
+    // Reload data if we aren't already loading, or if we've moved
+    // from an invalid view state to a valid one.
+    if (
+      (!this.state.isLoading && this.shouldRefetchData(prevProps)) ||
+      (prevProps.eventView.isValid() === false && this.props.eventView.isValid())
+    ) {
+      this.fetchData();
+    }
+  }
+
+  shouldRefetchData = (prevProps: Props): boolean => {
+    const thisAPIPayload = this.props.eventView.getEventsAPIPayload(this.props.location);
+    const otherAPIPayload = prevProps.eventView.getEventsAPIPayload(prevProps.location);
+
+    return !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload);
+  };
+
+  fetchData = () => {
+    const {eventView, organization, location, extraQuery} = this.props;
+
+    if (!eventView.isValid()) {
+      return;
+    }
+
+    const url = `/organizations/${organization.slug}/eventsv2/`;
+    const tableFetchID = Symbol('tableFetchID');
+    const apiPayload = eventView.getEventsAPIPayload(location);
+
+    this.setState({isLoading: true, tableFetchID});
+
+    this.props.api
+      .requestPromise(url, {
+        method: 'GET',
+        includeAllArgs: true,
+        query: {
+          // marking apiPayload as any so as to not cause typescript errors
+          ...(apiPayload as any),
+          ...extraQuery,
+        },
+      })
+      .then(([data, _, jqXHR]) => {
+        if (this.state.tableFetchID !== tableFetchID) {
+          // invariant: a different request was initiated after this request
+          return;
+        }
+
+        this.setState(prevState => ({
+          isLoading: false,
+          tableFetchID: undefined,
+          error: null,
+          pageLinks: jqXHR ? jqXHR.getResponseHeader('Link') : prevState.pageLinks,
+          tableData: data,
+        }));
+      })
+      .catch(err => {
+        this.setState({
+          isLoading: false,
+          tableFetchID: undefined,
+          error: err.responseJSON.detail,
+          tableData: null,
+        });
+      });
+  };
+
+  render() {
+    const {isLoading, error, tableData, pageLinks} = this.state;
+
+    const childrenProps = {
+      isLoading,
+      error,
+      tableData,
+      pageLinks,
+    };
+
+    return this.props.children(childrenProps);
+  }
+}
+
+export default withApi(EventsV2);
diff --git a/src/sentry/static/sentry/app/views/performance/data.tsx b/src/sentry/static/sentry/app/views/performance/data.tsx
index 1c4c1fb4c9..bc73fb203f 100644
--- a/src/sentry/static/sentry/app/views/performance/data.tsx
+++ b/src/sentry/static/sentry/app/views/performance/data.tsx
@@ -2,6 +2,7 @@ import {Location} from 'history';
 
 import {t} from 'app/locale';
 import {NewQuery} from 'app/types';
+import EventView from 'app/views/eventsV2/eventView';
 
 export const DEFAULT_STATS_PERIOD = '24h';
 
@@ -48,3 +49,7 @@ export function generatePerformanceQuery(location: Location): Readonly<NewQuery>
 
   return Object.assign({}, PERFORMANCE_EVENT_VIEW, extra);
 }
+
+export function generatePerformanceEventView(location: Location): EventView {
+  return EventView.fromNewQueryWithLocation(generatePerformanceQuery(location), location);
+}
diff --git a/src/sentry/static/sentry/app/views/performance/landing.tsx b/src/sentry/static/sentry/app/views/performance/landing.tsx
index 6e5207e80d..13790b7155 100644
--- a/src/sentry/static/sentry/app/views/performance/landing.tsx
+++ b/src/sentry/static/sentry/app/views/performance/landing.tsx
@@ -15,7 +15,7 @@ import {getUtcToLocalDateObject} from 'app/utils/dates';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import {StyledPageHeader} from 'app/views/eventsV2/landing';
 
-import {generatePerformanceQuery, DEFAULT_STATS_PERIOD} from './data';
+import {generatePerformanceEventView, DEFAULT_STATS_PERIOD} from './data';
 import Table from './table';
 import Charts from './charts/index';
 
@@ -30,10 +30,6 @@ type State = {
   error: string | undefined;
 };
 
-function generatePerformanceEventView(location: Location): EventView {
-  return EventView.fromNewQueryWithLocation(generatePerformanceQuery(location), location);
-}
-
 class PerformanceLanding extends React.Component<Props, State> {
   static getDerivedStateFromProps(nextProps: Props, prevState: State): State {
     return {...prevState, eventView: generatePerformanceEventView(nextProps.location)};
diff --git a/src/sentry/static/sentry/app/views/performance/styles.tsx b/src/sentry/static/sentry/app/views/performance/styles.tsx
new file mode 100644
index 0000000000..a6a42784ff
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/styles.tsx
@@ -0,0 +1,59 @@
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
+
+export const TableGrid = styled('table')`
+  margin: 0;
+  width: 100%;
+`;
+
+export const GridHead = styled('thead')`
+  color: ${p => p.theme.gray3};
+  text-transform: uppercase;
+  font-size: 12px;
+  line-height: 1;
+`;
+
+export const GridHeadCell = styled('th')`
+  padding: ${space(2)};
+  background: ${p => p.theme.offWhite};
+  ${overflowEllipsis};
+
+  &:first-child {
+    border-top-left-radius: ${p => p.theme.borderRadius};
+  }
+
+  &:last-child {
+    border-top-right-radius: ${p => p.theme.borderRadius};
+  }
+`;
+
+export const GridBody = styled('tbody')`
+  font-size: 14px;
+`;
+
+export const GridBodyCell = styled('td')`
+  border-top: 1px solid ${p => p.theme.borderDark};
+  padding: ${space(1)} ${space(2)};
+  ${overflowEllipsis};
+`;
+
+export const GridBodyCellNumber = styled(GridBodyCell)`
+  text-align: right;
+`;
+
+export const GridRow = styled('tr')<{numOfColumns: number}>`
+  display: grid;
+  grid-template-columns: ${props => {
+    const {numOfColumns} = props;
+
+    const numOfExtraColumns = numOfColumns - 2;
+
+    if (numOfExtraColumns > 0) {
+      return `auto 120px repeat(${numOfExtraColumns}, minmax(70px, 120px))`;
+    }
+
+    return 'auto 120px';
+  }};
+`;
diff --git a/src/sentry/static/sentry/app/views/performance/table.tsx b/src/sentry/static/sentry/app/views/performance/table.tsx
index 96e6e2efd4..4fb312183c 100644
--- a/src/sentry/static/sentry/app/views/performance/table.tsx
+++ b/src/sentry/static/sentry/app/views/performance/table.tsx
@@ -1,126 +1,66 @@
 import React from 'react';
 import {Location, LocationDescriptorObject} from 'history';
-import styled from '@emotion/styled';
 import omit from 'lodash/omit';
 
 import {t} from 'app/locale';
-import {Organization} from 'app/types';
+import {Organization, Project} from 'app/types';
 import {assert} from 'app/types/utils';
-import {Client} from 'app/api';
-import withApi from 'app/utils/withApi';
-import space from 'app/styles/space';
 import {Panel} from 'app/components/panels';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import Pagination from 'app/components/pagination';
-import overflowEllipsis from 'app/styles/overflowEllipsis';
 import Link from 'app/components/links/link';
-import EventView, {isAPIPayloadSimilar} from 'app/views/eventsV2/eventView';
+import EventView from 'app/views/eventsV2/eventView';
 import SortLink from 'app/views/eventsV2/sortLink';
-import {TableData, TableDataRow, TableColumn} from 'app/views/eventsV2/table/types';
+import {TableDataRow, TableColumn} from 'app/views/eventsV2/table/types';
 import HeaderCell from 'app/views/eventsV2/table/headerCell';
 import {getFieldRenderer, MetaType, getAggregateAlias} from 'app/views/eventsV2/utils';
+import {EventData} from 'app/views/eventsV2/data';
+import withProjects from 'app/utils/withProjects';
+import EventsV2 from 'app/utils/discover/eventsv2';
+
+import {transactionSummaryRouteWithEventView} from './transaction_summary/utils';
 import {
-  generateEventSlug,
-  eventDetailsRouteWithEventView,
-} from 'app/views/eventsV2/eventDetails/utils';
+  TableGrid,
+  GridHead,
+  GridRow,
+  GridBody,
+  GridHeadCell,
+  GridBodyCell,
+  GridBodyCellNumber,
+} from './styles';
+
+export function getProjectID(
+  eventData: EventData,
+  projects: Project[]
+): string | undefined {
+  const projectSlug = (eventData?.project as string) || undefined;
+
+  if (typeof projectSlug === undefined) {
+    return undefined;
+  }
+
+  const project = projects.find(currentProject => currentProject.slug === projectSlug);
+
+  if (!project) {
+    return undefined;
+  }
+
+  return project.id;
+}
 
 type Props = {
-  api: Client;
   eventView: EventView;
   organization: Organization;
   location: Location;
   setError: (msg: string | undefined) => void;
-};
 
-type State = {
-  isLoading: boolean;
-  tableFetchID: symbol | undefined;
-  error: null | string;
-  pageLinks: null | string;
-  tableData: TableData | null | undefined;
+  projects: Project[];
+  loadingProjects: boolean;
 };
 
-class Table extends React.Component<Props, State> {
-  state: State = {
-    isLoading: true,
-    tableFetchID: undefined,
-    error: null,
-
-    pageLinks: null,
-    tableData: null,
-  };
-
-  componentDidMount() {
-    this.fetchData();
-  }
-
-  componentDidUpdate(prevProps: Props) {
-    // Reload data if we aren't already loading, or if we've moved
-    // from an invalid view state to a valid one.
-    if (
-      (!this.state.isLoading && this.shouldRefetchData(prevProps)) ||
-      (prevProps.eventView.isValid() === false && this.props.eventView.isValid())
-    ) {
-      this.fetchData();
-    }
-  }
-
-  shouldRefetchData = (prevProps: Props): boolean => {
-    const thisAPIPayload = this.props.eventView.getEventsAPIPayload(this.props.location);
-    const otherAPIPayload = prevProps.eventView.getEventsAPIPayload(prevProps.location);
-
-    return !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload);
-  };
-
-  fetchData = () => {
-    const {eventView, organization, location, setError} = this.props;
-
-    if (!eventView.isValid()) {
-      return;
-    }
-
-    const url = `/organizations/${organization.slug}/eventsv2/`;
-    const tableFetchID = Symbol('tableFetchID');
-    const apiPayload = eventView.getEventsAPIPayload(location);
-
-    this.setState({isLoading: true, tableFetchID});
-
-    this.props.api
-      .requestPromise(url, {
-        method: 'GET',
-        includeAllArgs: true,
-        query: apiPayload,
-      })
-      .then(([data, _, jqXHR]) => {
-        if (this.state.tableFetchID !== tableFetchID) {
-          // invariant: a different request was initiated after this request
-          return;
-        }
-
-        this.setState(prevState => ({
-          isLoading: false,
-          tableFetchID: undefined,
-          error: null,
-          pageLinks: jqXHR ? jqXHR.getResponseHeader('Link') : prevState.pageLinks,
-          tableData: data,
-        }));
-      })
-      .catch(err => {
-        this.setState({
-          isLoading: false,
-          tableFetchID: undefined,
-          error: err.responseJSON.detail,
-          pageLinks: null,
-          tableData: null,
-        });
-        setError(err.responseJSON.detail);
-      });
-  };
-
-  renderResults = () => {
-    const {isLoading, tableData} = this.state;
-
+class Table extends React.Component<Props> {
+  renderResults = ({isLoading, tableData}) => {
     if (isLoading) {
       return (
         <tr>
@@ -155,7 +95,9 @@ class Table extends React.Component<Props, State> {
 
       return (
         <React.Fragment key={index}>
-          <GridRow>{this.renderRowItem(row, columnOrder, tableData.meta)}</GridRow>
+          <GridRow numOfColumns={columnOrder.length}>
+            {this.renderRowItem(row, columnOrder, tableData.meta)}
+          </GridRow>
         </React.Fragment>
       );
     });
@@ -166,7 +108,7 @@ class Table extends React.Component<Props, State> {
     columnOrder: TableColumn<React.ReactText>[],
     tableMeta: MetaType
   ) => {
-    const {organization, location, eventView} = this.props;
+    const {organization, location, projects} = this.props;
 
     return columnOrder.map((column, index) => {
       const field = String(column.key);
@@ -182,12 +124,12 @@ class Table extends React.Component<Props, State> {
         // the first column of the row should link to the transaction details view
         // on Discover
 
-        const eventSlug = generateEventSlug(row);
+        const projectID = getProjectID(row, projects);
 
-        const target = eventDetailsRouteWithEventView({
+        const target = transactionSummaryRouteWithEventView({
           orgSlug: organization.slug,
-          eventSlug,
-          eventView,
+          transaction: String(row.transaction) || '',
+          projectID,
         });
 
         rendered = <Link to={target}>{rendered}</Link>;
@@ -202,9 +144,8 @@ class Table extends React.Component<Props, State> {
     });
   };
 
-  renderHeader = () => {
+  renderHeader = ({tableData}) => {
     const {location, eventView} = this.props;
-    const {tableData} = this.state;
 
     const tableDataMeta = tableData && tableData.meta ? tableData.meta : undefined;
 
@@ -246,65 +187,29 @@ class Table extends React.Component<Props, State> {
   };
 
   render() {
+    const {eventView, organization, location} = this.props;
+    const columnOrder = eventView.getColumns();
+
     return (
-      <div>
-        <Panel>
-          <TableGrid>
-            <GridHead>
-              <GridRow>{this.renderHeader()}</GridRow>
-            </GridHead>
-            <GridBody>{this.renderResults()}</GridBody>
-          </TableGrid>
-        </Panel>
-        <Pagination pageLinks={this.state.pageLinks} />
-      </div>
+      <EventsV2 eventView={eventView} organization={organization} location={location}>
+        {({pageLinks, isLoading, tableData}) => (
+          <div>
+            <Panel>
+              <TableGrid>
+                <GridHead>
+                  <GridRow numOfColumns={columnOrder.length}>
+                    {this.renderHeader({tableData})}
+                  </GridRow>
+                </GridHead>
+                <GridBody>{this.renderResults({isLoading, tableData})}</GridBody>
+              </TableGrid>
+            </Panel>
+            <Pagination pageLinks={pageLinks} />
+          </div>
+        )}
+      </EventsV2>
     );
   }
 }
 
-const TableGrid = styled('table')`
-  margin: 0;
-  width: 100%;
-`;
-
-const GridHead = styled('thead')`
-  color: ${p => p.theme.gray3};
-  text-transform: uppercase;
-  font-size: 12px;
-  line-height: 1;
-`;
-
-const GridHeadCell = styled('th')`
-  padding: ${space(2)};
-  background: ${p => p.theme.offWhite};
-  ${overflowEllipsis};
-
-  &:first-child {
-    border-top-left-radius: ${p => p.theme.borderRadius};
-  }
-
-  &:last-child {
-    border-top-right-radius: ${p => p.theme.borderRadius};
-  }
-`;
-
-const GridBody = styled('tbody')`
-  font-size: 14px;
-`;
-
-const GridBodyCell = styled('td')`
-  border-top: 1px solid ${p => p.theme.borderDark};
-  padding: ${space(1)} ${space(2)};
-  ${overflowEllipsis};
-`;
-
-const GridBodyCellNumber = styled(GridBodyCell)`
-  text-align: right;
-`;
-
-const GridRow = styled('tr')`
-  display: grid;
-  grid-template-columns: auto 120px repeat(6, minmax(70px, 120px));
-`;
-
-export default withApi(Table);
+export default withProjects(Table);
diff --git a/src/sentry/static/sentry/app/views/performance/transaction_summary/breadcrumb.tsx b/src/sentry/static/sentry/app/views/performance/transaction_summary/breadcrumb.tsx
new file mode 100644
index 0000000000..72e859c0a5
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/transaction_summary/breadcrumb.tsx
@@ -0,0 +1,96 @@
+import React from 'react';
+import {Location} from 'history';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import {Organization} from 'app/types';
+import Link from 'app/components/links/link';
+import InlineSvg from 'app/components/inlineSvg';
+import space from 'app/styles/space';
+import EventView from 'app/views/eventsV2/eventView';
+
+import {getPerformanceLandingUrl} from '../utils';
+import {transactionSummaryRouteWithEventView} from './utils';
+
+type Props = {
+  eventView: EventView;
+  organization: Organization;
+  location: Location;
+  transactionName: string;
+};
+
+class Breadcrumb extends React.Component<Props> {
+  getCrumbs(): React.ReactNode {
+    const {eventView, organization, location, transactionName} = this.props;
+    const crumbs: React.ReactNode[] = [];
+
+    const performanceTarget = {
+      pathname: getPerformanceLandingUrl(organization),
+      query: {
+        ...location.query,
+        ...eventView.generateBlankQueryStringObject(),
+        ...eventView.getGlobalSelection(),
+        // clear out the transaction name
+        transaction: undefined,
+      },
+    };
+
+    crumbs.push(
+      <BreadcrumbItem to={performanceTarget} key="performance-landing">
+        {t('Performance')}
+      </BreadcrumbItem>
+    );
+
+    const summaryTarget = transactionSummaryRouteWithEventView({
+      orgSlug: organization.slug,
+      transaction: transactionName,
+      projectID: eventView.project.map(id => String(id)),
+    });
+
+    crumbs.push(
+      <span key="breadcrumb-sep">
+        <StyledIcon src="icon-chevron-right" />
+      </span>
+    );
+
+    crumbs.push(
+      <BreadcrumbItem to={summaryTarget} key="summary-link">
+        {t('Transaction Summary')}
+      </BreadcrumbItem>
+    );
+
+    return crumbs;
+  }
+
+  render() {
+    return <BreadcrumbList>{this.getCrumbs()}</BreadcrumbList>;
+  }
+}
+
+const BreadcrumbList = styled('span')`
+  display: flex;
+  align-items: center;
+  height: 40px;
+`;
+
+const BreadcrumbItem = styled(Link)`
+  color: ${p => p.theme.gray2};
+
+  &:nth-last-child(2) {
+    color: ${p => p.theme.gray4};
+  }
+
+  &:hover,
+  &:active {
+    color: ${p => p.theme.gray3};
+  }
+`;
+
+const StyledIcon = styled(InlineSvg)`
+  color: inherit;
+  height: 12px;
+  width: 12px;
+  margin: 0 ${space(1)} ${space(0.5)} ${space(1)};
+`;
+
+export default Breadcrumb;
diff --git a/src/sentry/static/sentry/app/views/performance/transaction_summary/content.tsx b/src/sentry/static/sentry/app/views/performance/transaction_summary/content.tsx
new file mode 100644
index 0000000000..3e720a3a21
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/transaction_summary/content.tsx
@@ -0,0 +1,104 @@
+import React from 'react';
+import {Location} from 'history';
+import styled from '@emotion/styled';
+
+import {Organization} from 'app/types';
+import space from 'app/styles/space';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
+import EventView from 'app/views/eventsV2/eventView';
+import {ContentBox, HeaderBox} from 'app/views/eventsV2/styles';
+import Tags from 'app/views/eventsV2/tags';
+import EventsV2 from 'app/utils/discover/eventsv2';
+
+import SummaryContentTable from './table';
+import Breadcrumb from './breadcrumb';
+import UserStats from './user_stats';
+
+const TOP_SLOWEST_TRANSACTIONS = 5;
+
+type Props = {
+  location: Location;
+  eventView: EventView;
+  transactionName: string;
+  organization: Organization;
+};
+
+class SummaryContent extends React.Component<Props> {
+  render() {
+    const {transactionName, location, eventView, organization} = this.props;
+
+    return (
+      <React.Fragment>
+        <HeaderBox>
+          <div>
+            <Breadcrumb
+              organization={organization}
+              location={location}
+              eventView={eventView}
+              transactionName={transactionName}
+            />
+          </div>
+          <TransactionName transactionName={transactionName} />
+        </HeaderBox>
+        <ContentBox>
+          <EventsV2
+            location={location}
+            eventView={eventView}
+            organization={organization}
+            extraQuery={{
+              per_page: TOP_SLOWEST_TRANSACTIONS,
+            }}
+          >
+            {({isLoading, tableData}) => (
+              <SummaryContentTable
+                organization={organization}
+                location={location}
+                eventView={eventView}
+                tableData={tableData}
+                isLoading={isLoading}
+              />
+            )}
+          </EventsV2>
+          <Side>
+            <UserStats
+              organization={organization}
+              location={location}
+              eventView={eventView}
+            />
+            <Tags
+              totalValues={null}
+              eventView={eventView}
+              organization={organization}
+              location={location}
+            />
+          </Side>
+        </ContentBox>
+      </React.Fragment>
+    );
+  }
+}
+
+const TransactionName = (props: {transactionName: string}) => (
+  <StyledTitleHeader>
+    <StyledTitle>{props.transactionName}</StyledTitle>
+  </StyledTitleHeader>
+);
+
+const StyledTitleHeader = styled('div')`
+  font-size: ${p => p.theme.headerFontSize};
+  color: ${p => p.theme.gray2};
+  grid-column: 1/2;
+  align-self: center;
+  ${overflowEllipsis};
+`;
+
+const StyledTitle = styled('span')`
+  color: ${p => p.theme.gray4};
+  margin-right: ${space(1)};
+`;
+
+const Side = styled('div')`
+  grid-column: 2/3;
+`;
+
+export default SummaryContent;
diff --git a/src/sentry/static/sentry/app/views/performance/transaction_summary/index.tsx b/src/sentry/static/sentry/app/views/performance/transaction_summary/index.tsx
new file mode 100644
index 0000000000..d08ed6f073
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/transaction_summary/index.tsx
@@ -0,0 +1,164 @@
+import React from 'react';
+import {Params} from 'react-router/lib/Router';
+import * as ReactRouter from 'react-router';
+import {Location} from 'history';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import {Organization, Project} from 'app/types';
+import withOrganization from 'app/utils/withOrganization';
+import withProjects from 'app/utils/withProjects';
+import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
+import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
+import {PageContent} from 'app/styles/organization';
+import EventView from 'app/views/eventsV2/eventView';
+import {decodeScalar} from 'app/views/eventsV2/utils';
+import {stringifyQueryObject} from 'app/utils/tokenizeSearch';
+import NoProjectMessage from 'app/components/noProjectMessage';
+
+import {generatePerformanceEventView} from '../data';
+import SummaryContent from './content';
+
+type Props = {
+  location: Location;
+  params: Params;
+  organization: Organization;
+  projects: Project[];
+  loadingProjects: boolean;
+};
+
+type State = {
+  eventView: EventView;
+};
+
+class TransactionSummary extends React.Component<Props, State> {
+  state: State = {
+    eventView: generateSummaryEventView(
+      this.props.location,
+      getTransactionName(this.props)
+    ),
+  };
+
+  static getDerivedStateFromProps(nextProps: Props, prevState: State): State {
+    return {
+      ...prevState,
+      eventView: generateSummaryEventView(
+        nextProps.location,
+        getTransactionName(nextProps)
+      ),
+    };
+  }
+
+  getDocumentTitle(): string {
+    const name = getTransactionName(this.props);
+
+    const hasTransactionName = typeof name === 'string' && String(name).trim().length > 0;
+
+    if (hasTransactionName) {
+      return [String(name).trim(), t('Performance')].join(' - ');
+    }
+
+    return [t('Summary'), t('Performance')].join(' - ');
+  }
+
+  render() {
+    const {organization, location} = this.props;
+    const {eventView} = this.state;
+
+    const transactionName = getTransactionName(this.props);
+
+    if (!transactionName) {
+      // If there is no transaction name, redirect to the Performance landing page
+
+      ReactRouter.browserHistory.replace({
+        pathname: `/organizations/${organization.slug}/performance/`,
+        query: {
+          ...location.query,
+        },
+      });
+      return null;
+    }
+
+    return (
+      <SentryDocumentTitle title={this.getDocumentTitle()} objSlug={organization.slug}>
+        <React.Fragment>
+          <GlobalSelectionHeader organization={organization} />
+          <StyledPageContent>
+            <NoProjectMessage organization={organization}>
+              <SummaryContent
+                location={location}
+                organization={organization}
+                eventView={eventView}
+                transactionName={transactionName}
+              />
+            </NoProjectMessage>
+          </StyledPageContent>
+        </React.Fragment>
+      </SentryDocumentTitle>
+    );
+  }
+}
+
+const StyledPageContent = styled(PageContent)`
+  padding: 0;
+`;
+
+function getTransactionName(props: Props): string | undefined {
+  const {location} = props;
+  const {transaction} = location.query;
+
+  return decodeScalar(transaction);
+}
+
+function generateSummaryEventView(
+  location: Location,
+  transactionName: string | undefined
+): EventView {
+  let eventView = generatePerformanceEventView(location);
+
+  if (typeof transactionName !== 'string') {
+    return eventView;
+  }
+
+  // narrow the search conditions of the Performance event view
+
+  eventView.name = transactionName;
+
+  const searchConditions = {
+    query: [],
+    'event.type': ['transaction'],
+    transaction: [transactionName],
+  };
+
+  eventView.query = stringifyQueryObject(searchConditions);
+
+  eventView = eventView.withColumns([
+    {
+      kind: 'field',
+      field: 'transaction',
+    },
+    {
+      kind: 'function',
+      function: ['rpm', '', undefined],
+    },
+    {
+      kind: 'field',
+      field: 'transaction.duration',
+    },
+    {
+      kind: 'function',
+      function: ['last_seen', '', undefined],
+    },
+  ]);
+
+  eventView.sorts = [
+    {
+      kind: 'desc',
+      field: 'transaction.duration',
+    },
+  ];
+
+  return eventView;
+}
+
+export default withProjects(withOrganization(TransactionSummary));
diff --git a/src/sentry/static/sentry/app/views/performance/transaction_summary/table.tsx b/src/sentry/static/sentry/app/views/performance/transaction_summary/table.tsx
new file mode 100644
index 0000000000..840c317c1a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/transaction_summary/table.tsx
@@ -0,0 +1,214 @@
+import React from 'react';
+import {Location} from 'history';
+import styled from '@emotion/styled';
+
+import {Organization} from 'app/types';
+import space from 'app/styles/space';
+import {assert} from 'app/types/utils';
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+import {Panel} from 'app/components/panels';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import Link from 'app/components/links/link';
+import {TableData, TableDataRow, TableColumn} from 'app/views/eventsV2/table/types';
+import HeaderCell from 'app/views/eventsV2/table/headerCell';
+import EventView from 'app/views/eventsV2/eventView';
+import SortLink from 'app/views/eventsV2/sortLink';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import {getFieldRenderer, MetaType, getAggregateAlias} from 'app/views/eventsV2/utils';
+import {
+  generateEventSlug,
+  eventDetailsRouteWithEventView,
+} from 'app/views/eventsV2/eventDetails/utils';
+
+import {
+  TableGrid,
+  GridHead,
+  GridRow,
+  GridBody,
+  GridHeadCell,
+  GridBodyCell,
+  GridBodyCellNumber,
+} from '../styles';
+
+type Props = {
+  eventView: EventView;
+  location: Location;
+  organization: Organization;
+
+  isLoading: boolean;
+  tableData: TableData | null | undefined;
+};
+
+class SummaryContentTable extends React.Component<Props> {
+  renderHeader = () => {
+    const {eventView, tableData} = this.props;
+
+    const tableDataMeta = tableData && tableData.meta ? tableData.meta : undefined;
+
+    const columnOrder = eventView.getColumns();
+
+    const generateSortLink = () => undefined;
+
+    return columnOrder.map((column, index) => (
+      <HeaderCell column={column} tableData={tableData} key={index}>
+        {({align}) => {
+          const field = {field: column.name, width: column.width};
+
+          return (
+            <GridHeadCell>
+              <SortLink
+                align={align}
+                field={field}
+                eventView={eventView}
+                tableDataMeta={tableDataMeta}
+                generateSortLink={generateSortLink}
+              />
+            </GridHeadCell>
+          );
+        }}
+      </HeaderCell>
+    ));
+  };
+
+  renderResults() {
+    const {isLoading, tableData} = this.props;
+
+    if (isLoading) {
+      return (
+        <tr>
+          <td colSpan={8}>
+            <LoadingIndicator />
+          </td>
+        </tr>
+      );
+    }
+
+    const hasResults =
+      tableData && tableData.data && tableData.meta && tableData.data.length > 0;
+
+    if (!hasResults) {
+      return (
+        <tr>
+          <td colSpan={8}>
+            <EmptyStateWarning>
+              <p>{t('No transactions found')}</p>
+            </EmptyStateWarning>
+          </td>
+        </tr>
+      );
+    }
+
+    assert(tableData);
+
+    const columnOrder = this.props.eventView.getColumns();
+
+    return tableData.data.map((row, index) => {
+      assert(tableData.meta);
+
+      return (
+        <React.Fragment key={index}>
+          <GridRow numOfColumns={columnOrder.length}>
+            {this.renderRowItem(row, columnOrder, tableData.meta)}
+          </GridRow>
+        </React.Fragment>
+      );
+    });
+  }
+
+  renderRowItem = (
+    row: TableDataRow,
+    columnOrder: TableColumn<React.ReactText>[],
+    tableMeta: MetaType
+  ) => {
+    const {organization, location, eventView} = this.props;
+
+    return columnOrder.map((column, index) => {
+      const field = String(column.key);
+      const fieldName = getAggregateAlias(field);
+      const fieldType = tableMeta[fieldName];
+
+      const fieldRenderer = getFieldRenderer(field, tableMeta);
+      let rendered = fieldRenderer(row, {organization, location});
+
+      const isFirstCell = index === 0;
+
+      if (isFirstCell) {
+        // the first column of the row should link to the transaction details view
+        // on Discover
+
+        const eventSlug = generateEventSlug(row);
+
+        const target = eventDetailsRouteWithEventView({
+          orgSlug: organization.slug,
+          eventSlug,
+          eventView,
+        });
+
+        rendered = <Link to={target}>{rendered}</Link>;
+      }
+
+      const isNumeric = ['integer', 'number', 'duration'].includes(fieldType);
+      if (isNumeric) {
+        return <GridBodyCellNumber key={column.key}>{rendered}</GridBodyCellNumber>;
+      }
+
+      return <GridBodyCell key={column.key}>{rendered}</GridBodyCell>;
+    });
+  };
+
+  render() {
+    const {eventView, organization} = this.props;
+    const columnOrder = eventView.getColumns();
+
+    return (
+      <div>
+        <Header>
+          <HeaderTitle>{t('Slowest Requests')}</HeaderTitle>
+          <HeaderButtonContainer>
+            <Button
+              to={eventView.getResultsViewUrlTarget(organization.slug)}
+              size="small"
+            >
+              {t('Open in Discover')}
+            </Button>
+          </HeaderButtonContainer>
+        </Header>
+        <Panel>
+          <TableGrid>
+            <GridHead>
+              <GridRow numOfColumns={columnOrder.length}>{this.renderHeader()}</GridRow>
+            </GridHead>
+            <GridBody>{this.renderResults()}</GridBody>
+          </TableGrid>
+        </Panel>
+      </div>
+    );
+  }
+}
+
+export const HeaderTitle = styled('h4')`
+  margin: 0;
+  font-size: ${p => p.theme.fontSizeMedium};
+  color: ${p => p.theme.gray3};
+`;
+
+export const Header = styled('div')`
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  margin: 0 0 ${space(1)} 0;
+`;
+
+export const HeaderButtonContainer = styled('div')`
+  display: flex;
+  flex-direction: row;
+
+  /* Hovercard anchor element when features are disabled. */
+  & > span {
+    display: flex;
+    flex-direction: row;
+  }
+`;
+
+export default SummaryContentTable;
diff --git a/src/sentry/static/sentry/app/views/performance/transaction_summary/user_stats.tsx b/src/sentry/static/sentry/app/views/performance/transaction_summary/user_stats.tsx
new file mode 100644
index 0000000000..adbae244dd
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/transaction_summary/user_stats.tsx
@@ -0,0 +1,120 @@
+import React from 'react';
+import {Location} from 'history';
+import styled from '@emotion/styled';
+
+import {Organization} from 'app/types';
+import space from 'app/styles/space';
+import EventView from 'app/views/eventsV2/eventView';
+import {t} from 'app/locale';
+import {getFieldRenderer} from 'app/views/eventsV2/utils';
+import {assert} from 'app/types/utils';
+import EventsV2 from 'app/utils/discover/eventsv2';
+
+type Props = {
+  location: Location;
+  eventView: EventView;
+  organization: Organization;
+};
+
+class UserStats extends React.Component<Props> {
+  generateUserStatsEventView(eventView: EventView): EventView {
+    // narrow the search conditions of the Performance Summary event view
+    // by modifying the columns to only show user impact and apdex scores
+
+    eventView = eventView.withColumns([
+      {
+        kind: 'function',
+        function: ['apdex', '', undefined],
+      },
+      {
+        kind: 'function',
+        function: ['impact', '', undefined],
+      },
+    ]);
+
+    eventView.sorts = [];
+
+    return eventView;
+  }
+
+  render() {
+    const {organization, location} = this.props;
+    const eventView = this.generateUserStatsEventView(this.props.eventView);
+
+    return (
+      <EventsV2
+        eventView={eventView}
+        organization={organization}
+        location={location}
+        extraQuery={{per_page: 1}}
+      >
+        {({tableData, isLoading}) => {
+          const hasResults =
+            tableData && tableData.data && tableData.meta && tableData.data.length > 0;
+
+          if (isLoading || !tableData || !hasResults || !eventView.isValid()) {
+            return null;
+          }
+
+          const columnOrder = eventView.getColumns();
+
+          assert(tableData.meta);
+          const tableMeta = tableData.meta;
+          const row = tableData.data[0];
+
+          const stats: {[key: string]: React.ReactNode} = columnOrder.reduce(
+            (acc, column) => {
+              const field = String(column.key);
+
+              const fieldRenderer = getFieldRenderer(field, tableMeta);
+
+              acc[field] = fieldRenderer(row, {organization, location});
+
+              return acc;
+            },
+            {}
+          );
+
+          return (
+            <Container>
+              <div>
+                <StatTitle>{t('User Impact')}</StatTitle>
+                <StatNumber>{stats['impact()']}</StatNumber>
+              </div>
+              <div>
+                <StatTitle>{t('Apdex Score')}</StatTitle>
+                <StatNumber>{stats['apdex()']}</StatNumber>
+              </div>
+            </Container>
+          );
+        }}
+      </EventsV2>
+    );
+  }
+}
+
+const Container = styled('div')`
+  margin-bottom: ${space(4)};
+  display: flex;
+
+  color: ${p => p.theme.gray3};
+
+  > * + * {
+    margin-left: ${space(4)};
+  }
+`;
+
+const StatTitle = styled('h4')`
+  font-size: ${p => p.theme.fontSizeMedium};
+
+  margin-bottom: ${space(2)};
+`;
+
+const StatNumber = styled('div')`
+  font-size: 36px;
+  line-height: 50px;
+
+  color: ${p => p.theme.gray4};
+`;
+
+export default UserStats;
diff --git a/src/sentry/static/sentry/app/views/performance/transaction_summary/utils.tsx b/src/sentry/static/sentry/app/views/performance/transaction_summary/utils.tsx
new file mode 100644
index 0000000000..f857c9cb6c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/transaction_summary/utils.tsx
@@ -0,0 +1,27 @@
+export function generateTransactionSummaryRoute({orgSlug}: {orgSlug: String}): string {
+  return `/organizations/${orgSlug}/performance/summary/`;
+}
+
+export function transactionSummaryRouteWithEventView({
+  orgSlug,
+  projectID,
+  transaction,
+}: {
+  orgSlug: string;
+  projectID: string | string[] | undefined;
+  transaction: string;
+}) {
+  const pathname = generateTransactionSummaryRoute({
+    orgSlug,
+  });
+
+  const query = {
+    project: projectID,
+    transaction,
+  };
+
+  return {
+    pathname,
+    query,
+  };
+}
diff --git a/src/sentry/static/sentry/app/views/performance/utils.tsx b/src/sentry/static/sentry/app/views/performance/utils.tsx
new file mode 100644
index 0000000000..9b72da67c3
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/utils.tsx
@@ -0,0 +1,5 @@
+import {Organization} from 'app/types';
+
+export function getPerformanceLandingUrl(organization: Organization): string {
+  return `/organizations/${organization.slug}/performance/`;
+}
