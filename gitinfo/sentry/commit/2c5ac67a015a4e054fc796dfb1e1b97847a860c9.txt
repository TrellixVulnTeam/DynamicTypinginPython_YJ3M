commit 2c5ac67a015a4e054fc796dfb1e1b97847a860c9
Author: Scott Cooper <scttcper@gmail.com>
Date:   Fri May 29 11:35:26 2020 -0700

    feat(ui): New alerts header with support for transactional alerts (#19058)

diff --git a/src/sentry/static/sentry/app/components/subscribeButton.tsx b/src/sentry/static/sentry/app/components/subscribeButton.tsx
index d897c5dc99..bb02d19870 100644
--- a/src/sentry/static/sentry/app/components/subscribeButton.tsx
+++ b/src/sentry/static/sentry/app/components/subscribeButton.tsx
@@ -1,9 +1,9 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import styled from '@emotion/styled';
 
 import Button from 'app/components/button';
 import {t} from 'app/locale';
+import {IconBell} from 'app/icons/iconBell';
 
 type Props = {
   onClick: (e: React.MouseEvent) => void;
@@ -23,25 +23,12 @@ export default class SubscribeButton extends React.Component<Props> {
 
   render() {
     const {size, isSubscribed, onClick, disabled} = this.props;
+    const icon = <IconBell color={isSubscribed ? 'blue' : 'black'} />;
 
     return (
-      <Button size={size} onClick={onClick} disabled={disabled}>
-        <Content>
-          <SignalIcon className="icon-signal" isSubscribed={isSubscribed} />
-          {isSubscribed ? t('Unsubscribe') : t('Subscribe')}
-        </Content>
+      <Button size={size} icon={icon} onClick={onClick} disabled={disabled}>
+        {isSubscribed ? t('Unsubscribe') : t('Subscribe')}
       </Button>
     );
   }
 }
-
-const Content = styled('span')`
-  display: flex;
-  align-items: center;
-`;
-
-const SignalIcon = styled('span')<{isSubscribed?: boolean}>`
-  font-size: 1.2em;
-  margin-right: 5px;
-  ${p => p.isSubscribed && `color: ${p.theme.blue400}`};
-`;
diff --git a/src/sentry/static/sentry/app/icons/iconBell.tsx b/src/sentry/static/sentry/app/icons/iconBell.tsx
new file mode 100644
index 0000000000..e5a3d6f364
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/iconBell.tsx
@@ -0,0 +1,14 @@
+import React from 'react';
+
+import SvgIcon from './svgIcon';
+
+type Props = React.ComponentProps<typeof SvgIcon>;
+
+const IconBell = React.forwardRef<SVGSVGElement, Props>((props: Props, ref) => (
+  <SvgIcon {...props} ref={ref}>
+    <path d="M7.00012 15.9999C6.30168 15.9972 5.63275 15.7179 5.13982 15.2231C4.64688 14.7283 4.37011 14.0583 4.37012 13.3599C4.37012 13.161 4.44913 12.9702 4.58979 12.8295C4.73044 12.6889 4.9212 12.6099 5.12012 12.6099C5.31903 12.6099 5.5098 12.6889 5.65045 12.8295C5.7911 12.9702 5.87012 13.161 5.87012 13.3599C5.87012 13.6596 5.98917 13.947 6.20109 14.1589C6.413 14.3708 6.70042 14.4899 7.00012 14.4899C7.29981 14.4899 7.58723 14.3708 7.79915 14.1589C8.01106 13.947 8.13012 13.6596 8.13012 13.3599C8.13012 13.161 8.20913 12.9702 8.34979 12.8295C8.49044 12.6889 8.68121 12.6099 8.88012 12.6099C9.07903 12.6099 9.26979 12.6889 9.41045 12.8295C9.5511 12.9702 9.63012 13.161 9.63012 13.3599C9.63012 14.0583 9.35335 14.7283 8.86042 15.2231C8.36748 15.7179 7.69855 15.9972 7.00012 15.9999Z" />
+    <path d="M13 14.07H1.00001C0.895161 14.0708 0.791282 14.0499 0.694908 14.0086C0.598533 13.9673 0.511748 13.9065 0.44001 13.83C0.370242 13.7536 0.317284 13.6633 0.284556 13.5652C0.251829 13.467 0.24006 13.363 0.25001 13.26L0.82001 6.71V6.65C0.757871 4.94869 1.37402 3.29235 2.53296 2.04528C3.6919 0.798201 5.29871 0.0625085 7.00001 0C8.69767 0.0574355 10.3034 0.785325 11.4655 2.02425C12.6275 3.26317 13.2513 4.91214 13.2 6.61C13.2047 6.62973 13.2047 6.65027 13.2 6.67L13.77 13.22C13.78 13.323 13.7682 13.427 13.7355 13.5252C13.7027 13.6233 13.6498 13.7136 13.58 13.79C13.5097 13.8763 13.4214 13.9461 13.3211 13.9945C13.2209 14.0429 13.1113 14.0686 13 14.07ZM1.80001 12.57H12.2L11.7 6.84V6.65C11.7515 5.34986 11.2859 4.08226 10.4051 3.12459C9.52424 2.16692 8.29991 1.59716 7.00001 1.54C5.70011 1.59716 4.47578 2.16692 3.59495 3.12459C2.71412 4.08226 2.24851 5.34986 2.30001 6.65V6.78L1.80001 12.57Z" />
+  </SvgIcon>
+));
+
+export {IconBell};
diff --git a/src/sentry/static/sentry/app/views/alerts/details/header.tsx b/src/sentry/static/sentry/app/views/alerts/details/header.tsx
index dfa4bddc0b..464a1a66eb 100644
--- a/src/sentry/static/sentry/app/views/alerts/details/header.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/details/header.tsx
@@ -7,7 +7,6 @@ import isPropValid from '@emotion/is-prop-valid';
 import {PageHeader} from 'app/styles/organization';
 import {t} from 'app/locale';
 import Count from 'app/components/count';
-import DropdownControl from 'app/components/dropdownControl';
 import Duration from 'app/components/duration';
 import LoadingError from 'app/components/loadingError';
 import MenuItem from 'app/components/menuItem';
@@ -17,9 +16,11 @@ import Projects from 'app/utils/projects';
 import SubscribeButton from 'app/components/subscribeButton';
 import getDynamicText from 'app/utils/getDynamicText';
 import space from 'app/styles/space';
-import theme from 'app/utils/theme';
 import {IconCheckmark} from 'app/icons';
 import Breadcrumbs from 'app/components/breadcrumbs';
+import {Dataset} from 'app/views/settings/incidentRules/types';
+import DropdownControl from 'app/components/dropdownControl';
+import {use24Hours} from 'app/utils/dates';
 
 import {Incident, IncidentStats} from '../types';
 import {isOpen} from '../utils';
@@ -42,21 +43,17 @@ export default class DetailsHeader extends React.Component<Props> {
     const isIncidentOpen = incident && isOpen(incident);
     const statusLabel = incident ? <Status incident={incident} /> : null;
 
-    return isIncidentOpen ? (
+    return (
       <DropdownControl
         data-test-id="status-dropdown"
         label={statusLabel}
-        menuWidth="200px"
-        alignRight
-        buttonProps={{size: 'small', disabled: !incident}}
+        buttonProps={{size: 'small', disabled: !incident || !isIncidentOpen}}
       >
         <StatusMenuItem onSelect={onStatusChange}>
-          <IconCheckmark isCircled color={theme.green300} />
-          {t('Resolve this alert')}
+          <IconCheckmark color="green400" />
+          {t('Resolve')}
         </StatusMenuItem>
       </DropdownControl>
-    ) : (
-      statusLabel
     );
   }
 
@@ -69,89 +66,124 @@ export default class DetailsHeader extends React.Component<Props> {
       onSubscriptionChange,
     } = this.props;
     const isIncidentReady = !!incident && !hasIncidentDetailsError;
-    const dateStarted = incident && moment(incident.dateStarted).format('LL');
+    // ex - Wed, May 27, 2020 11:09 AM
+    const dateFormat = use24Hours() ? 'ddd, MMM D, YYYY HH:mm' : 'llll';
+    const dateStarted =
+      incident && moment(new Date(incident.dateStarted)).format(dateFormat);
     const duration =
       incident &&
-      moment
-        .duration(
-          moment(incident.dateClosed || new Date()).diff(moment(incident.dateStarted))
-        )
-        .as('seconds');
+      moment(incident.dateClosed ? new Date(incident.dateClosed) : new Date()).diff(
+        moment(new Date(incident.dateStarted)),
+        'seconds'
+      );
+    const isErrorDataset = incident?.alertRule?.dataset === Dataset.ERRORS;
+    const environmentLabel = incident?.alertRule?.environment ?? t('All Environments');
 
     const project = incident && incident.projects && incident.projects[0];
 
     return (
       <Header>
-        <PageHeading>
+        <BreadCrumbBar>
           <AlertBreadcrumbs
             crumbs={[
               {label: t('Alerts'), to: `/organizations/${params.orgId}/alerts/`},
-              {label: dateStarted ?? t('Alert details')},
+              {label: incident && `#${incident.id}`},
             ]}
           />
-          <IncidentTitle data-test-id="incident-title" loading={!isIncidentReady}>
-            {incident && !hasIncidentDetailsError ? incident.title : 'Loading'}
-          </IncidentTitle>
-        </PageHeading>
-
-        {hasIncidentDetailsError ? (
-          <StyledLoadingError />
-        ) : (
-          <GroupedHeaderItems>
-            <ItemTitle>{t('Status')}</ItemTitle>
-            <ItemTitle>{t('Project')}</ItemTitle>
-            <ItemTitle>{t('Users affected')}</ItemTitle>
-            <ItemTitle>{t('Total events')}</ItemTitle>
-            <ItemTitle>{t('Duration')}</ItemTitle>
-            <ItemTitle>{t('Notifications')}</ItemTitle>
-            <ItemValue>{this.renderStatus()}</ItemValue>
-            <ItemValue>
-              {project && (
-                <Projects slugs={[project]} orgId={params.orgId}>
-                  {({projects}) => (
-                    <ProjectBadge
-                      avatarSize={18}
-                      project={projects && projects.length && projects[0]}
-                    />
-                  )}
-                </Projects>
-              )}
-            </ItemValue>
-            {stats && (
-              <ItemValue>
-                <Count value={stats.uniqueUsers} />
-              </ItemValue>
-            )}
-            {stats && (
-              <ItemValue>
-                <Count value={stats.totalEvents} />
-              </ItemValue>
-            )}
-            {incident && (
+          <Controls>
+            <SubscribeButton
+              disabled={!isIncidentReady}
+              isSubscribed={incident?.isSubscribed}
+              onClick={onSubscriptionChange}
+              size="small"
+            />
+            {this.renderStatus()}
+          </Controls>
+        </BreadCrumbBar>
+        <Details>
+          <div>
+            <IncidentTitle data-test-id="incident-title" loading={!isIncidentReady}>
+              {incident && !hasIncidentDetailsError ? incident.title : 'Loading'}
+            </IncidentTitle>
+            <IncidentSubTitle loading={!isIncidentReady}>
+              {t('Triggered: ')}
+              {dateStarted}
+            </IncidentSubTitle>
+          </div>
+
+          {hasIncidentDetailsError ? (
+            <StyledLoadingError />
+          ) : (
+            <GroupedHeaderItems columns={isErrorDataset ? 5 : 3}>
+              <ItemTitle>{t('Environment')}</ItemTitle>
+              <ItemTitle>{t('Project')}</ItemTitle>
+              {isErrorDataset && stats && <ItemTitle>{t('Users affected')}</ItemTitle>}
+              {isErrorDataset && stats && <ItemTitle>{t('Total events')}</ItemTitle>}
+              <ItemTitle>{t('Active For')}</ItemTitle>
+              <ItemValue>{environmentLabel}</ItemValue>
               <ItemValue>
-                <Duration seconds={getDynamicText({value: duration || 0, fixed: 1200})} />
+                {project && (
+                  <Projects slugs={[project]} orgId={params.orgId}>
+                    {({projects}) => (
+                      <ProjectBadge
+                        avatarSize={18}
+                        project={projects && projects.length && projects[0]}
+                      />
+                    )}
+                  </Projects>
+                )}
               </ItemValue>
-            )}
-            <ItemValue>
-              <SubscribeButton
-                disabled={!isIncidentReady}
-                isSubscribed={incident && !!incident.isSubscribed}
-                onClick={onSubscriptionChange}
-                size="small"
-              />
-            </ItemValue>
-          </GroupedHeaderItems>
-        )}
+              {isErrorDataset && stats && (
+                <ItemValue>
+                  <Count value={stats.uniqueUsers} />
+                </ItemValue>
+              )}
+              {isErrorDataset && stats && (
+                <ItemValue>
+                  <Count value={stats.totalEvents} />
+                </ItemValue>
+              )}
+              {incident && (
+                <ItemValue>
+                  <Duration
+                    seconds={getDynamicText({value: duration || 0, fixed: 1200})}
+                  />
+                </ItemValue>
+              )}
+            </GroupedHeaderItems>
+          )}
+        </Details>
       </Header>
     );
   }
 }
 
-const Header = styled(PageHeader)`
-  background-color: ${p => p.theme.white};
+const Header = styled('div')`
+  background-color: ${p => p.theme.gray100};
   border-bottom: 1px solid ${p => p.theme.borderDark};
+`;
+
+const BreadCrumbBar = styled('div')`
+  display: flex;
   margin-bottom: 0;
-  padding: ${space(3)};
+  padding: ${space(2)} ${space(4)} ${space(1)};
+`;
+
+const AlertBreadcrumbs = styled(Breadcrumbs)`
+  flex-grow: 1;
+  font-size: ${p => p.theme.fontSizeExtraLarge};
+  padding: 0;
+`;
+
+const Controls = styled('div')`
+  display: grid;
+  grid-auto-flow: column;
+  grid-gap: ${space(1)};
+`;
+
+const Details = styled(PageHeader)`
+  margin-bottom: 0;
+  padding: ${space(1.5)} ${space(4)} ${space(2)};
 
   grid-template-columns: max-content auto;
   display: grid;
@@ -172,11 +204,14 @@ const StyledLoadingError = styled(LoadingError)`
   }
 `;
 
-const GroupedHeaderItems = styled('div')`
+const GroupedHeaderItems = styled('div', {
+  shouldForwardProp: p => isPropValid(p) && p !== 'columns',
+})<{columns: number}>`
   display: grid;
-  grid-template-columns: repeat(6, max-content);
+  grid-template-columns: repeat(${p => p.columns}, max-content);
   grid-gap: ${space(1)} ${space(4)};
   text-align: right;
+  margin-top: ${space(1)};
 
   @media (max-width: ${p => p.theme.breakpoints[1]}) {
     text-align: left;
@@ -198,16 +233,19 @@ const ItemValue = styled('div')`
   font-size: ${p => p.theme.fontSizeExtraLarge};
 `;
 
-const AlertBreadcrumbs = styled(Breadcrumbs)`
-  font-size: ${p => p.theme.fontSizeLarge};
-  padding: 0;
-  margin-bottom: ${space(1)};
+const IncidentTitle = styled(PageHeading, {
+  shouldForwardProp: p => isPropValid(p) && p !== 'loading',
+})<{loading: boolean}>`
+  ${p => p.loading && 'opacity: 0'};
+  line-height: 1.5;
 `;
 
-const IncidentTitle = styled('div', {
+const IncidentSubTitle = styled('div', {
   shouldForwardProp: p => isPropValid(p) && p !== 'loading',
 })<{loading: boolean}>`
   ${p => p.loading && 'opacity: 0'};
+  font-size: ${p => p.theme.fontSizeLarge};
+  color: ${p => p.theme.gray500};
 `;
 
 const StatusMenuItem = styled(MenuItem)`
@@ -216,7 +254,7 @@ const StatusMenuItem = styled(MenuItem)`
     text-align: left;
     display: grid;
     grid-template-columns: max-content 1fr;
-    grid-gap: ${space(1)};
+    grid-gap: ${space(0.5)};
     align-items: center;
   }
 `;
diff --git a/tests/js/spec/views/alerts/details/index.spec.jsx b/tests/js/spec/views/alerts/details/index.spec.jsx
index 1faea642d3..718b94c9d8 100644
--- a/tests/js/spec/views/alerts/details/index.spec.jsx
+++ b/tests/js/spec/views/alerts/details/index.spec.jsx
@@ -184,13 +184,13 @@ describe('IncidentDetails', function() {
     });
 
     // Should be subscribed, so button should show "Unsubscribe"
-    expect(wrapper.find('SubscribeButton Content').text()).toBe('Unsubscribe');
+    expect(wrapper.find('SubscribeButton').text()).toBe('Unsubscribe');
 
     // Click to unsubscribe
     wrapper.find('SubscribeButton').simulate('click');
     expect(unsubscribe).toHaveBeenCalled();
     expect(subscribe).not.toHaveBeenCalled();
-    expect(wrapper.find('SubscribeButton Content').text()).toBe('Subscribe');
+    expect(wrapper.find('SubscribeButton').text()).toBe('Subscribe');
 
     // Click again to re-subscribe
     wrapper.find('SubscribeButton').simulate('click');
