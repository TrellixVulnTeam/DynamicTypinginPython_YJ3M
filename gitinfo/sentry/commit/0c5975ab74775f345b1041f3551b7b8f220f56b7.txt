commit 0c5975ab74775f345b1041f3551b7b8f220f56b7
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Nov 7 11:50:19 2018 -0800

    feat(ui): New date range selector (#10314)
    
    New date range selector that includes a calendar view when selecting
    absolute dates
    
    Closes APP-682
    
    ![date-impliment](https://user-images.githubusercontent.com/435981/47878960-bbe9b780-dddc-11e8-8b93-76533bcd5503.gif)

diff --git a/package.json b/package.json
index 06ac565584..de470ef293 100644
--- a/package.json
+++ b/package.json
@@ -65,6 +65,7 @@
     "react-addons-css-transition-group": "15.6.2",
     "react-autosize-textarea": "^4.0.0",
     "react-bootstrap": "^0.32.0",
+    "react-date-range": "^1.0.0-beta",
     "react-document-title": "2.0.3",
     "react-dom": "16.5.1",
     "react-emotion": "9.1.2",
diff --git a/src/sentry/static/sentry/app/actionCreators/health.jsx b/src/sentry/static/sentry/app/actionCreators/health.jsx
index 7f222c4cc5..73b4a4e9d8 100644
--- a/src/sentry/static/sentry/app/actionCreators/health.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/health.jsx
@@ -1,10 +1,17 @@
 import moment from 'moment';
 
+import {DEFAULT_STATS_PERIOD} from 'app/constants';
+import {getUtcDateString} from 'app/utils/dates';
+
 const BASE_URL = org => `/organizations/${org.slug}/health/`;
 
 // Gets the period to query with if we need to double the initial period in order
 // to get data for the previous period
 const getPeriod = ({period, start, end}, {shouldDoublePeriod}) => {
+  if (!period && !start && !end) {
+    period = DEFAULT_STATS_PERIOD;
+  }
+
   // you can not specify both relative and absolute periods
   // relative period takes precendence
   if (period) {
@@ -23,10 +30,8 @@ const getPeriod = ({period, start, end}, {shouldDoublePeriod}) => {
     const diff = moment(end).diff(moment(start));
 
     return {
-      start: moment(start)
-        .subtract(diff)
-        .format(moment.HTML5_FMT.DATETIME_LOCAL_MS),
-      end,
+      start: getUtcDateString(moment(start).subtract(diff)),
+      end: getUtcDateString(end),
     };
   }
 
diff --git a/src/sentry/static/sentry/app/components/asyncComponent.jsx b/src/sentry/static/sentry/app/components/asyncComponent.jsx
index 26d2d654d6..0859369646 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.jsx
@@ -50,6 +50,12 @@ export default class AsyncComponent extends React.Component {
   // eslint-disable-next-line react/sort-comp
   shouldReloadOnVisible = false;
 
+  // This affects how the component behaves when `remountComponent` is called
+  // By default, the component gets put back into a "loading" state when re-fetching data.
+  // If this is true, then when we fetch data, the original ready component remains mounted
+  // and it will need to handle any additional "reloading" states
+  shouldReload = false;
+
   // should `renderError` render the `detail` attribute of a 400 error
   shouldRenderBadRequests = false;
 
@@ -116,7 +122,16 @@ export default class AsyncComponent extends React.Component {
   }
 
   remountComponent = () => {
-    this.setState(this.getDefaultState(), this.fetchData);
+    if (this.shouldReload) {
+      this.setState(
+        {
+          reloading: true,
+        },
+        this.fetchData
+      );
+    } else {
+      this.setState(this.getDefaultState(), this.fetchData);
+    }
   };
 
   visibilityReloader = () =>
@@ -327,7 +342,7 @@ export default class AsyncComponent extends React.Component {
   }
 
   renderComponent() {
-    return this.state.loading && !this.state.reloading
+    return this.state.loading && (!this.shouldReload || !this.state.reloading)
       ? this.renderLoading()
       : this.state.error
         ? this.renderError(new Error('Unable to load all required endpoints'))
diff --git a/src/sentry/static/sentry/app/components/charts/baseChart.jsx b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
index f6a4851844..1f7e73912a 100644
--- a/src/sentry/static/sentry/app/components/charts/baseChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
@@ -105,6 +105,9 @@ class BaseChart extends React.Component {
     // If data is grouped by date, then apply default date formatting to
     // x-axis and tooltips.
     isGroupedByDate: PropTypes.bool,
+
+    // How is data grouped (affects formatting of axis labels and tooltips)
+    interval: PropTypes.oneOf(['hour', 'day']),
   };
 
   static defaultProps = {
@@ -120,6 +123,7 @@ class BaseChart extends React.Component {
     xAxis: {},
     yAxis: {},
     isGroupedByDate: false,
+    interval: 'day',
   };
 
   handleChartReady = (...args) => {
@@ -149,6 +153,7 @@ class BaseChart extends React.Component {
       toolBox,
 
       isGroupedByDate,
+      interval,
       previousPeriod,
 
       devicePixelRatio,
@@ -188,13 +193,15 @@ class BaseChart extends React.Component {
           ...options,
           color: colors || this.getColorPalette(),
           grid: Grid(grid),
-          tooltip: tooltip !== null ? Tooltip({isGroupedByDate, ...tooltip}) : null,
+          tooltip:
+            tooltip !== null ? Tooltip({interval, isGroupedByDate, ...tooltip}) : null,
           legend: legend ? Legend({...legend}) : null,
           yAxis: yAxis !== null ? YAxis(yAxis) : null,
           xAxis:
             xAxis !== null
               ? XAxis({
                   ...xAxis,
+                  interval,
                   isGroupedByDate,
                 })
               : null,
diff --git a/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx b/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
index 6c15dcde19..f0487ad240 100644
--- a/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
@@ -2,9 +2,15 @@ import moment from 'moment';
 
 import theme from 'app/utils/theme';
 
-export default function XAxis({isGroupedByDate, ...props} = {}) {
+export default function XAxis({isGroupedByDate, interval, ...props} = {}) {
   const axisLabelFormatter = isGroupedByDate
-    ? (value, index) => moment.utc(value).format('MMM Do')
+    ? (value, index) => {
+        const format = interval === 'hour' ? 'LT' : 'MMM Do';
+        return moment
+          .utc(value)
+          .local()
+          .format(format);
+      }
     : undefined;
 
   return {
diff --git a/src/sentry/static/sentry/app/components/organizations/headerItem.jsx b/src/sentry/static/sentry/app/components/organizations/headerItem.jsx
index 27b3039e82..3aceb1d6cf 100644
--- a/src/sentry/static/sentry/app/components/organizations/headerItem.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/headerItem.jsx
@@ -83,6 +83,7 @@ const StyledHeaderItem = styled('div')`
 
 const Content = styled('div')`
   flex: 1;
+  margin-right: ${space(1.5)};
   ${overflowEllipsis};
 `;
 
diff --git a/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx b/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
index ca73f8fe78..4bb155548b 100644
--- a/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
@@ -18,7 +18,7 @@ import InlineSvg from 'app/components/inlineSvg';
 /**
  * Environment Selector
  */
-class MultipleEnvironmentSelector extends React.Component {
+class MultipleEnvironmentSelector extends React.PureComponent {
   static propTypes = {
     onChange: PropTypes.func,
     onUpdate: PropTypes.func,
diff --git a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
index e61e28724f..aa69710209 100644
--- a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
@@ -12,7 +12,7 @@ const rootContainerStyles = css`
   display: flex;
 `;
 
-export default class MultipleProjectSelector extends React.Component {
+export default class MultipleProjectSelector extends React.PureComponent {
   static propTypes = {
     value: PropTypes.array,
     projects: PropTypes.array,
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/absoluteSelector.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/absoluteSelector.jsx
deleted file mode 100644
index df9f904220..0000000000
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/absoluteSelector.jsx
+++ /dev/null
@@ -1,55 +0,0 @@
-import React from 'react';
-import PropTypes from 'prop-types';
-import moment from 'moment';
-import {Box} from 'grid-emotion';
-
-import DateTimeField from 'app/components/forms/dateTimeField';
-import {t} from 'app/locale';
-
-export default class AbsoluteSelector extends React.Component {
-  static propTypes = {
-    /**
-     * Start date value for absolute date selector
-     */
-    start: PropTypes.string,
-    /**
-     * End date value for absolute date selector
-     */
-    end: PropTypes.string,
-
-    /**
-     * Callback when value changes
-     */
-    onChange: PropTypes.func,
-  };
-
-  formatDate(date) {
-    return moment(date).format('MMMM D, h:mm a');
-  }
-
-  render() {
-    const {className, start, end, onChange} = this.props;
-
-    return (
-      <Box className={className}>
-        <Box mb={1}>{t('Update time range (UTC)')}</Box>
-        <Box mb={1}>
-          <DateTimeField
-            name="start"
-            label={t('From')}
-            value={start}
-            onChange={val => onChange('start', val)}
-          />
-        </Box>
-        <Box mb={1}>
-          <DateTimeField
-            name="end"
-            label={t('To')}
-            value={end}
-            onChange={val => onChange('end', val)}
-          />
-        </Box>
-      </Box>
-    );
-  }
-}
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/combinedSelector.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/combinedSelector.jsx
deleted file mode 100644
index 5090ee79c0..0000000000
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/combinedSelector.jsx
+++ /dev/null
@@ -1,107 +0,0 @@
-import React from 'react';
-import PropTypes from 'prop-types';
-import {Box} from 'grid-emotion';
-
-import SelectControl from 'app/components/forms/selectControl';
-import DateTimeField from 'app/components/forms/dateTimeField';
-import {t} from 'app/locale';
-
-import {parseStatsPeriod} from './utils';
-
-export default class CombinedSelector extends React.Component {
-  static propTypes = {
-    /**
-     * List of choice tuples to use for relative dates
-     */
-    choices: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),
-
-    /**
-     * The value for selector. This will be 'custom' if absolute dates are being used
-     */
-    relative: PropTypes.string,
-
-    /**
-     * Start date value for absolute date selector
-     */
-    start: PropTypes.string,
-    /**
-     * End date value for absolute date selector
-     */
-    end: PropTypes.string,
-
-    /**
-     * Callback when value changes
-     */
-    onChange: PropTypes.func,
-  };
-
-  static defaultProps = {
-    relative: null,
-    start: null,
-    end: null,
-  };
-
-  handleChange(prop, val) {
-    const {start, end, relative, onChange} = this.props;
-    const prev = {
-      start,
-      end,
-      relative,
-    };
-
-    if (prop === 'relative') {
-      if (val === 'custom') {
-        // Convert previous relative range to absolute values
-        const statsPeriod = parseStatsPeriod(relative);
-        onChange({
-          relative: null,
-          start: statsPeriod.start,
-          end: statsPeriod.end,
-        });
-      } else {
-        onChange({relative: val, start: null, end: null});
-      }
-    } else {
-      onChange({...prev, relative: null, [prop]: val});
-    }
-  }
-
-  render() {
-    const {className, start, end, relative, choices} = this.props;
-
-    const value = relative || 'custom';
-
-    return (
-      <Box className={className}>
-        <Box mb={1}>{t('Update time range (UTC)')}</Box>
-        <Box mb={1}>
-          <SelectControl
-            value={value}
-            choices={[...choices, ['custom', t('Custom')]]}
-            onChange={val => this.handleChange('relative', val.value)}
-          />
-        </Box>
-        {!relative && (
-          <React.Fragment>
-            <Box mb={1}>
-              <DateTimeField
-                name="start"
-                label={t('From')}
-                value={start}
-                onChange={val => this.handleChange('start', val)}
-              />
-            </Box>
-            <Box mb={1}>
-              <DateTimeField
-                name="end"
-                label={t('To')}
-                value={end}
-                onChange={val => this.handleChange('end', val)}
-              />
-            </Box>
-          </React.Fragment>
-        )}
-      </Box>
-    );
-  }
-}
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx
new file mode 100644
index 0000000000..0606f4431f
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx
@@ -0,0 +1,320 @@
+import 'react-date-range/dist/styles.css';
+import 'react-date-range/dist/theme/default.css';
+
+import {DateRangePicker} from 'react-date-range';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {
+  DEFAULT_DAY_END_TIME,
+  DEFAULT_DAY_START_TIME,
+  getCoercedUtcOrLocalDate,
+  getFormattedDate,
+  getStartOfPeriodAgo,
+  setDateToTime,
+} from 'app/utils/dates';
+import {analytics} from 'app/utils/analytics';
+import {t} from 'app/locale';
+import Checkbox from 'app/components/checkbox';
+import TimePicker from 'app/components/organizations/timeRangeSelector/timePicker';
+import space from 'app/styles/space';
+import theme from 'app/utils/theme';
+
+// This is currently the max number of days back you can search
+const MAX_PICKABLE_DAYS = 90;
+
+class DateRange extends React.Component {
+  static propTypes = {
+    /**
+     * Start date value for absolute date selector
+     * Accepts a JS Date or a moment object
+     *
+     * React does not support `instanceOf` with null values
+     */
+    start: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
+
+    /**
+     * End date value for absolute date selector
+     * Accepts a JS Date or a moment object
+     *
+     * React does not support `instanceOf` with null values
+     */
+    end: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
+
+    /**
+     * Should we have a time selector?
+     */
+    showTimePicker: PropTypes.bool,
+
+    /**
+     * The maximum number of days in the past you can pick
+     */
+    maxPickableDays: PropTypes.number,
+
+    /**
+     * Use UTC
+     */
+    useUtc: PropTypes.bool,
+
+    /**
+     * handle UTC checkbox change
+     */
+    onChangeUtc: PropTypes.func,
+
+    /**
+     * Callback when value changes
+     */
+    onChange: PropTypes.func,
+  };
+
+  static defaultProps = {
+    showAbsolute: true,
+    showRelative: false,
+    maxPickableDays: MAX_PICKABLE_DAYS,
+  };
+
+  static getTimeStringFromDate = (date, useUtc) => {
+    return getFormattedDate(date, 'HH:mm', {local: !useUtc});
+  };
+
+  handleSelectDateRange = ({selection}) => {
+    const {useUtc, onChange} = this.props;
+    const {startDate, endDate} = selection;
+
+    let start = startDate;
+    let end = endDate;
+
+    if (start) {
+      start = setDateToTime(start, DEFAULT_DAY_START_TIME, {local: !useUtc});
+    }
+
+    if (end) {
+      end = setDateToTime(end, DEFAULT_DAY_END_TIME, {
+        local: !useUtc,
+      });
+    }
+
+    onChange({
+      start,
+      end,
+    });
+  };
+
+  handleChangeStart = e => {
+    // Safari does not support "time" inputs, so we don't have access to
+    // `e.target.valueAsDate`, must parse as string
+    //
+    // Time will be in 24hr e.g. "21:00"
+    const {start, end, onChange} = this.props;
+    const startTime = e.target.value;
+
+    analytics('dateselector.change_time', {
+      start: startTime,
+    });
+
+    onChange({
+      start: setDateToTime(start, startTime, {local: !this.props.useUtc}),
+      end,
+    });
+  };
+
+  handleChangeEnd = e => {
+    const {start, end, onChange} = this.props;
+    const endTime = e.target.value;
+
+    analytics('dateselector.change_time', {
+      end: endTime,
+    });
+
+    onChange({
+      start,
+      end: setDateToTime(end, endTime, {local: !this.props.useUtc}),
+    });
+  };
+
+  render() {
+    const {
+      className,
+      maxPickableDays,
+      useUtc,
+      start,
+      end,
+      showTimePicker,
+      onChangeUtc,
+    } = this.props;
+
+    const startTime = DateRange.getTimeStringFromDate(new Date(start), useUtc);
+    const endTime = DateRange.getTimeStringFromDate(new Date(end), useUtc);
+
+    // Restraints on the time range that you can select
+    // Can't select dates in the future b/c we're not fortune tellers (yet)
+    const minDate = getCoercedUtcOrLocalDate(
+      getStartOfPeriodAgo(maxPickableDays, 'days'),
+      {
+        local: !useUtc,
+      }
+    );
+    const maxDate = getCoercedUtcOrLocalDate(new Date(), {local: !useUtc});
+
+    return (
+      <div className={className} data-test-id="date-range">
+        <StyledDateRangePicker
+          rangeColors={[theme.purple]}
+          ranges={[
+            {
+              startDate: start
+                ? getCoercedUtcOrLocalDate(start, {local: !useUtc})
+                : start,
+              endDate: end ? getCoercedUtcOrLocalDate(end, {local: !useUtc}) : end,
+              key: 'selection',
+            },
+          ]}
+          minDate={minDate}
+          maxDate={maxDate}
+          onChange={this.handleSelectDateRange}
+        />
+        {showTimePicker && (
+          <TimeAndUtcPicker>
+            <TimePicker
+              start={startTime}
+              end={endTime}
+              onChangeStart={this.handleChangeStart}
+              onChangeEnd={this.handleChangeEnd}
+            />
+            <UtcPicker>
+              {t('Use UTC')}
+              <Checkbox
+                onChange={onChangeUtc}
+                checked={useUtc}
+                style={{
+                  margin: '0 0 0 0.5em',
+                }}
+              />
+            </UtcPicker>
+          </TimeAndUtcPicker>
+        )}
+      </div>
+    );
+  }
+}
+
+const StyledDateRange = styled(DateRange)`
+  display: flex;
+  flex-direction: column;
+  border-left: 1px solid ${p => p.theme.borderLight};
+`;
+
+const StyledDateRangePicker = styled(DateRangePicker)`
+  padding: 21px; /* this is specifically so we can align borders */
+
+  .rdrDefinedRangesWrapper,
+  .rdrDateDisplayWrapper,
+  .rdrWeekDays {
+    display: none;
+  }
+
+  .rdrMonth {
+    width: 300px;
+    font-size: 1.2em;
+    padding: 0;
+  }
+
+  .rdrStartEdge {
+    border-top-left-radius: 1.14em;
+    border-bottom-left-radius: 1.14em;
+  }
+
+  .rdrEndEdge {
+    border-top-right-radius: 1.14em;
+    border-bottom-right-radius: 1.14em;
+  }
+
+  .rdrDayStartPreview,
+  .rdrDayEndPreview,
+  .rdrDayInPreview {
+    border: 0;
+    background: rgba(200, 200, 200, 0.3);
+  }
+
+  .rdrDayStartOfMonth,
+  .rdrDayStartOfMonth,
+  .rdrDayStartOfWeek,
+  .rdrDayStartOfWeek {
+    .rdrInRange,
+    .rdrEndEdge {
+      border-top-left-radius: 0;
+      border-bottom-left-radius: 0;
+    }
+  }
+
+  .rdrDayEndOfMonth,
+  .rdrDayEndOfMonth,
+  .rdrDayEndOfWeek,
+  .rdrDayEndOfWeek {
+    .rdrInRange,
+    .rdrEndEdge {
+      border-top-right-radius: 0;
+      border-bottom-right-radius: 0;
+    }
+  }
+
+  .rdrStartEdge.rdrEndEdge {
+    border-radius: 1.14em;
+  }
+
+  .rdrMonthAndYearWrapper {
+    padding-bottom: ${space(1)};
+    padding-top: 0;
+    height: 32px;
+  }
+
+  .rdrDay {
+    height: 2.5em;
+  }
+
+  .rdrMonthPicker select,
+  .rdrYearPicker select {
+    background: none;
+    font-weight: normal;
+    font-size: 16px;
+    padding: 0;
+  }
+
+  .rdrMonthsVertical {
+    align-items: center;
+  }
+
+  .rdrCalendarWrapper {
+    flex: 1;
+  }
+
+  .rdrNextPrevButton {
+    background-color: ${p => p.theme.offWhite2};
+  }
+
+  .rdrPprevButton i {
+    border-right-color: ${p => p.theme.gray4};
+  }
+
+  .rdrNextButton i {
+    border-left-color: ${p => p.theme.gray4};
+  }
+`;
+
+const TimeAndUtcPicker = styled('div')`
+  display: flex;
+  align-items: center;
+  padding: ${p => space(2)};
+  border-top: 1px solid ${p => p.theme.borderLight};
+`;
+
+const UtcPicker = styled('div')`
+  color: ${p => p.theme.gray2};
+  display: flex;
+  align-items: center;
+  justify-content: flex-end;
+  flex: 1;
+`;
+
+export default StyledDateRange;
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/index.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/index.jsx
new file mode 100644
index 0000000000..9b27544062
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/index.jsx
@@ -0,0 +1 @@
+export {default} from './dateRange';
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/relativeSelector.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/relativeSelector.jsx
new file mode 100644
index 0000000000..6b088ef40e
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/relativeSelector.jsx
@@ -0,0 +1,28 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {DEFAULT_RELATIVE_PERIODS} from 'app/constants';
+import SelectorItem from './selectorItem';
+
+const RelativeSelector = ({onClick, selected}) => {
+  return (
+    <React.Fragment>
+      {Object.entries(DEFAULT_RELATIVE_PERIODS).map(([value, label]) => (
+        <SelectorItem
+          key={value}
+          onClick={onClick}
+          value={value}
+          label={label}
+          selected={selected === value}
+        />
+      ))}
+    </React.Fragment>
+  );
+};
+
+RelativeSelector.propTypes = {
+  onClick: PropTypes.func,
+  selected: PropTypes.string,
+};
+
+export default RelativeSelector;
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/selectorItem.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/selectorItem.jsx
new file mode 100644
index 0000000000..d259b8c44b
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/selectorItem.jsx
@@ -0,0 +1,50 @@
+import {Flex} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import space from 'app/styles/space';
+
+class SelectorItem extends React.PureComponent {
+  static propTypes = {
+    onClick: PropTypes.func.isRequired,
+    value: PropTypes.string,
+    label: PropTypes.node,
+  };
+
+  handleClick = e => {
+    let {onClick, value} = this.props;
+    onClick(value, e);
+  };
+
+  render() {
+    let {className, label} = this.props;
+    return (
+      <Flex className={className} onClick={this.handleClick}>
+        <Label>{label}</Label>
+      </Flex>
+    );
+  }
+}
+
+const StyledSelectorItem = styled(SelectorItem)`
+  cursor: pointer;
+  white-space: nowrap;
+  padding: ${space(1)};
+  align-items: center;
+  flex: 1;
+  background-color: ${p => (p.selected ? p.theme.offWhite : 'transpatent')};
+  font-weight: ${p => (p.selected ? 'bold' : 'normal')};
+  border-bottom: 1px solid ${p => (p.last ? 'transparent' : p.theme.borderLight)};
+
+  &:hover {
+    background: ${p => p.theme.offWhite};
+  }
+`;
+
+const Label = styled('span')`
+  flex: 1;
+  margin-right: ${space(1)};
+`;
+
+export default StyledSelectorItem;
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateSummary.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateSummary.jsx
new file mode 100644
index 0000000000..694c50d129
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateSummary.jsx
@@ -0,0 +1,106 @@
+/**
+ * Displays and formats absolute DateTime ranges
+ */
+
+import {Flex} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {
+  DEFAULT_DAY_END_TIME,
+  DEFAULT_DAY_START_TIME,
+  getFormattedDate,
+} from 'app/utils/dates';
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+
+class DateSummary extends React.Component {
+  static propTypes = {
+    /**
+     * Start date value for absolute date selector
+     * Accepts a JS Date or a moment object
+     *
+     * React does not support `instanceOf` with null values
+     */
+    start: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
+
+    /**
+     * End date value for absolute date selector
+     * Accepts a JS Date or a moment object
+     *
+     * React does not support `instanceOf` with null values
+     */
+    end: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
+
+    useUtc: PropTypes.bool,
+  };
+
+  formatDate(date) {
+    return getFormattedDate(date, 'll', {local: !this.props.useUtc});
+  }
+
+  formatTime(date, withSeconds = false) {
+    return getFormattedDate(date, `HH:mm${withSeconds ? ':ss' : ''}`, {
+      local: !this.props.useUtc,
+    });
+  }
+
+  render() {
+    const {className, start, end} = this.props;
+    const startTimeFormatted = this.formatTime(start, true);
+    const endTimeFormatted = this.formatTime(end, true);
+
+    // Show times if either start or end date contain a time that is not midnight
+    const shouldShowTimes =
+      startTimeFormatted !== DEFAULT_DAY_START_TIME ||
+      endTimeFormatted !== DEFAULT_DAY_END_TIME;
+
+    return (
+      <Flex className={className} align="center">
+        <DateGroup>
+          <Date hasTime={shouldShowTimes}>
+            {this.formatDate(start)}
+            {shouldShowTimes && <Time>{this.formatTime(start)}</Time>}
+          </Date>
+        </DateGroup>
+        <React.Fragment>
+          <DateRangeDivider>{t('to')}</DateRangeDivider>
+
+          <DateGroup>
+            <Date hasTime={shouldShowTimes}>
+              {this.formatDate(end)}
+              {shouldShowTimes && <Time>{this.formatTime(end)}</Time>}
+            </Date>
+          </DateGroup>
+        </React.Fragment>
+      </Flex>
+    );
+  }
+}
+
+const DateGroup = styled('div')`
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+  min-width: 110px;
+`;
+
+const Date = styled('div')`
+  ${p => p.hasTime && 'margin-top: 10px'};
+  display: flex;
+  flex-direction: column;
+  align-items: flex-end;
+`;
+
+const Time = styled('div')`
+  font-size: 0.8em;
+  line-height: 0.8em;
+  opacity: 0.5;
+`;
+
+const DateRangeDivider = styled('span')`
+  margin: 0 ${space(0.5)};
+`;
+
+export default DateSummary;
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
index 414ecbe2d9..c9424043d0 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
@@ -1,28 +1,23 @@
+import {Flex} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
-import moment from 'moment';
 import styled from 'react-emotion';
 
+import {DEFAULT_RELATIVE_PERIODS, DEFAULT_STATS_PERIOD} from 'app/constants';
+import {analytics} from 'app/utils/analytics';
+import {getLocalToUtc, getPeriodAgo, getUtcInLocal} from 'app/utils/dates';
+import {parsePeriodToHours} from 'app/utils';
 import {t} from 'app/locale';
-import Button from 'app/components/button';
+import DateRange from 'app/components/organizations/timeRangeSelector/dateRange';
+import DateSummary from 'app/components/organizations/timeRangeSelector/dateSummary';
 import DropdownMenu from 'app/components/dropdownMenu';
 import HeaderItem from 'app/components/organizations/headerItem';
 import InlineSvg from 'app/components/inlineSvg';
+import RelativeSelector from 'app/components/organizations/timeRangeSelector/dateRange/relativeSelector';
+import SelectorItem from 'app/components/organizations/timeRangeSelector/dateRange/selectorItem';
 import getDynamicText from 'app/utils/getDynamicText';
-import space from 'app/styles/space';
 
-import AbsoluteSelector from './absoluteSelector';
-import CombinedSelector from './combinedSelector';
-import RelativeSelector from './relativeSelector';
-
-const ALLOWED_RELATIVE_DATES = {
-  '24h': t('Last 24 hours'),
-  '7d': t('Last 7 days'),
-  '14d': t('Last 14 days'),
-  '30d': t('Last 30 days'),
-};
-
-class TimeRangeSelector extends React.Component {
+class TimeRangeSelector extends React.PureComponent {
   static propTypes = {
     /**
      * Show absolute date selectors
@@ -35,18 +30,30 @@ class TimeRangeSelector extends React.Component {
 
     /**
      * Start date value for absolute date selector
+     * Accepts a JS Date or a moment object
+     *
+     * React does not support `instanceOf` with null values
      */
-    start: PropTypes.string,
+    start: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
+
     /**
      * End date value for absolute date selector
+     * Accepts a JS Date or a moment object
+     *
+     * React does not support `instanceOf` with null values
      */
-    end: PropTypes.string,
+    end: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
 
     /**
      * Relative date value
      */
     relative: PropTypes.string,
 
+    /**
+     * Default initial value for using UTC
+     */
+    useUtc: PropTypes.bool,
+
     /**
      * Callback when value changes
      */
@@ -63,43 +70,112 @@ class TimeRangeSelector extends React.Component {
     showRelative: false,
   };
 
-  constructor() {
-    super();
+  constructor(props) {
+    super(props);
     this.state = {
+      useUtc: props.useUtc,
       isOpen: false,
     };
   }
 
-  formatDate(date) {
-    return moment(date).format('MMMM D, h:mm a');
-  }
+  getSelectedStateFromProps = props => {
+    const {start, end, relative} = props || this.props;
+    return !!start && !!end ? 'absolute' : relative;
+  };
+
+  handleCloseMenu = () => {
+    this.handleUpdate();
+  };
 
   handleUpdate = () => {
     const {onUpdate} = this.props;
-    if (typeof onUpdate === 'function') {
-      onUpdate();
-    }
-    this.setState({
-      isOpen: false,
+
+    this.setState(
+      {
+        isOpen: false,
+      },
+      () => {
+        if (typeof onUpdate === 'function') {
+          onUpdate();
+        }
+      }
+    );
+  };
+
+  handleAbsoluteClick = () => {
+    const {relative, onChange} = this.props;
+
+    // Set default range to equivalent of last relative period,
+    // or use default stats period
+    onChange({
+      relative: null,
+      start: getPeriodAgo(
+        parsePeriodToHours(relative || DEFAULT_STATS_PERIOD),
+        'hours'
+      ).toDate(),
+      end: new Date(),
+    });
+  };
+
+  handleSelectRelative = value => {
+    const {onChange} = this.props;
+    onChange({
+      relative: value,
+      start: null,
+      end: null,
+    });
+    this.handleUpdate();
+  };
+
+  handleSelectDateRange = ({start, end}) => {
+    const {onChange} = this.props;
+
+    onChange({
+      relative: null,
+      start,
+      end,
+    });
+  };
+
+  handleUseUtc = () => {
+    const {onChange, start, end} = this.props;
+
+    this.setState(state => {
+      const useUtc = !state.useUtc;
+      analytics('dateselector.utc', {
+        utc: useUtc,
+      });
+
+      onChange({
+        relative: null,
+        start: useUtc ? getLocalToUtc(start) : getUtcInLocal(start),
+        end: useUtc ? getLocalToUtc(end) : getUtcInLocal(end),
+      });
+
+      return {
+        useUtc,
+      };
     });
   };
 
   render() {
-    const {start, end, relative, showAbsolute, showRelative, onChange} = this.props;
+    const {start, end, relative, showAbsolute, showRelative} = this.props;
 
-    const shouldShowAbsolute = showAbsolute && !showRelative;
-    const shouldShowRelative = !showAbsolute && showRelative;
-    const shouldShowBoth = showAbsolute && showRelative;
+    const shouldShowAbsolute = showAbsolute;
+    const shouldShowRelative = showRelative;
+    const isAbsoluteSelected = !!start && !!end;
 
-    const summary = relative
-      ? `${ALLOWED_RELATIVE_DATES[relative]}`
-      : `${this.formatDate(start)} to ${this.formatDate(end)}`;
+    const summary = relative ? (
+      `${DEFAULT_RELATIVE_PERIODS[relative]}`
+    ) : (
+      <DateSummary useUtc={this.state.useUtc} start={start} end={end} />
+    );
 
     return (
       <DropdownMenu
         isOpen={this.state.isOpen}
         onOpen={() => this.setState({isOpen: true})}
-        onClose={() => this.setState({isOpen: false})}
+        onClose={this.handleCloseMenu}
         keepMenuOpen={true}
       >
         {({isOpen, getRootProps, getActorProps, getMenuProps}) => (
@@ -113,33 +189,41 @@ class TimeRangeSelector extends React.Component {
             >
               {getDynamicText({value: summary, fixed: 'start to end'})}
             </StyledHeaderItem>
-            <Menu
-              {...getMenuProps({isStyled: true})}
-              style={{display: isOpen ? 'block' : 'none'}}
-            >
-              {shouldShowAbsolute && (
-                <AbsoluteSelector onChange={onChange} start={start} end={end} />
-              )}
-              {shouldShowRelative && (
-                <RelativeSelector
-                  choices={Object.entries(ALLOWED_RELATIVE_DATES)}
-                  onChange={onChange}
-                  value={relative}
-                />
-              )}
-              {shouldShowBoth && (
-                <CombinedSelector
-                  choices={Object.entries(ALLOWED_RELATIVE_DATES)}
-                  onChange={onChange}
-                  relative={relative}
-                  start={start}
-                  end={end}
-                />
-              )}
-              <div>
-                <Button onClick={this.handleUpdate}>{t('Update')}</Button>
-              </div>
-            </Menu>
+
+            {isOpen && (
+              <Menu
+                {...getMenuProps({isStyled: true})}
+                isAbsoluteSelected={isAbsoluteSelected}
+              >
+                <SelectorList isAbsoluteSelected={isAbsoluteSelected}>
+                  {shouldShowRelative && (
+                    <RelativeSelector
+                      onClick={this.handleSelectRelative}
+                      selected={relative}
+                    />
+                  )}
+                  {shouldShowAbsolute && (
+                    <SelectorItem
+                      onClick={this.handleAbsoluteClick}
+                      value="absolute"
+                      label={t('Absolute Date')}
+                      selected={isAbsoluteSelected}
+                      last={true}
+                    />
+                  )}
+                </SelectorList>
+                {isAbsoluteSelected && (
+                  <DateRange
+                    showTimePicker
+                    useUtc={this.state.useUtc}
+                    start={start}
+                    end={end}
+                    onChange={this.handleSelectDateRange}
+                    onChangeUtc={this.handleUseUtc}
+                  />
+                )}
+              </Menu>
+            )}
           </div>
         )}
       </DropdownMenu>
@@ -149,7 +233,8 @@ class TimeRangeSelector extends React.Component {
 
 const StyledHeaderItem = styled(HeaderItem)`
   height: 100%;
-  width: 230px;
+  min-width: 230px;
+  max-width: 360px;
 `;
 
 const StyledInlineSvg = styled(InlineSvg)`
@@ -159,16 +244,27 @@ const StyledInlineSvg = styled(InlineSvg)`
 `;
 
 const Menu = styled('div')`
+  ${p => !p.isAbsoluteSelected && 'left: -1px'};
+  ${p => p.isAbsoluteSelected && 'right: -1px'};
+
+  display: flex;
   background: #fff;
   border: 1px solid ${p => p.theme.borderLight};
   position: absolute;
   top: 100%;
-  left: -1px;
   min-width: 120%;
   z-index: ${p => p.theme.zIndex.dropdown};
   box-shadow: ${p => p.theme.dropShadowLight};
-  padding: ${space(2)};
   border-radius: 0 0 ${p => p.theme.borderRadius} ${p => p.theme.borderRadius};
+  font-size: 0.8em;
+`;
+
+const SelectorList = styled(({isAbsoluteSelected, ...props}) => <Flex {...props} />)`
+  flex: 1;
+  flex-direction: column;
+  flex-shrink: 0;
+  width: ${p => (p.isAbsoluteSelected ? '160px' : '220px')};
+  min-height: 305px;
 `;
 
 export default TimeRangeSelector;
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/relativeSelector.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/relativeSelector.jsx
deleted file mode 100644
index cbabcd2f7a..0000000000
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/relativeSelector.jsx
+++ /dev/null
@@ -1,41 +0,0 @@
-import React from 'react';
-import PropTypes from 'prop-types';
-import {Box} from 'grid-emotion';
-
-import SelectControl from 'app/components/forms/selectControl';
-
-export default class RelativeSelector extends React.Component {
-  static propTypes = {
-    /**
-     * List of choice tuples to use for relative dates
-     */
-    choices: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),
-
-    /**
-     * The value for selector
-     */
-    value: PropTypes.string,
-
-    /**
-     * Callback when value changes
-     */
-    onChange: PropTypes.func,
-  };
-
-  handleChange = (value, e) => {
-    const {onChange} = this.props;
-    if (typeof onChange !== 'function') return;
-
-    onChange(value && value.value, e);
-  };
-
-  render() {
-    const {className, choices, value} = this.props;
-
-    return (
-      <Box mb={1} className={className}>
-        <SelectControl value={value} choices={choices} onChange={this.handleChange} />
-      </Box>
-    );
-  }
-}
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/timePicker.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/timePicker.jsx
new file mode 100644
index 0000000000..e6c1e30052
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/timePicker.jsx
@@ -0,0 +1,72 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled, {cx} from 'react-emotion';
+
+const TimePicker = styled(
+  class TimePicker extends React.Component {
+    static propTypes = {
+      onChangeStart: PropTypes.func.isRequired,
+      onChangeEnd: PropTypes.func.isRequired,
+
+      // Takes string in 24 hour format
+      start: PropTypes.string,
+      // Takes string in 24 hour format
+      end: PropTypes.string,
+
+      // Should inputs be disabled
+      disabled: PropTypes.bool,
+    };
+
+    render() {
+      const {className, start, end, disabled, onChangeStart, onChangeEnd} = this.props;
+      return (
+        <div className={cx(className, 'rdrDateDisplay')}>
+          <div>
+            <Input
+              type="time"
+              className="rdrDateDisplayItem"
+              data-test-id="startTime"
+              disabled={disabled}
+              value={start}
+              onChange={onChangeStart}
+            />
+          </div>
+
+          <div>
+            <Input
+              type="time"
+              className="rdrDateDisplayItem"
+              data-test-id="endTime"
+              disabled={disabled}
+              value={end}
+              onChange={onChangeEnd}
+            />
+          </div>
+        </div>
+      );
+    }
+  }
+)`
+  display: grid;
+  background: transparent;
+  grid-template-columns: 48% 48%;
+  grid-column-gap: 4%;
+  align-items: center;
+  font-size: 0.875em;
+  color: ${p => p.theme.gray3};
+  width: 70%;
+  padding: 0;
+`;
+
+const Input = styled('input')`
+  &.rdrDateDisplayItem {
+    width: 100%;
+    padding-left: 5%;
+    background: ${p => p.theme.offWhite};
+    border: 1px solid ${p => p.theme.borderLight};
+    color: ${p => p.theme.gray2};
+    box-shadow: none;
+  }
+`;
+
+export default TimePicker;
diff --git a/src/sentry/static/sentry/app/constants/index.jsx b/src/sentry/static/sentry/app/constants/index.jsx
index 3e719c7f1b..d51d30e797 100644
--- a/src/sentry/static/sentry/app/constants/index.jsx
+++ b/src/sentry/static/sentry/app/constants/index.jsx
@@ -2,6 +2,8 @@
  * Common constants here
  */
 
+import {t} from 'app/locale';
+
 export const API_SCOPES = [
   'project:read',
   'project:write',
@@ -59,4 +61,11 @@ export const AVATAR_URL_MAP = {
 
 export const MENU_CLOSE_DELAY = 200;
 
-export const DEFAULT_STATS_PERIOD = '7d';
+export const DEFAULT_STATS_PERIOD = '14d';
+
+export const DEFAULT_RELATIVE_PERIODS = {
+  '24h': t('Last 24 hours'),
+  '7d': t('Last 7 days'),
+  '14d': t('Last 14 days'),
+  '30d': t('Last 30 days'),
+};
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index 4a7692e096..4bc85a4538 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -244,6 +244,27 @@ export function isWebpackChunkLoadingError(error) {
   );
 }
 
+/**
+ * This parses our period shorthand strings (e.g. <int><unit>)
+ * and converts it into hours
+ */
+export function parsePeriodToHours(str) {
+  const [, periodNumber, periodLength] = str.match(/([0-9]+)([mhdw])/);
+
+  switch (periodLength) {
+    case 'm':
+      return periodNumber / 60;
+    case 'h':
+      return periodNumber;
+    case 'd':
+      return periodNumber * 24;
+    case 'w':
+      return periodLength * 24 * 7;
+    default:
+      return -1;
+  }
+}
+
 // re-export under utils
 export {parseLinkHeader, Collection, PendingChangeQueue, CursorPoller};
 
diff --git a/src/sentry/static/sentry/app/utils/dates.jsx b/src/sentry/static/sentry/app/utils/dates.jsx
new file mode 100644
index 0000000000..e794454c64
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/dates.jsx
@@ -0,0 +1,113 @@
+import moment from 'moment';
+
+export const DEFAULT_DAY_START_TIME = '00:00:00';
+export const DEFAULT_DAY_END_TIME = '23:59:59';
+
+function getParser(local = false) {
+  return local ? moment : moment.utc;
+}
+
+/**
+ * Return a date object in local time, when given a UTC timestamp
+ */
+export function getLocalDateObject(date) {
+  return moment.utc(date).toDate();
+}
+
+/**
+ * Given a date object, format in datetime in UTC
+ * given: Tue Oct 09 2018 00:00:00 GMT-0700 (Pacific Daylight Time)
+ * returns: "2018-10-09T07:00:00.000"
+ */
+export function getUtcDateString(dateObj) {
+  return moment.utc(dateObj).format(moment.HTML5_FMT.DATETIME_LOCAL_SECONDS);
+}
+
+export function getFormattedDate(dateObj, format, {local} = {}) {
+  return getParser(local)(dateObj).format(format);
+}
+
+/**
+ * Sets time (hours + minutes) of the current date object
+ *
+ * @param {String} timeStr Time in 24hr format (HH:mm)
+ */
+export function setDateToTime(dateObj, timeStr, {local} = {}) {
+  const [hours, minutes, seconds] = timeStr.split(':');
+
+  const date = getParser(local)(dateObj)
+    .set('hours', hours)
+    .set('minutes', minutes);
+
+  if (typeof seconds !== 'undefined') {
+    date.set('seconds', seconds);
+  }
+
+  return date.toDate();
+}
+
+/**
+ * Given a UTC timestamp, return a local date object with the same date
+ * e.g. given: 1/1/2001 @ 22:00 UTC, return:  1/1/2001 @ 22:00 GMT-7
+ */
+export function getUtcInLocal(dateObj) {
+  const utc = moment.utc(dateObj);
+  const format = 'YYYY-MM-DD HH:mm:ss';
+
+  return moment(utc.format(format), format).toDate();
+}
+
+/**
+ * Because our date picker library does not support display dates in UTC, we need
+ * to make a fake date object for date picker to use.
+ */
+export function getCoercedUtcOrLocalDate(date, {local} = {}) {
+  if (local) {
+    return getLocalDateObject(date);
+  }
+
+  return getUtcInLocal(date);
+}
+
+/**
+ * Given a local date, return a UTC date object with the same date
+ * e.g. given: 1/1/2001 @ 22:00 GMT-7, return:  1/1/2001 @ 22:00 UTC
+ */
+export function getLocalToUtc(dateObj) {
+  const localDate = moment(dateObj);
+  const format = 'YYYY-MM-DD HH:mm:ss';
+
+  return moment.utc(localDate.format(format), format).toDate();
+}
+
+// Get the beginning of day (e.g. midnight)
+export function getStartOfDay(date, {local} = {}) {
+  return getParser(local)(date)
+    .hour(0)
+    .minute(0)
+    .second(0)
+    .toDate();
+}
+
+// Get tomorrow at midnight so that default endtime
+// is inclusive of today
+export function getEndOfDay(date, {local} = {}) {
+  return getParser(local)(date)
+    .add(1, 'day')
+    .hour(0)
+    .minute(0)
+    .second(0)
+    .subtract(1, 'second')
+    .toDate();
+}
+
+export function getPeriodAgo(period, unit) {
+  return moment().subtract(period, unit);
+}
+
+// Get the start of the day (midnight) for a period ago
+//
+// e.g. 2 weeks ago at midnight
+export function getStartOfPeriodAgo(period, unit, options) {
+  return getStartOfDay(getPeriodAgo(period, unit), options);
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index e19d1b8284..c6eb947b5c 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import moment from 'moment';
 import {browserHistory} from 'react-router';
 
 import {
@@ -7,7 +8,9 @@ import {
   clearIndicators,
   addSuccessMessage,
 } from 'app/actionCreators/indicator';
+import {getUtcDateString} from 'app/utils/dates';
 import {t, tct} from 'app/locale';
+import HeaderSeparator from 'app/components/organizations/headerSeparator';
 import MultipleProjectSelector from 'app/components/organizations/multipleProjectSelector';
 import SentryTypes from 'app/sentryTypes';
 import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
@@ -39,7 +42,6 @@ import {
   SidebarTabs,
   PageTitle,
   SavedQueryWrapper,
-  StyledHeaderSeparator,
 } from './styles';
 
 import {trackQuery} from './analytics';
@@ -119,8 +121,8 @@ export default class OrganizationDiscover extends React.Component {
   handleUpdateTime = ({relative, start, end}) => {
     this.updateFields({
       range: relative,
-      start,
-      end,
+      start: (start && getUtcDateString(start)) || start,
+      end: (end && getUtcDateString(end)) || end,
     });
   };
 
@@ -290,6 +292,12 @@ export default class OrganizationDiscover extends React.Component {
 
     const projects = organization.projects.filter(project => project.isMember);
 
+    const start =
+      (currentQuery.start && moment.utc(currentQuery.start).toDate()) ||
+      currentQuery.start;
+    const end =
+      (currentQuery.end && moment.utc(currentQuery.end).toDate()) || currentQuery.end;
+
     return (
       <DiscoverContainer>
         <Sidebar>
@@ -335,17 +343,18 @@ export default class OrganizationDiscover extends React.Component {
               onChange={val => this.updateField('projects', val)}
               onUpdate={this.runQuery}
             />
-            <StyledHeaderSeparator />
+            <HeaderSeparator />
             <TimeRangeSelector
               showAbsolute={true}
               showRelative={true}
-              start={currentQuery.start}
-              end={currentQuery.end}
+              useUtc={true}
+              start={start}
+              end={end}
               relative={currentQuery.range}
               onChange={this.handleUpdateTime}
               onUpdate={this.runQuery}
             />
-            <StyledHeaderSeparator />
+            <HeaderSeparator />
           </TopBar>
           <BodyContent>
             {shouldDisplayResult && (
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
index 723635108a..7e50945287 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
@@ -1,10 +1,12 @@
 /*eslint no-use-before-define: ["error", { "functions": false }]*/
 
-import moment from 'moment-timezone';
 import {uniq} from 'lodash';
+import moment from 'moment-timezone';
 
 import {Client} from 'app/api';
+import {DEFAULT_STATS_PERIOD} from 'app/constants';
 import {t} from 'app/locale';
+
 import {COLUMNS, PROMOTED_TAGS, SPECIAL_TAGS} from './data';
 import {isValidAggregation} from './aggregations/utils';
 
@@ -13,7 +15,7 @@ const DEFAULTS = {
   fields: ['event_id', 'project_name', 'platform', 'timestamp'],
   conditions: [],
   aggregations: [],
-  range: '14d',
+  range: DEFAULT_STATS_PERIOD,
   orderby: '-timestamp',
   limit: 1000,
 };
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
index 10bfc66a8e..1f66776078 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
@@ -8,7 +8,6 @@ import space from 'app/styles/space';
 import {Panel, PanelItem} from 'app/components/panels';
 import NavTabs from 'app/components/navTabs';
 import Link from 'app/components/link';
-import HeaderSeparator from 'app/components/organizations/headerSeparator';
 
 const HEADER_HEIGHT = 60;
 
@@ -67,10 +66,6 @@ export const LoadingContainer = styled(Flex)`
   height: 100%;
 `;
 
-export const StyledHeaderSeparator = styled(HeaderSeparator)`
-  margin: ${space(1.5)} 0;
-`;
-
 export const TopBar = styled(Flex)`
   border-bottom: 1px solid ${p => p.theme.borderLight};
   height: ${HEADER_HEIGHT}px;
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
index 5b37a9069d..64f70f183e 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
@@ -1,3 +1,4 @@
+import {isEqual} from 'lodash';
 import React from 'react';
 import styled from 'react-emotion';
 import {Flex} from 'grid-emotion';
@@ -25,6 +26,23 @@ class OrganizationEvents extends AsyncView {
     );
   }
 
+  shouldComponentUpdate(nextProps, nextState) {
+    if (this.state !== nextState) {
+      return true;
+    }
+
+    const isDiff = ['path', 'query', 'search'].find(
+      key => !isEqual(this.props[key], nextProps[key])
+    );
+    if (isDiff) {
+      return true;
+    }
+
+    return false;
+  }
+
+  shouldReload = true;
+
   getEndpoints() {
     const {organization, location} = this.props;
     let {statsPeriod, ...query} = location.query;
@@ -49,7 +67,7 @@ class OrganizationEvents extends AsyncView {
 
   renderBody() {
     const {organization} = this.props;
-    const {loading, events, eventsPageLinks} = this.state;
+    const {reloading, events, eventsPageLinks} = this.state;
 
     return (
       <React.Fragment>
@@ -64,7 +82,7 @@ class OrganizationEvents extends AsyncView {
           <EventsChart organization={organization} />
         </Panel>
 
-        <EventsTable loading={loading} events={events} organization={organization} />
+        <EventsTable reloading={reloading} events={events} organization={organization} />
 
         <Pagination pageLinks={eventsPageLinks} />
       </React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
index 1fd615d053..aed042f683 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
@@ -13,6 +13,7 @@ class EventsChart extends React.Component {
   static propTypes = {
     organization: SentryTypes.Organization,
     actions: PropTypes.object,
+    period: PropTypes.string,
   };
 
   constructor(props) {
@@ -66,25 +67,42 @@ class EventsChart extends React.Component {
   };
 
   render() {
+    const {period} = this.props;
+
+    let interval = '1d';
+    let xAxisOptions = {};
+    if ((typeof period === 'string' && period.endsWith('h')) || period === '1d') {
+      interval = '1h';
+      xAxisOptions.axisLabel = {
+        formatter: value =>
+          moment
+            .utc(value)
+            .local()
+            .format('LT'),
+      };
+    }
+
     return (
       <div>
         <HealthRequestWithParams
           {...this.props}
           tag="error.handled"
           includeTimeseries
-          interval="1d"
+          interval={interval}
           showLoading
           getCategory={() => t('Events')}
         >
           {({timeseriesData, previousTimeseriesData}) => (
             <AreaChart
               isGroupedByDate
+              interval={interval === '1h' ? 'hour' : 'day'}
               series={timeseriesData}
               previousPeriod={previousTimeseriesData}
               grid={{
                 left: '18px',
                 right: '18px',
               }}
+              xAxis={xAxisOptions}
             />
           )}
         </HealthRequestWithParams>
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx
index 6b886cdb39..6a0ae66ea2 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx
@@ -1,3 +1,4 @@
+import {isEqual} from 'lodash';
 import {withRouter, Link} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
@@ -9,12 +10,14 @@ import DateTime from 'app/components/dateTime';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import EventsContext from 'app/views/organizationEvents/eventsContext';
 import IdBadge from 'app/components/idBadge';
+import LoadingIndicator from 'app/components/loadingIndicator';
 import SentryTypes from 'app/sentryTypes';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import space from 'app/styles/space';
 
-class EventsTable extends React.PureComponent {
+class EventsTable extends React.Component {
   static propTypes = {
+    reloading: PropTypes.bool,
     events: PropTypes.array,
     organization: SentryTypes.Organization,
   };
@@ -26,6 +29,21 @@ class EventsTable extends React.PureComponent {
     );
   }
 
+  shouldComponentUpdate(nextProps) {
+    if (this.props.reloading !== nextProps.reloading) {
+      return true;
+    }
+
+    if (
+      this.props.organization === nextProps.organization &&
+      isEqual(this.props.events, nextProps.events)
+    ) {
+      return false;
+    }
+
+    return true;
+  }
+
   getEventTitle(event) {
     const {organization} = this.props;
     const project = this.projectsMap.get(event.projectID);
@@ -43,7 +61,7 @@ class EventsTable extends React.PureComponent {
   }
 
   render() {
-    const {events, organization} = this.props;
+    const {events, organization, reloading} = this.props;
     const hasEvents = events && !!events.length;
 
     return (
@@ -59,6 +77,7 @@ class EventsTable extends React.PureComponent {
         {!hasEvents && <EmptyStateWarning>No events</EmptyStateWarning>}
         {hasEvents && (
           <StyledPanelBody>
+            {reloading && <StyledLoadingIndicator overlay />}
             {events.map((event, eventIdx) => {
               const project = this.projectsMap.get(event.projectID);
               return (
@@ -119,6 +138,14 @@ const TableLayout = styled('div')`
   width: 100%;
 `;
 
+const StyledLoadingIndicator = styled(LoadingIndicator)`
+  padding-top: 10vh;
+  z-index: 1;
+  &.loading.overlay {
+    align-items: flex-start;
+  }
+`;
+
 const TableRow = styled(TableLayout)`
   font-size: ${p => p.theme.fontSizeMedium};
   border-top: 1px solid ${p => (p.first ? 'transparent' : p.theme.borderLight)};
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
index fda8c2319b..90edfc84d8 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
@@ -6,6 +6,7 @@ import styled from 'react-emotion';
 
 import {DEFAULT_STATS_PERIOD} from 'app/constants';
 import {defined} from 'app/utils';
+import {getLocalDateObject, getUtcDateString} from 'app/utils/dates';
 import {getParams} from 'app/views/organizationEvents/utils';
 import EventsContext from 'app/views/organizationEvents/eventsContext';
 import Feature from 'app/components/acl/feature';
@@ -40,12 +41,19 @@ class OrganizationEventsContainer extends React.Component {
       environment = [query.environment];
     }
 
+    let {start, end} = query;
+
+    if (hasAbsolute) {
+      start = getLocalDateObject(start);
+      end = getLocalDateObject(end);
+    }
+
     const values = {
       project,
       environment,
       period: query.statsPeriod || (hasAbsolute ? null : DEFAULT_STATS_PERIOD),
-      start: query.start || null,
-      end: query.end || null,
+      start: start || null,
+      end: end || null,
     };
 
     return {
@@ -72,10 +80,18 @@ class OrganizationEventsContainer extends React.Component {
 
     const newQuery = getParams({
       ...oldQuery,
-      period: obj.period || statsPeriod,
+      period: !obj.start && !obj.end ? obj.period || statsPeriod : null,
       ...obj,
     });
 
+    if (newQuery.start) {
+      newQuery.start = getUtcDateString(newQuery.start);
+    }
+
+    if (newQuery.end) {
+      newQuery.end = getUtcDateString(newQuery.end);
+    }
+
     router.push({
       pathname: router.location.pathname,
       query: newQuery,
@@ -98,20 +114,34 @@ class OrganizationEventsContainer extends React.Component {
     this.setState({start, end, period: relative});
   };
 
-  handleUpdate = type => {
+  handleUpdatePeriod = () => {
     this.setState(({period, start, end, ...state}) => {
-      let newValueObj = {};
-
-      if (type === 'period') {
-        newValueObj = {
-          ...(typeof period !== 'undefined' ? {period} : {start, end}),
-        };
-      } else {
-        newValueObj = {[type]: state[type]};
-      }
+      let newValueObj = {
+        ...(defined(period) ? {period} : {start, end}),
+      };
 
       this.updateParams(newValueObj);
 
+      const {
+        period: _period, // eslint-disable-line no-unused-vars
+        start: _start, // eslint-disable-line no-unused-vars
+        end: _end, // eslint-disable-line no-unused-vars
+        ...queryValues
+      } = state.queryValues;
+
+      return {
+        queryValues: {
+          ...queryValues,
+          ...newValueObj,
+        },
+      };
+    });
+  };
+
+  handleUpdate = type => {
+    this.setState(state => {
+      let newValueObj = {[type]: state[type]};
+      this.updateParams(newValueObj);
       return {
         queryValues: {
           ...state.queryValues,
@@ -121,6 +151,10 @@ class OrganizationEventsContainer extends React.Component {
     });
   };
 
+  handleUpdateEnvironmments = () => this.handleUpdate('environment');
+
+  handleUpdateProjects = () => this.handleUpdate('projects');
+
   render() {
     const {organization, children} = this.props;
     const {period, start, end} = this.state;
@@ -140,14 +174,14 @@ class OrganizationEventsContainer extends React.Component {
                 projects={projects}
                 value={this.state.project}
                 onChange={this.handleChangeProjects}
-                onUpdate={this.handleUpdate.bind(this, 'project')}
+                onUpdate={this.handleUpdateProjects}
               />
               <HeaderSeparator />
               <MultipleEnvironmentSelector
                 organization={organization}
                 value={this.state.environment}
                 onChange={this.handleChangeEnvironments}
-                onUpdate={this.handleUpdate.bind(this, 'environment')}
+                onUpdate={this.handleUpdateEnvironmments}
               />
               <HeaderSeparator />
               <TimeRangeSelector
@@ -157,8 +191,9 @@ class OrganizationEventsContainer extends React.Component {
                 start={start}
                 end={end}
                 onChange={this.handleChangeTime}
-                onUpdate={this.handleUpdate.bind(this, 'period')}
+                onUpdate={this.handleUpdatePeriod}
               />
+              <HeaderSeparator />
             </Header>
             <Body>{children}</Body>
           </OrganizationEventsContent>
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/loadingPanel.jsx b/src/sentry/static/sentry/app/views/organizationHealth/loadingPanel.jsx
index 0471e30e99..a37c6bac1d 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/loadingPanel.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/loadingPanel.jsx
@@ -22,6 +22,7 @@ const LoadingPanel = styled(props => (
   height: 200px;
   position: relative;
   border-color: transparent;
+  margin-bottom: 0;
 `;
 
 export default LoadingPanel;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx b/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx
index 00003feba0..d5ca10aa9d 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx
@@ -46,11 +46,11 @@ class HealthRequestWithParams extends React.Component {
     /**
      * Absolute start date for query
      */
-    start: PropTypes.string,
+    start: PropTypes.instanceOf(Date),
     /**
      * Absolute end date for query
      */
-    end: PropTypes.string,
+    end: PropTypes.instanceOf(Date),
 
     /**
      * Interval to group results in
@@ -110,7 +110,7 @@ class HealthRequestWithParams extends React.Component {
   };
 
   static defaultProps = {
-    period: '7d',
+    period: null,
     start: null,
     end: null,
     interval: '1d',
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/__snapshots__/dateSummary.spec.jsx.snap b/tests/js/spec/components/organizations/timeRangeSelector/__snapshots__/dateSummary.spec.jsx.snap
new file mode 100644
index 0000000000..893cd134c7
--- /dev/null
+++ b/tests/js/spec/components/organizations/timeRangeSelector/__snapshots__/dateSummary.spec.jsx.snap
@@ -0,0 +1,75 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`DateSummary renders 1`] = `
+<DateSummary
+  end={2017-10-17T02:38:00.000Z}
+  start={2017-10-14T02:38:00.000Z}
+  useUtc={true}
+>
+  <Flex
+    align="center"
+  >
+    <Base
+      align="center"
+      className="css-5ipae5"
+    >
+      <div
+        className="css-5ipae5"
+        is={null}
+      >
+        <DateGroup>
+          <div
+            className="css-8ah8mg-DateGroup eyxmd2r0"
+          >
+            <Date
+              hasTime={true}
+            >
+              <div
+                className="css-1j322kv-Date eyxmd2r1"
+              >
+                Oct 14, 2017
+                <Time>
+                  <div
+                    className="css-101687m-Time eyxmd2r2"
+                  >
+                    02:38
+                  </div>
+                </Time>
+              </div>
+            </Date>
+          </div>
+        </DateGroup>
+        <DateRangeDivider>
+          <span
+            className="css-1qowu2b-DateRangeDivider eyxmd2r3"
+          >
+            to
+          </span>
+        </DateRangeDivider>
+        <DateGroup>
+          <div
+            className="css-8ah8mg-DateGroup eyxmd2r0"
+          >
+            <Date
+              hasTime={true}
+            >
+              <div
+                className="css-1j322kv-Date eyxmd2r1"
+              >
+                Oct 17, 2017
+                <Time>
+                  <div
+                    className="css-101687m-Time eyxmd2r2"
+                  >
+                    02:38
+                  </div>
+                </Time>
+              </div>
+            </Date>
+          </div>
+        </DateGroup>
+      </div>
+    </Base>
+  </Flex>
+</DateSummary>
+`;
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx b/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx
new file mode 100644
index 0000000000..99e924aa1e
--- /dev/null
+++ b/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx
@@ -0,0 +1,188 @@
+import React from 'react';
+import {mount} from 'enzyme';
+import MockDate from 'mockdate';
+
+import DateRange from 'app/components/organizations/timeRangeSelector/dateRange';
+
+// 2017-10-14T02:38:00.000Z
+// 2017-10-17T02:38:00.000Z
+const start = new Date(1507948680000);
+const end = new Date(1508207880000); //National Pasta Day
+
+const getSelectedRange = wrapper => {
+  return [
+    wrapper
+      .find('.rdrStartEdge')
+      .closest('DayCell')
+      .find('.rdrDayNumber span')
+      .text(),
+    ...wrapper.find('.rdrInRange').map(el =>
+      el
+        .closest('DayCell')
+        .find('.rdrDayNumber span')
+        .text()
+    ),
+
+    wrapper
+      .find('.rdrEndEdge')
+      .closest('DayCell')
+      .find('.rdrDayNumber span')
+      .text(),
+  ];
+};
+
+describe('DateRange', function() {
+  let wrapper;
+  let onChange = jest.fn();
+  let routerContext = TestStubs.routerContext();
+
+  beforeAll(function() {
+    MockDate.set(new Date('2017-10-16T23:41:20.000Z'));
+  });
+
+  afterAll(function() {
+    // reset mock date
+    MockDate.set(new Date(1508208080000));
+  });
+
+  describe('Local time', function() {
+    beforeEach(function() {
+      onChange.mockReset();
+    });
+    beforeEach(function() {
+      wrapper = mount(
+        <DateRange
+          start={start}
+          end={end}
+          showTimePicker
+          onChange={onChange}
+          onChangeUtc={jest.fn()}
+        />,
+        routerContext
+      );
+    });
+
+    it('has the right max date', function() {
+      expect(wrapper.find('StyledDateRangePicker').prop('maxDate')).toEqual(
+        new Date('2017-10-16T23:41:20.000Z')
+      );
+    });
+
+    it('has the right days selected', function() {
+      // start/end inputs
+      const startEndInputs = wrapper.find(
+        '.rdrDateRangeWrapper .rdrDateDisplayItem input'
+      );
+
+      expect(startEndInputs.at(0).prop('value')).toBe('Oct 13, 2017');
+      expect(startEndInputs.at(1).prop('value')).toBe('Oct 16, 2017');
+
+      expect(getSelectedRange(wrapper)).toEqual(['13', '14', '15', '16']);
+    });
+
+    it('can select a date (midnight)', function() {
+      wrapper
+        .find('DayCell')
+        .at(0)
+        .simulate('mouseUp');
+
+      //
+      expect(onChange).toHaveBeenLastCalledWith({
+        start: new Date('2017-10-01T04:00:00.000Z'),
+        end: new Date('2017-10-02T03:59:59.000Z'),
+      });
+    });
+
+    it('changes start time for existing date', function() {
+      wrapper
+        .find('input[data-test-id="startTime"]')
+        .simulate('change', {target: {value: '11:00'}});
+
+      expect(onChange).toHaveBeenLastCalledWith({
+        start: new Date('2017-10-13T15:00:00.000Z'),
+        end: new Date('2017-10-17T02:38:00.000Z'),
+      });
+    });
+
+    it('changes end time for existing date', function() {
+      wrapper
+        .find('input[data-test-id="endTime"]')
+        .simulate('change', {target: {value: '12:00'}});
+
+      expect(onChange).toHaveBeenLastCalledWith({
+        start: new Date('2017-10-14T02:38:00.000Z'),
+        end: new Date('2017-10-16T16:00:00.000Z'),
+      });
+    });
+  });
+
+  describe('UTC', function() {
+    beforeEach(function() {
+      onChange.mockReset();
+      wrapper = mount(
+        <DateRange
+          start={start}
+          end={end}
+          showTimePicker
+          useUtc
+          onChange={onChange}
+          onChangeUtc={jest.fn()}
+        />,
+        routerContext
+      );
+    });
+
+    it('has the right max date', function() {
+      expect(wrapper.find('StyledDateRangePicker').prop('maxDate')).toEqual(
+        new Date('2017-10-17T03:41:20.000Z')
+      );
+    });
+
+    it('has the right days selected', function() {
+      // start/end inputs
+      const startEndInputs = wrapper.find(
+        '.rdrDateRangeWrapper .rdrDateDisplayItem input'
+      );
+
+      expect(startEndInputs.at(0).prop('value')).toBe('Oct 14, 2017');
+      expect(startEndInputs.at(1).prop('value')).toBe('Oct 17, 2017');
+
+      expect(getSelectedRange(wrapper)).toEqual(['14', '15', '16', '17']);
+    });
+
+    it('can select a date (midnight)', function() {
+      wrapper
+        .find('DayCell')
+        .at(0)
+        .simulate('mouseUp');
+
+      //
+      expect(onChange).toHaveBeenLastCalledWith({
+        start: new Date('2017-10-01T00:00:00.000Z'),
+        end: new Date('2017-10-01T23:59:59.000Z'),
+      });
+    });
+
+    it('changes utc start time for existing date', function() {
+      wrapper
+        .find('input[data-test-id="startTime"]')
+        .simulate('change', {target: {value: '11:00'}});
+
+      expect(onChange).toHaveBeenLastCalledWith({
+        start: new Date('2017-10-14T11:00:00.000Z'),
+        end: new Date('2017-10-17T02:38:00.000Z'),
+      });
+    });
+
+    it('changes end time for existing date', function() {
+      wrapper
+        .find('input[data-test-id="endTime"]')
+        .simulate('change', {target: {value: '12:00'}});
+
+      expect(onChange).toHaveBeenLastCalledWith({
+        start: new Date('2017-10-14T02:38:00.000Z'),
+        end: new Date('2017-10-17T12:00:00.000Z'),
+      });
+    });
+  });
+});
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/dateSummary.spec.jsx b/tests/js/spec/components/organizations/timeRangeSelector/dateSummary.spec.jsx
new file mode 100644
index 0000000000..65557eba84
--- /dev/null
+++ b/tests/js/spec/components/organizations/timeRangeSelector/dateSummary.spec.jsx
@@ -0,0 +1,29 @@
+import React from 'react';
+
+import {mount} from 'enzyme';
+import DateSummary from 'app/components/organizations/timeRangeSelector/dateSummary';
+
+const start = new Date('2017-10-14T02:38:00.000Z');
+const end = new Date('2017-10-17T02:38:00.000Z'); // National Pasta Day
+
+describe('DateSummary', function() {
+  let wrapper;
+  let routerContext = TestStubs.routerContext();
+
+  const createWrapper = (props = {}) =>
+    mount(<DateSummary useUtc start={start} end={end} {...props} />, routerContext);
+
+  it('renders', async function() {
+    wrapper = createWrapper();
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('does not show times when it is midnight for start date and 23:59:59 for end date', function() {
+    wrapper = createWrapper({
+      start: new Date('2017-10-14T00:00:00.000Z'),
+      end: new Date('2017-10-17T23:59:59.000Z'),
+    });
+
+    expect(wrapper.find('Time')).toHaveLength(0);
+  });
+});
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx b/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx
new file mode 100644
index 0000000000..8ecd89fc44
--- /dev/null
+++ b/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx
@@ -0,0 +1,168 @@
+import React from 'react';
+
+import {mount} from 'enzyme';
+import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
+
+describe('TimeRangeSelector', function() {
+  let wrapper;
+  let onChange = jest.fn();
+  let routerContext = TestStubs.routerContext();
+
+  const createWrapper = (props = {}) =>
+    mount(
+      <TimeRangeSelector showAbsolute showRelative onChange={onChange} {...props} />,
+      routerContext
+    );
+
+  beforeEach(function() {
+    onChange.mockReset();
+  });
+
+  it('hides relative and absolute selectors', async function() {
+    wrapper = mount(
+      <TimeRangeSelector showAbsolute={false} showRelative={false} />,
+      routerContext
+    );
+    await wrapper.find('HeaderItem').simulate('click');
+    expect(wrapper.find('RelativeSelector SelectorItem')).toHaveLength(0);
+    expect(wrapper.find('SelectorItem[value="absolute"]')).toHaveLength(0);
+  });
+
+  it('selects absolute item', async function() {
+    wrapper = createWrapper();
+    await wrapper.find('HeaderItem').simulate('click');
+
+    expect(wrapper.find('[data-test-id="date-range"]')).toHaveLength(0);
+    await wrapper.find('SelectorItem[value="absolute"]').simulate('click');
+
+    const newProps = {
+      relative: null,
+      start: new Date('2017-10-03T02:41:20.000Z'),
+      end: new Date('2017-10-17T02:41:20.000Z'),
+    };
+    expect(onChange).toHaveBeenLastCalledWith(newProps);
+    wrapper.setProps(newProps);
+    wrapper.update();
+
+    expect(wrapper.find('[data-test-id="date-range"]')).toHaveLength(1);
+  });
+
+  it('selects absolute item with utc enabled', async function() {
+    wrapper = createWrapper({useUtc: true});
+    await wrapper.find('HeaderItem').simulate('click');
+
+    expect(wrapper.find('[data-test-id="date-range"]')).toHaveLength(0);
+    await wrapper.find('SelectorItem[value="absolute"]').simulate('click');
+
+    const newProps = {
+      relative: null,
+      start: new Date('2017-10-03T02:41:20.000Z'),
+      end: new Date('2017-10-17T02:41:20.000Z'),
+    };
+    expect(onChange).toHaveBeenLastCalledWith(newProps);
+    wrapper.setProps(newProps);
+    wrapper.update();
+
+    expect(wrapper.find('[data-test-id="date-range"]')).toHaveLength(1);
+  });
+
+  it('switches from relative to absolute while maintaining equivalent date range', async function() {
+    wrapper = createWrapper({
+      relative: '7d',
+    });
+    await wrapper.find('HeaderItem').simulate('click');
+
+    wrapper.find('SelectorItem[value="absolute"]').simulate('click');
+    expect(onChange).toHaveBeenCalledWith({
+      relative: null,
+      start: new Date('2017-10-10T02:41:20.000Z'),
+      end: new Date('2017-10-17T02:41:20.000Z'),
+    });
+
+    wrapper.find('SelectorItem[value="14d"]').simulate('click');
+    expect(onChange).toHaveBeenLastCalledWith({
+      relative: '14d',
+      start: null,
+      end: null,
+    });
+
+    wrapper.setProps({relative: '14d', start: null, end: null});
+    await wrapper.find('HeaderItem').simulate('click');
+    wrapper.find('SelectorItem[value="absolute"]').simulate('click');
+    expect(onChange).toHaveBeenLastCalledWith({
+      relative: null,
+      start: new Date('2017-10-03T02:41:20.000Z'),
+      end: new Date('2017-10-17T02:41:20.000Z'),
+    });
+  });
+
+  it('switches from relative to absolute while maintaining equivalent date range (in utc)', async function() {
+    wrapper = createWrapper({
+      relative: '7d',
+      useUtc: true,
+    });
+    await wrapper.find('HeaderItem').simulate('click');
+
+    wrapper.find('SelectorItem[value="absolute"]').simulate('click');
+    expect(onChange).toHaveBeenCalledWith({
+      relative: null,
+      start: new Date('2017-10-10T02:41:20.000Z'),
+      end: new Date('2017-10-17T02:41:20.000Z'),
+    });
+
+    wrapper.find('SelectorItem[value="14d"]').simulate('click');
+    expect(onChange).toHaveBeenLastCalledWith({
+      relative: '14d',
+      start: null,
+      end: null,
+    });
+
+    wrapper.setProps({relative: '14d', start: null, end: null});
+    await wrapper.find('HeaderItem').simulate('click');
+    wrapper.find('SelectorItem[value="absolute"]').simulate('click');
+    expect(onChange).toHaveBeenLastCalledWith({
+      relative: null,
+      start: new Date('2017-10-03T02:41:20.000Z'),
+      end: new Date('2017-10-17T02:41:20.000Z'),
+    });
+  });
+
+  it('maintains time when switching UTC to local time', async function() {
+    let state;
+    wrapper = createWrapper({
+      relative: null,
+      start: new Date('2017-10-10T00:00:00.000Z'),
+      end: new Date('2017-10-17T23:59:59.000Z'),
+      useUtc: true,
+    });
+    wrapper.find('HeaderItem').simulate('click');
+
+    // Local
+    wrapper.find('UtcPicker Checkbox').simulate('change');
+    state = {
+      relative: null,
+      start: new Date('2017-10-10T04:00:00.000Z'),
+      end: new Date('2017-10-18T03:59:59.000Z'),
+    };
+    expect(onChange).toHaveBeenLastCalledWith(state);
+    wrapper.setProps(state);
+
+    // UTC
+    wrapper.find('UtcPicker Checkbox').simulate('change');
+    state = {
+      relative: null,
+      start: new Date('2017-10-10T00:00:00.000Z'),
+      end: new Date('2017-10-17T23:59:59.000Z'),
+    };
+    expect(onChange).toHaveBeenLastCalledWith(state);
+    wrapper.setProps(state);
+
+    // Local
+    wrapper.find('UtcPicker Checkbox').simulate('change');
+    expect(onChange).toHaveBeenLastCalledWith({
+      relative: null,
+      start: new Date('2017-10-10T04:00:00.000Z'),
+      end: new Date('2017-10-18T03:59:59.000Z'),
+    });
+  });
+});
diff --git a/tests/js/spec/utils/dates.spec.jsx b/tests/js/spec/utils/dates.spec.jsx
new file mode 100644
index 0000000000..1c3961bea1
--- /dev/null
+++ b/tests/js/spec/utils/dates.spec.jsx
@@ -0,0 +1,17 @@
+import {setDateToTime} from 'app/utils/dates';
+
+describe('utils.dates', function() {
+  describe('setDateToTime', function() {
+    it('can set new time for current date', function() {
+      const date = new Date();
+      const newDate = setDateToTime(date, '11:11');
+      expect(newDate).toEqual(new Date(1508238680000));
+    });
+
+    it('can set new time (including seconds) for current date', function() {
+      const date = new Date();
+      const newDate = setDateToTime(date, '11:11:11');
+      expect(newDate).toEqual(new Date(1508238671000));
+    });
+  });
+});
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index a328c52687..9907b2b1e4 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -489,4 +489,99 @@ describe('Discover', function() {
       expect(wrapper.find('SavedQueries')).toHaveLength(1);
     });
   });
+
+  describe('Time Selector', function() {
+    let wrapper;
+    let query;
+
+    beforeEach(function() {
+      query = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
+        method: 'POST',
+        body: {timing: {}, data: [], meta: []},
+      });
+      wrapper = mount(
+        <Discover
+          queryBuilder={queryBuilder}
+          organization={organization}
+          updateSavedQueryData={jest.fn()}
+          toggleEditMode={jest.fn()}
+        />,
+        TestStubs.routerContext([{organization}])
+      );
+    });
+
+    it('changes to absolute date', async function() {
+      await wrapper.instance().runQuery();
+      expect(query).toHaveBeenLastCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          data: expect.objectContaining({
+            range: '14d',
+          }),
+        })
+      );
+
+      // Select absolute date
+      wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+      wrapper.find('SelectorItem[value="absolute"]').simulate('click');
+
+      // Hide date picker
+      wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+
+      // Should make request for the last 14 days as an absolute date range
+      expect(query).toHaveBeenLastCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          data: expect.objectContaining({
+            start: '2017-10-03T02:41:20',
+            end: '2017-10-17T02:41:20',
+          }),
+        })
+      );
+    });
+
+    it('switches between UTC and local dates', async function() {
+      // Select absolute date
+      wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+      wrapper.find('SelectorItem[value="absolute"]').simulate('click');
+
+      // Select a single day
+      wrapper
+        .find('DayCell')
+        .at(0)
+        .simulate('mouseUp');
+
+      // Hide date picker
+      wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+
+      // Should make request for the last 14 days as an absolute date range
+      expect(query).toHaveBeenLastCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          data: expect.objectContaining({
+            start: '2017-10-01T00:00:00',
+            end: '2017-10-01T23:59:59',
+          }),
+        })
+      );
+
+      wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+
+      // Switch to UTC
+      wrapper.find('UtcPicker Checkbox').simulate('change');
+      // Hide dropdown
+      wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+
+      expect(query).toHaveBeenLastCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          data: expect.objectContaining({
+            start: '2017-10-01T04:00:00',
+            end: '2017-10-02T03:59:59',
+          }),
+        })
+      );
+    });
+  });
 });
diff --git a/tests/js/spec/views/organizationEvents/index.spec.jsx b/tests/js/spec/views/organizationEvents/index.spec.jsx
index 53f8570434..902f22ae0a 100644
--- a/tests/js/spec/views/organizationEvents/index.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/index.spec.jsx
@@ -62,7 +62,7 @@ describe('OrganizationEvents', function() {
       pathname: '/organizations/org-slug/events/',
       query: {
         environment: ['production'],
-        statsPeriod: '7d',
+        statsPeriod: '14d',
       },
     });
     expect(wrapper.state('queryValues')).toEqual(
@@ -81,7 +81,7 @@ describe('OrganizationEvents', function() {
       pathname: '/organizations/org-slug/events/',
       query: {
         environment: ['production', 'staging'],
-        statsPeriod: '7d',
+        statsPeriod: '14d',
       },
     });
     expect(wrapper.state('queryValues')).toEqual(
@@ -102,7 +102,7 @@ describe('OrganizationEvents', function() {
       pathname: '/organizations/org-slug/events/',
       query: {
         environment: [],
-        statsPeriod: '7d',
+        statsPeriod: '14d',
       },
     });
   });
@@ -127,7 +127,7 @@ describe('OrganizationEvents', function() {
           pathname: '/organizations/org-slug/events/',
           query: {
             environment: ['production'],
-            statsPeriod: '7d',
+            statsPeriod: '14d',
           },
         },
       },
diff --git a/webpack.config.js b/webpack.config.js
index feaffb300e..c2876032ab 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -148,6 +148,20 @@ var appConfig = {
           },
         ],
       },
+      {
+        test: /\.css/,
+        use: [
+          {
+            loader: 'style-loader',
+          },
+          {
+            loader: 'css-loader',
+            options: {
+              minimize: IS_PRODUCTION,
+            },
+          },
+        ],
+      },
       {
         test: /\.(woff|woff2|ttf|eot|svg|png|gif|ico|jpg)($|\?)/,
         exclude: /app\/icons\/.*\.svg$/,
diff --git a/yarn.lock b/yarn.lock
index 63be0f8d56..6a6aace706 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -3021,7 +3021,7 @@ classnames@2.2.0:
   resolved "https://registry.yarnpkg.com/classnames/-/classnames-2.2.0.tgz#8f61df81f356c45d18a31d83fde4dfb194ea8722"
   integrity sha1-j2HfgfNWxF0Yox2D/eTfsZTqhyI=
 
-classnames@^2.2.3:
+classnames@^2.2.1, classnames@^2.2.3:
   version "2.2.6"
   resolved "https://registry.yarnpkg.com/classnames/-/classnames-2.2.6.tgz#43935bffdd291f326dad0a205309b38d00f650ce"
   integrity sha512-JR/iSQOSt+LQIWwrwEzJ9uk0xfN3mTVYMwt1Ir5mUcSN6pU+V4zQFFaJsclJbPuAUQH+yfWef6tm7l1quW3C8Q==
@@ -3792,6 +3792,11 @@ dashdash@^1.12.0:
   dependencies:
     assert-plus "^1.0.0"
 
+date-fns@2.0.0-alpha.7:
+  version "2.0.0-alpha.7"
+  resolved "https://registry.yarnpkg.com/date-fns/-/date-fns-2.0.0-alpha.7.tgz#245ad16f95764eababfb2c0a41fd5d033c20e57a"
+  integrity sha1-JFrRb5V2Tqur+ywKQf1dAzwg5Xo=
+
 date-now@^0.1.4:
   version "0.1.4"
   resolved "https://registry.yarnpkg.com/date-now/-/date-now-0.1.4.tgz#eaf439fd4d4848ad74e5cc7dbef200672b9e345b"
@@ -9597,6 +9602,14 @@ prop-types-extra@^1.0.1:
   dependencies:
     warning "^3.0.0"
 
+prop-types@15, prop-types@^15.6.1, prop-types@^15.6.2:
+  version "15.6.2"
+  resolved "https://registry.yarnpkg.com/prop-types/-/prop-types-15.6.2.tgz#05d5ca77b4453e985d60fc7ff8c859094a497102"
+  integrity sha512-3pboPvLiWD7dkI3qf3KbUe6hKFKa52w+AE0VCqECtf+QHAKgOL37tTaNCnuX1nAAQ4ZhyP+kYVKf8rLmJ/feDQ==
+  dependencies:
+    loose-envify "^1.3.1"
+    object-assign "^4.1.1"
+
 prop-types@^15.5.10, prop-types@^15.5.4, prop-types@^15.5.6, prop-types@^15.5.7, prop-types@^15.5.8, prop-types@^15.5.9:
   version "15.5.10"
   resolved "https://registry.yarnpkg.com/prop-types/-/prop-types-15.5.10.tgz#2797dfc3126182e3a95e3dfbb2e893ddd7456154"
@@ -9614,14 +9627,6 @@ prop-types@^15.6.0:
     loose-envify "^1.3.1"
     object-assign "^4.1.1"
 
-prop-types@^15.6.1, prop-types@^15.6.2:
-  version "15.6.2"
-  resolved "https://registry.yarnpkg.com/prop-types/-/prop-types-15.6.2.tgz#05d5ca77b4453e985d60fc7ff8c859094a497102"
-  integrity sha512-3pboPvLiWD7dkI3qf3KbUe6hKFKa52w+AE0VCqECtf+QHAKgOL37tTaNCnuX1nAAQ4ZhyP+kYVKf8rLmJ/feDQ==
-  dependencies:
-    loose-envify "^1.3.1"
-    object-assign "^4.1.1"
-
 property-information@^4.0.0:
   version "4.2.0"
   resolved "https://registry.yarnpkg.com/property-information/-/property-information-4.2.0.tgz#f0e66e07cbd6fed31d96844d958d153ad3eb486e"
@@ -9890,6 +9895,16 @@ react-color@^2.14.0:
     reactcss "^1.2.0"
     tinycolor2 "^1.4.1"
 
+react-date-range@^1.0.0-beta:
+  version "1.0.0-beta"
+  resolved "https://registry.yarnpkg.com/react-date-range/-/react-date-range-1.0.0-beta.tgz#d67957b6af0230ef5cab60d73bf287429aff3856"
+  integrity sha512-04xUpkD9qTq6bFpLqcYTvptw+yFl793o1YB+uCWI+SrIp0eyEE4Aw+R9jaWp5cGnxsRDUqywV0cRd8e1Ys2uYQ==
+  dependencies:
+    classnames "^2.2.1"
+    date-fns "2.0.0-alpha.7"
+    prop-types "^15.5.10"
+    react-list "^0.8.8"
+
 react-datetime@^2.14.0:
   version "2.15.0"
   resolved "https://registry.yarnpkg.com/react-datetime/-/react-datetime-2.15.0.tgz#a8f7da6c58b6b45dbeea32d4e8485db17614e12c"
@@ -10055,6 +10070,13 @@ react-lifecycles-compat@^3.0.0, react-lifecycles-compat@^3.0.4:
   resolved "https://registry.yarnpkg.com/react-lifecycles-compat/-/react-lifecycles-compat-3.0.4.tgz#4f1a273afdfc8f3488a8c516bfda78f872352362"
   integrity sha512-fBASbA6LnOU9dOU2eW7aQ8xmYBSXUIWr+UmF9b1efZBazGNO+rcXT/icdKnYm2pTwcRylVUYwW7H1PHfLekVzA==
 
+react-list@^0.8.8:
+  version "0.8.10"
+  resolved "https://registry.yarnpkg.com/react-list/-/react-list-0.8.10.tgz#5bd4864051409c5d3eff34110def54c05af062e6"
+  integrity sha512-7jzShUoyzPp7NxzEs46vs5H1SmNSbPX2jK35KA3CrT43Fv4yYyovWm5lb0CtDIPHeLKf8rTmGOaZQPV9HvoG2w==
+  dependencies:
+    prop-types "15"
+
 react-mentions@^1.2.0:
   version "1.2.2"
   resolved "https://registry.yarnpkg.com/react-mentions/-/react-mentions-1.2.2.tgz#db09e5ec84f3cf40d5a56bbc9fcc0f81c4c8c60b"
