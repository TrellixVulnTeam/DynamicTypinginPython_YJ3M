commit c7dde6af197923e56c9499147bff0cd031137094
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Jan 31 12:33:06 2017 +0100

    Change logic on optional dsyms

diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 1ab884061e..b85479e137 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -24,7 +24,7 @@ APP_BUNDLE_PATHS = (
     '/private/var/containers/Bundle/Application/',
 )
 _sim_platform_re = re.compile(r'/\w+?Simulator\.platform/')
-_known_app_bundled_frameworks_re = re.compile(r'''(?x)
+_support_framework = re.compile(r'''(?x)
     /Frameworks/(
             libswift([a-zA-Z0-9]+)\.dylib$
         |   (KSCrash|SentrySwift|Sentry)\.framework/
@@ -181,27 +181,52 @@ class Symbolizer(object):
             return obj_name
         return img['name']
 
-    def _is_app_bundled_frame(self, frame, img):
+    def _is_frame_from_app_bundle(self, frame, img):
         fn = self._get_frame_package(frame, img)
         if not (fn.startswith(APP_BUNDLE_PATHS) or
                 (SIM_PATH in fn and SIM_APP_PATH in fn)):
             return False
         return True
 
-    def _is_known_app_bundled_framework(self, frame, img):
+    def _is_support_framework(self, frame, img):
+        """True if the frame is from a framework that is known and app
+        bundled.  Those are frameworks which are specifically not frameworks
+        that are ever in_app.
+        """
+        fn = self._get_frame_package(frame, img)
+        return _support_framework.search(fn) is not None
+
+    def _is_app_bundled_framework(self, frame, img):
         fn = self._get_frame_package(frame, img)
-        return _known_app_bundled_frameworks_re.search(fn) is not None
+        return fn.startswith(APP_BUNDLE_PATHS) and '/Frameworks/' in fn
 
     def _is_app_frame(self, frame, img):
-        if not self._is_app_bundled_frame(frame, img):
+        """Given a frame derives the value of `in_app` by discarding the
+        original value of the frame.
+        """
+        if not self._is_frame_from_app_bundle(frame, img):
             return False
-        return not self._is_known_app_bundled_framework(frame, img)
+        return not self._is_support_framework(frame, img)
 
-    def _is_optional_app_bundled_framework(self, frame, img):
-        if not self._is_known_app_bundled_framework(frame, img):
+    def _is_optional_dsym(self, frame, img):
+        """Checks if this is a dsym that is optional."""
+        # Frames that are not in the app are not considered optional.  In
+        # theory we should never reach this anyways.
+        if not self._is_frame_from_app_bundle(frame, img):
             return False
-        symbol_name = frame.get('symbol_name')
-        return symbol_name and symbol_name not in KNOWN_GARBAGE_SYMBOLS
+
+        # If we're dealing with an app bundled framework that is also
+        # considered optional.
+        if self._is_app_bundled_framework(frame, img):
+            return True
+
+        # Frameworks that are known to sentry and bundled helpers are always
+        # optional for now.  In theory this should always be False here
+        # because we should catch it with the last branch already.
+        if self._is_support_framework(frame, img):
+            return True
+
+        return False
 
     def _is_simulator_frame(self, frame, img):
         fn = self._get_frame_package(frame, img)
@@ -213,7 +238,7 @@ class Symbolizer(object):
 
     def symbolize_app_frame(self, frame, img):
         if frame['object_addr'] not in self.symsynd_symbolizer.images:
-            if self._is_optional_app_bundled_framework(frame, img):
+            if self._is_optional_dsym(frame, img):
                 type = EventError.NATIVE_MISSING_OPTIONALLY_BUNDLED_DSYM
             else:
                 type = EventError.NATIVE_MISSING_DSYM
@@ -269,7 +294,7 @@ class Symbolizer(object):
         # If we are dealing with a frame that is not bundled with the app
         # we look at system symbols.  If that fails, we go to looking for
         # app symbols explicitly.
-        if not self._is_app_bundled_frame(frame, img):
+        if not self._is_frame_from_app_bundle(frame, img):
             return self.symbolize_system_frame(frame, img, sdk_info)
 
         return self.symbolize_app_frame(frame, img)
