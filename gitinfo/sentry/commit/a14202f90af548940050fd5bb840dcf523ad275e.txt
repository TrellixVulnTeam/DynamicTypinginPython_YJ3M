commit a14202f90af548940050fd5bb840dcf523ad275e
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Tue Oct 23 10:09:28 2018 -0700

    feat(app-platform): Add update to sentry app details endpoint  (#10187)
    
    * feat(app-platform): Add update to sentry app details endpoint

diff --git a/src/sentry/api/endpoints/sentry_app_details.py b/src/sentry/api/endpoints/sentry_app_details.py
index 52ba78a593..02a5c3178b 100644
--- a/src/sentry/api/endpoints/sentry_app_details.py
+++ b/src/sentry/api/endpoints/sentry_app_details.py
@@ -1,15 +1,15 @@
 from __future__ import absolute_import
 
 from rest_framework.response import Response
-
 from sentry.api.bases.sentryapps import SentryAppDetailsEndpoint as BaseEndpoint
 from sentry.api.serializers import serialize
+from sentry.api.serializers.rest_framework import SentryAppSerializer
 from sentry.constants import SentryAppStatus
 from sentry.features.helpers import requires_feature
+from sentry.mediators.sentry_apps import Updater
 
 
 class SentryAppDetailsEndpoint(BaseEndpoint):
-
     @requires_feature('organizations:internal-catchall', any_org=True)
     def get(self, request, sentry_app):
         # Superusers have access to the app, published or unpublished. Other
@@ -18,3 +18,18 @@ class SentryAppDetailsEndpoint(BaseEndpoint):
             return Response(serialize(sentry_app, request.user))
 
         return Response(status=404)
+
+    @requires_feature('organizations:internal-catchall', any_org=True)
+    def put(self, request, sentry_app):
+        serializer = SentryAppSerializer(data=request.DATA, partial=True)
+        if serializer.is_valid():
+            result = serializer.object
+            updated_app = Updater.run(
+                sentry_app=sentry_app,
+                name=result.get('name'),
+                webhook_url=result.get('webhook_url'),
+                scopes=result.get('scopes'),
+            )
+            return Response(serialize(updated_app, request.user))
+
+        return Response(serializer.errors, status=400)
diff --git a/src/sentry/mediators/sentry_apps/updater.py b/src/sentry/mediators/sentry_apps/updater.py
index 9f7afd0632..4433d078f8 100644
--- a/src/sentry/mediators/sentry_apps/updater.py
+++ b/src/sentry/mediators/sentry_apps/updater.py
@@ -3,8 +3,9 @@ from __future__ import absolute_import
 import six
 
 from collections import Iterable
-from rest_framework.serializers import ValidationError
+from sentry.coreapi import APIError
 
+from sentry.constants import SentryAppStatus
 from sentry.mediators import Mediator, Param
 from sentry.mediators.param import if_param
 
@@ -28,17 +29,10 @@ class Updater(Mediator):
 
     @if_param('scopes')
     def _update_scopes(self):
-        self._validate_only_added_scopes()
+        if self.sentry_app.status == SentryAppStatus.PUBLISHED:
+            raise APIError('Cannot update scopes on published App.')
         self.sentry_app.scope_list = self.scopes
 
     @if_param('webhook_url')
     def _update_webhook_url(self):
         self.sentry_app.webhook_url = self.webhook_url
-
-    def _validate_only_added_scopes(self):
-        if any(self._scopes_removed):
-            raise ValidationError('Cannot remove `scopes` already in use.')
-
-    @property
-    def _scopes_removed(self):
-        return [s for s in self.sentry_app.scope_list if s not in self.scopes]
diff --git a/tests/sentry/api/endpoints/test_sentry_app_details.py b/tests/sentry/api/endpoints/test_sentry_app_details.py
index 6048ba0514..9c3a87e460 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_details.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_details.py
@@ -80,3 +80,81 @@ class GetSentryAppDetailsTest(SentryAppDetailsTest):
 
         response = self.client.get(self.url, format='json')
         assert response.status_code == 404
+
+
+class UpdateSentryAppDetailsTest(SentryAppDetailsTest):
+    @with_feature('organizations:internal-catchall')
+    def test_update_published_app(self):
+        self.login_as(user=self.superuser, superuser=True)
+        response = self.client.put(
+            self.url,
+            data={
+                'name': 'NewName',
+                'webhook_url': 'https://newurl.com',
+            },
+            format='json',
+        )
+        assert response.data == {
+            'name': 'NewName',
+            'scopes': [],
+            'uuid': self.published_app.uuid,
+            'webhook_url': 'https://newurl.com',
+        }
+
+    @with_feature('organizations:internal-catchall')
+    def test_update_unpublished_app(self):
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-sentry-app-details', args=[self.unpublished_app.slug])
+
+        response = self.client.put(
+            url,
+            data={
+                'name': 'NewName',
+                'webhook_url': 'https://newurl.com',
+                'scopes': ('project:read',)
+            },
+            format='json',
+        )
+
+        assert response.status_code == 200
+        assert response.data == {
+            'name': 'NewName',
+            'scopes': ['project:read'],
+            'uuid': self.unpublished_app.uuid,
+            'webhook_url': 'https://newurl.com',
+        }
+
+    @with_feature('organizations:internal-catchall')
+    def test_cannot_update_scopes_published_app(self):
+        self.login_as(user=self.user)
+
+        response = self.client.put(
+            self.url,
+            data={
+                'name': 'NewName',
+                'webhook_url': 'https://newurl.com',
+                'scopes': ('project:read',)
+            },
+            format='json',
+        )
+        assert response.status_code == 500
+
+    @with_feature('organizations:internal-catchall')
+    def test_cannot_update_non_owned_apps(self):
+        self.login_as(user=self.user)
+        app = Creator.run(
+            name='SampleApp',
+            organization=self.super_org,
+            scopes=(),
+            webhook_url='https://sample.com',
+        )
+        url = reverse('sentry-api-0-sentry-app-details', args=[app.slug])
+        response = self.client.put(
+            url,
+            data={
+                'name': 'NewName',
+                'webhook_url': 'https://newurl.com',
+            },
+            format='json',
+        )
+        assert response.status_code == 403
diff --git a/tests/sentry/mediators/sentry_apps/test_updater.py b/tests/sentry/mediators/sentry_apps/test_updater.py
index 4688905dea..46360fd7ee 100644
--- a/tests/sentry/mediators/sentry_apps/test_updater.py
+++ b/tests/sentry/mediators/sentry_apps/test_updater.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
-from rest_framework.serializers import ValidationError
-
+from sentry.coreapi import APIError
+from sentry.constants import SentryAppStatus
 from sentry.mediators.sentry_apps import Creator, Updater
 from sentry.testutils import TestCase
 
@@ -24,17 +24,25 @@ class TestUpdater(TestCase):
         self.updater.call()
         assert self.sentry_app.name == 'A New Thing'
 
-    def test_updates_scopes(self):
+    def test_updates_unpublished_app_scopes(self):
         self.updater.scopes = ('project:read', 'project:write', )
         self.updater.call()
         assert self.sentry_app.get_scopes() == \
             ['project:read', 'project:write']
 
-    def test_rejects_scope_subtractions(self):
-        self.updater.scopes = (None, )
+    def test_doesnt_update_published_app_scopes(self):
+        sentry_app = Creator.run(
+            name='sentry',
+            organization=self.org,
+            scopes=('project:read',),
+            webhook_url='http://example.com',
+        )
+        sentry_app.update(status=SentryAppStatus.PUBLISHED)
+        updater = Updater(sentry_app=sentry_app)
+        updater.scopes = ('project:read', 'project:write', )
 
-        with self.assertRaises(ValidationError):
-            self.updater.call()
+        with self.assertRaises(APIError):
+            updater.call()
 
     def test_updates_webhook_url(self):
         self.updater.webhook_url = 'http://example.com/hooks'
