commit 5efd74fd221a5e9ac4b19e201d5bed27b5daa8de
Author: Chris Montrois <cmontrois@quickleft.com>
Date:   Tue Jul 14 13:33:18 2015 -0600

    Fix memory leaks on Stream
    
    Fixed some memory leaks on the stream caused by several factors including bound
    DOM events that were never released. There are still leaks, but many fewer.
    
    Some components of StreamActions were refactored into components for
    clarity.
    
    The DatePicker was a large source of memory leaks and was non-functional, so we
    commented it out.

diff --git a/src/sentry/static/sentry/app/components/barChart.jsx b/src/sentry/static/sentry/app/components/barChart.jsx
index ebdd2e0a47..9bc17fbc9e 100644
--- a/src/sentry/static/sentry/app/components/barChart.jsx
+++ b/src/sentry/static/sentry/app/components/barChart.jsx
@@ -35,6 +35,7 @@ var BarChart = React.createClass({
 
   componentWillUnmount() {
     this.removeTooltips();
+    $(this.getDOMNode()).unbind();
   },
 
   shouldComponentUpdate(nextProps, nextState) {
diff --git a/src/sentry/static/sentry/app/components/dropdownLink.jsx b/src/sentry/static/sentry/app/components/dropdownLink.jsx
index c51dd4ed4d..08e93a9e9a 100644
--- a/src/sentry/static/sentry/app/components/dropdownLink.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownLink.jsx
@@ -1,9 +1,8 @@
 var joinClasses = require("react/lib/joinClasses");
-
 var classSet = require("react/lib/cx");
 var React = require("react");
-
 var $ = require("jquery");
+
 require("bootstrap/js/dropdown");
 
 var DropdownLink = React.createClass({
@@ -22,14 +21,15 @@ var DropdownLink = React.createClass({
     };
   },
 
-  componentDidMount() {
-    var $container = $(this.refs.container.getDOMNode());
-    var $toggle = $(this.refs.toggle.getDOMNode());
-    if (this.props.onOpen) {
-      $container.on('shown.bs.dropdown', this.props.onOpen);
-    }
-    if (this.props.onClose) {
-      $container.on('hidden.bs.dropdown', this.props.onClose);
+  isOpen() {
+    return this.getDOMNode().classList.contains("open");
+  },
+
+  onToggle(e) {
+    if (this.isOpen()) {
+      this.props.onOpen();
+    } else {
+      this.props.onClose();
     }
   },
 
@@ -45,16 +45,14 @@ var DropdownLink = React.createClass({
     });
 
     return (
-      <span className={joinClasses(this.props.topLevelClasses, topLevelClasses)}
-            ref="container">
-        <a className={joinClasses(this.props.className, className)} ref="toggle"
-           data-toggle="dropdown">
+      <span className={joinClasses(this.props.topLevelClasses, topLevelClasses)}>
+        <a className={joinClasses(this.props.className, className)} data-toggle="dropdown" onClick={this.onToggle}>
           {this.props.title}
           {this.props.caret &&
             <i className="icon-arrow-down" />
           }
         </a>
-        <ul className={joinClasses(this.props.menuClasses, "dropdown-menu")} ref="menu">
+        <ul className={joinClasses(this.props.menuClasses, "dropdown-menu")}>
           {this.props.children}
         </ul>
       </span>
diff --git a/src/sentry/static/sentry/app/components/streamGroup.jsx b/src/sentry/static/sentry/app/components/streamGroup.jsx
index 70cd0140ea..b1c4b7b909 100644
--- a/src/sentry/static/sentry/app/components/streamGroup.jsx
+++ b/src/sentry/static/sentry/app/components/streamGroup.jsx
@@ -119,18 +119,15 @@ var StreamGroup = React.createClass({
     });
   },
 
-  componentDidMount() {
-    var el = this.refs.element;
-    if (!el) return;
-    jQuery(el.getDOMNode()).click((event) => {
-      if (event.target.tagName === 'A')
-        return;
-      if (event.target.tagName === 'INPUT')
-        return;
-      if (jQuery(event.target).parents('a').length !== 0)
-        return;
-      SelectedGroupStore.toggleSelect(this.state.data.id);
-    });
+  toggleSelect(event) {
+    if (event.target.tagName === 'A')
+      return;
+    if (event.target.tagName === 'INPUT')
+      return;
+    if (jQuery(event.target).parents('a').length !== 0)
+      return;
+
+    SelectedGroupStore.toggleSelect(this.state.data.id);
   },
 
   render() {
@@ -161,7 +158,7 @@ var StreamGroup = React.createClass({
     };
 
     return (
-      <li className={className} ref="element">
+      <li className={className} onClick={this.toggleSelect}>
         <div className="col-md-7 col-xs-8 event-details">
           {this.props.canSelect &&
             <div className="checkbox">
diff --git a/src/sentry/static/sentry/app/components/tooltipTrigger.jsx b/src/sentry/static/sentry/app/components/tooltipTrigger.jsx
index 5f27f264ce..6b1d82fc8f 100644
--- a/src/sentry/static/sentry/app/components/tooltipTrigger.jsx
+++ b/src/sentry/static/sentry/app/components/tooltipTrigger.jsx
@@ -36,7 +36,7 @@ var TooltipTrigger = React.createClass({
   componentWillUnmount() {
     var node = $(this.getDOMNode());
     node.tooltip("destroy");
-    node.unbind("show.bs.tooltip", "shown.bs.tooltip", "hide.bs.tooltip", "hidden.bs.tooltip");
+    node.unbind();
   },
 
   render() {
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimeField.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimeField.jsx
index c45513116b..0aa326da46 100644
--- a/src/sentry/static/sentry/app/modules/datepicker/DateTimeField.jsx
+++ b/src/sentry/static/sentry/app/modules/datepicker/DateTimeField.jsx
@@ -261,8 +261,8 @@ var DateTimeField = React.createClass({
   render: function() {
     return (
           <span>
-            {this.renderOverlay()}
-            <DateTimePicker ref="widget"
+            {/*this.renderOverlay()*/}
+            {/*<DateTimePicker ref="widget"
               widgetClasses={this.state.widgetClasses}
               widgetStyle={this.state.widgetStyle}
               showDatePicker={this.state.showDatePicker}
@@ -287,7 +287,7 @@ var DateTimeField = React.createClass({
               setSelectedHour={this.setSelectedHour}
               setSelectedMinute={this.setSelectedMinute}
               togglePicker={this.togglePicker}
-              togglePeriod={this.togglePeriod} />
+              togglePeriod={this.togglePeriod} />*/}
             <span className="input-group date" ref="datetimepicker">
               <input type="text" className="form-control" onChange={this.onChange} value={this.state.selectedDate.format(this.props.inputFormat)} />
               <span className="input-group-addon" onClick={this.onClick} onBlur={this.onBlur} ref="dtpbutton">
diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index 7c3719c6fc..127af2e6da 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -32,17 +32,22 @@ var GroupStore = Reflux.createStore({
     this.listenTo(GroupActions.updateSuccess, this.onUpdateSuccess);
   },
 
-  // TODO(dcramer): this should actually come from an action of some sorts
-  loadInitialData(items) {
+  reset() {
     this.items = [];
     this.statuses = {};
     this.pendingChanges.clear();
+  },
+
+  // TODO(dcramer): this should actually come from an action of some sorts
+  loadInitialData(items) {
+    this.reset();
 
     var itemIds = new Set();
     items.forEach((item) => {
       itemIds.add(item.id);
       this.items.push(item);
     });
+
     this.trigger(itemIds);
   },
 
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
index 830d8417bb..2cc6ba9bf2 100644
--- a/src/sentry/static/sentry/app/stores/teamStore.jsx
+++ b/src/sentry/static/sentry/app/stores/teamStore.jsx
@@ -10,6 +10,10 @@ var TeamStore = Reflux.createStore({
     this.listenTo(TeamActions.updateSuccess, this.onUpdateSuccess);
   },
 
+  reset() {
+    this.items = [];
+  },
+
   loadInitialData(items) {
     this.items = items;
     this.trigger(this.items, 'initial');
@@ -56,4 +60,6 @@ var TeamStore = Reflux.createStore({
   }
 });
 
+window.TeamStore = TeamStore;
+
 module.exports = TeamStore;
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index 6c996b86eb..85cd842120 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -47,6 +47,10 @@ var OrganizationDetails = React.createClass({
     this.fetchData();
   },
 
+  componentWillUnmount() {
+    TeamStore.reset();
+  },
+
   routeDidChange(nextPath, nextParams) {
     var router = this.context.router;
     var params = router.getCurrentParams();
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index f9af6f3b59..6f333f0f33 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -77,6 +77,11 @@ var Stream = React.createClass({
     this.fetchData();
   },
 
+  componentWillUnmount() {
+    this._poller.disable();
+    GroupStore.reset();
+  },
+
   syncStateWithRoute() {
     var currentQuery = this.context.router.getCurrentQuery();
 
@@ -101,11 +106,6 @@ var Stream = React.createClass({
     this.fetchData();
   },
 
-  componentWillUnmount() {
-    this._poller.disable();
-    GroupStore.loadInitialData([]);
-  },
-
   componentDidUpdate(prevProps, prevState) {
     if (prevState.realtimeActive !== this.state.realtimeActive) {
       if (this.state.realtimeActive) {
@@ -305,6 +305,7 @@ var Stream = React.createClass({
       </div>
     );
   }
+
 });
 
 module.exports = Stream;
diff --git a/src/sentry/static/sentry/app/views/stream/actionLink.jsx b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
new file mode 100644
index 0000000000..6fe6ea2e26
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
@@ -0,0 +1,129 @@
+var Modal = require("react-bootstrap/Modal");
+var OverlayMixin = require("react-bootstrap/OverlayMixin");
+var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
+var React = require("react");
+
+var ActionLink = React.createClass({
+  mixins: [OverlayMixin, PureRenderMixin],
+
+  propTypes: {
+    actionLabel: React.PropTypes.string,
+    groupIds: React.PropTypes.instanceOf(Array).isRequired,
+    canActionAll: React.PropTypes.bool.isRequired,
+    confirmLabel: React.PropTypes.string,
+    disabled: React.PropTypes.bool,
+    neverConfirm: React.PropTypes.bool,
+    onAction: React.PropTypes.func.isRequired,
+    onlyIfBulk: React.PropTypes.bool,
+    selectAllActive: React.PropTypes.bool.isRequired
+  },
+
+  getDefaultProps() {
+    return {
+      actionTypes: {},
+      confirmLabel: 'Edit',
+      onlyIfBulk: false,
+      neverConfirm: false,
+      disabled: false
+    };
+  },
+
+  getInitialState() {
+    return {
+      isModalOpen: false
+    };
+  },
+
+  handleToggle() {
+    if (this.props.disabled) {
+      return;
+    }
+    this.setState({
+      isModalOpen: !this.state.isModalOpen
+    });
+  },
+
+  handleActionAll(event) {
+    this.props.onAction(event, this.props.actionTypes.ALL);
+    this.setState({
+      isModalOpen: false
+    });
+  },
+
+  handleActionSelected(event) {
+    this.props.onAction(event, this.props.actionTypes.SELECTED);
+    this.setState({
+      isModalOpen: false
+    });
+  },
+
+  defaultActionLabel(confirmLabel) {
+    return confirmLabel.toLowerCase() + ' these {count} events';
+  },
+
+  render() {
+    var className = this.props.className;
+    if (this.props.disabled) {
+      className += ' disabled';
+    }
+    return (
+      <a className={className} disabled={this.props.disabled} onClick={this.handleToggle}>
+        {this.props.children}
+      </a>
+    );
+  },
+
+  renderOverlay() {
+    if (!this.state.isModalOpen) {
+      return <span/>;
+    }
+
+    var selectedItemIds = SelectedGroupStore.getSelectedIds();
+    if (selectedItemIds.size === 0) {
+      throw new Error('ActionModal rendered without any selected groups');
+    }
+
+    var shouldConfirm = true;
+    // if skipConfirm is set we never actually show the modal
+    if (this.props.neverConfirm === true) {
+      shouldConfirm = false;
+    // if onlyIfBulk is set and we've selected a single item, we skip
+    // showing the modal
+    } else if (this.props.onlyIfBulk === true && !this.props.selectAllActive) {
+      shouldConfirm = false;
+    }
+
+    if (!shouldConfirm) {
+      this.handleActionSelected();
+      this.state.isModalOpen = false;
+      return null;
+    }
+
+    var confirmLabel = this.props.confirmLabel;
+    var actionLabel = this.props.actionLabel || this.defaultActionLabel(confirmLabel);
+    var numEvents = selectedItemIds.size;
+
+    actionLabel = actionLabel.replace('{count}', numEvents);
+
+    return (
+      <Modal title="Please confirm" animation={false} onRequestHide={this.handleToggle}>
+        <div className="modal-body">
+          <p><strong>Are you sure that you want to {actionLabel}?</strong></p>
+          <p>This action cannot be undone.</p>
+        </div>
+        <div className="modal-footer">
+          <button type="button" className="btn btn-default"
+                  onClick={this.handleToggle}>Cancel</button>
+          {this.props.canActionAll &&
+            <button type="button" className="btn btn-danger"
+                    onClick={this.handleActionAll}>{confirmLabel} all recorded events</button>
+          }
+          <button type="button" className="btn btn-primary"
+                  onClick={this.handleActionSelected}>{confirmLabel} {numEvents} selected events</button>
+        </div>
+      </Modal>
+    );
+  }
+});
+
+module.exports = ActionLink;
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index 91110f2480..cd704cfcb4 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -1,322 +1,16 @@
 var React = require("react");
 var Reflux = require("reflux");
 
-var utils = require("../../utils");
-
 var api = require("../../api");
+var ActionLink = require("./actionLink");
 var GroupStore = require("../../stores/groupStore");
-var DateTimeField = require("../../modules/datepicker/DateTimeField");
+var DateSelector = require("./dateSelector");
 var DropdownLink = require("../../components/dropdownLink");
 var IndicatorStore = require("../../stores/indicatorStore");
 var MenuItem = require("../../components/menuItem");
-var Modal = require("react-bootstrap/Modal");
-var OverlayMixin = require("react-bootstrap/OverlayMixin");
 var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
 var SelectedGroupStore = require("../../stores/selectedGroupStore");
-
-var ActionTypes = {
-  ALL: 'all',
-  SELECTED: 'selected'
-};
-
-var ActionLink = React.createClass({
-  mixins: [OverlayMixin, PureRenderMixin],
-
-  propTypes: {
-    actionLabel: React.PropTypes.string,
-    groupIds: React.PropTypes.instanceOf(Array).isRequired,
-    canActionAll: React.PropTypes.bool.isRequired,
-    confirmLabel: React.PropTypes.string,
-    disabled: React.PropTypes.bool,
-    neverConfirm: React.PropTypes.bool,
-    onAction: React.PropTypes.func.isRequired,
-    onlyIfBulk: React.PropTypes.bool,
-    selectAllActive: React.PropTypes.bool.isRequired
-  },
-
-  getDefaultProps() {
-    return {
-      confirmLabel: 'Edit',
-      onlyIfBulk: false,
-      neverConfirm: false,
-      disabled: false
-    };
-  },
-
-  getInitialState() {
-    return {
-      isModalOpen: false
-    };
-  },
-
-  handleToggle() {
-    if (this.props.disabled) {
-      return;
-    }
-    this.setState({
-      isModalOpen: !this.state.isModalOpen
-    });
-  },
-
-  handleActionAll(event) {
-    this.props.onAction(event, ActionTypes.ALL);
-    this.setState({
-      isModalOpen: false
-    });
-  },
-
-  handleActionSelected(event) {
-    this.props.onAction(event, ActionTypes.SELECTED);
-    this.setState({
-      isModalOpen: false
-    });
-  },
-
-  defaultActionLabel(confirmLabel) {
-    return confirmLabel.toLowerCase() + ' these {count} events';
-  },
-
-  render() {
-    var className = this.props.className;
-    if (this.props.disabled) {
-      className += ' disabled';
-    }
-    return (
-      <a className={className} disabled={this.props.disabled} onClick={this.handleToggle}>
-        {this.props.children}
-      </a>
-    );
-  },
-
-  renderOverlay() {
-    if (!this.state.isModalOpen) {
-      return <span/>;
-    }
-
-    var selectedItemIds = SelectedGroupStore.getSelectedIds();
-    if (selectedItemIds.size === 0) {
-      throw new Error('ActionModal rendered without any selected groups');
-    }
-
-    var shouldConfirm = true;
-    // if skipConfirm is set we never actually show the modal
-    if (this.props.neverConfirm === true) {
-      shouldConfirm = false;
-    // if onlyIfBulk is set and we've selected a single item, we skip
-    // showing the modal
-    } else if (this.props.onlyIfBulk === true && !this.props.selectAllActive) {
-      shouldConfirm = false;
-    }
-
-    if (!shouldConfirm) {
-      this.handleActionSelected();
-      this.state.isModalOpen = false;
-      return null;
-    }
-
-    var confirmLabel = this.props.confirmLabel;
-    var actionLabel = this.props.actionLabel || this.defaultActionLabel(confirmLabel);
-    var numEvents = selectedItemIds.size;
-
-    actionLabel = actionLabel.replace('{count}', numEvents);
-
-    return (
-      <Modal title="Please confirm" animation={false} onRequestHide={this.handleToggle}>
-        <div className="modal-body">
-          <p><strong>Are you sure that you want to {actionLabel}?</strong></p>
-          <p>This action cannot be undone.</p>
-        </div>
-        <div className="modal-footer">
-          <button type="button" className="btn btn-default"
-                  onClick={this.handleToggle}>Cancel</button>
-          {this.props.canActionAll &&
-            <button type="button" className="btn btn-danger"
-                    onClick={this.handleActionAll}>{confirmLabel} all recorded events</button>
-          }
-          <button type="button" className="btn btn-primary"
-                  onClick={this.handleActionSelected}>{confirmLabel} {numEvents} selected events</button>
-        </div>
-      </Modal>
-    );
-  }
-});
-
-var SortOptions = React.createClass({
-  contextTypes: {
-    router: React.PropTypes.func
-  },
-
-  mixins: [
-    PureRenderMixin
-  ],
-
-  getInitialState() {
-    var router = this.context.router;
-    var queryParams = router.getCurrentQuery();
-
-    return {
-      sortKey: queryParams.sort || 'date'
-    };
-  },
-
-  getMenuItem(key) {
-    var router = this.context.router;
-    var queryParams = $.extend({}, router.getCurrentQuery());
-    var params = router.getCurrentParams();
-
-    queryParams.sort = key;
-
-    return (
-      <MenuItem to="stream" params={params} query={queryParams}
-                isActive={this.state.sortKey === key}>
-        {this.getSortLabel(key)}
-      </MenuItem>
-    );
-  },
-
-  componentWillReceiveProps(nextProps) {
-    var router = this.context.router;
-    this.setState({
-      sortKey: router.getCurrentQuery().sort || 'date'
-    });
-  },
-
-  getSortLabel(key) {
-    switch (key) {
-      case 'new':
-        return 'First Seen';
-      case 'priority':
-        return 'Priority';
-      case 'freq':
-        return 'Frequency';
-      case 'date':
-        return 'Last Seen';
-    }
-  },
-
-  render() {
-    var dropdownTitle = (
-      <span>
-        <span className="hidden-sm hidden-xs">Sort by:</span>
-        &nbsp; {this.getSortLabel(this.state.sortKey)}
-      </span>
-    );
-
-    return (
-      <DropdownLink
-          key="sort"
-          className="btn btn-sm"
-          btnGroup={true}
-          title={dropdownTitle}>
-        {this.getMenuItem('priority')}
-        {this.getMenuItem('date')}
-        {this.getMenuItem('new')}
-        {this.getMenuItem('freq')}
-      </DropdownLink>
-    );
-  }
-});
-
-var DateSelector = React.createClass({
-  contextTypes: {
-    router: React.PropTypes.func
-  },
-
-  mixins: [
-    PureRenderMixin
-  ],
-
-  getInitialState() {
-    return {
-      dateFrom: null,
-      dateTo: null,
-      dateType: "last_seen"
-    };
-  },
-
-  onClear() {
-    this.setState({
-      dateFrom: null,
-      dateTo: null
-    });
-    this.onApply(e);
-  },
-
-  onDateFromChange(value) {
-    this.setState({
-      dateFrom: value
-    });
-  },
-
-  onDateToChange(value) {
-    this.setState({
-      dateTo: value
-    });
-  },
-
-  onDateTypeChange(value) {
-    this.setState({
-      dateType: value
-    });
-  },
-
-  componentDidMount() {
-    $(this.getDOMNode()).find('.dropdown-toggle').dropdown();
-  },
-
-  onApply(e) {
-    e.preventDefault();
-    var router = this.context.router;
-    var queryParams = router.getCurrentQuery();
-    queryParams.until = this.state.dateTo;
-    queryParams.since = this.state.dateFrom;
-    queryParams.date_type = this.state.dateType;
-    // TODO(dcramer): ideally we wouldn't hardcode stream here
-    router.transitionTo('stream', router.getCurrentParams(), queryParams);
-    $(this.getDOMNode()).find('.dropdown-toggle').dropdown('toggle');
-  },
-
-  render() {
-    return (
-      <div className="dropdown btn-group">
-        <a className="btn btn-sm dropdown-toggle hidden-xs" data-toggle="dropdown">
-          All time
-          <span className="icon-arrow-down"></span>
-        </a>
-        <div className="datepicker-box dropdown-menu" id="daterange">
-          <form method="GET">
-            <div className="input">
-              <DateTimeField onChange={this.onDateFromChange} />
-              to
-              <DateTimeField onChange={this.onDateToChange} />
-              <div className="help-block">All events are represented in UTC time.</div>
-            </div>
-            <div className="submit">
-              <div className="pull-right">
-                <button className="btn btn-default btn-sm"
-                        onClick={this.onClear}>Clear</button>
-                <button className="btn btn-primary btn-sm"
-                        onClick={this.onApply}>Apply</button>
-              </div>
-              <div className="radio-inputs">
-                <label className="radio">
-                  <input type="radio" name="date_type"
-                         onChange={this.onDateTypeChange.bind(this, "last_seen")}
-                         checked={this.state.dateType === "last_seen"} /> Last Seen
-                </label>
-                <label className="radio">
-                  <input type="radio" name="date_type"
-                         onChange={this.onDateTypeChange.bind(this, "first_seen")}
-                         checked={this.state.dateType === "first_seen"} /> First Seen
-                </label>
-              </div>
-            </div>
-          </form>
-        </div>
-      </div>
-    );
-  }
-});
+var SortOptions = require("./sortOptions");
 
 var StreamActions = React.createClass({
   mixins: [
@@ -343,6 +37,15 @@ var StreamActions = React.createClass({
     };
   },
 
+  getDefaultProps() {
+    return {
+      actionTypes: {
+        ALL: 'all',
+        SELECTED: 'selected'
+      }
+    };
+  },
+
   selectStatsPeriod(period) {
     return this.props.onSelectStatsPeriod(period);
   },
@@ -350,9 +53,9 @@ var StreamActions = React.createClass({
   actionSelectedGroups(actionType, callback, data) {
     var selectedIds;
 
-    if (actionType === ActionTypes.ALL) {
+    if (actionType === this.props.actionTypes.ALL) {
       selectedIds = this.props.groupIds;
-    } else if (actionType === ActionTypes.SELECTED) {
+    } else if (actionType === this.props.actionTypes.SELECTED) {
       itemIdSet = SelectedGroupStore.getSelectedIds();
       selectedIds = this.props.groupIds.filter(
         (itemId) => itemIdSet.has(itemId)
@@ -482,6 +185,7 @@ var StreamActions = React.createClass({
           </div>
           <div className="btn-group">
             <ActionLink
+               actionTypes={this.props.actionTypes}
                className="btn btn-default btn-sm action-resolve"
                disabled={!this.state.anySelected}
                onAction={this.onResolve}
@@ -493,6 +197,7 @@ var StreamActions = React.createClass({
               <i aria-hidden="true" className="icon-checkmark"></i>
             </ActionLink>
             <ActionLink
+               actionTypes={this.props.actionTypes}
                className="btn btn-default btn-sm action-bookmark"
                disabled={!this.state.anySelected}
                onAction={this.onBookmark}
@@ -514,6 +219,7 @@ var StreamActions = React.createClass({
               title={<span className="icon-ellipsis"></span>}>
               <MenuItem noAnchor={true}>
                 <ActionLink
+                   actionTypes={this.props.actionTypes}
                    className="action-merge"
                    disabled={!this.state.multiSelected}
                    onAction={this.onMerge}
@@ -526,6 +232,7 @@ var StreamActions = React.createClass({
               </MenuItem>
               <MenuItem noAnchor={true}>
                 <ActionLink
+                   actionTypes={this.props.actionTypes}
                    className="action-remove-bookmark"
                    disabled={!this.state.anySelected}
                    onAction={this.onRemoveBookmark}
@@ -541,6 +248,7 @@ var StreamActions = React.createClass({
               <MenuItem divider={true} />
               <MenuItem noAnchor={true}>
                 <ActionLink
+                   actionTypes={this.props.actionTypes}
                    className="action-delete"
                    disabled={!this.state.anySelected}
                    onAction={this.onDelete}
diff --git a/src/sentry/static/sentry/app/views/stream/dateSelector.jsx b/src/sentry/static/sentry/app/views/stream/dateSelector.jsx
new file mode 100644
index 0000000000..ccbfe40424
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/stream/dateSelector.jsx
@@ -0,0 +1,100 @@
+var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
+var React = require("react");
+
+var DateTimeField = require("../../modules/datepicker/DateTimeField");
+
+var DateSelector = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  mixins: [
+    PureRenderMixin
+  ],
+
+  getInitialState() {
+    return {
+      dateFrom: null,
+      dateTo: null,
+      dateType: "last_seen"
+    };
+  },
+
+  onClear() {
+    this.setState({
+      dateFrom: null,
+      dateTo: null
+    });
+    this.onApply(e);
+  },
+
+  onDateFromChange(value) {
+    this.setState({
+      dateFrom: value
+    });
+  },
+
+  onDateToChange(value) {
+    this.setState({
+      dateTo: value
+    });
+  },
+
+  onDateTypeChange(value) {
+    this.setState({
+      dateType: value
+    });
+  },
+
+  onApply(e) {
+    e.preventDefault();
+    var router = this.context.router;
+    var queryParams = router.getCurrentQuery();
+    queryParams.until = this.state.dateTo;
+    queryParams.since = this.state.dateFrom;
+    queryParams.date_type = this.state.dateType;
+    // TODO(dcramer): ideally we wouldn't hardcode stream here
+    router.transitionTo('stream', router.getCurrentParams(), queryParams);
+  },
+
+  render() {
+    return (
+      <div className="dropdown btn-group">
+        <a ref="toggle" className="btn btn-sm dropdown-toggle hidden-xs" data-toggle="dropdown">
+          All time
+          <span className="icon-arrow-down"></span>
+        </a>
+        <div className="datepicker-box dropdown-menu" id="daterange">
+          <form method="GET">
+            <div className="input">
+              <DateTimeField onChange={this.onDateFromChange} />
+              to
+              <DateTimeField onChange={this.onDateToChange} />
+              <div className="help-block">All events are represented in UTC time.</div>
+            </div>
+            <div className="submit">
+              <div className="pull-right">
+                <button className="btn btn-default btn-sm" onClick={this.onClear}>Clear</button>
+                <button className="btn btn-primary btn-sm" onClick={this.onApply}>Apply</button>
+              </div>
+              <div className="radio-inputs">
+                <label className="radio">
+                  <input type="radio" name="date_type"
+                    onChange={this.onDateTypeChange.bind(this, "last_seen")}
+                    checked={this.state.dateType === "last_seen"} /> Last Seen
+                </label>
+                <label className="radio">
+                  <input type="radio" name="date_type"
+                    onChange={this.onDateTypeChange.bind(this, "first_seen")}
+                    checked={this.state.dateType === "first_seen"} /> First Seen
+                </label>
+              </div>
+            </div>
+          </form>
+        </div>
+      </div>
+    );
+  }
+});
+
+module.exports = DateSelector;
diff --git a/src/sentry/static/sentry/app/views/stream/sortOptions.jsx b/src/sentry/static/sentry/app/views/stream/sortOptions.jsx
new file mode 100644
index 0000000000..a6a73898ad
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/stream/sortOptions.jsx
@@ -0,0 +1,83 @@
+var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
+var React = require("react");
+
+var DropdownLink = require("../../components/dropdownLink");
+var MenuItem = require("../../components/menuItem");
+
+var SortOptions = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  mixins: [
+    PureRenderMixin
+  ],
+
+  getInitialState() {
+    var router = this.context.router;
+    var queryParams = router.getCurrentQuery();
+
+    return {
+      sortKey: queryParams.sort || 'date'
+    };
+  },
+
+  getMenuItem(key) {
+    var router = this.context.router;
+    var queryParams = $.extend({}, router.getCurrentQuery());
+    var params = router.getCurrentParams();
+
+    queryParams.sort = key;
+
+    return (
+      <MenuItem to="stream" params={params} query={queryParams}
+                isActive={this.state.sortKey === key}>
+        {this.getSortLabel(key)}
+      </MenuItem>
+    );
+  },
+
+  componentWillReceiveProps(nextProps) {
+    var router = this.context.router;
+    this.setState({
+      sortKey: router.getCurrentQuery().sort || 'date'
+    });
+  },
+
+  getSortLabel(key) {
+    switch (key) {
+      case 'new':
+        return 'First Seen';
+      case 'priority':
+        return 'Priority';
+      case 'freq':
+        return 'Frequency';
+      case 'date':
+        return 'Last Seen';
+    }
+  },
+
+  render() {
+    var dropdownTitle = (
+      <span>
+        <span className="hidden-sm hidden-xs">Sort by:</span>
+        &nbsp; {this.getSortLabel(this.state.sortKey)}
+      </span>
+    );
+
+    return (
+      <DropdownLink
+          key="sort"
+          className="btn btn-sm"
+          btnGroup={true}
+          title={dropdownTitle}>
+        {this.getMenuItem('priority')}
+        {this.getMenuItem('date')}
+        {this.getMenuItem('new')}
+        {this.getMenuItem('freq')}
+      </DropdownLink>
+    );
+  }
+});
+
+module.exports = SortOptions;
