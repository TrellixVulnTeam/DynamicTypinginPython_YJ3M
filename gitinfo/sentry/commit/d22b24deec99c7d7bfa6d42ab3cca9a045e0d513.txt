commit d22b24deec99c7d7bfa6d42ab3cca9a045e0d513
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon May 7 15:39:22 2018 -0700

    test(acceptance): Remove the submit portion of invite member test (#8341)

diff --git a/tests/acceptance/test_create_organization_member.py b/tests/acceptance/test_create_organization_member.py
index 2b87d8aaf5..fc9040f003 100644
--- a/tests/acceptance/test_create_organization_member.py
+++ b/tests/acceptance/test_create_organization_member.py
@@ -39,7 +39,3 @@ class CreateOrganizationMemberTest(AcceptanceTestCase):
             'input#id-email').send_keys('test@gmail.com, invalidemail')
 
         self.browser.snapshot(name='invite organization member')
-        self.browser.click('.invite-member-submit')
-
-        self.browser.wait_until_not('.loading')
-        self.browser.wait_until('.ref-success', 6)
diff --git a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
index c16f9d689a..f325bc355b 100644
--- a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
+++ b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
@@ -1,6 +1,6 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`CreateProject render() should render loading 1`] = `
+exports[`CreateProject should render loading 1`] = `
 <div>
   <SettingsPageHeading
     title="Add Member to Organization"
@@ -12,7 +12,7 @@ exports[`CreateProject render() should render loading 1`] = `
 </div>
 `;
 
-exports[`CreateProject render() should render roles when available and allowed, and handle submitting 1`] = `
+exports[`CreateProject should render roles when available and allowed, and handle submitting 1`] = `
 <InviteMember
   location={
     Object {
@@ -570,7 +570,7 @@ exports[`CreateProject render() should render roles when available and allowed,
 </InviteMember>
 `;
 
-exports[`CreateProject render() should use invite/add language based on config 1`] = `
+exports[`CreateProject should use invite/add language based on config 1`] = `
 <TextBlock>
   You may add a user by their username if they already have an account. Multiple inputs delimited by commas.
 </TextBlock>
diff --git a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
index eae096e0a6..757fad3e67 100644
--- a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
+++ b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
@@ -9,6 +9,26 @@ jest.mock('jquery');
 
 describe('CreateProject', function() {
   let sandbox;
+  const baseProps = {
+    params: {
+      orgId: 'testOrg',
+    },
+    location: {query: {}},
+  };
+
+  const baseContext = TestStubs.routerContext([
+    {
+      organization: {
+        id: '1',
+        slug: 'testOrg',
+        teams: [
+          {slug: 'bar', id: '1', name: 'bar', hasAccess: true},
+          {slug: 'foo', id: '2', name: 'foo', hasAccess: false},
+        ],
+      },
+      location: {query: {}},
+    },
+  ]);
 
   beforeEach(function() {
     sandbox = sinon.sandbox.create();
@@ -20,162 +40,188 @@ describe('CreateProject', function() {
     sandbox.restore();
   });
 
-  describe('render()', function() {
-    const baseProps = {
-      params: {
-        orgId: 'testOrg',
-      },
-      location: {query: {}},
-    };
+  it('should render loading', function() {
+    let wrapper = shallow(<InviteMember {...baseProps} />, baseContext);
+    expect(wrapper).toMatchSnapshot();
+  });
 
-    const baseContext = TestStubs.routerContext([
-      {
-        organization: {
-          id: '1',
-          slug: 'testOrg',
-          teams: [
-            {slug: 'bar', id: '1', name: 'bar', hasAccess: true},
-            {slug: 'foo', id: '2', name: 'foo', hasAccess: false},
-          ],
-        },
-        location: {query: {}},
+  it('should render no team select when there is only one option', function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/testOrg/members/me/',
+      body: {
+        roles: [
+          {
+            id: '1',
+            name: 'member',
+            desc: 'a normal member',
+            allowed: true,
+          },
+        ],
       },
-    ]);
-
-    it('should render loading', function() {
-      let wrapper = shallow(<InviteMember {...baseProps} />, baseContext);
-      expect(wrapper).toMatchSnapshot();
     });
 
-    it('should render no team select when there is only one option', function() {
-      MockApiClient.addMockResponse({
-        url: '/organizations/testOrg/members/me/',
-        body: {
-          roles: [
-            {
-              id: '1',
-              name: 'member',
-              desc: 'a normal member',
-              allowed: true,
-            },
-          ],
-        },
-      });
-
-      let context = _.cloneDeep(baseContext);
-
-      let team = context.context.organization.teams.slice(0, 1);
-      context.context.organization.teams = team;
-
-      let wrapper = mount(<InviteMember {...baseProps} />, context);
-
-      expect(wrapper.state('selectedTeams').size).toBe(1);
-      expect(wrapper.state('selectedTeams').has(team[0].slug)).toBe(true);
-    });
+    let context = _.cloneDeep(baseContext);
 
-    it('should use invite/add language based on config', function() {
-      sandbox.restore(ConfigStore, 'getConfig');
-      sandbox.stub(ConfigStore, 'getConfig').returns({id: 1, invitesEnabled: false});
+    let team = context.context.organization.teams.slice(0, 1);
+    context.context.organization.teams = team;
 
-      let wrapper = shallow(<InviteMember {...baseProps} />, baseContext);
-      wrapper.setState({
-        loading: false,
-      });
+    let wrapper = mount(<InviteMember {...baseProps} />, context);
 
-      // Lets just target message
-      expect(wrapper.find('TextBlock')).toMatchSnapshot();
+    expect(wrapper.state('selectedTeams').size).toBe(1);
+    expect(wrapper.state('selectedTeams').has(team[0].slug)).toBe(true);
+  });
+
+  it('should use invite/add language based on config', function() {
+    sandbox.restore(ConfigStore, 'getConfig');
+    sandbox.stub(ConfigStore, 'getConfig').returns({id: 1, invitesEnabled: false});
+
+    let wrapper = shallow(<InviteMember {...baseProps} />, baseContext);
+    wrapper.setState({
+      loading: false,
     });
 
-    it('should redirect when no roles available', function() {
-      MockApiClient.addMockResponse({
-        url: '/organizations/testOrg/members/me/',
-        body: {
-          roles: [
-            {
-              id: '1',
-              name: 'member',
-              desc: 'a normal member',
-              allowed: false,
-            },
-          ],
-        },
-      });
-
-      let pushMock = jest.fn();
-      let wrapper = mount(
-        <InviteMember
-          router={{
-            push: pushMock,
-            location: {
-              pathname: '/settings/testOrg/members/new/',
-            },
-          }}
-          {...baseProps}
-        />,
-        baseContext
-      );
-
-      expect(pushMock).toHaveBeenCalledWith('/settings/testOrg/members/');
-      expect(wrapper.state('loading')).toBe(false);
-
-      wrapper = mount(
-        <InviteMember
-          router={{
-            push: pushMock,
-            location: {
-              pathname: '/organizations/testOrg/members/new/',
-            },
-          }}
-          {...baseProps}
-        />,
-        baseContext
-      );
-
-      expect(pushMock).toHaveBeenCalledWith('/organizations/testOrg/members/');
+    // Lets just target message
+    expect(wrapper.find('TextBlock')).toMatchSnapshot();
+  });
+
+  it('should redirect when no roles available', function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/testOrg/members/me/',
+      body: {
+        roles: [
+          {
+            id: '1',
+            name: 'member',
+            desc: 'a normal member',
+            allowed: false,
+          },
+        ],
+      },
     });
 
-    it('should render roles when available and allowed, and handle submitting', function() {
-      MockApiClient.addMockResponse({
-        url: '/organizations/testOrg/members/me/',
-        body: {
-          roles: [
-            {id: '1', name: 'member', desc: 'a normal member', allowed: true},
-            {id: '2', name: 'bar', desc: 'another role', allowed: true},
-          ],
-        },
-      });
+    let pushMock = jest.fn();
+    let wrapper = mount(
+      <InviteMember
+        router={{
+          push: pushMock,
+          location: {
+            pathname: '/settings/testOrg/members/new/',
+          },
+        }}
+        {...baseProps}
+      />,
+      baseContext
+    );
+
+    expect(pushMock).toHaveBeenCalledWith('/settings/testOrg/members/');
+    expect(wrapper.state('loading')).toBe(false);
+
+    wrapper = mount(
+      <InviteMember
+        router={{
+          push: pushMock,
+          location: {
+            pathname: '/organizations/testOrg/members/new/',
+          },
+        }}
+        {...baseProps}
+      />,
+      baseContext
+    );
+
+    expect(pushMock).toHaveBeenCalledWith('/organizations/testOrg/members/');
+  });
 
-      let inviteRequest = {
-        url: '/organizations/testOrg/members/',
-        method: 'POST',
-        statusCode: 200,
-        body: {},
-      };
+  it('should render roles when available and allowed, and handle submitting', function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/testOrg/members/me/',
+      body: {
+        roles: [
+          {id: '1', name: 'member', desc: 'a normal member', allowed: true},
+          {id: '2', name: 'bar', desc: 'another role', allowed: true},
+        ],
+      },
+    });
 
-      let mock = MockApiClient.addMockResponse(inviteRequest);
+    let inviteRequest = {
+      url: '/organizations/testOrg/members/',
+      method: 'POST',
+      statusCode: 200,
+      body: {},
+    };
+
+    let mock = MockApiClient.addMockResponse(inviteRequest);
 
-      let wrapper = mount(<InviteMember {...baseProps} />, baseContext);
+    let wrapper = mount(<InviteMember {...baseProps} />, baseContext);
 
-      expect(wrapper.state('loading')).toBe(false);
+    expect(wrapper.state('loading')).toBe(false);
 
-      let node = wrapper.find('RoleSelect PanelItem').first();
-      node.props().onClick();
+    let node = wrapper.find('RoleSelect PanelItem').first();
+    node.props().onClick();
 
-      node = wrapper.find('.team-choices input').first();
-      node.props().onChange({preventDefault: () => {}});
+    node = wrapper.find('.team-choices input').first();
+    node.props().onChange({preventDefault: () => {}});
 
-      expect(wrapper).toMatchSnapshot();
+    expect(wrapper).toMatchSnapshot();
 
-      node = wrapper.find('.invite-member-submit').first();
-      node.props().onClick({preventDefault: () => {}});
-      expect(wrapper.state('busy')).toBe(false);
+    node = wrapper.find('.invite-member-submit').first();
+    node.props().onClick({preventDefault: () => {}});
+    expect(wrapper.state('busy')).toBe(false);
 
-      wrapper.setState({email: 'test@email.com, test2@email.com, test3@email.com, '});
+    wrapper.setState({email: 'test@email.com, test2@email.com, test3@email.com, '});
+
+    node.props().onClick({preventDefault: () => {}});
+    expect(wrapper.state('busy')).toBe(true);
+    expect(wrapper.state('error')).toBe(undefined);
+    expect(mock).toHaveBeenCalledTimes(3);
+  });
 
-      node.props().onClick({preventDefault: () => {}});
-      expect(wrapper.state('busy')).toBe(true);
-      expect(wrapper.state('error')).toBe(undefined);
-      expect(mock).toHaveBeenCalledTimes(3);
+  it('shows an error when submitting an invalid email', async function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/testOrg/members/me/',
+      body: {
+        roles: [
+          {id: '1', name: 'member', desc: 'a normal member', allowed: true},
+          {id: '2', name: 'bar', desc: 'another role', allowed: true},
+        ],
+      },
     });
+
+    let inviteRequest = {
+      url: '/organizations/testOrg/members/',
+      method: 'POST',
+      statusCode: 400,
+      body: {
+        email: ['Enter a valid email address.'],
+      },
+    };
+
+    let mock = MockApiClient.addMockResponse(inviteRequest);
+
+    let wrapper = mount(<InviteMember {...baseProps} />, baseContext);
+
+    let node = wrapper.find('RoleSelect PanelItem').first();
+    node.props().onClick();
+
+    node = wrapper.find('.team-choices input').first();
+    node.props().onChange({preventDefault: () => {}});
+
+    node = wrapper.find('.invite-member-submit').first();
+    node.props().onClick({preventDefault: () => {}});
+    expect(wrapper.state('busy')).toBe(false);
+
+    wrapper.setState({email: 'invalid-email'});
+
+    node.props().onClick({preventDefault: () => {}});
+    expect(wrapper.state('busy')).toBe(true);
+    expect(wrapper.state('error')).toBe(undefined);
+    expect(mock).toHaveBeenCalledTimes(1);
+
+    await tick();
+    wrapper.update();
+    expect(wrapper.state('error')).toBeDefined();
+    expect(wrapper.find('.has-error')).toHaveLength(1);
+    expect(wrapper.find('.has-error #id-email')).toHaveLength(1);
+    expect(wrapper.find('.has-error .error').text()).toBe('Enter a valid email address.');
   });
 });
