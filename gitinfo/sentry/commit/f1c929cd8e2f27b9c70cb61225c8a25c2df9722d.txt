commit f1c929cd8e2f27b9c70cb61225c8a25c2df9722d
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Feb 10 22:01:48 2017 +0100

    WIP frame caching

diff --git a/src/sentry/stacktraces.py b/src/sentry/stacktraces.py
index 088e34839f..620b0fa48d 100644
--- a/src/sentry/stacktraces.py
+++ b/src/sentry/stacktraces.py
@@ -7,6 +7,7 @@ from sentry.models import Project
 from sentry.utils import metrics
 from sentry.utils.safe import safe_execute
 from collections import namedtuple
+from six import integer_types
 
 
 logger = logging.getLogger(__name__)
@@ -30,6 +31,9 @@ class StacktraceProcessor(object):
     def close(self):
         pass
 
+    def get_frame_cache_attributes(self):
+        return None
+
     def preprocess_related_data(self):
         return False
 
@@ -40,11 +44,6 @@ class StacktraceProcessor(object):
         pass
 
 
-def get_frame_cache_key(frame):
-    h = hashlib.md5()
-    return h.hexdigest()
-
-
 def find_stacktraces_in_data(data):
     """Finds all stracktraces in a given data blob and returns it
     together with some meta information.
@@ -119,6 +118,31 @@ def get_processors_for_stacktraces(data, infos):
     return processors
 
 
+def _get_frame_cache_key(processor, frame):
+    attributes = processor.get_frame_cache_attributes(frame)
+    if attributes is None:
+        return None
+
+    h = hashlib.md5()
+
+    def _hash_value(value):
+        if value is None:
+            h.update(b'\x00')
+        elif value is True:
+            h.update(b'\x01')
+        elif value is False:
+            h.update(b'\x02')
+        elif isinstance(value, integer_types):
+            h.update(str(value).encode('ascii') + b'\x00')
+
+    for attr_name in attributes:
+        value = frame.get(attr_name)
+        h.update(attr_name.encode('ascii') + b'\x00')
+        _hash_value(value)
+
+    return h.hexdigest()
+
+
 def get_processable_frames(stacktrace_info, processors):
     frame_count = len(stacktrace_info.stacktrace['frames'])
     rv = []
@@ -128,7 +152,7 @@ def get_processable_frames(stacktrace_info, processors):
         if processor is not None:
             rv.append(ProcessableFrame(
                 frame, frame_count - idx - 1, processor,
-                stacktrace_info, get_frame_cache_key(frame)))
+                stacktrace_info, _get_frame_cache_key(processor, frame)))
     return rv
 
 
