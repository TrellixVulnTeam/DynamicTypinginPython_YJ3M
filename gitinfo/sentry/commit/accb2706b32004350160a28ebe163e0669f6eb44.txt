commit accb2706b32004350160a28ebe163e0669f6eb44
Author: Jan Michael Auer <jan.auer@sentry.io>
Date:   Tue Mar 10 10:57:00 2020 +0100

    feat(ingest): Option to process transactions in workers (#17531)
    
    Adds an option to process transactions in celery again. The default is still inlined processing.

diff --git a/src/sentry/ingest/ingest_consumer.py b/src/sentry/ingest/ingest_consumer.py
index 171bdbd9b8..e2d7d11100 100644
--- a/src/sentry/ingest/ingest_consumer.py
+++ b/src/sentry/ingest/ingest_consumer.py
@@ -11,7 +11,7 @@ import multiprocessing as _multiprocessing
 from django.conf import settings
 from django.core.cache import cache
 
-from sentry import eventstore, features
+from sentry import eventstore, features, options
 from sentry.cache import default_cache
 from sentry.models import Project, File, EventAttachment
 from sentry.signals import event_accepted
@@ -114,6 +114,11 @@ class IngestConsumerWorker(AbstractBatchWorker):
 
 @metrics.wraps("ingest_consumer.process_transactions_batch")
 def process_transactions_batch(messages, projects):
+    if options.get("store.transactions-celery") is True:
+        for message in messages:
+            process_event(message, projects)
+        return
+
     jobs = []
     for message in messages:
         payload = message["payload"]
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index a4077239c2..531f978694 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -174,6 +174,10 @@ register("store.eventstream-per-type-topic", default=False, flags=FLAG_PRIORITIZ
 # regards to filter responses.
 register("store.lie-about-filter-status", default=False)
 
+# Toggles between processing transactions directly in the ingest consumer
+# (``False``) and spawning a save_event task (``True``).
+register("store.transactions-celery", default=False)
+
 # Symbolicator refactors
 # - Disabling minidump stackwalking in endpoints
 register("symbolicator.minidump-refactor-projects-opt-in", type=Sequence, default=[])  # unused
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index 11f0da0471..ae69a5e691 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -45,6 +45,9 @@ def should_process(data):
     """Quick check if processing is needed at all."""
     from sentry.plugins.base import plugins
 
+    if data.get("type") == "transaction":
+        return False
+
     for plugin in plugins.all(version=2):
         processors = safe_execute(
             plugin.get_event_preprocessors, data=data, _with_transaction=False
diff --git a/tests/sentry/ingest/ingest_consumer/test_ingest_consumer_kafka.py b/tests/sentry/ingest/ingest_consumer/test_ingest_consumer_kafka.py
index d08f103b9f..462c8bd135 100644
--- a/tests/sentry/ingest/ingest_consumer/test_ingest_consumer_kafka.py
+++ b/tests/sentry/ingest/ingest_consumer/test_ingest_consumer_kafka.py
@@ -8,7 +8,7 @@ import pytest
 
 from django.conf import settings
 
-from sentry import eventstore
+from sentry import eventstore, options
 from sentry.event_manager import EventManager
 from sentry.ingest.ingest_consumer import ConsumerType, get_ingest_consumer
 from sentry.utils import json
@@ -70,8 +70,17 @@ def get_test_message(request, default_project):
 
 
 @pytest.mark.django_db(transaction=True)
+@pytest.mark.parametrize(
+    "inline_transactions", [True, False], ids=["inline_transactions", "worker_transactions"]
+)
 def test_ingest_consumer_reads_from_topic_and_calls_celery_task(
-    task_runner, kafka_producer, kafka_admin, requires_kafka, default_project, get_test_message
+    task_runner,
+    kafka_producer,
+    kafka_admin,
+    requires_kafka,
+    default_project,
+    get_test_message,
+    inline_transactions,
 ):
     group_id = "test-consumer"
     topic_event_name = ConsumerType.get_topic_name(ConsumerType.Events)
@@ -94,6 +103,7 @@ def test_ingest_consumer_reads_from_topic_and_calls_celery_task(
         auto_offset_reset="earliest",
     )
 
+    options.set("store.transactions-celery", not inline_transactions)
     with task_runner():
         i = 0
         while i < MAX_POLL_ITERATIONS:
