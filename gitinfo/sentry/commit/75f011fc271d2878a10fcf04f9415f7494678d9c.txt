commit 75f011fc271d2878a10fcf04f9415f7494678d9c
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Jun 5 17:02:52 2019 -0700

    ref(sentry10): Remove sentry 9 stream components (#13528)

diff --git a/src/sentry/static/sentry/app/actionCreators/tags.jsx b/src/sentry/static/sentry/app/actionCreators/tags.jsx
index 9399d721ce..a5de4f2490 100644
--- a/src/sentry/static/sentry/app/actionCreators/tags.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/tags.jsx
@@ -1,4 +1,3 @@
-import {Client} from 'app/api';
 import {t} from 'app/locale';
 import TagStore from 'app/stores/tagStore';
 import TagActions from 'app/actions/tagActions';
@@ -61,21 +60,6 @@ function tagFetchSuccess(tags) {
   TagActions.loadTagsSuccess(trimmedTags);
 }
 
-/**
- * Fetch tags for a single project
- */
-export function fetchProjectTags(orgId, projectId) {
-  TagStore.reset();
-  TagActions.loadTags();
-  const api = new Client();
-  const url = `/projects/${orgId}/${projectId}/tags/`;
-
-  const promise = api.requestPromise(url);
-  promise.then(tagFetchSuccess, TagActions.loadTagsError);
-
-  return promise;
-}
-
 /**
  * Fetch tag values for a single project. Used for sentry9 views.
  */
diff --git a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
index fc3bce9047..3aa2776abc 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
@@ -19,7 +19,7 @@ import {
 } from 'app/actionCreators/savedSearches';
 import {t} from 'app/locale';
 import Button from 'app/components/button';
-import CreateSavedSearchButton from 'app/views/stream/createSavedSearchButton';
+import CreateSavedSearchButton from 'app/views/organizationStream/createSavedSearchButton';
 import InlineSvg from 'app/components/inlineSvg';
 import MemberListStore from 'app/stores/memberListStore';
 import SentryTypes from 'app/sentryTypes';
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 5eb79b5bb4..73c56eae48 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1155,27 +1155,9 @@ function routes() {
         </Route>
 
         <Route path=":projectId/" component={errorHandler(ProjectDetails)}>
-          <IndexRoute
-            componentPromise={() =>
-              import(/* webpackChunkName: "Stream" */ './views/stream')
-            }
-            component={errorHandler(LazyLoad)}
-          />
-          <Route
-            path="issues/"
-            componentPromise={() =>
-              import(/* webpackChunkName: "Stream" */ './views/stream')
-            }
-            component={errorHandler(LazyLoad)}
-          />
-
-          <Route
-            path="searches/:searchId/"
-            componentPromise={() =>
-              import(/* webpackChunkName: "Stream" */ './views/stream')
-            }
-            component={errorHandler(LazyLoad)}
-          />
+          <IndexRedirect to="/organizations/:orgId/issues/" />
+          <Redirect from="issues/" to="/organizations/:orgId/issues/" />
+          <Redirect from="searches/:searchId/" to="/organizations/:orgId/issues/" />
           <Route
             path="dashboard/"
             componentPromise={() =>
@@ -1234,9 +1216,7 @@ function routes() {
               component={errorHandler(LazyLoad)}
             />
           </Route>
-
           <Redirect from="user-feedback/" to="/organizations/:orgId/user-feedback/" />
-
           <Route path="settings/" component={errorHandler(ProjectSettings)}>
             <Redirect from="teams/" to="/settings/:orgId/projects/:projectId/teams/" />
             <Redirect from="alerts/" to="/settings/:orgId/projects/:projectId/alerts/" />
@@ -1344,7 +1324,6 @@ function routes() {
             />
             {projectSettingsRoutes}
           </Route>
-
           <Redirect from="group/:groupId/" to="issues/:groupId/" />
           <Route
             path="issues/:groupId/"
@@ -1372,7 +1351,6 @@ function routes() {
             <Route path="similar/" component={errorHandler(ProjectGroupSimilarView)} />
             <Route path="merged/" component={errorHandler(ProjectGroupMergedView)} />
           </Route>
-
           <Route path="events/:eventId/" component={errorHandler(ProjectEventRedirect)} />
         </Route>
       </Route>
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/organizationStream/actions.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/stream/actions.jsx
rename to src/sentry/static/sentry/app/views/organizationStream/actions.jsx
diff --git a/src/sentry/static/sentry/app/views/stream/createSavedSearchButton.jsx b/src/sentry/static/sentry/app/views/organizationStream/createSavedSearchButton.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/stream/createSavedSearchButton.jsx
rename to src/sentry/static/sentry/app/views/organizationStream/createSavedSearchButton.jsx
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/organizationStream/filters.jsx
similarity index 99%
rename from src/sentry/static/sentry/app/views/stream/filters.jsx
rename to src/sentry/static/sentry/app/views/organizationStream/filters.jsx
index 416e90481c..730c62b270 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/filters.jsx
@@ -40,7 +40,6 @@ class StreamFilters extends React.Component {
   };
 
   static defaultProps = {
-    projectId: null,
     sort: '',
     query: null,
     onSortChange: function() {},
diff --git a/src/sentry/static/sentry/app/views/stream/organizationSavedSearchSelector.jsx b/src/sentry/static/sentry/app/views/organizationStream/organizationSavedSearchSelector.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/stream/organizationSavedSearchSelector.jsx
rename to src/sentry/static/sentry/app/views/organizationStream/organizationSavedSearchSelector.jsx
diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index 18106db94b..72889f5387 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -31,10 +31,7 @@ import Pagination from 'app/components/pagination';
 import ProcessingIssueList from 'app/components/stream/processingIssueList';
 import SelectedGroupStore from 'app/stores/selectedGroupStore';
 import SentryTypes from 'app/sentryTypes';
-import StreamActions from 'app/views/stream/actions';
-import StreamFilters from 'app/views/stream/filters';
 import StreamGroup from 'app/components/stream/group';
-import StreamSidebar from 'app/views/stream/sidebar';
 import TagStore from 'app/stores/tagStore';
 import parseApiError from 'app/utils/parseApiError';
 import parseLinkHeader from 'app/utils/parseLinkHeader';
@@ -42,6 +39,9 @@ import utils from 'app/utils';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 import withOrganization from 'app/utils/withOrganization';
 import withSavedSearches from 'app/utils/withSavedSearches';
+import StreamActions from './actions';
+import StreamFilters from './filters';
+import StreamSidebar from './sidebar';
 
 const MAX_ITEMS = 25;
 const DEFAULT_QUERY = 'is:unresolved';
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/organizationStream/searchBar.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/stream/searchBar.jsx
rename to src/sentry/static/sentry/app/views/organizationStream/searchBar.jsx
diff --git a/src/sentry/static/sentry/app/views/stream/sidebar.jsx b/src/sentry/static/sentry/app/views/organizationStream/sidebar.jsx
similarity index 98%
rename from src/sentry/static/sentry/app/views/stream/sidebar.jsx
rename to src/sentry/static/sentry/app/views/organizationStream/sidebar.jsx
index 54c8a6d57d..1196e70b00 100644
--- a/src/sentry/static/sentry/app/views/stream/sidebar.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/sidebar.jsx
@@ -2,10 +2,10 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
 import _ from 'lodash';
-import StreamTagFilter from 'app/views/stream/tagFilter';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import {queryToObj, objToQuery} from 'app/utils/stream';
 import {t} from 'app/locale';
+import StreamTagFilter from './tagFilter';
 
 const TEXT_FILTER_DEBOUNCE_IN_MS = 300;
 
diff --git a/src/sentry/static/sentry/app/views/stream/sortOptions.jsx b/src/sentry/static/sentry/app/views/organizationStream/sortOptions.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/stream/sortOptions.jsx
rename to src/sentry/static/sentry/app/views/organizationStream/sortOptions.jsx
diff --git a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx b/src/sentry/static/sentry/app/views/organizationStream/tagFilter.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/stream/tagFilter.jsx
rename to src/sentry/static/sentry/app/views/organizationStream/tagFilter.jsx
diff --git a/src/sentry/static/sentry/app/views/stream/index.jsx b/src/sentry/static/sentry/app/views/stream/index.jsx
deleted file mode 100644
index fb960a6ef5..0000000000
--- a/src/sentry/static/sentry/app/views/stream/index.jsx
+++ /dev/null
@@ -1,57 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import Reflux from 'reflux';
-import createReactClass from 'create-react-class';
-import {omit} from 'lodash';
-
-import SentryTypes from 'app/sentryTypes';
-import ProjectState from 'app/mixins/projectState';
-import TagStore from 'app/stores/tagStore';
-import withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';
-import Stream from 'app/views/stream/stream';
-import {fetchProjectTags} from 'app/actionCreators/tags';
-
-const StreamContainer = createReactClass({
-  displayName: 'StreamContainer',
-  propTypes: {
-    environment: SentryTypes.Environment,
-    setProjectNavSection: PropTypes.func,
-  },
-
-  mixins: [ProjectState, Reflux.listenTo(TagStore, 'onTagsChange')],
-
-  getInitialState() {
-    return {
-      tags: TagStore.getAllTags(),
-      tagsLoading: true,
-    };
-  },
-
-  componentWillMount() {
-    const {orgId, projectId} = this.props.params;
-    this.props.setProjectNavSection('stream');
-    fetchProjectTags(orgId, projectId);
-  },
-
-  onTagsChange(tags) {
-    this.setState({
-      tags,
-      tagsLoading: false,
-    });
-  },
-
-  // We don't want the environment tag to be visible to the user
-  filterTags(tags) {
-    return omit(tags, 'environment');
-  },
-
-  render() {
-    const filteredTags = this.filterTags(this.state.tags);
-
-    return (
-      <Stream tags={filteredTags} tagsLoading={this.state.tagsLoading} {...this.props} />
-    );
-  },
-});
-
-export default withEnvironmentInQueryString(StreamContainer);
diff --git a/src/sentry/static/sentry/app/views/stream/stream.jsx b/src/sentry/static/sentry/app/views/stream/stream.jsx
deleted file mode 100644
index 8d2f950fe1..0000000000
--- a/src/sentry/static/sentry/app/views/stream/stream.jsx
+++ /dev/null
@@ -1,765 +0,0 @@
-import {browserHistory} from 'react-router';
-import {omit, isEqual, sortBy} from 'lodash';
-import Cookies from 'js-cookie';
-import DocumentTitle from 'react-document-title';
-import PropTypes from 'prop-types';
-import React from 'react';
-import Reflux from 'reflux';
-import classNames from 'classnames';
-import createReactClass from 'create-react-class';
-import qs from 'query-string';
-
-import {Panel, PanelBody} from 'app/components/panels';
-import {analytics} from 'app/utils/analytics';
-import {fetchProjectSavedSearches} from 'app/actionCreators/savedSearches';
-import {fetchProjectTagValues} from 'app/actionCreators/tags';
-import {
-  setActiveEnvironment,
-  setActiveEnvironmentName,
-} from 'app/actionCreators/environments';
-import {t, tct} from 'app/locale';
-import ConfigStore from 'app/stores/configStore';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
-import EnvironmentStore from 'app/stores/environmentStore';
-import ErrorRobot from 'app/components/errorRobot';
-import Feature from 'app/components/acl/feature';
-import GroupStore from 'app/stores/groupStore';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import Pagination from 'app/components/pagination';
-import ProcessingIssueList from 'app/components/stream/processingIssueList';
-import ProjectState from 'app/mixins/projectState';
-import SentryTypes from 'app/sentryTypes';
-import StreamActions from 'app/views/stream/actions';
-import StreamFilters from 'app/views/stream/filters';
-import StreamGroup from 'app/components/stream/group';
-import StreamSidebar from 'app/views/stream/sidebar';
-import parseApiError from 'app/utils/parseApiError';
-import parseLinkHeader from 'app/utils/parseLinkHeader';
-import queryString from 'app/utils/queryString';
-import utils from 'app/utils';
-import withApi from 'app/utils/withApi';
-
-const MAX_ITEMS = 25;
-const DEFAULT_SORT = 'date';
-const DEFAULT_STATS_PERIOD = '24h';
-const STATS_PERIODS = new Set(['14d', '24h']);
-
-const Stream = createReactClass({
-  displayName: 'Stream',
-
-  propTypes: {
-    api: PropTypes.object,
-    environment: SentryTypes.Environment,
-    tags: PropTypes.object,
-    tagsLoading: PropTypes.bool,
-  },
-
-  mixins: [Reflux.listenTo(GroupStore, 'onGroupChange'), ProjectState],
-
-  getInitialState() {
-    const searchId = this.props.params.searchId || null;
-    const project = this.getProject();
-    const realtimeActiveCookie = Cookies.get('realtimeActive');
-    const realtimeActive =
-      typeof realtimeActiveCookie === 'undefined'
-        ? project && !project.firstEvent
-        : realtimeActiveCookie === 'true';
-
-    const currentQuery = this.props.location.query || {};
-    const sort = 'sort' in currentQuery ? currentQuery.sort : DEFAULT_SORT;
-
-    const hasQuery = 'query' in currentQuery;
-    const statsPeriod = STATS_PERIODS.has(currentQuery.statsPeriod)
-      ? currentQuery.statsPeriod
-      : DEFAULT_STATS_PERIOD;
-
-    return {
-      groupIds: [],
-      isDefaultSearch: false,
-      searchId: hasQuery ? null : searchId,
-      // if we have no query then we can go ahead and fetch data
-      loading: !!searchId || !hasQuery,
-      savedSearchLoading: true,
-      savedSearchList: [],
-      selectAllActive: false,
-      multiSelected: false,
-      anySelected: false,
-      statsPeriod,
-      realtimeActive,
-      pageLinks: '',
-      queryCount: null,
-      dataLoading: true,
-      error: false,
-      query: hasQuery ? currentQuery.query : '',
-      sort,
-      isSidebarVisible: false,
-      environment: this.props.environment,
-    };
-  },
-
-  componentWillMount() {
-    const organization = this.getOrganization();
-    const hasSentry10 = new Set(organization.features).has('sentry10');
-
-    if (hasSentry10) {
-      const project = this.getProject();
-      const {location} = this.props;
-      const query = qs.parse(location.search);
-      query.project = project.id;
-
-      browserHistory.replace(
-        `/organizations/${organization.slug}/issues/?${qs.stringify(query)}`
-      );
-    }
-
-    this._streamManager = new utils.StreamManager(GroupStore);
-    this._poller = new utils.CursorPoller({
-      success: this.onRealtimePoll,
-    });
-
-    this.fetchSavedSearches();
-    if (!this.state.loading) {
-      this.fetchData();
-    }
-  },
-
-  componentWillReceiveProps(nextProps) {
-    if (nextProps.environment !== this.props.environment) {
-      this.setState(
-        {
-          environment: nextProps.environment,
-        },
-        this.fetchData
-      );
-    }
-
-    // you cannot apply both a query and a saved search (our routes do not
-    // support it), so the searchId takes priority
-    const nextSearchId = nextProps.params.searchId;
-
-    const searchIdChanged = this.state.isDefaultSearch
-      ? nextSearchId !== undefined
-      : nextSearchId !== this.props.params.searchId;
-
-    // We are using qs.parse with location.search since this.props.location.query
-    // returns the same value as nextProps.location.query
-    const currentSearchTerm = qs.parse(this.props.location.search);
-    const nextSearchTerm = qs.parse(nextProps.location.search);
-
-    const searchTermChanged = !isEqual(
-      omit(currentSearchTerm, 'environment'),
-      omit(nextSearchTerm, 'environment')
-    );
-
-    if (searchIdChanged || searchTermChanged) {
-      this.setState(this.getQueryState(nextProps), this.fetchData);
-    }
-  },
-
-  componentDidUpdate(prevProps, prevState) {
-    if (prevState.realtimeActive !== this.state.realtimeActive) {
-      // User toggled realtime button
-      if (this.state.realtimeActive) {
-        this.resumePolling();
-      } else {
-        this._poller.disable();
-      }
-    }
-  },
-
-  componentWillUnmount() {
-    this._poller.disable();
-    GroupStore.reset();
-  },
-
-  fetchSavedSearches() {
-    this.setState({
-      savedSearchLoading: true,
-    });
-
-    const {orgId, projectId} = this.props.params;
-    const {searchId} = this.state;
-
-    fetchProjectSavedSearches(this.props.api, orgId, projectId).then(
-      data => {
-        const newState = {
-          isDefaultSearch: false,
-          savedSearchLoading: false,
-          savedSearchList: data,
-          loading: false,
-        };
-        const needsData = this.state.loading;
-        if (searchId) {
-          const match = data.find(search => search.id === searchId);
-
-          if (match) {
-            newState.query = match.query;
-          } else {
-            this.setState(
-              {
-                savedSearchLoading: false,
-                savedSearchList: data,
-                searchId: null,
-                isDefaultSearch: true,
-              },
-              this.transitionTo
-            );
-          }
-        } else if (!this.hasQuery()) {
-          const defaultResult =
-            data.find(search => search.isUserDefault) ||
-            data.find(search => search.isDefault);
-
-          if (defaultResult) {
-            // Check if there is an environment specified in the default search
-            const envName = queryString.getQueryEnvironment(defaultResult.query);
-            const env = EnvironmentStore.getByName(envName);
-            if (env) {
-              setActiveEnvironment(env);
-            }
-
-            newState.searchId = defaultResult.id;
-
-            newState.query = queryString.getQueryStringWithoutEnvironment(
-              defaultResult.query
-            );
-            newState.isDefaultSearch = true;
-          }
-        }
-
-        this.setState(newState, needsData ? this.fetchData : null);
-      },
-      error => {
-        // Fail gracefully by still loading the stream
-        this.setState({
-          loading: false,
-          isDefaultSearch: null,
-          searchId: null,
-          savedSearchList: [],
-          savedSearchLoading: false,
-          query: '',
-        });
-      }
-    );
-  },
-
-  onSavedSearchCreate(data) {
-    const savedSearchList = this.state.savedSearchList;
-    savedSearchList.push(data);
-
-    this.setState(
-      {
-        savedSearchList: sortBy(savedSearchList, ['name']),
-        searchId: data.id,
-      },
-      this.transitionTo
-    );
-  },
-
-  onSavedSearchSelect(search) {
-    this.setState({searchId: search.id}, this.transitionTo);
-  },
-
-  getQueryState(props) {
-    const currentQuery = props.location.query || {};
-
-    const hasQuery = 'query' in currentQuery;
-
-    const searchId = hasQuery
-      ? null
-      : props.params.searchId || this.state.searchId || null;
-
-    const sort = 'sort' in currentQuery ? currentQuery.sort : DEFAULT_SORT;
-
-    const statsPeriod = STATS_PERIODS.has(currentQuery.statsPeriod)
-      ? currentQuery.statsPeriod
-      : DEFAULT_STATS_PERIOD;
-
-    const newState = {
-      sort,
-      statsPeriod,
-      query: hasQuery ? currentQuery.query : '',
-      searchId,
-      isDefaultSearch: false,
-    };
-
-    if (searchId) {
-      const searchResult = this.state.savedSearchList.find(
-        search => search.id === searchId
-      );
-      if (searchResult) {
-        // New behavior is that we no longer support environment in saved search
-        // We check if the query contains a valid environment and update the global setting if so
-        // We'll always strip environment from the querystring whether valid or not
-        const queryEnv = queryString.getQueryEnvironment(searchResult.query);
-        if (queryEnv) {
-          const env = EnvironmentStore.getByName(queryEnv);
-          setActiveEnvironment(env);
-        }
-        newState.query = queryString.getQueryStringWithoutEnvironment(searchResult.query);
-
-        if (this.state.searchId && !props.params.searchId) {
-          newState.isDefaultSearch = true;
-        }
-      } else {
-        newState.searchId = null;
-      }
-    } else if (!hasQuery) {
-      const defaultResult = this.state.savedSearchList.find(search => search.isDefault);
-      if (defaultResult) {
-        newState.isDefaultSearch = true;
-        newState.searchId = defaultResult.id;
-        newState.query = defaultResult.query;
-      } else {
-        newState.searchId = null;
-      }
-    }
-    newState.loading = false;
-    return newState;
-  },
-
-  hasQuery(props) {
-    props = props || this.props;
-    const currentQuery = props.location.query || {};
-    return 'query' in currentQuery;
-  },
-
-  fetchData() {
-    GroupStore.loadInitialData([]);
-
-    this.setState({
-      dataLoading: true,
-      queryCount: null,
-      error: false,
-    });
-
-    const url = this.getGroupListEndpoint();
-
-    // Remove leading and trailing whitespace
-    const query = queryString.formatQueryString(this.state.query);
-
-    const {environment} = this.state;
-
-    const requestParams = {
-      query,
-      limit: MAX_ITEMS,
-      sort: this.state.sort,
-      statsPeriod: this.state.statsPeriod,
-      shortIdLookup: '1',
-    };
-
-    // Always keep the global active environment in sync with the queried environment
-    // The global environment wins unless there one is specified by the saved search
-    const queryEnvironment = queryString.getQueryEnvironment(query);
-
-    if (queryEnvironment !== null) {
-      requestParams.environment = queryEnvironment;
-    } else if (environment) {
-      requestParams.environment = environment.name;
-    }
-
-    const currentQuery = this.props.location.query || {};
-    if ('cursor' in currentQuery) {
-      requestParams.cursor = currentQuery.cursor;
-    }
-
-    if (this.lastRequest) {
-      this.lastRequest.cancel();
-    }
-
-    this._poller.disable();
-
-    this.lastRequest = this.props.api.request(url, {
-      method: 'GET',
-      data: requestParams,
-      success: (data, ignore, jqXHR) => {
-        // if this is a direct hit, we redirect to the intended result directly.
-        // we have to use the project slug from the result data instead of the
-        // the current props one as the shortIdLookup can return results for
-        // different projects.
-        if (jqXHR.getResponseHeader('X-Sentry-Direct-Hit') === '1') {
-          if (data && data[0].matchingEventId) {
-            const {project, id, matchingEventId, matchingEventEnvironment} = data[0];
-            let redirect = `/${this.props.params.orgId}/${
-              project.slug
-            }/issues/${id}/events/${matchingEventId}/`;
-            // Also direct to the environment of this specific event if this
-            // key exists. We need to explicitly check against undefined becasue
-            // an environment name may be an empty string, which is perfectly valid.
-            if (typeof matchingEventEnvironment !== 'undefined') {
-              setActiveEnvironmentName(matchingEventEnvironment);
-              redirect = `${redirect}?${qs.stringify({
-                environment: matchingEventEnvironment,
-              })}`;
-            }
-            return void browserHistory.replace(redirect);
-          }
-        }
-
-        this._streamManager.push(data);
-
-        const queryCount = jqXHR.getResponseHeader('X-Hits');
-        const queryMaxCount = jqXHR.getResponseHeader('X-Max-Hits');
-
-        return void this.setState({
-          error: false,
-          dataLoading: false,
-          query,
-          queryCount:
-            typeof queryCount !== 'undefined' ? parseInt(queryCount, 10) || 0 : 0,
-          queryMaxCount:
-            typeof queryMaxCount !== 'undefined' ? parseInt(queryMaxCount, 10) || 0 : 0,
-          pageLinks: jqXHR.getResponseHeader('Link'),
-        });
-      },
-      error: err => {
-        this.setState({
-          error: parseApiError(err),
-          dataLoading: false,
-        });
-      },
-      complete: jqXHR => {
-        this.lastRequest = null;
-
-        this.resumePolling();
-      },
-    });
-  },
-
-  resumePolling() {
-    if (!this.state.pageLinks) {
-      return;
-    }
-
-    // Only resume polling if we're on the first page of results
-    const links = parseLinkHeader(this.state.pageLinks);
-    if (links && !links.previous.results && this.state.realtimeActive) {
-      this._poller.setEndpoint(links.previous.href);
-      this._poller.enable();
-    }
-  },
-
-  getGroupListEndpoint() {
-    const params = this.props.params;
-
-    return '/projects/' + params.orgId + '/' + params.projectId + '/issues/';
-  },
-
-  onRealtimeChange(realtime) {
-    Cookies.set('realtimeActive', realtime.toString());
-    this.setState({
-      realtimeActive: realtime,
-    });
-  },
-
-  onSelectStatsPeriod(period) {
-    if (period != this.state.statsPeriod) {
-      // TODO(dcramer): all charts should now suggest "loading"
-      this.setState(
-        {
-          statsPeriod: period,
-        },
-        function() {
-          this.transitionTo();
-        }
-      );
-    }
-  },
-
-  onRealtimePoll(data, links) {
-    this._streamManager.unshift(data);
-    if (!utils.valueIsEqual(this.state.pageLinks, links, true)) {
-      this.setState({
-        pageLinks: links,
-      });
-    }
-  },
-
-  onGroupChange() {
-    const groupIds = this._streamManager.getAllItems().map(item => item.id);
-    if (!utils.valueIsEqual(groupIds, this.state.groupIds)) {
-      this.setState({
-        groupIds,
-      });
-    }
-  },
-
-  onSearch(query) {
-    if (query === this.state.query) {
-      // if query is the same, just re-fetch data
-      this.fetchData();
-    } else {
-      // We no longer want to support environments specified in the querystring
-      // To keep this aligned with old behavior though we'll update the global environment
-      // and remove it from the query if someone does provide it this way
-      const queryEnvironment = queryString.getQueryEnvironment(query);
-      if (queryEnvironment !== null) {
-        const env = EnvironmentStore.getByName(queryEnvironment);
-        setActiveEnvironment(env);
-      }
-      query = queryString.getQueryStringWithoutEnvironment(query);
-
-      this.setState(
-        {
-          query,
-          searchId: null,
-        },
-        this.transitionTo
-      );
-    }
-
-    // Ignore saved searches
-    if (this.state.savedSearchList.map(s => s.query == this.state.query).length > 0) {
-      const {orgId, projectId} = this.props.params;
-      analytics('issue.search', {
-        query: this.state.query,
-        organization_id: orgId,
-        project_id: projectId,
-      });
-    }
-  },
-
-  onSortChange(sort) {
-    this.setState(
-      {
-        sort,
-      },
-      this.transitionTo
-    );
-  },
-
-  onSidebarToggle() {
-    const org = this.getOrganization();
-    this.setState({
-      isSidebarVisible: !this.state.isSidebarVisible,
-    });
-    analytics('issue.search_sidebar_clicked', {
-      org_id: parseInt(org.id, 10),
-    });
-  },
-
-  /**
-   * Returns true if all results in the current query are visible/on this page
-   */
-  allResultsVisible() {
-    if (!this.state.pageLinks) {
-      return false;
-    }
-
-    const links = parseLinkHeader(this.state.pageLinks);
-    return links && !links.previous.results && !links.next.results;
-  },
-
-  transitionTo() {
-    const queryParams = {};
-
-    if (this.props.location.query.environment) {
-      queryParams.environment = this.props.location.query.environment;
-    }
-
-    if (!this.state.searchId) {
-      queryParams.query = this.state.query;
-    }
-
-    if (this.state.sort !== DEFAULT_SORT) {
-      queryParams.sort = this.state.sort;
-    }
-
-    if (this.state.statsPeriod !== DEFAULT_STATS_PERIOD) {
-      queryParams.statsPeriod = this.state.statsPeriod;
-    }
-
-    const params = this.props.params;
-
-    const path = this.state.searchId
-      ? `/${params.orgId}/${params.projectId}/searches/${this.state.searchId}/`
-      : `/${params.orgId}/${params.projectId}/`;
-    browserHistory.push({
-      pathname: path,
-      query: queryParams,
-    });
-  },
-
-  renderGroupNodes(ids, statsPeriod) {
-    // Restrict this guide to only show for new users (joined<30 days) and add guide anhor only to the first issue
-    const userDateJoined = new Date(ConfigStore.get('user').dateJoined);
-    const dateCutoff = new Date();
-    dateCutoff.setDate(dateCutoff.getDate() - 30);
-
-    const topIssue = ids[0];
-
-    const {orgId} = this.props.params;
-    const groupNodes = ids.map(id => {
-      const hasGuideAnchor = userDateJoined > dateCutoff && id === topIssue;
-      return (
-        <StreamGroup
-          key={id}
-          id={id}
-          orgId={orgId}
-          statsPeriod={statsPeriod}
-          query={this.state.query}
-          hasGuideAnchor={hasGuideAnchor}
-        />
-      );
-    });
-    return <PanelBody className="ref-group-list">{groupNodes}</PanelBody>;
-  },
-
-  renderAwaitingEvents() {
-    const org = this.getOrganization();
-    const project = this.getProject();
-    const sampleIssueId = this.state.groupIds.length > 0 ? this.state.groupIds[0] : '';
-    return (
-      <ErrorRobot
-        org={org}
-        project={project}
-        sampleIssueId={sampleIssueId}
-        gradient={true}
-      />
-    );
-  },
-
-  renderEmpty() {
-    const {environment} = this.state;
-    const message = environment
-      ? tct('Sorry no events match your filters in the [env] environment.', {
-          env: environment.displayName,
-        })
-      : t('Sorry, no events match your filters.');
-
-    return (
-      <EmptyStateWarning>
-        <p>{message}</p>
-      </EmptyStateWarning>
-    );
-  },
-
-  renderLoading() {
-    return <LoadingIndicator />;
-  },
-
-  renderStreamBody() {
-    let body;
-    const project = this.getProject();
-
-    if (project.firstEvent) {
-      ConfigStore.set('sentFirstEvent', project.firstEvent);
-    }
-
-    if (this.state.dataLoading) {
-      body = this.renderLoading();
-    } else if (this.state.error) {
-      body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;
-    } else if (this.state.groupIds.length > 0) {
-      body = this.renderGroupNodes(this.state.groupIds, this.state.statsPeriod);
-    } else if (!project.firstEvent) {
-      body = this.renderAwaitingEvents();
-    } else {
-      body = this.renderEmpty();
-    }
-    return body;
-  },
-
-  tagValueLoader(key, search) {
-    const {orgId} = this.props.params;
-    const project = this.getProject();
-    return fetchProjectTagValues(this.props.api, orgId, project.slug, key, search);
-  },
-
-  render() {
-    // global loading
-    if (this.state.loading) {
-      return this.renderLoading();
-    }
-    const classes = ['stream-row'];
-    if (this.state.isSidebarVisible) {
-      classes.push('show-sidebar');
-    }
-    const {organization} = this.context;
-
-    const searchId = this.state.searchId;
-    const project = this.getProject();
-
-    // for compatibility with new filters/stream component
-
-    const selection = {
-      projects: [parseInt(project.id, 10)],
-      environments: this.state.environment ? [this.state.environment.name] : [],
-      datetime: {start: null, end: null, period: null, utc: null},
-    };
-
-    return (
-      <DocumentTitle title={`Issues - ${project.slug} - ${organization.name} - Sentry`}>
-        <div className={classNames(classes)}>
-          <div className="stream-content">
-            <StreamFilters
-              organization={organization}
-              projectId={project.slug}
-              query={this.state.query}
-              sort={this.state.sort}
-              searchId={searchId}
-              queryCount={this.state.queryCount}
-              queryMaxCount={this.state.queryMaxCount}
-              onSortChange={this.onSortChange}
-              onSearch={this.onSearch}
-              onSavedSearchCreate={this.onSavedSearchCreate}
-              onSavedSearchSelect={this.onSavedSearchSelect}
-              onSavedSearchDelete={() => {}}
-              onSidebarToggle={this.onSidebarToggle}
-              isSearchDisabled={this.state.isSidebarVisible}
-              savedSearchList={this.state.savedSearchList}
-              tagValueLoader={this.tagValueLoader}
-              tags={this.props.tags}
-            />
-            <Panel>
-              <Feature
-                features={['projects:releases']}
-                organization={organization}
-                project={project}
-              >
-                {({hasFeature}) => (
-                  <StreamActions
-                    orgId={organization.slug}
-                    projectId={project.slug}
-                    selection={selection}
-                    hasReleases={hasFeature}
-                    latestRelease={this.context.project.latestRelease}
-                    environment={this.state.environment}
-                    query={this.state.query}
-                    queryCount={this.state.queryCount}
-                    onSelectStatsPeriod={this.onSelectStatsPeriod}
-                    onRealtimeChange={this.onRealtimeChange}
-                    realtimeActive={this.state.realtimeActive}
-                    statsPeriod={this.state.statsPeriod}
-                    groupIds={this.state.groupIds}
-                    allResultsVisible={this.allResultsVisible()}
-                  />
-                )}
-              </Feature>
-              <PanelBody>
-                <ProcessingIssueList
-                  organization={organization}
-                  projectIds={selection.projects}
-                />
-                {this.renderStreamBody()}
-              </PanelBody>
-            </Panel>
-            <Pagination pageLinks={this.state.pageLinks} />
-          </div>
-          <StreamSidebar
-            loading={this.props.tagsLoading}
-            tags={this.props.tags}
-            query={this.state.query}
-            onQueryChange={this.onSearch}
-            orgId={organization.slug}
-            projectId={project.slug}
-            tagValueLoader={this.tagValueLoader}
-          />
-        </div>
-      </DocumentTitle>
-    );
-  },
-});
-export {Stream};
-export default withApi(Stream);
diff --git a/tests/js/spec/views/stream/__snapshots__/actions.spec.jsx.snap b/tests/js/spec/views/organizationStream/__snapshots__/actions.spec.jsx.snap
similarity index 100%
rename from tests/js/spec/views/stream/__snapshots__/actions.spec.jsx.snap
rename to tests/js/spec/views/organizationStream/__snapshots__/actions.spec.jsx.snap
diff --git a/tests/js/spec/views/stream/actions.spec.jsx b/tests/js/spec/views/organizationStream/actions.spec.jsx
similarity index 99%
rename from tests/js/spec/views/stream/actions.spec.jsx
rename to tests/js/spec/views/organizationStream/actions.spec.jsx
index 682df5f63f..b036600fb2 100644
--- a/tests/js/spec/views/stream/actions.spec.jsx
+++ b/tests/js/spec/views/organizationStream/actions.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount, shallow} from 'enzyme';
 
-import {StreamActions} from 'app/views/stream/actions';
+import {StreamActions} from 'app/views/organizationStream/actions';
 import {initializeOrg} from 'app-test/helpers/initializeOrg';
 import SelectedGroupStore from 'app/stores/selectedGroupStore';
 
diff --git a/tests/js/spec/views/organizationStream/createIncident.spec.jsx b/tests/js/spec/views/organizationStream/createIncident.spec.jsx
index 1672329f4f..a35ba6b5da 100644
--- a/tests/js/spec/views/organizationStream/createIncident.spec.jsx
+++ b/tests/js/spec/views/organizationStream/createIncident.spec.jsx
@@ -7,7 +7,7 @@ import GlobalModal from 'app/components/globalModal';
 import OrganizationStreamWithStores from 'app/views/organizationStream/overview';
 import TagStore from 'app/stores/tagStore';
 
-jest.mock('app/views/stream/sidebar', () => jest.fn(() => null));
+jest.mock('app/views/organizationStream/sidebar', () => jest.fn(() => null));
 
 describe('OrganizationStream --> Create Incident', function() {
   let wrapper;
diff --git a/tests/js/spec/views/stream/createSavedSearchButton.spec.jsx b/tests/js/spec/views/organizationStream/createSavedSearchButton.spec.jsx
similarity index 97%
rename from tests/js/spec/views/stream/createSavedSearchButton.spec.jsx
rename to tests/js/spec/views/organizationStream/createSavedSearchButton.spec.jsx
index f303bad043..bab878d314 100644
--- a/tests/js/spec/views/stream/createSavedSearchButton.spec.jsx
+++ b/tests/js/spec/views/organizationStream/createSavedSearchButton.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import CreateSavedSearchButton from 'app/views/stream/createSavedSearchButton';
+import CreateSavedSearchButton from 'app/views/organizationStream/createSavedSearchButton';
 
 describe('CreateSavedSearchButton', function() {
   let wrapper, organization, createMock;
diff --git a/tests/js/spec/views/stream/organizationSavedSearchSelector.spec.jsx b/tests/js/spec/views/organizationStream/organizationSavedSearchSelector.spec.jsx
similarity index 97%
rename from tests/js/spec/views/stream/organizationSavedSearchSelector.spec.jsx
rename to tests/js/spec/views/organizationStream/organizationSavedSearchSelector.spec.jsx
index 319c172972..28abc07606 100644
--- a/tests/js/spec/views/stream/organizationSavedSearchSelector.spec.jsx
+++ b/tests/js/spec/views/organizationStream/organizationSavedSearchSelector.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import OrganizationSavedSearchSelector from 'app/views/stream/organizationSavedSearchSelector';
+import OrganizationSavedSearchSelector from 'app/views/organizationStream/organizationSavedSearchSelector';
 
 describe('OrganizationSavedSearchSelector', function() {
   let wrapper, onCreate, onSelect, onDelete, organization, savedSearchList;
diff --git a/tests/js/spec/views/organizationStream/overview.spec.jsx b/tests/js/spec/views/organizationStream/overview.spec.jsx
index 0b59b16b86..ef2c62061c 100644
--- a/tests/js/spec/views/organizationStream/overview.spec.jsx
+++ b/tests/js/spec/views/organizationStream/overview.spec.jsx
@@ -13,8 +13,8 @@ import StreamGroup from 'app/components/stream/group';
 import TagStore from 'app/stores/tagStore';
 
 // Mock <StreamSidebar> and <StreamActions>
-jest.mock('app/views/stream/sidebar', () => jest.fn(() => null));
-jest.mock('app/views/stream/actions', () => jest.fn(() => null));
+jest.mock('app/views/organizationStream/sidebar', () => jest.fn(() => null));
+jest.mock('app/views/organizationStream/actions', () => jest.fn(() => null));
 jest.mock('app/components/stream/group', () => jest.fn(() => null));
 
 const DEFAULT_LINKS_HEADER =
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/organizationStream/searchBar.spec.jsx
similarity index 99%
rename from tests/js/spec/views/stream/searchBar.spec.jsx
rename to tests/js/spec/views/organizationStream/searchBar.spec.jsx
index 9e1c0ed991..f23a884ccc 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/organizationStream/searchBar.spec.jsx
@@ -2,7 +2,7 @@ import React from 'react';
 
 import {initializeOrg} from 'app-test/helpers/initializeOrg';
 import {mount} from 'enzyme';
-import SearchBar from 'app/views/stream/searchBar';
+import SearchBar from 'app/views/organizationStream/searchBar';
 import TagStore from 'app/stores/tagStore';
 
 describe('SearchBar', function() {
diff --git a/tests/js/spec/views/stream/tagFilter.spec.jsx b/tests/js/spec/views/organizationStream/tagFilter.spec.jsx
similarity index 96%
rename from tests/js/spec/views/stream/tagFilter.spec.jsx
rename to tests/js/spec/views/organizationStream/tagFilter.spec.jsx
index 7a916843fb..c29bfadd18 100644
--- a/tests/js/spec/views/stream/tagFilter.spec.jsx
+++ b/tests/js/spec/views/organizationStream/tagFilter.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import StreamTagFilter from 'app/views/stream/tagFilter';
+import StreamTagFilter from 'app/views/organizationStream/tagFilter';
 
 describe('Stream TagFilter', function() {
   let tagValueLoader;
diff --git a/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap b/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap
deleted file mode 100644
index 8544319788..0000000000
--- a/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap
+++ /dev/null
@@ -1,723 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`Stream render() displays the group list 1`] = `
-<SideEffect(DocumentTitle)
-  title="Issues - project-slug - Organization Name - Sentry"
->
-  <div
-    className="stream-row"
-  >
-    <div
-      className="stream-content"
-    >
-      <StreamFilters
-        isSearchDisabled={false}
-        onSavedSearchCreate={[Function]}
-        onSavedSearchDelete={[Function]}
-        onSavedSearchSelect={[Function]}
-        onSearch={[Function]}
-        onSidebarToggle={[Function]}
-        onSortChange={[Function]}
-        organization={
-          Object {
-            "access": Array [
-              "org:read",
-              "org:write",
-              "org:admin",
-              "org:integrations",
-              "project:read",
-              "project:write",
-              "project:admin",
-              "team:read",
-              "team:write",
-              "team:admin",
-            ],
-            "features": Array [],
-            "id": "1337",
-            "name": "Organization Name",
-            "onboardingTasks": Array [],
-            "projects": Array [],
-            "scrapeJavaScript": true,
-            "slug": "org-slug",
-            "status": Object {
-              "id": "active",
-              "name": "active",
-            },
-            "teams": Array [],
-          }
-        }
-        projectId="project-slug"
-        query="is:unresolved"
-        queryCount={0}
-        queryMaxCount={0}
-        savedSearchList={
-          Array [
-            Object {
-              "id": "789",
-              "name": "test",
-              "query": "is:unresolved",
-            },
-          ]
-        }
-        searchId={null}
-        sort="date"
-        tagValueLoader={[Function]}
-        tags={
-          Object {
-            "assigned": Object {
-              "key": "assigned",
-              "name": "Assigned To",
-              "predefined": true,
-              "values": Array [],
-            },
-            "bookmarks": Object {
-              "key": "bookmarks",
-              "name": "Bookmarked By",
-              "predefined": true,
-              "values": Array [],
-            },
-            "event.timestamp": Object {
-              "key": "event.timestamp",
-              "name": "Event Timestamp",
-              "predefined": true,
-              "values": Array [
-                "2017-01-02",
-                ">=2017-01-02T01:00:00",
-                "<2017-01-02T02:00:00",
-              ],
-            },
-            "firstSeen": Object {
-              "key": "firstSeen",
-              "name": "First Seen",
-              "predefined": true,
-              "values": Array [
-                "-1h",
-                "+1d",
-                "-1w",
-              ],
-            },
-            "has": Object {
-              "key": "has",
-              "name": "Has Tag",
-              "predefined": true,
-              "values": Array [],
-            },
-            "is": Object {
-              "key": "is",
-              "name": "Status",
-              "predefined": true,
-              "values": Array [
-                "resolved",
-                "unresolved",
-                "ignored",
-                "muted",
-                "assigned",
-                "unassigned",
-              ],
-            },
-            "lastSeen": Object {
-              "key": "lastSeen",
-              "name": "Last Seen",
-              "predefined": true,
-              "values": Array [
-                "-1h",
-                "+1d",
-                "-1w",
-              ],
-            },
-            "timesSeen": Object {
-              "isInput": true,
-              "key": "timesSeen",
-              "name": "Times Seen",
-              "predefined": true,
-              "values": Array [],
-            },
-          }
-        }
-      />
-      <Panel>
-        <withConfig(FeatureContainer)
-          features={
-            Array [
-              "projects:releases",
-            ]
-          }
-          organization={
-            Object {
-              "access": Array [
-                "org:read",
-                "org:write",
-                "org:admin",
-                "org:integrations",
-                "project:read",
-                "project:write",
-                "project:admin",
-                "team:read",
-                "team:write",
-                "team:admin",
-              ],
-              "features": Array [],
-              "id": "1337",
-              "name": "Organization Name",
-              "onboardingTasks": Array [],
-              "projects": Array [],
-              "scrapeJavaScript": true,
-              "slug": "org-slug",
-              "status": Object {
-                "id": "active",
-                "name": "active",
-              },
-              "teams": Array [],
-            }
-          }
-          project={
-            Object {
-              "allowedDomains": Array [
-                "example.com",
-                "https://example.com",
-              ],
-              "dataScrubber": false,
-              "dataScrubberDefaults": false,
-              "digestsMaxDelay": 60,
-              "digestsMinDelay": 5,
-              "environments": Array [],
-              "features": Array [],
-              "firstEvent": true,
-              "hasAccess": true,
-              "id": 3559,
-              "isBookmarked": false,
-              "isMember": true,
-              "name": "Foo Project",
-              "resolveAge": 48,
-              "safeFields": Array [
-                "business-email",
-                "company",
-              ],
-              "scrapeJavaScript": true,
-              "scrubIPAddresses": false,
-              "securityToken": "security-token",
-              "securityTokenHeader": "x-security-header",
-              "sensitiveFields": Array [
-                "creditcard",
-                "ssn",
-              ],
-              "slug": "project-slug",
-              "storeCrashReports": false,
-              "subjectPrefix": "[my-org]",
-              "subjectTemplate": "[$project] \${tag:level}: $title",
-              "teams": Array [],
-              "verifySSL": true,
-            }
-          }
-        >
-          <Component />
-        </withConfig(FeatureContainer)>
-        <PanelBody
-          direction="column"
-          disablePadding={true}
-          flex={false}
-        >
-          <ProcessingIssueList
-            organization={
-              Object {
-                "access": Array [
-                  "org:read",
-                  "org:write",
-                  "org:admin",
-                  "org:integrations",
-                  "project:read",
-                  "project:write",
-                  "project:admin",
-                  "team:read",
-                  "team:write",
-                  "team:admin",
-                ],
-                "features": Array [],
-                "id": "1337",
-                "name": "Organization Name",
-                "onboardingTasks": Array [],
-                "projects": Array [],
-                "scrapeJavaScript": true,
-                "slug": "org-slug",
-                "status": Object {
-                  "id": "active",
-                  "name": "active",
-                },
-                "teams": Array [],
-              }
-            }
-            projectIds={
-              Array [
-                3559,
-              ]
-            }
-            showProject={false}
-          />
-          <PanelBody
-            className="ref-group-list"
-            direction="column"
-            disablePadding={true}
-            flex={false}
-          >
-            <StreamGroup
-              canSelect={true}
-              hasGuideAnchor={false}
-              id="1"
-              key="1"
-              orgId="org-slug"
-              query="is:unresolved"
-              statsPeriod="24h"
-            />
-          </PanelBody>
-        </PanelBody>
-      </Panel>
-      <Pagination
-        className="stream-pagination"
-        onCursor={[Function]}
-        pageLinks="<http://127.0.0.1:8000/api/0/projects/org-slug/project-slug/issues/?cursor=1443575731:0:1>; rel=\\"previous\\"; results=\\"false\\"; cursor=\\"1443575731:0:1\\", <http://127.0.0.1:8000/api/0/projects/org-slug/project-slug/issues/?cursor=1443575731:0:0>; rel=\\"next\\"; results=\\"true\\"; cursor=\\"1443575731:0:0"
-      />
-    </div>
-    <StreamSidebar
-      loading={false}
-      onQueryChange={[Function]}
-      orgId="org-slug"
-      projectId="project-slug"
-      query="is:unresolved"
-      tagValueLoader={[Function]}
-      tags={
-        Object {
-          "assigned": Object {
-            "key": "assigned",
-            "name": "Assigned To",
-            "predefined": true,
-            "values": Array [],
-          },
-          "bookmarks": Object {
-            "key": "bookmarks",
-            "name": "Bookmarked By",
-            "predefined": true,
-            "values": Array [],
-          },
-          "event.timestamp": Object {
-            "key": "event.timestamp",
-            "name": "Event Timestamp",
-            "predefined": true,
-            "values": Array [
-              "2017-01-02",
-              ">=2017-01-02T01:00:00",
-              "<2017-01-02T02:00:00",
-            ],
-          },
-          "firstSeen": Object {
-            "key": "firstSeen",
-            "name": "First Seen",
-            "predefined": true,
-            "values": Array [
-              "-1h",
-              "+1d",
-              "-1w",
-            ],
-          },
-          "has": Object {
-            "key": "has",
-            "name": "Has Tag",
-            "predefined": true,
-            "values": Array [],
-          },
-          "is": Object {
-            "key": "is",
-            "name": "Status",
-            "predefined": true,
-            "values": Array [
-              "resolved",
-              "unresolved",
-              "ignored",
-              "muted",
-              "assigned",
-              "unassigned",
-            ],
-          },
-          "lastSeen": Object {
-            "key": "lastSeen",
-            "name": "Last Seen",
-            "predefined": true,
-            "values": Array [
-              "-1h",
-              "+1d",
-              "-1w",
-            ],
-          },
-          "timesSeen": Object {
-            "isInput": true,
-            "key": "timesSeen",
-            "name": "Times Seen",
-            "predefined": true,
-            "values": Array [],
-          },
-        }
-      }
-    />
-  </div>
-</SideEffect(DocumentTitle)>
-`;
-
-exports[`Stream toggles environment select all environments 1`] = `
-<SideEffect(DocumentTitle)
-  title="Issues - project-slug - Organization Name - Sentry"
->
-  <div
-    className="stream-row"
-  >
-    <div
-      className="stream-content"
-    >
-      <StreamFilters
-        isSearchDisabled={false}
-        onSavedSearchCreate={[Function]}
-        onSavedSearchDelete={[Function]}
-        onSavedSearchSelect={[Function]}
-        onSearch={[Function]}
-        onSidebarToggle={[Function]}
-        onSortChange={[Function]}
-        organization={
-          Object {
-            "access": Array [
-              "org:read",
-              "org:write",
-              "org:admin",
-              "org:integrations",
-              "project:read",
-              "project:write",
-              "project:admin",
-              "team:read",
-              "team:write",
-              "team:admin",
-            ],
-            "features": Array [],
-            "id": "1337",
-            "name": "Organization Name",
-            "onboardingTasks": Array [],
-            "projects": Array [],
-            "scrapeJavaScript": true,
-            "slug": "org-slug",
-            "status": Object {
-              "id": "active",
-              "name": "active",
-            },
-            "teams": Array [],
-          }
-        }
-        projectId="project-slug"
-        query="is:unresolved"
-        queryCount={0}
-        queryMaxCount={0}
-        savedSearchList={
-          Array [
-            Object {
-              "id": "789",
-              "name": "test",
-              "query": "is:unresolved",
-            },
-          ]
-        }
-        searchId={null}
-        sort="date"
-        tagValueLoader={[Function]}
-        tags={
-          Object {
-            "assigned": Object {
-              "key": "assigned",
-              "name": "Assigned To",
-              "predefined": true,
-              "values": Array [],
-            },
-            "bookmarks": Object {
-              "key": "bookmarks",
-              "name": "Bookmarked By",
-              "predefined": true,
-              "values": Array [],
-            },
-            "event.timestamp": Object {
-              "key": "event.timestamp",
-              "name": "Event Timestamp",
-              "predefined": true,
-              "values": Array [
-                "2017-01-02",
-                ">=2017-01-02T01:00:00",
-                "<2017-01-02T02:00:00",
-              ],
-            },
-            "firstSeen": Object {
-              "key": "firstSeen",
-              "name": "First Seen",
-              "predefined": true,
-              "values": Array [
-                "-1h",
-                "+1d",
-                "-1w",
-              ],
-            },
-            "has": Object {
-              "key": "has",
-              "name": "Has Tag",
-              "predefined": true,
-              "values": Array [],
-            },
-            "is": Object {
-              "key": "is",
-              "name": "Status",
-              "predefined": true,
-              "values": Array [
-                "resolved",
-                "unresolved",
-                "ignored",
-                "muted",
-                "assigned",
-                "unassigned",
-              ],
-            },
-            "lastSeen": Object {
-              "key": "lastSeen",
-              "name": "Last Seen",
-              "predefined": true,
-              "values": Array [
-                "-1h",
-                "+1d",
-                "-1w",
-              ],
-            },
-            "timesSeen": Object {
-              "isInput": true,
-              "key": "timesSeen",
-              "name": "Times Seen",
-              "predefined": true,
-              "values": Array [],
-            },
-          }
-        }
-      />
-      <Panel>
-        <withConfig(FeatureContainer)
-          features={
-            Array [
-              "projects:releases",
-            ]
-          }
-          organization={
-            Object {
-              "access": Array [
-                "org:read",
-                "org:write",
-                "org:admin",
-                "org:integrations",
-                "project:read",
-                "project:write",
-                "project:admin",
-                "team:read",
-                "team:write",
-                "team:admin",
-              ],
-              "features": Array [],
-              "id": "1337",
-              "name": "Organization Name",
-              "onboardingTasks": Array [],
-              "projects": Array [],
-              "scrapeJavaScript": true,
-              "slug": "org-slug",
-              "status": Object {
-                "id": "active",
-                "name": "active",
-              },
-              "teams": Array [],
-            }
-          }
-          project={
-            Object {
-              "allowedDomains": Array [
-                "example.com",
-                "https://example.com",
-              ],
-              "dataScrubber": false,
-              "dataScrubberDefaults": false,
-              "digestsMaxDelay": 60,
-              "digestsMinDelay": 5,
-              "environments": Array [],
-              "features": Array [],
-              "firstEvent": true,
-              "hasAccess": true,
-              "id": 3559,
-              "isBookmarked": false,
-              "isMember": true,
-              "name": "Foo Project",
-              "resolveAge": 48,
-              "safeFields": Array [
-                "business-email",
-                "company",
-              ],
-              "scrapeJavaScript": true,
-              "scrubIPAddresses": false,
-              "securityToken": "security-token",
-              "securityTokenHeader": "x-security-header",
-              "sensitiveFields": Array [
-                "creditcard",
-                "ssn",
-              ],
-              "slug": "project-slug",
-              "storeCrashReports": false,
-              "subjectPrefix": "[my-org]",
-              "subjectTemplate": "[$project] \${tag:level}: $title",
-              "teams": Array [],
-              "verifySSL": true,
-            }
-          }
-        >
-          <Component />
-        </withConfig(FeatureContainer)>
-        <PanelBody
-          direction="column"
-          disablePadding={true}
-          flex={false}
-        >
-          <ProcessingIssueList
-            organization={
-              Object {
-                "access": Array [
-                  "org:read",
-                  "org:write",
-                  "org:admin",
-                  "org:integrations",
-                  "project:read",
-                  "project:write",
-                  "project:admin",
-                  "team:read",
-                  "team:write",
-                  "team:admin",
-                ],
-                "features": Array [],
-                "id": "1337",
-                "name": "Organization Name",
-                "onboardingTasks": Array [],
-                "projects": Array [],
-                "scrapeJavaScript": true,
-                "slug": "org-slug",
-                "status": Object {
-                  "id": "active",
-                  "name": "active",
-                },
-                "teams": Array [],
-              }
-            }
-            projectIds={
-              Array [
-                3559,
-              ]
-            }
-            showProject={false}
-          />
-          <PanelBody
-            className="ref-group-list"
-            direction="column"
-            disablePadding={true}
-            flex={false}
-          >
-            <StreamGroup
-              canSelect={true}
-              hasGuideAnchor={false}
-              id="1"
-              key="1"
-              orgId="org-slug"
-              query="is:unresolved"
-              statsPeriod="24h"
-            />
-          </PanelBody>
-        </PanelBody>
-      </Panel>
-      <Pagination
-        className="stream-pagination"
-        onCursor={[Function]}
-        pageLinks="<http://127.0.0.1:8000/api/0/projects/org-slug/project-slug/issues/?cursor=1443575731:0:1>; rel=\\"previous\\"; results=\\"false\\"; cursor=\\"1443575731:0:1\\", <http://127.0.0.1:8000/api/0/projects/org-slug/project-slug/issues/?cursor=1443575731:0:0>; rel=\\"next\\"; results=\\"true\\"; cursor=\\"1443575731:0:0"
-      />
-    </div>
-    <StreamSidebar
-      loading={false}
-      onQueryChange={[Function]}
-      orgId="org-slug"
-      projectId="project-slug"
-      query="is:unresolved"
-      tagValueLoader={[Function]}
-      tags={
-        Object {
-          "assigned": Object {
-            "key": "assigned",
-            "name": "Assigned To",
-            "predefined": true,
-            "values": Array [],
-          },
-          "bookmarks": Object {
-            "key": "bookmarks",
-            "name": "Bookmarked By",
-            "predefined": true,
-            "values": Array [],
-          },
-          "event.timestamp": Object {
-            "key": "event.timestamp",
-            "name": "Event Timestamp",
-            "predefined": true,
-            "values": Array [
-              "2017-01-02",
-              ">=2017-01-02T01:00:00",
-              "<2017-01-02T02:00:00",
-            ],
-          },
-          "firstSeen": Object {
-            "key": "firstSeen",
-            "name": "First Seen",
-            "predefined": true,
-            "values": Array [
-              "-1h",
-              "+1d",
-              "-1w",
-            ],
-          },
-          "has": Object {
-            "key": "has",
-            "name": "Has Tag",
-            "predefined": true,
-            "values": Array [],
-          },
-          "is": Object {
-            "key": "is",
-            "name": "Status",
-            "predefined": true,
-            "values": Array [
-              "resolved",
-              "unresolved",
-              "ignored",
-              "muted",
-              "assigned",
-              "unassigned",
-            ],
-          },
-          "lastSeen": Object {
-            "key": "lastSeen",
-            "name": "Last Seen",
-            "predefined": true,
-            "values": Array [
-              "-1h",
-              "+1d",
-              "-1w",
-            ],
-          },
-          "timesSeen": Object {
-            "isInput": true,
-            "key": "timesSeen",
-            "name": "Times Seen",
-            "predefined": true,
-            "values": Array [],
-          },
-        }
-      }
-    />
-  </div>
-</SideEffect(DocumentTitle)>
-`;
diff --git a/tests/js/spec/views/stream/stream.spec.jsx b/tests/js/spec/views/stream/stream.spec.jsx
deleted file mode 100644
index f0c9ce2f99..0000000000
--- a/tests/js/spec/views/stream/stream.spec.jsx
+++ /dev/null
@@ -1,641 +0,0 @@
-import React from 'react';
-import {shallow} from 'enzyme';
-import Cookies from 'js-cookie';
-import _ from 'lodash';
-
-import {Client} from 'app/api';
-import CursorPoller from 'app/utils/cursorPoller';
-import LoadingError from 'app/components/loadingError';
-import ErrorRobot from 'app/components/errorRobot';
-import {Stream} from 'app/views/stream/stream';
-import EnvironmentStore from 'app/stores/environmentStore';
-import {setActiveEnvironment} from 'app/actionCreators/environments';
-import TagStore from 'app/stores/tagStore';
-
-jest.mock('app/stores/groupStore');
-
-const DEFAULT_LINKS_HEADER =
-  '<http://127.0.0.1:8000/api/0/projects/org-slug/project-slug/issues/?cursor=1443575731:0:1>; rel="previous"; results="false"; cursor="1443575731:0:1", ' +
-  '<http://127.0.0.1:8000/api/0/projects/org-slug/project-slug/issues/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
-
-describe('Stream', function() {
-  let context;
-  let wrapper;
-  let props;
-
-  let organization;
-  let team;
-  let project;
-  let savedSearch;
-
-  let groupListRequest;
-
-  beforeEach(function() {
-    organization = TestStubs.Organization({
-      id: '1337',
-      slug: 'org-slug',
-    });
-    team = TestStubs.Team({
-      id: '2448',
-    });
-    project = TestStubs.ProjectDetails({
-      id: 3559,
-      name: 'Foo Project',
-      slug: 'project-slug',
-      firstEvent: true,
-    });
-    savedSearch = {id: '789', query: 'is:unresolved', name: 'test'};
-
-    groupListRequest = MockApiClient.addMockResponse({
-      url: '/projects/org-slug/project-slug/issues/',
-      body: [TestStubs.Group()],
-      headers: {
-        Link: DEFAULT_LINKS_HEADER,
-      },
-    });
-    MockApiClient.addMockResponse({
-      url: '/projects/org-slug/project-slug/searches/',
-      body: [savedSearch],
-    });
-    MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/recent-searches/',
-      body: [],
-    });
-    MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/processingissues/',
-      method: 'GET',
-    });
-
-    context = {
-      project,
-      organization,
-      team,
-    };
-
-    TagStore.init();
-
-    props = {
-      api: new MockApiClient(),
-      setProjectNavSection: function() {},
-      location: {query: {query: 'is:unresolved'}, search: 'query=is:unresolved'},
-      params: {orgId: organization.slug, projectId: project.slug},
-      tags: TagStore.getAllTags(),
-      tagsLoading: false,
-    };
-  });
-
-  afterEach(function() {
-    MockApiClient.clearMockResponses();
-  });
-
-  describe('fetchData()', function() {
-    describe('complete handler', function() {
-      beforeAll(function() {
-        jest.spyOn(CursorPoller.prototype, 'setEndpoint');
-      });
-
-      beforeEach(function() {
-        CursorPoller.prototype.setEndpoint.mockReset();
-        wrapper = shallow(<Stream {...props} />, {
-          context,
-        });
-      });
-
-      afterAll(function() {
-        CursorPoller.prototype.setEndpoint.mockRestore();
-      });
-
-      it('should reset the poller endpoint and sets cursor URL', function() {
-        const stream = wrapper.instance();
-        stream.state.pageLinks = DEFAULT_LINKS_HEADER;
-        stream.state.realtimeActive = true;
-
-        stream.fetchData();
-
-        expect(CursorPoller.prototype.setEndpoint).toHaveBeenCalledWith(
-          'http://127.0.0.1:8000/api/0/projects/org-slug/project-slug/issues/?cursor=1443575731:0:1'
-        );
-      });
-
-      it('should not enable the poller if realtimeActive is false', function() {
-        const stream = wrapper.instance();
-        stream.state.pageLinks = DEFAULT_LINKS_HEADER;
-        stream.state.realtimeActive = false;
-        stream.fetchData();
-
-        expect(CursorPoller.prototype.setEndpoint).not.toHaveBeenCalled();
-      });
-
-      it("should not enable the poller if the 'previous' link has results", function() {
-        const pageLinks =
-          '<http://127.0.0.1:8000/api/0/projects/org-slug/project-slug/issues/?cursor=1443575731:0:1>; rel="previous"; results="true"; cursor="1443575731:0:1", ' +
-          '<http://127.0.0.1:8000/api/0/projects/org-slug/project-slug/issues/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
-
-        MockApiClient.addMockResponse({
-          url: '/projects/org-slug/project-slug/issues/',
-          body: [TestStubs.Group()],
-          headers: {
-            Link: pageLinks,
-          },
-        });
-
-        wrapper = shallow(<Stream {...props} />, {
-          context,
-        });
-
-        const stream = wrapper.instance();
-
-        stream.setState({
-          pageLinks,
-          realtimeActive: true,
-        });
-
-        stream.fetchData();
-
-        expect(CursorPoller.prototype.setEndpoint).not.toHaveBeenCalled();
-      });
-    }); // complete handler
-
-    it('calls fetchData once on mount for a saved search', async function() {
-      props.location = {query: {}};
-      props.params.searchId = '1';
-      wrapper = shallow(<Stream {...props} />, {
-        context,
-      });
-      await wrapper.update();
-
-      expect(groupListRequest).toHaveBeenCalledTimes(1);
-    });
-
-    it('calls fetchData once on mount if there is a query', async function() {
-      wrapper = shallow(<Stream {...props} />, {
-        context,
-      });
-      await wrapper.update();
-
-      expect(groupListRequest).toHaveBeenCalledTimes(1);
-    });
-
-    it('should cancel any previous, unfinished fetches', function() {
-      const requestCancel = jest.fn();
-      let requestOptions;
-      jest.spyOn(Client.prototype, 'request').mockImplementation(function(url, options) {
-        requestOptions = options;
-        return {
-          cancel: requestCancel,
-        };
-      });
-
-      // NOTE: fetchData called once after render automatically
-      const stream = wrapper.instance();
-
-      // 2nd fetch should call cancel
-      stream.fetchData();
-      stream.fetchData();
-
-      expect(requestCancel).toHaveBeenCalledTimes(1);
-      expect(stream.lastRequest).toBeTruthy();
-
-      // when request "completes", lastRequest is cleared
-      requestOptions.complete({
-        getResponseHeader: () => DEFAULT_LINKS_HEADER,
-      });
-
-      expect(stream.lastRequest).toBeNull();
-      Client.prototype.request.mockRestore();
-    });
-
-    it('sends environment attribute', function() {
-      const requestCancel = jest.fn();
-      let requestOptions;
-      jest.spyOn(Client.prototype, 'request').mockImplementation(function(url, options) {
-        requestOptions = options;
-        return {
-          cancel: requestCancel,
-        };
-      });
-
-      const stream = wrapper.instance();
-      stream.state.activeEnvironment = {name: 'prod'};
-      stream.state.query = 'is:unresolved environment:prod';
-      stream.fetchData();
-
-      expect(requestOptions.data.query).toContain('environment:prod');
-      expect(requestOptions.data.environment).toBe('prod');
-      Client.prototype.request.mockRestore();
-    });
-  });
-
-  describe('fetchSavedSearches()', function() {
-    it('handles valid search id', async function() {
-      const streamProps = {
-        api: new MockApiClient(),
-        setProjectNavSection: function() {},
-        params: {orgId: 'org-slug', projectId: 'project-slug', searchId: '789'},
-        location: {query: {}, search: ''},
-        tags: {},
-      };
-      wrapper = shallow(<Stream {...streamProps} />, {
-        context,
-      });
-      await wrapper.update();
-
-      expect(wrapper.instance().state.searchId).toBe('789');
-      expect(wrapper.instance().state.query).toBe('is:unresolved');
-    });
-
-    it('handles invalid search id', async function() {
-      const streamProps = {
-        api: new MockApiClient(),
-        setProjectNavSection: function() {},
-        params: {orgId: 'org-slug', projectId: 'project-slug', searchId: 'invalid'},
-        location: {query: {}, search: ''},
-        tags: {},
-      };
-      wrapper = shallow(<Stream {...streamProps} />, {
-        context,
-      });
-      await wrapper.update();
-
-      expect(wrapper.instance().state.searchId).toBeNull();
-      expect(wrapper.instance().state.query).toBe('');
-    });
-
-    it('handles default saved search (no search id or query)', async function() {
-      const streamProps = {
-        ...props,
-        location: {query: {}, search: ''},
-      };
-
-      MockApiClient.addMockResponse({
-        url: '/projects/org-slug/project-slug/searches/',
-        body: [
-          {...savedSearch, isDefault: false},
-          {
-            id: 'default',
-            query: 'is:unresolved assigned:me',
-            name: 'default',
-            isDefault: true,
-          },
-        ],
-      });
-
-      wrapper = shallow(<Stream {...streamProps} />, {
-        context,
-      });
-      await wrapper.update();
-
-      expect(wrapper.instance().state.searchId).toBe('default');
-      expect(wrapper.instance().state.query).toBe('is:unresolved assigned:me');
-    });
-  });
-
-  describe('render()', function() {
-    beforeEach(function() {
-      wrapper = shallow(<Stream {...props} />, {
-        context,
-      });
-    });
-    it('displays a loading indicator when component is loading', function() {
-      wrapper.setState({loading: true});
-      expect(wrapper.find('.loading')).toBeTruthy();
-    });
-
-    it('displays a loading indicator when data is loading', function() {
-      wrapper.setState({dataLoading: true});
-      expect(wrapper.find('.loading')).toBeTruthy();
-    });
-
-    it('displays an error when component has errored', function() {
-      wrapper.setState({
-        error: 'Something bad happened',
-        loading: false,
-        dataLoading: false,
-      });
-      expect(wrapper.find(LoadingError).length).toBeTruthy();
-    });
-
-    it('displays the group list', function() {
-      wrapper.setState({
-        error: false,
-        groupIds: ['1'],
-        loading: false,
-        dataLoading: false,
-      });
-      expect(wrapper).toMatchSnapshot();
-      expect(wrapper.find('.ref-group-list').length).toBeTruthy();
-    });
-
-    it('displays empty with no ids', function() {
-      wrapper.setState({
-        error: false,
-        groupIds: [],
-        loading: false,
-        dataLoading: false,
-      });
-      expect(wrapper.find('EmptyStateWarning').length).toBeTruthy();
-    });
-
-    describe('no first event sent', function() {
-      it('shows "awaiting events" message when no events have been sent', function() {
-        context.project.firstEvent = false;
-        wrapper.setState({
-          error: false,
-          groupIds: [],
-          loading: false,
-          dataLoading: false,
-        });
-
-        expect(wrapper.find(ErrorRobot)).toHaveLength(1);
-      });
-
-      it('does not show "awaiting events" when an event is recieved', function() {
-        context.project.firstEvent = false;
-        wrapper.setState({
-          error: false,
-          groupIds: ['1'],
-          loading: false,
-          dataLoading: false,
-        });
-
-        expect(wrapper.find('.ref-group-list').length).toBeTruthy();
-      });
-    });
-
-    it('does not have real time event updates when events exist', function() {
-      wrapper = shallow(<Stream {...wrapper.instance().props} />, {
-        context: {
-          ...context,
-          project: {
-            ...context.project,
-            firstEvent: true,
-          },
-        },
-      });
-
-      expect(wrapper.state('realtimeActive')).toBe(false);
-    });
-
-    it('does not have real time event updates enabled when cookie is present (even if there are no events)', function() {
-      Cookies.set('realtimeActive', 'false');
-      wrapper = shallow(<Stream {...wrapper.instance().props} />, {
-        context: {
-          ...context,
-          project: {
-            ...context.project,
-            firstEvent: false,
-          },
-        },
-      });
-
-      wrapper.setState({
-        error: false,
-        groupIds: [],
-        loading: false,
-        dataLoading: false,
-      });
-
-      Cookies.remove('realtimeActive');
-      expect(wrapper.state('realtimeActive')).toBe(false);
-    });
-
-    it('has real time event updates enabled when there are no events', function() {
-      wrapper = shallow(<Stream {...wrapper.instance().props} />, {
-        context: {
-          ...context,
-          project: {
-            ...context.project,
-            firstEvent: false,
-          },
-        },
-      });
-
-      wrapper.setState({
-        error: false,
-        groupIds: [],
-        loading: false,
-        dataLoading: false,
-      });
-
-      expect(wrapper.state('realtimeActive')).toBe(true);
-    });
-  });
-
-  describe('toggles environment', function() {
-    beforeEach(function() {
-      wrapper = shallow(<Stream {...props} />, {
-        context,
-      });
-    });
-
-    it('select all environments', function() {
-      EnvironmentStore.loadInitialData(TestStubs.Environments());
-      setActiveEnvironment(null);
-      wrapper.setState({
-        error: false,
-        groupIds: ['1'],
-        loading: false,
-        dataLoading: false,
-      });
-      expect(wrapper).toMatchSnapshot();
-    });
-  });
-
-  describe('componentWillMount()', function() {
-    afterEach(function() {
-      Cookies.remove('realtimeActive');
-    });
-
-    it('reads the realtimeActive state from a cookie', function() {
-      Cookies.set('realtimeActive', 'false');
-
-      const stream = wrapper.instance();
-      expect(stream.getInitialState()).toHaveProperty('realtimeActive', false);
-    });
-
-    it('reads the true realtimeActive state from a cookie', function() {
-      Cookies.set('realtimeActive', 'true');
-
-      const stream = wrapper.instance();
-      expect(stream.getInitialState()).toHaveProperty('realtimeActive', true);
-    });
-  });
-
-  describe('onRealtimeChange', function() {
-    it('sets the realtimeActive state', function() {
-      const stream = wrapper.instance();
-      stream.state.realtimeActive = false;
-      stream.onRealtimeChange(true);
-      expect(stream.state.realtimeActive).toEqual(true);
-      expect(Cookies.get('realtimeActive')).toEqual('true');
-
-      stream.onRealtimeChange(false);
-      expect(stream.state.realtimeActive).toEqual(false);
-      expect(Cookies.get('realtimeActive')).toEqual('false');
-    });
-  });
-
-  describe('getInitialState', function() {
-    it('handles query', function() {
-      const expected = {
-        groupIds: [],
-        selectAllActive: false,
-        multiSelected: false,
-        anySelected: false,
-        statsPeriod: '24h',
-        realtimeActive: false,
-        pageLinks: '',
-        loading: false,
-        dataLoading: true,
-        error: false,
-        searchId: null,
-        query: 'is:unresolved',
-        sort: 'date',
-      };
-
-      const actual = wrapper.instance().getInitialState();
-      expect(_.pick(actual, _.keys(expected))).toEqual(expected);
-    });
-
-    it('handles no searchId or query', async function() {
-      const streamProps = {
-        ...props,
-        location: {query: {sort: 'freq'}, search: 'sort=freq'},
-      };
-
-      const expected = {
-        groupIds: [],
-        selectAllActive: false,
-        multiSelected: false,
-        anySelected: false,
-        statsPeriod: '24h',
-        realtimeActive: false,
-        loading: false,
-        dataLoading: false,
-        error: false,
-        query: '',
-        sort: 'freq',
-        searchId: null,
-      };
-
-      wrapper = shallow(<Stream {...streamProps} />, {
-        context,
-      });
-      await wrapper.update();
-
-      const stream = wrapper.instance();
-
-      const actual = stream.state;
-      expect(_.pick(actual, _.keys(expected))).toEqual(expected);
-    });
-
-    it('handles valid searchId in routing params', async function() {
-      const streamProps = {
-        ...props,
-        location: {query: {sort: 'freq'}, search: 'sort=freq'},
-        params: {orgId: 'org-slug', projectId: 'project-slug', searchId: '789'},
-      };
-
-      const expected = {
-        groupIds: [],
-        selectAllActive: false,
-        multiSelected: false,
-        anySelected: false,
-        statsPeriod: '24h',
-        realtimeActive: false,
-        loading: false,
-        dataLoading: false,
-        error: false,
-        query: 'is:unresolved',
-        sort: 'freq',
-        searchId: '789',
-      };
-
-      wrapper = shallow(<Stream {...streamProps} />, {
-        context,
-      });
-
-      wrapper.setState({
-        savedSearchList: [{id: '789', query: 'is:unresolved', name: 'test'}],
-      });
-      await wrapper.update();
-
-      const actual = wrapper.instance().state;
-      expect(_.pick(actual, _.keys(expected))).toEqual(expected);
-    });
-
-    it('handles invalid searchId in routing params', async function() {
-      const streamProps = {
-        ...props,
-        location: {query: {sort: 'freq'}, search: 'sort=freq'},
-        params: {orgId: 'org-slug', projectId: 'project-slug', searchId: '799'},
-      };
-
-      const expected = {
-        groupIds: [],
-        selectAllActive: false,
-        multiSelected: false,
-        anySelected: false,
-        statsPeriod: '24h',
-        realtimeActive: false,
-        loading: false,
-        dataLoading: false,
-        error: false,
-        query: '',
-        sort: 'freq',
-        searchId: null,
-      };
-
-      wrapper = shallow(<Stream {...streamProps} />, {
-        context,
-      });
-      await wrapper.update();
-      const stream = wrapper.instance();
-
-      const actual = stream.state;
-      expect(_.pick(actual, _.keys(expected))).toEqual(expected);
-    });
-  });
-
-  describe('getQueryState', function() {
-    it('handles changed search id', async function() {
-      const nextProps = {
-        ...props,
-        location: {
-          pathname: '/org-slug/project-slug/searches/789/',
-        },
-        params: {orgId: 'org-slug', projectId: 'project-slug', searchId: '789'},
-      };
-
-      wrapper = shallow(<Stream {...props} />, {
-        context,
-      });
-      await wrapper.update();
-      const stream = wrapper.instance();
-
-      const nextState = stream.getQueryState(nextProps);
-      expect(nextState).toEqual(
-        expect.objectContaining({searchId: '789', query: 'is:unresolved'})
-      );
-    });
-
-    it('handles changed querystring', function() {
-      const nextProps = {
-        ...props,
-        location: {
-          query: {
-            query: 'is:unresolved assigned:me',
-          },
-        },
-      };
-
-      const stream = shallow(<Stream {...props} />, {
-        context,
-      }).instance();
-      const nextState = stream.getQueryState(nextProps);
-      expect(nextState).toEqual(
-        expect.objectContaining({searchId: null, query: 'is:unresolved assigned:me'})
-      );
-    });
-  });
-});
