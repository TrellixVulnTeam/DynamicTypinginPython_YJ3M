commit a2268bcdb8471e9af412a12851047c69f2c47cd2
Author: Jan Michael Auer <account@jauer.org>
Date:   Tue Apr 17 08:35:41 2018 +0200

    feat(minidump): Store minidumps in a temp directory for debugging (#8036)
    
    * feat(minidump): Store minidumps in a temp directory for debugging
    
    * feat(minidump): Reuse event_id if provided by the client
    
    * feat(minidump): Add a setting for caching minidumps

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 22fd12051c..698ca3751e 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1306,3 +1306,8 @@ SOUTH_TESTS_MIGRATE = os.environ.get('SOUTH_TESTS_MIGRATE', '0') == '1'
 
 TERMS_URL = None
 PRIVACY_URL = None
+
+# Toggles whether minidumps should be cached
+SENTRY_MINIDUMP_CACHE = False
+# The location for cached minidumps
+SENTRY_MINIDUMP_PATH = '/tmp/minidump'
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index 7c346f6385..869e28bb46 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -164,6 +164,7 @@ def sdk_info_to_sdk_id(sdk_info):
 
 def merge_minidump_event(data, minidump):
     if isinstance(minidump, InMemoryUploadedFile):
+        minidump.open()  # seek to start
         state = ProcessState.from_minidump_buffer(minidump.read())
     elif isinstance(minidump, TemporaryUploadedFile):
         state = ProcessState.from_minidump(minidump.temporary_file_path())
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 2d050035f4..83b8848730 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import, print_function
 import base64
 import jsonschema
 import logging
+import os
 import six
 import traceback
 import uuid
@@ -55,6 +56,7 @@ PIXEL = base64.b64decode('R0lGODlhAQABAAD/ACwAAAAAAQABAAACADs=')
 
 PROTOCOL_VERSIONS = frozenset(('2.0', '3', '4', '5', '6', '7'))
 
+
 pubsub = QueuedPublisher(
     RedisPublisher(getattr(settings, 'REQUESTS_PUBSUB_CONNECTION', None))
 ) if getattr(settings, 'REQUESTS_PUBSUB_ENABLED', False) else None
@@ -561,6 +563,12 @@ class MinidumpView(StoreView):
         extra.update(data.get('extra', {}))
         data['extra'] = extra
 
+        # Assign our own UUID so we can track this minidump. We cannot trust the
+        # uploaded filename, and if reading the minidump fails there is no way
+        # we can ever retrieve the original UUID from the minidump.
+        event_id = data.get('event_id') or uuid.uuid4().hex
+        data['event_id'] = event_id
+
         # At this point, we only extract the bare minimum information
         # needed to continue processing. This requires to process the
         # minidump without symbols and CFI to obtain an initial stack
@@ -571,6 +579,14 @@ class MinidumpView(StoreView):
         except KeyError:
             raise APIError('Missing minidump upload')
 
+        if settings.SENTRY_MINIDUMP_CACHE:
+            if not os.path.exists(settings.SENTRY_MINIDUMP_PATH):
+                os.mkdir(settings.SENTRY_MINIDUMP_PATH, 0o744)
+
+            with open('%s/%s.dmp' % (settings.SENTRY_MINIDUMP_PATH, event_id), 'wb') as out:
+                for chunk in minidump.chunks():
+                    out.write(chunk)
+
         merge_minidump_event(data, minidump)
         response_or_event_id = self.process(request, data=data, **kwargs)
         if isinstance(response_or_event_id, HttpResponse):
