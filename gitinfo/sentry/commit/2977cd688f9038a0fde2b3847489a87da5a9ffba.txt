commit 2977cd688f9038a0fde2b3847489a87da5a9ffba
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Mon Jan 28 15:22:58 2019 -0800

    ref(api): Move project group index delete to helper

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index dd77cca930..3e39717e5f 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -9,7 +9,7 @@ from sentry import analytics, search
 from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases.project import ProjectEndpoint, ProjectEventPermission
 from sentry.api.helpers.group_index import (
-    build_query_params_from_request, _delete_groups, get_by_short_id,
+    build_query_params_from_request, delete_groups, get_by_short_id,
     update_groups, ValidationError
 )
 from sentry.api.serializers import serialize
@@ -298,36 +298,15 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
                                      belong to.
         :auth: required
         """
-        group_ids = request.GET.getlist('id')
-        if group_ids:
-            group_list = list(
-                Group.objects.filter(
-                    project=project,
-                    id__in=set(group_ids),
-                ).exclude(
-                    status__in=[
-                        GroupStatus.PENDING_DELETION,
-                        GroupStatus.DELETION_IN_PROGRESS,
-                    ]
-                )
-            )
-        else:
-            try:
-                # bulk mutations are limited to 1000 items
-                # TODO(dcramer): it'd be nice to support more than this, but its
-                # a bit too complicated right now
-                cursor_result, _ = self._search(request, project, {
-                    'limit': 1000,
-                    'paginator_options': {'max_limit': 1000},
-                })
-            except ValidationError as exc:
-                return Response({'detail': six.text_type(exc)}, status=400)
-
-            group_list = list(cursor_result)
-
-        if not group_list:
-            return Response(status=204)
-
-        _delete_groups(request, project, group_list, delete_type='delete')
-
-        return Response(status=204)
+        search_fn = functools.partial(
+            self._search, request, project, {
+                'limit': 1000,
+                'paginator_options': {'max_limit': 1000},
+            }
+        )
+        return delete_groups(
+            request,
+            [project],
+            project.organization_id,
+            search_fn,
+        )
diff --git a/src/sentry/api/helpers/group_index.py b/src/sentry/api/helpers/group_index.py
index 3849df27db..407528db94 100644
--- a/src/sentry/api/helpers/group_index.py
+++ b/src/sentry/api/helpers/group_index.py
@@ -337,6 +337,45 @@ def _delete_groups(request, project, group_list, delete_type):
             sender=_delete_groups)
 
 
+def delete_groups(request, projects, organization_id, search_fn):
+    group_ids = request.GET.getlist('id')
+    if group_ids:
+        group_list = list(
+            Group.objects.filter(
+                project__in=projects,
+                project__organization_id=organization_id,
+                id__in=set(group_ids),
+            ).exclude(
+                status__in=[
+                    GroupStatus.PENDING_DELETION,
+                    GroupStatus.DELETION_IN_PROGRESS,
+                ]
+            )
+        )
+    else:
+        try:
+            # bulk mutations are limited to 1000 items
+            # TODO(dcramer): it'd be nice to support more than this, but its
+            # a bit too complicated right now
+            cursor_result, _ = search_fn()
+        except ValidationError as exc:
+            return Response({'detail': six.text_type(exc)}, status=400)
+
+        group_list = list(cursor_result)
+
+    if not group_list:
+        return Response(status=204)
+
+    groups_by_project_id = defaultdict(list)
+    for group in group_list:
+        groups_by_project_id[group.project_id].append(group)
+
+    for project in projects:
+        _delete_groups(request, project, groups_by_project_id.get(project.id), delete_type='delete')
+
+    return Response(status=204)
+
+
 def self_subscribe_and_assign_issue(acting_user, group):
     # Used during issue resolution to assign to acting user
     # returns None if the user didn't elect to self assign on resolution
