commit e6fc30eab948e25bed4ed37fd911c977617b1ab5
Author: Dan Fuller <dfuller@sentry.io>
Date:   Thu Apr 23 11:20:31 2020 -0700

    refs(mail): RIP MailPlugin (#18420)
    
    This is now unused, we can safely remove it.

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 5905f7b6df..307c8fa017 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -26,7 +26,6 @@ from sentry.constants import RESERVED_PROJECT_SLUGS
 from sentry.datascrubbing import validate_pii_config_update
 from sentry.lang.native.symbolicator import parse_sources, InvalidSourcesError
 from sentry.lang.native.utils import convert_crashreport_count
-from sentry.mail.utils import migrate_project_to_issue_alert_targeting
 from sentry.models import (
     AuditLogEntryEvent,
     Group,
@@ -129,9 +128,6 @@ class ProjectAdminSerializer(ProjectMemberSerializer):
     resolveAge = EmptyIntegerField(required=False, allow_null=True)
     platform = serializers.CharField(required=False, allow_null=True, allow_blank=True)
     copy_from_project = serializers.IntegerField(required=False)
-    # Temporary variable so we can test out the issue alert targeting data migration on
-    # specific projects before blanket applying globally.
-    migrateToIssueAlertTargeting = serializers.BooleanField(required=False)
 
     def validate(self, data):
         max_delay = (
@@ -616,9 +612,6 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                 if not project.copy_settings_from(result["copy_from_project"]):
                     return Response({"detail": ["Copy project settings failed."]}, status=409)
 
-            if result.get("migrateToIssueAlertTargeting"):
-                migrate_project_to_issue_alert_targeting(project)
-
             self.create_audit_entry(
                 request=request,
                 organization=project.organization,
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 77ab691671..3ca87aa2e5 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -330,7 +330,6 @@ INSTALLED_APPS = (
     "sentry.lang.javascript.apps.Config",
     "sentry.lang.native.apps.Config",
     "sentry.plugins.sentry_interface_types.apps.Config",
-    "sentry.plugins.sentry_mail.apps.Config",
     "sentry.plugins.sentry_urls.apps.Config",
     "sentry.plugins.sentry_useragents.apps.Config",
     "sentry.plugins.sentry_webhooks.apps.Config",
diff --git a/src/sentry/mail/adapter.py b/src/sentry/mail/adapter.py
index 010f5e5d40..2789f98ed4 100644
--- a/src/sentry/mail/adapter.py
+++ b/src/sentry/mail/adapter.py
@@ -44,16 +44,9 @@ class ActionTargetType(Enum):
 
 class MailAdapter(object):
     """
-    This class contains generic logic for notifying users via Email. Short term we'll
-    logic into this class from `MailPlugin` and have `MailPlugin` use the Adapter.
-    Once this is complete, we'll update logic in here to handle more cases for mail,
-    and eventually deprecate `MailPlugin` entirely.
+    This class contains generic logic for notifying users via Email.
     """
 
-    # TODO: Remove this once we've fully moved over to the new action. Just for use with
-    # `unsplit_key`
-    slug = "mail"
-
     mail_option_key = "mail:subject_prefix"
     alert_option_key = "mail:alert"
 
diff --git a/src/sentry/mail/utils.py b/src/sentry/mail/utils.py
deleted file mode 100644
index 4cde867697..0000000000
--- a/src/sentry/mail/utils.py
+++ /dev/null
@@ -1,86 +0,0 @@
-from __future__ import absolute_import
-
-from django.db import transaction
-
-from sentry.models.projectoption import ProjectOption
-from sentry.models.rule import Rule, RuleStatus
-from sentry.models.user import User
-from sentry.models.useroption import UserOption
-
-mail_action = {
-    "id": "sentry.mail.actions.NotifyEmailAction",
-    "targetType": "IssueOwners",
-    "targetIdentifier": "None",
-}
-
-
-def set_user_option(UserOption, user, key, value, project):
-    inst, created = UserOption.objects.get_or_create(
-        user=user, project=project, key=key, defaults={"value": value}
-    )
-    if not created and inst.value != value:
-        inst.update(value=value)
-
-
-def migrate_project_to_issue_alert_targeting(project):
-    if project.flags.has_issue_alerts_targeting:
-        # Migration has already been run.
-        return
-    with transaction.atomic():
-        # Determine whether this project actually has mail enabled
-        try:
-            mail_enabled = ProjectOption.objects.get(project=project, key="mail:enabled").value
-        except ProjectOption.DoesNotExist:
-            mail_enabled = True
-        for rule in Rule.objects.filter(project=project, status=RuleStatus.ACTIVE):
-            migrate_legacy_rule(rule, mail_enabled)
-
-        if not mail_enabled:
-            # If mail disabled, then we want to disable mail options for all
-            # users associated with this project so that they don't suddenly start
-            # getting mail via the `MailAdapter`, since it will always be enabled.
-            for user in User.objects.filter(
-                sentry_orgmember_set__teams__in=project.teams.all(), is_active=True
-            ):
-                set_user_option(UserOption, user, "mail:alert", 0, project)
-                set_user_option(UserOption, user, "workflow:notifications", "2", project=project)
-
-        # This marks the migration finished and shows the new UI
-        project.flags.has_issue_alerts_targeting = True
-        project.save()
-
-
-def migrate_legacy_rule(rule, mail_enabled):
-    actions = rule.data.get("actions", [])
-    new_actions = []
-    has_mail_action = False
-    for action in actions:
-        action_id = action.get("id")
-        if action_id == "sentry.rules.actions.notify_event.NotifyEventAction":
-            # This is the "Send a notification (for all legacy integrations)" action.
-            # When this action exists, we want to add the new `NotifyEmailAction` action
-            # to the rule. We'll still leave `NotifyEventAction` in place, since it will
-            # only notify non-mail plugins once we've migrated.
-            new_actions.append(action)
-            has_mail_action = True
-        elif (
-            action_id == "sentry.rules.actions.notify_event_service.NotifyEventServiceAction"
-            and action.get("service") == "mail"
-        ):
-            # This is the "Send a notification via mail" action. When this action
-            # exists, we want to add the new `NotifyEmailAction` action to the rule.
-            # We'll drop this action from the rule, since all it does it send mail and
-            # we don't want to double up.
-            has_mail_action = True
-        else:
-            new_actions.append(action)
-
-    # We only add the new action if the mail plugin is actually enabled, and there's an
-    # action that sends by mail. We do this outside the loop to ensure we don't add it
-    # more than once.
-    if mail_enabled and has_mail_action:
-        new_actions.append(mail_action)
-
-    if actions != new_actions:
-        rule.data["actions"] = new_actions
-        rule.save()
diff --git a/src/sentry/management/commands/check_notifications.py b/src/sentry/management/commands/check_notifications.py
index 03e0e1b0a4..0a79cd191a 100644
--- a/src/sentry/management/commands/check_notifications.py
+++ b/src/sentry/management/commands/check_notifications.py
@@ -2,23 +2,15 @@ from __future__ import absolute_import, print_function
 
 from django.core.management.base import BaseCommand, CommandError
 
-from sentry.models import User
+from sentry.mail import mail_adapter
+from sentry.models import Project, Organization, User
+from sentry.utils.email import get_email_addresses
 
 
-def find_mail_plugin():
-    from sentry.plugins.base import plugins
-
-    for plugin in plugins.all():
-        if type(plugin).__name__.endswith("MailPlugin"):
-            return plugin
-    assert False, "MailPlugin cannot be found"
-
-
-def handle_project(plugin, project, stream):
+def handle_project(project, stream):
     stream.write("# Project: %s\n" % project)
-    from sentry.utils.email import get_email_addresses
 
-    user_ids = plugin.get_sendable_users(project)
+    user_ids = mail_adapter.get_sendable_users(project)
     users = User.objects.in_bulk(user_ids)
     for user_id, email in get_email_addresses(user_ids, project).items():
         stream.write(u"{}: {}\n".format(users[user_id].username, email))
@@ -39,15 +31,11 @@ class Command(BaseCommand):
         if not (options["project"] or options["organization"]):
             raise CommandError("Must specify either a project or organization")
 
-        from sentry.models import Project, Organization
-
         if options["organization"]:
             projects = list(Organization.objects.get(pk=options["organization"]).project_set.all())
         else:
             projects = [Project.objects.get(pk=options["project"])]
 
-        plugin = find_mail_plugin()
-
         for project in projects:
-            handle_project(plugin, project, self.stdout)
+            handle_project(project, self.stdout)
             self.stdout.write("\n")
diff --git a/src/sentry/plugins/sentry_mail/__init__.py b/src/sentry/plugins/sentry_mail/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/src/sentry/plugins/sentry_mail/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/src/sentry/plugins/sentry_mail/apps.py b/src/sentry/plugins/sentry_mail/apps.py
deleted file mode 100644
index 3947433e09..0000000000
--- a/src/sentry/plugins/sentry_mail/apps.py
+++ /dev/null
@@ -1,13 +0,0 @@
-from __future__ import absolute_import
-
-from django.apps import AppConfig
-
-
-class Config(AppConfig):
-    name = "sentry.plugins.sentry_mail"
-
-    def ready(self):
-        from .models import MailPlugin
-        from sentry.plugins.base import register
-
-        register(MailPlugin)
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
deleted file mode 100644
index 66aebd25c8..0000000000
--- a/src/sentry/plugins/sentry_mail/models.py
+++ /dev/null
@@ -1,76 +0,0 @@
-from __future__ import absolute_import
-
-import logging
-
-import sentry
-from sentry.mail import mail_adapter
-from sentry.mail.adapter import ActionTargetType
-from sentry.plugins.bases.notify import NotificationPlugin
-from sentry.utils import metrics
-from sentry.utils.http import absolute_uri
-
-logger = logging.getLogger(__name__)
-
-
-class MailPlugin(NotificationPlugin):
-    title = "Mail"
-    conf_key = "mail"
-    slug = "mail"
-    version = sentry.VERSION
-    author = "Sentry Team"
-    author_url = "https://github.com/getsentry/sentry"
-    project_default_enabled = True
-    project_conf_form = None
-
-    def rule_notify(self, event, futures):
-        metrics.incr("mail_plugin.rule_notify")
-        return mail_adapter.rule_notify(event, futures, target_type=ActionTargetType.ISSUE_OWNERS)
-
-    def get_project_url(self, project):
-        return absolute_uri(u"/{}/{}/".format(project.organization.slug, project.slug))
-
-    def is_configured(self, project, **kwargs):
-        # Nothing to configure here
-        return True
-
-    def should_notify(self, group, event):
-        metrics.incr("mail_plugin.should_notify")
-        return not group.project.flags.has_issue_alerts_targeting and mail_adapter.should_notify(
-            group
-        )
-
-    def notify(self, notification, **kwargs):
-        metrics.incr("mail_plugin.notify")
-        return mail_adapter.notify(
-            notification, target_type=ActionTargetType.ISSUE_OWNERS, **kwargs
-        )
-
-    def notify_digest(self, project, digest):
-        metrics.incr("mail_plugin.notify_digest")
-        return mail_adapter.notify_digest(
-            project, digest, target_type=ActionTargetType.ISSUE_OWNERS
-        )
-
-    def notify_about_activity(self, activity):
-        if activity.project.flags.has_issue_alerts_targeting:
-            return
-        metrics.incr("mail_plugin.notify_about_activity")
-
-        return mail_adapter.notify_about_activity(activity)
-
-    def handle_signal(self, name, payload, **kwargs):
-        if name == "user-reports.created":
-            project = kwargs.get("project")
-            if project and not project.flags.has_issue_alerts_targeting:
-                metrics.incr("mail_plugin.handle_signal")
-                mail_adapter.handle_signal(name, payload, **kwargs)
-
-    def can_configure_for_project(self, project):
-        return (
-            super(MailPlugin, self).can_configure_for_project(project)
-            and not project.flags.has_issue_alerts_targeting
-        )
-
-
-# Legacy compatibility
-MailProcessor = MailPlugin
diff --git a/src/sentry/web/frontend/debug/mail.py b/src/sentry/web/frontend/debug/mail.py
index f317dd2c12..8c6dadb37d 100644
--- a/src/sentry/web/frontend/debug/mail.py
+++ b/src/sentry/web/frontend/debug/mail.py
@@ -245,7 +245,7 @@ def alert(request):
     rule = Rule(label="An example rule")
 
     # XXX: this interface_list code needs to be the same as in
-    #      src/sentry/plugins/sentry_mail/models.py
+    #      src/sentry/mail/adapter.py
     interface_list = []
     for interface in six.itervalues(event.interfaces):
         body = interface.to_email_html(event)
diff --git a/tests/sentry/api/endpoints/test_organization_plugins.py b/tests/sentry/api/endpoints/test_organization_plugins.py
index e4014d75e6..c3ee9e7b07 100644
--- a/tests/sentry/api/endpoints/test_organization_plugins.py
+++ b/tests/sentry/api/endpoints/test_organization_plugins.py
@@ -12,7 +12,7 @@ class OrganizationPluginsTest(APITestCase):
         self.projectB = self.create_project(organization=self.projectA.organization)
 
         plugins.get("webhooks").enable(self.projectA)
-        plugins.get("mail").enable(self.projectB)
+        plugins.get("slack").enable(self.projectB)
 
         self.login_as(user=self.user)
 
@@ -42,7 +42,7 @@ class OrganizationPluginsTest(APITestCase):
             kwargs={"organization_slug": self.projectA.organization.slug},
         )
 
-        url = u"{}?{}".format(url, "plugins=mail&plugins=webhooks")
+        url = u"{}?{}".format(url, "plugins=slack&plugins=webhooks")
 
         response = self.client.get(url)
 
@@ -53,7 +53,7 @@ class OrganizationPluginsTest(APITestCase):
         ]
 
         assert (self.projectA.id, "webhooks") in enabled_plugins
-        assert (self.projectB.id, "mail") in enabled_plugins
+        assert (self.projectB.id, "slack") in enabled_plugins
 
     def test_exposes_specific_plugins_across_all_org_projects(self):
         url = reverse(
@@ -61,7 +61,7 @@ class OrganizationPluginsTest(APITestCase):
             kwargs={"organization_slug": self.projectA.organization.slug},
         )
 
-        url = "{}?plugins=mail".format(url)
+        url = "{}?plugins=slack".format(url)
         response = self.client.get(url)
 
         assert response.status_code == 200, (response.status_code, response.content)
@@ -71,7 +71,7 @@ class OrganizationPluginsTest(APITestCase):
         ]
 
         assert (self.projectA.id, "webhooks") not in enabled_plugins
-        assert (self.projectB.id, "mail") in enabled_plugins
+        assert (self.projectB.id, "slack") in enabled_plugins
 
     def test_ignore_plugins_that_dont_exist(self):
         url = reverse(
@@ -79,7 +79,7 @@ class OrganizationPluginsTest(APITestCase):
             kwargs={"organization_slug": self.projectA.organization.slug},
         )
 
-        url = "{}?plugins=nope&plugins=beep&plugins=mail".format(url)
+        url = "{}?plugins=nope&plugins=beep&plugins=slack".format(url)
         response = self.client.get(url)
 
         assert response.status_code == 200, (response.status_code, response.content)
@@ -88,4 +88,4 @@ class OrganizationPluginsTest(APITestCase):
             (p["project"]["id"], p["slug"]) for p in [p for p in response.data if p["enabled"]]
         ]
 
-        assert enabled_plugins == [(self.projectB.id, "mail")]
+        assert enabled_plugins == [(self.projectB.id, "slack")]
diff --git a/tests/sentry/api/endpoints/test_project_rules_configuration.py b/tests/sentry/api/endpoints/test_project_rules_configuration.py
index c94c5f83bf..478d445e00 100644
--- a/tests/sentry/api/endpoints/test_project_rules_configuration.py
+++ b/tests/sentry/api/endpoints/test_project_rules_configuration.py
@@ -26,7 +26,7 @@ class ProjectRuleConfigurationTest(APITestCase):
         response = self.client.get(url, format="json")
 
         assert response.status_code == 200, response.content
-        assert len(response.data["actions"]) == 5
+        assert len(response.data["actions"]) == 4
         assert len(response.data["conditions"]) == 9
 
     @property
diff --git a/tests/sentry/mail/test_utils.py b/tests/sentry/mail/test_utils.py
deleted file mode 100644
index d9da2d8780..0000000000
--- a/tests/sentry/mail/test_utils.py
+++ /dev/null
@@ -1,129 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from uuid import uuid4
-
-from sentry.mail.utils import mail_action, migrate_project_to_issue_alert_targeting
-from sentry.models import Rule, UserOption
-from sentry.testutils import TestCase
-from sentry.plugins.base import plugins
-
-
-class MigrateProjectToIssueAlertTargetingTest(TestCase):
-    def setUp(self):
-        self.organization = self.create_organization()
-        self.user = self.create_user()
-        self.user_2 = self.create_user()
-        self.team = self.create_team(self.organization, members=[self.user, self.user_2])
-        self.project = self.create_project(organization=self.organization, teams=[self.team])
-        self.project.flags.has_issue_alerts_targeting = False
-        self.project.save()
-        self.mail = plugins.get("mail")
-
-    def create_rule(self, actions):
-        data = {
-            "conditions": [
-                {"id": "sentry.rules.conditions.first_seen_event.FirstSeenEventCondition"}
-            ],
-            "actions": actions,
-        }
-        return Rule.objects.create(project=self.project, label=uuid4().hex, data=data)
-
-    def assert_rule_actions_equal(self, rule, expected_actions):
-        rule_actions = rule.data.get("actions")
-        key = lambda action: action["id"]
-        assert sorted(rule_actions, key=key) == sorted(expected_actions, key=key)
-
-    def test_mail_enabled_no_rules(self):
-        self.mail.enable(self.project)
-        assert not self.project.flags.has_issue_alerts_targeting
-        assert not UserOption.objects.filter(user__in=(self.user, self.user_2))
-        assert not Rule.objects.filter(project=self.project).exists()
-        migrate_project_to_issue_alert_targeting(self.project)
-        assert not Rule.objects.filter(project=self.project).exists()
-        assert not UserOption.objects.filter(user__in=(self.user, self.user_2))
-        assert self.project.flags.has_issue_alerts_targeting
-
-    def test_mail_enabled_has_rules(self):
-        self.mail.enable(self.project)
-        assert not self.project.flags.has_issue_alerts_targeting
-        rule = self.create_rule(
-            [
-                # Just adding duplicate rules here because who knows what data people
-                # have.
-                {u"id": u"sentry.rules.actions.notify_event.NotifyEventAction"},
-                {u"id": u"sentry.rules.actions.notify_event.NotifyEventAction"},
-                {
-                    u"id": u"sentry.rules.actions.notify_event_service.NotifyEventServiceAction",
-                    u"service": u"mail",
-                },
-                {
-                    u"id": u"sentry.rules.actions.notify_event_service.NotifyEventServiceAction",
-                    u"service": u"mail",
-                },
-            ]
-        )
-        assert not UserOption.objects.filter(user__in=(self.user, self.user_2))
-        migrate_project_to_issue_alert_targeting(self.project)
-        assert not UserOption.objects.filter(user__in=(self.user, self.user_2))
-        rule.refresh_from_db()
-        self.assert_rule_actions_equal(
-            rule,
-            [
-                {u"id": u"sentry.rules.actions.notify_event.NotifyEventAction"},
-                {u"id": u"sentry.rules.actions.notify_event.NotifyEventAction"},
-                mail_action,
-            ],
-        )
-        assert self.project.flags.has_issue_alerts_targeting
-
-    def test_mail_disabled_no_rules(self):
-        self.mail.disable(self.project)
-        assert not self.project.flags.has_issue_alerts_targeting
-        assert not UserOption.objects.filter(user__in=(self.user, self.user_2))
-        assert not Rule.objects.filter(project=self.project).exists()
-        migrate_project_to_issue_alert_targeting(self.project)
-        assert not Rule.objects.filter(project=self.project).exists()
-        for user in (self.user, self.user_2):
-            assert UserOption.objects.get_value(user, "mail:alert", project=self.project) == 0
-            assert (
-                UserOption.objects.get_value(user, "workflow:notifications", project=self.project)
-                == "2"
-            )
-        assert self.project.flags.has_issue_alerts_targeting
-
-    def test_mail_disabled_has_rules(self):
-        self.mail.disable(self.project)
-        assert not self.project.flags.has_issue_alerts_targeting
-        rule = self.create_rule(
-            [
-                {u"id": u"sentry.rules.actions.notify_event.NotifyEventAction"},
-                {u"id": u"sentry.rules.actions.notify_event.NotifyEventAction"},
-                {
-                    u"id": u"sentry.rules.actions.notify_event_service.NotifyEventServiceAction",
-                    u"service": u"mail",
-                },
-                {
-                    u"id": u"sentry.rules.actions.notify_event_service.NotifyEventServiceAction",
-                    u"service": u"mail",
-                },
-            ]
-        )
-        assert not UserOption.objects.filter(user__in=(self.user, self.user_2))
-        migrate_project_to_issue_alert_targeting(self.project)
-        rule.refresh_from_db()
-        self.assert_rule_actions_equal(
-            rule,
-            [
-                {u"id": u"sentry.rules.actions.notify_event.NotifyEventAction"},
-                {u"id": u"sentry.rules.actions.notify_event.NotifyEventAction"},
-            ],
-        )
-        for user in (self.user, self.user_2):
-            assert UserOption.objects.get_value(user, "mail:alert", project=self.project) == 0
-            assert (
-                UserOption.objects.get_value(user, "workflow:notifications", project=self.project)
-                == "2"
-            )
-        assert self.project.flags.has_issue_alerts_targeting
diff --git a/tests/sentry/plugins/mail/__init__.py b/tests/sentry/plugins/mail/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/tests/sentry/plugins/mail/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
deleted file mode 100644
index 3ee523d2bb..0000000000
--- a/tests/sentry/plugins/mail/tests.py
+++ /dev/null
@@ -1,666 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from datetime import datetime
-
-from sentry.utils.compat import mock
-import pytz
-import six
-from django.contrib.auth.models import AnonymousUser
-from django.core import mail
-from django.db.models import F
-from django.utils import timezone
-from exam import fixture
-from sentry.utils.compat.mock import Mock
-
-from sentry.api.serializers import serialize, UserReportWithGroupSerializer
-from sentry.digests.notifications import build_digest, event_to_record
-from sentry.mail import mail_adapter
-from sentry.models import (
-    Activity,
-    GroupSubscription,
-    Organization,
-    OrganizationMember,
-    OrganizationMemberTeam,
-    Project,
-    ProjectOption,
-    ProjectOwnership,
-    Repository,
-    Rule,
-    UserOption,
-    UserOptionValue,
-    UserReport,
-)
-from sentry.ownership.grammar import Owner, Matcher, dump_schema
-from sentry.plugins.base import Notification
-from sentry.mail.activity.base import ActivityEmail
-from sentry.plugins.sentry_mail.models import MailPlugin
-from sentry.event_manager import get_event_type
-from sentry.testutils import TestCase
-from sentry.utils.email import MessageBuilder
-from sentry.event_manager import EventManager
-from sentry.testutils.helpers.datetime import before_now, iso_format
-
-
-class MailPluginTest(TestCase):
-    @fixture
-    def plugin(self):
-        return MailPlugin()
-
-    def test_simple_notification(self):
-        event = self.store_event(
-            data={"message": "Hello world", "level": "error"}, project_id=self.project.id
-        )
-
-        rule = Rule.objects.create(project=self.project, label="my rule")
-
-        notification = Notification(event=event, rule=rule)
-
-        with self.options({"system.url-prefix": "http://example.com"}), self.tasks():
-            self.plugin.notify(notification)
-
-        msg = mail.outbox[0]
-        assert msg.subject == "[Sentry] BAR-1 - Hello world"
-        assert "my rule" in msg.alternatives[0][0]
-
-    @mock.patch("sentry.interfaces.stacktrace.Stacktrace.get_title")
-    @mock.patch("sentry.interfaces.stacktrace.Stacktrace.to_email_html")
-    def test_notify_users_renders_interfaces_with_utf8(self, _to_email_html, _get_title):
-        _to_email_html.return_value = u"רונית מגן"
-        _get_title.return_value = "Stacktrace"
-
-        event = self.store_event(
-            data={"message": "Soubor ji\xc5\xbe existuje", "stacktrace": {"frames": [{}]}},
-            project_id=self.project.id,
-        )
-
-        notification = Notification(event=event)
-
-        with self.options({"system.url-prefix": "http://example.com"}):
-            self.plugin.notify(notification)
-
-        _get_title.assert_called_once_with()
-        _to_email_html.assert_called_once_with(event)
-
-    @mock.patch("sentry.mail.mail_adapter._send_mail")
-    def test_notify_users_does_email(self, _send_mail):
-        event_manager = EventManager({"message": "hello world", "level": "error"})
-        event_manager.normalize()
-        event_data = event_manager.get_data()
-        event_type = get_event_type(event_data)
-        event_data["type"] = event_type.key
-        event_data["metadata"] = event_type.get_metadata(event_data)
-
-        event = event_manager.save(self.project.id)
-        group = event.group
-
-        notification = Notification(event=event)
-
-        with self.options({"system.url-prefix": "http://example.com"}):
-            self.plugin.notify(notification)
-
-        assert _send_mail.call_count == 1
-        args, kwargs = _send_mail.call_args
-        self.assertEquals(kwargs.get("project"), self.project)
-        self.assertEquals(kwargs.get("reference"), group)
-        assert kwargs.get("subject") == u"BAR-1 - hello world"
-
-    @mock.patch("sentry.mail.mail_adapter._send_mail")
-    def test_multiline_error(self, _send_mail):
-        event_manager = EventManager({"message": "hello world\nfoo bar", "level": "error"})
-        event_manager.normalize()
-        event_data = event_manager.get_data()
-        event_type = get_event_type(event_data)
-        event_data["type"] = event_type.key
-        event_data["metadata"] = event_type.get_metadata(event_data)
-
-        event = event_manager.save(self.project.id)
-
-        notification = Notification(event=event)
-
-        with self.options({"system.url-prefix": "http://example.com"}):
-            self.plugin.notify(notification)
-
-        assert _send_mail.call_count == 1
-        args, kwargs = _send_mail.call_args
-        assert kwargs.get("subject") == u"BAR-1 - hello world"
-
-    def test_get_sendable_users(self):
-        from sentry.models import UserOption, User
-
-        user = self.create_user(email="foo@example.com", is_active=True)
-        user2 = self.create_user(email="baz@example.com", is_active=True)
-        self.create_user(email="baz2@example.com", is_active=True)
-
-        # user with inactive account
-        self.create_user(email="bar@example.com", is_active=False)
-        # user not in any groups
-        self.create_user(email="bar2@example.com", is_active=True)
-
-        organization = self.create_organization(owner=user)
-        team = self.create_team(organization=organization)
-
-        project = self.create_project(name="Test", teams=[team])
-        OrganizationMemberTeam.objects.create(
-            organizationmember=OrganizationMember.objects.get(user=user, organization=organization),
-            team=team,
-        )
-        self.create_member(user=user2, organization=organization, teams=[team])
-
-        # all members
-        assert sorted(set([user.pk, user2.pk])) == sorted(self.plugin.get_sendable_users(project))
-
-        # disabled user2
-        UserOption.objects.create(key="mail:alert", value=0, project=project, user=user2)
-
-        assert user2.pk not in self.plugin.get_sendable_users(project)
-
-        user4 = User.objects.create(username="baz4", email="bar@example.com", is_active=True)
-        self.create_member(user=user4, organization=organization, teams=[team])
-        assert user4.pk in self.plugin.get_sendable_users(project)
-
-        # disabled by default user4
-        uo1 = UserOption.objects.create(
-            key="subscribe_by_default", value="0", project=project, user=user4
-        )
-
-        assert user4.pk not in self.plugin.get_sendable_users(project)
-
-        uo1.delete()
-
-        UserOption.objects.create(
-            key="subscribe_by_default", value=u"0", project=project, user=user4
-        )
-
-        assert user4.pk not in self.plugin.get_sendable_users(project)
-
-    def test_notify_users_with_utf8_subject(self):
-        event = self.store_event(
-            data={"message": "רונית מגן", "level": "error"}, project_id=self.project.id
-        )
-
-        notification = Notification(event=event)
-
-        with self.options({"system.url-prefix": "http://example.com"}), self.tasks():
-            self.plugin.notify(notification)
-
-        assert len(mail.outbox) == 1
-        msg = mail.outbox[0]
-        assert msg.subject == u"[Sentry] BAR-1 - רונית מגן"
-
-    def test_get_digest_subject(self):
-        assert (
-            mail_adapter.get_digest_subject(
-                mock.Mock(qualified_short_id="BAR-1"),
-                {mock.sentinel.group: 3},
-                datetime(2016, 9, 19, 1, 2, 3, tzinfo=pytz.utc),
-            )
-            == "BAR-1 - 1 new alert since Sept. 19, 2016, 1:02 a.m. UTC"
-        )
-
-    @mock.patch.object(mail_adapter, "notify", side_effect=mail_adapter.notify, autospec=True)
-    def test_notify_digest(self, notify):
-        project = self.project
-        event = self.store_event(
-            data={"timestamp": iso_format(before_now(minutes=1)), "fingerprint": ["group-1"]},
-            project_id=project.id,
-        )
-        event2 = self.store_event(
-            data={"timestamp": iso_format(before_now(minutes=1)), "fingerprint": ["group-2"]},
-            project_id=project.id,
-        )
-
-        rule = project.rule_set.all()[0]
-        digest = build_digest(
-            project, (event_to_record(event, (rule,)), event_to_record(event2, (rule,)))
-        )
-
-        with self.tasks():
-            self.plugin.notify_digest(project, digest)
-
-        assert notify.call_count == 0
-        assert len(mail.outbox) == 1
-
-        message = mail.outbox[0]
-        assert "List-ID" in message.message()
-
-    @mock.patch.object(mail_adapter, "notify", side_effect=mail_adapter.notify, autospec=True)
-    @mock.patch.object(MessageBuilder, "send_async", autospec=True)
-    def test_notify_digest_single_record(self, send_async, notify):
-        event = self.store_event(data={}, project_id=self.project.id)
-        rule = self.project.rule_set.all()[0]
-        digest = build_digest(self.project, (event_to_record(event, (rule,)),))
-        self.plugin.notify_digest(self.project, digest)
-        assert send_async.call_count == 1
-        assert notify.call_count == 1
-
-    def test_notify_digest_subject_prefix(self):
-        ProjectOption.objects.set_value(
-            project=self.project, key=u"mail:subject_prefix", value="[Example prefix] "
-        )
-        event = self.store_event(
-            data={"timestamp": iso_format(before_now(minutes=1)), "fingerprint": ["group-1"]},
-            project_id=self.project.id,
-        )
-        event2 = self.store_event(
-            data={"timestamp": iso_format(before_now(minutes=1)), "fingerprint": ["group-2"]},
-            project_id=self.project.id,
-        )
-
-        rule = self.project.rule_set.all()[0]
-
-        digest = build_digest(
-            self.project, (event_to_record(event, (rule,)), event_to_record(event2, (rule,)))
-        )
-
-        with self.tasks():
-            self.plugin.notify_digest(self.project, digest)
-
-        assert len(mail.outbox) == 1
-
-        msg = mail.outbox[0]
-
-        assert msg.subject.startswith("[Example prefix]")
-
-    def test_assignment(self):
-        self.project.update(flags=F("flags").bitand(~Project.flags.has_issue_alerts_targeting))
-        UserOption.objects.set_value(
-            user=self.user, key="workflow:notifications", value=UserOptionValue.all_conversations
-        )
-        activity = Activity.objects.create(
-            project=self.project,
-            group=self.group,
-            type=Activity.ASSIGNED,
-            user=self.create_user("foo@example.com"),
-            data={"assignee": six.text_type(self.user.id), "assigneeType": "user"},
-        )
-
-        with self.tasks():
-            self.plugin.notify_about_activity(activity)
-
-        assert len(mail.outbox) == 1
-
-        msg = mail.outbox[0]
-
-        assert (
-            msg.subject
-            == "Re: [Sentry] BAR-1 - \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf"
-        )
-        assert msg.to == [self.user.email]
-
-    def test_assignment_team(self):
-        self.project.update(flags=F("flags").bitand(~Project.flags.has_issue_alerts_targeting))
-        UserOption.objects.set_value(
-            user=self.user, key="workflow:notifications", value=UserOptionValue.all_conversations
-        )
-
-        activity = Activity.objects.create(
-            project=self.project,
-            group=self.group,
-            type=Activity.ASSIGNED,
-            user=self.create_user("foo@example.com"),
-            data={"assignee": six.text_type(self.project.teams.first().id), "assigneeType": "team"},
-        )
-
-        with self.tasks():
-            self.plugin.notify_about_activity(activity)
-
-        assert len(mail.outbox) == 1
-
-        msg = mail.outbox[0]
-
-        assert (
-            msg.subject
-            == "Re: [Sentry] BAR-1 - \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf"
-        )
-        assert msg.to == [self.user.email]
-
-    def test_note(self):
-        self.project.update(flags=F("flags").bitand(~Project.flags.has_issue_alerts_targeting))
-        user_foo = self.create_user("foo@example.com")
-        UserOption.objects.set_value(
-            user=self.user, key="workflow:notifications", value=UserOptionValue.all_conversations
-        )
-
-        activity = Activity.objects.create(
-            project=self.project,
-            group=self.group,
-            type=Activity.NOTE,
-            user=user_foo,
-            data={"text": "sup guise"},
-        )
-
-        self.project.teams.first().organization.member_set.create(user=user_foo)
-
-        with self.tasks():
-            self.plugin.notify_about_activity(activity)
-
-        assert len(mail.outbox) >= 1
-
-        msg = mail.outbox[-1]
-
-        assert (
-            msg.subject
-            == "Re: [Sentry] BAR-1 - \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf"
-        )
-        assert msg.to == [self.user.email]
-
-    def test_notify_with_suspect_commits(self):
-        repo = Repository.objects.create(
-            organization_id=self.organization.id, name=self.organization.id
-        )
-        release = self.create_release(project=self.project, version="v12")
-        release.set_commits(
-            [
-                {
-                    "id": "a" * 40,
-                    "repository": repo.name,
-                    "author_email": "bob@example.com",
-                    "author_name": "Bob",
-                    "message": "i fixed a bug",
-                    "patch_set": [{"path": "src/sentry/models/release.py", "type": "M"}],
-                }
-            ]
-        )
-
-        event = self.store_event(
-            data={
-                "message": "Kaboom!",
-                "platform": "python",
-                "timestamp": iso_format(before_now(seconds=1)),
-                "stacktrace": {
-                    "frames": [
-                        {
-                            "function": "handle_set_commits",
-                            "abs_path": "/usr/src/sentry/src/sentry/tasks.py",
-                            "module": "sentry.tasks",
-                            "in_app": True,
-                            "lineno": 30,
-                            "filename": "sentry/tasks.py",
-                        },
-                        {
-                            "function": "set_commits",
-                            "abs_path": "/usr/src/sentry/src/sentry/models/release.py",
-                            "module": "sentry.models.release",
-                            "in_app": True,
-                            "lineno": 39,
-                            "filename": "sentry/models/release.py",
-                        },
-                    ]
-                },
-                "tags": {"sentry:release": release.version},
-            },
-            project_id=self.project.id,
-        )
-
-        with self.tasks():
-            notification = Notification(event=event)
-
-            self.plugin.notify(notification)
-
-        assert len(mail.outbox) >= 1
-
-        msg = mail.outbox[-1]
-
-        assert "Suspect Commits" in msg.body
-
-
-class MailPluginSignalsTest(TestCase):
-    @fixture
-    def plugin(self):
-        return MailPlugin()
-
-    def create_report(self):
-        user_foo = self.create_user("foo@example.com")
-        self.project.teams.first().organization.member_set.create(user=user_foo)
-
-        return UserReport.objects.create(
-            project=self.project,
-            group=self.group,
-            name="Homer Simpson",
-            email="homer.simpson@example.com",
-        )
-
-    def test_user_feedback(self):
-        self.project.update(flags=F("flags").bitand(~Project.flags.has_issue_alerts_targeting))
-        report = self.create_report()
-        UserOption.objects.set_value(
-            user=self.user, key="workflow:notifications", value=UserOptionValue.all_conversations
-        )
-
-        with self.tasks():
-            self.plugin.handle_signal(
-                name="user-reports.created",
-                project=self.project,
-                payload={
-                    "report": serialize(report, AnonymousUser(), UserReportWithGroupSerializer())
-                },
-            )
-
-        assert len(mail.outbox) == 1
-        msg = mail.outbox[0]
-
-        # email includes issue metadata
-        assert "group-header" in msg.alternatives[0][0]
-        assert "enhanced privacy" not in msg.body
-
-        assert msg.subject == u"[Sentry] {} - New Feedback from Homer Simpson".format(
-            self.group.qualified_short_id
-        )
-        assert msg.to == [self.user.email]
-
-    def test_user_feedback__enhanced_privacy(self):
-        self.project.update(flags=F("flags").bitand(~Project.flags.has_issue_alerts_targeting))
-        self.organization.update(flags=F("flags").bitor(Organization.flags.enhanced_privacy))
-        assert self.organization.flags.enhanced_privacy.is_set is True
-        UserOption.objects.set_value(
-            user=self.user, key="workflow:notifications", value=UserOptionValue.all_conversations
-        )
-
-        report = self.create_report()
-
-        with self.tasks():
-            self.plugin.handle_signal(
-                name="user-reports.created",
-                project=self.project,
-                payload={
-                    "report": serialize(report, AnonymousUser(), UserReportWithGroupSerializer())
-                },
-            )
-
-        assert len(mail.outbox) == 1
-        msg = mail.outbox[0]
-
-        # email does not include issue metadata
-        assert "group-header" not in msg.alternatives[0][0]
-        assert "enhanced privacy" in msg.body
-
-        assert msg.subject == u"[Sentry] {} - New Feedback from Homer Simpson".format(
-            self.group.qualified_short_id
-        )
-        assert msg.to == [self.user.email]
-
-
-class ActivityEmailTestCase(TestCase):
-    def get_fixture_data(self, users):
-        organization = self.create_organization(owner=self.create_user())
-        team = self.create_team(organization=organization)
-        project = self.create_project(organization=organization, teams=[team])
-        group = self.create_group(project=project)
-
-        users = [self.create_user() for _ in range(users)]
-
-        for user in users:
-            self.create_member([team], user=user, organization=organization)
-            GroupSubscription.objects.subscribe(group, user)
-
-        return group, users
-
-    def test_get_participants(self):
-        group, (actor, other) = self.get_fixture_data(2)
-
-        email = ActivityEmail(Activity(project=group.project, group=group, user=actor))
-
-        assert set(email.get_participants()) == set([other])
-
-        UserOption.objects.set_value(user=actor, key="self_notifications", value="1")
-
-        assert set(email.get_participants()) == set([actor, other])
-
-    def test_get_participants_without_actor(self):
-        group, (user,) = self.get_fixture_data(1)
-
-        email = ActivityEmail(Activity(project=group.project, group=group))
-
-        assert set(email.get_participants()) == set([user])
-
-    def test_get_subject(self):
-        group, (user,) = self.get_fixture_data(1)
-
-        email = ActivityEmail(Activity(project=group.project, group=group))
-
-        with mock.patch("sentry.models.ProjectOption.objects.get_value") as get_value:
-            get_value.side_effect = (
-                lambda project, key, default=None: "[Example prefix] "
-                if key == "mail:subject_prefix"
-                else default
-            )
-            assert email.get_subject_with_prefix().startswith("[Example prefix] ")
-
-
-class MailPluginOwnersTest(TestCase):
-    @fixture
-    def plugin(self):
-        return MailPlugin()
-
-    def setUp(self):
-        from sentry.ownership.grammar import Rule
-
-        self.user = self.create_user(email="foo@example.com", is_active=True)
-        self.user2 = self.create_user(email="baz@example.com", is_active=True)
-
-        self.organization = self.create_organization(owner=self.user)
-        self.team = self.create_team(organization=self.organization)
-
-        self.project = self.create_project(name="Test", teams=[self.team])
-        OrganizationMemberTeam.objects.create(
-            organizationmember=OrganizationMember.objects.get(
-                user=self.user, organization=self.organization
-            ),
-            team=self.team,
-        )
-        self.create_member(user=self.user2, organization=self.organization, teams=[self.team])
-        self.group = self.create_group(
-            first_seen=timezone.now(),
-            last_seen=timezone.now(),
-            project=self.project,
-            message="hello  world",
-            logger="root",
-        )
-        ProjectOwnership.objects.create(
-            project_id=self.project.id,
-            schema=dump_schema(
-                [
-                    Rule(Matcher("path", "*.py"), [Owner("team", self.team.slug)]),
-                    Rule(Matcher("path", "*.jx"), [Owner("user", self.user2.email)]),
-                    Rule(
-                        Matcher("path", "*.cbl"),
-                        [Owner("user", self.user.email), Owner("user", self.user2.email)],
-                    ),
-                ]
-            ),
-            fallthrough=True,
-        )
-
-    def make_event_data(self, filename, url="http://example.com"):
-        mgr = EventManager(
-            {
-                "tags": [("level", "error")],
-                "stacktrace": {"frames": [{"lineno": 1, "filename": filename}]},
-                "request": {"url": url},
-            }
-        )
-        mgr.normalize()
-        data = mgr.get_data()
-        event_type = get_event_type(data)
-        data["type"] = event_type.key
-        data["metadata"] = event_type.get_metadata(data)
-
-        return data
-
-    def assert_notify(self, event, emails_sent_to):
-        mail.outbox = []
-        with self.options({"system.url-prefix": "http://example.com"}), self.tasks():
-            self.plugin.notify(Notification(event=event))
-        assert len(mail.outbox) == len(emails_sent_to)
-        assert sorted(email.to[0] for email in mail.outbox) == sorted(emails_sent_to)
-
-    def test_notify_users_with_owners(self):
-        event_all_users = self.store_event(
-            data=self.make_event_data("foo.cbl"), project_id=self.project.id
-        )
-        self.assert_notify(event_all_users, [self.user.email, self.user2.email])
-
-        event_team = self.store_event(
-            data=self.make_event_data("foo.py"), project_id=self.project.id
-        )
-        self.assert_notify(event_team, [self.user.email, self.user2.email])
-
-        event_single_user = self.store_event(
-            data=self.make_event_data("foo.jx"), project_id=self.project.id
-        )
-        self.assert_notify(event_single_user, [self.user2.email])
-
-        # Make sure that disabling mail alerts works as expected
-        UserOption.objects.set_value(
-            user=self.user2, key="mail:alert", value=0, project=self.project
-        )
-        event_all_users = self.store_event(
-            data=self.make_event_data("foo.cbl"), project_id=self.project.id
-        )
-        self.assert_notify(event_all_users, [self.user.email])
-
-
-class TestCanConfigureForProject(TestCase):
-    @fixture
-    def plugin(self):
-        return MailPlugin()
-
-    def test_does_not_have_alerts_targeting(self):
-        self.project.flags.has_issue_alerts_targeting = False
-        assert self.plugin.can_configure_for_project(self.project)
-
-    def test_has_alerts_targeting(self):
-        self.project.flags.has_issue_alerts_targeting = True
-        assert not self.plugin.can_configure_for_project(self.project)
-
-
-class MailPluginShouldNotifyTest(TestCase):
-    @fixture
-    def plugin(self):
-        return MailPlugin()
-
-    @mock.patch("sentry.mail.mail_adapter.get_sendable_users", Mock(return_value=[]))
-    def test_should_notify_no_sendable_users_has_issue_alerts_targeting(self):
-        self.group.project.flags.has_issue_alerts_targeting = True
-        self.group.project.save()
-        assert not self.plugin.should_notify(group=self.group, event=Mock())
-
-    @mock.patch("sentry.mail.mail_adapter.get_sendable_users", Mock(return_value=[]))
-    def test_should_notify_no_sendable_users_not_has_issue_alerts_targeting(self):
-        self.group.project.flags.has_issue_alerts_targeting = False
-        self.group.project.save()
-        assert not self.plugin.should_notify(group=self.group, event=Mock())
-
-    @mock.patch("sentry.mail.mail_adapter.get_sendable_users", Mock(return_value=[1]))
-    def test_should_notify_sendable_users_has_issue_alerts_targetting(self):
-        self.group.project.flags.has_issue_alerts_targeting = True
-        self.group.project.save()
-        assert not self.plugin.should_notify(group=self.group, event=Mock())
-
-    @mock.patch("sentry.mail.mail_adapter.get_sendable_users", Mock(return_value=[1]))
-    def test_should_notify_sendable_users_not_has_issue_alerts_targetting(self):
-        self.group.project.flags.has_issue_alerts_targeting = False
-        self.group.project.save()
-        assert self.plugin.should_notify(group=self.group, event=Mock())
