commit 29abec6ae3b825a0334c4fd6854b9e709f19afd1
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed May 16 12:28:11 2018 -0700

    fix(settings): Fix unhandled XHR error in Project Settings (#8439)
    
    Fixes JAVASCRIPT-3C0 (partially)
    
    Ignore 401s due to sudo requires, but log everything else if we can

diff --git a/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx b/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx
new file mode 100644
index 0000000000..b520358672
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx
@@ -0,0 +1,31 @@
+import Raven from 'raven-js';
+
+export default function handleXhrErrorResponse(message) {
+  return resp => {
+    if (!resp) return;
+    if (!resp.responseJSON) return;
+
+    let {responseJSON} = resp;
+
+    // If this is a string then just capture it as error
+    if (typeof responseJSON.detail === 'string') {
+      Raven.captureException(new Error(message), {
+        status: resp.status,
+        detail: responseJSON.detail,
+      });
+      return;
+    }
+
+    // Ignore sudo-required errors
+    if (responseJSON.detail.code === 'sudo-required') return;
+
+    if (typeof responseJSON.detail.message === 'string') {
+      Raven.captureException(new Error(message), {
+        status: resp.status,
+        detail: responseJSON.detail.message,
+        code: responseJSON.detail.code,
+      });
+      return;
+    }
+  };
+}
diff --git a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
index a421c926e8..fe40f51761 100644
--- a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
@@ -18,6 +18,7 @@ import Confirm from 'app/components/confirm';
 import Field from 'app/views/settings/components/forms/field';
 import Form from 'app/views/settings/components/forms/form';
 import JsonForm from 'app/views/settings/components/forms/jsonForm';
+import handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';
 import {Panel, PanelAlert, PanelHeader} from 'app/components/panels';
 import ProjectsStore from 'app/stores/projectsStore';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
@@ -61,7 +62,7 @@ class ProjectGeneralSettings extends AsyncView {
     removeProject(this.api, orgId, project).then(() => {
       // Need to hard reload because lots of components do not listen to Projects Store
       window.location.assign('/');
-    });
+    }, handleXhrErrorResponse('Unable to remove project'));
   };
 
   handleTransferProject = () => {
@@ -73,7 +74,7 @@ class ProjectGeneralSettings extends AsyncView {
     transferProject(this.api, orgId, project, this._form.email).then(() => {
       // Need to hard reload because lots of components do not listen to Projects Store
       window.location.assign('/');
-    });
+    }, handleXhrErrorResponse('Unable to transfer project'));
   };
 
   renderRemoveProject() {
diff --git a/tests/js/spec/utils/handleXhrErrorResponse.spec.jsx b/tests/js/spec/utils/handleXhrErrorResponse.spec.jsx
new file mode 100644
index 0000000000..a0998f44dc
--- /dev/null
+++ b/tests/js/spec/utils/handleXhrErrorResponse.spec.jsx
@@ -0,0 +1,53 @@
+import Raven from 'raven-js';
+import handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';
+
+jest.mock('raven-js', () => ({
+  captureException: jest.fn(),
+}));
+
+describe('handleXhrErrorResponse', function() {
+  const stringError = {responseJSON: {detail: 'Error'}, status: 400};
+  const objError = {
+    status: 400,
+    responseJSON: {detail: {code: 'api-err-code', message: 'Error message'}},
+  };
+  beforeEach(function() {
+    Raven.captureException.mockReset();
+  });
+
+  it('does nothing if we have invalid response', function() {
+    handleXhrErrorResponse('')(null);
+    expect(Raven.captureException).not.toHaveBeenCalled();
+    handleXhrErrorResponse('')({});
+    expect(Raven.captureException).not.toHaveBeenCalled();
+  });
+
+  it('captures an exception to raven when `resp.detail` is a string', function() {
+    handleXhrErrorResponse('String error')(stringError);
+    expect(Raven.captureException).toHaveBeenCalledWith(new Error('String error'), {
+      status: 400,
+      detail: 'Error',
+    });
+  });
+
+  it('captures an exception to raven when `resp.detail` is an object', function() {
+    handleXhrErrorResponse('Object error')(objError);
+    expect(Raven.captureException).toHaveBeenCalledWith(new Error('Object error'), {
+      status: 400,
+      detail: 'Error message',
+      code: 'api-err-code',
+    });
+  });
+  it('ignores `sudo-required` errors', function() {
+    handleXhrErrorResponse('Sudo required error')({
+      status: 401,
+      responseJSON: {
+        detail: {
+          code: 'sudo-required',
+          detail: 'Sudo required',
+        },
+      },
+    });
+    expect(Raven.captureException).not.toHaveBeenCalled();
+  });
+});
