commit 58117e458b520ef89404b435fb7c1eab39c7a62a
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Oct 18 10:30:01 2016 -0700

    sourcemaps: More libsourcemap compatibility (#4381)

diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index e2e7699fa9..d2df6b5f8d 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -77,7 +77,7 @@ def expose_url(url):
     if url[:5] == 'data:':
         return u'<data url>'
     url = truncatechars(url, MAX_URL_LENGTH)
-    if isinstance(url, bytes):
+    if isinstance(url, six.binary_type):
         url = url.decode('utf-8', 'replace')
     return url
 
@@ -903,7 +903,14 @@ class SourceProcessor(object):
             # Ideally, we would do this lazily.
             content = sourcemap_view.get_source_contents(src_id)
             if content is not None:
-                self.cache.add(urljoin(sourcemap_url, source), content)
+                # TODO(mattrobenolt): This is gross. libsourcemap returns back
+                # bytes, and our internal stuff assumed unicode. So everything else in
+                # the pipeline assumes unicode and working with bytes is harder.
+                # So let's coerce here to unicodes just to conform to API for both,
+                # but remove this and handle bytes down the line when done.
+                if isinstance(content, six.binary_type):
+                    content = content.decode('utf-8', errors='replace')
+                self.cache.add(urljoin(sourcemap_url, source), content.split(u'\n'))
 
     def populate_source_cache(self, frames, release):
         """
diff --git a/src/sentry/lang/javascript/sourcemaps/native.py b/src/sentry/lang/javascript/sourcemaps/native.py
index d78b3d5649..2141aaab92 100644
--- a/src/sentry/lang/javascript/sourcemaps/native.py
+++ b/src/sentry/lang/javascript/sourcemaps/native.py
@@ -155,7 +155,7 @@ def _sourcemap_to_index(smap):
             if value is None:
                 continue
 
-            content[src_id] = value.split('\n')
+            content[src_id] = value
 
     for token in parse_sourcemap(smap):
         token_list.append(token)
diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
index 1d29549d49..71988ff8d1 100644
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ b/tests/sentry/lang/javascript/test_plugin.py
@@ -10,7 +10,9 @@ from mock import patch
 from sentry.models import Event, File, Release, ReleaseFile
 from sentry.testutils import TestCase
 
-BASE64_SOURCEMAP = 'data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvdGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zb2xlLmxvZyhcImhlbGxvLCBXb3JsZCFcIikiXX0='
+BASE64_SOURCEMAP = 'data:application/json;base64,' + (
+    '{"version":3,"file":"generated.js","sources":["/test.js"],"names":[],"mappings":"AAAA","sourcesContent":["console.log(\\"hello, World!\\")"]}'.encode('base64').replace('\n', '')
+)
 
 
 def get_fixture_path(name):
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index bb4126d532..e5caa3158c 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -251,7 +251,7 @@ class FetchBase64SourcemapTest(TestCase):
         tokens = [Token(1, 0, '/test.js', 0, 0, 0, None)]
         sources = ['/test.js']
         keys = [(1, 0)]
-        content = {0: ['console.log("hello, World!")']}
+        content = {0: 'console.log("hello, World!")'}
 
         assert smap_view.index == IndexedSourceMapIndex([(0, 0)], [SourceMapIndex(tokens, keys, sources, content)])
 
diff --git a/tests/sentry/lang/javascript/test_sourcemaps.py b/tests/sentry/lang/javascript/test_sourcemaps.py
index e4d99cf7e2..68595cad37 100644
--- a/tests/sentry/lang/javascript/test_sourcemaps.py
+++ b/tests/sentry/lang/javascript/test_sourcemaps.py
@@ -127,8 +127,14 @@ class GetSourceContentsTest(TestCase):
     def test_indexed_inline(self):
         smap_view = NativeView.from_json(indexed_sourcemap_example)
 
-        assert smap_view.get_source_contents((0, 0)) == [' ONE.foo = function (bar) {', '   return baz(bar);', ' };']
-        assert smap_view.get_source_contents((1, 0)) == [' TWO.inc = function (n) {', '   return n + 1;', ' };']
+        assert smap_view.get_source_contents((0, 0)) == (
+            ' ONE.foo = function (bar) {\n' +
+            '   return baz(bar);\n' +
+            ' };')
+        assert smap_view.get_source_contents((1, 0)) == (
+            ' TWO.inc = function (n) {\n' +
+            '   return n + 1;\n' +
+            ' };')
 
 
 class ParseSourcemapTest(TestCase):
