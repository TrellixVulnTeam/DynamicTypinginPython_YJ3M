commit 55cf9e52b25bd5b93712cf4f11a36b4e41627042
Author: josh <josh@jrl.ninja>
Date:   Tue Nov 26 10:28:55 2019 -0800

    ref(django 1.10): better plugin urlpatterns (#15815)

diff --git a/src/sentry/plugins/base/group_api_urls.py b/src/sentry/plugins/base/group_api_urls.py
index f38d19d282..7e47aee31b 100644
--- a/src/sentry/plugins/base/group_api_urls.py
+++ b/src/sentry/plugins/base/group_api_urls.py
@@ -3,32 +3,28 @@ from __future__ import absolute_import
 import logging
 import re
 
-from django.core.urlresolvers import RegexURLResolver, RegexURLPattern
-from django.conf.urls import include, url
+from django.conf.urls import include, url, RegexURLResolver, RegexURLPattern
 
 from sentry.plugins.base import plugins
 
 logger = logging.getLogger("sentry.plugins")
 
 
-def ensure_url(u):
-    if isinstance(u, (tuple, list)):
-        return url(*u)
-    elif not isinstance(u, (RegexURLResolver, RegexURLPattern)):
-        raise TypeError(
-            "url must be RegexURLResolver or RegexURLPattern, not %r: %r" % (type(u).__name__, u)
-        )
-    return u
-
-
 def load_plugin_urls(plugins):
     urlpatterns = []
     for plugin in plugins:
+        urls = plugin.get_group_urls()
+        if not urls:
+            continue
         try:
-            urls = plugin.get_group_urls()
-            if not urls:
-                continue
-            urls = [ensure_url(u) for u in urls]
+            # a plugin's get_group_urls should return an iterable of url()'s,
+            # which can either be RegexURLResolver or RegexURLPattern
+            for u in urls:
+                if not isinstance(u, (RegexURLResolver, RegexURLPattern)):
+                    raise TypeError(
+                        "url must be RegexURLResolver or RegexURLPattern, not %r: %r"
+                        % (type(u).__name__, u)
+                    )
         except Exception:
             logger.exception("routes.failed", extra={"plugin": type(plugin).__name__})
         else:
diff --git a/src/sentry/plugins/base/project_api_urls.py b/src/sentry/plugins/base/project_api_urls.py
index 23165f74b2..c883bb8c61 100644
--- a/src/sentry/plugins/base/project_api_urls.py
+++ b/src/sentry/plugins/base/project_api_urls.py
@@ -3,32 +3,28 @@ from __future__ import absolute_import
 import logging
 import re
 
-from django.core.urlresolvers import RegexURLResolver, RegexURLPattern
-from django.conf.urls import include, url
+from django.conf.urls import include, url, RegexURLResolver, RegexURLPattern
 
 from sentry.plugins.base import plugins
 
 logger = logging.getLogger("sentry.plugins")
 
 
-def ensure_url(u):
-    if isinstance(u, (tuple, list)):
-        return url(*u)
-    elif not isinstance(u, (RegexURLResolver, RegexURLPattern)):
-        raise TypeError(
-            "url must be RegexURLResolver or RegexURLPattern, not %r: %r" % (type(u).__name__, u)
-        )
-    return u
-
-
 def load_plugin_urls(plugins):
     urlpatterns = []
     for plugin in plugins:
+        urls = plugin.get_project_urls()
+        if not urls:
+            continue
         try:
-            urls = plugin.get_project_urls()
-            if not urls:
-                continue
-            urls = [ensure_url(u) for u in urls]
+            # a plugin's get_project_urls should return an iterable of url()'s,
+            # which can either be RegexURLResolver or RegexURLPattern
+            for u in urls:
+                if not isinstance(u, (RegexURLResolver, RegexURLPattern)):
+                    raise TypeError(
+                        "url must be RegexURLResolver or RegexURLPattern, not %r: %r"
+                        % (type(u).__name__, u)
+                    )
         except Exception:
             logger.exception("routes.failed", extra={"plugin": type(plugin).__name__})
         else:
diff --git a/src/sentry_plugins/asana/plugin.py b/src/sentry_plugins/asana/plugin.py
index 9f8bd430b6..d8d2295235 100644
--- a/src/sentry_plugins/asana/plugin.py
+++ b/src/sentry_plugins/asana/plugin.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import six
 
+from django.conf.urls import url
 from rest_framework.response import Response
 
 from sentry.exceptions import PluginError, PluginIdentityRequired
@@ -25,7 +26,7 @@ class AsanaPlugin(CorePluginMixin, IssuePlugin2):
 
     def get_group_urls(self):
         return super(AsanaPlugin, self).get_group_urls() + [
-            (
+            url(
                 r"^autocomplete",
                 IssueGroupActionEndpoint.as_view(view_method_name="view_autocomplete", plugin=self),
             )
diff --git a/src/sentry_plugins/bitbucket/plugin.py b/src/sentry_plugins/bitbucket/plugin.py
index d2843d4394..b5438fb072 100644
--- a/src/sentry_plugins/bitbucket/plugin.py
+++ b/src/sentry_plugins/bitbucket/plugin.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from django.conf.urls import url
 from rest_framework.response import Response
 
 from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint
@@ -42,7 +43,7 @@ class BitbucketPlugin(BitbucketMixin, IssuePlugin2):
 
     def get_group_urls(self):
         return super(BitbucketPlugin, self).get_group_urls() + [
-            (
+            url(
                 r"^autocomplete",
                 IssueGroupActionEndpoint.as_view(view_method_name="view_autocomplete", plugin=self),
             )
diff --git a/src/sentry_plugins/clubhouse/plugin.py b/src/sentry_plugins/clubhouse/plugin.py
index 34f080cf3e..aa2fbe9023 100644
--- a/src/sentry_plugins/clubhouse/plugin.py
+++ b/src/sentry_plugins/clubhouse/plugin.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import six
 
+from django.conf.urls import url
 from rest_framework.response import Response
 
 from sentry.exceptions import PluginError
@@ -25,7 +26,7 @@ class ClubhousePlugin(CorePluginMixin, IssuePlugin2):
 
     def get_group_urls(self):
         return super(ClubhousePlugin, self).get_group_urls() + [
-            (
+            url(
                 r"^autocomplete",
                 IssueGroupActionEndpoint.as_view(view_method_name="view_autocomplete", plugin=self),
             )
diff --git a/src/sentry_plugins/github/plugin.py b/src/sentry_plugins/github/plugin.py
index 97c8367614..9704c7898c 100644
--- a/src/sentry_plugins/github/plugin.py
+++ b/src/sentry_plugins/github/plugin.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import logging
 import six
 
+from django.conf.urls import url
 from rest_framework.response import Response
 from uuid import uuid4
 
@@ -70,7 +71,7 @@ class GitHubPlugin(GitHubMixin, IssuePlugin2):
 
     def get_group_urls(self):
         return super(GitHubPlugin, self).get_group_urls() + [
-            (
+            url(
                 r"^autocomplete",
                 IssueGroupActionEndpoint.as_view(view_method_name="view_autocomplete", plugin=self),
             )
diff --git a/src/sentry_plugins/phabricator/plugin.py b/src/sentry_plugins/phabricator/plugin.py
index 0e9bcce733..be3094ee4c 100644
--- a/src/sentry_plugins/phabricator/plugin.py
+++ b/src/sentry_plugins/phabricator/plugin.py
@@ -1,6 +1,8 @@
 from __future__ import absolute_import
 
+from django.conf.urls import url
 from rest_framework.response import Response
+
 from sentry.exceptions import PluginError
 from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint
 from sentry.utils.http import absolute_uri
@@ -122,7 +124,7 @@ class PhabricatorPlugin(CorePluginMixin, IssuePlugin2):
 
     def get_group_urls(self):
         return super(PhabricatorPlugin, self).get_group_urls() + [
-            (
+            url(
                 r"^autocomplete",
                 IssueGroupActionEndpoint.as_view(view_method_name="view_autocomplete", plugin=self),
             )
diff --git a/src/sentry_plugins/pivotal/plugin.py b/src/sentry_plugins/pivotal/plugin.py
index 37ec249ba7..c4424f4b7b 100644
--- a/src/sentry_plugins/pivotal/plugin.py
+++ b/src/sentry_plugins/pivotal/plugin.py
@@ -3,8 +3,10 @@ from __future__ import absolute_import
 import requests
 import six
 
+from django.conf.urls import url
 from django.utils.encoding import force_text
 from rest_framework.response import Response
+
 from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint, PluginError
 from sentry.http import safe_urlopen, safe_urlread
 from sentry.utils import json
@@ -23,7 +25,7 @@ class PivotalPlugin(CorePluginMixin, IssuePlugin2):
 
     def get_group_urls(self):
         return super(PivotalPlugin, self).get_group_urls() + [
-            (
+            url(
                 r"^autocomplete",
                 IssueGroupActionEndpoint.as_view(view_method_name="view_autocomplete", plugin=self),
             )
diff --git a/tests/sentry/plugins/base/test.py b/tests/sentry/plugins/base/test.py
index 6e526be64a..7697d0d029 100644
--- a/tests/sentry/plugins/base/test.py
+++ b/tests/sentry/plugins/base/test.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import
 from django.conf.urls import url
 
 from sentry.plugins.base.v2 import Plugin2
-from sentry.plugins.base.project_api_urls import load_plugin_urls
 from sentry.plugins.base.response import JSONResponse
 from sentry.testutils import TestCase
 
@@ -18,10 +17,10 @@ def test_json_response_with_status_kwarg():
     assert resp.status_code == 400
 
 
-def test_load_plugin_urls():
+def test_load_plugin_project_urls():
     class BadPluginA(Plugin2):
         def get_project_urls(self):
-            assert False
+            return [("foo", "bar")]
 
     class BadPluginB(Plugin2):
         def get_project_urls(self):
@@ -33,17 +32,46 @@ def test_load_plugin_urls():
 
     class GoodPluginA(Plugin2):
         def get_project_urls(self):
-            return [url("", None)]
+            # XXX: Django 1.10 requires a view callable. I was too lazy to figure out
+            # how to mock one, so just using this random low-level thing.
+            # As far as I can see, none of our plugins use get_project_urls, so
+            # all this can probably even be removed, but I'm keeping it here for now
+            # for fear of breakage.
+            from django.views.generic.list import BaseListView
 
-    class GoodPluginB(Plugin2):
-        def get_project_urls(self):
-            return [("foo", "bar")]
+            return [url("", BaseListView.as_view())]
+
+    from sentry.plugins.base.project_api_urls import load_plugin_urls
+
+    patterns = load_plugin_urls((BadPluginA(), BadPluginB(), BadPluginC(), GoodPluginA()))
+
+    assert len(patterns) == 1
+
+
+def test_load_plugin_group_urls():
+    from sentry_plugins.clubhouse.plugin import ClubhousePlugin
+    from sentry_plugins.jira.plugin import JiraPlugin
+    from sentry_plugins.github.plugin import GitHubPlugin
+    from sentry_plugins.pivotal.plugin import PivotalPlugin
+    from sentry_plugins.bitbucket.plugin import BitbucketPlugin
+    from sentry_plugins.asana.plugin import AsanaPlugin
+    from sentry_plugins.phabricator.plugin import PhabricatorPlugin
+
+    from sentry.plugins.base.group_api_urls import load_plugin_urls
 
     patterns = load_plugin_urls(
-        (BadPluginA(), BadPluginB(), BadPluginC(), GoodPluginA(), GoodPluginB())
+        (
+            ClubhousePlugin(),
+            JiraPlugin(),
+            GitHubPlugin(),
+            PivotalPlugin(),
+            BitbucketPlugin(),
+            AsanaPlugin(),
+            PhabricatorPlugin(),
+        )
     )
 
-    assert len(patterns) == 2
+    assert len(patterns) == 7
 
 
 class Plugin2TestCase(TestCase):
