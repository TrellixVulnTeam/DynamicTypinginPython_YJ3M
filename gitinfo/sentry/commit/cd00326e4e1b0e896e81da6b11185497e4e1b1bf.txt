commit cd00326e4e1b0e896e81da6b11185497e4e1b1bf
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Mar 3 08:59:38 2020 -0800

    fix(workflow): Fix "Add an Action" for more than 2 options (#17332)
    
    We were previously using the wrong properties for the action selector; we were using `type` which is not unique. Instead generate a unique key using `type` and `integrationId`. The issue with using `integrationId` by itself is that it's possible it is `null` and potentially may not be unique as well.
    
    This also changes the "Add an Action" select to use the new react-select.

diff --git a/src/sentry/static/sentry/app/types/alerts.tsx b/src/sentry/static/sentry/app/types/alerts.tsx
index f5da9b7b9e..b195f0ef5b 100644
--- a/src/sentry/static/sentry/app/types/alerts.tsx
+++ b/src/sentry/static/sentry/app/types/alerts.tsx
@@ -63,31 +63,3 @@ export type IssueAlertRule = UnsavedIssueAlertRule & {
   dateCreated: string;
   id: string;
 };
-
-/**
- * This is an Action that is associated to a Trigger in a Metric Alert Rule
- */
-export type MetricAction = {
-  /**
-   * The integration type e.g. 'email'
-   */
-  type: string;
-
-  /**
-   * e.g.
-   * - `user` - user id,
-   * - `team` - team id
-   * - `specific` - free text
-   */
-  allowedTargetTypes: Array<'user' | 'team' | 'specific'>;
-
-  /**
-   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other
-   */
-  integrationName: string;
-
-  /**
-   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action
-   */
-  integrationId: number;
-};
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
index 50d67c8744..9fb68f7692 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
@@ -2,7 +2,6 @@ import {PlainRoute} from 'react-router/lib/Route';
 import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 
-import {MetricAction} from 'app/types/alerts';
 import {Organization, Project, Config} from 'app/types';
 import {
   addErrorMessage,
@@ -31,6 +30,7 @@ import {
   AlertRuleAggregations,
   AlertRuleThresholdType,
   IncidentRule,
+  MetricActionTemplate,
   Trigger,
 } from '../types';
 import {addOrUpdateRule} from '../actions';
@@ -57,7 +57,7 @@ type State = {
   triggerErrors: Map<number, {[fieldName: string]: string}>;
 
   // `null` means loading
-  availableActions: MetricAction[] | null;
+  availableActions: MetricActionTemplate[] | null;
 
   // Rule conditions form inputs
   // Needed for TriggersChart
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/actionsPanel/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/actionsPanel/index.tsx
index d7cbfb3594..de6df553b6 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/actionsPanel/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/actionsPanel/index.tsx
@@ -1,10 +1,16 @@
 import React from 'react';
+import * as Sentry from '@sentry/browser';
 import styled from '@emotion/styled';
 
-import {Action, ActionType, TargetType} from 'app/views/settings/incidentRules/types';
-import {MetricAction} from 'app/types/alerts';
+import {
+  Action,
+  ActionType,
+  MetricActionTemplate,
+  TargetType,
+} from 'app/views/settings/incidentRules/types';
 import {Organization, Project, SelectValue} from 'app/types';
 import {PanelItem} from 'app/components/panels';
+import {addErrorMessage} from 'app/actionCreators/indicator';
 import {removeAtArrayIndex} from 'app/utils/removeAtArrayIndex';
 import {replaceAtArrayIndex} from 'app/utils/replaceAtArrayIndex';
 import {t} from 'app/locale';
@@ -29,7 +35,7 @@ const TargetLabel = {
 };
 
 type Props = {
-  availableActions: MetricAction[] | null;
+  availableActions: MetricActionTemplate[] | null;
   currentProject: string;
   organization: Organization;
   projects: Project[];
@@ -40,11 +46,37 @@ type Props = {
   actions: Action[];
   className?: string;
   triggerIndex: number;
-  onAdd: (type: Action['type']) => void;
+  onAdd: (action: Action) => void;
   onChange: (actions: Action[]) => void;
 };
 
+/**
+ * Lists saved actions as well as control to add a new action
+ */
 class ActionsPanel extends React.PureComponent<Props> {
+  /**
+   * Actions have a type (e.g. email, slack, etc), but only some have
+   * an integrationId (e.g. email is null). This helper creates a unique
+   * id based on the type and integrationId so that we know what action
+   * a user's saved action corresponds to.
+   */
+  getActionUniqueKey({type, integrationId}: Pick<Action, 'type' | 'integrationId'>) {
+    return `${type}-${integrationId}`;
+  }
+
+  /**
+   * Creates a human-friendly display name for the integration based on type and
+   * server provided `integrationName`
+   *
+   * e.g. for slack we show that it is slack and the `integrationName` is the workspace name
+   */
+  getFullActionTitle({
+    type,
+    integrationName,
+  }: Pick<MetricActionTemplate, 'type' | 'integrationName'>) {
+    return `${ActionLabel[type]}${integrationName ? ` - ${integrationName}` : ''}`;
+  }
+
   doChangeTargetIdentifier(index: number, value: string) {
     const {actions, onChange} = this.props;
     const newAction = {
@@ -55,17 +87,37 @@ class ActionsPanel extends React.PureComponent<Props> {
     onChange(replaceAtArrayIndex(actions, index, newAction));
   }
 
-  getFullActionTitle({
-    type,
-    integrationName,
-  }: Pick<MetricAction, 'type'> & {
-    integrationName?: MetricAction['integrationName'] | null;
-  }) {
-    return `${ActionLabel[type]}${integrationName ? ` - ${integrationName}` : ''}`;
-  }
+  handleAddAction = (value: {label: string; value: string}) => {
+    const {availableActions} = this.props;
+
+    const actionConfig =
+      availableActions &&
+      availableActions.find(
+        availableAction => this.getActionUniqueKey(availableAction) === value.value
+      );
 
-  handleAddAction = (value: {label: string; value: Action['type']}) => {
-    this.props.onAdd(value.value);
+    if (!actionConfig) {
+      addErrorMessage(t('There was a problem adding an action'));
+      Sentry.setExtras({
+        integrationId: value,
+      });
+      Sentry.captureException(new Error('Unable to add an action'));
+      return;
+    }
+
+    const action: Action = {
+      type: actionConfig.type,
+      targetType:
+        actionConfig &&
+        actionConfig.allowedTargetTypes &&
+        actionConfig.allowedTargetTypes.length > 0
+          ? actionConfig.allowedTargetTypes[0]
+          : null,
+      targetIdentifier: '',
+      integrationId: actionConfig.integrationId,
+    };
+
+    this.props.onAdd(action);
   };
   handleDeleteAction = (index: number) => {
     const {actions, onChange} = this.props;
@@ -108,9 +160,9 @@ class ActionsPanel extends React.PureComponent<Props> {
 
     const items =
       availableActions &&
-      availableActions.map(({type: value, integrationName}) => ({
-        value,
-        label: this.getFullActionTitle({type: value, integrationName}),
+      availableActions.map(availableAction => ({
+        value: this.getActionUniqueKey(availableAction),
+        label: this.getFullActionTitle(availableAction),
       }));
 
     return (
@@ -122,28 +174,25 @@ class ActionsPanel extends React.PureComponent<Props> {
             actions.map((action: Action, i: number) => {
               const isUser = action.targetType === TargetType.USER;
               const isTeam = action.targetType === TargetType.TEAM;
-              const availableAction =
-                availableActions &&
-                availableActions.find(({type}) => type === action.type);
+              const availableAction = availableActions?.find(
+                a => this.getActionUniqueKey(a) === this.getActionUniqueKey(action)
+              );
 
               return (
                 <PanelItemGrid key={i}>
                   {this.getFullActionTitle({
                     type: action.type,
-                    integrationName: availableAction && availableAction.integrationName,
+                    integrationName: availableAction?.integrationName ?? '',
                   })}
 
                   {availableAction && availableAction.allowedTargetTypes.length > 1 ? (
                     <SelectControl
                       disabled={disabled || loading}
                       value={action.targetType}
-                      options={
-                        availableAction &&
-                        availableAction.allowedTargetTypes.map(allowedType => ({
-                          value: allowedType,
-                          label: TargetLabel[allowedType],
-                        }))
-                      }
+                      options={availableAction?.allowedTargetTypes?.map(allowedType => ({
+                        value: allowedType,
+                        label: TargetLabel[allowedType],
+                      }))}
                       onChange={this.handleChangeTarget.bind(this, i)}
                     />
                   ) : (
@@ -179,13 +228,13 @@ class ActionsPanel extends React.PureComponent<Props> {
             })}
           <PanelItem>
             <StyledSelectControl
-              deprecatedSelectControl
               name="add-action"
               aria-label={t('Add an Action')}
-              disabled={disabled || loading}
+              isDisabled={disabled || loading}
               placeholder={t('Add an Action')}
               onChange={this.handleAddAction}
-              options={items}
+              value={null}
+              options={items ?? []}
             />
           </PanelItem>
         </React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
index aadaf1695d..3d4d5e6e6e 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
@@ -2,7 +2,6 @@ import React from 'react';
 
 import {Client} from 'app/api';
 import {Config, Organization, Project} from 'app/types';
-import {MetricAction} from 'app/types/alerts';
 import {fetchOrgMembers} from 'app/actionCreators/members';
 import {t, tct} from 'app/locale';
 import ActionsPanel from 'app/views/settings/incidentRules/triggers/actionsPanel';
@@ -11,7 +10,13 @@ import ThresholdControl from 'app/views/settings/incidentRules/triggers/threshol
 import withApi from 'app/utils/withApi';
 import withConfig from 'app/utils/withConfig';
 
-import {AlertRuleThreshold, Trigger, Action, ThresholdControlValue} from '../types';
+import {
+  AlertRuleThreshold,
+  Trigger,
+  Action,
+  MetricActionTemplate,
+  ThresholdControlValue,
+} from '../types';
 import hasThresholdValue from '../utils/hasThresholdValue';
 
 type AlertRuleThresholdKey = {
@@ -118,7 +123,7 @@ type TriggerFormContainerProps = Omit<
   'onChange'
 > & {
   api: Client;
-  availableActions: MetricAction[] | null;
+  availableActions: MetricActionTemplate[] | null;
   organization: Organization;
   currentProject: string;
   projects: Project[];
@@ -138,27 +143,10 @@ class TriggerFormContainer extends React.Component<TriggerFormContainerProps> {
     onChange(triggerIndex, trigger, changeObj);
   };
 
-  handleAddAction = (value: Action['type']) => {
-    const {onChange, trigger, triggerIndex, availableActions} = this.props;
-    const actionConfig =
-      availableActions && availableActions.find(({type}) => type === value);
-    const actions = [
-      ...trigger.actions,
-      {
-        type: value,
-        targetType:
-          actionConfig &&
-          actionConfig.allowedTargetTypes &&
-          actionConfig.allowedTargetTypes.length > 0
-            ? actionConfig.allowedTargetTypes[0]
-            : null,
-        targetIdentifier: '',
-        ...(actionConfig && actionConfig.integrationId !== null
-          ? {integration: actionConfig.integrationId}
-          : {}),
-      } as Action,
-    ];
-    onChange(triggerIndex, {...trigger, actions}, {actions});
+  handleAddAction = (action: Action) => {
+    const {onChange, trigger, triggerIndex} = this.props;
+    const actions = [...trigger.actions, action];
+    onChange(triggerIndex, {...trigger, actions} as Trigger, {actions});
   };
 
   handleChangeActions = (actions: Action[]): void => {
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx
index 6ac74509cb..a09a21f0c4 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx
@@ -1,7 +1,6 @@
 import React from 'react';
 import styled from '@emotion/styled';
 
-import {MetricAction} from 'app/types/alerts';
 import {Organization, Project} from 'app/types';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {removeAtArrayIndex} from 'app/utils/removeAtArrayIndex';
@@ -14,7 +13,7 @@ import space from 'app/styles/space';
 import withProjects from 'app/utils/withProjects';
 import {IconAdd} from 'app/icons/iconAdd';
 
-import {Trigger} from '../types';
+import {MetricActionTemplate, Trigger} from '../types';
 
 type DeleteButtonProps = {
   triggerIndex: number;
@@ -44,7 +43,7 @@ type Props = {
   incidentRuleId?: string;
   triggers: Trigger[];
   currentProject: string;
-  availableActions: MetricAction[] | null;
+  availableActions: MetricActionTemplate[] | null;
   disabled: boolean;
 
   errors: Map<number, {[fieldName: string]: string}>;
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
index f10da43ae5..7a4e6cb67c 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
@@ -32,9 +32,10 @@ export type ThresholdControlValue = {
   threshold: number | '' | null;
 };
 
-export type SavedTrigger = UnsavedTrigger & {
+export type SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {
   id: string;
   dateCreated: string;
+  actions: Action[];
 };
 
 export type Trigger = Partial<SavedTrigger> & UnsavedTrigger;
@@ -94,15 +95,72 @@ export enum TargetType {
   TEAM = 'team',
 }
 
-export type Action = {
-  id?: string;
+/**
+ * This is an available action template that is associated to a Trigger in a Metric Alert Rule
+ */
+export type MetricActionTemplate = {
+  /**
+   * The integration type e.g. 'email'
+   */
+  type: ActionType;
+
+  /**
+   * See `TargetType`
+   */
+  allowedTargetTypes: TargetType[];
+
+  /**
+   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other
+   */
+  integrationName: string;
+
+  /**
+   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action
+   */
+  integrationId: number;
+};
+
+/**
+ * This is the user's configured action
+ */
+export type Action = UnsavedAction & Partial<SavedActionFields>;
+export type SavedAction = UnsavedAction & SavedActionFields;
+
+type SavedActionFields = {
+  /**
+   * The id of the alert rule this action belongs to
+   */
+  alertRuleTriggerId: string;
+
+  /**
+   * A human readable description of the action generated by server
+   */
+  desc: string;
+
+  /**
+   * model id of the action
+   */
+  id: string;
+
+  /**
+   * date created
+   */
+  dateCreated: string;
+};
+
+export type UnsavedAction = {
   type: ActionType;
 
   targetType: TargetType | null;
 
-  // How to identify the target. Can be email, slack channel, pagerduty service, user_id, team_id, etc
+  /**
+   * How to identify the target. Can be email, slack channel, pagerduty service,
+   * user_id, team_id, etc
+   */
   targetIdentifier: string | null;
 
-  // Human readable string describing what the action does.
-  desc: string | null;
+  /**
+   * The id of the integration, can be null (e.g. email) or undefined (server errors when posting w/ null value)
+   */
+  integrationId?: number | null;
 };
diff --git a/tests/js/spec/views/settings/incidentRules/details.spec.jsx b/tests/js/spec/views/settings/incidentRules/details.spec.jsx
index 4cc3da4b68..d5dbebed10 100644
--- a/tests/js/spec/views/settings/incidentRules/details.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/details.spec.jsx
@@ -2,7 +2,7 @@ import React from 'react';
 
 import {initializeOrg} from 'sentry-test/initializeOrg';
 import {mountWithTheme} from 'sentry-test/enzyme';
-import {selectByValue} from 'sentry-test/select';
+import {selectByValue} from 'sentry-test/select-new';
 import GlobalModal from 'app/components/globalModal';
 import IncidentRulesDetails from 'app/views/settings/incidentRules/details';
 
@@ -103,7 +103,7 @@ describe('Incident Rules Details', function() {
       .simulate('change', {target: {value: 12}});
 
     // Add an action
-    selectByValue(wrapper, 'email', {
+    selectByValue(wrapper, 'email-null', {
       control: true,
       name: 'add-action',
     });
@@ -127,6 +127,7 @@ describe('Incident Rules Details', function() {
             expect.objectContaining({
               actions: [
                 {
+                  integrationId: null,
                   targetIdentifier: '',
                   targetType: 'user',
                   type: 'email',
@@ -195,6 +196,7 @@ describe('Incident Rules Details', function() {
             expect.objectContaining({
               actions: [
                 {
+                  integrationId: null,
                   targetIdentifier: '',
                   targetType: 'user',
                   type: 'email',
