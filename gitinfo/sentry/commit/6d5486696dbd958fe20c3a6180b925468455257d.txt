commit 6d5486696dbd958fe20c3a6180b925468455257d
Author: Filippo Pacifici <filippo.pacifici@gmail.com>
Date:   Tue Jan 7 09:19:09 2020 -0800

    perf: Do not retry Snuba Query on ReadTimeout (#16261)
    
    Since there is no way to separate read timeout from read errors by config, this PR subclasses the Retry class from urllib3 to change the policy and adds a test to ensure this change remains relevant in case urllib3 changes.

diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index 633fe12f9d..09fa97477a 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -197,9 +197,35 @@ def options_override(overrides):
             OVERRIDE_OPTIONS.pop(k)
 
 
+class RetrySkipTimeout(urllib3.Retry):
+    """
+    urllib3 Retry class does not allow us to retry on read errors but to exclude
+    read timeout. Retrying after a timeout adds useless load to Snuba.
+    """
+
+    def increment(
+        self, method=None, url=None, response=None, error=None, _pool=None, _stacktrace=None
+    ):
+        """
+        Just rely on the parent class unless we have a read timeout. In that case
+        immediately give up
+        """
+        if error and isinstance(error, urllib3.exceptions.ReadTimeoutError):
+            raise six.reraise(type(error), error, _stacktrace)
+
+        return super(RetrySkipTimeout, self).increment(
+            method=method,
+            url=url,
+            response=response,
+            error=error,
+            _pool=_pool,
+            _stacktrace=_stacktrace,
+        )
+
+
 _snuba_pool = connection_from_url(
     settings.SENTRY_SNUBA,
-    retries=urllib3.Retry(
+    retries=RetrySkipTimeout(
         total=5,
         # Expand our retries to POST since all of
         # our requests are POST and they don't mutate, so they
diff --git a/tests/sentry/utils/test_urllib3_timeout.py b/tests/sentry/utils/test_urllib3_timeout.py
new file mode 100644
index 0000000000..b7468c24ec
--- /dev/null
+++ b/tests/sentry/utils/test_urllib3_timeout.py
@@ -0,0 +1,41 @@
+from __future__ import absolute_import
+
+import mock
+import pytest
+
+from urllib3 import HTTPConnectionPool
+from urllib3.exceptions import HTTPError, ReadTimeoutError
+
+from sentry.utils.snuba import RetrySkipTimeout
+
+
+class FakeConnectionPool(HTTPConnectionPool):
+    def __init__(self, connection, **kwargs):
+        self.connection = connection
+        super(FakeConnectionPool, self).__init__(**kwargs)
+
+    def _new_conn(self):
+        return self.connection
+
+
+def test_retries():
+    """
+    Tests that, even if I set up 5 retries, there is only one request
+    made since it times out.
+    """
+    connection_mock = mock.Mock()
+    connection_mock.request.side_effect = ReadTimeoutError(None, "test.com", "Timeout")
+
+    snuba_pool = FakeConnectionPool(
+        connection=connection_mock,
+        host="www.test.com",
+        port=80,
+        retries=RetrySkipTimeout(total=5, method_whitelist={"GET", "POST"}),
+        timeout=30,
+        maxsize=10,
+    )
+
+    with pytest.raises(HTTPError):
+        snuba_pool.urlopen("POST", "/query", body="{}")
+
+    assert connection_mock.request.call_count == 1
