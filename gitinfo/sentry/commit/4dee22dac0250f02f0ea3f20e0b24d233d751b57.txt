commit 4dee22dac0250f02f0ea3f20e0b24d233d751b57
Author: ted kaemming <ted@kaemming.com>
Date:   Mon Oct 16 11:24:44 2017 -0700

    ref(similarity): Clean up test layout (#6330)

diff --git a/src/sentry/similarity/__init__.py b/src/sentry/similarity/__init__.py
index dfad9fd50f..3c8a453bbd 100644
--- a/src/sentry/similarity/__init__.py
+++ b/src/sentry/similarity/__init__.py
@@ -8,7 +8,7 @@ from django.conf import settings
 from sentry.interfaces.stacktrace import Frame
 from sentry.similarity.backends.dummy import DummyIndexBackend
 from sentry.similarity.backends.metrics import MetricsWrapper
-from sentry.similarity.backends.redis import RedisMinHashIndexBackend
+from sentry.similarity.backends.redis import RedisScriptMinHashIndexBackend
 from sentry.similarity.encoder import Encoder
 from sentry.similarity.features import (
     ExceptionFeature,
@@ -78,7 +78,7 @@ def _make_index_backend(cluster=None):
             return index
 
     return MetricsWrapper(
-        RedisMinHashIndexBackend(
+        RedisScriptMinHashIndexBackend(
             cluster,
             'sim:1',
             MinHashSignatureBuilder(16, 0xFFFF),
diff --git a/src/sentry/similarity/backends/redis.py b/src/sentry/similarity/backends/redis.py
index 46f5eb081a..c7cbbc1a6d 100644
--- a/src/sentry/similarity/backends/redis.py
+++ b/src/sentry/similarity/backends/redis.py
@@ -20,7 +20,7 @@ def flatten(value):
     return list(itertools.chain.from_iterable(value))
 
 
-class RedisMinHashIndexBackend(AbstractIndexBackend):
+class RedisScriptMinHashIndexBackend(AbstractIndexBackend):
     def __init__(self, cluster, namespace, signature_builder,
                  bands, interval, retention, candidate_set_limit):
         self.cluster = cluster
diff --git a/tests/sentry/similarity/backends/__init__.py b/tests/sentry/similarity/backends/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/similarity/backends/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/similarity/test_index.py b/tests/sentry/similarity/backends/base.py
similarity index 82%
rename from tests/sentry/similarity/test_index.py
rename to tests/sentry/similarity/backends/base.py
index be141d77a4..64a2118617 100644
--- a/tests/sentry/similarity/test_index.py
+++ b/tests/sentry/similarity/backends/base.py
@@ -1,30 +1,14 @@
 from __future__ import absolute_import
 
-import time
+import abc
 
-import msgpack
-from exam import fixture
 
-from sentry.similarity.backends.redis import RedisMinHashIndexBackend
-from sentry.similarity.signatures import MinHashSignatureBuilder
-from sentry.testutils import TestCase
-from sentry.utils import redis
+class MinHashIndexBackendTestMixin(object):
+    __meta__ = abc.ABCMeta
 
-signature_builder = MinHashSignatureBuilder(32, 0xFFFF)
-
-
-class RedisMinHashIndexBackendTestCase(TestCase):
-    @fixture
+    @abc.abstractproperty
     def index(self):
-        return RedisMinHashIndexBackend(
-            redis.clusters.get('default').get_local_client(0),
-            'sim',
-            signature_builder,
-            16,
-            60 * 60,
-            12,
-            10,
-        )
+        pass
 
     def test_basic(self):
         self.index.record('example', '1', [('index', 'hello world')])
@@ -96,16 +80,6 @@ class RedisMinHashIndexBackendTestCase(TestCase):
                 for key, _ in self.index.compare('example', '1', [('index',
                                                                    0)])] == ['1', '2', '4', '5']
 
-        assert RedisMinHashIndexBackend(
-            self.index.cluster,
-            self.index.namespace + '2',
-            self.index.signature_builder,
-            self.index.bands,
-            self.index.interval,
-            self.index.retention,
-            self.index.candidate_set_limit,
-        ).compare('example', '1', [('index', 0)]) == []
-
     def test_multiple_index(self):
         self.index.record('example', '1', [
             ('index:a', 'hello world'),
@@ -242,27 +216,6 @@ class RedisMinHashIndexBackendTestCase(TestCase):
             ('2', [0.5]),
         ]
 
-    def test_export_import(self):
-        self.index.record('example', '1', [('index', 'hello world')])
-
-        timestamp = int(time.time())
-        result = self.index.export('example', [('index', 1)], timestamp=timestamp)
-        assert len(result) == 1
-
-        # Copy the data from key 1 to key 2.
-        self.index.import_('example', [('index', 2, result[0])], timestamp=timestamp)
-
-        r1 = msgpack.unpackb(self.index.export('example', [('index', 1)], timestamp=timestamp)[0])
-        r2 = msgpack.unpackb(self.index.export('example', [('index', 2)], timestamp=timestamp)[0])
-        assert r1[0] == r2[0]
-        self.assertAlmostEqual(r1[1], r2[1], delta=10)  # cannot ensure exact TTL match
-
-        # Copy the data again to key 2 (duplicating all of the data.)
-        self.index.import_('example', [('index', 2, result[0])], timestamp=timestamp)
-
-        result = self.index.export('example', [('index', 2)], timestamp=timestamp)
-        assert len(result) == 1
-
     def test_flush_scoped(self):
         self.index.record('example', '1', [('index', ['foo', 'bar'])])
         assert self.index.classify('example', [('index', 0, ['foo', 'bar'])]) == [
@@ -280,3 +233,7 @@ class RedisMinHashIndexBackendTestCase(TestCase):
 
         self.index.flush('*', ['index'])
         assert self.index.classify('example', [('index', 0, ['foo', 'bar'])]) == []
+
+    @abc.abstractmethod
+    def test_export_import(self):
+        pass
diff --git a/tests/sentry/similarity/backends/test_redis.py b/tests/sentry/similarity/backends/test_redis.py
new file mode 100644
index 0000000000..c91e3768fa
--- /dev/null
+++ b/tests/sentry/similarity/backends/test_redis.py
@@ -0,0 +1,51 @@
+from __future__ import absolute_import
+
+import time
+
+import msgpack
+from exam import fixture
+
+from sentry.similarity.backends.redis import RedisScriptMinHashIndexBackend
+from sentry.similarity.signatures import MinHashSignatureBuilder
+from sentry.testutils import TestCase
+from sentry.utils import redis
+
+from .base import MinHashIndexBackendTestMixin
+
+
+signature_builder = MinHashSignatureBuilder(32, 0xFFFF)
+
+
+class RedisScriptMinHashIndexBackendTestCase(MinHashIndexBackendTestMixin, TestCase):
+    @fixture
+    def index(self):
+        return RedisScriptMinHashIndexBackend(
+            redis.clusters.get('default').get_local_client(0),
+            'sim',
+            signature_builder,
+            16,
+            60 * 60,
+            12,
+            10,
+        )
+
+    def test_export_import(self):
+        self.index.record('example', '1', [('index', 'hello world')])
+
+        timestamp = int(time.time())
+        result = self.index.export('example', [('index', 1)], timestamp=timestamp)
+        assert len(result) == 1
+
+        # Copy the data from key 1 to key 2.
+        self.index.import_('example', [('index', 2, result[0])], timestamp=timestamp)
+
+        r1 = msgpack.unpackb(self.index.export('example', [('index', 1)], timestamp=timestamp)[0])
+        r2 = msgpack.unpackb(self.index.export('example', [('index', 2)], timestamp=timestamp)[0])
+        assert r1[0] == r2[0]
+        self.assertAlmostEqual(r1[1], r2[1], delta=10)  # cannot ensure exact TTL match
+
+        # Copy the data again to key 2 (duplicating all of the data.)
+        self.index.import_('example', [('index', 2, result[0])], timestamp=timestamp)
+
+        result = self.index.export('example', [('index', 2)], timestamp=timestamp)
+        assert len(result) == 1
