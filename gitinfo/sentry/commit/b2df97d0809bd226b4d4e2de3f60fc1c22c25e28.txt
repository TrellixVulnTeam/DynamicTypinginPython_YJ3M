commit b2df97d0809bd226b4d4e2de3f60fc1c22c25e28
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Oct 26 13:15:25 2017 -0700

    fix(sso): Remove is_managed user flag when removing SSO
    
    When the is_managed flag is set, users will be unable to change their
    password using the account recovery flow, *even after* SSO has been
    disabled.

diff --git a/src/sentry/web/frontend/organization_auth_settings.py b/src/sentry/web/frontend/organization_auth_settings.py
index 0df5b3e8fd..5f153d2580 100644
--- a/src/sentry/web/frontend/organization_auth_settings.py
+++ b/src/sentry/web/frontend/organization_auth_settings.py
@@ -12,7 +12,7 @@ from sentry import features, roles
 from sentry.auth import manager
 from sentry.auth.helper import AuthHelper
 from sentry.auth.providers.saml2 import SAML2Provider, HAS_SAML2
-from sentry.models import AuditLogEntryEvent, AuthProvider, OrganizationMember
+from sentry.models import AuditLogEntryEvent, AuthProvider, OrganizationMember, User
 from sentry.plugins import Response
 from sentry.tasks.auth import email_missing_links
 from sentry.utils import db
@@ -73,6 +73,9 @@ class OrganizationAuthSettingsView(OrganizationView):
                 ),
             )
 
+        user_ids = OrganizationMember.objects.filter(organization=organization).values('user')
+        User.objects.filter(id__in=user_ids).update(is_managed=False)
+
         auth_provider.delete()
 
     def handle_existing_provider(self, request, organization, auth_provider):
diff --git a/tests/sentry/web/frontend/test_organization_auth_settings.py b/tests/sentry/web/frontend/test_organization_auth_settings.py
index aa090bf053..c346a55e88 100644
--- a/tests/sentry/web/frontend/test_organization_auth_settings.py
+++ b/tests/sentry/web/frontend/test_organization_auth_settings.py
@@ -100,6 +100,7 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
         assert not getattr(member.flags, 'sso:invalid')
 
     def test_disable_provider(self):
+        self.user.update(is_managed=True)
         organization = self.create_organization(name='foo', owner=self.user)
 
         auth_provider = AuthProvider.objects.create(
@@ -135,3 +136,4 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
         om = OrganizationMember.objects.get(id=om.id)
 
         assert not getattr(om.flags, 'sso:linked')
+        assert not om.user.is_managed
