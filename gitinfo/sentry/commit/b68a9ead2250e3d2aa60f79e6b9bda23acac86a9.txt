commit b68a9ead2250e3d2aa60f79e6b9bda23acac86a9
Author: Mark Story <mark@mark-story.com>
Date:   Wed Mar 20 09:34:59 2019 -0700

    ref(api) Optimize organization details to not load data twice (#12431)
    
    Don't load the projects & teams that have already been loaded into the
    access object. This avoids transferring data out of the database that we
    already have.
    
    I've not changed the shape/number of projects & teams returned in
    organization details as there are still several front-end features
    relying on it, but this should help improve performance when a user is
    assigned to a large percentage of an organization's projects.
    
    Fixes SEN-390

diff --git a/src/sentry/api/endpoints/accept_project_transfer.py b/src/sentry/api/endpoints/accept_project_transfer.py
index cde1ce6746..1320236b22 100644
--- a/src/sentry/api/endpoints/accept_project_transfer.py
+++ b/src/sentry/api/endpoints/accept_project_transfer.py
@@ -67,7 +67,12 @@ class AcceptProjectTransferEndpoint(Endpoint):
         )
 
         return Response({
-            'organizations': serialize(list(organizations), request.user, DetailedOrganizationSerializer()),
+            'organizations': serialize(
+                list(organizations),
+                request.user,
+                DetailedOrganizationSerializer(),
+                access=request.access
+            ),
             'project': {
                 'slug': project.slug,
                 'id': project.id,
diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index 08d1f65224..3bb39a182b 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -313,6 +313,7 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
             organization,
             request.user,
             org_serializers.DetailedOrganizationSerializer(),
+            access=request.access,
         )
         return self.respond(context)
 
@@ -380,6 +381,7 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
                     organization,
                     request.user,
                     org_serializers.DetailedOrganizationSerializer(),
+                    access=request.access,
                 )
             )
         return self.respond(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
@@ -450,5 +452,6 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
             organization,
             request.user,
             org_serializers.DetailedOrganizationSerializer(),
+            access=request.access,
         )
         return self.respond(context, status=202)
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 895afe29c3..d2b3037326 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -5,7 +5,6 @@ import six
 from sentry import roles
 from sentry.app import quotas
 from sentry.api.serializers import Serializer, register, serialize
-from sentry.auth import access
 from sentry.constants import LEGACY_RATE_LIMIT_OPTIONS
 from sentry.models import (
     ApiKey, Organization, OrganizationAccessRequest, OrganizationAvatar, OrganizationOnboardingTask,
@@ -116,24 +115,30 @@ class OnboardingTasksSerializer(Serializer):
 
 
 class DetailedOrganizationSerializer(OrganizationSerializer):
-    def serialize(self, obj, attrs, user):
+    def get_attrs(self, item_list, user, **kwargs):
+        return super(DetailedOrganizationSerializer, self).get_attrs(item_list, user)
+
+    def serialize(self, obj, attrs, user, access):
         from sentry import experiments
-        from sentry.app import env
         from sentry.api.serializers.models.project import ProjectSummarySerializer
         from sentry.api.serializers.models.team import TeamSerializer
 
-        team_list = sorted(Team.objects.filter(
+        member_teams = [team.id for team in access.teams]
+        other_teams = list(Team.objects.filter(
             organization=obj,
             status=TeamStatus.VISIBLE,
-        ), key=lambda x: x.slug)
+        ).exclude(id__in=member_teams))
+        team_list = sorted(other_teams + list(access.teams), key=lambda x: x.slug)
 
         for team in team_list:
             team._organization_cache = obj
 
-        project_list = sorted(Project.objects.filter(
+        member_projects = [project.id for project in access.projects]
+        other_projects = list(Project.objects.filter(
             organization=obj,
             status=ProjectStatus.VISIBLE,
-        ), key=lambda x: x.slug)
+        ).exclude(id__in=member_projects))
+        project_list = sorted(other_projects + list(access.projects), key=lambda x: x.slug)
 
         for project in project_list:
             project._organization_cache = obj
@@ -190,10 +195,7 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
         })
         context['teams'] = serialize(team_list, user, TeamSerializer())
         context['projects'] = serialize(project_list, user, ProjectSummarySerializer())
-        if env.request:
-            context['access'] = access.from_request(env.request, obj).scopes
-        else:
-            context['access'] = access.from_user(user, obj).scopes
+        context['access'] = access.scopes
         context['pendingAccessRequests'] = OrganizationAccessRequest.objects.filter(
             team__organization=obj,
         ).count()
diff --git a/src/sentry/templatetags/sentry_api.py b/src/sentry/templatetags/sentry_api.py
index 4366b6c977..16d43d8a71 100644
--- a/src/sentry/templatetags/sentry_api.py
+++ b/src/sentry/templatetags/sentry_api.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 from django import template
 from django.http import HttpRequest
 
+from sentry.auth.access import from_user, NoAccess
 from sentry.api.serializers.base import serialize as serialize_func
 from sentry.api.serializers.models.organization import (DetailedOrganizationSerializer)
 from sentry.utils import json
@@ -29,13 +30,16 @@ def convert_to_json(obj):
 def serialize_detailed_org(context, obj):
     if 'request' in context:
         user = context['request'].user
+        access = from_user(user, obj)
     else:
         user = None
+        access = NoAccess()
 
     context = serialize_func(
         obj,
         user,
         DetailedOrganizationSerializer(),
+        access=access
     )
 
     return convert_to_json(context)
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index d597fe8964..1d5383ee90 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -27,13 +27,10 @@ from sentry.testutils import APITestCase, TwoFactorAPITestCase
 
 class OrganizationDetailsTest(APITestCase):
     def test_simple(self):
-        org = self.create_organization(owner=self.user)
-        self.create_team(
-            name='appy',
-            organization=org,
-            members=[self.user])
+        user = self.create_user('owner@example.org')
+        org = self.create_organization(owner=user)
 
-        self.login_as(user=self.user)
+        self.login_as(user=user)
         url = reverse(
             'sentry-api-0-organization-details', kwargs={
                 'organization_slug': org.slug,
@@ -43,9 +40,23 @@ class OrganizationDetailsTest(APITestCase):
         assert response.data['onboardingTasks'] == []
         assert response.status_code == 200, response.content
         assert response.data['id'] == six.text_type(org.id)
-        assert len(response.data['teams']) == 1
+        assert len(response.data['teams']) == 0
+        assert len(response.data['projects']) == 0
 
-        for i in range(5):
+    def test_with_projects(self):
+        user = self.create_user('owner@example.org')
+        org = self.create_organization(owner=user)
+        team = self.create_team(
+            name='appy',
+            organization=org,
+            members=[user])
+        # Create non-member team to test response shape
+        self.create_team(name='no-member', organization=org)
+
+        # Some projects with membership and some without.
+        for i in range(3):
+            self.create_project(organization=org, teams=[team])
+        for i in range(2):
             self.create_project(organization=org)
 
         url = reverse(
@@ -53,6 +64,8 @@ class OrganizationDetailsTest(APITestCase):
                 'organization_slug': org.slug,
             }
         )
+        self.login_as(user=user)
+
         # TODO(dcramer): we need to pare this down -- lots of duplicate queries
         # for membership data
         with self.assertNumQueries(35, using='default'):
@@ -60,6 +73,25 @@ class OrganizationDetailsTest(APITestCase):
             response = self.client.get(url, format='json')
             pprint(connections['default'].queries)
         assert len(response.data['projects']) == 5
+        assert len(response.data['teams']) == 2
+
+    def test_as_superuser(self):
+        self.user = self.create_user('super@example.org', is_superuser=True)
+        org = self.create_organization(owner=self.user)
+        team = self.create_team(name='appy', organization=org)
+
+        self.login_as(user=self.user)
+        for i in range(5):
+            self.create_project(organization=org, teams=[team])
+
+        url = reverse(
+            'sentry-api-0-organization-details', kwargs={
+                'organization_slug': org.slug,
+            }
+        )
+        response = self.client.get(url, format='json')
+        assert len(response.data['projects']) == 5
+        assert len(response.data['teams']) == 1
 
     def test_onboarding_tasks(self):
         org = self.create_organization(owner=self.user)
