commit 9f073f301a9dbfe2f2ae520da2a10458d19ecffa
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Aug 27 16:03:38 2019 -0700

    ref(ts): Refactor Incident Details Activity list to typescript (#14513)
    
    typescript all the things

diff --git a/src/sentry/static/sentry/app/views/incidents/details/activity/activity.jsx b/src/sentry/static/sentry/app/views/incidents/details/activity/activity.tsx
similarity index 86%
rename from src/sentry/static/sentry/app/views/incidents/details/activity/activity.jsx
rename to src/sentry/static/sentry/app/views/incidents/details/activity/activity.tsx
index 5fc7e59dae..fc803e69f9 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/activity/activity.jsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/activity/activity.tsx
@@ -1,50 +1,51 @@
 import {groupBy} from 'lodash';
-import PropTypes from 'prop-types';
 import React from 'react';
 import moment from 'moment';
 import styled from 'react-emotion';
 
+import {Client} from 'app/api';
 import {IncidentActivityType} from 'app/views/incidents/utils';
+import {User} from 'app/types';
 import {t} from 'app/locale';
 import ActivityItem from 'app/components/activity/item';
 import ErrorBoundary from 'app/components/errorBoundary';
 import LoadingError from 'app/components/loadingError';
 import Note from 'app/components/activity/note';
 import NoteInputWithStorage from 'app/components/activity/note/inputWithStorage';
-import SentryTypes from 'app/sentryTypes';
 import TimeSince from 'app/components/timeSince';
 import space from 'app/styles/space';
 
 import ActivityPlaceholder from './activityPlaceholder';
 import DateDivider from './dateDivider';
 import StatusItem from './statusItem';
+import {Incident, ActivityType, NoteType} from '../../types';
+
+type Props = {
+  api: Client;
+  incidentId: string;
+  incident?: Incident;
+  loading: boolean;
+  error: boolean;
+  me: User;
+  activities: null | ActivityType[];
+  noteInputId: string;
+  noteInputProps?: object;
+
+  createError: boolean;
+  createBusy: boolean;
+  createErrorJSON: null | object;
+  onCreateNote: (note: NoteType) => void;
+  onUpdateNote: (note: NoteType, activity: ActivityType) => void;
+  onDeleteNote: (activity: ActivityType) => void;
+};
 
 /**
  * Activity component on Incident Details view
  * Allows user to leave a comment on an incidentId as well as
  * fetch and render existing activity items.
  */
-class Activity extends React.Component {
-  static propTypes = {
-    api: PropTypes.object.isRequired,
-    incidentId: PropTypes.string.isRequired,
-    incident: SentryTypes.Incident,
-    loading: PropTypes.bool,
-    error: PropTypes.bool,
-    me: SentryTypes.User,
-    activities: PropTypes.arrayOf(SentryTypes.IncidentActivity),
-    noteInputId: PropTypes.string,
-    noteInputProps: PropTypes.object,
-
-    createError: PropTypes.bool,
-    createBusy: PropTypes.bool,
-    createErrorJSON: PropTypes.object,
-    onCreateNote: PropTypes.func.isRequired,
-    onUpdateNote: PropTypes.func.isRequired,
-    onDeleteNote: PropTypes.func.isRequired,
-  };
-
-  handleUpdateNote = (note, {activity}) => {
+class Activity extends React.Component<Props> {
+  handleUpdateNote = (note: Note, {activity}) => {
     const {onUpdateNote} = this.props;
     onUpdateNote(note, activity);
   };
diff --git a/src/sentry/static/sentry/app/views/incidents/details/activity/activityPlaceholder.jsx b/src/sentry/static/sentry/app/views/incidents/details/activity/activityPlaceholder.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/incidents/details/activity/activityPlaceholder.jsx
rename to src/sentry/static/sentry/app/views/incidents/details/activity/activityPlaceholder.tsx
diff --git a/src/sentry/static/sentry/app/views/incidents/details/activity/dateDivider.jsx b/src/sentry/static/sentry/app/views/incidents/details/activity/dateDivider.tsx
similarity index 84%
rename from src/sentry/static/sentry/app/views/incidents/details/activity/dateDivider.jsx
rename to src/sentry/static/sentry/app/views/incidents/details/activity/dateDivider.tsx
index 6fafcab709..7b5fe86a35 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/activity/dateDivider.jsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/activity/dateDivider.tsx
@@ -3,13 +3,16 @@
  * Allows user to leave a comment on an incident as well as
  * fetch and render existing activity items.
  */
-import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
 import space from 'app/styles/space';
 
-const Title = styled('span')`
+type Props = {
+  backgroundColor?: string;
+};
+
+const Title = styled('span')<Props>`
   background-color: ${p => p.backgroundColor || p.theme.whiteDark};
   padding: 0 ${space(2)};
 `;
@@ -28,11 +31,7 @@ const TitleWrapper = styled('span')`
 `;
 
 const DateDivider = styled(
-  class DateDivider extends React.Component {
-    static propTypes = {
-      backgroundColor: PropTypes.string,
-    };
-
+  class DateDivider extends React.Component<Props> {
     render() {
       const {children, backgroundColor, ...props} = this.props;
       return (
diff --git a/src/sentry/static/sentry/app/views/incidents/details/activity/index.jsx b/src/sentry/static/sentry/app/views/incidents/details/activity/index.tsx
similarity index 67%
rename from src/sentry/static/sentry/app/views/incidents/details/activity/index.jsx
rename to src/sentry/static/sentry/app/views/incidents/details/activity/index.tsx
index 7f3af40c92..20106c5e30 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/activity/index.jsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/activity/index.tsx
@@ -1,7 +1,7 @@
-import PropTypes from 'prop-types';
+import {Params} from 'react-router/lib/Router';
 import React from 'react';
 
-import {IncidentActivityType} from 'app/views/incidents/utils';
+import {Client} from 'app/api';
 import {
   createIncidentNote,
   deleteIncidentNote,
@@ -14,29 +14,46 @@ import ConfigStore from 'app/stores/configStore';
 import withApi from 'app/utils/withApi';
 
 import Activity from './activity';
+import {IncidentActivityType, IncidentStatus} from '../../utils';
+import {ActivityType, ActivityTypeDraft, NoteType} from '../../types';
 
 function makeDefaultErrorJson() {
   return {detail: t('Unknown error. Please try again.')};
 }
 
+type Activities = Array<ActivityType | ActivityType>;
+
+type Props = {
+  api: Client;
+  incidentStatus: IncidentStatus | null;
+  params: Params;
+};
+
+type State = {
+  loading: boolean;
+  error: boolean;
+  noteInputId: string;
+  noteInputText: string;
+  createBusy: boolean;
+  createError: boolean;
+  createErrorJSON: null | object;
+  activities: null | Activities;
+};
+
 /**
  * Activity component on Incident Details view
  * Allows user to leave a comment on an incidentId as well as
  * fetch and render existing activity items.
  */
-class ActivityContainer extends React.PureComponent {
-  static propTypes = {
-    api: PropTypes.object.isRequired,
-    incidentStatus: PropTypes.number,
-  };
-
-  state = {
+class ActivityContainer extends React.PureComponent<Props, State> {
+  state: State = {
     loading: true,
     error: false,
     noteInputId: uniqueId(),
     noteInputText: '',
     createBusy: false,
     createError: false,
+    createErrorJSON: null,
     activities: null,
   };
 
@@ -44,7 +61,7 @@ class ActivityContainer extends React.PureComponent {
     this.fetchData();
   }
 
-  componentDidUpdate(prevProps) {
+  componentDidUpdate(prevProps: Props) {
     // Only refetch if incidentStatus changes.
     //
     // This component can mount before incident details is fully loaded.
@@ -70,14 +87,14 @@ class ActivityContainer extends React.PureComponent {
     }
   }
 
-  handleCreateNote = async note => {
+  handleCreateNote = async (note: NoteType) => {
     const {api, params} = this.props;
     const {incidentId, orgId} = params;
 
-    const newActivity = {
+    const newActivity: ActivityTypeDraft = {
       comment: note.text,
       type: IncidentActivityType.COMMENT,
-      dateCreated: new Date(),
+      dateCreated: new Date().toISOString(),
       user: ConfigStore.get('user'),
       id: uniqueId(),
       incidentIdentifier: incidentId,
@@ -88,7 +105,7 @@ class ActivityContainer extends React.PureComponent {
       // This is passed as a key to NoteInput that re-mounts
       // (basically so we can reset text input to empty string)
       noteInputId: uniqueId(),
-      activities: [newActivity, ...(state.activities || [])],
+      activities: [newActivity, ...(state.activities || [])] as Activities,
       noteInputText: '',
     }));
 
@@ -99,7 +116,9 @@ class ActivityContainer extends React.PureComponent {
         // Update activities to replace our fake new activity with activity object from server
         const activities = [
           newNote,
-          ...state.activities.filter(activity => activity !== newActivity),
+          ...(state.activities!.filter(
+            activity => activity !== newActivity
+          ) as ActivityType[]),
         ];
 
         return {
@@ -109,7 +128,7 @@ class ActivityContainer extends React.PureComponent {
       });
     } catch (error) {
       this.setState(state => {
-        const activities = state.activities.filter(activity => activity !== newActivity);
+        const activities = state.activities!.filter(activity => activity !== newActivity);
 
         return {
           // We clear the textarea immediately when submitting, restore
@@ -124,39 +143,45 @@ class ActivityContainer extends React.PureComponent {
     }
   };
 
-  getIndexAndActivityFromState = activity => {
+  getIndexAndActivityFromState = (activity: ActivityType | ActivityTypeDraft) => {
     // `index` should probably be found, if not let error hit Sentry
-    const index = this.state.activities.findIndex(({id}) => id === activity.id);
-    return [index, this.state.activities[index]];
+    const index =
+      this.state.activities !== null
+        ? this.state.activities.findIndex(({id}) => id === activity.id)
+        : '';
+    return [index, this.state.activities![index]];
   };
 
-  handleDeleteNote = async activity => {
+  handleDeleteNote = async (activity: ActivityType | ActivityTypeDraft) => {
     const {api, params} = this.props;
     const {incidentId, orgId} = params;
 
     const [index, oldActivity] = this.getIndexAndActivityFromState(activity);
 
     this.setState(state => ({
-      activities: removeFromArrayIndex(state.activities, index),
+      activities: removeFromArrayIndex(state.activities!, index),
     }));
 
     try {
       await deleteIncidentNote(api, orgId, incidentId, activity.id);
     } catch (error) {
       this.setState(state => ({
-        activities: replaceAtArrayIndex(state.activities, index, oldActivity),
+        activities: replaceAtArrayIndex(state.activities!, index, oldActivity),
       }));
     }
   };
 
-  handleUpdateNote = async (note, activity) => {
+  handleUpdateNote = async (
+    note: NoteType,
+    activity: ActivityType | ActivityTypeDraft
+  ) => {
     const {api, params} = this.props;
     const {incidentId, orgId} = params;
 
     const [index, oldActivity] = this.getIndexAndActivityFromState(activity);
 
     this.setState(state => ({
-      activities: replaceAtArrayIndex(state.activities, index, {
+      activities: replaceAtArrayIndex(state.activities!, index, {
         ...oldActivity,
         comment: note.text,
       }),
@@ -166,26 +191,22 @@ class ActivityContainer extends React.PureComponent {
       await updateIncidentNote(api, orgId, incidentId, activity.id, note);
     } catch (error) {
       this.setState(state => ({
-        activities: replaceAtArrayIndex(state.activities, index, oldActivity),
+        activities: replaceAtArrayIndex(state.activities!, index, oldActivity),
       }));
     }
   };
 
   render() {
     const {api, params, ...props} = this.props;
-    const {incidentId, orgId} = params;
+    const {incidentId} = params;
     const me = ConfigStore.get('user');
 
     return (
       <Activity
         noteInputId={this.state.noteInputId}
         incidentId={incidentId}
-        orgId={orgId}
         me={me}
         api={api}
-        noteProps={{
-          text: this.state.noteInputText,
-        }}
         {...this.state}
         onCreateNote={this.handleCreateNote}
         onUpdateNote={this.handleUpdateNote}
@@ -197,13 +218,13 @@ class ActivityContainer extends React.PureComponent {
 }
 export default withApi(ActivityContainer);
 
-function removeFromArrayIndex(array, index) {
+function removeFromArrayIndex<T>(array: T[], index: number): T[] {
   const newArray = [...array];
   newArray.splice(index, 1);
   return newArray;
 }
 
-function replaceAtArrayIndex(array, index, obj) {
+function replaceAtArrayIndex<T>(array: T[], index: number, obj: T): T[] {
   const newArray = [...array];
   newArray.splice(index, 1, obj);
   return newArray;
diff --git a/src/sentry/static/sentry/app/views/incidents/details/activity/statusItem.jsx b/src/sentry/static/sentry/app/views/incidents/details/activity/statusItem.tsx
similarity index 82%
rename from src/sentry/static/sentry/app/views/incidents/details/activity/statusItem.jsx
rename to src/sentry/static/sentry/app/views/incidents/details/activity/statusItem.tsx
index 5627927e9f..f25e6a9a9e 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/activity/statusItem.jsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/activity/statusItem.tsx
@@ -1,4 +1,3 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
@@ -6,8 +5,15 @@ import {IncidentActivityType, IncidentStatus} from 'app/views/incidents/utils';
 import {t} from 'app/locale';
 import ActivityItem from 'app/components/activity/item';
 import Chart from 'app/views/incidents/details/chart';
-import SentryTypes from 'app/sentryTypes';
 import getDynamicText from 'app/utils/getDynamicText';
+import {ActivityType, Incident} from '../../types';
+
+type Props = {
+  activity: ActivityType;
+  authorName: string;
+  incident?: Incident;
+  showTime: boolean;
+};
 
 /**
  * StatusItem renders status changes for Incidents
@@ -17,15 +23,9 @@ import getDynamicText from 'app/utils/getDynamicText';
  * Note `activity.dateCreated` refers to when the activity was created vs.
  * `incident.dateStarted` which is when an incident was first detected or created
  */
-class StatusItem extends React.Component {
-  static propTypes = {
-    activity: SentryTypes.IncidentActivity.isRequired,
-    incident: SentryTypes.Incident,
-    authorName: PropTypes.string,
-  };
-
+class StatusItem extends React.Component<Props> {
   render() {
-    const {activity, authorName, incident} = this.props;
+    const {activity, authorName, incident, showTime} = this.props;
 
     const isCreated = activity.type === IncidentActivityType.CREATED;
     const isDetected = activity.type === IncidentActivityType.DETECTED;
@@ -44,7 +44,7 @@ class StatusItem extends React.Component {
 
     return (
       <ActivityItem
-        showTime
+        showTime={showTime}
         author={{
           type: activity.user ? 'user' : 'system',
           user: activity.user,
@@ -64,7 +64,9 @@ class StatusItem extends React.Component {
             value: (
               <Chart
                 data={activity.eventStats.data}
-                detected={(isCreated || isDetected) && incident && incident.dateStarted}
+                detected={
+                  ((isCreated || isDetected) && incident && incident.dateStarted) || ''
+                }
               />
             ),
             fixed: 'Chart Placeholder for Percy',
diff --git a/src/sentry/static/sentry/app/views/incidents/details/body.tsx b/src/sentry/static/sentry/app/views/incidents/details/body.tsx
index ea64bd18af..18ac9fb281 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/body.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/body.tsx
@@ -51,7 +51,6 @@ export default class DetailsBody extends React.Component<Props> {
             </StyledNavTabs>
             <Activity
               params={params}
-              incident={incident}
               incidentStatus={!!incident ? incident.status : null}
             />
           </PageContent>
diff --git a/src/sentry/static/sentry/app/views/incidents/details/chart.tsx b/src/sentry/static/sentry/app/views/incidents/details/chart.tsx
index d23ce3edf4..9a08964ca0 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/chart.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/chart.tsx
@@ -38,7 +38,7 @@ function getNearbyIndex(data: Data, needle: number) {
 type Props = {
   data: Data;
   detected: string;
-  closed: string;
+  closed?: string;
 };
 
 export default class Chart extends React.PureComponent<Props> {
@@ -60,7 +60,10 @@ export default class Chart extends React.PureComponent<Props> {
 
     const detectedCoordinate = chartData && chartData[nearbyDetectedTimestampIndex];
     const closedCoordinate =
-      chartData && closedTs && chartData[nearbyClosedTimestampIndex];
+      chartData &&
+      closedTs &&
+      typeof nearbyClosedTimestampIndex !== 'undefined' &&
+      chartData[nearbyClosedTimestampIndex];
 
     return (
       <LineChart
diff --git a/src/sentry/static/sentry/app/views/incidents/types.ts b/src/sentry/static/sentry/app/views/incidents/types.ts
index 2679f8468a..945e901d14 100644
--- a/src/sentry/static/sentry/app/views/incidents/types.ts
+++ b/src/sentry/static/sentry/app/views/incidents/types.ts
@@ -1,4 +1,7 @@
 import {User, Group, Repository} from 'app/types';
+import {IncidentActivityType} from './utils';
+
+type Data = [number, {count: number}[]][];
 
 export type Incident = {
   dateClosed: string;
@@ -6,7 +9,7 @@ export type Incident = {
   dateDetected: string;
   dateAdded: string;
   eventStats: {
-    data: [number, {count: number}[]][];
+    data: Data;
   };
   id: string;
   identifier: string;
@@ -29,3 +32,23 @@ export type IncidentSuspect = {
   message: string;
   repository: Repository;
 };
+
+export type ActivityTypeDraft = {
+  comment: null | string;
+  dateCreated: string;
+  id: string;
+  incidentIdentifier: string;
+  type: IncidentActivityType;
+  user: User;
+};
+
+export type ActivityType = ActivityTypeDraft & {
+  eventStats: {data: Data};
+  previousValue: null;
+  value: null;
+};
+
+export type NoteType = {
+  text: string;
+  mentions: [string, string][];
+};
