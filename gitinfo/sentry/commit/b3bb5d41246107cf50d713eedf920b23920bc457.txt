commit b3bb5d41246107cf50d713eedf920b23920bc457
Author: MeredithAnya <meredith@getsentry.com>
Date:   Thu Jun 13 13:02:23 2019 -0700

    feat(app-platform): Add error.created hook event (#13462)
    
    * feat(app-platform): Add error.created hook event

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 443851fcc8..26d217b1ab 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -842,6 +842,8 @@ SENTRY_FEATURES = {
     # Enable interface functionality to synchronize groups between sentry and
     # issues on external services.
     'organizations:integrations-issue-sync': True,
+    # Enable interface functionality to recieve event hooks.
+    'organizations:integrations-event-hooks': False,
     # Special feature flag primarily used on the sentry.io SAAS product for
     # easily enabling features while in early development.
     'organizations:internal-catchall': False,
diff --git a/src/sentry/models/sentryapp.py b/src/sentry/models/sentryapp.py
index 7c582515c1..6e094b0583 100644
--- a/src/sentry/models/sentryapp.py
+++ b/src/sentry/models/sentryapp.py
@@ -32,6 +32,9 @@ EVENT_EXPANSION = {
         'issue.ignored',
         'issue.assigned',
     ],
+    'error': [
+        'error.created',
+    ],
 }
 
 # We present Webhook Subscriptions per-resource (Issue, Project, etc.), not
@@ -39,10 +42,12 @@ EVENT_EXPANSION = {
 # resources a Sentry App may subscribe to.
 VALID_EVENT_RESOURCES = (
     'issue',
+    'error',
 )
 
 REQUIRED_EVENT_PERMISSIONS = {
     'issue': 'event:read',
+    'error': 'event:read',
     'project': 'project:read',
     'member': 'member:read',
     'organization': 'org:read',
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index a4d209b9db..ec206a551b 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -186,3 +186,8 @@ register('symbolicator.minidump-refactor-random-sampling', default=0.0)  # unuse
 # Normalization after processors
 register('store.normalize-after-processing', default=0.0)  # unused
 register('store.disable-trim-in-renormalization', default=0.0)
+
+# Post Process Error Hook Sampling
+register('post-process.use-error-hook-sampling', default=False)
+# From 0.0 to 1.0: Randomly enqueue process_resource_change task
+register('post-process.error-hook-sample-rate', default=0.0)
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 8ea163cc01..ab840f80f4 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -44,6 +44,52 @@ def _get_service_hooks(project_id):
     return result
 
 
+def _should_send_error_created_hooks(project):
+    from sentry.models import ServiceHook, Organization
+    from sentry import options
+    import random
+
+    use_sampling = options.get('post-process.use-error-hook-sampling')
+
+    # XXX(Meredith): Sampling is used to test the process_resource_change task.
+    # We have an option to explicity say we want to use sampling, and the other
+    # to determine what that rate should be.
+    # Going forward the sampling will be removed and the task will only be
+    # gated using the integrations-event-hooks (i.e. gated by plan)
+    #
+    # We also don't want to cache the result in case we need to manually lower the
+    # sample rate immediately, or turn it down completely.
+    if use_sampling:
+        if random.random() >= options.get('post-process.error-hook-sample-rate'):
+            return False
+
+        org = Organization.objects.get_from_cache(id=project.organization_id)
+        result = ServiceHook.objects.filter(
+            organization_id=org.id,
+        ).extra(where=["events @> '{error.created}'"]).exists()
+
+        return result
+
+    cache_key = u'servicehooks-error-created:1:{}'.format(project.id)
+    result = cache.get(cache_key)
+
+    if result is None:
+
+        org = Organization.objects.get_from_cache(id=project.organization_id)
+        if not features.has('organizations:integrations-event-hooks', organization=org):
+            cache.set(cache_key, 0, 60)
+            return False
+
+        result = ServiceHook.objects.filter(
+            organization_id=org.id,
+        ).extra(where=["events @> '{error.created}'"]).exists()
+
+        cache_value = 1 if result else 0
+        cache.set(cache_key, cache_value, 60)
+
+    return result
+
+
 def _capture_stats(event, is_new):
     # TODO(dcramer): limit platforms to... something?
     group = event.group
@@ -161,6 +207,14 @@ def post_process_group(event, is_new, is_regression, is_sample, is_new_group_env
                             event=event,
                         )
 
+        if event.get_event_type() == 'error' and _should_send_error_created_hooks(event.project):
+            process_resource_change_bound.delay(
+                action='created',
+                sender='Error',
+                instance_id=event.event_id,
+                project_id=event.project_id,
+                group_id=event.group_id,
+            )
         if is_new:
             process_resource_change_bound.delay(
                 action='created',
diff --git a/src/sentry/tasks/sentry_apps.py b/src/sentry/tasks/sentry_apps.py
index 88d1939453..94ceadfd83 100644
--- a/src/sentry/tasks/sentry_apps.py
+++ b/src/sentry/tasks/sentry_apps.py
@@ -6,12 +6,14 @@ from celery.task import current
 from django.core.urlresolvers import reverse
 from requests.exceptions import RequestException
 
+from sentry import options
+from sentry import features
 from sentry.http import safe_urlopen
 from sentry.tasks.base import instrumented_task, retry
 from sentry.utils.http import absolute_uri
 from sentry.api.serializers import serialize, AppPlatformEvent
 from sentry.models import (
-    SentryAppInstallation, Group, Project, Organization, User, ServiceHook, ServiceHookProject, SentryApp,
+    SentryAppInstallation, Event, EventCommon, Group, Project, Organization, User, ServiceHook, ServiceHookProject, SentryApp, SnubaEvent,
 )
 from sentry.models.sentryapp import VALID_EVENTS
 
@@ -30,11 +32,41 @@ RESOURCE_RENAMES = {
     'Group': 'issue',
 }
 
+USE_SNUBA = options.get('snuba.events-queries.enabled')
+
 TYPES = {
     'Group': Group,
+    'Error': SnubaEvent if USE_SNUBA else Event,
 }
 
 
+def _webhook_event_data(event, group_id, project_id):
+    project = Project.objects.get_from_cache(id=project_id)
+    organization = Organization.objects.get_from_cache(id=project.organization_id)
+
+    event_context = event.as_dict()
+    event_context['url'] = absolute_uri(reverse('sentry-api-0-project-event-details', args=[
+        project.organization.slug,
+        project.slug,
+        event.event_id,
+    ]))
+
+    event_context['web_url'] = absolute_uri(reverse('sentry-organization-event-detail', args=[
+        organization.slug,
+        group_id,
+        event.event_id,
+    ]))
+
+    # The URL has a regex OR in it ("|") which means `reverse` cannot generate
+    # a valid URL (it can't know which option to pick). We have to manually
+    # create this URL for, that reason.
+    event_context['issue_url'] = absolute_uri(
+        '/api/0/issues/{}/'.format(group_id),
+    )
+
+    return event_context
+
+
 @instrumented_task(name='sentry.tasks.sentry_apps.send_alert_event', **TASK_OPTIONS)
 @retry(on=(RequestException, ))
 def send_alert_event(event, rule, sentry_app_id):
@@ -64,25 +96,7 @@ def send_alert_event(event, rule, sentry_app_id):
         logger.info('event_alert_webhook.missing_installation', extra=extra)
         return
 
-    event_context = event.as_dict()
-    event_context['url'] = absolute_uri(reverse('sentry-api-0-project-event-details', args=[
-        project.organization.slug,
-        project.slug,
-        event.event_id,
-    ]))
-
-    event_context['web_url'] = absolute_uri(reverse('sentry-organization-event-detail', args=[
-        organization.slug,
-        group.id,
-        event.event_id,
-    ]))
-
-    # The URL has a regex OR in it ("|") which means `reverse` cannot generate
-    # a valid URL (it can't know which option to pick). We have to manually
-    # create this URL for, that reason.
-    event_context['issue_url'] = absolute_uri(
-        '/api/0/issues/{}/'.format(group.id),
-    )
+    event_context = _webhook_event_data(event, group.id, project.id)
 
     data = {
         'event': event_context,
@@ -107,10 +121,31 @@ def send_alert_event(event, rule, sentry_app_id):
 def _process_resource_change(action, sender, instance_id, retryer=None, *args, **kwargs):
     # The class is serialized as a string when enqueueing the class.
     model = TYPES[sender]
-
-    # Some resources are named differently than their model. eg. Group vs
-    # Issue. Looks up the human name for the model. Defaults to the model name.
-    name = RESOURCE_RENAMES.get(model.__name__, model.__name__.lower())
+    # The Event model has different hooks for the differenct types. The sender
+    # determines which type eg. Error and therefore the 'name' eg. error
+    if issubclass(model, EventCommon):
+        if not kwargs.get('project_id'):
+            extra = {
+                'sender': sender,
+                'action': action,
+                'event_id': instance_id,
+            }
+            logger.info('process_resource_change.event_missing_project_id', extra=extra)
+            return
+        if not kwargs.get('group_id'):
+            extra = {
+                'sender': sender,
+                'action': action,
+                'event_id': instance_id,
+            }
+            logger.info('process_resource_change.event_missing_group_id', extra=extra)
+            return
+
+        name = sender.lower()
+    else:
+        # Some resources are named differently than their model. eg. Group vs Issue.
+        # Looks up the human name for the model. Defaults to the model name.
+        name = RESOURCE_RENAMES.get(model.__name__, model.__name__.lower())
 
     # By default, use Celery's `current` but allow a value to be passed for the
     # bound Task.
@@ -119,7 +154,15 @@ def _process_resource_change(action, sender, instance_id, retryer=None, *args, *
     # We may run into a race condition where this task executes before the
     # transaction that creates the Group has committed.
     try:
-        instance = model.objects.get(id=instance_id)
+        if issubclass(model, EventCommon):
+            # 'from_event_id' is supported for both Event and SnubaEvent
+            # instance_id is the event.event_id NOT the event.id
+            instance = model.objects.from_event_id(
+                instance_id,
+                kwargs.get('project_id'),
+            )
+        else:
+            instance = model.objects.get(id=instance_id)
     except model.DoesNotExist as e:
         # Explicitly requeue the task, so we don't report this to Sentry until
         # we hit the max number of retries.
@@ -132,7 +175,7 @@ def _process_resource_change(action, sender, instance_id, retryer=None, *args, *
 
     org = None
 
-    if isinstance(instance, Group):
+    if isinstance(instance, Group) or issubclass(model, EventCommon):
         org = Organization.objects.get_from_cache(
             id=Project.objects.get_from_cache(
                 id=instance.project_id
@@ -146,8 +189,17 @@ def _process_resource_change(action, sender, instance_id, retryer=None, *args, *
 
     for installation in installations:
         data = {}
-        data[name] = serialize(instance)
-        send_webhooks(installation, event, data=data)
+        if issubclass(model, EventCommon):
+            group_id = kwargs.get('group_id')
+            project_id = kwargs.get('project_id')
+            data[name] = _webhook_event_data(instance, group_id, project_id)
+            # XXX(Meredith): this flag is in place for testing the load this task creates
+            # and during testing we don't need to send the webhook.
+            if features.has('organizations:integrations-event-hooks', organization=org):
+                send_webhooks(installation, event, data=data)
+        else:
+            data[name] = serialize(instance)
+            send_webhooks(installation, event, data=data)
 
 
 @instrumented_task('sentry.tasks.process_resource_change', **TASK_OPTIONS)
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 949635b360..a7c466c977 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -7,9 +7,11 @@ from django.utils import timezone
 from mock import Mock, patch
 
 from sentry import tagstore
+from sentry import options
 from sentry.models import Group, GroupSnooze, GroupStatus, ProjectOwnership
 from sentry.ownership.grammar import Rule, Matcher, Owner, dump_schema
 from sentry.testutils import TestCase
+from sentry.testutils.helpers import with_feature
 from sentry.tasks.merge import merge_groups
 from sentry.tasks.post_process import index_event_tags, post_process_group
 
@@ -397,6 +399,164 @@ class PostProcessGroupTest(TestCase):
             instance_id=group.id,
         )
 
+    @with_feature('organizations:integrations-event-hooks')
+    @patch('sentry.tasks.sentry_apps.process_resource_change_bound.delay')
+    def test_processes_resource_change_task_on_error_events(self, delay):
+        event = self.store_event(
+            data={
+                'message': 'Foo bar',
+                'exception': {"type": "Foo", "value": "shits on fiah yo"},
+                'level': 'error',
+                'timestamp': timezone.now().isoformat()[:19]
+            },
+            project_id=self.project.id,
+            assert_no_errors=False
+        )
+
+        self.create_service_hook(
+            project=self.project,
+            organization=self.project.organization,
+            actor=self.user,
+            events=['error.created'],
+        )
+
+        post_process_group(
+            event=event,
+            is_new=False,
+            is_regression=False,
+            is_sample=False,
+            is_new_group_environment=False,
+        )
+
+        kwargs = {
+            'project_id': self.project.id,
+            'group_id': event.group.id,
+        }
+        delay.assert_called_once_with(
+            action='created',
+            sender='Error',
+            instance_id=event.event_id,
+            **kwargs
+        )
+
+    @with_feature('organizations:integrations-event-hooks')
+    @patch('sentry.tasks.sentry_apps.process_resource_change_bound.delay')
+    def test_processes_resource_change_task_not_called_for_non_errors(self, delay):
+        event = self.store_event(
+            data={
+                'message': 'Foo bar',
+                'level': 'info',
+                'timestamp': timezone.now().isoformat()[:19]
+            },
+            project_id=self.project.id,
+            assert_no_errors=False
+        )
+
+        post_process_group(
+            event=event,
+            is_new=False,
+            is_regression=False,
+            is_sample=False,
+            is_new_group_environment=False,
+        )
+
+        assert not delay.called
+
+    @patch('sentry.tasks.sentry_apps.process_resource_change_bound.delay')
+    def test_processes_resource_change_task_not_called_without_feature_flag(self, delay):
+        event = self.store_event(
+            data={
+                'message': 'Foo bar',
+                'level': 'info',
+                'timestamp': timezone.now().isoformat()[:19]
+            },
+            project_id=self.project.id,
+            assert_no_errors=False
+        )
+
+        post_process_group(
+            event=event,
+            is_new=False,
+            is_regression=False,
+            is_sample=False,
+            is_new_group_environment=False,
+        )
+
+        assert not delay.called
+
+    @with_feature('organizations:integrations-event-hooks')
+    @patch('sentry.tasks.sentry_apps.process_resource_change_bound.delay')
+    def test_processes_resource_change_task_not_called_without_error_created(self, delay):
+        event = self.store_event(
+            data={
+                'message': 'Foo bar',
+                'level': 'error',
+                'exception': {"type": "Foo", "value": "shits on fiah yo"},
+                'timestamp': timezone.now().isoformat()[:19]
+            },
+            project_id=self.project.id,
+            assert_no_errors=False
+        )
+
+        self.create_service_hook(
+            project=self.project,
+            organization=self.project.organization,
+            actor=self.user,
+            events=[],
+        )
+
+        post_process_group(
+            event=event,
+            is_new=False,
+            is_regression=False,
+            is_sample=False,
+            is_new_group_environment=False,
+        )
+
+        assert not delay.called
+
+    @patch('sentry.tasks.sentry_apps.process_resource_change_bound.delay')
+    def test_processes_resource_change_task_uses_sampling_option(self, delay):
+        options.set('post-process.use-error-hook-sampling', True)
+        options.set('post-process.error-hook-sample-rate', 1)
+        event = self.store_event(
+            data={
+                'message': 'Foo bar',
+                'level': 'error',
+                'exception': {"type": "Foo", "value": "shits on fiah yo"},
+                'timestamp': timezone.now().isoformat()[:19]
+            },
+            project_id=self.project.id,
+            assert_no_errors=False
+        )
+
+        self.create_service_hook(
+            project=self.project,
+            organization=self.project.organization,
+            actor=self.user,
+            events=['error.created'],
+        )
+
+        post_process_group(
+            event=event,
+            is_new=False,
+            is_regression=False,
+            is_sample=False,
+            is_new_group_environment=False,
+        )
+
+        kwargs = {
+            'project_id': self.project.id,
+            'group_id': event.group.id,
+        }
+
+        delay.assert_called_once_with(
+            action='created',
+            sender='Error',
+            instance_id=event.event_id,
+            **kwargs
+        )
+
 
 class IndexEventTagsTest(TestCase):
     def test_simple(self):
diff --git a/tests/sentry/tasks/test_sentry_apps.py b/tests/sentry/tasks/test_sentry_apps.py
index eb94ea8744..ac6aa5304f 100644
--- a/tests/sentry/tasks/test_sentry_apps.py
+++ b/tests/sentry/tasks/test_sentry_apps.py
@@ -9,6 +9,7 @@ from mock import patch
 
 from sentry.models import Rule, SentryApp, SentryAppInstallation
 from sentry.testutils import TestCase
+from sentry.testutils.helpers import with_feature
 from sentry.testutils.helpers.faux import faux
 from sentry.utils.http import absolute_uri
 from sentry.receivers.sentry_apps import *  # NOQA
@@ -219,6 +220,47 @@ class TestProcessResourceChange(TestCase):
         task = faux(process).kwargs['retryer']
         assert isinstance(task, Task)
 
+    @with_feature('organizations:integrations-event-hooks')
+    def test_error_created_sends_webhook(self, safe_urlopen):
+        sentry_app = self.create_sentry_app(
+            organization=self.project.organization,
+            events=['error.created'],
+        )
+        install = self.create_sentry_app_installation(
+            organization=self.project.organization,
+            slug=sentry_app.slug,
+        )
+
+        event = self.store_event(
+            data={
+                'message': 'Foo bar',
+                'exception': {"type": "Foo", "value": "shits on fiah yo"},
+                'level': 'error',
+            },
+            project_id=self.project.id,
+            assert_no_errors=False
+        )
+
+        with self.tasks():
+            post_process_group(
+                event=event,
+                is_new=False,
+                is_regression=False,
+                is_sample=False,
+                is_new_group_environment=False,
+            )
+
+        data = json.loads(faux(safe_urlopen).kwargs['data'])
+
+        assert data['action'] == 'created'
+        assert data['installation']['uuid'] == install.uuid
+        assert data['data']['error']['event_id'] == event.event_id
+        assert faux(safe_urlopen).kwargs_contain('headers.Content-Type')
+        assert faux(safe_urlopen).kwargs_contain('headers.Request-ID')
+        assert faux(safe_urlopen).kwargs_contain('headers.Sentry-Hook-Resource')
+        assert faux(safe_urlopen).kwargs_contain('headers.Sentry-Hook-Timestamp')
+        assert faux(safe_urlopen).kwargs_contain('headers.Sentry-Hook-Signature')
+
 
 @patch('sentry.mediators.sentry_app_installations.InstallationNotifier.run')
 class TestInstallationWebhook(TestCase):
