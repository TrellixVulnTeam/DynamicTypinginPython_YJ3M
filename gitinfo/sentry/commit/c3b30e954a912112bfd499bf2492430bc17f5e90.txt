commit c3b30e954a912112bfd499bf2492430bc17f5e90
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Dec 8 19:13:10 2014 -0800

    Base all URLs on organization

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 911faf8684..8bc47e3b7c 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -147,7 +147,7 @@ MAX_CULPRIT_LENGTH = 200
 # which we don't want to worry about conflicts on.
 RESERVED_ORGANIZATION_SLUGS = (
     'admin', 'manage', 'login', 'account', 'register', 'api',
-    'organizations',
+    'organizations', 'teams', 'projects',
 )
 
 RESERVED_TEAM_SLUGS = RESERVED_ORGANIZATION_SLUGS
diff --git a/src/sentry/management/commands/repair.py b/src/sentry/management/commands/repair.py
index 27e3fa542c..dd2bcb7322 100644
--- a/src/sentry/management/commands/repair.py
+++ b/src/sentry/management/commands/repair.py
@@ -9,45 +9,31 @@ from __future__ import absolute_import, print_function
 
 from django.core.management.base import BaseCommand
 
-from optparse import make_option
-
 
 class Command(BaseCommand):
     help = 'Attempts to repair any invalid data within Sentry'
 
-    option_list = BaseCommand.option_list + (
-        make_option('--owner', help='Username to transfer ownerless projects to.'),
-    )
-
     def handle(self, **options):
-        from django.template.defaultfilters import slugify
-        from sentry.models import Project, Team, ProjectKey, User
+        from sentry.constants import RESERVED_ORGANIZATION_SLUGS
+        from sentry.models import Organization, Project, Team, ProjectKey
         from sentry.db.models import update
+        from sentry.db.models.utils import slugify_instance
 
-        if options.get('owner'):
-            owner = User.objects.get(username__iexact=options.get('owner'))
-        else:
-            owner = None
+        print("Creating missing slugs for organizations")
+        for org in Organization.objects.filter(slug__isnull=True):
+            org.slug = slugify_instance(org, org.name, RESERVED_ORGANIZATION_SLUGS)
+            print('Assigning slug %r for %s' % (org.slug, org.id))
+            org.save()
 
         # Create teams for any projects that are missing them
         print("Creating missing teams on projects")
-        for project in Project.objects.filter(team__isnull=True, owner__isnull=False):
+        for project in Project.objects.filter(team__isnull=True):
             # TODO(dcramer): this needs owners
             team = Team(
                 name=project.name,
-                owner=owner,
+                owner=project.owner,
             )
-            base_slug = slugify(team.name)
-            slug = base_slug
-            n = 0
-            while True:
-                if Team.objects.filter(slug=slug).exists():
-                    n += 1
-                    slug = base_slug + '-' + str(n)
-                    continue
-                team.slug = slug
-                break
-
+            team.slug = slugify_instance(team, team.name, RESERVED_ORGANIZATION_SLUGS)
             team.save()
 
             update(project, team=team)
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index a49023243b..c8904096f7 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -77,6 +77,10 @@ class Event(Model):
     def team(self):
         return self.project.team
 
+    @property
+    def organization(self):
+        return self.project.organization
+
     @property
     def version(self):
         return self.data.get('version', '5')
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 1795e52c99..b235b9ed1b 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -12,7 +12,7 @@ import logging
 from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.db import models
-from django.db.models import F
+from django.db.models import F, Q
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
@@ -182,3 +182,17 @@ class Project(Model):
         from sentry.models import ProjectOption
 
         return ProjectOption.objects.unset_value(self, *args, **kwargs)
+
+    def has_access(self, user, access=None):
+        from sentry.models import OrganizationMember
+
+        queryset = OrganizationMember.objects.filter(
+            Q(teams=self.team) | Q(has_global_access=True),
+            user__is_active=True,
+            user=user,
+            organization=self.organization,
+        )
+        if access:
+            queryset = queryset.filter(type__lte=access)
+
+        return queryset.exists()
diff --git a/src/sentry/models/team.py b/src/sentry/models/team.py
index 3992eadfd8..0e7f2e3b87 100644
--- a/src/sentry/models/team.py
+++ b/src/sentry/models/team.py
@@ -140,8 +140,10 @@ class Team(Model):
         super(Team, self).save(*args, **kwargs)
 
     def get_absolute_url(self):
-        return absolute_uri(reverse('sentry', args=[
-            self.slug]))
+        return absolute_uri(reverse('sentry-team-dashboard', args=[
+            self.organization.slug,
+            self.slug,
+        ]))
 
     def get_owner_name(self):
         if not self.owner:
@@ -158,3 +160,10 @@ class Team(Model):
             Q(teams=self) | Q(has_global_access=True),
             user__is_active=True,
         )
+
+    def has_access(self, user, access=None):
+        queryset = self.member_set.filter(user=user)
+        if access:
+            queryset = queryset.filter(type__lte=access)
+
+        return queryset.exists()
diff --git a/src/sentry/static/sentry/scripts/app.js b/src/sentry/static/sentry/scripts/app.js
index 77344195aa..f2187c66b6 100644
--- a/src/sentry/static/sentry/scripts/app.js
+++ b/src/sentry/static/sentry/scripts/app.js
@@ -93,7 +93,7 @@
                 maxItems: 50,
                 realtime: ($.cookie('pausestream') ? false : true),
                 canStream: this.options.canStream,
-                pollUrl: app.config.urlPrefix + '/api/' + app.config.teamId + '/' + app.config.projectId + '/poll/',
+                pollUrl: app.config.urlPrefix + '/api/' + app.config.organizationId + '/' + app.config.projectId + '/poll/',
                 model: app.models.Group
             });
 
diff --git a/src/sentry/static/sentry/scripts/global.min.js b/src/sentry/static/sentry/scripts/global.min.js
index 63d6f9cf0b..934837bfff 100644
--- a/src/sentry/static/sentry/scripts/global.min.js
+++ b/src/sentry/static/sentry/scripts/global.min.js
@@ -1,3 +1,3 @@
-app=window.app={config:{},templates:{},utils:{}};(function(app,Backbone){"use strict";app.models={};app.models.Group=Backbone.Model.extend({defaults:{count:0,version:0,annotations:[],tags:[],hasSeen:false,isBookmarked:false,historicalData:[]}})})(app,Backbone);(function(app){"use strict";app.templates={group:""+'<div class="count" data-count="<%= app.utils.formatNumber(count) %>">'+'<span title="<%= count %>"><%= app.utils.formatNumber(count) %></span>'+"</div>"+'<div class="details">'+'<h3><a href="<%= permalink %>"><%= title %></a></h3>'+'<p class="message">'+"<%= message %>"+"</p>"+'<div class="meta">'+"<% $.each(annotations, function(_, tag) { %>"+'<span class="tag annotation" data-tag="<%= tag.label %>" data-count="<%= app.utils.formatNumber(tag.count) %>">'+"<i><%= tag.label %></i>"+'<span title="<%= count %>"><%= app.utils.formatNumber(tag.count) %></span>'+"</span>"+"<% }) %>"+'<span class="last-seen pretty-date"></span>'+"<% if (timeSpent) { %>"+'<span class="tag time-spent"><%= Math.round(timeSpent) %>ms</span>'+"<% } %>"+'<span class="tag tag-project">'+'<a href="<%= projectUrl %>"><%= project.name %></a>'+"</span>"+'<span class="tag tag-logger">'+'<a href="<%= loggerUrl %>"><%= logger %></a>'+"</span>"+"<% _.each(tags, function(tag){ %> "+'<span class="tag"><%= tag %></span>'+"<% }) %>"+"</div>"+'<span class="sparkline"></span>'+'<ul class="actions">'+"<% if (canResolve) { %>"+"<li>"+'<a href="#" data-action="resolve">'+'<i aria-hidden="true" class="icon-checkmark"></i>'+"</a>"+"</li>"+"<li>"+'<a href="#" data-action="bookmark" class="bookmark" title="Bookmark">'+'<i aria-hidden="true" class="icon-star"></i>'+"</a>"+"</li>"+"<% } %>"+"</ul>"+"</div>"}})(app);(function(app,jQuery,_,moment){"use strict";var $=jQuery;var number_formats=[[1e9,"b"],[1e6,"m"],[1e3,"k"]];app.utils={getQueryParams:function(){var vars={},href=window.location.href,hashes,hash;if(href.indexOf("?")==-1)return vars;hashes=href.slice(href.indexOf("?")+1,href.indexOf("#")!=-1?href.indexOf("#"):href.length).split("&");$.each(hashes,function(_,chunk){hash=chunk.split("=");if(!hash[0]&&!hash[1])return;vars[decodeURIComponent(hash[0])]=hash[1]?decodeURIComponent(hash[1]).replace(/\+/," "):""});return vars},floatFormat:function(number,places){var multi=Math.pow(10,places);return parseInt(number*multi,10)/multi},formatNumber:function(number){var b,x,y,o,p;number=parseInt(number,10);for(var i=0;b=number_formats[i];i++){x=b[0];y=b[1];o=Math.floor(number/x);p=number%x;if(o>0){if(o/10>1||!p)return""+o+y;return""+this.floatFormat(number/x,1)+y}}return""+number},slugify:function(str){str=str.replace(/^\s+|\s+$/g,"");str=str.toLowerCase();var from="àáäâèéëêìíïîòóöôùúüûñç·/_,:;";var to="aaaaeeeeiiiioooouuuunc------";for(var i=0,l=from.length;i<l;i++){str=str.replace(new RegExp(from.charAt(i),"g"),to.charAt(i))}str=str.replace(/[^a-z0-9\s\-]/g,"").replace(/\s+/g,"-").replace(/-+/g,"-");return str},varToggle:function(link,$elm){var $link=$(link);if(!$link.attr("data-expand-label"))$link.attr("data-expand-label",$link.html());$elm.toggle();if($elm.is(":visible"))$link.html($link.attr("data-collapse-label"));else $link.html($link.attr("data-expand-label"))},getSearchUsersUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/users/search/"},getSearchProjectsUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/projects/search/"},getSearchTagsUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/tags/search/"},makeSearchableInput:function(el,url,callback,options){$(el).select2($.extend({allowClear:true,width:"element",initSelection:function(el,callback){var $el=$(el);callback({id:$el.val(),text:$el.val()})},ajax:{url:url,dataType:"json",data:function(term,page){return{query:term,limit:10}},results:function(data,page){var results=callback(data);return{results:callback(data)}}}},options||{}))},escape:function(str){return str.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},makeSearchableUsersInput:function(el){this.makeSearchableInput(el,this.getSearchUsersUrl(),_.bind(function(data){var results=[];$(data.results).each(_.bind(function(_,val){var label;if(val.first_name){label=this.escape(val.first_name)+" &mdash; "+this.escape(val.username)}else{label=this.escape(val.username)}label+="<br>"+this.escape(val.email);results.push({id:val.username,text:label})},this));if(data.query&&$(results).filter(function(){return this.id.localeCompare(data.query)===0}).length===0){results.push({id:this.escape(data.query),text:this.escape(data.query)})}return results},this),{escapeMarkup:function(s){return s}})}};$(function(){$(".body select").each(function(){var $this=$(this),options={width:"element",allowClear:false,minimumResultsForSearch:10};if($this.attr("data-allowClear")){options.allowClear=$this.attr("data-allowClear")}$this.select2(options)});setInterval(function(){$(".pretty-date").each(function(_,el){var $el=$(el);var dt=$el.data("datetime");if(dt){var date=moment(dt);if(date){$el.text(date.fromNow());$el.attr("title",date.format("llll"))}}})},5e3)})})(app,jQuery,_,moment);(function(app,Backbone){"use strict";app.ScoredList=Backbone.Collection.extend({comparator:function(member){return-member.get("score")}})})(app,Backbone);(function(app,Backbone,jQuery,moment){"use strict";var $=jQuery;app.charts={render:function(el,options){var $el=$("#chart");var url=$el.attr("data-api-url");var title=$(el).attr("data-title");var $spark=$el.find(".sparkline");$spark.height($el.height());$.ajax({url:$el.attr("data-api-url"),type:"get",dataType:"json",data:{since:(new Date).getTime()/1e3-3600*24,resolution:"1h"},success:function(resp){var data=[],maxval=10;$spark.empty();$.each(resp,function(_,val){var date=new Date(val[0]*1e3);data.push({y:val[1],label:moment(date).fromNow()});if(val[1]>maxval){maxval=val[1]}});app.charts.createSparkline($spark,data,options)}})},createSparkline:function(el,points,options){var $el=$(el),existing=$el.children(),maxval=10,title,point,pct,child,point_width;if(options===undefined){options={}}for(var i=0;i<points.length;i++){point=points[i];if(typeof point==="number"){point=points[i]={y:point}}if(point.y>maxval){maxval=point.y}}point_width=app.utils.floatFormat(100/points.length,2)+"%";for(i=0;i<points.length;i++){point=points[i];pct=app.utils.floatFormat(point.y/maxval*99,2)+"%";title=point.y+" events";if(point.label){title=title+"<br>("+point.label+")"}if(existing.get(i)===undefined){$('<a style="width:'+point_width+';" rel="tooltip" title="'+title+'"><span style="height:'+pct+'">'+point.y+"</span></a>").tooltip({placement:options.placement||"bottom",html:true,container:"body"}).appendTo($el)}else{$(existing[i]).find("span").css("height",pct).text(point.y).attr("title",point.label||point.y)}}}}})(app,Backbone,jQuery,moment);(function(window,app,Backbone,jQuery,_,moment){"use strict";var $=jQuery;app.GroupView=Backbone.View.extend({tagName:"li",className:"group",template:_.template(app.templates.group),initialize:function(){Backbone.View.prototype.initialize.apply(this,arguments);_.bindAll(this,"updateCount","updateAllAnnotations","updateAnnotation","updateLastSeen","updateResolved","updateHasSeen","renderSparkline","updateBookmarked","render");this.model.on({"change:count":this.updateCount,"change:annotations":this.updateAllAnnotations,"change:lastSeen":this.updateLastSeen,"change:isBookmarked":this.updateBookmarked,"change:isResolved":this.updateResolved,"change:hasSeen":this.updateHasSeen,"change:historicalData":this.renderSparkline},this)},render:function(){var data=this.model.toJSON();data.projectUrl=app.config.urlPrefix+"/"+app.config.teamId+"/"+data.project.slug+"/";data.loggerUrl=data.projectUrl+"?logger="+data.logger;this.$el.html(this.template(data));this.$el.attr("data-id",this.model.id);this.$el.addClass(this.getLevelClassName());this.$el.find("a[data-action=resolve]").click(_.bind(function(e){e.preventDefault();if(this.model.get("isResolved")){this.unresolve()}else{this.resolve()}},this));this.$el.find("a[data-action=bookmark]").click(_.bind(function(e){e.preventDefault();this.bookmark()},this));this.updateLastSeen();this.renderSparkline();this.updateResolved();this.updateHasSeen();this.updateBookmarked()},updateBookmarked:function(){if(this.model.get("isBookmarked")){this.$el.find("a[data-action=bookmark]").addClass("checked")}else{this.$el.find("a[data-action=bookmark]").removeClass("checked")}},updateResolved:function(){if(this.model.get("isResolved")){this.$el.addClass("resolved")}else{this.$el.removeClass("resolved")}},updateHasSeen:function(){if(this.model.get("hasSeen")){this.$el.addClass("seen")}else{this.$el.removeClass("seen")}},renderSparkline:function(obj){var data=this.model.get("historicalData");if(!data||!data.length)return;this.$el.addClass("with-sparkline");app.charts.createSparkline(this.$el.find(".sparkline"),data)},resolve:function(){$.ajax({url:this.getResolveUrl(),type:"post",dataType:"json",success:_.bind(function(response){this.model.set("version",response.version+5e3);this.model.set("isResolved",true)},this)})},unresolve:function(){$.ajax({url:this.getUnresolveUrl(),type:"post",dataType:"json",success:_.bind(function(response){this.model.set("version",response.version+5e3);this.model.set("isResolved",false)},this)})},getResolveUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/group/"+this.model.get("id")+"/set/resolved/"},getUnresolveUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/group/"+this.model.get("id")+"/set/unresolved/"},getBookmarkUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/bookmark/"},bookmark:function(){$.ajax({url:this.getBookmarkUrl(),type:"post",dataType:"json",data:{gid:this.model.get("id")},success:_.bind(function(response){this.model.set("version",response.version);this.model.set("isBookmarked",response.isBookmarked)},this)})},getLevelClassName:function(){return"level-"+this.model.get("levelName")},updateLastSeen:function(){var dt=moment(this.model.get("lastSeen"));this.$el.find(".last-seen").text(dt.fromNow()).data("datetime",this.model.get("lastSeen")).attr("title",dt.format("llll"))},updateCount:function(){var new_count=app.utils.formatNumber(this.model.get("count"));var counter=this.$el.find(".count");var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")},updateAnnotation:function(annotation){var value=annotation.count;if(value===null)return;var new_count=app.utils.formatNumber(value);var counter=this.$el.find('.annotation[data-tag="'+annotation.label+'"]');var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")},updateAllAnnotations:function(){var self=this;$.each(this.model.get("annotations"),function(index,annotation){self.updateAnnotation(annotation)})}});app.OrderedElementsView=Backbone.View.extend({emptyMessage:'<div class="empty-message"><h2>No events to show.</h2><p>We\'ll notify you if that changes. In the meantime why not take a moment to become more familiar with Sentry.</p><p class="links"><a href="docs/">Installation instructions</a> <a href="settings/">Project settings</a></p></div>',loadingMessage:"<p>Loading...</p>",model:app.models.Group,defaults:{maxItems:50,view:Backbone.View},initialize:function(data){if(_.isUndefined(data))data={};var members=data.members;Backbone.View.prototype.initialize.apply(this,arguments);this.options=$.extend({},this.defaults,this.options,data);this.$wrapper=$("#"+this.id);this.$parent=$("<ul></ul>");this.$empty=$('<li class="empty"></li>');this.$wrapper.html(this.$parent);if(this.options.className)this.$parent.addClass(this.options.className);_.bindAll(this,"renderMemberInContainer","unrenderMember","reSortMembers");this.collection=new app.ScoredList([],{model:data.model});this.collection.on("add",this.renderMemberInContainer,this);this.collection.on("remove",this.unrenderMember,this);this.collection.on("reset",this.reSortMembers,this);delete data.members;this.reset(members)},reset:function(members){this.$parent.empty();this.setEmpty();if(members===undefined){this.$empty.html(this.loadingMessage);this.collection.reset();this.setEmpty();this.loaded=false}else{this.$empty.html(this.emptyMessage);this.collection.reset(members);this.loaded=true}},setEmpty:function(){this.$parent.html(this.$empty)},extend:function(data){for(var i=0;i<data.length;i++){this.addMember(data[i])}},addMember:function(member){var existing=this.collection.get(member.id);function getAttr(x){if(typeof member.get==="function"){return member.get(x)}else{return member[x]}}if(!existing){if(this.collection.length>=this.options.maxItems){if(getAttr("score")<this.collection.last().get("score"))return;while(this.collection.length>=this.options.maxItems)this.collection.pop()}}else if(existing.get("version")>=(getAttr("version")||0)){return}this.collection.add(member,{merge:true})},reSortMembers:function(){this.collection.each(_.bind(function(member){this.renderMemberInContainer(member)},this))},updateMember:function(member,options){if(_.isUndefined(options))options={};var existing=this.collection.get(member.id);if(existing.get("version")>=member.get("version"))return;this.collection.add(member,{merge:true,sort:options.sort!==false?true:false})},hasMember:function(member){return this.collection.get(member.id)?true:false},removeMember:function(member){this.collection.remove(member)},renderMemberInContainer:function(member){var new_pos=this.collection.indexOf(member),$el,$rel;this.$parent.find("li.empty").remove();$el=$("#"+this.id+member.id);if(!$el.length){$el=this.renderMember(member)}else if($el.index()===new_pos){return}if(new_pos===0){this.$parent.prepend($el)}else{$rel=$("#"+this.id+this.collection.at(new_pos).id);if(!$rel.length){this.$parent.append($el)}else if($el.id!==$rel.id){$el.insertBefore($rel)}else{return}}if(this.loaded)$el.css("background-color","#eee").animate({backgroundColor:"#fff"},300)},renderMember:function(member){var view=new this.options.view({model:member,id:this.id+member.id});view.render();return view.$el},unrenderMember:function(member){this.$parent.find("#"+this.id+member.id).remove();if(!this.$parent.find("li").length)this.setEmpty()}});app.GroupListView=app.OrderedElementsView.extend({defaults:{realtime:false,stream:false,pollUrl:null,pollTime:1e3,tickTime:100},initialize:function(data){if(_.isUndefined(data))data={};data.model=app.models.Group;data.view=app.GroupView;app.OrderedElementsView.prototype.initialize.call(this,data);this.options=$.extend({},this.defaults,this.options,data);this.queue=new app.ScoredList([],{model:data.model});this.cursor=null;_.bindAll(this,"poll","pollSuccess","pollFailure","tick");this.poll();window.setInterval(this.tick,this.options.tickTime)},tick:function(){if(!this.queue.length)return;var item=this.queue.pop();if(this.options.canStream){this.addMember(item)}else if(this.hasMember(item)){this.updateMember(item,{sort:false})}},pollSuccess:function(groups){if(!groups.length)return window.setTimeout(this.poll,this.options.pollTime*5);this.cursor=groups[groups.length-1].score;this.queue.add(groups,{merge:true});window.setTimeout(this.poll,this.options.pollTime)},pollFailure:function(jqXHR,textStatus,errorThrown){window.setTimeout(this.poll,this.options.pollTime*10)},poll:function(){var data;if(!this.options.realtime||!this.options.pollUrl)return window.setTimeout(this.poll,this.options.pollTime);data=app.utils.getQueryParams();data.cursor=this.cursor||undefined;$.ajax({url:this.options.pollUrl,type:"GET",dataType:"json",data:data,success:this.pollSuccess,error:this.pollFailure})}})})(window,app,Backbone,jQuery,_,moment);(function(window,app,Backbone,jQuery,_){"use strict";var $=jQuery;var BasePage=Backbone.View.extend({defaults:{canStream:false,realtime:false},initialize:function(data){Backbone.View.prototype.initialize.apply(this,arguments);if(_.isUndefined(data))data={};this.options=$.extend({},this.defaults,this.options,data);this.views={};this.initializeAjaxTabs()},initializeAjaxTabs:function(){$("a[data-toggle=ajtab]").click(_.bind(function(e){var $tab=$(e.target),uri=$tab.attr("data-uri"),view_id=$tab.attr("href").substr(1),view=this.getView(view_id,uri),$cont,$parent;e.preventDefault();if(!uri)return view.reset();$cont=$("#"+view_id);$parent=$cont.parent();$parent.css("opacity",.6);$.ajax({url:uri,dataType:"json",success:function(data){view.reset(data);$parent.css("opacity",1);$tab.tab("show")},error:function(){$cont.html("<p>There was an error fetching data from the server.</p>")}})},this));$("li.active a[data-toggle=ajtab]").click()},makeDefaultView:function(id){return new app.GroupListView({className:"group-list small",id:id,maxItems:5,stream:this.options.stream,realtime:this.options.realtime,model:app.models.Group})},getView:function(id,uri){if(!this.views[id])this.views[id]=this.makeDefaultView(id);var view=this.views[id];view.options.pollUrl=uri;return view}});app.StreamPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);this.group_list=new app.GroupListView({className:"group-list",id:"event_list",members:data.groups,maxItems:50,realtime:$.cookie("pausestream")?false:true,canStream:this.options.canStream,pollUrl:app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/poll/",model:app.models.Group});this.control=$("a[data-action=pause]");this.updateStreamOptions();this.initFilters();this.control.click(_.bind(function(e){e.preventDefault();this.options.realtime=this.group_list.options.realtime=this.control.hasClass("realtime-pause");this.updateStreamOptions()},this));$("#chart").height("50px");app.charts.render("#chart",{placement:"left"})},initFilters:function(){$(".filter").each(_.bind(function(_,el){var $filter=$(el);var $input=$filter.find("input[type=text]");if($input.length>0){$input.select2({initSelection:function(el,callback){var $el=$(el);callback({id:$el.val(),text:$el.val()})},allowClear:true,minimumInputLength:3,ajax:{url:app.utils.getSearchTagsUrl(),dataType:"json",data:function(term,page){return{query:term,quietMillis:300,name:$input.attr("name"),limit:10}},results:function(data,page){var results=[];$(data.results).each(function(_,val){results.push({id:app.utils.escape(val),text:app.utils.escape(val)})});return{results:results}}}})}else{$input=$filter.find("select").select2({allowClear:true})}if($input.length>0){$input.on("change",function(e){var query=app.utils.getQueryParams();query[e.target.name]=e.val;window.location.href="?"+$.param(query)})}},this))},updateStreamOptions:function(){if(this.options.realtime){$.removeCookie("pausestream");this.control.removeClass("realtime-pause");this.control.addClass("realtime-play");this.control.html(this.control.attr("data-pause-label"))}else{$.cookie("pausestream","1",{expires:7});this.control.addClass("realtime-pause");this.control.removeClass("realtime-play");this.control.html(this.control.attr("data-play-label"))}}});app.DashboardPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);$("#chart").height("150px");Sentry.charts.render("#chart")}});app.SelectTeamPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);this.refreshSparklines();$(window).on("resize",this.refreshSparklines)},refreshSparklines:function(){$(".chart").each(function(n,el){var $el=$(el);$.ajax({url:$el.attr("data-api-url"),type:"get",dataType:"json",data:{since:(new Date).getTime()/1e3-3600*24,resolution:"1h"},success:_.bind(function(data){for(var i=0;i<data.length;i++){data[i][0]=data[i][0]*1e3}$.plot($el,[{data:data,color:"#ebeff3",shadowSize:0,lines:{lineWidth:2,show:true,fill:true,color:"#f6f8fa"}}],{yaxis:{min:0},grid:{show:false},hoverable:false,legend:{noColumns:5},lines:{show:false}})},this)})})}});app.GroupDetailsPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);this.group_list=new app.GroupListView({className:"group-list",id:"event_list",members:[data.group],model:app.models.Group});$("#chart").height("150px");Sentry.charts.render("#chart");$(".share-link").popover({html:true,placement:"left",container:document.body,title:"Share Event",content:function(){var $this=$(this);var $content=$('<form class="share-form"></form>');var $urlel=$('<code class="clippy">'+$this.data("share-url")+"</code>");$urlel.clippy({clippy_path:app.config.clippyPath,keep_text:true});$content.append($urlel);$content.append($('<label class="checkbox"><input type="checkbox"> Allow anonymous users to view this event.</label>'));$content.find("input[type=checkbox]").change(function(){var url=$this.data($(this).is(":checked")?"public-url":"private-url");$.ajax({url:url,type:"post",success:function(group){$this.data("public",group.isPublic?"true":"false")},error:function(){window.alert("There was an error changing the public status")}})}).attr("checked",$this.data("public")=="true");return $content}});$(".add-note-btn").click(function(e){var $el=$(this),$form=$(".add-note-form",$el.parent());e.preventDefault();if($el.hasClass("selected")){$el.removeClass("selected");$form.addClass("hide")}else{$el.addClass("selected");$form.removeClass("hide");$form.find("textarea:first").focus()}});$(".add-note-form").submit(function(el){var $this=$(this);$this.find("button[type=submit]").attr("disabled",true).addClass("disabled");$this.find("textarea").addClass("disabled")});$(".tag-widget").each(function(){var $widget=$(this);$.ajax({url:$widget.data("url"),error:function(){$widget.find(".loading").remove();$widget.append($('<li class="error">Unable to load tag information</li>'))},success:function(data){var total=data.total,eTagName=encodeURIComponent(data.name);$widget.find(".loading").remove();if(total===0){$widget.append($("<li>No data available.</li>"))}else{$.each(data.values,function(_,item){var tagValue=item[0],timesSeen=item[1],percent=parseInt(timesSeen/total*100,10),url=app.config.urlPrefix+"/"+app.config.teamId+"/"+app.config.projectId+"/";$("<li>"+'<div class="progressbar">'+'<div style="width:'+percent+'%">'+timesSeen+"</div>"+'<a href="'+url+"?"+eTagName+"="+encodeURIComponent(tagValue)+'">'+tagValue+"<span>"+percent+"%</span>"+"</a>"+"</div>"+"</li>").appendTo($widget)})}}})});var $event_nav=$("#event_nav");if($event_nav.length>0){var $window=$(window);var $nav_links=$event_nav.find("a[href*=#]");var $nav_targets=[];var scroll_offset=$event_nav.offset().top;var event_nav_height;var last_target;$window.resize(function(){event_nav_height=$event_nav.find(".nav").outerHeight();$event_nav.height(event_nav_height+"px")}).resize();$nav_links.click(function(e){var $el=$(this);var target=$(this.hash);$el.parent().addClass("active").siblings().removeClass("active");$("html,body").animate({scrollTop:target.position().top+event_nav_height},"fast");if(history.pushState){history.pushState({},"",this.hash)}e.preventDefault()}).each(function(){if(this.hash.length>1&&$(this.hash).length){$nav_targets.push(this.hash)}});var resizeTimer;$window.scroll(function(){clearTimeout(resizeTimer);resizeTimer=setTimeout(function(){if($window.scrollTop()>scroll_offset){if(!$event_nav.hasClass("fixed")){$event_nav.addClass("fixed")}}else if($event_nav.hasClass("fixed")){$event_nav.removeClass("fixed")}if($nav_targets.length){var from_top=$window.scrollTop()+event_nav_height+20;var cur=$.map($nav_targets,function(hash){if($(hash).offset().top<from_top){return hash}});var target=cur?cur[cur.length-1]:null;if(!target){target=$nav_targets[0]}if(last_target!==target){last_target=target;$nav_links.parent().removeClass("active").end().filter("[href="+target+"]").parent().addClass("active")}}},1)}).scroll()}}});app.WallPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,{realtime:true,pollTime:3e3});this.sparkline=$(".chart");this.sparkline.height(this.sparkline.parent().height());this.stats=$("#stats");_.bindAll(this,"refreshStats","refreshSparkline");this.refreshSparkline();this.refreshStats()},makeDefaultView:function(id){return new app.GroupListView({className:"group-list",id:id,maxItems:5,stream:this.options.stream,realtime:this.options.realtime,model:app.models.Group})},refreshSparkline:function(){$.ajax({url:this.sparkline.attr("data-api-url"),type:"get",dataType:"json",data:{since:(new Date).getTime()/1e3-3600*24,resolution:"1h"},success:_.bind(function(data){for(var i=0;i<data.length;i++){data[i][0]=data[i][0]*1e3}this.sparkline.empty();$.plot(this.sparkline,[{data:data,color:"#52566c",shadowSize:0,lines:{lineWidth:2,show:true,fill:true,fillColor:"#232428"}}],{yaxis:{min:0},grid:{show:false},hoverable:false,legend:{noColumns:5},lines:{show:false}});window.setTimeout(this.refreshSparkline,1e4)},this)})},refreshStats:function(){$.ajax({url:this.stats.attr("data-uri"),dataType:"json",success:_.bind(function(data){this.stats.find("[data-stat]").each(function(){var $this=$(this);var new_count=data[$this.attr("data-stat")];var counter=$this.find("big");var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")});window.setTimeout(this.refreshStats,1e3)},this)})}});app.AddTeamMemberPage=BasePage.extend({});app.AccessGroupMembersPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=user]")}});app.TeamDetailsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=owner]")}});app.ProjectDetailsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=owner]");$("input[type=range]").each(_.bind(function loop(n,el){var $el=$(el),min=parseInt($el.attr("min"),10),max=parseInt($el.attr("max"),10),step=parseInt($el.attr("step"),10),values=[],$value=$('<span class="value"></span>');var i=min;while(i<=max){values.push(i);if(i<12){i+=1}else if(i<24){i+=3}else if(i<36){i+=6}else if(i<48){i+=12}else{i+=24}}$el.on("slider:ready",_.bind(function sliderready(event,data){$value.appendTo(data.el);$value.html(this.formatHours(data.value))},this)).on("slider:changed",_.bind(function sliderchanged(event,data){$value.html(this.formatHours(data.value))},this)).simpleSlider({range:[min,max],step:step,allowedValues:values,snap:true})},this))},formatHours:function formatHours(val){val=parseInt(val,10);if(val===0){return"Disabled"}else if(val>23&&val%24===0){val=val/24;return val+" day"+(val!=1?"s":"")}return val+" hour"+(val!=1?"s":"")}});app.ProjectNotificationsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);$("input[type=range]").each(_.bind(function loop(n,el){var $el=$(el),min=parseInt($el.attr("min"),10),max=parseInt($el.attr("max"),10),step=parseInt($el.attr("step"),10),$value=$('<span class="value"></span>');$el.on("slider:ready",_.bind(function sliderready(event,data){$value.appendTo(data.el);$value.html(this.formatThreshold(data.value))},this)).on("slider:changed",_.bind(function sliderchanged(event,data){$value.html(this.formatThreshold(data.value))},this)).simpleSlider({range:[min,max],step:step,snap:true})},this))},formatThreshold:function formatThreshold(value){if(!value){return"Disabled"}return value+"%"}});app.NewProjectPage=BasePage.extend({initialize:function(data){this.el=$(data.el);BasePage.prototype.initialize.apply(this,arguments);if(this.options.canSelectTeam&&this.options.canCreateTeam){$("#new_team").hide();$('a[rel="create-new-team"]').click(function(){$("#new_team").show();$("#select_team").hide()});$('a[rel="select-team"]').click(function(){$("#new_team").hide();$("#select_team").show()})}}});app.NewProjectRulePage=BasePage.extend({initialize:function(data){var select2_options={width:"element",allowClear:false,minimumResultsForSearch:10};BasePage.prototype.initialize.apply(this,arguments);_.bindAll(this,"addAction","addCondition","parseFormData");this.actions_by_id={};this.conditions_by_id={};this.el=$(data.el);this.action_sel=this.el.find('select[id="action-select"]');this.action_table=this.el.find("table.action-list");this.action_table_body=this.action_table.find("tbody");this.condition_sel=this.el.find('select[id="condition-select"]');this.condition_table=this.el.find("table.condition-list");this.condition_table_body=this.condition_table.find("tbody");this.action_sel.empty();this.action_sel.append($("<option></option>"));$.each(data.actions,_.bind(function(_,action){var opt=$("<option></option>");opt.attr({value:action.id});opt.text(action.label);opt.appendTo(this.action_sel);this.actions_by_id[action.id]=action},this));this.condition_sel.empty();this.condition_sel.append($("<option></option>"));$.each(data.conditions,_.bind(function(_,condition){var opt=$("<option></option>");opt.attr({value:condition.id});opt.text(condition.label);opt.appendTo(this.condition_sel);this.conditions_by_id[condition.id]=condition},this));this.action_sel.select2(select2_options);this.condition_sel.select2(select2_options);this.action_sel.change(_.bind(function(){this.addAction(this.action_sel.val())},this));this.condition_sel.change(_.bind(function(){this.addCondition(this.condition_sel.val())},this));this.parseFormData(data.form_data,data.form_errors)},parseFormData:function(form_data,form_errors){var data={action:{},action_match:form_data.action_match||"all",condition:{},label:form_data.label||""};form_errors=form_errors||{};$.each(form_data,function(key,value){var matches=key.match(/^(condition|action)\[(\d+)\]\[(.+)\]$/);var type,num;if(!matches){return}type=matches[1];num=matches[2];if(data[type][num]===undefined){data[type][num]={}}data[type][num][matches[3]]=value});this.el.find("input[name=label]").val(data.label);this.el.find('select[name="action_match"]').val(data.action_match);$.each(_.sortBy(data.condition),_.bind(function(num,item){this.addCondition(item.id,item,form_errors["condition["+num+"]"]||false)},this));$.each(_.sortBy(data.action),_.bind(function(num,item){this.addAction(item.id,item,form_errors["action["+num+"]"]||false)},this))},addCondition:function(id,options,has_errors){var node=this.conditions_by_id[id],row=$("<tr></tr>"),remove_btn=$('<button class="btn btn-small">Remove</button>'),num=this.condition_table_body.find("tr").length,html=$("<div>"+node.html+"</div>"),prefix="condition["+num+"]",id_field=$('<input type="hidden" name="'+prefix+'[id]" value="'+node.id+'">');has_errors=has_errors||false;options=options||{};if(has_errors){row.addClass("error")}html.find("select").each(function(){var $this=$(this),options={width:"element",allowClear:false,minimumResultsForSearch:10};if($this.attr("data-allowClear")){options.allowClear=$this.attr("data-allowClear")}$this.select2(options)});html.find("input, select, textarea").each(function(_,el){var $el=$(el),name=$el.attr("name");$el.attr("name",prefix+"["+name+"]");$el.val(options[name]||"")});row.append($("<td></td>").append(html).append(id_field));row.append($("<td></td>").append(remove_btn));row.appendTo(this.condition_table_body);
+app=window.app={config:{},templates:{},utils:{}};(function(app,Backbone){"use strict";app.models={};app.models.Group=Backbone.Model.extend({defaults:{count:0,version:0,annotations:[],tags:[],hasSeen:false,isBookmarked:false,historicalData:[]}})})(app,Backbone);(function(app){"use strict";app.templates={group:""+'<div class="count" data-count="<%= app.utils.formatNumber(count) %>">'+'<span title="<%= count %>"><%= app.utils.formatNumber(count) %></span>'+"</div>"+'<div class="details">'+'<h3><a href="<%= permalink %>"><%= title %></a></h3>'+'<p class="message">'+"<%= message %>"+"</p>"+'<div class="meta">'+"<% $.each(annotations, function(_, tag) { %>"+'<span class="tag annotation" data-tag="<%= tag.label %>" data-count="<%= app.utils.formatNumber(tag.count) %>">'+"<i><%= tag.label %></i>"+'<span title="<%= count %>"><%= app.utils.formatNumber(tag.count) %></span>'+"</span>"+"<% }) %>"+'<span class="last-seen pretty-date"></span>'+"<% if (timeSpent) { %>"+'<span class="tag time-spent"><%= Math.round(timeSpent) %>ms</span>'+"<% } %>"+'<span class="tag tag-project">'+'<a href="<%= projectUrl %>"><%= project.name %></a>'+"</span>"+'<span class="tag tag-logger">'+'<a href="<%= loggerUrl %>"><%= logger %></a>'+"</span>"+"<% _.each(tags, function(tag){ %> "+'<span class="tag"><%= tag %></span>'+"<% }) %>"+"</div>"+'<span class="sparkline"></span>'+'<ul class="actions">'+"<% if (canResolve) { %>"+"<li>"+'<a href="#" data-action="resolve">'+'<i aria-hidden="true" class="icon-checkmark"></i>'+"</a>"+"</li>"+"<li>"+'<a href="#" data-action="bookmark" class="bookmark" title="Bookmark">'+'<i aria-hidden="true" class="icon-star"></i>'+"</a>"+"</li>"+"<% } %>"+"</ul>"+"</div>"}})(app);(function(app,jQuery,_,moment){"use strict";var $=jQuery;var number_formats=[[1e9,"b"],[1e6,"m"],[1e3,"k"]];app.utils={getQueryParams:function(){var vars={},href=window.location.href,hashes,hash;if(href.indexOf("?")==-1)return vars;hashes=href.slice(href.indexOf("?")+1,href.indexOf("#")!=-1?href.indexOf("#"):href.length).split("&");$.each(hashes,function(_,chunk){hash=chunk.split("=");if(!hash[0]&&!hash[1])return;vars[decodeURIComponent(hash[0])]=hash[1]?decodeURIComponent(hash[1]).replace(/\+/," "):""});return vars},floatFormat:function(number,places){var multi=Math.pow(10,places);return parseInt(number*multi,10)/multi},formatNumber:function(number){var b,x,y,o,p;number=parseInt(number,10);for(var i=0;b=number_formats[i];i++){x=b[0];y=b[1];o=Math.floor(number/x);p=number%x;if(o>0){if(o/10>1||!p)return""+o+y;return""+this.floatFormat(number/x,1)+y}}return""+number},slugify:function(str){str=str.replace(/^\s+|\s+$/g,"");str=str.toLowerCase();var from="àáäâèéëêìíïîòóöôùúüûñç·/_,:;";var to="aaaaeeeeiiiioooouuuunc------";for(var i=0,l=from.length;i<l;i++){str=str.replace(new RegExp(from.charAt(i),"g"),to.charAt(i))}str=str.replace(/[^a-z0-9\s\-]/g,"").replace(/\s+/g,"-").replace(/-+/g,"-");return str},varToggle:function(link,$elm){var $link=$(link);if(!$link.attr("data-expand-label"))$link.attr("data-expand-label",$link.html());$elm.toggle();if($elm.is(":visible"))$link.html($link.attr("data-collapse-label"));else $link.html($link.attr("data-expand-label"))},getSearchUsersUrl:function(){return app.config.urlPrefix+"/api/"+app.config.organizationId+"/users/search/"},getSearchProjectsUrl:function(){return app.config.urlPrefix+"/api/"+app.config.organizationId+"/projects/search/"},getSearchTagsUrl:function(){return app.config.urlPrefix+"/api/"+app.config.organizationId+"/"+app.config.projectId+"/tags/search/"},makeSearchableInput:function(el,url,callback,options){$(el).select2($.extend({allowClear:true,width:"element",initSelection:function(el,callback){var $el=$(el);callback({id:$el.val(),text:$el.val()})},ajax:{url:url,dataType:"json",data:function(term,page){return{query:term,limit:10}},results:function(data,page){var results=callback(data);return{results:callback(data)}}}},options||{}))},escape:function(str){return str.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},makeSearchableUsersInput:function(el){this.makeSearchableInput(el,this.getSearchUsersUrl(),_.bind(function(data){var results=[];$(data.results).each(_.bind(function(_,val){var label;if(val.first_name){label=this.escape(val.first_name)+" &mdash; "+this.escape(val.username)}else{label=this.escape(val.username)}label+="<br>"+this.escape(val.email);results.push({id:val.username,text:label})},this));if(data.query&&$(results).filter(function(){return this.id.localeCompare(data.query)===0}).length===0){results.push({id:this.escape(data.query),text:this.escape(data.query)})}return results},this),{escapeMarkup:function(s){return s}})}};$(function(){$(".body select").each(function(){var $this=$(this),options={width:"element",allowClear:false,minimumResultsForSearch:10};if($this.attr("data-allowClear")){options.allowClear=$this.attr("data-allowClear")}$this.select2(options)});setInterval(function(){$(".pretty-date").each(function(_,el){var $el=$(el);var dt=$el.data("datetime");if(dt){var date=moment(dt);if(date){$el.text(date.fromNow());$el.attr("title",date.format("llll"))}}})},5e3)})})(app,jQuery,_,moment);(function(app,Backbone){"use strict";app.ScoredList=Backbone.Collection.extend({comparator:function(member){return-member.get("score")}})})(app,Backbone);(function(app,Backbone,jQuery,moment){"use strict";var $=jQuery;app.charts={render:function(el,options){var $el=$("#chart");var url=$el.attr("data-api-url");var title=$(el).attr("data-title");var $spark=$el.find(".sparkline");$spark.height($el.height());$.ajax({url:$el.attr("data-api-url"),type:"get",dataType:"json",data:{since:(new Date).getTime()/1e3-3600*24,resolution:"1h"},success:function(resp){var data=[],maxval=10;$spark.empty();$.each(resp,function(_,val){var date=new Date(val[0]*1e3);data.push({y:val[1],label:moment(date).fromNow()});if(val[1]>maxval){maxval=val[1]}});app.charts.createSparkline($spark,data,options)}})},createSparkline:function(el,points,options){var $el=$(el),existing=$el.children(),maxval=10,title,point,pct,child,point_width;if(options===undefined){options={}}for(var i=0;i<points.length;i++){point=points[i];if(typeof point==="number"){point=points[i]={y:point}}if(point.y>maxval){maxval=point.y}}point_width=app.utils.floatFormat(100/points.length,2)+"%";for(i=0;i<points.length;i++){point=points[i];pct=app.utils.floatFormat(point.y/maxval*99,2)+"%";title=point.y+" events";if(point.label){title=title+"<br>("+point.label+")"}if(existing.get(i)===undefined){$('<a style="width:'+point_width+';" rel="tooltip" title="'+title+'"><span style="height:'+pct+'">'+point.y+"</span></a>").tooltip({placement:options.placement||"bottom",html:true,container:"body"}).appendTo($el)}else{$(existing[i]).find("span").css("height",pct).text(point.y).attr("title",point.label||point.y)}}}}})(app,Backbone,jQuery,moment);(function(window,app,Backbone,jQuery,_,moment){"use strict";var $=jQuery;app.GroupView=Backbone.View.extend({tagName:"li",className:"group",template:_.template(app.templates.group),initialize:function(){Backbone.View.prototype.initialize.apply(this,arguments);_.bindAll(this,"updateCount","updateAllAnnotations","updateAnnotation","updateLastSeen","updateResolved","updateHasSeen","renderSparkline","updateBookmarked","render");this.model.on({"change:count":this.updateCount,"change:annotations":this.updateAllAnnotations,"change:lastSeen":this.updateLastSeen,"change:isBookmarked":this.updateBookmarked,"change:isResolved":this.updateResolved,"change:hasSeen":this.updateHasSeen,"change:historicalData":this.renderSparkline},this)},render:function(){var data=this.model.toJSON();data.projectUrl=app.config.urlPrefix+"/"+app.config.teamId+"/"+data.project.slug+"/";data.loggerUrl=data.projectUrl+"?logger="+data.logger;this.$el.html(this.template(data));this.$el.attr("data-id",this.model.id);this.$el.addClass(this.getLevelClassName());this.$el.find("a[data-action=resolve]").click(_.bind(function(e){e.preventDefault();if(this.model.get("isResolved")){this.unresolve()}else{this.resolve()}},this));this.$el.find("a[data-action=bookmark]").click(_.bind(function(e){e.preventDefault();this.bookmark()},this));this.updateLastSeen();this.renderSparkline();this.updateResolved();this.updateHasSeen();this.updateBookmarked()},updateBookmarked:function(){if(this.model.get("isBookmarked")){this.$el.find("a[data-action=bookmark]").addClass("checked")}else{this.$el.find("a[data-action=bookmark]").removeClass("checked")}},updateResolved:function(){if(this.model.get("isResolved")){this.$el.addClass("resolved")}else{this.$el.removeClass("resolved")}},updateHasSeen:function(){if(this.model.get("hasSeen")){this.$el.addClass("seen")}else{this.$el.removeClass("seen")}},renderSparkline:function(obj){var data=this.model.get("historicalData");if(!data||!data.length)return;this.$el.addClass("with-sparkline");app.charts.createSparkline(this.$el.find(".sparkline"),data)},resolve:function(){$.ajax({url:this.getResolveUrl(),type:"post",dataType:"json",success:_.bind(function(response){this.model.set("version",response.version+5e3);this.model.set("isResolved",true)},this)})},unresolve:function(){$.ajax({url:this.getUnresolveUrl(),type:"post",dataType:"json",success:_.bind(function(response){this.model.set("version",response.version+5e3);this.model.set("isResolved",false)},this)})},getResolveUrl:function(){return app.config.urlPrefix+"/api/"+app.config.organizationId+"/"+app.config.projectId+"/group/"+this.model.get("id")+"/set/resolved/"},getUnresolveUrl:function(){return app.config.urlPrefix+"/api/"+app.config.organizationId+"/"+app.config.projectId+"/group/"+this.model.get("id")+"/set/unresolved/"},getBookmarkUrl:function(){return app.config.urlPrefix+"/api/"+app.config.organizationId+"/"+app.config.projectId+"/bookmark/"},bookmark:function(){$.ajax({url:this.getBookmarkUrl(),type:"post",dataType:"json",data:{gid:this.model.get("id")},success:_.bind(function(response){this.model.set("version",response.version);this.model.set("isBookmarked",response.isBookmarked)},this)})},getLevelClassName:function(){return"level-"+this.model.get("levelName")},updateLastSeen:function(){var dt=moment(this.model.get("lastSeen"));this.$el.find(".last-seen").text(dt.fromNow()).data("datetime",this.model.get("lastSeen")).attr("title",dt.format("llll"))},updateCount:function(){var new_count=app.utils.formatNumber(this.model.get("count"));var counter=this.$el.find(".count");var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")},updateAnnotation:function(annotation){var value=annotation.count;if(value===null)return;var new_count=app.utils.formatNumber(value);var counter=this.$el.find('.annotation[data-tag="'+annotation.label+'"]');var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")},updateAllAnnotations:function(){var self=this;$.each(this.model.get("annotations"),function(index,annotation){self.updateAnnotation(annotation)})}});app.OrderedElementsView=Backbone.View.extend({emptyMessage:'<div class="empty-message"><h2>No events to show.</h2><p>We\'ll notify you if that changes. In the meantime why not take a moment to become more familiar with Sentry.</p><p class="links"><a href="docs/">Installation instructions</a> <a href="settings/">Project settings</a></p></div>',loadingMessage:"<p>Loading...</p>",model:app.models.Group,defaults:{maxItems:50,view:Backbone.View},initialize:function(data){if(_.isUndefined(data))data={};var members=data.members;Backbone.View.prototype.initialize.apply(this,arguments);this.options=$.extend({},this.defaults,this.options,data);this.$wrapper=$("#"+this.id);this.$parent=$("<ul></ul>");this.$empty=$('<li class="empty"></li>');this.$wrapper.html(this.$parent);if(this.options.className)this.$parent.addClass(this.options.className);_.bindAll(this,"renderMemberInContainer","unrenderMember","reSortMembers");this.collection=new app.ScoredList([],{model:data.model});this.collection.on("add",this.renderMemberInContainer,this);this.collection.on("remove",this.unrenderMember,this);this.collection.on("reset",this.reSortMembers,this);delete data.members;this.reset(members)},reset:function(members){this.$parent.empty();this.setEmpty();if(members===undefined){this.$empty.html(this.loadingMessage);this.collection.reset();this.setEmpty();this.loaded=false}else{this.$empty.html(this.emptyMessage);this.collection.reset(members);this.loaded=true}},setEmpty:function(){this.$parent.html(this.$empty)},extend:function(data){for(var i=0;i<data.length;i++){this.addMember(data[i])}},addMember:function(member){var existing=this.collection.get(member.id);function getAttr(x){if(typeof member.get==="function"){return member.get(x)}else{return member[x]}}if(!existing){if(this.collection.length>=this.options.maxItems){if(getAttr("score")<this.collection.last().get("score"))return;while(this.collection.length>=this.options.maxItems)this.collection.pop()}}else if(existing.get("version")>=(getAttr("version")||0)){return}this.collection.add(member,{merge:true})},reSortMembers:function(){this.collection.each(_.bind(function(member){this.renderMemberInContainer(member)},this))},updateMember:function(member,options){if(_.isUndefined(options))options={};var existing=this.collection.get(member.id);if(existing.get("version")>=member.get("version"))return;this.collection.add(member,{merge:true,sort:options.sort!==false?true:false})},hasMember:function(member){return this.collection.get(member.id)?true:false},removeMember:function(member){this.collection.remove(member)},renderMemberInContainer:function(member){var new_pos=this.collection.indexOf(member),$el,$rel;this.$parent.find("li.empty").remove();$el=$("#"+this.id+member.id);if(!$el.length){$el=this.renderMember(member)}else if($el.index()===new_pos){return}if(new_pos===0){this.$parent.prepend($el)}else{$rel=$("#"+this.id+this.collection.at(new_pos).id);if(!$rel.length){this.$parent.append($el)}else if($el.id!==$rel.id){$el.insertBefore($rel)}else{return}}if(this.loaded)$el.css("background-color","#eee").animate({backgroundColor:"#fff"},300)},renderMember:function(member){var view=new this.options.view({model:member,id:this.id+member.id});view.render();return view.$el},unrenderMember:function(member){this.$parent.find("#"+this.id+member.id).remove();if(!this.$parent.find("li").length)this.setEmpty()}});app.GroupListView=app.OrderedElementsView.extend({defaults:{realtime:false,stream:false,pollUrl:null,pollTime:1e3,tickTime:100},initialize:function(data){if(_.isUndefined(data))data={};data.model=app.models.Group;data.view=app.GroupView;app.OrderedElementsView.prototype.initialize.call(this,data);this.options=$.extend({},this.defaults,this.options,data);this.queue=new app.ScoredList([],{model:data.model});this.cursor=null;_.bindAll(this,"poll","pollSuccess","pollFailure","tick");this.poll();window.setInterval(this.tick,this.options.tickTime)},tick:function(){if(!this.queue.length)return;var item=this.queue.pop();if(this.options.canStream){this.addMember(item)}else if(this.hasMember(item)){this.updateMember(item,{sort:false})}},pollSuccess:function(groups){if(!groups.length)return window.setTimeout(this.poll,this.options.pollTime*5);this.cursor=groups[groups.length-1].score;this.queue.add(groups,{merge:true});window.setTimeout(this.poll,this.options.pollTime)},pollFailure:function(jqXHR,textStatus,errorThrown){window.setTimeout(this.poll,this.options.pollTime*10)},poll:function(){var data;if(!this.options.realtime||!this.options.pollUrl)return window.setTimeout(this.poll,this.options.pollTime);data=app.utils.getQueryParams();data.cursor=this.cursor||undefined;$.ajax({url:this.options.pollUrl,type:"GET",dataType:"json",data:data,success:this.pollSuccess,error:this.pollFailure})}})})(window,app,Backbone,jQuery,_,moment);(function(window,app,Backbone,jQuery,_){"use strict";var $=jQuery;var BasePage=Backbone.View.extend({defaults:{canStream:false,realtime:false},initialize:function(data){Backbone.View.prototype.initialize.apply(this,arguments);if(_.isUndefined(data))data={};this.options=$.extend({},this.defaults,this.options,data);this.views={};this.initializeAjaxTabs()},initializeAjaxTabs:function(){$("a[data-toggle=ajtab]").click(_.bind(function(e){var $tab=$(e.target),uri=$tab.attr("data-uri"),view_id=$tab.attr("href").substr(1),view=this.getView(view_id,uri),$cont,$parent;e.preventDefault();if(!uri)return view.reset();$cont=$("#"+view_id);$parent=$cont.parent();$parent.css("opacity",.6);$.ajax({url:uri,dataType:"json",success:function(data){view.reset(data);$parent.css("opacity",1);$tab.tab("show")},error:function(){$cont.html("<p>There was an error fetching data from the server.</p>")}})},this));$("li.active a[data-toggle=ajtab]").click()},makeDefaultView:function(id){return new app.GroupListView({className:"group-list small",id:id,maxItems:5,stream:this.options.stream,realtime:this.options.realtime,model:app.models.Group})},getView:function(id,uri){if(!this.views[id])this.views[id]=this.makeDefaultView(id);var view=this.views[id];view.options.pollUrl=uri;return view}});app.StreamPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);this.group_list=new app.GroupListView({className:"group-list",id:"event_list",members:data.groups,maxItems:50,realtime:$.cookie("pausestream")?false:true,canStream:this.options.canStream,pollUrl:app.config.urlPrefix+"/api/"+app.config.organizationId+"/"+app.config.projectId+"/poll/",model:app.models.Group});this.control=$("a[data-action=pause]");this.updateStreamOptions();this.initFilters();this.control.click(_.bind(function(e){e.preventDefault();this.options.realtime=this.group_list.options.realtime=this.control.hasClass("realtime-pause");this.updateStreamOptions()},this));$("#chart").height("50px");app.charts.render("#chart",{placement:"left"})},initFilters:function(){$(".filter").each(_.bind(function(_,el){var $filter=$(el);var $input=$filter.find("input[type=text]");if($input.length>0){$input.select2({initSelection:function(el,callback){var $el=$(el);callback({id:$el.val(),text:$el.val()})},allowClear:true,minimumInputLength:3,ajax:{url:app.utils.getSearchTagsUrl(),dataType:"json",data:function(term,page){return{query:term,quietMillis:300,name:$input.attr("name"),limit:10}},results:function(data,page){var results=[];$(data.results).each(function(_,val){results.push({id:app.utils.escape(val),text:app.utils.escape(val)})});return{results:results}}}})}else{$input=$filter.find("select").select2({allowClear:true})}if($input.length>0){$input.on("change",function(e){var query=app.utils.getQueryParams();query[e.target.name]=e.val;window.location.href="?"+$.param(query)})}},this))},updateStreamOptions:function(){if(this.options.realtime){$.removeCookie("pausestream");this.control.removeClass("realtime-pause");this.control.addClass("realtime-play");this.control.html(this.control.attr("data-pause-label"))}else{$.cookie("pausestream","1",{expires:7});this.control.addClass("realtime-pause");this.control.removeClass("realtime-play");this.control.html(this.control.attr("data-play-label"))}}});app.DashboardPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);$("#chart").height("150px");Sentry.charts.render("#chart")}});app.SelectTeamPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);this.refreshSparklines();$(window).on("resize",this.refreshSparklines)},refreshSparklines:function(){$(".chart").each(function(n,el){var $el=$(el);$.ajax({url:$el.attr("data-api-url"),type:"get",dataType:"json",data:{since:(new Date).getTime()/1e3-3600*24,resolution:"1h"},success:_.bind(function(data){for(var i=0;i<data.length;i++){data[i][0]=data[i][0]*1e3}$.plot($el,[{data:data,color:"#ebeff3",shadowSize:0,lines:{lineWidth:2,show:true,fill:true,color:"#f6f8fa"}}],{yaxis:{min:0},grid:{show:false},hoverable:false,legend:{noColumns:5},lines:{show:false}})},this)})})}});app.GroupDetailsPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);this.group_list=new app.GroupListView({className:"group-list",id:"event_list",members:[data.group],model:app.models.Group});$("#chart").height("150px");Sentry.charts.render("#chart");$(".share-link").popover({html:true,placement:"left",container:document.body,title:"Share Event",content:function(){var $this=$(this);var $content=$('<form class="share-form"></form>');var $urlel=$('<code class="clippy">'+$this.data("share-url")+"</code>");$urlel.clippy({clippy_path:app.config.clippyPath,keep_text:true});$content.append($urlel);$content.append($('<label class="checkbox"><input type="checkbox"> Allow anonymous users to view this event.</label>'));$content.find("input[type=checkbox]").change(function(){var url=$this.data($(this).is(":checked")?"public-url":"private-url");$.ajax({url:url,type:"post",success:function(group){$this.data("public",group.isPublic?"true":"false")},error:function(){window.alert("There was an error changing the public status")}})}).attr("checked",$this.data("public")=="true");return $content}});$(".add-note-btn").click(function(e){var $el=$(this),$form=$(".add-note-form",$el.parent());e.preventDefault();if($el.hasClass("selected")){$el.removeClass("selected");$form.addClass("hide")}else{$el.addClass("selected");$form.removeClass("hide");$form.find("textarea:first").focus()}});$(".add-note-form").submit(function(el){var $this=$(this);$this.find("button[type=submit]").attr("disabled",true).addClass("disabled");$this.find("textarea").addClass("disabled")});$(".tag-widget").each(function(){var $widget=$(this);$.ajax({url:$widget.data("url"),error:function(){$widget.find(".loading").remove();$widget.append($('<li class="error">Unable to load tag information</li>'))},success:function(data){var total=data.total,eTagName=encodeURIComponent(data.name);$widget.find(".loading").remove();if(total===0){$widget.append($("<li>No data available.</li>"))}else{$.each(data.values,function(_,item){var tagValue=item[0],timesSeen=item[1],percent=parseInt(timesSeen/total*100,10),url=app.config.urlPrefix+"/"+app.config.teamId+"/"+app.config.projectId+"/";$("<li>"+'<div class="progressbar">'+'<div style="width:'+percent+'%">'+timesSeen+"</div>"+'<a href="'+url+"?"+eTagName+"="+encodeURIComponent(tagValue)+'">'+tagValue+"<span>"+percent+"%</span>"+"</a>"+"</div>"+"</li>").appendTo($widget)})}}})});var $event_nav=$("#event_nav");if($event_nav.length>0){var $window=$(window);var $nav_links=$event_nav.find("a[href*=#]");var $nav_targets=[];var scroll_offset=$event_nav.offset().top;var event_nav_height;var last_target;$window.resize(function(){event_nav_height=$event_nav.find(".nav").outerHeight();$event_nav.height(event_nav_height+"px")}).resize();$nav_links.click(function(e){var $el=$(this);var target=$(this.hash);$el.parent().addClass("active").siblings().removeClass("active");$("html,body").animate({scrollTop:target.position().top+event_nav_height},"fast");if(history.pushState){history.pushState({},"",this.hash)}e.preventDefault()}).each(function(){if(this.hash.length>1&&$(this.hash).length){$nav_targets.push(this.hash)}});var resizeTimer;$window.scroll(function(){clearTimeout(resizeTimer);resizeTimer=setTimeout(function(){if($window.scrollTop()>scroll_offset){if(!$event_nav.hasClass("fixed")){$event_nav.addClass("fixed")}}else if($event_nav.hasClass("fixed")){$event_nav.removeClass("fixed")}if($nav_targets.length){var from_top=$window.scrollTop()+event_nav_height+20;var cur=$.map($nav_targets,function(hash){if($(hash).offset().top<from_top){return hash}});var target=cur?cur[cur.length-1]:null;if(!target){target=$nav_targets[0]}if(last_target!==target){last_target=target;$nav_links.parent().removeClass("active").end().filter("[href="+target+"]").parent().addClass("active")}}},1)}).scroll()}}});app.WallPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,{realtime:true,pollTime:3e3});this.sparkline=$(".chart");this.sparkline.height(this.sparkline.parent().height());this.stats=$("#stats");_.bindAll(this,"refreshStats","refreshSparkline");this.refreshSparkline();this.refreshStats()},makeDefaultView:function(id){return new app.GroupListView({className:"group-list",id:id,maxItems:5,stream:this.options.stream,realtime:this.options.realtime,model:app.models.Group})},refreshSparkline:function(){$.ajax({url:this.sparkline.attr("data-api-url"),type:"get",dataType:"json",data:{since:(new Date).getTime()/1e3-3600*24,resolution:"1h"},success:_.bind(function(data){for(var i=0;i<data.length;i++){data[i][0]=data[i][0]*1e3}this.sparkline.empty();$.plot(this.sparkline,[{data:data,color:"#52566c",shadowSize:0,lines:{lineWidth:2,show:true,fill:true,fillColor:"#232428"}}],{yaxis:{min:0},grid:{show:false},hoverable:false,legend:{noColumns:5},lines:{show:false}});window.setTimeout(this.refreshSparkline,1e4)},this)})},refreshStats:function(){$.ajax({url:this.stats.attr("data-uri"),dataType:"json",success:_.bind(function(data){this.stats.find("[data-stat]").each(function(){var $this=$(this);var new_count=data[$this.attr("data-stat")];var counter=$this.find("big");var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")});window.setTimeout(this.refreshStats,1e3)},this)})}});app.AccessGroupMembersPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=user]")}});app.TeamDetailsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=owner]")}});app.ProjectDetailsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=owner]");$("input[type=range]").each(_.bind(function loop(n,el){var $el=$(el),min=parseInt($el.attr("min"),10),max=parseInt($el.attr("max"),10),step=parseInt($el.attr("step"),10),values=[],$value=$('<span class="value"></span>');var i=min;while(i<=max){values.push(i);if(i<12){i+=1}else if(i<24){i+=3}else if(i<36){i+=6}else if(i<48){i+=12}else{i+=24}}$el.on("slider:ready",_.bind(function sliderready(event,data){$value.appendTo(data.el);$value.html(this.formatHours(data.value))},this)).on("slider:changed",_.bind(function sliderchanged(event,data){$value.html(this.formatHours(data.value))},this)).simpleSlider({range:[min,max],step:step,allowedValues:values,snap:true})},this))},formatHours:function formatHours(val){val=parseInt(val,10);if(val===0){return"Disabled"}else if(val>23&&val%24===0){val=val/24;return val+" day"+(val!=1?"s":"")}return val+" hour"+(val!=1?"s":"")}});app.ProjectNotificationsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);$("input[type=range]").each(_.bind(function loop(n,el){var $el=$(el),min=parseInt($el.attr("min"),10),max=parseInt($el.attr("max"),10),step=parseInt($el.attr("step"),10),$value=$('<span class="value"></span>');$el.on("slider:ready",_.bind(function sliderready(event,data){$value.appendTo(data.el);$value.html(this.formatThreshold(data.value))},this)).on("slider:changed",_.bind(function sliderchanged(event,data){$value.html(this.formatThreshold(data.value))},this)).simpleSlider({range:[min,max],step:step,snap:true})},this))},formatThreshold:function formatThreshold(value){if(!value){return"Disabled"}return value+"%"}});app.NewProjectPage=BasePage.extend({initialize:function(data){this.el=$(data.el);BasePage.prototype.initialize.apply(this,arguments);if(this.options.canSelectTeam&&this.options.canCreateTeam){$("#new_team").hide();$('a[rel="create-new-team"]').click(function(){$("#new_team").show();$("#select_team").hide()});$('a[rel="select-team"]').click(function(){$("#new_team").hide();$("#select_team").show()})}}});app.NewProjectRulePage=BasePage.extend({initialize:function(data){var select2_options={width:"element",allowClear:false,minimumResultsForSearch:10};BasePage.prototype.initialize.apply(this,arguments);_.bindAll(this,"addAction","addCondition","parseFormData");this.actions_by_id={};this.conditions_by_id={};this.el=$(data.el);this.action_sel=this.el.find('select[id="action-select"]');this.action_table=this.el.find("table.action-list");this.action_table_body=this.action_table.find("tbody");this.condition_sel=this.el.find('select[id="condition-select"]');this.condition_table=this.el.find("table.condition-list");this.condition_table_body=this.condition_table.find("tbody");this.action_sel.empty();this.action_sel.append($("<option></option>"));$.each(data.actions,_.bind(function(_,action){var opt=$("<option></option>");opt.attr({value:action.id});opt.text(action.label);opt.appendTo(this.action_sel);this.actions_by_id[action.id]=action},this));this.condition_sel.empty();this.condition_sel.append($("<option></option>"));$.each(data.conditions,_.bind(function(_,condition){var opt=$("<option></option>");opt.attr({value:condition.id});opt.text(condition.label);opt.appendTo(this.condition_sel);this.conditions_by_id[condition.id]=condition},this));this.action_sel.select2(select2_options);this.condition_sel.select2(select2_options);this.action_sel.change(_.bind(function(){this.addAction(this.action_sel.val())},this));this.condition_sel.change(_.bind(function(){this.addCondition(this.condition_sel.val())},this));this.parseFormData(data.form_data,data.form_errors)},parseFormData:function(form_data,form_errors){var data={action:{},action_match:form_data.action_match||"all",condition:{},label:form_data.label||""};form_errors=form_errors||{};$.each(form_data,function(key,value){var matches=key.match(/^(condition|action)\[(\d+)\]\[(.+)\]$/);var type,num;if(!matches){return}type=matches[1];num=matches[2];if(data[type][num]===undefined){data[type][num]={}}data[type][num][matches[3]]=value});this.el.find("input[name=label]").val(data.label);this.el.find('select[name="action_match"]').val(data.action_match);$.each(_.sortBy(data.condition),_.bind(function(num,item){this.addCondition(item.id,item,form_errors["condition["+num+"]"]||false)},this));$.each(_.sortBy(data.action),_.bind(function(num,item){this.addAction(item.id,item,form_errors["action["+num+"]"]||false)},this))},addCondition:function(id,options,has_errors){var node=this.conditions_by_id[id],row=$("<tr></tr>"),remove_btn=$('<button class="btn btn-small">Remove</button>'),num=this.condition_table_body.find("tr").length,html=$("<div>"+node.html+"</div>"),prefix="condition["+num+"]",id_field=$('<input type="hidden" name="'+prefix+'[id]" value="'+node.id+'">');has_errors=has_errors||false;options=options||{};if(has_errors){row.addClass("error")}html.find("select").each(function(){var $this=$(this),options={width:"element",allowClear:false,minimumResultsForSearch:10};if($this.attr("data-allowClear")){options.allowClear=$this.attr("data-allowClear")}$this.select2(options)});html.find("input, select, textarea").each(function(_,el){var $el=$(el),name=$el.attr("name");$el.attr("name",prefix+"["+name+"]");$el.val(options[name]||"")});row.append($("<td></td>").append(html).append(id_field));row.append($("<td></td>").append(remove_btn));row.appendTo(this.condition_table_body);
 remove_btn.click(function(){row.remove();return false});this.condition_sel.data("select2").clear();this.condition_table.show()},addAction:function(id,options,has_errors){var node=this.actions_by_id[id],row=$("<tr></tr>"),remove_btn=$('<button class="btn btn-small">Remove</button>'),num=this.action_table_body.find("tr").length,html=$("<div>"+node.html+"</div>"),prefix="action["+num+"]",id_field=$('<input type="hidden" name="'+prefix+'[id]" value="'+node.id+'">');has_errors=has_errors||false;options=options||{};if(has_errors){row.addClass("error")}html.find("select").each(function(){var $this=$(this),options={width:"element",allowClear:false,minimumResultsForSearch:10};if($this.attr("data-allowClear")){options.allowClear=$this.attr("data-allowClear")}$this.select2(options)});html.find("input, select, textarea").each(function(_,el){var $el=$(el),name=$el.attr("name");$el.attr("name",prefix+"["+name+"]");$el.val(options[name]||"")});row.append($("<td></td>").append(html).append(id_field));row.append($("<td></td>").append(remove_btn));row.appendTo(this.action_table_body);remove_btn.click(function(){row.remove();return false});this.action_sel.data("select2").clear();this.action_table.show()}});Backbone.sync=function(method,model,success,error){success()}})(window,app,Backbone,jQuery,_);
 //@ sourceMappingURL=global.min.map.js
\ No newline at end of file
diff --git a/src/sentry/static/sentry/scripts/legacy.min.js b/src/sentry/static/sentry/scripts/legacy.min.js
index f6f40cbc15..887f8781c2 100644
--- a/src/sentry/static/sentry/scripts/legacy.min.js
+++ b/src/sentry/static/sentry/scripts/legacy.min.js
@@ -1,2 +1,2 @@
-if(Sentry===undefined){var Sentry={}}(function(app,jQuery){"use strict";var $=jQuery;$(document).ajaxSend(function(event,xhr,settings){function getCookie(name){var cookieValue=null;if(document.cookie&&document.cookie!==""){var cookies=document.cookie.split(";");for(var i=0;i<cookies.length;i++){var cookie=jQuery.trim(cookies[i]);if(cookie.substring(0,name.length+1)==name+"="){cookieValue=decodeURIComponent(cookie.substring(name.length+1));break}}}return cookieValue}function sameOrigin(url){var host=document.location.host;var protocol=document.location.protocol;var sr_origin="//"+host;var origin=protocol+sr_origin;return url==origin||url.slice(0,origin.length+1)==origin+"/"||url==sr_origin||url.slice(0,sr_origin.length+1)==sr_origin+"/"||!/^(\/\/|http:|https:).*/.test(url)}function safeMethod(method){return/^(GET|HEAD|OPTIONS|TRACE)$/.test(method)}if(!safeMethod(settings.type)&&sameOrigin(settings.url)){xhr.setRequestHeader("X-CSRFToken",getCookie("csrftoken"))}});$(function(){$(".popup").on("click",function(){var $this=$(this);var $window=$(window);var $container=$($this.attr("data-container"));var title=$this.attr("data-title")||"Untitled";var content=$container.html();var height=Math.min($window.height()-100,$container.height()+40);var width=Math.min($window.width()-100,$container.width()+40);var w=window.open("about:blank","dsqApiExpand","toolbar=0,status=0,location=0,menubar=0,height="+height+",width="+width);w.document.write("<!DOCTYPE html><html>"+"<head>"+"<title>"+title+"</title>"+'<link href="'+app.config.popupCss+'" rel="stylesheet" type="text/css"/>'+"</head><body>"+'<div id="popup">'+content+"</div></body>"+"</html>")})})})(app,jQuery);if(Sentry===undefined){var Sentry={}}(function(jQuery,moment){"use strict";var $=jQuery;var average=function(a){var r={mean:0,variance:0,deviation:0},t=a.length;for(var m,s=0,l=t;l--;s+=a[l]);for(m=r.mean=s/t,l=t,s=0;l--;s+=Math.pow(a[l]-m,2));r.deviation=Math.sqrt(r.variance=s/t);return r};var percentile=function(a,nth){a=a.sort();a.slice(0,a.length-Math.floor(nth/a.length));return average(a)};var timeUnitSize={second:1e3,minute:60*1e3,hour:60*60*1e3,day:24*60*60*1e3,month:30*24*60*60*1e3,quarter:3*30*24*60*60*1e3,year:365.2425*24*60*60*1e3};var tickFormatter=function(value,axis){var d=moment(value);var t=axis.tickSize[0]*timeUnitSize[axis.tickSize[1]];var span=axis.max-axis.min;var fmt;if(t<timeUnitSize.minute){fmt="LT"}else if(t<timeUnitSize.day){fmt="LT";if(span<2*timeUnitSize.day){fmt="LT"}else{fmt="MMM D LT"}}else if(t<timeUnitSize.month){fmt="MMM D"}else if(t<timeUnitSize.year){if(span<timeUnitSize.year){fmt="MMM"}else{fmt="MMM YY"}}else{fmt="YY"}return d.format(fmt)};Sentry.charts={};Sentry.charts.render=function(el){var $sparkline=$(el);if($sparkline.length<1){return}$.ajax({url:$sparkline.attr("data-api-url"),type:"get",dataType:"json",data:{since:(new Date).getTime()/1e3-3600*24*7,resolution:"1h"},success:function(data){var inputs=[],avg,i,data_avg=[],p_95th;for(i=0;i<data.length;i++){inputs.push(data[i][1]);data[i][0]=data[i][0]*1e3}p_95th=percentile(inputs);for(i=0;i<data.length;i++){data_avg.push([data[i][0],p_95th.mean])}var points=[{data:data,color:"rgba(86, 175, 232, 1)",shadowSize:0,lines:{lineWidth:2,show:true,fill:false}},{data:data_avg,color:"rgba(244, 63, 32, .4)",shadowSize:0,dashes:{lineWidth:2,show:true,fill:false}}];var options={xaxis:{mode:"time",tickFormatter:tickFormatter},yaxis:{min:0,tickFormatter:function(value){if(value>999999){return value/1e6+"mm"}if(value>999){return value/1e3+"k"}return value}},tooltip:true,tooltipOpts:{content:function(label,xval,yval,flotItem){if(typeof yval.toLocaleString=="function"){return yval.toLocaleString()+" events<br>"+moment(xval).format("llll")}return yval+" events<br>"+moment(xval).format("llll")},defaultTheme:false},grid:{show:true,hoverable:true,backgroundColor:"#ffffff",borderColor:"#DEE3E9",borderWidth:2,tickColor:"#DEE3E9"},hoverable:false,legend:{noColumns:5},lines:{show:false}};$.plot($sparkline,points,options);$(window).resize(function(){$.plot($sparkline,points,options)})}})}})(jQuery,moment);if(Sentry===undefined){var Sentry={}}(function(app,jQuery){"use strict";var $=jQuery;Sentry.stream={};Sentry.stream.clear=function(){if(window.confirm("Are you sure you want to mark all your stream as resolved?")){$.ajax({url:app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/clear/",type:"post",dataType:"json",success:function(groups){window.location.reload()}})}};Sentry.stream.resolve=function(gid,remove){if(typeof remove=="undefined"){remove=true}$.ajax({url:app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/resolve/",type:"post",dataType:"json",data:{gid:gid},success:function(groups){for(var i=groups.length-1,data,row;data=groups[i];i--){$('.event[data-group="'+data.id+'"]').remove();if(!remove){$("#event_list").prepend(data.html);$('.event[data-group="'+data.id+'"]').addClass("fresh")}}}})};Sentry.stream.bookmark=function(project_id,gid,el){$.ajax({url:app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/bookmark/",type:"post",dataType:"json",data:{gid:gid},success:function(data){if(!el){return}var $el=$(el);if(data.bookmarked){$el.addClass("checked")}else{$el.removeClass("checked")}}})}})(app,jQuery);
-//@ sourceMappingURL=legacy.min.map.js
+if(Sentry===undefined){var Sentry={}}(function(app,jQuery){"use strict";var $=jQuery;$(document).ajaxSend(function(event,xhr,settings){function getCookie(name){var cookieValue=null;if(document.cookie&&document.cookie!==""){var cookies=document.cookie.split(";");for(var i=0;i<cookies.length;i++){var cookie=jQuery.trim(cookies[i]);if(cookie.substring(0,name.length+1)==name+"="){cookieValue=decodeURIComponent(cookie.substring(name.length+1));break}}}return cookieValue}function sameOrigin(url){var host=document.location.host;var protocol=document.location.protocol;var sr_origin="//"+host;var origin=protocol+sr_origin;return url==origin||url.slice(0,origin.length+1)==origin+"/"||url==sr_origin||url.slice(0,sr_origin.length+1)==sr_origin+"/"||!/^(\/\/|http:|https:).*/.test(url)}function safeMethod(method){return/^(GET|HEAD|OPTIONS|TRACE)$/.test(method)}if(!safeMethod(settings.type)&&sameOrigin(settings.url)){xhr.setRequestHeader("X-CSRFToken",getCookie("csrftoken"))}});$(function(){$(".popup").on("click",function(){var $this=$(this);var $window=$(window);var $container=$($this.attr("data-container"));var title=$this.attr("data-title")||"Untitled";var content=$container.html();var height=Math.min($window.height()-100,$container.height()+40);var width=Math.min($window.width()-100,$container.width()+40);var w=window.open("about:blank","dsqApiExpand","toolbar=0,status=0,location=0,menubar=0,height="+height+",width="+width);w.document.write("<!DOCTYPE html><html>"+"<head>"+"<title>"+title+"</title>"+'<link href="'+app.config.popupCss+'" rel="stylesheet" type="text/css"/>'+"</head><body>"+'<div id="popup">'+content+"</div></body>"+"</html>")})})})(app,jQuery);if(Sentry===undefined){var Sentry={}}(function(jQuery,moment){"use strict";var $=jQuery;var average=function(a){var r={mean:0,variance:0,deviation:0},t=a.length;for(var m,s=0,l=t;l--;s+=a[l]);for(m=r.mean=s/t,l=t,s=0;l--;s+=Math.pow(a[l]-m,2));r.deviation=Math.sqrt(r.variance=s/t);return r};var percentile=function(a,nth){a=a.sort();a.slice(0,a.length-Math.floor(nth/a.length));return average(a)};var timeUnitSize={second:1e3,minute:60*1e3,hour:60*60*1e3,day:24*60*60*1e3,month:30*24*60*60*1e3,quarter:3*30*24*60*60*1e3,year:365.2425*24*60*60*1e3};var tickFormatter=function(value,axis){var d=moment(value);var t=axis.tickSize[0]*timeUnitSize[axis.tickSize[1]];var span=axis.max-axis.min;var fmt;if(t<timeUnitSize.minute){fmt="LT"}else if(t<timeUnitSize.day){fmt="LT";if(span<2*timeUnitSize.day){fmt="LT"}else{fmt="MMM D LT"}}else if(t<timeUnitSize.month){fmt="MMM D"}else if(t<timeUnitSize.year){if(span<timeUnitSize.year){fmt="MMM"}else{fmt="MMM YY"}}else{fmt="YY"}return d.format(fmt)};Sentry.charts={};Sentry.charts.render=function(el){var $sparkline=$(el);if($sparkline.length<1){return}$.ajax({url:$sparkline.attr("data-api-url"),type:"get",dataType:"json",data:{since:(new Date).getTime()/1e3-3600*24*7,resolution:"1h"},success:function(data){var inputs=[],avg,i,data_avg=[],p_95th;for(i=0;i<data.length;i++){inputs.push(data[i][1]);data[i][0]=data[i][0]*1e3}p_95th=percentile(inputs);for(i=0;i<data.length;i++){data_avg.push([data[i][0],p_95th.mean])}var points=[{data:data,color:"rgba(86, 175, 232, 1)",shadowSize:0,lines:{lineWidth:2,show:true,fill:false}},{data:data_avg,color:"rgba(244, 63, 32, .4)",shadowSize:0,dashes:{lineWidth:2,show:true,fill:false}}];var options={xaxis:{mode:"time",tickFormatter:tickFormatter},yaxis:{min:0,tickFormatter:function(value){if(value>999999){return value/1e6+"mm"}if(value>999){return value/1e3+"k"}return value}},tooltip:true,tooltipOpts:{content:function(label,xval,yval,flotItem){if(typeof yval.toLocaleString=="function"){return yval.toLocaleString()+" events<br>"+moment(xval).format("llll")}return yval+" events<br>"+moment(xval).format("llll")},defaultTheme:false},grid:{show:true,hoverable:true,backgroundColor:"#ffffff",borderColor:"#DEE3E9",borderWidth:2,tickColor:"#DEE3E9"},hoverable:false,legend:{noColumns:5},lines:{show:false}};$.plot($sparkline,points,options);$(window).resize(function(){$.plot($sparkline,points,options)})}})}})(jQuery,moment);if(Sentry===undefined){var Sentry={}}(function(app,jQuery){"use strict";var $=jQuery;Sentry.stream={};Sentry.stream.clear=function(){if(window.confirm("Are you sure you want to mark all your stream as resolved?")){$.ajax({url:app.config.urlPrefix+"/api/"+app.config.organizationId+"/"+app.config.projectId+"/clear/",type:"post",dataType:"json",success:function(groups){window.location.reload()}})}};Sentry.stream.resolve=function(gid,remove){if(typeof remove=="undefined"){remove=true}$.ajax({url:app.config.urlPrefix+"/api/"+app.config.organizationId+"/"+app.config.projectId+"/resolve/",type:"post",dataType:"json",data:{gid:gid},success:function(groups){for(var i=groups.length-1,data,row;data=groups[i];i--){$('.event[data-group="'+data.id+'"]').remove();if(!remove){$("#event_list").prepend(data.html);$('.event[data-group="'+data.id+'"]').addClass("fresh")}}}})};Sentry.stream.bookmark=function(project_id,gid,el){$.ajax({url:app.config.urlPrefix+"/api/"+app.config.organizationId+"/"+app.config.projectId+"/bookmark/",type:"post",dataType:"json",data:{gid:gid},success:function(data){if(!el){return}var $el=$(el);if(data.bookmarked){$el.addClass("checked")}else{$el.removeClass("checked")}}})}})(app,jQuery);
+//@ sourceMappingURL=legacy.min.map.js
\ No newline at end of file
diff --git a/src/sentry/static/sentry/scripts/sentry.stream.js b/src/sentry/static/sentry/scripts/sentry.stream.js
index 4b9b0c59c1..957077f936 100644
--- a/src/sentry/static/sentry/scripts/sentry.stream.js
+++ b/src/sentry/static/sentry/scripts/sentry.stream.js
@@ -12,7 +12,7 @@ if (Sentry === undefined) {
     Sentry.stream.clear = function() {
         if (window.confirm("Are you sure you want to mark all your stream as resolved?")) {
             $.ajax({
-                url: app.config.urlPrefix + '/api/' + app.config.teamId + '/' + app.config.projectId + '/clear/',
+                url: app.config.urlPrefix + '/api/' + app.config.organizationId + '/' + app.config.projectId + '/clear/',
                 type: 'post',
                 dataType: 'json',
                 success: function(groups){
@@ -26,7 +26,7 @@ if (Sentry === undefined) {
             remove = true;
         }
         $.ajax({
-            url: app.config.urlPrefix + '/api/' + app.config.teamId + '/' + app.config.projectId + '/resolve/',
+            url: app.config.urlPrefix + '/api/' + app.config.organizationId + '/' + app.config.projectId + '/resolve/',
             type: 'post',
             dataType: 'json',
             data: {
@@ -45,7 +45,7 @@ if (Sentry === undefined) {
     };
     Sentry.stream.bookmark = function(project_id, gid, el){
         $.ajax({
-            url: app.config.urlPrefix + '/api/' + app.config.teamId + '/' + app.config.projectId + '/bookmark/',
+            url: app.config.urlPrefix + '/api/' + app.config.organizationId + '/' + app.config.projectId + '/bookmark/',
             type: 'post',
             dataType: 'json',
             data: {
diff --git a/src/sentry/static/sentry/scripts/utils.js b/src/sentry/static/sentry/scripts/utils.js
index 7a3ff0abbc..d24dea1ab3 100644
--- a/src/sentry/static/sentry/scripts/utils.js
+++ b/src/sentry/static/sentry/scripts/utils.js
@@ -87,15 +87,15 @@
         },
 
         getSearchUsersUrl: function(){
-            return app.config.urlPrefix + '/api/' + app.config.teamId + '/users/search/';
+            return app.config.urlPrefix + '/api/' + app.config.organizationId + '/users/search/';
         },
 
         getSearchProjectsUrl: function(){
-            return app.config.urlPrefix + '/api/' + app.config.teamId + '/projects/search/';
+            return app.config.urlPrefix + '/api/' + app.config.organizationId + '/projects/search/';
         },
 
         getSearchTagsUrl: function(){
-            return app.config.urlPrefix + '/api/' + app.config.teamId + '/' + app.config.projectId + '/tags/search/';
+            return app.config.urlPrefix + '/api/' + app.config.organizationId + '/' + app.config.projectId + '/tags/search/';
         },
 
         makeSearchableInput: function(el, url, callback, options) {
diff --git a/src/sentry/static/sentry/scripts/views.js b/src/sentry/static/sentry/scripts/views.js
index 986078bb6d..b1c5407e9e 100644
--- a/src/sentry/static/sentry/scripts/views.js
+++ b/src/sentry/static/sentry/scripts/views.js
@@ -113,19 +113,19 @@
         },
 
         getResolveUrl: function(){
-            return app.config.urlPrefix + '/api/' + app.config.teamId + '/' +
+            return app.config.urlPrefix + '/api/' + app.config.organizationId + '/' +
                     app.config.projectId + '/group/' + this.model.get('id') +
                     '/set/resolved/';
         },
 
         getUnresolveUrl: function(){
-            return app.config.urlPrefix + '/api/' + app.config.teamId + '/' +
+            return app.config.urlPrefix + '/api/' + app.config.organizationId + '/' +
                     app.config.projectId + '/group/' + this.model.get('id') +
                     '/set/unresolved/';
         },
 
         getBookmarkUrl: function(){
-            return app.config.urlPrefix + '/api/' + app.config.teamId + '/' + app.config.projectId + '/bookmark/';
+            return app.config.urlPrefix + '/api/' + app.config.organizationId + '/' + app.config.projectId + '/bookmark/';
         },
 
         bookmark: function(){
diff --git a/src/sentry/templates/sentry/access-group-migration.html b/src/sentry/templates/sentry/access-group-migration.html
index e270ea9696..a415897bb9 100644
--- a/src/sentry/templates/sentry/access-group-migration.html
+++ b/src/sentry/templates/sentry/access-group-migration.html
@@ -7,7 +7,7 @@
 {% block inner %}
   <div class="page-header">
     <div class="pull-right">
-      <a href="{% url 'sentry-organization-home' organization.id %}">Back to Organization Home</a>
+      <a href="{% url 'sentry-organization-home' organization.slug %}">Back to Organization Home</a>
     </div>
     <h2>{% trans "Access Group Migration" %}</h2>
   </div>
diff --git a/src/sentry/templates/sentry/admin/teams/list.html b/src/sentry/templates/sentry/admin/teams/list.html
index cb19f3792c..70fa5d2c1e 100644
--- a/src/sentry/templates/sentry/admin/teams/list.html
+++ b/src/sentry/templates/sentry/admin/teams/list.html
@@ -41,8 +41,8 @@
                     {% for team in team_list.paginator.objects %}
                         <tr>
                             <td>
-                                <a href="{% url 'sentry-manage-team' team.slug %}"><strong>{{ team.slug }}</strong></a>
-                                <a href="{% url 'sentry' team.slug %}">[dashboard]</a><br/>
+                                <a href="{% url 'sentry-manage-team' team.organization.slug team.slug %}"><strong>{{ team.slug }}</strong></a>
+                                <a href="{% url 'sentry-team-dashboard' team.organization.slug team.slug %}">[dashboard]</a><br/>
                                 {% if team.owner %}
                                     <small>Owned by <a href="{% url 'sentry-admin-edit-user' team.owner.pk %}">
                                         {% if team.owner.email %}
diff --git a/src/sentry/templates/sentry/bases/organization.html b/src/sentry/templates/sentry/bases/organization.html
index 5e12a4cddf..d478e3e969 100644
--- a/src/sentry/templates/sentry/bases/organization.html
+++ b/src/sentry/templates/sentry/bases/organization.html
@@ -22,17 +22,17 @@
 
     <ul class="nav nav-tabs">
       <li class="{% block org_teams_nav %}{% endblock %}">
-        <a href="{% url 'sentry-organization-home' organization.id %}">
+        <a href="{% url 'sentry-organization-home' organization.slug %}">
           {% trans "Teams" %}
         </a>
       </li>
       <li class="{% block org_members_nav %}{% endblock %}">
-        <a href="{% url 'sentry-organization-members' organization.id %}">
+        <a href="{% url 'sentry-organization-members' organization.slug %}">
           {% trans "Members" %}
         </a>
       </li>
       <li class="{% block org_settings_nav %}{% endblock %}">
-        <a href="{% url 'sentry-organization-settings' organization.id %}">
+        <a href="{% url 'sentry-organization-settings' organization.slug %}">
           {% trans "Admin" %}
         </a>
       </li>
@@ -40,7 +40,7 @@
 
     {% if request.user|needs_access_group_migration:organization %}
       <div class="alert alert-block alert-info">
-        <p>You have access groups that need to be migrated into the new organization structure. <a href="{% url 'sentry-organization-access-group-migration' organization.id %}">Get Started</a></p>
+        <p>You have access groups that need to be migrated into the new organization structure. <a href="{% url 'sentry-organization-access-group-migration' organization.slug %}">Get Started</a></p>
       </div>
     {% endif %}
     {% block inner %}{% endblock %}
diff --git a/src/sentry/templates/sentry/bases/organization_settings.html b/src/sentry/templates/sentry/bases/organization_settings.html
index 3a5d9ebe51..ea8a6893c3 100644
--- a/src/sentry/templates/sentry/bases/organization_settings.html
+++ b/src/sentry/templates/sentry/bases/organization_settings.html
@@ -15,10 +15,10 @@
       <ul class="nav nav-list">
         <li class="nav-header">{% trans "Organization" %}</li>
         <li class="{% block org_sidebar_settings_nav %}{% endblock %}">
-          <a href="{% url 'sentry-organization-settings' organization.id %}">{% trans "Settings" %}</a>
+          <a href="{% url 'sentry-organization-settings' organization.slug %}">{% trans "Settings" %}</a>
         </li>
         <li class="{% block org_sidebar_remove_nav %}{% endblock %}">
-          <a href="{% url 'sentry-remove-organization' organization.id %}">{% trans "Remove Organization" %}</a>
+          <a href="{% url 'sentry-remove-organization' organization.slug %}">{% trans "Remove Organization" %}</a>
         </li>
         {% block org_sidebar_nav_extra %}
           {% comment %}This block is utilized by getsentry.com{% endcomment %}
diff --git a/src/sentry/templates/sentry/create-project.html b/src/sentry/templates/sentry/create-project.html
index 3e37105b26..e15d803466 100644
--- a/src/sentry/templates/sentry/create-project.html
+++ b/src/sentry/templates/sentry/create-project.html
@@ -7,7 +7,7 @@
 {% block inner %}
   <div class="page-header">
     <div class="pull-right">
-      <a href="{% url 'sentry-organization-home' organization.id %}">Back to Organization Home</a>
+      <a href="{% url 'sentry-organization-home' organization.slug %}">Back to Organization Home</a>
     </div>
     <h2>
       {% trans "Create a New Project" %}
diff --git a/src/sentry/templates/sentry/dashboard.html b/src/sentry/templates/sentry/dashboard.html
index 997ccc0eb8..bd64f73e5b 100644
--- a/src/sentry/templates/sentry/dashboard.html
+++ b/src/sentry/templates/sentry/dashboard.html
@@ -54,7 +54,7 @@
                         </div>
                     </div>
                 {% else %}
-                    {% url 'sentry-create-project' organization.id as link %}
+                    {% url 'sentry-create-project' organization.slug as link %}
                     <div class="alert alert-info">{% blocktrans %}You do not have access to any projects. Would you like to <a href="{{ link }}">create a new project</a>?{% endblocktrans %}</div>
                 {% endif %}
             </section>
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index 084a6ac3e9..f6f9a4348b 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -36,12 +36,15 @@
             {% if project %}
                 app.config.projectId = {{ project.slug|to_json|safe }};
                 app.config.teamId = {{ project.team.slug|to_json|safe }};
+                app.config.organizationId = {{ project.organization.slug|to_json|safe }};
             {% elif team %}
                 app.config.projectId = null;
                 app.config.teamId = {{ team.slug|to_json|safe }};
+                app.config.organizationId = {{ team.organization.slug|to_json|safe }};
             {% else %}
                 app.config.projectId = null;
                 app.config.teamId = null;
+                app.config.organizationId = null;
             {% endif %}
             </script>
         {% endblock %}
@@ -59,7 +62,7 @@
                     <div class="navbar-inner">
                         <div class="container">
                             {% if organization %}
-                                <a id="logo" href="{% url 'sentry-organization-home' organization.id %}">Sentry</a>
+                                <a id="logo" href="{% url 'sentry-organization-home' organization.slug %}">Sentry</a>
                             {% else %}
                                 <a id="logo" href="{% url 'sentry' %}">Sentry</a>
                             {% endif %}
@@ -78,11 +81,11 @@
                                     <nav class="dropdown-menu">
                                         <!-- <input type="text" value="search by project name"> <a href="#" class="btn">New</a> -->
                                         {% for t, p_list in TEAM_LIST %}
-                                            <h6><a href="{% url 'sentry' t.slug %}">{{ t.name }}</a></h6>
+                                            <h6><a href="{% url 'sentry-team-dashboard' organization.slug t.slug %}">{{ t.name }}</a></h6>
                                             <ul class="project-list">
                                                 {% for p in p_list %}
                                                     <li{% if p.id == project.id %} class="active"{% endif %}>
-                                                        <a href="{% url 'sentry-stream' t.slug p.slug %}" title="{{ p.name }}">{{ p.name }}</a>
+                                                        <a href="{% url 'sentry-stream' organization.slug p.slug %}" title="{{ p.name }}">{{ p.name }}</a>
                                                     </li>
                                                 {% endfor %}
                                             </ul>
@@ -148,7 +151,7 @@
                     {% block page_header %}
                         {% if team %}
                             <div class="dashboard-btn">
-                                <a href="{% url 'sentry' team.slug %}" title="{% trans "Dashboard" %}">
+                                <a href="{% url 'sentry-team-dashboard' organization.slug team.slug %}" title="{% trans "Dashboard" %}">
                                     <i aria-hidden="true" class="icon-list"></i>
                                 </a>
                             </div>
diff --git a/src/sentry/templates/sentry/organization-home.html b/src/sentry/templates/sentry/organization-home.html
index 412c51a8cd..73e7c352c3 100644
--- a/src/sentry/templates/sentry/organization-home.html
+++ b/src/sentry/templates/sentry/organization-home.html
@@ -5,15 +5,15 @@
 {% block org_teams_nav %}active{% endblock %}
 
 {% block actions %}
-  <a href="{% url 'sentry-create-team' organization.id %}"
+  <a href="{% url 'sentry-create-team' organization.slug %}"
      class="btn btn-small btn-primary">{% trans "New Team" %}</a>
-  <a href="{% url 'sentry-create-project' organization.id %}"
+  <a href="{% url 'sentry-create-project' organization.slug %}"
      class="btn btn-small btn-primary">{% trans "New Project" %}</a>
 {% endblock %}
 
 {% block inner %}
   {% if not team_list %}
-    <p>You don't have any teams for this organization yet. Get started by <a href="{% url 'sentry-create-team' organization.id %}">creating your first team</a>.</p>
+    <p>You don't have any teams for this organization yet. Get started by <a href="{% url 'sentry-create-team' organization.slug %}">creating your first team</a>.</p>
   {% else %}
     <ul class="team-list">
       {% for team, project_list in team_list %}
@@ -25,15 +25,15 @@
             </div>
           </div>
           <div class="pull-right actions">
-            <a href="{% url 'sentry-manage-team' team.slug %}">Team Settings</a>
+            <a href="{% url 'sentry-manage-team' organization.slug team.slug %}">Team Settings</a>
           </div>
-          <h3><a href="{% url 'sentry' team.slug %}">{{ team.name }}</a></h3>
+          <h3><a href="{% url 'sentry-team-dashboard' organization.slug team.slug %}">{{ team.name }}</a></h3>
           {% if not project_list %}
-            <p>There are no projects in this team. Would you like to <a href="{% url 'sentry-create-project' organization.id %}">create a project</a>?</p>
+            <p>There are no projects in this team. Would you like to <a href="{% url 'sentry-create-project' organization.slug %}">create a project</a>?</p>
           {% else %}
             <ul>
               {% for project in project_list %}
-                <li><a href="{% url 'sentry-stream' team.slug project.slug %}">{{ project.name }}</a></li>
+                <li><a href="{% url 'sentry-stream' organization.slug project.slug %}">{{ project.name }}</a></li>
               {% endfor %}
             </ul>
           {% endif %}
diff --git a/src/sentry/templates/sentry/organization-members.html b/src/sentry/templates/sentry/organization-members.html
index 550a729e1e..b23139bdc5 100644
--- a/src/sentry/templates/sentry/organization-members.html
+++ b/src/sentry/templates/sentry/organization-members.html
@@ -9,7 +9,7 @@
 {% block org_members_nav %}active{% endblock %}
 
 {% block actions %}
-  <a href="{% url 'sentry-create-organization-member' organization.id %}"
+  <a href="{% url 'sentry-create-organization-member' organization.slug %}"
      class="btn btn-small btn-primary">{% trans "New Member" %}</a>
 {% endblock %}
 
@@ -32,7 +32,7 @@
             <img class="avatar" src="{% gravatar_url member.get_email size 20 %}">
           </td>
           <td>
-            <a href="{% url 'sentry-organization-member-settings' organization.id member.id %}">
+            <a href="{% url 'sentry-organization-member-settings' organization.slug member.id %}">
               {{ member.get_display_name }}
             </a>
             {% if member.is_pending %}
diff --git a/src/sentry/templates/sentry/partial/interfaces/http.html b/src/sentry/templates/sentry/partial/interfaces/http.html
index 32d6ff99b2..4ddb547b64 100644
--- a/src/sentry/templates/sentry/partial/interfaces/http.html
+++ b/src/sentry/templates/sentry/partial/interfaces/http.html
@@ -5,7 +5,7 @@
     <div class="page-header">
         <a href="javascript:void(0)" data-container="#copy_as_curl" data-title="Copy as cURL" class="popup btn small pull-right" style="margin-left: 5px">{% trans "Copy as cURL" %}</a>
         {% if not is_public %}
-            <a href="{% url 'sentry-replay' event.team.slug event.project.slug event.group_id event.id %}" class="btn small pull-right">{% trans "Replay this request" %}</a>
+            <a href="{% url 'sentry-replay' event.organization.slug event.project.slug event.group_id event.id %}" class="btn small pull-right">{% trans "Replay this request" %}</a>
         {% endif %}
         <h2>{% trans "Request" %}</h2>
     </div>
diff --git a/src/sentry/templates/sentry/remove-organization.html b/src/sentry/templates/sentry/remove-organization.html
index fa5a884cde..ec455ae9e5 100644
--- a/src/sentry/templates/sentry/remove-organization.html
+++ b/src/sentry/templates/sentry/remove-organization.html
@@ -28,7 +28,7 @@
     {% endfor %}
 
     <fieldset class="form-actions">
-      <button type="submit" class="btn btn-danger">{% trans "Remove Organization" %}</button> <a href="{% url 'sentry-organization-settings' organization.id %}" class="btn">{% trans "Cancel" %}</a>
+      <button type="submit" class="btn btn-danger">{% trans "Remove Organization" %}</button> <a href="{% url 'sentry-organization-settings' organization.slug %}" class="btn">{% trans "Cancel" %}</a>
     </fieldset>
   </form>
 {% endblock %}
diff --git a/src/sentry/templates/sentry/teams/manage.html b/src/sentry/templates/sentry/teams/manage.html
index 7b0380ca0c..24f244dbe4 100644
--- a/src/sentry/templates/sentry/teams/manage.html
+++ b/src/sentry/templates/sentry/teams/manage.html
@@ -12,7 +12,7 @@
 {% block inner %}
   <div class="page-header">
     <div class="pull-right">
-      <a href="{% url 'sentry-organization-home' organization.id %}">Back to Organization Home</a>
+      <a href="{% url 'sentry-organization-home' organization.slug %}">Back to Organization Home</a>
     </div>
     <h2>
       Settings for {{ team.name }}
@@ -46,7 +46,7 @@
     <fieldset class="form-actions">
       <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
       {% if can_remove_team %}
-          <a href="{% url 'sentry-remove-team' team.slug %}" class="btn btn-danger">{% trans "Remove Team" %}</a>
+          <a href="{% url 'sentry-remove-team' organization.slug team.slug %}" class="btn btn-danger">{% trans "Remove Team" %}</a>
       {% else %}
           <div class="pull-right note">{% trans "You cannot remove this team because it has projects assigned to it" %}</div>
       {% endif %}
diff --git a/src/sentry/templates/sentry/teams/remove.html b/src/sentry/templates/sentry/teams/remove.html
index 35f0201d5e..cabd09b80c 100644
--- a/src/sentry/templates/sentry/teams/remove.html
+++ b/src/sentry/templates/sentry/teams/remove.html
@@ -8,7 +8,7 @@
 {% block inner %}
   <div class="page-header">
     <div class="pull-right">
-      <a href="{% url 'sentry-organization-home' organization.id %}">Back to Organization Home</a>
+      <a href="{% url 'sentry-organization-home' organization.slug %}">Back to Organization Home</a>
     </div>
     <h2>
       {% trans "Remove Team" %}
@@ -23,7 +23,8 @@
       {{ field|as_crispy_field }}
     {% endfor %}
     <fieldset class="form-actions">
-      <button type="submit" class="btn btn-danger">{% trans "Confirm" %}</button> <a href="{% url 'sentry-manage-team' team.slug %}" class="btn">{% trans "Cancel" %}</a>
+      <button type="submit" class="btn btn-danger">{% trans "Confirm" %}</button>
+      <a href="{% url 'sentry-manage-team' organization.slug team.slug %}" class="btn">{% trans "Cancel" %}</a>
     </fieldset>
   </form>
 {% endblock %}
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index fb392c5b08..71c991e3a4 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -35,8 +35,11 @@ class Fixtures(object):
 
     @fixture
     def organization(self):
+        # XXX(dcramer): ensure that your org slug doesnt match your team slug
+        # and the same for your project slug
         return self.create_organization(
-            name='foo',
+            name='baz',
+            slug='baz',
             owner=self.user)
 
     @fixture
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index f5b0f7e55f..052b9f9791 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -361,7 +361,7 @@ class StoreView(APIView):
         cache_key = 'ev:%s:%s' % (project.id, event_id,)
 
         if cache.get(cache_key) is not None:
-            logger.warning('Discarded recent duplicate event from project %s/%s (id=%s)', project.team.slug, project.slug, event_id)
+            logger.warning('Discarded recent duplicate event from project %s/%s (id=%s)', project.organization.slug, project.slug, event_id)
             raise InvalidRequest('An event with the same ID already exists.')
 
         # We filter data immediately before it ever gets into the queue
@@ -373,7 +373,7 @@ class StoreView(APIView):
 
         cache.set(cache_key, '', 60 * 5)
 
-        logger.debug('New event from project %s/%s (id=%s)', project.team.slug, project.slug, event_id)
+        logger.debug('New event from project %s/%s (id=%s)', project.organization.slug, project.slug, event_id)
 
         return event_id
 
@@ -382,7 +382,7 @@ class StoreView(APIView):
 @has_access
 @never_cache
 @api
-def poll(request, team, project):
+def poll(request, organization, project):
     offset = 0
     limit = EVENTS_PER_PAGE
 
@@ -401,7 +401,7 @@ def poll(request, team, project):
 @has_access(MEMBER_USER)
 @never_cache
 @api
-def resolve(request, team, project):
+def resolve(request, organization, project):
     gid = request.REQUEST.get('gid')
     if not gid:
         return HttpResponseForbidden()
@@ -437,7 +437,7 @@ def resolve(request, team, project):
 @has_access(MEMBER_USER)
 @never_cache
 @api
-def make_group_public(request, team, project, group_id):
+def make_group_public(request, organization, project, group_id):
     try:
         group = Group.objects.get(pk=group_id)
     except Group.DoesNotExist:
@@ -460,7 +460,7 @@ def make_group_public(request, team, project, group_id):
 @has_access(MEMBER_USER)
 @never_cache
 @api
-def make_group_private(request, team, project, group_id):
+def make_group_private(request, organization, project, group_id):
     try:
         group = Group.objects.get(pk=group_id)
     except Group.DoesNotExist:
@@ -483,7 +483,7 @@ def make_group_private(request, team, project, group_id):
 @has_access(MEMBER_USER)
 @never_cache
 @api
-def resolve_group(request, team, project, group_id):
+def resolve_group(request, organization, project, group_id):
     try:
         group = Group.objects.get(pk=group_id)
     except Group.DoesNotExist:
@@ -508,7 +508,7 @@ def resolve_group(request, team, project, group_id):
 @has_access(MEMBER_USER)
 @never_cache
 @api
-def mute_group(request, team, project, group_id):
+def mute_group(request, organization, project, group_id):
     try:
         group = Group.objects.get(pk=group_id)
     except Group.DoesNotExist:
@@ -533,7 +533,7 @@ def mute_group(request, team, project, group_id):
 @has_access(MEMBER_USER)
 @never_cache
 @api
-def unresolve_group(request, team, project, group_id):
+def unresolve_group(request, organization, project, group_id):
     try:
         group = Group.objects.get(pk=group_id)
     except Group.DoesNotExist:
@@ -557,7 +557,7 @@ def unresolve_group(request, team, project, group_id):
 @csrf_exempt
 @has_access(MEMBER_USER)
 @never_cache
-def remove_group(request, team, project, group_id):
+def remove_group(request, organization, project, group_id):
     from sentry.tasks.deletion import delete_group
 
     try:
@@ -573,7 +573,7 @@ def remove_group(request, team, project, group_id):
     else:
         messages.add_message(request, messages.SUCCESS,
             _('Deletion has been queued and should occur shortly.'))
-        response = HttpResponseRedirect(reverse('sentry-stream', args=[team.slug, project.slug]))
+        response = HttpResponseRedirect(reverse('sentry-stream', args=[organization.slug, project.slug]))
     return response
 
 
@@ -581,7 +581,7 @@ def remove_group(request, team, project, group_id):
 @has_access(MEMBER_USER)
 @never_cache
 @api
-def get_group_tags(request, team, project, group_id, tag_name):
+def get_group_tags(request, organization, project, group_id, tag_name):
     # XXX(dcramer): Consider this API deprecated as soon as it was implemented
     cutoff = timezone.now() - timedelta(days=7)
 
@@ -626,7 +626,7 @@ def get_group_tags(request, team, project, group_id, tag_name):
 @has_access
 @never_cache
 @api
-def bookmark(request, team, project):
+def bookmark(request, organization, project):
     gid = request.REQUEST.get('gid')
     if not gid:
         return HttpResponseForbidden()
@@ -653,7 +653,7 @@ def bookmark(request, team, project):
 @csrf_exempt
 @has_access(MEMBER_USER)
 @never_cache
-def clear(request, team, project):
+def clear(request, organization, project):
     queryset = Group.objects.filter(
         project=project,
         status=STATUS_UNRESOLVED,
@@ -679,7 +679,7 @@ def clear(request, team, project):
 @never_cache
 @csrf_exempt
 @has_access
-def get_group_trends(request, team=None, project=None):
+def get_group_trends(request, organization, team=None, project=None):
     minutes = int(request.REQUEST.get('minutes', 15))
     limit = min(100, int(request.REQUEST.get('limit', 10)))
 
@@ -717,7 +717,7 @@ def get_group_trends(request, team=None, project=None):
 @never_cache
 @csrf_exempt
 @has_access
-def get_new_groups(request, team=None, project=None):
+def get_new_groups(request, organization, team=None, project=None):
     minutes = int(request.REQUEST.get('minutes', 15))
     limit = min(100, int(request.REQUEST.get('limit', 10)))
 
@@ -751,7 +751,7 @@ def get_new_groups(request, team=None, project=None):
 @never_cache
 @csrf_exempt
 @has_access
-def get_resolved_groups(request, team=None, project=None):
+def get_resolved_groups(request, organization, team=None, project=None):
     minutes = int(request.REQUEST.get('minutes', 15))
     limit = min(100, int(request.REQUEST.get('limit', 10)))
 
@@ -785,7 +785,7 @@ def get_resolved_groups(request, team=None, project=None):
 @never_cache
 @csrf_exempt
 @has_access
-def get_stats(request, team=None, project=None):
+def get_stats(request, organization, team=None, project=None):
     minutes = int(request.REQUEST.get('minutes', 15))
 
     if not team and project:
@@ -832,7 +832,7 @@ def get_stats(request, team=None, project=None):
 @never_cache
 @csrf_exempt
 @has_access
-def search_tags(request, team, project):
+def search_tags(request, organization, project):
     limit = min(100, int(request.GET.get('limit', 10)))
     name = request.GET['name']
     query = request.GET['query']
@@ -855,14 +855,14 @@ def search_tags(request, team, project):
 @never_cache
 @csrf_exempt
 @has_access
-def search_users(request, team):
+def search_users(request, organization):
     limit = min(100, int(request.GET.get('limit', 10)))
     query = request.GET['query']
 
     results = list(User.objects.filter(
         Q(email__istartswith=query) | Q(first_name__istartswith=query) | Q(username__istartswith=query),
     ).filter(
-        sentry_orgmember_set__organization=team.organization,
+        sentry_orgmember_set__organization=organization,
     ).distinct().order_by('first_name', 'email').values('id', 'username', 'first_name', 'email')[:limit])
 
     response = HttpResponse(json.dumps({
@@ -877,13 +877,14 @@ def search_users(request, team):
 @never_cache
 @csrf_exempt
 @has_access
-def search_projects(request, team):
+def search_projects(request, organization):
     limit = min(100, int(request.GET.get('limit', 10)))
     query = request.GET['query']
 
     results = list(Project.objects.filter(
         Q(name__istartswith=query) | Q(slug__istartswith=query),
-    ).filter(team=team).distinct().order_by('name', 'slug').values('id', 'name', 'slug')[:limit])
+        organization=organization,
+    ).distinct().order_by('name', 'slug').values('id', 'name', 'slug')[:limit])
 
     response = HttpResponse(json.dumps({
         'results': results,
diff --git a/src/sentry/web/decorators.py b/src/sentry/web/decorators.py
index e6776cec29..43066b742d 100644
--- a/src/sentry/web/decorators.py
+++ b/src/sentry/web/decorators.py
@@ -1,5 +1,8 @@
 from __future__ import absolute_import
 
+import logging
+import warnings
+
 from functools import wraps
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect, HttpResponse
@@ -7,12 +10,12 @@ from django.shortcuts import get_object_or_404
 from sudo.decorators import sudo_required
 
 from sentry.constants import MEMBER_OWNER
-from sentry.models import Project, Team, Group
+from sentry.models import Organization, Project, Team, Group
 from sentry.web.helpers import (
     render_to_response, get_login_url)
 
 
-def has_access(access_or_func=None, team=None, access=None):
+def has_access(access_or_func=None, organization=None, access=None):
     """
     Tests and transforms project_id for permissions based on the requesting
     user. Passes the actual project instance to the decorated view.
@@ -28,12 +31,19 @@ def has_access(access_or_func=None, team=None, access=None):
     >>> def foo(request, project):
     >>>     return
     """
+    # TODO(dcramer): this code is far too hacky these days and should
+    # be replaced with class based views
+
     if callable(access_or_func):
         return has_access(None)(access_or_func)
 
     access = access_or_func
 
     def wrapped(func):
+        warnings.warn(
+            '%s.%s is used deprecated @has_access' % (func.__module__, func.__name__),
+            DeprecationWarning)
+
         @wraps(func)
         def _wrapped(request, *args, **kwargs):
             # All requests require authentication
@@ -41,92 +51,112 @@ def has_access(access_or_func=None, team=None, access=None):
                 request.session['_next'] = request.get_full_path()
                 return HttpResponseRedirect(get_login_url())
 
+            has_org = 'organization_slug' in kwargs
             has_team = 'team_slug' in kwargs
             has_project = 'project_id' in kwargs
 
+            organization_slug = kwargs.pop('organization_slug', None)
             team_slug = kwargs.pop('team_slug', None)
             project_id = kwargs.pop('project_id', None)
 
-            # Pull in team if it's part of the URL arguments
-            if team_slug:
-                try:
-                    team = Team.objects.get_from_cache(slug=team_slug)
-                except Team.DoesNotExist:
-                    return HttpResponseRedirect(reverse('sentry'))
+            assert not has_team or has_org, \
+                'Must pass organization_slug with team_slug'
 
+            if organization_slug:
                 if not request.user.is_superuser:
-                    team_list = Team.objects.get_for_user(
-                        organization=team.organization,
+                    org_list = Organization.objects.get_for_user(
                         user=request.user,
                         access=access,
                     )
 
-                    if team not in team_list:
-                        return HttpResponseRedirect(reverse('sentry'))
-            else:
-                team = None
-
-            if project_id:
-                # Support project id's
-                if request.user.is_superuser:
-                    if project_id.isdigit():
-                        lookup_kwargs = {'id': int(project_id)}
-                    elif team:
-                        lookup_kwargs = {'slug': project_id, 'team': team}
+                    for o in org_list:
+                        if o.slug == organization_slug:
+                            organization = o
+                            break
                     else:
+                        logging.debug('User %s is not listed in organization with slug %s', request.user.id, organization_slug)
                         return HttpResponseRedirect(reverse('sentry'))
 
-                    try:
-                        project = Project.objects.get_from_cache(**lookup_kwargs)
-                    except Project.DoesNotExist:
-                        if project_id.isdigit():
-                            # It could be a numerical slug
-                            try:
-                                project = Project.objects.get_from_cache(slug=project_id)
-                            except Project.DoesNotExist:
-                                return HttpResponseRedirect(reverse('sentry'))
-                        else:
-                            return HttpResponseRedirect(reverse('sentry'))
                 else:
-                    project_list = Project.objects.get_for_user(
-                        team=team,
+                    try:
+                        organization = Organization.objects.get_from_cache(
+                            slug=organization_slug,
+                        )
+                    except Organization.DoesNotExist:
+                        logging.debug('Organization with slug %s does not exist', organization_slug)
+                        return HttpResponseRedirect(reverse('sentry'))
+
+            else:
+                organization = None
+
+            if team_slug:
+                if not request.user.is_superuser:
+                    team_list = Team.objects.get_for_user(
                         user=request.user,
                         access=access,
+                        organization=organization,
                     )
 
-                    if project_id.isdigit():
-                        key = 'id'
-                        value = int(project_id)
-                    elif team:
-                        key = 'slug'
-                        value = project_id
+                    for t in team_list:
+                        if t.slug == team_slug:
+                            team = t
+                            break
                     else:
+                        logging.debug('User %s is not listed in team with slug %s', request.user.id, team_slug)
                         return HttpResponseRedirect(reverse('sentry'))
 
-                    for p in project_list:
-                        if getattr(p, key) == value:
-                            project = p
-                            break
+                else:
+                    try:
+                        team = Team.objects.get_from_cache(
+                            slug=team_slug,
+                            organization=organization,
+                        )
+                    except Team.DoesNotExist:
+                        logging.debug('Team with slug %s does not exist', team_slug)
+
+                        return HttpResponseRedirect(reverse('sentry'))
+
+            else:
+                team = None
+
+            if project_id:
+                # Support project id's
+                if project_id.isdigit():
+                    lookup_kwargs = {'id': int(project_id)}
+                elif organization:
+                    lookup_kwargs = {'slug': project_id, 'organization': organization}
+                else:
+                    return HttpResponseRedirect(reverse('sentry'))
+
+                try:
+                    project = Project.objects.get_from_cache(**lookup_kwargs)
+                except Project.DoesNotExist:
+                    if project_id.isdigit():
+                        # It could be a numerical slug
+                        try:
+                            project = Project.objects.get_from_cache(slug=project_id)
+                        except Project.DoesNotExist:
+                            return HttpResponseRedirect(reverse('sentry'))
                     else:
                         return HttpResponseRedirect(reverse('sentry'))
+
+                if not request.user.is_superuser and not project.has_access(request.user, access=access):
+                    return HttpResponseRedirect(reverse('sentry'))
             else:
                 project = None
 
             if has_project:
-                # ensure we're accessing this url correctly
-                if project and team:
-                    if project.team_id != team.id:
-                        return HttpResponseRedirect(reverse('sentry'))
-                    project._team_cache = team
-
                 kwargs['project'] = project
 
             if has_team:
                 kwargs['team'] = team
 
+            if has_org:
+                kwargs['organization'] = organization
+
             return func(request, *args, **kwargs)
 
-        if access is MEMBER_OWNER:
+        if access == MEMBER_OWNER:
             _wrapped = login_required(sudo_required(_wrapped))
         return _wrapped
     return wrapped
@@ -151,20 +181,18 @@ def has_group_access(func=None, **kwargs):
         prv_func = login_required(has_access(func))
 
         @wraps(func)
-        def wrapped(request, team_slug, project_id, group_id, *args, **kwargs):
+        def wrapped(request, organization_slug, project_id, group_id, *args, **kwargs):
             group = get_object_or_404(Group, pk=group_id)
 
             if project_id not in (group.project.slug, str(group.project.id)):
                 return HttpResponse(status=404)
-            if team_slug != group.team.slug:
-                return HttpResponse(status=404)
 
             if allow_public and (group.is_public or group.project.public):
-                team = Team.objects.get_from_cache(slug=team_slug)
-                group.project.team = team
-                return func(request, team=team, project=group.project, group=group, *args, **kwargs)
+                organization = Organization.objects.get_from_cache(slug=organization_slug)
+                group.project.organization = organization
+                return func(request, organization=organization, project=group.project, group=group, *args, **kwargs)
 
-            return prv_func(request, team_slug=team_slug, project_id=project_id, group=group, *args, **kwargs)
+            return prv_func(request, organization_slug=organization_slug, project_id=project_id, group=group, *args, **kwargs)
         return wrapped
     return decorator
 
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 089f106512..bb10a0dd48 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -15,7 +15,7 @@ from sentry.web.helpers import get_login_url, render_to_response
 
 
 class OrganizationMixin(object):
-    def get_active_organization(self, request, organization_id=None,
+    def get_active_organization(self, request, organization_slug=None,
                                 access=None):
         """
         Returns the currently active organization for the request or None
@@ -23,27 +23,20 @@ class OrganizationMixin(object):
         """
         active_organization = None
 
-        is_implicit = organization_id is None
+        is_implicit = organization_slug is None
 
         if is_implicit:
-            organization_id = request.session.get('activeorg')
+            organization_slug = request.session.get('activeorg')
 
-        if organization_id:
-            try:
-                organization_id = int(organization_id)
-            except (TypeError, ValueError):
-                if not is_implicit:
-                    return None
-
-        if organization_id is not None:
+        if organization_slug is not None:
             if request.user.is_superuser:
                 try:
                     active_organization = Organization.objects.get_from_cache(
-                        id=organization_id,
+                        slug=organization_slug,
                     )
                 except Organization.DoesNotExist:
                     logging.info('Active organization [%s] not found',
-                                 organization_id)
+                                 organization_slug)
                     return None
 
         if active_organization is None:
@@ -52,15 +45,15 @@ class OrganizationMixin(object):
                 access=access,
             )
 
-        if active_organization is None and organization_id:
+        if active_organization is None and organization_slug:
             try:
                 active_organization = (
                     o for o in organizations
-                    if o.id == organization_id
+                    if o.slug == organization_slug
                 ).next()
             except StopIteration:
                 logging.info('Active organization [%s] not found in scope',
-                             organization_id)
+                             organization_slug)
                 if is_implicit:
                     del request.session['activeorg']
                 active_organization = None
@@ -77,45 +70,35 @@ class OrganizationMixin(object):
 
         return active_organization
 
-    def get_active_team(self, request, team_slug, access=None):
+    def get_active_team(self, request, organization, team_slug, access=None):
         """
         Returns the currently selected team for the request or None
         if no match.
         """
         try:
-            team = Team.objects.get_from_cache(slug=team_slug)
+            team = Team.objects.get_from_cache(
+                slug=team_slug,
+                organization=organization,
+            )
         except Team.DoesNotExist:
             return None
 
-        if not request.user.is_superuser:
-            team_list = Team.objects.get_for_user(
-                organization=team.organization,
-                user=request.user,
-                access=access,
-            )
-
-            if team not in team_list:
-                return None
+        if not request.user.is_superuser and not team.has_access(request.user):
+            return None
 
         return team
 
-    def get_active_project(self, request, team, project_slug, access=None):
+    def get_active_project(self, request, organization, project_slug, access=None):
         try:
             project = Project.objects.get_from_cache(
                 slug=project_slug,
-                team=team,
+                organization=organization,
             )
         except Project.DoesNotExist:
             return None
 
-        if not request.user.is_superuser:
-            project_list = Project.objects.get_for_user(
-                user=request.user,
-                team=team,
-                access=access,
-            )
-            if project not in project_list:
-                return None
+        if not request.user.is_superuser and not project.has_access(request.user):
+            return None
 
         return project
 
@@ -198,7 +181,7 @@ class OrganizationView(BaseView):
     def has_permission(self, request, organization, *args, **kwargs):
         return organization is not None
 
-    def convert_args(self, request, organization_id=None, *args, **kwargs):
+    def convert_args(self, request, organization_slug=None, *args, **kwargs):
         # TODO:
         # if access is MEMBER_OWNER:
         #     _wrapped = login_required(sudo_required(_wrapped))
@@ -206,7 +189,7 @@ class OrganizationView(BaseView):
         active_organization = self.get_active_organization(
             request=request,
             access=self.required_access,
-            organization_id=organization_id,
+            organization_slug=organization_slug,
         )
 
         kwargs['organization'] = active_organization
@@ -236,18 +219,24 @@ class TeamView(BaseView):
     def has_permission(self, request, organization, team, *args, **kwargs):
         return team is not None
 
-    def convert_args(self, request, team_slug, *args, **kwargs):
-        active_team = self.get_active_team(
+    def convert_args(self, request, organization_slug, team_slug, *args, **kwargs):
+        active_organization = self.get_active_organization(
             request=request,
-            team_slug=team_slug,
-            access=self.required_access,
+            organization_slug=organization_slug,
         )
 
-        kwargs['team'] = active_team
-        if active_team:
-            kwargs['organization'] = active_team.organization
+        if active_organization:
+            active_team = self.get_active_team(
+                request=request,
+                team_slug=team_slug,
+                organization=active_organization,
+                access=self.required_access,
+            )
         else:
-            kwargs['organization'] = None
+            active_team = None
+
+        kwargs['organization'] = active_organization
+        kwargs['team'] = active_team
 
         return (args, kwargs)
 
@@ -277,27 +266,26 @@ class ProjectView(BaseView):
     def has_permission(self, request, organization, team, project, *args, **kwargs):
         return project is not None
 
-    def convert_args(self, request, team_slug, project_slug, *args, **kwargs):
-        active_team = self.get_active_team(
+    def convert_args(self, request, organization_slug, project_slug, *args, **kwargs):
+        active_organization = self.get_active_organization(
             request=request,
-            team_slug=team_slug,
+            organization_slug=organization_slug,
         )
 
-        if active_team:
+        if active_organization:
             active_project = self.get_active_project(
                 request=request,
-                team=active_team,
+                organization=active_organization,
                 project_slug=project_slug,
                 access=self.required_access,
             )
+            active_team = active_project.team
         else:
             active_project = None
+            active_team = None
 
         kwargs['project'] = active_project
         kwargs['team'] = active_team
-        if active_team:
-            kwargs['organization'] = active_team.organization
-        else:
-            kwargs['organization'] = None
+        kwargs['organization'] = active_organization
 
         return (args, kwargs)
diff --git a/src/sentry/web/frontend/create_organization.py b/src/sentry/web/frontend/create_organization.py
index 7b9d67f8e1..f7a3df9a28 100644
--- a/src/sentry/web/frontend/create_organization.py
+++ b/src/sentry/web/frontend/create_organization.py
@@ -41,7 +41,10 @@ class CreateOrganizationView(BaseView):
                 organization=org,
                 owner=org.owner,
             )
-            return HttpResponseRedirect(reverse('sentry-create-project', args=[org.id]))
+
+            url = reverse('sentry-create-project', args=[org.slug])
+
+            return HttpResponseRedirect('%s?team=%s' % (url, team.slug))
 
         context = {
             'form': form,
diff --git a/src/sentry/web/frontend/create_organization_member.py b/src/sentry/web/frontend/create_organization_member.py
index 67a682616e..8543ee9c1b 100644
--- a/src/sentry/web/frontend/create_organization_member.py
+++ b/src/sentry/web/frontend/create_organization_member.py
@@ -140,7 +140,7 @@ class CreateOrganizationMemberView(OrganizationView):
                     _('The organization member already exists.'))
 
             redirect = reverse('sentry-organization-member-settings',
-                               args=[organization.id, om.id])
+                               args=[organization.slug, om.id])
 
             return HttpResponseRedirect(redirect)
 
diff --git a/src/sentry/web/frontend/create_project.py b/src/sentry/web/frontend/create_project.py
index 9949c0e40e..2de81f15fd 100644
--- a/src/sentry/web/frontend/create_project.py
+++ b/src/sentry/web/frontend/create_project.py
@@ -57,7 +57,9 @@ class CreateProjectView(OrganizationView):
             access=OrganizationMemberType.ADMIN,
         )
 
-        return NewProjectForm(request.user, team_list, request.POST or None)
+        return NewProjectForm(request.user, team_list, request.POST or None, initial={
+            'team': request.GET.get('team'),
+        })
 
     def handle(self, request, organization):
         form = self.get_form(request, organization)
@@ -69,9 +71,9 @@ class CreateProjectView(OrganizationView):
             create_sample_event(project)
 
             if project.platform not in (None, 'other'):
-                url = reverse('sentry-docs-client', args=[project.team.slug, project.slug, project.platform])
+                url = reverse('sentry-docs-client', args=[organization.slug, project.slug, project.platform])
             else:
-                url = reverse('sentry-get-started', args=[project.team.slug, project.slug])
+                url = reverse('sentry-get-started', args=[organization.slug, project.slug])
             return HttpResponseRedirect(url)
 
         context = {
diff --git a/src/sentry/web/frontend/create_team.py b/src/sentry/web/frontend/create_team.py
index 6ce4302edd..14e1ccb23c 100644
--- a/src/sentry/web/frontend/create_team.py
+++ b/src/sentry/web/frontend/create_team.py
@@ -48,7 +48,10 @@ class CreateTeamView(OrganizationView):
             team.organization = organization
             team.owner = organization.owner
             team.save()
-            return HttpResponseRedirect(reverse('sentry-create-project', args=[organization.id]))
+
+            url = reverse('sentry-create-project', args=[organization.slug])
+
+            return HttpResponseRedirect(url + '?team=' + team.slug)
 
         context = {
             'form': form,
diff --git a/src/sentry/web/frontend/docs.py b/src/sentry/web/frontend/docs.py
index becce90092..722b9d89ee 100644
--- a/src/sentry/web/frontend/docs.py
+++ b/src/sentry/web/frontend/docs.py
@@ -43,11 +43,12 @@ def get_key_context(user, project):
 
 
 @has_access
-def client_help(request, team, project):
+def client_help(request, organization, project):
     context = {
         'page': 'client_help',
-        'project': project,
+        'organization': organization,
         'team': project.team,
+        'project': project,
         'SUBSECTION': 'projects',
         'SECTION': 'team',
     }
@@ -57,7 +58,7 @@ def client_help(request, team, project):
 
 
 @has_access
-def client_guide(request, team, project, platform):
+def client_guide(request, organization, project, platform):
     if platform not in PLATFORM_LIST:
         return HttpResponseRedirect(reverse('sentry'))
 
@@ -66,9 +67,10 @@ def client_guide(request, team, project, platform):
     context = {
         'platform': platform,
         'platform_title': PLATFORM_TITLES.get(platform, platform.title()),
+        'organization': organization,
+        'team': project.team,
         'project': project,
         'page': 'client_help_%s' % (PLATFORM_ROOTS.get(platform, platform),),
-        'team': project.team,
         'SUBSECTION': 'projects',
         'SECTION': 'team',
     }
diff --git a/src/sentry/web/frontend/events.py b/src/sentry/web/frontend/events.py
index 2693a97867..fd901a5f2c 100644
--- a/src/sentry/web/frontend/events.py
+++ b/src/sentry/web/frontend/events.py
@@ -23,7 +23,7 @@ from sentry.web.forms import ReplayForm
 
 @has_group_access
 @csrf_protect
-def replay_event(request, team, project, group, event_id):
+def replay_event(request, organization, project, group, event_id):
     try:
         event = Event.objects.get(group=group, id=event_id)
     except Event.DoesNotExist:
@@ -67,7 +67,8 @@ def replay_event(request, team, project, group, event_id):
         result = None
 
     context = {
-        'team': team,
+        'organization': organization,
+        'team': project.team,
         'project': project,
         'group': event.group,
         'event': event,
diff --git a/src/sentry/web/frontend/explore.py b/src/sentry/web/frontend/explore.py
index 41c5a5b2f2..c9fc72a67e 100644
--- a/src/sentry/web/frontend/explore.py
+++ b/src/sentry/web/frontend/explore.py
@@ -22,7 +22,7 @@ SORT_OPTIONS = {
 
 
 @has_access
-def tag_list(request, team, project):
+def tag_list(request, organization, project):
     tag_key_qs = sorted(TagKey.objects.filter(
         project=project
     ), key=lambda x: x.get_label())
@@ -43,13 +43,14 @@ def tag_list(request, team, project):
     return render_to_response('sentry/explore/tag_list.html', {
         'SECTION': 'explore',
         'project': project,
-        'team': team,
+        'team': project.team,
+        'organization': organization,
         'tag_list': tag_list,
     }, request)
 
 
 @has_access
-def tag_value_list(request, team, project, key):
+def tag_value_list(request, organization, project, key):
     tag_key = TagKey.objects.select_related('project').get(
         project=project, key=key)
     tag_values_qs = TagValue.objects.filter(
@@ -69,7 +70,8 @@ def tag_value_list(request, team, project, key):
     return render_to_response('sentry/explore/tag_value_list.html', {
         'SECTION': 'explore',
         'project': project,
-        'team': team,
+        'team': project.team,
+        'organization': organization,
         'SORT_OPTIONS': SORT_OPTIONS,
         'sort_label': SORT_OPTIONS[sort],
         'tag_key': tag_key,
@@ -78,7 +80,7 @@ def tag_value_list(request, team, project, key):
 
 
 @has_access
-def tag_value_details(request, team, project, key, value_id):
+def tag_value_details(request, organization, project, key, value_id):
     tag_key = TagKey.objects.get(
         project=project, key=key)
     tag_value = TagValue.objects.get(
@@ -93,7 +95,8 @@ def tag_value_details(request, team, project, key, value_id):
     return render_to_response('sentry/explore/tag_value_details.html', {
         'SECTION': 'explore',
         'project': project,
-        'team': team,
+        'team': project.team,
+        'organization': organization,
         'tag_key': tag_key,
         'tag_value': tag_value,
         'event_list': event_list,
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index 1d63a2de83..dfcb008112 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -131,6 +131,7 @@ def render_with_group_context(group, template, context, request=None,
                               event=None, is_public=False):
     context.update({
         'team': group.project.team,
+        'organization': group.project.organization,
         'project': group.project,
         'group': group,
         'can_admin_event': can_admin_group(request.user, group),
@@ -179,23 +180,25 @@ def redirect_to_group(request, project_id, group_id):
 
     return HttpResponseRedirect(reverse('sentry-group', kwargs={
         'project_id': group.project.slug,
-        'team_slug': group.team.slug,
+        'organization_slug': group.project.organization.slug,
         'group_id': group.id,
     }))
 
 
 @login_required
 @has_access
-def dashboard(request, team):
+def dashboard(request, organization, team):
     project_list = list(Project.objects.filter(team=team))
 
     if not project_list and can_create_projects(request.user, team=team):
-        return HttpResponseRedirect(reverse('sentry-create-project', args=[team.organization.id]))
+        url = reverse('sentry-create-project', args=[team.organization.slug])
+        return HttpResponseRedirect(url + '?team=' + team.slug)
 
     for project in project_list:
         project.team = team
 
     return render_to_response('sentry/dashboard.html', {
+        'organization': team.organization,
         'team': team,
         'project_list': project_list,
     }, request)
@@ -203,7 +206,7 @@ def dashboard(request, team):
 
 @login_required
 @has_access
-def wall_display(request, team):
+def wall_display(request, organization, team):
     project_list = list(Project.objects.filter(team=team))
 
     for project in project_list:
@@ -211,13 +214,14 @@ def wall_display(request, team):
 
     return render_to_response('sentry/wall.html', {
         'team': team,
+        'organization': team.organization,
         'project_list': project_list,
     }, request)
 
 
 @login_required
 @has_access
-def group_list(request, team, project):
+def group_list(request, organization, project):
     try:
         page = int(request.GET.get('p', 1))
     except (TypeError, ValueError):
@@ -235,7 +239,7 @@ def group_list(request, team, project):
         else:
             return HttpResponseRedirect(reverse('sentry-group', kwargs={
                 'project_id': project.slug,
-                'team_slug': project.team.slug,
+                'organization_slug': project.organization.slug,
                 'group_id': group_id,
             }))
 
@@ -260,6 +264,7 @@ def group_list(request, team, project):
 
     return render_to_response('sentry/groups/group_list.html', {
         'team': project.team,
+        'organization': organization,
         'project': project,
         'from_date': response['date_from'],
         'to_date': response['date_to'],
@@ -277,7 +282,7 @@ def group_list(request, team, project):
 
 
 @has_group_access(allow_public=True)
-def group(request, team, project, group, event_id=None):
+def group(request, organization, project, group, event_id=None):
     # It's possible that a message would not be created under certain
     # circumstances (such as a post_save signal failing)
     if event_id:
@@ -300,8 +305,7 @@ def group(request, team, project, group, event_id=None):
     else:
         add_note_form = NewNoteForm()
 
-    if project in Project.objects.get_for_user(
-            team=team, user=request.user):
+    if project.has_access(request.user):
         # update that the user has seen this group
         create_or_update(
             GroupSeen,
@@ -371,7 +375,7 @@ def group(request, team, project, group, event_id=None):
 
 
 @has_group_access
-def group_tag_list(request, team, project, group):
+def group_tag_list(request, organization, project, group):
     def percent(total, this):
         return int(this / total * 100)
 
@@ -391,7 +395,7 @@ def group_tag_list(request, team, project, group):
 
 
 @has_group_access
-def group_tag_details(request, team, project, group, tag_name):
+def group_tag_details(request, organization, project, group, tag_name):
     sort = request.GET.get('sort')
     if sort == 'date':
         order_by = '-last_seen'
@@ -409,7 +413,7 @@ def group_tag_details(request, team, project, group, tag_name):
 
 
 @has_group_access
-def group_event_list(request, team, project, group):
+def group_event_list(request, organization, project, group):
     # TODO: we need the event data to bind after we limit
     event_list = group.event_set.all().order_by('-datetime')[:100]
 
@@ -425,7 +429,7 @@ def group_event_list(request, team, project, group):
 
 
 @has_access(MEMBER_USER)
-def group_event_details_json(request, team, project, group_id, event_id_or_latest):
+def group_event_details_json(request, organization, project, group_id, event_id_or_latest):
     group = get_object_or_404(Group, pk=group_id, project=project)
 
     if event_id_or_latest == 'latest':
@@ -442,7 +446,7 @@ def group_event_details_json(request, team, project, group_id, event_id_or_lates
 
 @login_required
 @has_access(MEMBER_USER)
-def group_plugin_action(request, team, project, group_id, slug):
+def group_plugin_action(request, organization, project, group_id, slug):
     group = get_object_or_404(Group, pk=group_id, project=project)
 
     try:
@@ -457,7 +461,7 @@ def group_plugin_action(request, team, project, group_id, slug):
         return response
 
     redirect = request.META.get('HTTP_REFERER') or reverse('sentry', kwargs={
-        'team_slug': team.slug,
+        'organization_slug': organization.slug,
         'project_id': group.project.slug
     })
     return HttpResponseRedirect(redirect)
diff --git a/src/sentry/web/frontend/home.py b/src/sentry/web/frontend/home.py
index 90a35dc87a..0321339002 100644
--- a/src/sentry/web/frontend/home.py
+++ b/src/sentry/web/frontend/home.py
@@ -13,5 +13,5 @@ class HomeView(BaseView):
         if organization is None:
             url = reverse('sentry-create-organization')
         else:
-            url = reverse('sentry-organization-home', args=[organization.id])
+            url = reverse('sentry-organization-home', args=[organization.slug])
         return HttpResponseRedirect(url)
diff --git a/src/sentry/web/frontend/projects/general.py b/src/sentry/web/frontend/projects/general.py
index 673521f762..5a0de47115 100644
--- a/src/sentry/web/frontend/projects/general.py
+++ b/src/sentry/web/frontend/projects/general.py
@@ -12,8 +12,9 @@ from sentry.web.helpers import render_to_response
 
 
 @has_access
-def get_started(request, team, project):
+def get_started(request, organization, project):
     return render_to_response('sentry/get_started.html', {
         'project': project,
+        'organization': organization,
         'team': project.team,
     }, request)
diff --git a/src/sentry/web/frontend/projects/keys.py b/src/sentry/web/frontend/projects/keys.py
index fb344c7fb1..0afb8ceb93 100644
--- a/src/sentry/web/frontend/projects/keys.py
+++ b/src/sentry/web/frontend/projects/keys.py
@@ -28,7 +28,7 @@ from sentry.web.helpers import render_to_response
 
 @has_access(MEMBER_OWNER)
 @csrf_protect
-def manage_project_keys(request, team, project):
+def manage_project_keys(request, organization, project):
     result = plugins.first('has_perm', request.user, 'edit_project', project)
     if result is False and not request.user.is_superuser:
         return HttpResponseRedirect(reverse('sentry'))
@@ -43,7 +43,8 @@ def manage_project_keys(request, team, project):
 
     context = csrf(request)
     context.update({
-        'team': team,
+        'team': project.team,
+        'organization': organization,
         'page': 'keys',
         'project': project,
         'key_list': key_list,
@@ -55,23 +56,23 @@ def manage_project_keys(request, team, project):
 
 @has_access(MEMBER_OWNER)
 @csrf_protect
-def new_project_key(request, team, project):
+def new_project_key(request, organization, project):
     if not can_add_project_key(request.user, project):
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
+        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
 
     ProjectKey.objects.create(
         project=project,
         user_added=request.user,
     )
 
-    return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
+    return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
 
 
 @has_access(MEMBER_OWNER)
 @csrf_protect
-def edit_project_key(request, team, project, key_id):
+def edit_project_key(request, organization, project, key_id):
     if not can_edit_project_key(request.user, project):
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
+        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
 
     try:
         key = ProjectKey.objects.get(
@@ -79,7 +80,7 @@ def edit_project_key(request, team, project, key_id):
             project=project,
         )
     except ProjectKey.DoesNotExist():
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
+        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
 
     form = EditProjectKeyForm(request.POST or None, instance=key)
     if form.is_valid():
@@ -87,10 +88,11 @@ def edit_project_key(request, team, project, key_id):
 
         messages.add_message(
             request, messages.SUCCESS, _('Changes to your API key were saved.'))
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
+        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
 
     context = {
-        'team': team,
+        'organization': organization,
+        'team': project.team,
         'project': project,
         'page': 'keys',
         'key': key,
@@ -103,18 +105,18 @@ def edit_project_key(request, team, project, key_id):
 @require_http_methods(['POST'])
 @has_access(MEMBER_OWNER)
 @csrf_protect
-def remove_project_key(request, team, project, key_id):
+def remove_project_key(request, organization, project, key_id):
     try:
         key = ProjectKey.objects.get(id=key_id)
     except ProjectKey.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
+        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
 
     if not can_remove_project_key(request.user, key):
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
+        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
 
     key.delete()
     messages.add_message(
         request, messages.SUCCESS,
         _('The API key (%s) was revoked.') % (key.public_key,))
 
-    return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
+    return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
diff --git a/src/sentry/web/frontend/projects/notifications.py b/src/sentry/web/frontend/projects/notifications.py
index 2424eb4624..e612cf611f 100644
--- a/src/sentry/web/frontend/projects/notifications.py
+++ b/src/sentry/web/frontend/projects/notifications.py
@@ -25,7 +25,7 @@ from sentry.web.helpers import render_to_response
 
 @has_access(MEMBER_OWNER)
 @csrf_protect
-def notification_settings(request, team, project):
+def notification_settings(request, organization, project):
     general_form = NotificationSettingsForm(
         data=request.POST or None,
         prefix='general',
@@ -62,11 +62,12 @@ def notification_settings(request, team, project):
             request, messages.SUCCESS,
             _('Your settings were saved successfully.'))
 
-        return HttpResponseRedirect(reverse('sentry-project-notifications', args=[project.team.slug, project.slug]))
+        return HttpResponseRedirect(reverse('sentry-project-notifications', args=[project.organization.slug, project.slug]))
 
     context = csrf(request)
     context.update({
-        'team': team,
+        'organization': organization,
+        'team': project.team,
         'project': project,
         'general_form': general_form,
         'alert_form': alert_form,
diff --git a/src/sentry/web/frontend/projects/plugins.py b/src/sentry/web/frontend/projects/plugins.py
index 16b9686f71..a49ed9a115 100644
--- a/src/sentry/web/frontend/projects/plugins.py
+++ b/src/sentry/web/frontend/projects/plugins.py
@@ -22,7 +22,7 @@ from sentry.web.helpers import render_to_response, plugin_config
 
 @has_access(MEMBER_OWNER)
 @csrf_protect
-def manage_plugins(request, team, project):
+def manage_plugins(request, organization, project):
     result = plugins.first('has_perm', request.user, 'configure_project_plugin', project)
     if result is False and not request.user.is_superuser:
         return HttpResponseRedirect(reverse('sentry'))
@@ -41,7 +41,8 @@ def manage_plugins(request, team, project):
 
     context = csrf(request)
     context.update({
-        'team': team,
+        'organization': organization,
+        'team': project.team,
         'page': 'plugins',
         'project': project,
     })
@@ -51,14 +52,14 @@ def manage_plugins(request, team, project):
 
 @has_access(MEMBER_OWNER)
 @csrf_protect
-def configure_project_plugin(request, team, project, slug):
+def configure_project_plugin(request, organization, project, slug):
     try:
         plugin = plugins.get(slug)
     except KeyError:
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.team.slug, project.slug]))
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.organization.slug, project.slug]))
 
     if not plugin.can_enable_for_projects():
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.team.slug, project.slug]))
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.organization.slug, project.slug]))
 
     result = plugins.first('has_perm', request.user, 'configure_project_plugin', project, plugin)
     if result is False and not request.user.is_superuser:
@@ -66,7 +67,7 @@ def configure_project_plugin(request, team, project, slug):
 
     form = plugin.project_conf_form
     if form is None:
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.team.slug, project.slug]))
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.organization.slug, project.slug]))
 
     action, view = plugin_config(plugin, project, request)
     if action == 'redirect':
@@ -78,7 +79,8 @@ def configure_project_plugin(request, team, project, slug):
 
     context = csrf(request)
     context.update({
-        'team': team,
+        'organization': organization,
+        'team': project.team,
         'page': 'plugin',
         'title': plugin.get_title(),
         'view': view,
@@ -92,14 +94,14 @@ def configure_project_plugin(request, team, project, slug):
 
 @has_access(MEMBER_OWNER)
 @csrf_protect
-def reset_project_plugin(request, team, project, slug):
+def reset_project_plugin(request, organization, project, slug):
     try:
         plugin = plugins.get(slug)
     except KeyError:
-        return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug]))
+        return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
 
     if not plugin.is_enabled(project):
-        return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug]))
+        return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
 
     result = plugins.first('has_perm', request.user, 'configure_project_plugin', project, plugin)
     if result is False and not request.user.is_superuser:
@@ -107,18 +109,18 @@ def reset_project_plugin(request, team, project, slug):
 
     plugin.reset_options(project=project)
 
-    return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug]))
+    return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
 
 
 @has_access(MEMBER_OWNER)
 @csrf_protect
-def enable_project_plugin(request, team, project, slug):
+def enable_project_plugin(request, organization, project, slug):
     try:
         plugin = plugins.get(slug)
     except KeyError:
-        return HttpResponseRedirect(reverse('sentry-manage-project-plugins', args=[project.team.slug, project.slug]))
+        return HttpResponseRedirect(reverse('sentry-manage-project-plugins', args=[project.organization.slug, project.slug]))
 
-    redirect_to = reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug])
+    redirect_to = reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug])
 
     if plugin.is_enabled(project) or not plugin.can_enable_for_projects():
         return HttpResponseRedirect(redirect_to)
@@ -134,13 +136,13 @@ def enable_project_plugin(request, team, project, slug):
 
 @has_access(MEMBER_OWNER)
 @csrf_protect
-def disable_project_plugin(request, team, project, slug):
+def disable_project_plugin(request, organization, project, slug):
     try:
         plugin = plugins.get(slug)
     except KeyError:
-        return HttpResponseRedirect(reverse('sentry-manage-project-plugins', args=[project.team.slug, project.slug]))
+        return HttpResponseRedirect(reverse('sentry-manage-project-plugins', args=[project.organization.slug, project.slug]))
 
-    redirect_to = reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug])
+    redirect_to = reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug])
 
     if not (plugin.can_disable and plugin.is_enabled(project) and plugin.can_enable_for_projects()):
         return HttpResponseRedirect(redirect_to)
diff --git a/src/sentry/web/frontend/projects/quotas.py b/src/sentry/web/frontend/projects/quotas.py
index 0d27896f37..2c5f529240 100644
--- a/src/sentry/web/frontend/projects/quotas.py
+++ b/src/sentry/web/frontend/projects/quotas.py
@@ -20,7 +20,7 @@ from sentry.web.helpers import render_to_response
 
 
 @has_access(MEMBER_OWNER)
-def manage_project_quotas(request, team, project):
+def manage_project_quotas(request, organization, project):
     from sentry.quotas.base import Quota
 
     form = ProjectQuotasForm(project, request.POST or None)
@@ -32,15 +32,16 @@ def manage_project_quotas(request, team, project):
             request, messages.SUCCESS,
             _('Your settings were saved successfully.'))
 
-        return HttpResponseRedirect(reverse('sentry-manage-project-quotas', args=[project.team.slug, project.slug]))
+        return HttpResponseRedirect(reverse('sentry-manage-project-quotas', args=[project.organization.slug, project.slug]))
 
     context = {
-        'team': team,
+        'organization': organization,
+        'team': project.team,
         'page': 'quotas',
         # TODO(dcramer): has_quotas is an awful hack
         'has_quotas': type(app.quotas) != Quota,
         'system_quota': app.quotas.get_system_quota(),
-        'team_quota': app.quotas.get_team_quota(team),
+        'team_quota': app.quotas.get_team_quota(project.team),
         'project': project,
         'form': form,
     }
diff --git a/src/sentry/web/frontend/projects/rules.py b/src/sentry/web/frontend/projects/rules.py
index f1e3111e7c..c32cefb888 100644
--- a/src/sentry/web/frontend/projects/rules.py
+++ b/src/sentry/web/frontend/projects/rules.py
@@ -87,12 +87,13 @@ class RuleFormValidator(object):
 
 
 @has_access(MEMBER_OWNER)
-def list_rules(request, team, project):
+def list_rules(request, organization, project):
     rule_list = Rule.objects.filter(project=project)
 
     context = csrf(request)
     context.update({
-        'team': team,
+        'organization': organization,
+        'team': project.team,
         'page': 'rules',
         'project': project,
         'rule_list': rule_list,
@@ -103,12 +104,12 @@ def list_rules(request, team, project):
 
 @has_access(MEMBER_OWNER)
 @csrf_protect
-def create_or_edit_rule(request, team, project, rule_id=None):
+def create_or_edit_rule(request, organization, project, rule_id=None):
     if rule_id:
         try:
             rule = Rule.objects.get(project=project, id=rule_id)
         except Rule.DoesNotExist:
-            path = reverse('sentry-project-rules', args=[team.slug, project.slug])
+            path = reverse('sentry-project-rules', args=[organization.slug, project.slug])
             return HttpResponseRedirect(path)
     else:
         rule = Rule(project=project)
@@ -144,7 +145,7 @@ def create_or_edit_rule(request, team, project, rule_id=None):
             request, messages.SUCCESS,
             _('Changes to your rule were saved.'))
 
-        path = reverse('sentry-project-rules', args=[team.slug, project.slug])
+        path = reverse('sentry-project-rules', args=[organization.slug, project.slug])
         return HttpResponseRedirect(path)
 
     action_list = []
@@ -170,7 +171,8 @@ def create_or_edit_rule(request, team, project, rule_id=None):
         'form_is_valid': (not request.POST or validator.is_valid()),
         'form_errors': validator.errors,
         'form_data': form_data,
-        'team': team,
+        'organization': organization,
+        'team': project.team,
         'page': 'rules',
         'action_list': json.dumps(action_list),
         'condition_list': json.dumps(condition_list),
@@ -182,8 +184,8 @@ def create_or_edit_rule(request, team, project, rule_id=None):
 
 @has_access(MEMBER_OWNER)
 @csrf_protect
-def remove_rule(request, team, project, rule_id):
-    path = reverse('sentry-project-rules', args=[team.slug, project.slug])
+def remove_rule(request, organization, project, rule_id):
+    path = reverse('sentry-project-rules', args=[organization.slug, project.slug])
 
     try:
         rule = Rule.objects.get(project=project, id=rule_id)
diff --git a/src/sentry/web/frontend/projects/tags.py b/src/sentry/web/frontend/projects/tags.py
index 8cacceae04..82a18e8b32 100644
--- a/src/sentry/web/frontend/projects/tags.py
+++ b/src/sentry/web/frontend/projects/tags.py
@@ -20,7 +20,7 @@ from sentry.web.helpers import render_to_response
 
 
 @has_access(MEMBER_OWNER)
-def manage_project_tags(request, team, project):
+def manage_project_tags(request, organization, project):
     tag_list = TagKey.objects.all_keys(project)
 
     if tag_list:
@@ -35,10 +35,11 @@ def manage_project_tags(request, team, project):
             request, messages.SUCCESS,
             _('Your settings were saved successfully.'))
 
-        return HttpResponseRedirect(reverse('sentry-manage-project-tags', args=[project.team.slug, project.slug]))
+        return HttpResponseRedirect(reverse('sentry-manage-project-tags', args=[project.organization.slug, project.slug]))
 
     context = {
-        'team': team,
+        'organization': organization,
+        'team': project.team,
         'tag_list': tag_list,
         'page': 'tags',
         'project': project,
diff --git a/src/sentry/web/frontend/team_settings.py b/src/sentry/web/frontend/team_settings.py
index 66086c1440..cd72e3a30b 100644
--- a/src/sentry/web/frontend/team_settings.py
+++ b/src/sentry/web/frontend/team_settings.py
@@ -63,7 +63,7 @@ class TeamSettingsView(TeamView):
             messages.add_message(request, messages.SUCCESS,
                 _('Changes to your team were saved.'))
 
-            return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+            return HttpResponseRedirect(reverse('sentry-manage-team', args=[organization.slug, team.slug]))
 
         context = {
             'form': form,
diff --git a/src/sentry/web/frontend/users.py b/src/sentry/web/frontend/users.py
index 09d97c4523..c7143b82dd 100644
--- a/src/sentry/web/frontend/users.py
+++ b/src/sentry/web/frontend/users.py
@@ -21,7 +21,7 @@ SORT_OPTIONS = {
 
 @has_access
 @login_required
-def user_list(request, team, project):
+def user_list(request, organization, project):
     sort = request.GET.get('sort')
     if sort not in SORT_OPTIONS:
         sort = DEFAULT_SORT_OPTION
@@ -36,7 +36,8 @@ def user_list(request, team, project):
         tag_list = tag_list.order_by('-times_seen')
 
     return render_to_response('sentry/users/list.html', {
-        'team': team,
+        'team': project.team,
+        'organization': organization,
         'project': project,
         'tag_list': tag_list,
         'sort_label': SORT_OPTIONS[sort],
@@ -47,7 +48,7 @@ def user_list(request, team, project):
 
 @has_access
 @login_required
-def user_details(request, team, project, user_id):
+def user_details(request, organization, project, user_id):
     tag = TagValue.objects.get(
         project=project,
         key='sentry:user',
@@ -61,7 +62,8 @@ def user_details(request, team, project, user_id):
     )
 
     return render_to_response('sentry/users/details.html', {
-        'team': team,
+        'team': project.team,
+        'organization': organization,
         'project': project,
         'tag': tag,
         'event_list': event_list,
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 086238013d..775dd7c6ff 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -118,103 +118,101 @@ urlpatterns += patterns('',
     # Organizations
     url(r'^organizations/new/$', CreateOrganizationView.as_view(),
         name='sentry-create-organization'),
-    url(r'^organizations/(?P<organization_id>\d+)/access-groups/$', AccessGroupMigrationView.as_view(),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/access-groups/$', AccessGroupMigrationView.as_view(),
         name='sentry-organization-access-group-migration'),
-    url(r'^organizations/(?P<organization_id>\d+)/$', OrganizationHomeView.as_view(),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/$', OrganizationHomeView.as_view(),
         name='sentry-organization-home'),
-    url(r'^organizations/(?P<organization_id>\d+)/members/$', OrganizationMembersView.as_view(),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/members/$', OrganizationMembersView.as_view(),
         name='sentry-organization-members'),
-    url(r'^organizations/(?P<organization_id>\d+)/members/new/$', CreateOrganizationMemberView.as_view(),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/members/new/$', CreateOrganizationMemberView.as_view(),
         name='sentry-create-organization-member'),
-    url(r'^organizations/(?P<organization_id>\d+)/members/(?P<member_id>\d+)/$', OrganizationMemberSettingsView.as_view(),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/members/(?P<member_id>\d+)/$', OrganizationMemberSettingsView.as_view(),
         name='sentry-organization-member-settings'),
-    url(r'^organizations/(?P<organization_id>\d+)/settings/$', OrganizationSettingsView.as_view(),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/settings/$', OrganizationSettingsView.as_view(),
         name='sentry-organization-settings'),
-    url(r'^organizations/(?P<organization_id>\d+)/teams/new/$', CreateTeamView.as_view(),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/teams/(?P<team_slug>[\w_-]+)/settings/$', TeamSettingsView.as_view(),
+        name='sentry-manage-team'),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/teams/(?P<team_slug>[\w_-]+)/remove/$', RemoveTeamView.as_view(),
+        name='sentry-remove-team'),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/teams/new/$', CreateTeamView.as_view(),
         name='sentry-create-team'),
-    url(r'^organizations/(?P<organization_id>\d+)/projects/new/$', CreateProjectView.as_view(),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/projects/new/$', CreateProjectView.as_view(),
         name='sentry-create-project'),
-    url(r'^organizations/(?P<organization_id>\d+)/remove/$', RemoveOrganizationView.as_view(),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/remove/$', RemoveOrganizationView.as_view(),
         name='sentry-remove-organization'),
     url(r'^accept/(?P<member_id>\d+)/(?P<token>\w+)/$', AcceptOrganizationInviteView.as_view(),
         name='sentry-accept-invite'),
 
-    # Settings - Teams
-    url(r'^account/teams/(?P<team_slug>[\w_-]+)/settings/$', TeamSettingsView.as_view(),
-        name='sentry-manage-team'),
-    url(r'^account/teams/(?P<team_slug>[\w_-]+)/remove/$', RemoveTeamView.as_view(),
-        name='sentry-remove-team'),
-
     # Settings - Projects
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/get-started/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/get-started/$',
         sentry.web.frontend.projects.general.get_started,
         name='sentry-get-started'),
 
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/$',
         ProjectSettingsView.as_view(),
         name='sentry-manage-project'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/docs/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/docs/$',
         docs.client_help,
         name='sentry-project-client-help'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/docs/(?P<platform>%s)/$' % ('|'.join(re.escape(r) for r in docs.PLATFORM_LIST),),
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/docs/(?P<platform>%s)/$' % ('|'.join(re.escape(r) for r in docs.PLATFORM_LIST),),
         docs.client_guide,
         name='sentry-docs-client'),
 
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/$',
         sentry.web.frontend.projects.keys.manage_project_keys,
         name='sentry-manage-project-keys'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/new/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/new/$',
         sentry.web.frontend.projects.keys.new_project_key,
         name='sentry-new-project-key'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/(?P<key_id>\d+)/edit/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/(?P<key_id>\d+)/edit/$',
         sentry.web.frontend.projects.keys.edit_project_key,
         name='sentry-edit-project-key'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/(?P<key_id>\d+)/remove/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/(?P<key_id>\d+)/remove/$',
         sentry.web.frontend.projects.keys.remove_project_key,
         name='sentry-remove-project-key'),
 
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/$',
         sentry.web.frontend.projects.plugins.manage_plugins,
         name='sentry-manage-project-plugins'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/(?P<slug>[\w_-]+)/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/(?P<slug>[\w_-]+)/$',
         sentry.web.frontend.projects.plugins.configure_project_plugin,
         name='sentry-configure-project-plugin'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/(?P<slug>[\w_-]+)/reset/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/(?P<slug>[\w_-]+)/reset/$',
         sentry.web.frontend.projects.plugins.reset_project_plugin,
         name='sentry-reset-project-plugin'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/(?P<slug>[\w_-]+)/disable/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/(?P<slug>[\w_-]+)/disable/$',
         sentry.web.frontend.projects.plugins.disable_project_plugin,
         name='sentry-disable-project-plugin'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/(?P<slug>[\w_-]+)/enable/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/(?P<slug>[\w_-]+)/enable/$',
         sentry.web.frontend.projects.plugins.enable_project_plugin,
         name='sentry-enable-project-plugin'),
 
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/remove/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/remove/$',
         RemoveProjectView.as_view(),
         name='sentry-remove-project'),
 
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/tags/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/tags/$',
         sentry.web.frontend.projects.tags.manage_project_tags,
         name='sentry-manage-project-tags'),
 
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/quotas/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/quotas/$',
         sentry.web.frontend.projects.quotas.manage_project_quotas,
         name='sentry-manage-project-quotas'),
 
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/notifications/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/notifications/$',
         sentry.web.frontend.projects.notifications.notification_settings,
         name='sentry-project-notifications'),
 
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/rules/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/rules/$',
         sentry.web.frontend.projects.rules.list_rules,
         name='sentry-project-rules'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/rules/(?P<rule_id>\d+)/edit/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/rules/(?P<rule_id>\d+)/edit/$',
         sentry.web.frontend.projects.rules.create_or_edit_rule,
         name='sentry-edit-project-rule'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/rules/(?P<rule_id>\d+)/remove/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/rules/(?P<rule_id>\d+)/remove/$',
         sentry.web.frontend.projects.rules.remove_rule,
         name='sentry-remove-project-rule'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/rules/new/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/rules/new/$',
         sentry.web.frontend.projects.rules.create_or_edit_rule,
         name='sentry-new-project-rule'),
 
@@ -263,105 +261,105 @@ urlpatterns += patterns('',
         name='sentry-api-crossdomain-xml'),
 
     # Generic API
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/poll/$', api.poll,
+    url(r'^api/(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/poll/$', api.poll,
         name='sentry-api-poll'),
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/resolve/$', api.resolve,
+    url(r'^api/(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/resolve/$', api.resolve,
         name='sentry-api-resolve'),
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/bookmark/$', api.bookmark,
+    url(r'^api/(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/bookmark/$', api.bookmark,
         name='sentry-api-bookmark'),
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/clear/$', api.clear,
+    url(r'^api/(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/clear/$', api.clear,
         name='sentry-api-clear'),
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/remove/$', api.remove_group,
+    url(r'^api/(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/remove/$', api.remove_group,
         name='sentry-api-remove-group'),
 
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?:(?P<project_id>[\w_-]+)/)?groups/trends/$', api.get_group_trends,
+    url(r'^api/(?P<organization_slug>[\w_-]+)/(?:(?P<project_id>[\w_-]+)/)?groups/trends/$', api.get_group_trends,
         name='sentry-api-groups-trends'),
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?:(?P<project_id>[\w_-]+)/)?groups/newest/$', api.get_new_groups,
+    url(r'^api/(?P<organization_slug>[\w_-]+)/(?:(?P<project_id>[\w_-]+)/)?groups/newest/$', api.get_new_groups,
         name='sentry-api-groups-new'),
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?:(?P<project_id>[\w_-]+)/)?groups/resolved/$', api.get_resolved_groups,
+    url(r'^api/(?P<organization_slug>[\w_-]+)/(?:(?P<project_id>[\w_-]+)/)?groups/resolved/$', api.get_resolved_groups,
         name='sentry-api-groups-resolved'),
 
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/set/public/$', api.make_group_public,
+    url(r'^api/(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/set/public/$', api.make_group_public,
         name='sentry-api-set-group-public'),
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/set/private/$', api.make_group_private, name='sentry-api-set-group-private'),
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/set/resolved/$', api.resolve_group,
+    url(r'^api/(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/set/private/$', api.make_group_private, name='sentry-api-set-group-private'),
+    url(r'^api/(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/set/resolved/$', api.resolve_group,
         name='sentry-api-set-group-resolve'),
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/set/muted/$', api.mute_group,
+    url(r'^api/(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/set/muted/$', api.mute_group,
         name='sentry-api-set-group-mute'),
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/set/unresolved/$', api.unresolve_group,
+    url(r'^api/(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/set/unresolved/$', api.unresolve_group,
         name='sentry-api-set-group-unresolve'),
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/tags/(?P<tag_name>[^/]+)/$', api.get_group_tags,
+    url(r'^api/(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/tags/(?P<tag_name>[^/]+)/$', api.get_group_tags,
         name='sentry-api-group-tags'),
 
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?:(?P<project_id>[\w_-]+)/)?stats/$', api.get_stats,
+    url(r'^api/(?P<organization_slug>[\w_-]+)/(?:(?P<project_id>[\w_-]+)/)?stats/$', api.get_stats,
         name='sentry-api-stats'),
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/tags/search/$', api.search_tags,
+    url(r'^api/(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/tags/search/$', api.search_tags,
         name='sentry-api-search-tags'),
-    url(r'^api/(?P<team_slug>[\w_-]+)/users/search/$', api.search_users,
+    url(r'^api/(?P<organization_slug>[\w_-]+)/users/search/$', api.search_users,
         name='sentry-api-search-users'),
-    url(r'^api/(?P<team_slug>[\w_-]+)/projects/search/$', api.search_projects,
+    url(r'^api/(?P<organization_slug>[\w_-]+)/projects/search/$', api.search_projects,
         name='sentry-api-search-projects'),
 
     # TV dashboard
-    url(r'^(?P<team_slug>[\w_-]+)/wall/$', groups.wall_display,
+    url(r'^(?P<organization_slug>[\w_-]+)/teams/(?P<team_slug>[\w_-]+)/wall/$', groups.wall_display,
         name='sentry-wall'),
 
     # Team-wide alerts
-    url(r'^(?P<team_slug>[\w_-]+)/show/alerts/$', alerts.alert_list,
+    url(r'^(?P<organization_slug>[\w_-]+)/teams/(?P<team_slug>[\w_-]+)/show/alerts/$', alerts.alert_list,
         name='sentry-alerts'),
 
     # Explore - Users
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/users/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/users/$',
         users.user_list, name='sentry-users'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/users/(?P<user_id>\d+)/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/users/(?P<user_id>\d+)/$',
         users.user_details, name='sentry-user-details'),
 
     # Explore - Code
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/code/$', explore_code.list_tag,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/code/$', explore_code.list_tag,
         {'selection': 'filenames'}, name='sentry-explore-code'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/code/by/function/$', explore_code.list_tag,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/code/by/function/$', explore_code.list_tag,
         {'selection': 'functions'}, name='sentry-explore-code-by-function'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/code/by/filename/(?P<tag_id>\d+)/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/code/by/filename/(?P<tag_id>\d+)/$',
         explore_code.tag_details, {'selection': 'filenames'}, name='sentry-explore-code-details'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/code/by/function/(?P<tag_id>\d+)/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/code/by/function/(?P<tag_id>\d+)/$',
         explore_code.tag_details, {'selection': 'functions'}, name='sentry-explore-code-details-by-function'),
 
     # Explore
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/$', explore.tag_list,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/$', explore.tag_list,
         name='sentry-explore'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/(?P<key>[^\/]+)/$', explore.tag_value_list,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/(?P<key>[^\/]+)/$', explore.tag_value_list,
         name='sentry-explore-tag'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/(?P<key>[^\/]+)/(?P<value_id>\d+)/$', explore.tag_value_details,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/(?P<key>[^\/]+)/(?P<value_id>\d+)/$', explore.tag_value_details,
         name='sentry-explore-tag-value'),
 
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/$', groups.group,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/$', groups.group,
         name='sentry-group'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/$', groups.group_event_list,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/$', groups.group_event_list,
         name='sentry-group-events'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/(?P<event_id>\d+)/$', groups.group,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/(?P<event_id>\d+)/$', groups.group,
         name='sentry-group-event'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/(?P<event_id>\d+)/replay/$', events.replay_event,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/(?P<event_id>\d+)/replay/$', events.replay_event,
         name='sentry-replay'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/(?P<event_id_or_latest>(\d+|latest))/json/$', groups.group_event_details_json,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/(?P<event_id_or_latest>(\d+|latest))/json/$', groups.group_event_details_json,
         name='sentry-group-event-json'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)/', groups.group_plugin_action,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)/', groups.group_plugin_action,
         name='sentry-group-plugin-action'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/tags/$', groups.group_tag_list,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/tags/$', groups.group_tag_list,
         name='sentry-group-tags'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/tags/(?P<tag_name>[^/]+)/$', groups.group_tag_details,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/tags/(?P<tag_name>[^/]+)/$', groups.group_tag_details,
         name='sentry-group-tag-details'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/alerts/$', alerts.alert_list,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/alerts/$', alerts.alert_list,
         name='sentry-alerts'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/alerts/(?P<alert_id>\d+)/$', alerts.alert_details,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/alerts/(?P<alert_id>\d+)/$', alerts.alert_details,
         name='sentry-alert-details'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/alerts/(?P<alert_id>\d+)/resolve/$', alerts.resolve_alert,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/alerts/(?P<alert_id>\d+)/resolve/$', alerts.resolve_alert,
         name='sentry-resolve-alert'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/stream/$', groups.group_list),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/$', groups.group_list,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/stream/$', groups.group_list),
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/$', groups.group_list,
         name='sentry-stream'),
 
-    url(r'^(?P<team_slug>[\w_-]+)/$', groups.dashboard,
-        name='sentry'),
+    url(r'^(?P<organization_slug>[\w_-]+)/teams/(?P<team_slug>[\w_-]+)/$', groups.dashboard,
+        name='sentry-team-dashboard'),
 
     # Legacy
     url(r'^(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/$', groups.redirect_to_group,
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index be87d329d0..5229939f79 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -128,7 +128,7 @@ class CrossDomainXmlIndexTest(TestCase):
 class SearchUsersTest(TestCase):
     @fixture
     def path(self):
-        return reverse('sentry-api-search-users', args=[self.team.slug])
+        return reverse('sentry-api-search-users', args=[self.organization.slug])
 
     def setUp(self):
         super(SearchUsersTest, self).setUp()
@@ -171,14 +171,18 @@ class SearchUsersTest(TestCase):
 class SearchProjectsTest(TestCase):
     @fixture
     def path(self):
-        return reverse('sentry-api-search-projects', args=[self.team.slug])
+        return reverse('sentry-api-search-projects', args=[self.organization.slug])
 
     def setUp(self):
         super(SearchProjectsTest, self).setUp()
         self.login_as(self.user)
 
-    def test_finds_projects_from_team(self):
-        project = self.create_project(team=self.team, name='Sample')
+    def test_finds_projects_from_org(self):
+        project = self.create_project(
+            organization=self.organization,
+            team=self.team,
+            name='Sample',
+        )
         resp = self.client.get(self.path, {'query': 'sample'})
 
         assert resp.status_code == 200
@@ -192,9 +196,10 @@ class SearchProjectsTest(TestCase):
             'query': 'sample',
         }
 
-    def test_does_not_include_projects_from_other_teams(self):
-        team = self.create_team(owner=self.user, name='Sample')
-        self.create_project(team=team, name='Sample')
+    def test_does_not_include_projects_from_other_organizations(self):
+        org = self.create_organization(owner=self.user, name='Sample')
+        team = self.create_team(organization=org, owner=self.user, name='Sample')
+        self.create_project(organization=org, team=team, name='Sample')
 
         resp = self.client.get(self.path, {'query': 'sample'})
 
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index e8e9638a33..4c21b05606 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -215,11 +215,6 @@ class LoginRedirectTest(TestCase):
         assert resp.status_code == 302
         assert resp['Location'] == reverse('sentry')
 
-    def test_standard_view_works(self):
-        resp = login_redirect(self.make_request(reverse('sentry', args=[1])))
-        assert resp.status_code == 302
-        assert resp['Location'] == reverse('sentry', args=[1])
-
 
 class NotificationSettingsTest(TestCase):
     @fixture
diff --git a/tests/sentry/web/frontend/groups/tests.py b/tests/sentry/web/frontend/groups/tests.py
index 566ba16acf..c9b802ef06 100644
--- a/tests/sentry/web/frontend/groups/tests.py
+++ b/tests/sentry/web/frontend/groups/tests.py
@@ -17,7 +17,7 @@ class GroupDetailsTest(TestCase):
     @fixture
     def path(self):
         return reverse('sentry-group', kwargs={
-            'team_slug': self.team.slug,
+            'organization_slug': self.organization.slug,
             'project_id': self.project.slug,
             'group_id': self.group.id,
         })
@@ -27,12 +27,10 @@ class GroupDetailsTest(TestCase):
         resp = self.client.get(self.path)
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/groups/details.html')
-        assert 'group' in resp.context
-        assert 'project' in resp.context
-        assert 'team' in resp.context
         assert resp.context['group'] == self.group
         assert resp.context['project'] == self.project
         assert resp.context['team'] == self.team
+        assert resp.context['organization'] == self.organization
 
         # ensure we've marked the group as seen
         assert GroupSeen.objects.filter(
@@ -43,7 +41,7 @@ class GroupListTest(TestCase):
     @fixture
     def path(self):
         return reverse('sentry-stream', kwargs={
-            'team_slug': self.team.slug,
+            'organization_slug': self.organization.slug,
             'project_id': self.project.slug,
         })
 
@@ -73,11 +71,10 @@ class GroupListTest(TestCase):
         resp = self.client.get(self.path)
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/groups/group_list.html')
-        assert 'project' in resp.context
-        assert 'team' in resp.context
         assert 'event_list' in resp.context
         assert resp.context['project'] == self.project
         assert resp.context['team'] == self.team
+        assert resp.context['organization'] == self.organization
 
     def test_date_sort(self):
         self.login_as(self.user)
@@ -106,7 +103,7 @@ class GroupEventListTest(TestCase):
     @fixture
     def path(self):
         return reverse('sentry-group-events', kwargs={
-            'team_slug': self.team.slug,
+            'organization_slug': self.organization.slug,
             'project_id': self.project.slug,
             'group_id': self.group.id,
         })
@@ -121,13 +118,10 @@ class GroupEventListTest(TestCase):
         resp = self.client.get(self.path)
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/groups/event_list.html')
-        assert 'group' in resp.context
-        assert 'project' in resp.context
-        assert 'team' in resp.context
-        assert 'event_list' in resp.context
         assert resp.context['project'] == self.project
         assert resp.context['team'] == self.team
         assert resp.context['group'] == self.group
+        assert resp.context['organization'] == self.organization
         event_list = resp.context['event_list']
         assert len(event_list) == 2
         assert event_list[0] == event2
@@ -138,7 +132,7 @@ class GroupTagListTest(TestCase):
     @fixture
     def path(self):
         return reverse('sentry-group-tags', kwargs={
-            'team_slug': self.team.slug,
+            'organization_slug': self.organization.slug,
             'project_id': self.project.slug,
             'group_id': self.group.id,
         })
@@ -148,20 +142,18 @@ class GroupTagListTest(TestCase):
         resp = self.client.get(self.path)
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/groups/tag_list.html')
-        assert 'group' in resp.context
-        assert 'project' in resp.context
-        assert 'team' in resp.context
         assert 'tag_list' in resp.context
         assert resp.context['project'] == self.project
         assert resp.context['team'] == self.team
         assert resp.context['group'] == self.group
+        assert resp.context['organization'] == self.organization
 
 
 class GroupEventDetailsTest(TestCase):
     @fixture
     def path(self):
         return reverse('sentry-group-event', kwargs={
-            'team_slug': self.team.slug,
+            'organization_slug': self.organization.slug,
             'project_id': self.project.slug,
             'group_id': self.group.id,
             'event_id': self.event.id,
@@ -172,21 +164,18 @@ class GroupEventDetailsTest(TestCase):
         resp = self.client.get(self.path)
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/groups/details.html')
-        assert 'group' in resp.context
-        assert 'project' in resp.context
-        assert 'team' in resp.context
-        assert 'event' in resp.context
         assert resp.context['project'] == self.project
         assert resp.context['team'] == self.team
         assert resp.context['group'] == self.group
         assert resp.context['event'] == self.event
+        assert resp.context['organization'] == self.organization
 
 
 class GroupEventJsonTest(TestCase):
     @fixture
     def path(self):
         return reverse('sentry-group-event-json', kwargs={
-            'team_slug': self.team.slug,
+            'organization_slug': self.organization.slug,
             'project_id': self.project.slug,
             'group_id': self.group.id,
             'event_id_or_latest': self.event.id,
diff --git a/tests/sentry/web/frontend/plugins/tests.py b/tests/sentry/web/frontend/plugins/tests.py
index d70c551fed..4381a68640 100644
--- a/tests/sentry/web/frontend/plugins/tests.py
+++ b/tests/sentry/web/frontend/plugins/tests.py
@@ -10,7 +10,7 @@ class ManageProjectPluginsTest(TestCase):
     @fixture
     def path(self):
         return reverse('sentry-manage-project-plugins', args=[
-            self.team.slug, self.project.id])
+            self.organization.slug, self.project.id])
 
     def test_requires_authentication(self):
         self.assertRequiresAuthentication(self.path)
diff --git a/tests/sentry/web/frontend/projects/tests.py b/tests/sentry/web/frontend/projects/tests.py
index b230bbe1e5..22a04f66b4 100644
--- a/tests/sentry/web/frontend/projects/tests.py
+++ b/tests/sentry/web/frontend/projects/tests.py
@@ -17,7 +17,7 @@ logger = logging.getLogger(__name__)
 class ManageProjectKeysTest(TestCase):
     @fixture
     def path(self):
-        return reverse('sentry-manage-project-keys', args=[self.team.slug, self.project.id])
+        return reverse('sentry-manage-project-keys', args=[self.organization.slug, self.project.id])
 
     def test_requires_authentication(self):
         self.assertRequiresAuthentication(self.path)
@@ -35,7 +35,7 @@ class ManageProjectKeysTest(TestCase):
 class NewProjectKeyTest(TestCase):
     @fixture
     def path(self):
-        return reverse('sentry-new-project-key', args=[self.team.slug, self.project.id])
+        return reverse('sentry-new-project-key', args=[self.organization.slug, self.project.id])
 
     def test_requires_authentication(self):
         self.assertRequiresAuthentication(self.path)
@@ -58,7 +58,7 @@ class RemoveProjectKeyTest(TestCase):
 
     @fixture
     def path(self):
-        return reverse('sentry-remove-project-key', args=[self.team.slug, self.project.id, self.key.id])
+        return reverse('sentry-remove-project-key', args=[self.organization.slug, self.project.id, self.key.id])
 
     def test_requires_authentication(self):
         self.assertRequiresAuthentication(self.path, 'POST')
@@ -78,7 +78,7 @@ class RemoveProjectKeyTest(TestCase):
 class DashboardTest(TestCase):
     @fixture
     def path(self):
-        return reverse('sentry', args=[self.team.slug])
+        return reverse('sentry-team-dashboard', args=[self.organization.slug, self.team.slug])
 
     def test_requires_authentication(self):
         self.assertRequiresAuthentication(self.path)
@@ -93,8 +93,10 @@ class DashboardTest(TestCase):
 
         can_create_projects.assert_called_once_with(self.user, team=self.team)
 
+        url = reverse('sentry-create-project', args=[self.organization.slug])
+
         assert resp.status_code == 302
-        assert resp['Location'] == 'http://testserver' + reverse('sentry-create-project', args=[self.organization.id])
+        assert resp['Location'] == 'http://testserver%s?team=%s' % (url, self.team.slug)
 
     @mock.patch('sentry.web.frontend.groups.can_create_projects')
     def test_does_not_reidrect_if_missing_project_permission(self, can_create_projects):
@@ -122,6 +124,7 @@ class DashboardTest(TestCase):
 
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/dashboard.html')
+        assert resp.context['organization'] == self.organization
         assert resp.context['team'] == self.team
         assert resp.context['project_list'] == [self.project]
 
@@ -129,7 +132,7 @@ class DashboardTest(TestCase):
 class GetStartedTest(TestCase):
     @fixture
     def path(self):
-        return reverse('sentry-get-started', args=[self.team.slug, self.project.slug])
+        return reverse('sentry-get-started', args=[self.organization.slug, self.project.slug])
 
     def test_requires_authentication(self):
         self.assertRequiresAuthentication(self.path)
@@ -142,12 +145,13 @@ class GetStartedTest(TestCase):
         self.assertTemplateUsed(resp, 'sentry/get_started.html')
         assert resp.context['project'] == self.project
         assert resp.context['team'] == self.team
+        assert resp.context['organization'] == self.organization
 
 
 class ManageProjectTagsTest(TestCase):
     @fixture
     def path(self):
-        return reverse('sentry-manage-project-tags', args=[self.team.slug, self.project.id])
+        return reverse('sentry-manage-project-tags', args=[self.organization.slug, self.project.id])
 
     def test_requires_authentication(self):
         self.assertRequiresAuthentication(self.path)
@@ -162,6 +166,7 @@ class ManageProjectTagsTest(TestCase):
         resp = self.client.get(self.path)
         assert resp.status_code == 200
         self.assertTemplateUsed('sentry/projects/manage_tags.html')
+        assert resp.context['organization'] == self.organization
         assert resp.context['team'] == self.team
         assert resp.context['project'] == self.project
         tag_list = resp.context['tag_list']
diff --git a/tests/sentry/web/frontend/test_create_organization.py b/tests/sentry/web/frontend/test_create_organization.py
index 773698b8b2..787b6f6741 100644
--- a/tests/sentry/web/frontend/test_create_organization.py
+++ b/tests/sentry/web/frontend/test_create_organization.py
@@ -35,5 +35,5 @@ class CreateOrganizationTest(TestCase):
         assert team.name == 'bar'
         assert team.owner == org.owner
 
-        redirect_uri = reverse('sentry-create-project', args=[org.id])
-        assert resp['Location'] == 'http://testserver' + redirect_uri
+        redirect_uri = reverse('sentry-create-project', args=[org.slug])
+        assert resp['Location'] == 'http://testserver%s?team=%s' % (redirect_uri, team.slug)
diff --git a/tests/sentry/web/frontend/test_create_organization_member.py b/tests/sentry/web/frontend/test_create_organization_member.py
index aa67183dde..7b7888d037 100644
--- a/tests/sentry/web/frontend/test_create_organization_member.py
+++ b/tests/sentry/web/frontend/test_create_organization_member.py
@@ -10,7 +10,7 @@ from sentry.testutils import TestCase
 class CreateOrganizationMemberTest(TestCase):
     def test_renders_with_context(self):
         organization = self.create_organization()
-        path = reverse('sentry-create-organization-member', args=[organization.id])
+        path = reverse('sentry-create-organization-member', args=[organization.slug])
         self.login_as(self.user)
         resp = self.client.get(path)
         assert resp.status_code == 200
@@ -20,7 +20,7 @@ class CreateOrganizationMemberTest(TestCase):
 
     def test_valid_for_invites(self):
         organization = self.create_organization(name='Default')
-        path = reverse('sentry-create-organization-member', args=[organization.id])
+        path = reverse('sentry-create-organization-member', args=[organization.slug])
         self.login_as(self.user)
 
         with self.settings(SENTRY_ENABLE_INVITES=True):
@@ -38,7 +38,7 @@ class CreateOrganizationMemberTest(TestCase):
         assert member.type == OrganizationMemberType.MEMBER
         assert member.user is None
 
-        redirect_uri = reverse('sentry-organization-member-settings', args=[organization.id, member.id])
+        redirect_uri = reverse('sentry-organization-member-settings', args=[organization.slug, member.id])
         assert resp['Location'] == 'http://testserver' + redirect_uri
 
         assert len(mail.outbox) == 1
@@ -47,7 +47,7 @@ class CreateOrganizationMemberTest(TestCase):
 
     def test_existing_user_for_invite(self):
         organization = self.create_organization()
-        path = reverse('sentry-create-organization-member', args=[organization.id])
+        path = reverse('sentry-create-organization-member', args=[organization.slug])
         self.login_as(self.user)
 
         user = self.create_user('foo@example.com')
@@ -75,12 +75,12 @@ class CreateOrganizationMemberTest(TestCase):
         assert member.user == user
         assert member.email is None
 
-        redirect_uri = reverse('sentry-organization-member-settings', args=[organization.id, member.id])
+        redirect_uri = reverse('sentry-organization-member-settings', args=[organization.slug, member.id])
         assert resp['Location'] == 'http://testserver' + redirect_uri
 
     def test_valid_for_direct_add(self):
         organization = self.create_organization()
-        path = reverse('sentry-create-organization-member', args=[organization.id])
+        path = reverse('sentry-create-organization-member', args=[organization.slug])
         self.login_as(self.user)
 
         user = self.create_user('foo@example.com')
@@ -100,12 +100,12 @@ class CreateOrganizationMemberTest(TestCase):
         assert member.type == OrganizationMemberType.MEMBER
         assert member.email is None
 
-        redirect_uri = reverse('sentry-organization-member-settings', args=[organization.id, member.id])
+        redirect_uri = reverse('sentry-organization-member-settings', args=[organization.slug, member.id])
         assert resp['Location'] == 'http://testserver' + redirect_uri
 
     def test_invalid_user_for_direct_add(self):
         organization = self.create_organization()
-        path = reverse('sentry-create-organization-member', args=[organization.id])
+        path = reverse('sentry-create-organization-member', args=[organization.slug])
         self.login_as(self.user)
 
         with self.settings(SENTRY_ENABLE_INVITES=False):
diff --git a/tests/sentry/web/frontend/test_create_project.py b/tests/sentry/web/frontend/test_create_project.py
index 922bbcbb51..1b96bef254 100644
--- a/tests/sentry/web/frontend/test_create_project.py
+++ b/tests/sentry/web/frontend/test_create_project.py
@@ -10,7 +10,7 @@ class CreateProjectTest(TestCase):
     def test_renders_with_context(self):
         organization = self.create_organization()
         team = self.create_team(organization=organization)
-        path = reverse('sentry-create-project', args=[organization.id])
+        path = reverse('sentry-create-project', args=[organization.slug])
         self.login_as(self.user)
         resp = self.client.get(path)
         assert resp.status_code == 200
@@ -21,7 +21,7 @@ class CreateProjectTest(TestCase):
     def test_valid_params(self):
         organization = self.create_organization()
         team = self.create_team(organization=organization, name='Foo', slug='foo')
-        path = reverse('sentry-create-project', args=[organization.id])
+        path = reverse('sentry-create-project', args=[organization.slug])
         self.login_as(self.user)
         resp = self.client.post(path, {
             'name': 'bar',
@@ -35,5 +35,5 @@ class CreateProjectTest(TestCase):
         assert project.platform == 'python'
         assert project.team == team
 
-        redirect_uri = reverse('sentry-docs-client', args=[team.slug, project.slug, project.platform])
+        redirect_uri = reverse('sentry-docs-client', args=[organization.slug, project.slug, project.platform])
         assert resp['Location'] == 'http://testserver' + redirect_uri
diff --git a/tests/sentry/web/frontend/test_create_team.py b/tests/sentry/web/frontend/test_create_team.py
index 08bf502987..fa412ba2e8 100644
--- a/tests/sentry/web/frontend/test_create_team.py
+++ b/tests/sentry/web/frontend/test_create_team.py
@@ -9,7 +9,7 @@ from sentry.testutils import TestCase
 class CreateTeamTest(TestCase):
     def test_renders_with_context(self):
         organization = self.create_organization()
-        path = reverse('sentry-create-team', args=[organization.id])
+        path = reverse('sentry-create-team', args=[organization.slug])
         self.login_as(self.user)
         resp = self.client.get(path)
         assert resp.status_code == 200
@@ -19,7 +19,7 @@ class CreateTeamTest(TestCase):
 
     def test_valid_params(self):
         organization = self.create_organization()
-        path = reverse('sentry-create-team', args=[organization.id])
+        path = reverse('sentry-create-team', args=[organization.slug])
         self.login_as(self.user)
         resp = self.client.post(path, {
             'name': 'bar',
@@ -30,5 +30,5 @@ class CreateTeamTest(TestCase):
 
         assert team.name == 'bar'
 
-        redirect_uri = reverse('sentry-create-project', args=[organization.id])
-        assert resp['Location'] == 'http://testserver' + redirect_uri
+        redirect_uri = reverse('sentry-create-project', args=[organization.slug])
+        assert resp['Location'] == 'http://testserver%s?team=%s' % (redirect_uri, team.slug)
diff --git a/tests/sentry/web/frontend/test_organization_home.py b/tests/sentry/web/frontend/test_organization_home.py
index 5638bdd3b2..e65aef8aff 100644
--- a/tests/sentry/web/frontend/test_organization_home.py
+++ b/tests/sentry/web/frontend/test_organization_home.py
@@ -11,7 +11,7 @@ class OrganizationHomeTest(TestCase):
         team = self.create_team(organization=organization)
         project = self.create_project(team=team)
 
-        path = reverse('sentry-organization-home', args=[organization.id])
+        path = reverse('sentry-organization-home', args=[organization.slug])
 
         self.login_as(self.user)
 
diff --git a/tests/sentry/web/frontend/test_organization_member_settings.py b/tests/sentry/web/frontend/test_organization_member_settings.py
index b8ab450a14..25d8e67a22 100644
--- a/tests/sentry/web/frontend/test_organization_member_settings.py
+++ b/tests/sentry/web/frontend/test_organization_member_settings.py
@@ -26,7 +26,7 @@ class OrganizationMemberSettingsTest(TestCase):
         member.teams.add(team_2)
 
         path = reverse('sentry-organization-member-settings',
-                       args=[organization.id, member.id])
+                       args=[organization.slug, member.id])
 
         self.login_as(self.user)
 
@@ -54,7 +54,7 @@ class OrganizationMemberSettingsTest(TestCase):
         )
 
         path = reverse('sentry-organization-member-settings',
-                       args=[organization.id, member.id])
+                       args=[organization.slug, member.id])
 
         self.login_as(self.user)
 
@@ -97,7 +97,7 @@ class OrganizationMemberSettingsTest(TestCase):
         )
 
         path = reverse('sentry-organization-member-settings',
-                       args=[organization.id, member.id])
+                       args=[organization.slug, member.id])
 
         self.login_as(self.user)
 
@@ -140,7 +140,7 @@ class OrganizationMemberSettingsTest(TestCase):
         )
 
         path = reverse('sentry-organization-member-settings',
-                       args=[organization.id, member.id])
+                       args=[organization.slug, member.id])
 
         self.login_as(self.user)
 
@@ -175,7 +175,7 @@ class OrganizationMemberSettingsTest(TestCase):
         )
 
         path = reverse('sentry-organization-member-settings',
-                       args=[organization.id, member.id])
+                       args=[organization.slug, member.id])
 
         self.login_as(admin)
 
diff --git a/tests/sentry/web/frontend/test_organization_members.py b/tests/sentry/web/frontend/test_organization_members.py
index 388f8c7c58..fcf0be4a08 100644
--- a/tests/sentry/web/frontend/test_organization_members.py
+++ b/tests/sentry/web/frontend/test_organization_members.py
@@ -28,7 +28,7 @@ class OrganizationMembersTest(TestCase):
         )
         member_om.teams.add(team_2)
 
-        path = reverse('sentry-organization-members', args=[organization.id])
+        path = reverse('sentry-organization-members', args=[organization.slug])
 
         self.login_as(self.user)
 
diff --git a/tests/sentry/web/frontend/test_organization_settings.py b/tests/sentry/web/frontend/test_organization_settings.py
index 851f27308c..8f7fe6710d 100644
--- a/tests/sentry/web/frontend/test_organization_settings.py
+++ b/tests/sentry/web/frontend/test_organization_settings.py
@@ -12,7 +12,7 @@ class OrganizationSettingsTest(TestCase):
         team = self.create_team(organization=organization)
         project = self.create_project(team=team)
 
-        path = reverse('sentry-organization-settings', args=[organization.id])
+        path = reverse('sentry-organization-settings', args=[organization.slug])
 
         self.login_as(self.user)
 
@@ -30,7 +30,7 @@ class OrganizationSettingsTest(TestCase):
         team = self.create_team(organization=organization)
         project = self.create_project(team=team)
 
-        path = reverse('sentry-organization-settings', args=[organization.id])
+        path = reverse('sentry-organization-settings', args=[organization.slug])
 
         self.login_as(self.user)
 
diff --git a/tests/sentry/web/frontend/test_remove_organization.py b/tests/sentry/web/frontend/test_remove_organization.py
index cf4061b269..361b2decbd 100644
--- a/tests/sentry/web/frontend/test_remove_organization.py
+++ b/tests/sentry/web/frontend/test_remove_organization.py
@@ -12,7 +12,7 @@ class RemoveOrganizationTest(TestCase):
 
         self.organization = self.create_organization(name='foo', owner=self.user)
         self.team = self.create_team(organization=self.organization)
-        self.path = reverse('sentry-remove-organization', args=[self.organization.id])
+        self.path = reverse('sentry-remove-organization', args=[self.organization.slug])
 
         self.login_as(self.user)
 
diff --git a/tests/sentry/web/frontend/test_remove_project.py b/tests/sentry/web/frontend/test_remove_project.py
index 2191179872..a7926c4431 100644
--- a/tests/sentry/web/frontend/test_remove_project.py
+++ b/tests/sentry/web/frontend/test_remove_project.py
@@ -16,7 +16,7 @@ class RemoveProjectTest(TestCase):
         organization = self.create_organization(owner=self.owner)
         self.team = self.create_team(name='bar', organization=organization)
         self.project = self.create_project(name='bar', team=self.team)
-        self.path = reverse('sentry-remove-project', args=[self.team.slug, self.project.slug])
+        self.path = reverse('sentry-remove-project', args=[organization.slug, self.project.slug])
 
     def test_requires_authentication(self):
         self.assertRequiresAuthentication(self.path, 'POST')
diff --git a/tests/sentry/web/frontend/test_remove_team.py b/tests/sentry/web/frontend/test_remove_team.py
index 56ba1b7de5..6770a986be 100644
--- a/tests/sentry/web/frontend/test_remove_team.py
+++ b/tests/sentry/web/frontend/test_remove_team.py
@@ -14,7 +14,7 @@ class RemoveTeamTest(TestCase):
         owner = self.create_user(email='example@example.com')
         organization = self.create_organization(owner=owner)
         self.team = self.create_team(name='bar', organization=organization)
-        self.path = reverse('sentry-remove-team', args=[self.team.slug])
+        self.path = reverse('sentry-remove-team', args=[organization.slug, self.team.slug])
         self.login_as(self.organization.owner)
 
     @mock.patch('sentry.web.frontend.remove_team.can_remove_team', mock.Mock(return_value=True))
diff --git a/tests/sentry/web/frontend/test_team_settings.py b/tests/sentry/web/frontend/test_team_settings.py
index 6e5eb9df94..32b779fe4f 100644
--- a/tests/sentry/web/frontend/test_team_settings.py
+++ b/tests/sentry/web/frontend/test_team_settings.py
@@ -10,7 +10,7 @@ from sentry.testutils import TestCase
 class TeamSettingsTest(TestCase):
     @fixture
     def path(self):
-        return reverse('sentry-manage-team', args=[self.team.slug])
+        return reverse('sentry-manage-team', args=[self.organization.slug, self.team.slug])
 
     def test_renders_with_context(self):
         self.login_as(self.team.owner)
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index 567c0e597c..8b31ff6421 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -94,7 +94,7 @@ class ReplayTest(TestCase):
     @fixture
     def path(self):
         return reverse('sentry-replay', kwargs={
-            'team_slug': self.team.slug,
+            'organization_slug': self.organization.slug,
             'project_id': self.project.slug,
             'group_id': self.group.id,
             'event_id': self.event.id,
@@ -184,7 +184,7 @@ class RemoveProjectTest(PermissionBase):
 
     @fixture
     def path(self):
-        return reverse('sentry-remove-project', kwargs={'team_slug': self.team.slug, 'project_slug': self.project.slug})
+        return reverse('sentry-remove-project', kwargs={'organization_slug': self.organization.slug, 'project_slug': self.project.slug})
 
     def test_admin_cannot_remove_default(self):
         with self.settings(SENTRY_PROJECT=self.project.id):
diff --git a/tests/sentry/web/frontend/users/tests.py b/tests/sentry/web/frontend/users/tests.py
index 8ad24eb8d8..8eeeb8d4f3 100644
--- a/tests/sentry/web/frontend/users/tests.py
+++ b/tests/sentry/web/frontend/users/tests.py
@@ -17,7 +17,7 @@ class UserListTest(TestCase):
     @fixture
     def path(self):
         return reverse('sentry-users', args=[
-            self.team.slug, self.project.slug])
+            self.organization.slug, self.project.slug])
 
     def test_missing_permission(self):
         resp = self.client.get(self.path)
@@ -48,7 +48,7 @@ class UserDetailsTest(TestCase):
     @fixture
     def path(self):
         return reverse('sentry-user-details', args=[
-            self.team.slug, self.project.slug, self.tag.id])
+            self.organization.slug, self.project.slug, self.tag.id])
 
     @fixture
     def tag(self):
