commit 5f709511e7603e854529a9dc5f36188ea8f7a18f
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 28 14:10:25 2010 -0700

    Some initial work on plugin architecture

diff --git a/example_project/settings.py b/example_project/settings.py
index 70f571c59c..8d658f5607 100644
--- a/example_project/settings.py
+++ b/example_project/settings.py
@@ -100,6 +100,7 @@ INSTALLED_APPS = (
     'django.contrib.messages',
     'sentry',
     'sentry.client',
+    'sentry.plugins.redmine',
     'paging',
     'south',
     'indexer',
diff --git a/sentry/plugins/__init__.py b/sentry/plugins/__init__.py
new file mode 100644
index 0000000000..1100c2ee26
--- /dev/null
+++ b/sentry/plugins/__init__.py
@@ -0,0 +1,64 @@
+# Based on http://martyalchin.com/2008/jan/10/simple-plugin-framework/
+from django.core.urlresolvers import reverse
+
+class PluginMount(type):
+    def __init__(cls, name, bases, attrs):
+        if not hasattr(cls, 'plugins'):
+            # This branch only executes when processing the mount point itself.
+            # So, since this is a new plugin type, not an implementation, this
+            # class shouldn't be registered as a plugin. Instead, it sets up a
+            # list where plugins can be registered later.
+            cls.plugins = {}
+        else:
+            # This must be a plugin implementation, which should be registered.
+            # Simply appending it to the list is all that's needed to keep
+            # track of it later.
+            if not cls.slug:
+                cls.slug = cls.title.replace(' ', '-').lower()
+            cls.plugins[cls.slug] = cls
+
+class ActionProvider:
+    """
+    Base interface for adding action providers.
+
+    Plugins implementing this reference should provide the following attributes:
+
+    ========  ========================================================
+    title     The text to be displayed, describing the action
+
+    view      The view which will perform this action
+
+    selected  Boolean indicating whether the action is the one
+              currently being performed
+    
+    ========  ========================================================
+    """
+    __metaclass__ = PluginMount
+
+    slug = None
+
+    def __init__(self):
+        self.url = reverse('sentry-plugin-action', args=(self.slug,))
+
+    def __call__(self, request):
+        self.selected = request.META['PATH_INFO'] == self.url
+        if not self.selected:
+            return
+
+        return self.perform(request)
+
+class GroupActionProvider:
+    __metaclass__ = PluginMount
+
+    slug = None
+    
+    def __init__(self, group_id):
+        self.url = reverse('sentry-group-plugin-action', args=(group_id, self.slug))
+    
+    def __call__(self, request, group):
+        self.selected = request.META['PATH_INFO'] == self.url
+        if not self.selected:
+            return
+        
+        return self.perform(request, group)
+    
\ No newline at end of file
diff --git a/sentry/plugins/redmine/__init__.py b/sentry/plugins/redmine/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/sentry/plugins/redmine/models.py b/sentry/plugins/redmine/models.py
new file mode 100644
index 0000000000..3277ca1d85
--- /dev/null
+++ b/sentry/plugins/redmine/models.py
@@ -0,0 +1,20 @@
+from django.db import models
+from django.shortcuts import render_to_response
+
+from sentry.models import GroupedMessage
+from sentry.plugins import GroupActionProvider
+
+class RedmineIssue(models.Model):
+    group = models.ForeignKey(GroupedMessage)
+    issue_id = models.PositiveIntegerField()
+
+class CreateRedmineIssue(GroupActionProvider):
+    title = 'Create Redmine Issue'
+    
+    def perform(self, request, group):
+        if request.POST:
+            response = '...'
+
+            RedmineIssue.objects.create(group=group, issue_id=response['issue_id'])
+
+        return render_to_response('sentry/plugins/redmine/create_issue.html', locals())
\ No newline at end of file
diff --git a/sentry/templates/sentry/group/details.html b/sentry/templates/sentry/group/details.html
index f2f1b67c8b..6732557e7f 100644
--- a/sentry/templates/sentry/group/details.html
+++ b/sentry/templates/sentry/group/details.html
@@ -8,7 +8,12 @@
 
 {% block content %}
 	<div id="sidebar">
-		<a href="{% url sentry %}">&laquo; back to list</a>
+		<ul class="actions">
+			<li><a href="{% url sentry %}">&laquo; back to list</a></li>
+			{% for link, label in group|get_actions %}
+				<li><a href="{{ link }}">{{ label }}</a></li>
+			{% endfor %}
+		</ul>
 		{% if group|can_chart %}
 			<h2>Last 24 Hours</h2>
 
diff --git a/sentry/templates/sentry/plugins/redmine/create_issue.html b/sentry/templates/sentry/plugins/redmine/create_issue.html
new file mode 100644
index 0000000000..47756d94de
--- /dev/null
+++ b/sentry/templates/sentry/plugins/redmine/create_issue.html
@@ -0,0 +1,8 @@
+{% extends "sentry/group/details.html" %}
+
+{% load paging_extras %}
+
+{% block inner %}
+	<h2>Create Redmine Issue</h2>
+	<p>WOOOO</p>
+{% endblock %}
\ No newline at end of file
diff --git a/sentry/templatetags/sentry_helpers.py b/sentry/templatetags/sentry_helpers.py
index 11e098432b..8458febac3 100644
--- a/sentry/templatetags/sentry_helpers.py
+++ b/sentry/templatetags/sentry_helpers.py
@@ -3,6 +3,7 @@ from django.db.models import Count
 from django.utils import simplejson
 
 from sentry.helpers import get_db_engine
+from sentry.plugins import GroupActionProvider
 
 import datetime
 try:
@@ -78,4 +79,10 @@ chart_url = register.filter(chart_url)
 def sentry_version():
     import sentry
     return '.'.join(map(str, sentry.__version__))
-sentry_version = register.simple_tag(sentry_version)
\ No newline at end of file
+sentry_version = register.simple_tag(sentry_version)
+
+def get_actions(group):
+    for cls in GroupActionProvider.plugins.itervalues():
+        action = cls(group.pk)
+        yield action.url, action.title
+get_actions = register.filter(get_actions)
\ No newline at end of file
diff --git a/sentry/urls.py b/sentry/urls.py
index fff3b8b03b..146a93b229 100644
--- a/sentry/urls.py
+++ b/sentry/urls.py
@@ -32,6 +32,7 @@ urlpatterns = patterns('',
     url(r'^group/(\d+)/messages/(\d+)$', views.group_message_details, name='sentry-group-message'),
     url(r'^group/(\d+)/urls$', views.group_urls, name='sentry-group-urls'),
     url(r'^group/(\d+)/servers$', views.group_servers, name='sentry-group-servers'),
+    url(r'^group/(\d+)/actions/([\w_-]+)', views.group_plugin_action, name='sentry-group-plugin-action'),
 
     url(r'^$', views.index, name='sentry'),
 )
diff --git a/sentry/views.py b/sentry/views.py
index 9fbf6e87ce..58a58edc9a 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -13,7 +13,7 @@ from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.db.models import Count
 from django.http import HttpResponse, HttpResponseBadRequest, \
-    HttpResponseForbidden, HttpResponseRedirect
+    HttpResponseForbidden, HttpResponseRedirect, Http404
 from django.shortcuts import render_to_response, get_object_or_404
 from django.template.loader import render_to_string
 from django.utils import simplejson
@@ -23,6 +23,7 @@ from django.views.decorators.csrf import csrf_protect, csrf_exempt
 
 from sentry import settings
 from sentry.models import GroupedMessage, Message
+from sentry.plugins import GroupActionProvider
 from sentry.templatetags.sentry_helpers import with_priority
 from sentry.reporter import ImprovedExceptionReporter
 
@@ -81,7 +82,7 @@ def login(request):
     
     context = locals()
     context.update(csrf(request))
-    return render_to_response('sentry/login.html', locals(), )
+    return render_to_response('sentry/login.html', locals())
 
 def logout(request):
     from django.contrib.auth import logout
@@ -306,3 +307,16 @@ def store(request):
     GroupedMessage.objects.from_kwargs(**data)
     
     return HttpResponse()
+
+@login_required
+def group_plugin_action(request, group_id, slug):
+    group = get_object_or_404(GroupedMessage, pk=group_id)
+    
+    try:
+        cls = GroupActionProvider.plugins[slug]
+    except KeyError:
+        raise Http404('Plugin not found')
+    response = cls(group_id)(request, group)
+    if response:
+        return response
+    return HttpResponseRedirect(request.META['HTTP_REFERER'])
\ No newline at end of file
