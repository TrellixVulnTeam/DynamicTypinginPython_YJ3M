commit cd9dda8d3bb47977f3082852ca803a83284a40b1
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Jul 5 15:00:59 2018 -0700

    feat(discover): Loading list of tags falls back to promoted tag list (#8912)
    
    Since the query to fetch all tags might fail, we fall back to a hardcoded list of promoted tags and still load the page
    
    Closes APP-397

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
index 30cd8eb392..6124436b07 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
@@ -1,22 +1,22 @@
-// const PROMOTED_TAGS = [
-//   {name: 'level', type: 'string'},
-//   {name: 'logger', type: 'string'},
-//   {name: 'server_name', type: 'string'},
-//   {name: 'transaction', type: 'string'},
-//   {name: 'environment', type: 'string'},
-//   {name: 'site', type: 'string'},
-//   {name: 'url', type: 'string'},
-//   {name: 'app_device', type: 'string'},
-//   {name: 'device', type: 'string'},
-//   {name: 'device_family', type: 'string'},
-//   {name: 'runtime', type: 'string'},
-//   {name: 'runtime_name', type: 'string'},
-//   {name: 'browser', type: 'string'},
-//   {name: 'browser_name', type: 'string'},
-//   {name: 'os', type: 'string'},
-//   {name: 'os_name', type: 'string'},
-//   {name: 'os_rooted', type: 'number'},
-// ];
+const PROMOTED_TAGS = [
+  {name: 'level', type: 'string'},
+  {name: 'logger', type: 'string'},
+  {name: 'server_name', type: 'string'},
+  {name: 'transaction', type: 'string'},
+  {name: 'environment', type: 'string'},
+  {name: 'site', type: 'string'},
+  {name: 'url', type: 'string'},
+  {name: 'app_device', type: 'string'},
+  {name: 'device', type: 'string'},
+  {name: 'device_family', type: 'string'},
+  {name: 'runtime', type: 'string'},
+  {name: 'runtime_name', type: 'string'},
+  {name: 'browser', type: 'string'},
+  {name: 'browser_name', type: 'string'},
+  {name: 'os', type: 'string'},
+  {name: 'os_name', type: 'string'},
+  {name: 'os_rooted', type: 'number'},
+];
 
 const COLUMNS = [
   {name: 'os_build', type: 'string'},
@@ -83,4 +83,4 @@ const CONDITION_OPERATORS = [
 
 const TOPK_COUNTS = [5, 10, 20, 50, 100];
 
-export {COLUMNS, CONDITION_OPERATORS, TOPK_COUNTS};
+export {COLUMNS, PROMOTED_TAGS, CONDITION_OPERATORS, TOPK_COUNTS};
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
index 0342a13fec..86c461d897 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
@@ -3,7 +3,7 @@
 import moment from 'moment-timezone';
 
 import {Client} from 'app/api';
-import {COLUMNS} from './data';
+import {COLUMNS, PROMOTED_TAGS} from './data';
 
 const DATE_TIME_FORMAT = 'YYYY-MM-DDTHH:mm:ss';
 
@@ -57,9 +57,13 @@ export default function createQueryBuilder(initial = {}, organization) {
         .subtract(90, 'days')
         .format(DATE_TIME_FORMAT),
       end: moment().format(DATE_TIME_FORMAT),
-    }).then(res => {
-      tags = res.data[0].tags_key;
-    });
+    })
+      .then(res => {
+        tags = res.data[0].tags_key.map(tag => ({name: tag, type: 'string'}));
+      })
+      .catch(err => {
+        tags = PROMOTED_TAGS;
+      });
   }
 
   function getInternal() {
@@ -110,6 +114,6 @@ export default function createQueryBuilder(initial = {}, organization) {
 
   // Get all columns, including tags
   function getColumns() {
-    return [...COLUMNS, ...tags.map(tag => ({name: tag, type: 'string'}))];
+    return [...COLUMNS, ...tags];
   }
 }
diff --git a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
index 1ca7cc84d4..8a5a65400f 100644
--- a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
@@ -15,4 +15,67 @@ describe('Query Builder', function() {
     expect(external.orderby).toBe('-event_id');
     expect(external.limit).toBe(1000);
   });
+
+  describe('loads()', function() {
+    afterEach(function() {
+      MockApiClient.clearMockResponses();
+    });
+
+    it('loads tags', async function() {
+      const discoverMock = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/discover/',
+        method: 'POST',
+        body: {
+          data: [{tags_key: ['tag1', 'tag2']}],
+        },
+      });
+      const queryBuilder = createQueryBuilder(
+        {},
+        TestStubs.Organization({projects: [TestStubs.Project()]})
+      );
+      await queryBuilder.load();
+
+      expect(discoverMock).toHaveBeenCalledWith(
+        '/organizations/org-slug/discover/',
+        expect.objectContaining({
+          data: expect.objectContaining({
+            aggregations: [['topK(1000)', 'tags_key', 'tags_key']],
+            projects: [2],
+            start: '2017-07-19T02:41:20',
+            end: '2017-10-17T02:41:20',
+          }),
+        })
+      );
+
+      expect(queryBuilder.getColumns()).toContainEqual({name: 'tag1', type: 'string'});
+      expect(queryBuilder.getColumns()).toContainEqual({name: 'tag2', type: 'string'});
+      expect(queryBuilder.getColumns()).not.toContainEqual({
+        name: 'environment',
+        type: 'string',
+      });
+    });
+
+    it('loads hardcoded tags when API request fails', async function() {
+      const discoverMock = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/discover/',
+        method: 'POST',
+      });
+      const queryBuilder = createQueryBuilder(
+        {},
+        TestStubs.Organization({projects: [TestStubs.Project()]})
+      );
+      await queryBuilder.load();
+
+      expect(discoverMock).toHaveBeenCalled();
+
+      expect(queryBuilder.getColumns()).toContainEqual({
+        name: 'environment',
+        type: 'string',
+      });
+      expect(queryBuilder.getColumns()).not.toContainEqual({
+        name: 'tag1',
+        type: 'string',
+      });
+    });
+  });
 });
