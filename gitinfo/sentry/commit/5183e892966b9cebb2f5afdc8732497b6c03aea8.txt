commit 5183e892966b9cebb2f5afdc8732497b6c03aea8
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Apr 17 12:04:51 2015 -0700

    Initial work on handling aborted API requests

diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 3bb119fe46..0b98395885 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -3,12 +3,25 @@
 var $ = require("jquery");
 var GroupActions = require("./actions/groupActions");
 
+class Request {
+  constructor(xhr) {
+    this.xhr = xhr;
+    this.alive = true;
+  }
+
+  cancel() {
+    this.alive = false;
+    this.xhr.abort();
+  }
+}
+
 class Client {
   constructor(options) {
     if (typeof options === 'undefined') {
       options = {};
     }
     this.baseUrl = options.baseUrl || "/api/0";
+    this.activeRequests = {};
   }
 
   uniqueId() {
@@ -21,10 +34,27 @@ class Client {
            s4() + '-' + s4() + s4() + s4();
   }
 
+  wrapCallback(id, func, cleanup) {
+    if (typeof func === "undefined") {
+      return;
+    }
+
+    return () => {
+      var req = this.activeRequests[id];
+      if (cleanup === true) {
+        delete this.activeRequests[id];
+      }
+      if (req.alive) {
+        return func.apply(req, arguments);
+      }
+    };
+  }
+
   request(path, options) {
     var query = $.param(options.query || "", true);
     var method = options.method || (options.data ? "POST" : "GET");
     var data = options.data;
+    var id = this.uniqueId();
 
     if (typeof data !== "undefined") {
       data = JSON.stringify(data);
@@ -44,15 +74,17 @@ class Client {
       }
     }
 
-    $.ajax({
+    this.activeRequests[id] = new Request($.ajax({
       url: fullUrl,
       method: method,
       data: data,
       contentType: 'application/json',
-      success: options.success,
-      error: options.error,
-      complete: options.complete
-    });
+      success: this.wrapCallback(id, options.success),
+      error: this.wrapCallback(id, options.error),
+      complete: this.wrapCallback(id, options.complete, true)
+    }));
+
+    return this.activeRequests[id];
   }
 
   bulkDelete(params) {
diff --git a/src/sentry/static/sentry/app/mixins/apiMixin.jsx b/src/sentry/static/sentry/app/mixins/apiMixin.jsx
new file mode 100644
index 0000000000..367b590114
--- /dev/null
+++ b/src/sentry/static/sentry/app/mixins/apiMixin.jsx
@@ -0,0 +1,34 @@
+/*** @jsx React.DOM */
+
+var api = require("../api");
+
+var ApiMixin = {
+  componentWillMount() {
+    this._pendingRequests = new Set();
+    this._id = 0;
+  },
+
+  componentWillUnmount() {
+    this._pendingRequests.forEach((req) => {
+      req.cancel();
+    });
+  },
+
+  apiRequest(path, options) {
+    var self = this;
+
+    var completeFunc = options.complete;
+    options.complete = function() {
+      self._pendingRequests.delete(this);
+
+      if (typeof completeFunc !== "undefined") {
+        completeFunc.apply(this, arguments);
+      }
+    };
+
+    var req = api.request(path, options);
+    this._pendingRequests.add(req);
+  }
+};
+
+module.exports = ApiMixin;
diff --git a/src/sentry/static/sentry/app/views/groupOverview.jsx b/src/sentry/static/sentry/app/views/groupOverview.jsx
index c249fd30c6..5829a3a939 100644
--- a/src/sentry/static/sentry/app/views/groupOverview.jsx
+++ b/src/sentry/static/sentry/app/views/groupOverview.jsx
@@ -4,6 +4,7 @@ var React = require("react");
 var Router = require("react-router");
 
 var api = require("../api");
+var ApiMixin = require("../mixins/apiMixin");
 var GroupActivity = require("./groupDetails/activity");
 var GroupChart = require("./groupDetails/chart");
 var GroupEvent = require("./groupDetails/event");
@@ -31,6 +32,7 @@ var MutedBox = React.createClass({
 
 var GroupOverview = React.createClass({
   mixins: [
+    ApiMixin,
     GroupState,
     Router.State,
     RouteMixin
@@ -69,11 +71,8 @@ var GroupOverview = React.createClass({
       error: false
     });
 
-    api.request(url, {
+    this.apiRequest(url, {
       success: (data, _, jqXHR) => {
-        if (!this.isMounted()) {
-          return;
-        }
         this.setState({
           event: data,
           error: false,
@@ -89,9 +88,6 @@ var GroupOverview = React.createClass({
         });
       },
       error: () => {
-        if (!this.isMounted()) {
-          return;
-        }
         this.setState({
           error: true,
           loading: false
diff --git a/src/sentry/static/sentry/app/views/groupTags.jsx b/src/sentry/static/sentry/app/views/groupTags.jsx
index 6ba261b666..3e8a2eb1a9 100644
--- a/src/sentry/static/sentry/app/views/groupTags.jsx
+++ b/src/sentry/static/sentry/app/views/groupTags.jsx
@@ -3,7 +3,7 @@
 var React = require("react");
 var {Link} = require("react-router");
 
-var api = require("../api");
+var ApiMixin = require("../mixins/apiMixin");
 var Count = require("../components/count");
 var GroupState = require("../mixins/groupState");
 var LoadingError = require("../components/loadingError");
@@ -11,7 +11,10 @@ var LoadingIndicator = require("../components/loadingIndicator");
 var PropTypes = require("../proptypes");
 
 var GroupTags = React.createClass({
-  mixins: [GroupState],
+  mixins: [
+    ApiMixin,
+    GroupState
+  ],
 
   getInitialState() {
     return {
@@ -31,7 +34,7 @@ var GroupTags = React.createClass({
       error: false
     });
 
-    api.request('/groups/' + this.getGroup().id + '/tags/', {
+    this.apiRequest('/groups/' + this.getGroup().id + '/tags/', {
       success: (data) => {
         if (!this.isMounted()) {
           return;
