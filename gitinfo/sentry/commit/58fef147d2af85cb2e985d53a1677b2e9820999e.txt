commit 58fef147d2af85cb2e985d53a1677b2e9820999e
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 3 11:28:26 2015 -0700

    Remove Project.platform usage
    
    - Change sample event to always use JavaScript
    - Remove all references to Project.platform
    
    Refs GH-1892

diff --git a/src/sentry/admin.py b/src/sentry/admin.py
index c96b5f796b..fe41abba32 100644
--- a/src/sentry/admin.py
+++ b/src/sentry/admin.py
@@ -34,8 +34,8 @@ admin.site.register(Broadcast, BroadcastAdmin)
 
 
 class ProjectAdmin(admin.ModelAdmin):
-    list_display = ('name', 'slug', 'organization', 'platform', 'status', 'date_added')
-    list_filter = ('status', 'platform', 'public')
+    list_display = ('name', 'slug', 'organization', 'status', 'date_added')
+    list_filter = ('status', 'public')
     search_fields = ('name', 'organization__slug', 'organization__name', 'team__slug',
                      'team__name', 'slug')
     raw_id_fields = ('team', 'organization')
diff --git a/src/sentry/management/commands/create_sample_event.py b/src/sentry/management/commands/create_sample_event.py
index 6e2f7bdcda..b66219370a 100644
--- a/src/sentry/management/commands/create_sample_event.py
+++ b/src/sentry/management/commands/create_sample_event.py
@@ -38,7 +38,7 @@ class Command(BaseCommand):
         if options['platform'] not in PLATFORM_LIST:
             raise CommandError('Invalid platform. Must specify one of: %s' % ', '.join(PLATFORM_LIST))
 
-        platform = options['platform'] or project.platform
+        platform = options['platform']
         event = create_sample_event(project, platform)
         if not event:
             raise CommandError('Unable to create an event for platform %r' % (str(platform),))
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 2de1488367..822aee1b5c 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -89,7 +89,6 @@ class Project(Model):
         (ProjectStatus.PENDING_DELETION, _('Pending Deletion')),
         (ProjectStatus.DELETION_IN_PROGRESS, _('Deletion in Progress')),
     ), db_index=True)
-    platform = models.CharField(max_length=32, choices=PLATFORM_CHOICES, null=True)
 
     objects = ProjectManager(cache_fields=[
         'pk',
@@ -231,7 +230,6 @@ class Project(Model):
             'name': self.name,
             'status': self.status,
             'public': self.public,
-            'platform': self.platform,
         }
 
     def get_full_name(self):
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
index b7edc652b7..7891ee5685 100644
--- a/src/sentry/receivers/core.py
+++ b/src/sentry/receivers/core.py
@@ -44,7 +44,6 @@ def create_default_projects(created_models, verbosity=2, **kwargs):
         name='Internal',
         slug='internal',
         verbosity=verbosity,
-        platform='django',
     )
 
     if settings.SENTRY_FRONTEND_PROJECT:
@@ -53,7 +52,6 @@ def create_default_projects(created_models, verbosity=2, **kwargs):
             name='Frontend',
             slug='frontend',
             verbosity=verbosity,
-            platform='javascript'
         )
 
 
diff --git a/src/sentry/tasks/beacon.py b/src/sentry/tasks/beacon.py
index 85d82ecacc..7a6878c922 100644
--- a/src/sentry/tasks/beacon.py
+++ b/src/sentry/tasks/beacon.py
@@ -47,13 +47,6 @@ def send_beacon():
         install_id = sha1(uuid4().hex).hexdigest()
         options.set('sentry:install-id', install_id)
 
-    internal_project_ids = filter(bool, [
-        settings.SENTRY_PROJECT, settings.SENTRY_FRONTEND_PROJECT,
-    ])
-    platform_list = list(set(Project.objects.exclude(
-        id__in=internal_project_ids,
-    ).values_list('platform', flat=True)))
-
     end = timezone.now()
     events_24h = tsdb.get_sums(
         model=tsdb.models.internal,
@@ -69,7 +62,6 @@ def send_beacon():
         'data': {
             # TODO(dcramer): we'd also like to get an idea about the throughput
             # of the system (i.e. events in 24h)
-            'platforms': platform_list,
             'users': User.objects.count(),
             'projects': Project.objects.count(),
             'teams': Team.objects.count(),
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 9fe7ea2ca7..6614e7853f 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -23,7 +23,7 @@ logger = get_task_logger(__name__)
 
 def _capture_stats(event, is_new):
     group = event.group
-    platform = group.platform or group.project.platform
+    platform = group.platform
     if not platform:
         return
     platform = PLATFORM_ROOTS.get(platform, platform)
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 08387f79f0..38c5d34fa3 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -41,7 +41,6 @@
       <div class="box-content with-padding">
         {{ form.name|as_crispy_field }}
         {{ form.slug|as_crispy_field }}
-        {{ form.platform|as_crispy_field }}
         {{ form.team|as_crispy_field }}
       </div>
     </div>
diff --git a/src/sentry/utils/samples.py b/src/sentry/utils/samples.py
index ad0a1c8b5e..fd346851e6 100644
--- a/src/sentry/utils/samples.py
+++ b/src/sentry/utils/samples.py
@@ -72,9 +72,6 @@ def load_data(platform, default=None):
 
 def create_sample_event(project, platform=None, default=None, raw=True,
                         **kwargs):
-    if not platform:
-        platform = project.platform
-
     if not platform and not default:
         return
 
diff --git a/src/sentry/web/forms/add_project.py b/src/sentry/web/forms/add_project.py
index eedf686e18..8dd118d814 100644
--- a/src/sentry/web/forms/add_project.py
+++ b/src/sentry/web/forms/add_project.py
@@ -17,16 +17,9 @@ class AddProjectForm(forms.ModelForm):
         }),
         help_text='Using the repository name generally works well.',
     )
-    platform = forms.ChoiceField(
-        choices=Project._meta.get_field('platform').get_choices(blank_choice=BLANK_CHOICE),
-        widget=forms.Select(attrs={
-            'data-placeholder': _('Select a platform'),
-        }),
-        help_text='Your platform choice helps us setup some defaults for this project.',
-    )
 
     class Meta:
-        fields = ('name', 'platform')
+        fields = ('name',)
         model = Project
 
     def save(self, actor, team, ip_address):
@@ -44,6 +37,6 @@ class AddProjectForm(forms.ModelForm):
             data=project.get_audit_log_data(),
         )
 
-        create_sample_event(project)
+        create_sample_event(project, platform='javascript')
 
         return project
diff --git a/src/sentry/web/frontend/create_project.py b/src/sentry/web/frontend/create_project.py
index 6c3beb19b8..73f1fffca5 100644
--- a/src/sentry/web/frontend/create_project.py
+++ b/src/sentry/web/frontend/create_project.py
@@ -21,7 +21,7 @@ class AddProjectWithTeamForm(AddProjectForm):
     )
 
     class Meta:
-        fields = ('name', 'team', 'platform')
+        fields = ('name', 'team')
         model = Project
 
     def __init__(self, user, team_list, *args, **kwargs):
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index 329d406495..f135928204 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -24,8 +24,6 @@ BLANK_CHOICE = [("", "")]
 class EditProjectForm(forms.ModelForm):
     name = forms.CharField(label=_('Project Name'), max_length=200,
         widget=forms.TextInput(attrs={'placeholder': _('Production')}))
-    platform = forms.ChoiceField(choices=Project._meta.get_field('platform').get_choices(blank_choice=BLANK_CHOICE),
-        widget=forms.Select(attrs={'data-placeholder': _('Select a platform')}))
     team = CustomTypedChoiceField(choices=(), coerce=int, required=False)
     origins = OriginsField(label=_('Allowed Domains'), required=False,
         help_text=_('Separate multiple entries with a newline.'))
@@ -61,7 +59,7 @@ class EditProjectForm(forms.ModelForm):
     )
 
     class Meta:
-        fields = ('name', 'platform', 'team', 'slug')
+        fields = ('name', 'team', 'slug')
         model = Project
 
     def __init__(self, request, organization, team_list, data, instance, *args, **kwargs):
diff --git a/tests/sentry/tasks/test_beacon.py b/tests/sentry/tasks/test_beacon.py
index 88ad3e9bfe..2e170c59b3 100644
--- a/tests/sentry/tasks/test_beacon.py
+++ b/tests/sentry/tasks/test_beacon.py
@@ -14,8 +14,6 @@ class SendBeaconTest(TestCase):
     @patch('sentry.tasks.beacon.safe_urlopen')
     @patch('sentry.tasks.beacon.safe_urlread')
     def test_simple(self, safe_urlread, safe_urlopen):
-        self.create_project(platform='java')
-
         safe_urlread.return_value = json.dumps({
             'notices': [],
             'version': {'stable': '1.0.0'},
@@ -31,11 +29,10 @@ class SendBeaconTest(TestCase):
             'install_id': install_id,
             'version': sentry.get_version(),
             'data': {
-                'platforms': ['java'],
-                'organizations': 2,
-                'users': 2,
-                'projects': 2,
-                'teams': 2,
+                'organizations': 1,
+                'users': 1,
+                'projects': 1,
+                'teams': 1,
                 'events.24h': 0,
             },
             'admin_email': 'foo@example.com',
diff --git a/tests/sentry/web/frontend/test_create_project.py b/tests/sentry/web/frontend/test_create_project.py
index be85265f6c..e93ca05766 100644
--- a/tests/sentry/web/frontend/test_create_project.py
+++ b/tests/sentry/web/frontend/test_create_project.py
@@ -47,13 +47,11 @@ class CreateProjectTest(TestCase):
         resp = self.client.post(path, {
             'name': 'bar',
             'team': team.slug,
-            'platform': 'python',
         })
         assert resp.status_code == 302, resp.context['form'].errors
 
         project = Project.objects.get(team__organization=organization, name='bar')
 
-        assert project.platform == 'python'
         assert project.team == team
 
         redirect_uri = reverse('sentry-stream', args=[organization.slug, project.slug])
diff --git a/tests/sentry/web/frontend/test_create_team.py b/tests/sentry/web/frontend/test_create_team.py
index 2a1bd8a9a3..7728441767 100644
--- a/tests/sentry/web/frontend/test_create_team.py
+++ b/tests/sentry/web/frontend/test_create_team.py
@@ -87,7 +87,6 @@ class CreateTeamTest(TestCase):
             'op': 'continue',
             'step': '1',
             'ctwizard-1-name': 'bar',
-            'ctwizard-1-platform': 'python',
         })
         assert resp.status_code == 302
 
@@ -98,7 +97,6 @@ class CreateTeamTest(TestCase):
         project = Project.objects.get(team=team)
 
         assert project.name == 'bar'
-        assert project.platform == 'python'
 
         redirect_uri = reverse('sentry-stream', args=[organization.slug, project.slug])
 
diff --git a/tests/sentry/web/frontend/test_project_settings.py b/tests/sentry/web/frontend/test_project_settings.py
index 0dafdfb9f0..15f576e9cb 100644
--- a/tests/sentry/web/frontend/test_project_settings.py
+++ b/tests/sentry/web/frontend/test_project_settings.py
@@ -77,7 +77,6 @@ class ProjectSettingsTest(TestCase):
         resp = self.client.post(self.path, {
             'name': 'bar',
             'slug': self.project.slug,
-            'platform': 'python',
             'team': self.team.id,
             'scrub_data': '1',
             'token': 'foobar',
