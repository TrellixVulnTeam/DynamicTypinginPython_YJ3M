commit ad4601c90f0a5e18bc5f682e72f75a09731d4821
Author: Ted Kaemming <ted@kaemming.com>
Date:   Tue Oct 27 14:04:02 2015 -0700

    Correct fallback behavior in digest schedule script.
    
    - Fixes incorrect reference in Lua script.
    - Adds branch coverage for previously missed block in Lua script.

diff --git a/src/sentry/digests/backends/redis.py b/src/sentry/digests/backends/redis.py
index 3468312c9d..272813173e 100644
--- a/src/sentry/digests/backends/redis.py
+++ b/src/sentry/digests/backends/redis.py
@@ -101,7 +101,7 @@ if score ~= nil then
         -- evicted), be conservative and allow the timeline to be scheduled
         -- with either the current schedule time or provided timestamp,
         -- whichever is smaller.
-        update = math.min(last, ARGV[2])
+        update = math.min(score, ARGV[2])
     else
         update = math.min(
             score + tonumber(ARGV[3]),
diff --git a/tests/sentry/digests/backends/test_redis.py b/tests/sentry/digests/backends/test_redis.py
index 723ee42731..90b7b4b775 100644
--- a/tests/sentry/digests/backends/test_redis.py
+++ b/tests/sentry/digests/backends/test_redis.py
@@ -89,6 +89,18 @@ class RedisScriptTestCase(BaseRedisBackendTestCase):
                 self.assertChanges(timeline_score_in_waiting_set, before=timestamp + 1, after=timestamp):
             assert ensure_timeline_scheduled(('waiting', 'ready'), (timeline, timestamp, increment, 0), client) is None
 
+        # Test to ensure a missing last processed timestamp can be handled
+        # correctly (chooses minimum of schedule value and record timestamp.)
+        client.zadd('waiting', timestamp, timeline)
+        client.delete(make_last_processed_timestamp_key(timeline))
+        with self.assertDoesNotChange(waiting_set_size), \
+                self.assertDoesNotChange(timeline_score_in_waiting_set):
+            assert ensure_timeline_scheduled(('waiting', 'ready'), (timeline, timestamp + 100, increment, 10), client) is None
+
+        with self.assertDoesNotChange(waiting_set_size), \
+                self.assertChanges(timeline_score_in_waiting_set, before=timestamp, after=timestamp - 100):
+            assert ensure_timeline_scheduled(('waiting', 'ready'), (timeline, timestamp - 100, increment, 10), client) is None
+
     def test_truncate_timeline_script(self):
         client = StrictRedis(db=9)
 
