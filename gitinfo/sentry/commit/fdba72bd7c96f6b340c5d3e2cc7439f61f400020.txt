commit fdba72bd7c96f6b340c5d3e2cc7439f61f400020
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Thu Jul 9 15:21:47 2020 +0200

    ref: Remove Python store view (#19135)
    
    Delete the endpoint and all associated tests. I have verified that the extra tests I removed have similar tests in either the Relay integration test suite or the ingest consumer test suite (event attachments)
    
    getsentry PR: getsentry/getsentry#4158

diff --git a/.eslintignore b/.eslintignore
index a9302d11ca..747c7c6878 100644
--- a/.eslintignore
+++ b/.eslintignore
@@ -1,6 +1,6 @@
 **/dist/**/*
 **/vendor/**/*
-**/tests/sentry/lang/javascript/fixtures/**/*
-**/tests/sentry/lang/javascript/example-project/**/*
+**/tests/**/lang/javascript/fixtures/**/*
+**/tests/**/lang/javascript/example-project/**/*
 /examples/
 /scripts/
diff --git a/conftest.py b/conftest.py
index c3827628eb..bc1cc7a284 100644
--- a/conftest.py
+++ b/conftest.py
@@ -22,14 +22,6 @@ def pytest_configure(config):
     # always install plugins for the tests
     install_sentry_plugins()
 
-    # add custom test markers
-    config.addinivalue_line(
-        "markers",
-        "sentry_store_integration: mark test as using the sentry store endpoint and therefore using legacy code",
-    )
-    config.addinivalue_line(
-        "markers", "relay_store_integration: mark test as using the relay store endpoint"
-    )
     config.addinivalue_line("markers", "obsolete: mark test as obsolete and soon to be removed")
 
 
diff --git a/requirements-base.txt b/requirements-base.txt
index 66d0a3ec1d..b539945f97 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -43,7 +43,6 @@ python3-saml>=1.4.0,<1.5
 python-u2flib-server>=5.0.0,<6.0.0
 PyYAML>=5.3,<5.4
 qrcode>=6.1.0,<6.2.0
-querystring_parser>=1.2.3,<2.0.0
 rb>=1.7.0,<2.0.0
 redis-py-cluster==1.3.6
 redis==2.10.6
diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 2765179cf2..f94820b6b0 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -9,6 +9,7 @@ import sentry_sdk
 from datetime import datetime, timedelta
 from django.conf import settings
 from django.utils.http import urlquote
+from django.http import HttpResponse
 from django.views.decorators.csrf import csrf_exempt
 from enum import Enum
 from pytz import utc
@@ -23,11 +24,10 @@ from sentry.auth import access
 from sentry.models import Environment
 from sentry.utils.cursors import Cursor
 from sentry.utils.dates import to_datetime
-from sentry.utils.http import absolute_uri, is_valid_origin
+from sentry.utils.http import absolute_uri, is_valid_origin, origin_from_request
 from sentry.utils.audit import create_audit_entry
 from sentry.utils.sdk import capture_exception
 from sentry.utils import json
-from sentry.web.api import allow_cors_options
 
 
 from .authentication import ApiKeyAuthentication, TokenAuthentication
@@ -49,6 +49,51 @@ logger = logging.getLogger(__name__)
 audit_logger = logging.getLogger("sentry.audit.api")
 
 
+def allow_cors_options(func):
+    """
+    Decorator that adds automatic handling of OPTIONS requests for CORS
+
+    If the request is OPTIONS (i.e. pre flight CORS) construct a OK (200) response
+    in which we explicitly enable the caller and add the custom headers that we support
+    For other requests just add the appropriate CORS headers
+
+    :param func: the original request handler
+    :return: a request handler that shortcuts OPTIONS requests and just returns an OK (CORS allowed)
+    """
+
+    @functools.wraps(func)
+    def allow_cors_options_wrapper(self, request, *args, **kwargs):
+
+        if request.method == "OPTIONS":
+            response = HttpResponse(status=200)
+            response["Access-Control-Max-Age"] = "3600"  # don't ask for options again for 1 hour
+        else:
+            response = func(self, request, *args, **kwargs)
+
+        allow = ", ".join(self._allowed_methods())
+        response["Allow"] = allow
+        response["Access-Control-Allow-Methods"] = allow
+        response["Access-Control-Allow-Headers"] = (
+            "X-Sentry-Auth, X-Requested-With, Origin, Accept, "
+            "Content-Type, Authentication, Authorization, Content-Encoding"
+        )
+        response["Access-Control-Expose-Headers"] = "X-Sentry-Error, Retry-After"
+
+        if request.META.get("HTTP_ORIGIN") == "null":
+            origin = "null"  # if ORIGIN header is explicitly specified as 'null' leave it alone
+        else:
+            origin = origin_from_request(request)
+
+        if origin is None or origin == "null":
+            response["Access-Control-Allow-Origin"] = "*"
+        else:
+            response["Access-Control-Allow-Origin"] = origin
+
+        return response
+
+    return allow_cors_options_wrapper
+
+
 class DocSection(Enum):
     ACCOUNTS = "Accounts"
     EVENTS = "Events"
diff --git a/src/sentry/api/endpoints/project_filter_details.py b/src/sentry/api/endpoints/project_filter_details.py
index 48a04ff4a7..69001cbb42 100644
--- a/src/sentry/api/endpoints/project_filter_details.py
+++ b/src/sentry/api/endpoints/project_filter_details.py
@@ -19,14 +19,14 @@ class ProjectFilterDetailsEndpoint(ProjectEndpoint):
 
         """
         current_filter = None
-        for flt in message_filters.get_all_filters():
-            if flt.spec.id == filter_id:
+        for flt in message_filters.get_all_filter_specs():
+            if flt.id == filter_id:
                 current_filter = flt
                 break
         else:
             raise ResourceDoesNotExist  # could not find filter with the requested id
 
-        serializer = current_filter.spec.serializer_cls(data=request.data, partial=True)
+        serializer = current_filter.serializer_cls(data=request.data, partial=True)
 
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
diff --git a/src/sentry/api/endpoints/project_filters.py b/src/sentry/api/endpoints/project_filters.py
index cee5013afe..d56051f348 100644
--- a/src/sentry/api/endpoints/project_filters.py
+++ b/src/sentry/api/endpoints/project_filters.py
@@ -17,17 +17,16 @@ class ProjectFiltersEndpoint(ProjectEndpoint):
 
         """
         results = []
-        for flt in message_filters.get_all_filters():
-            filter_spec = flt.spec
+        for flt in message_filters.get_all_filter_specs():
             results.append(
                 {
-                    "id": filter_spec.id,
+                    "id": flt.id,
                     # 'active' will be either a boolean or list for the legacy browser filters
                     # all other filters will be boolean
-                    "active": message_filters.get_filter_state(filter_spec.id, project),
-                    "description": filter_spec.description,
-                    "name": filter_spec.name,
-                    "hello": filter_spec.id + " - " + filter_spec.name,
+                    "active": message_filters.get_filter_state(flt.id, project),
+                    "description": flt.description,
+                    "name": flt.name,
+                    "hello": flt.id + " - " + flt.name,
                 }
             )
         results.sort(key=lambda x: x["name"])
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 819520616e..7f2a88edb6 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -3,29 +3,15 @@
 #       metadata (rather than generic log messages which aren't useful).
 from __future__ import absolute_import, print_function
 
-import abc
-import base64
 import logging
 import re
-import six
-import zlib
 
-from django.core.exceptions import SuspiciousOperation
-from django.utils.crypto import constant_time_compare
-from gzip import GzipFile
-from six import BytesIO
 from time import time
 
 from sentry.attachments import attachment_cache
 from sentry.cache import default_cache
-from sentry.models import ProjectKey
 from sentry.tasks.store import preprocess_event, preprocess_event_from_reprocessing
-from sentry.utils import json
-from sentry.utils.auth import parse_auth_header
 from sentry.utils.cache import cache_key_for_event
-from sentry.utils.http import origin_from_request
-from sentry.utils.strings import decompress
-from sentry.utils.sdk import configure_scope, set_current_project
 from sentry.utils.canonical import CANONICAL_TYPES
 
 
@@ -57,259 +43,33 @@ class APIForbidden(APIError):
     http_status = 403
 
 
-class APIRateLimited(APIError):
-    http_status = 429
-    msg = "Creation of this event was denied due to rate limiting"
-    name = "rate_limit"
+def insert_data_to_database_legacy(
+    data, start_time=None, from_reprocessing=False, attachments=None
+):
+    """
+    Yet another "fast path" to ingest an event without making it go
+    through Relay. Please consider using functions from the ingest consumer
+    instead, or, if you're within tests, to use `TestCase.store_event`.
+    """
 
-    def __init__(self, retry_after=None):
-        self.retry_after = retry_after
+    # XXX(markus): Delete this function and merge with ingest consumer logic.
 
+    if start_time is None:
+        start_time = time()
 
-class Auth(object):
-    def __init__(
-        self, client=None, version=None, secret_key=None, public_key=None, is_public=False
-    ):
-        self.client = client
-        self.version = version
-        self.secret_key = secret_key
-        self.public_key = public_key
-        self.is_public = is_public
+    # we might be passed some subclasses of dict that fail dumping
+    if isinstance(data, CANONICAL_TYPES):
+        data = dict(data.items())
 
+    cache_timeout = 3600
+    cache_key = cache_key_for_event(data)
+    default_cache.set(cache_key, data, cache_timeout)
 
-class ClientContext(object):
-    def __init__(self, agent=None, version=None, project_id=None, ip_address=None):
-        # user-agent (i.e. raven-python)
-        self.agent = agent
-        # protocol version
-        self.version = version
-        # project instance
-        self.project_id = project_id
-        self.project = None
-        self.ip_address = ip_address
+    # Attachments will be empty or None if the "event-attachments" feature
+    # is turned off. For native crash reports it will still contain the
+    # crash dump (e.g. minidump) so we can load it during processing.
+    if attachments is not None:
+        attachment_cache.set(cache_key, attachments, cache_timeout)
 
-    def bind_project(self, project):
-        self.project = project
-        self.project_id = project.id
-        set_current_project(project.id)
-
-    def bind_auth(self, auth):
-        self.agent = auth.client
-        self.version = auth.version
-
-        with configure_scope() as scope:
-            scope.set_tag("agent", self.agent)
-            scope.set_tag("protocol", self.version)
-
-
-class ClientApiHelper(object):
-    def __init__(self, agent=None, version=None, project_id=None, ip_address=None):
-        self.context = ClientContext(
-            agent=agent, version=version, project_id=project_id, ip_address=ip_address
-        )
-
-    def project_key_from_auth(self, auth):
-        if not auth.public_key:
-            raise APIUnauthorized("Invalid api key")
-
-        # Make sure the key even looks valid first, since it's
-        # possible to get some garbage input here causing further
-        # issues trying to query it from cache or the database.
-        if not ProjectKey.looks_like_api_key(auth.public_key):
-            raise APIUnauthorized("Invalid api key")
-
-        try:
-            pk = ProjectKey.objects.get_from_cache(public_key=auth.public_key)
-        except ProjectKey.DoesNotExist:
-            raise APIUnauthorized("Invalid api key")
-
-        # a secret key may not be present which will be validated elsewhere
-        if not constant_time_compare(pk.secret_key, auth.secret_key or pk.secret_key):
-            raise APIUnauthorized("Invalid api key")
-
-        if not pk.is_active:
-            raise APIUnauthorized("API key is disabled")
-
-        if not pk.roles.store:
-            raise APIUnauthorized("Key does not allow event storage access")
-
-        return pk
-
-    def project_id_from_auth(self, auth):
-        return self.project_key_from_auth(auth).project_id
-
-    def insert_data_to_database(
-        self, data, start_time=None, from_reprocessing=False, attachments=None
-    ):
-        if start_time is None:
-            start_time = time()
-
-        # we might be passed some subclasses of dict that fail dumping
-        if isinstance(data, CANONICAL_TYPES):
-            data = dict(data.items())
-
-        cache_timeout = 3600
-        cache_key = cache_key_for_event(data)
-        default_cache.set(cache_key, data, cache_timeout)
-
-        # Attachments will be empty or None if the "event-attachments" feature
-        # is turned off. For native crash reports it will still contain the
-        # crash dump (e.g. minidump) so we can load it during processing.
-        if attachments is not None:
-            attachment_cache.set(cache_key, attachments, cache_timeout)
-
-        task = from_reprocessing and preprocess_event_from_reprocessing or preprocess_event
-        task.delay(cache_key=cache_key, start_time=start_time, event_id=data["event_id"])
-
-
-@six.add_metaclass(abc.ABCMeta)
-class AbstractAuthHelper(object):
-    @abc.abstractmethod
-    def auth_from_request(cls, request):
-        pass
-
-    @abc.abstractmethod
-    def origin_from_request(cls, request):
-        pass
-
-
-class ClientAuthHelper(AbstractAuthHelper):
-    @classmethod
-    def auth_from_request(cls, request):
-        result = {k: request.GET[k] for k in six.iterkeys(request.GET) if k[:7] == "sentry_"}
-
-        if request.META.get("HTTP_X_SENTRY_AUTH", "")[:7].lower() == "sentry ":
-            if result:
-                raise SuspiciousOperation("Multiple authentication payloads were detected.")
-            result = parse_auth_header(request.META["HTTP_X_SENTRY_AUTH"])
-        elif request.META.get("HTTP_AUTHORIZATION", "")[:7].lower() == "sentry ":
-            if result:
-                raise SuspiciousOperation("Multiple authentication payloads were detected.")
-            result = parse_auth_header(request.META["HTTP_AUTHORIZATION"])
-
-        if not result:
-            raise APIUnauthorized("Unable to find authentication information")
-
-        origin = cls.origin_from_request(request)
-        auth = Auth(
-            client=result.get("sentry_client"),
-            version=six.text_type(result.get("sentry_version")),
-            secret_key=result.get("sentry_secret"),
-            public_key=result.get("sentry_key"),
-            is_public=bool(origin),
-        )
-        # default client to user agent
-        if not auth.client:
-            auth.client = request.META.get("HTTP_USER_AGENT")
-            if isinstance(auth.client, bytes):
-                auth.client = auth.client.decode("latin1")
-        return auth
-
-    @classmethod
-    def origin_from_request(cls, request):
-        """
-        Returns either the Origin or Referer value from the request headers.
-        """
-        if request.META.get("HTTP_ORIGIN") == "null":
-            return "null"
-        return origin_from_request(request)
-
-
-class MinidumpAuthHelper(AbstractAuthHelper):
-    @classmethod
-    def origin_from_request(cls, request):
-        # We don't use an origin here
-        return None
-
-    @classmethod
-    def auth_from_request(cls, request):
-        key = request.GET.get("sentry_key")
-        if not key:
-            raise APIUnauthorized("Unable to find authentication information")
-
-        # Minidump requests are always "trusted".  We at this point only
-        # use is_public to identify requests that have an origin set (via
-        # CORS)
-        auth = Auth(public_key=key, client="sentry-minidump", is_public=False)
-        return auth
-
-
-class SecurityAuthHelper(AbstractAuthHelper):
-    @classmethod
-    def origin_from_request(cls, request):
-        # In the case of security reports, the origin is not available at the
-        # dispatch() stage, as we need to parse it out of the request body, so
-        # we do our own CORS check once we have parsed it.
-        return None
-
-    @classmethod
-    def auth_from_request(cls, request):
-        key = request.GET.get("sentry_key")
-        if not key:
-            raise APIUnauthorized("Unable to find authentication information")
-
-        auth = Auth(public_key=key, is_public=True)
-        auth.client = request.META.get("HTTP_USER_AGENT")
-        return auth
-
-
-def decompress_deflate(encoded_data):
-    try:
-        return zlib.decompress(encoded_data).decode("utf-8")
-    except Exception as e:
-        # This error should be caught as it suggests that there's a
-        # bug somewhere in the client's code.
-        logger.debug(six.text_type(e), exc_info=True)
-        raise APIError("Bad data decoding request (%s, %s)" % (type(e).__name__, e))
-
-
-def decompress_gzip(encoded_data):
-    try:
-        fp = BytesIO(encoded_data)
-        try:
-            f = GzipFile(fileobj=fp)
-            return f.read().decode("utf-8")
-        finally:
-            f.close()
-    except Exception as e:
-        # This error should be caught as it suggests that there's a
-        # bug somewhere in the client's code.
-        logger.debug(six.text_type(e), exc_info=True)
-        raise APIError("Bad data decoding request (%s, %s)" % (type(e).__name__, e))
-
-
-def decode_and_decompress_data(encoded_data):
-    try:
-        try:
-            return decompress(encoded_data).decode("utf-8")
-        except zlib.error:
-            return base64.b64decode(encoded_data).decode("utf-8")
-    except Exception as e:
-        # This error should be caught as it suggests that there's a
-        # bug somewhere in the client's code.
-        logger.debug(six.text_type(e), exc_info=True)
-        raise APIError("Bad data decoding request (%s, %s)" % (type(e).__name__, e))
-
-
-def decode_data(encoded_data):
-    try:
-        return encoded_data.decode("utf-8")
-    except UnicodeDecodeError as e:
-        # This error should be caught as it suggests that there's a
-        # bug somewhere in the client's code.
-        logger.debug(six.text_type(e), exc_info=True)
-        raise APIError("Bad data decoding request (%s, %s)" % (type(e).__name__, e))
-
-
-def safely_load_json_string(json_string):
-    try:
-        if isinstance(json_string, six.binary_type):
-            json_string = json_string.decode("utf-8")
-        obj = json.loads(json_string)
-        assert isinstance(obj, dict)
-    except Exception as e:
-        # This error should be caught as it suggests that there's a
-        # bug somewhere in the client's code.
-        logger.debug(six.text_type(e), exc_info=True)
-        raise APIError("Bad data reconstructing object (%s, %s)" % (type(e).__name__, e))
-    return obj
+    task = from_reprocessing and preprocess_event_from_reprocessing or preprocess_event
+    task.delay(cache_key=cache_key, start_time=start_time, event_id=data["event_id"])
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index f15b48d796..6ec3a17509 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -4,7 +4,6 @@ import logging
 import time
 
 import ipaddress
-import jsonschema
 import six
 
 from datetime import timedelta
@@ -23,7 +22,6 @@ from sentry.constants import (
     MAX_SECS_IN_FUTURE,
     MAX_SECS_IN_PAST,
 )
-from sentry.message_filters import should_filter_event
 from sentry.grouping.api import (
     get_grouping_config_dict_for_project,
     get_grouping_config_dict_for_event_data,
@@ -32,16 +30,6 @@ from sentry.grouping.api import (
     get_fingerprinting_config_for_project,
     GroupingConfigNotFound,
 )
-from sentry.coreapi import (
-    APIError,
-    APIForbidden,
-    decompress_gzip,
-    decompress_deflate,
-    decode_and_decompress_data,
-    decode_data,
-    safely_load_json_string,
-)
-from sentry.interfaces.base import get_interface
 from sentry.lang.native.utils import STORE_CRASH_REPORTS_ALL, convert_crashreport_count
 from sentry.models import (
     Activity,
@@ -75,12 +63,7 @@ from sentry.signals import first_event_received
 from sentry.tasks.integrations import kick_off_status_syncs
 from sentry.utils import json, metrics
 from sentry.utils.canonical import CanonicalKeyDict
-from sentry.utils.data_filters import (
-    is_valid_ip,
-    is_valid_release,
-    is_valid_error_message,
-    FilterStatKeys,
-)
+from sentry.utils.data_filters import FilterStatKeys
 from sentry.utils.dates import to_timestamp, to_datetime
 from sentry.utils.outcomes import Outcome, track_outcome
 from sentry.utils.safe import safe_execute, trim, get_path, setdefault_path
@@ -137,19 +120,6 @@ def validate_and_set_timestamp(data, timestamp):
             data["timestamp"] = float(timestamp)
 
 
-def parse_client_as_sdk(value):
-    if not value:
-        return {}
-    try:
-        name, version = value.split("/", 1)
-    except ValueError:
-        try:
-            name, version = value.split(" ", 1)
-        except ValueError:
-            return {}
-    return {"name": name, "version": version}
-
-
 def plugin_is_regression(group, event):
     project = event.project
     for plugin in plugins.for_project(project):
@@ -237,36 +207,6 @@ class ScoreClause(Func):
         return (sql, [])
 
 
-def add_meta_errors(errors, meta):
-    for field_meta in meta:
-        original_value = field_meta.get().get("val")
-
-        for i, (err_type, err_data) in enumerate(field_meta.iter_errors()):
-            error = dict(err_data)
-            error["type"] = err_type
-            if field_meta.path:
-                error["name"] = field_meta.path
-            if i == 0 and original_value is not None:
-                error["value"] = original_value
-            errors.append(error)
-
-
-def _decode_event(data, content_encoding):
-    if isinstance(data, six.binary_type):
-        if content_encoding == "gzip":
-            data = decompress_gzip(data)
-        elif content_encoding == "deflate":
-            data = decompress_deflate(data)
-        elif data[0] != b"{":
-            data = decode_and_decompress_data(data)
-        else:
-            data = decode_data(data)
-    if isinstance(data, six.text_type):
-        data = safely_load_json_string(data)
-
-    return CanonicalKeyDict(data)
-
-
 class EventManager(object):
     """
     Handles normalization in both the store endpoint and the save task. The
@@ -289,7 +229,7 @@ class EventManager(object):
         project_config=None,
         sent_at=None,
     ):
-        self._data = _decode_event(data, content_encoding=content_encoding)
+        self._data = CanonicalKeyDict(data)
         self.version = version
         self._project = project
         # if not explicitly specified try to get the grouping from project_config
@@ -310,51 +250,6 @@ class EventManager(object):
         self.project_config = project_config
         self.sent_at = sent_at
 
-    def process_csp_report(self):
-        """Only called from the CSP report endpoint."""
-        data = self._data
-
-        try:
-            interface = get_interface(data.pop("interface"))
-            report = data.pop("report")
-        except KeyError:
-            raise APIForbidden("No report or interface data")
-
-        # To support testing, we can either accept a built interface instance, or the raw data in
-        # which case we build the instance ourselves
-        try:
-            instance = report if isinstance(report, interface) else interface.from_raw(report)
-        except jsonschema.ValidationError as e:
-            raise APIError("Invalid security report: %s" % str(e).splitlines()[0])
-
-        def clean(d):
-            return dict([x for x in d.items() if x[1]])
-
-        data.update(
-            {
-                "logger": "csp",
-                "message": instance.get_message(),
-                "culprit": instance.get_culprit(),
-                instance.path: instance.to_json(),
-                "tags": instance.get_tags(),
-                "errors": [],
-                "user": {"ip_address": self._client_ip},
-                # Construct a faux Http interface based on the little information we have
-                # This is a bit weird, since we don't have nearly enough
-                # information to create an Http interface, but
-                # this automatically will pick up tags for the User-Agent
-                # which is actually important here for CSP
-                "request": {
-                    "url": instance.get_origin(),
-                    "headers": clean(
-                        {"User-Agent": self._user_agent, "Referer": instance.get_referrer()}
-                    ),
-                },
-            }
-        )
-
-        self._data = data
-
     def normalize(self, project_id=None):
         with metrics.timer("events.store.normalize.duration"):
             self._normalize_impl(project_id=project_id)
@@ -388,41 +283,6 @@ class EventManager(object):
 
         self._data = CanonicalKeyDict(rust_normalizer.normalize_event(dict(self._data)))
 
-    def should_filter(self):
-        """
-        returns (result: bool, reason: string or None)
-        Result is True if an event should be filtered
-        The reason for filtering is passed along as a string
-        so that we can store it in metrics
-        """
-        for name in SECURITY_REPORT_INTERFACES:
-            if name in self._data:
-                interface = get_interface(name)
-                if interface.to_python(self._data[name]).should_filter(self._project):
-                    return (True, FilterStatKeys.INVALID_CSP)
-
-        if self._client_ip and not is_valid_ip(self.project_config, self._client_ip):
-            return (True, FilterStatKeys.IP_ADDRESS)
-
-        release = self._data.get("release")
-        if release and not is_valid_release(self.project_config, release):
-            return (True, FilterStatKeys.RELEASE_VERSION)
-
-        error_message = (
-            get_path(self._data, "logentry", "formatted")
-            or get_path(self._data, "logentry", "message")
-            or ""
-        )
-        if error_message and not is_valid_error_message(self.project_config, error_message):
-            return (True, FilterStatKeys.ERROR_MESSAGE)
-
-        for exc in get_path(self._data, "exception", "values", filter=True, default=[]):
-            message = u": ".join([_f for _f in map(exc.get, ["type", "value"]) if _f])
-            if message and not is_valid_error_message(self.project_config, message):
-                return (True, FilterStatKeys.ERROR_MESSAGE)
-
-        return should_filter_event(self.project_config, self._data)
-
     def get_data(self):
         return self._data
 
diff --git a/src/sentry/integrations/vercel/uihook.py b/src/sentry/integrations/vercel/uihook.py
index 4b28b3fc70..ed9ea5524c 100644
--- a/src/sentry/integrations/vercel/uihook.py
+++ b/src/sentry/integrations/vercel/uihook.py
@@ -6,11 +6,10 @@ import logging
 from django.http import HttpResponse
 from django.views.decorators.csrf import csrf_exempt
 
-from sentry.api.base import Endpoint
+from sentry.api.base import Endpoint, allow_cors_options
 from sentry.constants import ObjectStatus
 from sentry.models import Integration, Organization, OrganizationIntegration, OrganizationStatus
 from sentry.utils.http import absolute_uri
-from sentry.web.api import allow_cors_options
 from sentry.web.helpers import render_to_response
 
 logger = logging.getLogger("sentry.integrations.vercel")
diff --git a/src/sentry/interfaces/schemas.py b/src/sentry/interfaces/schemas.py
index 653a8c7a4b..cb761db827 100644
--- a/src/sentry/interfaces/schemas.py
+++ b/src/sentry/interfaces/schemas.py
@@ -266,6 +266,7 @@ TAGS_TUPLES_SCHEMA = {
 
 TAGS_SCHEMA = {"anyOf": [TAGS_DICT_SCHEMA, TAGS_TUPLES_SCHEMA]}
 
+# XXX(markus): Remove in favor of Relay's schema definition
 EVENT_SCHEMA = {
     "type": "object",
     "properties": {
diff --git a/src/sentry/interfaces/security.py b/src/sentry/interfaces/security.py
index f73a4f9031..303fecf532 100644
--- a/src/sentry/interfaces/security.py
+++ b/src/sentry/interfaces/security.py
@@ -11,7 +11,6 @@ from sentry.interfaces.base import Interface, InterfaceValidationError
 from sentry.interfaces.schemas import validate_and_default_interface, INPUT_SCHEMAS
 from sentry.utils import json
 from sentry.utils.cache import memoize
-from sentry.utils.http import is_valid_origin
 from sentry.utils.safe import trim
 from sentry.web.helpers import render_to_string
 
@@ -81,16 +80,6 @@ class SecurityReport(Interface):
 
     title = None
 
-    @classmethod
-    def from_raw(cls, raw):
-        """
-        Constructs the interface from a raw security report request body
-
-        This is usually slightly different than to_python as it needs to
-        do some extra validation, data extraction / default setting.
-        """
-        raise NotImplementedError
-
     @classmethod
     def to_python(cls, data):
         # TODO(markus): Relay does not validate security interfaces yet
@@ -106,15 +95,6 @@ class SecurityReport(Interface):
     def get_message(self):
         raise NotImplementedError
 
-    def get_tags(self):
-        raise NotImplementedError
-
-    def get_title(self):
-        return self.title
-
-    def should_filter(self, project=None):
-        raise NotImplementedError
-
     def get_origin(self):
         """
         The document URL that generated this report
@@ -167,13 +147,6 @@ class Hpkp(SecurityReport):
     def get_message(self):
         return u"Public key pinning validation failed for '{self.hostname}'".format(self=self)
 
-    def get_tags(self):
-        return [
-            ("port", six.text_type(self.port)),
-            ("include-subdomains", json.dumps(self.include_subdomains)),
-            ("hostname", self.hostname),
-        ]
-
     def get_origin(self):
         # not quite origin, but the domain that failed pinning
         return self.hostname
@@ -181,9 +154,6 @@ class Hpkp(SecurityReport):
     def get_referrer(self):
         return None
 
-    def should_filter(self, project=None):
-        return False
-
 
 class ExpectStaple(SecurityReport):
     """
@@ -208,34 +178,12 @@ class ExpectStaple(SecurityReport):
 
     title = "Expect-Staple Report"
 
-    @classmethod
-    def from_raw(cls, raw):
-        # Validate the raw data against the input schema (raises on failure)
-        schema = INPUT_SCHEMAS[cls.path]
-        jsonschema.validate(raw, schema)
-
-        # For Expect-Staple, the values we want are nested under the
-        # 'expect-staple-report' key.
-        raw = raw["expect-staple-report"]
-        # Trim values and convert keys to use underscores
-        kwargs = {k.replace("-", "_"): trim(v, 1024) for k, v in six.iteritems(raw)}
-
-        return cls.to_python(kwargs)
-
     def get_culprit(self):
         return self.hostname
 
     def get_message(self):
         return u"Expect-Staple failed for '{self.hostname}'".format(self=self)
 
-    def get_tags(self):
-        return (
-            ("port", six.text_type(self.port)),
-            ("hostname", self.hostname),
-            ("response_status", self.response_status),
-            ("cert_status", self.cert_status),
-        )
-
     def get_origin(self):
         # not quite origin, but the domain that failed pinning
         return self.hostname
@@ -243,9 +191,6 @@ class ExpectStaple(SecurityReport):
     def get_referrer(self):
         return None
 
-    def should_filter(self, project=None):
-        return False
-
 
 class ExpectCT(SecurityReport):
     """
@@ -268,28 +213,12 @@ class ExpectCT(SecurityReport):
 
     title = "Expect-CT Report"
 
-    @classmethod
-    def from_raw(cls, raw):
-        # Validate the raw data against the input schema (raises on failure)
-        schema = INPUT_SCHEMAS[cls.path]
-        jsonschema.validate(raw, schema)
-
-        # For Expect-CT, the values we want are nested under the 'expect-ct-report' key.
-        raw = raw["expect-ct-report"]
-        # Trim values and convert keys to use underscores
-        kwargs = {k.replace("-", "_"): trim(v, 1024) for k, v in six.iteritems(raw)}
-
-        return cls.to_python(kwargs)
-
     def get_culprit(self):
         return self.hostname
 
     def get_message(self):
         return u"Expect-CT failed for '{self.hostname}'".format(self=self)
 
-    def get_tags(self):
-        return (("port", six.text_type(self.port)), ("hostname", self.hostname))
-
     def get_origin(self):
         # not quite origin, but the domain that failed pinning
         return self.hostname
@@ -297,9 +226,6 @@ class ExpectCT(SecurityReport):
     def get_referrer(self):
         return None
 
-    def should_filter(self, project=None):
-        return False
-
 
 class Csp(SecurityReport):
     """
@@ -321,31 +247,6 @@ class Csp(SecurityReport):
 
     title = "CSP Report"
 
-    @classmethod
-    def from_raw(cls, raw):
-        # Firefox doesn't send effective-directive, so parse it from
-        # violated-directive but prefer effective-directive when present
-        #
-        # refs: https://bugzil.la/1192684#c8
-        try:
-            report = raw["csp-report"]
-            report["effective-directive"] = report.get(
-                "effective-directive", report["violated-directive"].split(None, 1)[0]
-            )
-        except (KeyError, IndexError):
-            pass
-
-        # Validate the raw data against the input schema (raises on failure)
-        schema = INPUT_SCHEMAS[cls.path]
-        jsonschema.validate(raw, schema)
-
-        # For CSP, the values we want are nested under the 'csp-report' key.
-        raw = raw["csp-report"]
-        # Trim values and convert keys to use underscores
-        kwargs = {k.replace("-", "_"): trim(v, 1024) for k, v in six.iteritems(raw)}
-
-        return cls.to_python(kwargs)
-
     def get_message(self):
         templates = {
             "child-src": (u"Blocked 'child' from '{uri}'", "Blocked inline 'child'"),
@@ -396,12 +297,6 @@ class Csp(SecurityReport):
         bits = [d for d in self.violated_directive.split(" ") if d]
         return " ".join([bits[0]] + [self._normalize_value(b) for b in bits[1:]])
 
-    def get_tags(self):
-        return [
-            ("effective-directive", self.effective_directive),
-            ("blocked-uri", self._sanitized_blocked_uri()),
-        ]
-
     def get_origin(self):
         return self.document_uri
 
@@ -416,21 +311,6 @@ class Csp(SecurityReport):
             "sentry/partial/interfaces/csp_email.html", {"data": self.get_api_context()}
         )
 
-    def should_filter(self, project=None):
-        disallowed = ()
-        paths = ["blocked_uri", "source_file"]
-        uris = [getattr(self, path) for path in paths if hasattr(self, path)]
-
-        if project is None or bool(project.get_option("sentry:csp_ignored_sources_defaults", True)):
-            disallowed += DEFAULT_DISALLOWED_SOURCES
-        if project is not None:
-            disallowed += tuple(project.get_option("sentry:csp_ignored_sources", []))
-
-        if disallowed and any(is_valid_origin(uri, allowed=disallowed) for uri in uris):
-            return True
-
-        return False
-
     def _sanitized_blocked_uri(self):
         # HACK: This is 100% to work around Stripe urls
         # that will casually put extremely sensitive information
diff --git a/src/sentry/lang/native/error.py b/src/sentry/lang/native/error.py
index c46e73f6b5..5fb31126eb 100644
--- a/src/sentry/lang/native/error.py
+++ b/src/sentry/lang/native/error.py
@@ -4,8 +4,7 @@ import logging
 import six
 
 from sentry.utils.compat import implements_to_string
-from sentry.lang.native.minidump import is_minidump_event
-from sentry.lang.native.utils import image_name
+from sentry.lang.native.utils import image_name, is_minidump_event
 from sentry.models import EventError
 from sentry.reprocessing import report_processing_issue
 
diff --git a/src/sentry/lang/native/minidump.py b/src/sentry/lang/native/minidump.py
deleted file mode 100644
index aeb123720b..0000000000
--- a/src/sentry/lang/native/minidump.py
+++ /dev/null
@@ -1,128 +0,0 @@
-from __future__ import absolute_import
-
-import logging
-
-import dateutil.parser as dp
-from msgpack import unpack, Unpacker, UnpackException, ExtraData
-
-from sentry.utils.safe import get_path, setdefault_path
-
-minidumps_logger = logging.getLogger("sentry.minidumps")
-
-# Attachment type used for minidump files
-MINIDUMP_ATTACHMENT_TYPE = "event.minidump"
-
-MAX_MSGPACK_BREADCRUMB_SIZE_BYTES = 50000
-MAX_MSGPACK_EVENT_SIZE_BYTES = 100000
-
-
-def write_minidump_placeholder(data):
-    """
-    Writes a placeholder to indicate that this event has an associated minidump.
-
-    This will indicate to the ingestion pipeline that this event will need to be
-    processed. The payload can be checked via ``is_minidump_event``.
-    """
-    # Minidump events must be native platform.
-    data["platform"] = "native"
-
-    # Assume that this minidump is the result of a crash and assign the fatal
-    # level. Note that the use of `setdefault` here doesn't generally allow the
-    # user to override the minidump's level as processing will overwrite it
-    # later.
-    setdefault_path(data, "level", value="fatal")
-
-    # Create a placeholder exception. This signals normalization that this is an
-    # error event and also serves as a placeholder if processing of the minidump
-    # fails.
-    exception = {
-        "type": "Minidump",
-        "value": "Invalid Minidump",
-        "mechanism": {"type": "minidump", "handled": False, "synthetic": True},
-    }
-    data["exception"] = {"values": [exception]}
-
-
-def is_minidump_event(data):
-    """
-    Checks whether an event indicates that it has an associated minidump.
-
-    This requires the event to have a special marker payload. It is written by
-    ``write_minidump_placeholder``.
-    """
-    exceptions = get_path(data, "exception", "values", filter=True)
-    return get_path(exceptions, 0, "mechanism", "type") == "minidump"
-
-
-def merge_attached_event(mpack_event, data):
-    """
-    Merges an event payload attached in the ``__sentry-event`` attachment.
-    """
-    size = mpack_event.size
-    if size == 0 or size > MAX_MSGPACK_EVENT_SIZE_BYTES:
-        return
-
-    try:
-        event = unpack(mpack_event)
-    except (TypeError, ValueError, UnpackException, ExtraData) as e:
-        minidumps_logger.exception(e)
-        return
-
-    for key in event:
-        value = event.get(key)
-        if value is not None:
-            data[key] = value
-
-
-def merge_attached_breadcrumbs(mpack_breadcrumbs, data):
-    """
-    Merges breadcrumbs attached in the ``__sentry-breadcrumbs`` attachment(s).
-    """
-    size = mpack_breadcrumbs.size
-    if size == 0 or size > MAX_MSGPACK_BREADCRUMB_SIZE_BYTES:
-        return
-
-    try:
-        unpacker = Unpacker(mpack_breadcrumbs)
-        breadcrumbs = list(unpacker)
-    except (TypeError, ValueError, UnpackException, ExtraData) as e:
-        minidumps_logger.exception(e)
-        return
-
-    if not breadcrumbs:
-        return
-
-    current_crumbs = data.get("breadcrumbs")
-    if not current_crumbs:
-        data["breadcrumbs"] = breadcrumbs
-        return
-
-    current_crumb = next(
-        (
-            c
-            for c in reversed(current_crumbs)
-            if isinstance(c, dict) and c.get("timestamp") is not None
-        ),
-        None,
-    )
-    new_crumb = next(
-        (
-            c
-            for c in reversed(breadcrumbs)
-            if isinstance(c, dict) and c.get("timestamp") is not None
-        ),
-        None,
-    )
-
-    # cap the breadcrumbs to the highest count of either file
-    cap = max(len(current_crumbs), len(breadcrumbs))
-
-    if current_crumb is not None and new_crumb is not None:
-        if dp.parse(current_crumb["timestamp"]) > dp.parse(new_crumb["timestamp"]):
-            data["breadcrumbs"] = breadcrumbs + current_crumbs
-        else:
-            data["breadcrumbs"] = current_crumbs + breadcrumbs
-    else:
-        data["breadcrumbs"] = current_crumbs + breadcrumbs
-
-    data["breadcrumbs"] = data["breadcrumbs"][-cap:]
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 7c91f7fd49..b395deb09e 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -5,9 +5,7 @@ from sentry.lang.native.processing import (
     process_minidump,
     process_payload,
 )
-from sentry.lang.native.minidump import is_minidump_event
-from sentry.lang.native.utils import is_native_event
-from sentry.lang.native.unreal import is_applecrashreport_event
+from sentry.lang.native.utils import is_native_event, is_minidump_event, is_applecrashreport_event
 from sentry.plugins.base.v2 import Plugin2
 
 
diff --git a/src/sentry/lang/native/processing.py b/src/sentry/lang/native/processing.py
index 4d1af51f5a..f4bbe0ae4c 100644
--- a/src/sentry/lang/native/processing.py
+++ b/src/sentry/lang/native/processing.py
@@ -6,10 +6,10 @@ import six
 
 from sentry.event_manager import validate_and_set_timestamp
 from sentry.lang.native.error import write_error, SymbolicationFailed
-from sentry.lang.native.minidump import MINIDUMP_ATTACHMENT_TYPE, is_minidump_event
 from sentry.lang.native.symbolicator import Symbolicator
-from sentry.lang.native.unreal import APPLECRASHREPORT_ATTACHMENT_TYPE, is_applecrashreport_event
 from sentry.lang.native.utils import (
+    is_minidump_event,
+    is_applecrashreport_event,
     get_sdk_from_event,
     native_images_from_data,
     is_native_platform,
@@ -31,6 +31,12 @@ logger = logging.getLogger(__name__)
 
 IMAGE_STATUS_FIELDS = frozenset(("unwind_status", "debug_status"))
 
+# Attachment type used for minidump files
+MINIDUMP_ATTACHMENT_TYPE = "event.minidump"
+
+# Attachment type used for Apple Crash Reports
+APPLECRASHREPORT_ATTACHMENT_TYPE = "event.applecrashreport"
+
 
 def _merge_frame(new_frame, symbolicated):
     if symbolicated.get("function"):
diff --git a/src/sentry/lang/native/unreal.py b/src/sentry/lang/native/unreal.py
deleted file mode 100644
index adbe470d36..0000000000
--- a/src/sentry/lang/native/unreal.py
+++ /dev/null
@@ -1,143 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.models import UserReport
-from sentry.lang.native.minidump import MINIDUMP_ATTACHMENT_TYPE
-from sentry.utils.safe import get_path, set_path, setdefault_path
-
-
-# Attachment type used for Apple Crash Reports
-APPLECRASHREPORT_ATTACHMENT_TYPE = "event.applecrashreport"
-
-
-def write_applecrashreport_placeholder(data):
-    """
-    Writes a placeholder to indicate that this event has an apple crash report.
-
-    This will indicate to the ingestion pipeline that this event will need to be
-    processed. The payload can be checked via ``is_applecrashreport_event``.
-    """
-    # Apple crash report events must be native platform for processing.
-    data["platform"] = "native"
-
-    # Assume that this minidump is the result of a crash and assign the fatal
-    # level. Note that the use of `setdefault` here doesn't generally allow the
-    # user to override the minidump's level as processing will overwrite it
-    # later.
-    setdefault_path(data, "level", value="fatal")
-
-    # Create a placeholder exception. This signals normalization that this is an
-    # error event and also serves as a placeholder if processing of the minidump
-    # fails.
-    exception = {
-        "type": "AppleCrashReport",
-        "value": "Invalid Apple Crash Report",
-        "mechanism": {"type": "applecrashreport", "handled": False, "synthetic": True},
-    }
-    data["exception"] = {"values": [exception]}
-
-
-def is_applecrashreport_event(data):
-    """
-    Checks whether an event indicates that it has an apple crash report.
-
-    This requires the event to have a special marker payload. It is written by
-    ``write_applecrashreport_placeholder``.
-    """
-    exceptions = get_path(data, "exception", "values", filter=True)
-    return get_path(exceptions, 0, "mechanism", "type") == "applecrashreport"
-
-
-def merge_unreal_user(event, user_id):
-    """
-    Merges user information from the unreal "UserId" into the event payload.
-    """
-
-    # https://github.com/EpicGames/UnrealEngine/blob/f509bb2d6c62806882d9a10476f3654cf1ee0634/Engine/Source/Programs/CrashReportClient/Private/CrashUpload.cpp#L769
-    parts = user_id.split("|", 2)
-    login_id, epic_account_id, machine_id = parts + [""] * (3 - len(parts))
-    event["user"] = {"id": login_id if login_id else user_id}
-    if epic_account_id:
-        set_path(event, "tags", "epic_account_id", value=epic_account_id)
-    if machine_id:
-        set_path(event, "tags", "machine_id", value=machine_id)
-
-
-def unreal_attachment_type(unreal_file):
-    """Returns the `attachment_type` for the
-    unreal file type or None if not recognized"""
-    if unreal_file.type == "minidump":
-        return MINIDUMP_ATTACHMENT_TYPE
-    if unreal_file.type == "applecrashreport":
-        return APPLECRASHREPORT_ATTACHMENT_TYPE
-
-
-def merge_unreal_context_event(unreal_context, event, project):
-    """Merges the context from an Unreal Engine 4 crash
-    with the given event."""
-    runtime_prop = unreal_context.get("runtime_properties")
-    if runtime_prop is None:
-        return
-
-    message = runtime_prop.pop("error_message", None)
-    if message is not None:
-        event["message"] = message
-
-    username = runtime_prop.pop("username", None)
-    if username is not None:
-        set_path(event, "user", "username", value=username)
-
-    memory_physical = runtime_prop.pop("memory_stats_total_physical", None)
-    if memory_physical is not None:
-        set_path(event, "contexts", "device", "memory_size", value=memory_physical)
-
-    # Likely overwritten by minidump processing
-    os_major = runtime_prop.pop("misc_os_version_major", None)
-    if os_major is not None:  # i.e: Windows 10
-        set_path(event, "contexts", "os", "name", value=os_major)
-
-    gpu_brand = runtime_prop.pop("misc_primary_cpu_brand", None)
-    if gpu_brand is not None:
-        set_path(event, "contexts", "gpu", "name", value=gpu_brand)
-
-    user_desc = runtime_prop.pop("user_description", None)
-    if user_desc is not None:
-        feedback_user = "unknown"
-        if username is not None:
-            feedback_user = username
-
-        UserReport.objects.create(
-            project=project,
-            event_id=event["event_id"],
-            name=feedback_user,
-            email="",
-            comments=user_desc,
-        )
-
-    # drop modules. minidump processing adds 'images loaded'
-    runtime_prop.pop("modules", None)
-
-    # add everything else as extra
-    set_path(event, "contexts", "unreal", "type", value="unreal")
-    event["contexts"]["unreal"].update(**runtime_prop)
-
-    # add sdk info
-    event["sdk"] = {
-        "name": "sentry.unreal.crashreporter",
-        "version": runtime_prop.pop("crash_reporter_client_version", "0.0.0"),
-    }
-
-
-def merge_unreal_logs_event(unreal_logs, event):
-    setdefault_path(event, "breadcrumbs", "values", value=[])
-    breadcrumbs = event["breadcrumbs"]["values"]
-
-    for log in unreal_logs:
-        message = log.get("message")
-        if message:
-            breadcrumbs.append(
-                {
-                    "timestamp": log.get("timestamp"),
-                    "category": log.get("component"),
-                    "message": message,
-                }
-            )
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index 7447054591..1cab9650d4 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -11,9 +11,6 @@ from sentry.utils.safe import get_path
 
 logger = logging.getLogger(__name__)
 
-# Regex to parse OS versions from a minidump OS string.
-VERSION_RE = re.compile(r"(\d+\.\d+\.\d+)\s+(.*)")
-
 # Regex to guess whether we're dealing with Windows or Unix paths.
 WINDOWS_PATH_RE = re.compile(r"^([a-z]:\\|\\\\)", re.IGNORECASE)
 
@@ -133,3 +130,25 @@ def convert_crashreport_count(value):
     if value is None:
         return STORE_CRASH_REPORTS_DEFAULT
     return int(value)
+
+
+def is_minidump_event(data):
+    """
+    Checks whether an event indicates that it has an associated minidump.
+
+    This requires the event to have a special marker payload. It is written by
+    ``write_minidump_placeholder``.
+    """
+    exceptions = get_path(data, "exception", "values", filter=True)
+    return get_path(exceptions, 0, "mechanism", "type") == "minidump"
+
+
+def is_applecrashreport_event(data):
+    """
+    Checks whether an event indicates that it has an apple crash report.
+
+    This requires the event to have a special marker payload. It is written by
+    ``write_applecrashreport_placeholder``.
+    """
+    exceptions = get_path(data, "exception", "values", filter=True)
+    return get_path(exceptions, 0, "mechanism", "type") == "applecrashreport"
diff --git a/src/sentry/message_filters.py b/src/sentry/message_filters.py
index b60b7e940b..985c677222 100644
--- a/src/sentry/message_filters.py
+++ b/src/sentry/message_filters.py
@@ -1,43 +1,16 @@
-# TODO RaduW 8.06.2019 remove the sentry.filters package and rename this module to filters
 from __future__ import absolute_import
 
-import collections
-from collections import namedtuple
-import re
-
 from rest_framework import serializers
-from six.moves.urllib.parse import urlparse
-from ua_parser.user_agent_parser import Parse
 
 from sentry.api.fields.multiplechoice import MultipleChoiceField
 from sentry.models.projectoption import ProjectOption
 from sentry.signals import inbound_filter_toggled
 from sentry.utils.data_filters import FilterStatKeys, get_filter_key
-from sentry.utils.safe import get_path
-
-
-EventFilteredRet = namedtuple("EventFilteredRet", "should_filter reason")
-
-
-def should_filter_event(project_config, data):
-    """
-    Checks if an event should be filtered
-
-    :param project_config: relay config for the request (for the project really)
-    :param data: the event data
-    :return: an EventFilteredRet explaining if the event should be filtered and, if it should the reason
-        for filtering
-    """
-    for event_filter in get_all_filters():
-        if _is_filter_enabled(project_config, event_filter) and event_filter(project_config, data):
-            return EventFilteredRet(should_filter=True, reason=event_filter.spec.id)
-
-    return EventFilteredRet(should_filter=False, reason=None)
 
 
-def get_all_filters():
+def get_all_filter_specs():
     """
-    Returns a list of the existing event filters
+    Return metadata about the filters known by Sentry.
 
     An event filter is a function that receives a project_config and an event data payload and returns a tuple
     (should_filter:bool, filter_reason: string | None) representing
@@ -107,7 +80,7 @@ def get_filter_state(filter_id, project):
         raise FilterNotRegistered(filter_id)
 
     filter_state = ProjectOption.objects.get_value(
-        project=project, key=u"filters:{}".format(flt.spec.id)
+        project=project, key=u"filters:{}".format(flt.id)
     )
 
     if filter_state is None:
@@ -137,8 +110,8 @@ def _filter_from_filter_id(filter_id):
     """
     Returns the corresponding filter for a filter id or None if no filter with the given id found
     """
-    for flt in get_all_filters():
-        if flt.spec.id == filter_id:
+    for flt in get_all_filter_specs():
+        if flt.id == filter_id:
             return flt
     return None
 
@@ -175,200 +148,18 @@ def _get_filter_settings(project_config, flt):
     return filter_settings.get(get_filter_key(flt), None)
 
 
-def _is_filter_enabled(project_config, flt):
-    filter_options = _get_filter_settings(project_config, flt)
-
-    if filter_options is None:
-        raise ValueError("unknown filter", flt.spec.id)
-
-    return filter_options["isEnabled"]
-
-
-# ************* local host filter *************
-_LOCAL_IPS = frozenset(["127.0.0.1", "::1"])
-_LOCAL_DOMAINS = frozenset(["127.0.0.1", "localhost"])
-
-
-def _localhost_filter(project_config, data):
-    ip_address = get_path(data, "user", "ip_address") or ""
-    url = get_path(data, "request", "url") or ""
-    domain = urlparse(url).hostname
-
-    return ip_address in _LOCAL_IPS or domain in _LOCAL_DOMAINS
-
-
-_localhost_filter.spec = _FilterSpec(
+_localhost_filter = _FilterSpec(
     id=FilterStatKeys.LOCALHOST,
     name="Filter out events coming from localhost",
     description="This applies to both IPv4 (``127.0.0.1``) and IPv6 (``::1``) addresses.",
 )
 
-# ************* browser extensions filter *************
-_EXTENSION_EXC_VALUES = re.compile(
-    "|".join(
-        (
-            re.escape(x)
-            for x in (
-                # Random plugins/extensions
-                "top.GLOBALS",
-                # See: http://blog.errorception.com/2012/03/tale-of-unfindable-js-error.html
-                "originalCreateNotification",
-                "canvas.contentDocument",
-                "MyApp_RemoveAllHighlights",
-                "http://tt.epicplay.com",
-                "Can't find variable: ZiteReader",
-                "jigsaw is not defined",
-                "ComboSearch is not defined",
-                "http://loading.retry.widdit.com/",
-                "atomicFindClose",
-                # Facebook borked
-                "fb_xd_fragment",
-                # ISP "optimizing" proxy - `Cache-Control: no-transform` seems to
-                # reduce this. (thanks @acdha)
-                # See http://stackoverflow.com/questions/4113268
-                "bmi_SafeAddOnload",
-                "EBCallBackMessageReceived",
-                # See
-                # https://groups.google.com/a/chromium.org/forum/#!topic/chromium-discuss/7VU0_VvC7mE
-                "_gCrWeb",
-                # See http://toolbar.conduit.com/Debveloper/HtmlAndGadget/Methods/JSInjection.aspx
-                "conduitPage",
-                # Google Search app (iOS)
-                # See: https://github.com/getsentry/raven-js/issues/756
-                "null is not an object (evaluating 'elt.parentNode')",
-                # Dragon Web Extension from Nuance Communications
-                # See: https://forum.sentry.io/t/error-in-raven-js-plugin-setsuspendstate/481/
-                "plugin.setSuspendState is not a function",
-                # lastpass
-                "should_do_lastpass_here",
-                # google translate
-                # see https://medium.com/@amir.harel/a-b-target-classname-indexof-is-not-a-function-at-least-not-mine-8e52f7be64ca
-                "a[b].target.className.indexOf is not a function",
-            )
-        )
-    ),
-    re.I,
-)
-
-_EXTENSION_EXC_SOURCES = re.compile(
-    "|".join(
-        (
-            # Facebook flakiness
-            r"graph\.facebook\.com",
-            # Facebook blocked
-            r"connect\.facebook\.net",
-            # Woopra flakiness
-            r"eatdifferent\.com\.woopra-ns\.com",
-            r"static\.woopra\.com\/js\/woopra\.js",
-            # Chrome extensions
-            r"^chrome(?:-extension)?:\/\/",
-            # Firefox extensions
-            r"^moz-extension:\/\/",
-            # Safari extensions
-            r"^safari-extension:\/\/",
-            # Cacaoweb
-            r"127\.0\.0\.1:4001\/isrunning",
-            # Other
-            r"webappstoolbarba\.texthelp\.com\/",
-            r"metrics\.itunes\.apple\.com\.edgesuite\.net\/",
-            # Kaspersky Protection browser extension
-            r"kaspersky-labs\.com",
-            # Google ad server (see http://whois.domaintools.com/2mdn.net)
-            r"2mdn\.net",
-        )
-    ),
-    re.I,
-)
-
-
-def _browser_extensions_filter(project_config, data):
-    if data.get("platform") != "javascript":
-        return False
-
-    # get exception value
-    try:
-        exc_value = data["exception"]["values"][0]["value"]
-    except (LookupError, TypeError):
-        exc_value = ""
-    if exc_value:
-        if _EXTENSION_EXC_VALUES.search(exc_value):
-            return True
-
-    # get exception source
-    try:
-        exc_source = data["exception"]["values"][0]["stacktrace"]["frames"][-1]["abs_path"]
-    except (LookupError, TypeError):
-        exc_source = ""
-    if exc_source:
-        if _EXTENSION_EXC_SOURCES.search(exc_source):
-            return True
-
-    return False
-
-
-_browser_extensions_filter.spec = _FilterSpec(
+_browser_extensions_filter = _FilterSpec(
     id=FilterStatKeys.BROWSER_EXTENSION,
     name="Filter out errors known to be caused by browser extensions",
     description="Certain browser extensions will inject inline scripts and are known to cause errors.",
 )
 
-# ************* legacy browsers filter *************
-MIN_VERSIONS = {
-    "Chrome": 0,
-    "IE": 10,
-    "Firefox": 0,
-    "Safari": 6,
-    "Edge": 0,
-    "Opera": 15,
-    "Android": 4,
-    "Opera Mini": 8,
-}
-
-
-def _legacy_browsers_filter(project_config, data):
-    def get_user_agent(data):
-        try:
-            for key, value in get_path(data, "request", "headers", filter=True) or ():
-                if key.lower() == "user-agent":
-                    return value
-        except LookupError:
-            return ""
-
-    if data.get("platform") != "javascript":
-        return False
-
-    value = get_user_agent(data)
-    if not value:
-        return False
-
-    ua = Parse(value)
-    if not ua:
-        return False
-
-    browser = ua["user_agent"]
-
-    if not browser["family"]:
-        return False
-
-    # IE Desktop and IE Mobile use the same engines, therefore we can treat them as one
-    if browser["family"] == "IE Mobile":
-        browser["family"] = "IE"
-
-    filter_settings = _get_filter_settings(project_config, _legacy_browsers_filter)
-
-    # handle old style config
-    if filter_settings is None:
-        return _filter_default(browser)
-
-    enabled_sub_filters = filter_settings.get("options")
-    if isinstance(enabled_sub_filters, collections.Sequence):
-        for sub_filter_name in enabled_sub_filters:
-            sub_filter = _legacy_browsers_sub_filters.get(sub_filter_name)
-            if sub_filter is not None and sub_filter(browser):
-                return True
-
-    return False
-
 
 class _LegacyBrowserFilterSerializer(serializers.Serializer):
     active = serializers.BooleanField()
@@ -386,7 +177,7 @@ class _LegacyBrowserFilterSerializer(serializers.Serializer):
     )
 
 
-_legacy_browsers_filter.spec = _FilterSpec(
+_legacy_browsers_filter = _FilterSpec(
     id=FilterStatKeys.LEGACY_BROWSER,
     name="Filter out known errors from legacy browsers",
     description="Older browsers often give less accurate information, and while they may report valid issues, "
@@ -395,185 +186,7 @@ _legacy_browsers_filter.spec = _FilterSpec(
 )
 
 
-def _filter_default(browser):
-    """
-    Legacy filter - new users specify individual filters
-    """
-    try:
-        minimum_version = MIN_VERSIONS[browser["family"]]
-    except KeyError:
-        return False
-
-    try:
-        major_browser_version = int(browser["major"])
-    except (TypeError, ValueError):
-        return False
-
-    if minimum_version > major_browser_version:
-        return True
-
-    return False
-
-
-def _filter_opera_pre_15(browser):
-    if not browser["family"] == "Opera":
-        return False
-
-    try:
-        major_browser_version = int(browser["major"])
-    except (TypeError, ValueError):
-        return False
-
-    if major_browser_version < 15:
-        return True
-
-    return False
-
-
-def _filter_safari_pre_6(browser):
-    if not browser["family"] == "Safari":
-        return False
-
-    try:
-        major_browser_version = int(browser["major"])
-    except (TypeError, ValueError):
-        return False
-
-    if major_browser_version < 6:
-        return True
-
-    return False
-
-
-def _filter_android_pre_4(browser):
-    if not browser["family"] == "Android":
-        return False
-
-    try:
-        major_browser_version = int(browser["major"])
-    except (TypeError, ValueError):
-        return False
-
-    if major_browser_version < 4:
-        return True
-
-    return False
-
-
-def _filter_opera_mini_pre_8(browser):
-    if not browser["family"] == "Opera Mini":
-        return False
-
-    try:
-        major_browser_version = int(browser["major"])
-    except (TypeError, ValueError):
-        return False
-
-    if major_browser_version < 8:
-        return True
-
-    return False
-
-
-def _filter_ie11(browser):
-    return _filter_ie_internal(browser, lambda major_ver: major_ver == 11)
-
-
-def _filter_ie10(browser):
-    return _filter_ie_internal(browser, lambda major_ver: major_ver == 10)
-
-
-def _filter_ie9(browser):
-    return _filter_ie_internal(browser, lambda major_ver: major_ver == 9)
-
-
-def _filter_ie_pre_9(browser):
-    return _filter_ie_internal(browser, lambda major_ver: major_ver <= 8)
-
-
-def _filter_ie_internal(browser, compare_version):
-    if not browser["family"] == "IE":
-        return False
-
-    try:
-        major_browser_version = int(browser["major"])
-    except (TypeError, ValueError):
-        return False
-
-    return compare_version(major_browser_version)
-
-
-# list all browser specific sub filters that should be called
-_legacy_browsers_sub_filters = {
-    "default": _filter_default,
-    "opera_pre_15": _filter_opera_pre_15,
-    "safari_pre_6": _filter_safari_pre_6,
-    "android_pre_4": _filter_android_pre_4,
-    "opera_mini_pre_8": _filter_opera_mini_pre_8,
-    "ie9": _filter_ie9,
-    "ie10": _filter_ie10,
-    "ie11": _filter_ie11,
-    "ie_pre_9": _filter_ie_pre_9,
-}
-
-# ************* web crawler filter *************
-
-# not all of these agents are guaranteed to execute JavaScript, but to avoid
-# overhead of identifying which ones do, and which ones will over time we simply
-# target all of the major ones
-_CRAWLERS = re.compile(
-    r"|".join(
-        (
-            # Google spiders (Adsense and others)
-            # https://support.google.com/webmasters/answer/1061943?hl=en
-            r"Mediapartners\-Google",
-            r"AdsBot\-Google",
-            r"Googlebot",
-            r"FeedFetcher\-Google",
-            # Bing search
-            r"BingBot",
-            r"BingPreview",
-            # Baidu search
-            r"Baiduspider",
-            # Yahoo
-            r"Slurp",
-            # Sogou
-            r"Sogou",
-            # facebook
-            r"facebook",
-            # Alexa
-            r"ia_archiver",
-            # Generic bot
-            r"bots?[\/\s\)\;]",
-            # Generic spider
-            r"spider[\/\s\)\;]",
-            # Slack - see https://api.slack.com/robots
-            r"Slack",
-            # Google indexing bot
-            r"Calypso AppCrawler",
-            # Pingdom
-            r"pingdom",
-            # Lytics
-            r"lyticsbot",
-        )
-    ),
-    re.I,
-)
-
-
-def _web_crawlers_filter(project_config, data):
-    try:
-        for key, value in get_path(data, "request", "headers", filter=True) or ():
-            if key.lower() == "user-agent":
-                if not value:
-                    return False
-                return bool(_CRAWLERS.search(value))
-        return False
-    except LookupError:
-        return False
-
-
-_web_crawlers_filter.spec = _FilterSpec(
+_web_crawlers_filter = _FilterSpec(
     id=FilterStatKeys.WEB_CRAWLER,
     name="Filter out known web crawlers",
     description="Some crawlers may execute pages in incompatible ways which then cause errors that"
diff --git a/src/sentry/models/monitor.py b/src/sentry/models/monitor.py
index 863b292730..dc41820d56 100644
--- a/src/sentry/models/monitor.py
+++ b/src/sentry/models/monitor.py
@@ -166,7 +166,7 @@ class Monitor(Model):
         return next_checkin + timedelta(minutes=int(self.config.get("checkin_margin") or 0))
 
     def mark_failed(self, last_checkin=None, reason=MonitorFailure.UNKNOWN):
-        from sentry.coreapi import ClientApiHelper
+        from sentry.coreapi import insert_data_to_database_legacy
         from sentry.event_manager import EventManager
         from sentry.models import Project
         from sentry.signals import monitor_failed
@@ -201,7 +201,6 @@ class Monitor(Model):
         )
         event_manager.normalize()
         data = event_manager.get_data()
-        helper = ClientApiHelper(project_id=self.project_id)
-        helper.insert_data_to_database(data)
+        insert_data_to_database_legacy(data)
         monitor_failed.send(monitor=self, sender=type(self))
         return True
diff --git a/src/sentry/models/projectkey.py b/src/sentry/models/projectkey.py
index 82f2d25062..3d74737bf1 100644
--- a/src/sentry/models/projectkey.py
+++ b/src/sentry/models/projectkey.py
@@ -194,37 +194,23 @@ class ProjectKey(Model):
     def csp_endpoint(self):
         endpoint = self.get_endpoint()
 
-        return "%s%s?sentry_key=%s" % (
-            endpoint,
-            reverse("sentry-api-csp-report", args=[self.project_id]),
-            self.public_key,
-        )
+        return "%s/api/%s/csp-report/?sentry_key=%s" % (endpoint, self.project_id, self.public_key)
 
     @property
     def security_endpoint(self):
         endpoint = self.get_endpoint()
 
-        return "%s%s?sentry_key=%s" % (
-            endpoint,
-            reverse("sentry-api-security-report", args=[self.project_id]),
-            self.public_key,
-        )
+        return "%s/api/%s/security/?sentry_key=%s" % (endpoint, self.project_id, self.public_key)
 
     @property
     def minidump_endpoint(self):
         endpoint = self.get_endpoint()
 
-        return "%s%s/?sentry_key=%s" % (
-            endpoint,
-            reverse("sentry-api-minidump", args=[self.project_id]),
-            self.public_key,
-        )
+        return "%s/api/%s/minidump/?sentry_key=%s" % (endpoint, self.project_id, self.public_key)
 
     @property
     def unreal_endpoint(self):
-        return self.get_endpoint() + reverse(
-            "sentry-api-unreal", args=[self.project_id, self.public_key]
-        )
+        return "%s/api/%s/unreal/%s/" % (self.get_endpoint(), self.project_id, self.public_key)
 
     @property
     def js_sdk_loader_cdn_url(self):
diff --git a/src/sentry/relay/config.py b/src/sentry/relay/config.py
index 206b673560..f742f964df 100644
--- a/src/sentry/relay/config.py
+++ b/src/sentry/relay/config.py
@@ -12,7 +12,7 @@ from sentry import quotas, utils
 from sentry.constants import ObjectStatus
 from sentry.grouping.api import get_grouping_config_dict_for_project
 from sentry.interfaces.security import DEFAULT_DISALLOWED_SOURCES
-from sentry.message_filters import get_all_filters
+from sentry.message_filters import get_all_filter_specs
 from sentry.utils.data_filters import FilterTypes, FilterStatKeys, get_filter_key
 from sentry.utils.http import get_origins
 from sentry.utils.sdk import configure_scope
@@ -45,7 +45,7 @@ def get_public_key_configs(project, full_config, project_keys=None):
 def get_filter_settings(project):
     filter_settings = {}
 
-    for flt in get_all_filters():
+    for flt in get_all_filter_specs():
         filter_id = get_filter_key(flt)
         settings = _load_filter_settings(flt, project)
         filter_settings[filter_id] = settings
@@ -267,7 +267,7 @@ def _load_filter_settings(flt, project):
         If the project does not explicitly specify the filter options then the
         default options for the filter will be returned
     """
-    filter_id = flt.spec.id
+    filter_id = flt.id
     filter_key = u"filters:{}".format(filter_id)
     setting = project.get_option(filter_key)
 
@@ -285,9 +285,7 @@ def _filter_option_to_config_setting(flt, setting):
     if setting is None:
         raise ValueError(
             "Could not find filter state for filter {0}."
-            " You need to register default filter state in projectoptions.defaults.".format(
-                flt.spec.id
-            )
+            " You need to register default filter state in projectoptions.defaults.".format(flt.id)
         )
 
     is_enabled = setting != "0"
@@ -296,7 +294,7 @@ def _filter_option_to_config_setting(flt, setting):
 
     # special case for legacy browser.
     # If the number of special cases increases we'll have to factor this functionality somewhere
-    if flt.spec.id == FilterStatKeys.LEGACY_BROWSER:
+    if flt.id == FilterStatKeys.LEGACY_BROWSER:
         if is_enabled:
             if setting == "1":
                 ret_val["options"] = ["default"]
diff --git a/src/sentry/tasks/reprocessing.py b/src/sentry/tasks/reprocessing.py
index f88b92941b..4dd235e440 100644
--- a/src/sentry/tasks/reprocessing.py
+++ b/src/sentry/tasks/reprocessing.py
@@ -15,7 +15,7 @@ logger = logging.getLogger(__name__)
 @instrumented_task(name="sentry.tasks.reprocess_events", queue="events.reprocess_events")
 def reprocess_events(project_id, **kwargs):
     from sentry.models import ProcessingIssue
-    from sentry.coreapi import ClientApiHelper
+    from sentry.coreapi import insert_data_to_database_legacy
     from sentry import app
 
     lock_key = "events:reprocess_events:%s" % project_id
@@ -26,9 +26,8 @@ def reprocess_events(project_id, **kwargs):
         with lock.acquire():
             raw_events, have_more = ProcessingIssue.objects.find_resolved(project_id)
             if raw_events:
-                helper = ClientApiHelper()
                 for raw_event in raw_events:
-                    helper.insert_data_to_database(raw_event.data.data, from_reprocessing=True)
+                    insert_data_to_database_legacy(raw_event.data.data, from_reprocessing=True)
                     create_reprocessing_report(project_id=project_id, event_id=raw_event.event_id)
                     # Here we only delete the raw event but leave the
                     # reprocessing report alive.  When the queue
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 2354677d35..ae59df9742 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -86,7 +86,6 @@ from .skips import requires_snuba
 from .helpers import (
     AuthProvider,
     Feature,
-    get_auth_header,
     TaskRunner,
     override_options,
     parse_queries,
@@ -228,126 +227,6 @@ class BaseTestCase(Fixtures, Exam):
     def _makePostMessage(self, data):
         return base64.b64encode(self._makeMessage(data))
 
-    def _postWithHeader(self, data, key=None, secret=None, protocol=None, **extra):
-        if key is None:
-            key = self.projectkey.public_key
-            secret = self.projectkey.secret_key
-
-        message = self._makePostMessage(data)
-        with self.tasks():
-            resp = self.client.post(
-                reverse("sentry-api-store"),
-                message,
-                content_type="application/octet-stream",
-                HTTP_X_SENTRY_AUTH=get_auth_header("_postWithHeader/0.0.0", key, secret, protocol),
-                **extra
-            )
-        return resp
-
-    def _postCspWithHeader(self, data, key=None, **extra):
-        if isinstance(data, dict):
-            body = json.dumps({"csp-report": data})
-        elif isinstance(data, six.string_types):
-            body = data
-        path = reverse("sentry-api-csp-report", kwargs={"project_id": self.project.id})
-        path += "?sentry_key=%s" % self.projectkey.public_key
-        with self.tasks():
-            return self.client.post(
-                path,
-                data=body,
-                content_type="application/csp-report",
-                HTTP_USER_AGENT=DEFAULT_USER_AGENT,
-                **extra
-            )
-
-    def _postMinidumpWithHeader(
-        self, upload_file_minidump, data=None, key=None, raw=False, **extra
-    ):
-        if raw:
-            data = upload_file_minidump.read()
-            extra.setdefault("content_type", "application/octet-stream")
-        else:
-            data = dict(data or {})
-            data["upload_file_minidump"] = upload_file_minidump
-
-        path = reverse("sentry-api-minidump", kwargs={"project_id": self.project.id})
-        path += "?sentry_key=%s" % self.projectkey.public_key
-        with self.tasks():
-            return self.client.post(path, data=data, HTTP_USER_AGENT=DEFAULT_USER_AGENT, **extra)
-
-    def _postUnrealWithHeader(self, upload_unreal_crash, data=None, key=None, **extra):
-        path = reverse(
-            "sentry-api-unreal",
-            kwargs={"project_id": self.project.id, "sentry_key": self.projectkey.public_key},
-        )
-        with self.tasks():
-            return self.client.post(
-                path,
-                data=upload_unreal_crash,
-                content_type="application/octet-stream",
-                HTTP_USER_AGENT=DEFAULT_USER_AGENT,
-                **extra
-            )
-
-    def _postEventAttachmentWithHeader(self, attachment, **extra):
-        path = reverse(
-            "sentry-api-event-attachment",
-            kwargs={"project_id": self.project.id, "event_id": self.event.event_id},
-        )
-
-        key = self.projectkey.public_key
-        secret = self.projectkey.secret_key
-
-        with self.tasks():
-            return self.client.post(
-                path,
-                attachment,
-                # HTTP_USER_AGENT=DEFAULT_USER_AGENT,
-                HTTP_X_SENTRY_AUTH=get_auth_header("_postWithHeader/0.0.0", key, secret, 7),
-                **extra
-            )
-
-    def _getWithReferer(self, data, key=None, referer="sentry.io", protocol="4"):
-        if key is None:
-            key = self.projectkey.public_key
-
-        headers = {}
-        if referer is not None:
-            headers["HTTP_REFERER"] = referer
-
-        message = self._makeMessage(data)
-        qs = {
-            "sentry_version": protocol,
-            "sentry_client": "raven-js/lol",
-            "sentry_key": key,
-            "sentry_data": message,
-        }
-        with self.tasks():
-            resp = self.client.get(
-                "%s?%s" % (reverse("sentry-api-store", args=(self.project.pk,)), urlencode(qs)),
-                **headers
-            )
-        return resp
-
-    def _postWithReferer(self, data, key=None, referer="sentry.io", protocol="4"):
-        if key is None:
-            key = self.projectkey.public_key
-
-        headers = {}
-        if referer is not None:
-            headers["HTTP_REFERER"] = referer
-
-        message = self._makeMessage(data)
-        qs = {"sentry_version": protocol, "sentry_client": "raven-js/lol", "sentry_key": key}
-        with self.tasks():
-            resp = self.client.post(
-                "%s?%s" % (reverse("sentry-api-store", args=(self.project.pk,)), urlencode(qs)),
-                data=message,
-                content_type="application/json",
-                **headers
-            )
-        return resp
-
     def options(self, options):
         """
         A context manager that temporarily sets a global option and reverts
@@ -355,9 +234,6 @@ class BaseTestCase(Fixtures, Exam):
         """
         return override_options(options)
 
-    _postWithSignature = _postWithHeader
-    _postWithNewSignature = _postWithHeader
-
     def assert_valid_deleted_log(self, deleted_log, original_object):
         assert deleted_log is not None
         assert original_object.name == deleted_log.name
diff --git a/src/sentry/testutils/relay.py b/src/sentry/testutils/relay.py
index d975f8a7f8..ca71e7180d 100644
--- a/src/sentry/testutils/relay.py
+++ b/src/sentry/testutils/relay.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-import json
-
 import pytest
 import requests
 import responses
@@ -62,31 +60,14 @@ def adjust_settings_for_relay_tests(settings):
     settings.SENTRY_RELAY_WHITELIST_PK = ["SMSesqan65THCV6M4qs4kBzPai60LzuDn-xNsvYpuP8"]
 
 
-class SentryStoreHelper(object):
-    """
-    Unit tests that post to the store entry point should use this
-    helper class (together with RelayStoreHelper) to check the functionality
-    with both posting to the Sentry Store and the Relay Store.
-    """
-
-    def use_relay(self):
-        return False
-
-    def post_and_retrieve_event(self, data):
-        resp = self._postWithHeader(data)
-        assert resp.status_code == 200
-        event_id = json.loads(resp.content)["id"]
-
-        event = eventstore.get_event_by_id(self.project.id, event_id)
-        assert event is not None
-        return event
-
-
 class RelayStoreHelper(object):
     """
-    Unit tests that post to the store entry point should use this
-    helper class (together with RelayStoreHelper) to check the functionality
-    with both posting to the Sentry Store and the Relay Store.
+    Tests that post to the store entry point should use this helper class
+    (together with RelayStoreHelper) to check the functionality with relay.
+
+    Note that any methods defined on this mixin are very slow. Consider whether
+    your test really needs to test the entire ingestion pipeline or whether
+    it's fine to call the regular `store_event` or `create_event`.
     """
 
     def use_relay(self):
@@ -118,14 +99,56 @@ class RelayStoreHelper(object):
         except AssertionError:
             return None
 
-    def setUp(self):  # NOQA
+    def post_and_retrieve_minidump(self, files, data):
+        url = self.get_relay_minidump_url(self.project.id, self.projectkey.public_key)
+        responses.add_passthru(url)
+
+        resp = requests.post(url, files=dict(files or ()), data=dict(data or ()),)
+
+        assert resp.ok
+        event_id = resp.text.strip().replace("-", "")
+
+        event = self.wait_for_ingest_consumer(
+            lambda: eventstore.get_event_by_id(self.project.id, event_id)
+        )
+        # check that we found it in Snuba
+        assert event is not None
+        return event
+
+    def post_and_retrieve_unreal(self, payload):
+        url = self.get_relay_unreal_url(self.project.id, self.projectkey.public_key)
+        responses.add_passthru(url)
+
+        resp = requests.post(url, data=payload,)
+
+        assert resp.ok
+        event_id = resp.text.strip().replace("-", "")
+
+        event = self.wait_for_ingest_consumer(
+            lambda: eventstore.get_event_by_id(self.project.id, event_id)
+        )
+        # check that we found it in Snuba
+        assert event is not None
+        return event
+
+    @pytest.fixture(autouse=True)
+    def relay_setup_fixtures(
+        self,
+        settings,
+        live_server,
+        get_relay_store_url,
+        get_relay_minidump_url,
+        get_relay_unreal_url,
+        wait_for_ingest_consumer,
+    ):
         self.auth_header = get_auth_header(
             "TEST_USER_AGENT/0.0.0", self.projectkey.public_key, self.projectkey.secret_key, "7"
         )
-        adjust_settings_for_relay_tests(self.settings)
 
-    @pytest.fixture(autouse=True)
-    def setup_fixtures(self, settings, live_server, get_relay_store_url, wait_for_ingest_consumer):
+        adjust_settings_for_relay_tests(settings)
+
         self.settings = settings
         self.get_relay_store_url = get_relay_store_url  # noqa
+        self.get_relay_minidump_url = get_relay_minidump_url  # noqa
+        self.get_relay_unreal_url = get_relay_unreal_url  # noqa
         self.wait_for_ingest_consumer = wait_for_ingest_consumer(settings)  # noqa
diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index ea421dee93..eace2f9ffd 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -11,7 +11,6 @@ from django.utils.http import is_safe_url
 from time import time
 
 from sentry.models import User, Authenticator
-from sentry.utils.compat import map
 
 logger = logging.getLogger("sentry.auth")
 
@@ -27,19 +26,6 @@ class AuthUserPasswordExpired(Exception):
         self.user = user
 
 
-def _make_key_value(val):
-    return val.strip().split(u"=", 1)
-
-
-def parse_auth_header(header):
-    if isinstance(header, bytes):
-        header = header.decode("latin1")
-    try:
-        return dict(map(_make_key_value, header.split(u" ", 1)[1].split(u",")))
-    except Exception:
-        return {}
-
-
 def get_auth_providers():
     return [
         key
diff --git a/src/sentry/utils/data_filters.py b/src/sentry/utils/data_filters.py
index f2cf95d0f6..8d4db3f053 100644
--- a/src/sentry/utils/data_filters.py
+++ b/src/sentry/utils/data_filters.py
@@ -1,13 +1,6 @@
 from __future__ import absolute_import
 
-import fnmatch
-import ipaddress
-import six
-
-from django.utils.encoding import force_text
-
 from sentry import tsdb
-from sentry.utils.safe import get_path
 from sentry.relay.utils import to_camel_case_name
 
 
@@ -49,76 +42,5 @@ class FilterTypes(object):
     RELEASES = "releases"
 
 
-def is_valid_ip(project_config, ip_address):
-    """
-    Verify that an IP address is not being blacklisted
-    for the given project.
-    """
-    blacklist = get_path(project_config.config, "filterSettings", "clientIps", "blacklistedIps")
-    if not blacklist:
-        return True
-
-    for addr in blacklist:
-        # We want to error fast if it's an exact match
-        if ip_address == addr:
-            return False
-
-        # Check to make sure it's actually a range before
-        try:
-            if "/" in addr and (
-                ipaddress.ip_address(six.text_type(ip_address))
-                in ipaddress.ip_network(six.text_type(addr), strict=False)
-            ):
-                return False
-        except ValueError:
-            # Ignore invalid values here
-            pass
-
-    return True
-
-
-def is_valid_release(project_config, release):
-    """
-    Verify that a release is not being filtered
-    for the given project.
-    """
-    invalid_versions = get_path(project_config.config, "filterSettings", "releases", "releases")
-
-    if not invalid_versions:
-        return True
-
-    release = force_text(release).lower()
-
-    for version in invalid_versions:
-        if fnmatch.fnmatch(release, version.lower()):
-            return False
-
-    return True
-
-
-def is_valid_error_message(project_config, message):
-    """
-    Verify that an error message is not being filtered
-    for the given project.
-    """
-    filtered_errors = get_path(project_config.config["filterSettings"], "errorMessages", "patterns")
-
-    if not filtered_errors:
-        return True
-
-    message = force_text(message).lower()
-
-    for error in filtered_errors:
-        try:
-            if fnmatch.fnmatch(message, error.lower()):
-                return False
-        except Exception:
-            # fnmatch raises a string when the pattern is bad.
-            # Patterns come from end users and can be full of mistakes.
-            pass
-
-    return True
-
-
 def get_filter_key(flt):
-    return to_camel_case_name(flt.spec.id.replace("-", "_"))
+    return to_camel_case_name(flt.id.replace("-", "_"))
diff --git a/src/sentry/utils/pytest/kafka.py b/src/sentry/utils/pytest/kafka.py
index 0cfc06b9c0..69b6977607 100644
--- a/src/sentry/utils/pytest/kafka.py
+++ b/src/sentry/utils/pytest/kafka.py
@@ -118,22 +118,15 @@ def scope_consumers():
 
     """
     all_consumers = {
-        "ingest_events": None,
-        "ingest_transactions": None,
-        "ingest_attachments": None,
+        # Relay is configured to use this topic for all ingest messages. See
+        # `templates/config.yml`.
+        "ingest-events": None,
         "outcomes": None,
     }
+
     yield all_consumers
 
-    for (consumer, consumer_name) in (
-        (all_consumers.get(consumer_name), consumer_name)
-        for consumer_name in (
-            "ingest_events",
-            "ingest_transactions",
-            "ingest_attachments",
-            "outcomes",
-        )
-    ):
+    for consumer_name, consumer in six.iteritems(all_consumers):
         if consumer is not None:
             try:
                 # stop the consumer
@@ -148,7 +141,7 @@ def session_ingest_consumer(scope_consumers, kafka_admin, task_runner):
     """
     Returns a factory for a session ingest consumer.
 
-    Note/Warning: Once an inject consumer is created it will be reused by all tests in the session.
+    Note/Warning: Once an ingest consumer is created it will be reused by all tests in the session.
     The ingest consumer is created the first time with the provided settings and then reused.
     If you don't want this behaviour DO NOT USE this fixture (create a fixture, similar with this one,
     that returns a new consumer at each invocation rather then reusing it)
@@ -157,30 +150,36 @@ def session_ingest_consumer(scope_consumers, kafka_admin, task_runner):
     """
 
     def ingest_consumer(settings):
-        from sentry.ingest.ingest_consumer import ConsumerType, get_ingest_consumer
+        from sentry.ingest.ingest_consumer import (
+            create_batching_kafka_consumer,
+            IngestConsumerWorker,
+        )
+
+        # Relay is configured to use this topic for all ingest messages. See
+        # `templates/config.yml`.
+        topic_event_name = "ingest-events"
 
-        if scope_consumers["ingest_events"] is not None:
-            return scope_consumers[
-                "ingest_events"
-            ]  # reuse whatever was already created (will ignore the settings)
+        if scope_consumers[topic_event_name] is not None:
+            # reuse whatever was already created (will ignore the settings)
+            return scope_consumers[topic_event_name]
 
         # first time the consumer is requested, create it using settings
-        topic_event_name = ConsumerType.get_topic_name(ConsumerType.Events)
         admin = kafka_admin(settings)
         admin.delete_topic(topic_event_name)
 
         # simulate the event ingestion task
         group_id = "test-consumer"
 
-        consumer = get_ingest_consumer(
+        consumer = create_batching_kafka_consumer(
+            topic_names=[topic_event_name],
+            worker=IngestConsumerWorker(concurrency=None),
             max_batch_size=1,
             max_batch_time=10,
             group_id=group_id,
-            consumer_types=[ConsumerType.Events],
             auto_offset_reset="earliest",
         )
 
-        scope_consumers["ingest_events"] = consumer
+        scope_consumers[topic_event_name] = consumer
 
         return consumer
 
@@ -207,8 +206,8 @@ def wait_for_ingest_consumer(session_ingest_consumer, task_runner):
     assert result == expected_result
     """
 
-    def factory(settings):
-        consumer = session_ingest_consumer(settings)
+    def factory(settings, **kwargs):
+        consumer = session_ingest_consumer(settings, **kwargs)
 
         def waiter(exit_predicate, max_time=MAX_SECONDS_WAITING_FOR_EVENT):
             """
diff --git a/src/sentry/utils/pytest/relay.py b/src/sentry/utils/pytest/relay.py
index 281ed1373b..4367133054 100644
--- a/src/sentry/utils/pytest/relay.py
+++ b/src/sentry/utils/pytest/relay.py
@@ -139,7 +139,23 @@ def relay_server(relay_server_setup):
 
 @pytest.fixture
 def get_relay_store_url(relay_server):
-    def relay_store_url(project_id):
+    def inner(project_id):
         return "{}/api/{}/store/".format(relay_server["url"], project_id)
 
-    return relay_store_url
+    return inner
+
+
+@pytest.fixture
+def get_relay_minidump_url(relay_server):
+    def inner(project_id, key):
+        return "{}/api/{}/minidump/?sentry_key={}".format(relay_server["url"], project_id, key)
+
+    return inner
+
+
+@pytest.fixture
+def get_relay_unreal_url(relay_server):
+    def inner(project_id, key):
+        return "{}/api/{}/unreal/{}/".format(relay_server["url"], project_id, key)
+
+    return inner
diff --git a/src/sentry/utils/pytest/template/config.yml b/src/sentry/utils/pytest/template/config.yml
index 6a9c563a36..5ddfcb1d6f 100644
--- a/src/sentry/utils/pytest/template/config.yml
+++ b/src/sentry/utils/pytest/template/config.yml
@@ -11,4 +11,9 @@ processing:
   enabled: true
   kafka_config:
     - {name: "bootstrap.servers", value: "${KAFKA_HOST}:9093"}
+  topics:
+    events: ingest-events
+    attachments: ingest-events
+    transactions: ingest-events
+    outcomes: outcomes
   redis: redis://${REDIS_HOST}:6379
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index c72ff9c00c..c638f54286 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -1,1066 +1,14 @@
 from __future__ import absolute_import, print_function
 
-import base64
-import math
-
-import io
-import jsonschema
-import logging
-import random
-import six
-import traceback
-import uuid
-
-from time import time
-
-from django.conf import settings
-from django.contrib.auth.models import AnonymousUser
-from django.core.cache import cache
-from django.core.urlresolvers import reverse
-from django.core.files import uploadhandler
-from django.http import HttpResponse, HttpResponseRedirect, HttpResponseNotAllowed
-from django.http.multipartparser import MultiPartParser
-from django.utils.encoding import force_bytes
-from django.views.decorators.cache import never_cache, cache_control
-from django.views.decorators.csrf import csrf_exempt
+from django.http import HttpResponse
+from django.views.decorators.cache import cache_control
 from django.views.generic.base import View as BaseView
-from functools import wraps
-from querystring_parser import parser
-from symbolic import ProcessMinidumpError, Unreal4Crash, Unreal4Error
-from sentry_relay import ProcessingErrorInvalidTransaction
-
-from sentry import features, options, quotas
-from sentry.attachments import CachedAttachment
-from sentry.constants import DataCategory, ObjectStatus
-from sentry.coreapi import (
-    Auth,
-    APIError,
-    APIForbidden,
-    APIRateLimited,
-    ClientApiHelper,
-    ClientAuthHelper,
-    SecurityAuthHelper,
-    MinidumpAuthHelper,
-    safely_load_json_string,
-    logger as api_logger,
-)
-from sentry.event_manager import EventManager
-from sentry.interfaces import schemas
-from sentry.interfaces.base import get_interface
-from sentry.lang.native.unreal import (
-    merge_unreal_user,
-    unreal_attachment_type,
-    merge_unreal_context_event,
-    merge_unreal_logs_event,
-    write_applecrashreport_placeholder,
-)
 
-from sentry.lang.native.minidump import (
-    merge_attached_event,
-    merge_attached_breadcrumbs,
-    write_minidump_placeholder,
-    MINIDUMP_ATTACHMENT_TYPE,
-)
-from sentry.models import Project, File, EventAttachment, Organization
-from sentry.signals import event_accepted, event_received
-from sentry.quotas.base import RateLimit
-from sentry.utils import json, metrics
-from sentry.utils.data_filters import FilterStatKeys
-from sentry.utils.http import is_valid_origin, get_origins, is_same_domain, origin_from_request
-from sentry.utils.outcomes import Outcome, track_outcome
-from sentry.utils.pubsub import QueuedPublisherService, KafkaPublisher
-from sentry.utils.safe import safe_execute
-from sentry.utils.sdk import configure_scope
+from sentry.models import Project
+from sentry.utils import json
+from sentry.utils.http import get_origins
 from sentry.web.helpers import render_to_response
 from sentry.web.client_config import get_client_config
-from sentry.relay.config import get_project_config
-from sentry.datascrubbing import scrub_data
-
-logger = logging.getLogger("sentry")
-minidumps_logger = logging.getLogger("sentry.minidumps")
-
-# Transparent 1x1 gif
-# See http://probablyprogramming.com/2009/03/15/the-tiniest-gif-ever
-PIXEL = base64.b64decode("R0lGODlhAQABAAD/ACwAAAAAAQABAAACADs=")
-
-PROTOCOL_VERSIONS = frozenset(("2.0", "3", "4", "5", "6", "7"))
-
-kafka_publisher = (
-    QueuedPublisherService(
-        KafkaPublisher(
-            getattr(settings, "KAFKA_RAW_EVENTS_PUBLISHER_CONNECTION", None), asynchronous=False
-        )
-    )
-    if getattr(settings, "KAFKA_RAW_EVENTS_PUBLISHER_ENABLED", False)
-    else None
-)
-
-
-def allow_cors_options(func):
-    """
-    Decorator that adds automatic handling of OPTIONS requests for CORS
-
-    If the request is OPTIONS (i.e. pre flight CORS) construct a OK (200) response
-    in which we explicitly enable the caller and add the custom headers that we support
-    For other requests just add the appropriate CORS headers
-
-    :param func: the original request handler
-    :return: a request handler that shortcuts OPTIONS requests and just returns an OK (CORS allowed)
-    """
-
-    @wraps(func)
-    def allow_cors_options_wrapper(self, request, *args, **kwargs):
-
-        if request.method == "OPTIONS":
-            response = HttpResponse(status=200)
-            response["Access-Control-Max-Age"] = "3600"  # don't ask for options again for 1 hour
-        else:
-            response = func(self, request, *args, **kwargs)
-
-        allow = ", ".join(self._allowed_methods())
-        response["Allow"] = allow
-        response["Access-Control-Allow-Methods"] = allow
-        response["Access-Control-Allow-Headers"] = (
-            "X-Sentry-Auth, X-Requested-With, Origin, Accept, "
-            "Content-Type, Authentication, Authorization, Content-Encoding"
-        )
-        response["Access-Control-Expose-Headers"] = "X-Sentry-Error, Retry-After"
-
-        if request.META.get("HTTP_ORIGIN") == "null":
-            origin = "null"  # if ORIGIN header is explicitly specified as 'null' leave it alone
-        else:
-            origin = origin_from_request(request)
-
-        if origin is None or origin == "null":
-            response["Access-Control-Allow-Origin"] = "*"
-        else:
-            response["Access-Control-Allow-Origin"] = origin
-
-        return response
-
-    return allow_cors_options_wrapper
-
-
-def disable_transaction_events():
-    """
-    Do not send a transaction event for the current transaction.
-
-    This is used in StoreView to prevent infinite recursion.
-    """
-    with configure_scope() as scope:
-        if scope.span:
-            scope.span.sampled = False
-
-
-def api(func):
-    @wraps(func)
-    def wrapped(request, *args, **kwargs):
-        data = func(request, *args, **kwargs)
-        if request.is_ajax():
-            response = HttpResponse(data)
-            response["Content-Type"] = "application/json"
-        else:
-            ref = request.META.get("HTTP_REFERER")
-            if ref is None or not is_same_domain(ref, request.build_absolute_uri()):
-                ref = reverse("sentry")
-            return HttpResponseRedirect(ref)
-        return response
-
-    return wrapped
-
-
-def _get_project_id_from_request(project_id, request, auth_helper_cls, helper):
-    """
-    Tries to return the project id (as a string) from the request params or from the auth info
-
-    :param project_id: the project id from the url (or None if not specified)
-    :param request: the HTTP request
-    :param auth_helper_cls: Authentication helper class (from APIView)
-    :param helper: client API helper
-    :return: the project id (as string) if found raises if not found
-
-    :raises APIUnauthorized if bad Authorization header detected or the key is not usable (e.g. disabled)
-    """
-    if project_id is not None:
-        # we have an explicit project id, just return it
-        return six.text_type(project_id)
-    else:  # look in the authentication information for the project id
-        auth = auth_helper_cls.auth_from_request(request)
-        return helper.project_id_from_auth(auth)
-
-
-def process_event(event_manager, project, key, remote_addr, helper, attachments, project_config):
-    event_received.send_robust(ip=remote_addr, project=project, sender=process_event)
-
-    start_time = time()
-
-    data = event_manager.get_data()
-    should_filter, filter_reason = event_manager.should_filter()
-    del event_manager
-
-    event_id = data["event_id"]
-    data_category = DataCategory.from_event_type(data.get("type"))
-
-    if should_filter:
-        track_outcome(
-            project_config.organization_id,
-            project_config.project_id,
-            key.id,
-            Outcome.FILTERED,
-            filter_reason,
-            event_id=event_id,
-            category=data_category,
-        )
-        metrics.incr("events.blacklisted", tags={"reason": filter_reason}, skip_internal=False)
-
-        # relay will no longer be able to provide information about filter
-        # status so to see the impact we're adding a way to turn on relay
-        # like behavior here.
-        if options.get("store.lie-about-filter-status"):
-            return event_id
-
-        raise APIForbidden("Event dropped due to filter: %s" % (filter_reason,))
-
-    # TODO: improve this API (e.g. make RateLimit act on __ne__)
-    rate_limit = safe_execute(
-        quotas.is_rate_limited, project=project, key=key, _with_transaction=False
-    )
-    if isinstance(rate_limit, bool):
-        rate_limit = RateLimit(is_limited=rate_limit, retry_after=None)
-
-    # XXX(dcramer): when the rate limiter fails we drop events to ensure
-    # it cannot cascade
-    if rate_limit is None or rate_limit.is_limited:
-        if rate_limit is None:
-            api_logger.debug("Dropped event due to error with rate limiter")
-
-        reason = rate_limit.reason_code if rate_limit else None
-        track_outcome(
-            project_config.organization_id,
-            project_config.project_id,
-            key.id,
-            Outcome.RATE_LIMITED,
-            reason,
-            event_id=event_id,
-            category=data_category,
-        )
-        metrics.incr("events.dropped", tags={"reason": reason or "unknown"}, skip_internal=False)
-
-        if rate_limit is not None:
-            raise APIRateLimited(rate_limit.retry_after)
-
-    # TODO(dcramer): ideally we'd only validate this if the event_id was
-    # supplied by the user
-    cache_key = "ev:%s:%s" % (project_config.project_id, event_id)
-
-    # XXX(markus): I believe this code is extremely broken:
-    #
-    # * it practically uses memcached in prod which has no consistency
-    #   guarantees (no idea how we don't run into issues there)
-    #
-    # * a TTL of 1h basically doesn't guarantee any deduplication at all. It
-    #   just guarantees a good error message... for one hour.
-    if cache.get(cache_key) is not None:
-        track_outcome(
-            project_config.organization_id,
-            project_config.project_id,
-            key.id,
-            Outcome.INVALID,
-            "duplicate",
-            event_id=event_id,
-            category=data_category,
-        )
-        raise APIForbidden("An event with the same ID already exists (%s)" % (event_id,))
-
-    data = scrub_data(project, dict(data))
-
-    # mutates data (strips a lot of context if not queued)
-    helper.insert_data_to_database(data, start_time=start_time, attachments=attachments)
-
-    cache.set(cache_key, "", 60 * 60)  # Cache for 1 hour
-
-    api_logger.debug("New event received (%s)", event_id)
-
-    event_accepted.send_robust(ip=remote_addr, data=data, project=project, sender=process_event)
-
-    return event_id
-
-
-class APIView(BaseView):
-    auth_helper_cls = ClientAuthHelper
-
-    def _get_project_from_id(self, project_id):
-        if not project_id:
-            return
-        if not project_id.isdigit():
-            track_outcome(0, 0, None, Outcome.INVALID, "project_id")
-            raise APIError("Invalid project_id: %r" % project_id)
-        try:
-            project = Project.objects.get_from_cache(id=project_id)
-        except Project.DoesNotExist:
-            track_outcome(0, 0, None, Outcome.INVALID, "project_id")
-            raise APIError("Invalid project_id: %r" % project_id)
-        else:
-            if project.status != ObjectStatus.VISIBLE:
-                track_outcome(0, 0, None, Outcome.INVALID, "project_id")
-                raise APIError("Invalid project_id: %r" % project_id)
-            return project
-
-    def _parse_header(self, request, project_config):
-        auth = self.auth_helper_cls.auth_from_request(request)
-
-        if auth.version not in PROTOCOL_VERSIONS:
-            track_outcome(
-                project_config.organization_id,
-                project_config.project_id,
-                None,
-                Outcome.INVALID,
-                "auth_version",
-            )
-            raise APIError(
-                "Client using unsupported server protocol version (%r)"
-                % six.text_type(auth.version or "")
-            )
-
-        if not auth.client:
-            track_outcome(
-                project_config.organization_id,
-                project_config.project_id,
-                None,
-                Outcome.INVALID,
-                "auth_client",
-            )
-            raise APIError("Client did not send 'client' identifier")
-
-        return auth
-
-    def _publish_to_kafka(self, request, project_config):
-        """
-        Sends raw event data to Kafka for later offline processing.
-        """
-        try:
-            raw_event_sample_rate = options.get("kafka-publisher.raw-event-sample-rate")
-
-            # Early return if sampling is disabled
-            if raw_event_sample_rate == 0:
-                return
-
-            # This may fail when we e.g. send a multipart form. We ignore those errors for now.
-            data = request.body
-
-            if not data or len(data) > options.get("kafka-publisher.max-event-size"):
-                return
-
-            # Sampling
-            if random.random() >= raw_event_sample_rate:
-                return
-
-            # We want to send only serializable items from request.META
-            meta = {}
-            for key, value in request.META.items():
-                try:
-                    json.dumps([key, value])
-                    meta[key] = value
-                except (TypeError, ValueError):
-                    pass
-
-            meta["SENTRY_API_VIEW_NAME"] = self.__class__.__name__
-
-            kafka_publisher.publish(
-                channel=getattr(settings, "KAFKA_RAW_EVENTS_PUBLISHER_TOPIC", "raw-store-events"),
-                value=json.dumps([meta, base64.b64encode(data), project_config.to_dict()]),
-            )
-        except Exception as e:
-            logger.debug("Cannot publish event to Kafka: {}".format(six.text_type(e)))
-
-    @csrf_exempt
-    @never_cache
-    @allow_cors_options
-    def dispatch(self, request, project_id=None, *args, **kwargs):
-        helper = None
-        try:
-            helper = ClientApiHelper(
-                agent=request.META.get("HTTP_USER_AGENT"),
-                project_id=project_id,
-                ip_address=request.META["REMOTE_ADDR"],
-            )
-
-            # if the project id is not directly specified get it from the authentication information
-            project_id = _get_project_id_from_request(
-                project_id, request, self.auth_helper_cls, helper
-            )
-
-            project = self._get_project_from_id(six.text_type(project_id))
-
-            # Explicitly bind Organization so we don't implicitly query it later
-            # this just allows us to comfortably assure that `project.organization` is safe.
-            # This also allows us to pull the object from cache, instead of being
-            # implicitly fetched from database.
-            project.organization = Organization.objects.get_from_cache(id=project.organization_id)
-
-            # XXX: This never returns a disabled project since visibility of the
-            # project is already verified in `self._get_project_from_id`.
-            project_config = get_project_config(project)
-
-            helper.context.bind_project(project_config.project)
-
-            if kafka_publisher is not None:
-                self._publish_to_kafka(request, project_config)
-
-            origin = self.auth_helper_cls.origin_from_request(request)
-
-            response = self._dispatch(
-                request, helper, project_config, origin=origin, *args, **kwargs
-            )
-        except APIError as e:
-            context = {"error": force_bytes(e.msg, errors="replace")}
-            if e.name:
-                context["error_name"] = e.name
-
-            response = HttpResponse(
-                json.dumps(context), content_type="application/json", status=e.http_status
-            )
-            # Set X-Sentry-Error as in many cases it is easier to inspect the headers
-            response["X-Sentry-Error"] = context["error"]
-
-            if isinstance(e, APIRateLimited) and e.retry_after is not None:
-                response["Retry-After"] = six.text_type(int(math.ceil(e.retry_after)))
-
-        except Exception as e:
-            # TODO(dcramer): test failures are not outputting the log message
-            # here
-            if settings.DEBUG:
-                content = traceback.format_exc()
-            else:
-                content = ""
-            logger.exception(e)
-            response = HttpResponse(content, content_type="text/plain", status=500)
-
-        # TODO(dcramer): it'd be nice if we had an incr_multi method so
-        # tsdb could optimize this
-        metrics.incr("client-api.all-versions.requests", skip_internal=False)
-        metrics.incr(
-            "client-api.all-versions.responses.%s" % (response.status_code,), skip_internal=False
-        )
-        metrics.incr(
-            "client-api.all-versions.responses.%sxx" % (six.text_type(response.status_code)[0],),
-            skip_internal=False,
-        )
-
-        if helper is not None and helper.context is not None and helper.context.version:
-            metrics.incr("client-api.v%s.requests" % (helper.context.version,), skip_internal=False)
-            metrics.incr(
-                "client-api.v%s.responses.%s" % (helper.context.version, response.status_code),
-                skip_internal=False,
-            )
-            metrics.incr(
-                "client-api.v%s.responses.%sxx"
-                % (helper.context.version, six.text_type(response.status_code)[0]),
-                skip_internal=False,
-            )
-
-        return response
-
-    def _dispatch(self, request, helper, project_config, origin=None, *args, **kwargs):
-        request.user = AnonymousUser()
-
-        project = project_config.project
-        config = project_config.config
-        allowed = config.get("allowedDomains")
-
-        if origin is not None:
-            if not is_valid_origin(origin, allowed=allowed):
-                track_outcome(
-                    project_config.organization_id,
-                    project_config.project_id,
-                    None,
-                    Outcome.INVALID,
-                    FilterStatKeys.CORS,
-                )
-                raise APIForbidden("Invalid origin: %s" % (origin,))
-
-        auth = self._parse_header(request, project_config)
-
-        key = helper.project_key_from_auth(auth)
-
-        # Legacy API was /api/store/ and the project ID was only available elsewhere
-        if six.text_type(key.project_id) != six.text_type(project_config.project_id):
-            raise APIError("Two different projects were specified")
-
-        helper.context.bind_auth(auth)
-
-        response = super(APIView, self).dispatch(
-            request=request,
-            project=project,
-            auth=auth,
-            helper=helper,
-            key=key,
-            project_config=project_config,
-            **kwargs
-        )
-        return response
-
-    # XXX: backported from Django 1.5
-    def _allowed_methods(self):
-        return [m.upper() for m in self.http_method_names if hasattr(self, m)]
-
-    def options(self, request, *args, **kwargs):
-        """
-        Serves requests for OPTIONS
-
-        NOTE: This function is not called since it is shortcut by the @allow_cors_options descriptor.
-            It is nevertheless used to construct the allowed http methods and it should not be removed.
-        """
-        raise NotImplementedError(
-            "Options request should have been handled by @allow_cors_options.\n"
-            "If dispatch was overridden either decorate it with @allow_cors_options or provide "
-            "a valid implementation for options."
-        )
-
-
-class StoreView(APIView):
-    """
-    The primary endpoint for storing new events.
-
-    This will validate the client's authentication and data, and if
-    successful pass on the payload to the internal database handler.
-
-    Authentication works in three flavors:
-
-    1. Explicit signed requests
-
-       These are implemented using the documented signed request protocol, and
-       require an authentication header which is signed using with the project
-       member's secret key.
-
-    2. CORS Secured Requests
-
-       Generally used for communications with client-side platforms (such as
-       JavaScript in the browser), they require a standard header, excluding
-       the signature and timestamp requirements, and must be listed in the
-       origins for the given project (or the global origins).
-
-    3. Implicit trusted requests
-
-       Used by the Sentry core, they are only available from same-domain requests
-       and do not require any authentication information. They only require that
-       the user be authenticated, and a project_id be sent in the GET variables.
-
-    """
-
-    type_name = "store"
-
-    def post(self, request, **kwargs):
-        try:
-            data = request.body
-        except Exception as e:
-            logger.exception(e)
-            # We were unable to read the body.
-            # This would happen if a request were submitted
-            # as a multipart form for example, where reading
-            # body yields an Exception. There's also not a more
-            # sane exception to catch here. This will ultimately
-            # bubble up as an APIError.
-            data = None
-
-        event_id = self.process(request, data=data, **kwargs)
-        return HttpResponse(json.dumps({"id": event_id}), content_type="application/json")
-
-    def get(self, request, **kwargs):
-        data = request.GET.get("sentry_data", "")
-        event_id = self.process(request, data=data, **kwargs)
-
-        # Return a simple 1x1 gif for browser so they don't throw a warning
-        response = HttpResponse(PIXEL, "image/gif")
-        response["X-Sentry-ID"] = event_id
-        return response
-
-    def pre_normalize(self, data, helper):
-        """Mutate the given EventManager. Hook for subtypes of StoreView (CSP)"""
-        pass
-
-    def process(
-        self, request, project, key, auth, helper, data, project_config, attachments=None, **kwargs
-    ):
-        disable_transaction_events()
-        metrics.incr("events.total", skip_internal=False)
-
-        project_id = project_config.project_id
-        organization_id = project_config.organization_id
-
-        if not data:
-            track_outcome(organization_id, project_id, key.id, Outcome.INVALID, "no_data")
-            raise APIError("No JSON data was found")
-
-        remote_addr = request.META["REMOTE_ADDR"]
-
-        event_manager = EventManager(
-            data,
-            project=project,
-            key=key,
-            auth=auth,
-            client_ip=remote_addr,
-            user_agent=helper.context.agent,
-            version=auth.version,
-            content_encoding=request.META.get("HTTP_CONTENT_ENCODING", ""),
-            project_config=project_config,
-        )
-        del data
-
-        self.pre_normalize(event_manager, helper)
-
-        try:
-            event_manager.normalize()
-        except ProcessingErrorInvalidTransaction as e:
-            track_outcome(
-                organization_id,
-                project_id,
-                key.id,
-                Outcome.INVALID,
-                "invalid_transaction",
-                category=DataCategory.TRANSACTION,
-            )
-            raise APIError(six.text_type(e).split("\n", 1)[0])
-
-        data = event_manager.get_data()
-        dict_data = dict(data)
-        data_size = len(json.dumps(dict_data))
-
-        if data_size > 10000000:
-            metrics.timing("events.size.rejected", data_size)
-            track_outcome(
-                organization_id,
-                project_id,
-                key.id,
-                Outcome.INVALID,
-                "too_large",
-                event_id=dict_data.get("event_id"),
-                category=DataCategory.from_event_type(dict_data.get("type")),
-            )
-            raise APIForbidden("Event size exceeded 10MB after normalization.")
-
-        metrics.timing("events.size.data.post_storeendpoint", data_size)
-
-        return process_event(
-            event_manager, project, key, remote_addr, helper, attachments, project_config
-        )
-
-
-class EventAttachmentStoreView(StoreView):
-    def post(self, request, project, event_id, project_config, **kwargs):
-        if not features.has(
-            "organizations:event-attachments", project.organization, actor=request.user
-        ):
-            raise APIForbidden("Event attachments are not enabled for this organization.")
-
-        project_id = project_config.project_id
-
-        if len(request.FILES) == 0:
-            return HttpResponse(status=400)
-
-        for name, uploaded_file in six.iteritems(request.FILES):
-            file = File.objects.create(
-                name=uploaded_file.name,
-                type="event.attachment",
-                headers={"Content-Type": uploaded_file.content_type},
-            )
-            file.putfile(uploaded_file)
-
-            EventAttachment.objects.create(
-                project_id=project_id, event_id=event_id, name=uploaded_file.name, file=file
-            )
-
-        return HttpResponse(status=201)
-
-
-class MinidumpView(StoreView):
-    auth_helper_cls = MinidumpAuthHelper
-    dump_types = ("application/octet-stream", "application/x-dmp")
-    content_types = ("multipart/form-data",) + dump_types
-
-    def _dispatch(
-        self, request, helper, project_config, origin=None, config_flags=None, *args, **kwargs
-    ):
-
-        # TODO(ja): Refactor shared code with CspReportView. Especially, look at
-        # the sentry_key override and test it.
-
-        # A minidump submission as implemented by Breakpad and Crashpad or any
-        # other library following the Mozilla Soccorro protocol is a POST request
-        # without Origin or Referer headers. Therefore, we cannot validate the
-        # origin of the request, but we *can* validate the "prod" key in future.
-        if request.method != "POST":
-            track_outcome(0, 0, None, Outcome.INVALID, "disallowed_method")
-            return HttpResponseNotAllowed(["POST"])
-
-        content_type = request.META.get("CONTENT_TYPE")
-        # In case of multipart/form-data, the Content-Type header also includes
-        # a boundary. Therefore, we cannot check for an exact match.
-        if content_type is None or not content_type.startswith(self.content_types):
-            track_outcome(0, 0, None, Outcome.INVALID, "content_type")
-            raise APIError("Invalid Content-Type")
-
-        request.user = AnonymousUser()
-
-        project_id = project_config.project_id
-        project = project_config.project
-
-        # This is yanking the auth from the querystring since it's not
-        # in the POST body. This means we expect a `sentry_key` and
-        # `sentry_version` to be set in querystring
-        auth = self.auth_helper_cls.auth_from_request(request)
-
-        key = helper.project_key_from_auth(auth)
-        if key.project_id != project_id:
-            track_outcome(
-                project_config.organization_id,
-                project_id,
-                None,
-                Outcome.INVALID,
-                "multi_project_id",
-            )
-            raise APIError("Two different projects were specified")
-
-        helper.context.bind_auth(auth)
-
-        return super(APIView, self).dispatch(
-            request=request,
-            project=project,
-            auth=auth,
-            helper=helper,
-            key=key,
-            project_config=project_config,
-            **kwargs
-        )
-
-    def post(self, request, project, project_config, **kwargs):
-        # Minidump request payloads do not have the same structure as usual
-        # events from other SDKs. The minidump can either be transmitted as
-        # request body, or as `upload_file_minidump` in a multipart formdata
-        # request. Optionally, an event payload can be sent in the `sentry` form
-        # field, either as JSON or as nested form data.
-
-        request_files = request.FILES or {}
-        content_type = request.META.get("CONTENT_TYPE")
-
-        # Track these submissions statically as ERROR. Relay infers properly.
-        data_category = DataCategory.ERROR
-
-        if content_type in self.dump_types:
-            minidump = io.BytesIO(request.body)
-            minidump_name = "Minidump"
-            data = {}
-        else:
-            minidump = request_files.get("upload_file_minidump")
-            minidump_name = minidump and minidump.name or None
-
-            if any(key.startswith("sentry[") for key in request.POST):
-                # First, try to parse the nested form syntax `sentry[key][key]`
-                # This is required for the Breakpad client library, which only
-                # supports string values of up to 64 characters.
-                extra = parser.parse(request.POST.urlencode())
-                data = extra.pop("sentry", {})
-            else:
-                # Custom clients can submit longer payloads and should JSON
-                # encode event data into the optional `sentry` field.
-                extra = request.POST.dict()
-                json_data = extra.pop("sentry", None)
-                try:
-                    data = json.loads(json_data) if json_data else {}
-                except ValueError:
-                    data = {}
-
-            if not isinstance(data, dict):
-                data = {}
-
-            # Merge additional form fields from the request with `extra` data
-            # from the event payload and set defaults for processing. This is
-            # sent by clients like Breakpad or Crashpad.
-            extra.update(data.get("extra") or ())
-            data["extra"] = extra
-
-        if not minidump:
-            track_outcome(
-                project_config.organization_id,
-                project_config.project_id,
-                None,
-                Outcome.INVALID,
-                "missing_minidump_upload",
-                category=data_category,
-            )
-            raise APIError("Missing minidump upload")
-
-        # Breakpad on linux sometimes stores the entire HTTP request body as
-        # dump file instead of just the minidump. The Electron SDK then for
-        # example uploads a multipart formdata body inside the minidump file.
-        # It needs to be re-parsed, to extract the actual minidump before
-        # continuing.
-        minidump.seek(0)
-        if minidump.read(2) == b"--":
-            # The remaining bytes of the first line are the form boundary. We
-            # have already read two bytes, the remainder is the form boundary
-            # (excluding the initial '--').
-            boundary = minidump.readline().rstrip()
-            minidump.seek(0)
-
-            # Next, we have to fake a HTTP request by specifying the form
-            # boundary and the content length, or otherwise Django will not try
-            # to parse our form body. Also, we need to supply new upload
-            # handlers since they cannot be reused from the current request.
-            meta = {
-                "CONTENT_TYPE": b"multipart/form-data; boundary=%s" % boundary,
-                "CONTENT_LENGTH": minidump.size,
-            }
-            handlers = [
-                uploadhandler.load_handler(handler, request)
-                for handler in settings.FILE_UPLOAD_HANDLERS
-            ]
-
-            _, inner_files = MultiPartParser(meta, minidump, handlers).parse()
-            try:
-                minidump = inner_files["upload_file_minidump"]
-                minidump_name = minidump.name
-            except KeyError:
-                track_outcome(
-                    project_config.organization_id,
-                    project_config.project_id,
-                    None,
-                    Outcome.INVALID,
-                    "missing_minidump_upload",
-                    category=data_category,
-                )
-                raise APIError("Missing minidump upload")
-
-        minidump.seek(0)
-        if minidump.read(4) != "MDMP":
-            track_outcome(
-                project_config.organization_id,
-                project_config.project_id,
-                None,
-                Outcome.INVALID,
-                "invalid_minidump",
-                category=data_category,
-            )
-            raise APIError("Uploaded file was not a minidump")
-
-        # Always store the minidump in attachments so we can access it during
-        # processing, regardless of the event-attachments feature. This is
-        # required to process the minidump with debug information.
-        attachments = []
-
-        # The minidump attachment is special. It has its own attachment type to
-        # distinguish it from regular attachments for processing. Also, it might
-        # not be part of `request_files` if it has been uploaded as raw request
-        # body instead of a multipart formdata request.
-        minidump.seek(0)
-        attachments.append(
-            CachedAttachment(
-                name=minidump_name,
-                content_type="application/octet-stream",
-                data=minidump.read(),
-                type=MINIDUMP_ATTACHMENT_TYPE,
-            )
-        )
-
-        # Append all other files as generic attachments.
-        # RaduW 4 Jun 2019 always sent attachments for minidump (does not use
-        # event-attachments feature)
-        for name, file in six.iteritems(request_files):
-            if name == "upload_file_minidump":
-                continue
-
-            # Known attachment: msgpack event
-            if name == "__sentry-event":
-                merge_attached_event(file, data)
-                continue
-            if name in ("__sentry-breadcrumb1", "__sentry-breadcrumb2"):
-                merge_attached_breadcrumbs(file, data)
-                continue
-
-            # Add any other file as attachment
-            attachments.append(CachedAttachment.from_upload(file))
-
-        # Assign our own UUID so we can track this minidump. We cannot trust
-        # the uploaded filename, and if reading the minidump fails there is
-        # no way we can ever retrieve the original UUID from the minidump.
-        event_id = data.get("event_id") or uuid.uuid4().hex
-        data["event_id"] = event_id
-
-        # Write a minimal event payload that is required to kick off native
-        # event processing. It is also used as fallback if processing of the
-        # minidump fails.
-        # NB: This occurs after merging attachments to overwrite potentially
-        # contradicting payloads transmitted in __sentry_event.
-        write_minidump_placeholder(data)
-
-        event_id = self.process(
-            request,
-            attachments=attachments,
-            data=data,
-            project=project,
-            project_config=project_config,
-            **kwargs
-        )
-
-        # Return the formatted UUID of the generated event. This is
-        # expected by the Electron http uploader on Linux and doesn't
-        # break the default Breakpad client library.
-        return HttpResponse(six.text_type(uuid.UUID(event_id)), content_type="text/plain")
-
-
-# Endpoint used by the Unreal Engine 4 (UE4) Crash Reporter.
-class UnrealView(StoreView):
-    content_types = ("application/octet-stream",)
-    required_attachments = ("minidump", "applecrashreport")
-
-    def _dispatch(
-        self,
-        request,
-        helper,
-        project_config,
-        sentry_key,
-        origin=None,
-        config_flags=None,
-        *args,
-        **kwargs
-    ):
-        if request.method != "POST":
-            track_outcome(0, 0, None, Outcome.INVALID, "disallowed_method")
-            return HttpResponseNotAllowed(["POST"])
-
-        content_type = request.META.get("CONTENT_TYPE")
-        if content_type is None or not content_type.startswith(self.content_types):
-            track_outcome(0, 0, None, Outcome.INVALID, "content_type")
-            raise APIError("Invalid Content-Type")
-
-        request.user = AnonymousUser()
-
-        project = project_config.project
-        project_id = project_config.project_id
-
-        auth = Auth(public_key=sentry_key, is_public=False)
-        auth.client = "sentry.unreal_engine"
-
-        key = helper.project_key_from_auth(auth)
-        if key.project_id != project_id:
-            track_outcome(
-                project_config.organization_id,
-                project_id,
-                None,
-                Outcome.INVALID,
-                "multi_project_id",
-            )
-            raise APIError("Two different projects were specified")
-
-        helper.context.bind_auth(auth)
-        return super(APIView, self).dispatch(
-            request=request,
-            project=project,
-            auth=auth,
-            helper=helper,
-            key=key,
-            project_config=project_config,
-            **kwargs
-        )
-
-    def post(self, request, project, project_config, **kwargs):
-        # Track these submissions statically as ERROR. Relay infers properly.
-        data_category = DataCategory.ERROR
-
-        attachments_enabled = features.has(
-            "organizations:event-attachments", project.organization, actor=request.user
-        )
-
-        attachments = []
-        event = {"event_id": uuid.uuid4().hex, "environment": request.GET.get("AppEnvironment")}
-
-        user_id = request.GET.get("UserID")
-        if user_id:
-            merge_unreal_user(event, user_id)
-
-        try:
-            unreal = Unreal4Crash.from_bytes(request.body)
-        except (ProcessMinidumpError, Unreal4Error) as e:
-            minidumps_logger.exception(e)
-            track_outcome(
-                project_config.organization_id,
-                project_config.project_id,
-                None,
-                Outcome.INVALID,
-                "process_unreal",
-                category=data_category,
-            )
-            raise APIError(six.text_type(e).split("\n", 1)[0])
-
-        try:
-            unreal_context = unreal.get_context()
-        except Unreal4Error as e:
-            # we'll continue without the context data
-            unreal_context = None
-            minidumps_logger.exception(e)
-        else:
-            if unreal_context is not None:
-                merge_unreal_context_event(unreal_context, event, project)
-
-        try:
-            unreal_logs = unreal.get_logs()
-        except Unreal4Error as e:
-            # we'll continue without the breadcrumbs
-            minidumps_logger.exception(e)
-        else:
-            if unreal_logs is not None:
-                merge_unreal_logs_event(unreal_logs, event)
-
-        is_minidump = False
-        is_applecrashreport = False
-
-        for file in unreal.files():
-            # Known attachment: msgpack event
-            if file.name == "__sentry-event":
-                merge_attached_event(file.open_stream(), event)
-                continue
-            if file.name in ("__sentry-breadcrumb1", "__sentry-breadcrumb2"):
-                merge_attached_breadcrumbs(file.open_stream(), event)
-                continue
-
-            if file.type == "minidump":
-                is_minidump = True
-            if file.type == "applecrashreport":
-                is_applecrashreport = True
-
-            # Always store attachments that can be processed, regardless of the
-            # event-attachments feature.
-            if file.type in self.required_attachments or attachments_enabled:
-                attachments.append(
-                    CachedAttachment(
-                        name=file.name,
-                        data=file.open_stream().read(),
-                        type=unreal_attachment_type(file),
-                    )
-                )
-
-        if is_minidump:
-            write_minidump_placeholder(event)
-        elif is_applecrashreport:
-            write_applecrashreport_placeholder(event)
-
-        event_id = self.process(
-            request,
-            attachments=attachments,
-            data=event,
-            project=project,
-            project_config=project_config,
-            **kwargs
-        )
-
-        # The return here is only useful for consistency
-        # because the UE4 crash reporter doesn't care about it.
-        return HttpResponse(six.text_type(uuid.UUID(event_id)), content_type="text/plain")
-
-
-class StoreSchemaView(BaseView):
-    def get(self, request, **kwargs):
-        return HttpResponse(json.dumps(schemas.EVENT_SCHEMA), content_type="application/json")
 
 
 class ClientConfigView(BaseView):
@@ -1068,142 +16,6 @@ class ClientConfigView(BaseView):
         return HttpResponse(json.dumps(get_client_config(request)), content_type="application/json")
 
 
-class SecurityReportView(StoreView):
-    auth_helper_cls = SecurityAuthHelper
-    content_types = (
-        "application/csp-report",
-        "application/json",
-        "application/expect-ct-report",
-        "application/expect-ct-report+json",
-        "application/expect-staple-report",
-    )
-
-    def _dispatch(
-        self, request, helper, project_config, origin=None, config_flags=None, *args, **kwargs
-    ):
-        # A CSP report is sent as a POST request with no Origin or Referer
-        # header. What we're left with is a 'document-uri' key which is
-        # inside of the JSON body of the request. This 'document-uri' value
-        # should be treated as an origin check since it refers to the page
-        # that triggered the report. The Content-Type is supposed to be
-        # `application/csp-report`, but FireFox sends it as `application/json`.
-        if request.method != "POST":
-            track_outcome(0, 0, None, Outcome.INVALID, "disallowed_method")
-            return HttpResponseNotAllowed(["POST"])
-
-        if request.META.get("CONTENT_TYPE") not in self.content_types:
-            track_outcome(0, 0, None, Outcome.INVALID, "content_type")
-            raise APIError("Invalid Content-Type")
-
-        request.user = AnonymousUser()
-
-        project = project_config.project
-        project_id = project_config.project_id
-
-        # This is yanking the auth from the querystring since it's not
-        # in the POST body. This means we expect a `sentry_key` and
-        # `sentry_version` to be set in querystring
-        auth = self.auth_helper_cls.auth_from_request(request)
-
-        key = helper.project_key_from_auth(auth)
-        if key.project_id != project_id:
-            track_outcome(
-                project.organization_id, project.id, None, Outcome.INVALID, "multi_project_id"
-            )
-            raise APIError("Two different projects were specified")
-
-        helper.context.bind_auth(auth)
-
-        return super(APIView, self).dispatch(
-            request=request,
-            project=project,
-            auth=auth,
-            helper=helper,
-            key=key,
-            project_config=project_config,
-            **kwargs
-        )
-
-    def post(self, request, project, helper, key, project_config, **kwargs):
-        # This endpoint only accepts security reports.
-        data_category = DataCategory.SECURITY
-
-        json_body = safely_load_json_string(request.body)
-        report_type = self.security_report_type(json_body)
-        if report_type is None:
-            track_outcome(
-                project_config.organization_id,
-                project_config.project_id,
-                key.id,
-                Outcome.INVALID,
-                "security_report_type",
-                category=data_category,
-            )
-            raise APIError("Unrecognized security report type")
-        interface = get_interface(report_type)
-
-        try:
-            instance = interface.from_raw(json_body)
-        except jsonschema.ValidationError as e:
-            track_outcome(
-                project_config.organization_id,
-                project_config.project_id,
-                key.id,
-                Outcome.INVALID,
-                "security_report",
-                category=data_category,
-            )
-            raise APIError("Invalid security report: %s" % str(e).splitlines()[0])
-
-        # Do origin check based on the `document-uri` key as explained in `_dispatch`.
-        origin = instance.get_origin()
-        if not is_valid_origin(origin, project):
-            track_outcome(
-                project_config.organization_id,
-                project_config.project_id,
-                key.id,
-                Outcome.INVALID,
-                FilterStatKeys.CORS,
-                category=data_category,
-            )
-            raise APIForbidden("Invalid origin")
-
-        data = {
-            "interface": interface.path,
-            "report": instance,
-            "release": request.GET.get("sentry_release"),
-            "environment": request.GET.get("sentry_environment"),
-        }
-
-        self.process(
-            request,
-            project=project,
-            helper=helper,
-            data=data,
-            key=key,
-            project_config=project_config,
-            **kwargs
-        )
-
-        return HttpResponse(content_type="application/javascript", status=201)
-
-    def security_report_type(self, body):
-        report_type_for_key = {
-            "csp-report": "csp",
-            "expect-ct-report": "expectct",
-            "expect-staple-report": "expectstaple",
-            "known-pins": "hpkp",
-        }
-        if isinstance(body, dict):
-            for k in report_type_for_key:
-                if k in body:
-                    return report_type_for_key[k]
-        return None
-
-    def pre_normalize(self, data, helper):
-        data.process_csp_report()
-
-
 @cache_control(max_age=3600, public=True)
 def robots_txt(request):
     return HttpResponse("User-agent: *\nDisallow: /\n", content_type="text/plain")
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index d351ce764c..68a07ad87b 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -71,40 +71,11 @@ if settings.DEBUG:
     ]
 
 urlpatterns += [
-    # Store endpoints first since they are the most active
-    url(r"^api/store/$", api.StoreView.as_view(), name="sentry-api-store"),
-    url(r"^api/(?P<project_id>[\w_-]+)/store/$", api.StoreView.as_view(), name="sentry-api-store"),
-    url(
-        r"^api/(?P<project_id>[\w_-]+)/minidump/?$",
-        api.MinidumpView.as_view(),
-        name="sentry-api-minidump",
-    ),
-    url(
-        r"^api/(?P<project_id>[\w_-]+)/events/(?P<event_id>[\w-]+)/attachments/$",
-        api.EventAttachmentStoreView.as_view(),
-        name="sentry-api-event-attachment",
-    ),
-    url(
-        r"^api/(?P<project_id>[\w_-]+)/unreal/(?P<sentry_key>\w+)/$",
-        api.UnrealView.as_view(),
-        name="sentry-api-unreal",
-    ),
-    url(
-        r"^api/(?P<project_id>\d+)/security/$",
-        api.SecurityReportView.as_view(),
-        name="sentry-api-security-report",
-    ),
-    url(  # This URL to be deprecated
-        r"^api/(?P<project_id>\d+)/csp-report/$",
-        api.SecurityReportView.as_view(),
-        name="sentry-api-csp-report",
-    ),
     url(
         r"^api/(?P<project_id>[\w_-]+)/crossdomain\.xml$",
         api.crossdomain_xml,
         name="sentry-api-crossdomain-xml",
     ),
-    url(r"^api/store/schema$", api.StoreSchemaView.as_view(), name="sentry-api-store-schema"),
     # Frontend client config
     url(r"^api/client-config/?$", api.ClientConfigView.as_view(), name="sentry-api-client-config"),
     # The static version is either a 10 digit timestamp, a sha1, or md5 hash
diff --git a/tests/integration/fixtures/csp/chrome_blocked_asset_input.json b/tests/integration/fixtures/csp/chrome_blocked_asset_input.json
deleted file mode 100644
index f394476069..0000000000
--- a/tests/integration/fixtures/csp/chrome_blocked_asset_input.json
+++ /dev/null
@@ -1,11 +0,0 @@
-{
-    "csp-report": {
-        "document-uri": "http://notlocalhost:8000/",
-        "referrer": "",
-        "violated-directive": "style-src cdn.example.com",
-        "effective-directive": "style-src",
-        "original-policy": "default-src 'none'; style-src cdn.example.com; report-uri http://requestb.in/1im8m061",
-        "blocked-uri": "http://notlocalhost:8000/lol.css",
-        "status-code": 200
-    }
-}
diff --git a/tests/integration/fixtures/csp/chrome_blocked_asset_output.json b/tests/integration/fixtures/csp/chrome_blocked_asset_output.json
deleted file mode 100644
index b4c88c9deb..0000000000
--- a/tests/integration/fixtures/csp/chrome_blocked_asset_output.json
+++ /dev/null
@@ -1,24 +0,0 @@
-{
-  "message": "Blocked 'style' from 'notlocalhost:8000'",
-  "tags": {
-    "logger": "csp",
-    "effective-directive": "style-src",
-    "blocked-uri": "http://notlocalhost:8000/lol.css"
-  },
-  "data": {
-    "sentry.interfaces.User": {"ip_address": "127.0.0.1"},
-    "sentry.interfaces.Csp": {
-      "blocked_uri": "http://notlocalhost:8000/lol.css",
-      "status_code": 200,
-      "violated_directive": "style-src cdn.example.com",
-      "document_uri": "http://notlocalhost:8000/",
-      "original_policy": "default-src 'none'; style-src cdn.example.com; report-uri http://requestb.in/1im8m061",
-      "effective_directive": "style-src",
-      "referrer": ""
-    },
-    "sentry.interfaces.Http": {
-      "url": "http://notlocalhost:8000/",
-      "headers": [["User-Agent", "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36"]]
-    }
-  }
-}
diff --git a/tests/integration/fixtures/csp/firefox_blocked_asset_input.json b/tests/integration/fixtures/csp/firefox_blocked_asset_input.json
deleted file mode 100644
index b3bb9c19e0..0000000000
--- a/tests/integration/fixtures/csp/firefox_blocked_asset_input.json
+++ /dev/null
@@ -1,9 +0,0 @@
-{
-    "csp-report": {
-        "blocked-uri": "http://notlocalhost:8000/lol.css",
-        "document-uri": "http://notlocalhost:8000/",
-        "original-policy": "default-src 'none'; style-src http://cdn.example.com; report-uri http://requestb.in/1im8m061",
-        "referrer": "",
-        "violated-directive": "style-src http://cdn.example.com"
-    }
-}
diff --git a/tests/integration/fixtures/csp/firefox_blocked_asset_output.json b/tests/integration/fixtures/csp/firefox_blocked_asset_output.json
deleted file mode 100644
index 2c3f1dec52..0000000000
--- a/tests/integration/fixtures/csp/firefox_blocked_asset_output.json
+++ /dev/null
@@ -1,23 +0,0 @@
-{
-  "message": "Blocked 'style' from 'notlocalhost:8000'",
-  "tags": {
-    "logger": "csp",
-    "effective-directive": "style-src",
-    "blocked-uri": "http://notlocalhost:8000/lol.css"
-  },
-  "data": {
-    "sentry.interfaces.User": {"ip_address": "127.0.0.1"},
-    "sentry.interfaces.Csp": {
-      "blocked_uri": "http://notlocalhost:8000/lol.css",
-      "violated_directive": "style-src http://cdn.example.com",
-      "document_uri": "http://notlocalhost:8000/",
-      "original_policy": "default-src 'none'; style-src http://cdn.example.com; report-uri http://requestb.in/1im8m061",
-      "effective_directive": "style-src",
-      "referrer": ""
-    },
-    "sentry.interfaces.Http": {
-      "url": "http://notlocalhost:8000/",
-      "headers": [["User-Agent", "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36"]]
-    }
-  }
-}
diff --git a/tests/integration/test_message_filters.py b/tests/integration/test_message_filters.py
deleted file mode 100644
index 1776692f2f..0000000000
--- a/tests/integration/test_message_filters.py
+++ /dev/null
@@ -1,137 +0,0 @@
-from __future__ import absolute_import
-
-import pytest
-
-from sentry.models.projectoption import ProjectOption
-from sentry.testutils import TestCase
-from sentry.utils.safe import set_path
-from sentry.message_filters import (
-    _localhost_filter,
-    _browser_extensions_filter,
-    _web_crawlers_filter,
-    _legacy_browsers_filter,
-)
-
-
-@pytest.mark.obsolete(
-    "Unit tests in Relay, in the filters implementation files.", "relay-filter/..."
-)
-class FilterTests(TestCase):
-    def _get_message(self):
-        return {}
-
-    def _set_filter_state(self, flt, state):
-        ProjectOption.objects.set_value(
-            project=self.project, key=u"filters:{}".format(flt.spec.id), value=state
-        )
-
-    def _get_message_with_bad_ip(self):
-        message = self._get_message()
-        set_path(message, "user", "ip_address", value="127.0.0.1")
-        return message
-
-    def test_should_not_filter_simple_messages(self):
-        # baseline test (so we know everything works as expected)
-        message = self._get_message()
-        resp = self._postWithHeader(message)
-        assert resp.status_code < 400  # no http error
-
-    def test_should_filter_local_ip_addresses_when_enabled(self):
-        self._set_filter_state(_localhost_filter, "1")
-        message = self._get_message_with_bad_ip()
-        resp = self._postWithHeader(message)
-        assert resp.status_code >= 400  # some http error
-
-    def test_should_not_filter_bad_ip_addresses_when_disabled(self):
-        self._set_filter_state(_localhost_filter, "0")
-        message = self._get_message_with_bad_ip()
-        resp = self._postWithHeader(message)
-        assert resp.status_code < 400  # no http error
-
-    def _get_message_with_bad_extension(self):
-        message = self._get_message()
-        set_path(message, "platform", value="javascript")
-        set_path(
-            message,
-            "exception",
-            value={"values": [{"type": "Error", "value": "http://loading.retry.widdit.com/"}]},
-        )
-        return message
-
-    def test_should_filter_browser_extensions_when_enabled(self):
-        self._set_filter_state(_browser_extensions_filter, "1")
-        message = self._get_message_with_bad_extension()
-        resp = self._postWithHeader(message)
-        assert resp.status_code >= 400  # some http error
-
-    def test_should_not_filter_browser_extensions_when_disabled(self):
-        self._set_filter_state(_browser_extensions_filter, "0")
-        message = self._get_message_with_bad_extension()
-        resp = self._postWithHeader(message)
-        assert resp.status_code < 400  # no http error
-
-    def _get_message_from_webcrawler(self):
-        message = self._get_message()
-        set_path(
-            message,
-            "request",
-            value={
-                "url": "http://example.com",
-                "method": "GET",
-                "headers": [["User-Agent", "Mediapartners-Google"]],
-            },
-        )
-        return message
-
-    def test_should_filter_web_crawlers_when_enabled(self):
-        self._set_filter_state(_web_crawlers_filter, "1")
-        message = self._get_message_from_webcrawler()
-        resp = self._postWithHeader(message)
-        assert resp.status_code >= 400  # some http error
-
-    def test_should_not_filter_web_crawlers_when_disabled(self):
-        self._set_filter_state(_web_crawlers_filter, "0")
-        message = self._get_message_from_webcrawler()
-        resp = self._postWithHeader(message)
-        assert resp.status_code < 400  # no http error
-
-    def _get_message_from_legacy_browser(self):
-        ie_5_user_agent = (
-            "Mozilla/4.0 (compatible; MSIE 5.50; Windows NT; SiteKiosk 4.9; SiteCoach 1.0)"
-        )
-        message = self._get_message()
-        set_path(message, "platform", value="javascript")
-        set_path(
-            message,
-            "request",
-            value={
-                "url": "http://example.com",
-                "method": "GET",
-                "headers": [["User-Agent", ie_5_user_agent]],
-            },
-        )
-        return message
-
-    def test_should_filter_legacy_browsers_all_enabled(self):
-        self._set_filter_state(_legacy_browsers_filter, "1")
-        message = self._get_message_from_legacy_browser()
-        resp = self._postWithHeader(message)
-        assert resp.status_code >= 400  # some http error
-
-    def test_should_filter_legacy_browsers_specific_browsers(self):
-        self._set_filter_state(_legacy_browsers_filter, {"ie_pre_9", "safari_5"})
-        message = self._get_message_from_legacy_browser()
-        resp = self._postWithHeader(message)
-        assert resp.status_code >= 400  # some http error
-
-    def test_should_not_filter_legacy_browsers_when_disabled(self):
-        self._set_filter_state(_legacy_browsers_filter, "0")
-        message = self._get_message_from_legacy_browser()
-        resp = self._postWithHeader(message)
-        assert resp.status_code < 400  # no http error
-
-    def test_should_not_filter_legacy_browsers_when_current_browser_check_disabled(self):
-        self._set_filter_state(_legacy_browsers_filter, {"safari_5"})
-        message = self._get_message_from_legacy_browser()
-        resp = self._postWithHeader(message)
-        assert resp.status_code < 400  # no http error
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index 540529e155..39ba1d7f47 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -2,37 +2,11 @@
 
 from __future__ import absolute_import, print_function
 
-import os
-import datetime
-import json
-import logging
-import six
-from time import sleep
-import zlib
-import pytest
-
 from sentry.utils.compat import mock
-from sentry import eventstore, tagstore
 from django.conf import settings
-from django.core.urlresolvers import reverse
-from django.test.utils import override_settings
-from django.utils import timezone
-from exam import fixture
-from gzip import GzipFile
-from sentry_sdk import Hub, Client
-from sentry_sdk.integrations.celery import CeleryIntegration
-from sentry_sdk.integrations.django import DjangoIntegration
-from six import StringIO
-from werkzeug.test import Client as WerkzeugClient
 
-from sentry.models import Group
-from sentry.testutils import SnubaTestCase, TestCase, TransactionTestCase
-from sentry.testutils.helpers import get_auth_header
-from sentry.testutils.helpers.datetime import iso_format, before_now
+from sentry.testutils import TestCase
 from sentry.utils.settings import validate_settings, ConfigurationError, import_string
-from sentry.utils.sdk import configure_scope
-from sentry.web.api import disable_transaction_events
-from sentry.wsgi import application
 
 DEPENDENCY_TEST_DATA = {
     "postgresql": (
@@ -78,457 +52,6 @@ DEPENDENCY_TEST_DATA = {
 }
 
 
-def get_fixture_path(name):
-    return os.path.join(os.path.dirname(__file__), "fixtures", name)
-
-
-def load_fixture(name):
-    with open(get_fixture_path(name)) as fp:
-        return fp.read()
-
-
-@pytest.mark.obsolete("Remove, behaviour changed, new behaviour tested in Relay")
-class RavenIntegrationTest(TransactionTestCase):
-    """
-    This mocks the test server and specifically tests behavior that would
-    happen between Raven <--> Sentry over HTTP communication.
-    """
-
-    def setUp(self):
-        self.user = self.create_user("coreapi@example.com")
-        self.project = self.create_project()
-        self.pk = self.project.key_set.get_or_create()[0]
-
-        self.configure_sentry_errors()
-
-    def configure_sentry_errors(self):
-        # delay raising of assertion errors to make sure they do not get
-        # swallowed again
-        failures = []
-
-        class AssertHandler(logging.Handler):
-            def emit(self, entry):
-                failures.append(entry)
-
-        assert_handler = AssertHandler()
-
-        for name in "sentry.errors", "sentry_sdk.errors":
-            sentry_errors = logging.getLogger(name)
-            sentry_errors.addHandler(assert_handler)
-            sentry_errors.setLevel(logging.DEBUG)
-
-            @self.addCleanup
-            def remove_handler(sentry_errors=sentry_errors):
-                sentry_errors.handlers.pop(sentry_errors.handlers.index(assert_handler))
-
-        @self.addCleanup
-        def reraise_failures():
-            for entry in failures:
-                raise AssertionError(entry.message)
-
-    def send_event(self, method, url, body, headers):
-        from sentry.app import buffer
-
-        with self.tasks():
-            content_type = headers.pop("Content-Type", None)
-            headers = {"HTTP_" + k.replace("-", "_").upper(): v for k, v in six.iteritems(headers)}
-            resp = self.client.post(
-                reverse("sentry-api-store", args=[self.pk.project_id]),
-                data=body,
-                content_type=content_type,
-                **headers
-            )
-            assert resp.status_code == 200
-
-            buffer.process_pending()
-
-    @mock.patch("urllib3.PoolManager.request")
-    def test_basic(self, request):
-        requests = []
-
-        def queue_event(method, url, body, headers):
-            requests.append((method, url, body, headers))
-
-        request.side_effect = queue_event
-
-        hub = Hub(
-            Client(
-                "http://%s:%s@localhost:8000/%s"
-                % (self.pk.public_key, self.pk.secret_key, self.pk.project_id),
-                default_integrations=False,
-            )
-        )
-
-        hub.capture_message("foo")
-        hub.client.close()
-
-        for _request in requests:
-            self.send_event(*_request)
-
-        assert request.call_count == 1
-        assert Group.objects.count() == 1
-        group = Group.objects.get()
-        assert group.data["title"] == "foo"
-
-
-class SentryRemoteTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse("sentry-api-store")
-
-    def get_event(self, event_id):
-        instance = eventstore.get_event_by_id(self.project.id, event_id)
-        return instance
-
-    def test_minimal(self):
-        event_data = {
-            "message": "hello",
-            "tags": {"foo": "bar"},
-            "timestamp": iso_format(before_now(seconds=1)),
-        }
-
-        event = self.store_event(event_data, self.project.id)
-
-        assert event is not None
-        instance = self.get_event(event.event_id)
-
-        assert instance.message == "hello"
-        assert instance.data["logentry"] == {"formatted": "hello"}
-        assert instance.title == instance.data["title"] == "hello"
-        assert instance.location is instance.data.get("location", None) is None
-
-        assert tagstore.get_tag_key(self.project.id, None, "foo") is not None
-        assert tagstore.get_tag_value(self.project.id, None, "foo", "bar") is not None
-        assert (
-            tagstore.get_group_tag_key(self.project.id, instance.group_id, None, "foo") is not None
-        )
-        assert (
-            tagstore.get_group_tag_value(instance.project_id, instance.group_id, None, "foo", "bar")
-            is not None
-        )
-
-    def test_exception(self):
-        event_data = {
-            "exception": {
-                "type": "ZeroDivisionError",
-                "value": "cannot divide by zero",
-                "stacktrace": {
-                    "frames": [
-                        {
-                            "filename": "utils.py",
-                            "in_app": False,
-                            "function": "raise_it",
-                            "module": "utils",
-                        },
-                        {
-                            "filename": "main.py",
-                            "in_app": True,
-                            "function": "fail_it",
-                            "module": "main",
-                        },
-                    ]
-                },
-            },
-            "tags": {"foo": "bar"},
-            "timestamp": iso_format(before_now(seconds=1)),
-        }
-
-        event = self.store_event(event_data, self.project.id)
-
-        assert event is not None
-        instance = self.get_event(event.event_id)
-
-        assert len(instance.data["exception"]) == 1
-        assert (
-            instance.title == instance.data["title"] == "ZeroDivisionError: cannot divide by zero"
-        )
-        assert instance.location == instance.data["location"] == "main.py"
-        assert instance.culprit == instance.data["culprit"] == "main in fail_it"
-
-        assert tagstore.get_tag_key(self.project.id, None, "foo") is not None
-        assert tagstore.get_tag_value(self.project.id, None, "foo", "bar") is not None
-        assert (
-            tagstore.get_group_tag_key(self.project.id, instance.group_id, None, "foo") is not None
-        )
-        assert (
-            tagstore.get_group_tag_value(instance.project_id, instance.group_id, None, "foo", "bar")
-            is not None
-        )
-
-    def test_timestamp(self):
-        timestamp = timezone.now().replace(microsecond=0, tzinfo=timezone.utc) - datetime.timedelta(
-            hours=1
-        )
-        event_data = {u"message": "hello", "timestamp": float(timestamp.strftime("%s.%f"))}
-
-        event = self.store_event(event_data, self.project.id)
-
-        assert event is not None
-        instance = self.get_event(event.event_id)
-
-        assert instance.message == "hello"
-        assert instance.datetime == timestamp
-        group = instance.group
-        assert group.first_seen == timestamp
-        assert group.last_seen == timestamp
-
-    @pytest.mark.obsolete("Test in relay")
-    @override_settings(SENTRY_ALLOW_ORIGIN="sentry.io")
-    def test_correct_data_with_get(self):
-        kwargs = {"message": "hello", "timestamp": iso_format(before_now(seconds=1))}
-        resp = self._getWithReferer(kwargs)
-        assert resp.status_code == 200, resp.content
-        event_id = resp["X-Sentry-ID"]
-        instance = self.get_event(event_id)
-        assert instance.message == "hello"
-
-    @pytest.mark.obsolete("Test in relay")
-    @override_settings(SENTRY_ALLOW_ORIGIN="*")
-    def test_get_without_referer_allowed(self):
-        self.project.update_option("sentry:origins", "")
-        kwargs = {"message": "hello", "timestamp": iso_format(before_now(seconds=1))}
-        resp = self._getWithReferer(kwargs, referer=None, protocol="4")
-        assert resp.status_code == 200, resp.content
-
-    @pytest.mark.obsolete("Test in relay")
-    @override_settings(SENTRY_ALLOW_ORIGIN="sentry.io")
-    def test_correct_data_with_post_referer(self):
-        kwargs = {"message": "hello", "timestamp": iso_format(before_now(seconds=1))}
-        resp = self._postWithReferer(kwargs)
-        assert resp.status_code == 200, resp.content
-        event_id = json.loads(resp.content)["id"]
-        instance = self.get_event(event_id)
-        assert instance.message == "hello"
-
-    @pytest.mark.obsolete("Test in relay")
-    @override_settings(SENTRY_ALLOW_ORIGIN="sentry.io")
-    def test_post_without_referer(self):
-        self.project.update_option("sentry:origins", "")
-        kwargs = {"message": "hello", "timestamp": iso_format(before_now(seconds=1))}
-        resp = self._postWithReferer(kwargs, referer=None, protocol="4")
-        assert resp.status_code == 200, resp.content
-
-    @pytest.mark.obsolete("Test in relay")
-    @override_settings(SENTRY_ALLOW_ORIGIN="*")
-    def test_post_without_referer_allowed(self):
-        self.project.update_option("sentry:origins", "")
-        kwargs = {"message": "hello", "timestamp": iso_format(before_now(seconds=1))}
-        resp = self._postWithReferer(kwargs, referer=None, protocol="4")
-        assert resp.status_code == 200, resp.content
-
-    @pytest.mark.obsolete("Test in relay")
-    @override_settings(SENTRY_ALLOW_ORIGIN="google.com")
-    def test_post_with_invalid_origin(self):
-        self.project.update_option("sentry:origins", "sentry.io")
-        kwargs = {"message": "hello", "timestamp": iso_format(before_now(seconds=1))}
-        resp = self._postWithReferer(kwargs, referer="https://getsentry.net", protocol="4")
-        assert resp.status_code == 403, resp.content
-
-    @pytest.mark.obsolete("Test in relay")
-    def test_content_encoding_deflate(self):
-        kwargs = {"message": "hello", "timestamp": iso_format(before_now(seconds=1))}
-        message = zlib.compress(json.dumps(kwargs))
-
-        key = self.projectkey.public_key
-        secret = self.projectkey.secret_key
-
-        with self.tasks():
-            resp = self.client.post(
-                self.path,
-                message,
-                content_type="application/octet-stream",
-                HTTP_CONTENT_ENCODING="deflate",
-                HTTP_X_SENTRY_AUTH=get_auth_header("_postWithHeader", key, secret),
-            )
-
-        assert resp.status_code == 200, resp.content
-
-        event_id = json.loads(resp.content)["id"]
-        instance = self.get_event(event_id)
-
-        assert instance.message == "hello"
-
-    @pytest.mark.obsolete("Test in relay")
-    def test_content_encoding_gzip(self):
-        kwargs = {"message": "hello", "timestamp": iso_format(before_now(seconds=1))}
-
-        message = json.dumps(kwargs)
-
-        fp = StringIO()
-
-        try:
-            f = GzipFile(fileobj=fp, mode="w")
-            f.write(message)
-        finally:
-            f.close()
-
-        key = self.projectkey.public_key
-        secret = self.projectkey.secret_key
-
-        with self.tasks():
-            resp = self.client.post(
-                self.path,
-                fp.getvalue(),
-                content_type="application/octet-stream",
-                HTTP_CONTENT_ENCODING="gzip",
-                HTTP_X_SENTRY_AUTH=get_auth_header("_postWithHeader", key, secret),
-            )
-
-        assert resp.status_code == 200, resp.content
-
-        event_id = json.loads(resp.content)["id"]
-        instance = self.get_event(event_id)
-
-        assert instance.message == "hello"
-
-    @pytest.mark.obsolete("Test in relay")
-    def test_protocol_v2_0_without_secret_key(self):
-        kwargs = {"message": "hello", "timestamp": iso_format(before_now(seconds=1))}
-
-        resp = self._postWithHeader(data=kwargs, key=self.projectkey.public_key, protocol="2.0")
-
-        assert resp.status_code == 200, resp.content
-
-        event_id = json.loads(resp.content)["id"]
-        instance = self.get_event(event_id)
-
-        assert instance.message == "hello"
-
-    @pytest.mark.obsolete("Test in relay")
-    def test_protocol_v3(self):
-        kwargs = {"message": "hello", "timestamp": iso_format(before_now(seconds=1))}
-
-        resp = self._postWithHeader(
-            data=kwargs,
-            key=self.projectkey.public_key,
-            secret=self.projectkey.secret_key,
-            protocol="3",
-        )
-
-        assert resp.status_code == 200, resp.content
-
-        event_id = json.loads(resp.content)["id"]
-        instance = self.get_event(event_id)
-
-        assert instance.message == "hello"
-
-    @pytest.mark.obsolete("Test in relay")
-    def test_protocol_v4(self):
-        kwargs = {"message": "hello", "timestamp": iso_format(before_now(seconds=1))}
-
-        resp = self._postWithHeader(
-            data=kwargs,
-            key=self.projectkey.public_key,
-            secret=self.projectkey.secret_key,
-            protocol="4",
-        )
-
-        assert resp.status_code == 200, resp.content
-
-        event_id = json.loads(resp.content)["id"]
-        instance = self.get_event(event_id)
-
-        assert instance.message == "hello"
-
-    @pytest.mark.obsolete("Test in relay")
-    def test_protocol_v5(self):
-        kwargs = {"message": "hello", "timestamp": iso_format(before_now(seconds=1))}
-
-        resp = self._postWithHeader(
-            data=kwargs,
-            key=self.projectkey.public_key,
-            secret=self.projectkey.secret_key,
-            protocol="5",
-        )
-
-        assert resp.status_code == 200, resp.content
-
-        event_id = json.loads(resp.content)["id"]
-        instance = self.get_event(event_id)
-
-        assert instance.message == "hello"
-
-    @pytest.mark.obsolete("Test in relay")
-    def test_protocol_v6(self):
-        kwargs = {"message": "hello", "timestamp": iso_format(before_now(seconds=1))}
-
-        resp = self._postWithHeader(
-            data=kwargs,
-            key=self.projectkey.public_key,
-            secret=self.projectkey.secret_key,
-            protocol="6",
-        )
-
-        assert resp.status_code == 200, resp.content
-
-        event_id = json.loads(resp.content)["id"]
-        instance = self.get_event(event_id)
-
-        assert instance.message == "hello"
-
-
-@pytest.mark.obsolete("Functionality not relevant in Relay store")
-class SentryWsgiRemoteTest(TransactionTestCase):
-    @override_settings(ALLOWED_HOSTS=["localhost"])
-    def test_traceparent_header_wsgi(self):
-        # Assert that posting something to store will not create another
-        # (transaction) event under any circumstances.
-        #
-        # We use Werkzeug's test client because Django's test client bypasses a
-        # lot of request handling code that we want to test implicitly (such as
-        # all our WSGI middlewares and the entire Django instrumentation by
-        # sentry-sdk).
-        #
-        # XXX(markus): Ideally methods such as `_postWithHeader` would always
-        # call the WSGI application => swap out Django's test client with e.g.
-        # Werkzeug's.
-        client = WerkzeugClient(application)
-
-        calls = []
-
-        def new_disable_transaction_events():
-            with configure_scope() as scope:
-                assert scope.transaction
-                assert scope.transaction.sampled
-                disable_transaction_events()
-                assert not scope.transaction.sampled
-
-            calls.append(1)
-
-        events = []
-
-        auth = get_auth_header(
-            "_postWithWerkzeug/0.0.0", self.projectkey.public_key, self.projectkey.secret_key, "7"
-        )
-
-        with mock.patch(
-            "sentry.web.api.disable_transaction_events", new_disable_transaction_events
-        ):
-            with self.tasks():
-                with Hub(
-                    Client(
-                        transport=events.append,
-                        integrations=[CeleryIntegration(), DjangoIntegration()],
-                    )
-                ):
-                    app_iter, status, headers = client.post(
-                        reverse("sentry-api-store"),
-                        data=b'{"message": "hello"}',
-                        headers={
-                            "x-sentry-auth": auth,
-                            "sentry-trace": "1",
-                            "content-type": "application/octet-stream",
-                        },
-                        environ_base={"REMOTE_ADDR": "127.0.0.1"},
-                    )
-
-                    body = "".join(app_iter)
-
-        assert status == "200 OK", body
-        assert set(e.get("transaction") for e in events) == {"rule_processor_apply"}
-        assert calls == [1]
-
-
 class DependencyTest(TestCase):
     def raise_import_error(self, package):
         def callable(package_name):
@@ -557,56 +80,3 @@ class DependencyTest(TestCase):
 
     def test_validate_fails_on_pylibmc(self):
         self.validate_dependency(*DEPENDENCY_TEST_DATA["pylibmc"])
-
-
-def get_fixtures(name):
-    path = os.path.join(os.path.dirname(__file__), "fixtures/csp", name)
-    try:
-        with open(path + "_input.json", "rb") as fp1:
-            input = fp1.read()
-    except IOError:
-        input = None
-
-    try:
-        with open(path + "_output.json", "rb") as fp2:
-            output = json.load(fp2)
-    except IOError:
-        output = None
-
-    return input, output
-
-
-class CspReportTest(TestCase, SnubaTestCase):
-    def assertReportCreated(self, input, output):
-        resp = self._postCspWithHeader(input)
-        assert resp.status_code == 201, resp.content
-        # XXX: there appears to be a race condition between the 201 return and get_events,
-        # leading this test to sometimes fail. .5s seems to be sufficient.
-        # Modifying the timestamp of store_event, like how it's done in other snuba tests,
-        # doesn't work here because the event isn't created directly by this test.
-        sleep(0.5)
-        events = eventstore.get_events(
-            filter=eventstore.Filter(
-                project_ids=[self.project.id], conditions=[["type", "=", "csp"]]
-            )
-        )
-        assert len(events) == 1
-        e = events[0]
-        assert output["message"] == e.data["logentry"]["formatted"]
-        for key, value in six.iteritems(output["tags"]):
-            assert e.get_tag(key) == value
-        for key, value in six.iteritems(output["data"]):
-            assert e.data[key] == value
-
-    def assertReportRejected(self, input):
-        resp = self._postCspWithHeader(input)
-        assert resp.status_code in (400, 403), resp.content
-
-    def test_invalid_report(self):
-        self.assertReportRejected("")
-
-    def test_chrome_blocked_asset(self):
-        self.assertReportCreated(*get_fixtures("chrome_blocked_asset"))
-
-    def test_firefox_missing_effective_uri(self):
-        self.assertReportCreated(*get_fixtures("firefox_blocked_asset"))
diff --git a/tests/relay_integration/lang/java/test_plugin.py b/tests/relay_integration/lang/java/test_plugin.py
index d439557254..1be0454a9c 100644
--- a/tests/relay_integration/lang/java/test_plugin.py
+++ b/tests/relay_integration/lang/java/test_plugin.py
@@ -1,12 +1,313 @@
 from __future__ import absolute_import
-import pytest
 
-from tests.sentry.lang.java.test_plugin import BasicResolvingIntegrationTest
+import zipfile
+from six import BytesIO
+
+from django.core.urlresolvers import reverse
+from django.core.files.uploadedfile import SimpleUploadedFile
+
 from sentry.testutils import RelayStoreHelper, TransactionTestCase
+from sentry.testutils.helpers.datetime import before_now, iso_format
+
+PROGUARD_UUID = "6dc7fdb0-d2fb-4c8e-9d6b-bb1aa98929b1"
+PROGUARD_SOURCE = b"""\
+org.slf4j.helpers.Util$ClassContextSecurityManager -> org.a.b.g$a:
+    65:65:void <init>() -> <init>
+    67:67:java.lang.Class[] getClassContext() -> a
+    69:69:java.lang.Class[] getExtraClassContext() -> a
+    65:65:void <init>(org.slf4j.helpers.Util$1) -> <init>
+"""
+PROGUARD_INLINE_UUID = "d748e578-b3d1-5be5-b0e5-a42e8c9bf8e0"
+PROGUARD_INLINE_SOURCE = b"""\
+# compiler: R8
+# compiler_version: 2.0.74
+# min_api: 16
+# pg_map_id: 5b46fdc
+# common_typos_disable
+$r8$backportedMethods$utility$Objects$2$equals -> a:
+    boolean equals(java.lang.Object,java.lang.Object) -> a
+$r8$twr$utility -> b:
+    void $closeResource(java.lang.Throwable,java.lang.Object) -> a
+android.support.v4.app.RemoteActionCompatParcelizer -> android.support.v4.app.RemoteActionCompatParcelizer:
+    1:1:void <init>():11:11 -> <init>
+io.sentry.sample.-$$Lambda$r3Avcbztes2hicEObh02jjhQqd4 -> e.a.c.a:
+    io.sentry.sample.MainActivity f$0 -> b
+io.sentry.sample.MainActivity -> io.sentry.sample.MainActivity:
+    1:1:void <init>():15:15 -> <init>
+    1:1:boolean onCreateOptionsMenu(android.view.Menu):60:60 -> onCreateOptionsMenu
+    1:1:boolean onOptionsItemSelected(android.view.MenuItem):69:69 -> onOptionsItemSelected
+    2:2:boolean onOptionsItemSelected(android.view.MenuItem):76:76 -> onOptionsItemSelected
+    1:1:void bar():54:54 -> t
+    1:1:void foo():44 -> t
+    1:1:void onClickHandler(android.view.View):40 -> t
+"""
+PROGUARD_BUG_UUID = "071207ac-b491-4a74-957c-2c94fd9594f2"
+PROGUARD_BUG_SOURCE = b"x"
+
+
+class BasicResolvingIntegrationTest(RelayStoreHelper, TransactionTestCase):
+    def test_basic_resolving(self):
+        url = reverse(
+            "sentry-api-0-dsym-files",
+            kwargs={
+                "organization_slug": self.project.organization.slug,
+                "project_slug": self.project.slug,
+            },
+        )
+
+        self.login_as(user=self.user)
+
+        out = BytesIO()
+        f = zipfile.ZipFile(out, "w")
+        f.writestr("proguard/%s.txt" % PROGUARD_UUID, PROGUARD_SOURCE)
+        f.writestr("ignored-file.txt", b"This is just some stuff")
+        f.close()
+
+        response = self.client.post(
+            url,
+            {
+                "file": SimpleUploadedFile(
+                    "symbols.zip", out.getvalue(), content_type="application/zip"
+                )
+            },
+            format="multipart",
+        )
+        assert response.status_code == 201, response.content
+        assert len(response.data) == 1
+
+        event_data = {
+            "user": {"ip_address": "31.172.207.97"},
+            "extra": {},
+            "project": self.project.id,
+            "platform": "java",
+            "debug_meta": {"images": [{"type": "proguard", "uuid": PROGUARD_UUID}]},
+            "exception": {
+                "values": [
+                    {
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "function": "a",
+                                    "abs_path": None,
+                                    "module": "org.a.b.g$a",
+                                    "filename": None,
+                                    "lineno": 67,
+                                },
+                                {
+                                    "function": "a",
+                                    "abs_path": None,
+                                    "module": "org.a.b.g$a",
+                                    "filename": None,
+                                    "lineno": 69,
+                                },
+                            ]
+                        },
+                        "module": "org.a.b",
+                        "type": "g$a",
+                        "value": "Shit broke yo",
+                    }
+                ]
+            },
+            "timestamp": iso_format(before_now(seconds=1)),
+        }
+
+        event = self.post_and_retrieve_event(event_data)
+        if not self.use_relay():
+            # We measure the number of queries after an initial post,
+            # because there are many queries polluting the array
+            # before the actual "processing" happens (like, auth_user)
+            with self.assertWriteQueries(
+                {
+                    "nodestore_node": 2,
+                    "sentry_eventuser": 1,
+                    "sentry_groupedmessage": 1,
+                    "sentry_userreport": 1,
+                }
+            ):
+                self.post_and_retrieve_event(event_data)
+
+        exc = event.interfaces["exception"].values[0]
+        bt = exc.stacktrace
+        frames = bt.frames
+
+        assert exc.type == "Util$ClassContextSecurityManager"
+        assert exc.module == "org.slf4j.helpers"
+        assert frames[0].function == "getClassContext"
+        assert frames[0].module == "org.slf4j.helpers.Util$ClassContextSecurityManager"
+        assert frames[1].function == "getExtraClassContext"
+        assert frames[1].module == "org.slf4j.helpers.Util$ClassContextSecurityManager"
+
+        assert event.culprit == (
+            "org.slf4j.helpers.Util$ClassContextSecurityManager " "in getExtraClassContext"
+        )
+
+    def test_resolving_inline(self):
+        url = reverse(
+            "sentry-api-0-dsym-files",
+            kwargs={
+                "organization_slug": self.project.organization.slug,
+                "project_slug": self.project.slug,
+            },
+        )
+
+        self.login_as(user=self.user)
+
+        out = BytesIO()
+        f = zipfile.ZipFile(out, "w")
+        f.writestr("proguard/%s.txt" % PROGUARD_INLINE_UUID, PROGUARD_INLINE_SOURCE)
+        f.writestr("ignored-file.txt", b"This is just some stuff")
+        f.close()
+
+        response = self.client.post(
+            url,
+            {
+                "file": SimpleUploadedFile(
+                    "symbols.zip", out.getvalue(), content_type="application/zip"
+                )
+            },
+            format="multipart",
+        )
+        assert response.status_code == 201, response.content
+        assert len(response.data) == 1
+
+        event_data = {
+            "user": {"ip_address": "31.172.207.97"},
+            "extra": {},
+            "project": self.project.id,
+            "platform": "java",
+            "debug_meta": {"images": [{"type": "proguard", "uuid": PROGUARD_INLINE_UUID}]},
+            "exception": {
+                "values": [
+                    {
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "function": "onClick",
+                                    "abs_path": None,
+                                    "module": "e.a.c.a",
+                                    "filename": None,
+                                    "lineno": 2,
+                                },
+                                {
+                                    "function": "t",
+                                    "abs_path": None,
+                                    "module": "io.sentry.sample.MainActivity",
+                                    "filename": "MainActivity.java",
+                                    "lineno": 1,
+                                },
+                            ]
+                        },
+                        "module": "org.a.b",
+                        "type": "g$a",
+                        "value": "Shit broke yo",
+                    }
+                ]
+            },
+            "timestamp": iso_format(before_now(seconds=1)),
+        }
+
+        event = self.post_and_retrieve_event(event_data)
+        if not self.use_relay():
+            # We measure the number of queries after an initial post,
+            # because there are many queries polluting the array
+            # before the actual "processing" happens (like, auth_user)
+            with self.assertWriteQueries(
+                {
+                    "nodestore_node": 2,
+                    "sentry_eventuser": 1,
+                    "sentry_groupedmessage": 1,
+                    "sentry_userreport": 1,
+                }
+            ):
+                self.post_and_retrieve_event(event_data)
+
+        exc = event.interfaces["exception"].values[0]
+        bt = exc.stacktrace
+        frames = bt.frames
+
+        assert len(frames) == 4
+
+        assert frames[0].function == "onClick"
+        assert frames[0].module == "io.sentry.sample.-$$Lambda$r3Avcbztes2hicEObh02jjhQqd4"
+
+        assert frames[1].filename == "MainActivity.java"
+        assert frames[1].module == "io.sentry.sample.MainActivity"
+        assert frames[1].function == "onClickHandler"
+        assert frames[1].lineno == 40
+        assert frames[2].function == "foo"
+        assert frames[2].lineno == 44
+        assert frames[3].function == "bar"
+        assert frames[3].lineno == 54
+        assert frames[3].filename == "MainActivity.java"
+        assert frames[3].module == "io.sentry.sample.MainActivity"
+
+    def test_error_on_resolving(self):
+        url = reverse(
+            "sentry-api-0-dsym-files",
+            kwargs={
+                "organization_slug": self.project.organization.slug,
+                "project_slug": self.project.slug,
+            },
+        )
+
+        self.login_as(user=self.user)
+
+        out = BytesIO()
+        f = zipfile.ZipFile(out, "w")
+        f.writestr("proguard/%s.txt" % PROGUARD_BUG_UUID, PROGUARD_BUG_SOURCE)
+        f.close()
+
+        response = self.client.post(
+            url,
+            {
+                "file": SimpleUploadedFile(
+                    "symbols.zip", out.getvalue(), content_type="application/zip"
+                )
+            },
+            format="multipart",
+        )
+        assert response.status_code == 201, response.content
+        assert len(response.data) == 1
+
+        event_data = {
+            "user": {"ip_address": "31.172.207.97"},
+            "extra": {},
+            "project": self.project.id,
+            "platform": "java",
+            "debug_meta": {"images": [{"type": "proguard", "uuid": PROGUARD_BUG_UUID}]},
+            "exception": {
+                "values": [
+                    {
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "function": "a",
+                                    "abs_path": None,
+                                    "module": "org.a.b.g$a",
+                                    "filename": None,
+                                    "lineno": 67,
+                                },
+                                {
+                                    "function": "a",
+                                    "abs_path": None,
+                                    "module": "org.a.b.g$a",
+                                    "filename": None,
+                                    "lineno": 69,
+                                },
+                            ]
+                        },
+                        "type": "RuntimeException",
+                        "value": "Shit broke yo",
+                    }
+                ]
+            },
+            "timestamp": iso_format(before_now(seconds=1)),
+        }
 
+        event = self.post_and_retrieve_event(event_data)
 
-@pytest.mark.relay_store_integration
-class BasicResolvingIntegrationTestRelay(
-    RelayStoreHelper, TransactionTestCase, BasicResolvingIntegrationTest
-):
-    pass
+        assert len(event.data["errors"]) == 1
+        assert event.data["errors"][0] == {
+            "mapping_uuid": u"071207ac-b491-4a74-957c-2c94fd9594f2",
+            "type": "proguard_missing_lineno",
+        }
diff --git a/tests/sentry/lang/javascript/example-project/.gitignore b/tests/relay_integration/lang/javascript/example-project/.gitignore
similarity index 100%
rename from tests/sentry/lang/javascript/example-project/.gitignore
rename to tests/relay_integration/lang/javascript/example-project/.gitignore
diff --git a/tests/sentry/lang/javascript/example-project/Makefile b/tests/relay_integration/lang/javascript/example-project/Makefile
similarity index 100%
rename from tests/sentry/lang/javascript/example-project/Makefile
rename to tests/relay_integration/lang/javascript/example-project/Makefile
diff --git a/tests/sentry/lang/javascript/example-project/index.html b/tests/relay_integration/lang/javascript/example-project/index.html
similarity index 100%
rename from tests/sentry/lang/javascript/example-project/index.html
rename to tests/relay_integration/lang/javascript/example-project/index.html
diff --git a/tests/sentry/lang/javascript/example-project/launch.js b/tests/relay_integration/lang/javascript/example-project/launch.js
similarity index 100%
rename from tests/sentry/lang/javascript/example-project/launch.js
rename to tests/relay_integration/lang/javascript/example-project/launch.js
diff --git a/tests/sentry/lang/javascript/example-project/minifiedError.json b/tests/relay_integration/lang/javascript/example-project/minifiedError.json
similarity index 100%
rename from tests/sentry/lang/javascript/example-project/minifiedError.json
rename to tests/relay_integration/lang/javascript/example-project/minifiedError.json
diff --git a/tests/sentry/lang/javascript/example-project/package.json b/tests/relay_integration/lang/javascript/example-project/package.json
similarity index 100%
rename from tests/sentry/lang/javascript/example-project/package.json
rename to tests/relay_integration/lang/javascript/example-project/package.json
diff --git a/tests/sentry/lang/javascript/example-project/test.js b/tests/relay_integration/lang/javascript/example-project/test.js
similarity index 100%
rename from tests/sentry/lang/javascript/example-project/test.js
rename to tests/relay_integration/lang/javascript/example-project/test.js
diff --git a/tests/sentry/lang/javascript/example-project/test.map b/tests/relay_integration/lang/javascript/example-project/test.map
similarity index 100%
rename from tests/sentry/lang/javascript/example-project/test.map
rename to tests/relay_integration/lang/javascript/example-project/test.map
diff --git a/tests/sentry/lang/javascript/example-project/test.min.js b/tests/relay_integration/lang/javascript/example-project/test.min.js
similarity index 86%
rename from tests/sentry/lang/javascript/example-project/test.min.js
rename to tests/relay_integration/lang/javascript/example-project/test.min.js
index f43cabc6da..9657529360 100644
--- a/tests/sentry/lang/javascript/example-project/test.min.js
+++ b/tests/relay_integration/lang/javascript/example-project/test.min.js
@@ -1,2 +1,2 @@
 var makeAFailure=function(){function n(n){}function e(n){throw new Error("failed!")}function r(r){var i=null;if(r.failed){i=e}else{i=n}i(r)}function i(){var n={failed:true,value:42};r(n)}return i}();
-//# sourceMappingURL=test.map
\ No newline at end of file
+//# sourceMappingURL=test.map
diff --git a/tests/sentry/lang/javascript/example-project/yarn.lock b/tests/relay_integration/lang/javascript/example-project/yarn.lock
similarity index 100%
rename from tests/sentry/lang/javascript/example-project/yarn.lock
rename to tests/relay_integration/lang/javascript/example-project/yarn.lock
diff --git a/tests/sentry/lang/javascript/fixtures/dist.bundle.js b/tests/relay_integration/lang/javascript/fixtures/dist.bundle.js
similarity index 100%
rename from tests/sentry/lang/javascript/fixtures/dist.bundle.js
rename to tests/relay_integration/lang/javascript/fixtures/dist.bundle.js
diff --git a/tests/sentry/lang/javascript/fixtures/dist.bundle.js.map b/tests/relay_integration/lang/javascript/fixtures/dist.bundle.js.map
similarity index 100%
rename from tests/sentry/lang/javascript/fixtures/dist.bundle.js.map
rename to tests/relay_integration/lang/javascript/fixtures/dist.bundle.js.map
diff --git a/tests/sentry/lang/javascript/fixtures/embedded.js b/tests/relay_integration/lang/javascript/fixtures/embedded.js
similarity index 100%
rename from tests/sentry/lang/javascript/fixtures/embedded.js
rename to tests/relay_integration/lang/javascript/fixtures/embedded.js
diff --git a/tests/sentry/lang/javascript/fixtures/embedded.js.map b/tests/relay_integration/lang/javascript/fixtures/embedded.js.map
similarity index 100%
rename from tests/sentry/lang/javascript/fixtures/embedded.js.map
rename to tests/relay_integration/lang/javascript/fixtures/embedded.js.map
diff --git a/tests/sentry/lang/javascript/fixtures/empty.js b/tests/relay_integration/lang/javascript/fixtures/empty.js
similarity index 100%
rename from tests/sentry/lang/javascript/fixtures/empty.js
rename to tests/relay_integration/lang/javascript/fixtures/empty.js
diff --git a/tests/sentry/lang/javascript/fixtures/file.min.js b/tests/relay_integration/lang/javascript/fixtures/file.min.js
similarity index 83%
rename from tests/sentry/lang/javascript/fixtures/file.min.js
rename to tests/relay_integration/lang/javascript/fixtures/file.min.js
index 12b9f811b2..80df2a5737 100644
--- a/tests/sentry/lang/javascript/fixtures/file.min.js
+++ b/tests/relay_integration/lang/javascript/fixtures/file.min.js
@@ -1,2 +1,2 @@
 function add(a,b){"use strict";return a+b}function multiply(a,b){"use strict";return a*b}function divide(a,b){"use strict";try{return multiply(add(a,b),a,b)/c}catch(e){Raven.captureException(e)}}
-//@ sourceMappingURL=file.sourcemap.js
\ No newline at end of file
+//@ sourceMappingURL=file.sourcemap.js
diff --git a/tests/sentry/lang/javascript/fixtures/file.sourcemap.js b/tests/relay_integration/lang/javascript/fixtures/file.sourcemap.js
similarity index 87%
rename from tests/sentry/lang/javascript/fixtures/file.sourcemap.js
rename to tests/relay_integration/lang/javascript/fixtures/file.sourcemap.js
index 1bd0f6510c..d2af021988 100644
--- a/tests/sentry/lang/javascript/fixtures/file.sourcemap.js
+++ b/tests/relay_integration/lang/javascript/fixtures/file.sourcemap.js
@@ -1 +1 @@
-{"version":3,"file":"file.min.js","sources":["file1.js","file2.js"],"names":["add","a","b","multiply","divide","c","e","Raven","captureException"],"mappings":"AAAA,QAASA,KAAIC,EAAGC,GACf,YACA,OAAOD,GAAIC,ECFZ,QAASC,UAASF,EAAGC,GACpB,YACA,OAAOD,GAAIC,EAEZ,QAASE,QAAOH,EAAGC,GAClB,YACA,KACC,MAAOC,UAASH,IAAIC,EAAGC,GAAID,EAAGC,GAAKG,EAClC,MAAOC,GACRC,MAAMC,iBAAiBF"}
\ No newline at end of file
+{"version":3,"file":"file.min.js","sources":["file1.js","file2.js"],"names":["add","a","b","multiply","divide","c","e","Raven","captureException"],"mappings":"AAAA,QAASA,KAAIC,EAAGC,GACf,YACA,OAAOD,GAAIC,ECFZ,QAASC,UAASF,EAAGC,GACpB,YACA,OAAOD,GAAIC,EAEZ,QAASE,QAAOH,EAAGC,GAClB,YACA,KACC,MAAOC,UAASH,IAAIC,EAAGC,GAAID,EAAGC,GAAKG,EAClC,MAAOC,GACRC,MAAMC,iBAAiBF"}
diff --git a/tests/sentry/lang/javascript/fixtures/file1.js b/tests/relay_integration/lang/javascript/fixtures/file1.js
similarity index 100%
rename from tests/sentry/lang/javascript/fixtures/file1.js
rename to tests/relay_integration/lang/javascript/fixtures/file1.js
diff --git a/tests/sentry/lang/javascript/fixtures/file2.js b/tests/relay_integration/lang/javascript/fixtures/file2.js
similarity index 100%
rename from tests/sentry/lang/javascript/fixtures/file2.js
rename to tests/relay_integration/lang/javascript/fixtures/file2.js
diff --git a/tests/sentry/lang/javascript/fixtures/indexed.min.js b/tests/relay_integration/lang/javascript/fixtures/indexed.min.js
similarity index 100%
rename from tests/sentry/lang/javascript/fixtures/indexed.min.js
rename to tests/relay_integration/lang/javascript/fixtures/indexed.min.js
diff --git a/tests/sentry/lang/javascript/fixtures/indexed.sourcemap.js b/tests/relay_integration/lang/javascript/fixtures/indexed.sourcemap.js
similarity index 100%
rename from tests/sentry/lang/javascript/fixtures/indexed.sourcemap.js
rename to tests/relay_integration/lang/javascript/fixtures/indexed.sourcemap.js
diff --git a/tests/sentry/lang/javascript/fixtures/node_app.min.js b/tests/relay_integration/lang/javascript/fixtures/node_app.min.js
similarity index 100%
rename from tests/sentry/lang/javascript/fixtures/node_app.min.js
rename to tests/relay_integration/lang/javascript/fixtures/node_app.min.js
diff --git a/tests/sentry/lang/javascript/fixtures/node_app.min.js.map b/tests/relay_integration/lang/javascript/fixtures/node_app.min.js.map
similarity index 100%
rename from tests/sentry/lang/javascript/fixtures/node_app.min.js.map
rename to tests/relay_integration/lang/javascript/fixtures/node_app.min.js.map
diff --git a/tests/sentry/lang/javascript/fixtures/nofiles.js b/tests/relay_integration/lang/javascript/fixtures/nofiles.js
similarity index 100%
rename from tests/sentry/lang/javascript/fixtures/nofiles.js
rename to tests/relay_integration/lang/javascript/fixtures/nofiles.js
diff --git a/tests/sentry/lang/javascript/fixtures/nofiles.js.map b/tests/relay_integration/lang/javascript/fixtures/nofiles.js.map
similarity index 100%
rename from tests/sentry/lang/javascript/fixtures/nofiles.js.map
rename to tests/relay_integration/lang/javascript/fixtures/nofiles.js.map
diff --git a/tests/sentry/lang/javascript/fixtures/unsupported.min.js b/tests/relay_integration/lang/javascript/fixtures/unsupported.min.js
similarity index 100%
rename from tests/sentry/lang/javascript/fixtures/unsupported.min.js
rename to tests/relay_integration/lang/javascript/fixtures/unsupported.min.js
diff --git a/tests/sentry/lang/javascript/fixtures/unsupported.sourcemap.js b/tests/relay_integration/lang/javascript/fixtures/unsupported.sourcemap.js
similarity index 100%
rename from tests/sentry/lang/javascript/fixtures/unsupported.sourcemap.js
rename to tests/relay_integration/lang/javascript/fixtures/unsupported.sourcemap.js
diff --git a/tests/relay_integration/lang/javascript/test_example.py b/tests/relay_integration/lang/javascript/test_example.py
index d2d4519b58..449a6ef2f9 100644
--- a/tests/relay_integration/lang/javascript/test_example.py
+++ b/tests/relay_integration/lang/javascript/test_example.py
@@ -1,11 +1,82 @@
 from __future__ import absolute_import
 
-import pytest
+import os
+import json
+import responses
 
-from tests.sentry.lang.javascript.test_example import ExampleTestCase
 from sentry.testutils import RelayStoreHelper, TransactionTestCase
+from sentry.testutils.helpers.datetime import iso_format, before_now
 
 
-@pytest.mark.relay_store_integration
-class ExampleTestCaseRelay(RelayStoreHelper, TransactionTestCase, ExampleTestCase):
-    pass
+def get_fixture_path(name):
+    return os.path.join(os.path.dirname(__file__), "example-project", name)
+
+
+def load_fixture(name):
+    with open(get_fixture_path(name)) as f:
+        return f.read()
+
+
+class ExampleTestCase(RelayStoreHelper, TransactionTestCase):
+    @responses.activate
+    def test_sourcemap_expansion(self):
+        responses.add(
+            responses.GET,
+            "http://example.com/test.js",
+            body=load_fixture("test.js"),
+            content_type="application/javascript",
+        )
+        responses.add(
+            responses.GET,
+            "http://example.com/test.min.js",
+            body=load_fixture("test.min.js"),
+            content_type="application/javascript",
+        )
+        responses.add(
+            responses.GET,
+            "http://example.com/test.map",
+            body=load_fixture("test.map"),
+            content_type="application/json",
+        )
+        responses.add(responses.GET, "http://example.com/index.html", body="Not Found", status=404)
+
+        min_ago = iso_format(before_now(minutes=1))
+
+        data = {
+            "timestamp": min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            "frames": json.loads(load_fixture("minifiedError.json"))[::-1]
+                        },
+                    }
+                ]
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        exception = event.interfaces["exception"]
+        frame_list = exception.values[0].stacktrace.frames
+
+        assert len(frame_list) == 4
+
+        assert frame_list[0].function == "produceStack"
+        assert frame_list[0].lineno == 6
+        assert frame_list[0].filename == "index.html"
+
+        assert frame_list[1].function == "test"
+        assert frame_list[1].lineno == 20
+        assert frame_list[1].filename == "test.js"
+
+        assert frame_list[2].function == "invoke"
+        assert frame_list[2].lineno == 15
+        assert frame_list[2].filename == "test.js"
+
+        assert frame_list[3].function == "onFailure"
+        assert frame_list[3].lineno == 5
+        assert frame_list[3].filename == "test.js"
diff --git a/tests/relay_integration/lang/javascript/test_plugin.py b/tests/relay_integration/lang/javascript/test_plugin.py
index aaf4574aab..c64a7ad7bd 100644
--- a/tests/relay_integration/lang/javascript/test_plugin.py
+++ b/tests/relay_integration/lang/javascript/test_plugin.py
@@ -1,15 +1,1360 @@
+# coding: utf-8
+
 from __future__ import absolute_import
-import pytest
 
-from tests.sentry.lang.javascript.test_plugin import JavascriptIntegrationTest
-from sentry.testutils import RelayStoreHelper, TransactionTestCase
+import os.path
+from base64 import b64encode
+
+import responses
+
+from sentry.testutils import RelayStoreHelper, TransactionTestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import iso_format, before_now
+from sentry.utils.compat.mock import patch
+from sentry.models import File, Release, ReleaseFile
+
+# TODO(joshuarli): six 1.12.0 adds ensure_binary
+# might also want to put this in utils since we pretty much expect the result to be py3 str and not bytes
+BASE64_SOURCEMAP = "data:application/json;base64," + (
+    b64encode(
+        u'{"version":3,"file":"generated.js","sources":["/test.js"],"names":[],"mappings":"AAAA","sourcesContent":['
+        '"console.log(\\"hello, World!\\")"]}'.encode("utf-8")
+    )
+    .decode("utf-8")
+    .replace("\n", "")
+)
+
 
+def get_fixture_path(name):
+    return os.path.join(os.path.dirname(__file__), "fixtures", name)
 
-@pytest.mark.relay_store_integration
-class JavascriptIntegrationTestRelay(
-    RelayStoreHelper, TransactionTestCase, JavascriptIntegrationTest
-):
+
+def load_fixture(name):
+    with open(get_fixture_path(name), "rb") as fp:
+        return fp.read()
+
+
+class JavascriptIntegrationTest(RelayStoreHelper, SnubaTestCase, TransactionTestCase):
     def setUp(self):
-        super(JavascriptIntegrationTestRelay, self).setUp()
+        super(JavascriptIntegrationTest, self).setUp()
         self.min_ago = iso_format(before_now(minutes=1))
+
+    def test_adds_contexts_without_device(self):
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "request": {
+                "url": "http://example.com",
+                "headers": [
+                    [
+                        "User-Agent",
+                        "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) "
+                        "Chrome/28.0.1500.72 Safari/537.36",
+                    ]
+                ],
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+        contexts = event.interfaces["contexts"].to_json()
+        assert contexts.get("os") == {"name": "Windows", "version": "8", "type": "os"}
+        assert contexts.get("device") is None
+
+    def test_adds_contexts_with_device(self):
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "request": {
+                "url": "http://example.com",
+                "headers": [
+                    [
+                        "User-Agent",
+                        "Mozilla/5.0 (Linux; U; Android 4.3; en-us; SCH-R530U Build/JSS15J) AppleWebKit/534.30 ("
+                        "KHTML, like Gecko) Version/4.0 Mobile Safari/534.30 USCC-R530U",
+                    ]
+                ],
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        contexts = event.interfaces["contexts"].to_json()
+        assert contexts.get("os") == {"name": "Android", "type": "os", "version": "4.3"}
+        assert contexts.get("browser") == {"name": "Android", "type": "browser", "version": "4.3"}
+        assert contexts.get("device") == {
+            "family": "Samsung SCH-R530U",
+            "type": "device",
+            "model": "SCH-R530U",
+            "brand": "Samsung",
+        }
+
+    def test_adds_contexts_with_ps4_device(self):
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "request": {
+                "url": "http://example.com",
+                "headers": [
+                    [
+                        "User-Agent",
+                        "Mozilla/5.0 (PlayStation 4 3.55) AppleWebKit/537.78 (KHTML, like Gecko)",
+                    ]
+                ],
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        contexts = event.interfaces["contexts"].to_json()
+        assert contexts.get("os") is None
+        assert contexts.get("browser") is None
+        assert contexts.get("device") == {
+            "family": "PlayStation 4",
+            "type": "device",
+            "model": "PlayStation 4",
+            "brand": "Sony",
+        }
+
+    @patch("sentry.lang.javascript.processor.fetch_file")
+    def test_source_expansion(self, mock_fetch_file):
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "abs_path": "http://example.com/foo.js",
+                                    "filename": "foo.js",
+                                    "lineno": 4,
+                                    "colno": 0,
+                                },
+                                {
+                                    "abs_path": "http://example.com/foo.js",
+                                    "filename": "foo.js",
+                                    "lineno": 1,
+                                    "colno": 0,
+                                },
+                            ]
+                        },
+                    }
+                ]
+            },
+        }
+
+        mock_fetch_file.return_value.body = "\n".join("hello world")
+        mock_fetch_file.return_value.encoding = None
+        mock_fetch_file.return_value.headers = {}
+
+        event = self.post_and_retrieve_event(data)
+
+        mock_fetch_file.assert_called_once_with(
+            "http://example.com/foo.js",
+            project=self.project,
+            release=None,
+            dist=None,
+            allow_scraping=True,
+        )
+
+        exception = event.interfaces["exception"]
+        frame_list = exception.values[0].stacktrace.frames
+
+        frame = frame_list[0]
+        assert frame.pre_context == ["h", "e", "l"]
+        assert frame.context_line == "l"
+        assert frame.post_context == ["o", " ", "w", "o", "r"]
+
+        frame = frame_list[1]
+        assert not frame.pre_context
+        assert frame.context_line == "h"
+        assert frame.post_context == ["e", "l", "l", "o", " "]
+
+        # no source map means no raw_stacktrace
+        assert exception.values[0].raw_stacktrace is None
+
+    @patch("sentry.lang.javascript.processor.fetch_file")
+    @patch("sentry.lang.javascript.processor.discover_sourcemap")
+    def test_inlined_sources(self, mock_discover_sourcemap, mock_fetch_file):
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "abs_path": "http://example.com/test.min.js",
+                                    "filename": "test.js",
+                                    "lineno": 1,
+                                    "colno": 1,
+                                }
+                            ]
+                        },
+                    }
+                ]
+            },
+        }
+
+        mock_discover_sourcemap.return_value = BASE64_SOURCEMAP
+
+        mock_fetch_file.return_value.url = "http://example.com/test.min.js"
+        mock_fetch_file.return_value.body = "\n".join("<generated source>")
+        mock_fetch_file.return_value.encoding = None
+
+        event = self.post_and_retrieve_event(data)
+
+        mock_fetch_file.assert_called_once_with(
+            "http://example.com/test.min.js",
+            project=self.project,
+            release=None,
+            dist=None,
+            allow_scraping=True,
+        )
+
+        exception = event.interfaces["exception"]
+        frame_list = exception.values[0].stacktrace.frames
+
+        frame = frame_list[0]
+        assert not frame.pre_context
+        assert frame.context_line == 'console.log("hello, World!")'
+        assert not frame.post_context
+        assert frame.data["sourcemap"] == "http://example.com/test.min.js"
+
+    @responses.activate
+    def test_error_message_translations(self):
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "logentry": {
+                "formatted": u"ReferenceError: Impossible de d\xe9finir une propri\xe9t\xe9 \xab foo \xbb : objet non "
+                u"extensible"
+            },
+            "exception": {
+                "values": [
+                    {"type": "Error", "value": u"P\u0159\xedli\u0161 mnoho soubor\u016f"},
+                    {
+                        "type": "Error",
+                        "value": u"foo: wyst\u0105pi\u0142 nieoczekiwany b\u0142\u0105d podczas pr\xf3by uzyskania "
+                        u"informacji o metadanych",
+                    },
+                ]
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        message = event.interfaces["logentry"]
+        assert (
+            message.formatted
+            == "ReferenceError: Cannot define property 'foo': object is not extensible"
+        )
+
+        exception = event.interfaces["exception"]
+        assert exception.values[0].value == "Too many files"
+        assert (
+            exception.values[1].value
+            == "foo: an unexpected failure occurred while trying to obtain metadata information"
+        )
+
+    @responses.activate
+    def test_sourcemap_source_expansion(self):
+        responses.add(
+            responses.GET,
+            "http://example.com/file.min.js",
+            body=load_fixture("file.min.js"),
+            content_type="application/javascript; charset=utf-8",
+        )
+        responses.add(
+            responses.GET,
+            "http://example.com/file1.js",
+            body=load_fixture("file1.js"),
+            content_type="application/javascript; charset=utf-8",
+        )
+        responses.add(
+            responses.GET,
+            "http://example.com/file2.js",
+            body=load_fixture("file2.js"),
+            content_type="application/javascript; charset=utf-8",
+        )
+        responses.add(
+            responses.GET,
+            "http://example.com/file.sourcemap.js",
+            body=load_fixture("file.sourcemap.js"),
+            content_type="application/javascript; charset=utf-8",
+        )
+        responses.add(responses.GET, "http://example.com/index.html", body="Not Found", status=404)
+
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "abs_path": "http://example.com/file.min.js",
+                                    "filename": "file.min.js",
+                                    "lineno": 1,
+                                    "colno": 39,
+                                },
+                                # NOTE: Intentionally source is not retrieved from this HTML file
+                                {
+                                    "function": 'function: "HTMLDocument.<anonymous>"',
+                                    "abs_path": "http//example.com/index.html",
+                                    "filename": "index.html",
+                                    "lineno": 283,
+                                    "colno": 17,
+                                    "in_app": False,
+                                },
+                            ]
+                        },
+                    }
+                ]
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        assert event.data["errors"] == [
+            {"type": "js_no_source", "url": "http//example.com/index.html"}
+        ]
+
+        exception = event.interfaces["exception"]
+        frame_list = exception.values[0].stacktrace.frames
+
+        frame = frame_list[0]
+        assert frame.pre_context == ["function add(a, b) {", '\t"use strict";']
+        expected = u"\treturn a + b; // fôo"
+        assert frame.context_line == expected
+        assert frame.post_context == ["}", ""]
+
+        raw_frame_list = exception.values[0].raw_stacktrace.frames
+        raw_frame = raw_frame_list[0]
+        assert not raw_frame.pre_context
+        assert (
+            raw_frame.context_line
+            == 'function add(a,b){"use strict";return a+b}function multiply(a,b){"use strict";return a*b}function '
+            'divide(a,b){"use strict";try{return multip {snip}'
+        )
+        assert raw_frame.post_context == ["//@ sourceMappingURL=file.sourcemap.js", ""]
+        assert raw_frame.lineno == 1
+
+        # Since we couldn't expand source for the 2nd frame, both
+        # its raw and original form should be identical
+        assert raw_frame_list[1] == frame_list[1]
+
+    @responses.activate
+    def test_sourcemap_embedded_source_expansion(self):
+        responses.add(
+            responses.GET,
+            "http://example.com/embedded.js",
+            body=load_fixture("embedded.js"),
+            content_type="application/javascript; charset=utf-8",
+        )
+        responses.add(
+            responses.GET,
+            "http://example.com/embedded.js.map",
+            body=load_fixture("embedded.js.map"),
+            content_type="application/json; charset=utf-8",
+        )
+        responses.add(responses.GET, "http://example.com/index.html", body="Not Found", status=404)
+
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "abs_path": "http://example.com/embedded.js",
+                                    "filename": "file.min.js",
+                                    "lineno": 1,
+                                    "colno": 39,
+                                },
+                                # NOTE: Intentionally source is not retrieved from this HTML file
+                                {
+                                    "function": 'function: "HTMLDocument.<anonymous>"',
+                                    "abs_path": "http//example.com/index.html",
+                                    "filename": "index.html",
+                                    "lineno": 283,
+                                    "colno": 17,
+                                    "in_app": False,
+                                },
+                            ]
+                        },
+                    }
+                ]
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        assert event.data["errors"] == [
+            {"type": "js_no_source", "url": "http//example.com/index.html"}
+        ]
+
+        exception = event.interfaces["exception"]
+        frame_list = exception.values[0].stacktrace.frames
+
+        frame = frame_list[0]
+        assert frame.pre_context == ["function add(a, b) {", '\t"use strict";']
+        expected = u"\treturn a + b; // fôo"
+        assert frame.context_line == expected
+        assert frame.post_context == ["}", ""]
+
+    @responses.activate
+    def test_sourcemap_nofiles_source_expansion(self):
+        project = self.project
+        release = Release.objects.create(organization_id=project.organization_id, version="abc")
+        release.add_project(project)
+
+        f_minified = File.objects.create(
+            name="nofiles.js", type="release.file", headers={"Content-Type": "application/json"}
+        )
+        f_minified.putfile(open(get_fixture_path("nofiles.js"), "rb"))
+        ReleaseFile.objects.create(
+            name=u"~/{}".format(f_minified.name),
+            release=release,
+            organization_id=project.organization_id,
+            file=f_minified,
+        )
+
+        f_sourcemap = File.objects.create(
+            name="nofiles.js.map", type="release.file", headers={"Content-Type": "application/json"}
+        )
+        f_sourcemap.putfile(open(get_fixture_path("nofiles.js.map"), "rb"))
+        ReleaseFile.objects.create(
+            name=u"app:///{}".format(f_sourcemap.name),
+            release=release,
+            organization_id=project.organization_id,
+            file=f_sourcemap,
+        )
+
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "release": "abc",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            "frames": [{"abs_path": "app:///nofiles.js", "lineno": 1, "colno": 39}]
+                        },
+                    }
+                ]
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        assert "errors" not in event.data
+
+        exception = event.interfaces["exception"]
+        frame_list = exception.values[0].stacktrace.frames
+
+        assert len(frame_list) == 1
+        frame = frame_list[0]
+        assert frame.pre_context == ["function multiply(a, b) {", '\t"use strict";']
+        assert frame.context_line == u"\treturn a * b;"
+        assert frame.post_context == [
+            "}",
+            "function divide(a, b) {",
+            '\t"use strict";',
+            "\ttry {",
+            "\t\treturn multiply(add(a, b), a, b) / c;",
+        ]
+
+    @responses.activate
+    def test_indexed_sourcemap_source_expansion(self):
+        responses.add(
+            responses.GET,
+            "http://example.com/indexed.min.js",
+            body=load_fixture("indexed.min.js"),
+            content_type="application/javascript; charset=utf-8",
+        )
+        responses.add(
+            responses.GET,
+            "http://example.com/file1.js",
+            body=load_fixture("file1.js"),
+            content_type="application/javascript; charset=utf-8",
+        )
+        responses.add(
+            responses.GET,
+            "http://example.com/file2.js",
+            body=load_fixture("file2.js"),
+            content_type="application/javascript; charset=utf-8",
+        )
+        responses.add(
+            responses.GET,
+            "http://example.com/indexed.sourcemap.js",
+            body=load_fixture("indexed.sourcemap.js"),
+            content_type="application/json; charset=utf-8",
+        )
+
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "abs_path": "http://example.com/indexed.min.js",
+                                    "filename": "indexed.min.js",
+                                    "lineno": 1,
+                                    "colno": 39,
+                                },
+                                {
+                                    "abs_path": "http://example.com/indexed.min.js",
+                                    "filename": "indexed.min.js",
+                                    "lineno": 2,
+                                    "colno": 44,
+                                },
+                            ]
+                        },
+                    }
+                ]
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        assert "errors" not in event.data
+
+        exception = event.interfaces["exception"]
+        frame_list = exception.values[0].stacktrace.frames
+
+        frame = frame_list[0]
+        assert frame.pre_context == ["function add(a, b) {", '\t"use strict";']
+
+        expected = u"\treturn a + b; // fôo"
+        assert frame.context_line == expected
+        assert frame.post_context == ["}", ""]
+
+        raw_frame_list = exception.values[0].raw_stacktrace.frames
+        raw_frame = raw_frame_list[0]
+        assert not raw_frame.pre_context
+        assert raw_frame.context_line == 'function add(a,b){"use strict";return a+b}'
+        assert raw_frame.post_context == [
+            'function multiply(a,b){"use strict";return a*b}function divide(a,b){"use strict";try{return multiply('
+            "add(a,b),a,b)/c}catch(e){Raven.captureE {snip}",
+            "//# sourceMappingURL=indexed.sourcemap.js",
+            "",
+        ]
+        assert raw_frame.lineno == 1
+
+        frame = frame_list[1]
+        assert frame.pre_context == ["function multiply(a, b) {", '\t"use strict";']
+        assert frame.context_line == "\treturn a * b;"
+        assert frame.post_context == [
+            "}",
+            "function divide(a, b) {",
+            '\t"use strict";',
+            "\ttry {",
+            "\t\treturn multiply(add(a, b), a, b) / c;",
+        ]
+
+        raw_frame = raw_frame_list[1]
+        assert raw_frame.pre_context == ['function add(a,b){"use strict";return a+b}']
+        assert (
+            raw_frame.context_line
+            == 'function multiply(a,b){"use strict";return a*b}function divide(a,b){"use strict";try{return multiply('
+            "add(a,b),a,b)/c}catch(e){Raven.captureE {snip}"
+        )
+        assert raw_frame.post_context == ["//# sourceMappingURL=indexed.sourcemap.js", ""]
+        assert raw_frame.lineno == 2
+
+    @responses.activate
+    def test_expansion_via_release_artifacts(self):
+        project = self.project
+        release = Release.objects.create(organization_id=project.organization_id, version="abc")
+        release.add_project(project)
+
+        # file.min.js
+        # ------------
+
+        f_minified = File.objects.create(
+            name="file.min.js", type="release.file", headers={"Content-Type": "application/json"}
+        )
+        f_minified.putfile(open(get_fixture_path("file.min.js"), "rb"))
+
+        # Intentionally omit hostname - use alternate artifact path lookup instead
+        # /file1.js vs http://example.com/file1.js
+        ReleaseFile.objects.create(
+            name=u"~/{}?foo=bar".format(f_minified.name),
+            release=release,
+            organization_id=project.organization_id,
+            file=f_minified,
+        )
+
+        # file1.js
+        # ---------
+
+        f1 = File.objects.create(
+            name="file1.js", type="release.file", headers={"Content-Type": "application/json"}
+        )
+        f1.putfile(open(get_fixture_path("file1.js"), "rb"))
+
+        ReleaseFile.objects.create(
+            name=u"http://example.com/{}".format(f1.name),
+            release=release,
+            organization_id=project.organization_id,
+            file=f1,
+        )
+
+        # file2.js
+        # ----------
+
+        f2 = File.objects.create(
+            name="file2.js", type="release.file", headers={"Content-Type": "application/json"}
+        )
+        f2.putfile(open(get_fixture_path("file2.js"), "rb"))
+        ReleaseFile.objects.create(
+            name=u"http://example.com/{}".format(f2.name),
+            release=release,
+            organization_id=project.organization_id,
+            file=f2,
+        )
+
+        # To verify that the full url has priority over the relative url,
+        # we will also add a second ReleaseFile alias for file2.js (f3) w/o
+        # hostname that points to an empty file. If the processor chooses
+        # this empty file over the correct file2.js, it will not locate
+        # context for the 2nd frame.
+        f2_empty = File.objects.create(
+            name="empty.js", type="release.file", headers={"Content-Type": "application/json"}
+        )
+        f2_empty.putfile(open(get_fixture_path("empty.js"), "rb"))
+        ReleaseFile.objects.create(
+            name=u"~/{}".format(f2.name),  # intentionally using f2.name ("file2.js")
+            release=release,
+            organization_id=project.organization_id,
+            file=f2_empty,
+        )
+
+        # sourcemap
+        # ----------
+
+        f_sourcemap = File.objects.create(
+            name="file.sourcemap.js",
+            type="release.file",
+            headers={"Content-Type": "application/json"},
+        )
+        f_sourcemap.putfile(open(get_fixture_path("file.sourcemap.js"), "rb"))
+        ReleaseFile.objects.create(
+            name=u"http://example.com/{}".format(f_sourcemap.name),
+            release=release,
+            organization_id=project.organization_id,
+            file=f_sourcemap,
+        )
+
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "release": "abc",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "abs_path": "http://example.com/file.min.js?foo=bar",
+                                    "filename": "file.min.js",
+                                    "lineno": 1,
+                                    "colno": 39,
+                                },
+                                {
+                                    "abs_path": "http://example.com/file.min.js?foo=bar",
+                                    "filename": "file.min.js",
+                                    "lineno": 1,
+                                    "colno": 79,
+                                },
+                            ]
+                        },
+                    }
+                ]
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        assert "errors" not in event.data
+
+        exception = event.interfaces["exception"]
+        frame_list = exception.values[0].stacktrace.frames
+
+        frame = frame_list[0]
+        assert frame.pre_context == ["function add(a, b) {", '\t"use strict";']
+        assert frame.context_line == u"\treturn a + b; // fôo"
+        assert frame.post_context == ["}", ""]
+
+        frame = frame_list[1]
+        assert frame.pre_context == ["function multiply(a, b) {", '\t"use strict";']
+        assert frame.context_line == "\treturn a * b;"
+        assert frame.post_context == [
+            "}",
+            "function divide(a, b) {",
+            '\t"use strict";',
+            u"\ttry {",
+            "\t\treturn multiply(add(a, b), a, b) / c;",
+        ]
+
+    @responses.activate
+    def test_expansion_via_distribution_release_artifacts(self):
+        project = self.project
+        release = Release.objects.create(organization_id=project.organization_id, version="abc")
+        release.add_project(project)
+        dist = release.add_dist("foo")
+
+        # file.min.js
+        # ------------
+
+        f_minified = File.objects.create(
+            name="file.min.js", type="release.file", headers={"Content-Type": "application/json"}
+        )
+        f_minified.putfile(open(get_fixture_path("file.min.js"), "rb"))
+
+        # Intentionally omit hostname - use alternate artifact path lookup instead
+        # /file1.js vs http://example.com/file1.js
+        ReleaseFile.objects.create(
+            name=u"~/{}?foo=bar".format(f_minified.name),
+            release=release,
+            dist=dist,
+            organization_id=project.organization_id,
+            file=f_minified,
+        )
+
+        # file1.js
+        # ---------
+
+        f1 = File.objects.create(
+            name="file1.js", type="release.file", headers={"Content-Type": "application/json"}
+        )
+        f1.putfile(open(get_fixture_path("file1.js"), "rb"))
+
+        ReleaseFile.objects.create(
+            name=u"http://example.com/{}".format(f1.name),
+            release=release,
+            dist=dist,
+            organization_id=project.organization_id,
+            file=f1,
+        )
+
+        # file2.js
+        # ----------
+
+        f2 = File.objects.create(
+            name="file2.js", type="release.file", headers={"Content-Type": "application/json"}
+        )
+        f2.putfile(open(get_fixture_path("file2.js"), "rb"))
+        ReleaseFile.objects.create(
+            name=u"http://example.com/{}".format(f2.name),
+            release=release,
+            dist=dist,
+            organization_id=project.organization_id,
+            file=f2,
+        )
+
+        # To verify that the full url has priority over the relative url,
+        # we will also add a second ReleaseFile alias for file2.js (f3) w/o
+        # hostname that points to an empty file. If the processor chooses
+        # this empty file over the correct file2.js, it will not locate
+        # context for the 2nd frame.
+        f2_empty = File.objects.create(
+            name="empty.js", type="release.file", headers={"Content-Type": "application/json"}
+        )
+        f2_empty.putfile(open(get_fixture_path("empty.js"), "rb"))
+        ReleaseFile.objects.create(
+            name=u"~/{}".format(f2.name),  # intentionally using f2.name ("file2.js")
+            release=release,
+            dist=dist,
+            organization_id=project.organization_id,
+            file=f2_empty,
+        )
+
+        # sourcemap
+        # ----------
+
+        f_sourcemap = File.objects.create(
+            name="file.sourcemap.js",
+            type="release.file",
+            headers={"Content-Type": "application/json"},
+        )
+        f_sourcemap.putfile(open(get_fixture_path("file.sourcemap.js"), "rb"))
+        ReleaseFile.objects.create(
+            name=u"http://example.com/{}".format(f_sourcemap.name),
+            release=release,
+            dist=dist,
+            organization_id=project.organization_id,
+            file=f_sourcemap,
+        )
+
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "release": "abc",
+            "dist": "foo",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "abs_path": "http://example.com/file.min.js?foo=bar",
+                                    "filename": "file.min.js",
+                                    "lineno": 1,
+                                    "colno": 39,
+                                },
+                                {
+                                    "abs_path": "http://example.com/file.min.js?foo=bar",
+                                    "filename": "file.min.js",
+                                    "lineno": 1,
+                                    "colno": 79,
+                                },
+                            ]
+                        },
+                    }
+                ]
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        assert "errors" not in event.data
+
+        exception = event.interfaces["exception"]
+        frame_list = exception.values[0].stacktrace.frames
+
+        frame = frame_list[0]
+        assert frame.pre_context == ["function add(a, b) {", '\t"use strict";']
+        assert frame.context_line == u"\treturn a + b; // fôo"
+        assert frame.post_context == ["}", ""]
+
+        frame = frame_list[1]
+        assert frame.pre_context == ["function multiply(a, b) {", '\t"use strict";']
+        assert frame.context_line == "\treturn a * b;"
+        assert frame.post_context == [
+            "}",
+            "function divide(a, b) {",
+            '\t"use strict";',
+            u"\ttry {",
+            "\t\treturn multiply(add(a, b), a, b) / c;",
+        ]
+
+    @responses.activate
+    def test_sourcemap_expansion_with_missing_source(self):
+        """
+        Tests a successful sourcemap expansion that points to source files
+        that are not found.
+        """
+        responses.add(
+            responses.GET,
+            "http://example.com/file.min.js",
+            body=load_fixture("file.min.js"),
+            content_type="application/javascript; charset=utf-8",
+        )
+        responses.add(
+            responses.GET,
+            "http://example.com/file.sourcemap.js",
+            body=load_fixture("file.sourcemap.js"),
+            content_type="application/json; charset=utf-8",
+        )
+        responses.add(responses.GET, "http://example.com/file1.js", body="Not Found", status=404)
+
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            # Add two frames.  We only want to see the
+                            # error once though.
+                            "frames": [
+                                {
+                                    "abs_path": "http://example.com/file.min.js",
+                                    "filename": "file.min.js",
+                                    "lineno": 1,
+                                    "colno": 39,
+                                },
+                                {
+                                    "abs_path": "http://example.com/file.min.js",
+                                    "filename": "file.min.js",
+                                    "lineno": 1,
+                                    "colno": 39,
+                                },
+                            ]
+                        },
+                    }
+                ]
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        assert event.data["errors"] == [
+            {"url": u"http://example.com/file1.js", "type": "fetch_invalid_http_code", "value": 404}
+        ]
+
+        exception = event.interfaces["exception"]
+        frame_list = exception.values[0].stacktrace.frames
+
+        frame = frame_list[0]
+
+        # no context information ...
+        assert not frame.pre_context
+        assert not frame.context_line
+        assert not frame.post_context
+
+        # ... but line, column numbers are still correctly mapped
+        assert frame.lineno == 3
+        assert frame.colno == 9
+
+    @responses.activate
+    def test_failed_sourcemap_expansion(self):
+        """
+        Tests attempting to parse an indexed source map where each section has a "url"
+        property - this is unsupported and should fail.
+        """
+        responses.add(
+            responses.GET,
+            "http://example.com/unsupported.min.js",
+            body=load_fixture("unsupported.min.js"),
+            content_type="application/javascript; charset=utf-8",
+        )
+
+        responses.add(
+            responses.GET,
+            "http://example.com/unsupported.sourcemap.js",
+            body=load_fixture("unsupported.sourcemap.js"),
+            content_type="application/json; charset=utf-8",
+        )
+
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "abs_path": "http://example.com/unsupported.min.js",
+                                    "filename": "indexed.min.js",
+                                    "lineno": 1,
+                                    "colno": 39,
+                                }
+                            ]
+                        },
+                    }
+                ]
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        assert event.data["errors"] == [
+            {"url": u"http://example.com/unsupported.sourcemap.js", "type": "js_invalid_source"}
+        ]
+
+    def test_failed_sourcemap_expansion_data_url(self):
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "abs_path": "data:application/javascript,base46,asfasf",
+                                    "filename": "indexed.min.js",
+                                    "lineno": 1,
+                                    "colno": 39,
+                                }
+                            ]
+                        },
+                    }
+                ]
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        assert event.data["errors"] == [{"url": u"<data url>", "type": "js_no_source"}]
+
+    @responses.activate
+    def test_failed_sourcemap_expansion_missing_location_entirely(self):
+        responses.add(
+            responses.GET,
+            "http://example.com/indexed.min.js",
+            body="//# sourceMappingURL=indexed.sourcemap.js",
+        )
+        responses.add(responses.GET, "http://example.com/indexed.sourcemap.js", body="{}")
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "abs_path": "http://example.com/indexed.min.js",
+                                    "filename": "indexed.min.js",
+                                    "lineno": 1,
+                                    "colno": 1,
+                                },
+                                {
+                                    "abs_path": "http://example.com/indexed.min.js",
+                                    "filename": "indexed.min.js",
+                                },
+                            ]
+                        },
+                    }
+                ]
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        assert "errors" not in event.data
+
+    @responses.activate
+    def test_html_response_for_js(self):
+        responses.add(
+            responses.GET,
+            "http://example.com/file1.js",
+            body="       <!DOCTYPE html><html><head></head><body></body></html>",
+        )
+        responses.add(
+            responses.GET,
+            "http://example.com/file2.js",
+            body="<!doctype html><html><head></head><body></body></html>",
+        )
+        responses.add(
+            responses.GET,
+            "http://example.com/file.html",
+            body=(
+                "<!doctype html><html><head></head><body><script>/*legit case*/</script></body></html>"
+            ),
+        )
+
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "abs_path": "http://example.com/file1.js",
+                                    "filename": "file.min.js",
+                                    "lineno": 1,
+                                    "colno": 39,
+                                },
+                                {
+                                    "abs_path": "http://example.com/file2.js",
+                                    "filename": "file.min.js",
+                                    "lineno": 1,
+                                    "colno": 39,
+                                },
+                                {
+                                    "abs_path": "http://example.com/file.html",
+                                    "filename": "file.html",
+                                    "lineno": 1,
+                                    "colno": 1,
+                                },
+                            ]
+                        },
+                    }
+                ]
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        assert event.data["errors"] == [
+            {"url": u"http://example.com/file1.js", "type": "js_invalid_content"},
+            {"url": u"http://example.com/file2.js", "type": "js_invalid_content"},
+        ]
+
+    def test_node_processing(self):
+        project = self.project
+        release = Release.objects.create(
+            organization_id=project.organization_id, version="nodeabc123"
+        )
+        release.add_project(project)
+
+        f_minified = File.objects.create(
+            name="dist.bundle.js",
+            type="release.file",
+            headers={"Content-Type": "application/javascript"},
+        )
+        f_minified.putfile(open(get_fixture_path("dist.bundle.js"), "rb"))
+        ReleaseFile.objects.create(
+            name=u"~/{}".format(f_minified.name),
+            release=release,
+            organization_id=project.organization_id,
+            file=f_minified,
+        )
+
+        f_sourcemap = File.objects.create(
+            name="dist.bundle.js.map",
+            type="release.file",
+            headers={"Content-Type": "application/javascript"},
+        )
+        f_sourcemap.putfile(open(get_fixture_path("dist.bundle.js.map"), "rb"))
+        ReleaseFile.objects.create(
+            name=u"~/{}".format(f_sourcemap.name),
+            release=release,
+            organization_id=project.organization_id,
+            file=f_sourcemap,
+        )
+
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "node",
+            "release": "nodeabc123",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "filename": "app:///dist.bundle.js",
+                                    "function": "bar",
+                                    "lineno": 9,
+                                    "colno": 2321,
+                                },
+                                {
+                                    "filename": "app:///dist.bundle.js",
+                                    "function": "foo",
+                                    "lineno": 3,
+                                    "colno": 2308,
+                                },
+                                {
+                                    "filename": "app:///dist.bundle.js",
+                                    "function": "App",
+                                    "lineno": 3,
+                                    "colno": 1011,
+                                },
+                                {
+                                    "filename": "app:///dist.bundle.js",
+                                    "function": "Object.<anonymous>",
+                                    "lineno": 1,
+                                    "colno": 1014,
+                                },
+                                {
+                                    "filename": "app:///dist.bundle.js",
+                                    "function": "__webpack_require__",
+                                    "lineno": 20,
+                                    "colno": 30,
+                                },
+                                {
+                                    "filename": "app:///dist.bundle.js",
+                                    "function": "<unknown>",
+                                    "lineno": 18,
+                                    "colno": 63,
+                                },
+                            ]
+                        },
+                    }
+                ]
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        exception = event.interfaces["exception"]
+        frame_list = exception.values[0].stacktrace.frames
+
+        assert len(frame_list) == 6
+
+        import pprint
+
+        pprint.pprint(frame_list[0].__dict__)
+        pprint.pprint(frame_list[1].__dict__)
+        pprint.pprint(frame_list[2].__dict__)
+        pprint.pprint(frame_list[3].__dict__)
+        pprint.pprint(frame_list[4].__dict__)
+        pprint.pprint(frame_list[5].__dict__)
+
+        assert frame_list[0].abs_path == "webpack:///webpack/bootstrap d9a5a31d9276b73873d3"
+        assert frame_list[0].function == "bar"
+        assert frame_list[0].lineno == 8
+
+        assert frame_list[1].abs_path == "webpack:///webpack/bootstrap d9a5a31d9276b73873d3"
+        assert frame_list[1].function == "foo"
+        assert frame_list[1].lineno == 2
+
+        assert frame_list[2].abs_path == "webpack:///webpack/bootstrap d9a5a31d9276b73873d3"
+        assert frame_list[2].function == "App"
+        assert frame_list[2].lineno == 2
+
+        assert frame_list[3].abs_path == "app:///dist.bundle.js"
+        assert frame_list[3].function == "Object.<anonymous>"
+        assert frame_list[3].lineno == 1
+
+        assert frame_list[4].abs_path == "webpack:///webpack/bootstrap d9a5a31d9276b73873d3"
+        assert frame_list[4].function == "__webpack_require__"
+        assert frame_list[4].lineno == 19
+
+        assert frame_list[5].abs_path == "webpack:///webpack/bootstrap d9a5a31d9276b73873d3"
+        assert frame_list[5].function == "<unknown>"
+        assert frame_list[5].lineno == 16
+
+    @responses.activate
+    def test_no_fetch_from_http(self):
+        responses.add(
+            responses.GET,
+            "http://example.com/node_app.min.js",
+            body=load_fixture("node_app.min.js"),
+            content_type="application/javascript; charset=utf-8",
+        )
+        responses.add(
+            responses.GET,
+            "http://example.com/node_app.min.js.map",
+            body=load_fixture("node_app.min.js.map"),
+            content_type="application/javascript; charset=utf-8",
+        )
+
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "node",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "abs_path": "node_bootstrap.js",
+                                    "filename": "node_bootstrap.js",
+                                    "lineno": 1,
+                                    "colno": 38,
+                                },
+                                {
+                                    "abs_path": "timers.js",
+                                    "filename": "timers.js",
+                                    "lineno": 1,
+                                    "colno": 39,
+                                },
+                                {
+                                    "abs_path": "webpack:///internal",
+                                    "filename": "internal",
+                                    "lineno": 1,
+                                    "colno": 43,
+                                },
+                                {
+                                    "abs_path": "webpack:///~/some_dep/file.js",
+                                    "filename": "file.js",
+                                    "lineno": 1,
+                                    "colno": 41,
+                                },
+                                {
+                                    "abs_path": "webpack:///./node_modules/file.js",
+                                    "filename": "file.js",
+                                    "lineno": 1,
+                                    "colno": 42,
+                                },
+                                {
+                                    "abs_path": "http://example.com/node_app.min.js",
+                                    "filename": "node_app.min.js",
+                                    "lineno": 1,
+                                    "colno": 40,
+                                },
+                            ]
+                        },
+                    }
+                ]
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        exception = event.interfaces["exception"]
+        frame_list = exception.values[0].stacktrace.frames
+
+        # This one should not process, so this one should be none.
+        assert exception.values[0].raw_stacktrace is None
+
+        # None of the in app should update
+        for x in range(6):
+            assert not frame_list[x].in_app
+
+    @responses.activate
+    def test_html_file_with_query_param_ending_with_js_extension(self):
+        responses.add(
+            responses.GET,
+            "http://example.com/file.html",
+            body=(
+                "<!doctype html><html><head></head><body><script>/*legit case*/</script></body></html>"
+            ),
+        )
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "abs_path": "http://example.com/file.html?sw=iddqd1337.js",
+                                    "filename": "file.html",
+                                    "lineno": 1,
+                                    "colno": 1,
+                                },
+                            ]
+                        },
+                    }
+                ]
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        assert "errors" not in event.data
diff --git a/tests/relay_integration/test_message_filters.py b/tests/relay_integration/test_message_filters.py
index fce50e4fea..2c091f97b2 100644
--- a/tests/relay_integration/test_message_filters.py
+++ b/tests/relay_integration/test_message_filters.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import, print_function
 
-from django.test import override_settings
 
 from sentry.testutils import TransactionTestCase, RelayStoreHelper
 from sentry.models.projectoption import ProjectOption
@@ -13,17 +12,13 @@ from sentry.message_filters import (
 )
 
 
-@override_settings(ALLOWED_HOSTS=["localhost", "testserver", "host.docker.internal"])
 class FilterTests(RelayStoreHelper, TransactionTestCase):
-    def setUp(self):  # NOQA
-        RelayStoreHelper.setUp(self)
-
     def _get_message(self):
         return {}
 
     def _set_filter_state(self, flt, state):
         ProjectOption.objects.set_value(
-            project=self.project, key=u"filters:{}".format(flt.spec.id), value=state
+            project=self.project, key=u"filters:{}".format(flt.id), value=state
         )
 
     def test_should_not_filter_simple_messages(self):
diff --git a/tests/sentry/api/endpoints/snapshots/ProjectFiltersTest/test_get.pysnap b/tests/sentry/api/endpoints/snapshots/ProjectFiltersTest/test_get.pysnap
new file mode 100644
index 0000000000..7d87f6acb1
--- /dev/null
+++ b/tests/sentry/api/endpoints/snapshots/ProjectFiltersTest/test_get.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2020-07-09T11:33:30.140674Z'
+creator: sentry
+source: tests/sentry/api/endpoints/test_project_filters.py
+---
+- active: false
+  description: Certain browser extensions will inject inline scripts and are known
+    to cause errors.
+  hello: browser-extensions - Filter out errors known to be caused by browser extensions
+  id: browser-extensions
+  name: Filter out errors known to be caused by browser extensions
+- active: false
+  description: This applies to both IPv4 (``127.0.0.1``) and IPv6 (``::1``) addresses.
+  hello: localhost - Filter out events coming from localhost
+  id: localhost
+  name: Filter out events coming from localhost
+- active: false
+  description: Older browsers often give less accurate information, and while they
+    may report valid issues, the context to understand them is incorrect or missing.
+  hello: legacy-browsers - Filter out known errors from legacy browsers
+  id: legacy-browsers
+  name: Filter out known errors from legacy browsers
+- active: false
+  description: Some crawlers may execute pages in incompatible ways which then cause
+    errors that are unlikely to be seen by a normal user.
+  hello: web-crawlers - Filter out known web crawlers
+  id: web-crawlers
+  name: Filter out known web crawlers
diff --git a/tests/sentry/api/endpoints/test_project_filter_details.py b/tests/sentry/api/endpoints/test_project_filter_details.py
new file mode 100644
index 0000000000..fb45a9f2d5
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_filter_details.py
@@ -0,0 +1,18 @@
+from __future__ import absolute_import
+
+from sentry.testutils import APITestCase
+
+
+class ProjectFilterDetailsTest(APITestCase):
+    def test_put(self):
+        self.login_as(user=self.user)
+        org = self.create_organization(name="baz", slug="1", owner=self.user)
+        team = self.create_team(organization=org, name="foo", slug="foo")
+        project = self.create_project(name="Bar", slug="bar", teams=[team])
+        url = "/api/0/projects/%s/%s/filters/browser-extensions/" % (org.slug, project.slug)
+
+        project.update_option("filters:browser-extensions", "0")
+        response = self.client.put(url, format="json", data={"active": True})
+        assert response.status_code == 201
+
+        assert project.get_option("filters:browser-extensions") == "1"
diff --git a/tests/sentry/api/endpoints/test_project_filters.py b/tests/sentry/api/endpoints/test_project_filters.py
new file mode 100644
index 0000000000..91d06c634b
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_filters.py
@@ -0,0 +1,18 @@
+from __future__ import absolute_import
+
+from sentry.testutils import APITestCase
+
+
+class ProjectFiltersTest(APITestCase):
+    def test_get(self):
+        self.login_as(user=self.user)
+        org = self.create_organization(name="baz", slug="1", owner=self.user)
+        team = self.create_team(organization=org, name="foo", slug="foo")
+        project = self.create_project(name="Bar", slug="bar", teams=[team])
+        url = "/api/0/projects/%s/%s/filters/" % (org.slug, project.slug)
+
+        project.update_option("filters:browser-extension", "0")
+        response = self.client.get(url)
+        assert response.status_code == 200
+
+        self.insta_snapshot(response.data)
diff --git a/tests/sentry/coreapi/test_auth_from_request.py b/tests/sentry/coreapi/test_auth_from_request.py
deleted file mode 100644
index 6eb6a03f8f..0000000000
--- a/tests/sentry/coreapi/test_auth_from_request.py
+++ /dev/null
@@ -1,89 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.utils.compat import mock
-import pytest
-
-from django.core.exceptions import SuspiciousOperation
-
-from sentry.coreapi import ClientAuthHelper, APIUnauthorized
-
-
-def test_valid():
-    helper = ClientAuthHelper()
-    request = mock.Mock()
-    request.META = {"HTTP_X_SENTRY_AUTH": "Sentry sentry_key=value, biz=baz"}
-    request.GET = {}
-    result = helper.auth_from_request(request)
-    assert result.public_key == "value"
-
-
-def test_valid_missing_space():
-    helper = ClientAuthHelper()
-    request = mock.Mock()
-    request.META = {"HTTP_X_SENTRY_AUTH": "Sentry sentry_key=value,biz=baz"}
-    request.GET = {}
-    result = helper.auth_from_request(request)
-    assert result.public_key == "value"
-
-
-def test_valid_ignore_case():
-    helper = ClientAuthHelper()
-    request = mock.Mock()
-    request.META = {"HTTP_X_SENTRY_AUTH": "SeNtRy sentry_key=value, biz=baz"}
-    request.GET = {}
-    result = helper.auth_from_request(request)
-    assert result.public_key == "value"
-
-
-def test_invalid_header_defers_to_GET():
-    helper = ClientAuthHelper()
-    request = mock.Mock()
-    request.META = {"HTTP_X_SENTRY_AUTH": "foobar"}
-    request.GET = {"sentry_version": "1", "foo": "bar"}
-    result = helper.auth_from_request(request)
-    assert result.version == "1"
-
-
-def test_invalid_legacy_header_defers_to_GET():
-    helper = ClientAuthHelper()
-    request = mock.Mock()
-    request.META = {"HTTP_AUTHORIZATION": "foobar"}
-    request.GET = {"sentry_version": "1", "foo": "bar"}
-    result = helper.auth_from_request(request)
-    assert result.version == "1"
-
-
-def test_invalid_header_bad_token():
-    helper = ClientAuthHelper()
-    request = mock.Mock()
-    request.META = {"HTTP_X_SENTRY_AUTH": "Sentryfoo"}
-    request.GET = {}
-    with pytest.raises(APIUnauthorized):
-        helper.auth_from_request(request)
-
-
-def test_invalid_header_missing_pair():
-    helper = ClientAuthHelper()
-    request = mock.Mock()
-    request.META = {"HTTP_X_SENTRY_AUTH": "Sentry foo"}
-    request.GET = {}
-    with pytest.raises(APIUnauthorized):
-        helper.auth_from_request(request)
-
-
-def test_invalid_malformed_value():
-    helper = ClientAuthHelper()
-    request = mock.Mock()
-    request.META = {"HTTP_X_SENTRY_AUTH": "Sentry sentry_key=value,,biz=baz"}
-    request.GET = {}
-    with pytest.raises(APIUnauthorized):
-        helper.auth_from_request(request)
-
-
-def test_multiple_auth_suspicious():
-    helper = ClientAuthHelper()
-    request = mock.Mock()
-    request.GET = {"sentry_version": "1", "foo": "bar"}
-    request.META = {"HTTP_X_SENTRY_AUTH": "Sentry sentry_key=value, biz=baz"}
-    with pytest.raises(SuspiciousOperation):
-        helper.auth_from_request(request)
diff --git a/tests/sentry/coreapi/test_coreapi.py b/tests/sentry/coreapi/test_coreapi.py
index 7c70931b87..c5d1e3455a 100644
--- a/tests/sentry/coreapi/test_coreapi.py
+++ b/tests/sentry/coreapi/test_coreapi.py
@@ -2,83 +2,9 @@
 
 from __future__ import absolute_import
 
-import six
 import pytest
 
-from sentry.coreapi import (
-    APIError,
-    APIUnauthorized,
-    Auth,
-    ClientApiHelper,
-    ClientAuthHelper,
-    decode_data,
-    safely_load_json_string,
-)
 from sentry.interfaces.base import get_interface
-from sentry.testutils import TestCase
-
-
-class BaseAPITest(TestCase):
-    auth_helper_cls = ClientAuthHelper
-
-    def setUp(self):
-        self.user = self.create_user("coreapi@example.com")
-        self.team = self.create_team(name="Foo")
-        self.project = self.create_project(teams=[self.team])
-        self.pk = self.project.key_set.get_or_create()[0]
-        self.helper = ClientApiHelper(agent="Awesome Browser", ip_address="198.51.100.0")
-
-
-class ProjectIdFromAuthTest(BaseAPITest):
-    def test_invalid_if_missing_key(self):
-        with pytest.raises(APIUnauthorized):
-            self.helper.project_id_from_auth(Auth())
-
-    def test_valid_with_key(self):
-        auth = Auth(public_key=self.pk.public_key)
-        result = self.helper.project_id_from_auth(auth)
-        assert result == self.project.id
-
-    def test_invalid_key(self):
-        auth = Auth(public_key="z")
-        with pytest.raises(APIUnauthorized):
-            self.helper.project_id_from_auth(auth)
-
-    def test_invalid_secret(self):
-        auth = Auth(public_key=self.pk.public_key, secret_key="z")
-        with pytest.raises(APIUnauthorized):
-            self.helper.project_id_from_auth(auth)
-
-    def test_nonascii_key(self):
-        auth = Auth(public_key="\xc3\xbc")
-        with pytest.raises(APIUnauthorized):
-            self.helper.project_id_from_auth(auth)
-
-
-def test_safely_load_json_string_valid_payload():
-    data = safely_load_json_string('{"foo": "bar"}')
-    assert data == {"foo": "bar"}
-
-
-def test_safely_load_json_string_invalid_json():
-    with pytest.raises(APIError):
-        safely_load_json_string("{")
-
-
-def test_safely_load_json_string_unexpected_type():
-    with pytest.raises(APIError):
-        safely_load_json_string("1")
-
-
-def test_valid_data():
-    data = decode_data("foo")
-    assert data == u"foo"
-    assert isinstance(data, six.text_type)
-
-
-def test_invalid_data():
-    with pytest.raises(APIError):
-        decode_data("\x99")
 
 
 def test_get_interface_does_not_let_through_disallowed_name():
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_basic.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_basic.pysnap
index e3e6ff9926..1844e89952 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_basic.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_basic.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.009400Z'
+created: '2020-07-09T12:04:06.532890Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_csp.py
 ---
@@ -7,11 +7,6 @@ culprit: style-src cdn.example.com
 errors: null
 message: Blocked 'style' from 'example.com'
 origin: http://example.com
-tags:
-- - effective-directive
-  - style-src
-- - blocked-uri
-  - http://example.com/lol.css
 to_json:
   blocked_uri: http://example.com/lol.css
   document_uri: http://example.com
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_coerce_blocked_uri_if_missing.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_coerce_blocked_uri_if_missing.pysnap
index b17be20753..7bf034f336 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_coerce_blocked_uri_if_missing.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_coerce_blocked_uri_if_missing.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.019309Z'
+created: '2020-07-09T12:04:06.579143Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_csp.py
 ---
@@ -7,11 +7,6 @@ culprit: ''
 errors: null
 message: Blocked unsafe (eval() or inline) 'script'
 origin: http://example.com
-tags:
-- - effective-directive
-  - script-src
-- - blocked-uri
-  - self
 to_json:
   blocked_uri: self
   document_uri: http://example.com
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input0.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input0.pysnap
index ed0ed4cd4e..f0c69c9373 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input0.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input0.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.029494Z'
+created: '2020-07-09T12:04:06.589402Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_csp.py
 ---
@@ -7,11 +7,6 @@ culprit: style-src http://cdn.example.com
 errors: null
 message: Blocked inline 'style'
 origin: http://example.com/foo
-tags:
-- - effective-directive
-  - style-src
-- - blocked-uri
-  - self
 to_json:
   blocked_uri: self
   document_uri: http://example.com/foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input1.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input1.pysnap
index 75a3120443..77313776c7 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input1.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input1.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.038719Z'
+created: '2020-07-09T12:04:06.600198Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_csp.py
 ---
@@ -7,11 +7,6 @@ culprit: style-src cdn.example.com
 errors: null
 message: Blocked inline 'style'
 origin: http://example.com/foo
-tags:
-- - effective-directive
-  - style-src
-- - blocked-uri
-  - self
 to_json:
   blocked_uri: self
   document_uri: http://example.com/foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input2.pysnap
index 014c9d6824..b90f90967e 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input2.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input2.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.047322Z'
+created: '2020-07-09T12:04:06.611156Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_csp.py
 ---
@@ -7,11 +7,6 @@ culprit: style-src cdn.example.com
 errors: null
 message: Blocked inline 'style'
 origin: https://example.com/foo
-tags:
-- - effective-directive
-  - style-src
-- - blocked-uri
-  - self
 to_json:
   blocked_uri: self
   document_uri: https://example.com/foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input3.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input3.pysnap
index 449f3eaf61..2d4e532b76 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input3.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input3.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.056386Z'
+created: '2020-07-09T12:04:06.622719Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_csp.py
 ---
@@ -7,11 +7,6 @@ culprit: style-src https://cdn.example.com
 errors: null
 message: Blocked inline 'style'
 origin: http://example.com/foo
-tags:
-- - effective-directive
-  - style-src
-- - blocked-uri
-  - self
 to_json:
   blocked_uri: self
   document_uri: http://example.com/foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input4.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input4.pysnap
index 087ea538c4..b4e81e401a 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input4.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input4.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.065298Z'
+created: '2020-07-09T12:04:06.633624Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_csp.py
 ---
@@ -7,11 +7,6 @@ culprit: style-src 'self'
 errors: null
 message: Blocked inline 'style'
 origin: http://example.com/foo
-tags:
-- - effective-directive
-  - style-src
-- - blocked-uri
-  - self
 to_json:
   blocked_uri: self
   document_uri: http://example.com/foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input5.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input5.pysnap
index 5b10eeadb1..8c7509fc55 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input5.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input5.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.074362Z'
+created: '2020-07-09T12:04:06.645283Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_csp.py
 ---
@@ -7,11 +7,6 @@ culprit: style-src http://example2.com 'self'
 errors: null
 message: Blocked inline 'style'
 origin: http://example.com/foo
-tags:
-- - effective-directive
-  - style-src
-- - blocked-uri
-  - self
 to_json:
   blocked_uri: self
   document_uri: http://example.com/foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input0.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input0.pysnap
index effcdcddc3..eb43694191 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input0.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input0.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.093184Z'
+created: '2020-07-09T12:04:06.670316Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_csp.py
 ---
@@ -7,11 +7,6 @@ culprit: ''
 errors: null
 message: Blocked 'image' from 'google.com'
 origin: http://example.com/foo
-tags:
-- - effective-directive
-  - img-src
-- - blocked-uri
-  - http://google.com/foo
 to_json:
   blocked_uri: http://google.com/foo
   document_uri: http://example.com/foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input1.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input1.pysnap
index be5c97fa67..ca6ee68cb9 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input1.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input1.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.103422Z'
+created: '2020-07-09T12:04:06.682795Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_csp.py
 ---
@@ -7,11 +7,6 @@ culprit: ''
 errors: null
 message: Blocked inline 'style'
 origin: http://example.com/foo
-tags:
-- - effective-directive
-  - style-src
-- - blocked-uri
-  - ''
 to_json:
   blocked_uri: ''
   document_uri: http://example.com/foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input2.pysnap
index 3933d3a357..df5ad9f7a1 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input2.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input2.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.114199Z'
+created: '2020-07-09T12:04:06.695090Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_csp.py
 ---
@@ -7,11 +7,6 @@ culprit: script-src 'unsafe-inline'
 errors: null
 message: Blocked unsafe inline 'script'
 origin: http://example.com/foo
-tags:
-- - effective-directive
-  - script-src
-- - blocked-uri
-  - ''
 to_json:
   blocked_uri: ''
   document_uri: http://example.com/foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input3.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input3.pysnap
index 7caedf79c3..dd1311ff3d 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input3.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input3.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.123989Z'
+created: '2020-07-09T12:04:06.707508Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_csp.py
 ---
@@ -7,11 +7,6 @@ culprit: script-src 'unsafe-eval'
 errors: null
 message: Blocked unsafe eval() 'script'
 origin: http://example.com/foo
-tags:
-- - effective-directive
-  - script-src
-- - blocked-uri
-  - ''
 to_json:
   blocked_uri: ''
   document_uri: http://example.com/foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input4.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input4.pysnap
index 8abe81e75f..b0b6cde444 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input4.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input4.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.134010Z'
+created: '2020-07-09T12:04:06.719064Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_csp.py
 ---
@@ -7,11 +7,6 @@ culprit: script-src 'self'
 errors: null
 message: Blocked unsafe (eval() or inline) 'script'
 origin: http://example.com/foo
-tags:
-- - effective-directive
-  - script-src
-- - blocked-uri
-  - ''
 to_json:
   blocked_uri: ''
   document_uri: http://example.com/foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input5.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input5.pysnap
index 39069d9932..4d88b71d55 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input5.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input5.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.143868Z'
+created: '2020-07-09T12:04:06.730817Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_csp.py
 ---
@@ -7,11 +7,6 @@ culprit: ''
 errors: null
 message: Blocked 'script' from 'data:'
 origin: http://example.com/foo
-tags:
-- - effective-directive
-  - script-src
-- - blocked-uri
-  - data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D
 to_json:
   blocked_uri: data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D
   document_uri: http://example.com/foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input6.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input6.pysnap
index e2e000b18b..aaf22b67fd 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input6.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input6.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.153681Z'
+created: '2020-07-09T12:04:06.742336Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_csp.py
 ---
@@ -7,11 +7,6 @@ culprit: ''
 errors: null
 message: Blocked 'script' from 'data:'
 origin: http://example.com/foo
-tags:
-- - effective-directive
-  - script-src
-- - blocked-uri
-  - data
 to_json:
   blocked_uri: data
   document_uri: http://example.com/foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input7.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input7.pysnap
index b630f06833..59af5909b9 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input7.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input7.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.163697Z'
+created: '2020-07-09T12:04:06.754430Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_csp.py
 ---
@@ -7,11 +7,6 @@ culprit: ''
 errors: null
 message: Blocked 'style' from 'fonts.google.com'
 origin: http://example.com/foo
-tags:
-- - effective-directive
-  - style-src-elem
-- - blocked-uri
-  - http://fonts.google.com/foo
 to_json:
   blocked_uri: http://fonts.google.com/foo
   document_uri: http://example.com/foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input8.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input8.pysnap
index 775c35ec3f..83eafa2262 100644
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input8.pysnap
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input8.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:35.174624Z'
+created: '2020-07-09T12:04:06.768118Z'
 creator: sentry
 source: tests/sentry/event_manager/interfaces/test_csp.py
 ---
@@ -7,11 +7,6 @@ culprit: ''
 errors: null
 message: Blocked 'script' from 'cdn.ajaxapis.com'
 origin: http://example.com/foo
-tags:
-- - effective-directive
-  - script-src-elem
-- - blocked-uri
-  - http://cdn.ajaxapis.com/foo
 to_json:
   blocked_uri: http://cdn.ajaxapis.com/foo
   document_uri: http://example.com/foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_tags_stripe.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_tags_stripe.pysnap
deleted file mode 100644
index 163f6d3a5e..0000000000
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_tags_stripe.pysnap
+++ /dev/null
@@ -1,19 +0,0 @@
----
-created: '2019-03-14T17:12:35.082701Z'
-creator: sentry
-source: tests/sentry/event_manager/interfaces/test_csp.py
----
-culprit: ''
-errors: null
-message: Blocked 'script' from 'api.stripe.com'
-origin: https://example.com
-tags:
-- - effective-directive
-  - script-src
-- - blocked-uri
-  - https://api.stripe.com/v1/tokens
-to_json:
-  blocked_uri: https://api.stripe.com/v1/tokens?card[number]=xxx
-  document_uri: https://example.com
-  effective_directive: script-src
-  violated_directive: ''
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_real_report.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_real_report.pysnap
deleted file mode 100644
index 576bdd437f..0000000000
--- a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_real_report.pysnap
+++ /dev/null
@@ -1,35 +0,0 @@
----
-created: '2019-04-24T00:06:58.468199Z'
-creator: sentry
-source: tests/sentry/event_manager/interfaces/test_csp.py
----
-culprit: script-src
-errors: null
-message: Blocked 'script' from 'baddomain.com'
-origin: https://sentry.io/sentry/csp/issues/88513416/
-tags:
-- - effective-directive
-  - script-src
-- - blocked-uri
-  - http://baddomain.com/test.js?_=1515535030116
-to_json:
-  blocked_uri: http://baddomain.com/test.js?_=1515535030116
-  column_number: 66270
-  disposition: enforce
-  document_uri: https://sentry.io/sentry/csp/issues/88513416/
-  effective_directive: script-src
-  line_number: 24
-  original_policy: 'default-src *; script-src ''make_csp_snapshot'' ''unsafe-eval''
-    ''unsafe-inline'' e90d271df3e973c7.global.ssl.fastly.net cdn.ravenjs.com assets.zendesk.com
-    ajax.googleapis.com ssl.google-analytics.com www.googleadservices.com analytics.twitter.com
-    platform.twitter.com *.pingdom.net js.stripe.com api.stripe.com statuspage-production.s3.amazonaws.com
-    s3.amazonaws.com *.google.com www.gstatic.com aui-cdn.atlassian.com *.atlassian.net
-    *.jira.com *.zopim.com; font-src * data:; connect-src * wss://*.zopim.com; style-src
-    ''make_csp_snapshot'' ''unsafe-inline'' e90d271df3e973c7.global.ssl.fastly.net
-    s3.amazonaws.com aui-cdn.atlassian.com fonts.googleapis.com; img-src * data: blob:;
-    report-uri https://sentry.io/api/54785/csp-report/?sentry_key=f724a8a027db45f5b21507e7142ff78e&sentry_release=39662eb9734f68e56b7f202260bb706be2f4cee7'
-  referrer: https://sentry.io/sentry/sentry/releases/7329107476ff14cfa19cf013acd8ce47781bb93a/
-  script_sample: ''
-  source_file: https://e90d271df3e973c7.global.ssl.fastly.net/_static/f0c7c026a4b2a3d2b287ae2d012c9924/sentry/dist/vendor.js
-  status_code: 0
-  violated_directive: script-src
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_expectct/test_from_raw.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_expectct/test_from_raw.pysnap
deleted file mode 100644
index dc5aeb27c9..0000000000
--- a/tests/sentry/event_manager/interfaces/snapshots/test_expectct/test_from_raw.pysnap
+++ /dev/null
@@ -1,24 +0,0 @@
----
-created: '2019-03-14T17:12:35.467202Z'
-creator: sentry
-source: tests/sentry/event_manager/interfaces/test_expectct.py
----
-errors: null
-to_json:
-  date_time: '2014-04-06T13:00:50Z'
-  effective_expiration_date: '2014-05-01T12:40:50Z'
-  hostname: www.example.com
-  port: 443
-  scts:
-  - serialized_sct: ABCD==
-    source: embedded
-    status: invalid
-    version: 1
-  served_certificate_chain:
-  - '-----BEGIN CERTIFICATE-----
-
-    -----END CERTIFICATE-----'
-  validated_certificate_chain:
-  - '-----BEGIN CERTIFICATE-----
-
-    -----END CERTIFICATE-----'
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_expectstaple/test_from_raw.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_expectstaple/test_from_raw.pysnap
deleted file mode 100644
index ad6bdd6e77..0000000000
--- a/tests/sentry/event_manager/interfaces/snapshots/test_expectstaple/test_from_raw.pysnap
+++ /dev/null
@@ -1,21 +0,0 @@
----
-created: '2019-03-14T17:12:35.509918Z'
-creator: sentry
-source: tests/sentry/event_manager/interfaces/test_expectstaple.py
----
-errors: null
-to_json:
-  cert_status: REVOKED
-  date_time: '2014-04-06T13:00:50Z'
-  effective_expiration_date: '2014-05-01T12:40:50Z'
-  hostname: www.example.com
-  port: 443
-  response_status: ERROR_RESPONSE
-  served_certificate_chain:
-  - '-----BEGIN CERTIFICATE-----
-
-    -----END CERTIFICATE-----'
-  validated_certificate_chain:
-  - '-----BEGIN CERTIFICATE-----
-
-    -----END CERTIFICATE-----'
diff --git a/tests/sentry/event_manager/interfaces/test_csp.py b/tests/sentry/event_manager/interfaces/test_csp.py
index 58bf28ddf1..169b61217d 100644
--- a/tests/sentry/event_manager/interfaces/test_csp.py
+++ b/tests/sentry/event_manager/interfaces/test_csp.py
@@ -5,7 +5,6 @@ from __future__ import absolute_import
 import pytest
 
 from sentry import eventstore
-from sentry.interfaces.security import Csp
 from sentry.event_manager import EventManager
 
 
@@ -24,7 +23,6 @@ def make_csp_snapshot(insta_snapshot):
                 "message": interface and interface.get_message(),
                 "culprit": interface and interface.get_culprit(),
                 "origin": interface and interface.get_origin(),
-                "tags": interface and interface.get_tags(),
             }
         )
 
@@ -85,16 +83,6 @@ def test_get_culprit(make_csp_snapshot, input):
     make_csp_snapshot(input)
 
 
-def test_get_tags_stripe(make_csp_snapshot):
-    make_csp_snapshot(
-        dict(
-            document_uri="https://example.com",
-            blocked_uri="https://api.stripe.com/v1/tokens?card[number]=xxx",
-            effective_directive="script-src",
-        )
-    )
-
-
 @pytest.mark.parametrize(
     "input",
     [
@@ -148,24 +136,3 @@ def test_get_tags_stripe(make_csp_snapshot):
 )
 def test_get_message(make_csp_snapshot, input):
     make_csp_snapshot(input)
-
-
-def test_real_report(make_csp_snapshot):
-    raw_report = {
-        "csp-report": {
-            "document-uri": "https://sentry.io/sentry/csp/issues/88513416/",
-            "referrer": "https://sentry.io/sentry/sentry/releases/7329107476ff14cfa19cf013acd8ce47781bb93a/",
-            "violated-directive": "script-src",
-            "effective-directive": "script-src",
-            "original-policy": "default-src *; script-src 'make_csp_snapshot' 'unsafe-eval' 'unsafe-inline' e90d271df3e973c7.global.ssl.fastly.net cdn.ravenjs.com assets.zendesk.com ajax.googleapis.com ssl.google-analytics.com www.googleadservices.com analytics.twitter.com platform.twitter.com *.pingdom.net js.stripe.com api.stripe.com statuspage-production.s3.amazonaws.com s3.amazonaws.com *.google.com www.gstatic.com aui-cdn.atlassian.com *.atlassian.net *.jira.com *.zopim.com; font-src * data:; connect-src * wss://*.zopim.com; style-src 'make_csp_snapshot' 'unsafe-inline' e90d271df3e973c7.global.ssl.fastly.net s3.amazonaws.com aui-cdn.atlassian.com fonts.googleapis.com; img-src * data: blob:; report-uri https://sentry.io/api/54785/csp-report/?sentry_key=f724a8a027db45f5b21507e7142ff78e&sentry_release=39662eb9734f68e56b7f202260bb706be2f4cee7",
-            "disposition": "enforce",
-            "blocked-uri": "http://baddomain.com/test.js?_=1515535030116",
-            "line-number": 24,
-            "column-number": 66270,
-            "source-file": "https://e90d271df3e973c7.global.ssl.fastly.net/_static/f0c7c026a4b2a3d2b287ae2d012c9924/sentry/dist/vendor.js",
-            "status-code": 0,
-            "script-sample": "",
-        }
-    }
-    interface = Csp.from_raw(raw_report)
-    make_csp_snapshot(interface.to_json())
diff --git a/tests/sentry/event_manager/interfaces/test_expectct.py b/tests/sentry/event_manager/interfaces/test_expectct.py
index c3b27f5d29..54b8b99078 100644
--- a/tests/sentry/event_manager/interfaces/test_expectct.py
+++ b/tests/sentry/event_manager/interfaces/test_expectct.py
@@ -5,7 +5,6 @@ from __future__ import absolute_import
 import pytest
 
 from sentry import eventstore
-from sentry.interfaces.security import ExpectCT
 from sentry.event_manager import EventManager
 
 
@@ -25,19 +24,6 @@ def make_expectct_snapshot(insta_snapshot):
     return inner
 
 
-raw_report = {
-    "expect-ct-report": {
-        "date-time": "2014-04-06T13:00:50Z",
-        "hostname": "www.example.com",
-        "port": 443,
-        "effective-expiration-date": "2014-05-01T12:40:50Z",
-        "served-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
-        "validated-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
-        "scts": [
-            {"version": 1, "status": "invalid", "source": "embedded", "serialized_sct": "ABCD=="}
-        ],
-    }
-}
 interface_json = {
     "date_time": "2014-04-06T13:00:50Z",
     "hostname": "www.example.com",
@@ -49,10 +35,6 @@ interface_json = {
 }
 
 
-def test_from_raw(make_expectct_snapshot):
-    make_expectct_snapshot(ExpectCT.from_raw(raw_report).to_json())
-
-
 def test_basic(make_expectct_snapshot):
     make_expectct_snapshot(interface_json)
 
diff --git a/tests/sentry/event_manager/interfaces/test_expectstaple.py b/tests/sentry/event_manager/interfaces/test_expectstaple.py
index 54f1fbdd66..ad3b717f42 100644
--- a/tests/sentry/event_manager/interfaces/test_expectstaple.py
+++ b/tests/sentry/event_manager/interfaces/test_expectstaple.py
@@ -5,7 +5,6 @@ from __future__ import absolute_import
 import pytest
 
 from sentry import eventstore
-from sentry.interfaces.security import ExpectStaple
 from sentry.event_manager import EventManager
 
 
@@ -25,18 +24,6 @@ def make_csp_snapshot(insta_snapshot):
     return inner
 
 
-raw_report = {
-    "expect-staple-report": {
-        "date-time": "2014-04-06T13:00:50Z",
-        "hostname": "www.example.com",
-        "port": 443,
-        "response-status": "ERROR_RESPONSE",
-        "cert-status": "REVOKED",
-        "effective-expiration-date": "2014-05-01T12:40:50Z",
-        "served-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
-        "validated-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
-    }
-}
 interface_json = {
     "date_time": "2014-04-06T13:00:50Z",
     "hostname": "www.example.com",
@@ -51,7 +38,3 @@ interface_json = {
 
 def test_basic(make_csp_snapshot):
     make_csp_snapshot(interface_json)
-
-
-def test_from_raw(make_csp_snapshot):
-    make_csp_snapshot(ExpectStaple.from_raw(raw_report).to_json())
diff --git a/tests/sentry/event_manager/test_event_manager.py b/tests/sentry/event_manager/test_event_manager.py
index b9b3256dea..3fe1b5fd9b 100644
--- a/tests/sentry/event_manager/test_event_manager.py
+++ b/tests/sentry/event_manager/test_event_manager.py
@@ -7,7 +7,6 @@ from sentry.utils.compat import mock
 import pytest
 import uuid
 
-from collections import namedtuple
 from datetime import datetime, timedelta
 from django.utils import timezone
 from time import time
@@ -41,7 +40,6 @@ from sentry.utils.cache import cache_key_for_event
 from sentry.utils.outcomes import Outcome
 from sentry.testutils import assert_mock_called_once_with_partial, TestCase
 from sentry.utils.data_filters import FilterStatKeys
-from sentry.relay.config import get_project_config
 
 
 def make_event(**kwargs):
@@ -1201,42 +1199,6 @@ class EventManagerTest(TestCase):
         hashes = [gh.hash for gh in GroupHash.objects.filter(group=event.group)]
         assert sorted(hashes) == sorted([hash_from_values(checksum), checksum])
 
-    @mock.patch("sentry.event_manager.is_valid_error_message")
-    def test_should_filter_message(self, mock_is_valid_error_message):
-        TestItem = namedtuple("TestItem", "value formatted result")
-
-        items = [
-            TestItem({"type": "UnfilteredException"}, "UnfilteredException", True),
-            TestItem(
-                {"value": "This is an unfiltered exception."},
-                "This is an unfiltered exception.",
-                True,
-            ),
-            TestItem(
-                {"type": "UnfilteredException", "value": "This is an unfiltered exception."},
-                "UnfilteredException: This is an unfiltered exception.",
-                True,
-            ),
-            TestItem(
-                {"type": "FilteredException", "value": "This is a filtered exception."},
-                "FilteredException: This is a filtered exception.",
-                False,
-            ),
-        ]
-
-        data = {"exception": {"values": [item.value for item in items]}}
-
-        project_config = get_project_config(self.project)
-        manager = EventManager(data, project=self.project, project_config=project_config)
-
-        mock_is_valid_error_message.side_effect = [item.result for item in items]
-
-        assert manager.should_filter() == (True, FilterStatKeys.ERROR_MESSAGE)
-
-        assert mock_is_valid_error_message.call_args_list == [
-            mock.call(project_config, item.formatted) for item in items
-        ]
-
     def test_legacy_attributes_moved(self):
         event = make_event(
             release="my-release",
diff --git a/tests/sentry/event_manager/test_validate_csp.py b/tests/sentry/event_manager/test_validate_csp.py
deleted file mode 100644
index d637fe12e6..0000000000
--- a/tests/sentry/event_manager/test_validate_csp.py
+++ /dev/null
@@ -1,180 +0,0 @@
-from __future__ import absolute_import
-
-import pytest
-
-from sentry.coreapi import APIError
-from sentry.event_manager import EventManager
-from sentry.utils.compat import map
-
-
-def validate_and_normalize(report, client_ip="198.51.100.0", user_agent="Awesome Browser"):
-    manager = EventManager(report, client_ip=client_ip, user_agent=user_agent)
-    manager.process_csp_report()
-    manager.normalize()
-    return manager.get_data()
-
-
-def _build_test_report(effective_directive, violated_directive):
-    report = {
-        "release": "abc123",
-        "environment": "production",
-        "interface": "csp",
-        "report": {
-            "csp-report": {
-                "document-uri": "http://45.55.25.245:8123/csp",
-                "referrer": "http://example.com",
-                "violated-directive": violated_directive,
-                "effective-directive": effective_directive,
-                "original-policy": "default-src  https://45.55.25.245:8123/; child-src  https://45.55.25.245:8123/; connect-src  https://45.55.25.245:8123/; font-src  https://45.55.25.245:8123/; img-src  https://45.55.25.245:8123/; media-src  https://45.55.25.245:8123/; object-src  https://45.55.25.245:8123/; script-src  https://45.55.25.245:8123/; style-src  https://45.55.25.245:8123/; form-action  https://45.55.25.245:8123/; frame-ancestors 'none'; plugin-types 'none'; report-uri http://45.55.25.245:8123/csp-report?os=OS%20X&device=&browser_version=43.0&browser=chrome&os_version=Lion",
-                "blocked-uri": "http://google.com",
-                "status-code": 200,
-            }
-        },
-    }
-    if violated_directive is None:
-        del report["report"]["csp-report"]["violated-directive"]
-    if effective_directive is None:
-        del report["report"]["csp-report"]["effective-directive"]
-
-    return report
-
-
-@pytest.mark.parametrize(
-    "effective_directive,violated_directive,culprit_element",
-    (
-        ("img-src", "img-src https://45.55.25.245:8123/", "img-src"),
-        ("img-src", "default-src https://45.55.25.245:8123/", "default-src"),
-        # build a report without the effective-directive key
-        (None, "img-src https://45.55.25.245:8123/", "img-src"),
-    ),
-    ids=(
-        "directives match",
-        "prefer effective-directive",
-        "parse effective-directive from violated-directive",
-    ),
-)
-def test_csp_validate(effective_directive, violated_directive, culprit_element):
-    report = _build_test_report(effective_directive, violated_directive)
-    result = validate_and_normalize(report)
-    assert result["logger"] == "csp"
-    assert result["release"] == "abc123"
-    assert result["environment"] == "production"
-    assert "errors" not in result
-    assert "logentry" in result
-    assert result["culprit"] == culprit_element + " 'self'"
-    assert map(tuple, result["tags"]) == [
-        ("effective-directive", "img-src"),
-        ("blocked-uri", "http://google.com"),
-    ]
-    assert result["user"] == {"ip_address": "198.51.100.0"}
-    assert result["request"]["url"] == "http://45.55.25.245:8123/csp"
-    assert dict(result["request"]["headers"]) == {
-        "User-Agent": "Awesome Browser",
-        "Referer": "http://example.com",
-    }
-
-
-@pytest.mark.parametrize(
-    "report",
-    (
-        {},
-        {"release": "abc123", "interface": "csp", "report": {}},
-        _build_test_report(effective_directive=None, violated_directive=None),
-        _build_test_report(effective_directive=None, violated_directive=""),
-        _build_test_report(effective_directive=None, violated_directive="blink-src"),
-    ),
-    ids=(
-        "empty dict",
-        "no csp-report",
-        "no violated-directive to parse (expect KeyError)",
-        "unsplittable violated-directive (expect IndexError)",
-        "invalid violated-directive (not in schema enum)",
-    ),
-)
-def test_csp_validate_failure(report):
-    with pytest.raises(APIError):
-        validate_and_normalize(report)
-
-
-def test_csp_tags_out_of_bounds():
-    report = {
-        "release": "abc123",
-        "interface": "csp",
-        "report": {
-            "csp-report": {
-                "document-uri": "http://45.55.25.245:8123/csp",
-                "referrer": "http://example.com",
-                "violated-directive": "img-src https://45.55.25.245:8123/",
-                "effective-directive": "img-src",
-                "original-policy": "default-src  https://45.55.25.245:8123/; child-src  https://45.55.25.245:8123/; connect-src  https://45.55.25.245:8123/; font-src  https://45.55.25.245:8123/; img-src  https://45.55.25.245:8123/; media-src  https://45.55.25.245:8123/; object-src  https://45.55.25.245:8123/; script-src  https://45.55.25.245:8123/; style-src  https://45.55.25.245:8123/; form-action  https://45.55.25.245:8123/; frame-ancestors 'none'; plugin-types 'none'; report-uri http://45.55.25.245:8123/csp-report?os=OS%20X&device=&browser_version=43.0&browser=chrome&os_version=Lion",
-                "blocked-uri": "v" * 201,
-                "status-code": 200,
-            }
-        },
-    }
-    result = validate_and_normalize(report)
-    assert result["tags"] == [["effective-directive", "img-src"], None]
-    assert len(result["errors"]) == 1
-
-
-def test_csp_tag_value():
-    report = {
-        "release": "abc123",
-        "interface": "csp",
-        "report": {
-            "csp-report": {
-                "document-uri": "http://45.55.25.245:8123/csp",
-                "referrer": "http://example.com",
-                "violated-directive": "img-src https://45.55.25.245:8123/",
-                "effective-directive": "img-src",
-                "original-policy": "default-src  https://45.55.25.245:8123/; child-src  https://45.55.25.245:8123/; connect-src  https://45.55.25.245:8123/; font-src  https://45.55.25.245:8123/; img-src  https://45.55.25.245:8123/; media-src  https://45.55.25.245:8123/; object-src  https://45.55.25.245:8123/; script-src  https://45.55.25.245:8123/; style-src  https://45.55.25.245:8123/; form-action  https://45.55.25.245:8123/; frame-ancestors 'none'; plugin-types 'none'; report-uri http://45.55.25.245:8123/csp-report?os=OS%20X&device=&browser_version=43.0&browser=chrome&os_version=Lion",
-                "blocked-uri": "http://google.com",
-                "status-code": 200,
-            }
-        },
-    }
-    result = validate_and_normalize(report)
-    assert map(tuple, result["tags"]) == [
-        ("effective-directive", "img-src"),
-        ("blocked-uri", "http://google.com"),
-    ]
-    assert "errors" not in result
-
-
-def test_hpkp_validate_basic():
-    report = {
-        "release": "abc123",
-        "interface": "hpkp",
-        "report": {
-            "date-time": "2014-04-06T13:00:50Z",
-            "hostname": "www.example.com",
-            "port": 443,
-            "effective-expiration-date": "2014-05-01T12:40:50Z",
-            "include-subdomains": False,
-            "served-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
-            "validated-certificate-chain": [
-                "-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"
-            ],
-            "known-pins": ['pin-sha256="E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g="'],
-        },
-    }
-    result = validate_and_normalize(report)
-    assert result["release"] == "abc123"
-    assert "errors" not in result
-    assert "logentry" in result
-    assert not result.get("culprit")
-    assert sorted(map(tuple, result["tags"])) == [
-        ("hostname", "www.example.com"),
-        ("include-subdomains", "false"),
-        ("port", "443"),
-    ]
-    assert result["user"] == {"ip_address": "198.51.100.0"}
-    expected_headers = [["User-Agent", "Awesome Browser"]]
-
-    assert result["request"] == {"url": "www.example.com", "headers": expected_headers}
-
-
-def test_hpkp_validate_failure():
-    report = {"release": "abc123", "interface": "hpkp", "report": {}}
-    with pytest.raises(APIError):
-        validate_and_normalize(report)
diff --git a/tests/sentry/filters/test_browser_extensions.py b/tests/sentry/filters/test_browser_extensions.py
deleted file mode 100644
index 3fa8d77e50..0000000000
--- a/tests/sentry/filters/test_browser_extensions.py
+++ /dev/null
@@ -1,96 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.message_filters import _browser_extensions_filter
-from sentry.relay.config import ProjectConfig
-from sentry.testutils import TestCase
-
-
-class BrowserExtensionsFilterTest(TestCase):
-    def apply_filter(self, data):
-        project_config = ProjectConfig(self.project)
-        return _browser_extensions_filter(project_config, data)
-
-    def get_mock_data(self, exc_value=None, exc_source=None):
-        return {
-            "platform": "javascript",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "value": exc_value or "undefined is not defined",
-                        "stacktrace": {
-                            "frames": [
-                                {"abs_path": "http://example.com/foo.js"},
-                                {"abs_path": exc_source or "http://example.com/bar.js"},
-                            ]
-                        },
-                    }
-                ]
-            },
-        }
-
-    def test_bails_without_javascript_event(self):
-        data = {"platform": "python"}
-        assert not self.apply_filter(data)
-
-    def test_filters_conduit_toolbar(self):
-        data = self.get_mock_data(exc_value="what does conduitPage even do")
-        assert self.apply_filter(data)
-
-    def test_filters_google_search_app_ios(self):
-        data = self.get_mock_data(exc_value="null is not an object (evaluating 'elt.parentNode')")
-        assert self.apply_filter(data)
-
-    def test_filters_kaspersky_extension(self):
-        data = self.get_mock_data(
-            exc_source=(
-                "https://ff.kis.v2.scr.kaspersky-labs.com/14E4A3DB-9B72-1047-8296-E970532BF7B7/main.js"
-            )
-        )
-        assert self.apply_filter(data)
-
-    def test_filters_dragon_web_extension(self):
-        data = self.get_mock_data(exc_value="plugin.setSuspendState is not a function")
-        assert self.apply_filter(data)
-
-    def test_filters_chrome_extensions(self):
-        data = self.get_mock_data(exc_source="chrome://my-extension/or/something")
-        assert self.apply_filter(data)
-
-    def test_filters_chrome_extensions_second_format(self):
-        data = self.get_mock_data(exc_source="chrome-extension://my-extension/or/something")
-        assert self.apply_filter(data)
-
-    def test_filters_firefox_extensions(self):
-        data = self.get_mock_data(exc_source="moz-extension://my-extension/or/something")
-        assert self.apply_filter(data)
-
-    def test_filters_safari_extensions(self):
-        data = self.get_mock_data(exc_source="safari-extension://my-extension/or/something")
-        assert self.apply_filter(data)
-
-    def test_does_not_filter_generic_data(self):
-        data = self.get_mock_data()
-        assert not self.apply_filter(data)
-
-    def test_filters_malformed_data(self):
-        data = self.get_mock_data()
-        data["exception"] = None
-        assert not self.apply_filter(data)
-
-    def test_filters_facebook_source(self):
-        data = self.get_mock_data(exc_source="https://graph.facebook.com/")
-        assert self.apply_filter(data)
-
-        data = self.get_mock_data(exc_source="https://connect.facebook.net/en_US/sdk.js")
-        assert self.apply_filter(data)
-
-    def test_filters_woopra_source(self):
-        data = self.get_mock_data(exc_source="https://static.woopra.com/js/woopra.js")
-        assert self.apply_filter(data)
-
-    def test_filters_itunes_source(self):
-        data = self.get_mock_data(
-            exc_source="http://metrics.itunes.apple.com.edgesuite.net/itunespreview/itunes/browser:firefo"
-        )
-        assert self.apply_filter(data)
diff --git a/tests/sentry/filters/test_legacy_browsers.py b/tests/sentry/filters/test_legacy_browsers.py
deleted file mode 100644
index 5d510624a4..0000000000
--- a/tests/sentry/filters/test_legacy_browsers.py
+++ /dev/null
@@ -1,391 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-
-from sentry.message_filters import _legacy_browsers_filter, get_filter_key  # noqa
-from sentry.models.projectoption import ProjectOption
-from sentry.models.auditlogentry import AuditLogEntry, AuditLogEntryEvent
-from sentry.testutils import APITestCase, TestCase
-from sentry.utils.canonical import CanonicalKeyView
-from sentry.relay.config import ProjectConfig, _filter_option_to_config_setting  # noqa
-
-USER_AGENTS = {
-    "android_2": "Mozilla/5.0 (Linux; U; Android 2.3.5; en-us; HTC Vision Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) "
-    "Version/4.0 Mobile Safari/533.1",
-    "android_4": "Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) "
-    "Chrome/18.0.1025.133 Mobile Safari/535.19",
-    "ie_5": "Mozilla/4.0 (compatible; MSIE 5.50; Windows NT; SiteKiosk 4.9; SiteCoach 1.0)",
-    "ie_8": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET "
-    "CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; MDDC; Tablet PC 2.0)",
-    "ie_9": "Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US))",
-    "iemobile_9": "Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; NOKIA; Lumia 710)",
-    "ie_10": "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 7.0; InfoPath.3; .NET CLR 3.1.40767; Trident/6.0; en-IN)",
-    "iemobile_10": "Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia "
-    "520)",
-    "opera_11": "Opera/9.80 (Windows NT 5.1; U; it) Presto/2.7.62 Version/11.00",
-    "opera_12": "Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16",
-    "opera_15": "Mozilla/5.0 (X11; Linux x86_64; Debian) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.52 "
-    "Safari/537.36 OPR/15.0.1147.100",
-    "chrome": "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36",
-    "edge": "Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 "
-    "Edge/12.10136",
-    "safari_5": "Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-HK) AppleWebKit/533.18.1 (KHTML, like Gecko) Version/5.0.2 "
-    "Safari/533.18.5",
-    "safari_7": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 "
-    "Safari/7046A194A",
-    "opera_mini_8": "Opera/9.80 (J2ME/MIDP; Opera Mini/8.0.35158/36.2534; U; en) Presto/2.12.423 Version/12.16",
-    "opera_mini_7": "Opera/9.80 (J2ME/MIDP; Opera Mini/7.0.32796/59.323; U; fr) Presto/2.12.423 Version/12.16",
-}
-
-
-class SetLegacyBrowserFilterTest(APITestCase):
-    def test_set_default_all_browsers(self):
-        self.login_as(user=self.user)
-        project = self.create_project()
-
-        url = reverse(
-            "sentry-api-0-project-filters",
-            kwargs={
-                "organization_slug": project.organization.slug,
-                "project_slug": project.slug,
-                "filter_id": "legacy-browsers",
-            },
-        )
-        response = self.client.put(url, data={"active": True})
-        assert response.status_code == 201, response.content
-
-        options = ProjectOption.objects.get_value(project=project, key="filters:legacy-browsers")
-        assert options == "1"
-
-    def test_set_default_no_browsers(self):
-        self.login_as(user=self.user)
-        project = self.create_project()
-
-        url = reverse(
-            "sentry-api-0-project-filters",
-            kwargs={
-                "organization_slug": project.organization.slug,
-                "project_slug": project.slug,
-                "filter_id": "legacy-browsers",
-            },
-        )
-        response = self.client.put(url, data={"active": False})
-        assert response.status_code == 201, response.content
-
-        options = ProjectOption.objects.get_value(project=project, key="filters:legacy-browsers")
-        assert options == "0"
-
-    def test_set_opera(self):
-        self.login_as(user=self.user)
-        project = self.create_project()
-
-        url = reverse(
-            "sentry-api-0-project-filters",
-            kwargs={
-                "organization_slug": project.organization.slug,
-                "project_slug": project.slug,
-                "filter_id": "legacy-browsers",
-            },
-        )
-        response = self.client.put(url, data={"subfilters": ["opera_pre_15"]})
-        assert response.status_code == 201, response.content
-
-        options = ProjectOption.objects.get_value(project=project, key="filters:legacy-browsers")
-        assert options == {"opera_pre_15"}
-
-        assert AuditLogEntry.objects.filter(
-            organization=project.organization, event=AuditLogEntryEvent.PROJECT_ENABLE
-        ).exists()
-
-    def test_set_opera_mini(self):
-        self.login_as(user=self.user)
-        project = self.create_project()
-
-        url = reverse(
-            "sentry-api-0-project-filters",
-            kwargs={
-                "organization_slug": project.organization.slug,
-                "project_slug": project.slug,
-                "filter_id": "legacy-browsers",
-            },
-        )
-        response = self.client.put(url, data={"subfilters": ["opera_mini_pre_8"]})
-        assert response.status_code == 201, response.content
-
-        options = ProjectOption.objects.get_value(project=project, key="filters:legacy-browsers")
-        assert options == {"opera_mini_pre_8"}
-
-        assert AuditLogEntry.objects.filter(
-            organization=project.organization, event=AuditLogEntryEvent.PROJECT_ENABLE
-        ).exists()
-
-    def test_set_ie9(self):
-        self.login_as(user=self.user)
-        project = self.create_project()
-
-        url = reverse(
-            "sentry-api-0-project-filters",
-            kwargs={
-                "organization_slug": project.organization.slug,
-                "project_slug": project.slug,
-                "filter_id": "legacy-browsers",
-            },
-        )
-        response = self.client.put(url, data={"subfilters": ["ie9"]})
-        assert response.status_code == 201, response.content
-
-        options = ProjectOption.objects.get_value(project=project, key="filters:legacy-browsers")
-        assert options == {"ie9"}
-
-        assert AuditLogEntry.objects.filter(
-            organization=project.organization, event=AuditLogEntryEvent.PROJECT_ENABLE
-        ).exists()
-
-    def test_set_ie8(self):
-        self.login_as(user=self.user)
-        project = self.create_project()
-
-        url = reverse(
-            "sentry-api-0-project-filters",
-            kwargs={
-                "organization_slug": project.organization.slug,
-                "project_slug": project.slug,
-                "filter_id": "legacy-browsers",
-            },
-        )
-        response = self.client.put(url, data={"subfilters": ["ie_pre_9"]})
-        assert response.status_code == 201, response.content
-
-        options = ProjectOption.objects.get_value(project=project, key="filters:legacy-browsers")
-        assert options == {"ie_pre_9"}
-
-        assert AuditLogEntry.objects.filter(
-            organization=project.organization, event=AuditLogEntryEvent.PROJECT_ENABLE
-        ).exists()
-
-    def test_set_android(self):
-        self.login_as(user=self.user)
-        project = self.create_project()
-
-        url = reverse(
-            "sentry-api-0-project-filters",
-            kwargs={
-                "organization_slug": project.organization.slug,
-                "project_slug": project.slug,
-                "filter_id": "legacy-browsers",
-            },
-        )
-        response = self.client.put(url, data={"subfilters": ["android_pre_4"]})
-        assert response.status_code == 201, response.content
-
-        options = ProjectOption.objects.get_value(project=project, key="filters:legacy-browsers")
-        assert options == {"android_pre_4"}
-
-        assert AuditLogEntry.objects.filter(
-            organization=project.organization, event=AuditLogEntryEvent.PROJECT_ENABLE
-        ).exists()
-
-    def test_set_safari(self):
-        self.login_as(user=self.user)
-        project = self.create_project()
-
-        url = reverse(
-            "sentry-api-0-project-filters",
-            kwargs={
-                "organization_slug": project.organization.slug,
-                "project_slug": project.slug,
-                "filter_id": "legacy-browsers",
-            },
-        )
-        response = self.client.put(url, data={"subfilters": ["safari_pre_6"]})
-        assert response.status_code == 201, response.content
-
-        options = ProjectOption.objects.get_value(project=project, key="filters:legacy-browsers")
-        assert options == {"safari_pre_6"}
-
-        assert AuditLogEntry.objects.filter(
-            organization=project.organization, event=AuditLogEntryEvent.PROJECT_ENABLE
-        ).exists()
-
-
-class LegacyBrowsersFilterTest(TestCase):
-    def apply_filter(self, project_config, data):
-        return _legacy_browsers_filter(project_config, CanonicalKeyView(data))
-
-    def get_mock_data(self, user_agent):
-        return {
-            "platform": "javascript",
-            "request": {
-                "url": "http://example.com",
-                "method": "GET",
-                "headers": [["User-Agent", user_agent]],
-            },
-        }
-
-    def _get_project_config(self, filter_opt=None):
-        """
-        Constructs a test project_config with the provided legacy_browsers filter setting
-        :param filter_opt: the value for 'filters:legacy-browsers' project options (may be None)
-        :return: a ProjectConfig object with the filter option set and the project taken from
-        the TestCase
-        """
-        ret_val = ProjectConfig(self.project, config={})
-        config = ret_val.config
-        filter_settings = {}
-        config["filterSettings"] = filter_settings
-        if filter_opt is not None:
-            key = get_filter_key(_legacy_browsers_filter)
-            filter_settings[key] = _filter_option_to_config_setting(
-                _legacy_browsers_filter, filter_opt
-            )
-        return ret_val
-
-    def test_filters_android_2_by_default(self):
-        project_config = self._get_project_config("1")
-        data = self.get_mock_data(USER_AGENTS["android_2"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_does_not_filter_android_4_by_default(self):
-        project_config = self._get_project_config("1")
-        data = self.get_mock_data(USER_AGENTS["android_4"])
-        assert self.apply_filter(project_config, data) is False
-
-    def test_filters_ie_9_by_default(self):
-        project_config = self._get_project_config("1")
-        data = self.get_mock_data(USER_AGENTS["ie_9"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_filters_iemobile_9_by_default(self):
-        project_config = self._get_project_config("1")
-        data = self.get_mock_data(USER_AGENTS["iemobile_9"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_does_not_filter_ie_10_by_default(self):
-        project_config = self._get_project_config("1")
-        data = self.get_mock_data(USER_AGENTS["ie_10"])
-        assert self.apply_filter(project_config, data) is False
-
-    def test_does_not_filter_iemobile_10_by_default(self):
-        project_config = self._get_project_config("1")
-        data = self.get_mock_data(USER_AGENTS["iemobile_10"])
-        assert self.apply_filter(project_config, data) is False
-
-    def test_filters_opera_12_by_default(self):
-        project_config = self._get_project_config("1")
-        data = self.get_mock_data(USER_AGENTS["opera_12"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_filters_opera_mini_7_by_default(self):
-        project_config = self._get_project_config("1")
-        data = self.get_mock_data(USER_AGENTS["opera_mini_7"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_does_not_filter_chrome_by_default(self):
-        project_config = self._get_project_config("1")
-        data = self.get_mock_data(USER_AGENTS["chrome"])
-        assert self.apply_filter(project_config, data) is False
-
-    def test_does_not_filter_edge_by_default(self):
-        project_config = self._get_project_config("1")
-        data = self.get_mock_data(USER_AGENTS["edge"])
-        assert self.apply_filter(project_config, data) is False
-
-    def test_filter_opera(self):
-        project_config = self._get_project_config(["opera_pre_15"])
-        data = self.get_mock_data(USER_AGENTS["opera_12"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_filter_opera_method(self):
-        project_config = self._get_project_config()
-        data = self.get_mock_data(USER_AGENTS["opera_12"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_dont_filter_opera_15(self):
-        project_config = self._get_project_config()
-        data = self.get_mock_data(USER_AGENTS["opera_15"])
-        assert self.apply_filter(project_config, data) is False
-
-    def test_filter_opera_mini(self):
-        project_config = self._get_project_config(["opera_mini_pre_8"])
-        data = self.get_mock_data(USER_AGENTS["opera_mini_7"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_filter_opera_mini_method(self):
-        project_config = self._get_project_config()
-        data = self.get_mock_data(USER_AGENTS["opera_mini_7"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_dont_filter_opera_mini_8(self):
-        project_config = self._get_project_config()
-        data = self.get_mock_data(USER_AGENTS["opera_mini_8"])
-        assert self.apply_filter(project_config, data) is False
-
-    def test_filters_ie8(self):
-        project_config = self._get_project_config(["ie_pre_9"])
-        data = self.get_mock_data(USER_AGENTS["ie_8"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_filters_ie8_method(self):
-        project_config = self._get_project_config()
-        data = self.get_mock_data(USER_AGENTS["ie_8"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_does_filter_ie9(self):
-        project_config = self._get_project_config(["ie9"])
-        data = self.get_mock_data(USER_AGENTS["ie_9"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_does_filter_iemobile_9(self):
-        project_config = self._get_project_config(["ie9"])
-        data = self.get_mock_data(USER_AGENTS["iemobile_9"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_does_filter_ie10(self):
-        project_config = self._get_project_config(["ie10"])
-        data = self.get_mock_data(USER_AGENTS["ie_10"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_does_not_filter_ie10(self):
-        project_config = self._get_project_config()
-        data = self.get_mock_data(USER_AGENTS["ie_10"])
-        assert self.apply_filter(project_config, data) is False
-
-    def test_does_filter_iemobile_10(self):
-        project_config = self._get_project_config(["ie10"])
-        data = self.get_mock_data(USER_AGENTS["iemobile_10"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_does_not_filter_iemobile_10(self):
-        project_config = self._get_project_config()
-        data = self.get_mock_data(USER_AGENTS["iemobile_10"])
-        assert self.apply_filter(project_config, data) is False
-
-    def test_filters_safari(self):
-        project_config = self._get_project_config(["safari_pre_6"])
-        data = self.get_mock_data(USER_AGENTS["safari_5"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_filters_safari_method(self):
-        project_config = self._get_project_config()
-        data = self.get_mock_data(USER_AGENTS["safari_5"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_method_does_not_filter_safari_7(self):
-        project_config = self._get_project_config()
-        data = self.get_mock_data(USER_AGENTS["safari_7"])
-        assert self.apply_filter(project_config, data) is False
-
-    def test_filters_android(self):
-        project_config = self._get_project_config(["android_pre_4"])
-        data = self.get_mock_data(USER_AGENTS["android_2"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_filters_android_method(self):
-        project_config = self._get_project_config()
-        data = self.get_mock_data(USER_AGENTS["android_2"])
-        assert self.apply_filter(project_config, data) is True
-
-    def test_method_does_not_filter_android_4(self):
-        project_config = self._get_project_config()
-        data = self.get_mock_data(USER_AGENTS["android_4"])
-        assert self.apply_filter(project_config, data) is False
diff --git a/tests/sentry/filters/test_localhost.py b/tests/sentry/filters/test_localhost.py
deleted file mode 100644
index 256cd66312..0000000000
--- a/tests/sentry/filters/test_localhost.py
+++ /dev/null
@@ -1,49 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.message_filters import _localhost_filter
-from sentry.relay.config import ProjectConfig
-from sentry.testutils import TestCase
-
-
-class LocalhostFilterTest(TestCase):
-    def apply_filter(self, data):
-        project_config = ProjectConfig(self.project)
-        return _localhost_filter(project_config, data)
-
-    def get_mock_data(self, client_ip=None, url=None):
-        return {"user": {"ip_address": client_ip}, "request": {"url": url}}
-
-    def test_filters_localhost_ipv4(self):
-        data = self.get_mock_data("127.0.0.1")
-        assert self.apply_filter(data)
-
-    def test_filters_localhost_ipv6(self):
-        data = self.get_mock_data("::1")
-        assert self.apply_filter(data)
-
-    def test_does_not_filter_external_ip(self):
-        data = self.get_mock_data("74.1.3.56")
-        assert not self.apply_filter(data)
-
-    def test_fails_gracefully_without_user(self):
-        assert not self.apply_filter({})
-
-    def test_filters_localhost_domain(self):
-        data = self.get_mock_data(url="http://localhost/something.html")
-        assert self.apply_filter(data)
-
-        data = self.get_mock_data(url="http://localhost:9000/")
-        assert self.apply_filter(data)
-
-        data = self.get_mock_data(url="https://localhost")
-        assert self.apply_filter(data)
-
-        data = self.get_mock_data(url="https://127.0.0.1")
-        assert self.apply_filter(data)
-
-    def test_does_not_filter_non_localhost_domain(self):
-        data = self.get_mock_data(url="https://getsentry.com/")
-        assert not self.apply_filter(data)
-
-        data = self.get_mock_data(url="http://example.com/index.html?domain=localhost")
-        assert not self.apply_filter(data)
diff --git a/tests/sentry/filters/test_web_crawlers.py b/tests/sentry/filters/test_web_crawlers.py
deleted file mode 100644
index 6e10f1ad52..0000000000
--- a/tests/sentry/filters/test_web_crawlers.py
+++ /dev/null
@@ -1,88 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.models.project import Project
-from unittest import TestCase
-
-from sentry.message_filters import _web_crawlers_filter
-from sentry.relay.config import ProjectConfig
-
-
-class WebCrawlersFilterTest(TestCase):
-    def apply_filter(self, data):
-        project = Project()
-        project_config = ProjectConfig(project)
-        return _web_crawlers_filter(project_config, data)
-
-    def get_mock_data(self, user_agent):
-        return {
-            "request": {
-                "url": "http://example.com",
-                "method": "GET",
-                "headers": [["User-Agent", user_agent]],
-            }
-        }
-
-    def test_filters_google_adsense(self):
-        data = self.get_mock_data("Mediapartners-Google")
-        assert self.apply_filter(data)
-
-    def test_filters_google_adsbot(self):
-        data = self.get_mock_data("AdsBot-Google (+http://www.google.com/adsbot.html)")
-        assert self.apply_filter(data)
-
-    def test_filters_google_bot(self):
-        data = self.get_mock_data(
-            "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"
-        )
-        assert self.apply_filter(data)
-
-    def test_filters_google_feedfetcher(self):
-        data = self.get_mock_data("FeedFetcher-Google; (+http://www.google.com/feedfetcher.html)")
-        assert self.apply_filter(data)
-
-    def test_does_not_filter_google_pubsub(self):
-        data = self.get_mock_data(
-            "APIs-Google (+https://developers.google.com/webmasters/APIs-Google.html)"
-        )
-        assert not self.apply_filter(data)
-
-    def test_does_not_filter_chrome(self):
-        data = self.get_mock_data(
-            "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36"
-        )
-        assert not self.apply_filter(data)
-
-    def test_filters_twitterbot(self):
-        data = self.get_mock_data("Twitterbot/1.0")
-        assert self.apply_filter(data)
-
-    def test_filters_slack(self):
-        data = self.get_mock_data("Slackbot-LinkExpanding 1.0 (+https://api.slack.com/robots)")
-        assert self.apply_filter(data)
-
-        data = self.get_mock_data("Slack-ImgProxy 0.19 (+https://api.slack.com/robots)")
-        assert self.apply_filter(data)
-
-        data = self.get_mock_data("Slackbot 1.0(+https://api.slack.com/robots)")
-        assert self.apply_filter(data)
-
-    def test_filters_calypso_appcrawler(self):
-        data = self.get_mock_data(
-            "Mozilla/5.0 (Linux; Android 6.0.1; Calypso AppCrawler Build/MMB30Y; wv) AppleWebKit/537.36 (KHTML, "
-            "like Gecko) Version/4.0 Chrome/53.0.2785.124 Mobile Safari/537.36"
-        )
-        assert self.apply_filter(data)
-
-    def test_filters_pingdom_bot(self):
-        data = self.get_mock_data(
-            "Mozilla/5.0 (Unknown; Linux x86_64) AppleWebKit/534.34 (KHTML, like Gecko) PingdomTMS/0.8.5 Safari/534.34"
-        )
-        assert self.apply_filter(data)
-
-    def test_filters_lytics_bot(self):
-        data = self.get_mock_data("lyticsbot-external")
-        assert self.apply_filter(data)
-
-    def test_filters_google_apis(self):
-        data = self.get_mock_data("APIs-Google")
-        assert not self.apply_filter(data)
diff --git a/tests/sentry/lang/java/test_plugin.py b/tests/sentry/lang/java/test_plugin.py
deleted file mode 100644
index 6b8b8569f9..0000000000
--- a/tests/sentry/lang/java/test_plugin.py
+++ /dev/null
@@ -1,326 +0,0 @@
-from __future__ import absolute_import
-
-import zipfile
-import pytest
-from six import BytesIO
-
-from django.core.urlresolvers import reverse
-from django.core.files.uploadedfile import SimpleUploadedFile
-
-from sentry.testutils import SentryStoreHelper, TestCase
-from sentry.testutils.helpers.datetime import before_now, iso_format
-
-PROGUARD_UUID = "6dc7fdb0-d2fb-4c8e-9d6b-bb1aa98929b1"
-PROGUARD_SOURCE = b"""\
-org.slf4j.helpers.Util$ClassContextSecurityManager -> org.a.b.g$a:
-    65:65:void <init>() -> <init>
-    67:67:java.lang.Class[] getClassContext() -> a
-    69:69:java.lang.Class[] getExtraClassContext() -> a
-    65:65:void <init>(org.slf4j.helpers.Util$1) -> <init>
-"""
-PROGUARD_INLINE_UUID = "d748e578-b3d1-5be5-b0e5-a42e8c9bf8e0"
-PROGUARD_INLINE_SOURCE = b"""\
-# compiler: R8
-# compiler_version: 2.0.74
-# min_api: 16
-# pg_map_id: 5b46fdc
-# common_typos_disable
-$r8$backportedMethods$utility$Objects$2$equals -> a:
-    boolean equals(java.lang.Object,java.lang.Object) -> a
-$r8$twr$utility -> b:
-    void $closeResource(java.lang.Throwable,java.lang.Object) -> a
-android.support.v4.app.RemoteActionCompatParcelizer -> android.support.v4.app.RemoteActionCompatParcelizer:
-    1:1:void <init>():11:11 -> <init>
-io.sentry.sample.-$$Lambda$r3Avcbztes2hicEObh02jjhQqd4 -> e.a.c.a:
-    io.sentry.sample.MainActivity f$0 -> b
-io.sentry.sample.MainActivity -> io.sentry.sample.MainActivity:
-    1:1:void <init>():15:15 -> <init>
-    1:1:boolean onCreateOptionsMenu(android.view.Menu):60:60 -> onCreateOptionsMenu
-    1:1:boolean onOptionsItemSelected(android.view.MenuItem):69:69 -> onOptionsItemSelected
-    2:2:boolean onOptionsItemSelected(android.view.MenuItem):76:76 -> onOptionsItemSelected
-    1:1:void bar():54:54 -> t
-    1:1:void foo():44 -> t
-    1:1:void onClickHandler(android.view.View):40 -> t
-"""
-PROGUARD_BUG_UUID = "071207ac-b491-4a74-957c-2c94fd9594f2"
-PROGUARD_BUG_SOURCE = b"x"
-
-
-class BasicResolvingIntegrationTest(object):
-    def post_and_retrieve_event(self, data):
-        raise NotImplementedError(
-            "post_and_retrieve_event should be implemented in a dervied test class"
-        )
-
-    def test_basic_resolving(self):
-        url = reverse(
-            "sentry-api-0-dsym-files",
-            kwargs={
-                "organization_slug": self.project.organization.slug,
-                "project_slug": self.project.slug,
-            },
-        )
-
-        self.login_as(user=self.user)
-
-        out = BytesIO()
-        f = zipfile.ZipFile(out, "w")
-        f.writestr("proguard/%s.txt" % PROGUARD_UUID, PROGUARD_SOURCE)
-        f.writestr("ignored-file.txt", b"This is just some stuff")
-        f.close()
-
-        response = self.client.post(
-            url,
-            {
-                "file": SimpleUploadedFile(
-                    "symbols.zip", out.getvalue(), content_type="application/zip"
-                )
-            },
-            format="multipart",
-        )
-        assert response.status_code == 201, response.content
-        assert len(response.data) == 1
-
-        event_data = {
-            "user": {"ip_address": "31.172.207.97"},
-            "extra": {},
-            "project": self.project.id,
-            "platform": "java",
-            "debug_meta": {"images": [{"type": "proguard", "uuid": PROGUARD_UUID}]},
-            "exception": {
-                "values": [
-                    {
-                        "stacktrace": {
-                            "frames": [
-                                {
-                                    "function": "a",
-                                    "abs_path": None,
-                                    "module": "org.a.b.g$a",
-                                    "filename": None,
-                                    "lineno": 67,
-                                },
-                                {
-                                    "function": "a",
-                                    "abs_path": None,
-                                    "module": "org.a.b.g$a",
-                                    "filename": None,
-                                    "lineno": 69,
-                                },
-                            ]
-                        },
-                        "module": "org.a.b",
-                        "type": "g$a",
-                        "value": "Shit broke yo",
-                    }
-                ]
-            },
-            "timestamp": iso_format(before_now(seconds=1)),
-        }
-
-        event = self.post_and_retrieve_event(event_data)
-        if not self.use_relay():
-            # We measure the number of queries after an initial post,
-            # because there are many queries polluting the array
-            # before the actual "processing" happens (like, auth_user)
-            with self.assertWriteQueries(
-                {
-                    "nodestore_node": 2,
-                    "sentry_eventuser": 1,
-                    "sentry_groupedmessage": 1,
-                    "sentry_userreport": 1,
-                }
-            ):
-                self.post_and_retrieve_event(event_data)
-
-        exc = event.interfaces["exception"].values[0]
-        bt = exc.stacktrace
-        frames = bt.frames
-
-        assert exc.type == "Util$ClassContextSecurityManager"
-        assert exc.module == "org.slf4j.helpers"
-        assert frames[0].function == "getClassContext"
-        assert frames[0].module == "org.slf4j.helpers.Util$ClassContextSecurityManager"
-        assert frames[1].function == "getExtraClassContext"
-        assert frames[1].module == "org.slf4j.helpers.Util$ClassContextSecurityManager"
-
-        assert event.culprit == (
-            "org.slf4j.helpers.Util$ClassContextSecurityManager " "in getExtraClassContext"
-        )
-
-    def test_resolving_inline(self):
-        url = reverse(
-            "sentry-api-0-dsym-files",
-            kwargs={
-                "organization_slug": self.project.organization.slug,
-                "project_slug": self.project.slug,
-            },
-        )
-
-        self.login_as(user=self.user)
-
-        out = BytesIO()
-        f = zipfile.ZipFile(out, "w")
-        f.writestr("proguard/%s.txt" % PROGUARD_INLINE_UUID, PROGUARD_INLINE_SOURCE)
-        f.writestr("ignored-file.txt", b"This is just some stuff")
-        f.close()
-
-        response = self.client.post(
-            url,
-            {
-                "file": SimpleUploadedFile(
-                    "symbols.zip", out.getvalue(), content_type="application/zip"
-                )
-            },
-            format="multipart",
-        )
-        assert response.status_code == 201, response.content
-        assert len(response.data) == 1
-
-        event_data = {
-            "user": {"ip_address": "31.172.207.97"},
-            "extra": {},
-            "project": self.project.id,
-            "platform": "java",
-            "debug_meta": {"images": [{"type": "proguard", "uuid": PROGUARD_INLINE_UUID}]},
-            "exception": {
-                "values": [
-                    {
-                        "stacktrace": {
-                            "frames": [
-                                {
-                                    "function": "onClick",
-                                    "abs_path": None,
-                                    "module": "e.a.c.a",
-                                    "filename": None,
-                                    "lineno": 2,
-                                },
-                                {
-                                    "function": "t",
-                                    "abs_path": None,
-                                    "module": "io.sentry.sample.MainActivity",
-                                    "filename": "MainActivity.java",
-                                    "lineno": 1,
-                                },
-                            ]
-                        },
-                        "module": "org.a.b",
-                        "type": "g$a",
-                        "value": "Shit broke yo",
-                    }
-                ]
-            },
-            "timestamp": iso_format(before_now(seconds=1)),
-        }
-
-        event = self.post_and_retrieve_event(event_data)
-        if not self.use_relay():
-            # We measure the number of queries after an initial post,
-            # because there are many queries polluting the array
-            # before the actual "processing" happens (like, auth_user)
-            with self.assertWriteQueries(
-                {
-                    "nodestore_node": 2,
-                    "sentry_eventuser": 1,
-                    "sentry_groupedmessage": 1,
-                    "sentry_userreport": 1,
-                }
-            ):
-                self.post_and_retrieve_event(event_data)
-
-        exc = event.interfaces["exception"].values[0]
-        bt = exc.stacktrace
-        frames = bt.frames
-
-        assert len(frames) == 4
-
-        assert frames[0].function == "onClick"
-        assert frames[0].module == "io.sentry.sample.-$$Lambda$r3Avcbztes2hicEObh02jjhQqd4"
-
-        assert frames[1].filename == "MainActivity.java"
-        assert frames[1].module == "io.sentry.sample.MainActivity"
-        assert frames[1].function == "onClickHandler"
-        assert frames[1].lineno == 40
-        assert frames[2].function == "foo"
-        assert frames[2].lineno == 44
-        assert frames[3].function == "bar"
-        assert frames[3].lineno == 54
-        assert frames[3].filename == "MainActivity.java"
-        assert frames[3].module == "io.sentry.sample.MainActivity"
-
-    def test_error_on_resolving(self):
-        url = reverse(
-            "sentry-api-0-dsym-files",
-            kwargs={
-                "organization_slug": self.project.organization.slug,
-                "project_slug": self.project.slug,
-            },
-        )
-
-        self.login_as(user=self.user)
-
-        out = BytesIO()
-        f = zipfile.ZipFile(out, "w")
-        f.writestr("proguard/%s.txt" % PROGUARD_BUG_UUID, PROGUARD_BUG_SOURCE)
-        f.close()
-
-        response = self.client.post(
-            url,
-            {
-                "file": SimpleUploadedFile(
-                    "symbols.zip", out.getvalue(), content_type="application/zip"
-                )
-            },
-            format="multipart",
-        )
-        assert response.status_code == 201, response.content
-        assert len(response.data) == 1
-
-        event_data = {
-            "user": {"ip_address": "31.172.207.97"},
-            "extra": {},
-            "project": self.project.id,
-            "platform": "java",
-            "debug_meta": {"images": [{"type": "proguard", "uuid": PROGUARD_BUG_UUID}]},
-            "exception": {
-                "values": [
-                    {
-                        "stacktrace": {
-                            "frames": [
-                                {
-                                    "function": "a",
-                                    "abs_path": None,
-                                    "module": "org.a.b.g$a",
-                                    "filename": None,
-                                    "lineno": 67,
-                                },
-                                {
-                                    "function": "a",
-                                    "abs_path": None,
-                                    "module": "org.a.b.g$a",
-                                    "filename": None,
-                                    "lineno": 69,
-                                },
-                            ]
-                        },
-                        "type": "RuntimeException",
-                        "value": "Shit broke yo",
-                    }
-                ]
-            },
-            "timestamp": iso_format(before_now(seconds=1)),
-        }
-
-        event = self.post_and_retrieve_event(event_data)
-
-        assert len(event.data["errors"]) == 1
-        assert event.data["errors"][0] == {
-            "mapping_uuid": u"071207ac-b491-4a74-957c-2c94fd9594f2",
-            "type": "proguard_missing_lineno",
-        }
-
-
-@pytest.mark.sentry_store_integration
-class BasicResolvingIntegrationTestLegacy(
-    SentryStoreHelper, TestCase, BasicResolvingIntegrationTest
-):
-    pass
diff --git a/tests/sentry/lang/javascript/test_example.py b/tests/sentry/lang/javascript/test_example.py
deleted file mode 100644
index 2f7c0c44bd..0000000000
--- a/tests/sentry/lang/javascript/test_example.py
+++ /dev/null
@@ -1,99 +0,0 @@
-# coding: utf-8
-
-from __future__ import absolute_import
-
-import os
-import json
-import pytest
-import responses
-
-from sentry.testutils import TransactionTestCase, SentryStoreHelper
-from sentry.testutils.helpers.datetime import iso_format, before_now
-
-
-def get_fixture_path(name):
-    return os.path.join(os.path.dirname(__file__), "example-project", name)
-
-
-def load_fixture(name):
-    with open(get_fixture_path(name)) as f:
-        return f.read()
-
-
-class ExampleTestCase(object):
-    def post_and_retrieve_event(self, data):
-        raise NotImplementedError(
-            "post_and_retrieve_event should be implemented in dervied test class"
-        )
-
-    @responses.activate
-    def test_sourcemap_expansion(self):
-        responses.add(
-            responses.GET,
-            "http://example.com/test.js",
-            body=load_fixture("test.js"),
-            content_type="application/javascript",
-        )
-        responses.add(
-            responses.GET,
-            "http://example.com/test.min.js",
-            body=load_fixture("test.min.js"),
-            content_type="application/javascript",
-        )
-        responses.add(
-            responses.GET,
-            "http://example.com/test.map",
-            body=load_fixture("test.map"),
-            content_type="application/json",
-        )
-        responses.add(responses.GET, "http://example.com/index.html", body="Not Found", status=404)
-
-        min_ago = iso_format(before_now(minutes=1))
-
-        data = {
-            "timestamp": min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "stacktrace": {
-                            "frames": json.loads(load_fixture("minifiedError.json"))[::-1]
-                        },
-                    }
-                ]
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        exception = event.interfaces["exception"]
-        frame_list = exception.values[0].stacktrace.frames
-
-        assert len(frame_list) == 4
-
-        import pprint
-
-        pprint.pprint(frame_list)
-
-        assert frame_list[0].function == "produceStack"
-        assert frame_list[0].lineno == 6
-        assert frame_list[0].filename == "index.html"
-
-        assert frame_list[1].function == "test"
-        assert frame_list[1].lineno == 20
-        assert frame_list[1].filename == "test.js"
-
-        assert frame_list[2].function == "invoke"
-        assert frame_list[2].lineno == 15
-        assert frame_list[2].filename == "test.js"
-
-        assert frame_list[3].function == "onFailure"
-        assert frame_list[3].lineno == 5
-        assert frame_list[3].filename == "test.js"
-
-
-@pytest.mark.sentry_store_integration
-class ExampleTestCaseLegacy(SentryStoreHelper, TransactionTestCase, ExampleTestCase):
-    pass
diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
deleted file mode 100644
index cb160600f2..0000000000
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ /dev/null
@@ -1,1384 +0,0 @@
-# coding: utf-8
-
-from __future__ import absolute_import
-
-import os.path
-import pytest
-import responses
-
-from base64 import b64encode
-
-from sentry.utils.compat.mock import patch
-from sentry.models import File, Release, ReleaseFile
-from sentry.testutils import TestCase, SnubaTestCase, SentryStoreHelper
-
-from sentry.testutils.helpers.datetime import iso_format, before_now
-
-# TODO(joshuarli): six 1.12.0 adds ensure_binary
-# might also want to put this in utils since we pretty much expect the result to be py3 str and not bytes
-BASE64_SOURCEMAP = "data:application/json;base64," + (
-    b64encode(
-        u'{"version":3,"file":"generated.js","sources":["/test.js"],"names":[],"mappings":"AAAA","sourcesContent":['
-        '"console.log(\\"hello, World!\\")"]}'.encode("utf-8")
-    )
-    .decode("utf-8")
-    .replace("\n", "")
-)
-
-
-def get_fixture_path(name):
-    return os.path.join(os.path.dirname(__file__), "fixtures", name)
-
-
-def load_fixture(name):
-    with open(get_fixture_path(name), "rb") as fp:
-        return fp.read()
-
-
-class JavascriptIntegrationTest(SnubaTestCase):
-    def setUp(self):
-        super(JavascriptIntegrationTest, self).setUp()
-        self.min_ago = iso_format(before_now(minutes=1))
-
-    def test_adds_contexts_without_device(self):
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "request": {
-                "url": "http://example.com",
-                "headers": [
-                    [
-                        "User-Agent",
-                        "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) "
-                        "Chrome/28.0.1500.72 Safari/537.36",
-                    ]
-                ],
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-        if not self.use_relay():
-            # We measure the number of queries after an initial post,
-            # because there are many queries polluting the array
-            # before the actual "processing" happens (like, auth_user)
-            with self.assertWriteQueries(
-                {
-                    "nodestore_node": 2,
-                    "sentry_eventuser": 1,
-                    "sentry_groupedmessage": 1,
-                    "sentry_userreport": 1,
-                },
-                debug=True,
-            ):  # debug=True is for coverage
-                self._postWithHeader(data)
-
-        contexts = event.interfaces["contexts"].to_json()
-        assert contexts.get("os") == {"name": "Windows", "version": "8", "type": "os"}
-        assert contexts.get("device") is None
-
-    def test_adds_contexts_with_device(self):
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "request": {
-                "url": "http://example.com",
-                "headers": [
-                    [
-                        "User-Agent",
-                        "Mozilla/5.0 (Linux; U; Android 4.3; en-us; SCH-R530U Build/JSS15J) AppleWebKit/534.30 ("
-                        "KHTML, like Gecko) Version/4.0 Mobile Safari/534.30 USCC-R530U",
-                    ]
-                ],
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        contexts = event.interfaces["contexts"].to_json()
-        assert contexts.get("os") == {"name": "Android", "type": "os", "version": "4.3"}
-        assert contexts.get("browser") == {"name": "Android", "type": "browser", "version": "4.3"}
-        assert contexts.get("device") == {
-            "family": "Samsung SCH-R530U",
-            "type": "device",
-            "model": "SCH-R530U",
-            "brand": "Samsung",
-        }
-
-    def test_adds_contexts_with_ps4_device(self):
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "request": {
-                "url": "http://example.com",
-                "headers": [
-                    [
-                        "User-Agent",
-                        "Mozilla/5.0 (PlayStation 4 3.55) AppleWebKit/537.78 (KHTML, like Gecko)",
-                    ]
-                ],
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        contexts = event.interfaces["contexts"].to_json()
-        assert contexts.get("os") is None
-        assert contexts.get("browser") is None
-        assert contexts.get("device") == {
-            "family": "PlayStation 4",
-            "type": "device",
-            "model": "PlayStation 4",
-            "brand": "Sony",
-        }
-
-    @patch("sentry.lang.javascript.processor.fetch_file")
-    def test_source_expansion(self, mock_fetch_file):
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "stacktrace": {
-                            "frames": [
-                                {
-                                    "abs_path": "http://example.com/foo.js",
-                                    "filename": "foo.js",
-                                    "lineno": 4,
-                                    "colno": 0,
-                                },
-                                {
-                                    "abs_path": "http://example.com/foo.js",
-                                    "filename": "foo.js",
-                                    "lineno": 1,
-                                    "colno": 0,
-                                },
-                            ]
-                        },
-                    }
-                ]
-            },
-        }
-
-        mock_fetch_file.return_value.body = "\n".join("hello world")
-        mock_fetch_file.return_value.encoding = None
-        mock_fetch_file.return_value.headers = {}
-
-        event = self.post_and_retrieve_event(data)
-
-        mock_fetch_file.assert_called_once_with(
-            "http://example.com/foo.js",
-            project=self.project,
-            release=None,
-            dist=None,
-            allow_scraping=True,
-        )
-
-        exception = event.interfaces["exception"]
-        frame_list = exception.values[0].stacktrace.frames
-
-        frame = frame_list[0]
-        assert frame.pre_context == ["h", "e", "l"]
-        assert frame.context_line == "l"
-        assert frame.post_context == ["o", " ", "w", "o", "r"]
-
-        frame = frame_list[1]
-        assert not frame.pre_context
-        assert frame.context_line == "h"
-        assert frame.post_context == ["e", "l", "l", "o", " "]
-
-        # no source map means no raw_stacktrace
-        assert exception.values[0].raw_stacktrace is None
-
-    @patch("sentry.lang.javascript.processor.fetch_file")
-    @patch("sentry.lang.javascript.processor.discover_sourcemap")
-    def test_inlined_sources(self, mock_discover_sourcemap, mock_fetch_file):
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "stacktrace": {
-                            "frames": [
-                                {
-                                    "abs_path": "http://example.com/test.min.js",
-                                    "filename": "test.js",
-                                    "lineno": 1,
-                                    "colno": 1,
-                                }
-                            ]
-                        },
-                    }
-                ]
-            },
-        }
-
-        mock_discover_sourcemap.return_value = BASE64_SOURCEMAP
-
-        mock_fetch_file.return_value.url = "http://example.com/test.min.js"
-        mock_fetch_file.return_value.body = "\n".join("<generated source>")
-        mock_fetch_file.return_value.encoding = None
-
-        event = self.post_and_retrieve_event(data)
-
-        mock_fetch_file.assert_called_once_with(
-            "http://example.com/test.min.js",
-            project=self.project,
-            release=None,
-            dist=None,
-            allow_scraping=True,
-        )
-
-        exception = event.interfaces["exception"]
-        frame_list = exception.values[0].stacktrace.frames
-
-        frame = frame_list[0]
-        assert not frame.pre_context
-        assert frame.context_line == 'console.log("hello, World!")'
-        assert not frame.post_context
-        assert frame.data["sourcemap"] == "http://example.com/test.min.js"
-
-    @responses.activate
-    def test_error_message_translations(self):
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "logentry": {
-                "formatted": u"ReferenceError: Impossible de d\xe9finir une propri\xe9t\xe9 \xab foo \xbb : objet non "
-                u"extensible"
-            },
-            "exception": {
-                "values": [
-                    {"type": "Error", "value": u"P\u0159\xedli\u0161 mnoho soubor\u016f"},
-                    {
-                        "type": "Error",
-                        "value": u"foo: wyst\u0105pi\u0142 nieoczekiwany b\u0142\u0105d podczas pr\xf3by uzyskania "
-                        u"informacji o metadanych",
-                    },
-                ]
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        message = event.interfaces["logentry"]
-        assert (
-            message.formatted
-            == "ReferenceError: Cannot define property 'foo': object is not extensible"
-        )
-
-        exception = event.interfaces["exception"]
-        assert exception.values[0].value == "Too many files"
-        assert (
-            exception.values[1].value
-            == "foo: an unexpected failure occurred while trying to obtain metadata information"
-        )
-
-    @responses.activate
-    def test_sourcemap_source_expansion(self):
-        responses.add(
-            responses.GET,
-            "http://example.com/file.min.js",
-            body=load_fixture("file.min.js"),
-            content_type="application/javascript; charset=utf-8",
-        )
-        responses.add(
-            responses.GET,
-            "http://example.com/file1.js",
-            body=load_fixture("file1.js"),
-            content_type="application/javascript; charset=utf-8",
-        )
-        responses.add(
-            responses.GET,
-            "http://example.com/file2.js",
-            body=load_fixture("file2.js"),
-            content_type="application/javascript; charset=utf-8",
-        )
-        responses.add(
-            responses.GET,
-            "http://example.com/file.sourcemap.js",
-            body=load_fixture("file.sourcemap.js"),
-            content_type="application/javascript; charset=utf-8",
-        )
-        responses.add(responses.GET, "http://example.com/index.html", body="Not Found", status=404)
-
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "stacktrace": {
-                            "frames": [
-                                {
-                                    "abs_path": "http://example.com/file.min.js",
-                                    "filename": "file.min.js",
-                                    "lineno": 1,
-                                    "colno": 39,
-                                },
-                                # NOTE: Intentionally source is not retrieved from this HTML file
-                                {
-                                    "function": 'function: "HTMLDocument.<anonymous>"',
-                                    "abs_path": "http//example.com/index.html",
-                                    "filename": "index.html",
-                                    "lineno": 283,
-                                    "colno": 17,
-                                    "in_app": False,
-                                },
-                            ]
-                        },
-                    }
-                ]
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        assert event.data["errors"] == [
-            {"type": "js_no_source", "url": "http//example.com/index.html"}
-        ]
-
-        exception = event.interfaces["exception"]
-        frame_list = exception.values[0].stacktrace.frames
-
-        frame = frame_list[0]
-        assert frame.pre_context == ["function add(a, b) {", '\t"use strict";']
-        expected = u"\treturn a + b; // fôo"
-        assert frame.context_line == expected
-        assert frame.post_context == ["}", ""]
-
-        raw_frame_list = exception.values[0].raw_stacktrace.frames
-        raw_frame = raw_frame_list[0]
-        assert not raw_frame.pre_context
-        assert (
-            raw_frame.context_line
-            == 'function add(a,b){"use strict";return a+b}function multiply(a,b){"use strict";return a*b}function '
-            'divide(a,b){"use strict";try{return multip {snip}'
-        )
-        assert raw_frame.post_context == ["//@ sourceMappingURL=file.sourcemap.js"]
-        assert raw_frame.lineno == 1
-
-        # Since we couldn't expand source for the 2nd frame, both
-        # its raw and original form should be identical
-        assert raw_frame_list[1] == frame_list[1]
-
-    @responses.activate
-    def test_sourcemap_embedded_source_expansion(self):
-        responses.add(
-            responses.GET,
-            "http://example.com/embedded.js",
-            body=load_fixture("embedded.js"),
-            content_type="application/javascript; charset=utf-8",
-        )
-        responses.add(
-            responses.GET,
-            "http://example.com/embedded.js.map",
-            body=load_fixture("embedded.js.map"),
-            content_type="application/json; charset=utf-8",
-        )
-        responses.add(responses.GET, "http://example.com/index.html", body="Not Found", status=404)
-
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "stacktrace": {
-                            "frames": [
-                                {
-                                    "abs_path": "http://example.com/embedded.js",
-                                    "filename": "file.min.js",
-                                    "lineno": 1,
-                                    "colno": 39,
-                                },
-                                # NOTE: Intentionally source is not retrieved from this HTML file
-                                {
-                                    "function": 'function: "HTMLDocument.<anonymous>"',
-                                    "abs_path": "http//example.com/index.html",
-                                    "filename": "index.html",
-                                    "lineno": 283,
-                                    "colno": 17,
-                                    "in_app": False,
-                                },
-                            ]
-                        },
-                    }
-                ]
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        assert event.data["errors"] == [
-            {"type": "js_no_source", "url": "http//example.com/index.html"}
-        ]
-
-        exception = event.interfaces["exception"]
-        frame_list = exception.values[0].stacktrace.frames
-
-        frame = frame_list[0]
-        assert frame.pre_context == ["function add(a, b) {", '\t"use strict";']
-        expected = u"\treturn a + b; // fôo"
-        assert frame.context_line == expected
-        assert frame.post_context == ["}", ""]
-
-    @responses.activate
-    def test_sourcemap_nofiles_source_expansion(self):
-        project = self.project
-        release = Release.objects.create(organization_id=project.organization_id, version="abc")
-        release.add_project(project)
-
-        f_minified = File.objects.create(
-            name="nofiles.js", type="release.file", headers={"Content-Type": "application/json"}
-        )
-        f_minified.putfile(open(get_fixture_path("nofiles.js"), "rb"))
-        ReleaseFile.objects.create(
-            name=u"~/{}".format(f_minified.name),
-            release=release,
-            organization_id=project.organization_id,
-            file=f_minified,
-        )
-
-        f_sourcemap = File.objects.create(
-            name="nofiles.js.map", type="release.file", headers={"Content-Type": "application/json"}
-        )
-        f_sourcemap.putfile(open(get_fixture_path("nofiles.js.map"), "rb"))
-        ReleaseFile.objects.create(
-            name=u"app:///{}".format(f_sourcemap.name),
-            release=release,
-            organization_id=project.organization_id,
-            file=f_sourcemap,
-        )
-
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "release": "abc",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "stacktrace": {
-                            "frames": [{"abs_path": "app:///nofiles.js", "lineno": 1, "colno": 39}]
-                        },
-                    }
-                ]
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        assert "errors" not in event.data
-
-        exception = event.interfaces["exception"]
-        frame_list = exception.values[0].stacktrace.frames
-
-        assert len(frame_list) == 1
-        frame = frame_list[0]
-        assert frame.pre_context == ["function multiply(a, b) {", '\t"use strict";']
-        assert frame.context_line == u"\treturn a * b;"
-        assert frame.post_context == [
-            "}",
-            "function divide(a, b) {",
-            '\t"use strict";',
-            "\ttry {",
-            "\t\treturn multiply(add(a, b), a, b) / c;",
-        ]
-
-    @responses.activate
-    def test_indexed_sourcemap_source_expansion(self):
-        responses.add(
-            responses.GET,
-            "http://example.com/indexed.min.js",
-            body=load_fixture("indexed.min.js"),
-            content_type="application/javascript; charset=utf-8",
-        )
-        responses.add(
-            responses.GET,
-            "http://example.com/file1.js",
-            body=load_fixture("file1.js"),
-            content_type="application/javascript; charset=utf-8",
-        )
-        responses.add(
-            responses.GET,
-            "http://example.com/file2.js",
-            body=load_fixture("file2.js"),
-            content_type="application/javascript; charset=utf-8",
-        )
-        responses.add(
-            responses.GET,
-            "http://example.com/indexed.sourcemap.js",
-            body=load_fixture("indexed.sourcemap.js"),
-            content_type="application/json; charset=utf-8",
-        )
-
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "stacktrace": {
-                            "frames": [
-                                {
-                                    "abs_path": "http://example.com/indexed.min.js",
-                                    "filename": "indexed.min.js",
-                                    "lineno": 1,
-                                    "colno": 39,
-                                },
-                                {
-                                    "abs_path": "http://example.com/indexed.min.js",
-                                    "filename": "indexed.min.js",
-                                    "lineno": 2,
-                                    "colno": 44,
-                                },
-                            ]
-                        },
-                    }
-                ]
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        assert "errors" not in event.data
-
-        exception = event.interfaces["exception"]
-        frame_list = exception.values[0].stacktrace.frames
-
-        frame = frame_list[0]
-        assert frame.pre_context == ["function add(a, b) {", '\t"use strict";']
-
-        expected = u"\treturn a + b; // fôo"
-        assert frame.context_line == expected
-        assert frame.post_context == ["}", ""]
-
-        raw_frame_list = exception.values[0].raw_stacktrace.frames
-        raw_frame = raw_frame_list[0]
-        assert not raw_frame.pre_context
-        assert raw_frame.context_line == 'function add(a,b){"use strict";return a+b}'
-        assert raw_frame.post_context == [
-            'function multiply(a,b){"use strict";return a*b}function divide(a,b){"use strict";try{return multiply('
-            "add(a,b),a,b)/c}catch(e){Raven.captureE {snip}",
-            "//# sourceMappingURL=indexed.sourcemap.js",
-            "",
-        ]
-        assert raw_frame.lineno == 1
-
-        frame = frame_list[1]
-        assert frame.pre_context == ["function multiply(a, b) {", '\t"use strict";']
-        assert frame.context_line == "\treturn a * b;"
-        assert frame.post_context == [
-            "}",
-            "function divide(a, b) {",
-            '\t"use strict";',
-            "\ttry {",
-            "\t\treturn multiply(add(a, b), a, b) / c;",
-        ]
-
-        raw_frame = raw_frame_list[1]
-        assert raw_frame.pre_context == ['function add(a,b){"use strict";return a+b}']
-        assert (
-            raw_frame.context_line
-            == 'function multiply(a,b){"use strict";return a*b}function divide(a,b){"use strict";try{return multiply('
-            "add(a,b),a,b)/c}catch(e){Raven.captureE {snip}"
-        )
-        assert raw_frame.post_context == ["//# sourceMappingURL=indexed.sourcemap.js", ""]
-        assert raw_frame.lineno == 2
-
-    @responses.activate
-    def test_expansion_via_release_artifacts(self):
-        project = self.project
-        release = Release.objects.create(organization_id=project.organization_id, version="abc")
-        release.add_project(project)
-
-        # file.min.js
-        # ------------
-
-        f_minified = File.objects.create(
-            name="file.min.js", type="release.file", headers={"Content-Type": "application/json"}
-        )
-        f_minified.putfile(open(get_fixture_path("file.min.js"), "rb"))
-
-        # Intentionally omit hostname - use alternate artifact path lookup instead
-        # /file1.js vs http://example.com/file1.js
-        ReleaseFile.objects.create(
-            name=u"~/{}?foo=bar".format(f_minified.name),
-            release=release,
-            organization_id=project.organization_id,
-            file=f_minified,
-        )
-
-        # file1.js
-        # ---------
-
-        f1 = File.objects.create(
-            name="file1.js", type="release.file", headers={"Content-Type": "application/json"}
-        )
-        f1.putfile(open(get_fixture_path("file1.js"), "rb"))
-
-        ReleaseFile.objects.create(
-            name=u"http://example.com/{}".format(f1.name),
-            release=release,
-            organization_id=project.organization_id,
-            file=f1,
-        )
-
-        # file2.js
-        # ----------
-
-        f2 = File.objects.create(
-            name="file2.js", type="release.file", headers={"Content-Type": "application/json"}
-        )
-        f2.putfile(open(get_fixture_path("file2.js"), "rb"))
-        ReleaseFile.objects.create(
-            name=u"http://example.com/{}".format(f2.name),
-            release=release,
-            organization_id=project.organization_id,
-            file=f2,
-        )
-
-        # To verify that the full url has priority over the relative url,
-        # we will also add a second ReleaseFile alias for file2.js (f3) w/o
-        # hostname that points to an empty file. If the processor chooses
-        # this empty file over the correct file2.js, it will not locate
-        # context for the 2nd frame.
-        f2_empty = File.objects.create(
-            name="empty.js", type="release.file", headers={"Content-Type": "application/json"}
-        )
-        f2_empty.putfile(open(get_fixture_path("empty.js"), "rb"))
-        ReleaseFile.objects.create(
-            name=u"~/{}".format(f2.name),  # intentionally using f2.name ("file2.js")
-            release=release,
-            organization_id=project.organization_id,
-            file=f2_empty,
-        )
-
-        # sourcemap
-        # ----------
-
-        f_sourcemap = File.objects.create(
-            name="file.sourcemap.js",
-            type="release.file",
-            headers={"Content-Type": "application/json"},
-        )
-        f_sourcemap.putfile(open(get_fixture_path("file.sourcemap.js"), "rb"))
-        ReleaseFile.objects.create(
-            name=u"http://example.com/{}".format(f_sourcemap.name),
-            release=release,
-            organization_id=project.organization_id,
-            file=f_sourcemap,
-        )
-
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "release": "abc",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "stacktrace": {
-                            "frames": [
-                                {
-                                    "abs_path": "http://example.com/file.min.js?foo=bar",
-                                    "filename": "file.min.js",
-                                    "lineno": 1,
-                                    "colno": 39,
-                                },
-                                {
-                                    "abs_path": "http://example.com/file.min.js?foo=bar",
-                                    "filename": "file.min.js",
-                                    "lineno": 1,
-                                    "colno": 79,
-                                },
-                            ]
-                        },
-                    }
-                ]
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        assert "errors" not in event.data
-
-        exception = event.interfaces["exception"]
-        frame_list = exception.values[0].stacktrace.frames
-
-        frame = frame_list[0]
-        assert frame.pre_context == ["function add(a, b) {", '\t"use strict";']
-        assert frame.context_line == u"\treturn a + b; // fôo"
-        assert frame.post_context == ["}", ""]
-
-        frame = frame_list[1]
-        assert frame.pre_context == ["function multiply(a, b) {", '\t"use strict";']
-        assert frame.context_line == "\treturn a * b;"
-        assert frame.post_context == [
-            "}",
-            "function divide(a, b) {",
-            '\t"use strict";',
-            u"\ttry {",
-            "\t\treturn multiply(add(a, b), a, b) / c;",
-        ]
-
-    @responses.activate
-    def test_expansion_via_distribution_release_artifacts(self):
-        project = self.project
-        release = Release.objects.create(organization_id=project.organization_id, version="abc")
-        release.add_project(project)
-        dist = release.add_dist("foo")
-
-        # file.min.js
-        # ------------
-
-        f_minified = File.objects.create(
-            name="file.min.js", type="release.file", headers={"Content-Type": "application/json"}
-        )
-        f_minified.putfile(open(get_fixture_path("file.min.js"), "rb"))
-
-        # Intentionally omit hostname - use alternate artifact path lookup instead
-        # /file1.js vs http://example.com/file1.js
-        ReleaseFile.objects.create(
-            name=u"~/{}?foo=bar".format(f_minified.name),
-            release=release,
-            dist=dist,
-            organization_id=project.organization_id,
-            file=f_minified,
-        )
-
-        # file1.js
-        # ---------
-
-        f1 = File.objects.create(
-            name="file1.js", type="release.file", headers={"Content-Type": "application/json"}
-        )
-        f1.putfile(open(get_fixture_path("file1.js"), "rb"))
-
-        ReleaseFile.objects.create(
-            name=u"http://example.com/{}".format(f1.name),
-            release=release,
-            dist=dist,
-            organization_id=project.organization_id,
-            file=f1,
-        )
-
-        # file2.js
-        # ----------
-
-        f2 = File.objects.create(
-            name="file2.js", type="release.file", headers={"Content-Type": "application/json"}
-        )
-        f2.putfile(open(get_fixture_path("file2.js"), "rb"))
-        ReleaseFile.objects.create(
-            name=u"http://example.com/{}".format(f2.name),
-            release=release,
-            dist=dist,
-            organization_id=project.organization_id,
-            file=f2,
-        )
-
-        # To verify that the full url has priority over the relative url,
-        # we will also add a second ReleaseFile alias for file2.js (f3) w/o
-        # hostname that points to an empty file. If the processor chooses
-        # this empty file over the correct file2.js, it will not locate
-        # context for the 2nd frame.
-        f2_empty = File.objects.create(
-            name="empty.js", type="release.file", headers={"Content-Type": "application/json"}
-        )
-        f2_empty.putfile(open(get_fixture_path("empty.js"), "rb"))
-        ReleaseFile.objects.create(
-            name=u"~/{}".format(f2.name),  # intentionally using f2.name ("file2.js")
-            release=release,
-            dist=dist,
-            organization_id=project.organization_id,
-            file=f2_empty,
-        )
-
-        # sourcemap
-        # ----------
-
-        f_sourcemap = File.objects.create(
-            name="file.sourcemap.js",
-            type="release.file",
-            headers={"Content-Type": "application/json"},
-        )
-        f_sourcemap.putfile(open(get_fixture_path("file.sourcemap.js"), "rb"))
-        ReleaseFile.objects.create(
-            name=u"http://example.com/{}".format(f_sourcemap.name),
-            release=release,
-            dist=dist,
-            organization_id=project.organization_id,
-            file=f_sourcemap,
-        )
-
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "release": "abc",
-            "dist": "foo",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "stacktrace": {
-                            "frames": [
-                                {
-                                    "abs_path": "http://example.com/file.min.js?foo=bar",
-                                    "filename": "file.min.js",
-                                    "lineno": 1,
-                                    "colno": 39,
-                                },
-                                {
-                                    "abs_path": "http://example.com/file.min.js?foo=bar",
-                                    "filename": "file.min.js",
-                                    "lineno": 1,
-                                    "colno": 79,
-                                },
-                            ]
-                        },
-                    }
-                ]
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        assert "errors" not in event.data
-
-        exception = event.interfaces["exception"]
-        frame_list = exception.values[0].stacktrace.frames
-
-        frame = frame_list[0]
-        assert frame.pre_context == ["function add(a, b) {", '\t"use strict";']
-        assert frame.context_line == u"\treturn a + b; // fôo"
-        assert frame.post_context == ["}", ""]
-
-        frame = frame_list[1]
-        assert frame.pre_context == ["function multiply(a, b) {", '\t"use strict";']
-        assert frame.context_line == "\treturn a * b;"
-        assert frame.post_context == [
-            "}",
-            "function divide(a, b) {",
-            '\t"use strict";',
-            u"\ttry {",
-            "\t\treturn multiply(add(a, b), a, b) / c;",
-        ]
-
-    @responses.activate
-    def test_sourcemap_expansion_with_missing_source(self):
-        """
-        Tests a successful sourcemap expansion that points to source files
-        that are not found.
-        """
-        responses.add(
-            responses.GET,
-            "http://example.com/file.min.js",
-            body=load_fixture("file.min.js"),
-            content_type="application/javascript; charset=utf-8",
-        )
-        responses.add(
-            responses.GET,
-            "http://example.com/file.sourcemap.js",
-            body=load_fixture("file.sourcemap.js"),
-            content_type="application/json; charset=utf-8",
-        )
-        responses.add(responses.GET, "http://example.com/file1.js", body="Not Found", status=404)
-
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "stacktrace": {
-                            # Add two frames.  We only want to see the
-                            # error once though.
-                            "frames": [
-                                {
-                                    "abs_path": "http://example.com/file.min.js",
-                                    "filename": "file.min.js",
-                                    "lineno": 1,
-                                    "colno": 39,
-                                },
-                                {
-                                    "abs_path": "http://example.com/file.min.js",
-                                    "filename": "file.min.js",
-                                    "lineno": 1,
-                                    "colno": 39,
-                                },
-                            ]
-                        },
-                    }
-                ]
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        assert event.data["errors"] == [
-            {"url": u"http://example.com/file1.js", "type": "fetch_invalid_http_code", "value": 404}
-        ]
-
-        exception = event.interfaces["exception"]
-        frame_list = exception.values[0].stacktrace.frames
-
-        frame = frame_list[0]
-
-        # no context information ...
-        assert not frame.pre_context
-        assert not frame.context_line
-        assert not frame.post_context
-
-        # ... but line, column numbers are still correctly mapped
-        assert frame.lineno == 3
-        assert frame.colno == 9
-
-    @responses.activate
-    def test_failed_sourcemap_expansion(self):
-        """
-        Tests attempting to parse an indexed source map where each section has a "url"
-        property - this is unsupported and should fail.
-        """
-        responses.add(
-            responses.GET,
-            "http://example.com/unsupported.min.js",
-            body=load_fixture("unsupported.min.js"),
-            content_type="application/javascript; charset=utf-8",
-        )
-
-        responses.add(
-            responses.GET,
-            "http://example.com/unsupported.sourcemap.js",
-            body=load_fixture("unsupported.sourcemap.js"),
-            content_type="application/json; charset=utf-8",
-        )
-
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "stacktrace": {
-                            "frames": [
-                                {
-                                    "abs_path": "http://example.com/unsupported.min.js",
-                                    "filename": "indexed.min.js",
-                                    "lineno": 1,
-                                    "colno": 39,
-                                }
-                            ]
-                        },
-                    }
-                ]
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        assert event.data["errors"] == [
-            {"url": u"http://example.com/unsupported.sourcemap.js", "type": "js_invalid_source"}
-        ]
-
-    def test_failed_sourcemap_expansion_data_url(self):
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "stacktrace": {
-                            "frames": [
-                                {
-                                    "abs_path": "data:application/javascript,base46,asfasf",
-                                    "filename": "indexed.min.js",
-                                    "lineno": 1,
-                                    "colno": 39,
-                                }
-                            ]
-                        },
-                    }
-                ]
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        assert event.data["errors"] == [{"url": u"<data url>", "type": "js_no_source"}]
-
-    @responses.activate
-    def test_failed_sourcemap_expansion_missing_location_entirely(self):
-        responses.add(
-            responses.GET,
-            "http://example.com/indexed.min.js",
-            body="//# sourceMappingURL=indexed.sourcemap.js",
-        )
-        responses.add(responses.GET, "http://example.com/indexed.sourcemap.js", body="{}")
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "stacktrace": {
-                            "frames": [
-                                {
-                                    "abs_path": "http://example.com/indexed.min.js",
-                                    "filename": "indexed.min.js",
-                                    "lineno": 1,
-                                    "colno": 1,
-                                },
-                                {
-                                    "abs_path": "http://example.com/indexed.min.js",
-                                    "filename": "indexed.min.js",
-                                },
-                            ]
-                        },
-                    }
-                ]
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        assert "errors" not in event.data
-
-    @responses.activate
-    def test_html_response_for_js(self):
-        responses.add(
-            responses.GET,
-            "http://example.com/file1.js",
-            body="       <!DOCTYPE html><html><head></head><body></body></html>",
-        )
-        responses.add(
-            responses.GET,
-            "http://example.com/file2.js",
-            body="<!doctype html><html><head></head><body></body></html>",
-        )
-        responses.add(
-            responses.GET,
-            "http://example.com/file.html",
-            body=(
-                "<!doctype html><html><head></head><body><script>/*legit case*/</script></body></html>"
-            ),
-        )
-
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "stacktrace": {
-                            "frames": [
-                                {
-                                    "abs_path": "http://example.com/file1.js",
-                                    "filename": "file.min.js",
-                                    "lineno": 1,
-                                    "colno": 39,
-                                },
-                                {
-                                    "abs_path": "http://example.com/file2.js",
-                                    "filename": "file.min.js",
-                                    "lineno": 1,
-                                    "colno": 39,
-                                },
-                                {
-                                    "abs_path": "http://example.com/file.html",
-                                    "filename": "file.html",
-                                    "lineno": 1,
-                                    "colno": 1,
-                                },
-                            ]
-                        },
-                    }
-                ]
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        assert event.data["errors"] == [
-            {"url": u"http://example.com/file1.js", "type": "js_invalid_content"},
-            {"url": u"http://example.com/file2.js", "type": "js_invalid_content"},
-        ]
-
-    @responses.activate
-    def test_html_file_with_query_param_ending_with_js_extension(self):
-        responses.add(
-            responses.GET,
-            "http://example.com/file.html",
-            body=(
-                "<!doctype html><html><head></head><body><script>/*legit case*/</script></body></html>"
-            ),
-        )
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "javascript",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "stacktrace": {
-                            "frames": [
-                                {
-                                    "abs_path": "http://example.com/file.html?sw=iddqd1337.js",
-                                    "filename": "file.html",
-                                    "lineno": 1,
-                                    "colno": 1,
-                                },
-                            ]
-                        },
-                    }
-                ]
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        assert "errors" not in event.data
-
-    def test_node_processing(self):
-        project = self.project
-        release = Release.objects.create(
-            organization_id=project.organization_id, version="nodeabc123"
-        )
-        release.add_project(project)
-
-        f_minified = File.objects.create(
-            name="dist.bundle.js",
-            type="release.file",
-            headers={"Content-Type": "application/javascript"},
-        )
-        f_minified.putfile(open(get_fixture_path("dist.bundle.js"), "rb"))
-        ReleaseFile.objects.create(
-            name=u"~/{}".format(f_minified.name),
-            release=release,
-            organization_id=project.organization_id,
-            file=f_minified,
-        )
-
-        f_sourcemap = File.objects.create(
-            name="dist.bundle.js.map",
-            type="release.file",
-            headers={"Content-Type": "application/javascript"},
-        )
-        f_sourcemap.putfile(open(get_fixture_path("dist.bundle.js.map"), "rb"))
-        ReleaseFile.objects.create(
-            name=u"~/{}".format(f_sourcemap.name),
-            release=release,
-            organization_id=project.organization_id,
-            file=f_sourcemap,
-        )
-
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "node",
-            "release": "nodeabc123",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "stacktrace": {
-                            "frames": [
-                                {
-                                    "filename": "app:///dist.bundle.js",
-                                    "function": "bar",
-                                    "lineno": 9,
-                                    "colno": 2321,
-                                },
-                                {
-                                    "filename": "app:///dist.bundle.js",
-                                    "function": "foo",
-                                    "lineno": 3,
-                                    "colno": 2308,
-                                },
-                                {
-                                    "filename": "app:///dist.bundle.js",
-                                    "function": "App",
-                                    "lineno": 3,
-                                    "colno": 1011,
-                                },
-                                {
-                                    "filename": "app:///dist.bundle.js",
-                                    "function": "Object.<anonymous>",
-                                    "lineno": 1,
-                                    "colno": 1014,
-                                },
-                                {
-                                    "filename": "app:///dist.bundle.js",
-                                    "function": "__webpack_require__",
-                                    "lineno": 20,
-                                    "colno": 30,
-                                },
-                                {
-                                    "filename": "app:///dist.bundle.js",
-                                    "function": "<unknown>",
-                                    "lineno": 18,
-                                    "colno": 63,
-                                },
-                            ]
-                        },
-                    }
-                ]
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        exception = event.interfaces["exception"]
-        frame_list = exception.values[0].stacktrace.frames
-
-        assert len(frame_list) == 6
-
-        import pprint
-
-        pprint.pprint(frame_list[0].__dict__)
-        pprint.pprint(frame_list[1].__dict__)
-        pprint.pprint(frame_list[2].__dict__)
-        pprint.pprint(frame_list[3].__dict__)
-        pprint.pprint(frame_list[4].__dict__)
-        pprint.pprint(frame_list[5].__dict__)
-
-        assert frame_list[0].abs_path == "webpack:///webpack/bootstrap d9a5a31d9276b73873d3"
-        assert frame_list[0].function == "bar"
-        assert frame_list[0].lineno == 8
-
-        assert frame_list[1].abs_path == "webpack:///webpack/bootstrap d9a5a31d9276b73873d3"
-        assert frame_list[1].function == "foo"
-        assert frame_list[1].lineno == 2
-
-        assert frame_list[2].abs_path == "webpack:///webpack/bootstrap d9a5a31d9276b73873d3"
-        assert frame_list[2].function == "App"
-        assert frame_list[2].lineno == 2
-
-        assert frame_list[3].abs_path == "app:///dist.bundle.js"
-        assert frame_list[3].function == "Object.<anonymous>"
-        assert frame_list[3].lineno == 1
-
-        assert frame_list[4].abs_path == "webpack:///webpack/bootstrap d9a5a31d9276b73873d3"
-        assert frame_list[4].function == "__webpack_require__"
-        assert frame_list[4].lineno == 19
-
-        assert frame_list[5].abs_path == "webpack:///webpack/bootstrap d9a5a31d9276b73873d3"
-        assert frame_list[5].function == "<unknown>"
-        assert frame_list[5].lineno == 16
-
-    @responses.activate
-    def test_no_fetch_from_http(self):
-        responses.add(
-            responses.GET,
-            "http://example.com/node_app.min.js",
-            body=load_fixture("node_app.min.js"),
-            content_type="application/javascript; charset=utf-8",
-        )
-        responses.add(
-            responses.GET,
-            "http://example.com/node_app.min.js.map",
-            body=load_fixture("node_app.min.js.map"),
-            content_type="application/javascript; charset=utf-8",
-        )
-
-        data = {
-            "timestamp": self.min_ago,
-            "message": "hello",
-            "platform": "node",
-            "exception": {
-                "values": [
-                    {
-                        "type": "Error",
-                        "stacktrace": {
-                            "frames": [
-                                {
-                                    "abs_path": "node_bootstrap.js",
-                                    "filename": "node_bootstrap.js",
-                                    "lineno": 1,
-                                    "colno": 38,
-                                },
-                                {
-                                    "abs_path": "timers.js",
-                                    "filename": "timers.js",
-                                    "lineno": 1,
-                                    "colno": 39,
-                                },
-                                {
-                                    "abs_path": "webpack:///internal",
-                                    "filename": "internal",
-                                    "lineno": 1,
-                                    "colno": 43,
-                                },
-                                {
-                                    "abs_path": "webpack:///~/some_dep/file.js",
-                                    "filename": "file.js",
-                                    "lineno": 1,
-                                    "colno": 41,
-                                },
-                                {
-                                    "abs_path": "webpack:///./node_modules/file.js",
-                                    "filename": "file.js",
-                                    "lineno": 1,
-                                    "colno": 42,
-                                },
-                                {
-                                    "abs_path": "http://example.com/node_app.min.js",
-                                    "filename": "node_app.min.js",
-                                    "lineno": 1,
-                                    "colno": 40,
-                                },
-                            ]
-                        },
-                    }
-                ]
-            },
-        }
-
-        event = self.post_and_retrieve_event(data)
-
-        exception = event.interfaces["exception"]
-        frame_list = exception.values[0].stacktrace.frames
-
-        # This one should not process, so this one should be none.
-        assert exception.values[0].raw_stacktrace is None
-
-        # None of the in app should update
-        for x in range(6):
-            assert not frame_list[x].in_app
-
-
-@pytest.mark.sentry_store_integration
-class JavascriptIntegrationTestLegacy(SentryStoreHelper, TestCase, JavascriptIntegrationTest):
-    def setUp(self):
-        super(JavascriptIntegrationTestLegacy, self).setUp()
-        self.min_ago = iso_format(before_now(minutes=1))
diff --git a/tests/sentry/lang/native/test_minidump.py b/tests/sentry/lang/native/test_minidump.py
deleted file mode 100644
index e4e0446c88..0000000000
--- a/tests/sentry/lang/native/test_minidump.py
+++ /dev/null
@@ -1,171 +0,0 @@
-from __future__ import absolute_import
-import io
-import msgpack
-from sentry.lang.native.minidump import (
-    is_minidump_event,
-    merge_attached_breadcrumbs,
-    merge_attached_event,
-)
-
-
-class MockFile(object):
-    def __init__(self, bytes):
-        self._io = io.BytesIO(bytes)
-        self.size = len(bytes)
-
-    def __getattr__(self, name):
-        return getattr(self._io, name)
-
-
-def test_merge_attached_event_empty():
-    mpack_event = msgpack.packb({})
-    event = {}
-    merge_attached_event(MockFile(mpack_event), event)
-    assert not event
-
-
-def test_merge_attached_event_too_large_empty():
-    mpack_event = msgpack.packb({"a": "a" * 100000})
-    event = {}
-    merge_attached_event(MockFile(mpack_event), event)
-    assert not event
-
-
-def test_merge_attached_event_arbitrary_key():
-    mpack_event = msgpack.packb({"key": "value"})
-    event = {}
-    merge_attached_event(MockFile(mpack_event), event)
-    assert event["key"] == "value"
-
-
-def test_merge_attached_event_empty_file():
-    event = {}
-    merge_attached_event(MockFile(b""), event)
-    assert not event
-
-
-def test_merge_attached_event_invalid_file():
-    event = {}
-    merge_attached_event(MockFile(b"\xde"), event)
-    assert not event
-
-
-def test_merge_attached_breadcrumbs_empty_creates_crumb():
-    mpack_crumb = msgpack.packb({})
-    event = {}
-    merge_attached_breadcrumbs(MockFile(mpack_crumb), event)
-    assert event
-
-
-def test_merge_attached_breadcrumb_too_large_empty():
-    mpack_crumb = msgpack.packb({"message": "a" * 50000})
-    event = {}
-    merge_attached_breadcrumbs(MockFile(mpack_crumb), event)
-    assert not event.get("breadcrumbs")
-
-
-def test_merge_attached_breadcrumbs_empty_file():
-    event = {}
-    merge_attached_breadcrumbs(MockFile(b""), event)
-    assert not event.get("breadcrumbs")
-
-
-def test_merge_attached_breadcrumbs_invalid_file():
-    event = {}
-    merge_attached_breadcrumbs(MockFile(b"\xde"), event)
-    assert not event.get("breadcrumbs")
-
-
-# See:
-# https://github.com/getsentry/sentrypad/blob/e1d4feb65c3e9db829cc4ca9d4003ff3c818d95a/src/sentry.cpp#L337-L366
-def test_merge_attached_breadcrumbs_single_crumb():
-    mpack_crumb = msgpack.packb(
-        {
-            "timestamp": "0000-00-00T00:00:00Z",
-            "category": "c",
-            "type": "t",
-            "level": "debug",
-            "message": "m",
-        }
-    )
-    event = {}
-    merge_attached_breadcrumbs(MockFile(mpack_crumb), event)
-    assert event["breadcrumbs"][0]["timestamp"] == "0000-00-00T00:00:00Z"
-    assert event["breadcrumbs"][0]["category"] == "c"
-    assert event["breadcrumbs"][0]["type"] == "t"
-    assert event["breadcrumbs"][0]["level"] == "debug"
-    assert event["breadcrumbs"][0]["message"] == "m"
-
-
-def test_merge_attached_breadcrumbs_timestamp_ordered():
-    event = {}
-    mpack_crumb1 = msgpack.packb({"timestamp": "0001-01-01T01:00:02Z"})
-    merge_attached_breadcrumbs(MockFile(mpack_crumb1), event)
-    assert event["breadcrumbs"][0]["timestamp"] == "0001-01-01T01:00:02Z"
-
-    crumbs_file2 = bytearray()
-    crumbs_file2.extend(msgpack.packb({"timestamp": "0001-01-01T01:00:01Z"}))
-    # File with 2 items to extend cap
-    crumbs_file2.extend(msgpack.packb({"timestamp": "0001-01-01T01:00:01Z"}))
-    merge_attached_breadcrumbs(MockFile(crumbs_file2), event)
-    assert event["breadcrumbs"][0]["timestamp"] == "0001-01-01T01:00:01Z"
-    assert event["breadcrumbs"][1]["timestamp"] == "0001-01-01T01:00:02Z"
-
-    mpack_crumb3 = msgpack.packb({"timestamp": "0001-01-01T01:00:03Z"})
-    merge_attached_breadcrumbs(MockFile(mpack_crumb3), event)
-    assert event["breadcrumbs"][0]["timestamp"] == "0001-01-01T01:00:02Z"
-    assert event["breadcrumbs"][1]["timestamp"] == "0001-01-01T01:00:03Z"
-
-    mpack_crumb4 = msgpack.packb({"timestamp": "0001-01-01T01:00:00Z"})
-    merge_attached_breadcrumbs(MockFile(mpack_crumb4), event)
-    assert event["breadcrumbs"][0]["timestamp"] == "0001-01-01T01:00:02Z"
-    assert event["breadcrumbs"][1]["timestamp"] == "0001-01-01T01:00:03Z"
-
-
-def test_merge_attached_breadcrumbs_capped():
-    # Crumbs are capped by the largest file
-    event = {}
-
-    crumbs_file1 = bytearray()
-    for i in range(0, 2):
-        crumbs_file1.extend(msgpack.packb({"timestamp": "0001-01-01T01:00:01Z"}))
-
-    merge_attached_breadcrumbs(MockFile(crumbs_file1), event)
-    assert len(event["breadcrumbs"]) == 2
-    assert event["breadcrumbs"][0]["timestamp"] == "0001-01-01T01:00:01Z"
-    assert event["breadcrumbs"][1]["timestamp"] == "0001-01-01T01:00:01Z"
-
-    crumbs_file2 = bytearray()
-    for i in range(0, 3):
-        crumbs_file2.extend(msgpack.packb({"timestamp": "0001-01-01T01:00:02Z"}))
-
-    merge_attached_breadcrumbs(MockFile(crumbs_file2), event)
-    assert len(event["breadcrumbs"]) == 3
-    assert event["breadcrumbs"][0]["timestamp"] == "0001-01-01T01:00:02Z"
-    assert event["breadcrumbs"][1]["timestamp"] == "0001-01-01T01:00:02Z"
-    assert event["breadcrumbs"][2]["timestamp"] == "0001-01-01T01:00:02Z"
-
-    crumbs_file3 = msgpack.packb({"timestamp": "0001-01-01T01:00:03Z"})
-    merge_attached_breadcrumbs(MockFile(crumbs_file3), event)
-    assert len(event["breadcrumbs"]) == 3
-    assert event["breadcrumbs"][0]["timestamp"] == "0001-01-01T01:00:02Z"
-    assert event["breadcrumbs"][1]["timestamp"] == "0001-01-01T01:00:02Z"
-    assert event["breadcrumbs"][2]["timestamp"] == "0001-01-01T01:00:03Z"
-
-    crumbs_file4 = msgpack.packb({"timestamp": "0001-01-01T01:00:04Z"})
-    merge_attached_breadcrumbs(MockFile(crumbs_file4), event)
-    assert len(event["breadcrumbs"]) == 3
-    assert event["breadcrumbs"][0]["timestamp"] == "0001-01-01T01:00:02Z"
-    assert event["breadcrumbs"][1]["timestamp"] == "0001-01-01T01:00:03Z"
-    assert event["breadcrumbs"][2]["timestamp"] == "0001-01-01T01:00:04Z"
-
-
-def test_is_minidump():
-    assert is_minidump_event({"exception": {"values": [{"mechanism": {"type": "minidump"}}]}})
-    assert not is_minidump_event({"exception": {"values": [{"mechanism": {"type": "other"}}]}})
-    assert not is_minidump_event({"exception": {"values": [{"mechanism": {"type": None}}]}})
-    assert not is_minidump_event({"exception": {"values": [{"mechanism": None}]}})
-    assert not is_minidump_event({"exception": {"values": [None]}})
-    assert not is_minidump_event({"exception": {"values": []}})
-    assert not is_minidump_event({"exception": {"values": None}})
-    assert not is_minidump_event({"exception": None})
diff --git a/tests/sentry/lang/native/test_unreal.py b/tests/sentry/lang/native/test_unreal.py
deleted file mode 100644
index 6a0d9cc284..0000000000
--- a/tests/sentry/lang/native/test_unreal.py
+++ /dev/null
@@ -1,108 +0,0 @@
-from __future__ import absolute_import
-import os
-
-from symbolic import Unreal4Crash
-
-from sentry.testutils import TestCase
-from sentry.lang.native.minidump import MINIDUMP_ATTACHMENT_TYPE
-from sentry.lang.native.unreal import (
-    merge_unreal_user,
-    unreal_attachment_type,
-    merge_unreal_context_event,
-    merge_unreal_logs_event,
-)
-from sentry.models import UserReport
-
-
-MOCK_EVENT_ID = "12852a74acc943a790c8f1cd23907caa"
-
-
-def get_fixture_path(name):
-    return os.path.join(
-        os.path.dirname(__file__), os.pardir, os.pardir, os.pardir, "fixtures", "native", name
-    )
-
-
-def get_unreal_crash_file():
-    return get_fixture_path("unreal_crash")
-
-
-def test_unreal_attachment_type_minidump():
-    file = MockFile("minidump")
-    assert unreal_attachment_type(file) == MINIDUMP_ATTACHMENT_TYPE
-
-
-def test_unreal_attachment_type_unknown():
-    file = MockFile("something unknown")
-    assert unreal_attachment_type(file) is None
-
-
-class MockFile(TestCase):
-    def __init__(self, type):
-        self.type = type
-
-
-class UnrealIntegrationTest(TestCase):
-    def test_merge_unreal_context_event(self):
-        with open(get_unreal_crash_file(), "rb") as f:
-            event = {"event_id": MOCK_EVENT_ID, "environment": "Production"}
-            user_id = "ebff51ef3c4878627823eebd9ff40eb4|2e7d369327054a448be6c8d3601213cb|C52DC39D-DAF3-5E36-A8D3-BF5F53A5D38F"
-            merge_unreal_user(event, user_id)
-            unreal_crash = Unreal4Crash.from_bytes(f.read())
-            merge_unreal_context_event(unreal_crash.get_context(), event, self.project)
-            self.insta_snapshot(event)
-
-    def test_merge_unreal_context_event_without_user(self):
-        expected_message = "user comments"
-        context = {"runtime_properties": {"user_description": expected_message}}
-        event = {"event_id": MOCK_EVENT_ID}
-        merge_unreal_context_event(context, event, self.project)
-
-        user_report = UserReport.objects.get(event_id=MOCK_EVENT_ID, project=self.project)
-        assert user_report.comments == expected_message
-        assert user_report.name == "unknown"
-        assert event.get("user") is None
-
-    def test_merge_unreal_context_event_with_user(self):
-        expected_message = "user comments"
-        expected_username = "John Doe"
-        context = {
-            "runtime_properties": {
-                "username": expected_username,
-                "user_description": expected_message,
-            }
-        }
-        event = {"event_id": MOCK_EVENT_ID}
-        merge_unreal_context_event(context, event, self.project)
-
-        user_report = UserReport.objects.get(event_id=event["event_id"], project=self.project)
-        assert user_report.comments == expected_message
-        assert user_report.name == expected_username
-        assert event["user"]["username"] == expected_username
-
-    def test_merge_unreal_context_event_without_user_description(self):
-        expected_username = "Jane Bloggs"
-        context = {"runtime_properties": {"username": expected_username}}
-        event = {"event_id": MOCK_EVENT_ID}
-        merge_unreal_context_event(context, event, self.project)
-        try:
-            user_report = UserReport.objects.get(event_id=MOCK_EVENT_ID, project=self.project)
-        except UserReport.DoesNotExist:
-            user_report = None
-
-        assert user_report is None
-        assert event["user"]["username"] == expected_username
-
-    def test_merge_unreal_logs_event(self):
-        with open(get_unreal_crash_file(), "rb") as f:
-            event = {"event_id": MOCK_EVENT_ID, "environment": None}
-            unreal_crash = Unreal4Crash.from_bytes(f.read())
-            merge_unreal_logs_event(unreal_crash.get_logs(), event)
-            breadcrumbs = event["breadcrumbs"]["values"]
-            assert len(breadcrumbs) == 100
-            assert breadcrumbs[0]["timestamp"] == "2018-11-20T11:47:14Z"
-            assert breadcrumbs[0]["message"] == "   4. 'Parallels Display Adapter (WDDM)' (P:0 D:0)"
-            assert breadcrumbs[0]["category"] == "LogWindows"
-            assert breadcrumbs[99]["timestamp"] == "2018-11-20T11:47:15Z"
-            assert breadcrumbs[99]["message"] == "Texture pool size now 1000 MB"
-            assert breadcrumbs[99]["category"] == "LogContentStreaming"
diff --git a/tests/sentry/lang/native/test_utils.py b/tests/sentry/lang/native/test_utils.py
index 5c1e935221..1ed6706ece 100644
--- a/tests/sentry/lang/native/test_utils.py
+++ b/tests/sentry/lang/native/test_utils.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry.lang.native.utils import get_sdk_from_event
+from sentry.lang.native.utils import get_sdk_from_event, is_minidump_event
 
 
 def test_get_sdk_from_event():
@@ -29,3 +29,14 @@ def test_get_sdk_from_event():
     assert sdk_info["version_major"] == 9
     assert sdk_info["version_minor"] == 3
     assert sdk_info["version_patchlevel"] == 1
+
+
+def test_is_minidump():
+    assert is_minidump_event({"exception": {"values": [{"mechanism": {"type": "minidump"}}]}})
+    assert not is_minidump_event({"exception": {"values": [{"mechanism": {"type": "other"}}]}})
+    assert not is_minidump_event({"exception": {"values": [{"mechanism": {"type": None}}]}})
+    assert not is_minidump_event({"exception": {"values": [{"mechanism": None}]}})
+    assert not is_minidump_event({"exception": {"values": [None]}})
+    assert not is_minidump_event({"exception": {"values": []}})
+    assert not is_minidump_event({"exception": {"values": None}})
+    assert not is_minidump_event({"exception": None})
diff --git a/tests/sentry/models/test_monitor.py b/tests/sentry/models/test_monitor.py
index 077d6f7a2e..21bbf40c33 100644
--- a/tests/sentry/models/test_monitor.py
+++ b/tests/sentry/models/test_monitor.py
@@ -47,8 +47,8 @@ class MonitorTestCase(TestCase):
             2019, 2, 1, 1, 10, 20, tzinfo=timezone.utc
         )
 
-    @patch("sentry.coreapi.ClientApiHelper.insert_data_to_database")
-    def test_mark_failed_default_params(self, mock_insert_data_to_database):
+    @patch("sentry.coreapi.insert_data_to_database_legacy")
+    def test_mark_failed_default_params(self, mock_insert_data_to_database_legacy):
         monitor = Monitor.objects.create(
             name="test monitor",
             organization_id=self.organization.id,
@@ -58,9 +58,9 @@ class MonitorTestCase(TestCase):
         )
         assert monitor.mark_failed()
 
-        assert len(mock_insert_data_to_database.mock_calls) == 1
+        assert len(mock_insert_data_to_database_legacy.mock_calls) == 1
 
-        event = mock_insert_data_to_database.mock_calls[0].args[0]
+        event = mock_insert_data_to_database_legacy.mock_calls[0].args[0]
 
         assert dict(
             event,
@@ -84,8 +84,8 @@ class MonitorTestCase(TestCase):
             }
         ) == dict(event)
 
-    @patch("sentry.coreapi.ClientApiHelper.insert_data_to_database")
-    def test_mark_failed_with_reason(self, mock_insert_data_to_database):
+    @patch("sentry.coreapi.insert_data_to_database_legacy")
+    def test_mark_failed_with_reason(self, mock_insert_data_to_database_legacy):
         monitor = Monitor.objects.create(
             name="test monitor",
             organization_id=self.organization.id,
@@ -95,9 +95,9 @@ class MonitorTestCase(TestCase):
         )
         assert monitor.mark_failed(reason=MonitorFailure.DURATION)
 
-        assert len(mock_insert_data_to_database.mock_calls) == 1
+        assert len(mock_insert_data_to_database_legacy.mock_calls) == 1
 
-        event = mock_insert_data_to_database.mock_calls[0].args[0]
+        event = mock_insert_data_to_database_legacy.mock_calls[0].args[0]
 
         assert dict(
             event,
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index 8fcd5ca9d5..08745bc93b 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -19,13 +19,6 @@ from sentry.utils.http import (
     origin_from_request,
     heuristic_decode,
 )
-from sentry.utils.data_filters import (
-    is_valid_ip,
-    is_valid_release,
-    is_valid_error_message,
-    FilterTypes,
-)
-from sentry.relay.config import get_project_config
 
 
 class AbsoluteUriTest(unittest.TestCase):
@@ -252,84 +245,6 @@ class IsValidOriginTestCase(unittest.TestCase):
         assert result is True
 
 
-class IsValidIPTestCase(TestCase):
-    def is_valid_ip(self, ip, inputs):
-        self.project.update_option("sentry:blacklisted_ips", inputs)
-        project_config = get_project_config(self.project)
-        return is_valid_ip(project_config, ip)
-
-    def test_not_in_blacklist(self):
-        assert self.is_valid_ip("127.0.0.1", [])
-        assert self.is_valid_ip("127.0.0.1", ["0.0.0.0", "192.168.1.1", "10.0.0.0/8"])
-
-    def test_match_blacklist(self):
-        assert not self.is_valid_ip("127.0.0.1", ["127.0.0.1"])
-        assert not self.is_valid_ip("127.0.0.1", ["0.0.0.0", "127.0.0.1", "192.168.1.1"])
-
-    def test_match_blacklist_range(self):
-        assert not self.is_valid_ip("127.0.0.1", ["127.0.0.0/8"])
-        assert not self.is_valid_ip("127.0.0.1", ["0.0.0.0", "127.0.0.0/8", "192.168.1.0/8"])
-
-    def test_garbage_input(self):
-        assert self.is_valid_ip("127.0.0.1", ["lol/bar"])
-
-
-class IsValidReleaseTestCase(TestCase):
-    def is_valid_release(self, value, inputs):
-        self.project.update_option(u"sentry:{}".format(FilterTypes.RELEASES), inputs)
-        project_config = get_project_config(self.project)
-        return is_valid_release(project_config, value)
-
-    def test_release_not_in_list(self):
-        assert self.is_valid_release("1.2.3", None)
-        assert self.is_valid_release("1.2.3", [])
-        assert self.is_valid_release("1.2.3", ["1.1.1", "1.1.2", "1.2.1"])
-
-    def test_release_match_list(self):
-        assert not self.is_valid_release("1.2.3", ["1.2.3"])
-        assert not self.is_valid_release("1.2.3", ["1.2.*", "1.3.0", "1.3.1"])
-        assert not self.is_valid_release("1.2.3", ["1.3.0", "1.*", "1.3.1"])
-
-    def test_garbage_data(self):
-        assert self.is_valid_release(1, ["1.2.3"])
-
-
-class IsValidErrorMessageTestCase(TestCase):
-    def is_valid_error_message(self, value, inputs):
-        self.project.update_option(u"sentry:{}".format(FilterTypes.ERROR_MESSAGES), inputs)
-        project_config = get_project_config(self.project)
-        return is_valid_error_message(project_config, value)
-
-    def test_error_class_not_in_list(self):
-        assert self.is_valid_error_message(
-            "ZeroDivisionError: integer division or modulo by zero", None
-        )
-        assert self.is_valid_error_message(
-            "ZeroDivisionError: integer division or modulo by zero", []
-        )
-        assert self.is_valid_error_message(
-            "ZeroDivisionError: integer division or modulo by zero",
-            ["TypeError*", "*: cannot import name*"],
-        )
-
-    def test_error_class_match_list(self):
-        assert not self.is_valid_error_message(
-            "ImportError: cannot import name is_valid", ["*: cannot import name*"]
-        )
-        assert not self.is_valid_error_message(
-            "ZeroDivisionError: divided by 0", ["ImportError*", "TypeError*", "*: divided by 0"]
-        )
-
-    def test_garbage_data(self):
-        assert self.is_valid_error_message(1, ["ImportError*"])
-        assert self.is_valid_error_message(None, ["ImportError*"])
-        assert self.is_valid_error_message({}, ["ImportError*"])
-
-    def test_bad_characters_in_pattern(self):
-        patterns = [u"*google_tag_manager['GTM-3TL3'].macro(...)*"]
-        assert self.is_valid_error_message("it bad", patterns)
-
-
 class OriginFromRequestTestCase(TestCase):
     def test_nothing(self):
         request = HttpRequest()
diff --git a/tests/sentry/utils/test_csp.py b/tests/sentry/utils/test_csp.py
index 8c2995601c..70a8c71b4a 100644
--- a/tests/sentry/utils/test_csp.py
+++ b/tests/sentry/utils/test_csp.py
@@ -18,32 +18,3 @@ from sentry.interfaces.security import Csp
 def test_invalid_csp_report(report):
     with pytest.raises(InterfaceValidationError):
         Csp.to_python(report)
-
-
-@pytest.mark.parametrize(
-    "report",
-    (
-        {"effective_directive": "style-src", "blocked_uri": "about"},
-        {"effective_directive": "style-src", "blocked_uri": "ms-browser-extension"},
-        {"effective_directive": "style-src", "source_file": "chrome-extension://fdsa"},
-        {"effective_directive": "style-src", "source_file": "http://localhost:8000"},
-        {"effective_directive": "style-src", "source_file": "http://localhost"},
-        {"effective_directive": "style-src", "source_file": "http://foo.superfish.com"},
-        {"effective_directive": "style-src", "blocked_uri": "http://foo.superfish.com"},
-    ),
-)
-def test_blocked_csp_report(report):
-    assert Csp.to_python(report).should_filter() is True
-
-
-@pytest.mark.parametrize(
-    "report",
-    (
-        {"effective_directive": "style-src", "blocked_uri": "http://example.com"},
-        {"effective_directive": "script-src", "blocked_uri": "http://example.com"},
-        {"effective_directive": "style-src", "source_file": "http://example.com"},
-        {"effective_directive": "style-src"},
-    ),
-)
-def test_valid_csp_report(report):
-    assert Csp.to_python(report).should_filter() is False
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index ed961f1068..e62a712054 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -2,653 +2,13 @@
 
 from __future__ import absolute_import
 
-import pytest
 from sentry.utils.compat import mock
 
 from django.core.urlresolvers import reverse
-from django.core.files.uploadedfile import SimpleUploadedFile
 from exam import fixture
-from sentry.utils.compat.mock import Mock
-from six import BytesIO
 
-from sentry.coreapi import APIRateLimited
-from sentry.models import ProjectKey, EventAttachment
-from sentry.signals import event_accepted
-from sentry.testutils import assert_mock_called_once_with_partial, TestCase
+from sentry.testutils import TestCase
 from sentry.utils import json
-from sentry.utils.data_filters import FilterTypes
-
-
-@pytest.mark.obsolete("functionality moved and tested in Relay")
-class SecurityReportCspTest(TestCase):
-    @fixture
-    def path(self):
-        path = reverse("sentry-api-security-report", kwargs={"project_id": self.project.id})
-        return path + "?sentry_key=%s" % self.projectkey.public_key
-
-    @pytest.mark.obsolete("can be removed, covered in Relay")
-    def test_get_response(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 405, resp.content
-
-    @pytest.mark.obsolete("can be removed, NOT worth porting to Relay")
-    def test_invalid_content_type(self):
-        resp = self.client.post(self.path, content_type="text/plain")
-        assert resp.status_code == 400, resp.content
-
-    @pytest.mark.obsolete("can be removed, NOT worth porting to Relay")
-    def test_missing_csp_report(self):
-        resp = self.client.post(
-            self.path,
-            content_type="application/csp-report",
-            data='{"lol":1}',
-            HTTP_USER_AGENT="awesome",
-        )
-        assert resp.status_code == 400, resp.content
-
-    @pytest.mark.obsolete(
-        "ported to Relay", "tests/integration/test_security_report.py::test_uses_origins"
-    )
-    @mock.patch("sentry.utils.http.get_origins")
-    def test_bad_origin(self, get_origins):
-        get_origins.return_value = ["example.com"]
-        resp = self.client.post(
-            self.path,
-            content_type="application/csp-report",
-            data='{"csp-report":{"document-uri":"http://lolnope.com","effective-directive":"img-src",'
-            '"violated-directive":"img-src","source-file":"test.html"}}',
-            HTTP_USER_AGENT="awesome",
-        )
-        assert resp.status_code == 403, resp.content
-
-        get_origins.return_value = ["*"]
-        resp = self.client.post(
-            self.path,
-            content_type="application/csp-report",
-            data='{"csp-report":{"document-uri":"about:blank"}}',
-            HTTP_USER_AGENT="awesome",
-        )
-        assert resp.status_code == 400, resp.content
-
-    @pytest.mark.obsolete(
-        "already covered in Relay by multiple integration tests",
-        "tests/integration/test_security_report.py",
-    )
-    @mock.patch("sentry.web.api.is_valid_origin", mock.Mock(return_value=True))
-    @mock.patch("sentry.web.api.SecurityReportView.process")
-    def test_post_success(self, process):
-        process.return_value = "ok"
-        resp = self._postCspWithHeader(
-            {
-                "document-uri": "http://example.com",
-                "source-file": "http://example.com",
-                "effective-directive": "style-src",
-                "violated-directive": "style-src",
-                "disposition": "enforce",
-            }
-        )
-        assert resp.status_code == 201, resp.content
-
-
-@pytest.mark.obsolete("functionality moved and tested in Relay")
-class SecurityReportHpkpTest(TestCase):
-    @fixture
-    def path(self):
-        path = reverse("sentry-api-security-report", kwargs={"project_id": self.project.id})
-        return path + "?sentry_key=%s" % self.projectkey.public_key
-
-    @mock.patch("sentry.web.api.is_valid_origin", mock.Mock(return_value=True))
-    @mock.patch("sentry.web.api.SecurityReportView.process")
-    def test_post_success(self, process):
-        process.return_value = "ok"
-        resp = self.client.post(
-            self.path,
-            content_type="application/json",
-            data=json.dumps(
-                {
-                    "date-time": "2014-04-06T13:00:50Z",
-                    "hostname": "www.example.com",
-                    "port": 443,
-                    "effective-expiration-date": "2014-05-01T12:40:50Z",
-                    "include-subdomains": False,
-                    "served-certificate-chain": [
-                        "-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"
-                    ],
-                    "validated-certificate-chain": [
-                        "-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"
-                    ],
-                    "known-pins": ['pin-sha256="E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g="'],
-                }
-            ),
-            HTTP_USER_AGENT="awesome",
-        )
-        assert resp.status_code == 201, resp.content
-
-
-@pytest.mark.obsolete(
-    "functionality moved and tested in Relay",
-    "tests/integration/test_security_report.py::test_security_reports_no_processing",
-)
-class SecurityReportExpectCTTest(TestCase):
-    @fixture
-    def path(self):
-        path = reverse("sentry-api-security-report", kwargs={"project_id": self.project.id})
-        return path + "?sentry_key=%s" % self.projectkey.public_key
-
-    @mock.patch("sentry.web.api.is_valid_origin", mock.Mock(return_value=True))
-    @mock.patch("sentry.web.api.SecurityReportView.process")
-    def test_post_success(self, process):
-        process.return_value = "ok"
-        resp = self.client.post(
-            self.path,
-            content_type="application/expect-ct-report+json",
-            data=json.dumps(
-                {
-                    "expect-ct-report": {
-                        "date-time": "2014-04-06T13:00:50Z",
-                        "hostname": "www.example.com",
-                        "port": 443,
-                        "effective-expiration-date": "2014-05-01T12:40:50Z",
-                        "served-certificate-chain": [
-                            "-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"
-                        ],
-                        "validated-certificate-chain": [
-                            "-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"
-                        ],
-                        "scts": [
-                            {
-                                "version": 1,
-                                "status": "invalid",
-                                "source": "embedded",
-                                "serialized_sct": "ABCD==",
-                            }
-                        ],
-                    }
-                }
-            ),
-            HTTP_USER_AGENT="awesome",
-        )
-        assert resp.status_code == 201, resp.content
-
-
-@pytest.mark.obsolete(
-    "functionality moved and tested in Relay",
-    "tests/integration/test_security_report.py::test_security_reports_no_processing",
-)
-class SecurityReportExpectStapleTest(TestCase):
-    @fixture
-    def path(self):
-        path = reverse("sentry-api-security-report", kwargs={"project_id": self.project.id})
-        return path + "?sentry_key=%s" % self.projectkey.public_key
-
-    @mock.patch("sentry.web.api.is_valid_origin", mock.Mock(return_value=True))
-    @mock.patch("sentry.web.api.SecurityReportView.process")
-    def test_post_success(self, process):
-        process.return_value = "ok"
-        resp = self.client.post(
-            self.path,
-            content_type="application/expect-staple-report",
-            data=json.dumps(
-                {
-                    "expect-staple-report": {
-                        "date-time": "2014-04-06T13:00:50Z",
-                        "hostname": "www.example.com",
-                        "port": 443,
-                        "response-status": "ERROR_RESPONSE",
-                        "cert-status": "REVOKED",
-                        "effective-expiration-date": "2014-05-01T12:40:50Z",
-                        "served-certificate-chain": [
-                            "-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"
-                        ],
-                        "validated-certificate-chain": [
-                            "-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"
-                        ],
-                    }
-                }
-            ),
-            HTTP_USER_AGENT="awesome",
-        )
-        assert resp.status_code == 201, resp.content
-
-
-@pytest.mark.obsolete("functionality moved in Relay")
-class StoreViewTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse("sentry-api-store", kwargs={"project_id": self.project.id})
-
-    @pytest.mark.obsolete("covered in Relay", "tests/integration/test_store.py")
-    @mock.patch("sentry.web.api.StoreView._parse_header")
-    def test_options_response(self, parse_header):
-        project = self.create_project()
-        pk = ProjectKey.objects.get_or_create(project=project)[0]
-        parse_header.return_value = {
-            "sentry_project": project.id,
-            "sentry_key": pk.public_key,
-            "sentry_version": "2.0",
-        }
-        resp = self.client.options(self.path)
-        assert resp.status_code == 200, (resp.status_code, resp.content)
-        assert resp.has_header("Allow")
-        self.assertEquals(resp["Allow"], "GET, POST, HEAD, OPTIONS")
-        assert resp.has_header("Content-Length")
-        self.assertEquals(resp["Content-Length"], "0")
-
-    @pytest.mark.obsolete(
-        "Will not be directly tested since implementation is part of axis-web CORS"
-    )
-    def test_options_with_no_origin_or_referrer(self):
-        resp = self.client.options(self.path)
-        assert resp.status_code == 200, (resp.status_code, resp.content)
-        assert resp.has_header("Access-Control-Allow-Origin")
-        self.assertEquals(resp["Access-Control-Allow-Origin"], "*")
-
-    @pytest.mark.obsolete(
-        "Will not be directly tested since implementation is part of axis-web CORS"
-    )
-    def test_options_response_with_valid_origin(self):
-        resp = self.client.options(self.path, HTTP_ORIGIN="http://foo.com")
-        assert resp.status_code == 200, (resp.status_code, resp.content)
-        assert resp.has_header("Access-Control-Allow-Origin")
-        self.assertEquals(resp["Access-Control-Allow-Origin"], "http://foo.com")
-
-    @pytest.mark.obsolete(
-        "Will not be directly tested since implementation is part of axis-web CORS"
-    )
-    def test_options_response_with_valid_referrer(self):
-        resp = self.client.options(self.path, HTTP_REFERER="http://foo.com")
-        assert resp.status_code == 200, (resp.status_code, resp.content)
-        assert resp.has_header("Access-Control-Allow-Origin")
-        self.assertEquals(resp["Access-Control-Allow-Origin"], "http://foo.com")
-
-    @pytest.mark.obsolete(
-        "Will not be directly tested since implementation is part of axis-web CORS"
-    )
-    def test_options_response_origin_preferred_over_referrer(self):
-        resp = self.client.options(
-            self.path, HTTP_REFERER="http://foo.com", HTTP_ORIGIN="http://bar.com"
-        )
-        assert resp.status_code == 200, (resp.status_code, resp.content)
-        assert resp.has_header("Access-Control-Allow-Origin")
-        self.assertEquals(resp["Access-Control-Allow-Origin"], "http://bar.com")
-
-    @pytest.mark.obsolete("Unit test in Relay", "relay-filter/client_ips.rs")
-    @mock.patch("sentry.event_manager.is_valid_ip", mock.Mock(return_value=False))
-    def test_request_with_blacklisted_ip(self):
-        resp = self._postWithHeader({})
-        assert resp.status_code == 403, (resp.status_code, resp.content)
-
-    @pytest.mark.obsolete("Unit test in Relay", "relay-filter/releases.rs")
-    @mock.patch("sentry.event_manager.is_valid_release", mock.Mock(return_value=False))
-    def test_request_with_filtered_release(self):
-        body = {
-            "release": "abcdefg",
-            "message": "foo bar",
-            "user": {"ip_address": "127.0.0.1"},
-            "request": {
-                "method": "GET",
-                "url": "http://example.com/",
-                "env": {"REMOTE_ADDR": "127.0.0.1"},
-            },
-        }
-        resp = self._postWithHeader(body)
-        assert resp.status_code == 403, (resp.status_code, resp.content)
-
-    @pytest.mark.obsolete("Unit test in Relay", "relay-filter/error_messages.rs")
-    @mock.patch("sentry.event_manager.is_valid_error_message", mock.Mock(return_value=False))
-    def test_request_with_filtered_error(self):
-        body = {
-            "release": "abcdefg",
-            "message": "foo bar",
-            "user": {"ip_address": "127.0.0.1"},
-            "request": {
-                "method": "GET",
-                "url": "http://example.com/",
-                "env": {"REMOTE_ADDR": "127.0.0.1"},
-            },
-        }
-        resp = self._postWithHeader(body)
-        assert resp.status_code == 403, (resp.status_code, resp.content)
-
-    @pytest.mark.obsolete("Unit test in Relay", "relay-filter/client_ips.rs")
-    def test_request_with_invalid_ip(self):
-        self.project.update_option("sentry:blacklisted_ips", ["127.0.0.1"])
-        body = {
-            "release": "abcdefg",
-            "message": "foo bar",
-            "user": {"ip_address": "127.0.0.1"},
-            "request": {
-                "method": "GET",
-                "url": "http://example.com/",
-                "env": {"REMOTE_ADDR": "127.0.0.1"},
-            },
-        }
-        resp = self._postWithHeader(body)
-        assert resp.status_code == 403, (resp.status_code, resp.content)
-
-    @pytest.mark.obsolete("Unit test in Relay", "relay-filter/releases.rs")
-    def test_request_with_invalid_release(self):
-        self.project.update_option(u"sentry:{}".format(FilterTypes.RELEASES), ["1.3.2"])
-        body = {
-            "release": "1.3.2",
-            "message": "foo bar",
-            "user": {"ip_address": "127.0.0.1"},
-            "request": {
-                "method": "GET",
-                "url": "http://example.com/",
-                "env": {"REMOTE_ADDR": "127.0.0.1"},
-            },
-        }
-        resp = self._postWithHeader(body)
-        assert resp.status_code == 403, (resp.status_code, resp.content)
-
-    @pytest.mark.obsolete("Unit test in Relay", "relay-filter/releases.rs")
-    def test_request_with_short_release_globbing(self):
-        self.project.update_option(u"sentry:{}".format(FilterTypes.RELEASES), ["1.*"])
-        body = {
-            "release": "1.3.2",
-            "message": "foo bar",
-            "user": {"ip_address": "127.0.0.1"},
-            "request": {
-                "method": "GET",
-                "url": "http://example.com/",
-                "env": {"REMOTE_ADDR": "127.0.0.1"},
-            },
-        }
-        resp = self._postWithHeader(body)
-        assert resp.status_code == 403, (resp.status_code, resp.content)
-
-    @pytest.mark.obsolete("Unit test in Relay", "relay-filter/releases.rs")
-    def test_request_with_longer_release_globbing(self):
-        self.project.update_option(u"sentry:{}".format(FilterTypes.RELEASES), ["2.1.*"])
-        body = {
-            "release": "2.1.3",
-            "message": "foo bar",
-            "user": {"ip_address": "127.0.0.1"},
-            "request": {
-                "method": "GET",
-                "url": "http://example.com/",
-                "env": {"REMOTE_ADDR": "127.0.0.1"},
-            },
-        }
-        resp = self._postWithHeader(body)
-        assert resp.status_code == 403, (resp.status_code, resp.content)
-
-    def test_request_with_invalid_error_messages(self):
-        self.project.update_option(
-            u"sentry:{}".format(FilterTypes.ERROR_MESSAGES), ["ZeroDivisionError*"]
-        )
-        body = {
-            "release": "abcdefg",
-            "user": {"ip_address": "127.0.0.1"},
-            "request": {
-                "method": "GET",
-                "url": "http://example.com/",
-                "env": {"REMOTE_ADDR": "127.0.0.1"},
-            },
-            "logentry": {
-                "formatted": "ZeroDivisionError: integer division or modulo by zero",
-                "message": "%s: integer division or modulo by zero",
-            },
-        }
-        resp = self._postWithHeader(body)
-        assert resp.status_code == 403, (resp.status_code, resp.content)
-
-    @pytest.mark.obsolete(
-        "Moved to Relay", "tests/integration/test_basic.py::test_store_allowed_origins_passes"
-    )
-    @mock.patch("sentry.relay.config.get_origins")
-    def test_request_with_bad_origin(self, get_origins):
-        get_origins.return_value = ["foo.com"]
-
-        body = {"logentry": {"formatted": "hello world"}}
-
-        resp = self._postWithHeader(body, HTTP_ORIGIN="lolnope.com")
-        assert resp.status_code == 403, (resp.status_code, resp.content)
-        assert b"Invalid origin" in resp.content
-
-    @pytest.mark.obsolete("Unit test in Relay", "relay-filter/error_messages.rs")
-    def test_request_with_beginning_glob(self):
-        self.project.update_option(
-            u"sentry:{}".format(FilterTypes.ERROR_MESSAGES),
-            ["*: integer division or modulo by zero"],
-        )
-        body = {
-            "release": "abcdefg",
-            "user": {"ip_address": "127.0.0.1"},
-            "request": {
-                "method": "GET",
-                "url": "http://example.com/",
-                "env": {"REMOTE_ADDR": "127.0.0.1"},
-            },
-            "logentry": {
-                "message": "ZeroDivisionError: integer division or modulo by zero",
-                "formatted": "",
-            },
-        }
-        resp = self._postWithHeader(body)
-        assert resp.status_code == 403, (resp.status_code, resp.content)
-
-    @pytest.mark.obsolete("Unit test in Relay, PII/data scrubbing")
-    @mock.patch("sentry.coreapi.ClientApiHelper.insert_data_to_database")
-    def test_scrubs_ip_address(self, mock_insert_data_to_database):
-        self.project.update_option("sentry:scrub_ip_address", True)
-        body = {
-            "message": "foo bar",
-            "sdk": {"name": "sentry-browser", "version": "3.23.3", "client_ip": "127.0.0.1"},
-            "user": {"ip_address": "127.0.0.1"},
-            "request": {
-                "method": "GET",
-                "url": "http://example.com/",
-                "env": {"REMOTE_ADDR": "127.0.0.1"},
-            },
-        }
-        resp = self._postWithHeader(body)
-        assert resp.status_code == 200, (resp.status_code, resp.content)
-
-        call_data = mock_insert_data_to_database.call_args[0][0]
-        assert not call_data["user"].get("ip_address")
-        assert not call_data["request"]["env"].get("REMOTE_ADDR")
-        assert not call_data["sdk"].get("client_ip")
-
-    @pytest.mark.obsolete("Unit test in Relay, PII/data scrubbing")
-    @mock.patch("sentry.coreapi.ClientApiHelper.insert_data_to_database")
-    def test_scrubs_org_ip_address_override(self, mock_insert_data_to_database):
-        self.organization.update_option("sentry:require_scrub_ip_address", True)
-        self.project.update_option("sentry:scrub_ip_address", False)
-        body = {
-            "message": "foo bar",
-            "user": {"ip_address": "127.0.0.1"},
-            "request": {
-                "method": "GET",
-                "url": "http://example.com/",
-                "env": {"REMOTE_ADDR": "127.0.0.1"},
-            },
-        }
-        resp = self._postWithHeader(body)
-        assert resp.status_code == 200, (resp.status_code, resp.content)
-
-        call_data = mock_insert_data_to_database.call_args[0][0]
-        assert not call_data["user"].get("ip_address")
-        assert not call_data["request"]["env"].get("REMOTE_ADDR")
-
-    @pytest.mark.obsolete("Unit test in Relay, PII/data scrubbing")
-    @mock.patch("sentry.coreapi.ClientApiHelper.insert_data_to_database")
-    def test_scrub_data_off(self, mock_insert_data_to_database):
-        self.project.update_option("sentry:scrub_data", False)
-        self.project.update_option("sentry:scrub_defaults", False)
-        body = {
-            "message": "foo bar",
-            "user": {"ip_address": "127.0.0.1"},
-            "request": {
-                "method": "GET",
-                "url": "http://example.com/",
-                "data": "password=lol&foo=1&bar=2&baz=3",
-            },
-        }
-        resp = self._postWithHeader(body)
-        assert resp.status_code == 200, (resp.status_code, resp.content)
-
-        call_data = mock_insert_data_to_database.call_args[0][0]
-        assert call_data["request"]["data"] == {
-            "password": "lol",
-            "foo": "1",
-            "bar": "2",
-            "baz": "3",
-        }
-
-    @pytest.mark.obsolete("Unit test in Relay, PII/data scrubbing")
-    @mock.patch("sentry.coreapi.ClientApiHelper.insert_data_to_database")
-    def test_scrub_data_on(self, mock_insert_data_to_database):
-        self.project.update_option("sentry:scrub_data", True)
-        self.project.update_option("sentry:scrub_defaults", False)
-        body = {
-            "message": "foo bar",
-            "user": {"ip_address": "127.0.0.1"},
-            "request": {
-                "method": "GET",
-                "url": "http://example.com/",
-                "data": "password=lol&foo=1&bar=2&baz=3",
-            },
-        }
-        resp = self._postWithHeader(body)
-        assert resp.status_code == 200, (resp.status_code, resp.content)
-
-        call_data = mock_insert_data_to_database.call_args[0][0]
-        assert call_data["request"]["data"] == {
-            "password": "lol",
-            "foo": "1",
-            "bar": "2",
-            "baz": "3",
-        }
-
-    @pytest.mark.obsolete("Unit test in Relay, PII/data scrubbing")
-    @mock.patch("sentry.coreapi.ClientApiHelper.insert_data_to_database")
-    def test_scrub_data_defaults(self, mock_insert_data_to_database):
-        self.project.update_option("sentry:scrub_data", True)
-        self.project.update_option("sentry:scrub_defaults", True)
-        body = {
-            "message": "foo bar",
-            "user": {"ip_address": "127.0.0.1"},
-            "request": {
-                "method": "GET",
-                "url": "http://example.com/",
-                "data": "password=lol&foo=1&bar=2&baz=3",
-            },
-        }
-        resp = self._postWithHeader(body)
-        assert resp.status_code == 200, (resp.status_code, resp.content)
-
-        call_data = mock_insert_data_to_database.call_args[0][0]
-        assert call_data["request"]["data"] == {
-            "password": "[Filtered]",
-            "foo": "1",
-            "bar": "2",
-            "baz": "3",
-        }
-
-    @pytest.mark.obsolete("Unit test in Relay, PII/data scrubbing")
-    @mock.patch("sentry.coreapi.ClientApiHelper.insert_data_to_database")
-    def test_scrub_data_sensitive_fields(self, mock_insert_data_to_database):
-        self.project.update_option("sentry:scrub_data", True)
-        self.project.update_option("sentry:scrub_defaults", True)
-        self.project.update_option("sentry:sensitive_fields", ["foo", "bar"])
-        body = {
-            "message": "foo bar",
-            "user": {"ip_address": "127.0.0.1"},
-            "request": {
-                "method": "GET",
-                "url": "http://example.com/",
-                "data": "password=lol&foo=1&bar=2&baz=3",
-            },
-        }
-        resp = self._postWithHeader(body)
-        assert resp.status_code == 200, (resp.status_code, resp.content)
-
-        call_data = mock_insert_data_to_database.call_args[0][0]
-        assert call_data["request"]["data"] == {
-            "password": "[Filtered]",
-            "foo": "[Filtered]",
-            "bar": "[Filtered]",
-            "baz": "3",
-        }
-
-    @pytest.mark.obsolete("Unit test in Relay, PII/data scrubbing")
-    @mock.patch("sentry.coreapi.ClientApiHelper.insert_data_to_database")
-    def test_scrub_data_org_override(self, mock_insert_data_to_database):
-        self.organization.update_option("sentry:require_scrub_data", True)
-        self.project.update_option("sentry:scrub_data", False)
-        self.organization.update_option("sentry:require_scrub_defaults", True)
-        self.project.update_option("sentry:scrub_defaults", False)
-        body = {
-            "message": "foo bar",
-            "user": {"ip_address": "127.0.0.1"},
-            "request": {
-                "method": "GET",
-                "url": "http://example.com/",
-                "data": "password=lol&foo=1&bar=2&baz=3",
-            },
-        }
-        resp = self._postWithHeader(body)
-        assert resp.status_code == 200, (resp.status_code, resp.content)
-
-        call_data = mock_insert_data_to_database.call_args[0][0]
-        assert call_data["request"]["data"] == {
-            "password": "[Filtered]",
-            "foo": "1",
-            "bar": "2",
-            "baz": "3",
-        }
-
-    @pytest.mark.obsolete("Unit test in Relay, PII/data scrubbing")
-    @mock.patch("sentry.coreapi.ClientApiHelper.insert_data_to_database")
-    def test_scrub_data_org_override_sensitive_fields(self, mock_insert_data_to_database):
-        self.organization.update_option("sentry:require_scrub_data", True)
-        self.organization.update_option("sentry:require_scrub_defaults", True)
-        self.organization.update_option("sentry:sensitive_fields", ["baz"])
-        self.project.update_option("sentry:sensitive_fields", ["foo", "bar"])
-        body = {
-            "message": "foo bar",
-            "user": {"ip_address": "127.0.0.1"},
-            "request": {
-                "method": "GET",
-                "url": "http://example.com/",
-                "data": "password=lol&foo=1&bar=2&baz=3",
-            },
-        }
-        resp = self._postWithHeader(body)
-        assert resp.status_code == 200, (resp.status_code, resp.content)
-
-        call_data = mock_insert_data_to_database.call_args[0][0]
-        assert call_data["request"]["data"] == {
-            "password": "[Filtered]",
-            "foo": "[Filtered]",
-            "bar": "[Filtered]",
-            "baz": "[Filtered]",
-        }
-
-    @mock.patch("sentry.coreapi.ClientApiHelper.insert_data_to_database")
-    def test_uses_client_as_sdk(self, mock_insert_data_to_database):
-        body = {"message": "foo bar"}
-        resp = self._postWithHeader(body)
-        assert resp.status_code == 200, (resp.status_code, resp.content)
-
-        call_data = mock_insert_data_to_database.call_args[0][0]
-        assert call_data["sdk"] == {"name": "_postWithHeader", "version": "0.0.0"}
-
-    @mock.patch("sentry.coreapi.ClientApiHelper.insert_data_to_database", Mock())
-    def test_accepted_signal(self):
-        mock_event_accepted = Mock()
-
-        event_accepted.connect(mock_event_accepted)
-
-        resp = self._postWithHeader({"logentry": {"message": u"hello"}})
-
-        assert resp.status_code == 200, resp.content
-
-        assert_mock_called_once_with_partial(
-            mock_event_accepted, ip="127.0.0.1", project=self.project, signal=event_accepted
-        )
 
 
 class CrossDomainXmlTest(TestCase):
@@ -698,94 +58,6 @@ class CrossDomainXmlTest(TestCase):
         )
 
 
-class EventAttachmentStoreViewTest(TestCase):
-    @fixture
-    def path(self):
-        # TODO: Having the event set here means the case where event isnt' created
-        # yet isn't covered by this test class
-        return reverse(
-            "sentry-api-event-attachment",
-            kwargs={"project_id": self.project.id, "event_id": self.event.event_id},
-        )
-
-    def has_attachment(self):
-        return EventAttachment.objects.filter(
-            project_id=self.project.id, event_id=self.event.event_id
-        ).exists()
-
-    def test_event_attachments_feature_creates_attachment(self):
-        out = BytesIO()
-        out.write(b"hi")
-        with self.feature("organizations:event-attachments"):
-            response = self._postEventAttachmentWithHeader(
-                {
-                    "attachment1": SimpleUploadedFile(
-                        "mapping.txt", out.getvalue(), content_type="text/plain"
-                    )
-                },
-                format="multipart",
-            )
-
-        assert response.status_code == 201
-        assert self.has_attachment()
-
-    def test_event_attachments_without_feature_returns_forbidden(self):
-        out = BytesIO()
-        out.write(b"hi")
-        with self.feature({"organizations:event-attachments": False}):
-            response = self._postEventAttachmentWithHeader(
-                {
-                    "attachment1": SimpleUploadedFile(
-                        "mapping.txt", out.getvalue(), content_type="text/plain"
-                    )
-                },
-                format="multipart",
-            )
-
-        assert response.status_code == 403
-        assert not self.has_attachment()
-
-    def test_event_attachments_without_files_returns_400(self):
-        out = BytesIO()
-        out.write(b"hi")
-        with self.feature("organizations:event-attachments"):
-            response = self._postEventAttachmentWithHeader({}, format="multipart")
-
-        assert response.status_code == 400
-        assert not self.has_attachment()
-
-    def test_event_attachments_event_doesnt_exist_creates_attachment(self):
-        with self.feature("organizations:event-attachments"):
-            self.path = self.path.replace(self.event.event_id, "z" * 32)
-            out = BytesIO()
-            out.write(b"hi")
-            response = self._postEventAttachmentWithHeader(
-                {
-                    "attachment1": SimpleUploadedFile(
-                        "mapping.txt", out.getvalue(), content_type="text/plain"
-                    )
-                },
-                format="multipart",
-            )
-
-        assert response.status_code == 201
-        assert self.has_attachment()
-
-    def test_event_attachments_event_empty_file_creates_attachment(self):
-        with self.feature("organizations:event-attachments"):
-            response = self._postEventAttachmentWithHeader(
-                {
-                    "attachment1": SimpleUploadedFile(
-                        "mapping.txt", BytesIO().getvalue(), content_type="text/plain"
-                    )
-                },
-                format="multipart",
-            )
-
-        assert response.status_code == 201
-        assert self.has_attachment()
-
-
 class RobotsTxtTest(TestCase):
     @fixture
     def path(self):
@@ -797,17 +69,6 @@ class RobotsTxtTest(TestCase):
         assert resp["Content-Type"] == "text/plain"
 
 
-def rate_limited_dispatch(*args, **kwargs):
-    raise APIRateLimited(retry_after=42.42)
-
-
-class APIViewTest(TestCase):
-    @mock.patch("sentry.web.api.APIView._dispatch", new=rate_limited_dispatch)
-    def test_retry_after_int(self):
-        resp = self._postWithHeader({})
-        assert resp["Retry-After"] == "43"
-
-
 class ClientConfigViewTest(TestCase):
     @fixture
     def path(self):
diff --git a/tests/symbolicator/snapshots/SymbolicatorUnrealIntegrationTest/test_unreal_apple_crash_with_attachments.pysnap b/tests/symbolicator/snapshots/SymbolicatorUnrealIntegrationTest/test_unreal_apple_crash_with_attachments.pysnap
index 3283da793b..bf49095a87 100644
--- a/tests/symbolicator/snapshots/SymbolicatorUnrealIntegrationTest/test_unreal_apple_crash_with_attachments.pysnap
+++ b/tests/symbolicator/snapshots/SymbolicatorUnrealIntegrationTest/test_unreal_apple_crash_with_attachments.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2020-02-07T14:42:34.863069Z'
+created: '2020-07-06T21:32:23.619726Z'
 creator: sentry
 source: tests/symbolicator/test_unreal_full.py
 ---
@@ -89,7 +89,6 @@ contexts:
     misc_cpu_vendor: GenuineIntel
     misc_number_of_cores: 4
     misc_number_of_cores_inc_hyperthread: 8
-    misc_primary_gpu_brand: Radeon Pro 560
     platform_name: MacNoEditor
     portable_call_stack: YetAnotherMac 0x000000000864e000 + a52132 YetAnotherMac 0x000000000864e000
       + 35ed85b YetAnotherMac 0x000000000864e000 + 3611c29 YetAnotherMac 0x000000000864e000
diff --git a/tests/symbolicator/snapshots/SymbolicatorUnrealIntegrationTest/test_unreal_crash_with_attachments.pysnap b/tests/symbolicator/snapshots/SymbolicatorUnrealIntegrationTest/test_unreal_crash_with_attachments.pysnap
index c7e8c9d0fd..9c15dcbee1 100644
--- a/tests/symbolicator/snapshots/SymbolicatorUnrealIntegrationTest/test_unreal_crash_with_attachments.pysnap
+++ b/tests/symbolicator/snapshots/SymbolicatorUnrealIntegrationTest/test_unreal_crash_with_attachments.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2020-02-07T14:42:38.524701Z'
+created: '2020-07-06T21:32:31.094138Z'
 creator: sentry
 source: tests/symbolicator/test_unreal_full.py
 ---
@@ -82,7 +82,6 @@ contexts:
     misc_cpu_vendor: GenuineIntel
     misc_number_of_cores: 6
     misc_number_of_cores_inc_hyperthread: 6
-    misc_primary_gpu_brand: Parallels Display Adapter (WDDM)
     platform_name: WindowsNoEditor
     portable_call_stack: YetAnother 0x00000000544e0000 + 703394 YetAnother 0x00000000544e0000
       + 281f2ee YetAnother 0x00000000544e0000 + 2a26dd3 YetAnother 0x00000000544e0000
diff --git a/tests/symbolicator/test_minidump_full.py b/tests/symbolicator/test_minidump_full.py
index 32db87e217..f62dce1587 100644
--- a/tests/symbolicator/test_minidump_full.py
+++ b/tests/symbolicator/test_minidump_full.py
@@ -8,10 +8,8 @@ from six import BytesIO
 
 from django.core.urlresolvers import reverse
 from django.core.files.uploadedfile import SimpleUploadedFile
-from django.test import override_settings
 
-from sentry import eventstore
-from sentry.testutils import TransactionTestCase
+from sentry.testutils import TransactionTestCase, RelayStoreHelper
 from sentry.models import EventAttachment
 from sentry.lang.native.utils import STORE_CRASH_REPORTS_ALL
 
@@ -23,8 +21,7 @@ from tests.symbolicator import get_fixture_path, insta_snapshot_stacktrace_data
 # `~/.sentry/config.yml` and run `sentry devservices up`
 
 
-@override_settings(ALLOWED_HOSTS=["localhost", "testserver", "host.docker.internal"])
-class SymbolicatorMinidumpIntegrationTest(TransactionTestCase):
+class SymbolicatorMinidumpIntegrationTest(RelayStoreHelper, TransactionTestCase):
     @pytest.fixture(autouse=True)
     def initialize(self, live_server):
         self.project.update_option("sentry:builtin_symbol_sources", [])
@@ -70,16 +67,15 @@ class SymbolicatorMinidumpIntegrationTest(TransactionTestCase):
         self.upload_symbols()
 
         with self.feature("organizations:event-attachments"):
-            attachment = BytesIO(b"Hello World!")
-            attachment.name = "hello.txt"
             with open(get_fixture_path("windows.dmp"), "rb") as f:
-                resp = self._postMinidumpWithHeader(
-                    f, {"sentry[logger]": "test-logger", "some_file": attachment}
+                event = self.post_and_retrieve_minidump(
+                    {
+                        "upload_file_minidump": f,
+                        "some_file": ("hello.txt", BytesIO(b"Hello World!")),
+                    },
+                    {"sentry[logger]": "test-logger"},
                 )
-                assert resp.status_code == 200
-                event_id = resp.content
 
-        event = eventstore.get_event_by_id(self.project.id, event_id)
         insta_snapshot_stacktrace_data(self, event.data)
         assert event.data.get("logger") == "test-logger"
         # assert event.data.get("extra") == {"foo": "bar"}
@@ -103,13 +99,11 @@ class SymbolicatorMinidumpIntegrationTest(TransactionTestCase):
 
         with self.feature("organizations:event-attachments"):
             with open(get_fixture_path("windows.dmp"), "rb") as f:
-                resp = self._postMinidumpWithHeader(
-                    f, {"sentry": '{"logger":"test-logger"}', "foo": "bar"}
+                event = self.post_and_retrieve_minidump(
+                    {"upload_file_minidump": f},
+                    {"sentry": '{"logger":"test-logger"}', "foo": "bar"},
                 )
-                assert resp.status_code == 200
-                event_id = resp.content
 
-        event = eventstore.get_event_by_id(self.project.id, event_id)
         assert event.data.get("logger") == "test-logger"
         assert event.data.get("extra") == {"foo": "bar"}
         # Other assertions are performed by `test_full_minidump`
@@ -120,38 +114,21 @@ class SymbolicatorMinidumpIntegrationTest(TransactionTestCase):
 
         with self.feature("organizations:event-attachments"):
             with open(get_fixture_path("windows.dmp"), "rb") as f:
-                resp = self._postMinidumpWithHeader(
-                    f, {"sentry": "{{{{", "foo": "bar"}  # invalid sentry JSON
+                event = self.post_and_retrieve_minidump(
+                    {"upload_file_minidump": f},
+                    {"sentry": "{{{{", "foo": "bar"},  # invalid sentry JSON
                 )
-                assert resp.status_code == 200
-                event_id = resp.content
 
-        event = eventstore.get_event_by_id(self.project.id, event_id)
         assert not event.data.get("logger")
         assert event.data.get("extra") == {"foo": "bar"}
         # Other assertions are performed by `test_full_minidump`
 
-    def test_raw_minidump(self):
-        self.project.update_option("sentry:store_crash_reports", STORE_CRASH_REPORTS_ALL)
-        self.upload_symbols()
-
-        with self.feature("organizations:event-attachments"):
-            with open(get_fixture_path("windows.dmp"), "rb") as f:
-                # Send as raw request body instead of multipart/form-data
-                resp = self._postMinidumpWithHeader(f, raw=True)
-                assert resp.status_code == 200
-                event_id = resp.content
-
-        event = eventstore.get_event_by_id(self.project.id, event_id)
-        insta_snapshot_stacktrace_data(self, event.data)
-
     def test_missing_dsym(self):
         with self.feature("organizations:event-attachments"):
             with open(get_fixture_path("windows.dmp"), "rb") as f:
-                resp = self._postMinidumpWithHeader(f, {"sentry[logger]": "test-logger"})
-                assert resp.status_code == 200
-                event_id = resp.content
+                event = self.post_and_retrieve_minidump(
+                    {"upload_file_minidump": f}, {"sentry[logger]": "test-logger"}
+                )
 
-        event = eventstore.get_event_by_id(self.project.id, event_id)
         insta_snapshot_stacktrace_data(self, event.data)
         assert not EventAttachment.objects.filter(event_id=event.event_id)
diff --git a/tests/symbolicator/test_payload_full.py b/tests/symbolicator/test_payload_full.py
index 132a7f9eb0..dbff38a45a 100644
--- a/tests/symbolicator/test_payload_full.py
+++ b/tests/symbolicator/test_payload_full.py
@@ -8,13 +8,11 @@ from six import BytesIO
 
 from django.core.urlresolvers import reverse
 from django.core.files.uploadedfile import SimpleUploadedFile
-from django.test import override_settings
 
 from sentry import eventstore
-from sentry.testutils import TransactionTestCase
+from sentry.testutils import TransactionTestCase, RelayStoreHelper
 from sentry.models import File, ProjectDebugFile
 from sentry.testutils.helpers.datetime import iso_format, before_now
-from sentry.utils import json
 
 from tests.symbolicator import get_fixture_path, insta_snapshot_stacktrace_data
 
@@ -64,7 +62,21 @@ REAL_RESOLVING_EVENT_DATA = {
 }
 
 
-class ResolvingIntegrationTestBase(object):
+class SymbolicatorResolvingIntegrationTest(RelayStoreHelper, TransactionTestCase):
+    # For these tests to run, write `symbolicator.enabled: true` into your
+    # `~/.sentry/config.yml` and run `sentry devservices up`
+
+    @pytest.fixture(autouse=True)
+    def initialize(self, live_server):
+        self.project.update_option("sentry:builtin_symbol_sources", [])
+        new_prefix = live_server.url
+
+        with patch("sentry.auth.system.is_internal_ip", return_value=True), self.options(
+            {"system.url-prefix": new_prefix}
+        ):
+            # Run test case:
+            yield
+
     def get_event(self, event_id):
         return eventstore.get_event_by_id(self.project.id, event_id)
 
@@ -96,10 +108,7 @@ class ResolvingIntegrationTestBase(object):
         assert response.status_code == 201, response.content
         assert len(response.data) == 1
 
-        resp = self._postWithHeader(dict(project=self.project.id, **REAL_RESOLVING_EVENT_DATA))
-        assert resp.status_code == 200
-
-        event = self.get_event(json.loads(resp.content)["id"])
+        event = self.post_and_retrieve_event(REAL_RESOLVING_EVENT_DATA)
 
         assert event.data["culprit"] == "main"
         insta_snapshot_stacktrace_data(self, event.data)
@@ -158,20 +167,14 @@ class ResolvingIntegrationTestBase(object):
             "timestamp": iso_format(before_now(seconds=1)),
         }
 
-        resp = self._postWithHeader(event_data)
-        assert resp.status_code == 200
-
-        event = self.get_event(json.loads(resp.content)["id"])
+        event = self.post_and_retrieve_event(event_data)
         assert event.data["culprit"] == "main"
         insta_snapshot_stacktrace_data(self, event.data)
 
     def test_missing_dsym(self):
         self.login_as(user=self.user)
 
-        resp = self._postWithHeader(dict(project=self.project.id, **REAL_RESOLVING_EVENT_DATA))
-        assert resp.status_code == 200
-
-        event = self.get_event(json.loads(resp.content)["id"])
+        event = self.post_and_retrieve_event(REAL_RESOLVING_EVENT_DATA)
         assert event.data["culprit"] == "unknown"
         insta_snapshot_stacktrace_data(self, event.data)
 
@@ -181,26 +184,6 @@ class ResolvingIntegrationTestBase(object):
         payload = dict(project=self.project.id, **REAL_RESOLVING_EVENT_DATA)
         del payload["debug_meta"]
 
-        resp = self._postWithHeader(payload)
-        assert resp.status_code == 200
-
-        event = self.get_event(json.loads(resp.content)["id"])
+        event = self.post_and_retrieve_event(payload)
         assert event.data["culprit"] == "unknown"
         insta_snapshot_stacktrace_data(self, event.data)
-
-
-@override_settings(ALLOWED_HOSTS=["localhost", "testserver", "host.docker.internal"])
-class SymbolicatorResolvingIntegrationTest(ResolvingIntegrationTestBase, TransactionTestCase):
-    # For these tests to run, write `symbolicator.enabled: true` into your
-    # `~/.sentry/config.yml` and run `sentry devservices up`
-
-    @pytest.fixture(autouse=True)
-    def initialize(self, live_server):
-        self.project.update_option("sentry:builtin_symbol_sources", [])
-        new_prefix = live_server.url
-
-        with patch("sentry.auth.system.is_internal_ip", return_value=True), self.options(
-            {"system.url-prefix": new_prefix}
-        ):
-            # Run test case:
-            yield
diff --git a/tests/symbolicator/test_unreal_full.py b/tests/symbolicator/test_unreal_full.py
index be0cf5ac68..5a6cf0ba9e 100644
--- a/tests/symbolicator/test_unreal_full.py
+++ b/tests/symbolicator/test_unreal_full.py
@@ -8,11 +8,9 @@ from six import BytesIO
 
 from django.core.urlresolvers import reverse
 from django.core.files.uploadedfile import SimpleUploadedFile
-from django.test import override_settings
 
-from sentry.testutils import TransactionTestCase
+from sentry.testutils import TransactionTestCase, RelayStoreHelper
 from sentry.models import EventAttachment
-from sentry import eventstore
 from sentry.lang.native.utils import STORE_CRASH_REPORTS_ALL
 
 from tests.symbolicator import get_fixture_path
@@ -31,8 +29,7 @@ def get_unreal_crash_apple_file():
     return get_fixture_path("unreal_crash_apple")
 
 
-@override_settings(ALLOWED_HOSTS=["localhost", "testserver", "host.docker.internal"])
-class SymbolicatorUnrealIntegrationTest(TransactionTestCase):
+class SymbolicatorUnrealIntegrationTest(RelayStoreHelper, TransactionTestCase):
     # For these tests to run, write `symbolicator.enabled: true` into your
     # `~/.sentry/config.yml` and run `sentry devservices up`
 
@@ -83,11 +80,7 @@ class SymbolicatorUnrealIntegrationTest(TransactionTestCase):
         # attachments feature has to be on for the files extract stick around
         with self.feature("organizations:event-attachments"):
             with open(filename, "rb") as f:
-                resp = self._postUnrealWithHeader(f.read())
-                assert resp.status_code == 200
-                event_id = resp.content
-
-        event = eventstore.get_event_by_id(self.project.id, event_id)
+                event = self.post_and_retrieve_unreal(f.read())
 
         self.insta_snapshot(
             {
@@ -107,7 +100,7 @@ class SymbolicatorUnrealIntegrationTest(TransactionTestCase):
         context, config, minidump, log = attachments
 
         assert context.name == "CrashContext.runtime-xml"
-        assert context.file.type == "event.attachment"
+        assert context.file.type == "unreal.context"
         assert context.file.checksum == "835d3e10db5d1799dc625132c819c047261ddcfb"
 
         assert config.name == "CrashReportClient.ini"
@@ -119,7 +112,7 @@ class SymbolicatorUnrealIntegrationTest(TransactionTestCase):
         assert minidump.file.checksum == "089d9fd3b5c0cc4426339ab46ec3835e4be83c0f"
 
         assert log.name == "YetAnother.log"  # Log file is named after the project
-        assert log.file.type == "event.attachment"
+        assert log.file.type == "unreal.logs"
         assert log.file.checksum == "24d1c5f75334cd0912cc2670168d593d5fe6c081"
 
     def test_unreal_apple_crash_with_attachments(self):
@@ -129,7 +122,7 @@ class SymbolicatorUnrealIntegrationTest(TransactionTestCase):
         context, config, diagnostics, log, info, minidump = attachments
 
         assert context.name == "CrashContext.runtime-xml"
-        assert context.file.type == "event.attachment"
+        assert context.file.type == "unreal.context"
         assert context.file.checksum == "5d2723a7d25111645702fcbbcb8e1d038db56c6e"
 
         assert config.name == "CrashReportClient.ini"
@@ -141,7 +134,7 @@ class SymbolicatorUnrealIntegrationTest(TransactionTestCase):
         assert diagnostics.file.checksum == "aa271bf4e307a78005410234081945352e8fb236"
 
         assert log.name == "YetAnotherMac.log"  # Log file is named after the project
-        assert log.file.type == "event.attachment"
+        assert log.file.type == "unreal.logs"
         assert log.file.checksum == "735e751a8b6b943dbc0abce0e6d096f4d48a0c1e"
 
         assert info.name == "info.txt"
