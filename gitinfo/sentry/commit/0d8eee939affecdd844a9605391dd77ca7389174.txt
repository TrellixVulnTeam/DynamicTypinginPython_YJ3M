commit 0d8eee939affecdd844a9605391dd77ca7389174
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Tue Oct 3 12:18:25 2017 -0500

    ref: Extract TagKey interactions out to TagStorage abstraction (#6211)

diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
index 97f1213a07..9f484f3b6f 100644
--- a/src/sentry/api/endpoints/group_events.py
+++ b/src/sentry/api/endpoints/group_events.py
@@ -2,15 +2,12 @@ from __future__ import absolute_import
 
 import six
 
-from django.db.models import Q
-from operator import or_
-from six.moves import reduce
-
+from sentry import tagstore
 from sentry.api.base import DocSection
 from sentry.api.bases import GroupEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.paginator import DateTimePaginator
-from sentry.models import Event, EventTag, Group, TagKey, TagValue
+from sentry.models import Event, Group
 from sentry.search.utils import parse_query
 from sentry.utils.apidocs import scenario, attach_scenarios
 from rest_framework.response import Response
@@ -26,58 +23,6 @@ def list_available_samples_scenario(runner):
 class GroupEventsEndpoint(GroupEndpoint):
     doc_section = DocSection.EVENTS
 
-    def _tags_to_filter(self, group, tags):
-        project_id = group.project_id
-        tagkeys = dict(
-            TagKey.objects.filter(
-                project_id=project_id,
-                key__in=tags.keys(),
-            ).values_list('key', 'id')
-        )
-
-        tagvalues = {
-            (t[1], t[2]): t[0]
-            for t in TagValue.objects.filter(
-                reduce(or_, (Q(key=k, value=v) for k, v in six.iteritems(tags))),
-                project_id=project_id,
-            ).values_list('id', 'key', 'value')
-        }
-
-        try:
-            tag_lookups = [(tagkeys[k], tagvalues[(k, v)]) for k, v in six.iteritems(tags)]
-        except KeyError:
-            # one or more tags were invalid, thus the result should be an empty
-            # set
-            return []
-
-        # Django doesnt support union, so we limit results and try to find
-        # reasonable matches
-
-        # get initial matches to start the filter
-        k, v = tag_lookups.pop()
-        matches = list(
-            EventTag.objects.filter(
-                key_id=k,
-                value_id=v,
-                group_id=group.id,
-            ).values_list('event_id', flat=True)[:1000]
-        )
-
-        # for each remaining tag, find matches contained in our
-        # existing set, pruning it down each iteration
-        for k, v in tag_lookups:
-            matches = list(
-                EventTag.objects.filter(
-                    key_id=k,
-                    value_id=v,
-                    event_id__in=matches,
-                    group_id=group.id,
-                ).values_list('event_id', flat=True)[:1000]
-            )
-            if not matches:
-                return []
-        return matches
-
     @attach_scenarios([list_available_samples_scenario])
     def get(self, request, group):
         """
@@ -107,10 +52,11 @@ class GroupEventsEndpoint(GroupEndpoint):
                 )
 
             if query_kwargs['tags']:
-                matches = self._tags_to_filter(group, query_kwargs['tags'])
-                if matches:
+                event_ids = tagstore.get_group_event_ids(
+                    group.project_id, group.id, query_kwargs['tags'])
+                if event_ids:
                     events = events.filter(
-                        id__in=matches,
+                        id__in=event_ids,
                     )
                 else:
                     events = events.none()
diff --git a/src/sentry/api/endpoints/group_tagkey_details.py b/src/sentry/api/endpoints/group_tagkey_details.py
index 3f49944d37..b78bcab8d3 100644
--- a/src/sentry/api/endpoints/group_tagkey_details.py
+++ b/src/sentry/api/endpoints/group_tagkey_details.py
@@ -4,11 +4,12 @@ import six
 
 from rest_framework.response import Response
 
+from sentry import tagstore
 from sentry.api.base import DocSection
 from sentry.api.bases.group import GroupEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
-from sentry.models import (GroupTagKey, GroupTagValue, TagKey, TagKeyStatus, Group)
+from sentry.models import (GroupTagKey, GroupTagValue, Group)
 from sentry.utils.apidocs import scenario
 
 
@@ -37,19 +38,11 @@ class GroupTagKeyDetailsEndpoint(GroupEndpoint):
         :pparam string key: the tag key to look the values up for.
         :auth: required
         """
-        # XXX(dcramer): kill sentry prefix for internal reserved tags
-        if TagKey.is_reserved_key(key):
-            lookup_key = 'sentry:{0}'.format(key)
-        else:
-            lookup_key = key
+        lookup_key = tagstore.prefix_reserved_key(key)
 
         try:
-            tag_key = TagKey.objects.get(
-                project_id=group.project_id,
-                key=lookup_key,
-                status=TagKeyStatus.VISIBLE,
-            )
-        except TagKey.DoesNotExist:
+            tag_key = tagstore.get_tag_key(group.project_id, lookup_key)
+        except tagstore.TagKeyNotFound:
             raise ResourceDoesNotExist
 
         try:
diff --git a/src/sentry/api/endpoints/group_tagkey_values.py b/src/sentry/api/endpoints/group_tagkey_values.py
index 45d5f5bf04..3ad6a12b35 100644
--- a/src/sentry/api/endpoints/group_tagkey_values.py
+++ b/src/sentry/api/endpoints/group_tagkey_values.py
@@ -1,12 +1,13 @@
 from __future__ import absolute_import
 
+from sentry import tagstore
 from sentry.api.base import DocSection
 from sentry.api.bases.group import GroupEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.paginator import DateTimePaginator, OffsetPaginator, Paginator
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.tagvalue import UserTagValueSerializer
-from sentry.models import GroupTagValue, TagKey, TagKeyStatus, Group
+from sentry.models import GroupTagValue, Group
 from sentry.utils.apidocs import scenario
 
 
@@ -35,18 +36,11 @@ class GroupTagKeyValuesEndpoint(GroupEndpoint):
         :pparam string key: the tag key to look the values up for.
         :auth: required
         """
-        # XXX(dcramer): kill sentry prefix for internal reserved tags
-        if TagKey.is_reserved_key(key):
-            lookup_key = 'sentry:{0}'.format(key)
-        else:
-            lookup_key = key
+        lookup_key = tagstore.prefix_reserved_key(key)
 
-        tagkey = TagKey.objects.filter(
-            project_id=group.project_id,
-            key=lookup_key,
-            status=TagKeyStatus.VISIBLE,
-        )
-        if not tagkey.exists():
+        try:
+            tagstore.get_tag_key(group.project_id, lookup_key)
+        except tagstore.TagKeyNotFound:
             raise ResourceDoesNotExist
 
         queryset = GroupTagValue.objects.filter(
diff --git a/src/sentry/api/endpoints/group_tags.py b/src/sentry/api/endpoints/group_tags.py
index 83ffe0aeeb..d8606c0641 100644
--- a/src/sentry/api/endpoints/group_tags.py
+++ b/src/sentry/api/endpoints/group_tags.py
@@ -5,9 +5,10 @@ import six
 from rest_framework.response import Response
 
 from collections import defaultdict
+from sentry import tagstore
 from sentry.api.bases.group import GroupEndpoint
 from sentry.api.serializers import serialize
-from sentry.models import GroupTagValue, GroupTagKey, TagKey, TagKeyStatus
+from sentry.models import GroupTagValue, GroupTagKey
 
 
 class GroupTagsEndpoint(GroupEndpoint):
@@ -16,11 +17,7 @@ class GroupTagsEndpoint(GroupEndpoint):
             group_id=group.id
         ).values_list('key', flat=True))
 
-        tag_keys = TagKey.objects.filter(
-            project_id=group.project_id,
-            status=TagKeyStatus.VISIBLE,
-            key__in=grouptagkeys,
-        )
+        tag_keys = tagstore.get_tag_keys(group.project_id, grouptagkeys)
 
         # O(N) db access
         data = []
@@ -34,7 +31,7 @@ class GroupTagsEndpoint(GroupEndpoint):
             data.append(
                 {
                     'id': six.text_type(tag_key.id),
-                    'key': TagKey.get_standardized_key(tag_key.key),
+                    'key': tagstore.get_standardized_key(tag_key.key),
                     'name': tag_key.get_label(),
                     'uniqueValues': tag_key.values_seen,
                     'totalValues': total_values,
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 52b3325967..930fb73407 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -10,7 +10,7 @@ from django.utils import timezone
 from rest_framework import serializers
 from rest_framework.response import Response
 
-from sentry import features, search
+from sentry import features, search, tagstore
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint, ProjectEventPermission
 from sentry.api.fields import UserField
@@ -22,7 +22,7 @@ from sentry.db.models.query import create_or_update
 from sentry.models import (
     Activity, EventMapping, Group, GroupAssignee, GroupBookmark, GroupHash, GroupResolution,
     GroupSeen, GroupSnooze, GroupStatus, GroupSubscription, GroupSubscriptionReason, GroupTombstone,
-    Release, TagKey, TOMBSTONE_FIELDS_FROM_GROUP, UserOption
+    Release, TOMBSTONE_FIELDS_FROM_GROUP, UserOption
 )
 from sentry.models.event import Event
 from sentry.models.group import looks_like_short_id
@@ -205,7 +205,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
         query_kwargs['sort_by'] = sort_by
 
         tags = {}
-        for tag_key in TagKey.objects.all_keys(project):
+        for tag_key in (tk.key for tk in tagstore.get_tag_keys(project.id)):
             if request.GET.get(tag_key):
                 tags[tag_key] = request.GET[tag_key]
         if tags:
diff --git a/src/sentry/api/endpoints/project_tagkey_details.py b/src/sentry/api/endpoints/project_tagkey_details.py
index c27ceb999e..e40ea07f38 100644
--- a/src/sentry/api/endpoints/project_tagkey_details.py
+++ b/src/sentry/api/endpoints/project_tagkey_details.py
@@ -2,27 +2,20 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
+from sentry import tagstore
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
-from sentry.models import AuditLogEntryEvent, TagKey, TagKeyStatus
-from sentry.tasks.deletion import delete_tag_key
+from sentry.models import AuditLogEntryEvent
 
 
 class ProjectTagKeyDetailsEndpoint(ProjectEndpoint):
     def get(self, request, project, key):
-        if TagKey.is_reserved_key(key):
-            lookup_key = 'sentry:{0}'.format(key)
-        else:
-            lookup_key = key
+        lookup_key = tagstore.prefix_reserved_key(key)
 
         try:
-            tagkey = TagKey.objects.get(
-                project_id=project.id,
-                key=lookup_key,
-                status=TagKeyStatus.VISIBLE,
-            )
-        except TagKey.DoesNotExist:
+            tagkey = tagstore.get_tag_key(project.id, lookup_key)
+        except tagstore.TagKeyNotFound:
             raise ResourceDoesNotExist
 
         return Response(serialize(tagkey, request.user))
@@ -34,26 +27,14 @@ class ProjectTagKeyDetailsEndpoint(ProjectEndpoint):
             {method} {path}
 
         """
-        if TagKey.is_reserved_key(key):
-            lookup_key = 'sentry:{0}'.format(key)
-        else:
-            lookup_key = key
+        lookup_key = tagstore.prefix_reserved_key(key)
 
         try:
-            tagkey = TagKey.objects.get(
-                project_id=project.id,
-                key=lookup_key,
-            )
-        except TagKey.DoesNotExist:
+            updated, tagkey = tagstore.delete_tag_key(project.id, lookup_key)
+        except tagstore.TagKeyNotFound:
             raise ResourceDoesNotExist
 
-        updated = TagKey.objects.filter(
-            id=tagkey.id,
-            status=TagKeyStatus.VISIBLE,
-        ).update(status=TagKeyStatus.PENDING_DELETION)
         if updated:
-            delete_tag_key.delay(object_id=tagkey.id)
-
             self.create_audit_entry(
                 request=request,
                 organization=project.organization,
diff --git a/src/sentry/api/endpoints/project_tagkey_values.py b/src/sentry/api/endpoints/project_tagkey_values.py
index dd8eb79d20..8be6bbf604 100644
--- a/src/sentry/api/endpoints/project_tagkey_values.py
+++ b/src/sentry/api/endpoints/project_tagkey_values.py
@@ -1,11 +1,12 @@
 from __future__ import absolute_import
 
+from sentry import tagstore
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.paginator import DateTimePaginator
 from sentry.api.serializers import serialize
-from sentry.models import TagKey, TagKeyStatus, TagValue
+from sentry.models import TagValue
 
 
 class ProjectTagKeyValuesEndpoint(ProjectEndpoint):
@@ -25,18 +26,11 @@ class ProjectTagKeyValuesEndpoint(ProjectEndpoint):
         :pparam string key: the tag key to look up.
         :auth: required
         """
-        if TagKey.is_reserved_key(key):
-            lookup_key = 'sentry:{0}'.format(key)
-        else:
-            lookup_key = key
+        lookup_key = tagstore.prefix_reserved_key(key)
 
         try:
-            tagkey = TagKey.objects.get(
-                project_id=project.id,
-                key=lookup_key,
-                status=TagKeyStatus.VISIBLE,
-            )
-        except TagKey.DoesNotExist:
+            tagkey = tagstore.get_tag_key(project.id, lookup_key)
+        except tagstore.TagKeyNotFound:
             raise ResourceDoesNotExist
 
         queryset = TagValue.objects.filter(
diff --git a/src/sentry/api/endpoints/project_tags.py b/src/sentry/api/endpoints/project_tags.py
index ad871c8e03..64bcd0bf63 100644
--- a/src/sentry/api/endpoints/project_tags.py
+++ b/src/sentry/api/endpoints/project_tags.py
@@ -4,23 +4,20 @@ import six
 
 from rest_framework.response import Response
 
+from sentry import tagstore
 from sentry.api.bases.project import ProjectEndpoint
-from sentry.models import TagKey, TagKeyStatus
 
 
 class ProjectTagsEndpoint(ProjectEndpoint):
     def get(self, request, project):
-        tag_keys = TagKey.objects.filter(
-            project_id=project.id,
-            status=TagKeyStatus.VISIBLE,
-        )
+        tag_keys = tagstore.get_tag_keys(project.id)
 
         data = []
         for tag_key in tag_keys:
             data.append(
                 {
                     'id': six.text_type(tag_key.id),
-                    'key': TagKey.get_standardized_key(tag_key.key),
+                    'key': tagstore.get_standardized_key(tag_key.key),
                     'name': tag_key.get_label(),
                     'uniqueValues': tag_key.values_seen,
                 }
diff --git a/src/sentry/api/serializers/models/grouptagkey.py b/src/sentry/api/serializers/models/grouptagkey.py
index 263046eff5..dd62fb6217 100644
--- a/src/sentry/api/serializers/models/grouptagkey.py
+++ b/src/sentry/api/serializers/models/grouptagkey.py
@@ -2,8 +2,9 @@ from __future__ import absolute_import
 
 import six
 
+from sentry import tagstore
 from sentry.api.serializers import Serializer, register
-from sentry.models import GroupTagKey, TagKey
+from sentry.models import GroupTagKey
 
 
 @register(GroupTagKey)
@@ -12,14 +13,12 @@ class GroupTagKeySerializer(Serializer):
         tag_labels = {
             t.key: t.get_label()
             for t in
-            TagKey.objects.filter(
-                project_id=item_list[0].project_id, key__in=[
-                    i.key for i in item_list])
+            tagstore.get_tag_keys(item_list[0].project_id, [i.key for i in item_list])
         }
 
         result = {}
         for item in item_list:
-            key = TagKey.get_standardized_key(item.key)
+            key = tagstore.get_standardized_key(item.key)
             try:
                 label = tag_labels[item.key]
             except KeyError:
@@ -28,6 +27,7 @@ class GroupTagKeySerializer(Serializer):
                 'name': label,
                 'key': key,
             }
+
         return result
 
     def serialize(self, obj, attrs, user):
diff --git a/src/sentry/api/serializers/models/grouptagvalue.py b/src/sentry/api/serializers/models/grouptagvalue.py
index 784e2d6d69..bec49fdfbd 100644
--- a/src/sentry/api/serializers/models/grouptagvalue.py
+++ b/src/sentry/api/serializers/models/grouptagvalue.py
@@ -2,8 +2,9 @@ from __future__ import absolute_import
 
 import six
 
+from sentry import tagstore
 from sentry.api.serializers import Serializer, register
-from sentry.models import GroupTagValue, Release, TagKey
+from sentry.models import GroupTagValue, Release
 
 
 @register(GroupTagValue)
@@ -34,7 +35,7 @@ class GroupTagValueSerializer(Serializer):
         return {
             'id': six.text_type(obj.id),
             'name': attrs['name'],
-            'key': TagKey.get_standardized_key(obj.key),
+            'key': tagstore.get_standardized_key(obj.key),
             'value': obj.value,
             'count': obj.times_seen,
             'lastSeen': obj.last_seen,
diff --git a/src/sentry/api/serializers/models/tagkey.py b/src/sentry/api/serializers/models/tagkey.py
index 2d0932b629..31b8ddcc2f 100644
--- a/src/sentry/api/serializers/models/tagkey.py
+++ b/src/sentry/api/serializers/models/tagkey.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import six
 
+from sentry import tagstore
 from sentry.api.serializers import Serializer, register
 from sentry.models import TagKey
 
@@ -11,7 +12,7 @@ class TagKeySerializer(Serializer):
     def serialize(self, obj, attrs, user):
         return {
             'id': six.text_type(obj.id),
-            'key': TagKey.get_standardized_key(obj.key),
+            'key': tagstore.get_standardized_key(obj.key),
             'name': obj.get_label(),
             'uniqueValues': obj.values_seen,
         }
diff --git a/src/sentry/api/serializers/models/tagvalue.py b/src/sentry/api/serializers/models/tagvalue.py
index c1cfc35575..a6f8301a41 100644
--- a/src/sentry/api/serializers/models/tagvalue.py
+++ b/src/sentry/api/serializers/models/tagvalue.py
@@ -2,8 +2,9 @@ from __future__ import absolute_import
 
 import six
 
+from sentry import tagstore
 from sentry.api.serializers import Serializer, register, serialize
-from sentry.models import EventUser, TagKey, TagValue
+from sentry.models import EventUser, TagValue
 
 
 @register(TagValue)
@@ -39,7 +40,7 @@ class TagValueSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         return {
             'id': six.text_type(obj.id),
-            'key': TagKey.get_standardized_key(obj.key),
+            'key': tagstore.get_standardized_key(obj.key),
             'name': attrs['name'],
             'value': obj.value,
             'count': obj.times_seen,
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 11a99d07e9..4d7a126dbb 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -903,6 +903,10 @@ SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE = '90%'
 SENTRY_NODESTORE = 'sentry.nodestore.django.DjangoNodeStorage'
 SENTRY_NODESTORE_OPTIONS = {}
 
+# Tag storage backend
+SENTRY_TAGSTORE = 'sentry.tagstore.legacy.LegacyTagStorage'
+SENTRY_TAGSTORE_OPTIONS = {}
+
 # Search backend
 SENTRY_SEARCH = 'sentry.search.django.DjangoSearchBackend'
 SENTRY_SEARCH_OPTIONS = {}
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index bc41369629..8c14521224 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -25,7 +25,7 @@ from gzip import GzipFile
 from six import BytesIO
 from time import time
 
-from sentry import filters
+from sentry import filters, tagstore
 from sentry.cache import default_cache
 from sentry.constants import (
     CLIENT_RESERVED_ATTRS,
@@ -39,7 +39,7 @@ from sentry.db.models import BoundedIntegerField
 from sentry.interfaces.base import get_interface, InterfaceValidationError
 from sentry.interfaces.csp import Csp
 from sentry.event_manager import EventManager
-from sentry.models import EventError, ProjectKey, TagKey, TagValue
+from sentry.models import EventError, ProjectKey, TagValue
 from sentry.tasks.store import preprocess_event, \
     preprocess_event_from_reprocessing
 from sentry.utils import json
@@ -591,7 +591,7 @@ class ClientApiHelper(object):
                 # support tags with spaces by converting them
                 k = k.replace(' ', '-')
 
-                if TagKey.is_reserved_key(k):
+                if tagstore.is_reserved_key(k):
                     self.log.debug('Discarding reserved tag key: %s', k)
                     data['errors'].append(
                         {
@@ -602,7 +602,7 @@ class ClientApiHelper(object):
                     )
                     continue
 
-                if not TagKey.is_valid_key(k):
+                if not tagstore.is_valid_key(k):
                     self.log.debug('Discarded invalid tag key: %s', k)
                     data['errors'].append(
                         {
diff --git a/src/sentry/deletions/defaults/tagkey.py b/src/sentry/deletions/defaults/tagkey.py
index 57aabe4201..8a5390a8f4 100644
--- a/src/sentry/deletions/defaults/tagkey.py
+++ b/src/sentry/deletions/defaults/tagkey.py
@@ -24,7 +24,7 @@ class TagKeyDeletionTask(ModelDeletionTask):
         return relations
 
     def mark_deletion_in_progress(self, instance_list):
-        from sentry.models import TagKeyStatus
+        from sentry.tagstore import TagKeyStatus
 
         for instance in instance_list:
             if instance.status != TagKeyStatus.DELETION_IN_PROGRESS:
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index f4ec7b0a02..e106fd0fbd 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -20,7 +20,7 @@ from django.utils.encoding import force_bytes, force_text
 from hashlib import md5
 from uuid import uuid4
 
-from sentry import eventtypes, features, buffer
+from sentry import eventtypes, features, buffer, tagstore
 # we need a bunch of unexposed functions from tsdb
 from sentry.tsdb import backend as tsdb
 from sentry.constants import (
@@ -29,7 +29,7 @@ from sentry.constants import (
 from sentry.interfaces.base import get_interface
 from sentry.models import (
     Activity, Environment, Event, EventMapping, EventUser, Group, GroupHash, GroupRelease,
-    GroupResolution, GroupStatus, Project, Release, ReleaseEnvironment, ReleaseProject, TagKey,
+    GroupResolution, GroupStatus, Project, Release, ReleaseEnvironment, ReleaseProject,
     UserReport
 )
 from sentry.plugins import plugins
@@ -249,7 +249,7 @@ class EventManager(object):
             data['logger'] = DEFAULT_LOGGER_NAME
         else:
             logger = trim(data['logger'].strip(), 64)
-            if TagKey.is_valid_key(logger):
+            if tagstore.is_valid_key(logger):
                 data['logger'] = logger
             else:
                 data['logger'] = DEFAULT_LOGGER_NAME
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index b520c0f6c4..aa6de70afb 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -182,12 +182,9 @@ class Event(Model):
     def interfaces(self):
         return self.get_interfaces()
 
-    def get_tags(self, with_internal=True):
+    def get_tags(self):
         try:
-            return sorted(
-                (t, v) for t, v in self.data.get('tags') or ()
-                if with_internal or not t.startswith('sentry:')
-            )
+            return sorted((t, v) for t, v in self.data.get('tags') or ())
         except ValueError:
             # at one point Sentry allowed invalid tag sets such as (foo, bar)
             # vs ((tag, foo), (tag, bar))
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 0b45fcde20..4583d4281f 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -21,7 +21,7 @@ from django.db import models
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
-from sentry import buffer, eventtypes
+from sentry import buffer, eventtypes, tagstore
 from sentry.constants import (
     DEFAULT_LOGGER_NAME, EVENT_ORDERING_KEY, LOG_LEVELS, MAX_CULPRIT_LENGTH
 )
@@ -349,20 +349,18 @@ class Group(Model):
             'last_seen',
         ).order_by(order_by)
 
-    def get_tags(self, with_internal=True):
-        from sentry.models import GroupTagKey, TagKey
+    def get_tags(self):
+        from sentry.models import GroupTagKey
         if not hasattr(self, '_tag_cache'):
             group_tags = GroupTagKey.objects.filter(
                 group_id=self.id,
                 project_id=self.project_id,
             )
-            if not with_internal:
-                group_tags = group_tags.exclude(key__startswith='sentry:')
 
             group_tags = list(group_tags.values_list('key', flat=True))
 
             tag_keys = dict(
-                (t.key, t) for t in TagKey.objects.filter(project_id=self.project_id, key__in=group_tags)
+                (t.key, t) for t in tagstore.get_tag_keys(self.project_id, group_tags)
             )
 
             results = []
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 86b0696a1f..dbd97b9433 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -174,17 +174,15 @@ class Project(Model):
                 return True
         return False
 
-    def get_tags(self, with_internal=True):
-        from sentry.models import TagKey
+    def get_tags(self):
+        from sentry import tagstore
 
         if not hasattr(self, '_tag_cache'):
             tags = self.get_option('tags', None)
             if tags is None:
-                tags = [
-                    t for t in TagKey.objects.all_keys(self)
-                    if with_internal or not t.startswith('sentry:')
-                ]
+                tags = [t for t in (tk.key for tk in tagstore.get_tag_keys(self.id))]
             self._tag_cache = tags
+
         return self._tag_cache
 
     # TODO: Make these a mixin
diff --git a/src/sentry/models/tagkey.py b/src/sentry/models/tagkey.py
index 9b889630a4..c742124555 100644
--- a/src/sentry/models/tagkey.py
+++ b/src/sentry/models/tagkey.py
@@ -7,49 +7,12 @@ sentry.models.tagkey
 """
 from __future__ import absolute_import, print_function
 
-import re
-
 from django.db import models
 from django.utils.translation import ugettext_lazy as _
 
+from sentry.tagstore import TagKeyStatus
 from sentry.constants import MAX_TAG_KEY_LENGTH, TAG_LABELS
 from sentry.db.models import (Model, BoundedPositiveIntegerField, sane_repr)
-from sentry.db.models.manager import BaseManager
-from sentry.utils.cache import cache
-
-# Valid pattern for tag key names
-TAG_KEY_RE = re.compile(r'^[a-zA-Z0-9_\.:-]+$')
-
-# These tags are special and are used in pairing with `sentry:{}`
-# they should not be allowed to be set via data ingest due to abiguity
-INTERNAL_TAG_KEYS = frozenset(
-    ('release', 'dist', 'user', 'filename', 'function'))
-
-
-# TODO(dcramer): pull in enum library
-class TagKeyStatus(object):
-    VISIBLE = 0
-    PENDING_DELETION = 1
-    DELETION_IN_PROGRESS = 2
-
-
-class TagKeyManager(BaseManager):
-    def _get_cache_key(self, project_id):
-        return 'filterkey:all:%s' % project_id
-
-    def all_keys(self, project):
-        # TODO: cache invalidation via post_save/post_delete signals much like BaseManager
-        key = self._get_cache_key(project.id)
-        result = cache.get(key)
-        if result is None:
-            result = list(
-                self.filter(
-                    project_id=project.id,
-                    status=TagKeyStatus.VISIBLE,
-                ).order_by('-values_seen').values_list('key', flat=True)[:20]
-            )
-            cache.set(key, result, 60)
-        return result
 
 
 class TagKey(Model):
@@ -71,8 +34,6 @@ class TagKey(Model):
         default=TagKeyStatus.VISIBLE
     )
 
-    objects = TagKeyManager()
-
     class Meta:
         app_label = 'sentry'
         db_table = 'sentry_filterkey'
@@ -80,20 +41,6 @@ class TagKey(Model):
 
     __repr__ = sane_repr('project_id', 'key')
 
-    @classmethod
-    def is_valid_key(cls, key):
-        return bool(TAG_KEY_RE.match(key))
-
-    @classmethod
-    def is_reserved_key(cls, key):
-        return key in INTERNAL_TAG_KEYS
-
-    @classmethod
-    def get_standardized_key(cls, key):
-        if key.startswith('sentry:'):
-            return key.split('sentry:', 1)[-1]
-        return key
-
     def get_label(self):
         return self.label \
             or TAG_LABELS.get(self.key) \
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
index 855f7e043d..ec2d07a19a 100644
--- a/src/sentry/receivers/core.py
+++ b/src/sentry/receivers/core.py
@@ -10,9 +10,9 @@ from django.db.models.signals import post_syncdb, post_save
 from functools import wraps
 from pkg_resources import parse_version as Version
 
-from sentry import buffer, options
+from sentry import buffer, options, tagstore
 from sentry.models import (
-    Organization, OrganizationMember, Project, User, Team, ProjectKey, TagKey, TagValue,
+    Organization, OrganizationMember, Project, User, Team, ProjectKey, TagValue,
     GroupTagValue, GroupTagKey
 )
 from sentry.signals import buffer_incr_complete
@@ -148,12 +148,7 @@ def record_project_tag_count(filters, created, **kwargs):
     if not project_id:
         project_id = filters['project'].id
 
-    buffer.incr(TagKey, {
-        'values_seen': 1,
-    }, {
-        'project_id': project_id,
-        'key': filters['key'],
-    })
+    tagstore.incr_values_seen(project_id, filters['key'])
 
 
 @buffer_incr_complete.connect(sender=GroupTagValue, weak=False)
diff --git a/src/sentry/rules/conditions/tagged_event.py b/src/sentry/rules/conditions/tagged_event.py
index 38c01bdb32..da53e5b9de 100644
--- a/src/sentry/rules/conditions/tagged_event.py
+++ b/src/sentry/rules/conditions/tagged_event.py
@@ -11,7 +11,7 @@ from __future__ import absolute_import
 from collections import OrderedDict
 from django import forms
 
-from sentry.models import TagKey
+from sentry import tagstore
 from sentry.rules.conditions.base import EventCondition
 
 
@@ -63,7 +63,7 @@ class TaggedEventCondition(EventCondition):
 
         tags = (
             v.lower() for k, v in event.get_tags()
-            if k.lower() == key or TagKey.get_standardized_key(k) == key
+            if k.lower() == key or tagstore.get_standardized_key(k) == key
         )
 
         if match == MatchType.EQUAL:
diff --git a/src/sentry/tagstore/__init__.py b/src/sentry/tagstore/__init__.py
new file mode 100644
index 0000000000..f228215b90
--- /dev/null
+++ b/src/sentry/tagstore/__init__.py
@@ -0,0 +1,13 @@
+from __future__ import absolute_import
+
+from django.conf import settings
+
+from sentry.utils.services import LazyServiceWrapper
+
+from .base import TagStorage, TagKeyStatus  # NOQA
+from .exceptions import *  # NOQA
+
+backend = LazyServiceWrapper(
+    TagStorage, settings.SENTRY_TAGSTORE, settings.SENTRY_TAGSTORE_OPTIONS
+)
+backend.expose(locals())
diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
new file mode 100644
index 0000000000..d98fa84a4c
--- /dev/null
+++ b/src/sentry/tagstore/base.py
@@ -0,0 +1,96 @@
+"""
+sentry.tagstore.base
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+import re
+
+from sentry.utils.services import Service
+
+# Valid pattern for tag key names
+TAG_KEY_RE = re.compile(r'^[a-zA-Z0-9_\.:-]+$')
+
+# These tags are special and are used in pairing with `sentry:{}`
+# they should not be allowed to be set via data ingest due to ambiguity
+INTERNAL_TAG_KEYS = frozenset(
+    ('release', 'dist', 'user', 'filename', 'function'))
+
+
+# TODO(dcramer): pull in enum library
+class TagKeyStatus(object):
+    VISIBLE = 0
+    PENDING_DELETION = 1
+    DELETION_IN_PROGRESS = 2
+
+
+class TagStorage(Service):
+    __all__ = (
+        'is_valid_key', 'is_reserved_key', 'prefix_reserved_key', 'get_standardized_key',
+        'create_tag_key', 'get_or_create_tag_key', 'get_tag_key', 'get_tag_keys',
+        'delete_tag_key', 'incr_values_seen', 'get_group_event_ids'
+    )
+
+    def is_valid_key(self, key):
+        return bool(TAG_KEY_RE.match(key))
+
+    def is_reserved_key(self, key):
+        return key in INTERNAL_TAG_KEYS
+
+    def prefix_reserved_key(self, key):
+        # XXX(dcramer): kill sentry prefix for internal reserved tags
+        if self.is_reserved_key(key):
+            return 'sentry:{0}'.format(key)
+        else:
+            return key
+
+    def get_standardized_key(self, key):
+        if key.startswith('sentry:'):
+            return key.split('sentry:', 1)[-1]
+        return key
+
+    def create_tag_key(self, project_id, key):
+        """
+        >>> create_tag_key(1, "key1")
+        """
+        raise NotImplementedError
+
+    def get_or_create_tag_key(self, project_id, key):
+        """
+        >>> get_or_create_tag_key(1, "key1")
+        """
+        raise NotImplementedError
+
+    def get_tag_key(self, project_id, key, status=TagKeyStatus.VISIBLE):
+        """
+        >>> get_tag_key(1, "key1")
+        """
+        raise NotImplementedError
+
+    def get_tag_keys(self, project_id, keys=None, status=TagKeyStatus.VISIBLE):
+        """
+        >>> get_tag_key(1, ["key1", "key2"])
+        """
+        raise NotImplementedError
+
+    def delete_tag_key(self, project_id, key):
+        """
+        >>> delete_tag_key(1, "key1")
+        """
+        raise NotImplementedError
+
+    def incr_values_seen(self, project_id, key, count=1):
+        """
+        >>> incr_values_seen(1, "key1")
+        """
+        raise NotImplementedError
+
+    def get_group_event_ids(self, project_id, group_id, tags):
+        """
+        >>> get_group_event_ids(1, 2, {'key1': 'value1', 'key2': 'value2'})
+        """
+        raise NotImplementedError
diff --git a/src/sentry/tagstore/exceptions.py b/src/sentry/tagstore/exceptions.py
new file mode 100644
index 0000000000..ea2b407815
--- /dev/null
+++ b/src/sentry/tagstore/exceptions.py
@@ -0,0 +1,13 @@
+"""
+sentry.tagstore.exceptions
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+
+class TagKeyNotFound(Exception):
+    pass
diff --git a/src/sentry/tagstore/legacy/__init__.py b/src/sentry/tagstore/legacy/__init__.py
new file mode 100644
index 0000000000..4a16473e56
--- /dev/null
+++ b/src/sentry/tagstore/legacy/__init__.py
@@ -0,0 +1,10 @@
+"""
+sentry.tagstore.legacy
+~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+from .backend import LegacyTagStorage  # NOQA
diff --git a/src/sentry/tagstore/legacy/backend.py b/src/sentry/tagstore/legacy/backend.py
new file mode 100644
index 0000000000..85878de2ff
--- /dev/null
+++ b/src/sentry/tagstore/legacy/backend.py
@@ -0,0 +1,151 @@
+"""
+sentry.tagstore.legacy.backend
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+import six
+
+from django.db.models import Q
+from operator import or_
+from six.moves import reduce
+
+from sentry import buffer
+from sentry.tagstore import TagKeyStatus
+from sentry.models import TagKey, TagValue, EventTag
+from sentry.tagstore.base import TagStorage
+from sentry.utils.cache import cache
+from sentry.tasks.deletion import delete_tag_key
+
+
+class LegacyTagStorage(TagStorage):
+    def create_tag_key(self, project_id, key):
+        return TagKey.objects.create(project_id=project_id, key=key)
+
+    def get_or_create_tag_key(self, project_id, key):
+        return TagKey.objects.get_or_create(project_id=project_id, key=key)
+
+    def get_tag_key(self, project_id, key, status=TagKeyStatus.VISIBLE):
+        from sentry.tagstore.exceptions import TagKeyNotFound
+
+        qs = TagKey.objects.filter(
+            project_id=project_id,
+            key=key,
+        )
+
+        if status:
+            qs = qs.filter(status=status)
+
+        try:
+            return qs.get()
+        except TagKey.DoesNotExist:
+            raise TagKeyNotFound
+
+    def _get_tag_keys_cache_key(self, project_id, status):
+        return 'filterkey:all:%s:%s' % (project_id, status)
+
+    def get_tag_keys(self, project_id, keys=None, status=TagKeyStatus.VISIBLE):
+        if not keys:
+            # TODO: cache invalidation via post_save/post_delete signals much like BaseManager
+            key = self._get_tag_keys_cache_key(project_id, status)
+            result = cache.get(key)
+            if result is None:
+                qs = TagKey.objects.filter(project_id=project_id)
+
+                if status:
+                    qs = qs.filter(status=status)
+
+                result = list(qs.order_by('-values_seen')[:20])
+                cache.set(key, result, 60)
+            return result
+
+        qs = TagKey.objects.filter(
+            project_id=project_id,
+            key__in=keys,
+        )
+
+        if status:
+            qs = qs.filter(status=status)
+
+        return list(qs)
+
+    def delete_tag_key(self, project_id, key):
+        tagkey = self.get_tag_key(project_id, key, status=None)
+
+        updated = TagKey.objects.filter(
+            id=tagkey.id,
+            status=TagKeyStatus.VISIBLE,
+        ).update(status=TagKeyStatus.PENDING_DELETION)
+
+        if updated:
+            delete_tag_key.delay(object_id=tagkey.id)
+
+        return (updated, tagkey)
+
+    def incr_values_seen(self, project_id, key, count=1):
+        buffer.incr(TagKey, {
+            'values_seen': count,
+        }, {
+            'project_id': project_id,
+            'key': key,
+        })
+
+    def get_group_event_ids(self, project_id, group_id, tags):
+        tagkeys = dict(
+            TagKey.objects.filter(
+                project_id=project_id,
+                key__in=tags.keys(),
+                status=TagKeyStatus.VISIBLE,
+            ).values_list('key', 'id')
+        )
+
+        tagvalues = {
+            (t[1], t[2]): t[0]
+            for t in TagValue.objects.filter(
+                reduce(or_, (Q(key=k, value=v)
+                             for k, v in six.iteritems(tags))),
+                project_id=project_id,
+            ).values_list('id', 'key', 'value')
+        }
+
+        try:
+            tag_lookups = [(tagkeys[k], tagvalues[(k, v)])
+                           for k, v in six.iteritems(tags)]
+            # [(1, 10), ...]
+        except KeyError:
+            # one or more tags were invalid, thus the result should be an empty
+            # set
+            return []
+
+        # Django doesnt support union, so we limit results and try to find
+        # reasonable matches
+
+        # get initial matches to start the filter
+        k, v = tag_lookups.pop()
+        matches = list(
+            EventTag.objects.filter(
+                key_id=k,
+                value_id=v,
+                group_id=group_id,
+            ).values_list('event_id', flat=True)[:1000]
+        )
+
+        # for each remaining tag, find matches contained in our
+        # existing set, pruning it down each iteration
+        for k, v in tag_lookups:
+            matches = list(
+                EventTag.objects.filter(
+                    key_id=k,
+                    value_id=v,
+                    event_id__in=matches,
+                    group_id=group_id,
+                ).values_list('event_id', flat=True)[:1000]
+            )
+            if not matches:
+                return []
+
+        return matches
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 5673d253d7..ad234d8413 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -138,17 +138,15 @@ def plugin_post_process_group(plugin_slug, event, **kwargs):
     name='sentry.tasks.index_event_tags', default_retry_delay=60 * 5, max_retries=None
 )
 def index_event_tags(organization_id, project_id, event_id, tags, group_id=None, **kwargs):
-    from sentry.models import EventTag, TagKey, TagValue
+    from sentry import tagstore
+    from sentry.models import EventTag, TagValue
 
     Raven.tags_context({
         'project': project_id,
     })
 
     for key, value in tags:
-        tagkey, _ = TagKey.objects.get_or_create(
-            project_id=project_id,
-            key=key,
-        )
+        tagkey, _ = tagstore.get_or_create_tag_key(project_id, key)
 
         tagvalue, _ = TagValue.objects.get_or_create(
             project_id=project_id,
diff --git a/src/sentry/web/frontend/group_tag_export.py b/src/sentry/web/frontend/group_tag_export.py
index 6154f7fa1e..838a7226c9 100644
--- a/src/sentry/web/frontend/group_tag_export.py
+++ b/src/sentry/web/frontend/group_tag_export.py
@@ -2,8 +2,9 @@ from __future__ import absolute_import
 
 from django.http import Http404
 
+from sentry import tagstore
 from sentry.models import (
-    EventUser, GroupTagValue, TagKey, TagKeyStatus, Group, get_group_with_redirect
+    EventUser, GroupTagValue, Group, get_group_with_redirect
 )
 from sentry.web.frontend.base import ProjectView
 from sentry.web.frontend.mixins.csv import CsvMixin
@@ -67,19 +68,15 @@ class GroupTagExportView(ProjectView, CsvMixin):
         except Group.DoesNotExist:
             raise Http404
 
-        if TagKey.is_reserved_key(key):
+        if tagstore.is_reserved_key(key):
             lookup_key = 'sentry:{0}'.format(key)
         else:
             lookup_key = key
 
         # validate existance as it may be deleted
         try:
-            TagKey.objects.get(
-                project_id=group.project_id,
-                key=lookup_key,
-                status=TagKeyStatus.VISIBLE,
-            )
-        except TagKey.DoesNotExist:
+            tagstore.get_tag_key(group.project_id, lookup_key)
+        except tagstore.TagKeyNotFound:
             raise Http404
 
         if key == 'user':
diff --git a/src/sentry/web/frontend/project_tags.py b/src/sentry/web/frontend/project_tags.py
index 6d0805c8c8..7178e97cbc 100644
--- a/src/sentry/web/frontend/project_tags.py
+++ b/src/sentry/web/frontend/project_tags.py
@@ -1,15 +1,12 @@
 from __future__ import absolute_import
 
-from sentry.models import TagKey, TagKeyStatus
+from sentry import tagstore
 from sentry.web.frontend.base import ProjectView
 
 
 class ProjectTagsView(ProjectView):
     def get(self, request, organization, team, project):
-        tag_list = TagKey.objects.filter(
-            project_id=project.id,
-            status=TagKeyStatus.VISIBLE,
-        )
+        tag_list = tagstore.get_tag_keys(project.id)
 
         context = {
             'tag_list': tag_list,
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index 9c8e7d4211..ad7435bae0 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -10,6 +10,7 @@ import mock
 import six
 import zlib
 
+from sentry import tagstore
 from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.test.utils import override_settings
@@ -19,7 +20,7 @@ from gzip import GzipFile
 from raven import Client
 from six import StringIO
 
-from sentry.models import (Group, GroupTagKey, GroupTagValue, Event, TagKey, TagValue)
+from sentry.models import (Group, GroupTagKey, GroupTagValue, Event, TagValue)
 from sentry.testutils import TestCase, TransactionTestCase
 from sentry.testutils.helpers import get_auth_header
 from sentry.utils.settings import (validate_settings, ConfigurationError, import_string)
@@ -172,10 +173,10 @@ class SentryRemoteTest(TestCase):
 
         assert instance.message == 'hello'
 
-        assert TagKey.objects.filter(
+        assert tagstore.get_tag_key(
             key='foo',
             project_id=self.project.id,
-        ).exists()
+        ) is not None
         assert TagValue.objects.filter(
             key='foo',
             value='bar',
diff --git a/tests/sentry/api/endpoints/test_group_events.py b/tests/sentry/api/endpoints/test_group_events.py
index 22b24f9b35..ef19cbaecb 100644
--- a/tests/sentry/api/endpoints/test_group_events.py
+++ b/tests/sentry/api/endpoints/test_group_events.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 import six
 
-from sentry.models import EventTag, TagKey, TagValue
+from sentry import tagstore
+from sentry.models import EventTag, TagValue
 from sentry.testutils import APITestCase
 
 
@@ -33,8 +34,8 @@ class GroupEventsTest(APITestCase):
         event_1 = self.create_event('a' * 32, group=group)
         event_2 = self.create_event('b' * 32, group=group)
 
-        tagkey_1 = TagKey.objects.create(project_id=group.project_id, key='foo')
-        tagkey_2 = TagKey.objects.create(project_id=group.project_id, key='bar')
+        tagkey_1 = tagstore.create_tag_key(project_id=group.project_id, key='foo')
+        tagkey_2 = tagstore.create_tag_key(project_id=group.project_id, key='bar')
         tagvalue_1 = TagValue.objects.create(project_id=group.project_id, key='foo', value='baz')
         tagvalue_2 = TagValue.objects.create(project_id=group.project_id, key='bar', value='biz')
         tagvalue_3 = TagValue.objects.create(project_id=group.project_id, key='bar', value='buz')
diff --git a/tests/sentry/api/endpoints/test_group_tagkey_details.py b/tests/sentry/api/endpoints/test_group_tagkey_details.py
index 712ecb8ad5..75ed892e1d 100644
--- a/tests/sentry/api/endpoints/test_group_tagkey_details.py
+++ b/tests/sentry/api/endpoints/test_group_tagkey_details.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 import six
 
-from sentry.models import GroupTagKey, GroupTagValue, TagKey, TagValue
+from sentry import tagstore
+from sentry.models import GroupTagKey, GroupTagValue, TagValue
 from sentry.testutils import APITestCase
 
 
@@ -14,11 +15,11 @@ class GroupTagDetailsTest(APITestCase):
 
         key, value = group.data['tags'][0]
 
-        tagkey = TagKey.objects.create(
+        tagkey = tagstore.create_tag_key(
             project_id=group.project_id,
             key=key,
-            values_seen=2,
         )
+        tagstore.incr_values_seen(group.project_id, key, count=2)
         TagValue.objects.create(
             project_id=group.project_id,
             key=key,
diff --git a/tests/sentry/api/endpoints/test_group_tagkey_values.py b/tests/sentry/api/endpoints/test_group_tagkey_values.py
index df239a2ee7..e727ae6067 100644
--- a/tests/sentry/api/endpoints/test_group_tagkey_values.py
+++ b/tests/sentry/api/endpoints/test_group_tagkey_values.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
-from sentry.models import EventUser, GroupTagValue, TagKey, TagValue
+from sentry import tagstore
+from sentry.models import EventUser, GroupTagValue, TagValue
 from sentry.testutils import APITestCase
 
 
@@ -10,7 +11,7 @@ class GroupTagKeyValuesTest(APITestCase):
 
         project = self.create_project()
         group = self.create_group(project=project)
-        TagKey.objects.create(project_id=project.id, key=key)
+        tagstore.create_tag_key(project_id=project.id, key=key)
         TagValue.objects.create(
             project_id=project.id,
             key=key,
@@ -44,7 +45,7 @@ class GroupTagKeyValuesTest(APITestCase):
             username='foo',
             ip_address='127.0.0.1',
         )
-        TagKey.objects.create(
+        tagstore.create_tag_key(
             project_id=project.id,
             key='sentry:user',
         )
diff --git a/tests/sentry/api/endpoints/test_group_tags.py b/tests/sentry/api/endpoints/test_group_tags.py
index f21cea49b5..062fb5d5cc 100644
--- a/tests/sentry/api/endpoints/test_group_tags.py
+++ b/tests/sentry/api/endpoints/test_group_tags.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
-from sentry.models import GroupTagKey, GroupTagValue, TagKey, TagValue
+from sentry import tagstore
+from sentry.models import GroupTagKey, GroupTagValue, TagValue
 from sentry.testutils import APITestCase
 
 
@@ -11,7 +12,7 @@ class GroupTagsTest(APITestCase):
         group.save()
 
         for key, value in group.data['tags']:
-            TagKey.objects.create(
+            tagstore.create_tag_key(
                 project_id=group.project_id,
                 key=key,
             )
diff --git a/tests/sentry/api/endpoints/test_project_tagkey_details.py b/tests/sentry/api/endpoints/test_project_tagkey_details.py
index 1ddb6495e1..bba53874c9 100644
--- a/tests/sentry/api/endpoints/test_project_tagkey_details.py
+++ b/tests/sentry/api/endpoints/test_project_tagkey_details.py
@@ -5,18 +5,19 @@ import six
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import TagKey, TagKeyStatus
+from sentry import tagstore
+from sentry.tagstore import TagKeyStatus
 from sentry.testutils import APITestCase
 
 
 class ProjectTagKeyDetailsTest(APITestCase):
     def test_simple(self):
         project = self.create_project()
-        tagkey = TagKey.objects.create(
+        tagkey = tagstore.create_tag_key(
             project_id=project.id,
             key='foo',
-            values_seen=16,
         )
+        tagstore.incr_values_seen(project.id, 'foo', count=16)
 
         self.login_as(user=self.user)
 
@@ -37,10 +38,10 @@ class ProjectTagKeyDetailsTest(APITestCase):
 
 
 class ProjectTagKeyDeleteTest(APITestCase):
-    @mock.patch('sentry.api.endpoints.project_tagkey_details.delete_tag_key')
+    @mock.patch('sentry.tagstore.legacy.backend.delete_tag_key')
     def test_simple(self, mock_delete_tag_key):
         project = self.create_project()
-        tagkey = TagKey.objects.create(project_id=project.id, key='foo')
+        tagkey = tagstore.create_tag_key(project_id=project.id, key='foo')
 
         self.login_as(user=self.user)
 
@@ -59,4 +60,4 @@ class ProjectTagKeyDeleteTest(APITestCase):
 
         mock_delete_tag_key.delay.assert_called_once_with(object_id=tagkey.id)
 
-        assert TagKey.objects.get(id=tagkey.id).status == TagKeyStatus.PENDING_DELETION
+        assert tagstore.get_tag_key(project.id, tagkey.key).status == TagKeyStatus.PENDING_DELETION
diff --git a/tests/sentry/api/endpoints/test_project_tagkey_values.py b/tests/sentry/api/endpoints/test_project_tagkey_values.py
index 9b06579434..228e40f9e9 100644
--- a/tests/sentry/api/endpoints/test_project_tagkey_values.py
+++ b/tests/sentry/api/endpoints/test_project_tagkey_values.py
@@ -2,14 +2,15 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import TagKey, TagValue
+from sentry import tagstore
+from sentry.models import TagValue
 from sentry.testutils import APITestCase
 
 
 class ProjectTagKeyValuesTest(APITestCase):
     def test_simple(self):
         project = self.create_project()
-        tagkey = TagKey.objects.create(project_id=project.id, key='foo')
+        tagkey = tagstore.create_tag_key(project_id=project.id, key='foo')
         TagValue.objects.create(project_id=project.id, key='foo', value='bar')
 
         self.login_as(user=self.user)
@@ -32,7 +33,7 @@ class ProjectTagKeyValuesTest(APITestCase):
 
     def test_query(self):
         project = self.create_project()
-        tagkey = TagKey.objects.create(project_id=project.id, key='foo')
+        tagkey = tagstore.create_tag_key(project_id=project.id, key='foo')
         TagValue.objects.create(project_id=project.id, key='foo', value='bar')
 
         self.login_as(user=self.user)
diff --git a/tests/sentry/api/endpoints/test_project_tags.py b/tests/sentry/api/endpoints/test_project_tags.py
index c30a19b563..5d7f7e894a 100644
--- a/tests/sentry/api/endpoints/test_project_tags.py
+++ b/tests/sentry/api/endpoints/test_project_tags.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import TagKey
+from sentry import tagstore
 from sentry.testutils import APITestCase
 
 
@@ -11,7 +11,7 @@ class ProjectTagsTest(APITestCase):
         project = self.create_project()
 
         for key in ('foo', 'bar'):
-            TagKey.objects.create(
+            tagstore.create_tag_key(
                 project_id=project.id,
                 key=key,
             )
diff --git a/tests/sentry/api/serializers/test_grouptagkey.py b/tests/sentry/api/serializers/test_grouptagkey.py
index 932b950c3f..a9c609707f 100644
--- a/tests/sentry/api/serializers/test_grouptagkey.py
+++ b/tests/sentry/api/serializers/test_grouptagkey.py
@@ -2,8 +2,9 @@ from __future__ import absolute_import
 
 import six
 
+from sentry import tagstore
 from sentry.api.serializers import serialize
-from sentry.models import GroupTagKey, TagKey
+from sentry.models import GroupTagKey
 from sentry.testutils import TestCase
 
 
@@ -11,7 +12,7 @@ class GroupTagKeySerializerTest(TestCase):
     def test(self):
         user = self.create_user()
         project = self.create_project()
-        tagkey = TagKey.objects.create(
+        tagkey = tagstore.create_tag_key(
             project_id=project.id,
             key='key'
         )
diff --git a/tests/sentry/deletions/test_tagkey.py b/tests/sentry/deletions/test_tagkey.py
index 314dd43784..873e3ac70a 100644
--- a/tests/sentry/deletions/test_tagkey.py
+++ b/tests/sentry/deletions/test_tagkey.py
@@ -1,7 +1,8 @@
 from __future__ import absolute_import
 
+from sentry import tagstore
 from sentry.models import (
-    EventTag, GroupTagKey, GroupTagValue, ScheduledDeletion, TagKey, TagValue
+    EventTag, GroupTagKey, GroupTagValue, ScheduledDeletion, TagValue
 )
 from sentry.tasks.deletion import run_deletion
 from sentry.testutils import TestCase
@@ -12,7 +13,7 @@ class DeleteTagKeyTest(TestCase):
         team = self.create_team(name='test', slug='test')
         project = self.create_project(team=team, name='test1', slug='test1')
         group = self.create_group(project=project)
-        tk = TagKey.objects.create(key='foo', project_id=project.id)
+        tk = tagstore.create_tag_key(key='foo', project_id=project.id)
         TagValue.objects.create(key='foo', value='bar', project_id=project.id)
         GroupTagKey.objects.create(key='foo', group_id=group.id, project_id=project.id)
         GroupTagValue.objects.create(
@@ -28,7 +29,7 @@ class DeleteTagKeyTest(TestCase):
 
         project2 = self.create_project(team=team, name='test2')
         group2 = self.create_group(project=project2)
-        tk2 = TagKey.objects.create(key='foo', project_id=project2.id)
+        tk2 = tagstore.create_tag_key(key='foo', project_id=project2.id)
         gtk2 = GroupTagKey.objects.create(key='foo', group_id=group2.id, project_id=project2.id)
         gtv2 = GroupTagValue.objects.create(
             key='foo', value='bar', group_id=group2.id, project_id=project2.id
@@ -50,10 +51,14 @@ class DeleteTagKeyTest(TestCase):
         assert not GroupTagValue.objects.filter(key=tk.key, project_id=project.id).exists()
         assert not GroupTagKey.objects.filter(key=tk.key, project_id=project.id).exists()
         assert not TagValue.objects.filter(key=tk.key, project_id=project.id).exists()
-        assert not TagKey.objects.filter(id=tk.id).exists()
+        try:
+            tagstore.get_tag_key(key='foo', project_id=project.id)
+            assert False  # verify exception thrown
+        except tagstore.TagKeyNotFound:
+            pass
         assert not EventTag.objects.filter(key_id=tk.id).exists()
 
-        assert TagKey.objects.filter(id=tk2.id).exists()
+        assert tagstore.get_tag_key(key='foo', project_id=project2.id) is not None
         assert GroupTagKey.objects.filter(id=gtk2.id).exists()
         assert GroupTagValue.objects.filter(id=gtv2.id).exists()
         assert EventTag.objects.filter(key_id=tk2.id).exists()
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index e82f536e26..beaf5af604 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -6,7 +6,8 @@ from datetime import timedelta
 from django.utils import timezone
 from mock import Mock, patch
 
-from sentry.models import EventTag, Group, GroupSnooze, GroupStatus, TagKey, TagValue
+from sentry import tagstore
+from sentry.models import EventTag, Group, GroupSnooze, GroupStatus, TagValue
 from sentry.testutils import TestCase
 from sentry.tasks.merge import merge_group
 from sentry.tasks.post_process import index_event_tags, post_process_group
@@ -128,7 +129,7 @@ class IndexEventTagsTest(TestCase):
         ).values_list('key_id', 'value_id'))
         assert len(tags) == 2
 
-        tagkey = TagKey.objects.get(
+        tagkey = tagstore.get_tag_key(
             key='foo',
             project_id=self.project.id,
         )
@@ -139,7 +140,7 @@ class IndexEventTagsTest(TestCase):
         )
         assert (tagkey.id, tagvalue.id) in tags
 
-        tagkey = TagKey.objects.get(
+        tagkey = tagstore.get_tag_key(
             key='biz',
             project_id=self.project.id,
         )
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index a6e09dc828..21d55431a8 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -6,6 +6,7 @@ from uuid import uuid4
 
 import pytest
 
+from sentry import tagstore
 from sentry.constants import ObjectStatus
 from sentry.exceptions import DeleteAborted
 from sentry.models import (
@@ -13,7 +14,7 @@ from sentry.models import (
     EnvironmentProject, Event, EventMapping, EventTag, Group, GroupAssignee, GroupHash, GroupMeta,
     GroupRedirect, GroupResolution, GroupStatus, GroupTagKey, GroupTagValue, Organization,
     OrganizationStatus, Project, ProjectStatus, Release, ReleaseCommit, ReleaseEnvironment,
-    Repository, TagKey, TagValue, Team, TeamStatus
+    Repository, TagValue, Team, TeamStatus
 )
 from sentry.plugins.providers.dummy.repository import DummyRepositoryProvider
 from sentry.tasks.deletion import (
@@ -187,7 +188,7 @@ class DeleteTagKeyTest(TestCase):
         team = self.create_team(name='test', slug='test')
         project = self.create_project(team=team, name='test1', slug='test1')
         group = self.create_group(project=project)
-        tk = TagKey.objects.create(key='foo', project_id=project.id)
+        tk = tagstore.create_tag_key(key='foo', project_id=project.id)
         TagValue.objects.create(key='foo', value='bar', project_id=project.id)
         GroupTagKey.objects.create(key='foo', group_id=group.id, project_id=project.id)
         GroupTagValue.objects.create(
@@ -203,7 +204,7 @@ class DeleteTagKeyTest(TestCase):
 
         project2 = self.create_project(team=team, name='test2')
         group2 = self.create_group(project=project2)
-        tk2 = TagKey.objects.create(key='foo', project_id=project2.id)
+        tk2 = tagstore.create_tag_key(key='foo', project_id=project2.id)
         gtk2 = GroupTagKey.objects.create(key='foo', group_id=group2.id, project_id=project2.id)
         gtv2 = GroupTagValue.objects.create(
             key='foo', value='bar', group_id=group2.id, project_id=project2.id
@@ -223,9 +224,13 @@ class DeleteTagKeyTest(TestCase):
             assert not GroupTagKey.objects.filter(key=tk.key, project_id=project.id).exists()
             assert not TagValue.objects.filter(key=tk.key, project_id=project.id).exists()
             assert not EventTag.objects.filter(key_id=tk.id).exists()
-            assert not TagKey.objects.filter(id=tk.id).exists()
+            try:
+                tagstore.get_tag_key(key='foo', project_id=project.id)
+                assert False  # verify exception thrown
+            except tagstore.TagKeyNotFound:
+                pass
 
-        assert TagKey.objects.filter(id=tk2.id).exists()
+        assert tagstore.get_tag_key(key='foo', project_id=project2.id) is not None
         assert GroupTagKey.objects.filter(id=gtk2.id).exists()
         assert GroupTagValue.objects.filter(id=gtv2.id).exists()
         assert EventTag.objects.filter(key_id=tk2.id).exists()
diff --git a/tests/sentry/web/frontend/test_group_tag_export.py b/tests/sentry/web/frontend/test_group_tag_export.py
index fbb915ad20..4c8c31c1e2 100644
--- a/tests/sentry/web/frontend/test_group_tag_export.py
+++ b/tests/sentry/web/frontend/test_group_tag_export.py
@@ -3,7 +3,8 @@ from __future__ import absolute_import
 from datetime import timedelta
 from django.utils import timezone
 
-from sentry.models import GroupTagValue, TagKey, TagValue
+from sentry import tagstore
+from sentry.models import GroupTagValue, TagValue
 from sentry.testutils import TestCase
 
 
@@ -16,7 +17,7 @@ class GroupTagExportTest(TestCase):
 
         project = self.create_project()
         group = self.create_group(project=project)
-        TagKey.objects.create(project_id=project.id, key=key)
+        tagstore.create_tag_key(project_id=project.id, key=key)
         TagValue.objects.create(
             project_id=project.id,
             key=key,
diff --git a/tests/sentry/web/frontend/test_project_tags.py b/tests/sentry/web/frontend/test_project_tags.py
index 89b9d0d0f1..fc1a990b63 100644
--- a/tests/sentry/web/frontend/test_project_tags.py
+++ b/tests/sentry/web/frontend/test_project_tags.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import, print_function
 from django.core.urlresolvers import reverse
 from exam import fixture
 
-from sentry.models import TagKey
+from sentry import tagstore
 from sentry.testutils import TestCase
 
 
@@ -18,9 +18,9 @@ class ProjectTagsTest(TestCase):
         self.assertRequiresAuthentication(self.path)
 
     def test_simple(self):
-        TagKey.objects.create(project_id=self.project.id, key='site')
-        TagKey.objects.create(project_id=self.project.id, key='url')
-        TagKey.objects.create(project_id=self.project.id, key='os')
+        tagstore.create_tag_key(project_id=self.project.id, key='site')
+        tagstore.create_tag_key(project_id=self.project.id, key='url')
+        tagstore.create_tag_key(project_id=self.project.id, key='os')
 
         self.login_as(self.user)
 
