commit 27b83489add79dc23c5a9ab05acd934ae7bb97a1
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Sat Jul 9 13:03:29 2016 +0500

    Improve minified react error messages if truncation happens

diff --git a/src/sentry/lang/javascript/errormapping.py b/src/sentry/lang/javascript/errormapping.py
index 1243c9a3f2..ae30aa5108 100644
--- a/src/sentry/lang/javascript/errormapping.py
+++ b/src/sentry/lang/javascript/errormapping.py
@@ -9,6 +9,7 @@ from django.conf import settings
 from django.core.cache import cache
 
 from sentry import http
+from sentry.utils.strings import count_sprintf_parameters
 
 
 logger = logging.getLogger(__name__)
@@ -86,11 +87,19 @@ def process_react_exception(exc, match, mapping):
     msg_format = mapping.get(error_id)
     if msg_format is None:
         return False
+
+    arg_count = count_sprintf_parameters(msg_format)
     args = []
     for k, v in cgi.parse_qsl(qs, keep_blank_values=True):
         if k == 'args[]':
             args.append(v)
-    exc['value'] = msg_format % tuple(args)
+
+    # Due to truncated error messages we sometimes might not be able to
+    # get all arguments.  In that case we fill up missing parameters for
+    # the format string with <redacted>.
+    args = tuple(args + ['<redacted>'] * (arg_count - len(args)))[:arg_count]
+    exc['value'] = msg_format % args
+
     return True
 
 
diff --git a/src/sentry/utils/strings.py b/src/sentry/utils/strings.py
index fe2714ba08..526740db80 100644
--- a/src/sentry/utils/strings.py
+++ b/src/sentry/utils/strings.py
@@ -26,6 +26,8 @@ _camelcase_re = re.compile(
     r'(?:[A-Z]{2,}(?=[A-Z]))|(?:[A-Z][a-z0-9]+)|(?:[a-z0-9]+)')
 _letters_re = re.compile(r'[A-Z]+')
 _digit_re = re.compile(r'\d+')
+_sprintf_placeholder_re = re.compile(
+    r'%(?:\d+\$)?[+-]?(?:[ 0]|\'.{1})?-?\d*(?:\.\d+)?[bcdeEufFgGosxX]')
 
 
 def truncatechars(value, arg):
@@ -185,3 +187,8 @@ def is_valid_dot_atom(value):
         and not value[0] == '.'
         and not value[-1] == '.'  # cannot start or end with a dot
         and set(value).issubset(valid_dot_atom_characters))  # can only contain valid characters
+
+
+def count_sprintf_parameters(string):
+    """Counts the number of sprintf parameters in a string."""
+    return len(_sprintf_placeholder_re.findall(string))
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index 407c3dbf8f..26c8878714 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -416,3 +416,41 @@ class ErrorMappingTest(TestCase):
             'Component.getChildContext(): key "" is not defined in '
             'childContextTypes.'
         )
+
+    @responses.activate
+    def test_react_error_mapping_truncated(self):
+        responses.add(responses.GET, REACT_MAPPING_URL, body=r'''
+        {
+          "108": "%s.getChildContext(): key \"%s\" is not defined in childContextTypes."
+        }
+        ''', content_type='application/json')
+
+        data = {
+            'platform': 'javascript',
+            'sentry.interfaces.Exception': {
+                'values': [{
+                    'type': 'InvariantViolation',
+                    'value': (
+                        u'Minified React error #108; visit http://facebook'
+                        u'.github.io/react/docs/error-decoder.html?â€¦'
+                    ),
+                    'stacktrace': {
+                        'frames': [
+                            {
+                                'abs_path': 'http://example.com/foo.js',
+                                'filename': 'foo.js',
+                                'lineno': 4,
+                                'colno': 0,
+                            },
+                        ],
+                    },
+                }],
+            }
+        }
+
+        assert rewrite_exception(data)
+
+        assert data['sentry.interfaces.Exception']['values'][0]['value'] == (
+            '<redacted>.getChildContext(): key "<redacted>" is not defined in '
+            'childContextTypes.'
+        )
