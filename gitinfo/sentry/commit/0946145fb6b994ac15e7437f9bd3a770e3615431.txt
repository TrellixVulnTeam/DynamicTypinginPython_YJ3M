commit 0946145fb6b994ac15e7437f9bd3a770e3615431
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 21 12:02:52 2017 -0700

    api: add stats to project list

diff --git a/src/sentry/api/endpoints/organization_projects.py b/src/sentry/api/endpoints/organization_projects.py
index 84f706b635..31ddacfe3e 100644
--- a/src/sentry/api/endpoints/organization_projects.py
+++ b/src/sentry/api/endpoints/organization_projects.py
@@ -10,6 +10,8 @@ from sentry.api.serializers.models.project import ProjectWithTeamSerializer
 from sentry.models import Project, Team
 from sentry.utils.apidocs import scenario, attach_scenarios
 
+ERR_INVALID_STATS_PERIOD = "Invalid stats_period. Valid choices are '', '24h', '14d', and '30d'"
+
 
 @scenario('ListOrganizationProjects')
 def list_organization_projects_scenario(runner):
@@ -31,6 +33,24 @@ class OrganizationProjectsEndpoint(OrganizationEndpoint):
                                           which the projects should be listed.
         :auth: required
         """
+        stats_period = request.GET.get('statsPeriod')
+        if stats_period not in (None, '', '24h', '14d', '30d'):
+            return Response(
+                {
+                    'error': {
+                        'params': {
+                            'stats_period': {
+                                'message': ERR_INVALID_STATS_PERIOD
+                            },
+                        },
+                    }
+                },
+                status=400
+            )
+        elif not stats_period:
+            # disable stats
+            stats_period = None
+
         if request.auth and not request.user.is_authenticated():
             # TODO: remove this, no longer supported probably
             if hasattr(request.auth, 'project'):
@@ -63,6 +83,8 @@ class OrganizationProjectsEndpoint(OrganizationEndpoint):
             request=request,
             queryset=queryset,
             order_by='slug',
-            on_results=lambda x: serialize(x, request.user, ProjectWithTeamSerializer()),
+            on_results=lambda x: serialize(x, request.user, ProjectWithTeamSerializer(
+                stats_period=stats_period,
+            )),
             paginator_cls=OffsetPaginator,
         )
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 5b05853b06..dd879e667c 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import, print_function
 
-from collections import defaultdict, namedtuple
+from collections import defaultdict
 from datetime import timedelta
 from itertools import izip
 
@@ -11,7 +11,7 @@ from django.utils import timezone
 
 from sentry import tsdb
 from sentry.api.serializers import Serializer, register, serialize
-from sentry.constants import LOG_LEVELS
+from sentry.constants import LOG_LEVELS, StatsPeriod
 from sentry.models import (
     Group, GroupAssignee, GroupBookmark, GroupMeta, GroupResolution, GroupSeen, GroupSnooze,
     GroupStatus, GroupSubscription, GroupSubscriptionReason, GroupTagKey, User, UserOption,
@@ -293,9 +293,6 @@ class GroupSerializer(Serializer):
         }
 
 
-StatsPeriod = namedtuple('StatsPeriod', ('segments', 'interval'))
-
-
 class StreamGroupSerializer(GroupSerializer):
     STATS_PERIOD_CHOICES = {
         '14d': StatsPeriod(14, timedelta(hours=24)),
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 3c6595ecf0..a23aee9ba7 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -3,11 +3,15 @@ from __future__ import absolute_import
 import six
 
 from collections import defaultdict
+from datetime import timedelta
 from django.db.models import Q
 from django.db.models.aggregates import Count
+from django.utils import timezone
 
+from sentry import tsdb
 from sentry.api.serializers import register, serialize, Serializer
 from sentry.api.serializers.models.plugin import PluginSerializer
+from sentry.constants import StatsPeriod
 from sentry.digests import backend as digests
 from sentry.models import (
     Project, ProjectBookmark, ProjectOption, ProjectPlatform, ProjectStatus, Release, UserOption,
@@ -22,6 +26,12 @@ STATUS_LABELS = {
     ProjectStatus.DELETION_IN_PROGRESS: 'deleted',
 }
 
+STATS_PERIOD_CHOICES = {
+    '30d': StatsPeriod(30, timedelta(hours=24)),
+    '14d': StatsPeriod(14, timedelta(hours=24)),
+    '24h': StatsPeriod(24, timedelta(hours=1)),
+}
+
 
 @register(Project)
 class ProjectSerializer(Serializer):
@@ -30,6 +40,12 @@ class ProjectSerializer(Serializer):
     such as "show all projects for this organization", and its attributes be kept to a minimum.
     """
 
+    def __init__(self, stats_period=None):
+        if stats_period is not None:
+            assert stats_period in STATS_PERIOD_CHOICES
+
+        self.stats_period = stats_period
+
     def get_attrs(self, item_list, user):
         project_ids = [i.id for i in item_list]
         if user.is_authenticated() and item_list:
@@ -52,6 +68,22 @@ class ProjectSerializer(Serializer):
             user_options = {}
             default_subscribe = False
 
+        if self.stats_period:
+            # we need to compute stats at 1d (1h resolution), and 14d
+            project_ids = [o.id for o in item_list]
+
+            segments, interval = STATS_PERIOD_CHOICES[self.stats_period]
+            now = timezone.now()
+            stats = tsdb.get_range(
+                model=tsdb.models.project_total_received,
+                keys=project_ids,
+                end=now,
+                start=now - ((segments - 1) * interval),
+                rollup=int(interval.total_seconds()),
+            )
+        else:
+            stats = None
+
         result = {}
         for item in item_list:
             result[item] = {
@@ -62,6 +94,8 @@ class ProjectSerializer(Serializer):
                     default_subscribe,
                 )),
             }
+            if stats:
+                result[item]['stats'] = stats[item.id]
         return result
 
     def serialize(self, obj, attrs, user):
@@ -80,7 +114,7 @@ class ProjectSerializer(Serializer):
 
         status_label = STATUS_LABELS.get(obj.status, 'unknown')
 
-        return {
+        context = {
             'id': six.text_type(obj.id),
             'slug': obj.slug,
             'name': obj.name,
@@ -94,6 +128,9 @@ class ProjectSerializer(Serializer):
             'status': status_label,
             'platform': obj.platform,
         }
+        if 'stats' in attrs:
+            context['stats'] = attrs['stats']
+        return context
 
 
 class ProjectWithOrganizationSerializer(ProjectSerializer):
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 3102496f11..fbd87db50f 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -14,7 +14,7 @@ import logging
 import os.path
 import six
 
-from collections import OrderedDict
+from collections import OrderedDict, namedtuple
 from django.conf import settings
 from django.utils.translation import ugettext_lazy as _
 from operator import attrgetter
@@ -330,3 +330,6 @@ class ObjectStatus(object):
                                        'hidden'), (cls.PENDING_DELETION, 'pending_deletion'),
             (cls.DELETION_IN_PROGRESS, 'deletion_in_progress'),
         )
+
+
+StatsPeriod = namedtuple('StatsPeriod', ('segments', 'interval'))
diff --git a/tests/sentry/api/endpoints/test_organization_projects.py b/tests/sentry/api/endpoints/test_organization_projects.py
index 37803ab86d..a14649eab8 100644
--- a/tests/sentry/api/endpoints/test_organization_projects.py
+++ b/tests/sentry/api/endpoints/test_organization_projects.py
@@ -2,8 +2,6 @@ from __future__ import absolute_import
 
 import six
 
-from django.core.urlresolvers import reverse
-
 from sentry.testutils import APITestCase
 
 
@@ -15,9 +13,36 @@ class OrganizationProjectsTest(APITestCase):
         team = self.create_team(organization=org)
         project = self.create_project(team=team)
 
-        url = reverse('sentry-api-0-organization-projects', args=[org.slug])
-        response = self.client.get(url, format='json')
+        path = '/api/0/organizations/{}/projects/'.format(org.slug)
+        response = self.client.get(path)
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
         assert response.data[0]['id'] == six.text_type(project.id)
+
+    def test_with_stats(self):
+        self.login_as(user=self.user)
+
+        org = self.create_organization(owner=self.user, name='baz')
+        team = self.create_team(organization=org)
+        self.create_project(team=team)
+
+        path = '/api/0/organizations/{}/projects/'.format(org.slug)
+
+        response = self.client.get('{}?statsPeriod=24h'.format(path), format='json')
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['stats']
+
+        response = self.client.get('{}?statsPeriod=14d'.format(path), format='json')
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['stats']
+
+        response = self.client.get('{}?statsPeriod='.format(path), format='json')
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert 'stats' not in response.data[0]
+
+        response = self.client.get('{}?statsPeriod=48h'.format(path), format='json')
+        assert response.status_code == 400
