commit 555697bed23dc5ab274357f64730bcd7052fa8df
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 9 13:42:23 2016 -0800

    Add Team Members display

diff --git a/src/sentry/api/endpoints/team_members.py b/src/sentry/api/endpoints/team_members.py
new file mode 100644
index 0000000000..7036c98bfa
--- /dev/null
+++ b/src/sentry/api/endpoints/team_members.py
@@ -0,0 +1,24 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases.team import TeamEndpoint
+from sentry.api.serializers import serialize
+from sentry.models import OrganizationMember
+
+
+class TeamMembersEndpoint(TeamEndpoint):
+    def get(self, request, team):
+        queryset = OrganizationMember.objects.filter(
+            organization=team.organization,
+            teams=team,
+        ).select_related('user')
+
+        member_list = sorted(
+            queryset,
+            key=lambda x: x.user.get_display_name() if x.user_id else x.email
+        )
+
+        context = serialize(member_list, request.user)
+
+        return Response(context)
diff --git a/src/sentry/api/serializers/models/organization_member.py b/src/sentry/api/serializers/models/organization_member.py
index 4c626dfe15..d72f22844b 100644
--- a/src/sentry/api/serializers/models/organization_member.py
+++ b/src/sentry/api/serializers/models/organization_member.py
@@ -10,6 +10,7 @@ class OrganizationMemberSerializer(Serializer):
         d = {
             'id': str(obj.id),
             'email': obj.get_email(),
+            'name': obj.user.get_display_name() if obj.user else obj.get_email(),
             'role': obj.role,
             'roleName': obj.get_role_display(),
             'pending': obj.is_pending,
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index bc4a4ceb6a..d191b283e8 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -64,6 +64,7 @@ from .endpoints.system_options import SystemOptionsEndpoint
 from .endpoints.team_details import TeamDetailsEndpoint
 from .endpoints.team_groups_new import TeamGroupsNewEndpoint
 from .endpoints.team_groups_trending import TeamGroupsTrendingEndpoint
+from .endpoints.team_members import TeamMembersEndpoint
 from .endpoints.team_project_index import TeamProjectIndexEndpoint
 from .endpoints.team_stats import TeamStatsEndpoint
 from .endpoints.user_details import UserDetailsEndpoint
@@ -141,6 +142,9 @@ urlpatterns = patterns(
     url(r'^teams/(?P<organization_slug>[^\/]+)/(?P<team_slug>[^\/]+)/(?:groups|issues)/trending/$',
         TeamGroupsTrendingEndpoint.as_view(),
         name='sentry-api-0-team-groups-trending'),
+    url(r'^teams/(?P<organization_slug>[^\/]+)/(?P<team_slug>[^\/]+)/members/$',
+        TeamMembersEndpoint.as_view(),
+        name='sentry-api-0-team-members'),
     url(r'^teams/(?P<organization_slug>[^\/]+)/(?P<team_slug>[^\/]+)/projects/$',
         TeamProjectIndexEndpoint.as_view(),
         name='sentry-api-0-team-project-index'),
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 3845094e6b..1c70599f17 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -39,6 +39,8 @@ import ReleaseNewEvents from './views/releaseNewEvents';
 import RouteNotFound from './views/routeNotFound';
 import SharedGroupDetails from './views/sharedGroupDetails';
 import Stream from './views/stream';
+import TeamDetails from './views/teamDetails';
+import TeamMembers from './views/teamMembers';
 import TeamSettings from './views/teamSettings';
 
 import errorHandler from './utils/errorHandler';
@@ -70,7 +72,10 @@ let routes = (
       <Route path="/organizations/:orgId/issues/history/" component={errorHandler(MyIssuesViewed)} />
       <Route path="/organizations/:orgId/rate-limits/" component={errorHandler(OrganizationRateLimits)} />
       <Route path="/organizations/:orgId/stats/" component={errorHandler(OrganizationStats)} />
-      <Route path="/organizations/:orgId/teams/:teamId/settings/" component={errorHandler(TeamSettings)} />
+      <Route path="/organizations/:orgId/teams/:teamId/" component={errorHandler(TeamDetails)}>
+        <Route path="settings/" component={errorHandler(TeamSettings)} />
+        <Route path="members/" component={errorHandler(TeamMembers)} />
+      </Route>
 
       <Route path=":projectId/" component={errorHandler(ProjectDetails)}>
         <IndexRoute component={errorHandler(Stream)} />
diff --git a/src/sentry/static/sentry/app/views/teamDetails.jsx b/src/sentry/static/sentry/app/views/teamDetails.jsx
new file mode 100644
index 0000000000..4dec0379dc
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/teamDetails.jsx
@@ -0,0 +1,115 @@
+import jQuery from 'jquery';
+import React from 'react';
+import {History} from 'react-router';
+
+import ApiMixin from '../mixins/apiMixin';
+import DropdownLink from '../components/dropdownLink';
+import ListLink from '../components/listLink';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import MenuItem from '../components/menuItem';
+import OrganizationState from '../mixins/organizationState';
+import {t} from '../locale';
+
+const TeamDetails = React.createClass({
+  mixins: [
+    ApiMixin,
+    History,
+    OrganizationState
+  ],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      team: null
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+    jQuery(document.body).addClass('narrow');
+  },
+
+  componentWillReceiveProps(nextProps) {
+    let params = this.props.params;
+    if (nextProps.params.teamId !== params.teamId ||
+        nextProps.params.orgId !== params.orgId) {
+      this.setState({
+        loading: true,
+        error: false
+      }, this.fetchData);
+    }
+  },
+
+  componentWillUnmount() {
+    jQuery(document.body).removeClass('narrow');
+  },
+
+  fetchData() {
+    let params = this.props.params;
+
+    this.api.request(`/teams/${params.orgId}/${params.teamId}/`, {
+      success: (data) => {
+        this.setState({
+          team: data,
+          loading: false,
+          error: false
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true
+        });
+      }
+    });
+  },
+
+  onTeamChange(data) {
+    let team = this.state.team;
+    if (data.slug !== team.slug) {
+      let orgId = this.props.params.orgId;
+      this.history.pushState(null, `/organizations/${orgId}/teams/${data.slug}/settings/`);
+    } else {
+      Object.assign({}, team, data);
+      this.setState({team: team});
+    }
+  },
+
+  render() {
+    if (this.state.loading)
+      return <LoadingIndicator />;
+    else if (this.state.error)
+      return <LoadingError onRetry={this.fetchData} />;
+
+    let team = this.state.team;
+    let {orgId, teamId} = this.props.params;
+    let routePrefix = `/organizations/${orgId}/teams/${teamId}`;
+    let access = this.getAccess();
+
+    return (
+      <div className="container">
+        <h3>{team.name}</h3>
+
+        {access.has('team:delete') &&
+          <DropdownLink topLevelClasses="pull-right anchor-right" className="dropdown-menu-right" title={t('More')}>
+            <MenuItem href={`${routePrefix}/remove/`}>{t('Remove Team')}</MenuItem>
+          </DropdownLink>
+        }
+
+        <ul className="nav nav-tabs border-bottom">
+          <ListLink to={`${routePrefix}/settings/`}>{t('Settings')}</ListLink>
+          <ListLink to={`${routePrefix}/members/`}>{t('Members')}</ListLink>
+        </ul>
+
+        {React.cloneElement(this.props.children, {
+          team: team,
+          onTeamChange: this.onTeamChange,
+        })}
+      </div>
+    );
+  }
+});
+
+export default TeamDetails;
diff --git a/src/sentry/static/sentry/app/views/teamMembers.jsx b/src/sentry/static/sentry/app/views/teamMembers.jsx
new file mode 100644
index 0000000000..a81ddff728
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/teamMembers.jsx
@@ -0,0 +1,115 @@
+import React from 'react';
+
+import ApiMixin from '../mixins/apiMixin';
+import Gravatar from '../components/gravatar';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import OrganizationState from '../mixins/organizationState';
+import {t} from '../locale';
+
+const TeamMembers = React.createClass({
+  mixins: [
+    ApiMixin,
+    OrganizationState
+  ],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      memberList: null,
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  componentWillReceiveProps(nextProps) {
+    let params = this.props.params;
+    if (nextProps.params.teamId !== params.teamId ||
+        nextProps.params.orgId !== params.orgId) {
+      this.setState({
+        loading: true,
+        error: false
+      }, this.fetchData);
+    }
+  },
+
+  fetchData() {
+    let params = this.props.params;
+
+    this.api.request(`/teams/${params.orgId}/${params.teamId}/members/`, {
+      success: (data) => {
+        this.setState({
+          memberList: data,
+          loading: false,
+          error: false
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true
+        });
+      }
+    });
+  },
+
+  render() {
+    if (this.state.loading)
+      return <LoadingIndicator />;
+    else if (this.state.error)
+      return <LoadingError onRetry={this.fetchData} />;
+
+    let {orgId} = this.props.params;
+    let memberPrefix = `/organizations/${orgId}/members`;
+    let access = this.getAccess();
+
+    return (
+      <div>
+        <div style={{marginBottom: 20}} className="clearfix">
+          {access.has('org:write') ?
+            <a className="btn btn-primary btn-sm pull-right" href={`${memberPrefix}/new/`}>
+              <span className="icon-plus" /> {t('Invite Member')}
+            </a>
+          :
+            <a className="btn btn-primary btn-sm btn-disabled tip pull-right"
+               title={t('You do not have enough permission to add new members')}>
+              <span className="icon-plus" /> {t('Invite Member')}
+            </a>
+          }
+        </div>
+
+        <table className="table member-list">
+          <colgroup>
+            <col />
+            <col width="150"/>
+          </colgroup>
+          <thead>
+            <tr>
+              <th>{t('Member')}</th>
+              <th>{t('Role')}</th>
+            </tr>
+          </thead>
+          <tbody>
+            {this.state.memberList.map((member) => {
+              return (
+                <tr>
+                  <td className="table-user-info">
+                    <Gravatar email={member.email} size={80} />
+                    <h5><a href={`${memberPrefix}/${member.id}/`}>{member.email}</a></h5>
+                    {member.email}
+                  </td>
+                  <td>{member.roleName}</td>
+                </tr>
+              );
+            })}
+          </tbody>
+        </table>
+      </div>
+    );
+  }
+});
+
+export default TeamMembers;
diff --git a/src/sentry/static/sentry/app/views/teamSettings.jsx b/src/sentry/static/sentry/app/views/teamSettings.jsx
index 0c732121d3..a7119ef709 100644
--- a/src/sentry/static/sentry/app/views/teamSettings.jsx
+++ b/src/sentry/static/sentry/app/views/teamSettings.jsx
@@ -1,13 +1,7 @@
-import jQuery from 'jquery';
 import React from 'react';
-import {History} from 'react-router';
 
 import ApiMixin from '../mixins/apiMixin';
-import ConfigStore from '../stores/configStore';
 import IndicatorStore from '../stores/indicatorStore';
-import LoadingError from '../components/loadingError';
-import LoadingIndicator from '../components/loadingIndicator';
-import OrganizationState from '../mixins/organizationState';
 import {TextField} from '../components/forms';
 import {t} from '../locale';
 
@@ -106,116 +100,21 @@ const TeamSettingsForm = React.createClass({
 });
 
 const TeamSettings = React.createClass({
-  contextTypes: {
-    location: React.PropTypes.object
-  },
-
-  mixins: [
-    ApiMixin,
-    History,
-    OrganizationState
-  ],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      team: null
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-    jQuery(document.body).addClass('narrow');
-  },
-
-  componentWillReceiveProps(nextProps) {
-    let params = this.props.params;
-    if (nextProps.params.teamId !== params.teamId ||
-        nextProps.params.orgId !== params.orgId) {
-      this.setState({
-        loading: true,
-        error: false
-      }, this.fetchData);
-    }
-  },
-
-  componentWillUnmount() {
-    jQuery(document.body).removeClass('narrow');
-  },
-
-  fetchData() {
-    let params = this.props.params;
-
-    this.api.request(`/teams/${params.orgId}/${params.teamId}/`, {
-      success: (data) => {
-        this.setState({
-          team: data,
-          loading: false,
-          error: false
-        });
-      },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true
-        });
-      }
-    });
-  },
-
-  onSaveTeam(data) {
-    let team = this.state.team;
-    if (data.slug !== team.slug) {
-      let orgId = this.props.params.orgId;
-      this.history.pushState(null, `/organizations/${orgId}/teams/${data.slug}/settings/`);
-    } else {
-      Object.assign({}, team, data);
-      this.setState({team: team});
-    }
-  },
-
   render() {
-    if (this.state.loading)
-      return <LoadingIndicator />;
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
-
     let {orgId, teamId} = this.props.params;
-    let team = this.state.team;
-    let urlPrefix = ConfigStore.get('urlPrefix');
-    let access = this.getAccess();
+    let team = this.props.team;
 
     return (
-      <div className="container">
-        <h3>{team.name} <small>{t('Team Settings')}</small></h3>
-
+      <div>
         <div className="box">
           <div className="box-content with-padding">
             <TeamSettingsForm
               orgId={orgId}
               teamId={teamId}
               initialData={team}
-              onSave={this.onSaveTeam} />
+              onSave={this.props.onTeamChange} />
           </div>
         </div>
-
-        {access.has('team:delete') &&
-          <div className="box">
-            <div className="box-header">
-              <h3>{t('Remove Team')}</h3>
-            </div>
-            <div className="box-content with-padding">
-              <p>{t('Removing this team will delete associated projects and events.')}</p>
-
-              <fieldset className="form-actions">
-                <a href={`${urlPrefix}/organizations/${orgId}/teams/${teamId}/remove/`} className="btn btn-danger">
-                  {t('Remove Team')}
-                </a>
-              </fieldset>
-            </div>
-          </div>
-        }
       </div>
     );
   }
diff --git a/tests/sentry/api/endpoints/test_team_members.py b/tests/sentry/api/endpoints/test_team_members.py
new file mode 100644
index 0000000000..b5bcf0c74d
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_team_members.py
@@ -0,0 +1,24 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase
+
+
+class TeamMembersTest(APITestCase):
+    def test_simple(self):
+        org = self.create_organization()
+        team = self.create_team(organization=org)
+        foo = self.create_user('foo@example.com')
+        bar = self.create_user('bar@example.com')
+        member = self.create_member(organization=org, user=foo, teams=[team])
+        self.create_member(organization=org, user=bar, teams=[])
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-team-members', kwargs={
+            'organization_slug': org.slug,
+            'team_slug': team.slug,
+        })
+        response = self.client.get(url)
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == str(member.id)
