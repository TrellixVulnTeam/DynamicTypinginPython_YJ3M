commit 0ba47ac25cdf91f6c98ce2a0cc1cba1f7b2cad4a
Author: Dan Fuller <dfuller@sentry.io>
Date:   Fri Jun 7 15:11:28 2019 -0700

    feat(api): Allow passing group_ids to `OrganizationGroupIndexEndpoint` for bulk fetching groups (SEN-701)
    
    For use in incidents to bulk fetch groups

diff --git a/src/sentry/api/endpoints/organization_group_index.py b/src/sentry/api/endpoints/organization_group_index.py
index 778fb5afcb..b7bbeb3ef3 100644
--- a/src/sentry/api/endpoints/organization_group_index.py
+++ b/src/sentry/api/endpoints/organization_group_index.py
@@ -5,6 +5,7 @@ import six
 
 from django.conf import settings
 
+from rest_framework.exceptions import PermissionDenied
 from rest_framework.response import Response
 
 from sentry import features
@@ -146,6 +147,18 @@ class OrganizationGroupIndexEndpoint(OrganizationEventsEndpointBase):
                     response['X-Sentry-Direct-Hit'] = '1'
                     return response
 
+        # If group ids specified, just ignore any query components
+        try:
+            group_ids = set(map(int, request.GET.getlist('group')))
+        except ValueError:
+            return Response({'detail': 'Group ids must be integers'}, status=400)
+
+        if group_ids:
+            groups = list(Group.objects.filter(id__in=group_ids, project_id__in=project_ids))
+            if any(g for g in groups if not request.access.has_project_access(g.project)):
+                raise PermissionDenied
+            return Response(serialize(groups, request.user, serializer()))
+
         try:
             start, end = get_date_range_from_params(request.GET)
         except InvalidParams as exc:
diff --git a/tests/snuba/api/endpoints/test_organization_group_index.py b/tests/snuba/api/endpoints/test_organization_group_index.py
index eed2a0e756..53367b7e0c 100644
--- a/tests/snuba/api/endpoints/test_organization_group_index.py
+++ b/tests/snuba/api/endpoints/test_organization_group_index.py
@@ -297,6 +297,28 @@ class GroupListTest(APITestCase, SnubaTestCase):
         response = self.get_valid_response(organization.slug, query=short_id, shortIdLookup=1)
         assert len(response.data) == 0
 
+    def test_lookup_by_group_id(self):
+        self.login_as(user=self.user)
+        response = self.get_valid_response(group=self.group.id)
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == six.text_type(self.group.id)
+        group_2 = self.create_group()
+        response = self.get_valid_response(group=[self.group.id, group_2.id])
+        assert set([g['id'] for g in response.data]) == set([
+            six.text_type(self.group.id),
+            six.text_type(group_2.id),
+        ])
+
+    def test_lookup_by_group_id_no_perms(self):
+        organization = self.create_organization()
+        project = self.create_project(organization=organization)
+        group = self.create_group(project=project)
+        user = self.create_user()
+        self.create_member(organization=organization, user=user, has_global_access=False)
+        self.login_as(user=user)
+        response = self.get_response(group=[group.id])
+        assert response.status_code == 403
+
     def test_lookup_by_first_release(self):
         now = timezone.now()
         self.login_as(self.user)
