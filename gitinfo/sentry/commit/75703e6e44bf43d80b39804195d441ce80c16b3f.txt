commit 75703e6e44bf43d80b39804195d441ce80c16b3f
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Mon Dec 17 07:54:16 2018 -0800

    feat: Code changes need for proper new SDK usage (#11058)

diff --git a/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx b/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx
index 08c6fdfc1a..c3a40a686d 100644
--- a/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx
@@ -1,8 +1,8 @@
 /*eslint no-use-before-define: ["error", { "functions": false }]*/
 
+import * as Sentry from '@sentry/browser';
 import {isInteger} from 'lodash';
 import GlobalSelectionActions from 'app/actions/globalSelectionActions';
-import sdk from 'app/utils/sdk';
 
 /**
  * Updates global project selection
@@ -11,8 +11,9 @@ import sdk from 'app/utils/sdk';
  */
 export function updateProjects(projects) {
   if (!isProjectsValid(projects)) {
-    sdk.captureException(new Error('Invalid projects selected'), {
-      extra: {projects},
+    Sentry.withScope(scope => {
+      scope.setExtra('projects', projects);
+      Sentry.captureException(new Error('Invalid projects selected'));
     });
     return;
   }
diff --git a/src/sentry/static/sentry/app/actionCreators/group.jsx b/src/sentry/static/sentry/app/actionCreators/group.jsx
index d0dc317c30..e77c5db7a7 100644
--- a/src/sentry/static/sentry/app/actionCreators/group.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/group.jsx
@@ -1,4 +1,5 @@
-import sdk from 'app/utils/sdk';
+import * as Sentry from '@sentry/browser';
+
 import {Client} from 'app/api';
 import GroupActions from 'app/actions/groupActions';
 import {buildUserId, buildTeamId} from 'app/utils';
@@ -83,8 +84,9 @@ export function assignToActor({id, actor}) {
       break;
 
     default:
-      sdk.captureException('Unknown assignee type', {
-        extra: {actor},
+      Sentry.withScope(scope => {
+        scope.setExtra('actor', actor);
+        Sentry.captureException('Unknown assignee type');
       });
   }
 
diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 089898a2c0..6372b913ed 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -1,6 +1,7 @@
 import $ from 'jquery';
 import {isUndefined, isNil} from 'lodash';
 import idx from 'idx';
+import * as Sentry from '@sentry/browser';
 
 import {
   PROJECT_MOVED,
@@ -10,7 +11,6 @@ import {
 import {metric} from 'app/utils/analytics';
 import {openSudo, redirectToProject} from 'app/actionCreators/modal';
 import GroupActions from 'app/actions/groupActions';
-import sdk from 'app/utils/sdk';
 import {uniqueId} from 'app/utils/guid';
 import * as tracing from 'app/utils/tracing';
 
@@ -142,13 +142,11 @@ export class Client {
     try {
       query = $.param(options.query || '', true);
     } catch (err) {
-      sdk.captureException(err, {
-        extra: {
-          path,
-          query: options.query,
-        },
+      Sentry.withScope(scope => {
+        scope.setExtra('path', path);
+        scope.setExtra('query', options.query);
+        Sentry.captureException(err);
       });
-
       throw err;
     }
     let method = options.method || (options.data ? 'POST' : 'GET');
diff --git a/src/sentry/static/sentry/app/components/actorAvatar.jsx b/src/sentry/static/sentry/app/components/actorAvatar.jsx
index 5698a1cbe4..3d3aeb5582 100644
--- a/src/sentry/static/sentry/app/components/actorAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/actorAvatar.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import PropTypes from 'prop-types';
+import * as Sentry from '@sentry/browser';
 
-import sdk from 'app/utils/sdk';
 import Avatar from 'app/components/avatar';
 import MemberListStore from 'app/stores/memberListStore';
 import TeamStore from 'app/stores/teamStore';
@@ -23,14 +23,17 @@ class ActorAvatar extends React.Component {
       let user = actor.id ? MemberListStore.getById(actor.id) : actor;
       return <Avatar user={user} hasTooltip {...props} />;
     }
+
     if (actor.type == 'team') {
       let team = TeamStore.getById(actor.id);
       return <Avatar team={team} hasTooltip {...props} />;
     }
 
-    sdk.captureException(new Error('Unknown avatar type'), {
-      extra: {actor},
+    Sentry.withScope(scope => {
+      scope.setExtra('actor', actor);
+      Sentry.captureException(new Error('Unknown avatar type'));
     });
+
     return null;
   }
 }
diff --git a/src/sentry/static/sentry/app/components/asyncComponent.jsx b/src/sentry/static/sentry/app/components/asyncComponent.jsx
index a0490ba226..fbd1e6a98a 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.jsx
@@ -1,8 +1,8 @@
 import {isEqual} from 'lodash';
 import PropTypes from 'prop-types';
 import React from 'react';
+import * as Sentry from '@sentry/browser';
 
-import sdk from 'app/utils/sdk';
 import {Client} from 'app/api';
 import {t} from 'app/locale';
 import AsyncComponentSearchInput from 'app/components/asyncComponentSearchInput';
@@ -221,7 +221,7 @@ export default class AsyncComponent extends React.Component {
 
   handleError(error, [stateKey]) {
     if (error && error.responseText) {
-      sdk.captureBreadcrumb({
+      Sentry.addBreadcrumb({
         message: error.responseText,
         category: 'xhr',
         level: 'error',
diff --git a/src/sentry/static/sentry/app/components/createSampleEvent.jsx b/src/sentry/static/sentry/app/components/createSampleEvent.jsx
index 1e10b63298..0a0018b078 100644
--- a/src/sentry/static/sentry/app/components/createSampleEvent.jsx
+++ b/src/sentry/static/sentry/app/components/createSampleEvent.jsx
@@ -3,12 +3,12 @@ import React from 'react';
 import createReactClass from 'create-react-class';
 import PropTypes from 'prop-types';
 import styled from 'react-emotion';
+import * as Sentry from '@sentry/browser';
 
 import {analytics} from 'app/utils/analytics';
 import ApiMixin from 'app/mixins/apiMixin';
 import Button from 'app/components/button';
 import IndicatorStore from 'app/stores/indicatorStore';
-import sdk from 'app/utils/sdk';
 import SentryTypes from 'app/sentryTypes';
 
 const CreateSampleEvent = createReactClass({
@@ -62,12 +62,12 @@ const CreateSampleEvent = createReactClass({
         browserHistory.push(`/${orgId}/${projectId}/issues/${data.groupID}/`);
       },
       error: err => {
-        sdk.captureException(
-          new Error('Create sample event in onboarding configure step failed'),
-          {
-            extra: err,
-          }
-        );
+        Sentry.withScope(scope => {
+          scope.setExtra('err', err);
+          Sentry.captureException(
+            new Error('Create sample event in onboarding configure step failed')
+          );
+        });
 
         IndicatorStore.addError('Unable to create a sample event');
       },
diff --git a/src/sentry/static/sentry/app/components/dropdownMenu.jsx b/src/sentry/static/sentry/app/components/dropdownMenu.jsx
index 023a1bc4c5..76c805c993 100644
--- a/src/sentry/static/sentry/app/components/dropdownMenu.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownMenu.jsx
@@ -1,8 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import * as Sentry from '@sentry/browser';
 
 import {MENU_CLOSE_DELAY} from 'app/constants';
-import sdk from 'app/utils/sdk';
 
 class DropdownMenu extends React.Component {
   static propTypes = {
@@ -78,8 +78,9 @@ class DropdownMenu extends React.Component {
 
     if (!this.dropdownActor) {
       // Log an error, should be lower priority
-      sdk.captureException(new Error('DropdownMenu does not have "Actor" attached'), {
-        level: 'warning',
+      Sentry.withScope(scope => {
+        scope.setLevel('warning');
+        Sentry.captureException(new Error('DropdownMenu does not have "Actor" attached'));
       });
     }
 
@@ -147,10 +148,11 @@ class DropdownMenu extends React.Component {
         }, MENU_CLOSE_DELAY);
       }
     } catch (err) {
-      sdk.captureException(err, {
-        event: e,
-        toElement: e.toElement,
-        relatedTarget: e.relatedTarget,
+      Sentry.withScope(scope => {
+        scope.setExtra('event', e);
+        scope.setExtra('toElement', e.toElement);
+        scope.setExtra('relatedTarget', e.relatedTarget);
+        Sentry.captureException(err);
       });
     }
   };
diff --git a/src/sentry/static/sentry/app/components/errorBoundary.jsx b/src/sentry/static/sentry/app/components/errorBoundary.jsx
index 53961415fa..37cd0e2739 100644
--- a/src/sentry/static/sentry/app/components/errorBoundary.jsx
+++ b/src/sentry/static/sentry/app/components/errorBoundary.jsx
@@ -2,8 +2,8 @@ import {browserHistory} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
+import * as Sentry from '@sentry/browser';
 
-import sdk from 'app/utils/sdk';
 import {t} from 'app/locale';
 import Alert from 'app/components/alert';
 import DetailedError from 'app/components/errors/detailedError';
@@ -42,7 +42,10 @@ class ErrorBoundary extends React.Component {
 
   componentDidCatch(error, errorInfo) {
     this.setState({error});
-    sdk.captureException(error, {extra: errorInfo});
+    Sentry.withScope(scope => {
+      scope.setExtra('errorInfo', errorInfo);
+      Sentry.captureException(error);
+    });
   }
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/errors/detailedError.jsx b/src/sentry/static/sentry/app/components/errors/detailedError.jsx
index b21413009f..da23955802 100644
--- a/src/sentry/static/sentry/app/components/errors/detailedError.jsx
+++ b/src/sentry/static/sentry/app/components/errors/detailedError.jsx
@@ -1,8 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import classNames from 'classnames';
+import * as Sentry from '@sentry/browser';
 
-import sdk from 'app/utils/sdk';
 import {t} from 'app/locale';
 import InlineSvg from 'app/components/inlineSvg';
 import Button from 'app/components/button';
@@ -32,7 +32,7 @@ class DetailedError extends React.Component {
 
   openFeedback(e) {
     e.preventDefault();
-    sdk.lastEventId() && sdk.showReportDialog();
+    Sentry.showReportDialog();
   }
 
   render() {
@@ -63,7 +63,7 @@ class DetailedError extends React.Component {
 
               {!hideSupportLinks && (
                 <div className="detailed-error-support-links">
-                  {sdk.lastEventId() && (
+                  {Sentry.lastEventId() && (
                     <Button priority="link" onClick={this.openFeedback}>
                       {t('Fill out a report')}
                     </Button>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
index f36b3d3aa4..d03e969202 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
@@ -1,6 +1,6 @@
 import {isString} from 'lodash';
+import * as Sentry from '@sentry/browser';
 
-import sdk from 'app/utils/sdk';
 import {defined} from 'app/utils';
 
 export function escapeQuotes(v) {
@@ -44,8 +44,9 @@ export function getCurlCommand(data) {
         if (isString(data.data)) {
           result += ' \\\n --data "' + escapeQuotes(data.data) + '"';
         } else {
-          sdk.captureException(new Error('Unknown event data'), {
-            extra: data,
+          Sentry.withScope(scope => {
+            scope.setExtra('data', data);
+            Sentry.captureException(new Error('Unknown event data'));
           });
         }
     }
diff --git a/src/sentry/static/sentry/app/components/lazyLoad.jsx b/src/sentry/static/sentry/app/components/lazyLoad.jsx
index 918695b319..6ff85744e7 100644
--- a/src/sentry/static/sentry/app/components/lazyLoad.jsx
+++ b/src/sentry/static/sentry/app/components/lazyLoad.jsx
@@ -1,13 +1,13 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
+import * as Sentry from '@sentry/browser';
 
 import {isWebpackChunkLoadingError} from 'app/utils';
 import {t} from 'app/locale';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import retryableImport from 'app/utils/retryableImport';
-import sdk from 'app/utils/sdk';
 
 class LazyLoad extends React.Component {
   static propTypes = {
@@ -61,18 +61,19 @@ class LazyLoad extends React.Component {
   }
 
   componentDidCatch(error, info) {
-    sdk.captureException(error);
+    Sentry.captureException(error);
     this.handleError(error);
   }
 
   getComponentGetter = () => this.props.component || this.props.route.componentPromise;
 
   handleFetchError = error => {
-    let options = isWebpackChunkLoadingError(error)
-      ? {fingerprint: ['webpack', 'error loading chunk']}
-      : {};
-
-    sdk.captureException(error, options);
+    Sentry.withScope(scope => {
+      if (isWebpackChunkLoadingError(error)) {
+        scope.setFingerprint(['webpack', 'error loading chunk']);
+      }
+      Sentry.captureException(error);
+    });
     this.handleError(error);
   };
 
diff --git a/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx b/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx
index 8074ac33c1..5b3e0fc50b 100644
--- a/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx
+++ b/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx
@@ -3,9 +3,9 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
 import classNames from 'classnames';
+import * as Sentry from '@sentry/browser';
 
 import {t, tct} from 'app/locale';
-import sdk from 'app/utils/sdk';
 import {analytics} from 'app/utils/analytics';
 import OrganizationState from 'app/mixins/organizationState';
 import Confirmation from 'app/components/onboardingWizard/confirmation';
@@ -57,8 +57,10 @@ const TodoItem = createReactClass({
     } else if (task.featureLocation === 'absolute') {
       learnMoreUrl = task.location;
     } else {
-      sdk.captureMessage('No learnMoreUrl created for this featureLocation ', {
-        extra: {props: this.props, state: this.state},
+      Sentry.withScope(scope => {
+        scope.setExtra('props', this.props);
+        scope.setExtra('state', this.state);
+        Sentry.captureMessage('No learnMoreUrl created for this featureLocation');
       });
     }
     return learnMoreUrl;
diff --git a/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx b/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
index 583cf8a593..de867d527a 100644
--- a/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
@@ -2,8 +2,8 @@ import {flatten, debounce} from 'lodash';
 import {withRouter} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
+import * as Sentry from '@sentry/browser';
 
-import sdk from 'app/utils/sdk';
 import {t} from 'app/locale';
 import {Client} from 'app/api';
 import {createFuzzySearch} from 'app/utils/createFuzzySearch';
@@ -258,16 +258,17 @@ class ApiSource extends React.Component {
   }, 150);
 
   handleRequestError = (err, {url, orgId}) => {
-    sdk.captureException(
-      new Error(
-        `API Source Failed: ${err && err.responseJSON && err.responseJSON.detail}`
-      ),
-      {
-        extra: {
-          url: url.replace(`/organizations/${orgId}/`, '/organizations/:orgId/'),
-        },
-      }
-    );
+    Sentry.withScope(scope => {
+      scope.setExtra(
+        'url',
+        url.replace(`/organizations/${orgId}/`, '/organizations/:orgId/')
+      );
+      Sentry.captureException(
+        new Error(
+          `API Source Failed: ${err && err.responseJSON && err.responseJSON.detail}`
+        )
+      );
+    });
   };
 
   // Handles a list of search request promises, and then updates state with response objects
diff --git a/src/sentry/static/sentry/app/components/u2finterface.jsx b/src/sentry/static/sentry/app/components/u2finterface.jsx
index 8776269baf..a313a08a8e 100644
--- a/src/sentry/static/sentry/app/components/u2finterface.jsx
+++ b/src/sentry/static/sentry/app/components/u2finterface.jsx
@@ -1,8 +1,9 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import u2f from 'u2f-api';
+import * as Sentry from '@sentry/browser';
+
 import ConfigStore from 'app/stores/configStore';
-import sdk from 'app/utils/sdk';
 import {t, tct} from 'app/locale';
 
 class U2fInterface extends React.Component {
@@ -110,7 +111,7 @@ class U2fInterface extends React.Component {
         // we want to know what is happening here.  There are some indicators
         // that users are getting errors that should not happen through the
         // regular u2f flow.
-        sdk.captureException(err);
+        Sentry.captureException(err);
         this.setState({
           deviceFailure: failure,
           hasBeenTapped: false,
diff --git a/src/sentry/static/sentry/app/stores/hookStore.jsx b/src/sentry/static/sentry/app/stores/hookStore.jsx
index 5177491726..97256eadcc 100644
--- a/src/sentry/static/sentry/app/stores/hookStore.jsx
+++ b/src/sentry/static/sentry/app/stores/hookStore.jsx
@@ -1,7 +1,6 @@
 import Reflux from 'reflux';
 import _ from 'lodash';
-
-import sdk from 'app/utils/sdk';
+import * as Sentry from '@sentry/browser';
 
 const validHookNames = new Set([
   // Additional routes
@@ -72,8 +71,9 @@ const HookStore = Reflux.createStore({
     if (!validHookNames.has(hookName)) {
       // eslint-disable-next-line no-console
       console.error('Invalid hook name: ' + hookName);
-      sdk.captureException(new Error('Invalid hook name'), {
-        extra: {hookName},
+      Sentry.withScope(scope => {
+        scope.setExtra('hookName', hookName);
+        Sentry.captureException(new Error('Invalid hook name'));
       });
     }
     if (_.isUndefined(this.hooks[hookName])) {
diff --git a/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx b/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx
index 6155fccb30..052340001d 100644
--- a/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx
+++ b/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx
@@ -1,4 +1,4 @@
-import sdk from 'app/utils/sdk';
+import * as Sentry from '@sentry/browser';
 
 export default function handleXhrErrorResponse(message) {
   return resp => {
@@ -9,9 +9,10 @@ export default function handleXhrErrorResponse(message) {
 
     // If this is a string then just capture it as error
     if (typeof responseJSON.detail === 'string') {
-      sdk.captureException(new Error(message), {
-        status: resp.status,
-        detail: responseJSON.detail,
+      Sentry.withScope(scope => {
+        scope.setExtra('status', resp.status);
+        scope.setExtra('detail', responseJSON.detail);
+        Sentry.captureException(new Error(message));
       });
       return;
     }
@@ -20,10 +21,11 @@ export default function handleXhrErrorResponse(message) {
     if (responseJSON.detail.code === 'sudo-required') return;
 
     if (typeof responseJSON.detail.message === 'string') {
-      sdk.captureException(new Error(message), {
-        status: resp.status,
-        detail: responseJSON.detail.message,
-        code: responseJSON.detail.code,
+      Sentry.withScope(scope => {
+        scope.setExtra('status', resp.status);
+        scope.setExtra('detail', responseJSON.detail);
+        scope.setExtra('code', responseJSON.detail.code);
+        Sentry.captureException(new Error(message));
       });
       return;
     }
diff --git a/src/sentry/static/sentry/app/utils/logging.jsx b/src/sentry/static/sentry/app/utils/logging.jsx
index 90a0f4019c..113cab9282 100644
--- a/src/sentry/static/sentry/app/utils/logging.jsx
+++ b/src/sentry/static/sentry/app/utils/logging.jsx
@@ -1,8 +1,9 @@
-import sdk from 'app/utils/sdk';
+import * as Sentry from '@sentry/browser';
 
 export function logException(ex, context) {
-  sdk.captureException(ex, {
-    extra: context,
+  Sentry.withScope(scope => {
+    scope.setExtra('context', context);
+    Sentry.captureException(ex);
   });
   /*eslint no-console:0*/
   window.console && console.error && console.error(ex);
@@ -14,8 +15,9 @@ export function logAjaxError(error, context) {
     : error.responseText ? error.responseText.substr(0, 255) : '<unknown response>'; // occassionally responseText is undefined
 
   let message = `HTTP ${error.status}: ${errorString}`;
-  sdk.captureMessage(message, {
-    extra: context,
+  Sentry.withScope(scope => {
+    scope.setExtra('context', context);
+    Sentry.captureMessage(message);
   });
   /*eslint no-console:0*/
   window.console && console.error && console.error(message);
diff --git a/src/sentry/static/sentry/app/utils/sdk.js b/src/sentry/static/sentry/app/utils/sdk.js
deleted file mode 100644
index 4d58b6f873..0000000000
--- a/src/sentry/static/sentry/app/utils/sdk.js
+++ /dev/null
@@ -1,80 +0,0 @@
-import * as Sentry from '@sentry/browser';
-
-let _addBreadcrumb = () => {};
-let _captureException = () => {};
-let _captureMessage = () => {};
-let _showReportDialog = () => {};
-let _lastEventId = () => {};
-
-function setContextInScope(context) {
-  Sentry.configureScope(scope => {
-    if (context.user) {
-      scope.setUser(context.user);
-    }
-    if (context.tags) {
-      Object.keys(context.tags).forEach(key => {
-        scope.setTag(key, context.tags[key]);
-      });
-    }
-    if (context.extra) {
-      Object.keys(context.extra).forEach(key => {
-        scope.setExtra(key, context.extra[key]);
-      });
-    }
-
-    if (context.fingerprint) {
-      scope.setFingerprint(context.fingerprint);
-    }
-  });
-}
-
-Sentry.onLoad(function() {
-  _addBreadcrumb = Sentry.addBreadcrumb;
-  _captureMessage = (...args) => {
-    Sentry.getDefaultHub().pushScope();
-    if (args[1]) {
-      setContextInScope(args[1]);
-    }
-    if (args[0]) {
-      Sentry.captureMessage(args[0]);
-    }
-    Sentry.getDefaultHub().popScope();
-  };
-  _captureException = (...args) => {
-    Sentry.getDefaultHub().pushScope();
-    if (args[1]) {
-      setContextInScope(args[1]);
-    }
-    if (args[0]) {
-      Sentry.captureException(args[0]);
-    }
-    Sentry.getDefaultHub().popScope();
-  };
-  _showReportDialog = () => {
-    Sentry.showReportDialog();
-  };
-  _lastEventId = () => {
-    Sentry.lastEventId();
-  };
-});
-
-export default {
-  captureBreadcrumb: (...args) => {
-    return _addBreadcrumb(...args);
-  },
-  addBreadcrumb: (...args) => {
-    return _addBreadcrumb(...args);
-  },
-  captureMessage: (...args) => {
-    return _captureMessage(...args);
-  },
-  captureException: (...args) => {
-    return _captureException(...args);
-  },
-  showReportDialog: (...args) => {
-    return _showReportDialog(...args);
-  },
-  lastEventId: (...args) => {
-    return _lastEventId(...args);
-  },
-};
diff --git a/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx b/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
index 07f0e47afe..a2118b2dd9 100644
--- a/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
@@ -1,8 +1,8 @@
 import React from 'react';
 import createReactClass from 'create-react-class';
 import {browserHistory} from 'react-router';
+import * as Sentry from '@sentry/browser';
 
-import sdk from 'app/utils/sdk';
 import {analytics, amplitude} from 'app/utils/analytics';
 import ApiMixin from 'app/mixins/apiMixin';
 import Hook from 'app/components/hook';
@@ -99,8 +99,9 @@ const Configure = createReactClass({
       },
 
       error: err => {
-        sdk.captureMessage('Polling for events in onboarding configure failed', {
-          extra: err,
+        Sentry.withScope(scope => {
+          scope.setExtra('err', err);
+          Sentry.captureMessage('Polling for events in onboarding configure failed');
         });
       },
     });
diff --git a/src/sentry/static/sentry/app/views/onboarding/createProject.jsx b/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
index a7bc4944ce..28d5bf8686 100644
--- a/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
@@ -3,8 +3,8 @@ import React from 'react';
 import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
+import * as Sentry from '@sentry/browser';
 
-import sdk from 'app/utils/sdk';
 import {Panel} from 'app/components/panels';
 import {getPlatformName} from 'app/views/onboarding/utils';
 import {openCreateTeamModal} from 'app/actionCreators/modal';
@@ -94,8 +94,10 @@ const CreateProject = createReactClass({
     this.setState({inFlight: true});
 
     if (!projectName) {
-      sdk.captureMessage('Onboarding no project name ', {
-        extra: {props: this.props, state: this.state},
+      Sentry.withScope(scope => {
+        scope.setExtra('props', this.props);
+        scope.setExtra('state', this.state);
+        Sentry.captureMessage('Onboarding no project name');
       });
     }
 
@@ -122,12 +124,11 @@ const CreateProject = createReactClass({
         // * The user not having access to create a project, or,
         // * A project with that slug already exists
         if (err.status !== 403 && err.status !== 409) {
-          sdk.captureMessage('Onboarding project creation failed', {
-            extra: {
-              err,
-              props: this.props,
-              state: this.state,
-            },
+          Sentry.withScope(scope => {
+            scope.setExtra('err', err);
+            scope.setExtra('props', this.props);
+            scope.setExtra('state', this.state);
+            Sentry.captureMessage('Onboarding project creation failed');
           });
         }
       },
diff --git a/src/sentry/static/sentry/app/views/permissionDenied.jsx b/src/sentry/static/sentry/app/views/permissionDenied.jsx
index da0e5ac8a9..4e8ab62197 100644
--- a/src/sentry/static/sentry/app/views/permissionDenied.jsx
+++ b/src/sentry/static/sentry/app/views/permissionDenied.jsx
@@ -2,8 +2,8 @@ import {withRouter} from 'react-router';
 import DocumentTitle from 'react-document-title';
 import PropTypes from 'prop-types';
 import React from 'react';
+import * as Sentry from '@sentry/browser';
 
-import sdk from 'app/utils/sdk';
 import {t, tct} from 'app/locale';
 import ExternalLink from 'app/components/externalLink';
 import LoadingError from 'app/components/loadingError';
@@ -26,14 +26,13 @@ class PermissionDenied extends React.Component {
     let {organization, project} = this.context;
 
     let route = getRouteStringFromRoutes(routes);
-    sdk.captureException(new Error(`${ERROR_NAME}${route ? ` : ${route}` : ''}`), {
-      fingerprint: [ERROR_NAME, route],
-      extra: {
-        route,
-        orgFeatures: (organization && organization.features) || [],
-        orgAccess: (organization && organization.access) || [],
-        projectFeatures: (project && project.features) || [],
-      },
+    Sentry.withScope(scope => {
+      scope.setFingerprint([ERROR_NAME, route]);
+      scope.setExtra('route', route);
+      scope.setExtra('orgFeatures', (organization && organization.features) || []);
+      scope.setExtra('orgAccess', (organization && organization.access) || []);
+      scope.setExtra('projectFeatures', (project && project.features) || []);
+      Sentry.captureException(new Error(`${ERROR_NAME}${route ? ` : ${route}` : ''}`));
     });
   }
 
diff --git a/src/sentry/static/sentry/app/views/routeError.jsx b/src/sentry/static/sentry/app/views/routeError.jsx
index 395cc639fa..def310fedd 100644
--- a/src/sentry/static/sentry/app/views/routeError.jsx
+++ b/src/sentry/static/sentry/app/views/routeError.jsx
@@ -2,8 +2,8 @@ import {withRouter} from 'react-router';
 import $ from 'jquery';
 import PropTypes from 'prop-types';
 import React from 'react';
+import * as Sentry from '@sentry/browser';
 
-import sdk from 'app/utils/sdk';
 import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
 
 class RouteError extends React.Component {
@@ -35,18 +35,15 @@ class RouteError extends React.Component {
     // TODO(dcramer): show something in addition to embed (that contains it?)
     // throw this in a timeout so if it errors we dont fall over
     this._timeout = window.setTimeout(() => {
-      sdk.captureException(error, {
-        fingerprint: ['route-error', ...(route ? [route] : [])],
-        extra: {
-          route,
-          orgFeatures: (organization && organization.features) || [],
-          orgAccess: (organization && organization.access) || [],
-          projectFeatures: (project && project.features) || [],
-        },
+      Sentry.withScope(scope => {
+        scope.setFingerprint(['route-error', ...(route ? [route] : [])]);
+        scope.setExtra('route', route);
+        scope.setExtra('orgFeatures', (organization && organization.features) || []);
+        scope.setExtra('orgAccess', (organization && organization.access) || []);
+        scope.setExtra('projectFeatures', (project && project.features) || []);
+        Sentry.captureException(error);
       });
-      // TODO(dcramer): we do not have errorId until send() is called which
-      // has latency in production so this will literally never fire
-      sdk.showReportDialog();
+      Sentry.showReportDialog();
     });
   }
 
diff --git a/src/sentry/static/sentry/app/views/routeNotFound.jsx b/src/sentry/static/sentry/app/views/routeNotFound.jsx
index 4f400c1e42..0e9c0dedf9 100644
--- a/src/sentry/static/sentry/app/views/routeNotFound.jsx
+++ b/src/sentry/static/sentry/app/views/routeNotFound.jsx
@@ -1,15 +1,16 @@
 import React from 'react';
 import DocumentTitle from 'react-document-title';
+import * as Sentry from '@sentry/browser';
 
-import sdk from 'app/utils/sdk';
 import Footer from 'app/components/footer';
 import Sidebar from 'app/components/sidebar';
 import NotFound from 'app/components/errors/notFound';
 
 class RouteNotFound extends React.Component {
   componentDidMount() {
-    sdk.captureException(new Error('Route not found'), {
-      fingerprint: ['RouteNotFound'],
+    Sentry.withScope(scope => {
+      scope.setFingerprint(['RouteNotFound']);
+      Sentry.captureException(new Error('Route not found'));
     });
   }
 
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
index b32f388a3c..a9e403bffd 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
@@ -3,8 +3,8 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import classNames from 'classnames';
 import createReactClass from 'create-react-class';
+import * as Sentry from '@sentry/browser';
 
-import sdk from 'app/utils/sdk';
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import {t, tct} from 'app/locale';
 import ApiMixin from 'app/mixins/apiMixin';
@@ -89,8 +89,10 @@ const InviteMember = createReactClass({
             },
           });
 
-          sdk.captureException(new Error('[members]: data fetch invalid response'), {
-            extra: {resp, state: this.state},
+          Sentry.withScope(scope => {
+            scope.setExtra('resp', resp);
+            scope.setExtra('state', this.state);
+            Sentry.captureException(new Error('[members]: data fetch invalid response'));
           });
         } else {
           this.setState({roleList: roles, loading: false});
@@ -106,8 +108,10 @@ const InviteMember = createReactClass({
           // use the static list
           this.setState({roleList: STATIC_ROLE_LIST, loading: false});
         } else if (error.status !== 0) {
-          sdk.captureException(new Error('[members]: data fetch error'), {
-            extra: {error, state: this.state},
+          Sentry.withScope(scope => {
+            scope.setExtra('error', error);
+            scope.setExtra('state', this.state);
+            Sentry.captureException(new Error('[members]: data fetch error'));
           });
         }
 
@@ -181,8 +185,10 @@ const InviteMember = createReactClass({
       .then(() => this.redirectToMemberPage())
       .catch(error => {
         if (error && !error.email && !error.role) {
-          sdk.captureException(new Error('Unknown invite member api response'), {
-            extra: {error, state: this.state},
+          Sentry.withScope(scope => {
+            scope.setExtra('error', error);
+            scope.setExtra('state', this.state);
+            Sentry.captureException(new Error('Unknown invite member api response'));
           });
         }
         this.setState({error, busy: false});
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx b/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
index 5afe327af3..c0834429f4 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
@@ -3,6 +3,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
 import styled, {css} from 'react-emotion';
+import * as Sentry from '@sentry/browser';
 
 import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
 import {getOrganizationState} from 'app/mixins/organizationState';
@@ -19,7 +20,6 @@ import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import Link from 'app/components/link';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import Tooltip from 'app/components/tooltip';
-import sdk from 'app/utils/sdk';
 import space from 'app/styles/space';
 
 const TeamRow = createReactClass({
@@ -174,8 +174,9 @@ class ProjectTeams extends AsyncView {
 
     if (!this.state.allTeams) {
       teamsToAdd = [];
-      sdk.captureException(new Error('This.state.allTeams is null'), {
-        extra: {state: this.state},
+      Sentry.withScope(scope => {
+        scope.setExtra('state', this.state);
+        Sentry.captureException(new Error('This.state.allTeams is null'));
       });
     } else {
       teamsToAdd = this.state.allTeams
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx b/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
index 1ceee833ba..73ac7adc05 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
@@ -1,6 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
+import * as Sentry from '@sentry/browser';
 
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {t} from 'app/locale';
@@ -12,7 +13,6 @@ import JsonForm from 'app/views/settings/components/forms/jsonForm';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import TextBlock from 'app/views/settings/components/text/textBlock';
 import formGroups from 'app/data/forms/userFeedback';
-import sdk from 'app/utils/sdk';
 
 const CodeBlock = styled.pre`
   word-break: break-all;
@@ -117,7 +117,7 @@ class ProjectUserFeedbackSettings extends AsyncView {
   }
 
   handleClick = () => {
-    sdk.showReportDialog({
+    Sentry.showReportDialog({
       // should never make it to the Sentry API, but just in case, use throwaway id
       eventId: '00000000000000000000000000000000',
     });
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 8fc00d9d97..b0f4387513 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -100,14 +100,18 @@ jest.mock('echarts-for-react/lib/core', () => {
   };
 });
 
-jest.mock('app/utils/sdk', () => ({
-  captureBreadcrumb: jest.fn(),
-  addBreadcrumb: jest.fn(),
-  captureMessage: jest.fn(),
-  captureException: jest.fn(),
-  showReportDialog: jest.fn(),
-  lastEventId: jest.fn(),
-}));
+jest.mock('@sentry/browser', () => {
+  const SentryBrowser = require.requireActual('@sentry/browser');
+  return {
+    captureBreadcrumb: jest.fn(),
+    addBreadcrumb: jest.fn(),
+    captureMessage: jest.fn(),
+    captureException: jest.fn(),
+    showReportDialog: jest.fn(),
+    lastEventId: jest.fn(),
+    withScope: jest.spyOn(SentryBrowser, 'withScope'),
+  };
+});
 
 // We generally use actual jQuery, and jest mocks takes precedence over node_modules
 jest.unmock('jquery');
diff --git a/tests/js/spec/utils/handleXhrErrorResponse.spec.jsx b/tests/js/spec/utils/handleXhrErrorResponse.spec.jsx
index f81a3afa4e..d16a2b618f 100644
--- a/tests/js/spec/utils/handleXhrErrorResponse.spec.jsx
+++ b/tests/js/spec/utils/handleXhrErrorResponse.spec.jsx
@@ -1,9 +1,5 @@
 import handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';
-import sdk from 'app/utils/sdk';
-
-jest.mock('app/utils/sdk', () => ({
-  captureException: jest.fn(),
-}));
+import * as Sentry from '@sentry/browser';
 
 describe('handleXhrErrorResponse', function() {
   const stringError = {responseJSON: {detail: 'Error'}, status: 400};
@@ -12,31 +8,24 @@ describe('handleXhrErrorResponse', function() {
     responseJSON: {detail: {code: 'api-err-code', message: 'Error message'}},
   };
   beforeEach(function() {
-    sdk.captureException.mockReset();
+    jest.clearAllMocks();
   });
 
   it('does nothing if we have invalid response', function() {
     handleXhrErrorResponse('')(null);
-    expect(sdk.captureException).not.toHaveBeenCalled();
+    expect(Sentry.captureException).not.toHaveBeenCalled();
     handleXhrErrorResponse('')({});
-    expect(sdk.captureException).not.toHaveBeenCalled();
+    expect(Sentry.captureException).not.toHaveBeenCalled();
   });
 
   it('captures an exception to sdk when `resp.detail` is a string', function() {
     handleXhrErrorResponse('String error')(stringError);
-    expect(sdk.captureException).toHaveBeenCalledWith(new Error('String error'), {
-      status: 400,
-      detail: 'Error',
-    });
+    expect(Sentry.captureException).toHaveBeenCalledWith(new Error('String error'));
   });
 
   it('captures an exception to sdk when `resp.detail` is an object', function() {
     handleXhrErrorResponse('Object error')(objError);
-    expect(sdk.captureException).toHaveBeenCalledWith(new Error('Object error'), {
-      status: 400,
-      detail: 'Error message',
-      code: 'api-err-code',
-    });
+    expect(Sentry.captureException).toHaveBeenCalledWith(new Error('Object error'));
   });
   it('ignores `sudo-required` errors', function() {
     handleXhrErrorResponse('Sudo required error')({
@@ -48,6 +37,6 @@ describe('handleXhrErrorResponse', function() {
         },
       },
     });
-    expect(sdk.captureException).not.toHaveBeenCalled();
+    expect(Sentry.captureException).not.toHaveBeenCalled();
   });
 });
diff --git a/tests/js/spec/utils/logging.spec.jsx b/tests/js/spec/utils/logging.spec.jsx
index 904026b014..410bef99e4 100644
--- a/tests/js/spec/utils/logging.spec.jsx
+++ b/tests/js/spec/utils/logging.spec.jsx
@@ -1,11 +1,11 @@
 import {logAjaxError} from 'app/utils/logging';
-import sdk from 'app/utils/sdk';
+import * as Sentry from '@sentry/browser';
 
 describe('logging', function() {
   describe('logAjaxError()', function() {
     beforeEach(function() {
       jest.spyOn(console, 'error').mockImplementation(() => {});
-      sdk.captureMessage.mockReset();
+      Sentry.captureMessage.mockReset();
     });
 
     afterEach(function() {
@@ -21,11 +21,10 @@ describe('logging', function() {
         {foo: 'bar'} /* context */
       );
 
-      expect(sdk.captureMessage).toHaveBeenCalled();
-      expect(sdk.captureMessage.mock.calls[0][0]).toEqual(
+      expect(Sentry.captureMessage).toHaveBeenCalled();
+      expect(Sentry.captureMessage.mock.calls[0][0]).toEqual(
         'HTTP 500: A bad thing happened'
       );
-      expect(sdk.captureMessage.mock.calls[0][1].extra).toEqual({foo: 'bar'});
     });
 
     it('should handle text/html responses', function() {
@@ -37,19 +36,19 @@ describe('logging', function() {
         {foo: 'bar'} /* context */
       );
 
-      expect(sdk.captureMessage).toHaveBeenCalled();
-      expect(sdk.captureMessage.mock.calls[0][0]).toEqual(
+      expect(Sentry.captureMessage).toHaveBeenCalled();
+      expect(Sentry.captureMessage.mock.calls[0][0]).toEqual(
         'HTTP 401: You are not authenticated'
       );
-      expect(sdk.captureMessage.mock.calls[0][1].extra).toEqual({foo: 'bar'});
     });
 
     it('should handle responseJSON/responseText undefined (bad content type?)', function() {
       logAjaxError({status: 404}, {foo: 'bar'} /* context */);
 
-      expect(sdk.captureMessage).toHaveBeenCalled();
-      expect(sdk.captureMessage.mock.calls[0][0]).toEqual('HTTP 404: <unknown response>');
-      expect(sdk.captureMessage.mock.calls[0][1].extra).toEqual({foo: 'bar'});
+      expect(Sentry.captureMessage).toHaveBeenCalled();
+      expect(Sentry.captureMessage.mock.calls[0][0]).toEqual(
+        'HTTP 404: <unknown response>'
+      );
     });
   });
 });
diff --git a/tests/js/spec/views/routeError.spec.jsx b/tests/js/spec/views/routeError.spec.jsx
index e485ffbc72..79f94402a3 100644
--- a/tests/js/spec/views/routeError.spec.jsx
+++ b/tests/js/spec/views/routeError.spec.jsx
@@ -1,5 +1,5 @@
 import React from 'react';
-import sdk from 'app/utils/sdk';
+import * as Sentry from '@sentry/browser';
 
 import {mount} from 'enzyme';
 import {RouteError} from 'app/views/routeError';
@@ -16,17 +16,12 @@ describe('RouteError', function() {
 
     await tick();
 
-    expect(sdk.captureException).toHaveBeenCalledWith(
+    expect(Sentry.captureException).toHaveBeenCalledWith(
       expect.objectContaining({
         message: 'Big Bad Error: /:orgId/organizations/:orgId/api-keys/',
-      }),
-      expect.objectContaining({
-        extra: expect.objectContaining({
-          route: '/:orgId/organizations/:orgId/api-keys/',
-        }),
       })
     );
 
-    expect(sdk.showReportDialog).toHaveBeenCalled();
+    expect(Sentry.showReportDialog).toHaveBeenCalled();
   });
 });
