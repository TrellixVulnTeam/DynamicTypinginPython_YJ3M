commit 2d2dfbfc0bdd7fe1ce1dcb6a9c36f0289b531849
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Feb 24 10:49:52 2017 -0800

    [ui] convert organization settings to react

diff --git a/CHANGES b/CHANGES
index 399f7c00f5..ec5d976442 100644
--- a/CHANGES
+++ b/CHANGES
@@ -51,11 +51,18 @@ Version 8.13
 - Fixed bug where workflow notification subject may not include a custom email prefix.
 - Added configurable subject templates for individual alert emails (`mail:subject_template` option).
 - Added data migration to populate ReleaseProject.new_groups
+- Moved organization settings to React.
 - Added support for managing newsletter subscriptions with Sentry.io
 
 Schema Changes
 ~~~~~~~~~~~~~~
 
+- Added ``ReleaseProject.new_groups`` column.
+- Moved organization settings to React.
+
+Schema Changes
+~~~~~~~~~~~~~~
+
 - Added ``ReleaseProject.new_groups`` column.
 - Added ``OrganizationAvatar`` model.
 
diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index 35fb72f4ac..78fe17a526 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -1,11 +1,12 @@
 from __future__ import absolute_import
 
 import logging
-from uuid import uuid4
 
 from rest_framework import serializers, status
 from rest_framework.response import Response
+from uuid import uuid4
 
+from sentry import roles
 from sentry.api.base import DocSection
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.decorators import sudo_required
@@ -14,6 +15,7 @@ from sentry.api.serializers import serialize
 from sentry.api.serializers.models.organization import (
     DetailedOrganizationSerializer
 )
+from sentry.api.serializers.rest_framework import ListField
 from sentry.models import (
     AuditLogEntryEvent, Organization, OrganizationAvatar, OrganizationOption,
     OrganizationStatus
@@ -24,6 +26,17 @@ from sentry.utils.apidocs import scenario, attach_scenarios
 
 ERR_DEFAULT_ORG = 'You cannot remove the default organization.'
 
+ORG_OPTIONS = (
+    # serializer field name, option key name, type
+    ('projectRateLimit', 'sentry:project-rate-limit', int),
+    ('accountRateLimit', 'sentry:account-rate-limit', int),
+    ('dataScrubber', 'sentry:require_scrub_data', bool),
+    ('dataScrubberDefaults', 'sentry:require_scrub_defaults', bool),
+    ('sensitiveFields', 'sentry:sensitive_fields', list),
+    ('safeFields', 'sentry:safe_fields', list),
+    ('scrubIPAddresses', 'sentry:require_scrub_ip_address', bool),
+)
+
 delete_logger = logging.getLogger('sentry.deletions.api')
 
 
@@ -50,24 +63,32 @@ def update_organization_scenario(runner):
         )
 
 
-class OrganizationSerializer(serializers.ModelSerializer):
-    accountRateLimit = serializers.IntegerField(min_value=0, max_value=1000000)
-    projectRateLimit = serializers.IntegerField(min_value=50, max_value=100)
-    slug = serializers.RegexField(r'^[a-z0-9_\-]+$', max_length=50,
-                                  required=False)
-    avatar = AvatarField()
+class OrganizationSerializer(serializers.Serializer):
+    name = serializers.CharField(max_length=64)
+    slug = serializers.RegexField(r'^[a-z0-9_\-]+$', max_length=50)
+    accountRateLimit = serializers.IntegerField(min_value=0, max_value=1000000,
+                                                required=False)
+    projectRateLimit = serializers.IntegerField(min_value=50, max_value=100,
+                                                required=False)
+    avatar = AvatarField(required=False)
     avatarType = serializers.ChoiceField(choices=(
         ('upload', 'upload'),
         ('letter_avatar', 'letter_avatar'),
-    ))
-
-    class Meta:
-        model = Organization
-        fields = ('name', 'slug')
+    ), required=False)
+
+    openMembership = serializers.BooleanField(required=False)
+    allowSharedIssues = serializers.BooleanField(required=False)
+    enhancedPrivacy = serializers.BooleanField(required=False)
+    dataScrubber = serializers.BooleanField(required=False)
+    dataScrubberDefaults = serializers.BooleanField(required=False)
+    sensitiveFields = ListField(child=serializers.CharField(), required=False)
+    safeFields = ListField(child=serializers.CharField(), required=False)
+    scrubIPAddresses = serializers.BooleanField(required=False)
+    isEarlyAdopter = serializers.BooleanField(required=False)
 
     def validate_slug(self, attrs, source):
         value = attrs[source]
-        if Organization.objects.filter(slug=value).exclude(id=self.object.id):
+        if Organization.objects.filter(slug=value).exclude(id=self.context['organization'].id):
             raise serializers.ValidationError('The slug "%s" is already in use.' % (value,))
         return attrs
 
@@ -75,7 +96,7 @@ class OrganizationSerializer(serializers.ModelSerializer):
         attrs = super(OrganizationSerializer, self).validate(attrs)
         if attrs.get('avatarType') == 'upload':
             has_existing_file = OrganizationAvatar.objects.filter(
-                organization=self.object,
+                organization=self.context['organization'],
                 file__isnull=False,
             ).exists()
             if not has_existing_file and not attrs.get('avatar'):
@@ -85,29 +106,45 @@ class OrganizationSerializer(serializers.ModelSerializer):
         return attrs
 
     def save(self):
-        rv = super(OrganizationSerializer, self).save()
-        # XXX(dcramer): this seems wrong, but cant find documentation on how to
-        # actually access this data
-        if 'projectRateLimit' in self.init_data:
-            OrganizationOption.objects.set_value(
-                organization=self.object,
-                key='sentry:project-rate-limit',
-                value=int(self.init_data['projectRateLimit']),
-            )
-        if 'accountRateLimit' in self.init_data:
-            OrganizationOption.objects.set_value(
-                organization=self.object,
-                key='sentry:account-rate-limit',
-                value=int(self.init_data['accountRateLimit']),
-            )
+        org = self.context['organization']
+        if 'openMembership' in self.init_data:
+            org.flags.allow_joinleave = self.init_data['openMembership']
+        if 'allowSharedIssues' in self.init_data:
+            org.flags.disable_shared_issues = not self.init_data['allowSharedIssues']
+        if 'enhancedPrivacy' in self.init_data:
+            org.flags.enhanced_privacy = self.init_data['enhancedPrivacy']
+        if 'isEarlyAdopter' in self.init_data:
+            org.flags.early_adopter = self.init_data['isEarlyAdopter']
+        if 'name' in self.init_data:
+            org.name = self.init_data['name']
+        if 'slug' in self.init_data:
+            org.slug = self.init_data['slug']
+        org.save()
+        for key, option, type_ in ORG_OPTIONS:
+            if key in self.init_data:
+                OrganizationOption.objects.set_value(
+                    organization=org,
+                    key=option,
+                    value=type_(self.init_data[key]),
+                )
         if 'avatar' in self.init_data or 'avatarType' in self.init_data:
             OrganizationAvatar.save_avatar(
-                relation={'organization': self.object},
+                relation={'organization': org},
                 type=self.init_data.get('avatarType', 'upload'),
                 avatar=self.init_data.get('avatar'),
-                filename='{}.png'.format(self.object.slug),
+                filename='{}.png'.format(org.slug),
             )
-        return rv
+        return org
+
+
+class OwnerOrganizationSerializer(OrganizationSerializer):
+    defaultRole = serializers.ChoiceField(choices=roles.get_choices())
+
+    def save(self, *args, **kwargs):
+        org = self.context['organization']
+        if 'defaultRole' in self.init_data:
+            org.default_role = self.init_data['defaultRole']
+        return super(OwnerOrganizationSerializer, self).save(*args, **kwargs)
 
 
 class OrganizationDetailsEndpoint(OrganizationEndpoint):
@@ -149,8 +186,15 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
                             to be available and unique.
         :auth: required
         """
-        serializer = OrganizationSerializer(organization, data=request.DATA,
-                                            partial=True)
+        if request.access.has_scope('org:delete'):
+            serializer_cls = OwnerOrganizationSerializer
+        else:
+            serializer_cls = OrganizationSerializer
+        serializer = serializer_cls(
+            data=request.DATA,
+            partial=True,
+            context={'organization': organization},
+        )
         if serializer.is_valid():
             organization = serializer.save()
 
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index b0dd7a272e..49bc62aacb 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import six
 
+from sentry import roles
 from sentry.app import quotas
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.auth import access
@@ -121,6 +122,22 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
                 default=100,
             )),
         }
+        context.update({
+            'isDefault': obj.is_default,
+            'defaultRole': obj.default_role,
+            'availableRoles': [{
+                'id': r.id,
+                'name': r.name,
+            } for r in roles.get_all()],
+            'openMembership': bool(obj.flags.allow_joinleave),
+            'allowSharedIssues': not obj.flags.disable_shared_issues,
+            'enhancedPrivacy': bool(obj.flags.enhanced_privacy),
+            'dataScrubber': bool(obj.get_option('sentry:require_scrub_data', False)),
+            'dataScrubberDefaults': bool(obj.get_option('sentry:require_scrub_defaults', False)),
+            'sensitiveFields': obj.get_option('sentry:sensitive_fields', None) or [],
+            'safeFields': obj.get_option('sentry:safe_fields', None) or [],
+            'scrubIPAddresses': bool(obj.get_option('sentry:require_scrub_ip_address', False)),
+        })
         context['teams'] = serialize(
             team_list, user, TeamWithProjectsSerializer())
         if env.request:
diff --git a/src/sentry/api/serializers/rest_framework/list.py b/src/sentry/api/serializers/rest_framework/list.py
index 7b321caf28..27bdb53b08 100644
--- a/src/sentry/api/serializers/rest_framework/list.py
+++ b/src/sentry/api/serializers/rest_framework/list.py
@@ -5,22 +5,48 @@ from rest_framework.serializers import WritableField, ValidationError
 
 class ListField(WritableField):
     def __init__(self, child=None, **kwargs):
+        if child:
+            assert isinstance(child, WritableField)
         self.child = child
         super(ListField, self).__init__(**kwargs)
 
-    def initialize(self, **kwargs):
-        super(ListField, self).initialize(**kwargs)
-        if self.child is not None:
-            self.child.initialize(**kwargs)
+    def initialize(self, parent, field_name):
+        super(ListField, self).initialize(parent, field_name)
+        if self.child:
+            self.child.initialize(parent, field_name)
 
-    def to_native(self, obj):
-        return obj
+    def to_native(self, value):
+        return value
 
-    def from_native(self, data):
-        if not isinstance(data, list):
+    def from_native(self, value):
+        if value is None:
+            return None
+
+        if not value:
+            return []
+
+        if not isinstance(value, list):
             msg = 'Incorrect type. Expected a list, but got %s'
-            raise ValidationError(msg % type(data).__name__)
+            raise ValidationError(msg % type(value).__name__)
 
         if self.child is None:
-            return data
-        return [self.child.from_native(x) for x in data]
+            return value
+
+        return [self.child.from_native(item) for item in value]
+
+    def validate(self, value):
+        if not value and self.required:
+            raise ValidationError(self.error_messages['required'])
+
+        if not isinstance(value, list):
+            msg = 'Incorrect type. Expected a list, but got %s'
+            raise ValidationError(msg % type(value).__name__)
+
+        if self.child:
+            for item in value:
+                self.child.validate(item)
+
+    def run_validators(self, value):
+        if self.child:
+            for item in value:
+                self.child.run_validators(item)
diff --git a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
index 2781a68ede..3e8a1e6221 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
@@ -84,7 +84,7 @@ const HomeSidebar = React.createClass({
                 <ListLink to={`/organizations/${orgId}/repos/`}>{t('Repositories')}</ListLink>
               }
               {access.has('org:write') &&
-                <li><a href={`/organizations/${orgId}/settings/`}>{t('Settings')}</a></li>
+                <ListLink to={`/organizations/${orgId}/settings/`}>{t('Settings')}</ListLink>
               }
             </ul>
           </div>
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index ae4fba96af..968e29109e 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -29,6 +29,7 @@ import OrganizationDashboard from './views/organizationDashboard';
 import OrganizationDetails from './views/organizationDetails';
 import OrganizationRateLimits from './views/organizationRateLimits';
 import OrganizationRepositories from './views/organizationRepositories';
+import OrganizationSettings from './views/organizationSettings';
 import OrganizationStats from './views/organizationStats';
 import OrganizationTeams from './views/organizationTeams';
 import AllTeamsList from './views/organizationTeams/allTeamsList';
@@ -113,6 +114,7 @@ function routes() {
 
         <Route path="/organizations/:orgId/audit-log/" component={errorHandler(OrganizationAuditLog)} />
         <Route path="/organizations/:orgId/repos/" component={errorHandler(OrganizationRepositories)} />
+        <Route path="/organizations/:orgId/settings/" component={errorHandler(OrganizationSettings)} />
         <Route path="/organizations/:orgId/teams/" component={errorHandler(OrganizationTeams)} />
         <Route path="/organizations/:orgId/teams/:teamId/" component={errorHandler(TeamDetails)}>
           <IndexRedirect to="settings/" />
diff --git a/src/sentry/static/sentry/app/stores/organizationStore.jsx b/src/sentry/static/sentry/app/stores/organizationStore.jsx
index 7831791b3e..7d41c655fe 100644
--- a/src/sentry/static/sentry/app/stores/organizationStore.jsx
+++ b/src/sentry/static/sentry/app/stores/organizationStore.jsx
@@ -13,6 +13,21 @@ const OrganizationStore = Reflux.createStore({
     return this.items;
   },
 
+  add(item) {
+    let match = false;
+    this.items.forEach((existing, idx) => {
+      if (existing.id === item.id) {
+        item = {...existing, ...item};
+        this.items[idx] = item;
+        match = true;
+      }
+    });
+    if (!match) {
+      this.items.push(item);
+    }
+    this.trigger([item]);
+  },
+
   load(items) {
     this.items = items;
     this.trigger(items);
diff --git a/src/sentry/static/sentry/app/views/organizationSettings.jsx b/src/sentry/static/sentry/app/views/organizationSettings.jsx
new file mode 100644
index 0000000000..a60970c69d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationSettings.jsx
@@ -0,0 +1,359 @@
+import React from 'react';
+
+import ApiMixin from '../mixins/apiMixin';
+import {
+  BooleanField,
+  FormState,
+  Select2Field,
+  TextField,
+  TextareaField
+} from '../components/forms';
+import IndicatorStore from '../stores/indicatorStore';
+import LoadingIndicator from '../components/loadingIndicator';
+import OrganizationHomeContainer from '../components/organizations/homeContainer';
+import OrganizationStore from '../stores/organizationStore';
+import {t} from '../locale';
+
+
+const OrganizationSettingsForm = React.createClass({
+  propTypes: {
+    orgId: React.PropTypes.string.isRequired,
+    access: React.PropTypes.object.isRequired,
+    initialData: React.PropTypes.object.isRequired,
+    onSave: React.PropTypes.func.isRequired
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      formData: this.buildFormData(this.props.initialData),
+      errors: {},
+      hasChanges: false,
+    };
+  },
+
+  buildFormData(data) {
+    let result = {
+      name: data.name,
+      slug: data.slug,
+      openMembership: data.openMembership,
+      allowSharedIssues: data.allowSharedIssues,
+      isEarlyAdopter: data.isEarlyAdopter,
+      enhancedPrivacy: data.enhancedPrivacy,
+      dataScrubber: data.dataScrubber,
+      dataScrubberDefaults: data.dataScrubberDefaults,
+      scrubIPAddresses: data.scrubIPAddresses,
+      safeFields: data.safeFields.join('\n'),
+      sensitiveFields: data.sensitiveFields.join('\n'),
+    };
+    if (this.props.access.has('org:delete')) {
+      result.defaultRole = data.defaultRole;
+    }
+    return result;
+  },
+
+  onFieldChange(name, value) {
+    let formData = {
+      ...this.state.formData,
+      [name]: value
+    };
+    this.setState({
+      hasChanges: true,
+      formData: formData,
+    });
+  },
+
+  onSubmit(e) {
+    e.preventDefault();
+
+    if (this.state.state == FormState.SAVING) {
+      return;
+    }
+
+    this.setState({
+      state: FormState.SAVING,
+      hasChanges: false,
+    }, () => {
+      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+      let {orgId} = this.props;
+      let formData = this.state.formData;
+      this.api.request(`/organizations/${orgId}/`, {
+        method: 'PUT',
+        data: {
+          ...formData,
+          safeFields: formData.safeFields.split('\n'),
+          sensitiveFields: formData.sensitiveFields.split('\n'),
+        },
+        success: (data) => {
+          this.props.onSave(data);
+          this.setState({
+            state: FormState.READY,
+            errors: {},
+          });
+          IndicatorStore.remove(loadingIndicator);
+          IndicatorStore.add(t('Changes saved.'), 'success', {
+            duration: 1500
+          });
+        },
+        error: (error) => {
+          this.setState({
+            state: FormState.ERROR,
+            errors: error.responseJSON,
+          });
+          IndicatorStore.remove(loadingIndicator);
+          IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
+            duration: 3000
+          });
+        },
+      });
+    });
+  },
+
+  render() {
+    let isSaving = this.state.state === FormState.SAVING;
+    let {errors, formData} = this.state;
+    let {access, initialData} = this.props;
+
+    let sensitiveFieldsHelp = (
+      <span>
+        {t('Additional field names to match against when scrubbing data for all projects. Separate multiple entries with a newline.')}<br />
+        <strong>{t('Note: These fields will be used in addition to project specific fields.')}</strong>
+      </span>
+    );
+
+    let safeFieldsHelp = (
+      <span>
+        {t('Field names which data scrubbers should ignore. Separate multiple entries with a newline.')}<br />
+        <strong>{t('Note: These fields will be used in addition to project specific fields.')}</strong>
+      </span>
+    );
+
+    return (
+      <form onSubmit={this.onSubmit} className="form-stacked ref-organization-settings">
+        {this.state.state === FormState.ERROR &&
+          <div className="alert alert-error alert-block">
+            {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
+          </div>
+        }
+        <fieldset>
+          <legend style={{marginTop: 0}}>{t('General')}</legend>
+
+          <TextField
+            key="name"
+            name="name"
+            label={t('Name')}
+            help={t('The name of your organization. i.e. My Company')}
+            value={formData.name}
+            required={true}
+            error={errors.name}
+            onChange={this.onFieldChange.bind(this, 'name')} />
+          <TextField
+            key="slug"
+            name="slug"
+            label={t('Short name')}
+            value={formData.slug}
+            help={t('A unique ID used to identify this organization.')}
+            required={true}
+            error={errors.slug}
+            onChange={this.onFieldChange.bind(this, 'slug')} />
+          <BooleanField
+            key="isEarlyAdopter"
+            name="isEarlyAdopter"
+            label={t('Early Adopter')}
+            value={formData.isEarlyAdopter}
+            help={t('Opt-in to new features before they\'re released to the public.')}
+            required={false}
+            error={errors.isEarlyAdopter}
+            onChange={this.onFieldChange.bind(this, 'isEarlyAdopter')} />
+
+          <legend>{t('Membership')}</legend>
+
+          {access.has('org:delete') &&
+            <Select2Field
+              key="defaultRole"
+              name="defaultRole"
+              label={t('Default Role')}
+              choices={initialData.availableRoles.map(r => [r.id, r.name])}
+              value={formData.defaultRole}
+              help={t('The default role new members will receive.')}
+              required={true}
+              error={errors.defaultRole}
+              onChange={this.onFieldChange.bind(this, 'defaultRole')} />
+          }
+
+          <BooleanField
+            key="openMembership"
+            name="openMembership"
+            label={t('Open Membership')}
+            value={formData.openMembership}
+            help={t('Allow organization members to freely join or leave any team.')}
+            required={true}
+            error={errors.openMembership}
+            onChange={this.onFieldChange.bind(this, 'openMembership')} />
+
+          <legend>{t('Security & Privacy')}</legend>
+
+          <BooleanField
+            key="allowSharedIssues"
+            name="allowSharedIssues"
+            label={t('Allow Shared Issues')}
+            value={formData.allowSharedIssues}
+            help={t('Enable sharing of limited details on issues to anonymous users.')}
+            required={false}
+            error={errors.allowSharedIssues}
+            onChange={this.onFieldChange.bind(this, 'allowSharedIssues')} />
+
+          <BooleanField
+            key="enhancedPrivacy"
+            name="enhancedPrivacy"
+            label={t('Enhanced Privacy')}
+            value={formData.enhancedPrivacy}
+            help={t('Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.')}
+            required={false}
+            error={errors.enhancedPrivacy}
+            onChange={this.onFieldChange.bind(this, 'enhancedPrivacy')} />
+
+          <BooleanField
+            key="dataScrubber"
+            name="dataScrubber"
+            label={t('Require Data Scrubber')}
+            value={formData.dataScrubber}
+            help={t('Require server-side data scrubbing be enabled for all projects.')}
+            required={false}
+            error={errors.dataScrubber}
+            onChange={this.onFieldChange.bind(this, 'dataScrubber')} />
+
+          <BooleanField
+            key="dataScrubberDefaults"
+            name="dataScrubberDefaults"
+            label={t('Require Using Default Scrubbers')}
+            value={formData.dataScrubberDefaults}
+            help={t('Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects.')}
+            required={true}
+            error={errors.dataScrubberDefaults}
+            onChange={this.onFieldChange.bind(this, 'dataScrubberDefaults')} />
+
+          <TextareaField
+            key="sensitiveFields"
+            name="sensitiveFields"
+            label={t('Global sensitive fields')}
+            value={formData.sensitiveFields}
+            help={sensitiveFieldsHelp}
+            placeholder={t('e.g. email')}
+            required={false}
+            error={errors.sensitiveFields}
+            onChange={this.onFieldChange.bind(this, 'sensitiveFields')} />
+
+          <TextareaField
+            key="safeFields"
+            name="safeFields"
+            label={t('Global safe fields')}
+            value={formData.safeFields}
+            help={safeFieldsHelp}
+            placeholder={t('e.g. email')}
+            required={false}
+            error={errors.safeFields}
+            onChange={this.onFieldChange.bind(this, 'safeFields')} />
+
+          <BooleanField
+            key="scrubIPAddresses"
+            name="scrubIPAddresses"
+            label={t('Require Using Default Scrubbers')}
+            value={formData.requireDataScrubber}
+            help={t('Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects.')}
+            required={false}
+            error={errors.requireDataScrubberDefaults}
+            onChange={this.onFieldChange.bind(this, 'requireDataScrubberDefaults')} />
+        </fieldset>
+        <fieldset className="form-actions">
+          <button type="submit" className="btn btn-primary"
+                  disabled={isSaving || !this.state.hasChanges}>{t('Save Changes')}</button>
+        </fieldset>
+      </form>
+    );
+  }
+});
+
+const OrganizationSettings = React.createClass({
+  mixins: [
+    ApiMixin,
+  ],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      data: null,
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    this.api.request(`/organizations/${this.props.params.orgId}/`, {
+      method: 'GET',
+      success: (data) => {
+        this.setState({
+          data: data,
+          loading: false,
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true,
+        });
+      }
+    });
+  },
+
+  onSave(data) {
+    // TODO(dcramer): this shoudl propag
+    this.setState({data: data});
+    OrganizationStore.add(data);
+  },
+
+  render() {
+    if (this.state.loading)
+      return <LoadingIndicator />;
+
+    let data = this.state.data;
+    let orgId = this.props.params.orgId;
+    let access = new Set(data.access);
+
+    return (
+      <OrganizationHomeContainer>
+        <h3>{t('Organization Settings')}</h3>
+        <div className="box">
+          <div className="box-content with-padding">
+            <OrganizationSettingsForm
+              initialData={data}
+              orgId={orgId}
+              access={access}
+              onSave={this.onSave} />
+          </div>
+        </div>
+
+        {access.has('org:delete') && !data.isDefault &&
+          <div className="box">
+            <div className="box-header">
+              <h3>{t('Remove Organization')}</h3>
+            </div>
+            <div className="box-content with-padding">
+              <p>{t('Removing this organization will delete all data including projects and their associated events.')}</p>
+
+              <fieldset className="form-actions">
+                <a href={`/organizations/${orgId}/remove/`} className="btn btn-danger">{t('Remove Organization')}</a>
+              </fieldset>
+            </div>
+          </div>
+        }
+      </OrganizationHomeContainer>
+    );
+  }
+});
+
+export default OrganizationSettings;
diff --git a/src/sentry/templates/sentry/bases/organization.html b/src/sentry/templates/sentry/bases/organization.html
index b4b8571a17..cb2d47613d 100644
--- a/src/sentry/templates/sentry/bases/organization.html
+++ b/src/sentry/templates/sentry/bases/organization.html
@@ -78,7 +78,7 @@
         <li><a href="{% absolute_uri '/organizations/{}/repos/' organization.slug %}">{% trans "Repositories" %}</li></a>
       {% endfeature %}
       <li class="{% block org_settings_nav %}{% endblock %}">
-        <a href="{% url 'sentry-organization-settings' organization.slug %}">
+        <a href="{% absolute_uri '/organizations/{}/settings/' organization.slug %}">
           {% trans "Settings" %}
         </a>
       </li>
diff --git a/src/sentry/templates/sentry/organization-settings.html b/src/sentry/templates/sentry/organization-settings.html
deleted file mode 100644
index 3f3e5d8e42..0000000000
--- a/src/sentry/templates/sentry/organization-settings.html
+++ /dev/null
@@ -1,66 +0,0 @@
-{% extends "sentry/bases/organization.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-
-{% block org_settings_nav %}active{% endblock %}
-
-{% block main %}
-  <h3>Organization Settings</h3>
-
-  <div class="box">
-    <div class="box-content with-padding">
-      <form class="form-stacked" action="" method="post">
-        {% csrf_token %}
-
-        {% if form.errors %}
-          <div class="alert alert-block alert-error">{% trans "Please correct the errors below." %}</div>
-        {% endif %}
-
-        {{ form|as_crispy_errors }}
-
-        <legend style="margin-top: 0">General</legend>
-
-        {{ form.name|as_crispy_field }}
-        {{ form.slug|as_crispy_field }}
-        {{ form.early_adopter|as_crispy_field }}
-
-        <legend>Membership</legend>
-
-        {% if form.default_role %}
-          {{ form.default_role|as_crispy_field }}
-        {% endif %}
-        {{ form.allow_joinleave|as_crispy_field }}
-
-        <legend>Security &amp; Privacy</legend>
-
-        {{ form.allow_shared_issues|as_crispy_field }}
-        {{ form.enhanced_privacy|as_crispy_field }}
-        {{ form.require_scrub_data|as_crispy_field }}
-        {{ form.require_scrub_defaults|as_crispy_field }}
-        {{ form.sensitive_fields|as_crispy_field }}
-        {{ form.safe_fields|as_crispy_field }}
-        {{ form.require_scrub_ip_address|as_crispy_field }}
-
-        <fieldset class="form-actions">
-          <button type="submit" class="btn btn-primary btn-lg">{% trans "Save Changes" %}</button>
-        </fieldset>
-      </form>
-    </div>
-  </div>
-
-  {% if ACCESS.org_delete and not organization.is_default %}
-  <div class="box">
-    <div class="box-header">
-      <h3>{% trans "Remove Organization" %}</h3>
-    </div>
-    <div class="box-content with-padding">
-      <p>Removing this organization will delete all data including projects and their associated events.</p>
-
-      <fieldset class="form-actions">
-        <a href="{% url 'sentry-remove-organization' organization.slug %}" class="btn btn-danger">{% trans "Remove Organization" %}</a>
-      </fieldset>
-    </div>
-  </div>
-  {% endif %}
-{% endblock %}
diff --git a/src/sentry/templates/sentry/remove-organization.html b/src/sentry/templates/sentry/remove-organization.html
index ac93d172e2..2b4837897f 100644
--- a/src/sentry/templates/sentry/remove-organization.html
+++ b/src/sentry/templates/sentry/remove-organization.html
@@ -2,12 +2,13 @@
 
 {% load crispy_forms_tags %}
 {% load i18n %}
+{% load sentry_helpers %}
 
 {% block org_settings_nav %}active{% endblock %}
 
 {% block main %}
   <div class="page-header">
-    <h2>Remove Organization</h2>
+    <h2>{% trans "Remove Organization" %}</h2>
   </div>
 
   <form class="form-stacked" action="" method="post">
@@ -33,7 +34,7 @@
 
     <fieldset class="form-actions">
       <button type="submit" class="btn btn-danger">{% trans "Remove Organization" %}</button>
-      <a href="{% url 'sentry-organization-settings' organization.slug %}" class="btn btn-default">{% trans "Cancel" %}</a>
+      <a href="{% absolute_uri '/organizations/{}/settings/' organization.slug %}" class="btn btn-default">{% trans "Cancel" %}</a>
     </fieldset>
   </form>
 {% endblock %}
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index d446ff9ec3..aa40ce9d93 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -51,7 +51,6 @@ from sentry.web.frontend.organization_member_settings import \
     OrganizationMemberSettingsView
 from sentry.web.frontend.out import OutView
 from sentry.web.frontend.organization_members import OrganizationMembersView
-from sentry.web.frontend.organization_settings import OrganizationSettingsView
 from sentry.web.frontend.project_issue_tracking import ProjectIssueTrackingView
 from sentry.web.frontend.project_keys import ProjectKeysView
 from sentry.web.frontend.project_plugin_configure import \
@@ -364,8 +363,6 @@ urlpatterns += patterns(
         name='sentry-organization-member-settings'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/stats/$', react_page_view,
         name='sentry-organization-stats'),
-    url(r'^organizations/(?P<organization_slug>[\w_-]+)/settings/$', OrganizationSettingsView.as_view(),
-        name='sentry-organization-settings'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/teams/(?P<team_slug>[\w_-]+)/remove/$', RemoveTeamView.as_view(),
         name='sentry-remove-team'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/teams/new/$', CreateTeamView.as_view(),
@@ -379,6 +376,9 @@ urlpatterns += patterns(
     url(r'^accept/(?P<member_id>\d+)/(?P<token>\w+)/$', AcceptOrganizationInviteView.as_view(),
         name='sentry-accept-invite'),
 
+    # need to catch settings and force it to react
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/settings/', react_page_view),
+
     # Settings - Projects
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/$',
         ProjectSettingsView.as_view(),
diff --git a/tests/acceptance/test_organization_settings.py b/tests/acceptance/test_organization_settings.py
new file mode 100644
index 0000000000..f9d771a1a0
--- /dev/null
+++ b/tests/acceptance/test_organization_settings.py
@@ -0,0 +1,37 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class OrganizationSettingsTest(AcceptanceTestCase):
+    def setUp(self):
+        super(OrganizationSettingsTest, self).setUp()
+        self.user = self.create_user('foo@example.com')
+        self.org = self.create_organization(
+            name='Rowdy Tiger',
+            owner=None,
+        )
+        self.team = self.create_team(
+            organization=self.org,
+            name='Mariachi Band'
+        )
+        self.project = self.create_project(
+            organization=self.org,
+            team=self.team,
+            name='Bengal',
+        )
+        self.create_member(
+            user=self.user,
+            organization=self.org,
+            role='owner',
+            teams=[self.team],
+        )
+        self.login_as(self.user)
+        self.path = '/organizations/{}/settings/'.format(self.org.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until('.organization-home')
+        self.browser.wait_until_not('.loading-indicator')
+        self.browser.snapshot('organization settings')
+        assert self.browser.element_exists('.ref-organization-settings')
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index 6f098f284a..a3043131bf 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -53,6 +53,18 @@ class OrganizationUpdateTest(APITestCase):
         assert org.name == 'hello world'
         assert org.slug == 'foobar'
 
+    def test_dupe_slug(self):
+        org = self.create_organization(owner=self.user)
+        org2 = self.create_organization(owner=self.user, slug='baz')
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-organization-details', kwargs={
+            'organization_slug': org.slug,
+        })
+        response = self.client.put(url, data={
+            'slug': org2.slug,
+        })
+        assert response.status_code == 400, response.content
+
     def test_setting_rate_limit(self):
         org = self.create_organization(owner=self.user)
         self.login_as(user=self.user)
@@ -85,6 +97,84 @@ class OrganizationUpdateTest(APITestCase):
         assert avatar.get_avatar_type_display() == 'upload'
         assert avatar.file
 
+    def test_various_options(self):
+        org = self.create_organization(owner=self.user)
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-organization-details', kwargs={
+            'organization_slug': org.slug,
+        })
+        response = self.client.put(url, data={
+            'openMembership': False,
+            'isEarlyAdopter': True,
+            'allowSharedIssues': False,
+            'enhancedPrivacy': True,
+            'dataScrubber': True,
+            'dataScrubberDefaults': True,
+            'sensitiveFields': ['password'],
+            'safeFields': ['email'],
+            'scrubIPAddresses': True,
+            'defaultRole': 'owner',
+        })
+        assert response.status_code == 200, response.content
+        org = Organization.objects.get(id=org.id)
+
+        assert org.flags.early_adopter
+        assert not org.flags.allow_joinleave
+        assert org.flags.disable_shared_issues
+        assert org.flags.enhanced_privacy
+        assert org.flags.enhanced_privacy
+        assert org.default_role == 'owner'
+
+        options = {
+            o.key: o.value
+            for o in OrganizationOption.objects.filter(
+                organization=org,
+            )
+        }
+
+        assert options.get('sentry:require_scrub_defaults')
+        assert options.get('sentry:require_scrub_data')
+        assert options.get('sentry:require_scrub_ip_address')
+        assert options.get('sentry:sensitive_fields') == ['password']
+        assert options.get('sentry:safe_fields') == ['email']
+
+    def test_safe_fields_as_string_regression(self):
+        org = self.create_organization(owner=self.user)
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-organization-details', kwargs={
+            'organization_slug': org.slug,
+        })
+        response = self.client.put(url, data={
+            'safeFields': 'email',
+        })
+        assert response.status_code == 400, (response.status_code, response.content)
+        org = Organization.objects.get(id=org.id)
+
+        options = {
+            o.key: o.value
+            for o in OrganizationOption.objects.filter(
+                organization=org,
+            )
+        }
+
+        assert not options.get('sentry:safe_fields')
+
+    def test_manager_cannot_set_default_role(self):
+        org = self.create_organization(owner=self.user)
+        user = self.create_user('baz@example.com')
+        self.create_member(organization=org, user=user, role='manager')
+        self.login_as(user=user)
+        url = reverse('sentry-api-0-organization-details', kwargs={
+            'organization_slug': org.slug,
+        })
+        response = self.client.put(url, data={
+            'defaultRole': 'owner',
+        })
+        assert response.status_code == 200, response.content
+        org = Organization.objects.get(id=org.id)
+
+        assert org.default_role == 'member'
+
 
 class OrganizationDeleteTest(APITestCase):
     @patch('sentry.api.endpoints.organization_details.uuid4')
diff --git a/tests/sentry/web/frontend/test_organization_settings.py b/tests/sentry/web/frontend/test_organization_settings.py
deleted file mode 100644
index 27450d0113..0000000000
--- a/tests/sentry/web/frontend/test_organization_settings.py
+++ /dev/null
@@ -1,83 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-
-from sentry.models import Organization
-from sentry.testutils import TestCase, PermissionTestCase
-
-
-class OrganizationSettingsPermissionTest(PermissionTestCase):
-    def setUp(self):
-        super(OrganizationSettingsPermissionTest, self).setUp()
-        self.path = reverse('sentry-organization-settings', args=[self.organization.slug])
-
-    def test_teamless_admin_cannot_load(self):
-        self.assert_teamless_admin_cannot_access(self.path)
-
-    def test_owner_can_load(self):
-        self.assert_owner_can_access(self.path)
-
-    def test_member_cannot_load(self):
-        self.assert_member_cannot_access(self.path)
-
-
-class OrganizationSettingsTest(TestCase):
-    def test_renders_with_context(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-
-        path = reverse('sentry-organization-settings', args=[organization.slug])
-
-        self.login_as(self.user)
-
-        resp = self.client.get(path)
-
-        assert resp.status_code == 200
-
-        self.assertTemplateUsed(resp, 'sentry/organization-settings.html')
-
-        assert resp.context['organization'] == organization
-        assert resp.context['form']
-
-    def test_saves(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-
-        path = reverse('sentry-organization-settings', args=[organization.slug])
-
-        self.login_as(self.user)
-
-        resp = self.client.post(path, {
-            'name': 'bar',
-            'slug': 'bar',
-            'default_role': 'admin',
-        })
-
-        assert resp.status_code == 302
-
-        organization = Organization.objects.get(id=organization.id)
-
-        assert organization.name == 'bar'
-        assert organization.slug == 'bar'
-        assert organization.default_role == 'admin'
-
-    def test_manager_cannot_change_default_role(self):
-        user = self.create_user('foo@example.com', is_superuser=False)
-        organization = self.create_organization(name='foo')
-        self.create_member(organization=organization, user=user, role='manager')
-
-        path = reverse('sentry-organization-settings', args=[organization.slug])
-
-        self.login_as(user)
-
-        resp = self.client.post(path, {
-            'name': 'bar',
-            'slug': 'bar',
-            'default_role': 'owner',
-        })
-
-        assert resp.status_code == 302
-
-        organization = Organization.objects.get(id=organization.id)
-
-        assert organization.name == 'bar'
-        assert organization.slug == 'bar'
-        assert organization.default_role == 'member'
