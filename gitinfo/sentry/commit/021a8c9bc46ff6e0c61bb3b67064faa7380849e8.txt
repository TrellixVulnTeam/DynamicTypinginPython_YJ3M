commit 021a8c9bc46ff6e0c61bb3b67064faa7380849e8
Author: josh <josh@jrl.ninja>
Date:   Wed Jan 29 17:54:41 2020 +0000

    ref: remove unused AuthApiClient from integrations (#16677)

diff --git a/src/sentry/integrations/client.py b/src/sentry/integrations/client.py
index 29b5e0cf8e..c1d28d3e89 100644
--- a/src/sentry/integrations/client.py
+++ b/src/sentry/integrations/client.py
@@ -14,13 +14,7 @@ from sentry.exceptions import InvalidIdentity
 from sentry.http import build_session
 from sentry.utils import metrics
 
-from .exceptions import (
-    ApiHostError,
-    ApiTimeoutError,
-    ApiError,
-    ApiUnauthorized,
-    UnsupportedResponseType,
-)
+from .exceptions import ApiHostError, ApiTimeoutError, ApiError, UnsupportedResponseType
 
 
 class BaseApiResponse(object):
@@ -245,55 +239,6 @@ class ApiClient(object):
         return self.request("PUT", *args, **kwargs)
 
 
-class AuthApiClient(ApiClient):
-    auth = None
-
-    def __init__(self, auth=None, *args, **kwargs):
-        self.auth = auth
-        super(AuthApiClient, self).__init__(*args, **kwargs)
-
-    def has_auth(self):
-        return self.auth and "access_token" in self.auth.tokens
-
-    def exception_means_unauthorized(self, exc):
-        return isinstance(exc, ApiUnauthorized)
-
-    def ensure_auth(self, **kwargs):
-        headers = kwargs["headers"]
-        if "Authorization" not in headers and self.has_auth() and "auth" not in kwargs:
-            kwargs = self.bind_auth(**kwargs)
-        return kwargs
-
-    def bind_auth(self, **kwargs):
-        token = self.auth.tokens["access_token"]
-        kwargs["headers"]["Authorization"] = u"Bearer {}".format(token)
-        return kwargs
-
-    def _request(self, method, path, **kwargs):
-        headers = kwargs.setdefault("headers", {})
-        headers.setdefault("Accept", "application/json, application/xml")
-
-        # TODO(dcramer): we could proactively refresh the token if we knew
-        # about expires
-        kwargs = self.ensure_auth(**kwargs)
-
-        try:
-            return ApiClient._request(self, method, path, **kwargs)
-        except Exception as exc:
-            if not self.exception_means_unauthorized(exc):
-                raise
-            if not self.auth:
-                raise
-
-        # refresh token
-        self.logger.info(
-            "token.refresh", extra={"auth_id": self.auth.id, "provider": self.auth.provider}
-        )
-        self.auth.refresh_token()
-        kwargs = self.bind_auth(**kwargs)
-        return ApiClient._request(self, method, path, **kwargs)
-
-
 class OAuth2RefreshMixin(object):
     def check_auth(self, *args, **kwargs):
         """
diff --git a/tests/sentry/integrations/test_client.py b/tests/sentry/integrations/test_client.py
index 37199c35a4..3ff17041e9 100644
--- a/tests/sentry/integrations/test_client.py
+++ b/tests/sentry/integrations/test_client.py
@@ -1,20 +1,12 @@
 from __future__ import absolute_import
 
-import pytest
 import responses
 
 from time import time
-from sentry.utils.compat.mock import Mock
 from sentry.testutils import TestCase
 
-from sentry.integrations.exceptions import (
-    ApiError,
-    ApiHostError,
-    ApiUnauthorized,
-    UnsupportedResponseType,
-)
 from sentry.identity import register
-from sentry.integrations.client import ApiClient, AuthApiClient, OAuth2RefreshMixin
+from sentry.integrations.client import ApiClient, OAuth2RefreshMixin
 from sentry.identity.oauth2 import OAuth2Provider
 from sentry.models import Identity, IdentityProvider
 
@@ -56,67 +48,6 @@ class ApiClientTest(TestCase):
         assert resp.status_code == 200
 
 
-class AuthApiClientTest(TestCase):
-    @responses.activate
-    def test_without_authorization(self):
-        responses.add(responses.GET, "http://example.com", json={})
-
-        resp = AuthApiClient().get("http://example.com")
-        assert resp.status_code == 200
-
-        request = responses.calls[-1].request
-        assert not request.headers.get("Authorization")
-
-    @responses.activate
-    def test_with_authorization(self):
-        responses.add(responses.GET, "http://example.com", json={})
-
-        auth = Mock()
-        auth.tokens = {"access_token": "access-token"}
-
-        resp = AuthApiClient(auth=auth).get("http://example.com")
-        assert resp.status_code == 200
-
-        request = responses.calls[-1].request
-        assert request.headers.get("Authorization") == "Bearer access-token"
-
-    @responses.activate
-    def test_with_authorization_and_no_auth(self):
-        responses.add(responses.GET, "http://example.com", json={})
-
-        auth = Mock()
-        auth.tokens = {"access_token": "access-token"}
-
-        resp = AuthApiClient(auth=auth).get("http://example.com", auth=None)
-        assert resp.status_code == 200
-
-        request = responses.calls[-1].request
-        assert not request.headers.get("Authorization")
-
-    @responses.activate
-    def test_invalid_host(self):
-        with pytest.raises(ApiHostError):
-            AuthApiClient().get("http://example.com")
-
-    @responses.activate
-    def test_unauthorized(self):
-        responses.add(responses.GET, "http://example.com", status=404)
-        with pytest.raises(ApiError):
-            AuthApiClient().get("http://example.com")
-
-    @responses.activate
-    def test_forbidden(self):
-        responses.add(responses.GET, "http://example.com", status=401)
-        with pytest.raises(ApiUnauthorized):
-            AuthApiClient().get("http://example.com")
-
-    @responses.activate
-    def test_invalid_plaintext(self):
-        responses.add(responses.GET, "http://example.com", body="")
-        with pytest.raises(UnsupportedResponseType):
-            AuthApiClient().get("http://example.com")
-
-
 class OAuthProvider(OAuth2Provider):
     key = "oauth"
     name = "OAuth Provider"
