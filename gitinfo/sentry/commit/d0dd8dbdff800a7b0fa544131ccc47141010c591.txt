commit d0dd8dbdff800a7b0fa544131ccc47141010c591
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Wed Mar 6 14:41:40 2019 +0100

    Revert "ref: Sample to_python calls (#12090)" (#12308)
    
    This reverts commit ec269b5640e1c5ec93fe2f5ad9d678b70cdaa03c.

diff --git a/requirements-base.txt b/requirements-base.txt
index dfb84e727b..37692dd6df 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -55,7 +55,7 @@ redis>=2.10.3,<2.10.6
 requests-oauthlib==0.3.3
 requests[security]>=2.20.0,<2.21.0
 selenium==3.11.0
-semaphore>=0.4.19,<0.5.0
+semaphore>=0.4.18,<0.5.0
 sentry-sdk>=0.7.0
 setproctitle>=1.1.7,<1.2.0
 simplejson>=3.2.0,<3.9.0
diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
index 9f7efc05d2..87c1e63fe0 100644
--- a/src/sentry/db/models/fields/node.py
+++ b/src/sentry/db/models/fields/node.py
@@ -49,7 +49,6 @@ class NodeData(collections.MutableMapping):
         data=None means, this is a node that needs to be fetched from nodestore.
         data={...} means, this is an object that should be saved to nodestore.
     """
-
     def __init__(self, field, id, data=None):
         self.field = field
         self.id = id
@@ -177,7 +176,6 @@ class NodeField(GzippedDictField):
         self.ref_func = kwargs.pop('ref_func', None)
         self.ref_version = kwargs.pop('ref_version', None)
         self.wrapper = kwargs.pop('wrapper', None)
-        self.pass_node_id_to_wrapper = kwargs.pop('pass_node_id_to_wrapper', False)
         self.id_func = kwargs.pop('id_func', lambda: b64encode(uuid4().bytes))
         super(NodeField, self).__init__(*args, **kwargs)
 
@@ -226,10 +224,7 @@ class NodeField(GzippedDictField):
             value = None
 
         if value is not None and self.wrapper is not None:
-            kwargs = {}
-            if self.pass_node_id_to_wrapper:
-                kwargs['node_id'] = node_id
-            value = self.wrapper(value, **kwargs)
+            value = self.wrapper(value)
 
         return NodeData(self, node_id, value)
 
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index ffd35352aa..b7e5b09c29 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -343,7 +343,7 @@ class EventManager(object):
         auth=None,
         key=None,
         content_encoding=None,
-        is_renormalize=False,
+        for_store=True,
     ):
         self._data = _decode_event(data, content_encoding=content_encoding)
         self.version = version
@@ -352,7 +352,7 @@ class EventManager(object):
         self._user_agent = user_agent
         self._auth = auth
         self._key = key
-        self._is_renormalize = is_renormalize
+        self._for_store = for_store
         self._normalized = False
 
     def process_csp_report(self):
@@ -442,7 +442,6 @@ class EventManager(object):
             max_secs_in_future=MAX_SECS_IN_FUTURE,
             max_secs_in_past=MAX_SECS_IN_PAST,
             enable_trimming=True,
-            is_renormalize=self._is_renormalize
         )
 
         self._data = CanonicalKeyDict(
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index 10c4259be5..0802588800 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -1,12 +1,13 @@
 from __future__ import absolute_import
 
-from collections import OrderedDict
+from collections import Mapping, OrderedDict
 import logging
 import six
 
 from django.conf import settings
 from django.utils.translation import ugettext as _
 
+from sentry.models.eventerror import EventError
 from sentry.utils.canonical import get_canonical_name
 from sentry.utils.html import escape
 from sentry.utils.imports import import_string
@@ -33,7 +34,7 @@ def get_interface(name):
     return interface
 
 
-def get_interfaces(data, rust_renormalized=False):
+def get_interfaces(data):
     result = []
     for key, data in six.iteritems(data):
         # Skip invalid interfaces that were nulled out during normalization
@@ -45,9 +46,7 @@ def get_interfaces(data, rust_renormalized=False):
         except ValueError:
             continue
 
-        value = safe_execute(cls.to_python, data,
-                             rust_renormalized=rust_renormalized,
-                             _with_transaction=False)
+        value = safe_execute(cls.to_python, data, _with_transaction=False)
         if not value:
             continue
 
@@ -128,7 +127,7 @@ class Interface(object):
             self._data[name] = value
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=False):
+    def to_python(cls, data):
         """Creates a python interface object from the given raw data.
 
         This function can assume fully normalized and valid data. It can create
@@ -137,6 +136,59 @@ class Interface(object):
         """
         return cls(**data) if data is not None else None
 
+    @classmethod
+    def _normalize(cls, data, meta):
+        """Custom interface normalization. ``data`` is guaranteed to be a
+        non-empty mapping. Return ``None`` for invalid data.
+        """
+        return cls.to_python(data).to_json()
+
+    @classmethod
+    def normalize(cls, data, meta):
+        """Normalizes the given raw data removing or replacing all invalid
+        attributes. If the interface is unprocessable, ``None`` is returned
+        instead.
+
+        Errors are written to the ``meta`` container. Use ``Meta.enter(key)`` to
+        obtain an instance.
+
+        TEMPORARY: The transitional default behavior is to call to_python and
+        catch exceptions into meta data. To migrate, override ``_normalize``.
+        """
+
+        # Gracefully skip empty data. We treat ``None`` and empty objects the
+        # same as missing data. If there are meta errors attached already, they
+        # will remain in meta.
+        if not data:
+            return None
+
+        # Interface data is required to be a JSON object. Places where the
+        # protocol permits lists must be casted to a values wrapper first.
+        if not isinstance(data, Mapping):
+            meta.add_error(EventError.INVALID_DATA, data, {
+                'reason': 'expected %s' % (cls.__name__,),
+            })
+            return None
+
+        try:
+            data = cls._normalize(data, meta=meta)
+        except Exception as e:
+            # XXX: InterfaceValidationErrors can be thrown in the transitional
+            # phase while to_python is being used for normalization. All other
+            # exceptions indicate a programming error and need to be reported.
+            if not isinstance(e, InterfaceValidationError):
+                interface_logger.error('Discarded invalid value for interface: %s (%r)',
+                                       cls.path, data, exc_info=True)
+
+            meta.add_error(EventError.INVALID_DATA, data, {
+                'reason': six.text_type(e)
+            })
+            return None
+
+        # As with input data, empty interface data is coerced to None after
+        # normalization.
+        return data or None
+
     def get_api_context(self, is_public=False):
         return self.to_json()
 
diff --git a/src/sentry/interfaces/breadcrumbs.py b/src/sentry/interfaces/breadcrumbs.py
index 2fd2f7ef3a..277241c873 100644
--- a/src/sentry/interfaces/breadcrumbs.py
+++ b/src/sentry/interfaces/breadcrumbs.py
@@ -37,19 +37,18 @@ class Breadcrumbs(Interface):
     score = 800
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=False):
+    def to_python(cls, data):
         values = []
         for index, crumb in enumerate(get_path(data, 'values', filter=True, default=())):
             # TODO(ja): Handle already invalid and None breadcrumbs
 
             try:
-                values.append(cls.normalize_crumb(crumb, rust_renormalized=rust_renormalized))
+                values.append(cls.normalize_crumb(crumb))
             except Exception:
                 # TODO(dcramer): we dont want to discard the entirety of data
                 # when one breadcrumb errors, but it'd be nice if we could still
                 # record an error
-                if rust_renormalized:
-                    raise
+                pass
 
         return cls(values=values)
 
@@ -69,16 +68,7 @@ class Breadcrumbs(Interface):
         })
 
     @classmethod
-    def normalize_crumb(cls, crumb, rust_renormalized):
-        if rust_renormalized:
-            crumb = dict(crumb)
-            ts = parse_timestamp(crumb.get('timestamp'))
-            if ts:
-                crumb['timestamp'] = to_timestamp(ts)
-            else:
-                crumb['timestamp'] = None
-            return crumb
-
+    def normalize_crumb(cls, crumb):
         ty = crumb.get('type') or 'default'
         level = crumb.get('level')
         if not isinstance(level, six.string_types) or \
diff --git a/src/sentry/interfaces/contexts.py b/src/sentry/interfaces/contexts.py
index 1c26ae707d..2b24d34135 100644
--- a/src/sentry/interfaces/contexts.py
+++ b/src/sentry/interfaces/contexts.py
@@ -176,16 +176,11 @@ class Contexts(Interface):
     score = 800
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=False):
+    def to_python(cls, data):
         rv = {}
         for alias, value in six.iteritems(data):
-            # XXX(markus): The `None`-case should be handled in the UI and
-            # other consumers of this interface
             if value is not None:
-                if rust_renormalized:
-                    rv[alias] = value
-                else:
-                    rv[alias] = cls.normalize_context(alias, value)
+                rv[alias] = cls.normalize_context(alias, value)
         return cls(**rv)
 
     @classmethod
diff --git a/src/sentry/interfaces/debug_meta.py b/src/sentry/interfaces/debug_meta.py
index 419bc4c406..ac83fd2cdc 100644
--- a/src/sentry/interfaces/debug_meta.py
+++ b/src/sentry/interfaces/debug_meta.py
@@ -105,19 +105,16 @@ class DebugMeta(Interface):
     external_type = 'debugmeta'
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=False):
-        if rust_renormalized:
-            images = data.get('images', None) or []
-        else:
-            is_debug_build = data.get('is_debug_build', None)
-            if is_debug_build is not None and not isinstance(is_debug_build, bool):
-                raise InterfaceValidationError('Invalid value for "is_debug_build"')
-
-            images = []
-            for x in data.get('images', None) or ():
-                if x is None:
-                    continue
-                images.append(cls.normalize_image(x))
+    def to_python(cls, data):
+        is_debug_build = data.get('is_debug_build', None)
+        if is_debug_build is not None and not isinstance(is_debug_build, bool):
+            raise InterfaceValidationError('Invalid value for "is_debug_build"')
+
+        images = []
+        for x in data.get('images', None) or ():
+            if x is None:
+                continue
+            images.append(cls.normalize_image(x))
 
         return cls(
             images=images,
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 1fd86eb52e..93096d0cdd 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -726,10 +726,7 @@ class Mechanism(Interface):
     """
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=False):
-        if rust_renormalized:
-            return cls(**data)
-
+    def to_python(cls, data):
         data = upgrade_legacy_mechanism(data)
         is_valid, errors = validate_and_default_interface(data, cls.path)
         if not is_valid:
@@ -821,49 +818,44 @@ class SingleException(Interface):
     path = 'exception'
 
     @classmethod
-    def to_python(cls, data, slim_frames=True, rust_renormalized=False):
-        if not rust_renormalized:
-            is_valid, errors = validate_and_default_interface(data, cls.path)
-            if not is_valid:
-                raise InterfaceValidationError("Invalid exception")
+    def to_python(cls, data, slim_frames=True):
+        is_valid, errors = validate_and_default_interface(data, cls.path)
+        if not is_valid:
+            raise InterfaceValidationError("Invalid exception")
 
-            if not (data.get('type') or data.get('value')):
-                raise InterfaceValidationError("No 'type' or 'value' present")
+        if not (data.get('type') or data.get('value')):
+            raise InterfaceValidationError("No 'type' or 'value' present")
 
         if get_path(data, 'stacktrace', 'frames', filter=True):
             stacktrace = Stacktrace.to_python(
                 data['stacktrace'],
                 slim_frames=slim_frames,
-                rust_renormalized=rust_renormalized
             )
         else:
             stacktrace = None
 
         if get_path(data, 'raw_stacktrace', 'frames', filter=True):
             raw_stacktrace = Stacktrace.to_python(
-                data['raw_stacktrace'], slim_frames=slim_frames, raw=True,
-                rust_renormalized=rust_renormalized
+                data['raw_stacktrace'], slim_frames=slim_frames, raw=True
             )
         else:
             raw_stacktrace = None
 
-        if not rust_renormalized:
-            type = data.get('type')
-            value = data.get('value')
-            if isinstance(value, six.string_types):
-                if type is None:
-                    m = _type_value_re.match(value)
-                    if m:
-                        type = m.group(1)
-                        value = m.group(2).strip()
-            elif value is not None:
-                value = json.dumps(value)
+        type = data.get('type')
+        value = data.get('value')
+        if isinstance(value, six.string_types):
+            if type is None:
+                m = _type_value_re.match(value)
+                if m:
+                    type = m.group(1)
+                    value = m.group(2).strip()
+        elif value is not None:
+            value = json.dumps(value)
 
-            value = trim(value, 4096)
+        value = trim(value, 4096)
 
         if data.get('mechanism'):
-            mechanism = Mechanism.to_python(data['mechanism'],
-                                            rust_renormalized=rust_renormalized)
+            mechanism = Mechanism.to_python(data['mechanism'])
         else:
             mechanism = None
 
@@ -1008,37 +1000,31 @@ class Exception(Interface):
         return len(self._values())
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=False):
-        if not rust_renormalized:
-            if data and 'values' not in data and 'exc_omitted' not in data:
-                data = {"values": [data]}
+    def to_python(cls, data):
+        if data and 'values' not in data and 'exc_omitted' not in data:
+            data = {"values": [data]}
 
-            values = get_path(data, 'values', default=[])
-            if not isinstance(values, list):
-                raise InterfaceValidationError("Invalid value for 'values'")
+        values = get_path(data, 'values', default=[])
+        if not isinstance(values, list):
+            raise InterfaceValidationError("Invalid value for 'values'")
 
         kwargs = {
             'values': [
-                v and SingleException.to_python(
-                    v, slim_frames=False, rust_renormalized=rust_renormalized)
+                v and SingleException.to_python(v, slim_frames=False)
                 for v in values
             ],
         }
 
-        if not rust_renormalized:
-            if data.get('exc_omitted'):
-                if len(data['exc_omitted']) != 2:
-                    raise InterfaceValidationError("Invalid value for 'exc_omitted'")
-                kwargs['exc_omitted'] = data['exc_omitted']
-            else:
-                kwargs['exc_omitted'] = None
+        if data.get('exc_omitted'):
+            if len(data['exc_omitted']) != 2:
+                raise InterfaceValidationError("Invalid value for 'exc_omitted'")
+            kwargs['exc_omitted'] = data['exc_omitted']
+        else:
+            kwargs['exc_omitted'] = None
 
         instance = cls(**kwargs)
-
-        if not rust_renormalized:
-            # we want to wait to slim things til we've reconciled in_app
-            slim_exception_data(instance)
-
+        # we want to wait to slim things til we've reconciled in_app
+        slim_exception_data(instance)
         return instance
 
     # TODO(ja): Fix all following methods when to_python is refactored. All
diff --git a/src/sentry/interfaces/geo.py b/src/sentry/interfaces/geo.py
index a4286986ab..a9a7c92922 100644
--- a/src/sentry/interfaces/geo.py
+++ b/src/sentry/interfaces/geo.py
@@ -20,15 +20,14 @@ class Geo(Interface):
     """
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=False):
-        if not rust_renormalized:
-            data = {
-                'country_code': data.get('country_code'),
-                'city': data.get('city'),
-                'region': data.get('region'),
-            }
-
-        return cls(**data)
+    def to_python(cls, data):
+        kwargs = {
+            'country_code': data.get('country_code'),
+            'city': data.get('city'),
+            'region': data.get('region'),
+        }
+
+        return cls(**kwargs)
 
     @classmethod
     def from_ip_address(cls, ip_address):
diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index 25a5a9fa5c..c16dd672a0 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -124,10 +124,7 @@ class Http(Interface):
     FORM_TYPE = 'application/x-www-form-urlencoded'
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=False):
-        if rust_renormalized:
-            return cls(**data)
-
+    def to_python(cls, data):
         is_valid, errors = validate_and_default_interface(data, cls.path)
         if not is_valid:
             raise InterfaceValidationError("Invalid interface data")
diff --git a/src/sentry/interfaces/message.py b/src/sentry/interfaces/message.py
index 706415e813..9ffbf69759 100644
--- a/src/sentry/interfaces/message.py
+++ b/src/sentry/interfaces/message.py
@@ -48,10 +48,7 @@ class Message(Interface):
     external_type = 'message'
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=False):
-        if rust_renormalized:
-            return cls(**data)
-
+    def to_python(cls, data):
         formatted = stringify(data.get('formatted'))
         message = stringify(data.get('message'))
         if formatted is None and message is None:
diff --git a/src/sentry/interfaces/sdk.py b/src/sentry/interfaces/sdk.py
index 4b714cdd04..b900918336 100644
--- a/src/sentry/interfaces/sdk.py
+++ b/src/sentry/interfaces/sdk.py
@@ -50,10 +50,7 @@ class Sdk(Interface):
     """
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=False):
-        if rust_renormalized:
-            return cls(**data)
-
+    def to_python(cls, data):
         name = data.get('name')
         version = data.get('version')
 
diff --git a/src/sentry/interfaces/security.py b/src/sentry/interfaces/security.py
index ebca26cd14..80043c661e 100644
--- a/src/sentry/interfaces/security.py
+++ b/src/sentry/interfaces/security.py
@@ -100,11 +100,10 @@ class SecurityReport(Interface):
         raise NotImplementedError
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=False):
-        if not rust_renormalized:
-            is_valid, errors = validate_and_default_interface(data, cls.path)
-            if not is_valid:
-                raise InterfaceValidationError("Invalid interface data")
+    def to_python(cls, data):
+        is_valid, errors = validate_and_default_interface(data, cls.path)
+        if not is_valid:
+            raise InterfaceValidationError("Invalid interface data")
 
         return cls(**data)
 
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 098ed82cbb..6c1db1513f 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -316,10 +316,7 @@ def is_recursion(frame1, frame2):
 class Frame(Interface):
 
     @classmethod
-    def to_python(cls, data, raw=False, rust_renormalized=False):
-        if rust_renormalized:
-            return cls(**data)
-
+    def to_python(cls, data, raw=False):
         is_valid, errors = validate_and_default_interface(data, cls.path)
         if not is_valid:
             raise InterfaceValidationError("Invalid stack frame data.")
@@ -752,21 +749,7 @@ class Stacktrace(Interface):
         return iter(self.frames)
 
     @classmethod
-    def to_python(cls, data, slim_frames=True, raw=False, rust_renormalized=False):
-        if rust_renormalized:
-            data = dict(data)
-            frame_list = []
-            for f in data.get('frames') or []:
-                # XXX(dcramer): handle PHP sending an empty array for a frame
-                frame_list.append(
-                    Frame.to_python(
-                        f or {},
-                        raw=raw,
-                        rust_renormalized=rust_renormalized))
-
-            data['frames'] = frame_list
-            return cls(**data)
-
+    def to_python(cls, data, slim_frames=True, raw=False):
         is_valid, errors = validate_and_default_interface(data, cls.path)
         if not is_valid:
             raise InterfaceValidationError("Invalid stack frame data.")
@@ -784,11 +767,7 @@ class Stacktrace(Interface):
             if f is None:
                 continue
             # XXX(dcramer): handle PHP sending an empty array for a frame
-            frame_list.append(
-                Frame.to_python(
-                    f or {},
-                    raw=raw,
-                    rust_renormalized=rust_renormalized))
+            frame_list.append(Frame.to_python(f or {}, raw=raw))
 
         kwargs = {
             'frames': frame_list,
diff --git a/src/sentry/interfaces/template.py b/src/sentry/interfaces/template.py
index 63f9b5df2c..5c8e21a949 100644
--- a/src/sentry/interfaces/template.py
+++ b/src/sentry/interfaces/template.py
@@ -42,10 +42,7 @@ class Template(Interface):
     score = 1100
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=False):
-        if rust_renormalized:
-            return cls(**data)
-
+    def to_python(cls, data):
         is_valid, errors = validate_and_default_interface(data, cls.path)
         if not is_valid:
             raise InterfaceValidationError("Invalid template")
diff --git a/src/sentry/interfaces/threads.py b/src/sentry/interfaces/threads.py
index cb9589fd5e..8500113cf0 100644
--- a/src/sentry/interfaces/threads.py
+++ b/src/sentry/interfaces/threads.py
@@ -7,7 +7,7 @@ from sentry.utils.safe import trim
 __all__ = ('Threads', )
 
 
-def get_stacktrace(value, raw=False, rust_renormalized=False):
+def get_stacktrace(value, raw=False):
     # Special case: if the thread has no frames we set the
     # stacktrace to none.  Otherwise this will fail really
     # badly.
@@ -19,18 +19,16 @@ class Threads(Interface):
     score = 1900
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=False):
+    def to_python(cls, data):
         threads = []
 
         for thread in data.get('values') or ():
             if thread is None:
-                # XXX(markus): We should handle this in the UI and other
-                # consumers of this interface
                 continue
             threads.append(
                 {
-                    'stacktrace': get_stacktrace(thread.get('stacktrace'), rust_renormalized=rust_renormalized),
-                    'raw_stacktrace': get_stacktrace(thread.get('raw_stacktrace'), raw=True, rust_renormalized=rust_renormalized),
+                    'stacktrace': get_stacktrace(thread.get('stacktrace')),
+                    'raw_stacktrace': get_stacktrace(thread.get('raw_stacktrace'), raw=True),
                     'id': trim(thread.get('id'), 40),
                     'crashed': bool(thread.get('crashed')),
                     'current': bool(thread.get('current')),
diff --git a/src/sentry/interfaces/user.py b/src/sentry/interfaces/user.py
index c1ffd15b1d..df3fdc2166 100644
--- a/src/sentry/interfaces/user.py
+++ b/src/sentry/interfaces/user.py
@@ -41,9 +41,7 @@ class User(Interface):
     display_score = 2020
 
     @classmethod
-    def to_python(cls, data, rust_renormalized=False):
-        if rust_renormalized:
-            return cls(**data)
+    def to_python(cls, data):
         data = data.copy()
 
         ident = data.pop('id', None)
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index fa3f61f201..a86421597b 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -17,9 +17,7 @@ from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 from hashlib import md5
 
-from semaphore.processing import StoreNormalizer
-
-from sentry import eventtypes, options
+from sentry import eventtypes
 from sentry.constants import EVENT_ORDERING_KEY
 from sentry.db.models import (
     BoundedBigIntegerField,
@@ -30,34 +28,12 @@ from sentry.db.models import (
 )
 from sentry.db.models.manager import EventManager
 from sentry.interfaces.base import get_interfaces
-from sentry.utils import metrics
 from sentry.utils.cache import memoize
 from sentry.utils.canonical import CanonicalKeyDict, CanonicalKeyView
 from sentry.utils.safe import get_path
 from sentry.utils.strings import truncatechars
 
 
-def _should_skip_to_python(node_id):
-    if not node_id:
-        return False
-
-    sample_rate = options.get('store.empty-interface-sample-rate')
-    return int(md5(node_id).hexdigest(), 16) % (10 ** 8) <= (sample_rate * (10 ** 8))
-
-
-class EventDict(CanonicalKeyDict):
-    def __init__(self, data, **kwargs):
-        rust_renormalized = _should_skip_to_python(kwargs.pop('node_id', None))
-        if rust_renormalized:
-            normalizer = StoreNormalizer(is_renormalize=True)
-            data = normalizer.normalize_event(dict(data))
-
-        metrics.incr('rust.renormalized',
-                     tags={'value': rust_renormalized})
-        self._rust_renormalized = rust_renormalized
-        CanonicalKeyDict.__init__(self, data, **kwargs)
-
-
 class Event(Model):
     """
     An individual event.
@@ -76,8 +52,7 @@ class Event(Model):
         null=True,
         ref_func=lambda x: x.project_id or x.project.id,
         ref_version=2,
-        wrapper=EventDict,
-        pass_node_id_to_wrapper=True
+        wrapper=CanonicalKeyDict,
     )
 
     objects = EventManager()
@@ -237,8 +212,7 @@ class Event(Model):
         return None
 
     def get_interfaces(self):
-        return CanonicalKeyView(get_interfaces(
-            self.data, rust_renormalized=self.data.data._rust_renormalized))
+        return CanonicalKeyView(get_interfaces(self.data))
 
     @memoize
     def interfaces(self):
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 8b44c041c6..009d78cc34 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -503,7 +503,8 @@ class Fixtures(object):
             }
 
         if normalize:
-            manager = EventManager(CanonicalKeyDict(kwargs['data']))
+            manager = EventManager(CanonicalKeyDict(kwargs['data']),
+                                   for_store=False)
             manager.normalize()
             kwargs['data'] = manager.get_data()
             kwargs['data'].update(manager.materialize_metadata())
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index 8a97843b54..d06416cb3a 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-import pytest
 import mock
 import os
 
@@ -259,8 +258,3 @@ def pytest_runtest_teardown(item):
     from sentry.models import OrganizationOption, ProjectOption, UserOption
     for model in (OrganizationOption, ProjectOption, UserOption):
         model.objects.clear_local_cache()
-
-
-@pytest.fixture(autouse=True)
-def _never_skip_to_python(monkeypatch):
-    monkeypatch.setattr('sentry.models.event._should_skip_to_python', lambda _: False)
diff --git a/src/sentry/utils/samples.py b/src/sentry/utils/samples.py
index ed0eeef219..01b7169e0b 100644
--- a/src/sentry/utils/samples.py
+++ b/src/sentry/utils/samples.py
@@ -202,8 +202,4 @@ def create_sample_event(project, platform=None, default=None,
 
     manager = EventManager(data)
     manager.normalize()
-    event = manager.save(project.id, raw=raw)
-    # Prevent Percy screenshot from constantly changing
-    event.datetime = datetime(2017, 9, 6, 0, 0)
-    event.save()
-    return event
+    return manager.save(project.id, raw=raw)
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index 7b8a34c099..bc00e2e571 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -198,7 +198,7 @@ class SentryRemoteTest(TestCase):
         assert instance.message == 'hello'
         assert instance.data['logentry'] == {'formatted': 'hello'}
         assert instance.title == instance.data['title'] == 'hello'
-        assert instance.location is instance.data.get('location', None) is None
+        assert instance.location is instance.data['location'] is None
 
         assert tagstore.get_tag_key(self.project.id, None, 'foo') is not None
         assert tagstore.get_tag_value(self.project.id, None, 'foo', 'bar') is not None
