commit c1944e00876053e4e96d330752cb29bf13474a10
Author: David Cramer <dcramer@gmail.com>
Date:   Mon May 18 01:57:42 2015 -0700

    Add integrations to notifications settings

diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index dc3929aaa4..9a0d64c517 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -119,6 +119,9 @@ class NotificationPlugin(Plugin):
         event = create_sample_event(project, default='python')
         return self.notify_users(event.group, event, fail_silently=False)
 
+    def get_notification_doc_html(self, **kwargs):
+        return ""
+
 
 # Backwards-compatibility
 NotifyConfigurationForm = NotificationConfigurationForm
diff --git a/src/sentry/templates/sentry/project-notifications.html b/src/sentry/templates/sentry/project-notifications.html
new file mode 100644
index 0000000000..181d3ad7a4
--- /dev/null
+++ b/src/sentry/templates/sentry/project-notifications.html
@@ -0,0 +1,92 @@
+{% extends "sentry/projects/manage.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+{% load sentry_helpers %}
+{% load sentry_plugins %}
+
+{% block title %}{% trans "Notifications" %} | {{ block.super }}{% endblock %}
+
+{% block inner %}
+    <div class="page-header">
+        <h2>{% trans "Notifications" %}</h2>
+    </div>
+    <form action="." method="POST" class="form-stacked">
+        {% csrf_token %}
+        <input type="hidden" name="op" value="save-settings" />
+
+        <fieldset>
+          <legend>{% trans "Rules" %}</legend>
+
+          {% url 'sentry-project-rules' organization.slug project.slug as link %}
+          <p>{% blocktrans %}Sentry will notify you based on the <a href="{{ link }}">rules configured for this project</a>.{% endblocktrans %}</p>
+        </fieldset>
+
+        <fieldset>
+          <legend>{% trans "General" %}</legend>
+
+          {{ general_form|as_crispy_errors }}
+
+          {% for field in general_form %}
+              {{ field|as_crispy_field }}
+          {% endfor %}
+        </fieldset>
+
+        <fieldset>
+          <legend>{% trans "Alerts" %}</legend>
+
+          <p>{% blocktrans %}Alerts are triggered when the rate of events for the entire project increase by a relative amount. Values represent a 60-second interval.{% endblocktrans %}</p>
+
+          {{ alert_form|as_crispy_errors }}
+
+          {% for field in alert_form %}
+              {{ field|as_crispy_field }}
+          {% endfor %}
+        </fieldset>
+
+        <fieldset class="form-actions">
+            <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
+        </fieldset>
+    </form>
+
+    {% for plugin, content in enabled_plugins %}
+      <div class="integration-settings">
+        <div class="page-header">
+          <h3>{{ plugin.get_title }}</h3>
+          {% if plugin.can_disable %}
+            <form method="POST">
+              {% csrf_token %}
+              <input type="hidden" name="plugin" value="{{ plugin.slug }}" />
+              <button type="submit" class="btn btn-small btn-default" name="op" value="disable">Disable</button>
+            </form>
+          {% endif %}
+        </div>
+        {{ content }}
+      </div>
+    {% endfor %}
+
+    {% if other_plugins %}
+      <div class="integration-settings">
+        <div class="page-header">
+          <h3>Inactive Integrations</h3>
+        </div>
+
+        <ul class="integration-list unstyled">
+          {% for plugin in other_plugins %}
+            <li>
+              <form method="POST">
+                {% csrf_token %}
+                <input type="hidden" name="op" value="enable" />
+                <input type="hidden" name="plugin" value="{{ plugin.slug }}" />
+                <button type="submit">{{ plugin.get_title }}</button>
+              </form>
+            </li>
+          {% endfor %}
+        </ul>
+      </div>
+    {% endif %}
+    <script type="text/javascript">
+    new app.ProjectNotificationsPage();
+    </script>
+{% endblock %}
+
diff --git a/src/sentry/templates/sentry/projects/notifications.html b/src/sentry/templates/sentry/projects/notifications.html
deleted file mode 100644
index 5942dce966..0000000000
--- a/src/sentry/templates/sentry/projects/notifications.html
+++ /dev/null
@@ -1,53 +0,0 @@
-{% extends "sentry/projects/manage.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Notifications" %} | {{ block.super }}{% endblock %}
-
-{% block inner %}
-    <div class="page-header">
-        <h2>{% trans "Notifications" %}</h2>
-    </div>
-    <form action="" method="post" class="form-stacked">
-        {% csrf_token %}
-
-        <div class="page-header">
-            <h3>{% trans "Events" %}</h3>
-        </div>
-
-        {% url 'sentry-project-rules' organization.slug project.slug as link %}
-        <p>{% blocktrans %}Sentry will notify you based on the <a href="{{ link }}">rules configured for this project</a>.{% endblocktrans %}</p>
-
-        <div class="page-header">
-            <h3>{% trans "General" %}</h3>
-        </div>
-
-        {{ general_form|as_crispy_errors }}
-
-        {% for field in general_form %}
-            {{ field|as_crispy_field }}
-        {% endfor %}
-
-        <div class="page-header">
-            <h3>{% trans "Alerts" %}</h3>
-        </div>
-
-        <p>{% blocktrans %}Alerts are triggered when the rate of events for the entire project increase by a relative amount. Values represent a 60-second interval.{% endblocktrans %}</p>
-
-        {{ alert_form|as_crispy_errors }}
-
-        {% for field in alert_form %}
-            {{ field|as_crispy_field }}
-        {% endfor %}
-
-        <fieldset class="form-actions">
-            <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
-        </fieldset>
-    </form>
-    <script type="text/javascript">
-    new app.ProjectNotificationsPage();
-    </script>
-{% endblock %}
-
diff --git a/src/sentry/web/frontend/project_notifications.py b/src/sentry/web/frontend/project_notifications.py
new file mode 100644
index 0000000000..ab28b26208
--- /dev/null
+++ b/src/sentry/web/frontend/project_notifications.py
@@ -0,0 +1,129 @@
+from __future__ import absolute_import
+
+from django.conf import settings
+from django.contrib import messages
+from django.http import HttpResponseRedirect
+from django.utils.safestring import mark_safe
+from django.utils.translation import ugettext_lazy as _
+
+from sentry import constants
+from sentry.models import OrganizationMemberType
+from sentry.plugins import plugins, NotificationPlugin
+from sentry.web.forms.projects import (
+    AlertSettingsForm, NotificationSettingsForm
+)
+from sentry.web.frontend.base import ProjectView
+from sentry.web.helpers import plugin_config
+
+OK_SETTINGS_SAVED = _('Your settings were saved successfully.')
+
+
+class ProjectNotificationsView(ProjectView):
+    required_access = OrganizationMemberType.ADMIN
+
+    def _iter_plugins(self):
+        for plugin in plugins.all(version=1):
+            if not isinstance(plugin, NotificationPlugin):
+                continue
+            yield plugin
+
+    def _handle_enable_plugin(self, request, project):
+        plugin = plugins.get(request.POST['plugin'])
+        plugin.set_option('enabled', True, project)
+        messages.add_message(
+            request, messages.SUCCESS,
+            constants.OK_PLUGIN_ENABLED.format(name=plugin.get_title()),
+        )
+
+    def _handle_disable_plugin(self, request, project):
+        plugin = plugins.get(request.POST['plugin'])
+        plugin.set_option('enabled', False, project)
+        messages.add_message(
+            request, messages.SUCCESS,
+            constants.OK_PLUGIN_DISABLED.format(name=plugin.get_title()),
+        )
+
+    def handle(self, request, organization, team, project):
+        threshold, min_events = project.get_option(
+            'alert:threshold', constants.DEFAULT_ALERT_PROJECT_THRESHOLD)
+
+        op = request.POST.get('op')
+        if op == 'enable':
+            self._handle_enable_plugin(request, project)
+            return HttpResponseRedirect(request.path)
+        elif op == 'disable':
+            self._handle_disable_plugin(request, project)
+            return HttpResponseRedirect(request.path)
+
+        if op == 'save-settings':
+            general_form = NotificationSettingsForm(
+                data=request.POST,
+                prefix='general',
+                initial={
+                    'subject_prefix': project.get_option(
+                        'mail:subject_prefix', settings.EMAIL_SUBJECT_PREFIX),
+                },
+            )
+            alert_form = AlertSettingsForm(
+                data=request.POST,
+                prefix='alert',
+                initial={
+                    'pct_threshold': threshold,
+                    'min_events': min_events,
+                }
+            )
+            if all(f.is_valid() for f in [general_form, alert_form]):
+                project.update_option('alert:threshold', (
+                    alert_form.cleaned_data['pct_threshold'], alert_form.cleaned_data['min_events']))
+                project.update_option(
+                    'mail:subject_prefix', general_form.cleaned_data['subject_prefix'])
+                messages.add_message(
+                    request, messages.SUCCESS,
+                    OK_SETTINGS_SAVED)
+                return HttpResponseRedirect(request.path)
+        else:
+            general_form = NotificationSettingsForm(
+                prefix='general',
+                initial={
+                    'subject_prefix': project.get_option(
+                        'mail:subject_prefix', settings.EMAIL_SUBJECT_PREFIX),
+                },
+            )
+            alert_form = AlertSettingsForm(
+                prefix='alert',
+                initial={
+                    'pct_threshold': threshold,
+                    'min_events': min_events,
+                }
+            )
+
+        enabled_plugins = []
+        other_plugins = []
+        for plugin in self._iter_plugins():
+            if plugin.is_enabled(project):
+                content = plugin.get_notification_doc_html()
+
+                form = plugin.project_conf_form
+                if form is not None:
+                    action, view = plugin_config(plugin, project, request)
+                    if action == 'redirect':
+                        messages.add_message(
+                            request, messages.SUCCESS,
+                            constants.OK_PLUGIN_SAVED.format(name=plugin.get_title()),
+                        )
+                        return HttpResponseRedirect(request.path)
+                    enabled_plugins.append((plugin, mark_safe(content + view)))
+                elif content:
+                    enabled_plugins.append((plugin, mark_safe(content)))
+            else:
+                other_plugins.append(plugin)
+
+        context = {
+            'page': 'notifications',
+            'enabled_plugins': enabled_plugins,
+            'other_plugins': other_plugins,
+            'general_form': general_form,
+            'alert_form': alert_form
+        }
+
+        return self.respond('sentry/project-notifications.html', context)
diff --git a/src/sentry/web/frontend/projects/notifications.py b/src/sentry/web/frontend/projects/notifications.py
deleted file mode 100644
index cf7faa091e..0000000000
--- a/src/sentry/web/frontend/projects/notifications.py
+++ /dev/null
@@ -1,76 +0,0 @@
-"""
-sentry.web.frontend.projects.notifications
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-from django.conf import settings
-from django.contrib import messages
-from django.core.context_processors import csrf
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
-from django.views.decorators.csrf import csrf_protect
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.constants import MEMBER_ADMIN, DEFAULT_ALERT_PROJECT_THRESHOLD
-from sentry.web.decorators import has_access
-from sentry.web.forms.projects import (
-    AlertSettingsForm, NotificationSettingsForm
-)
-from sentry.web.helpers import render_to_response
-
-
-@has_access(MEMBER_ADMIN)
-@csrf_protect
-def notification_settings(request, organization, project):
-    general_form = NotificationSettingsForm(
-        data=request.POST or None,
-        prefix='general',
-        initial={
-            'subject_prefix': project.get_option(
-                'mail:subject_prefix', settings.EMAIL_SUBJECT_PREFIX),
-        },
-    )
-
-    threshold, min_events = project.get_option(
-        'alert:threshold', DEFAULT_ALERT_PROJECT_THRESHOLD)
-
-    alert_form = AlertSettingsForm(
-        data=request.POST or None,
-        prefix='alert',
-        initial={
-            'pct_threshold': threshold,
-            'min_events': min_events,
-        }
-    )
-
-    all_forms = [
-        alert_form,
-        general_form,
-    ]
-
-    if request.method == 'POST' and all(f.is_valid() for f in all_forms):
-        project.update_option('alert:threshold', (
-            alert_form.cleaned_data['pct_threshold'], alert_form.cleaned_data['min_events']))
-        project.update_option(
-            'mail:subject_prefix', general_form.cleaned_data['subject_prefix'])
-
-        messages.add_message(
-            request, messages.SUCCESS,
-            _('Your settings were saved successfully.'))
-
-        return HttpResponseRedirect(reverse('sentry-project-notifications', args=[project.organization.slug, project.slug]))
-
-    context = csrf(request)
-    context.update({
-        'organization': organization,
-        'team': project.team,
-        'project': project,
-        'general_form': general_form,
-        'alert_form': alert_form,
-        'page': 'notifications',
-    })
-    return render_to_response('sentry/projects/notifications.html', context, request)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index fd822d143c..1efcc44683 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -23,7 +23,6 @@ from sentry.web.frontend import (
 
 import sentry.web.frontend.projects.general
 import sentry.web.frontend.projects.keys
-import sentry.web.frontend.projects.notifications
 import sentry.web.frontend.projects.plugins
 import sentry.web.frontend.projects.quotas
 import sentry.web.frontend.projects.rules
@@ -58,6 +57,7 @@ from sentry.web.frontend.create_organization_member import CreateOrganizationMem
 from sentry.web.frontend.create_project import CreateProjectView
 from sentry.web.frontend.create_team import CreateTeamView
 from sentry.web.frontend.project_issue_tracking import ProjectIssueTrackingView
+from sentry.web.frontend.project_notifications import ProjectNotificationsView
 from sentry.web.frontend.project_release_tracking import ProjectReleaseTrackingView
 from sentry.web.frontend.project_settings import ProjectSettingsView
 from sentry.web.frontend.release_webhook import ReleaseWebhookView
@@ -295,8 +295,8 @@ urlpatterns += patterns('',
         sentry.web.frontend.projects.quotas.manage_project_quotas,
         name='sentry-manage-project-quotas'),
 
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/notifications/$',
-        sentry.web.frontend.projects.notifications.notification_settings,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/notifications/$',
+        ProjectNotificationsView.as_view(),
         name='sentry-project-notifications'),
 
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/rules/$',
diff --git a/tests/sentry/web/frontend/test_project_notifications.py b/tests/sentry/web/frontend/test_project_notifications.py
new file mode 100644
index 0000000000..24c0bb0747
--- /dev/null
+++ b/tests/sentry/web/frontend/test_project_notifications.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from exam import fixture
+
+from sentry.testutils import TestCase
+
+
+class ProjectNotificationsTest(TestCase):
+    def setUp(self):
+        super(ProjectNotificationsTest, self).setUp()
+        self.organization = self.create_organization()
+        self.team = self.create_team(organization=self.organization)
+        self.project = self.create_project(team=self.team)
+
+    @fixture
+    def path(self):
+        return reverse('sentry-project-notifications', args=[
+            self.organization.slug, self.project.slug,
+        ])
+
+    def test_renders_with_context(self):
+        self.login_as(self.organization.owner)
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/project-notifications.html')
+        assert resp.context['project'] == self.project
