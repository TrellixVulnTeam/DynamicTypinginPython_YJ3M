commit 23d346fa5a07adfcdd2e179119a277de7700f5aa
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Jun 20 20:38:10 2017 +0200

    Added a missing test for dsym listing

diff --git a/src/sentry/api/serializers/models/dsym_file.py b/src/sentry/api/serializers/models/dsym_file.py
index d37c087be9..bd804cfdec 100644
--- a/src/sentry/api/serializers/models/dsym_file.py
+++ b/src/sentry/api/serializers/models/dsym_file.py
@@ -4,7 +4,7 @@ import six
 
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.models import (
-    ProjectDSymFile, VersionDSymFile, DSymApp
+    ProjectDSymFile, VersionDSymFile, DSymApp, DSYM_PLATFORMS_REVERSE
 )
 
 
@@ -47,6 +47,9 @@ class DSymAppSerializer(Serializer):
             'iconUrl': obj.data.get('icon_url', None),
             'appId': six.text_type(obj.app_id),
             'name': obj.data.get('name', None),
+            'platform': DSYM_PLATFORMS_REVERSE.get(obj.platform) or 'unknown',
+            # XXX: this should be renamed.  It's currently only used in
+            # the not yet merged itunes connect plugin (ios, tvos etc.)
             'platforms': ', '.join(obj.data.get('platforms', [])),
             'lastSync': obj.last_synced,
         }
diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index cb64676c2c..f409c1a9f9 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -71,6 +71,8 @@ DSYM_PLATFORMS = {
     'apple': DSymPlatform.APPLE,
     'android': DSymPlatform.ANDROID,
 }
+DSYM_PLATFORMS_REVERSE = dict(
+    (v, k) for (k, v) in six.iteritems(DSYM_PLATFORMS))
 
 
 def _auto_enrich_data(data, app_id, platform):
diff --git a/tests/sentry/api/endpoints/test_dsym_files.py b/tests/sentry/api/endpoints/test_dsym_files.py
index 40c2847f3a..27dcf7098b 100644
--- a/tests/sentry/api/endpoints/test_dsym_files.py
+++ b/tests/sentry/api/endpoints/test_dsym_files.py
@@ -109,3 +109,71 @@ class DSymFilesUploadTest(APITestCase):
         assert vdf.build == '1'
         assert vdf.dsym_app.app_id == 'com.example.myapp'
         assert vdf.dsym_file.uuid == PROGUARD_UUID
+
+    def test_list_dsyms(self):
+        project = self.create_project(name='foo')
+
+        url = reverse('sentry-api-0-dsym-files', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+
+        self.login_as(user=self.user)
+
+        out = BytesIO()
+        f = zipfile.ZipFile(out, 'w')
+        f.writestr('proguard/%s.txt' % PROGUARD_UUID, PROGUARD_SOURCE)
+        f.close()
+
+        response = self.client.post(url, {
+            'file': SimpleUploadedFile('symbols.zip', out.getvalue(),
+                                       content_type='application/zip'),
+        }, format='multipart')
+
+        assert response.status_code == 201, response.content
+        assert len(response.data) == 1
+
+        url = reverse('sentry-api-0-associate-dsym-files', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+
+        response = self.client.post(url, {
+            'checksums': ['e6d3c5185dac63eddfdc1a5edfffa32d46103b44'],
+            'platform': 'android',
+            'name': 'MyApp',
+            'appId': 'com.example.myapp',
+            'version': '1.0',
+            'build': '1',
+        }, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data['associatedDsymFiles'][0]['uuid'] == PROGUARD_UUID
+
+        url = reverse('sentry-api-0-dsym-files', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+
+        response = self.client.get(url)
+
+        assert response.status_code == 200, response.content
+
+        app, = response.data['apps']
+        assert app['appId'] == 'com.example.myapp'
+        assert app['iconUrl'] is None
+        assert app['name'] == 'MyApp'
+        assert app['platform'] == 'android'
+
+        dsym, = response.data['debugSymbols']
+        assert dsym['build'] == '1'
+        assert dsym['version'] == '1.0'
+        assert dsym['dsym']['cpuName'] == 'any'
+        assert dsym['dsym']['headers'] == {'Content-Type': 'text/x-proguard+plain'}
+        assert dsym['dsym']['objectName'] == 'proguard-mapping'
+        assert dsym['dsym']['sha1'] == 'e6d3c5185dac63eddfdc1a5edfffa32d46103b44'
+        assert dsym['dsym']['symbolType'] == 'proguard'
+        assert dsym['dsym']['uuid'] == '6dc7fdb0-d2fb-4c8e-9d6b-bb1aa98929b1'
+
+        assert response.data['unreferencedDebugSymbols'] == []
