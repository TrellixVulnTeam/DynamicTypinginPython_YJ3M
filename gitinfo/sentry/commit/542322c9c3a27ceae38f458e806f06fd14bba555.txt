commit 542322c9c3a27ceae38f458e806f06fd14bba555
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Jun 20 10:32:30 2019 -0700

    ref Added error checking at events v2  (#13733)
    
    * Added error checking at events v2 get.
    
    * removed test for invalid param. since it passes ok.

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index 0d1a2e5776..bc33872bd4 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -26,7 +26,7 @@ from sentry import features
 from sentry.models.project import Project
 
 ALLOWED_GROUPINGS = frozenset(('issue.id', 'project.id'))
-logger = logging.getLogger('sentry.api.organization-events')
+logger = logging.getLogger(__name__)
 
 
 class OrganizationEventsEndpoint(OrganizationEventsEndpointBase):
@@ -117,12 +117,25 @@ class OrganizationEventsEndpoint(OrganizationEventsEndpointBase):
             **snuba_args
         )
 
-        return self.paginate(
-            request=request,
-            paginator=GenericOffsetPaginator(data_fn=data_fn),
-            on_results=lambda results: self.handle_results(
-                request, organization, params['project_id'], results),
-        )
+        try:
+            return self.paginate(
+                request=request,
+                paginator=GenericOffsetPaginator(data_fn=data_fn),
+                on_results=lambda results: self.handle_results(
+                    request, organization, params['project_id'], results),
+            )
+        except SnubaError as error:
+            logger.info(
+                'organization.events.snuba-error',
+                extra={
+                    'organization_id': organization.id,
+                    'user_id': request.user.id,
+                    'error': six.text_type(error),
+                }
+            )
+            return Response({
+                'detail': 'Invalid query.'
+            }, status=400)
 
     def handle_results(self, request, organization, project_ids, results):
         projects = {p['id']: p['slug'] for p in Project.objects.filter(
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 3435a7e695..8651cb5dea 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -545,6 +545,55 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
         assert response.status_code == 400, response.content
         assert response.data['detail'] == 'Invalid groupby value requested. Allowed values are project.id, issue.id'
 
+    def test_non_aggregated_fields_with_groupby(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        self.store_event(
+            data={
+                'event_id': 'a' * 32,
+                'message': 'how to make fast',
+                'timestamp': self.min_ago,
+            },
+            project_id=project.id
+        )
+
+        with self.feature('organizations:events-v2'):
+            response = self.client.get(
+                self.url,
+                format='json',
+                data={
+                    'field': ['project.id'],
+                    'groupby': ['issue.id'],
+                },
+            )
+        assert response.status_code == 400, response.content
+        assert response.data['detail'] == 'Invalid query.'
+
+    def test_nonexistent_fields(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        self.store_event(
+            data={
+                'event_id': 'a' * 32,
+                'message': 'how to make fast',
+                'timestamp': self.min_ago,
+            },
+            project_id=project.id
+        )
+
+        with self.feature('organizations:events-v2'):
+            response = self.client.get(
+                self.url,
+                format='json',
+                data={
+                    'field': ['issue_world.id'],
+                },
+            )
+        assert response.status_code == 200, response.content
+        assert response.data == [{u'issue_world.id': u''}]
+
     def test_no_requested_fields_or_grouping(self):
         self.login_as(user=self.user)
 
