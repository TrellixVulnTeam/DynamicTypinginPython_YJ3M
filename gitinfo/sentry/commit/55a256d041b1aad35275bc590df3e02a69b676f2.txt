commit 55a256d041b1aad35275bc590df3e02a69b676f2
Author: evanh <evanh@users.noreply.github.com>
Date:   Mon Jan 27 16:07:23 2020 -0500

    fix(user_options) Deprecate alert_email user option (#16497)
    
    There is no place to update this option through the frontend, but there are
    still a few users kicking around with this value set. We're going to send an
    email to them, and then deploy this change to default to the primary email
    address instead.

diff --git a/src/sentry/api/endpoints/user_emails.py b/src/sentry/api/endpoints/user_emails.py
index b60ccb82e6..67ad3b3d1f 100644
--- a/src/sentry/api/endpoints/user_emails.py
+++ b/src/sentry/api/endpoints/user_emails.py
@@ -158,11 +158,6 @@ class UserEmailsEndpoint(UserEndpoint):
                 status=400,
             )
 
-        # update notification settings for those set to primary email with new primary email
-        alert_email = UserOption.objects.get_value(user=user, key="alert_email")
-        if alert_email == old_email:
-            UserOption.objects.set_value(user=user, key="alert_email", value=new_email)
-
         options = UserOption.objects.filter(user=user, key="mail:email")
         for option in options:
             if option.value != old_email:
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index 2ddb4faa9f..46f8e92903 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -169,12 +169,6 @@ def get_email_addresses(user_ids, project=None):
             results[option.user_id] = option.value
             pending.discard(option.user_id)
 
-    if pending:
-        queryset = UserOption.objects.filter(user__in=pending, key="alert_email")
-        for option in (o for o in queryset if o.value and not is_fake_email(o.value)):
-            results[option.user_id] = option.value
-            pending.discard(option.user_id)
-
     if pending:
         queryset = User.objects.filter(pk__in=pending, is_active=True)
         for (user_id, email) in queryset.values_list("id", "email"):
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index f4bce99998..96cb3d44c7 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -587,12 +587,6 @@ class NotificationDeploySettingsForm(forms.Form):
 
 
 class NotificationSettingsForm(forms.Form):
-    alert_email = AllowedEmailField(
-        label=_("Email"),
-        help_text=_("Designate an alternative email address to send email notifications to."),
-        required=False,
-    )
-
     subscribe_by_default = forms.BooleanField(
         label=_("Automatically subscribe to alerts for new projects"),
         help_text=_(
@@ -637,9 +631,6 @@ class NotificationSettingsForm(forms.Form):
         self.user = user
         super(NotificationSettingsForm, self).__init__(*args, **kwargs)
 
-        self.fields["alert_email"].initial = UserOption.objects.get_value(
-            user=self.user, key="alert_email", default=user.email
-        )
         self.fields["subscribe_by_default"].initial = (
             UserOption.objects.get_value(user=self.user, key="subscribe_by_default", default="1")
             == "1"
@@ -666,10 +657,6 @@ class NotificationSettingsForm(forms.Form):
         return "General"
 
     def save(self):
-        UserOption.objects.set_value(
-            user=self.user, key="alert_email", value=self.cleaned_data["alert_email"]
-        )
-
         UserOption.objects.set_value(
             user=self.user,
             key="subscribe_by_default",
@@ -721,12 +708,10 @@ class ProjectEmailOptionsForm(forms.Form):
 
         has_alerts = project.is_user_subscribed_to_mail_alerts(user)
 
-        # This allows users who have entered an alert_email value or have specified an email
-        # for notifications to keep their settings
+        # This allows users who have specified an email for notifications to keep their settings
         emails = [e.email for e in user.get_verified_emails()]
-        alert_email = UserOption.objects.get_value(self.user, "alert_email")
         specified_email = UserOption.objects.get_value(self.user, "mail:email", project=project)
-        emails.extend([user.email, alert_email, specified_email])
+        emails.extend([user.email, specified_email])
 
         choices = [(email, email) for email in sorted(set(emails)) if email]
 
@@ -744,7 +729,7 @@ class ProjectEmailOptionsForm(forms.Form):
                 default=UserOptionValue.participating_only,
             ),
         )
-        self.fields["email"].initial = specified_email or alert_email or user.email
+        self.fields["email"].initial = specified_email or user.email
 
     def save(self):
         UserOption.objects.set_value(
diff --git a/tests/sentry/utils/email/tests.py b/tests/sentry/utils/email/tests.py
index 69c604f191..77cb9764f6 100644
--- a/tests/sentry/utils/email/tests.py
+++ b/tests/sentry/utils/email/tests.py
@@ -95,7 +95,6 @@ class MessageBuilderTest(TestCase):
         user_b = User.objects.create(email="bar@example.com")
         user_c = User.objects.create(email="baz@example.com")
 
-        UserOption.objects.create(user=user_b, key="alert_email", value="fizzle@example.com")
         UserOption.objects.create(
             user=user_c, project=project, key="mail:email", value="bazzer@example.com"
         )
@@ -109,8 +108,8 @@ class MessageBuilderTest(TestCase):
         assert len(mail.outbox) == 3
 
         assert sorted([out.to[0] for out in mail.outbox]) == [
+            "bar@example.com",
             "bazzer@example.com",
-            "fizzle@example.com",
             "foo@example.com",
         ]
 
@@ -121,9 +120,6 @@ class MessageBuilderTest(TestCase):
         user_b = User.objects.create(email=create_fake_email("bar", "fake"))
         user_c = User.objects.create(email=create_fake_email("baz", "fake"))
 
-        UserOption.objects.create(
-            user=user_b, key="alert_email", value=create_fake_email("fizzle", "fake")
-        )
         UserOption.objects.create(
             user=user_c,
             project=project,
