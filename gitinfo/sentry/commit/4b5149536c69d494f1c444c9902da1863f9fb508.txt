commit 4b5149536c69d494f1c444c9902da1863f9fb508
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Apr 8 03:09:16 2012 -0700

    Ensure levels as strings are supported in the API, and correctly validate modules

diff --git a/sentry/conf/settings.py b/sentry/conf/settings.py
index da28d2ab41..3c7449d38c 100644
--- a/sentry/conf/settings.py
+++ b/sentry/conf/settings.py
@@ -49,6 +49,8 @@ def get_all_languages():
 LANGUAGE_MAP = dict(settings.LANGUAGES)
 LANGUAGES = ((k, LANGUAGE_MAP[k]) for k in get_all_languages() if k in LANGUAGE_MAP)
 
+LOG_LEVEL_REVERSE_MAP = dict((str(v), k) for k, v in LOG_LEVELS)
+
 
 def configure(**kwargs):
     for k, v in kwargs.iteritems():
diff --git a/sentry/manager.py b/sentry/manager.py
index 6d9fff3803..d32bb67bcd 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -383,6 +383,10 @@ class GroupManager(BaseManager, ChartMixin):
         extra = kwargs.pop('extra', None)
         modules = kwargs.pop('modules', None)
 
+        if isinstance(level, basestring) and not level.isdigit():
+            # assume it's something like 'warn'
+            level = settings.LOG_LEVEL_REVERSE_MAP[level]
+
         # We must convert date to local time so Django doesn't mess it up
         # based on TIME_ZONE
         date = utc_to_local(date)
@@ -407,6 +411,9 @@ class GroupManager(BaseManager, ChartMixin):
             except Exception, e:
                 raise InvalidData('Unable to validate interface, %r: %s' % (k, e))
 
+        if modules and type(modules) != dict:
+            raise InvalidData('Modules must be specified as a mapping')
+
         data['modules'] = modules
 
         # TODO: at this point we should validate what is left in kwargs (it should either
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 73522719fc..08870dd85a 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -286,3 +286,10 @@ class SentryManagerTest(TestCase):
         # ensure that calling it again doesnt raise a db error
         Group.objects.from_kwargs(1, event_id=1, message='foo')
         self.assertEquals(Event.objects.count(), 1)
+
+    def test_log_level_as_string(self):
+        event = Group.objects.from_kwargs(1, message='foo', level='error')
+        self.assertEquals(event.level, 40)
+
+    def test_invalid_modules(self):
+        self.assertRaises(InvalidData, Group.objects.from_kwargs, 1, message='foo', modules=[('foo', 'bar')])
