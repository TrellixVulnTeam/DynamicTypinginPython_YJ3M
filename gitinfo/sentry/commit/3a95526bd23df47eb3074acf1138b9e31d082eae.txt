commit 3a95526bd23df47eb3074acf1138b9e31d082eae
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Oct 18 07:06:59 2018 -0700

    feat(ui): Display PII meta data in issue details (#10055)

diff --git a/bin/load-mocks b/bin/load-mocks
index d908aa9951..29eb06511e 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -591,6 +591,14 @@ def main(num_events=1, extra_events=False):
                     environment=ENVIRONMENTS.next(),
                     user=generate_user(),
                 )
+
+                create_sample_event(
+                    project=project,
+                    platform='pii',
+                    release=release.version,
+                    environment=ENVIRONMENTS.next(),
+                    user=generate_user(),
+                )
             if event5:
                 Commit.objects.get_or_create(
                     organization_id=org.id,
diff --git a/src/sentry/data/samples/pii.json b/src/sentry/data/samples/pii.json
new file mode 100644
index 0000000000..3ab8ef928f
--- /dev/null
+++ b/src/sentry/data/samples/pii.json
@@ -0,0 +1,237 @@
+{
+    "event_id": "28434de4ccf346c3b9b95f07ec3a3846",
+    "level": "error",
+    "modules": {
+        "certifi": "2018.4.16",
+        "pip": "18.0",
+        "python": "2.7.15",
+        "sentry-sdk": "0.3.1",
+        "setuptools": "40.0.0",
+        "urllib3": "1.23",
+        "wheel": "0.31.1",
+        "wsgiref": "0.1.2"
+    },
+    "platform": "python",
+    "timestamp": 1539708807,
+    "server_name": "mcbk.local",
+    "exception": {
+        "values": [
+            {
+                "type": "RuntimeError",
+                "value": "Invalid device: A949AE01EBB07300D62AE0178F0944DD21F8C98C",
+                "module": "exceptions",
+                "stacktrace": {
+                    "frames": [
+                        {
+                            "function": "<module>",
+                            "module": "__main__",
+                            "filename": "example.py",
+                            "abs_path": "/Users/[user]/Coding/semaphore/example.py",
+                            "lineno": 20,
+                            "pre_context": [
+                                "def outer():",
+                                "    inner()",
+                                "",
+                                "if __name__ == '__main__':",
+                                "    try:"
+                            ],
+                            "context_line": "        outer()",
+                            "post_context": [
+                                "    except RuntimeError as e:",
+                                "        capture_exception(e)",
+                                ""
+                            ],
+                            "in_app": true,
+                            "vars": {
+                                "__builtins__": "<module '__builtin__' (built-in)>",
+                                "__doc__": "None",
+                                "__file__": "'/Users/jauer/Coding/semaphore/example.py'",
+                                "__name__": "'__main__'",
+                                "__package__": "None",
+                                "capture_exception": "<function capture_exception at 0x1077e75f0>",
+                                "crash": "<function crash at 0x1078379b0>",
+                                "e": "RuntimeError('Invalid device: d/123456789012',)",
+                                "init": "<function init at 0x1077e7410>",
+                                "inner": "<function inner at 0x107837aa0>",
+                                "os": "<module 'os' from '/Users/jauer/.virtualenvs/sentry-python/lib/python2.7/os.py'>",
+                                "outer": "<function outer at 0x107837b18>"
+                            }
+                        },
+                        {
+                            "function": "outer",
+                            "module": "__main__",
+                            "filename": "example.py",
+                            "abs_path": "/Users/[user]/Coding/semaphore/example.py",
+                            "lineno": 16,
+                            "pre_context": [
+                                "",
+                                "def inner():",
+                                "    crash()",
+                                "",
+                                "def outer():"
+                            ],
+                            "context_line": "    inner()",
+                            "post_context": [
+                                "",
+                                "if __name__ == '__main__':",
+                                "    try:",
+                                "        outer()",
+                                "    except RuntimeError as e:"
+                            ],
+                            "in_app": true
+                        },
+                        {
+                            "function": "inner",
+                            "module": "__main__",
+                            "filename": "example.py",
+                            "abs_path": "/Users/[user]/Coding/semaphore/example.py",
+                            "lineno": 13,
+                            "pre_context": [
+                                "def crash():",
+                                "    print('raising now')",
+                                "    raise RuntimeError('Invalid device: d/123456789012')",
+                                "",
+                                "def inner():"
+                            ],
+                            "context_line": "    crash()",
+                            "post_context": [
+                                "",
+                                "def outer():",
+                                "    inner()",
+                                "",
+                                "if __name__ == '__main__':"
+                            ],
+                            "in_app": true
+                        },
+                        {
+                            "function": "crash",
+                            "module": "__main__",
+                            "filename": "example.py",
+                            "abs_path": "/Users/[user]/Coding/semaphore/example.py",
+                            "lineno": 10,
+                            "pre_context": [
+                                "",
+                                "init(os.environ['SENTRY_DSN']);",
+                                "",
+                                "def crash():",
+                                "    print('raising now')"
+                            ],
+                            "context_line": "    raise RuntimeError('Invalid device: d/123456789012')",
+                            "post_context": [
+                                "",
+                                "def inner():",
+                                "    crash()",
+                                "",
+                                "def outer():"
+                            ],
+                            "in_app": true
+                        }
+                    ]
+                }
+            }
+        ]
+    },
+    "sdk": {
+        "name": "sentry.python",
+        "version": "0.1",
+        "integrations": [
+            "logging",
+            "stdlib",
+            "excepthook",
+            "dedupe",
+            "atexit",
+            "modules"
+        ],
+        "packages": [
+            {
+                "name": "pypi:sentry-sdk",
+                "version": "0.1"
+            }
+        ]
+    },
+    "_meta": {
+        "exception": {
+            "values": {
+                "0": {
+                    "stacktrace": {
+                        "frames": {
+                            "0": {
+                                "abs_path": {
+                                    "": {
+                                        "len": 40,
+                                        "rem": [
+                                            [
+                                                "@userpath:replace",
+                                                "s",
+                                                7,
+                                                13
+                                            ]
+                                        ]
+                                    }
+                                }
+                            },
+                            "1": {
+                                "abs_path": {
+                                    "": {
+                                        "len": 40,
+                                        "rem": [
+                                            [
+                                                "@userpath:replace",
+                                                "s",
+                                                7,
+                                                13
+                                            ]
+                                        ]
+                                    }
+                                }
+                            },
+                            "2": {
+                                "abs_path": {
+                                    "": {
+                                        "len": 40,
+                                        "rem": [
+                                            [
+                                                "@userpath:replace",
+                                                "s",
+                                                7,
+                                                13
+                                            ]
+                                        ]
+                                    }
+                                }
+                            },
+                            "3": {
+                                "abs_path": {
+                                    "": {
+                                        "len": 40,
+                                        "rem": [
+                                            [
+                                                "@userpath:replace",
+                                                "s",
+                                                7,
+                                                13
+                                            ]
+                                        ]
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "value": {
+                        "": {
+                            "len": 30,
+                            "rem": [
+                                [
+                                    "device_id",
+                                    "p",
+                                    16,
+                                    56
+                                ]
+                            ]
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 8bad07fb12..48f2edb3d7 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -306,9 +306,6 @@ class EventManager(object):
         data = self.data
         errors = data['errors'] = []
 
-        # Ignore event meta data for now.
-        data.pop('_meta', None)
-
         # Before validating with a schema, attempt to cast values to their desired types
         # so that the schema doesn't have to take every type variation into account.
         text = six.text_type
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
index 4227f2947c..c8a8662f8d 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
@@ -1,9 +1,10 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import {defined} from 'app/utils';
 
-import StacktraceContent from 'app/components/events/interfaces/stacktraceContent';
+import {defined} from 'app/utils';
+import Annotated from 'app/components/events/meta/annotated';
 import ExceptionMechanism from 'app/components/events/interfaces/exceptionMechanism';
+import StacktraceContent from 'app/components/events/interfaces/stacktraceContent';
 
 class ExceptionContent extends React.Component {
   static propTypes = {
@@ -23,11 +24,15 @@ class ExceptionContent extends React.Component {
           <h5 className="break-word" style={{marginBottom: 5}}>
             <span>{exc.type}</span>
           </h5>
-          {exc.value && (
-            <pre className="exc-message" style={{marginTop: 0}}>
-              {exc.value}
-            </pre>
-          )}
+
+          <Annotated object={exc} prop="value" required>
+            {value => (
+              <pre className="exc-message" style={{marginTop: 0}}>
+                {value}
+              </pre>
+            )}
+          </Annotated>
+
           {exc.mechanism && (
             <ExceptionMechanism data={exc.mechanism} platform={this.props.platform} />
           )}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/message.jsx b/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
index ba95a137a5..37d2e49641 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
@@ -1,9 +1,9 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import Annotated from 'app/components/events/meta/annotated';
 import EventDataSection from 'app/components/events/eventDataSection';
 import SentryTypes from 'app/sentryTypes';
-import utils from 'app/utils';
 import {t} from 'app/locale';
 
 class MessageInterface extends React.Component {
@@ -14,20 +14,16 @@ class MessageInterface extends React.Component {
   };
 
   render() {
-    let data = this.props.data;
+    let {data, group, event} = this.props;
+
     return (
-      <EventDataSection
-        group={this.props.group}
-        event={this.props.event}
-        type="message"
-        title={t('Message')}
-      >
-        <pre
-          className="plain"
-          dangerouslySetInnerHTML={{
-            __html: utils.nl2br(utils.escape(data.formatted || data.message)),
-          }}
-        />
+      <EventDataSection group={group} event={event} type="message" title={t('Message')}>
+        <pre className="plain">
+          <Annotated object={data} prop="formatted">
+            {formatted => formatted || <Annotated object={data} prop="message" />}
+          </Annotated>
+        </pre>
+
         {data.params &&
           !data.formatted && (
             <div>
diff --git a/src/sentry/static/sentry/app/components/events/meta/annotated.jsx b/src/sentry/static/sentry/app/components/events/meta/annotated.jsx
new file mode 100644
index 0000000000..8ecddc604a
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/meta/annotated.jsx
@@ -0,0 +1,45 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import AnnotatedText from 'app/components/events/meta/annotatedText';
+import MetaData from 'app/components/events/meta/metaData';
+
+/**
+ * Returns the value of `object[prop]` and returns an annotated component if
+ * there is meta data
+ */
+function Annotated({children, object, prop, required, ...other}) {
+  return (
+    <MetaData object={object} prop={prop} required={required}>
+      {(value, meta) => {
+        if (meta) {
+          value = (
+            <AnnotatedText
+              value={value}
+              chunks={meta.chunks}
+              remarks={meta.rem}
+              errors={meta.err}
+              props={other}
+            />
+          );
+        }
+
+        return children(value);
+      }}
+    </MetaData>
+  );
+}
+
+Annotated.propTypes = {
+  object: PropTypes.object.isRequired,
+  prop: PropTypes.string.isRequired,
+  required: PropTypes.bool,
+  children: PropTypes.func,
+};
+
+Annotated.defaultProps = {
+  children: value => value,
+  required: false,
+};
+
+export default Annotated;
diff --git a/src/sentry/static/sentry/app/components/events/meta/annotatedText.jsx b/src/sentry/static/sentry/app/components/events/meta/annotatedText.jsx
new file mode 100644
index 0000000000..104fe6832d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/meta/annotatedText.jsx
@@ -0,0 +1,135 @@
+import _ from 'lodash';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import InlineSvg from 'app/components/inlineSvg';
+import Tooltip from 'app/components/tooltip';
+import {t, tn} from 'app/locale';
+import utils from 'app/utils';
+
+const Chunks = styled.span`
+  span {
+    display: inline;
+  }
+`;
+
+const Redaction = styled.span`
+  background: rgba(255, 0, 0, 0.05);
+  cursor: default;
+`;
+
+const Placeholder = styled(Redaction)`
+  font-style: italic;
+
+  :before {
+    content: '<';
+  }
+  :after {
+    content: '>';
+  }
+`;
+
+const ErrorIcon = styled(InlineSvg)`
+  color: ${props => props.theme.redDark};
+`;
+
+const REMARKS = {
+  a: 'Annotated',
+  x: 'Removed',
+  s: 'Substitued',
+  m: 'Masked',
+  p: 'Pseudonymized',
+  e: 'Encrypted',
+};
+
+function renderChunk(chunk) {
+  if (chunk.type === 'redaction') {
+    let title = t('%s due to PII rule "%s"', REMARKS[chunk.remark], chunk.rule_id);
+    return (
+      <Tooltip title={title}>
+        <Redaction>{chunk.text}</Redaction>
+      </Tooltip>
+    );
+  }
+
+  return <span>{chunk.text}</span>;
+}
+
+function renderChunks(chunks) {
+  if (chunks.length === 1) {
+    return chunks[0].text;
+  }
+
+  let spans = chunks.map((chunk, key) => React.cloneElement(renderChunk(chunk), {key}));
+
+  return <Chunks>{spans}</Chunks>;
+}
+
+function renderValue(value, chunks, errors, remarks) {
+  if (chunks.length) {
+    return renderChunks(chunks);
+  }
+
+  let element = null;
+  if (!_.isNull(value)) {
+    element = <Redaction>{value}</Redaction>;
+  } else if (errors && errors.length) {
+    element = <Placeholder>invalid</Placeholder>;
+  } else if (remarks && remarks.length) {
+    element = <Placeholder>redacted</Placeholder>;
+  }
+
+  if (remarks && remarks.length) {
+    let title = t('%s due to PII rule "%s"', REMARKS[remarks[0][1]], remarks[0][0]);
+    element = <Tooltip title={title}>{element}</Tooltip>;
+  }
+
+  return element;
+}
+
+function renderErrors(errors) {
+  if (!errors.length) {
+    return null;
+  }
+
+  let tooltip = `
+  <div style="text-align: left">
+    <strong>${tn('Processing Error:', 'Processing Errors:', errors.length)}</strong>
+    <ul>
+      ${errors.map(e => `<li>${utils.escape(e)}</li>`)}
+    </ul>
+  </div>
+  `;
+
+  return (
+    <Tooltip title={tooltip} tooltipOptions={{html: true}}>
+      <ErrorIcon src="icon-circle-exclamation" />
+    </Tooltip>
+  );
+}
+
+function AnnotatedText({value, chunks, errors, remarks, props}) {
+  return (
+    <span {...props}>
+      {renderValue(value, chunks, errors, remarks)} {renderErrors(errors)}
+    </span>
+  );
+}
+
+AnnotatedText.propTypes = {
+  value: PropTypes.string,
+  chunks: PropTypes.array,
+  errors: PropTypes.array,
+  remarks: PropTypes.array,
+  props: PropTypes.object,
+};
+
+AnnotatedText.defaultProps = {
+  chunks: [],
+  errors: [],
+  remarks: [],
+  props: {},
+};
+
+export default AnnotatedText;
diff --git a/src/sentry/static/sentry/app/components/events/meta/metaData.jsx b/src/sentry/static/sentry/app/components/events/meta/metaData.jsx
new file mode 100644
index 0000000000..779a1c75fc
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/meta/metaData.jsx
@@ -0,0 +1,31 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import _ from 'lodash';
+
+import {getMeta} from 'app/components/events/meta/metaProxy';
+
+/**
+ * Retrieves metadata from an object (object should be a proxy that
+ * has been decorated using `app/components/events/meta/metaProxy/withMeta`
+ */
+export default class MetaData extends React.Component {
+  static propTypes = {
+    object: PropTypes.object.isRequired,
+    prop: PropTypes.string.isRequired,
+    /**
+     * Render prop that is called with these args:
+     *  value: The actual value,
+     *  meta: metadata object if it exists, otherwise null,
+     */
+    children: PropTypes.func.isRequired,
+    required: PropTypes.bool,
+  };
+
+  render() {
+    let {children, object, prop, required} = this.props;
+
+    let value = object[prop];
+    let meta = getMeta(object, prop);
+    return required && _.isNil(value) && !meta ? null : children(value, meta);
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/events/meta/metaProxy.jsx b/src/sentry/static/sentry/app/components/events/meta/metaProxy.jsx
new file mode 100644
index 0000000000..89143d9ecd
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/meta/metaProxy.jsx
@@ -0,0 +1,59 @@
+import _ from 'lodash';
+
+const GET_META = Symbol('GET_META');
+
+function isAnnotated(meta) {
+  if (_.isEmpty(meta)) return false;
+  return !_.isEmpty(meta.rem) || !_.isEmpty(meta.err);
+}
+
+export class MetaProxy {
+  constructor(root, local) {
+    // entire meta object
+    this._meta = root;
+
+    this.local = !local ? root : local;
+  }
+
+  get(obj, prop) {
+    // trap calls to `getMeta` to return meta object
+    if (prop === GET_META) {
+      return key => {
+        if (this.local && this.local[key] && this.local[key]['']) {
+          // TODO: Error checks
+          const meta = this.local[key][''];
+
+          return isAnnotated(meta) ? meta : null;
+        }
+        return null;
+      };
+    }
+
+    if (
+      !obj.hasOwnProperty(prop) ||
+      typeof obj[prop] !== 'object' ||
+      _.isNull(obj[prop])
+    ) {
+      return obj[prop];
+    }
+
+    // Make sure we apply proxy to all children (objects and arrays)
+    // Do we need to check for annotated inside of objects?
+    return new Proxy(
+      obj[prop],
+      new MetaProxy(this._meta, this.local && this.local[prop])
+    );
+  }
+}
+
+export function withMeta(event) {
+  if (!event) return null;
+
+  let _meta = event._meta;
+  return new Proxy(event, new MetaProxy(_meta));
+}
+
+export function getMeta(obj, prop) {
+  if (typeof obj[GET_META] !== 'function') return null;
+  return obj[GET_META](prop);
+}
diff --git a/src/sentry/static/sentry/app/views/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
index d2096e4308..6518ac1f7e 100644
--- a/src/sentry/static/sentry/app/views/groupEventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
@@ -1,13 +1,15 @@
 import React from 'react';
 import createReactClass from 'create-react-class';
+
+import {withMeta} from 'app/components/events/meta/metaProxy';
 import ApiMixin from 'app/mixins/apiMixin';
 import EventEntries from 'app/components/events/eventEntries';
+import GroupEventDetailsLoadingError from 'app/components/errors/groupEventDetailsLoadingError';
 import GroupEventToolbar from 'app/views/groupDetails/eventToolbar';
 import GroupSidebar from 'app/components/group/sidebar';
 import GroupState from 'app/mixins/groupState';
-import MutedBox from 'app/components/mutedBox';
-import GroupEventDetailsLoadingError from 'app/components/errors/groupEventDetailsLoadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
+import MutedBox from 'app/components/mutedBox';
 import ResolutionBox from 'app/components/resolutionBox';
 import withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';
 
@@ -75,7 +77,7 @@ const GroupEventDetails = createReactClass({
 
   render() {
     let group = this.getGroup();
-    let evt = this.state.event;
+    let evt = withMeta(this.state.event);
     let params = this.props.params;
 
     return (
diff --git a/tests/acceptance/test_issue_details.py b/tests/acceptance/test_issue_details.py
index 10a6cbd3c9..40f9cfe100 100644
--- a/tests/acceptance/test_issue_details.py
+++ b/tests/acceptance/test_issue_details.py
@@ -94,6 +94,17 @@ class IssueDetailsTest(AcceptanceTestCase):
         self.browser.wait_until('.entries')
         self.browser.snapshot('issue details cordova')
 
+    def test_stripped_event(self):
+        event = self.create_sample_event(
+            platform='pii'
+        )
+
+        self.browser.get(
+            u'/{}/{}/issues/{}/'.format(self.org.slug, self.project.slug, event.group.id)
+        )
+        self.browser.wait_until('.entries')
+        self.browser.snapshot('issue details pii stripped')
+
     def test_activity_page(self):
         event = self.create_sample_event(
             platform='python',
diff --git a/tests/js/fixtures/exceptionWithMeta.jsx b/tests/js/fixtures/exceptionWithMeta.jsx
new file mode 100644
index 0000000000..b16f09e56f
--- /dev/null
+++ b/tests/js/fixtures/exceptionWithMeta.jsx
@@ -0,0 +1,35 @@
+function ExceptionWithMeta(props = {}) {
+  return {
+    level: 'error',
+    platform: 'python',
+    exception: {
+      values: [
+        {
+          type: 'ValueError',
+          value: 'python err A949AE01EBB07300D62AE0178F0944DD21F8C98C err',
+          module: 'exceptions',
+          stacktrace: {
+            frames: [],
+          },
+        },
+      ],
+    },
+    _meta: {
+      exception: {
+        values: {
+          '0': {
+            value: {
+              '': {
+                len: 29,
+                rem: [['device_id', 'p', 11, 51]],
+              },
+            },
+          },
+        },
+      },
+    },
+    ...props,
+  };
+}
+
+export {ExceptionWithMeta};
diff --git a/tests/js/spec/components/events/__snapshots__/crashContent.spec.jsx.snap b/tests/js/spec/components/events/__snapshots__/crashContent.spec.jsx.snap
new file mode 100644
index 0000000000..e96a86f8bc
--- /dev/null
+++ b/tests/js/spec/components/events/__snapshots__/crashContent.spec.jsx.snap
@@ -0,0 +1,163 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`CrashContent renders with meta data 1`] = `
+<CrashContent
+  event={
+    Object {
+      "eventID": "12345678901234567890123456789012",
+      "groupID": "1",
+      "id": "1",
+      "message": "ApiException",
+    }
+  }
+  exception={
+    Object {
+      "values": Array [
+        Object {
+          "module": "exceptions",
+          "stacktrace": Object {
+            "frames": Array [],
+          },
+          "type": "ValueError",
+          "value": "python err A949AE01EBB07300D62AE0178F0944DD21F8C98C err",
+        },
+      ],
+    }
+  }
+  newestFirst={true}
+  stackType="original"
+  stackView="full"
+>
+  <ErrorBoundary
+    mini={true}
+  >
+    <ExceptionContent
+      newestFirst={true}
+      type="original"
+      values={
+        Array [
+          Object {
+            "module": "exceptions",
+            "stacktrace": Object {
+              "frames": Array [],
+            },
+            "type": "ValueError",
+            "value": "python err A949AE01EBB07300D62AE0178F0944DD21F8C98C err",
+          },
+        ]
+      }
+      view="full"
+    >
+      <div>
+        <div
+          className="exception"
+          key="0"
+        >
+          <h5
+            className="break-word"
+            style={
+              Object {
+                "marginBottom": 5,
+              }
+            }
+          >
+            <span>
+              ValueError
+            </span>
+          </h5>
+          <Annotated
+            object={
+              Object {
+                "module": "exceptions",
+                "stacktrace": Object {
+                  "frames": Array [],
+                },
+                "type": "ValueError",
+                "value": "python err A949AE01EBB07300D62AE0178F0944DD21F8C98C err",
+              }
+            }
+            prop="value"
+            required={true}
+          >
+            <MetaData
+              object={
+                Object {
+                  "module": "exceptions",
+                  "stacktrace": Object {
+                    "frames": Array [],
+                  },
+                  "type": "ValueError",
+                  "value": "python err A949AE01EBB07300D62AE0178F0944DD21F8C98C err",
+                }
+              }
+              prop="value"
+              required={true}
+            >
+              <pre
+                className="exc-message"
+                style={
+                  Object {
+                    "marginTop": 0,
+                  }
+                }
+              >
+                <AnnotatedText
+                  chunks={Array []}
+                  errors={Array []}
+                  props={Object {}}
+                  remarks={
+                    Array [
+                      Array [
+                        "device_id",
+                        "p",
+                        11,
+                        51,
+                      ],
+                    ]
+                  }
+                  value="python err A949AE01EBB07300D62AE0178F0944DD21F8C98C err"
+                >
+                  <span>
+                    <Tooltip
+                      title="Pseudonymized due to PII rule \\"device_id\\""
+                    >
+                      <Redaction
+                        className="tip"
+                        title="Pseudonymized due to PII rule \\"device_id\\""
+                      >
+                        <span
+                          className="tip css-ielfiw-Redaction e1p1th7g1"
+                          title="Pseudonymized due to PII rule \\"device_id\\""
+                        >
+                          python err A949AE01EBB07300D62AE0178F0944DD21F8C98C err
+                        </span>
+                      </Redaction>
+                    </Tooltip>
+                     
+                  </span>
+                </AnnotatedText>
+              </pre>
+            </MetaData>
+          </Annotated>
+          <StacktraceContent
+            data={
+              Object {
+                "frames": Array [],
+              }
+            }
+            expandFirstFrame={true}
+            includeSystemFrames={true}
+            newestFirst={true}
+          >
+            <div
+              className=" traceback full-traceback"
+            >
+              <ul />
+            </div>
+          </StacktraceContent>
+        </div>
+      </div>
+    </ExceptionContent>
+  </ErrorBoundary>
+</CrashContent>
+`;
diff --git a/tests/js/spec/components/events/crashContent.spec.jsx b/tests/js/spec/components/events/crashContent.spec.jsx
new file mode 100644
index 0000000000..3991e4679c
--- /dev/null
+++ b/tests/js/spec/components/events/crashContent.spec.jsx
@@ -0,0 +1,26 @@
+import {mount} from 'enzyme';
+import React from 'react';
+
+import CrashContent from 'app/components/events/interfaces/crashContent';
+import {withMeta} from 'app/components/events/meta/metaProxy';
+
+describe('CrashContent', function() {
+  let exc = TestStubs.ExceptionWithMeta();
+  let event = TestStubs.Event();
+
+  let proxiedExc = withMeta(exc);
+
+  it('renders with meta data', function() {
+    let wrapper = mount(
+      <CrashContent
+        stackView="full"
+        stackType="original"
+        event={event}
+        newestFirst
+        exception={proxiedExc.exception}
+      />
+    );
+
+    expect(wrapper).toMatchSnapshot();
+  });
+});
diff --git a/tests/js/spec/components/events/meta/annotated.spec.jsx b/tests/js/spec/components/events/meta/annotated.spec.jsx
new file mode 100644
index 0000000000..75db979368
--- /dev/null
+++ b/tests/js/spec/components/events/meta/annotated.spec.jsx
@@ -0,0 +1,158 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import Annotated from 'app/components/events/meta/annotated';
+import {withMeta} from 'app/components/events/meta/metaProxy';
+
+describe('Annotated', () => {
+  let mock = jest.fn(() => null);
+
+  const createEvent = (value, {err, rem, chunks} = {}) => {
+    return withMeta({
+      value,
+      _meta: {
+        value: {
+          '': {
+            err: err || [],
+            rem: rem || [],
+            chunks: chunks || [],
+          },
+        },
+      },
+    });
+  };
+
+  beforeEach(function() {
+    mock.mockClear();
+  });
+
+  describe('without meta', () => {
+    it('renders a string', () => {
+      let obj = {
+        value: 'foo',
+      };
+      mount(
+        <Annotated object={obj} prop="value">
+          {mock}
+        </Annotated>
+      );
+      expect(mock).toHaveBeenCalledWith('foo');
+    });
+
+    it('renders a number', () => {
+      let obj = {
+        value: 0,
+      };
+      mount(
+        <Annotated object={obj} prop="value">
+          {mock}
+        </Annotated>
+      );
+      expect(mock).toHaveBeenCalledWith(0);
+    });
+
+    it('renders a boolean', () => {
+      let obj = {
+        value: false,
+      };
+      mount(
+        <Annotated object={obj} prop="value">
+          {mock}
+        </Annotated>
+      );
+      expect(mock).toHaveBeenCalledWith(false);
+    });
+
+    it('ignores empty meta data', () => {
+      let obj = withMeta({
+        value: 'foo',
+        _meta: {
+          value: {
+            '': {
+              err: [],
+              rem: [],
+              chunks: [],
+            },
+          },
+        },
+      });
+      mount(
+        <Annotated object={obj} prop="value">
+          {mock}
+        </Annotated>
+      );
+      expect(mock).toHaveBeenCalledWith('foo');
+    });
+
+    it('does not call render prop if required and value is falsy and no meta', () => {
+      let obj = createEvent(null, {});
+
+      mount(
+        <Annotated object={obj} prop="value" required>
+          {mock}
+        </Annotated>
+      );
+
+      expect(mock).not.toHaveBeenCalled();
+    });
+  });
+
+  describe('with meta', () => {
+    it('annotates errors', () => {
+      let obj = createEvent('foo', {err: ['something']});
+
+      mount(
+        <Annotated object={obj} prop="value">
+          {mock}
+        </Annotated>
+      );
+
+      expect(mock.mock.calls[0][0].props).toEqual(
+        expect.objectContaining({
+          value: 'foo',
+          chunks: [],
+          remarks: [],
+          errors: ['something'],
+        })
+      );
+    });
+
+    it('annotates remarks and chunks', () => {
+      let obj = createEvent('foo', {rem: [{type: 't'}], chunks: [{text: 'foo'}]});
+
+      mount(
+        <Annotated object={obj} prop="value">
+          {mock}
+        </Annotated>
+      );
+
+      expect(mock.mock.calls[0][0].props).toEqual(
+        expect.objectContaining({
+          value: 'foo',
+          remarks: [{type: 't'}],
+          chunks: [{text: 'foo'}],
+          errors: [],
+        })
+      );
+    });
+
+    it('annotates redacted text', () => {
+      let obj = createEvent(null, {err: ['something']});
+
+      mount(
+        <Annotated object={obj} prop="value">
+          {mock}
+        </Annotated>
+      );
+
+      expect(mock.mock.calls[0][0].props).toEqual(
+        expect.objectContaining({
+          value: null,
+          chunks: [],
+          remarks: [],
+          errors: ['something'],
+        })
+      );
+    });
+  });
+});
diff --git a/tests/js/spec/components/events/meta/metaData.spec.jsx b/tests/js/spec/components/events/meta/metaData.spec.jsx
new file mode 100644
index 0000000000..b111c2eb15
--- /dev/null
+++ b/tests/js/spec/components/events/meta/metaData.spec.jsx
@@ -0,0 +1,33 @@
+import {mount} from 'enzyme';
+import React from 'react';
+
+import {withMeta} from 'app/components/events/meta/metaProxy';
+import MetaData from 'app/components/events/meta/metaData';
+
+describe('MetaData', function() {
+  let exc = TestStubs.ExceptionWithMeta();
+
+  let proxiedExc = withMeta(exc);
+
+  it('can get meta data', function() {
+    let renderProp = jest.fn(() => null);
+    mount(
+      <MetaData object={proxiedExc.exception.values[0]} prop="value">
+        {renderProp}
+      </MetaData>
+    );
+
+    expect(
+      renderProp
+    ).toHaveBeenCalledWith('python err A949AE01EBB07300D62AE0178F0944DD21F8C98C err', {
+      len: 29,
+      rem: [['device_id', 'p', 11, 51]],
+    });
+  });
+
+  it('has the right value', function() {
+    expect(proxiedExc.exception.values[0].value).toBe(
+      'python err A949AE01EBB07300D62AE0178F0944DD21F8C98C err'
+    );
+  });
+});
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index a856966232..6a686283fa 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -1326,6 +1326,14 @@ class EventManagerTest(TransactionTestCase):
         hashes = [gh.hash for gh in GroupHash.objects.filter(group=event.group)]
         assert hashes == [md5_from_hash(checksum), checksum]
 
+    def test_event_pii(self):
+        manager = EventManager(self.make_event(
+            message='foo bar',
+            _meta={'message': {'': {'err': ['invalid']}}},
+        ))
+        data = manager.normalize()
+        assert data['_meta']['message'] == {'': {'err': ['invalid']}}
+
 
 class ProcessTimestampTest(TestCase):
     def test_iso_timestamp(self):
