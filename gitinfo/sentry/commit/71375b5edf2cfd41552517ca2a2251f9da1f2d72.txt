commit 71375b5edf2cfd41552517ca2a2251f9da1f2d72
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Thu May 31 12:21:27 2018 -0700

    ref(integrations): Add error messaging github apps (#8611)

diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index 47c0a8cd4e..d36ee16202 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -15,21 +15,7 @@ from sentry.pipeline import PipelineProvider
 from .exceptions import (
     ApiHostError, ApiError, ApiUnauthorized, IntegrationError, UnsupportedResponseType
 )
-
-
-ERR_INTERNAL = (
-    'An internal error occurred with the integration and the Sentry team has'
-    ' been notified'
-)
-
-ERR_UNAUTHORIZED = (
-    'Unauthorized: either your access token was invalid or you do not have'
-    ' access'
-)
-
-ERR_UNSUPPORTED_RESPONSE_TYPE = (
-    'An unsupported response type was returned: {content_type}'
-)
+from .constants import ERR_UNAUTHORIZED, ERR_INTERNAL, ERR_UNSUPPORTED_RESPONSE_TYPE
 
 IntegrationMetadata = namedtuple('IntegrationMetadata', [
     'description',  # A markdown description of the integration
@@ -188,6 +174,9 @@ class Integration(object):
         # Return the api client for a given provider
         raise NotImplementedError
 
+    def error_message_from_json(self, data):
+        return data.get('message', 'unknown error')
+
     def message_from_error(self, exc):
         if isinstance(exc, ApiUnauthorized):
             return ERR_UNAUTHORIZED
diff --git a/src/sentry/integrations/constants.py b/src/sentry/integrations/constants.py
new file mode 100644
index 0000000000..3259dd812a
--- /dev/null
+++ b/src/sentry/integrations/constants.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+
+ERR_INTERNAL = (
+    'An internal error occurred with the integration and the Sentry team has'
+    ' been notified'
+)
+
+ERR_UNAUTHORIZED = (
+    'Unauthorized: either your access token was invalid or you do not have'
+    ' access'
+)
+
+ERR_UNSUPPORTED_RESPONSE_TYPE = (
+    'An unsupported response type was returned: {content_type}'
+)
diff --git a/src/sentry/integrations/github/integration.py b/src/sentry/integrations/github/integration.py
index 1af6ef7fa7..1ccbb1af7b 100644
--- a/src/sentry/integrations/github/integration.py
+++ b/src/sentry/integrations/github/integration.py
@@ -6,6 +6,8 @@ from sentry import http, options
 from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.identity.github import get_user_info
 from sentry.integrations import Integration, IntegrationProvider, IntegrationMetadata
+from sentry.integrations.exceptions import ApiError
+from sentry.integrations.constants import ERR_INTERNAL, ERR_UNAUTHORIZED
 from sentry.pipeline import NestedPipelineView, PipelineView
 from sentry.utils.http import absolute_uri
 
@@ -28,12 +30,31 @@ metadata = IntegrationMetadata(
     aspects={}
 )
 
+API_ERRORS = {
+    404: 'GitHub returned a 404 Not Found error.',
+    401: ERR_UNAUTHORIZED,
+}
+
 
 class GitHubIntegration(Integration):
 
     def get_client(self):
         return GitHubAppsClient(external_id=self.model.external_id)
 
+    def message_from_error(self, exc):
+        if isinstance(exc, ApiError):
+            message = API_ERRORS.get(exc.code)
+            if message:
+                return message
+            return (
+                'Error Communicating with GitHub (HTTP %s): %s' % (
+                    exc.code, exc.json.get('message', 'unknown error')
+                    if exc.json else 'unknown error',
+                )
+            )
+        else:
+            return ERR_INTERNAL
+
 
 class GitHubIntegrationProvider(IntegrationProvider):
     key = 'github'
diff --git a/src/sentry/integrations/github/repository.py b/src/sentry/integrations/github/repository.py
index 6c4e239478..cda928b6b8 100644
--- a/src/sentry/integrations/github/repository.py
+++ b/src/sentry/integrations/github/repository.py
@@ -60,7 +60,7 @@ class GitHubRepositoryProvider(providers.IntegrationRepositoryProvider):
             try:
                 repo = client.get_repo(config['name'])
             except Exception as e:
-                self.raise_error(e)
+                installation.raise_error(e)
             else:
                 config['external_id'] = six.text_type(repo['id'])
                 config['integration_id'] = integration.id
diff --git a/src/sentry/plugins/providers/integration_repository.py b/src/sentry/plugins/providers/integration_repository.py
index ec9b335fa2..f45a25b162 100644
--- a/src/sentry/plugins/providers/integration_repository.py
+++ b/src/sentry/plugins/providers/integration_repository.py
@@ -1,18 +1,20 @@
 from __future__ import absolute_import
 
+import six
+
 from django.db import IntegrityError, transaction
 from rest_framework.response import Response
 
 from sentry.api.serializers import serialize
+from sentry.integrations.exceptions import IntegrationError
 from sentry.exceptions import PluginError
 from sentry.models import Repository
 from sentry.plugins.config import ConfigValidator
 
-from .base import ProviderMixin
-
 
-class IntegrationRepositoryProvider(ProviderMixin):
+class IntegrationRepositoryProvider(object):
     name = None
+    logger = None
 
     def __init__(self, id):
         self.id = id
@@ -88,6 +90,25 @@ class IntegrationRepositoryProvider(ProviderMixin):
 
         return Response(serialize(repo, request.user), status=201)
 
+    def handle_api_error(self, error):
+        context = {
+            'error_type': 'unknown',
+        }
+        if isinstance(error, IntegrationError):
+            # TODO(dcramer): we should have a proper validation error
+            context.update({
+                'error_type': 'validation',
+                'errors': {
+                    '__all__': error.message
+                },
+            })
+            status = 400
+        else:
+            if self.logger:
+                self.logger.exception(six.text_type(error))
+            status = 500
+        return Response(context, status=status)
+
     def get_config(self, organization):
         raise NotImplementedError
 
