commit 1020abb3aca1932c635cc2c904aa102f7d6f9551
Author: Billy Vong <billyvg@gmail.com>
Date:   Wed Jul 26 14:49:59 2017 -0700

    Fix state changes when merging/unmerging

diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index 25f66a1377..ae67839246 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -285,6 +285,8 @@ const GroupStore = Reflux.createStore({
     itemIds.forEach(itemId => {
       this.addStatus(itemId, 'merge');
     });
+    // XXX(billy): Not sure if this is a bug or not but do we need to publish all itemIds?
+    // Seems like we only need to publish parent id
     this.trigger(new Set(itemIds));
   },
 
diff --git a/src/sentry/static/sentry/app/stores/groupingStore.jsx b/src/sentry/static/sentry/app/stores/groupingStore.jsx
index dcb106d857..02440b1a18 100644
--- a/src/sentry/static/sentry/app/stores/groupingStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupingStore.jsx
@@ -21,16 +21,32 @@ const getAvgScore = score => {
 const GroupingStore = Reflux.createStore({
   listenables: [GroupingActions],
   init() {
+    // List of merged items
+    this.mergedItems = [];
+    // List of items selected to be unmerged
     this.unmergeList = new Set();
+    // State object for unmerged row items
     this.unmergeState = new Map();
+    // Unmerge button state
+    this.unmergeDisabled = false;
 
+    // List of similar items above min. score index
+    this.similarItems = [];
+    // List of similar items below min. score index
+    this.filteredSimilarItems = [];
+    // Pagination for above list
+    this.similarLinks = '';
+    // State object for merged row items
     this.mergeState = new Map();
+    // List of items selected to be merged
     this.mergeList = new Set();
+    // Pagination for above list
+    this.mergedLinks = '';
+    // Merge button state
+    this.mergeDisabled = false;
 
-    this.unmergeDisabled = false;
-    this.mergedItems = [];
-    this.similarItems = [];
-    this.filteredSimilarItems = [];
+    this.loading = true;
+    this.error = false;
   },
 
   setStateForId(map, id, newState) {
@@ -42,7 +58,13 @@ const GroupingStore = Reflux.createStore({
 
   // Fetches data
   onFetch(toFetchArray) {
-    let promises = toFetchArray.map(({endpoint, queryParams, dataKey}) => {
+    const requests = toFetchArray || this.toFetchArray;
+
+    // Reset state and trigger update
+    this.init();
+    this.triggerFetchState();
+
+    let promises = requests.map(({endpoint, queryParams, dataKey}) => {
       return new Promise((resolve, reject) => {
         api.request(endpoint, {
           method: 'GET',
@@ -66,7 +88,7 @@ const GroupingStore = Reflux.createStore({
       merged: item => {
         // Check for locked items
         this.setStateForId(this.unmergeState, item.id, {
-          locked: item.status === 'locked'
+          busy: item.status === 'locked'
         });
         return item;
       },
@@ -84,32 +106,27 @@ const GroupingStore = Reflux.createStore({
       }
     };
 
-    Promise.all(promises).then(resultsArray => {
-      resultsArray.forEach(({dataKey, data, links}) => {
-        let items = data.map(responseProcessors[dataKey]);
-        this[`${dataKey}Items`] = items;
-        this[`${dataKey}Links`] = links;
-      });
+    Promise.all(promises).then(
+      resultsArray => {
+        resultsArray.forEach(({dataKey, data, links}) => {
+          let items = data.map(responseProcessors[dataKey]);
+          this[`${dataKey}Items`] = items;
+          this[`${dataKey}Links`] = links;
+        });
 
-      this.trigger({
-        // List of merged items that can be unmerged
-        mergedItems: this.mergedItems,
-        // Pagination for above list
-        mergedLinks: this.mergedLinks,
-        // List of similar items above min. score index
-        similarItems: this.similarItems.filter(({isBelowThreshold}) => !isBelowThreshold),
-        // List of similar items below min. score index
-        filteredSimilarItems: this.similarItems.filter(
-          ({isBelowThreshold}) => isBelowThreshold
-        ),
-        // Pagination for above list
-        similarLinks: this.similarLinks,
-        // State object for merged row items
-        mergeState: this.mergeState,
-        // State object for unmerge row items
-        unmergeState: this.unmergeState
-      });
-    });
+        this.loading = false;
+        this.error = false;
+        this.triggerFetchState();
+      },
+      () => {
+        this.error = true;
+        this.triggerFetchState();
+      }
+    );
+
+    if (toFetchArray) {
+      this.toFetchArray = toFetchArray;
+    }
   },
 
   // Toggle merge checkbox
@@ -199,16 +216,15 @@ const GroupingStore = Reflux.createStore({
         IndicatorStore.add(successMessage, 'success', {
           duration: 5000
         });
-        this.unmergeDisabled = false;
       },
       error: error => {
         IndicatorStore.remove(loadingIndicator);
         IndicatorStore.add(errorMessage, 'error');
-        this.unmergeDisabled = false;
       },
       complete: () => {
         IndicatorStore.remove(loadingIndicator);
         this.unmergeDisabled = false;
+        this.triggerUnmergeState();
       }
     });
 
@@ -216,7 +232,6 @@ const GroupingStore = Reflux.createStore({
     ids.forEach(id => {
       this.setStateForId(this.unmergeState, id, {
         checked: false,
-        locked: true,
         busy: true
       });
     });
@@ -226,14 +241,13 @@ const GroupingStore = Reflux.createStore({
     this.triggerUnmergeState();
   },
 
-  onMerge({params, query, loadingMessage, successMessage, errorMessage}) {
+  onMerge({params, query}) {
     let ids = Array.from(this.mergeList.values());
     // Disable merge button
     this.mergeDisabled = true;
 
     if (params) {
       let {orgId, groupId, projectId} = params;
-      let loadingIndicator = IndicatorStore.add(loadingMessage);
       api.merge(
         {
           orgId,
@@ -244,36 +258,57 @@ const GroupingStore = Reflux.createStore({
         },
         {
           success: (data, _, jqXHR) => {
-            IndicatorStore.add(successMessage, 'success', {
-              duration: 5000
-            });
             // Hide rows after successful merge
             ids.forEach(id => {
-              let state = this.mergeState.get(id) || {};
-              this.mergeState.set(id, {
-                ...state,
-                visible: false
+              this.setStateForId(this.mergeState, id, {
+                checked: false,
+                busy: true
               });
             });
             this.mergeList.clear();
-            this.mergeDisabled = false;
+            this.triggerMergeState();
           },
-          error: error => {
-            IndicatorStore.remove(loadingIndicator);
-            IndicatorStore.add(errorMessage, 'error');
-            this.mergeDisabled = false;
+          error: () => {
+            ids.forEach(id => {
+              this.setStateForId(this.mergeState, id, {
+                checked: true,
+                busy: false
+              });
+            });
+            this.triggerMergeState();
           },
           complete: () => {
-            IndicatorStore.remove(loadingIndicator);
             this.mergeDisabled = false;
+            this.triggerMergeState();
           }
         }
       );
     }
 
+    ids.forEach(id => {
+      this.setStateForId(this.mergeState, id, {
+        busy: true
+      });
+    });
     this.triggerMergeState();
   },
 
+  triggerFetchState() {
+    this.trigger({
+      mergedItems: this.mergedItems,
+      mergedLinks: this.mergedLinks,
+      similarItems: this.similarItems.filter(({isBelowThreshold}) => !isBelowThreshold),
+      filteredSimilarItems: this.similarItems.filter(
+        ({isBelowThreshold}) => isBelowThreshold
+      ),
+      similarLinks: this.similarLinks,
+      mergeState: this.mergeState,
+      unmergeState: this.unmergeState,
+      loading: this.loading,
+      error: this.error
+    });
+  },
+
   triggerUnmergeState() {
     this.trigger({
       unmergeDisabled: this.unmergeDisabled,
diff --git a/src/sentry/static/sentry/app/views/groupGrouping/groupGroupingView.jsx b/src/sentry/static/sentry/app/views/groupGrouping/groupGroupingView.jsx
index 48f6285002..7b663fee97 100644
--- a/src/sentry/static/sentry/app/views/groupGrouping/groupGroupingView.jsx
+++ b/src/sentry/static/sentry/app/views/groupGrouping/groupGroupingView.jsx
@@ -47,7 +47,9 @@ const GroupGroupingView = React.createClass({
     mergedLinks,
     similarItems,
     similarLinks,
-    filteredSimilarItems
+    filteredSimilarItems,
+    loading,
+    error
   }) {
     if (mergedItems && similarItems) {
       this.setState({
@@ -56,8 +58,8 @@ const GroupGroupingView = React.createClass({
         similarItems,
         similarLinks,
         filteredSimilarItems,
-        loading: false,
-        error: false
+        loading: typeof loading !== 'undefined' ? loading : false,
+        error: typeof error !== 'undefined' ? error : false
       });
     }
   },
@@ -97,10 +99,7 @@ const GroupGroupingView = React.createClass({
     if (params) {
       GroupingActions.merge({
         params,
-        query,
-        loadingMessage: `${t('Merging issues')}...`,
-        successMessage: t('Issues successfully merged.'),
-        errorMessage: t('Unable to merge issues.')
+        query
       });
     }
   },
diff --git a/src/sentry/static/sentry/app/views/groupGrouping/mergedItem.jsx b/src/sentry/static/sentry/app/views/groupGrouping/mergedItem.jsx
index fa977bcbc6..27de34d74f 100644
--- a/src/sentry/static/sentry/app/views/groupGrouping/mergedItem.jsx
+++ b/src/sentry/static/sentry/app/views/groupGrouping/mergedItem.jsx
@@ -1,5 +1,6 @@
 import React, {PropTypes} from 'react';
 import Reflux from 'reflux';
+import classNames from 'classnames';
 
 import GroupingStore from '../../stores/groupingStore';
 import GroupingActions from '../../actions/groupingActions';
@@ -24,17 +25,16 @@ const MergedItem = React.createClass({
     })
   },
 
-  mixins: [Reflux.listenTo(GroupingStore, 'onGroupingUpdate')],
+  mixins: [Reflux.listenTo(GroupingStore, 'onGroupingChange')],
 
   getInitialState() {
     return {
       checked: false,
-      locked: false,
       busy: false
     };
   },
 
-  onGroupingUpdate({unmergeState}) {
+  onGroupingChange({unmergeState}) {
     let {fingerprint} = this.props;
     if (unmergeState) {
       const stateForId = unmergeState.has(fingerprint) && unmergeState.get(fingerprint);
@@ -54,24 +54,21 @@ const MergedItem = React.createClass({
     let {disabled, fingerprint} = this.props;
 
     // clicking anywhere in the row will toggle the checkbox
-    if (!disabled && !this.state.locked) {
+    if (!disabled && !this.state.busy) {
       GroupingActions.toggleUnmerge(fingerprint);
     }
   },
 
   render() {
     let {disabled, event, orgId, fingerprint, projectId, groupId} = this.props;
-    let checkboxDisabled = disabled || this.state.disabled || this.state.locked;
+    let checkboxDisabled = disabled || this.state.disabled;
+    let cx = classNames('group', 'merged-event', {
+      busy: this.state.busy
+    });
 
     // Not sure why, but `event` can be null
     return (
-      <SplitLayout
-        style={{
-          opacity: this.state.busy || this.state.locked ? 0.6 : 1
-        }}
-        onClick={this.handleToggle}
-        className="group merged-event"
-        responsive>
+      <SplitLayout onClick={this.handleToggle} className={cx} responsive>
         <div>
           <div className="event-details">
             {event &&
diff --git a/src/sentry/static/sentry/app/views/groupGrouping/similarItem.jsx b/src/sentry/static/sentry/app/views/groupGrouping/similarItem.jsx
index 73a772576c..fd493a72e1 100644
--- a/src/sentry/static/sentry/app/views/groupGrouping/similarItem.jsx
+++ b/src/sentry/static/sentry/app/views/groupGrouping/similarItem.jsx
@@ -1,5 +1,6 @@
 import React, {PropTypes} from 'react';
 import Reflux from 'reflux';
+import classNames from 'classnames';
 
 import {t} from '../../locale';
 import GroupingStore from '../../stores/groupingStore';
@@ -76,7 +77,9 @@ const SimilarIssueItem = React.createClass({
     let {issue} = this.props;
 
     // clicking anywhere in the row will toggle the checkbox
-    GroupingActions.toggleMerge(issue.id);
+    if (!this.state.busy) {
+      GroupingActions.toggleMerge(issue.id);
+    }
   },
 
   render() {
@@ -86,8 +89,12 @@ const SimilarIssueItem = React.createClass({
       return null;
     }
 
+    let cx = classNames('group', 'similar-issue', {
+      busy: this.state.busy
+    });
+
     return (
-      <SplitLayout className="group similar-issue" responsive onClick={this.handleToggle}>
+      <SplitLayout className={cx} responsive onClick={this.handleToggle}>
         <SpreadLayout>
           <div className="event-details">
             <EventOrGroupHeader
diff --git a/src/sentry/static/sentry/less/group-grouping.less b/src/sentry/static/sentry/less/group-grouping.less
index c79715a5cd..27a08a115a 100644
--- a/src/sentry/static/sentry/less/group-grouping.less
+++ b/src/sentry/static/sentry/less/group-grouping.less
@@ -98,6 +98,10 @@
   }
 }
 
+.merged-event.busy, .similar-issue.busy {
+  opacity: 0.3;
+}
+
 @media(max-width: 629px) {
   .grouping-similar-list-container {
     .event-count-header {
