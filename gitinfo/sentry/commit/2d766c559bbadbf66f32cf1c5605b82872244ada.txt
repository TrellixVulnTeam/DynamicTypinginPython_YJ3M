commit 2d766c559bbadbf66f32cf1c5605b82872244ada
Author: Jan Michael Auer <jan.auer@sentry.io>
Date:   Fri May 31 13:03:14 2019 +0200

    fix(native): Assemble files with duplicate chunks correctly (#13481)
    
    This fixes an issue where files are assembled incorrectly when they contain duplicate chunks. Previously, only the first occurrence of a duplicate chunks was assembled.

diff --git a/src/sentry/models/file.py b/src/sentry/models/file.py
index f5d8cc067a..91e5f068cd 100644
--- a/src/sentry/models/file.py
+++ b/src/sentry/models/file.py
@@ -440,8 +440,10 @@ class File(Model):
         tf = tempfile.NamedTemporaryFile()
         with transaction.atomic():
             file_blobs = FileBlob.objects.filter(id__in=file_blob_ids).all()
-            # Make sure the blobs are sorted with the order provided
-            file_blobs = sorted(file_blobs, key=lambda blob: file_blob_ids.index(blob.id))
+
+            # Ensure blobs are in the order and duplication as provided
+            blobs_by_id = {blob.id: blob for blob in file_blobs}
+            file_blobs = [blobs_by_id[blob_id] for blob_id in file_blob_ids]
 
             new_checksum = sha1(b'')
             offset = 0
diff --git a/src/sentry/tasks/assemble.py b/src/sentry/tasks/assemble.py
index 4616112a9e..f7aa9c44a3 100644
--- a/src/sentry/tasks/assemble.py
+++ b/src/sentry/tasks/assemble.py
@@ -302,14 +302,6 @@ def assemble_file(task, org_or_project, name, checksum, chunks, file_type):
                             detail='File exceeds maximum size')
         return
 
-    # We need to make sure the blobs are in the order in which
-    # we received them from the request.
-    # Otherwise it could happen that we assemble the file in the wrong order
-    # and get an garbage file.
-    file_blob_ids = [x[0] for x in sorted(
-        file_blobs, key=lambda blob: chunks.index(blob[1])
-    )]
-
     # Sanity check.  In case not all blobs exist at this point we have a
     # race condition.
     if set(x[1] for x in file_blobs) != set(chunks):
@@ -317,6 +309,11 @@ def assemble_file(task, org_or_project, name, checksum, chunks, file_type):
                             detail='Not all chunks available for assembling')
         return
 
+    # Ensure blobs are in the order and duplication in which they were
+    # transmitted. Otherwise, we would assemble the file in the wrong order.
+    ids_by_checksum = {chks: id for id, chks, _ in file_blobs}
+    file_blob_ids = [ids_by_checksum[c] for c in chunks]
+
     file = File.objects.create(
         name=name,
         checksum=checksum,
diff --git a/tests/sentry/tasks/test_assemble.py b/tests/sentry/tasks/test_assemble.py
index 190ff4640b..808078f7b0 100644
--- a/tests/sentry/tasks/test_assemble.py
+++ b/tests/sentry/tasks/test_assemble.py
@@ -120,6 +120,37 @@ class AssembleDifTest(BaseAssembleTest):
                           [x[1] for x in files], 'dummy.type')[0]
         assert f.checksum == file_checksum.hexdigest()
 
+    def test_assemble_duplicate_blobs(self):
+        files = []
+        file_checksum = sha1()
+        blob = os.urandom(1024 * 1024 * 8)
+        hash = sha1(blob).hexdigest()
+        for _ in xrange(8):
+            file_checksum.update(blob)
+            files.append((io.BytesIO(blob), hash))
+
+        # upload all blobs
+        FileBlob.from_files(files, organization=self.organization)
+
+        # find all blobs
+        for reference, checksum in files:
+            blob = FileBlob.objects.get(checksum=checksum)
+            ref_bytes = reference.getvalue()
+            assert blob.getfile().read(len(ref_bytes)) == ref_bytes
+            FileBlobOwner.objects.filter(
+                blob=blob,
+                organization=self.organization
+            ).get()
+
+        rv = assemble_file(AssembleTask.DIF,
+                           self.project, 'testfile', file_checksum.hexdigest(),
+                           [x[1] for x in files], 'dummy.type')
+
+        assert rv is not None
+        f, tmp = rv
+        assert f.checksum == file_checksum.hexdigest()
+        assert f.type == 'dummy.type'
+
 
 class AssembleArtifactsTest(BaseAssembleTest):
     def setUp(self):
