commit 17cb8c300790f0d2c4938e699be30ca891e01d64
Author: David Cramer <dcramer@David-Cramers-MacBook.local>
Date:   Tue Nov 10 09:22:08 2009 -0600

    Added the ability to log normal messages and better integrate with the logging module (requires DB changes).

diff --git a/README.rst b/README.rst
index ead9e8af92..5a8fa472c0 100644
--- a/README.rst
+++ b/README.rst
@@ -4,6 +4,20 @@ django-db-log
 
 Logs Django exceptions to your database handler.
 
+=========
+Upgrading
+=========
+
+If you are upgrading from a version older than 1.3.0 you will need to update your database::
+
+	python manage.py sql djangodblog > dblog.sql
+	mysqldump -d --skip-opt -uroot -p yourdatabase djangodblog_error djangodblog_errorbatch > dblog.cur.sql
+	diff -u dblog.sql dblog.cur.sql
+
+Note: the above example is using MySQL, and isn't going to give anywhere near a precise diff.
+
+Review the diff, then make any changes which appear nescesary.
+
 =======
 Install
 =======
@@ -94,6 +108,21 @@ You can also record errors outside of middleware if you want::
 	except Exception, exc:
 		Error.objects.create_from_exception(exc, [url=None])
 
+If you wish to log normal messages:
+
+	from djangodblog.models import Error
+	import logging
+	
+	Error.objects.create_from_text('Error Type', 'Error Message'[, level=logging.WARNING, url=None])
+
+Both the ``url`` and ``level`` parameters are optional. ``level`` should be one of the following:
+
+* logging.DEBUG
+* logging.INFO
+* logging.WARNING
+* logging.ERROR
+* logging.FATAL
+
 =====
 Notes
 =====
diff --git a/djangodblog/__init__.py b/djangodblog/__init__.py
index 023c9d6587..338052d024 100644
--- a/djangodblog/__init__.py
+++ b/djangodblog/__init__.py
@@ -1 +1 @@
-__version__ = (1, 2, 0)
\ No newline at end of file
+__version__ = (1, 3, 0)
\ No newline at end of file
diff --git a/djangodblog/admin.py b/djangodblog/admin.py
index 43968030cd..aa3bcd59ba 100644
--- a/djangodblog/admin.py
+++ b/djangodblog/admin.py
@@ -1,10 +1,11 @@
 from django.contrib import admin
-from djangodblog.models import ErrorBatch, Error
+
+from models import ErrorBatch, Error
 
 class ErrorBatchAdmin(admin.ModelAdmin):
-    list_display    = ('class_name', 'is_resolved', 'message', 'last_seen', 'times_seen', 'url', 'server_name')
-    list_filter     = ('class_name', 'times_seen', 'server_name', 'is_resolved')
-    ordering        = ('-last_seen',)
+    list_display    = ('class_name', 'status', 'message', 'last_seen', 'times_seen', 'url', 'server_name')
+    list_filter     = ('class_name', 'server_name', 'status')
+    ordering        = ('status', '-last_seen')
 
 class ErrorAdmin(admin.ModelAdmin):
     list_display    = ('class_name', 'message', 'datetime', 'url', 'server_name')
diff --git a/djangodblog/manager.py b/djangodblog/manager.py
index f519addc9a..745267b425 100644
--- a/djangodblog/manager.py
+++ b/djangodblog/manager.py
@@ -16,6 +16,7 @@ try:
 except ImportError:
     import dummy_thread as thread
 import traceback
+import logging
 import socket
 import warnings
 import datetime
@@ -96,13 +97,50 @@ class DBLogManager(models.Manager):
             del savepoint_state[thread_ident]
         return ret
 
+    def create_from_text(self, type, message, level=logging.FATAL, url=None):
+        from models import Error, ErrorBatch
+
+        server_name = socket.gethostname()
+        checksum    = md5_constructor(level)
+        checksum.update(type)
+        checksum.update(message)
+        checksum    = checksum.hexdigest()
+        
+        defaults = dict(
+            class_name  = type,
+            message     = smart_unicode(message),
+            url         = url,
+            server_name = server_name,
+        )
+
+        try:
+            instance = Error.objects.create(**defaults)
+            batch, created = ErrorBatch.objects.get_or_create(
+                class_name = class_name,
+                server_name = server_name,
+                checksum = checksum,
+                defaults = defaults
+            )
+            if not created:
+                batch.times_seen += 1
+                batch.status = 0
+                batch.last_seen = datetime.datetime.now()
+                batch.save()
+        except Exception, exc:
+            warnings.warn(smart_unicode(exc))
+        else:
+            return instance
+        
     def create_from_exception(self, exception, url=None):
         from models import Error, ErrorBatch
         
         server_name = socket.gethostname()
         tb_text     = traceback.format_exc()
         class_name  = exception.__class__.__name__
-        checksum    = md5_constructor(tb_text).hexdigest()
+        checksum    = md5_constructor(logging.FATAL)
+        checksum.update(class_name)
+        checksum.update(tb_text)
+        checksum    = checksum.hexdigest()
 
         defaults = dict(
             class_name  = class_name,
@@ -122,7 +160,7 @@ class DBLogManager(models.Manager):
             )
             if not created:
                 batch.times_seen += 1
-                batch.resolved = False
+                batch.status = 0
                 batch.last_seen = datetime.datetime.now()
                 batch.save()
         except Exception, exc:
diff --git a/djangodblog/middleware.py b/djangodblog/middleware.py
index 8e8cf41688..b18476e41f 100644
--- a/djangodblog/middleware.py
+++ b/djangodblog/middleware.py
@@ -1,7 +1,7 @@
 from django.conf import settings
 from django.http import Http404
 
-from djangodblog.models import Error
+from models import Error
 
 __all__ = ('DBLogMiddleware',)
 
diff --git a/djangodblog/models.py b/djangodblog/models.py
index d72e2a6ad3..95da167167 100644
--- a/djangodblog/models.py
+++ b/djangodblog/models.py
@@ -13,11 +13,28 @@ from manager import DBLogManager
 
 __all__ = ('Error', 'ErrorBatch')
 
+import logging
+
+LOG_LEVELS = (
+    ('Info', logging.INFO),
+    ('Warning', logging.WARNING),
+    ('Debug', logging.DEBUG),
+    ('Error', logging.ERROR),
+    ('Fatal', logging.FATAL),
+)
+
+STATUS_LEVELS = (
+    ('Unresolved', 0),
+    ('Resolved', 1),
+)
+
 class ErrorBatch(Model):
     class_name      = models.CharField(_('type'), max_length=128)
+    level           = models.PositiveIntegerField(choices=LOG_LEVELS, default=logging.ERROR, blank=True)
     message         = models.TextField()
-    traceback       = models.TextField()
-    is_resolved     = models.BooleanField(default=False)
+    traceback       = models.TextField(blank=True, null=True)
+    # XXX: We're using the legacy column for `is_resolved` for status
+    status          = models.PositiveIntegerField(default=0, db_column="is_resolved")
     times_seen      = models.PositiveIntegerField(default=1)
     last_seen       = models.DateTimeField(default=datetime.datetime.now)
     first_seen      = models.DateTimeField(default=datetime.datetime.now)
@@ -36,8 +53,9 @@ class ErrorBatch(Model):
 
 class Error(Model):
     class_name      = models.CharField(_('type'), max_length=128)
+    level           = models.PositiveIntegerField(choices=LOG_LEVELS, default=logging.FATAL, blank=True)
     message         = models.TextField()
-    traceback       = models.TextField()
+    traceback       = models.TextField(blank=True, null=True)
     datetime        = models.DateTimeField(default=datetime.datetime.now)
     url             = models.URLField(verify_exists=False, null=True, blank=True)
     server_name     = models.CharField(max_length=128, db_index=True)
