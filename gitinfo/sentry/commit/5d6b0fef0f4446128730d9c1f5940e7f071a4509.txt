commit 5d6b0fef0f4446128730d9c1f5940e7f071a4509
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 11 14:54:45 2015 -0700

    Move sourcemap errors out of frames
    
    - Moves sourcemap errors to event.data['errors']
    - Adds rendering of top level errors
    
    Fixes GH-1746

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 6e91556261..075fb895cf 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -28,9 +28,8 @@ from sentry.constants import (
     CLIENT_RESERVED_ATTRS, DEFAULT_LOG_LEVEL, LOG_LEVELS, MAX_TAG_VALUE_LENGTH,
     MAX_TAG_KEY_LENGTH
 )
-from sentry.event_manager import EventError
 from sentry.interfaces.base import get_interface
-from sentry.models import Project, ProjectKey
+from sentry.models import EventError, Project, ProjectKey
 from sentry.tasks.store import preprocess_event
 from sentry.utils import is_float, json
 from sentry.utils.auth import parse_auth_header
diff --git a/src/sentry/data/samples/javascript.json b/src/sentry/data/samples/javascript.json
index f3399476e2..9510993c57 100644
--- a/src/sentry/data/samples/javascript.json
+++ b/src/sentry/data/samples/javascript.json
@@ -1,5 +1,10 @@
 {
     "culprit": "views.js in updateMember",
+    "errors": [
+        {"type": "invalid_attribute", "name": "foobar"},
+        {"type": "invalid_attribute", "name": "foobar"},
+        {"type": "invalid_data", "name": "event_id", "value": "86f7e437faa5a7fce15d1ddcb9eaeaea377667b8"}
+    ],
     "sentry.interfaces.Exception": {
         "values": [
             {
@@ -15,7 +20,6 @@
                                 "",
                                 "        renderMemberInContainer: function(member){"
                             ],
-                            "errors": ["This is an example error"],
                             "vars": {},
                             "module": null,
                             "filename": "../../sentry/scripts/views.js",
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 0c815d2bae..d7a18f7e0a 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -151,11 +151,6 @@ class ScoreClause(object):
         return math.log(times_seen) * 600 + float(last_seen.strftime('%s'))
 
 
-class EventError(object):
-    INVALID_DATA = 'invalid_data'
-    INVALID_ATTRIBUTE = 'invalid_attribute'
-
-
 class EventManager(object):
     logger = logging.getLogger('sentry.events')
 
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index b9f5ec96b8..ccaeed02ba 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -19,7 +19,7 @@ from urlparse import urlparse, urljoin, urlsplit
 from sentry import http
 from sentry.constants import MAX_CULPRIT_LENGTH
 from sentry.interfaces.stacktrace import Stacktrace
-from sentry.models import Project, Release, ReleaseFile
+from sentry.models import EventError, Project, Release, ReleaseFile
 from sentry.utils.cache import cache
 from sentry.utils.http import is_valid_origin
 from sentry.utils.strings import truncatechars
@@ -50,14 +50,6 @@ MAX_RESOURCE_FETCHES = 100
 
 # TODO(dcramer): we want to change these to be constants so they are easier
 # to translate/link again
-ERR_DOMAIN_BLACKLISTED = 'The domain has been temporarily blacklisted due to previous failures:\n{reason}.'
-ERR_GENERIC_FETCH_FAILURE = 'A {type} error was hit while fetching the source'
-ERR_HTTP_CODE = 'Received HTTP {status_code} response'
-ERR_NO_COLUMN = 'No column information available (cant expand sourcemap)'
-ERR_MISSING_SOURCE = 'Source was not found: {filename}'
-ERR_SOURCEMAP_UNPARSEABLE = 'Sourcemap was not parseable (likely invalid JSON)'
-ERR_TOO_MANY_REMOTE_SOURCES = 'Not fetching context due to too many remote sources'
-ERR_UNKNOWN_INTERNAL_ERROR = 'An unknown internal error occurred while attempting to fetch the source'
 
 UrlResult = namedtuple('UrlResult', ['url', 'headers', 'body'])
 
@@ -65,19 +57,22 @@ logger = logging.getLogger(__name__)
 
 
 class BadSource(Exception):
-    pass
+    error_type = EventError.UNKNOWN_ERROR
 
-
-class DomainBlacklisted(BadSource):
-    pass
+    def __init__(self, data=None):
+        if data is None:
+            data = {}
+        data.setdefault('type', self.error_type)
+        super(BadSource, self).__init__(data['type'])
+        self.data = data
 
 
 class CannotFetchSource(BadSource):
-    pass
+    error_type = EventError.JS_GENERIC_FETCH_ERROR
 
 
 class UnparseableSourcemap(BadSource):
-    pass
+    error_type = EventError.JS_INVALID_SOURCEMAP
 
 
 def trim_line(line, column=0):
@@ -235,14 +230,12 @@ def fetch_url(url, project=None, release=None):
     if result is None:
         # lock down domains that are problematic
         domain = urlparse(url).netloc
-        domain_key = 'source:blacklist:%s' % (
+        domain_key = 'source:blacklist:v2:%s' % (
             md5(domain.encode('utf-8')).hexdigest(),
         )
         domain_result = cache.get(domain_key)
         if domain_result:
-            raise DomainBlacklisted(ERR_DOMAIN_BLACKLISTED.format(
-                reason=domain_result,
-            ))
+            raise CannotFetchSource(domain_result)
 
         headers = {}
         if project and is_valid_origin(url, project=project):
@@ -264,14 +257,20 @@ def fetch_url(url, project=None, release=None):
         except Exception as exc:
             logger.debug('Unable to fetch %r', url, exc_info=True)
             if isinstance(exc, SuspiciousOperation):
-                error = unicode(exc)
+                error = {
+                    'type': EventError.SECURITY_VIOLATION,
+                    'value': unicode(exc)
+                }
             elif isinstance(exc, (RequestException, ZeroReturnError)):
-                error = ERR_GENERIC_FETCH_FAILURE.format(
-                    type=type(exc),
-                )
+                error = {
+                    'type': EventError.JS_GENERIC_FETCH_ERROR,
+                    'value': type(exc),
+                }
             else:
                 logger.exception(unicode(exc))
-                error = ERR_UNKNOWN_INTERNAL_ERROR
+                error = {
+                    'type': EventError.UNKNOWN_ERROR,
+                }
 
             # TODO(dcramer): we want to be less aggressive on disabling domains
             cache.set(domain_key, error or '', 300)
@@ -294,9 +293,10 @@ def fetch_url(url, project=None, release=None):
     if result[2] != 200:
         logger.debug('HTTP %s when fetching %r', result[2], url,
                      exc_info=True)
-        error = ERR_HTTP_CODE.format(
-            status_code=result[2],
-        )
+        error = {
+            'type': EventError.JS_INVALID_HTTP_CODE,
+            'value': result[2],
+        }
         raise CannotFetchSource(error)
 
     return UrlResult(url, result[0], result[1])
@@ -319,7 +319,9 @@ def fetch_sourcemap(url, project=None, release=None):
     try:
         return sourcemap_to_index(body)
     except (JSONDecodeError, ValueError):
-        raise UnparseableSourcemap(ERR_SOURCEMAP_UNPARSEABLE)
+        raise UnparseableSourcemap({
+            'value': url,
+        })
 
 
 def is_data_uri(url):
@@ -423,12 +425,14 @@ class SourceProcessor(object):
             id=data['project'],
         )
 
-        release = self.get_release(project, data)
+        data.setdefault('errors', [])
+        errors = data['errors']
 
+        release = self.get_release(project, data)
         # all of these methods assume mutation on the original
         # objects rather than re-creation
         self.populate_source_cache(project, frames, release)
-        self.expand_frames(frames)
+        errors.extend(self.expand_frames(frames) or [])
         self.ensure_module_names(frames)
         self.fix_culprit(data, stacktraces)
         self.update_stacktraces(stacktraces)
@@ -458,13 +462,13 @@ class SourceProcessor(object):
 
         cache = self.cache
         sourcemaps = self.sourcemaps
+        all_errors = []
 
         for frame in frames:
             errors = cache.get_errors(frame.abs_path)
             if errors:
                 has_changes = True
-
-            frame.errors = errors
+                all_errors.extend(errors)
 
             source = cache.get(frame.abs_path)
             if source is None:
@@ -491,11 +495,12 @@ class SourceProcessor(object):
                     }
                     errors = cache.get_errors(abs_path)
                     if errors:
-                        frame.errors.extend(errors)
+                        all_errors.extend(errors)
                     else:
-                        frame.errors.append(ERR_MISSING_SOURCE.format(
-                            filename=abs_path.encode('utf-8'),
-                        ))
+                        all_errors.append({
+                            'type': 'missing_source',
+                            'filename': abs_path.encode('utf-8'),
+                        })
 
                 # Store original data in annotation
                 frame.data = {
@@ -528,6 +533,7 @@ class SourceProcessor(object):
             # TODO: theoretically a minified source could point to another mapped, minified source
             frame.pre_context, frame.context_line, frame.post_context = get_source_context(
                 source=source, lineno=frame.lineno, colno=frame.colno or 0)
+        return all_errors
 
     def populate_source_cache(self, project, frames, release):
         pending_file_list = set()
@@ -549,7 +555,9 @@ class SourceProcessor(object):
             done_file_list.add(filename)
 
             if idx > self.max_fetches:
-                cache.add_error(filename, ERR_TOO_MANY_REMOTE_SOURCES)
+                cache.add_error(filename, {
+                    'type': EventError.JS_TOO_MANY_REMOTE_SOURCES,
+                })
                 continue
 
             # TODO: respect cache-control/max-age headers to some extent
@@ -557,7 +565,7 @@ class SourceProcessor(object):
             try:
                 result = fetch_url(filename, project=project, release=release)
             except BadSource as exc:
-                cache.add_error(filename, unicode(exc))
+                cache.add_error(filename, exc.data)
                 continue
 
             cache.add(filename, result.body.splitlines())
@@ -569,7 +577,10 @@ class SourceProcessor(object):
 
             # If we didn't have a colno, a sourcemap wont do us any good
             if filename not in sourcemap_capable:
-                cache.add_error(filename, ERR_NO_COLUMN)
+                cache.add_error(filename, {
+                    'type': EventError.JS_NO_COLUMN,
+                    'filename': filename,
+                })
                 continue
 
             logger.debug('Found sourcemap %r for minified script %r', sourcemap_url[:256], result.url)
@@ -586,7 +597,7 @@ class SourceProcessor(object):
                     release=release,
                 )
             except BadSource as exc:
-                cache.add_error(filename, unicode(exc))
+                cache.add_error(filename, exc.data)
                 continue
 
             sourcemaps.add(sourcemap_url, sourcemap_idx)
diff --git a/src/sentry/models/eventerror.py b/src/sentry/models/eventerror.py
new file mode 100644
index 0000000000..600a667436
--- /dev/null
+++ b/src/sentry/models/eventerror.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import
+
+
+class EventError(object):
+    INVALID_DATA = 'invalid_data'
+    INVALID_ATTRIBUTE = 'invalid_attribute'
+    UNKNOWN_ERROR = 'unknown_error'
+    SECURITY_VIOLATION = 'security_violation'
+
+    JS_GENERIC_FETCH_ERROR = 'js_generic_fetch_error'
+    JS_INVALID_HTTP_CODE = 'js_invalid_http_code'
+    JS_NO_COLUMN = 'js_no_column'
+    JS_MISSING_SOURCE = 'js_no_source'
+    JS_INVALID_SOURCEMAP = 'js_invalid_source'
+    JS_TOO_MANY_REMOTE_SOURCES = 'js_too_many_sources'
+
+    _titles = {
+        INVALID_DATA: 'Discarded invalid data',
+        INVALID_ATTRIBUTE: 'Discarded invalid attribute',
+        UNKNOWN_ERROR: 'Unknown error',
+        SECURITY_VIOLATION: 'Security violation',
+        JS_GENERIC_FETCH_ERROR: 'Unable to fetch URL',
+        JS_INVALID_HTTP_CODE: 'HTTP returned unsuccessful response',
+        JS_NO_COLUMN: 'No column information available',
+        JS_MISSING_SOURCE: 'Source code was not found',
+        JS_INVALID_SOURCEMAP: 'Sourcemap was invalid or not parseable',
+        JS_TOO_MANY_REMOTE_SOURCES: 'Too many remote source requests',
+    }
+
+    @classmethod
+    def get_title(cls, type):
+        return cls._titles[type]
diff --git a/src/sentry/static/sentry/less/sentry.less b/src/sentry/static/sentry/less/sentry.less
index 0948430ae3..feed44d85c 100644
--- a/src/sentry/static/sentry/less/sentry.less
+++ b/src/sentry/static/sentry/less/sentry.less
@@ -3646,3 +3646,25 @@ fieldset {
     border-radius: 3px;
   }
 }
+
+.event-errors {
+  margin: 20px 0 20px;
+  padding: 10px 10px 0;
+  border: 1px solid @red;
+  background: lighten(@red, 38);
+  color: #000;
+  list-style-type: none;
+  white-space: normal;
+  font-family: "Helvetica Neue", sans-serif;
+  box-sizing: border-box;
+  border-radius: 0;
+
+  h4 {
+    margin-bottom: 10px;
+  }
+  pre {
+    background: inherit;
+    padding: 0;
+    color: inherit;
+  }
+}
diff --git a/src/sentry/templates/sentry/partial/_event_details.html b/src/sentry/templates/sentry/partial/_event_details.html
index 878b8946be..99373abe5e 100644
--- a/src/sentry/templates/sentry/partial/_event_details.html
+++ b/src/sentry/templates/sentry/partial/_event_details.html
@@ -1,6 +1,22 @@
 {% load i18n %}
 {% load sentry_helpers %}
 
+{% if errors %}
+    <div id="errors" class="event-errors">
+        <h4>There were errors encountered while processing this event</h4>
+        <ul>
+            {% for error in errors %}
+                <li>
+                    {{ error.title }}<br />
+                    {% if error.data %}
+                    <pre>{{ error.data }}</pre>
+                    {% endif %}
+                </li>
+            {% endfor %}
+        </ul>
+    </div>
+{% endif %}
+
 {% if tags %}
     <div id="tags">
         <div class="page-header">
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index 9ece0db82b..beb3b1f075 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -30,7 +30,8 @@ from sentry.constants import (
 )
 from sentry.db.models import create_or_update
 from sentry.models import (
-    Project, Group, GroupMeta, Event, Activity, EventMapping, TagKey, GroupSeen
+    Project, Group, GroupMeta, Event, EventError, Activity, EventMapping,
+    TagKey, GroupSeen
 )
 from sentry.permissions import can_create_projects
 from sentry.plugins import plugins
@@ -184,9 +185,31 @@ def render_with_group_context(group, template, context, request=None,
             if not isinstance(extra_data, dict):
                 extra_data = {}
 
+            errors = []
+            error_set = set()
+            for error in event.data.get('errors'):
+                error_data = json.dumps({
+                    k: v for k, v in error.iteritems()
+                    if k != 'type'
+                })
+                if error_data == '{}':
+                    error_data = None
+
+                error_hash = (error['type'], error_data)
+                if error_hash in error_set:
+                    continue
+                error_set.add(error_hash)
+                error_result = {
+                    'type': error['type'],
+                    'title': EventError.get_title(error['type']),
+                    'data': error_data,
+                }
+                errors.append(error_result)
+
             context.update({
                 'tags': event.get_tags(),
                 'json_data': extra_data,
+                'errors': errors,
             })
 
         context.update({
diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
index 18b7bc3d9a..8be222381b 100644
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ b/tests/sentry/lang/javascript/test_plugin.py
@@ -156,11 +156,12 @@ class JavascriptIntegrationTest(TestCase):
         assert resp.status_code, 200
 
         event = Event.objects.get()
+        assert not event.data['errors']
+
         exception = event.interfaces['sentry.interfaces.Exception']
         frame_list = exception.values[0].stacktrace.frames
 
         frame = frame_list[0]
-        assert not frame.errors
         assert frame.pre_context == [
             'function add(a, b) {',
             '\t"use strict";',
@@ -253,11 +254,12 @@ class JavascriptIntegrationTest(TestCase):
         assert resp.status_code, 200
 
         event = Event.objects.get()
+        assert not event.data['errors']
+
         exception = event.interfaces['sentry.interfaces.Exception']
         frame_list = exception.values[0].stacktrace.frames
 
         frame = frame_list[0]
-        assert not frame.errors
         assert frame.pre_context == [
             'function add(a, b) {',
             '\t"use strict";',
