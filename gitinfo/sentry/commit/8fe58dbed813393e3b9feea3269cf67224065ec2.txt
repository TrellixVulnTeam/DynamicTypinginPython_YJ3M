commit 8fe58dbed813393e3b9feea3269cf67224065ec2
Author: Dan Fuller <dfuller@sentry.io>
Date:   Thu Mar 5 17:42:35 2020 -0800

    fix(data): Repair data in AuditLogEntry.data
    
    We have two types of objects in `AuditLogEntry.data` that shouldn't be there:
    - Generally, there are some rows that have a `BitHandler` in the `flags` key, when it should
      actually be an int. There's no specific error associated with this, but since we're iterating
      the table it seemed to make sense to fix
    - For logs of type MEMBER_ACCEPT, there are some rows that have actual `Team` instances pickled in
      the `teams` key, rather than a list of ints, and a corresponding list of slugs in `teams_slugs`.
      Correcting this data fixes SENTRY-FAM
    
    I've marked this as `is_dangerous` since we have low 10MM of rows in this table. Not sure how many
    rows it'll update since there might be a lot of rows with that incorrect flags key. There are ~350k
    max MEMBER_ACCEPT rows, so there shouldn't be too many updates there.
    
    Tested this manually against an invalid pickle and things look to work as expected.
    
    Once this has run, we can also remove the fixer code in
    `sentry.api.serializers.models.auditlogentry.fix`. That should be in a separate pr though.

diff --git a/migrations_lockfile.txt b/migrations_lockfile.txt
index d1d9ec728c..b590736f2f 100644
--- a/migrations_lockfile.txt
+++ b/migrations_lockfile.txt
@@ -10,7 +10,7 @@ auth: 0008_alter_user_username_max_length
 contenttypes: 0002_remove_content_type_name
 jira_ac: 0001_initial
 nodestore: 0001_initial
-sentry: 0050_auto_20200306_2346
+sentry: 0051_fix_auditlog_pickled_data
 sessions: 0001_initial
 sites: 0002_alter_domain_unique
 social_auth: 0001_initial
diff --git a/src/sentry/migrations/0051_fix_auditlog_pickled_data.py b/src/sentry/migrations/0051_fix_auditlog_pickled_data.py
new file mode 100644
index 0000000000..2bac18a26c
--- /dev/null
+++ b/src/sentry/migrations/0051_fix_auditlog_pickled_data.py
@@ -0,0 +1,54 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.28 on 2020-03-06 00:49
+from __future__ import unicode_literals
+
+from bitfield.types import BitHandler
+from django.db import migrations
+
+from sentry.utils.query import RangeQuerySetWrapperWithProgressBar
+
+
+def cleanup_audit_log_data(apps, schema_editor):
+    """
+    Fix `AuditLogEntry` rows that have pickled `Team` models in their `data` field. Also
+    fixes some rows where flags were serialized as a BitHandler rather than a int.
+    See sentry.api.serializers.models.auditlogentry::fix for details.
+    """
+    AuditLogEntry = apps.get_model("sentry", "AuditLogEntry")
+    for audit_log in RangeQuerySetWrapperWithProgressBar(AuditLogEntry.objects.all()):
+        modified = False
+        if "flags" in audit_log.data and isinstance(audit_log.data["flags"], BitHandler):
+            audit_log.data["flags"] = int(audit_log.data["flags"])
+            modified = True
+        if audit_log.event == 3:  # MEMBER_ACCEPT
+            teams = audit_log.data.get("teams")
+            if teams and hasattr(teams[0], "id"):
+                # We have a team in here rather than just the expected data
+                audit_log.data["teams"] = [team.id for team in teams]
+                audit_log.data["teams_slugs"] = [team.slug for team in teams]
+                modified = True
+        if modified:
+            audit_log.save()
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = True
+
+    # This flag is used to decide whether to run this migration in a transaction or not.
+    # By default we prefer to run in a transaction, but for migrations where you want
+    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
+    # want to create an index concurrently when adding one to an existing table.
+    atomic = True
+
+    dependencies = [("sentry", "0050_auto_20200306_2346")]
+
+    operations = [migrations.RunPython(code=cleanup_audit_log_data)]
