commit da6c524d586d638faf1accafad600f8326a437ac
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Feb 20 12:35:22 2018 -0800

    fix(environments): Handle the empty environment case in the stream (#7292)
    
    Fix some bugs in how the stream view is handling a null and empty environment

diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index ed70ee57e3..ef558aa694 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -538,7 +538,7 @@ const Stream = createReactClass({
 
       let query = streamUtils.getQueryStringWithEnvironment(
         this.state.query,
-        environment.name
+        environment === null ? null : environment.name
       );
 
       this.setState(
diff --git a/src/sentry/static/sentry/app/views/stream/utils.js b/src/sentry/static/sentry/app/views/stream/utils.js
index d047110ef3..f8f8bdab8c 100644
--- a/src/sentry/static/sentry/app/views/stream/utils.js
+++ b/src/sentry/static/sentry/app/views/stream/utils.js
@@ -10,7 +10,7 @@ function getQueryEnvironment(qs) {
 }
 
 function getQueryStringWithEnvironment(qs, env) {
-  const qsWithoutEnv = qs.replace(/environment:\w+/g, '');
+  const qsWithoutEnv = qs.replace(/environment:\w*/g, '');
   return formatQueryString(
     env === null ? qsWithoutEnv : qsWithoutEnv + ` environment:${env}`
   );
diff --git a/tests/js/spec/views/__snapshots__/stream.spec.jsx.snap b/tests/js/spec/views/__snapshots__/stream.spec.jsx.snap
new file mode 100644
index 0000000000..6f3b6ec834
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/stream.spec.jsx.snap
@@ -0,0 +1,201 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Stream toggles environment select all environments 1`] = `
+<Container>
+  <div
+    className="stream-row"
+  >
+    <div
+      className="stream-content"
+    >
+      <StreamFilters
+        access={Set {}}
+        isSearchDisabled={false}
+        onSavedSearchCreate={[Function]}
+        onSearch={[Function]}
+        onSidebarToggle={[Function]}
+        onSortChange={[Function]}
+        orgId="123"
+        projectId="456"
+        query="is:unresolved"
+        queryCount={null}
+        savedSearchList={Array []}
+        searchId={null}
+        sort="date"
+        tags={
+          Object {
+            "assigned": Object {
+              "key": "assigned",
+              "name": "Assigned To",
+              "predefined": true,
+              "values": Array [],
+            },
+            "bookmarks": Object {
+              "key": "bookmarks",
+              "name": "Bookmarked By",
+              "predefined": true,
+              "values": Array [],
+            },
+            "event.timestamp": Object {
+              "key": "event.timestamp",
+              "name": "Event Timestamp",
+              "predefined": true,
+              "values": Array [
+                "2017-01-02",
+                ">=2017-01-02T01:00:00",
+                "<2017-01-02T02:00:00",
+              ],
+            },
+            "firstSeen": Object {
+              "key": "firstSeen",
+              "name": "First Seen",
+              "predefined": true,
+              "values": Array [
+                "-1h",
+                "+1d",
+                "-1w",
+              ],
+            },
+            "has": Object {
+              "key": "has",
+              "name": "Has Tag",
+              "predefined": true,
+              "values": Array [],
+            },
+            "is": Object {
+              "key": "is",
+              "name": "Status",
+              "predefined": true,
+              "values": Array [
+                "resolved",
+                "unresolved",
+                "ignored",
+                "muted",
+                "assigned",
+                "unassigned",
+              ],
+            },
+            "lastSeen": Object {
+              "key": "lastSeen",
+              "name": "Last Seen",
+              "predefined": true,
+              "values": Array [
+                "-1h",
+                "+1d",
+                "-1w",
+              ],
+            },
+            "timesSeen": Object {
+              "key": "timesSeen",
+              "name": "Times Seen",
+              "predefined": true,
+              "values": Array [],
+            },
+          }
+        }
+      />
+      <Sticky
+        bottomOffset={0}
+        disableCompensation={false}
+        disableHardwareAcceleration={false}
+        relative={false}
+        topOffset={59}
+      />
+      <ul
+        className="group-list"
+      >
+        <StreamGroup
+          canSelect={true}
+          id="1"
+          key="1"
+          orgId="123"
+          projectId="456"
+          statsPeriod="24h"
+        />
+      </ul>
+      <Pagination
+        onCursor={[Function]}
+        pageLinks=""
+      />
+    </div>
+    <StreamSidebar
+      loading={true}
+      onQueryChange={[Function]}
+      orgId="123"
+      projectId="456"
+      query="is:unresolved"
+      tags={
+        Object {
+          "assigned": Object {
+            "key": "assigned",
+            "name": "Assigned To",
+            "predefined": true,
+            "values": Array [],
+          },
+          "bookmarks": Object {
+            "key": "bookmarks",
+            "name": "Bookmarked By",
+            "predefined": true,
+            "values": Array [],
+          },
+          "event.timestamp": Object {
+            "key": "event.timestamp",
+            "name": "Event Timestamp",
+            "predefined": true,
+            "values": Array [
+              "2017-01-02",
+              ">=2017-01-02T01:00:00",
+              "<2017-01-02T02:00:00",
+            ],
+          },
+          "firstSeen": Object {
+            "key": "firstSeen",
+            "name": "First Seen",
+            "predefined": true,
+            "values": Array [
+              "-1h",
+              "+1d",
+              "-1w",
+            ],
+          },
+          "has": Object {
+            "key": "has",
+            "name": "Has Tag",
+            "predefined": true,
+            "values": Array [],
+          },
+          "is": Object {
+            "key": "is",
+            "name": "Status",
+            "predefined": true,
+            "values": Array [
+              "resolved",
+              "unresolved",
+              "ignored",
+              "muted",
+              "assigned",
+              "unassigned",
+            ],
+          },
+          "lastSeen": Object {
+            "key": "lastSeen",
+            "name": "Last Seen",
+            "predefined": true,
+            "values": Array [
+              "-1h",
+              "+1d",
+              "-1w",
+            ],
+          },
+          "timesSeen": Object {
+            "key": "timesSeen",
+            "name": "Times Seen",
+            "predefined": true,
+            "values": Array [],
+          },
+        }
+      }
+    />
+  </div>
+</Container>
+`;
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index 87c54e69d3..14678418d8 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -7,6 +7,8 @@ import {Client} from 'app/api';
 import CursorPoller from 'app/utils/cursorPoller';
 import LoadingError from 'app/components/loadingError';
 import Stream from 'app/views/stream';
+import EnvironmentStore from 'app/stores/environmentStore';
+import {setActiveEnvironment} from 'app/actionCreators/environments';
 
 jest.unmock('app/api');
 jest.mock('app/stores/groupStore');
@@ -135,7 +137,7 @@ describe('Stream', function() {
       expect(stream.lastRequest).toBeNull();
     });
 
-    it('sends environment attribute if one is set', function() {
+    it('sends environment attribute', function() {
       stubbedApiRequest.restore();
 
       let requestCancel = sandbox.stub();
@@ -271,6 +273,20 @@ describe('Stream', function() {
     });
   });
 
+  describe('toggles environment', function() {
+    it('select all environments', function() {
+      EnvironmentStore.loadInitialData(TestStubs.Environments());
+      setActiveEnvironment(null);
+      wrapper.setState({
+        error: false,
+        groupIds: ['1'],
+        loading: false,
+        dataLoading: false,
+      });
+      expect(wrapper).toMatchSnapshot();
+    });
+  });
+
   describe('componentWillMount()', function() {
     afterEach(function() {
       Cookies.remove('realtimeActive');
