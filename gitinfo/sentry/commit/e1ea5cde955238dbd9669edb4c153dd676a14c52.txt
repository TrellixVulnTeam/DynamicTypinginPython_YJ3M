commit e1ea5cde955238dbd9669edb4c153dd676a14c52
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Oct 2 14:50:15 2017 -0700

    ref: Improve logging/defensiveness for runtime behavior

diff --git a/src/sentry/options/store.py b/src/sentry/options/store.py
index 17c0ef12ce..d8e499e4ec 100644
--- a/src/sentry/options/store.py
+++ b/src/sentry/options/store.py
@@ -94,7 +94,9 @@ class OptionsStore(object):
             value = self.cache.get(cache_key)
         except Exception:
             if not silent:
-                logger.warn(CACHE_FETCH_ERR, key.name, exc_info=True)
+                logger.warn(CACHE_FETCH_ERR, key.name, extra={
+                    'key': key.name,
+                }, exc_info=True)
             value = None
 
         if value is not None and key.ttl > 0:
@@ -163,9 +165,11 @@ class OptionsStore(object):
             value = self.model.objects.get(key=key.name).value
         except self.model.DoesNotExist:
             value = None
-        except Exception as e:
+        except Exception:
             if not silent:
-                logger.exception(six.text_type(e))
+                logger.exception('option.failed-lookup', extra={
+                    'key': key.name,
+                })
             value = None
         else:
             # we only attempt to populate the cache if we were previously
@@ -176,7 +180,9 @@ class OptionsStore(object):
                 self.set_cache(key, value)
             except Exception:
                 if not silent:
-                    logger.warn(CACHE_UPDATE_ERR, key.name, exc_info=True)
+                    logger.warn(CACHE_UPDATE_ERR, key.name, extra={
+                        'key': key.name,
+                    }, exc_info=True)
         return value
 
     def set(self, key, value):
@@ -214,7 +220,9 @@ class OptionsStore(object):
             self.cache.set(cache_key, value, self.ttl)
             return True
         except Exception:
-            logger.warn(CACHE_UPDATE_ERR, key.name, exc_info=True)
+            logger.warn(CACHE_UPDATE_ERR, key.name, extra={
+                'key': key.name,
+            }, exc_info=True)
             return False
 
     def delete(self, key):
@@ -243,7 +251,9 @@ class OptionsStore(object):
             self.cache.delete(cache_key)
             return True
         except Exception:
-            logger.warn(CACHE_UPDATE_ERR, key.name, exc_info=True)
+            logger.warn(CACHE_UPDATE_ERR, key.name, extra={
+                'key': key.name,
+            }, exc_info=True)
             return False
 
     def clean_local_cache(self):
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index f504515e4b..f086c2dc3a 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -32,7 +32,8 @@ def register_plugins(settings):
         except Exception:
             import traceback
             click.echo(
-                "Failed to load plugin %r:\n%s" % (ep.name, traceback.format_exc()), err=True
+                "Failed to load plugin %r:\n%s" % (ep.name, traceback.format_exc()),
+                err=True
             )
         else:
             plugins.register(plugin)
@@ -43,8 +44,16 @@ def register_plugins(settings):
     from sentry import integrations
     from sentry.utils.imports import import_string
     for integration_path in settings.SENTRY_DEFAULT_INTEGRATIONS:
-        integration_cls = import_string(integration_path)
-        integrations.register(integration_cls)
+        try:
+            integration_cls = import_string(integration_path)
+        except Exception:
+            import traceback
+            click.echo(
+                "Failed to load integration %r:\n%s" % (integration_path, traceback.format_exc()),
+                err=True
+            )
+        else:
+            integrations.register(integration_cls)
 
 
 def init_plugin(plugin):
