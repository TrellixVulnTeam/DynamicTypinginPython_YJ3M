commit 347fce7e488c0ab03b34c9624119f6ed00a43e4d
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Mar 8 13:15:15 2018 -0800

    feat(environments): Add an environment aware link component
    
    Keeps environment in the query string when navigating

diff --git a/src/sentry/static/sentry/app/components/projectHeader/index.jsx b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
index 278d419fff..a5ffe732c4 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
@@ -2,6 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import {Link} from 'react-router';
 
+import ProjectLink from '../../components/projectLink';
 import ProjectSelector from './projectSelector';
 import BookmarkToggle from '../projects/bookmarkToggle';
 import DropdownLink from '../dropdownLink';
@@ -63,25 +64,31 @@ class ProjectHeader extends React.Component {
 
             <ul className="nav nav-tabs">
               <li className={navSection == 'stream' ? 'active' : ''}>
-                <Link to={`/${org.slug}/${project.slug}/`}>{t('Issues')}</Link>
+                <ProjectLink to={`/${org.slug}/${project.slug}/`}>
+                  {t('Issues')}
+                </ProjectLink>
               </li>
               {features.has('global-events') && (
                 <li className={navSection == 'events' ? 'active' : ''}>
-                  <Link to={`/${org.slug}/${project.slug}/events/`}>{t('Events')}</Link>
+                  <ProjectLink to={`/${org.slug}/${project.slug}/events/`}>
+                    {t('Events')}
+                  </ProjectLink>
                 </li>
               )}
               <li className={navSection == 'dashboard' ? 'active' : ''}>
-                <Link to={`/${org.slug}/${project.slug}/dashboard/`}>
+                <ProjectLink to={`/${org.slug}/${project.slug}/dashboard/`}>
                   {t('Overview')}
-                </Link>
+                </ProjectLink>
               </li>
               <li className={navSection == 'user-feedback' ? 'active' : ''}>
-                <Link to={`/${org.slug}/${project.slug}/user-feedback/`}>
+                <ProjectLink to={`/${org.slug}/${project.slug}/user-feedback/`}>
                   {t('User Feedback')}
-                </Link>
+                </ProjectLink>
               </li>
               <li className={navSection == 'releases' ? 'active' : ''}>
-                <Link to={`/${org.slug}/${project.slug}/releases/`}>{t('Releases')}</Link>
+                <ProjectLink to={`/${org.slug}/${project.slug}/releases/`}>
+                  {t('Releases')}
+                </ProjectLink>
               </li>
               {access.has('project:write') && (
                 <li className={navSection == 'settings' ? 'active' : ''}>
diff --git a/src/sentry/static/sentry/app/components/projectLink.jsx b/src/sentry/static/sentry/app/components/projectLink.jsx
new file mode 100644
index 0000000000..da8dfbf45b
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/projectLink.jsx
@@ -0,0 +1,50 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import {Link as RouterLink} from 'react-router';
+
+/**
+ * A modified link used for navigating between project pages that
+ * will keep the environment in the querystring when navigating if it's present
+ *
+ * Falls back to <a> if there is no router present.
+ */
+class ProjectLink extends React.Component {
+  static propTypes = {
+    to: PropTypes.string.isRequired,
+  };
+
+  static contextTypes = {
+    location: PropTypes.object,
+  };
+
+  render() {
+    const {location} = this.context;
+
+    if (location) {
+      const hasEnvironment = 'environment' in location.query;
+
+      let {to} = this.props;
+
+      if (hasEnvironment) {
+        if (typeof to === 'string') {
+          to = {pathname: to, query: {environment: location.query.environment}};
+        } else {
+          to.query = {...to.query, environment: location.query.environment};
+        }
+      }
+
+      const routerProps = to ? {...this.props, to} : {...this.props};
+
+      return <RouterLink {...routerProps}>{this.props.children}</RouterLink>;
+    } else {
+      let {to, ...props} = this.props;
+      return (
+        <a {...props} href={to}>
+          {this.props.children}
+        </a>
+      );
+    }
+  }
+}
+
+export default ProjectLink;
