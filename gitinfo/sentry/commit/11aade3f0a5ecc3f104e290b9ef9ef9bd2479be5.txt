commit 11aade3f0a5ecc3f104e290b9ef9ef9bd2479be5
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Jan 18 12:55:39 2019 -0800

    ref(releases): Refactor ReleaseArtifacts (#11594)
    
    Refactor ReleaseArtifacts to use es6 class and clean up tests

diff --git a/src/sentry/static/sentry/app/views/releases/detail/shared/releaseArtifacts.jsx b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseArtifacts.jsx
index 2bded56e03..972ddf8671 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/shared/releaseArtifacts.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseArtifacts.jsx
@@ -2,10 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import {Flex} from 'grid-emotion';
 
-import createReactClass from 'create-react-class';
-
-import ApiMixin from 'app/mixins/apiMixin';
-import OrganizationState from 'app/mixins/organizationState';
+import SentryTypes from 'app/sentryTypes';
 import Tooltip from 'app/components/tooltip';
 import FileSize from 'app/components/fileSize';
 import LoadingError from 'app/components/loadingError';
@@ -16,34 +13,34 @@ import LinkWithConfirmation from 'app/components/linkWithConfirmation';
 import {t} from 'app/locale';
 import {Panel, PanelHeader, PanelBody, PanelItem} from 'app/components/panels';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
-
-const ReleaseArtifacts = createReactClass({
-  displayName: 'ReleaseArtifacts',
-
-  contextTypes: {
-    release: PropTypes.object,
-  },
-
-  mixins: [ApiMixin, OrganizationState],
-
-  getInitialState() {
-    return {
+import withOrganization from 'app/utils/withOrganization';
+import withApi from 'app/utils/withApi';
+
+class ReleaseArtifacts extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization,
+    api: PropTypes.object,
+  };
+
+  constructor() {
+    super();
+    this.state = {
       loading: true,
       error: false,
       fileList: [],
       pageLinks: null,
     };
-  },
+  }
 
   componentDidMount() {
     this.fetchData();
-  },
+  }
 
   componentDidUpdate(prevProps) {
     if (this.props.location.search !== prevProps.location.search) {
       this.fetchData();
     }
-  },
+  }
 
   getFilesEndpoint() {
     let {orgId, projectId, version} = this.props.params;
@@ -52,7 +49,7 @@ const ReleaseArtifacts = createReactClass({
     return projectId
       ? `/projects/${orgId}/${projectId}/releases/${encodedVersion}/files/`
       : `/organizations/${orgId}/releases/${encodedVersion}/files/`;
-  },
+  }
 
   fetchData() {
     this.setState({
@@ -60,7 +57,7 @@ const ReleaseArtifacts = createReactClass({
       error: false,
     });
 
-    this.api.request(this.getFilesEndpoint(), {
+    this.props.api.request(this.getFilesEndpoint(), {
       method: 'GET',
       data: this.props.location.query,
       success: (data, _, jqXHR) => {
@@ -78,12 +75,12 @@ const ReleaseArtifacts = createReactClass({
         });
       },
     });
-  },
+  }
 
   handleRemove(id) {
     let loadingIndicator = IndicatorStore.add(t('Removing artifact..'));
 
-    this.api.request(this.getFilesEndpoint() + `${id}/`, {
+    this.props.api.request(this.getFilesEndpoint() + `${id}/`, {
       method: 'DELETE',
       success: () => {
         let fileList = this.state.fileList.filter(file => {
@@ -107,7 +104,7 @@ const ReleaseArtifacts = createReactClass({
         IndicatorStore.remove(loadingIndicator);
       },
     });
-  },
+  }
 
   render() {
     if (this.state.loading) return <LoadingIndicator />;
@@ -121,7 +118,7 @@ const ReleaseArtifacts = createReactClass({
         </Panel>
       );
 
-    let access = this.getAccess();
+    let access = new Set(this.props.organization.access);
 
     // TODO(dcramer): files should allow you to download them
     return (
@@ -154,7 +151,7 @@ const ReleaseArtifacts = createReactClass({
                       {access.has('project:write') ? (
                         <a
                           href={
-                            this.api.baseUrl +
+                            this.props.api.baseUrl +
                             this.getFilesEndpoint() +
                             `${file.id}/?download=1`
                           }
@@ -193,7 +190,8 @@ const ReleaseArtifacts = createReactClass({
         <Pagination pageLinks={this.state.pageLinks} />
       </div>
     );
-  },
-});
+  }
+}
 
-export default ReleaseArtifacts;
+export {ReleaseArtifacts};
+export default withOrganization(withApi(ReleaseArtifacts));
diff --git a/tests/js/spec/views/releases/detail/releaseArtifacts.spec.jsx b/tests/js/spec/views/releases/detail/releaseArtifacts.spec.jsx
index 12f236b340..117ff7ce47 100644
--- a/tests/js/spec/views/releases/detail/releaseArtifacts.spec.jsx
+++ b/tests/js/spec/views/releases/detail/releaseArtifacts.spec.jsx
@@ -1,93 +1,77 @@
 import React from 'react';
-import {shallow} from 'enzyme';
+import {shallow, mount} from 'enzyme';
 
 import {Client} from 'app/api';
-import ReleaseArtifacts from 'app/views/releases/detail/shared/releaseArtifacts';
+import {ReleaseArtifacts} from 'app/views/releases/detail/shared/releaseArtifacts';
 
 describe('ReleaseArtifacts', function() {
-  let sandbox;
-  let stubbedApiRequest;
   let wrapper;
   let wrapperWithPermission;
+  let api = new Client();
+  let projectMock;
+  let organizationMock;
+  let deleteMock;
 
-  beforeEach(function() {
-    sandbox = sinon.sandbox.create();
+  beforeEach(async function() {
+    const mockResponse = [
+      {
+        id: '1',
+        name: 'foo.js',
+        size: 150000,
+      },
+      {
+        id: '2',
+        name: 'bar.js',
+        size: 30000,
+      },
+    ];
+
+    projectMock = MockApiClient.addMockResponse({
+      url: '/projects/123/456/releases/abcdef/files/',
+      body: mockResponse,
+    });
+
+    organizationMock = MockApiClient.addMockResponse({
+      url: '/organizations/123/releases/abcdef/files/',
+      body: mockResponse,
+    });
 
-    stubbedApiRequest = sandbox.stub(Client.prototype, 'request');
+    deleteMock = MockApiClient.addMockResponse({
+      url: '/projects/123/456/releases/abcdef/files/1/',
+      method: 'DELETE',
+    });
 
-    wrapper = shallow(
+    wrapper = mount(
       <ReleaseArtifacts
         location={{query: {cursor: '0:0:100'}}}
         params={{orgId: '123', projectId: '456', version: 'abcdef'}}
-      />,
-      {
-        context: {
-          group: {id: '1337'},
-          project: {id: 'foo'},
-          team: {id: '1'},
-          organization: {id: 'bar'},
-        },
-      }
+        organization={TestStubs.Organization({id: '123', access: ['project:read']})}
+        api={api}
+      />
     );
 
     wrapperWithPermission = shallow(
       <ReleaseArtifacts
         location={{query: {cursor: '0:0:100'}}}
         params={{orgId: '123', projectId: '456', version: 'abcdef'}}
-      />,
-      {
-        context: {
-          group: {id: '1337'},
-          project: {id: 'foo'},
-          team: {id: '1'},
-          organization: {id: 'bar', access: ['project:write']},
-        },
-      }
+        organization={TestStubs.Organization({id: '123', access: ['project:write']})}
+        api={api}
+      />
     );
+
+    await tick();
   });
 
   afterEach(function() {
-    sandbox.restore();
+    MockApiClient.clearMockResponses();
   });
 
   describe('render()', function() {
     it('should render a row for each file', function() {
-      wrapper.setState({
-        loading: false,
-        fileList: [
-          {
-            id: '1',
-            name: 'foo.js',
-            size: 150000,
-          },
-          {
-            id: '2',
-            name: 'bar.js',
-            size: 30000,
-          },
-        ],
-      });
-
       expect(wrapper.find('PanelItem')).toHaveLength(2);
     });
 
     it('should have no permission to download', function() {
-      wrapper.setState({
-        loading: false,
-        fileList: [
-          {
-            id: '1',
-            name: 'foo.js',
-            size: 150000,
-          },
-          {
-            id: '2',
-            name: 'bar.js',
-            size: 30000,
-          },
-        ],
-      });
-
       expect(wrapper.find('div.btn > .icon-open')).toHaveLength(2);
     });
 
@@ -114,33 +98,10 @@ describe('ReleaseArtifacts', function() {
   });
 
   describe('handleRemove()', function() {
-    it('should remove the file from the file list', function() {
-      wrapper.setState({
-        loading: false,
-        fileList: [
-          {
-            id: '1',
-            name: 'foo.js',
-            size: 150000,
-          },
-          {
-            id: '2',
-            name: 'bar.js',
-            size: 30000,
-          },
-        ],
-      });
-
-      let instance = wrapper.instance();
-      stubbedApiRequest.restore();
-      sandbox.stub(instance.api, 'request', function(url, options) {
-        // emulate successful api completion
-        options.success();
-        options.complete();
-      });
+    it('should remove the file from the file list', async function() {
+      wrapper.instance().handleRemove('1');
+      expect(deleteMock).toHaveBeenCalled();
 
-      instance.handleRemove('1');
-      expect(instance.api.request.callCount).toEqual(1);
       expect(wrapper.state('fileList')).toHaveLength(1);
       expect(wrapper.state('fileList')[0]).toHaveProperty('id', '2');
     });
@@ -150,18 +111,28 @@ describe('ReleaseArtifacts', function() {
     it('fetches data for project releases', function() {
       wrapper.instance().fetchData();
 
-      let apiArgs = stubbedApiRequest.lastCall.args;
-      expect(apiArgs[0]).toEqual('/projects/123/456/releases/abcdef/files/');
-      expect(apiArgs[1].data).toHaveProperty('cursor', '0:0:100');
+      expect(projectMock).toHaveBeenCalledWith(
+        '/projects/123/456/releases/abcdef/files/',
+        expect.objectContaining({
+          data: expect.objectContaining({
+            cursor: '0:0:100',
+          }),
+        })
+      );
     });
 
-    it('fetches data for orgazniation releases', function() {
+    it('fetches data for organization releases', function() {
       wrapper.setProps({params: {orgId: '123', version: 'abcdef'}});
       wrapper.instance().fetchData();
 
-      let apiArgs = stubbedApiRequest.lastCall.args;
-      expect(apiArgs[0]).toEqual('/organizations/123/releases/abcdef/files/');
-      expect(apiArgs[1].data).toHaveProperty('cursor', '0:0:100');
+      expect(organizationMock).toHaveBeenCalledWith(
+        '/organizations/123/releases/abcdef/files/',
+        expect.objectContaining({
+          data: expect.objectContaining({
+            cursor: '0:0:100',
+          }),
+        })
+      );
     });
   });
 });
