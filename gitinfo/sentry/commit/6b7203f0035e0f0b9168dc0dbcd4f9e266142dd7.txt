commit 6b7203f0035e0f0b9168dc0dbcd4f9e266142dd7
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Dec 22 00:30:22 2017 +0100

    feat(javascript): Do not fail on missing filename for in_app detection (#6825)

diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 0cd5c719b7..ba2ff1b62d 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -663,7 +663,7 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
                     new_frame['module'] = generate_module(filename)
 
                 if abs_path.startswith('app:'):
-                    if NODE_MODULES_RE.search(filename):
+                    if filename and NODE_MODULES_RE.search(filename):
                         in_app = False
                     else:
                         in_app = True
diff --git a/tests/sentry/lang/javascript/fixtures/nofiles.js b/tests/sentry/lang/javascript/fixtures/nofiles.js
new file mode 100644
index 0000000000..8197e1e3d8
--- /dev/null
+++ b/tests/sentry/lang/javascript/fixtures/nofiles.js
@@ -0,0 +1,2 @@
+function add(a,b){"use strict";return a+b}function multiply(a,b){"use strict";return a*b}function divide(a,b){"use strict";try{return multiply(add(a,b),a,b)/c}catch(e){Raven.captureException(e)}}
+//# sourceMappingURL=nofiles.js.map
diff --git a/tests/sentry/lang/javascript/fixtures/nofiles.js.map b/tests/sentry/lang/javascript/fixtures/nofiles.js.map
new file mode 100644
index 0000000000..677a6fa3b0
--- /dev/null
+++ b/tests/sentry/lang/javascript/fixtures/nofiles.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":[null,null],"names":["add","a","b","multiply","divide","c","e","Raven","captureException"],"mappings":"AAAA,QAASA,KAAIC,EAAGC,GACf,YACA,OAAOD,GAAIC,ECFZ,QAASC,UAASF,EAAGC,GACpB,YACA,OAAOD,GAAIC,EAEZ,QAASE,QAAOH,EAAGC,GAClB,YACA,KACC,MAAOC,UAASH,IAAIC,EAAGC,GAAID,EAAGC,GAAKG,EAClC,MAAOC,GACRC,MAAMC,iBAAiBF","sourcesContent":["function add(a, b) {\n\t\"use strict\";\n\treturn a + b; // f√¥o\n}\n","function multiply(a, b) {\n\t\"use strict\";\n\treturn a * b;\n}\nfunction divide(a, b) {\n\t\"use strict\";\n\ttry {\n\t\treturn multiply(add(a, b), a, b) / c;\n\t} catch (e) {\n\t\tRaven.captureException(e);\n\t}\n}\n"]}
diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
index 30c308f56e..5fb222fb7b 100644
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ b/tests/sentry/lang/javascript/test_plugin.py
@@ -438,6 +438,87 @@ class JavascriptIntegrationTest(TestCase):
         assert frame.context_line == expected
         assert frame.post_context == ['}', '']
 
+    @responses.activate
+    def test_sourcemap_nofiles_source_expansion(self):
+        project = self.project
+        release = Release.objects.create(
+            organization_id=project.organization_id,
+            version='abc',
+        )
+        release.add_project(project)
+
+        f_minified = File.objects.create(
+            name='nofiles.js',
+            type='release.file',
+            headers={'Content-Type': 'application/json'},
+        )
+        f_minified.putfile(open(get_fixture_path('nofiles.js'), 'rb'))
+        ReleaseFile.objects.create(
+            name='~/{}'.format(f_minified.name),
+            release=release,
+            organization_id=project.organization_id,
+            file=f_minified,
+        )
+
+        f_sourcemap = File.objects.create(
+            name='nofiles.js.map',
+            type='release.file',
+            headers={'Content-Type': 'application/json'},
+        )
+        f_sourcemap.putfile(open(get_fixture_path('nofiles.js.map'), 'rb'))
+        ReleaseFile.objects.create(
+            name='app:///{}'.format(f_sourcemap.name),
+            release=release,
+            organization_id=project.organization_id,
+            file=f_sourcemap,
+        )
+
+        data = {
+            'message': 'hello',
+            'platform': 'javascript',
+            'release': 'abc',
+            'sentry.interfaces.Exception': {
+                'values': [
+                    {
+                        'type': 'Error',
+                        'stacktrace': {
+                            'frames': [
+                                {
+                                    'abs_path': 'app:///nofiles.js',
+                                    'lineno': 1,
+                                    'colno': 39,
+                                }
+                            ],
+                        },
+                    }
+                ],
+            }
+        }
+
+        resp = self._postWithHeader(data)
+        assert resp.status_code, 200
+
+        event = Event.objects.get()
+        assert not event.data['errors']
+
+        exception = event.interfaces['sentry.interfaces.Exception']
+        frame_list = exception.values[0].stacktrace.frames
+
+        assert len(frame_list) == 1
+        frame = frame_list[0]
+        assert frame.pre_context == [
+            'function multiply(a, b) {',
+            '\t"use strict";',
+        ]
+        assert frame.context_line == u'\treturn a * b;'
+        assert frame.post_context == [
+            '}',
+            'function divide(a, b) {',
+            '\t"use strict";',
+            '\ttry {',
+            '\t\treturn multiply(add(a, b), a, b) / c;'
+        ]
+
     @responses.activate
     def test_indexed_sourcemap_source_expansion(self):
         responses.add(
