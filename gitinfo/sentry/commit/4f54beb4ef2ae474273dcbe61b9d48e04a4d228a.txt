commit 4f54beb4ef2ae474273dcbe61b9d48e04a4d228a
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Feb 14 15:04:55 2019 -0800

    ref(ui): Remove unused health-related components (#12060)
    
    * Removed `app/actionCreators/health`
    * Removed `app/components/charts/panelChart` and related tests/stories

diff --git a/docs-ui/components/panelChart.stories.js b/docs-ui/components/panelChart.stories.js
deleted file mode 100644
index 0279bedc50..0000000000
--- a/docs-ui/components/panelChart.stories.js
+++ /dev/null
@@ -1,69 +0,0 @@
-import React from 'react';
-
-import {storiesOf} from '@storybook/react';
-import {withInfo} from '@storybook/addon-info';
-
-import AreaChart from 'app/components/charts/areaChart';
-import PanelChart from 'app/components/charts/panelChart';
-import PieChart from 'app/components/charts/pieChart';
-
-storiesOf('Charts|PanelChart', module).add(
-  'PanelChart',
-  withInfo('PanelChart')(() => {
-    const TOTAL = 6;
-    const NOW = new Date().getTime();
-    const getValue = () => Math.round(Math.random() * 1000);
-    const getDate = num => NOW - (TOTAL - num) * 86400000;
-    const getData = num =>
-      [...Array(num)].map((v, i) => ({value: getValue(), name: getDate(i)}));
-    const browsers = {
-      seriesName: '',
-      data: [
-        {
-          name: 'Chrome',
-          value: 3500,
-        },
-        {
-          name: 'Firefox',
-          value: 650,
-        },
-        {
-          name: 'Safari',
-          value: 250,
-        },
-      ],
-    };
-
-    const errorSeries = [
-      {
-        seriesName: 'Handled',
-        data: getData(7),
-      },
-      {
-        seriesName: 'Unhandled',
-        data: getData(7),
-      },
-    ];
-    const previousPeriodData = {
-      seriesName: 'Previous',
-      data: getData(7),
-    };
-
-    return (
-      <React.Fragment>
-        <PanelChart title="Pie Chart" name="Browsers" series={[browsers]}>
-          {({...props}) => <PieChart {...props} />}
-        </PanelChart>
-
-        <PanelChart
-          title="Area Chart"
-          name="Browsers"
-          series={errorSeries}
-          previousPeriod={previousPeriodData}
-        >
-          {({...props}) => <AreaChart {...props} />}
-        </PanelChart>
-      </React.Fragment>
-    );
-  })
-);
diff --git a/src/sentry/static/sentry/app/actionCreators/health.jsx b/src/sentry/static/sentry/app/actionCreators/health.jsx
deleted file mode 100644
index 73b4a4e9d8..0000000000
--- a/src/sentry/static/sentry/app/actionCreators/health.jsx
+++ /dev/null
@@ -1,96 +0,0 @@
-import moment from 'moment';
-
-import {DEFAULT_STATS_PERIOD} from 'app/constants';
-import {getUtcDateString} from 'app/utils/dates';
-
-const BASE_URL = org => `/organizations/${org.slug}/health/`;
-
-// Gets the period to query with if we need to double the initial period in order
-// to get data for the previous period
-const getPeriod = ({period, start, end}, {shouldDoublePeriod}) => {
-  if (!period && !start && !end) {
-    period = DEFAULT_STATS_PERIOD;
-  }
-
-  // you can not specify both relative and absolute periods
-  // relative period takes precendence
-  if (period) {
-    if (!shouldDoublePeriod) return {statsPeriod: period};
-    const [, periodNumber, periodLength] = period.match(/([0-9]+)([mhdw])/);
-
-    return {statsPeriod: `${parseInt(periodNumber, 10) * 2}${periodLength}`};
-  }
-
-  if (!start || !end) {
-    throw new Error('start and end required');
-  }
-
-  if (shouldDoublePeriod) {
-    // get duration of end - start and double
-    const diff = moment(end).diff(moment(start));
-
-    return {
-      start: getUtcDateString(moment(start).subtract(diff)),
-      end: getUtcDateString(end),
-    };
-  }
-
-  return {start, end};
-};
-
-/**
- * Make requests to `health` endpoint
- *
- * @param {Object} api API client instance
- * @param {Object} options Request parameters
- * @param {Object} options.organization Organization object
- * @param {Number[]} options.projects List of project ids
- * @param {String} options.tag The "tag" to query for
- * @param {Boolean} options.timeseries Should we group results by time period
- * @param {String[]} options.environments List of environments to query for
- * @param {String} options.period Time period to query for, in the format: <integer><units> where units are "d" or "h"
- * @param {String} options.interval Time interval to group results in, in the format: <integer><units> where units are "d", "h", "m", "s"
- * @param {Boolean} options.includePrevious Should request also return reqsults for previous period?
- * @param {Number} options.limit The number of rows to return
- * @param {Number} options.topk Include topk results
- */
-export const doHealthRequest = (
-  api,
-  {
-    organization,
-    projects,
-    tag,
-    environments,
-    period,
-    start,
-    end,
-    interval,
-    timeseries,
-    includePrevious,
-    topk,
-    specifiers,
-    limit,
-  }
-) => {
-  if (!api) return Promise.reject(new Error('API client not available'));
-
-  const path = timeseries ? 'graph/' : 'top/';
-  const shouldDoublePeriod = timeseries && includePrevious;
-  const periodObj = getPeriod({period, start, end}, {shouldDoublePeriod});
-
-  const query = {
-    tag,
-    includePrevious,
-    interval,
-    project: projects,
-    environment: environments,
-    q: specifiers,
-    limit,
-    ...periodObj,
-    ...(topk ? {topk} : {}),
-  };
-
-  return api.requestPromise(`${BASE_URL(organization)}${path}`, {
-    query,
-  });
-};
diff --git a/src/sentry/static/sentry/app/components/charts/panelChart/index.jsx b/src/sentry/static/sentry/app/components/charts/panelChart/index.jsx
deleted file mode 100644
index 2cf1f12c41..0000000000
--- a/src/sentry/static/sentry/app/components/charts/panelChart/index.jsx
+++ /dev/null
@@ -1,60 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from 'react-emotion';
-
-import {Panel, PanelHeader} from 'app/components/panels';
-
-import Legend from './legend';
-
-const PanelChart = styled(
-  class PanelChart extends React.Component {
-    static propTypes = {
-      /**
-       * Can be either a react element or a render prop that receives
-       * the same props passed to `PanelChart`
-       */
-      children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
-      showLegend: PropTypes.bool,
-      title: PropTypes.node,
-      ...Legend.propTypes,
-    };
-
-    static defaultProps = {
-      showLegend: true,
-    };
-
-    render() {
-      const {title, children, className, showLegend, ...props} = this.props;
-
-      return (
-        <Panel className={className}>
-          {(title || showLegend) && (
-            <PanelHeader>
-              {title && <Title>{title}</Title>}
-              {showLegend && <Legend {...props} />}
-            </PanelHeader>
-          )}
-          {children && (
-            <ChartWrapper>
-              {typeof children === 'function' ? children({title, ...props}) : children}
-            </ChartWrapper>
-          )}
-        </Panel>
-      );
-    }
-  }
-)`
-  flex: 1;
-  overflow: hidden; /* This is required to have flex containers resize */
-`;
-
-export default PanelChart;
-
-const ChartWrapper = styled('div')`
-  overflow: hidden; /* This is required to have flex containers resize */
-`;
-
-const Title = styled('span')`
-  white-space: nowrap;
-  flex-shrink: 0;
-`;
diff --git a/src/sentry/static/sentry/app/components/charts/panelChart/legend.jsx b/src/sentry/static/sentry/app/components/charts/panelChart/legend.jsx
deleted file mode 100644
index 2c756aa232..0000000000
--- a/src/sentry/static/sentry/app/components/charts/panelChart/legend.jsx
+++ /dev/null
@@ -1,70 +0,0 @@
-import {Flex} from 'grid-emotion';
-import React from 'react';
-import styled from 'react-emotion';
-
-import CircleIndicator from 'app/components/circleIndicator';
-import SentryTypes from 'app/sentryTypes';
-import space from 'app/styles/space';
-import theme from 'app/utils/theme';
-
-const Legend = styled(
-  class Legend extends React.Component {
-    static propTypes = {
-      series: SentryTypes.Series,
-
-      /**
-       * Previous Period
-       */
-      previousPeriod: SentryTypes.SeriesUnit,
-    };
-
-    render() {
-      const {className, series, previousPeriod} = this.props;
-
-      return (
-        <Flex className={className}>
-          {previousPeriod && (
-            <SeriesGroup>
-              <DottedLineIndicator />
-              <SeriesName>{previousPeriod.seriesName}</SeriesName>
-            </SeriesGroup>
-          )}
-
-          {series &&
-            series.map((seriesUnit, i) => {
-              return (
-                <SeriesGroup key={seriesUnit.seriesName}>
-                  <CircleIndicator color={theme.charts.colors[i]} />
-                  <SeriesName>{seriesUnit.seriesName}</SeriesName>
-                </SeriesGroup>
-              );
-            })}
-        </Flex>
-      );
-    }
-  }
-)`
-  flex: 1;
-  justify-content: flex-end;
-  align-items: center;
-`;
-
-const SeriesGroup = styled(Flex)`
-  margin-left: ${space(1)};
-  align-items: center;
-`;
-
-const SeriesName = styled('span')`
-  margin-left: ${space(0.5)};
-  text-transform: none;
-  font-weight: 400;
-`;
-
-const DottedLineIndicator = styled('span')`
-  display: flex;
-  width: 20px;
-  border: 1px dashed ${p => p.theme.charts.previousPeriod};
-  align-items: center;
-`;
-
-export default Legend;
diff --git a/tests/js/fixtures/events.js b/tests/js/fixtures/events.js
index fc235e377d..faa5e0e4c3 100644
--- a/tests/js/fixtures/events.js
+++ b/tests/js/fixtures/events.js
@@ -12,3 +12,10 @@ export function Events(params = []) {
     ...params,
   ];
 }
+
+export function EventsStats(query = {}, params) {
+  return {
+    data: [[new Date(), [{count: 321}, {count: 79}]], [new Date(), [{count: 123}]]],
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/health.js b/tests/js/fixtures/health.js
deleted file mode 100644
index 5715cbf0e6..0000000000
--- a/tests/js/fixtures/health.js
+++ /dev/null
@@ -1,51 +0,0 @@
-const COUNT_OBJ = ({tag, topk}) => {
-  let tagObject;
-
-  if (tag === 'user') {
-    const user = TestStubs.User();
-    tagObject = {
-      _health_id: `${tag}:${user.id}`,
-      value: user,
-    };
-  } else if (tag === 'release') {
-    const release = TestStubs.Release();
-    tagObject = {
-      _health_id: `${tag}:${release.slug}`,
-      value: release,
-    };
-  } else {
-    tagObject = {
-      _health_id: `${tag}:${tag}-slug`,
-      value: tag,
-    };
-  }
-
-  return {
-    count: 123,
-    [tag]: tagObject,
-    topProjects: topk ? [TestStubs.Project()] : [],
-  };
-};
-
-const DEFAULT_QUERY = {tag: 'release'};
-export function HealthTop(query = DEFAULT_QUERY, params) {
-  const countObject = COUNT_OBJ(query);
-  return {
-    data: [countObject],
-    totals: {
-      count: 123,
-      lastCount: 43,
-    },
-  };
-}
-
-export function HealthGraph(query = DEFAULT_QUERY, params) {
-  const countObject = COUNT_OBJ(query);
-
-  return {
-    data: [
-      [new Date(), [{...countObject, count: 321}, {...countObject, count: 79}]],
-      [new Date(), [countObject]],
-    ],
-  };
-}
diff --git a/tests/js/spec/actionCreators/health.spec.jsx b/tests/js/spec/actionCreators/health.spec.jsx
deleted file mode 100644
index 1664982634..0000000000
--- a/tests/js/spec/actionCreators/health.spec.jsx
+++ /dev/null
@@ -1,154 +0,0 @@
-import {Client} from 'app/api';
-import {doHealthRequest} from 'app/actionCreators/health';
-
-describe('Health ActionCreator', function() {
-  const api = new Client();
-  const organization = TestStubs.Organization();
-  const project = TestStubs.Project();
-  let mock;
-
-  it('requests timeseries w/o tag', function() {
-    mock = MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/health/graph/',
-    });
-    doHealthRequest(api, {
-      timeseries: true,
-      organization,
-      projects: [project.id],
-      environments: [],
-      topk: 5,
-      includePrevious: false,
-      period: '7d',
-    });
-
-    expect(mock).toHaveBeenCalled();
-
-    expect(mock).toHaveBeenLastCalledWith(
-      '/organizations/org-slug/health/graph/',
-      expect.objectContaining({
-        query: expect.objectContaining({
-          project: [project.id],
-          environment: [],
-          topk: 5,
-          includePrevious: false,
-          statsPeriod: '7d',
-        }),
-      })
-    );
-  });
-
-  it('requests timeseries w/ tag', function() {
-    mock = MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/health/graph/',
-    });
-    doHealthRequest(api, {
-      timeseries: true,
-      organization,
-      projects: [project.id],
-      environments: [],
-      tag: 'release',
-      topk: 5,
-      includePrevious: false,
-      period: '7d',
-    });
-
-    expect(mock).toHaveBeenCalled();
-
-    expect(mock).toHaveBeenLastCalledWith(
-      '/organizations/org-slug/health/graph/',
-      expect.objectContaining({
-        query: expect.objectContaining({
-          project: [project.id],
-          environment: [],
-          tag: 'release',
-          topk: 5,
-          includePrevious: false,
-          statsPeriod: '7d',
-        }),
-      })
-    );
-  });
-
-  it('requests top', function() {
-    mock = MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/health/top/',
-    });
-    doHealthRequest(api, {
-      timeseries: false,
-      organization,
-      projects: [project.id],
-      environments: [],
-      tag: 'release',
-      includePrevious: false,
-      period: '7d',
-    });
-
-    expect(mock).toHaveBeenCalled();
-    expect(mock).toHaveBeenLastCalledWith(
-      '/organizations/org-slug/health/top/',
-      expect.objectContaining({
-        query: expect.objectContaining({
-          project: [project.id],
-          environment: [],
-          tag: 'release',
-          includePrevious: false,
-          statsPeriod: '7d',
-        }),
-      })
-    );
-  });
-
-  it('requests timeseries w/ tag and previous period', function() {
-    mock = MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/health/graph/',
-    });
-    doHealthRequest(api, {
-      timeseries: true,
-      organization,
-      projects: [project.id],
-      environments: [],
-      tag: 'release',
-      topk: 5,
-      includePrevious: true,
-      period: '7d',
-    });
-
-    expect(mock).toHaveBeenCalled();
-
-    expect(mock).toHaveBeenLastCalledWith(
-      '/organizations/org-slug/health/graph/',
-      expect.objectContaining({
-        query: expect.objectContaining({
-          statsPeriod: '14d',
-        }),
-      })
-    );
-  });
-
-  it('requests non-timeseries and previous period', function() {
-    mock = MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/health/top/',
-    });
-    doHealthRequest(api, {
-      timeseries: false,
-      organization,
-      projects: [project.id],
-      environments: [],
-      tag: 'release',
-      topk: 5,
-      includePrevious: true,
-      period: '7d',
-    });
-
-    expect(mock).toHaveBeenCalled();
-
-    expect(mock).toHaveBeenLastCalledWith(
-      '/organizations/org-slug/health/top/',
-      expect.objectContaining({
-        query: expect.objectContaining({
-          statsPeriod: '7d',
-        }),
-      })
-    );
-  });
-});
diff --git a/tests/js/spec/components/charts/panelChart/index.spec.jsx b/tests/js/spec/components/charts/panelChart/index.spec.jsx
deleted file mode 100644
index 90d9237429..0000000000
--- a/tests/js/spec/components/charts/panelChart/index.spec.jsx
+++ /dev/null
@@ -1,94 +0,0 @@
-import React from 'react';
-import {mount} from 'enzyme';
-
-import PanelChart from 'app/components/charts/panelChart';
-
-describe('PanelChart', function() {
-  const SERIES = [
-    {
-      seriesName: 'Foo',
-      data: [
-        {value: 1, name: ''},
-        {value: 2, name: ''},
-        {value: 3, name: ''},
-        {value: 4, name: ''},
-      ],
-    },
-    {
-      seriesName: 'Bar',
-      data: [
-        {value: 2, name: ''},
-        {value: 3, name: ''},
-        {value: 4, name: ''},
-        {value: 5, name: ''},
-      ],
-    },
-  ];
-
-  const PREVIOUS = {
-    seriesName: 'Previous',
-    data: [
-      {value: 2, name: ''},
-      {value: 3, name: ''},
-      {value: 4, name: ''},
-      {value: 5, name: ''},
-    ],
-  };
-
-  describe('renders', function() {
-    let wrapper;
-    beforeAll(function() {
-      wrapper = mount(
-        <PanelChart title="Panel Chart" series={SERIES} previousPeriod={PREVIOUS}>
-          <div />
-        </PanelChart>,
-        TestStubs.routerContext()
-      );
-    });
-
-    it('has title', function() {
-      expect(wrapper.find('PanelHeader').contains('Panel Chart')).toBe(true);
-    });
-
-    it('has right legend items', function() {
-      // Currently only support 1 line
-      expect(wrapper.find('DottedLineIndicator')).toHaveLength(1);
-      expect(
-        wrapper
-          .find('SeriesName')
-          .at(0)
-          .prop('children')
-      ).toBe('Previous');
-
-      expect(wrapper.find('CircleIndicator')).toHaveLength(2);
-      expect(
-        wrapper
-          .find('SeriesName')
-          .at(1)
-          .prop('children')
-      ).toBe('Foo');
-      expect(
-        wrapper
-          .find('SeriesName')
-          .at(2)
-          .prop('children')
-      ).toBe('Bar');
-    });
-
-    it('renders child', function() {
-      expect(wrapper.find('ChartWrapper')).toHaveLength(1);
-    });
-  });
-
-  it('shows legend without a title', function() {
-    const wrapper = mount(
-      <PanelChart series={SERIES} previousPeriod={PREVIOUS}>
-        <div />
-      </PanelChart>,
-      TestStubs.routerContext()
-    );
-
-    // This has 2 results because of the Legend class and styled-component wrapper
-    expect(wrapper.find('Legend')).toHaveLength(2);
-  });
-});
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/organizationEvents/events.spec.jsx
index 3e17c0ea6a..4bb57f1032 100644
--- a/tests/js/spec/views/organizationEvents/events.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/events.spec.jsx
@@ -60,7 +60,7 @@ describe('OrganizationEventsErrors', function() {
     eventsStatsMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events-stats/',
       body: (url, opts) => {
-        return TestStubs.HealthGraph(opts.query);
+        return TestStubs.EventsStats(opts.query);
       },
     });
     eventsMetaMock = MockApiClient.addMockResponse({
@@ -308,7 +308,7 @@ describe('OrganizationEventsContainer', function() {
     eventsStatsMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events-stats/',
       body: (url, opts) => {
-        return TestStubs.HealthGraph(opts.query);
+        return TestStubs.EventsStats(opts.query);
       },
     });
     eventsMetaMock = MockApiClient.addMockResponse({
