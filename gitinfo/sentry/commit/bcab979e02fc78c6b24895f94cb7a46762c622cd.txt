commit bcab979e02fc78c6b24895f94cb7a46762c622cd
Author: josh <josh@jrl.ninja>
Date:   Mon Mar 2 19:12:58 2020 +0000

    ref(py3): low-hanging fruit part 2 (#17382)

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index fedd50e1eb..32ed7f6fd9 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -30,10 +30,10 @@ from sentry.tasks.deletion import delete_organization
 from sentry.utils.apidocs import scenario, attach_scenarios
 from sentry.utils.cache import memoize
 
-ERR_DEFAULT_ORG = "You cannot remove the default organization."
-ERR_NO_USER = "This request requires an authenticated user."
-ERR_NO_2FA = "Cannot require two-factor authentication without personal two-factor enabled."
-ERR_SSO_ENABLED = "Cannot require two-factor authentication with SSO enabled"
+ERR_DEFAULT_ORG = u"You cannot remove the default organization."
+ERR_NO_USER = u"This request requires an authenticated user."
+ERR_NO_2FA = u"Cannot require two-factor authentication without personal two-factor enabled."
+ERR_SSO_ENABLED = u"Cannot require two-factor authentication with SSO enabled"
 
 ORG_OPTIONS = (
     # serializer field name, option key name, type, default value
diff --git a/src/sentry/api/serializers/models/sentry_app_component.py b/src/sentry/api/serializers/models/sentry_app_component.py
index 84ff73b1ed..5025c16237 100644
--- a/src/sentry/api/serializers/models/sentry_app_component.py
+++ b/src/sentry/api/serializers/models/sentry_app_component.py
@@ -10,7 +10,7 @@ from sentry.models import SentryAppComponent
 class SentryAppComponentSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         return {
-            "uuid": six.binary_type(obj.uuid),
+            "uuid": six.text_type(obj.uuid),
             "type": obj.type,
             "schema": obj.schema,
             "sentryApp": {
diff --git a/src/sentry/api/serializers/snuba.py b/src/sentry/api/serializers/snuba.py
index 24685a8f51..ba457126dc 100644
--- a/src/sentry/api/serializers/snuba.py
+++ b/src/sentry/api/serializers/snuba.py
@@ -1,4 +1,4 @@
-from __future__ import absolute_import
+from __future__ import absolute_import, division
 
 import six
 import itertools
@@ -126,8 +126,8 @@ def value_from_row(row, tagkey):
 
 def zerofill(data, start, end, rollup):
     rv = []
-    start = ((int(to_timestamp(start)) / rollup) * rollup) - rollup
-    end = ((int(to_timestamp(end)) / rollup) * rollup) + rollup
+    start = ((int(to_timestamp(start)) // rollup) * rollup) - rollup
+    end = ((int(to_timestamp(end)) // rollup) * rollup) + rollup
     i = 0
     for key in six.moves.xrange(start, end, rollup):
         try:
diff --git a/src/sentry/integrations/bitbucket_server/integration.py b/src/sentry/integrations/bitbucket_server/integration.py
index 65a27773b9..fe0f975c44 100644
--- a/src/sentry/integrations/bitbucket_server/integration.py
+++ b/src/sentry/integrations/bitbucket_server/integration.py
@@ -209,7 +209,7 @@ class OAuthCallbackView(PipelineView):
         except ApiError as error:
             logger.info("identity.bitbucket-server.access-token", extra={"error": error})
             return pipeline.error(
-                "Could not fetch an access token from Bitbucket. %s" % six.binary_type(error)
+                u"Could not fetch an access token from Bitbucket. %s" % six.text_type(error)
             )
 
 
diff --git a/src/sentry/integrations/client.py b/src/sentry/integrations/client.py
index c28833c526..5c0b2b8baa 100644
--- a/src/sentry/integrations/client.py
+++ b/src/sentry/integrations/client.py
@@ -200,20 +200,20 @@ class ApiClient(object):
             )
             resp.raise_for_status()
         except ConnectionError as e:
-            self.track_response_data(self.integration_name, "connection_error", e.message)
+            self.track_response_data(self.integration_name, "connection_error", six.text_type(e))
             raise ApiHostError.from_exception(e)
         except Timeout as e:
-            self.track_response_data(self.integration_name, "timeout", e.message)
+            self.track_response_data(self.integration_name, "timeout", six.text_type(e))
             raise ApiTimeoutError.from_exception(e)
         except HTTPError as e:
             resp = e.response
             if resp is None:
-                self.track_response_data(self.integration_name, "unknown", e.message)
+                self.track_response_data(self.integration_name, "unknown", six.text_type(e))
                 self.logger.exception(
                     "request.error", extra={"integration": self.integration_name, "url": full_url}
                 )
                 raise ApiError("Internal Error")
-            self.track_response_data(self.integration_name, resp.status_code, e.message)
+            self.track_response_data(self.integration_name, resp.status_code, six.text_type(e))
             raise ApiError.from_response(resp)
 
         self.track_response_data(self.integration_name, resp.status_code)
diff --git a/src/sentry/integrations/jira/client.py b/src/sentry/integrations/jira/client.py
index 1774e84288..5ddf1cacc1 100644
--- a/src/sentry/integrations/jira/client.py
+++ b/src/sentry/integrations/jira/client.py
@@ -23,7 +23,7 @@ ISSUE_KEY_RE = re.compile(r"^[A-Za-z][A-Za-z0-9]*-\d+$")
 
 
 def md5(*bits):
-    return _md5(":".join((force_bytes(bit, errors="replace") for bit in bits)))
+    return _md5(b":".join((force_bytes(bit, errors="replace") for bit in bits)))
 
 
 class JiraCloud(object):
diff --git a/src/sentry/models/file.py b/src/sentry/models/file.py
index 0bd8cbc5bb..13cffedeb0 100644
--- a/src/sentry/models/file.py
+++ b/src/sentry/models/file.py
@@ -505,7 +505,7 @@ class ChunkedFileBlobIndexWrapper(object):
 
         # Zero out the file
         f.seek(size - 1)
-        f.write("\x00")
+        f.write(b"\x00")
         f.flush()
 
         mem = mmap.mmap(f.fileno(), size)
diff --git a/src/sentry/models/processingissue.py b/src/sentry/models/processingissue.py
index 7a74430f14..b96e6bfbb5 100644
--- a/src/sentry/models/processingissue.py
+++ b/src/sentry/models/processingissue.py
@@ -10,8 +10,8 @@ from sentry.db.models import BaseManager, Model, FlexibleForeignKey, GzippedDict
 
 def get_processing_issue_checksum(scope, object):
     h = sha1()
-    h.update(scope.encode("utf-8") + "\x00")
-    h.update(object.encode("utf-8") + "\x00")
+    h.update(scope.encode("utf-8") + b"\x00")
+    h.update(object.encode("utf-8") + b"\x00")
     return h.hexdigest()
 
 
diff --git a/src/sentry/runner/commands/tsdb.py b/src/sentry/runner/commands/tsdb.py
index 95e38461f7..3ff1b97191 100644
--- a/src/sentry/runner/commands/tsdb.py
+++ b/src/sentry/runner/commands/tsdb.py
@@ -108,6 +108,6 @@ def organizations(metrics, since, until):
 
             stdout.write(
                 u"{} {} {}\n".format(
-                    instance.id, instance.slug, " ".join(map(six.binary_type, values))
+                    instance.id, instance.slug, " ".join(map(six.text_type, values))
                 )
             )
diff --git a/src/sentry/similarity/encoder.py b/src/sentry/similarity/encoder.py
index 04a85966ac..9430b478f7 100644
--- a/src/sentry/similarity/encoder.py
+++ b/src/sentry/similarity/encoder.py
@@ -27,10 +27,12 @@ class Encoder(object):
         elif isinstance(value, self.number_types):
             return six.text_type(value).encode("utf8")
         elif isinstance(value, Set):
-            return "\x00".join(sorted(map(self.dumps, value)))
+            return b"\x00".join(sorted(map(self.dumps, value)))
         elif isinstance(value, Sequence):
-            return "\x01".join(map(self.dumps, value))
+            return b"\x01".join(map(self.dumps, value))
         elif isinstance(value, Mapping):
-            return "\x02".join(sorted("\x01".join(map(self.dumps, item)) for item in value.items()))
+            return b"\x02".join(
+                sorted(b"\x01".join(map(self.dumps, item)) for item in value.items())
+            )
         else:
             raise TypeError(u"Unsupported type: {}".format(type(value)))
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index ffed1d1919..eb1870286f 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -26,7 +26,7 @@ import os.path
 import pytest
 import requests
 import six
-import types
+import inspect
 from sentry.utils.compat import mock
 
 from click.testing import CliRunner
@@ -498,7 +498,7 @@ class TwoFactorAPITestCase(APITestCase):
         response = self.api_enable_org_2fa(organization, user)
         assert response.status_code == status_code
         if err_msg:
-            assert err_msg in response.content
+            assert err_msg.encode("utf-8") in response.content
         organization = Organization.objects.get(id=organization.id)
 
         if status_code >= 200 and status_code < 300:
@@ -654,7 +654,7 @@ class PluginTestCase(TestCase):
 
         # Old plugins, plugin is a class, new plugins, it's an instance
         # New plugins don't need to be registered
-        if isinstance(self.plugin, (type, types.ClassType)):
+        if inspect.isclass(self.plugin):
             plugins.register(self.plugin)
             self.addCleanup(plugins.unregister, self.plugin)
 
@@ -745,7 +745,7 @@ class IntegrationTestCase(TestCase):
         self.save_session()
 
     def assertDialogSuccess(self, resp):
-        assert "window.opener.postMessage(" in resp.content
+        assert b"window.opener.postMessage(" in resp.content
 
 
 @pytest.mark.snuba
diff --git a/tests/sentry/api/endpoints/test_accept_organization_invite.py b/tests/sentry/api/endpoints/test_accept_organization_invite.py
index f4f903c426..4dbd461861 100644
--- a/tests/sentry/api/endpoints/test_accept_organization_invite.py
+++ b/tests/sentry/api/endpoints/test_accept_organization_invite.py
@@ -32,7 +32,7 @@ class AcceptInviteTest(TestCase):
         invite_link = om.get_invite_link()
         invite_data = dict(parse_qsl(response.client.cookies["pending-invite"].value))
 
-        self.assertIn(invite_data.get("url"), invite_link)
+        assert invite_data.get("url") in invite_link
 
     def _assert_pending_invite_cookie_not_set(self, response):
         self.assertNotIn("pending-invite", response.client.cookies)
diff --git a/tests/sentry/api/endpoints/test_chunk_upload.py b/tests/sentry/api/endpoints/test_chunk_upload.py
index fcbb127380..e12a34fa90 100644
--- a/tests/sentry/api/endpoints/test_chunk_upload.py
+++ b/tests/sentry/api/endpoints/test_chunk_upload.py
@@ -1,4 +1,4 @@
-from __future__ import absolute_import
+from __future__ import absolute_import, division
 
 from hashlib import sha1
 
@@ -118,7 +118,7 @@ class ChunkUploadTest(APITestCase):
 
         # Exactly the limit
         for x in range(0, MAX_CHUNKS_PER_REQUEST):
-            content = "x" * (MAX_REQUEST_SIZE / MAX_CHUNKS_PER_REQUEST)
+            content = "x" * (MAX_REQUEST_SIZE // MAX_CHUNKS_PER_REQUEST)
             files.append(SimpleUploadedFile(sha1(content).hexdigest(), content))
 
         response = self.client.post(
diff --git a/tests/sentry/api/endpoints/test_event_attachment_details.py b/tests/sentry/api/endpoints/test_event_attachment_details.py
index 46ef2508c1..535c38049e 100644
--- a/tests/sentry/api/endpoints/test_event_attachment_details.py
+++ b/tests/sentry/api/endpoints/test_event_attachment_details.py
@@ -22,7 +22,7 @@ class CreateAttachmentMixin(object):
         )
 
         self.file = File.objects.create(name="hello.png", type="image/png")
-        self.file.putfile(six.BytesIO("File contents here"))
+        self.file.putfile(six.BytesIO(b"File contents here"))
 
         self.attachment = EventAttachment.objects.create(
             event_id=self.event.event_id,
diff --git a/tests/sentry/api/endpoints/test_group_attachments.py b/tests/sentry/api/endpoints/test_group_attachments.py
index 561a21ea97..78613a4984 100644
--- a/tests/sentry/api/endpoints/test_group_attachments.py
+++ b/tests/sentry/api/endpoints/test_group_attachments.py
@@ -13,7 +13,7 @@ class GroupEventAttachmentsTest(APITestCase):
             type = "event.attachment"
 
         self.file = File.objects.create(name="hello.png", type=type)
-        self.file.putfile(six.BytesIO("File contents here"))
+        self.file.putfile(six.BytesIO(b"File contents here"))
 
         self.attachment = EventAttachment.objects.create(
             event_id=self.event.event_id,
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index 46bc2c0335..826987b9ce 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -266,7 +266,7 @@ class OrganizationUpdateTest(APITestCase):
 
         response = self.client.put(url, data=data)
         assert response.status_code == 400
-        assert "feature" in response.content
+        assert b"feature" in response.content
 
     def test_setting_trusted_relays(self):
         org = self.create_organization(owner=self.user)
diff --git a/tests/sentry/api/endpoints/test_organization_invite_request_index.py b/tests/sentry/api/endpoints/test_organization_invite_request_index.py
index d5254b7dcc..2de5e6e82c 100644
--- a/tests/sentry/api/endpoints/test_organization_invite_request_index.py
+++ b/tests/sentry/api/endpoints/test_organization_invite_request_index.py
@@ -122,7 +122,7 @@ class OrganizationInviteRequestCreateTest(APITestCase):
         )
 
         assert resp.status_code == 400
-        assert "The user %s is already a member" % user2.email in resp.content
+        assert (u"The user %s is already a member" % user2.email).encode("utf-8") in resp.content
 
     def test_existing_invite_request(self):
         self.login_as(user=self.user)
@@ -138,4 +138,6 @@ class OrganizationInviteRequestCreateTest(APITestCase):
         )
 
         assert resp.status_code == 400
-        assert "There is an existing invite request for %s" % invite_request.email in resp.content
+        assert (u"There is an existing invite request for %s" % invite_request.email).encode(
+            "utf-8"
+        ) in resp.content
diff --git a/tests/sentry/api/endpoints/test_organization_releases.py b/tests/sentry/api/endpoints/test_organization_releases.py
index bcb430489a..6aea90c84f 100644
--- a/tests/sentry/api/endpoints/test_organization_releases.py
+++ b/tests/sentry/api/endpoints/test_organization_releases.py
@@ -629,7 +629,7 @@ class OrganizationReleaseCreateTest(APITestCase):
             url, data={"version": "1.2.1", "projects": [project.slug, "banana"]}
         )
         assert response.status_code == 400
-        assert "Invalid project slugs" in response.content
+        assert b"Invalid project slugs" in response.content
 
     def test_project_permissions(self):
         user = self.create_user(is_staff=False, is_superuser=False)
@@ -670,7 +670,7 @@ class OrganizationReleaseCreateTest(APITestCase):
         )
 
         assert response.status_code == 400
-        assert "Invalid project slugs" in response.content
+        assert b"Invalid project slugs" in response.content
 
         response = self.client.post(url, data={"version": "1.2.1", "projects": [project1.slug]})
 
diff --git a/tests/sentry/api/endpoints/test_organization_teams.py b/tests/sentry/api/endpoints/test_organization_teams.py
index 24a2a3d5c3..add3ccb639 100644
--- a/tests/sentry/api/endpoints/test_organization_teams.py
+++ b/tests/sentry/api/endpoints/test_organization_teams.py
@@ -88,7 +88,7 @@ class OrganizationTeamsCreateTest(APITestCase):
         self.login_as(user=self.user)
         resp = self.client.post(self.path)
         assert resp.status_code == 400
-        assert "Name or slug is required" in resp.content
+        assert b"Name or slug is required" in resp.content
 
     def test_valid_params(self):
         self.login_as(user=self.user)
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index 2fbd7c7f26..69f7b40174 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -461,7 +461,7 @@ class ProjectUpdateTest(APITestCase):
         value = '{"applications": {"freeform": []}}'
         resp = self.client.put(self.path, data={"relayPiiConfig": value})
         assert resp.status_code == 400
-        assert "feature" in resp.content
+        assert b"feature" in resp.content
         assert self.project.get_option("sentry:relay_pii_config") is None
 
     def test_sensitive_fields(self):
diff --git a/tests/sentry/api/endpoints/test_sentry_app_components.py b/tests/sentry/api/endpoints/test_sentry_app_components.py
index 14f94c61d1..824654f333 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_components.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_components.py
@@ -33,7 +33,7 @@ class SentryAppComponentsTest(APITestCase):
 
         assert response.status_code == 200
         assert response.data[0] == {
-            "uuid": six.binary_type(self.component.uuid),
+            "uuid": six.text_type(self.component.uuid),
             "type": "issue-link",
             "schema": self.component.schema,
             "sentryApp": {
@@ -88,7 +88,7 @@ class OrganizationSentryAppComponentsTest(APITestCase):
         assert self.component3.uuid not in [d["uuid"] for d in response.data]
         assert response.data == [
             {
-                "uuid": six.binary_type(self.component1.uuid),
+                "uuid": six.text_type(self.component1.uuid),
                 "type": "issue-link",
                 "schema": self.component1.schema,
                 "sentryApp": {
@@ -98,7 +98,7 @@ class OrganizationSentryAppComponentsTest(APITestCase):
                 },
             },
             {
-                "uuid": six.binary_type(self.component2.uuid),
+                "uuid": six.text_type(self.component2.uuid),
                 "type": "issue-link",
                 "schema": self.component2.schema,
                 "sentryApp": {
@@ -136,7 +136,7 @@ class OrganizationSentryAppComponentsTest(APITestCase):
 
         assert response.data == [
             {
-                "uuid": six.binary_type(component.uuid),
+                "uuid": six.text_type(component.uuid),
                 "type": "alert-rule",
                 "schema": component.schema,
                 "sentryApp": {
@@ -168,7 +168,7 @@ class OrganizationSentryAppComponentsTest(APITestCase):
         # during preparation.
         assert response.data == [
             {
-                "uuid": six.binary_type(self.component2.uuid),
+                "uuid": six.text_type(self.component2.uuid),
                 "type": self.component2.type,
                 "schema": self.component2.schema,
                 "sentryApp": {
diff --git a/tests/sentry/api/endpoints/test_user_authenticator_details.py b/tests/sentry/api/endpoints/test_user_authenticator_details.py
index 682255e2ee..8ac493e9fe 100644
--- a/tests/sentry/api/endpoints/test_user_authenticator_details.py
+++ b/tests/sentry/api/endpoints/test_user_authenticator_details.py
@@ -319,7 +319,7 @@ class UserAuthenticatorDetailsTest(APITestCase):
 
         resp = self.client.delete(url, format="json")
         assert resp.status_code == 403, (resp.status_code, resp.content)
-        self.assertIn("requires 2FA", resp.content)
+        assert b"requires 2FA" in resp.content
 
         assert Authenticator.objects.filter(id=auth.id).exists()
 
diff --git a/tests/sentry/api/endpoints/test_user_authenticator_enroll.py b/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
index 08b5de144c..02b07d8f50 100644
--- a/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
+++ b/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
@@ -192,7 +192,7 @@ class AcceptOrganizationInviteTest(APITestCase):
     def _assert_pending_invite_cookie_set(self, response, om):
         invite_link = om.get_invite_link()
         invite_data = dict(parse_qsl(response.client.cookies["pending-invite"].value))
-        self.assertIn(invite_data.get("url"), invite_link)
+        assert invite_data.get("url") in invite_link
 
     def create_existing_om(self):
         OrganizationMember.objects.create(
diff --git a/tests/sentry/db/models/fields/test_jsonfield.py b/tests/sentry/db/models/fields/test_jsonfield.py
index 2911084de2..1158bc5b73 100644
--- a/tests/sentry/db/models/fields/test_jsonfield.py
+++ b/tests/sentry/db/models/fields/test_jsonfield.py
@@ -180,7 +180,7 @@ class JSONFieldTest(TestCase):
     def test_invalid_json(self):
         obj = JSONFieldTestModel()
         obj.json = '{"foo": 2}'
-        self.assertIn("foo", obj.json)
+        assert "foo" in obj.json
         with self.assertRaises(forms.ValidationError):
             obj.json = '{"foo"}'
 
diff --git a/tests/sentry/integrations/jira/test_configure.py b/tests/sentry/integrations/jira/test_configure.py
index 5cd014bc77..f9c0be6d2d 100644
--- a/tests/sentry/integrations/jira/test_configure.py
+++ b/tests/sentry/integrations/jira/test_configure.py
@@ -11,11 +11,11 @@ from sentry.testutils import APITestCase
 from sentry.utils.http import absolute_uri
 
 
-PERMISSIONS_WARNING = "You must be an organization owner or manager in Sentry to complete setup."
-REFRESH_REQUIRED = "This page has expired, please refresh to configure your Sentry integration"
-LOGIN_REQUIRED = "Please login to your Sentry account to access the Sentry Add-on configuration"
-ORGANIZATIONS_FORM = "Enabled Sentry Organizations"
-COMPLETED = "Saved!"
+PERMISSIONS_WARNING = b"You must be an organization owner or manager in Sentry to complete setup."
+REFRESH_REQUIRED = b"This page has expired, please refresh to configure your Sentry integration"
+LOGIN_REQUIRED = b"Please login to your Sentry account to access the Sentry Add-on configuration"
+ORGANIZATIONS_FORM = b"Enabled Sentry Organizations"
+COMPLETED = b"Saved!"
 
 
 class JiraConfigureViewTestCase(APITestCase):
@@ -58,7 +58,7 @@ class JiraConfigureViewErrorsTest(JiraConfigureViewTestCase):
 
         assert response.status_code == 200
         assert LOGIN_REQUIRED in response.content
-        assert absolute_uri(reverse("sentry-login")) in response.content
+        assert absolute_uri(reverse("sentry-login")).encode("utf-8") in response.content
 
     @patch(
         "sentry.integrations.jira.configure.get_integration_from_request",
@@ -84,7 +84,7 @@ class JiraConfigureViewErrorsTest(JiraConfigureViewTestCase):
         response = self.client.post(self.path)
         assert response.status_code == 200
         assert LOGIN_REQUIRED in response.content
-        assert absolute_uri(reverse("sentry-login")) in response.content
+        assert absolute_uri(reverse("sentry-login")).encode("utf-8") in response.content
 
 
 class JiraConfigureViewTest(JiraConfigureViewTestCase):
diff --git a/tests/sentry/integrations/slack/test_action_endpoint.py b/tests/sentry/integrations/slack/test_action_endpoint.py
index b84a5d995f..8af6a056d0 100644
--- a/tests/sentry/integrations/slack/test_action_endpoint.py
+++ b/tests/sentry/integrations/slack/test_action_endpoint.py
@@ -275,7 +275,7 @@ class StatusActionTest(BaseEventTest):
         assert resp.status_code == 200, resp.content
 
         # Opening dialog should *not* cause the current message to be updated
-        assert resp.content == ""
+        assert resp.content == b""
 
         data = parse_qs(responses.calls[0].request.body)
         assert data["token"][0] == self.integration.metadata["access_token"]
@@ -354,7 +354,7 @@ class StatusActionTest(BaseEventTest):
         assert resp.status_code == 200, resp.content
 
         # Opening dialog should *not* cause the current message to be updated
-        assert resp.content == ""
+        assert resp.content == b""
 
         data = parse_qs(responses.calls[0].request.body)
         assert data["token"][0] == self.integration.metadata["access_token"]
diff --git a/tests/sentry/integrations/vsts/test_integration.py b/tests/sentry/integrations/vsts/test_integration.py
index 51941762a0..c9c21e2ad4 100644
--- a/tests/sentry/integrations/vsts/test_integration.py
+++ b/tests/sentry/integrations/vsts/test_integration.py
@@ -147,7 +147,7 @@ class VstsIntegrationProviderTest(VstsIntegrationTestCase):
         # OAuth redirect back to Sentry (identity_pipeline_view)
         resp = self.make_oauth_redirect_request(query["state"][0])
         assert resp.status_code == 200, resp.content
-        assert "No accounts found" in resp.content
+        assert b"No accounts found" in resp.content
 
     def test_webhook_subscription_created_once(self):
         self.assert_installation()
diff --git a/tests/sentry/integrations/vsts/testutils.py b/tests/sentry/integrations/vsts/testutils.py
index db6b752c06..bf8684decf 100644
--- a/tests/sentry/integrations/vsts/testutils.py
+++ b/tests/sentry/integrations/vsts/testutils.py
@@ -169,7 +169,7 @@ class VstsIntegrationTestCase(IntegrationTestCase):
     def assert_account_selection(self, response, account_id=None):
         account_id = account_id or self.vsts_account_id
         assert response.status_code == 200
-        assert u'<option value="{}"'.format(account_id) in response.content
+        assert u'<option value="{}"'.format(account_id).encode("utf-8") in response.content
 
     def assert_installation(self):
         # Initial request to the installation URL for VSTS
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index 0134c0ac3c..e6a307978d 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -104,7 +104,7 @@ class FetchReleaseFileTest(TestCase):
             type="release.file",
             headers={"Content-Type": "application/json; charset=utf-8"},
         )
-        foo_file.putfile(six.BytesIO("foo"))
+        foo_file.putfile(six.BytesIO(b"foo"))
         foo_dist = release.add_dist("foo")
         ReleaseFile.objects.create(
             name="file.min.js",
@@ -119,7 +119,7 @@ class FetchReleaseFileTest(TestCase):
             type="release.file",
             headers={"Content-Type": "application/json; charset=utf-8"},
         )
-        bar_file.putfile(six.BytesIO("bar"))
+        bar_file.putfile(six.BytesIO(b"bar"))
         bar_dist = release.add_dist("bar")
         ReleaseFile.objects.create(
             name="file.min.js",
@@ -227,7 +227,7 @@ class FetchFileTest(TestCase):
         assert len(responses.calls) == 1
 
         assert result.url == "http://example.com"
-        assert result.body == "foo bar"
+        assert result.body == b"foo bar"
         assert result.headers == {"content-type": "application/json"}
 
         # ensure we use the cached result
@@ -263,7 +263,7 @@ class FetchFileTest(TestCase):
             result = fetch_file(url, project=self.project)
 
             assert result.url == url
-            assert result.body == "foo bar"
+            assert result.body == b"foo bar"
             assert result.headers == {"content-type": "application/json"}
 
             assert len(responses.calls) == i + 1
@@ -301,7 +301,7 @@ class FetchFileTest(TestCase):
 
         result = fetch_file("/example.js", release=release)
         assert result.url == "/example.js"
-        assert result.body == "foo"
+        assert result.body == b"foo"
         assert isinstance(result.body, six.binary_type)
         assert result.headers == {"content-type": "application/json"}
         assert result.encoding is None
@@ -320,7 +320,7 @@ class FetchFileTest(TestCase):
         assert len(responses.calls) == 1
 
         assert result.url == "http://example.com"
-        assert result.body == '"f\xc3\xb4o bar"'
+        assert result.body == b'"f\xc3\xb4o bar"'
         assert result.headers == {"content-type": "application/json; charset=utf-8"}
         assert result.encoding == "utf-8"
 
diff --git a/tests/sentry/lang/javascript/test_sourcemaps.py b/tests/sentry/lang/javascript/test_sourcemaps.py
index 5bd7da50f4..19b34dff02 100644
--- a/tests/sentry/lang/javascript/test_sourcemaps.py
+++ b/tests/sentry/lang/javascript/test_sourcemaps.py
@@ -7,7 +7,7 @@ from unittest import TestCase
 
 from sentry.utils import json
 
-sourcemap = """{
+sourcemap = b"""{
     "version":3,
     "file":"file.min.js",
     "sources":["file1.js","file2.js"],
@@ -51,7 +51,7 @@ indexed_sourcemap_example = json.dumps(
             },
         ],
     }
-)
+).encode("utf-8")
 
 
 class FindSourceTest(TestCase):
diff --git a/tests/sentry/tasks/test_data_export.py b/tests/sentry/tasks/test_data_export.py
index a7656d5506..b62e220446 100644
--- a/tests/sentry/tasks/test_data_export.py
+++ b/tests/sentry/tasks/test_data_export.py
@@ -85,7 +85,7 @@ class AssembleDownloadTest(TestCase, SnubaTestCase):
             assemble_download(de1)
         error = emailer.call_args[1]["message"]
         assert isinstance(error, DataExportError)
-        assert six.binary_type(error) == "Requested project does not exist"
+        assert six.text_type(error) == u"Requested project does not exist"
         de2 = ExportedData.objects.create(
             user=self.user,
             organization=self.org,
@@ -96,4 +96,4 @@ class AssembleDownloadTest(TestCase, SnubaTestCase):
             assemble_download(de2)
         error = emailer.call_args[1]["message"]
         assert isinstance(error, DataExportError)
-        assert six.binary_type(error) == "Requested issue does not exist"
+        assert six.text_type(error) == u"Requested issue does not exist"
diff --git a/tests/sentry/tsdb/test_snuba.py b/tests/sentry/tsdb/test_snuba.py
index 08eb3d47bb..9ac74a3744 100644
--- a/tests/sentry/tsdb/test_snuba.py
+++ b/tests/sentry/tsdb/test_snuba.py
@@ -1,4 +1,4 @@
-from __future__ import absolute_import
+from __future__ import absolute_import, division
 
 import pytz
 import six
@@ -18,7 +18,7 @@ def floor_to_hour_epoch(value):
 
 def floor_to_10s_epoch(value):
     seconds = value.second
-    floored_second = 10 * (seconds / 10)
+    floored_second = 10 * (seconds // 10)
 
     value = value.replace(second=floored_second, microsecond=0)
     return int(to_timestamp(value))
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index c35cc5cd73..f8e9ba74f6 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -205,27 +205,27 @@ class StoreViewTest(TestCase):
         }
         resp = self.client.options(self.path)
         assert resp.status_code == 200, (resp.status_code, resp.content)
-        self.assertIn("Allow", resp)
+        assert resp.has_header("Allow")
         self.assertEquals(resp["Allow"], "GET, POST, HEAD, OPTIONS")
-        self.assertIn("Content-Length", resp)
+        assert resp.has_header("Content-Length")
         self.assertEquals(resp["Content-Length"], "0")
 
     def test_options_with_no_origin_or_referrer(self):
         resp = self.client.options(self.path)
         assert resp.status_code == 200, (resp.status_code, resp.content)
-        self.assertIn("Access-Control-Allow-Origin", resp)
+        assert resp.has_header("Access-Control-Allow-Origin")
         self.assertEquals(resp["Access-Control-Allow-Origin"], "*")
 
     def test_options_response_with_valid_origin(self):
         resp = self.client.options(self.path, HTTP_ORIGIN="http://foo.com")
         assert resp.status_code == 200, (resp.status_code, resp.content)
-        self.assertIn("Access-Control-Allow-Origin", resp)
+        assert resp.has_header("Access-Control-Allow-Origin")
         self.assertEquals(resp["Access-Control-Allow-Origin"], "http://foo.com")
 
     def test_options_response_with_valid_referrer(self):
         resp = self.client.options(self.path, HTTP_REFERER="http://foo.com")
         assert resp.status_code == 200, (resp.status_code, resp.content)
-        self.assertIn("Access-Control-Allow-Origin", resp)
+        assert resp.has_header("Access-Control-Allow-Origin")
         self.assertEquals(resp["Access-Control-Allow-Origin"], "http://foo.com")
 
     def test_options_response_origin_preferred_over_referrer(self):
@@ -233,7 +233,7 @@ class StoreViewTest(TestCase):
             self.path, HTTP_REFERER="http://foo.com", HTTP_ORIGIN="http://bar.com"
         )
         assert resp.status_code == 200, (resp.status_code, resp.content)
-        self.assertIn("Access-Control-Allow-Origin", resp)
+        assert resp.has_header("Access-Control-Allow-Origin")
         self.assertEquals(resp["Access-Control-Allow-Origin"], "http://bar.com")
 
     @mock.patch("sentry.event_manager.is_valid_ip", mock.Mock(return_value=False))
@@ -359,7 +359,7 @@ class StoreViewTest(TestCase):
 
         resp = self._postWithHeader(body, HTTP_ORIGIN="lolnope.com")
         assert resp.status_code == 403, (resp.status_code, resp.content)
-        assert "Invalid origin" in resp.content
+        assert b"Invalid origin" in resp.content
 
     def test_request_with_beginning_glob(self):
         self.project.update_option(
@@ -643,7 +643,7 @@ class CrossDomainXmlTest(TestCase):
         assert resp.status_code == 200, resp.content
         self.assertEquals(resp["Content-Type"], "application/xml")
         self.assertTemplateUsed(resp, "sentry/crossdomain.xml")
-        assert '<allow-access-from domain="*" secure="false" />' in resp.content.decode("utf-8")
+        assert b'<allow-access-from domain="*" secure="false" />' in resp.content
 
     @mock.patch("sentry.web.api.get_origins")
     def test_output_with_whitelist(self, get_origins):
@@ -653,13 +653,8 @@ class CrossDomainXmlTest(TestCase):
         self.assertEquals(resp.status_code, 200)
         self.assertEquals(resp["Content-Type"], "application/xml")
         self.assertTemplateUsed(resp, "sentry/crossdomain.xml")
-        assert '<allow-access-from domain="disqus.com" secure="false" />' in resp.content.decode(
-            "utf-8"
-        )
-        assert (
-            '<allow-access-from domain="www.disqus.com" secure="false" />'
-            in resp.content.decode("utf-8")
-        )
+        assert b'<allow-access-from domain="disqus.com" secure="false" />' in resp.content
+        assert b'<allow-access-from domain="www.disqus.com" secure="false" />' in resp.content
 
     @mock.patch("sentry.web.api.get_origins")
     def test_output_with_no_origins(self, get_origins):
@@ -669,7 +664,7 @@ class CrossDomainXmlTest(TestCase):
         self.assertEquals(resp.status_code, 200)
         self.assertEquals(resp["Content-Type"], "application/xml")
         self.assertTemplateUsed(resp, "sentry/crossdomain.xml")
-        assert "<allow-access-from" not in resp.content.decode("utf-8")
+        assert b"<allow-access-from" not in resp.content
 
     def test_output_allows_x_sentry_auth(self):
         resp = self.client.get(self.path)
@@ -677,8 +672,8 @@ class CrossDomainXmlTest(TestCase):
         self.assertEquals(resp["Content-Type"], "application/xml")
         self.assertTemplateUsed(resp, "sentry/crossdomain.xml")
         assert (
-            '<allow-http-request-headers-from domain="*" headers="*" secure="false" />'
-            in resp.content.decode("utf-8")
+            b'<allow-http-request-headers-from domain="*" headers="*" secure="false" />'
+            in resp.content
         )
 
 
diff --git a/tests/sentry/web/frontend/test_error_page_embed.py b/tests/sentry/web/frontend/test_error_page_embed.py
index 2384f7a43e..7b3566fa2a 100644
--- a/tests/sentry/web/frontend/test_error_page_embed.py
+++ b/tests/sentry/web/frontend/test_error_page_embed.py
@@ -57,7 +57,7 @@ class ErrorPageEmbedTest(TestCase):
         assert resp.status_code == 400, resp.content
         assert resp["Content-Type"] == "text/javascript"
         assert resp["X-Sentry-Context"] == '{"eventId":"Missing or invalid parameter."}'
-        assert resp.content == ""
+        assert resp.content == b""
 
     def test_missing_dsn(self):
         path = "%s?eventId=%s" % (self.path, quote(self.event_id))
@@ -68,7 +68,7 @@ class ErrorPageEmbedTest(TestCase):
         assert resp.status_code == 404, resp.content
         assert resp["Content-Type"] == "text/javascript"
         assert resp["X-Sentry-Context"] == '{"dsn":"Missing or invalid parameter."}'
-        assert resp.content == ""
+        assert resp.content == b""
 
     def test_renders(self):
         resp = self.client.get(
@@ -88,7 +88,7 @@ class ErrorPageEmbedTest(TestCase):
         )
         assert resp.status_code == 200, resp.content
         self.assertTemplateUsed(resp, "sentry/error-page-embed.html")
-        assert "Fermer" in resp.content  # Close
+        assert b"Fermer" in resp.content  # Close
 
     def test_xss(self):
         user_feedback_options = {}
@@ -107,7 +107,9 @@ class ErrorPageEmbedTest(TestCase):
             "labelClose",
         ]
         for key in option_keys:
-            user_feedback_options[key] = "<img src=x onerror=alert({0})>XSS_{0}".format(key)
+            user_feedback_options[key] = "<img src=x onerror=alert({0})>XSS_{0}".format(key).encode(
+                "utf-8"
+            )
 
         user_feedback_options_qs = urlencode(user_feedback_options)
         path_with_qs = "%s?eventId=%s&dsn=%s&%s" % (
diff --git a/tests/sentry/web/frontend/test_js_sdk_loader.py b/tests/sentry/web/frontend/test_js_sdk_loader.py
index 9287a7a87c..dcdb1a9d09 100644
--- a/tests/sentry/web/frontend/test_js_sdk_loader.py
+++ b/tests/sentry/web/frontend/test_js_sdk_loader.py
@@ -35,15 +35,15 @@ class JavaScriptSdkLoaderTest(TestCase):
         )
         resp = self.client.get(reverse("sentry-js-sdk-loader", args=[self.projectkey.public_key]))
         assert resp.status_code == 200
-        self.assertIn(settings.JS_SDK_LOADER_DEFAULT_SDK_URL, resp.content)
+        assert settings.JS_SDK_LOADER_DEFAULT_SDK_URL.encode("utf-8") in resp.content
         self.assertTemplateUsed(resp, "sentry/js-sdk-loader.js.tmpl")
 
     def test_renders_js_loader(self):
         resp = self.client.get(self.path)
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, "sentry/js-sdk-loader.js.tmpl")
-        self.assertIn(self.projectkey.public_key, resp.content)
-        self.assertIn("bundle.min.js", resp.content)
+        assert self.projectkey.public_key.encode("utf-8") in resp.content
+        assert b"bundle.min.js" in resp.content
 
     def test_minified(self):
         resp = self.client.get(self.path)
@@ -53,8 +53,8 @@ class JavaScriptSdkLoaderTest(TestCase):
         )
         assert min_resp.status_code == 200
         self.assertTemplateUsed(min_resp, "sentry/js-sdk-loader.min.js.tmpl")
-        self.assertIn(self.projectkey.public_key, min_resp.content)
-        self.assertIn("bundle.min.js", min_resp.content)
+        assert self.projectkey.public_key.encode("utf-8") in min_resp.content
+        assert b"bundle.min.js" in min_resp.content
         assert len(resp.content) > len(min_resp.content)
 
     @patch("sentry.loader.browsersdkversion.load_version_from_file")
@@ -66,14 +66,14 @@ class JavaScriptSdkLoaderTest(TestCase):
 
         resp = self.client.get(self.path)
         assert resp.status_code == 200, resp
-        self.assertIn("*", resp["Access-Control-Allow-Origin"])
-        self.assertIn("stale-if-error", resp["Cache-Control"])
-        self.assertIn("stale-while-revalidate", resp["Cache-Control"])
-        self.assertIn("s-maxage", resp["Cache-Control"])
-        self.assertIn("max-age", resp["Cache-Control"])
-        self.assertIn("project/%s" % self.projectkey.project_id, resp["Surrogate-Key"])
-        self.assertIn("sdk/", resp["Surrogate-Key"])
-        self.assertIn("sdk-loader", resp["Surrogate-Key"])
+        assert "*" in resp["Access-Control-Allow-Origin"]
+        assert "stale-if-error" in resp["Cache-Control"]
+        assert "stale-while-revalidate" in resp["Cache-Control"]
+        assert "s-maxage" in resp["Cache-Control"]
+        assert "max-age" in resp["Cache-Control"]
+        assert "project/%s" % self.projectkey.project_id in resp["Surrogate-Key"]
+        assert "sdk/" in resp["Surrogate-Key"]
+        assert "sdk-loader" in resp["Surrogate-Key"]
         assert "Content-Encoding" not in resp
         assert "Set-Cookie" not in resp
         assert "Vary" not in resp
@@ -84,6 +84,6 @@ class JavaScriptSdkLoaderTest(TestCase):
             in self.projectkey.js_sdk_loader_cdn_url
         )
         settings.JS_SDK_LOADER_CDN_URL = "https://js.sentry-cdn.com/"
-        assert "https://js.sentry-cdn.com/%s.min.js" % (
-            self.projectkey.public_key == self.projectkey.js_sdk_loader_cdn_url
-        )
+        assert (
+            "https://js.sentry-cdn.com/%s.min.js" % self.projectkey.public_key
+        ) == self.projectkey.js_sdk_loader_cdn_url
diff --git a/tests/sentry/web/frontend/test_organization_integration_setup.py b/tests/sentry/web/frontend/test_organization_integration_setup.py
index 2e29bd0934..5f8f820dd3 100644
--- a/tests/sentry/web/frontend/test_organization_integration_setup.py
+++ b/tests/sentry/web/frontend/test_organization_integration_setup.py
@@ -37,4 +37,4 @@ class OrganizationIntegrationSetupTest(TestCase):
 
         # Check that we're binding the state back to the opening window
         # through the dialog's window.postMessage.
-        assert "morty" in resp.content
+        assert b"morty" in resp.content
