commit 76038e7c40342f4863a0a997ed47495fa14f4e81
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Oct 1 13:43:52 2015 -0700

    Add basic time range selector to project dashboard (fixes GH-2058)

diff --git a/src/sentry/static/sentry/app/views/projectDashboard.jsx b/src/sentry/static/sentry/app/views/projectDashboard.jsx
index 215580c640..825aaffa6b 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard.jsx
@@ -1,11 +1,17 @@
+import jQuery from "jquery";
 import React from "react";
+import Router from "react-router";
+
 import EventList from "./projectDashboard/eventList";
 import ProjectState from "../mixins/projectState";
 import ProjectChart from "./projectDashboard/chart";
+import RouteMixin from "../mixins/routeMixin";
+
 
 var ProjectDashboard = React.createClass({
   mixins: [
-    ProjectState
+    ProjectState,
+    RouteMixin
   ],
 
   contextTypes: {
@@ -16,38 +22,136 @@ var ProjectDashboard = React.createClass({
     setProjectNavSection: React.PropTypes.func.isRequired
   },
 
+  getDefaultProps() {
+    return {
+      defaultStatsPeriod: "24h"
+    };
+  },
+
+  getInitialState() {
+    return jQuery.extend({}, {
+      statsPeriod: this.props.defaultStatsPeriod
+    }, this.getQueryStringState());
+  },
+
   componentWillMount() {
     this.props.setProjectNavSection('dashboard');
+    this._path = this.context.router.getCurrentPath();
   },
 
-  getTrendingEventsEndpoint() {
-    var router = this.context.router;
-    var params = router.getCurrentParams();
-    var qs = "sort=priority";
+  routeDidChange() {
+    this.setState(this.getQueryStringState());
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    if (this._path !== this.context.router.getCurrentPath()) {
+      this._path = this.context.router.getCurrentPath();
+      return true;
+    }
+    return false;
+  },
+
+  getQueryStringState() {
+    var currentQuery = this.context.router.getCurrentQuery();
+    var statsPeriod = currentQuery.statsPeriod;
+
+    if (statsPeriod !== '1w' && statsPeriod !== '24h' && statsPeriod != '1h') {
+      statsPeriod = this.props.defaultStatsPeriod;
+    }
+
+    return {
+      statsPeriod: statsPeriod
+    };
+  },
+
+  getStatsPeriodBeginTimestamp(statsPeriod) {
+    let now = new Date().getTime() / 1000;
+    switch (statsPeriod) {
+      case '1w':
+        return now - 3600 * 24 * 7;
+      case '1h':
+        return now - 3600;
+      case '24h':
+      default:
+        return now - 3600 * 24;
+    }
+  },
+
+  getStatsPeriodResolution(statsPeriod) {
+    switch (statsPeriod) {
+      case '1w':
+        return '1h';
+      case '1h':
+        return '10s';
+      case '24h':
+      default:
+        return '1h';
+    }
+  },
+
+  getTrendingEventsEndpoint(dateSince) {
+    let router = this.context.router;
+    let params = router.getCurrentParams();
+    let qs = "sort=priority&since=" + dateSince;
     return "/projects/" + params.orgId + "/" + params.projectId + "/groups/?" + qs;
   },
 
-  getNewEventsEndpoint() {
-    var router = this.context.router;
-    var params = router.getCurrentParams();
-    var qs = "sort=new";
+  getNewEventsEndpoint(dateSince) {
+    let router = this.context.router;
+    let params = router.getCurrentParams();
+    let qs = "sort=new&since=" + dateSince;
     return "/projects/" + params.orgId + "/" + params.projectId + "/groups/?" + qs;
   },
 
   render() {
+    let {statsPeriod} = this.state;
+    let dateSince = this.getStatsPeriodBeginTimestamp(statsPeriod);
+    let resolution = this.getStatsPeriodResolution(statsPeriod);
+    let router = this.context.router;
+    let routeName = "projectDashboard";
+    let routeParams = router.getCurrentParams();
+    let routeQuery = router.getCurrentQuery();
+
     return (
       <div>
-        <ProjectChart />
+        <div>
+          <div className="pull-right">
+            <div className="btn-group">
+              <Router.Link
+                to={routeName}
+                params={routeParams}
+                query={jQuery.extend({}, routeQuery, {statsPeriod: '1h'})}
+                isActive={statsPeriod === '1h'}
+                className={"btn btn-sm btn-default"}>1h</Router.Link>
+              <Router.Link
+                to={routeName}
+                params={routeParams}
+                query={jQuery.extend({}, routeQuery, {statsPeriod: '24h'})}
+                isActive={statsPeriod === '24h'}
+                className={"btn btn-sm btn-default"}>24h</Router.Link>
+              <Router.Link
+                to={routeName}
+                params={routeParams}
+                query={jQuery.extend({}, routeQuery, {statsPeriod: '1w'})}
+                isActive={statsPeriod === '1w'}
+                className={"btn btn-sm btn-default"}>1w</Router.Link>
+            </div>
+          </div>
+          <h3>Overview</h3>
+        </div>
+        <ProjectChart
+            dateSince={dateSince}
+            resolution={resolution} />
         <div className="row">
           <div className="col-md-6">
             <EventList
                 title="Trending Events"
-                endpoint={this.getTrendingEventsEndpoint()} />
+                endpoint={this.getTrendingEventsEndpoint(dateSince)} />
           </div>
           <div className="col-md-6">
             <EventList
                 title="New Events"
-                endpoint={this.getNewEventsEndpoint()} />
+                endpoint={this.getNewEventsEndpoint(dateSince)} />
           </div>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
index d6eab86507..9e2442de8d 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
@@ -4,12 +4,10 @@ import api from "../../api";
 import BarChart from "../../components/barChart";
 import LoadingError from "../../components/loadingError";
 import LoadingIndicator from "../../components/loadingIndicator";
-import RouteMixin from "../../mixins/routeMixin";
 import ProjectState from "../../mixins/projectState";
 
 var ProjectChart = React.createClass({
   mixins: [
-    RouteMixin,
     ProjectState,
   ],
 
@@ -19,17 +17,17 @@ var ProjectChart = React.createClass({
 
   getInitialState() {
     return {
+      loading: true,
       error: false,
       stats: [],
-      releaseList: [],
-      dateSince: (new Date().getTime() / 1000) - (3600 * 24 * 7)
+      releaseList: []
     };
   },
 
   getStatsEndpoint() {
     var org = this.getOrganization();
     var project = this.getProject();
-    return "/projects/" + org.slug + "/" + project.slug + "/stats/?resolution=1h";
+    return "/projects/" + org.slug + "/" + project.slug + "/stats/?resolution=" + this.props.resolution;
   },
 
   getProjectReleasesEndpoint() {
@@ -42,32 +40,29 @@ var ProjectChart = React.createClass({
     this.fetchData();
   },
 
-  routeDidChange(nextPath, nextParams) {
-    var router = this.context.router;
-    var params = router.getCurrentParams();
-    if (params.orgId != nextParams.orgId || nextParams.projectId != params.projectId) {
-      this.fetchData();
-    }
-  },
-
-  fetchData() {
+  componentWillReceiveProps() {
     this.setState({
+      loading: true,
       error: false
-    });
+    }, this.fetchData);
+  },
 
+  fetchData() {
     api.request(this.getStatsEndpoint(), {
       query: {
-        since: this.state.dateSince
+        since: this.props.dateSince
       },
       success: (data) => {
         this.setState({
           stats: data,
-          error: false
+          error: false,
+          loading: false
         });
       },
       error: () => {
         this.setState({
-          error: true
+          error: true,
+          loading: false
         });
       }
     });
@@ -102,7 +97,7 @@ var ProjectChart = React.createClass({
           points={points}
           markers={markers}
           className="sparkline" />
-        <small className="date-legend">{moment(this.state.dateSince * 1000).format("LL")}</small>
+        <small className="date-legend">{moment(this.props.dateSince * 1000).format("LL")}</small>
       </div>
     );
   },
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx b/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
index c3d4245ec9..b0d417cdec 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
@@ -2,15 +2,10 @@ import React from "react";
 import api from "../../api";
 import LoadingError from "../../components/loadingError";
 import LoadingIndicator from "../../components/loadingIndicator";
-import RouteMixin from "../../mixins/routeMixin";
 
 import EventNode from "./eventNode";
 
 var EventList = React.createClass({
-  mixins: [
-    RouteMixin
-  ],
-
   contextTypes: {
     router: React.PropTypes.func
   },
@@ -33,26 +28,14 @@ var EventList = React.createClass({
     this.fetchData();
   },
 
-  routeDidChange(nextPath, nextParams) {
-    var router = this.context.router;
-    var params = router.getCurrentParams();
-    if (nextParams.teamId != params.teamId) {
-      this.fetchData();
-    }
-  },
-
-  componentDidUpdate(_, prevState) {
-    if (this.state.statsPeriod != prevState.statsPeriod) {
-      this.fetchData();
-    }
-  },
-
-  fetchData() {
+  componentWillReceiveProps() {
     this.setState({
       loading: true,
       error: false
-    });
+    }, this.fetchData);
+  },
 
+  fetchData() {
     var minutes;
     switch(this.state.statsPeriod) {
       case "15m":
