commit 4fb88278067aa33dfced1e977d28e0d9cda8528b
Author: Eric Feng <ehfeng@users.noreply.github.com>
Date:   Fri Jun 23 11:42:51 2017 -0700

    adding environment tracking back in (#5600)
    
    * adding environment tracking back in to see if this doesn't disrupt the event processing pipeline
    
    * updating required version of rb
    
    * having record and bulk record always return booleans
    
    * adding two more return False

diff --git a/setup.py b/setup.py
index 8580bd711b..a6b81e2265 100755
--- a/setup.py
+++ b/setup.py
@@ -143,7 +143,7 @@ install_requires = [
     'ua-parser>=0.6.1,<0.8.0',
     'urllib3>=1.14,<1.17',
     'uwsgi>2.0.0,<2.1.0',
-    'rb>=1.6.0,<2.0.0',
+    'rb>=1.7.0,<2.0.0',
     'qrcode>=5.2.2,<6.0.0',
     'python-u2flib-server>=4.0.1,<4.1.0',
 ]
diff --git a/src/sentry/models/featureadoption.py b/src/sentry/models/featureadoption.py
index fd44233323..69dcdd87c1 100644
--- a/src/sentry/models/featureadoption.py
+++ b/src/sentry/models/featureadoption.py
@@ -92,6 +92,7 @@ class FeatureAdoptionManager(BaseManager):
         org_key = FEATURE_ADOPTION_REDIS_KEY.format(organization_id)
         with redis.clusters.get('default').map() as client:
             client.sadd(org_key, feature_id)
+        return True
 
     def get_all_cache(self, organization_id):
         org_key = FEATURE_ADOPTION_REDIS_KEY.format(organization_id)
@@ -102,16 +103,20 @@ class FeatureAdoptionManager(BaseManager):
         return {int(x) for x in set.union(*[p.value for p in result])}
 
     def bulk_set_cache(self, organization_id, *args):
+        if not args:
+            return False
+
         org_key = FEATURE_ADOPTION_REDIS_KEY.format(organization_id)
         with redis.clusters.get('default').map() as client:
             client.sadd(org_key, *args)
+        return True
 
     def record(self, organization_id, feature_slug, **kwargs):
         try:
             feature_id = manager.get_by_slug(feature_slug).id
         except UnknownFeature as e:
             logger.exception(e)
-            return
+            return False
 
         if not self.in_cache(organization_id, feature_id):
             row, created = self.create_or_update(
@@ -130,10 +135,13 @@ class FeatureAdoptionManager(BaseManager):
             feature_ids = set([manager.get_by_slug(slug).id for slug in feature_slugs])
         except UnknownFeature as e:
             logger.exception(e)
-            return
+            return False
 
         incomplete_feature_ids = feature_ids - self.get_all_cache(organization_id)
 
+        if not incomplete_feature_ids:
+            return False
+
         for feature_id in incomplete_feature_ids:
             features.append(FeatureAdoption(
                 organization_id=organization_id,
@@ -142,12 +150,14 @@ class FeatureAdoptionManager(BaseManager):
         try:
             with transaction.atomic():
                 self.bulk_create(features)
+                return True
+
         except IntegrityError as e:
             # This can occur if redis somehow loses the set of complete features and we attempt to insert duplicate (org_id, feature_id) rows
             logger.exception(e)
-            return
+            return False
         finally:
-            self.bulk_set_cache(organization_id, *incomplete_feature_ids)
+            return self.bulk_set_cache(organization_id, *incomplete_feature_ids)
 
     def get_by_slug(self, organization, slug):
         return self.filter(organization=organization, feature_id=manager.get_by_slug(slug).id).first()
diff --git a/src/sentry/receivers/features.py b/src/sentry/receivers/features.py
index 44b7d7efb9..b288627c5c 100644
--- a/src/sentry/receivers/features.py
+++ b/src/sentry/receivers/features.py
@@ -8,6 +8,7 @@ from sentry.models import FeatureAdoption
 from sentry.receivers.rules import DEFAULT_RULE_LABEL, DEFAULT_RULE_DATA
 from sentry.signals import (
     alert_rule_created,
+    event_processed,
     project_created,
     member_joined,
     user_feedback_received,
@@ -37,24 +38,21 @@ DEFAULT_TAGS = frozenset(['level', 'logger', 'transaction', 'url', 'browser', 's
 #         complete=True)
 
 
-# @event_processed.connect(weak=False)
-# def record_event_processed(project, group, event, **kwargs):
-#     feature_slugs = []
+@event_processed.connect(weak=False)
+def record_event_processed(project, group, event, **kwargs):
+    feature_slugs = []
 
 #     # Platform
 #     if group.platform in manager.location_slugs('language'):
 #         feature_slugs.append(group.platform)
 
-#     elif event.data.get(get_interface('csp')):
-#         feature_slugs.append('csp')
-
 #     # Release Tracking
 #     if event.get_tag('sentry:release'):
 #         feature_slugs.append('release_tracking')
 
-#     # Environment Tracking
-#     if event.get_tag('environment'):
-#         feature_slugs.append('environment_tracking')
+    # Environment Tracking
+    if event.get_tag('environment'):
+        feature_slugs.append('environment_tracking')
 
 #     # User Tracking
 #     user_context = event.data.get('sentry.interfaces.User')
@@ -78,10 +76,10 @@ DEFAULT_TAGS = frozenset(['level', 'logger', 'transaction', 'url', 'browser', 's
 #     if event.data.get('sentry.interfaces.Breadcrumbs'):
 #         feature_slugs.append('breadcrumbs')
 
-#     if not feature_slugs:
-#         return
+    if not feature_slugs:
+        return
 
-#     FeatureAdoption.objects.bulk_record(project.organization_id, feature_slugs)
+    FeatureAdoption.objects.bulk_record(project.organization_id, feature_slugs)
 
 
 @user_feedback_received.connect(weak=False)
diff --git a/tests/sentry/receivers/test_featureadoption.py b/tests/sentry/receivers/test_featureadoption.py
index f84a78bcc6..7616aa76f8 100644
--- a/tests/sentry/receivers/test_featureadoption.py
+++ b/tests/sentry/receivers/test_featureadoption.py
@@ -7,7 +7,7 @@ from sentry.models import FeatureAdoption, Rule
 # from sentry.plugins import IssueTrackingPlugin2, NotificationPlugin
 from sentry.signals import (
     alert_rule_created,
-    # event_processed,
+    event_processed,
     # first_event_received,
     project_created,
     member_joined,
@@ -36,6 +36,23 @@ class FeatureAdoptionTest(TestCase):
 
     def test_bad_feature_slug(self):
         FeatureAdoption.objects.record(self.organization.id, "xxx")
+        feature_complete = FeatureAdoption.objects.get_by_slug(
+            organization=self.organization,
+            slug="first_event")
+        assert feature_complete is None
+
+    def test_all_passed_feature_slugs_are_complete(self):
+        group1 = self.create_group(project=self.project, platform='javascript', message='javascript error message')
+        event1 = self.create_full_event()
+        group2 = self.create_group(project=self.project, platform='javascript', message='javascript error message')
+        event2 = self.create_full_event(event_id='b')
+        event_processed.send(project=self.project, group=group1, event=event1, sender=type(self.project))
+        event_processed.send(project=self.project, group=group2, event=event2, sender=type(self.project))
+
+        feature_complete = FeatureAdoption.objects.get_by_slug(
+            organization=self.organization,
+            slug="environment_tracking")
+        assert feature_complete.complete
 
 #     def test_first_event(self):
 #         group = self.create_group(project=self.project, platform='javascript', message='javascript error message')
