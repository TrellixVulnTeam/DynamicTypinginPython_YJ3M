commit e48d15644be54ad8031c6f99517507928549db74
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Fri Dec 13 08:46:30 2019 -0800

    fix(pagerduty): Handle multiple PD accounts (#16084)

diff --git a/src/sentry/integrations/pagerduty/notify_action.py b/src/sentry/integrations/pagerduty/notify_action.py
index 2f65a6aa46..49e6944a4f 100644
--- a/src/sentry/integrations/pagerduty/notify_action.py
+++ b/src/sentry/integrations/pagerduty/notify_action.py
@@ -82,8 +82,12 @@ class PagerDutyNotifyServiceAction(EventAction):
         if event.group.is_ignored():
             return
 
+        integration_id = self.get_option("account")
+        service_id = self.get_option("service")
+
         try:
             integration = Integration.objects.get(
+                id=integration_id,
                 provider="pagerduty",
                 organizations=self.project.organization,
                 status=ObjectStatus.VISIBLE,
@@ -93,7 +97,7 @@ class PagerDutyNotifyServiceAction(EventAction):
             return
 
         try:
-            service = PagerDutyService.objects.get(pk=self.get_option("service"))
+            service = PagerDutyService.objects.get(pk=service_id)
         except PagerDutyService.DoesNotExist:
             return
 
diff --git a/tests/sentry/integrations/pagerduty/test_notify_action.py b/tests/sentry/integrations/pagerduty/test_notify_action.py
index 08a2df00b6..0f70672a9c 100644
--- a/tests/sentry/integrations/pagerduty/test_notify_action.py
+++ b/tests/sentry/integrations/pagerduty/test_notify_action.py
@@ -23,8 +23,6 @@ class PagerDutyNotifyActionTest(RuleTestCase):
     rule_cls = PagerDutyNotifyServiceAction
 
     def setUp(self):
-        self.get_event()
-
         self.integration = Integration.objects.create(
             provider="pagerduty",
             name="Example",
@@ -85,6 +83,50 @@ class PagerDutyNotifyActionTest(RuleTestCase):
         form = rule.get_form_instance()
         assert form.is_valid()
 
+    @responses.activate
+    def test_notifies_with_multiple_pd_accounts(self):
+        # make another PagerDuty account and service for the same organization
+        service_info = {
+            "type": "service",
+            "integration_key": "PND352",
+            "service_id": "346",
+            "service_name": "Informational",
+        }
+        integration = Integration.objects.create(
+            provider="pagerduty",
+            name="Example 3",
+            external_id="example-3",
+            metadata={"services": [service_info]},
+        )
+        integration.add_organization(self.organization, self.user)
+        service = PagerDutyService.objects.create(
+            service_name=service_info["service_name"],
+            integration_key=service_info["integration_key"],
+            organization_integration=integration.organizationintegration_set.first(),
+        )
+        self.installation = integration.get_installation(self.organization.id)
+
+        event = self.get_event()
+
+        rule = self.get_rule(data={"account": integration.id, "service": service.id})
+
+        results = list(rule.after(event=event, state=self.get_state()))
+        assert len(results) == 1
+
+        responses.add(
+            method=responses.POST,
+            url="https://events.pagerduty.com/v2/enqueue/",
+            body={},
+            status=202,
+            content_type="application/json",
+        )
+
+        # Trigger rule callback
+        results[0].callback(event, futures=[])
+        data = json.loads(responses.calls[0].request.body)
+
+        assert data["event_action"] == "trigger"
+
     @responses.activate
     def test_invalid_service_selected(self):
         # make a service associated with a different pagerduty account
