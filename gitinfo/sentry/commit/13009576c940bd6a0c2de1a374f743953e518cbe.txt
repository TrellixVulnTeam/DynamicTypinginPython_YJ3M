commit 13009576c940bd6a0c2de1a374f743953e518cbe
Author: David Cramer <dcramer@gmail.com>
Date:   Sat May 3 14:55:49 2014 -0300

    Switch alerts to use tsdb

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index e4c5656d2f..08df47e9b3 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -190,8 +190,8 @@ DEFAULT_LOG_LEVEL = 'error'
 DEFAULT_LOGGER_NAME = 'root'
 
 # Default alerting threshold values
-DEFAULT_ALERT_PROJECT_THRESHOLD = (500, 100)  # 500%, 100 events
-DEFAULT_ALERT_GROUP_THRESHOLD = (1000, 100)  # 1000%, 100 events
+DEFAULT_ALERT_PROJECT_THRESHOLD = (500, 25)  # 500%, 25 events
+DEFAULT_ALERT_GROUP_THRESHOLD = (1000, 25)  # 1000%, 25 events
 
 # The maximum number of events which can be requested as JSON
 MAX_JSON_RESULTS = 1000
diff --git a/src/sentry/tasks/check_alerts.py b/src/sentry/tasks/check_alerts.py
index 7c37d17a92..1c8b1954c4 100644
--- a/src/sentry/tasks/check_alerts.py
+++ b/src/sentry/tasks/check_alerts.py
@@ -8,13 +8,18 @@ sentry.tasks.check_alerts
 
 from __future__ import absolute_import, division
 
-from datetime import timedelta
-from django.utils import timezone
-from sentry.constants import MINUTE_NORMALIZATION
+import logging
+
+from datetime import datetime, timedelta
+from pytz import utc
+
 from sentry.tasks.base import instrumented_task
 from sentry.utils import math
 
 
+logger = logging.getLogger('alerts')
+
+
 def fsteps(start, stop, steps):
     step = (stop - start) / steps
     while start <= stop:
@@ -28,76 +33,68 @@ def check_alerts(**kwargs):
     Iterates all current keys and fires additional tasks to check each individual
     project's alert settings.
     """
-    from sentry.models import ProjectCountByMinute
-
-    now = timezone.now()
-    # we want at least a 60 second window of events
-    max_date = now - timedelta(minutes=1)
-    min_date = max_date - timedelta(minutes=MINUTE_NORMALIZATION)
-
-    # find each project which has data for the last interval
-    # TODO: we could force more work on the db by eliminating onces which don't
-    # have the full aggregate we need
-    qs = ProjectCountByMinute.objects.filter(
-        date__lte=max_date,
-        date__gt=min_date,
-    ).values_list('project_id', 'date', 'times_seen')
-    for project_id, date, count in qs:
-        if not count:
-            continue  # shouldnt happen
-        normalized_count = int(count / ((now - date).seconds / 60))
+    from sentry.models import Project
+
+    # TODO(dcramer): we'd rather limit this to projects which we know are 'active'
+    # this could be done using a similar strategy to our update buffer flushing
+    for project_id in Project.objects.values_list('id', flat=True):
         check_project_alerts.delay(
             project_id=project_id,
-            when=max_date,
-            count=normalized_count,
             expires=120,
         )
 
 
 @instrumented_task(name='sentry.tasks.check_alerts.check_project_alerts', queue='alerts')
-def check_project_alerts(project_id, when, count, **kwargs):
+def check_project_alerts(project_id, **kwargs):
     """
     Given 'when' and 'count', which should signify recent times we compare it to
     historical data for this project and if over a given threshold, create an
     alert.
     """
+    from sentry.app import tsdb
     from sentry.constants import DEFAULT_ALERT_PROJECT_THRESHOLD
-    from sentry.models import ProjectCountByMinute, ProjectOption, Alert
+    from sentry.models import ProjectOption, Alert
 
-    # TODO: make this use the cache
     threshold, min_events = ProjectOption.objects.get_value(
         project_id, 'alert:threshold', DEFAULT_ALERT_PROJECT_THRESHOLD)
 
     if not threshold and min_events:
         return
 
-    if min_events > count:
-        return
+    end = datetime.now().replace(tzinfo=utc) - timedelta(seconds=10)
+    start = end - timedelta(minutes=5)
 
-    # number of 15 minute intervals to capture
-    intervals = 8
+    results = [v for _, v in tsdb.get_range(
+        tsdb.models.project,
+        [project_id],
+        start=start,
+        end=end,
+        rollup=10,
+    )[project_id]]
 
-    max_date = when - timedelta(minutes=MINUTE_NORMALIZATION)
-    min_date = max_date - timedelta(minutes=(intervals * MINUTE_NORMALIZATION))
+    half_intervals = int(len(results) / 2)
+    previous_data, current_data = results[:half_intervals], results[half_intervals:]
+    current_avg = sum(current_data) / len(current_data)
 
-    # get historical data
-    data = list(ProjectCountByMinute.objects.filter(
-        project=project_id,
-        date__lte=max_date,
-        date__gt=min_date,
-    ).values_list('times_seen', flat=True))
+    # if there first few points within previous data are empty, assume that the
+    # project hasn't been active long enough for rates to be valid
+    if not any(previous_data[:3]):
+        return
 
-    # Bail if we don't have enough data points
-    if len(data) != intervals:
+    if min_events > current_avg:
         return
 
-    mean = math.mean(data)
-    dev = math.mad(data)
-    previous = (mean + dev * 2) / MINUTE_NORMALIZATION
+    mean = math.mean(previous_data)
+    dev = math.mad(previous_data)
+    previous_avg = (mean + dev * 2)
+
+    pct_increase = current_avg / previous_avg * 100
+
+    logger.info('Rate of events for project %d changed from %.2f to %2.f',
+        project_id, previous_avg, current_avg)
 
-    pct_increase = count / previous * 100
     if pct_increase > threshold:
         Alert.maybe_alert(
             project_id=project_id,
-            message='Rate of events per minute increased from %d to %d (+%d%%)' % (previous, count, pct_increase),
+            message='Rate of events increased from %.2f to %.2f' % (previous_avg, current_avg),
         )
diff --git a/tests/sentry/tasks/check_alerts/tests.py b/tests/sentry/tasks/check_alerts/tests.py
index e30ade12f5..1a4f7661fc 100644
--- a/tests/sentry/tasks/check_alerts/tests.py
+++ b/tests/sentry/tasks/check_alerts/tests.py
@@ -1,70 +1,78 @@
 import mock
 from datetime import timedelta
 from django.utils import timezone
-from sentry.models import ProjectCountByMinute, Alert
+
+from sentry.app import tsdb
+from sentry.models import Alert
 from sentry.tasks.check_alerts import check_project_alerts, check_alerts
 from sentry.testutils import TestCase
-from sentry.utils.dates import normalize_datetime
 
 
 class BaseTestCase(TestCase):
-    def create_counts(self, when, amount, minute_offset=0, normalize=True):
-        date = when - timedelta(minutes=minute_offset)
-        if normalize:
-            date = normalize_datetime(date)
-
-        ProjectCountByMinute.objects.create(
-            project=self.project,
-            date=date,
-            times_seen=amount,
-        )
+    def create_counts(self, project, when, amount, offset=0):
+        date = when - timedelta(seconds=offset)
+
+        tsdb.incr(tsdb.models.project, project.id, date, amount)
 
 
 class CheckAlertsTest(BaseTestCase):
     @mock.patch('sentry.tasks.check_alerts.check_project_alerts')
     def test_does_fire_jobs(self, check_project_alerts):
-        when = timezone.now()
-        self.create_counts(when, 50, 5, normalize=False)
-
-        with mock.patch('sentry.tasks.check_alerts.timezone.now') as now:
-            now.return_value = when
-            check_alerts()
-            now.assert_called_once_with()
-
-        check_project_alerts.delay.assert_called_once_with(
-            project_id=self.project.id,
-            when=when - timedelta(minutes=1),
-            count=10,
+        project = self.create_project()
+
+        check_alerts()
+
+        check_project_alerts.delay.assert_any_call(
+            project_id=project.id,
             expires=120
         )
 
 
 class CheckProjectAlertsTest(BaseTestCase):
     def test_it_works(self):
+        project = self.create_project()
+        now = timezone.now()
+
+        # create some data with gaps
+        for n in range(0, 50, 10):
+            self.create_counts(project, now, 2500, n)
+
+        for n in range(50, 300, 10):
+            self.create_counts(project, now, 100, n)
+
+        check_project_alerts(
+            project_id=project.id,
+        )
+        assert Alert.objects.filter(project=project).exists()
+
+    def test_without_false_positive(self):
+        project = self.create_project()
         now = timezone.now()
 
         # create some data with gaps
-        self.create_counts(now, 50)  # just now
-        self.create_counts(now, 73, 15)  # 15 minutes ago
-        self.create_counts(now, 100, 45)  # 45 minutes ago
-        self.create_counts(now, 90, 60)  # 60 minutes ago
-        self.create_counts(now, 95, 75)  # 75 minutes ago
-        self.create_counts(now, 130, 90)  # 90 minutes ago
-        self.create_counts(now, 150, 105)  # 105 minutes ago
-        self.create_counts(now, 100, 120)  # 120 minutes ago
-
-        # missing a data point, should fail
+        for n in range(0, 300, 10):
+            self.create_counts(project, now, 100, n)
+
         check_project_alerts(
-            project_id=self.project.id,
-            when=now,
-            count=100
+            project_id=project.id,
         )
-        assert not Alert.objects.filter(project=self.project).exists()
+        assert not Alert.objects.filter(project=project).exists()
+
+    def test_mostly_empty(self):
+        project = self.create_project()
+        now = timezone.now()
+
+        # create some data with gaps
+        for n in range(0, 100, 10):
+            self.create_counts(project, now, 500, n)
+
+        for n in range(100, 280, 10):
+            self.create_counts(project, now, 0, n)
+
+        for n in range(280, 300, 10):
+            self.create_counts(project, now, 200, n)
 
-        self.create_counts(now, 73, 30)  # 15 minutes ago
         check_project_alerts(
-            project_id=self.project.id,
-            when=now,
-            count=100
+            project_id=project.id,
         )
-        assert Alert.objects.filter(project=self.project).exists()
+        assert Alert.objects.filter(project=project).exists()
