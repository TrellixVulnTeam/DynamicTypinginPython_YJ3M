commit be53ead61695a6529cf923c8c9b88f57cbfdeac1
Author: Mark Story <mark@mark-story.com>
Date:   Wed Feb 6 10:00:51 2019 -0500

    feat(integrations) Add linking comment to GitLab (#11861)
    
    When building out the gitlab integration we didn't add a comment field.
    To improve parity with the gitlab plugin customers have requested that
    this field be added to the new integration.
    
    Fixes ISSUE-301

diff --git a/src/sentry/integrations/gitlab/client.py b/src/sentry/integrations/gitlab/client.py
index 177255756d..142a1aba87 100644
--- a/src/sentry/integrations/gitlab/client.py
+++ b/src/sentry/integrations/gitlab/client.py
@@ -22,6 +22,7 @@ class GitLabApiClientPath(object):
     hooks = u'/hooks'
     issue = u'/projects/{project}/issues/{issue}'
     issues = u'/projects/{project}/issues'
+    notes = u'/projects/{project}/issues/{issue_id}/notes'
     project = u'/projects/{project}'
     project_issues = u'/projects/{project}/issues'
     project_hooks = u'/projects/{project}/hooks'
@@ -183,6 +184,16 @@ class GitLabApiClient(ApiClient):
             data=data,
         )
 
+    def create_issue_comment(self, project_id, issue_id, data):
+        """Create an issue note/comment
+
+        See https://docs.gitlab.com/ee/api/notes.html#create-new-issue-note
+        """
+        return self.post(
+            GitLabApiClientPath.notes.format(project=project_id, issue_id=issue_id),
+            data=data,
+        )
+
     def search_project_issues(self, project_id, query, iids=None):
         """Search issues in a project
 
diff --git a/src/sentry/integrations/gitlab/issues.py b/src/sentry/integrations/gitlab/issues.py
index 7d841a7a88..16914dddbc 100644
--- a/src/sentry/integrations/gitlab/issues.py
+++ b/src/sentry/integrations/gitlab/issues.py
@@ -5,6 +5,7 @@ import re
 from django.core.urlresolvers import reverse
 from sentry.integrations.exceptions import ApiError, IntegrationError, ApiUnauthorized
 from sentry.integrations.issues import IssueBasicMixin
+from sentry.utils.http import absolute_uri
 
 ISSUE_EXTERNAL_KEY_FORMAT = re.compile(r'.+:(.+)#(.+)')
 
@@ -56,7 +57,7 @@ class GitlabIssueBasic(IssueBasicMixin):
         return [
             {
                 'name': 'project',
-                'label': 'Gitlab Project',
+                'label': 'GitLab Project',
                 'type': 'select',
                 'url': autocomplete_url,
                 'choices': project_choices,
@@ -96,6 +97,28 @@ class GitlabIssueBasic(IssueBasicMixin):
             }
         }
 
+    def after_link_issue(self, external_issue, **kwargs):
+        data = kwargs['data']
+        project_id, issue_id = data.get('externalIssue', '').split('#')
+        if not (project_id and issue_id):
+            raise IntegrationError('Project and Issue id must be provided')
+
+        client = self.get_client()
+        comment = data.get('comment')
+        if not comment:
+            return
+
+        try:
+            client.create_issue_comment(
+                project_id=project_id,
+                issue_id=issue_id,
+                data={
+                    'body': comment,
+                }
+            )
+        except ApiError as e:
+            raise IntegrationError(self.message_from_error(e))
+
     def get_link_issue_config(self, group, **kwargs):
         default_project, project_choices = self.get_projects_and_default(group, **kwargs)
 
@@ -123,6 +146,20 @@ class GitlabIssueBasic(IssueBasicMixin):
                 'url': autocomplete_url,
                 'required': True,
             },
+            {
+                'name': 'comment',
+                'label': 'Comment',
+                'default': u'Sentry issue: [{issue_id}]({url})'.format(
+                    url=absolute_uri(
+                        group.get_absolute_url(params={'referrer': 'gitlab_integration'})
+                    ),
+                    issue_id=group.qualified_short_id,
+                ),
+                'type': 'textarea',
+                'required': False,
+                'help': ('Leave blank if you don\'t want to '
+                         'add a comment to the GitLab issue.'),
+            }
         ]
 
     def get_issue(self, issue_id, **kwargs):
diff --git a/tests/sentry/integrations/gitlab/test_issues.py b/tests/sentry/integrations/gitlab/test_issues.py
index 8beff5a7db..4da18714d7 100644
--- a/tests/sentry/integrations/gitlab/test_issues.py
+++ b/tests/sentry/integrations/gitlab/test_issues.py
@@ -3,6 +3,8 @@ from __future__ import absolute_import
 import responses
 import six
 
+from sentry.integrations.exceptions import IntegrationError
+from sentry.models import ExternalIssue
 from sentry.utils.http import absolute_uri
 from .testutils import GitLabTestCase
 
@@ -54,7 +56,7 @@ class GitlabIssuesTest(GitLabTestCase):
                 'name': 'project',
                 'required': True,
                 'type': 'select',
-                'label': 'Gitlab Project',
+                'label': 'GitLab Project',
                 'choices': [(1, u'getsentry / sentry'), (22, u'getsentry / hello')],
                 'defaultValue': 1,
             },
@@ -105,6 +107,20 @@ class GitlabIssuesTest(GitLabTestCase):
                 'url': autocomplete_url,
                 'required': True,
             },
+            {
+                'name': 'comment',
+                'label': 'Comment',
+                'default': u'Sentry issue: [{issue_id}]({url})'.format(
+                    url=absolute_uri(
+                        self.group.get_absolute_url(params={'referrer': 'gitlab_integration'})
+                    ),
+                    issue_id=self.group.qualified_short_id,
+                ),
+                'type': 'textarea',
+                'required': False,
+                'help': ('Leave blank if you don\'t want to '
+                         'add a comment to the GitLab issue.'),
+            }
         ]
 
     @responses.activate
@@ -215,7 +231,7 @@ class GitlabIssuesTest(GitLabTestCase):
                 ],
                 'defaultValue': project_id,
                 'type': 'select',
-                'label': 'Gitlab Project'
+                'label': 'GitLab Project'
             },
             {
                 'name': 'title',
@@ -278,7 +294,7 @@ class GitlabIssuesTest(GitLabTestCase):
                 ],
                 'defaultValue': project_id,
                 'type': 'select',
-                'label': 'Gitlab Project'
+                'label': 'GitLab Project'
             },
             {
                 'name': 'title',
@@ -322,7 +338,7 @@ class GitlabIssuesTest(GitLabTestCase):
                 'choices': [],
                 'defaultValue': '',
                 'type': 'select',
-                'label': 'Gitlab Project'
+                'label': 'GitLab Project'
             },
             {
                 'name': 'title',
@@ -340,3 +356,44 @@ class GitlabIssuesTest(GitLabTestCase):
                 'maxRows': 10,
             }
         ]
+
+    @responses.activate
+    def test_after_link_issue(self):
+        responses.add(
+            responses.POST,
+            u'https://example.gitlab.com/api/v4/projects/2/issues/321/notes',
+            json=[]
+        )
+        data = {'externalIssue': '2#321', 'comment': 'This is not good.'}
+        external_issue = ExternalIssue.objects.create(
+            organization_id=self.organization.id,
+            integration_id=self.integration.id,
+            key='2#321',
+        )
+        self.installation.after_link_issue(external_issue, data=data)
+
+    def test_after_link_issue_required_fields(self):
+        data = {'externalIssue': '2#231', 'comment': 'This is not good.'}
+        external_issue = ExternalIssue.objects.create(
+            organization_id=self.organization.id,
+            integration_id=self.integration.id,
+            key='#',
+        )
+        with self.assertRaises(IntegrationError):
+            self.installation.after_link_issue(external_issue, data=data)
+
+    @responses.activate
+    def test_after_link_issue_failure(self):
+        responses.add(
+            responses.POST,
+            u'https://example.gitlab.com/api/v4/projects/2/issues/321/notes',
+            status=502
+        )
+        data = {'externalIssue': '2#321', 'comment': 'This is not good.'}
+        external_issue = ExternalIssue.objects.create(
+            organization_id=self.organization.id,
+            integration_id=self.integration.id,
+            key='2#321',
+        )
+        with self.assertRaises(IntegrationError):
+            self.installation.after_link_issue(external_issue, data=data)
