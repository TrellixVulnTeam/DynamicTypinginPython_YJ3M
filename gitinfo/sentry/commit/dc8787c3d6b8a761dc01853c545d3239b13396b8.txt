commit dc8787c3d6b8a761dc01853c545d3239b13396b8
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Jul 6 15:54:37 2013 +0200

    Add resolve and details view

diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index a7d45ca901..4cc00e7d9b 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -15,6 +15,7 @@ from sentry.models import Group, GroupBookmark
 from sentry.templatetags.sentry_plugins import get_tags
 from sentry.utils import json
 from sentry.utils.db import attach_foreignkey
+from sentry.utils.http import absolute_uri
 
 
 transformers = {}
@@ -100,7 +101,7 @@ class GroupTransformer(Transformer):
             'level': obj.level,
             'levelName': escape(obj.get_level_display()),
             'logger': escape(obj.logger),
-            'permalink': reverse('sentry-group', args=[obj.team.slug, obj.project.slug, obj.id]),
+            'permalink': absolute_uri(reverse('sentry-group', args=[obj.team.slug, obj.project.slug, obj.id])),
             'versions': list(obj.get_version() or []),
             'lastSeen': obj.last_seen.isoformat(),
             'timeSpent': obj.avg_time_spent,
diff --git a/src/sentry/web/restapi/urls.py b/src/sentry/web/restapi/urls.py
index d38733e515..0790371e75 100644
--- a/src/sentry/web/restapi/urls.py
+++ b/src/sentry/web/restapi/urls.py
@@ -3,6 +3,11 @@ from django.conf.urls import patterns, url, include
 from . import views
 
 urlpatterns = patterns('',
-    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/stream/$', views.StreamView.as_view()),
+    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/events/$', views.EventListView.as_view(),
+    	name='sentry-api-1-event-list'),
+    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/events/(?P<group_id>\d+)/$', views.EventDetailsView.as_view(),
+    	name='sentry-api-1-event-details'),
+    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/events/(?P<group_id>\d+)/resolve/$', views.ResolveEventView.as_view(),
+    	name='sentry-api-1-resolve-event'),
     # url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))
 )
diff --git a/src/sentry/web/restapi/views.py b/src/sentry/web/restapi/views.py
index 570108ccab..f62cade23d 100644
--- a/src/sentry/web/restapi/views.py
+++ b/src/sentry/web/restapi/views.py
@@ -1,7 +1,12 @@
+from django.core.urlresolvers import reverse
+from django.utils import timezone
 from django.utils.decorators import method_decorator
 
+from sentry.constants import STATUS_RESOLVED
+from sentry.models import Activity, Group
 from sentry.web.decorators import has_access
 from sentry.web.frontend.groups import _get_group_list
+from sentry.utils.http import absolute_uri
 from sentry.utils.javascript import transform
 
 from rest_framework.authentication import SessionAuthentication
@@ -17,7 +22,7 @@ class BaseView(APIView):
     permission_classes = (HasProjectPermission,)
 
 
-class StreamView(BaseView):
+class EventListView(BaseView):
     @method_decorator(has_access)
     def get(self, request, team, project):
         offset = 0
@@ -28,7 +33,53 @@ class StreamView(BaseView):
             project=project,
         )
 
-        event_list = response['event_list']
-        event_list = list(event_list[offset:limit])
+        group_list = response['event_list']
+        group_list = list(group_list[offset:limit])
 
-        return Response(transform(event_list, request))
+        # TODO: need to make a custom serializer
+        results = transform(group_list, request)
+        for group in results:
+            group['uri'] = absolute_uri(reverse('sentry-api-1-event-details', args=(team.slug, project.slug, group['id'])))
+
+        return Response(results)
+
+
+class EventDetailsView(BaseView):
+    @method_decorator(has_access)
+    def get(self, request, team, project, group_id):
+        group = Group.objects.get(
+            id=group_id,
+            project=project,
+        )
+
+        return Response(transform(group, request))
+
+
+class ResolveEventView(BaseView):
+    @method_decorator(has_access)
+    def post(self, request, team, project, group_id):
+        group = Group.objects.get(
+            id=group_id,
+            project=project,
+        )
+
+        now = timezone.now()
+
+        happened = Group.objects.filter(
+            id=group.id,
+        ).exclude(status=STATUS_RESOLVED).update(
+            status=STATUS_RESOLVED,
+            resolved_at=now,
+        )
+        group.status = STATUS_RESOLVED
+        group.resolved_at = now
+
+        if happened:
+            Activity.objects.create(
+                project=project,
+                group=group,
+                type=Activity.SET_RESOLVED,
+                user=request.user,
+            )
+
+        return Response(transform(group, request))
