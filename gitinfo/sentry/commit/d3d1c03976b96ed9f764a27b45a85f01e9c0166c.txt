commit d3d1c03976b96ed9f764a27b45a85f01e9c0166c
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Jul 30 17:53:40 2018 -0700

    ref(integrations): Clean up issue link/create form (#9243)
    
    Visual cleanups:
    
     * Use stacked and non-inline fields
     * Use modal-footer class for the form footer
     * Add required markers for fields
     * Add submit button labels
     * Use autosize textarea
    
    Non-visual:
    
     * Use query-string module for query string generation
     * General code refactoring to use a bit more object spread for object
       generation

diff --git a/src/sentry/integrations/github/issues.py b/src/sentry/integrations/github/issues.py
index e70dcbe9e8..6d1ef5b15e 100644
--- a/src/sentry/integrations/github/issues.py
+++ b/src/sentry/integrations/github/issues.py
@@ -59,6 +59,7 @@ class GitHubIssueBasic(IssueBasicMixin):
                 'default': default_repo,
                 'choices': repo_choices,
                 'updatesForm': True,
+                'required': True,
             }
         ] + fields + [
             {
@@ -117,6 +118,7 @@ class GitHubIssueBasic(IssueBasicMixin):
                 'type': 'select',
                 'default': default_repo,
                 'choices': repo_choices,
+                'required': True,
                 'updatesForm': True,
             },
             {
@@ -125,7 +127,7 @@ class GitHubIssueBasic(IssueBasicMixin):
                 'default': '',
                 'type': 'select',
                 'choices': issues,
-
+                'required': True,
             },
             {
                 'name': 'comment',
diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
index c292c77f58..4a64ae6ca6 100644
--- a/src/sentry/integrations/issues.py
+++ b/src/sentry/integrations/issues.py
@@ -63,11 +63,14 @@ class IssueBasicMixin(object):
                 'label': 'Title',
                 'default': self.get_group_title(group, event, **kwargs),
                 'type': 'string',
+                'required': True,
             }, {
                 'name': 'description',
                 'label': 'Description',
                 'default': self.get_group_description(group, event, **kwargs),
                 'type': 'textarea',
+                'autosize': True,
+                'maxRows': 10,
             }
         ]
 
diff --git a/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx b/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
index 78e6e64dc4..a9a6bf97bf 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
@@ -2,6 +2,7 @@ import $ from 'jquery';
 import React from 'react';
 import PropTypes from 'prop-types';
 import Modal from 'react-bootstrap/lib/Modal';
+import queryString from 'query-string';
 
 import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
 import AsyncComponent from 'app/components/asyncComponent';
@@ -16,6 +17,11 @@ const MESSAGES_BY_ACTION = {
   create: t('Successfully created issue.'),
 };
 
+const SUBMIT_LABEL_BY_ACTION = {
+  link: t('Link Issue'),
+  create: t('Create Issue'),
+};
+
 class ExternalIssueForm extends AsyncComponent {
   static propTypes = {
     group: SentryTypes.Group.isRequired,
@@ -39,30 +45,6 @@ class ExternalIssueForm extends AsyncComponent {
     this.props.onSubmitSuccess(data);
   };
 
-  getOptions = (field, input) => {
-    if (!input) {
-      return Promise.resolve([]);
-    }
-    let {dynamicFieldValues} = this.state;
-    let additionalParams = Object.entries(dynamicFieldValues)
-      .map(([key, val]) => {
-        return `${key}=${encodeURIComponent(val)}`;
-      })
-      .join('&');
-    if (additionalParams) {
-      additionalParams = `&${additionalParams}`;
-    }
-
-    let url = field.url;
-    let separator = url.includes('?') ? '&' : '?';
-    return $.ajax({
-      url: `${url}${separator}field=${field.name}&query=${input}${additionalParams}`,
-      method: 'GET',
-    }).then(data => {
-      return {options: data};
-    });
-  };
-
   onRequestSuccess({stateKey, data, jqXHR}) {
     if (stateKey === 'integrationDetails' && !this.state.dynamicFieldValues) {
       this.setState({
@@ -75,12 +57,8 @@ class ExternalIssueForm extends AsyncComponent {
     let {dynamicFieldValues} = this.state;
     let {action, group, integration} = this.props;
     let endpoint = `/groups/${group.id}/integrations/${integration.id}/`;
-    let query = {
-      action,
-    };
-    Object.entries(dynamicFieldValues).map(([key, val]) => {
-      query[key] = val;
-    });
+    let query = {action, ...dynamicFieldValues};
+
     this.api.request(endpoint, {
       method: 'GET',
       query,
@@ -97,11 +75,10 @@ class ExternalIssueForm extends AsyncComponent {
     integrationDetails = integrationDetails || this.state.integrationDetails;
     let {action} = this.props;
     let config = integrationDetails[`${action}IssueConfig`];
-    let dynamicFields = {};
-    config.filter(field => field.updatesForm).forEach(field => {
-      dynamicFields[field.name] = field.default;
-    });
-    return dynamicFields;
+
+    return config
+      .filter(field => field.updatesForm)
+      .reduce((a, field) => ({...a, [field.name]: field.default}), {});
   }
 
   onFieldChange = (label, value) => {
@@ -122,16 +99,53 @@ class ExternalIssueForm extends AsyncComponent {
     }
   };
 
+  getOptions = (field, input) => {
+    if (!input) return Promise.resolve([]);
+
+    let query = queryString.stringify({
+      ...this.state.dynamicFieldValues,
+      field: field.name,
+      query: input,
+    });
+
+    let url = field.url;
+    let separator = url.includes('?') ? '&' : '?';
+
+    let request = {
+      url: [url, separator, query].join(''),
+      method: 'GET',
+    };
+
+    // We can't use the API client here since the URL is not scapped under the
+    // API endpoints (which the client prefixes)
+    return $.ajax(request).then(data => ({options: data}));
+  };
+
+  getFieldProps = field =>
+    field.url
+      ? {
+          loadOptions: input => this.getOptions(field, input),
+          async: true,
+          cache: false,
+          onSelectResetsInput: false,
+          onCloseResetsInput: false,
+          onBlurResetsInput: false,
+          autoload: false,
+        }
+      : {};
+
   renderBody() {
     let {integrationDetails} = this.state;
     let {action, group, integration} = this.props;
     let config = integrationDetails[`${action}IssueConfig`];
+
     let initialData = {};
     config.forEach(field => {
       // passing an empty array breaks multi select
       // TODO(jess): figure out why this is breaking and fix
       initialData[field.name] = field.multiple ? '' : field.default;
     });
+
     return (
       <Form
         apiEndpoint={`/groups/${group.id}/integrations/${integration.id}/`}
@@ -139,24 +153,19 @@ class ExternalIssueForm extends AsyncComponent {
         onSubmitSuccess={this.onSubmitSuccess}
         initialData={initialData}
         onFieldChange={this.onFieldChange}
+        submitLabel={SUBMIT_LABEL_BY_ACTION[action]}
+        footerClass="modal-footer"
       >
-        {config.map(field => {
-          let props = {};
-          if (field.url) {
-            props = {
-              loadOptions: input => {
-                return this.getOptions(field, input);
-              },
-              async: true,
-              cache: false,
-              onSelectResetsInput: false,
-              onCloseResetsInput: false,
-              onBlurResetsInput: false,
-              autoload: false,
-            };
-          }
-          return <FieldFromConfig key={field.name} field={field} {...props} />;
-        })}
+        {config.map(field => (
+          <FieldFromConfig
+            key={field.name}
+            field={field}
+            inline={false}
+            stacked
+            flexibleControlStateSize
+            {...this.getFieldProps(field)}
+          />
+        ))}
       </Form>
     );
   }
@@ -170,10 +179,14 @@ class ExternalIssueActions extends AsyncComponent {
 
   constructor(props, context) {
     super(props, context);
-    this.state.showModal = false;
-    this.state.selectedIntegration = this.props.integration;
-    this.state.action = 'create';
-    this.state.issue = this.getIssue();
+
+    this.state = {
+      showModal: false,
+      action: 'create',
+      selectedIntegration: this.props.integration,
+      issue: this.getIssue(),
+      ...this.getDefaultState(),
+    };
   }
 
   getIssue() {
@@ -212,7 +225,7 @@ class ExternalIssueActions extends AsyncComponent {
     this.setState({
       showModal: false,
       action: null,
-      issue: data.id ? data : null,
+      issue: data && data.id ? data : null,
     });
   };
 
@@ -237,7 +250,6 @@ class ExternalIssueActions extends AsyncComponent {
             show={this.state.showModal}
             onHide={this.closeModal}
             animation={false}
-            backdrop="static"
             enforceFocus={false}
           >
             <Modal.Header closeButton>
diff --git a/tests/js/spec/components/group/__snapshots__/externalIssueActions.spec.jsx.snap b/tests/js/spec/components/group/__snapshots__/externalIssueActions.spec.jsx.snap
index 2ba555ba6f..ae99b36852 100644
--- a/tests/js/spec/components/group/__snapshots__/externalIssueActions.spec.jsx.snap
+++ b/tests/js/spec/components/group/__snapshots__/externalIssueActions.spec.jsx.snap
@@ -238,7 +238,7 @@ exports[`ExternalIssueActions with no external issues linked renders 1`] = `
   <Modal
     animation={false}
     autoFocus={true}
-    backdrop="static"
+    backdrop={true}
     bsClass="modal"
     dialogComponentClass={[Function]}
     enforceFocus={false}
@@ -262,7 +262,7 @@ exports[`ExternalIssueActions with no external issues linked renders 1`] = `
   >
     <Modal
       autoFocus={true}
-      backdrop="static"
+      backdrop={true}
       backdropClassName="modal-backdrop"
       containerClassName="modal-open"
       enforceFocus={false}
diff --git a/tests/sentry/api/endpoints/test_group_integration_details.py b/tests/sentry/api/endpoints/test_group_integration_details.py
index 88158f77c0..47ec8deef1 100644
--- a/tests/sentry/api/endpoints/test_group_integration_details.py
+++ b/tests/sentry/api/endpoints/test_group_integration_details.py
@@ -85,6 +85,7 @@ class GroupIntegrationDetailsTest(APITestCase):
                     'type': 'string',
                     'name': 'title',
                     'label': 'Title',
+                    'required': True,
                 }, {
                     'default': ('%s\n\n```\n'
                                 'Stacktrace (most recent call last):\n\n  '
@@ -94,6 +95,8 @@ class GroupIntegrationDetailsTest(APITestCase):
                     'type': 'textarea',
                     'name': 'description',
                     'label': 'Description',
+                    'autosize': True,
+                    'maxRows': 10,
                 }
             ]
         }
diff --git a/tests/sentry/integrations/jira/test_integration.py b/tests/sentry/integrations/jira/test_integration.py
index 44bd29d1c5..414db7363f 100644
--- a/tests/sentry/integrations/jira/test_integration.py
+++ b/tests/sentry/integrations/jira/test_integration.py
@@ -390,6 +390,7 @@ class JiraIntegrationTest(APITestCase):
                 'type': 'string',
                 'name': 'title',
                 'label': 'Title',
+                'required': True,
             }, {
                 'default': ('%s\n\n{code}\n'
                             'Stacktrace (most recent call last):\n\n  '
@@ -399,6 +400,8 @@ class JiraIntegrationTest(APITestCase):
                 'type': 'textarea',
                 'name': 'description',
                 'label': 'Description',
+                'autosize': True,
+                'maxRows': 10,
             }, {
                 'default': '1',
                 'choices': [('1', 'Bug')],
