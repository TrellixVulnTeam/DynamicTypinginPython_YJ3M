commit fdde2d692f2a755e4401cbba9a61fcc16f86f08a
Author: Dan Fuller <dfuller@sentry.io>
Date:   Thu Apr 9 12:49:38 2020 -0700

    refs(mail): Move `should_notify` to `MailAdapter`. (#18147)
    
    This copies the logic for `should_notify` to the `MailAdapter` class, and has
    `MailPlugin.should_notify` use it instead.
    
    Note that we removed the code to handle digests being disabled - This is hardcoded to `True` in the
    `digests.RedisBackend`, and so we don't need to handle the separate logic here, since we'll always
    have digests available.

diff --git a/src/sentry/mail/adapter.py b/src/sentry/mail/adapter.py
index 1de4a93708..ce0d66846a 100644
--- a/src/sentry/mail/adapter.py
+++ b/src/sentry/mail/adapter.py
@@ -133,6 +133,13 @@ class MailAdapter(object):
         """
         return project.get_notification_recipients(self.alert_option_key)
 
+    def should_notify(self, group):
+        send_to = self.get_sendable_users(group.project)
+        if not send_to:
+            return False
+
+        return group.is_unresolved()
+
     def get_send_to(self, project, event=None):
         """
         Returns a list of user IDs for the users that should receive
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index ea8a7dd6ed..e897e2fef7 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -42,11 +42,7 @@ class MailPlugin(NotificationPlugin):
         return True
 
     def should_notify(self, group, event):
-        send_to = self.get_sendable_users(group.project)
-        if not send_to:
-            return False
-
-        return super(MailPlugin, self).should_notify(group, event)
+        return self.mail_adapter.should_notify(group)
 
     def get_send_to(self, project, event=None):
         """
diff --git a/tests/sentry/mail/test_adapter.py b/tests/sentry/mail/test_adapter.py
index a22c8f77b3..7f39811706 100644
--- a/tests/sentry/mail/test_adapter.py
+++ b/tests/sentry/mail/test_adapter.py
@@ -14,6 +14,7 @@ from sentry.digests.notifications import build_digest, event_to_record
 from sentry.event_manager import EventManager, get_event_type
 from sentry.mail.adapter import MailAdapter
 from sentry.models import (
+    GroupStatus,
     OrganizationMember,
     OrganizationMemberTeam,
     ProjectOption,
@@ -523,3 +524,18 @@ class MailAdapterRuleNotifyTest(BaseMailAdapterTest, TestCase):
         futures = [RuleFuture(rule, {})]
         self.adapter.rule_notify(event, futures)
         digests.add.call_count == 1
+
+
+class MailAdapterShouldNotifyTest(BaseMailAdapterTest, TestCase):
+    def test_should_notify(self):
+        assert self.adapter.should_notify(self.group)
+
+    def test_should_not_notify_resolved(self):
+        self.group.update(status=GroupStatus.RESOLVED)
+        assert not self.adapter.should_notify(self.group)
+
+    def test_should_not_notify_no_users(self):
+        UserOption.objects.set_value(
+            user=self.user, key="mail:alert", value=0, project=self.project
+        )
+        assert not self.adapter.should_notify(self.group)
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index cf9e14a8dd..28d0d6b454 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -47,12 +47,7 @@ class MailPluginTest(TestCase):
     def plugin(self):
         return MailPlugin()
 
-    @mock.patch(
-        "sentry.models.ProjectOption.objects.get_value", Mock(side_effect=lambda p, k, d, **kw: d)
-    )
-    @mock.patch(
-        "sentry.plugins.sentry_mail.models.MailPlugin.get_sendable_users", Mock(return_value=[])
-    )
+    @mock.patch("sentry.mail.adapter.MailAdapter.get_sendable_users", Mock(return_value=[]))
     def test_should_notify_no_sendable_users(self):
         assert not self.plugin.should_notify(group=Mock(), event=Mock())
 
