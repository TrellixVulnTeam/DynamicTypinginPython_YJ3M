commit 81a9bd540fa8a8a5a3773481c00ac17c13f2bd3b
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Sep 3 18:00:13 2011 -0700

    Added SENTRY_MAIL_INCLUDE_LOGGERS and SENTRY_MAIL_EXCLUDE_LOGGERS (fixes #205)

diff --git a/docs/config/index.rst b/docs/config/index.rst
index 0d63e1419a..49d88196c5 100644
--- a/docs/config/index.rst
+++ b/docs/config/index.rst
@@ -269,6 +269,24 @@ removing the ``ADMINS`` setting in Django, and adding in ``SENTRY_ADMINS``::
 This will send out a notification the first time an error is seen, and the first time an error is
 seen after it has been resolved.
 
+#################
+SENTRY_MAIL_LEVEL
+#################
+
+The threshold level to restrict emails to. Defaults to ``logging.DEBUG``.
+
+###########################
+SENTRY_MAIL_INCLUDE_LOGGERS
+###########################
+
+An explicit list of all logger names to restrict emails to. Defaults to ``None``, which
+translates to "all loggers".
+
+###########################
+SENTRY_MAIL_EXCLUDE_LOGGERS
+###########################
+
+An explicit list of all logger names to exclude from emails. Defaults to ``[]``.
 
 ##############
 SENTRY_TESTING
@@ -342,9 +360,3 @@ If this is enabled, data will be sampled in a manner similar to the following:
 * 100000 messages stores ~1800 results
 * 1000000 messages stores ~3600 results
 * 10000000 messages stores ~4500 results
-
-#################
-SENTRY_MAIL_LEVEL
-#################
-
-The threshold level on which messages should be emailed to ``ADMINS``. Defaults to ``logging.DEBUG``.
\ No newline at end of file
diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 5ebd485df6..14a51a3eaa 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -81,15 +81,21 @@ SERVER_EMAIL = 'root@localhost'
 
 LOGIN_URL = None
 
-# Automatically log frame stacks from all ``logging`` messages
+# Automatically log frame stacks from all ``logging`` messages.
 AUTO_LOG_STACKS = False
 
-# Only store a portion of all messages per unique group
+# Only store a portion of all messages per unique group.
 SAMPLE_DATA = True
 
-# Restrict emails to only messages >= this value
+# Restrict emails to only ``messages >= this value``.
 MAIL_LEVEL = logging.DEBUG
 
+# A list of loggers to restrict emails to.
+MAIL_INCLUDE_LOGGERS = None
+
+# A list of loggers to exclude in emails.
+MAIL_EXCLUDE_LOGGERS = []
+
 ## The following settings refer to the built-in webserver
 
 WEB_HOST = 'localhost'
diff --git a/sentry/utils/__init__.py b/sentry/utils/__init__.py
index 7bc44a11ff..830ab8d10a 100644
--- a/sentry/utils/__init__.py
+++ b/sentry/utils/__init__.py
@@ -326,3 +326,12 @@ class MockDjangoRequest(object):
             (get, post, cookies, meta)
 
     def build_absolute_uri(self): return self.url
+
+def should_mail(group):
+    if int(group.level) < settings.MAIL_LEVEL:
+        return False
+    if settings.MAIL_INCLUDE_LOGGERS is not None and group.logger not in settings.MAIL_INCLUDE_LOGGERS:
+        return False
+    if settings.MAIL_EXCLUDE_LOGGERS and group.logger in settings.MAIL_EXCLUDE_LOGGERS:
+        return False
+    return True
diff --git a/sentry/utils/manager.py b/sentry/utils/manager.py
index 16296a905f..b1c62473cb 100644
--- a/sentry/utils/manager.py
+++ b/sentry/utils/manager.py
@@ -7,7 +7,7 @@ from django.db import models
 from django.db.models import signals, Sum, F
 
 from sentry.conf import settings
-from sentry.utils import construct_checksum, get_db_engine
+from sentry.utils import construct_checksum, get_db_engine, should_mail
 from sentry.utils.charts import has_charts
 from sentry.utils.compat.db import connections
 
@@ -192,10 +192,11 @@ class SentryManager(models.Manager):
                 logger.exception(u'Unable to process log entry: %s' % (exc,))
             except Exception, exc:
                 warnings.warn(u'Unable to process log entry: %s' % (exc,))
-        else:
-            if mail and int(group.level) >= settings.MAIL_LEVEL:
-                group.mail_admins()
-            return instance
+
+        if mail and should_mail(group):
+            group.mail_admins()
+
+        return instance
 
 class GroupedMessageManager(SentryManager):
     def get_by_natural_key(self, logger, view, checksum):
