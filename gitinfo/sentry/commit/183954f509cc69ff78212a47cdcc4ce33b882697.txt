commit 183954f509cc69ff78212a47cdcc4ce33b882697
Author: Mark Story <mark@mark-story.com>
Date:   Wed Jan 30 14:21:23 2019 -0500

    fix(issues) Fix pagination for organization issue list (#11799)
    
    Handle browser navigation buttons and attach pagination into the stream
    view's transitionTo() method which hooks data reloading up.
    
    Fixes APP-1062

diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index 0b30fed6b4..0c8422680b 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -137,6 +137,7 @@ const OrganizationStream = createReactClass({
     // reload data.
     if (
       !isEqual(prevProps.selection, this.props.selection) ||
+      prevQuery.cursor !== newQuery.cursor ||
       prevQuery.sort !== newQuery.sort ||
       prevQuery.query !== newQuery.query ||
       prevQuery.statsPeriod !== newQuery.statsPeriod ||
@@ -375,6 +376,10 @@ const OrganizationStream = createReactClass({
     this.transitionTo({sort});
   },
 
+  onCursorChange(cursor, path, query) {
+    this.transitionTo({cursor});
+  },
+
   onTagsChange(tags) {
     // Exclude the environment tag as it lives in global search.
     this.setState({
@@ -661,7 +666,7 @@ const OrganizationStream = createReactClass({
               {this.renderStreamBody()}
             </PanelBody>
           </Panel>
-          <Pagination pageLinks={this.state.pageLinks} />
+          <Pagination pageLinks={this.state.pageLinks} onCursor={this.onCursorChange} />
         </div>
         <StreamSidebar
           loading={this.state.tagsLoading}
diff --git a/tests/js/spec/views/organizationStream/overview.spec.jsx b/tests/js/spec/views/organizationStream/overview.spec.jsx
index 25d5b9715c..bbea0af4c0 100644
--- a/tests/js/spec/views/organizationStream/overview.spec.jsx
+++ b/tests/js/spec/views/organizationStream/overview.spec.jsx
@@ -1,6 +1,7 @@
 import React from 'react';
 import {browserHistory} from 'react-router';
 import {shallow} from 'enzyme';
+import {clonedeep} from 'lodash';
 
 import TagStore from 'app/stores/tagStore';
 import GroupStore from 'app/stores/groupStore';
@@ -214,6 +215,45 @@ describe('OrganizationStream', function() {
     });
   });
 
+  describe('componentDidUpdate', function() {
+    let fetchDataMock;
+    beforeEach(function() {
+      fetchDataMock = jest.fn();
+      wrapper = shallow(<OrganizationStream {...props} />, {
+        disableLifecycleMethods: false,
+      });
+      wrapper.instance().fetchData = fetchDataMock;
+    });
+
+    it('fetches data on selection change', function() {
+      let selection = {projects: [99], environments: [], datetime: {period: '24h'}};
+      wrapper.setProps({selection, foo: 'bar'});
+
+      expect(fetchDataMock).toHaveBeenCalled();
+    });
+
+    it('fetches data on savedSearch change', function() {
+      savedSearch = {id: 1, query: 'is:resolved'};
+      wrapper.setState({savedSearch});
+
+      expect(fetchDataMock).toHaveBeenCalled();
+    });
+
+    it('fetches data on location change', function() {
+      let queryAttrs = ['query', 'sort', 'statsPeriod', 'cursor', 'groupStatsPeriod'];
+      let location = clonedeep(props.location);
+      queryAttrs.forEach((attr, i) => {
+        // reclone each iteration so that only one property changes.
+        location = clonedeep(location);
+        location.query[attr] = 'newValue';
+        wrapper.setProps({location});
+
+        // Each propery change should cause a new fetch incrementing the call count.
+        expect(fetchDataMock).toHaveBeenCalledTimes(i + 1);
+      });
+    });
+  });
+
   describe('processingIssues', function() {
     beforeEach(function() {
       wrapper = shallow(<OrganizationStream {...props} />);
