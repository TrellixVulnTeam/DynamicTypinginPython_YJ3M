commit eac049728926fea1021f50ae7561512ad44df836
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Oct 2 14:06:57 2019 -0700

    ref(ts): Refactor `recreateRoute()` and `replaceRouterParams()â€¦ (#14832)
    
    typescript me

diff --git a/src/sentry/static/sentry/app/utils/__mocks__/recreateRoute.jsx b/src/sentry/static/sentry/app/utils/__mocks__/recreateRoute.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/utils/__mocks__/recreateRoute.jsx
rename to src/sentry/static/sentry/app/utils/__mocks__/recreateRoute.tsx
diff --git a/src/sentry/static/sentry/app/utils/recreateRoute.jsx b/src/sentry/static/sentry/app/utils/recreateRoute.jsx
deleted file mode 100644
index cfdd643575..0000000000
--- a/src/sentry/static/sentry/app/utils/recreateRoute.jsx
+++ /dev/null
@@ -1,36 +0,0 @@
-import {findLastIndex} from 'lodash';
-
-import replaceRouterParams from 'app/utils/replaceRouterParams';
-
-// Given a route object or a string and a list of routes + params from router, this will attempt to
-// recreate a location string while replacing url params.
-//
-// Can additionally specify the number of routes to move back
-//
-// See tests for examples
-export default function recreateRoute(to, {routes, params, location, stepBack}) {
-  const paths = routes.map(({path}) => path || '');
-  let lastRootIndex;
-  let routeIndex;
-  const routeToRoute = typeof to !== 'string';
-  if (routeToRoute) {
-    routeIndex = routes.indexOf(to) + 1;
-    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');
-  } else {
-    lastRootIndex = findLastIndex(paths, path => path[0] === '/');
-  }
-
-  let baseRoute = paths.slice(lastRootIndex, routeIndex);
-
-  if (stepBack >= 0) {
-    throw new Error('`stepBack` needs to be < 0');
-  } else if (typeof stepBack !== 'undefined') {
-    baseRoute = baseRoute.slice(0, stepBack);
-  }
-
-  const query = typeof location !== 'undefined' && location.search ? location.search : '';
-
-  const fullRoute = `${baseRoute.join('')}${routeToRoute ? '' : to}${query}`;
-
-  return replaceRouterParams(fullRoute, params);
-}
diff --git a/src/sentry/static/sentry/app/utils/recreateRoute.tsx b/src/sentry/static/sentry/app/utils/recreateRoute.tsx
new file mode 100644
index 0000000000..863d494b16
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/recreateRoute.tsx
@@ -0,0 +1,55 @@
+import {Location} from 'history';
+import {PlainRoute} from 'react-router/lib/Route';
+import {findLastIndex} from 'lodash';
+
+import replaceRouterParams from 'app/utils/replaceRouterParams';
+
+type Options = {
+  routes: PlainRoute[];
+  location: Location;
+
+  // parameters to replace any route string parameters (e.g. if route is `:orgId`,
+  // params should have `{orgId: slug}`
+  params: {[key: string]: string};
+
+  /**
+   * The number of routes to to pop off of `routes
+   * Must be < 0
+   *
+   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9
+   */
+  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;
+};
+
+/**
+ * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.
+ * Can additionally specify the number of routes to move back
+ *
+ * See tests for examples
+ */
+export default function recreateRoute(to: string | PlainRoute, options: Options): string {
+  const {routes, params, location, stepBack} = options;
+  const paths = routes.map(({path}) => path || '');
+  let lastRootIndex: number;
+  let routeIndex: number | undefined;
+
+  // TODO(ts): typescript things
+  if (typeof to !== 'string') {
+    routeIndex = routes.indexOf(to) + 1;
+    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');
+  } else {
+    lastRootIndex = findLastIndex(paths, path => path[0] === '/');
+  }
+
+  let baseRoute = paths.slice(lastRootIndex, routeIndex);
+
+  if (typeof stepBack !== 'undefined') {
+    baseRoute = baseRoute.slice(0, stepBack);
+  }
+
+  const query = typeof location !== 'undefined' && location.search ? location.search : '';
+
+  const fullRoute = `${baseRoute.join('')}${typeof to !== 'string' ? '' : to}${query}`;
+
+  return replaceRouterParams(fullRoute, params);
+}
diff --git a/src/sentry/static/sentry/app/utils/replaceRouterParams.jsx b/src/sentry/static/sentry/app/utils/replaceRouterParams.tsx
similarity index 63%
rename from src/sentry/static/sentry/app/utils/replaceRouterParams.jsx
rename to src/sentry/static/sentry/app/utils/replaceRouterParams.tsx
index 5973c25007..ae0d91a40d 100644
--- a/src/sentry/static/sentry/app/utils/replaceRouterParams.jsx
+++ b/src/sentry/static/sentry/app/utils/replaceRouterParams.tsx
@@ -1,4 +1,12 @@
-export default function replaceRouterParams(route, params) {
+/**
+ * Given a route string, replace path parameters (e.g. `:id`) with value from `params`
+ *
+ * e.g. {id: 'test'}
+ */
+export default function replaceRouterParams(
+  route: string,
+  params: {[key: string]: string}
+): string {
   // parse route params from route
   const matches = route.match(/:\w+/g);
 
diff --git a/tests/js/spec/utils/recreateRoute.spec.jsx b/tests/js/spec/utils/recreateRoute.spec.jsx
index 763f92d428..aa7d22bf3f 100644
--- a/tests/js/spec/utils/recreateRoute.spec.jsx
+++ b/tests/js/spec/utils/recreateRoute.spec.jsx
@@ -73,10 +73,6 @@ describe('recreateRoute', function() {
     );
   });
 
-  it('stepBack needs to be less than 0', function() {
-    expect(() => recreateRoute('', {routes, location, params, stepBack: 0})).toThrow();
-  });
-
   it('switches to new org but keeps current route', function() {
     expect(recreateRoute(routes[5], {routes, location, params: {orgId: 'new-org'}})).toBe(
       '/settings/new-org/api-keys/'
