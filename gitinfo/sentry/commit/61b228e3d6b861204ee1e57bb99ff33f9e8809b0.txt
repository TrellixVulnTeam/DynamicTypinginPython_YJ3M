commit 61b228e3d6b861204ee1e57bb99ff33f9e8809b0
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Feb 3 15:19:50 2013 -0800

    Reflect access group and team membership in get_project_list

diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index b7578eaa37..be8c697eb8 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -525,7 +525,7 @@ def get_group_trends(request, team=None, project=None):
     limit = min(100, int(request.REQUEST.get('limit', 10)))
 
     if team:
-        project_dict = dict((p.id, p) for p in Project.objects.filter(team=team))
+        project_dict = get_project_list(request.user, team=team)
     elif project:
         project_dict = {project.id: project}
     else:
@@ -568,7 +568,7 @@ def get_new_groups(request, team=None, project=None):
     limit = min(100, int(request.REQUEST.get('limit', 10)))
 
     if team:
-        project_dict = dict((p.id, p) for p in Project.objects.filter(team=team))
+        project_dict = get_project_list(request.user, team=team)
     elif project:
         project_dict = {project.id: project}
     else:
@@ -602,7 +602,7 @@ def get_resolved_groups(request, team=None, project=None):
     limit = min(100, int(request.REQUEST.get('limit', 10)))
 
     if team:
-        project_list = list(Project.objects.filter(team=team))
+        project_list = get_project_list(request.user, team=team).values()
     elif project:
         project_list = [project]
     else:
diff --git a/src/sentry/web/decorators.py b/src/sentry/web/decorators.py
index 90c220ca74..18da8f4c64 100644
--- a/src/sentry/web/decorators.py
+++ b/src/sentry/web/decorators.py
@@ -84,7 +84,7 @@ def has_access(access_or_func=None, team=None, access=None):
                             return HttpResponseRedirect(reverse('sentry'))
                 else:
                     key, value = lookup_kwargs.items()[0]
-                    project_list = get_project_list(request.user, access, key=key)
+                    project_list = get_project_list(request.user, access, key=key, team=team)
 
                     try:
                         project = project_list[value]
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 4506095da8..93b44d1378 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -25,15 +25,18 @@ from sentry.permissions import can_create_projects, can_create_teams
 logger = logging.getLogger('sentry.errors')
 
 
-def get_project_list(user=None, access=None, hidden=False, key='id', select_related=None):
+def get_project_list(user=None, access=None, hidden=False, key='id', team=None):
     """
     Returns a SortedDict of all projects a user has some level of access to.
     """
+    # TODO: the result of this function should be cached
+    is_authenticated = (user and user.is_authenticated())
+
     base_qs = Project.objects
     if not hidden:
         base_qs = base_qs.filter(status=0)
-    if select_related is not None:
-        base_qs = base_qs.select_related(*select_related)
+    if team:
+        base_qs = base_qs.filter(team=team)
 
     # Collect kwarg queries to filter on. We can use this to perform a single
     # query to get all of the desired projects ordered by name
@@ -47,14 +50,19 @@ def get_project_list(user=None, access=None, hidden=False, key='id', select_rela
         return SortedDict()
 
     # If the user is authenticated, include their memberships
-    if user and user.is_authenticated():
+    if is_authenticated:
         teams = Team.objects.get_for_user(user, access).values()
         if not teams and access is not None:
             return SortedDict()
         filters |= Q(team__in=teams)
 
+    projects = set(base_qs.filter(filters))
+
+    if is_authenticated:
+        projects |= set(base_qs.filter(accessgroup__members=user))
+
     return SortedDict((getattr(p, key), p)
-        for p in base_qs.filter(filters).order_by('name'))
+        for p in sorted(projects, key=lambda x: x.name))
 
 
 def get_team_list(user, access=None):
@@ -131,10 +139,7 @@ def get_default_context(request, existing_context=None, team=None):
             })
 
         if not existing_context or 'PROJECT_LIST' not in existing_context:
-            if team:
-                project_list = Project.objects.filter(team=team)
-            else:
-                project_list = get_project_list(request.user).values()
+            project_list = get_project_list(request.user, team=team).values()
             context['PROJECT_LIST'] = sorted(project_list, key=lambda x: x.name)
         if not existing_context or 'TEAM_LIST' not in existing_context:
             context['TEAM_LIST'] = sorted(Team.objects.get_for_user(request.user).values(), key=lambda x: x.name)
