commit eea8aa1d009d1afab2645603786cea8d6155e82e
Author: Yuri Baburov <burchik@gmail.com>
Date:   Tue Jun 14 13:39:51 2011 +0700

    Added message sampling with Message.sample_rate field.
    
    Conflicts:
    
            sentry/templatetags/sentry_helpers.py

diff --git a/sentry/migrations/0013_auto__add_field_message_sample_rate.py b/sentry/migrations/0013_auto__add_field_message_sample_rate.py
new file mode 100644
index 0000000000..3df5997536
--- /dev/null
+++ b/sentry/migrations/0013_auto__add_field_message_sample_rate.py
@@ -0,0 +1,73 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding field 'Message.sample_rate'
+        db.add_column('sentry_message', 'sample_rate', self.gf('django.db.models.fields.IntegerField')(default=1), keep_default=False)
+
+
+    def backwards(self, orm):
+        
+        # Deleting field 'Message.sample_rate'
+        db.delete_column('sentry_message', 'sample_rate')
+
+
+    models = {
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.groupedmessage': {
+            'Meta': {'unique_together': "(('logger', 'view', 'checksum'),)", 'object_name': 'GroupedMessage'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.message': {
+            'Meta': {'object_name': 'Message'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'message_set'", 'null': 'True', 'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'sample_rate': ('django.db.models.fields.IntegerField', [], {'default': '1'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index b3a38ca8f1..28f31031f7 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -7,7 +7,7 @@ import math
 from datetime import datetime
 
 from django.db import models
-from django.db.models import Count
+from django.db.models import Sum
 from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
@@ -183,7 +183,7 @@ class GroupedMessage(MessageBase):
     def unique_urls(self):
         return self.message_set.filter(url__isnull=False)\
                    .values_list('url', 'logger', 'view', 'checksum')\
-                   .annotate(times_seen=Count('url'))\
+                   .annotate(times_seen=Sum('sample_rate'))\
                    .values('url', 'times_seen')\
                    .order_by('-times_seen')
 
@@ -191,7 +191,7 @@ class GroupedMessage(MessageBase):
     def unique_servers(self):
         return self.message_set.filter(server_name__isnull=False)\
                    .values_list('server_name', 'logger', 'view', 'checksum')\
-                   .annotate(times_seen=Count('server_name'))\
+                   .annotate(times_seen=Sum('sample_rate'))\
                    .values('server_name', 'times_seen')\
                    .order_by('-times_seen')
 
@@ -199,7 +199,7 @@ class GroupedMessage(MessageBase):
     def unique_sites(self):
         return self.message_set.filter(site__isnull=False)\
                    .values_list('site', 'logger', 'view', 'checksum')\
-                   .annotate(times_seen=Count('site'))\
+                   .annotate(times_seen=Sum('sample_rate'))\
                    .values('site', 'times_seen')\
                    .order_by('-times_seen')
 
@@ -218,6 +218,7 @@ class Message(MessageBase):
     url             = models.URLField(verify_exists=False, null=True, blank=True)
     server_name     = models.CharField(max_length=128, db_index=True)
     site            = models.CharField(max_length=128, db_index=True, null=True)
+    sample_rate     = models.IntegerField(default=1) # how much exceptions were not added because of this one
 
     class Meta:
         verbose_name = _('message')
diff --git a/sentry/utils/manager.py b/sentry/utils/manager.py
index 9fea98732f..cd82164529 100644
--- a/sentry/utils/manager.py
+++ b/sentry/utils/manager.py
@@ -4,7 +4,7 @@ import logging
 import warnings
 
 from django.db import models
-from django.db.models import signals, Count
+from django.db.models import signals, Sum
 
 from sentry.conf import settings
 from sentry.utils import construct_checksum, get_db_engine
@@ -34,9 +34,34 @@ class ScoreClause(object):
         else:
             # XXX: if we cant do it atomicly let's do it the best we can
             sql = self.group.get_score()
-        
+
         return (sql, [])
 
+
+def count_limit(count): # ~ 150 * ((log(n) - 1.5) ^ 2 - 0.25)
+    if count <= 200: # 200
+        return 1
+    if count <= 1000: # 400
+        return 2
+    if count <= 10000: # 900
+        return 10
+    if count <= 100000: # 1800
+        return 50
+    if count <= 1000000: # 3000
+        return 300
+    if count <= 10000000: # 4500 
+        return 2000
+    return 10000
+
+def time_limit(silence): # ~ 3600 per hour  
+    if silence >= 3600:
+        return 1
+    if silence >= 360:
+        return 10
+    if silence >= 60:
+        return 60
+    return 10000
+
 class SentryManager(models.Manager):
     use_for_related_fields = True
 
@@ -46,9 +71,10 @@ class SentryManager(models.Manager):
             qs = qs.using(settings.DATABASE_USING)
         return qs
 
+
     def from_kwargs(self, **kwargs):
         from sentry.models import Message, GroupedMessage, FilterValue
-        
+
         URL_MAX_LENGTH = Message._meta.get_field_by_name('url')[0].max_length
         now = kwargs.pop('timestamp', None) or datetime.datetime.now()
 
@@ -59,7 +85,7 @@ class SentryManager(models.Manager):
         site = kwargs.pop('site', None)
         data = kwargs.pop('data', {}) or {}
         message_id = kwargs.pop('message_id', None)
-        
+
         if url:
             data['url'] = url
             url = url[:URL_MAX_LENGTH]
@@ -97,6 +123,8 @@ class SentryManager(models.Manager):
                 # HACK: maintain appeared state
                 if group.status == 1:
                     mail = True
+                silence_timedelta = now - group.last_seen
+                silence = silence_timedelta.days * 86400 + silence_timedelta.seconds
                 group.status = 0
                 group.last_seen = now
                 group.times_seen += 1
@@ -111,10 +139,13 @@ class SentryManager(models.Manager):
                 GroupedMessage.objects.filter(pk=group.pk).update(
                     score=ScoreClause(group),
                 )
+                silence = 0
                 mail = True
 
-                
-            instance = Message.objects.create(
+            sample_rate = min(count_limit(group.times_seen), time_limit(silence))
+
+            instance = Message(
+                sample_rate=sample_rate,
                 message_id=message_id,
                 view=view,
                 logger=logger_name,
@@ -127,6 +158,8 @@ class SentryManager(models.Manager):
                 datetime=now,
                 **kwargs
             )
+            if group.times_seen % sample_rate == 0:
+                instance.save()
             if server_name:
                 FilterValue.objects.get_or_create(key='server_name', value=server_name)
             if site:
@@ -172,7 +205,7 @@ class GroupedMessageManager(SentryManager):
         chart_qs = list(group.message_set.all()\
                           .filter(datetime__gte=min_date)\
                           .extra(select={'grouper': method}).values('grouper')\
-                          .annotate(num=Count('id')).values_list('grouper', 'num')\
+                          .annotate(num=Sum('sample_rate')).values_list('grouper', 'num')\
                           .order_by('grouper'))
 
         if not chart_qs:
