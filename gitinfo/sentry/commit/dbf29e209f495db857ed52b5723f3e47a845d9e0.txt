commit dbf29e209f495db857ed52b5723f3e47a845d9e0
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Tue Jul 24 11:08:04 2018 -0700

    feat(require-2fa): restrict removing last 2fa method (#9063)

diff --git a/src/sentry/api/endpoints/user_authenticator_details.py b/src/sentry/api/endpoints/user_authenticator_details.py
index bb13eae701..b4629d701c 100644
--- a/src/sentry/api/endpoints/user_authenticator_details.py
+++ b/src/sentry/api/endpoints/user_authenticator_details.py
@@ -133,6 +133,20 @@ class UserAuthenticatorDetailsEndpoint(UserEndpoint):
             )
             return Response(status=status.HTTP_204_NO_CONTENT)
 
+        # if the user's organization requires 2fa,
+        # don't delete the last auth method
+        enrolled_methods = Authenticator.objects.all_interfaces_for_user(user, ignore_backup=True)
+        last_2fa_method = len(enrolled_methods) == 1
+        require_2fa = user.get_orgs_require_2fa().exists()
+
+        if require_2fa and last_2fa_method:
+            return Response(
+                {
+                    'detail': 'Cannot delete authenticator because organization requires 2FA',
+                },
+                status=status.HTTP_403_FORBIDDEN
+            )
+
         with transaction.atomic():
             authenticator.delete()
 
diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
index 5a6a29f7a3..13f52f37ba 100644
--- a/src/sentry/models/authenticator.py
+++ b/src/sentry/models/authenticator.py
@@ -57,7 +57,7 @@ class ActivationChallengeResult(ActivationResult):
 
 
 class AuthenticatorManager(BaseManager):
-    def all_interfaces_for_user(self, user, return_missing=False):
+    def all_interfaces_for_user(self, user, return_missing=False, ignore_backup=False):
         """Returns a correctly sorted list of all interfaces the user
         has enabled.  If `return_missing` is set to `True` then all
         interfaces are returned even if not enabled.
@@ -71,7 +71,7 @@ class AuthenticatorManager(BaseManager):
             x.interface
             for x in Authenticator.objects.filter(
                 user=user,
-                type__in=[a.type for a in available_authenticators()],
+                type__in=[a.type for a in available_authenticators(ignore_backup=ignore_backup)],
             )
         ]
 
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index cc7d223c5c..65e5ddd91e 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -302,6 +302,14 @@ class User(BaseModel, AbstractBaseUser):
             ).values('organization'),
         )
 
+    def get_orgs_require_2fa(self):
+        from sentry.models import (Organization, OrganizationStatus)
+        return Organization.objects.filter(
+            flags=models.F('flags').bitor(Organization.flags.require_2fa),
+            status=OrganizationStatus.VISIBLE,
+            member_set__user=self,
+        )
+
     def clear_lost_passwords(self):
         LostPasswordHash.objects.filter(user=self).delete()
 
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index c8565e7aec..3b001229f7 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -135,11 +135,24 @@ function routes() {
       />
 
       <Route name="Security" path="security/">
-        <IndexRoute
+        <Route
           componentPromise={() =>
-            import(/*webpackChunkName: "AccountSecurity"*/ './views/settings/account/accountSecurity/index')}
+            import(/*webpackChunkName: "AccountSecurityWrapper"*/ './views/settings/account/accountSecurity/accountSecurityWrapper')}
           component={errorHandler(LazyLoad)}
-        />
+        >
+          <IndexRoute
+            componentPromise={() =>
+              import(/*webpackChunkName: "AccountSecurity"*/ './views/settings/account/accountSecurity/index')}
+            component={errorHandler(LazyLoad)}
+          />
+          <Route
+            path=":authId/"
+            name="Details"
+            componentPromise={() =>
+              import(/*webpackChunkName: "AccountSecurityDetails"*/ './views/settings/account/accountSecurity/accountSecurityDetails')}
+            component={errorHandler(LazyLoad)}
+          />
+        </Route>
 
         <Route
           path=":authId/enroll/"
@@ -148,14 +161,6 @@ function routes() {
             import(/*webpackChunkName: "AccountSecurityEnroll"*/ './views/settings/account/accountSecurity/accountSecurityEnroll')}
           component={errorHandler(LazyLoad)}
         />
-
-        <Route
-          path=":authId/"
-          name="Details"
-          componentPromise={() =>
-            import(/*webpackChunkName: "AccountSecurityDetails"*/ './views/settings/account/accountSecurity/accountSecurityDetails')}
-          component={errorHandler(LazyLoad)}
-        />
       </Route>
 
       <Route
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityDetails.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityDetails.jsx
index b638b3c6f0..a802ba177c 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityDetails.jsx
@@ -20,6 +20,7 @@ import RecoveryCodes from 'app/views/settings/account/accountSecurity/components
 import RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import TextBlock from 'app/views/settings/components/text/textBlock';
+import Tooltip from 'app/components/tooltip';
 import U2fEnrolledDetails from 'app/views/settings/account/accountSecurity/components/u2fEnrolledDetails';
 
 const ENDPOINT = '/users/me/authenticators/';
@@ -57,6 +58,10 @@ class AuthenticatorDate extends React.Component {
 }
 
 class AccountSecurityDetails extends AsyncView {
+  static PropTypes = {
+    deleteDisabled: PropTypes.bool.isRequired,
+    onRegenerateBackupCodes: PropTypes.func.isRequired,
+  };
   constructor(...args) {
     super(...args);
     this._form = {};
@@ -110,20 +115,9 @@ class AccountSecurityDetails extends AsyncView {
     // TODO(billy): Implement me
   };
 
-  handleRegenerateBackupCodes = () => {
-    this.setState({loading: true}, () =>
-      this.api
-        .requestPromise(`${ENDPOINT}${this.props.params.authId}/`, {
-          method: 'PUT',
-        })
-        .then(this.remountComponent, () =>
-          this.addError(t('Error regenerating backup codes'))
-        )
-    );
-  };
-
   renderBody() {
     let {authenticator} = this.state;
+    let {deleteDisabled, onRegenerateBackupCodes} = this.props;
 
     return (
       <div>
@@ -137,9 +131,18 @@ class AccountSecurityDetails extends AsyncView {
           action={
             authenticator.isEnrolled &&
             authenticator.removeButton && (
-              <RemoveConfirm onConfirm={this.handleRemove}>
-                <Button priority="danger">{authenticator.removeButton}</Button>
-              </RemoveConfirm>
+              <Tooltip
+                title={t(
+                  "Two-factor authentication is required for at least one organization you're a member of."
+                )}
+                disabled={!deleteDisabled}
+              >
+                <span>
+                  <RemoveConfirm onConfirm={this.handleRemove} disabled={deleteDisabled}>
+                    <Button priority="danger">{authenticator.removeButton}</Button>
+                  </RemoveConfirm>
+                </span>
+              </Tooltip>
             )
           }
         />
@@ -164,7 +167,7 @@ class AccountSecurityDetails extends AsyncView {
           )}
 
         <RecoveryCodes
-          onRegenerateBackupCodes={this.handleRegenerateBackupCodes}
+          onRegenerateBackupCodes={onRegenerateBackupCodes}
           isEnrolled={authenticator.isEnrolled}
           codes={authenticator.codes}
         />
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx
new file mode 100644
index 0000000000..feb0f37b24
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx
@@ -0,0 +1,66 @@
+import {withRouter} from 'react-router';
+import React from 'react';
+import AsyncComponent from 'app/components/asyncComponent';
+
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {t} from 'app/locale';
+
+const ENDPOINT = '/users/me/authenticators/';
+
+class AccountSecurityWrapper extends AsyncComponent {
+  getEndpoints() {
+    return [['authenticators', ENDPOINT], ['organizations', '/organizations/']];
+  }
+
+  handleDisable = auth => {
+    if (!auth || !auth.authId) return;
+
+    this.setState(
+      {
+        loading: true,
+      },
+      () =>
+        this.api
+          .requestPromise(`${ENDPOINT}${auth.authId}/`, {
+            method: 'DELETE',
+          })
+          .then(this.remountComponent, () => {
+            this.setState({loading: false});
+            addErrorMessage(t('Error disabling', auth.name));
+          })
+    );
+  };
+
+  handleRegenerateBackupCodes = () => {
+    this.setState({loading: true}, () =>
+      this.api
+        .requestPromise(`${ENDPOINT}${this.props.params.authId}/`, {
+          method: 'PUT',
+        })
+        .then(this.remountComponent, () =>
+          this.addError(t('Error regenerating backup codes'))
+        )
+    );
+  };
+
+  renderBody() {
+    let {authenticators, organizations} = this.state;
+
+    let countEnrolled = authenticators.filter(
+      auth => auth.isEnrolled && !auth.isBackupInterface
+    ).length;
+    let orgsRequire2fa = organizations.filter(org => org.require2FA);
+    let deleteDisabled = orgsRequire2fa.length > 0 && countEnrolled === 1;
+
+    return React.cloneElement(this.props.children, {
+      onDisable: this.handleDisable,
+      onRegenerateBackupCodes: this.handleRegenerateBackupCodes,
+      authenticators,
+      deleteDisabled,
+      orgsRequire2fa,
+      countEnrolled,
+    });
+  }
+}
+
+export default withRouter(AccountSecurityWrapper);
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx
index 5ea4e7dd2e..02c4aee396 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx
@@ -1,6 +1,7 @@
 import React from 'react';
 import styled from 'react-emotion';
 
+import PropTypes from 'prop-types';
 import {capitalize} from 'lodash';
 import {t} from 'app/locale';
 import Alert from 'app/components/alert';
@@ -12,30 +13,30 @@ let StyledAlert = styled(Alert)`
 `;
 
 class TwoFactorRequired extends AsyncComponent {
+  static propTypes = {
+    orgsRequire2fa: PropTypes.arrayOf(PropTypes.object).isRequired,
+  };
+
   getEndpoints() {
-    return [['organizations', '/organizations/']];
+    return [];
   }
 
   renderBody() {
-    let orgsRequire2fa = this.state.organizations
-      .filter(org => org.require2FA)
-      .map(({name}) => capitalize(name));
-
+    let {orgsRequire2fa} = this.props;
     if (!orgsRequire2fa.length) {
       return null;
     }
 
     // singular vs plural message
     let plural = orgsRequire2fa.length > 1;
-
-    let organizationNames = [
-      orgsRequire2fa.slice(0, -1).join(', '),
-      orgsRequire2fa.slice(-1)[0],
-    ].join(plural ? ' and ' : '');
-
     let require = plural ? t('organizations require') : t('organization requires');
     let organizations = plural ? t('these organizations') : t('this organization');
 
+    let names = orgsRequire2fa.map(({name}) => capitalize(name));
+    let organizationNames = [names.slice(0, -1).join(', '), names.slice(-1)[0]].join(
+      plural ? ' and ' : ''
+    );
+
     return (
       <StyledAlert className="require-2fa" type="error" icon="icon-circle-exclamation">
         {t(
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
index 312d9af095..ea51f492a1 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
@@ -4,8 +4,8 @@
 import {Box, Flex} from 'grid-emotion';
 import React from 'react';
 import styled from 'react-emotion';
+import PropTypes from 'prop-types';
 
-import {addErrorMessage} from 'app/actionCreators/indicator';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import Button from 'app/components/buttons/button';
@@ -14,56 +14,47 @@ import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import TextBlock from 'app/views/settings/components/text/textBlock';
+import Tooltip from 'app/components/tooltip';
 import TwoFactorRequired from 'app/views/settings/account/accountSecurity/components/twoFactorRequired';
 import RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';
 import PasswordForm from 'app/views/settings/account/passwordForm';
 
-const ENDPOINT = '/users/me/authenticators/';
-
 const AuthenticatorName = styled.span`
   font-size: 1.2em;
 `;
 
 class AccountSecurity extends AsyncView {
-  getEndpoints() {
-    return [['authenticators', '/users/me/authenticators/']];
-  }
-
+  static PropTypes = {
+    authenticators: PropTypes.arrayOf(PropTypes.object).isRequired,
+    orgsRequire2fa: PropTypes.arrayOf(PropTypes.object).isRequired,
+    countEnrolled: PropTypes.number.isRequired,
+    deleteDisabled: PropTypes.bool.isRequired,
+    onDisable: PropTypes.func.isRequired,
+  };
   getTitle() {
     return t('Security');
   }
 
-  handleDisable = auth => {
-    if (!auth || !auth.authId) return;
-
-    this.setState(
-      {
-        loading: true,
-      },
-      () =>
-        this.api
-          .requestPromise(`${ENDPOINT}${auth.authId}/`, {
-            method: 'DELETE',
-          })
-          .then(this.remountComponent, () => {
-            this.setState({loading: false});
-            addErrorMessage(t('Error disabling', auth.name));
-          })
-    );
-  };
+  getEndpoints() {
+    return [];
+  }
 
   renderBody() {
-    let {authenticators} = this.state;
+    let {
+      authenticators,
+      orgsRequire2fa,
+      countEnrolled,
+      deleteDisabled,
+      onDisable,
+    } = this.props;
     let isEmpty = !authenticators.length;
-    let twoFactorEnrolled = authenticators.some(({isEnrolled}) => {
-      return isEnrolled;
-    });
 
     return (
       <div>
         <SettingsPageHeader title="Security" />
 
-        {!isEmpty && !twoFactorEnrolled && <TwoFactorRequired />}
+        {!isEmpty &&
+          countEnrolled == 0 && <TwoFactorRequired orgsRequire2fa={orgsRequire2fa} />}
 
         <PasswordForm />
 
@@ -102,6 +93,7 @@ class AccountSecurity extends AsyncView {
                             to={`/settings/account/security/${id}/enroll/`}
                             size="small"
                             priority="primary"
+                            className="enroll-button"
                           >
                             {t('Add')}
                           </Button>
@@ -112,6 +104,7 @@ class AccountSecurity extends AsyncView {
                           <Button
                             to={`/settings/account/security/${authId}/`}
                             size="small"
+                            className="details-button"
                           >
                             {configureButton}
                           </Button>
@@ -119,11 +112,23 @@ class AccountSecurity extends AsyncView {
 
                       {!isBackupInterface &&
                         isEnrolled && (
-                          <RemoveConfirm onConfirm={() => this.handleDisable(auth)}>
-                            <Button css={{marginLeft: 6}} size="small">
-                              <span className="icon icon-trash" />
-                            </Button>
-                          </RemoveConfirm>
+                          <Tooltip
+                            title={t(
+                              "Two-factor authentication is required for at least one organization you're a member of."
+                            )}
+                            disabled={!deleteDisabled}
+                          >
+                            <span>
+                              <RemoveConfirm
+                                onConfirm={() => onDisable(auth)}
+                                disabled={deleteDisabled}
+                              >
+                                <Button css={{marginLeft: 6}} size="small">
+                                  <span className="icon icon-trash" />
+                                </Button>
+                              </RemoveConfirm>
+                            </span>
+                          </Tooltip>
                         )}
 
                       {isBackupInterface && !isEnrolled ? t('requires 2FA') : null}
diff --git a/tests/js/setup.js b/tests/js/setup.js
index ee3ac09806..6a0c66ba92 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -364,6 +364,10 @@ window.TestStubs = {
     };
   },
 
+  AllAuthenticators: () => {
+    return Object.values(TestStubs.Authenticators()).map(x => x());
+  },
+
   AccountEmails: () => {
     return [
       {
diff --git a/tests/js/spec/components/modals/recoveryOptionsModal.spec.jsx b/tests/js/spec/components/modals/recoveryOptionsModal.spec.jsx
index 28004a0a44..174090b118 100644
--- a/tests/js/spec/components/modals/recoveryOptionsModal.spec.jsx
+++ b/tests/js/spec/components/modals/recoveryOptionsModal.spec.jsx
@@ -14,7 +14,7 @@ describe('RecoveryOptionsModal', function() {
     MockApiClient.addMockResponse({
       url: '/users/me/authenticators/',
       method: 'GET',
-      body: Object.values(TestStubs.Authenticators()).map(x => x()),
+      body: TestStubs.AllAuthenticators(),
     });
     wrapper = mount(
       <RecoveryOptionsModal
diff --git a/tests/js/spec/views/accountSecurity.spec.jsx b/tests/js/spec/views/accountSecurity.spec.jsx
index 57cf9e3070..75e9ee9a05 100644
--- a/tests/js/spec/views/accountSecurity.spec.jsx
+++ b/tests/js/spec/views/accountSecurity.spec.jsx
@@ -1,8 +1,9 @@
 import React from 'react';
-import {shallow, mount} from 'enzyme';
+import {mount} from 'enzyme';
 
 import {Client} from 'app/api';
 import AccountSecurity from 'app/views/settings/account/accountSecurity';
+import AccountSecurityWrapper from 'app/views/settings/account/accountSecurity/accountSecurityWrapper';
 
 const ENDPOINT = '/users/me/authenticators/';
 const ORG_ENDPOINT = '/organizations/';
@@ -22,7 +23,12 @@ describe('AccountSecurity', function() {
       body: [],
     });
 
-    let wrapper = shallow(<AccountSecurity />, TestStubs.routerContext());
+    let wrapper = mount(
+      <AccountSecurityWrapper>
+        <AccountSecurity />
+      </AccountSecurityWrapper>,
+      TestStubs.routerContext()
+    );
 
     expect(wrapper.find('EmptyMessage')).toHaveLength(1);
     expect(wrapper.find('TwoFactorRequired')).toHaveLength(0);
@@ -34,14 +40,19 @@ describe('AccountSecurity', function() {
       body: [TestStubs.Authenticators().Totp({configureButton: 'Info'})],
     });
 
-    let wrapper = shallow(<AccountSecurity />, TestStubs.routerContext());
+    let wrapper = mount(
+      <AccountSecurityWrapper>
+        <AccountSecurity />
+      </AccountSecurityWrapper>,
+      TestStubs.routerContext()
+    );
 
     expect(wrapper.find('AuthenticatorName').prop('children')).toBe('Authenticator App');
 
     // There should be an "Info" button
     expect(
       wrapper
-        .find('Button')
+        .find('Button[className="details-button"]')
         .first()
         .prop('children')
     ).toBe('Info');
@@ -71,7 +82,12 @@ describe('AccountSecurity', function() {
 
     expect(deleteMock).not.toHaveBeenCalled();
 
-    let wrapper = mount(<AccountSecurity />, TestStubs.routerContext());
+    let wrapper = mount(
+      <AccountSecurityWrapper>
+        <AccountSecurity />
+      </AccountSecurityWrapper>,
+      TestStubs.routerContext()
+    );
     expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(true);
 
     // This will open confirm modal
@@ -92,19 +108,110 @@ describe('AccountSecurity', function() {
     expect(wrapper.find('TwoFactorRequired')).toHaveLength(0);
   });
 
+  it('can remove one of multiple 2fa methods when org requires 2fa', function() {
+    Client.addMockResponse({
+      url: ENDPOINT,
+      body: [
+        TestStubs.Authenticators().Totp({
+          authId: '15',
+          configureButton: 'Info',
+        }),
+        TestStubs.Authenticators().U2f(),
+      ],
+    });
+    Client.addMockResponse({
+      url: ORG_ENDPOINT,
+      body: TestStubs.Organizations({require2FA: true}),
+    });
+    let deleteMock = Client.addMockResponse({
+      url: `${ENDPOINT}15/`,
+      method: 'DELETE',
+    });
+
+    expect(deleteMock).not.toHaveBeenCalled();
+
+    let wrapper = mount(
+      <AccountSecurityWrapper>
+        <AccountSecurity />
+      </AccountSecurityWrapper>,
+      TestStubs.routerContext()
+    );
+
+    expect(
+      wrapper
+        .find('CircleIndicator')
+        .first()
+        .prop('enabled')
+    ).toBe(true);
+
+    // This will open confirm modal
+    wrapper
+      .find('Button .icon-trash')
+      .first()
+      .simulate('click');
+
+    // Confirm
+    wrapper
+      .find('Modal Button')
+      .last()
+      .simulate('click');
+    expect(deleteMock).toHaveBeenCalled();
+  });
+
+  it('can not remove last 2fa method when org requires 2fa', function() {
+    Client.addMockResponse({
+      url: ENDPOINT,
+      body: [
+        TestStubs.Authenticators().Totp({
+          authId: '15',
+          configureButton: 'Info',
+        }),
+      ],
+    });
+    Client.addMockResponse({
+      url: ORG_ENDPOINT,
+      body: TestStubs.Organizations({require2FA: true}),
+    });
+    let deleteMock = Client.addMockResponse({
+      url: `${ENDPOINT}15/`,
+      method: 'DELETE',
+    });
+
+    expect(deleteMock).not.toHaveBeenCalled();
+
+    let wrapper = mount(
+      <AccountSecurityWrapper>
+        <AccountSecurity />
+      </AccountSecurityWrapper>,
+      TestStubs.routerContext()
+    );
+    expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(true);
+
+    // This will open confirm modal
+    wrapper.find('Button .icon-trash').simulate('click');
+    // Confirm
+    expect(wrapper.find('Modal Button')).toHaveLength(0);
+    expect(deleteMock).not.toHaveBeenCalled();
+  });
+
   it('renders a primary interface that is not enrolled', function() {
     Client.addMockResponse({
       url: ENDPOINT,
       body: [TestStubs.Authenticators().Totp({isEnrolled: false})],
     });
 
-    let wrapper = shallow(<AccountSecurity />, TestStubs.routerContext());
+    let wrapper = mount(
+      <AccountSecurityWrapper>
+        <AccountSecurity />
+      </AccountSecurityWrapper>,
+      TestStubs.routerContext()
+    );
 
     expect(wrapper.find('AuthenticatorName').prop('children')).toBe('Authenticator App');
     // There should be an "Add" button
     expect(
       wrapper
-        .find('Button')
+        .find('Button[className="enroll-button"]')
         .first()
         .prop('children')
     ).toBe('Add');
@@ -119,12 +226,17 @@ describe('AccountSecurity', function() {
       body: [TestStubs.Authenticators().Recovery({isEnrolled: false})],
     });
 
-    let wrapper = shallow(<AccountSecurity />, TestStubs.routerContext());
+    let wrapper = mount(
+      <AccountSecurityWrapper>
+        <AccountSecurity />
+      </AccountSecurityWrapper>,
+      TestStubs.routerContext()
+    );
 
     expect(wrapper.find('AuthenticatorName').prop('children')).toBe('Recovery Codes');
 
     // There should be an View Codes button
-    expect(wrapper.find('Button')).toHaveLength(0);
+    expect(wrapper.find('Button[className="details-button"]')).toHaveLength(0);
     expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(false);
     // user is not 2fa enrolled
     expect(wrapper.find('TwoFactorRequired')).toHaveLength(1);
@@ -136,20 +248,22 @@ describe('AccountSecurity', function() {
       body: [TestStubs.Authenticators().Recovery({isEnrolled: true})],
     });
 
-    let wrapper = shallow(<AccountSecurity />, TestStubs.routerContext());
+    let wrapper = mount(
+      <AccountSecurityWrapper>
+        <AccountSecurity />
+      </AccountSecurityWrapper>,
+      TestStubs.routerContext()
+    );
 
     expect(wrapper.find('AuthenticatorName').prop('children')).toBe('Recovery Codes');
-
     // There should be an View Codes button
     expect(
       wrapper
-        .find('Button')
+        .find('Button[className="details-button"]')
         .first()
         .prop('children')
     ).toBe('View Codes');
     expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(true);
-
-    expect(wrapper.find('TwoFactorRequired')).toHaveLength(0);
   });
 
   it('can change password', function() {
@@ -164,7 +278,12 @@ describe('AccountSecurity', function() {
       method: 'PUT',
     });
 
-    let wrapper = mount(<AccountSecurity />, TestStubs.routerContext());
+    let wrapper = mount(
+      <AccountSecurityWrapper>
+        <AccountSecurity />
+      </AccountSecurityWrapper>,
+      TestStubs.routerContext()
+    );
 
     wrapper
       .find('PasswordForm input[name="password"]')
@@ -203,7 +322,12 @@ describe('AccountSecurity', function() {
       method: 'PUT',
     });
 
-    let wrapper = mount(<AccountSecurity />, TestStubs.routerContext());
+    let wrapper = mount(
+      <AccountSecurityWrapper>
+        <AccountSecurity />
+      </AccountSecurityWrapper>,
+      TestStubs.routerContext()
+    );
 
     wrapper
       .find('PasswordForm input[name="passwordNew"]')
diff --git a/tests/js/spec/views/accountSecurityDetails.spec.jsx b/tests/js/spec/views/accountSecurityDetails.spec.jsx
index 577f274131..0a16e4303e 100644
--- a/tests/js/spec/views/accountSecurityDetails.spec.jsx
+++ b/tests/js/spec/views/accountSecurityDetails.spec.jsx
@@ -3,8 +3,10 @@ import {mount} from 'enzyme';
 
 import {Client} from 'app/api';
 import AccountSecurityDetails from 'app/views/settings/account/accountSecurity/accountSecurityDetails';
+import AccountSecurityWrapper from 'app/views/settings/account/accountSecurity/accountSecurityWrapper';
 
 const ENDPOINT = '/users/me/authenticators/';
+const ORG_ENDPOINT = '/organizations/';
 
 describe('AccountSecurityDetails', function() {
   let wrapper;
@@ -12,12 +14,22 @@ describe('AccountSecurityDetails', function() {
   describe('Totp', function() {
     Client.clearMockResponses();
     beforeAll(function() {
+      Client.addMockResponse({
+        url: ENDPOINT,
+        body: TestStubs.AllAuthenticators(),
+      });
+      Client.addMockResponse({
+        url: ORG_ENDPOINT,
+        body: TestStubs.Organizations(),
+      });
       Client.addMockResponse({
         url: `${ENDPOINT}15/`,
         body: TestStubs.Authenticators().Totp(),
       });
       wrapper = mount(
-        <AccountSecurityDetails />,
+        <AccountSecurityWrapper>
+          <AccountSecurityDetails />
+        </AccountSecurityWrapper>,
         TestStubs.routerContext([
           {
             router: {
@@ -53,17 +65,97 @@ describe('AccountSecurityDetails', function() {
 
       expect(deleteMock).toHaveBeenCalled();
     });
+
+    it('can remove one of multiple 2fa methods when org requires 2fa', function() {
+      Client.addMockResponse({
+        url: ORG_ENDPOINT,
+        body: TestStubs.Organizations({require2FA: true}),
+      });
+      let deleteMock = Client.addMockResponse({
+        url: `${ENDPOINT}15/`,
+        method: 'DELETE',
+      });
+
+      wrapper = mount(
+        <AccountSecurityWrapper>
+          <AccountSecurityDetails />
+        </AccountSecurityWrapper>,
+        TestStubs.routerContext([
+          {
+            router: {
+              ...TestStubs.router(),
+              params: {
+                authId: 15,
+              },
+            },
+          },
+        ])
+      );
+
+      wrapper.find('RemoveConfirm Button').simulate('click');
+      wrapper
+        .find('Modal Button')
+        .last()
+        .simulate('click');
+
+      expect(deleteMock).toHaveBeenCalled();
+    });
+
+    it('can not remove last 2fa method when org requires 2fa', function() {
+      Client.addMockResponse({
+        url: ORG_ENDPOINT,
+        body: TestStubs.Organizations({require2FA: true}),
+      });
+      Client.addMockResponse({
+        url: ENDPOINT,
+        body: [TestStubs.Authenticators().Totp()],
+      });
+      let deleteMock = Client.addMockResponse({
+        url: `${ENDPOINT}15/`,
+        method: 'DELETE',
+      });
+
+      wrapper = mount(
+        <AccountSecurityWrapper>
+          <AccountSecurityDetails />
+        </AccountSecurityWrapper>,
+        TestStubs.routerContext([
+          {
+            router: {
+              ...TestStubs.router(),
+              params: {
+                authId: 15,
+              },
+            },
+          },
+        ])
+      );
+
+      wrapper.find('RemoveConfirm Button').simulate('click');
+      expect(wrapper.find('Modal Button')).toHaveLength(0);
+      expect(deleteMock).not.toHaveBeenCalled();
+    });
   });
 
   describe('Recovery', function() {
     beforeEach(function() {
       Client.clearMockResponses();
+      Client.addMockResponse({
+        url: ENDPOINT,
+        body: TestStubs.AllAuthenticators(),
+      });
+      Client.addMockResponse({
+        url: ORG_ENDPOINT,
+        body: TestStubs.Organizations(),
+      });
       Client.addMockResponse({
         url: `${ENDPOINT}16/`,
         body: TestStubs.Authenticators().Recovery(),
       });
       wrapper = mount(
-        <AccountSecurityDetails />,
+        <AccountSecurityWrapper>
+          <AccountSecurityDetails />
+        </AccountSecurityWrapper>,
         TestStubs.routerContext([
           {
             router: {
diff --git a/tests/js/spec/views/twoFactorRequired.spec.jsx b/tests/js/spec/views/twoFactorRequired.spec.jsx
index d31fb3c585..bb74e9f4ce 100644
--- a/tests/js/spec/views/twoFactorRequired.spec.jsx
+++ b/tests/js/spec/views/twoFactorRequired.spec.jsx
@@ -2,6 +2,7 @@ import React from 'react';
 import {mount} from 'enzyme';
 
 import TwoFactorRequired from 'app/views/settings/account/accountSecurity/';
+import AccountSecurityWrapper from 'app/views/settings/account/accountSecurity/accountSecurityWrapper';
 
 const ENDPOINT = '/users/me/authenticators/';
 const ORG_ENDPOINT = '/organizations/';
@@ -26,13 +27,23 @@ describe('TwoFactorRequired', function() {
       body: [],
     });
 
-    let wrapper = mount(<TwoFactorRequired />, TestStubs.routerContext());
+    let wrapper = mount(
+      <AccountSecurityWrapper>
+        <TwoFactorRequired />
+      </AccountSecurityWrapper>,
+      TestStubs.routerContext()
+    );
     expect(wrapper.find('TwoFactorRequired')).toHaveLength(1);
     expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(0);
   });
 
   it('does not render when 2FA is not required, not 2FA enrolled', function() {
-    let wrapper = mount(<TwoFactorRequired />, TestStubs.routerContext());
+    let wrapper = mount(
+      <AccountSecurityWrapper>
+        <TwoFactorRequired />
+      </AccountSecurityWrapper>,
+      TestStubs.routerContext()
+    );
     expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(0);
   });
 
@@ -42,7 +53,12 @@ describe('TwoFactorRequired', function() {
       body: [TestStubs.Authenticators().Totp({isEnrolled: true})],
     });
 
-    let wrapper = mount(<TwoFactorRequired />, TestStubs.routerContext());
+    let wrapper = mount(
+      <AccountSecurityWrapper>
+        <TwoFactorRequired />
+      </AccountSecurityWrapper>,
+      TestStubs.routerContext()
+    );
     expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(0);
   });
 
@@ -56,7 +72,12 @@ describe('TwoFactorRequired', function() {
       body: TestStubs.Organizations({require2FA: true}),
     });
 
-    let wrapper = mount(<TwoFactorRequired />, TestStubs.routerContext());
+    let wrapper = mount(
+      <AccountSecurityWrapper>
+        <TwoFactorRequired />
+      </AccountSecurityWrapper>,
+      TestStubs.routerContext()
+    );
     expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(0);
   });
 
@@ -66,7 +87,12 @@ describe('TwoFactorRequired', function() {
       body: TestStubs.Organizations({require2FA: true}),
     });
 
-    let wrapper = mount(<TwoFactorRequired />, TestStubs.routerContext());
+    let wrapper = mount(
+      <AccountSecurityWrapper>
+        <TwoFactorRequired />
+      </AccountSecurityWrapper>,
+      TestStubs.routerContext()
+    );
     expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(1);
     expect(wrapper.find('StyledAlert[className="require-2fa"]').text()).toEqual(
       expect.stringContaining('Test 1 and Test 2 organizations')
@@ -85,7 +111,12 @@ describe('TwoFactorRequired', function() {
       ],
     });
 
-    let wrapper = mount(<TwoFactorRequired />, TestStubs.routerContext());
+    let wrapper = mount(
+      <AccountSecurityWrapper>
+        <TwoFactorRequired />
+      </AccountSecurityWrapper>,
+      TestStubs.routerContext()
+    );
     expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(1);
     expect(wrapper.find('StyledAlert[className="require-2fa"]').text()).toEqual(
       expect.stringContaining('Test 1 organization')
diff --git a/tests/sentry/api/endpoints/test_user_authenticator_details.py b/tests/sentry/api/endpoints/test_user_authenticator_details.py
index 2f10fba110..6d4324dbfd 100644
--- a/tests/sentry/api/endpoints/test_user_authenticator_details.py
+++ b/tests/sentry/api/endpoints/test_user_authenticator_details.py
@@ -4,8 +4,10 @@ import mock
 import six
 
 from django.core.urlresolvers import reverse
+from django.db.models import F
+from django.conf import settings
 
-from sentry.models import Authenticator, TotpInterface, RecoveryCodeInterface, SmsInterface
+from sentry.models import Authenticator, TotpInterface, RecoveryCodeInterface, SmsInterface, Organization
 from sentry.testutils import APITestCase
 
 
@@ -19,6 +21,10 @@ class UserAuthenticatorDetailsTest(APITestCase):
         assert 'mail.queued' in email_log.info.call_args[0]
         assert email_log.info.call_args[1]['extra']['message_type'] == email_type
 
+    def _require_2fa_for_organization(self):
+        organization = self.create_organization(name='test monkey', owner=self.user)
+        organization.update(flags=F('flags').bitor(Organization.flags.require_2fa))
+
     def test_wrong_auth_id(self):
         url = reverse(
             'sentry-api-0-user-authenticator-details',
@@ -251,13 +257,48 @@ class UserAuthenticatorDetailsTest(APITestCase):
 
     @mock.patch('sentry.utils.email.logger')
     def test_delete(self, email_log):
+        new_options = settings.SENTRY_OPTIONS.copy()
+        new_options['sms.twilio-account'] = 'twilio-account'
         user = self.create_user(email='a@example.com', is_superuser=True)
+
+        with self.settings(SENTRY_OPTIONS=new_options):
+            auth = Authenticator.objects.create(
+                type=2,  # sms
+                user=user,
+            )
+            available_auths = Authenticator.objects.all_interfaces_for_user(
+                user, ignore_backup=True
+            )
+
+            self.assertEqual(len(available_auths), 1)
+            self.login_as(user=user, superuser=True)
+
+            url = reverse(
+                'sentry-api-0-user-authenticator-details',
+                kwargs={
+                    'user_id': user.id,
+                    'auth_id': auth.id,
+                }
+            )
+            resp = self.client.delete(url, format='json')
+            assert resp.status_code == 204, (resp.status_code, resp.content)
+
+            assert not Authenticator.objects.filter(
+                id=auth.id,
+            ).exists()
+
+            self._assert_security_email_sent('mfa-removed', email_log)
+
+    @mock.patch('sentry.utils.email.logger')
+    def test_cannot_delete_without_superuser(self, email_log):
+        user = self.create_user(email='a@example.com', is_superuser=False)
         auth = Authenticator.objects.create(
             type=3,  # u2f
             user=user,
         )
 
-        self.login_as(user=user, superuser=True)
+        actor = self.create_user(email='b@example.com', is_superuser=False)
+        self.login_as(user=actor)
 
         url = reverse(
             'sentry-api-0-user-authenticator-details',
@@ -267,37 +308,75 @@ class UserAuthenticatorDetailsTest(APITestCase):
             }
         )
         resp = self.client.delete(url, format='json')
-        assert resp.status_code == 204, (resp.status_code, resp.content)
+        assert resp.status_code == 403, (resp.status_code, resp.content)
 
-        assert not Authenticator.objects.filter(
+        assert Authenticator.objects.filter(
             id=auth.id,
         ).exists()
 
-        self._assert_security_email_sent('mfa-removed', email_log)
+        assert email_log.info.call_count == 0
 
     @mock.patch('sentry.utils.email.logger')
-    def test_cannot_delete_without_superuser(self, email_log):
-        user = self.create_user(email='a@example.com', is_superuser=False)
-        auth = Authenticator.objects.create(
-            type=3,  # u2f
-            user=user,
-        )
+    def test_require_2fa__cannot_delete_last_auth(self, email_log):
+        self._require_2fa_for_organization()
 
-        actor = self.create_user(email='b@example.com', is_superuser=False)
-        self.login_as(user=actor)
+        # enroll in one auth method
+        interface = TotpInterface()
+        interface.enroll(self.user)
+        auth = interface.authenticator
 
         url = reverse(
             'sentry-api-0-user-authenticator-details',
             kwargs={
-                'user_id': user.id,
+                'user_id': self.user.id,
                 'auth_id': auth.id,
             }
         )
+
         resp = self.client.delete(url, format='json')
         assert resp.status_code == 403, (resp.status_code, resp.content)
+        self.assertIn('requires 2FA', resp.content)
 
         assert Authenticator.objects.filter(
             id=auth.id,
         ).exists()
 
         assert email_log.info.call_count == 0
+
+    @mock.patch('sentry.utils.email.logger')
+    def test_require_2fa__delete_with_multiple_auth__ok(self, email_log):
+        self._require_2fa_for_organization()
+
+        new_options = settings.SENTRY_OPTIONS.copy()
+        new_options['sms.twilio-account'] = 'twilio-account'
+
+        with self.settings(SENTRY_OPTIONS=new_options):
+            # enroll in two auth methods
+            interface = SmsInterface()
+            interface.phone_number = '5551231234'
+            interface.enroll(self.user)
+
+            interface = TotpInterface()
+            interface.enroll(self.user)
+            auth = interface.authenticator
+
+            url = reverse(
+                'sentry-api-0-user-authenticator-details',
+                kwargs={
+                    'user_id': self.user.id,
+                    'auth_id': auth.id,
+                }
+            )
+            resp = self.client.delete(url, format='json')
+            assert resp.status_code == 204, (resp.status_code, resp.content)
+
+            assert not Authenticator.objects.filter(
+                id=auth.id,
+            ).exists()
+
+            self._assert_security_email_sent('mfa-removed', email_log)
+
+    @mock.patch('sentry.utils.email.logger')
+    def test_require_2fa__delete_device__ok(self, email_log):
+        self._require_2fa_for_organization()
+        self.test_u2f_remove_device()
