commit abac260de62cef203722bccf830bbb8bdcb5f5a1
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Thu May 25 09:48:25 2017 -0700

    Render Release Tracking in React (#5403)

diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
index f49f4ba14d..1c0a05d17f 100644
--- a/src/sentry/api/bases/project.py
+++ b/src/sentry/api/bases/project.py
@@ -21,6 +21,15 @@ class ProjectPermission(TeamPermission):
             request, view, project.team)
 
 
+class StrictProjectPermission(ProjectPermission):
+    scope_map = {
+        'GET': ['project:write', 'project:admin'],
+        'POST': ['project:write', 'project:admin'],
+        'PUT': ['project:write', 'project:admin'],
+        'DELETE': ['project:admin'],
+    }
+
+
 class ProjectReleasePermission(ProjectPermission):
     scope_map = {
         'GET': ['project:read', 'project:write', 'project:admin', 'project:releases'],
diff --git a/src/sentry/api/endpoints/project_plugins.py b/src/sentry/api/endpoints/project_plugins.py
index a8371348bb..af281ea2aa 100644
--- a/src/sentry/api/endpoints/project_plugins.py
+++ b/src/sentry/api/endpoints/project_plugins.py
@@ -13,6 +13,6 @@ class ProjectPluginsEndpoint(ProjectEndpoint):
         context = serialize([
             plugin
             for plugin in plugins.configurable_for_project(project, version=None)
-            if plugin.has_project_conf()
+            if plugin.has_plugin_conf()
         ], request.user, PluginSerializer(project))
         return Response(context)
diff --git a/src/sentry/api/endpoints/project_releases_token.py b/src/sentry/api/endpoints/project_releases_token.py
new file mode 100644
index 0000000000..be4f990624
--- /dev/null
+++ b/src/sentry/api/endpoints/project_releases_token.py
@@ -0,0 +1,56 @@
+from __future__ import absolute_import
+from hashlib import sha256
+import hmac
+from uuid import uuid1
+from rest_framework.response import Response
+
+from django.core.urlresolvers import reverse
+from sentry.utils.http import absolute_uri
+
+from sentry.api.bases.project import ProjectEndpoint, StrictProjectPermission
+from sentry.models import ProjectOption
+
+
+def _get_webhook_url(project, plugin_id, token):
+
+    return absolute_uri(reverse('sentry-release-hook', kwargs={
+        'plugin_id': plugin_id,
+        'project_id': project.id,
+        'signature': _get_signature(project.id, plugin_id, token),
+    }))
+
+
+def _get_signature(project_id, plugin_id, token):
+    return hmac.new(
+        key=token.encode('utf-8'),
+        msg=('{}-{}'.format(plugin_id, project_id)).encode('utf-8'),
+        digestmod=sha256,
+    ).hexdigest()
+
+
+class ProjectReleasesTokenEndpoint(ProjectEndpoint):
+    permission_classes = (StrictProjectPermission,)
+
+    def _regenerate_token(self, project):
+        token = uuid1().hex
+        ProjectOption.objects.set_value(project, 'sentry:release-token', token)
+        return token
+
+    def get(self, request, project):
+        token = ProjectOption.objects.get_value(project, 'sentry:release-token')
+
+        if token is None:
+            token = self._regenerate_token(project)
+
+        return Response({
+            'token': token,
+            'webhookUrl': _get_webhook_url(project, 'builtin', token)
+        })
+
+    def post(self, request, project):
+        token = self._regenerate_token(project)
+
+        return Response({
+            'token': token,
+            'webhookUrl': _get_webhook_url(project, 'builtin', token)
+        })
diff --git a/src/sentry/api/serializers/models/plugin.py b/src/sentry/api/serializers/models/plugin.py
index 791c5d79ad..87d118dc5d 100644
--- a/src/sentry/api/serializers/models/plugin.py
+++ b/src/sentry/api/serializers/models/plugin.py
@@ -5,6 +5,7 @@ import six
 from sentry.api.serializers import Serializer
 from sentry.utils.assets import get_asset_url
 from sentry.utils.http import absolute_uri
+from sentry.models import ProjectOption
 
 
 class PluginSerializer(Serializer):
@@ -12,6 +13,19 @@ class PluginSerializer(Serializer):
         self.project = project
 
     def serialize(self, obj, attrs, user):
+        from sentry.api.endpoints.project_releases_token import _get_webhook_url
+        doc = ''
+
+        release_token = ProjectOption.objects.get_value(self.project, 'sentry:release-token')
+        if release_token is not None:
+            webhook_url = _get_webhook_url(self.project, obj.slug, release_token)
+
+            if hasattr(obj, 'get_release_doc_html'):
+                try:
+                    doc = obj.get_release_doc_html(webhook_url)
+                except NotImplementedError:
+                    pass
+
         contexts = []
         if hasattr(obj, 'get_custom_contexts'):
             contexts.extend(x.type for x in obj.get_custom_contexts() or ())
@@ -30,6 +44,7 @@ class PluginSerializer(Serializer):
                 }
                 for asset in obj.get_assets()
             ],
+            'doc': doc,
         }
         if self.project:
             d['enabled'] = obj.is_enabled(self.project)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 7764529adb..118fe0224a 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -75,6 +75,7 @@ from .endpoints.project_member_index import ProjectMemberIndexEndpoint
 from .endpoints.project_plugins import ProjectPluginsEndpoint
 from .endpoints.project_plugin_details import ProjectPluginDetailsEndpoint
 from .endpoints.project_releases import ProjectReleasesEndpoint
+from .endpoints.project_releases_token import ProjectReleasesTokenEndpoint
 from .endpoints.project_rules import ProjectRulesEndpoint
 from .endpoints.project_rule_details import ProjectRuleDetailsEndpoint
 from .endpoints.project_searches import ProjectSearchesEndpoint
@@ -329,6 +330,9 @@ urlpatterns = patterns(
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/releases/$',
         ProjectReleasesEndpoint.as_view(),
         name='sentry-api-0-project-releases'),
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/releases/token/$',
+        ProjectReleasesTokenEndpoint.as_view(),
+        name='sentry-api-0-project-releases-token'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/releases/(?P<version>[^/]+)/$',
         ProjectReleaseDetailsEndpoint.as_view(),
         name='sentry-api-0-project-release-details'),
diff --git a/src/sentry/plugins/base/v1.py b/src/sentry/plugins/base/v1.py
index 81dfc5fa29..75e2c16721 100644
--- a/src/sentry/plugins/base/v1.py
+++ b/src/sentry/plugins/base/v1.py
@@ -229,6 +229,12 @@ class IPlugin(local, PluggableViewMixin, PluginConfigMixin, PluginStatusMixin):
     def has_project_conf(self):
         return self.project_conf_form is not None
 
+    def has_plugin_conf(self):
+        """
+        Checks if the plugin should be returned in the ProjectPluginsEndpoint
+        """
+        return self.has_project_conf()
+
     def can_enable_for_projects(self):
         """
         Returns a boolean describing whether this plugin can be enabled for
diff --git a/src/sentry/plugins/base/v2.py b/src/sentry/plugins/base/v2.py
index 6e7f6bc23e..2c91731c80 100644
--- a/src/sentry/plugins/base/v2.py
+++ b/src/sentry/plugins/base/v2.py
@@ -214,6 +214,12 @@ class IPlugin2(local, PluginConfigMixin, PluginStatusMixin):
     def has_project_conf(self):
         return self.project_conf_form is not None
 
+    def has_plugin_conf(self):
+        """
+        Checks if the plugin should be returned in the ProjectPluginsEndpoint
+        """
+        return self.has_project_conf()
+
     def can_configure_for_project(self, project):
         """
         Checks if the plugin can be configured for a specific project.
diff --git a/src/sentry/static/sentry/app/components/pluginConfig.jsx b/src/sentry/static/sentry/app/components/pluginConfig.jsx
index be818ca4c0..831d84aa01 100644
--- a/src/sentry/static/sentry/app/components/pluginConfig.jsx
+++ b/src/sentry/static/sentry/app/components/pluginConfig.jsx
@@ -81,6 +81,10 @@ const PluginConfig = React.createClass({
     });
   },
 
+  createMarkup() {
+    return {__html: this.props.data.doc};
+  },
+
   render() {
     let data = this.props.data;
 
@@ -104,7 +108,7 @@ const PluginConfig = React.createClass({
                 </strong>
               </div>
             : null}
-
+          <div dangerouslySetInnerHTML={this.createMarkup()} />
           {this.state.loading
             ? <LoadingIndicator />
             : plugins.get(data).renderSettings({
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 4f979fd8bf..9e7d389b92 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -41,6 +41,7 @@ import OrganizationTeams from './views/organizationTeams';
 import AllTeamsList from './views/organizationTeams/allTeamsList';
 import ProjectAlertSettings from './views/projectAlertSettings';
 import ProjectAlertRules from './views/projectAlertRules';
+import ProjectReleaseTracking from './views/projectReleaseTracking';
 import ProjectChooser from './views/projectChooser';
 import ProjectCspSettings from './views/projectCspSettings';
 import ProjectDashboard from './views/projectDashboard';
@@ -223,6 +224,10 @@ function routes() {
           <Route path="settings/" component={errorHandler(ProjectSettings)}>
             <Route path="alerts/" component={errorHandler(ProjectAlertSettings)} />
             <Route path="alerts/rules/" component={errorHandler(ProjectAlertRules)} />
+            <Route
+              path="release-tracking/"
+              component={errorHandler(ProjectReleaseTracking)}
+            />
             <Route
               path="data-forwarding/"
               component={errorHandler(ProjectDataForwarding)}
diff --git a/src/sentry/static/sentry/app/views/projectReleaseTracking.jsx b/src/sentry/static/sentry/app/views/projectReleaseTracking.jsx
new file mode 100644
index 0000000000..014595ee6b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectReleaseTracking.jsx
@@ -0,0 +1,280 @@
+import React from 'react';
+import _ from 'underscore';
+
+import ApiMixin from '../mixins/apiMixin';
+import {t} from '../locale';
+import AlertActions from '../actions/alertActions';
+import PluginList from '../components/pluginList';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+
+const ProjectReleaseTracking = React.createClass({
+  propTypes: {
+    organization: React.PropTypes.object,
+    project: React.PropTypes.object
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      pluginList: [],
+      webhookUrl: '',
+      token: ''
+    };
+  },
+
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    let {orgId, projectId} = this.props.params;
+    let done = _.after(2, () => {
+      this.setState({loading: false});
+    });
+    this.api.request(`/projects/${orgId}/${projectId}/releases/token/`, {
+      method: 'GET',
+      success: data =>
+        this.setState({
+          webhookUrl: data.webhookUrl,
+          token: data.token
+        }),
+      error: () => {
+        this.setState({
+          error: true
+        });
+      },
+      complete: done
+    });
+    this.getPluginConfig(done);
+  },
+
+  getPluginConfig(done) {
+    let {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/plugins/`, {
+      success: data => {
+        this.setState({
+          pluginList: data.filter(p => p.type === 'release-tracking')
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true
+        });
+      },
+      complete: done
+    });
+  },
+
+  onEnablePlugin(plugin) {
+    this.setState({
+      pluginList: this.state.pluginList.map(p => {
+        if (p.id !== plugin.id) return p;
+        return {
+          ...plugin,
+          enabled: true
+        };
+      })
+    });
+    this.getPluginConfig();
+  },
+
+  onDisablePlugin(plugin) {
+    this.setState({
+      pluginList: this.state.pluginList.map(p => {
+        if (p.id !== plugin.id) return p;
+        return {
+          ...plugin,
+          enabled: false
+        };
+      })
+    });
+  },
+
+  onSubmit(evt) {
+    evt.preventDefault();
+    this.regenerateToken();
+  },
+
+  regenerateToken() {
+    let {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/releases/token/`, {
+      method: 'POST',
+      data: {project: projectId},
+      success: data => {
+        this.setState({
+          token: data.token,
+          webhookUrl: data.webhookUrl
+        });
+        this.getPluginConfig();
+        AlertActions.addAlert({
+          message: t(
+            'Your deploy token has been regenerated. You will need to update any pre-existing deploy hooks.'
+          ),
+          type: 'success'
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true
+        });
+      }
+    });
+  },
+
+  getReleaseWebhookIntructions() {
+    let webhookUrl = this.state.webhookUrl;
+    return (
+      'curl ' +
+      webhookUrl +
+      ' \\' +
+      '\n  ' +
+      '-X POST \\' +
+      '\n  ' +
+      "-H 'Content-Type: application/json' \\" +
+      '\n  ' +
+      '-d \'{"version": "abcdefg"}\''
+    );
+  },
+
+  getReleaseClientConfigurationIntructions() {
+    return (
+      '// See SDK documentation for language specific usage.' +
+      '\n' +
+      "Raven.config('your dsn', {" +
+      '\n' +
+      '  ' +
+      "release: '0e4fdef81448dcfa0e16ecc4433ff3997aa53572'" +
+      '\n' +
+      '});'
+    );
+  },
+
+  render() {
+    let {organization, project} = this.props;
+    let {pluginList} = this.state;
+    if (this.state.loading) return <div className="box"><LoadingIndicator /></div>;
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+
+    return (
+      <div>
+        <h2>{t('Release Tracking')}</h2>
+        <p>
+          {t(
+            'Configure release tracking for this project to automatically record new releases of your application.'
+          )}
+        </p>
+        <div className="box">
+          <div className="box-header">
+            <h3>{t('Client Configuration')}</h3>
+          </div>
+          <div className="box-content with-padding">
+            <p>
+              {t(
+                'Start by binding the <code>release</code> attribute in your application:'
+              )}
+            </p>
+            <pre>{this.getReleaseClientConfigurationIntructions()}</pre>
+            <p>
+              {t(
+                "This will annotate each event with the version of your application, as well as automatically create a release entity in the system the first time it's seen."
+              )}
+            </p>
+            <p>
+              {t(
+                'In addition you may configure a release hook (or use our API) to push a release and include additional metadata with it.'
+              )}
+            </p>
+          </div>
+        </div>
+
+        <div className="box">
+          <div className="box-header">
+            <h3>{t('Token')}</h3>
+          </div>
+          <div className="box-content with-padding">
+            <form>
+              <p>
+                {t(
+                  'Your token is a unique secret which is used to generate deploy hook URLs. If a service becomes compromised, you should regenerate the token and re-configure any deploy hooks with the newly generated URL.'
+                )}
+              </p>
+              <p>
+                <code style={{display: 'inlineBlock'}} className="auto-select">
+                  {this.state.token}
+                </code>
+                <button
+                  type="submit"
+                  className="btn btn-sm btn-danger"
+                  name="op"
+                  value="regenerate-token"
+                  onClick={this.onSubmit}>
+                  Regenerate Token
+                </button>
+              </p>
+            </form>
+          </div>
+        </div>
+
+        <div className="box">
+          <div className="box-header">
+            <h3>{t('Webhook')}</h3>
+          </div>
+          <div className="box-content with-padding">
+            <form>
+              <p>
+                {t(
+                  'If you simply want to integrate with an existing system, sometimes its easiest just to use a webhook.'
+                )}
+              </p>
+
+              <pre className="auto-select">{this.state.webhookUrl}</pre>
+
+              <p>
+                {t(
+                  'The release webhook accepts the same parameters as the "Create a new Release" API endpoint, for example:'
+                )}
+              </p>
+
+              <pre className="auto-select">{this.getReleaseWebhookIntructions()}</pre>
+            </form>
+          </div>
+        </div>
+
+        <PluginList
+          organization={organization}
+          project={project}
+          pluginList={pluginList}
+          onEnablePlugin={this.onEnablePlugin}
+          onDisablePlugin={this.onDisablePlugin}
+        />
+        <div className="box">
+          <div className="box-header">
+            <h3>{t('API')}</h3>
+          </div>
+          <div className="box-content with-padding">
+            <p>
+              {t(
+                'You can notify Sentry when you release new versions of your application via our HTTP API.'
+              )}
+            </p>
+
+            <p>
+              {t('See the ')}
+              <a href="https://docs.sentry.io/hosted/api/releases/">
+                {t('Releases API documentation')}
+              </a>
+              {' '}
+              {t('for more information.')}
+            </p>
+          </div>
+        </div>
+      </div>
+    );
+  }
+});
+
+export default ProjectReleaseTracking;
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index 159cc86796..df626e21d1 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -1,5 +1,5 @@
 import React from 'react';
-
+import OrganizationState from '../../mixins/organizationState';
 import ApiMixin from '../../mixins/apiMixin';
 import Badge from '../../components/badge';
 import ListLink from '../../components/listLink';
@@ -17,7 +17,7 @@ const ProjectSettings = React.createClass({
     organization: React.PropTypes.object
   },
 
-  mixins: [ApiMixin],
+  mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
     return {
@@ -69,6 +69,7 @@ const ProjectSettings = React.createClass({
   },
 
   render() {
+    let access = this.getAccess();
     // TODO(dcramer): move sidebar into component
     if (this.state.loading) return <LoadingIndicator />;
     else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
@@ -99,9 +100,12 @@ const ProjectSettings = React.createClass({
             <li>
               <a href={`${settingsUrlRoot}/issue-tracking/`}>{t('Issue Tracking')}</a>
             </li>
-            <li>
-              <a href={`${settingsUrlRoot}/release-tracking/`}>{t('Release Tracking')}</a>
-            </li>
+            {access.has('project:write') &&
+              <ListLink
+                to={`/${orgId}/${projectId}/settings/release-tracking/`}
+                isActive={loc => path.indexOf(loc.pathname) === 0}>
+                {t('Release Tracking')}
+              </ListLink>}
             <ListLink to={`/${orgId}/${projectId}/settings/data-forwarding/`}>
               {t('Data Forwarding')}
             </ListLink>
diff --git a/src/sentry/templates/sentry/project-release-tracking.html b/src/sentry/templates/sentry/project-release-tracking.html
deleted file mode 100644
index 2d3370e233..0000000000
--- a/src/sentry/templates/sentry/project-release-tracking.html
+++ /dev/null
@@ -1,125 +0,0 @@
-{% extends "sentry/projects/manage.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-{% load sentry_plugins %}
-
-{% block title %}{% trans "Release Tracking" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-  <h2>{% trans "Release Tracking" %}</h2>
-
-  <p>Configure release tracking for this project to automatically record new releases of your application.</p>
-
-  <div class="box">
-    <div class="box-header">
-      <h3>{% trans "Client Configuration" %}</h3>
-    </div>
-    <div class="box-content with-padding">
-      <p>Start by binding the <code>release</code> attribute in your application:</p>
-
-      <pre>// See SDK documentation for language specific usage.
-Raven.config('your dsn', {
-  release: '0e4fdef81448dcfa0e16ecc4433ff3997aa53572'
-});</pre>
-
-      <p>This will annotate each event with the version of your application, as well as
-        automatically create a release entity in the system the first time it's seen.<p>
-
-      <p>In addition you may configure a release hook (or use our API) to push a release
-        and include additional metadata with it.</p>
-    </div>
-  </div>
-
-  <div class="box">
-    <div class="box-header">
-      <h3>{% trans "Token" %}</h3>
-    </div>
-    <div class="box-content with-padding">
-      <form method="POST">
-        {% csrf_token %}
-          <p>Your token is a unique secret which is used to generate deploy hook URLs. If a service becomes compromised, you should regenerate the token and re-configure any deploy hooks with the newly generated URL.</p>
-          <p>
-            <code style="display:inline-block" class="auto-select">{{ token }}</code>
-            <button type="submit" class="btn btn-sm btn-danger" name="op" value="regenerate-token">Regenerate Token</button>
-          </p>
-      </form>
-    </div>
-  </div>
-
-
-  <div class="box">
-    <div class="box-header">
-      <h3>{% trans "Webhook" %}</h3>
-    </div>
-    <div class="box-content with-padding">
-      <form method="POST">
-        {% csrf_token %}
-          <p>If you simply want to integrate with an existing system, sometimes its easiest just to use a webhook.</p>
-
-          <pre class="auto-select">{{ webhook_url }}</pre>
-
-          <p>The release webhook accepts the same parameters as the "Create a new Release" API endpoint, for example:</p>
-
-          <pre class="auto-select">curl {{ webhook_url }} \
-  -X POST \
-  -H 'Content-Type: application/json' \
-  -d '{"version": "abcdefg"}'</pre>
-      </form>
-    </div>
-  </div>
-
-  {% if enabled_plugins or other_plugins %}
-    {% for plugin, content in enabled_plugins %}
-      <div class="box">
-        <div class="box-header">
-          {% if plugin.can_disable %}
-            <form method="POST" class="pull-right">
-              {% csrf_token %}
-              <input type="hidden" name="plugin" value="{{ plugin.slug }}" />
-              <button type="submit" class="btn btn-sm btn-default" name="op" value="disable">Disable</button>
-            </form>
-          {% endif %}
-          <h3>{{ plugin.get_title }}</h3>
-        </div>
-        <div class="box-content with-padding">
-          {{ content }}
-          </form>
-        </div>
-      </div>
-    {% endfor %}
-
-    {% if other_plugins %}
-      <div class="box">
-        <div class="box-header">
-          <h3>{% trans "Inactive Integrations" %}</h3>
-        </div>
-        <div class="box-content with-padding">
-          <ul class="integration-list">
-            {% for plugin in other_plugins %}
-              <li>
-                <form method="POST">
-                  {% csrf_token %}
-                  <input type="hidden" name="op" value="enable" />
-                  <input type="hidden" name="plugin" value="{{ plugin.slug }}" />
-                  <button type="submit">{{ plugin.get_title }}</button>
-                </form>
-              </li>
-            {% endfor %}
-          </ul>
-        </div>
-      </div>
-    {% endif %}
-  {% endif %}
-
-  <div class="box">
-    <div class="box-header">
-      <h3>{% trans "API" %}</h3>
-    </div>
-    <div class="box-content with-padding">
-      <p>You can notify Sentry when you release new versions of your application via our HTTP API.</p>
-
-      <p>See the <a href="https://docs.sentry.io/hosted/api/releases/">Releases API documentation</a> for more information.</p>
-    </div>
-  </div>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 218e7d2859..40f2b44dd7 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -194,7 +194,7 @@
         <a href="{% url 'sentry-project-issue-tracking' project.organization.slug project.slug %}">{% trans "Issue Tracking" %}</a>
     </li>
     <li{% if page == 'release-tracking' %} class="active"{% endif %}>
-        <a href="{% url 'sentry-project-release-tracking' project.organization.slug project.slug %}">{% trans "Release Tracking" %}</a>
+        <a href="{% absolute_uri '/{}/{}/settings/release-tracking/' project.organization.slug project.slug %}">{% trans "Release Tracking" %}</a>
     </li>
     <li>
         <a href="{% absolute_uri '/{}/{}/settings/data-forwarding/' project.organization.slug project.slug %}">{% trans "Data Forwarding" %}</a>
diff --git a/src/sentry/web/frontend/project_release_tracking.py b/src/sentry/web/frontend/project_release_tracking.py
deleted file mode 100644
index 77e5b4a3d7..0000000000
--- a/src/sentry/web/frontend/project_release_tracking.py
+++ /dev/null
@@ -1,111 +0,0 @@
-from __future__ import absolute_import
-
-from hashlib import sha256
-
-import hmac
-
-from django.contrib import messages
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
-from django.utils.safestring import mark_safe
-from django.utils.translation import ugettext_lazy as _
-from uuid import uuid1
-
-from sentry import constants
-from sentry.models import ProjectOption
-from sentry.plugins import plugins, ReleaseTrackingPlugin
-from sentry.utils.http import absolute_uri
-from sentry.web.frontend.base import ProjectView
-
-
-OK_TOKEN_REGENERATED = _("Your deploy token has been regenerated. You will need to update any pre-existing deploy hooks.")
-
-ERR_NO_FEATURE = _('The release tracking feature is not enabled for this project.')
-
-
-class ProjectReleaseTrackingView(ProjectView):
-    required_scope = 'project:write'
-
-    def _iter_plugins(self):
-        for plugin in plugins.all(version=2):
-            if not isinstance(plugin, ReleaseTrackingPlugin):
-                continue
-            yield plugin
-
-    def _handle_enable_plugin(self, request, project):
-        plugin = plugins.get(request.POST['plugin'])
-        plugin.enable(project)
-        messages.add_message(
-            request, messages.SUCCESS,
-            constants.OK_PLUGIN_ENABLED.format(name=plugin.get_title()),
-        )
-
-    def _handle_disable_plugin(self, request, project):
-        plugin = plugins.get(request.POST['plugin'])
-        plugin.disable(project)
-        messages.add_message(
-            request, messages.SUCCESS,
-            constants.OK_PLUGIN_DISABLED.format(name=plugin.get_title()),
-        )
-
-    def _regenerate_token(self, project):
-        token = uuid1().hex
-        ProjectOption.objects.set_value(project, 'sentry:release-token', token)
-        return token
-
-    def _get_signature(self, project_id, plugin_id, token):
-        return hmac.new(
-            key=token.encode('utf-8'),
-            msg=('{}-{}'.format(plugin_id, project_id)).encode('utf-8'),
-            digestmod=sha256,
-        ).hexdigest()
-
-    def handle(self, request, organization, team, project):
-        token = None
-
-        if request.method == 'POST':
-            op = request.POST.get('op')
-            if op == 'regenerate-token':
-                token = self._regenerate_token(project)
-                messages.add_message(
-                    request, messages.SUCCESS,
-                    OK_TOKEN_REGENERATED,
-                )
-            elif op == 'enable':
-                self._handle_enable_plugin(request, project)
-            elif op == 'disable':
-                self._handle_disable_plugin(request, project)
-            return HttpResponseRedirect(request.path)
-
-        if token is None:
-            token = ProjectOption.objects.get_value(project, 'sentry:release-token')
-        if token is None:
-            token = self._regenerate_token(project)
-
-        enabled_plugins = []
-        other_plugins = []
-        for plugin in self._iter_plugins():
-            if plugin.is_enabled(project):
-                hook_url = absolute_uri(reverse('sentry-release-hook', kwargs={
-                    'plugin_id': plugin.slug,
-                    'project_id': project.id,
-                    'signature': self._get_signature(project.id, plugin.slug, token),
-                }))
-                content = plugin.get_release_doc_html(hook_url=hook_url)
-                enabled_plugins.append((plugin, mark_safe(content)))
-            elif plugin.can_configure_for_project(project):
-                other_plugins.append(plugin)
-
-        context = {
-            'page': 'release-tracking',
-            'token': token,
-            'enabled_plugins': enabled_plugins,
-            'other_plugins': other_plugins,
-            'webhook_url': absolute_uri(reverse('sentry-release-hook', kwargs={
-                'plugin_id': 'builtin',
-                'project_id': project.id,
-                'signature': self._get_signature(project.id, 'builtin', token),
-            }))
-        }
-
-        return self.respond('sentry/project-release-tracking.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 975c8d752f..76dd2b950b 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -56,8 +56,6 @@ from sentry.web.frontend.project_plugin_disable import ProjectPluginDisableView
 from sentry.web.frontend.project_plugin_enable import ProjectPluginEnableView
 from sentry.web.frontend.project_plugin_reset import ProjectPluginResetView
 from sentry.web.frontend.project_plugins import ProjectPluginsView
-from sentry.web.frontend.project_release_tracking import \
-    ProjectReleaseTrackingView
 from sentry.web.frontend.project_rule_edit import ProjectRuleEditView
 from sentry.web.frontend.project_settings import ProjectSettingsView
 from sentry.web.frontend.project_tags import ProjectTagsView
@@ -298,9 +296,6 @@ urlpatterns += patterns(
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/issue-tracking/$',
         ProjectIssueTrackingView.as_view(),
         name='sentry-project-issue-tracking'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/release-tracking/$',
-        ProjectReleaseTrackingView.as_view(),
-        name='sentry-project-release-tracking'),
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/plugins/$',
         ProjectPluginsView.as_view(),
         name='sentry-manage-project-plugins'),
diff --git a/tests/sentry/api/endpoints/test_project_release_token.py b/tests/sentry/api/endpoints/test_project_release_token.py
new file mode 100644
index 0000000000..6e90f75215
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_release_token.py
@@ -0,0 +1,68 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import ProjectOption
+from sentry.testutils import APITestCase
+
+
+class ReleaseTokenGetTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project(
+            name='foo',
+        )
+        token = 'abcdefghijklmnop'
+
+        ProjectOption.objects.set_value(project, 'sentry:release-token', token)
+
+        url = reverse('sentry-api-0-project-releases-token', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+
+        self.login_as(user=self.user)
+
+        response = self.client.get(url)
+
+        assert response.status_code == 200, response.content
+        assert response.data['token'] == 'abcdefghijklmnop'
+
+    def test_generates_token(self):
+        project = self.create_project(
+            name='foo',
+        )
+
+        url = reverse('sentry-api-0-project-releases-token', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+
+        self.login_as(user=self.user)
+
+        response = self.client.get(url)
+
+        assert response.status_code == 200, response.content
+        assert response.data['token'] is not None
+
+    def test_regenerates_token(self):
+        project = self.create_project(
+            name='foo',
+        )
+        token = 'abcdefghijklmnop'
+
+        ProjectOption.objects.set_value(project, 'sentry:release-token', token)
+
+        url = reverse('sentry-api-0-project-releases-token', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+
+        self.login_as(user=self.user)
+
+        response = self.client.post(url, {'project': project.slug})
+
+        assert response.status_code == 200, response.content
+        assert response.data['token'] is not None
+        assert response.data['token'] != 'abcdefghijklmnop'
diff --git a/tests/sentry/web/frontend/test_project_release_tracking.py b/tests/sentry/web/frontend/test_project_release_tracking.py
deleted file mode 100644
index 705907efff..0000000000
--- a/tests/sentry/web/frontend/test_project_release_tracking.py
+++ /dev/null
@@ -1,28 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.testutils import TestCase
-
-
-class ProjectReleaseTrackingTest(TestCase):
-    def setUp(self):
-        super(ProjectReleaseTrackingTest, self).setUp()
-        self.owner = self.create_user()
-        self.organization = self.create_organization(owner=self.owner)
-        self.team = self.create_team(organization=self.organization)
-        self.project = self.create_project(team=self.team)
-
-    @fixture
-    def path(self):
-        return reverse('sentry-project-release-tracking', args=[
-            self.organization.slug, self.project.slug,
-        ])
-
-    def test_renders_with_context(self):
-        self.login_as(self.owner)
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/project-release-tracking.html')
-        assert resp.context['project'] == self.project
