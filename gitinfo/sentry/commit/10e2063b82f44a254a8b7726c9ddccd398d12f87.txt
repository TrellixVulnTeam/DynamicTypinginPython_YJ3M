commit 10e2063b82f44a254a8b7726c9ddccd398d12f87
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 7 10:52:24 2018 -0700

    Change field defaults to be compatible with Django 1.8 migrations

diff --git a/src/sentry/models/apiapplication.py b/src/sentry/models/apiapplication.py
index 993706f756..c0c6f0d396 100644
--- a/src/sentry/models/apiapplication.py
+++ b/src/sentry/models/apiapplication.py
@@ -14,6 +14,14 @@ from sentry.db.models import (
 )
 
 
+def generate_name():
+    return petname.Generate(2, ' ', letters=10).title()
+
+
+def generate_token():
+    return uuid4().hex + uuid4().hex
+
+
 class ApiApplicationStatus(object):
     active = 0
     inactive = 1
@@ -25,12 +33,12 @@ class ApiApplication(Model):
     __core__ = True
 
     client_id = models.CharField(
-        max_length=64, unique=True, default=lambda: ApiApplication.generate_token()
+        max_length=64, unique=True, default=generate_token
     )
-    client_secret = EncryptedTextField(default=lambda: ApiApplication.generate_token())
+    client_secret = EncryptedTextField(default=generate_token)
     owner = FlexibleForeignKey('sentry.User')
     name = models.CharField(
-        max_length=64, blank=True, default=lambda: petname.Generate(2, ' ', letters=10).title()
+        max_length=64, blank=True, default=generate_name
     )
     status = BoundedPositiveIntegerField(
         default=0,
@@ -60,10 +68,6 @@ class ApiApplication(Model):
     def __unicode__(self):
         return self.name
 
-    @classmethod
-    def generate_token(cls):
-        return uuid4().hex + uuid4().hex
-
     @property
     def is_active(self):
         return self.status == ApiApplicationStatus.active
diff --git a/src/sentry/models/apigrant.py b/src/sentry/models/apigrant.py
index 47585b0023..51e22367af 100644
--- a/src/sentry/models/apigrant.py
+++ b/src/sentry/models/apigrant.py
@@ -13,6 +13,14 @@ from sentry.db.models import ArrayField, Model, FlexibleForeignKey
 DEFAULT_EXPIRATION = timedelta(minutes=10)
 
 
+def default_expiration():
+    return timezone.now() + DEFAULT_EXPIRATION
+
+
+def generate_code():
+    return uuid4().hex
+
+
 class ApiGrant(Model):
     """
     A grant represents a token with a short lifetime that can
@@ -23,9 +31,9 @@ class ApiGrant(Model):
 
     user = FlexibleForeignKey('sentry.User')
     application = FlexibleForeignKey('sentry.ApiApplication')
-    code = models.CharField(max_length=64, db_index=True, default=lambda: ApiGrant.generate_code())
+    code = models.CharField(max_length=64, db_index=True, default=generate_code)
     expires_at = models.DateTimeField(
-        db_index=True, default=lambda: timezone.now() + DEFAULT_EXPIRATION
+        db_index=True, default=default_expiration
     )
     redirect_uri = models.CharField(max_length=255)
     scopes = BitField(
@@ -49,10 +57,6 @@ class ApiGrant(Model):
         app_label = 'sentry'
         db_table = 'sentry_apigrant'
 
-    @classmethod
-    def generate_code(cls):
-        return uuid4().hex
-
     def get_scopes(self):
         if self.scope_list:
             return self.scope_list
diff --git a/src/sentry/models/apitoken.py b/src/sentry/models/apitoken.py
index 404b29db73..a123123e28 100644
--- a/src/sentry/models/apitoken.py
+++ b/src/sentry/models/apitoken.py
@@ -15,6 +15,14 @@ from sentry.db.models import (
 DEFAULT_EXPIRATION = timedelta(days=30)
 
 
+def default_expiration():
+    return timezone.now() + DEFAULT_EXPIRATION
+
+
+def generate_token():
+    return uuid4().hex + uuid4().hex
+
+
 class ApiToken(Model, HasApiScopes):
     __core__ = True
 
@@ -24,16 +32,16 @@ class ApiToken(Model, HasApiScopes):
     token = models.CharField(
         max_length=64,
         unique=True,
-        default=lambda: ApiToken.generate_token(),
+        default=generate_token,
     )
     refresh_token = models.CharField(
         max_length=64,
         unique=True,
         null=True,
-        default=lambda: ApiToken.generate_token(),
+        default=generate_token,
     )
     expires_at = models.DateTimeField(
-        null=True, default=lambda: timezone.now() + DEFAULT_EXPIRATION
+        null=True, default=default_expiration
     )
     date_added = models.DateTimeField(default=timezone.now)
 
@@ -48,10 +56,6 @@ class ApiToken(Model, HasApiScopes):
     def __unicode__(self):
         return six.text_type(self.token)
 
-    @classmethod
-    def generate_token(cls):
-        return uuid4().hex + uuid4().hex
-
     @classmethod
     def from_grant(cls, grant):
         with transaction.atomic():
@@ -82,7 +86,7 @@ class ApiToken(Model, HasApiScopes):
             expires_at = timezone.now() + DEFAULT_EXPIRATION
 
         self.update(
-            token=type(self).generate_token(),
-            refresh_token=type(self).generate_token(),
+            token=generate_token(),
+            refresh_token=generate_token(),
             expires_at=expires_at,
         )
diff --git a/src/sentry/models/broadcast.py b/src/sentry/models/broadcast.py
index 45d9269d1c..ec38deb66b 100644
--- a/src/sentry/models/broadcast.py
+++ b/src/sentry/models/broadcast.py
@@ -14,6 +14,10 @@ from django.utils import timezone
 from sentry.db.models import FlexibleForeignKey, Model, sane_repr
 
 
+def default_expiration():
+    return timezone.now() + timedelta(days=7)
+
+
 class Broadcast(Model):
     __core__ = False
 
@@ -23,7 +27,7 @@ class Broadcast(Model):
     link = models.URLField(null=True, blank=True)
     is_active = models.BooleanField(default=True, db_index=True)
     date_expires = models.DateTimeField(
-        default=lambda: timezone.now() + timedelta(days=7),
+        default=default_expiration,
         null=True,
         blank=True,
     )
diff --git a/src/sentry/models/groupshare.py b/src/sentry/models/groupshare.py
index 1a5c6ef001..8b531c46f7 100644
--- a/src/sentry/models/groupshare.py
+++ b/src/sentry/models/groupshare.py
@@ -16,6 +16,10 @@ from django.utils import timezone
 from sentry.db.models import FlexibleForeignKey, Model, BaseManager, sane_repr
 
 
+def default_uuid():
+    return uuid4().hex
+
+
 class GroupShare(Model):
     """
     A Group that was shared publicly.
@@ -24,7 +28,7 @@ class GroupShare(Model):
 
     project = FlexibleForeignKey('sentry.Project')
     group = FlexibleForeignKey('sentry.Group', unique=True)
-    uuid = models.CharField(max_length=32, unique=True, default=lambda: uuid4().hex)
+    uuid = models.CharField(max_length=32, unique=True, default=default_uuid)
     # Tracking the user that initiated the share.
     user = FlexibleForeignKey(settings.AUTH_USER_MODEL, null=True)
     date_added = models.DateTimeField(default=timezone.now)
diff --git a/src/sentry/models/integration.py b/src/sentry/models/integration.py
index fbfe049430..093277d0e8 100644
--- a/src/sentry/models/integration.py
+++ b/src/sentry/models/integration.py
@@ -31,7 +31,7 @@ class OrganizationIntegration(Model):
 
     organization = FlexibleForeignKey('sentry.Organization')
     integration = FlexibleForeignKey('sentry.Integration')
-    config = EncryptedJsonField(default=lambda: {})
+    config = EncryptedJsonField(default=dict)
 
     default_auth_id = BoundedPositiveIntegerField(db_index=True, null=True)
     date_added = models.DateTimeField(default=timezone.now, null=True)
@@ -53,7 +53,7 @@ class ProjectIntegration(Model):
 
     project = FlexibleForeignKey('sentry.Project')
     integration = FlexibleForeignKey('sentry.Integration')
-    config = EncryptedJsonField(default=lambda: {})
+    config = EncryptedJsonField(default=dict)
 
     class Meta:
         app_label = 'sentry'
@@ -76,7 +76,7 @@ class Integration(Model):
     # metadata might be used to store things like credentials, but it should NOT
     # be used to store organization-specific information, as the Integration
     # instance is shared among multiple organizations
-    metadata = EncryptedJsonField(default=lambda: {})
+    metadata = EncryptedJsonField(default=dict)
     status = BoundedPositiveIntegerField(
         default=ObjectStatus.VISIBLE,
         choices=ObjectStatus.as_choices(),
diff --git a/src/sentry/models/repository.py b/src/sentry/models/repository.py
index 22ffb4a57c..f3d764464a 100644
--- a/src/sentry/models/repository.py
+++ b/src/sentry/models/repository.py
@@ -17,7 +17,7 @@ class Repository(Model):
     url = models.URLField(null=True)
     provider = models.CharField(max_length=64, null=True)
     external_id = models.CharField(max_length=64, null=True)
-    config = JSONField(default=lambda: {})
+    config = JSONField(default=dict)
     status = BoundedPositiveIntegerField(
         default=ObjectStatus.VISIBLE,
         choices=ObjectStatus.as_choices(),
diff --git a/src/sentry/models/scheduledeletion.py b/src/sentry/models/scheduledeletion.py
index 9d928207af..d3ccfcd8df 100644
--- a/src/sentry/models/scheduledeletion.py
+++ b/src/sentry/models/scheduledeletion.py
@@ -10,15 +10,23 @@ from uuid import uuid4
 from sentry.db.models import BoundedBigIntegerField, Model
 
 
+def default_guid():
+    return uuid4().hex
+
+
+def default_date_schedule():
+    return timezone.now() + timedelta(days=30)
+
+
 class ScheduledDeletion(Model):
     __core__ = False
 
-    guid = models.CharField(max_length=32, unique=True, default=lambda: uuid4().hex)
+    guid = models.CharField(max_length=32, unique=True, default=default_guid)
     app_label = models.CharField(max_length=64)
     model_name = models.CharField(max_length=64)
     object_id = BoundedBigIntegerField()
     date_added = models.DateTimeField(default=timezone.now)
-    date_scheduled = models.DateTimeField(default=lambda: (timezone.now() + timedelta(days=30)))
+    date_scheduled = models.DateTimeField(default=default_date_schedule)
     actor_id = BoundedBigIntegerField(null=True)
     data = JSONField(default={})
     in_progress = models.BooleanField(default=False)
diff --git a/src/sentry/models/sentryapp.py b/src/sentry/models/sentryapp.py
index d081a6f9e8..402625099e 100644
--- a/src/sentry/models/sentryapp.py
+++ b/src/sentry/models/sentryapp.py
@@ -11,6 +11,10 @@ from sentry.db.models import FlexibleForeignKey, ParanoidModel
 from sentry.models.apiscopes import HasApiScopes
 
 
+def default_uuid():
+    return six.binary_type(uuid.uuid4())
+
+
 class SentryApp(ParanoidModel, HasApiScopes):
     __core__ = True
 
@@ -30,7 +34,7 @@ class SentryApp(ParanoidModel, HasApiScopes):
     name = models.TextField()
     slug = models.CharField(max_length=64, unique=True)
     uuid = models.CharField(max_length=64,
-                            default=lambda: six.binary_type(uuid.uuid4()))
+                            default=default_uuid)
 
     webhook_url = models.TextField()
 
diff --git a/src/sentry/models/sentryappinstallation.py b/src/sentry/models/sentryappinstallation.py
index febba5498e..b7b6885aab 100644
--- a/src/sentry/models/sentryappinstallation.py
+++ b/src/sentry/models/sentryappinstallation.py
@@ -9,6 +9,10 @@ from django.utils import timezone
 from sentry.db.models import (FlexibleForeignKey, ParanoidModel)
 
 
+def default_uuid():
+    return six.binary_type(uuid.uuid4())
+
+
 class SentryAppInstallation(ParanoidModel):
     __core__ = True
 
@@ -37,7 +41,7 @@ class SentryAppInstallation(ParanoidModel):
                                      related_name='sentry_app_installation')
 
     uuid = models.CharField(max_length=64,
-                            default=lambda: six.binary_type(uuid.uuid4()))
+                            default=default_uuid)
 
     date_added = models.DateTimeField(default=timezone.now)
     date_updated = models.DateTimeField(default=timezone.now)
diff --git a/src/sentry/models/servicehook.py b/src/sentry/models/servicehook.py
index bfaddd6879..db6c410123 100644
--- a/src/sentry/models/servicehook.py
+++ b/src/sentry/models/servicehook.py
@@ -25,6 +25,10 @@ SERVICE_HOOK_EVENTS = [
 ]
 
 
+def generate_secret():
+    return uuid4().hex + uuid4().hex
+
+
 class ServiceHook(Model):
     __core__ = True
 
@@ -34,7 +38,7 @@ class ServiceHook(Model):
     actor_id = BoundedPositiveIntegerField(db_index=True)
     project_id = BoundedPositiveIntegerField(db_index=True)
     url = models.URLField(max_length=512)
-    secret = EncryptedTextField(default=lambda: ServiceHook.generate_secret())
+    secret = EncryptedTextField(default=generate_secret)
     events = ArrayField(of=models.TextField)
     status = BoundedPositiveIntegerField(
         default=0,
@@ -62,10 +66,6 @@ class ServiceHook(Model):
     def __unicode__(self):
         return six.text_type(self.guid)
 
-    @classmethod
-    def generate_secret(cls):
-        return uuid4().hex + uuid4().hex
-
     def build_signature(self, body):
         return hmac.new(
             key=self.secret.encode('utf-8'),
diff --git a/src/sentry/models/useremail.py b/src/sentry/models/useremail.py
index 4658f86ba2..4d27495a54 100644
--- a/src/sentry/models/useremail.py
+++ b/src/sentry/models/useremail.py
@@ -13,13 +13,17 @@ from sentry.db.models import FlexibleForeignKey, Model, sane_repr
 CHARACTERS = u'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
 
 
+def default_validation_hash(cls):
+    return get_random_string(32, CHARACTERS)
+
+
 class UserEmail(Model):
     __core__ = True
 
     user = FlexibleForeignKey(settings.AUTH_USER_MODEL, related_name='emails')
     email = models.EmailField(_('email address'))
     validation_hash = models.CharField(
-        max_length=32, default=lambda: get_random_string(32, CHARACTERS)
+        max_length=32, default=default_validation_hash
     )
     date_hash_added = models.DateTimeField(default=timezone.now)
     is_verified = models.BooleanField(
@@ -37,7 +41,7 @@ class UserEmail(Model):
 
     def set_hash(self):
         self.date_hash_added = timezone.now()
-        self.validation_hash = get_random_string(32, CHARACTERS)
+        self.validation_hash = default_validation_hash()
 
     def hash_is_valid(self):
         return self.validation_hash and self.date_hash_added > timezone.now() - timedelta(hours=48)
