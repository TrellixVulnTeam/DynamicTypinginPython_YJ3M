commit 34a6c4d6eba3172820379418abbdff0e46918987
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Thu Oct 18 17:01:04 2018 -0500

    fix(unmerge): Handle events that don't have a release (#10135)
    
     Fixes SENTRY-6C6

diff --git a/src/sentry/tasks/unmerge.py b/src/sentry/tasks/unmerge.py
index 762c38811d..fefcf1c442 100644
--- a/src/sentry/tasks/unmerge.py
+++ b/src/sentry/tasks/unmerge.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 import logging
-from collections import defaultdict
+from collections import defaultdict, OrderedDict
 
 from django.db import transaction
 
@@ -296,7 +296,7 @@ def collect_group_environment_data(events):
     Find the first release for a each group and environment pair from a
     date-descending sorted list of events.
     """
-    results = {}
+    results = OrderedDict()
     for event in events:
         results[(event.group_id, get_environment_name(event))] = event.get_tag('sentry:release')
     return results
@@ -304,9 +304,11 @@ def collect_group_environment_data(events):
 
 def repair_group_environment_data(caches, project, events):
     for (group_id, env_name), first_release in collect_group_environment_data(events).items():
-        fields = {
-            'first_release_id': caches['Release'](project.organization_id, first_release).id,
-        }
+        fields = {}
+        if first_release:
+            fields['first_release_id'] = caches['Release'](
+                project.organization_id, first_release
+            ).id
 
         GroupEnvironment.objects.create_or_update(
             environment_id=caches['Environment'](project.organization_id, env_name).id,
@@ -317,7 +319,7 @@ def repair_group_environment_data(caches, project, events):
 
 
 def collect_tag_data(events):
-    results = {}
+    results = OrderedDict()
 
     for event in events:
         environment = get_environment_name(event)
@@ -383,7 +385,7 @@ def get_environment_name(event):
 
 
 def collect_release_data(caches, project, events):
-    results = {}
+    results = OrderedDict()
 
     for event in events:
         release = event.get_tag('sentry:release')
diff --git a/tests/sentry/tasks/test_unmerge.py b/tests/sentry/tasks/test_unmerge.py
index 25fd6a9882..ba4919f959 100644
--- a/tests/sentry/tasks/test_unmerge.py
+++ b/tests/sentry/tasks/test_unmerge.py
@@ -210,22 +210,30 @@ class UnmergeTestCase(TestCase):
             },
         ])
 
-        environment = Environment.objects.create(
-            organization_id=project.organization_id,
-            name='production',
-        )
-        EnvironmentProject.objects.create(
-            environment=environment,
-            project=project,
-        )
+        for environment in ('production', ''):
+            EnvironmentProject.objects.create(
+                environment=Environment.objects.create(
+                    organization_id=project.organization_id,
+                    name=environment,
+                ),
+                project=project,
+            )
 
-        def create_message_event(template, parameters):
+        def create_message_event(template, parameters, environment, release):
             i = next(sequence)
 
             event_id = uuid.UUID(
                 fields=(i, 0x0, 0x1000, 0x80, 0x80, 0x808080808080, ),
             ).hex
 
+            tags = [['color', next(tag_values)]]
+
+            if environment:
+                tags.append(['environment', environment])
+
+            if release:
+                tags.append(['sentry:release', release])
+
             event = Event.objects.create(
                 project_id=project.id,
                 group_id=source.id,
@@ -233,7 +241,7 @@ class UnmergeTestCase(TestCase):
                 message='%s' % (id, ),
                 datetime=now + shift(i),
                 data={
-                    'environment': 'production',
+                    'environment': environment,
                     'type': 'default',
                     'metadata': {
                         'title': template % parameters,
@@ -244,18 +252,17 @@ class UnmergeTestCase(TestCase):
                         'formatted': template % parameters,
                     },
                     'sentry.interfaces.User': next(user_values),
-                    'tags': [
-                        ['color', next(tag_values)],
-                        ['environment', 'production'],
-                        ['sentry:release', 'version'],
-                    ],
+                    'tags': tags,
                 },
             )
 
             with self.tasks():
                 Group.objects.add_tags(
                     source,
-                    environment,
+                    Environment.objects.get(
+                        organization_id=project.organization_id,
+                        name=environment
+                    ),
                     tags=event.get_tags(),
                 )
 
@@ -275,11 +282,12 @@ class UnmergeTestCase(TestCase):
                 comments='Quack',
             )
 
-            Release.get_or_create(
-                project=project,
-                version=event.get_tag('sentry:release'),
-                date_added=event.datetime,
-            )
+            if release:
+                Release.get_or_create(
+                    project=project,
+                    version=event.get_tag('sentry:release'),
+                    date_added=event.datetime,
+                )
 
             features.record([event])
 
@@ -287,12 +295,17 @@ class UnmergeTestCase(TestCase):
 
         events = OrderedDict()
 
-        for event in (create_message_event('This is message #%s.', i) for i in xrange(10)):
+        for event in (create_message_event('This is message #%s.', i,
+                                           environment='production', release='version') for i in xrange(10)):
             events.setdefault(get_fingerprint(event), []).append(event)
 
-        for event in (create_message_event('This is message #%s!', i) for i in xrange(10, 17)):
+        for event in (create_message_event('This is message #%s!', i,
+                                           environment='production', release='version') for i in xrange(10, 16)):
             events.setdefault(get_fingerprint(event), []).append(event)
 
+        event = create_message_event('This is message #%s!', 17, environment='', release=None)
+        events.setdefault(get_fingerprint(event), []).append(event)
+
         assert len(events) == 2
         assert sum(map(len, events.values())) == 17
 
@@ -305,29 +318,51 @@ class UnmergeTestCase(TestCase):
                 hash=fingerprint,
             )
 
+        production_environment = Environment.objects.get(
+            organization_id=project.organization_id,
+            name='production'
+        )
+
         assert set(
             [(gtk.key, gtk.values_seen)
-             for gtk in tagstore.get_group_tag_keys(source.project_id, source.id, environment.id)]
+             for gtk in tagstore.get_group_tag_keys(source.project_id, source.id, production_environment.id)]
         ) == set([
             (u'color', 3),
             (u'environment', 1),
             (u'sentry:release', 1)
         ])
 
-        assert set(
-            [(gtv.key, gtv.value, gtv.times_seen)
-             for gtv in
-             GroupTagValue.objects.filter(
-                 project_id=source.project_id,
-                 group_id=source.id,
-            )]
-        ) == set([
-            (u'color', u'red', 6),
-            (u'color', u'green', 6),
-            (u'color', u'blue', 5),
-            (u'environment', u'production', 17),
-            (u'sentry:release', u'version', 17),
-        ])
+        if settings.SENTRY_TAGSTORE.startswith('sentry.tagstore.v2'):
+            assert set(
+                [(gtv.key, gtv.value, gtv.times_seen, Environment.objects.get(pk=gtv._key.environment_id).name)
+                 for gtv in
+                 GroupTagValue.objects.filter(
+                    project_id=source.project_id,
+                    group_id=source.id,
+                ).exclude(_key__environment_id=0)]
+            ) == set([
+                ('color', 'red', 6, 'production'),
+                ('sentry:release', 'version', 16, 'production'),
+                ('color', 'blue', 5, 'production'),
+                ('color', 'green', 5, 'production'),
+                ('environment', 'production', 16, 'production'),
+                ('color', 'green', 1, ''),
+            ])
+        else:
+            assert set(
+                [(gtv.key, gtv.value, gtv.times_seen)
+                 for gtv in
+                 GroupTagValue.objects.filter(
+                    project_id=source.project_id,
+                    group_id=source.id,
+                )]
+            ) == set([
+                (u'color', u'red', 6),
+                (u'color', u'green', 6),
+                (u'color', u'blue', 5),
+                (u'environment', u'production', 16),
+                (u'sentry:release', u'version', 16),
+            ])
 
         assert features.compare(source) == [
             (source.id, {
@@ -428,7 +463,7 @@ class UnmergeTestCase(TestCase):
 
         assert set(
             [(gtk.key, gtk.values_seen)
-             for gtk in tagstore.get_group_tag_keys(source.project_id, source.id, environment.id)]
+             for gtk in tagstore.get_group_tag_keys(source.project_id, source.id, production_environment.id)]
         ) == set([
             (u'color', 3),
             (u'environment', 1),
@@ -436,7 +471,7 @@ class UnmergeTestCase(TestCase):
         ])
 
         if settings.SENTRY_TAGSTORE.startswith('sentry.tagstore.v2'):
-            env_filter = {'_key__environment_id': environment.id}
+            env_filter = {'_key__environment_id': production_environment.id}
         else:
             env_filter = {}
 
@@ -487,11 +522,11 @@ class UnmergeTestCase(TestCase):
                 group_id=destination.id,
             ).values_list('environment', 'first_seen', 'last_seen')
         ) == set([
-            (u'production', now + shift(10), now + shift(16), ),
+            (u'production', now + shift(10), now + shift(15), ),
         ])
 
         assert set([(gtk.key, gtk.values_seen)
-                    for gtk in tagstore.get_group_tag_keys(source.project_id, source.id, environment.id)]
+                    for gtk in tagstore.get_group_tag_keys(source.project_id, source.id, production_environment.id)]
                    ) == set(
             [
                 (u'color', 3),
@@ -500,22 +535,40 @@ class UnmergeTestCase(TestCase):
             ]
         )
 
-        assert set(
-            [(gtv.key, gtv.value, gtv.times_seen,
-              gtv.first_seen, gtv.last_seen)
-             for gtv in
-             GroupTagValue.objects.filter(
-                 project_id=destination.project_id,
-                 group_id=destination.id,
-                 **env_filter
-            )]
-        ) == set([
-            (u'color', u'red', 2, now + shift(12), now + shift(15), ),
-            (u'color', u'green', 3, now + shift(10), now + shift(16), ),
-            (u'color', u'blue', 2, now + shift(11), now + shift(14), ),
-            (u'environment', u'production', 7, now + shift(10), now + shift(16), ),
-            (u'sentry:release', u'version', 7, now + shift(10), now + shift(16), ),
-        ])
+        if settings.SENTRY_TAGSTORE.startswith('sentry.tagstore.v2'):
+            assert set(
+                [(gtv.key, gtv.value, gtv.times_seen,
+                  gtv.first_seen, gtv.last_seen)
+                 for gtv in
+                 GroupTagValue.objects.filter(
+                    project_id=destination.project_id,
+                    group_id=destination.id,
+                    **env_filter
+                )]
+            ) == set([
+                (u'color', u'red', 2, now + shift(12), now + shift(15), ),
+                (u'color', u'green', 2, now + shift(10), now + shift(13), ),
+                (u'color', u'blue', 2, now + shift(11), now + shift(14), ),
+                (u'environment', u'production', 6, now + shift(10), now + shift(15), ),
+                (u'sentry:release', u'version', 6, now + shift(10), now + shift(15), ),
+            ])
+        else:
+            assert set(
+                [(gtv.key, gtv.value, gtv.times_seen,
+                  gtv.first_seen, gtv.last_seen)
+                 for gtv in
+                 GroupTagValue.objects.filter(
+                    project_id=destination.project_id,
+                    group_id=destination.id,
+                    **env_filter
+                )]
+            ) == set([
+                (u'color', u'red', 2, now + shift(12), now + shift(15), ),
+                (u'color', u'green', 3, now + shift(10), now + shift(16), ),
+                (u'color', u'blue', 2, now + shift(11), now + shift(14), ),
+                (u'environment', u'production', 6, now + shift(10), now + shift(15), ),
+                (u'sentry:release', u'version', 6, now + shift(10), now + shift(15), ),
+            ])
 
         rollup_duration = 3600
 
@@ -523,7 +576,7 @@ class UnmergeTestCase(TestCase):
             tsdb.models.group,
             [source.id, destination.id],
             now - timedelta(seconds=rollup_duration),
-            now + shift(16),
+            now + shift(15),
             rollup_duration,
         )
 
@@ -531,9 +584,9 @@ class UnmergeTestCase(TestCase):
             tsdb.models.group,
             [source.id, destination.id],
             now - timedelta(seconds=rollup_duration),
-            now + shift(16),
+            now + shift(15),
             rollup_duration,
-            environment_id=environment.id,
+            environment_id=production_environment.id,
         )
 
         def get_expected_series_values(rollup, events, function=None):
@@ -566,7 +619,7 @@ class UnmergeTestCase(TestCase):
             )
 
             assert_series_contains(
-                get_expected_series_values(rollup_duration, events.values()[1]),
+                get_expected_series_values(rollup_duration, events.values()[1][:-1]),
                 series[destination.id],
                 0,
             )
@@ -585,7 +638,7 @@ class UnmergeTestCase(TestCase):
             now - timedelta(seconds=rollup_duration),
             now + shift(16),
             rollup_duration,
-            environment_id=environment.id,
+            environment_id=production_environment.id,
         )
 
         def collect_by_user_tag(aggregate, event):
@@ -632,12 +685,15 @@ class UnmergeTestCase(TestCase):
 
         def collect_by_release(group, aggregate, event):
             aggregate = aggregate if aggregate is not None else {}
+            release = event.get_tag('sentry:release')
+            if not release:
+                return aggregate
             release = GroupRelease.objects.get(
                 group_id=group.id,
                 environment=event.data['environment'],
                 release_id=Release.objects.get(
                     organization_id=project.organization_id,
-                    version=event.get_tag('sentry:release'),
+                    version=release,
                 ).id,
             ).id
             aggregate[release] = aggregate.get(release, 0) + 1
