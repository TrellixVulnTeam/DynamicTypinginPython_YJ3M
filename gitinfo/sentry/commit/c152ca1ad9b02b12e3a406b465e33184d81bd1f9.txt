commit c152ca1ad9b02b12e3a406b465e33184d81bd1f9
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Apr 2 11:25:26 2019 -0700

    test: Give readable names to each test matrix item (#12609)

diff --git a/.travis.yml b/.travis.yml
index e732681518..909bdbf9e5 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -69,6 +69,7 @@ matrix:
   include:
     # Lint python and javascript together
     - python: 2.7
+      name: 'Linter'
       env: TEST_SUITE=lint
       install:
         - find "$NODE_DIR" -type d -empty -delete
@@ -77,19 +78,23 @@ matrix:
         - pip install -r requirements-dev.txt
         - yarn install --pure-lockfile
 
-    # only the sqlite suite runs riak tests
     - python: 2.7
-      env: TEST_SUITE=sqlite DB=sqlite
+      name: 'Backend [Postgres]'
+      env: TEST_SUITE=postgres DB=postgres
       services:
         - memcached
-        - riak
         - redis-server
+        - postgresql
       install:
         - python setup.py install_egg_info
         - pip install -e ".[dev,tests,optional]"
+      before_script:
+        - psql -c 'create database sentry;' -U postgres
 
+    # django 1.8 compatibility
     - python: 2.7
-      env: TEST_SUITE=postgres DB=postgres
+      name: 'Backend [Postgres] (Django 1.8)'
+      env: TEST_SUITE=postgres DJANGO_VERSION=">=1.8,<1.9"
       services:
         - memcached
         - redis-server
@@ -100,8 +105,36 @@ matrix:
       before_script:
         - psql -c 'create database sentry;' -U postgres
 
+    # django 1.8 compatibility with migrations
+    - python: 2.7
+      name: 'Backend [Postgres] (Django 1.8, No migrations)'
+      env: TEST_SUITE=postgres DJANGO_VERSION=">=1.8,<1.9" SOUTH_TESTS_MIGRATE=0
+      services:
+        - memcached
+        - redis-server
+        - postgresql
+      install:
+        - python setup.py install_egg_info
+        - pip install -e ".[dev,tests,optional]"
+      before_script:
+        - psql -c 'create database sentry;' -U postgres
+
+    # only the sqlite suite runs riak tests
+    - python: 2.7
+      name: 'Backend [SQLite]'
+      env: TEST_SUITE=sqlite DB=sqlite
+      services:
+        - memcached
+        - riak
+        - redis-server
+      install:
+        - python setup.py install_egg_info
+        - pip install -e ".[dev,tests,optional]"
+
+
     # XXX(markus): Remove after rust interfaces are done
     - python: 2.7
+      name: 'Backend [Postgres] (Rust Interface Renormalization)'
       env: TEST_SUITE=postgres DB=postgres SENTRY_TEST_USE_RUST_INTERFACE_RENORMALIZATION=1
       services:
         - memcached
@@ -114,6 +147,7 @@ matrix:
         - psql -c 'create database sentry;' -U postgres
 
     - python: 2.7
+      name: 'Backend [MySQL]'
       env: TEST_SUITE=mysql DB=mysql
       services:
         - memcached
@@ -129,6 +163,7 @@ matrix:
         - mysql -u root -e 'create database sentry;'
 
     - python: 2.7
+      name: 'Acceptance'
       env: TEST_SUITE=acceptance
       services:
         - memcached
@@ -154,6 +189,7 @@ matrix:
 
     # XXX(markus): Remove after rust interfaces are done
     - python: 2.7
+      name: 'Acceptance (Rust Interface Renormalization)'
       env: TEST_SUITE=acceptance SENTRY_TEST_USE_RUST_INTERFACE_RENORMALIZATION=1 PERCY_ENABLE=0
       services:
         - memcached
@@ -178,6 +214,7 @@ matrix:
         - psql -c 'create database sentry;' -U postgres
 
     - python: 2.7
+      name: 'Frontend'
       env: TEST_SUITE=js
       before_install:
         - find "$NODE_DIR" -type d -empty -delete
@@ -187,6 +224,7 @@ matrix:
         - yarn install --pure-lockfile
 
     - python: 2.7
+      name: 'Command Line'
       env: TEST_SUITE=cli
       services:
         - postgresql
@@ -198,40 +236,16 @@ matrix:
         - psql -c 'create database sentry;' -U postgres
 
     - python: 2.7
+      name: 'Distribution build'
       env: TEST_SUITE=dist
       before_install:
         - find "$NODE_DIR" -type d -empty -delete
         - nvm install
         - npm install -g "yarn@${YARN_VERSION}"
 
-    # django 1.8 compatibility
-    - python: 2.7
-      env: TEST_SUITE=postgres DJANGO_VERSION=">=1.8,<1.9"
-      services:
-        - memcached
-        - redis-server
-        - postgresql
-      install:
-        - python setup.py install_egg_info
-        - pip install -e ".[dev,tests,optional]"
-      before_script:
-        - psql -c 'create database sentry;' -U postgres
-
-    # django 1.8 compatibility with migrations
-    - python: 2.7
-      env: TEST_SUITE=postgres DJANGO_VERSION=">=1.8,<1.9" SOUTH_TESTS_MIGRATE=0
-      services:
-        - memcached
-        - redis-server
-        - postgresql
-      install:
-        - python setup.py install_egg_info
-        - pip install -e ".[dev,tests,optional]"
-      before_script:
-        - psql -c 'create database sentry;' -U postgres
-
     # snuba in testing
     - python: 2.7
+      name: 'Snuba Integration'
       env: TEST_SUITE=snuba SENTRY_TAGSTORE=sentry.tagstore.snuba.SnubaTagStorage SENTRY_ZOOKEEPER_HOSTS=localhost:2181 SENTRY_KAFKA_HOSTS=localhost:9092
       services:
         - docker
@@ -253,6 +267,7 @@ matrix:
 
     # XXX(markus): Remove after rust interfaces are done
     - python: 2.7
+      name: 'Snuba Integration (Rust Interface Renormalization)'
       env: TEST_SUITE=snuba SENTRY_TAGSTORE=sentry.tagstore.snuba.SnubaTagStorage SENTRY_ZOOKEEPER_HOSTS=localhost:2181 SENTRY_KAFKA_HOSTS=localhost:9092 SENTRY_TEST_USE_RUST_INTERFACE_RENORMALIZATION=1
       services:
         - docker
@@ -274,6 +289,7 @@ matrix:
 
     # Deploy 'storybook' (component & style guide) - allowed to fail
     - language: node_js
+      name: 'Storybook Deploy'
       env: STORYBOOK_BUILD=1
       before_install:
         # Decrypt the credentials we added to the repo using the key we added with the Travis command line tool
