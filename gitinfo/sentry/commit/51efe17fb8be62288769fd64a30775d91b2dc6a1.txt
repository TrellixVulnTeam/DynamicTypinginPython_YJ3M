commit 51efe17fb8be62288769fd64a30775d91b2dc6a1
Author: Colleen O'Rourke <colleen@sentry.io>
Date:   Wed Feb 26 14:49:04 2020 -0800

    feat(integrations): Add logging to ApiClient and Jira (#17289)
    
    * feat(integrations): Add logging to ApiClient and Jira

diff --git a/src/sentry/integrations/client.py b/src/sentry/integrations/client.py
index c1d28d3e89..c28833c526 100644
--- a/src/sentry/integrations/client.py
+++ b/src/sentry/integrations/client.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import logging
 import json
 import requests
+import six
 
 from collections import OrderedDict
 from time import time
@@ -111,14 +112,6 @@ class SequenceApiResponse(list, BaseApiResponse):
         return self
 
 
-def track_response_code(integration, code):
-    metrics.incr(
-        "integrations.http_response",
-        sample_rate=1.0,
-        tags={"integration": integration, "status": code},
-    )
-
-
 class ApiClient(object):
     base_url = None
 
@@ -131,8 +124,26 @@ class ApiClient(object):
     # Used in metrics and logging.
     integration_name = "undefined"
 
-    def __init__(self, verify_ssl=True):
+    def __init__(self, verify_ssl=True, logging_context=None):
         self.verify_ssl = verify_ssl
+        self.logging_context = logging_context
+
+    def track_response_data(self, integration, code, error=None):
+        logger = logging.getLogger("sentry.integrations.client")
+
+        metrics.incr(
+            "integrations.http_response",
+            sample_rate=1.0,
+            tags={"integration": integration, "status": code},
+        )
+
+        extra = {
+            "integration": integration,
+            "status": code,
+            "error": six.text_type(error[:128]) if error else None,
+        }
+        extra.update(getattr(self, "logging_context", None) or {})
+        logger.info("integrations.http_response", extra=extra)
 
     def build_url(self, path):
         if path.startswith("/"):
@@ -189,31 +200,24 @@ class ApiClient(object):
             )
             resp.raise_for_status()
         except ConnectionError as e:
-            metrics.incr(
-                "integrations.http_response",
-                sample_rate=1.0,
-                tags={"integration": self.integration_name, "status": "connection_error"},
-            )
+            self.track_response_data(self.integration_name, "connection_error", e.message)
             raise ApiHostError.from_exception(e)
         except Timeout as e:
-            metrics.incr(
-                "integrations.http_response",
-                sample_rate=1.0,
-                tags={"integration": self.integration_name, "status": "timeout"},
-            )
+            self.track_response_data(self.integration_name, "timeout", e.message)
             raise ApiTimeoutError.from_exception(e)
         except HTTPError as e:
             resp = e.response
             if resp is None:
-                track_response_code(self.integration_name, "unknown")
+                self.track_response_data(self.integration_name, "unknown", e.message)
                 self.logger.exception(
                     "request.error", extra={"integration": self.integration_name, "url": full_url}
                 )
                 raise ApiError("Internal Error")
-            track_response_code(self.integration_name, resp.status_code)
+            self.track_response_data(self.integration_name, resp.status_code, e.message)
             raise ApiError.from_response(resp)
 
-        track_response_code(self.integration_name, resp.status_code)
+        self.track_response_data(self.integration_name, resp.status_code)
+
         if resp.status_code == 204:
             return {}
 
diff --git a/src/sentry/integrations/jira/client.py b/src/sentry/integrations/jira/client.py
index 17924d9443..1774e84288 100644
--- a/src/sentry/integrations/jira/client.py
+++ b/src/sentry/integrations/jira/client.py
@@ -91,13 +91,13 @@ class JiraApiClient(ApiClient):
 
     integration_name = "jira"
 
-    def __init__(self, base_url, jira_style, verify_ssl):
+    def __init__(self, base_url, jira_style, verify_ssl, logging_context=None):
         self.base_url = base_url
         # `jira_style` encapsulates differences between jira server & jira cloud.
         # We only support one API version for Jira, but server/cloud require different
         # authentication mechanisms and caching.
         self.jira_style = jira_style
-        super(JiraApiClient, self).__init__(verify_ssl)
+        super(JiraApiClient, self).__init__(verify_ssl, logging_context)
 
     def request(self, method, path, data=None, params=None, **kwargs):
         """
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index 49b094bfeb..1757aae96d 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import logging
 import six
+from operator import attrgetter
 
 from django.core.urlresolvers import reverse
 from django.utils.translation import ugettext as _
@@ -283,6 +284,11 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
             self.model.metadata["base_url"],
             JiraCloud(self.model.metadata["shared_secret"]),
             verify_ssl=True,
+            logging_context={
+                "org_id": self.organization_id,
+                "integration_id": attrgetter("org_integration.integration.id")(self),
+                "org_integration_id": attrgetter("org_integration.id")(self),
+            },
         )
 
     def get_issue(self, issue_id, **kwargs):
@@ -498,7 +504,6 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
 
         defaults = self.get_project_defaults(group.project_id)
         project_id = params.get("project", defaults.get("project"))
-
         client = self.get_client()
         try:
             jira_projects = client.get_projects_list()
