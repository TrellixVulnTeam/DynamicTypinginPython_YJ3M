commit 7fb622d2fdc81fcedc22fbd89bfa629b0744169a
Author: Leander Rodrigues <leandergrodrigues@gmail.com>
Date:   Tue Mar 31 20:21:50 2020 -0400

    chore(async-csv): Adding a few metrics (#17970)
    
    Add more useful metrics to track for async CSV downloads

diff --git a/src/sentry/data_export/endpoints/data_export.py b/src/sentry/data_export/endpoints/data_export.py
index 0c8fca91c0..4ee3bfb583 100644
--- a/src/sentry/data_export/endpoints/data_export.py
+++ b/src/sentry/data_export/endpoints/data_export.py
@@ -61,13 +61,17 @@ class DataExportEndpoint(OrganizationEndpoint, EnvironmentMixin):
             )
             status = 200
             if created:
-                metrics.incr("dataexport.start", tags={"query_type": data["query_type"]})
+                metrics.incr(
+                    "dataexport.enqueue", tags={"query_type": data["query_type"]}, sample_rate=1.0
+                )
                 assemble_download.delay(
                     data_export_id=data_export.id, limit=limit, environment_id=environment_id
                 )
                 status = 201
         except ValidationError as e:
             # This will handle invalid JSON requests
-            metrics.incr("dataexport.invalid", tags={"query_type": data.get("query_type")})
+            metrics.incr(
+                "dataexport.invalid", tags={"query_type": data.get("query_type")}, sample_rate=1.0
+            )
             return Response({"detail": six.text_type(e)}, status=400)
         return Response(serialize(data_export, request.user), status=status)
diff --git a/src/sentry/data_export/endpoints/data_export_details.py b/src/sentry/data_export/endpoints/data_export_details.py
index 5c81e1ceb3..76912e7df2 100644
--- a/src/sentry/data_export/endpoints/data_export_details.py
+++ b/src/sentry/data_export/endpoints/data_export_details.py
@@ -33,7 +33,7 @@ class DataExportDetailsEndpoint(OrganizationEndpoint):
             return Response(status=404)
 
     def download(self, data_export):
-        metrics.incr("dataexport.download")
+        metrics.incr("dataexport.download", sample_rate=1.0)
         file = data_export.file
         raw_file = file.getfile()
         response = StreamingHttpResponse(
diff --git a/src/sentry/data_export/models.py b/src/sentry/data_export/models.py
index f0a8f6513e..4c08818282 100644
--- a/src/sentry/data_export/models.py
+++ b/src/sentry/data_export/models.py
@@ -103,7 +103,7 @@ class ExportedData(Model):
             html_template="sentry/emails/data-export-success.html",
         )
         msg.send_async([self.user.email])
-        metrics.incr("dataexport.end", instance="success")
+        metrics.incr("dataexport.end", tags={"success": True}, sample_rate=1.0)
 
     def email_failure(self, message):
         from sentry.utils.email import MessageBuilder
@@ -120,7 +120,7 @@ class ExportedData(Model):
             html_template="sentry/emails/data-export-failure.html",
         )
         msg.send_async([self.user.email])
-        metrics.incr("dataexport.end", instance="failure")
+        metrics.incr("dataexport.end", tags={"success": False}, sample_rate=1.0)
         self.delete()
 
     class Meta:
diff --git a/src/sentry/data_export/tasks.py b/src/sentry/data_export/tasks.py
index 9325299717..32692fc4ae 100644
--- a/src/sentry/data_export/tasks.py
+++ b/src/sentry/data_export/tasks.py
@@ -25,8 +25,10 @@ def assemble_download(data_export_id, limit=None, environment_id=None):
     # Get the ExportedData object
     try:
         logger.info("dataexport.start", extra={"data_export_id": data_export_id})
+        metrics.incr("dataexport.start", tags={"success": True}, sample_rate=1.0)
         data_export = ExportedData.objects.get(id=data_export_id)
     except ExportedData.DoesNotExist as error:
+        metrics.incr("dataexport.start", tags={"success": False}, sample_rate=1.0)
         capture_exception(error)
         return
 
@@ -54,23 +56,28 @@ def assemble_download(data_export_id, limit=None, environment_id=None):
                     file.putfile(tf, logger=logger)
                     data_export.finalize_upload(file=file)
                     logger.info("dataexport.end", extra={"data_export_id": data_export_id})
+                    metrics.incr("dataexport.end", sample_rate=1.0)
             except IntegrityError as error:
-                metrics.incr("dataexport.error", instance=six.text_type(error))
-                logger.error(
+                metrics.incr(
+                    "dataexport.error", tags={"error": six.text_type(error)}, sample_rate=1.0
+                )
+                logger.info(
                     "dataexport.error: {}".format(six.text_type(error)),
                     extra={"query": data_export.payload, "org": data_export.organization_id},
                 )
+                capture_exception(error)
                 raise ExportError("Failed to save the assembled file")
     except ExportError as error:
         return data_export.email_failure(message=six.text_type(error))
     except NotImplementedError as error:
         return data_export.email_failure(message=six.text_type(error))
     except BaseException as error:
-        metrics.incr("dataexport.error", instance=six.text_type(error))
-        logger.error(
+        metrics.incr("dataexport.error", tags={"error": six.text_type(error)}, sample_rate=1.0)
+        logger.info(
             "dataexport.error: {}".format(six.text_type(error)),
             extra={"query": data_export.payload, "org": data_export.organization_id},
         )
+        capture_exception(error)
         return data_export.email_failure(message="Internal processing failure")
 
 
@@ -87,8 +94,9 @@ def process_issues_by_tag(data_export, file, limit, environment_id):
             environment_id=environment_id,
         )
     except ExportError as error:
-        metrics.incr("dataexport.error", instance=six.text_type(error))
-        logger.error("dataexport.error: {}".format(six.text_type(error)))
+        metrics.incr("dataexport.error", tags={"error": six.text_type(error)}, sample_rate=1.0)
+        logger.info("dataexport.error: {}".format(six.text_type(error)))
+        capture_exception(error)
         raise error
 
     # Iterate through all the GroupTagValues
diff --git a/src/sentry/data_export/utils.py b/src/sentry/data_export/utils.py
index ddd00d9475..f6f8706d51 100644
--- a/src/sentry/data_export/utils.py
+++ b/src/sentry/data_export/utils.py
@@ -4,6 +4,7 @@ import six
 from contextlib import contextmanager
 
 from sentry.utils import metrics, snuba
+from sentry.utils.sdk import capture_exception
 
 from .base import ExportError
 
@@ -14,16 +15,19 @@ def snuba_error_handler(logger):
     try:
         yield
     except snuba.QueryOutsideRetentionError as error:
-        metrics.incr("dataexport.error", instance=six.text_type(error))
-        logger.error("dataexport.error: {}".format(six.text_type(error)))
+        metrics.incr("dataexport.error", tags={"error": six.text_type(error)}, sample_rate=1.0)
+        logger.info("dataexport.error: {}".format(six.text_type(error)))
+        capture_exception(error)
         raise ExportError("Invalid date range. Please try a more recent date range.")
     except snuba.QueryIllegalTypeOfArgument as error:
-        metrics.incr("dataexport.error", instance=six.text_type(error))
-        logger.error("dataexport.error: {}".format(six.text_type(error)))
+        metrics.incr("dataexport.error", tags={"error": six.text_type(error)}, sample_rate=1.0)
+        logger.info("dataexport.error: {}".format(six.text_type(error)))
+        capture_exception(error)
         raise ExportError("Invalid query. Argument to function is wrong type.")
     except snuba.SnubaError as error:
-        metrics.incr("dataexport.error", instance=six.text_type(error))
-        logger.error("dataexport.error: {}".format(six.text_type(error)))
+        metrics.incr("dataexport.error", tags={"error": six.text_type(error)}, sample_rate=1.0)
+        logger.info("dataexport.error: {}".format(six.text_type(error)))
+        capture_exception(error)
         message = "Internal error. Please try again."
         if isinstance(
             error,
