commit 4409c051af5b0f4e1034e5ed28ae174246b2d074
Author: David Cramer <dcramer@gmail.com>
Date:   Tue May 1 01:33:51 2012 -0700

    Support CORS at the project level and drop legacy auth mechanisms

diff --git a/bootstrap/sentry.less b/bootstrap/sentry.less
index c1dc843644..e62e718523 100644
--- a/bootstrap/sentry.less
+++ b/bootstrap/sentry.less
@@ -622,6 +622,10 @@ small {
   padding-top: 5px; // has to be padding because margin collaspes
 }
 
+legend {
+  margin-bottom: 18px;
+}
+
 
 .modal-header small {
   font-size: 0.65em;
diff --git a/sentry/coreapi.py b/sentry/coreapi.py
index d52b816699..ea8c0e9b11 100644
--- a/sentry/coreapi.py
+++ b/sentry/coreapi.py
@@ -83,13 +83,8 @@ def extract_auth_vars(request):
         return None
 
 
-def project_from_auth_vars(auth_vars, data):
-    signature = auth_vars.get('sentry_signature')
-    timestamp = auth_vars.get('sentry_timestamp')
+def project_from_auth_vars(auth_vars, data, require_signature=True):
     api_key = auth_vars.get('sentry_key')
-    if not signature or not timestamp:
-        raise APIUnauthorized()
-
     if api_key:
         try:
             pk = ProjectKey.objects.get_from_cache(public_key=api_key)
@@ -120,7 +115,12 @@ def project_from_auth_vars(auth_vars, data):
         project = None
         secret_key = settings.KEY
 
-    validate_hmac(data, signature, timestamp, secret_key)
+    signature = auth_vars.get('sentry_signature')
+    timestamp = auth_vars.get('sentry_timestamp')
+    if signature and timestamp:
+        validate_hmac(data, signature, timestamp, secret_key)
+    elif require_signature:
+        raise APIUnauthorized()
 
     return project
 
diff --git a/sentry/models.py b/sentry/models.py
index 37a0ff1b1d..e50720918a 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -316,45 +316,6 @@ class PendingTeamMember(Model):
             logger.exception(e)
 
 
-class ProjectDomain(Model):
-    """
-    Currently unused. Planned for 'trusted domains' for JS apis.
-    """
-    project = models.ForeignKey(Project, related_name="domain_set")
-    domain = models.CharField(max_length=128)
-
-    objects = BaseManager()
-
-    class Meta:
-        unique_together = (('project', 'domain'),)
-
-    def __unicode__(self):
-        return u'project=%s, domain=%s' % (self.project_id, self.domain)
-
-    @classmethod
-    def test(cls, project, url, strict=False):
-        """
-        Tests whether the ``url`` is a trusted domain for the given project.
-        """
-        if not url:
-            return False
-        url = urlparse.urlsplit(url).hostname
-        if not url:
-            # If we fail to parse the referral url
-            return False
-        if url in ('127.0.0.1', 'localhost'):
-            return True
-        if url.endswith('.local'):
-            return True
-        url = url.split('.')
-        domains = ProjectDomain.objects.filter(project=project).values_list('domain', flat=True)
-        for d in domains:
-            d = d.split('.')
-            if url[-len(d):] == d:
-                return True
-        return False
-
-
 class View(Model):
     """
     A view ties directly to a view extension and simply
diff --git a/sentry/static/styles/global.css b/sentry/static/styles/global.css
index d2461d4ef3..548053eb17 100644
--- a/sentry/static/styles/global.css
+++ b/sentry/static/styles/global.css
@@ -4056,6 +4056,9 @@ small {
 .controls > .inputs-list label:first-child, .controls > .inputs-list label:first-child {
   padding-top: 5px;
 }
+legend {
+  margin-bottom: 18px;
+}
 .modal-header small {
   font-size: 0.65em;
 }
diff --git a/sentry/static/styles/global.min.css b/sentry/static/styles/global.min.css
index 0c5f931ec9..ec943ce834 100644
--- a/sentry/static/styles/global.min.css
+++ b/sentry/static/styles/global.min.css
@@ -714,6 +714,7 @@ small{font-size:0.9em;}
 .inputs-list label{padding-left:18px;}
 .inputs-list label input[type="radio"],.inputs-list label input[type="checkbox"]{float:left;margin-left:-18px;}
 .controls>.inputs-list label:first-child,.controls>.inputs-list label:first-child{padding-top:5px;}
+legend{margin-bottom:18px;}
 .modal-header small{font-size:0.65em;}
 .btn-primary{background-color:#56afe8;background-image:-moz-linear-gradient(top, #61c1ef, #4593de);background-image:-ms-linear-gradient(top, #61c1ef, #4593de);background-image:-webkit-gradient(linear, 0 0, 0 100%, from(#61c1ef), to(#4593de));background-image:-webkit-linear-gradient(top, #61c1ef, #4593de);background-image:-o-linear-gradient(top, #61c1ef, #4593de);background-image:linear-gradient(top, #61c1ef, #4593de);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#61c1ef', endColorstr='#4593de', GradientType=0);border-color:#4593de #4593de #206db6;border-color:rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);filter:progid:DXImageTransform.Microsoft.gradient(enabled = false);font-weight:bold;}.btn-primary:hover,.btn-primary:active,.btn-primary.active,.btn-primary.disabled,.btn-primary[disabled]{background-color:#4593de;}
 .btn-primary:active,.btn-primary.active{background-color:#247acc \9;}
diff --git a/sentry/templates/sentry/partial/_form_field.html b/sentry/templates/sentry/partial/_form_field.html
index a13e1e4ab6..9cd7c4c6ac 100644
--- a/sentry/templates/sentry/partial/_form_field.html
+++ b/sentry/templates/sentry/partial/_form_field.html
@@ -1,4 +1,4 @@
-<fieldset class="control-group{% if field.errors %} error{% endif %}">
+<div class="control-group{% if field.errors %} error{% endif %}">
     {{ field.label_tag }}
     <div class="controls">
         {{ field }}
@@ -11,4 +11,4 @@
             {% endfor %}
         {% endif %}
     </div>
-</fieldset>
\ No newline at end of file
+</div>
\ No newline at end of file
diff --git a/sentry/templates/sentry/projects/manage.html b/sentry/templates/sentry/projects/manage.html
index 56a94d4ea0..0e29b98873 100644
--- a/sentry/templates/sentry/projects/manage.html
+++ b/sentry/templates/sentry/projects/manage.html
@@ -44,17 +44,37 @@
                 {% csrf_token %}
                 <fieldset>
                     {% for field in form %}
-                        {% include "sentry/partial/_form_field.html" %}
+                        {% if field.name != 'origins' %}
+                            {% include "sentry/partial/_form_field.html" %}
+                        {% endif %}
                     {% endfor %}
                 </fieldset>
-                <fieldset class="form-actions">
+                <fieldset>
+                    <div><legend>Client Security</legend></div>
+                    {% with form.origins as field %}
+                        <p>{% blocktrans with 'https://github.com/lincolnloop/raven-js' as link %}Configure origin URLs which Sentry should accept events from. This is used for communication with client's like <a href="{{ link }}">raven-js</a>.{% endblocktrans %}
+                        <p>{% blocktrans with 'http://en.wikipedia.org/wiki/Cross-origin_resource_sharing' as link' %}For more information check out the <a href="{{ link }}">Wikipedia page on CORS</a>.{% endblocktrans %}</p>
+                        <div class="control-group{% if field.errors %} error{% endif %}">
+                            <div class="controls">
+                                <div class="help-block">{% trans "List one URL per line." %}</div>
+                                {{ field }}
+                                {% if field.errors %}
+                                    {% for error in field.errors %}
+                                        <div class="help-block error">{{ error }}</div>
+                                    {% endfor %}
+                                {% endif %}
+                            </div>
+                        </div>
+                    {% endwith %}
+                </fieldset>
+                <div class="form-actions">
                     <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
                     {% if PROJECT_ID != project.pk %}
                         <a href="{% url sentry-remove-project project.slug %}" class="btn btn-danger">{% trans "Remove Project" %}</a>
                     {% else %}
                         <a href="#" class="btn disabled btn-danger">{% trans "Cannot remove default project" %}</a>
                     {% endif %}
-                </fieldset>
+                </div>
             </form>
             <div class="page-header">
                 {% if can_add_member %}
diff --git a/sentry/utils/http.py b/sentry/utils/http.py
index a27d773066..4956756f08 100644
--- a/sentry/utils/http.py
+++ b/sentry/utils/http.py
@@ -9,6 +9,7 @@ import urllib
 from urlparse import urlparse
 
 from sentry.conf import settings
+from sentry.plugins.helpers import get_option
 
 
 def safe_urlencode(params, doseq=0):
@@ -48,14 +49,21 @@ def is_same_domain(url1, url2):
     return url1.netloc == url2.netloc
 
 
-def apply_access_control_headers(response):
+def apply_access_control_headers(response, project=None):
     """
     Provides the Access-Control headers to enable cross-site HTTP requests. You
     can find more information about these headers here:
     https://developer.mozilla.org/En/HTTP_access_control#Simple_requests
     """
-    if settings.ALLOW_ORIGIN:
-        response['Access-Control-Allow-Origin'] = settings.ALLOW_ORIGIN
+    origin = settings.ALLOW_ORIGIN or ''
+    if project:
+        optval = get_option('sentry:origins', project)
+        if optval:
+            origin = ('%s %s' % (origin, ' '.join(optval))).strip()
+
+    if origin:
+        response['Access-Control-Allow-Origin'] = origin
         response['Access-Control-Allow-Headers'] = 'X-Sentry-Auth'
         response['Access-Control-Allow-Methods'] = 'POST'
+
     return response
diff --git a/sentry/web/api.py b/sentry/web/api.py
index 9682350f4a..9718de4ae4 100644
--- a/sentry/web/api.py
+++ b/sentry/web/api.py
@@ -15,11 +15,10 @@ from django.views.decorators.http import require_http_methods
 
 from sentry.conf import settings
 from sentry.exceptions import InvalidData
-from sentry.coreapi import project_from_auth_vars, project_from_api_key_and_id, \
-  project_from_id, decode_and_decompress_data, safely_load_json_string, \
-  validate_data, insert_data_to_database, APIError, APIUnauthorized, \
-  extract_auth_vars
-from sentry.models import Group, GroupBookmark, Project, View, ProjectDomain
+from sentry.coreapi import project_from_auth_vars, project_from_id, \
+  decode_and_decompress_data, safely_load_json_string, validate_data, \
+  insert_data_to_database, APIError, APIUnauthorized, extract_auth_vars
+from sentry.models import Group, GroupBookmark, Project, View
 from sentry.utils import json
 from sentry.utils.http import is_same_domain, apply_access_control_headers
 from sentry.web.decorators import has_access
@@ -32,7 +31,7 @@ logger = logging.getLogger('sentry.api.http')
 
 @csrf_exempt
 @require_http_methods(['POST', 'OPTIONS'])
-def store(request):
+def store(request, project_id=None):
     """
     The primary endpoint for storing new events.
 
@@ -63,6 +62,18 @@ def store(request):
     """
     logger.debug('Inbound %r request from %r', request.method, request.META['REMOTE_ADDR'])
     client = '<unknown client>'
+    if project_id:
+        if project_id.isdigit():
+            lookup_kwargs = {'id': int(project_id)}
+        else:
+            lookup_kwargs = {'slug': project_id}
+        try:
+            project = Project.objects.get_from_cache(**lookup_kwargs)
+        except Project.DoesNotExist:
+            raise APIError('Project does not exist')
+    else:
+        project = None
+
     if request.method == 'POST':
         try:
             auth_vars = extract_auth_vars(request)
@@ -84,16 +95,17 @@ def store(request):
             referrer = request.META.get('HTTP_REFERER')
 
             if auth_vars:
-                project = project_from_auth_vars(auth_vars, data)
-            elif request.GET.get('api_key') and request.GET.get('project_id'):
-                # public requests only need referrer validation for CSRF
-                project = project_from_api_key_and_id(request.GET['api_key'], request.GET['project_id'])
-                if not ProjectDomain.test(project, referrer):
-                    raise APIUnauthorized()
-            elif request.GET.get('project_id') and request.user.is_authenticated() and \
-                 is_same_domain(request.build_absolute_uri(), referrer):
+                # We only require a signature if a referrer was not set
+                # (this is restricted via the CORS headers)
+                origin = request.META.get('HTTP_ORIGIN')
+
+                project = project_from_auth_vars(auth_vars, data,
+                    require_signature=bool(origin))
+
+            elif request.user.is_authenticated() and is_same_domain(request.build_absolute_uri(), referrer):
                 # authenticated users are simply trusted to provide the right id
                 project = project_from_id(request)
+
             else:
                 raise APIUnauthorized()
 
@@ -117,7 +129,7 @@ def store(request):
     else:
         # OPTIONS
         response = HttpResponse('')
-    return apply_access_control_headers(response)
+    return apply_access_control_headers(response, project)
 
 
 @csrf_exempt
diff --git a/sentry/web/decorators.py b/sentry/web/decorators.py
index d5cdddaad9..cb5be852c5 100644
--- a/sentry/web/decorators.py
+++ b/sentry/web/decorators.py
@@ -30,6 +30,11 @@ def has_access(group_or_func=None):
     def wrapped(func):
         @wraps(func)
         def _wrapped(request, project_id=None, *args, **kwargs):
+            # If we're asking for anything other than implied access, the user
+            # must be authenticated
+            if group_or_func and not request.user.is_authenticated():
+                return HttpResponseRedirect(get_login_url())
+
             # XXX: if project_id isn't set, should we only allow superuser?
             if project_id.isdigit():
                 lookup_kwargs = {'id': int(project_id)}
diff --git a/sentry/web/forms/__init__.py b/sentry/web/forms/__init__.py
index ba7c31be2a..5a760cdd2b 100644
--- a/sentry/web/forms/__init__.py
+++ b/sentry/web/forms/__init__.py
@@ -8,6 +8,8 @@ sentry.web.forms
 from django import forms
 from django.contrib.auth import authenticate
 from django.contrib.auth.models import User
+from django.core.validators import URLValidator
+from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.conf import settings
@@ -80,20 +82,26 @@ class NewProjectAdminForm(forms.ModelForm):
 class EditProjectForm(forms.ModelForm):
     public = forms.BooleanField(required=False, help_text=_('Allow anyone (even anonymous users) to view this project'))
     team = forms.ChoiceField(choices=())
+    origins = forms.CharField(widget=forms.Textarea(attrs={'placeholder': 'e.g. http://example.com', 'class': 'span8'}),
+        required=False)
+
+    _url_validator = URLValidator(verify_exists=False)
 
     class Meta:
         fields = ('name', 'public', 'team')
         model = Project
 
-    def __init__(self, request, team_list, *args, **kwargs):
-        super(EditProjectForm, self).__init__(*args, **kwargs)
+    def __init__(self, request, team_list, data, instance, *args, **kwargs):
+        super(EditProjectForm, self).__init__(data=data, instance=instance, *args, **kwargs)
         self.team_list = dict((t.pk, t) for t in team_list.itervalues())
         if not can_set_public_projects(request.user):
             del self.fields['public']
-        if len(team_list) == 1:
+        if len(team_list) == 1 and instance.team == team_list.values()[0]:
             del self.fields['team']
         else:
             self.fields['team'].choices = [(t.pk, t) for t in sorted(self.team_list.values(), key=lambda x: x.name)]
+            if not instance.team:
+                self.fields['team'].choices.insert(0, (None, '-' * 8))
             self.fields['team'].widget.choices = self.fields['team'].choices
 
     def clean_team(self):
@@ -103,6 +111,14 @@ class EditProjectForm(forms.ModelForm):
 
         return self.team_list[int(value)]
 
+    def clean_origins(self):
+        value = self.cleaned_data.get('origins')
+        if value:
+            values = filter(bool, (v.strip() for v in value.split('\n')))
+            for value in values:
+                self._url_validator(value)
+        return values
+
 
 class ReplayForm(forms.Form):
     url = forms.URLField(widget=forms.TextInput(attrs={'class': 'span8'}))
diff --git a/sentry/web/frontend/projects.py b/sentry/web/frontend/projects.py
index a0d9fc128c..9e768a239c 100644
--- a/sentry/web/frontend/projects.py
+++ b/sentry/web/frontend/projects.py
@@ -15,6 +15,7 @@ from sentry.models import TeamMember, MEMBER_OWNER, \
   ProjectKey, Team
 from sentry.permissions import can_create_projects, can_remove_project
 from sentry.plugins import plugins
+from sentry.plugins.helpers import set_option, get_option
 from sentry.web.decorators import login_required, has_access
 from sentry.web.forms import EditProjectForm, RemoveProjectForm
 from sentry.web.helpers import render_to_response, get_project_list, \
@@ -97,14 +98,19 @@ def manage_project(request, project):
 
     team_list = get_team_list(request.user)
 
-    form = EditProjectForm(request, team_list, request.POST or None, instance=project)
+    form = EditProjectForm(request, team_list, request.POST or None, instance=project, initial={
+        'origins': '\n'.join(get_option('sentry:origins', project) or []),
+    })
 
     if form.is_valid():
         project = form.save()
-
+        set_option('sentry:origins', form.cleaned_data.get('origins') or [], project)
         return HttpResponseRedirect(request.path + '?success=1')
 
-    member_list = [(tm, tm.user) for tm in project.team.member_set.select_related('user')]
+    if not project.team:
+        member_list = []
+    else:
+        member_list = [(tm, tm.user) for tm in project.team.member_set.select_related('user')]
 
     try:
         key = ProjectKey.objects.get(user=request.user, project=project)
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
index ce5f1eb3ab..688266063b 100644
--- a/sentry/web/urls.py
+++ b/sentry/web/urls.py
@@ -109,6 +109,7 @@ urlpatterns = patterns('',
 
     url(r'^api/store/$', api.store, name='sentry-api-store'),
     url(r'^api/notification/$', api.notification, name='sentry-api-notification'),
+    url(r'^api/(?P<project_id>[\w_-]+)/store/$', api.store, name='sentry-api-store'),
     url(r'^api/(?P<project_id>[\w_-]+)/poll/$', api.poll, name='sentry-api-poll'),
     url(r'^api/(?P<project_id>[\w_-]+)/resolve/$', api.resolve, name='sentry-api-resolve'),
     url(r'^api/(?P<project_id>[\w_-]+)/bookmark/$', api.bookmark, name='sentry-api-bookmark'),
diff --git a/tests/base.py b/tests/base.py
index 7ec8f3c22a..678b69768e 100644
--- a/tests/base.py
+++ b/tests/base.py
@@ -18,6 +18,8 @@ from django.db import DEFAULT_DB_ALIAS
 from django.test import TestCase, TransactionTestCase
 from django.test.client import Client
 
+from sentry.models import ProjectOption, Option
+
 
 class Settings(object):
     """
@@ -63,6 +65,8 @@ class BaseTestCase(object):
 
     def _pre_setup(self):
         cache.clear()
+        ProjectOption.objects.clear_cache()
+        Option.objects.clear_cache()
         super(BaseTestCase, self)._pre_setup()
 
     def _postWithKey(self, data, key=None):
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index 40925b79a7..06f91bda68 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -30,7 +30,7 @@ class SameDomainTestCase(TestCase):
 
 
 class AccessControlTestCase(TestCase):
-    
+
     def test_allow_origin_none(self):
         """If ALLOW_ORIGIN is None, the headers should not be added"""
         with self.Settings(SENTRY_ALLOW_ORIGIN=None):
@@ -41,7 +41,7 @@ class AccessControlTestCase(TestCase):
                              None)
             self.assertEqual(response.get('Access-Control-Allow-Methods', None),
                              None)
-    
+
     def test_allow_origin(self):
         with self.Settings(SENTRY_ALLOW_ORIGIN="http://foo.example"):
             response = apply_access_control_headers(HttpResponse())
@@ -51,3 +51,31 @@ class AccessControlTestCase(TestCase):
                              "X-Sentry-Auth")
             self.assertEqual(response.get('Access-Control-Allow-Methods', None),
                              "POST")
+
+    def test_allow_origin_project(self):
+        from sentry.models import Project, ProjectOption
+        project = Project.objects.get()
+        ProjectOption.objects.create(project=project, key='sentry:origins', value=['http://foo.example'])
+
+        with self.Settings(SENTRY_ALLOW_ORIGIN=None):
+            response = apply_access_control_headers(HttpResponse(), project)
+            self.assertEqual(response.get('Access-Control-Allow-Origin', None),
+                             "http://foo.example")
+            self.assertEqual(response.get('Access-Control-Allow-Headers', None),
+                             "X-Sentry-Auth")
+            self.assertEqual(response.get('Access-Control-Allow-Methods', None),
+                             "POST")
+
+    def test_allow_origin_project_and_setting(self):
+        from sentry.models import Project, ProjectOption
+        project = Project.objects.get()
+        ProjectOption.objects.create(project=project, key='sentry:origins', value=['http://foo.example'])
+
+        with self.Settings(SENTRY_ALLOW_ORIGIN='http://example.com'):
+            response = apply_access_control_headers(HttpResponse(), project)
+            self.assertEqual(response.get('Access-Control-Allow-Origin', None),
+                             "http://example.com http://foo.example")
+            self.assertEqual(response.get('Access-Control-Allow-Headers', None),
+                             "X-Sentry-Auth")
+            self.assertEqual(response.get('Access-Control-Allow-Methods', None),
+                             "POST")
