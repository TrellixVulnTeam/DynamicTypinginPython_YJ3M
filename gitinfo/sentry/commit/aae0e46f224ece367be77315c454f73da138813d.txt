commit aae0e46f224ece367be77315c454f73da138813d
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Mon Jan 13 12:25:24 2020 -0500

    fix(user-feedback): Escape content of certain User Feedback widget options (#16384)
    
    Sentry's User Feedback widget allows developers to customize some of the widget's messages by specifying parameters. However, it was discovered that certain options can be rendered as is in HTML. This implies that if a developer does not know that fact, and generates the content of these options with user input, it can lead to a XSS vector on the developer's web app.
    
    The customization options of the User Feedback widget is documented in https://docs.sentry.io/enriching-error-data/user-feedback/
    
    The affected options were: errorFormEntry, successMessage, and errorGeneric

diff --git a/src/sentry/templates/sentry/error-page-embed.js b/src/sentry/templates/sentry/error-page-embed.js
index 06b2eb2911..0f0dc59437 100644
--- a/src/sentry/templates/sentry/error-page-embed.js
+++ b/src/sentry/templates/sentry/error-page-embed.js
@@ -17,8 +17,21 @@
   var template = /*{{ template }}*/'';
   var endpoint = /*{{ endpoint }}*/'';
 
-  var GENERIC_ERROR = '<p class="message-error">' + strings.generic_error + '</p>';
-  var FORM_ERROR = '<p class="message-error">' + strings.form_error + '</p>';
+  var setChild = function(target, child) {
+    target.innerHTML = '';
+    target.appendChild(child);
+  };
+
+  var buildMessage = function(className, message) {
+    var p = document.createElement('p');
+    p.className = className;
+    p.appendChild(document.createTextNode(message));
+    return p;
+  };
+
+  var GENERIC_ERROR = buildMessage('message-error', strings.generic_error);
+  var FORM_ERROR = buildMessage('message-error', strings.form_error);
+  var FORM_SUCCESS = buildMessage('message-success', strings.sent_message);
 
   // XMLHttpRequest.DONE does not exist in all browsers
   var XHR_DONE = 4;
@@ -117,7 +130,7 @@
         } else if (xhr.status == 400) {
           self.onFormError(JSON.parse(xhr.responseText));
         } else {
-          self._errorWrapper.innerHTML = GENERIC_ERROR;
+          setChild(self._errorWrapper, GENERIC_ERROR);
         }
         self._submitInProgress = false;
       }
@@ -129,7 +142,7 @@
 
   SentryErrorEmbed.prototype.onSuccess = function() {
     this._errorWrapper.innerHTML = '';
-    this._formContent.innerHTML = '<p class="message-success">' + strings.sent_message + '</p>';
+    setChild(this._formContent, FORM_SUCCESS);
     this._submitBtn.parentNode.removeChild(this._submitBtn);
   };
 
@@ -145,7 +158,7 @@
         node.className = node.className.replace(/form-errors/, '');
       }
     }
-    this._errorWrapper.innerHTML = FORM_ERROR;
+    setChild(this._errorWrapper, FORM_ERROR);
   };
 
   SentryErrorEmbed.prototype.attach = function(parent) {
diff --git a/tests/sentry/web/frontend/test_error_page_embed.py b/tests/sentry/web/frontend/test_error_page_embed.py
index b5ccb91c15..2384f7a43e 100644
--- a/tests/sentry/web/frontend/test_error_page_embed.py
+++ b/tests/sentry/web/frontend/test_error_page_embed.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 from django.test import override_settings
-from six.moves.urllib.parse import quote
+from six.moves.urllib.parse import quote, urlencode
 from uuid import uuid4
 import logging
 
@@ -90,6 +90,43 @@ class ErrorPageEmbedTest(TestCase):
         self.assertTemplateUsed(resp, "sentry/error-page-embed.html")
         assert "Fermer" in resp.content  # Close
 
+    def test_xss(self):
+        user_feedback_options = {}
+
+        option_keys = [
+            "errorFormEntry",
+            "successMessage",
+            "errorGeneric",
+            "title",
+            "subtitle",
+            "subtitle2",
+            "labelName",
+            "labelEmail",
+            "labelComments",
+            "labelSubmit",
+            "labelClose",
+        ]
+        for key in option_keys:
+            user_feedback_options[key] = "<img src=x onerror=alert({0})>XSS_{0}".format(key)
+
+        user_feedback_options_qs = urlencode(user_feedback_options)
+        path_with_qs = "%s?eventId=%s&dsn=%s&%s" % (
+            self.path,
+            quote(self.event_id),
+            quote(self.key.dsn_public),
+            user_feedback_options_qs,
+        )
+        resp = self.client.get(
+            path_with_qs,
+            HTTP_REFERER="http://example.com",
+            HTTP_ACCEPT="text/html, text/javascript",
+        )
+        assert resp.status_code == 200, resp.content
+        self.assertTemplateUsed(resp, "sentry/error-page-embed.html")
+
+        for xss_payload in user_feedback_options.values():
+            assert xss_payload not in resp.content
+
     def test_submission(self):
         resp = self.client.post(
             self.path_with_qs,
