commit 596a993a926198f6fc239d15cd413da053cacd88
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Mar 7 05:55:07 2018 +0900

    feat(ui): Refresh "User Feedback" settings UI (#7386)

diff --git a/src/sentry/static/sentry/app/data/forms/userFeedback.jsx b/src/sentry/static/sentry/app/data/forms/userFeedback.jsx
index 95c6df14d9..a2277dd10e 100644
--- a/src/sentry/static/sentry/app/data/forms/userFeedback.jsx
+++ b/src/sentry/static/sentry/app/data/forms/userFeedback.jsx
@@ -15,6 +15,9 @@ const formGroups = [
         placeholder: 'e.g. secondary@example.com',
         help:
           'Show "powered by Sentry within the feedback dialog. We appreciate you helping get the word out about Sentry! <3',
+        getData: data => ({
+          options: data,
+        }),
       },
     ],
   },
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 79fabbb2a9..cd451c9a35 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -80,7 +80,6 @@ import ProjectIssueTracking from './views/projectIssueTracking';
 import ProjectReleases from './views/projectReleases';
 import ProjectSavedSearches from './views/projectSavedSearches';
 import ProjectSettings from './views/projectSettings';
-import ProjectUserReportSettings from './views/projectUserReportSettings';
 import ProjectUserReports from './views/projectUserReports';
 import ProjectPlugins from './views/projectPlugins';
 import ProjectPluginDetails from './views/projectPluginDetails';
@@ -335,7 +334,9 @@ const projectSettingsRoutes = (
     <Route
       path="user-feedback/"
       name="User Feedback"
-      component={errorHandler(ProjectUserReportSettings)}
+      componentPromise={() =>
+        import(/*webpackChunkName: "ProjectUserFeedbackSettings"*/ './views/settings/project/projectUserFeedback')}
+      component={errorHandler(LazyLoad)}
     />
     <Route
       key="csp/"
diff --git a/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx b/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
deleted file mode 100644
index a64c19f48d..0000000000
--- a/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
+++ /dev/null
@@ -1,358 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-
-import {FormState, BooleanField} from '../components/forms';
-import {t} from '../locale';
-import ApiMixin from '../mixins/apiMixin';
-import IndicatorStore from '../stores/indicatorStore';
-import LoadingIndicator from '../components/loadingIndicator';
-import SettingsPageHeader from './settings/components/settingsPageHeader';
-import TextBlock from './settings/components/text/textBlock';
-
-const ProjectFeedbackSettingsForm = createReactClass({
-  displayName: 'ProjectFeedbackSettingsForm',
-
-  propTypes: {
-    orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
-    initialData: PropTypes.object.isRequired,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    let formData = {};
-    // We only want to work with a certain set of project options here
-    for (let key of Object.keys(this.props.initialData)) {
-      if (key.lastIndexOf('feedback:') === 0) {
-        formData[key] = this.props.initialData[key];
-      }
-    }
-    return {
-      formData,
-      errors: {},
-    };
-  },
-
-  onFieldChange(name, value) {
-    let formData = this.state.formData;
-    formData[name] = value;
-    this.setState({
-      formData,
-    });
-  },
-
-  onSubmit(e) {
-    e.preventDefault();
-
-    if (this.state.state === FormState.SAVING) {
-      return;
-    }
-    this.setState(
-      {
-        state: FormState.SAVING,
-      },
-      () => {
-        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-        let {orgId, projectId} = this.props;
-        this.api.request(`/projects/${orgId}/${projectId}/`, {
-          method: 'PUT',
-          data: {options: this.state.formData},
-          success: data => {
-            this.setState({
-              state: FormState.READY,
-              errors: {},
-            });
-          },
-          error: error => {
-            this.setState({
-              state: FormState.ERROR,
-              errors: error.responseJSON,
-            });
-          },
-          complete: () => {
-            IndicatorStore.remove(loadingIndicator);
-          },
-        });
-      }
-    );
-  },
-
-  render() {
-    let isSaving = this.state.state === FormState.SAVING;
-    let errors = this.state.errors;
-    return (
-      <form onSubmit={this.onSubmit} className="form-stacked">
-        {this.state.state === FormState.ERROR && (
-          <div className="alert alert-error alert-block">
-            {t(
-              'Unable to save your changes. Please ensure all fields are valid and try again.'
-            )}
-          </div>
-        )}
-        <fieldset>
-          <BooleanField
-            key="branding"
-            name="branding"
-            label={t('Show Sentry Branding')}
-            help={t(
-              'Show "powered by Sentry" within the feedback dialog. We appreciate you helping get the word out about Sentry! <3'
-            )}
-            value={this.state.formData['feedback:branding']}
-            error={errors['feedback:branding']}
-            onChange={this.onFieldChange.bind(this, 'feedback:branding')}
-          />
-        </fieldset>
-        <fieldset className="form-actions">
-          <button type="submit" className="btn btn-primary" disabled={isSaving}>
-            {t('Save Changes')}
-          </button>
-        </fieldset>
-      </form>
-    );
-  },
-});
-
-const ProjectUserReportSettings = createReactClass({
-  displayName: 'ProjectUserReportSettings',
-
-  propTypes: {
-    setProjectNavSection: PropTypes.func,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      expected: 2,
-
-      keyList: [],
-      projectOptions: {},
-    };
-  },
-
-  componentWillMount() {
-    this.props.setProjectNavSection('settings');
-    this.fetchData();
-  },
-
-  componentDidMount() {
-    window.sentryEmbedCallback = function(embed) {
-      // Mock the embed's submit xhr to always be successful
-      // NOTE: this will not have errors if the form is empty
-      embed.submit = function(body) {
-        this._submitInProgress = true;
-        setTimeout(
-          function() {
-            this._submitInProgress = false;
-            this.onSuccess();
-          }.bind(this),
-          500
-        );
-      };
-    };
-  },
-
-  // TODO(dcramer): abstract this into a shared helper as its common for route handlers
-  componentWillReceiveProps(nextProps) {
-    let location = this.props.location;
-    let nextLocation = nextProps.location;
-    if (
-      location.pathname != nextLocation.pathname ||
-      location.search != nextLocation.search
-    ) {
-      this.remountComponent();
-    }
-  },
-
-  componentWillUnmount() {
-    window.sentryEmbedCallback = null;
-  },
-
-  remountComponent() {
-    this.setState(this.getInitialState(), this.fetchData);
-  },
-
-  fetchData() {
-    let {orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/keys/`, {
-      success: (data, _, jqXHR) => {
-        let expected = this.state.expected - 1;
-        this.setState({
-          expected,
-          loading: expected > 0,
-          keyList: data,
-        });
-      },
-      error: () => {
-        let expected = this.state.expected - 1;
-        this.setState({
-          error: true,
-          expected,
-          loading: expected > 0,
-        });
-      },
-    });
-
-    this.api.request(`/projects/${orgId}/${projectId}/`, {
-      success: (data, _, jqXHR) => {
-        let expected = this.state.expected - 1;
-        this.setState({
-          expected,
-          loading: expected > 0,
-          projectOptions: data.options,
-        });
-      },
-      error: () => {
-        let expected = this.state.expected - 1;
-        this.setState({
-          expected,
-          error: true,
-          loading: expected > 0,
-        });
-      },
-    });
-  },
-
-  getInstructions() {
-    let dsn = this.state.keyList.length
-      ? this.state.keyList[0].dsn.public
-      : 'https://public@sentry.example.com/1';
-
-    return (
-      '<!-- Sentry JS SDK 2.1.+ required -->\n' +
-      '<script src="https://cdn.ravenjs.com/2.1.0/raven.min.js"></script>\n\n' +
-      '{% if request.sentry.id %}\n' +
-      '  <script>\n' +
-      '  Raven.showReportDialog({\n' +
-      '    // grab the eventId generated by the Sentry SDK\n' +
-      "    eventId: '{{ request.sentry.id }}',\n\n" +
-      '    // use the public DSN (dont include your secret!)\n' +
-      "    dsn: '" +
-      dsn +
-      "'\n" +
-      '  });\n' +
-      '  </script>\n' +
-      '{% endif %}\n'
-    );
-  },
-
-  getBrowserJSInstructions() {
-    let dsn = this.state.keyList.length
-      ? this.state.keyList[0].dsn.public
-      : 'https://public@sentry.example.com/1';
-
-    return (
-      '<!-- Sentry JS SDK 2.1.+ required -->\n' +
-      '<script src="https://cdn.ravenjs.com/2.1.0/raven.min.js"></script>\n\n' +
-      '<script>\n' +
-      '// configure the SDK as you normally would\n' +
-      "Raven.config('" +
-      dsn +
-      "').install();\n\n" +
-      '/**\n' +
-      ' * Report a routing error to Sentry and show a feedback dialog to\n' +
-      ' * the user.\n' +
-      ' * \n' +
-      ' * > try {\n' +
-      ' * >   renderRoute()\n' +
-      ' * > } catch (err) {\n' +
-      ' * >   handleRouteError(err);\n' +
-      ' * > }\n' +
-      ' */\n' +
-      'function handleRouteError(err) {\n' +
-      '  Raven.captureException(err);\n' +
-      '  Raven.showReportDialog();\n' +
-      '};\n' +
-      '</script>\n'
-    );
-  },
-
-  handleClick() {
-    Raven.showReportDialog({
-      // should never make it to the Sentry API, but just in case, use throwaway id
-      eventId: '00000000000000000000000000000000',
-    });
-  },
-
-  renderLoading() {
-    return (
-      <div className="box">
-        <LoadingIndicator />
-      </div>
-    );
-  },
-
-  render() {
-    if (this.state.loading) return this.renderLoading();
-
-    let {orgId, projectId} = this.props.params;
-
-    return (
-      <div>
-        <SettingsPageHeader title={t('User Feedback')} />
-
-        <div className="alert alert-block alert-info">
-          {t(`Psst! This feature is still a work-in-progress. Thanks for being an early
-          adopter!`)}
-        </div>
-
-        <TextBlock>
-          {t(`Enabling User Feedback allows you to interact with your users on an
-          unprecedented level. Collect additional details about issues affecting them, and
-          more importantly reach out to them with resolutions.`)}
-        </TextBlock>
-        <TextBlock>
-          {t(`When configured, your users will be presented with a dialog prompting them for
-          additional information. That information will get attached to the issue in
-          Sentry`)}
-        </TextBlock>
-
-        <p>
-          <a className="btn btn-primary" onClick={this.handleClick}>
-            {t('See the report dialog in action')}
-          </a>
-        </p>
-
-        <div className="box">
-          <div className="box-header">
-            <h3>{t('Integration')}</h3>
-          </div>
-
-          <div className="box-content with-padding">
-            <TextBlock>
-              {t(`The following example uses our Django integration. Check the documentation
-              for the SDK you're using for more details.`)}
-            </TextBlock>
-            <pre>{this.getInstructions()}</pre>
-
-            <TextBlock>
-              {t(`If you're capturing an error with our Browser JS SDK, things get even
-              simpler:`)}
-            </TextBlock>
-
-            <pre>{this.getBrowserJSInstructions()}</pre>
-          </div>
-        </div>
-
-        <div className="box">
-          <div className="box-header">
-            <h3>{t('Settings')}</h3>
-          </div>
-          <div className="box-content with-padding">
-            <ProjectFeedbackSettingsForm
-              orgId={orgId}
-              projectId={projectId}
-              initialData={this.state.projectOptions}
-            />
-          </div>
-        </div>
-      </div>
-    );
-  },
-});
-
-export default ProjectUserReportSettings;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx b/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
new file mode 100644
index 0000000000..129f62ecdf
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
@@ -0,0 +1,189 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t} from '../../../locale';
+import AsyncView from '../../asyncView';
+import Button from '../../../components/buttons/button';
+import Form from '../components/forms/form';
+import JsonForm from '../components/forms/jsonForm';
+import Panel from '../components/panel';
+import PanelBody from '../components/panelBody';
+import PanelHeader from '../components/panelHeader';
+import SettingsPageHeader from '../components/settingsPageHeader';
+import TextBlock from '../components/text/textBlock';
+import formGroups from '../../../data/forms/userFeedback';
+
+const CodeBlock = styled.pre`
+  word-break: break-all;
+  white-space: pre-wrap;
+`;
+
+const TextBlockNoMargin = styled(TextBlock)`
+  margin-bottom: 0;
+`;
+
+class ProjectUserReportSettings extends AsyncView {
+  static propTypes = {
+    setProjectNavSection: PropTypes.func,
+  };
+
+  componentWillMount() {
+    super.componentWillMount();
+    this.props.setProjectNavSection('settings');
+  }
+
+  componentDidMount() {
+    window.sentryEmbedCallback = function(embed) {
+      // Mock the embed's submit xhr to always be successful
+      // NOTE: this will not have errors if the form is empty
+      embed.submit = function(body) {
+        this._submitInProgress = true;
+        setTimeout(
+          function() {
+            this._submitInProgress = false;
+            this.onSuccess();
+          }.bind(this),
+          500
+        );
+      };
+    };
+  }
+
+  componentWillUnmount() {
+    window.sentryEmbedCallback = null;
+  }
+
+  getEndpoints() {
+    let {orgId, projectId} = this.props.params;
+    return [
+      ['keyList', `/projects/${orgId}/${projectId}/keys/`],
+      ['project', `/projects/${orgId}/${projectId}/`],
+    ];
+  }
+
+  getInstructions() {
+    let dsn = this.state.keyList.length
+      ? this.state.keyList[0].dsn.public
+      : 'https://public@sentry.example.com/1';
+
+    return (
+      '<!-- Sentry JS SDK 2.1.+ required -->\n' +
+      '<script src="https://cdn.ravenjs.com/3.23.1/raven.min.js"></script>\n\n' +
+      '{% if request.sentry.id %}\n' +
+      '  <script>\n' +
+      '  Raven.showReportDialog({\n' +
+      '    // grab the eventId generated by the Sentry SDK\n' +
+      "    eventId: '{{ request.sentry.id }}',\n\n" +
+      '    // use the public DSN (dont include your secret!)\n' +
+      "    dsn: '" +
+      dsn +
+      "'\n" +
+      '  });\n' +
+      '  </script>\n' +
+      '{% endif %}\n'
+    );
+  }
+
+  getBrowserJSInstructions() {
+    let dsn = this.state.keyList.length
+      ? this.state.keyList[0].dsn.public
+      : 'https://public@sentry.example.com/1';
+
+    return (
+      '<!-- Sentry JS SDK 2.1.+ required -->\n' +
+      '<script src="https://cdn.ravenjs.com/2.1.0/raven.min.js"></script>\n\n' +
+      '<script>\n' +
+      '// configure the SDK as you normally would\n' +
+      "Raven.config('" +
+      dsn +
+      "').install();\n\n" +
+      '/**\n' +
+      ' * Report a routing error to Sentry and show a feedback dialog to\n' +
+      ' * the user.\n' +
+      ' * \n' +
+      ' * > try {\n' +
+      ' * >   renderRoute()\n' +
+      ' * > } catch (err) {\n' +
+      ' * >   handleRouteError(err);\n' +
+      ' * > }\n' +
+      ' */\n' +
+      'function handleRouteError(err) {\n' +
+      '  Raven.captureException(err);\n' +
+      '  Raven.showReportDialog();\n' +
+      '};\n' +
+      '</script>\n'
+    );
+  }
+
+  handleClick = () => {
+    Raven.showReportDialog({
+      // should never make it to the Sentry API, but just in case, use throwaway id
+      eventId: '00000000000000000000000000000000',
+    });
+  };
+
+  renderBody() {
+    let {orgId, projectId} = this.props.params;
+
+    return (
+      <div>
+        <SettingsPageHeader title={t('User Feedback')} />
+
+        <div className="alert alert-block alert-info">
+          {t(
+            'Psst! This feature is still a work-in-progress. Thanks for being an early adopter!'
+          )}
+        </div>
+
+        <TextBlock>
+          {t(
+            'Enabling User Feedback allows you to interact with your users on an unprecedented level. Collect additional details about issues affecting them, and more importantly reach out to them with resolutions.'
+          )}
+        </TextBlock>
+        <TextBlock>
+          {t(
+            'When configured, your users will be presented with a dialog prompting them for additional information. That information will get attached to the issue in Sentry'
+          )}
+        </TextBlock>
+
+        <TextBlock>
+          <Button priority="primary" onClick={this.handleClick}>
+            {t('See the report dialog in action')}
+          </Button>
+        </TextBlock>
+
+        <Panel>
+          <PanelHeader>{t('Integration')}</PanelHeader>
+
+          <PanelBody disablePadding={false}>
+            <TextBlockNoMargin>
+              {t(
+                "The following example uses our Django integration. Check the documentation for the SDK you're using for more details."
+              )}
+            </TextBlockNoMargin>
+            <CodeBlock>{this.getInstructions()}</CodeBlock>
+
+            <TextBlockNoMargin css={{marginTop: 30}}>
+              {t(
+                "If you're capturing an error with our Browser JS SDK, things get even simpler"
+              )}
+            </TextBlockNoMargin>
+            <CodeBlock>{this.getBrowserJSInstructions()}</CodeBlock>
+          </PanelBody>
+        </Panel>
+
+        <Form
+          saveOnBlur
+          apiMethod="PUT"
+          apiEndpoint={`/projects/${orgId}/${projectId}/`}
+          initialData={this.state.project.options}
+        >
+          <JsonForm forms={formGroups} />
+        </Form>
+      </div>
+    );
+  }
+}
+
+export default ProjectUserReportSettings;
diff --git a/tests/js/spec/views/projectUserFeedback.spec.jsx b/tests/js/spec/views/projectUserFeedback.spec.jsx
new file mode 100644
index 0000000000..3c223ce355
--- /dev/null
+++ b/tests/js/spec/views/projectUserFeedback.spec.jsx
@@ -0,0 +1,56 @@
+import React from 'react';
+
+import {mount} from 'enzyme';
+import ProjectUserFeedback from 'app/views/settings/project/projectUserFeedback';
+
+describe('ProjectUserFeedback', function() {
+  let org = TestStubs.Organization();
+  let project = TestStubs.Project();
+  let url = `/projects/${org.slug}/${project.slug}/`;
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/`,
+      method: 'GET',
+      body: TestStubs.Project(),
+    });
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/keys/`,
+      method: 'GET',
+      body: [],
+    });
+  });
+
+  it('can toggle sentry branding option', function() {
+    let wrapper = mount(
+      <ProjectUserFeedback
+        organization={org}
+        project={project}
+        setProjectNavSection={() => {}}
+        params={{orgId: org.slug, projectId: project.slug}}
+      />,
+      TestStubs.routerContext()
+    );
+
+    let mock = MockApiClient.addMockResponse({
+      url,
+      method: 'PUT',
+    });
+
+    expect(mock).not.toHaveBeenCalled();
+
+    // Click Regenerate Token
+    wrapper.find('Switch').simulate('click');
+
+    expect(mock).toHaveBeenCalledWith(
+      url,
+      expect.objectContaining({
+        method: 'PUT',
+        data: {
+          options: {'feedback:branding': true},
+        },
+      })
+    );
+  });
+});
