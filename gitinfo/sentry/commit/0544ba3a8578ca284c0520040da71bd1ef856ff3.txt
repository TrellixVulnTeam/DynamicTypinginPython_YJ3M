commit 0544ba3a8578ca284c0520040da71bd1ef856ff3
Author: Jan Michael Auer <account@jauer.org>
Date:   Wed Apr 17 14:15:30 2019 +0200

    fix(unreal): Extract better portable callstacks (#12812)

diff --git a/src/sentry/lang/native/unreal.py b/src/sentry/lang/native/unreal.py
index 0a10f19b3d..b28143ca15 100644
--- a/src/sentry/lang/native/unreal.py
+++ b/src/sentry/lang/native/unreal.py
@@ -6,8 +6,14 @@ from sentry.utils.safe import set_path, setdefault_path, get_path
 
 import re
 
-_portable_callstack_regexp = re.compile(
-    r'(?P<package>[\w]+) (?P<baseaddr>0x[\da-fA-F]+) \+ (?P<offset>[\da-fA-F]+)')
+_portable_callstack_regexp = re.compile(r'''(?x)
+    (?:^|\s)
+    (?P<package>[^\s]+)
+    \s
+    (?P<baseaddr>0x[\da-fA-F]+)
+    \s\+\s
+    (?P<offset>[\da-fA-F]+)
+''')
 
 
 def process_unreal_crash(payload, user_id, environment, event):
@@ -84,6 +90,40 @@ def merge_apple_crash_report(apple_crash_report, event):
     event.setdefault('debug_meta', {})['images'] = images
 
 
+def parse_portable_callstack(portable_callstack, images):
+    frames = []
+    for match in _portable_callstack_regexp.finditer(portable_callstack):
+        baseaddr = int(match.group('baseaddr'), 16)
+        offset = int(match.group('offset'), 16)
+        # Crashes without PDB in the client report: 0x00000000ffffffff + ffffffff
+        if baseaddr == 0xffffffff and offset == 0xffffffff:
+            continue
+
+        package_re = re.escape(match.group('package')) + r"(\.dll|\.exe)?$"
+        image = next((
+            image for image in images
+            if image.get('code_file')
+            and re.search(package_re, image['code_file'], re.IGNORECASE)
+        ), {})
+
+        # baseaddr reported in the pcallstack missing most relevant bits:
+        # i.e: 0x0000000080db0000
+        # The image address should be used instead with the offset:
+        image_addr = image.get('image_addr')
+        if image_addr:
+            # Rebase with the image address if available.
+            baseaddr = int(image_addr, 16)
+
+        frames.append({
+            'package': image.get('code_file') or match.group('package'),
+            'instruction_addr': hex(baseaddr + offset),
+            'trust': 'prewalked',
+        })
+
+    frames.reverse()
+    return frames
+
+
 def merge_unreal_context_event(unreal_context, event, project):
     """Merges the context from an Unreal Engine 4 crash
     with the given event."""
@@ -130,35 +170,8 @@ def merge_unreal_context_event(unreal_context, event, project):
                for thread in event.get('threads', [])):
         portable_callstack = runtime_prop.pop('portable_call_stack', None)
         if portable_callstack is not None:
-            frames = []
             images = get_path(event, 'debug_meta', 'images', filter=True, default=())
-            for match in _portable_callstack_regexp.finditer(portable_callstack):
-                baseaddr = int(match.group('baseaddr'), 16)
-                offset = int(match.group('offset'), 16)
-                # Crashes without PDB in the client report: 0x00000000ffffffff + ffffffff
-                if baseaddr == 0xffffffff and offset == 0xffffffff:
-                    continue
-
-                my_regex = re.escape(match.group('package')) + r"(\.dll|\.exe)?$"
-
-                # baseaddr reported in the pcallstack missing most relevant bits:
-                # i.e: 0x0000000080db0000
-                # The image address should be used instead with the offset:
-                it = next(
-                    (image for image in images if image.get('code_file') is not None and re.search(
-                        my_regex, image.get('code_file'), re.IGNORECASE)), {})
-
-                image_addr = it.get('image_addr')
-                if image_addr:
-                    # Rebase with the image address if available.
-                    baseaddr = int(image_addr, 16)
-
-                frames.append({
-                    'package': match.group('package'),
-                    'instruction_addr': hex(baseaddr + offset),
-                })
-
-            frames.reverse()
+            frames = parse_portable_callstack(portable_callstack, images)
 
             if len(frames) > 0:
                 event['stacktrace'] = {
diff --git a/tests/sentry/lang/native/snapshots/UnrealIntegrationTest/test_merge_unreal_context_event.pysnap b/tests/sentry/lang/native/snapshots/UnrealIntegrationTest/test_merge_unreal_context_event.pysnap
index 5827a917af..a4697670e6 100644
--- a/tests/sentry/lang/native/snapshots/UnrealIntegrationTest/test_merge_unreal_context_event.pysnap
+++ b/tests/sentry/lang/native/snapshots/UnrealIntegrationTest/test_merge_unreal_context_event.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-21T12:20:37.810590Z'
+created: '2019-04-17T10:59:28.715639Z'
 creator: sentry
 source: tests/sentry/lang/native/test_unreal.py
 ---
@@ -92,44 +92,64 @@ stacktrace:
   frames:
   - instruction_addr: '0x100d1471'
     package: ntdll
+    trust: prewalked
   - instruction_addr: '0xfd53034'
     package: KERNEL32
+    trust: prewalked
   - instruction_addr: '0x589c73c6'
     package: YetAnother
+    trust: prewalked
   - instruction_addr: '0x548229e6'
     package: YetAnother
+    trust: prewalked
   - instruction_addr: '0x54814eaa'
     package: YetAnother
+    trust: prewalked
   - instruction_addr: '0x54814e4c'
     package: YetAnother
+    trust: prewalked
   - instruction_addr: '0x54805258'
     package: YetAnother
+    trust: prewalked
   - instruction_addr: '0x571fcd39'
     package: YetAnother
+    trust: prewalked
   - instruction_addr: '0x5739984f'
     package: YetAnother
+    trust: prewalked
   - instruction_addr: '0x5739082f'
     package: YetAnother
+    trust: prewalked
   - instruction_addr: '0x57aafb58'
     package: YetAnother
+    trust: prewalked
   - instruction_addr: '0x57aa121d'
     package: YetAnother
+    trust: prewalked
   - instruction_addr: '0x54d8cf00'
     package: YetAnother
+    trust: prewalked
   - instruction_addr: '0x54d8cc56'
     package: YetAnother
+    trust: prewalked
   - instruction_addr: '0x57a56186'
     package: YetAnother
+    trust: prewalked
   - instruction_addr: '0x57a3e77e'
     package: YetAnother
+    trust: prewalked
   - instruction_addr: '0x56f2f984'
     package: YetAnother
+    trust: prewalked
   - instruction_addr: '0x56f06dd3'
     package: YetAnother
+    trust: prewalked
   - instruction_addr: '0x56cff2ee'
     package: YetAnother
+    trust: prewalked
   - instruction_addr: '0x54be3394'
     package: YetAnother
+    trust: prewalked
 tags:
   epic_account_id: 2e7d369327054a448be6c8d3601213cb
   machine_id: C52DC39D-DAF3-5E36-A8D3-BF5F53A5D38F
diff --git a/tests/sentry/lang/native/snapshots/test_unreal/test_parse_portable_callstack.pysnap b/tests/sentry/lang/native/snapshots/test_unreal/test_parse_portable_callstack.pysnap
new file mode 100644
index 0000000000..675cb21c4a
--- /dev/null
+++ b/tests/sentry/lang/native/snapshots/test_unreal/test_parse_portable_callstack.pysnap
@@ -0,0 +1,20 @@
+---
+created: '2019-04-17T11:13:04.279532Z'
+creator: sentry
+source: tests/sentry/lang/native/test_unreal.py
+---
+- instruction_addr: '0x7ff8b7293691'
+  package: C:\Windows\System32\ntdll.dll
+  trust: prewalked
+- instruction_addr: '0x7ff8b5aa3034'
+  package: C:\Windows\System32\kernel32.dll
+  trust: prewalked
+- instruction_addr: '0x7ff84e1e0a28'
+  package: C:\Unreal\UE4Editor-Renderer.dll
+  trust: prewalked
+- instruction_addr: '0x7ff84e1e3ee2'
+  package: C:\Unreal\UE4Editor-Renderer.dll
+  trust: prewalked
+- instruction_addr: '0x7ff881116998'
+  package: C:\Unreal\UE4Editor-ShaderCore.dll
+  trust: prewalked
diff --git a/tests/sentry/lang/native/test_unreal.py b/tests/sentry/lang/native/test_unreal.py
index d5a9545f3b..015fafff5f 100644
--- a/tests/sentry/lang/native/test_unreal.py
+++ b/tests/sentry/lang/native/test_unreal.py
@@ -8,7 +8,9 @@ from django.core.files.uploadedfile import SimpleUploadedFile
 
 from sentry.testutils import TestCase
 from sentry.lang.native.minidump import MINIDUMP_ATTACHMENT_TYPE
-from sentry.lang.native.unreal import process_unreal_crash, unreal_attachment_type, merge_unreal_context_event, merge_unreal_logs_event, merge_apple_crash_report
+from sentry.lang.native.unreal import process_unreal_crash, unreal_attachment_type, \
+    merge_unreal_context_event, merge_unreal_logs_event, merge_apple_crash_report, \
+    parse_portable_callstack
 from sentry.models import Event, EventAttachment, UserReport
 
 
@@ -212,3 +214,55 @@ class UnrealIntegrationTest(TestCase):
         assert log.name == 'YetAnother.log'  # Log file is named after the project
         assert log.file.type == 'event.attachment'
         assert log.file.checksum == '24d1c5f75334cd0912cc2670168d593d5fe6c081'
+
+
+def test_parse_portable_callstack(insta_snapshot):
+    portable_callstack = (
+        'UE4Editor-ShaderCore 0x0000000081060000 + b6998 '
+        'UE4Editor-Renderer 0x000000004da80000 + 763ee2 '
+        'UE4Editor-Renderer 0x000000004da80000 + 760a28 '
+        'KERNEL32 0x00000000b5a90000 + 13034 '
+        'ntdll 0x00000000b7220000 + 73691'
+    )
+
+    images = [
+        {
+            "code_file": "C:\\Unreal\\UE4Editor-ShaderCore.dll",
+            "code_id": "5CB4A59512a000",
+            "image_addr": "0x7ff881060000",
+            "debug_file": "UE4Editor-ShaderCore.pdb",
+            "image_size": 1220608,
+            "type": "pe",
+            "debug_id": "19978799-526a-4d94-a18d-4a18ea7e989f-1"
+        },
+        {
+            "code_file": "C:\\Unreal\\UE4Editor-Renderer.dll",
+            "code_id": "5CB4A5A6e77000",
+            "image_addr": "0x7ff84da80000",
+            "debug_file": "UE4Editor-Renderer.pdb",
+            "image_size": 15167488,
+            "type": "pe",
+            "debug_id": "70bad0d5-0da7-459c-b854-0bb41a753eac-1"
+        },
+        {
+            "code_file": "C:\\Windows\\System32\\kernel32.dll",
+            "code_id": "5F488A51b2000",
+            "image_addr": "0x7ff8b5a90000",
+            "debug_file": "kernel32.pdb",
+            "image_size": 729088,
+            "type": "pe",
+            "debug_id": "63816243-ec70-4dc0-91bc-31470bac48a3-1"
+        },
+        {
+            "code_file": "C:\\Windows\\System32\\ntdll.dll",
+            "code_id": "7E614C221e1000",
+            "image_addr": "0x7ff8b7220000",
+            "debug_file": "ntdll.pdb",
+            "image_size": 1970176,
+            "type": "pe",
+            "debug_id": "338c83b3-1707-66b1-728d-0b2ff2f39588-1"
+        },
+    ]
+
+    frames = parse_portable_callstack(portable_callstack, images)
+    insta_snapshot(frames)
