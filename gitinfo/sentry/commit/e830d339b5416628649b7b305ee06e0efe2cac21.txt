commit e830d339b5416628649b7b305ee06e0efe2cac21
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jul 8 13:23:01 2016 -0700

    Ensure password-less users can change email
    
    @getsentry/infrastructure

diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index f3c57472fb..1b9deee539 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -264,10 +264,11 @@ class AccountSettingsForm(forms.Form):
         self.user = user
         super(AccountSettingsForm, self).__init__(*args, **kwargs)
 
+        needs_password = user.has_usable_password()
+
         if self.user.is_managed:
             # username and password always managed, email and
             # name optionally managed
-            needs_password = True
             for field in ('email', 'name', 'username'):
                 if field == 'username' or field in settings.SENTRY_MANAGED_USER_FIELDS:
                     self.fields[field] = ReadOnlyTextField(label=self.fields[field].label)
@@ -275,13 +276,14 @@ class AccountSettingsForm(forms.Form):
                     needs_password = False
 
             del self.fields['new_password']
-            if not needs_password:
-                del self.fields['password']
 
         # don't show username field if its the same as their email address
         if self.user.email == self.user.username:
             del self.fields['username']
 
+        if not needs_password:
+            del self.fields['password']
+
     def is_readonly(self):
         if self.user.is_managed:
             return set(('email', 'name')) == set(settings.SENTRY_MANAGED_USER_FIELDS)
@@ -309,15 +311,12 @@ class AccountSettingsForm(forms.Form):
         value = self.cleaned_data.get('password')
         if value and not self.user.check_password(value):
             raise forms.ValidationError('The password you entered is not correct.')
-        return value
-
-    def clean(self):
-        if not self.cleaned_data.get('password') and (
-            self.cleaned_data.get('email', self.user.email) != self.user.email or
-            self.cleaned_data.get('new_password')
+        elif not value and (
+            self.cleaned_data.get('email', self.user.email) != self.user.email
+            or self.cleaned_data.get('new_password')
         ):
             raise forms.ValidationError('You must confirm your current password to make changes.')
-        return self.cleaned_data
+        return value
 
     def save(self, commit=True):
         if self.cleaned_data.get('new_password'):
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index 1d03c414e1..74f1f3f93c 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -148,6 +148,19 @@ class SettingsTest(TestCase):
         user = User.objects.get(id=self.user.id)
         assert user.email == 'bizbaz@example.com'
 
+    def test_can_change_email_without_set_password(self):
+        self.login_as(self.user)
+
+        self.user.update(password='')
+
+        params = self.params()
+        params['email'] = 'bizbaz@example.com'
+
+        resp = self.client.post(self.path, params)
+        assert resp.status_code == 302
+        user = User.objects.get(id=self.user.id)
+        assert user.email == 'bizbaz@example.com'
+
     def test_cannot_change_email_with_invalid_password(self):
         self.login_as(self.user)
 
