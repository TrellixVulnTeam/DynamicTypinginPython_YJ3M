commit 7707fe2fa54bc8be2e6f151e1be041af620f4ada
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Wed Feb 7 16:18:56 2018 -0800

    feat(projects): Only show project name in project selector (internal-only)

diff --git a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
index b37dc63b3d..5362d28712 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
@@ -75,6 +75,7 @@ const ProjectSelector = createReactClass({
   getProjectState(state) {
     state = state || this.state;
     let org = this.props.organization;
+    let features = new Set(org.features);
     let filter = state.filter.toLowerCase();
     let projectList = [];
 
@@ -91,9 +92,15 @@ const ProjectSelector = createReactClass({
         activeProject = project;
         activeTeam = project.team;
       }
-      let fullName = [team.name, project.name, team.slug, project.slug]
-        .join(' ')
-        .toLowerCase();
+
+      let fullName;
+      if (features.has('internal-catchall')) {
+        fullName = [project.name, project.slug];
+      } else {
+        fullName = [team.name, project.name, team.slug, project.slug];
+      }
+      fullName = fullName.join(' ').toLowerCase();
+
       if (filter && fullName.indexOf(filter) === -1) {
         return;
       }
@@ -215,7 +222,13 @@ const ProjectSelector = createReactClass({
 
   getProjectLabel(team, project, hasSingleTeam, highlightText) {
     let label, text;
-    if (!hasSingleTeam && project.name.indexOf(team.name) === -1) {
+    let features = new Set(this.props.organization.features);
+
+    if (
+      !hasSingleTeam &&
+      project.name.indexOf(team.name) === -1 &&
+      !features.has('internal-catchall')
+    ) {
       label = (
         <span>
           {team.name} /{' '}
@@ -304,12 +317,20 @@ const ProjectSelector = createReactClass({
 
   render() {
     let org = this.props.organization;
+    let features = new Set(org.features);
     let access = new Set(org.access);
     let hasSingleTeam = org.teams.length === 1;
 
-    let projectList = sortArray(this.state.projectList, ([team, project]) => {
-      return [!project.isBookmarked, team.name, project.name];
-    });
+    let projectList;
+    if (features.has('internal-catchall')) {
+      projectList = sortArray(this.state.projectList, ([team, project]) => {
+        return [!project.isBookmarked, project.name];
+      });
+    } else {
+      projectList = sortArray(this.state.projectList, ([team, project]) => {
+        return [!project.isBookmarked, team.name, project.name];
+      });
+    }
 
     let children = projectList.map(([team, project], index) => {
       return this.getProjectNode(
