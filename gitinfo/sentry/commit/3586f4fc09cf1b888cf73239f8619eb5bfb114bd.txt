commit 3586f4fc09cf1b888cf73239f8619eb5bfb114bd
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Sep 25 14:09:39 2011 -0700

    Some initial work on project permissions

diff --git a/sentry/models.py b/sentry/models.py
index 477d7c4f86..96fe2759a9 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -92,8 +92,8 @@ class Project(Model):
     date_added      = models.DateTimeField(default=datetime.now)
 
 class ProjectMember(Model):
-    project         = models.ForeignKey(Project)
-    user            = models.ForeignKey(User)
+    project         = models.ForeignKey(Project, related_name="member_set")
+    user            = models.ForeignKey(User, related_name="project_set")
     permissions     = BitField(flags=(
         'read_message',
         'change_message_status',
diff --git a/sentry/web/views.py b/sentry/web/views.py
index 6ba7bee86c..ce8e6b10d5 100644
--- a/sentry/web/views.py
+++ b/sentry/web/views.py
@@ -17,6 +17,7 @@ import zlib
 from django.conf import settings as dj_settings
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse, resolve
+from django.db.models import Q
 from django.http import HttpResponse, HttpResponseBadRequest, \
     HttpResponseForbidden, HttpResponseRedirect, Http404, HttpResponseNotModified, \
     HttpResponseNotAllowed, HttpResponseGone
@@ -26,7 +27,7 @@ from django.utils.encoding import smart_str
 from django.views.decorators.csrf import csrf_protect, csrf_exempt
 
 from sentry.conf import settings
-from sentry.models import GroupedMessage, Message
+from sentry.models import GroupedMessage, Message, Project
 from sentry.plugins import GroupActionProvider
 from sentry.templatetags.sentry_helpers import with_priority
 from sentry.utils import get_filters, is_float, get_signature, parse_auth_header, json
@@ -35,6 +36,15 @@ from sentry.utils.stacks import get_template_info
 
 uuid_re = re.compile(r'^[a-z0-9]{32}$')
 
+def get_project_list(user=None):
+    """
+    Returns a set of all projects a user has some level of access to.
+    """
+    projects = set(Project.objects.filter(public=True))
+    if user.is_authenticated():
+        projects.update(set(Project.objects.filter(member_set__user=user)))
+    return projects
+
 _LOGIN_URL = None
 def get_login_url(reset=False):
     global _LOGIN_URL
@@ -185,7 +195,9 @@ def index(request):
     except (TypeError, ValueError):
         page = 1
 
-    message_list = GroupedMessage.objects.all()
+    projects = get_project_list(request.user)
+
+    message_list = GroupedMessage.objects.filter(Q(projects__in=projects) | Q(project__isnull=True))
 
     sort = request.GET.get('sort')
     if sort == 'date':
@@ -232,7 +244,9 @@ def ajax_handler(request):
         for filter_ in get_filters():
             filters.append(filter_(request))
 
-        message_list = GroupedMessage.objects.all()
+        projects = get_project_list(request.user)
+
+        message_list = GroupedMessage.objects.filter(Q(projects__in=projects) | Q(project__isnull=True))
 
         sort = request.GET.get('sort')
         if sort == 'date':
@@ -278,6 +292,9 @@ def ajax_handler(request):
         except GroupedMessage.DoesNotExist:
             return HttpResponseForbidden()
 
+        if group.project and group.project not in get_project_list(request.user):
+            return HttpResponseForbidden()
+
         GroupedMessage.objects.filter(pk=group.pk).update(status=1)
         group.status = 1
 
@@ -298,7 +315,11 @@ def ajax_handler(request):
         return response
 
     def clear(request):
-        GroupedMessage.objects.all().update(status=1)
+        projects = get_project_list(request.user)
+
+        message_list = GroupedMessage.objects.filter(Q(projects__in=projects) | Q(project__isnull=True))
+
+        message_list.update(status=1)
 
         if not request.is_ajax():
             return HttpResponseRedirect(request.META.get('HTTP_REFERER') or reverse('sentry'))
@@ -317,6 +338,10 @@ def ajax_handler(request):
             group = GroupedMessage.objects.get(pk=gid)
         except GroupedMessage.DoesNotExist:
             return HttpResponseForbidden()
+
+        if group.project and group.project not in get_project_list(request.user):
+            return HttpResponseForbidden()
+
         data = GroupedMessage.objects.get_chart_data(group)
 
         response = HttpResponse(json.dumps(data))
@@ -332,6 +357,9 @@ def ajax_handler(request):
 def group(request, group_id):
     group = get_object_or_404(GroupedMessage, pk=group_id)
 
+    if group.project and group.project not in get_project_list(request.user):
+        return HttpResponseForbidden()
+
     try:
         obj = group.message_set.all().order_by('-id')[0]
     except IndexError:
@@ -399,6 +427,9 @@ def group(request, group_id):
 def group_message_list(request, group_id):
     group = get_object_or_404(GroupedMessage, pk=group_id)
 
+    if group.project and group.project not in get_project_list(request.user):
+        return HttpResponseForbidden()
+
     message_list = group.message_set.all().order_by('-datetime')
 
     return render_to_response('sentry/group/message_list.html', {
@@ -412,6 +443,9 @@ def group_message_list(request, group_id):
 def group_message_details(request, group_id, message_id):
     group = get_object_or_404(GroupedMessage, pk=group_id)
 
+    if group.project and group.project not in get_project_list(request.user):
+            return HttpResponseForbidden()
+
     message = get_object_or_404(group.message_set, pk=message_id)
 
     # template information
