commit 3bedfbe6ed3d2fcf5f4799d9150b5d5f6fabd98c
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Jul 6 13:08:47 2018 -0700

    feat(discover): Improve validation of order by clause (#8946)
    
    Changes default orderby clause to timestamp desc
    
    This attempts to better handle orderby validation when there is an aggregation present by showing only the valid orderby options in the dropdown as well as automatically updating the orderby field to something valid.

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index d14d71a2a0..ecbd94ef86 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -68,6 +68,31 @@ export default class OrganizationDiscover extends React.Component {
     );
   };
 
+  getOrderbyOptions = () => {
+    const {queryBuilder} = this.props;
+    const columns = queryBuilder.getColumns();
+    const query = queryBuilder.getInternal();
+
+    // If there are aggregations, only allow summarized fields in orderby
+    const hasAggregations = query.aggregations.length > 0;
+    const hasFields = query.fields.length > 0;
+
+    return columns.reduce((acc, {name}) => {
+      if (hasAggregations) {
+        const isInvalidField = hasFields && !query.fields.includes(name);
+        if (!hasFields || isInvalidField) {
+          return acc;
+        }
+      }
+
+      return [
+        ...acc,
+        {value: name, label: `${name} asc`},
+        {value: `-${name}`, label: `${name} desc`},
+      ];
+    }, []);
+  };
+
   render() {
     const {result} = this.state;
     const {queryBuilder} = this.props;
@@ -80,14 +105,6 @@ export default class OrganizationDiscover extends React.Component {
       label: name,
     }));
 
-    const orderbyOptions = columns.reduce((acc, {name}) => {
-      return [
-        ...acc,
-        {value: name, label: `${name} asc`},
-        {value: `-${name}`, label: `${name} desc`},
-      ];
-    }, []);
-
     return (
       <div className="organization-home">
         <Header
@@ -131,7 +148,7 @@ export default class OrganizationDiscover extends React.Component {
             <SelectField
               name="orderby"
               label={t('Order By')}
-              options={orderbyOptions}
+              options={this.getOrderbyOptions()}
               value={query.orderby}
               onChange={val => this.updateField('orderby', val)}
             />
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
index 86c461d897..ae791cf53f 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
@@ -16,7 +16,7 @@ const DEFAULTS = {
     .subtract(14, 'days')
     .format(DATE_TIME_FORMAT),
   end: moment().format(DATE_TIME_FORMAT),
-  orderby: '-event_id',
+  orderby: '-timestamp',
   limit: 1000,
 };
 
@@ -74,7 +74,7 @@ export default function createQueryBuilder(initial = {}, organization) {
     // Default to all projects if none is selected
     const projects = query.projects.length ? query.projects : defaultProjects;
 
-    // Default to all fields if there are none selected, and no aggregation or groupby is specified
+    // Default to all fields if there are none selected, and no aggregation is specified
     const useDefaultFields =
       !query.fields.length && !query.aggregations.length && !query.groupby;
 
@@ -95,9 +95,26 @@ export default function createQueryBuilder(initial = {}, organization) {
   function updateField(field, value) {
     query[field] = value;
 
-    // If an aggregation is added, we need to remove the orderby parameter if it's not in the selected fields
-    if (field === 'aggregations' && value.length > 0) {
-      query.orderby = null;
+    // If there are aggregations, we need to remove or update the orderby parameter
+    // if it's not in the list of selected fields
+    const hasAggregations = query.aggregations.length > 0;
+    const hasFields = query.fields.length > 0;
+    const orderbyField = (query.orderby || '').replace(/^-/, '');
+    const hasOrderFieldInFields = query.fields.includes(orderbyField);
+
+    if (hasAggregations) {
+      // Check for invalid order by parameter
+      if (hasFields && !hasOrderFieldInFields) {
+        query.orderby = query.fields ? query.fields[0] : null;
+      }
+
+      // Disable orderby for aggregations without any summarize fields
+      if (!hasFields) {
+        query.orderby = null;
+      }
+    }
+
+    if (!query.orderby) {
       query.limit = null;
     }
   }
diff --git a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
index 8a5a65400f..121b5d3cc8 100644
--- a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
@@ -12,7 +12,7 @@ describe('Query Builder', function() {
     expect(external.fields).toEqual(['event_id', 'timestamp']);
     expect(external.conditions).toHaveLength(0);
     expect(external.aggregations).toHaveLength(0);
-    expect(external.orderby).toBe('-event_id');
+    expect(external.orderby).toBe('-timestamp');
     expect(external.limit).toBe(1000);
   });
 
@@ -78,4 +78,39 @@ describe('Query Builder', function() {
       });
     });
   });
+
+  describe('updateField()', function() {
+    let queryBuilder;
+    beforeEach(function() {
+      queryBuilder = createQueryBuilder(
+        {},
+        TestStubs.Organization({projects: [TestStubs.Project()]})
+      );
+    });
+
+    it('updates field', function() {
+      queryBuilder.updateField('projects', [5]);
+      queryBuilder.updateField('conditions', [['event_id', '=', 'event1']]);
+
+      const query = queryBuilder.getInternal();
+      expect(query.conditions).toEqual([['event_id', '=', 'event1']]);
+    });
+
+    it('updates orderby if there is an aggregation and value is not a summarized field', function() {
+      queryBuilder.updateField('fields', ['environment']);
+      queryBuilder.updateField('aggregations', [['count', null, 'count']]);
+
+      const query = queryBuilder.getInternal();
+      expect(query.orderby).toEqual('environment');
+    });
+
+    it('removes orderby and limit if there is aggregation but no summarize', function() {
+      queryBuilder.updateField('fields', []);
+      queryBuilder.updateField('aggregations', [['count', null, 'count']]);
+
+      const query = queryBuilder.getInternal();
+      expect(query.orderby).toEqual(null);
+      expect(query.limit).toEqual(null);
+    });
+  });
 });
