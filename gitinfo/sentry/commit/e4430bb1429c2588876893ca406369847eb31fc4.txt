commit e4430bb1429c2588876893ca406369847eb31fc4
Author: Matte Noble <me@mattenoble.com>
Date:   Tue May 21 13:03:49 2019 -0700

    feat(app-platform): Internal Integrations Backend (#13234)
    
    * feat(app-platform): Internal Integrations Backend
    
    Adds the logic and API work to enable creating Internal Integrations.
    This consists of the following:
    
    - Creating a SentryApp with the appropriate "internal" status
    - Automatically creating an ApiToken
    - Automatically installing the integration to the Org
    - Omit installation webhook
    
    * fix(jira): Remove newlines from RSA key
    
    For some reason, tests started failing due to our crypto library
    thinking this key was an invalid format for RSA. The problem is just
    that there is a newline in the beginning, throwing off the lib's
    matching of `-----` in the beginning.
    
    Removing the newline fixes the issue. I'm still unsure what changed to
    have caused this. Possibly a change to the Cryptography dependency, but
    it seem like we're inheriting it from another lib, so I can't tell.

diff --git a/src/sentry/analytics/events/internal_integration_created.py b/src/sentry/analytics/events/internal_integration_created.py
new file mode 100644
index 0000000000..cdd8607970
--- /dev/null
+++ b/src/sentry/analytics/events/internal_integration_created.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+from sentry import analytics
+
+
+class InternalIntegrationCreatedEvent(analytics.Event):
+    type = 'internal_integration.created'
+
+    attributes = (
+        analytics.Attribute('user_id'),
+        analytics.Attribute('organization_id'),
+        analytics.Attribute('sentry_app'),
+    )
+
+
+analytics.register(InternalIntegrationCreatedEvent)
diff --git a/src/sentry/api/endpoints/sentry_apps.py b/src/sentry/api/endpoints/sentry_apps.py
index ea6dfa74dd..0ea9bd9f8c 100644
--- a/src/sentry/api/endpoints/sentry_apps.py
+++ b/src/sentry/api/endpoints/sentry_apps.py
@@ -9,7 +9,7 @@ from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework import SentryAppSerializer
 from sentry.constants import SentryAppStatus
 from sentry.features.helpers import requires_feature
-from sentry.mediators.sentry_apps import Creator
+from sentry.mediators.sentry_apps import Creator, InternalCreator
 from sentry.models import SentryApp
 
 
@@ -54,6 +54,7 @@ class SentryAppsEndpoint(SentryAppsBaseEndpoint):
             'webhookUrl': request.json_body.get('webhookUrl'),
             'redirectUrl': request.json_body.get('redirectUrl'),
             'isAlertable': request.json_body.get('isAlertable'),
+            'isInternal': request.json_body.get('isInternal'),
             'scopes': request.json_body.get('scopes', []),
             'events': request.json_body.get('events', []),
             'schema': request.json_body.get('schema', {}),
@@ -67,10 +68,8 @@ class SentryAppsEndpoint(SentryAppsBaseEndpoint):
             data['webhook_url'] = data['webhookUrl']
             data['is_alertable'] = data['isAlertable']
 
-            sentry_app = Creator.run(
-                request=request,
-                **data
-            )
+            creator = InternalCreator if data.get('isInternal') else Creator
+            sentry_app = creator.run(request=request, **data)
 
             return Response(serialize(sentry_app), status=201)
         return Response(serializer.errors, status=400)
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index df4d10a16e..6631d54d33 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -382,6 +382,15 @@ class SentryAppStatus(object):
             (cls.INTERNAL, 'internal'),
         )
 
+    @classmethod
+    def as_str(cls, status):
+        if status == cls.UNPUBLISHED:
+            return 'unpublished'
+        elif status == cls.PUBLISHED:
+            return 'published'
+        elif status == cls.INTERNAL:
+            return 'internal'
+
 
 StatsPeriod = namedtuple('StatsPeriod', ('segments', 'interval'))
 
diff --git a/src/sentry/mediators/sentry_app_installations/creator.py b/src/sentry/mediators/sentry_app_installations/creator.py
index 3c13c2c25c..8a36d504a5 100644
--- a/src/sentry/mediators/sentry_app_installations/creator.py
+++ b/src/sentry/mediators/sentry_app_installations/creator.py
@@ -8,7 +8,6 @@ from sentry.models import (
     AuditLogEntryEvent, ApiGrant, SentryApp, SentryAppInstallation
 )
 from sentry.utils.cache import memoize
-from sentry.utils.audit import create_audit_entry
 from sentry.tasks.sentry_apps import installation_webhook
 
 
@@ -17,6 +16,7 @@ class Creator(Mediator):
     slug = Param(six.string_types)
     user = Param('sentry.models.User')
     request = Param('rest_framework.request.Request', required=False)
+    notify = Param(bool, default=True)
 
     def call(self):
         self._create_api_grant()
@@ -50,9 +50,11 @@ class Creator(Mediator):
         )
 
     def _notify_service(self):
-        installation_webhook.delay(self.install.id, self.user.id)
+        if self.notify:
+            installation_webhook.delay(self.install.id, self.user.id)
 
     def audit(self):
+        from sentry.utils.audit import create_audit_entry
         if self.request:
             create_audit_entry(
                 request=self.request,
diff --git a/src/sentry/mediators/sentry_apps/__init__.py b/src/sentry/mediators/sentry_apps/__init__.py
index ad1adbe376..fcff12e8cc 100644
--- a/src/sentry/mediators/sentry_apps/__init__.py
+++ b/src/sentry/mediators/sentry_apps/__init__.py
@@ -3,3 +3,4 @@ from __future__ import absolute_import
 from .creator import Creator  # NOQA
 from .updater import Updater  # NOQA
 from .destroyer import Destroyer  # NOQA
+from .internal_creator import InternalCreator  # NOQA
diff --git a/src/sentry/mediators/sentry_apps/creator.py b/src/sentry/mediators/sentry_apps/creator.py
index e4f6880fd1..56d68c1d4a 100644
--- a/src/sentry/mediators/sentry_apps/creator.py
+++ b/src/sentry/mediators/sentry_apps/creator.py
@@ -5,9 +5,14 @@ import six
 from collections import Iterable
 
 from sentry import analytics
-from sentry.utils.audit import create_audit_entry
 from sentry.mediators import Mediator, Param
-from sentry.models import (AuditLogEntryEvent, ApiApplication, SentryApp, SentryAppComponent, User,)
+from sentry.models import (
+    AuditLogEntryEvent,
+    ApiApplication,
+    SentryApp,
+    SentryAppComponent,
+    User,
+)
 
 
 class Creator(Mediator):
@@ -71,6 +76,7 @@ class Creator(Mediator):
             )
 
     def audit(self):
+        from sentry.utils.audit import create_audit_entry
         if self.request:
             create_audit_entry(
                 request=self.request,
diff --git a/src/sentry/mediators/sentry_apps/internal_creator.py b/src/sentry/mediators/sentry_apps/internal_creator.py
new file mode 100644
index 0000000000..4ef54fcc62
--- /dev/null
+++ b/src/sentry/mediators/sentry_apps/internal_creator.py
@@ -0,0 +1,77 @@
+from __future__ import absolute_import
+
+import six
+
+from collections import Iterable
+
+from sentry.constants import SentryAppStatus
+from sentry.mediators import Mediator, Param
+from sentry.models import (
+    AuditLogEntryEvent,
+    ApiToken,
+)
+from .creator import Creator as SentryAppCreator
+from ..sentry_app_installations import Creator as InstallationCreator
+
+
+class InternalCreator(Mediator):
+    name = Param(six.string_types)
+    author = Param(six.string_types)
+    organization = Param('sentry.models.Organization')
+    scopes = Param(Iterable, default=lambda self: [])
+    events = Param(Iterable, default=lambda self: [])
+    webhook_url = Param(six.string_types)
+    redirect_url = Param(six.string_types, required=False)
+    is_alertable = Param(bool, default=False)
+    schema = Param(dict, default=lambda self: {})
+    overview = Param(six.string_types, required=False)
+    request = Param('rest_framework.request.Request', required=False)
+    user = Param('sentry.models.User')
+
+    def call(self):
+        self.sentry_app = SentryAppCreator.run(**self.kwargs)
+        self.sentry_app.status = SentryAppStatus.INTERNAL
+        self.sentry_app.save()
+
+        self._create_access_token()
+        self._install()
+
+        return self.sentry_app
+
+    def _create_access_token(self):
+        self.api_token = ApiToken.objects.create(
+            user=self.sentry_app.proxy_user,
+            application_id=self.sentry_app.application.id,
+            scope_list=self.sentry_app.scope_list,
+            expires_at=None,
+        )
+
+    def _install(self):
+        install = InstallationCreator.run(
+            organization=self.organization,
+            slug=self.sentry_app.slug,
+            user=self.user,
+            request=self.request,
+            notify=False,
+        )
+        install.api_token = self.api_token
+        install.save()
+
+    def audit(self):
+        from sentry.utils.audit import create_audit_entry
+        if self.request:
+            create_audit_entry(
+                request=self.request,
+                organization=self.organization,
+                target_object=self.organization.id,
+                event=AuditLogEntryEvent.INTERNAL_INTEGRATION_ADD,
+            )
+
+    def record_analytics(self):
+        from sentry import analytics
+        analytics.record(
+            'internal_integration.created',
+            user_id=self.user.id,
+            organization_id=self.organization.id,
+            sentry_app=self.sentry_app.slug,
+        )
diff --git a/src/sentry/models/auditlogentry.py b/src/sentry/models/auditlogentry.py
index d5b6bf503e..c3a68b0f6e 100644
--- a/src/sentry/models/auditlogentry.py
+++ b/src/sentry/models/auditlogentry.py
@@ -92,6 +92,8 @@ class AuditLogEntryEvent(object):
     MONITOR_EDIT = 121
     MONITOR_REMOVE = 122
 
+    INTERNAL_INTEGRATION_ADD = 130
+
 
 class AuditLogEntry(Model):
     __core__ = False
@@ -163,6 +165,7 @@ class AuditLogEntry(Model):
             (AuditLogEntryEvent.SENTRY_APP_REMOVE, 'sentry-app.remove'),
             (AuditLogEntryEvent.SENTRY_APP_INSTALL, 'sentry-app.install'),
             (AuditLogEntryEvent.SENTRY_APP_UNINSTALL, 'sentry-app.uninstall'),
+            (AuditLogEntryEvent.INTERNAL_INTEGRATION_ADD, 'internal-integration.create'),
 
             (AuditLogEntryEvent.SET_ONDEMAND, 'ondemand.edit'),
             (AuditLogEntryEvent.TRIAL_STARTED, 'trial.started'),
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index da04473ac0..59e6cdc6fd 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -678,34 +678,37 @@ class Factories(object):
         UserPermission.objects.create(user=user, permission=permission)
 
     @staticmethod
-    def create_sentry_app(name=None, author='Sentry', organization=None, published=False, scopes=(),
-                          webhook_url=None, user=None, **kwargs):
-        if not name:
-            name = petname.Generate(2, ' ', letters=10).title()
-        if not organization:
-            organization = Factories.create_organization()
-        if not webhook_url:
-            webhook_url = 'https://example.com/webhook'
+    def create_sentry_app(**kwargs):
+        app = sentry_apps.Creator.run(
+            **Factories._sentry_app_kwargs(**kwargs)
+        )
 
+        if kwargs.get('published'):
+            app.update(status=SentryAppStatus.PUBLISHED)
+
+        return app
+
+    @staticmethod
+    def create_internal_integration(**kwargs):
+        return sentry_apps.InternalCreator.run(
+            **Factories._sentry_app_kwargs(**kwargs)
+        )
+
+    @staticmethod
+    def _sentry_app_kwargs(**kwargs):
         _kwargs = {
-            'user': (user or Factories.create_user()),
-            'name': name,
-            'organization': organization,
-            'author': author,
-            'scopes': scopes,
-            'webhook_url': webhook_url,
+            'user': kwargs.get('user', Factories.create_user()),
+            'name': kwargs.get('name', petname.Generate(2, ' ', letters=10).title()),
+            'organization': kwargs.get('organization', Factories.create_organization()),
+            'author': kwargs.get('author', 'A Company'),
+            'scopes': kwargs.get('scopes', ()),
+            'webhook_url': kwargs.get('webhook_url', 'https://example.com/webhook'),
             'events': [],
             'schema': {},
         }
 
-        _kwargs.update(kwargs)
-
-        app = sentry_apps.Creator.run(**_kwargs)
-
-        if published:
-            app.update(status=SentryAppStatus.PUBLISHED)
-
-        return app
+        _kwargs.update(**kwargs)
+        return _kwargs
 
     @staticmethod
     def create_sentry_app_installation(organization=None, slug=None, user=None):
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index be0671c1ba..e414d92bdb 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -188,6 +188,9 @@ class Fixtures(object):
     def create_sentry_app(self, *args, **kwargs):
         return Factories.create_sentry_app(*args, **kwargs)
 
+    def create_internal_integration(self, *args, **kwargs):
+        return Factories.create_internal_integration(*args, **kwargs)
+
     def create_sentry_app_installation(self, *args, **kwargs):
         return Factories.create_sentry_app_installation(*args, **kwargs)
 
diff --git a/tests/sentry/api/endpoints/test_organization_sentry_apps.py b/tests/sentry/api/endpoints/test_organization_sentry_apps.py
index ac984f219e..daf85db872 100644
--- a/tests/sentry/api/endpoints/test_organization_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_organization_sentry_apps.py
@@ -59,6 +59,18 @@ class GetOrganizationSentryAppsTest(OrganizationSentryAppsTest):
             }
         }])
 
+    def test_includes_internal_integrations(self):
+        self.create_project(organization=self.org)
+        internal_integration = self.create_internal_integration(
+            organization=self.org,
+        )
+
+        self.login_as(self.user)
+        response = self.client.get(self.url, format='json')
+
+        assert response.status_code == 200
+        assert internal_integration.uuid in [a['uuid'] for a in response.data]
+
     def test_cannot_see_apps_in_other_orgs(self):
         self.login_as(user=self.user)
         url = reverse('sentry-api-0-organization-sentry-apps', args=[self.super_org.slug])
diff --git a/tests/sentry/api/endpoints/test_sentry_app_details.py b/tests/sentry/api/endpoints/test_sentry_app_details.py
index 83c510bc83..9fd36f7287 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_details.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_details.py
@@ -13,6 +13,7 @@ class SentryAppDetailsTest(APITestCase):
         self.superuser = self.create_user(email='a@example.com', is_superuser=True)
         self.user = self.create_user(email='boop@example.com')
         self.org = self.create_organization(owner=self.user)
+        self.project = self.create_project(organization=self.org)
         self.super_org = self.create_organization(owner=self.superuser)
         self.published_app = self.create_sentry_app(
             name='Test',
@@ -32,6 +33,10 @@ class SentryAppDetailsTest(APITestCase):
             webhook_url='https://example.com',
         )
 
+        self.internal_integration = self.create_internal_integration(
+            organization=self.org,
+        )
+
         self.url = reverse(
             'sentry-api-0-sentry-app-details',
             args=[self.published_app.slug],
@@ -77,6 +82,31 @@ class GetSentryAppDetailsTest(SentryAppDetailsTest):
         response = self.client.get(url, format='json')
         assert response.status_code == 200
 
+    @with_feature('organizations:sentry-apps')
+    def test_retrieving_internal_integrations_as_org_member(self):
+        self.login_as(self.user)
+
+        url = reverse(
+            'sentry-api-0-sentry-app-details',
+            args=[self.internal_integration.slug],
+        )
+
+        response = self.client.get(url, format='json')
+        assert response.status_code == 200
+
+    @with_feature('organizations:sentry-apps')
+    def test_internal_integrations_are_not_public(self):
+        # User not in Org who owns the Integration
+        self.login_as(self.create_user())
+
+        url = reverse(
+            'sentry-api-0-sentry-app-details',
+            args=[self.internal_integration.slug],
+        )
+
+        response = self.client.get(url, format='json')
+        assert response.status_code == 404
+
     @with_feature('organizations:sentry-apps')
     def test_users_do_not_see_unowned_unpublished_apps(self):
         self.login_as(self.user)
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index a219912daf..4a156d7b64 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -4,6 +4,7 @@ import six
 
 from django.core.urlresolvers import reverse
 
+from sentry.constants import SentryAppStatus
 from sentry.utils import json
 from sentry.testutils import APITestCase
 from sentry.testutils.helpers import with_feature
@@ -304,6 +305,16 @@ class PostSentryAppsTest(SentryAppsTest):
         assert response.status_code == 201, response.content
         assert response.data['scopes'] == []
 
+    @with_feature('organizations:sentry-apps')
+    def test_creates_internal_integration(self):
+        self.create_project(organization=self.org)
+        self.login_as(self.user)
+
+        response = self._post(isInternal=True)
+
+        assert response.data['slug'] == 'myapp'
+        assert response.data['status'] == SentryAppStatus.as_str(SentryAppStatus.INTERNAL)
+
     def _post(self, **kwargs):
         body = {
             'name': 'MyApp',
diff --git a/tests/sentry/integrations/jira_server/testutils.py b/tests/sentry/integrations/jira_server/testutils.py
index d0185351dd..6f3e9f5e76 100644
--- a/tests/sentry/integrations/jira_server/testutils.py
+++ b/tests/sentry/integrations/jira_server/testutils.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import
 
-EXAMPLE_PRIVATE_KEY = '''
------BEGIN RSA PRIVATE KEY-----
+EXAMPLE_PRIVATE_KEY = '''-----BEGIN RSA PRIVATE KEY-----
 MIICWwIBAAKBgQC1cd9t8sA03awggLiX2gjZxyvOVUPJksLly1E662tttTeR3Wm9
 eo6onNeI8HRD+O4wubUp4h4Chc7DtLDmFEPhUZ8Qkwztiifm99Xo3s0nUq4Pygp5
 AU09KXTEPbzHLh1dnXLcxVLmGDE4drh0NWmYsd/Zp7XNIZq2TRQQ3NTdVQIDAQAB
@@ -15,8 +14,7 @@ a74fLYeGOws4hEQDpxfBJsmxO3dcSppbedS+slFTepKjNymZW/IYh/9tMwJAEL5E
 9DqGBn7x4y1x2//yESTbC7lvPqZzY+FXS/tg4NBkEGZxkoolPHg3NTnlyXhzGsHK
 M/04DicKipJYA85l7QJAJ3u67qZXecM/oWTtJToBDuyKGHfdY1564+RbyDEjJJRb
 vz4O/8FQQ1sGjdEBMMrRBCHEG8o3/XDTrB97t45TeA==
------END RSA PRIVATE KEY-----
-'''
+-----END RSA PRIVATE KEY-----'''
 
 EXAMPLE_ISSUE_SEARCH = '''
 {
diff --git a/tests/sentry/mediators/sentry_apps/test_internal_creator.py b/tests/sentry/mediators/sentry_apps/test_internal_creator.py
new file mode 100644
index 0000000000..91832785d5
--- /dev/null
+++ b/tests/sentry/mediators/sentry_apps/test_internal_creator.py
@@ -0,0 +1,94 @@
+from __future__ import absolute_import
+
+from mock import patch, MagicMock
+
+from sentry.mediators.sentry_apps import InternalCreator
+from sentry.models import (
+    AuditLogEntryEvent,
+    SentryApp,
+    SentryAppInstallation,
+)
+from sentry.testutils import TestCase
+from sentry.testutils.helpers.faux import faux
+
+
+class TestInternalCreator(TestCase):
+    def setUp(self):
+        self.user = self.create_user()
+        self.org = self.create_organization(owner=self.user)
+        self.project = self.create_project(organization=self.org)
+        self.creator = InternalCreator(
+            name='nulldb',
+            user=self.user,
+            author='Sentry',
+            organization=self.org,
+            scopes=('project:read',),
+            webhook_url='http://example.com',
+            schema={'elements': [self.create_issue_link_schema()]},
+        )
+
+    def test_creates_internal_sentry_app(self):
+        self.creator.call()
+        assert SentryApp.objects.filter(slug='nulldb').exists()
+
+    def test_installs_to_org(self):
+        sentry_app = self.creator.call()
+
+        assert SentryAppInstallation.objects.filter(
+            organization=self.org,
+            sentry_app=sentry_app,
+        ).exists()
+
+    @patch('sentry.tasks.sentry_apps.installation_webhook.delay')
+    def test_does_not_notify_service(self, delay):
+        self.creator.call()
+        assert not len(delay.mock_calls)
+
+    def test_creates_access_token(self):
+        sentry_app = self.creator.call()
+
+        install = SentryAppInstallation.objects.get(
+            organization=self.org,
+            sentry_app=sentry_app,
+        )
+
+        assert install.api_token
+
+    @patch('sentry.utils.audit.create_audit_entry')
+    def test_audits(self, create_audit_entry):
+        InternalCreator.run(
+            name='nulldb',
+            user=self.user,
+            author='Sentry',
+            organization=self.org,
+            scopes=('project:read',),
+            webhook_url='http://example.com',
+            schema={'elements': [self.create_issue_link_schema()]},
+            request=MagicMock(),
+        )
+
+        call = faux(create_audit_entry)
+        assert call.kwarg_equals('organization', self.org)
+        assert call.kwarg_equals('target_object', self.org.id)
+        assert call.kwarg_equals('event', AuditLogEntryEvent.INTERNAL_INTEGRATION_ADD)
+
+    @patch('sentry.analytics.record')
+    @patch('sentry.utils.audit.create_audit_entry')
+    def test_records_analytics(self, create_audit_entry, record):
+        sentry_app = InternalCreator.run(
+            name='nulldb',
+            user=self.user,
+            author='Sentry',
+            organization=self.org,
+            scopes=('project:read',),
+            webhook_url='http://example.com',
+            schema={'elements': [self.create_issue_link_schema()]},
+            request=MagicMock(),
+        )
+
+        assert faux(record).args_equals('internal_integration.created')
+        assert faux(record).kwargs == {
+            'user_id': self.user.id,
+            'organization_id': self.org.id,
+            'sentry_app': sentry_app.slug,
+        }
