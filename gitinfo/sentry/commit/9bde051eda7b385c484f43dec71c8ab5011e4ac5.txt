commit 9bde051eda7b385c484f43dec71c8ab5011e4ac5
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Thu Jan 31 09:38:38 2019 +0100

    fix: Userfeedback page -> guide to docs (#11794)

diff --git a/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx b/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
index 73ac7adc05..4c0bfd0424 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
@@ -1,10 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import styled from 'react-emotion';
 import * as Sentry from '@sentry/browser';
 
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
-import {t} from 'app/locale';
+import {t, tct} from 'app/locale';
 import Access from 'app/components/acl/access';
 import AsyncView from 'app/views/asyncView';
 import Button from 'app/components/button';
@@ -14,15 +12,6 @@ import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader
 import TextBlock from 'app/views/settings/components/text/textBlock';
 import formGroups from 'app/data/forms/userFeedback';
 
-const CodeBlock = styled.pre`
-  word-break: break-all;
-  white-space: pre-wrap;
-`;
-
-const TextBlockNoMargin = styled(TextBlock)`
-  margin-bottom: 0;
-`;
-
 class ProjectUserFeedbackSettings extends AsyncView {
   static propTypes = {
     setProjectNavSection: PropTypes.func,
@@ -62,60 +51,6 @@ class ProjectUserFeedbackSettings extends AsyncView {
     ];
   }
 
-  getInstructions() {
-    let dsn = this.state.keyList.length
-      ? this.state.keyList[0].dsn.public
-      : 'https://public@sentry.example.com/1';
-
-    return (
-      '<!-- Sentry JS SDK 2.1.+ required -->\n' +
-      '<script src="https://cdn.ravenjs.com/3.23.1/raven.min.js"></script>\n\n' +
-      '{% if request.sentry.id %}\n' +
-      '  <script>\n' +
-      '  Raven.showReportDialog({\n' +
-      '    // grab the eventId generated by the Sentry SDK\n' +
-      "    eventId: '{{ request.sentry.id }}',\n\n" +
-      '    // use the public DSN (dont include your secret!)\n' +
-      "    dsn: '" +
-      dsn +
-      "'\n" +
-      '  });\n' +
-      '  </script>\n' +
-      '{% endif %}\n'
-    );
-  }
-
-  getBrowserJSInstructions() {
-    let dsn = this.state.keyList.length
-      ? this.state.keyList[0].dsn.public
-      : 'https://public@sentry.example.com/1';
-
-    return (
-      '<!-- Sentry JS SDK 2.1.+ required -->\n' +
-      '<script src="https://cdn.ravenjs.com/2.1.0/raven.min.js"></script>\n\n' +
-      '<script>\n' +
-      '// configure the SDK as you normally would\n' +
-      "Raven.config('" +
-      dsn +
-      "').install();\n\n" +
-      '/**\n' +
-      ' * Report a routing error to Sentry and show a feedback dialog to\n' +
-      ' * the user.\n' +
-      ' * \n' +
-      ' * > try {\n' +
-      ' * >   renderRoute()\n' +
-      ' * > } catch (err) {\n' +
-      ' * >   handleRouteError(err);\n' +
-      ' * > }\n' +
-      ' */\n' +
-      'function handleRouteError(err) {\n' +
-      '  Raven.captureException(err);\n' +
-      '  Raven.showReportDialog();\n' +
-      '};\n' +
-      '</script>\n'
-    );
-  }
-
   handleClick = () => {
     Sentry.showReportDialog({
       // should never make it to the Sentry API, but just in case, use throwaway id
@@ -136,36 +71,27 @@ class ProjectUserFeedbackSettings extends AsyncView {
         </TextBlock>
         <TextBlock>
           {t(
-            'When configured, your users will be presented with a dialog prompting them for additional information. That information will get attached to the issue in Sentry'
+            'When configured, your users will be presented with a dialog prompting them for additional information. That information will get attached to the issue in Sentry.'
+          )}
+        </TextBlock>
+        <TextBlock>
+          {tct(
+            'A detailed guide how to integrate it with our different SDKs can be found in [link].',
+            {
+              link: (
+                <a href="https://docs.sentry.io/enriching-error-data/user-feedback/">
+                  our docs
+                </a>
+              ),
+            }
           )}
         </TextBlock>
-
         <TextBlock>
           <Button priority="primary" onClick={this.handleClick}>
             {t('See the report dialog in action')}
           </Button>
         </TextBlock>
 
-        <Panel>
-          <PanelHeader>{t('Integration')}</PanelHeader>
-
-          <PanelBody disablePadding={false}>
-            <TextBlockNoMargin>
-              {t(
-                "The following example uses our Django integration. Check the documentation for the SDK you're using for more details."
-              )}
-            </TextBlockNoMargin>
-            <CodeBlock>{this.getInstructions()}</CodeBlock>
-
-            <TextBlockNoMargin css={{marginTop: 30}}>
-              {t(
-                "If you're capturing an error with our Browser JS SDK, things get even simpler"
-              )}
-            </TextBlockNoMargin>
-            <CodeBlock>{this.getBrowserJSInstructions()}</CodeBlock>
-          </PanelBody>
-        </Panel>
-
         <Form
           saveOnBlur
           apiMethod="PUT"
