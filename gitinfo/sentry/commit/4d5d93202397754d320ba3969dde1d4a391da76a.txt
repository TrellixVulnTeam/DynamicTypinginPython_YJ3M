commit 4d5d93202397754d320ba3969dde1d4a391da76a
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 21 17:53:55 2017 -0700

    dev: autoformat

diff --git a/src/sentry/api/endpoints/event_apple_crash_report.py b/src/sentry/api/endpoints/event_apple_crash_report.py
index 4fad574ff7..88030d5bd9 100644
--- a/src/sentry/api/endpoints/event_apple_crash_report.py
+++ b/src/sentry/api/endpoints/event_apple_crash_report.py
@@ -3,7 +3,9 @@ from __future__ import absolute_import
 import six
 
 try:
-    from django.http import (HttpResponse, CompatibleStreamingHttpResponse as StreamingHttpResponse)
+    from django.http import (
+        HttpResponse,
+        CompatibleStreamingHttpResponse as StreamingHttpResponse)
 except ImportError:
     from django.http import HttpResponse, StreamingHttpResponse
 
diff --git a/src/sentry/api/endpoints/organization_releases.py b/src/sentry/api/endpoints/organization_releases.py
index 805a2db0d2..1f667131bf 100644
--- a/src/sentry/api/endpoints/organization_releases.py
+++ b/src/sentry/api/endpoints/organization_releases.py
@@ -131,7 +131,9 @@ class OrganizationReleasesEndpoint(OrganizationReleasesBaseEndpoint):
         if serializer.is_valid():
             result = serializer.object
 
-            allowed_projects = {p.slug: p for p in self.get_allowed_projects(request, organization)}
+            allowed_projects = {
+                p.slug: p for p in self.get_allowed_projects(
+                    request, organization)}
 
             projects = []
             for slug in result['projects']:
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 243e2e48de..9dc81ecfad 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -341,13 +341,18 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
         except ValidationError as exc:
             return Response({'detail': six.text_type(exc)}, status=400)
 
-        count_hits = features.has('projects:stream-hit-counts', project=project, actor=request.user)
+        count_hits = features.has(
+            'projects:stream-hit-counts',
+            project=project,
+            actor=request.user)
 
         cursor_result = search.query(count_hits=count_hits, **query_kwargs)
 
         results = list(cursor_result)
 
-        context = serialize(results, request.user, StreamGroupSerializer(stats_period=stats_period))
+        context = serialize(
+            results, request.user, StreamGroupSerializer(
+                stats_period=stats_period))
 
         # HACK: remove auto resolved entries
         if query_kwargs.get('status') == GroupStatus.UNRESOLVED:
diff --git a/src/sentry/api/endpoints/project_releases_token.py b/src/sentry/api/endpoints/project_releases_token.py
index 2afe14b2f8..56611f2b8e 100644
--- a/src/sentry/api/endpoints/project_releases_token.py
+++ b/src/sentry/api/endpoints/project_releases_token.py
@@ -47,9 +47,11 @@ class ProjectReleasesTokenEndpoint(ProjectEndpoint):
         if token is None:
             token = self._regenerate_token(project)
 
-        return Response({'token': token, 'webhookUrl': _get_webhook_url(project, 'builtin', token)})
+        return Response(
+            {'token': token, 'webhookUrl': _get_webhook_url(project, 'builtin', token)})
 
     def post(self, request, project):
         token = self._regenerate_token(project)
 
-        return Response({'token': token, 'webhookUrl': _get_webhook_url(project, 'builtin', token)})
+        return Response(
+            {'token': token, 'webhookUrl': _get_webhook_url(project, 'builtin', token)})
diff --git a/src/sentry/api/endpoints/project_searches.py b/src/sentry/api/endpoints/project_searches.py
index 42fd2b898d..3ddad7aea9 100644
--- a/src/sentry/api/endpoints/project_searches.py
+++ b/src/sentry/api/endpoints/project_searches.py
@@ -73,7 +73,8 @@ class ProjectSearchesEndpoint(ProjectEndpoint):
                     save_search_created.send(project=project, sender=self)
 
                 except IntegrityError:
-                    return Response({'detail': 'Search with same name already exists.'}, status=400)
+                    return Response(
+                        {'detail': 'Search with same name already exists.'}, status=400)
 
                 if search.is_default:
                     if request.access.has_scope('project:write'):
diff --git a/src/sentry/api/endpoints/team_details.py b/src/sentry/api/endpoints/team_details.py
index 2adb66cef2..b952dcd8d5 100644
--- a/src/sentry/api/endpoints/team_details.py
+++ b/src/sentry/api/endpoints/team_details.py
@@ -19,7 +19,8 @@ delete_logger = logging.getLogger('sentry.deletions.api')
 
 @scenario('GetTeam')
 def get_team_scenario(runner):
-    runner.request(method='GET', path='/teams/%s/%s/' % (runner.org.slug, runner.default_team.slug))
+    runner.request(method='GET', path='/teams/%s/%s/' %
+                   (runner.org.slug, runner.default_team.slug))
 
 
 @scenario('UpdateTeam')
diff --git a/src/sentry/filters/browser_extensions.py b/src/sentry/filters/browser_extensions.py
index 86dcb843e3..499e9691f5 100644
--- a/src/sentry/filters/browser_extensions.py
+++ b/src/sentry/filters/browser_extensions.py
@@ -28,7 +28,8 @@ EXTENSION_EXC_VALUES = re.compile(
                 # See http://stackoverflow.com/questions/4113268
                 'bmi_SafeAddOnload',
                 'EBCallBackMessageReceived',
-                # See https://groups.google.com/a/chromium.org/forum/#!topic/chromium-discuss/7VU0_VvC7mE
+                # See
+                # https://groups.google.com/a/chromium.org/forum/#!topic/chromium-discuss/7VU0_VvC7mE
                 '_gCrWeb',
                 # See http://toolbar.conduit.com/Debveloper/HtmlAndGadget/Methods/JSInjection.aspx
                 'conduitPage',
diff --git a/src/sentry/lang/javascript/errormapping.py b/src/sentry/lang/javascript/errormapping.py
index e04e559907..74153586bd 100644
--- a/src/sentry/lang/javascript/errormapping.py
+++ b/src/sentry/lang/javascript/errormapping.py
@@ -125,6 +125,7 @@ def rewrite_exception(data):
                     rv = True
                     break
             except Exception as e:
-                logger.error('Failed to run processor "%s": %s', processor.vendor, e, exc_info=True)
+                logger.error('Failed to run processor "%s": %s',
+                             processor.vendor, e, exc_info=True)
 
     return rv
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 18401b9e8e..630a4cd900 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -165,7 +165,11 @@ class Group(Model):
     __core__ = False
 
     project = FlexibleForeignKey('sentry.Project', null=True)
-    logger = models.CharField(max_length=64, blank=True, default=DEFAULT_LOGGER_NAME, db_index=True)
+    logger = models.CharField(
+        max_length=64,
+        blank=True,
+        default=DEFAULT_LOGGER_NAME,
+        db_index=True)
     level = BoundedPositiveIntegerField(
         choices=LOG_LEVELS.items(), default=logging.ERROR, blank=True, db_index=True
     )
@@ -292,7 +296,8 @@ class Group(Model):
         return cls.objects.get(project=project_id, id=group_id)
 
     def get_score(self):
-        return int(math.log(self.times_seen) * 600 + float(time.mktime(self.last_seen.timetuple())))
+        return int(math.log(self.times_seen) * 600 +
+                   float(time.mktime(self.last_seen.timetuple())))
 
     def get_latest_event(self):
         from sentry.models import Event
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 5ca35948b1..c47a59a859 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -90,7 +90,8 @@ class Release(Model):
 
     @staticmethod
     def is_valid_version(value):
-        return not (any(c in value for c in BAD_RELEASE_CHARS) or value in ('.', '..') or not value)
+        return not (any(c in value for c in BAD_RELEASE_CHARS)
+                    or value in ('.', '..') or not value)
 
     @classmethod
     def get_cache_key(cls, organization_id, version):
diff --git a/src/sentry/plugins/base/manager.py b/src/sentry/plugins/base/manager.py
index 9df04a903e..989b0a082d 100644
--- a/src/sentry/plugins/base/manager.py
+++ b/src/sentry/plugins/base/manager.py
@@ -32,7 +32,8 @@ class PluginManager(InstanceManager):
 
     def configurable_for_project(self, project, version=1):
         for plugin in self.all(version=version):
-            if not safe_execute(plugin.can_configure_for_project, project, _with_transaction=False):
+            if not safe_execute(plugin.can_configure_for_project,
+                                project, _with_transaction=False):
                 continue
             yield plugin
 
diff --git a/src/sentry/plugins/bases/issue.py b/src/sentry/plugins/bases/issue.py
index 76ad46558f..0270847a84 100644
--- a/src/sentry/plugins/bases/issue.py
+++ b/src/sentry/plugins/bases/issue.py
@@ -193,7 +193,8 @@ class IssueTrackingPlugin(Plugin):
 
     def view(self, request, group, **kwargs):
         has_auth_configured = self.has_auth_configured()
-        if not (has_auth_configured and self.is_configured(project=group.project, request=request)):
+        if not (has_auth_configured and self.is_configured(
+                project=group.project, request=request)):
             if self.auth_provider:
                 required_auth_settings = settings.AUTH_PROVIDERS[self.auth_provider]
             else:
diff --git a/src/sentry/plugins/bases/issue2.py b/src/sentry/plugins/bases/issue2.py
index 861a099dce..52a4a4a5d1 100644
--- a/src/sentry/plugins/bases/issue2.py
+++ b/src/sentry/plugins/bases/issue2.py
@@ -308,7 +308,8 @@ class IssueTrackingPlugin2(Plugin):
 
     def check_config_and_auth(self, request, group):
         has_auth_configured = self.has_auth_configured()
-        if not (has_auth_configured and self.is_configured(project=group.project, request=request)):
+        if not (has_auth_configured and self.is_configured(
+                project=group.project, request=request)):
             if self.auth_provider:
                 required_auth_settings = settings.AUTH_PROVIDERS[self.auth_provider]
             else:
diff --git a/src/sentry/plugins/bases/tag.py b/src/sentry/plugins/bases/tag.py
index 6769c76936..067ba5ff68 100644
--- a/src/sentry/plugins/bases/tag.py
+++ b/src/sentry/plugins/bases/tag.py
@@ -25,4 +25,5 @@ class TagPlugin(Plugin2):
         raise NotImplementedError
 
     def get_tags(self, event, **kwargs):
-        return [(self.tag, v) for v in self.get_tag_values(event) if len(v) <= MAX_TAG_VALUE_LENGTH]
+        return [(self.tag, v) for v in self.get_tag_values(
+            event) if len(v) <= MAX_TAG_VALUE_LENGTH]
diff --git a/src/sentry/plugins/sentry_mail/activity/base.py b/src/sentry/plugins/sentry_mail/activity/base.py
index 63baf31008..9fd8516733 100644
--- a/src/sentry/plugins/sentry_mail/activity/base.py
+++ b/src/sentry/plugins/sentry_mail/activity/base.py
@@ -164,7 +164,8 @@ class ActivityEmail(object):
             )
         avatar_type = user.get_avatar_type()
         if avatar_type == 'upload':
-            return '<img class="avatar" src="{}" />'.format(escape(self._get_user_avatar_url(user)))
+            return '<img class="avatar" src="{}" />'.format(
+                escape(self._get_user_avatar_url(user)))
         elif avatar_type == 'letter_avatar':
             return get_email_avatar(user.get_display_name(), user.get_label(), 20, False)
         else:
diff --git a/src/sentry/plugins/sentry_mail/activity/release.py b/src/sentry/plugins/sentry_mail/activity/release.py
index d1527f152f..a88be55c57 100644
--- a/src/sentry/plugins/sentry_mail/activity/release.py
+++ b/src/sentry/plugins/sentry_mail/activity/release.py
@@ -140,7 +140,8 @@ class ReleaseActivityEmail(ActivityEmail):
         }
 
         # merge the two type of participants
-        return dict(chain(six.iteritems(participants_committed), six.iteritems(participants_opted)))
+        return dict(chain(six.iteritems(participants_committed),
+                          six.iteritems(participants_opted)))
 
     def get_users_by_teams(self):
         if not self.user_id_team_lookup:
diff --git a/src/sentry/runner/commands/run.py b/src/sentry/runner/commands/run.py
index 52e9f5ceee..a1a667b010 100644
--- a/src/sentry/runner/commands/run.py
+++ b/src/sentry/runner/commands/run.py
@@ -104,7 +104,9 @@ def web(bind, workers, upgrade, with_lock, noinput):
             )
         except click.ClickException:
             if with_lock:
-                click.echo('!! Upgrade currently running from another process, skipping.', err=True)
+                click.echo(
+                    '!! Upgrade currently running from another process, skipping.',
+                    err=True)
             else:
                 raise
 
diff --git a/src/sentry/tasks/clear_expired_resolutions.py b/src/sentry/tasks/clear_expired_resolutions.py
index 3a9b85d36c..18c37ee00f 100644
--- a/src/sentry/tasks/clear_expired_resolutions.py
+++ b/src/sentry/tasks/clear_expired_resolutions.py
@@ -6,7 +6,8 @@ from sentry.models import (Activity, GroupResolution, Release)
 from sentry.tasks.base import instrumented_task
 
 
-@instrumented_task(name='sentry.tasks.clear_expired_resolutions', time_limit=15, soft_time_limit=10)
+@instrumented_task(name='sentry.tasks.clear_expired_resolutions',
+                   time_limit=15, soft_time_limit=10)
 def clear_expired_resolutions(release_id):
     """
     This should be fired when ``release_id`` is created, and will indicate to
diff --git a/src/sentry/tasks/reports.py b/src/sentry/tasks/reports.py
index 523307b8c0..82d78454a6 100644
--- a/src/sentry/tasks/reports.py
+++ b/src/sentry/tasks/reports.py
@@ -513,7 +513,8 @@ def prepare_reports(dry_run=False, *args, **kwargs):
         prepare_organization_report.delay(timestamp, duration, organization_id, dry_run=dry_run)
 
 
-@instrumented_task(name='sentry.tasks.reports.prepare_organization_report', queue='reports.prepare')
+@instrumented_task(name='sentry.tasks.reports.prepare_organization_report',
+                   queue='reports.prepare')
 def prepare_organization_report(timestamp, duration, organization_id, dry_run=False):
     try:
         organization = _get_organization_queryset().get(id=organization_id)
@@ -847,7 +848,9 @@ def to_context(organization, interval, reports):
             list(
                 zip(
                     (
-                        DistributionType('New', '#8477e0'), DistributionType('Reopened', '#6C5FC7'),
+                        DistributionType(
+                            'New', '#8477e0'), DistributionType(
+                            'Reopened', '#6C5FC7'),
                         DistributionType('Existing', '#534a92'),
                     ),
                     report.issue_summaries,
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index 117750d931..172bc4f57d 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -183,7 +183,8 @@ def delete_raw_event(project_id, event_id, allow_hint_clear=False):
             project_id, 'sentry:sent_failed_event_hint', False
         )
         if sent_notification:
-            if ReprocessingReport.objects.filter(project_id=project_id, event_id=event_id).exists():
+            if ReprocessingReport.objects.filter(
+                    project_id=project_id, event_id=event_id).exists():
                 project = Project.objects.get_from_cache(id=project_id)
                 ProjectOption.objects.set_value(project, 'sentry:sent_failed_event_hint', False)
 
@@ -289,4 +290,7 @@ def save_event(cache_key=None, data=None, start_time=None, event_id=None, **kwar
         if cache_key:
             default_cache.delete(cache_key)
         if start_time:
-            metrics.timing('events.time-to-process', time() - start_time, instance=data['platform'])
+            metrics.timing(
+                'events.time-to-process',
+                time() - start_time,
+                instance=data['platform'])
diff --git a/src/sentry/tasks/unmerge.py b/src/sentry/tasks/unmerge.py
index 98ba11f33e..92ceaaf17c 100644
--- a/src/sentry/tasks/unmerge.py
+++ b/src/sentry/tasks/unmerge.py
@@ -131,7 +131,8 @@ def get_group_backfill_attributes(caches, group, events):
                 {name: f(caches, data, event) for name, f in backfill_fields.items()},
             ]),
             events,
-            {name: getattr(group, name) for name in set(initial_fields.keys()) | set(backfill_fields.keys())},
+            {name: getattr(group, name)
+             for name in set(initial_fields.keys()) | set(backfill_fields.keys())},
         ).items()
         if k in backfill_fields
     }
diff --git a/src/sentry/templatetags/sentry_plugins.py b/src/sentry/templatetags/sentry_plugins.py
index 70d9a8a888..2e23e88a3b 100644
--- a/src/sentry/templatetags/sentry_plugins.py
+++ b/src/sentry/templatetags/sentry_plugins.py
@@ -21,7 +21,12 @@ def get_actions(group, request):
 
     action_list = []
     for plugin in plugins.for_project(project, version=1):
-        results = safe_execute(plugin.actions, request, group, action_list, _with_transaction=False)
+        results = safe_execute(
+            plugin.actions,
+            request,
+            group,
+            action_list,
+            _with_transaction=False)
 
         if not results:
             continue
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 97df613115..08b5a8e2d3 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -194,13 +194,13 @@ class Fixtures(object):
 
     @fixture
     def group(self):
-        return self.create_group(message=u'こんにちは')
+        return self.create_group(message=u'\u3053\u3093\u306b\u3061\u306f')
 
     @fixture
     def event(self):
         return self.create_event(
             event_id='a' * 32,
-            message=u'こんにちは',
+            message=u'\u3053\u3093\u306b\u3061\u306f',
         )
 
     @fixture
@@ -517,7 +517,8 @@ class Fixtures(object):
                 }
             }"""
 
-        return self.create_event(event_id=event_id, platform='javascript', data=json.loads(payload))
+        return self.create_event(event_id=event_id, platform='javascript',
+                                 data=json.loads(payload))
 
     def create_group(self, project=None, checksum=None, **kwargs):
         if checksum:
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index 3ad9a35038..100d26d705 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -194,7 +194,9 @@ class RedisTSDB(BaseTSDB):
                         self.normalize_to_rollup(timestamp, rollup),
                         model_key,
                     )
-                    results.append((to_timestamp(timestamp), key, client.hget(hash_key, model_key)))
+                    results.append(
+                        (to_timestamp(timestamp), key, client.hget(
+                            hash_key, model_key)))
 
         results_by_key = defaultdict(dict)
         for epoch, key, count in results:
@@ -697,7 +699,8 @@ class RedisTSDB(BaseTSDB):
                                 to_timestamp(timestamp),
                                 destination,
                             ),
-                            ['IMPORT'] + list(self.DEFAULT_SKETCH_PARAMETERS) + next(results).value,
+                            ['IMPORT'] + list(self.DEFAULT_SKETCH_PARAMETERS) +
+                            next(results).value,
                         )
                     )
                     next(results)  # pop off the result of DEL
diff --git a/src/sentry/utils/dates.py b/src/sentry/utils/dates.py
index ebac53bc74..d00bdcb5df 100644
--- a/src/sentry/utils/dates.py
+++ b/src/sentry/utils/dates.py
@@ -70,7 +70,8 @@ def get_sql_date_trunc(col, db='default', grouper='hour'):
     engine = get_db_engine(db)
     # TODO: does extract work for sqlite?
     if engine.startswith('oracle'):
-        method = DATE_TRUNC_GROUPERS['oracle'].get(grouper, DATE_TRUNC_GROUPERS['default'][grouper])
+        method = DATE_TRUNC_GROUPERS['oracle'].get(
+            grouper, DATE_TRUNC_GROUPERS['default'][grouper])
         if '"' not in col:
             col = '"%s"' % col.upper()
     else:
diff --git a/src/sentry/utils/pytest/selenium.py b/src/sentry/utils/pytest/selenium.py
index f7e22e752f..23c2bf37d0 100644
--- a/src/sentry/utils/pytest/selenium.py
+++ b/src/sentry/utils/pytest/selenium.py
@@ -292,7 +292,8 @@ def format_log(log):
     timestamp_format = '%Y-%m-%d %H:%M:%S.%f'
     entries = [
         u'{0} {1[level]} - {1[message]}'.format(
-            datetime.utcfromtimestamp(entry['timestamp'] / 1000.0).strftime(timestamp_format), entry
+            datetime.utcfromtimestamp(
+                entry['timestamp'] / 1000.0).strftime(timestamp_format), entry
         ).rstrip() for entry in log
     ]
     log = '\n'.join(entries)
diff --git a/src/sentry/utils/samples.py b/src/sentry/utils/samples.py
index 45b7adc1a6..89cd2498ae 100644
--- a/src/sentry/utils/samples.py
+++ b/src/sentry/utils/samples.py
@@ -193,7 +193,8 @@ def load_data(platform, default=None, timestamp=None, sample_name=None):
     return data
 
 
-def create_sample_event(project, platform=None, default=None, raw=True, sample_name=None, **kwargs):
+def create_sample_event(project, platform=None, default=None,
+                        raw=True, sample_name=None, **kwargs):
     if not platform and not default:
         return
 
diff --git a/src/sentry/utils/settings.py b/src/sentry/utils/settings.py
index d2ed459e3d..dba184a35e 100644
--- a/src/sentry/utils/settings.py
+++ b/src/sentry/utils/settings.py
@@ -66,7 +66,8 @@ def validate_dependency(settings, dependency_type, dependency, package):
     try:
         import_string(package)
     except ImportError:
-        msg = ConfigurationError.get_error_message("%s %s" % (dependency_type, dependency), package)
+        msg = ConfigurationError.get_error_message(
+            "%s %s" % (dependency_type, dependency), package)
         reraise_as(ConfigurationError(msg))
 
 
diff --git a/src/sentry/utils/strings.py b/src/sentry/utils/strings.py
index 20928a556f..7e7dd0fd29 100644
--- a/src/sentry/utils/strings.py
+++ b/src/sentry/utils/strings.py
@@ -180,7 +180,10 @@ def tokens_from_name(value, remove_digits=False):
             yield word
 
 
-valid_dot_atom_characters = frozenset(string.ascii_letters + string.digits + ".!#$%&'*+-/=?^_`{|}~")
+valid_dot_atom_characters = frozenset(
+    string.ascii_letters +
+    string.digits +
+    ".!#$%&'*+-/=?^_`{|}~")
 
 
 def is_valid_dot_atom(value):
