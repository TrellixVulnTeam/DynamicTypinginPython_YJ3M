commit 034d6a8b6a468152a70bac65d3755ab674b18782
Author: jeffkwoh <23180853+jeffkwoh@users.noreply.github.com>
Date:   Fri Feb 21 16:34:00 2020 -0800

    feat(analytics): Log snuba queries from event conditions (#17175)
    
    The [Default Alerts](https://www.notion.so/sentry/Default-Alert-Options-450bbbc6f83b4ba29350fb9a59cf5746) project encourages the use of issue alert rules that will query Snuba. This metric monitors the increase in snuba query.

diff --git a/src/sentry/rules/conditions/event_frequency.py b/src/sentry/rules/conditions/event_frequency.py
index 71bda41c47..ff1169f6c4 100644
--- a/src/sentry/rules/conditions/event_frequency.py
+++ b/src/sentry/rules/conditions/event_frequency.py
@@ -1,11 +1,15 @@
 from __future__ import absolute_import
 
+import re
+
 from datetime import timedelta
 from django import forms
 from django.utils import timezone
 
 from sentry import tsdb
+from sentry.receivers.rules import DEFAULT_RULE_LABEL
 from sentry.rules.conditions.base import EventCondition
+from sentry.utils import metrics
 
 intervals = {
     "1m": ("one minute", timedelta(minutes=1)),
@@ -66,6 +70,17 @@ class BaseEventFrequencyCondition(EventCondition):
         return current_value > value
 
     def query(self, event, start, end, environment_id):
+        query_result = self.query_hook(event, start, end, environment_id)
+        metrics.incr(
+            "rules.conditions.queried_snuba",
+            tags={
+                "condition": re.sub("(?!^)([A-Z]+)", r"_\1", self.__class__.__name__).lower(),
+                "is_created_on_project_creation": self.is_guessed_to_be_created_on_project_creation,
+            },
+        )
+        return query_result
+
+    def query_hook(self, event, start, end, environment_id):
         """
         """
         raise NotImplementedError  # subclass must implement
@@ -75,11 +90,22 @@ class BaseEventFrequencyCondition(EventCondition):
         end = timezone.now()
         return self.query(event, end - duration, end, environment_id=environment_id)
 
+    @property
+    def is_guessed_to_be_created_on_project_creation(self):
+        """
+        Best effort approximation on whether a rule with this condition was created on project creation based on how
+        closely the rule and project are created; and if the label matches the default name used on project creation.
+        :return:
+            bool: True if rule is approximated to be created on project creation, False otherwise.
+        """
+        delta = abs(self.rule.date_added - self.project.date_added)
+        return delta.total_seconds() < 30 and self.rule.label == DEFAULT_RULE_LABEL
+
 
 class EventFrequencyCondition(BaseEventFrequencyCondition):
     label = "An issue is seen more than {value} times in {interval}"
 
-    def query(self, event, start, end, environment_id):
+    def query_hook(self, event, start, end, environment_id):
         return self.tsdb.get_sums(
             model=self.tsdb.models.group,
             keys=[event.group_id],
@@ -92,7 +118,7 @@ class EventFrequencyCondition(BaseEventFrequencyCondition):
 class EventUniqueUserFrequencyCondition(BaseEventFrequencyCondition):
     label = "An issue is seen by more than {value} users in {interval}"
 
-    def query(self, event, start, end, environment_id):
+    def query_hook(self, event, start, end, environment_id):
         return self.tsdb.get_distinct_counts_totals(
             model=self.tsdb.models.users_affected_by_group,
             keys=[event.group_id],
