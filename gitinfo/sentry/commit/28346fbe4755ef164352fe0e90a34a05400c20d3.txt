commit 28346fbe4755ef164352fe0e90a34a05400c20d3
Author: Danny Lee <leedongwei@gmail.com>
Date:   Wed Sep 18 22:17:25 2019 -0700

    feat(discover-v2): Define typing for QueryBuilder based on GridEditable

diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
new file mode 100644
index 0000000000..48e2d85720
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
@@ -0,0 +1,93 @@
+export type ColumnValueType = 'numeric' | 'string' | 'unknown';
+
+// todo(leedongwei): Find the correct types
+export const AGGREGATIONS = {
+  latest_event: {
+    type: 'string',
+    isSortable: true,
+  },
+  last_seen: {
+    type: 'string',
+    isSortable: true,
+  },
+  count: {
+    type: 'numeric',
+    isSortable: true,
+  },
+  count_unique: {
+    type: 'numeric',
+    isSortable: true,
+  },
+  rpm: {
+    type: 'numeric',
+    isSortable: true,
+  },
+  pXX: {
+    type: 'numeric',
+    isSortable: true,
+  },
+  avg: {
+    type: 'numeric',
+    isSortable: true,
+  },
+  min: {
+    type: 'numeric',
+    isSortable: true,
+  },
+  max: {
+    type: 'numeric',
+    isSortable: true,
+  },
+  sum: {
+    type: 'numeric',
+    isSortable: true,
+  },
+  cidr: {
+    type: 'unknown',
+    isSortable: true,
+  },
+};
+export type Aggregation = keyof typeof AGGREGATIONS | '';
+
+// todo(leedongwei): Find the correct types
+export const FIELDS = {
+  id: 'string',
+  message: 'string',
+  title: 'string',
+  location: 'string',
+  culprit: 'string',
+  issue: 'string',
+  timestamp: 'string',
+  type: 'string',
+  release: 'string',
+  environment: 'string',
+  'sdk.name': 'string',
+  'sdk.version': 'string',
+  'device.name': 'numeric',
+  'device.brand': 'numeric',
+  'device.locale': 'numeric',
+  'device.model_id': 'numeric',
+  'device.arch': 'numeric',
+  'device.battery_level': 'string',
+  'device.orientation': 'string',
+  'device.simulator': 'string',
+  'device.online': 'string',
+  'device.charging': 'string',
+  'geo.country_code': 'numeric',
+  'geo.region': 'numeric',
+  'geo.city': 'numeric',
+  'error.type': 'string',
+  'error.value': 'string',
+  'error.handled': 'string',
+  'error.mechanism': 'string',
+  'stack.abs_path': 'string',
+  'stack.filename': 'string',
+  'stack.package': 'string',
+  'stack.module': 'string',
+  'stack.function': 'string',
+  'stack.in_app': 'string',
+  'contexts.key': 'string',
+  'contexts.value': 'string',
+  'platform.name': 'string',
+};
+export type Field = keyof typeof FIELDS | '';
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index bf2cdbe32f..4aa6ab384e 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -1,27 +1,20 @@
 import {Location, Query} from 'history';
 import {isString, cloneDeep, pick} from 'lodash';
 
+import {DEFAULT_PER_PAGE} from 'app/constants';
 import {EventViewv1} from 'app/types';
 import {SavedQuery as LegacySavedQuery} from 'app/views/discover/types';
 import {SavedQuery, NewQuery} from 'app/stores/discoverSavedQueriesStore';
-import {DEFAULT_PER_PAGE} from 'app/constants';
 
 import {AUTOLINK_FIELDS, SPECIAL_FIELDS, FIELD_FORMATTERS} from './data';
 import {MetaType, EventQuery, getAggregateAlias} from './utils';
 
-type Descending = {
-  kind: 'desc';
-  field: string;
-};
-
-type Ascending = {
-  kind: 'asc';
+export type Sort = {
+  kind: 'asc' | 'desc';
   field: string;
 };
 
-type Sort = Descending | Ascending;
-
-type Field = {
+export type Field = {
   field: string;
   title: string;
   // TODO: implement later
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tableTypes.tsx b/src/sentry/static/sentry/app/views/eventsV2/tableTypes.tsx
new file mode 100644
index 0000000000..8577026943
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/tableTypes.tsx
@@ -0,0 +1,34 @@
+import {GridColumnOrder, GridColumnSortBy} from 'app/components/gridEditable';
+
+import {ColumnValueType, Aggregation, Field} from './eventQueryParams';
+import {MetaType} from './utils';
+
+/**
+ * It is assumed that `aggregation` and `field` have the same ColumnValueType
+ */
+export type TableColumn<K> = GridColumnOrder<K> & {
+  // key: K                     From GridColumn
+  // name: string               From GridColumnHeader
+  aggregation: Aggregation;
+  field: Field;
+
+  type: ColumnValueType;
+  isSortable: boolean;
+  // isPrimary: boolean         From GridColumnHeader
+};
+
+export type TableColumnSort<K> = GridColumnSortBy<K>;
+
+export type TableState = {
+  columnOrder: TableColumn<keyof TableDataRow>[];
+  columnSortBy: TableColumnSort<keyof TableDataRow>[];
+};
+
+export type TableDataRow = {
+  [key: string]: React.ReactText;
+};
+
+export type TableData = {
+  meta: MetaType;
+  data: Array<TableDataRow>;
+};
