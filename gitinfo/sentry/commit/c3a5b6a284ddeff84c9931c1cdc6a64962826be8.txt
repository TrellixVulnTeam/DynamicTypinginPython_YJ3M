commit c3a5b6a284ddeff84c9931c1cdc6a64962826be8
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Feb 2 11:38:40 2018 -0800

    feat(api): List user's organizations where they are owner (#7136)
    
    Will be required for React UI to close an account

diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
index 1a0af2936c..fe1e629127 100644
--- a/src/sentry/api/endpoints/organization_index.py
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -51,10 +51,12 @@ class OrganizationIndexEndpoint(Endpoint):
 
         :qparam bool member: restrict results to organizations which you have
                              membership
+        :qparam bool owner: restrict results to organizations which are owner
 
         :auth: required
         """
         member_only = request.GET.get('member') in ('1', 'true')
+        owner_only = request.GET.get('owner') in ('1', 'true')
 
         queryset = Organization.objects.all()
 
@@ -63,6 +65,24 @@ class OrganizationIndexEndpoint(Endpoint):
                 queryset = queryset.filter(id=request.auth.project.organization_id)
             elif request.auth.organization is not None:
                 queryset = queryset.filter(id=request.auth.organization.id)
+
+        elif owner_only:
+            # This is used when closing an account
+            queryset = queryset.filter(
+                member_set__role=roles.get_top_dog().id,
+                member_set__user=request.user,
+                status=OrganizationStatus.VISIBLE,
+            )
+            org_results = []
+            for org in sorted(queryset, key=lambda x: x.name):
+                # O(N) query
+                org_results.append({
+                    'organization': serialize(org),
+                    'singleOwner': org.has_single_owner(),
+                })
+
+            return Response(org_results)
+
         elif member_only or not is_active_superuser(request):
             queryset = queryset.filter(
                 id__in=OrganizationMember.objects.filter(
diff --git a/tests/sentry/api/endpoints/test_organization_index.py b/tests/sentry/api/endpoints/test_organization_index.py
index 6385107f9a..26892105f5 100644
--- a/tests/sentry/api/endpoints/test_organization_index.py
+++ b/tests/sentry/api/endpoints/test_organization_index.py
@@ -22,6 +22,36 @@ class OrganizationsListTest(APITestCase):
         assert len(response.data) == 1
         assert response.data[0]['id'] == six.text_type(org.id)
 
+    def test_ownership(self):
+        org = self.create_organization(name="A", owner=self.user)
+        user2 = self.create_user(email="user2@example.com")
+        org2 = self.create_organization(name="B", owner=self.user)
+        org3 = self.create_organization(name="C", owner=user2)
+        self.create_organization(name="D", owner=user2)
+
+        self.create_member(
+            user=user2,
+            organization=org2,
+            role='owner',
+        )
+
+        self.create_member(
+            user=self.user,
+            organization=org3,
+            role='owner',
+        )
+
+        self.login_as(user=self.user)
+        response = self.client.get('{}?owner=1'.format(self.path))
+        assert response.status_code == 200
+        assert len(response.data) == 3
+        assert response.data[0]['organization']['id'] == six.text_type(org.id)
+        assert response.data[0]['singleOwner'] is True
+        assert response.data[1]['organization']['id'] == six.text_type(org2.id)
+        assert response.data[1]['singleOwner'] is False
+        assert response.data[2]['organization']['id'] == six.text_type(org3.id)
+        assert response.data[2]['singleOwner'] is False
+
     def test_status_query(self):
         org = self.create_organization(owner=self.user, status=OrganizationStatus.PENDING_DELETION)
         self.login_as(user=self.user)
