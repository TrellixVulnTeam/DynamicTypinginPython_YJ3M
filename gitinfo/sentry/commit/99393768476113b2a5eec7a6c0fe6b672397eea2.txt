commit 99393768476113b2a5eec7a6c0fe6b672397eea2
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Dec 22 21:23:24 2011 -0800

    Remove haystack entirely

diff --git a/example_project/settings.py b/example_project/settings.py
index 6be5d20288..f2db6408a8 100644
--- a/example_project/settings.py
+++ b/example_project/settings.py
@@ -105,7 +105,6 @@ INSTALLED_APPS = (
     'sentry.plugins.sentry_servers',
     'sentry.plugins.sentry_sites',
     'sentry.plugins.sentry_urls',
-    'haystack',
     'south',
     # Uncomment the next line to enable the admin:
     # 'django.contrib.admin',
@@ -127,10 +126,6 @@ SENTRY_FILTERS = (
     'sentry.filters.ServerNameFilter',
     'sentry.filters.SiteFilter',
 )
-SENTRY_SEARCH_ENGINE = 'whoosh'
-SENTRY_SEARCH_OPTIONS = {
-    'path': os.path.join(PROJECT_ROOT, 'sentry_index'),
-}
 
 try:
     import debug_toolbar
diff --git a/runtests.py b/runtests.py
index 4372a3bc90..6bfe782cba 100644
--- a/runtests.py
+++ b/runtests.py
@@ -57,13 +57,7 @@ if not settings.configured:
         CELERY_ALWAYS_EAGER=True,
         SENTRY_THRASHING_LIMIT=0,
         TEMPLATE_DEBUG=True,
-        HAYSTACK_SITECONF='sentry.search_indexes',
-        HAYSTACK_SEARCH_ENGINE='whoosh',
         SENTRY_KEY=base64.b64encode(os.urandom(40)),
-        SENTRY_SEARCH_ENGINE='whoosh',
-        SENTRY_SEARCH_OPTIONS={
-            'path': join(dirname(__file__), 'sentry_test_index'),
-        },
     )
     import djcelery
     djcelery.setup_loader()
diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 77b52ad88c..1a7ae630b0 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -28,10 +28,6 @@ FILTERS = (
     'sentry.filters.SiteFilter',
 )
 
-# Sentry allows you to specify an alternative search backend for itself
-SEARCH_ENGINE = None
-SEARCH_OPTIONS = {}
-
 KEY = None
 
 LOG_LEVELS = (
diff --git a/sentry/conf/server.py b/sentry/conf/server.py
index ae402ac030..84d6c77144 100644
--- a/sentry/conf/server.py
+++ b/sentry/conf/server.py
@@ -104,16 +104,11 @@ INSTALLED_APPS = (
     'sentry.plugins.sentry_servers',
     'sentry.plugins.sentry_sites',
     'sentry.plugins.sentry_urls',
-    # 'haystack',
     'south',
 )
 
 import logging
 logging.basicConfig(level=logging.WARNING)
 
-SENTRY_SEARCH_ENGINE = 'whoosh'
-SENTRY_SEARCH_OPTIONS = {
-    'path': os.path.join(PROJECT_ROOT, 'sentry_index'),
-}
 SENTRY_PUBLIC = True
-SENTRY_PROJECT = 1
\ No newline at end of file
+SENTRY_PROJECT = 1
diff --git a/sentry/search_indexes.py b/sentry/search_indexes.py
deleted file mode 100644
index cd8c67a44f..0000000000
--- a/sentry/search_indexes.py
+++ /dev/null
@@ -1,63 +0,0 @@
-"""
-sentry.search_indexes
-~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-import haystack
-from haystack.indexes import *
-from haystack.sites import SearchSite
-
-from sentry.conf import settings
-from sentry.utils import to_unicode
-from sentry.models import Group
-
-if settings.SEARCH_ENGINE:
-    # Ensure we stop here if we havent configure Sentry to work under haystack
-
-    backend = haystack.load_backend(settings.SEARCH_ENGINE)
-
-    class SentrySearchSite(SearchSite): pass
-
-    site = SentrySearchSite()
-    site.backend = backend.SearchBackend(site, **settings.SEARCH_OPTIONS)
-
-    class GroupIndex(RealTimeSearchIndex):
-        text = CharField(document=True, stored=False)
-        status = IntegerField(model_attr='status', stored=False, null=True)
-        level = IntegerField(model_attr='level', stored=False, null=True)
-        logger = CharField(model_attr='logger', stored=False, null=True)
-        server = MultiValueField(stored=False, null=True)
-        url = MultiValueField(stored=False, null=True)
-        site = MultiValueField(stored=False, null=True)
-        first_seen = DateTimeField(model_attr='first_seen', stored=False)
-        last_seen = DateTimeField(model_attr='last_seen', stored=False)
-
-        # def get_queryset(self):
-        #     """Used when the entire index for model is updated."""
-        #     return Group.objects.all()
-
-        def get_updated_field(self):
-            return 'last_seen'
-
-        def get_content_field(self):
-            return 'text'
-
-        def prepare_text(self, instance):
-            chunks = [instance.message, instance.culprit]
-            chunks.extend(self.prepare_url(instance))
-            return '\n'.join(map(to_unicode, filter(None, chunks)))
-
-        def prepare_server(self, instance):
-            return [to_unicode(s[0]) for s in instance.unique_servers]
-
-        def prepare_site(self, instance):
-            return [to_unicode(s[0]) for s in instance.unique_sites]
-
-        def prepare_url(self, instance):
-            return [to_unicode(s[0]) for s in instance.unique_urls]
-
-
-    site.register(Group, GroupIndex)
diff --git a/sentry/web/frontend/groups.py b/sentry/web/frontend/groups.py
index 2be30fcc7a..20da640925 100644
--- a/sentry/web/frontend/groups.py
+++ b/sentry/web/frontend/groups.py
@@ -24,7 +24,7 @@ from sentry.plugins import GroupActionProvider
 from sentry.templatetags.sentry_helpers import with_priority
 from sentry.utils import get_filters, json
 from sentry.web.decorators import can_manage, login_required
-from sentry.web.helpers import render_to_response, get_search_query_set, \
+from sentry.web.helpers import render_to_response, \
     get_project_list
 
 uuid_re = re.compile(r'^[a-z0-9]{32}$', re.I)
@@ -164,7 +164,6 @@ def ajax_handler(request):
 @can_manage('read_message')
 def search(request, project):
     query = request.GET.get('q')
-    has_search = bool(settings.SEARCH_ENGINE)
 
     if query:
         result = event_re.match(query)
@@ -175,10 +174,7 @@ def search(request, project):
             event_list = Group.objects.filter(checksum=checksum)
             top_matches = event_list[:2]
             if len(top_matches) == 0:
-                if not has_search:
-                    return render_to_response('sentry/invalid_message_id.html')
-                else:
-                    event_list = get_search_query_set(query)
+                return render_to_response('sentry/invalid_message_id.html')
             elif len(top_matches) == 1:
                 return HttpResponseRedirect(top_matches[0].get_absolute_url())
         elif uuid_re.match(query):
@@ -186,16 +182,11 @@ def search(request, project):
             try:
                 message = Event.objects.get(event_id=query)
             except Event.DoesNotExist:
-                if not has_search:
-                    return render_to_response('sentry/invalid_message_id.html')
-                else:
-                    event_list = get_search_query_set(query)
+                return render_to_response('sentry/invalid_message_id.html')
             else:
                 return HttpResponseRedirect(message.get_absolute_url())
-        elif not has_search:
-            return render_to_response('sentry/invalid_message_id.html')
         else:
-            event_list = get_search_query_set(query)
+            return render_to_response('sentry/invalid_message_id.html')
     else:
         event_list = Group.objects.none()
 
diff --git a/sentry/web/helpers.py b/sentry/web/helpers.py
index 7680bdcc42..6d4de51b18 100644
--- a/sentry/web/helpers.py
+++ b/sentry/web/helpers.py
@@ -49,7 +49,7 @@ def iter_data(obj):
 
 def render_to_string(template, context={}):
     context.update({
-        'has_search': bool(settings.SEARCH_ENGINE),
+        'has_search': False,
         'MESSAGES_PER_PAGE': settings.MESSAGES_PER_PAGE,
     })
 
@@ -60,25 +60,3 @@ def render_to_response(template, context={}, status=200):
     response.status_code = status
 
     return response
-
-def get_search_query_set(query):
-    from haystack.query import SearchQuerySet
-    from sentry.search_indexes import site, backend
-
-    class SentrySearchQuerySet(SearchQuerySet):
-        "Returns actual instances rather than search results."
-
-        def __getitem__(self, k):
-            result = []
-            for r in super(SentrySearchQuerySet, self).__getitem__(k):
-                inst = r.object
-                if not inst:
-                    continue
-                inst.score = r.score
-                result.append(inst)
-            return result
-
-    return SentrySearchQuerySet(
-        site=site,
-        query=backend.SearchQuery(backend=site.backend),
-    ).filter(content=query)
diff --git a/setup.py b/setup.py
index d960b5dbb5..1495397ebb 100755
--- a/setup.py
+++ b/setup.py
@@ -42,9 +42,6 @@ setup(
     packages=find_packages(exclude=("example_project", "tests")),
     zip_safe=False,
     install_requires=install_requires,
-    # dependency_links=[
-    #     'https://github.com/disqus/django-haystack/tarball/master#egg=django-haystack',
-    # ],
     tests_require=tests_require,
     extras_require={'test': tests_require},
     test_suite='runtests.runtests',
diff --git a/tests/tests.py b/tests/tests.py
index 487317ebbb..c8c4aa6459 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -448,15 +448,6 @@ class SentryCleanupTest(TestCase):
         self.assertEquals(MessageFilterValue.objects.count(), 0)
 
 class SentrySearchTest(TestCase):
-    @conditional_on_module('haystack')
-    def test_build_index(self):
-        from sentry.web.views import get_search_query_set
-        logger.error('test search error')
-
-        qs = get_search_query_set('error')
-        self.assertEquals(qs.count(), 1)
-        self.assertEquals(qs[0:1][0].message, 'test search error')
-
     def test_checksum_query(self):
         checksum = 'a'*32
         g = Group.objects.create(
