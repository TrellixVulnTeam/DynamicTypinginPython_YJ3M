commit 2b310a8b6b363a401595e7d7bf0e762654da7035
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 21 11:47:22 2015 -0800

    Use AggregateListStore on details

diff --git a/src/sentry/static/sentry/app/components/aggregateDetails.jsx b/src/sentry/static/sentry/app/components/aggregateDetails.jsx
index f5b2fd393f..66e63cdde6 100644
--- a/src/sentry/static/sentry/app/components/aggregateDetails.jsx
+++ b/src/sentry/static/sentry/app/components/aggregateDetails.jsx
@@ -5,6 +5,7 @@ var Reflux = require("reflux");
 var Router = require("react-router");
 
 var api = require("../api");
+var AggregateListStore = require("../stores/aggregateListStore");
 var AssigneeSelector = require("./assigneeSelector");
 var Count = require("./count");
 var MemberListStore = require("../stores/memberListStore");
@@ -108,7 +109,10 @@ var AggregateHeader = React.createClass({
 });
 
 var AggregateDetails = React.createClass({
-  mixins: [Router.State],
+  mixins: [
+    Reflux.connect(AggregateListStore, "aggList"),
+    Router.State
+  ],
 
   propTypes: {
     memberList: React.PropTypes.instanceOf(Array).isRequired
@@ -116,7 +120,7 @@ var AggregateDetails = React.createClass({
 
   getInitialState: function() {
     return {
-      aggregate: null,
+      aggList: new utils.Collection(),
       statsPeriod: '24h'
     };
   },
@@ -124,9 +128,7 @@ var AggregateDetails = React.createClass({
   componentWillMount: function() {
     api.request(this.getAggregateDetailsEndpoint(), {
       success: function(data, textStatus, jqXHR) {
-        this.setState({
-          aggregate: data
-        });
+        AggregateListStore.loadInitialData([data]);
       }.bind(this)
     });
   },
@@ -135,23 +137,27 @@ var AggregateDetails = React.createClass({
     return '/groups/' + this.getParams().aggregateId + '/';
   },
 
+  getAggregate: function() {
+    var id = this.getParams().aggregateId;
+    return this.state.aggList.get(id);
+  },
+
   render: function() {
-    var data = this.state.aggregate;
+    var aggregate = this.getAggregate();
 
-    if (!data) {
+    if (!aggregate) {
       return <div />;
     }
 
     return (
       <div className={this.props.className}>
         <AggregateHeader
-            aggregate={this.state.aggregate}
+            aggregate={aggregate}
             statsPeriod={this.state.statsPeriod}
             memberList={this.props.memberList} />
         <div className="box">
           <div className="box-content with-padding">
-            <AggregateChart
-                aggregate={this.state.aggregate} />
+            <AggregateChart aggregate={aggregate} />
           </div>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/components/stream.jsx b/src/sentry/static/sentry/app/components/stream.jsx
index 93ea002887..bf0173a216 100644
--- a/src/sentry/static/sentry/app/components/stream.jsx
+++ b/src/sentry/static/sentry/app/components/stream.jsx
@@ -159,9 +159,6 @@ var Stream = React.createClass({
 
     return {
       aggList: new utils.Collection([], {
-        equals: function(self, other) {
-          return self.id === other.id;
-        },
         limit: 50
       }),
       selectAllActive: false,
diff --git a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
index 040791752b..0fc69e0e49 100644
--- a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
+++ b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
@@ -14,9 +14,6 @@ var AggregateListStore = Reflux.createStore({
     // list and have stream add/remove items as they're modified within stream
     // itself
     this.items = new utils.Collection([], {
-      equals: function(self, other) {
-        return self.id === other.id;
-      },
       limit: 50
     });
 
diff --git a/src/sentry/static/sentry/app/utils/collection.jsx b/src/sentry/static/sentry/app/utils/collection.jsx
index 30731c0748..5c88864fea 100644
--- a/src/sentry/static/sentry/app/utils/collection.jsx
+++ b/src/sentry/static/sentry/app/utils/collection.jsx
@@ -2,8 +2,8 @@
 
 var defaults = {
   limit: null,
-  equals: function(item, other) {
-    return item.id == other.id;
+  key: function(item) {
+    return item.id;
   }
 };
 
@@ -17,7 +17,7 @@ function Collection(collection, options) {
   }
 
   for (i in defaults) {
-    if (typeof options[i] !== "undefined") {
+    if (typeof options[i] === "undefined") {
       options[i] = defaults[i];
     }
   }
@@ -74,8 +74,16 @@ Collection.prototype.unshift = function unshift(items) {
   return this;
 };
 
+Collection.prototype.get = function get(key) {
+  var idx = this.indexOf(key);
+  if (idx === -1) {
+    return;
+  }
+  return this[idx];
+};
+
 Collection.prototype.pop = function pop(item) {
-  var idx = this.indexOf(item);
+  var idx = this.indexOf(this.options.key(item));
   if (idx === -1) {
     return;
   }
@@ -88,9 +96,10 @@ Collection.prototype.empty = function empty() {
   this.splice(0, 0);
 };
 
-Collection.prototype.indexOf = function indexOf(item) {
+Collection.prototype.indexOf = function indexOf(key) {
+  var keyFunc = this.options.key;
   for (var i = 0; i < this.length; i++) {
-    if (this.options.equals(this[i], item)) {
+    if (keyFunc(this[i]) === key) {
       return i;
     }
   }
@@ -99,7 +108,7 @@ Collection.prototype.indexOf = function indexOf(item) {
 
 Collection.prototype.update = function update(item) {
   // returns true if the item already existed and was updated (as configured)
-  var existing = this.indexOf(item);
+  var existing = this.indexOf(this.options.key(item));
   if (existing !== -1) {
     $.extend(true, this[existing], item);
     return true;
