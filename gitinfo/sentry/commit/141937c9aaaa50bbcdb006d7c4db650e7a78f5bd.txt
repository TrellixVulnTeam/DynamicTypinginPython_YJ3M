commit 141937c9aaaa50bbcdb006d7c4db650e7a78f5bd
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Mon Feb 27 15:43:23 2017 -0800

    move release file endpoints to organization path (#4871)
    
    * move release file endpoints to organization path
    
    * fix url name
    
    * update changes
    
    * make use of ConditionalContentNegotiation DRY-er

diff --git a/CHANGES b/CHANGES
index f42b7f2002..9ccc290671 100644
--- a/CHANGES
+++ b/CHANGES
@@ -24,6 +24,8 @@ API Changes
 - Added context type ``app`` for cocoa events.
 - Added ``assignedTo`` param to ``/projects/{org}/{project}/issues/``.
 - Split out filtered stats onto Inbound Data Filters page
+- Added OrganizationReleasesEndpoint
+- Added OrganizationReleaseFileEndpoint
 
 Schema Changes
 ~~~~~~~~~~~~~~
diff --git a/src/sentry/api/content_negotiation.py b/src/sentry/api/content_negotiation.py
new file mode 100644
index 0000000000..24795c7385
--- /dev/null
+++ b/src/sentry/api/content_negotiation.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+
+from rest_framework.negotiation import DefaultContentNegotiation
+from rest_framework.parsers import FormParser, MultiPartParser
+
+
+class ConditionalContentNegotiation(DefaultContentNegotiation):
+    """
+    Overrides the parsers on POST to support file uploads.
+    """
+    def select_parser(self, request, parsers):
+        if request.method == 'POST':
+            parsers = [FormParser(), MultiPartParser()]
+
+        return super(ConditionalContentNegotiation, self).select_parser(
+            request, parsers
+        )
diff --git a/src/sentry/api/endpoints/dsym_files.py b/src/sentry/api/endpoints/dsym_files.py
index a3ae44e83b..bb5e6b7f14 100644
--- a/src/sentry/api/endpoints/dsym_files.py
+++ b/src/sentry/api/endpoints/dsym_files.py
@@ -1,12 +1,11 @@
 from __future__ import absolute_import
 
-from rest_framework.negotiation import DefaultContentNegotiation
-from rest_framework.parsers import FormParser, MultiPartParser
 from rest_framework.response import Response
 
 from sentry.api.base import DocSection
 from sentry.api.base import Endpoint
 from sentry.api.bases.project import ProjectEndpoint, ProjectReleasePermission
+from sentry.api.content_negotiation import ConditionalContentNegotiation
 from sentry.api.permissions import SystemPermission
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
@@ -24,19 +23,6 @@ def upload_from_request(request, project=None):
     return Response(serialize(files, request.user), status=201)
 
 
-class ConditionalContentNegotiation(DefaultContentNegotiation):
-    """
-    Overrides the parsers on POST to support file uploads.
-    """
-    def select_parser(self, request, parsers):
-        if request.method == 'POST':
-            parsers = [FormParser(), MultiPartParser()]
-
-        return super(ConditionalContentNegotiation, self).select_parser(
-            request, parsers
-        )
-
-
 class DSymFilesEndpoint(ProjectEndpoint):
     doc_section = DocSection.PROJECTS
     permission_classes = (ProjectReleasePermission,)
diff --git a/src/sentry/api/endpoints/organization_release_file_details.py b/src/sentry/api/endpoints/organization_release_file_details.py
new file mode 100644
index 0000000000..76b23bef58
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_release_file_details.py
@@ -0,0 +1,157 @@
+from __future__ import absolute_import
+import posixpath
+
+from rest_framework import serializers
+from rest_framework.response import Response
+
+from sentry.api.base import DocSection
+from sentry.api.bases.organization import OrganizationReleasesBaseEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.serializers import serialize
+from sentry.models import Release, ReleaseFile
+from django.http import CompatibleStreamingHttpResponse
+
+
+class ReleaseFileSerializer(serializers.Serializer):
+    name = serializers.CharField(max_length=200, required=True)
+
+
+class OrganizationReleaseFileDetailsEndpoint(OrganizationReleasesBaseEndpoint):
+    doc_section = DocSection.RELEASES
+
+    def download(self, releasefile):
+        file = releasefile.file
+        fp = file.getfile()
+        response = CompatibleStreamingHttpResponse(
+            iter(lambda: fp.read(4096), b''),
+            content_type=file.headers.get('content-type', 'application/octet-stream'),
+        )
+        response['Content-Length'] = file.size
+        response['Content-Disposition'] = 'attachment; filename="%s"' % posixpath.basename(" ".join(releasefile.name.split()))
+        return response
+
+    def get(self, request, organization, version, file_id):
+        """
+        Retrieve an Organization Release's File
+        ```````````````````````````````````````
+
+        Return details on an individual file within a release.  This does
+        not actually return the contents of the file, just the associated
+        metadata.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          release belongs to.
+        :pparam string version: the version identifier of the release.
+        :pparam string file_id: the ID of the file to retrieve.
+        :auth: required
+        """
+        try:
+            release = Release.objects.get(
+                organization_id=organization.id,
+                projects=self.get_allowed_projects(request, organization),
+                version=version,
+            )
+        except Release.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        try:
+            releasefile = ReleaseFile.objects.get(
+                release=release,
+                id=file_id,
+            )
+        except ReleaseFile.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        download_requested = request.GET.get('download') is not None
+        if download_requested and (
+           request.access.has_scope('project:write')):
+            return self.download(releasefile)
+        elif download_requested:
+            return Response(status=403)
+        return Response(serialize(releasefile, request.user))
+
+    def put(self, request, organization, version, file_id):
+        """
+        Update an Organization Release's File
+        `````````````````````````````````````
+
+        Update metadata of an existing file.  Currently only the name of
+        the file can be changed.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          release belongs to.
+        :pparam string version: the version identifier of the release.
+        :pparam string file_id: the ID of the file to update.
+        :param string name: the new name of the file.
+        :auth: required
+        """
+        try:
+            release = Release.objects.get(
+                organization_id=organization.id,
+                projects=self.get_allowed_projects(request, organization),
+                version=version,
+            )
+        except Release.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        try:
+            releasefile = ReleaseFile.objects.get(
+                release=release,
+                id=file_id,
+            )
+        except ReleaseFile.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        serializer = ReleaseFileSerializer(data=request.DATA)
+
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
+
+        result = serializer.object
+
+        releasefile.update(
+            name=result['name'],
+        )
+
+        return Response(serialize(releasefile, request.user))
+
+    def delete(self, request, organization, version, file_id):
+        """
+        Delete an Organization Release's File
+        `````````````````````````````````````
+
+        Permanently remove a file from a release.
+
+        This will also remove the physical file from storage.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          release belongs to.
+        :pparam string version: the version identifier of the release.
+        :pparam string file_id: the ID of the file to delete.
+        :auth: required
+        """
+        try:
+            release = Release.objects.get(
+                organization_id=organization.id,
+                projects=self.get_allowed_projects(request, organization),
+                version=version,
+            )
+        except Release.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        try:
+            releasefile = ReleaseFile.objects.get(
+                release=release,
+                id=file_id,
+            )
+        except ReleaseFile.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        file = releasefile.file
+
+        # TODO(dcramer): this doesnt handle a failure from file.deletefile() to
+        # the actual deletion of the db row
+        releasefile.delete()
+        file.delete()
+
+        return Response(status=204)
diff --git a/src/sentry/api/endpoints/organization_release_files.py b/src/sentry/api/endpoints/organization_release_files.py
new file mode 100644
index 0000000000..935387d9c8
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_release_files.py
@@ -0,0 +1,137 @@
+from __future__ import absolute_import
+
+import re
+from django.db import IntegrityError, transaction
+from rest_framework.response import Response
+
+from sentry.api.base import DocSection
+from sentry.api.bases.organization import OrganizationReleasesBaseEndpoint
+from sentry.api.content_negotiation import ConditionalContentNegotiation
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.paginator import OffsetPaginator
+from sentry.api.serializers import serialize
+from sentry.models import File, Release, ReleaseFile
+
+ERR_FILE_EXISTS = 'A file matching this name already exists for the given release'
+_filename_re = re.compile(r"[\n\t\r\f\v\\]")
+
+
+class OrganizationReleaseFilesEndpoint(OrganizationReleasesBaseEndpoint):
+    doc_section = DocSection.RELEASES
+    content_negotiation_class = ConditionalContentNegotiation
+
+    def get(self, request, organization, version):
+        """
+        List a Release's Files
+        ``````````````````````
+
+        Retrieve a list of files for a given release.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          release belongs to.
+        :pparam string version: the version identifier of the release.
+        :auth: required
+        """
+        try:
+            release = Release.objects.get(
+                organization_id=organization.id,
+                projects=self.get_allowed_projects(request, organization),
+                version=version,
+            )
+        except Release.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        file_list = ReleaseFile.objects.filter(
+            release=release,
+        ).select_related('file').order_by('name')
+
+        return self.paginate(
+            request=request,
+            queryset=file_list,
+            order_by='name',
+            paginator_cls=OffsetPaginator,
+            on_results=lambda x: serialize(x, request.user),
+        )
+
+    def post(self, request, organization, version):
+        """
+        Upload a New File
+        `````````````````
+
+        Upload a new file for the given release.
+
+        Unlike other API requests, files must be uploaded using the
+        traditional multipart/form-data content-type.
+
+        The optional 'name' attribute should reflect the absolute path
+        that this file will be referenced as. For example, in the case of
+        JavaScript you might specify the full web URI.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          release belongs to.
+        :pparam string version: the version identifier of the release.
+        :param string name: the name (full path) of the file.
+        :param file file: the multipart encoded file.
+        :param string header: this parameter can be supplied multiple times
+                              to attach headers to the file.  Each header
+                              is a string in the format ``key:value``.  For
+                              instance it can be used to define a content
+                              type.
+        :auth: required
+        """
+        try:
+            release = Release.objects.get(
+                organization_id=organization.id,
+                projects=self.get_allowed_projects(request, organization),
+                version=version,
+            )
+        except Release.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        if 'file' not in request.FILES:
+            return Response({'detail': 'Missing uploaded file'}, status=400)
+
+        fileobj = request.FILES['file']
+
+        full_name = request.DATA.get('name', fileobj.name)
+        if not full_name:
+            return Response({'detail': 'File name must be specified'}, status=400)
+
+        name = full_name.rsplit('/', 1)[-1]
+
+        if _filename_re.search(name):
+            return Response({'detail': 'File name must not contain special whitespace characters'}, status=400)
+
+        headers = {
+            'Content-Type': fileobj.content_type,
+        }
+        for headerval in request.DATA.getlist('header') or ():
+            try:
+                k, v = headerval.split(':', 1)
+            except ValueError:
+                return Response({'detail': 'header value was not formatted correctly'}, status=400)
+            else:
+                if _filename_re.search(v):
+                    return Response({'detail': 'header value must not contain special whitespace characters'}, status=400)
+                headers[k] = v.strip()
+
+        file = File.objects.create(
+            name=name,
+            type='release.file',
+            headers=headers,
+        )
+        file.putfile(fileobj)
+
+        try:
+            with transaction.atomic():
+                releasefile = ReleaseFile.objects.create(
+                    organization_id=release.organization_id,
+                    release=release,
+                    file=file,
+                    name=full_name,
+                )
+        except IntegrityError:
+            file.delete()
+            return Response({'detail': ERR_FILE_EXISTS}, status=409)
+
+        return Response(serialize(releasefile, request.user), status=201)
diff --git a/src/sentry/api/endpoints/release_file_details.py b/src/sentry/api/endpoints/project_release_file_details.py
similarity index 98%
rename from src/sentry/api/endpoints/release_file_details.py
rename to src/sentry/api/endpoints/project_release_file_details.py
index 89136ba3f2..e88e9377ee 100644
--- a/src/sentry/api/endpoints/release_file_details.py
+++ b/src/sentry/api/endpoints/project_release_file_details.py
@@ -68,7 +68,7 @@ class ReleaseFileSerializer(serializers.Serializer):
     name = serializers.CharField(max_length=200, required=True)
 
 
-class ReleaseFileDetailsEndpoint(ProjectEndpoint):
+class ProjectReleaseFileDetailsEndpoint(ProjectEndpoint):
     doc_section = DocSection.RELEASES
     permission_classes = (ProjectReleasePermission,)
 
@@ -86,8 +86,8 @@ class ReleaseFileDetailsEndpoint(ProjectEndpoint):
     @attach_scenarios([retrieve_file_scenario])
     def get(self, request, project, version, file_id):
         """
-        Retrieve a File
-        ```````````````
+        Retrieve a Project Release's File
+        `````````````````````````````````
 
         Return details on an individual file within a release.  This does
         not actually return the contents of the file, just the associated
diff --git a/src/sentry/api/endpoints/release_files.py b/src/sentry/api/endpoints/project_release_files.py
similarity index 91%
rename from src/sentry/api/endpoints/release_files.py
rename to src/sentry/api/endpoints/project_release_files.py
index 6a47b9cd01..2981fa596b 100644
--- a/src/sentry/api/endpoints/release_files.py
+++ b/src/sentry/api/endpoints/project_release_files.py
@@ -3,12 +3,11 @@ from __future__ import absolute_import
 import re
 from django.db import IntegrityError, transaction
 from six import BytesIO
-from rest_framework.negotiation import DefaultContentNegotiation
-from rest_framework.parsers import FormParser, MultiPartParser
 from rest_framework.response import Response
 
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint, ProjectReleasePermission
+from sentry.api.content_negotiation import ConditionalContentNegotiation
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
@@ -51,20 +50,7 @@ def list_files_scenario(runner):
     )
 
 
-class ConditionalContentNegotiation(DefaultContentNegotiation):
-    """
-    Overrides the parsers on POST to support file uploads.
-    """
-    def select_parser(self, request, parsers):
-        if request.method == 'POST':
-            parsers = [FormParser(), MultiPartParser()]
-
-        return super(ConditionalContentNegotiation, self).select_parser(
-            request, parsers
-        )
-
-
-class ReleaseFilesEndpoint(ProjectEndpoint):
+class ProjectReleaseFilesEndpoint(ProjectEndpoint):
     doc_section = DocSection.RELEASES
     content_negotiation_class = ConditionalContentNegotiation
     permission_classes = (ProjectReleasePermission,)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index d4751c8f53..77006b29e8 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -44,6 +44,8 @@ from .endpoints.organization_index import OrganizationIndexEndpoint
 from .endpoints.organization_projects import OrganizationProjectsEndpoint
 from .endpoints.organization_releases import OrganizationReleasesEndpoint
 from .endpoints.organization_release_details import OrganizationReleaseDetailsEndpoint
+from .endpoints.organization_release_files import OrganizationReleaseFilesEndpoint
+from .endpoints.organization_release_file_details import OrganizationReleaseFileDetailsEndpoint
 from .endpoints.organization_repositories import OrganizationRepositoriesEndpoint
 from .endpoints.organization_config_repositories import OrganizationConfigRepositoriesEndpoint
 from .endpoints.organization_repository_commits import OrganizationRepositoryCommitsEndpoint
@@ -81,8 +83,8 @@ from .endpoints.project_processingissues import ProjectProcessingIssuesEndpoint
 from .endpoints.project_reprocessing import ProjectReprocessingEndpoint
 from .endpoints.release_commits import ReleaseCommitsEndpoint
 from .endpoints.project_release_details import ProjectReleaseDetailsEndpoint
-from .endpoints.release_files import ReleaseFilesEndpoint
-from .endpoints.release_file_details import ReleaseFileDetailsEndpoint
+from .endpoints.project_release_files import ProjectReleaseFilesEndpoint
+from .endpoints.project_release_file_details import ProjectReleaseFileDetailsEndpoint
 from .endpoints.dsym_files import DSymFilesEndpoint, GlobalDSymFilesEndpoint, \
     UnknownDSymFilesEndpoint, UnknownGlobalDSymFilesEndpoint
 from .endpoints.shared_group_details import SharedGroupDetailsEndpoint
@@ -207,6 +209,12 @@ urlpatterns = patterns(
     url(r'^organizations/(?P<organization_slug>[^\/]+)/releases/(?P<version>[^/]+)/$',
         OrganizationReleaseDetailsEndpoint.as_view(),
         name='sentry-api-0-organization-release-details'),
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/releases/(?P<version>[^/]+)/files/$',
+        OrganizationReleaseFilesEndpoint.as_view(),
+        name='sentry-api-0-organization-release-files'),
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/releases/(?P<version>[^/]+)/files/(?P<file_id>\d+)/$',
+        OrganizationReleaseFileDetailsEndpoint.as_view(),
+        name='sentry-api-0-organization-release-file-details'),
     url(r'^organizations/(?P<organization_slug>[^\/]+)/stats/$',
         OrganizationStatsEndpoint.as_view(),
         name='sentry-api-0-organization-stats'),
@@ -295,11 +303,11 @@ urlpatterns = patterns(
         ReleaseCommitsEndpoint.as_view(),
         name='sentry-api-0-release-commits'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/releases/(?P<version>[^/]+)/files/$',
-        ReleaseFilesEndpoint.as_view(),
-        name='sentry-api-0-release-files'),
+        ProjectReleaseFilesEndpoint.as_view(),
+        name='sentry-api-0-project-release-files'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/releases/(?P<version>[^/]+)/files/(?P<file_id>\d+)/$',
-        ReleaseFileDetailsEndpoint.as_view(),
-        name='sentry-api-0-release-file-details'),
+        ProjectReleaseFileDetailsEndpoint.as_view(),
+        name='sentry-api-0-project-release-file-details'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/files/dsyms/$',
         DSymFilesEndpoint.as_view(),
         name='sentry-api-0-dsym-files'),
diff --git a/tests/sentry/api/endpoints/test_organization_release_file_details.py b/tests/sentry/api/endpoints/test_organization_release_file_details.py
new file mode 100644
index 0000000000..9deacb1744
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_release_file_details.py
@@ -0,0 +1,163 @@
+from __future__ import absolute_import
+
+import six
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import File, Release, ReleaseFile
+from sentry.testutils import APITestCase
+
+
+class ReleaseFileDetailsTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project(name='foo')
+
+        release = Release.objects.create(
+            organization_id=project.organization_id,
+            version='1',
+        )
+        release.add_project(project)
+
+        releasefile = ReleaseFile.objects.create(
+            organization_id=project.organization_id,
+            release=release,
+            file=File.objects.create(
+                name='application.js',
+                type='release.file',
+            ),
+            name='http://example.com/application.js'
+        )
+
+        url = reverse('sentry-api-0-organization-release-file-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'version': release.version,
+            'file_id': releasefile.id,
+        })
+
+        response = self.client.get(url)
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == six.text_type(releasefile.id)
+
+    def test_file_download(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project(name='foo')
+
+        release = Release.objects.create(
+            organization_id=project.organization_id,
+            version='1',
+        )
+        release.add_project(project)
+
+        from six import BytesIO
+        f = File.objects.create(
+            name='applicatiosn.js',
+            type='release.file',
+        )
+        f.putfile(BytesIO('File contents here'))
+
+        releasefile = ReleaseFile.objects.create(
+            organization_id=project.organization_id,
+            project_id=project.id,
+            release=release,
+            file=f,
+            name='  http://example.com/appli\n\rcatios n.js\n\n\r  '
+        )
+
+        url = reverse('sentry-api-0-organization-release-file-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'version': release.version,
+            'file_id': releasefile.id,
+        })
+
+        response = self.client.get(url + '?download=1')
+        assert response.status_code == 200, response.content
+        assert response.get('Content-Disposition') == 'attachment; filename="appli catios n.js"'
+        assert response.get('Content-Length') == six.text_type(f.size)
+        assert response.get('Content-Type') == 'application/octet-stream'
+        assert 'File contents here' == BytesIO(b"".join(response.streaming_content)).getvalue()
+
+        user_no_permission = self.create_user('baz@localhost', username='baz')
+        self.login_as(user=user_no_permission)
+        response = self.client.get(url + '?download=1')
+        assert response.status_code == 403, response.content
+
+
+class ReleaseFileUpdateTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project(name='foo')
+
+        release = Release.objects.create(
+            organization_id=project.organization_id,
+            version='1',
+        )
+        release.add_project(project)
+
+        releasefile = ReleaseFile.objects.create(
+            organization_id=project.organization_id,
+            release=release,
+            file=File.objects.create(
+                name='application.js',
+                type='release.file',
+            ),
+            name='http://example.com/application.js'
+        )
+
+        url = reverse('sentry-api-0-organization-release-file-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'version': release.version,
+            'file_id': releasefile.id,
+        })
+
+        response = self.client.put(url, {
+            'name': 'foobar',
+        })
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == six.text_type(releasefile.id)
+
+        releasefile = ReleaseFile.objects.get(id=releasefile.id)
+        assert releasefile.name == 'foobar'
+        assert releasefile.ident == ReleaseFile.get_ident('foobar')
+
+
+class ReleaseFileDeleteTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project(name='foo')
+
+        release = Release.objects.create(
+            project_id=project.id,
+            organization_id=project.organization_id,
+            version='1',
+        )
+        release.add_project(project)
+
+        releasefile = ReleaseFile.objects.create(
+            organization_id=project.organization_id,
+            release=release,
+            file=File.objects.create(
+                name='application.js',
+                type='release.file',
+            ),
+            name='http://example.com/application.js'
+        )
+
+        url = reverse('sentry-api-0-organization-release-file-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'version': release.version,
+            'file_id': releasefile.id,
+        })
+
+        response = self.client.delete(url)
+
+        assert response.status_code == 204, response.content
+
+        assert not ReleaseFile.objects.filter(id=releasefile.id).exists()
+        assert not File.objects.filter(id=releasefile.file.id).exists()
diff --git a/tests/sentry/api/endpoints/test_organization_release_files.py b/tests/sentry/api/endpoints/test_organization_release_files.py
new file mode 100644
index 0000000000..f0ea04299f
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_release_files.py
@@ -0,0 +1,223 @@
+from __future__ import absolute_import
+
+import six
+
+from django.core.files.uploadedfile import SimpleUploadedFile
+from django.core.urlresolvers import reverse
+
+from sentry.models import File, Release, ReleaseFile
+from sentry.testutils import APITestCase
+
+
+class ReleaseFilesListTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project(name='foo')
+
+        release = Release.objects.create(
+            organization_id=project.organization_id,
+            version='1',
+        )
+        release.add_project(project)
+
+        releasefile = ReleaseFile.objects.create(
+            organization_id=project.organization_id,
+            release=release,
+            file=File.objects.create(
+                name='application.js',
+                type='release.file',
+            ),
+            name='http://example.com/application.js'
+        )
+
+        url = reverse('sentry-api-0-organization-release-files', kwargs={
+            'organization_slug': project.organization.slug,
+            'version': release.version,
+        })
+
+        self.login_as(user=self.user)
+
+        response = self.client.get(url)
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == six.text_type(releasefile.id)
+
+
+class ReleaseFileCreateTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project(name='foo')
+
+        release = Release.objects.create(
+            organization_id=project.organization_id,
+            version='1',
+        )
+        release.add_project(project)
+
+        url = reverse('sentry-api-0-organization-release-files', kwargs={
+            'organization_slug': project.organization.slug,
+            'version': release.version,
+        })
+
+        self.login_as(user=self.user)
+
+        response = self.client.post(url, {
+            'name': 'http://example.com/application.js',
+            'header': 'X-SourceMap: http://example.com',
+            'file': SimpleUploadedFile('application.js', b'function() { }',
+                                       content_type='application/javascript'),
+        }, format='multipart')
+
+        assert response.status_code == 201, response.content
+
+        releasefile = ReleaseFile.objects.get(release=release)
+        assert releasefile.name == 'http://example.com/application.js'
+        assert releasefile.ident == ReleaseFile.get_ident('http://example.com/application.js')
+        assert releasefile.file.headers == {
+            'Content-Type': 'application/javascript',
+            'X-SourceMap': 'http://example.com',
+        }
+
+    def test_no_file(self):
+        project = self.create_project(name='foo')
+
+        release = Release.objects.create(
+            organization_id=project.organization_id,
+            version='1',
+        )
+        release.add_project(project)
+
+        url = reverse('sentry-api-0-organization-release-files', kwargs={
+            'organization_slug': project.organization.slug,
+            'version': release.version,
+        })
+
+        self.login_as(user=self.user)
+
+        response = self.client.post(url, {
+            'header': 'X-SourceMap: http://example.com',
+        }, format='multipart')
+
+        assert response.status_code == 400, response.content
+
+    def test_missing_name(self):
+        project = self.create_project(name='foo')
+
+        release = Release.objects.create(
+            organization_id=project.organization_id,
+            version='1',
+        )
+        release.add_project(project)
+
+        url = reverse('sentry-api-0-organization-release-files', kwargs={
+            'organization_slug': project.organization.slug,
+            'version': release.version,
+        })
+
+        self.login_as(user=self.user)
+
+        response = self.client.post(url, {
+            'header': 'X-SourceMap: http://example.com',
+            'file': SimpleUploadedFile('', b'function() { }',
+                                       content_type='application/javascript'),
+        }, format='multipart')
+
+        assert response.status_code == 400, response.content
+
+    def test_invalid_name(self):
+        project = self.create_project(name='foo')
+
+        release = Release.objects.create(
+            organization_id=project.organization_id,
+            version='1',
+        )
+        release.add_project(project)
+
+        url = reverse('sentry-api-0-organization-release-files', kwargs={
+            'organization_slug': project.organization.slug,
+            'version': release.version,
+        })
+
+        self.login_as(user=self.user)
+
+        response = self.client.post(url, {
+            'name': 'http://exa\tmple.com/applic\nati\ron.js\n',
+            'header': 'X-SourceMap: http://example.com/test.map.js',
+            'file': SimpleUploadedFile('application.js', b'function() { }',
+                                       content_type='application/javascript'),
+        }, format='multipart')
+
+        assert response.status_code == 400, response.content
+
+    def test_bad_headers(self):
+        project = self.create_project(name='foo')
+
+        release = Release.objects.create(
+            organization_id=project.organization_id,
+            version='1',
+        )
+        release.add_project(project)
+
+        url = reverse('sentry-api-0-organization-release-files', kwargs={
+            'organization_slug': project.organization.slug,
+            'version': release.version,
+        })
+
+        self.login_as(user=self.user)
+
+        response = self.client.post(url, {
+            'name': 'http://example.com/application.js',
+            'header': 'lol',
+            'file': SimpleUploadedFile('application.js', b'function() { }',
+                                       content_type='application/javascript'),
+        }, format='multipart')
+
+        assert response.status_code == 400, response.content
+
+        response = self.client.post(url, {
+            'name': 'http://example.com/application.js',
+            'header': 'X-SourceMap: http://example.com/\r\n\ntest.map.js\n',
+            'file': SimpleUploadedFile('application.js', b'function() { }',
+                                       content_type='application/javascript'),
+        }, format='multipart')
+
+        assert response.status_code == 400, response.content
+
+    def test_duplicate_file(self):
+        project = self.create_project(name='foo')
+
+        release = Release.objects.create(
+            project_id=project.id,
+            organization_id=project.organization_id,
+            version='1',
+        )
+        release.add_project(project)
+
+        url = reverse('sentry-api-0-organization-release-files', kwargs={
+            'organization_slug': project.organization.slug,
+            'version': release.version,
+        })
+
+        self.login_as(user=self.user)
+
+        data = {
+            'name': 'http://example.com/application.js',
+            'header': 'X-SourceMap: http://example.com',
+            'file': SimpleUploadedFile('application.js', b'function() { }',
+                                       content_type='application/javascript'),
+        }
+
+        response = self.client.post(url, data, format='multipart')
+
+        assert response.status_code == 201, response.content
+
+        releasefile = ReleaseFile.objects.get(release=release)
+        assert releasefile.name == 'http://example.com/application.js'
+        assert releasefile.file.headers == {
+            'Content-Type': 'application/javascript',
+            'X-SourceMap': 'http://example.com',
+        }
+
+        # Now upload it again!
+        response = self.client.post(url, data, format='multipart')
+
+        assert response.status_code == 409, response.content
diff --git a/tests/sentry/api/endpoints/test_release_file_details.py b/tests/sentry/api/endpoints/test_project_release_file_details.py
similarity index 94%
rename from tests/sentry/api/endpoints/test_release_file_details.py
rename to tests/sentry/api/endpoints/test_project_release_file_details.py
index b23c51cfa0..ea98568c4a 100644
--- a/tests/sentry/api/endpoints/test_release_file_details.py
+++ b/tests/sentry/api/endpoints/test_project_release_file_details.py
@@ -30,7 +30,7 @@ class ReleaseFileDetailsTest(APITestCase):
             name='http://example.com/application.js'
         )
 
-        url = reverse('sentry-api-0-release-file-details', kwargs={
+        url = reverse('sentry-api-0-project-release-file-details', kwargs={
             'organization_slug': project.organization.slug,
             'project_slug': project.slug,
             'version': release.version,
@@ -68,7 +68,7 @@ class ReleaseFileDetailsTest(APITestCase):
             name='  http://example.com/appli\n\rcatios n.js\n\n\r  '
         )
 
-        url = reverse('sentry-api-0-release-file-details', kwargs={
+        url = reverse('sentry-api-0-project-release-file-details', kwargs={
             'organization_slug': project.organization.slug,
             'project_slug': project.slug,
             'version': release.version,
@@ -110,7 +110,7 @@ class ReleaseFileUpdateTest(APITestCase):
             name='http://example.com/application.js'
         )
 
-        url = reverse('sentry-api-0-release-file-details', kwargs={
+        url = reverse('sentry-api-0-project-release-file-details', kwargs={
             'organization_slug': project.organization.slug,
             'project_slug': project.slug,
             'version': release.version,
@@ -152,7 +152,7 @@ class ReleaseFileDeleteTest(APITestCase):
             name='http://example.com/application.js'
         )
 
-        url = reverse('sentry-api-0-release-file-details', kwargs={
+        url = reverse('sentry-api-0-project-release-file-details', kwargs={
             'organization_slug': project.organization.slug,
             'project_slug': project.slug,
             'version': release.version,
diff --git a/tests/sentry/api/endpoints/test_release_files.py b/tests/sentry/api/endpoints/test_project_release_files.py
similarity index 93%
rename from tests/sentry/api/endpoints/test_release_files.py
rename to tests/sentry/api/endpoints/test_project_release_files.py
index ca96f2e370..f7fedb7734 100644
--- a/tests/sentry/api/endpoints/test_release_files.py
+++ b/tests/sentry/api/endpoints/test_project_release_files.py
@@ -29,7 +29,7 @@ class ReleaseFilesListTest(APITestCase):
             name='http://example.com/application.js'
         )
 
-        url = reverse('sentry-api-0-release-files', kwargs={
+        url = reverse('sentry-api-0-project-release-files', kwargs={
             'organization_slug': project.organization.slug,
             'project_slug': project.slug,
             'version': release.version,
@@ -54,7 +54,7 @@ class ReleaseFileCreateTest(APITestCase):
         )
         release.add_project(project)
 
-        url = reverse('sentry-api-0-release-files', kwargs={
+        url = reverse('sentry-api-0-project-release-files', kwargs={
             'organization_slug': project.organization.slug,
             'project_slug': project.slug,
             'version': release.version,
@@ -88,7 +88,7 @@ class ReleaseFileCreateTest(APITestCase):
         )
         release.add_project(project)
 
-        url = reverse('sentry-api-0-release-files', kwargs={
+        url = reverse('sentry-api-0-project-release-files', kwargs={
             'organization_slug': project.organization.slug,
             'project_slug': project.slug,
             'version': release.version,
@@ -111,7 +111,7 @@ class ReleaseFileCreateTest(APITestCase):
         )
         release.add_project(project)
 
-        url = reverse('sentry-api-0-release-files', kwargs={
+        url = reverse('sentry-api-0-project-release-files', kwargs={
             'organization_slug': project.organization.slug,
             'project_slug': project.slug,
             'version': release.version,
@@ -136,7 +136,7 @@ class ReleaseFileCreateTest(APITestCase):
         )
         release.add_project(project)
 
-        url = reverse('sentry-api-0-release-files', kwargs={
+        url = reverse('sentry-api-0-project-release-files', kwargs={
             'organization_slug': project.organization.slug,
             'project_slug': project.slug,
             'version': release.version,
@@ -162,7 +162,7 @@ class ReleaseFileCreateTest(APITestCase):
         )
         release.add_project(project)
 
-        url = reverse('sentry-api-0-release-files', kwargs={
+        url = reverse('sentry-api-0-project-release-files', kwargs={
             'organization_slug': project.organization.slug,
             'project_slug': project.slug,
             'version': release.version,
@@ -198,7 +198,7 @@ class ReleaseFileCreateTest(APITestCase):
         )
         release.add_project(project)
 
-        url = reverse('sentry-api-0-release-files', kwargs={
+        url = reverse('sentry-api-0-project-release-files', kwargs={
             'organization_slug': project.organization.slug,
             'project_slug': project.slug,
             'version': release.version,
