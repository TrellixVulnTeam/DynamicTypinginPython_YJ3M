commit 35014e1fa326593127904f5a2e39987eef9f051d
Author: Mark Story <mark@sentry.io>
Date:   Wed Jan 15 15:34:01 2020 -0500

    ref(discover2) Use date conditions when looking for reference events (#16456)
    
    I originally wanted to remove the reference event query entirely. This
    wasn't feasible because the data in nodestore and snuba differ
    dramatically in how they are structured, and traversing into nodestore
    data to find public event fields would require non-trivial amounts of
    code that would be fragile and hard to test in the future.
    
    By applying date conditions we can give better hints to clickhouse about
    where to look for the requested event.

diff --git a/src/sentry/api/bases/organization_events.py b/src/sentry/api/bases/organization_events.py
index 4d5d960d21..d54a342a75 100644
--- a/src/sentry/api/bases/organization_events.py
+++ b/src/sentry/api/bases/organization_events.py
@@ -28,11 +28,11 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
         if orderby:
             return orderby
 
-    def reference_event(self, request, organization):
+    def reference_event(self, request, organization, start, end):
         fields = request.GET.getlist("field")[:]
         reference_event_id = request.GET.get("referenceEvent")
         if reference_event_id:
-            return ReferenceEvent(organization, reference_event_id, fields)
+            return ReferenceEvent(organization, reference_event_id, fields, start, end)
 
     def get_snuba_query_args_legacy(self, request, organization):
         params = self.get_filter_params(request, organization)
diff --git a/src/sentry/api/endpoints/organization_event_details.py b/src/sentry/api/endpoints/organization_event_details.py
index 893d222bf0..7afd224832 100644
--- a/src/sentry/api/endpoints/organization_event_details.py
+++ b/src/sentry/api/endpoints/organization_event_details.py
@@ -46,7 +46,9 @@ class OrganizationEventDetailsEndpoint(OrganizationEventsEndpointBase):
         fields = request.query_params.getlist("field")
         if fields:
             event_slug = u"{}:{}".format(project.slug, event_id)
-            reference = discover.ReferenceEvent(organization, event_slug, fields)
+            reference = discover.ReferenceEvent(
+                organization, event_slug, fields, event.datetime, event.datetime
+            )
         try:
             pagination = discover.get_pagination_ids(
                 event=event,
diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index 62f31e32eb..8bdde13c37 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -113,7 +113,9 @@ class OrganizationEventsV2Endpoint(OrganizationEventsEndpointBase):
                 selected_columns=request.GET.getlist("field")[:],
                 query=request.GET.get("query"),
                 params=params,
-                reference_event=self.reference_event(request, organization),
+                reference_event=self.reference_event(
+                    request, organization, params.get("start"), params.get("end")
+                ),
                 orderby=self.get_orderby(request),
                 offset=offset,
                 limit=limit,
diff --git a/src/sentry/api/endpoints/organization_events_stats.py b/src/sentry/api/endpoints/organization_events_stats.py
index 479233cf45..7fbcb93033 100644
--- a/src/sentry/api/endpoints/organization_events_stats.py
+++ b/src/sentry/api/endpoints/organization_events_stats.py
@@ -38,7 +38,9 @@ class OrganizationEventsStatsEndpoint(OrganizationEventsEndpointBase):
                 query=request.GET.get("query"),
                 params=params,
                 rollup=self.get_rollup(request),
-                reference_event=self.reference_event(request, organization),
+                reference_event=self.reference_event(
+                    request, organization, params.get("start"), params.get("end")
+                ),
                 referrer="api.organization-event-stats",
             )
         except InvalidSearchQuery as err:
diff --git a/src/sentry/snuba/discover.py b/src/sentry/snuba/discover.py
index b9f4858680..359c3f6a3d 100644
--- a/src/sentry/snuba/discover.py
+++ b/src/sentry/snuba/discover.py
@@ -4,6 +4,7 @@ import six
 
 from collections import namedtuple
 from copy import deepcopy
+from datetime import timedelta
 
 from sentry.api.event_search import (
     get_filter,
@@ -42,7 +43,9 @@ __all__ = (
 )
 
 
-ReferenceEvent = namedtuple("ReferenceEvent", ["organization", "slug", "fields"])
+ReferenceEvent = namedtuple("ReferenceEvent", ["organization", "slug", "fields", "start", "end"])
+ReferenceEvent.__new__.__defaults__ = (None, None)
+
 PaginationResult = namedtuple("PaginationResult", ["next", "previous", "oldest", "latest"])
 FacetResult = namedtuple("FacetResult", ["key", "value", "count"])
 
@@ -67,6 +70,12 @@ def find_reference_event(reference_event):
         project_slug, event_id = reference_event.slug.split(":")
     except ValueError:
         raise InvalidSearchQuery("Invalid reference event")
+
+    column_names = [resolve_column(col) for col in reference_event.fields if is_real_column(col)]
+    # We don't need to run a query if there are no columns
+    if not column_names:
+        return None
+
     try:
         project = Project.objects.get(
             slug=project_slug,
@@ -76,15 +85,18 @@ def find_reference_event(reference_event):
     except Project.DoesNotExist:
         raise InvalidSearchQuery("Invalid reference event")
 
-    column_names = [resolve_column(col) for col in reference_event.fields if is_real_column(col)]
-
-    # We don't need to run a query if there are no columns
-    if not column_names:
-        return None
+    start = None
+    end = None
+    if reference_event.start:
+        start = reference_event.start - timedelta(seconds=5)
+    if reference_event.end:
+        end = reference_event.end + timedelta(seconds=5)
 
     event = raw_query(
         selected_columns=column_names,
         filter_keys={"project_id": [project.id], "event_id": [event_id]},
+        start=start,
+        end=end,
         dataset=Dataset.Discover,
         limit=1,
         referrer="discover.find_reference_event",
diff --git a/tests/sentry/snuba/test_discover.py b/tests/sentry/snuba/test_discover.py
index 47a6101175..f4f3d162ab 100644
--- a/tests/sentry/snuba/test_discover.py
+++ b/tests/sentry/snuba/test_discover.py
@@ -145,24 +145,26 @@ class QueryIntegrationTest(SnubaTestCase, TestCase):
         assert data[0]["message"] == self.event.message
 
     def test_reference_event(self):
+        two_minutes = before_now(minutes=2)
+        five_minutes = before_now(minutes=5)
         self.store_event(
-            data={
-                "event_id": "a" * 32,
-                "message": "oh no",
-                "timestamp": iso_format(before_now(minutes=2)),
-            },
+            data={"event_id": "a" * 32, "message": "oh no", "timestamp": iso_format(two_minutes)},
             project_id=self.project.id,
         )
         self.store_event(
             data={
                 "event_id": "b" * 32,
                 "message": "no match",
-                "timestamp": iso_format(before_now(minutes=2)),
+                "timestamp": iso_format(two_minutes),
             },
             project_id=self.project.id,
         )
         ref = discover.ReferenceEvent(
-            self.organization, "{}:{}".format(self.project.slug, "a" * 32), ["message", "count()"]
+            self.organization,
+            "{}:{}".format(self.project.slug, "a" * 32),
+            ["message", "count()"],
+            two_minutes,
+            two_minutes,
         )
         result = discover.query(
             selected_columns=["id", "message"],
@@ -174,6 +176,22 @@ class QueryIntegrationTest(SnubaTestCase, TestCase):
         for row in result["data"]:
             assert row["message"] == "oh no"
 
+        # make an invalid reference with old dates
+        ref = discover.ReferenceEvent(
+            self.organization,
+            "{}:{}".format(self.project.slug, "a" * 32),
+            ["message", "count()"],
+            five_minutes,
+            five_minutes,
+        )
+        with pytest.raises(InvalidSearchQuery):
+            discover.query(
+                selected_columns=["id", "message"],
+                query="",
+                reference_event=ref,
+                params={"project_id": [self.project.id]},
+            )
+
 
 class QueryTransformTest(TestCase):
     """
@@ -722,7 +740,7 @@ class TimeseriesQueryTest(SnubaTestCase, TestCase):
 
 class CreateReferenceEventConditionsTest(SnubaTestCase, TestCase):
     def test_bad_slug_format(self):
-        ref = discover.ReferenceEvent(self.organization, "lol", [])
+        ref = discover.ReferenceEvent(self.organization, "lol", ["title"])
         with pytest.raises(InvalidSearchQuery):
             discover.create_reference_event_conditions(ref)
 
@@ -731,7 +749,9 @@ class CreateReferenceEventConditionsTest(SnubaTestCase, TestCase):
             data={"message": "oh no!", "timestamp": iso_format(before_now(seconds=1))},
             project_id=self.project.id,
         )
-        ref = discover.ReferenceEvent(self.organization, "nope:{}".format(event.event_id), [])
+        ref = discover.ReferenceEvent(
+            self.organization, "nope:{}".format(event.event_id), ["title"]
+        )
         with pytest.raises(InvalidSearchQuery):
             discover.create_reference_event_conditions(ref)
 
