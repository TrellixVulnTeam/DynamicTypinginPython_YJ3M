commit ba771f2376dbfd87964fe47c110eec50d0c8a022
Author: Mark Story <mark@sentry.io>
Date:   Fri Mar 13 10:33:28 2020 -0400

    fix(discover) Fix output typing for percentile functions (#17634)
    
    Add tests to cover the scenarios we missed in the past.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 155cbfc241..119e551b68 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -872,7 +872,13 @@ def get_json_meta_type(field, snuba_type):
     alias_definition = FIELD_ALIASES.get(field)
     if alias_definition and alias_definition.get("result_type"):
         return alias_definition.get("result_type")
-    if "duration" in field:
+    function_match = FUNCTION_ALIAS_PATTERN.match(field)
+    if function_match:
+        function_definition = FUNCTIONS.get(function_match.group(1))
+        if function_definition and function_definition.get("result_type"):
+            return function_definition.get("result_type")
+    # TODO remove this check when field aliases are removed.
+    if "duration" in field or field in ("p75", "p95", "p99"):
         return "duration"
     if field == "transaction.status":
         return "string"
@@ -985,27 +991,37 @@ FUNCTIONS = {
         "name": "percentile",
         "args": [DurationColumnNoLookup("column"), NumberRange("percentile", 0, 1)],
         "aggregate": [u"quantile({percentile:.2f})", u"{column}", None],
+        "result_type": "duration",
     },
     "rps": {
         "name": "rps",
         "args": [IntervalDefault("interval", 1, None)],
         "transform": u"divide(count(), {interval:g})",
+        "result_type": "number",
     },
     "rpm": {
         "name": "rpm",
         "args": [IntervalDefault("interval", 60, None)],
         "transform": u"divide(count(), divide({interval:g}, 60))",
+        "result_type": "number",
+    },
+    "last_seen": {
+        "name": "last_seen",
+        "args": [],
+        "aggregate": ["max", "timestamp", "last_seen"],
+        "result_type": "timestamp",
     },
-    "last_seen": {"name": "last_seen", "args": [], "aggregate": ["max", "timestamp", "last_seen"]},
     "latest_event": {
         "name": "latest_event",
         "args": [],
         "aggregate": ["argMax", ["id", "timestamp"], "latest_event"],
+        "result_type": "string",
     },
     "apdex": {
         "name": "apdex",
         "args": [DurationColumn("column"), NumberRange("satisfaction", 0, None)],
         "transform": u"apdex({column}, {satisfaction:g})",
+        "result_type": "number",
     },
     "impact": {
         "name": "impact",
@@ -1016,44 +1032,59 @@ FUNCTIONS = {
         # It has a minimal prefix parser though to bridge the gap between the current state
         # and when we will have an easier syntax.
         "transform": u"plus(minus(1, divide(plus(countIf(less({column}, {satisfaction:g})),divide(countIf(and(greater({column}, {satisfaction:g}),less({column}, {tolerated:g}))),2)),count())),multiply(minus(1,divide(1,sqrt(uniq(user)))),3))",
+        "result_type": "number",
     },
     "error_rate": {
         "name": "error_rate",
         "args": [],
         "transform": "divide(countIf(notEquals(transaction_status, 0)), count())",
+        "result_type": "number",
     },
     "count_unique": {
         "name": "count_unique",
         "args": [CountColumn("column")],
         "aggregate": ["uniq", u"{column}", None],
+        "result_type": "integer",
     },
     # TODO(evanh) Count doesn't accept parameters in the frontend, but we support it here
     # for backwards compatibility. Once we've migrated existing queries this should get
     # changed to accept no parameters.
-    "count": {"name": "count", "args": [CountColumn("column")], "aggregate": ["count", None, None]},
+    "count": {
+        "name": "count",
+        "args": [CountColumn("column")],
+        "aggregate": ["count", None, None],
+        "result_type": "integer",
+    },
     "min": {
         "name": "min",
         "args": [NumericColumnNoLookup("column")],
         "aggregate": ["min", u"{column}", None],
+        "result_type": "number",
     },
     "max": {
         "name": "max",
         "args": [NumericColumnNoLookup("column")],
         "aggregate": ["max", u"{column}", None],
+        "result_type": "number",
     },
     "avg": {
         "name": "avg",
         "args": [DurationColumnNoLookup("column")],
         "aggregate": ["avg", u"{column}", None],
+        "result_type": "duration",
     },
     "sum": {
         "name": "sum",
         "args": [DurationColumnNoLookup("column")],
         "aggregate": ["sum", u"{column}", None],
+        "result_type": "duration",
     },
 }
 
 
+FUNCTION_ALIAS_PATTERN = re.compile(r"^({}).*".format("|".join(list(FUNCTIONS.keys()))))
+
+
 def is_function(field):
     function_match = FUNCTION_PATTERN.search(field)
     if function_match:
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 1ddccc96d3..4ae1b7cd3e 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -41,6 +41,12 @@ def test_get_json_meta_type():
     assert get_json_meta_type("other", "") == "string"
     assert get_json_meta_type("avg_duration", "number") == "duration"
     assert get_json_meta_type("duration", "number") == "duration"
+    assert get_json_meta_type("p75", "number") == "duration"
+    assert get_json_meta_type("p95", "number") == "duration"
+    assert get_json_meta_type("p99", "number") == "duration"
+    assert get_json_meta_type("apdex_transaction_duration_300", "number") == "number"
+    assert get_json_meta_type("impact_300", "number") == "number"
+    assert get_json_meta_type("percentile_transaction_duration_0_95", "number") == "duration"
 
 
 class ParseSearchQueryTest(unittest.TestCase):
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 44fa493f80..9bf4e10b25 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -1582,7 +1582,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
                         "p75",
                         "p95()",
                         "percentile(transaction.duration, 0.99)",
-                        "apdex",
+                        "apdex(transaction.duration,300)",
                         "impact()",
                         "error_rate()",
                     ],
@@ -1591,12 +1591,19 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
             )
 
             assert response.status_code == 200, response.content
+            meta = response.data["meta"]
+            assert meta["p75"] == "duration"
+            assert meta["p95"] == "duration"
+            assert meta["percentile_transaction_duration_0_99"] == "duration"
+            assert meta["apdex_transaction_duration_300"] == "number"
+            assert meta["impact"] == "number"
+
             data = response.data["data"]
             assert len(data) == 1
             assert data[0]["p75"] == 5000
             assert data[0]["p95"] == 5000
             assert data[0]["percentile_transaction_duration_0_99"] == 5000
-            assert data[0]["apdex"] == 0.0
+            assert data[0]["apdex_transaction_duration_300"] == 0.0
             assert data[0]["impact"] == 1.0
             assert data[0]["error_rate"] == 0.5
 
