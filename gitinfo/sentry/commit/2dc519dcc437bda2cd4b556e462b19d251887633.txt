commit 2dc519dcc437bda2cd4b556e462b19d251887633
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Jul 6 15:37:49 2013 +0200

    Initial working view of the stream

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 139a50e0be..1a293d630d 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -149,6 +149,7 @@ INSTALLED_APPS = (
     'gunicorn',
     'kombu.transport.django',
     'raven.contrib.django.raven_compat',
+    'rest_framework',
     'sentry',
     'sentry.plugins.sentry_interface_types',
     'sentry.plugins.sentry_mail',
diff --git a/src/sentry/web/restapi/authentication.py b/src/sentry/web/restapi/authentication.py
new file mode 100644
index 0000000000..3f821e7152
--- /dev/null
+++ b/src/sentry/web/restapi/authentication.py
@@ -0,0 +1,17 @@
+from sentry.models import ProjectKey
+
+from rest_framework.authentication import BasicAuthentication
+from rest_framework.exceptions import AuthenticationFailed
+
+
+class KeyAuthentication(BasicAuthentication):
+    def authenticate_credentials(self, userid, password):
+        try:
+            pk = ProjectKey.objects.get_from_cache(public_key=userid)
+        except ProjectKey.DoesNotExist:
+            raise AuthenticationFailed('Invalid api key')
+
+        if pk.secret_key != password:
+            raise AuthenticationFailed('Invalid api key')            
+
+        return (pk.user, pk)
\ No newline at end of file
diff --git a/src/sentry/web/restapi/permissions.py b/src/sentry/web/restapi/permissions.py
new file mode 100644
index 0000000000..f37afd91d5
--- /dev/null
+++ b/src/sentry/web/restapi/permissions.py
@@ -0,0 +1,13 @@
+from sentry.models import Project
+
+from rest_framework.permissions import BasePermission
+
+
+class HasProjectPermission(BasePermission):
+    def has_object_permission(self, request, view, obj):
+        if hasattr(obj, 'project'):
+            obj = obj.project
+        elif not isinstance(obj, Project):
+            raise NotImplementedError('Object does not support permissions')
+
+        return obj in Project.objects.get_for_user(request.user)
\ No newline at end of file
diff --git a/src/sentry/web/restapi/urls.py b/src/sentry/web/restapi/urls.py
index df72a580e1..d38733e515 100644
--- a/src/sentry/web/restapi/urls.py
+++ b/src/sentry/web/restapi/urls.py
@@ -1,13 +1,8 @@
 from django.conf.urls import patterns, url, include
-from rest_framework import routers
 
-router = routers.DefaultRouter()
-# router.register(r'users', views.UserViewSet)
-# router.register(r'groups', views.GroupViewSet)
+from . import views
 
-# Wire up our API using automatic URL routing.
-# Additionally, we include login URLs for the browseable API.
 urlpatterns = patterns('',
-    url(r'^', include(router.urls)),
-    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))
+    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/stream/$', views.StreamView.as_view()),
+    # url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))
 )
diff --git a/src/sentry/web/restapi/views.py b/src/sentry/web/restapi/views.py
index e69de29bb2..570108ccab 100644
--- a/src/sentry/web/restapi/views.py
+++ b/src/sentry/web/restapi/views.py
@@ -0,0 +1,34 @@
+from django.utils.decorators import method_decorator
+
+from sentry.web.decorators import has_access
+from sentry.web.frontend.groups import _get_group_list
+from sentry.utils.javascript import transform
+
+from rest_framework.authentication import SessionAuthentication
+from rest_framework.views import APIView
+from rest_framework.response import Response
+
+from .authentication import KeyAuthentication
+from .permissions import HasProjectPermission
+
+
+class BaseView(APIView):
+    authentication_classes = (KeyAuthentication, SessionAuthentication)
+    permission_classes = (HasProjectPermission,)
+
+
+class StreamView(BaseView):
+    @method_decorator(has_access)
+    def get(self, request, team, project):
+        offset = 0
+        limit = 100
+
+        response = _get_group_list(
+            request=request,
+            project=project,
+        )
+
+        event_list = response['event_list']
+        event_list = list(event_list[offset:limit])
+
+        return Response(transform(event_list, request))
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 0f36b6127d..6fd73d1ebc 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -226,6 +226,8 @@ urlpatterns = patterns('',
     url(r'^api/(?P<team_slug>[\w_-]+)/projects/search/$', api.search_projects,
         name='sentry-api-search-projects'),
 
+    url(r'^api/1/', include('sentry.web.restapi.urls')),
+
     # TV dashboard
     url(r'^(?P<team_slug>[\w_-]+)/wall/$', groups.wall_display,
         name='sentry-wall'),
