commit edf08833437e4189cfabc84aeef3e9993eda8343
Author: Mark Story <mark@sentry.io>
Date:   Wed May 27 17:02:23 2020 -0400

    feat(perf-views) Add more advanced filtering to performance overview  (#19006)
    
    Add discover based filtering to performance overview. This makes it
    possible to focus this view on subsets of data, and lets users narrow
    down what they want to look at.
    
    This has been around for a long time, but I noticed it cropping up on
    performance index as because of the loading order.
    
    I've retained the bare text search acting as a transaction name filter
    as it is a ergonomic shortcut.
    
    Conditions applied on the overview are also carried over as conditions
    to summary view to help retain context.
    
    Fix in-place mutation in TagStore, as it was causing stale data to show
    up in the search autocomplete options.

diff --git a/src/sentry/static/sentry/app/components/gridEditable/index.tsx b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
index a867cac21b..8dd276faa8 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/index.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
@@ -373,15 +373,17 @@ class GridEditable<
 
   render() {
     const {title, headerButtons} = this.props;
+    const showHeader = title || headerButtons;
     return (
       <React.Fragment>
-        <Header>
-          {title && <HeaderTitle>{title}</HeaderTitle>}
-          {headerButtons && (
-            <HeaderButtonContainer>{headerButtons()}</HeaderButtonContainer>
-          )}
-        </Header>
-
+        {showHeader && (
+          <Header>
+            {title && <HeaderTitle>{title}</HeaderTitle>}
+            {headerButtons && (
+              <HeaderButtonContainer>{headerButtons()}</HeaderButtonContainer>
+            )}
+          </Header>
+        )}
         <Body>
           <Grid data-test-id="grid-editable" ref={this.refGrid}>
             <GridHead>{this.renderGridHead()}</GridHead>
diff --git a/src/sentry/static/sentry/app/stores/tagStore.tsx b/src/sentry/static/sentry/app/stores/tagStore.tsx
index 96af26e471..a8d3cf1e21 100644
--- a/src/sentry/static/sentry/app/stores/tagStore.tsx
+++ b/src/sentry/static/sentry/app/stores/tagStore.tsx
@@ -153,7 +153,8 @@ const tagStoreConfig: Reflux.StoreDefinition & TagStoreInterface = {
   },
 
   onLoadTagsSuccess(data) {
-    Object.assign(
+    this.state = Object.assign(
+      {},
       this.state,
       reduce(
         data,
diff --git a/src/sentry/static/sentry/app/views/performance/data.tsx b/src/sentry/static/sentry/app/views/performance/data.tsx
index b0af9f7bae..a0ba241170 100644
--- a/src/sentry/static/sentry/app/views/performance/data.tsx
+++ b/src/sentry/static/sentry/app/views/performance/data.tsx
@@ -4,28 +4,10 @@ import {t} from 'app/locale';
 import {NewQuery} from 'app/types';
 import EventView from 'app/utils/discover/eventView';
 import {decodeScalar} from 'app/utils/queryString';
-import {stringifyQueryObject} from 'app/utils/tokenizeSearch';
+import {tokenizeSearch, stringifyQueryObject} from 'app/utils/tokenizeSearch';
 
 export const DEFAULT_STATS_PERIOD = '24h';
 
-export const PERFORMANCE_EVENT_VIEW: Readonly<NewQuery> = {
-  id: undefined,
-  name: t('Performance'),
-  query: 'event.type:transaction',
-  projects: [],
-  fields: [
-    'transaction',
-    'project',
-    'epm()',
-    'p50()',
-    'p95()',
-    'error_rate()',
-    'apdex(300)',
-    'count_unique(user)',
-    'user_misery(300)',
-  ],
-  version: 2,
-};
 export const COLUMN_TITLES = [
   'transaction',
   'project',
@@ -38,42 +20,46 @@ export const COLUMN_TITLES = [
   'user misery',
 ];
 
-export function generatePerformanceQuery(location: Location): Readonly<NewQuery> {
-  const extra: {[key: string]: string} = {};
-
+export function generatePerformanceEventView(location: Location): EventView {
   const {query} = location;
 
-  const hasStartAndEnd = query?.start && query?.end;
+  const hasStartAndEnd = query.start && query.end;
+  const savedQuery: NewQuery = {
+    id: undefined,
+    name: t('Performance'),
+    query: 'event.type:transaction',
+    projects: [],
+    fields: [
+      'transaction',
+      'project',
+      'epm()',
+      'p50()',
+      'p95()',
+      'error_rate()',
+      'apdex(300)',
+      'count_unique(user)',
+      'user_misery(300)',
+    ],
+    version: 2,
+  };
 
-  if (!query?.statsPeriod && !hasStartAndEnd) {
-    extra.range = DEFAULT_STATS_PERIOD;
+  if (!query.statsPeriod && !hasStartAndEnd) {
+    savedQuery.range = DEFAULT_STATS_PERIOD;
   }
+  savedQuery.orderby = decodeScalar(query.sort) || '-epm';
 
-  if (!query?.sort) {
-    extra.orderby = '-epm';
-  } else {
-    const sort = query?.sort;
-    extra.orderby =
-      Array.isArray(sort) && sort.length > 0
-        ? sort[sort.length - 1]
-        : typeof sort === 'string'
-        ? sort
-        : '-epm';
-  }
+  const searchQuery = decodeScalar(query.query) || '';
+  const conditions = Object.assign(tokenizeSearch(searchQuery), {
+    'event.type': ['transaction'],
+  });
 
-  if (query?.query) {
-    const searchQuery = decodeScalar(query.query);
-    if (searchQuery) {
-      extra.query = stringifyQueryObject({
-        query: [PERFORMANCE_EVENT_VIEW.query],
-        transaction: [`*${searchQuery}*`],
-      });
-    }
+  // If there is a bare text search, we want to treat it as a search
+  // on the transaction name.
+  if (conditions.query.length > 0) {
+    conditions.transaction = [`*${conditions.query.join(' ')}*`];
+    conditions.query = [];
   }
+  savedQuery.query = stringifyQueryObject(conditions);
 
-  return Object.assign({}, PERFORMANCE_EVENT_VIEW, extra);
-}
-
-export function generatePerformanceEventView(location: Location): EventView {
-  return EventView.fromNewQueryWithLocation(generatePerformanceQuery(location), location);
+  return EventView.fromNewQueryWithLocation(savedQuery, location);
 }
diff --git a/src/sentry/static/sentry/app/views/performance/landing.tsx b/src/sentry/static/sentry/app/views/performance/landing.tsx
index 122e48d5ce..5bac26d495 100644
--- a/src/sentry/static/sentry/app/views/performance/landing.tsx
+++ b/src/sentry/static/sentry/app/views/performance/landing.tsx
@@ -2,10 +2,14 @@ import React from 'react';
 import {Location} from 'history';
 import * as ReactRouter from 'react-router';
 import styled from '@emotion/styled';
+import isEqual from 'lodash/isEqual';
 
+import {Client} from 'app/api';
 import {t} from 'app/locale';
-import {Organization, Project} from 'app/types';
+import {GlobalSelection, Organization, Project} from 'app/types';
+import {loadOrganizationTags} from 'app/actionCreators/tags';
 import FeatureBadge from 'app/components/featureBadge';
+import SearchBar from 'app/views/events/searchBar';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import {ALL_ACCESS_PROJECTS} from 'app/constants/globalSelectionHeader';
@@ -16,8 +20,13 @@ import EventView from 'app/utils/discover/eventView';
 import space from 'app/styles/space';
 import Button from 'app/components/button';
 import ButtonBar from 'app/components/buttonBar';
+import {decodeScalar} from 'app/utils/queryString';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
+import withApi from 'app/utils/withApi';
+import withGlobalSelection from 'app/utils/withGlobalSelection';
 import withOrganization from 'app/utils/withOrganization';
 import withProjects from 'app/utils/withProjects';
+import {tokenizeSearch, stringifyQueryObject} from 'app/utils/tokenizeSearch';
 
 import {generatePerformanceEventView, DEFAULT_STATS_PERIOD} from './data';
 import Table from './table';
@@ -32,7 +41,9 @@ enum FilterViews {
 const VIEWS = Object.values(FilterViews);
 
 type Props = {
+  api: Client;
   organization: Organization;
+  selection: GlobalSelection;
   location: Location;
   router: ReactRouter.InjectedRouter;
   projects: Project[];
@@ -56,7 +67,22 @@ class PerformanceLanding extends React.Component<Props, State> {
     currentView: FilterViews.ALL_TRANSACTIONS,
   };
 
-  renderError = () => {
+  componentDidMount() {
+    const {api, organization, selection} = this.props;
+    loadOrganizationTags(api, organization.slug, selection);
+  }
+
+  componentDidUpdate(prevProps: Props) {
+    const {api, organization, selection} = this.props;
+    if (
+      !isEqual(prevProps.selection.projects, selection.projects) ||
+      !isEqual(prevProps.selection.datetime, selection.datetime)
+    ) {
+      loadOrganizationTags(api, organization.slug, selection);
+    }
+  }
+
+  renderError() {
     const {error} = this.state;
 
     if (!error) {
@@ -68,12 +94,31 @@ class PerformanceLanding extends React.Component<Props, State> {
         {error}
       </Alert>
     );
-  };
+  }
 
   setError = (error: string | undefined) => {
     this.setState({error});
   };
 
+  handleSearch = (searchQuery: string) => {
+    const {location, organization} = this.props;
+
+    trackAnalyticsEvent({
+      eventKey: 'performance_views.overview.search',
+      eventName: 'Performance Views: Transaction overview search',
+      organization_id: parseInt(organization.id, 10),
+    });
+
+    ReactRouter.browserHistory.push({
+      pathname: location.pathname,
+      query: {
+        ...location.query,
+        cursor: undefined,
+        query: String(searchQuery).trim() || undefined,
+      },
+    });
+  };
+
   getViewLabel(currentView: FilterViews): string {
     switch (currentView) {
       case FilterViews.ALL_TRANSACTIONS:
@@ -85,6 +130,26 @@ class PerformanceLanding extends React.Component<Props, State> {
     }
   }
 
+  getTransactionSearchQuery() {
+    const {location} = this.props;
+
+    return String(decodeScalar(location.query.query) || '').trim();
+  }
+
+  /**
+   * Generate conditions to foward to the summary views.
+   *
+   * We drop the bare text string as in this view we apply it to
+   * the transaction name, and that condition is redundant in the
+   * summary view.
+   */
+  getSummaryConditions(query: string) {
+    const parsed = tokenizeSearch(query);
+    parsed.query = [];
+
+    return stringifyQueryObject(parsed);
+  }
+
   renderHeaderButtons() {
     const selectView = (viewKey: FilterViews) => {
       return () => {
@@ -141,6 +206,8 @@ class PerformanceLanding extends React.Component<Props, State> {
     const {organization, location, router, projects} = this.props;
     const {eventView} = this.state;
     const showOnboarding = this.shouldShowOnboarding();
+    const filterString = this.getTransactionSearchQuery();
+    const summaryConditions = this.getSummaryConditions(filterString);
 
     return (
       <SentryDocumentTitle title={t('Performance')} objSlug={organization.slug}>
@@ -166,7 +233,14 @@ class PerformanceLanding extends React.Component<Props, State> {
               {showOnboarding ? (
                 <Onboarding />
               ) : (
-                <React.Fragment>
+                <div>
+                  <StyledSearchBar
+                    organization={organization}
+                    projectIds={eventView.project}
+                    location={location}
+                    query={filterString}
+                    onSearch={this.handleSearch}
+                  />
                   <Charts
                     eventView={eventView}
                     organization={organization}
@@ -181,8 +255,9 @@ class PerformanceLanding extends React.Component<Props, State> {
                     location={location}
                     setError={this.setError}
                     keyTransactions={this.state.currentView === 'KEY_TRANSACTIONS'}
+                    summaryConditions={summaryConditions}
                   />
-                </React.Fragment>
+                </div>
               )}
             </LightWeightNoProjectMessage>
           </PageContent>
@@ -202,4 +277,12 @@ export const StyledPageHeader = styled('div')`
   margin-bottom: ${space(1)};
 `;
 
-export default withOrganization(withProjects(PerformanceLanding));
+const StyledSearchBar = styled(SearchBar)`
+  flex-grow: 1;
+
+  margin-bottom: ${space(2)};
+`;
+
+export default withApi(
+  withOrganization(withProjects(withGlobalSelection(PerformanceLanding)))
+);
diff --git a/src/sentry/static/sentry/app/views/performance/table.tsx b/src/sentry/static/sentry/app/views/performance/table.tsx
index a21d67c040..423c07df8b 100644
--- a/src/sentry/static/sentry/app/views/performance/table.tsx
+++ b/src/sentry/static/sentry/app/views/performance/table.tsx
@@ -1,10 +1,6 @@
 import React from 'react';
 import {Location, LocationDescriptorObject} from 'history';
-import styled from '@emotion/styled';
-import {browserHistory} from 'react-router';
 
-import space from 'app/styles/space';
-import {t} from 'app/locale';
 import {Organization, Project} from 'app/types';
 import Pagination from 'app/components/pagination';
 import Link from 'app/components/links/link';
@@ -13,8 +9,6 @@ import {TableData, TableDataRow, TableColumn} from 'app/views/eventsV2/table/typ
 import GridEditable, {COL_WIDTH_UNDEFINED, GridColumn} from 'app/components/gridEditable';
 import SortLink from 'app/components/gridEditable/sortLink';
 import HeaderCell from 'app/views/eventsV2/table/headerCell';
-import {decodeScalar} from 'app/utils/queryString';
-import SearchBar from 'app/components/searchBar';
 import DiscoverQuery from 'app/utils/discover/discoverQuery';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import {getFieldRenderer} from 'app/utils/discover/fieldRenderers';
@@ -47,6 +41,7 @@ type Props = {
   location: Location;
   setError: (msg: string | undefined) => void;
   keyTransactions: boolean;
+  summaryConditions: string;
 
   projects: Project[];
 };
@@ -61,7 +56,7 @@ class Table extends React.Component<Props, State> {
   };
 
   renderBodyCell = (tableMeta: TableData['meta']) => {
-    const {eventView, organization, projects, location} = this.props;
+    const {eventView, organization, projects, location, summaryConditions} = this.props;
 
     return (
       column: TableColumn<keyof TableDataRow>,
@@ -76,13 +71,14 @@ class Table extends React.Component<Props, State> {
 
       if (field === 'transaction') {
         const projectID = getProjectID(dataRow, projects);
+        const summaryView = eventView.clone();
+        summaryView.query = summaryConditions;
 
-        const query = eventView.generateQueryStringObject();
         const target = transactionSummaryRouteWithQuery({
           orgSlug: organization.slug,
           transaction: String(dataRow.transaction) || '',
+          query: summaryView.generateQueryStringObject(),
           projectID,
-          query,
         });
 
         rendered = (
@@ -136,12 +132,6 @@ class Table extends React.Component<Props, State> {
     };
   };
 
-  getTransactionSearchQuery(): string {
-    const {location} = this.props;
-
-    return String(decodeScalar(location.query.query) || '').trim();
-  }
-
   handleSummaryClick = () => {
     const {organization} = this.props;
     trackAnalyticsEvent({
@@ -151,25 +141,6 @@ class Table extends React.Component<Props, State> {
     });
   };
 
-  handleTransactionSearchQuery = (searchQuery: string) => {
-    const {location, organization} = this.props;
-
-    trackAnalyticsEvent({
-      eventKey: 'performance_views.overview.search',
-      eventName: 'Performance Views: Transaction overview search',
-      organization_id: parseInt(organization.id, 10),
-    });
-
-    browserHistory.push({
-      pathname: location.pathname,
-      query: {
-        ...location.query,
-        cursor: undefined,
-        query: String(searchQuery).trim() || undefined,
-      },
-    });
-  };
-
   handleResizeColumn = (columnIndex: number, nextColumn: GridColumn) => {
     const widths: number[] = [...this.state.widths];
     widths[columnIndex] = nextColumn.width
@@ -191,14 +162,8 @@ class Table extends React.Component<Props, State> {
       });
 
     const columnSortBy = eventView.getSorts();
-    const filterString = this.getTransactionSearchQuery();
     return (
       <div>
-        <StyledSearchBar
-          query={filterString}
-          placeholder={t('Filter Transactions')}
-          onSearch={this.handleTransactionSearchQuery}
-        />
         <DiscoverQuery
           eventView={eventView}
           orgSlug={organization.slug}
@@ -228,10 +193,4 @@ class Table extends React.Component<Props, State> {
   }
 }
 
-const StyledSearchBar = styled(SearchBar)`
-  flex-grow: 1;
-
-  margin-bottom: ${space(1)};
-`;
-
 export default Table;
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
index be34196560..2c344e122e 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
@@ -4,6 +4,7 @@ import {browserHistory} from 'react-router';
 import {Location} from 'history';
 import styled from '@emotion/styled';
 import * as Sentry from '@sentry/browser';
+import isEqual from 'lodash/isEqual';
 
 import {Client} from 'app/api';
 import {t} from 'app/locale';
@@ -65,7 +66,7 @@ class TransactionSummary extends React.Component<Props, State> {
   }
 
   componentDidUpdate(prevProps: Props, prevState: State) {
-    const {location} = this.props;
+    const {api, organization, location, selection} = this.props;
     const {eventView} = this.state;
 
     if (eventView && prevState.eventView) {
@@ -75,6 +76,13 @@ class TransactionSummary extends React.Component<Props, State> {
         this.fetchTotalCount();
       }
     }
+
+    if (
+      !isEqual(prevProps.selection.projects, selection.projects) ||
+      !isEqual(prevProps.selection.datetime, selection.datetime)
+    ) {
+      loadOrganizationTags(api, organization.slug, selection);
+    }
   }
 
   async fetchTotalCount() {
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/utils.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/utils.tsx
index a39a294722..035ac8451b 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/utils.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/utils.tsx
@@ -28,6 +28,7 @@ export function transactionSummaryRouteWithQuery({
       statsPeriod: query.statsPeriod,
       start: query.start,
       end: query.end,
+      query: query.query,
     },
   };
 }
diff --git a/tests/js/spec/views/performance/data.spec.jsx b/tests/js/spec/views/performance/data.spec.jsx
index 4a111d09f5..76db62e97f 100644
--- a/tests/js/spec/views/performance/data.spec.jsx
+++ b/tests/js/spec/views/performance/data.spec.jsx
@@ -1,61 +1,82 @@
-import {
-  generatePerformanceQuery,
-  PERFORMANCE_EVENT_VIEW,
-} from 'app/views/performance/data';
+import {generatePerformanceEventView} from 'app/views/performance/data';
 
-describe('generatePerformanceQuery()', function() {
+describe('generatePerformanceEventView()', function() {
   it('generates default values', function() {
-    const result = generatePerformanceQuery({});
-
-    expect(result).toEqual({
-      ...PERFORMANCE_EVENT_VIEW,
-
-      orderby: '-epm',
-      range: '24h',
+    const result = generatePerformanceEventView({
+      query: {},
     });
+
+    expect(result.id).toBeUndefined();
+    expect(result.name).toEqual('Performance');
+    expect(result.fields.length).toBeGreaterThanOrEqual(7);
+    expect(result.query).toEqual('event.type:transaction');
+    expect(result.sorts).toEqual([{kind: 'desc', field: 'epm'}]);
+    expect(result.statsPeriod).toEqual('24h');
   });
 
-  it('override sort', function() {
-    const result = generatePerformanceQuery({
+  it('applies sort from location', function() {
+    const result = generatePerformanceEventView({
       query: {
-        sort: ['-avg_transaction_duration', '-count'],
+        sort: ['-p50', '-count'],
       },
     });
 
-    expect(result).toEqual({
-      ...PERFORMANCE_EVENT_VIEW,
-
-      orderby: '-count',
-      range: '24h',
-    });
+    expect(result.sorts).toEqual([{kind: 'desc', field: 'p50'}]);
+    expect(result.statsPeriod).toEqual('24h');
   });
 
-  it('does not override statsPeriod', function() {
-    const result = generatePerformanceQuery({
+  it('does not override statsPeriod from location', function() {
+    const result = generatePerformanceEventView({
       query: {
         statsPeriod: ['90d', '45d'],
       },
     });
+    expect(result.start).toBeUndefined();
+    expect(result.end).toBeUndefined();
+    expect(result.statsPeriod).toEqual('90d');
+  });
 
-    expect(result).toEqual({
-      ...PERFORMANCE_EVENT_VIEW,
-
-      orderby: '-epm',
+  it('does not apply range when start and end are present', function() {
+    const result = generatePerformanceEventView({
+      query: {
+        start: '2020-04-25T12:00:00',
+        end: '2020-05-25T12:00:00',
+      },
     });
+    expect(result.start).toEqual('2020-04-25T12:00:00.000');
+    expect(result.end).toEqual('2020-05-25T12:00:00.000');
+    expect(result.statsPeriod).toBeUndefined();
   });
 
-  it('does not override start & end', function() {
-    const result = generatePerformanceQuery({
+  it('converts bare query into transaction name wildcard', function() {
+    const result = generatePerformanceEventView({
       query: {
-        start: 'start',
-        end: 'end',
+        query: 'things.update',
       },
     });
+    expect(result.query).toEqual(expect.stringContaining('transaction:*things.update*'));
+    expect(result.query).toEqual(expect.stringContaining('event.type:transaction'));
+  });
 
-    expect(result).toEqual({
-      ...PERFORMANCE_EVENT_VIEW,
+  it('bare query overwrites transaction condition', function() {
+    const result = generatePerformanceEventView({
+      query: {
+        query: 'things.update transaction:thing.gone',
+      },
+    });
+    expect(result.query).toEqual(expect.stringContaining('transaction:*things.update*'));
+    expect(result.query).toEqual(expect.stringContaining('event.type:transaction'));
+    expect(result.query).toEqual(expect.not.stringContaining('transaction:thing.gone'));
+  });
 
-      orderby: '-epm',
+  it('retains tag filter conditions', function() {
+    const result = generatePerformanceEventView({
+      query: {
+        query: 'key:value tag:value',
+      },
     });
+    expect(result.query).toEqual(expect.stringContaining('key:value'));
+    expect(result.query).toEqual(expect.stringContaining('tag:value'));
+    expect(result.query).toEqual(expect.stringContaining('event.type:transaction'));
   });
 });
diff --git a/tests/js/spec/views/performance/landing.spec.jsx b/tests/js/spec/views/performance/landing.spec.jsx
index 537f8434f9..db9b178d87 100644
--- a/tests/js/spec/views/performance/landing.spec.jsx
+++ b/tests/js/spec/views/performance/landing.spec.jsx
@@ -55,22 +55,28 @@ describe('Performance > Landing', function() {
       url: '/organizations/org-slug/eventsv2/',
       body: {
         meta: {
-          id: 'string',
           user: 'string',
-          'transaction.duration': 'duration',
+          transaction: 'string',
           'project.id': 'integer',
-          timestamp: 'date',
-          apdex: 'number',
+          epm: 'number',
+          p50: 'number',
+          p95: 'number',
+          error_rate: 'number',
+          apdex_300: 'number',
+          count_unique_user: 'number',
           user_misery_300: 'number',
         },
         data: [
           {
-            id: 'deadbeef',
-            user: 'uhoh@example.com',
-            'transaction.duration': 400,
+            transaction: '/apple/cart',
             'project.id': 1,
-            timestamp: '2020-05-21T15:31:18+00:00',
-            apdex: 0.6,
+            user: 'uhoh@example.com',
+            epm: 30,
+            p50: 100,
+            p95: 500,
+            error_rate: 0.1,
+            apdex_300: 0.6,
+            count_unique_user: 1000,
             user_misery_300: 122,
           },
         ],
@@ -155,4 +161,31 @@ describe('Performance > Landing', function() {
 
     expect(wrapper.find('Onboarding')).toHaveLength(0);
   });
+
+  it('forwards conditions to transaction summary', async function() {
+    const projects = [TestStubs.Project({id: '1', firstTransactionEvent: true})];
+    const data = initializeData(projects, {project: ['1'], query: 'sentry:yes'});
+
+    const wrapper = mountWithTheme(
+      <PerformanceLanding
+        organization={data.organization}
+        location={data.router.location}
+      />,
+      data.routerContext
+    );
+    await tick();
+    wrapper.update();
+
+    const link = wrapper.find('[data-test-id="grid-editable"] GridBody Link').at(0);
+    link.simulate('click', {button: 0});
+
+    expect(data.router.push).toHaveBeenCalledWith(
+      expect.objectContaining({
+        query: expect.objectContaining({
+          transaction: '/apple/cart',
+          query: 'sentry:yes',
+        }),
+      })
+    );
+  });
 });
