commit 0f386c11f223afc37340527fa3d8bdd402f08904
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Mar 25 18:32:53 2015 -0700

    Correct cursor handling for reversed pagination

diff --git a/src/sentry/api/paginator.py b/src/sentry/api/paginator.py
index c1899df227..99c4121435 100644
--- a/src/sentry/api/paginator.py
+++ b/src/sentry/api/paginator.py
@@ -99,15 +99,16 @@ class Paginator(object):
 
         # this effectively gets us the before post, and the current (after) post
         # every time
+        offset = cursor.offset
         if cursor.is_prev:
-            stop = cursor.offset + limit + 2
+            stop = offset + limit + 2
         else:
-            stop = cursor.offset + limit + 1
+            stop = offset + limit + 1
 
-        results = list(queryset[cursor.offset:stop])
+        results = list(queryset[offset:stop])
 
         if cursor.is_prev:
-            results = results[1:][::-1]
+            results = results[::-1][1:]
 
         return build_cursor(
             results=results,
diff --git a/src/sentry/utils/cursors.py b/src/sentry/utils/cursors.py
index 6d996ed43e..434f08b263 100644
--- a/src/sentry/utils/cursors.py
+++ b/src/sentry/utils/cursors.py
@@ -136,24 +136,19 @@ def build_cursor(results, key, limit=100, cursor=None):
     if is_prev and num_results:
         prev_value = long(key(results[0]))
 
-        if num_results > 2:
-            i = 1
-            while i < num_results and prev_value == long(key(results[i])):
-                i += 1
-            i -= 1
-        else:
-            i = 0
-
-        # if we iterated every result and the offset didn't change, we need
-        # to simply add the current offset to our total results (visible)
         if prev_value == value:
-            prev_offset = offset + i
+            prev_offset = offset
         else:
-            prev_offset = i
+            prev_offset = 0
+
+        i = 0
+        while i < num_results and prev_value == long(key(results[i])):
+            i += 1
+        prev_offset += i
     else:
         # previous cursor is easy if we're paginating forward
         prev_value = value
-        prev_offset = offset
+        prev_offset = max(0, offset - 1)
 
     # Truncate the list to our original result size now that we've determined the next page
     results = results[:limit]
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index fbb660152a..cb0ff86a23 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -9,9 +9,18 @@ from sentry.testutils.helpers import parse_link_header
 
 
 class GroupListTest(APITestCase):
-    def test_simple(self):
-        self.create_group(checksum='a' * 32)
-        self.create_group(checksum='b' * 32)
+    def _parse_links(self, header):
+        # links come in {url: {...attrs}}, but we need {rel: {...attrs}}
+        links = {}
+        for url, attrs in parse_link_header(header).iteritems():
+            links[attrs['rel']] = attrs
+            attrs['href'] = url
+        return links
+
+    def test_simple_pagination(self):
+        project = self.project
+        group1 = self.create_group(checksum='a' * 32)
+        group2 = self.create_group(checksum='b' * 32)
 
         self.login_as(user=self.user)
         url = reverse('sentry-api-0-project-group-index', kwargs={
@@ -20,15 +29,44 @@ class GroupListTest(APITestCase):
         })
         response = self.client.get(url + '?limit=1', format='json')
         assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == str(group1.id)
+
         # links come in {url: {...attrs}}, but we need {rel: {...attrs}}
-        links = {
-            d['rel']: d
-            for d in parse_link_header(response['Link']).values()
-        }
+        links = self._parse_links(response['Link'])
 
         assert links['previous']['results'] == 'false'
         assert links['next']['results'] == 'true'
 
+        print(links['next']['cursor'])
+        response = self.client.get(links['next']['href'], format='json')
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == str(group2.id)
+
+        # links come in {url: {...attrs}}, but we need {rel: {...attrs}}
+        links = self._parse_links(response['Link'])
+
+        assert links['previous']['results'] == 'true'
+        assert links['next']['results'] == 'false'
+
+        print(links['previous']['cursor'])
+        response = self.client.get(links['previous']['href'], format='json')
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == str(group1.id)
+
+        # links come in {url: {...attrs}}, but we need {rel: {...attrs}}
+        links = self._parse_links(response['Link'])
+
+        assert links['previous']['results'] == 'false'
+        assert links['next']['results'] == 'true'
+
+        print(links['previous']['cursor'])
+        response = self.client.get(links['previous']['href'], format='json')
+        assert response.status_code == 200
+        assert len(response.data) == 0
+
 
 class GroupUpdateTest(APITestCase):
     def test_global_resolve(self):
