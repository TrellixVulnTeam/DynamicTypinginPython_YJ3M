commit 78bfc1ef34599fae168ccd33eceded3a71002b18
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Dec 7 01:16:51 2015 -0800

    Add project information to organization activity

diff --git a/src/sentry/api/endpoints/organization_activity.py b/src/sentry/api/endpoints/organization_activity.py
index 6a42da4d71..d3783538cc 100644
--- a/src/sentry/api/endpoints/organization_activity.py
+++ b/src/sentry/api/endpoints/organization_activity.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from sentry.api.bases import OrganizationEndpoint
 from sentry.api.paginator import DateTimePaginator
-from sentry.api.serializers import serialize
+from sentry.api.serializers import serialize, OrganizationActivitySerializer
 from sentry.models import Activity
 
 
@@ -17,5 +17,7 @@ class OrganizationActivityEndpoint(OrganizationEndpoint):
             queryset=queryset,
             paginator_cls=DateTimePaginator,
             order_by='-datetime',
-            on_results=lambda x: serialize(x, request.user),
+            on_results=lambda x: serialize(
+                x, request.user, OrganizationActivitySerializer()
+            ),
         )
diff --git a/src/sentry/api/serializers/models/activity.py b/src/sentry/api/serializers/models/activity.py
index 31b0c9469b..fc12c8f5b4 100644
--- a/src/sentry/api/serializers/models/activity.py
+++ b/src/sentry/api/serializers/models/activity.py
@@ -6,12 +6,48 @@ from sentry.models import Activity
 
 @register(Activity)
 class ActivitySerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        # TODO(dcramer); assert on relations
+        users = dict(zip(
+            item_list,
+            serialize([i.user for i in item_list], user)
+        ))
+
+        return {
+            item: {
+                'user': users[item],
+            } for item in item_list
+        }
+
     def serialize(self, obj, attrs, user):
-        d = {
+        return {
             'id': str(obj.id),
-            'user': serialize(obj.user),
+            'user': attrs['user'],
             'type': obj.get_type_display(),
             'data': obj.data,
             'dateCreated': obj.datetime,
         }
-        return d
+
+
+class OrganizationActivitySerializer(ActivitySerializer):
+    def get_attrs(self, item_list, user):
+        # TODO(dcramer); assert on relations
+        attrs = super(OrganizationActivitySerializer, self).get_attrs(
+            item_list, user,
+        )
+
+        projects = dict(zip(
+            item_list,
+            serialize([i.project for i in item_list], user)
+        ))
+
+        for item in item_list:
+            attrs[item]['project'] = projects[item]
+        return attrs
+
+    def serialize(self, obj, attrs, user):
+        context = super(OrganizationActivitySerializer, self).serialize(
+            obj, attrs, user,
+        )
+        context['project'] = attrs['project']
+        return context
