commit ad9105499b31152f33e8cf322ebec6f133fb266b
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Jan 16 11:01:53 2020 -0800

    ref: Deprecate bind_node_data (#16449)
    
    It's no longer necessary to manually bind a single event using the new
    Eventstore model since NodeData will be lazily fetched on any attempt to
    access it. The only remaining use case for manually binding nodes is
    when we want to fetch multiple events from nodestore and take advantage
    of the get_multi command.

diff --git a/src/sentry/eventstore/base.py b/src/sentry/eventstore/base.py
index bea94a158f..59c8262e65 100644
--- a/src/sentry/eventstore/base.py
+++ b/src/sentry/eventstore/base.py
@@ -187,10 +187,10 @@ class EventStorage(Service):
         For a list of Event objects, and a property name where we might find an
         (unfetched) NodeData on those objects, fetch all the data blobs for
         those NodeDatas with a single multi-get command to nodestore, and bind
-        the returned blobs to the NodeDatas
+        the returned blobs to the NodeDatas.
 
-        For binding a single Event object (most use cases), it's easier to use
-        event.bind_node_data().
+        It's not necessary to bind a single Event object since data will be lazily
+        fetched on any attempt to access a property.
         """
         # Temporarily make bind_nodes noop to prevent unnecessary additional calls
         # to nodestore by the event serializer.
diff --git a/src/sentry/eventstore/snuba/backend.py b/src/sentry/eventstore/snuba/backend.py
index fb92de005d..f7d362d996 100644
--- a/src/sentry/eventstore/snuba/backend.py
+++ b/src/sentry/eventstore/snuba/backend.py
@@ -89,7 +89,6 @@ class SnubaEventStorage(EventStorage):
             return None
 
         event = Event(project_id=project_id, event_id=event_id)
-        event.bind_node_data()
 
         # Return None if there was no data in nodestore
         if len(event.data) == 0:
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 0eb165e410..56964b5286 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -11,7 +11,7 @@ from hashlib import md5
 
 from semaphore.processing import StoreNormalizer
 
-from sentry import eventtypes, nodestore
+from sentry import eventtypes
 from sentry.db.models import (
     BoundedBigIntegerField,
     BoundedIntegerField,
@@ -342,16 +342,6 @@ class EventCommon(object):
 
         return data
 
-    def bind_node_data(self):
-        # Do not rebind if node_data is already loaded
-        if self.data._node_data:
-            return
-
-        node_id = Event.generate_node_id(self.project_id, self.event_id)
-        node_data = nodestore.get(node_id) or {}
-        ref = self.data.get_ref(self)
-        self.data.bind_data(node_data, ref=ref)
-
 
 def ref_func(x):
     return x.project_id or x.project.id
diff --git a/src/sentry/nodestore/README.rst b/src/sentry/nodestore/README.rst
index 5841c41444..0d3100cbe4 100644
--- a/src/sentry/nodestore/README.rst
+++ b/src/sentry/nodestore/README.rst
@@ -47,10 +47,9 @@ Getting Node Data
 `````````````````
 While Node Storage does not depend on any other component, it is rarely called directly.
 Events are bound to their node data by calling
-``eventstore.bind_nodes(event_list, 'data')``. In single use cases, we can call
-``event.bind_node_data()``. The reason that we supply the ``bind_nodes`` with a
-list is to utilize any backend that may support a "multiget" command, which heavily reduces
-the round trip time that it takes to receive data for multiple nodes.
+``eventstore.bind_nodes(event_list, 'data')``. The reason that we supply the ``bind_nodes``
+with a list is to utilize any backend that may support a "multiget" command, which heavily
+reduces the round trip time that it takes to receive data for multiple nodes.
 
 Setting Node Data
 `````````````````
diff --git a/src/sentry/plugins/bases/issue.py b/src/sentry/plugins/bases/issue.py
index 45848a544a..c25a1e42c0 100644
--- a/src/sentry/plugins/bases/issue.py
+++ b/src/sentry/plugins/bases/issue.py
@@ -210,7 +210,6 @@ class IssueTrackingPlugin(Plugin):
 
         prefix = self.get_conf_key()
         event = group.get_latest_event()
-        event.bind_node_data()
 
         op = request.POST.get("op", "create")
 
diff --git a/src/sentry/plugins/bases/issue2.py b/src/sentry/plugins/bases/issue2.py
index 99a196066f..ad8a411964 100644
--- a/src/sentry/plugins/bases/issue2.py
+++ b/src/sentry/plugins/bases/issue2.py
@@ -237,7 +237,6 @@ class IssueTrackingPlugin2(Plugin):
                 },
                 status=400,
             )
-        event.bind_node_data()
         try:
             fields = self.get_new_issue_fields(request, group, event, **kwargs)
         except Exception as e:
@@ -307,8 +306,6 @@ class IssueTrackingPlugin2(Plugin):
                 status=400,
             )
 
-        event.bind_node_data()
-
         try:
             fields = self.get_link_existing_issue_fields(request, group, event, **kwargs)
         except Exception as e:
diff --git a/src/sentry/tasks/email.py b/src/sentry/tasks/email.py
index 323265262d..9ebe76d31e 100644
--- a/src/sentry/tasks/email.py
+++ b/src/sentry/tasks/email.py
@@ -49,7 +49,6 @@ def process_inbound_email(mailfrom, group_id, payload):
     event = group.get_latest_event()
 
     if event:
-        event.bind_node_data()
         event.group = group
         event.project = group.project
 
diff --git a/src/sentry/utils/committers.py b/src/sentry/utils/committers.py
index 33ca0e6042..0e231c964e 100644
--- a/src/sentry/utils/committers.py
+++ b/src/sentry/utils/committers.py
@@ -165,9 +165,6 @@ def get_previous_releases(project, start_version, limit=5):
 
 
 def get_event_file_committers(project, event, frame_limit=25):
-    # populate event data
-    event.bind_node_data()
-
     group = Group.objects.get(id=event.group_id)
 
     first_release_version = group.get_first_release()
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index 9739a7b1ba..76920d7e83 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -177,7 +177,6 @@ class SentryRemoteTest(SnubaTestCase):
 
     def get_event(self, event_id):
         instance = eventstore.get_event_by_id(self.project.id, event_id)
-        instance.bind_node_data()
         return instance
 
     def test_minimal(self):
@@ -615,7 +614,6 @@ class CspReportTest(TestCase, SnubaTestCase):
         )
         assert len(events) == 1
         e = events[0]
-        e.bind_node_data()
         assert output["message"] == e.data["logentry"]["formatted"]
         for key, value in six.iteritems(output["tags"]):
             assert e.get_tag(key) == value
diff --git a/tests/sentry/eventstore/test_models.py b/tests/sentry/eventstore/test_models.py
index 64ce48bd63..d10042b380 100644
--- a/tests/sentry/eventstore/test_models.py
+++ b/tests/sentry/eventstore/test_models.py
@@ -1,10 +1,9 @@
 from __future__ import absolute_import
 
-from sentry.utils.compat import mock
 import pickle
 import pytest
 
-from sentry import eventstore, nodestore
+from sentry import eventstore
 from sentry.db.models.fields.node import NodeData
 from sentry.eventstore.models import Event
 from sentry.models import Environment
@@ -228,26 +227,6 @@ class EventTest(TestCase):
         assert not event_from_nodestore.group_id
         assert not event_from_nodestore.group
 
-    def test_bind_node_data(self):
-        event = self.store_event(
-            data={
-                "event_id": "a" * 32,
-                "message": "test",
-                "timestamp": iso_format(before_now(seconds=1)),
-                "type": "error",
-            },
-            project_id=self.project.id,
-        )
-        group_id = event.group.id
-
-        e1 = Event(self.project.id, "a" * 32, group_id=group_id)
-        e1.bind_node_data()
-
-        with mock.patch.object(nodestore, "get") as mock_get:
-            event.bind_node_data()
-            event.bind_node_data()
-            assert mock_get.call_count == 0
-
 
 @pytest.mark.django_db
 def test_renormalization(monkeypatch, factories, task_runner, default_project):
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index a68b1c45d3..bf7dbf483c 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -139,13 +139,12 @@ class EventNodeStoreTest(TestCase):
         event.data._node_data = None
 
         with pytest.raises(NodeIntegrityFailure):
-            event.bind_node_data()
+            eventstore.bind_nodes([event])
 
     def test_accepts_valid_ref(self):
         self.store_event(data={"event_id": "a" * 32}, project_id=self.project.id)
         event = Event(project_id=self.project.id, event_id="a" * 32)
         event.data.bind_ref(event)
-        event.bind_node_data()
         assert event.data.ref == event.project.id
 
     def test_basic_ref_binding(self):
diff --git a/tests/sentry/tasks/test_merge.py b/tests/sentry/tasks/test_merge.py
index c06342bede..deb7fc4df1 100644
--- a/tests/sentry/tasks/test_merge.py
+++ b/tests/sentry/tasks/test_merge.py
@@ -80,12 +80,10 @@ class MergeGroupTest(TestCase):
 
         event1 = eventstore.get_event_by_id(project.id, event1.event_id)
         assert event1.group_id == group2.id
-        event1.bind_node_data()
         assert event1.data["extra"]["foo"] == "bar"
 
         event2 = eventstore.get_event_by_id(project.id, event2.event_id)
         assert event2.group_id == group2.id
-        event2.bind_node_data()
         assert event2.data["extra"]["foo"] == "baz"
 
     def test_merge_creates_redirect(self):
