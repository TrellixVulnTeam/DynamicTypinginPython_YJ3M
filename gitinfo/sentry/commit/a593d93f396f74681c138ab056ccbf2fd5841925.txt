commit a593d93f396f74681c138ab056ccbf2fd5841925
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Sep 10 14:19:52 2015 -0700

    api/endpoints/group_notes_details: add edit/delete endpoints
    
    refs: GH-1939

diff --git a/src/sentry/api/endpoints/group_notes.py b/src/sentry/api/endpoints/group_notes.py
index 61f86a5ad6..9ba2c75826 100644
--- a/src/sentry/api/endpoints/group_notes.py
+++ b/src/sentry/api/endpoints/group_notes.py
@@ -2,20 +2,17 @@ from __future__ import absolute_import
 
 from datetime import timedelta
 from django.utils import timezone
-from rest_framework import serializers, status
+from rest_framework import status
 from rest_framework.response import Response
 
 from sentry.api.base import DocSection
 from sentry.api.bases.group import GroupEndpoint
 from sentry.api.serializers import serialize
+from sentry.api.serializers.rest_framework.group_notes import NoteSerializer
 from sentry.models import Activity
 from sentry.utils.functional import extract_lazy_object
 
 
-class NoteSerializer(serializers.Serializer):
-    text = serializers.CharField()
-
-
 class GroupNotesEndpoint(GroupEndpoint):
     doc_section = DocSection.EVENTS
 
diff --git a/src/sentry/api/endpoints/group_notes_details.py b/src/sentry/api/endpoints/group_notes_details.py
new file mode 100644
index 0000000000..dd7b2dd28d
--- /dev/null
+++ b/src/sentry/api/endpoints/group_notes_details.py
@@ -0,0 +1,60 @@
+from __future__ import absolute_import
+
+from rest_framework import status
+from rest_framework.exceptions import PermissionDenied
+from rest_framework.response import Response
+
+from sentry.api.bases.group import GroupEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.serializers import serialize
+from sentry.api.serializers.rest_framework.group_notes import NoteSerializer
+from sentry.models import Activity
+
+
+class GroupNotesDetailsEndpoint(GroupEndpoint):
+    # We explicitly don't allow a request with an ApiKey
+    # since an ApiKey is bound to the Organization, not
+    # an individual. Not sure if we'd want to allow an ApiKey
+    # to delete/update other users' comments
+    def delete(self, request, group, note_id):
+        if not request.user.is_authenticated():
+            raise PermissionDenied(detail="Key doesn't have permission to delete Note")
+
+        try:
+            note = Activity.objects.get(
+                group=group,
+                type=Activity.NOTE,
+                user=request.user,
+                id=note_id,
+            )
+        except Activity.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        note.delete()
+
+        return Response(status=204)
+
+    def put(self, request, group, note_id):
+        if not request.user.is_authenticated():
+            raise PermissionDenied(detail="Key doesn't have permission to edit Note")
+
+        try:
+            note = Activity.objects.get(
+                group=group,
+                type=Activity.NOTE,
+                user=request.user,
+                id=note_id,
+            )
+        except Activity.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        serializer = NoteSerializer(data=request.DATA)
+
+        if serializer.is_valid():
+            # Would be nice to have a last_modified timestamp we could bump here
+            note.data = dict(serializer.object)
+            note.save()
+
+            return Response(serialize(note, request.user), status=200)
+
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/api/serializers/rest_framework/group_notes.py b/src/sentry/api/serializers/rest_framework/group_notes.py
new file mode 100644
index 0000000000..75306223a0
--- /dev/null
+++ b/src/sentry/api/serializers/rest_framework/group_notes.py
@@ -0,0 +1,7 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers
+
+
+class NoteSerializer(serializers.Serializer):
+    text = serializers.CharField()
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 9a732c1b07..b715a8299a 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -11,6 +11,7 @@ from .endpoints.group_events import GroupEventsEndpoint
 from .endpoints.group_events_latest import GroupEventsLatestEndpoint
 from .endpoints.group_events_oldest import GroupEventsOldestEndpoint
 from .endpoints.group_notes import GroupNotesEndpoint
+from .endpoints.group_notes_details import GroupNotesDetailsEndpoint
 from .endpoints.group_stats import GroupStatsEndpoint
 from .endpoints.group_tags import GroupTagsEndpoint
 from .endpoints.group_tagkey_details import GroupTagKeyDetailsEndpoint
@@ -205,6 +206,9 @@ urlpatterns = patterns(
     url(r'^groups/(?P<group_id>\d+)/notes/$',
         GroupNotesEndpoint.as_view(),
         name='sentry-api-0-group-notes'),
+    url(r'^groups/(?P<group_id>\d+)/notes/(?P<note_id>[^\/]+)/$',
+        GroupNotesDetailsEndpoint.as_view(),
+        name='sentry-api-0-group-notes-details'),
     url(r'^groups/(?P<group_id>\d+)/stats/$',
         GroupStatsEndpoint.as_view(),
         name='sentry-api-0-group-stats'),
diff --git a/src/sentry/models/activity.py b/src/sentry/models/activity.py
index a00bad63da..409cd9a2e3 100644
--- a/src/sentry/models/activity.py
+++ b/src/sentry/models/activity.py
@@ -85,6 +85,16 @@ class Activity(Model):
             if self.event:
                 self.event.update(num_comments=F('num_comments') + 1)
 
+    def delete(self, *args, **kwargs):
+        super(Activity, self).delete(*args, **kwargs)
+
+        # HACK: support Group.num_comments
+        if self.type == Activity.NOTE:
+            self.group.update(num_comments=F('num_comments') - 1)
+
+            if self.event:
+                self.event.update(num_comments=F('num_comments') - 1)
+
     def get_recipients(self):
         from sentry.models import UserOption
 
diff --git a/tests/sentry/api/endpoints/test_group_notes_details.py b/tests/sentry/api/endpoints/test_group_notes_details.py
new file mode 100644
index 0000000000..847aa0e8da
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_notes_details.py
@@ -0,0 +1,44 @@
+from exam import fixture
+from django.core.urlresolvers import reverse
+from sentry.models import Activity, Group
+from sentry.testutils import APITestCase
+
+
+class GroupNotesDetailsTest(APITestCase):
+    @fixture
+    def url(self):
+        return reverse('sentry-api-0-group-notes-details', kwargs={
+            'group_id': self.group.id,
+            'note_id': self.activity.id,
+        })
+
+    def test_delete(self):
+        self.login_as(user=self.user)
+
+        url = self.url
+
+        assert Group.objects.get(id=self.group.id).num_comments == 1
+
+        response = self.client.delete(url, format='json')
+        assert response.status_code == 204, response.status_code
+        assert not Activity.objects.filter(id=self.activity.id).exists()
+
+        assert Group.objects.get(id=self.group.id).num_comments == 0
+
+    def test_put(self):
+        self.login_as(user=self.user)
+
+        url = self.url
+
+        response = self.client.put(url, format='json')
+        assert response.status_code == 400, response.content
+
+        response = self.client.put(url, format='json', data={
+            'text': 'hi haters',
+        })
+        assert response.status_code == 200, response.content
+
+        activity = Activity.objects.get(id=response.data['id'])
+        assert activity.user == self.user
+        assert activity.group == self.group
+        assert activity.data == {'text': 'hi haters'}
