commit 252b0e94947724ddda7c81cc772660ebb3ecb9e0
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Thu Jan 30 12:05:08 2020 -0500

    fix(discover2): Be able to apply aggregate functions on tags with hyphens (#16630)

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 7177f18858..9f150eb47a 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -854,7 +854,7 @@ VALID_AGGREGATES = {
     "sum": {"snuba_name": "sum", "fields": ["transaction.duration"]},
 }
 
-AGGREGATE_PATTERN = re.compile(r"^(?P<function>[^\(]+)\((?P<column>[a-z\._]*)\)$")
+AGGREGATE_PATTERN = re.compile(r"^(?P<function>[^\(]+)\((?P<column>.*)\)$")
 
 
 def get_json_meta_type(field, snuba_type):
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 5b91d6aeb4..bf98cfaaef 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -44,7 +44,7 @@ export type EventQuery = {
   per_page?: number;
 };
 
-const AGGREGATE_PATTERN = /^([^\(]+)\(([a-z\._+]*)\)$/;
+const AGGREGATE_PATTERN = /^([^\(]+)\((.*)\)$/;
 const ROUND_BRACKETS_PATTERN = /[\(\)]/;
 
 function explodeFieldString(field: string): {aggregation: string; field: string} {
@@ -222,9 +222,8 @@ export function getAggregateAlias(field: string): string {
   }
   return field
     .replace(AGGREGATE_PATTERN, '$1_$2')
-    .replace('.', '_')
-    .replace(/_+$/, '')
-    .toLowerCase();
+    .replace(/\./g, '_')
+    .replace(/_+$/, '');
 }
 
 export type QueryWithColumnState =
diff --git a/tests/js/spec/views/eventsV2/utils.spec.jsx b/tests/js/spec/views/eventsV2/utils.spec.jsx
index 5153cc852f..1a66516950 100644
--- a/tests/js/spec/views/eventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/utils.spec.jsx
@@ -11,6 +11,8 @@ import {
   getExpandedResults,
   getFieldRenderer,
   getDiscoverLandingUrl,
+  explodeField,
+  hasAggregateField,
 } from 'app/views/eventsV2/utils';
 import {COL_WIDTH_UNDEFINED, COL_WIDTH_NUMBER} from 'app/components/gridEditable';
 
@@ -18,6 +20,9 @@ describe('getAggregateAlias', function() {
   it('no-ops simple fields', function() {
     expect(getAggregateAlias('field')).toEqual('field');
     expect(getAggregateAlias('under_field')).toEqual('under_field');
+    expect(getAggregateAlias('foo.bar.is-Enterprise_42')).toEqual(
+      'foo.bar.is-Enterprise_42'
+    );
   });
 
   it('handles 0 arg functions', function() {
@@ -29,6 +34,9 @@ describe('getAggregateAlias', function() {
     expect(getAggregateAlias('count(id)')).toEqual('count_id');
     expect(getAggregateAlias('count_unique(user)')).toEqual('count_unique_user');
     expect(getAggregateAlias('count_unique(issue.id)')).toEqual('count_unique_issue_id');
+    expect(getAggregateAlias('count(foo.bar.is-Enterprise_42)')).toEqual(
+      'count_foo_bar_is-Enterprise_42'
+    );
   });
 });
 
@@ -265,6 +273,7 @@ describe('isAggregateField', function() {
   it('detects aliases', function() {
     expect(isAggregateField('p888')).toBe(false);
     expect(isAggregateField('other_field')).toBe(false);
+    expect(isAggregateField('foo.bar.is-Enterprise_42')).toBe(false);
     expect(isAggregateField('p75')).toBe(true);
     expect(isAggregateField('last_seen')).toBe(true);
   });
@@ -273,6 +282,7 @@ describe('isAggregateField', function() {
     expect(isAggregateField('thing(')).toBe(false);
     expect(isAggregateField('count()')).toBe(true);
     expect(isAggregateField('unique_count(user)')).toBe(true);
+    expect(isAggregateField('unique_count(foo.bar.is-Enterprise_42)')).toBe(true);
   });
 });
 
@@ -366,3 +376,65 @@ describe('getDiscoverLandingUrl', function() {
     expect(getDiscoverLandingUrl(org)).toBe('/organizations/org-slug/discover/results/');
   });
 });
+
+describe('explodeField', function() {
+  it('explodes fields', function() {
+    expect(explodeField({field: 'foobar'})).toEqual({
+      aggregation: '',
+      field: 'foobar',
+      width: 300,
+    });
+
+    // has width
+    expect(explodeField({field: 'foobar', width: 123})).toEqual({
+      aggregation: '',
+      field: 'foobar',
+      width: 123,
+    });
+
+    // has aggregation
+    expect(explodeField({field: 'count(foobar)', width: 123})).toEqual({
+      aggregation: 'count',
+      field: 'foobar',
+      width: 123,
+    });
+
+    // custom tag
+    expect(explodeField({field: 'foo.bar.is-Enterprise_42', width: 123})).toEqual({
+      aggregation: '',
+      field: 'foo.bar.is-Enterprise_42',
+      width: 123,
+    });
+
+    // custom tag with aggregation
+    expect(explodeField({field: 'count(foo.bar.is-Enterprise_42)', width: 123})).toEqual({
+      aggregation: 'count',
+      field: 'foo.bar.is-Enterprise_42',
+      width: 123,
+    });
+  });
+});
+
+describe('hasAggregateField', function() {
+  it('ensures an eventview has an aggregate field', function() {
+    let eventView = new EventView({
+      fields: [{field: 'foobar'}],
+      sorts: [],
+      query: '',
+      project: [],
+      environment: [],
+    });
+
+    expect(hasAggregateField(eventView)).toBe(false);
+
+    eventView = new EventView({
+      fields: [{field: 'count(foo.bar.is-Enterprise_42)'}],
+      sorts: [],
+      query: '',
+      project: [],
+      environment: [],
+    });
+
+    expect(hasAggregateField(eventView)).toBe(true);
+  });
+});
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 6682381906..a07bc2c755 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -367,6 +367,73 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
         assert data[0]["transaction"] == event.transaction
         assert data[0]["error_rate"] == 0.75
 
+    def test_aggregation(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+        self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "timestamp": self.min_ago,
+                "fingerprint": ["group_1"],
+                "user": {"email": "foo@example.com"},
+                "environment": "prod",
+                "tags": {"sub_customer.is-Enterprise-42": "1"},
+            },
+            project_id=project.id,
+        )
+        self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "timestamp": self.min_ago,
+                "fingerprint": ["group_2"],
+                "user": {"email": "foo@example.com"},
+                "environment": "staging",
+                "tags": {"sub_customer.is-Enterprise-42": "1"},
+            },
+            project_id=project.id,
+        )
+        self.store_event(
+            data={
+                "event_id": "c" * 32,
+                "timestamp": self.min_ago,
+                "fingerprint": ["group_2"],
+                "user": {"email": "foo@example.com"},
+                "environment": "prod",
+                "tags": {"sub_customer.is-Enterprise-42": "0"},
+            },
+            project_id=project.id,
+        )
+        self.store_event(
+            data={
+                "event_id": "d" * 32,
+                "timestamp": self.min_ago,
+                "fingerprint": ["group_2"],
+                "user": {"email": "foo@example.com"},
+                "environment": "prod",
+                "tags": {"sub_customer.is-Enterprise-42": "1"},
+            },
+            project_id=project.id,
+        )
+
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "field": [
+                        "sub_customer.is-Enterprise-42",
+                        "count(sub_customer.is-Enterprise-42)",
+                    ],
+                    "orderby": "sub_customer.is-Enterprise-42",
+                },
+            )
+
+        assert response.status_code == 200, response.content
+        assert len(response.data["data"]) == 2
+        data = response.data["data"]
+        assert data[0]["count_sub_customer_is-Enterprise-42"] == 1
+        assert data[1]["count_sub_customer_is-Enterprise-42"] == 3
+
     def test_aggregation_comparison(self):
         self.login_as(user=self.user)
         project = self.create_project()
