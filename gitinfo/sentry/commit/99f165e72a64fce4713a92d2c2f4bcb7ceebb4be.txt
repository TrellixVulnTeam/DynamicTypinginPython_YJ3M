commit 99f165e72a64fce4713a92d2c2f4bcb7ceebb4be
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Nov 29 10:56:03 2018 -0800

    feat(discover): Add link to event id rather than separate column (#10799)
    
    Displays links every time the id column is selected

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
index 71284cce14..e992f44579 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
@@ -228,7 +228,7 @@ export default function createQueryBuilder(initial = {}, organization) {
     // If there are no aggregations, always ensure we fetch event ID and
     // project ID so we can display the link to event
     if (type === 'baseQuery') {
-      return !originalQuery.aggregations.length && originalQuery.fields.length
+      return originalQuery.fields.includes('id')
         ? {
             ...originalQuery,
             fields: uniq([...originalQuery.fields, 'id', 'project.id']),
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
index ba791ffbfb..cf88e54419 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
@@ -6,7 +6,6 @@ import {t} from 'app/locale';
 import SentryTypes from 'app/sentryTypes';
 import Link from 'app/components/link';
 import Tooltip from 'app/components/tooltip';
-import InlineSvg from 'app/components/inlineSvg';
 import Panel from 'app/components/panels/panel';
 import {getDisplayValue, getDisplayText} from './utils';
 
@@ -15,7 +14,6 @@ const TABLE_ROW_BORDER = 1;
 const TABLE_ROW_HEIGHT_WITH_BORDER = TABLE_ROW_HEIGHT + TABLE_ROW_BORDER;
 const MIN_COL_WIDTH = 100;
 const MAX_COL_WIDTH = 500;
-const LINK_COL_WIDTH = 40;
 const CELL_PADDING = 20;
 const MIN_VISIBLE_ROWS = 6;
 const MAX_VISIBLE_ROWS = 30;
@@ -48,22 +46,16 @@ export default class ResultTable extends React.Component {
   }
 
   getCellRenderer = cols => ({key, rowIndex, columnIndex, style}) => {
-    const {query, data: {data, meta}} = this.props;
+    const {data: {data, meta}} = this.props;
 
-    const showEventLinks = !query.aggregations.length;
+    const isSpacingCol = columnIndex === cols.length;
 
-    const isLinkCol = showEventLinks && columnIndex === cols.length;
-
-    const isSpacingCol = typeof cols[columnIndex] === 'undefined';
-
-    const colName = isLinkCol || isSpacingCol ? null : cols[columnIndex].name;
+    const colName = isSpacingCol ? null : cols[columnIndex].name;
 
     const isNumberCol =
-      !isLinkCol &&
-      !isSpacingCol &&
-      ['number', 'integer'].includes(meta[columnIndex].type);
+      !isSpacingCol && ['number', 'integer'].includes(meta[columnIndex].type);
 
-    const align = isNumberCol ? 'right' : isLinkCol ? 'center' : 'left';
+    const align = isNumberCol ? 'right' : 'left';
 
     if (rowIndex === 0) {
       return (
@@ -73,9 +65,12 @@ export default class ResultTable extends React.Component {
       );
     }
 
-    const value = isLinkCol
-      ? this.getLink(data[rowIndex - 1])
-      : isSpacingCol ? null : getDisplayValue(data[rowIndex - 1][colName]);
+    let value = isSpacingCol ? null : getDisplayValue(data[rowIndex - 1][colName]);
+
+    // check for id column
+    if (columnIndex < cols.length && cols[columnIndex].name === 'id') {
+      value = this.getEventLink(data[rowIndex - 1]);
+    }
 
     return (
       <Cell key={key} style={style} isOddRow={rowIndex % 2 === 1} align={align}>
@@ -84,15 +79,15 @@ export default class ResultTable extends React.Component {
     );
   };
 
-  getLink = event => {
+  getEventLink = event => {
     const {slug, projects} = this.context.organization;
     const projectSlug = projects.find(project => project.id === `${event['project.id']}`)
       .slug;
 
     return (
-      <Tooltip title={t('Open event')} tooltipOptions={{container: 'body'}}>
+      <Tooltip title={t('Open event')}>
         <Link href={`/${slug}/${projectSlug}/events/${event.id}/`} target="_blank">
-          <InlineSvg src="icon-exit" size="1em" />
+          {event.id}
         </Link>
       </Tooltip>
     );
@@ -104,13 +99,11 @@ export default class ResultTable extends React.Component {
   // are less than 20 columns of data to check in total.
   // Adds an empty column at the end with the remaining table width if any.
   getColumnWidths = tableWidth => {
-    const {query, data: {data}} = this.props;
+    const {data: {data}} = this.props;
     const cols = this.getColumnList();
 
     const widths = [];
 
-    const showEventLinks = !query.aggregations.length;
-
     if (cols.length < 20) {
       cols.forEach(col => {
         const colName = col.name;
@@ -142,10 +135,6 @@ export default class ResultTable extends React.Component {
       });
     }
 
-    if (showEventLinks) {
-      widths.push(LINK_COL_WIDTH);
-    }
-
     const sumOfWidths = widths.reduce((sum, w) => sum + w, 0) + 2;
 
     // Add a fake column of remaining width
@@ -180,11 +169,12 @@ export default class ResultTable extends React.Component {
   getColumnList = () => {
     const {query, data: {meta}} = this.props;
 
-    const fields = new Set(query.fields);
+    const fields = new Set([
+      ...(query.fields || []),
+      ...query.aggregations.map(agg => agg[2]),
+    ]);
 
-    return !query.aggregations.length && query.fields.length
-      ? meta.filter(({name}) => fields.has(name))
-      : meta;
+    return meta.filter(({name}) => fields.has(name));
   };
 
   measureText = (text, isHeader) => {
@@ -216,14 +206,12 @@ export default class ResultTable extends React.Component {
   };
 
   renderTable() {
-    const {query, data: {data}, height} = this.props;
+    const {data: {data}, height} = this.props;
 
     const cols = this.getColumnList();
 
-    const showEventLinks = !query.aggregations.length;
-
     // Add one column at the end to make sure table spans full width
-    const colCount = cols.length + (showEventLinks ? 1 : 0) + 1;
+    const colCount = cols.length + 1;
 
     const visibleRows = this.getMaxVisibleRows(height);
 
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index 5707516d75..63236a3227 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -192,8 +192,8 @@ describe('Discover', function() {
       expect(wrapper.state().data.baseQuery.data).toEqual(mockResponse);
     });
 
-    it('always requests id and project.id for basic queries', async function() {
-      queryBuilder.updateField('fields', ['message']);
+    it('requests project.id if id is also requested', async function() {
+      queryBuilder.updateField('fields', ['message', 'id']);
       wrapper.instance().runQuery();
       await tick();
       expect(queryBuilder.fetch).toHaveBeenCalledTimes(1);
@@ -222,6 +222,7 @@ describe('Discover', function() {
     });
 
     it('also runs chart query if there are aggregations', async function() {
+      wrapper.instance().updateField('fields', []);
       wrapper.instance().updateField('aggregations', [['count()', null, 'count']]);
       wrapper.instance().runQuery();
       await tick();
diff --git a/tests/js/spec/views/organizationDiscover/result/index.spec.jsx b/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
index dfe499cd52..8f03fc8092 100644
--- a/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
@@ -16,6 +16,7 @@ describe('Result', function() {
           query: {
             aggregations: [['count()', null, 'count']],
             conditions: [],
+            fields: [],
           },
         },
         byDayQuery: {
@@ -137,6 +138,7 @@ describe('Result', function() {
         ).toBe('query time: 15 ms, 0 rows');
       });
     });
+
     describe('Toggles Visualizations', function() {
       beforeEach(function() {
         wrapper = mount(
diff --git a/tests/js/spec/views/organizationDiscover/result/table.spec.jsx b/tests/js/spec/views/organizationDiscover/result/table.spec.jsx
index 9ec3c99f88..83047eb94a 100644
--- a/tests/js/spec/views/organizationDiscover/result/table.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/result/table.spec.jsx
@@ -30,7 +30,7 @@ describe('ResultTable', function() {
       query: {fields: ['col1'], aggregations: []},
     });
     const widths = wrapper.instance().getColumnWidths(500);
-    expect(widths).toEqual([345, 40, 113]);
+    expect(widths).toEqual([345, 153]);
   });
 
   it('getRowHeight()', function() {
