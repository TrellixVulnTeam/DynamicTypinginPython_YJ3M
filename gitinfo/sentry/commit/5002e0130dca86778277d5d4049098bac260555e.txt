commit 5002e0130dca86778277d5d4049098bac260555e
Author: Chris Montrois <cmontrois@quickleft.com>
Date:   Fri Jul 10 16:19:28 2015 -0600

    Update React component tests
    
    Tests were not unmounting React components after running, which could cause
    memory leaks or unexpected behavior from "watched" Stores or Actions. Tests now
    unmount the tested component.

diff --git a/tests/js/spec/views/stream/filterSelectLink.spec.js b/tests/js/spec/views/stream/filterSelectLink.spec.js
index 627fb4c7e7..f866e12716 100644
--- a/tests/js/spec/views/stream/filterSelectLink.spec.js
+++ b/tests/js/spec/views/stream/filterSelectLink.spec.js
@@ -11,39 +11,38 @@ describe("FilterSelectLink", function() {
 
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
-    this.wrapper = TestUtils.renderIntoDocument(<FilterSelectLink />);
   });
 
   afterEach(function() {
     this.sandbox.restore();
+    React.unmountComponentAtNode(document.body);
   });
 
   describe("render()", function() {
 
     it("shows a button", function(){
-      var expected = findWithClass(this.wrapper, "btn");
+      var wrapper = React.render(<FilterSelectLink />, document.body);
+      var expected = findWithClass(wrapper, "btn");
       expect(expected).to.be.ok;
     });
 
     it("shows active state when passed isActive=true", function(){
-      this.wrapper = TestUtils.renderIntoDocument(<FilterSelectLink isActive={true} />);
-      var expected = findWithClass(this.wrapper, "active");
+      var wrapper = React.render(<FilterSelectLink isActive={true} />, document.body);
+      var expected = findWithClass(wrapper, "active");
       expect(expected).to.be.ok;
     });
 
     it("doesn't show active state when passed isActive=false", function(){
-      var wrapper = TestUtils.renderIntoDocument(<FilterSelectLink isActive={false} />);
-      function findActive() {
-        findWithClass(wrapper, "active");
-      }
-      expect(findActive).to.throw();
+      var wrapper = React.render(<FilterSelectLink isActive={false} />, document.body);
+      expect(() => findWithClass(wrapper, "active")).to.throw();
     });
 
 
     it("calls onSelect() when clicked", function(){
       var onSelect = this.sandbox.spy();
-      this.wrapper = TestUtils.renderIntoDocument(<FilterSelectLink onSelect={onSelect} />);
-      TestUtils.Simulate.click(this.wrapper.getDOMNode());
+      var wrapper = React.render(<FilterSelectLink onSelect={onSelect} />, document.body);
+
+      TestUtils.Simulate.click(wrapper.getDOMNode());
 
       expect(onSelect.called).to.be.true;
     });
diff --git a/tests/js/spec/views/stream/searchBar.spec.js b/tests/js/spec/views/stream/searchBar.spec.js
index cd3cfb2428..cc44d25e06 100644
--- a/tests/js/spec/views/stream/searchBar.spec.js
+++ b/tests/js/spec/views/stream/searchBar.spec.js
@@ -17,28 +17,35 @@ describe("SearchBar", function() {
 
   afterEach(function() {
     this.sandbox.restore();
+    React.unmountComponentAtNode(document.body);
   });
 
   describe("clearSearch()", function() {
 
     it("clears the query", function() {
-      var stubbedOnQueryChange = this.sandbox.spy();
-      var wrapper = TestUtils.renderIntoDocument(<SearchBar query={"is:unresolved"} onQueryChange={stubbedOnQueryChange} />);
+      var props = {
+        query: "is:unresolved",
+        onQueryChange: this.sandbox.spy()
+      };
+      var wrapper = React.render(<SearchBar {...props} />, document.body);
+
       wrapper.clearSearch();
-      expect(stubbedOnQueryChange.calledWith("")).to.be.true;
+
+      expect(props.onQueryChange.calledWith("")).to.be.true;
     });
 
     it("calls onSearch()", function(done) {
       var props = {
         query: "is:unresolved",
         onSearch: this.sandbox.spy(),
-        onQueryChange: (query, callback) => callback()
+        onQueryChange: this.sandbox.spy()
       };
-      var wrapper = TestUtils.renderIntoDocument(<SearchBar {...props} />);
+      var wrapper = React.render(<SearchBar {...props} />, document.body);
+
       wrapper.clearSearch();
 
       setTimeout(() => {
-        expect(props.onSearch.called).to.be.true;
+        expect(props.onQueryChange.calledWith("", props.onSearch)).to.be.true;
         done();
       });
     });
@@ -48,9 +55,11 @@ describe("SearchBar", function() {
   describe("onQueryFocus()", function() {
 
     it("displays the drop down", function() {
-      var wrapper = TestUtils.renderIntoDocument(<SearchBar />);
+      var wrapper = React.render(<SearchBar />, document.body);
       expect(wrapper.state.dropdownVisible).to.be.false;
+
       wrapper.onQueryFocus();
+
       expect(wrapper.state.dropdownVisible).to.be.true;
     });
 
@@ -59,10 +68,11 @@ describe("SearchBar", function() {
   describe("onQueryBlur()", function() {
 
     it("hides the drop down", function() {
-      var wrapper = TestUtils.renderIntoDocument(<SearchBar />);
+      var wrapper = React.render(<SearchBar />, document.body);
       wrapper.state.dropdownVisible = true;
 
       wrapper.onQueryBlur();
+
       expect(wrapper.state.dropdownVisible).to.be.false;
     });
 
@@ -71,12 +81,12 @@ describe("SearchBar", function() {
   describe("render()", function() {
 
     it("invokes onSearch() when submitting the form", function() {
-      var stubOnSearch = this.sandbox.spy();
-      var wrapper = TestUtils.renderIntoDocument(<SearchBar onSearch={stubOnSearch} />);
+      var stubbedOnSearch = this.sandbox.spy();
+      var wrapper = React.render(<SearchBar onSearch={stubbedOnSearch} />, document.body);
 
       TestUtils.Simulate.submit(wrapper.refs.searchForm, { preventDefault() {} });
 
-      expect(stubOnSearch.called).to.be.true;
+      expect(stubbedOnSearch.called).to.be.true;
     });
 
     it("invokes onSearch() when search is cleared", function(done) {
@@ -85,13 +95,12 @@ describe("SearchBar", function() {
         onSearch: this.sandbox.spy(),
         onQueryChange: this.sandbox.spy()
       };
-      var wrapper = TestUtils.renderIntoDocument(<SearchBar {...props} />);
+      var wrapper = React.render(<SearchBar {...props} />, document.body);
 
       var cancelButton = findWithClass(wrapper, "search-clear-form");
       TestUtils.Simulate.click(cancelButton);
 
       setTimeout(() => {
-        // expect(props.onSearch.called).to.be.true;
         expect(props.onQueryChange.calledWith("", props.onSearch)).to.be.true;
         done();
       });
