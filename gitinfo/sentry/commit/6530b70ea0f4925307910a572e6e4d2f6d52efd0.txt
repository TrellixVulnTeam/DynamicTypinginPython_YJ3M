commit 6530b70ea0f4925307910a572e6e4d2f6d52efd0
Author: Mark Story <mark@sentry.io>
Date:   Wed Aug 14 17:27:00 2019 -0400

    fix(ui) Fix accessing a property on the undefined release data (#14368)
    
    There was a race condition where release data could not be complete and
    the getBody() method would be called because `hasRepos` was true. I've
    refactored that condition to be more exhaustive in its conditions. I've
    also converted this component to be class based, and not use inline
    style attributes.
    
    Fixes JAVASCRIPT-1F1F

diff --git a/src/sentry/static/sentry/app/components/versionHoverCard.jsx b/src/sentry/static/sentry/app/components/versionHoverCard.jsx
index 816faae9f2..ad94a18054 100644
--- a/src/sentry/static/sentry/app/components/versionHoverCard.jsx
+++ b/src/sentry/static/sentry/app/components/versionHoverCard.jsx
@@ -1,8 +1,6 @@
 import {Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
-import _ from 'lodash';
-import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
 import {getShortVersion} from 'app/utils';
@@ -17,99 +15,74 @@ import RepoLabel from 'app/components/repoLabel';
 import TimeSince from 'app/components/timeSince';
 import withApi from 'app/utils/withApi';
 
-const VersionHoverCard = createReactClass({
-  displayName: 'VersionHoverCard',
-
-  propTypes: {
+class VersionHoverCard extends React.Component {
+  static propTypes = {
     api: PropTypes.object,
     version: PropTypes.string.isRequired,
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
-  },
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      data: {},
-      visible: false,
-      hasRepos: false,
-      deploys: [],
-    };
-  },
+  };
+
+  state = {
+    loading: true,
+    error: false,
+    data: {},
+    visible: false,
+    hasRepos: false,
+    deploys: [],
+    release: null,
+  };
 
   componentDidMount() {
     this.fetchData();
-  },
+  }
 
-  fetchData() {
-    const {orgId, projectId, version} = this.props;
-    const done = _.after(3, () => {
-      this.setState({loading: false});
-    });
+  async fetchData() {
+    const {api, orgId, projectId, version} = this.props;
 
     // releases
     const releasePath = `/projects/${orgId}/${projectId}/releases/${encodeURIComponent(
       version
     )}/`;
-    this.props.api.request(releasePath, {
+    const releaseRequest = api.requestPromise(releasePath, {
       method: 'GET',
-      success: data => {
-        this.setState({
-          release: data,
-        });
-      },
-      error: () => {
-        this.setState({
-          error: true,
-        });
-      },
-      complete: done,
     });
 
     // repos
-    const repoPath = `/organizations/${orgId}/repos/`;
-    this.props.api.request(repoPath, {
+    const repoRequest = api.requestPromise(`/organizations/${orgId}/repos/`, {
       method: 'GET',
-      success: data => {
-        this.setState({
-          hasRepos: data.length > 0,
-        });
-      },
-      error: () => {
-        this.setState({
-          error: true,
-        });
-      },
-      complete: done,
     });
 
     //deploys
     const deployPath = `/organizations/${orgId}/releases/${encodeURIComponent(
       version
     )}/deploys/`;
-    this.props.api.request(deployPath, {
+    const deployRequest = api.requestPromise(deployPath, {
       method: 'GET',
-      success: data => {
-        this.setState({
-          deploys: data,
-        });
-      },
-      error: () => {
-        this.setState({
-          error: true,
-        });
-      },
-      complete: done,
     });
-  },
+
+    try {
+      const [release, repos, deploys] = await Promise.all([
+        releaseRequest,
+        repoRequest,
+        deployRequest,
+      ]);
+      this.setState({
+        release,
+        deploys,
+        hasRepos: repos.length > 0,
+        loading: false,
+      });
+    } catch (e) {
+      this.setState({error: true});
+    }
+  }
 
   toggleHovercard() {
     this.setState({
       visible: true,
-      // visible: !this.state.visible,
     });
-  },
+  }
 
   getRepoLink() {
     const {orgId} = this.props;
@@ -127,7 +100,7 @@ const VersionHoverCard = createReactClass({
         </Box>
       ),
     };
-  },
+  }
 
   getBody() {
     const {release, deploys} = this.state;
@@ -187,19 +160,7 @@ const VersionHoverCard = createReactClass({
                   <div className="deploy" key={idx}>
                     <div className="deploy-meta" style={{position: 'relative'}}>
                       <VersionRepoLabel>{env}</VersionRepoLabel>
-                      {dateFinished && (
-                        <span
-                          className="text-light"
-                          style={{
-                            position: 'absolute',
-                            left: 98,
-                            width: '50%',
-                            padding: '3px 0',
-                          }}
-                        >
-                          <TimeSince date={dateFinished} />
-                        </span>
-                      )}
+                      {dateFinished && <StyledTimeSince date={dateFinished} />}
                     </div>
                   </div>
                 );
@@ -209,19 +170,18 @@ const VersionHoverCard = createReactClass({
         </div>
       ),
     };
-  },
+  }
 
   render() {
-    const {loading, error, hasRepos} = this.state;
+    const {loading, error, hasRepos, release} = this.state;
     let header = null;
-    let body = loading ? (
-      <LoadingIndicator mini={true} />
-    ) : error ? (
-      <LoadingError />
-    ) : null;
-
-    if (!loading && !error) {
-      const renderObj = hasRepos ? this.getBody() : this.getRepoLink();
+    let body = null;
+    if (loading) {
+      body = <LoadingIndicator mini={true} />;
+    } else if (error) {
+      body = <LoadingError />;
+    } else {
+      const renderObj = hasRepos && release ? this.getBody() : this.getRepoLink();
       header = renderObj.header;
       body = renderObj.body;
     }
@@ -231,8 +191,8 @@ const VersionHoverCard = createReactClass({
         {this.props.children}
       </Hovercard>
     );
-  },
-});
+  }
+}
 
 export {VersionHoverCard};
 
@@ -241,3 +201,11 @@ export default withApi(VersionHoverCard);
 const VersionRepoLabel = styled(RepoLabel)`
   width: 86px;
 `;
+
+const StyledTimeSince = styled(TimeSince)`
+  color: ${p => p.theme.gray2};
+  position: absolute;
+  left: 98px;
+  width: 50%;
+  padding: 3px 0;
+`;
