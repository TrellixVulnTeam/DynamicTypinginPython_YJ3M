commit 2f8328716067e3504bcc1e293bb7c4065394eb15
Author: Ben Vinegar <ben@benv.ca>
Date:   Tue Feb 2 19:16:47 2016 -0800

    Fully remove helpers/stubContext from js tests

diff --git a/tests/js/helpers/stubContext.jsx b/tests/js/helpers/stubContext.jsx
deleted file mode 100644
index 6535097d70..0000000000
--- a/tests/js/helpers/stubContext.jsx
+++ /dev/null
@@ -1,54 +0,0 @@
-/*eslint react/no-multi-comp:0*/
-// https://github.com/karlbright/react-stub-context/blob/master/src/index.js
-
-let React = require('react');
-
-function stubContext(BaseComponent, context) {
-  if(typeof context === 'undefined' || context === null) context = {};
-
-  let _contextTypes = {}, _context = context;
-
-  try {
-    Object.keys(_context).forEach(function(key) {
-      _contextTypes[key] = React.PropTypes.any;
-    });
-  } catch (err) {
-    throw new TypeError('createdStubbedContextComponent requires an object');
-  }
-
-  const StubbedContextParent = React.createClass({
-    displayName: 'StubbedContextParent',
-    contextTypes: _contextTypes,
-    childContextTypes: _contextTypes,
-    getChildContext() { return _context; },
-
-    render() {
-      return React.Children.only(this.props.children);
-    }
-  });
-
-  const StubbedContextHandler = React.createClass({
-    displayName: 'StubbedContextHandler',
-    childContextTypes: _contextTypes,
-    getChildContext() { return _context; },
-
-    getWrappedElement() { return this._wrappedElement; },
-    getWrappedParentElement() { return this._wrappedParentElement; },
-
-    render() {
-      this._wrappedElement = <BaseComponent ref="wrapped" {...this.state} {...this.props} />;
-      this._wrappedParentElement = <StubbedContextParent>{this._wrappedElement}</StubbedContextParent>;
-
-      return this._wrappedParentElement;
-    }
-  });
-
-  BaseComponent.contextTypes = Object.assign({}, BaseComponent.contextTypes, _contextTypes);
-
-  StubbedContextHandler.getWrappedComponent = function() { return BaseComponent; };
-  StubbedContextHandler.getWrappedParentComponent = function() { return StubbedContextParent; };
-
-  return StubbedContextHandler;
-}
-
-export default stubContext;
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index 6501f1f67b..16186eac7d 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -1,19 +1,12 @@
 import React from 'react';
-import TestUtils from 'react-addons-test-utils';
 import {shallow} from 'enzyme';
 import Cookies from 'js-cookie';
-import Sticky from 'react-sticky';
+import _ from 'underscore';
+
 import {Client} from 'app/api';
 import CursorPoller from 'app/utils/cursorPoller';
 import LoadingError from 'app/components/loadingError';
 import Stream from 'app/views/stream';
-import StreamGroup from 'app/components/stream/group';
-import StreamFilters from 'app/views/stream/filters';
-import StreamSidebar from 'app/views/stream/sidebar';
-import StreamActions from 'app/views/stream/actions';
-import stubReactComponents from '../../helpers/stubReactComponent';
-import stubContext from '../../helpers/stubContext';
-
 
 const DEFAULT_LINKS_HEADER =
   '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/issues/?cursor=1443575731:0:1>; rel="previous"; results="false"; cursor="1443575731:0:1", ' +
@@ -31,12 +24,17 @@ describe('Stream', function() {
       options.complete && options.complete();
     });
 
-    stubReactComponents(this.sandbox, [StreamGroup, StreamFilters, StreamSidebar, StreamActions, Sticky]);
-
-    this.projectContext = {
-      id: '3559',
-      slug: 'foo-project',
-      firstEvent: true
+    this.context = {
+      project: {
+        id: '3559',
+        slug: 'foo-project',
+        firstEvent: true
+      },
+      organization: {
+        id: '1337',
+        slug: 'foo-org'
+      },
+      team: {id: '2448'}
     };
 
     let props = {
@@ -46,14 +44,7 @@ describe('Stream', function() {
     };
 
     this.wrapper = shallow(<Stream {...props}/>, {
-      context: {
-        project: this.projectContext,
-        organization: {
-          id: '1337',
-          slug: 'foo-org'
-        },
-        team: {id: '2448'}
-      }
+      context: this.context
     });
   });
 
@@ -181,7 +172,7 @@ describe('Stream', function() {
     it('shows "awaiting events" message when no events have been sent', function() {
       let wrapper = this.wrapper;
 
-      this.projectContext.firstEvent = false; // Set false for this test only
+      this.context.project.firstEvent = false; // Set false for this test only
 
       wrapper.setState({
         error: false,
@@ -192,7 +183,7 @@ describe('Stream', function() {
 
       expect(this.wrapper.find('.awaiting-events').length).to.equal(1);
 
-      this.projectContext.firstEvent = true; // Reset for other tests
+      this.context.project.firstEvent = true; // Reset for other tests
     });
 
   });
@@ -236,7 +227,6 @@ describe('Stream', function() {
   });
 
   describe('getInitialState', function() {
-
     it('handles query', function() {
       let expected = {
         groupIds: [],
@@ -253,29 +243,18 @@ describe('Stream', function() {
         query: 'is:unresolved',
         sort: 'date',
       };
-      for (let property in expected) {
-        let stream = this.wrapper.instance();
-        let actual = stream.getInitialState();
 
-        expect(actual[property]).to.eql(expected[property]);
-      }
+      let actual = this.wrapper.instance().getInitialState();
+      expect(_.pick(actual, _.keys(expected))).to.eql(expected);
     });
 
     it('handles no searchId or query', function() {
-      let ContextStubbedStream = stubContext(Stream, {
-        project: this.projectContext,
-        organization: {
-          slug: 'foo-org'
-        },
-        team: {}
-      });
+      let props = {
+        setProjectNavSection: function () {},
+        location: {query: {sort: 'freq'}, search: 'sort=freq'},
+        params: {orgId: '123', projectId: '456'}
+      };
 
-      let Element = (
-        <ContextStubbedStream
-          setProjectNavSection={function () {}}
-          location={{query:{sort: 'freq'}, search: 'sort=freq'}}
-          params={{orgId: '123', projectId: '456'}}/>
-      );
       let expected = {
         groupIds: [],
         selectAllActive: false,
@@ -291,29 +270,22 @@ describe('Stream', function() {
         sort: 'freq',
         searchId: null,
       };
-      for (let property in expected) {
-        let stream = TestUtils.renderIntoDocument(Element).refs.wrapped;
-        let actual = stream.getInitialState();
 
-        expect(actual[property]).to.eql(expected[property]);
-      }
+      let stream = shallow(<Stream {...props}/>, {
+        context: this.context
+      }).instance();
+
+      let actual = stream.getInitialState();
+      expect(_.pick(actual, _.keys(expected))).to.eql(expected);
     });
 
     it('handles valid searchId in routing params', function() {
-      let ContextStubbedStream = stubContext(Stream, {
-        project: this.projectContext,
-        organization: {
-          slug: 'foo-org'
-        },
-        team: {}
-      });
+      let props = {
+        setProjectNavSection: function () {},
+        location: {query: {sort: 'freq'}, search: 'sort=freq'},
+        params: {orgId: '123', projectId: '456', searchId: '789'}
+      };
 
-      let Element = (
-        <ContextStubbedStream
-          setProjectNavSection={function () {}}
-          location={{query:{sort: 'freq'}, search: 'sort=freq'}}
-          params={{orgId: '123', projectId: '456', searchId: '789'}}/>
-      );
       let expected = {
         groupIds: [],
         selectAllActive: false,
@@ -330,31 +302,27 @@ describe('Stream', function() {
         searchId: '789',
       };
 
-      for (let property in expected) {
-        let stream = TestUtils.renderIntoDocument(Element).refs.wrapped;
-        stream.state.savedSearchList = [
+      let wrapper = shallow(<Stream {...props}/>, {
+        context: this.context
+      });
+
+      wrapper.setState({
+        savedSearchList: [
           {id: '789', query: 'is:unresolved', name: 'test'}
-        ];
-        let actual = stream.getInitialState();
-        expect(actual[property]).to.eql(expected[property]);
-      }
+        ]
+      });
+
+      let actual = wrapper.instance().getInitialState();
+      expect(_.pick(actual, _.keys(expected))).to.eql(expected);
     });
 
     it('handles invalid searchId in routing params', function() {
-      let ContextStubbedStream = stubContext(Stream, {
-        project: this.projectContext,
-        organization: {
-          slug: 'foo-org'
-        },
-        team: {}
-      });
+      let props = {
+        setProjectNavSection: function () {},
+        location: {query: {sort: 'freq'}, search: 'sort=freq'},
+        params: {orgId: '123', projectId: '456', searchId: '799'}
+      };
 
-      let Element = (
-        <ContextStubbedStream
-          setProjectNavSection={function () {}}
-          location={{query:{sort: 'freq'}, search: 'sort=freq'}}
-          params={{orgId: '123', projectId: '456', searchId: '799'}}/>
-      );
       let expected = {
         groupIds: [],
         selectAllActive: false,
@@ -371,13 +339,13 @@ describe('Stream', function() {
         searchId: null,
       };
 
-      let stream = TestUtils.renderIntoDocument(Element).refs.wrapped;
+      let stream = shallow(<Stream {...props}/>, {
+        context: this.context
+      }).instance();
+
       let actual = stream.getInitialState();
-      for (let property in expected) {
-        expect(actual[property]).to.eql(expected[property]);
-      }
+      expect(_.pick(actual, _.keys(expected))).to.eql(expected);
     });
-
   });
 
 });
