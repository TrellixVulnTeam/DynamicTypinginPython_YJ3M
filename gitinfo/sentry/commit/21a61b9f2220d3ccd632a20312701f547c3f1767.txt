commit 21a61b9f2220d3ccd632a20312701f547c3f1767
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 30 15:13:19 2010 -0700

    Some initial refactoring

diff --git a/MANIFEST.in b/MANIFEST.in
index 7ac5598e31..5e34fbdbf9 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -1,3 +1,3 @@
 include setup.py README.rst MANIFEST.in LICENSE
-recursive-include djangodblog/templates *
+recursive-include dblog/templates *
 global-exclude *~
\ No newline at end of file
diff --git a/README.rst b/README.rst
index 52d561257e..0a201dddd7 100644
--- a/README.rst
+++ b/README.rst
@@ -1,39 +1,32 @@
--------------
-django-db-log
--------------
+--------------
+django-db-log2
+--------------
 
 Logs Django exceptions to your database handler.
 
+(This is a major refactor of django-db-log and is not backwards compatible)
+
 =========
 Upgrading
 =========
 
 If you use South migrations, simply run::
 
-	python manage.py migrate djangodblog
+	python manage.py migrate dblog
 
 If you don't use South, then start.
 
-###############
-Notable Changes
-###############
-
-* 2.1.0 There is no longer a middleware. Instead, we use a fallback exception handler which catches all.
-* 2.0.0 Added `checksum` column to Error. Several indexes were created. Checksum calculation slightly changed.
-* 1.4.0 Added `logger` column to both Error and ErrorBatch. `traceback` and `class_name` are now nullable.
-* 1.3.0 Added `level` column to both Error and ErrorBatch.
-
 =======
 Install
 =======
 
 The easiest way to install the package is via pip::
 
-	pip install django-db-log --upgrade
+	pip install django-db-log2 --upgrade
 
 OR, if you're not quite on the same page (work on that), with setuptools::
 
-	easy_install django-db-log
+	easy_install django-db-log2
 
 Once installed, update your settings.py and add dblog to ``INSTALLED_APPS``::
 
@@ -42,7 +35,7 @@ Once installed, update your settings.py and add dblog to ``INSTALLED_APPS``::
 	    'django.contrib.auth',
 	    'django.contrib.contenttypes',
 	    'django.contrib.sessions',
-	    'djangodblog',
+	    'dblog',
 	    ...
 	)
 
@@ -52,7 +45,7 @@ Finally, run ``python manage.py syncdb`` to create the database tables.
 Configuration
 =============
 
-Several options exist to configure django-db-log via your ``settings.py``:
+Several options exist to configure django-db-log2 via your ``settings.py``:
 
 ######################
 DBLOG_CATCH_404_ERRORS
@@ -76,7 +69,7 @@ Use a secondary database to store error logs. This is useful if you have several
 You should also enable the ``DBLogRouter`` to avoid things like extraneous table creation::
 
 	DATABASE_ROUTERS = [
-		'djangodblog.routers.DBLogRouter',
+		'dblog.routers.DBLogRouter',
 		...
 	]
 
@@ -99,7 +92,7 @@ Enables showing full embedded (enhanced) tracebacks within the administration fo
 DBLOG_LOGGING
 #############
 
-Enabling this setting will turn off automatic database logging within the exception handler, and instead send all exceptions to the named logger ``dblog``. Use this in conjuction with ``djangodblog.handlers.DBLogHandler`` or your own handler to tweak how logging is dealt with.
+Enabling this setting will turn off automatic database logging within the exception handler, and instead send all exceptions to the named logger ``dblog``. Use this in conjuction with ``dblog.handlers.DBLogHandler`` or your own handler to tweak how logging is dealt with.
 
 A good example use case for this, is if you want to write to something like a syslog ahead of time, and later process that into the database with another tool.
 
@@ -110,7 +103,7 @@ Integration with ``logging``
 django-db-log supports the ability to directly tie into the ``logging`` module. To use it simply add ``DBLogHandler`` to your logger::
 
 	import logging
-	from djangodblog.handlers import DBLogHandler
+	from dblog.handlers import DBLogHandler
 	
 	logging.getLogger().addHandler(DBLogHandler())
 
@@ -127,33 +120,33 @@ Usage
 
 You will find two new admin panels in the automatically built Django administration:
 
-* Messages (Error)
-* Message summaries (ErrorBatch)
+* Messages (Message)
+* Message summaries (GroupedMessage)
 
-It will store every single error inside of the `Errors` model, and it will store a collective, or summary, of errors inside of `Error batches` (this is more useful for most cases). If you are using this on multiple sites with the same database, the `Errors` table also contains the SITE_ID for which it the error appeared on.
+It will store every single error inside of the `Messages` model, and it will store a collective, or summary, of errors inside of `Message batches` (this is more useful for most cases). If you are using this on multiple sites with the same database, the `Messages` table also contains the SITE_ID for which it the error appeared on.
 
 If you wish to access these within your own views and models, you may do so via the standard model API::
 
-	from djangodblog.models import Error, ErrorBatch
+	from dblog.models import Message, GroupedMessage
 	
 	# Pull the last 10 unresolved errors.
-	ErrorBatch.objects.filter(status=0).order_by('-last_seen')[0:10]
+	GroupedMessage.objects.filter(status=0).order_by('-last_seen')[0:10]
 
 You can also record errors outside of handler if you want::
 
-	from djangodblog.models import Error
+	from dblog.models import Message
 	
 	try:
 		...
 	except Exception, exc:
-		Error.objects.create_from_exception(exc, [url=None])
+		Message.objects.create_from_exception(exc, [url=None])
 
 If you wish to log normal messages (useful for non-``logging`` integration)::
 
-	from djangodblog.models import Error
+	from dblog.models import Message
 	import logging
 	
-	Error.objects.create_from_text('Error Message'[, level=logging.WARNING, url=None])
+	Message.objects.create_from_text('Message Message'[, level=logging.WARNING, url=None])
 
 Both the ``url`` and ``level`` parameters are optional. ``level`` should be one of the following:
 
diff --git a/dblog/__init__.py b/dblog/__init__.py
new file mode 100644
index 0000000000..100dec975c
--- /dev/null
+++ b/dblog/__init__.py
@@ -0,0 +1 @@
+__version__ = (1, 0, '-dev')
\ No newline at end of file
diff --git a/djangodblog/admin.py b/dblog/admin.py
similarity index 90%
rename from djangodblog/admin.py
rename to dblog/admin.py
index 286fe6b687..180e96ffa5 100644
--- a/djangodblog/admin.py
+++ b/dblog/admin.py
@@ -9,9 +9,9 @@ from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 from django import forms
 
-from djangodblog.helpers import ImprovedExceptionReporter
-from djangodblog.models import ErrorBatch, Error
-from djangodblog.settings import *
+from dblog.helpers import ImprovedExceptionReporter
+from dblog.models import GroupedMessage, Message
+from dblog.settings import *
 
 import base64
 import re
@@ -77,7 +77,7 @@ class EfficientAllValuesFilterSpec(AllValuesFilterSpec):
             yield {'selected': self.lookup_val == val,
                    'query_string': cl.get_query_string({self.field.name: val}),
                    'display': val}
-FilterSpec.filter_specs.insert(-1, (lambda f: hasattr(f, 'model') and f.model._meta.app_label == 'djangodblog', EfficientAllValuesFilterSpec))
+FilterSpec.filter_specs.insert(-1, (lambda f: hasattr(f, 'model') and f.model._meta.app_label == 'dblog', EfficientAllValuesFilterSpec))
 
 UNDEFINED = object()
 
@@ -106,26 +106,26 @@ class Link(forms.TextInput):
             value = force_unicode(value)
         return mark_safe(u'<a href="%s">%s</a>' % (value, escape(value)))
 
-class ErrorBatchAdminForm(forms.ModelForm):
+class GroupedMessageAdminForm(forms.ModelForm):
     traceback = forms.CharField(widget=PreformattedText())
     url = forms.CharField(widget=Link())
     
     class Meta:
         fields = ('url', 'logger', 'server_name', 'class_name', 'level', 'message', 'times_seen', 'first_seen', 'last_seen', 'traceback')
-        model = ErrorBatch
+        model = GroupedMessage
 
-class ErrorAdminForm(forms.ModelForm):
+class MessageAdminForm(forms.ModelForm):
     traceback = forms.CharField(widget=PreformattedText())
     url = forms.CharField(widget=Link())
     
     class Meta:
         fields = ('url', 'logger', 'server_name', 'class_name', 'level', 'message', 'datetime', 'traceback')
-        model = ErrorBatch
+        model = GroupedMessage
 
 # Actual admin modules
 
-class ErrorBatchAdmin(EfficientModelAdmin):
-    form            = ErrorBatchAdminForm
+class GroupedMessageAdmin(EfficientModelAdmin):
+    form            = GroupedMessageAdminForm
     list_display    = ('shortened_url', 'logger', 'level', 'server_name', 'times_seen', 'last_seen')
     list_display_links = ('shortened_url',)
     list_filter     = ('status', 'server_name', 'logger', 'level', 'last_seen')
@@ -152,15 +152,15 @@ class ErrorBatchAdmin(EfficientModelAdmin):
 
     def change_view(self, request, object_id, extra_context={}):
         obj = self.get_object(request, unquote(object_id))
-        recent_errors = Error.objects.filter(checksum=obj.checksum).order_by('-datetime')[0:5]
+        recent_errors = Message.objects.filter(checksum=obj.checksum).order_by('-datetime')[0:5]
         extra_context.update({
             'instance': obj,
             'recent_errors': recent_errors,
         })
-        return super(ErrorBatchAdmin, self).change_view(request, object_id, extra_context)
+        return super(GroupedMessageAdmin, self).change_view(request, object_id, extra_context)
 
-class ErrorAdmin(EfficientModelAdmin):
-    form            = ErrorAdminForm
+class MessageAdmin(EfficientModelAdmin):
+    form            = MessageAdminForm
     list_display    = ('shortened_url', 'logger', 'level', 'server_name', 'datetime')
     list_display_links = ('shortened_url',)
     list_filter     = ('server_name', 'logger', 'level', 'datetime')
@@ -191,7 +191,7 @@ class ErrorAdmin(EfficientModelAdmin):
             'show_traceback': show_traceback,
             'instance': obj,
         })
-        return super(ErrorAdmin, self).change_view(request, object_id, extra_context)
+        return super(MessageAdmin, self).change_view(request, object_id, extra_context)
         
     def get_traceback_context(self, request, obj):
         """
@@ -229,5 +229,5 @@ class ErrorAdmin(EfficientModelAdmin):
             'error_body': mark_safe(html),
         }
 
-admin.site.register(ErrorBatch, ErrorBatchAdmin)
-admin.site.register(Error, ErrorAdmin)
+admin.site.register(GroupedMessage, GroupedMessageAdmin)
+admin.site.register(Message, MessageAdmin)
diff --git a/djangodblog/feeds.py b/dblog/feeds.py
similarity index 83%
rename from djangodblog/feeds.py
rename to dblog/feeds.py
index 8acfbddd55..fae914f3c2 100644
--- a/djangodblog/feeds.py
+++ b/dblog/feeds.py
@@ -4,11 +4,11 @@ from django.http import HttpResponse
 from django.utils import feedgenerator
 from django.utils.translation import ugettext_lazy as _
 
-from djangodblog.models import Error, ErrorBatch
+from dblog.models import Message, GroupedMessage
 
 import logging
 
-class ErrorFeed(object):
+class MessageFeed(object):
     def __call__(self, request):
         feed_dict = {
             'title': self.get_title(request),
@@ -38,10 +38,10 @@ class ErrorFeed(object):
         return _('log messages')
 
     def get_link(self, request):
-        return reverse('admin:djangodblog_error_changelist')
+        return reverse('admin:dblog_error_changelist')
 
     def get_model(self, request):
-        return Error
+        return Message
 
     def get_query_set(self, request):
         qs = self.get_model(request).objects.all().order_by(self.get_order_field(request))
@@ -57,20 +57,20 @@ class ErrorFeed(object):
         return '-datetime'
 
     def get_item_url(self, request, obj):
-        return reverse('admin:djangodblog_error_change', args=[obj.pk])
+        return reverse('admin:dblog_error_change', args=[obj.pk])
 
     def get_item_date(self, request, obj):
         return obj.datetime
 
-class SummaryFeed(ErrorFeed):
+class SummaryFeed(MessageFeed):
     def get_title(self, request):
         return _('log summaries')
 
     def get_link(self, request):
-        return reverse('admin:djangodblog_errorbatch_changelist')
+        return reverse('admin:dblog_errorbatch_changelist')
 
     def get_model(self, request):
-        return ErrorBatch
+        return GroupedMessage
 
     def get_query_set(self, request):
         qs = super(SummaryFeed, self).get_query_set(request)
@@ -80,7 +80,7 @@ class SummaryFeed(ErrorFeed):
         return '-last_seen'
 
     def get_item_url(self, request, obj):
-        return reverse('admin:djangodblog_errorbatch_change', args=[obj.pk])
+        return reverse('admin:dblog_errorbatch_change', args=[obj.pk])
 
     def get_item_date(self, request, obj):
         return obj.last_seen
\ No newline at end of file
diff --git a/dblog/handlers.py b/dblog/handlers.py
new file mode 100644
index 0000000000..2809ca1c58
--- /dev/null
+++ b/dblog/handlers.py
@@ -0,0 +1,7 @@
+import logging
+
+class DBLogHandler(logging.Handler):
+    def emit(self, record):
+        from dblog.models import Message
+
+        Message.objects.create_from_record(record)
\ No newline at end of file
diff --git a/djangodblog/helpers.py b/dblog/helpers.py
similarity index 100%
rename from djangodblog/helpers.py
rename to dblog/helpers.py
diff --git a/djangodblog/management/__init__.py b/dblog/management/__init__.py
similarity index 100%
rename from djangodblog/management/__init__.py
rename to dblog/management/__init__.py
diff --git a/djangodblog/management/commands/__init__.py b/dblog/management/commands/__init__.py
similarity index 100%
rename from djangodblog/management/commands/__init__.py
rename to dblog/management/commands/__init__.py
diff --git a/djangodblog/management/commands/cleanup_dblog.py b/dblog/management/commands/cleanup_dblog.py
similarity index 75%
rename from djangodblog/management/commands/cleanup_dblog.py
rename to dblog/management/commands/cleanup_dblog.py
index bfe1f2df5f..dce34e63a8 100644
--- a/djangodblog/management/commands/cleanup_dblog.py
+++ b/dblog/management/commands/cleanup_dblog.py
@@ -1,6 +1,6 @@
 from django.core.management.base import CommandError, BaseCommand
 
-from djangodblog.models import Error, ErrorBatch
+from dblog.models import Message, GroupedMessage
 
 from optparse import make_option
 
@@ -21,5 +21,5 @@ class Command(BaseCommand):
         if options.get('logger'):
             base_kwargs['logger'] = options['logger']
         
-        ErrorBatch.objects.filter(last_seen__lte=ts, **base_kwargs).delete()
-        Error.objects.filter(datetime__lte=ts, **base_kwargs).delete()
\ No newline at end of file
+        GroupedMessage.objects.filter(last_seen__lte=ts, **base_kwargs).delete()
+        Message.objects.filter(datetime__lte=ts, **base_kwargs).delete()
\ No newline at end of file
diff --git a/djangodblog/manager.py b/dblog/manager.py
similarity index 91%
rename from djangodblog/manager.py
rename to dblog/manager.py
index 33fd8153ef..0f6de4c820 100644
--- a/djangodblog/manager.py
+++ b/dblog/manager.py
@@ -19,8 +19,8 @@ from django.db import models
 from django.utils.encoding import smart_unicode
 from django.views.debug import ExceptionReporter
 
-from djangodblog import settings
-from djangodblog.helpers import construct_checksum
+from dblog import settings
+from dblog.helpers import construct_checksum
 
 assert not settings.DATABASE_USING or django.VERSION >= (1, 2), 'The `DBLOG_DATABASE_USING` setting requires Django >= 1.2'
 
@@ -36,9 +36,9 @@ class DBLogManager(models.Manager):
         return qs
 
     def _create(self, **defaults):
-        from models import Error, ErrorBatch
+        from models import Message, GroupedMessage
         
-        URL_MAX_LENGTH = Error._meta.get_field_by_name('url')[0].max_length
+        URL_MAX_LENGTH = Message._meta.get_field_by_name('url')[0].max_length
         
         server_name = socket.gethostname()
         class_name  = defaults.pop('class_name', None)
@@ -48,7 +48,7 @@ class DBLogManager(models.Manager):
             data['url'] = defaults['url']
             defaults['url'] = defaults['url'][:URL_MAX_LENGTH]
 
-        instance = Error(
+        instance = Message(
             class_name=class_name,
             server_name=server_name,
             data=data,
@@ -57,21 +57,21 @@ class DBLogManager(models.Manager):
         instance.checksum = construct_checksum(instance)
         
         if settings.THRASHING_TIMEOUT and settings.THRASHING_LIMIT:
-            cache_key = 'djangodblog:%s:%s' % (instance.class_name, instance.checksum)
+            cache_key = 'dblog:%s:%s' % (instance.class_name, instance.checksum)
             added = cache.add(cache_key, 1, settings.THRASHING_TIMEOUT)
             if not added and cache.incr(cache_key) > settings.THRASHING_LIMIT:
                 return
 
         try:
             instance.save()
-            batch, created = ErrorBatch.objects.get_or_create(
+            batch, created = GroupedMessage.objects.get_or_create(
                 class_name = class_name,
                 server_name = server_name,
                 checksum = instance.checksum,
                 defaults = defaults
             )
             if not created:
-                ErrorBatch.objects.filter(pk=batch.pk).update(
+                GroupedMessage.objects.filter(pk=batch.pk).update(
                     times_seen=models.F('times_seen') + 1,
                     status=0,
                     last_seen=datetime.datetime.now(),
@@ -158,6 +158,6 @@ class DBLogManager(models.Manager):
             **kwargs
         )
 
-class ErrorBatchManager(DBLogManager):
+class GroupedMessageManager(DBLogManager):
     def get_by_natural_key(self, logger, server_name, checksum):
         return self.get(logger=logger, server_name=server_name, checksum=checksum)
\ No newline at end of file
diff --git a/djangodblog/middleware.py b/dblog/middleware.py
similarity index 100%
rename from djangodblog/middleware.py
rename to dblog/middleware.py
diff --git a/djangodblog/migrations/0001_initial.py b/dblog/migrations/0001_initial.py
similarity index 93%
rename from djangodblog/migrations/0001_initial.py
rename to dblog/migrations/0001_initial.py
index 263fc0ec55..588b966a37 100644
--- a/djangodblog/migrations/0001_initial.py
+++ b/dblog/migrations/0001_initial.py
@@ -8,7 +8,7 @@ class Migration(SchemaMigration):
     
     def forwards(self, orm):
         
-        # Adding model 'ErrorBatch'
+        # Adding model 'GroupedMessage'
         db.create_table('djangodblog_errorbatch', (
             ('status', self.gf('django.db.models.fields.PositiveIntegerField')(default=0, db_column='is_resolved')),
             ('first_seen', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
@@ -24,9 +24,9 @@ class Migration(SchemaMigration):
             ('message', self.gf('django.db.models.fields.TextField')()),
             ('last_seen', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
         ))
-        db.send_create_signal('djangodblog', ['ErrorBatch'])
+        db.send_create_signal('djangodblog', ['GroupedMessage'])
 
-        # Adding unique constraint on 'ErrorBatch', fields ['logger', 'server_name', 'checksum']
+        # Adding unique constraint on 'GroupedMessage', fields ['logger', 'server_name', 'checksum']
         db.create_unique('djangodblog_errorbatch', ['logger', 'server_name', 'checksum'])
 
         # Adding model 'Error'
@@ -47,10 +47,10 @@ class Migration(SchemaMigration):
     
     def backwards(self, orm):
         
-        # Deleting model 'ErrorBatch'
+        # Deleting model 'GroupedMessage'
         db.delete_table('djangodblog_errorbatch')
 
-        # Removing unique constraint on 'ErrorBatch', fields ['logger', 'server_name', 'checksum']
+        # Removing unique constraint on 'GroupedMessage', fields ['logger', 'server_name', 'checksum']
         db.delete_unique('djangodblog_errorbatch', ['logger', 'server_name', 'checksum'])
 
         # Deleting model 'Error'
@@ -72,7 +72,7 @@ class Migration(SchemaMigration):
             'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
         },
         'djangodblog.errorbatch': {
-            'Meta': {'unique_together': "(('logger', 'server_name', 'checksum'),)", 'object_name': 'ErrorBatch'},
+            'Meta': {'unique_together': "(('logger', 'server_name', 'checksum'),)", 'object_name': 'GroupedMessage'},
             'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
             'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
             'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
diff --git a/djangodblog/migrations/0002_update_indexes.py b/dblog/migrations/0002_update_indexes.py
similarity index 92%
rename from djangodblog/migrations/0002_update_indexes.py
rename to dblog/migrations/0002_update_indexes.py
index 2110abdb28..acd70df908 100644
--- a/djangodblog/migrations/0002_update_indexes.py
+++ b/dblog/migrations/0002_update_indexes.py
@@ -14,10 +14,10 @@ class Migration(SchemaMigration):
         # Adding index on 'Error', fields ['datetime']
         db.create_index('djangodblog_error', ['datetime'])
 
-        # Adding index on 'ErrorBatch', fields ['first_seen']
+        # Adding index on 'GroupedMessage', fields ['first_seen']
         db.create_index('djangodblog_errorbatch', ['first_seen'])
 
-        # Adding index on 'ErrorBatch', fields ['last_seen']
+        # Adding index on 'GroupedMessage', fields ['last_seen']
         db.create_index('djangodblog_errorbatch', ['last_seen'])
     
     
@@ -29,10 +29,10 @@ class Migration(SchemaMigration):
         # Removing index on 'Error', fields ['datetime']
         db.delete_index('djangodblog_error', ['datetime'])
 
-        # Removing index on 'ErrorBatch', fields ['first_seen']
+        # Removing index on 'GroupedMessage', fields ['first_seen']
         db.delete_index('djangodblog_errorbatch', ['first_seen'])
 
-        # Removing index on 'ErrorBatch', fields ['last_seen']
+        # Removing index on 'GroupedMessage', fields ['last_seen']
         db.delete_index('djangodblog_errorbatch', ['last_seen'])
     
     
@@ -51,7 +51,7 @@ class Migration(SchemaMigration):
             'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
         },
         'djangodblog.errorbatch': {
-            'Meta': {'unique_together': "(('logger', 'server_name', 'checksum'),)", 'object_name': 'ErrorBatch'},
+            'Meta': {'unique_together': "(('logger', 'server_name', 'checksum'),)", 'object_name': 'GroupedMessage'},
             'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
             'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
             'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
diff --git a/djangodblog/migrations/0003_add_error_checksum.py b/dblog/migrations/0003_add_error_checksum.py
similarity index 98%
rename from djangodblog/migrations/0003_add_error_checksum.py
rename to dblog/migrations/0003_add_error_checksum.py
index 10df029d38..131c220221 100644
--- a/djangodblog/migrations/0003_add_error_checksum.py
+++ b/dblog/migrations/0003_add_error_checksum.py
@@ -34,7 +34,7 @@ class Migration(SchemaMigration):
             'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
         },
         'djangodblog.errorbatch': {
-            'Meta': {'unique_together': "(('logger', 'server_name', 'checksum'),)", 'object_name': 'ErrorBatch'},
+            'Meta': {'unique_together': "(('logger', 'server_name', 'checksum'),)", 'object_name': 'GroupedMessage'},
             'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
             'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
             'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
diff --git a/djangodblog/migrations/0004_fill_error_checksums.py b/dblog/migrations/0004_fill_error_checksums.py
similarity index 94%
rename from djangodblog/migrations/0004_fill_error_checksums.py
rename to dblog/migrations/0004_fill_error_checksums.py
index 95d0557aab..d29f708eb7 100644
--- a/djangodblog/migrations/0004_fill_error_checksums.py
+++ b/dblog/migrations/0004_fill_error_checksums.py
@@ -14,8 +14,8 @@ class Migration(DataMigration):
         for e in orm.Error.objects.all():
             orm.Error.objects.filter(pk=e.pk).update(checksum=construct_checksum(e))
 
-        for e in orm.ErrorBatch.objects.all():
-            orm.ErrorBatch.objects.filter(pk=e.pk).update(checksum=construct_checksum(e))
+        for e in orm.GroupedMessage.objects.all():
+            orm.GroupedMessage.objects.filter(pk=e.pk).update(checksum=construct_checksum(e))
 
         
     def backwards(self, orm):
@@ -38,7 +38,7 @@ class Migration(DataMigration):
             'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
         },
         'djangodblog.errorbatch': {
-            'Meta': {'unique_together': "(('logger', 'server_name', 'checksum'),)", 'object_name': 'ErrorBatch'},
+            'Meta': {'unique_together': "(('logger', 'server_name', 'checksum'),)", 'object_name': 'GroupedMessage'},
             'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
             'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
             'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
diff --git a/djangodblog/migrations/__init__.py b/dblog/migrations/__init__.py
similarity index 100%
rename from djangodblog/migrations/__init__.py
rename to dblog/migrations/__init__.py
diff --git a/djangodblog/models.py b/dblog/models.py
similarity index 87%
rename from djangodblog/models.py
rename to dblog/models.py
index 1341d93f75..758cae36df 100644
--- a/djangodblog/models.py
+++ b/dblog/models.py
@@ -5,10 +5,10 @@ from django.http import Http404
 from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
-from djangodblog import settings
-from djangodblog.manager import DBLogManager, ErrorBatchManager
-from djangodblog.utils import JSONDictField
-from djangodblog.helpers import construct_checksum
+from dblog import settings
+from dblog.manager import DBLogManager, GroupedMessageManager
+from dblog.utils import JSONDictField
+from dblog.helpers import construct_checksum
 
 import datetime
 import warnings
@@ -22,7 +22,7 @@ except ImportError:
 
 logger = logging.getLogger('dblog')
 
-__all__ = ('Error', 'ErrorBatch')
+__all__ = ('Message', 'GroupedMessage')
 
 LOG_LEVELS = (
     (logging.INFO, _('info')),
@@ -37,7 +37,7 @@ STATUS_LEVELS = (
     (1, _('resolved')),
 )
 
-class ErrorBase(Model):
+class MessageBase(Model):
     logger          = models.CharField(max_length=64, blank=True, default='root', db_index=True)
     class_name      = models.CharField(_('type'), max_length=128, blank=True, null=True, db_index=True)
     level           = models.PositiveIntegerField(choices=LOG_LEVELS, default=logging.ERROR, blank=True, db_index=True)
@@ -83,19 +83,19 @@ class ErrorBase(Model):
         return self.traceback or ''
     description.short_description = _('description')
 
-class ErrorBatch(ErrorBase):
+class GroupedMessage(MessageBase):
     # XXX: We're using the legacy column for `is_resolved` for status
-    status          = models.PositiveIntegerField(default=0, db_column="is_resolved", choices=STATUS_LEVELS)
+    status          = models.PositiveIntegerField(default=0, choices=STATUS_LEVELS)
     times_seen      = models.PositiveIntegerField(default=1)
     last_seen       = models.DateTimeField(default=datetime.datetime.now, db_index=True)
     first_seen      = models.DateTimeField(default=datetime.datetime.now, db_index=True)
 
-    objects         = ErrorBatchManager()
+    objects         = GroupedMessageManager()
 
     class Meta:
         unique_together = (('logger', 'server_name', 'checksum'),)
-        verbose_name_plural = _('summaries')
-        verbose_name = _('summary')
+        verbose_name_plural = _('grouped messages')
+        verbose_name = _('grouped message')
     
     def __unicode__(self):
         return "(%s) %s: %s" % (self.times_seen, self.class_name, self.error())
@@ -137,14 +137,14 @@ class ErrorBatch(ErrorBase):
             if settings.USE_LOGGING:
                 logging.getLogger('dblog').critical(exc_value, exc_info=sys.exc_info(), extra=extra)
             else:
-                Error.objects.create_from_exception(**extra)
+                Message.objects.create_from_exception(**extra)
         except Exception, exc:
             try:
                 logger.exception(u'Unable to process log entry: %s' % (exc,))
             except Exception, exc:
                 warnings.warn(u'Unable to process log entry: %s' % (exc,))
 
-class Error(ErrorBase):
+class Message(MessageBase):
     datetime        = models.DateTimeField(default=datetime.datetime.now, db_index=True)
     data            = JSONDictField(blank=True, null=True)
 
@@ -158,7 +158,7 @@ class Error(ErrorBase):
     def save(self, *args, **kwargs):
         if not self.checksum:
             self.checksum = construct_checksum(self)
-        super(Error, self).save(*args, **kwargs)
+        super(Message, self).save(*args, **kwargs)
 
    
-got_request_exception.connect(ErrorBatch.handle_exception)
\ No newline at end of file
+got_request_exception.connect(GroupedMessage.handle_exception)
\ No newline at end of file
diff --git a/djangodblog/routers.py b/dblog/routers.py
similarity index 65%
rename from djangodblog/routers.py
rename to dblog/routers.py
index 668b38fb0d..fd9edcfd3d 100644
--- a/djangodblog/routers.py
+++ b/dblog/routers.py
@@ -1,8 +1,8 @@
-from djangodblog import settings
+from dblog import settings
 
 class DBLogRouter(object):
     def db_for_write(self, model, **hints):
-        if model._meta.app_label == 'djangodblog':
+        if model._meta.app_label == 'dblog':
             return settings.DATABASE_USING
 
     def db_for_read(self, model, **hints):
@@ -12,5 +12,5 @@ class DBLogRouter(object):
         dblog_db = settings.DATABASE_USING
         if not dblog_db:
             return None
-        if model._meta.app_label == 'djangodblog' and db != dblog_db:
+        if model._meta.app_label == 'dblog' and db != dblog_db:
             return False
\ No newline at end of file
diff --git a/djangodblog/settings.py b/dblog/settings.py
similarity index 100%
rename from djangodblog/settings.py
rename to dblog/settings.py
diff --git a/djangodblog/templates/admin/djangodblog/error/change_form.html b/dblog/templates/admin/djangodblog/error/change_form.html
similarity index 100%
rename from djangodblog/templates/admin/djangodblog/error/change_form.html
rename to dblog/templates/admin/djangodblog/error/change_form.html
diff --git a/dblog/templates/admin/djangodblog/error/change_list.html b/dblog/templates/admin/djangodblog/error/change_list.html
new file mode 100644
index 0000000000..a856d44bfa
--- /dev/null
+++ b/dblog/templates/admin/djangodblog/error/change_list.html
@@ -0,0 +1 @@
+{% extends "admin/dblog/errorbatch/change_list.html" %}
diff --git a/djangodblog/templates/admin/djangodblog/errorbatch/change_form.html b/dblog/templates/admin/djangodblog/errorbatch/change_form.html
similarity index 92%
rename from djangodblog/templates/admin/djangodblog/errorbatch/change_form.html
rename to dblog/templates/admin/djangodblog/errorbatch/change_form.html
index e1098b5881..54f04c8a24 100644
--- a/djangodblog/templates/admin/djangodblog/errorbatch/change_form.html
+++ b/dblog/templates/admin/djangodblog/errorbatch/change_form.html
@@ -20,7 +20,7 @@
 	.error-list h3 { padding: 0 8px; }
 	.error-list table { width: 100%; border: 1px solid #ddd; }
 	</style>
-	{% include "admin/djangodblog/partials/change_list_styles.html" %}
+	{% include "admin/dblog/partials/change_list_styles.html" %}
 {% endblock %}
 
 {% block content_title %}{% endblock %}
@@ -58,10 +58,10 @@
 	{{ block.super }}
 	{% if recent_errors %}
 		<div id="meta" class="error-list">
-			<h3>Recent Errors</h3>
+			<h3>Recent Messages</h3>
 			<table>
 				<thead>
-					<th>URL</th>
+					<th>View</th>
 					<th>Server name</th>
 					<th>Datetime</th>
 				</thead>
@@ -75,7 +75,7 @@
 				<tbody>
 					{% for error in recent_errors %}
 						<tr class="{% cycle 'row1' 'row2' %}">
-							<th><a href="{% url admin:djangodblog_error_change error.pk %}">{{ error.url }}</a></th>
+							<th><a href="{% url admin:dblog_error_change error.pk %}">{{ error.url }}</a></th>
 							<td>{{ error.server_name }}</td>
 							<td>{{ error.datetime }}</td>
 						</tr>
diff --git a/djangodblog/templates/admin/djangodblog/errorbatch/change_list.html b/dblog/templates/admin/djangodblog/errorbatch/change_list.html
similarity index 83%
rename from djangodblog/templates/admin/djangodblog/errorbatch/change_list.html
rename to dblog/templates/admin/djangodblog/errorbatch/change_list.html
index 743044803b..c969fdd880 100644
--- a/djangodblog/templates/admin/djangodblog/errorbatch/change_list.html
+++ b/dblog/templates/admin/djangodblog/errorbatch/change_list.html
@@ -4,7 +4,7 @@
 
 {% block extrastyle %}
 	{{ block.super }}
-	{% include "admin/djangodblog/partials/change_list_styles.html" %}
+	{% include "admin/dblog/partials/change_list_styles.html" %}
 {% endblock %}
 
 {% block result_list %}
diff --git a/djangodblog/templates/admin/djangodblog/errorbatch/change_list_results.html b/dblog/templates/admin/djangodblog/errorbatch/change_list_results.html
similarity index 100%
rename from djangodblog/templates/admin/djangodblog/errorbatch/change_list_results.html
rename to dblog/templates/admin/djangodblog/errorbatch/change_list_results.html
diff --git a/djangodblog/templates/admin/djangodblog/partials/change_list_styles.html b/dblog/templates/admin/djangodblog/partials/change_list_styles.html
similarity index 100%
rename from djangodblog/templates/admin/djangodblog/partials/change_list_styles.html
rename to dblog/templates/admin/djangodblog/partials/change_list_styles.html
diff --git a/djangodblog/templatetags/__init__.py b/dblog/templatetags/__init__.py
similarity index 100%
rename from djangodblog/templatetags/__init__.py
rename to dblog/templatetags/__init__.py
diff --git a/djangodblog/templatetags/dblog_admin.py b/dblog/templatetags/dblog_admin.py
similarity index 83%
rename from djangodblog/templatetags/dblog_admin.py
rename to dblog/templatetags/dblog_admin.py
index 8d53129101..221bee5dff 100644
--- a/djangodblog/templatetags/dblog_admin.py
+++ b/dblog/templatetags/dblog_admin.py
@@ -15,4 +15,4 @@ def result_list(cl):
     return {'cl': cl,
             'result_headers': list(result_headers(cl)),
             'results': list(better_results(cl))}
-result_list = register.inclusion_tag("admin/djangodblog/errorbatch/change_list_results.html")(result_list)
\ No newline at end of file
+result_list = register.inclusion_tag("admin/dblog/errorbatch/change_list_results.html")(result_list)
\ No newline at end of file
diff --git a/djangodblog/tests/__init__.py b/dblog/tests/__init__.py
similarity index 100%
rename from djangodblog/tests/__init__.py
rename to dblog/tests/__init__.py
diff --git a/djangodblog/tests/fixtures/feeds.json b/dblog/tests/fixtures/feeds.json
similarity index 90%
rename from djangodblog/tests/fixtures/feeds.json
rename to dblog/tests/fixtures/feeds.json
index 6fa93082fe..c6307914d9 100644
--- a/djangodblog/tests/fixtures/feeds.json
+++ b/dblog/tests/fixtures/feeds.json
@@ -8,13 +8,13 @@
       "class_name": "TypeError", 
       "checksum": "0edb43b51699ce88eed908b340feb17f", 
       "times_seen": 1, 
-      "traceback": "Traceback (most recent call last):\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/core/handlers/base.py\", line 100, in get_response\n    response = callback(request, *callback_args, **callback_kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 239, in wrapper\n    return self.admin_site.admin_view(view)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/views/decorators/cache.py\", line 69, in _wrapped_view_func\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/sites.py\", line 190, in inner\n    return view(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 21, in _wrapper\n    return decorator(bound_func)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 17, in bound_func\n    return func(self, *args2, **kwargs2)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 968, in changelist_view\n    self.date_hierarchy, self.search_fields, self.list_select_related, self.list_per_page, self.list_editable, self)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 66, in __init__\n    self.filter_specs, self.has_filters = self.get_filters(request)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 74, in get_filters\n    spec = FilterSpec.create(f, request, self.params, self.model, self.model_admin)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/filterspecs.py\", line 29, in create\n    return factory(f, request, params, model, model_admin)\n\n  File \"/Users/dcramer/Development/django-db-log/djangodblog/admin.py\", line 59, in __init__\n    raise\n\nTypeError: exceptions must be old-style classes or derived from BaseException, not NoneType\n", 
-      "url": "http://localhost:8000/admin/djangodblog/errorbatch/", 
+      "traceback": "Traceback (most recent call last):\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/core/handlers/base.py\", line 100, in get_response\n    response = callback(request, *callback_args, **callback_kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 239, in wrapper\n    return self.admin_site.admin_view(view)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/views/decorators/cache.py\", line 69, in _wrapped_view_func\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/sites.py\", line 190, in inner\n    return view(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 21, in _wrapper\n    return decorator(bound_func)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 17, in bound_func\n    return func(self, *args2, **kwargs2)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 968, in changelist_view\n    self.date_hierarchy, self.search_fields, self.list_select_related, self.list_per_page, self.list_editable, self)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 66, in __init__\n    self.filter_specs, self.has_filters = self.get_filters(request)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 74, in get_filters\n    spec = FilterSpec.create(f, request, self.params, self.model, self.model_admin)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/filterspecs.py\", line 29, in create\n    return factory(f, request, params, model, model_admin)\n\n  File \"/Users/dcramer/Development/django-db-log/dblog/admin.py\", line 59, in __init__\n    raise\n\nTypeError: exceptions must be old-style classes or derived from BaseException, not NoneType\n", 
+      "url": "http://localhost:8000/admin/dblog/errorbatch/", 
       "logger": "root", 
       "message": "exceptions must be old-style classes or derived from BaseException, not NoneType", 
       "last_seen": "2010-07-22 20:14:18"
     }, 
-    "model": "djangodblog.errorbatch", 
+    "model": "dblog.errorbatch", 
     "pk": 1
   }, 
   {
@@ -23,13 +23,13 @@
       "level": 40, 
       "class_name": "TypeError", 
       "checksum": "0edb43b51699ce88eed908b340feb17f", 
-      "traceback": "Traceback (most recent call last):\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/core/handlers/base.py\", line 100, in get_response\n    response = callback(request, *callback_args, **callback_kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 239, in wrapper\n    return self.admin_site.admin_view(view)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/views/decorators/cache.py\", line 69, in _wrapped_view_func\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/sites.py\", line 190, in inner\n    return view(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 21, in _wrapper\n    return decorator(bound_func)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 17, in bound_func\n    return func(self, *args2, **kwargs2)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 968, in changelist_view\n    self.date_hierarchy, self.search_fields, self.list_select_related, self.list_per_page, self.list_editable, self)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 66, in __init__\n    self.filter_specs, self.has_filters = self.get_filters(request)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 74, in get_filters\n    spec = FilterSpec.create(f, request, self.params, self.model, self.model_admin)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/filterspecs.py\", line 29, in create\n    return factory(f, request, params, model, model_admin)\n\n  File \"/Users/dcramer/Development/django-db-log/djangodblog/admin.py\", line 59, in __init__\n    raise\n\nTypeError: exceptions must be old-style classes or derived from BaseException, not NoneType\n", 
+      "traceback": "Traceback (most recent call last):\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/core/handlers/base.py\", line 100, in get_response\n    response = callback(request, *callback_args, **callback_kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 239, in wrapper\n    return self.admin_site.admin_view(view)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/views/decorators/cache.py\", line 69, in _wrapped_view_func\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/sites.py\", line 190, in inner\n    return view(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 21, in _wrapper\n    return decorator(bound_func)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 17, in bound_func\n    return func(self, *args2, **kwargs2)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 968, in changelist_view\n    self.date_hierarchy, self.search_fields, self.list_select_related, self.list_per_page, self.list_editable, self)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 66, in __init__\n    self.filter_specs, self.has_filters = self.get_filters(request)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 74, in get_filters\n    spec = FilterSpec.create(f, request, self.params, self.model, self.model_admin)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/filterspecs.py\", line 29, in create\n    return factory(f, request, params, model, model_admin)\n\n  File \"/Users/dcramer/Development/django-db-log/dblog/admin.py\", line 59, in __init__\n    raise\n\nTypeError: exceptions must be old-style classes or derived from BaseException, not NoneType\n", 
       "datetime": "2010-07-22 20:14:18", 
-      "url": "http://localhost:8000/admin/djangodblog/errorbatch/", 
+      "url": "http://localhost:8000/admin/dblog/errorbatch/", 
       "logger": "root", 
       "message": "exceptions must be old-style classes or derived from BaseException, not NoneType"
     }, 
-    "model": "djangodblog.error", 
+    "model": "dblog.error", 
     "pk": 1
   }
 ]
diff --git a/djangodblog/tests/models.py b/dblog/tests/models.py
similarity index 87%
rename from djangodblog/tests/models.py
rename to dblog/tests/models.py
index fdcc7ab991..fbf6e33b9b 100644
--- a/djangodblog/tests/models.py
+++ b/dblog/tests/models.py
@@ -1,5 +1,5 @@
 from django.db import models
-from djangodblog.utils import JSONDictField
+from dblog.utils import JSONDictField
 
 class JSONDictModel(models.Model):
     data = JSONDictField(blank=True, null=True)
diff --git a/djangodblog/tests/tests.py b/dblog/tests/tests.py
similarity index 66%
rename from djangodblog/tests/tests.py
rename to dblog/tests/tests.py
index 6dd69de900..3ee064fe84 100644
--- a/djangodblog/tests/tests.py
+++ b/dblog/tests/tests.py
@@ -7,10 +7,10 @@ from django.test.client import Client
 from django.test import TestCase
 from django.utils.encoding import smart_unicode
 
-from djangodblog.middleware import DBLogMiddleware
-from djangodblog.models import Error, ErrorBatch
-from djangodblog.tests.models import JSONDictModel, DuplicateKeyModel
-from djangodblog import settings
+from dblog.middleware import DBLogMiddleware
+from dblog.models import Message, GroupedMessage
+from dblog.tests.models import JSONDictModel, DuplicateKeyModel
+from dblog import settings
 
 import logging
 import sys
@@ -72,7 +72,7 @@ class DBLogTestCase(TestCase):
         
     def setUpHandler(self):
         self.tearDownHandler()
-        from djangodblog.handlers import DBLogHandler
+        from dblog.handlers import DBLogHandler
         
         logger = logging.getLogger()
         self._handlers = logger.handlers
@@ -101,57 +101,57 @@ class DBLogTestCase(TestCase):
     def testLogger(self):
         logger = logging.getLogger()
         
-        Error.objects.all().delete()
-        ErrorBatch.objects.all().delete()
+        Message.objects.all().delete()
+        GroupedMessage.objects.all().delete()
 
         self.setUpHandler()
 
         logger.error('This is a test error')
-        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        cur = (Message.objects.count(), GroupedMessage.objects.count())
         self.assertEquals(cur, (1, 1), 'Assumed logs failed to save. %s' % (cur,))
-        last = Error.objects.all().order_by('-id')[0:1].get()
+        last = Message.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, 'This is a test error')
 
         logger.warning('This is a test warning')
-        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        cur = (Message.objects.count(), GroupedMessage.objects.count())
         self.assertEquals(cur, (2, 2), 'Assumed logs failed to save. %s' % (cur,))
-        last = Error.objects.all().order_by('-id')[0:1].get()
+        last = Message.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.level, logging.WARNING)
         self.assertEquals(last.message, 'This is a test warning')
         
         logger.error('This is a test error')
-        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        cur = (Message.objects.count(), GroupedMessage.objects.count())
         self.assertEquals(cur, (3, 2), 'Assumed logs failed to save. %s' % (cur,))
-        last = Error.objects.all().order_by('-id')[0:1].get()
+        last = Message.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, 'This is a test error')
     
         logger = logging.getLogger('test')
         logger.info('This is a test info')
-        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        cur = (Message.objects.count(), GroupedMessage.objects.count())
         self.assertEquals(cur, (4, 3), 'Assumed logs failed to save. %s' % (cur,))
-        last = Error.objects.all().order_by('-id')[0:1].get()
+        last = Message.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'test')
         self.assertEquals(last.level, logging.INFO)
         self.assertEquals(last.message, 'This is a test info')
         
         logger.info('This is a test info with a url', extra=dict(url='http://example.com'))
-        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        cur = (Message.objects.count(), GroupedMessage.objects.count())
         self.assertEquals(cur, (5, 4), 'Assumed logs failed to save. %s' % (cur,))
-        last = Error.objects.all().order_by('-id')[0:1].get()
+        last = Message.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.url, 'http://example.com')
         
         try:
             raise ValueError('This is a test ValueError')
         except ValueError:
             logger.info('This is a test info with an exception', exc_info=sys.exc_info())
-            cur = (Error.objects.count(), ErrorBatch.objects.count())
+            cur = (Message.objects.count(), GroupedMessage.objects.count())
             self.assertEquals(cur, (6, 5), 'Assumed logs failed to save. %s' % (cur,))
-            last = Error.objects.all().order_by('-id')[0:1].get()
+            last = Message.objects.all().order_by('-id')[0:1].get()
             self.assertEquals(last.class_name, 'ValueError')
             self.assertEquals(last.message, 'This is a test info with an exception')
             self.assertTrue(last.data.get('exc'))
@@ -159,59 +159,59 @@ class DBLogTestCase(TestCase):
         self.tearDownHandler()
     
     def testMiddleware(self):
-        Error.objects.all().delete()
-        ErrorBatch.objects.all().delete()
+        Message.objects.all().delete()
+        GroupedMessage.objects.all().delete()
         
         request = RF.get("/", REMOTE_ADDR="127.0.0.1:8000")
 
         try:
-            Error.objects.get(id=999999999)
-        except Error.DoesNotExist, exc:
-            ErrorBatch.handle_exception(request=request, sender=self)
+            Message.objects.get(id=999999999)
+        except Message.DoesNotExist, exc:
+            GroupedMessage.handle_exception(request=request, sender=self)
         else:
-            self.fail('Unable to create `Error` entry.')
+            self.fail('Unable to create `Message` entry.')
         
-        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        cur = (Message.objects.count(), GroupedMessage.objects.count())
         self.assertEquals(cur, (1, 1), 'Assumed logs failed to save. %s' % (cur,))
-        last = Error.objects.all().order_by('-id')[0:1].get()
+        last = Message.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.class_name, 'DoesNotExist')
         self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, smart_unicode(exc))
         
     def testAPI(self):
-        Error.objects.all().delete()
-        ErrorBatch.objects.all().delete()
+        Message.objects.all().delete()
+        GroupedMessage.objects.all().delete()
 
         try:
-            Error.objects.get(id=999999989)
-        except Error.DoesNotExist, exc:
-            Error.objects.create_from_exception(exc)
+            Message.objects.get(id=999999989)
+        except Message.DoesNotExist, exc:
+            Message.objects.create_from_exception(exc)
         else:
-            self.fail('Unable to create `Error` entry.')
+            self.fail('Unable to create `Message` entry.')
 
         try:
-            Error.objects.get(id=999999989)
-        except Error.DoesNotExist, exc:
-            error = Error.objects.create_from_exception()
+            Message.objects.get(id=999999989)
+        except Message.DoesNotExist, exc:
+            error = Message.objects.create_from_exception()
             self.assertTrue(error.data.get('exc'))
         else:
-            self.fail('Unable to create `Error` entry.')
+            self.fail('Unable to create `Message` entry.')
 
         
-        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        cur = (Message.objects.count(), GroupedMessage.objects.count())
         self.assertEquals(cur, (2, 2), 'Assumed logs failed to save. %s' % (cur,))
-        last = Error.objects.all().order_by('-id')[0:1].get()
+        last = Message.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.class_name, 'DoesNotExist')
         self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, smart_unicode(exc))
         
-        Error.objects.create_from_text('This is an error', level=logging.DEBUG)
+        Message.objects.create_from_text('This is an error', level=logging.DEBUG)
         
-        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        cur = (Message.objects.count(), GroupedMessage.objects.count())
         self.assertEquals(cur, (3, 3), 'Assumed logs failed to save. %s' % (cur,))
-        last = Error.objects.all().order_by('-id')[0:1].get()
+        last = Message.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.level, logging.DEBUG)
         self.assertEquals(last.message, 'This is an error')
@@ -219,19 +219,19 @@ class DBLogTestCase(TestCase):
     def testAlternateDatabase(self):
         settings.DATABASE_USING = 'default'
         
-        Error.objects.all().delete()
-        ErrorBatch.objects.all().delete()
+        Message.objects.all().delete()
+        GroupedMessage.objects.all().delete()
 
         try:
-            Error.objects.get(id=999999979)
-        except Error.DoesNotExist, exc:
-            Error.objects.create_from_exception(exc)
+            Message.objects.get(id=999999979)
+        except Message.DoesNotExist, exc:
+            Message.objects.create_from_exception(exc)
         else:
-            self.fail('Unable to create `Error` entry.')
+            self.fail('Unable to create `Message` entry.')
             
-        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        cur = (Message.objects.count(), GroupedMessage.objects.count())
         self.assertEquals(cur, (1, 1), 'Assumed logs failed to save. %s' % (cur,))
-        last = Error.objects.all().order_by('-id')[0:1].get()
+        last = Message.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.class_name, 'DoesNotExist')
         self.assertEquals(last.level, logging.ERROR)
@@ -242,77 +242,77 @@ class DBLogTestCase(TestCase):
     def testIncorrectUnicode(self):
         self.setUpHandler()
         
-        cnt = Error.objects.count()
+        cnt = Message.objects.count()
         value = 'רונית מגן'
 
-        error = Error.objects.create_from_text(value)
-        self.assertEquals(Error.objects.count(), cnt+1)
+        error = Message.objects.create_from_text(value)
+        self.assertEquals(Message.objects.count(), cnt+1)
         self.assertEquals(error.message, value)
 
         logging.info(value)
-        self.assertEquals(Error.objects.count(), cnt+2)
+        self.assertEquals(Message.objects.count(), cnt+2)
 
         x = JSONDictModel.objects.create(data={'value': value})
         logging.warn(x)
-        self.assertEquals(Error.objects.count(), cnt+3)
+        self.assertEquals(Message.objects.count(), cnt+3)
 
         try:
-            raise SyntaxError(value)
+            raise SyntaxMessage(value)
         except Exception, exc:
             logging.exception(exc)
             logging.info('test', exc_info=sys.exc_info())
-        self.assertEquals(Error.objects.count(), cnt+5)
+        self.assertEquals(Message.objects.count(), cnt+5)
         
         self.tearDownHandler()
 
     def testCorrectUnicode(self):
         self.setUpHandler()
         
-        cnt = Error.objects.count()
+        cnt = Message.objects.count()
         value = 'רונית מגן'.decode('utf-8')
 
-        error = Error.objects.create_from_text(value)
-        self.assertEquals(Error.objects.count(), cnt+1)
+        error = Message.objects.create_from_text(value)
+        self.assertEquals(Message.objects.count(), cnt+1)
         self.assertEquals(error.message, value)
 
         logging.info(value)
-        self.assertEquals(Error.objects.count(), cnt+2)
+        self.assertEquals(Message.objects.count(), cnt+2)
 
         x = JSONDictModel.objects.create(data={'value': value})
         logging.warn(x)
-        self.assertEquals(Error.objects.count(), cnt+3)
+        self.assertEquals(Message.objects.count(), cnt+3)
 
         try:
-            raise SyntaxError(value)
+            raise SyntaxMessage(value)
         except Exception, exc:
             logging.exception(exc)
             logging.info('test', exc_info=sys.exc_info())
-        self.assertEquals(Error.objects.count(), cnt+5)
+        self.assertEquals(Message.objects.count(), cnt+5)
         
         self.tearDownHandler()
     
     def testLongURLs(self):
         # Fix: #6 solves URLs > 200 characters
-        error = Error.objects.create_from_text('hello world', url='a'*210)
+        error = Message.objects.create_from_text('hello world', url='a'*210)
         self.assertEquals(error.url, 'a'*200)
         self.assertEquals(error.data['url'], 'a'*210)
     
     def testUseLogging(self):
-        Error.objects.all().delete()
-        ErrorBatch.objects.all().delete()
+        Message.objects.all().delete()
+        GroupedMessage.objects.all().delete()
         
         request = RF.get("/", REMOTE_ADDR="127.0.0.1:8000")
 
         try:
-            Error.objects.get(id=999999999)
-        except Error.DoesNotExist, exc:
-            ErrorBatch.handle_exception(request=request, sender=self)
+            Message.objects.get(id=999999999)
+        except Message.DoesNotExist, exc:
+            GroupedMessage.handle_exception(request=request, sender=self)
         else:
             self.fail('Expected an exception.')
         
-        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        cur = (Message.objects.count(), GroupedMessage.objects.count())
         self.assertEquals(cur, (1, 1), 'Assumed logs failed to save. %s' % (cur,))
-        last = Error.objects.all().order_by('-id')[0:1].get()
+        last = Message.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.class_name, 'DoesNotExist')
         self.assertEquals(last.level, logging.ERROR)
@@ -326,13 +326,13 @@ class DBLogTestCase(TestCase):
         logger.addHandler(logging.StreamHandler())
         
         try:
-            Error.objects.get(id=999999999)
-        except Error.DoesNotExist, exc:
-            ErrorBatch.handle_exception(request=request, sender=self)
+            Message.objects.get(id=999999999)
+        except Message.DoesNotExist, exc:
+            GroupedMessage.handle_exception(request=request, sender=self)
         else:
             self.fail('Expected an exception.')
         
-        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        cur = (Message.objects.count(), GroupedMessage.objects.count())
         self.assertEquals(cur, (1, 1), 'Assumed logs failed to save. %s' % (cur,))
         
         settings.USE_LOGGING = False
@@ -341,51 +341,51 @@ class DBLogTestCase(TestCase):
         settings.THRASHING_LIMIT = 10
         settings.THRASHING_TIMEOUT = 60
         
-        Error.objects.all().delete()
-        ErrorBatch.objects.all().delete()
+        Message.objects.all().delete()
+        GroupedMessage.objects.all().delete()
         
         for i in range(0, 50):
-            Error.objects.create_from_text('hi')
+            Message.objects.create_from_text('hi')
         
-        self.assertEquals(Error.objects.count(), settings.THRASHING_LIMIT)
+        self.assertEquals(Message.objects.count(), settings.THRASHING_LIMIT)
     
     def testSignals(self):
-        Error.objects.all().delete()
-        ErrorBatch.objects.all().delete()
+        Message.objects.all().delete()
+        GroupedMessage.objects.all().delete()
 
         request = RF.get("/", REMOTE_ADDR="127.0.0.1:8000")
 
         try:
-            Error.objects.get(id=999999999)
-        except Error.DoesNotExist, exc:
+            Message.objects.get(id=999999999)
+        except Message.DoesNotExist, exc:
             got_request_exception.send(sender=self.__class__, request=request)
         else:
             self.fail('Expected an exception.')
             
-        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        cur = (Message.objects.count(), GroupedMessage.objects.count())
         self.assertEquals(cur, (1, 1), 'Assumed logs failed to save. %s' % (cur,))
-        last = Error.objects.all().order_by('-id')[0:1].get()
+        last = Message.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.class_name, 'DoesNotExist')
         self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, smart_unicode(exc))        
 
     def testSignalsWithoutRequest(self):
-        Error.objects.all().delete()
-        ErrorBatch.objects.all().delete()
+        Message.objects.all().delete()
+        GroupedMessage.objects.all().delete()
 
         request = RF.get("/", REMOTE_ADDR="127.0.0.1:8000")
 
         try:
-            Error.objects.get(id=999999999)
-        except Error.DoesNotExist, exc:
+            Message.objects.get(id=999999999)
+        except Message.DoesNotExist, exc:
             got_request_exception.send(sender=self.__class__, request=None)
         else:
             self.fail('Expected an exception.')
             
-        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        cur = (Message.objects.count(), GroupedMessage.objects.count())
         self.assertEquals(cur, (1, 1), 'Assumed logs failed to save. %s' % (cur,))
-        last = Error.objects.all().order_by('-id')[0:1].get()
+        last = Message.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.class_name, 'DoesNotExist')
         self.assertEquals(last.level, logging.ERROR)
@@ -395,17 +395,17 @@ class DBLogTestCase(TestCase):
         prev = settings.THRASHING_LIMIT
         settings.THRASHING_LIMIT = 0
         
-        Error.objects.all().delete()
-        ErrorBatch.objects.all().delete()
+        Message.objects.all().delete()
+        GroupedMessage.objects.all().delete()
         
         for i in range(0, 50):
-            Error.objects.create_from_text('hi')
+            Message.objects.create_from_text('hi')
         
-        self.assertEquals(Error.objects.count(), 50)
+        self.assertEquals(Message.objects.count(), 50)
 
         settings.THRASHING_LIMIT = prev
 
-    def testDatabaseError(self):
+    def testDatabaseMessage(self):
         from django.db import connection
         
         try:
@@ -414,23 +414,23 @@ class DBLogTestCase(TestCase):
         except:
             got_request_exception.send(sender=self.__class__)
 
-        self.assertEquals(Error.objects.count(), 1)
-        self.assertEquals(ErrorBatch.objects.count(), 1)
+        self.assertEquals(Message.objects.count(), 1)
+        self.assertEquals(GroupedMessage.objects.count(), 1)
 
-    def testIntegrityError(self):
+    def testIntegrityMessage(self):
         DuplicateKeyModel.objects.create()
         try:
             DuplicateKeyModel.objects.create()
         except:
             got_request_exception.send(sender=self.__class__)
         else:
-            self.fail('Excepted an IntegrityError to be raised.')
+            self.fail('Excepted an IntegrityMessage to be raised.')
 
-        self.assertEquals(Error.objects.count(), 1)
-        self.assertEquals(ErrorBatch.objects.count(), 1)
+        self.assertEquals(Message.objects.count(), 1)
+        self.assertEquals(GroupedMessage.objects.count(), 1)
 
 class DBLogViewsTest(TestCase):
-    urls = 'djangodblog.tests.urls'
+    urls = 'dblog.tests.urls'
     
     def setUp(self):
         settings.DATABASE_USING = None
@@ -443,7 +443,7 @@ class DBLogViewsTest(TestCase):
         
     def setUpHandler(self):
         self.tearDownHandler()
-        from djangodblog.handlers import DBLogHandler
+        from dblog.handlers import DBLogHandler
         
         logger = logging.getLogger()
         self._handlers = logger.handlers
@@ -470,37 +470,37 @@ class DBLogViewsTest(TestCase):
         self._handlers = None
 
     def testSignals(self):
-        Error.objects.all().delete()
-        ErrorBatch.objects.all().delete()
+        Message.objects.all().delete()
+        GroupedMessage.objects.all().delete()
 
         self.assertRaises(Exception, self.client.get, '/')
         
-        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        cur = (Message.objects.count(), GroupedMessage.objects.count())
         self.assertEquals(cur, (1, 1), 'Assumed logs failed to save. %s' % (cur,))
-        last = Error.objects.all().order_by('-id')[0:1].get()
+        last = Message.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.class_name, 'Exception')
         self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, 'view exception')
 
 class DBLogFeedsTest(TestCase):
-    fixtures = ['djangodblog/tests/fixtures/feeds.json']
-    urls = 'djangodblog.tests.urls'
+    fixtures = ['dblog/tests/fixtures/feeds.json']
+    urls = 'dblog.tests.urls'
     
-    def testErrorFeed(self):
+    def testMessageFeed(self):
         response = self.client.get(reverse('dblog-feed-messages'))
         self.assertEquals(response.status_code, 200)
         self.assertTrue(response.content.startswith('<?xml version="1.0" encoding="utf-8"?>'))
-        self.assertTrue('<link>http://testserver/admin/djangodblog/error/</link>' in response.content)
+        self.assertTrue('<link>http://testserver/admin/dblog/error/</link>' in response.content)
         self.assertTrue('<title>log messages</title>' in response.content)
-        self.assertTrue('<link>http://testserver/admin/djangodblog/error/1/</link>' in response.content)
+        self.assertTrue('<link>http://testserver/admin/dblog/error/1/</link>' in response.content)
         self.assertTrue('<title>TypeError: exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
 
     def testSummaryFeed(self):
         response = self.client.get(reverse('dblog-feed-summaries'))
         self.assertEquals(response.status_code, 200)
         self.assertTrue(response.content.startswith('<?xml version="1.0" encoding="utf-8"?>'))
-        self.assertTrue('<link>http://testserver/admin/djangodblog/errorbatch/</link>' in response.content)
+        self.assertTrue('<link>http://testserver/admin/dblog/errorbatch/</link>' in response.content)
         self.assertTrue('<title>log summaries</title>' in response.content)
-        self.assertTrue('<link>http://testserver/admin/djangodblog/errorbatch/1/</link>' in response.content)
+        self.assertTrue('<link>http://testserver/admin/dblog/errorbatch/1/</link>' in response.content)
         self.assertTrue('<title>(1) TypeError: TypeError: exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
\ No newline at end of file
diff --git a/djangodblog/tests/urls.py b/dblog/tests/urls.py
similarity index 58%
rename from djangodblog/tests/urls.py
rename to dblog/tests/urls.py
index aa968c59c6..6c99b4ab01 100644
--- a/djangodblog/tests/urls.py
+++ b/dblog/tests/urls.py
@@ -5,6 +5,6 @@ admin.autodiscover()
 
 urlpatterns = patterns('',
     url(r'^admin/', include(admin.site.urls)),
-    url(r'^$', 'djangodblog.tests.views.raise_exc', name='dblog-raise-exc'),
-    url(r'', include('djangodblog.urls')),
+    url(r'^$', 'dblog.tests.views.raise_exc', name='dblog-raise-exc'),
+    url(r'', include('dblog.urls')),
 )
\ No newline at end of file
diff --git a/djangodblog/tests/views.py b/dblog/tests/views.py
similarity index 100%
rename from djangodblog/tests/views.py
rename to dblog/tests/views.py
diff --git a/djangodblog/urls.py b/dblog/urls.py
similarity index 69%
rename from djangodblog/urls.py
rename to dblog/urls.py
index 46d2cc1298..bd479f64c9 100644
--- a/djangodblog/urls.py
+++ b/dblog/urls.py
@@ -2,11 +2,11 @@ from django.conf import settings
 from django.conf.urls.defaults import *
 from django.utils.hashcompat import md5_constructor
 
-from feeds import ErrorFeed, SummaryFeed
+from feeds import MessageFeed, SummaryFeed
 
 hashed_secret = md5_constructor(settings.SECRET_KEY).hexdigest()
 
 urlpatterns = patterns('',
-    url(r'feeds/%s/messages.xml' % hashed_secret, ErrorFeed(), name='dblog-feed-messages'),
+    url(r'feeds/%s/messages.xml' % hashed_secret, MessageFeed(), name='dblog-feed-messages'),
     url(r'feeds/%s/summaries.xml' % hashed_secret, SummaryFeed(), name='dblog-feed-summaries'),
 )
diff --git a/djangodblog/utils.py b/dblog/utils.py
similarity index 100%
rename from djangodblog/utils.py
rename to dblog/utils.py
diff --git a/djangodblog/__init__.py b/djangodblog/__init__.py
deleted file mode 100644
index 1db4987f30..0000000000
--- a/djangodblog/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-__version__ = (2, 2, 1)
\ No newline at end of file
diff --git a/djangodblog/handlers.py b/djangodblog/handlers.py
deleted file mode 100644
index b3d722531a..0000000000
--- a/djangodblog/handlers.py
+++ /dev/null
@@ -1,7 +0,0 @@
-import logging
-
-class DBLogHandler(logging.Handler):
-    def emit(self, record):
-        from djangodblog.models import Error
-
-        Error.objects.create_from_record(record)
\ No newline at end of file
diff --git a/djangodblog/templates/admin/djangodblog/error/change_list.html b/djangodblog/templates/admin/djangodblog/error/change_list.html
deleted file mode 100644
index 40c15f9bff..0000000000
--- a/djangodblog/templates/admin/djangodblog/error/change_list.html
+++ /dev/null
@@ -1 +0,0 @@
-{% extends "admin/djangodblog/errorbatch/change_list.html" %}
diff --git a/runtests.py b/runtests.py
index 753dbd9acc..b6bc2abd44 100644
--- a/runtests.py
+++ b/runtests.py
@@ -13,13 +13,13 @@ if not settings.configured:
             'django.contrib.admin',
             'django.contrib.sessions',
 
-            # Included to fix Disqus' test Django which solves IntegrityError case
+            # Included to fix Disqus' test Django which solves IntegrityMessage case
             'django.contrib.contenttypes',
 
-            'djangodblog',
+            'dblog',
 
             # No fucking idea why I have to do this
-            'djangodblog.tests',
+            'dblog.tests',
         ],
         ROOT_URLCONF='',
     )
@@ -29,7 +29,7 @@ from django.test.simple import run_tests
 
 def runtests(*test_args):
     if not test_args:
-        test_args = ['djangodblog']
+        test_args = ['dblog']
     parent = dirname(abspath(__file__))
     sys.path.insert(0, parent)
     failures = run_tests(test_args, verbosity=1, interactive=True)
diff --git a/setup.py b/setup.py
index 69cd45ac53..5c7db9548d 100644
--- a/setup.py
+++ b/setup.py
@@ -3,11 +3,11 @@
 from setuptools import setup, find_packages
 
 setup(
-    name='django-db-log',
-    version='.'.join(map(str, __import__('djangodblog').__version__)),
+    name='django-db-log2',
+    version='.'.join(map(str, __import__('dblog').__version__)),
     author='David Cramer',
     author_email='dcramer@gmail.com',
-    url='http://github.com/dcramer/django-db-log',
+    url='http://github.com/dcramer/django-db-log2',
     description = 'Exception Logging to a Database in Django',
     packages=find_packages(),
     include_package_data=True,
