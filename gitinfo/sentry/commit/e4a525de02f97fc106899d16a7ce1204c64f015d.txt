commit e4a525de02f97fc106899d16a7ce1204c64f015d
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Wed Feb 13 10:12:54 2019 -0800

    feat(app-platform): Add schema serializer  (#12017)
    
    * feat(app-platform): Add schema serializer

diff --git a/src/sentry/api/endpoints/sentry_apps.py b/src/sentry/api/endpoints/sentry_apps.py
index 68ef5f57cc..e1c07d6dbb 100644
--- a/src/sentry/api/endpoints/sentry_apps.py
+++ b/src/sentry/api/endpoints/sentry_apps.py
@@ -42,7 +42,7 @@ class SentryAppsEndpoint(SentryAppsBaseEndpoint):
 
             return Response(serialize(sentry_app), status=201)
 
-        return Response({'errors': serializer.errors}, status=422)
+        return Response(serializer.errors, status=422)
 
     def _get_user_org(self, request):
         return next(
diff --git a/src/sentry/api/serializers/rest_framework/sentry_app.py b/src/sentry/api/serializers/rest_framework/sentry_app.py
index c990633cee..d7db34962b 100644
--- a/src/sentry/api/serializers/rest_framework/sentry_app.py
+++ b/src/sentry/api/serializers/rest_framework/sentry_app.py
@@ -1,8 +1,11 @@
 from __future__ import absolute_import
 
+from jsonschema.exceptions import ValidationError as SchemaValidationError
+
 from rest_framework import serializers
 from rest_framework.serializers import Serializer, ValidationError
 
+from sentry.api.validators.sentry_apps.schema import validate as validate_schema
 from sentry.models import ApiScopes
 from sentry.models.sentryapp import VALID_EVENT_RESOURCES, REQUIRED_EVENT_PERMISSIONS
 
@@ -26,10 +29,19 @@ class EventListField(serializers.WritableField):
             ))
 
 
+class SchemaField(serializers.WritableField):
+    def validate(self, data):
+        try:
+            validate_schema(data)
+        except SchemaValidationError as e:
+            raise ValidationError(e.message)
+
+
 class SentryAppSerializer(Serializer):
     name = serializers.CharField()
     scopes = ApiScopesField()
     events = EventListField(required=False)
+    schema = SchemaField(required=False)
     webhookUrl = serializers.URLField()
     redirectUrl = serializers.URLField(required=False)
     isAlertable = serializers.BooleanField(required=False)
diff --git a/src/sentry/api/validators/sentry_apps/schema.py b/src/sentry/api/validators/sentry_apps/schema.py
index bb95d35c0b..bf2c2b03ee 100644
--- a/src/sentry/api/validators/sentry_apps/schema.py
+++ b/src/sentry/api/validators/sentry_apps/schema.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
-from jsonschema import validate as json_schema_validate
+from jsonschema import Draft4Validator
+from jsonschema.exceptions import best_match
 
 SCHEMA = {
     'type': 'object',
@@ -17,6 +18,7 @@ SCHEMA = {
 
         'options': {
             'type': 'array',
+            'minItems': 1,
             'items': {
                 'type': 'array',
                 'minItems': 2,
@@ -214,7 +216,7 @@ SCHEMA = {
                     '$ref': '#/definitions/fieldset',
                 },
             },
-            'required': ['required_fields'],
+            'required': ['type', 'required_fields'],
         },
 
         'issue-media': {
@@ -262,4 +264,7 @@ SCHEMA = {
 
 
 def validate(instance, schema=SCHEMA):
-    json_schema_validate(instance=instance, schema=schema)
+    v = Draft4Validator(schema)
+
+    if not v.is_valid(instance):
+        raise best_match(v.iter_errors(instance))
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
index b05d01dafe..07e7d9679a 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
@@ -2,7 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import {browserHistory} from 'react-router';
 
-import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
+import {addSuccessMessage} from 'app/actionCreators/indicator';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
@@ -105,7 +105,6 @@ export default class SentryApplicationDetails extends AsyncView {
           initialData={{organization: orgId, isAlertable: false, ...app}}
           model={this.form}
           onSubmitSuccess={this.onSubmitSuccess}
-          onSubmitError={err => addErrorMessage(t('Unable to save change'))}
         >
           <JsonForm location={this.props.location} forms={sentryApplicationForm} />
 
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index c148344bba..6062505d26 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -135,16 +135,43 @@ class PostSentryAppsTest(SentryAppsTest):
         response = self._post(**kwargs)
 
         assert response.status_code == 422
-        assert response.data['errors'] == \
+        assert response.data == \
             {'events': ['issue webhooks require the event:read permission.']}
 
+    @with_feature('organizations:internal-catchall')
+    def test_wrong_schema_format(self):
+        self.login_as(user=self.user)
+        kwargs = {'schema': {
+            'elements': [
+                {
+                    'type': 'alert-rule-action',
+                    'required_fields': [
+                        {
+                            'type': 'select',
+                            'label': 'Channel',
+                            'name': 'channel',
+                            'options': [
+                                # option items should have 2 elements
+                                # i.e. ['channel_id', '#general']
+                                ['#general'],
+                            ]
+                        },
+                    ],
+                }
+            ],
+        }}
+        response = self._post(**kwargs)
+        assert response.status_code == 422
+        assert response.data == \
+            {'schema': ["['#general'] is too short"]}
+
     @with_feature('organizations:internal-catchall')
     def test_missing_name(self):
         self.login_as(self.user)
         response = self._post(name=None)
 
         assert response.status_code == 422, response.content
-        assert 'name' in response.data['errors']
+        assert 'name' in response.data
 
     @with_feature('organizations:internal-catchall')
     def test_missing_scopes(self):
@@ -152,7 +179,7 @@ class PostSentryAppsTest(SentryAppsTest):
         response = self._post(scopes=None)
 
         assert response.status_code == 422, response.content
-        assert 'scopes' in response.data['errors']
+        assert 'scopes' in response.data
 
     @with_feature('organizations:internal-catchall')
     def test_invalid_events(self):
@@ -160,7 +187,7 @@ class PostSentryAppsTest(SentryAppsTest):
         response = self._post(events=['project'])
 
         assert response.status_code == 422, response.content
-        assert 'events' in response.data['errors']
+        assert 'events' in response.data
 
     @with_feature('organizations:internal-catchall')
     def test_invalid_scope(self):
@@ -168,7 +195,7 @@ class PostSentryAppsTest(SentryAppsTest):
         response = self._post(scopes=('not:ascope', ))
 
         assert response.status_code == 422, response.content
-        assert 'scopes' in response.data['errors']
+        assert 'scopes' in response.data
 
     @with_feature('organizations:internal-catchall')
     def test_missing_webhook_url(self):
@@ -176,7 +203,7 @@ class PostSentryAppsTest(SentryAppsTest):
         response = self._post(webhookUrl=None)
 
         assert response.status_code == 422, response.content
-        assert 'webhookUrl' in response.data['errors']
+        assert 'webhookUrl' in response.data
 
     def _post(self, **kwargs):
         body = {
