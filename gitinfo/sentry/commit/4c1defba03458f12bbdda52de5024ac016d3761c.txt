commit 4c1defba03458f12bbdda52de5024ac016d3761c
Author: Ted Kaemming <ted@kaemming.com>
Date:   Fri Oct 16 11:50:41 2015 -0700

    Validate digests backend.

diff --git a/src/sentry/digests/backends/redis.py b/src/sentry/digests/backends/redis.py
index 3ba1c354ed..7952633244 100644
--- a/src/sentry/digests/backends/redis.py
+++ b/src/sentry/digests/backends/redis.py
@@ -8,7 +8,6 @@ import time
 from contextlib import contextmanager
 
 from django.conf import settings
-from rb import Cluster
 from redis.client import Script
 from redis.exceptions import (
     ResponseError,
@@ -21,6 +20,11 @@ from sentry.digests import (
 )
 from sentry.digests.backends.base import Backend
 from sentry.utils.cache import Lock
+from sentry.utils.redis import (
+    check_cluster_versions,
+    make_rb_cluster as _make_rb_cluster,
+)
+from sentry.utils.versioning import Version
 
 
 logger = logging.getLogger('sentry.digests')
@@ -35,6 +39,12 @@ TIMELINE_DIGEST_PATH_COMPONENT = 'd'
 TIMELINE_RECORD_PATH_COMPONENT = 'r'
 
 
+def make_rb_cluster(hosts, **kwargs):
+    if kwargs:
+        logger.warning('Discarding unused Redis cluster options: %r', kwargs.keys())
+    return _make_rb_cluster(hosts)
+
+
 def ilen(iterator):
     i = 0
     for i, _ in enumerate(iterator):
@@ -166,7 +176,12 @@ class RedisBackend(Backend):
     def __init__(self, **options):
         super(RedisBackend, self).__init__(**options)
 
-        self.cluster = Cluster(**options.pop('cluster', settings.SENTRY_REDIS_OPTIONS))
+        hosts = options.pop('hosts', None)
+        if hosts is None:
+            self.cluster = make_rb_cluster(**settings.SENTRY_REDIS_OPTIONS)
+        else:
+            self.cluster = make_rb_cluster(hosts)
+
         self.namespace = options.pop('namespace', 'd')
 
         # Sets the time-to-live (in seconds) for records, timelines, and
@@ -181,6 +196,14 @@ class RedisBackend(Backend):
         if options:
             logger.warning('Discarding invalid options: %r', options)
 
+    def validate(self):
+        logger.info('Validating Redis version...')
+        check_cluster_versions(
+            self.cluster,
+            Version((2, 8, 9)),
+            label='Digests',
+        )
+
     def add(self, key, record):
         timeline_key = make_timeline_key(self.namespace, key)
         record_key = make_record_key(timeline_key, record.key)
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index b6fbe7fb4f..e8f6957c84 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -17,14 +17,13 @@ from django.conf import settings
 from django.utils import timezone
 from hashlib import md5
 
-from sentry.exceptions import InvalidConfiguration
 from sentry.tsdb.base import BaseTSDB
 from sentry.utils.dates import to_timestamp
-from sentry.utils.redis import make_rb_cluster
-from sentry.utils.versioning import (
-    Version,
-    check_versions,
+from sentry.utils.redis import (
+    check_cluster_versions,
+    make_rb_cluster,
 )
+from sentry.utils.versioning import Version
 
 
 logger = logging.getLogger(__name__)
@@ -81,23 +80,11 @@ class RedisTSDB(BaseTSDB):
 
     def validate(self):
         logger.info('Validating Redis version...')
-
-        try:
-            with self.cluster.all() as client:
-                results = client.info()
-        except Exception as e:
-            # Any connection issues should be caught here.
-            raise InvalidConfiguration(unicode(e))
-
-        versions = {}
-        for id, info in results.value.items():
-            host = self.cluster.hosts[id]
-            # NOTE: This assumes there is no routing magic going on here, and
-            # all requests to this host are being served by the same database.
-            key = '{host}:{port}'.format(host=host.host, port=host.port)
-            versions[key] = Version(map(int, info['redis_version'].split('.', 3)))
-
-        check_versions('Redis (TSDB)', versions, Version((2, 8, 9)), Version((3, 0, 4)))
+        check_cluster_versions(
+            self.cluster,
+            Version((2, 8, 9)),
+            label='TSDB',
+        )
 
     def make_key(self, model, epoch, model_key):
         if isinstance(model_key, six.integer_types):
diff --git a/src/sentry/utils/redis.py b/src/sentry/utils/redis.py
index 21b834e0e6..71863eef65 100644
--- a/src/sentry/utils/redis.py
+++ b/src/sentry/utils/redis.py
@@ -3,9 +3,14 @@ from __future__ import absolute_import
 from threading import Lock
 
 import rb
-
 from redis.connection import ConnectionPool
 
+from sentry.exceptions import InvalidConfiguration
+from sentry.utils.versioning import (
+    Version,
+    check_versions,
+)
+
 
 _pool_cache = {}
 _pool_lock = Lock()
@@ -34,3 +39,27 @@ def make_rb_cluster(hosts):
     intelligetly.
     """
     return rb.Cluster(hosts, pool_cls=_shared_pool)
+
+
+def check_cluster_versions(cluster, required, recommended=Version((3, 0, 4)), label=None):
+    try:
+        with cluster.all() as client:
+            results = client.info()
+    except Exception as e:
+        # Any connection issues should be caught here.
+        raise InvalidConfiguration(unicode(e))
+
+    versions = {}
+    for id, info in results.value.items():
+        host = cluster.hosts[id]
+        # NOTE: This assumes there is no routing magic going on here, and
+        # all requests to this host are being served by the same database.
+        key = '{host}:{port}'.format(host=host.host, port=host.port)
+        versions[key] = Version(map(int, info['redis_version'].split('.', 3)))
+
+    check_versions(
+        'Redis' if label is None else 'Redis (%s)' % (label,),
+        versions,
+        required,
+        recommended,
+    )
diff --git a/src/sentry/utils/runner.py b/src/sentry/utils/runner.py
index d2e1dd2a74..071362feee 100644
--- a/src/sentry/utils/runner.py
+++ b/src/sentry/utils/runner.py
@@ -349,12 +349,18 @@ def initialize_app(config, skip_backend_validation=False):
 def validate_backends():
     from sentry import app
 
-    app.buffer.validate()
-    app.nodestore.validate()
-    app.quotas.validate()
-    app.search.validate()
-    app.ratelimiter.validate()
-    app.tsdb.validate()
+    backends = (
+        app.buffer,
+        app.digests,
+        app.nodestore,
+        app.quotas,
+        app.ratelimiter,
+        app.search,
+        app.tsdb,
+    )
+
+    for backend in backends:
+        backend.validate()
 
 
 def fix_south(settings):
