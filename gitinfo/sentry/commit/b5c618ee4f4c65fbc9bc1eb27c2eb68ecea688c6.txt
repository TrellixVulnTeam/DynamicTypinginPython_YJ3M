commit b5c618ee4f4c65fbc9bc1eb27c2eb68ecea688c6
Author: David Cramer <dcramer@gmail.com>
Date:   Sat May 30 09:06:33 2015 +0200

    Abstract stream checkboxes into isolated components

diff --git a/src/sentry/static/sentry/app/views/stream/group.jsx b/src/sentry/static/sentry/app/views/stream/group.jsx
index a997c28aab..c0d6a51ef4 100644
--- a/src/sentry/static/sentry/app/views/stream/group.jsx
+++ b/src/sentry/static/sentry/app/views/stream/group.jsx
@@ -12,13 +12,62 @@ var SelectedGroupStore = require("../../stores/selectedGroupStore");
 var TimeSince = require("../../components/timeSince");
 var {compareArrays, valueIsEqual} = require("../../utils");
 
+var GroupCheckBox = React.createClass({
+  mixins: [
+    Reflux.listenTo(SelectedGroupStore, "onSelectedGroupChange")
+  ],
+
+  propTypes: {
+    id: React.PropTypes.string.isRequired
+  },
+
+  getInitialState() {
+    return {
+      isSelected: SelectedGroupStore.isSelected(this.props.id)
+    };
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (nextProps.id != this.props.id) {
+      this.setState({
+        isSelected: SelectedGroupStore.isSelected(nextProps.id)
+      });
+    }
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return (nextState.isSelected !== this.state.isSelected);
+  },
+
+  onSelectedGroupChange() {
+    var isSelected = SelectedGroupStore.isSelected(this.props.id);
+    if (isSelected !== this.state.isSelected) {
+      this.setState({
+        isSelected: isSelected,
+      });
+    }
+  },
+
+  onSelect() {
+    var id = this.props.id;
+    SelectedGroupStore.toggleSelect(id);
+  },
+
+  render() {
+    return (
+      <input type="checkbox" className="chk-select" value={this.props.id}
+             checked={this.state.isSelected}
+             onChange={this.onSelect} />
+    );
+  }
+});
+
 var StreamGroup = React.createClass({
   contextTypes: {
     router: React.PropTypes.func
   },
 
   mixins: [
-    Reflux.listenTo(SelectedGroupStore, "onSelectedGroupChange"),
     Reflux.listenTo(GroupStore, "onGroupChange")
   ],
 
@@ -30,7 +79,6 @@ var StreamGroup = React.createClass({
 
   getInitialState() {
     return {
-      isSelected: SelectedGroupStore.isSelected(this.props.id),
       data: GroupStore.getItem(this.props.id)
     };
   },
@@ -38,8 +86,7 @@ var StreamGroup = React.createClass({
   componentWillReceiveProps(nextProps) {
     if (nextProps.id != this.props.id) {
       this.setState({
-        data: GroupStore.getItem(this.props.id),
-        isSelected: SelectedGroupStore.isSelected(id)
+        data: GroupStore.getItem(this.props.id)
       });
     }
   },
@@ -48,9 +95,6 @@ var StreamGroup = React.createClass({
     if (nextProps.statsPeriod !== this.props.statsPeriod) {
       return true;
     }
-    if (nextState.isSelected !== this.state.isSelected) {
-      return true;
-    }
     if (!valueIsEqual(this.state.data, nextState.data, true)) {
       return true;
     }
@@ -60,16 +104,6 @@ var StreamGroup = React.createClass({
     return !memberListEqual;
   },
 
-  onSelectedGroupChange() {
-    var id = this.props.id;
-    var isSelected = SelectedGroupStore.isSelected(id);
-    if (isSelected !== this.state.isSelected) {
-      this.setState({
-        isSelected: SelectedGroupStore.isSelected(id),
-      });
-    }
-  },
-
   onGroupChange(itemIds) {
     if (!itemIds.has(this.props.id)) {
       return;
@@ -81,11 +115,6 @@ var StreamGroup = React.createClass({
     });
   },
 
-  onSelect() {
-    var id = this.state.data.id;
-    SelectedGroupStore.toggleSelect(id);
-  },
-
   render() {
     var router = this.context.router;
     var params = router.getCurrentParams();
@@ -124,9 +153,7 @@ var StreamGroup = React.createClass({
       <li className={className}>
         <div className="col-md-6 event-details">
           <div className="checkbox">
-            <input type="checkbox" className="chk-select" value={data.id}
-                   checked={this.state.isSelected}
-                   onChange={this.onSelect} />
+            <GroupCheckBox id={data.id} />
           </div>
           <h3>
             <Router.Link to="groupDetails"
