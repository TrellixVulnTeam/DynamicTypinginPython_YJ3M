commit 6f7eb129a96c44bf2e36fb6b24ad7f416ac181fe
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Oct 8 15:15:49 2018 -0700

    feat(discover): Add UI for saved queries (#9994)

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 4d3a177a7b..10b471c9a2 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -605,11 +605,9 @@ function routes() {
           )}
       />
 
-
       <Redirect from="/account/" to="/settings/account/details/" />
 
       <Route path="/settings/" name="Settings" component={SettingsWrapper}>
-
         <IndexRoute
           getComponent={(loc, cb) =>
             import(/* webpackChunkName: "SettingsIndex" */ './views/settings/settingsIndex').then(
@@ -743,13 +741,16 @@ function routes() {
       <Route path="/:orgId/" component={errorHandler(OrganizationDetails)}>
         <Route component={errorHandler(OrganizationRoot)}>
           <IndexRoute component={errorHandler(OrganizationDashboard)} />
-
           <Route
             path="/organizations/:orgId/discover/"
             componentPromise={() =>
-              import(/*webpackChunkName:"OrganizationDiscover"*/ './views/organizationDiscover/index')}
+              import(/*webpackChunkName: "OrganizationDiscover"*/ './views/organizationDiscover/index')}
             component={errorHandler(LazyLoad)}
-          />
+          >
+            <Redirect path="saved/" to="/organizations/:orgId/discover/" />
+            <Route path="saved/:savedQueryId/" />
+          </Route>
+
           <Route
             path="/organizations/:orgId/activity/"
             component={errorHandler(OrganizationActivity)}
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index 97919962c7..531d684f5e 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -71,6 +71,22 @@ export const Deploy = PropTypes.shape({
   version: PropTypes.string,
 });
 
+export const DiscoverSavedQuery = PropTypes.shape({
+  id: PropTypes.string.isRequired,
+  dateCreated: PropTypes.string.isRequired,
+  dateUpdated: PropTypes.string.isRequired,
+  name: PropTypes.string.isRequired,
+  createdBy: PropTypes.string,
+  projects: PropTypes.arrayOf(PropTypes.number),
+  fields: PropTypes.arrayOf(PropTypes.string),
+  aggregations: PropTypes.arrayOf(PropTypes.array),
+  conditions: PropTypes.arrayOf(PropTypes.array),
+  limit: PropTypes.number,
+  range: PropTypes.string,
+  start: PropTypes.string,
+  end: PropTypes.string,
+});
+
 /**
  * A Member is someone that was invited to Sentry but may
  * not have registered for an account yet
@@ -708,6 +724,7 @@ let SentryTypes = {
   Actor,
   Config,
   Deploy,
+  DiscoverSavedQuery,
   Environment,
   Event,
   Organization: PropTypes.shape({
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index 2b5e4a7395..982823bc91 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -1,9 +1,14 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import {browserHistory} from 'react-router';
+import {isEqual} from 'lodash';
 
-import {addErrorMessage, clearIndicators} from 'app/actionCreators/indicator';
-import {t} from 'app/locale';
+import {
+  addErrorMessage,
+  clearIndicators,
+  addSuccessMessage,
+} from 'app/actionCreators/indicator';
+import {t, tct} from 'app/locale';
 import HeaderSeparator from 'app/components/organizations/headerSeparator';
 import MultipleProjectSelector from 'app/components/organizations/multipleProjectSelector';
 import SentryTypes from 'app/sentryTypes';
@@ -13,10 +18,17 @@ import Result from './result';
 import Intro from './intro';
 import EarlyAdopterMessage from './earlyAdopterMessage';
 import QueryEdit from './sidebar/queryEdit';
+import QueryRead from './sidebar/queryRead';
 import SavedQueryList from './sidebar/savedQueryList';
 
 import createResultManager from './resultManager';
-import {getQueryStringFromQuery, getQueryFromQueryString} from './utils';
+import {
+  getQueryStringFromQuery,
+  getQueryFromQueryString,
+  deleteSavedQuery,
+  updateSavedQuery,
+  parseSavedQuery,
+} from './utils';
 import {isValidCondition} from './conditions/utils';
 import {isValidAggregation} from './aggregations/utils';
 import {
@@ -26,15 +38,22 @@ import {
   TopBar,
   Sidebar,
   SidebarTabs,
+  SavedQueryTitle,
+  SavedQueryAction,
   PageTitle,
+  EditableName,
+  BackToQueryList,
 } from './styles';
 
 import {trackQuery} from './analytics';
 
 export default class OrganizationDiscover extends React.Component {
   static propTypes = {
-    organization: SentryTypes.Organization,
-    queryBuilder: PropTypes.object,
+    organization: SentryTypes.Organization.isRequired,
+    queryBuilder: PropTypes.object.isRequired,
+    savedQuery: SentryTypes.DiscoverSavedQuery, // Provided if it's a saved search
+    updateSavedQueryData: PropTypes.func.isRequired,
+    view: PropTypes.oneOf(['query', 'saved']),
   };
 
   constructor(props) {
@@ -44,15 +63,27 @@ export default class OrganizationDiscover extends React.Component {
       resultManager,
       data: resultManager.getAll(),
       isFetchingQuery: false,
-      view: 'query',
+      isEditingSavedQuery: false,
+      savedQueryName: null,
+      view: props.view || 'query',
     };
   }
 
+  componentDidMount() {
+    if (this.props.savedQuery) {
+      this.runQuery();
+    }
+  }
+
   componentWillReceiveProps(nextProps) {
-    const {queryBuilder, location: {search}} = nextProps;
+    const {queryBuilder, location: {search}, savedQuery} = nextProps;
     const currentSearch = this.props.location.search;
     const {resultManager} = this.state;
 
+    if (savedQuery && savedQuery !== this.props.savedQuery) {
+      this.runQuery();
+    }
+
     if (currentSearch === search) {
       return;
     }
@@ -116,53 +147,173 @@ export default class OrganizationDiscover extends React.Component {
 
     clearIndicators();
 
-    resultManager
-      .fetchAll()
-      .then(data => {
-        this.setState({data, isFetchingQuery: false});
+    resultManager.fetchAll().then(data => {
+      const shouldRedirect = !this.props.params.savedQueryId;
 
+      if (shouldRedirect) {
         browserHistory.push({
           pathname: `/organizations/${organization.slug}/discover/`,
           search: getQueryStringFromQuery(queryBuilder.getInternal()),
         });
+      }
+
+      this.setState({data, isFetchingQuery: false});
+    });
+  };
+
+  toggleSidebar = view => {
+    if (view !== this.state.view) {
+      this.setState({view});
+      browserHistory.replace({
+        pathname: `/organizations/${this.props.organization.slug}/discover/`,
+        query: {...this.props.location.query, view},
+      });
+    }
+  };
+
+  toggleEditMode = () => {
+    this.setState(state => {
+      const isEditMode = !state.isEditingSavedQuery;
+      return {
+        isEditingSavedQuery: isEditMode,
+        savedQueryName: isEditMode ? this.props.savedQuery.name : null,
+      };
+    });
+  };
+
+  loadSavedQueries = () => {
+    browserHistory.push({
+      pathname: `/organizations/${this.props.organization.slug}/discover/`,
+      query: {view: 'saved'},
+    });
+  };
+
+  reset = () => {
+    const {savedQuery, queryBuilder, organization} = this.props;
+    if (savedQuery) {
+      queryBuilder.reset(savedQuery);
+      this.setState({
+        isEditingSavedQuery: false,
+      });
+    } else {
+      browserHistory.push({
+        pathname: `/organizations/${organization.slug}/discover/`,
+      });
+    }
+  };
+
+  deleteSavedQuery = () => {
+    const {organization, savedQuery} = this.props;
+    deleteSavedQuery(organization, savedQuery.id)
+      .then(() => {
+        addSuccessMessage(
+          tct('Successfully deleted query [name]', {
+            name: savedQuery.name,
+          })
+        );
+        this.loadSavedQueries();
       })
-      .catch(err => {
-        addErrorMessage(err.message);
+      .catch(() => {
+        addErrorMessage(t('Could not delete query'));
         this.setState({isFetchingQuery: false});
       });
   };
 
+  updateSavedQueryName = savedQueryName => {
+    this.setState({savedQueryName});
+  };
+
+  updateSavedQuery = () => {
+    const {queryBuilder, savedQuery, organization} = this.props;
+    const query = queryBuilder.getInternal();
+    const hasChanged =
+      !isEqual(query, parseSavedQuery(savedQuery)) ||
+      savedQuery.name !== this.state.savedQueryName;
+
+    const data = {...query, name: this.state.savedQueryName};
+
+    if (hasChanged) {
+      updateSavedQuery(organization, savedQuery.id, data)
+        .then(resp => {
+          addSuccessMessage(t('Updated query'));
+          this.toggleEditMode(); // Return to read-only mode
+          this.props.updateSavedQueryData(resp);
+          this.runQuery();
+        })
+        .catch(() => {
+          addErrorMessage(t('Could not update query'));
+        });
+    } else {
+      this.toggleEditMode(); // Return to read-only mode
+    }
+  };
+
   renderSidebarNav() {
-    const {view} = this.state;
+    const {view, isEditingSavedQuery} = this.state;
+    const {savedQuery} = this.props;
     const views = [
       {id: 'query', title: t('Query')},
-      // {id: 'saved', title: t('Saved queries')},
+      {id: 'saved', title: t('Saved queries')},
     ];
 
     return (
-      <SidebarTabs underlined={true}>
-        {views.map(({id, title}) => (
-          <li key={id} className={view === id ? 'active' : ''}>
-            <a onClick={() => this.setState({view: id})}>{title}</a>
-          </li>
-        ))}
-      </SidebarTabs>
+      <React.Fragment>
+        <SidebarTabs underlined={true}>
+          {views.map(({id, title}) => (
+            <li key={id} className={view === id ? 'active' : ''}>
+              <a onClick={() => this.toggleSidebar(id)}>{title}</a>
+            </li>
+          ))}
+        </SidebarTabs>
+        {savedQuery && (
+          <React.Fragment>
+            <BackToQueryList>
+              <a onClick={this.loadSavedQueries}>
+                {tct('[arr] Back to saved query list', {arr: '←'})}
+              </a>
+            </BackToQueryList>
+            <SavedQueryTitle>
+              {!isEditingSavedQuery && (
+                <React.Fragment>
+                  {savedQuery.name}
+                  <SavedQueryAction onClick={this.toggleEditMode}>
+                    {t('Edit query')}
+                  </SavedQueryAction>
+                </React.Fragment>
+              )}
+              {isEditingSavedQuery && (
+                <React.Fragment>
+                  <EditableName
+                    value={savedQuery.name}
+                    onChange={this.updateSavedQueryName}
+                  />
+                  <SavedQueryAction onClick={this.updateSavedQuery}>
+                    {t('Save changes')}
+                  </SavedQueryAction>
+                  <SavedQueryAction onClick={this.deleteSavedQuery}>
+                    {t('Delete')}
+                  </SavedQueryAction>
+                </React.Fragment>
+              )}
+            </SavedQueryTitle>
+          </React.Fragment>
+        )}
+      </React.Fragment>
     );
   }
 
-  reset = () => {
-    browserHistory.push({
-      pathname: `/organizations/${this.props.organization.slug}/discover/`,
-    });
-  };
-
   render() {
-    const {data, isFetchingQuery, view, resultManager} = this.state;
-    const {queryBuilder, organization} = this.props;
+    const {data, isFetchingQuery, view, resultManager, isEditingSavedQuery} = this.state;
+    const {queryBuilder, organization, savedQuery} = this.props;
 
     const currentQuery = queryBuilder.getInternal();
 
     const shouldDisplayResult = resultManager.shouldDisplayResult();
+    const shouldRenderSavedList = view === 'saved' && !savedQuery;
+    const shouldRenderReadMode = view === 'saved' && savedQuery && !isEditingSavedQuery;
+    const shouldRenderEditMode =
+      (view === 'saved' && savedQuery && isEditingSavedQuery) ||
+      (view === 'query' && !savedQuery);
 
     const projects = organization.projects.filter(project => project.isMember);
 
@@ -171,7 +322,14 @@ export default class OrganizationDiscover extends React.Component {
         <Sidebar>
           <PageTitle>{t('Discover')}</PageTitle>
           {this.renderSidebarNav()}
-          {view === 'query' && (
+          {shouldRenderReadMode && (
+            <QueryRead
+              queryBuilder={queryBuilder}
+              isFetchingQuery={isFetchingQuery}
+              onRunQuery={this.runQuery}
+            />
+          )}
+          {shouldRenderEditMode && (
             <QueryEdit
               queryBuilder={queryBuilder}
               isFetchingQuery={isFetchingQuery}
@@ -180,7 +338,7 @@ export default class OrganizationDiscover extends React.Component {
               reset={this.reset}
             />
           )}
-          {view === 'saved' && <SavedQueryList organization={organization} />}
+          {shouldRenderSavedList && <SavedQueryList organization={organization} />}
         </Sidebar>
         <Body direction="column" flex="1">
           <TopBar>
@@ -202,7 +360,14 @@ export default class OrganizationDiscover extends React.Component {
             />
           </TopBar>
           <BodyContent>
-            {shouldDisplayResult && <Result flex="1" data={data} />}
+            {shouldDisplayResult && (
+              <Result
+                data={data}
+                organization={organization}
+                savedQuery={savedQuery}
+                queryBuilder={queryBuilder}
+              />
+            )}
             {!shouldDisplayResult && <Intro updateQuery={this.updateFields} />}
             <EarlyAdopterMessage />
           </BodyContent>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
index df61cb551b..2dcaed5ece 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
@@ -1,13 +1,19 @@
 import React from 'react';
 import {Flex} from 'grid-emotion';
 import createReactClass from 'create-react-class';
+import {browserHistory} from 'react-router';
 import OrganizationState from 'app/mixins/organizationState';
 import LoadingIndicator from 'app/components/loadingIndicator';
 
 import Discover from './discover';
 import createQueryBuilder from './queryBuilder';
 
-import {getQueryFromQueryString} from './utils';
+import {
+  getQueryFromQueryString,
+  fetchSavedQuery,
+  parseSavedQuery,
+  getView,
+} from './utils';
 import {LoadingContainer} from './styles';
 
 const OrganizationDiscoverContainer = createReactClass({
@@ -17,19 +23,61 @@ const OrganizationDiscoverContainer = createReactClass({
   getInitialState: function() {
     return {
       isLoading: true,
+      savedQuery: null,
+      view: getView(this.props.location.query.view),
     };
   },
 
   componentDidMount: function() {
-    const query = this.props.location.search;
+    const {savedQueryId} = this.props.params;
+    const {search} = this.props.location;
+    const {organization} = this.context;
 
-    this.queryBuilder = createQueryBuilder(
-      getQueryFromQueryString(query),
-      this.context.organization
-    );
-    this.queryBuilder.load().then(() => {
-      this.setState({isLoading: false});
-    });
+    if (savedQueryId) {
+      this.fetchSavedQuery(savedQueryId);
+    } else {
+      this.queryBuilder = createQueryBuilder(
+        getQueryFromQueryString(search),
+        organization
+      );
+      this.queryBuilder.load().then(() => {
+        this.setState({isLoading: false});
+      });
+    }
+  },
+
+  componentWillReceiveProps: function(nextProps) {
+    if (!nextProps.params.savedQueryId) {
+      this.setState({savedQuery: null});
+      return;
+    }
+
+    if (nextProps.params.savedQueryId !== this.props.params.savedQueryId) {
+      this.fetchSavedQuery(nextProps.params.savedQueryId);
+    }
+
+    if (nextProps.location.query.view !== this.props.location.query.view) {
+      this.setState({view: getView(nextProps.location.query.view)});
+    }
+  },
+
+  fetchSavedQuery: function(savedQueryId) {
+    const {organization} = this.context;
+
+    fetchSavedQuery(organization, savedQueryId)
+      .then(resp => {
+        this.queryBuilder = createQueryBuilder(parseSavedQuery(resp), organization);
+        this.setState({isLoading: false, savedQuery: resp, view: 'saved'});
+      })
+      .catch(() => {
+        browserHistory.push({
+          pathname: `/organizations/${organization.slug}/discover/`,
+        });
+      });
+  },
+
+  updateSavedQuery: function(savedQuery) {
+    this.setState({savedQuery});
   },
 
   renderComingSoon: function() {
@@ -49,7 +97,8 @@ const OrganizationDiscoverContainer = createReactClass({
   },
 
   render() {
-    const {isLoading} = this.state;
+    const {isLoading, savedQuery, view} = this.state;
+    const {location, params} = this.props;
     const hasFeature = this.getFeatures().has('discover');
 
     if (!hasFeature) return this.renderComingSoon();
@@ -62,7 +111,11 @@ const OrganizationDiscoverContainer = createReactClass({
           <Discover
             organization={this.getOrganization()}
             queryBuilder={this.queryBuilder}
-            location={this.props.location}
+            location={location}
+            params={params}
+            savedQuery={savedQuery}
+            updateSavedQueryData={this.updateSavedQuery}
+            view={view}
           />
         )}
       </div>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
index bafd8107b4..c0cf7b5bea 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
@@ -1,28 +1,45 @@
 import React from 'react';
+import {browserHistory} from 'react-router';
 import PropTypes from 'prop-types';
 import classNames from 'classnames';
 import {Box, Flex} from 'grid-emotion';
 
-import {t} from 'app/locale';
+import SentryTypes from 'app/sentryTypes';
+import {t, tct} from 'app/locale';
 import Link from 'app/components/link';
 import BarChart from 'app/components/charts/barChart';
 import LineChart from 'app/components/charts/lineChart';
 import space from 'app/styles/space';
 
-import {getChartData, getChartDataByDay, downloadAsCsv} from './utils';
+import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
+
+import {getChartData, getChartDataByDay, downloadAsCsv, generateQueryName} from './utils';
+import {createSavedQuery} from '../utils';
 import Table from './table';
-import {Heading, ResultSummary, ChartWrapper, ChartNote} from '../styles';
+import {
+  Heading,
+  EditableName,
+  ResultSummary,
+  ChartWrapper,
+  ChartNote,
+  SavedQueryAction,
+} from '../styles';
 import {NUMBER_OF_SERIES_BY_DAY} from '../data';
 
 export default class Result extends React.Component {
   static propTypes = {
+    organization: SentryTypes.Organization,
     data: PropTypes.object,
+    queryBuilder: PropTypes.object,
+    savedQuery: SentryTypes.DiscoverSavedQuery, // Provided if it's a saved search
   };
 
   constructor() {
     super();
     this.state = {
       view: 'table',
+      isEditMode: false,
+      savedQueryName: null,
     };
   }
 
@@ -43,8 +60,49 @@ export default class Result extends React.Component {
         view: 'table',
       });
     }
+
+    this.setState({
+      isEditMode: false,
+      savedQueryName: null,
+    });
   }
 
+  toggleEditMode = () => {
+    const {savedQuery} = this.props;
+    this.setState(state => {
+      const isEditMode = !state.isEditMode;
+      return {
+        isEditMode,
+        savedQueryName: isEditMode
+          ? savedQuery ? savedQuery.name : generateQueryName()
+          : null,
+      };
+    });
+  };
+
+  confirmSave = () => {
+    const {organization, queryBuilder} = this.props;
+    const {savedQueryName} = this.state;
+    const data = {...queryBuilder.getInternal(), name: savedQueryName};
+
+    createSavedQuery(organization, data)
+      .then(savedQuery => {
+        addSuccessMessage(
+          tct('Successfully saved query [name]', {name: savedQuery.name})
+        );
+        browserHistory.push({
+          pathname: `/organizations/${organization.slug}/discover/saved/${savedQuery.id}/`,
+        });
+      })
+      .catch(() => {
+        addErrorMessage(t('Could not save query'));
+      });
+  };
+
+  updateSavedQueryName = val => {
+    this.setState({savedQueryName: val});
+  };
+
   renderToggle() {
     const {baseQuery, byDayQuery} = this.props.data;
 
@@ -64,7 +122,7 @@ export default class Result extends React.Component {
     const linkClasses = 'btn btn-default btn-sm';
 
     return (
-      <Flex justify="flex-end">
+      <Flex flex="1" justify="flex-end">
         <div className="btn-group">
           {options.map(opt => {
             const active = opt.id === this.state.view;
@@ -110,8 +168,42 @@ export default class Result extends React.Component {
     );
   }
 
+  renderSavedQueryHeader() {
+    return (
+      <Flex>
+        <Heading>{this.props.savedQuery.name}</Heading>
+      </Flex>
+    );
+  }
+
+  renderQueryResultHeader() {
+    const {isEditMode, savedQueryName} = this.state;
+
+    return (
+      <React.Fragment>
+        {!isEditMode && (
+          <Flex>
+            <Heading>{t('Result')}</Heading>
+            <SavedQueryAction onClick={this.toggleEditMode}>{t('Save')}</SavedQueryAction>
+          </Flex>
+        )}
+        {isEditMode && (
+          <Flex>
+            <EditableName value={savedQueryName} onChange={this.updateSavedQueryName} />
+            <SavedQueryAction onClick={this.confirmSave}>
+              {t('Confirm save')}
+            </SavedQueryAction>
+            <SavedQueryAction onClick={this.toggleEditMode}>
+              {t('Cancel')}
+            </SavedQueryAction>
+          </Flex>
+        )}
+      </React.Fragment>
+    );
+  }
+
   render() {
-    const {baseQuery, byDayQuery} = this.props.data;
+    const {data: {baseQuery, byDayQuery}, savedQuery} = this.props;
     const {view} = this.state;
 
     const basicChartData = getChartData(baseQuery.data.data, baseQuery.query);
@@ -132,7 +224,7 @@ export default class Result extends React.Component {
       <Box flex="1">
         <Flex align="center" mb={space(2)}>
           <Box flex="1">
-            <Heading>{t('Result')}</Heading>
+            {savedQuery ? this.renderSavedQueryHeader() : this.renderQueryResultHeader()}
           </Box>
           {this.renderToggle()}
         </Flex>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/savedQueryList.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/savedQueryList.jsx
index 30df273d94..f89ea2764d 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/savedQueryList.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/savedQueryList.jsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import moment from 'moment';
+import {Flex} from 'grid-emotion';
 
 import SentryTypes from 'app/sentryTypes';
 
@@ -39,7 +40,9 @@ export default class SavedQueries extends React.Component {
   renderLoading() {
     return (
       <Fieldset>
-        <LoadingIndicator mini />
+        <Flex justify="center">
+          <LoadingIndicator mini />
+        </Flex>
       </Fieldset>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
index 8b4fefddfc..937a6c98d2 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
@@ -7,6 +7,7 @@ import space from 'app/styles/space';
 
 import {Panel, PanelItem} from 'app/components/panels';
 import NavTabs from 'app/components/navTabs';
+import TextField from 'app/components/forms/textField';
 import Link from 'app/components/link';
 
 const FOOTER_HEIGHT = 87;
@@ -66,7 +67,7 @@ export const SidebarTabs = styled(props => <NavTabs {...props} underlined={true}
   margin: 0;
 `;
 
-export const SavedQueryName = styled(Flex)`
+export const SavedQueryTitle = styled(Flex)`
   justify-content: space-between;
   align-items: center;
   font-size: ${p => p.theme.fontSizeMedium};
@@ -149,6 +150,27 @@ export const ChartNote = styled(Box)`
   margin-bottom: ${space(3)};
 `;
 
+export const BackToQueryList = styled('div')`
+  font-size: ${p => p.theme.fontSizeSmall};
+  padding: ${space(0.5)} ${space(4)};
+  background-color: ${p => p.theme.whiteDark};
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+`;
+
+export const EditableName = styled(props => (
+  <TextField inputStyle={{height: 24, padding: 4}} {...props} />
+))`
+  font-weight: normal;
+  color: ${p => p.theme.gray4};
+  margin: 0;
+`;
+
+export const SavedQueryAction = styled(Link)`
+  font-weight: normal;
+  font-size: ${p => p.theme.fontSizeSmall};
+  margin-left: ${space(2)};
+`;
+
 export const SavedQuery = styled(Box)`
   height: calc(100vh - ${FOOTER_HEIGHT + HEADER_HEIGHT + TABS_HEIGHT}px);
   overflow: scroll;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
index e09ec2bdb8..669b1f8a70 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
@@ -80,6 +80,15 @@ export function getOrderByOptions(queryBuilder) {
   return [...columnOptions, ...aggregationOptions];
 }
 
+export function getView(requestedView) {
+  switch (requestedView) {
+    case 'saved':
+      return 'saved';
+    default:
+      return 'query';
+  }
+}
+
 /**
  * Takes a saved query and strips associated query metadata in order to match
  * our internal representation of queries.
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index a2e0180329..de211e3154 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -15,7 +15,7 @@ describe('Discover', function() {
       queryBuilder.fetch = jest.fn(() => Promise.resolve(mockResponse));
 
       wrapper = mount(
-        <Discover queryBuilder={queryBuilder} organization={organization} />,
+        <Discover queryBuilder={queryBuilder} organization={organization} params={{}} />,
         TestStubs.routerContext()
       );
     });
@@ -94,6 +94,7 @@ describe('Discover', function() {
           queryBuilder={queryBuilder}
           organization={organization}
           location={{location: '?fields=something'}}
+          params={{}}
         />,
         TestStubs.routerContext()
       );
