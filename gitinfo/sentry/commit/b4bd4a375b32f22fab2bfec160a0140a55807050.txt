commit b4bd4a375b32f22fab2bfec160a0140a55807050
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Dec 22 23:40:15 2012 -0800

    Initial backend support for marking events as muted

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 948b1cf63c..5115d75e26 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -58,9 +58,11 @@ SEARCH_SORT_OPTIONS = SortedDict((
 
 STATUS_UNRESOLVED = 0
 STATUS_RESOLVED = 1
+STATUS_MUTED = 2
 STATUS_LEVELS = (
     (STATUS_UNRESOLVED, _('unresolved')),
     (STATUS_RESOLVED, _('resolved')),
+    (STATUS_MUTED, _('muted')),
 )
 
 MEMBER_OWNER = 0
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index d7fdac4ff9..7f89b1054b 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -16,6 +16,7 @@ from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext as _
 from paging.helpers import paginate as paginate_func
 from sentry.conf import settings
+from sentry.constants import STATUS_MUTED
 from sentry.models import Group
 from sentry.utils.javascript import to_json
 from sentry.utils.strings import truncatechars
@@ -335,3 +336,8 @@ def render_tag_widget(group, tag):
 @register.filter
 def titlize(value):
     return value.replace('_', ' ').title()
+
+
+@register.filter
+def is_muted(value):
+    return value == STATUS_MUTED
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index a6b2698f05..1839e1eb80 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -7,6 +7,7 @@ sentry.web.views
 """
 import datetime
 import logging
+from functools import wraps
 
 from django.contrib.auth.models import AnonymousUser
 from django.core.urlresolvers import reverse
@@ -19,7 +20,7 @@ from django.views.decorators.csrf import csrf_exempt
 from django.views.decorators.vary import vary_on_cookie
 from django.views.generic.base import View as BaseView
 from sentry.conf import settings
-from sentry.constants import MEMBER_USER
+from sentry.constants import MEMBER_USER, STATUS_MUTED, STATUS_UNRESOLVED
 from sentry.coreapi import project_from_auth_vars, \
   decode_and_decompress_data, safely_load_json_string, validate_data, \
   insert_data_to_database, APIError, APIForbidden, extract_auth_vars
@@ -40,6 +41,16 @@ error_logger = logging.getLogger('sentry.errors.api.http')
 logger = logging.getLogger('sentry.api.http')
 
 
+def api(func):
+    @wraps(func)
+    def wrapped(request, *args, **kwargs):
+        data = func(request, *args, **kwargs)
+        response = HttpResponse(json.dumps(data))
+        response['Content-Type'] = 'application/json'
+        return response
+    return wrapped
+
+
 def transform_groups(request, group_list, template='sentry/partial/_group.html'):
     return [
         {
@@ -321,11 +332,7 @@ def make_group_public(request, project, group_id):
 
     group.update(is_public=True)
 
-    data = transform_groups(request, [group])
-
-    response = HttpResponse(json.dumps(data))
-    response['Content-Type'] = 'application/json'
-    return response
+    return transform_groups(request, [group])
 
 
 @csrf_exempt
@@ -339,11 +346,37 @@ def make_group_private(request, project, group_id):
 
     group.update(is_public=False)
 
-    data = transform_groups(request, [group])
+    return transform_groups(request, [group])
 
-    response = HttpResponse(json.dumps(data))
-    response['Content-Type'] = 'application/json'
-    return response
+
+@csrf_exempt
+@has_access(MEMBER_USER)
+@never_cache
+@api
+def mute_group(request, project, group_id):
+    try:
+        group = Group.objects.get(pk=group_id)
+    except Group.DoesNotExist:
+        return HttpResponseForbidden()
+
+    group.update(status=STATUS_MUTED)
+
+    return transform_groups(request, [group])
+
+
+@csrf_exempt
+@has_access(MEMBER_USER)
+@never_cache
+@api
+def unmute_group(request, project, group_id):
+    try:
+        group = Group.objects.get(pk=group_id)
+    except Group.DoesNotExist:
+        return HttpResponseForbidden()
+
+    group.update(status=STATUS_UNRESOLVED)
+
+    return transform_groups(request, [group])
 
 
 @csrf_exempt
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 448d32e796..492edc58d1 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -137,6 +137,8 @@ urlpatterns = patterns('',
     url(r'^api/(?:(?P<project_id>[\w_-]+)/)?groups/resolved/$', api.get_resolved_groups, name='sentry-api-groups-resolved'),
     url(r'^api/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/set/public/$', api.make_group_public, name='sentry-api-set-group-public'),
     url(r'^api/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/set/private/$', api.make_group_private, name='sentry-api-set-group-private'),
+    url(r'^api/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/set/mute/$', api.mute_group, name='sentry-api-set-group-mute'),
+    url(r'^api/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/set/unmute/$', api.unmute_group, name='sentry-api-set-group-unmute'),
     url(r'^api/(?:(?P<project_id>[\w_-]+)/)?stats/$', api.get_stats, name='sentry-api-stats'),
     url(r'^api/(?P<project_id>[\w_-]+)/tags/search/$', api.search_tags, name='sentry-api-search-tags'),
 
