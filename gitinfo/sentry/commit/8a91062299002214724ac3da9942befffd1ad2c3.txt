commit 8a91062299002214724ac3da9942befffd1ad2c3
Author: Dena Mwangi <dena@getsentry.com>
Date:   Wed May 16 11:41:06 2018 -0700

    feat(onboarding): Add split test for enriched fe in install instructions (#8376)
    
    * Add test react docs component, add install experiment to enabled features

diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index a5692f877e..5f36874da9 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -40,6 +40,7 @@ default_manager.add('projects:discard-groups', ProjectFeature)  # NOQA
 default_manager.add('projects:custom-inbound-filters', ProjectFeature)  # NOQA
 default_manager.add('projects:minidump', ProjectFeature)  # NOQA
 default_manager.add('user:assistant')
+default_manager.add('user:install-experiment')
 
 # expose public api
 add = default_manager.add
diff --git a/src/sentry/static/sentry/app/views/planout/installReact.jsx b/src/sentry/static/sentry/app/views/planout/installReact.jsx
new file mode 100644
index 0000000000..0d0ac6942b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/planout/installReact.jsx
@@ -0,0 +1,106 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+import createReactClass from 'create-react-class';
+
+import {t} from 'app/locale';
+
+const InstallReactTest = createReactClass({
+  displayName: 'InstallReactTest',
+
+  propTypes: {
+    dsn: PropTypes.string,
+  },
+
+  getInitialState(props) {
+    return {
+      loading: true,
+      error: false,
+    };
+  },
+
+  render() {
+    let dsn = this.props.dsn;
+
+    return (
+      <div>
+        <h3> Installation </h3>
+        <p>
+          {t('Start by adding the')}
+          <span className="pre"> raven.js </span>{' '}
+          {t(`script tag to your
+          page. It should be loaded as early as possible, before your main javascript
+          bundle.`)}
+        </p>
+        <pre>
+          <span>{'<'}</span>
+          <ScriptSpan>script </ScriptSpan>
+          <AttributeSpan>src</AttributeSpan>
+          <span>=</span>
+          <ValueSpan>{t('https://cdn.ravenjs.com/3.24.0/raven.min.js')}</ValueSpan>
+          <br />
+          <AttributeSpan> crossorigin</AttributeSpan>
+          <span>=</span>
+          <ValueSpan>{'anonymous'}</ValueSpan>
+          <span>{'></'}</span>
+          <ScriptSpan>script</ScriptSpan>
+          <span>{'>'}</span>
+        </pre>
+
+        <h3> Basic Configuration </h3>
+        <p>
+          {t(`Next configure Raven.js to use your Sentry DSN. Sending release and environment data both provide valuable
+          context e.g. when an issue was first seen. Learn more about `)}
+          <a href="https://docs.sentry.io/clients/javascript/config/">
+            {' '}
+            configuration options{' '}
+          </a>here.
+        </p>
+
+        <pre>
+          <span>
+            {'<'}
+            <ScriptSpan>script</ScriptSpan>
+            {'>'}
+          </span>
+          <br />
+          <span>{' Raven.config('}</span>
+          <ValueSpan>'{dsn}'</ValueSpan>
+          <span>{', {'}</span>
+          <br />
+
+          <span>{'   release: '}</span>
+          <ValueSpan>{"'0-0-0'"}</ValueSpan>
+          <span>{','}</span>
+          <br />
+          <span>{'   environment: '}</span>
+          <ValueSpan>{"'development-test'"}</ValueSpan>
+          <span>{','}</span>
+          <br />
+          <span>{' }).install()'}</span>
+          <br />
+          <span>
+            {'</'}
+            <ScriptSpan>script</ScriptSpan>
+            {'>'}
+          </span>
+          <br />
+        </pre>
+
+        <p>Congrats! Raven is now ready to capture any uncaught exceptions</p>
+      </div>
+    );
+  },
+});
+
+const ScriptSpan = styled('span')`
+  color: #2eb0f7;
+`;
+const AttributeSpan = styled('span')`
+  color: #a47ac6;
+`;
+const ValueSpan = styled('span')`
+  color: #e8535a;
+`;
+
+export default InstallReactTest;
diff --git a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
index 198d0a23d4..e0df4cc86c 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
@@ -5,8 +5,11 @@ import styled from 'react-emotion';
 
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {t, tct} from 'app/locale';
+import analytics from 'app/utils/analytics';
 import ApiMixin from 'app/mixins/apiMixin';
 import Button from 'app/components/buttons/button';
+import ConfigStore from 'app/stores/configStore';
+import InstallReactTest from 'app/views/planout/installReact';
 import LanguageNav from 'app/views/projectInstall/languageNav';
 import Link from 'app/components/link';
 import LoadingError from 'app/components/loadingError';
@@ -56,12 +59,14 @@ const ProjectInstallPlatform = createReactClass({
       integration,
       platform,
       html: null,
+      experimentPlatforms: new Set(['javascript-react']),
     };
   },
 
   componentDidMount() {
     this.fetchData();
     $(window).scrollTop(0);
+    this.recordAnalytics();
   },
 
   componentWillReceiveProps(nextProps) {
@@ -104,6 +109,26 @@ const ProjectInstallPlatform = createReactClass({
     );
   },
 
+  inInstallExperiment() {
+    let {experimentPlatforms} = this.state;
+    let currentPlatform = this.state.integration.id;
+    let installExperiment =
+      ConfigStore.get('features').has('install-experiment') &&
+      experimentPlatforms.has(currentPlatform);
+    return installExperiment;
+  },
+
+  recordAnalytics() {
+    let {experimentPlatforms, integration} = this.state;
+    let currentPlatform = integration.id;
+
+    if (!experimentPlatforms.has(currentPlatform)) return;
+    analytics('experiment.installation_instructions', {
+      integration: integration.id,
+      variant: this.inInstallExperiment(),
+    });
+  },
+
   renderSidebar() {
     let platform = this.state.platform;
     return (
@@ -182,10 +207,47 @@ const ProjectInstallPlatform = createReactClass({
     );
   },
 
+  renderTestBody() {
+    let {integration, platform} = this.state;
+    let {dsnPublic} = this.props.platformData;
+
+    if (!integration || !platform) {
+      return <NotFound />;
+    }
+
+    return (
+      <Panel>
+        <PanelHeader hasButtons>
+          {t('Configure %(integration)s', {integration: integration.name})}
+          <Button size="small" href={integration.link} external>
+            {t('Full Documentation')}
+          </Button>
+        </PanelHeader>
+
+        <PanelBody disablePadding={false}>
+          {this.state.loading ? (
+            <LoadingIndicator />
+          ) : this.state.error ? (
+            <LoadingError onRetry={this.fetchData} />
+          ) : (
+            <InstallReactTest dsn={dsnPublic} />
+          )}
+        </PanelBody>
+      </Panel>
+    );
+  },
+
   render() {
+    let installExperiment;
+    if (!this.state.loading) {
+      installExperiment = this.inInstallExperiment();
+    }
+
     return (
       <div className="install row">
-        <div className="install-content col-md-10">{this.renderBody()}</div>
+        <div className="install-content col-md-10">
+          {installExperiment ? this.renderTestBody() : this.renderBody()}
+        </div>
         {this.renderSidebar()}
       </div>
     );
diff --git a/src/sentry/templatetags/sentry_react.py b/src/sentry/templatetags/sentry_react.py
index dd1518f496..aee2f5f0c9 100644
--- a/src/sentry/templatetags/sentry_react.py
+++ b/src/sentry/templatetags/sentry_react.py
@@ -103,6 +103,8 @@ def get_react_config(context):
         enabled_features.append('auth:register')
     if features.has('user:assistant', actor=user):
         enabled_features.append('assistant')
+    if features.has('user:install-experiment', actor=user):
+        enabled_features.append('install-experiment')
 
     version_info = _get_version_info()
 
diff --git a/tests/js/spec/views/projectInstall/platform.spec.jsx b/tests/js/spec/views/projectInstall/platform.spec.jsx
index d3a604609f..20a0cea683 100644
--- a/tests/js/spec/views/projectInstall/platform.spec.jsx
+++ b/tests/js/spec/views/projectInstall/platform.spec.jsx
@@ -2,6 +2,7 @@ import React from 'react';
 import {shallow} from 'enzyme';
 
 import {Client} from 'app/api';
+import ConfigStore from 'app/stores/configStore';
 import ProjectInstallPlatform from 'app/views/projectInstall/platform';
 
 describe('ProjectInstallPlatform', function() {
@@ -32,6 +33,16 @@ describe('ProjectInstallPlatform', function() {
               },
             ],
           },
+          {
+            id: 'javascript',
+            name: 'JavaScript',
+            integrations: [
+              {
+                id: 'javascript-react',
+                type: 'framework',
+              },
+            ],
+          },
           {
             id: 'node',
             name: 'Node.js',
@@ -79,5 +90,60 @@ describe('ProjectInstallPlatform', function() {
 
       expect(wrapper.find('LoadingIndicator')).toHaveLength(1);
     });
+
+    // TO-DO(Dena): Remove next three tests after experiment
+    it('should render experiment if selected react and in treatment', function() {
+      // Assignment in treatment or control lives in the configstore
+      ConfigStore.set('features', new Set(['install-experiment']));
+      let props = {
+        ...baseProps,
+        params: {
+          platform: 'javascript-react',
+        },
+      };
+      let wrapper = shallow(<ProjectInstallPlatform {...props} />, {
+        disableLifecycleMethods: false,
+        organization: {id: '1337'},
+      });
+
+      wrapper.setState({loading: false});
+      expect(wrapper.find('InstallReactTest')).toHaveLength(1);
+    });
+
+    it('should not render experiment if selected react and in control', function() {
+      // Assignment in treatment or control lives in the configstore
+      ConfigStore.set('features', new Set());
+      let props = {
+        ...baseProps,
+        params: {
+          platform: 'javascript-react',
+        },
+      };
+      let wrapper = shallow(<ProjectInstallPlatform {...props} />, {
+        disableLifecycleMethods: false,
+        organization: {id: '1337'},
+      });
+
+      wrapper.setState({loading: false});
+      expect(wrapper.find('InstallReactTest')).toHaveLength(0);
+    });
+
+    it('should not render experiment if did not select react and in treatment', function() {
+      // Assignment in treatment or control lives in the configstore
+      ConfigStore.set('features', new Set(['install-experiment']));
+      let props = {
+        ...baseProps,
+        params: {
+          platform: 'node-connect',
+        },
+      };
+      let wrapper = shallow(<ProjectInstallPlatform {...props} />, {
+        disableLifecycleMethods: false,
+        organization: {id: '1337'},
+      });
+
+      wrapper.setState({loading: false});
+      expect(wrapper.find('InstallReactTest')).toHaveLength(0);
+    });
   });
 });
