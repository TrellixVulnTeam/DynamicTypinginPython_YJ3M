commit 7d147c74ecb2cd47a52a7d74486f6e50201ce7d1
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Wed Feb 19 12:51:38 2020 -0800

    ref(analytics): Add signup tracking (#17036)

diff --git a/src/sentry/analytics/events/user_signup.py b/src/sentry/analytics/events/user_signup.py
new file mode 100644
index 0000000000..9683a62087
--- /dev/null
+++ b/src/sentry/analytics/events/user_signup.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import, print_function
+
+from sentry import analytics
+
+
+class UserSignUpEvent(analytics.Event):
+    type = "user.signup"
+
+    attributes = (
+        analytics.Attribute("user_id"),
+        analytics.Attribute("source"),
+        analytics.Attribute("provider", required=False),
+        analytics.Attribute("referrer", required=False),
+    )
+
+
+analytics.register(UserSignUpEvent)
diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index 5c41a96d22..848697889a 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -29,7 +29,7 @@ from sentry.models import (
     User,
     UserEmail,
 )
-from sentry.signals import sso_enabled
+from sentry.signals import sso_enabled, user_signup
 from sentry.tasks.auth import email_missing_links
 from sentry.utils import auth, metrics
 from sentry.utils.audit import create_audit_entry
@@ -497,6 +497,10 @@ def handle_new_user(auth_provider, organization, request, identity):
         auth_identity.update(user=user, data=identity.get("data", {}))
 
     user.send_confirm_emails(is_new_user=True)
+    provider = auth_provider.provider if auth_provider else None
+    user_signup.send_robust(
+        sender=handle_new_user, user=user, source="sso", provider=provider, referrer="in-app"
+    )
 
     handle_new_membership(auth_provider, organization, request, auth_identity)
 
diff --git a/src/sentry/receivers/experiments.py b/src/sentry/receivers/experiments.py
index 4aa9bbcefe..77eea11b10 100644
--- a/src/sentry/receivers/experiments.py
+++ b/src/sentry/receivers/experiments.py
@@ -1,7 +1,7 @@
 from __future__ import print_function, absolute_import
 
 from sentry import analytics
-from sentry.signals import join_request_created, join_request_link_viewed
+from sentry.signals import join_request_created, join_request_link_viewed, user_signup
 
 
 @join_request_created.connect(weak=False)
@@ -14,3 +14,14 @@ def record_join_request_created(member, **kwargs):
 @join_request_link_viewed.connect(weak=False)
 def record_join_request_link_viewed(organization, **kwargs):
     analytics.record("join_request.link_viewed", organization_id=organization.id)
+
+
+@user_signup.connect(weak=False)
+def record_user_signup(user, source, **kwargs):
+    analytics.record(
+        "user.signup",
+        user_id=user.id,
+        source=source,
+        provider=kwargs.get("provider"),
+        referrer=kwargs.get("referrer"),
+    )
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index 21acc27955..c5ebf000f1 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -106,3 +106,4 @@ monitor_failed = BetterSignal(providing_args=["monitor"])
 # experiments
 join_request_created = BetterSignal(providing_args=["member"])
 join_request_link_viewed = BetterSignal(providing_args=["organization"])
+user_signup = BetterSignal(providing_args=["user", "source"])
diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
index e927b5bb5f..40ed0cece5 100644
--- a/src/sentry/web/frontend/auth_login.py
+++ b/src/sentry/web/frontend/auth_login.py
@@ -14,7 +14,7 @@ from sentry.auth.superuser import is_active_superuser
 from sentry.constants import WARN_SESSION_EXPIRED
 from sentry.http import get_server_hostname
 from sentry.models import AuthProvider, Organization, OrganizationStatus
-from sentry.signals import join_request_link_viewed
+from sentry.signals import join_request_link_viewed, user_signup
 from sentry.web.forms.accounts import AuthenticationForm, RegistrationForm
 from sentry.web.frontend.base import BaseView
 from sentry.utils import auth, metrics
@@ -123,6 +123,9 @@ class AuthLoginView(BaseView):
         if can_register and register_form.is_valid():
             user = register_form.save()
             user.send_confirm_emails(is_new_user=True)
+            user_signup.send_robust(
+                sender=self, user=user, source="register-form", referrer="in-app"
+            )
 
             # HACK: grab whatever the first backend is and assume it works
             user.backend = settings.AUTHENTICATION_BACKENDS[0]
diff --git a/tests/sentry/auth/test_helper.py b/tests/sentry/auth/test_helper.py
index de9602b637..f4817ad110 100644
--- a/tests/sentry/auth/test_helper.py
+++ b/tests/sentry/auth/test_helper.py
@@ -4,25 +4,36 @@ from six.moves.urllib.parse import urlencode
 from django.test import RequestFactory
 from django.contrib.auth.models import AnonymousUser
 
+from sentry.auth.helper import handle_new_user
 from sentry.models import AuthProvider, InviteStatus, OrganizationMember
 from sentry.testutils import TestCase
-from sentry.auth.helper import handle_new_user
+from sentry.utils.compat import mock
 
 
 class HandleNewUserTest(TestCase):
-    def test_simple(self):
+    @mock.patch("sentry.analytics.record")
+    def test_simple(self, mock_record):
+        provider = "dummy"
         request = RequestFactory().post("/auth/sso/")
         request.user = AnonymousUser()
 
-        provider = AuthProvider.objects.create(organization=self.organization, provider="dummy")
+        auth_provider = AuthProvider.objects.create(
+            organization=self.organization, provider=provider
+        )
         identity = {"id": "1234", "email": "test@example.com", "name": "Morty"}
 
-        auth_identity = handle_new_user(provider, self.organization, request, identity)
+        auth_identity = handle_new_user(auth_provider, self.organization, request, identity)
+        user = auth_identity.user
 
-        assert auth_identity.user.email == identity["email"]
-        assert OrganizationMember.objects.filter(
-            organization=self.organization, user=auth_identity.user
-        ).exists()
+        assert user.email == identity["email"]
+        assert OrganizationMember.objects.filter(organization=self.organization, user=user).exists()
+
+        signup_record = filter(lambda r: r[0][0] == "user.signup", mock_record.call_args_list)
+        assert signup_record == [
+            mock.call(
+                "user.signup", user_id=user.id, source="sso", provider=provider, referrer="in-app"
+            )
+        ]
 
     def test_associated_existing_member_invite_by_email(self):
         request = RequestFactory().post("/auth/sso/")
diff --git a/tests/sentry/web/frontend/test_auth_login.py b/tests/sentry/web/frontend/test_auth_login.py
index 59d43925be..e8e4d1a44d 100644
--- a/tests/sentry/web/frontend/test_auth_login.py
+++ b/tests/sentry/web/frontend/test_auth_login.py
@@ -66,7 +66,8 @@ class AuthLoginTest(TestCase):
             resp = self.client.get(self.path)
             assert resp.context["register_form"] is None
 
-    def test_registration_valid(self):
+    @mock.patch("sentry.analytics.record")
+    def test_registration_valid(self, mock_record):
         options.set("auth.allow-registration", True)
         with self.feature("auth:register"):
             resp = self.client.post(
@@ -87,6 +88,17 @@ class AuthLoginTest(TestCase):
         assert user.name == "Foo Bar"
         assert not OrganizationMember.objects.filter(user=user).exists()
 
+        signup_record = filter(lambda r: r[0][0] == "user.signup", mock_record.call_args_list)
+        assert signup_record == [
+            mock.call(
+                "user.signup",
+                user_id=user.id,
+                source="register-form",
+                provider=None,
+                referrer="in-app",
+            )
+        ]
+
     def test_register_renders_correct_template(self):
         options.set("auth.allow-registration", True)
         register_path = reverse("sentry-register")
