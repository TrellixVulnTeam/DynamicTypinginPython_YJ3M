commit 70d76d57e588351a2660b71ac1512576301952d7
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 15 18:55:26 2016 -0700

    Add React compat layer for plugins
    
    @macqueen

diff --git a/src/sentry/plugins/base/group_api_urls.py b/src/sentry/plugins/base/group_api_urls.py
index 4fc83ee8c8..ea33e8725c 100644
--- a/src/sentry/plugins/base/group_api_urls.py
+++ b/src/sentry/plugins/base/group_api_urls.py
@@ -2,13 +2,14 @@ from __future__ import absolute_import
 
 from django.conf.urls import patterns, include, url
 
-from sentry.plugins import plugins, IssueTrackingPlugin2
+from sentry.plugins import plugins
 
 
 urlpatterns = patterns('')
 
 for _plugin in plugins.all():
-    if isinstance(_plugin, IssueTrackingPlugin2):
-        _plugin_group_urls = _plugin.get_group_urls()
-        if _plugin_group_urls:
-            urlpatterns += (url(r'^%s/' % _plugin.slug, include(_plugin_group_urls)),)
+    _plugin_group_urls = _plugin.get_group_urls()
+    if _plugin_group_urls:
+        urlpatterns.append(
+            url(r'^%s/' % _plugin.slug, include(_plugin_group_urls))
+        )
diff --git a/src/sentry/plugins/base/project_api_urls.py b/src/sentry/plugins/base/project_api_urls.py
index b99c2e7c8d..62ec066b2e 100644
--- a/src/sentry/plugins/base/project_api_urls.py
+++ b/src/sentry/plugins/base/project_api_urls.py
@@ -2,13 +2,14 @@ from __future__ import absolute_import
 
 from django.conf.urls import patterns, include, url
 
-from sentry.plugins import plugins, IssueTrackingPlugin2
+from sentry.plugins import plugins
 
 
 urlpatterns = patterns('')
 
 for _plugin in plugins.all():
-    if isinstance(_plugin, IssueTrackingPlugin2):
-        _plugin_project_urls = _plugin.get_project_urls()
-        if _plugin_project_urls:
-            urlpatterns += (url(r'^%s/' % _plugin.slug, include(_plugin_project_urls)),)
+    _plugin_project_urls = _plugin.get_project_urls()
+    if _plugin_project_urls:
+        urlpatterns.append(
+            url(r'^%s/' % _plugin.slug, include(_plugin_project_urls))
+        )
diff --git a/src/sentry/plugins/base/v1.py b/src/sentry/plugins/base/v1.py
index 4785b13ed7..8dd9d1e15f 100644
--- a/src/sentry/plugins/base/v1.py
+++ b/src/sentry/plugins/base/v1.py
@@ -17,6 +17,7 @@ from django.http import HttpResponseRedirect
 from threading import local
 
 from sentry.auth import access
+from sentry.plugins.config import PluginConfigMixin
 from sentry.plugins.base.response import Response
 from sentry.plugins.base.view import PluggableViewMixin
 from sentry.plugins.base.configuration import (
@@ -39,7 +40,7 @@ class PluginMount(type):
         return new_cls
 
 
-class IPlugin(local, PluggableViewMixin):
+class IPlugin(local, PluggableViewMixin, PluginConfigMixin):
     """
     Plugin interface. Should not be inherited from directly.
 
@@ -475,6 +476,24 @@ class IPlugin(local, PluggableViewMixin):
     def get_url_module(self):
         """Allows a plugin to return the import path to a URL module."""
 
+    def get_configure_plugin_fields(self, request, project, **kwargs):
+        form = self.project_conf_form
+        if not form:
+            return []
+
+        config = []
+        for name, field in six.iteritems(form.fields):
+            row = self.field_to_config(name, field)
+            row['default'] = self.get_option(name, project)
+            config.append(row)
+        return config
+
+    def view_configure(self, request, project, **kwargs):
+        if request.method == 'GET':
+            return Response(self.get_configure_plugin_fields(request, project, **kwargs))
+        self.configure(project, request.DATA)
+        return Response({'message': 'Successfully updated configuration.'})
+
 
 @six.add_metaclass(PluginMount)
 class Plugin(IPlugin):
diff --git a/src/sentry/plugins/base/v2.py b/src/sentry/plugins/base/v2.py
index cb0906f8ef..6ca93377df 100644
--- a/src/sentry/plugins/base/v2.py
+++ b/src/sentry/plugins/base/v2.py
@@ -15,6 +15,7 @@ import six
 from django.http import HttpResponseRedirect
 from threading import local
 
+from sentry.plugins.config import PluginConfigMixin
 from sentry.plugins.base.response import Response
 from sentry.plugins.base.configuration import (
     default_plugin_config, default_plugin_options,
@@ -36,7 +37,7 @@ class PluginMount(type):
         return new_cls
 
 
-class IPlugin2(local):
+class IPlugin2(local, PluginConfigMixin):
     """
     Plugin interface. Should not be inherited from directly.
 
diff --git a/src/sentry/plugins/bases/issue2.py b/src/sentry/plugins/bases/issue2.py
index 93497e8d3c..1e8a9da20b 100644
--- a/src/sentry/plugins/bases/issue2.py
+++ b/src/sentry/plugins/bases/issue2.py
@@ -6,14 +6,13 @@ from rest_framework.response import Response
 from social_auth.models import UserSocialAuth
 
 from django.conf import settings
-from django.conf.urls import patterns, url
+from django.conf.urls import url
 from django.core.urlresolvers import reverse
 from django.utils.html import format_html
 
-from sentry.api.bases.group import GroupEndpoint
-from sentry.api.bases.project import ProjectEndpoint
 from sentry.models import Activity, Event, GroupMeta
 from sentry.plugins import Plugin
+from sentry.plugins.endpoints import PluginGroupEndpoint, PluginProjectEndpoint
 from sentry.plugins.base.configuration import default_issue_plugin_config
 from sentry.signals import issue_tracker_used
 from sentry.utils.auth import get_auth_providers
@@ -21,38 +20,20 @@ from sentry.utils.http import absolute_uri
 from sentry.utils.safe import safe_execute
 
 
-class PluginError(Exception):
-    pass
-
-
-class IssueGroupActionEndpoint(GroupEndpoint):
+# TODO(dcramer): remove this in favor of GroupEndpoint
+class IssueGroupActionEndpoint(PluginGroupEndpoint):
     view_method_name = None
     plugin = None
 
     def _handle(self, request, group, *args, **kwargs):
         GroupMeta.objects.populate_cache([group])
 
-        return getattr(self.plugin, self.view_method_name)(request, group, *args, **kwargs)
-
-    def get(self, request, group, *args, **kwargs):
-        return self._handle(request, group, *args, **kwargs)
-
-    def post(self, request, group, *args, **kwargs):
-        return self._handle(request, group, *args, **kwargs)
-
-
-class IssuePluginProjectEndpoint(ProjectEndpoint):
-    view_method_name = None
-    plugin = None
-
-    def _handle(self, request, project, *args, **kwargs):
-        return getattr(self.plugin, self.view_method_name)(request, project, *args, **kwargs)
+        return getattr(self.plugin, self.view_method_name)(
+            request, group, *args, **kwargs)
 
-    def get(self, request, project, *args, **kwargs):
-        return self._handle(request, project, *args, **kwargs)
 
-    def post(self, request, project, *args, **kwargs):
-        return self._handle(request, project, *args, **kwargs)
+class PluginError(Exception):
+    pass
 
 
 class IssueTrackingPlugin2(Plugin):
@@ -62,27 +43,6 @@ class IssueTrackingPlugin2(Plugin):
     def has_project_conf(self):
         return True
 
-    def get_group_urls(self):
-        _urls = []
-        for action in self.allowed_actions:
-            view_method_name = 'view_%s' % action
-            _urls.append(url(r'^%s/' % action,
-                             IssueGroupActionEndpoint.as_view(view_method_name=view_method_name,
-                                                              plugin=self)))
-
-        return patterns('', *_urls)
-
-    def get_project_urls(self):
-        _urls = []
-        # TODO: add enable here when moved to api
-        for action in ('configure', 'disable'):
-            view_method_name = 'view_%s' % action
-            _urls.append(url(r'^%s/' % action,
-                             IssuePluginProjectEndpoint.as_view(view_method_name=view_method_name,
-                                                                plugin=self)))
-
-        return patterns('', *_urls)
-
     def get_group_body(self, request, group, event, **kwargs):
         result = []
         for interface in six.itervalues(event.interfaces):
@@ -111,6 +71,34 @@ class IssueTrackingPlugin2(Plugin):
     def is_configured(self, request, project, **kwargs):
         raise NotImplementedError
 
+    def get_group_urls(self):
+        _urls = []
+        for action in self.allowed_actions:
+            view_method_name = 'view_%s' % action
+            _urls.append(
+                url(r'^%s/' % action,
+                    PluginGroupEndpoint.as_view(
+                        view=getattr(self, view_method_name),
+                    ),
+                )
+            )
+        return _urls
+
+    def get_project_urls(self):
+        _urls = []
+        # TODO: add enable here when moved to api
+        for action in ('configure', 'disable'):
+            view_method_name = 'view_%s' % action
+
+            _urls.append(
+                url(r'^%s/' % action,
+                    PluginProjectEndpoint.as_view(
+                        view=getattr(self, view_method_name),
+                    ),
+                )
+            )
+        return _urls
+
     def get_auth_for_user(self, user, **kwargs):
         """
         Return a ``UserSocialAuth`` object for the given user based on this plugins ``auth_provider``.
diff --git a/src/sentry/plugins/config.py b/src/sentry/plugins/config.py
new file mode 100644
index 0000000000..c80658220b
--- /dev/null
+++ b/src/sentry/plugins/config.py
@@ -0,0 +1,30 @@
+from __future__ import absolute_import
+
+__all__ = ['PluginConfigMixin']
+
+from django import forms
+
+
+class PluginConfigMixin(object):
+    def field_to_config(self, name, field):
+        config = {
+            'name': name,
+            'label': field.label,
+            'placeholder': field.widget.attrs.get('placeholder'),
+            'help': field.help_text,
+        }
+        if isinstance(field, forms.CharField):
+            if field.widget == forms.Textarea:
+                config['type'] = 'textarea'
+            else:
+                config['type'] = 'text'
+        elif isinstance(field, forms.ChoiceField):
+            config['type'] = 'select'
+            config['choices'] = field.choices
+        return config
+
+    def get_group_urls(self):
+        return []
+
+    def get_project_urls(self):
+        return []
diff --git a/src/sentry/plugins/endpoints.py b/src/sentry/plugins/endpoints.py
new file mode 100644
index 0000000000..39d16e4e3c
--- /dev/null
+++ b/src/sentry/plugins/endpoints.py
@@ -0,0 +1,35 @@
+from __future__ import absolute_import
+
+__all__ = ['PluginProjectEndpoint', 'PluginGroupEndpoint']
+
+from sentry.api.bases.group import GroupEndpoint
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.models import GroupMeta
+
+
+class PluginProjectEndpoint(ProjectEndpoint):
+    view = None
+
+    def _handle(self, request, project, *args, **kwargs):
+        return self.view(request, project, *args, **kwargs)
+
+    def get(self, request, project, *args, **kwargs):
+        return self._handle(request, project, *args, **kwargs)
+
+    def post(self, request, project, *args, **kwargs):
+        return self._handle(request, project, *args, **kwargs)
+
+
+class PluginGroupEndpoint(GroupEndpoint):
+    view = None
+
+    def _handle(self, request, group, *args, **kwargs):
+        GroupMeta.objects.populate_cache([group])
+
+        return self.view(request, group, *args, **kwargs)
+
+    def get(self, request, group, *args, **kwargs):
+        return self._handle(request, group, *args, **kwargs)
+
+    def post(self, request, group, *args, **kwargs):
+        return self._handle(request, group, *args, **kwargs)
diff --git a/src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx b/src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx
index a9f6841a63..78b5820bf5 100644
--- a/src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx
+++ b/src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx
@@ -6,7 +6,7 @@ import LoadingIndicator from '../loadingIndicator';
 import {t} from '../../locale';
 import {defined} from '../../utils';
 
-const IssuePluginConfigForm = React.createClass({
+const PluginConfigForm = React.createClass({
   propTypes: {
     organization: React.PropTypes.object.isRequired,
     project: React.PropTypes.object.isRequired,
@@ -29,8 +29,9 @@ const IssuePluginConfigForm = React.createClass({
   getPluginConfigureEndpoint() {
     let org = this.props.organization;
     let project = this.props.project;
-    return ('/projects/' + org.slug + '/' + project.slug +
-            '/plugin/' + this.props.plugin.slug + '/configure/');
+    return (
+      `/projects/${org.slug}/${project.slug}/plugin/${this.props.plugin.slug}/configure/`
+    );
   },
 
   fetchData() {
@@ -127,4 +128,4 @@ const IssuePluginConfigForm = React.createClass({
   }
 });
 
-export default IssuePluginConfigForm;
+export default PluginConfigForm;
