commit c111cf3c3a97d99933e15c1493cc28abb16ee7ff
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Jan 4 14:04:11 2015 -0800

    Raise an error when GroupMeta is fetched without caching (refs GH-1368)

diff --git a/src/sentry/exceptions.py b/src/sentry/exceptions.py
index cb2d119949..303152427e 100644
--- a/src/sentry/exceptions.py
+++ b/src/sentry/exceptions.py
@@ -23,3 +23,7 @@ class InvalidOrigin(InvalidRequest):
 
     def __str__(self):
         return "Invalid origin: '%s'" % self.origin
+
+
+class CacheNotPopulated(Exception):
+    pass
diff --git a/src/sentry/models/groupmeta.py b/src/sentry/models/groupmeta.py
index fab9a5dec5..7626ca8b72 100644
--- a/src/sentry/models/groupmeta.py
+++ b/src/sentry/models/groupmeta.py
@@ -11,10 +11,14 @@ from celery.signals import task_postrun
 from django.core.signals import request_finished
 from django.db import models
 
+from sentry.exceptions import CacheNotPopulated
 from sentry.db.models import FlexibleForeignKey, Model, sane_repr
 from sentry.db.models.manager import BaseManager
 
 
+ERR_CACHE_MISISNG = 'Cache not populated for instance id=%s'
+
+
 class GroupMetaManager(BaseManager):
     def __init__(self, *args, **kwargs):
         super(GroupMetaManager, self).__init__(*args, **kwargs)
@@ -31,25 +35,39 @@ class GroupMetaManager(BaseManager):
         self.__dict__.update(state)
         self.__cache = {}
 
+    def contribute_to_class(self, model, name):
+        model.CacheNotPopulated = CacheNotPopulated
+        return super(GroupMetaManager, self).contribute_to_class(model, name)
+
     def clear_local_cache(self, **kwargs):
         self.__cache = {}
 
     def populate_cache(self, instance_list):
+        for group in instance_list:
+            self.__cache.setdefault(group.id, {})
+
         results = self.filter(
             group__in=instance_list,
         ).values_list('group', 'key', 'value')
         for group_id, key, value in results:
-            self.__cache.setdefault(group_id, {})
             self.__cache[group_id][key] = value
 
-    def get_value_bulk(self, instance_list, key):
-        return dict(
-            (i, self.__cache.get(i.id, {}).get(key))
-            for i in instance_list
-        )
+    def get_value_bulk(self, instance_list, key, default=None):
+        results = {}
+        for instance in instance_list:
+            try:
+                inst_cache = self.__cache[instance.id]
+            except KeyError:
+                raise self.model.CacheNotPopulated(ERR_CACHE_MISISNG % (instance.id,))
+            results[instance] = inst_cache.get(key, default)
+        return results
 
     def get_value(self, instance, key, default=None):
-        return self.__cache.get(instance.id, {}).get(key, default)
+        try:
+            inst_cache = self.__cache[instance.id]
+        except KeyError:
+            raise self.model.CacheNotPopulated(ERR_CACHE_MISISNG % (instance.id,))
+        return inst_cache.get(key, default)
 
     def unset_value(self, instance, key):
         self.filter(group=instance, key=key).delete()
diff --git a/tests/sentry/models/test_groupmeta.py b/tests/sentry/models/test_groupmeta.py
index 260137d7f4..3f3a87aae4 100644
--- a/tests/sentry/models/test_groupmeta.py
+++ b/tests/sentry/models/test_groupmeta.py
@@ -13,13 +13,13 @@ class GroupMetaManagerTest(TestCase):
             group=self.group, key='foo', value='bar').exists()
 
     def test_get_value(self):
-        result = GroupMeta.objects.get_value(self.group, 'foo')
-        assert result is None
+        with self.assertRaises(GroupMeta.CacheNotPopulated):
+            GroupMeta.objects.get_value(self.group, 'foo')
 
         GroupMeta.objects.create(
             group=self.group, key='foo', value='bar')
-        result = GroupMeta.objects.get_value(self.group, 'foo')
-        assert result is None
+        with self.assertRaises(GroupMeta.CacheNotPopulated):
+            GroupMeta.objects.get_value(self.group, 'foo')
 
         GroupMeta.objects.populate_cache([self.group])
         result = GroupMeta.objects.get_value(self.group, 'foo')
@@ -34,13 +34,13 @@ class GroupMetaManagerTest(TestCase):
             group=self.group, key='foo').exists()
 
     def test_get_value_bulk(self):
-        result = GroupMeta.objects.get_value_bulk([self.group], 'foo')
-        assert result == {self.group: None}
+        with self.assertRaises(GroupMeta.CacheNotPopulated):
+            GroupMeta.objects.get_value_bulk([self.group], 'foo')
 
         GroupMeta.objects.create(
             group=self.group, key='foo', value='bar')
-        result = GroupMeta.objects.get_value_bulk([self.group], 'foo')
-        assert result == {self.group: None}
+        with self.assertRaises(GroupMeta.CacheNotPopulated):
+            GroupMeta.objects.get_value_bulk([self.group], 'foo')
 
         GroupMeta.objects.populate_cache([self.group])
         result = GroupMeta.objects.get_value_bulk([self.group], 'foo')
