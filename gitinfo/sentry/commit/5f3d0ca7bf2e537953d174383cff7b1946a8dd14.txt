commit 5f3d0ca7bf2e537953d174383cff7b1946a8dd14
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Feb 23 12:55:31 2018 -0800

    feat(ui): UI refresh for Project Release Tracking (#7314)
    
    * ref(ui): Remove findDOMNode and jQuery from AutoSelectText
    * fix(ui): Fix wrapping/autoselect on "project release tracking"
    * Change ProjectReleaseTracking to use Field for displaying and regenerating tokens
    * Use TextCopyInput for displaying token so it can be copied to
    clipboard
    * Add Confirm modal when regenerating token

diff --git a/src/sentry/static/sentry/app/components/autoSelectText.jsx b/src/sentry/static/sentry/app/components/autoSelectText.jsx
index 0eb1f67697..0986b7e75a 100644
--- a/src/sentry/static/sentry/app/components/autoSelectText.jsx
+++ b/src/sentry/static/sentry/app/components/autoSelectText.jsx
@@ -1,30 +1,43 @@
 import React from 'react';
-import ReactDOM from 'react-dom';
-import jQuery from 'jquery';
+import PropTypes from 'prop-types';
 
 import {selectText} from '../utils/selectText';
 
 class AutoSelectText extends React.Component {
-  componentDidMount() {
-    let ref = ReactDOM.findDOMNode(this.refs.element);
-    jQuery(ref).bind('click', this.selectText);
-  }
-
-  componentWillUnmount() {
-    let ref = ReactDOM.findDOMNode(this.refs.element);
-    jQuery(ref).unbind('click', this.selectText);
-  }
+  static propTypes = {
+    /**
+     * Can be a `node` for a simple auto select div container.
+     * When children is a render function, it is passed 2 functions:
+     * - `doMount` - should be applied on parent element's `ref`
+     *   (or `innerRef` for styled components) whose children is the
+     *   text to be copied
+     * - `doSelect` - selects text
+     */
+    children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
+  };
 
   selectText = () => {
-    let node = ReactDOM.findDOMNode(this.refs.element).firstChild;
-    selectText(node);
+    if (!this.el) return;
+
+    selectText(this.el);
+  };
+
+  handleMount = el => {
+    this.el = el;
   };
 
   render() {
-    let {className, children, style} = this.props;
+    let {children, ...props} = this.props;
+
+    if (typeof children === 'function') {
+      return children({
+        doMount: this.handleMount,
+        doSelect: this.selectText,
+      });
+    }
 
     return (
-      <div ref="element" className={className} style={style}>
+      <div {...props} ref={this.handleMount} onClick={this.selectText}>
         {children}
       </div>
     );
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index b7868bb785..247c24ebcf 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -79,7 +79,6 @@ import ProjectKeys from './views/projectKeys';
 import ProjectPicker from './views/settings/components/projectPicker';
 import ProjectProcessingIssues from './views/projectProcessingIssues';
 import ProjectIssueTracking from './views/projectIssueTracking';
-import ProjectReleaseTracking from './views/projectReleaseTracking';
 import ProjectReleases from './views/projectReleases';
 import ProjectSavedSearches from './views/projectSavedSearches';
 import ProjectSettings from './views/projectSettings';
@@ -297,7 +296,9 @@ const projectSettingsRoutes = (
     <Route
       path="release-tracking/"
       name="Release Tracking"
-      component={errorHandler(ProjectReleaseTracking)}
+      componentPromise={() =>
+        import(/* webpackChunkName: "ProjectReleaseTracking" */ './views/settings/project/projectReleaseTracking')}
+      component={errorHandler(LazyLoad)}
     />
     <Route
       path="data-forwarding/"
diff --git a/src/sentry/static/sentry/app/views/projectReleaseTracking.jsx b/src/sentry/static/sentry/app/views/projectReleaseTracking.jsx
deleted file mode 100644
index 0bbddf6342..0000000000
--- a/src/sentry/static/sentry/app/views/projectReleaseTracking.jsx
+++ /dev/null
@@ -1,269 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-
-import {t, tct} from '../locale';
-import AlertActions from '../actions/alertActions';
-import ApiMixin from '../mixins/apiMixin';
-import DynamicWrapper from '../components/dynamicWrapper';
-import LoadingError from '../components/loadingError';
-import LoadingIndicator from '../components/loadingIndicator';
-import Panel from './settings/components/panel';
-import PanelBody from './settings/components/panelBody';
-import PanelHeader from './settings/components/panelHeader';
-import PluginList from '../components/pluginList';
-import SentryTypes from '../proptypes';
-import SettingsPageHeader from './settings/components/settingsPageHeader';
-import TextBlock from './settings/components/text/textBlock';
-import withPlugins from '../utils/withPlugins';
-
-const noMargin = {margin: 0};
-
-const ProjectReleaseTracking = createReactClass({
-  displayName: 'ProjectReleaseTracking',
-
-  propTypes: {
-    organization: PropTypes.object,
-    project: PropTypes.object,
-    plugins: SentryTypes.PluginsStore,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      webhookUrl: '',
-      token: '',
-    };
-  },
-
-  componentDidMount() {
-    this.fetchData();
-  },
-
-  fetchData() {
-    let {orgId, projectId} = this.props.params;
-
-    this.api.request(`/projects/${orgId}/${projectId}/releases/token/`, {
-      method: 'GET',
-      success: data =>
-        this.setState({
-          webhookUrl: data.webhookUrl,
-          token: data.token,
-        }),
-      error: () => {
-        this.setState({
-          error: true,
-        });
-      },
-      complete: () => {
-        this.setState({loading: false});
-      },
-    });
-  },
-
-  onSubmit(evt) {
-    evt.preventDefault();
-    this.regenerateToken();
-  },
-
-  regenerateToken() {
-    let {orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/releases/token/`, {
-      method: 'POST',
-      data: {project: projectId},
-      success: data => {
-        this.setState({
-          token: data.token,
-          webhookUrl: data.webhookUrl,
-        });
-        AlertActions.addAlert({
-          message: t(
-            'Your deploy token has been regenerated. You will need to update any pre-existing deploy hooks.'
-          ),
-          type: 'success',
-        });
-      },
-      error: () => {
-        this.setState({
-          error: true,
-        });
-      },
-    });
-  },
-
-  getReleaseWebhookIntructions() {
-    let webhookUrl = this.state.webhookUrl;
-    return (
-      'curl ' +
-      webhookUrl +
-      ' \\' +
-      '\n  ' +
-      '-X POST \\' +
-      '\n  ' +
-      "-H 'Content-Type: application/json' \\" +
-      '\n  ' +
-      '-d \'{"version": "abcdefg"}\''
-    );
-  },
-
-  getReleaseClientConfigurationIntructions() {
-    return (
-      '// See SDK documentation for language specific usage.' +
-      '\n' +
-      "Raven.config('your dsn', {" +
-      '\n' +
-      '  ' +
-      "release: '0e4fdef81448dcfa0e16ecc4433ff3997aa53572'" +
-      '\n' +
-      '});'
-    );
-  },
-
-  render() {
-    let {organization, project, plugins} = this.props;
-
-    if (this.state.loading || plugins.loading)
-      return (
-        <div className="box">
-          <LoadingIndicator />
-        </div>
-      );
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
-
-    let pluginList = plugins.plugins.filter(
-      p => p.type === 'release-tracking' && p.hasConfiguration
-    );
-
-    return (
-      <div>
-        <SettingsPageHeader title={t('Release Tracking')} />
-        <TextBlock>
-          {t(
-            'Configure release tracking for this project to automatically record new releases of your application.'
-          )}
-        </TextBlock>
-
-        <Panel>
-          <PanelHeader>{t('Client Configuration')}</PanelHeader>
-          <PanelBody disablePadding={false} flex>
-            <p>
-              {tct('Start by binding the [release] attribute in your application:', {
-                release: <code>release</code>,
-              })}
-            </p>
-            <pre>{this.getReleaseClientConfigurationIntructions()}</pre>
-            <p>
-              {t(
-                "This will annotate each event with the version of your application, as well as automatically create a release entity in the system the first time it's seen."
-              )}
-            </p>
-            <div>
-              {t(
-                'In addition you may configure a release hook (or use our API) to push a release and include additional metadata with it.'
-              )}
-            </div>
-          </PanelBody>
-        </Panel>
-
-        <Panel>
-          <PanelHeader>{t('Token')}</PanelHeader>
-          <PanelBody disablePadding={false} flex>
-            <form>
-              <p>
-                {t(
-                  'Your token is a unique secret which is used to generate deploy hook URLs. If a service becomes compromised, you should regenerate the token and re-configure any deploy hooks with the newly generated URL.'
-                )}
-              </p>
-              <p>
-                <code style={{display: 'inlineBlock'}} className="auto-select">
-                  <DynamicWrapper value={this.state.token} fixed="__TOKEN__" />
-                </code>
-              </p>
-              <div>
-                <button
-                  type="submit"
-                  className="btn btn-sm btn-danger"
-                  name="op"
-                  value="regenerate-token"
-                  onClick={this.onSubmit}
-                >
-                  {t('Regenerate Token')}
-                </button>
-              </div>
-            </form>
-          </PanelBody>
-        </Panel>
-
-        <Panel>
-          <PanelHeader>{t('Webhook')}</PanelHeader>
-          <PanelBody disablePadding={false} flex>
-            <form>
-              <p>
-                {t(
-                  'If you simply want to integrate with an existing system, sometimes its easiest just to use a webhook.'
-                )}
-              </p>
-
-              <DynamicWrapper
-                value={<pre className="auto-select">{this.state.webhookUrl}</pre>}
-                fixed={<pre className="auto-select">__WEBHOOK_URL__</pre>}
-              />
-
-              <p>
-                {t(
-                  'The release webhook accepts the same parameters as the "Create a new Release" API endpoint, for example:'
-                )}
-              </p>
-
-              <DynamicWrapper
-                value={
-                  <pre style={noMargin} className="auto-select">
-                    {this.getReleaseWebhookIntructions()}
-                  </pre>
-                }
-                fixed={
-                  <pre style={noMargin} className="auto-select">
-                    {`curl __WEBHOOK_URL__ \\
-  -X POST \\
-  -H 'Content-Type: application/json' \\
-  -d \'{"version": "abcdefg"}\'`}
-                  </pre>
-                }
-              />
-            </form>
-          </PanelBody>
-        </Panel>
-
-        <PluginList
-          organization={organization}
-          project={project}
-          pluginList={pluginList}
-        />
-
-        <Panel>
-          <PanelHeader>{t('API')}</PanelHeader>
-          <PanelBody disablePadding={false} flex>
-            <p>
-              {t(
-                'You can notify Sentry when you release new versions of your application via our HTTP API.'
-              )}
-            </p>
-
-            <div>
-              {t('See the ')}
-              <a href="https://docs.sentry.io/hosted/api/releases/">
-                {t('Releases API documentation')}
-              </a>{' '}
-              {t('for more information.')}
-            </div>
-          </PanelBody>
-        </Panel>
-      </div>
-    );
-  },
-});
-
-export default withPlugins(ProjectReleaseTracking);
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
index 4735b95755..dc7af837ef 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
@@ -67,7 +67,15 @@ class JsonForm extends React.Component {
   }
 
   render() {
-    let {forms, access, additionalFieldProps, renderFooter, ...otherProps} = this.props;
+    let {
+      forms,
+      access,
+      additionalFieldProps,
+      renderFooter,
+      // eslint-disable-next-line no-unused-vars
+      location,
+      ...otherProps
+    } = this.props;
     let shouldRenderFooter = typeof renderFooter === 'function';
 
     return (
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx
index e6dc8307bf..d3369cdb8e 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx
@@ -98,7 +98,7 @@ class TextCopyInput extends React.Component {
           />
         </OverflowContainer>
         <Clipboard hideUnsupported onClick={this.handleCopyClick} value={children}>
-          <StyledCopyButton size="xsmall" onClick={this.handleCopyClick}>
+          <StyledCopyButton type="button" size="xsmall" onClick={this.handleCopyClick}>
             <InlineSvg src="icon-clipboard" size="1.25em" />
           </StyledCopyButton>
         </Clipboard>
diff --git a/src/sentry/static/sentry/app/views/settings/organization/general/organizationGeneralSettingsView.jsx b/src/sentry/static/sentry/app/views/settings/organization/general/organizationGeneralSettingsView.jsx
index 384e0f7293..c201c1bf3b 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/general/organizationGeneralSettingsView.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/general/organizationGeneralSettingsView.jsx
@@ -11,11 +11,11 @@ import {
 } from '../../../../actionCreators/organizations';
 import {t, tct} from '../../../../locale';
 import ApiMixin from '../../../../mixins/apiMixin';
+import Field from '../../components/forms/field';
 import LinkWithConfirmation from '../../../../components/linkWithConfirmation';
 import LoadingIndicator from '../../../../components/loadingIndicator';
 import OrganizationsStore from '../../../../stores/organizationsStore';
 import Panel from '../../components/panel';
-import Field from '../../components/forms/field';
 import PanelHeader from '../../components/panelHeader';
 import SettingsPageHeader from '../../components/settingsPageHeader';
 import getSettingsComponent from '../../../../utils/getSettingsComponent';
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectReleaseTracking.jsx b/src/sentry/static/sentry/app/views/settings/project/projectReleaseTracking.jsx
new file mode 100644
index 0000000000..220174b1cb
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectReleaseTracking.jsx
@@ -0,0 +1,256 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {addErrorMessage, addSuccessMessage} from '../../../actionCreators/indicator';
+import {t, tct} from '../../../locale';
+import AsyncView from '../../asyncView';
+import AutoSelectText from '../../../components/autoSelectText';
+import Button from '../../../components/buttons/button';
+import Confirm from '../../../components/confirm';
+import DynamicWrapper from '../../../components/dynamicWrapper';
+import Field from '../components/forms/field';
+import LoadingIndicator from '../../../components/loadingIndicator';
+import Panel from '../components/panel';
+import PanelBody from '../components/panelBody';
+import PanelHeader from '../components/panelHeader';
+import PluginList from '../../../components/pluginList';
+import SentryTypes from '../../../proptypes';
+import SettingsPageHeader from '../components/settingsPageHeader';
+import TextBlock from '../components/text/textBlock';
+import TextCopyInput from '../components/forms/textCopyInput';
+import withPlugins from '../../../utils/withPlugins';
+
+const noMargin = {margin: 0};
+const marginTop = {marginTop: 30};
+
+const PreWrap = styled.pre`
+  word-break: break-all;
+  white-space: pre-wrap;
+`;
+
+class ProjectReleaseTracking extends AsyncView {
+  static propTypes = {
+    organization: PropTypes.object,
+    project: PropTypes.object,
+    plugins: SentryTypes.PluginsStore,
+  };
+
+  getTitle() {
+    return 'Release Tracking';
+  }
+
+  getEndpoints() {
+    let {orgId, projectId} = this.props.params;
+
+    return [['data', `/projects/${orgId}/${projectId}/releases/token/`]];
+  }
+
+  handleRegenerateToken = () => {
+    let {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/releases/token/`, {
+      method: 'POST',
+      data: {project: projectId},
+      success: data => {
+        this.setState({
+          token: data.token,
+          webhookUrl: data.webhookUrl,
+        });
+        addSuccessMessage(
+          t(
+            'Your deploy token has been regenerated. You will need to update any existing deploy hooks.'
+          )
+        );
+      },
+      error: () => {
+        addErrorMessage(t('Unable to regenerate deploy token, please try again'));
+      },
+    });
+  };
+
+  getReleaseWebhookIntructions() {
+    let {webhookUrl} = this.state.data;
+    return (
+      'curl ' +
+      webhookUrl +
+      ' \\' +
+      '\n  ' +
+      '-X POST \\' +
+      '\n  ' +
+      "-H 'Content-Type: application/json' \\" +
+      '\n  ' +
+      '-d \'{"version": "abcdefg"}\''
+    );
+  }
+
+  getReleaseClientConfigurationIntructions() {
+    return (
+      '// See SDK documentation for language specific usage.' +
+      '\n' +
+      "Raven.config('your dsn', {" +
+      '\n' +
+      '  ' +
+      "release: '0e4fdef81448dcfa0e16ecc4433ff3997aa53572'" +
+      '\n' +
+      '});'
+    );
+  }
+
+  renderBody() {
+    let {organization, project, plugins} = this.props;
+
+    if (plugins.loading) {
+      return <LoadingIndicator />;
+    }
+
+    let pluginList = plugins.plugins.filter(
+      p => p.type === 'release-tracking' && p.hasConfiguration
+    );
+
+    let {token, webhookUrl} = this.state.data;
+
+    return (
+      <div>
+        <SettingsPageHeader title={t('Release Tracking')} />
+        <TextBlock>
+          {t(
+            'Configure release tracking for this project to automatically record new releases of your application.'
+          )}
+        </TextBlock>
+
+        <Panel>
+          <PanelHeader>{t('Client Configuration')}</PanelHeader>
+          <PanelBody disablePadding={false} flex>
+            <TextBlock css={noMargin}>
+              {tct('Start by binding the [release] attribute in your application', {
+                release: <code>release</code>,
+              })}
+            </TextBlock>
+            <AutoSelectText>
+              <PreWrap style={noMargin}>
+                {this.getReleaseClientConfigurationIntructions()}
+              </PreWrap>
+            </AutoSelectText>
+            <TextBlock css={marginTop}>
+              {t(
+                "This will annotate each event with the version of your application, as well as automatically create a release entity in the system the first time it's seen."
+              )}
+            </TextBlock>
+            <TextBlock css={noMargin}>
+              {t(
+                'In addition you may configure a release hook (or use our API) to push a release and include additional metadata with it.'
+              )}
+            </TextBlock>
+          </PanelBody>
+        </Panel>
+
+        <Panel>
+          <PanelHeader>{t('Deploy Token')}</PanelHeader>
+          <PanelBody flex>
+            <Field
+              label={t('Token')}
+              help={t('A unique secret which is used to generate deploy hook URLs')}
+            >
+              <DynamicWrapper
+                value={<TextCopyInput>{token}</TextCopyInput>}
+                fixed="__TOKEN__"
+              />
+            </Field>
+            <Field
+              label={t('Regenerate Token')}
+              help={t(
+                'If a service becomes compromised, you should regenerate the token and re-configure any deploy hooks with the newly generated URL.'
+              )}
+            >
+              <div>
+                <Confirm
+                  priority="danger"
+                  onConfirm={this.handleRegenerateToken}
+                  message={t(
+                    'Are you sure you want to regenerate your token? Your current token will no longer be usable.'
+                  )}
+                >
+                  <Button type="button" priority="danger">
+                    {t('Regenerate Token')}
+                  </Button>
+                </Confirm>
+              </div>
+            </Field>
+          </PanelBody>
+        </Panel>
+
+        <Panel>
+          <PanelHeader>{t('Webhook')}</PanelHeader>
+          <PanelBody disablePadding={false} flex>
+            <TextBlock css={noMargin}>
+              {t(
+                'If you simply want to integrate with an existing system, sometimes its easiest just to use a webhook.'
+              )}
+            </TextBlock>
+
+            <DynamicWrapper
+              value={
+                <AutoSelectText>
+                  <PreWrap>{webhookUrl}</PreWrap>
+                </AutoSelectText>
+              }
+              fixed={<PreWrap>__WEBHOOK_URL__</PreWrap>}
+            />
+
+            <TextBlock css={noMargin}>
+              {t(
+                'The release webhook accepts the same parameters as the "Create a new Release" API endpoint.'
+              )}
+            </TextBlock>
+
+            <DynamicWrapper
+              value={
+                <AutoSelectText>
+                  <PreWrap style={noMargin}>
+                    {this.getReleaseWebhookIntructions()}
+                  </PreWrap>
+                </AutoSelectText>
+              }
+              fixed={
+                <PreWrap style={noMargin}>
+                  {`curl __WEBHOOK_URL__ \\
+  -X POST \\
+  -H 'Content-Type: application/json' \\
+  -d \'{"version": "abcdefg"}\'`}
+                </PreWrap>
+              }
+            />
+          </PanelBody>
+        </Panel>
+
+        <PluginList
+          organization={organization}
+          project={project}
+          pluginList={pluginList}
+        />
+
+        <Panel>
+          <PanelHeader>{t('API')}</PanelHeader>
+          <PanelBody disablePadding={false} flex>
+            <TextBlock>
+              {t(
+                'You can notify Sentry when you release new versions of your application via our HTTP API.'
+              )}
+            </TextBlock>
+
+            <TextBlock css={noMargin}>
+              {tct('See the [link:Releases API documentation] for more information.', {
+                link: <a href="https://docs.sentry.io/hosted/api/releases/" />,
+              })}
+            </TextBlock>
+          </PanelBody>
+        </Panel>
+      </div>
+    );
+  }
+}
+
+export default withPlugins(ProjectReleaseTracking);
+
+// Export for tests
+export {ProjectReleaseTracking};
diff --git a/tests/js/spec/components/__snapshots__/textCopyInput.spec.jsx.snap b/tests/js/spec/components/__snapshots__/textCopyInput.spec.jsx.snap
index 333bf8c421..739d8e591a 100644
--- a/tests/js/spec/components/__snapshots__/textCopyInput.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/textCopyInput.spec.jsx.snap
@@ -20,6 +20,7 @@ exports[`TextCopyInput renders 1`] = `
     <StyledCopyButton
       onClick={[Function]}
       size="xsmall"
+      type="button"
     >
       <InlineSvg
         size="1.25em"
diff --git a/tests/js/spec/views/__snapshots__/groupSimilarView.spec.jsx.snap b/tests/js/spec/views/__snapshots__/groupSimilarView.spec.jsx.snap
index 147a76662b..98cb3ecd77 100644
--- a/tests/js/spec/views/__snapshots__/groupSimilarView.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/groupSimilarView.spec.jsx.snap
@@ -815,7 +815,9 @@ exports[`Issues Similar View renders with mocked data 1`] = `
                                       onClick={[Function]}
                                     >
                                       <AutoSelectText>
-                                        <div>
+                                        <div
+                                          onClick={[Function]}
+                                        >
                                           INTERNAL-4G
                                         </div>
                                       </AutoSelectText>
@@ -1897,7 +1899,9 @@ exports[`Issues Similar View renders with mocked data 2`] = `
                                       onClick={[Function]}
                                     >
                                       <AutoSelectText>
-                                        <div>
+                                        <div
+                                          onClick={[Function]}
+                                        >
                                           INTERNAL-4G
                                         </div>
                                       </AutoSelectText>
diff --git a/tests/js/spec/views/projectReleaseTracking.spec.jsx b/tests/js/spec/views/projectReleaseTracking.spec.jsx
new file mode 100644
index 0000000000..93a37c99c7
--- /dev/null
+++ b/tests/js/spec/views/projectReleaseTracking.spec.jsx
@@ -0,0 +1,79 @@
+import React from 'react';
+
+import {mount} from 'enzyme';
+import {ProjectReleaseTracking} from 'app/views/settings/project/projectReleaseTracking';
+
+describe('ProjectReleaseTracking', function() {
+  let org = TestStubs.Organization();
+  let project = TestStubs.Project();
+  let url = `/projects/${org.slug}/${project.slug}/releases/token/`;
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/plugins/`,
+      method: 'GET',
+      body: TestStubs.Plugins(),
+    });
+    MockApiClient.addMockResponse({
+      url,
+      method: 'GET',
+      body: {
+        webhookUrl: 'webhook-url',
+        token: 'token token token',
+      },
+    });
+  });
+
+  it('renders with token', function() {
+    let wrapper = mount(
+      <ProjectReleaseTracking
+        organization={org}
+        project={project}
+        plugins={{loading: false, plugins: TestStubs.Plugins()}}
+        params={{orgId: org.slug, projectId: project.slug}}
+      />,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('TextCopyInput').prop('children')).toBe('token token token');
+  });
+
+  it('can regenerate token', function(done) {
+    let wrapper = mount(
+      <ProjectReleaseTracking
+        organization={org}
+        project={project}
+        plugins={{loading: false, plugins: TestStubs.Plugins()}}
+        params={{orgId: org.slug, projectId: project.slug}}
+      />,
+      TestStubs.routerContext()
+    );
+
+    let mock = MockApiClient.addMockResponse({
+      url,
+      method: 'POST',
+    });
+
+    // Click Regenerate Token
+    wrapper.find('Field[label="Regenerate Token"] Button').simulate('click');
+    expect(wrapper.find('ModalDialog')).toHaveLength(1);
+
+    expect(mock).not.toHaveBeenCalled();
+
+    wrapper.find('ModalDialog Button[priority="danger"]').simulate('click');
+
+    setTimeout(() => {
+      expect(mock).toHaveBeenCalledWith(
+        url,
+        expect.objectContaining({
+          method: 'POST',
+          data: {
+            project: project.slug,
+          },
+        })
+      );
+      done();
+    }, 1);
+  });
+});
