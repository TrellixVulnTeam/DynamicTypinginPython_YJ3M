commit 9a511bd81750efecb505651f2e98a12bc7d121a0
Author: Ted Kaemming <ted@kaemming.com>
Date:   Wed Oct 7 15:56:14 2015 -0700

    Default end to the current time if not provided.

diff --git a/example.py b/example.py
index 1ce1da9fe1..c63ddf7944 100644
--- a/example.py
+++ b/example.py
@@ -18,14 +18,12 @@ tsdb.record_multi([
     (tsdb.models.users_affected_by_event, k, [random.randint(0, 1e6) for _ in xrange(random.randint(1, 50))]) for k in keys
 ])
 
-end = timezone.now()
-start = end - timedelta(seconds=60)
+start = timezone.now() - timedelta(seconds=60)
 
 totals = tsdb.get_distinct_counts_totals(
     tsdb.models.users_affected_by_event,
     keys,
     start,
-    end,
 )
 
 pprint.pprint(totals)
@@ -34,7 +32,6 @@ series = tsdb.get_distinct_counts_series(
     tsdb.models.users_affected_by_event,
     keys,
     start,
-    end,
 )
 
 pprint.pprint(series)
diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index 6a5ea600ce..bd6ca1f561 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -8,8 +8,10 @@ sentry.tsdb.base
 from __future__ import absolute_import
 
 from django.conf import settings
+from django.utils import timezone
 from enum import Enum
 
+
 ONE_MINUTE = 60
 ONE_HOUR = ONE_MINUTE * 60
 ONE_DAY = ONE_HOUR * 24
@@ -103,7 +105,10 @@ class BaseTSDB(object):
                 return rollup
         return self.rollups[-1][0]
 
-    def get_optimal_rollup_intervals(self, start, end, rollup=None):
+    def get_optimal_rollup_intervals(self, start, end=None, rollup=None):
+        if end is None:
+            end = timezone.now()
+
         # NOTE: "optimal" here means "able to most closely reflect the upper
         # and lower bounds", not "able to construct the most efficient query"
         if rollup is None:
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index de84ed982d..09ffdd6a33 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -196,7 +196,7 @@ class RedisTSDB(BaseTSDB):
         # TODO: Check to make sure these operations didn't fail, so we can
         # raise an error if there were issues.
 
-    def get_distinct_counts_series(self, model, keys, start, end, rollup=None):
+    def get_distinct_counts_series(self, model, keys, start, end=None, rollup=None):
         """
         Fetch counts of distinct items for each rollup interval within the range.
         """
@@ -218,7 +218,7 @@ class RedisTSDB(BaseTSDB):
 
         return {k: [(t, p.value) for t, p in v] for k, v in responses.iteritems()}
 
-    def get_distinct_counts_totals(self, model, keys, start, end, rollup=None):
+    def get_distinct_counts_totals(self, model, keys, start, end=None, rollup=None):
         """
         Count distinct items during a time range.
         """
