commit d052fd70d828b277632c3ac65dc1271eff25d83c
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Thu Feb 16 16:50:21 2017 -0800

    Add endpoint for CommitFileChange data and create rudimentary view for release overview

diff --git a/src/sentry/api/endpoints/filechange.py b/src/sentry/api/endpoints/filechange.py
new file mode 100644
index 0000000000..d30442fc9f
--- /dev/null
+++ b/src/sentry/api/endpoints/filechange.py
@@ -0,0 +1,51 @@
+from __future__ import absolute_import
+
+from sentry.api.base import DocSection
+from sentry.api.bases.project import ProjectEndpoint, ProjectReleasePermission
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.serializers import serialize
+from sentry.models import CommitFileChange, Release, ReleaseCommit
+from rest_framework.response import Response
+
+
+class CommitFileChangeEndpoint(ProjectEndpoint):
+    doc_section = DocSection.RELEASES
+    permission_classes = (ProjectReleasePermission,)
+
+    def get(self, request, project, version):
+        """
+        List a Release's Commits
+        ````````````````````````
+
+        Retrieve a list of commits for a given release.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          release belongs to.
+        :pparam string project_slug: the slug of the project to list the
+                                     release files of.
+        :pparam string version: the version identifier of the release.
+        :auth: required
+        """
+        try:
+            release = Release.objects.get(
+                organization_id=project.organization_id,
+                projects=project,
+                version=version,
+            )
+        except Release.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        release_commits = list(ReleaseCommit.objects.filter(
+            release=release,
+        ).select_related('commit', 'commit__author'))
+
+        commit_list = [rc.commit for rc in release_commits]
+
+        # should this be a loop + lambda expression?
+
+        queryset = list(CommitFileChange.objects.filter(
+            commit__in=commit_list
+        ))
+
+        context = serialize(queryset, request.user)
+        return Response(context)
diff --git a/src/sentry/api/serializers/models/filechange.py b/src/sentry/api/serializers/models/filechange.py
new file mode 100644
index 0000000000..daa4f1bfe4
--- /dev/null
+++ b/src/sentry/api/serializers/models/filechange.py
@@ -0,0 +1,19 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.api.serializers import Serializer, register
+from sentry.models import CommitFileChange
+
+
+@register(CommitFileChange)
+class CommitFileChangeSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        return {
+            'id': six.text_type(obj.id),
+            'org_id': obj.organization_id,
+            'author': obj.commit.author.name,
+            'commit_message': obj.commit.message,
+            'filename': obj.filename,
+            'type': obj.type
+        }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index d4751c8f53..8e41437837 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -80,6 +80,7 @@ from .endpoints.project_user_reports import ProjectUserReportsEndpoint
 from .endpoints.project_processingissues import ProjectProcessingIssuesEndpoint
 from .endpoints.project_reprocessing import ProjectReprocessingEndpoint
 from .endpoints.release_commits import ReleaseCommitsEndpoint
+from .endpoints.filechange import CommitFileChangeEndpoint
 from .endpoints.project_release_details import ProjectReleaseDetailsEndpoint
 from .endpoints.release_files import ReleaseFilesEndpoint
 from .endpoints.release_file_details import ReleaseFileDetailsEndpoint
@@ -294,6 +295,9 @@ urlpatterns = patterns(
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/releases/(?P<version>[^/]+)/commits/$',
         ReleaseCommitsEndpoint.as_view(),
         name='sentry-api-0-release-commits'),
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/releases/(?P<version>[^/]+)/commitfiles/$',
+        CommitFileChangeEndpoint.as_view(),
+        name='sentry-api-0-release-commits'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/releases/(?P<version>[^/]+)/files/$',
         ReleaseFilesEndpoint.as_view(),
         name='sentry-api-0-release-files'),
diff --git a/src/sentry/static/sentry/app/components/fileChange.jsx b/src/sentry/static/sentry/app/components/fileChange.jsx
new file mode 100644
index 0000000000..f7f3a218bb
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/fileChange.jsx
@@ -0,0 +1,36 @@
+import React from 'react';
+
+import ApiMixin from '../mixins/apiMixin';
+
+// import LoadingError from '../components/loadingError';
+// import LoadingIndicator from '../components/loadingIndicator';
+
+// import {t} from '../locale';
+
+const FileChange = React.createClass({
+  propTypes: {
+    filename: React.PropTypes.string.isRequired,
+    author: React.PropTypes.string.isRequired,
+  },
+
+  mixins: [
+    ApiMixin
+  ],
+
+  getInitialState() {
+    return {
+      loading: true,
+    };
+  },
+
+  render() {
+    let {filename, author} = this.props;
+    return (
+      <li>
+        <div>{filename}{author}</div>
+      </li>
+    );
+  }
+});
+
+export default FileChange;
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index ae4fba96af..4f981ccfad 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -56,6 +56,7 @@ import ReleaseArtifacts from './views/releaseArtifacts';
 import ReleaseCommits from './views/releases/releaseCommits';
 import ReleaseDetails from './views/releaseDetails';
 import ReleaseNewEvents from './views/releaseNewEvents';
+import ReleaseOverview from './views/releases/releaseOverview';
 import RouteNotFound from './views/routeNotFound';
 import SharedGroupDetails from './views/sharedGroupDetails';
 import Stream from './views/stream';
@@ -148,6 +149,7 @@ function routes() {
           <Route path="releases/" component={errorHandler(ProjectReleases)} />
           <Route name="releaseDetails" path="releases/:version/" component={errorHandler(ReleaseDetails)}>
             <IndexRoute component={errorHandler(ReleaseNewEvents)} />
+            <Route path="overview/" component={errorHandler(ReleaseOverview)} />
             <Route path="all-events/" component={errorHandler(ReleaseAllEvents)} />
             <Route path="artifacts/" component={errorHandler(ReleaseArtifacts)} />
             <Route path="commits/" component={errorHandler(ReleaseCommits)}/>
diff --git a/src/sentry/static/sentry/app/views/releaseDetails.jsx b/src/sentry/static/sentry/app/views/releaseDetails.jsx
index 582613e164..af7033897b 100644
--- a/src/sentry/static/sentry/app/views/releaseDetails.jsx
+++ b/src/sentry/static/sentry/app/views/releaseDetails.jsx
@@ -147,6 +147,10 @@ const ReleaseDetails = React.createClass({
                 <ListLink
                   to={`/${orgId}/${projectId}/releases/${encodeURIComponent(release.version)}/commits/`}>{t('Commits')}</ListLink>
               }
+              {(new Set(this.context.organization.features)).has('release-commits') &&
+                <ListLink
+                    to={`/${orgId}/${projectId}/releases/${encodeURIComponent(release.version)}/overview/`}>{t('Overview')}</ListLink>
+              }
             </ul>
           </div>
           {React.cloneElement(this.props.children, {
diff --git a/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx b/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx
new file mode 100644
index 0000000000..720dc35bfe
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx
@@ -0,0 +1,86 @@
+import React from 'react';
+
+import LoadingIndicator from '../../components/loadingIndicator';
+import LoadingError from '../../components/loadingError';
+
+import FileChange from '../../components/fileChange';
+
+import ApiMixin from '../../mixins/apiMixin';
+
+const ReleaseOverview = React.createClass({
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+    };
+  },
+
+  componentDidMount() {
+    let {orgId, projectId, version} = this.props.params;
+
+    let path = `/projects/${orgId}/${projectId}/releases/${version}/commitfiles/`;
+    this.api.request(path, {
+      method: 'GET',
+      data: this.props.location.query,
+      success: (data, _, jqXHR) => {
+        this.setState({
+          error: false,
+          loading: false,
+          fileList: data,
+          pageLinks: jqXHR.getResponseHeader('Link')
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
+  emptyState() {
+    return(
+      <div className="box empty-stream m-y-0">
+        <span className="icon icon-exclamation" />
+        <p>There are no commits associated with this release.</p>
+        {/* Todo: Should we link to repo settings from here?  */}
+      </div>
+    );
+  },
+
+  render() {
+
+    if (this.state.loading)
+      return <LoadingIndicator/>;
+
+    if (this.state.error)
+      return <LoadingError/>;
+
+    let {fileList} = this.state;
+
+    if (!fileList.length)
+      return <this.emptyState/>;
+
+    return (
+      <div className="panel panel-default">
+        <b>Files Changed</b>
+        <ul className="crumbs">
+          {fileList.map(file => {
+            return (
+              <FileChange
+                key={file.id}
+                filename={file.filename}
+                author={file.author}
+                />
+            );
+          })}
+        </ul>
+      </div>
+    );
+  }
+});
+
+export default ReleaseOverview;
\ No newline at end of file
