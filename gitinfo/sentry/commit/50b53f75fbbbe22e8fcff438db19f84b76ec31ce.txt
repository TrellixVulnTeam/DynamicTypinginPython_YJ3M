commit 50b53f75fbbbe22e8fcff438db19f84b76ec31ce
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Mar 19 15:38:49 2020 +0100

    feat(releases): Added basic release stats api (#17529)

diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
index c0c572890a..148baf6121 100644
--- a/src/sentry/api/bases/project.py
+++ b/src/sentry/api/bases/project.py
@@ -1,9 +1,13 @@
 from __future__ import absolute_import
 
+import six
+
 from rest_framework.response import Response
 
 from sentry import roles
 from sentry.api.base import Endpoint
+from sentry.api.utils import get_date_range_from_params, InvalidParams
+from sentry.api.helpers.environments import get_environments
 from sentry.api.exceptions import ResourceDoesNotExist, ProjectMoved
 from sentry.auth.superuser import is_active_superuser
 from sentry.auth.system import is_system_auth
@@ -14,6 +18,10 @@ from .organization import OrganizationPermission
 from .team import has_team_permission
 
 
+class ProjectEventsError(Exception):
+    pass
+
+
 class ProjectPermission(OrganizationPermission):
     scope_map = {
         "GET": ["project:read", "project:write", "project:admin"],
@@ -157,6 +165,22 @@ class ProjectEndpoint(Endpoint):
         kwargs["project"] = project
         return (args, kwargs)
 
+    def get_filter_params(self, request, project, date_filter_optional=False):
+        """Similar to the version on the organization just for a single project."""
+        # get the top level params -- projects, time range, and environment
+        # from the request
+        try:
+            start, end = get_date_range_from_params(request.GET, optional=date_filter_optional)
+        except InvalidParams as e:
+            raise ProjectEventsError(six.text_type(e))
+
+        environments = [env.name for env in get_environments(request, project.organization)]
+        params = {"start": start, "end": end, "project_id": [project.id]}
+        if environments:
+            params["environment"] = environments
+
+        return params
+
     def handle_exception(self, request, exc):
         if isinstance(exc, ProjectMoved):
             response = Response(
diff --git a/src/sentry/api/endpoints/project_release_stats.py b/src/sentry/api/endpoints/project_release_stats.py
new file mode 100644
index 0000000000..b0b4ad972d
--- /dev/null
+++ b/src/sentry/api/endpoints/project_release_stats.py
@@ -0,0 +1,87 @@
+from __future__ import absolute_import
+
+import six
+
+from datetime import timedelta
+from rest_framework.response import Response
+
+from sentry.api.base import DocSection
+from sentry.api.bases.project import ProjectEndpoint, ProjectReleasePermission, ProjectEventsError
+from sentry.api.serializers import serialize
+from sentry.utils.dates import parse_stats_period
+from sentry.snuba.sessions import get_project_release_stats, get_crash_free_breakdown
+
+# Maximum number of results we are willing to fetch.
+# Clients should adapt the interval width based on their
+# display width.
+MAX_POINTS = 4500
+
+
+class ProjectReleaseStatsEndpoint(ProjectEndpoint):
+    doc_section = DocSection.RELEASES
+    permission_classes = (ProjectReleasePermission,)
+
+    def get(self, request, project, version):
+        """
+        Get a Project Release's Stats
+        `````````````````````````````
+
+        Returns the stats of a given release under a project.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          release belongs to.
+        :pparam string project_slug: the slug of the project to list the
+                                     release files of.
+        :pparam string version: the version identifier of the release.
+        :auth: required
+        """
+        stats_type = request.GET.get("type") or "sessions"
+        if stats_type not in ("users", "sessions"):
+            return Response({"detail": "invalid stat"}, status=400)
+
+        try:
+            params = self.get_filter_params(request, project)
+            rollup = self.get_rollup(request, params)
+        except ProjectEventsError as e:
+            return Response({"detail": six.text_type(e)}, status=400)
+
+        stats = get_project_release_stats(
+            project_id=params["project_id"][0],
+            release=version,
+            stat=stats_type,
+            rollup=rollup,
+            start=params["start"],
+            end=params["end"],
+            environments=params.get("environment"),
+        )
+
+        users_breakdown = {}
+        for timespan, data in six.iteritems(
+            get_crash_free_breakdown(
+                project_id=params["project_id"][0],
+                release=version,
+                environments=params.get("environment"),
+            )
+        ):
+            users_breakdown[timespan] = {
+                "totalUsers": data["total_users"],
+                "crashFreeUsers": data["crash_free_users"],
+                "totalSessions": data["total_sessions"],
+                "crashFreeSessions": data["crash_free_sessions"],
+            }
+
+        return Response(serialize({"stats": stats, "usersBreakdown": users_breakdown}), status=200)
+
+    def get_rollup(self, request, params):
+        interval = parse_stats_period(request.GET.get("interval", "24h"))
+        if interval is None:
+            interval = timedelta(hours=1)
+
+        date_range = params["end"] - params["start"]
+        if date_range.total_seconds() / interval.total_seconds() > MAX_POINTS:
+            raise ProjectEventsError(
+                "Your interval and date range would create too many results. "
+                "Use a larger interval, or a smaller date range."
+            )
+
+        return int(interval.total_seconds())
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index e278878acd..77b83f5c23 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -197,6 +197,7 @@ from .endpoints.project_processingissues import (
 from .endpoints.project_release_commits import ProjectReleaseCommitsEndpoint
 from .endpoints.project_release_details import ProjectReleaseDetailsEndpoint
 from .endpoints.project_release_file_details import ProjectReleaseFileDetailsEndpoint
+from .endpoints.project_release_stats import ProjectReleaseStatsEndpoint
 from .endpoints.project_release_files import ProjectReleaseFilesEndpoint
 from .endpoints.project_release_setup import ProjectReleaseSetupCompletionEndpoint
 from .endpoints.project_releases import ProjectReleasesEndpoint
@@ -1301,6 +1302,11 @@ urlpatterns = [
                     ProjectIssuesResolvedInReleaseEndpoint.as_view(),
                     name="sentry-api-0-project-release-resolved",
                 ),
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/releases/(?P<version>[^/]+)/stats/$",
+                    ProjectReleaseStatsEndpoint.as_view(),
+                    name="sentry-api-0-project-release-stats",
+                ),
                 url(
                     r"^(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/releases/(?P<version>[^/]+)/files/$",
                     ProjectReleaseFilesEndpoint.as_view(),
diff --git a/src/sentry/snuba/sessions.py b/src/sentry/snuba/sessions.py
index d93acc0a28..116ceb2f97 100644
--- a/src/sentry/snuba/sessions.py
+++ b/src/sentry/snuba/sessions.py
@@ -8,6 +8,10 @@ from sentry.utils.dates import to_timestamp
 from sentry.snuba.dataset import Dataset
 
 
+def _nan_as_none(val):
+    return None if val != val else val
+
+
 def _get_conditions_and_filter_keys(project_releases, environments):
     conditions = [["release", "IN", list(x[1] for x in project_releases)]]
     if environments is not None:
@@ -90,11 +94,11 @@ def get_project_releases_by_stability(
     return rv
 
 
-def _make_stats(start, rollup, buckets):
+def _make_stats(start, rollup, buckets, default=0):
     rv = []
     start = int(to_timestamp(start) // rollup) * rollup
     for x in range(buckets):
-        rv.append([start, 0])
+        rv.append([start, default])
         start += rollup
     return rv
 
@@ -131,9 +135,6 @@ def get_release_health_data_overview(
     data.
     """
 
-    def _nan_as_none(val):
-        return None if val != val else val
-
     _, summary_start, _ = get_rollup_starts_and_buckets(summary_stats_period or "24h")
     conditions, filter_keys = _get_conditions_and_filter_keys(project_releases, environments)
 
@@ -238,3 +239,90 @@ def get_release_health_data_overview(
             ]
 
     return rv
+
+
+def get_crash_free_breakdown(project_id, release, environments=None):
+    filter_keys = {"project_id": [project_id]}
+    conditions = [["release", "=", release]]
+    if environments is not None:
+        conditions.append(["environment", "IN", environments])
+
+    def _query_stats(start_delta):
+        row = raw_query(
+            dataset=Dataset.Sessions,
+            selected_columns=["users", "users_crashed", "sessions", "sessions_crashed"],
+            start=datetime.now(pytz.utc) - start_delta,
+            conditions=conditions,
+            filter_keys=filter_keys,
+        )["data"][0]
+        return {
+            "total_users": row["users"],
+            "crash_free_users": row["users_crashed"] / float(row["users"]) * 100
+            if row["users"]
+            else None,
+            "total_sessions": row["sessions"],
+            "crash_free_sessions": row["sessions_crashed"] / float(row["sessions"]) * 100
+            if row["sessions"]
+            else None,
+        }
+
+    return {
+        "1d": _query_stats(timedelta(days=1)),
+        "1w": _query_stats(timedelta(days=7)),
+        "2w": _query_stats(timedelta(days=14)),
+        "4w": _query_stats(timedelta(days=28)),
+    }
+
+
+def get_project_release_stats(project_id, release, stat, rollup, start, end, environments=None):
+    assert stat in ("users", "sessions")
+
+    filter_keys = {"project_id": [project_id]}
+    conditions = [["release", "=", release]]
+    if environments is not None:
+        conditions.append(["environment", "IN", environments])
+
+    buckets = int((end - start).total_seconds() / rollup)
+    stats = _make_stats(start, rollup, buckets, default=None)
+
+    for rv in raw_query(
+        dataset=Dataset.Sessions,
+        selected_columns=[
+            "bucketed_started",
+            "release",
+            stat,
+            stat + "_crashed",
+            stat + "_abnormal",
+            stat + "_errored",
+            "duration_quantiles",
+        ],
+        groupby=["bucketed_started", "release", "project_id"],
+        start=start,
+        end=end,
+        rollup=rollup,
+        conditions=conditions,
+        filter_keys=filter_keys,
+    )["data"]:
+        ts = parse_snuba_datetime(rv["bucketed_started"])
+        bucket = int((end - ts).total_seconds() / rollup)
+        stats[bucket][1] = {
+            stat: rv[stat],
+            stat + "_crashed": rv[stat + "_crashed"],
+            stat + "_abnormal": rv[stat + "_abnormal"],
+            stat + "_errored": rv[stat + "_errored"] - rv[stat + "_crashed"],
+            "duration_p50": _nan_as_none(rv["duration_quantiles"][0]),
+            "duration_p90": _nan_as_none(rv["duration_quantiles"][1]),
+        }
+
+    for idx, bucket in enumerate(stats):
+        if bucket[1] is None:
+            stats[idx][1] = {
+                stat: 0,
+                stat + "_crashed": 0,
+                stat + "_abnormal": 0,
+                stat + "_errored": 0,
+                "duration_p50": None,
+                "duration_p90": None,
+            }
+
+    return stats
diff --git a/src/sentry/static/sentry/app/components/charts/areaChart.jsx b/src/sentry/static/sentry/app/components/charts/areaChart.jsx
index 7f43e40d9c..4ddfaa834e 100644
--- a/src/sentry/static/sentry/app/components/charts/areaChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/areaChart.jsx
@@ -19,7 +19,6 @@ class AreaChart extends React.Component {
         series={series.map(({seriesName, data, ...otherSeriesProps}) =>
           AreaSeries({
             stack: stacked ? 'area' : false,
-            ...otherSeriesProps,
             name: seriesName,
             data: data.map(({name, value}) => [name, value]),
             color: '#948BCF',
@@ -27,6 +26,7 @@ class AreaChart extends React.Component {
               color: '#C4BFE9',
               opacity: 1.0,
             },
+            ...otherSeriesProps,
           })
         )}
       />
diff --git a/src/sentry/static/sentry/app/types/echarts.tsx b/src/sentry/static/sentry/app/types/echarts.tsx
index 0d72fcc005..f0c269abd9 100644
--- a/src/sentry/static/sentry/app/types/echarts.tsx
+++ b/src/sentry/static/sentry/app/types/echarts.tsx
@@ -8,6 +8,11 @@ export type SeriesDataUnit = {
 export type Series = {
   seriesName: string;
   data: SeriesDataUnit[];
+  color?: string;
+  areaStyle?: {
+    color: string;
+    opacity: number;
+  };
 };
 
 export type ReactEchartsRef = {
diff --git a/src/sentry/static/sentry/app/utils.tsx b/src/sentry/static/sentry/app/utils.tsx
index 338e7345a8..40368891a8 100644
--- a/src/sentry/static/sentry/app/utils.tsx
+++ b/src/sentry/static/sentry/app/utils.tsx
@@ -140,6 +140,11 @@ export function escape(str: string): string {
 }
 
 export function percent(value: number, totalValue: number): number {
+  // prevent division by zero
+  if (totalValue === 0) {
+    return 0;
+  }
+
   return (value / totalValue) * 100;
 }
 
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/index.tsx
new file mode 100644
index 0000000000..4f97f686b8
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/index.tsx
@@ -0,0 +1,123 @@
+import React from 'react';
+import {InjectedRouter} from 'react-router/lib/Router';
+import {Location} from 'history';
+import styled from '@emotion/styled';
+
+// import ChartZoom from 'app/components/charts/chartZoom';
+import ReleaseSeries from 'app/components/charts/releaseSeries';
+import {Client} from 'app/api';
+import {IconWarning} from 'app/icons';
+import theme from 'app/utils/theme';
+import withApi from 'app/utils/withApi';
+import {GlobalSelection} from 'app/types';
+import TransitionChart from 'app/components/charts/transitionChart';
+import {Panel} from 'app/components/panels';
+import TransparentLoadingMask from 'app/components/charts/components/transparentLoadingMask';
+import ErrorPanel from 'app/components/charts/components/errorPanel';
+import space from 'app/styles/space';
+
+import ReleaseChart from './releaseChart';
+import ReleaseChartRequest from './releaseChartRequest';
+import ReleaseChartControls from './releaseChartControls';
+
+export type YAxis = 'sessions' | 'users' | 'crashFree';
+
+type Props = {
+  api: Client;
+  router: InjectedRouter;
+  location: Location;
+  selection: GlobalSelection;
+  version: string;
+  orgId: string;
+  projectSlug: string;
+};
+
+type State = {
+  summary: React.ReactNode;
+  yAxis: YAxis;
+};
+
+class ReleaseChartContainer extends React.Component<Props, State> {
+  state: State = {
+    summary: '',
+    yAxis: 'sessions',
+  };
+
+  handleYAxisChange = (value: YAxis) => {
+    this.setState({yAxis: value});
+  };
+
+  handleSummaryChange = (value: React.ReactNode) => {
+    this.setState({summary: value});
+  };
+
+  render() {
+    const {api, location, selection, version, orgId, projectSlug} = this.props;
+    const {summary, yAxis} = this.state;
+    const {datetime, projects} = selection;
+    const {utc} = datetime;
+
+    return (
+      <Panel>
+        <ChartWrapper>
+          {/* <ChartZoom router={router} period={period} utc={utc} start={start} end={end}>
+        {zoomRenderProps => ( */}
+          <ReleaseChartRequest
+            api={api}
+            orgId={orgId}
+            projectSlug={projectSlug}
+            version={version}
+            selection={selection}
+            location={location}
+            yAxis={yAxis}
+            onSummaryChange={this.handleSummaryChange}
+          >
+            {({loading, reloading, errored, timeseriesData}) => (
+              <ReleaseSeries utc={utc} projects={projects}>
+                {({releaseSeries}) => {
+                  if (errored) {
+                    return (
+                      <ErrorPanel>
+                        <IconWarning color={theme.gray2} size="lg" />
+                      </ErrorPanel>
+                    );
+                  }
+
+                  return (
+                    <TransitionChart loading={loading} reloading={reloading}>
+                      <React.Fragment>
+                        <TransparentLoadingMask visible={reloading} />
+                        <ReleaseChart
+                          utc={utc}
+                          releaseSeries={releaseSeries}
+                          timeseriesData={timeseriesData}
+                          // zoomRenderProps={zoomRenderProps}
+                          reloading={reloading}
+                          yAxis={yAxis}
+                        />
+                      </React.Fragment>
+                    </TransitionChart>
+                  );
+                }}
+              </ReleaseSeries>
+            )}
+          </ReleaseChartRequest>
+          {/*   )}
+       </ChartZoom> */}
+        </ChartWrapper>
+
+        <ReleaseChartControls
+          summary={summary}
+          yAxis={yAxis}
+          onYAxisChange={this.handleYAxisChange}
+        />
+      </Panel>
+    );
+  }
+}
+
+const ChartWrapper = styled('div')`
+  padding: ${space(1)} ${space(2)};
+`;
+
+export default withApi(ReleaseChartContainer);
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChart.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChart.tsx
new file mode 100644
index 0000000000..c92a3b7682
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChart.tsx
@@ -0,0 +1,92 @@
+import React from 'react';
+import isEqual from 'lodash/isEqual';
+
+import LineChart from 'app/components/charts/lineChart';
+import AreaChart from 'app/components/charts/areaChart';
+import {Series} from 'app/types/echarts';
+import theme from 'app/utils/theme';
+
+import {YAxis} from '.';
+
+type Props = {
+  reloading: boolean;
+  utc: boolean;
+  releaseSeries: Series[];
+  timeseriesData: Series[];
+  // zoomRenderProps: any;
+  yAxis: YAxis;
+};
+
+class ReleaseChart extends React.Component<Props> {
+  shouldComponentUpdate(nextProps: Props) {
+    if (nextProps.reloading || !nextProps.timeseriesData) {
+      return false;
+    }
+
+    if (
+      isEqual(this.props.timeseriesData, nextProps.timeseriesData) &&
+      isEqual(this.props.releaseSeries, nextProps.releaseSeries)
+    ) {
+      return false;
+    }
+
+    return true;
+  }
+
+  render() {
+    const {utc, releaseSeries, timeseriesData, yAxis} = this.props;
+    const crashFreeChart = yAxis === 'crashFree';
+    const Chart = crashFreeChart ? AreaChart : LineChart;
+
+    const legend = {
+      right: 16,
+      top: 4,
+      selectedMode: false,
+      icon: 'circle',
+      itemHeight: 8,
+      itemWidth: 8,
+      itemGap: 12,
+      align: 'left',
+      textStyle: {
+        verticalAlign: 'top',
+        fontSize: 11,
+        fontFamily: 'Rubik',
+      },
+      data: timeseriesData.map(d => d.seriesName),
+    };
+
+    return (
+      <Chart
+        legend={legend}
+        utc={utc}
+        // {zoomRenderProps}
+        series={[...timeseriesData, ...releaseSeries]}
+        isGroupedByDate
+        seriesOptions={{
+          showSymbol: false,
+        }}
+        grid={{
+          left: '24px',
+          right: '24px',
+          top: '32px',
+          bottom: '12px',
+        }}
+        yAxis={
+          crashFreeChart
+            ? {
+                max: 100,
+                scale: true,
+                axisLabel: {
+                  formatter: '{value}%',
+                  color: theme.gray1,
+                },
+              }
+            : undefined
+        }
+        tooltip={crashFreeChart ? {valueFormatter: value => `${value}%`} : undefined}
+      />
+    );
+  }
+}
+
+export default ReleaseChart;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/healthChart.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChartControls.tsx
similarity index 51%
rename from src/sentry/static/sentry/app/views/releasesV2/detail/overview/healthChart.tsx
rename to src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChartControls.tsx
index 210a9f58db..b87b5e761d 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/healthChart.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChartControls.tsx
@@ -1,71 +1,81 @@
 import React from 'react';
 import styled from '@emotion/styled';
-import {withRouter} from 'react-router';
 
-import {Panel} from 'app/components/panels';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
 import DropdownButton from 'app/components/dropdownButton';
 import DropdownControl, {DropdownItem} from 'app/components/dropdownControl';
-import {EventsChart} from 'app/views/events/eventsChart';
-import withOrganization from 'app/utils/withOrganization';
-import {Client} from 'app/api';
 
-// VERY ROUGH MOCK, MORE LIKE VISUAL PLACEHOLDER, this will be changed completely
+import {YAxis} from '.';
 
-const HealthChart = ({organization, router}: any) => (
-  <Panel>
-    <ChartWrapper>
-      <EventsChart
-        {...{
-          api: new Client(),
-          router,
-          query: '',
-          organization,
-          showLegend: true,
-          yAxis: 'count(id)',
-          projects: [],
-          environments: [],
-          period: '24h',
-          utc: false,
-        }}
-      />
-    </ChartWrapper>
+type Props = {
+  summary: React.ReactNode;
+  yAxis: YAxis;
+  onYAxisChange: (value: YAxis) => void;
+};
 
+const ReleaseChartControls = ({summary, yAxis, onYAxisChange}: Props) => {
+  const yAxisOptions = [
+    {
+      value: 'sessions',
+      label: t('Session Count'),
+    },
+    {
+      value: 'users',
+      label: t('User Count'),
+    },
+    {
+      value: 'crashFree',
+      label: t('Crash Free Rate'),
+    },
+  ];
+
+  const getSummaryHeading = () => {
+    switch (yAxis) {
+      case 'users':
+        return t('Total Active Users');
+      case 'crashFree':
+        return t('Average Rate');
+      case 'sessions':
+      default:
+        return t('Total Sessions');
+    }
+  };
+
+  return (
     <ChartControls>
       <InlineContainer>
-        <SectionHeading key="total-label">{t('Total Active Users')}</SectionHeading>
-        <Value key="total-value">{(1234).toLocaleString()}</Value>
+        <SectionHeading key="total-label">{getSummaryHeading()}</SectionHeading>
+        <Value key="total-value">{summary}</Value>
       </InlineContainer>
 
+      {/* TODO(releasesV2): this will be down the road replaced with discover's YAxisSelector */}
       <InlineContainer>
         <SectionHeading>{t('Y-Axis')}</SectionHeading>
         <DropdownControl
-          menuWidth="auto"
           alignRight
+          menuWidth="150px"
           button={({getActorProps}) => (
             <StyledDropdownButton {...getActorProps()} size="zero" isOpen={false}>
-              Active User Count
+              {yAxisOptions.find(option => option.value === yAxis)?.label}
             </StyledDropdownButton>
           )}
         >
-          {[{value: 'activeUserCount', label: t('Active User Count')}].map(
-            (opt, index) => (
-              <DropdownItem
-                key={opt.value}
-                onSelect={() => {}}
-                eventKey={opt.value}
-                isActive={index === 1}
-              >
-                {opt.label}
-              </DropdownItem>
-            )
-          )}
+          {yAxisOptions.map(option => (
+            <DropdownItem
+              key={option.value}
+              onSelect={onYAxisChange}
+              eventKey={option.value}
+              isActive={option.value === yAxis}
+            >
+              {option.label}
+            </DropdownItem>
+          ))}
         </DropdownControl>
       </InlineContainer>
     </ChartControls>
-  </Panel>
-);
+  );
+};
 
 const InlineContainer = styled('div')`
   display: flex;
@@ -73,10 +83,6 @@ const InlineContainer = styled('div')`
   align-items: center;
 `;
 
-const ChartWrapper = styled('div')`
-  padding: ${space(1)} ${space(3)};
-`;
-
 const ChartControls = styled('div')`
   display: flex;
   justify-content: space-between;
@@ -110,4 +116,4 @@ const StyledDropdownButton = styled(DropdownButton)`
   }
 `;
 
-export default withOrganization(withRouter(HealthChart));
+export default ReleaseChartControls;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChartRequest.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChartRequest.tsx
new file mode 100644
index 0000000000..5bb809a460
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChartRequest.tsx
@@ -0,0 +1,258 @@
+import React from 'react';
+import pick from 'lodash/pick';
+import omitBy from 'lodash/omitBy';
+import isEqual from 'lodash/isEqual';
+import meanBy from 'lodash/meanBy';
+import {Location} from 'history';
+
+import {Client} from 'app/api';
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {t, tct} from 'app/locale';
+import {GlobalSelection} from 'app/types';
+import {URL_PARAM} from 'app/constants/globalSelectionHeader';
+import {percent} from 'app/utils';
+import {Series} from 'app/types/echarts';
+
+import {displayCrashFreePercent, getCrashFreePercent} from '../../../utils';
+import {YAxis} from '.';
+
+const omitIgnoredProps = (props: Props) =>
+  omitBy(props, (_, key) =>
+    ['api', 'version', 'orgId', 'projectSlug', 'children'].includes(key)
+  );
+
+type ChartData = {
+  [key: string]: Series;
+};
+
+type RenderProps = {
+  loading: boolean;
+  reloading: boolean;
+  errored: boolean;
+  timeseriesData: Series[];
+};
+
+type Props = {
+  api: Client;
+  version: string;
+  orgId: string;
+  projectSlug: string;
+  selection: GlobalSelection;
+  location: Location;
+  yAxis: YAxis;
+  onSummaryChange: (summary: React.ReactNode) => void;
+  children: (renderProps: RenderProps) => React.ReactNode;
+};
+type State = {
+  reloading: boolean;
+  errored: boolean;
+  data: Series[] | null;
+};
+
+class ReleaseChartRequest extends React.Component<Props, State> {
+  state = {
+    reloading: false,
+    errored: false,
+    data: null,
+  };
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  componentDidUpdate(prevProps: Props) {
+    if (isEqual(omitIgnoredProps(prevProps), omitIgnoredProps(this.props))) {
+      return;
+    }
+    this.fetchData();
+  }
+
+  componentWillUnmount() {
+    this.unmounting = true;
+  }
+
+  private unmounting: boolean = false;
+
+  fetchData = async () => {
+    let data: Series[] | null;
+    const {yAxis} = this.props;
+
+    this.setState(state => ({
+      reloading: state.data !== null,
+      errored: false,
+    }));
+
+    try {
+      data = await (yAxis === 'crashFree' ? this.fetchRateData : this.fetchCountData)();
+    } catch {
+      addErrorMessage(t('Error loading chart data'));
+      data = null;
+      this.setState({
+        errored: true,
+      });
+    }
+
+    if (this.unmounting) {
+      return;
+    }
+
+    this.setState({
+      reloading: false,
+      data,
+    });
+  };
+
+  fetchCountData = async () => {
+    const {api, yAxis} = this.props;
+
+    const response = await api.requestPromise(this.statsPath, {
+      query: {
+        ...this.baseQueryParams,
+        type: yAxis,
+      },
+    });
+
+    return this.transformCountData(response.stats, yAxis);
+  };
+
+  fetchRateData = async () => {
+    const {api} = this.props;
+
+    const [userResponse, sessionResponse] = await Promise.all([
+      api.requestPromise(this.statsPath, {
+        query: {
+          ...this.baseQueryParams,
+          type: 'users',
+        },
+      }),
+      api.requestPromise(this.statsPath, {
+        query: {
+          ...this.baseQueryParams,
+          type: 'sessions',
+        },
+      }),
+    ]);
+
+    return this.transformRateData(userResponse.stats, sessionResponse.stats);
+  };
+
+  get statsPath() {
+    const {orgId, projectSlug, version} = this.props;
+
+    return `/projects/${orgId}/${projectSlug}/releases/${version}/stats/`;
+  }
+
+  get baseQueryParams() {
+    const {location} = this.props;
+
+    return pick(location.query, [...Object.values(URL_PARAM)]);
+  }
+
+  transformCountData(data, yAxis: string): Series[] {
+    let summary = 0;
+    // here we can configure colors of the chart
+    const chartData: ChartData = {
+      crashed: {
+        seriesName: t('Crashed'),
+        data: [],
+      },
+      abnormal: {
+        seriesName: t('Abnormal'),
+        data: [],
+      },
+      errored: {
+        seriesName: t('Errored'),
+        data: [],
+      },
+      total: {
+        seriesName: t('Total'),
+        data: [],
+      },
+    };
+
+    data.forEach(entry => {
+      const [timeframe, values] = entry;
+      const date = timeframe * 1000;
+      summary += values[yAxis];
+      chartData.crashed.data.push({name: date, value: values[`${yAxis}_crashed`]});
+      chartData.abnormal.data.push({name: date, value: values[`${yAxis}_abnormal`]});
+      chartData.errored.data.push({name: date, value: values[`${yAxis}_errored`]});
+      chartData.total.data.push({name: date, value: values[yAxis]});
+    });
+
+    this.props.onSummaryChange(summary.toLocaleString());
+
+    return Object.values(chartData);
+  }
+
+  transformRateData(users, sessions) {
+    const chartData: ChartData = {
+      users: {
+        seriesName: t('Crash Free Users'),
+        data: [],
+        color: '#FF6969',
+        // TODO(releasesV2): tweak these 4 hex colors
+        areaStyle: {
+          color: '#FA4747',
+          opacity: 0.5,
+        },
+      },
+      sessions: {
+        seriesName: t('Crash Free Sessions'),
+        data: [],
+        color: '#948BCF',
+        areaStyle: {
+          color: '#C4BFE9',
+          opacity: 0.5,
+        },
+      },
+    };
+
+    const calculateDatePercentage = (data, subject) => {
+      const percentageData = data.map(entry => {
+        const [timeframe, values] = entry;
+        const date = timeframe * 1000;
+
+        const crashFreePercent = getCrashFreePercent(
+          100 - percent(values[`${subject}_crashed`], values[subject])
+        );
+
+        return {name: date, value: crashFreePercent};
+      });
+
+      const averagePercent = displayCrashFreePercent(meanBy(percentageData, 'value'));
+
+      return {averagePercent, percentageData};
+    };
+
+    const usersPercentages = calculateDatePercentage(users, 'users');
+    chartData.users.data = usersPercentages.percentageData;
+
+    const sessionsPercentages = calculateDatePercentage(sessions, 'sessions');
+    chartData.sessions.data = sessionsPercentages.percentageData;
+
+    this.props.onSummaryChange(
+      tct('[usersPercent] users, [sessionsPercent] sessions', {
+        usersPercent: usersPercentages.averagePercent,
+        sessionsPercent: sessionsPercentages.averagePercent,
+      })
+    );
+
+    return Object.values(chartData);
+  }
+
+  render() {
+    const {children} = this.props;
+    const {data, reloading, errored} = this.state;
+    const loading = data === null;
+
+    return children({
+      loading,
+      reloading,
+      errored,
+      timeseriesData: data ?? [],
+    });
+  }
+}
+
+export default ReleaseChartRequest;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx
index 8d72c1f679..f9079eaff6 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx
@@ -1,6 +1,6 @@
 import React from 'react';
 import styled from '@emotion/styled';
-import {Params} from 'react-router/lib/Router';
+import {Params, InjectedRouter} from 'react-router/lib/Router';
 import {Location} from 'history';
 
 import withOrganization from 'app/utils/withOrganization';
@@ -8,54 +8,65 @@ import withGlobalSelection from 'app/utils/withGlobalSelection';
 import {Organization, GlobalSelection} from 'app/types';
 import space from 'app/styles/space';
 
-import HealthChart from './healthChart';
+import HealthChart from './chart';
 import Issues from './issues';
 import CommitAuthorBreakdown from './commitAuthorBreakdown';
 import ProjectReleaseDetails from './projectReleaseDetails';
 import TotalCrashFreeUsers from './totalCrashFreeUsers';
 import SessionDuration from './sessionDuration';
-import {ReleaseContext} from '../index';
+
+import {ReleaseContext} from '..';
 
 type Props = {
   organization: Organization;
   params: Params;
   location: Location;
   selection: GlobalSelection;
+  router: InjectedRouter;
 };
 
-const ReleaseOverview = ({organization, params, selection}: Props) => {
-  const projectId = selection.projects[0];
-
-  return (
-    <ReleaseContext.Consumer>
-      {release => {
-        const {commitCount, version, projects} = release!; // if release is undefined, this will not be rendered at all
-        const projectSlug = projects.find(p => p.id === projectId)?.slug;
-        return (
-          <ContentBox>
-            <Main>
-              <HealthChart />
-              <Issues orgId={organization.slug} version={params.release} />
-            </Main>
-            <Sidebar>
-              {commitCount > 0 && projectSlug && (
-                <CommitAuthorBreakdown
-                  version={version}
-                  orgId={organization.slug}
-                  projectSlug={projectSlug}
-                  commitCount={commitCount}
-                />
-              )}
-              <ProjectReleaseDetails release={release!} />
-              <TotalCrashFreeUsers />
-              <SessionDuration />
-            </Sidebar>
-          </ContentBox>
-        );
-      }}
-    </ReleaseContext.Consumer>
-  );
-};
+const ReleaseOverview = ({organization, params, selection, router, location}: Props) => (
+  <ReleaseContext.Consumer>
+    {release => {
+      const {commitCount, version, projects} = release!; // if release is undefined, this will not be rendered at all
+      const project = projects.find(p => p.id === selection.projects[0]);
+      // TODO(releasesV2): we will handle this with locked projects later
+      if (!project) {
+        return null;
+      }
+      return (
+        <ContentBox>
+          <Main>
+            {project.healthData?.hasHealthData && (
+              <HealthChart
+                version={version}
+                orgId={organization.slug}
+                projectSlug={project.slug}
+                router={router}
+                selection={selection}
+                location={location}
+              />
+            )}
+            <Issues orgId={organization.slug} version={params.release} />
+          </Main>
+          <Sidebar>
+            {commitCount > 0 && (
+              <CommitAuthorBreakdown
+                version={version}
+                orgId={organization.slug}
+                commitCount={commitCount}
+                projectSlug={project.slug}
+              />
+            )}
+            <ProjectReleaseDetails release={release!} />
+            <TotalCrashFreeUsers />
+            <SessionDuration />
+          </Sidebar>
+        </ContentBox>
+      );
+    }}
+  </ReleaseContext.Consumer>
+);
 
 const ContentBox = styled('div')`
   padding: ${space(4)};
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/styles.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/styles.tsx
index 3baf3cfd01..8d25b3bbaa 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/styles.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/styles.tsx
@@ -5,7 +5,7 @@ import space from 'app/styles/space';
 export const SectionHeading = styled('h4')`
   color: ${p => p.theme.gray3};
   font-size: ${p => p.theme.fontSizeMedium};
-  margin: ${space(1)} 0;
+  margin: 0 0 ${space(1.5)} 0;
   padding-right: ${space(1)};
   line-height: 1.2;
 `;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/utils/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/utils/index.tsx
index 1688aa3d8b..8782e5f2d4 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/utils/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/utils/index.tsx
@@ -1,11 +1,19 @@
 import round from 'lodash/round';
 
+export const getCrashFreePercent = (
+  percent: number,
+  decimalThreshold = 95,
+  decimalPlaces = 3
+): number => {
+  return round(percent, percent > decimalThreshold ? decimalPlaces : 0);
+};
+
 export const displayCrashFreePercent = (
   percent: number,
   decimalThreshold = 95,
   decimalPlaces = 3
 ): string => {
-  const rounded = round(percent, percent > decimalThreshold ? decimalPlaces : 0);
+  const rounded = getCrashFreePercent(percent, decimalThreshold, decimalPlaces);
 
   return `${rounded}%`;
 };
