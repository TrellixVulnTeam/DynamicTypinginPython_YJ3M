commit 52f8515d8990f6845304d3f9decb6481a5c77a35
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jun 4 15:01:11 2010 -0700

    Make variables act as module locals for settings. Some tests for USE_LOGGING

diff --git a/djangodblog/manager.py b/djangodblog/manager.py
index a9ede497b3..8bfe05aad8 100644
--- a/djangodblog/manager.py
+++ b/djangodblog/manager.py
@@ -20,9 +20,9 @@ from django.db.models.query import QuerySet
 from django.utils.encoding import smart_unicode
 from django.views.debug import ExceptionReporter
 
-from djangodblog.settings import *
+from djangodblog import settings
 
-assert not DATABASE_USING or django.VERSION >= (1, 2), 'The `DBLOG_DATABASE_USING` setting requires Django >= 1.2'
+assert not settings.DATABASE_USING or django.VERSION >= (1, 2), 'The `DBLOG_DATABASE_USING` setting requires Django >= 1.2'
 
 logger = logging.getLogger('dblog')
 
@@ -31,8 +31,8 @@ class DBLogManager(models.Manager):
 
     def get_query_set(self):
         qs = super(DBLogManager, self).get_query_set()
-        if DATABASE_USING:
-            qs = qs.using(DATABASE_USING)
+        if settings.DATABASE_USING:
+            qs = qs.using(settings.DATABASE_USING)
         return qs
 
     def _create(self, **defaults):
diff --git a/djangodblog/middleware.py b/djangodblog/middleware.py
index e28d8a3310..03090a769a 100644
--- a/djangodblog/middleware.py
+++ b/djangodblog/middleware.py
@@ -1,21 +1,23 @@
+from django.conf import settings as dj_settings
 from django.db import transaction
 from django.http import Http404
 
 from djangodblog.models import Error
-from djangodblog.settings import *
+from djangodblog import settings
 
 import logging
+import sys
 
 __all__ = ('DBLogMiddleware',)
 
 class DBLogMiddleware(object):
     @transaction.commit_on_success
     def process_exception(self, request, exception):
-        if not CATCH_404_ERRORS \
+        if not settings.CATCH_404_ERRORS \
                 and isinstance(exception, Http404):                
             return
 
-        if settings.DEBUG or getattr(exception, 'skip_dblog', False):
+        if dj_settings.DEBUG or getattr(exception, 'skip_dblog', False):
             return
 
         if transaction.is_dirty():
@@ -30,7 +32,7 @@ class DBLogMiddleware(object):
             )
         )
 
-        if USE_LOGGING:
-            logging.getLogger('dblog').exception(exception, extra=extra)
+        if settings.USE_LOGGING:
+            logging.getLogger('dblog').critical(exception, exc_info=sys.exc_info(), extra=extra)
         else:
             Error.objects.create_from_exception(**extra)        
diff --git a/djangodblog/routers.py b/djangodblog/routers.py
index 57d1d39ba9..668b38fb0d 100644
--- a/djangodblog/routers.py
+++ b/djangodblog/routers.py
@@ -1,15 +1,15 @@
-from djangodblog.settings import *
+from djangodblog import settings
 
 class DBLogRouter(object):
     def db_for_write(self, model, **hints):
         if model._meta.app_label == 'djangodblog':
-            return DATABASE_USING
+            return settings.DATABASE_USING
 
     def db_for_read(self, model, **hints):
         return self.db_for_write(model, **hints)
 
     def allow_syncdb(self, db, model):
-        dblog_db = DATABASE_USING
+        dblog_db = settings.DATABASE_USING
         if not dblog_db:
             return None
         if model._meta.app_label == 'djangodblog' and db != dblog_db:
diff --git a/djangodblog/tests.py b/djangodblog/tests.py
index 3020e5084a..bc31fe6dbc 100644
--- a/djangodblog/tests.py
+++ b/djangodblog/tests.py
@@ -1,15 +1,15 @@
 # -*- coding: utf-8 -*-
 
-from django.test.client import Client
-from django.test import TestCase
 from django.core.handlers.wsgi import WSGIRequest
-from django.conf import settings
 from django.db import models
+from django.test.client import Client
+from django.test import TestCase
 from django.utils.encoding import smart_unicode
 
-from djangodblog.models import Error, ErrorBatch
 from djangodblog.middleware import DBLogMiddleware
+from djangodblog.models import Error, ErrorBatch
 from djangodblog.utils import JSONDictField
+from djangodblog import settings
 
 import logging
 import sys
@@ -53,7 +53,7 @@ class JSONDictTestCase(TestCase):
 
 class DBLogTestCase(TestCase):
     def setUp(self):
-        settings.DBLOG_DATABASE_USING = None
+        settings.DATABASE_USING = None
         self._handlers = None
         self._level = None
     
@@ -207,7 +207,7 @@ class DBLogTestCase(TestCase):
         self.assertEquals(last.message, 'This is an error')
         
     def testAlternateDatabase(self):
-        settings.DBLOG_DATABASE_USING = 'default'
+        settings.DATABASE_USING = 'default'
         
         Error.objects.all().delete()
         ErrorBatch.objects.all().delete()
@@ -227,7 +227,7 @@ class DBLogTestCase(TestCase):
         self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, smart_unicode(exc))
 
-        settings.DBLOG_DATABASE = None
+        settings.DATABASE_USING = None
     
     def testIncorrectUnicode(self):
         self.setUpHandler()
@@ -285,4 +285,43 @@ class DBLogTestCase(TestCase):
         # Fix: #6 solves URLs > 200 characters
         error = Error.objects.create_from_text('hello world', url='a'*210)
         self.assertEquals(error.url, 'a'*200)
-        self.assertEquals(error.data['url'], 'a'*210)
\ No newline at end of file
+        self.assertEquals(error.data['url'], 'a'*210)
+    
+    def testUseLogging(self):
+        Error.objects.all().delete()
+        ErrorBatch.objects.all().delete()
+        
+        request = RF.get("/", REMOTE_ADDR="127.0.0.1:8000")
+
+        try:
+            Error.objects.get(id=999999999)
+        except Error.DoesNotExist, exc:
+            DBLogMiddleware().process_exception(request, exc)
+        else:
+            self.fail('Unable to create `Error` entry.')
+        
+        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        self.assertEquals(cur, (1, 1), 'Assumed logs failed to save. %s' % (cur,))
+        last = Error.objects.all().order_by('-id')[0:1].get()
+        self.assertEquals(last.logger, 'root')
+        self.assertEquals(last.class_name, 'DoesNotExist')
+        self.assertEquals(last.level, logging.ERROR)
+        self.assertEquals(last.message, smart_unicode(exc))
+        
+        settings.USE_LOGGING = True
+        
+        logger = logging.getLogger('dblog')
+        for h in logger.handlers:
+            logger.removeHandler(h)
+        
+        try:
+            Error.objects.get(id=999999999)
+        except Error.DoesNotExist, exc:
+            DBLogMiddleware().process_exception(request, exc)
+        else:
+            self.fail('Unable to create `Error` entry.')
+        
+        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        self.assertEquals(cur, (1, 1), 'Assumed logs failed to save. %s' % (cur,))
+        
+        settings.USE_LOGGING = False
\ No newline at end of file
