commit 052ea9ca66ace307691032f82bb9b13cd58db1f0
Author: Nola Chen <chen.no@husky.neu.edu>
Date:   Mon Jan 6 14:19:40 2020 -0800

    fix(app-platform): fix creation flow bugs with unique names (#16089)

diff --git a/src/sentry/api/endpoints/sentry_apps.py b/src/sentry/api/endpoints/sentry_apps.py
index 61f8554a35..64d7f53f8d 100644
--- a/src/sentry/api/endpoints/sentry_apps.py
+++ b/src/sentry/api/endpoints/sentry_apps.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from rest_framework.response import Response
+from rest_framework.serializers import ValidationError
 
 import logging
 
@@ -87,9 +88,14 @@ class SentryAppsEndpoint(SentryAppsBaseEndpoint):
             data["is_alertable"] = data["isAlertable"]
             data["verify_install"] = data["verifyInstall"]
             data["allowed_origins"] = data["allowedOrigins"]
+            data["is_internal"] = data.get("isInternal")
 
             creator = InternalCreator if data.get("isInternal") else Creator
-            sentry_app = creator.run(request=request, **data)
+            try:
+                sentry_app = creator.run(request=request, **data)
+            except ValidationError as e:
+                # we generate and validate the slug here instead of the serializer since the slug never changes
+                return Response(e.detail, status=400)
 
             return Response(serialize(sentry_app, access=request.access), status=201)
 
diff --git a/src/sentry/api/serializers/rest_framework/sentry_app.py b/src/sentry/api/serializers/rest_framework/sentry_app.py
index a10fb1dc8d..c1d2ea3750 100644
--- a/src/sentry/api/serializers/rest_framework/sentry_app.py
+++ b/src/sentry/api/serializers/rest_framework/sentry_app.py
@@ -5,12 +5,15 @@ from jsonschema.exceptions import ValidationError as SchemaValidationError
 from rest_framework import serializers
 from rest_framework.serializers import Serializer, ValidationError
 
-from django.template.defaultfilters import slugify
 from sentry.api.serializers.rest_framework import ListField
 from sentry.api.serializers.rest_framework.base import camel_to_snake_case
 from sentry.api.validators.sentry_apps.schema import validate_ui_element_schema
-from sentry.models import ApiScopes, SentryApp
-from sentry.models.sentryapp import VALID_EVENT_RESOURCES, REQUIRED_EVENT_PERMISSIONS
+from sentry.models import ApiScopes
+from sentry.models.sentryapp import (
+    VALID_EVENT_RESOURCES,
+    REQUIRED_EVENT_PERMISSIONS,
+    UUID_CHARS_IN_SLUG,
+)
 
 
 class ApiScopesField(serializers.Field):
@@ -100,16 +103,9 @@ class SentryAppSerializer(Serializer):
         return get_current_value
 
     def validate_name(self, value):
-        if not value:
-            return value
-
-        queryset = SentryApp.with_deleted.filter(slug=slugify(value))
-
-        if self.instance:
-            queryset = queryset.exclude(id=self.instance.id)
-
-        if queryset.exists():
-            raise ValidationError(u"Name {} is already taken, please use another.".format(value))
+        max_length = 64 - UUID_CHARS_IN_SLUG - 1  # -1 comes from the - before the UUID bit
+        if len(value) > max_length:
+            raise ValidationError("Cannot exceed %d characters" % max_length)
         return value
 
     def validate_allowedOrigins(self, value):
diff --git a/src/sentry/mediators/sentry_apps/creator.py b/src/sentry/mediators/sentry_apps/creator.py
index 8caac3132f..2fef1dafdb 100644
--- a/src/sentry/mediators/sentry_apps/creator.py
+++ b/src/sentry/mediators/sentry_apps/creator.py
@@ -4,6 +4,7 @@ import six
 
 from collections import Iterable
 from django.db import IntegrityError, transaction
+from rest_framework.serializers import ValidationError
 
 from sentry import analytics
 from sentry.mediators import Mediator, Param
@@ -15,6 +16,8 @@ from sentry.models import (
     SentryAppComponent,
     User,
 )
+from sentry.constants import SentryAppStatus
+from sentry.models.sentryapp import generate_slug, default_uuid
 
 
 class Creator(Mediator):
@@ -34,8 +37,10 @@ class Creator(Mediator):
     allowed_origins = Param(Iterable, default=lambda self: [])
     request = Param("rest_framework.request.Request", required=False)
     user = Param("sentry.models.User")
+    is_internal = Param(bool)
 
     def call(self):
+        self.slug = self._generate_and_validate_slug()
         self.proxy = self._create_proxy_user()
         self.api_app = self._create_api_application()
         self.sentry_app = self._create_sentry_app()
@@ -43,8 +48,24 @@ class Creator(Mediator):
         self._create_integration_feature()
         return self.sentry_app
 
+    def _generate_and_validate_slug(self):
+        slug = generate_slug(self.name, is_internal=self.is_internal)
+
+        # validate globally unique slug
+        queryset = SentryApp.with_deleted.filter(slug=slug)
+
+        if queryset.exists():
+            # In reality, the slug is taken but it's determined by the name field
+            raise ValidationError(
+                {"name": [u"Name {} is already taken, please use another.".format(self.name)]}
+            )
+        return slug
+
     def _create_proxy_user(self):
-        return User.objects.create(username=self.name.lower(), is_sentry_app=True)
+        # need a proxy user name that will always be unique
+        return User.objects.create(
+            username=u"{}-{}".format(self.slug, default_uuid()), is_sentry_app=True
+        )
 
     def _create_api_application(self):
         return ApiApplication.objects.create(
@@ -54,21 +75,27 @@ class Creator(Mediator):
     def _create_sentry_app(self):
         from sentry.mediators.service_hooks.creator import expand_events
 
-        return SentryApp.objects.create(
-            name=self.name,
-            author=self.author,
-            application_id=self.api_app.id,
-            owner_id=self.organization.id,
-            proxy_user_id=self.proxy.id,
-            scope_list=self.scopes,
-            events=expand_events(self.events),
-            schema=self.schema or {},
-            webhook_url=self.webhook_url,
-            redirect_url=self.redirect_url,
-            is_alertable=self.is_alertable,
-            verify_install=self.verify_install,
-            overview=self.overview,
-        )
+        kwargs = {
+            "name": self.name,
+            "slug": self.slug,
+            "author": self.author,
+            "application_id": self.api_app.id,
+            "owner_id": self.organization.id,
+            "proxy_user_id": self.proxy.id,
+            "scope_list": self.scopes,
+            "events": expand_events(self.events),
+            "schema": self.schema or {},
+            "webhook_url": self.webhook_url,
+            "redirect_url": self.redirect_url,
+            "is_alertable": self.is_alertable,
+            "verify_install": self.verify_install,
+            "overview": self.overview,
+        }
+
+        if self.is_internal:
+            kwargs["status"] = SentryAppStatus.INTERNAL
+
+        return SentryApp.objects.create(**kwargs)
 
     def _create_ui_components(self):
         schema = self.schema or {}
diff --git a/src/sentry/mediators/sentry_apps/internal_creator.py b/src/sentry/mediators/sentry_apps/internal_creator.py
index 325e1adafe..8489096994 100644
--- a/src/sentry/mediators/sentry_apps/internal_creator.py
+++ b/src/sentry/mediators/sentry_apps/internal_creator.py
@@ -4,7 +4,6 @@ import six
 
 from collections import Iterable
 
-from sentry.constants import SentryAppStatus
 from sentry.mediators import Mediator, Param
 from sentry.models import AuditLogEntryEvent
 from .creator import Creator as SentryAppCreator
@@ -31,8 +30,8 @@ class InternalCreator(Mediator):
     def call(self):
         # SentryAppCreator expects an author so just set it to the org name
         self.kwargs["author"] = self.organization.name
+        self.kwargs["is_internal"] = True
         self.sentry_app = SentryAppCreator.run(**self.kwargs)
-        self.sentry_app.status = SentryAppStatus.INTERNAL
         self.sentry_app.verify_install = False
         self.sentry_app.save()
 
diff --git a/src/sentry/models/sentryapp.py b/src/sentry/models/sentryapp.py
index 53679e61a0..4f148623a2 100644
--- a/src/sentry/models/sentryapp.py
+++ b/src/sentry/models/sentryapp.py
@@ -2,10 +2,8 @@ from __future__ import absolute_import
 
 import six
 import uuid
-import hmac
 import itertools
-import hashlib
-import re
+import hmac
 
 from django.db import models
 from django.utils import timezone
@@ -51,11 +49,22 @@ VALID_EVENTS = tuple(itertools.chain(*EVENT_EXPANSION.values()))
 
 MASKED_VALUE = "*" * 64
 
+UUID_CHARS_IN_SLUG = 6
+
 
 def default_uuid():
     return six.binary_type(uuid.uuid4())
 
 
+def generate_slug(name, is_internal=False):
+    slug = slugify(name)
+    # for internal, add some uuid to make it unique
+    if is_internal:
+        slug = u"{}-{}".format(slug, default_uuid()[:UUID_CHARS_IN_SLUG])
+
+    return slug
+
+
 class SentryApp(ParanoidModel, HasApiScopes):
     __core__ = True
 
@@ -127,30 +136,12 @@ class SentryApp(ParanoidModel, HasApiScopes):
         return self.status == SentryAppStatus.INTERNAL
 
     def save(self, *args, **kwargs):
-        self._set_slug()
         self.date_updated = timezone.now()
         return super(SentryApp, self).save(*args, **kwargs)
 
     def is_installed_on(self, organization):
         return SentryAppInstallation.objects.filter(organization=organization).exists()
 
-    def _set_slug(self):
-        """
-        Matches ``name``, but in lowercase, dash form.
-
-        >>> self._set_slug('My Cool App')
-        >>> self.slug
-        my-cool-app
-        """
-        if not self.slug:
-            self.slug = slugify(self.name)
-
-        if self.is_internal and not self._has_internal_slug():
-            self.slug = u"{}-{}".format(self.slug, hashlib.sha1(self.owner.slug).hexdigest()[0:6])
-
-    def _has_internal_slug(self):
-        return re.match(r"\w+-[0-9a-zA-Z]+", self.slug)
-
     def build_signature(self, body):
         secret = self.application.client_secret
         return hmac.new(
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index 61f6756104..8cc09746b1 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -627,7 +627,7 @@ class Factories(object):
 
     @staticmethod
     def create_sentry_app(**kwargs):
-        app = sentry_apps.Creator.run(**Factories._sentry_app_kwargs(**kwargs))
+        app = sentry_apps.Creator.run(is_internal=False, **Factories._sentry_app_kwargs(**kwargs))
 
         if kwargs.get("published"):
             app.update(status=SentryAppStatus.PUBLISHED)
@@ -636,7 +636,9 @@ class Factories(object):
 
     @staticmethod
     def create_internal_integration(**kwargs):
-        return sentry_apps.InternalCreator.run(**Factories._sentry_app_kwargs(**kwargs))
+        return sentry_apps.InternalCreator.run(
+            is_internal=True, **Factories._sentry_app_kwargs(**kwargs)
+        )
 
     @staticmethod
     def create_internal_integration_token(install, **kwargs):
diff --git a/tests/sentry/api/endpoints/test_sentry_app_details.py b/tests/sentry/api/endpoints/test_sentry_app_details.py
index faa7367f1b..f13c0a9b82 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_details.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_details.py
@@ -126,6 +126,7 @@ class UpdateSentryAppDetailsTest(SentryAppDetailsTest):
 
     def test_update_unpublished_app(self):
         self.login_as(user=self.user)
+        slug = self.unpublished_app.slug
         url = reverse("sentry-api-0-sentry-app-details", args=[self.unpublished_app.slug])
 
         response = self.client.put(
@@ -141,12 +142,13 @@ class UpdateSentryAppDetailsTest(SentryAppDetailsTest):
 
         assert response.status_code == 200
         assert response.data["name"] == "NewName"
+        assert response.data["slug"] == slug
         assert response.data["scopes"] == ["event:read"]
         assert response.data["events"] == set(["issue"])
         assert response.data["uuid"] == self.unpublished_app.uuid
         assert response.data["webhookUrl"] == "https://newurl.com"
 
-    def test_cannot_update_name_with_non_unique_slug(self):
+    def test_can_update_name_with_non_unique_name(self):
         from sentry.mediators import sentry_apps
 
         self.login_as(user=self.user)
@@ -155,8 +157,7 @@ class UpdateSentryAppDetailsTest(SentryAppDetailsTest):
         sentry_apps.Destroyer.run(sentry_app=sentry_app, user=self.user)
 
         response = self.client.put(self.url, data={"name": sentry_app.name}, format="json")
-        assert response.status_code == 400
-        assert response.data == {"name": ["Name Foo Bar is already taken, please use another."]}
+        assert response.status_code == 200
 
     def test_cannot_update_events_without_permissions(self):
         self.login_as(user=self.user)
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index d53514479c..339ad48208 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -18,6 +18,7 @@ from sentry.models import (
     OrganizationMember,
 )
 from sentry.models.sentryapp import MASKED_VALUE
+from sentry.mediators import sentry_apps
 
 
 class SentryAppsTest(APITestCase):
@@ -309,9 +310,7 @@ class PostSentryAppsTest(SentryAppsTest):
         assert response.status_code == 201, response.content
         assert six.viewitems(expected) <= six.viewitems(json.loads(response.content))
 
-    def test_non_unique_app_slug(self):
-        from sentry.mediators import sentry_apps
-
+    def test_non_unique_app_slug_fails(self):
         self.login_as(user=self.user)
         sentry_app = self.create_sentry_app(name="Foo Bar", organization=self.org)
         sentry_apps.Destroyer.run(sentry_app=sentry_app, user=self.user)
@@ -319,6 +318,23 @@ class PostSentryAppsTest(SentryAppsTest):
         assert response.status_code == 400
         assert response.data == {"name": ["Name Foo Bar is already taken, please use another."]}
 
+    def test_same_name_internal_integration(self):
+        self.create_project(organization=self.org)
+        self.login_as(user=self.user)
+        sentry_app = self.create_internal_integration(name="Foo Bar", organization=self.org)
+        response = self._post(**{"name": sentry_app.name})
+        assert response.status_code == 201
+        assert response.data["name"] == sentry_app.name
+        assert response.data["slug"] != sentry_app.slug
+
+    def test_long_name_internal_integration(self):
+        self.create_project(organization=self.org)
+        self.login_as(user=self.user)
+        kwargs = {"name": "k" * 58}
+        response = self._post(**kwargs)
+        assert response.status_code == 400
+        assert response.data == {"name": ["Cannot exceed 57 characters"]}
+
     def test_invalid_with_missing_webhool_url_scheme(self):
         self.login_as(user=self.user)
         kwargs = {"webhookUrl": "example.com"}
@@ -539,6 +555,26 @@ class PostSentryAppsTest(SentryAppsTest):
             ]
         }
 
+    def test_create_internal_integration_with_non_globally_unique_name(self):
+        # Internal integration names should only need to be unique within an organization
+        self.login_as(user=self.user)
+        self.create_project(organization=self.org)
+
+        other_org = self.create_organization()
+        other_org_integration = self.create_sentry_app(name="Foo Bar", organization=other_org)
+
+        response = self._post(name=other_org_integration.name, isInternal=True)
+        assert response.status_code == 201
+
+        other_org = self.create_organization()
+        self.create_project(organization=other_org)
+        other_org_internal_integration = self.create_internal_integration(
+            name="Foo Bar 2", organization=other_org
+        )
+
+        response = self._post(name=other_org_internal_integration.name, isInternal=True)
+        assert response.status_code == 201
+
     def _post(self, **kwargs):
         body = {
             "name": "MyApp",
diff --git a/tests/sentry/mediators/sentry_apps/test_creator.py b/tests/sentry/mediators/sentry_apps/test_creator.py
index df45f855fb..bcbd7d0edc 100644
--- a/tests/sentry/mediators/sentry_apps/test_creator.py
+++ b/tests/sentry/mediators/sentry_apps/test_creator.py
@@ -28,23 +28,28 @@ class TestCreator(TestCase):
             scopes=("project:read",),
             webhook_url="http://example.com",
             schema={"elements": [self.create_issue_link_schema()]},
+            is_internal=False,
         )
 
+    def test_slug(self):
+        app = self.creator.call()
+        assert app.slug == "nulldb"
+
     def test_creates_proxy_user(self):
         self.creator.call()
 
-        assert User.objects.get(username="nulldb", is_sentry_app=True)
+        assert User.objects.get(username__contains="nulldb", is_sentry_app=True)
 
     def test_creates_api_application(self):
         self.creator.call()
-        proxy = User.objects.get(username="nulldb")
+        proxy = User.objects.get(username__contains="nulldb")
 
         assert ApiApplication.objects.get(owner=proxy)
 
     def test_creates_sentry_app(self):
         self.creator.call()
 
-        proxy = User.objects.get(username="nulldb")
+        proxy = User.objects.get(username__contains="nulldb")
         app = ApiApplication.objects.get(owner=proxy)
 
         sentry_app = SentryApp.objects.get(
@@ -97,6 +102,7 @@ class TestCreator(TestCase):
             webhook_url="http://example.com",
             schema={"elements": [self.create_issue_link_schema()]},
             request=request,
+            is_internal=False,
         )
         assert AuditLogEntry.objects.filter(event=AuditLogEntryEvent.SENTRY_APP_ADD).exists()
 
@@ -123,6 +129,7 @@ class TestCreator(TestCase):
             webhook_url="http://example.com",
             schema={"elements": [self.create_issue_link_schema()]},
             request=self.make_request(user=self.user, method="GET"),
+            is_internal=False,
         )
 
         record.assert_called_with(
@@ -131,3 +138,7 @@ class TestCreator(TestCase):
             organization_id=self.org.id,
             sentry_app=sentry_app.slug,
         )
+
+    def test_allows_name_that_exists_as_username_already(self):
+        self.create_user(username="nulldb")
+        assert self.creator.call()
diff --git a/tests/sentry/mediators/sentry_apps/test_internal_creator.py b/tests/sentry/mediators/sentry_apps/test_internal_creator.py
index 2aad451a68..c6da58cc16 100644
--- a/tests/sentry/mediators/sentry_apps/test_internal_creator.py
+++ b/tests/sentry/mediators/sentry_apps/test_internal_creator.py
@@ -23,6 +23,12 @@ class TestInternalCreator(TestCase):
             schema={"elements": [self.create_issue_link_schema()]},
         )
 
+    def test_slug(self):
+        sentry_app = self.creator.call()
+        # test slug is the name + a UUID
+        assert sentry_app.slug[:7] == "nulldb-"
+        assert len(sentry_app.slug) == 13
+
     def test_creates_internal_sentry_app(self):
         sentry_app = self.creator.call()
         assert SentryApp.objects.filter(slug=sentry_app.slug).exists()
diff --git a/tests/sentry/models/test_sentryapp.py b/tests/sentry/models/test_sentryapp.py
index 7a7602edfa..14d74cd972 100644
--- a/tests/sentry/models/test_sentryapp.py
+++ b/tests/sentry/models/test_sentryapp.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-import hashlib
-
 from sentry.constants import SentryAppStatus
 from sentry.testutils import TestCase
 from sentry.models import ApiApplication, SentryApp
@@ -23,27 +21,6 @@ class SentryAppTest(TestCase):
             webhook_url="http://example.com",
         )
 
-    def test_slug(self):
-        self.sentry_app.save()
-        assert self.sentry_app.slug == "nulldb"
-
-    def test_internal_slug(self):
-        self.sentry_app.status = SentryAppStatus.INTERNAL
-        self.sentry_app.save()
-
-        assert self.sentry_app.slug == u"nulldb-{}".format(
-            hashlib.sha1(self.org.slug).hexdigest()[0:6]
-        )
-
-    def test_internal_slug_on_update(self):
-        self.sentry_app.status = SentryAppStatus.INTERNAL
-        self.sentry_app.save()
-        self.sentry_app.save()
-
-        assert self.sentry_app.slug == u"nulldb-{}".format(
-            hashlib.sha1(self.org.slug).hexdigest()[0:6]
-        )
-
     def test_paranoid(self):
         self.sentry_app.save()
         self.sentry_app.delete()
