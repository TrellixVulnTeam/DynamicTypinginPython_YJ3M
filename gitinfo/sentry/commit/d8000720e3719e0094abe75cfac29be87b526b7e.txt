commit d8000720e3719e0094abe75cfac29be87b526b7e
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Wed May 23 12:08:07 2018 -0700

    ref(integrations): Use JIRA project id rather than key

diff --git a/src/sentry/integrations/jira/client.py b/src/sentry/integrations/jira/client.py
index b53fdb7337..674514ab2a 100644
--- a/src/sentry/integrations/jira/client.py
+++ b/src/sentry/integrations/jira/client.py
@@ -86,7 +86,7 @@ class JiraApiClient(ApiClient):
     def get_create_meta(self, project=None):
         params = {'expand': 'projects.issuetypes.fields'}
         if project is not None:
-            params['projectKeys'] = project
+            params['projectIds'] = project
         return self.get(
             self.META_URL,
             params=params,
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index 68faa1c9a7..4cc1296564 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -193,7 +193,6 @@ class JiraIntegration(Integration, IssueSyncMixin):
 
         return issue_type_meta
 
-    # def get_new_issue_fields(self, request, group, event, **kwargs):
     def get_create_issue_config(self, group, **kwargs):
         fields = super(JiraIntegration, self).get_create_issue_config(group, **kwargs)
         params = kwargs.get('params', {})
@@ -202,7 +201,7 @@ class JiraIntegration(Integration, IssueSyncMixin):
 
         client = self.get_client()
         try:
-            resp = client.get_create_meta(params.get('projectKey'))
+            resp = client.get_create_meta(params.get('project'))
         except ApiUnauthorized:
             raise IntegrationError(
                 'JIRA returned: Unauthorized. '
@@ -235,8 +234,8 @@ class JiraIntegration(Integration, IssueSyncMixin):
             {
                 'name': 'project',
                 'label': 'Jira Project',
-                'choices': ((meta['key']), (meta['key'])),
-                'default': meta['key'],
+                'choices': [(p['id'], p['key']) for p in client.get_projects_list()],
+                'default': meta['id'],
                 'type': 'select',
             }
         ] + fields + [
diff --git a/tests/sentry/integrations/jira/test_integration.py b/tests/sentry/integrations/jira/test_integration.py
index bd96c6adcb..7eda12d8f6 100644
--- a/tests/sentry/integrations/jira/test_integration.py
+++ b/tests/sentry/integrations/jira/test_integration.py
@@ -50,11 +50,57 @@ SAMPLE_CREATE_META_RESPONSE = """
 }
 """
 
+SAMPLE_PROJECT_LIST_RESPONSE = """
+[
+  {
+    "self": "http://www.example.com/jira/rest/api/2/project/EX",
+    "id": "10000",
+    "key": "EX",
+    "name": "Example",
+    "avatarUrls": {
+      "48x48": "http://www.example.com/jira/secure/projectavatar?size=large&pid=10000",
+      "24x24": "http://www.example.com/jira/secure/projectavatar?size=small&pid=10000",
+      "16x16": "http://www.example.com/jira/secure/projectavatar?size=xsmall&pid=10000",
+      "32x32": "http://www.example.com/jira/secure/projectavatar?size=medium&pid=10000"
+    },
+    "projectCategory": {
+      "self": "http://www.example.com/jira/rest/api/2/projectCategory/10000",
+      "id": "10000",
+      "name": "FIRST",
+      "description": "First Project Category"
+    },
+    "simplified": false
+  },
+  {
+    "self": "http://www.example.com/jira/rest/api/2/project/ABC",
+    "id": "10001",
+    "key": "ABC",
+    "name": "Alphabetical",
+    "avatarUrls": {
+      "48x48": "http://www.example.com/jira/secure/projectavatar?size=large&pid=10001",
+      "24x24": "http://www.example.com/jira/secure/projectavatar?size=small&pid=10001",
+      "16x16": "http://www.example.com/jira/secure/projectavatar?size=xsmall&pid=10001",
+      "32x32": "http://www.example.com/jira/secure/projectavatar?size=medium&pid=10001"
+    },
+    "projectCategory": {
+      "self": "http://www.example.com/jira/rest/api/2/projectCategory/10000",
+      "id": "10000",
+      "name": "FIRST",
+      "description": "First Project Category"
+    },
+    "simplified": false
+  }
+]
+"""
+
 
 class MockJiraApiClient(object):
     def get_create_meta(self, project=None):
         return json.loads(SAMPLE_CREATE_META_RESPONSE)
 
+    def get_projects_list(self):
+        return json.loads(SAMPLE_PROJECT_LIST_RESPONSE)
+
 
 class JiraIntegrationTest(APITestCase):
     def test_get_create_issue_config(self):
@@ -76,8 +122,8 @@ class JiraIntegrationTest(APITestCase):
 
         with mock.patch.object(installation, 'get_client', get_client):
             assert installation.get_create_issue_config(group) == [{
-                'default': 'EX',
-                'choices': ('EX', 'EX'),
+                'default': '10000',
+                'choices': [('10000', 'EX'), ('10001', 'ABC')],
                 'type': 'select',
                 'name': 'project',
                 'label': 'Jira Project',
