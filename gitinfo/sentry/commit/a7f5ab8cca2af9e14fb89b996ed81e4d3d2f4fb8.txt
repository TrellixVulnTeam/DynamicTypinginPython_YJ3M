commit a7f5ab8cca2af9e14fb89b996ed81e4d3d2f4fb8
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Oct 2 13:33:11 2019 -0700

    feat(api): Change Alert Rules serializer to include Triggers (#14874)
    
    This changes the Alert Rule serializer to include triggers and also include projects/excludedProjects in the "detailed" serializer.
    This is so we can show thresholds in our UI when viewing all Incident Rules.

diff --git a/src/sentry/api/serializers/models/alert_rule.py b/src/sentry/api/serializers/models/alert_rule.py
index 7a0a8b40ff..c35cbe580b 100644
--- a/src/sentry/api/serializers/models/alert_rule.py
+++ b/src/sentry/api/serializers/models/alert_rule.py
@@ -10,6 +10,20 @@ from sentry.incidents.models import AlertRule, AlertRuleExcludedProjects, AlertR
 
 @register(AlertRule)
 class AlertRuleSerializer(Serializer):
+    def get_attrs(self, item_list, user, **kwargs):
+        alert_rules = {item.id: item for item in item_list}
+        result = defaultdict(dict)
+
+        triggers = AlertRuleTrigger.objects.filter(alert_rule__in=item_list).order_by("label")
+        serialized_triggers = serialize(list(triggers))
+        for trigger, serialized in zip(triggers, serialized_triggers):
+            alert_rule_triggers = result[alert_rules[trigger.alert_rule_id]].setdefault(
+                "triggers", []
+            )
+            alert_rule_triggers.append(serialized)
+
+        return result
+
     def serialize(self, obj, attrs, user):
         return {
             "id": six.text_type(obj.id),
@@ -26,6 +40,7 @@ class AlertRuleSerializer(Serializer):
             "alertThreshold": obj.alert_threshold,
             "resolveThreshold": obj.resolve_threshold,
             "thresholdPeriod": obj.threshold_period,
+            "triggers": attrs.get("triggers", []),
             "includeAllProjects": obj.include_all_projects,
             "dateModified": obj.date_modified,
             "dateAdded": obj.date_added,
@@ -34,23 +49,15 @@ class AlertRuleSerializer(Serializer):
 
 class DetailedAlertRuleSerializer(AlertRuleSerializer):
     def get_attrs(self, item_list, user, **kwargs):
+        result = super(DetailedAlertRuleSerializer, self).get_attrs(item_list, user, **kwargs)
         alert_rule_projects = AlertRule.objects.filter(
             id__in=[item.id for item in item_list]
         ).values_list("id", "query_subscriptions__project__slug")
         alert_rules = {item.id: item for item in item_list}
-        result = defaultdict(dict)
         for alert_rule_id, project_slug in alert_rule_projects:
             rule_result = result[alert_rules[alert_rule_id]].setdefault("projects", [])
             rule_result.append(project_slug)
 
-        triggers = AlertRuleTrigger.objects.filter(alert_rule__in=item_list).order_by("label")
-        serialized_triggers = serialize(list(triggers))
-        for trigger, serialized in zip(triggers, serialized_triggers):
-            alert_rule_triggers = result[alert_rules[trigger.alert_rule_id]].setdefault(
-                "triggers", []
-            )
-            alert_rule_triggers.append(serialized)
-
         for alert_rule_id, project_slug in AlertRuleExcludedProjects.objects.filter(
             alert_rule__in=item_list
         ).values_list("alert_rule_id", "project__slug"):
@@ -62,5 +69,4 @@ class DetailedAlertRuleSerializer(AlertRuleSerializer):
         data = super(DetailedAlertRuleSerializer, self).serialize(obj, attrs, user)
         data["projects"] = sorted(attrs["projects"])
         data["excludedProjects"] = sorted(attrs.get("excludedProjects", []))
-        data["triggers"] = attrs.get("triggers", [])
         return data
diff --git a/tests/sentry/api/serializers/test_alert_rule.py b/tests/sentry/api/serializers/test_alert_rule.py
index 32c9b13cd7..12ba24dffd 100644
--- a/tests/sentry/api/serializers/test_alert_rule.py
+++ b/tests/sentry/api/serializers/test_alert_rule.py
@@ -48,6 +48,14 @@ class AlertRuleSerializerTest(BaseAlertRuleSerializerTest, TestCase):
         result = serialize(alert_rule)
         self.assert_alert_rule_serialized(alert_rule, result)
 
+    def test_triggers(self):
+        alert_rule = self.create_alert_rule()
+        other_alert_rule = self.create_alert_rule()
+        trigger = create_alert_rule_trigger(alert_rule, "test", AlertRuleThresholdType.ABOVE, 1000)
+        result = serialize([alert_rule, other_alert_rule])
+        assert result[0]["triggers"] == [serialize(trigger)]
+        assert result[1]["triggers"] == []
+
 
 class DetailedAlertRuleSerializerTest(BaseAlertRuleSerializerTest, TestCase):
     def test_simple(self):
