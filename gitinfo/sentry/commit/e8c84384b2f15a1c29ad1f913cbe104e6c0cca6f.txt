commit e8c84384b2f15a1c29ad1f913cbe104e6c0cca6f
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue May 14 12:46:24 2019 +0200

    feat(grouping): Fix the enhancement range rules (#13164)

diff --git a/src/sentry/grouping/enhancer.py b/src/sentry/grouping/enhancer.py
index fc9cd73d1f..6d58253bb7 100644
--- a/src/sentry/grouping/enhancer.py
+++ b/src/sentry/grouping/enhancer.py
@@ -168,9 +168,9 @@ class Action(object):
         if self.range is None:
             return [seq[idx]]
         elif self.range == 'down':
-            return seq[idx + 1:]
-        elif self.range == 'up':
             return seq[:idx]
+        elif self.range == 'up':
+            return seq[idx + 1:]
         return []
 
     def apply_modifications_to_frame(self, frames, idx):
@@ -313,7 +313,10 @@ class Rule(object):
 
     @property
     def matcher_description(self):
-        return ' '.join(x.description for x in self.matchers)
+        rv = ' '.join(x.description for x in self.matchers)
+        if any(x.range is not None for x in self.actions):
+            rv += ' - ranged'
+        return rv
 
     def as_dict(self):
         matchers = {}
diff --git a/tests/sentry/grouping/grouping_inputs/python-grouping-enhancer-away-from-crash.json b/tests/sentry/grouping/grouping_inputs/python-grouping-enhancer-away-from-crash.json
new file mode 100644
index 0000000000..3c88271748
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/python-grouping-enhancer-away-from-crash.json
@@ -0,0 +1,259 @@
+{
+  "_grouping": {
+    "enhancement_base": "common:2019-03-23",
+    "enhancements": "path:**/release_webhook.py v-group"
+  },
+  "culprit": "/api/hooks/release/{plugin_id}/{project_id}/{signature}/",
+  "event_id": "69ce64e3cf2c4b38850de54e8b90b277",
+  "environment": "prod",
+  "platform": "python",
+  "logger": "",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "get_response",
+              "abs_path": "/usr/local/lib/python2.7/site-packages/django/core/handlers/base.py",
+              "pre_context": [
+                "                        break",
+                "",
+                "            if response is None:",
+                "                wrapped_callback = self.make_view_atomic(callback)",
+                "                try:"
+              ],
+              "module": "django.core.handlers.base",
+              "filename": "django/core/handlers/base.py",
+              "post_context": [
+                "                except Exception as e:",
+                "                    # If the view raised an exception, run it through exception",
+                "                    # middleware, and if the exception middleware returns a",
+                "                    # response, use that. Otherwise, reraise the exception.",
+                "                    for middleware_method in self._exception_middleware:"
+              ],
+              "in_app": false,
+              "context_line": "                    response = wrapped_callback(request, *callback_args, **callback_kwargs)",
+              "lineno": 112
+            },
+            {
+              "function": "view",
+              "abs_path": "/usr/local/lib/python2.7/site-packages/django/views/generic/base.py",
+              "pre_context": [
+                "            if hasattr(self, 'get') and not hasattr(self, 'head'):",
+                "                self.head = self.get",
+                "            self.request = request",
+                "            self.args = args",
+                "            self.kwargs = kwargs"
+              ],
+              "module": "django.views.generic.base",
+              "filename": "django/views/generic/base.py",
+              "post_context": [
+                "",
+                "        # take name and docstring from class",
+                "        update_wrapper(view, cls, updated=())",
+                "",
+                "        # and possible attributes set by decorators"
+              ],
+              "in_app": false,
+              "context_line": "            return self.dispatch(request, *args, **kwargs)",
+              "lineno": 69
+            },
+            {
+              "function": "_wrapper",
+              "abs_path": "/usr/local/lib/python2.7/site-packages/django/utils/decorators.py",
+              "pre_context": [
+                "            def bound_func(*args2, **kwargs2):",
+                "                return func(self, *args2, **kwargs2)",
+                "            # bound_func has the signature that 'decorator' expects i.e.  no",
+                "            # 'self' argument, but it is a closure over self so it can call",
+                "            # 'func' correctly."
+              ],
+              "module": "django.utils.decorators",
+              "filename": "django/utils/decorators.py",
+              "post_context": [
+                "        # In case 'decorator' adds attributes to the function it decorates, we",
+                "        # want to copy those. We don't have access to bound_func in this scope,",
+                "        # but we can cheat by using it on a dummy function.",
+                "        @decorator",
+                "        def dummy(*args, **kwargs):"
+              ],
+              "in_app": false,
+              "context_line": "            return bound_func(*args, **kwargs)",
+              "lineno": 29
+            },
+            {
+              "function": "wrapped_view",
+              "abs_path": "/usr/local/lib/python2.7/site-packages/django/views/decorators/csrf.py",
+              "pre_context": [
+                "    \"\"\"",
+                "    # We could just do view_func.csrf_exempt = True, but decorators",
+                "    # are nicer if they don't have side-effects, so we return a new",
+                "    # function.",
+                "    def wrapped_view(*args, **kwargs):"
+              ],
+              "module": "django.views.decorators.csrf",
+              "filename": "django/views/decorators/csrf.py",
+              "post_context": [
+                "    wrapped_view.csrf_exempt = True",
+                "    return wraps(view_func, assigned=available_attrs(view_func))(wrapped_view)"
+              ],
+              "in_app": false,
+              "context_line": "        return view_func(*args, **kwargs)",
+              "lineno": 57
+            },
+            {
+              "function": "bound_func",
+              "abs_path": "/usr/local/lib/python2.7/site-packages/django/utils/decorators.py",
+              "pre_context": [
+                "    # be a method of the class it is defined it.",
+                "    def _dec(func):",
+                "        def _wrapper(self, *args, **kwargs):",
+                "            @decorator",
+                "            def bound_func(*args2, **kwargs2):"
+              ],
+              "module": "django.utils.decorators",
+              "filename": "django/utils/decorators.py",
+              "post_context": [
+                "            # bound_func has the signature that 'decorator' expects i.e.  no",
+                "            # 'self' argument, but it is a closure over self so it can call",
+                "            # 'func' correctly.",
+                "            return bound_func(*args, **kwargs)",
+                "        # In case 'decorator' adds attributes to the function it decorates, we"
+              ],
+              "in_app": false,
+              "context_line": "                return func(self, *args2, **kwargs2)",
+              "lineno": 25
+            },
+            {
+              "function": "dispatch",
+              "abs_path": "/usr/src/getsentry/src/sentry/src/sentry/web/frontend/release_webhook.py",
+              "pre_context": [
+                "            ).hexdigest()",
+                "        )",
+                "",
+                "    @method_decorator(csrf_exempt)",
+                "    def dispatch(self, *args, **kwargs):"
+              ],
+              "module": "sentry.web.frontend.release_webhook",
+              "filename": "sentry/web/frontend/release_webhook.py",
+              "post_context": [
+                "",
+                "    def _handle_builtin(self, request, project):",
+                "        endpoint = u'/projects/{}/{}/releases/'.format(",
+                "            project.organization.slug,",
+                "            project.slug,"
+              ],
+              "in_app": true,
+              "context_line": "        return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)",
+              "lineno": 37
+            },
+            {
+              "function": "dispatch",
+              "abs_path": "/usr/local/lib/python2.7/site-packages/django/views/generic/base.py",
+              "pre_context": [
+                "        # request method isn't on the approved list.",
+                "        if request.method.lower() in self.http_method_names:",
+                "            handler = getattr(self, request.method.lower(), self.http_method_not_allowed)",
+                "        else:",
+                "            handler = self.http_method_not_allowed"
+              ],
+              "module": "django.views.generic.base",
+              "filename": "django/views/generic/base.py",
+              "post_context": [
+                "",
+                "    def http_method_not_allowed(self, request, *args, **kwargs):",
+                "        logger.warning('Method Not Allowed (%s): %s', request.method, request.path,",
+                "            extra={",
+                "                'status_code': 405,"
+              ],
+              "in_app": false,
+              "context_line": "        return handler(request, *args, **kwargs)",
+              "lineno": 87
+            },
+            {
+              "function": "post",
+              "abs_path": "/usr/src/getsentry/src/sentry/src/sentry/web/frontend/release_webhook.py",
+              "pre_context": [
+                "            return HttpResponse(status=403)",
+                "",
+                "        cls = plugin.get_release_hook()",
+                "        hook = cls(project)",
+                "        try:"
+              ],
+              "module": "sentry.web.frontend.release_webhook",
+              "filename": "sentry/web/frontend/release_webhook.py",
+              "post_context": [
+                "        except HookValidationError as exc:",
+                "            return HttpResponse(",
+                "                status=400,",
+                "                content=json.dumps({",
+                "                    'error': six.text_type(exc)"
+              ],
+              "in_app": true,
+              "context_line": "            hook.handle(request)",
+              "lineno": 127
+            },
+            {
+              "function": "handle",
+              "abs_path": "/usr/src/getsentry/src/sentry-plugins/src/sentry_plugins/heroku/plugin.py",
+              "pre_context": [
+                "logger = logging.getLogger('sentry.plugins.heroku')",
+                "",
+                "",
+                "class HerokuReleaseHook(ReleaseHook):",
+                "    def handle(self, request):"
+              ],
+              "module": "sentry_plugins.heroku.plugin",
+              "filename": "sentry_plugins/heroku/plugin.py",
+              "post_context": [
+                "        try:",
+                "            user = User.objects.get(",
+                "                email__iexact=email,",
+                "                sentry_orgmember_set__organization__project=self.project,",
+                "            )"
+              ],
+              "in_app": true,
+              "context_line": "        email = request.POST['user']",
+              "lineno": 17
+            },
+            {
+              "function": "__getitem__",
+              "abs_path": "/usr/local/lib/python2.7/site-packages/django/utils/datastructures.py",
+              "pre_context": [
+                "        raises KeyError if not found.",
+                "        \"\"\"",
+                "        try:",
+                "            list_ = super(MultiValueDict, self).__getitem__(key)",
+                "        except KeyError:"
+              ],
+              "module": "django.utils.datastructures",
+              "filename": "django/utils/datastructures.py",
+              "post_context": [
+                "        try:",
+                "            return list_[-1]",
+                "        except IndexError:",
+                "            return []",
+                ""
+              ],
+              "in_app": false,
+              "context_line": "            raise MultiValueDictKeyError(repr(key))",
+              "lineno": 301
+            }
+          ]
+        },
+        "type": "MultiValueDictKeyError",
+        "value": "\"'user'\"",
+        "module": "django.utils.datastructures",
+        "mechanism": {
+          "type": "django",
+          "handled": false
+        }
+      }
+    ]
+  },
+  "release": "5e561c60bd275db993e5537a4830cd8ce7d66f52"
+}
diff --git a/tests/sentry/grouping/grouping_inputs/python-grouping-enhancer-towards-crash.json b/tests/sentry/grouping/grouping_inputs/python-grouping-enhancer-towards-crash.json
new file mode 100644
index 0000000000..79be0da7ea
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/python-grouping-enhancer-towards-crash.json
@@ -0,0 +1,259 @@
+{
+  "_grouping": {
+    "enhancement_base": "common:2019-03-23",
+    "enhancements": "function:wrapped_view ^-group -group"
+  },
+  "culprit": "/api/hooks/release/{plugin_id}/{project_id}/{signature}/",
+  "event_id": "69ce64e3cf2c4b38850de54e8b90b277",
+  "environment": "prod",
+  "platform": "python",
+  "logger": "",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "get_response",
+              "abs_path": "/usr/local/lib/python2.7/site-packages/django/core/handlers/base.py",
+              "pre_context": [
+                "                        break",
+                "",
+                "            if response is None:",
+                "                wrapped_callback = self.make_view_atomic(callback)",
+                "                try:"
+              ],
+              "module": "django.core.handlers.base",
+              "filename": "django/core/handlers/base.py",
+              "post_context": [
+                "                except Exception as e:",
+                "                    # If the view raised an exception, run it through exception",
+                "                    # middleware, and if the exception middleware returns a",
+                "                    # response, use that. Otherwise, reraise the exception.",
+                "                    for middleware_method in self._exception_middleware:"
+              ],
+              "in_app": false,
+              "context_line": "                    response = wrapped_callback(request, *callback_args, **callback_kwargs)",
+              "lineno": 112
+            },
+            {
+              "function": "view",
+              "abs_path": "/usr/local/lib/python2.7/site-packages/django/views/generic/base.py",
+              "pre_context": [
+                "            if hasattr(self, 'get') and not hasattr(self, 'head'):",
+                "                self.head = self.get",
+                "            self.request = request",
+                "            self.args = args",
+                "            self.kwargs = kwargs"
+              ],
+              "module": "django.views.generic.base",
+              "filename": "django/views/generic/base.py",
+              "post_context": [
+                "",
+                "        # take name and docstring from class",
+                "        update_wrapper(view, cls, updated=())",
+                "",
+                "        # and possible attributes set by decorators"
+              ],
+              "in_app": false,
+              "context_line": "            return self.dispatch(request, *args, **kwargs)",
+              "lineno": 69
+            },
+            {
+              "function": "_wrapper",
+              "abs_path": "/usr/local/lib/python2.7/site-packages/django/utils/decorators.py",
+              "pre_context": [
+                "            def bound_func(*args2, **kwargs2):",
+                "                return func(self, *args2, **kwargs2)",
+                "            # bound_func has the signature that 'decorator' expects i.e.  no",
+                "            # 'self' argument, but it is a closure over self so it can call",
+                "            # 'func' correctly."
+              ],
+              "module": "django.utils.decorators",
+              "filename": "django/utils/decorators.py",
+              "post_context": [
+                "        # In case 'decorator' adds attributes to the function it decorates, we",
+                "        # want to copy those. We don't have access to bound_func in this scope,",
+                "        # but we can cheat by using it on a dummy function.",
+                "        @decorator",
+                "        def dummy(*args, **kwargs):"
+              ],
+              "in_app": false,
+              "context_line": "            return bound_func(*args, **kwargs)",
+              "lineno": 29
+            },
+            {
+              "function": "wrapped_view",
+              "abs_path": "/usr/local/lib/python2.7/site-packages/django/views/decorators/csrf.py",
+              "pre_context": [
+                "    \"\"\"",
+                "    # We could just do view_func.csrf_exempt = True, but decorators",
+                "    # are nicer if they don't have side-effects, so we return a new",
+                "    # function.",
+                "    def wrapped_view(*args, **kwargs):"
+              ],
+              "module": "django.views.decorators.csrf",
+              "filename": "django/views/decorators/csrf.py",
+              "post_context": [
+                "    wrapped_view.csrf_exempt = True",
+                "    return wraps(view_func, assigned=available_attrs(view_func))(wrapped_view)"
+              ],
+              "in_app": false,
+              "context_line": "        return view_func(*args, **kwargs)",
+              "lineno": 57
+            },
+            {
+              "function": "bound_func",
+              "abs_path": "/usr/local/lib/python2.7/site-packages/django/utils/decorators.py",
+              "pre_context": [
+                "    # be a method of the class it is defined it.",
+                "    def _dec(func):",
+                "        def _wrapper(self, *args, **kwargs):",
+                "            @decorator",
+                "            def bound_func(*args2, **kwargs2):"
+              ],
+              "module": "django.utils.decorators",
+              "filename": "django/utils/decorators.py",
+              "post_context": [
+                "            # bound_func has the signature that 'decorator' expects i.e.  no",
+                "            # 'self' argument, but it is a closure over self so it can call",
+                "            # 'func' correctly.",
+                "            return bound_func(*args, **kwargs)",
+                "        # In case 'decorator' adds attributes to the function it decorates, we"
+              ],
+              "in_app": false,
+              "context_line": "                return func(self, *args2, **kwargs2)",
+              "lineno": 25
+            },
+            {
+              "function": "dispatch",
+              "abs_path": "/usr/src/getsentry/src/sentry/src/sentry/web/frontend/release_webhook.py",
+              "pre_context": [
+                "            ).hexdigest()",
+                "        )",
+                "",
+                "    @method_decorator(csrf_exempt)",
+                "    def dispatch(self, *args, **kwargs):"
+              ],
+              "module": "sentry.web.frontend.release_webhook",
+              "filename": "sentry/web/frontend/release_webhook.py",
+              "post_context": [
+                "",
+                "    def _handle_builtin(self, request, project):",
+                "        endpoint = u'/projects/{}/{}/releases/'.format(",
+                "            project.organization.slug,",
+                "            project.slug,"
+              ],
+              "in_app": true,
+              "context_line": "        return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)",
+              "lineno": 37
+            },
+            {
+              "function": "dispatch",
+              "abs_path": "/usr/local/lib/python2.7/site-packages/django/views/generic/base.py",
+              "pre_context": [
+                "        # request method isn't on the approved list.",
+                "        if request.method.lower() in self.http_method_names:",
+                "            handler = getattr(self, request.method.lower(), self.http_method_not_allowed)",
+                "        else:",
+                "            handler = self.http_method_not_allowed"
+              ],
+              "module": "django.views.generic.base",
+              "filename": "django/views/generic/base.py",
+              "post_context": [
+                "",
+                "    def http_method_not_allowed(self, request, *args, **kwargs):",
+                "        logger.warning('Method Not Allowed (%s): %s', request.method, request.path,",
+                "            extra={",
+                "                'status_code': 405,"
+              ],
+              "in_app": false,
+              "context_line": "        return handler(request, *args, **kwargs)",
+              "lineno": 87
+            },
+            {
+              "function": "post",
+              "abs_path": "/usr/src/getsentry/src/sentry/src/sentry/web/frontend/release_webhook.py",
+              "pre_context": [
+                "            return HttpResponse(status=403)",
+                "",
+                "        cls = plugin.get_release_hook()",
+                "        hook = cls(project)",
+                "        try:"
+              ],
+              "module": "sentry.web.frontend.release_webhook",
+              "filename": "sentry/web/frontend/release_webhook.py",
+              "post_context": [
+                "        except HookValidationError as exc:",
+                "            return HttpResponse(",
+                "                status=400,",
+                "                content=json.dumps({",
+                "                    'error': six.text_type(exc)"
+              ],
+              "in_app": true,
+              "context_line": "            hook.handle(request)",
+              "lineno": 127
+            },
+            {
+              "function": "handle",
+              "abs_path": "/usr/src/getsentry/src/sentry-plugins/src/sentry_plugins/heroku/plugin.py",
+              "pre_context": [
+                "logger = logging.getLogger('sentry.plugins.heroku')",
+                "",
+                "",
+                "class HerokuReleaseHook(ReleaseHook):",
+                "    def handle(self, request):"
+              ],
+              "module": "sentry_plugins.heroku.plugin",
+              "filename": "sentry_plugins/heroku/plugin.py",
+              "post_context": [
+                "        try:",
+                "            user = User.objects.get(",
+                "                email__iexact=email,",
+                "                sentry_orgmember_set__organization__project=self.project,",
+                "            )"
+              ],
+              "in_app": true,
+              "context_line": "        email = request.POST['user']",
+              "lineno": 17
+            },
+            {
+              "function": "__getitem__",
+              "abs_path": "/usr/local/lib/python2.7/site-packages/django/utils/datastructures.py",
+              "pre_context": [
+                "        raises KeyError if not found.",
+                "        \"\"\"",
+                "        try:",
+                "            list_ = super(MultiValueDict, self).__getitem__(key)",
+                "        except KeyError:"
+              ],
+              "module": "django.utils.datastructures",
+              "filename": "django/utils/datastructures.py",
+              "post_context": [
+                "        try:",
+                "            return list_[-1]",
+                "        except IndexError:",
+                "            return []",
+                ""
+              ],
+              "in_app": false,
+              "context_line": "            raise MultiValueDictKeyError(repr(key))",
+              "lineno": 301
+            }
+          ]
+        },
+        "type": "MultiValueDictKeyError",
+        "value": "\"'user'\"",
+        "module": "django.utils.datastructures",
+        "mechanism": {
+          "type": "django",
+          "handled": false
+        }
+      }
+    ]
+  },
+  "release": "5e561c60bd275db993e5537a4830cd8ce7d66f52"
+}
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/python_grouping_enhancer_away_from_crash.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/python_grouping_enhancer_away_from_crash.pysnap
new file mode 100644
index 0000000000..12308dde8b
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/python_grouping_enhancer_away_from_crash.pysnap
@@ -0,0 +1,246 @@
+---
+created: '2019-05-10T11:49:03.468450Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '79f7443afa4022bb3e5093e765e755bb'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'django/core/handlers/base.py'
+            context-line*
+              u'                    response = wrapped_callback(request, *callback_args, **callback_kwargs)'
+            function (function name is used only if module or filename are available)
+              u'get_response'
+            lineno (line number is used only if module or filename are available)
+              112
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'django/views/generic/base.py'
+            context-line*
+              u'            return self.dispatch(request, *args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'view'
+            lineno (line number is used only if module or filename are available)
+              69
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'django/utils/decorators.py'
+            context-line*
+              u'            return bound_func(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'_wrapper'
+            lineno (line number is used only if module or filename are available)
+              29
+          frame (non app frame)
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'django/views/decorators/csrf.py'
+            context-line*
+              u'        return view_func(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'wrapped_view'
+            lineno (line number is used only if module or filename are available)
+              57
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'django/utils/decorators.py'
+            context-line*
+              u'                return func(self, *args2, **kwargs2)'
+            function (function name is used only if module or filename are available)
+              u'bound_func'
+            lineno (line number is used only if module or filename are available)
+              25
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'sentry/web/frontend/release_webhook.py'
+            context-line*
+              u'        return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'dispatch'
+            lineno (line number is used only if module or filename are available)
+              37
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'django/views/generic/base.py'
+            context-line*
+              u'        return handler(request, *args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'dispatch'
+            lineno (line number is used only if module or filename are available)
+              87
+          frame*
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'sentry/web/frontend/release_webhook.py'
+            context-line*
+              u'            hook.handle(request)'
+            function (function name is used only if module or filename are available)
+              u'post'
+            lineno (line number is used only if module or filename are available)
+              127
+          frame*
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'sentry_plugins/heroku/plugin.py'
+            context-line*
+              u"        email = request.POST['user']"
+            function (function name is used only if module or filename are available)
+              u'handle'
+            lineno (line number is used only if module or filename are available)
+              17
+          frame (non app frame)
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'django/utils/datastructures.py'
+            context-line*
+              u'            raise MultiValueDictKeyError(repr(key))'
+            function (function name is used only if module or filename are available)
+              u'__getitem__'
+            lineno (line number is used only if module or filename are available)
+              301
+        type*
+          u'MultiValueDictKeyError'
+        value (stacktrace and type take precedence)
+          u'"\'user\'"'
+--------------------------------------------------------------------------
+system:
+  hash: '5586fbb54ed18866eea266e91cee7f8b'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'django/core/handlers/base.py'
+            context-line*
+              u'                    response = wrapped_callback(request, *callback_args, **callback_kwargs)'
+            function (function name is used only if module or filename are available)
+              u'get_response'
+            lineno (line number is used only if module or filename are available)
+              112
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'django/views/generic/base.py'
+            context-line*
+              u'            return self.dispatch(request, *args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'view'
+            lineno (line number is used only if module or filename are available)
+              69
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'django/utils/decorators.py'
+            context-line*
+              u'            return bound_func(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'_wrapper'
+            lineno (line number is used only if module or filename are available)
+              29
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'django/views/decorators/csrf.py'
+            context-line*
+              u'        return view_func(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'wrapped_view'
+            lineno (line number is used only if module or filename are available)
+              57
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'django/utils/decorators.py'
+            context-line*
+              u'                return func(self, *args2, **kwargs2)'
+            function (function name is used only if module or filename are available)
+              u'bound_func'
+            lineno (line number is used only if module or filename are available)
+              25
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'sentry/web/frontend/release_webhook.py'
+            context-line*
+              u'        return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'dispatch'
+            lineno (line number is used only if module or filename are available)
+              37
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'django/views/generic/base.py'
+            context-line*
+              u'        return handler(request, *args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'dispatch'
+            lineno (line number is used only if module or filename are available)
+              87
+          frame*
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'sentry/web/frontend/release_webhook.py'
+            context-line*
+              u'            hook.handle(request)'
+            function (function name is used only if module or filename are available)
+              u'post'
+            lineno (line number is used only if module or filename are available)
+              127
+          frame*
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'sentry_plugins/heroku/plugin.py'
+            context-line*
+              u"        email = request.POST['user']"
+            function (function name is used only if module or filename are available)
+              u'handle'
+            lineno (line number is used only if module or filename are available)
+              17
+          frame*
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'django/utils/datastructures.py'
+            context-line*
+              u'            raise MultiValueDictKeyError(repr(key))'
+            function (function name is used only if module or filename are available)
+              u'__getitem__'
+            lineno (line number is used only if module or filename are available)
+              301
+        type*
+          u'MultiValueDictKeyError'
+        value (stacktrace and type take precedence)
+          u'"\'user\'"'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/python_grouping_enhancer_towards_crash.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/python_grouping_enhancer_towards_crash.pysnap
new file mode 100644
index 0000000000..ccf466597a
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/python_grouping_enhancer_towards_crash.pysnap
@@ -0,0 +1,246 @@
+---
+created: '2019-05-10T12:07:50.063704Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'django/core/handlers/base.py'
+            context-line*
+              u'                    response = wrapped_callback(request, *callback_args, **callback_kwargs)'
+            function (function name is used only if module or filename are available)
+              u'get_response'
+            lineno (line number is used only if module or filename are available)
+              112
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'django/views/generic/base.py'
+            context-line*
+              u'            return self.dispatch(request, *args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'view'
+            lineno (line number is used only if module or filename are available)
+              69
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'django/utils/decorators.py'
+            context-line*
+              u'            return bound_func(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'_wrapper'
+            lineno (line number is used only if module or filename are available)
+              29
+          frame (non app frame)
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'django/views/decorators/csrf.py'
+            context-line*
+              u'        return view_func(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'wrapped_view'
+            lineno (line number is used only if module or filename are available)
+              57
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'django/utils/decorators.py'
+            context-line*
+              u'                return func(self, *args2, **kwargs2)'
+            function (function name is used only if module or filename are available)
+              u'bound_func'
+            lineno (line number is used only if module or filename are available)
+              25
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'sentry/web/frontend/release_webhook.py'
+            context-line*
+              u'        return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'dispatch'
+            lineno (line number is used only if module or filename are available)
+              37
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'django/views/generic/base.py'
+            context-line*
+              u'        return handler(request, *args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'dispatch'
+            lineno (line number is used only if module or filename are available)
+              87
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'sentry/web/frontend/release_webhook.py'
+            context-line*
+              u'            hook.handle(request)'
+            function (function name is used only if module or filename are available)
+              u'post'
+            lineno (line number is used only if module or filename are available)
+              127
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'sentry_plugins/heroku/plugin.py'
+            context-line*
+              u"        email = request.POST['user']"
+            function (function name is used only if module or filename are available)
+              u'handle'
+            lineno (line number is used only if module or filename are available)
+              17
+          frame (non app frame)
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'django/utils/datastructures.py'
+            context-line*
+              u'            raise MultiValueDictKeyError(repr(key))'
+            function (function name is used only if module or filename are available)
+              u'__getitem__'
+            lineno (line number is used only if module or filename are available)
+              301
+        type*
+          u'MultiValueDictKeyError'
+        value*
+          u'"\'user\'"'
+--------------------------------------------------------------------------
+system:
+  hash: '20fc367de6e7f2dcfd2f08ddd4fd8618'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'django/core/handlers/base.py'
+            context-line*
+              u'                    response = wrapped_callback(request, *callback_args, **callback_kwargs)'
+            function (function name is used only if module or filename are available)
+              u'get_response'
+            lineno (line number is used only if module or filename are available)
+              112
+          frame*
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'django/views/generic/base.py'
+            context-line*
+              u'            return self.dispatch(request, *args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'view'
+            lineno (line number is used only if module or filename are available)
+              69
+          frame*
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'django/utils/decorators.py'
+            context-line*
+              u'            return bound_func(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'_wrapper'
+            lineno (line number is used only if module or filename are available)
+              29
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'django/views/decorators/csrf.py'
+            context-line*
+              u'        return view_func(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'wrapped_view'
+            lineno (line number is used only if module or filename are available)
+              57
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'django/utils/decorators.py'
+            context-line*
+              u'                return func(self, *args2, **kwargs2)'
+            function (function name is used only if module or filename are available)
+              u'bound_func'
+            lineno (line number is used only if module or filename are available)
+              25
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'sentry/web/frontend/release_webhook.py'
+            context-line*
+              u'        return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'dispatch'
+            lineno (line number is used only if module or filename are available)
+              37
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'django/views/generic/base.py'
+            context-line*
+              u'        return handler(request, *args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'dispatch'
+            lineno (line number is used only if module or filename are available)
+              87
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'sentry/web/frontend/release_webhook.py'
+            context-line*
+              u'            hook.handle(request)'
+            function (function name is used only if module or filename are available)
+              u'post'
+            lineno (line number is used only if module or filename are available)
+              127
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'sentry_plugins/heroku/plugin.py'
+            context-line*
+              u"        email = request.POST['user']"
+            function (function name is used only if module or filename are available)
+              u'handle'
+            lineno (line number is used only if module or filename are available)
+              17
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'django/utils/datastructures.py'
+            context-line*
+              u'            raise MultiValueDictKeyError(repr(key))'
+            function (function name is used only if module or filename are available)
+              u'__getitem__'
+            lineno (line number is used only if module or filename are available)
+              301
+        type*
+          u'MultiValueDictKeyError'
+        value (stacktrace and type take precedence)
+          u'"\'user\'"'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/python_grouping_enhancer_away_from_crash.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/python_grouping_enhancer_away_from_crash.pysnap
new file mode 100644
index 0000000000..645505bbc6
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/python_grouping_enhancer_away_from_crash.pysnap
@@ -0,0 +1,246 @@
+---
+created: '2019-05-10T11:49:04.768709Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '79f7443afa4022bb3e5093e765e755bb'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'django/core/handlers/base.py'
+            context-line*
+              u'                    response = wrapped_callback(request, *callback_args, **callback_kwargs)'
+            function (function name is used only if module or filename are available)
+              u'get_response'
+            lineno (line number is used only if module or filename are available)
+              112
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'django/views/generic/base.py'
+            context-line*
+              u'            return self.dispatch(request, *args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'view'
+            lineno (line number is used only if module or filename are available)
+              69
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'django/utils/decorators.py'
+            context-line*
+              u'            return bound_func(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'_wrapper'
+            lineno (line number is used only if module or filename are available)
+              29
+          frame (non app frame)
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'django/views/decorators/csrf.py'
+            context-line*
+              u'        return view_func(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'wrapped_view'
+            lineno (line number is used only if module or filename are available)
+              57
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'django/utils/decorators.py'
+            context-line*
+              u'                return func(self, *args2, **kwargs2)'
+            function (function name is used only if module or filename are available)
+              u'bound_func'
+            lineno (line number is used only if module or filename are available)
+              25
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'sentry/web/frontend/release_webhook.py'
+            context-line*
+              u'        return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'dispatch'
+            lineno (line number is used only if module or filename are available)
+              37
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'django/views/generic/base.py'
+            context-line*
+              u'        return handler(request, *args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'dispatch'
+            lineno (line number is used only if module or filename are available)
+              87
+          frame*
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'sentry/web/frontend/release_webhook.py'
+            context-line*
+              u'            hook.handle(request)'
+            function (function name is used only if module or filename are available)
+              u'post'
+            lineno (line number is used only if module or filename are available)
+              127
+          frame*
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'sentry_plugins/heroku/plugin.py'
+            context-line*
+              u"        email = request.POST['user']"
+            function (function name is used only if module or filename are available)
+              u'handle'
+            lineno (line number is used only if module or filename are available)
+              17
+          frame (non app frame)
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'django/utils/datastructures.py'
+            context-line*
+              u'            raise MultiValueDictKeyError(repr(key))'
+            function (function name is used only if module or filename are available)
+              u'__getitem__'
+            lineno (line number is used only if module or filename are available)
+              301
+        type*
+          u'MultiValueDictKeyError'
+        value (stacktrace and type take precedence)
+          u'"\'user\'"'
+--------------------------------------------------------------------------
+system:
+  hash: '5586fbb54ed18866eea266e91cee7f8b'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'django/core/handlers/base.py'
+            context-line*
+              u'                    response = wrapped_callback(request, *callback_args, **callback_kwargs)'
+            function (function name is used only if module or filename are available)
+              u'get_response'
+            lineno (line number is used only if module or filename are available)
+              112
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'django/views/generic/base.py'
+            context-line*
+              u'            return self.dispatch(request, *args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'view'
+            lineno (line number is used only if module or filename are available)
+              69
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'django/utils/decorators.py'
+            context-line*
+              u'            return bound_func(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'_wrapper'
+            lineno (line number is used only if module or filename are available)
+              29
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'django/views/decorators/csrf.py'
+            context-line*
+              u'        return view_func(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'wrapped_view'
+            lineno (line number is used only if module or filename are available)
+              57
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'django/utils/decorators.py'
+            context-line*
+              u'                return func(self, *args2, **kwargs2)'
+            function (function name is used only if module or filename are available)
+              u'bound_func'
+            lineno (line number is used only if module or filename are available)
+              25
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'sentry/web/frontend/release_webhook.py'
+            context-line*
+              u'        return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'dispatch'
+            lineno (line number is used only if module or filename are available)
+              37
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'django/views/generic/base.py'
+            context-line*
+              u'        return handler(request, *args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'dispatch'
+            lineno (line number is used only if module or filename are available)
+              87
+          frame*
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'sentry/web/frontend/release_webhook.py'
+            context-line*
+              u'            hook.handle(request)'
+            function (function name is used only if module or filename are available)
+              u'post'
+            lineno (line number is used only if module or filename are available)
+              127
+          frame*
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'sentry_plugins/heroku/plugin.py'
+            context-line*
+              u"        email = request.POST['user']"
+            function (function name is used only if module or filename are available)
+              u'handle'
+            lineno (line number is used only if module or filename are available)
+              17
+          frame*
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'django/utils/datastructures.py'
+            context-line*
+              u'            raise MultiValueDictKeyError(repr(key))'
+            function (function name is used only if module or filename are available)
+              u'__getitem__'
+            lineno (line number is used only if module or filename are available)
+              301
+        type*
+          u'MultiValueDictKeyError'
+        value (stacktrace and type take precedence)
+          u'"\'user\'"'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/python_grouping_enhancer_towards_crash.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/python_grouping_enhancer_towards_crash.pysnap
new file mode 100644
index 0000000000..604b59ef14
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/python_grouping_enhancer_towards_crash.pysnap
@@ -0,0 +1,246 @@
+---
+created: '2019-05-10T12:07:51.358110Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'django/core/handlers/base.py'
+            context-line*
+              u'                    response = wrapped_callback(request, *callback_args, **callback_kwargs)'
+            function (function name is used only if module or filename are available)
+              u'get_response'
+            lineno (line number is used only if module or filename are available)
+              112
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'django/views/generic/base.py'
+            context-line*
+              u'            return self.dispatch(request, *args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'view'
+            lineno (line number is used only if module or filename are available)
+              69
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'django/utils/decorators.py'
+            context-line*
+              u'            return bound_func(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'_wrapper'
+            lineno (line number is used only if module or filename are available)
+              29
+          frame (non app frame)
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'django/views/decorators/csrf.py'
+            context-line*
+              u'        return view_func(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'wrapped_view'
+            lineno (line number is used only if module or filename are available)
+              57
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'django/utils/decorators.py'
+            context-line*
+              u'                return func(self, *args2, **kwargs2)'
+            function (function name is used only if module or filename are available)
+              u'bound_func'
+            lineno (line number is used only if module or filename are available)
+              25
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'sentry/web/frontend/release_webhook.py'
+            context-line*
+              u'        return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'dispatch'
+            lineno (line number is used only if module or filename are available)
+              37
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'django/views/generic/base.py'
+            context-line*
+              u'        return handler(request, *args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'dispatch'
+            lineno (line number is used only if module or filename are available)
+              87
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'sentry/web/frontend/release_webhook.py'
+            context-line*
+              u'            hook.handle(request)'
+            function (function name is used only if module or filename are available)
+              u'post'
+            lineno (line number is used only if module or filename are available)
+              127
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'sentry_plugins/heroku/plugin.py'
+            context-line*
+              u"        email = request.POST['user']"
+            function (function name is used only if module or filename are available)
+              u'handle'
+            lineno (line number is used only if module or filename are available)
+              17
+          frame (non app frame)
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'django/utils/datastructures.py'
+            context-line*
+              u'            raise MultiValueDictKeyError(repr(key))'
+            function (function name is used only if module or filename are available)
+              u'__getitem__'
+            lineno (line number is used only if module or filename are available)
+              301
+        type*
+          u'MultiValueDictKeyError'
+        value*
+          u'"\'user\'"'
+--------------------------------------------------------------------------
+system:
+  hash: '20fc367de6e7f2dcfd2f08ddd4fd8618'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'django/core/handlers/base.py'
+            context-line*
+              u'                    response = wrapped_callback(request, *callback_args, **callback_kwargs)'
+            function (function name is used only if module or filename are available)
+              u'get_response'
+            lineno (line number is used only if module or filename are available)
+              112
+          frame*
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'django/views/generic/base.py'
+            context-line*
+              u'            return self.dispatch(request, *args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'view'
+            lineno (line number is used only if module or filename are available)
+              69
+          frame*
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'django/utils/decorators.py'
+            context-line*
+              u'            return bound_func(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'_wrapper'
+            lineno (line number is used only if module or filename are available)
+              29
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'django/views/decorators/csrf.py'
+            context-line*
+              u'        return view_func(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'wrapped_view'
+            lineno (line number is used only if module or filename are available)
+              57
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'django/utils/decorators.py'
+            context-line*
+              u'                return func(self, *args2, **kwargs2)'
+            function (function name is used only if module or filename are available)
+              u'bound_func'
+            lineno (line number is used only if module or filename are available)
+              25
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'sentry/web/frontend/release_webhook.py'
+            context-line*
+              u'        return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'dispatch'
+            lineno (line number is used only if module or filename are available)
+              37
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'django/views/generic/base.py'
+            context-line*
+              u'        return handler(request, *args, **kwargs)'
+            function (function name is used only if module or filename are available)
+              u'dispatch'
+            lineno (line number is used only if module or filename are available)
+              87
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'sentry/web/frontend/release_webhook.py'
+            context-line*
+              u'            hook.handle(request)'
+            function (function name is used only if module or filename are available)
+              u'post'
+            lineno (line number is used only if module or filename are available)
+              127
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'sentry_plugins/heroku/plugin.py'
+            context-line*
+              u"        email = request.POST['user']"
+            function (function name is used only if module or filename are available)
+              u'handle'
+            lineno (line number is used only if module or filename are available)
+              17
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'django/utils/datastructures.py'
+            context-line*
+              u'            raise MultiValueDictKeyError(repr(key))'
+            function (function name is used only if module or filename are available)
+              u'__getitem__'
+            lineno (line number is used only if module or filename are available)
+              301
+        type*
+          u'MultiValueDictKeyError'
+        value (stacktrace and type take precedence)
+          u'"\'user\'"'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/python_grouping_enhancer_away_from_crash.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/python_grouping_enhancer_away_from_crash.pysnap
new file mode 100644
index 0000000000..d76115619d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/python_grouping_enhancer_away_from_crash.pysnap
@@ -0,0 +1,162 @@
+---
+created: '2019-05-10T11:49:06.011380Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '3871df283cbb705bfcfd22a44039a6d7'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'get_response'
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'view'
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'_wrapper'
+          frame (non app frame)
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'csrf.py'
+            function*
+              u'wrapped_view'
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'bound_func'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'dispatch'
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'dispatch'
+          frame*
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'post'
+          frame*
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'plugin.py'
+            function*
+              u'handle'
+          frame (non app frame)
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'datastructures.py'
+            function*
+              u'__getitem__'
+        type*
+          u'MultiValueDictKeyError'
+--------------------------------------------------------------------------
+system:
+  hash: '193e32de84a65a6423cc047e47619ab8'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'get_response'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'view'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'_wrapper'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'csrf.py'
+            function*
+              u'wrapped_view'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'bound_func'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'dispatch'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'dispatch'
+          frame*
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'post'
+          frame*
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'plugin.py'
+            function*
+              u'handle'
+          frame*
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'datastructures.py'
+            function*
+              u'__getitem__'
+        type*
+          u'MultiValueDictKeyError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/python_grouping_enhancer_towards_crash.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/python_grouping_enhancer_towards_crash.pysnap
new file mode 100644
index 0000000000..381a1f90ae
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/python_grouping_enhancer_towards_crash.pysnap
@@ -0,0 +1,162 @@
+---
+created: '2019-05-10T12:07:52.662590Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'get_response'
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'view'
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'_wrapper'
+          frame (non app frame)
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'csrf.py'
+            function*
+              u'wrapped_view'
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'bound_func'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'dispatch'
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'dispatch'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'post'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'plugin.py'
+            function*
+              u'handle'
+          frame (non app frame)
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'datastructures.py'
+            function*
+              u'__getitem__'
+        type*
+          u'MultiValueDictKeyError'
+--------------------------------------------------------------------------
+system:
+  hash: '761cbc1236089dd8bd96706c896d7087'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'get_response'
+          frame*
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'view'
+          frame*
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'_wrapper'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'csrf.py'
+            function*
+              u'wrapped_view'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'bound_func'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'dispatch'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'dispatch'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'post'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'plugin.py'
+            function*
+              u'handle'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'datastructures.py'
+            function*
+              u'__getitem__'
+        type*
+          u'MultiValueDictKeyError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/python_grouping_enhancer_away_from_crash.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/python_grouping_enhancer_away_from_crash.pysnap
new file mode 100644
index 0000000000..3cc3a9de8f
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/python_grouping_enhancer_away_from_crash.pysnap
@@ -0,0 +1,166 @@
+---
+created: '2019-05-10T11:49:07.311072Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '3871df283cbb705bfcfd22a44039a6d7'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'get_response'
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'view'
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'_wrapper'
+          frame (non app frame)
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'csrf.py'
+            function*
+              u'wrapped_view'
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'bound_func'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'dispatch'
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'dispatch'
+          frame*
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'post'
+          frame*
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'plugin.py'
+            function*
+              u'handle'
+          frame (non app frame)
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'datastructures.py'
+            function*
+              u'__getitem__'
+        type*
+          u'MultiValueDictKeyError'
+        value (ignored because stacktrace takes precedence)
+          u'"\'user\'"'
+--------------------------------------------------------------------------
+system:
+  hash: '193e32de84a65a6423cc047e47619ab8'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'get_response'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'view'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'_wrapper'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'csrf.py'
+            function*
+              u'wrapped_view'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'bound_func'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'dispatch'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'dispatch'
+          frame*
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'post'
+          frame*
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'plugin.py'
+            function*
+              u'handle'
+          frame*
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'datastructures.py'
+            function*
+              u'__getitem__'
+        type*
+          u'MultiValueDictKeyError'
+        value (ignored because stacktrace takes precedence)
+          u'"\'user\'"'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/python_grouping_enhancer_towards_crash.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/python_grouping_enhancer_towards_crash.pysnap
new file mode 100644
index 0000000000..c73b2483c8
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/python_grouping_enhancer_towards_crash.pysnap
@@ -0,0 +1,166 @@
+---
+created: '2019-05-10T12:07:54.009043Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'get_response'
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'view'
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'_wrapper'
+          frame (non app frame)
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'csrf.py'
+            function*
+              u'wrapped_view'
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'bound_func'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'dispatch'
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'dispatch'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'post'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'plugin.py'
+            function*
+              u'handle'
+          frame (non app frame)
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'datastructures.py'
+            function*
+              u'__getitem__'
+        type*
+          u'MultiValueDictKeyError'
+        value*
+          u'"\'user\'"'
+--------------------------------------------------------------------------
+system:
+  hash: '761cbc1236089dd8bd96706c896d7087'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'get_response'
+          frame*
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'view'
+          frame*
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'_wrapper'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'csrf.py'
+            function*
+              u'wrapped_view'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'bound_func'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'dispatch'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'dispatch'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'post'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'plugin.py'
+            function*
+              u'handle'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'datastructures.py'
+            function*
+              u'__getitem__'
+        type*
+          u'MultiValueDictKeyError'
+        value (ignored because stacktrace takes precedence)
+          u'"\'user\'"'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/python_grouping_enhancer_away_from_crash.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/python_grouping_enhancer_away_from_crash.pysnap
new file mode 100644
index 0000000000..dfb89cdea6
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/python_grouping_enhancer_away_from_crash.pysnap
@@ -0,0 +1,206 @@
+---
+created: '2019-05-10T11:49:08.768372Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '121caa876de75ec51bf72ed4c852cd75'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'get_response'
+            context-line*
+              u'response = wrapped_callback(request, *callback_args, **callback_kwargs)'
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'view'
+            context-line*
+              u'return self.dispatch(request, *args, **kwargs)'
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'_wrapper'
+            context-line*
+              u'return bound_func(*args, **kwargs)'
+          frame (non app frame)
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'csrf.py'
+            function*
+              u'wrapped_view'
+            context-line*
+              u'return view_func(*args, **kwargs)'
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'bound_func'
+            context-line*
+              u'return func(self, *args2, **kwargs2)'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'dispatch'
+            context-line*
+              u'return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)'
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'dispatch'
+            context-line*
+              u'return handler(request, *args, **kwargs)'
+          frame*
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'post'
+            context-line*
+              u'hook.handle(request)'
+          frame*
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'plugin.py'
+            function*
+              u'handle'
+            context-line*
+              u"email = request.POST['user']"
+          frame (non app frame)
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'datastructures.py'
+            function*
+              u'__getitem__'
+            context-line*
+              u'raise MultiValueDictKeyError(repr(key))'
+        type*
+          u'MultiValueDictKeyError'
+        value (ignored because stacktrace takes precedence)
+          u'"\'user\'"'
+--------------------------------------------------------------------------
+system:
+  hash: 'a5af2577d4caca8f983657c5d1919e14'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'get_response'
+            context-line*
+              u'response = wrapped_callback(request, *callback_args, **callback_kwargs)'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'view'
+            context-line*
+              u'return self.dispatch(request, *args, **kwargs)'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'_wrapper'
+            context-line*
+              u'return bound_func(*args, **kwargs)'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'csrf.py'
+            function*
+              u'wrapped_view'
+            context-line*
+              u'return view_func(*args, **kwargs)'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'bound_func'
+            context-line*
+              u'return func(self, *args2, **kwargs2)'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'dispatch'
+            context-line*
+              u'return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py - ranged))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'dispatch'
+            context-line*
+              u'return handler(request, *args, **kwargs)'
+          frame*
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'post'
+            context-line*
+              u'hook.handle(request)'
+          frame*
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'plugin.py'
+            function*
+              u'handle'
+            context-line*
+              u"email = request.POST['user']"
+          frame*
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'datastructures.py'
+            function*
+              u'__getitem__'
+            context-line*
+              u'raise MultiValueDictKeyError(repr(key))'
+        type*
+          u'MultiValueDictKeyError'
+        value (ignored because stacktrace takes precedence)
+          u'"\'user\'"'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/python_grouping_enhancer_towards_crash.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/python_grouping_enhancer_towards_crash.pysnap
new file mode 100644
index 0000000000..3b8cabb57a
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/python_grouping_enhancer_towards_crash.pysnap
@@ -0,0 +1,206 @@
+---
+created: '2019-05-10T12:07:55.361414Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'get_response'
+            context-line*
+              u'response = wrapped_callback(request, *callback_args, **callback_kwargs)'
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'view'
+            context-line*
+              u'return self.dispatch(request, *args, **kwargs)'
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'_wrapper'
+            context-line*
+              u'return bound_func(*args, **kwargs)'
+          frame (non app frame)
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'csrf.py'
+            function*
+              u'wrapped_view'
+            context-line*
+              u'return view_func(*args, **kwargs)'
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'bound_func'
+            context-line*
+              u'return func(self, *args2, **kwargs2)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'dispatch'
+            context-line*
+              u'return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)'
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'dispatch'
+            context-line*
+              u'return handler(request, *args, **kwargs)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'post'
+            context-line*
+              u'hook.handle(request)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'plugin.py'
+            function*
+              u'handle'
+            context-line*
+              u"email = request.POST['user']"
+          frame (non app frame)
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'datastructures.py'
+            function*
+              u'__getitem__'
+            context-line*
+              u'raise MultiValueDictKeyError(repr(key))'
+        type*
+          u'MultiValueDictKeyError'
+        value*
+          u'"\'user\'"'
+--------------------------------------------------------------------------
+system:
+  hash: '90888e813b09fa25061af2883c0fb9bd'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'get_response'
+            context-line*
+              u'response = wrapped_callback(request, *callback_args, **callback_kwargs)'
+          frame*
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'view'
+            context-line*
+              u'return self.dispatch(request, *args, **kwargs)'
+          frame*
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'_wrapper'
+            context-line*
+              u'return bound_func(*args, **kwargs)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'csrf.py'
+            function*
+              u'wrapped_view'
+            context-line*
+              u'return view_func(*args, **kwargs)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'bound_func'
+            context-line*
+              u'return func(self, *args2, **kwargs2)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'dispatch'
+            context-line*
+              u'return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'dispatch'
+            context-line*
+              u'return handler(request, *args, **kwargs)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'post'
+            context-line*
+              u'hook.handle(request)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'plugin.py'
+            function*
+              u'handle'
+            context-line*
+              u"email = request.POST['user']"
+          frame (ignored by grouping enhancement rule (function:wrapped_view - ranged))
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'datastructures.py'
+            function*
+              u'__getitem__'
+            context-line*
+              u'raise MultiValueDictKeyError(repr(key))'
+        type*
+          u'MultiValueDictKeyError'
+        value (ignored because stacktrace takes precedence)
+          u'"\'user\'"'
