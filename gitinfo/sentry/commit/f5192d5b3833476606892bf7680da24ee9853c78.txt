commit f5192d5b3833476606892bf7680da24ee9853c78
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Oct 7 13:51:40 2016 -0700

    Remove old `sentry celery` commands and cleanup celery setup (#4274)
    
    These have been deprecated now for many releases. It's time to remove
    them for good.

diff --git a/src/sentry/celery.py b/src/sentry/celery.py
index 6784298599..7bf67d1f81 100644
--- a/src/sentry/celery.py
+++ b/src/sentry/celery.py
@@ -1,18 +1,9 @@
 from __future__ import absolute_import
 
-import celery
-import os
-import os.path
-import sys
-
-# Add the project to the python path
-sys.path.insert(0, os.path.join(os.path.dirname(__file__), os.pardir))
-
-# Configure the application only if it seemingly isnt already configured
 from django.conf import settings
-if not settings.configured:
-    from sentry.runner import configure
-    configure()
+
+from celery import Celery
+from celery.app.task import Task
 
 from sentry.utils import metrics
 
@@ -63,7 +54,15 @@ def patch_thread_ident():
 patch_thread_ident()
 
 
-class Celery(celery.Celery):
+class SentryTask(Task):
+    def apply_async(self, *args, **kwargs):
+        with metrics.timer('jobs.delay', instance=self.name):
+            return Task.apply_async(self, *args, **kwargs)
+
+
+class SentryCelery(Celery):
+    task_cls = SentryTask
+
     def on_configure(self):
         from raven.contrib.django.models import client
         from raven.contrib.celery import register_signal, register_logger_signal
@@ -75,23 +74,6 @@ class Celery(celery.Celery):
         register_signal(client)
 
 
-app = Celery('sentry')
-
-
-OriginalTask = app.Task
-
-
-class SentryTask(OriginalTask):
-
-    def apply_async(self, *args, **kwargs):
-        key = 'jobs.delay'
-        instance = self.name
-        with metrics.timer(key, instance=instance):
-            return OriginalTask.apply_async(self, *args, **kwargs)
-
-app.Task = SentryTask
-
-# Using a string here means the worker will not have to
-# pickle the object when using Windows.
+app = SentryCelery('sentry')
 app.config_from_object(settings)
 app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)
diff --git a/src/sentry/management/commands/celery.py b/src/sentry/management/commands/celery.py
deleted file mode 100644
index c1e6bead8e..0000000000
--- a/src/sentry/management/commands/celery.py
+++ /dev/null
@@ -1,36 +0,0 @@
-from __future__ import absolute_import, unicode_literals
-
-from celery.bin import celery
-
-from sentry.celery import app
-from sentry.queue.command import CeleryCommand
-
-base = celery.CeleryCommand(app=app)
-
-
-# this is a reimplementation of the djcelery 'celery' command
-class Command(CeleryCommand):
-    """The celery command."""
-    help = 'DEPRECATED see `sentry run {worker,cron} instead.'
-    options = (CeleryCommand.options
-               + base.get_options()
-               + base.preload_options)
-
-    def run_from_argv(self, argv):
-        from sentry.runner.initializer import show_big_error
-        if 'worker' in argv:
-            show_big_error([
-                '`sentry celery worker` is deprecated.',
-                'Use `sentry run worker` instead.',
-            ])
-        elif 'beat' in argv:
-            show_big_error([
-                '`sentry celery beat` is deprecated.',
-                'Use `sentry run cron` instead.',
-            ])
-        argv = self.handle_default_options(argv)
-        if self.requires_model_validation:
-            self.validate()
-        base.execute_from_commandline(
-            ['{0[0]} {0[1]}'.format(argv)] + argv[2:],
-        )
diff --git a/src/sentry/management/commands/celerybeat.py b/src/sentry/management/commands/celerybeat.py
deleted file mode 100644
index 98cb525211..0000000000
--- a/src/sentry/management/commands/celerybeat.py
+++ /dev/null
@@ -1,25 +0,0 @@
-"""
-
-Start the celery clock service from the Django management command.
-
-"""
-from __future__ import absolute_import, unicode_literals
-
-from celery.bin import beat
-
-from sentry.celery import app
-from sentry.queue.command import CeleryCommand
-
-beat = beat.beat(app=app)
-
-
-# this is a reimplementation of the djcelery 'celerybeat' command
-class Command(CeleryCommand):
-    """Run the celery periodic task scheduler."""
-    options = (CeleryCommand.options
-               + beat.get_options()
-               + beat.preload_options)
-    help = 'Old alias to the "celery beat" command.'
-
-    def handle(self, *args, **options):
-        beat.run(*args, **options)
diff --git a/src/sentry/runner/__init__.py b/src/sentry/runner/__init__.py
index 3cd8cb4fe7..27728b95f2 100755
--- a/src/sentry/runner/__init__.py
+++ b/src/sentry/runner/__init__.py
@@ -98,7 +98,6 @@ def make_django_command(name, django_command=None, help=None):
 
 list(map(cli.add_command, (
     make_django_command('shell', help='Run a Python interactive interpreter.'),
-    make_django_command('celery', help='DEPRECATED see `sentry run` instead.'),
 )))
 
 
