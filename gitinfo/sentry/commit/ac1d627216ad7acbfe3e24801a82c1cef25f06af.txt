commit ac1d627216ad7acbfe3e24801a82c1cef25f06af
Author: Mark Story <mark@sentry.io>
Date:   Mon Jan 13 11:04:49 2020 -0500

    ref(eventstore) Remove the discover eventstore backend (#16370)
    
    I recently changed the snuba backend to use the discover dataset for
    next/prev id operations. This effectively mainlines the snuba_discover
    implementation. We no longer need to compare the two implementations as
    they are the same.

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 024dcb8c97..57deb8f20a 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1070,24 +1070,6 @@ SENTRY_SEARCH_OPTIONS = {}
 SENTRY_TSDB = "sentry.tsdb.dummy.DummyTSDB"
 SENTRY_TSDB_OPTIONS = {}
 
-# Event storage backend
-SENTRY_EVENTSTORE = "sentry.utils.services.ServiceDelegator"
-SENTRY_EVENTSTORE_OPTIONS = {
-    "backend_base": "sentry.eventstore.base.EventStorage",
-    "backends": {
-        "snuba": {
-            "path": "sentry.eventstore.snuba.SnubaEventStorage",
-            "executor": {"path": "sentry.utils.concurrent.SynchronousExecutor"},
-        },
-        "snuba_discover": {
-            "path": "sentry.eventstore.snuba_discover.SnubaDiscoverEventStorage",
-            "executor": {"path": "sentry.utils.services.ThreadedExecutor"},
-        },
-    },
-    "selector_func": "sentry.eventstore.utils.selector_func",
-    "callback_func": "sentry.eventstore.utils.callback_func",
-}
-
 SENTRY_NEWSLETTER = "sentry.newsletter.base.Newsletter"
 SENTRY_NEWSLETTER_OPTIONS = {}
 
diff --git a/src/sentry/eventstore/__init__.py b/src/sentry/eventstore/__init__.py
index 0c4a46fbc6..15d6395ee2 100644
--- a/src/sentry/eventstore/__init__.py
+++ b/src/sentry/eventstore/__init__.py
@@ -1,15 +1,10 @@
 from __future__ import absolute_import
 
-from django.conf import settings
-
 from sentry.utils.services import LazyServiceWrapper
 
 from .base import EventStorage, Filter  # NOQA
 
 backend = LazyServiceWrapper(
-    EventStorage,
-    settings.SENTRY_EVENTSTORE,
-    settings.SENTRY_EVENTSTORE_OPTIONS,
-    metrics_path="eventstore",
+    EventStorage, "sentry.eventstore.snuba.SnubaEventStorage", {}, metrics_path="eventstore"
 )
 backend.expose(locals())
diff --git a/src/sentry/eventstore/snuba_discover/__init__.py b/src/sentry/eventstore/snuba_discover/__init__.py
deleted file mode 100644
index e30c939eb5..0000000000
--- a/src/sentry/eventstore/snuba_discover/__init__.py
+++ /dev/null
@@ -1,3 +0,0 @@
-from __future__ import absolute_import
-
-from .backend import SnubaDiscoverEventStorage  # NOQA
diff --git a/src/sentry/eventstore/snuba_discover/backend.py b/src/sentry/eventstore/snuba_discover/backend.py
deleted file mode 100644
index d675c1ecc0..0000000000
--- a/src/sentry/eventstore/snuba_discover/backend.py
+++ /dev/null
@@ -1,107 +0,0 @@
-from __future__ import absolute_import
-
-import six
-from copy import deepcopy
-
-from sentry.utils import snuba
-from sentry.eventstore.base import EventStorage
-from sentry.eventstore.snuba.backend import (
-    ASC_ORDERING,
-    DESC_ORDERING,
-    EVENT_ID,
-    PROJECT_ID,
-    get_after_event_condition,
-    get_before_event_condition,
-    SnubaEventStorage,
-)
-from sentry.snuba.dataset import Dataset
-
-
-class SnubaDiscoverEventStorage(EventStorage):
-    """
-    Experimental backend that uses the Snuba Discover dataset instead of Events
-    or Transactions directly.
-    """
-
-    def get_events(self, *args, **kwargs):
-        return SnubaEventStorage().get_events(*args, **kwargs)
-
-    def get_event_by_id(self, *args, **kwargs):
-        return SnubaEventStorage().get_event_by_id(*args, **kwargs)
-
-    def get_earliest_event_id(self, event, filter):
-        filter = deepcopy(filter)
-        filter.conditions = filter.conditions or []
-        filter.conditions.extend(get_before_event_condition(event))
-        filter.end = event.datetime
-
-        return self.__get_event_id_from_filter(filter=filter, orderby=ASC_ORDERING)
-
-    def get_latest_event_id(self, event, filter):
-        filter = deepcopy(filter)
-        filter.conditions = filter.conditions or []
-        filter.conditions.extend(get_after_event_condition(event))
-        filter.start = event.datetime
-
-        return self.__get_event_id_from_filter(filter=filter, orderby=DESC_ORDERING)
-
-    def get_next_event_id(self, event, filter):
-        """
-        Returns (project_id, event_id) of a next event given a current event
-        and any filters/conditions. Returns None if no next event is found.
-        """
-        assert filter, "You must provide a filter"
-
-        if not event:
-            return None
-
-        filter = deepcopy(filter)
-        filter.conditions = filter.conditions or []
-        filter.conditions.extend(get_after_event_condition(event))
-        filter.start = event.datetime
-
-        return self.__get_event_id_from_filter(filter=filter, orderby=ASC_ORDERING)
-
-    def get_prev_event_id(self, event, filter):
-        """
-        Returns (project_id, event_id) of a previous event given a current event
-        and a filter. Returns None if no previous event is found.
-        """
-        assert filter, "You must provide a filter"
-
-        if not event:
-            return None
-
-        filter = deepcopy(filter)
-        filter.conditions = filter.conditions or []
-        filter.conditions.extend(get_before_event_condition(event))
-        filter.end = event.datetime
-
-        return self.__get_event_id_from_filter(filter=filter, orderby=DESC_ORDERING)
-
-    def __get_event_id_from_filter(self, filter=None, orderby=None):
-        columns = [EVENT_ID, PROJECT_ID]
-
-        try:
-            result = snuba.dataset_query(
-                selected_columns=columns,
-                conditions=filter.conditions,
-                filter_keys=filter.filter_keys,
-                start=filter.start,
-                end=filter.end,
-                limit=1,
-                referrer="eventstore.discover_dataset.get_next_or_prev_event_id",
-                orderby=orderby,
-                dataset=Dataset.Discover,
-            )
-        except (snuba.QueryOutsideRetentionError, snuba.QueryOutsideGroupActivityError):
-            # This can happen when the date conditions for paging
-            # and the current event generate impossible conditions.
-            return None
-
-        if "error" in result or len(result["data"]) == 0:
-            return None
-
-        row = result["data"][0]
-
-        return (six.text_type(row["project_id"]), six.text_type(row["event_id"]))
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index ffd8009b36..4dfeb79d46 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-from copy import deepcopy
 import mock
 import os
 
@@ -102,13 +101,6 @@ def pytest_configure(config):
         settings.SENTRY_TSDB = "sentry.tsdb.redissnuba.RedisSnubaTSDB"
         settings.SENTRY_EVENTSTREAM = "sentry.eventstream.snuba.SnubaEventStream"
 
-    # Use the synchronous executor to make multiple backends easier to test
-    eventstore_options = deepcopy(settings.SENTRY_EVENTSTORE_OPTIONS)
-    eventstore_options["backends"]["snuba_discover"]["executor"][
-        "path"
-    ] = "sentry.utils.concurrent.SynchronousExecutor"
-    settings.SENTRY_EVENTSTORE_OPTIONS = eventstore_options
-
     if not hasattr(settings, "SENTRY_OPTIONS"):
         settings.SENTRY_OPTIONS = {}
 
diff --git a/tests/sentry/eventstore/snuba_discover/__init__.py b/tests/sentry/eventstore/snuba_discover/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/tests/sentry/eventstore/snuba_discover/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/tests/sentry/eventstore/snuba_discover/test_backend.py b/tests/sentry/eventstore/snuba_discover/test_backend.py
deleted file mode 100644
index eddabfea12..0000000000
--- a/tests/sentry/eventstore/snuba_discover/test_backend.py
+++ /dev/null
@@ -1,186 +0,0 @@
-from __future__ import absolute_import
-
-import six
-import pytest
-
-from sentry.testutils import TestCase, SnubaTestCase
-from sentry.testutils.helpers.datetime import iso_format, before_now
-from sentry.eventstore.snuba_discover.backend import SnubaDiscoverEventStorage
-from sentry.eventstore.base import Filter
-
-from sentry.utils.samples import load_data
-
-
-class SnubaDiscoverEventStorageTest(TestCase, SnubaTestCase):
-    """
-    This is just a temporary copy/paste of eventstore.snuba.test_backend
-    """
-
-    def setUp(self):
-        super(SnubaDiscoverEventStorageTest, self).setUp()
-        self.min_ago = iso_format(before_now(minutes=1))
-        self.two_min_ago = iso_format(before_now(minutes=2))
-        self.project1 = self.create_project()
-        self.project2 = self.create_project()
-
-        self.event1 = self.store_event(
-            data={
-                "event_id": "a" * 32,
-                "type": "default",
-                "platform": "python",
-                "fingerprint": ["group1"],
-                "timestamp": self.two_min_ago,
-                "tags": {"foo": "1"},
-            },
-            project_id=self.project1.id,
-        )
-        self.event2 = self.store_event(
-            data={
-                "event_id": "b" * 32,
-                "type": "default",
-                "platform": "python",
-                "fingerprint": ["group1"],
-                "timestamp": self.min_ago,
-                "tags": {"foo": "1"},
-            },
-            project_id=self.project2.id,
-        )
-        self.event3 = self.store_event(
-            data={
-                "event_id": "c" * 32,
-                "type": "default",
-                "platform": "python",
-                "fingerprint": ["group2"],
-                "timestamp": self.min_ago,
-                "tags": {"foo": "1"},
-            },
-            project_id=self.project2.id,
-        )
-
-        event_data = load_data("transaction")
-        event_data["timestamp"] = iso_format(before_now(minutes=1))
-        event_data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=1))
-        event_data["event_id"] = "d" * 32
-
-        self.transaction_event = self.store_event(data=event_data, project_id=self.project2.id)
-
-        event_data_2 = load_data("transaction")
-        event_data_2["timestamp"] = iso_format(before_now(seconds=30))
-        event_data_2["start_timestamp"] = iso_format(before_now(seconds=31))
-
-        event_data_2["event_id"] = "e" * 32
-
-        self.transaction_event_2 = self.store_event(data=event_data_2, project_id=self.project2.id)
-
-        self.eventstore = SnubaDiscoverEventStorage()
-
-    def test_get_events(self):
-        events = self.eventstore.get_events(
-            filter=Filter(project_ids=[self.project1.id, self.project2.id])
-        )
-        assert len(events) == 5
-        # Default sort is timestamp desc, event_id desc
-        assert events[0].id == "e" * 32
-        assert events[1].id == "d" * 32
-        assert events[2].id == "c" * 32
-        assert events[3].id == "b" * 32
-        assert events[4].id == "a" * 32
-
-        # No events found
-        project = self.create_project()
-        events = self.eventstore.get_events(filter=Filter(project_ids=[project.id]))
-        assert events == []
-
-    def test_get_event_by_id(self):
-        # Get event with default columns
-        event = self.eventstore.get_event_by_id(self.project1.id, "a" * 32)
-
-        assert event.id == "a" * 32
-        assert event.event_id == "a" * 32
-        assert event.project_id == self.project1.id
-
-        # Get all columns
-        event = self.eventstore.get_event_by_id(
-            self.project2.id, "b" * 32, self.eventstore.full_columns
-        )
-        assert event.id == "b" * 32
-        assert event.event_id == "b" * 32
-        assert event.project_id == self.project2.id
-
-        # Get non existent event
-        event = self.eventstore.get_event_by_id(self.project2.id, "f" * 32)
-        assert event is None
-
-    def test_get_next_prev_event_id(self):
-        event = self.eventstore.get_event_by_id(self.project2.id, "b" * 32)
-
-        filter = Filter(project_ids=[self.project1.id, self.project2.id])
-
-        prev_event = self.eventstore.get_prev_event_id(event, filter=filter)
-
-        next_event = self.eventstore.get_next_event_id(event, filter=filter)
-
-        assert prev_event == (six.text_type(self.project1.id), "a" * 32)
-
-        # Events with the same timestamp are sorted by event_id
-        assert next_event == (six.text_type(self.project2.id), "c" * 32)
-
-        # Returns None if no event
-        assert self.eventstore.get_prev_event_id(None, filter=filter) is None
-        assert self.eventstore.get_next_event_id(None, filter=filter) is None
-
-    def test_get_next_prev_event_id_public_alias_conditions(self):
-        event = self.eventstore.get_event_by_id(self.project2.id, "b" * 32)
-
-        filter = Filter(
-            project_ids=[self.project2.id],
-            conditions=[["event.type", "=", "default"], ["project.id", "=", self.project2.id]],
-        )
-        prev_event = self.eventstore.get_prev_event_id(event, filter=filter)
-        next_event = self.eventstore.get_next_event_id(event, filter=filter)
-
-        assert prev_event is None
-        assert next_event == (six.text_type(self.project2.id), "c" * 32)
-
-    def test_get_latest_or_oldest_event_id(self):
-        # Returns a latest/oldest event
-        event = self.eventstore.get_event_by_id(self.project2.id, "b" * 32)
-        filter = Filter(project_ids=[self.project1.id, self.project2.id])
-        oldest_event = self.eventstore.get_earliest_event_id(event, filter=filter)
-        latest_event = self.eventstore.get_latest_event_id(event, filter=filter)
-        assert oldest_event == (six.text_type(self.project1.id), "a" * 32)
-        assert latest_event == (six.text_type(self.project2.id), "e" * 32)
-
-        # Returns none when no latest/oldest event that meets conditions
-        event = self.eventstore.get_event_by_id(self.project2.id, "b" * 32)
-        filter = Filter(project_ids=[self.project1.id], group_ids=[self.event2.group_id])
-        oldest_event = self.eventstore.get_earliest_event_id(event, filter=filter)
-        latest_event = self.eventstore.get_latest_event_id(event, filter=filter)
-        assert oldest_event is None
-        assert latest_event is None
-
-    def test_transaction_get_event_by_id(self):
-        event = self.eventstore.get_event_by_id(self.project2.id, self.transaction_event.event_id)
-
-        assert event.id == "d" * 32
-        assert event.get_event_type() == "transaction"
-        assert event.project_id == self.project2.id
-
-    @pytest.mark.skip(reason="Not yet implemented")
-    def test_transaction_get_next_prev_event_id(self):
-        filter = Filter(
-            project_ids=[self.project1.id, self.project2.id],
-            conditions=[["type", "=", "transaction"]],
-        )
-
-        event = self.eventstore.get_event_by_id(self.project2.id, "e" * 32)
-        prev_event = self.eventstore.get_prev_event_id(event, filter=filter)
-        next_event = self.eventstore.get_next_event_id(event, filter=filter)
-        assert prev_event == (six.text_type(self.project2.id), "d" * 32)
-        assert next_event is None
-
-        event = self.eventstore.get_event_by_id(self.project2.id, "d" * 32)
-        prev_event = self.eventstore.get_prev_event_id(event, filter=filter)
-        next_event = self.eventstore.get_next_event_id(event, filter=filter)
-        assert prev_event is None
-        assert next_event == (six.text_type(self.project2.id), "e" * 32)
