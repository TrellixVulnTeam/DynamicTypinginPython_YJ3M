commit 6e3a279e5e529ed6790325ad159a38a05b70dafe
Author: Danny Lee <dlee@sentry.io>
Date:   Tue May 12 16:55:59 2020 -0700

    feat(analytics): Extend metric.mark to accept a data field (#18752)
    
    This allows us to pass along data at start of the transaction, which may change
    by the end of the transaction.

diff --git a/src/sentry/static/sentry/app/api.tsx b/src/sentry/static/sentry/app/api.tsx
index 2c984915a4..a67a6c860d 100644
--- a/src/sentry/static/sentry/app/api.tsx
+++ b/src/sentry/static/sentry/app/api.tsx
@@ -252,7 +252,7 @@ export class Client {
     }
 
     const id: string = uniqueId();
-    metric.mark(`api-request-start-${id}`);
+    metric.mark({name: `api-request-start-${id}`});
 
     let fullUrl: string;
     if (path.indexOf(this.baseUrl) === -1) {
diff --git a/src/sentry/static/sentry/app/bootstrap.tsx b/src/sentry/static/sentry/app/bootstrap.tsx
index a54ce80db9..d55774b49f 100644
--- a/src/sentry/static/sentry/app/bootstrap.tsx
+++ b/src/sentry/static/sentry/app/bootstrap.tsx
@@ -85,7 +85,7 @@ if (window.__SENTRY__VERSION) {
 
 // Used for operational metrics to determine that the application js
 // bundle was loaded by browser.
-metric.mark('sentry-app-init');
+metric.mark({name: 'sentry-app-init'});
 
 // setup jquery for CSRF tokens
 jQuery.ajaxSetup({
diff --git a/src/sentry/static/sentry/app/components/asyncComponent.tsx b/src/sentry/static/sentry/app/components/asyncComponent.tsx
index 7e1394de35..61fca8b7eb 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.tsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.tsx
@@ -115,7 +115,7 @@ export default class AsyncComponent<
       hasMeasured: false,
     };
     if (props.routes && props.routes) {
-      metric.mark(`async-component-${getRouteStringFromRoutes(props.routes)}`);
+      metric.mark({name: `async-component-${getRouteStringFromRoutes(props.routes)}`});
     }
   }
 
diff --git a/src/sentry/static/sentry/app/utils/analytics.tsx b/src/sentry/static/sentry/app/utils/analytics.tsx
index 2aee1f2344..18b27ba571 100644
--- a/src/sentry/static/sentry/app/utils/analytics.tsx
+++ b/src/sentry/static/sentry/app/utils/analytics.tsx
@@ -62,7 +62,17 @@ export const analytics: Hooks['analytics:event'] = (name, data) =>
   HookStore.get('analytics:event').forEach(cb => cb(name, data));
 
 type RecordMetric = Hooks['metrics:event'] & {
-  mark: (name: string) => void;
+  mark: (opts: {
+    /**
+     * Name of the metric event
+     */
+    name: string;
+    /**
+     * Additional data that will be sent with measure()
+     * This is useful if you want to track initial state
+     */
+    data?: object;
+  }) => void;
 
   measure: (opts: {
     /**
@@ -78,7 +88,8 @@ type RecordMetric = Hooks['metrics:event'] & {
      */
     end?: string;
     /**
-     * Additional data to send with metric event
+     * Additional data to send with metric event.
+     * If a key collide with the data in mark(), this will overwrite them
      */
     data?: object;
     /**
@@ -88,6 +99,11 @@ type RecordMetric = Hooks['metrics:event'] & {
   }) => void;
 };
 
+/**
+ * Used to pass data between metric.mark() and metric.measure()
+ */
+const metricDataStore = new Map<string, object>();
+
 /**
  * Record metrics.
  */
@@ -102,20 +118,25 @@ const CAN_MARK =
   typeof window.performance.getEntriesByName === 'function' &&
   typeof window.performance.clearMeasures === 'function';
 
-metric.mark = function metricMark(name) {
+metric.mark = function metricMark({name, data = {}}) {
   // Just ignore if browser is old enough that it doesn't support this
   if (!CAN_MARK) {
     return;
   }
 
+  if (!name) {
+    throw new Error('Invalid argument provided to `metric.mark`');
+  }
+
   window.performance.mark(name);
+  metricDataStore.set(name, data);
 };
 
 /**
  * Performs a measurement between `start` and `end` (or now if `end` is not
  * specified) Calls `metric` with `name` and the measured time difference.
  */
-metric.measure = function metricMeasure({name, start, end, data, noCleanup} = {}) {
+metric.measure = function metricMeasure({name, start, end, data = {}, noCleanup} = {}) {
   // Just ignore if browser is old enough that it doesn't support this
   if (!CAN_MARK) {
     return;
@@ -143,16 +164,20 @@ metric.measure = function metricMeasure({name, start, end, data, noCleanup} = {}
   }
 
   performance.measure(name, start, endMarkName);
+  const startData = metricDataStore.get(start) || {};
 
   // Retrieve measurement entries
   performance
     .getEntriesByName(name, 'measure')
-    .forEach(measurement => metric(measurement.name, measurement.duration, data));
+    .forEach(measurement =>
+      metric(measurement.name, measurement.duration, {...startData, ...data})
+    );
 
   // By default, clean up measurements
   if (!noCleanup) {
     performance.clearMeasures(name);
     performance.clearMarks(start);
     performance.clearMarks(endMarkName);
+    metricDataStore.delete(start);
   }
 };
diff --git a/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx b/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx
index 7c67910b02..036cc1f412 100644
--- a/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx
+++ b/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx
@@ -45,7 +45,7 @@ const withTeamsForUser = <P extends InjectedTeamsProps>(
       });
 
       try {
-        metric.mark('user-teams-fetch-start');
+        metric.mark({name: 'user-teams-fetch-start'});
         const teamsWithProjects: TeamWithProjects[] = await this.props.api.requestPromise(
           this.getUsersTeamsEndpoint()
         );
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index d60370adb2..a5d0fb1974 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -84,7 +84,7 @@ class Table extends React.PureComponent<TableProps, TableState> {
     setError(undefined);
 
     this.setState({isLoading: true, tableFetchID});
-    metric.mark(`discover-events-start-${apiPayload.query}`);
+    metric.mark({name: `discover-events-start-${apiPayload.query}`});
 
     this.props.api
       .requestPromise(url, {
diff --git a/src/sentry/static/sentry/app/views/organizationContext.jsx b/src/sentry/static/sentry/app/views/organizationContext.jsx
index 7ea9841306..6576fd5f31 100644
--- a/src/sentry/static/sentry/app/views/organizationContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationContext.jsx
@@ -176,7 +176,7 @@ const OrganizationContext = createReactClass({
       return;
     }
 
-    metric.mark('organization-details-fetch-start');
+    metric.mark({name: 'organization-details-fetch-start'});
     fetchOrganizationDetails(
       this.props.api,
       this.getOrganizationSlug(),
