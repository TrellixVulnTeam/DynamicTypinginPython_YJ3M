commit e503e9a5dc06e308be9dbf8acfc287051833dd6f
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Jan 10 11:59:09 2019 -0800

    ref(discover): Rename `getChartDataWithPercentages` to `getChartDataForWidgets` (#11434)
    
    We do not always want to calculate percentages. Make this function widget specific.

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
index fa6d7b8b2e..5fecceb06b 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
@@ -33,30 +33,34 @@ export function getChartData(data, query) {
 }
 
 /**
- * Returns data formatted for charts, with each aggregation representing a series.
+ * Returns data formatted for widgets, with each aggregation representing a series.
  * Includes each aggregation's series relative percentage to total within that aggregation.
  *
  * @param {Array} data Data returned from Snuba
  * @param {Object} query Query state corresponding to data
+ * @param {Object} options Options object
+ * @param {Boolean} options.includePercentages Include percentages data
  * @returns {Array}
  */
-export function getChartDataWithPercentages(data, query) {
+export function getChartDataForWidget(data, query, options = {}) {
   const {fields} = query;
 
   const totalsBySeries = new Map();
 
-  query.aggregations.forEach(aggregation => {
-    totalsBySeries.set(
-      aggregation[2],
-      data.reduce((acc, res) => {
-        acc += res[aggregation[2]];
-        return acc;
-      }, 0)
-    );
-  });
+  if (options.includePercentages) {
+    query.aggregations.forEach(aggregation => {
+      totalsBySeries.set(
+        aggregation[2],
+        data.reduce((acc, res) => {
+          acc += res[aggregation[2]];
+          return acc;
+        }, 0)
+      );
+    });
+  }
 
   return query.aggregations.map(aggregation => {
-    const total = totalsBySeries.get(aggregation[2]);
+    const total = options.includePercentages && totalsBySeries.get(aggregation[2]);
     return {
       seriesName: aggregation[2],
       data: data.map(res => {
@@ -65,7 +69,7 @@ export function getChartDataWithPercentages(data, query) {
           name: fields.map(field => `${res[field]}`).join(' '),
         };
 
-        if (total) {
+        if (options.includePercentages && total) {
           obj.percentage = Math.round(res[aggregation[2]] / total * 10000) / 100;
         }
 
diff --git a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
index 14ce73d543..da7126a9dc 100644
--- a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
@@ -2,7 +2,7 @@ import {mount} from 'enzyme';
 
 import {
   getChartData,
-  getChartDataWithPercentages,
+  getChartDataForWidget,
   getChartDataByDay,
   getDisplayValue,
   getDisplayText,
@@ -48,7 +48,7 @@ describe('Utils', function() {
     });
   });
 
-  describe('getChartDataWithPercentages()', function() {
+  describe('getChartDataForWidget()', function() {
     const raw = [
       {count: 2, uniq_id: 1, 'project.id': 5, environment: null},
       {count: 2, uniq_id: 3, 'project.id': 5, environment: 'staging'},
@@ -82,7 +82,9 @@ describe('Utils', function() {
         },
       ];
 
-      expect(getChartDataWithPercentages(raw, query)).toEqual(expected);
+      expect(getChartDataForWidget(raw, query, {includePercentages: true})).toEqual(
+        expected
+      );
     });
   });
 
