commit 8118f83983932091db31322a65fd0c6b956ef346
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Oct 16 14:42:10 2013 -0400

    Remove extra removal options as theyre rarely used

diff --git a/src/sentry/templates/sentry/projects/remove.html b/src/sentry/templates/sentry/projects/remove.html
index 31f3aaa054..430f2f6876 100644
--- a/src/sentry/templates/sentry/projects/remove.html
+++ b/src/sentry/templates/sentry/projects/remove.html
@@ -17,18 +17,6 @@
                 <button type="submit" class="btn btn-danger">{% trans "Confirm" %}</button> <a href="{% url 'sentry-manage-project' project.team.slug project.slug %}" class="btn">{% trans "Cancel" %}</a>
             </fieldset>
         </form>
-        <script>
-        (function(){
-            $('input[name="removal_type"]').change(function(){
-                $el = $(this);
-                if ($el.val() == 2 && $el.is(':checked')) {
-                    $('.control-group[data-name="project"]').show();
-                } else {
-                    $('.control-group[data-name="project"]').hide();
-                }
-            }).change();
-        }());
-        </script>
         <style>
         .control-group[data-name="project"] {
             margin-left: 20px;
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index 0fa1c6b63b..f3237f8c7b 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -14,7 +14,7 @@ from sentry.constants import EMPTY_PASSWORD_VALUES
 from sentry.models import Project, ProjectOption, User
 from sentry.permissions import can_set_public_projects
 from sentry.web.forms.fields import (
-    RadioFieldRenderer, UserField, OriginsField, RangeField, get_team_choices)
+    UserField, OriginsField, RangeField, get_team_choices)
 
 
 BLANK_CHOICE = [("", "")]
@@ -65,38 +65,17 @@ class NewProjectAdminForm(NewProjectForm):
 
 
 class RemoveProjectForm(forms.Form):
-    removal_type = forms.ChoiceField(choices=(
-        ('1', _('Remove all attached events.')),
-        ('2', _('Migrate events to another project.')),
-        # ('3', _('Hide this project.')),
-    ), widget=forms.RadioSelect(renderer=RadioFieldRenderer))
-    project = forms.ChoiceField(choices=(), required=False)
-    password = forms.CharField(label=_("Password"), widget=forms.PasswordInput, help_text=_("Confirm your identity by entering your password."))
+    password = forms.CharField(
+        label=_("Password"), widget=forms.PasswordInput,
+        help_text=_("Confirm your identity by entering your password."))
 
     def __init__(self, user, project_list, *args, **kwargs):
         super(RemoveProjectForm, self).__init__(*args, **kwargs)
         self.user = user
-        if not project_list:
-            del self.fields['project']
-            self.fields['removal_type'].choices = filter(lambda x: x[0] != '2', self.fields['removal_type'].choices)
-        else:
-            self.fields['project'].choices = [(p.pk, p.name) for p in project_list]
-            self.fields['project'].widget.choices = self.fields['project'].choices
-
         # HACK: don't require current password if they don't have one
         if self.user.password in EMPTY_PASSWORD_VALUES:
             del self.fields['password']
 
-    def clean(self):
-        data = self.cleaned_data
-        if data.get('removal_type') == 2 and not data.get('project'):
-            raise forms.ValidationError(_('You must select a project to migrate data'))
-        return data
-
-    def clean_project(self):
-        project_id = self.cleaned_data['project']
-        return Project.objects.get_from_cache(id=project_id)
-
     def clean_password(self):
         """
         Validates that the old_password field is correct.
diff --git a/src/sentry/web/frontend/projects/remove.py b/src/sentry/web/frontend/projects/remove.py
index b485859006..02bb6a1756 100644
--- a/src/sentry/web/frontend/projects/remove.py
+++ b/src/sentry/web/frontend/projects/remove.py
@@ -12,9 +12,9 @@ from django.http import HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.constants import MEMBER_OWNER, STATUS_HIDDEN
-from sentry.models import Project
+from sentry.constants import MEMBER_OWNER
 from sentry.permissions import can_remove_project
+from sentry.tasks.deletion import delete_project
 from sentry.web.decorators import has_access
 from sentry.web.forms.projects import RemoveProjectForm
 from sentry.web.helpers import render_to_response
@@ -26,28 +26,15 @@ def remove_project(request, team, project):
     if not can_remove_project(request.user, project):
         return HttpResponseRedirect(reverse('sentry'))
 
-    project_list = filter(lambda x: x != project, Project.objects.get_for_user(request.user))
-
-    form = RemoveProjectForm(request.user, project_list, request.POST or None)
+    form = RemoveProjectForm(request.user, request.POST or None)
 
     if form.is_valid():
-        removal_type = form.cleaned_data['removal_type']
-        if removal_type == '1':
-            from sentry.tasks.deletion import delete_project
-
-            delete_project.delay(object_id=project.id)
-            project.update(status=STATUS_HIDDEN)
-
-            messages.add_message(
-                request, messages.SUCCESS,
-                _('Deletion has been queued and should occur shortly.'))
-        elif removal_type == '2':
-            new_project = form.cleaned_data['project']
-            project.merge_to(new_project)
-        elif removal_type == '3':
-            project.update(status=STATUS_HIDDEN)
-        else:
-            raise ValueError(removal_type)
+        delete_project.delay(object_id=project.id)
+        # project.update(status=STATUS_HIDDEN)
+
+        messages.add_message(
+            request, messages.SUCCESS,
+            _('Deletion has been queued and will happen automatically.'))
 
         return HttpResponseRedirect(reverse('sentry-manage-team-projects', args=[project.team.slug]))
 
