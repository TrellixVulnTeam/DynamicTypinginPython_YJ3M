commit f9a77dcd1b03a7318a8611a26cb4493f7dcf6136
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 4 19:07:41 2014 -0700

    Use JSON serialization for redis cache

diff --git a/src/sentry/cache/redis.py b/src/sentry/cache/redis.py
index 9856e93884..528e5e6da0 100644
--- a/src/sentry/cache/redis.py
+++ b/src/sentry/cache/redis.py
@@ -12,6 +12,8 @@ from django.conf import settings
 from nydus.db import create_cluster
 from threading import local
 
+from sentry.utils import json
+
 
 class RedisCache(local):
     key_expire = 60 * 60  # 1 hour
@@ -33,11 +35,14 @@ class RedisCache(local):
 
     def set(self, key, value, timeout):
         with self.conn.map() as conn:
-            conn.set(key, value)
+            conn.set(key, json.dumps(value))
             conn.expire(key, timeout)
 
     def delete(self, key):
         self.conn.delete(key)
 
     def get(self, key):
-        return self.conn.get(key)
+        result = self.conn.get(key)
+        if result is not None:
+            result = json.loads(result)
+        return result
diff --git a/tests/sentry/cache/test_redis.py b/tests/sentry/cache/test_redis.py
index 6554c19725..bc8a6a564b 100644
--- a/tests/sentry/cache/test_redis.py
+++ b/tests/sentry/cache/test_redis.py
@@ -13,10 +13,10 @@ class RedisCacheTest(TestCase):
         })
 
     def test_integration(self):
-        self.backend.set('foo', 'bar', 50)
+        self.backend.set('foo', {'foo': 'bar'}, 50)
 
         result = self.backend.get('foo')
-        assert result == 'bar'
+        assert result == {'foo': 'bar'}
 
         self.backend.delete('foo')
 
