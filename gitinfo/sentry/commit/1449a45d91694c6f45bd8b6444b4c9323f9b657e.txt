commit 1449a45d91694c6f45bd8b6444b4c9323f9b657e
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Dec 26 16:35:49 2011 -0800

    Added the ability to remove projects (via hard delete, soft delete, and migrate)

diff --git a/bootstrap/lib/sentry.less b/bootstrap/lib/sentry.less
index e7567fd203..b7f19b5bc0 100644
--- a/bootstrap/lib/sentry.less
+++ b/bootstrap/lib/sentry.less
@@ -94,6 +94,9 @@
   width: 100%;
   .opacity(60);
 }
+.main-header .btn {
+  margin-top: 5px;
+}
 
 // Code styles
 
diff --git a/sentry/migrations/0026_auto__add_field_project_status.py b/sentry/migrations/0026_auto__add_field_project_status.py
new file mode 100644
index 0000000000..fef0731729
--- /dev/null
+++ b/sentry/migrations/0026_auto__add_field_project_status.py
@@ -0,0 +1,154 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding field 'Project.status'
+        db.add_column('sentry_project', 'status', self.gf('django.db.models.fields.PositiveIntegerField')(default=0, db_index=True), keep_default=False)
+
+
+    def backwards(self, orm):
+        
+        # Deleting field 'Project.status'
+        db.delete_column('sentry_project', 'status')
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.event': {
+            'Meta': {'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'logger', 'culprit', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectdomain': {
+            'Meta': {'unique_together': "(('project', 'domain'),)", 'object_name': 'ProjectDomain'},
+            'domain': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'domain_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.projectmember': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'ProjectMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'permissions': ('django.db.models.fields.BigIntegerField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'project_set'", 'to': "orm['auth.User']"})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index 5d6daaa27c..d66aa3730c 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -53,6 +53,8 @@ PERMISSIONS = (
     ('change_member', 'Change project members'),
     ('delete_member', 'Delete project members'),
     ('add_message', 'Store new events'),
+    ('change_project', 'Change project details'),
+    ('remove_project', 'Delete or merge project'),
 )
 PERMISSIONS_DICT = dict(PERMISSIONS)
 
@@ -62,6 +64,10 @@ class Project(Model):
     owner = models.ForeignKey(User, related_name="owned_project_set", null=True)
     public = models.BooleanField(default=False)
     date_added = models.DateTimeField(default=datetime.now)
+    status = models.PositiveIntegerField(default=0, choices=(
+        (0, 'Visible'),
+        (1, 'Hidden'),
+    ), db_index=True)
 
     objects = ProjectManager()
 
diff --git a/sentry/static/styles/bootstrap.css b/sentry/static/styles/bootstrap.css
index 0193641c94..8fd4fd4177 100644
--- a/sentry/static/styles/bootstrap.css
+++ b/sentry/static/styles/bootstrap.css
@@ -6,7 +6,7 @@
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Designed and built with all the love in the world @twitter by @mdo and @fat.
- * Date: Mon Dec 26 15:11:00 PST 2011
+ * Date: Mon Dec 26 16:27:02 PST 2011
  */
 /* Reset.less
  * Props to Eric Meyer (meyerweb.com) for his CSS reset file. We're using an adapted version here	that cuts out some of the reset HTML elements we will never need here (i.e., dfn, samp, etc).
@@ -2621,6 +2621,9 @@ button.btn::-moz-focus-inner, input[type=submit].btn::-moz-focus-inner {
   -moz-opacity: 0.6;
   opacity: 0.6;
 }
+.main-header .btn {
+  margin-top: 5px;
+}
 ol.context {
   margin: 0;
   list-style-position: inside;
diff --git a/sentry/static/styles/bootstrap.min.css b/sentry/static/styles/bootstrap.min.css
index f264e52e77..088a685369 100644
--- a/sentry/static/styles/bootstrap.min.css
+++ b/sentry/static/styles/bootstrap.min.css
@@ -375,6 +375,7 @@ button.btn::-moz-focus-inner,input[type=submit].btn::-moz-focus-inner{padding:0;
 .topbar input:focus,.topbar input.focused{background-color:#444;background-color:rgba(255, 255, 255, 0.3);font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-size:normal;font-weight:13px;line-height:1;padding:4px 9px;color:#ffffff;color:rgba(255, 255, 255, 0.75);border:1px solid #111;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;-webkit-box-shadow:inset 0 1px 2px rgba(0, 0, 0, 0.1),0 1px 0px rgba(255, 255, 255, 0.25);-moz-box-shadow:inset 0 1px 2px rgba(0, 0, 0, 0.1),0 1px 0px rgba(255, 255, 255, 0.25);box-shadow:inset 0 1px 2px rgba(0, 0, 0, 0.1),0 1px 0px rgba(255, 255, 255, 0.25);-webkit-transition:none;-moz-transition:none;-ms-transition:none;-o-transition:none;transition:none;color:#bfbfbf;text-shadow:none;}
 .main-header{background-color:#f5f5f5;padding:10px 20px 0px;margin:-20px -20px 20px;border-bottom:1px solid #ddd;-webkit-box-shadow:0 1px 0 rgba(255, 255, 255, 0.5);-moz-box-shadow:0 1px 0 rgba(255, 255, 255, 0.5);box-shadow:0 1px 0 rgba(255, 255, 255, 0.5);position:relative;}.main-header h1{margin-bottom:8px;}
 .main-header .sparkline{left:0;position:absolute;width:100%;filter:alpha(opacity=60);-khtml-opacity:0.6;-moz-opacity:0.6;opacity:0.6;}
+.main-header .btn{margin-top:5px;}
 ol.context{margin:0;list-style-position:inside;border:1px solid #ccc;border:1px solid rgba(0, 0, 0, 0.15);-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px;}ol.context>li{padding-left:20px;font-family:monospace;white-space:pre;color:rgba(0, 0, 0, 0.75);background-color:#f5f5f5;}ol.context>li>pre{background-color:inherit;color:rgba(0, 0, 0, 0.5);margin:0;padding:0;border:0;display:block;line-height:18px;font-size:12px;white-space:pre;white-space:pre-wrap;word-wrap:break-word;}
 ol.context>li.active{background-color:#ddd;}ol.context>li.active pre{color:#000000;}
 ol.context-line>li>span{float:right;}
diff --git a/sentry/templates/sentry/projects/list.html b/sentry/templates/sentry/projects/list.html
index 28a24a57bc..41b2d52564 100644
--- a/sentry/templates/sentry/projects/list.html
+++ b/sentry/templates/sentry/projects/list.html
@@ -4,6 +4,11 @@
 
 {% block title %}{% trans "Project List" %} | {{ block.super }}{% endblock %}
 
+{% block page_header %}
+    <a href="{% url sentry-new-project %}" class="btn pull-right primary">+ Create a new project</a>
+    {{ block.super }}
+{% endblock %}
+
 {% block heading %}
     {% trans "Project List" %}
 {% endblock %}
@@ -11,14 +16,39 @@
 {% block sidebar %}
 {% endblock %}
 
-{% block main %}
-    <p>You have access to the following projects:</p>
-    <ul>
-        {% for project in project_list %}
-            <li><a href="{% url sentry-manage-project project.pk %}">{{ project.name }}</a></li>
-        {% endfor %}
-    </ul>
-    {% if can_create_projects %}
-        <p><a href="{% url sentry-new-project %}">Create a new project</a></p>
-    {% endif %}
+{% block content %}
+    <div class="span16">
+        {% if project_list %}
+            <p>You have access to the following projects:</p>
+            <table class="zebra-striped bordered-table">
+                <colgroup>
+                    <col>
+                    <col style="width:150px;">
+                    <col style="width:100px;">
+                </colgroup>
+                <thead>
+                    <tr>
+                        <th>Name</th>
+                        <th>Owner</th>
+                        <th>Status</th>
+                    </tr>
+                </thead>
+                <tbody>
+                    {% for project in project_list %}
+                        <tr>
+                            <td><a href="{% url sentry-manage-project project.pk %}">{{ project.name }}</a></td>
+                            <td>{% if project.owner %}{{ project.owner.username }}{% else %}<em>no owner</em>{% endif %}</td>
+                            <td>{{ project.get_status_display }}</td>
+                        </tr>
+                    {% endfor %}
+                </tbody>
+            </table>
+        {% else %}
+            {% if can_create_projects %}
+                <div class="alert-message info">You do not have access to any projects. Would you like to <a href="{% url sentry-new-project %}">create a new project</a>?</div>
+            {% else %}
+                <div class="alert-message notice">You do not have access to any projects. Ask an administrator to add you as a member.</div>
+            {% endif %}
+        {% endif %}
+    </div>
 {% endblock %}
diff --git a/sentry/templates/sentry/projects/manage.html b/sentry/templates/sentry/projects/manage.html
index 46e057024b..3388c7559a 100644
--- a/sentry/templates/sentry/projects/manage.html
+++ b/sentry/templates/sentry/projects/manage.html
@@ -49,6 +49,7 @@
         </fieldset>
         <p class="actions">
             <button type="submit" class="btn primary">{% trans "Save Changes" %}</button>
+            <a href="{% url sentry-remove-project project.pk %}" class="btn danger">{% trans "Remove Project" %}</a>
         </p>
     </form>
     <div class="page-header">
diff --git a/sentry/templates/sentry/projects/remove.html b/sentry/templates/sentry/projects/remove.html
new file mode 100644
index 0000000000..70d087d04e
--- /dev/null
+++ b/sentry/templates/sentry/projects/remove.html
@@ -0,0 +1,36 @@
+{% extends "sentry/projects/manage.html" %}
+
+{% load i18n %}
+
+{% block title %}{% trans "Remove Project" %} | {{ block.super }}{% endblock %}
+
+{% block heading %}{% trans "Remove Project" %}{% endblock %}
+
+{% block main %}
+    <ul class="breadcrumb">
+        <li><a href="{% url sentry-project-list %}">{% trans "Projects" %}</a> <span class="divider">/</span></li>
+        <li><a href="{% url sentry-manage-project project.pk %}">{% trans "Manage Project" %}</a> <span class="divider">/</span></li>
+        <li class="active">{% trans "Remove Project" %}</li>
+    </ul>
+    <form class="form-stacked" action="" method="post">
+        {% csrf_token %}
+        <p>Select an option to remove this project:</p>
+        <div class="clearfix{% if form.removal_type.errors %} error{% endif %}">
+            {{ form.removal_type.label_tag }}
+            <div class="input">{{ form.removal_type }}</div>
+            {% if form.removal_type.help_text %}
+                <span class="help-block">{{ form.removal_type.help_text }}</span>
+            {% endif %}
+        </div>
+        <div class="clearfix{% if form.project.errors %} error{% endif %}">
+            {{ form.project.label_tag }}
+            <div class="input">{{ form.project }}</div>
+            {% if form.project.help_text %}
+                <span class="help-block">{{ form.project.help_text }}</span>
+            {% endif %}
+        </div>
+        <div class="actions">
+            <button type="submit" class="btn danger">{% trans "Confirm" %}</button> <a href="{% url sentry-manage-project project.pk %}" class="btn">{% trans "Cancel" %}</a>
+        </div>
+    </form>
+{% endblock %}
diff --git a/sentry/web/forms.py b/sentry/web/forms.py
index 98b031f2fb..31fb17da56 100644
--- a/sentry/web/forms.py
+++ b/sentry/web/forms.py
@@ -11,6 +11,19 @@ from sentry.models import Project, ProjectMember, PERMISSIONS
 from sentry.interfaces import Http
 
 
+class RadioFieldRenderer(forms.widgets.RadioFieldRenderer):
+    """
+    This is identical to Django's builtin widget, except that
+    it renders as <ul.inputs-list>. Would be great if we didn't
+    have to create this stupid code, but Django widgets are not
+    flexible.
+    """
+    def render(self):
+        """Outputs a <ul> for this set of radio fields."""
+        return mark_safe(u'<ul class="inputs-list">\n%s\n</ul>' % u'\n'.join([u'<li>%s</li>'
+                % force_unicode(w) for w in self]))
+
+
 class CheckboxSelectMultiple(forms.CheckboxSelectMultiple):
     """
     This is identical to Django's builtin widget, except that
@@ -84,6 +97,30 @@ class UserField(forms.CharField):
             raise forms.ValidationError(u'invalid user name')
 
 
+class RemoveProjectForm(forms.Form):
+    removal_type = forms.ChoiceField(choices=(
+        ('1', 'Remove all attached events.'),
+        ('2', 'Migrate events to another project.'),
+        ('3', 'Hide this project.'),
+    ), widget=forms.RadioSelect(renderer=RadioFieldRenderer))
+    project = forms.ChoiceField(choices=(), required=False)
+
+    def __init__(self, project_list, *args, **kwargs):
+        super(RemoveProjectForm, self).__init__(*args, **kwargs)
+        if not project_list:
+            del self.fields['project']
+            self.fields['removal_type'].choices = filter(lambda x: x[0] != 2, self.fields['removal_type'].choices)
+        else:
+            self.fields['project'].choices = [(p.pk, p.name) for p in project_list]
+            self.fields['project'].widget.choices = self.fields['project'].choices
+
+    def clean(self):
+        data = self.cleaned_data
+        if data.get('removal_type') == 2 and not data.get('project'):
+            raise forms.ValidationError('You must select a project to migrate data')
+        return data
+
+
 class NewProjectForm(forms.ModelForm):
     class Meta:
         fields = ('name',)
@@ -92,7 +129,7 @@ class NewProjectForm(forms.ModelForm):
 
 class EditProjectForm(forms.ModelForm):
     class Meta:
-        fields = ('name',)
+        fields = ('name', 'status')
         model = Project
 
 
diff --git a/sentry/web/frontend/projects.py b/sentry/web/frontend/projects.py
index fd8c0cacbb..1a846e1cb5 100644
--- a/sentry/web/frontend/projects.py
+++ b/sentry/web/frontend/projects.py
@@ -3,18 +3,20 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect, HttpResponseForbidden
 from django.views.decorators.csrf import csrf_protect
 
-from sentry.models import PERMISSIONS_DICT
+from sentry.models import PERMISSIONS_DICT, Group, Event, FilterValue, \
+     MessageFilterValue, MessageCountByMinute
 from sentry.web.decorators import login_required, can_manage, \
      permission_required
 from sentry.web.forms import EditProjectForm, NewProjectForm, \
-     EditProjectMemberForm, NewProjectMemberForm
-from sentry.web.helpers import render_to_response
+     EditProjectMemberForm, NewProjectMemberForm, RemoveProjectForm
+from sentry.web.helpers import render_to_response, get_project_list
 
 
 @login_required
 def project_list(request):
     return render_to_response('sentry/projects/list.html', {
         'can_create_projects': request.user.has_perm('sentry.add_project'),
+        'project_list': get_project_list(request.user, hidden=True).values(),
     }, request)
 
 
@@ -42,7 +44,46 @@ def new_project(request):
 
 
 @login_required
-@can_manage
+@can_manage('remove_project')
+@csrf_protect
+def remove_project(request, project):
+    project_list = filter(lambda x: x != project, get_project_list(request.user).itervalues())
+
+    form = RemoveProjectForm(project_list, request.POST or None)
+
+    if form.is_valid():
+        removal_type = form.cleaned_data['removal_type']
+        if removal_type == '1':
+            # TODO: this doesnt clean up the index
+            for model in (Event, Group, FilterValue, MessageFilterValue, MessageCountByMinute):
+                model.objects.filter(project=project).delete()
+            project.delete()
+        elif removal_type == '2':
+            new_project = form.cleaned_data['project']
+            for model in (Event, Group, MessageFilterValue, MessageCountByMinute):
+                model.objects.filter(project=project).update(project=new_project)
+            for fv in FilterValue.objects.filter(project=project):
+                FilterValue.objects.get_or_create(project=project, key=fv.key, value=fv.value)
+                fv.delete()
+            project.delete()
+        elif removal_type == '3':
+            project.update(status=1)
+        else:
+            raise ValueError(removal_type)
+
+        return HttpResponseRedirect(reverse('sentry-project-list'))
+
+    context = csrf(request)
+    context.update({
+        'form': form,
+        'project': project,
+    })
+
+    return render_to_response('sentry/projects/remove.html', context, request)
+
+
+@login_required
+@can_manage('change_project')
 @csrf_protect
 def manage_project(request, project):
     form = EditProjectForm(request.POST or None, instance=project)
diff --git a/sentry/web/helpers.py b/sentry/web/helpers.py
index f04c224aca..d27758c8f6 100644
--- a/sentry/web/helpers.py
+++ b/sentry/web/helpers.py
@@ -15,16 +15,28 @@ from sentry.conf import settings
 from sentry.models import ProjectMember, Project
 
 
-def get_project_list(user=None, flag=None):
+def get_project_list(user=None, flag=None, hidden=False):
     """
     Returns a set of all projects a user has some level of access to.
     """
-    projects = dict((p.pk, p) for p in Project.objects.filter(public=True))
-    if user.is_authenticated():
+
+    # First we fetch public projects
+    qs = Project.objects.filter(public=True)
+    if not hidden:
+        qs = qs.filter(status=0)
+    projects = dict((p.pk, p) for p in qs)
+
+    # If the user is authenticated, include their memberships
+    if user and user.is_authenticated():
+        qs = ProjectMember.objects.filter(user=user)\
+              .select_related('project')
+        if not hidden:
+            qs = qs.filter(project__status=0)
         projects.update(dict(
             (pm.project_id, pm.project)
-            for pm in ProjectMember.objects.filter(user=user).select_related('project')
+            for pm in qs
             if (not flag or pm.has_perm(flag))))
+
     return projects
 
 _LOGIN_URL = None
@@ -63,10 +75,9 @@ def render_to_string(template, context=None, request=None):
         'MESSAGES_PER_PAGE': settings.MESSAGES_PER_PAGE,
     })
     if request:
-        context.update({
-            'request': request,
-            'project_list': get_project_list(request.user).values(),
-        })
+        context['request'] = request
+        if 'project_list' not in context:
+            context['project_list'] = get_project_list(request.user).values()
 
     return loader.render_to_string(template, context)
 
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
index 7e21b4abb6..ed06d1484c 100644
--- a/sentry/web/urls.py
+++ b/sentry/web/urls.py
@@ -62,6 +62,7 @@ urlpatterns = patterns('',
     url(r'^projects$', projects.project_list, name='sentry-project-list'),
     url(r'^projects/new$', projects.new_project, name='sentry-new-project'),
     url(r'^projects/(?P<project_id>\d+)/edit$', projects.manage_project, name='sentry-manage-project'),
+    url(r'^projects/(?P<project_id>\d+)/remove$', projects.remove_project, name='sentry-remove-project'),
     url(r'^projects/(?P<project_id>\d+)/members/new$', projects.new_project_member, name='sentry-new-project-member'),
     url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/edit$', projects.edit_project_member, name='sentry-edit-project-member'),
     url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/remove$', projects.remove_project_member, name='sentry-remove-project-member'),
