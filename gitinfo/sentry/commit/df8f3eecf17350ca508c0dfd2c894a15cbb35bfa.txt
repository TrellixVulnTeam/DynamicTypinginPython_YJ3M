commit df8f3eecf17350ca508c0dfd2c894a15cbb35bfa
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Aug 30 10:47:38 2017 -0700

    oauth: Add logging on failures

diff --git a/src/sentry/web/frontend/oauth_authorize.py b/src/sentry/web/frontend/oauth_authorize.py
index 62f3c3a19c..39fae9b7fd 100644
--- a/src/sentry/web/frontend/oauth_authorize.py
+++ b/src/sentry/web/frontend/oauth_authorize.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import, print_function
 
+import logging
 import six
 
 from django.conf import settings
@@ -13,6 +14,8 @@ from sentry.models import (
 )
 from sentry.web.frontend.auth_login import AuthLoginView
 
+logger = logging.getLogger('sentry.api')
+
 
 class OAuthAuthorizeView(AuthLoginView):
     auth_required = False
@@ -37,7 +40,13 @@ class OAuthAuthorizeView(AuthLoginView):
         parts[4] = urlencode(query)
         return self.redirect(urlunparse(parts))
 
-    def error(self, response_type, redirect_uri, name, state=None):
+    def error(self, request, response_type, redirect_uri, name, state=None, client_id=None):
+        logging.error('oauth.authorize-error', extra={
+            'error_name': name,
+            'response_type': response_type,
+            'client_id': client_id,
+            'redirect_uri': redirect_uri,
+        })
         return self.redirect_response(
             response_type, redirect_uri, {
                 'error': name,
@@ -58,6 +67,12 @@ class OAuthAuthorizeView(AuthLoginView):
         force_prompt = request.GET.get('force_prompt')
 
         if not client_id:
+            logging.error('oauth.authorize-error', extra={
+                'error_name': 'unauthorized_client',
+                'response_type': response_type,
+                'client_id': client_id,
+                'redirect_uri': redirect_uri,
+            })
             return self.respond(
                 'sentry/oauth-error.html', {
                     'error': mark_safe('Missing or invalid <em>client_id</em> parameter.'),
@@ -70,6 +85,12 @@ class OAuthAuthorizeView(AuthLoginView):
                 status=ApiApplicationStatus.active,
             )
         except ApiApplication.DoesNotExist:
+            logging.error('oauth.authorize-error', extra={
+                'error_name': 'unauthorized_client',
+                'response_type': response_type,
+                'client_id': client_id,
+                'redirect_uri': redirect_uri,
+            })
             return self.respond(
                 'sentry/oauth-error.html', {
                     'error': mark_safe('Missing or invalid <em>client_id</em> parameter.'),
@@ -79,6 +100,12 @@ class OAuthAuthorizeView(AuthLoginView):
         if not redirect_uri:
             redirect_uri = application.get_default_redirect_uri()
         elif not application.is_valid_redirect_uri(redirect_uri):
+            logging.error('oauth.authorize-error', extra={
+                'error_name': 'invalid_request',
+                'response_type': response_type,
+                'client_id': client_id,
+                'redirect_uri': redirect_uri,
+            })
             return self.respond(
                 'sentry/oauth-error.html', {
                     'error': mark_safe('Missing or invalid <em>redirect_uri</em> parameter.'),
@@ -87,6 +114,8 @@ class OAuthAuthorizeView(AuthLoginView):
 
         if not application.is_allowed_response_type(response_type):
             return self.error(
+                request=request,
+                client_id=client_id,
                 response_type=response_type,
                 redirect_uri=redirect_uri,
                 name='unsupported_response_type',
@@ -98,6 +127,8 @@ class OAuthAuthorizeView(AuthLoginView):
             for scope in scopes:
                 if scope not in settings.SENTRY_SCOPES:
                     return self.error(
+                        request=request,
+                        client_id=client_id,
                         response_type=response_type,
                         redirect_uri=redirect_uri,
                         name='invalid_scope',
@@ -232,6 +263,8 @@ class OAuthAuthorizeView(AuthLoginView):
 
         elif op == 'deny':
             return self.error(
+                request=request,
+                client_id=payload['cid'],
                 response_type=response_type,
                 redirect_uri=redirect_uri,
                 name='access_denied',
diff --git a/src/sentry/web/frontend/oauth_token.py b/src/sentry/web/frontend/oauth_token.py
index 84d1f34cdd..3f9d0f4248 100644
--- a/src/sentry/web/frontend/oauth_token.py
+++ b/src/sentry/web/frontend/oauth_token.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import, print_function
 
+import logging
 import six
 
 from django.http import HttpResponse
@@ -12,6 +13,8 @@ from django.views.generic.base import View
 from sentry.models import (ApiApplication, ApiApplicationStatus, ApiGrant, ApiToken)
 from sentry.utils import json
 
+logger = logging.getLogger('sentry.api')
+
 
 class OAuthTokenView(View):
     @csrf_exempt
@@ -19,7 +22,16 @@ class OAuthTokenView(View):
     def dispatch(self, request, *args, **kwargs):
         return super(OAuthTokenView, self).dispatch(request, *args, **kwargs)
 
-    def error(self, name, status=400):
+    def error(self, request, name, status=400):
+        client_id = request.POST.get('client_id')
+        redirect_uri = request.POST.get('redirect_uri')
+
+        logging.error('oauth.token-error', extra={
+            'error_name': name,
+            'status': status,
+            'client_id': client_id,
+            'redirect_uri': redirect_uri,
+        })
         return HttpResponse(
             json.dumps({
                 'error': name,
@@ -37,10 +49,10 @@ class OAuthTokenView(View):
             code = request.POST.get('code')
 
             if not client_id:
-                return self.error('invalid_client')
+                return self.error(request, 'invalid_client')
 
             if not client_secret:
-                return self.error('invalid_client')
+                return self.error(request, 'invalid_client')
 
             try:
                 application = ApiApplication.objects.get(
@@ -48,23 +60,23 @@ class OAuthTokenView(View):
                     status=ApiApplicationStatus.active,
                 )
             except ApiApplication.DoesNotExist:
-                return self.error('invalid_client')
+                return self.error(request, 'invalid_client')
 
             if not constant_time_compare(client_secret, application.client_secret):
-                return self.error('invalid_client')
+                return self.error(request, 'invalid_client')
 
             try:
                 grant = ApiGrant.objects.get(application=application, code=code)
             except ApiGrant.DoesNotExist:
-                return self.error('invalid_grant')
+                return self.error(request, 'invalid_grant')
 
             if grant.is_expired():
-                return self.error('invalid_grant')
+                return self.error(request, 'invalid_grant')
 
             if not redirect_uri:
                 redirect_uri = application.get_default_redirect_uri()
             elif grant.redirect_uri != redirect_uri:
-                return self.error('invalid_grant')
+                return self.error(request, 'invalid_grant')
 
             token = ApiToken.from_grant(grant)
         elif grant_type == 'refresh_token':
@@ -74,17 +86,17 @@ class OAuthTokenView(View):
             client_secret = request.POST.get('client_secret')
 
             if not refresh_token:
-                return self.error('invalid_request')
+                return self.error(request, 'invalid_request')
 
             # TODO(dcramer): support scope
             if scope:
-                return self.error('invalid_request')
+                return self.error(request, 'invalid_request')
 
             if not client_id:
-                return self.error('invalid_client')
+                return self.error(request, 'invalid_client')
 
             if not client_secret:
-                return self.error('invalid_client')
+                return self.error(request, 'invalid_client')
 
             try:
                 application = ApiApplication.objects.get(
@@ -92,10 +104,10 @@ class OAuthTokenView(View):
                     status=ApiApplicationStatus.active,
                 )
             except ApiApplication.DoesNotExist:
-                return self.error('invalid_client')
+                return self.error(request, 'invalid_client')
 
             if not constant_time_compare(client_secret, application.client_secret):
-                return self.error('invalid_client')
+                return self.error(request, 'invalid_client')
 
             try:
                 token = ApiToken.objects.get(
@@ -103,11 +115,11 @@ class OAuthTokenView(View):
                     refresh_token=refresh_token,
                 )
             except ApiToken.DoesNotExist:
-                return self.error('invalid_grant')
+                return self.error(request, 'invalid_grant')
 
             token.refresh()
         else:
-            return self.error('unsupported_grant_type')
+            return self.error(request, 'unsupported_grant_type')
 
         return HttpResponse(
             json.dumps(
