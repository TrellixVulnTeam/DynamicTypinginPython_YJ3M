commit 69fd5d2885ef57e944eb5f64fa7f1fba639c08d1
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed May 18 14:15:24 2016 +0200

    Remember last used authenticator in a cookie for 31 days to improve sign in flows.

diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
index 3dd04a34b4..ae1474b907 100644
--- a/src/sentry/models/authenticator.py
+++ b/src/sentry/models/authenticator.py
@@ -118,16 +118,6 @@ class AuthenticatorManager(BaseManager):
             return False
         return Authenticator.objects.filter(user=user).first() is not None
 
-    def validate_otp(self, user, otp):
-        """Validates an OTP response against all interfaces.  If any accepts
-        it the success is logged and `True` is returned, `False` otherwise.
-        """
-        for interface in self.all_interfaces_for_user(user):
-            if interface.validate_otp(otp):
-                interface.authenticator.mark_used()
-                return True
-        return False
-
 
 AUTHENTICATOR_INTERFACES = {}
 AUTHENTICATOR_INTERFACES_BY_TYPE = {}
@@ -225,12 +215,6 @@ class AuthenticatorInterface(object):
         is only ever called for challenges emitted by the activation of this
         activation interface.
         """
-        if self.validate_response_impl(request, challenge, response):
-            self.authenticator.mark_used()
-            return True
-        return False
-
-    def validate_response_impl(self, request, challenge, response):
         return False
 
 
diff --git a/src/sentry/web/frontend/twofactor.py b/src/sentry/web/frontend/twofactor.py
index 7a122a6407..afbe4925dd 100644
--- a/src/sentry/web/frontend/twofactor.py
+++ b/src/sentry/web/frontend/twofactor.py
@@ -16,9 +16,15 @@ from sentry.models import Authenticator
 class TwoFactorAuthView(BaseView):
     auth_required = False
 
-    def perform_signin(self, request, user):
+    def perform_signin(self, request, user, interface=None):
         auth.login(request, user, passed_2fa=True)
-        return HttpResponseRedirect(auth.get_login_redirect(request))
+        rv = HttpResponseRedirect(auth.get_login_redirect(request))
+        if interface is not None:
+            interface.authenticator.mark_used()
+            if not interface.is_backup_interface:
+                rv.set_cookie('s2fai', str(interface.type),
+                              max_age=60 * 60 * 24 * 31, path='/')
+        return rv
 
     def fail_signin(self, request, user, form):
         # Ladies and gentlemen: he world's shittiest bruteforce
@@ -28,13 +34,28 @@ class TwoFactorAuthView(BaseView):
             _('Invalid confirmation code. Try again.')]
 
     def negotiate_interface(self, request, interfaces):
+        # If there is only one interface, just pick that one.
         if len(interfaces) == 1:
             return interfaces[0]
+
+        # In case an interface was remembered in a cookie, go with that
+        # one first.
+        interface_type = request.COOKIES.get('s2fai')
+        if interface_type:
+            for interface in interfaces:
+                if str(interface.type) == interface_type:
+                    return interface
+
+        # Next option is to go with the interface that was selected in the
+        # URL.
         interface_id = request.GET.get('interface')
         if interface_id:
             for interface in interfaces:
                 if interface.interface_id == interface_id:
                     return interface
+
+        # Fallback is to go the highest ranked as default.  This will be
+        # the most common path for first time users.
         return interfaces[0]
 
     def get_other_interfaces(self, selected, all):
@@ -46,6 +67,15 @@ class TwoFactorAuthView(BaseView):
                 rv.append(interface)
         return rv
 
+    def validate_otp(self, otp, selected_interface, all_interfaces=None):
+        if selected_interface.validate_otp(otp):
+            return selected_interface
+        for interface in all_interfaces or ():
+            if interface.interface_id != selected_interface.interface_id and \
+               interface.is_backup_interface and \
+               interface.validate_otp(otp):
+                return interface
+
     def handle(self, request):
         user = auth.get_pending_2fa_user(request)
         if user is None or request.user.is_authenticated():
@@ -72,8 +102,9 @@ class TwoFactorAuthView(BaseView):
         # If an OTP response was supplied, we try to make it pass.
         otp = request.POST.get('otp')
         if otp:
-            if Authenticator.objects.validate_otp(user, otp):
-                return self.perform_signin(request, user)
+            used_interface = self.validate_otp(otp, interface, interfaces)
+            if used_interface is not None:
+                return self.perform_signin(request, user, used_interface)
             self.fail_signin(request, user, form)
 
         # If a challenge and response exists, validate
@@ -82,7 +113,7 @@ class TwoFactorAuthView(BaseView):
             if response:
                 response = json.loads(response)
                 if interface.validate_response(request, challenge, response):
-                    return self.perform_signin(request, user)
+                    return self.perform_signin(request, user, interface)
                 self.fail_signin(request, user, form)
 
         return render_to_response(['sentry/twofactor_%s.html' %
