commit 308163bd8ed7a119d34156bc679285e624c780f0
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Sep 30 16:29:56 2015 -0700

    Allow default role and global access to be configurable with SSO

diff --git a/src/sentry/models/authprovider.py b/src/sentry/models/authprovider.py
index 47d3e3ad49..47adbb8ac2 100644
--- a/src/sentry/models/authprovider.py
+++ b/src/sentry/models/authprovider.py
@@ -12,7 +12,7 @@ from sentry.db.models import (
 from .organizationmember import OrganizationMember
 
 
-_organizationemmber_type_field = OrganizationMember._meta.get_field('type')
+_organizationmember_type_field = OrganizationMember._meta.get_field('type')
 
 
 class AuthProvider(Model):
@@ -25,8 +25,8 @@ class AuthProvider(Model):
     last_sync = models.DateTimeField(null=True)
 
     default_role = BoundedPositiveIntegerField(
-        choices=_organizationemmber_type_field.choices,
-        default=_organizationemmber_type_field.default
+        choices=_organizationmember_type_field.choices,
+        default=_organizationmember_type_field.default
     )
     default_global_access = models.BooleanField(default=True)
     # TODO(dcramer): ManyToMany has the same issue as ForeignKey and we need
diff --git a/src/sentry/templates/sentry/organization-auth-provider-settings.html b/src/sentry/templates/sentry/organization-auth-provider-settings.html
index dfa1b6bd94..7f7170a1b7 100644
--- a/src/sentry/templates/sentry/organization-auth-provider-settings.html
+++ b/src/sentry/templates/sentry/organization-auth-provider-settings.html
@@ -41,10 +41,11 @@
 
         {{ form|as_crispy_errors }}
 
-        <button class="btn btn-primary pull-right" name="op"
-                value="settings" style="margin-left: 20px">Save Settings</button>
-
         {% for field in form %}
+          {% if forloop.last %}
+            <button class="btn btn-primary pull-right" name="op"
+              value="settings" style="margin-left: 20px">Save Settings</button>
+          {% endif %}
           {{ field|as_crispy_field }}
         {% endfor %}
 
diff --git a/src/sentry/web/frontend/organization_auth_settings.py b/src/sentry/web/frontend/organization_auth_settings.py
index bbca456cea..ada846a30f 100644
--- a/src/sentry/web/frontend/organization_auth_settings.py
+++ b/src/sentry/web/frontend/organization_auth_settings.py
@@ -26,6 +26,12 @@ OK_PROVIDER_DISABLED = _('SSO authentication has been disabled.')
 
 OK_REMINDERS_SENT = _('A reminder email has been sent to members who have not yet linked their accounts.')
 
+MEMBERSHIP_CHOICES = (
+    (OrganizationMemberType.MEMBER, _('Member')),
+    (OrganizationMemberType.ADMIN, _('Admin')),
+    (OrganizationMemberType.OWNER, _('Owner')),
+)
+
 
 class AuthProviderSettingsForm(forms.Form):
     require_link = forms.BooleanField(
@@ -33,6 +39,16 @@ class AuthProviderSettingsForm(forms.Form):
         help_text=_('Require members use a valid linked SSO account to access this organization'),
         required=False,
     )
+    default_global_access = forms.BooleanField(
+        label=_('Default Global Access'),
+        required=False,
+        help_text=_('Give new members access to all teams by default (global access).'),
+    )
+    default_role = forms.ChoiceField(
+        label=_('Default Role'),
+        choices=MEMBERSHIP_CHOICES,
+        help_text=_('The default role new members will receive when logging in for the first time.'),
+    )
 
 
 class OrganizationAuthSettingsView(OrganizationView):
@@ -106,11 +122,15 @@ class OrganizationAuthSettingsView(OrganizationView):
             data=request.POST if request.POST.get('op') == 'settings' else None,
             initial={
                 'require_link': not auth_provider.flags.allow_unlinked,
+                'default_role': auth_provider.default_role,
+                'default_global_access': auth_provider.default_global_access,
             },
         )
 
         if form.is_valid():
             auth_provider.flags.allow_unlinked = not form.cleaned_data['require_link']
+            auth_provider.default_role = form.cleaned_data['default_role']
+            auth_provider.default_global_access = form.cleaned_data.get('default_global_access') or False
             auth_provider.save()
 
         view = provider.get_configure_view()
