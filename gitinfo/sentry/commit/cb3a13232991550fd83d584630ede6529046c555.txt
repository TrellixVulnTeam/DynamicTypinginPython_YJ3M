commit cb3a13232991550fd83d584630ede6529046c555
Author: Stephen Cefali <scefali@sentry.io>
Date:   Tue Jun 30 09:25:29 2020 -0700

    feat(vercel): improve UI of project mapper (#19595)

diff --git a/src/sentry/integrations/vercel/integration.py b/src/sentry/integrations/vercel/integration.py
index 5a4d35ce7c..e982b57a0d 100644
--- a/src/sentry/integrations/vercel/integration.py
+++ b/src/sentry/integrations/vercel/integration.py
@@ -59,6 +59,8 @@ external_install = {
 }
 
 
+configure_integration = {"title": _("Connect Your Projects")}
+
 metadata = IntegrationMetadata(
     description=DESCRIPTION.strip(),
     features=FEATURES,
@@ -66,7 +68,7 @@ metadata = IntegrationMetadata(
     noun=_("Installation"),
     issue_url="https://github.com/getsentry/sentry/issues/new?title=Vercel%20Integration:%20&labels=Component%3A%20Integrations",
     source_url="https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/vercel",
-    aspects={"externalInstall": external_install},
+    aspects={"externalInstall": external_install, "configure_integration": configure_integration},
 )
 
 internal_integration_overview = (
@@ -77,20 +79,53 @@ internal_integration_overview = (
 
 
 class VercelIntegration(IntegrationInstallation):
+    @property
+    def metadata(self):
+        return self.model.metadata
+
     def get_client(self):
-        access_token = self.model.metadata["access_token"]
-        if self.model.metadata["installation_type"] == "team":
+        access_token = self.metadata["access_token"]
+        if self.metadata["installation_type"] == "team":
             return VercelClient(access_token, self.model.external_id)
 
         return VercelClient(access_token)
 
+    # note this could return a different integration if the user has multiple
+    # installations with the same organization
+    def get_configuration_id(self):
+        for configuration_id, data in self.metadata["configurations"].items():
+            if data["organization_id"] == self.organization_id:
+                return configuration_id
+        logger.error(
+            "could not find matching org",
+            extra={"organization_id": self.organization_id, "integration_id": self.model.id},
+        )
+        return None
+
+    def get_base_project_url(self):
+        client = self.get_client()
+        if self.metadata["installation_type"] == "team":
+            team = client.get_team()
+            slug = team["slug"]
+        else:
+            user = client.get_user()
+            slug = user["username"]
+        return u"https://vercel.com/%s" % slug
+
     def get_organization_config(self):
         vercel_client = self.get_client()
         # TODO: add try/catch if we get API failure
+        base_url = self.get_base_project_url()
         vercel_projects = [
-            {"value": p["id"], "label": p["name"]} for p in vercel_client.get_projects()
+            {"value": p["id"], "label": p["name"], "url": u"%s/%s" % (base_url, p["name"])}
+            for p in vercel_client.get_projects()
         ]
 
+        next_url = None
+        configuration_id = self.get_configuration_id()
+        if configuration_id:
+            next_url = u"https://vercel.com/dashboard/integrations/%s" % configuration_id
+
         proj_fields = ["id", "platform", "name", "slug"]
         sentry_projects = map(
             lambda proj: {key: proj[key] for key in proj_fields},
@@ -107,9 +142,11 @@ class VercelIntegration(IntegrationInstallation):
                 "type": "project_mapper",
                 "mappedDropdown": {
                     "items": vercel_projects,
-                    "placeholder": "Select a Vercel Project",  # TOOD: add translation
+                    "placeholder": _("Choose Vercel project..."),
                 },
                 "sentryProjects": sentry_projects,
+                "nextButton": {"url": next_url, "text": _("Return to Vercel")},
+                "iconType": "vercel",
             }
         ]
 
@@ -117,38 +154,45 @@ class VercelIntegration(IntegrationInstallation):
 
     def update_organization_config(self, data):
         # data = {"project_mappings": [[sentry_project_id, vercel_project_id]]}
-
-        metadata = self.model.metadata
-        vercel_client = VercelClient(metadata["access_token"], metadata.get("team_id"))
+        vercel_client = self.get_client()
         config = self.org_integration.config
-        [sentry_project_id, vercel_project_id] = data["project_mappings"][
-            -1
-        ]  # TODO: update this to work in the case where a project is removed
-        sentry_project = Project.objects.get(id=sentry_project_id)
-        enabled_dsn = ProjectKey.get_default(project=sentry_project)
-        if not enabled_dsn:
-            raise IntegrationError("You must have an enabled DSN to continue!")
-        sentry_project_dsn = enabled_dsn.get_dsn(public=True)
-
-        org_secret = self.create_secret(
-            vercel_client, vercel_project_id, "SENTRY_ORG", sentry_project.organization.slug
-        )
-        project_secret = self.create_secret(
-            vercel_client,
-            vercel_project_id,
-            "SENTRY_PROJECT_%s" % sentry_project_id,
-            sentry_project.slug,
-        )
-        dsn_secret = self.create_secret(
-            vercel_client,
-            vercel_project_id,
-            "NEXT_PUBLIC_SENTRY_DSN_%s" % sentry_project_id,
-            sentry_project_dsn,
-        )
 
-        self.create_env_var(vercel_client, vercel_project_id, "SENTRY_ORG", org_secret)
-        self.create_env_var(vercel_client, vercel_project_id, "SENTRY_PROJECT", project_secret)
-        self.create_env_var(vercel_client, vercel_project_id, "NEXT_PUBLIC_SENTRY_DSN", dsn_secret)
+        new_mappings = data["project_mappings"]
+        old_mappings = config.get("project_mappings") or []
+
+        for mapping in new_mappings:
+            # skip any mappings that already exist
+            if mapping in old_mappings:
+                continue
+            [sentry_project_id, vercel_project_id] = mapping
+
+            sentry_project = Project.objects.get(id=sentry_project_id)
+            enabled_dsn = ProjectKey.get_default(project=sentry_project)
+            if not enabled_dsn:
+                raise IntegrationError("You must have an enabled DSN to continue!")
+            sentry_project_dsn = enabled_dsn.get_dsn(public=True)
+
+            org_secret = self.create_secret(
+                vercel_client, vercel_project_id, "SENTRY_ORG", sentry_project.organization.slug
+            )
+            project_secret = self.create_secret(
+                vercel_client,
+                vercel_project_id,
+                "SENTRY_PROJECT_%s" % sentry_project_id,
+                sentry_project.slug,
+            )
+            dsn_secret = self.create_secret(
+                vercel_client,
+                vercel_project_id,
+                "NEXT_PUBLIC_SENTRY_DSN_%s" % sentry_project_id,
+                sentry_project_dsn,
+            )
+
+            self.create_env_var(vercel_client, vercel_project_id, "SENTRY_ORG", org_secret)
+            self.create_env_var(vercel_client, vercel_project_id, "SENTRY_PROJECT", project_secret)
+            self.create_env_var(
+                vercel_client, vercel_project_id, "NEXT_PUBLIC_SENTRY_DSN", dsn_secret
+            )
 
         config.update(data)
         self.org_integration.update(config=config)
diff --git a/src/sentry/static/sentry/app/plugins/components/pluginIcon.tsx b/src/sentry/static/sentry/app/plugins/components/pluginIcon.tsx
index 8af3a449a8..7b91dde8d4 100644
--- a/src/sentry/static/sentry/app/plugins/components/pluginIcon.tsx
+++ b/src/sentry/static/sentry/app/plugins/components/pluginIcon.tsx
@@ -41,6 +41,7 @@ import twilio from 'app/../images/logos/logo-twilio.svg';
 import visualstudio from 'app/../images/logos/logo-visualstudio.svg';
 import vsts from 'app/../images/logos/logo-azure.svg';
 import youtrack from 'app/../images/logos/logo-youtrack.svg';
+import vercel from 'app/../images/logos/logo-vercel.svg';
 import victorops from 'app/../images/logos/logo-victorops.svg';
 import zulip from 'app/../images/logos/logo-zulip.svg';
 
@@ -97,6 +98,7 @@ export const ICON_PATHS = {
   visualstudio,
   vsts,
   youtrack,
+  vercel,
   victorops,
   zulip,
 };
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 099d5b868b..1e08f69bc9 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -683,6 +683,9 @@ type IntegrationAspects = {
     buttonText: string;
     noticeText: string;
   };
+  configure_integration?: {
+    title: string;
+  };
 };
 
 type BaseIntegrationProvider = {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.tsx
index c78f56a650..8881d025e6 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.tsx
@@ -14,6 +14,7 @@ type Props = Partial<typeof defaultProps> & {
   inline?: boolean;
   alignRight?: boolean;
   disabled?: boolean;
+  hideControlState?: boolean;
   disabledReason?: React.ReactNode;
   controlState?: React.ReactNode;
   errorState?: React.ReactNode;
@@ -42,6 +43,7 @@ class FieldControl extends React.Component<Props> {
       errorState,
       controlState,
       children,
+      hideControlState,
     } = this.props;
 
     return (
@@ -55,12 +57,14 @@ class FieldControl extends React.Component<Props> {
             </DisabledIndicator>
           )}
 
-          <FieldControlState flexibleControlStateSize={!!flexibleControlStateSize}>
-            {controlState}
-          </FieldControlState>
+          {!hideControlState && (
+            <FieldControlState flexibleControlStateSize={!!flexibleControlStateSize}>
+              {controlState}
+            </FieldControlState>
+          )}
         </FieldControlWrapper>
 
-        {errorState}
+        {!hideControlState && errorState}
       </FieldControlErrorWrapper>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.tsx
index 7e536ce5e0..3a3ee2b411 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.tsx
@@ -89,6 +89,7 @@ type Props = {
   visible?: boolean | ((props: Props) => boolean);
   formatMessageValue?: boolean | Function; //used in prettyFormString
   defaultValue?: any; //TODO(TS): Do we need this?
+  resetOnError?: boolean;
 } & Omit<FieldControl['props'], typeof propsToObserver[number]> &
   Omit<Field['props'], 'inline'>;
 
@@ -279,6 +280,7 @@ class FormField extends React.Component<Props> {
       saveMessage,
       saveMessageAlertType,
       selectionInfoFunction,
+      hideControlState,
 
       // Don't pass `defaultValue` down to input fields, will be handled in form model
       defaultValue: _defaultValue,
@@ -306,6 +308,7 @@ class FormField extends React.Component<Props> {
               inline={inline}
               alignRight={alignRight}
               flexibleControlStateSize={flexibleControlStateSize}
+              hideControlState={hideControlState}
               controlState={<FormFieldControlState model={model} name={name} />}
               errorState={
                 <Observer>
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/projectMapperField.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/projectMapperField.tsx
index 9a4934df31..0b705cdd92 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/projectMapperField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/projectMapperField.tsx
@@ -2,31 +2,59 @@ import React from 'react';
 import styled from '@emotion/styled';
 import {components} from 'react-select';
 
+import space from 'app/styles/space';
 import InputField from 'app/views/settings/components/forms/inputField';
+import FormFieldControlState from 'app/views/settings/components/forms/formField/controlState';
+import FieldErrorReason from 'app/views/settings/components/forms/field/fieldErrorReason';
+import FormModel from 'app/views/settings/components/forms/model';
 import {ProjectMapperType} from 'app/views/settings/components/forms/type';
 import SelectControl from 'app/components/forms/selectControl';
 import IdBadge from 'app/components/idBadge';
 import Button from 'app/components/button';
-import {IconAdd} from 'app/icons';
+import {IconVercel, IconGeneric, IconDelete, IconOpen} from 'app/icons';
+import ExternalLink from 'app/components/links/externalLink';
 import {t} from 'app/locale';
+import {removeAtArrayIndex} from 'app/utils/removeAtArrayIndex';
+
+type MappedValue = string | number;
 
 type Props = InputField['props'];
-type RenderProps = Props & ProjectMapperType;
+type RenderProps = Props & ProjectMapperType & {model: FormModel};
+
+type State = {
+  selectedSentryProjectId: number | null;
+  selectedMappedValue: MappedValue | null;
+};
 
-export class RenderField extends React.Component<RenderProps> {
-  sentryProjectRef = React.createRef<typeof SelectControl>();
-  mappedRef = React.createRef<typeof SelectControl>();
+//Get the icon
+const getIcon = (iconType: string) => {
+  switch (iconType) {
+    case 'vercel':
+      return <IconVercel />;
+    default:
+      return <IconGeneric />;
+  }
+};
+
+export class RenderField extends React.Component<RenderProps, State> {
+  state: State = {selectedSentryProjectId: null, selectedMappedValue: null};
 
   render() {
     const {
       onChange,
       onBlur,
-      value,
-      mappedDropdown,
+      value: incomingValues,
       sentryProjects,
-      mappedDropdown: {items: mappedDropdownItems},
+      mappedDropdown: {items: mappedDropdownItems, placeholder: mappedValuePlaceholder},
+      nextButton: {url: nextUrl, text: nextButtonText},
+      iconType,
+      model,
+      id: formElementId,
+      error,
     } = this.props;
-    const existingValues: Array<[number, string | number]> = value || [];
+    const existingValues: Array<[number, MappedValue]> = incomingValues || [];
+
+    const {selectedSentryProjectId, selectedMappedValue} = this.state;
 
     // create maps by the project id for constant time lookups
     const sentryProjectsById = Object.fromEntries(
@@ -49,36 +77,77 @@ export class RenderField extends React.Component<RenderProps> {
       item => !mappedValuesUsed.has(item.value)
     );
 
+    const handleSelectProject = ({value}: {value: number}) => {
+      this.setState({selectedSentryProjectId: value});
+    };
+
+    const handleSelectMappedValue = ({value}: {value: MappedValue}) => {
+      this.setState({selectedMappedValue: value});
+    };
+
     const handleAdd = () => {
-      const {value: sentryProjectId} = this.sentryProjectRef.current.state.value;
-      const {value: mappedValue} = this.mappedRef.current.state.value;
       //add the new value to the list of existing values
-      const projectMappings = [...existingValues, [sentryProjectId, mappedValue]];
+      const projectMappings = [
+        ...existingValues,
+        [selectedSentryProjectId, selectedMappedValue],
+      ];
       //trigger events so we save the value and show the check mark
       onChange?.(projectMappings, []);
       onBlur?.(projectMappings, []);
+      this.setState({selectedSentryProjectId: null, selectedMappedValue: null});
     };
 
-    const renderItem = (itemTuple: [number, any]) => {
+    const handleDelete = (index: number) => {
+      const projectMappings = removeAtArrayIndex(existingValues, index);
+      //trigger events so we save the value and show the check mark
+      onChange?.(projectMappings, []);
+      onBlur?.(projectMappings, []);
+    };
+
+    const renderItem = (itemTuple: [number, any], index: number) => {
       const [projectId, mappedValue] = itemTuple;
-      const {slug} = sentryProjectsById[projectId];
+      const project = sentryProjectsById[projectId];
       // TODO: add special formatting if deleted
-      const {label: itemLabel} = mappedItemsByValue[mappedValue] || {label: 'Deleted'};
+      const mappedItem = mappedItemsByValue[mappedValue];
       return (
-        <Item key={projectId}>
-          <ItemValue>{slug}</ItemValue> <ItemValue>{itemLabel}</ItemValue>
+        <Item key={index}>
+          {project ? (
+            <StyledIdBadge
+              project={project}
+              avatarSize={20}
+              displayName={project.slug}
+              avatarProps={{consistentWidth: true}}
+            />
+          ) : (
+            <ItemValue>{t('Deleted')}</ItemValue>
+          )}
+          <MappedItemValue>
+            {mappedItem ? (
+              <React.Fragment>
+                <IntegrationIconWrapper>{getIcon(iconType)}</IntegrationIconWrapper>
+                {mappedItem.label}
+                <StyledExternalLink href={mappedItem.url}>
+                  <IconOpen />
+                </StyledExternalLink>
+              </React.Fragment>
+            ) : (
+              t('Deleted')
+            )}
+          </MappedItemValue>
+          <DeleteButton
+            onClick={() => handleDelete(index)}
+            icon={<IconDelete color="gray500" />}
+            size="small"
+            type="button"
+            aria-label={t('Delete')}
+          />
         </Item>
       );
     };
 
     const customValueContainer = containerProps => {
-      const valueList = containerProps.getValue();
       //if no value set, we want to return the default component that is rendered
-      if (valueList.length === 0) {
-        return <components.ValueContainer {...containerProps} />;
-      }
-      const projectId = valueList[0].value;
-      const project = sentryProjectsById[projectId];
+      const project = sentryProjectsById[selectedSentryProjectId || ''];
       if (!project) {
         return <components.ValueContainer {...containerProps} />;
       }
@@ -96,6 +165,7 @@ export class RenderField extends React.Component<RenderProps> {
 
     const customOptionProject = projectProps => {
       const project = sentryProjectsById[projectProps.value];
+      //Should never happen for a dropdown item
       if (!project) {
         return null;
       }
@@ -111,12 +181,37 @@ export class RenderField extends React.Component<RenderProps> {
       );
     };
 
+    const customMappedValueContainer = containerProps => {
+      //if no value set, we want to return the default component that is rendered
+      const mappedValue = mappedItemsByValue[selectedMappedValue || ''];
+      if (!mappedValue) {
+        return <components.ValueContainer {...containerProps} />;
+      }
+      return (
+        <components.ValueContainer {...containerProps}>
+          <IntegrationIconWrapper>{getIcon(iconType)}</IntegrationIconWrapper>
+          {mappedValue.label}
+        </components.ValueContainer>
+      );
+    };
+
+    const customOptionMappedValue = optionProps => {
+      return (
+        <components.Option {...optionProps}>
+          <OptionWrapper>
+            <IntegrationIconWrapper>{getIcon(iconType)}</IntegrationIconWrapper>
+            {optionProps.label}
+          </OptionWrapper>
+        </components.Option>
+      );
+    };
+
     return (
       <Wrapper>
         {existingValues.map(renderItem)}
-        <SelectContainer>
+        <Item>
           <StyledSelectControl
-            placeholder={t('Select a Project')}
+            placeholder={t('Choose Sentry project\u2026')}
             name="project"
             openMenuOnFocus
             options={projectOptions}
@@ -124,31 +219,62 @@ export class RenderField extends React.Component<RenderProps> {
               Option: customOptionProject,
               ValueContainer: customValueContainer,
             }}
-            ref={this.sentryProjectRef}
+            onChange={handleSelectProject}
+            value={selectedSentryProjectId}
           />
           <StyledSelectControl
-            placeholder={mappedDropdown.placeholder}
-            name="mappedDropwdown"
+            placeholder={mappedValuePlaceholder}
+            name="mappedDropdown"
             openMenuOnFocus
             options={mappedItemsToShow}
-            ref={this.mappedRef}
+            components={{
+              Option: customOptionMappedValue,
+              ValueContainer: customMappedValueContainer,
+            }}
+            onChange={handleSelectMappedValue}
+            value={selectedMappedValue}
           />
-          <Button
-            type="button"
+          <StyledAddProjectButton
+            disabled={!selectedSentryProjectId || !selectedMappedValue}
             size="small"
-            label={t('Add')}
-            icon={<IconAdd />}
+            priority="primary"
             onClick={handleAdd}
-          />
-        </SelectContainer>
+          >
+            {t('Add Project')}
+          </StyledAddProjectButton>
+          <FieldControlWrapper>
+            {formElementId && (
+              <div>
+                <FormFieldControlState model={model} name={formElementId} />
+                {error ? <StyledFieldErrorReason>{error}</StyledFieldErrorReason> : null}
+              </div>
+            )}
+          </FieldControlWrapper>
+          {nextUrl && (
+            <StyledNextButton
+              type="button"
+              size="small"
+              priority="default"
+              icon="icon-exit"
+              href={nextUrl}
+              external
+            >
+              {nextButtonText}
+            </StyledNextButton>
+          )}
+        </Item>
       </Wrapper>
     );
   }
 }
 
 const ProjectMapperField = (props: Props) => (
-  <InputField
+  <StyledInputField
     {...props}
+    resetOnError
+    inline={false}
+    stacked={false}
+    hideControlState
     field={(renderProps: RenderProps) => <RenderField {...renderProps} />}
   />
 );
@@ -156,19 +282,73 @@ const ProjectMapperField = (props: Props) => (
 export default ProjectMapperField;
 
 const StyledSelectControl = styled(SelectControl)`
-  width: 50%;
+  width: 272px;
+  margin-left: ${space(1.5)};
+`;
+
+const Item = styled('div')`
+  margin: -1px;
+  border: 1px solid ${p => p.theme.gray400};
+  display: flex;
+  align-items: center;
+  height: 60px;
+`;
+
+const ItemValue = styled('div')`
+  padding: ${space(0.5)};
+  margin-left: ${space(2)};
+`;
+
+const MappedItemValue = styled('div')`
+  display: flex;
+  padding: ${space(0.5)};
+  position: absolute;
+  left: 300px;
 `;
 
-const SelectContainer = styled('div')`
+const DeleteButton = styled(Button)`
+  position: absolute;
+  right: ${space(2)};
+`;
+
+const StyledIdBadge = styled(IdBadge)`
+  margin-left: ${space(3)};
+`;
+
+const IntegrationIconWrapper = styled('span')`
+  margin-right: ${space(0.5)};
+  display: flex;
+`;
+
+const StyledAddProjectButton = styled(Button)`
+  margin-left: ${space(2)};
+`;
+
+const StyledNextButton = styled(Button)`
+  position: absolute;
+  right: ${space(2)};
+`;
+
+const StyledInputField = styled(InputField)`
+  padding: 0;
+`;
+
+const StyledExternalLink = styled(ExternalLink)`
+  margin-left: ${space(0.5)};
+`;
+
+const OptionWrapper = styled('div')`
+  align-items: center;
   display: flex;
 `;
 
 const Wrapper = styled('div')``;
 
-const Item = styled('div')`
-  padding: 5px;
+const FieldControlWrapper = styled('div')`
+  position: relative;
+  margin-left: ${space(2)};
 `;
 
-const ItemValue = styled('span')`
-  padding: 5px;
+const StyledFieldErrorReason = styled(FieldErrorReason)`
+  width: 100px;
 `;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
index 3f8d3875b3..3247cbcfb6 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
@@ -131,10 +131,15 @@ export type TableType = {
 export type ProjectMapperType = {
   type: 'project_mapper';
   mappedDropdown: {
-    items: Array<{value: string | number; label: string}>;
+    items: Array<{value: string | number; label: string; url: string}>;
     placeholder: string;
   };
   sentryProjects: Array<AvatarProject & {id: number; name: string}>;
+  nextButton: {
+    url: string | null;
+    text: string;
+  };
+  iconType: string;
 };
 
 export type Field = (
diff --git a/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx b/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx
index d10e8e0de9..31e681c52a 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx
@@ -117,7 +117,10 @@ class ConfigureIntegration extends AsyncView<Props, State> {
           >
             <JsonForm
               fields={integration.configOrganization}
-              title={t('Organization Integration Settings')}
+              title={
+                integration.provider.aspects.configure_integration?.title ||
+                t('Organization Integration Settings')
+              }
             />
           </Form>
         )}
diff --git a/src/sentry/static/sentry/images/logos/logo-vercel.svg b/src/sentry/static/sentry/images/logos/logo-vercel.svg
new file mode 100644
index 0000000000..1e3e802a7e
--- /dev/null
+++ b/src/sentry/static/sentry/images/logos/logo-vercel.svg
@@ -0,0 +1 @@
+<svg id="f1240653-a670-406f-b9ed-2bcc3bdf984d" data-name="Logos" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 80 80"><path d="M40,5.41,79.79,74.59H.24Z" style="fill-rule:evenodd"/></svg>
\ No newline at end of file
diff --git a/tests/js/spec/components/forms/projectMapperField.spec.jsx b/tests/js/spec/components/forms/projectMapperField.spec.jsx
index fa14140f19..1882636b40 100644
--- a/tests/js/spec/components/forms/projectMapperField.spec.jsx
+++ b/tests/js/spec/components/forms/projectMapperField.spec.jsx
@@ -1,6 +1,7 @@
 import React from 'react';
 
 import {mountWithTheme} from 'sentry-test/enzyme';
+import {selectByValue} from 'sentry-test/select-new';
 
 import {RenderField} from 'app/views/settings/components/forms/projectMapperField';
 
@@ -16,42 +17,67 @@ describe('ProjectMapperField', () => {
   };
 
   const sentryProjects = [
-    {id: 23, slug: 'cool', platform: 'javascript', name: 'Cool'},
-    {id: 24, slug: 'beans', platform: 'python', name: 'Beans'},
+    {id: '23', slug: 'cool', platform: 'javascript', name: 'Cool'},
+    {id: '24', slug: 'beans', platform: 'python', name: 'Beans'},
   ];
-  const existingValues = [[23, '2']];
-  let onBlur, onChange;
+  let onBlur, onChange, props, existingValues;
 
   beforeEach(() => {
+    existingValues = [['23', '2']];
     onBlur = jest.fn();
     onChange = jest.fn();
-    const props = {
+    props = {
       mappedDropdown,
       sentryProjects,
+      nextButton: {
+        url: 'https://vercel.com/dashboard/integrations/icfg_fuqLnwH3IYmcpAKAWY8eoYlR',
+        next: 'Return to Vercel',
+      },
       value: existingValues,
       onChange,
       onBlur,
     };
-    wrapper = mountWithTheme(<RenderField {...props} />, {disableLifecycleMethods: true});
   });
 
   it('clicking add updates values with current dropdown values', () => {
-    wrapper.instance().sentryProjectRef.current = {state: {value: {value: 24}}};
-    wrapper.instance().mappedRef.current = {state: {value: {value: '1'}}};
-    wrapper.find('button').simulate('click');
+    wrapper = mountWithTheme(<RenderField {...props} />, {disableLifecycleMethods: true});
+    selectByValue(wrapper, '24', {control: true, name: 'project'});
+    selectByValue(wrapper, '1', {control: true, name: 'mappedDropdown'});
+
+    wrapper.find('StyledAddProjectButton').simulate('click');
+
     expect(onBlur).toHaveBeenCalledWith(
       [
-        [23, '2'],
-        [24, '1'],
+        ['23', '2'],
+        ['24', '1'],
       ],
       []
     );
     expect(onChange).toHaveBeenCalledWith(
       [
-        [23, '2'],
-        [24, '1'],
+        ['23', '2'],
+        ['24', '1'],
       ],
       []
     );
   });
+
+  it('can delete item', () => {
+    existingValues = [
+      ['23', '2'],
+      ['24', '1'],
+    ];
+    wrapper = mountWithTheme(<RenderField {...props} value={existingValues} />, {
+      disableLifecycleMethods: true,
+    });
+    wrapper
+      .find('DeleteButton')
+      .first()
+      .simulate('click');
+
+    expect(onBlur).toHaveBeenCalledWith([['24', '1']], []);
+    expect(onChange).toHaveBeenCalledWith([['24', '1']], []);
+  });
+
+  it('handles deleted items without error', () => {});
 });
diff --git a/tests/sentry/integrations/vercel/test_integration.py b/tests/sentry/integrations/vercel/test_integration.py
index a745cb99dd..3b9fb5d77b 100644
--- a/tests/sentry/integrations/vercel/test_integration.py
+++ b/tests/sentry/integrations/vercel/test_integration.py
@@ -35,14 +35,14 @@ class VercelIntegrationTest(IntegrationTestCase):
             responses.add(
                 responses.GET,
                 "https://api.vercel.com/v1/teams/my_team_id%s" % team_query,
-                json={"name": "my_team_name"},
+                json={"name": "My Team Name", "slug": "my_team_slug"},
             )
         else:
             team_query = ""
             responses.add(
                 responses.GET,
                 "https://api.vercel.com/www/user",
-                json={"user": {"name": "my_user_name"}},
+                json={"user": {"name": "My Name", "username": "my_user_name"}},
             )
 
         responses.add(
@@ -83,7 +83,7 @@ class VercelIntegrationTest(IntegrationTestCase):
         integration = Integration.objects.get(provider=self.provider.key)
 
         external_id = "my_team_id" if is_team else "my_user_id"
-        name = "my_team_name" if is_team else "my_user_name"
+        name = "My Team Name" if is_team else "My Name"
         installation_type = "team" if is_team else "user"
 
         assert integration.external_id == external_id
@@ -154,7 +154,7 @@ class VercelIntegrationTest(IntegrationTestCase):
             },
         }
         Integration.objects.create(
-            provider="vercel", name="my_team_name", external_id="my_team_id", metadata=metadata
+            provider="vercel", name="My Team Name", external_id="my_team_id", metadata=metadata
         )
 
         self.assert_setup_flow(is_team=True, multi_config_org=orig_org)
