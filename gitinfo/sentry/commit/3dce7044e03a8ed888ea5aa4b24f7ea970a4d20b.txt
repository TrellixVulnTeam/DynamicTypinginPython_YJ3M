commit 3dce7044e03a8ed888ea5aa4b24f7ea970a4d20b
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 2 11:26:11 2018 -0700

    feat(gdpr): Change beacon statistics to use a radio boolean

diff --git a/src/sentry/static/sentry/app/components/forms/index.jsx b/src/sentry/static/sentry/app/components/forms/index.jsx
index c46e3830c2..802ecc94d2 100644
--- a/src/sentry/static/sentry/app/components/forms/index.jsx
+++ b/src/sentry/static/sentry/app/components/forms/index.jsx
@@ -7,6 +7,7 @@ export {default as GenericField} from './genericField';
 export {default as MultipleCheckboxField} from './multipleCheckboxField';
 export {default as NumberField} from './numberField';
 export {default as PasswordField} from './passwordField';
+export {default as RadioBooleanField} from './radioBooleanField';
 export {default as RangeField} from './rangeField';
 export {default as Select2FieldAutocomplete} from './select2FieldAutocomplete';
 export {default as Select2Field} from './select2Field';
diff --git a/src/sentry/static/sentry/app/components/forms/radioBooleanField.jsx b/src/sentry/static/sentry/app/components/forms/radioBooleanField.jsx
new file mode 100644
index 0000000000..768d1757d5
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/radioBooleanField.jsx
@@ -0,0 +1,59 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import InputField from './inputField';
+
+export default class RadioBooleanField extends InputField {
+  static propTypes = {
+    ...InputField.propTypes,
+    yesLabel: PropTypes.string.isRequired,
+    noLabel: PropTypes.string.isRequired,
+  };
+
+  coerceValue(props) {
+    let value = super.coerceValue(props);
+    return value ? true : false;
+  }
+
+  onChange = e => {
+    let value = e.target.value === 'true';
+    this.setValue(value);
+  };
+
+  getType() {
+    return 'radio';
+  }
+
+  getField() {
+    return (
+      <div className="control-group">
+        <div className="radio">
+          <label style={{fontWeight: 'normal'}}>
+            <input
+              type="radio"
+              value="true"
+              name={this.props.name}
+              checked={this.state.value === true}
+              onChange={this.onChange.bind(this)}
+              disabled={this.props.disabled}
+            />{' '}
+            {this.props.yesLabel}
+          </label>
+        </div>
+        <div className="radio">
+          <label style={{fontWeight: 'normal'}}>
+            <input
+              type="radio"
+              name={this.props.name}
+              value="false"
+              checked={this.state.value === false}
+              onChange={this.onChange.bind(this)}
+              disabled={this.props.disabled}
+            />{' '}
+            {this.props.noLabel}
+          </label>
+        </div>
+      </div>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/options.jsx b/src/sentry/static/sentry/app/options.jsx
index acc4f632f7..7e963d5136 100644
--- a/src/sentry/static/sentry/app/options.jsx
+++ b/src/sentry/static/sentry/app/options.jsx
@@ -2,7 +2,7 @@ import React from 'react';
 import _ from 'lodash';
 import ConfigStore from './stores/configStore';
 import {t, tct} from './locale';
-import {EmailField, TextField, BooleanField} from './components/forms';
+import {EmailField, TextField, BooleanField, RadioBooleanField} from './components/forms';
 
 // This are ordered based on their display order visually
 const sections = [
@@ -100,9 +100,10 @@ const definitions = [
   },
   {
     key: 'beacon.anonymous',
-    label: 'Anonymize Beacon',
-    component: BooleanField,
-    defaultValue: () => true,
+    label: 'Usage Statistics',
+    component: RadioBooleanField,
+    yesLabel: 'Send my contact information along with usage statistics',
+    noLabel: 'Please keep my usage information anonymous',
     help: tct(
       'If enabled, any stats reported to sentry.io will exclude identifying information (such as your administrative email address). By anonymizing your installation the Sentry team will be unable to contact you about security updates. For more information on what data is sent to Sentry, see the [link:documentation].',
       {
@@ -172,14 +173,11 @@ export function getOptionField(option, field) {
   let Field = meta.component || TextField;
   return (
     <Field
+      {...meta}
       name={option}
       key={option}
-      label={meta.label}
       defaultValue={meta.defaultValue ? meta.defaultValue() : undefined}
-      placeholder={meta.placeholder}
-      help={meta.help}
       required={meta.required && !meta.allowEmpty}
-      disabled={meta.disabled}
       disabledReason={meta.disabledReason && disabledReasons[meta.disabledReason]}
     />
   );
diff --git a/tests/js/spec/components/forms/__snapshots__/radioBooleanField.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/radioBooleanField.spec.jsx.snap
new file mode 100644
index 0000000000..0a640c7313
--- /dev/null
+++ b/tests/js/spec/components/forms/__snapshots__/radioBooleanField.spec.jsx.snap
@@ -0,0 +1,119 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`RadioBooleanField render() renders with form context 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <div
+      className="control-group"
+    >
+      <div
+        className="radio"
+      >
+        <label
+          style={
+            Object {
+              "fontWeight": "normal",
+            }
+          }
+        >
+          <input
+            checked={true}
+            disabled={false}
+            name="fieldName"
+            onChange={[Function]}
+            type="radio"
+            value="true"
+          />
+           
+          Yes
+        </label>
+      </div>
+      <div
+        className="radio"
+      >
+        <label
+          style={
+            Object {
+              "fontWeight": "normal",
+            }
+          }
+        >
+          <input
+            checked={false}
+            disabled={false}
+            name="fieldName"
+            onChange={[Function]}
+            type="radio"
+            value="false"
+          />
+           
+          No
+        </label>
+      </div>
+    </div>
+  </div>
+</div>
+`;
+
+exports[`RadioBooleanField render() renders without form context 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <div
+      className="control-group"
+    >
+      <div
+        className="radio"
+      >
+        <label
+          style={
+            Object {
+              "fontWeight": "normal",
+            }
+          }
+        >
+          <input
+            checked={false}
+            disabled={false}
+            name="fieldName"
+            onChange={[Function]}
+            type="radio"
+            value="true"
+          />
+           
+          Yes
+        </label>
+      </div>
+      <div
+        className="radio"
+      >
+        <label
+          style={
+            Object {
+              "fontWeight": "normal",
+            }
+          }
+        >
+          <input
+            checked={false}
+            disabled={false}
+            name="fieldName"
+            onChange={[Function]}
+            type="radio"
+            value="false"
+          />
+           
+          No
+        </label>
+      </div>
+    </div>
+  </div>
+</div>
+`;
diff --git a/tests/js/spec/components/forms/radioBooleanField.spec.jsx b/tests/js/spec/components/forms/radioBooleanField.spec.jsx
new file mode 100644
index 0000000000..890b7dcd45
--- /dev/null
+++ b/tests/js/spec/components/forms/radioBooleanField.spec.jsx
@@ -0,0 +1,32 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+
+import {RadioBooleanField} from 'app/components/forms';
+
+describe('RadioBooleanField', function() {
+  describe('render()', function() {
+    it('renders without form context', function() {
+      let wrapper = shallow(
+        <RadioBooleanField name="fieldName" yesLabel="Yes" noLabel="No" />
+      );
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('renders with form context', function() {
+      let wrapper = shallow(
+        <RadioBooleanField name="fieldName" yesLabel="Yes" noLabel="No" />,
+        {
+          context: {
+            form: {
+              data: {
+                fieldName: true,
+              },
+              errors: {},
+            },
+          },
+        }
+      );
+      expect(wrapper).toMatchSnapshot();
+    });
+  });
+});
diff --git a/tests/js/spec/views/__snapshots__/adminSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/adminSettings.spec.jsx.snap
index 20d21a2ca7..1786622289 100644
--- a/tests/js/spec/views/__snapshots__/adminSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/adminSettings.spec.jsx.snap
@@ -1,6 +1,6 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`AdminSettings render() renders 1`] = `
+exports['AdminSettings render() renders 1'] = `
 <SideEffect(DocumentTitle)
   title="Sentry"
 >
@@ -22,7 +22,7 @@ exports[`AdminSettings render() renders 1`] = `
           "auth.allow-registration": true,
           "auth.ip-rate-limit": 25,
           "auth.user-rate-limit": 25,
-          "beacon.anonymous": true,
+          "beacon.anonymous": "",
           "system.admin-email": "foo@example.com",
           "system.rate-limit": 25,
           "system.security-email": "foo@example.com",
@@ -39,11 +39,14 @@ exports[`AdminSettings render() renders 1`] = `
         General
       </h4>
       <TextField
+        allowEmpty={true}
+        default=""
         defaultValue="about://"
         disabled={true}
         disabledReason="This setting is defined in config.yml and may not be changed via the web UI."
         help="The root web address which is used to communicate with the Sentry backend."
         hideErrorMessage={false}
+        isSet={true}
         key="system.url-prefix"
         label="Root URL"
         name="system.url-prefix"
@@ -51,11 +54,15 @@ exports[`AdminSettings render() renders 1`] = `
         required={false}
       />
       <EmailField
+        allowEmpty={false}
+        component={[Function]}
+        default={null}
         defaultValue="foo@example.com"
         disabled={true}
         disabledReason="This setting is defined in config.yml and may not be changed via the web UI."
         help="The technical contact for this Sentry installation."
         hideErrorMessage={false}
+        isSet={true}
         key="system.admin-email"
         label="Admin Email"
         name="system.admin-email"
@@ -63,11 +70,15 @@ exports[`AdminSettings render() renders 1`] = `
         required={true}
       />
       <EmailField
+        allowEmpty={false}
+        component={[Function]}
+        default={null}
         defaultValue="foo@example.com"
         disabled={true}
         disabledReason="This setting is defined in config.yml and may not be changed via the web UI."
         help="The support contact for this Sentry installation."
         hideErrorMessage={false}
+        isSet={true}
         key="system.support-email"
         label="Support Email"
         name="system.support-email"
@@ -75,11 +86,15 @@ exports[`AdminSettings render() renders 1`] = `
         required={true}
       />
       <EmailField
+        allowEmpty={false}
+        component={[Function]}
+        default={null}
         defaultValue="foo@example.com"
         disabled={true}
         disabledReason="This setting is defined in config.yml and may not be changed via the web UI."
         help="The security contact for this Sentry installation."
         hideErrorMessage={false}
+        isSet={true}
         key="system.security-email"
         label="Security Email"
         name="system.security-email"
@@ -87,10 +102,13 @@ exports[`AdminSettings render() renders 1`] = `
         required={true}
       />
       <TextField
+        allowEmpty={false}
+        default={0}
         disabled={true}
         disabledReason="This setting is defined in config.yml and may not be changed via the web UI."
         help="The maximum number of events the system should accept per minute. A value of 0 will disable the default rate limit."
         hideErrorMessage={false}
+        isSet={true}
         key="system.rate-limit"
         label="Rate Limit"
         name="system.rate-limit"
@@ -101,21 +119,28 @@ exports[`AdminSettings render() renders 1`] = `
         Security & Abuse
       </h4>
       <BooleanField
+        allowEmpty={false}
+        component={[Function]}
+        default={false}
         defaultValue={false}
         disabled={true}
         disabledReason="This setting is defined in config.yml and may not be changed via the web UI."
         help="Allow anyone to create an account and access this Sentry installation."
         hideErrorMessage={false}
+        isSet={true}
         key="auth.allow-registration"
         label="Allow Registration"
         name="auth.allow-registration"
         required={true}
       />
       <TextField
+        allowEmpty={false}
+        default={0}
         disabled={true}
         disabledReason="This setting is defined in config.yml and may not be changed via the web UI."
         help="The maximum number of times an authentication attempt may be made by a single IP address in a 60 second window."
         hideErrorMessage={false}
+        isSet={true}
         key="auth.ip-rate-limit"
         label="IP Rate Limit"
         name="auth.ip-rate-limit"
@@ -123,10 +148,13 @@ exports[`AdminSettings render() renders 1`] = `
         required={true}
       />
       <TextField
+        allowEmpty={false}
+        default={0}
         disabled={true}
         disabledReason="This setting is defined in config.yml and may not be changed via the web UI."
         help="The maximum number of times an authentication attempt may be made against a single account in a 60 second window."
         hideErrorMessage={false}
+        isSet={true}
         key="auth.user-rate-limit"
         label="User Rate Limit"
         name="auth.user-rate-limit"
@@ -134,10 +162,13 @@ exports[`AdminSettings render() renders 1`] = `
         required={true}
       />
       <TextField
+        allowEmpty={false}
+        default={0}
         disabled={true}
         disabledReason="This setting is defined in config.yml and may not be changed via the web UI."
         help="The maximum number of organizations which may be created by a single account in a one hour window."
         hideErrorMessage={false}
+        isSet={true}
         key="api.rate-limit.org-create"
         label="Organization Creation Rate Limit"
         name="api.rate-limit.org-create"
@@ -147,8 +178,8 @@ exports[`AdminSettings render() renders 1`] = `
       <h4>
         Beacon
       </h4>
-      <BooleanField
-        defaultValue={true}
+      <RadioBooleanField
+        component={[Function]}
         disabled={false}
         help={
           <span>
@@ -169,9 +200,11 @@ exports[`AdminSettings render() renders 1`] = `
         }
         hideErrorMessage={false}
         key="beacon.anonymous"
-        label="Anonymize Beacon"
+        label="Usage Statistics"
         name="beacon.anonymous"
+        noLabel="Please keep my usage information anonymous"
         required={false}
+        yesLabel="Send my contact information along with usage statistics"
       />
     </ApiForm>
   </div>
