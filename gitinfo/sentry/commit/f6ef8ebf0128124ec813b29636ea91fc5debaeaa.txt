commit f6ef8ebf0128124ec813b29636ea91fc5debaeaa
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 29 11:41:19 2016 -0700

    Add server-side data filters (#3921)
    
    * Add basic inbound filters
    
    To make this possible, we've moved data validation and normalization into LazyData, so it can execute on demand.
    
    The following filters are made available:
    
    - Browser extension filtering for JS
    - Localhost filtering (based on User context)
    
    /cc @getsentry/javascript @getsentry/infrastructure
    
    * Add 'Switch' component
    
    * Make switch accessible
    
    * Fix tests
    
    * Add legacy browsers, descriptions
    
    * Add web crawler filter
    
    * Move filters into Data navigation
    
    * Note about uaparser
    
    * Filters -> Inbound Filters
    
    * Readable fixtures
    
    * Correct CSP handling
    
    * Fix marked tests

diff --git a/src/sentry/api/endpoints/project_filter_details.py b/src/sentry/api/endpoints/project_filter_details.py
new file mode 100644
index 0000000000..27eb12af41
--- /dev/null
+++ b/src/sentry/api/endpoints/project_filter_details.py
@@ -0,0 +1,36 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers
+from rest_framework.response import Response
+
+from sentry import filters
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+
+
+class ProjectFilterSerializer(serializers.Serializer):
+    active = serializers.BooleanField()
+
+
+class ProjectFilterDetailsEndpoint(ProjectEndpoint):
+    def put(self, request, project, filter_id):
+        """
+        Update a filter
+
+        Update a project's filter.
+
+            {method} {path}
+
+        """
+        try:
+            filter = filters.get(filter_id)(project)
+        except filters.FilterNotRegistered:
+            raise ResourceDoesNotExist
+
+        serializer = ProjectFilterSerializer(data=request.DATA, partial=True)
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
+
+        if 'active' in serializer.object:
+            filter.enable(serializer.object['active'])
+        return Response(status=201)
diff --git a/src/sentry/api/endpoints/project_filters.py b/src/sentry/api/endpoints/project_filters.py
new file mode 100644
index 0000000000..82987e08b5
--- /dev/null
+++ b/src/sentry/api/endpoints/project_filters.py
@@ -0,0 +1,29 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry import filters
+from sentry.api.bases.project import ProjectEndpoint
+
+
+class ProjectFiltersEndpoint(ProjectEndpoint):
+    def get(self, request, project):
+        """
+        List a project's filters
+
+        Retrieve a list of filters for a given project.
+
+            {method} {path}
+
+        """
+        results = []
+        for f_cls in filters.all():
+            filter = f_cls(project)
+            results.append({
+                'id': filter.id,
+                'active': filter.is_enabled(),
+                'description': filter.description,
+                'name': filter.name,
+            })
+        results.sort(key=lambda x: x['name'])
+        return Response(results)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 6a8d3b826e..5d924ebb5b 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -48,6 +48,8 @@ from .endpoints.project_docs_platform import ProjectDocsPlatformEndpoint
 from .endpoints.project_environments import ProjectEnvironmentsEndpoint
 from .endpoints.project_events import ProjectEventsEndpoint
 from .endpoints.project_event_details import ProjectEventDetailsEndpoint
+from .endpoints.project_filters import ProjectFiltersEndpoint
+from .endpoints.project_filter_details import ProjectFilterDetailsEndpoint
 from .endpoints.project_group_index import ProjectGroupIndexEndpoint
 from .endpoints.project_group_stats import ProjectGroupStatsEndpoint
 from .endpoints.project_index import ProjectIndexEndpoint
@@ -224,6 +226,12 @@ urlpatterns = patterns(
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/events/(?P<event_id>[\w-]+)/$',
         ProjectEventDetailsEndpoint.as_view(),
         name='sentry-api-0-project-event-details'),
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/filters/$',
+        ProjectFiltersEndpoint.as_view(),
+        name='sentry-api-0-project-filters'),
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/filters/(?P<filter_id>[\w-]+)/$',
+        ProjectFilterDetailsEndpoint.as_view(),
+        name='sentry-api-0-project-filters'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/(?:issues|groups)/$',
         ProjectGroupIndexEndpoint.as_view(),
         name='sentry-api-0-project-group-index'),
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index dd23d51266..16ee5e1de7 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -23,6 +23,7 @@ from gzip import GzipFile
 from six import BytesIO
 from time import time
 
+from sentry import filters
 from sentry.app import env
 from sentry.cache import default_cache
 from sentry.constants import (
@@ -31,6 +32,7 @@ from sentry.constants import (
 )
 from sentry.interfaces.base import get_interface, InterfaceValidationError
 from sentry.interfaces.csp import Csp
+from sentry.event_manager import EventManager
 from sentry.models import EventError, Project, ProjectKey, TagKey, TagValue
 from sentry.tasks.store import preprocess_event
 from sentry.utils import json
@@ -350,6 +352,11 @@ class ClientApiHelper(object):
         if ip_address and not is_valid_ip(ip_address, project):
             return True
 
+        for filter_cls in filters.all():
+            filter_obj = filter_cls(project)
+            if filter_obj.is_enabled() and filter_obj.test(data):
+                return True
+
         return False
 
     def validate_data(self, project, data):
@@ -704,7 +711,7 @@ class CspApiHelper(ClientApiHelper):
         return auth
 
     def should_filter(self, project, data, ip_address=None):
-        if not is_valid_csp_report(data, project):
+        if not is_valid_csp_report(data['sentry.interfaces.Csp'], project):
             return True
         return super(CspApiHelper, self).should_filter(project, data, ip_address)
 
@@ -713,7 +720,10 @@ class CspApiHelper(ClientApiHelper):
         meta = data.pop('_meta', {})
 
         # All keys are sent with hyphens, so we want to conver to underscores
-        report = dict(map(lambda v: (v[0].replace('-', '_'), v[1]), six.iteritems(data)))
+        report = {
+            k.replace('-', '_'): v
+            for k, v in six.iteritems(data)
+        }
 
         try:
             inst = Csp.to_python(report)
@@ -761,6 +771,8 @@ class CspApiHelper(ClientApiHelper):
 
         tags = []
         for k, v in inst.get_tags():
+            if not v:
+                continue
             if len(v) > MAX_TAG_VALUE_LENGTH:
                 self.log.debug('Discarded invalid tag: %s=%s', k, v)
                 data['errors'].append({
@@ -786,16 +798,21 @@ class CspApiHelper(ClientApiHelper):
 
 
 class LazyData(MutableMapping):
-    def __init__(self, data, content_encoding, helper):
+    def __init__(self, data, content_encoding, helper, project, auth, client_ip):
         self._data = data
         self._content_encoding = content_encoding
         self._helper = helper
+        self._project = project
+        self._auth = auth
+        self._client_ip = client_ip
         self._decoded = False
 
     def _decode(self):
         data = self._data
         content_encoding = self._content_encoding
         helper = self._helper
+        project = self._project
+        auth = self._auth
 
         # TODO(dcramer): CSP is passing already decoded JSON, which sort of
         # defeats the purpose of a lot of lazy evaluation. It needs refactored
@@ -812,6 +829,32 @@ class LazyData(MutableMapping):
         if isinstance(data, six.text_type):
             data = helper.safely_load_json_string(data)
 
+        # We need data validation/etc to apply as part of LazyData so that
+        # if there are filters present, they can operate on a normalized
+        # version of the data
+
+        # mutates data
+        data = helper.validate_data(project, data)
+
+        if 'sdk' not in data:
+            sdk = helper.parse_client_as_sdk(auth.client)
+            if sdk:
+                data['sdk'] = sdk
+            else:
+                data['sdk'] = {}
+
+        data['sdk']['client_ip'] = self._client_ip
+
+        # we always fill in the IP so that filters and other items can
+        # access it (even if it eventually gets scrubbed)
+        helper.ensure_has_ip(
+            data, self._client_ip, set_if_missing=auth.is_public or
+            data.get('platform') in ('javascript', 'cocoa', 'objc'))
+
+        # mutates data
+        manager = EventManager(data, version=auth.version)
+        manager.normalize()
+
         self._data = data
         self._decoded = True
 
diff --git a/src/sentry/filters/__init__.py b/src/sentry/filters/__init__.py
new file mode 100644
index 0000000000..e3c82b10cc
--- /dev/null
+++ b/src/sentry/filters/__init__.py
@@ -0,0 +1,26 @@
+from __future__ import absolute_import, print_function
+
+__all__ = [
+    'Filter', 'FilterManager', 'FilterNotRegistered', 'all', 'exists', 'get',
+    'register', 'unregister'
+]
+
+from .base import Filter  # NOQA
+from .manager import FilterManager  # NOQA
+
+from .localhost import LocalhostFilter
+from .browser_extensions import BrowserExtensionsFilter
+from .legacy_browsers import LegacyBrowsersFilter
+from .web_crawlers import WebCrawlersFilter
+
+default_manager = FilterManager()
+default_manager.register(LocalhostFilter)
+default_manager.register(BrowserExtensionsFilter)
+default_manager.register(LegacyBrowsersFilter)
+default_manager.register(WebCrawlersFilter)
+
+all = default_manager.all
+exists = default_manager.exists
+get = default_manager.get
+register = default_manager.register
+unregister = default_manager.unregister
diff --git a/src/sentry/filters/base.py b/src/sentry/filters/base.py
new file mode 100644
index 0000000000..4688bd8e78
--- /dev/null
+++ b/src/sentry/filters/base.py
@@ -0,0 +1,35 @@
+from __future__ import absolute_import
+
+__all__ = ['Filter']
+
+from sentry.models import ProjectOption
+
+
+class Filter(object):
+    id = None
+    description = None
+    name = None
+    default = False
+
+    def __init__(self, project):
+        self.project = project
+
+    def is_enabled(self):
+        return ProjectOption.objects.get_value(
+            project=self.project,
+            key='filters:{}'.format(self.id),
+            default='1' if self.default else '0',
+        ) == '1'
+
+    def enable(self, status=True):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:{}'.format(self.id),
+            value='1' if status else '0',
+        )
+
+    def disable(self):
+        return self.enable(False)
+
+    def test(self):
+        return False
diff --git a/src/sentry/filters/browser_extensions.py b/src/sentry/filters/browser_extensions.py
new file mode 100644
index 0000000000..625567769e
--- /dev/null
+++ b/src/sentry/filters/browser_extensions.py
@@ -0,0 +1,84 @@
+from __future__ import absolute_import
+
+from .base import Filter
+
+import re
+
+EXTENSION_EXC_VALUES = re.compile('|'.join((re.escape(x) for x in (
+    # Random plugins/extensions
+    'top.GLOBALS',
+    # See: http://blog.errorception.com/2012/03/tale-of-unfindable-js-error. html
+    'originalCreateNotification',
+    'canvas.contentDocument',
+    'MyApp_RemoveAllHighlights',
+    'http://tt.epicplay.com',
+    'Can\'t find variable: ZiteReader',
+    'jigsaw is not defined',
+    'ComboSearch is not defined',
+    'http://loading.retry.widdit.com/',
+    'atomicFindClose',
+    # Facebook borked
+    'fb_xd_fragment',
+    # ISP "optimizing" proxy - `Cache-Control: no-transform` seems to
+    # reduce this. (thanks @acdha)
+    # See http://stackoverflow.com/questions/4113268
+    'bmi_SafeAddOnload',
+    'EBCallBackMessageReceived',
+    # See http://toolbar.conduit.com/Developer/HtmlAndGadget/Methods/JSInjection.aspx
+    'conduitPage'
+))), re.I)
+
+EXTENSION_EXC_SOURCES = re.compile('|'.join((
+    # Facebook flakiness
+    r'graph\.facebook\.com'
+    # Facebook blocked
+    r'connect\.facebook\.net\/en_US\/all\.js',
+    # Woopra flakiness
+    r'eatdifferent\.com\.woopra-ns\.com',
+    r'static\.woopra\.com\/js\/woopra\.js',
+    # Chrome extensions
+    r'^chrome:\/\/',
+    # Cacaoweb
+    r'127\.0\.0\.1:4001\/isrunning',
+    # Other
+    r'webappstoolbarba\.texthelp\.com\/',
+    r'metrics\.itunes\.apple\.com\.edgesuite\.net\/',
+)), re.I)
+
+
+class BrowserExtensionsFilter(Filter):
+    id = 'browser-extensions'
+    name = 'Filter out errors known to be caused by browser extensions'
+    description = 'Certain browser extensions will inject inline scripts and are known to cause errors.'
+
+    def get_exception_value(self, data):
+        try:
+            return data['sentry.interfaces.Exception']['values'][0]['value']
+        except LookupError:
+            return ''
+
+    def get_exception_source(self, data):
+        try:
+            return data['sentry.interfaces.Exception']['values'][0]['stacktrace']['frames'][-1]['abs_path']
+        except LookupError:
+            return ''
+
+    def test(self, data):
+        """
+        Test the exception value to determine if it looks like the error is
+        caused by a common browser extension.
+        """
+        if data.get('platform') != 'javascript':
+            return False
+
+        exc_value = self.get_exception_value(data)
+        if exc_value:
+            if EXTENSION_EXC_VALUES.search(exc_value):
+                return True
+
+        exc_source = self.get_exception_source(data)
+        if exc_source:
+            if EXTENSION_EXC_SOURCES.match(exc_source):
+                return True
+
+        return False
diff --git a/src/sentry/filters/legacy_browsers.py b/src/sentry/filters/legacy_browsers.py
new file mode 100644
index 0000000000..70e6a7bde6
--- /dev/null
+++ b/src/sentry/filters/legacy_browsers.py
@@ -0,0 +1,55 @@
+from __future__ import absolute_import
+
+from .base import Filter
+
+from ua_parser.user_agent_parser import Parse
+
+MIN_VERSIONS = {
+    'Chrome': 0,
+    'IE': 10,
+    'Firefox': 0,
+    'Safari': 6,
+    'Edge': 0,
+    'Opera': 15,
+}
+
+
+class LegacyBrowsersFilter(Filter):
+    id = 'legacy-browsers'
+    name = 'Filter out known errors from legacy browsers'
+    description = 'Older browsers often give less accurate information, and while they may report valid issues, the context to understand them is incorrect or missing.'
+    default = True
+
+    def get_user_agent(self, data):
+        try:
+            for key, value in data['sentry.interfaces.Http']['headers']:
+                if key.lower() == 'user-agent':
+                    return value
+        except LookupError:
+            return ''
+
+    def test(self, data):
+        if data.get('platform') != 'javascript':
+            return False
+
+        value = self.get_user_agent(data)
+        if not value:
+            return False
+
+        ua = Parse(value)
+        if not ua:
+            return False
+
+        browser = ua['user_agent']
+        if not browser['family']:
+            return False
+
+        try:
+            minimum_version = MIN_VERSIONS[browser['family']]
+        except KeyError:
+            return False
+
+        if minimum_version > int(browser['major']):
+            return True
+
+        return False
diff --git a/src/sentry/filters/localhost.py b/src/sentry/filters/localhost.py
new file mode 100644
index 0000000000..9130805ec6
--- /dev/null
+++ b/src/sentry/filters/localhost.py
@@ -0,0 +1,20 @@
+from __future__ import absolute_import
+
+from .base import Filter
+
+LOCAL_IPS = frozenset(['127.0.0.1', '::1'])
+
+
+class LocalhostFilter(Filter):
+    id = 'localhost'
+    name = 'Filter out errors coming from localhost'
+    description = 'This applies to to both IPv4 (``127.0.0.1``) and IPv6 (``::1``) addresses.'
+
+    def get_ip_address(self, data):
+        try:
+            return data['sentry.interfaces.User']['ip_address']
+        except KeyError:
+            return ''
+
+    def test(self, data):
+        return self.get_ip_address(data) in LOCAL_IPS
diff --git a/src/sentry/filters/manager.py b/src/sentry/filters/manager.py
new file mode 100644
index 0000000000..a70eb6595e
--- /dev/null
+++ b/src/sentry/filters/manager.py
@@ -0,0 +1,45 @@
+from __future__ import absolute_import, print_function
+
+__all__ = ['FilterManager', 'FilterNotRegistered']
+
+import six
+
+
+class FilterNotRegistered(Exception):
+    pass
+
+
+# TODO(dcramer): a lot of these managers are very similar and should abstracted
+# into some kind of base class
+class FilterManager(object):
+    def __init__(self):
+        self.__values = {}
+
+    def __iter__(self):
+        return six.itervalues(self.__values)
+
+    def all(self):
+        return iter(self)
+
+    def get(self, id):
+        try:
+            cls = self.__values[id]
+        except KeyError:
+            raise FilterNotRegistered(id)
+        return cls
+
+    def exists(self, id):
+        return id in self.__values
+
+    def register(self, cls):
+        self.__values[cls.id] = cls
+
+    def unregister(self, cls):
+        try:
+            if self.__values[cls.id] != cls:
+                # dont allow unregistering of arbitrary provider
+                raise FilterNotRegistered(cls.id)
+        except KeyError:
+            # we gracefully handle a missing provider
+            return
+        del self.__values[cls.id]
diff --git a/src/sentry/filters/web_crawlers.py b/src/sentry/filters/web_crawlers.py
new file mode 100644
index 0000000000..4661f05cb6
--- /dev/null
+++ b/src/sentry/filters/web_crawlers.py
@@ -0,0 +1,54 @@
+from __future__ import absolute_import
+
+import re
+
+from .base import Filter
+
+# not all of these agents are guaranteed to execute JavaScript, but to avoid
+# overhead of identifying which ones do, and which ones will over time we simply
+# target all of the major ones
+CRAWLERS = re.compile(r'|'.join((
+    # various Google services
+    r'AdsBot',
+    # Google Adsense
+    r'Mediapartners',
+    # Google+ and Google web search
+    r'Google',
+    # Bing search
+    r'BingBot',
+    # Yahoo
+    r'Slurp',
+    # Sogou
+    r'Sogou',
+    # facebook
+    r'facebook',
+    # Alexa
+    r'ia_archiver',
+    # Generic bot
+    r'bot[\/\s\)\;]',
+    # Generic spider
+    r'spider[\/\s\)\;]',
+)), re.I)
+
+
+class WebCrawlersFilter(Filter):
+    id = 'web-crawlers'
+    name = 'Filter out known web crawlers'
+    description = 'Some crawlers may execute pages in incompatible ways which then cause errors that are unlikely to be seen by a normal user.'
+    default = True
+
+    def get_user_agent(self, data):
+        try:
+            for key, value in data['sentry.interfaces.Http']['headers']:
+                if key.lower() == 'user-agent':
+                    return value
+        except LookupError:
+            return ''
+
+    def test(self, data):
+        # TODO(dcramer): we could also look at UA parser and use the 'Spider'
+        # device type
+        user_agent = self.get_user_agent(data)
+        if not user_agent:
+            return False
+        return bool(CRAWLERS.search(user_agent))
diff --git a/src/sentry/static/sentry/app/components/activity/note.jsx b/src/sentry/static/sentry/app/components/activity/note.jsx
index 02c1871347..cb4408ed5d 100644
--- a/src/sentry/static/sentry/app/components/activity/note.jsx
+++ b/src/sentry/static/sentry/app/components/activity/note.jsx
@@ -1,17 +1,10 @@
 import React from 'react';
 
-import marked from 'marked';
 import TimeSince from '../../components/timeSince';
 import ConfigStore from '../../stores/configStore';
 import LinkWithConfirmation from '../../components/linkWithConfirmation';
 import {t} from '../../locale';
-import Renderer from '../../utils/marked';
-
-marked.setOptions({
-  renderer: new Renderer(),
-  // Disable all HTML input and only accept Markdown
-  sanitize: true
-});
+import marked from '../../utils/marked';
 
 const Note = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/menuItem.jsx b/src/sentry/static/sentry/app/components/menuItem.jsx
index 65868d51d6..81e18c8e5e 100644
--- a/src/sentry/static/sentry/app/components/menuItem.jsx
+++ b/src/sentry/static/sentry/app/components/menuItem.jsx
@@ -17,7 +17,7 @@ const MenuItem = React.createClass({
     to: React.PropTypes.string,
     query: React.PropTypes.object,
     linkClassName: React.PropTypes.string,
-    onClick: React.PropTypes.function,
+    onClick: React.PropTypes.func,
   },
 
   handleClick(e) {
diff --git a/src/sentry/static/sentry/app/components/switch.jsx b/src/sentry/static/sentry/app/components/switch.jsx
new file mode 100644
index 0000000000..a6fbb70efd
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/switch.jsx
@@ -0,0 +1,35 @@
+import React from 'react';
+
+const Switch = React.createClass({
+  propTypes: {
+    size: React.PropTypes.string,
+    isActive: React.PropTypes.bool,
+    isLoading: React.PropTypes.bool,
+    toggle: React.PropTypes.func.isRequired,
+  },
+
+  render() {
+
+    let switchClasses = 'switch';
+
+    if (this.props.size) {
+      switchClasses += ' switch-' + this.props.size;
+    }
+
+    if (this.props.isActive) {
+      switchClasses += ' switch-on';
+    }
+
+    if (this.props.isLoading) {
+      switchClasses += ' switch-disabled';
+    }
+
+    return (
+      <div className={switchClasses} onClick={this.props.toggle} role="checkbox" aria-checked={this.props.isActive}>
+        <span className="switch-toggle"/>
+      </div>
+    );
+  }
+});
+
+export default Switch;
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index cf34b76739..24ec4a6cf0 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -36,6 +36,7 @@ import ProjectCspSettings from './views/projectCspSettings';
 import ProjectDashboard from './views/projectDashboard';
 import ProjectDetails from './views/projectDetails';
 import ProjectEvents from './views/projectEvents';
+import ProjectFilters from './views/projectFilters';
 import ProjectInstall from './views/projectInstall';
 import ProjectInstallOverview from './views/projectInstall/overview';
 import ProjectInstallPlatform from './views/projectInstall/platform';
@@ -140,6 +141,7 @@ function routes() {
               <IndexRoute component={errorHandler(ProjectInstallOverview)}/>
               <Route path=":platform/" component={errorHandler(ProjectInstallPlatform)}/>
             </Route>
+            <Route path="filters/" component={errorHandler(ProjectFilters)} />
             <Route path="saved-searches/" component={errorHandler(ProjectSavedSearches)} />
             <Route path="debug-symbols/" component={errorHandler(ProjectDebugSymbols)} />
             <Route path="user-feedback/" component={errorHandler(ProjectUserReportSettings)} />
diff --git a/src/sentry/static/sentry/app/utils/marked.jsx b/src/sentry/static/sentry/app/utils/marked.jsx
index a1d445e3b1..8f15096b88 100644
--- a/src/sentry/static/sentry/app/utils/marked.jsx
+++ b/src/sentry/static/sentry/app/utils/marked.jsx
@@ -50,4 +50,10 @@ Renderer.prototype.image = function(href, title, text) {
   return out;
 };
 
-export default Renderer;
+marked.setOptions({
+  renderer: new Renderer(),
+  // Disable all HTML input and only accept Markdown
+  sanitize: true
+});
+
+export default marked;
diff --git a/src/sentry/static/sentry/app/views/organizationStats/index.jsx b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
index cac3ed80c4..ad3e0256f5 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
@@ -226,7 +226,7 @@ const OrganizationStats = React.createClass({
       value += `<br>${intcomma(rejected)} rate limited`;
     }
     if (blacklisted) {
-      value += `<br>${intcomma(blacklisted)} blacklisted`;
+      value += `<br>${intcomma(blacklisted)} filtered`;
     }
 
     return (
@@ -248,7 +248,7 @@ const OrganizationStats = React.createClass({
             three categories: Accepted, Rate Limited, and Blacklisted. Rate
             Limited events are entries that the system threw away due to quotas
             being hit, and Blacklisted events are events that were blocked
-            due to your Blacklisted IPs setting.`)}</p>
+            due to your filters.`)}</p>
           </div>
           {!this.state.statsLoading &&
             <div className="col-md-3 stats-column">
diff --git a/src/sentry/static/sentry/app/views/projectFilters.jsx b/src/sentry/static/sentry/app/views/projectFilters.jsx
new file mode 100644
index 0000000000..d4469eb429
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectFilters.jsx
@@ -0,0 +1,177 @@
+import React from 'react';
+
+import ApiMixin from '../mixins/apiMixin';
+import IndicatorStore from '../stores/indicatorStore';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import Switch from '../components/switch';
+import TooltipMixin from '../mixins/tooltip';
+import {t} from '../locale';
+import marked from '../utils/marked';
+
+const FilterRow = React.createClass({
+  propTypes: {
+    orgId: React.PropTypes.string.isRequired,
+    projectId: React.PropTypes.string.isRequired,
+    data: React.PropTypes.object.isRequired,
+    onToggle: React.PropTypes.func.isRequired,
+  },
+
+  mixins: [
+    ApiMixin,
+    TooltipMixin({
+      selector: '.tip'
+    })
+  ],
+
+  getInitialState() {
+    return {
+      loading: false,
+      error: false,
+    };
+  },
+
+  toggle() {
+    if (this.state.loading)
+      return;
+
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    let {orgId, projectId, data} = this.props;
+    this.api.request(`/projects/${orgId}/${projectId}/filters/${data.id}/`, {
+      method: 'PUT',
+      data: {
+        active: !data.active,
+      },
+      success: (d, _, jqXHR) => {
+        this.props.onToggle(!data.active);
+        IndicatorStore.remove(loadingIndicator);
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+        IndicatorStore.remove(loadingIndicator);
+        IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
+      }
+    });
+  },
+
+  render() {
+    let data = this.props.data;
+    return (
+      <tr>
+        <td>
+          <h5>{data.name}</h5>
+          {data.description &&
+            <small className="help-block" dangerouslySetInnerHTML={{
+              __html: marked(data.description)
+            }} />
+          }
+        </td>
+        <td style={{textAlign: 'right'}}>
+          <Switch size="lg"
+                  isActive={data.active}
+                  isLoading={this.state.loading}
+                  toggle={this.toggle} />
+        </td>
+      </tr>
+    );
+  }
+});
+
+const ProjectFilters = React.createClass({
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      filterList: [],
+    };
+  },
+
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    let {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/filters/`, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          error: false,
+          loading: false,
+          filterList: data
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
+  onToggleFilter(filter, active) {
+    this.state.filterList.find(f => f.id === filter.id).active = active;
+    this.setState({
+      filterList: this.state.filterList
+    });
+  },
+
+  renderBody() {
+    let body;
+
+    if (this.state.loading)
+      body = this.renderLoading();
+    else if (this.state.error)
+      body = <LoadingError onRetry={this.fetchData} />;
+    else
+      body = this.renderResults();
+
+    return body;
+  },
+
+  renderLoading() {
+    return (
+      <div className="box">
+        <LoadingIndicator />
+      </div>
+    );
+  },
+
+  renderResults() {
+    let {orgId, projectId} = this.props.params;
+    return (
+      <table className="table">
+        <tbody>
+          {this.state.filterList.map((filter) => {
+            return (
+              <FilterRow
+                key={filter.id}
+                data={filter}
+                orgId={orgId}
+                projectId={projectId}
+                onToggle={this.onToggleFilter.bind(this, filter)} />
+            );
+          })}
+        </tbody>
+      </table>
+    );
+  },
+
+  render() {
+    // TODO(dcramer): localize when language is final
+    return (
+      <div>
+        <h1>{t('Inbound Data Filters')}</h1>
+        <p>Filters allow you to prevent Sentry from storing events in certain situations. Filtered events are tracked separately from rate limits, and do not apply to any project quotas.</p>
+        {this.renderBody()}
+      </div>
+    );
+  }
+});
+
+export default ProjectFilters;
diff --git a/src/sentry/static/sentry/app/views/projectSavedSearches.jsx b/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
index 84070e7957..1c9f1c01b8 100644
--- a/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
+++ b/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
@@ -113,10 +113,6 @@ const SavedSearchRow = React.createClass({
 });
 
 const ProjectSavedSearches = React.createClass({
-  propTypes: {
-    setProjectNavSection: React.PropTypes.func
-  },
-
   mixins: [ApiMixin],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index 975cb2d8b7..de6558e4a3 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -107,6 +107,7 @@ const ProjectSettings = React.createClass({
               <ListLink to={`/${orgId}/${projectId}/settings/csp/`}>{t('CSP Reports')}</ListLink>
             }
             <ListLink to={`/${orgId}/${projectId}/settings/user-feedback/`}>{t('User Feedback')}</ListLink>
+            <ListLink to={`/${orgId}/${projectId}/settings/filters/`}>{t('Inbound Filters')}</ListLink>
             <li><a href={`${settingsUrlRoot}/keys/`}>{t('Client Keys')} (DSN)</a></li>
           </ul>
           <h6 className="nav-header">{t('Integrations')}</h6>
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index e9b9a95c25..f1b17c4358 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -731,6 +731,87 @@ table.integrations {
   }
 }
 
+/**
+* Switch
+* ============================================================================
+*/
+
+@switch-sm-height: 16px;
+@switch-lg-height: 24px;
+
+.switch {
+  display: inline-block;
+  border: 1px solid @trim;
+  position: relative;
+  box-shadow: inset 0 1px 1px rgba(0,0,0, .04);
+  cursor: pointer;
+  .transition(border .15s ease);
+
+  &:hover {
+    border-color: darken(@trim, 10);
+  }
+
+  .switch-toggle {
+    display: block;
+    position: absolute;
+    border-radius: 50%;
+    background: @gray-lighter;
+    .transition(all .25s ease);
+  }
+
+  &.switch-on {
+    border-color: darken(@trim, 10);
+    .switch-toggle {
+      background: @green;
+    }
+  }
+
+  &.switch-disabled {
+    cursor: not-allowed;
+    pointer-events: none
+  }
+}
+
+// To replace checkboxes
+
+.switch-sm {
+  height: @switch-sm-height;
+  width: @switch-sm-height * 2;
+  border-radius: @switch-sm-height;
+
+  .switch-toggle {
+    top: 2px;
+    left: 2px;
+    .square(@switch-sm-height - 6); // (3*2) Room for border and padding on top and bottom
+  }
+
+  &.switch-on {
+    .switch-toggle{
+      left: @switch-sm-height + 2;
+    }
+  }
+}
+
+// When you need to go slightly bigger
+
+.switch-lg {
+  height: @switch-lg-height;
+  width: @switch-lg-height * 2;
+  border-radius: @switch-lg-height;
+
+  .switch-toggle {
+    top: 4px;
+    left: 4px;
+    .square(@switch-lg-height - 10); // (10*2) Room for border and padding on top and bottom
+  }
+
+  &.switch-on {
+    .switch-toggle{
+      left: @switch-lg-height + 4;
+    }
+  }
+}
+
 /**
 * Auth providers
 * ============================================================================
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 68a723feb9..bc9a0e9940 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -210,6 +210,9 @@
     <li>
         <a href="{% absolute_uri '/{}/{}/settings/user-feedback/' project.organization.slug project.slug %}">{% trans "User Feedback" %}</a>
     </li>
+    <li>
+        <a href="{% absolute_uri '/{}/{}/settings/filters/' project.organization.slug project.slug %}">{% trans "Inbound Filters" %}</a>
+    </li>
     <li{% if page == 'keys' %} class="active"{% endif %}>
         <a href="{% url 'sentry-manage-project-keys' project.organization.slug project.slug %}">{% trans "Client Keys (DSN)" %}</a>
     </li>
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 1ccea44490..32c963c44c 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -44,6 +44,8 @@ from sentry.utils import json
 from .fixtures import Fixtures
 from .helpers import AuthProvider, Feature, get_auth_header, TaskRunner, override_options
 
+DEFAULT_USER_AGENT = 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36'
+
 
 class BaseTestCase(Fixtures, Exam):
     urls = 'sentry.web.urls'
@@ -167,7 +169,7 @@ class BaseTestCase(Fixtures, Exam):
             return self.client.post(
                 path, data=body,
                 content_type='application/csp-report',
-                HTTP_USER_AGENT='awesome',
+                HTTP_USER_AGENT=DEFAULT_USER_AGENT,
                 **extra
             )
 
diff --git a/src/sentry/utils/csp.py b/src/sentry/utils/csp.py
index 77d08caee7..082f8d745b 100644
--- a/src/sentry/utils/csp.py
+++ b/src/sentry/utils/csp.py
@@ -78,15 +78,14 @@ def is_valid_csp_report(report, project=None):
     # Some reports from Chrome report blocked-uri as just 'about'.
     # In this case, this is not actionable and is just noisy.
     # Observed in Chrome 45 and 46.
-
-    if report.get('effective-directive') not in ALLOWED_DIRECTIVES:
+    if report.get('effective_directive') not in ALLOWED_DIRECTIVES:
         return False
 
-    blocked_uri = report.get('blocked-uri')
+    blocked_uri = report.get('blocked_uri')
     if blocked_uri == 'about':
         return False
 
-    source_file = report.get('source-file')
+    source_file = report.get('source_file')
 
     # We must have one of these to do anyting sensible
     if not any((blocked_uri, source_file)):
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 0f910f7551..55112db189 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -22,7 +22,6 @@ from sentry.coreapi import (
     APIError, APIForbidden, APIRateLimited, ClientApiHelper, CspApiHelper,
     LazyData
 )
-from sentry.event_manager import EventManager
 from sentry.models import Project, OrganizationOption
 from sentry.signals import event_accepted, event_received
 from sentry.quotas.base import RateLimit
@@ -290,13 +289,17 @@ class StoreView(APIView):
         if not data:
             raise APIError('No JSON data was found')
 
+        remote_addr = request.META['REMOTE_ADDR']
+
         data = LazyData(
             data=data,
             content_encoding=request.META.get('HTTP_CONTENT_ENCODING', ''),
             helper=helper,
+            project=project,
+            auth=auth,
+            client_ip=remote_addr,
         )
 
-        remote_addr = request.META['REMOTE_ADDR']
         event_received.send_robust(
             ip=remote_addr,
             sender=type(self),
@@ -338,21 +341,6 @@ class StoreView(APIView):
                 (app.tsdb.models.organization_total_received, project.organization_id),
             ])
 
-        # mutates data
-        data = helper.validate_data(project, data)
-
-        if 'sdk' not in data:
-            sdk = helper.parse_client_as_sdk(auth.client)
-            if sdk:
-                data['sdk'] = sdk
-            else:
-                data['sdk'] = {}
-        data['sdk']['client_ip'] = remote_addr
-
-        # mutates data
-        manager = EventManager(data, version=auth.version)
-        manager.normalize()
-
         org_options = OrganizationOption.objects.get_all_values(project.organization_id)
 
         if org_options.get('sentry:require_scrub_ip_address', False):
@@ -360,12 +348,6 @@ class StoreView(APIView):
         else:
             scrub_ip_address = project.get_option('sentry:scrub_ip_address', False)
 
-        # insert IP address if not available and wanted
-        if not scrub_ip_address:
-            helper.ensure_has_ip(
-                data, remote_addr, set_if_missing=auth.is_public or
-                data.get('platform') in ('javascript', 'cocoa', 'objc'))
-
         event_id = data['event_id']
 
         # TODO(dcramer): ideally we'd only validate this if the event_id was
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index 6961027534..68ae3874a0 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -58,12 +58,14 @@ class EditProjectForm(forms.ModelForm):
         help_text=_('Prevent IP addresses from being stored for new events.'),
         required=False
     )
+
+    # JavaScript options
     scrape_javascript = forms.BooleanField(
         label=_('Enable JavaScript source fetching'),
         help_text=_('Allow Sentry to scrape missing JavaScript source context when possible.'),
         required=False,
     )
-    blacklisted_ips = IPNetworksField(label=_('Blacklisted IP Addresses'), required=False,
+    blacklisted_ips = IPNetworksField(label=_('Filtered IP Addresses'), required=False,
         help_text=_('Separate multiple entries with a newline.'))
 
     # Options that are overridden by Organization level settings
@@ -206,24 +208,27 @@ class ProjectSettingsView(ProjectView):
         if form.is_valid():
             project = form.save()
             for opt in (
-                    'origins',
-                    'token',
-                    'resolve_age',
-                    'scrub_data',
-                    'scrub_defaults',
-                    'sensitive_fields',
-                    'scrub_ip_address',
-                    'scrape_javascript',
-                    'blacklisted_ips',
-                    'default_environment'):
+                'origins',
+                'token',
+                'resolve_age',
+                'scrub_data',
+                'scrub_defaults',
+                'sensitive_fields',
+                'scrub_ip_address',
+                'scrape_javascript',
+                'blacklisted_ips',
+                'default_environment',
+            ):
+                opt_key = 'sentry:{}'.format(opt)
+
                 # Value can't be overridden if set on the org level
-                if opt in form.org_overrides and organization.get_option('sentry:%s' % (opt,), False):
+                if opt in form.org_overrides and organization.get_option(opt_key, False):
                     continue
                 value = form.cleaned_data.get(opt)
                 if value is None:
-                    project.delete_option('sentry:%s' % (opt,))
+                    project.delete_option(opt_key)
                 else:
-                    project.update_option('sentry:%s' % (opt,), value)
+                    project.update_option(opt_key, value)
 
             project.update_option('sentry:reviewed-callsign', True)
 
diff --git a/tests/integration/fixtures/csp/chrome_blocked_asset_input.json b/tests/integration/fixtures/csp/chrome_blocked_asset_input.json
index db02cac084..f394476069 100644
--- a/tests/integration/fixtures/csp/chrome_blocked_asset_input.json
+++ b/tests/integration/fixtures/csp/chrome_blocked_asset_input.json
@@ -1 +1,11 @@
-{"csp-report":{"document-uri":"http://notlocalhost:8000/","referrer":"","violated-directive":"style-src cdn.example.com","effective-directive":"style-src","original-policy":"default-src 'none'; style-src cdn.example.com; report-uri http://requestb.in/1im8m061","blocked-uri":"http://notlocalhost:8000/lol.css","status-code":200}}
+{
+    "csp-report": {
+        "document-uri": "http://notlocalhost:8000/",
+        "referrer": "",
+        "violated-directive": "style-src cdn.example.com",
+        "effective-directive": "style-src",
+        "original-policy": "default-src 'none'; style-src cdn.example.com; report-uri http://requestb.in/1im8m061",
+        "blocked-uri": "http://notlocalhost:8000/lol.css",
+        "status-code": 200
+    }
+}
diff --git a/tests/integration/fixtures/csp/chrome_blocked_asset_output.json b/tests/integration/fixtures/csp/chrome_blocked_asset_output.json
index a187799669..f88bed14f5 100644
--- a/tests/integration/fixtures/csp/chrome_blocked_asset_output.json
+++ b/tests/integration/fixtures/csp/chrome_blocked_asset_output.json
@@ -17,7 +17,7 @@
     },
     "sentry.interfaces.Http": {
       "url": "http://notlocalhost:8000/",
-      "headers": [["User-Agent", "awesome"]]
+      "headers": [["User-Agent", "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36"]]
     }
   }
 }
diff --git a/tests/integration/fixtures/csp/firefox_blocked_asset_input.json b/tests/integration/fixtures/csp/firefox_blocked_asset_input.json
index 555071f82d..b04a87aa6d 100644
--- a/tests/integration/fixtures/csp/firefox_blocked_asset_input.json
+++ b/tests/integration/fixtures/csp/firefox_blocked_asset_input.json
@@ -1 +1,9 @@
-{"csp-report":{"blocked-uri":"http://localhost:8000/lol.css","document-uri":"http://localhost:8000/","original-policy":"default-src 'none'; style-src http://cdn.example.com; report-uri http://requestb.in/1im8m061","referrer":"","violated-directive":"style-src http://cdn.example.com"}}
+{
+    "csp-report": {
+        "blocked-uri": "http://localhost:8000/lol.css",
+        "document-uri": "http://localhost:8000/",
+        "original-policy": "default-src 'none'; style-src http://cdn.example.com; report-uri http://requestb.in/1im8m061",
+        "referrer": "",
+        "violated-directive": "style-src http://cdn.example.com"
+    }
+}
diff --git a/tests/js/spec/utils/marked.spec.jsx b/tests/js/spec/utils/marked.spec.jsx
index 7889c8250c..d202b45dac 100644
--- a/tests/js/spec/utils/marked.spec.jsx
+++ b/tests/js/spec/utils/marked.spec.jsx
@@ -1,21 +1,12 @@
 /*eslint no-script-url:0*/
 
-import marked from 'marked';
-import Renderer from 'app/utils/marked';
+import marked from 'app/utils/marked';
 
 function expectMarkdown(test) {
   expect(marked(test[0])).to.eql('<p>' + test[1] + '</p>\n');
 }
 
 describe('marked', function () {
-  beforeEach(function () {
-    marked.options = marked.defaults;
-    marked.setOptions({
-      sanitize: true,
-      renderer: new Renderer()
-    });
-  });
-
   it('normal links get rendered as html', function () {
     for (let test of [
       ['[x](http://example.com)', '<a href="http://example.com">x</a>'],
diff --git a/tests/sentry/filters/test_browser_extensions.py b/tests/sentry/filters/test_browser_extensions.py
new file mode 100644
index 0000000000..b40647ec31
--- /dev/null
+++ b/tests/sentry/filters/test_browser_extensions.py
@@ -0,0 +1,52 @@
+from __future__ import absolute_import
+
+from sentry.filters.browser_extensions import BrowserExtensionsFilter
+from sentry.testutils import TestCase
+
+
+class BrowserExtensionsFilterTest(TestCase):
+    filter_cls = BrowserExtensionsFilter
+
+    def apply_filter(self, data):
+        return self.filter_cls(self.project).test(data)
+
+    def get_mock_data(self, exc_value=None, exc_source=None):
+        return {
+            'platform': 'javascript',
+            'sentry.interfaces.Exception': {
+                'values': [
+                    {
+                        'type': 'Error',
+                        'value': exc_value or 'undefined is not defined',
+                        'stacktrace': {
+                            'frames': [
+                                {
+                                    'abs_path': 'http://example.com/foo.js'
+                                },
+                                {
+                                    'abs_path': exc_source or 'http://example.com/bar.js'
+                                },
+                            ],
+                        }
+                    }
+                ]
+            }
+        }
+
+    def test_bails_without_javascript_event(self):
+        data = {
+            'platform': 'python'
+        }
+        assert not self.apply_filter(data)
+
+    def test_filters_conduit_toolbar(self):
+        data = self.get_mock_data(exc_value='what does conduitPage even do')
+        assert self.apply_filter(data)
+
+    def test_filters_chrome_extensions(self):
+        data = self.get_mock_data(exc_source='chrome://my-extension/or/something')
+        assert self.apply_filter(data)
+
+    def test_does_not_filter_generic_data(self):
+        data = self.get_mock_data()
+        assert not self.apply_filter(data)
diff --git a/tests/sentry/filters/test_legacy_browsers.py b/tests/sentry/filters/test_legacy_browsers.py
new file mode 100644
index 0000000000..555255960f
--- /dev/null
+++ b/tests/sentry/filters/test_legacy_browsers.py
@@ -0,0 +1,43 @@
+from __future__ import absolute_import
+
+from sentry.filters.legacy_browsers import LegacyBrowsersFilter
+from sentry.testutils import TestCase
+
+
+class LegacyBrowsersFilterTest(TestCase):
+    filter_cls = LegacyBrowsersFilter
+
+    def apply_filter(self, data):
+        return self.filter_cls(self.project).test(data)
+
+    def get_mock_data(self, user_agent):
+        return {
+            'platform': 'javascript',
+            'sentry.interfaces.Http': {
+                'url': 'http://example.com',
+                'method': 'GET',
+                'headers': [
+                    ['User-Agent', user_agent],
+                ]
+            }
+        }
+
+    def test_filters_ie_9(self):
+        data = self.get_mock_data('Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US))')
+        assert self.apply_filter(data) is True
+
+    def test_filters_ie_10(self):
+        data = self.get_mock_data('Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 7.0; InfoPath.3; .NET CLR 3.1.40767; Trident/6.0; en-IN)')
+        assert self.apply_filter(data) is False
+
+    def test_filters_opera_12(self):
+        data = self.get_mock_data('Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16')
+        assert self.apply_filter(data) is True
+
+    def test_does_not_filter_chrome(self):
+        data = self.get_mock_data('Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36')
+        assert self.apply_filter(data) is False
+
+    def test_does_not_filter_edge(self):
+        data = self.get_mock_data('Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10136')
+        assert self.apply_filter(data) is False
diff --git a/tests/sentry/filters/test_localhost.py b/tests/sentry/filters/test_localhost.py
new file mode 100644
index 0000000000..db63253386
--- /dev/null
+++ b/tests/sentry/filters/test_localhost.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import
+
+from sentry.filters.localhost import LocalhostFilter
+from sentry.testutils import TestCase
+
+
+class LocalhostFilterTest(TestCase):
+    filter_cls = LocalhostFilter
+
+    def apply_filter(self, data):
+        return self.filter_cls(self.project).test(data)
+
+    def get_mock_data(self, client_ip=None):
+        return {
+            'sentry.interfaces.User': {
+                'ip_address': client_ip,
+            }
+        }
+
+    def test_filters_localhost_ipv4(self):
+        data = self.get_mock_data('127.0.0.1')
+        assert self.apply_filter(data)
+
+    def test_filters_localhost_ipv6(self):
+        data = self.get_mock_data('::1')
+        assert self.apply_filter(data)
+
+    def test_does_not_filter_external_ip(self):
+        data = self.get_mock_data('74.1.3.56')
+        assert not self.apply_filter(data)
+
+    def test_fails_gracefully_without_user(self):
+        assert not self.apply_filter({})
diff --git a/tests/sentry/filters/test_web_crawlers.py b/tests/sentry/filters/test_web_crawlers.py
new file mode 100644
index 0000000000..6c4ce3b1a6
--- /dev/null
+++ b/tests/sentry/filters/test_web_crawlers.py
@@ -0,0 +1,30 @@
+from __future__ import absolute_import
+
+from sentry.filters.web_crawlers import WebCrawlersFilter
+from sentry.testutils import TestCase
+
+
+class WebCrawlersFilterTest(TestCase):
+    filter_cls = WebCrawlersFilter
+
+    def apply_filter(self, data):
+        return self.filter_cls(self.project).test(data)
+
+    def get_mock_data(self, user_agent):
+        return {
+            'sentry.interfaces.Http': {
+                'url': 'http://example.com',
+                'method': 'GET',
+                'headers': [
+                    ['User-Agent', user_agent],
+                ]
+            }
+        }
+
+    def test_filters_googlebot(self):
+        data = self.get_mock_data('Googlebot')
+        assert self.apply_filter(data)
+
+    def test_does_not_filter_chrome(self):
+        data = self.get_mock_data('Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36')
+        assert not self.apply_filter(data)
diff --git a/tests/sentry/utils/test_csp.py b/tests/sentry/utils/test_csp.py
index eed048a48b..32599e7739 100644
--- a/tests/sentry/utils/test_csp.py
+++ b/tests/sentry/utils/test_csp.py
@@ -7,23 +7,23 @@ from sentry.utils.csp import is_valid_csp_report
 
 @pytest.mark.parametrize('report', (
     {},
-    {'effective-directive': 'lolnotreal'},
-    {'effective-directive': 'style-src'},
-    {'effective-directive': 'style-src', 'blocked-uri': 'about'},
-    {'effective-directive': 'style-src', 'source-file': 'chrome-extension://fdsa'},
-    {'effective-directive': 'style-src', 'source-file': 'http://localhost:8000'},
-    {'effective-directive': 'style-src', 'source-file': 'http://localhost'},
-    {'effective-directive': 'style-src', 'source-file': 'http://foo.superfish.com'},
-    {'effective-directive': 'style-src', 'blocked-uri': 'http://foo.superfish.com'},
+    {'effective_directive': 'lolnotreal'},
+    {'effective_directive': 'style-src'},
+    {'effective_directive': 'style-src', 'blocked_uri': 'about'},
+    {'effective_directive': 'style-src', 'source_file': 'chrome-extension://fdsa'},
+    {'effective_directive': 'style-src', 'source_file': 'http://localhost:8000'},
+    {'effective_directive': 'style-src', 'source_file': 'http://localhost'},
+    {'effective_directive': 'style-src', 'source_file': 'http://foo.superfish.com'},
+    {'effective_directive': 'style-src', 'blocked_uri': 'http://foo.superfish.com'},
 ))
 def test_blocked_csp_report(report):
     assert is_valid_csp_report(report) is False
 
 
 @pytest.mark.parametrize('report', (
-    {'effective-directive': 'style-src', 'blocked-uri': 'http://example.com'},
-    {'effective-directive': 'script-src', 'blocked-uri': 'http://example.com'},
-    {'effective-directive': 'style-src', 'source-file': 'http://example.com'},
+    {'effective_directive': 'style-src', 'blocked_uri': 'http://example.com'},
+    {'effective_directive': 'script-src', 'blocked_uri': 'http://example.com'},
+    {'effective_directive': 'style-src', 'source_file': 'http://example.com'},
 ))
 def test_valid_csp_report(report):
     assert is_valid_csp_report(report) is True
