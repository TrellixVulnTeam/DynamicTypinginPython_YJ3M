commit 6419abcf77f691c0a24472c0ff3d0deee2e506f6
Author: evanh <evanh@users.noreply.github.com>
Date:   Fri May 8 16:19:42 2020 -0400

    feat(performance) Add user_misery function to performance (#18605)
    
    Instead of impact, calculate how many unique users were outside the apdex range,
    as well as the count of total unique users, to give a sense of the impact a
    poorly performing transaction is having on users.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 429198be20..eabccaefb4 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -260,6 +260,7 @@ class SearchVisitor(NodeVisitor):
             "p95",
             "p99",
             "error_rate",
+            "user_misery",
         ]
     )
     date_keys = set(
@@ -1124,6 +1125,13 @@ FUNCTIONS = {
         "transform": u"plus(minus(1, divide(plus(countIf(less(duration, {satisfaction:g})),divide(countIf(and(greater(duration, {satisfaction:g}),less(duration, {tolerated:g}))),2)),count())),multiply(minus(1,divide(1,sqrt(uniq(user)))),3))",
         "result_type": "number",
     },
+    "user_misery": {
+        "name": "user_misery",
+        "args": [NumberRange("satisfaction", 0, None)],
+        "calculated_args": [{"name": "tolerated", "fn": lambda args: args["satisfaction"] * 4.0}],
+        "transform": u"uniqIf(user, duration > {tolerated:g})",
+        "result_type": "number",
+    },
     "error_rate": {
         "name": "error_rate",
         "args": [],
diff --git a/src/sentry/static/sentry/app/utils/discover/fields.tsx b/src/sentry/static/sentry/app/utils/discover/fields.tsx
index bf9b2b9117..135bb55558 100644
--- a/src/sentry/static/sentry/app/utils/discover/fields.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/fields.tsx
@@ -195,6 +195,18 @@ export const AGGREGATIONS = {
     outputType: 'number',
     isSortable: true,
   },
+  user_misery: {
+    parameters: [
+      {
+        kind: 'value',
+        dataType: 'number',
+        defaultValue: '300',
+        required: true,
+      },
+    ],
+    outputType: 'number',
+    isSortable: true,
+  },
   rps: {
     parameters: [],
     outputType: 'number',
@@ -316,6 +328,7 @@ export const TRACING_FIELDS = [
   'error_rate',
   'apdex',
   'impact',
+  'user_misery',
   'rps',
   'rpm',
 ];
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 05fb8d5a39..7a6891feda 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -167,6 +167,7 @@ const TRANSFORM_AGGREGATES: {[field: string]: string} = {
   latest_event: 'id',
   apdex: '',
   impact: '',
+  user_misery: '',
   error_rate: '',
 };
 
diff --git a/src/sentry/static/sentry/app/views/performance/data.tsx b/src/sentry/static/sentry/app/views/performance/data.tsx
index b5728e8b54..7163f166b5 100644
--- a/src/sentry/static/sentry/app/views/performance/data.tsx
+++ b/src/sentry/static/sentry/app/views/performance/data.tsx
@@ -20,8 +20,9 @@ export const PERFORMANCE_EVENT_VIEW: Readonly<NewQuery> = {
     'p50()',
     'p95()',
     'error_rate()',
-    'apdex()',
-    'impact()',
+    'apdex(300)',
+    'user_misery(300)',
+    'count_unique(user)',
   ],
   version: 2,
 };
diff --git a/src/sentry/static/sentry/app/views/performance/table.tsx b/src/sentry/static/sentry/app/views/performance/table.tsx
index 512f90ddce..04ad8548b0 100644
--- a/src/sentry/static/sentry/app/views/performance/table.tsx
+++ b/src/sentry/static/sentry/app/views/performance/table.tsx
@@ -249,7 +249,7 @@ const StyledSearchBar = styled(SearchBar)`
 `;
 
 const StyledPanelTable = styled(PanelTable)`
-  grid-template-columns: minmax(300px, auto) repeat(7, minmax(80px, 150px));
+  grid-template-columns: minmax(300px, auto) repeat(8, minmax(80px, 175px));
 `;
 
 export default withProjects(Table);
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx
index d23dc53448..1aeee83548 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx
@@ -28,7 +28,7 @@ class UserStats extends React.Component<Props> {
       },
       {
         kind: 'function',
-        function: ['impact', '', undefined],
+        function: ['user_misery', '300', undefined],
       },
     ]);
 
@@ -82,8 +82,8 @@ class UserStats extends React.Component<Props> {
                 <StatNumber>{stats['apdex()']}</StatNumber>
               </div>
               <div>
-                <StatTitle>{t('User Impact')}</StatTitle>
-                <StatNumber>{stats['impact()']}</StatNumber>
+                <StatTitle>{t('User Misery')}</StatTitle>
+                <StatNumber>{stats['user_misery(300)']}</StatNumber>
               </div>
             </Container>
           );
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 4fd1265cc4..775cff99b8 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -51,6 +51,7 @@ def test_get_json_meta_type():
     assert get_json_meta_type("apdex_transaction_duration_300", "number") == "number"
     assert get_json_meta_type("error_rate", "number") == "percentage"
     assert get_json_meta_type("impact_300", "number") == "number"
+    assert get_json_meta_type("user_misery_300", "number") == "number"
     assert get_json_meta_type("percentile_transaction_duration_0_95", "number") == "duration"
 
 
@@ -1329,6 +1330,7 @@ class ResolveFieldListTest(unittest.TestCase):
             "last_seen()",
             "apdex(300)",
             "impact(300)",
+            "user_misery(300)",
             "percentile(transaction.duration, 0.75)",
             "percentile(transaction.duration, 0.95)",
             "percentile(transaction.duration, 0.99)",
@@ -1346,6 +1348,7 @@ class ResolveFieldListTest(unittest.TestCase):
                 None,
                 "impact_300",
             ],
+            ["uniqIf(user, duration > 1200)", None, "user_misery_300"],
             ["quantile(0.75)", "transaction.duration", "percentile_transaction_duration_0_75"],
             ["quantile(0.95)", "transaction.duration", "percentile_transaction_duration_0_95"],
             ["quantile(0.99)", "transaction.duration", "percentile_transaction_duration_0_99"],
diff --git a/tests/sentry/snuba/test_discover.py b/tests/sentry/snuba/test_discover.py
index 746a427196..61d146de35 100644
--- a/tests/sentry/snuba/test_discover.py
+++ b/tests/sentry/snuba/test_discover.py
@@ -640,6 +640,45 @@ class QueryTransformTest(TestCase):
             referrer=None,
         )
 
+    @patch("sentry.snuba.discover.raw_query")
+    def test_selected_columns_user_misery_alias(self, mock_query):
+        mock_query.return_value = {
+            "meta": [{"name": "transaction"}, {"name": "user_misery_300"}],
+            "data": [{"transaction": "api.do_things", "user_misery_300": 15}],
+        }
+        discover.query(
+            selected_columns=["transaction", "user_misery(300)"],
+            query="",
+            params={"project_id": [self.project.id]},
+            auto_fields=True,
+        )
+        mock_query.assert_called_with(
+            selected_columns=["transaction"],
+            aggregations=[
+                ["uniqIf(user, duration > 1200)", None, "user_misery_300"],
+                ["argMax", ["event_id", "timestamp"], "latest_event"],
+                ["argMax", ["project_id", "timestamp"], "projectid"],
+                [
+                    "transform(projectid, array({}), array('{}'), '')".format(
+                        six.text_type(self.project.id), self.project.slug
+                    ),
+                    None,
+                    "project.name",
+                ],
+            ],
+            filter_keys={"project_id": [self.project.id]},
+            dataset=Dataset.Discover,
+            groupby=["transaction"],
+            conditions=[],
+            end=None,
+            start=None,
+            orderby=None,
+            having=[],
+            limit=50,
+            offset=None,
+            referrer=None,
+        )
+
     @patch("sentry.snuba.discover.raw_query")
     def test_percentile_function(self, mock_query):
         mock_query.return_value = {
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 75f7c45482..dca623775a 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -817,6 +817,41 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
         data = response.data["data"]
         assert data[0]["error_rate"] == 0.75
 
+    def test_user_misery_alias_field(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+
+        events = [
+            ("one", 300),
+            ("one", 300),
+            ("two", 3000),
+            ("two", 3000),
+            ("three", 300),
+            ("three", 3000),
+        ]
+        for idx, event in enumerate(events):
+            data = load_data("transaction")
+            data["event_id"] = "{}".format(idx) * 32
+            data["transaction"] = "/user_misery/horribilis/{}".format(idx)
+            data["user"] = {"email": "{}@example.com".format(event[0])}
+            data["timestamp"] = iso_format(before_now(minutes=(1 + idx)))
+            data["start_timestamp"] = iso_format(
+                before_now(minutes=(1 + idx), milliseconds=event[1])
+            )
+            self.store_event(data, project_id=project.id)
+
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={"field": ["user_misery(300)"], "query": "event.type:transaction"},
+            )
+
+        assert response.status_code == 200, response.content
+        assert len(response.data["data"]) == 1
+        data = response.data["data"]
+        assert data[0]["user_misery_300"] == 2
+
     def test_aggregation(self):
         self.login_as(user=self.user)
         project = self.create_project()
@@ -1759,6 +1794,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
                         "percentile(transaction.duration, 0.99)",
                         "apdex(300)",
                         "impact(300)",
+                        "user_misery(300)",
                         "error_rate()",
                     ],
                     "query": "event.type:transaction",
@@ -1776,6 +1812,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
             assert meta["apdex_300"] == "number"
             assert meta["error_rate"] == "percentage"
             assert meta["impact_300"] == "number"
+            assert meta["user_misery_300"] == "number"
 
             data = response.data["data"]
             assert len(data) == 1
@@ -1787,6 +1824,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
             assert data[0]["percentile_transaction_duration_0_99"] == 5000
             assert data[0]["apdex_300"] == 0.0
             assert data[0]["impact_300"] == 1.0
+            assert data[0]["user_misery_300"] == 1
             assert data[0]["error_rate"] == 0.5
 
         with self.feature(
