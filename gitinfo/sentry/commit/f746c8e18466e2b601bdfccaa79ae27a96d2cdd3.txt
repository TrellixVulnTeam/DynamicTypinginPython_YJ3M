commit f746c8e18466e2b601bdfccaa79ae27a96d2cdd3
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Tue Feb 21 11:31:41 2017 -0800

    stop creating duplicate ReleaseEnvironments across organization (#4929)
    
    * stop creating duplicate ReleaseEnvironments across organization
    
    * add test to make sure we're not making duplicate release envs

diff --git a/src/sentry/api/endpoints/group_environment_details.py b/src/sentry/api/endpoints/group_environment_details.py
index f6ccd4b6e2..a718fbe737 100644
--- a/src/sentry/api/endpoints/group_environment_details.py
+++ b/src/sentry/api/endpoints/group_environment_details.py
@@ -11,7 +11,7 @@ from sentry.api.serializers.models.environment import (
 from sentry.api.serializers.models.grouprelease import (
     GroupReleaseWithStatsSerializer
 )
-from sentry.models import Environment, GroupRelease, ReleaseEnvironment
+from sentry.models import Environment, GroupRelease, ReleaseEnvironment, ReleaseProject
 from sentry.utils.dates import to_datetime
 
 
@@ -38,11 +38,14 @@ class GroupEnvironmentDetailsEndpoint(GroupEndpoint):
 
         # the current release is the 'latest seen' release within the
         # environment even if it hasnt affected this issue
+
         current_release = GroupRelease.objects.filter(
             group_id=group.id,
             environment=environment.name,
             release_id=ReleaseEnvironment.objects.filter(
-                project_id=group.project_id,
+                release_id__in=ReleaseProject.objects.filter(
+                    project_id=group.project_id
+                ).values_list('release_id', flat=True),
                 organization_id=group.project.organization_id,
                 environment_id=environment.id,
             ).order_by('-first_seen').values_list('release_id', flat=True).first(),
diff --git a/src/sentry/models/releaseenvironment.py b/src/sentry/models/releaseenvironment.py
index 474c45f107..bace3b838b 100644
--- a/src/sentry/models/releaseenvironment.py
+++ b/src/sentry/models/releaseenvironment.py
@@ -1,10 +1,12 @@
 from __future__ import absolute_import
 
 from datetime import timedelta
-from django.db import IntegrityError, models, transaction
+from django.db import models
 from django.utils import timezone
 
+from sentry.app import locks
 from sentry.utils.cache import cache
+from sentry.utils.retries import TimedRetryPolicy
 from sentry.db.models import (
     BoundedPositiveIntegerField, Model, sane_repr
 )
@@ -35,29 +37,50 @@ class ReleaseEnvironment(Model):
             environment_id,
         )
 
+    @classmethod
+    def get_lock_key(cls, organization_id, release_id, environment_id):
+        return 'releaseenv:{}:{}:{}'.format(
+            organization_id,
+            release_id,
+            environment_id,
+        )
+
     @classmethod
     def get_or_create(cls, project, release, environment, datetime, **kwargs):
         cache_key = cls.get_cache_key(project.id, release.id, environment.id)
 
         instance = cache.get(cache_key)
         if instance is None:
-            try:
-                with transaction.atomic():
-                    instance, created = cls.objects.create(
-                        release_id=release.id,
-                        project_id=project.id,
-                        organization_id=project.organization_id,
-                        environment_id=environment.id,
-                        first_seen=datetime,
-                        last_seen=datetime,
-                    ), True
-            except IntegrityError:
-                instance, created = cls.objects.get(
-                    release_id=release.id,
-                    project_id=project.id,
-                    organization_id=project.organization_id,
-                    environment_id=environment.id,
-                ), False
+            release_envs = list(cls.objects.filter(
+                release_id=release.id,
+                organization_id=project.organization_id,
+                environment_id=environment.id,
+            ))
+            if release_envs:
+                instance = release_envs[0]
+                for re in release_envs:
+                    if re.project_id == project.id:
+                        instance = re
+                created = False
+            else:
+                lock_key = cls.get_lock_key(project.organization_id, release.id, environment.id)
+                lock = locks.get(lock_key, duration=5)
+                with TimedRetryPolicy(10)(lock.acquire):
+                    try:
+                        instance, created = cls.objects.get(
+                            release_id=release.id,
+                            organization_id=project.organization_id,
+                            environment_id=environment.id,
+                        ), False
+                    except cls.DoesNotExist:
+                        instance, created = cls.objects.create(
+                            release_id=release.id,
+                            project_id=project.id,
+                            organization_id=project.organization_id,
+                            environment_id=environment.id,
+                            first_seen=datetime,
+                            last_seen=datetime,
+                        ), True
             cache.set(cache_key, instance, 3600)
         else:
             created = False
diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index c966186f9f..16ab95d7a2 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -28,7 +28,7 @@ def delete_organization(object_id, transaction_id=None, continuous=True, **kwarg
     from sentry.models import (
         Organization, OrganizationMember, OrganizationStatus, Team, TeamStatus,
         Commit, CommitAuthor, CommitFileChange, Environment, Release, ReleaseCommit,
-        ReleaseFile, Repository
+        ReleaseEnvironment, ReleaseFile, Repository
     )
 
     try:
@@ -55,7 +55,8 @@ def delete_organization(object_id, transaction_id=None, continuous=True, **kwarg
 
     model_list = (
         OrganizationMember, CommitFileChange, Commit, CommitAuthor,
-        Environment, Repository, Release, ReleaseCommit, ReleaseFile
+        Environment, Repository, Release, ReleaseCommit,
+        ReleaseEnvironment, ReleaseFile
     )
 
     has_more = delete_objects(
@@ -127,7 +128,7 @@ def delete_project(object_id, transaction_id=None, continuous=True, **kwargs):
         GroupEmailThread, GroupHash, GroupMeta, GroupRelease, GroupResolution,
         GroupRuleStatus, GroupSeen, GroupSubscription, GroupSnooze, GroupTagKey,
         GroupTagValue, Project, ProjectBookmark, ProjectKey, ProjectStatus,
-        ReleaseEnvironment, ReleaseProject, SavedSearchUserDefault, SavedSearch,
+        ReleaseProject, SavedSearchUserDefault, SavedSearch,
         TagKey, TagValue, UserReport, EnvironmentProject
     )
 
@@ -158,7 +159,7 @@ def delete_project(object_id, transaction_id=None, continuous=True, **kwargs):
         GroupEmailThread, GroupHash, GroupRelease, GroupRuleStatus, GroupSeen,
         GroupSubscription, GroupTagKey, GroupTagValue, ProjectBookmark,
         ProjectKey, TagKey, TagValue, SavedSearchUserDefault, SavedSearch,
-        UserReport, ReleaseEnvironment, EnvironmentProject
+        UserReport, EnvironmentProject
     )
     for model in model_list:
         has_more = bulk_delete_objects(model, project_id=p.id, transaction_id=transaction_id, logger=logger)
diff --git a/tests/sentry/models/test_releaseenvironment.py b/tests/sentry/models/test_releaseenvironment.py
index b507b96429..a570cd4fbc 100644
--- a/tests/sentry/models/test_releaseenvironment.py
+++ b/tests/sentry/models/test_releaseenvironment.py
@@ -9,7 +9,7 @@ from sentry.testutils import TestCase
 
 class GetOrCreateTest(TestCase):
     def test_simple(self):
-        project = self.create_project()
+        project = self.create_project(name='foo')
         datetime = timezone.now()
 
         release = Release.objects.create(
@@ -56,3 +56,19 @@ class GetOrCreateTest(TestCase):
 
         assert relenv.first_seen == datetime
         assert relenv.last_seen == datetime_new
+
+        # shouldn't create new release env if same env, release and org
+        project2 = self.create_project(
+            name='bar',
+            organization=project.organization
+        )
+        release.add_project(project2)
+
+        relenv2 = ReleaseEnvironment.get_or_create(
+            project=project2,
+            release=release,
+            environment=env,
+            datetime=datetime,
+        )
+        assert relenv.id == relenv2.id
+        assert ReleaseEnvironment.objects.get(id=relenv.id).last_seen == relenv2.last_seen
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index 2f4075222f..276ba23cb0 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -8,8 +8,8 @@ from sentry.models import (
     Environment, EnvironmentProject, Event, EventMapping, EventTag,
     Group, GroupAssignee, GroupMeta, GroupResolution, GroupRedirect, GroupStatus, GroupTagKey,
     GroupTagValue, Organization, OrganizationStatus, Project, ProjectStatus,
-    Release, TagKey, TagValue, Team, TeamStatus, Commit, CommitAuthor,
-    ReleaseCommit, Repository
+    Release, ReleaseCommit, ReleaseEnvironment, Repository,
+    TagKey, TagValue, Team, TeamStatus, Commit, CommitAuthor
 )
 from sentry.tasks.deletion import (
     delete_group, delete_organization, delete_project, delete_tag_key,
@@ -55,12 +55,19 @@ class DeleteOrganizationTest(TestCase):
             project_id=4,
             name='foo'
         )
+        release_env = ReleaseEnvironment.objects.create(
+            organization_id=org.id,
+            project_id=4,
+            release_id=release.id,
+            environment_id=env.id
+        )
 
         with self.tasks():
             delete_organization(object_id=org.id)
 
         assert not Organization.objects.filter(id=org.id).exists()
         assert not Environment.objects.filter(id=env.id).exists()
+        assert not ReleaseEnvironment.objects.filter(id=release_env.id).exists()
         assert not Repository.objects.filter(id=repo.id).exists()
         assert not ReleaseCommit.objects.filter(organization_id=org.id).exists()
         assert not Release.objects.filter(organization_id=org.id).exists()
