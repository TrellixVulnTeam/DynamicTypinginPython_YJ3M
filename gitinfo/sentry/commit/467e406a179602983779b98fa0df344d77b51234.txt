commit 467e406a179602983779b98fa0df344d77b51234
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Nov 15 13:35:25 2019 -0800

    fix(ui): Fix double fetching of Organization details in settinâ€¦ (#15621)
    
    This fixes a bug with double fetching of organization details when navigating to a URL without an org slug (e.g. account settings).

diff --git a/src/sentry/static/sentry/app/views/organizationContext.jsx b/src/sentry/static/sentry/app/views/organizationContext.jsx
index 8b2cc0bd71..66e3444ba2 100644
--- a/src/sentry/static/sentry/app/views/organizationContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationContext.jsx
@@ -85,17 +85,23 @@ const OrganizationContext = createReactClass({
       prevProps.params.orgId &&
       this.props.params.orgId &&
       prevProps.params.orgId !== this.props.params.orgId;
+    const hasOrgId =
+      this.props.params.orgId ||
+      (this.props.useLastOrganization && ConfigStore.get('lastOrganization'));
 
     // protect against the case where we finish fetching org details
     // and then `OrganizationsStore` finishes loading:
     // only fetch in the case where we don't have an orgId
+    //
+    // Compare `getOrganizationSlug`  because we may have a last used org from server
+    // if there is no orgId in the URL
     const organizationLoadingChanged =
       prevProps.organizationsLoading !== this.props.organizationsLoading &&
       this.props.organizationsLoading === false;
 
     if (
       hasOrgIdAndChanged ||
-      (!this.props.params.orgId && organizationLoadingChanged) ||
+      (!hasOrgId && organizationLoadingChanged) ||
       (this.props.location.state === 'refresh' && prevProps.location.state !== 'refresh')
     ) {
       this.remountComponent();
diff --git a/tests/js/spec/views/organizationContext.spec.jsx b/tests/js/spec/views/organizationContext.spec.jsx
index ed37c854b8..f9991c108d 100644
--- a/tests/js/spec/views/organizationContext.spec.jsx
+++ b/tests/js/spec/views/organizationContext.spec.jsx
@@ -196,6 +196,39 @@ describe('OrganizationContext', function() {
     expect(getOrgMock).toHaveBeenLastCalledWith('/organizations/foo/', expect.anything());
   });
 
+  it('uses last organization when no orgId in URL - and fetches org details once', async function() {
+    ConfigStore.get.mockImplementation(() => 'my-last-org');
+    getOrgMock = MockApiClient.addMockResponse({
+      url: '/organizations/my-last-org/',
+      body: TestStubs.Organization({slug: 'my-last-org'}),
+    });
+
+    wrapper = createWrapper({
+      params: {},
+      useLastOrganization: true,
+      organizations: [],
+    });
+    // await dispatching action
+    await tick();
+    // await resolving api, and updating component
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
+    expect(getOrgMock).toHaveBeenCalledTimes(1);
+
+    // Simulate OrganizationsStore being loaded *after* `OrganizationContext` finishes
+    // org details fetch
+    wrapper.setProps({
+      organizationsLoading: false,
+      organizations: [
+        TestStubs.Organization({slug: 'foo'}),
+        TestStubs.Organization({slug: 'bar'}),
+      ],
+    });
+
+    expect(getOrgMock).toHaveBeenCalledTimes(1);
+  });
+
   it('fetches org details only once if organizations loading store changes', async function() {
     wrapper = createWrapper({
       params: {orgId: 'org-slug'},
