commit 950c35d021502b872238a77270f784b53667df85
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 25 18:03:02 2015 -0700

    Remove unused rule validator code

diff --git a/src/sentry/web/frontend/projects/rules.py b/src/sentry/web/frontend/projects/rules.py
index 9a3765cc40..9c1f448c65 100644
--- a/src/sentry/web/frontend/projects/rules.py
+++ b/src/sentry/web/frontend/projects/rules.py
@@ -7,9 +7,6 @@ sentry.web.frontend.projects.rules
 """
 from __future__ import absolute_import
 
-import re
-
-from collections import defaultdict
 from django.contrib import messages
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
@@ -20,72 +17,11 @@ from django.views.decorators.csrf import csrf_protect
 from sentry.constants import MEMBER_ADMIN
 from sentry.models import Rule
 from sentry.utils import json
-from sentry.utils.cache import memoize
 from sentry.rules import rules
 from sentry.web.decorators import has_access
 from sentry.web.helpers import render_to_response
 
 
-class RuleFormValidator(object):
-    # XXX(dcramer): please no judgements on any of the rule code, I realize it's
-    # all terrible and poorly described
-    def __init__(self, project, data=None):
-        self.project = project
-        self.data = data
-        self.errors = {}
-
-    @memoize
-    def cleaned_data(self):
-        # parse out rules
-        rules_by_id = {
-            'actions': {},
-            'conditions': {},
-        }
-        # TODO: conditions need to be based on actions
-        for rule_type, rule in rules:
-            if rule_type.startswith('condition/'):
-                rules_by_id['conditions'][rule.id] = rule
-            elif rule_type.startswith('action/'):
-                rules_by_id['actions'][rule.id] = rule
-
-        key_regexp = r'^(condition|action)\[(\d+)\]\[(.+)\]$'
-        raw_data = defaultdict(lambda: defaultdict(dict))
-        for key, value in self.data.iteritems():
-            match = re.match(key_regexp, key)
-            if not match:
-                continue
-            raw_data[match.group(1)][match.group(2)][match.group(3)] = value
-
-        data = {
-            'label': self.data.get('label', '').strip(),
-            'action_match': self.data.get('action_match', 'all'),
-            'actions': [],
-            'conditions': [],
-        }
-
-        for num, node in sorted(raw_data['condition'].iteritems()):
-            data['conditions'].append(node)
-            cls = rules_by_id['conditions'][node['id']]
-            if not cls(self.project, node).validate_form():
-                self.errors['condition[%s]' % (num,)] = 'Ensure all fields are filled out correctly.'
-
-        for num, node in sorted(raw_data['action'].iteritems()):
-            data['actions'].append(node)
-            cls = rules_by_id['actions'][node['id']]
-            if not cls(self.project, node).validate_form():
-                self.errors['action[%s]' % (num,)] = 'Ensure all fields are filled out correctly.'
-
-        if not data['label'] or len(data['label']) > 64:
-            self.errors['label'] = 'Value must be less than 64 characters.'
-
-        return data
-
-    def is_valid(self):
-        # force validation
-        self.cleaned_data
-        return not bool(self.errors)
-
-
 def _generate_rule_label(project, rule, data):
     rule_cls = rules.get(data['id'])
     if rule_cls is None:
@@ -141,40 +77,6 @@ def create_or_edit_rule(request, organization, project, rule_id=None):
     else:
         rule = Rule(project=project)
 
-    form_data = {
-        'label': rule.label,
-        'action_match': rule.data.get('action_match'),
-    }
-
-    if request.POST:
-        for key, value in request.POST.iteritems():
-            form_data[key] = value
-    else:
-        for num, node in enumerate(rule.data.get('conditions', [])):
-            prefix = 'condition[%d]' % (num,)
-            for key, value in node.iteritems():
-                form_data[prefix + '[' + key + ']'] = value
-
-        for num, node in enumerate(rule.data.get('actions', [])):
-            prefix = 'action[%d]' % (num,)
-            for key, value in node.iteritems():
-                form_data[prefix + '[' + key + ']'] = value
-
-    validator = RuleFormValidator(project, form_data)
-    if request.POST and validator.is_valid():
-        data = validator.cleaned_data.copy()
-
-        rule.label = data.pop('label')
-        rule.data = data
-        rule.save()
-
-        messages.add_message(
-            request, messages.SUCCESS,
-            _('Changes to your rule were saved.'))
-
-        path = reverse('sentry-project-rules', args=[organization.slug, project.slug])
-        return HttpResponseRedirect(path)
-
     action_list = []
     condition_list = []
 
@@ -195,9 +97,6 @@ def create_or_edit_rule(request, organization, project, rule_id=None):
     context = csrf(request)
     context.update({
         'rule': rule,
-        'form_is_valid': (not request.POST or validator.is_valid()),
-        'form_errors': validator.errors,
-        'form_data': form_data,
         'organization': organization,
         'team': project.team,
         'page': 'rules',
