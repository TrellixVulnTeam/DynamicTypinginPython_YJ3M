commit 67cae1e7ca7970f47c12554c277f3d96526cbe0b
Author: Ted Kaemming <ted@kaemming.com>
Date:   Wed Jan 13 11:16:11 2016 -0800

    Catch and log digest state exceptions.
    
    Refs GH-2542.

diff --git a/src/sentry/digests/backends/base.py b/src/sentry/digests/backends/base.py
index bf30478a34..71819c4376 100644
--- a/src/sentry/digests/backends/base.py
+++ b/src/sentry/digests/backends/base.py
@@ -17,6 +17,13 @@ DEFAULT_CODEC = {
 }
 
 
+class InvalidState(Exception):
+    """
+    An error that is raised when an action cannot be performed on a
+    timeline in it's current state.
+    """
+
+
 class Backend(object):
     """
     A digest backend coordinates the addition of records to timelines, as well
diff --git a/src/sentry/digests/backends/redis.py b/src/sentry/digests/backends/redis.py
index 71a6d9c46d..79da79fe23 100644
--- a/src/sentry/digests/backends/redis.py
+++ b/src/sentry/digests/backends/redis.py
@@ -16,7 +16,10 @@ from sentry.digests import (
     Record,
     ScheduleEntry,
 )
-from sentry.digests.backends.base import Backend
+from sentry.digests.backends.base import (
+    Backend,
+    InvalidState,
+)
 from sentry.utils.cache import Lock
 from sentry.utils.redis import (
     check_cluster_versions,
@@ -398,8 +401,12 @@ class RedisBackend(Backend):
         connection = self.cluster.get_local_client_for_key(timeline_key)
 
         with Lock(timeline_key, nowait=True, timeout=30):
+            # Check to ensure the timeline is in the correct state ("ready")
+            # before sending. This acts as a throttling mechanism to prevent
+            # sending a digest before it's next scheduled delivery time in a
+            # race condition scenario.
             if connection.zscore(make_schedule_key(self.namespace, SCHEDULE_STATE_READY), key) is None:
-                raise Exception('Cannot digest timeline, timeline is not in the ready state.')
+                raise InvalidState('Timeline is not in the ready state.')
 
             with connection.pipeline() as pipeline:
                 pipeline.watch(digest_key)  # This shouldn't be necessary, but better safe than sorry?
diff --git a/src/sentry/tasks/digests.py b/src/sentry/tasks/digests.py
index 6dac94b055..fdaa64405c 100644
--- a/src/sentry/tasks/digests.py
+++ b/src/sentry/tasks/digests.py
@@ -4,6 +4,7 @@ import logging
 import time
 
 from sentry.digests import get_option_key
+from sentry.digests.backends.base import InvalidState
 from sentry.digests.notifications import (
     build_digest,
     split_key,
@@ -58,8 +59,13 @@ def deliver_digest(key, schedule_timestamp=None):
         project,
         get_option_key(plugin.get_conf_key(), 'minimum_delay')
     )
-    with digests.digest(key, minimum_delay=minimum_delay) as records:
-        digest = build_digest(project, records)
+
+    try:
+        with digests.digest(key, minimum_delay=minimum_delay) as records:
+            digest = build_digest(project, records)
+    except InvalidState as error:
+        logger.info('Skipped digest delivery: %s', error, exc_info=True)
+        return
 
     if digest:
         plugin.notify_digest(project, digest)
