commit ff5c08d6c2fdb3dae1d9d4b2a1ba52997f07ad05
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Mon Dec 2 11:16:26 2019 -0500

    feat(discover2): Search and filter on saved and pre-built queries (#15832)

diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index 368e3c2bb6..379d154183 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -17,6 +17,7 @@ import {
   isAggregateField,
   getAggregateAlias,
   decodeColumnOrder,
+  decodeScalar,
 } from './utils';
 import {TableColumn, TableColumnSort} from './table/types';
 
@@ -245,21 +246,6 @@ const decodeProjects = (location: Location): number[] => {
   return Array.isArray(value) ? value.map(i => parseInt(i, 10)) : [parseInt(value, 10)];
 };
 
-const decodeScalar = (
-  value: string[] | string | undefined | null
-): string | undefined => {
-  if (!value) {
-    return undefined;
-  }
-  const unwrapped =
-    Array.isArray(value) && value.length > 0
-      ? value[0]
-      : isString(value)
-      ? value
-      : undefined;
-  return isString(unwrapped) ? unwrapped : undefined;
-};
-
 const queryStringFromSavedQuery = (saved: NewQuery | SavedQuery): string => {
   if (saved.query) {
     return saved.query || '';
diff --git a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
index 7111acc9f8..5a17fb2037 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
@@ -4,6 +4,8 @@ import styled from 'react-emotion';
 import * as ReactRouter from 'react-router';
 import {Params} from 'react-router/lib/Router';
 import {Location} from 'history';
+import pick from 'lodash/pick';
+import isEqual from 'lodash/isEqual';
 
 import {t} from 'app/locale';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
@@ -16,7 +18,7 @@ import GlobalSelectionHeader from 'app/components/organizations/globalSelectionH
 import Banner from 'app/components/banner';
 import Button from 'app/components/button';
 import Feature from 'app/components/acl/feature';
-import SearchBar from 'app/views/events/searchBar';
+import SearchBar from 'app/components/searchBar';
 import NoProjectMessage from 'app/components/noProjectMessage';
 
 import {PageContent} from 'app/styles/organization';
@@ -30,9 +32,8 @@ import EventInputName from './eventInputName';
 import {DEFAULT_EVENT_VIEW} from './data';
 import QueryList from './queryList';
 import DiscoverBreadcrumb from './breadcrumb';
-import {getPrebuiltQueries, generateTitle} from './utils';
+import {getPrebuiltQueries, generateTitle, decodeScalar} from './utils';
 
-const DISPLAY_SEARCH_BAR_FLAG = false;
 const BANNER_DISMISSED_KEY = 'discover-banner-dismissed';
 
 function checkIsBannerHidden(): boolean {
@@ -47,6 +48,7 @@ type Props = {
 } & AsyncComponent['props'];
 
 type State = {
+  isBannerHidden: boolean;
   savedQueries: SavedQuery[];
   savedQueriesPageLinks: string;
 } & AsyncComponent['state'];
@@ -58,11 +60,14 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     router: PropTypes.object.isRequired,
   };
 
-  state = {
+  state: State = {
+    // AsyncComponent state
     loading: true,
     reloading: false,
     error: false,
     errors: [],
+
+    // local component state
     isBannerHidden: checkIsBannerHidden(),
     savedQueries: [],
     savedQueriesPageLinks: '',
@@ -70,23 +75,47 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
 
   shouldReload = true;
 
+  getSavedQuerySearchQuery(): string {
+    const {location} = this.props;
+
+    return String(decodeScalar(location.query.query) || '').trim();
+  }
+
   getEndpoints(): [string, string, any][] {
     const {organization, location} = this.props;
+
     const views = getPrebuiltQueries(organization);
-    const cursor = location.query.cursor;
-    // XXX(mark) Pagination here is a bit wonky as we include the pre-built queries
-    // on the first page and aim to always have 9 results showing. If there are more than
-    // 9 pre-built queries we'll have more results on the first page. Furthermore, going
-    // back and forth between the first and second page is non-determinsitic due to the shifting
-    // per_page value.
+    const searchQuery = this.getSavedQuerySearchQuery();
+
+    const cursor = decodeScalar(location.query.cursor);
     let perPage = 9;
     if (!cursor) {
-      perPage = Math.max(1, perPage - views.length);
+      // invariant: we're on the first page
+
+      if (searchQuery && searchQuery.length > 0) {
+        const needleSearch = searchQuery.toLowerCase();
+
+        const numOfPrebuiltQueries = views.reduce((sum, view) => {
+          const eventView = EventView.fromNewQueryWithLocation(view, location);
+
+          // if a search is performed on the list of queries, we filter
+          // on the pre-built queries
+          if (eventView.name && eventView.name.toLowerCase().includes(needleSearch)) {
+            return sum + 1;
+          }
+
+          return sum;
+        }, 0);
+
+        perPage = Math.max(1, perPage - numOfPrebuiltQueries);
+      } else {
+        perPage = Math.max(1, perPage - views.length);
+      }
     }
 
     const queryParams = {
       cursor,
-      query: 'version:2',
+      query: `version:2 name:"${searchQuery}"`,
       per_page: perPage,
       sortBy: '-dateUpdated',
     };
@@ -114,7 +143,16 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
       });
     }
 
-    if (prevProps.location.query.cursor !== this.props.location.query.cursor) {
+    const PAYLOAD_KEYS = ['cursor', 'query'] as const;
+
+    const payloadKeysChanged = !isEqual(
+      pick(prevProps.location.query, PAYLOAD_KEYS),
+      pick(this.props.location.query, PAYLOAD_KEYS)
+    );
+
+    // if any of the query strings relevant for the payload has changed,
+    // we re-fetch data
+    if (payloadKeysChanged) {
       this.fetchData();
     }
   }
@@ -177,7 +215,21 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     );
   }
 
+  handleSearchQuery = (searchQuery: string) => {
+    const {location} = this.props;
+    ReactRouter.browserHistory.push({
+      pathname: location.pathname,
+      query: {
+        ...location.query,
+        cursor: undefined,
+        query: String(searchQuery).trim() || undefined,
+      },
+    });
+  };
+
   renderActions() {
+    const {location} = this.props;
+
     const StyledSearchBar = styled(SearchBar)`
       margin-right: ${space(1)};
       flex-grow: 1;
@@ -188,10 +240,37 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
       margin-bottom: ${space(3)};
     `;
 
+    const eventView = EventView.fromNewQueryWithLocation(DEFAULT_EVENT_VIEW, location);
+
+    const to = {
+      pathname: location.pathname,
+      query: {
+        ...eventView.generateQueryStringObject(),
+      },
+    };
+
     return (
       <StyledActions>
-        <StyledSearchBar />
-        <Button priority="primary">{t('Build a new query')}</Button>
+        <StyledSearchBar
+          defaultQuery=""
+          query={this.getSavedQuerySearchQuery()}
+          placeholder={t('Search for saved queries')}
+          onSearch={this.handleSearchQuery}
+        />
+        <Button
+          to={to}
+          priority="primary"
+          onClick={() => {
+            trackAnalyticsEvent({
+              eventKey: 'discover_v2.prebuilt_query_click',
+              eventName: 'Discoverv2: Click a pre-built query',
+              organization_id: this.props.organization.id,
+              query_name: eventView.name,
+            });
+          }}
+        >
+          {t('Build a new query')}
+        </Button>
       </StyledActions>
     );
   }
@@ -212,12 +291,13 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
       <PageContent>
         <StyledPageHeader>{t('Discover')}</StyledPageHeader>
         {this.renderBanner()}
-        {DISPLAY_SEARCH_BAR_FLAG && this.renderActions()}
+        {this.renderActions()}
         {loading && this.renderLoading()}
         {!loading && (
           <QueryList
             pageLinks={savedQueriesPageLinks}
             savedQueries={savedQueries}
+            savedQuerySearchQuery={this.getSavedQuerySearchQuery()}
             location={location}
             organization={organization}
             onQueryChange={this.handleQueryChange}
@@ -227,7 +307,7 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     );
   }
 
-  renderResults(eventView: EventView) {
+  renderQueryBuilder(eventView: EventView) {
     const {organization, location, router} = this.props;
     const {savedQueries, reloading} = this.state;
     const ContentBox = styled(PageContent)`
@@ -309,7 +389,7 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
             <GlobalSelectionHeader organization={organization} />
             <NoProjectMessage organization={organization}>
               {!hasQuery && this.renderQueryList()}
-              {hasQuery && this.renderResults(eventView)}
+              {hasQuery && this.renderQueryBuilder(eventView)}
             </NoProjectMessage>
           </React.Fragment>
         </SentryDocumentTitle>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
index a070d313f2..993d82f238 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
@@ -30,6 +30,7 @@ type Props = {
   savedQueries: SavedQuery[];
   pageLinks: string;
   onQueryChange: () => void;
+  savedQuerySearchQuery: string;
 };
 
 class QueryList extends React.Component<Props> {
@@ -85,11 +86,26 @@ class QueryList extends React.Component<Props> {
   }
 
   renderPrebuiltQueries() {
-    const {location, organization} = this.props;
+    const {location, organization, savedQuerySearchQuery} = this.props;
     const views = getPrebuiltQueries(organization);
 
+    const hasSearchQuery =
+      typeof savedQuerySearchQuery === 'string' && savedQuerySearchQuery.length > 0;
+    const needleSearch = hasSearchQuery ? savedQuerySearchQuery.toLowerCase() : '';
+
     const list = views.map((view, index) => {
       const eventView = EventView.fromNewQueryWithLocation(view, location);
+
+      // if a search is performed on the list of queries, we filter
+      // on the pre-built queries
+      if (
+        hasSearchQuery &&
+        eventView.name &&
+        !eventView.name.toLowerCase().includes(needleSearch)
+      ) {
+        return null;
+      }
+
       const recentTimeline = t('Last ') + eventView.statsPeriod;
       const customTimeline =
         moment(eventView.start).format('MMM D, YYYY h:mm A') +
@@ -99,6 +115,8 @@ class QueryList extends React.Component<Props> {
         pathname: location.pathname,
         query: {
           ...location.query,
+          // remove any landing page cursor
+          cursor: undefined,
           ...eventView.generateQueryStringObject(),
         },
       };
@@ -152,6 +170,8 @@ class QueryList extends React.Component<Props> {
         pathname: location.pathname,
         query: {
           ...location.query,
+          // remove any landing page cursor
+          cursor: undefined,
           ...eventView.generateQueryStringObject(),
         },
       };
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index b039736a83..f24da61e4f 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -1,5 +1,6 @@
 import partial from 'lodash/partial';
 import pick from 'lodash/pick';
+import isString from 'lodash/isString';
 import {Location, Query} from 'history';
 import {browserHistory} from 'react-router';
 
@@ -336,3 +337,18 @@ export function getPrebuiltQueries(organization: Organization) {
 
   return views;
 }
+
+export function decodeScalar(
+  value: string[] | string | undefined | null
+): string | undefined {
+  if (!value) {
+    return undefined;
+  }
+  const unwrapped =
+    Array.isArray(value) && value.length > 0
+      ? value[0]
+      : isString(value)
+      ? value
+      : undefined;
+  return isString(unwrapped) ? unwrapped : undefined;
+}
