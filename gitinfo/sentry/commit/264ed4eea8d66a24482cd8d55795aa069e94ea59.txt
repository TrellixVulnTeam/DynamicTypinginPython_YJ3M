commit 264ed4eea8d66a24482cd8d55795aa069e94ea59
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 30 16:07:39 2010 -0700

    More cleanup (djangodblog->dblog). Group messages by view instead of URL.

diff --git a/dblog/admin.py b/dblog/admin.py
index 180e96ffa5..38bf192f6a 100644
--- a/dblog/admin.py
+++ b/dblog/admin.py
@@ -130,7 +130,7 @@ class GroupedMessageAdmin(EfficientModelAdmin):
     list_display_links = ('shortened_url',)
     list_filter     = ('status', 'server_name', 'logger', 'level', 'last_seen')
     ordering        = ('-last_seen',)
-    actions         = ('resolve_errorbatch',)
+    actions         = ('resolve_groupedmessage',)
     search_fields   = ('url', 'class_name', 'message', 'traceback', 'server_name')
     readonly_fields = ('class_name', 'message', 'times_seen', 'first_seen')
     fieldsets       = (
@@ -139,7 +139,7 @@ class GroupedMessageAdmin(EfficientModelAdmin):
         }),
     )
     
-    def resolve_errorbatch(self, request, queryset):
+    def resolve_groupedmessage(self, request, queryset):
         rows_updated = queryset.update(status=1)
         
         if rows_updated == 1:
@@ -148,7 +148,7 @@ class GroupedMessageAdmin(EfficientModelAdmin):
             message_bit = "%s error summaries were" % rows_updated
         self.message_user(request, "%s resolved." % message_bit)
         
-    resolve_errorbatch.short_description = 'Resolve selected error summaries'
+    resolve_groupedmessage.short_description = 'Resolve selected error summaries'
 
     def change_view(self, request, object_id, extra_context={}):
         obj = self.get_object(request, unquote(object_id))
diff --git a/dblog/feeds.py b/dblog/feeds.py
index fae914f3c2..775474a9ce 100644
--- a/dblog/feeds.py
+++ b/dblog/feeds.py
@@ -38,7 +38,7 @@ class MessageFeed(object):
         return _('log messages')
 
     def get_link(self, request):
-        return reverse('admin:dblog_error_changelist')
+        return reverse('admin:dblog_message_changelist')
 
     def get_model(self, request):
         return Message
@@ -57,7 +57,7 @@ class MessageFeed(object):
         return '-datetime'
 
     def get_item_url(self, request, obj):
-        return reverse('admin:dblog_error_change', args=[obj.pk])
+        return reverse('admin:dblog_message_change', args=[obj.pk])
 
     def get_item_date(self, request, obj):
         return obj.datetime
@@ -67,7 +67,7 @@ class SummaryFeed(MessageFeed):
         return _('log summaries')
 
     def get_link(self, request):
-        return reverse('admin:dblog_errorbatch_changelist')
+        return reverse('admin:dblog_groupedmessage_changelist')
 
     def get_model(self, request):
         return GroupedMessage
@@ -80,7 +80,7 @@ class SummaryFeed(MessageFeed):
         return '-last_seen'
 
     def get_item_url(self, request, obj):
-        return reverse('admin:dblog_errorbatch_change', args=[obj.pk])
+        return reverse('admin:dblog_groupedmessage_change', args=[obj.pk])
 
     def get_item_date(self, request, obj):
         return obj.last_seen
\ No newline at end of file
diff --git a/dblog/helpers.py b/dblog/helpers.py
index c4177f0bce..cb8f0618c7 100644
--- a/dblog/helpers.py
+++ b/dblog/helpers.py
@@ -53,9 +53,18 @@ def construct_checksum(error):
     checksum.update(message)
     return checksum.hexdigest()
 
+def get_installed_apps():
+    """
+    Generate a list of modules in settings.INSTALLED_APPS.
+    """
+    out = set()
+    for app in settings.INSTALLED_APPS:
+        out.add(app.split('.')[0])
+    return out
+
 TECHNICAL_500_TEMPLATE = """
 <div id="summary">
-  <h1>{{ exception_type }} at {{ request.path_info|escape }}</h1>
+  <h1>{{ exception_type }}{% if request.path_info %} at {{ request.path_info|escape }}{% endif %}</h1>
   <pre class="exception_value">{{ exception_value|escape }}</pre>
   <table class="meta">
     <tr>
diff --git a/dblog/migrations/0001_initial.py b/dblog/migrations/0001_initial.py
deleted file mode 100644
index 588b966a37..0000000000
--- a/dblog/migrations/0001_initial.py
+++ /dev/null
@@ -1,92 +0,0 @@
-# encoding: utf-8
-import datetime
-from south.db import db
-from south.v2 import SchemaMigration
-from django.db import models
-
-class Migration(SchemaMigration):
-    
-    def forwards(self, orm):
-        
-        # Adding model 'GroupedMessage'
-        db.create_table('djangodblog_errorbatch', (
-            ('status', self.gf('django.db.models.fields.PositiveIntegerField')(default=0, db_column='is_resolved')),
-            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
-            ('server_name', self.gf('django.db.models.fields.CharField')(max_length=128, db_index=True)),
-            ('level', self.gf('django.db.models.fields.PositiveIntegerField')(default=40, db_index=True, blank=True)),
-            ('class_name', self.gf('django.db.models.fields.CharField')(db_index=True, max_length=128, null=True, blank=True)),
-            ('checksum', self.gf('django.db.models.fields.CharField')(max_length=32, db_index=True)),
-            ('times_seen', self.gf('django.db.models.fields.PositiveIntegerField')(default=1)),
-            ('traceback', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
-            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
-            ('url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
-            ('logger', self.gf('django.db.models.fields.CharField')(default='root', max_length=64, db_index=True, blank=True)),
-            ('message', self.gf('django.db.models.fields.TextField')()),
-            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
-        ))
-        db.send_create_signal('djangodblog', ['GroupedMessage'])
-
-        # Adding unique constraint on 'GroupedMessage', fields ['logger', 'server_name', 'checksum']
-        db.create_unique('djangodblog_errorbatch', ['logger', 'server_name', 'checksum'])
-
-        # Adding model 'Error'
-        db.create_table('djangodblog_error', (
-            ('server_name', self.gf('django.db.models.fields.CharField')(max_length=128, db_index=True)),
-            ('level', self.gf('django.db.models.fields.PositiveIntegerField')(default=40, db_index=True, blank=True)),
-            ('class_name', self.gf('django.db.models.fields.CharField')(max_length=128, null=True, blank=True)),
-            ('traceback', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
-            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
-            ('url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
-            ('logger', self.gf('django.db.models.fields.CharField')(default='root', max_length=64, db_index=True, blank=True)),
-            ('datetime', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
-            ('data', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
-            ('message', self.gf('django.db.models.fields.TextField')()),
-        ))
-        db.send_create_signal('djangodblog', ['Error'])
-    
-    
-    def backwards(self, orm):
-        
-        # Deleting model 'GroupedMessage'
-        db.delete_table('djangodblog_errorbatch')
-
-        # Removing unique constraint on 'GroupedMessage', fields ['logger', 'server_name', 'checksum']
-        db.delete_unique('djangodblog_errorbatch', ['logger', 'server_name', 'checksum'])
-
-        # Deleting model 'Error'
-        db.delete_table('djangodblog_error')
-    
-    
-    models = {
-        'djangodblog.error': {
-            'Meta': {'object_name': 'Error'},
-            'class_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
-            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
-            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
-            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
-            'message': ('django.db.models.fields.TextField', [], {}),
-            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
-            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
-        },
-        'djangodblog.errorbatch': {
-            'Meta': {'unique_together': "(('logger', 'server_name', 'checksum'),)", 'object_name': 'GroupedMessage'},
-            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
-            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
-            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
-            'message': ('django.db.models.fields.TextField', [], {}),
-            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
-            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_column': "'is_resolved'"}),
-            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
-            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
-        }
-    }
-    
-    complete_apps = ['djangodblog']
diff --git a/dblog/migrations/0002_update_indexes.py b/dblog/migrations/0002_update_indexes.py
deleted file mode 100644
index acd70df908..0000000000
--- a/dblog/migrations/0002_update_indexes.py
+++ /dev/null
@@ -1,71 +0,0 @@
-# encoding: utf-8
-import datetime
-from south.db import db
-from south.v2 import SchemaMigration
-from django.db import models
-
-class Migration(SchemaMigration):
-    
-    def forwards(self, orm):
-        
-        # Adding index on 'Error', fields ['class_name']
-        db.create_index('djangodblog_error', ['class_name'])
-
-        # Adding index on 'Error', fields ['datetime']
-        db.create_index('djangodblog_error', ['datetime'])
-
-        # Adding index on 'GroupedMessage', fields ['first_seen']
-        db.create_index('djangodblog_errorbatch', ['first_seen'])
-
-        # Adding index on 'GroupedMessage', fields ['last_seen']
-        db.create_index('djangodblog_errorbatch', ['last_seen'])
-    
-    
-    def backwards(self, orm):
-        
-        # Removing index on 'Error', fields ['class_name']
-        db.delete_index('djangodblog_error', ['class_name'])
-
-        # Removing index on 'Error', fields ['datetime']
-        db.delete_index('djangodblog_error', ['datetime'])
-
-        # Removing index on 'GroupedMessage', fields ['first_seen']
-        db.delete_index('djangodblog_errorbatch', ['first_seen'])
-
-        # Removing index on 'GroupedMessage', fields ['last_seen']
-        db.delete_index('djangodblog_errorbatch', ['last_seen'])
-    
-    
-    models = {
-        'djangodblog.error': {
-            'Meta': {'object_name': 'Error'},
-            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
-            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
-            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
-            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
-            'message': ('django.db.models.fields.TextField', [], {}),
-            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
-            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
-        },
-        'djangodblog.errorbatch': {
-            'Meta': {'unique_together': "(('logger', 'server_name', 'checksum'),)", 'object_name': 'GroupedMessage'},
-            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
-            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
-            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
-            'message': ('django.db.models.fields.TextField', [], {}),
-            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
-            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_column': "'is_resolved'"}),
-            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
-            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
-        }
-    }
-    
-    complete_apps = ['djangodblog']
diff --git a/dblog/migrations/0003_add_error_checksum.py b/dblog/migrations/0003_add_error_checksum.py
deleted file mode 100644
index 131c220221..0000000000
--- a/dblog/migrations/0003_add_error_checksum.py
+++ /dev/null
@@ -1,54 +0,0 @@
-# encoding: utf-8
-import datetime
-from south.db import db
-from south.v2 import SchemaMigration
-from django.db import models
-
-class Migration(SchemaMigration):
-
-    def forwards(self, orm):
-        
-        # Adding field 'Error.checksum'
-        db.add_column('djangodblog_error', 'checksum', self.gf('django.db.models.fields.CharField')(max_length=32, null=True, db_index=True), keep_default=False)
-
-
-    def backwards(self, orm):
-        
-        # Deleting field 'Error.checksum'
-        db.delete_column('djangodblog_error', 'checksum')
-
-
-    models = {
-        'djangodblog.error': {
-            'Meta': {'object_name': 'Error'},
-            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_index': 'True'}),
-            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
-            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
-            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
-            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
-            'message': ('django.db.models.fields.TextField', [], {}),
-            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
-            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
-        },
-        'djangodblog.errorbatch': {
-            'Meta': {'unique_together': "(('logger', 'server_name', 'checksum'),)", 'object_name': 'GroupedMessage'},
-            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
-            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
-            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
-            'message': ('django.db.models.fields.TextField', [], {}),
-            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
-            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_column': "'is_resolved'"}),
-            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
-            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
-        }
-    }
-
-    complete_apps = ['djangodblog']
diff --git a/dblog/migrations/0004_fill_error_checksums.py b/dblog/migrations/0004_fill_error_checksums.py
deleted file mode 100644
index d29f708eb7..0000000000
--- a/dblog/migrations/0004_fill_error_checksums.py
+++ /dev/null
@@ -1,58 +0,0 @@
-# encoding: utf-8
-import datetime
-from south.db import db
-from south.v2 import DataMigration
-from django.db import models
-
-class Migration(DataMigration):
-
-    def forwards(self, orm):
-        "Write your forwards methods here."
-
-        from djangodblog.helpers import construct_checksum
-
-        for e in orm.Error.objects.all():
-            orm.Error.objects.filter(pk=e.pk).update(checksum=construct_checksum(e))
-
-        for e in orm.GroupedMessage.objects.all():
-            orm.GroupedMessage.objects.filter(pk=e.pk).update(checksum=construct_checksum(e))
-
-        
-    def backwards(self, orm):
-        "Write your backwards methods here."
-
-
-    models = {
-        'djangodblog.error': {
-            'Meta': {'object_name': 'Error'},
-            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_index': 'True'}),
-            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
-            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
-            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
-            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
-            'message': ('django.db.models.fields.TextField', [], {}),
-            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
-            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
-        },
-        'djangodblog.errorbatch': {
-            'Meta': {'unique_together': "(('logger', 'server_name', 'checksum'),)", 'object_name': 'GroupedMessage'},
-            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
-            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
-            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
-            'message': ('django.db.models.fields.TextField', [], {}),
-            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
-            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_column': "'is_resolved'"}),
-            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
-            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
-        }
-    }
-
-    complete_apps = ['djangodblog']
diff --git a/dblog/migrations/__init__.py b/dblog/migrations/__init__.py
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/dblog/models.py b/dblog/models.py
index 758cae36df..a625f37b12 100644
--- a/dblog/models.py
+++ b/dblog/models.py
@@ -6,14 +6,15 @@ from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
 from dblog import settings
+from dblog.helpers import construct_checksum, get_installed_apps
 from dblog.manager import DBLogManager, GroupedMessageManager
 from dblog.utils import JSONDictField
-from dblog.helpers import construct_checksum
 
 import datetime
 import warnings
 import logging
 import sys
+import traceback
 
 try:
     from idmapper.models import SharedMemoryModel as Model
@@ -43,6 +44,7 @@ class MessageBase(Model):
     level           = models.PositiveIntegerField(choices=LOG_LEVELS, default=logging.ERROR, blank=True, db_index=True)
     message         = models.TextField()
     traceback       = models.TextField(blank=True, null=True)
+    view            = models.CharField(max_length=255, db_index=True)
     url             = models.URLField(verify_exists=False, null=True, blank=True)
     server_name     = models.CharField(max_length=128, db_index=True)
     checksum        = models.CharField(max_length=32, db_index=True)
@@ -84,7 +86,6 @@ class MessageBase(Model):
     description.short_description = _('description')
 
 class GroupedMessage(MessageBase):
-    # XXX: We're using the legacy column for `is_resolved` for status
     status          = models.PositiveIntegerField(default=0, choices=STATUS_LEVELS)
     times_seen      = models.PositiveIntegerField(default=1)
     last_seen       = models.DateTimeField(default=datetime.datetime.now, db_index=True)
@@ -93,7 +94,7 @@ class GroupedMessage(MessageBase):
     objects         = GroupedMessageManager()
 
     class Meta:
-        unique_together = (('logger', 'server_name', 'checksum'),)
+        unique_together = (('logger', 'view', 'checksum'),)
         verbose_name_plural = _('grouped messages')
         verbose_name = _('grouped message')
     
@@ -107,8 +108,8 @@ class GroupedMessage(MessageBase):
     @transaction.commit_on_success
     def handle_exception(sender, request=None, **kwargs):
         try:
-            exc_type, exc_value, traceback = sys.exc_info()
-        
+            exc_type, exc_value, exc_traceback = sys.exc_info()
+
             if not settings.CATCH_404_ERRORS \
                     and issubclass(exc_type, Http404):
                 return
@@ -119,6 +120,28 @@ class GroupedMessage(MessageBase):
             if transaction.is_dirty():
                 transaction.rollback()
 
+            # kudos to Tapz for this idea
+            modules = get_installed_apps()
+
+            # only retrive last 10 lines
+            tb = traceback.extract_tb(exc_traceback, limit=10)
+
+            # retrive final file and line number where the exception occured
+            file, line_number = tb[-1][:2]
+
+            # tiny hack to get the python path from filename
+            for (filename, line, function, text) in reversed(tb):
+                for path in sys.path:
+                    if filename.startswith(path):
+                        module = file[len(path)+1:].replace('/', '.').replace('.py', '')
+                        view = '%s.%s' % (module, function)
+                        break
+                if module.split('.')[0] in modules:
+                    break
+                else:
+                    module = None
+                    view = None
+
             if request:
                 data = dict(
                     META=request.META,
@@ -132,6 +155,7 @@ class GroupedMessage(MessageBase):
             extra = dict(
                 url=request and request.build_absolute_uri() or None,
                 data=data,
+                view=view,
             )
 
             if settings.USE_LOGGING:
diff --git a/dblog/templates/admin/djangodblog/errorbatch/change_form.html b/dblog/templates/admin/dblog/groupedmessage/change_form.html
similarity index 96%
rename from dblog/templates/admin/djangodblog/errorbatch/change_form.html
rename to dblog/templates/admin/dblog/groupedmessage/change_form.html
index 54f04c8a24..c9bb4299a1 100644
--- a/dblog/templates/admin/djangodblog/errorbatch/change_form.html
+++ b/dblog/templates/admin/dblog/groupedmessage/change_form.html
@@ -75,7 +75,7 @@
 				<tbody>
 					{% for error in recent_errors %}
 						<tr class="{% cycle 'row1' 'row2' %}">
-							<th><a href="{% url admin:dblog_error_change error.pk %}">{{ error.url }}</a></th>
+							<th><a href="{% url admin:dblog_message_change error.pk %}">{{ error.view }}</a></th>
 							<td>{{ error.server_name }}</td>
 							<td>{{ error.datetime }}</td>
 						</tr>
diff --git a/dblog/templates/admin/djangodblog/errorbatch/change_list.html b/dblog/templates/admin/dblog/groupedmessage/change_list.html
similarity index 100%
rename from dblog/templates/admin/djangodblog/errorbatch/change_list.html
rename to dblog/templates/admin/dblog/groupedmessage/change_list.html
diff --git a/dblog/templates/admin/djangodblog/errorbatch/change_list_results.html b/dblog/templates/admin/dblog/groupedmessage/change_list_results.html
similarity index 100%
rename from dblog/templates/admin/djangodblog/errorbatch/change_list_results.html
rename to dblog/templates/admin/dblog/groupedmessage/change_list_results.html
diff --git a/dblog/templates/admin/djangodblog/error/change_form.html b/dblog/templates/admin/dblog/message/change_form.html
similarity index 100%
rename from dblog/templates/admin/djangodblog/error/change_form.html
rename to dblog/templates/admin/dblog/message/change_form.html
diff --git a/dblog/templates/admin/dblog/message/change_list.html b/dblog/templates/admin/dblog/message/change_list.html
new file mode 100644
index 0000000000..a553c0b150
--- /dev/null
+++ b/dblog/templates/admin/dblog/message/change_list.html
@@ -0,0 +1 @@
+{% extends "admin/dblog/groupedmessage/change_list.html" %}
diff --git a/dblog/templates/admin/djangodblog/partials/change_list_styles.html b/dblog/templates/admin/dblog/partials/change_list_styles.html
similarity index 100%
rename from dblog/templates/admin/djangodblog/partials/change_list_styles.html
rename to dblog/templates/admin/dblog/partials/change_list_styles.html
diff --git a/dblog/templates/admin/djangodblog/error/change_list.html b/dblog/templates/admin/djangodblog/error/change_list.html
deleted file mode 100644
index a856d44bfa..0000000000
--- a/dblog/templates/admin/djangodblog/error/change_list.html
+++ /dev/null
@@ -1 +0,0 @@
-{% extends "admin/dblog/errorbatch/change_list.html" %}
diff --git a/dblog/templatetags/dblog_admin.py b/dblog/templatetags/dblog_admin.py
index 221bee5dff..a178d0715a 100644
--- a/dblog/templatetags/dblog_admin.py
+++ b/dblog/templatetags/dblog_admin.py
@@ -15,4 +15,4 @@ def result_list(cl):
     return {'cl': cl,
             'result_headers': list(result_headers(cl)),
             'results': list(better_results(cl))}
-result_list = register.inclusion_tag("admin/dblog/errorbatch/change_list_results.html")(result_list)
\ No newline at end of file
+result_list = register.inclusion_tag("admin/dblog/groupedmessage/change_list_results.html")(result_list)
\ No newline at end of file
diff --git a/dblog/tests/fixtures/feeds.json b/dblog/tests/fixtures/feeds.json
index c6307914d9..76e0b88bd0 100644
--- a/dblog/tests/fixtures/feeds.json
+++ b/dblog/tests/fixtures/feeds.json
@@ -9,12 +9,12 @@
       "checksum": "0edb43b51699ce88eed908b340feb17f", 
       "times_seen": 1, 
       "traceback": "Traceback (most recent call last):\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/core/handlers/base.py\", line 100, in get_response\n    response = callback(request, *callback_args, **callback_kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 239, in wrapper\n    return self.admin_site.admin_view(view)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/views/decorators/cache.py\", line 69, in _wrapped_view_func\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/sites.py\", line 190, in inner\n    return view(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 21, in _wrapper\n    return decorator(bound_func)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 17, in bound_func\n    return func(self, *args2, **kwargs2)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 968, in changelist_view\n    self.date_hierarchy, self.search_fields, self.list_select_related, self.list_per_page, self.list_editable, self)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 66, in __init__\n    self.filter_specs, self.has_filters = self.get_filters(request)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 74, in get_filters\n    spec = FilterSpec.create(f, request, self.params, self.model, self.model_admin)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/filterspecs.py\", line 29, in create\n    return factory(f, request, params, model, model_admin)\n\n  File \"/Users/dcramer/Development/django-db-log/dblog/admin.py\", line 59, in __init__\n    raise\n\nTypeError: exceptions must be old-style classes or derived from BaseException, not NoneType\n", 
-      "url": "http://localhost:8000/admin/dblog/errorbatch/", 
+      "url": "http://localhost:8000/admin/dblog/groupedmessage/", 
       "logger": "root", 
       "message": "exceptions must be old-style classes or derived from BaseException, not NoneType", 
       "last_seen": "2010-07-22 20:14:18"
     }, 
-    "model": "dblog.errorbatch", 
+    "model": "dblog.groupedmessage", 
     "pk": 1
   }, 
   {
@@ -25,11 +25,11 @@
       "checksum": "0edb43b51699ce88eed908b340feb17f", 
       "traceback": "Traceback (most recent call last):\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/core/handlers/base.py\", line 100, in get_response\n    response = callback(request, *callback_args, **callback_kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 239, in wrapper\n    return self.admin_site.admin_view(view)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/views/decorators/cache.py\", line 69, in _wrapped_view_func\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/sites.py\", line 190, in inner\n    return view(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 21, in _wrapper\n    return decorator(bound_func)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 17, in bound_func\n    return func(self, *args2, **kwargs2)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 968, in changelist_view\n    self.date_hierarchy, self.search_fields, self.list_select_related, self.list_per_page, self.list_editable, self)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 66, in __init__\n    self.filter_specs, self.has_filters = self.get_filters(request)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 74, in get_filters\n    spec = FilterSpec.create(f, request, self.params, self.model, self.model_admin)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/filterspecs.py\", line 29, in create\n    return factory(f, request, params, model, model_admin)\n\n  File \"/Users/dcramer/Development/django-db-log/dblog/admin.py\", line 59, in __init__\n    raise\n\nTypeError: exceptions must be old-style classes or derived from BaseException, not NoneType\n", 
       "datetime": "2010-07-22 20:14:18", 
-      "url": "http://localhost:8000/admin/dblog/errorbatch/", 
+      "url": "http://localhost:8000/admin/dblog/groupedmessage/", 
       "logger": "root", 
       "message": "exceptions must be old-style classes or derived from BaseException, not NoneType"
     }, 
-    "model": "dblog.error", 
+    "model": "dblog.message", 
     "pk": 1
   }
 ]
diff --git a/dblog/tests/tests.py b/dblog/tests/tests.py
index 3ee064fe84..a2e38c093c 100644
--- a/dblog/tests/tests.py
+++ b/dblog/tests/tests.py
@@ -59,6 +59,8 @@ class JSONDictTestCase(TestCase):
         self.assertEquals(instance.data.get('foo'), 'bar')
 
 class DBLogTestCase(TestCase):
+    urls = 'dblog.tests.urls'
+
     def setUp(self):
         settings.DATABASE_USING = None
         self._handlers = None
@@ -66,7 +68,9 @@ class DBLogTestCase(TestCase):
         settings.DEBUG = False
         self.logger = logging.getLogger('dblog')
         self.logger.addHandler(logging.StreamHandler())
-    
+        Message.objects.all().delete()
+        GroupedMessage.objects.all().delete()
+
     def tearDown(self):
         self.tearDownHandler()
         
@@ -101,9 +105,6 @@ class DBLogTestCase(TestCase):
     def testLogger(self):
         logger = logging.getLogger()
         
-        Message.objects.all().delete()
-        GroupedMessage.objects.all().delete()
-
         self.setUpHandler()
 
         logger.error('This is a test error')
@@ -180,9 +181,6 @@ class DBLogTestCase(TestCase):
         self.assertEquals(last.message, smart_unicode(exc))
         
     def testAPI(self):
-        Message.objects.all().delete()
-        GroupedMessage.objects.all().delete()
-
         try:
             Message.objects.get(id=999999989)
         except Message.DoesNotExist, exc:
@@ -219,9 +217,6 @@ class DBLogTestCase(TestCase):
     def testAlternateDatabase(self):
         settings.DATABASE_USING = 'default'
         
-        Message.objects.all().delete()
-        GroupedMessage.objects.all().delete()
-
         try:
             Message.objects.get(id=999999979)
         except Message.DoesNotExist, exc:
@@ -350,9 +345,6 @@ class DBLogTestCase(TestCase):
         self.assertEquals(Message.objects.count(), settings.THRASHING_LIMIT)
     
     def testSignals(self):
-        Message.objects.all().delete()
-        GroupedMessage.objects.all().delete()
-
         request = RF.get("/", REMOTE_ADDR="127.0.0.1:8000")
 
         try:
@@ -368,12 +360,9 @@ class DBLogTestCase(TestCase):
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.class_name, 'DoesNotExist')
         self.assertEquals(last.level, logging.ERROR)
-        self.assertEquals(last.message, smart_unicode(exc))        
+        self.assertEquals(last.message, smart_unicode(exc))
 
     def testSignalsWithoutRequest(self):
-        Message.objects.all().delete()
-        GroupedMessage.objects.all().delete()
-
         request = RF.get("/", REMOTE_ADDR="127.0.0.1:8000")
 
         try:
@@ -429,6 +418,18 @@ class DBLogTestCase(TestCase):
         self.assertEquals(Message.objects.count(), 1)
         self.assertEquals(GroupedMessage.objects.count(), 1)
 
+    def testViewException(self):
+        self.assertRaises(Exception, self.client.get, reverse('dblog-raise-exc'))
+        
+        cur = (Message.objects.count(), GroupedMessage.objects.count())
+        self.assertEquals(cur, (1, 1), 'Assumed logs failed to save. %s' % (cur,))
+        last = Message.objects.all().order_by('-id')[0:1].get()
+        self.assertEquals(last.logger, 'root')
+        self.assertEquals(last.class_name, 'Exception')
+        self.assertEquals(last.level, logging.ERROR)
+        self.assertEquals(last.message, 'view exception')
+        self.assertEquals(last.view, 'dblog.tests.views.raise_exc')
+
 class DBLogViewsTest(TestCase):
     urls = 'dblog.tests.urls'
     
@@ -470,9 +471,6 @@ class DBLogViewsTest(TestCase):
         self._handlers = None
 
     def testSignals(self):
-        Message.objects.all().delete()
-        GroupedMessage.objects.all().delete()
-
         self.assertRaises(Exception, self.client.get, '/')
         
         cur = (Message.objects.count(), GroupedMessage.objects.count())
@@ -491,16 +489,16 @@ class DBLogFeedsTest(TestCase):
         response = self.client.get(reverse('dblog-feed-messages'))
         self.assertEquals(response.status_code, 200)
         self.assertTrue(response.content.startswith('<?xml version="1.0" encoding="utf-8"?>'))
-        self.assertTrue('<link>http://testserver/admin/dblog/error/</link>' in response.content)
+        self.assertTrue('<link>http://testserver/admin/dblog/message/</link>' in response.content)
         self.assertTrue('<title>log messages</title>' in response.content)
-        self.assertTrue('<link>http://testserver/admin/dblog/error/1/</link>' in response.content)
+        self.assertTrue('<link>http://testserver/admin/dblog/message/1/</link>' in response.content, response.content)
         self.assertTrue('<title>TypeError: exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
 
     def testSummaryFeed(self):
         response = self.client.get(reverse('dblog-feed-summaries'))
         self.assertEquals(response.status_code, 200)
         self.assertTrue(response.content.startswith('<?xml version="1.0" encoding="utf-8"?>'))
-        self.assertTrue('<link>http://testserver/admin/dblog/errorbatch/</link>' in response.content)
+        self.assertTrue('<link>http://testserver/admin/dblog/groupedmessage/</link>' in response.content)
         self.assertTrue('<title>log summaries</title>' in response.content)
-        self.assertTrue('<link>http://testserver/admin/dblog/errorbatch/1/</link>' in response.content)
+        self.assertTrue('<link>http://testserver/admin/dblog/groupedmessage/1/</link>' in response.content)
         self.assertTrue('<title>(1) TypeError: TypeError: exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
\ No newline at end of file
