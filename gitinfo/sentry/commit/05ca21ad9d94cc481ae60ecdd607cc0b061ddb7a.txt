commit 05ca21ad9d94cc481ae60ecdd607cc0b061ddb7a
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Feb 15 22:04:59 2016 -0800

    Move batch SSO link emails to async task
    
    This will improve web/lb timeout behavior for large organizations
    
    Fixes GH-2685

diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index e477841106..cd00bb46d4 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -16,6 +16,7 @@ from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, AuthIdentity, AuthProvider, Organization,
     OrganizationMember, OrganizationMemberTeam, User
 )
+from sentry.tasks.auth import email_missing_links
 from sentry.utils import auth
 from sentry.utils.cache import Lock
 from sentry.utils.http import absolute_uri
@@ -499,12 +500,9 @@ class AuthHelper(object):
             data=self.auth_provider.get_audit_log_data(),
         )
 
-        member_list = OrganizationMember.objects.filter(
-            organization=self.organization,
-            flags=~getattr(OrganizationMember.flags, 'sso:linked'),
+        email_missing_links.delay(
+            organization_id=self.organization.id,
         )
-        for member in member_list:
-            member.send_sso_link_email()
 
         messages.add_message(
             self.request, messages.SUCCESS,
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 590bd780cc..1fadbfab4b 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -381,6 +381,7 @@ CELERY_DEFAULT_EXCHANGE_TYPE = "direct"
 CELERY_DEFAULT_ROUTING_KEY = "default"
 CELERY_CREATE_MISSING_QUEUES = True
 CELERY_IMPORTS = (
+    'sentry.tasks.auth',
     'sentry.tasks.beacon',
     'sentry.tasks.clear_expired_snoozes',
     'sentry.tasks.check_auth',
diff --git a/src/sentry/tasks/auth.py b/src/sentry/tasks/auth.py
new file mode 100644
index 0000000000..6e708a13b9
--- /dev/null
+++ b/src/sentry/tasks/auth.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import, print_function
+
+from celery.utils.log import get_task_logger
+
+from sentry.models import Organization, OrganizationMember
+from sentry.tasks.base import instrumented_task
+
+logger = get_task_logger(__name__)
+
+
+@instrumented_task(name='sentry.tasks.send_sso_link_emails', queue='auth')
+def email_missing_links(organization_id, **kwargs):
+    try:
+        org = Organization.objects.get(id=organization_id)
+    except Organization.DoesNotExist:
+        logger.warning(
+            'Organization(id=%s) does not exist',
+            organization_id,
+        )
+        return
+
+    member_list = OrganizationMember.objects.filter(
+        organization=org,
+        flags=~getattr(OrganizationMember.flags, 'sso:linked'),
+    )
+    for member in member_list:
+        member.send_sso_link_email()
diff --git a/src/sentry/web/frontend/organization_auth_settings.py b/src/sentry/web/frontend/organization_auth_settings.py
index 6621d1ab56..f0c330fd15 100644
--- a/src/sentry/web/frontend/organization_auth_settings.py
+++ b/src/sentry/web/frontend/organization_auth_settings.py
@@ -15,6 +15,7 @@ from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, AuthProvider, OrganizationMember
 )
 from sentry.plugins import Response
+from sentry.tasks.auth import email_missing_links
 from sentry.utils import db
 from sentry.utils.http import absolute_uri
 from sentry.web.frontend.base import OrganizationView
@@ -70,14 +71,6 @@ class OrganizationAuthSettingsView(OrganizationView):
 
         auth_provider.delete()
 
-    def _reinvite_members(self, request, organization):
-        member_list = OrganizationMember.objects.filter(
-            organization=organization,
-            flags=~getattr(OrganizationMember.flags, 'sso:linked'),
-        )
-        for member in member_list:
-            member.send_sso_link_email()
-
     def handle_existing_provider(self, request, organization, auth_provider):
         provider = auth_provider.get_provider()
 
@@ -95,7 +88,7 @@ class OrganizationAuthSettingsView(OrganizationView):
                                    args=[organization.slug])
                 return self.redirect(next_uri)
             elif op == 'reinvite':
-                self._reinvite_members(request, organization)
+                email_missing_links.delay(organization_id=organization.id)
 
                 messages.add_message(
                     request, messages.SUCCESS,
diff --git a/tests/sentry/tasks/test_auth.py b/tests/sentry/tasks/test_auth.py
new file mode 100644
index 0000000000..283ed9a2fd
--- /dev/null
+++ b/tests/sentry/tasks/test_auth.py
@@ -0,0 +1,35 @@
+from __future__ import absolute_import, print_function
+
+from django.core import mail
+
+from sentry.models import AuthProvider, OrganizationMember
+from sentry.testutils import TestCase
+from sentry.tasks.auth import email_missing_links
+
+
+class EmailMissingLinksTest(TestCase):
+    def test_simple(self):
+        user = self.create_user(email='bar@example.com')
+        organization = self.create_organization(owner=user, name='Test')
+        AuthProvider.objects.create(
+            organization=organization,
+            provider='dummy',
+        )
+        OrganizationMember.objects.create_or_update(
+            user=user,
+            organization=organization,
+            values={
+                'flags': getattr(OrganizationMember.flags, 'sso:linked'),
+            },
+        )
+        user2 = self.create_user(email='baz@example.com')
+        OrganizationMember.objects.create(
+            user=user2,
+            organization=organization,
+            flags=0,
+        )
+        with self.tasks():
+            email_missing_links(organization.id)
+
+        assert len(mail.outbox) == 1
+        assert mail.outbox[0].to == [user2.email]
