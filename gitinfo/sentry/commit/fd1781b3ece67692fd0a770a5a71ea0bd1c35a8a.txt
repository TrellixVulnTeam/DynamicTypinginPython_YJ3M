commit fd1781b3ece67692fd0a770a5a71ea0bd1c35a8a
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Dec 14 14:51:35 2015 -0800

    Enforce CORS on request

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 5751b8d4fe..36cfc08870 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -120,6 +120,16 @@ class Endpoint(APIView):
         if settings.SENTRY_API_RESPONSE_DELAY:
             time.sleep(settings.SENTRY_API_RESPONSE_DELAY / 1000.0)
 
+        origin = request.META.get('HTTP_ORIGIN')
+        if origin:
+            if request.auth:
+                allowed_origins = request.auth.get_allowed_origins()
+            else:
+                allowed_origins = ()
+
+            if not is_valid_origin(origin, allowed=allowed_origins):
+                raise Response('Invalid origin: %s' % (origin,), status=400)
+
         try:
             self.initial(request, *args, **kwargs)
 
@@ -139,32 +149,16 @@ class Endpoint(APIView):
         except Exception as exc:
             response = self.handle_exception(request, exc)
 
-        self.response = self.finalize_response(request, response, *args, **kwargs)
-        return self.response
-
-    def finalize_response(self, request, response, *args, **kwargs):
-        response = super(Endpoint, self).finalize_response(
-            request, response, *args, **kwargs
-        )
+        if origin:
+            self.add_cors_headers(request, response)
 
-        self.add_cors_headers(request, response)
+        self.response = self.finalize_response(request, response, *args, **kwargs)
 
-        return response
+        return self.response
 
     def add_cors_headers(self, request, response):
-        if not request.auth:
-            return
-
-        origin = request.META.get('HTTP_ORIGIN')
-        if not origin:
-            return
-
-        allowed_origins = request.auth.get_allowed_origins()
-        if is_valid_origin(origin, allowed=allowed_origins):
-            response['Access-Control-Allow-Origin'] = origin
-            response['Access-Control-Allow-Methods'] = ', '.join(self.http_method_names)
-
-        return
+        response['Access-Control-Allow-Origin'] = request.META['HTTP_ORIGIN']
+        response['Access-Control-Allow-Methods'] = ', '.join(self.http_method_names)
 
     def paginate(self, request, on_results=None, paginator_cls=Paginator,
                  default_per_page=100, **kwargs):
