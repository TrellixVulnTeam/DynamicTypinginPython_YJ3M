commit 23bba58bff99d1eb272ec6da90745c55cde3becd
Author: Ben Vinegar <ben@benv.ca>
Date:   Fri Mar 25 16:23:50 2016 -0700

    Show at most 5 breadcrumbs, implement toggle

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
index 9609a6eeb1..6943bddbec 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
@@ -10,7 +10,7 @@ import UiEventComponent from './breadcrumbComponents/uiEvent';
 import NavigationCrumbComponent from './breadcrumbComponents/navigation';
 import ErrorCrumbComponent from './breadcrumbComponents/error';
 
-const crumbComponents = {
+const CRUMB_COMPONENTS = {
   message: MessageCrumbComponent,
   rpc: RpcCrumbComponent,
   query: QueryCrumbComponent,
@@ -20,6 +20,21 @@ const crumbComponents = {
   error: ErrorCrumbComponent
 };
 
+function Collapsed(props) {
+  return (
+    <li className="crumbs-collapsed">
+      <span className="icon-container">
+        <span className="icon icon-ellipsis"/>
+      </span>
+      <a onClick={props.onClick}>Show {props.count} collapsed crumbs</a>
+    </li>
+  );
+}
+Collapsed.propTypes = {
+  onClick: React.PropTypes.func.isRequired,
+  count: React.PropTypes.number.isRequired
+};
+
 const BreadcrumbsInterface = React.createClass({
   propTypes: {
     group: PropTypes.Group.isRequired,
@@ -34,6 +49,45 @@ const BreadcrumbsInterface = React.createClass({
     project: PropTypes.Project
   },
 
+  statics: {
+    MAX_CRUMBS_WHEN_COLLAPSED: 5
+  },
+
+  getInitialState() {
+    return {
+      collapsed: true
+    };
+  },
+
+  onCollapseToggle() {
+    this.setState({
+      collapsed: !this.state.collapsed
+    });
+  },
+
+  renderBreadcrumbs(crumbs) {
+    // reverse array to get consistent idx between collapsed/expanded state
+    // (indexes begin and increment from last breadcrumb)
+    return crumbs.reverse().map((item, idx) => {
+      let Component = CRUMB_COMPONENTS[item.type];
+      let el;
+      if (Component) {
+        el = <Component data={item.data} />;
+      } else {
+        el = <div className="errors">Missing crumb "{item.type}"</div>;
+      }
+      return (
+        <li key={idx} className={'crumb crumb-' + item.type.replace(/_/g, '-')}>
+          <span className="icon-container">
+            <span className="icon"/>
+          </span>
+          <span className="dt">{Math.round(item.dt * 1000) / 1000}ms</span>
+          {el}
+        </li>
+      );
+    }).reverse(); // un-reverse rendered result
+  },
+
   render() {
     let group = this.props.group;
     let evt = this.props.event;
@@ -42,41 +96,32 @@ const BreadcrumbsInterface = React.createClass({
     let title = (
       <div>
         <h3>
-          <strong>Breadcrumbs</strong>
+          <strong>{'Breadcrumbs'}</strong>
         </h3>
       </div>
     );
 
-    // Add the error event as the final breadcrumb
-    let crumbs = [].slice.call(data.values, 0);
+    let all = data.values;
 
+    // Add the error event as the final breadcrumb
+    // TODO: what about non-exceptions (e.g. generic messages)?
     let exception = evt.entries.find(entry => entry.type === 'exception');
     if (exception) {
-      crumbs.push({
+      // make copy of values array / don't mutate props
+      all = all.slice(0).concat([{
         type: 'error',
         dt: 0,
         data: exception.data.values[0]
-      });
+      }]);
     }
 
-    let renderedCrumbs = crumbs.map((item, idx) => {
-      let Component = crumbComponents[item.type];
-      let el;
-      if (Component) {
-        el = <Component data={item.data} />;
-      } else {
-        el = <div className="errors">Missing crumb "{item.type}"</div>;
-      }
-      return (
-        <li key={idx} className={'crumb crumb-' + item.type.replace(/_/g, '-')}>
-          <span className="icon-container">
-            <span className="icon"/>
-          </span>
-          <span className="dt">{Math.round(item.dt * 1000) / 1000}ms</span>
-          {el}
-        </li>
-      );
-    });
+    let crumbs = all;
+    const MAX = BreadcrumbsInterface.MAX_CRUMBS_WHEN_COLLAPSED;
+    if (this.state.collapsed && crumbs.length > MAX) {
+      crumbs = all.slice(-MAX);
+    }
+
+    let numCollapsed = all.length - crumbs.length;
 
     return (
       <GroupEventDataSection
@@ -87,13 +132,8 @@ const BreadcrumbsInterface = React.createClass({
           title={title}
           wrapTitle={false}>
         <ul className="crumbs">
-          <li className="crumbs-collapsed">
-            <span className="icon-container">
-              <span className="icon icon-ellipsis"/>
-            </span>
-            <a>Show 12 collapsed crumbs</a>
-          </li>
-          {renderedCrumbs}
+          {numCollapsed > 0 && <Collapsed onClick={this.onCollapseToggle} count={numCollapsed}/>}
+          {this.renderBreadcrumbs(crumbs)}
         </ul>
       </GroupEventDataSection>
     );
