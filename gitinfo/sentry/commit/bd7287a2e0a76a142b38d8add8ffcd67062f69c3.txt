commit bd7287a2e0a76a142b38d8add8ffcd67062f69c3
Author: Stephen Cefali <scefali@sentry.io>
Date:   Thu Sep 5 11:51:37 2019 -0700

    fix(app-platform): Allow updating published apps (#14587)

diff --git a/src/sentry/api/bases/sentryapps.py b/src/sentry/api/bases/sentryapps.py
index 292f8fe67e..dfe1c53746 100644
--- a/src/sentry/api/bases/sentryapps.py
+++ b/src/sentry/api/bases/sentryapps.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from django.http import Http404
 from functools import wraps
+from rest_framework.response import Response
 
 from sentry.utils.sdk import configure_scope
 from sentry.api.authentication import ClientIdSecretAuthentication
@@ -10,6 +11,18 @@ from sentry.api.permissions import SentryPermission
 from sentry.auth.superuser import is_active_superuser
 from sentry.middleware.stats import add_request_metric_tags
 from sentry.models import SentryApp, SentryAppInstallation, Organization
+from sentry.coreapi import APIError
+
+
+def catch_raised_errors(func):
+    @wraps(func)
+    def wrapped(self, *args, **kwargs):
+        try:
+            return func(self, *args, **kwargs)
+        except APIError as e:
+            return Response({"detail": e.msg}, status=400)
+
+    return wrapped
 
 
 def ensure_scoped_permission(request, allowed_scopes):
diff --git a/src/sentry/api/endpoints/sentry_app_details.py b/src/sentry/api/endpoints/sentry_app_details.py
index 96f9d44de0..177a2b0514 100644
--- a/src/sentry/api/endpoints/sentry_app_details.py
+++ b/src/sentry/api/endpoints/sentry_app_details.py
@@ -5,7 +5,7 @@ from rest_framework.response import Response
 import logging
 
 from sentry import features, analytics
-from sentry.api.bases.sentryapps import SentryAppBaseEndpoint
+from sentry.api.bases.sentryapps import SentryAppBaseEndpoint, catch_raised_errors
 from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework import SentryAppSerializer
 from sentry.mediators.sentry_apps import Updater, Destroyer
@@ -19,6 +19,7 @@ class SentryAppDetailsEndpoint(SentryAppBaseEndpoint):
     def get(self, request, sentry_app):
         return Response(serialize(sentry_app, request.user))
 
+    @catch_raised_errors
     def put(self, request, sentry_app):
         if self._has_hook_events(request) and not features.has(
             "organizations:integrations-event-hooks", sentry_app.owner, actor=request.user
diff --git a/src/sentry/api/serializers/rest_framework/sentry_app.py b/src/sentry/api/serializers/rest_framework/sentry_app.py
index 2e1452a93f..be0ba107d9 100644
--- a/src/sentry/api/serializers/rest_framework/sentry_app.py
+++ b/src/sentry/api/serializers/rest_framework/sentry_app.py
@@ -108,7 +108,7 @@ class SentryAppSerializer(Serializer):
     def validate(self, attrs):
         # validates events against scopes
         if attrs.get("scopes"):
-            for resource in attrs.get("events"):
+            for resource in attrs.get("events", []):
                 needed_scope = REQUIRED_EVENT_PERMISSIONS[resource]
                 if needed_scope not in attrs["scopes"]:
                     raise ValidationError(
diff --git a/src/sentry/mediators/sentry_apps/updater.py b/src/sentry/mediators/sentry_apps/updater.py
index cf308bcc48..b1001f540d 100644
--- a/src/sentry/mediators/sentry_apps/updater.py
+++ b/src/sentry/mediators/sentry_apps/updater.py
@@ -62,8 +62,11 @@ class Updater(Mediator):
 
     @if_param("scopes")
     def _update_scopes(self):
-        if self.sentry_app.status == SentryAppStatus.PUBLISHED:
-            raise APIError("Cannot update scopes on published App.")
+        if (
+            self.sentry_app.status == SentryAppStatus.PUBLISHED
+            and self.sentry_app.scope_list != self.scopes
+        ):
+            raise APIError("Cannot update permissions on a published integration.")
         self.sentry_app.scope_list = self.scopes
 
     @if_param("events")
diff --git a/src/sentry/static/sentry/app/actionCreators/sentryAppTokens.jsx b/src/sentry/static/sentry/app/actionCreators/sentryAppTokens.tsx
similarity index 58%
rename from src/sentry/static/sentry/app/actionCreators/sentryAppTokens.jsx
rename to src/sentry/static/sentry/app/actionCreators/sentryAppTokens.tsx
index b02a8f4db0..777e98d0d7 100644
--- a/src/sentry/static/sentry/app/actionCreators/sentryAppTokens.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/sentryAppTokens.tsx
@@ -4,6 +4,8 @@ import {
   addSuccessMessage,
 } from 'app/actionCreators/indicator';
 import {t} from 'app/locale';
+import {SentryApp, InternalAppApiToken} from 'app/types';
+import {Client} from 'app/api';
 
 /**
  * Install a sentry application
@@ -11,14 +13,17 @@ import {t} from 'app/locale';
  * @param {Object} client ApiClient
  * @param {Object} app SentryApp
  */
-export async function addSentryAppToken(client, app) {
+export async function addSentryAppToken(
+  client: Client,
+  app: SentryApp
+): Promise<InternalAppApiToken> {
   addLoadingMessage();
   try {
-    const resp = await client.requestPromise(`/sentry-apps/${app.slug}/api-tokens/`, {
+    const token = await client.requestPromise(`/sentry-apps/${app.slug}/api-tokens/`, {
       method: 'POST',
     });
     addSuccessMessage(t('Token successfully added.'));
-    return resp;
+    return token;
   } catch (err) {
     addErrorMessage(t('Unable to create token'));
     throw err;
@@ -32,17 +37,18 @@ export async function addSentryAppToken(client, app) {
  * @param {Object} app SentryApp
  * @param {String} token Token string
  */
-export async function removeSentryAppToken(client, app, token) {
+export async function removeSentryAppToken(
+  client: Client,
+  app: SentryApp,
+  token: string
+): Promise<void> {
   addLoadingMessage();
   try {
-    const resp = await client.requestPromise(
-      `/sentry-apps/${app.slug}/api-tokens/${token}/`,
-      {
-        method: 'DELETE',
-      }
-    );
+    await client.requestPromise(`/sentry-apps/${app.slug}/api-tokens/${token}/`, {
+      method: 'DELETE',
+    });
     addSuccessMessage(t('Token successfully deleted.'));
-    return resp;
+    return;
   } catch (err) {
     addErrorMessage(t('Unable to delete token'));
     throw err;
diff --git a/src/sentry/static/sentry/app/constants/index.tsx b/src/sentry/static/sentry/app/constants/index.tsx
index d5114135dc..0b57a6cf4d 100644
--- a/src/sentry/static/sentry/app/constants/index.tsx
+++ b/src/sentry/static/sentry/app/constants/index.tsx
@@ -19,7 +19,7 @@ export const API_SCOPES = [
   'org:admin',
   'member:read',
   'member:admin',
-];
+] as const;
 
 // Default API scopes when adding a new API token or org API token
 export const DEFAULT_API_SCOPES = [
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 8236452890..6ccb40f3a7 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -1,4 +1,5 @@
 import {SpanEntry} from 'app/components/events/interfaces/spans/types';
+import {API_SCOPES} from 'app/constants';
 
 export type Organization = {
   id: string;
@@ -336,18 +337,20 @@ export type Repository = {
   url: string;
 };
 
-export type WebhookEvents = 'issue' | 'error';
+export type WebhookEvent = 'issue' | 'error';
+
+export type Scope = typeof API_SCOPES[number];
 
 export type SentryApp = {
   status: string;
-  scopes: string[];
+  scopes: Scope[];
   isAlertable: boolean;
   verifyInstall: boolean;
   slug: string;
   name: string;
   uuid: string;
   author: string;
-  events: WebhookEvents[];
+  events: WebhookEvent[];
   schema: {
     elements?: object[]; //TODO(ts)
   };
@@ -363,3 +366,30 @@ export type SentryApp = {
     slug: string;
   };
 };
+
+export type PermissionValue = 'no-access' | 'read' | 'write' | 'admin';
+
+export type Permissions = {
+  Event: PermissionValue;
+  Member: PermissionValue;
+  Organization: PermissionValue;
+  Project: PermissionValue;
+  Release: PermissionValue;
+  Team: PermissionValue;
+};
+
+//See src/sentry/api/serializers/models/apitoken.py for the differences based on application
+type BaseApiToken = {
+  id: string;
+  scopes: Scope[];
+  expiresAt: string;
+  dateCreated: string;
+  state: string;
+};
+
+//We include the token for API tokens used for internal apps
+export type InternalAppApiToken = BaseApiToken & {
+  application: null;
+  token: string;
+  refreshToken: string;
+};
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionSelection.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionSelection.tsx
similarity index 88%
rename from src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionSelection.jsx
rename to src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionSelection.tsx
index 3c75526ed2..fe11fa64fe 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionSelection.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionSelection.tsx
@@ -1,11 +1,12 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import {find, flatMap} from 'lodash';
+import {find, flatMap, get} from 'lodash';
 
 import {t} from 'app/locale';
 import {SENTRY_APP_PERMISSIONS} from 'app/constants';
 import SelectField from 'app/views/settings/components/forms/selectField';
+import {Permissions} from 'app/types/index';
 
 /**
  * Custom form element that presents API scopes in a resource-centric way. Meaning
@@ -76,7 +77,18 @@ import SelectField from 'app/views/settings/components/forms/selectField';
  *       ['project:read', 'project:write', 'project:admin', 'org:read', 'org:write']
  *
  */
-export default class PermissionSelection extends React.Component {
+
+type Props = {
+  permissions: Permissions;
+  onChange: (permissions: Permissions) => void;
+  appPublished: Boolean;
+};
+
+type State = {
+  permissions: Permissions;
+};
+
+export default class PermissionSelection extends React.Component<Props, State> {
   static contextTypes = {
     router: PropTypes.object.isRequired,
     form: PropTypes.object,
@@ -85,10 +97,11 @@ export default class PermissionSelection extends React.Component {
   static propTypes = {
     permissions: PropTypes.object.isRequired,
     onChange: PropTypes.func.isRequired,
+    appPublished: PropTypes.bool,
   };
 
-  constructor(...args) {
-    super(...args);
+  constructor(props) {
+    super(props);
     this.state = {
       permissions: this.props.permissions,
     };
@@ -104,10 +117,8 @@ export default class PermissionSelection extends React.Component {
   permissionStateToList() {
     const {permissions} = this.state;
     const findResource = r => find(SENTRY_APP_PERMISSIONS, ['resource', r]);
-
-    return flatMap(
-      Object.entries(permissions),
-      ([r, p]) => findResource(r).choices[p].scopes
+    return flatMap(Object.entries(permissions), ([r, p]) =>
+      get(findResource(r), `choices[${p}].scopes`)
     );
   }
 
@@ -147,6 +158,8 @@ export default class PermissionSelection extends React.Component {
               onChange={this.onChange.bind(this, config.resource)}
               value={value}
               defaultValue={value}
+              disabled={this.props.appPublished}
+              disabledReason={t('Cannot update permissions on a published integration')}
             />
           );
         })}
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.tsx
similarity index 84%
rename from src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.jsx
rename to src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.tsx
index bdb60dcf64..a6f124d750 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.tsx
@@ -6,8 +6,21 @@ import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {t} from 'app/locale';
 import PermissionSelection from 'app/views/settings/organizationDeveloperSettings/permissionSelection';
 import Subscriptions from 'app/views/settings/organizationDeveloperSettings/resourceSubscriptions';
+import {WebhookEvent, Permissions, Scope} from 'app/types';
 
-export default class PermissionsObserver extends React.Component {
+type Props = {
+  scopes: Scope[];
+  events: WebhookEvent[];
+  webhookDisabled: boolean;
+  appPublished: boolean;
+};
+
+type State = {
+  permissions: Permissions;
+  events: WebhookEvent[];
+};
+
+export default class PermissionsObserver extends React.Component<Props, State> {
   static contextTypes = {
     router: PropTypes.object.isRequired,
     form: PropTypes.object,
@@ -17,14 +30,16 @@ export default class PermissionsObserver extends React.Component {
     scopes: PropTypes.arrayOf(PropTypes.string).isRequired,
     events: PropTypes.arrayOf(PropTypes.string).isRequired,
     webhookDisabled: PropTypes.bool.isRequired,
+    appPublished: PropTypes.bool.isRequired,
   };
 
   static defaultProps = {
     webhookDisabled: false,
+    appPublished: false,
   };
 
-  constructor(...args) {
-    super(...args);
+  constructor(props) {
+    super(props);
     this.state = {
       permissions: this.scopeListToPermissionState(),
       events: this.props.events,
@@ -63,6 +78,7 @@ export default class PermissionsObserver extends React.Component {
             <PermissionSelection
               permissions={permissions}
               onChange={this.onPermissionChange}
+              appPublished={this.props.appPublished}
             />
           </PanelBody>
         </Panel>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
similarity index 87%
rename from src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
rename to src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
index b36c8affbc..c5351a15b0 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
@@ -1,9 +1,9 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 import {browserHistory} from 'react-router';
 import {Observer} from 'mobx-react';
+import _ from 'lodash';
 
-import {addSuccessMessage} from 'app/actionCreators/indicator';
+import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
 import {Panel, PanelItem, PanelBody, PanelHeader} from 'app/components/panels';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
@@ -29,6 +29,7 @@ import {
   addSentryAppToken,
   removeSentryAppToken,
 } from 'app/actionCreators/sentryAppTokens';
+import {SentryApp, InternalAppApiToken} from 'app/types';
 
 class SentryAppFormModel extends FormModel {
   /**
@@ -54,17 +55,21 @@ class SentryAppFormModel extends FormModel {
   }
 }
 
-export default class SentryApplicationDetails extends AsyncView {
-  static contextTypes = {
-    router: PropTypes.object.isRequired,
+type Props = AsyncView['props'] & {
+  route: {
+    path: string;
   };
+};
 
-  constructor(...args) {
-    super(...args);
-    this.form = new SentryAppFormModel();
-  }
+type State = AsyncView['state'] & {
+  app: SentryApp | null;
+  tokens: InternalAppApiToken[];
+};
+
+export default class SentryApplicationDetails extends AsyncView<Props, State> {
+  form = new SentryAppFormModel();
 
-  getDefaultState() {
+  getDefaultState(): State {
     return {
       ...super.getDefaultState(),
       app: null,
@@ -72,7 +77,7 @@ export default class SentryApplicationDetails extends AsyncView {
     };
   }
 
-  getEndpoints() {
+  getEndpoints(): Array<[string, string]> {
     const {appSlug} = this.props.params;
     if (appSlug) {
       return [
@@ -97,12 +102,20 @@ export default class SentryApplicationDetails extends AsyncView {
     return events.map(e => e.split('.').shift());
   }
 
-  onSubmitSuccess = data => {
+  handleSubmitSuccess = data => {
     const {orgId} = this.props.params;
     addSuccessMessage(t(`${data.name} successfully saved.`));
     browserHistory.push(`/settings/${orgId}/developer-settings/`);
   };
 
+  handleSubmitError = err => {
+    let errorMessage = 'Unknown Error';
+    if (err.status >= 400 && err.status < 500) {
+      errorMessage = _.get(err, 'responseJSON.detail', errorMessage);
+    }
+    addErrorMessage(t(errorMessage));
+  };
+
   get isInternal() {
     const {app} = this.state;
     if (app) {
@@ -112,9 +125,13 @@ export default class SentryApplicationDetails extends AsyncView {
     return this.props.route.path === 'new-internal/';
   }
 
-  onAddToken = async evt => {
+  onAddToken = async (evt: React.MouseEvent): Promise<void> => {
     evt.preventDefault();
     const {app, tokens} = this.state;
+    if (!app) {
+      return;
+    }
+
     const api = this.api;
 
     const token = await addSentryAppToken(api, app);
@@ -122,9 +139,13 @@ export default class SentryApplicationDetails extends AsyncView {
     this.setState({tokens: newTokens});
   };
 
-  onRemoveToken = async (token, evt) => {
+  onRemoveToken = async (token: InternalAppApiToken, evt: React.MouseEvent) => {
     evt.preventDefault();
     const {app, tokens} = this.state;
+    if (!app) {
+      return;
+    }
+
     const api = this.api;
     const newTokens = tokens.filter(tok => tok.token !== token.token);
 
@@ -168,7 +189,7 @@ export default class SentryApplicationDetails extends AsyncView {
     }
   };
 
-  onFieldChange = (name, value) => {
+  onFieldChange = (name: string, value: string | number): void => {
     if (name === 'webhookUrl' && !value && this.isInternal) {
       //if no webhook, then set isAlertable to false
       this.form.setValue('isAlertable', false);
@@ -210,7 +231,8 @@ export default class SentryApplicationDetails extends AsyncView {
             verifyInstall, //need to overwrite the value in app for internal if it is true
           }}
           model={this.form}
-          onSubmitSuccess={this.onSubmitSuccess}
+          onSubmitSuccess={this.handleSubmitSuccess}
+          onSubmitError={this.handleSubmitError}
           onFieldChange={this.onFieldChange}
         >
           <Observer>
@@ -227,6 +249,7 @@ export default class SentryApplicationDetails extends AsyncView {
 
                   <PermissionsObserver
                     webhookDisabled={webhookDisabled}
+                    appPublished={app ? app.status === 'published' : false}
                     scopes={scopes}
                     events={events}
                   />
diff --git a/tests/sentry/api/endpoints/test_sentry_app_details.py b/tests/sentry/api/endpoints/test_sentry_app_details.py
index d23bfbc9e4..75c333ebc8 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_details.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_details.py
@@ -187,7 +187,8 @@ class UpdateSentryAppDetailsTest(SentryAppDetailsTest):
             },
             format="json",
         )
-        assert response.status_code == 500
+        assert response.status_code == 400
+        assert response.data["detail"] == "Cannot update permissions on a published integration."
 
     def test_cannot_update_non_owned_apps(self):
         self.login_as(user=self.user)
diff --git a/tests/sentry/mediators/sentry_apps/test_updater.py b/tests/sentry/mediators/sentry_apps/test_updater.py
index 9ea19443c5..953e4a008a 100644
--- a/tests/sentry/mediators/sentry_apps/test_updater.py
+++ b/tests/sentry/mediators/sentry_apps/test_updater.py
@@ -40,6 +40,17 @@ class TestUpdater(TestCase):
         with self.assertRaises(APIError):
             updater.call()
 
+    def test_update_webhook_published_app(self):
+        sentry_app = self.create_sentry_app(
+            name="sentry", organization=self.org, scopes=("project:read",), published=True
+        )
+        updater = Updater(sentry_app=sentry_app, user=self.user)
+        # pass in scopes but as the same value
+        updater.scopes = ["project:read"]
+        updater.webhook_url = "http://example.com/hooks"
+        updater.call()
+        assert sentry_app.webhook_url == "http://example.com/hooks"
+
     def test_doesnt_update_app_with_invalid_event_permissions(self):
         sentry_app = self.create_sentry_app(
             name="sentry", organization=self.org, scopes=("project:read",)
