commit 08369e7d1ba399c57e2f77db1f82249ec489ceb1
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Mar 24 23:50:39 2016 +0100

    Implemented better design for cocoa stacks

diff --git a/setup.py b/setup.py
index f46dd1db93..a6a48ef234 100755
--- a/setup.py
+++ b/setup.py
@@ -137,7 +137,7 @@ postgres_requires = [
 ]
 
 dsym_requires = [
-    'symsynd>=0.2.0,<1.0.0',
+    'symsynd>=0.3.0,<1.0.0',
 ]
 
 
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index f24892c058..87c992e168 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -169,6 +169,7 @@ VALID_PLATFORMS = set([
     'as3',
     'c',
     'cfml',
+    'cocoa',
     'csharp',
     'go',
     'java',
diff --git a/src/sentry/interfaces/applecrash.py b/src/sentry/interfaces/applecrash.py
index c8f25c6951..130d4e9645 100644
--- a/src/sentry/interfaces/applecrash.py
+++ b/src/sentry/interfaces/applecrash.py
@@ -34,6 +34,7 @@ class AppleCrashReport(Interface):
 
         kwargs = {
             'crash': data['crash'],
+            'system': data.get('system') or {},
             'binary_images': data['binary_images'],
         }
 
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 62128f9300..8b48f78a18 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -262,12 +262,20 @@ class Frame(Interface):
         except AssertionError:
             raise InterfaceValidationError("Invalid value for 'in_app'")
 
+        instruction_offset = data.get('instruction_offset')
+        if instruction_offset is not None and \
+           not isinstance(instruction_offset, (int, long)):
+            raise InterfaceValidationError("Invalid value for 'instruction_offset'")
+
         kwargs = {
             'abs_path': trim(abs_path, 256),
             'filename': trim(filename, 256),
             'module': trim(module, 256),
             'function': trim(function, 256),
             'package': trim(data.get('package'), 256),
+            'symbol_addr': trim(data.get('symbol_addr'), 16),
+            'instruction_addr': trim(data.get('instruction_addr'), 16),
+            'instruction_offset': instruction_offset,
             'in_app': in_app,
             'context_line': context_line,
             # TODO(dcramer): trim pre/post_context
@@ -349,6 +357,9 @@ class Frame(Interface):
             'absPath': self.abs_path,
             'module': self.module,
             'package': self.package,
+            'instructionAddr': self.instruction_addr,
+            'instructionOffset': self.instruction_offset,
+            'symbolAddr': self.symbol_addr,
             'function': self.function,
             'context': get_context(
                 lineno=self.lineno,
@@ -376,6 +387,7 @@ class Frame(Interface):
             })
             if is_url(self.data['sourcemap']):
                 data['mapUrl'] = self.data['sourcemap']
+
         return data
 
     def is_url(self):
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index ebf746fab0..e34f4eff9a 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -25,21 +25,64 @@ def exception_from_apple_error_or_diagnosis(error, diagnosis=None):
         }
 
 
-def inject_apple_backtrace(data, frames, diagnosis=None, error=None):
+def inject_apple_backtrace(data, frames, diagnosis=None, error=None,
+                           system=None):
+    # TODO:
+    #   in-app (based on global/project dsym?)
+    #   instruction_offset:
+    #       image + offset
+    #       symbol if found + offset
+    #   pad out addresses in UI
+    #   user report stacktraces from unity
+
+    if system:
+        app_uuid = system.get('app_uuid').lower()
+    else:
+        app_uuid = None
+
     converted_frames = []
+    longest_addr = 0
     for frame in frames:
         fn = frame.get('filename')
-        converted_frames.append({
+        in_app = False
+
+        if app_uuid is not None:
+            frame_uuid = frame.get('uuid')
+            if frame_uuid == app_uuid:
+                in_app = True
+
+        # We only record the offset if we found a symbol but we did not
+        # find a line number.  In that case it's the offset in bytes from
+        # the beginning of the symbol.
+        function = frame['symbol_name'] or '<unknown>'
+        lineno = frame.get('line')
+        offset = None
+        if not lineno:
+            offset = frame['instruction_addr'] - frame['symbol_addr']
+
+        cframe = {
+            'in_app': in_app,
             'abs_path': fn,
             'filename': fn and posixpath.basename(fn) or None,
             # This can come back as `None` from the symbolizer, in which
             # case we need to fill something else in or we will fail
             # later fulfill the interface requirements which say that a
             # function needs to be provided.
-            'function': frame['symbol_name'] or '<unknown>',
+            'function': function,
             'package': frame['object_name'],
-            'lineno': frame.get('line'),
-        })
+            'symbol_addr': '%x' % frame['symbol_addr'],
+            'instruction_addr': '%x' % frame['instruction_addr'],
+            'instruction_offset': offset,
+            'lineno': lineno,
+        }
+        converted_frames.append(cframe)
+        longest_addr = max(longest_addr, len(cframe['symbol_addr']),
+                           len(cframe['instruction_addr']))
+
+    # Pad out addresses to be of the same length and add prefix
+    for frame in converted_frames:
+        for key in 'symbol_addr', 'instruction_addr':
+            frame[key] = '0x' + frame[key][2:].rjust(longest_addr, '0')
 
     stacktrace = {'frames': converted_frames}
 
@@ -78,7 +121,7 @@ def preprocess_apple_crash_event(data):
     with sym.driver:
         bt = sym.symbolize_backtrace(crashed_thread['backtrace']['contents'])
         inject_apple_backtrace(data, bt, crash.get('diagnosis'),
-                               crash.get('error'))
+                               crash.get('error'), crash_report.get('system'))
 
     return data
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 8b37e90ae3..c8fbd4a23e 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -11,7 +11,8 @@ import {t} from '../../../locale';
 const Frame = React.createClass({
   propTypes: {
     data: React.PropTypes.object.isRequired,
-    isExpanded: React.PropTypes.bool
+    platform: React.PropTypes.string,
+    isExpanded: React.PropTypes.bool,
   },
 
   mixins: [
@@ -92,7 +93,7 @@ const Frame = React.createClass({
     return out;
   },
 
-  renderTitle() {
+  renderDefaultTitle() {
     let data = this.props.data;
     let title = [];
 
@@ -200,6 +201,66 @@ const Frame = React.createClass({
     return context;
   },
 
+  renderExpander() {
+    if (!this.isExpandable()) {
+      return null;
+    }
+    return (
+      <a
+        title={t('Toggle context')}
+        onClick={this.toggleContext}
+        className="btn btn-sm btn-default btn-toggle">
+        <span className={this.state.isExpanded ? 'icon-minus' : 'icon-plus'}/>
+      </a>
+    );
+  },
+
+  renderDefaultLine() {
+    return (
+      <p>
+        {this.renderTitle()}
+        {this.renderExpander()}
+      </p>
+    );
+  },
+
+  renderCocoaLine() {
+    let data = this.props.data;
+    let className = 'stacktrace-table';
+    if (data.inApp) {
+      className += ' in-app';
+    }
+    return (
+      <div className={className}>
+        <div className="trace-col package">
+          {data.package}
+        </div>
+        <div className="trace-col address">
+          {data.instructionAddr}
+        </div>
+        <div className="trace-col symbol">
+          <code>{data.function || '<unknown>'}</code>
+          {data.instructionOffset &&
+            <span className="offset">{' + ' + data.instructionOffset}</span>}
+          {data.filename &&
+            <span className="filename">{data.filename}
+              {data.lineNo ? ':' + data.lineNo : ''}</span>}
+          {this.renderExpander()}
+        </div>
+      </div>
+    );
+  },
+
+  renderLine() {
+    switch (this.props.platform) {
+      case 'objc':
+      case 'cocoa':
+        return this.renderCocoaLine();
+      default:
+        return this.renderDefaultLine();
+    }
+  },
+
   render() {
     let data = this.props.data;
 
@@ -208,22 +269,13 @@ const Frame = React.createClass({
       'system-frame': !data.inApp,
       'frame-errors': data.errors,
     });
+    let props = {className: className};
 
     let context = this.renderContext();
 
     return (
-      <li className={className}>
-        <p>{this.renderTitle()}
-          {this.isExpandable() ?
-            <a
-              title={t('Toggle context')}
-              onClick={this.toggleContext}
-              className="btn btn-sm btn-default btn-toggle">
-              <span className={this.state.isExpanded ? 'icon-minus' : 'icon-plus'}/>
-            </a>
-            : ''
-          }
-        </p>
+      <li {...props}>
+        {this.renderLine()}
         {context}
       </li>
     );
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
index fa6a4be059..5aeb89f458 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
@@ -89,6 +89,32 @@ export function getJavaFrame(frame) {
   return result;
 }
 
+function ljust(str, len) {
+  return str + Array(Math.max(0, len - str.length) + 1).join(' ');
+}
+
+export function getCocoaFrame(frame) {
+  let result = '  ';
+  if (defined(frame.package)) {
+    result += ljust(frame.package, 20);
+  }
+  if (defined(frame.instructionAddr)) {
+    result += ljust(frame.instructionAddr, 12);
+  }
+  result += ' ' + (frame.function || frame.symbolAddr);
+  if (frame.instructionOffset) {
+    result += ' + ' + frame.instructionOffset;
+  }
+  if (defined(frame.filename)) {
+    result += ' (' + frame.filename;
+    if (defined(frame.lineNo) && frame.lineNo >= 0) {
+      result += ':' + frame.lineNo;
+    }
+    result += ')';
+  }
+  return result;
+}
+
 function getFrame(frame, platform) {
   switch (platform) {
     case 'javascript':
@@ -99,6 +125,9 @@ function getFrame(frame, platform) {
       return getPythonFrame(frame);
     case 'java':
       return getJavaFrame(frame);
+    case 'objc':
+    case 'cocoa':
+      return getCocoaFrame(frame);
     default:
       return getPythonFrame(frame);
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index 5b329f93fc..b5dbce05ed 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -7,6 +7,7 @@ const StacktraceContent = React.createClass({
   propTypes: {
     data: React.PropTypes.object.isRequired,
     includeSystemFrames: React.PropTypes.bool,
+    platform: React.PropTypes.string,
     newestFirst: React.PropTypes.bool
   },
 
@@ -16,6 +17,20 @@ const StacktraceContent = React.createClass({
     };
   },
 
+  shouldRenderAsTable() {
+    return this.props.platform === 'cocoa';
+  },
+
+  renderOmittedFrames(firstFrameOmitted, lastFrameOmitted) {
+    let props = {
+      className: 'frame frames-omitted',
+      key: 'omitted'
+    };
+    let text = t('Frames %d until %d were omitted and not available.',
+                 firstFrameOmitted, lastFrameOmitted);
+    return <li {...props}>{text}</li>;
+  },
+
   render() {
     let data = this.props.data;
     let firstFrameOmitted, lastFrameOmitted;
@@ -32,14 +47,16 @@ const StacktraceContent = React.createClass({
     let frames = [];
     data.frames.forEach((frame, frameIdx) => {
       if (includeSystemFrames || frame.inApp) {
-        frames.push(<Frame key={frameIdx} data={frame} />);
+        frames.push(
+          <Frame
+            key={frameIdx}
+            data={frame}
+            platform={this.props.platform} />
+        );
       }
       if (frameIdx === firstFrameOmitted) {
-        frames.push((
-          <li className="frame frames-omitted" key="omitted">
-            {t('Frames %d until %d were omitted and not available.', firstFrameOmitted, lastFrameOmitted)}
-          </li>
-        ));
+        frames.push(this.renderOmittedFrames(
+          firstFrameOmitted, lastFrameOmitted));
       }
     });
 
@@ -49,9 +66,7 @@ const StacktraceContent = React.createClass({
 
     return (
       <div className="traceback">
-        <ul>
-          {frames}
-        </ul>
+        <ul>{frames}</ul>
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 06afb9420a..971e6b1a44 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1229,6 +1229,49 @@ ol.context-line {
   }
 }
 
+.stacktrace-table {
+  background: lighten(@blue-light, 25);
+
+  &.in-app {
+    background: white;
+  }
+
+  .trace-col {
+    display: inline-block;
+    padding: 0 5px;
+  }
+
+  .package {
+    width: 15%;
+    font-size: 13px;
+    font-weight: bold;
+  }
+  .address {
+    width: 10%;
+    font-size: 12px;
+    letter-spacing: -0.5px;
+  }
+  .symbol {
+    width: 75%;
+    code {
+      font-size: 12px;
+      background: transparent;
+      color: @blue-dark;
+    }
+    span.filename {
+      &:before {
+        content: "(";
+      }
+      &:after {
+        content: ")";
+      }
+      font-size: 12px;
+      color: @purple;
+      padding-left: 10px;
+    }
+  }
+}
+
 #full-message {
   line-height: 1.5em;
 
