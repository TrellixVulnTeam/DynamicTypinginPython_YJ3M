commit d358cd4e176962d54bf9f2578fa70fbe7c0014ea
Author: Dan Fuller <dfuller@sentry.io>
Date:   Thu May 21 11:04:28 2020 -0700

    refs(alert_rules): Remove extra fields and models related to `Incident` (#18955)
    
    This removes `query` and `aggregation` from the `Incident` model, and also removes the unused
    `IncidentGroup` model. We just update the state in the migration, we'll follow up with a migration
    to remove all the fields we've removed from models recently from postgres as well.

diff --git a/migrations_lockfile.txt b/migrations_lockfile.txt
index c819c8b106..307fc12c1a 100644
--- a/migrations_lockfile.txt
+++ b/migrations_lockfile.txt
@@ -10,7 +10,7 @@ auth: 0008_alter_user_username_max_length
 contenttypes: 0002_remove_content_type_name
 jira_ac: 0001_initial
 nodestore: 0001_initial
-sentry: 0078_incident_field_updates
+sentry: 0079_incidents_remove_query_field_state
 sessions: 0001_initial
 sites: 0002_alter_domain_unique
 social_auth: 0001_initial
diff --git a/src/sentry/api/serializers/models/incident.py b/src/sentry/api/serializers/models/incident.py
index eec4a3787e..f24f02dc66 100644
--- a/src/sentry/api/serializers/models/incident.py
+++ b/src/sentry/api/serializers/models/incident.py
@@ -89,12 +89,8 @@ class DetailedIncidentSerializer(IncidentSerializer):
         return context
 
     def _build_discover_query(self, incident):
-        query = incident.query
-        if (
-            incident.alert_rule
-            and QueryDatasets(incident.alert_rule.snuba_query.dataset) == QueryDatasets.EVENTS
-        ):
-            query = incident.alert_rule.snuba_query.query
+        query = incident.alert_rule.snuba_query.query
+        if QueryDatasets(incident.alert_rule.snuba_query.dataset) == QueryDatasets.EVENTS:
             condition = "event.type:error"
             query = "{} {}".format(condition, query) if query else condition
 
diff --git a/src/sentry/deletions/defaults/group.py b/src/sentry/deletions/defaults/group.py
index d8f63dab8e..3d5c2a67e7 100644
--- a/src/sentry/deletions/defaults/group.py
+++ b/src/sentry/deletions/defaults/group.py
@@ -63,7 +63,6 @@ class EventDataDeletionTask(BaseDeletionTask):
 class GroupDeletionTask(ModelDeletionTask):
     def get_child_relations(self, instance):
         from sentry import models
-        from sentry.incidents.models import IncidentGroup
 
         relations = []
 
@@ -87,7 +86,6 @@ class GroupDeletionTask(ModelDeletionTask):
             models.GroupSubscription,
             models.UserReport,
             models.EventAttachment,
-            IncidentGroup,
         )
 
         relations.extend([ModelRelation(m, {"group_id": instance.id}) for m in model_list])
diff --git a/src/sentry/incidents/models.py b/src/sentry/incidents/models.py
index b978612707..74c624b862 100644
--- a/src/sentry/incidents/models.py
+++ b/src/sentry/incidents/models.py
@@ -13,7 +13,7 @@ from sentry.db.models import FlexibleForeignKey, Model, UUIDField, OneToOneCasca
 from sentry.db.models import ArrayField, sane_repr
 from sentry.db.models.manager import BaseManager
 from sentry.models import Team, User
-from sentry.snuba.models import QueryAggregations, QuerySubscription
+from sentry.snuba.models import QuerySubscription
 from sentry.utils import metrics
 from sentry.utils.retries import TimedRetryPolicy
 
@@ -30,18 +30,6 @@ class IncidentProject(Model):
         unique_together = (("project", "incident"),)
 
 
-class IncidentGroup(Model):
-    __core__ = False
-
-    group = FlexibleForeignKey("sentry.Group", db_index=False, db_constraint=False)
-    incident = FlexibleForeignKey("sentry.Incident", db_constraint=False)
-
-    class Meta:
-        app_label = "sentry"
-        db_table = "sentry_incidentgroup"
-        unique_together = (("group", "incident"),)
-
-
 class IncidentSeen(Model):
     __core__ = False
 
@@ -173,10 +161,7 @@ class Incident(Model):
         default=IncidentStatusMethod.RULE_TRIGGERED.value
     )
     type = models.PositiveSmallIntegerField()
-    aggregation = models.PositiveSmallIntegerField(default=QueryAggregations.TOTAL.value, null=True)
     title = models.TextField()
-    # Query used to fetch events related to an incident
-    query = models.TextField(null=True)
     # When we suspect the incident actually started
     date_started = models.DateTimeField(default=timezone.now)
     # When we actually detected the incident
diff --git a/src/sentry/migrations/0079_incidents_remove_query_field_state.py b/src/sentry/migrations/0079_incidents_remove_query_field_state.py
new file mode 100644
index 0000000000..e2fb685096
--- /dev/null
+++ b/src/sentry/migrations/0079_incidents_remove_query_field_state.py
@@ -0,0 +1,39 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.29 on 2020-05-20 23:40
+from __future__ import unicode_literals
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    # This flag is used to decide whether to run this migration in a transaction or not.
+    # By default we prefer to run in a transaction, but for migrations where you want
+    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
+    # want to create an index concurrently when adding one to an existing table.
+    atomic = True
+
+    dependencies = [("sentry", "0078_incident_field_updates")]
+
+    operations = [
+        migrations.SeparateDatabaseAndState(
+            state_operations=[
+                migrations.AlterUniqueTogether(name="incidentgroup", unique_together=set([])),
+                migrations.RemoveField(model_name="incidentgroup", name="group"),
+                migrations.RemoveField(model_name="incidentgroup", name="incident"),
+                migrations.RemoveField(model_name="incident", name="aggregation"),
+                migrations.RemoveField(model_name="incident", name="query"),
+                migrations.DeleteModel(name="IncidentGroup"),
+            ]
+        )
+    ]
diff --git a/tests/sentry/incidents/test_models.py b/tests/sentry/incidents/test_models.py
index 4b82ff1af1..7d4e4872c9 100644
--- a/tests/sentry/incidents/test_models.py
+++ b/tests/sentry/incidents/test_models.py
@@ -280,24 +280,20 @@ class IncidentTriggerClearCacheTest(TestCase):
 class IncidentCreationTest(TestCase):
     def test_simple(self):
         title = "hello"
-        query = "goodbye"
         alert_rule = self.create_alert_rule()
         incident = Incident.objects.create(
             self.organization,
             title=title,
-            query=query,
             type=IncidentType.ALERT_TRIGGERED.value,
             alert_rule=alert_rule,
         )
         assert incident.identifier == 1
         assert incident.title == title
-        assert incident.query == query
 
         # Check identifier correctly increments
         incident = Incident.objects.create(
             self.organization,
             title=title,
-            query=query,
             type=IncidentType.ALERT_TRIGGERED.value,
             alert_rule=alert_rule,
         )
@@ -319,7 +315,6 @@ class IncidentCreationTest(TestCase):
                         self.organization,
                         status=IncidentStatus.OPEN.value,
                         title="Conflicting Incident",
-                        query="Uh oh",
                         type=IncidentType.ALERT_TRIGGERED.value,
                         alert_rule=alert_rule,
                     )
@@ -342,7 +337,6 @@ class IncidentCreationTest(TestCase):
                 alert_rule=alert_rule,
                 status=IncidentStatus.OPEN.value,
                 title="hi",
-                query="bye",
                 type=IncidentType.ALERT_TRIGGERED.value,
             )
             # We should have 3 calls - one for initial create, one for conflict,
diff --git a/tests/sentry/incidents/test_receivers.py b/tests/sentry/incidents/test_receivers.py
index 209179af89..e2d9b05789 100644
--- a/tests/sentry/incidents/test_receivers.py
+++ b/tests/sentry/incidents/test_receivers.py
@@ -50,8 +50,6 @@ class PreSaveIncidentTriggerTest(TestCase):
             status=IncidentStatus.WARNING.value,
             type=2,
             title="a custom incident title",
-            query="event.type:error",
-            aggregation=0,
             date_started=datetime.utcnow().replace(tzinfo=pytz.utc),
             date_detected=datetime.utcnow().replace(tzinfo=pytz.utc),
             alert_rule=alert_rule,
