commit 2f694261b201bb0039de6526872b40d0b1d1b57a
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Mar 29 11:03:57 2016 -0700

    Cache the jsonencoder instance we need inside of riak.backend
    
    This gives us a performance boost because a new instance of JSONEncoder
    is created on each call otherwise. Internally to simplejson, it
    maintains a _default_encoder that it'll reuse if you pass no kwargs.
    Otherwise, it'll create a new one each time, so we wanna bypass that and
    just explicitly use our own since the kwargs will never change.

diff --git a/src/sentry/nodestore/riak/backend.py b/src/sentry/nodestore/riak/backend.py
index aad7d9e1e3..c10f2aefdd 100644
--- a/src/sentry/nodestore/riak/backend.py
+++ b/src/sentry/nodestore/riak/backend.py
@@ -10,12 +10,27 @@ from __future__ import absolute_import
 
 import six
 
-import simplejson as json
+from simplejson import JSONEncoder, _default_decoder
 
 from sentry.nodestore.base import NodeStorage
 from .client import RiakClient
 
 
+# Cache an instance of the encoder we want to use
+json_dumps = JSONEncoder(
+    separators=(',', ':'),
+    skipkeys=False,
+    ensure_ascii=True,
+    check_circular=True,
+    allow_nan=True,
+    indent=None,
+    encoding='utf-8',
+    default=None,
+).encode
+
+json_loads = _default_decoder.decode
+
+
 class RiakNodeStorage(NodeStorage):
     """
     A Riak-based backend for storing node data.
@@ -43,7 +58,7 @@ class RiakNodeStorage(NodeStorage):
         )
 
     def set(self, id, data):
-        self.conn.put(self.bucket, id, json.dumps(data, separators=(',', ':')),
+        self.conn.put(self.bucket, id, json_dumps(data),
                       returnbody='false')
 
     def delete(self, id):
@@ -53,7 +68,7 @@ class RiakNodeStorage(NodeStorage):
         rv = self.conn.get(self.bucket, id, r=1)
         if rv.status != 200:
             return None
-        return json.loads(rv.data)
+        return json_loads(rv.data)
 
     def get_multi(self, id_list):
         # shortcut for just one id since this is a common
@@ -70,7 +85,7 @@ class RiakNodeStorage(NodeStorage):
             if value.status != 200:
                 results[key] = None
             else:
-                results[key] = json.loads(value.data)
+                results[key] = json_loads(value.data)
         return results
 
     def cleanup(self, cutoff_timestamp):
