commit 3b5490df3b37ce20a3d01ae3b7c1114ee1e00c3f
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon May 4 07:49:41 2020 -0700

    feat: Add {Email,Char}Field types backed by text column

diff --git a/src/sentry/db/models/fields/__init__.py b/src/sentry/db/models/fields/__init__.py
index 93a11232b5..b614f96700 100644
--- a/src/sentry/db/models/fields/__init__.py
+++ b/src/sentry/db/models/fields/__init__.py
@@ -5,8 +5,9 @@ from .bounded import *  # NOQA
 from .citext import *  # NOQA
 from .encrypted import *  # NOQA
 from .foreignkey import *  # NOQA
-from .jsonfield import *  # NOQA
 from .gzippeddict import *  # NOQA
+from .jsonfield import *  # NOQA
 from .node import *  # NOQA
-from .uuid import *  # NOQA
 from .onetoone import *  # NOQA
+from .text import *  # NOQA
+from .uuid import *  # NOQA
diff --git a/src/sentry/db/models/fields/text.py b/src/sentry/db/models/fields/text.py
new file mode 100644
index 0000000000..e4eafd670f
--- /dev/null
+++ b/src/sentry/db/models/fields/text.py
@@ -0,0 +1,33 @@
+"""
+Traditional Django model fields, except their type is
+explicitly `text` as opposed to `varchar`. All other
+validations and behaviors are identical.
+
+The reason this exists is because in Postgres, `text`
+and `varchar` are nearly identical. The issue is when
+picking a CharField and needing to size up the length
+needing a database migration. Typically the database
+validation isn't strictly required, so we can use
+`text` type instead to only enforce the length in
+python to allow us to size up the lengths without any
+migrations.
+"""
+
+from __future__ import absolute_import
+
+from django.db import models
+
+__all__ = ("CharField", "EmailField")
+
+
+class TextType(object):
+    def db_type(self, connection):
+        return "text"
+
+
+class CharField(TextType, models.CharField):
+    pass
+
+
+class EmailField(TextType, models.EmailField):
+    pass
