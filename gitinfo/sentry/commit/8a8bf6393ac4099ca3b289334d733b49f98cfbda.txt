commit 8a8bf6393ac4099ca3b289334d733b49f98cfbda
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Jun 22 01:45:38 2016 +0200

    Split contexts

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/contexts.jsx b/src/sentry/static/sentry/app/components/events/interfaces/contexts.jsx
index c39284c2ea..02c93da06d 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/contexts.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/contexts.jsx
@@ -1,144 +1,14 @@
 import React from 'react';
-import _ from 'underscore';
 
 import GroupEventDataSection from '../eventDataSection';
 import PropTypes from '../../../proptypes';
-import KeyValueList from './keyValueList';
-import {defined} from '../../../utils';
 
 
-const ContextBlock = React.createClass({
-  propTypes: {
-    alias: React.PropTypes.string.isRequired,
-    title: React.PropTypes.string,
-    data: React.PropTypes.object.isRequired,
-    knownData: React.PropTypes.object,
-  },
-
-  render() {
-    let data = [];
-    let className = `context-block context-block-${this.props.data.type}`;
-    let title = this.props.title || this.props.data.title;
-    let alias = null;
-
-    if (!title) {
-      title = this.props.alias;
-    } else {
-      alias = (
-        <small>{' ('}{this.props.alias})</small>
-      );
-    }
-
-    (this.props.knownData || []).forEach(([key, value]) => {
-      if (defined(value)) {
-        data.push([key, value]);
-      }
-    });
-
-    let extraData = [];
-    for (let key in this.props.data) {
-      if (key !== 'type') {
-        extraData.push([key, this.props.data[key]]);
-      }
-    }
-
-    if (extraData.length > 0) {
-      data = data.concat(_.sortBy(extraData, (key, value) => key));
-    }
-
-    return (
-      <div className={className}>
-        <h4>{title}{alias}</h4>
-        <KeyValueList data={data} isSorted={false} />
-      </div>
-    );
-  }
-});
-
-
-const DefaultContextType = React.createClass({
-  propTypes: {
-    alias: React.PropTypes.string.isRequired,
-    data: React.PropTypes.object.isRequired,
-  },
-
-  render() {
-    return (
-      <ContextBlock data={this.props.data} alias={this.props.alias} />
-    );
-  }
-});
-
-const DeviceContextType = React.createClass({
-  propTypes: {
-    alias: React.PropTypes.string.isRequired,
-    data: React.PropTypes.object.isRequired,
-  },
-
-  render() {
-    let {name, model, model_id, arch, ...data} = this.props.data;
-    return (
-      <ContextBlock
-        data={data}
-        knownData={[
-          ['Name', name],
-          ['Model', model + (model_id ? ` (${model_id})` : '')],
-          ['Architecture', arch]
-        ]}
-        alias={this.props.alias}
-        title="Device" />
-    );
-  }
-});
-
-const OsContextType = React.createClass({
-  propTypes: {
-    alias: React.PropTypes.string.isRequired,
-    data: React.PropTypes.object.isRequired,
-  },
-
-  render() {
-    let {name, version, build, kernel_version, ...data} = this.props.data;
-    return (
-      <ContextBlock
-        data={data}
-        knownData={[
-          ['Name', name],
-          ['Version', version + (build ? ` (${build})` : '')],
-          ['Kernel Version', kernel_version],
-        ]}
-        alias={this.props.alias}
-        title="Operating System" />
-    );
-  }
-});
-
-const RuntimeContextType = React.createClass({
-  propTypes: {
-    alias: React.PropTypes.string.isRequired,
-    data: React.PropTypes.object.isRequired,
-  },
-
-  render() {
-    let {name, version, build, ...data} = this.props.data;
-    return (
-      <ContextBlock
-        data={data}
-        knownData={[
-          ['Name', name],
-          ['Version', version + (build ? ` (${build})` : '')],
-        ]}
-        alias={this.props.alias}
-        title="Runtime" />
-    );
-  }
-});
-
 const CONTEXT_TYPES = {
-  'default': DefaultContextType,
-  'device': DeviceContextType,
-  'os': OsContextType,
-  'runtime': RuntimeContextType,
+  'default': require('./contexts/default'),
+  'device': require('./contexts/device'),
+  'os': require('./contexts/os'),
+  'runtime': require('./contexts/runtime'),
 };
 
 
@@ -160,7 +30,7 @@ const ContextsInterface = React.createClass({
     let rv = [];
     for (let key in this.props.data) {
       let value = this.props.data[key];
-      let Component = CONTEXT_TYPES[value.type] || DefaultContextType;
+      let Component = CONTEXT_TYPES[value.type] || CONTEXT_TYPES.default;
       rv.push(
         <Component key={key} alias={key} data={value}/>
       );
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/contexts/contextBlock.jsx b/src/sentry/static/sentry/app/components/events/interfaces/contexts/contextBlock.jsx
new file mode 100644
index 0000000000..cbd7834f2d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/contexts/contextBlock.jsx
@@ -0,0 +1,56 @@
+import React from 'react';
+import _ from 'underscore';
+
+import {defined} from '../../../../utils';
+import KeyValueList from '../keyValueList';
+
+
+const ContextBlock = React.createClass({
+  propTypes: {
+    alias: React.PropTypes.string.isRequired,
+    title: React.PropTypes.string,
+    data: React.PropTypes.object.isRequired,
+    knownData: React.PropTypes.array,
+  },
+
+  render() {
+    let data = [];
+    let className = `context-block context-block-${this.props.data.type}`;
+    let title = this.props.title || this.props.data.title;
+    let alias = null;
+
+    if (!title) {
+      title = this.props.alias;
+    } else {
+      alias = (
+        <small>{' ('}{this.props.alias})</small>
+      );
+    }
+
+    (this.props.knownData || []).forEach(([key, value]) => {
+      if (defined(value)) {
+        data.push([key, value]);
+      }
+    });
+
+    let extraData = [];
+    for (let key in this.props.data) {
+      if (key !== 'type') {
+        extraData.push([key, this.props.data[key]]);
+      }
+    }
+
+    if (extraData.length > 0) {
+      data = data.concat(_.sortBy(extraData, (key, value) => key));
+    }
+
+    return (
+      <div className={className}>
+        <h4>{title}{alias}</h4>
+        <KeyValueList data={data} isSorted={false} />
+      </div>
+    );
+  }
+});
+
+export default ContextBlock;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/contexts/default.jsx b/src/sentry/static/sentry/app/components/events/interfaces/contexts/default.jsx
new file mode 100644
index 0000000000..40798f5f22
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/contexts/default.jsx
@@ -0,0 +1,18 @@
+import React from 'react';
+
+import ContextBlock from './contextBlock';
+
+const DefaultContextType = React.createClass({
+  propTypes: {
+    alias: React.PropTypes.string.isRequired,
+    data: React.PropTypes.object.isRequired,
+  },
+
+  render() {
+    return (
+      <ContextBlock data={this.props.data} alias={this.props.alias} />
+    );
+  }
+});
+
+export default DefaultContextType;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/contexts/device.jsx b/src/sentry/static/sentry/app/components/events/interfaces/contexts/device.jsx
new file mode 100644
index 0000000000..009cb6ebac
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/contexts/device.jsx
@@ -0,0 +1,27 @@
+import React from 'react';
+
+import ContextBlock from './contextBlock';
+
+const DeviceContextType = React.createClass({
+  propTypes: {
+    alias: React.PropTypes.string.isRequired,
+    data: React.PropTypes.object.isRequired,
+  },
+
+  render() {
+    let {name, model, model_id, arch, ...data} = this.props.data;
+    return (
+      <ContextBlock
+        data={data}
+        knownData={[
+          ['Name', name],
+          ['Model', model + (model_id ? ` (${model_id})` : '')],
+          ['Architecture', arch]
+        ]}
+        alias={this.props.alias}
+        title="Device" />
+    );
+  }
+});
+
+export default DeviceContextType;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/contexts/os.jsx b/src/sentry/static/sentry/app/components/events/interfaces/contexts/os.jsx
new file mode 100644
index 0000000000..18a74fb28e
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/contexts/os.jsx
@@ -0,0 +1,27 @@
+import React from 'react';
+
+import ContextBlock from './contextBlock';
+
+const OsContextType = React.createClass({
+  propTypes: {
+    alias: React.PropTypes.string.isRequired,
+    data: React.PropTypes.object.isRequired,
+  },
+
+  render() {
+    let {name, version, build, kernel_version, ...data} = this.props.data;
+    return (
+      <ContextBlock
+        data={data}
+        knownData={[
+          ['Name', name],
+          ['Version', version + (build ? ` (${build})` : '')],
+          ['Kernel Version', kernel_version],
+        ]}
+        alias={this.props.alias}
+        title="Operating System" />
+    );
+  }
+});
+
+export default OsContextType;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/contexts/runtime.jsx b/src/sentry/static/sentry/app/components/events/interfaces/contexts/runtime.jsx
new file mode 100644
index 0000000000..98da504f45
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/contexts/runtime.jsx
@@ -0,0 +1,26 @@
+import React from 'react';
+
+import ContextBlock from './contextBlock';
+
+const RuntimeContextType = React.createClass({
+  propTypes: {
+    alias: React.PropTypes.string.isRequired,
+    data: React.PropTypes.object.isRequired,
+  },
+
+  render() {
+    let {name, version, build, ...data} = this.props.data;
+    return (
+      <ContextBlock
+        data={data}
+        knownData={[
+          ['Name', name],
+          ['Version', version + (build ? ` (${build})` : '')],
+        ]}
+        alias={this.props.alias}
+        title="Runtime" />
+    );
+  }
+});
+
+export default RuntimeContextType;
