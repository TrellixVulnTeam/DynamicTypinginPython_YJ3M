commit 60534b15827cc4fc4e78cfd7287ba37e7dcac071
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Jul 19 10:52:32 2018 -0700

    fix(discover): Fix aliases for tag columns (#9095)
    
    We shouldn't use square brackets for any aggregation aliases, converts
    these to underscores. This was previously done for uniq, this PR adds
    this conversion step to TopK and avg as well.

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
index 3a3ba54d25..df3fc64c03 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
@@ -68,6 +68,18 @@ export function getInternal(external) {
   return func;
 }
 
+/**
+* Returns an alias for a given column name, which is either just the column name
+* or a string with an underscore instead of square brackets for tags
+*
+* @param {String} columnName Name of column
+* @return {String} Alias
+*/
+function getAlias(columnName) {
+  const tagMatch = columnName.match(/^tags\[(.+)]$/);
+  return tagMatch ? `tags_${tagMatch[1]}` : columnName;
+}
+
 /**
 * Converts aggregation internal string format to external Snuba representation
 *
@@ -85,15 +97,13 @@ export function getExternal(internal) {
 
   if (internal.match(uniqRegex)) {
     const column = internal.match(uniqRegex)[1];
-    const tagMatch = column.match(/^tags\[(.+)]$/);
-    const alias = tagMatch ? `tags_${tagMatch[1]}` : column;
 
-    return ['uniq', column, `uniq_${alias}`];
+    return ['uniq', column, `uniq_${getAlias(column)}`];
   }
 
   if (internal.match(avgRegex)) {
     const column = internal.match(avgRegex)[1];
-    return ['avg', column, `avg_${column}`];
+    return ['avg', column, `avg_${getAlias(column)}`];
   }
 
   const topKMatch = internal.match(topKRegex);
@@ -101,7 +111,7 @@ export function getExternal(internal) {
     return [
       `topK(${parseInt(topKMatch[1], 10)})`,
       topKMatch[2],
-      `topK_${topKMatch[1]}_${topKMatch[2]}`,
+      `topK_${topKMatch[1]}_${getAlias(topKMatch[2])}`,
     ];
   }
 
diff --git a/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
index d4a309441e..70b38ba996 100644
--- a/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
@@ -23,6 +23,10 @@ const aggregationList = [
     internal: 'avg(retention_days)',
     external: ['avg', 'retention_days', 'avg_retention_days'],
   },
+  {
+    internal: 'uniq(tags[server_name])',
+    external: ['uniq', 'tags[server_name]', 'uniq_tags_server_name'],
+  },
 ];
 
 describe('Aggregations', function() {
