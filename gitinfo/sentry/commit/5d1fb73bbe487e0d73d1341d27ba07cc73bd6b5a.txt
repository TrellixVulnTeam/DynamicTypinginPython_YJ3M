commit 5d1fb73bbe487e0d73d1341d27ba07cc73bd6b5a
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Fri Feb 10 14:47:30 2017 +0100

    Add checkbox to toggle reporcessing

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index e74162fbae..4e4c6e09a9 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -144,6 +144,7 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             'sentry:csp_ignored_sources_defaults': bool(project.get_option('sentry:csp_ignored_sources_defaults', True)),
             'sentry:csp_ignored_sources': '\n'.join(project.get_option('sentry:csp_ignored_sources', []) or []),
             'sentry:default_environment': project.get_option('sentry:default_environment'),
+            'sentry:reprocessing_active': bool(project.get_option('sentry:reprocessing_active', True)),
             'feedback:branding': project.get_option('feedback:branding', '1') == '1',
         }
         data['plugins'] = serialize([
@@ -284,6 +285,8 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                     clean_newline_inputs(options['sentry:csp_ignored_sources']))
             if 'feedback:branding' in options:
                 project.update_option('feedback:branding', '1' if options['feedback:branding'] else '0')
+            if 'sentry:reprocessing_active' in options:
+                project.update_option('sentry:reprocessing_active', bool(options['sentry:reprocessing_active']))
 
             self.create_audit_entry(
                 request=request,
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 40217e8bff..ea3d173817 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -437,9 +437,17 @@ class NativeStacktraceProcessor(StacktraceProcessor):
             if not symbolicated_frames:
                 return None, [raw_frame], []
         except SymbolicationFailed as e:
+            project = Project.objects.get_from_cache(
+                id=self.data.get('project'),
+            )
+            reprocessing_active = True
+            if project:
+                reprocessing_active = bool(
+                    project.get_option('sentry:reprocessing_active', True)
+                )
             # User fixable but fatal errors are reported as processing
-            # issues.
-            if e.is_user_fixable and e.is_fatal:
+            # issues but only if the feature is activated.
+            if reprocessing_active and e.is_user_fixable and e.is_fatal:
                 report_processing_issue(self.data,
                     scope='native',
                     object='dsym:%s' % e.image_uuid,
diff --git a/src/sentry/static/sentry/app/components/forms/booleanField.jsx b/src/sentry/static/sentry/app/components/forms/booleanField.jsx
index 878c8a839e..a185e41d15 100644
--- a/src/sentry/static/sentry/app/components/forms/booleanField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/booleanField.jsx
@@ -5,6 +5,13 @@ import {defined} from '../../utils';
 import InputField from './inputField';
 
 export default class BooleanField extends InputField {
+
+  componentWillReceiveProps(nextProps) {
+    this.setState({
+      value: this.valueFromProps(nextProps)
+    });
+  }
+
   valueFromProps(props) {
     let value = super.valueFromProps(props);
     return value ? true : false;
@@ -24,11 +31,11 @@ export default class BooleanField extends InputField {
           type={this.getType()}
           onChange={this.onChange.bind(this)}
           disabled={this.props.disabled}
-          defaultChecked={this.state.value} />
+          defaultChecked={this.state.value}
+          checked={this.state.value} />
     );
   }
 
-
   render() {
     let className = this.getClassName();
     if (this.props.error) {
diff --git a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
index 82ece7d6f4..1f406e8adf 100644
--- a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
+++ b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
@@ -5,6 +5,7 @@ import TimeSince from '../components/timeSince';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import IndicatorStore from '../stores/indicatorStore';
+import {FormState, BooleanField} from '../components/forms';
 import {t, tn} from '../locale';
 
 const MESSAGES = {
@@ -33,8 +34,10 @@ const ProjectProcessingIssues = React.createClass({
 
   getInitialState() {
     return {
+      formData: {},
       loading: true,
       reprocessing: false,
+      expected: 2,
       error: false,
       processingIssues: null,
     };
@@ -44,21 +47,53 @@ const ProjectProcessingIssues = React.createClass({
     this.fetchData();
   },
 
+  onFieldChange(name, value) {
+    let formData = this.state.formData;
+    formData[name] = value;
+    this.setState({
+      formData: formData,
+    });
+  },
+
   fetchData() {
     let {orgId, projectId} = this.props.params;
+
+    this.api.request(`/projects/${orgId}/${projectId}/`, {
+      success: (data, _, jqXHR) => {
+        let expected = this.state.expected - 1;
+        this.setState({
+          expected: expected,
+          loading: expected > 0,
+          formData: data.options,
+        });
+      },
+      error: () => {
+        let expected = this.state.expected - 1;
+        this.setState({
+          expected: expected,
+          error: true,
+          loading: expected > 0
+        });
+      }
+    });
+
     this.api.request(`/projects/${orgId}/${projectId}/processingissues/?detailed=1`, {
       success: (data, _, jqXHR) => {
+        let expected = this.state.expected - 1;
         this.setState({
+          expected: expected,
           error: false,
-          loading: false,
+          loading: expected > 0,
           processingIssues: data,
           pageLinks: jqXHR.getResponseHeader('Link')
         });
       },
       error: () => {
+        let expected = this.state.expected - 1;
         this.setState({
+          expected: expected,
           error: true,
-          loading: false
+          loading: expected > 0
         });
       }
     });
@@ -73,18 +108,16 @@ const ProjectProcessingIssues = React.createClass({
     this.api.request(`/projects/${orgId}/${projectId}/reprocessing/`, {
       method: 'POST',
       success: (data, _, jqXHR) => {
-        setTimeout(() => {
-          this.fetchData();
-          IndicatorStore.remove(loadingIndicator);
-          this.setState({
-            reprocessing: false
-          });
-        }, 1000);
+        this.fetchData();
+        this.setState({
+          reprocessing: false
+        });
       },
       error: () => {
         this.setState({
           reprocessing: false
         });
+      }, complete: () => {
         IndicatorStore.remove(loadingIndicator);
       }
     });
@@ -216,6 +249,77 @@ const ProjectProcessingIssues = React.createClass({
     );
   },
 
+  renderReprocessingCheckbox() {
+    let isSaving = this.state.formState === FormState.SAVING;
+    let errors = this.state.errors;
+    return (
+      <div className="box">
+        <div className="box-header">
+          <h3>{t('Settings')}</h3>
+        </div>
+        <div className="box-content with-padding">
+          <form onSubmit={this.onSubmit} className="form-stacked">
+            {this.state.state === FormState.ERROR &&
+              <div className="alert alert-error alert-block">
+                {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
+              </div>
+            }
+            <fieldset>
+              <BooleanField
+                key="reprocessing-active"
+                name="reprocessing-active"
+                label={t('Reprocessing active')}
+                help={t(`If you are having issues with the reprocessing feature
+                  you can turn it off here. If you save the changes all Issues
+                  will be deleted and the Events will be processed. Keep in mind
+                  that these Events will probably show incomplete stacktraces.
+                  Everything will be fine again, we promise ;)`)}
+                value={this.state.formData['sentry:reprocessing_active']}
+                error={errors ? errors['sentry:reprocessing_active'] : ''}
+                onChange={this.onFieldChange.bind(this, 'sentry:reprocessing_active')} />
+            </fieldset>
+            <fieldset className="form-actions">
+              <button type="submit" className="btn btn-primary"
+                      disabled={isSaving}>{t('Save Changes')}</button>
+            </fieldset>
+          </form>
+        </div>
+      </div>
+    );
+  },
+
+  onSubmit(e) {
+    e.preventDefault();
+    if (this.state.formState === FormState.SAVING) {
+      return;
+    }
+    this.setState({
+      state: FormState.SAVING,
+    }, () => {
+      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+      let {orgId, projectId} = this.props.params;
+      this.api.request(`/projects/${orgId}/${projectId}/`, {
+        method: 'PUT',
+        data: {options: this.state.formData},
+        success: (data) => {
+          this.setState({
+            state: FormState.READY,
+            errors: {},
+          });
+        },
+        error: (error) => {
+          this.setState({
+            state: FormState.ERROR,
+            errors: error.responseJSON,
+          });
+        },
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
+        }
+      });
+    });
+  },
+
   render() {
     return (
       <div>
@@ -229,6 +333,7 @@ const ProjectProcessingIssues = React.createClass({
         `)}</p>
         {this.renderDebugTable()}
         {this.renderResolveButton()}
+        {this.renderReprocessingCheckbox()}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index 2f6b0c4ba8..7dc2d3f0ee 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -100,7 +100,7 @@ const ProjectSettings = React.createClass({
             <ListLink className="badged" to={`/${orgId}/${projectId}/settings/processing-issues/`}>
               {t('Processing Issues')}
               {processingIssues > 0 &&
-                <Badge text={processingIssues > 99 ? '99+' : processingIssues} isNew={true} />
+                <Badge text={processingIssues > 99 ? '99+' : processingIssues + ''} isNew={true} />
               }
             </ListLink>
           </ul>
