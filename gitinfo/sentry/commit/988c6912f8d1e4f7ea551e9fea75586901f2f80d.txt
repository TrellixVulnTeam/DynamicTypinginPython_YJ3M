commit 988c6912f8d1e4f7ea551e9fea75586901f2f80d
Author: Danny Lee <leedongwei@gmail.com>
Date:   Mon Sep 23 19:30:46 2019 -0700

    ref(discover-v2): Improve state changes during create/update
    
    - Move Table into a folder within eventsV2
    - Replace api.request with api.requestPromise
    - Use EventView instead of Location

diff --git a/src/sentry/static/sentry/app/components/gridEditable/types.tsx b/src/sentry/static/sentry/app/components/gridEditable/types.tsx
index 9665e2cb55..d3e204fad3 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/types.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/types.tsx
@@ -18,5 +18,5 @@ export type GridColumnHeader<K = ObjectKey> = GridColumn<K> & {
 
 export type GridColumnOrder<K = ObjectKey> = GridColumnHeader<K>;
 export type GridColumnSortBy<K = ObjectKey> = GridColumn<K> & {
-  order: -1 | 1;
+  order: 'desc' | 'asc';
 };
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
index 48e2d85720..c9b811f9d8 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
@@ -1,23 +1,22 @@
-export type ColumnValueType = 'numeric' | 'string' | 'unknown';
+export type ColumnValueType =
+  | '*' // Matches to everything
+  | 'string'
+  | 'number'
+  | 'duration'
+  | 'timestamp'
+  | 'never'; // Matches to nothing
 
-// todo(leedongwei): Find the correct types
+// Refer to src/sentry/utils/snuba.py
 export const AGGREGATIONS = {
-  latest_event: {
-    type: 'string',
-    isSortable: true,
-  },
-  last_seen: {
-    type: 'string',
-    isSortable: true,
-  },
   count: {
-    type: 'numeric',
+    type: '*',
     isSortable: true,
   },
   count_unique: {
-    type: 'numeric',
+    type: '*',
     isSortable: true,
   },
+  /*
   rpm: {
     type: 'numeric',
     isSortable: true,
@@ -26,68 +25,106 @@ export const AGGREGATIONS = {
     type: 'numeric',
     isSortable: true,
   },
-  avg: {
-    type: 'numeric',
-    isSortable: true,
-  },
+  */
   min: {
-    type: 'numeric',
+    type: ['timestamp', 'duration'],
     isSortable: true,
   },
   max: {
-    type: 'numeric',
+    type: ['timestamp', 'duration'],
     isSortable: true,
   },
+  /*
   sum: {
-    type: 'numeric',
+    type: 'duration',
+    isSortable: true,
+  },
+  avg: {
+    type: 'duration',
     isSortable: true,
   },
   cidr: {
-    type: 'unknown',
+    type: 'string',
     isSortable: true,
   },
+  */
 };
 export type Aggregation = keyof typeof AGGREGATIONS | '';
 
-// todo(leedongwei): Find the correct types
+/**
+ * Refer to src/sentry/utils/snuba.py, search for SENTRY_SNUBA_MAP
+ */
 export const FIELDS = {
+  title: 'string',
   id: 'string',
+
+  project: 'name',
+  environment: 'string',
+  release: 'string',
+  'issue.id': 'string',
+
   message: 'string',
-  title: 'string',
   location: 'string',
   culprit: 'string',
-  issue: 'string',
-  timestamp: 'string',
-  type: 'string',
-  release: 'string',
-  environment: 'string',
+  timestamp: 'timestamp',
+  time: 'timestamp',
+  transaction: 'string',
+
+  'event.type': 'string',
+  last_seen: 'never',
+  latest_event: 'never',
+
+  // user
+  user: 'string',
+  'user.id': 'string',
+  'user.email': 'string',
+  'user.username': 'string',
+  'user.ip': 'string',
+  sdk: 'string',
   'sdk.name': 'string',
   'sdk.version': 'string',
-  'device.name': 'numeric',
-  'device.brand': 'numeric',
-  'device.locale': 'numeric',
-  'device.model_id': 'numeric',
-  'device.arch': 'numeric',
-  'device.battery_level': 'string',
+  http: 'string',
+  'http.method': 'string',
+  'http.url': 'string',
+  os: 'string',
+  'os.build': 'string',
+  'os.kernel_version': 'string',
+  device: 'string',
+  'device.name': 'string',
+  'device.brand': 'string',
+  'device.locale': 'string',
+  'device.uuid': 'string',
+  'device.model_id': 'string',
+  'device.arch': 'string',
+  'device.battery_level': 'number',
   'device.orientation': 'string',
-  'device.simulator': 'string',
-  'device.online': 'string',
-  'device.charging': 'string',
-  'geo.country_code': 'numeric',
-  'geo.region': 'numeric',
-  'geo.city': 'numeric',
+  'device.simulator': 'boolean',
+  'device.online': 'boolean',
+  'device.charging': 'boolean',
+  geo: 'string',
+  'geo.country_code': 'string',
+  'geo.region': 'string',
+  'geo.city': 'string',
+  error: 'string',
   'error.type': 'string',
   'error.value': 'string',
-  'error.handled': 'string',
   'error.mechanism': 'string',
+  'error.handled': 'boolean',
+  stack: 'string',
   'stack.abs_path': 'string',
   'stack.filename': 'string',
   'stack.package': 'string',
   'stack.module': 'string',
   'stack.function': 'string',
-  'stack.in_app': 'string',
+  'stack.in_app': 'boolean',
+  'stack.colno': 'number',
+  'stack.lineno': 'number',
+  'stack.stack_level': 'string',
+  tags: 'string',
+  'tags.key': 'string',
+  'tags.value': 'string',
+  contexts: 'string',
   'contexts.key': 'string',
   'contexts.value': 'string',
-  'platform.name': 'string',
 };
 export type Field = keyof typeof FIELDS | '';
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
similarity index 77%
rename from src/sentry/static/sentry/app/views/eventsV2/table.tsx
rename to src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index bf1c17307c..979822819b 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -9,10 +9,10 @@ import withApi from 'app/utils/withApi';
 
 import Pagination from 'app/components/pagination';
 
-import {DEFAULT_EVENT_VIEW_V1} from './data';
-import EventView from './eventView';
+import {DEFAULT_EVENT_VIEW_V1} from '../data';
+import EventView from '../eventView';
 import TableView from './tableView';
-import {TableData} from './tableTypes';
+import {TableData} from './types';
 
 type TableProps = {
   api: Client;
@@ -75,8 +75,13 @@ class Table extends React.PureComponent<TableProps, TableState> {
   }
 
   componentDidUpdate(prevProps) {
-    // todo(leedongwei): Ensure that checking by address is not a problem
-    if (this.props.location !== prevProps.location) {
+    if (
+      this.props.location !== prevProps.location ||
+      this.props.location.query !== prevProps.location.query ||
+      this.props.location.query.alias !== prevProps.location.query.alias ||
+      this.props.location.query.field !== prevProps.location.query.field ||
+      this.props.location.query.sort !== prevProps.location.query.sort
+    ) {
       this.fetchData();
     }
   }
@@ -87,25 +92,28 @@ class Table extends React.PureComponent<TableProps, TableState> {
 
     this.setState({isLoading: true});
 
-    this.props.api.request(url, {
-      query: this.state.eventView.getEventsAPIPayload(location),
-      success: (data, __textStatus, jqxhr) => {
+    this.props.api
+      .requestPromise(url, {
+        method: 'GET',
+        includeAllArgs: true,
+        query: this.state.eventView.getEventsAPIPayload(location),
+      })
+      .then(([data, _, jqXHR]) => {
         this.setState(prevState => {
           return {
             isLoading: false,
             error: null,
-            pageLinks: jqxhr ? jqxhr.getResponseHeader('Link') : prevState.pageLinks,
+            pageLinks: jqXHR ? jqXHR.getResponseHeader('Link') : prevState.pageLinks,
             tableData: data,
           };
         });
-      },
-      error: err => {
+      })
+      .catch(err => {
         this.setState({
           isLoading: false,
           error: err.responseJSON.detail,
         });
-      },
-    });
+      });
   };
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
new file mode 100644
index 0000000000..873015fb2b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
@@ -0,0 +1,253 @@
+import React, {ReactText} from 'react';
+import styled from 'react-emotion';
+
+import {t} from 'app/locale';
+import {Form, SelectField, TextField} from 'app/components/forms';
+import InlineSvg from 'app/components/inlineSvg';
+import space from 'app/styles/space';
+
+import {AGGREGATIONS, FIELDS, Aggregation, Field} from '../eventQueryParams';
+import {TableColumn} from './types';
+
+type ModalActions = {
+  createColumn: (column: TableColumn<ReactText>) => void;
+  updateColumn: (indexColumnOrder: number, column: TableColumn<ReactText>) => void;
+};
+
+export function renderTableModalEditColumnFactory(actions: ModalActions) {
+  return {
+    renderModalBodyWithForm: (
+      indexColumnOrder?: number,
+      column?: TableColumn<ReactText>,
+      onSuccessFromChild?: () => void,
+      onErrorFromChild?: (error?: Error) => void
+    ) => {
+      return (
+        <TableModalEditColumnBodyForm
+          indexColumnOrder={indexColumnOrder}
+          column={column}
+          actions={{
+            createColumn: actions.createColumn,
+            updateColumn: actions.updateColumn,
+            onSuccess: onSuccessFromChild,
+            onError: onErrorFromChild,
+          }}
+        />
+      );
+    },
+    renderModalFooter: () => <TableModalEditColumnFooter />,
+  };
+}
+
+export default renderTableModalEditColumnFactory;
+
+type TableModalEditColumnFormProps = {
+  indexColumnOrder?: number;
+  column?: TableColumn<ReactText>;
+
+  actions: ModalActions & {
+    onSuccess?: () => void;
+    onError?: (error?: Error) => void;
+  };
+};
+type TableModalEditColumnFormState = {
+  aggregations: Aggregation[];
+  fields: Field[];
+};
+
+class TableModalEditColumnBodyForm extends React.Component<
+  TableModalEditColumnFormProps,
+  TableModalEditColumnFormState
+> {
+  state = {
+    aggregations: filterAggregationByField(
+      this.props.column ? this.props.column.field : ''
+    ),
+    fields: filterFieldByAggregation(
+      this.props.column ? this.props.column.aggregation : ''
+    ),
+  };
+
+  onChangeAggregation = (value: Aggregation) => {
+    this.setState({
+      fields: filterFieldByAggregation(value),
+    });
+  };
+
+  onChangeField = (value: Field) => {
+    this.setState({
+      aggregations: filterAggregationByField(value),
+    });
+  };
+
+  onSubmitForm = (values: any) => {
+    const {indexColumnOrder, column} = this.props;
+    const {createColumn, updateColumn, onSuccess, onError} = this.props.actions;
+    const nextColumn: TableColumn<ReactText> = {...column, ...values};
+
+    try {
+      if (typeof indexColumnOrder === 'number' && this.props.column) {
+        updateColumn(indexColumnOrder, nextColumn);
+      } else {
+        createColumn(nextColumn);
+      }
+
+      if (onSuccess) {
+        onSuccess();
+      }
+    } catch (e) {
+      if (onError) {
+        onError(e);
+      }
+    }
+  };
+
+  render() {
+    const {column} = this.props;
+
+    return (
+      <React.Fragment>
+        <Form
+          onSubmit={v => this.onSubmitForm(v)}
+          submitLabel={column ? t('Update column') : t('Create column')}
+          initialData={{
+            aggregation: column ? column.aggregation : '',
+            field: column ? column.field : '',
+            name: column ? column.name : '',
+          }}
+        >
+          <FormRow>
+            <FormRowItemLeft>
+              <SelectField
+                name="aggregation"
+                label={t('Select')}
+                placeholder="Aggregate"
+                choices={this.state.aggregations}
+                onChange={this.onChangeAggregation}
+              />
+            </FormRowItemLeft>
+            <FormRowItemRight>
+              <SelectField
+                required={true}
+                name="field"
+                label={t('Column')}
+                placeholder="Column"
+                choices={this.state.fields}
+                onChange={this.onChangeField}
+              />
+            </FormRowItemRight>
+          </FormRow>
+          <FormRow>
+            <TextField
+              required={true}
+              name="name"
+              label={t('Column Name')}
+              placeholder="Column Name"
+            />
+          </FormRow>
+        </Form>
+      </React.Fragment>
+    );
+  }
+}
+
+// TODO(leedongwei): Check with Mimi to get the link for DiscoverV2 docs
+const TableModalEditColumnFooter = () => (
+  <FooterContent href="https://docs.sentry.io/">
+    <div>
+      <InlineSvg src="icon-docs" /> Discover Documentation
+    </div>
+    <div>
+      <InlineSvg src="icon-chevron-right" />
+    </div>
+  </FooterContent>
+);
+
+function filterAggregationByField(f?: Field): Aggregation[] {
+  if (!f || !FIELDS[f]) {
+    return Object.keys(AGGREGATIONS) as Aggregation[];
+  }
+
+  if (FIELDS[f] === 'never') {
+    return [];
+  }
+
+  return Object.keys(AGGREGATIONS).reduce(
+    (accumulator, a) => {
+      if (
+        AGGREGATIONS[a].type.includes(FIELDS[f]) ||
+        AGGREGATIONS[a].type === '*' ||
+        FIELDS[f] === '*'
+      ) {
+        accumulator.push(a as Aggregation);
+      }
+
+      return accumulator;
+    },
+    [] as Aggregation[]
+  );
+}
+
+function filterFieldByAggregation(a?: Aggregation): Field[] {
+  if (!a || !AGGREGATIONS[a]) {
+    return Object.keys(FIELDS) as Field[];
+  }
+
+  return Object.keys(FIELDS).reduce(
+    (accumulator, f) => {
+      if (!FIELDS[f] || FIELDS[f] === 'never') {
+        return accumulator;
+      }
+
+      if (
+        AGGREGATIONS[a].type.includes(FIELDS[f]) ||
+        AGGREGATIONS[a].type === '*' ||
+        FIELDS[f] === '*'
+      ) {
+        accumulator.push(f as Field);
+      }
+
+      return accumulator;
+    },
+    [] as Field[]
+  );
+}
+
+const FormRow = styled.div`
+  box-sizing: border-box;
+`;
+const FormRowItem = styled.div`
+  display: inline-block;
+  padding-right: ${space(1)};
+
+  &:last-child {
+    padding-right: 0;
+  }
+`;
+const FormRowItemLeft = styled(FormRowItem)`
+  width: 35%;
+`;
+const FormRowItemRight = styled(FormRowItem)`
+  width: 65%;
+`;
+
+const FooterContent = styled.a`
+  display: flex;
+  width: 100%;
+
+  > div {
+    display: flex;
+    align-items: center;
+  }
+
+  > div:first-child {
+    flex-grow: 1;
+
+    svg {
+      margin-right: 10px;
+    }
+  }
+  > div:last-child {
+    flex-grow: 0;
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tableView.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
similarity index 76%
rename from src/sentry/static/sentry/app/views/eventsV2/tableView.tsx
rename to src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
index 27fe7c9ee0..6d5ff0f288 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/tableView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
@@ -2,7 +2,6 @@ import React from 'react';
 import {Location} from 'history';
 import {omit} from 'lodash';
 import styled from 'react-emotion';
-import {browserHistory} from 'react-router';
 
 import {t} from 'app/locale';
 import {Organization} from 'app/types';
@@ -16,20 +15,15 @@ import Panel from 'app/components/panels/panel';
 import Placeholder from 'app/components/placeholder';
 
 import {
-  decodeColumnOrderAndColumnSortBy,
-  encodeColumnOrderAndColumnSortBy,
+  decodeColumnOrder,
+  decodeColumnSortBy,
   getFieldRenderer,
-} from './utils';
-import EventView from './eventView';
-import SortLink from './sortLink';
-import tableModalEditColumn from './tableModalEditColumn';
-import {
-  TableColumn,
-  TableColumnSort,
-  TableState,
-  TableData,
-  TableDataRow,
-} from './tableTypes';
+  setColumnStateOnLocation,
+} from '../utils';
+import EventView from '../eventView';
+import SortLink from '../sortLink';
+import renderTableModalEditColumnFactory from './tableModalEditColumn';
+import {TableColumn, TableState, TableData, TableDataRow} from './types';
 
 export type TableViewProps = {
   location: Location;
@@ -42,7 +36,7 @@ export type TableViewProps = {
   tableData: TableData | null | undefined;
 };
 export type TableViewState = TableState & {
-  hasQueryBuilder: boolean;
+  hasFlagQueryBuilder: boolean;
 };
 
 /**
@@ -63,7 +57,7 @@ class TableView extends React.Component<TableViewProps, TableViewState> {
 
     this.setState = () => {
       throw new Error(
-        'TableView: Please do not directly mutate the state of TableView. You can read the comments on TableView.addColumn for more information.'
+        'TableView: Please do not directly mutate the state of TableView. Please read the comments on TableView.createColumn for more info.'
       );
     };
   }
@@ -71,89 +65,73 @@ class TableView extends React.Component<TableViewProps, TableViewState> {
   state = {
     columnOrder: [],
     columnSortBy: [],
-    hasQueryBuilder: false,
+    hasFlagQueryBuilder: false,
   } as TableViewState;
 
   static getDerivedStateFromProps(props: TableViewProps): TableViewState {
-    const hasQueryBuilder =
-      props.organization.features.indexOf('discover-v2-query-builder') > -1;
+    const hasFlagQueryBuilder = props.organization.features.includes(
+      'discover-v2-query-builder'
+    );
+
+    // Avoid using props.location to get derived state.
+    const {eventView} = props;
 
     return {
-      hasQueryBuilder,
-      ...decodeColumnOrderAndColumnSortBy(props.location),
+      hasFlagQueryBuilder,
+      columnOrder: decodeColumnOrder({
+        field: eventView.getFieldNames(),
+        alias: eventView.getFieldTitles(),
+      }),
+      columnSortBy: decodeColumnSortBy({
+        sort: eventView.getDefaultSort(),
+      }),
     };
   }
 
   /**
-   * The state of the columns is derived from `Location.query`. There are other
-   * components mutating the state of the column (sidebar, etc) too.
-   *
-   * To make add/edit/remove tableColumns, we will update `Location.query` and
-   * the changes will be propagated downwards to all the other components.
+   * The "truth" on the state of the columns is found in `Location`,
+   * `createColumn`, `updateColumn`, `deleteColumn` and `moveColumn`.
+   * Syncing the state between `Location` and `TableView` may cause weird
+   * side-effects, as such the local state is not allowed to be mutated.
    *
-   *
-   * todo(leedongwei): 18 Sept 2019
-   * It may be a good idea to move this method somewhere else so that other
-   * components mutating the column state can use it too.
+   * State change should be done through  `setColumnStateOnLocation` which will
+   * update the `Location` object and changes are propagated downwards to child
+   * components
    */
-  _setColumnState = (
-    nextColumnOrder: TableColumn<keyof TableDataRow>[],
-    nextColumnSortBy: TableColumnSort<keyof TableDataRow>[]
-  ) => {
+  _createColumn = (nextColumn: TableColumn<keyof TableDataRow>) => {
     const {location} = this.props;
-
-    browserHistory.push({
-      ...location,
-      query: {
-        ...location.query,
-        ...encodeColumnOrderAndColumnSortBy({
-          columnOrder: nextColumnOrder,
-          columnSortBy: nextColumnSortBy,
-        }),
-      },
-    });
-  };
-
-  /**
-   * Because the "truth" on the state of the columns is found in `Location`,
-   * `addColumn`, `updateColumn`, `deleteColumn` and `moveColumn` copies some
-   * ideas from Redux / Functional Programming.
-   *
-   * It creates an entire new state and passes it to `_setColumnState`.
-   * It does not mutate the local state at all to prevent side-effects and
-   * ensure that there will always be a single source of truth.
-   */
-  _addColumn = (nextColumn: TableColumn<keyof TableDataRow>, i: number) => {
     const {columnOrder, columnSortBy} = this.state;
-    const nextColumnOrder = [...columnOrder];
+    const nextColumnOrder = [...columnOrder, nextColumn];
     const nextColumnSortBy = [...columnSortBy];
 
-    nextColumnOrder.splice(i, 0, nextColumn);
-    this._setColumnState(nextColumnOrder, nextColumnSortBy);
+    setColumnStateOnLocation(location, nextColumnOrder, nextColumnSortBy);
   };
 
   /**
-   * Please read the comment on `addColumn`
+   * Please read the comment on `createColumn`
    */
-  _updateColumn = (nextColumn: TableColumn<keyof TableDataRow>, i: number) => {
+  _updateColumn = (i: number, nextColumn: TableColumn<keyof TableDataRow>) => {
+    const {location} = this.props;
     const {columnOrder, columnSortBy} = this.state;
-    const nextColumnOrder = [...columnOrder];
-    const nextColumnSortBy = [...columnSortBy];
 
-    if (nextColumnOrder[i].key !== nextColumn.key) {
+    if (columnOrder[i].key !== nextColumn.key) {
       throw new Error(
         'TableView.updateColumn: nextColumn does not have the same key as prevColumn'
       );
     }
 
+    const nextColumnOrder = [...columnOrder];
+    const nextColumnSortBy = [...columnSortBy];
     nextColumnOrder[i] = nextColumn;
-    this._setColumnState(nextColumnOrder, nextColumnSortBy);
+
+    setColumnStateOnLocation(location, nextColumnOrder, nextColumnSortBy);
   };
 
   /**
-   * Please read the comment on `addColumn`
+   * Please read the comment on `createColumn`
    */
   _deleteColumn = (i: number) => {
+    const {location} = this.props;
     const {columnOrder, columnSortBy} = this.state;
     const nextColumnOrder = [...columnOrder];
     const nextColumnSortBy = [...columnSortBy];
@@ -168,24 +146,26 @@ class TableView extends React.Component<TableViewProps, TableViewState> {
 
     // Remove column from columnSortBy (if it is there)
     // EventView will throw an error if sorting by a column that isn't displayed
-    const j = columnSortBy.findIndex(c => c.key === deletedColumn.key);
+    const j = nextColumnSortBy.findIndex(c => c.key === deletedColumn.key);
     if (j >= 0) {
-      nextColumnSortBy.splice(i, 1);
+      nextColumnSortBy.splice(j, 1);
     }
 
-    this._setColumnState(nextColumnOrder, nextColumnSortBy);
+    setColumnStateOnLocation(location, nextColumnOrder, nextColumnSortBy);
   };
 
   /**
-   * Please read the comment on `addColumn`
+   * Please read the comment on `createColumn`
    */
   _moveColumn = (fromIndex: number, toIndex: number) => {
+    const {location} = this.props;
     const {columnOrder, columnSortBy} = this.state;
+
     const nextColumnOrder = [...columnOrder];
     const nextColumnSortBy = [...columnSortBy];
-
     nextColumnOrder.splice(toIndex, 0, nextColumnOrder.splice(fromIndex, 1)[0]);
-    this._setColumnState(nextColumnOrder, nextColumnSortBy);
+
+    setColumnStateOnLocation(location, nextColumnOrder, nextColumnSortBy);
   };
 
   _renderGridHeaderCell = (column: TableColumn<keyof TableDataRow>): React.ReactNode => {
@@ -194,7 +174,7 @@ class TableView extends React.Component<TableViewProps, TableViewState> {
       return column.name;
     }
 
-    // tood(leedongwei): Deprecate eventView and use state.columnSortBy
+    // TODO(leedongwei): Deprecate eventView and use state.columnSortBy
     const defaultSort = eventView.getDefaultSort() || eventView.fields[0].field;
 
     return (
@@ -292,7 +272,7 @@ class TableView extends React.Component<TableViewProps, TableViewState> {
       return (
         <React.Fragment key={rowIndex}>
           {fields.map((field, columnIndex) => {
-            const key = `${field}.${columnIndex}`;
+            const key = `${columnIndex}.${field}`;
             const forceLinkField = !hasLinkField && columnIndex === 0;
 
             const fieldRenderer = getFieldRenderer(field, meta, forceLinkField);
@@ -345,13 +325,19 @@ class TableView extends React.Component<TableViewProps, TableViewState> {
 
   render() {
     const {eventView, isLoading, error, tableData} = this.props;
-    const {hasQueryBuilder, columnOrder, columnSortBy} = this.state;
-    const {renderModalBody, renderModalFooter} = tableModalEditColumn;
+    const {hasFlagQueryBuilder, columnOrder, columnSortBy} = this.state;
+    const {
+      renderModalBodyWithForm,
+      renderModalFooter,
+    } = renderTableModalEditColumnFactory({
+      createColumn: this._createColumn,
+      updateColumn: this._updateColumn,
+    });
 
-    if (hasQueryBuilder) {
+    if (hasFlagQueryBuilder) {
       return (
         <GridEditable
-          isEditable={hasQueryBuilder}
+          isEditable={hasFlagQueryBuilder}
           isLoading={isLoading}
           error={error}
           data={tableData ? tableData.data : []}
@@ -362,7 +348,7 @@ class TableView extends React.Component<TableViewProps, TableViewState> {
             renderBodyCell: this._renderGridBodyCell as any,
           }}
           modalEditColumn={{
-            renderBodyWithForm: renderModalBody as any,
+            renderBodyWithForm: renderModalBodyWithForm as any,
             renderFooter: renderModalFooter,
           }}
           actions={{
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tableTypes.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/types.tsx
similarity index 88%
rename from src/sentry/static/sentry/app/views/eventsV2/tableTypes.tsx
rename to src/sentry/static/sentry/app/views/eventsV2/table/types.tsx
index 8577026943..02fd3746e7 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/tableTypes.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/types.tsx
@@ -1,7 +1,7 @@
 import {GridColumnOrder, GridColumnSortBy} from 'app/components/gridEditable';
 
-import {ColumnValueType, Aggregation, Field} from './eventQueryParams';
-import {MetaType} from './utils';
+import {ColumnValueType, Aggregation, Field} from '../eventQueryParams';
+import {MetaType} from '../utils';
 
 /**
  * It is assumed that `aggregation` and `field` have the same ColumnValueType
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tableModalEditColumn.tsx b/src/sentry/static/sentry/app/views/eventsV2/tableModalEditColumn.tsx
deleted file mode 100644
index 26a5ea5ee6..0000000000
--- a/src/sentry/static/sentry/app/views/eventsV2/tableModalEditColumn.tsx
+++ /dev/null
@@ -1,230 +0,0 @@
-import React from 'react';
-import styled from 'react-emotion';
-
-import {t} from 'app/locale';
-import {Form, SelectField, TextField} from 'app/components/forms';
-import InlineSvg from 'app/components/inlineSvg';
-import space from 'app/styles/space';
-
-import {AGGREGATIONS, FIELDS, Aggregation, Field} from './eventQueryParams';
-import {TableColumn} from './tableTypes';
-
-type ModalEditColumnFormProps = {
-  column: {
-    aggregation: Aggregation;
-    field: Field;
-    name: string;
-  };
-
-  actions: {
-    createColumn: {(): void};
-    updateColumn: {(column, indexOfColumnOrder: number): void};
-  };
-};
-type ModalEditColumnFormState = {
-  currAggregation: Aggregation;
-  currField: Field;
-  currName: string;
-  aggregations: Aggregation[];
-  fields: Field[];
-};
-
-class ModalEditColumnForm extends React.Component<
-  ModalEditColumnFormProps,
-  ModalEditColumnFormState
-> {
-  static defaultProps = {
-    column: {
-      aggregation: '',
-      field: '',
-      name: '',
-    },
-  };
-
-  state = {
-    currAggregation: this.props.column.aggregation,
-    currField: this.props.column.field,
-    currName: this.props.column.name,
-    aggregations: filterAggregationByField(this.props.column.field),
-    fields: filterFieldByAggregation(this.props.column.aggregation),
-  };
-
-  onChangeAggregation = (value: Aggregation) => {
-    if (value === this.state.currAggregation) {
-      return;
-    }
-
-    this.setState({
-      currAggregation: value,
-      fields: filterFieldByAggregation(value),
-    });
-  };
-
-  onChangeField = (value: Field) => {
-    if (value === this.state.currField) {
-      return;
-    }
-
-    this.setState({
-      currField: value,
-      aggregations: filterAggregationByField(value),
-    });
-  };
-
-  onChangeName = (value: string) => {
-    if (value === this.state.currName) {
-      return;
-    }
-
-    this.setState({
-      currName: value,
-    });
-  };
-
-  render() {
-    return (
-      <React.Fragment>
-        <Form onSubmit={values => console.log('onSubmit', values)}>
-          <FormRow>
-            <FormRowItem style={{width: '35%'}}>
-              <SelectField
-                name="aggregation"
-                label={t('Select')}
-                placeholder="Aggregate"
-                choices={this.state.aggregations}
-                onChange={this.onChangeAggregation}
-                value={this.state.currAggregation}
-              />
-            </FormRowItem>
-            <FormRowItem style={{width: '65%'}}>
-              <SelectField
-                name="field"
-                label="&nbsp;" // This sets the correct padding-top
-                placeholder="Column"
-                choices={this.state.fields}
-                onChange={this.onChangeField}
-                value={this.state.currField}
-              />
-            </FormRowItem>
-          </FormRow>
-          <TextField
-            name="name"
-            label={t('Display Name')}
-            placeholder="Column Name"
-            onChange={this.onChangeName}
-            value={this.state.currName}
-          />
-        </Form>
-
-        {/* {data && data.column ? (
-          <React.Fragment>
-            <Button priority="primary">Update</Button>
-            <Button>Delete</Button>
-          </React.Fragment>
-        ) : (
-          <Button priority="primary">Create</Button>
-        )} */}
-      </React.Fragment>
-    );
-  }
-}
-
-function renderModalBody(column?: TableColumn<React.ReactText>): React.ReactNode {
-  return (
-    <ModalEditColumnForm
-      column={column}
-      actions={
-        {
-          createColumn: () => {},
-          updateColumn: () => {},
-        } as any
-      }
-    />
-  );
-}
-
-function renderModalFooter(): React.ReactNode {
-  // todo(leedongwei): Check with Mimi to get the link for DiscoverV2 docs
-  return (
-    <FooterContent href="https://docs.sentry.io/">
-      <div>
-        <InlineSvg src="icon-docs" /> Discover Documentation
-      </div>
-      <div>
-        <InlineSvg src="icon-chevron-right" />
-      </div>
-    </FooterContent>
-  );
-}
-
-export default {
-  renderModalBody,
-  renderModalFooter,
-};
-
-function filterAggregationByField(f?: Field): Aggregation[] {
-  if (!f || !FIELDS[f]) {
-    return Object.keys(AGGREGATIONS) as Aggregation[];
-  }
-
-  return Object.keys(AGGREGATIONS).reduce(
-    (accumulator, a) => {
-      if (AGGREGATIONS[a] && FIELDS[f] && AGGREGATIONS[a].type === FIELDS[f]) {
-        accumulator.push(a as Aggregation);
-      }
-
-      return accumulator;
-    },
-    [] as Aggregation[]
-  );
-}
-
-function filterFieldByAggregation(a?: Aggregation): Field[] {
-  if (!a || !AGGREGATIONS[a]) {
-    return Object.keys(FIELDS) as Field[];
-  }
-
-  return Object.keys(FIELDS).reduce(
-    (accumulator, f) => {
-      if (FIELDS[f] && FIELDS[f] === AGGREGATIONS[a].type) {
-        accumulator.push(f as Field);
-      }
-
-      return accumulator;
-    },
-    [] as Field[]
-  );
-}
-
-const FormRow = styled.div`
-  box-sizing: border-box;
-`;
-const FormRowItem = styled.div`
-  display: inline-block;
-  padding-right: ${space(1)};
-
-  &:last-child {
-    padding-right: 0;
-  }
-`;
-
-const FooterContent = styled.a`
-  display: flex;
-  width: 100%;
-
-  > div {
-    display: flex;
-    align-items: center;
-  }
-
-  > div:first-child {
-    flex-grow: 1;
-
-    svg {
-      margin-right: 10px;
-    }
-  }
-  > div:last-child {
-    flex-grow: 0;
-  }
-`;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 105f9c166a..b655b12d9a 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -1,5 +1,6 @@
 import {partial, pick} from 'lodash';
 import {Location, Query} from 'history';
+import {browserHistory} from 'react-router';
 
 import {Client} from 'app/api';
 import {URL_PARAM} from 'app/constants/globalSelectionHeader';
@@ -21,7 +22,7 @@ import {
   FIELDS,
   ColumnValueType,
 } from './eventQueryParams';
-import {TableColumn, TableColumnSort, TableState} from './tableTypes';
+import {TableColumn, TableColumnSort, TableState} from './table/types';
 
 export type EventQuery = {
   field: Array<string>;
@@ -215,7 +216,7 @@ export function getFirstQueryString(
   return defaultValue;
 }
 
-type QueryWithColumnState =
+export type QueryWithColumnState =
   | Query
   | {
       alias: string | string[] | null | undefined;
@@ -223,42 +224,28 @@ type QueryWithColumnState =
       sort: string | string[] | null | undefined;
     };
 
-export function decodeColumnOrderAndColumnSortBy(location: Location): TableState {
-  const {query} = location;
-
-  const state = {
-    columnOrder: query ? decodeColumnOrder(query) : [],
-    columnSortBy: query ? decodeColumnSortBy(query) : [],
-  };
-
-  // Check that values in SortBy is inside Order (and remove those that aren't),
-  // to avoid causing an error on the sorting function
-  state.columnSortBy = state.columnSortBy.reduce(
-    (acc, col) => {
-      if (state.columnOrder.findIndex(c => c.key === col.key) >= 0) {
-        acc.push(col);
-      }
-
-      return acc;
-    },
-    [] as TableState['columnSortBy']
-  );
-
-  return state;
-}
-
 const TEMPLATE_TABLE_COLUMN: TableColumn<React.ReactText> = {
   key: '',
   name: '',
   aggregation: '',
   field: '',
 
-  type: 'unknown',
+  type: 'never',
   isSortable: false,
   isPrimary: false,
 };
 
-function decodeColumnOrder(query: QueryWithColumnState): TableColumn<React.ReactText>[] {
+export function decodeColumnOrderAndColumnSortBy(location: Location): TableState {
+  const {query} = location;
+  return {
+    columnOrder: query ? decodeColumnOrder(query) : [],
+    columnSortBy: query ? decodeColumnSortBy(query) : [],
+  };
+}
+
+export function decodeColumnOrder(
+  query: QueryWithColumnState
+): TableColumn<React.ReactText>[] {
   const {alias, field} = query;
   const columnsRaw: {
     aggregationField: string;
@@ -292,7 +279,7 @@ function decodeColumnOrder(query: QueryWithColumnState): TableColumn<React.React
 
     column.key = col.aggregationField;
     column.name = col.name;
-    column.type = (FIELDS[column.field] || '') as ColumnValueType;
+    column.type = (FIELDS[column.field] || 'never') as ColumnValueType;
     column.isSortable = AGGREGATIONS[column.aggregation]
       ? AGGREGATIONS[column.aggregation].isSortable
       : false;
@@ -302,7 +289,7 @@ function decodeColumnOrder(query: QueryWithColumnState): TableColumn<React.React
   });
 }
 
-function decodeColumnSortBy(
+export function decodeColumnSortBy(
   query: QueryWithColumnState
 ): TableColumnSort<React.ReactText>[] {
   const {sort} = query;
@@ -316,7 +303,7 @@ function decodeColumnSortBy(
 
     return {
       key: hasLeadingDash ? key.substring(1) : key,
-      order: hasLeadingDash ? -1 : 1,
+      order: hasLeadingDash ? 'desc' : 'asc',
     } as TableColumnSort<string>;
   });
 }
@@ -343,6 +330,36 @@ function encodeColumnField(tableState: TableState): string[] {
 
 function encodeColumnSort(tableState: TableState): string[] {
   return tableState.columnSortBy.map(col =>
-    col.order === -1 ? `-${col.key}` : `${col.key}`
+    col.order === 'desc' ? `-${col.key}` : `${col.key}`
+  );
+}
+
+/**
+ * The state of the columns is derived from `Location.query`. There are other
+ * components mutating the state of the column (sidebar, etc) too.
+ *
+ * To make add/edit/remove tableColumns, we will update `Location.query` and
+ * the changes will be propagated downwards to all the other components.
+ */
+export function setColumnStateOnLocation(
+  location: Location,
+  nextColumnOrder: TableColumn<React.ReactText>[],
+  nextColumnSortBy: TableColumnSort<React.ReactText>[]
+) {
+  // Remove a column from columnSortBy if it is not in columnOrder
+  // EventView will throw an error if sorting by a column that isn't queried
+  nextColumnSortBy = nextColumnSortBy.filter(
+    sortBy => nextColumnOrder.findIndex(order => order.key === sortBy.key) > -1
   );
+
+  browserHistory.push({
+    ...location,
+    query: {
+      ...location.query,
+      ...encodeColumnOrderAndColumnSortBy({
+        columnOrder: nextColumnOrder,
+        columnSortBy: nextColumnSortBy,
+      }),
+    },
+  });
 }
