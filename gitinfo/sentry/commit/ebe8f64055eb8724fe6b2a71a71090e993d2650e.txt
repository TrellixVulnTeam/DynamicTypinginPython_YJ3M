commit ebe8f64055eb8724fe6b2a71a71090e993d2650e
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu May 16 21:41:48 2019 +0200

    feat(grouping): Added support for max-frames to grouping enhancers (#13244)

diff --git a/src/sentry/grouping/enhancer.py b/src/sentry/grouping/enhancer.py
index 2bf88d1d42..8521356e0f 100644
--- a/src/sentry/grouping/enhancer.py
+++ b/src/sentry/grouping/enhancer.py
@@ -25,21 +25,26 @@ line = _ (comment / rule / empty) newline?
 
 rule = _ matchers actions
 
-matchers       = matcher+
-matcher        = _ matcher_type sep argument
-matcher_type   = "path" / "function" / "module" / "family" / "package" / "app"
-
-actions        = action+
-action         = _ range? flag action_name
-action_name    = "group" / "app"
-flag           = "+" / "-"
-range          = "^" / "v"
-
-comment        = ~r"#[^\r\n]*"
-
-argument       = quoted / unquoted
-quoted         = ~r'"([^"\\]*(?:\\.[^"\\]*)*)"'
-unquoted       = ~r"\S+"
+matchers         = matcher+
+matcher          = _ matcher_type sep argument
+matcher_type     = "path" / "function" / "module" / "family" / "package" / "app"
+
+actions          = action+
+action           = flag_action / var_action
+var_action       = _ var_name _ "=" _ expr
+var_name         = "max-frames"
+flag_action      = _ range? flag flag_action_name
+flag_action_name = "group" / "app"
+flag             = "+" / "-"
+range            = "^" / "v"
+expr             = int
+int              = ~r"[0-9]+"
+
+comment          = ~r"#[^\r\n]*"
+
+argument         = quoted / unquoted
+quoted           = ~r'"([^"\\]*(?:\\.[^"\\]*)*)"'
+unquoted         = ~r"\S+"
 
 sep     = ":"
 space   = " "
@@ -155,9 +160,28 @@ class Match(object):
         return cls(key, arg)
 
 
-@implements_to_string
 class Action(object):
 
+    def apply_modifications_to_frame(self, frames, idx):
+        pass
+
+    def update_frame_components_contributions(self, components, idx, rule=None):
+        pass
+
+    def modify_stack_state(self, state, rule):
+        pass
+
+    @classmethod
+    def _from_config_structure(cls, val):
+        if isinstance(val, list):
+            return VarAction(val[0], val[1])
+        flag, range = REVERSE_ACTION_FLAGS[val >> 4]
+        return FlagAction(ACTIONS[val & 0xf], flag, range)
+
+
+@implements_to_string
+class FlagAction(Action):
+
     def __init__(self, key, flag, range):
         self.key = key
         self.flag = flag
@@ -215,10 +239,43 @@ class Action(object):
                         self.flag and 'in-app' or 'out of app', rule_hint)
                 )
 
-    @classmethod
-    def _from_config_structure(cls, num):
-        flag, range = REVERSE_ACTION_FLAGS[num >> 4]
-        return cls(ACTIONS[num & 0xf], flag, range)
+
+@implements_to_string
+class VarAction(Action):
+    range = None
+
+    def __init__(self, var, value):
+        self.var = var
+        self.value = value
+
+    def __str__(self):
+        return '%s=%s' % (self.var, self.value)
+
+    def _to_config_structure(self):
+        return [self.var, self.value]
+
+    def modify_stack_state(self, state, rule):
+        state.set(self.var, self.value, rule)
+
+
+class StackState(object):
+
+    def __init__(self):
+        self.vars = {'max-frames': 0}
+        self.setters = {}
+
+    def set(self, var, value, rule=None):
+        self.vars[var] = value
+        if rule is not None:
+            self.setters[var] = rule
+
+    def get(self, var):
+        return self.vars.get(var)
+
+    def describe_var_rule(self, var):
+        rule = self.setters.get(var)
+        if rule is not None:
+            return rule.matcher_description
 
 
 class Enhancements(object):
@@ -245,12 +302,35 @@ class Enhancements(object):
                     action.apply_modifications_to_frame(frames, idx)
 
     def update_frame_components_contributions(self, components, frames, platform):
+        stack_state = StackState()
+
+        # Apply direct frame actions and update the stack state alongside
         for rule in self.iter_rules():
             for idx, (component, frame) in enumerate(izip(components, frames)):
                 actions = rule.get_matching_frame_actions(frame, platform)
                 for action in actions or ():
                     action.update_frame_components_contributions(
                         components, idx, rule=rule)
+                    action.modify_stack_state(stack_state, rule)
+
+        # Use the stack state to update frame contributions again
+        max_frames = stack_state.get('max-frames')
+        if max_frames > 0:
+            ignored = 0
+            for component in reversed(components):
+                if not component.contributes:
+                    continue
+                ignored += 1
+                if ignored <= max_frames:
+                    continue
+                hint = 'ignored because only %d %s considered' % (
+                    max_frames,
+                    'frames are' if max_frames != 1 else 'frame is',
+                )
+                description = stack_state.describe_var_rule('max-frames')
+                if description is not None:
+                    hint = '%s by grouping enhancement rule (%s)' % (hint, description)
+                component.update(hint=hint, contributes=False)
 
     def as_dict(self, with_rules=False):
         rv = {
@@ -405,11 +485,25 @@ class EnhancmentsVisitor(NodeVisitor):
     def visit_argument(self, node, children):
         return children[0]
 
+    def visit_var(self, node, children):
+        _, var_name, _, _, _, arg = children
+        return Action('set_var', (var_name, arg))
+
     def visit_action(self, node, children):
+        return children[0]
+
+    def visit_flag_action(self, node, children):
         _, rng, flag, action_name = children
-        return Action(action_name, flag, rng[0] if rng else None)
+        return FlagAction(action_name, flag, rng[0] if rng else None)
+
+    def visit_flag_action_name(self, node, children):
+        return node.text
+
+    def visit_var_action(self, node, children):
+        _, var_name, _, _, _, arg = children
+        return VarAction(var_name, arg)
 
-    def visit_action_name(self, node, children):
+    def visit_var_name(self, node, children):
         return node.text
 
     def visit_flag(self, node, children):
@@ -420,6 +514,12 @@ class EnhancmentsVisitor(NodeVisitor):
             return 'up'
         return 'down'
 
+    def visit_expr(self, node, children):
+        return children[0]
+
+    def visit_int(self, node, children):
+        return int(node.text)
+
     def visit_quoted(self, node, children):
         return node.text[1:-1] \
             .encode('ascii', 'backslashreplace') \
diff --git a/tests/sentry/grouping/grouping_inputs/native-limit-frames.json b/tests/sentry/grouping/grouping_inputs/native-limit-frames.json
new file mode 100644
index 0000000000..3a266bbc41
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/native-limit-frames.json
@@ -0,0 +1,44 @@
+{
+  "event_id": "3db43a42ec244bc99f88602d36eeda82",
+  "platform": "native",
+  "logger": "log_demo",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "_grouping": {
+    "enhancement_base": "common:2019-03-23",
+    "enhancements": "family:native max-frames=1"
+  },
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated(unsigned long,unsigned short,_GUID const &,_GUID const &,_GUID const &,HKL__ *,unsigned long)",
+              "instruction_addr": "0x10918cd81",
+              "in_app": false
+            },
+            {
+              "function": "Scaleform::GFx::AS3::IMEManager::DispatchEvent(char const *,char const *,char const *)",
+              "instruction_addr": "0x10918cd81",
+              "in_app": false
+            },
+            {
+              "function": "<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()",
+              "instruction_addr": "0x10918dda1",
+              "in_app": false
+            }
+          ]
+        },
+        "type": "log_demo",
+        "value": "Holy shit everything is on fire!",
+        "mechanism": {
+          "type": "minidump",
+          "synthetic": true
+        }
+      }
+    ]
+  },
+  "release": "sentry@0.13.0"
+}
diff --git a/tests/sentry/grouping/grouping_inputs/native-unlimited-frames.json b/tests/sentry/grouping/grouping_inputs/native-unlimited-frames.json
new file mode 100644
index 0000000000..260c19f7c8
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/native-unlimited-frames.json
@@ -0,0 +1,44 @@
+{
+  "event_id": "3db43a42ec244bc99f88602d36eeda82",
+  "platform": "native",
+  "logger": "log_demo",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "_grouping": {
+    "enhancement_base": "common:2019-03-23",
+    "enhancements": "family:native max-frames=0"
+  },
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated(unsigned long,unsigned short,_GUID const &,_GUID const &,_GUID const &,HKL__ *,unsigned long)",
+              "instruction_addr": "0x10918cd81",
+              "in_app": false
+            },
+            {
+              "function": "Scaleform::GFx::AS3::IMEManager::DispatchEvent(char const *,char const *,char const *)",
+              "instruction_addr": "0x10918cd81",
+              "in_app": false
+            },
+            {
+              "function": "<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()",
+              "instruction_addr": "0x10918dda1",
+              "in_app": false
+            }
+          ]
+        },
+        "type": "log_demo",
+        "value": "Holy shit everything is on fire!",
+        "mechanism": {
+          "type": "minidump",
+          "synthetic": true
+        }
+      }
+    ]
+  },
+  "release": "sentry@0.13.0"
+}
diff --git a/tests/sentry/grouping/snapshots/test_enhancer/test_basic_parsing.pysnap b/tests/sentry/grouping/snapshots/test_enhancer/test_basic_parsing.pysnap
index 65979357ee..38f1c5f998 100644
--- a/tests/sentry/grouping/snapshots/test_enhancer/test_basic_parsing.pysnap
+++ b/tests/sentry/grouping/snapshots/test_enhancer/test_basic_parsing.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-10T09:19:47.569014Z'
+created: '2019-05-16T11:57:20.348479Z'
 creator: sentry
 source: tests/sentry/grouping/test_enhancer.py
 ---
@@ -82,4 +82,10 @@ rules:
     pattern: '1'
   - key: path
     pattern: '*/test.js'
+- actions:
+  - value: 3
+    var: max-frames
+  matchers:
+  - key: family
+    pattern: native
 version: 1
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/native_limit_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/native_limit_frames.pysnap
new file mode 100644
index 0000000000..7e46dd9fe7
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/native_limit_frames.pysnap
@@ -0,0 +1,40 @@
+---
+created: '2019-05-16T11:55:53.361870Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            function* (isolated function)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (non app frame)
+            function* (isolated function)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame (non app frame)
+            function*
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+--------------------------------------------------------------------------
+system:
+  hash: '31f85aded5e85e51fb740d675fbfeccc'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored because only 1 frame is considered by grouping enhancement rule (family:native))
+            function* (isolated function)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (ignored because only 1 frame is considered by grouping enhancement rule (family:native))
+            function* (isolated function)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame*
+            function*
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/native_unlimited_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/native_unlimited_frames.pysnap
new file mode 100644
index 0000000000..f4fbefaae8
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/native_unlimited_frames.pysnap
@@ -0,0 +1,40 @@
+---
+created: '2019-05-16T18:21:46.150575Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            function* (isolated function)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (non app frame)
+            function* (isolated function)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame (non app frame)
+            function*
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+--------------------------------------------------------------------------
+system:
+  hash: 'e4dcc3896f798a517fb40f50daace658'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function* (isolated function)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame*
+            function* (isolated function)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame*
+            function*
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_limit_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_limit_frames.pysnap
new file mode 100644
index 0000000000..b6f20ee0ea
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_limit_frames.pysnap
@@ -0,0 +1,44 @@
+---
+created: '2019-05-16T11:55:54.205797Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated(unsigned long,unsigned short,_GUID const &,_GUID const &,_GUID const &,HKL__ *,unsigned long)'
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent(char const *,char const *,char const *)'
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
+        type*
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '3e0ae2ce25cce2fca3390f3416e6a82a'
+  component:
+    system*
+      exception*
+        stacktrace
+          frame
+            function (function name is used only if module or filename are available)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated(unsigned long,unsigned short,_GUID const &,_GUID const &,_GUID const &,HKL__ *,unsigned long)'
+          frame
+            function (function name is used only if module or filename are available)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent(char const *,char const *,char const *)'
+          frame
+            function (function name is used only if module or filename are available)
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
+        type*
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_unlimited_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_unlimited_frames.pysnap
new file mode 100644
index 0000000000..bb7ee5e082
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_unlimited_frames.pysnap
@@ -0,0 +1,44 @@
+---
+created: '2019-05-16T18:21:47.044949Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated(unsigned long,unsigned short,_GUID const &,_GUID const &,_GUID const &,HKL__ *,unsigned long)'
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent(char const *,char const *,char const *)'
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
+        type*
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '3e0ae2ce25cce2fca3390f3416e6a82a'
+  component:
+    system*
+      exception*
+        stacktrace
+          frame
+            function (function name is used only if module or filename are available)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated(unsigned long,unsigned short,_GUID const &,_GUID const &,_GUID const &,HKL__ *,unsigned long)'
+          frame
+            function (function name is used only if module or filename are available)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent(char const *,char const *,char const *)'
+          frame
+            function (function name is used only if module or filename are available)
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
+        type*
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/native_limit_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/native_limit_frames.pysnap
new file mode 100644
index 0000000000..5059cf073e
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/native_limit_frames.pysnap
@@ -0,0 +1,40 @@
+---
+created: '2019-05-16T11:55:55.023780Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            function* (isolated function)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (non app frame)
+            function* (isolated function)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame (non app frame)
+            function*
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+--------------------------------------------------------------------------
+system:
+  hash: '31f85aded5e85e51fb740d675fbfeccc'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored because only 1 frame is considered by grouping enhancement rule (family:native))
+            function* (isolated function)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (ignored because only 1 frame is considered by grouping enhancement rule (family:native))
+            function* (isolated function)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame*
+            function*
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/native_unlimited_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/native_unlimited_frames.pysnap
new file mode 100644
index 0000000000..8210f016f7
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/native_unlimited_frames.pysnap
@@ -0,0 +1,40 @@
+---
+created: '2019-05-16T18:21:47.953057Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            function* (isolated function)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (non app frame)
+            function* (isolated function)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame (non app frame)
+            function*
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+--------------------------------------------------------------------------
+system:
+  hash: 'e4dcc3896f798a517fb40f50daace658'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function* (isolated function)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame*
+            function* (isolated function)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame*
+            function*
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_limit_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_limit_frames.pysnap
new file mode 100644
index 0000000000..40629d855a
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_limit_frames.pysnap
@@ -0,0 +1,44 @@
+---
+created: '2019-05-16T11:55:55.918037Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            function*
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (non app frame)
+            function*
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame (non app frame)
+            function*
+              u'<lambda>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '9bb5de55b854491dacc677184c9b019a'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored because only 1 frame is considered by grouping enhancement rule (family:native))
+            function*
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (ignored because only 1 frame is considered by grouping enhancement rule (family:native))
+            function*
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame*
+            function*
+              u'<lambda>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_unlimited_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_unlimited_frames.pysnap
new file mode 100644
index 0000000000..ee8e496b72
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_unlimited_frames.pysnap
@@ -0,0 +1,44 @@
+---
+created: '2019-05-16T18:21:48.924332Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            function*
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (non app frame)
+            function*
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame (non app frame)
+            function*
+              u'<lambda>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '61d21e6d53c0837718af047c20e5e7ea'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame*
+            function*
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame*
+            function*
+              u'<lambda>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_limit_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_limit_frames.pysnap
new file mode 100644
index 0000000000..fc6dd9e63f
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_limit_frames.pysnap
@@ -0,0 +1,44 @@
+---
+created: '2019-05-16T11:55:56.758401Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            function*
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (non app frame)
+            function*
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame (non app frame)
+            function*
+              u'<lambda>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '9bb5de55b854491dacc677184c9b019a'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored because only 1 frame is considered by grouping enhancement rule (family:native))
+            function*
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (ignored because only 1 frame is considered by grouping enhancement rule (family:native))
+            function*
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame*
+            function*
+              u'<lambda>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_unlimited_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_unlimited_frames.pysnap
new file mode 100644
index 0000000000..5d65312e16
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_unlimited_frames.pysnap
@@ -0,0 +1,44 @@
+---
+created: '2019-05-16T18:21:49.807173Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            function*
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (non app frame)
+            function*
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame (non app frame)
+            function*
+              u'<lambda>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '61d21e6d53c0837718af047c20e5e7ea'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame*
+            function*
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame*
+            function*
+              u'<lambda>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/test_enhancer.py b/tests/sentry/grouping/test_enhancer.py
index edb4457406..0ceb230530 100644
--- a/tests/sentry/grouping/test_enhancer.py
+++ b/tests/sentry/grouping/test_enhancer.py
@@ -33,6 +33,7 @@ family:native module:std::*                     -app
 module:core::*                                  -app
 family:javascript path:*/test.js                -app
 family:javascript app:1 path:*/test.js          -app
+family:native                                   max-frames=3
 ''', bases=['common:v1'])
 
     dumped = enhancement.dumps()
