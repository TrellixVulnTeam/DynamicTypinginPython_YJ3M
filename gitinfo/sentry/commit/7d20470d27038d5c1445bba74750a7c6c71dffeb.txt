commit 7d20470d27038d5c1445bba74750a7c6c71dffeb
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Apr 26 21:00:25 2016 +0200

    Improved rendering of queries that are detected SQL

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/query.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/query.jsx
index 1a17112a18..391bb49bd1 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/query.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/query.jsx
@@ -3,19 +3,64 @@ import React from 'react';
 import Classifier from './classifier';
 import Duration from '../../../duration';
 
+
+function summarizeSqlQuery(sql) {
+  let match = sql.match(/^\s*select\b(.*?)\bfrom\s+["`]?([^\s,."`]+)/im);
+  if (match) {
+    let selectors = match[1].split(/,/g);
+    let selector = selectors[0].split(/\bas\b/i)[0].trim();
+    if (selectors.length > 1) {
+      selector += ', …';
+    }
+    return (
+      <span className="sql-summary">
+        <span className="keyword statement">SELECT</span>{' '}
+        <span className="literal">{selector}</span>{' '}
+        <span className="keyword">FROM</span>{' '}
+        <span className="literal">{match[2].trim()}</span>
+      </span>
+    );
+  }
+  return null;
+}
+
+
 const QueryCrumbComponent = React.createClass({
   propTypes: {
     data: React.PropTypes.object.isRequired,
   },
 
-  render() {
-    let data = this.props.data;
-    let placeholderIdx = 0;
+  getInitialState() {
+    return {
+      showFullQuery: false
+    }
+  },
 
-    let queryElements = data.query.split(/(%s)/).map((item, idx) => {
+  toggleFullQuery() {
+    this.setState({
+      showFullQuery: !this.state.showFullQuery
+    })
+  },
+
+  renderQuery() {
+    let {query, params} = this.props.data;
+
+    if (typeof query !== 'string') {
+      return (
+        <span className="query">
+          <code className="full-query">
+            <span className="json">{JSON.stringify(query, null, 2)}</span>
+          </code>
+        </span>
+      );
+    }
+
+    let querySummary = summarizeSqlQuery(query);
+    let placeholderIdx = 0;
+    let queryElements = query.split(/(%s)/).map((item, idx) => {
       return item === '%s'
         ? <span key={idx} className="param">{
-            data.params ? data.params[placeholderIdx++] : item}</span>
+            params ? params[placeholderIdx++] : item}</span>
         : <span key={idx} className="literal">{item}</span>
       ;
     });
@@ -25,11 +70,27 @@ const QueryCrumbComponent = React.createClass({
       timing = <Duration key="duration" seconds={data.duration} />;
     }
 
+    return (
+      <span className="query" onClick={querySummary ? this.toggleFullQuery : null}>
+        {querySummary && !this.state.showFullQuery ?
+          <code className="query-summary">
+            {querySummary}
+            <span className="elipsis">…</span>
+          </code> : null
+        }
+        {this.state.showFullQuery ?
+          <code className="full-query">{queryElements}</code> : null}
+      </span>
+    );
+  },
+
+  render() {
     return (
       <p>
-        <strong>Query:</strong> <code>{queryElements}</code>
+        <strong className="preamble">Query:</strong>
+        {this.renderQuery()}
         {timing}
-        <Classifier value={data.classifier} title="%s query" />
+        <Classifier value={this.props.data.classifier} title="%s query" />
       </p>
     );
   }
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index d966929f27..a68e821ee1 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1644,21 +1644,57 @@ ul.crumbs {
     }
 
     &.crumb-query {
-      background: lighten(@orange, 42);
+      .icon-container {
+        border-color: lighten(@purple, 10);
+
+        .icon {
+          top: 5px;
+          left: 5.5px;
+          color: darken(@purple, 5);
+          &:before {content: "\e601";}
+        }
+      }
+
+      p {
+        line-height: 1.2;
+        padding-top: 4px;
+      }
+
       code {
         white-space: pre-wrap;
         word-wrap: break-word;
         background: transparent;
         font-size: 13px;
+        cursor: pointer;
+
+        &.query-summary {
+          &:hover span.elipsis {
+            background: @gray;
+            color: white;
+          }
+        }
 
         span {
           display: inline;
         }
 
+        span.elipsis {
+          border-radius: 2px;
+          padding: 2px 7px;
+          margin: -2px -5px -2px 10px;
+        }
+
+        span.keyword {
+          font-weight: bold;
+          color: darken(@blue-dark, 10);
+        }
+
         span.param {
-          color: @blue;
-          padding: 0 3px;
-          background: white;
+          color: darken(@blue-dark, 10);
+          font-weight: bold;
+          padding: 2px 5px;
+          margin: -2px -3px;
+          background: lighten(@blue-light, 25);
           border-radius: 2px;
         }
       }
