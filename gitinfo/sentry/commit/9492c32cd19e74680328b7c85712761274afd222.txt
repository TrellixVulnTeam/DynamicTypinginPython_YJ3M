commit 9492c32cd19e74680328b7c85712761274afd222
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Wed Apr 8 15:29:49 2020 +0200

    feat(pii): Derive selector suggestions from event data (#18096)
    
    Add functionality to allow users to complete selectors based on event ID. I had to resize the dropdown to allow for longer selector values, but maybe somebody else has a better idea.
    
    ## Screenshots
    
    ![Screenshot 2020-04-06 at 23 23 01](https://user-images.githubusercontent.com/837573/78606708-0ab34080-785e-11ea-8774-8ea5abe51b37.png)
    ![Screenshot 2020-04-06 at 23 23 07](https://user-images.githubusercontent.com/837573/78606709-0be46d80-785e-11ea-912a-fa6bbc425b60.png)
    ![Screenshot 2020-04-06 at 23 23 49](https://user-images.githubusercontent.com/837573/78606710-0c7d0400-785e-11ea-9a2a-cda31c1c044b.png)
    ![Screenshot 2020-04-06 at 23 24 11](https://user-images.githubusercontent.com/837573/78606713-0c7d0400-785e-11ea-883d-9db43b207a4a.png)

diff --git a/requirements-base.txt b/requirements-base.txt
index ac2d2ac32a..cefd33d975 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -49,7 +49,7 @@ redis-py-cluster==1.3.4
 redis>=2.10.3,<2.10.6
 requests-oauthlib==1.2.0
 requests[security]>=2.20.0,<2.21.0
-sentry-relay>=0.5.6,<0.6.0
+sentry-relay>=0.5.7,<0.6.0
 sentry-sdk>=0.13.5
 simplejson>=3.2.0,<3.9.0
 six>=1.10.0,<1.11.0
diff --git a/src/sentry/api/endpoints/data_scrubbing_selector_suggestions.py b/src/sentry/api/endpoints/data_scrubbing_selector_suggestions.py
new file mode 100644
index 0000000000..ab8c569e0a
--- /dev/null
+++ b/src/sentry/api/endpoints/data_scrubbing_selector_suggestions.py
@@ -0,0 +1,51 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry import eventstore
+from sentry.api.base import DocSection
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.utils.apidocs import scenario, attach_scenarios
+
+from sentry_relay import pii_selectors_from_event
+
+
+@scenario("GetSelectorSuggestionsForOrganization")
+def get_selector_suggestions_for_organization_scenario(runner):
+    runner.request(
+        method="GET",
+        path="/organizations/%s/data-scrubbing-selector-suggestions/" % (runner.org.slug,),
+    )
+
+
+class DataScrubbingSelectorSuggestionsEndpoint(OrganizationEndpoint):
+    doc_section = DocSection.ORGANIZATIONS
+
+    @attach_scenarios([get_selector_suggestions_for_organization_scenario])
+    def get(self, request, organization):
+        """
+        Generate a list of data scrubbing selectors from existing event data.
+
+        This list is used to auto-complete settings in "Data Privacy" /
+        "Security and Privacy" settings.
+        """
+
+        event_id = request.GET.get("eventId", None)
+
+        # Filtering by the projects that self.get_projects returns deals with
+        # permission concerns
+        projects = self.get_projects(request, organization)
+        project_ids = [project.id for project in projects]
+
+        selectors = set()
+
+        if event_id:
+            for event in eventstore.get_events(
+                filter=eventstore.Filter(
+                    conditions=[["id", "=", event_id]], project_ids=project_ids
+                )
+            ):
+                selectors.update(pii_selectors_from_event(dict(event.data)))
+
+        suggestions = [{"type": "value", "value": selector} for selector in selectors]
+        return Response({"suggestions": suggestions})
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 6c237c31ed..6f0551b394 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -18,6 +18,7 @@ from .endpoints.broadcast_index import BroadcastIndexEndpoint
 from .endpoints.builtin_symbol_sources import BuiltinSymbolSourcesEndpoint
 from .endpoints.catchall import CatchallEndpoint
 from .endpoints.chunk import ChunkUploadEndpoint
+from .endpoints.data_scrubbing_selector_suggestions import DataScrubbingSelectorSuggestionsEndpoint
 from .endpoints.debug_files import (
     AssociateDSymFilesEndpoint,
     DebugFilesEndpoint,
@@ -700,6 +701,11 @@ urlpatterns = [
                     EventIdLookupEndpoint.as_view(),
                     name="sentry-api-0-event-id-lookup",
                 ),
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/data-scrubbing-selector-suggestions/$",
+                    DataScrubbingSelectorSuggestionsEndpoint.as_view(),
+                    name="sentry-api-0-data-scrubbing-selector-suggestions",
+                ),
                 url(
                     r"^(?P<organization_slug>[^\/]+)/slugs/$",
                     SlugsUpdateEndpoint.as_view(),
diff --git a/src/sentry/static/sentry/app/components/loadingIndicator.tsx b/src/sentry/static/sentry/app/components/loadingIndicator.tsx
index 1b5cb536cf..6e78e62192 100644
--- a/src/sentry/static/sentry/app/components/loadingIndicator.tsx
+++ b/src/sentry/static/sentry/app/components/loadingIndicator.tsx
@@ -61,7 +61,7 @@ function LoadingIndicator(props: Props) {
     <div className={cx} style={style}>
       {!hideSpinner && (
         <div className={loadingCx} style={loadingStyle}>
-          {finished ? <div className="checkmark draw" /> : null}
+          {finished ? <div className="checkmark draw" style={style} /> : null}
         </div>
       )}
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesEventIdField.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesEventIdField.tsx
new file mode 100644
index 0000000000..b52f36c13d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesEventIdField.tsx
@@ -0,0 +1,103 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import TextField from 'app/components/forms/textField';
+import ControlState from 'app/views/settings/components/forms/field/controlState';
+import Tooltip from 'app/components/tooltip';
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+
+export enum EventIdFieldStatus {
+  NONE = 'none',
+  LOADING = 'loading',
+  INVALID = 'invalid',
+  NOT_FOUND = 'not_found',
+  LOADED = 'loaded',
+  ERROR = 'error',
+}
+
+type Props = {
+  status: EventIdFieldStatus;
+  onChange: (eventId: string) => void;
+  onBlur: (event: React.FocusEvent<HTMLInputElement>) => void;
+  onKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void;
+  disabled?: boolean;
+  value: string;
+};
+
+const getEventTooltipTitle = (status: EventIdFieldStatus): string => {
+  switch (status) {
+    case EventIdFieldStatus.INVALID:
+      return t("That's not a valid event ID");
+    case EventIdFieldStatus.ERROR:
+      return t('Something went wrong while fetching the suggestions');
+    case EventIdFieldStatus.NOT_FOUND:
+      return t('Event ID not found in projects you have access to');
+    case EventIdFieldStatus.LOADED:
+      return t('Auto-completing based on this event ID');
+    default:
+      return '';
+  }
+};
+
+const DataPrivacyRulesEventIdField = ({
+  status,
+  onChange,
+  value,
+  onBlur,
+  onKeyDown,
+  disabled,
+}: Props) => (
+  <Tooltip title={getEventTooltipTitle(status)}>
+    <TooltipContent>
+      <StyledTextField
+        name="eventId"
+        disabled={disabled}
+        value={value}
+        placeholder={t('Paste event ID for better assistance')}
+        onChange={onChange}
+        onKeyDown={onKeyDown}
+        onBlur={onBlur}
+        showStatus={
+          status !== EventIdFieldStatus.LOADED && status !== EventIdFieldStatus.NONE
+        }
+      />
+      <Status>
+        {status === EventIdFieldStatus.LOADING && <ControlState isSaving />}
+        {status === EventIdFieldStatus.INVALID && <ControlState error />}
+        {status === EventIdFieldStatus.ERROR && <ControlState error />}
+        {status === EventIdFieldStatus.NOT_FOUND && <ControlState error />}
+      </Status>
+    </TooltipContent>
+  </Tooltip>
+);
+
+export default DataPrivacyRulesEventIdField;
+
+const TooltipContent = styled('div')`
+  position: relative;
+  display: flex;
+  align-items: center;
+  padding-bottom: ${space(1)};
+
+  @media (min-width: ${p => p.theme.breakpoints[1]}) {
+    padding-bottom: 0px;
+  }
+`;
+
+const StyledTextField = styled(TextField)<{showStatus: boolean}>`
+  flex: 1;
+  font-weight: 400;
+  input {
+    height: 34px;
+    padding-right: ${p => (p.showStatus ? space(4) : space(1.5))};
+  }
+  :first-child {
+    margin-bottom: 0;
+  }
+`;
+
+const Status = styled('div')`
+  position: absolute;
+  right: 0;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx
index db31a1880f..edd5d73caa 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx
@@ -1,25 +1,22 @@
 import React from 'react';
-import styled from '@emotion/styled';
 import omit from 'lodash/omit';
+import isEqual from 'lodash/isEqual';
 
-import space from 'app/styles/space';
 import {t, tct} from 'app/locale';
-import {Panel, PanelHeader, PanelAlert, PanelBody} from 'app/components/panels';
-import Button from 'app/components/button';
-import {IconAdd} from 'app/icons/iconAdd';
-import ButtonBar from 'app/components/buttonBar';
+import {Panel, PanelAlert, PanelBody} from 'app/components/panels';
 import {Client} from 'app/api';
-import {
-  addErrorMessage,
-  addLoadingMessage,
-  addSuccessMessage,
-} from 'app/actionCreators/indicator';
+import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import ExternalLink from 'app/components/links/externalLink';
+import SentryTypes from 'app/sentryTypes';
 
+import {EventIdFieldStatus} from './dataPrivacyRulesEventIdField';
 import DataPrivacyRulesPanelForm from './dataPrivacyRulesPanelForm';
+import {Suggestion, defaultSuggestions} from './dataPrivacyRulesPanelSelectorFieldTypes';
 import {RULE_TYPE, METHOD_TYPE} from './utils';
+import DataprivacyRulesPanelHeader from './dataprivacyRulesPanelHeader';
+import DataPrivacyRulesPanelFooter from './dataPrivacyRulesPanelFooter';
 
-const DEFAULT_RULE_FROM_VALUE = '$string';
+const DEFAULT_RULE_FROM_VALUE = '';
 
 type Rule = React.ComponentProps<typeof DataPrivacyRulesPanelForm>['rule'];
 
@@ -48,17 +45,31 @@ type State = {
   rules: Array<Rule>;
   savedRules: Array<Rule>;
   relayPiiConfig?: string;
+  selectorSuggestions: Array<Suggestion>;
+  eventIdInputValue: string;
+  eventIdStatus: EventIdFieldStatus;
+  isFormValid: boolean;
 };
 
 class DataPrivacyRulesPanel extends React.Component<Props, State> {
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+    project: SentryTypes.Project,
+  };
+
   state: State = {
     rules: [],
     savedRules: [],
     relayPiiConfig: this.props.relayPiiConfig,
+    selectorSuggestions: [],
+    eventIdStatus: EventIdFieldStatus.NONE,
+    eventIdInputValue: '',
+    isFormValid: true,
   };
 
   componentDidMount() {
     this.loadRules();
+    this.loadSelectorSuggestions();
   }
 
   componentDidUpdate(_prevProps: Props, prevState: State) {
@@ -120,6 +131,87 @@ class DataPrivacyRulesPanel extends React.Component<Props, State> {
     }
   }
 
+  loadSelectorSuggestions = async () => {
+    const {organization, project} = this.context;
+    const {eventIdInputValue} = this.state;
+
+    if (!eventIdInputValue) {
+      this.setState({
+        selectorSuggestions: defaultSuggestions,
+        eventIdStatus: EventIdFieldStatus.NONE,
+      });
+      return;
+    }
+
+    this.setState({eventIdStatus: EventIdFieldStatus.LOADING});
+
+    try {
+      const query: {projectId?: string; eventId: string} = {eventId: eventIdInputValue};
+      if (project?.id) {
+        query.projectId = project.id;
+      }
+      const rawSuggestions = await this.api.requestPromise(
+        `/organizations/${organization.slug}/data-scrubbing-selector-suggestions/`,
+        {method: 'GET', query}
+      );
+      const selectorSuggestions: Array<Suggestion> = rawSuggestions.suggestions;
+
+      if (selectorSuggestions && selectorSuggestions.length > 0) {
+        this.setState({
+          selectorSuggestions,
+          eventIdStatus: EventIdFieldStatus.LOADED,
+        });
+        return;
+      }
+
+      this.setState({
+        selectorSuggestions: defaultSuggestions,
+        eventIdStatus: EventIdFieldStatus.NOT_FOUND,
+      });
+    } catch {
+      this.setState({
+        eventIdStatus: EventIdFieldStatus.ERROR,
+      });
+    }
+  };
+
+  handleEventIdChange = (value: string) => {
+    const eventId = value.replace(/-/g, '').trim();
+    this.setState({
+      eventIdStatus: EventIdFieldStatus.NONE,
+      selectorSuggestions: defaultSuggestions,
+      eventIdInputValue: eventId,
+    });
+  };
+
+  isEventIdValueValid = (): boolean => {
+    const {eventIdInputValue} = this.state;
+    if (eventIdInputValue && eventIdInputValue.length !== 32) {
+      this.setState({eventIdStatus: EventIdFieldStatus.INVALID});
+      return false;
+    }
+
+    return true;
+  };
+
+  handleEventIdBlur = (event: React.FocusEvent<HTMLInputElement>) => {
+    event.preventDefault();
+
+    if (this.isEventIdValueValid()) {
+      this.loadSelectorSuggestions();
+    }
+  };
+
+  handleEventIdKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    event.persist();
+
+    const {keyCode} = event;
+
+    if (keyCode === 13 && this.isEventIdValueValid()) {
+      this.loadSelectorSuggestions();
+    }
+  };
+
   handleAddRule = () => {
     this.setState(prevState => ({
       rules: [
@@ -131,6 +223,7 @@ class DataPrivacyRulesPanel extends React.Component<Props, State> {
           from: DEFAULT_RULE_FROM_VALUE,
         },
       ],
+      isFormValid: false,
     }));
   };
 
@@ -141,14 +234,19 @@ class DataPrivacyRulesPanel extends React.Component<Props, State> {
   };
 
   handleChange = (updatedRule: Rule) => {
-    this.setState(prevState => ({
-      rules: prevState.rules.map(rule => {
-        if (rule.id === updatedRule.id) {
-          return updatedRule;
-        }
-        return rule;
+    this.setState(
+      prevState => ({
+        rules: prevState.rules.map(rule => {
+          if (rule.id === updatedRule.id) {
+            return updatedRule;
+          }
+          return rule;
+        }),
       }),
-    }));
+      () => {
+        this.handleValidation();
+      }
+    );
   };
 
   handleSubmit = async () => {
@@ -201,10 +299,39 @@ class DataPrivacyRulesPanel extends React.Component<Props, State> {
         });
       })
       .then(() => {
-        addSuccessMessage(t('Successfully saved data scrubbing rules'));
+        addSuccessMessage(t('Successfully saved data privacy rules'));
       })
-      .catch(() => {
-        addErrorMessage(t('An error occurred while saving data scrubbing rules'));
+      .catch(error => {
+        const errorMessage = error.responseJSON?.relayPiiConfig[0];
+
+        if (!errorMessage) {
+          addErrorMessage(t('Unknown error occurred while saving data privacy rules'));
+          return;
+        }
+
+        if (errorMessage.startsWith('invalid selector: ')) {
+          for (const line of errorMessage.split('\n')) {
+            if (line.startsWith('1 | ')) {
+              const selector = line.slice(3);
+              addErrorMessage(t('Invalid selector: %s', selector));
+              break;
+            }
+          }
+          return;
+        }
+
+        if (errorMessage.startsWith('regex parse error:')) {
+          for (const line of errorMessage.split('\n')) {
+            if (line.startsWith('error:')) {
+              const regex = line.slice(6).replace(/at line \d+ column \d+/, '');
+              addErrorMessage(t('Invalid regex: %s', regex));
+              break;
+            }
+          }
+          return;
+        }
+
+        addErrorMessage(t('Unknown error occurred while saving data privacy rules'));
       });
   };
 
@@ -218,19 +345,23 @@ class DataPrivacyRulesPanel extends React.Component<Props, State> {
 
     const isFormValid = !isAnyRuleFieldEmpty;
 
+    this.setState({
+      isFormValid,
+    });
+  };
+
+  handleSaveForm = () => {
+    const {isFormValid} = this.state;
+
     if (isFormValid) {
       this.handleSubmit();
-    } else {
-      addErrorMessage(t("Invalid rule's form"));
+      return;
     }
-  };
 
-  handleSaveForm = () => {
-    this.handleValidation();
+    addErrorMessage(t('Invalid rules form'));
   };
 
   handleCancelForm = () => {
-    addLoadingMessage(t('Canceling...'));
     this.setState(prevState => ({
       rules: prevState.savedRules,
     }));
@@ -238,12 +369,26 @@ class DataPrivacyRulesPanel extends React.Component<Props, State> {
 
   render() {
     const {additionalContext, disabled} = this.props;
-    const {rules, savedRules} = this.state;
-    const hideButtonBar = savedRules.length === 0 && rules.length === 0;
+    const {
+      rules,
+      savedRules,
+      eventIdInputValue,
+      selectorSuggestions,
+      eventIdStatus,
+      isFormValid,
+    } = this.state;
+
     return (
       <React.Fragment>
         <Panel>
-          <StyledPanelHeader>{t('Data Privacy Rules')}</StyledPanelHeader>
+          <DataprivacyRulesPanelHeader
+            onKeyDown={this.handleEventIdKeyDown}
+            onChange={this.handleEventIdChange}
+            onBlur={this.handleEventIdBlur}
+            value={eventIdInputValue}
+            status={eventIdStatus}
+            disabled={disabled}
+          />
           <PanelAlert type="info">
             {additionalContext}{' '}
             {tct('For more details, see [linkToDocs].', {
@@ -260,41 +405,23 @@ class DataPrivacyRulesPanel extends React.Component<Props, State> {
                 key={rule.id}
                 onDelete={this.handleDeleteRule}
                 onChange={this.handleChange}
+                selectorSuggestions={selectorSuggestions}
                 rule={rule}
                 disabled={disabled}
               />
             ))}
-            <PanelAction>
-              <StyledLink
-                disabled={disabled}
-                icon={<IconAdd circle />}
-                onClick={this.handleAddRule}
-                size="zero"
-                borderless
-              >
-                {t('Add Rule')}
-              </StyledLink>
-              {!hideButtonBar && (
-                <StyledButtonBar gap={1.5}>
-                  <Button
-                    size="small"
-                    onClick={this.handleCancelForm}
-                    disabled={disabled}
-                  >
-                    {t('Cancel')}
-                  </Button>
-                  <Button
-                    size="small"
-                    priority="primary"
-                    onClick={this.handleSaveForm}
-                    disabled={disabled}
-                  >
-                    {t('Save Rules')}
-                  </Button>
-                </StyledButtonBar>
-              )}
-            </PanelAction>
           </PanelBody>
+          <DataPrivacyRulesPanelFooter
+            hideButtonBar={
+              (savedRules.length === 0 && rules.length === 0) ||
+              isEqual(rules, savedRules)
+            }
+            onAddRule={this.handleAddRule}
+            onCancel={this.handleCancelForm}
+            onSave={this.handleSaveForm}
+            disabled={disabled}
+            disableSaveButton={!isFormValid}
+          />
         </Panel>
       </React.Fragment>
     );
@@ -302,29 +429,3 @@ class DataPrivacyRulesPanel extends React.Component<Props, State> {
 }
 
 export default DataPrivacyRulesPanel;
-
-const StyledPanelHeader = styled(PanelHeader)`
-  display: grid;
-  grid-gap: ${space(1)};
-`;
-
-const PanelAction = styled('div')`
-  padding: ${space(1.5)} ${space(2)};
-  display: grid;
-  grid-template-columns: auto 1fr;
-  align-items: center;
-`;
-
-const StyledButtonBar = styled(ButtonBar)`
-  justify-content: flex-end;
-`;
-
-const StyledLink = styled(Button)`
-  color: ${p => p.theme.blue};
-
-  &:hover,
-  &:active,
-  &:focus {
-    color: ${p => p.theme.blueDark};
-  }
-`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelFooter.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelFooter.tsx
new file mode 100644
index 0000000000..8dc24c932b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelFooter.tsx
@@ -0,0 +1,75 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import Button from 'app/components/button';
+import {IconAdd} from 'app/icons/iconAdd';
+import ButtonBar from 'app/components/buttonBar';
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+
+type Props = {
+  onAddRule: () => void;
+  onSave: () => void;
+  onCancel: () => void;
+  hideButtonBar: boolean;
+  disabled?: boolean;
+  disableSaveButton?: boolean;
+};
+
+const DataPrivacyRulesPanelFooter = ({
+  disabled,
+  onAddRule,
+  onCancel,
+  onSave,
+  hideButtonBar,
+  disableSaveButton,
+}: Props) => (
+  <PanelAction>
+    <StyledLink
+      disabled={disabled}
+      icon={<IconAdd circle />}
+      onClick={onAddRule}
+      size="zero"
+      borderless
+    >
+      {t('Add Rule')}
+    </StyledLink>
+    {!hideButtonBar && (
+      <StyledButtonBar gap={1.5}>
+        <Button size="small" onClick={onCancel} disabled={disabled}>
+          {t('Cancel')}
+        </Button>
+        <Button
+          size="small"
+          priority="primary"
+          onClick={onSave}
+          disabled={disabled || disableSaveButton}
+        >
+          {t('Save Rules')}
+        </Button>
+      </StyledButtonBar>
+    )}
+  </PanelAction>
+);
+
+export default DataPrivacyRulesPanelFooter;
+
+const PanelAction = styled('div')`
+  padding: ${space(1.5)} ${space(2)};
+  display: grid;
+  grid-template-columns: auto 1fr;
+  align-items: center;
+`;
+
+const StyledButtonBar = styled(ButtonBar)`
+  justify-content: flex-end;
+`;
+
+const StyledLink = styled(Button)`
+  color: ${p => p.theme.blue};
+  &:hover,
+  &:active,
+  &:focus {
+    color: ${p => p.theme.blueDark};
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
index 12cf377bdf..fc1663f164 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
@@ -1,6 +1,5 @@
 import React from 'react';
 import styled from '@emotion/styled';
-import omit from 'lodash/omit';
 
 import space from 'app/styles/space';
 import {t} from 'app/locale';
@@ -16,6 +15,7 @@ import {
   getMethodTypeSelectorFieldLabel,
 } from './utils';
 import DataPrivacyRulesPanelSelectorField from './dataPrivacyRulesPanelSelectorField';
+import {Suggestion} from './dataPrivacyRulesPanelSelectorFieldTypes';
 
 type Rule = {
   id: number;
@@ -28,6 +28,7 @@ type Rule = {
 type Props = {
   onDelete: (ruleId: Rule['id']) => void;
   onChange: (rule: Rule) => void;
+  selectorSuggestions: Array<Suggestion>;
   rule: Rule;
   disabled?: boolean;
 };
@@ -42,14 +43,20 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
     errors: {},
   };
 
+  componentDidUpdate(prevProps: Props) {
+    if (prevProps.rule.from !== this.props.rule.from) {
+      this.handleValidation('from')();
+    }
+  }
+
   handleChange = <T extends keyof Omit<Rule, 'id'>>(stateProperty: T, value: Rule[T]) => {
     const rule: Rule = {
-      ...omit(this.props.rule, 'customRegularExpression'),
+      ...this.props.rule,
       [stateProperty]: value,
     };
 
-    if (stateProperty === 'type' && value === RULE_TYPE.PATTERN) {
-      rule.customRegularExpression = this.props.rule.customRegularExpression || '';
+    if (rule.type !== RULE_TYPE.PATTERN) {
+      delete rule.customRegularExpression;
     }
 
     this.props.onChange({
@@ -86,7 +93,7 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
   };
 
   render() {
-    const {onDelete, rule, disabled} = this.props;
+    const {onDelete, rule, disabled, selectorSuggestions} = this.props;
     const {from, customRegularExpression, type, method} = rule;
     const {errors} = this.state;
 
@@ -128,6 +135,7 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
             }}
             value={from}
             onBlur={this.handleValidation('from')}
+            selectorSuggestions={selectorSuggestions}
             error={errors.from}
             disabled={disabled}
           />
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.tsx
index eb6303a780..7a1faac2a1 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.tsx
@@ -1,6 +1,8 @@
 import React from 'react';
 import styled from '@emotion/styled';
+import debounce from 'lodash/debounce';
 
+import {DEFAULT_DEBOUNCE_DURATION} from 'app/constants';
 import space from 'app/styles/space';
 import {t} from 'app/locale';
 import TextField from 'app/components/forms/textField';
@@ -8,12 +10,12 @@ import TextOverflow from 'app/components/textOverflow';
 import {defined} from 'app/utils';
 
 import {
-  allSelectors,
   unaryOperatorSuggestions,
+  binaryOperatorSuggestions,
   Suggestion,
   Suggestions,
+  SuggestionType,
 } from './dataPrivacyRulesPanelSelectorFieldTypes';
-import getNewSuggestions from './getNewSuggestions';
 
 type State = {
   suggestions: Suggestions;
@@ -25,6 +27,7 @@ type State = {
 type Props = {
   value: string;
   onChange: (value: string) => void;
+  selectorSuggestions: Array<Suggestion>;
   error?: string;
   onBlur?: (event: React.KeyboardEvent<HTMLInputElement>) => void;
   disabled?: boolean;
@@ -43,7 +46,13 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
   }
 
   componentDidMount() {
-    this.loadFieldValues(this.props.value, true);
+    this.loadFieldValues(this.props.value);
+  }
+
+  componentDidUpdate(prevProps: Props) {
+    if (prevProps.selectorSuggestions !== this.props.selectorSuggestions) {
+      this.loadFieldValues(this.props.value);
+    }
   }
 
   componentWillUnmount() {
@@ -53,7 +62,109 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
   selectorField = React.createRef<HTMLDivElement>();
   suggestionList = React.createRef<HTMLUListElement>();
 
-  loadFieldValues = (newValue: string, initialLoading = false) => {
+  getAllSuggestions() {
+    return [
+      ...this.getValueSuggestions(),
+      ...unaryOperatorSuggestions,
+      ...binaryOperatorSuggestions,
+    ];
+  }
+
+  getValueSuggestions() {
+    return this.props.selectorSuggestions;
+  }
+
+  getFilteredSuggestions = (value: string, type: SuggestionType) => {
+    let valuesToBeFiltered: Array<Suggestion> = [];
+
+    switch (type) {
+      case 'binary': {
+        valuesToBeFiltered = binaryOperatorSuggestions;
+        break;
+      }
+      case 'value': {
+        valuesToBeFiltered = this.getValueSuggestions();
+        break;
+      }
+      case 'unary': {
+        valuesToBeFiltered = unaryOperatorSuggestions;
+        break;
+      }
+      default: {
+        valuesToBeFiltered = [...this.getValueSuggestions(), ...unaryOperatorSuggestions];
+      }
+    }
+
+    const filteredSuggestions = valuesToBeFiltered.filter(
+      s => s.value.toLowerCase().indexOf(value.toLowerCase()) > -1
+    );
+
+    const showSuggestions =
+      !(filteredSuggestions.length === 1 && filteredSuggestions[0].value === value) &&
+      this.state.fieldValues.length !== 0;
+
+    this.setState({
+      showSuggestions,
+    });
+
+    return filteredSuggestions;
+  };
+
+  getNewSuggestions = (fieldValues: Array<Suggestion | Array<Suggestion>>) => {
+    const lastFieldValue = fieldValues[fieldValues.length - 1];
+    const penultimateFieldValue = fieldValues[fieldValues.length - 2];
+
+    if (Array.isArray(lastFieldValue)) {
+      // recursion
+      return this.getNewSuggestions(lastFieldValue);
+    }
+
+    if (Array.isArray(penultimateFieldValue)) {
+      if (lastFieldValue?.type === 'binary') {
+        // returns filtered values
+        return this.getFilteredSuggestions(lastFieldValue?.value, 'value');
+      }
+      // returns all binaries without any filter
+      return this.getFilteredSuggestions('', 'binary');
+    }
+
+    if (lastFieldValue?.type === 'value' && penultimateFieldValue?.type === 'unary') {
+      // returns filtered values
+      return this.getFilteredSuggestions(lastFieldValue?.value, 'value');
+    }
+
+    if (lastFieldValue?.type === 'unary') {
+      // returns all values without any filter
+      return this.getFilteredSuggestions('', 'value');
+    }
+
+    if (lastFieldValue?.type === 'string' && penultimateFieldValue?.type === 'value') {
+      // returns all binaries without any filter
+      return this.getFilteredSuggestions('', 'binary');
+    }
+
+    if (
+      lastFieldValue?.type === 'string' &&
+      penultimateFieldValue?.type === 'string' &&
+      !penultimateFieldValue?.value
+    ) {
+      // returns all values without any filter
+      return this.getFilteredSuggestions('', 'string');
+    }
+
+    if (
+      (penultimateFieldValue?.type === 'string' && !lastFieldValue?.value) ||
+      (penultimateFieldValue?.type === 'value' && !lastFieldValue?.value) ||
+      lastFieldValue?.type === 'binary'
+    ) {
+      // returns filtered binaries
+      return this.getFilteredSuggestions(lastFieldValue?.value, 'binary');
+    }
+
+    return this.getFilteredSuggestions(lastFieldValue?.value, lastFieldValue?.type);
+  };
+
+  loadFieldValues = (newValue: string) => {
     const splittedValue = newValue.split(' ');
     const fieldValues: Array<Suggestion | Array<Suggestion>> = [];
 
@@ -62,7 +173,9 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
 
       if (value.includes('!') && !!value.split('!')[1]) {
         const valueAfterUnaryOperator = value.split('!')[1];
-        const selector = allSelectors.find(s => s.value === valueAfterUnaryOperator);
+        const selector = this.getAllSuggestions().find(
+          s => s.value === valueAfterUnaryOperator
+        );
         if (!selector) {
           fieldValues.push([
             unaryOperatorSuggestions[0],
@@ -74,7 +187,7 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
         continue;
       }
 
-      const selector = allSelectors.find(s => s.value === value);
+      const selector = this.getAllSuggestions().find(s => s.value === value);
       if (selector) {
         fieldValues.push(selector);
         continue;
@@ -83,13 +196,12 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
       fieldValues.push({type: 'string', value});
     }
 
-    const {showSuggestions = true, filteredSuggestions} = getNewSuggestions(fieldValues);
+    const filteredSuggestions = this.getNewSuggestions(fieldValues);
 
     this.setState({
       fieldValues,
       activeSuggestion: 0,
       suggestions: filteredSuggestions,
-      showSuggestions: initialLoading ? false : showSuggestions,
     });
   };
 
@@ -176,51 +288,58 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
     });
   };
 
-  handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
-    const {fieldValues, activeSuggestion, suggestions} = this.state;
+  handleKeyDown = debounce(
+    (event: React.KeyboardEvent<HTMLInputElement>) => {
+      event.persist();
 
-    if (event.keyCode === 8) {
-      const lastFieldValue = fieldValues[fieldValues.length - 1];
-      if (Array.isArray(lastFieldValue) && lastFieldValue[1].value.length === 1) {
-        this.setState({
-          fieldValues: [...fieldValues, lastFieldValue[0]],
-        });
+      const {keyCode} = event;
+      const {fieldValues, activeSuggestion, suggestions} = this.state;
+
+      if (keyCode === 8) {
+        const lastFieldValue = fieldValues[fieldValues.length - 1];
+        if (Array.isArray(lastFieldValue) && lastFieldValue[1].value.length === 1) {
+          this.setState({
+            fieldValues: [...fieldValues, lastFieldValue[0]],
+          });
+        }
+        return;
       }
-      return;
-    }
 
-    if (event.keyCode === 13) {
-      this.handleClickSuggestionItem(suggestions[activeSuggestion])();
-      return;
-    }
+      if (keyCode === 13) {
+        this.handleClickSuggestionItem(suggestions[activeSuggestion])();
+        return;
+      }
 
-    if (event.keyCode === 38) {
-      if (activeSuggestion === 0) {
+      if (keyCode === 38) {
+        if (activeSuggestion === 0) {
+          return;
+        }
+        this.setState({activeSuggestion: activeSuggestion - 1}, () => {
+          this.scrollToSuggestion();
+        });
         return;
       }
-      this.setState({activeSuggestion: activeSuggestion - 1}, () => {
-        this.scrollToSuggestion();
-      });
-      return;
-    }
 
-    if (event.keyCode === 40) {
-      if (activeSuggestion === suggestions.length - 1) {
+      if (keyCode === 40) {
+        if (activeSuggestion === suggestions.length - 1) {
+          return;
+        }
+        this.setState({activeSuggestion: activeSuggestion + 1}, () => {
+          this.scrollToSuggestion();
+        });
         return;
       }
-      this.setState({activeSuggestion: activeSuggestion + 1}, () => {
-        this.scrollToSuggestion();
-      });
-      return;
-    }
 
-    if (event.keyCode === 32) {
-      this.setState({
-        fieldValues: [...fieldValues, {value: ' ', type: 'string'}],
-      });
-      return;
-    }
-  };
+      if (keyCode === 32) {
+        this.setState({
+          fieldValues: [...fieldValues, {value: ' ', type: 'string'}],
+        });
+        return;
+      }
+    },
+    DEFAULT_DEBOUNCE_DURATION,
+    {leading: true}
+  );
 
   handleFocus = () => {
     this.setState({
@@ -229,14 +348,14 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
   };
 
   render() {
-    const {error, onBlur, disabled, value} = this.props;
+    const {error, disabled, value, onBlur} = this.props;
     const {showSuggestions, suggestions, activeSuggestion} = this.state;
 
     return (
       <Wrapper ref={this.selectorField}>
         <StyledTextField
           name="from"
-          placeholder={t('ex. strings, numbers, custom')}
+          placeholder={t('an attribute, variable, or header name')}
           onChange={this.handleChange}
           autoComplete="off"
           value={value}
@@ -251,7 +370,7 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
             ref={this.suggestionList}
             data-test-id="panelSelectorField-suggestions"
           >
-            {suggestions.map((suggestion, index) => (
+            {suggestions.slice(0, 50).map((suggestion, index) => (
               <SuggestionItem
                 key={suggestion.value}
                 onClick={this.handleClickSuggestionItem(suggestion)}
@@ -305,6 +424,7 @@ const SuggestionsWrapper = styled('ul')`
   border-radius: 0 0 ${space(0.5)} ${space(0.5)};
   background: ${p => p.theme.white};
   top: 35px;
+  right: 0;
   z-index: 1001;
   overflow: hidden;
   max-height: 200px;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorFieldTypes.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorFieldTypes.tsx
index 725219c7ce..583005429c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorFieldTypes.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorFieldTypes.tsx
@@ -18,92 +18,44 @@ const unaryOperatorSuggestions: Suggestions = [
   },
 ];
 
-const valueSuggestions: Suggestions = [
+const defaultSuggestions: Suggestions = [
+  {type: 'value', value: '**', description: t('everywhere')},
+  {type: 'value', value: 'password', description: t('attributes named "password"')},
+  {type: 'value', value: '$error.value', description: t('the exception value')},
+  {type: 'value', value: '$message', description: t('the log message')},
   {
     type: 'value',
-    value: '$string',
-    description: t('Any string value'),
+    value: 'extra.MyValue',
+    description: t('the key "MyValue" in "Additional Data"'),
   },
   {
     type: 'value',
-    value: '$number',
-    description: t('Any integer or float value'),
+    value: 'extra.**',
+    description: t('everything in "Additional Data"'),
   },
   {
     type: 'value',
-    value: '$datetime',
-    description: t('Timestamps and dates'),
+    value: '$http.headers.x-custom-token',
+    description: t('the X-Custom-Token HTTP header'),
   },
+  {type: 'value', value: '$user.ip_address', description: t('the user IP address')},
   {
     type: 'value',
-    value: '$array',
-    description: t('Any JSON array value'),
+    value: '$frame.vars.foo',
+    description: t('the local variable "foo"'),
   },
   {
     type: 'value',
-    value: '$object',
-    description: t('Any JSON object'),
+    value: 'contexts.device.timezone',
+    description: t('The timezone in the device context'),
   },
   {
     type: 'value',
-    value: '$error',
-    description: t('An exception instance'),
-  },
-  {
-    type: 'value',
-    value: '$stacktrace',
-    description: t('A stacktrace instance'),
-  },
-  {
-    type: 'value',
-    value: '$frame',
-    description: t('A stacktrace frame'),
-  },
-  {
-    type: 'value',
-    value: '$http',
-    description: t('HTTP request context'),
-  },
-  {
-    type: 'value',
-    value: '$user',
-    description: t('User context'),
-  },
-  {
-    type: 'value',
-    value: '$message',
-    description: t('The event message'),
-  },
-  {
-    type: 'value',
-    value: '$thread',
-    description: t('A thread instance'),
-  },
-  {
-    type: 'value',
-    value: '$breadcrumb',
-    description: t('A breadcrumb'),
-  },
-  {
-    type: 'value',
-    value: '$span',
-    description: t('A trace span'),
-  },
-  {
-    type: 'value',
-    value: '$sdk',
-    description: t('SDK name and version information'),
+    value: 'tags.server_name',
+    description: t('the tag "server_name"'),
   },
 ];
 
-const initialSelectors: Suggestions = [...valueSuggestions, ...unaryOperatorSuggestions];
-
-const allSelectors: Suggestions = [
-  ...valueSuggestions,
-  ...unaryOperatorSuggestions,
-  ...binaryOperatorSuggestions,
-];
-
 export type SuggestionType = 'value' | 'unary' | 'binary' | 'string';
 
 export type Suggestions = Array<Suggestion>;
@@ -114,10 +66,4 @@ export type Suggestion = {
   description?: string;
 };
 
-export {
-  initialSelectors,
-  allSelectors,
-  valueSuggestions,
-  unaryOperatorSuggestions,
-  binaryOperatorSuggestions,
-};
+export {unaryOperatorSuggestions, binaryOperatorSuggestions, defaultSuggestions};
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataprivacyRulesPanelHeader.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataprivacyRulesPanelHeader.tsx
new file mode 100644
index 0000000000..5d374ceeaf
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataprivacyRulesPanelHeader.tsx
@@ -0,0 +1,33 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+import {PanelHeader} from 'app/components/panels';
+
+import DataPrivacyRulesEventIdField from './dataPrivacyRulesEventIdField';
+
+type Props = React.ComponentProps<typeof DataPrivacyRulesEventIdField>;
+
+const DataprivacyRulesPanelHeader = (props: Props) => (
+  <StyledPanelHeader hasButtons>
+    <div>{t('Data Privacy Rules')}</div>
+    <DataPrivacyRulesEventIdField {...props} />
+  </StyledPanelHeader>
+);
+
+export default DataprivacyRulesPanelHeader;
+
+const StyledPanelHeader = styled(PanelHeader)`
+  padding-right: ${space(2)};
+  display: grid;
+  grid-gap: ${space(1)};
+  grid-template-rows: 1fr 1fr;
+  justify-content: stretch;
+
+  @media (min-width: ${p => p.theme.breakpoints[1]}) {
+    grid-template-rows: 1fr;
+    grid-template-columns: 1fr 300px;
+    justify-content: space-between;
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/getNewSuggestions.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/getNewSuggestions.tsx
deleted file mode 100644
index 4d5019a240..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/getNewSuggestions.tsx
+++ /dev/null
@@ -1,93 +0,0 @@
-import {
-  initialSelectors,
-  valueSuggestions,
-  binaryOperatorSuggestions,
-  unaryOperatorSuggestions,
-  SuggestionType,
-  Suggestion,
-} from './dataPrivacyRulesPanelSelectorFieldTypes';
-
-type Output = {
-  filteredSuggestions: Array<Suggestion>;
-  showSuggestions?: boolean;
-};
-
-const getFilteredSuggestions = (value: string, type: SuggestionType) => {
-  let valuesToBeFiltered: Array<Suggestion> = [];
-
-  switch (type) {
-    case 'binary': {
-      valuesToBeFiltered = binaryOperatorSuggestions;
-      break;
-    }
-    case 'value': {
-      valuesToBeFiltered = valueSuggestions;
-      break;
-    }
-    case 'unary': {
-      valuesToBeFiltered = unaryOperatorSuggestions;
-      break;
-    }
-    default: {
-      valuesToBeFiltered = initialSelectors;
-    }
-  }
-
-  const filteredSuggestions = valuesToBeFiltered.filter(
-    s => s.value.indexOf(value.toLowerCase()) > -1
-  );
-
-  return {
-    filteredSuggestions,
-    showSuggestions: !(
-      filteredSuggestions.length === 1 && filteredSuggestions[0].value === value
-    ),
-  };
-};
-
-function getNewSuggestions(fieldValues: Array<Suggestion | Array<Suggestion>>): Output {
-  const lastFieldValue = fieldValues[fieldValues.length - 1];
-  const penultimateFieldValue = fieldValues[fieldValues.length - 2];
-
-  if (Array.isArray(lastFieldValue)) {
-    // recursion
-    return getNewSuggestions(lastFieldValue);
-  }
-
-  if (Array.isArray(penultimateFieldValue)) {
-    if (lastFieldValue?.type === 'binary') {
-      // returns filteres values
-      return getFilteredSuggestions(lastFieldValue?.value, 'value');
-    }
-    // returns all binaries without any filter
-    return getFilteredSuggestions('', 'binary');
-  }
-
-  if (lastFieldValue?.type === 'value' && penultimateFieldValue?.type === 'unary') {
-    // returns filteres values
-    return getFilteredSuggestions(lastFieldValue?.value, 'value');
-  }
-
-  if (lastFieldValue?.type === 'unary') {
-    // returns all values without any filter
-    return getFilteredSuggestions('', 'value');
-  }
-
-  if (lastFieldValue?.type === 'string' && penultimateFieldValue?.type === 'value') {
-    // returns all binaries without any filter
-    return getFilteredSuggestions('', 'binary');
-  }
-
-  if (
-    (penultimateFieldValue?.type === 'string' && !lastFieldValue?.value) ||
-    (penultimateFieldValue?.type === 'value' && !lastFieldValue?.value) ||
-    lastFieldValue?.type === 'binary'
-  ) {
-    // returns filteres binaries
-    return getFilteredSuggestions(lastFieldValue?.value, 'binary');
-  }
-
-  return getFilteredSuggestions(lastFieldValue?.value, lastFieldValue?.type);
-}
-
-export default getNewSuggestions;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/utils.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/utils.tsx
index 673c0f9312..036e958f91 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/utils.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/utils.tsx
@@ -28,11 +28,11 @@ function getRuleTypeSelectorFieldLabel(labelType: RULE_TYPE): string {
     case RULE_TYPE.ANYTHING:
       return t('Anything');
     case RULE_TYPE.IMEI:
-      return t('IMEI Numbers');
+      return t('IMEI numbers');
     case RULE_TYPE.MAC:
       return t('MAC addresses');
     case RULE_TYPE.EMAIL:
-      return t('Email Addresses');
+      return t('Email addresses');
     case RULE_TYPE.PEMKEY:
       return t('PEM keys');
     case RULE_TYPE.URLAUTH:
@@ -44,13 +44,13 @@ function getRuleTypeSelectorFieldLabel(labelType: RULE_TYPE): string {
     case RULE_TYPE.UUID:
       return t('UUIDs');
     case RULE_TYPE.CREDITCARD:
-      return t('Credit Card Number');
+      return t('Credit card numbers');
     case RULE_TYPE.PASSWORD:
       return t('Password fields');
     case RULE_TYPE.IP:
-      return t('IP Addresses');
+      return t('IP addresses');
     case RULE_TYPE.PATTERN:
-      return t('Custom Regular Expression');
+      return t('Regex matches');
     default:
       return '';
   }
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacy.tsx b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacy.tsx
index 4437094b59..7a68b351c7 100644
--- a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacy.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacy.tsx
@@ -4,13 +4,11 @@ import Feature from 'app/components/acl/feature';
 import FeatureDisabled from 'app/components/acl/featureDisabled';
 import {PanelAlert} from 'app/components/panels';
 import {t} from 'app/locale';
+import {Organization} from 'app/types';
 
 import ProjectDataPrivacyContent from './projectDataPrivacyContent';
 
-const ProjectDataPrivacy = ({
-  params,
-  organization,
-}: ProjectDataPrivacyContent['props']) => (
+const ProjectDataPrivacy = ({organization}: {organization: Organization}) => (
   <Feature
     features={['datascrubbers-v2']}
     organization={organization}
@@ -22,7 +20,7 @@ const ProjectDataPrivacy = ({
       />
     )}
   >
-    <ProjectDataPrivacyContent params={params} organization={organization} />
+    <ProjectDataPrivacyContent />
   </Feature>
 );
 
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
index a21d5fc9b0..70d7087b9e 100644
--- a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
@@ -9,36 +9,27 @@ import Form from 'app/views/settings/components/forms/form';
 import {fields} from 'app/data/forms/projectGeneralSettings';
 import AsyncView from 'app/views/asyncView';
 import ProjectActions from 'app/actions/projectActions';
-import {Organization} from 'app/types';
 import SentryTypes from 'app/sentryTypes';
 
 import DataPrivacyRulesPanel from '../components/dataPrivacyRulesPanel/dataPrivacyRulesPanel';
 
-type Props = {
-  organization: Organization;
-  params: {
-    orgId: string;
-    projectId: string;
-  };
-};
-
-class ProjectDataPrivacyContent extends AsyncView<Props> {
+class ProjectDataPrivacyContent extends AsyncView<{}> {
   static contextTypes = {
     organization: SentryTypes.Organization,
+    project: SentryTypes.Project,
     // left the router contextType to satisfy the compiler
     router: PropTypes.object,
   };
 
   getEndpoints(): ReturnType<AsyncView['getEndpoints']> {
-    const {orgId, projectId} = this.props.params;
-    return [['data', `/projects/${orgId}/${projectId}/`]];
+    const {organization, project} = this.context;
+    return [['data', `/projects/${organization.slug}/${project.slug}/`]];
   }
 
   renderBody() {
-    const {organization} = this.context;
+    const {organization, project} = this.context;
     const initialData = this.state.data;
-    const {orgId, projectId} = this.props.params;
-    const endpoint = `/projects/${orgId}/${projectId}/`;
+    const endpoint = `/projects/${organization.slug}/${project.slug}/`;
     const access = new Set(organization.access);
     const features = new Set(organization.features);
     const relayPiiConfig = initialData?.relayPiiConfig;
@@ -82,7 +73,7 @@ class ProjectDataPrivacyContent extends AsyncView<Props> {
                 'These rules can be configured at the organization level in [linkToOrganizationSecurityAndPrivacy].',
                 {
                   linkToOrganizationSecurityAndPrivacy: (
-                    <Link to={`/settings/${orgId}/security-and-privacy/`}>
+                    <Link to={`/settings/${organization.slug}/security-and-privacy/`}>
                       {t('Security and Privacy')}
                     </Link>
                   ),
diff --git a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesPanelSelectorField.spec.tsx.snap b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesPanelSelectorField.spec.tsx.snap
index 5bb1e5a251..7f27873305 100644
--- a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesPanelSelectorField.spec.tsx.snap
+++ b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesPanelSelectorField.spec.tsx.snap
@@ -3,6 +3,65 @@
 exports[`DataPrivacyRulesPanelSelectorField default render 1`] = `
 <DataPrivacyRulesPanelSelectorField
   onChange={[MockFunction]}
+  selectorSuggestions={
+    Array [
+      Object {
+        "description": "everywhere",
+        "type": "value",
+        "value": "**",
+      },
+      Object {
+        "description": "attributes named \\"password\\"",
+        "type": "value",
+        "value": "password",
+      },
+      Object {
+        "description": "the exception value",
+        "type": "value",
+        "value": "$error.value",
+      },
+      Object {
+        "description": "the log message",
+        "type": "value",
+        "value": "$message",
+      },
+      Object {
+        "description": "the key \\"MyValue\\" in \\"Additional Data\\"",
+        "type": "value",
+        "value": "extra.MyValue",
+      },
+      Object {
+        "description": "everything in \\"Additional Data\\"",
+        "type": "value",
+        "value": "extra.**",
+      },
+      Object {
+        "description": "the X-Custom-Token HTTP header",
+        "type": "value",
+        "value": "$http.headers.x-custom-token",
+      },
+      Object {
+        "description": "the user IP address",
+        "type": "value",
+        "value": "$user.ip_address",
+      },
+      Object {
+        "description": "the local variable \\"foo\\"",
+        "type": "value",
+        "value": "$frame.vars.foo",
+      },
+      Object {
+        "description": "The timezone in the device context",
+        "type": "value",
+        "value": "contexts.device.timezone",
+      },
+      Object {
+        "description": "the tag \\"server_name\\"",
+        "type": "value",
+        "value": "tags.server_name",
+      },
+    ]
+  }
   value="$string"
 >
   <Wrapper>
@@ -17,7 +76,7 @@ exports[`DataPrivacyRulesPanelSelectorField default render 1`] = `
         onChange={[Function]}
         onFocus={[Function]}
         onKeyDown={[Function]}
-        placeholder="ex. strings, numbers, custom"
+        placeholder="an attribute, variable, or header name"
         required={false}
         value="$string"
       >
@@ -30,7 +89,7 @@ exports[`DataPrivacyRulesPanelSelectorField default render 1`] = `
           onChange={[Function]}
           onFocus={[Function]}
           onKeyDown={[Function]}
-          placeholder="ex. strings, numbers, custom"
+          placeholder="an attribute, variable, or header name"
           required={false}
           value="$string"
         >
@@ -49,7 +108,7 @@ exports[`DataPrivacyRulesPanelSelectorField default render 1`] = `
                 onChange={[Function]}
                 onFocus={[Function]}
                 onKeyDown={[Function]}
-                placeholder="ex. strings, numbers, custom"
+                placeholder="an attribute, variable, or header name"
                 required={false}
                 type="text"
                 value="$string"
diff --git a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.spec.tsx b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.spec.tsx
index 7768e4487b..4f1aca2eba 100644
--- a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.spec.tsx
+++ b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.spec.tsx
@@ -4,6 +4,7 @@ import DataPrivacyRulesPanelSelectorField from 'app/views/settings/components/da
 import {
   binaryOperatorSuggestions,
   unaryOperatorSuggestions,
+  defaultSuggestions,
 } from 'app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorFieldTypes';
 import {mountWithTheme} from 'sentry-test/enzyme';
 
@@ -13,7 +14,12 @@ function renderComponent({
   ...props
 }: Partial<DataPrivacyRulesPanelSelectorField['props']>) {
   return mountWithTheme(
-    <DataPrivacyRulesPanelSelectorField onChange={onChange} value={value} {...props} />
+    <DataPrivacyRulesPanelSelectorField
+      selectorSuggestions={defaultSuggestions}
+      onChange={onChange}
+      value={value}
+      {...props}
+    />
   );
 }
 
@@ -24,7 +30,7 @@ describe('DataPrivacyRulesPanelSelectorField', () => {
     expect(wrapper).toMatchSnapshot();
   });
 
-  it('display initialSelectors if input empty and focused', () => {
+  it('display defaultSuggestions if input is empty and focused', () => {
     const wrapper = renderComponent({value: ''});
     wrapper.find('input').simulate('focus');
     const suggestions = wrapper
@@ -32,8 +38,20 @@ describe('DataPrivacyRulesPanelSelectorField', () => {
       .hostNodes()
       .children();
 
-    // [...valueSuggestions, ...unaryOperatorSuggestions].length === 16
-    expect(suggestions).toHaveLength(16);
+    // [...defaultSuggestions, ...unaryOperatorSuggestions].length === 12
+    expect(suggestions).toHaveLength(12);
+  });
+
+  it('display defaultSuggestions if input is empty, focused and has length 3', () => {
+    const wrapper = renderComponent({value: '   '});
+    wrapper.find('input').simulate('focus');
+    const suggestions = wrapper
+      .find('[data-test-id="panelSelectorField-suggestions"]')
+      .hostNodes()
+      .children();
+
+    // [...defaultSuggestions, ...unaryOperatorSuggestions].length === 12
+    expect(suggestions).toHaveLength(12);
   });
 
   it('display binaryOperatorSuggestions if penultimateFieldValue has type string', () => {
@@ -52,7 +70,7 @@ describe('DataPrivacyRulesPanelSelectorField', () => {
     expect(suggestions.at(1).text()).toEqual(binaryOperatorSuggestions[1].value);
   });
 
-  it('display initialSelectors if penultimateFieldValue has type binary', () => {
+  it('display defaultSuggestions + unaryOperatorSuggestions, if penultimateFieldValue has type binary', () => {
     const wrapper = renderComponent({value: 'foo && '});
     wrapper.find('input').simulate('focus');
     const suggestions = wrapper
@@ -60,10 +78,10 @@ describe('DataPrivacyRulesPanelSelectorField', () => {
       .hostNodes()
       .children();
 
-    // initialSelectors.length === 16
-    expect(suggestions).toHaveLength(16);
+    // [...defaultSuggestions, ...unaryOperatorSuggestions].length === 12
+    expect(suggestions).toHaveLength(12);
     // !
-    expect(suggestions.at(15).text()).toEqual(unaryOperatorSuggestions[0].value);
+    expect(suggestions.at(11).text()).toEqual(unaryOperatorSuggestions[0].value);
   });
 
   it('display binaryOperatorSuggestions if penultimateFieldValue has type value', () => {
@@ -98,7 +116,7 @@ describe('DataPrivacyRulesPanelSelectorField', () => {
     expect(suggestions.at(1).text()).toEqual(binaryOperatorSuggestions[1].value);
   });
 
-  it('display valueSuggestions if penultimateFieldValue has type unary', () => {
+  it('display defaultSuggestions if penultimateFieldValue has type unary', () => {
     const wrapper = renderComponent({value: 'foo && !'});
     wrapper.find('input').simulate('focus');
     const suggestions = wrapper
@@ -106,10 +124,13 @@ describe('DataPrivacyRulesPanelSelectorField', () => {
       .hostNodes()
       .children();
 
-    // valueSuggestions.length === 15
-    expect(suggestions).toHaveLength(15);
-    // $string
-    expect(suggestions.at(0).text()).toEqual('$string(Any string value)');
+    // defaultSuggestions.length === 11
+    expect(suggestions).toHaveLength(11);
+
+    // everywhere
+    expect(suggestions.at(0).text()).toEqual(
+      `${defaultSuggestions[0].value}(${defaultSuggestions[0].description})`
+    );
   });
 
   it('click on a suggestion should be possible', () => {
@@ -125,7 +146,7 @@ describe('DataPrivacyRulesPanelSelectorField', () => {
       .children();
 
     suggestions.at(1).simulate('click');
-    expect(wrapper.state().fieldValues[2].value).toBe('$number');
+    expect(wrapper.state().fieldValues[2].value).toBe(defaultSuggestions[1].value);
   });
 
   it('suggestions keyDown and keyUp should work', () => {
