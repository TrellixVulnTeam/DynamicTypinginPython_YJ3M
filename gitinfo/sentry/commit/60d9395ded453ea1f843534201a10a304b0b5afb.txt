commit 60d9395ded453ea1f843534201a10a304b0b5afb
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Wed Nov 27 12:18:58 2019 -0800

    ref(pagerduty): Add ExternalEventSerializer (#15640)
    
    * ref(pagerduty): Add ExternalEventSerializer
    
    * camelCase
    
    * lowercase severity
    
    * add comment

diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index da7e7241b6..f34732a986 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -377,3 +377,35 @@ class SimpleEventSerializer(EventSerializer):
             # Needed to generate minidump links in UI
             "crashFile": attrs["crash_file"],
         }
+
+
+class ExternalEventSerializer(EventSerializer):
+    """
+    Event serializer for the minimum event data needed to send to an external service. This
+    should be used for Integrations that need to include event data.
+    """
+
+    def serialize(self, obj, attrs, user):
+        tags = [{"key": key.split("sentry:", 1)[-1], "value": value} for key, value in obj.tags]
+        for tag in tags:
+            query = convert_user_tag_to_query(tag["key"], tag["value"])
+            if query:
+                tag["query"] = query
+
+        user = obj.get_minimal_user()
+
+        return {
+            "groupID": six.text_type(obj.group_id) if obj.group_id else None,
+            "eventID": six.text_type(obj.event_id),
+            "project": six.text_type(obj.project_id),
+            # XXX for 'message' this doesn't do the proper resolution of logentry
+            # etc. that _get_legacy_message_with_meta does.
+            "message": obj.message,
+            "title": obj.title,
+            "location": obj.location,
+            "culprit": obj.culprit,
+            "user": user and user.get_api_context(),
+            "tags": tags,
+            "platform": obj.platform,
+            "datetime": obj.datetime.strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
+        }
diff --git a/src/sentry/integrations/pagerduty/client.py b/src/sentry/integrations/pagerduty/client.py
index dd253be911..fba917b2c0 100644
--- a/src/sentry/integrations/pagerduty/client.py
+++ b/src/sentry/integrations/pagerduty/client.py
@@ -1,8 +1,16 @@
 from __future__ import absolute_import
 
-from sentry.utils import json
 from sentry.integrations.client import ApiClient
 from sentry.models import EventCommon
+from sentry.api.serializers import serialize, ExternalEventSerializer
+
+LEVEL_SEVERITY_MAP = {
+    "debug": "info",
+    "info": "info",
+    "warning": "warning",
+    "error": "error",
+    "fatal": "critical",
+}
 
 
 class PagerDutyClient(ApiClient):
@@ -18,25 +26,26 @@ class PagerDutyClient(ApiClient):
         if not headers:
             headers = {"Content-Type": "application/json"}
 
-        # (XXX) Meredith: We stringify the data ahead of time in send_trigger (because reasons)
-        # so we have to pass json=False since True is the default.
-        return self._request(method, path, headers=headers, data=data, params=params, json=False)
+        return self._request(method, path, headers=headers, data=data, params=params)
 
     def send_trigger(self, data):
-        # not sure if this will only been events for now
+        # expected payload: https://v2.developer.pagerduty.com/docs/send-an-event-events-api-v2
+        # for now, only construct the payload if data is an event
         if isinstance(data, EventCommon):
             source = data.transaction or data.culprit or "<unknown>"
             group = data.group
+            level = data.get_tag("level") or "error"
+            custom_details = serialize(data, None, ExternalEventSerializer())
             payload = {
                 "routing_key": self.integration_key,
                 "event_action": "trigger",
                 "dedup_key": group.qualified_short_id,
                 "payload": {
                     "summary": data.message or data.title,
-                    "severity": "error",
+                    "severity": LEVEL_SEVERITY_MAP[level],
                     "source": source,
                     "component": group.project.slug,
-                    "custom_details": data.as_dict(),
+                    "custom_details": custom_details,
                 },
                 "links": [
                     {
@@ -47,9 +56,7 @@ class PagerDutyClient(ApiClient):
                     }
                 ],
             }
-        # (XXX) Meredith: The 'datetime' property that is included in as_dict doesn't
-        # get properly serializied in the requests library so we stringify it here instead.
-        return self.post("/", data=json.dumps(payload))
+        return self.post("/", data=payload)
 
     def send_acknowledge(self, data):
         pass
diff --git a/tests/sentry/integrations/pagerduty/test_client.py b/tests/sentry/integrations/pagerduty/test_client.py
index be823ecfc7..73f8aa3ad7 100644
--- a/tests/sentry/integrations/pagerduty/test_client.py
+++ b/tests/sentry/integrations/pagerduty/test_client.py
@@ -2,9 +2,9 @@ from __future__ import absolute_import
 
 import copy
 
-from sentry.utils import json
 from mock import patch
 
+from sentry.api.serializers import serialize, ExternalEventSerializer
 from sentry.testutils import APITestCase
 from sentry.testutils.helpers.datetime import iso_format, before_now
 from sentry.models import Integration, PagerDutyService
@@ -57,6 +57,7 @@ class PagerDutyClientTest(APITestCase):
 
         integration_key = self.service.integration_key
         client = self.installation.get_client(integration_key=integration_key)
+        custom_details = serialize(event, None, ExternalEventSerializer())
 
         client.send_trigger(event)
         data = {
@@ -68,7 +69,7 @@ class PagerDutyClientTest(APITestCase):
                 "severity": "error",
                 "source": event.transaction or event.culprit,
                 "component": self.project.slug,
-                "custom_details": event.as_dict(),
+                "custom_details": custom_details,
             },
             "links": [
                 {
@@ -77,4 +78,4 @@ class PagerDutyClientTest(APITestCase):
                 }
             ],
         }
-        mock_request.assert_called_once_with("POST", "/", data=json.dumps(data))
+        mock_request.assert_called_once_with("POST", "/", data=data)
