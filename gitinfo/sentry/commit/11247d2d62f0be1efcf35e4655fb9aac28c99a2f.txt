commit 11247d2d62f0be1efcf35e4655fb9aac28c99a2f
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Aug 24 16:50:48 2013 -0700

    Correctly handle quota trees

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index e246272d3d..4dc5654c07 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -505,7 +505,7 @@ SENTRY_QUOTA_OPTIONS = {}
 # The default value for project-level quotas
 SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE = '90%'
 # The maximum number of events per minute the system should accept.
-SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE = 100
+SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE = 0
 
 SENTRY_RAVEN_JS_URL = 'd3nslu0hdya83q.cloudfront.net/dist/1.0/raven.min.js'
 
diff --git a/src/sentry/quotas/base.py b/src/sentry/quotas/base.py
index 6b190e88a9..94c17109cc 100644
--- a/src/sentry/quotas/base.py
+++ b/src/sentry/quotas/base.py
@@ -22,19 +22,35 @@ class Quota(object):
     def is_rate_limited(self, project):
         return False
 
+    def get_active_quota(self, project):
+        quotas = filter(bool, [
+            self.get_project_quota(project),
+            self.get_team_quota(project.team),
+            self.get_system_quota(),
+        ])
+        return min(quotas)
+
+    def translate_quota(self, quota, parent_quota):
+        if quota.endswith('%'):
+            pct = int(quota[:-1])
+            quota = parent_quota * pct / 100
+        return int(quota)
+
     def get_project_quota(self, project):
-        proj_setting = self.get_option('per_minute', project, '')
-        if proj_setting is None:
-            proj_setting = settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE
-        else:
-            proj_setting = int(proj_setting)
-        if proj_setting.endswith('%'):
-            pct = int(proj_setting[:-1])
-            proj_setting = self.get_team_quota(project.team) * pct / 100
-        return proj_setting
+        project_quota = self.get_option('per_minute', project, '')
+        if project_quota is None:
+            project_quota = settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE
+
+        return self.translate_quota(
+            project_quota,
+            self.get_team_quota(project.team),
+        )
 
     def get_team_quota(self, team):
-        return settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE
+        return self.translate_quota(
+            settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE,
+            self.get_system_quota()
+        )
 
-    def get_system_quota(self, team):
+    def get_system_quota(self):
         return settings.SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE
diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
index 9c9c8c7416..62ab10c91d 100644
--- a/src/sentry/quotas/redis.py
+++ b/src/sentry/quotas/redis.py
@@ -30,7 +30,7 @@ class RedisQuota(Quota):
         })
 
     def is_rate_limited(self, project):
-        quota = self.get_project_quota(project)
+        quota = self.get_active_quota(project)
         if not quota:
             return False
 
diff --git a/src/sentry/templates/sentry/projects/quotas.html b/src/sentry/templates/sentry/projects/quotas.html
index 211acd1978..76bec6b181 100644
--- a/src/sentry/templates/sentry/projects/quotas.html
+++ b/src/sentry/templates/sentry/projects/quotas.html
@@ -16,9 +16,9 @@
         <p>{% blocktrans %}Quotas limit on a per-minute basis, which means that they rollover at the start of a new minute. When you attempt to send an event and the project is over it's quota, the client will receive an HTTP 429 (Too Many Requests) response.{% endblocktrans %}</p>
 
         {% if team_quota %}
-            <p>{% blocktrans %}Your team has <strong>500 events per minute</strong> allocated collectively among projects.{% endblocktrans %}</p>
+            <p>{% blocktrans %}Your team has <strong>{{ team_quota }} events per minute</strong> allocated collectively among projects.{% endblocktrans %}</p>
         {% elif system_quota %}
-            <p>{% blocktrans %}The Sentry system has <strong>500 events per minute</strong> allocated collectively among projects.{% endblocktrans %}</p>
+            <p>{% blocktrans %}The Sentry system has <strong>{{ system_quota }} events per minute</strong> allocated collectively among projects.{% endblocktrans %}</p>
         {% endif %}
 
         {% csrf_token %}
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index 4f7a5f17a8..b94110d8b5 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -183,9 +183,12 @@ class ProjectQuotasForm(forms.Form):
     def __init__(self, project, *args, **kwargs):
         self.project = project
         super(ProjectQuotasForm, self).__init__(*args, **kwargs)
-        self.fields['per_minute'].initial = ProjectOption.objects.get_value(
-            self.project, 'quotas:per_minute', settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE
+        per_minute = ProjectOption.objects.get_value(
+            self.project, 'quotas:per_minute', ''
         )
+        if per_minute == '':
+            per_minute = settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE
+        self.fields['per_minute'].initial = per_minute
 
     def clean_per_minute(self):
         value = self.cleaned_data.get('per_minute')
diff --git a/src/sentry/web/frontend/projects.py b/src/sentry/web/frontend/projects.py
index 46201c66ea..43ce54d5c9 100644
--- a/src/sentry/web/frontend/projects.py
+++ b/src/sentry/web/frontend/projects.py
@@ -13,6 +13,7 @@ from django.views.decorators.csrf import csrf_protect
 from django.views.decorators.http import require_http_methods
 from django.utils.translation import ugettext_lazy as _
 
+from sentry import app
 from sentry.constants import (
     MEMBER_OWNER, STATUS_HIDDEN, DEFAULT_ALERT_PROJECT_THRESHOLD)
 from sentry.models import Project, ProjectKey, Team, TagKey
@@ -276,6 +277,8 @@ def manage_project_quotas(request, team, project):
     context = {
         'team': team,
         'page': 'quotas',
+        'system_quota': app.quotas.get_system_quota(),
+        'team_quota': app.quotas.get_team_quota(team),
         'project': project,
         'form': form,
     }
