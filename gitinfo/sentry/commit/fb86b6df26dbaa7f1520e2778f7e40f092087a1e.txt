commit fb86b6df26dbaa7f1520e2778f7e40f092087a1e
Author: Mark Story <mark@sentry.io>
Date:   Fri Oct 25 10:41:20 2019 -0400

    feat(discover2) Add tag keys to the field list autocomplete (#15245)
    
    Add an organization's tag keys to the field list autocomplete and type
    them all as strings. This makes it possible to build custom queries
    using the org's tags.
    
    I've also improved the workflow by generating column names. If the
    column is unnamed and a field is picked the name will default to the
    field name.
    
    Fixes SEN-1179
    Fixes SEN-1181

diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
index dbc8f66a9c..e0fd234c2c 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
@@ -142,7 +142,7 @@ export const FIELDS: {[key: string]: ColumnValueType} = {
   p75: 'number',
   p95: 'number',
 };
-export type Field = keyof typeof FIELDS | '';
+export type Field = keyof typeof FIELDS | string | '';
 
 // This list should be removed with the tranaction-events feature flag.
 export const TRACING_FIELDS = [
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index a9820dbf0b..5c8459a84d 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -8,6 +8,7 @@ import {Organization} from 'app/types';
 import withApi from 'app/utils/withApi';
 
 import Pagination from 'app/components/pagination';
+import {fetchOrganizationTags} from 'app/actionCreators/tags';
 
 import {DEFAULT_EVENT_VIEW_V1} from '../data';
 import EventView, {isAPIPayloadSimilar} from '../eventView';
@@ -27,6 +28,7 @@ type TableState = {
   pageLinks: null | string;
 
   tableData: TableData | null | undefined;
+  tagKeys: null | string[];
 };
 
 /**
@@ -51,8 +53,8 @@ class Table extends React.PureComponent<TableProps, TableState> {
 
     eventView: EventView.fromLocation(this.props.location),
     pageLinks: null,
-
     tableData: null,
+    tagKeys: null,
   };
 
   componentDidMount() {
@@ -112,10 +114,18 @@ class Table extends React.PureComponent<TableProps, TableState> {
           error: err.responseJSON.detail,
         });
       });
+
+    fetchOrganizationTags(this.props.api, organization.slug)
+      .then(tags => {
+        this.setState({tagKeys: tags.map(({key}) => key)});
+      })
+      .catch(() => {
+        // Do nothing.
+      });
   };
 
   render() {
-    const {pageLinks, eventView, tableData, isLoading, error} = this.state;
+    const {pageLinks, eventView, tableData, tagKeys, isLoading, error} = this.state;
 
     return (
       <Container>
@@ -125,6 +135,7 @@ class Table extends React.PureComponent<TableProps, TableState> {
           error={error}
           eventView={eventView}
           tableData={tableData}
+          tagKeys={tagKeys}
         />
         <Pagination pageLinks={pageLinks} />
       </Container>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
index 73525d7f3e..0e07949d53 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
@@ -1,5 +1,6 @@
 import React, {ReactText} from 'react';
 import styled from 'react-emotion';
+import {uniq} from 'lodash';
 
 import {t} from 'app/locale';
 import {Form, SelectField, TextField} from 'app/components/forms';
@@ -23,6 +24,7 @@ type ModalActions = {
 
 export function renderTableModalEditColumnFactory(
   organization: Organization,
+  tagKeys: null | string[],
   actions: ModalActions
 ) {
   return {
@@ -37,6 +39,7 @@ export function renderTableModalEditColumnFactory(
           organization={organization}
           indexColumnOrder={indexColumnOrder}
           column={column}
+          tagKeys={tagKeys}
           actions={{
             createColumn: actions.createColumn,
             updateColumn: actions.updateColumn,
@@ -56,6 +59,7 @@ type TableModalEditColumnFormProps = {
   organization: Organization;
   indexColumnOrder?: number;
   column?: TableColumn<ReactText>;
+  tagKeys: null | string[];
 
   actions: ModalActions & {
     onSuccess?: () => void;
@@ -65,6 +69,7 @@ type TableModalEditColumnFormProps = {
 type TableModalEditColumnFormState = {
   aggregations: Aggregation[];
   fields: Field[];
+  name: string;
 };
 
 class TableModalEditColumnBodyForm extends React.Component<
@@ -78,22 +83,31 @@ class TableModalEditColumnBodyForm extends React.Component<
     ),
     fields: filterFieldByAggregation(
       this.props.organization,
+      this.props.tagKeys,
       this.props.column ? this.props.column.aggregation : ''
     ),
+    name: this.props.column ? this.props.column.name : '',
   };
 
   onChangeAggregation = (value: Aggregation) => {
+    const {organization, tagKeys} = this.props;
     this.setState({
-      fields: filterFieldByAggregation(this.props.organization, value),
+      fields: filterFieldByAggregation(organization, tagKeys, value),
     });
   };
 
   onChangeField = (value: Field) => {
+    const name = this.state.name === '' ? String(value) : this.state.name;
     this.setState({
       aggregations: filterAggregationByField(this.props.organization, value),
+      name,
     });
   };
 
+  onChangeName = (value: string) => {
+    this.setState({name: value});
+  };
+
   onSubmitForm = (values: any) => {
     const {indexColumnOrder, column} = this.props;
     const {createColumn, updateColumn, onSuccess, onError} = this.props.actions;
@@ -127,7 +141,7 @@ class TableModalEditColumnBodyForm extends React.Component<
           initialData={{
             aggregation: column ? column.aggregation : '',
             field: column ? column.field : '',
-            name: column ? column.name : '',
+            name: this.state.name,
           }}
         >
           <FormRow>
@@ -155,8 +169,10 @@ class TableModalEditColumnBodyForm extends React.Component<
             <TextField
               required
               name="name"
+              value={this.state.name}
               label={t('Column Name')}
               placeholder="Column Name"
+              onChange={this.onChangeName}
             />
           </FormRow>
         </Form>
@@ -183,20 +199,22 @@ function filterAggregationByField(organization: Organization, f?: Field): Aggreg
   if (!organization.features.includes('transaction-events')) {
     functionList = functionList.filter(item => !TRACING_FIELDS.includes(item));
   }
-  if (!f || !FIELDS[f]) {
+  if (!f) {
     return functionList as Aggregation[];
   }
+  // Unknown fields are likely tag keys and thus strings.
+  const fieldType = FIELDS[f] || 'string';
 
-  if (FIELDS[f] === 'never') {
+  if (fieldType === 'never') {
     return [];
   }
 
   return functionList.reduce(
     (accumulator, a) => {
       if (
-        AGGREGATIONS[a].type.includes(FIELDS[f]) ||
+        AGGREGATIONS[a].type.includes(fieldType) ||
         AGGREGATIONS[a].type === '*' ||
-        FIELDS[f] === '*'
+        fieldType === '*'
       ) {
         accumulator.push(a as Aggregation);
       }
@@ -207,8 +225,15 @@ function filterAggregationByField(organization: Organization, f?: Field): Aggreg
   );
 }
 
-function filterFieldByAggregation(organization: Organization, a?: Aggregation): Field[] {
+function filterFieldByAggregation(
+  organization: Organization,
+  tagKeys: null | string[],
+  a?: Aggregation
+): Field[] {
   let fieldList = Object.keys(FIELDS);
+  if (tagKeys && tagKeys.length) {
+    fieldList = uniq(fieldList.concat(tagKeys));
+  }
   if (!organization.features.includes('transaction-events')) {
     fieldList = fieldList.filter(item => !TRACING_FIELDS.includes(item));
   }
@@ -219,14 +244,16 @@ function filterFieldByAggregation(organization: Organization, a?: Aggregation):
 
   return fieldList.reduce(
     (accumulator, f) => {
-      if (!FIELDS[f] || FIELDS[f] === 'never') {
+      // tag keys are all strings, and values not in FIELDS is a tag.
+      const fieldType = FIELDS[f] || 'string';
+      if (fieldType === 'never') {
         return accumulator;
       }
 
       if (
-        AGGREGATIONS[a].type.includes(FIELDS[f]) ||
+        AGGREGATIONS[a].type.includes(fieldType) ||
         AGGREGATIONS[a].type === '*' ||
-        FIELDS[f] === '*'
+        fieldType === '*'
       ) {
         accumulator.push(f as Field);
       }
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
index 6fa8193dfc..7c13990c8c 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
@@ -24,6 +24,7 @@ export type TableViewProps = {
 
   eventView: EventView;
   tableData: TableData | null | undefined;
+  tagKeys: null | string[];
 };
 
 /**
@@ -216,7 +217,7 @@ class TableView extends React.Component<TableViewProps> {
   };
 
   render() {
-    const {organization, isLoading, error, tableData, eventView} = this.props;
+    const {organization, isLoading, error, tableData, tagKeys, eventView} = this.props;
 
     const columnOrder = eventView.getColumns();
     const columnSortBy = eventView.getSorts();
@@ -224,7 +225,7 @@ class TableView extends React.Component<TableViewProps> {
     const {
       renderModalBodyWithForm,
       renderModalFooter,
-    } = renderTableModalEditColumnFactory(organization, {
+    } = renderTableModalEditColumnFactory(organization, tagKeys, {
       createColumn: this._createColumn,
       updateColumn: this._updateColumn,
     });
