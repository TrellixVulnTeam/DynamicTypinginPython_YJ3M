commit 2aabc9b537fb9e94719a8ffca2b83f97efd87063
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Oct 11 12:27:53 2018 -0700

    feat(integration): Jira added default project field. (#9857)
    
    * added default field for jira cannot test.
    
    * Added changes to accomodate jira's dynamic fields.
    
    * Fixed tests.
    
    * removed merge method for jira integration.
    
    * added priority and issue type defaults.
    
    * Added test to ensure default doesn't overwrite param added priority and issue type defaults
    
    * Revised for-loops

diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index 3ae4387b2c..b83ffc70d8 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -253,6 +253,9 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
     def get_issue_url(self, key, **kwargs):
         return '%s/browse/%s' % (self.model.metadata['base_url'], key)
 
+    def get_persisted_default_config_fields(self):
+        return ['project', 'issuetype', 'priority']
+
     def get_group_description(self, group, event, **kwargs):
         output = [
             u'Sentry Issue: [{}|{}]'.format(
@@ -382,12 +385,13 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
     def get_create_issue_config(self, group, **kwargs):
         fields = super(JiraIntegration, self).get_create_issue_config(group, **kwargs)
         params = kwargs.get('params', {})
+        defaults = self.get_project_defaults(group.project_id)
 
-        # TODO(jess): update if we allow saving a default project key
-
+        default_project = params.get('project', defaults.get('project'))
         client = self.get_client()
+
         try:
-            resp = client.get_create_meta(params.get('project'))
+            resp = client.get_create_meta(default_project)
         except ApiUnauthorized:
             raise IntegrationError(
                 'Jira returned: Unauthorized. '
@@ -402,9 +406,7 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
             )
 
         # check if the issuetype was passed as a parameter
-        issue_type = params.get('issuetype')
-
-        # TODO(jess): update if we allow specifying a default issuetype
+        issue_type = params.get('issuetype', defaults.get('issuetype'))
 
         issue_type_meta = self.get_issue_type_meta(issue_type, meta)
 
@@ -467,9 +469,7 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
                 # whenever priorities are available, put the available ones in the list.
                 # allowedValues for some reason doesn't pass enough info.
                 field['choices'] = self.make_choices(client.get_priorities())
-                # TODO(jess): fix if we are going to allow default priority
-                # field['default'] = self.get_option('default_priority', group.project) or ''
-                field['default'] = ''
+                field['default'] = defaults.get('priority', '')
             elif field['name'] == 'fixVersions':
                 field['choices'] = self.make_choices(client.get_versions(meta['key']))
 
diff --git a/tests/sentry/integrations/jira/test_integration.py b/tests/sentry/integrations/jira/test_integration.py
index 400758717a..da2f2ac71c 100644
--- a/tests/sentry/integrations/jira/test_integration.py
+++ b/tests/sentry/integrations/jira/test_integration.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import json
 import mock
+import six
 
 from django.core.urlresolvers import reverse
 
@@ -339,7 +340,10 @@ SAMPLE_TRANSITION_RESPONSE = """
 
 class MockJiraApiClient(object):
     def get_create_meta(self, project=None):
-        return json.loads(SAMPLE_CREATE_META_RESPONSE)
+        resp = json.loads(SAMPLE_CREATE_META_RESPONSE)
+        if project == '10001':
+            resp['projects'][0]['id'] = '10001'
+        return resp
 
     def get_create_meta_for_project(self, project):
         return self.get_create_meta()['projects'][0]
@@ -418,6 +422,76 @@ class JiraIntegrationTest(APITestCase):
                 'updatesForm': True,
             }]
 
+    def test_get_create_issue_config_with_default_and_param(self):
+        org = self.organization
+        self.login_as(self.user)
+        group = self.create_group()
+        self.create_event(group=group)
+
+        integration = Integration.objects.create(
+            provider='jira',
+            name='Example Jira',
+        )
+        org_integration = integration.add_organization(org, self.user)
+        org_integration.config = {
+            'project_issue_defaults': {
+                six.text_type(group.project_id): {'project': '10001'}
+            }
+        }
+        org_integration.save()
+        installation = integration.get_installation(org.id)
+
+        def get_client():
+            return MockJiraApiClient()
+
+        with mock.patch.object(installation, 'get_client', get_client):
+            fields = installation.get_create_issue_config(group, params={'project': '10000'})
+            project_field = [field for field in fields if field['name'] == 'project'][0]
+
+            assert project_field == {
+                'default': '10000',
+                'choices': [('10000', 'EX'), ('10001', 'ABC')],
+                'type': 'select',
+                'name': 'project',
+                'label': 'Jira Project',
+                'updatesForm': True,
+            }
+
+    def test_get_create_issue_config_with_default(self):
+        org = self.organization
+        self.login_as(self.user)
+        group = self.create_group()
+        self.create_event(group=group)
+
+        integration = Integration.objects.create(
+            provider='jira',
+            name='Example Jira',
+        )
+        org_integration = integration.add_organization(org, self.user)
+        org_integration.config = {
+            'project_issue_defaults': {
+                six.text_type(group.project_id): {'project': '10001'}
+            }
+        }
+        org_integration.save()
+        installation = integration.get_installation(org.id)
+
+        def get_client():
+            return MockJiraApiClient()
+
+        with mock.patch.object(installation, 'get_client', get_client):
+            fields = installation.get_create_issue_config(group)
+            project_field = [field for field in fields if field['name'] == 'project'][0]
+
+            assert project_field == {
+                'default': '10001',
+                'choices': [('10000', 'EX'), ('10001', 'ABC')],
+                'type': 'select',
+                'name': 'project',
+                'label': 'Jira Project',
+                'updatesForm': True,
+            }
+
     def test_get_link_issue_config(self):
         org = self.organization
         self.login_as(self.user)
