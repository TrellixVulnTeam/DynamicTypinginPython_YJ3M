commit 99fa2ab621604ebcc63d3cb31954cfd659029e3b
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 26 19:55:46 2012 -0800

    Add account recovery flow

diff --git a/src/sentry/migrations/0069_auto__add_lostpasswordhash.py b/src/sentry/migrations/0069_auto__add_lostpasswordhash.py
new file mode 100644
index 0000000000..9fafc0deb5
--- /dev/null
+++ b/src/sentry/migrations/0069_auto__add_lostpasswordhash.py
@@ -0,0 +1,260 @@
+# -*- coding: utf-8 -*-
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Adding model 'LostPasswordHash'
+        db.create_table('sentry_lostpasswordhash', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'], unique=True)),
+            ('hash', self.gf('django.db.models.fields.CharField')(max_length=32)),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+        ))
+        db.send_create_signal('sentry', ['LostPasswordHash'])
+
+
+    def backwards(self, orm):
+        # Deleting model 'LostPasswordHash'
+        db.delete_table('sentry_lostpasswordhash')
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filterkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'FilterKey'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'logger', 'culprit', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'unique': 'True'})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.pendingteammember': {
+            'Meta': {'unique_together': "(('team', 'email'),)", 'object_name': 'PendingTeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pending_member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'unique': 'True', 'null': 'True'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Team']", 'null': 'True'})
+        },
+        'sentry.projectcountbyminute': {
+            'Meta': {'unique_together': "(('project', 'date'),)", 'object_name': 'ProjectCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
+            'user_added': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'keys_added_set'", 'null': 'True', 'to': "orm['auth.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.searchdocument': {
+            'Meta': {'unique_together': "(('project', 'group'),)", 'object_name': 'SearchDocument'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_changed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'total_events': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'})
+        },
+        'sentry.searchtoken': {
+            'Meta': {'unique_together': "(('document', 'field', 'token'),)", 'object_name': 'SearchToken'},
+            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'token_set'", 'to': "orm['sentry.SearchDocument']"}),
+            'field': ('django.db.models.fields.CharField', [], {'default': "'text'", 'max_length': '64'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.team': {
+            'Meta': {'object_name': 'Team'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
+        },
+        'sentry.teammember': {
+            'Meta': {'unique_together': "(('team', 'user'),)", 'object_name': 'TeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_teammember_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        }
+    }
+
+    complete_apps = ['sentry']
\ No newline at end of file
diff --git a/src/sentry/models.py b/src/sentry/models.py
index 815ea623b7..899e286b69 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -14,6 +14,7 @@ import time
 import uuid
 import urlparse
 
+from datetime import timedelta
 from hashlib import md5
 from indexer.models import BaseIndex
 from picklefield.fields import PickledObjectField
@@ -341,7 +342,7 @@ class PendingTeamMember(Model):
         body = render_to_string('sentry/emails/member_invite.txt', context)
 
         try:
-            send_mail('%s Invite to join team: %s' % (settings.EMAIL_SUBJECT_PREFIX, self.team.name),
+            send_mail('%sInvite to join team: %s' % (settings.EMAIL_SUBJECT_PREFIX, self.team.name),
                 body, settings.SERVER_EMAIL, [self.email],
                 fail_silently=False)
         except Exception, e:
@@ -763,6 +764,46 @@ class UserOption(Model):
         return u'user=%s, project=%s, key=%s, value=%s' % (self.user_id, self.project_id, self.key, self.value)
 
 
+class LostPasswordHash(models.Model):
+    user = models.ForeignKey(User, unique=True)
+    hash = models.CharField(max_length=32)
+    date_added = models.DateTimeField(default=timezone.now)
+
+    def save(self, *args, **kwargs):
+        if not self.hash:
+            self.set_hash()
+        super(LostPasswordHash, self).save(*args, **kwargs)
+
+    def set_hash(self):
+        import hashlib
+        import random
+
+        self.hash = hashlib.md5(str(random.randint(1, 10000000))).hexdigest()
+
+    def is_valid(self):
+        return self.date_added > timezone.now() - timedelta(days=1)
+
+    def send_recover_mail(self):
+        from django.core.mail import send_mail
+        from sentry.web.helpers import render_to_string
+
+        context = {
+            'user': self.user,
+            'domain': urlparse.urlparse(settings.URL_PREFIX).hostname,
+            'url': '%s%s' % (settings.URL_PREFIX,
+                reverse('sentry-account-recover-confirm', args=[self.user.id, self.hash])),
+        }
+        body = render_to_string('sentry/emails/recover_account.txt', context)
+
+        try:
+            send_mail('%sPassword Recovery' % (settings.EMAIL_SUBJECT_PREFIX,),
+                body, settings.SERVER_EMAIL, [self.user.email],
+                fail_silently=False)
+        except Exception, e:
+            logger = logging.getLogger('sentry.mail.errors')
+            logger.exception(e)
+
+
 ### django-indexer
 
 
diff --git a/src/sentry/templates/sentry/account/recover/confirm.html b/src/sentry/templates/sentry/account/recover/confirm.html
new file mode 100644
index 0000000000..feca3e448b
--- /dev/null
+++ b/src/sentry/templates/sentry/account/recover/confirm.html
@@ -0,0 +1,30 @@
+{% extends "sentry/layout.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block title %}{% trans "Recover Account" %} | {{ block.super }}{% endblock %}
+
+{% block page_header_block %}{% endblock %}
+{% block bodyclass %}{% endblock %}
+
+{% block main %}
+    <section class="body">
+        <div class="page-header">
+            <h2>{% trans "Recover Account" %}</h2>
+        </div>
+        <p>{% trans "You have confirmed your email, and may now update your password below." %}</p>
+        <form method="POST" action="">
+            {% csrf_token %}
+            {{ form|as_crispy_errors }}
+
+            {% for field in form %}
+            	{{ field|as_crispy_field }}
+            {% endfor %}
+
+            <fieldset class="form-actions">
+                <button type="submit" class="btn btn-primary">{% trans "Change Password" %}</button>
+            </fieldset>
+        </form>
+    </section>
+{% endblock %}
\ No newline at end of file
diff --git a/src/sentry/templates/sentry/account/recover/failure.html b/src/sentry/templates/sentry/account/recover/failure.html
new file mode 100644
index 0000000000..79f9235a29
--- /dev/null
+++ b/src/sentry/templates/sentry/account/recover/failure.html
@@ -0,0 +1,19 @@
+{% extends "sentry/layout.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block title %}{% trans "Recover Account" %} | {{ block.super }}{% endblock %}
+
+{% block page_header_block %}{% endblock %}
+{% block bodyclass %}{% endblock %}
+
+{% block main %}
+    <section class="body">
+        <div class="page-header">
+            <h2>{% trans "Recover Account" %}</h2>
+        </div>
+        {% url sentry-recover-account as link %}
+        <p>{% blocktrans %}We were unable to confirm your identity. Either the link you followed is invalid, or it has expired. You can always <a href="{{ link }}">try again</a>.{% endblocktrans %}</p>
+    </section>
+{% endblock %}
\ No newline at end of file
diff --git a/src/sentry/templates/sentry/account/recover/index.html b/src/sentry/templates/sentry/account/recover/index.html
new file mode 100644
index 0000000000..0fee38688c
--- /dev/null
+++ b/src/sentry/templates/sentry/account/recover/index.html
@@ -0,0 +1,33 @@
+{% extends "sentry/layout.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block title %}{% trans "Recover Account" %} | {{ block.super }}{% endblock %}
+
+{% block page_header_block %}{% endblock %}
+{% block bodyclass %}{% endblock %}
+
+{% block main %}
+    <section class="body">
+        <div class="page-header">
+            <h2>{% trans "Recover Account" %}</h2>
+        </div>
+        <p>{% blocktrans %}To recover a lost account, you will need to know your account's username. We will send a confirmation
+            email to this address which allows you to change your password.{% endblocktrans %}</p>
+
+        <form class="form-stacked" action="" method="post">
+            {% csrf_token %}
+
+            {{ form|as_crispy_errors }}
+
+            {% for field in form %}
+                {{ field|as_crispy_field }}
+            {% endfor %}
+
+            <fieldset class="form-actions">
+                <button type="submit" class="btn btn-primary">{% trans "Send Email" %}</button>
+            </fieldset>
+        </form>
+    </section>
+{% endblock %}
\ No newline at end of file
diff --git a/src/sentry/templates/sentry/account/recover/sent.html b/src/sentry/templates/sentry/account/recover/sent.html
new file mode 100644
index 0000000000..deb6a20d04
--- /dev/null
+++ b/src/sentry/templates/sentry/account/recover/sent.html
@@ -0,0 +1,18 @@
+{% extends "sentry/layout.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block title %}{% trans "Recover Account" %} | {{ block.super }}{% endblock %}
+
+{% block page_header_block %}{% endblock %}
+{% block bodyclass %}{% endblock %}
+
+{% block main %}
+    <section class="body">
+        <div class="page-header">
+            <h2>{% trans "Recover Account" %}</h2>
+        </div>
+        <p>{% blocktrans %}We have sent an email to <strong>{{ email }}</strong> with further instructions to reset your password.{% endblocktrans %}</p>
+    </section>
+{% endblock %}
\ No newline at end of file
diff --git a/src/sentry/templates/sentry/emails/recover_account.txt b/src/sentry/templates/sentry/emails/recover_account.txt
new file mode 100644
index 0000000000..dbd47c5ba6
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/recover_account.txt
@@ -0,0 +1,6 @@
+A password reset was requested for your account ({{ user.username|safe }}) on Sentry ({{ domain }}). If you did not authorize
+this, you may simply ignore this email.
+
+To continue with your password reset, simply follow the link below, and you will be able to change your password.
+
+{{ url|safe }}
diff --git a/src/sentry/templates/sentry/login.html b/src/sentry/templates/sentry/login.html
index beee47b4e3..e3999a310a 100644
--- a/src/sentry/templates/sentry/login.html
+++ b/src/sentry/templates/sentry/login.html
@@ -34,7 +34,7 @@
                                 <a href="{% url sentry-register %}">{% trans "Create a new account" %}</a>
                             </div>
                         {% endif %}
-                        <button type="submit" class="btn btn-primary">{% trans "Login" %}</button>
+                        <button type="submit" class="btn btn-primary">{% trans "Login" %}</button> <a href="{% url sentry-account-recover %}">{% trans "Lose your password?" %}</a>
                     </fieldset>
                 </form>
             </div>
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index c0e1f1ae7a..034e69f9e2 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -134,3 +134,20 @@ class AppearanceSettingsForm(forms.Form):
         )
 
         return self.user
+
+
+class RecoverPasswordForm(forms.Form):
+    user = forms.CharField(label=_('Username'))
+
+    def clean_user(self):
+        value = self.cleaned_data.get('user')
+        if value:
+            try:
+                return User.objects.get(username__iexact=value)
+            except User.DoesNotExist:
+                raise forms.ValidationError(_("We were unable to find a matching user."))
+        return None
+
+
+class ChangePasswordRecoverForm(forms.Form):
+    password = forms.CharField(widget=forms.PasswordInput())
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 0c11abf1d8..715c57800e 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -7,19 +7,20 @@ sentry.web.frontend.accounts
 """
 from django.conf import settings as dj_settings
 from django.contrib import messages
-from django.contrib.auth import login as login_user
+from django.contrib.auth import login as login_user, authenticate
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.db import transaction
 from django.http import HttpResponseRedirect
 from django.views.decorators.cache import never_cache
 from django.views.decorators.csrf import csrf_protect
+from django.utils import timezone
 
-from sentry.models import UserOption
+from sentry.models import UserOption, LostPasswordHash
 from sentry.plugins import plugins
 from sentry.web.decorators import login_required
 from sentry.web.forms.accounts import AccountSettingsForm, NotificationSettingsForm, \
-  AppearanceSettingsForm, RegistrationForm
+  AppearanceSettingsForm, RegistrationForm, RecoverPasswordForm, ChangePasswordRecoverForm
 from sentry.web.helpers import render_to_response
 from sentry.utils.auth import get_auth_providers
 from sentry.utils.safe import safe_execute
@@ -102,6 +103,75 @@ def logout(request):
     return HttpResponseRedirect(reverse('sentry'))
 
 
+def recover(request):
+    form = RecoverPasswordForm(request.POST or None)
+    if form.is_valid():
+        password_hash, created = LostPasswordHash.objects.get_or_create(
+            user=form.cleaned_data['user']
+        )
+        if not password_hash.is_valid():
+            created = True
+            password_hash.date_added = timezone.now()
+            password_hash.set_hash()
+
+        if not created:
+            form.errors['__all__'] = ['A password reset was already attempted for this account within the last 24 hours.']
+
+    if form.is_valid():
+        password_hash.send_recover_mail()
+
+        return render_to_response('sentry/account/recover/sent.html', {
+            'email': password_hash.user.email,
+        }, request)
+
+    context = {
+        'form': form,
+    }
+    return render_to_response('sentry/account/recover/index.html', context, request)
+
+
+def recover_confirm(request, user_id, hash):
+    try:
+        password_hash = LostPasswordHash.objects.get(user=user_id, hash=hash)
+        if not password_hash.is_valid():
+            password_hash.delete()
+            raise LostPasswordHash.DoesNotExist
+        user = password_hash.user
+
+    except LostPasswordHash.DoesNotExist:
+        context = {}
+        tpl = 'sentry/account/recover/failure.html'
+
+    else:
+        tpl = 'sentry/account/recover/confirm.html'
+
+        if request.method == 'POST':
+            form = ChangePasswordRecoverForm(request.POST)
+            if form.is_valid():
+                user.set_password(form.cleaned_data['password'])
+                user.save()
+
+                # Ugly way of doing this, but Django requires the backend be set
+                user = authenticate(
+                    username=user.username,
+                    password=form.cleaned_data['password'],
+                )
+
+                login_user(request, user)
+
+                password_hash.delete()
+
+                return login_redirect(request)
+        else:
+            form = ChangePasswordRecoverForm()
+
+        context = {
+            'form': form,
+        }
+
+    return render_to_response(tpl, context, request)
+
+
 @csrf_protect
 @never_cache
 @login_required
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 280c842d6c..672bf69c04 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -40,6 +40,8 @@ urlpatterns = patterns('',
     url(r'^login-redirect/$', accounts.login_redirect, name='sentry-login-redirect'),
     url(r'^logout/$', accounts.logout, name='sentry-logout'),
     url(r'^register/$', accounts.register, name='sentry-register'),
+    url(r'^account/recover/$', accounts.recover, name='sentry-account-recover'),
+    url(r'^account/recover/confirm/(?P<user_id>[\d]+)/(?P<hash>[0-9a-zA-Z]+)/$', accounts.recover_confirm, name='sentry-account-recover-confirm'),
     url(r'^account/settings/$', accounts.settings, name='sentry-account-settings'),
     url(r'^account/settings/appearance/$', accounts.appearance_settings, name='sentry-account-settings-appearance'),
     url(r'^account/settings/identities/$', accounts.list_identities, name='sentry-account-settings-identities'),
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index c4622bc0c0..f58e6b2687 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -4,11 +4,13 @@ from __future__ import absolute_import
 
 
 from django.core import mail
+from django.core.urlresolvers import reverse
 from django.contrib.auth.models import User
 from sentry.models import Project, ProjectKey, Group, Event, Team, \
-  MessageFilterValue, MessageCountByMinute, FilterValue, PendingTeamMember
+  MessageFilterValue, MessageCountByMinute, FilterValue, PendingTeamMember, \
+  LostPasswordHash
 
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, fixture
 
 
 class ProjectTest(TestCase):
@@ -89,3 +91,21 @@ class PendingTeamMemberTest(TestCase):
             msg = mail.outbox[0]
 
             self.assertEquals(msg.to, ['foo@example.com'])
+
+
+class LostPasswordTest(TestCase):
+    @fixture
+    def password_hash(self):
+        return LostPasswordHash.objects.create(
+            user=self.user,
+        )
+
+    def test_send_recover_mail(self):
+        self.password_hash.send_recover_mail()
+        assert len(mail.outbox) == 1
+        msg = mail.outbox[0]
+        assert msg.to == [self.user.email]
+        assert msg.subject == '[Sentry] Password Recovery'
+        url = 'http://testserver' + reverse('sentry-account-recover-confirm',
+            args=[self.password_hash.user_id, self.password_hash.hash])
+        assert url in msg.body
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index 80f8a76d63..2d94a16495 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -2,11 +2,13 @@
 
 from __future__ import absolute_import
 
+import mock
+
 from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 from django.http import HttpRequest
-from sentry.models import UserOption
-from sentry.testutils import TestCase, fixture
+from sentry.models import UserOption, LostPasswordHash
+from sentry.testutils import TestCase, fixture, before
 from sentry.web.frontend.accounts import login_redirect
 
 
@@ -277,3 +279,63 @@ class ListIdentitiesTest(TestCase):
         self.assertTemplateUsed('sentry/account/identities.html')
         assert 'identity_list' in resp.context
         assert 'AUTH_PROVIDERS' in resp.context
+
+
+class RecoverPasswordTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-account-recover')
+
+    def test_renders_with_required_context(self):
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/account/recover/index.html')
+        assert 'form' in resp.context
+
+    def test_invalid_username(self):
+        resp = self.client.post(self.path, {
+            'user': 'nonexistant'
+        })
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/account/recover/index.html')
+        assert 'form' in resp.context
+        assert 'user' in resp.context['form'].errors
+
+    @mock.patch('sentry.models.LostPasswordHash.send_recover_mail')
+    def test_valid_username(self, send_recover_mail):
+        resp = self.client.post(self.path, {
+            'user': self.user.username
+        })
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/account/recover/sent.html')
+        assert 'email' in resp.context
+        send_recover_mail.assert_called_once_with()
+
+
+class RecoverPasswordConfirmTest(TestCase):
+    @before
+    def create_hash(self):
+        self.password_hash = LostPasswordHash.objects.create(user=self.user)
+
+    @fixture
+    def path(self):
+        return reverse('sentry-account-recover-confirm', args=[self.user.id, self.password_hash.hash])
+
+    def test_valid_token(self):
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/account/recover/confirm.html')
+
+    def test_invalid_token(self):
+        resp = self.client.get(reverse('sentry-account-recover-confirm', args=[1, 'adfadsf']))
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/account/recover/failure.html')
+
+    def test_change_password(self):
+        resp = self.client.post(self.path, {
+            'password': 'bar',
+            'confirm_password': 'bar'
+        })
+        assert resp.status_code == 302
+        user = User.objects.get(id=self.user.id)
+        assert user.check_password('bar')
