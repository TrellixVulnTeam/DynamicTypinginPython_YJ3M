commit d6e77ba9316ffc272a68a87dbc79f733582c0def
Author: Dan Fuller <dfuller@sentry.io>
Date:   Tue Nov 12 14:24:26 2019 -0800

    feat(api): Refactor trigger actions api to accept strings for type/target_type
    
    This refactors the trigger actions endpoint to accept strings for type/target_type, which makes it
    easier for frontend to work with.
    
    We also refactor the registration of action handlers to help support this, and other things in the
    future. We store a slug which we use to return from the endpoint, and also list the supported target
    types for each handler. This will be used as part of returning a list of available actions to the
    frontend as well in a future pr.

diff --git a/src/sentry/incidents/action_handlers.py b/src/sentry/incidents/action_handlers.py
index 3db8ce0db9..6bc61612ff 100644
--- a/src/sentry/incidents/action_handlers.py
+++ b/src/sentry/incidents/action_handlers.py
@@ -29,7 +29,11 @@ class ActionHandler(object):
         pass
 
 
-@AlertRuleTriggerAction.register_type_handler(AlertRuleTriggerAction.Type.EMAIL)
+@AlertRuleTriggerAction.register_type(
+    "email",
+    AlertRuleTriggerAction.Type.EMAIL,
+    [AlertRuleTriggerAction.TargetType.USER, AlertRuleTriggerAction.TargetType.TEAM],
+)
 class EmailActionHandler(ActionHandler):
     query_aggregations_display = {
         QueryAggregations.TOTAL: "Total Events",
@@ -125,7 +129,12 @@ class EmailActionHandler(ActionHandler):
         }
 
 
-@AlertRuleTriggerAction.register_type_handler(AlertRuleTriggerAction.Type.SLACK)
+@AlertRuleTriggerAction.register_type(
+    "slack",
+    AlertRuleTriggerAction.Type.SLACK,
+    [AlertRuleTriggerAction.TargetType.SPECIFIC],
+    integration_provider="slack",
+)
 class SlackActionHandler(ActionHandler):
     def fire(self):
         self.send_alert()
diff --git a/src/sentry/incidents/endpoints/organization_alert_rule_trigger_action_details.py b/src/sentry/incidents/endpoints/organization_alert_rule_trigger_action_details.py
index 8fef9c8409..5d0a060ec2 100644
--- a/src/sentry/incidents/endpoints/organization_alert_rule_trigger_action_details.py
+++ b/src/sentry/incidents/endpoints/organization_alert_rule_trigger_action_details.py
@@ -29,7 +29,6 @@ class OrganizationAlertRuleTriggerActionDetailsEndpoint(OrganizationAlertRuleTri
             },
             instance=alert_rule_trigger_action,
             data=request.data,
-            partial=True,
         )
 
         if serializer.is_valid():
diff --git a/src/sentry/incidents/endpoints/serializers.py b/src/sentry/incidents/endpoints/serializers.py
index 109cc8af6b..943a5aaba2 100644
--- a/src/sentry/incidents/endpoints/serializers.py
+++ b/src/sentry/incidents/endpoints/serializers.py
@@ -215,6 +215,18 @@ class AlertRuleTriggerSerializer(CamelSnakeModelSerializer):
             raise serializers.ValidationError("This label is already in use for this alert rule")
 
 
+string_to_action_type = {
+    registration.slug: registration.type
+    for registration in AlertRuleTriggerAction.get_registered_types()
+}
+action_target_type_to_string = {
+    AlertRuleTriggerAction.TargetType.USER: "user",
+    AlertRuleTriggerAction.TargetType.TEAM: "team",
+    AlertRuleTriggerAction.TargetType.SPECIFIC: "specific",
+}
+string_to_action_target_type = {v: k for (k, v) in action_target_type_to_string.items()}
+
+
 class AlertRuleTriggerActionSerializer(CamelSnakeModelSerializer):
     """
     Serializer for creating/updating a trigger action. Required context:
@@ -224,6 +236,9 @@ class AlertRuleTriggerActionSerializer(CamelSnakeModelSerializer):
      - `access`: An access object (from `request.access`)
     """
 
+    type = serializers.CharField()
+    target_type = serializers.CharField()
+
     class Meta:
         model = AlertRuleTriggerAction
         fields = ["type", "target_type", "target_identifier", "target_display", "integration"]
@@ -234,31 +249,46 @@ class AlertRuleTriggerActionSerializer(CamelSnakeModelSerializer):
         }
 
     def validate_type(self, type):
-        try:
-            return AlertRuleTriggerAction.Type(type)
-        except ValueError:
+        if type not in string_to_action_type:
             raise serializers.ValidationError(
-                "Invalid type, valid values are %s"
-                % [item.value for item in AlertRuleTriggerAction.Type]
+                "Invalid type, valid values are [%s]" % ", ".join(string_to_action_type.keys())
             )
+        return string_to_action_type[type]
 
     def validate_target_type(self, target_type):
-        try:
-            return AlertRuleTriggerAction.TargetType(target_type)
-        except ValueError:
+        if target_type not in string_to_action_target_type:
             raise serializers.ValidationError(
-                "Invalid target_type, valid values are %s"
-                % [item.value for item in AlertRuleTriggerAction.TargetType]
+                "Invalid targetType, valid values are [%s]"
+                % ", ".join(string_to_action_target_type.keys())
             )
+        return string_to_action_target_type[target_type]
 
     def validate(self, attrs):
-        if ("target_type" in attrs) != ("target_identifier" in attrs):
+        if ("type" in attrs) != ("target_type" in attrs) != ("target_identifier" in attrs):
             raise serializers.ValidationError(
-                "targetType and targetIdentifier must be passed together"
+                "type, targetType and targetIdentifier must be passed together"
             )
+        type = attrs.get("type")
         target_type = attrs.get("target_type")
         access = self.context["access"]
         identifier = attrs.get("target_identifier")
+
+        if type is not None:
+            type_info = AlertRuleTriggerAction.get_registered_type(type)
+            if target_type not in type_info.supported_target_types:
+                allowed_target_types = ",".join(
+                    [
+                        action_target_type_to_string[type_name]
+                        for type_name in type_info.supported_target_types
+                    ]
+                )
+                raise serializers.ValidationError(
+                    {
+                        "target_type": "Invalid target type for %s. Valid types are [%s]"
+                        % (type_info.slug, allowed_target_types)
+                    }
+                )
+
         if attrs.get("type") == AlertRuleTriggerAction.Type.EMAIL:
             if target_type == AlertRuleTriggerAction.TargetType.TEAM:
                 try:
@@ -277,14 +307,7 @@ class AlertRuleTriggerActionSerializer(CamelSnakeModelSerializer):
                     organization=self.context["organization"], user=user
                 ).exists():
                     raise serializers.ValidationError("User does not belong to this organization")
-            elif target_type == AlertRuleTriggerAction.TargetType.SPECIFIC:
-                # Compare with `type` and perform a specific validation as needed
-                pass
         elif attrs.get("type") == AlertRuleTriggerAction.Type.SLACK:
-            if target_type != AlertRuleTriggerAction.TargetType.SPECIFIC:
-                raise serializers.ValidationError(
-                    {"target_type": "Must provide a specific channel for slack"}
-                )
             if "integration" not in attrs:
                 raise serializers.ValidationError(
                     {"integration": "Integration must be provided for slack"}
@@ -296,19 +319,20 @@ class AlertRuleTriggerActionSerializer(CamelSnakeModelSerializer):
         return create_alert_rule_trigger_action(trigger=self.context["trigger"], **validated_data)
 
     def _remove_unchanged_fields(self, instance, validated_data):
-        if validated_data.get("type", instance.type) == AlertRuleTriggerAction.Type.SLACK.value:
-            if (
-                "target_identifier" in validated_data
-                and validated_data["target_identifier"] == instance.target_display
-            ):
-                validated_data.pop("target_identifier")
+        changed = False
+        if (
+            validated_data.get("type", instance.type) == AlertRuleTriggerAction.Type.SLACK.value
+            and validated_data["target_identifier"] != instance.target_display
+        ):
+            changed = True
         for field_name, value in list(six.iteritems(validated_data)):
             # Remove any fields that haven't actually changed
             if isinstance(value, Enum):
                 value = value.value
-            if getattr(instance, field_name) == value:
-                validated_data.pop(field_name)
-        return validated_data
+            if getattr(instance, field_name) != value:
+                changed = True
+                break
+        return validated_data if changed else {}
 
     def update(self, instance, validated_data):
         validated_data = self._remove_unchanged_fields(instance, validated_data)
diff --git a/src/sentry/incidents/models.py b/src/sentry/incidents/models.py
index 12bc2fddf9..4091b8d6e3 100644
--- a/src/sentry/incidents/models.py
+++ b/src/sentry/incidents/models.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+from collections import namedtuple
+
 from django.conf import settings
 from django.db import IntegrityError, models, transaction
 from django.utils import timezone
@@ -378,7 +380,7 @@ class AlertRuleTriggerAction(Model):
 
     __core__ = True
 
-    handlers = {}
+    _type_registrations = {}
 
     # Which sort of action to take
     class Type(Enum):
@@ -395,6 +397,11 @@ class AlertRuleTriggerAction(Model):
         # with a team.
         TEAM = 2
 
+    TypeRegistration = namedtuple(
+        "TypeRegistration",
+        ["handler", "slug", "type", "supported_target_types", "integration_provider"],
+    )
+
     alert_rule_trigger = FlexibleForeignKey("sentry.AlertRuleTrigger")
     integration = FlexibleForeignKey("sentry.Integration", null=True)
     type = models.SmallIntegerField()
@@ -428,8 +435,8 @@ class AlertRuleTriggerAction(Model):
 
     def build_handler(self, incident, project):
         type = AlertRuleTriggerAction.Type(self.type)
-        if type in self.handlers:
-            return self.handlers[type](self, incident, project)
+        if type in self._type_registrations:
+            return self._type_registrations[type].handler(self, incident, project)
         else:
             metrics.incr("alert_rule_trigger.unhandled_type.{}".format(self.type))
 
@@ -444,19 +451,32 @@ class AlertRuleTriggerAction(Model):
             return handler.resolve()
 
     @classmethod
-    def register_type_handler(cls, type):
+    def register_type(cls, slug, type, supported_target_types, integration_provider=None):
         """
-        Registers a handler for a given target_type.
+        Registers a handler for a given type.
+        :param slug: A string representing the name of this type registration
         :param type: The `Type` to handle.
         :param handler: A subclass of `ActionHandler` that accepts the
         `AlertRuleTriggerAction` and `Incident`.
+        :param integration_provider: String representing the integration provider
+        related to this type.
         """
 
         def inner(handler):
-            if type not in cls.handlers:
-                cls.handlers[type] = handler
+            if type not in cls._type_registrations:
+                cls._type_registrations[type] = cls.TypeRegistration(
+                    handler, slug, type, set(supported_target_types), integration_provider
+                )
             else:
                 raise Exception(u"Handler already registered for type %s" % type)
             return handler
 
         return inner
+
+    @classmethod
+    def get_registered_type(cls, type):
+        return cls._type_registrations[type]
+
+    @classmethod
+    def get_registered_types(cls):
+        return cls._type_registrations.values()
diff --git a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py
index b45f8e5f79..6fc2a90594 100644
--- a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py
+++ b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py
@@ -4,6 +4,7 @@ import six
 from exam import fixture
 
 from sentry.api.serializers import serialize
+from sentry.incidents.endpoints.serializers import action_target_type_to_string
 from sentry.incidents.logic import (
     create_alert_rule,
     create_alert_rule_trigger,
@@ -52,8 +53,8 @@ class AlertRuleTriggerActionDetailsBase(object):
         return create_alert_rule_trigger_action(
             self.trigger,
             AlertRuleTriggerAction.Type.EMAIL,
-            AlertRuleTriggerAction.TargetType.SPECIFIC,
-            "hello",
+            AlertRuleTriggerAction.TargetType.USER,
+            six.text_type(self.user.id),
         )
 
     def test_invalid_action_id(self):
@@ -116,14 +117,17 @@ class AlertRuleTriggerActionDetailsPutEndpointTest(AlertRuleTriggerActionDetails
                 self.alert_rule.id,
                 self.trigger.id,
                 self.action.id,
-                target_type=AlertRuleTriggerAction.TargetType.USER.value,
-                target_identifier=six.text_type(self.user.id),
+                type=AlertRuleTriggerAction.get_registered_type(
+                    AlertRuleTriggerAction.Type(self.action.type)
+                ).slug,
+                target_type=action_target_type_to_string[AlertRuleTriggerAction.TargetType.TEAM],
+                target_identifier=six.text_type(self.team.id),
             )
 
-        self.action.target_type = AlertRuleTriggerAction.TargetType.USER.value
-        self.action.target_identifier = six.text_type(self.user.id)
+        self.action.target_type = AlertRuleTriggerAction.TargetType.TEAM.value
+        self.action.target_identifier = six.text_type(self.team.id)
         assert resp.data == serialize(self.action)
-        assert resp.data["targetIdentifier"] == six.text_type(self.user.id)
+        assert resp.data["targetIdentifier"] == six.text_type(self.team.id)
 
     def test_not_updated_fields(self):
         self.create_member(
@@ -136,7 +140,13 @@ class AlertRuleTriggerActionDetailsPutEndpointTest(AlertRuleTriggerActionDetails
                 self.alert_rule.id,
                 self.trigger.id,
                 self.action.id,
-                type=self.action.type,
+                type=AlertRuleTriggerAction.get_registered_type(
+                    AlertRuleTriggerAction.Type(self.action.type)
+                ).slug,
+                targetType=action_target_type_to_string[
+                    AlertRuleTriggerAction.TargetType(self.action.target_type)
+                ],
+                targetIdentifier=self.action.target_identifier,
             )
 
         # Alert rule should be exactly the same
diff --git a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_index.py b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_index.py
index 050fdfd826..0de6371843 100644
--- a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_index.py
+++ b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_index.py
@@ -1,9 +1,11 @@
 from __future__ import absolute_import
 
+import six
 from exam import fixture
 from freezegun import freeze_time
 
 from sentry.api.serializers import serialize
+from sentry.incidents.endpoints.serializers import action_target_type_to_string
 from sentry.incidents.logic import create_alert_rule_trigger, create_alert_rule_trigger_action
 from sentry.incidents.models import AlertRuleThresholdType, AlertRuleTriggerAction
 from sentry.testutils import APITestCase
@@ -73,9 +75,11 @@ class AlertRuleTriggerActionCreateEndpointTest(AlertRuleTriggerActionIndexBase,
                 self.organization.slug,
                 self.alert_rule.id,
                 self.trigger.id,
-                type=AlertRuleTriggerAction.Type.EMAIL.value,
-                targetType=AlertRuleTriggerAction.TargetType.SPECIFIC.value,
-                targetIdentifier="hello",
+                type=AlertRuleTriggerAction.get_registered_type(
+                    AlertRuleTriggerAction.Type.EMAIL
+                ).slug,
+                target_type=action_target_type_to_string[AlertRuleTriggerAction.TargetType.USER],
+                target_identifier=six.text_type(self.user.id),
                 status_code=201,
             )
         assert "id" in resp.data
diff --git a/tests/sentry/incidents/endpoints/test_serializers.py b/tests/sentry/incidents/endpoints/test_serializers.py
index cc5e0e2557..bb763ac126 100644
--- a/tests/sentry/incidents/endpoints/test_serializers.py
+++ b/tests/sentry/incidents/endpoints/test_serializers.py
@@ -5,9 +5,12 @@ from exam import fixture
 
 from sentry.auth.access import from_user
 from sentry.incidents.endpoints.serializers import (
+    action_target_type_to_string,
     AlertRuleSerializer,
     AlertRuleTriggerSerializer,
     AlertRuleTriggerActionSerializer,
+    string_to_action_type,
+    string_to_action_target_type,
 )
 from sentry.incidents.logic import (
     create_alert_rule,
@@ -296,8 +299,10 @@ class TestAlertRuleTriggerActionSerializer(TestCase):
     @fixture
     def valid_params(self):
         return {
-            "type": AlertRuleTriggerAction.Type.EMAIL.value,
-            "target_type": AlertRuleTriggerAction.TargetType.SPECIFIC.value,
+            "type": AlertRuleTriggerAction.get_registered_type(
+                AlertRuleTriggerAction.Type.EMAIL
+            ).slug,
+            "target_type": action_target_type_to_string[AlertRuleTriggerAction.TargetType.SPECIFIC],
             "target_identifier": "test@test.com",
         }
 
@@ -333,20 +338,15 @@ class TestAlertRuleTriggerActionSerializer(TestCase):
 
     def test_type(self):
         invalid_values = [
-            "Invalid type, valid values are %s"
-            % [item.value for item in AlertRuleTriggerAction.Type]
+            "Invalid type, valid values are [%s]" % ", ".join(string_to_action_type.keys())
         ]
-        self.run_fail_validation_test({"type": "a"}, {"type": ["A valid integer is required."]})
         self.run_fail_validation_test({"type": 50}, {"type": invalid_values})
 
     def test_target_type(self):
         invalid_values = [
-            "Invalid target_type, valid values are %s"
-            % [item.value for item in AlertRuleTriggerAction.TargetType]
+            "Invalid targetType, valid values are [%s]"
+            % ", ".join(string_to_action_target_type.keys())
         ]
-        self.run_fail_validation_test(
-            {"target_type": "a"}, {"targetType": ["A valid integer is required."]}
-        )
         self.run_fail_validation_test({"targetType": 50}, {"targetType": invalid_values})
 
     def _run_changed_fields_test(self, trigger, params, expected):
@@ -358,48 +358,61 @@ class TestAlertRuleTriggerActionSerializer(TestCase):
 
     def test_remove_unchanged_fields(self):
         type = AlertRuleTriggerAction.Type.EMAIL
-        target_type = AlertRuleTriggerAction.TargetType.SPECIFIC
-        identifier = "hello"
+        target_type = AlertRuleTriggerAction.TargetType.USER
+        identifier = six.text_type(self.user.id)
         action = create_alert_rule_trigger_action(self.trigger, type, target_type, identifier)
 
         self._run_changed_fields_test(
             action,
-            {"type": type.value, "target_type": target_type.value, "target_identifier": identifier},
+            {
+                "type": AlertRuleTriggerAction.get_registered_type(type).slug,
+                "target_type": action_target_type_to_string[target_type],
+                "target_identifier": identifier,
+            },
             {},
         )
 
-        self._run_changed_fields_test(action, {"type": type.value}, {})
         integration = Integration.objects.create(external_id="1", provider="slack", metadata={})
 
         self._run_changed_fields_test(
             action,
             {
-                "type": AlertRuleTriggerAction.Type.SLACK.value,
-                "targetIdentifier": "hello",
-                "targetType": AlertRuleTriggerAction.TargetType.SPECIFIC.value,
+                "type": AlertRuleTriggerAction.get_registered_type(
+                    AlertRuleTriggerAction.Type.SLACK
+                ).slug,
+                "targetIdentifier": identifier,
+                "targetType": action_target_type_to_string[
+                    AlertRuleTriggerAction.TargetType.SPECIFIC
+                ],
                 "integration": integration.id,
             },
-            {"type": AlertRuleTriggerAction.Type.SLACK, "integration": integration},
-        )
-        self._run_changed_fields_test(
-            action, {"target_type": target_type.value, "target_identifier": identifier}, {}
+            {
+                "type": AlertRuleTriggerAction.Type.SLACK,
+                "integration": integration,
+                "target_identifier": identifier,
+                "target_type": AlertRuleTriggerAction.TargetType.SPECIFIC,
+            },
         )
+
+        new_team = self.create_team(self.organization)
         self._run_changed_fields_test(
             action,
             {
-                "target_type": AlertRuleTriggerAction.TargetType.USER.value,
-                "target_identifier": six.text_type(self.user.id),
+                "type": AlertRuleTriggerAction.get_registered_type(type).slug,
+                "target_type": action_target_type_to_string[AlertRuleTriggerAction.TargetType.TEAM],
+                "target_identifier": six.text_type(new_team.id),
             },
             {
-                "target_type": AlertRuleTriggerAction.TargetType.USER,
-                "target_identifier": six.text_type(self.user.id),
+                "type": type,
+                "target_type": AlertRuleTriggerAction.TargetType.TEAM,
+                "target_identifier": six.text_type(new_team.id),
             },
         )
 
     def test_user_perms(self):
         self.run_fail_validation_test(
             {
-                "target_type": AlertRuleTriggerAction.TargetType.USER.value,
+                "target_type": action_target_type_to_string[AlertRuleTriggerAction.TargetType.USER],
                 "target_identifier": "1234567",
             },
             {"nonFieldErrors": ["User does not exist"]},
@@ -407,7 +420,7 @@ class TestAlertRuleTriggerActionSerializer(TestCase):
         other_user = self.create_user()
         self.run_fail_validation_test(
             {
-                "target_type": AlertRuleTriggerAction.TargetType.USER.value,
+                "target_type": action_target_type_to_string[AlertRuleTriggerAction.TargetType.USER],
                 "target_identifier": six.text_type(other_user.id),
             },
             {"nonFieldErrors": ["User does not belong to this organization"]},
@@ -416,16 +429,22 @@ class TestAlertRuleTriggerActionSerializer(TestCase):
     def test_slack(self):
         self.run_fail_validation_test(
             {
-                "type": AlertRuleTriggerAction.Type.SLACK.value,
-                "target_type": AlertRuleTriggerAction.TargetType.USER.value,
+                "type": AlertRuleTriggerAction.get_registered_type(
+                    AlertRuleTriggerAction.Type.SLACK
+                ).slug,
+                "target_type": action_target_type_to_string[AlertRuleTriggerAction.TargetType.USER],
                 "target_identifier": "123",
             },
-            {"targetType": ["Must provide a specific channel for slack"]},
+            {"targetType": ["Invalid target type for slack. Valid types are [specific]"]},
         )
         self.run_fail_validation_test(
             {
-                "type": AlertRuleTriggerAction.Type.SLACK.value,
-                "targetType": AlertRuleTriggerAction.TargetType.SPECIFIC.value,
+                "type": AlertRuleTriggerAction.get_registered_type(
+                    AlertRuleTriggerAction.Type.SLACK
+                ).slug,
+                "targetType": action_target_type_to_string[
+                    AlertRuleTriggerAction.TargetType.SPECIFIC
+                ],
                 "targetIdentifier": "123",
             },
             {"integration": ["Integration must be provided for slack"]},
@@ -440,8 +459,12 @@ class TestAlertRuleTriggerActionSerializer(TestCase):
         base_params = self.valid_params.copy()
         base_params.update(
             {
-                "type": AlertRuleTriggerAction.Type.SLACK.value,
-                "targetType": AlertRuleTriggerAction.TargetType.SPECIFIC.value,
+                "type": AlertRuleTriggerAction.get_registered_type(
+                    AlertRuleTriggerAction.Type.SLACK
+                ).slug,
+                "targetType": action_target_type_to_string[
+                    AlertRuleTriggerAction.TargetType.SPECIFIC
+                ],
                 "targetIdentifier": "123",
                 "integration": six.text_type(integration.id),
             }
diff --git a/tests/sentry/incidents/test_models.py b/tests/sentry/incidents/test_models.py
index a4067a0f0f..4af21d2804 100644
--- a/tests/sentry/incidents/test_models.py
+++ b/tests/sentry/incidents/test_models.py
@@ -167,11 +167,11 @@ class AlertRuleTriggerActionActivateTest(object):
     method = None
 
     def setUp(self):
-        self.old_handlers = AlertRuleTriggerAction.handlers
-        AlertRuleTriggerAction.handlers = {}
+        self.old_handlers = AlertRuleTriggerAction._type_registrations
+        AlertRuleTriggerAction._type_registrations = {}
 
     def tearDown(self):
-        AlertRuleTriggerAction.handlers = self.old_handlers
+        AlertRuleTriggerAction._type_registrations = self.old_handlers
 
     def test_no_handler(self):
         trigger = AlertRuleTriggerAction(type=AlertRuleTriggerAction.Type.EMAIL.value)
@@ -182,7 +182,7 @@ class AlertRuleTriggerActionActivateTest(object):
         mock_method = getattr(mock_handler.return_value, self.method)
         mock_method.return_value = "test"
         type = AlertRuleTriggerAction.Type.EMAIL
-        AlertRuleTriggerAction.register_type_handler(type)(mock_handler)
+        AlertRuleTriggerAction.register_type("something", type, [])(mock_handler)
         trigger = AlertRuleTriggerAction(type=type.value)
         assert getattr(trigger, self.method)(Mock(), Mock()) == mock_method.return_value
 
@@ -199,11 +199,11 @@ class AlertRuleTriggerActionActivateTest(TestCase):
     metrics = patcher("sentry.incidents.models.metrics")
 
     def setUp(self):
-        self.old_handlers = AlertRuleTriggerAction.handlers
-        AlertRuleTriggerAction.handlers = {}
+        self.old_handlers = AlertRuleTriggerAction._type_registrations
+        AlertRuleTriggerAction._type_registrations = {}
 
     def tearDown(self):
-        AlertRuleTriggerAction.handlers = self.old_handlers
+        AlertRuleTriggerAction._type_registrations = self.old_handlers
 
     def test_unhandled(self):
         trigger = AlertRuleTriggerAction(type=AlertRuleTriggerAction.Type.EMAIL.value)
@@ -213,7 +213,7 @@ class AlertRuleTriggerActionActivateTest(TestCase):
     def test_handled(self):
         mock_handler = Mock()
         type = AlertRuleTriggerAction.Type.EMAIL
-        AlertRuleTriggerAction.register_type_handler(type)(mock_handler)
+        AlertRuleTriggerAction.register_type("something", type, [])(mock_handler)
 
         trigger = AlertRuleTriggerAction(type=AlertRuleTriggerAction.Type.EMAIL.value)
         incident = Mock()
diff --git a/tests/sentry/incidents/test_subscription_processor.py b/tests/sentry/incidents/test_subscription_processor.py
index 143dd94be3..afa093b784 100644
--- a/tests/sentry/incidents/test_subscription_processor.py
+++ b/tests/sentry/incidents/test_subscription_processor.py
@@ -50,10 +50,10 @@ class ProcessUpdateTest(TestCase):
 
     def setUp(self):
         super(ProcessUpdateTest, self).setUp()
-        self.old_handlers = AlertRuleTriggerAction.handlers
-        AlertRuleTriggerAction.handlers = {}
+        self.old_handlers = AlertRuleTriggerAction._type_registrations
+        AlertRuleTriggerAction._type_registrations = {}
         self.email_action_handler = Mock()
-        AlertRuleTriggerAction.register_type_handler(AlertRuleTriggerAction.Type.EMAIL)(
+        AlertRuleTriggerAction.register_type("email", AlertRuleTriggerAction.Type.EMAIL, [])(
             self.email_action_handler
         )
         self._run_tasks = self.tasks()
@@ -61,7 +61,7 @@ class ProcessUpdateTest(TestCase):
 
     def tearDown(self):
         super(ProcessUpdateTest, self).tearDown()
-        AlertRuleTriggerAction.handlers = self.old_handlers
+        AlertRuleTriggerAction._type_registrations = self.old_handlers
         self._run_tasks.__exit__(None, None, None)
 
     @fixture
diff --git a/tests/sentry/incidents/test_tasks.py b/tests/sentry/incidents/test_tasks.py
index b854e2e91a..061092afd9 100644
--- a/tests/sentry/incidents/test_tasks.py
+++ b/tests/sentry/incidents/test_tasks.py
@@ -220,9 +220,9 @@ class HandleTriggerActionTest(TestCase):
         self.metrics.incr.assert_called_once_with("incidents.alert_rules.skipping_missing_project")
 
     def test(self):
-        with patch.object(AlertRuleTriggerAction, "handlers", new={}):
+        with patch.object(AlertRuleTriggerAction, "_type_registrations", new={}):
             mock_handler = Mock()
-            AlertRuleTriggerAction.register_type_handler(AlertRuleTriggerAction.Type.EMAIL)(
+            AlertRuleTriggerAction.register_type("email", AlertRuleTriggerAction.Type.EMAIL, [])(
                 mock_handler
             )
             incident = self.create_incident()
