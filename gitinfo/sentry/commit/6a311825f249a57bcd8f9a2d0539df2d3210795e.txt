commit 6a311825f249a57bcd8f9a2d0539df2d3210795e
Author: Nola Chen <chen.no@husky.neu.edu>
Date:   Tue Oct 22 11:05:03 2019 -0700

    feat(app-platform): save timeout webhook errors (#15184)
    
    * except and save all Request exceptions
    
    * migration
    
    * fix bug
    
    * Add test for request timeout error
    
    * delete migration

diff --git a/src/sentry/tasks/sentry_apps.py b/src/sentry/tasks/sentry_apps.py
index 5bd9becdb1..e505783acb 100644
--- a/src/sentry/tasks/sentry_apps.py
+++ b/src/sentry/tasks/sentry_apps.py
@@ -42,6 +42,14 @@ RESOURCE_RENAMES = {"Group": "issue"}
 TYPES = {"Group": Group, "Error": SnubaEvent}
 
 
+def _save_webhook_error(**kwargs):
+    event = kwargs.get("event_type")
+
+    # Track any webhook errors for these event types
+    if event in ["issue.assigned", "issue.ignored", "issue.resolved"]:
+        SentryAppWebhookError.objects.create(**kwargs)
+
+
 def _webhook_event_data(event, group_id, project_id):
     project = Project.objects.get_from_cache(id=project_id)
     organization = Organization.objects.get_from_cache(id=project.organization_id)
@@ -274,23 +282,30 @@ def send_webhooks(installation, event, **kwargs):
 
         request_data = AppPlatformEvent(**kwargs)
 
-        resp = safe_urlopen(
-            url=servicehook.sentry_app.webhook_url,
-            data=request_data.body,
-            headers=request_data.headers,
-            timeout=5,
-        )
+        potential_error_kwargs = {
+            "sentry_app_id": installation.sentry_app_id,
+            "organization_id": installation.organization_id,
+            "request_body": request_data.body,
+            "request_headers": request_data.headers,
+            "event_type": event,
+            "webhook_url": servicehook.sentry_app.webhook_url,
+        }
+
+        try:
+            resp = safe_urlopen(
+                url=servicehook.sentry_app.webhook_url,
+                data=request_data.body,
+                headers=request_data.headers,
+                timeout=5,
+            )
+        except RequestException as exc:
+            potential_error_kwargs["response_body"] = repr(exc)
+            _save_webhook_error(**potential_error_kwargs)
+            # Re-raise the exception because some of these tasks might retry on the exception
+            raise
 
-        # Track any webhook errors for these event types
-        if not resp.ok and event in ["issue.assigned", "issue.ignored", "issue.resolved"]:
+        if not resp.ok:
             body = safe_urlread(resp)
-            SentryAppWebhookError.objects.create(
-                sentry_app_id=installation.sentry_app_id,
-                organization_id=installation.organization_id,
-                request_body=request_data.body,
-                request_headers=request_data.headers,
-                event_type=event,
-                webhook_url=servicehook.sentry_app.webhook_url,
-                response_body=body,
-                response_code=resp.status_code,
-            )
+            potential_error_kwargs["response_body"] = body
+            potential_error_kwargs["response_code"] = resp.status_code
+            _save_webhook_error(**potential_error_kwargs)
diff --git a/tests/sentry/tasks/test_sentry_apps.py b/tests/sentry/tasks/test_sentry_apps.py
index f9edb169a4..51b2ef3c6d 100644
--- a/tests/sentry/tasks/test_sentry_apps.py
+++ b/tests/sentry/tasks/test_sentry_apps.py
@@ -6,6 +6,7 @@ from celery import Task
 from collections import namedtuple
 from django.core.urlresolvers import reverse
 from mock import patch
+from requests.exceptions import RequestException
 
 from sentry.models import Rule, SentryApp, SentryAppInstallation, SentryAppWebhookError
 from sentry.testutils import TestCase
@@ -327,13 +328,13 @@ class TestWorkflowNotification(TestCase):
         assert not safe_urlopen.called
 
 
-@patch("sentry.tasks.sentry_apps.safe_urlopen", return_value=MockFailureResponseInstance)
 class TestWebhookErrors(TestCase):
     def setUp(self):
         self.project = self.create_project()
         self.user = self.create_user()
 
         self.sentry_app = self.create_sentry_app(
+            name="Test App",
             organization=self.project.organization,
             events=["issue.resolved", "issue.ignored", "issue.assigned"],
         )
@@ -344,29 +345,24 @@ class TestWebhookErrors(TestCase):
 
         self.issue = self.create_group(project=self.project)
 
+    @patch("sentry.tasks.sentry_apps.safe_urlopen", return_value=MockFailureResponseInstance)
     def test_saves_error_if_workflow_webhook_request_fails(self, safe_urlopen):
-        sentry_app = self.create_sentry_app(
-            name="Test App",
-            organization=self.project.organization,
-            events=["issue.resolved", "issue.ignored", "issue.assigned"],
-        )
-        install = self.create_sentry_app_installation(
-            organization=self.project.organization, slug=sentry_app.slug
-        )
         data = {"issue": serialize(self.issue)}
-        send_webhooks(installation=install, event="issue.assigned", data=data, actor=self.user)
+        send_webhooks(installation=self.install, event="issue.assigned", data=data, actor=self.user)
 
         error_count = SentryAppWebhookError.objects.count()
         error = SentryAppWebhookError.objects.first()
 
         assert safe_urlopen.called
         assert error_count == 1
-        assert error.sentry_app.id == install.sentry_app.id
-        assert error.organization.id == install.organization.id
+        assert error.sentry_app.id == self.install.sentry_app.id
+        assert error.organization.id == self.install.organization.id
+        assert error.response_body == "{}"
 
+    @patch("sentry.tasks.sentry_apps.safe_urlopen", return_value=MockFailureResponseInstance)
     def test_does_not_save_error_if_nonworkflow_request_fails(self, safe_urlopen):
         sentry_app = self.create_sentry_app(
-            name="Test App",
+            name="Test App 2",
             organization=self.project.organization,
             events=[
                 "issue.resolved",
@@ -387,3 +383,21 @@ class TestWebhookErrors(TestCase):
 
         assert safe_urlopen.called
         assert error_count == 0
+
+    @patch("sentry.tasks.sentry_apps.safe_urlopen", side_effect=RequestException("Timeout"))
+    def test_saves_error_for_request_timeout(self, safe_urlopen):
+        data = {"issue": serialize(self.issue)}
+
+        with self.assertRaises(RequestException):
+            send_webhooks(
+                installation=self.install, event="issue.assigned", data=data, actor=self.user
+            )
+
+        error_count = SentryAppWebhookError.objects.count()
+        error = SentryAppWebhookError.objects.first()
+
+        assert safe_urlopen.called
+        assert error_count == 1
+        assert error.sentry_app.id == self.install.sentry_app.id
+        assert error.organization.id == self.install.organization.id
+        assert error.response_body == "RequestException('Timeout',)"
