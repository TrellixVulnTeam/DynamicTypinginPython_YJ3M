commit 039113e48834049320a8b7503af60aa49fb17213
Author: Mark Story <mark@sentry.io>
Date:   Mon Jul 29 11:42:23 2019 -0400

    feat(commits) Suspect commits should match case insensitive (#14168)
    
    Some platforms generate stack traces without preserving filename casing.
    We can smooth over this lossy translation at the cost of providing false
    positives when multiple casings of the same filename are changed.
    
    Fixes SEN-871

diff --git a/src/sentry/utils/committers.py b/src/sentry/utils/committers.py
index ea0676ac7a..5dbb218dc2 100644
--- a/src/sentry/utils/committers.py
+++ b/src/sentry/utils/committers.py
@@ -13,7 +13,7 @@ from django.db.models import Q
 
 from itertools import izip
 from collections import defaultdict
-from six.moves import reduce
+from functools import reduce
 
 PATH_SEPERATORS = frozenset(['/', '\\'])
 
@@ -31,7 +31,7 @@ def tokenize_path(path):
 def score_path_match_length(path_a, path_b):
     score = 0
     for a, b in izip(tokenize_path(path_a), tokenize_path(path_b)):
-        if a != b:
+        if a.lower() != b.lower():
             break
         score += 1
     return score
@@ -64,7 +64,7 @@ def _get_commit_file_changes(commits, path_name_set):
     # build a single query to get all of the commit file that might match the first n frames
     path_query = reduce(
         operator.or_,
-        (Q(filename__endswith=path) for path in filenames)
+        (Q(filename__iendswith=path) for path in filenames)
     )
 
     commit_file_change_matches = CommitFileChange.objects.filter(
diff --git a/tests/sentry/utils/test_committers.py b/tests/sentry/utils/test_committers.py
index 8fb1e02520..5b0858f3b6 100644
--- a/tests/sentry/utils/test_committers.py
+++ b/tests/sentry/utils/test_committers.py
@@ -95,12 +95,15 @@ class ScorePathMatchLengthTest(unittest.TestCase):
         assert score_path_match_length('foo/bar/baz', 'bar/baz') == 2
         assert score_path_match_length('foo/bar/baz', 'baz') == 1
 
-    def test_why_is_this_zero(self):
+    def test_prefix_no_score(self):
         assert score_path_match_length('foo/bar/baz', 'foo') == 0
 
     def test_path_with_empty_path_segment(self):
         assert score_path_match_length('./foo/bar/baz', 'foo/bar/baz') == 3
 
+    def test_case_insensitive_comparison(self):
+        assert score_path_match_length('./Foo/Bar/BAZ', 'foo/bar/baz') == 3
+
 
 class GetFramePathsTestCase(unittest.TestCase):
     def setUp(self):
@@ -335,6 +338,46 @@ class GetEventFileCommitters(CommitTestCase):
         assert len(result[0]['commits']) == 1
         assert result[0]['commits'][0]['id'] == 'a' * 40
 
+    def test_matching_case_insensitive(self):
+        event = self.create_event(
+            group=self.group,
+            message='Kaboom!',
+            platform='cpp',
+            stacktrace={
+                'frames': [
+                    {
+                        "function": "roar",
+                        "abs_path": "/usr/src/app/TigerMachine.cpp",
+                        "module": "",
+                        "in_app": True,
+                        "lineno": 30,
+                        "filename": "app/TigerMachine.cpp",
+                    }
+                ]
+            }
+        )
+        self.release.set_commits([
+            {
+                'id': 'a' * 40,
+                'repository': self.repo.name,
+                'author_email': 'bob@example.com',
+                'author_name': 'Bob',
+                'message': 'i fixed a bug',
+                'patch_set': [
+                    {
+                        'path': 'app/tigermachine.cpp',
+                        'type': 'M',
+                    },
+                ]
+            }
+        ])
+
+        result = get_serialized_event_file_committers(self.project, event)
+        assert len(result) == 1
+        assert 'commits' in result[0]
+        assert len(result[0]['commits']) == 1
+        assert result[0]['commits'][0]['id'] == 'a' * 40
+
     def test_not_matching(self):
         event = self.create_event(
             group=self.group,
