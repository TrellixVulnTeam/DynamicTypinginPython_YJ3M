commit 174b3092e202aea862c3cb61cd6a92308fd94b5c
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Jan 8 13:46:36 2020 -0800

    test: Remove SnubaEvent tests (#16292)
    
    Removes all references of SnubaEvent from tests
    - Rewrite event serializer test to test new event model
    - Remove test of SnubaEvent

diff --git a/tests/sentry/api/serializers/test_event.py b/tests/sentry/api/serializers/test_event.py
index 4028aa6950..2cc7284f57 100644
--- a/tests/sentry/api/serializers/test_event.py
+++ b/tests/sentry/api/serializers/test_event.py
@@ -5,7 +5,7 @@ from __future__ import absolute_import
 import six
 
 from sentry.api.serializers import serialize, SimpleEventSerializer
-from sentry.api.serializers.models.event import SharedEventSerializer, SnubaEvent
+from sentry.api.serializers.models.event import SharedEventSerializer
 from sentry.models import EventError
 from sentry.testutils import TestCase
 from sentry.utils.samples import load_data
@@ -249,39 +249,19 @@ class SimpleEventSerializerTest(TestCase):
         """
         Use the SimpleEventSerializer to serialize an event
         """
-
-        group = self.create_group()
-        event = SnubaEvent(
-            {
-                "event_id": "a",
-                "project_id": 1,
-                "message": "hello there",
-                "title": "hi",
-                "type": "default",
-                "location": "somewhere",
-                "culprit": "foo",
-                "timestamp": "2011-01-01T00:00:00Z",
-                "user_id": "123",
-                "email": "test@test.com",
-                "username": "test",
-                "ip_address": "192.168.0.1",
-                "platform": "asdf",
-                "group_id": group.id,
-                "tags.key": ["sentry:user"],
-                "tags.value": ["email:test@test.com"],
-            }
+        event = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "timestamp": iso_format(before_now(minutes=1)),
+                "user": {"email": "test@test.com"},
+            },
+            project_id=self.project.id,
         )
         result = serialize(event, None, SimpleEventSerializer())
 
-        # Make sure we didn't have to call out to Nodestore to get the data
-        # required to serialize this event and the NodeData is still empty.
-        assert (
-            event.data._node_data is None
-        ), "SimpleEventSerializer should not load Nodestore data."
-
         assert result["eventID"] == event.event_id
         assert result["projectID"] == six.text_type(event.project_id)
-        assert result["groupID"] == six.text_type(group.id)
+        assert result["groupID"] == six.text_type(event.group.id)
         assert result["message"] == event.message
         assert result["title"] == event.title
         assert result["location"] == event.location
@@ -292,33 +272,27 @@ class SimpleEventSerializerTest(TestCase):
         assert result["user"]["username"] == event.get_minimal_user().username
         assert result["user"]["ip_address"] == event.get_minimal_user().ip_address
         assert result["tags"] == [
-            {"key": "user", "value": "email:test@test.com", "query": 'user.email:"test@test.com"'}
+            {"key": "level", "value": "error"},
+            {"key": "user", "value": "email:test@test.com", "query": 'user.email:"test@test.com"'},
         ]
 
     def test_no_group(self):
         """
         Use the SimpleEventSerializer to serialize an event without group
         """
-
-        event = SnubaEvent(
-            {
-                "event_id": "a",
-                "project_id": 1,
-                "message": "hello there",
-                "title": "hi",
-                "type": "default",
-                "location": "somewhere",
-                "culprit": "foo",
-                "timestamp": "2011-01-01T00:00:00Z",
-                "user_id": "123",
-                "email": "test@test.com",
-                "username": "test",
-                "ip_address": "192.168.0.1",
-                "platform": "asdf",
-                "group_id": None,
-                "tags.key": ["sentry:user"],
-                "tags.value": ["email:test@test.com"],
-            }
+        event = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "start_timestamp": iso_format(before_now(minutes=1)),
+                "timestamp": iso_format(before_now(minutes=1)),
+                "user": {"email": "test@test.com"},
+                "type": "transaction",
+                "transaction": "api.issue.delete",
+                "spans": [],
+                "contexts": {"trace": {"op": "foobar", "trace_id": "a" * 32, "span_id": "a" * 16}},
+            },
+            project_id=self.project.id,
         )
+
         result = serialize(event, None, SimpleEventSerializer())
         assert result["groupID"] is None
diff --git a/tests/snuba/models/test_event.py b/tests/snuba/models/test_event.py
deleted file mode 100644
index d4a4bd1b80..0000000000
--- a/tests/snuba/models/test_event.py
+++ /dev/null
@@ -1,98 +0,0 @@
-from __future__ import absolute_import
-
-from datetime import datetime, timedelta
-
-from sentry.api.serializers import serialize
-from sentry.models.event import SnubaEvent
-from sentry.testutils import SnubaTestCase, TestCase
-from sentry.testutils.helpers.datetime import iso_format, before_now
-
-
-class SnubaEventTest(TestCase, SnubaTestCase):
-    def setUp(self):
-        super(SnubaEventTest, self).setUp()
-
-        self.event_id = "f" * 32
-        self.now = datetime.utcnow().replace(microsecond=0) - timedelta(seconds=10)
-        self.proj1 = self.create_project()
-        self.proj1env1 = self.create_environment(project=self.proj1, name="test")
-
-        # Raw event data
-        self.data = {
-            "event_id": self.event_id,
-            "message": "message 1",
-            "platform": "python",
-            "timestamp": iso_format(before_now(minutes=1)),
-            "tags": {
-                "foo": "bar",
-                "baz": "quux",
-                "environment": "prod",
-                "sentry:user": u"id:user1",
-                "sentry:release": "release1",
-            },
-            "user": {"id": u"user1", "email": u"user1@sentry.io"},
-        }
-
-        event1 = self.store_event(data=self.data, project_id=self.proj1.id)
-        self.proj1group1 = event1.group
-
-    def test_fetch(self):
-        event = SnubaEvent(
-            {
-                "event_id": self.event_id,
-                "project_id": self.proj1.id,
-                "group_id": self.proj1group1.id,
-                "timestamp": self.data["timestamp"],
-            }
-        )
-        # Make sure we get back event properties from snuba
-        assert event.event_id == self.event_id
-        assert event.group.id == self.proj1group1.id
-        assert event.project.id == self.proj1.id
-        assert event._project_cache == self.proj1
-        # That shouldn't have triggered a nodestore load yet
-        assert event.data._node_data is None
-        # But after we ask for something that's not in snuba
-        event.get_hashes()
-        # We should have populated the NodeData
-        assert event.data._node_data is not None
-        # And the full user should be in there.
-        assert event.data["user"]["id"] == u"user1"
-
-    def test_minimal(self):
-        """
-        Test that a SnubaEvent that only loads minimal data from snuba
-        can still be serialized completely by falling back to nodestore data.
-        """
-        event = SnubaEvent(
-            {
-                "event_id": self.event_id,
-                "project_id": self.proj1.id,
-                "group_id": self.proj1group1.id,
-                "timestamp": self.data["timestamp"],
-            }
-        )
-        snuba_serialized = serialize(event)
-
-        assert snuba_serialized["message"] == self.data["message"]
-        assert snuba_serialized["eventID"] == self.data["event_id"]
-        assert snuba_serialized["platform"] == self.data["platform"]
-        assert snuba_serialized["user"]["email"] == self.data["user"]["email"]
-
-    def test_bind_nodes(self):
-        """
-        Test that bind_nodes works on snubaevents to populate their
-        NodeDatas.
-        """
-        event = SnubaEvent(
-            {
-                "event_id": self.event_id,
-                "project_id": self.proj1.id,
-                "group_id": self.proj1group1.id,
-                "timestamp": self.data["timestamp"],
-            }
-        )
-        assert event.data._node_data is None
-        event.bind_node_data()
-        assert event.data._node_data is not None
-        assert event.data["user"]["id"] == u"user1"
