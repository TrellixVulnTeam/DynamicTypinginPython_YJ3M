commit fc6580a2dc58c55128021d1a0a63781445ee4fbf
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Apr 26 16:57:04 2011 -0700

    Added an index for times_seen on GroupedMessage. Added frequency sort option. Added a buncho f missing trans tags. The score column will now update atomically if using MySQL or Postgres

diff --git a/CHANGES b/CHANGES
index 828c239a81..1db0b52665 100644
--- a/CHANGES
+++ b/CHANGES
@@ -5,6 +5,10 @@
 * Added Async client (thanks to Yuri Baburov).
 * Added support for raw_post_data (thanks to Matthew Schinckel).
 * django-paging and django-indexer no longer need to be in INSTALLED_APPS.
+* Added an index for GroupedMessages.times_seen.
+* The ``score`` column will update atomically in PostgreSQL and MySQL.
+* Added the frequency sort option.
+* Better internationalization support.
 
 1.6.10
 
diff --git a/sentry/manager.py b/sentry/manager.py
index 8bdbf69324..e0f78dbe79 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -7,12 +7,34 @@ from django.db import models
 from django.db.models import signals
 
 from sentry import conf
-from sentry.helpers import construct_checksum
+from sentry.helpers import construct_checksum, get_db_engine
 
 assert not conf.DATABASE_USING or django.VERSION >= (1, 2), 'The `SENTRY_DATABASE_USING` setting requires Django >= 1.2'
 
 logger = logging.getLogger('sentry.errors')
 
+class ScoreClause(object):
+    def __init__(self, group):
+        self.group = group
+
+    def prepare_database_save(self, unused):
+        return self
+
+    def prepare(self, evaluator, query, allow_joins):
+        return
+
+    def evaluate(self, node, qn, connection):
+        engine = get_db_engine(getattr(connection, 'alias', 'default'))
+        if engine.startswith('postgresql'):
+            sql = 'log(times_seen) * 600 + last_seen::abstime::int'
+        elif engine.startswith('mysql'):
+            sql = 'log(times_seen) * 600 + unix_timestamp(last_seen)'
+        else:
+            # XXX: if we cant do it atomicly let's do it the best we can
+            sql = self.group.get_score()
+        
+        return (sql, [])
+
 class SentryManager(models.Manager):
     use_for_related_fields = True
 
@@ -75,7 +97,7 @@ class SentryManager(models.Manager):
                     status=0,
                     last_seen=now,
                     # XXX: this is precise and non-atomic
-                    score=group.get_score(),
+                    score=ScoreClause(group),
                 )
                 signals.post_save.send(sender=GroupedMessage, instance=group, created=False)
             else: 
diff --git a/sentry/migrations/0012_auto.py b/sentry/migrations/0012_auto.py
new file mode 100644
index 0000000000..f9ccc59682
--- /dev/null
+++ b/sentry/migrations/0012_auto.py
@@ -0,0 +1,72 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding index on 'GroupedMessage', fields ['times_seen']
+        db.create_index('sentry_groupedmessage', ['times_seen'])
+
+
+    def backwards(self, orm):
+        
+        # Removing index on 'GroupedMessage', fields ['times_seen']
+        db.delete_index('sentry_groupedmessage', ['times_seen'])
+
+
+    models = {
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.groupedmessage': {
+            'Meta': {'unique_together': "(('logger', 'view', 'checksum'),)", 'object_name': 'GroupedMessage'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.message': {
+            'Meta': {'object_name': 'Message'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'message_set'", 'null': 'True', 'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index 8b3e8b7588..1cedbd2ec3 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -16,7 +16,7 @@ from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
 from sentry import conf
-from sentry.helpers import cached_property, construct_checksum, get_db_engine, transform, get_filters
+from sentry.helpers import cached_property, construct_checksum, transform, get_filters
 from sentry.manager import GroupedMessageManager, SentryManager
 from sentry.reporter import FakeRequest
 
@@ -107,7 +107,7 @@ class MessageBase(Model):
 
 class GroupedMessage(MessageBase):
     status          = models.PositiveIntegerField(default=0, choices=STATUS_LEVELS, db_index=True)
-    times_seen      = models.PositiveIntegerField(default=1)
+    times_seen      = models.PositiveIntegerField(default=1, db_index=True)
     last_seen       = models.DateTimeField(default=datetime.datetime.now, db_index=True)
     first_seen      = models.DateTimeField(default=datetime.datetime.now, db_index=True)
 
@@ -141,15 +141,6 @@ class GroupedMessage(MessageBase):
     def get_score(self):
         return int(math.log(self.times_seen) * 600 + int(self.last_seen.strftime('%s')))
 
-    @classmethod
-    def get_score_clause(cls):
-        engine = get_db_engine()
-        if engine.startswith('postgresql'):
-            return 'log(times_seen) * 600 + last_seen::abstime::int'
-        if engine.startswith('mysql'):
-            return 'log(times_seen) * 600 + unix_timestamp(last_seen)'
-        return 'times_seen'
-
     def mail_admins(self, request=None, fail_silently=True):
         if not conf.ADMINS:
             return
diff --git a/sentry/templates/sentry/group/details.html b/sentry/templates/sentry/group/details.html
index c8dc7f220e..e32c562af7 100644
--- a/sentry/templates/sentry/group/details.html
+++ b/sentry/templates/sentry/group/details.html
@@ -1,12 +1,12 @@
 {% extends "sentry/layout.html" %}
 
-{% load sentry_helpers %}
 {% load i18n %}
+{% load sentry_helpers %}
 
 {% block title %}{{ group.error }} | {{ block.super }}{% endblock %}
 
 {% block heading %}
-    Message Details <span><a href="{% url sentry %}">&laquo; {% trans "Back to list" %}</a></span>
+    {% trans "Message Details" %} <span><a href="{% url sentry %}">&laquo; {% trans "Back to list" %}</a></span>
 {% endblock %}
 
 {% block sidebar %}
@@ -18,15 +18,15 @@
     </ul>
     <h2>Meta</h2>
     <dl class="flat">
-        <dt>Logger:</dt>
+        <dt>{% trans "Logger:" %}</dt>
         <dd><a href="{% url sentry %}?logger={{ group.logger }}">{{ group.logger }}</a></dd>
-        <dt>Level:</dt>
+        <dt>{% trans "Level:" %}</dt>
         <dd><a href="{% url sentry %}?level={{ group.level }}">{{ group.get_level_display }}</a></dd>
-        <dt>Status:</dt>
+        <dt>{% trans "Status:" %}</dt>
         <dd>{{ group.get_status_display|title }}</dd>
-        <dt>First Seen:</dt>
+        <dt>{% trans "First Seen:" %}</dt>
         <dd>{{ group.first_seen|timesince }}</dd>
-        <dt>Last Seen:</dt>
+        <dt>{% trans "Last Seen:" %}</dt>
         <dd>{{ group.last_seen|timesince }}</dd>
     </dl>
     
@@ -70,7 +70,7 @@
     {% block inner %}
         <div id="details">
             {% if group.has_two_part_message %}
-                <h2>Full Message</h2>
+                <h2>{% trans "Full Message" %}</h2>
                 <pre id="full-message">{{ group.message }}</pre>
             {% endif %}
             
@@ -158,9 +158,9 @@
                     });
                 });
                 </script>
-                <h2>Frequency</h2>
+                <h2>{% trans "Frequency" %}</h2>
                 <div id="chart">
-                    <noscript>Get yourself some JavaScripts dood</noscript>
+                    <noscript>{% trans "Get yourself some JavaScripts dood" %}</noscript>
                 </div>
                 {% endif %}
             {% endwith %}
@@ -177,8 +177,8 @@
                                     <table class="vars">
                                         <thead>
                                             <tr>
-                                                <th>Variable</th>
-                                                <th>Value</th>
+                                                <th>{% trans "Variable" %}</th>
+                                                <th>{% trans "Value" %}</th>
                                             </tr>
                                         </thead>
                                         <tbody>
@@ -194,7 +194,7 @@
                                     {{ v|pprint }}
                                 {% endif %}
                             {% else %}
-                                <p>No data for {{ k }}</p>
+                                <p>{% blocktrans with varname=k %}No data for {{ varname }}{% endblocktrans %}</p>
                             {% endif %}
                             </td>
                         </tr>
@@ -204,7 +204,7 @@
             
             {% if version_data %}
                 <div id="versioninfo">
-                    <h2>Module Versions</h2>
+                    <h2>{% trans "Module Versions" %}</h2>
                     <table>
                         {% for k, v in version_data %}
                             <tr>
diff --git a/sentry/templates/sentry/group/message.html b/sentry/templates/sentry/group/message.html
index 2a0b98b4c6..f07aa9d4bc 100644
--- a/sentry/templates/sentry/group/message.html
+++ b/sentry/templates/sentry/group/message.html
@@ -1,8 +1,9 @@
 {% extends "sentry/group/details.html" %}
 
+{% load i18n %}
 {% load sentry_helpers %}
 
-{% block title %}{{ group.error }} | Sentry{% endblock %}
+{% block title %}{{ group.error }} | {{ block.super }}{% endblock %}
 
 {% block inner %}
     <ul class="messages" id="message_list">
@@ -40,7 +41,7 @@
     {% endif %}
 
     <div id="requestinfo">
-        <h2>More Information</h2>
+        <h2>{% trans "More Information" %}</h2>
 
         <table>
             {% for k, v in json_data %}
@@ -52,8 +53,8 @@
                             <table class="vars">
                                 <thead>
                                     <tr>
-                                        <th>Variable</th>
-                                        <th>Value</th>
+                                        <th>{% trans "Variable" %}</th>
+                                        <th>{% trans "Value" %}</th>
                                     </tr>
                                 </thead>
                                 <tbody>
@@ -69,7 +70,7 @@
                             {{ v|pprint }}
                         {% endif %}
                     {% else %}
-                        <p>No data for {{ k }}</p>
+                        <p>{% blocktrans with varname=k %}No data for {{ varname }}{% endblocktrans %}</p>
                     {% endif %}
                     </td>
                 </tr>
diff --git a/sentry/templates/sentry/group/message_list.html b/sentry/templates/sentry/group/message_list.html
index 310afc4bbd..d5ea78c59a 100644
--- a/sentry/templates/sentry/group/message_list.html
+++ b/sentry/templates/sentry/group/message_list.html
@@ -1,9 +1,10 @@
 {% extends "sentry/group/details.html" %}
 
+{% load i18n %}
 {% load sentry_helpers %}
 
 {% block inner %}
-    <h2>Message List</h2>
+    <h2>{% trans "Message List" %}</h2>
     {% paginate message_list from request as message_list per_page 15 %}
     <div class="clearfix">
         {{ message_list.paging }}
diff --git a/sentry/templates/sentry/index.html b/sentry/templates/sentry/index.html
index d61fabde47..6e7192e97c 100644
--- a/sentry/templates/sentry/index.html
+++ b/sentry/templates/sentry/index.html
@@ -1,19 +1,20 @@
 {% extends "sentry/layout.html" %}
 
+{% load i18n %}
 {% load sentry_helpers %}
 
-{% block heading %}Dashboard{% endblock %}
+{% block heading %}{% trans "Dashboard" %}{% endblock %}
 
 {% block sidebar %}
     {% if chart_url %}
-        <h2>Last 24 Hours</h2>
+        <h2>{% trans "Last 24 Hours" %}</h2>
         <img src="{{ chart_url }}" class="chart" alt="chart"/>
     {% endif %}
 
     {% for filter in filters %}
         <div class="sidebar-module sidebar-module-{{ filter.column }}">
             {% if filter.show_label %}
-                <h2>{{ filter.label }}</h2>
+                <h2>{% trans filter.label %}</h2>
             {% endif %}
             <form method="get" action="{{ filter.get_query_string|safe }}">
                 {{ filter.render }}
@@ -31,10 +32,11 @@
                 {% for k, v in request.GET.iteritems %}
                     <input type="hidden" name="{{ k }}" value="{{ v }}"/>
                 {% endfor %}
-                <div class="sort-by">Sort by <select name="sort" onchange="this.form.submit()">
-                    <option value=""{% ifequal sort 'priority' %} selected="selected"{% endifequal %}>Priority</option>
-                    <option value="date"{% ifequal sort 'date' %} selected="selected"{% endifequal %}>Last Seen</option>
-                    <option value="new"{% ifequal sort 'new' %} selected="selected"{% endifequal %}>First Seen</option>
+                <div class="sort-by">{% trans "Sort by" %} <select name="sort" onchange="this.form.submit()">
+                    <option value=""{% ifequal sort 'priority' %} selected="selected"{% endifequal %}>{% trans "Priority" %}</option>
+                    <option value="date"{% ifequal sort 'date' %} selected="selected"{% endifequal %}>{% trans "Last Seen" %}</option>
+                    <option value="new"{% ifequal sort 'new' %} selected="selected"{% endifequal %}>{% trans "First Seen" %}</option>
+                    <option value="freq"{% ifequal sort 'freq' %} selected="selected"{% endifequal %}>{% trans "Frequency" %}</option>
                 </select>
                 </div>
             </form>
@@ -53,7 +55,7 @@
         </ul>
     {% else %}
         <ul class="messages" id="message_list">
-            <li class="no-messages" id="no_messages">No messages match your filters.</li>
+            <li class="no-messages" id="no_messages">{% trans "No messages match your filters." %}</li>
         </ul>
     {% endif %}
 
diff --git a/sentry/templates/sentry/layout.html b/sentry/templates/sentry/layout.html
index 1a6e990ed1..2f1d0faba4 100644
--- a/sentry/templates/sentry/layout.html
+++ b/sentry/templates/sentry/layout.html
@@ -1,3 +1,4 @@
+{% load i18n %}
 {% load sentry_helpers %}
 
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> 
@@ -30,12 +31,12 @@
         <div id="header"> 
             <div class="container">
                 <h1><a href="{% url sentry %}"><img src="{% url sentry-media "images/sentry.png" %}" border="0" width="32"/>Sentry</a></h1>
-                <h2>{% block heading %}Dashboard{% endblock %}</h2>
+                <h2>{% block heading %}{% trans "Dashboard" %}{% endblock %}</h2>
                 {% block search %}
                     <form id="search" method="GET" action="{% url sentry-search %}">
                         <input type="hidden" name="sort" value="{% if sort %}{{ sort }}{% endif %}"/>
                         <input type="text" name="q" value="{% if query %}{{ query }}{% endif %}" placeholder="{% if has_search %}search query or message id{% else %}message id{% endif %}"/>
-                        <button type="submit">Go</button>
+                        <button type="submit">{% trans "Go" %}</button>
                     </form>
                 {% endblock %}
             </div>
@@ -59,10 +60,10 @@
          </div>
         <div id="footer">
             <div class="container">
-                Sentry {% sentry_version %} | Powered by sexy Django magic | Conjured up by the <a href="http://code.disqus.com">DISQUS</a> team and other noble <a href="https://github.com/dcramer/django-sentry/contributors">sorcerers</a>.
+                Sentry {% sentry_version %} | {% trans "Powered by sexy Django magic" %} | Conjured up by the <a href="http://code.disqus.com">DISQUS</a> team and other noble <a href="https://github.com/dcramer/django-sentry/contributors">sorcerers</a>.
                 <ul class="nav" id="account">
                     {% if request.user.is_authenticated %}
-                        <li><a href="{% url sentry-logout %}">Logout</a></li>
+                        <li><a href="{% url sentry-logout %}">{% trans "Logout" %}</a></li>
                     {% endif %}
                 </ul>
             </div>
diff --git a/sentry/templates/sentry/login.html b/sentry/templates/sentry/login.html
index 5b3a82bc54..e8d0169704 100644
--- a/sentry/templates/sentry/login.html
+++ b/sentry/templates/sentry/login.html
@@ -1,20 +1,21 @@
 {% extends "sentry/layout.html" %}
 
+{% load i18n %}
 {% load sentry_helpers %}
 
-{% block title %}Login | {{ block.super }}{% endblock %}
+{% block title %}{% trans "Login" %} | {{ block.super }}{% endblock %}
 
-{% block heading %}Login{% endblock %}
+{% block heading %}{% trans "Login" %}{% endblock %}
 
 {% block search %}{% endblock %}
 
 {% block content %}
     <div id="body">
         <div class="login-area">
-            <p>You must log in to continue</p>
+            <p>{% trans "You must log in to continue" %}</p>
         
             {% if form.errors %}
-                <p class="error">Your username and password didn't match. Please try again.</p>
+                <p class="error">{% trans "Your username and password didn't match. Please try again." %}</p>
             {% endif %}
 
             <form method="post" action="" class="login-form">
@@ -36,7 +37,7 @@
                     </tr>
                 </table>
                 <div class="submit">
-                    <button type="submit" class="button">Login</button>
+                    <button type="submit" class="button">{% trans "Login" %}</button>
                 </div>
             </form>
         </div>
diff --git a/sentry/templates/sentry/partial/_pager.html b/sentry/templates/sentry/partial/_pager.html
index 99d8889ae5..3cb9dd2bf3 100644
--- a/sentry/templates/sentry/partial/_pager.html
+++ b/sentry/templates/sentry/partial/_pager.html
@@ -1,22 +1,24 @@
+{% load i18n %}
+
 {% if paginator.has_pages %}
     <div class="paging">
         <div class="paging-meta">Page {{ paginator.page }}{% if paginator.num_pages %} of {{ paginator.num_pages }}{% endif %}</div>
         {% if paginator.num_pages %}
             <ul class="paging-numeric">
-                <li class="paging-first">{% if not paginator.is_first %}<a href="?{{ query_string|escape }}&amp;p=1">First</a>{% else %}<span>First</span>{% endif %}</li>
-                <li class="paging-previous">{% if paginator.has_previous %}<a href="?{{ query_string|escape }}&amp;p={{ paginator.previous_page }}">Previous</a>{% else %}<span>Previous</span>{% endif %}</li>
+                <li class="paging-first">{% if not paginator.is_first %}<a href="?{{ query_string|escape }}&amp;p=1">{% trans "First" %}</a>{% else %}<span>{% trans "First" %}</span>{% endif %}</li>
+                <li class="paging-previous">{% if paginator.has_previous %}<a href="?{{ query_string|escape }}&amp;p={{ paginator.previous_page }}">{% trans "Previous" %}</a>{% else %}<span>{% trans "Previous" %}</span>{% endif %}</li>
                 {% for p in paginator.page_range %}
                     <li{% ifequal p paginator.page %} class="paging-current"{% endifequal %}><a href="?{{ query_string|escape }}&amp;p={{ p }}">{{ p }}</a></li>
                 {% endfor %}
-                <li class="paging-next">{% if paginator.has_next %}<a href="?{{ query_string|escape }}&amp;p={{ paginator.next_page }}">Next</a>{% else %}<span>Next</span>{% endif %}</li>
+                <li class="paging-next">{% if paginator.has_next %}<a href="?{{ query_string|escape }}&amp;p={{ paginator.next_page }}">{% trans "Next" %}</a>{% else %}<span>{% trans "Next" %}</span>{% endif %}</li>
                 {% if paginator.num_pages %}
-                    <li class="paging-last">{% if not paginator.is_last %}<a href="?{{ query_string|escape }}&amp;p={{ paginator.num_pages }}">Last</a>{% else %}<span>Last</span>{% endif %}</li>
+                    <li class="paging-last">{% if not paginator.is_last %}<a href="?{{ query_string|escape }}&amp;p={{ paginator.num_pages }}">Last</a>{% else %}<span>{% trans "Last" %}</span>{% endif %}</li>
                 {% endif %}
             </ul>
         {% else %}
             <ul class="paging-endless">
-                <li class="paging-previous">{% if paginator.has_previous %}<a href="?{{ query_string|escape }}&amp;p={{ paginator.previous_page }}">Previous Page</a>{% else %}<span>Previous Page</span>{% endif %}</li>
-                <li class="paging-next">{% if paginator.has_next %}<a href="?{{ query_string|escape }}&amp;p={{ paginator.next_page }}">Next Page</a>{% else %}<span>Next Page</span>{% endif %}</li>
+                <li class="paging-previous">{% if paginator.has_previous %}<a href="?{{ query_string|escape }}&amp;p={{ paginator.previous_page }}">{% trans "Previous Page" %}</a>{% else %}<span>{% trans "Previous Page" %}</span>{% endif %}</li>
+                <li class="paging-next">{% if paginator.has_next %}<a href="?{{ query_string|escape }}&amp;p={{ paginator.next_page }}">{% trans "Next Page" %}</a>{% else %}<span>{% trans "Next Page" %}"</span>{% endif %}</li>
             </ul>
         {% endif %}
     </div>
diff --git a/sentry/templates/sentry/search.html b/sentry/templates/sentry/search.html
index 414f99c016..fb261ad7ec 100644
--- a/sentry/templates/sentry/search.html
+++ b/sentry/templates/sentry/search.html
@@ -1,8 +1,9 @@
 {% extends "sentry/layout.html" %}
 
+{% load i18n %}
 {% load sentry_helpers %}
 
-{% block heading %}Dashboard{% endblock %}
+{% block heading %}{% trans "Search" %}{% endblock %}
 
 {% block main %}
     {% paginate message_list from request as message_list per_page 15 %}
@@ -30,7 +31,7 @@
         </ul>
     {% else %}
         <ul class="messages" id="message_list">
-            <li class="no-messages" id="no_messages">No messages match your query.</li>
+            <li class="no-messages" id="no_messages">{% trans "No messages match your query." %}</li>
         </ul>
     {% endif %}
 
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index c3ee0fa7c3..b71a8104b2 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -730,6 +730,23 @@ class SentryTestCase(TestCase):
         self.assertTrue('POST' in last.data)
         self.assertEquals(request.raw_post_data, last.data['POST'])
 
+    def testScoreUpdate(self):
+        self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
+        
+        self.assertEquals(GroupedMessage.objects.count(), 1)
+        group = GroupedMessage.objects.get()
+        self.assertTrue(group.score > 0, group.score)
+
+        # drop the score to ensure its getting re-set
+        group.score = 0
+        group.save()
+        
+        self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
+        self.assertEquals(GroupedMessage.objects.count(), 1)
+
+        group = GroupedMessage.objects.get()
+        self.assertTrue(group.score > 0, group.score)
+
 class SentryViewsTest(TestCase):
     urls = 'sentry.tests.urls'
     fixtures = ['sentry/tests/fixtures/views.json']
@@ -780,13 +797,13 @@ class SentryViewsTest(TestCase):
 
     def testDashboard(self):
         self.client.login(username='admin', password='admin')
-        resp = self.client.get(reverse('sentry'), follow=True)
+        resp = self.client.get(reverse('sentry') + '?sort=freq', follow=True)
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/index.html')
+        self.assertEquals(len(resp.context['message_list']), 4)
         group = resp.context['message_list'][0]
         self.assertEquals(group.times_seen, 7)
         self.assertEquals(group.class_name, 'AttributeError')
-        self.assertEquals(len(resp.context['message_list']), 4)
 
     def testGroup(self):
         self.client.login(username='admin', password='admin')
diff --git a/sentry/views.py b/sentry/views.py
index a47971af53..b63b7aecea 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -152,17 +152,15 @@ def index(request):
     except (TypeError, ValueError):
         page = 1
 
-    message_list = GroupedMessage.objects.extra(
-        select={
-            'score': GroupedMessage.get_score_clause(),
-        }
-    )
+    message_list = GroupedMessage.objects.all()
 
     sort = request.GET.get('sort')
     if sort == 'date':
         message_list = message_list.order_by('-last_seen')
     elif sort == 'new':
         message_list = message_list.order_by('-first_seen')
+    elif sort == 'freq':
+        message_list = message_list.order_by('-times_seen')
     else:
         sort = 'priority'
         message_list = message_list.order_by('-score', '-last_seen')
@@ -201,17 +199,15 @@ def ajax_handler(request):
             filters.append(filter_(request))
 
 
-        message_list = GroupedMessage.objects.extra(
-            select={
-                'score': GroupedMessage.get_score_clause(),
-            }
-        )
+        message_list = GroupedMessage.objects.all()
         
         sort = request.GET.get('sort')
         if sort == 'date':
             message_list = message_list.order_by('-last_seen')
         elif sort == 'new':
             message_list = message_list.order_by('-first_seen')
+        elif sort == 'freq':
+            message_list = message_list.order_by('-times_seen')
         else:
             sort = 'priority'
             message_list = message_list.order_by('-score', '-last_seen')
