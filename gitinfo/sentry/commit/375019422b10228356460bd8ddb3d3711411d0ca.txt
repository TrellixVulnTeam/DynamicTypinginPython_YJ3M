commit 375019422b10228356460bd8ddb3d3711411d0ca
Author: Stephen Cefali <scefali@sentry.io>
Date:   Tue May 26 10:18:53 2020 -0700

    fix(ecosystem): allow org token to be used to get project stats of project with no team (#18996)

diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
index 148baf6121..2b0d2117a4 100644
--- a/src/sentry/api/bases/project.py
+++ b/src/sentry/api/bases/project.py
@@ -11,7 +11,7 @@ from sentry.api.helpers.environments import get_environments
 from sentry.api.exceptions import ResourceDoesNotExist, ProjectMoved
 from sentry.auth.superuser import is_active_superuser
 from sentry.auth.system import is_system_auth
-from sentry.models import OrganizationMember, Project, ProjectStatus, ProjectRedirect
+from sentry.models import OrganizationMember, Project, ProjectStatus, ProjectRedirect, SentryApp
 from sentry.utils.sdk import configure_scope, bind_organization_context
 
 from .organization import OrganizationPermission
@@ -47,6 +47,8 @@ class ProjectPermission(OrganizationPermission):
             # this is only for team-less projects
             if is_active_superuser(request):
                 return True
+            elif request.user.is_sentry_app:
+                return SentryApp.check_project_permission_for_sentry_app_user(request.user, project)
             try:
                 role = (
                     OrganizationMember.objects.filter(
diff --git a/src/sentry/models/sentryapp.py b/src/sentry/models/sentryapp.py
index 88d99c1a72..673bc67499 100644
--- a/src/sentry/models/sentryapp.py
+++ b/src/sentry/models/sentryapp.py
@@ -132,6 +132,15 @@ class SentryApp(ParanoidModel, HasApiScopes):
 
         return cls.objects.filter(status=SentryAppStatus.PUBLISHED)
 
+    # this method checks if a user from a sentry app has permission to a specific project
+    # for now, only checks if app is installed on the org of the project
+    @classmethod
+    def check_project_permission_for_sentry_app_user(cls, user, project):
+        assert user.is_sentry_app
+        # if the user exists, so should the sentry_app
+        sentry_app = cls.objects.get(proxy_user=user)
+        return sentry_app.is_installed_on(project.organization)
+
     @property
     def is_published(self):
         return self.status == SentryAppStatus.PUBLISHED
diff --git a/src/sentry/models/sentryappinstallation.py b/src/sentry/models/sentryappinstallation.py
index 5adb48132a..a2e972ede1 100644
--- a/src/sentry/models/sentryappinstallation.py
+++ b/src/sentry/models/sentryappinstallation.py
@@ -58,12 +58,12 @@ class SentryAppInstallation(ParanoidModel):
         related_name="sentry_app_installation",
     )
 
-    # Two scenarios for tokens:
-    # 1) An installation gets an access token once the Grant has been exchanged,
+    # Only use this token for public integrtions since each install has only token at a time
+    # An installation gets an access token once the Grant has been exchanged,
     # and is updated when the token gets refreshed.
     #
-    # 2) An installation is created for an internal SentryApp. This token will
-    # not need to be refreshed as it will live forever
+    # Do NOT Use this token for internal integrations since there could be multiple
+    # need to look at SentryAppInstallationToken which connects api_tokens to installations
     api_token = models.OneToOneField(
         "sentry.ApiToken",
         null=True,
diff --git a/tests/sentry/api/bases/test_project.py b/tests/sentry/api/bases/test_project.py
index 6bf600c931..665f7b491e 100644
--- a/tests/sentry/api/bases/test_project.py
+++ b/tests/sentry/api/bases/test_project.py
@@ -110,6 +110,39 @@ class ProjectPermissionTest(ProjectPermissionBase):
         self.create_member(user=user, organization=self.org, role="owner", teams=[self.team])
         assert self.has_object_perm("POST", self.project, user=user)
 
+    def test_project_no_team_sentry_app_installed(self):
+        project = self.create_project(teams=[self.team])
+        self.team.delete()
+        other_org = self.create_organization()
+        sentry_app = self.create_sentry_app(
+            name="my_app",
+            organization=other_org,
+            scopes=("project:write",),
+            webhook_url="http://example.com",
+        )
+        self.create_sentry_app_installation(
+            slug=sentry_app.slug, organization=self.org, user=self.user
+        )
+
+        assert self.has_object_perm("POST", project, user=sentry_app.proxy_user)
+
+    def test_project_no_team_sentry_app_not_installed(self):
+        project = self.create_project(teams=[self.team])
+        self.team.delete()
+        other_org = self.create_organization()
+        sentry_app = self.create_sentry_app(
+            name="my_app",
+            organization=other_org,
+            scopes=("project:write",),
+            webhook_url="http://example.com",
+        )
+        # install on other org
+        self.create_sentry_app_installation(
+            slug=sentry_app.slug, organization=other_org, user=self.user
+        )
+
+        assert not self.has_object_perm("POST", project, user=sentry_app.proxy_user)
+
 
 class ProjectPermissionNoJoinLeaveTest(ProjectPermissionBase):
     def setUp(self):
