commit 4055298cfe19ae2d685163a614160e3adfe7fed5
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 15 11:20:19 2015 -0700

    Add default host tag to Datadog

diff --git a/docs/internal-metrics.rst b/docs/internal-metrics.rst
index 6bf60cfaa0..fd1df51080 100644
--- a/docs/internal-metrics.rst
+++ b/docs/internal-metrics.rst
@@ -33,6 +33,7 @@ environment:
 
     SENTRY_METRICS_BACKEND = 'sentry.metrics.datadog.DatadogMetricsBackend'
     SENTRY_METRICS_OPTIONS = {
-        'api_key': ‘...',
-        'app_key': ‘...',
+        'api_key': '...',
+        'app_key': '...',
+        'tags': {},
     }
diff --git a/src/sentry/metrics/datadog.py b/src/sentry/metrics/datadog.py
index b6a8502ca2..e0294bce66 100644
--- a/src/sentry/metrics/datadog.py
+++ b/src/sentry/metrics/datadog.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 __all__ = ['DatadogMetricsBackend']
 
 from datadog import initialize, ThreadStats
+from datadog.util.hostname import get_hostname
 
 from .base import MetricsBackend
 
@@ -10,6 +11,11 @@ from .base import MetricsBackend
 class DatadogMetricsBackend(MetricsBackend):
     def __init__(self, prefix=None, **kwargs):
         # TODO(dcramer): it'd be nice if the initialize call wasn't a global
+        self.tags = kwargs.pop('tags', None)
+        if 'host' in kwargs:
+            self.host = kwargs.pop('host')
+        else:
+            self.host = get_hostname()
         initialize(**kwargs)
         self._stats = ThreadStats()
         self._stats.start()
@@ -19,7 +25,12 @@ class DatadogMetricsBackend(MetricsBackend):
         self._stats.stop()
 
     def incr(self, key, amount=1, sample_rate=1):
-        self._stats.increment(self._get_key(key), amount, sample_rate=sample_rate)
+        self._stats.increment(self._get_key(key), amount,
+                              sample_rate=sample_rate,
+                              tags=self.tags,
+                              host=self.host)
 
     def timing(self, key, value, sample_rate=1):
-        self._stats.timing(self._get_key(key), value, sample_rate=sample_rate)
+        self._stats.timing(self._get_key(key), value, sample_rate=sample_rate,
+                           tags=self.tags,
+                           host=self.host)
diff --git a/tests/sentry/metrics/test_datadog.py b/tests/sentry/metrics/test_datadog.py
index 712a12a8fb..5160b6ae51 100644
--- a/tests/sentry/metrics/test_datadog.py
+++ b/tests/sentry/metrics/test_datadog.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import socket
+
 from mock import patch
 
 from sentry.metrics.datadog import DatadogMetricsBackend
@@ -13,9 +15,19 @@ class DatadogMetricsBackendTest(TestCase):
     @patch('datadog.threadstats.base.ThreadStats.increment')
     def test_incr(self, mock_incr):
         self.backend.incr('foo')
-        mock_incr.assert_called_once_with('sentrytest.foo', 1, sample_rate=1)
+        mock_incr.assert_called_once_with(
+            'sentrytest.foo', 1,
+            sample_rate=1,
+            tags=None,
+            host=socket.gethostname(),
+        )
 
     @patch('datadog.threadstats.base.ThreadStats.timing')
     def test_timing(self, mock_timing):
         self.backend.timing('foo', 30)
-        mock_timing.assert_called_once_with('sentrytest.foo', 30, sample_rate=1)
+        mock_timing.assert_called_once_with(
+            'sentrytest.foo', 30,
+            sample_rate=1,
+            tags=None,
+            host=socket.gethostname(),
+        )
