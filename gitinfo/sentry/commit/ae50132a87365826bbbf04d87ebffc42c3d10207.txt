commit ae50132a87365826bbbf04d87ebffc42c3d10207
Author: Ted Kaemming <ted@kaemming.com>
Date:   Mon Sep 28 16:16:22 2015 -0700

    Factor out some of the grouping helpers to make them lazy.

diff --git a/digest.py b/digest.py
index 78ab77e764..cb57c42fde 100644
--- a/digest.py
+++ b/digest.py
@@ -26,5 +26,6 @@ print ''
 
 for group, records in build_digest(project, records):
     print '*', group.message_short
+    print ' ', group.culprit
+    print ' ', group.get_absolute_url()
     print ' ', len(records), 'events from', min(r.timestamp for r in records), 'to', max(r.timestamp for r in records)
-    print ''
diff --git a/src/sentry/digests/notifications.py b/src/sentry/digests/notifications.py
index 90a3030bab..ab58c1446a 100644
--- a/src/sentry/digests/notifications.py
+++ b/src/sentry/digests/notifications.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import functools
 import itertools
 import logging
 from collections import namedtuple
@@ -38,39 +39,30 @@ def event_to_record(event, rules=[]):
     )
 
 
-def group_score((group, records)):
-    return max(record.timestamp for record in records)
-
-
-def record_score(record):
-    return record.timestamp
-
-
-def build_digest(project, records):
-    """
-    """
+def group(records):
     key = lambda record: record.value.group_id
-
     raw = {}
     for group, records in itertools.groupby(sorted(records, key=key), key=key):
-        raw[group] = list(records)
+        yield group, list(records)
+
 
-    groups = Group.objects.filter(project=project).in_bulk(raw.keys())
+def associate_with_instance(project, groups):
+    groups = dict(groups)
 
-    results = []
-    for id, records in raw.iteritems():
+    instances = Group.objects.filter(project=project).in_bulk(groups.keys())
+    for key, records in groups.iteritems():
         try:
-            group = groups[id]
-        except IndexError:
+            yield instances[key], records
+        except KeyError:
             logger.warning('Skipping %s records for %s, no corresponding group instance exists.', len(records), id)
             continue
 
-        if group.is_muted():
-            logger.debug('Skipping %s records for %r, group is muted.', len(records), group)
-            continue
 
-        # TODO: Add other filter criteria.
+filter_muted_groups = functools.partial(
+    itertools.ifilter,
+    lambda (group, records): not group.is_muted(),
+)
 
-        results.append((group, sorted(records, key=record_score)))
 
-    return sorted(results, key=group_score)
+def build_digest(project, records):
+    return filter_muted_groups(associate_with_instance(project, group(records)))
