commit c7024efc5464a30d1f177aa43e1f967b3d72d647
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Jan 11 10:30:22 2019 -0800

    ref(issues): Refactor group event details (#11445)
    
    Refactor group event details to make it more usuable for the
    environments view. GroupDetails always passes project to child
    routes via props since it will no longer be accessible via context.

diff --git a/src/sentry/static/sentry/app/components/resolutionBox.jsx b/src/sentry/static/sentry/app/components/resolutionBox.jsx
index a448950a39..79eb979538 100644
--- a/src/sentry/static/sentry/app/components/resolutionBox.jsx
+++ b/src/sentry/static/sentry/app/components/resolutionBox.jsx
@@ -9,10 +9,12 @@ import {t, tct} from 'app/locale';
 export default class ResolutionBox extends React.Component {
   static propTypes = {
     statusDetails: PropTypes.object.isRequired,
+    orgId: PropTypes.string.isRequired,
+    projectId: PropTypes.string.isRequired,
   };
 
   renderReason = () => {
-    let {params, statusDetails} = this.props;
+    let {orgId, projectId, statusDetails} = this.props;
     let actor = statusDetails.actor ? (
       <strong>
         <Avatar user={statusDetails.actor} size={20} className="avatar" />
@@ -32,8 +34,8 @@ export default class ResolutionBox extends React.Component {
         version: (
           <Version
             version={statusDetails.inRelease}
-            orgId={params.orgId}
-            projectId={params.projectId}
+            orgId={orgId}
+            projectId={projectId}
           />
         ),
       });
@@ -42,8 +44,8 @@ export default class ResolutionBox extends React.Component {
         version: (
           <Version
             version={statusDetails.inRelease}
-            orgId={params.orgId}
-            projectId={params.projectId}
+            orgId={orgId}
+            projectId={projectId}
           />
         ),
       });
diff --git a/src/sentry/static/sentry/app/views/groupDetails/project/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails/project/groupEventDetails.jsx
index e847b24b8f..01a0da4165 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/project/groupEventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/project/groupEventDetails.jsx
@@ -1,131 +1,4 @@
-import React from 'react';
-import createReactClass from 'create-react-class';
-
-import {withMeta} from 'app/components/events/meta/metaProxy';
-import ApiMixin from 'app/mixins/apiMixin';
-import EventEntries from 'app/components/events/eventEntries';
-import GroupEventDetailsLoadingError from 'app/components/errors/groupEventDetailsLoadingError';
-import GroupSidebar from 'app/components/group/sidebar';
-import GroupState from 'app/mixins/groupState';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import MutedBox from 'app/components/mutedBox';
-import ResolutionBox from 'app/components/resolutionBox';
 import withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';
-
-import GroupEventToolbar from './eventToolbar';
-
-const GroupEventDetails = createReactClass({
-  displayName: 'GroupEventDetails',
-
-  mixins: [ApiMixin, GroupState],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      event: null,
-      eventNavLinks: '',
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  componentDidUpdate(prevProps) {
-    if (prevProps.params.eventId !== this.props.params.eventId) {
-      this.fetchData();
-    }
-  },
-
-  fetchData() {
-    const eventId = this.props.params.eventId || 'latest';
-    const groupId = this.getGroup().id;
-    const orgSlug = this.getOrganization().slug;
-    const projSlug = this.getProject().slug;
-
-    let url =
-      eventId === 'latest' || eventId === 'oldest'
-        ? `/issues/${groupId}/events/${eventId}/`
-        : `/projects/${orgSlug}/${projSlug}/events/${eventId}/`;
-
-    this.setState({
-      loading: true,
-      error: false,
-    });
-
-    this.api.request(url, {
-      success: (data, _, jqXHR) => {
-        this.setState({
-          event: data,
-          error: false,
-          loading: false,
-        });
-
-        this.api.bulkUpdate({
-          orgId: orgSlug,
-          projectId: projSlug,
-          itemIds: [groupId],
-          failSilently: true,
-          data: {hasSeen: true},
-        });
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-      },
-    });
-  },
-
-  render() {
-    let group = this.getGroup();
-    let evt = withMeta(this.state.event);
-    let params = this.props.params;
-
-    return (
-      <div>
-        <div className="event-details-container">
-          <div className="primary">
-            {evt && (
-              <GroupEventToolbar
-                group={group}
-                event={evt}
-                orgId={params.orgId}
-                projectId={params.projectId}
-              />
-            )}
-            {group.status != 'unresolved' && (
-              <div className="issue-status">
-                {group.status === 'ignored' && (
-                  <MutedBox statusDetails={group.statusDetails} />
-                )}
-                {group.status === 'resolved' && (
-                  <ResolutionBox statusDetails={group.statusDetails} params={params} />
-                )}
-              </div>
-            )}
-            {this.state.loading ? (
-              <LoadingIndicator />
-            ) : this.state.error ? (
-              <GroupEventDetailsLoadingError onRetry={this.fetchData} />
-            ) : (
-              <EventEntries
-                group={group}
-                event={evt}
-                orgId={params.orgId}
-                project={this.getProject()}
-              />
-            )}
-          </div>
-          <div className="secondary">
-            <GroupSidebar group={group} event={evt} />
-          </div>
-        </div>
-      </div>
-    );
-  },
-});
+import GroupEventDetails from '../shared/groupEventDetails';
 
 export default withEnvironmentInQueryString(GroupEventDetails);
diff --git a/src/sentry/static/sentry/app/views/groupDetails/project/eventToolbar.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/eventToolbar.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/groupDetails/project/eventToolbar.jsx
rename to src/sentry/static/sentry/app/views/groupDetails/shared/eventToolbar.jsx
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupDetails.jsx
index 6fed70613b..77789344c6 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupDetails.jsx
@@ -202,6 +202,7 @@ const GroupDetails = createReactClass({
           <GroupHeader orgId={params.orgId} project={project} group={group} />
           {React.cloneElement(this.props.children, {
             group,
+            project,
           })}
         </div>
       </DocumentTitle>
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupEventDetails.jsx
new file mode 100644
index 0000000000..c7414d4183
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupEventDetails.jsx
@@ -0,0 +1,116 @@
+import React from 'react';
+
+import SentryTypes from 'app/sentryTypes';
+import {withMeta} from 'app/components/events/meta/metaProxy';
+import EventEntries from 'app/components/events/eventEntries';
+import GroupEventDetailsLoadingError from 'app/components/errors/groupEventDetailsLoadingError';
+import GroupSidebar from 'app/components/group/sidebar';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import ResolutionBox from 'app/components/resolutionBox';
+import MutedBox from 'app/components/mutedBox';
+import withOrganization from 'app/utils/withOrganization';
+
+import GroupEventToolbar from './eventToolbar';
+import {fetchGroupEventAndMarkSeen} from './utils';
+
+class GroupEventDetails extends React.Component {
+  static propTypes = {
+    group: SentryTypes.Group.isRequired,
+    project: SentryTypes.Project.isRequired,
+    organization: SentryTypes.Organization.isRequired,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      loading: true,
+      error: false,
+      event: null,
+      eventNavLinks: '',
+    };
+  }
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  fetchData() {
+    const {group, project, organization, params} = this.props;
+    const eventId = params.eventId || 'latest';
+    const groupId = group.id;
+    const orgSlug = organization.slug;
+    const projSlug = project.slug;
+
+    this.setState({
+      loading: true,
+      error: false,
+    });
+
+    fetchGroupEventAndMarkSeen(orgSlug, projSlug, groupId, eventId)
+      .then(data => {
+        this.setState({
+          event: data,
+          error: false,
+          loading: false,
+        });
+      })
+      .catch(() => {
+        this.setState({
+          error: true,
+          loading: false,
+        });
+      });
+  }
+  render() {
+    const {group, project, organization} = this.props;
+    const evt = withMeta(this.state.event);
+
+    return (
+      <div>
+        <div className="event-details-container">
+          <div className="primary">
+            {evt && (
+              <GroupEventToolbar
+                group={group}
+                event={evt}
+                orgId={organization.slug}
+                projectId={project.slug}
+              />
+            )}
+            {group.status != 'unresolved' && (
+              <div className="issue-status">
+                {group.status === 'ignored' && (
+                  <MutedBox statusDetails={group.statusDetails} />
+                )}
+                {group.status === 'resolved' && (
+                  <ResolutionBox
+                    statusDetails={group.statusDetails}
+                    orgId={organization.slug}
+                    projectId={project.slug}
+                  />
+                )}
+              </div>
+            )}
+            {this.state.loading ? (
+              <LoadingIndicator />
+            ) : this.state.error ? (
+              <GroupEventDetailsLoadingError onRetry={this.fetchData} />
+            ) : (
+              <EventEntries
+                group={group}
+                event={evt}
+                orgId={organization.slug}
+                project={project}
+              />
+            )}
+          </div>
+          <div className="secondary">
+            <GroupSidebar group={group} event={evt} />
+          </div>
+        </div>
+      </div>
+    );
+  }
+}
+
+export default withOrganization(GroupEventDetails);
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/utils.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/utils.jsx
new file mode 100644
index 0000000000..f6964237e0
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/utils.jsx
@@ -0,0 +1,34 @@
+import {Client} from 'app/api';
+
+/**
+ * Fetches group data and mark as seen
+ *
+ * @param {String} orgId organization slug
+ * @param {String} projectId project slug
+ * @param {String} groupId groupId
+ * @param {String} eventId eventId or "latest" or "oldest"
+ * @returns {Promise<Object>}
+ */
+export function fetchGroupEventAndMarkSeen(orgId, projectId, groupId, eventId) {
+  const api = new Client();
+
+  const url =
+    eventId === 'latest' || eventId === 'oldest'
+      ? `/issues/${groupId}/events/${eventId}/`
+      : `/projects/${orgId}/${projectId}/events/${eventId}/`;
+
+  const promise = api.requestPromise(url);
+
+  promise.then(data => {
+    api.bulkUpdate({
+      orgId,
+      projectId,
+      itemIds: [groupId],
+      failSilently: true,
+      data: {hasSeen: true},
+    });
+    return data;
+  });
+
+  return promise;
+}
diff --git a/tests/js/spec/components/resolutionBox.spec.jsx b/tests/js/spec/components/resolutionBox.spec.jsx
index 239a130a3b..7a504f05a6 100644
--- a/tests/js/spec/components/resolutionBox.spec.jsx
+++ b/tests/js/spec/components/resolutionBox.spec.jsx
@@ -9,7 +9,8 @@ describe('ResolutionBox', function() {
       let wrapper = shallow(
         <ResolutionBox
           statusDetails={{inNextRelease: true}}
-          params={{orgId: 'org', projectId: 'project'}}
+          orgId={'org'}
+          projectId={'project'}
         />
       );
       expect(wrapper).toMatchSnapshot();
@@ -21,7 +22,8 @@ describe('ResolutionBox', function() {
             inNextRelease: true,
             actor: {id: '111', name: 'David Cramer', email: 'david@sentry.io'},
           }}
-          params={{orgId: 'org', projectId: 'project'}}
+          orgId={'org'}
+          projectId={'project'}
         />
       );
       expect(wrapper).toMatchSnapshot();
@@ -32,7 +34,8 @@ describe('ResolutionBox', function() {
           statusDetails={{
             inRelease: '1.0',
           }}
-          params={{orgId: 'org', projectId: 'project'}}
+          orgId={'org'}
+          projectId={'project'}
         />
       );
       expect(wrapper).toMatchSnapshot();
@@ -44,14 +47,15 @@ describe('ResolutionBox', function() {
             inRelease: '1.0',
             actor: {id: '111', name: 'David Cramer', email: 'david@sentry.io'},
           }}
-          params={{orgId: 'org', projectId: 'project'}}
+          orgId={'org'}
+          projectId={'project'}
         />
       );
       expect(wrapper).toMatchSnapshot();
     });
     it('handles default', function() {
       let wrapper = shallow(
-        <ResolutionBox statusDetails={{}} params={{orgId: 'org', projectId: 'project'}} />
+        <ResolutionBox statusDetails={{}} orgId={'org'} projectId={'project'} />
       );
       expect(wrapper).toMatchSnapshot();
     });
@@ -61,7 +65,8 @@ describe('ResolutionBox', function() {
           statusDetails={{
             inCommit: TestStubs.Commit(),
           }}
-          params={{orgId: 'org', projectId: 'project'}}
+          orgId={'org'}
+          projectId={'project'}
         />
       );
       expect(wrapper).toMatchSnapshot();
