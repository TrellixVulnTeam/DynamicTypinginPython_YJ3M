commit 3b17f46b0743ca0b390ff932c23cf5857cd5f788
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Thu Oct 25 13:39:43 2018 -0700

    fix(2fa): Handle already enrolled (#10251)

diff --git a/src/sentry/static/sentry/app/components/asyncComponent.jsx b/src/sentry/static/sentry/app/components/asyncComponent.jsx
index c85099922d..fc948bbb14 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.jsx
@@ -161,6 +161,7 @@ export default class AsyncComponent extends React.Component {
         },
         error: error => {
           // Allow endpoints to fail
+          // allowError can have side effects to handle the error
           if (options.allowError && options.allowError(error)) {
             error = null;
           }
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
index e9eaed7156..80b1c26732 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
@@ -122,7 +122,29 @@ class AccountSecurityEnroll extends AsyncView {
   }
 
   getEndpoints() {
-    return [['authenticator', `${ENDPOINT}${this.props.params.authId}/enroll/`]];
+    return [
+      [
+        'authenticator',
+        `${ENDPOINT}${this.props.params.authId}/enroll/`,
+        {},
+        {
+          allowError: err => {
+            let alreadyEnrolled =
+              err &&
+              err.status === 400 &&
+              err.responseJSON &&
+              err.responseJSON.details === 'Already enrolled';
+
+            if (alreadyEnrolled) {
+              this.props.router.push('/settings/account/security/');
+              addErrorMessage(t('Already enrolled'));
+              return true;
+            }
+            return false;
+          },
+        },
+      ],
+    ];
   }
 
   componentWillMount() {
@@ -311,6 +333,11 @@ class AccountSecurityEnroll extends AsyncView {
 
   renderBody() {
     let {authenticator} = this.state;
+
+    if (!authenticator) {
+      return null;
+    }
+
     let endpoint = `${ENDPOINT}${this.props.params.authId}/`;
 
     let fields = getFields({
diff --git a/tests/js/spec/views/accountSecurityEnroll.spec.jsx b/tests/js/spec/views/accountSecurityEnroll.spec.jsx
index 7d1d7a9603..6d4cc7dd47 100644
--- a/tests/js/spec/views/accountSecurityEnroll.spec.jsx
+++ b/tests/js/spec/views/accountSecurityEnroll.spec.jsx
@@ -70,5 +70,31 @@ describe('AccountSecurityEnroll', function() {
         })
       );
     });
+
+    it('can redirect with already enrolled error', function() {
+      Client.addMockResponse({
+        url: `${ENDPOINT}${authenticator.authId}/enroll/`,
+        body: {details: 'Already enrolled'},
+        statusCode: 400,
+      });
+
+      let pushMock = jest.fn();
+      wrapper = mount(
+        <AccountSecurityEnroll />,
+        TestStubs.routerContext([
+          {
+            router: {
+              ...TestStubs.router({
+                push: pushMock,
+              }),
+              params: {
+                authId: authenticator.authId,
+              },
+            },
+          },
+        ])
+      );
+      expect(pushMock).toHaveBeenCalledWith('/settings/account/security/');
+    });
   });
 });
