commit b38e7d626393586bf252b29eb5f7a3eaba2c28b2
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 2 11:45:41 2010 -0700

    Remove chart from main page

diff --git a/sentry/media/styles/global.css b/sentry/media/styles/global.css
index 566669e387..48c6c11e9a 100644
--- a/sentry/media/styles/global.css
+++ b/sentry/media/styles/global.css
@@ -44,6 +44,12 @@ ul { margin: 1em 0 1em 2em; }
     padding: 1em 2em;
     max-width: 1550px;
 }
+#header .sparkline {
+    padding: 5px;
+    position: absolute;
+    right: 45px;
+    top: 20px;
+}
 .sentry-logo {
 	display: inline-block;
 	font-weight: normal;
diff --git a/sentry/models.py b/sentry/models.py
index bacd5397e8..95a7c74ee5 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -154,6 +154,12 @@ class GroupedMessage(MessageBase):
             except Exception, exc:
                 warnings.warn(u'Unable to process log entry: %s' % (exc,))
 
+    @classmethod
+    def get_score_clause(cls):
+        if dj_settings.DATABASE_ENGINE.rsplit('.', 1)[-1].startswith('postgresql'):
+            return 'times_seen / (pow((floor(extract(epoch from now() - last_seen) / 3600) + 2), 1.25) + 1)'
+        return 'times_seen'
+
 class Message(MessageBase):
     group           = models.ForeignKey(GroupedMessage, blank=True, null=True, related_name="message_set")
     datetime        = models.DateTimeField(default=datetime.datetime.now, db_index=True)
diff --git a/sentry/templates/sentry/index.html b/sentry/templates/sentry/index.html
index c9033953f0..c0b8860e5c 100644
--- a/sentry/templates/sentry/index.html
+++ b/sentry/templates/sentry/index.html
@@ -17,7 +17,7 @@
 	</head> 
 	
 	<body> 
-		{% block body %}		
+		{% block body %}
 		<div id="header"> 
 			<div class="container">
 				<h1><a href="{% url sentry %}"><span class="sentry-logo" title="Django Sentry"><img src="{% url sentry-media "images/sentry.png" %}" border=0/></span></a></h1>
diff --git a/sentry/views.py b/sentry/views.py
index 8b8b6af8a9..341204c4ca 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -34,7 +34,7 @@ def index(request):
         status=0,
     ).extra(
         select={
-            'score': 'times_seen / (pow((floor(extract(epoch from now() - last_seen) / 3600) + 2), 1.25) + 1)',
+            'score': GroupedMessage.get_score_clause(),
         }
     ).order_by('-score', '-last_seen').distinct()
     
@@ -49,32 +49,10 @@ def index(request):
 
     if not any_filter and page == 1:
         realtime = True
-
-        if SimpleLineChart:
-            chart_qs = Message.objects\
-                              .filter(datetime__gte=today - datetime.timedelta(hours=24))\
-                              .extra(select={'hour': 'extract(hour from datetime)'}).values('hour')\
-                              .annotate(num=Count('id')).values_list('hour', 'num')
-
-
-            rows = dict(chart_qs)
-            if rows:
-                max_y = max(rows.values())
-            else:
-                max_y = 1
-
-            chart = SimpleLineChart(384, 80, y_range=[0, max_y])
-            chart.add_data([max_y]*30)
-            chart.add_data([rows.get((today-datetime.timedelta(hours=d)).hour, 0) for d in range(0, 24)][::-1])
-            chart.add_data([0]*30)
-            chart.fill_solid(chart.BACKGROUND, 'eeeeee')
-            chart.add_fill_range('eeeeee', 0, 1)
-            chart.add_fill_range('e0ebff', 1, 2)
-            chart.set_colours(['eeeeee', '999999', 'eeeeee'])
-            chart.set_line_style(1, 1)
-            chart_url = chart.get_url()
     else:
         realtime = False
+    
+    print str(message_list.query)
     return render_to_response('sentry/index.html', locals())
 
 def ajax_handler(request):
@@ -101,7 +79,7 @@ def ajax_handler(request):
             status=0,
         ).extra(
             select={
-                'score': 'times_seen / (pow((floor(extract(epoch from now() - last_seen) / 3600) + 2), 1.25) + 1)',
+                'score': GroupedMessage.get_score_clause(),
             }
         ).order_by('-score', '-last_seen')
 
@@ -182,20 +160,20 @@ def group(request, group_id):
     
     unique_servers = message_list.filter(server_name__isnull=False).values_list('server_name', 'logger', 'view', 'checksum').annotate(times_seen=Count('server_name')).values('server_name', 'times_seen').order_by('-times_seen')
     
-    today = datetime.datetime.now()
+    if SimpleLineChart:
+        today = datetime.datetime.now()
 
-    chart_qs = message_list\
-                      .filter(datetime__gte=today - datetime.timedelta(hours=24))\
-                      .extra(select={'hour': 'extract(hour from datetime)'}).values('hour')\
-                      .annotate(num=Count('id')).values_list('hour', 'num')
+        chart_qs = message_list\
+                          .filter(datetime__gte=today - datetime.timedelta(hours=24))\
+                          .extra(select={'hour': 'extract(hour from datetime)'}).values('hour')\
+                          .annotate(num=Count('id')).values_list('hour', 'num')
+
+        rows = dict(chart_qs)
+        if rows:
+            max_y = max(rows.values())
+        else:
+            max_y = 1
 
-    rows = dict(chart_qs)
-    if rows:
-        max_y = max(rows.values())
-    else:
-        max_y = 1
-        
-    if SimpleLineChart:
         chart = SimpleLineChart(384, 80, y_range=[0, max_y])
         chart.add_data([max_y]*30)
         chart.add_data([rows.get((today-datetime.timedelta(hours=d)).hour, 0) for d in range(0, 24)][::-1])
