commit 877b4643aa24e402431a6e67706e88f28666cc35
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Tue Apr 30 15:00:36 2019 +0200

    fix: Renormalize once (#12991)

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 95d4ec932a..755928e033 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -36,7 +36,7 @@ from sentry.coreapi import (
 )
 from sentry.interfaces.base import get_interface
 from sentry.models import (
-    Activity, Environment, Event, EventError, EventMapping, EventUser, Group,
+    Activity, Environment, Event, EventDict, EventError, EventMapping, EventUser, Group,
     GroupEnvironment, GroupHash, GroupLink, GroupRelease, GroupResolution, GroupStatus,
     Project, Release, ReleaseEnvironment, ReleaseProject,
     ReleaseProjectEnvironment, UserReport, Organization,
@@ -585,7 +585,7 @@ class EventManager(object):
         return Event(
             project_id=project_id or self._project.id,
             event_id=event_id,
-            data=data,
+            data=EventDict(data, skip_renormalization=True),
             time_spent=time_spent,
             datetime=date,
             platform=platform
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 932365870d..9f204286fd 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -64,7 +64,17 @@ class EventDict(CanonicalKeyDict):
     """
 
     def __init__(self, data, skip_renormalization=False, **kwargs):
-        if not skip_renormalization and not isinstance(data, EventDict):
+        is_renormalized = (
+            isinstance(data, EventDict) or
+            (isinstance(data, NodeData) and isinstance(data.data, EventDict))
+        )
+
+        with configure_scope() as scope:
+            scope.set_tag("rust.is_renormalized", is_renormalized)
+            scope.set_tag("rust.skip_renormalization", skip_renormalization)
+            scope.set_tag("rust.renormalized", "null")
+
+        if not skip_renormalization and not is_renormalized:
             rust_renormalized = _should_skip_to_python(data.get('event_id'))
             if rust_renormalized:
                 normalizer = StoreNormalizer(is_renormalize=True)
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index c4831c481d..7fc24b238e 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -14,6 +14,7 @@ import time
 from django.conf import settings
 
 from sentry import features
+from sentry.models import EventDict
 from sentry.utils import snuba
 from sentry.utils.cache import cache
 from sentry.exceptions import PluginError
@@ -113,6 +114,10 @@ def post_process_group(event, is_new, is_regression, is_sample, is_new_group_env
         from sentry.rules.processor import RuleProcessor
         from sentry.tasks.servicehooks import process_service_hook
 
+        # Re-bind node data to avoid renormalization. We only want to
+        # renormalize when loading old data from the database.
+        event.data = EventDict(event.data, skip_renormalization=True)
+
         # Re-bind Group since we're pickling the whole Event object
         # which may contain a stale Group.
         event.group, _ = get_group_with_redirect(event.group_id)
diff --git a/src/sentry/utils/pytest/fixtures.py b/src/sentry/utils/pytest/fixtures.py
index 4c3e1ffbc9..ec838ce9fb 100644
--- a/src/sentry/utils/pytest/fixtures.py
+++ b/src/sentry/utils/pytest/fixtures.py
@@ -149,6 +149,12 @@ def factories():
     return Factories
 
 
+@pytest.fixture
+def task_runner():
+    from sentry.testutils.helpers.task_runner import TaskRunner
+    return TaskRunner
+
+
 @pytest.fixture(scope='function')
 def session():
     return factories.create_session()
diff --git a/tests/sentry/models/test_event.py b/tests/sentry/models/test_event.py
index ec106bea97..607b37cb54 100644
--- a/tests/sentry/models/test_event.py
+++ b/tests/sentry/models/test_event.py
@@ -1,11 +1,12 @@
 from __future__ import absolute_import
 
+import pytest
 import pickle
 
 from sentry.models import Environment
-from sentry.testutils import TestCase
 from sentry.db.models.fields.node import NodeData
 from sentry.event_manager import EventManager
+from sentry.testutils import TestCase
 
 
 class EventTest(TestCase):
@@ -162,6 +163,42 @@ class EventTest(TestCase):
         assert event.ip_address is None
 
 
+@pytest.mark.django_db
+def test_renormalization(monkeypatch, factories, task_runner, default_project):
+    from semaphore.processing import StoreNormalizer
+
+    old_normalize = StoreNormalizer.normalize_event
+    normalize_mock_calls = []
+
+    def normalize(*args, **kwargs):
+        normalize_mock_calls.append(1)
+        return old_normalize(*args, **kwargs)
+
+    monkeypatch.setattr('semaphore.processing.StoreNormalizer.normalize_event',
+                        normalize)
+
+    sample_mock_calls = []
+
+    def sample(*args, **kwargs):
+        sample_mock_calls.append(1)
+        return False
+
+    with task_runner():
+        factories.store_event(
+            data={
+                'event_id': 'a' * 32,
+                'environment': 'production',
+            },
+            project_id=default_project.id
+        )
+
+    # Assert we only renormalize this once. If this assertion fails it's likely
+    # that you will encounter severe performance issues during event processing
+    # or postprocessing.
+    assert len(normalize_mock_calls) == 1
+    assert len(sample_mock_calls) == 0
+
+
 class EventGetLegacyMessageTest(TestCase):
     def test_message(self):
         event = self.create_event(message='foo bar')
