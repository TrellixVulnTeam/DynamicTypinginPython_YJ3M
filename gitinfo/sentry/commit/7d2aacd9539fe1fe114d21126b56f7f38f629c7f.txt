commit 7d2aacd9539fe1fe114d21126b56f7f38f629c7f
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Sep 16 11:54:49 2015 -0700

    Simple ability to cancel deletions

diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index 2768f92f9a..2f4d1d6bdf 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -22,7 +22,7 @@ logger = get_task_logger(__name__)
 @retry
 def delete_organization(object_id, continuous=True, **kwargs):
     from sentry.models import (
-        Organization, OrganizationMember, OrganizationStatus, Team
+        Organization, OrganizationMember, OrganizationStatus, Team, TeamStatus
     )
 
     try:
@@ -30,11 +30,15 @@ def delete_organization(object_id, continuous=True, **kwargs):
     except Team.DoesNotExist:
         return
 
+    if o.status == OrganizationStatus.VISIBLE:
+        raise ValueError('Aborting organization deletion as status is invalid')
+
     if o.status != OrganizationStatus.DELETION_IN_PROGRESS:
         o.update(status=OrganizationStatus.DELETION_IN_PROGRESS)
 
     for team in Team.objects.filter(organization=o).order_by('id')[:1]:
         logger.info('Removing Team id=%s where organization=%s', team.id, o.id)
+        team.update(status=TeamStatus.DELETION_IN_PROGRESS)
         delete_team(team.id, continuous=False)
         if continuous:
             delete_organization.delay(object_id=object_id, countdown=15)
@@ -54,19 +58,23 @@ def delete_organization(object_id, continuous=True, **kwargs):
                    default_retry_delay=60 * 5, max_retries=None)
 @retry
 def delete_team(object_id, continuous=True, **kwargs):
-    from sentry.models import Team, TeamStatus, Project
+    from sentry.models import Team, TeamStatus, Project, ProjectStatus
 
     try:
         t = Team.objects.get(id=object_id)
     except Team.DoesNotExist:
         return
 
+    if t.status == TeamStatus.VISIBLE:
+        raise ValueError('Aborting team deletion as status is invalid')
+
     if t.status != TeamStatus.DELETION_IN_PROGRESS:
         t.update(status=TeamStatus.DELETION_IN_PROGRESS)
 
     # Delete 1 project at a time since this is expensive by itself
     for project in Project.objects.filter(team=t).order_by('id')[:1]:
         logger.info('Removing Project id=%s where team=%s', project.id, t.id)
+        project.update(status=ProjectStatus.DELETION_IN_PROGRESS)
         delete_project(project.id, continuous=False)
         if continuous:
             delete_team.delay(object_id=object_id, countdown=15)
@@ -90,6 +98,9 @@ def delete_project(object_id, continuous=True, **kwargs):
     except Project.DoesNotExist:
         return
 
+    if p.status == ProjectStatus.VISIBLE:
+        raise ValueError('Aborting project deletion as status is invalid')
+
     if p.status != ProjectStatus.DELETION_IN_PROGRESS:
         p.update(status=ProjectStatus.DELETION_IN_PROGRESS)
 
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index a60409670c..bc6f80e623 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -1,17 +1,38 @@
 from mock import patch
 
 from sentry.models import (
-    GroupTagKey, GroupTagValue, TagKey, TagValue, Team
+    GroupTagKey, GroupTagValue, Organization, OrganizationStatus, TagKey,
+    TagValue, Team, TeamStatus
+)
+from sentry.tasks.deletion import (
+    delete_organization, delete_tag_key, delete_team
 )
-from sentry.tasks.deletion import delete_tag_key, delete_team
 from sentry.testutils import TestCase
 
 
+class DeleteOrganizationTest(TestCase):
+    def test_simple(self):
+        org = self.create_organization(
+            name='test',
+            status=OrganizationStatus.PENDING_DELETION,
+        )
+        team1 = self.create_team(organization=org, name='test1')
+        team2 = self.create_team(organization=org, name='test2')
+
+        with self.tasks():
+            delete_organization(object_id=org.id)
+
+        assert not Organization.objects.filter(id=org.id).exists()
+
+
 class DeleteTeamTest(TestCase):
     def test_simple(self):
-        team = self.create_team(name='test', slug='test')
-        project1 = self.create_project(team=team, name='test1', slug='test1')
-        project2 = self.create_project(team=team, name='test2', slug='test2')
+        team = self.create_team(
+            name='test',
+            status=TeamStatus.PENDING_DELETION,
+        )
+        project1 = self.create_project(team=team, name='test1')
+        project2 = self.create_project(team=team, name='test2')
 
         with self.tasks():
             delete_team(object_id=team.id)
