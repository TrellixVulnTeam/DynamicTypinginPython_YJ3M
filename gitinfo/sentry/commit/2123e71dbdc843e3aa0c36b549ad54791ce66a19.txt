commit 2123e71dbdc843e3aa0c36b549ad54791ce66a19
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Oct 21 01:53:19 2015 -0400

    Basic UI for broadcasts

diff --git a/src/sentry/api/endpoints/broadcast_index.py b/src/sentry/api/endpoints/broadcast_index.py
index 0a0295ecef..974bf6ed0e 100644
--- a/src/sentry/api/endpoints/broadcast_index.py
+++ b/src/sentry/api/endpoints/broadcast_index.py
@@ -18,9 +18,10 @@ class BroadcastIndexEndpoint(Endpoint):
     permission_classes = (IsAuthenticated,)
 
     def get(self, request):
+        # limit to only "recent" broadcasts
         broadcasts = list(Broadcast.objects.filter(
             is_active=True
-        ))
+        ).order_by('-date_added')[:10])
 
         return Response(serialize(broadcasts, request.user))
 
@@ -31,13 +32,27 @@ class BroadcastIndexEndpoint(Endpoint):
 
         result = serializer.object
 
-        # limit scope of query
         queryset = Broadcast.objects.filter(
             is_active=True,
-        )[:100]
+        )
+
+        ids = request.GET.getlist('id')
+        if ids:
+            queryset = queryset.filter(
+                id__in=ids,
+            )
 
         if result.get('hasSeen'):
-            for broadcast in queryset:
+            if ids:
+                unseen_queryset = queryset
+            else:
+                unseen_queryset = queryset.exclude(
+                    id__in=queryset.filter(
+                        user=request.user,
+                    ).values('broadcast')
+                )
+
+            for broadcast in unseen_queryset:
                 try:
                     with transaction.atomic():
                         BroadcastSeen.objects.create(
diff --git a/src/sentry/static/sentry/app/components/header/broadcasts.jsx b/src/sentry/static/sentry/app/components/header/broadcasts.jsx
new file mode 100644
index 0000000000..6f345825be
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/header/broadcasts.jsx
@@ -0,0 +1,115 @@
+import React from "react";
+
+import api from "../../api";
+import DropdownLink from "../dropdownLink";
+import LoadingIndicator from "../loadingIndicator";
+
+var Broadcasts = React.createClass({
+  getInitialState() {
+    return {
+      broadcasts: [],
+      loading: true,
+      error: false
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  componentWillUnmount() {
+    if (this.timer) {
+      clearTimeout(this.timer);
+      this.timer = null;
+    }
+  },
+
+  remountComponent() {
+    this.setState(this.getInitialState(), this.fetchData);
+  },
+
+  fetchData() {
+    api.request('/broadcasts/', {
+      method: "GET",
+      success: (data) => {
+        this.setState({
+          broadcasts: data,
+          loading: false
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true
+        });
+      }
+    });
+  },
+
+  onOpen() {
+    this.timer = window.setTimeout(this.markSeen, 3000);
+  },
+
+  onClose() {
+    if (this.timer) {
+      clearTimeout(this.timer);
+      this.timer = null;
+    }
+  },
+
+  markSeen() {
+    let broadcastIds = this.state.broadcasts.filter((item) => {
+      return !item.hasSeen;
+    }).map((item) => {
+      return item.id;
+    });
+
+    if (broadcastIds.length === 0)
+      return;
+
+    api.request('/broadcasts/', {
+      method: "PUT",
+      query: {id: broadcastIds},
+      data: {
+        hasSeen: '1'
+      },
+      success: () => {
+        this.state.broadcasts.forEach((item) => {
+          item.hasSeen = true;
+        });
+      },
+    });
+  },
+
+  render() {
+    let {broadcasts, loading} = this.state;
+    let unseenCount = broadcasts.filter((item) => {
+      return !item.hasSeen;
+    }).length;
+
+    return (
+      <DropdownLink
+          topLevelClasses={`broadcasts ${this.props.className || ''} ${unseenCount && 'unseen'}`}
+          menuClasses="dropdown-menu-right"
+          onOpen={this.onOpen}
+          onClose={this.onClose}
+          title="B">
+        {loading ?
+          <li><LoadingIndicator /></li>
+        : (broadcasts.length === 0 ?
+          <li>There is nothing to see here. Carry on.</li>
+        :
+          broadcasts.map((item) => {
+            return (
+              <li key={item.id} className={!item.hasSeen && 'unseen'}>
+                {item.message}
+              </li>
+            );
+          })
+        )}
+      </DropdownLink>
+    );
+  }
+});
+
+export default Broadcasts;
diff --git a/src/sentry/static/sentry/app/components/header/index.jsx b/src/sentry/static/sentry/app/components/header/index.jsx
index e4bd613df6..383c815fdf 100644
--- a/src/sentry/static/sentry/app/components/header/index.jsx
+++ b/src/sentry/static/sentry/app/components/header/index.jsx
@@ -3,6 +3,7 @@ import ConfigStore from "../../stores/configStore";
 import OrganizationState from "../../mixins/organizationState";
 import {Link} from "react-router";
 
+import Broadcasts from "./broadcasts";
 import UserNav from "./userNav";
 import OrganizationSelector from "./organizationSelector";
 
@@ -24,9 +25,7 @@ const Header = React.createClass({
       <header>
         <div className="container">
           <UserNav className="pull-right" />
-          <ul className="global-nav pull-right">
-            <li><a href="https://docs.getsentry.com">Docs</a></li>
-          </ul>
+          <Broadcasts className="pull-right" />
           {this.props.orgId ?
             <Link to={`/${this.props.orgId}/`} className="logo">{logo}</Link>
             :
diff --git a/src/sentry/static/sentry/less/components/broadcasts.less b/src/sentry/static/sentry/less/components/broadcasts.less
new file mode 100644
index 0000000000..eff8c24822
--- /dev/null
+++ b/src/sentry/static/sentry/less/components/broadcasts.less
@@ -0,0 +1,46 @@
+.broadcasts {
+  &.unseen a {
+    color: @linkColor;
+    font-weight: bold;
+  }
+
+  .dropdown-menu {
+    // ideally we could use 90% but due to parent element
+    // this doesnt work
+    max-height: 300px;
+    min-width: 200px;
+    padding-top: 0;
+    padding-bottom: 0;
+    overflow: auto;
+
+    > li {
+      color: #7a8188;
+      padding: 5px 8px;
+      border-bottom: 1px solid #e5e5e5;
+      margin-bottom: 5px;
+
+      &.unseen {
+        font-weight: bold;
+      }
+
+      &:last-child {
+        border-bottom: 0;
+        margin-bottom: 0;
+      }
+
+      .loading {
+        margin: 0 auto;
+
+        .loading-message {
+          display: none;
+        }
+      }
+
+      > a {
+        display: inline;
+        padding: 0;
+        color: @linkColor;
+      }
+    }
+  }
+}
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index dd852f131e..a6bc7f6d92 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -1,3 +1,5 @@
+@import url('components/broadcasts.less');
+
 /**
 * Buttons
 * ============================================================================
