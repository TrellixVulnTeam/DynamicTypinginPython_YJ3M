commit dc661adbb5b007d39d56c3850544600e3af79861
Author: Dan Fuller <dfuller@sentry.io>
Date:   Thu Feb 28 17:56:59 2019 -0800

    fix(api): Handle enforcing of types on search columns more consistently.
    
    This handles numeric/date searches more effectively in the parser. Originally the plan was to build
    this into the grammar, but with renaming in the visitor it didn't seem to make sense. So just
    improved the visitor code to better handle date/time filters.
    
    Now, if a field is numeric, but we enter a non-numeric value into it then we'll show a user friendly
    error rather than throwing a 500.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 252ee7ee50..e83657775a 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -244,47 +244,33 @@ class SearchVisitor(NodeVisitor):
             SearchValue(value),
         )
 
-    def visit_numeric_filter(self, node, children):
-        search_key, _, operator, search_value = children
+    def visit_numeric_filter(self, node, (search_key, _, operator, search_value)):
         operator = operator[0] if not isinstance(operator, Node) else '='
 
         if search_key.name in self.numeric_keys:
             try:
-                search_value = int(search_value.text)
+                search_value = SearchValue(int(search_value.text))
             except ValueError:
                 raise InvalidSearchQuery('Invalid numeric query: %s' % (search_key,))
+            return SearchFilter(search_key, operator, search_value)
         else:
-            search_value = operator + search_value.text if operator != '=' else search_value.text
-            operator = '='
-
-        return SearchFilter(
-            search_key,
-            operator,
-            SearchValue(search_value),
-        )
+            search_value = SearchValue(
+                operator + search_value.text if operator != '=' else search_value.text,
+            )
+            return self._handle_basic_filter(search_key, '=', search_value)
 
-    def visit_time_filter(self, node, children):
-        search_key, _, operator, search_value = children
+    def visit_time_filter(self, node, (search_key, _, operator, search_value)):
         if search_key.name in self.date_keys:
             try:
                 search_value = parse_datetime_string(search_value)
             except InvalidQuery as exc:
                 raise InvalidSearchQuery(exc.message)
+            return SearchFilter(search_key, operator, SearchValue(search_value))
         else:
             search_value = operator + search_value if operator != '=' else search_value
-            operator = '='
-
-        try:
-            return SearchFilter(
-                search_key,
-                operator,
-                SearchValue(search_value),
-            )
-        except KeyError:
-            raise InvalidSearchQuery('Unsupported search term: %s' % (search_key,))
+            return self._handle_basic_filter(search_key, '=', SearchValue(search_value))
 
-    def visit_rel_time_filter(self, node, children):
-        search_key, _, value = children
+    def visit_rel_time_filter(self, node, (search_key, _, value)):
         if search_key.name in self.date_keys:
             try:
                 from_val, to_val = parse_datetime_range(value.text)
@@ -298,28 +284,16 @@ class SearchVisitor(NodeVisitor):
             else:
                 operator = '<='
                 search_value = to_val[0]
+            return SearchFilter(search_key, operator, SearchValue(search_value))
         else:
-            operator = '='
-            search_value = value.text
+            return self._handle_basic_filter(search_key, '=', SearchValue(value.text))
 
-        return SearchFilter(
-            search_key,
-            operator,
-            SearchValue(search_value),
-        )
-
-    def visit_specific_time_filter(self, node, children):
-        # Note that this is a behaviour implemented for dates in our current
-        # searches. If we specify a specific date, it means any event on that
-        # day, and if we specify a specific datetime then it means a few minutes
-        # interval on either side of that datetime
-        search_key, _, date_value = children
+    def visit_specific_time_filter(self, node, (search_key, _, date_value)):
+        # If we specify a specific date, it means any event on that day, and if
+        # we specify a specific datetime then it means a few minutes interval
+        # on either side of that datetime
         if search_key.name not in self.date_keys:
-            return SearchFilter(
-                search_key,
-                '=',
-                SearchValue(date_value),
-            )
+            return self._handle_basic_filter(search_key, '=', SearchValue(date_value))
 
         try:
             from_val, to_val = parse_datetime_value(date_value)
@@ -357,9 +331,17 @@ class SearchVisitor(NodeVisitor):
 
         return node.text == '!'
 
-    def visit_basic_filter(self, node, children):
-        negation, search_key, _, search_value = children
+    def visit_basic_filter(self, node, (negation, search_key, _, search_value)):
         operator = '!=' if self.is_negated(negation) else '='
+        return self._handle_basic_filter(search_key, operator, search_value)
+
+    def _handle_basic_filter(self, search_key, operator, search_value):
+        # If a date or numeric key gets down to the basic filter, then it means
+        # that the value wasn't in a valid format, so raise here.
+        if search_key.name in self.date_keys:
+            raise InvalidSearchQuery('Invalid format for date search')
+        if search_key.name in self.numeric_keys:
+            raise InvalidSearchQuery('Invalid format for numeric search')
 
         return SearchFilter(search_key, operator, search_value)
 
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index f541560030..05a23b9474 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -173,6 +173,18 @@ class ParseSearchQueryTest(TestCase):
                 ),
             ]
 
+    def test_invalid_date_formats(self):
+        invalid_queries = [
+            'first_seen:hello',
+            'first_seen:123',
+        ]
+        for invalid_query in invalid_queries:
+            with self.assertRaises(
+                InvalidSearchQuery,
+                expected_regex='Invalid format for numeric search',
+            ):
+                parse_search_query(invalid_query)
+
     def test_specific_time_filter(self):
         assert parse_search_query('first_seen:2018-01-01') == [
             SearchFilter(
@@ -522,6 +534,29 @@ class ParseSearchQueryTest(TestCase):
             ),
         ]
 
+    def _build_search_filter(self, key_name, operator, value):
+        return SearchFilter(
+            key=SearchKey(name=key_name),
+            operator=operator,
+            value=SearchValue(raw_value=value),
+        )
+
+    def test_basic_fallthrough(self):
+        # These should all fall through to basic equal searches, even though they
+        # look like numeric, date, etc.
+        queries = [
+            ('random:<hello', self._build_search_filter('random', '=', '<hello')),
+            ('random:<512.1.0', self._build_search_filter('random', '=', '<512.1.0')),
+            ('random:2018-01-01', self._build_search_filter('random', '=', '2018-01-01')),
+            ('random:+7d', self._build_search_filter('random', '=', '+7d')),
+            ('random:>2018-01-01', self._build_search_filter('random', '=', '>2018-01-01')),
+            ('random:2018-01-01', self._build_search_filter('random', '=', '2018-01-01')),
+            ('random:hello', self._build_search_filter('random', '=', 'hello')),
+            ('random:123', self._build_search_filter('random', '=', '123')),
+        ]
+        for query, expected in queries:
+            assert parse_search_query(query) == [expected]
+
 
 class GetSnubaQueryArgsTest(TestCase):
     def test_simple(self):
diff --git a/tests/sentry/api/test_issue_search.py b/tests/sentry/api/test_issue_search.py
index b65bb0bc2e..7311b7bcbb 100644
--- a/tests/sentry/api/test_issue_search.py
+++ b/tests/sentry/api/test_issue_search.py
@@ -127,21 +127,20 @@ class ParseSearchQueryTest(TestCase):
                 value=SearchValue(raw_value=500),
             ),
         ]
-        # Non numeric shouldn't match
-        assert parse_search_query('times_seen:<hello') == [
-            SearchFilter(
-                key=SearchKey(name='times_seen'),
-                operator="=",
-                value=SearchValue(raw_value="<hello"),
-            ),
-        ]
-        assert parse_search_query('times_seen:<512.1.0') == [
-            SearchFilter(
-                key=SearchKey(name='times_seen'),
-                operator="=",
-                value=SearchValue(raw_value="<512.1.0"),
-            ),
+        invalid_queries = [
+            'times_seen:<hello',
+            'times_seen:<512.1.0',
+            'times_seen:2018-01-01',
+            'times_seen:+7d',
+            'times_seen:>2018-01-01',
+            'times_seen:"<10"',
         ]
+        for invalid_query in invalid_queries:
+            with self.assertRaises(
+                InvalidSearchQuery,
+                expected_regex='Invalid format for numeric search',
+            ):
+                parse_search_query(invalid_query)
 
 
 class ConvertQueryValuesTest(TestCase):
