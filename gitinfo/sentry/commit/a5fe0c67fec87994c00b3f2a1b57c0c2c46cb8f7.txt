commit a5fe0c67fec87994c00b3f2a1b57c0c2c46cb8f7
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Thu Jul 2 10:58:11 2020 +0200

    feat(pii): added tests (#19605)

diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/dialog.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/dialog.tsx
index 32f43cdc32..682b656bc7 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/dialog.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/dialog.tsx
@@ -154,11 +154,18 @@ class Dialog extends React.Component<Props, State> {
     const {rule, isFormValid, errors, isNewRule} = this.state;
 
     return (
-      <StyledModal show animation={false} onHide={onClose}>
+      <StyledModal
+        show
+        animation={false}
+        onHide={onClose}
+        data-test-id={isNewRule ? 'add-rule-modal' : 'edit-rule-modal'}
+      >
         <Modal.Header closeButton>
-          {isNewRule
-            ? t('Add an advanced data scrubbing rule')
-            : t('Edit an advanced data scrubbing rule')}
+          <span>
+            {isNewRule
+              ? t('Add an advanced data scrubbing rule')
+              : t('Edit an advanced data scrubbing rule')}
+          </span>
         </Modal.Header>
         <Modal.Body>
           <Form
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceField.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceField.tsx
index 676faacff5..5c5218fb47 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceField.tsx
@@ -395,7 +395,7 @@ class SourceField extends React.Component<Props, State> {
         />
         {showSuggestions && suggestions.length > 0 && (
           <React.Fragment>
-            <Suggestions ref={this.suggestionList} data-test-id="source">
+            <Suggestions ref={this.suggestionList} data-test-id="source-suggestions">
               {suggestions.slice(0, 50).map((suggestion, index) => (
                 <Suggestion
                   key={suggestion.value}
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/index.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/index.tsx
index 6040ac1ff5..d0fbc1b294 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/index.tsx
@@ -21,6 +21,7 @@ import {
   Errors,
   EventId,
   RequestError,
+  ProjectId,
 } from './types';
 import convertRelayPiiConfig from './convertRelayPiiConfig';
 import submitRules from './submitRules';
@@ -29,8 +30,6 @@ import handleError from './handleError';
 const ADVANCED_DATASCRUBBING_LINK =
   'https://docs.sentry.io/data-management/advanced-datascrubbing/';
 
-type ProjectId = Project['id'] | undefined;
-
 type Props<T extends ProjectId> = {
   endpoint: string;
   organization: Organization;
@@ -273,7 +272,7 @@ class DataScrubbing<T extends ProjectId = undefined> extends React.Component<
 
     return (
       <React.Fragment>
-        <Panel>
+        <Panel data-test-id="advanced-data-scrubbing">
           <PanelHeader>
             <div>{t('Advanced Data Scrubbing')}</div>
           </PanelHeader>
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/rulesList.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/rulesList.tsx
index f4cdee82b3..1e8738bc90 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/rulesList.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/rulesList.tsx
@@ -42,7 +42,7 @@ const RulesList = React.forwardRef(function RulesList(
   ref: React.Ref<HTMLUListElement>
 ) {
   return (
-    <List ref={ref} isDisabled={disabled}>
+    <List ref={ref} isDisabled={disabled} data-test-id="advanced-data-scrubbing-rules">
       {rules.map(rule => {
         const {id} = rule;
         return (
@@ -75,7 +75,9 @@ const RulesList = React.forwardRef(function RulesList(
 
 export default RulesList;
 
-const List = styled('ul')<{isDisabled?: boolean}>`
+const List = styled('ul')<{
+  isDisabled?: boolean;
+}>`
   list-style: none;
   margin: 0;
   padding: 0;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/types.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/types.tsx
index fd16ee1b9e..469eff2fca 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/types.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/types.tsx
@@ -1,3 +1,5 @@
+import {Project} from 'app/types';
+
 export enum RuleType {
   PATTERN = 'pattern',
   CREDITCARD = 'creditcard',
@@ -128,3 +130,5 @@ export type PiiConfig =
 export type Applications = Record<string, Array<string>>;
 
 export type Errors = Partial<Record<KeysOfUnion<Rule>, string>>;
+
+export type ProjectId = Project['id'] | undefined;
diff --git a/tests/acceptance/test_organization_security_privacy.py b/tests/acceptance/test_organization_security_privacy.py
index a96b08d91e..cacc43542d 100644
--- a/tests/acceptance/test_organization_security_privacy.py
+++ b/tests/acceptance/test_organization_security_privacy.py
@@ -1,58 +1,84 @@
 from __future__ import absolute_import
 
+from sentry.utils import json
+
 from sentry.testutils import AcceptanceTestCase
 
 
 class OrganizationSecurityAndPrivacyTest(AcceptanceTestCase):
+    def setUp(self):
+        super(OrganizationSecurityAndPrivacyTest, self).setUp()
+        self.user = self.create_user("owner@example.com")
+        self.org = self.create_organization(owner=self.user, name="Rowdy Tiger")
+        self.login_as(self.user)
+        self.path = "/settings/{}/security-and-privacy/".format(self.org.slug)
+
     def load_organization_helper(self, snapshot_name=None):
         self.browser.wait_until_not(".loading-indicator")
         if snapshot_name is not None:
             self.browser.snapshot("organization settings security and privacy -- " + snapshot_name)
-        assert self.browser.element_exists(
+        assert self.browser.wait_until(
             '[data-test-id="organization-settings-security-and-privacy"]'
         )
 
     def renders_2fa_setting(self):
-        return self.browser.element_exists("#require2FA")
+        return self.browser.wait_until("#require2FA")
 
     def test_renders_2fa_setting_for_owner(self):
-        user_owner = self.create_user("owner@example.com")
-        organization = self.create_organization(name="Example", owner=user_owner)
-        self.login_as(user_owner)
-        path = "/settings/{}/security-and-privacy/".format(organization.slug)
-
-        self.browser.get(path)
+        self.browser.get(self.path)
         self.load_organization_helper()
         assert self.renders_2fa_setting()
 
     def test_renders_2fa_setting_for_manager(self):
-        user_manager = self.create_user("manager@gexample.com")
-        organization = self.create_organization(
-            name="Example", owner=self.create_user("owner@example.com")
-        )
-        self.create_member(organization=organization, user=user_manager, role="manager")
-        self.login_as(user_manager)
-        path = "/settings/{}/security-and-privacy/".format(organization.slug)
-
-        self.browser.get(path)
+        manager_user = self.create_user("manager@example.com")
+        self.create_member(organization=self.org, user=manager_user, role="manager")
+        self.login_as(manager_user)
+        self.browser.get(self.path)
         self.load_organization_helper()
         assert self.renders_2fa_setting()
 
     def test_setting_2fa_without_2fa_enabled(self):
-        user_owner = self.create_user("owner@example.com")
-        organization = self.create_organization(name="Example", owner=user_owner)
-        self.login_as(user_owner)
-        path = "/settings/{}/security-and-privacy/".format(organization.slug)
-
-        self.browser.get(path)
+        self.browser.get(self.path)
         self.browser.wait_until_not(".loading-indicator")
         assert not self.browser.element_exists(
             '[data-test-id="organization-settings-security-and-privacy"] .error'
         )
         self.browser.click("#require2FA")
-
         self.browser.wait_until(".modal")
         self.browser.click('.modal [data-test-id="confirm-button"]')
         self.browser.wait_until_not(".modal")
         self.browser.wait_until_test_id("toast-error")
         self.load_organization_helper("setting 2fa without 2fa enabled")
+
+    def test_renders_advanced_data_scrubbing_without_rule(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        assert self.browser.wait_until('[data-test-id="advanced-data-scrubbing"]')
+        self.load_organization_helper("advanced-data-scrubbing-without-rule")
+
+    def test_renders_advanced_data_scrubbing_with_rules(self):
+        relayPiiConfig = json.dumps(
+            {
+                "rules": {
+                    "0": {
+                        "type": "password",
+                        "redaction": {"method": "replace", "text": "Scrubbed"},
+                    },
+                    "1": {"type": "creditcard", "redaction": {"method": "mask"}},
+                },
+                "applications": {"password": ["0"], "$message": ["1"]},
+            }
+        )
+        self.org.update_option("sentry:relay_pii_config", relayPiiConfig)
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        assert self.browser.wait_until('[data-test-id="advanced-data-scrubbing"]')
+        assert self.browser.wait_until('[data-test-id="advanced-data-scrubbing-rules"]')
+        self.load_organization_helper("advanced-data-scrubbing-with-rules")
+
+    def test_renders_advanced_data_scrubbing_add_rule_modal(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        assert self.browser.wait_until('[data-test-id="advanced-data-scrubbing"]')
+        self.browser.click_when_visible("[aria-label='Add Rule']")
+        self.load_organization_helper("advanced-data-scrubbing-add-rule-modal")
diff --git a/tests/js/sentry-test/fixtures/dataScrubbingRelayPiiConfig.tsx b/tests/js/sentry-test/fixtures/dataScrubbingRelayPiiConfig.tsx
new file mode 100644
index 0000000000..e7b6f581f9
--- /dev/null
+++ b/tests/js/sentry-test/fixtures/dataScrubbingRelayPiiConfig.tsx
@@ -0,0 +1,11 @@
+function DataScrubbingRelayPiiConfig() {
+  return {
+    rules: {
+      '0': {type: 'password', redaction: {method: 'replace', text: 'Scrubbed'}},
+      '1': {type: 'creditcard', redaction: {method: 'mask'}},
+    },
+    applications: {password: ['0'], $message: ['1']},
+  };
+}
+
+export {DataScrubbingRelayPiiConfig};
diff --git a/tests/js/spec/views/settings/components/dataScrubbing/content.spec.tsx b/tests/js/spec/views/settings/components/dataScrubbing/content.spec.tsx
new file mode 100644
index 0000000000..ab71c0ccee
--- /dev/null
+++ b/tests/js/spec/views/settings/components/dataScrubbing/content.spec.tsx
@@ -0,0 +1,40 @@
+import React from 'react';
+
+import {mountWithTheme} from 'sentry-test/enzyme';
+
+import Content from 'app/views/settings/components/dataScrubbing/content';
+import convertRelayPiiConfig from 'app/views/settings/components/dataScrubbing/convertRelayPiiConfig';
+
+// @ts-ignore
+const relayPiiConfig = TestStubs.DataScrubbingRelayPiiConfig();
+const stringRelayPiiConfig = JSON.stringify(relayPiiConfig);
+const convertedRules = convertRelayPiiConfig(stringRelayPiiConfig);
+
+const handleEditRule = jest.fn();
+const handleDelete = jest.fn();
+
+describe('Content', () => {
+  it('default render - empty', () => {
+    const wrapper = mountWithTheme(
+      <Content
+        rules={[]}
+        onUpdateRule={handleEditRule}
+        onDeleteRule={handleDelete}
+        errors={{}}
+      />
+    );
+    expect(wrapper.text()).toEqual('You have no data scrubbing rules');
+  });
+
+  it('render rules', () => {
+    const wrapper = mountWithTheme(
+      <Content
+        rules={convertedRules}
+        onUpdateRule={handleEditRule}
+        onDeleteRule={handleDelete}
+        errors={{}}
+      />
+    );
+    expect(wrapper.find('List')).toHaveLength(1);
+  });
+});
diff --git a/tests/js/spec/views/settings/components/dataScrubbing/dataScrubbing.spec.tsx b/tests/js/spec/views/settings/components/dataScrubbing/dataScrubbing.spec.tsx
new file mode 100644
index 0000000000..21eec4a226
--- /dev/null
+++ b/tests/js/spec/views/settings/components/dataScrubbing/dataScrubbing.spec.tsx
@@ -0,0 +1,360 @@
+import React from 'react';
+import sortBy from 'lodash/sortBy';
+
+import {mountWithTheme} from 'sentry-test/enzyme';
+
+import DataScrubbing from 'app/views/settings/components/dataScrubbing';
+import {
+  ProjectId,
+  MethodType,
+  RuleType,
+} from 'app/views/settings/components/dataScrubbing/types';
+import {
+  getMethodLabel,
+  getRuleLabel,
+} from 'app/views/settings/components/dataScrubbing/utils';
+import {addSuccessMessage} from 'app/actionCreators/indicator';
+
+// @ts-ignore
+const relayPiiConfig = TestStubs.DataScrubbingRelayPiiConfig();
+const stringRelayPiiConfig = JSON.stringify(relayPiiConfig);
+const organizationSlug = 'sentry';
+const handleUpdateOrganization = jest.fn();
+const additionalContext = 'These rules can be configured for each project.';
+
+jest.mock('app/actionCreators/indicator');
+
+function getOrganization(piiConfig?: string) {
+  // @ts-ignore
+  return TestStubs.Organization(
+    piiConfig ? {id: '123', relayPiiConfig: piiConfig} : {id: '123'}
+  );
+}
+
+function renderComponent({
+  disabled,
+  projectId,
+  endpoint,
+  ...props
+}: Partial<Omit<DataScrubbing<ProjectId>['props'], 'endpoint'>> &
+  Pick<DataScrubbing<ProjectId>['props'], 'endpoint'>) {
+  const organization = props.organization ?? getOrganization();
+  if (projectId) {
+    return mountWithTheme(
+      <DataScrubbing
+        additionalContext={additionalContext}
+        endpoint={endpoint}
+        projectId={projectId}
+        relayPiiConfig={stringRelayPiiConfig}
+        disabled={disabled}
+        organization={organization}
+        onSubmitSuccess={handleUpdateOrganization}
+      />
+    );
+  }
+  return mountWithTheme(
+    <DataScrubbing
+      additionalContext={additionalContext}
+      endpoint={endpoint}
+      relayPiiConfig={stringRelayPiiConfig}
+      disabled={disabled}
+      organization={organization}
+      onSubmitSuccess={handleUpdateOrganization}
+    />
+  );
+}
+
+describe('Data Scrubbing', () => {
+  describe('Organization level', () => {
+    const endpoint = `organization/${organizationSlug}/`;
+
+    it('default render', () => {
+      const wrapper = renderComponent({disabled: false, endpoint});
+
+      // PanelHeader
+      expect(wrapper.find('PanelHeader').text()).toEqual('Advanced Data Scrubbing');
+
+      //PanelAlert
+      const panelAlert = wrapper.find('PanelAlert');
+      expect(panelAlert.text()).toEqual(
+        `${additionalContext} The new rules will only apply to upcoming events.  For more details, see full documentation on data scrubbing.`
+      );
+
+      const readDocsLink = panelAlert.find('a');
+      expect(readDocsLink.text()).toEqual('full documentation on data scrubbing');
+      expect(readDocsLink.prop('href')).toEqual(
+        'https://docs.sentry.io/data-management/advanced-datascrubbing/'
+      );
+
+      //PanelBody
+      const panelBody = wrapper.find('PanelBody');
+      expect(panelBody).toHaveLength(1);
+      expect(panelBody.find('ListItem')).toHaveLength(2);
+
+      // OrganizationRules
+      const organizationRules = panelBody.find('OrganizationRules');
+      expect(organizationRules).toHaveLength(0);
+
+      // PanelAction
+      const actionButtons = wrapper.find('PanelAction').find('Button');
+      expect(actionButtons).toHaveLength(2);
+      expect(actionButtons.at(0).text()).toEqual('Read the docs');
+      expect(actionButtons.at(1).text()).toEqual('Add Rule');
+      expect(actionButtons.at(1).prop('disabled')).toEqual(false);
+    });
+
+    it('render disabled', () => {
+      const wrapper = renderComponent({disabled: true, endpoint});
+
+      //PanelBody
+      const panelBody = wrapper.find('PanelBody');
+      expect(panelBody).toHaveLength(1);
+      expect(panelBody.find('List').prop('isDisabled')).toEqual(true);
+
+      // PanelAction
+      const actionButtons = wrapper.find('PanelAction').find('Button');
+      expect(actionButtons).toHaveLength(2);
+      expect(actionButtons.at(0).prop('disabled')).toEqual(false);
+      expect(actionButtons.at(1).prop('disabled')).toEqual(true);
+    });
+  });
+
+  describe('Project level', () => {
+    const projectId = 'foo';
+    const endpoint = `/projects/${organizationSlug}/${projectId}/`;
+
+    it('default render', () => {
+      const wrapper = renderComponent({
+        disabled: false,
+        projectId,
+        endpoint,
+      });
+
+      // PanelHeader
+      expect(wrapper.find('PanelHeader').text()).toEqual('Advanced Data Scrubbing');
+
+      //PanelAlert
+      const panelAlert = wrapper.find('PanelAlert');
+      expect(panelAlert.text()).toEqual(
+        `${additionalContext} The new rules will only apply to upcoming events.  For more details, see full documentation on data scrubbing.`
+      );
+
+      const readDocsLink = panelAlert.find('a');
+      expect(readDocsLink.text()).toEqual('full documentation on data scrubbing');
+      expect(readDocsLink.prop('href')).toEqual(
+        'https://docs.sentry.io/data-management/advanced-datascrubbing/'
+      );
+
+      //PanelBody
+      const panelBody = wrapper.find('PanelBody');
+      expect(panelBody).toHaveLength(1);
+      expect(panelBody.find('ListItem')).toHaveLength(2);
+
+      // OrganizationRules
+      const organizationRules = panelBody.find('OrganizationRules');
+      expect(organizationRules).toHaveLength(1);
+      expect(organizationRules.text()).toEqual(
+        'There are no data scrubbing rules at the organization level'
+      );
+
+      // PanelAction
+      const actionButtons = wrapper.find('PanelAction').find('Button');
+      expect(actionButtons).toHaveLength(2);
+      expect(actionButtons.at(0).text()).toEqual('Read the docs');
+      expect(actionButtons.at(1).text()).toEqual('Add Rule');
+      expect(actionButtons.at(1).prop('disabled')).toEqual(false);
+    });
+
+    it('render disabled', () => {
+      const wrapper = renderComponent({disabled: true, endpoint});
+
+      //PanelBody
+      const panelBody = wrapper.find('PanelBody');
+      expect(panelBody).toHaveLength(1);
+      expect(panelBody.find('List').prop('isDisabled')).toEqual(true);
+
+      // PanelAction
+      const actionButtons = wrapper.find('PanelAction').find('Button');
+      expect(actionButtons).toHaveLength(2);
+      expect(actionButtons.at(0).prop('disabled')).toEqual(false);
+      expect(actionButtons.at(1).prop('disabled')).toEqual(true);
+    });
+
+    it('OrganizationRules has content', () => {
+      const wrapper = renderComponent({
+        disabled: false,
+        organization: getOrganization(stringRelayPiiConfig),
+        projectId,
+        endpoint,
+      });
+
+      // OrganizationRules
+      const organizationRules = wrapper.find('OrganizationRules');
+      expect(organizationRules).toHaveLength(1);
+      expect(organizationRules.find('Header').text()).toEqual('Organization Rules');
+      const listItems = organizationRules.find('ListItem');
+      expect(listItems).toHaveLength(2);
+      expect(listItems.at(0).find('[role="button"]')).toHaveLength(0);
+    });
+
+    it('Delete rule successfully', async () => {
+      // @ts-ignore
+      const mockDelete = MockApiClient.addMockResponse({
+        url: endpoint,
+        method: 'PUT',
+        body: getOrganization(
+          JSON.stringify({...relayPiiConfig, rules: {0: relayPiiConfig.rules[0]}})
+        ),
+      });
+
+      const wrapper = renderComponent({
+        disabled: false,
+        projectId,
+        endpoint,
+      });
+
+      const listItems = wrapper.find('ListItem');
+      const deleteButton = listItems
+        .at(0)
+        .find('[aria-label="Delete Rule"]')
+        .hostNodes();
+
+      deleteButton.simulate('click');
+      expect(mockDelete).toHaveBeenCalled();
+
+      // @ts-ignore
+      await tick();
+      wrapper.update();
+
+      expect(wrapper.find('ListItem')).toHaveLength(1);
+      expect(addSuccessMessage).toHaveBeenCalled();
+    });
+
+    it('Open Add Rule Modal', () => {
+      const wrapper = renderComponent({
+        disabled: false,
+        projectId,
+        endpoint,
+      });
+
+      const addbutton = wrapper
+        .find('PanelAction')
+        .find('[aria-label="Add Rule"]')
+        .hostNodes();
+
+      addbutton.simulate('click');
+
+      // Modal
+      const addRuleModal = wrapper.find('[data-test-id="add-rule-modal"]').hostNodes();
+      expect(addRuleModal).toHaveLength(1);
+
+      expect(addRuleModal.find('.modal-header >*:last-child').text()).toEqual(
+        'Add an advanced data scrubbing rule'
+      );
+
+      // Method Field
+      const methodField = addRuleModal.find('SelectField[name="method"]');
+      expect(methodField.exists()).toBe(true);
+      const methodFieldProps = methodField.props();
+      expect(methodFieldProps.value).toEqual(MethodType.MASK);
+
+      const methodFieldOptions = sortBy(Object.values(MethodType)).map(value => ({
+        ...getMethodLabel(value),
+        value,
+      }));
+      expect(methodFieldProps.options).toEqual(methodFieldOptions);
+
+      // Type Field
+      const typeField = addRuleModal.find('SelectField[name="type"]');
+      expect(typeField.exists()).toBe(true);
+      const typeFieldProps = typeField.props();
+      expect(typeFieldProps.value).toEqual(RuleType.CREDITCARD);
+
+      const typeFieldOptions = sortBy(Object.values(RuleType)).map(value => ({
+        label: getRuleLabel(value),
+        value,
+      }));
+      expect(typeFieldProps.options).toEqual(typeFieldOptions);
+
+      // Source Field
+      const sourceField = addRuleModal.find('StyledInput[name="source"]');
+      expect(sourceField.exists()).toBe(true);
+
+      // Close Dialog
+      const cancelButton = addRuleModal.find('[aria-label="Cancel"]').hostNodes();
+      expect(cancelButton.exists()).toBe(true);
+      cancelButton.simulate('click');
+
+      expect(wrapper.find('[data-test-id="add-rule-modal"]')).toHaveLength(0);
+    });
+
+    it('Open Edit Rule Modal', () => {
+      const wrapper = renderComponent({
+        disabled: false,
+        projectId,
+        endpoint,
+      });
+
+      const editButton = wrapper
+        .find('PanelBody')
+        .find('[aria-label="Edit Rule"]')
+        .hostNodes();
+
+      editButton.at(0).simulate('click');
+
+      // Modal
+      const editRuleModal = wrapper.find('[data-test-id="edit-rule-modal"]').hostNodes();
+      expect(editRuleModal).toHaveLength(1);
+
+      expect(editRuleModal.find('.modal-header >*:last-child').text()).toEqual(
+        'Edit an advanced data scrubbing rule'
+      );
+
+      // Method Field
+      const methodField = editRuleModal.find('SelectField[name="method"]');
+      expect(methodField.exists()).toBe(true);
+      const methodFieldProps = methodField.props();
+      expect(methodFieldProps.value).toEqual(MethodType.REPLACE);
+
+      const methodFieldOptions = sortBy(Object.values(MethodType)).map(value => ({
+        ...getMethodLabel(value),
+        value,
+      }));
+      expect(methodFieldProps.options).toEqual(methodFieldOptions);
+
+      // Placeholder Field
+      const placeholderField = editRuleModal.find('Input[name="placeholder"]');
+      expect(placeholderField.exists()).toBe(true);
+      expect(placeholderField.props().value).toEqual(
+        relayPiiConfig.rules[0].redaction.text
+      );
+
+      // Type Field
+      const typeField = editRuleModal.find('SelectField[name="type"]');
+      expect(typeField.exists()).toBe(true);
+      const typeFieldProps = typeField.props();
+      expect(typeFieldProps.value).toEqual(RuleType.PASSWORD);
+
+      const typeFieldOptions = sortBy(Object.values(RuleType)).map(value => ({
+        label: getRuleLabel(value),
+        value,
+      }));
+      expect(typeFieldProps.options).toEqual(typeFieldOptions);
+
+      // Source Field
+      const sourceField = editRuleModal.find('StyledInput[name="source"]');
+      expect(sourceField.exists()).toBe(true);
+
+      expect(sourceField.props().value).toEqual(
+        Object.keys(relayPiiConfig.applications)[0]
+      );
+
+      // Close Dialog
+      const cancelButton = editRuleModal.find('[aria-label="Cancel"]').hostNodes();
+      expect(cancelButton.exists()).toBe(true);
+      cancelButton.simulate('click');
+
+      expect(wrapper.find('[data-test-id="edit-rule-modal"]')).toHaveLength(0);
+    });
+  });
+});
diff --git a/tests/js/spec/views/settings/components/dataScrubbing/rules.spec.tsx b/tests/js/spec/views/settings/components/dataScrubbing/rules.spec.tsx
new file mode 100644
index 0000000000..e2940519a5
--- /dev/null
+++ b/tests/js/spec/views/settings/components/dataScrubbing/rules.spec.tsx
@@ -0,0 +1,89 @@
+import React from 'react';
+
+import {mountWithTheme} from 'sentry-test/enzyme';
+
+import Rules from 'app/views/settings/components/dataScrubbing/rulesList';
+import convertRelayPiiConfig from 'app/views/settings/components/dataScrubbing/convertRelayPiiConfig';
+
+// @ts-ignore
+const relayPiiConfig = TestStubs.DataScrubbingRelayPiiConfig();
+const stringRelayPiiConfig = JSON.stringify(relayPiiConfig);
+const convertedRules = convertRelayPiiConfig(stringRelayPiiConfig);
+const rules = convertedRules;
+const handleShowEditRule = jest.fn();
+const handleDelete = jest.fn();
+
+describe('Rules', () => {
+  it('default render', () => {
+    const wrapper = mountWithTheme(<Rules rules={rules} />);
+    expect(wrapper.find('ListItem')).toHaveLength(2);
+  });
+
+  it('render correct description', () => {
+    const wrapper = mountWithTheme(<Rules rules={rules} />);
+    const listItems = wrapper.find('ListItem');
+    expect(listItems.at(1).text()).toEqual(
+      '[Mask] [Credit card numbers] from [$message]'
+    );
+    expect(listItems.at(0).text()).toEqual(
+      '[Replace] [Password fields]  with [Scrubbed] from [password]'
+    );
+  });
+
+  it('render disabled list', () => {
+    const wrapper = mountWithTheme(<Rules rules={rules} disabled />);
+    expect(wrapper.find('List').prop('isDisabled')).toEqual(true);
+  });
+
+  it('render edit and delete buttons', () => {
+    const wrapper = mountWithTheme(
+      <Rules
+        rules={rules}
+        onShowEditRuleModal={handleShowEditRule}
+        onDeleteRule={handleDelete}
+      />
+    );
+    expect(wrapper.find('[aria-label="Edit Rule"]').hostNodes()).toHaveLength(2);
+    expect(wrapper.find('[aria-label="Delete Rule"]').hostNodes()).toHaveLength(2);
+  });
+
+  it('render disabled edit and delete buttons', () => {
+    const wrapper = mountWithTheme(
+      <Rules
+        rules={rules}
+        onShowEditRuleModal={handleShowEditRule}
+        onDeleteRule={handleDelete}
+        disabled
+      />
+    );
+    expect(
+      wrapper
+        .find('[aria-label="Edit Rule"]')
+        .hostNodes()
+        .at(0)
+        .prop('aria-disabled')
+    ).toEqual(true);
+
+    expect(
+      wrapper
+        .find('[aria-label="Delete Rule"]')
+        .hostNodes()
+        .at(0)
+        .prop('aria-disabled')
+    ).toEqual(true);
+  });
+
+  it('render edit button only', () => {
+    const wrapper = mountWithTheme(
+      <Rules rules={rules} onShowEditRuleModal={handleShowEditRule} />
+    );
+    expect(wrapper.find('[aria-label="Edit Rule"]').hostNodes()).toHaveLength(2);
+    expect(wrapper.find('[aria-label="Delete Rule"]')).toHaveLength(0);
+  });
+
+  it('render delete button only', () => {
+    const wrapper = mountWithTheme(<Rules rules={rules} onDeleteRule={handleDelete} />);
+    expect(wrapper.find('[aria-label="Edit Rule"]')).toHaveLength(0);
+    expect(wrapper.find('[aria-label="Delete Rule"]').hostNodes()).toHaveLength(2);
+  });
+});
diff --git a/tests/js/spec/views/settings/components/dataScrubbing/sourceField.spec.tsx b/tests/js/spec/views/settings/components/dataScrubbing/sourceField.spec.tsx
new file mode 100644
index 0000000000..5c651d62ac
--- /dev/null
+++ b/tests/js/spec/views/settings/components/dataScrubbing/sourceField.spec.tsx
@@ -0,0 +1,186 @@
+import React from 'react';
+
+import {mountWithTheme} from 'sentry-test/enzyme';
+
+import SourceField from 'app/views/settings/components/dataScrubbing/form/sourceField';
+import {
+  binarySuggestions,
+  unarySuggestions,
+  valueSuggestions,
+} from 'app/views/settings/components/dataScrubbing/utils';
+
+function renderComponent({
+  value = '$string',
+  onChange = jest.fn(),
+  ...props
+}: Partial<SourceField['props']>) {
+  return mountWithTheme(
+    <SourceField
+      isRegExMatchesSelected={false}
+      suggestions={valueSuggestions}
+      onChange={onChange}
+      value={value}
+      {...props}
+    />
+  );
+}
+
+describe('Source', () => {
+  it('default render', () => {
+    const wrapper = renderComponent({});
+    expect(wrapper.find('input').prop('value')).toBe('$string');
+  });
+
+  it('display defaultSuggestions if input is empty and focused', () => {
+    const wrapper = renderComponent({value: ''});
+    wrapper.find('input').simulate('focus');
+    const suggestions = wrapper
+      .find('[data-test-id="source-suggestions"]')
+      .hostNodes()
+      .children();
+
+    // [...defaultSuggestions, ...unaryOperatorSuggestions].length === 12
+    expect(suggestions).toHaveLength(12);
+  });
+
+  it('display defaultSuggestions if input is empty, focused and has length 3', () => {
+    const wrapper = renderComponent({value: '   '});
+    wrapper.find('input').simulate('focus');
+    const suggestions = wrapper
+      .find('[data-test-id="source-suggestions"]')
+      .hostNodes()
+      .children();
+
+    // [...defaultSuggestions, ...unaryOperatorSuggestions].length === 12
+    expect(suggestions).toHaveLength(12);
+  });
+
+  it('display binaryOperatorSuggestions if penultimateFieldValue has type string', () => {
+    const wrapper = renderComponent({value: 'foo '});
+    wrapper.find('input').simulate('focus');
+    const suggestions = wrapper
+      .find('[data-test-id="source-suggestions"]')
+      .hostNodes()
+      .children();
+
+    // binaryOperatorSuggestions.length === 2
+    expect(suggestions).toHaveLength(2);
+    // &&
+    expect(suggestions.at(0).text()).toEqual(binarySuggestions[0].value);
+    // ||
+    expect(suggestions.at(1).text()).toEqual(binarySuggestions[1].value);
+  });
+
+  it('display defaultSuggestions + unaryOperatorSuggestions, if penultimateFieldValue has type binary', () => {
+    const wrapper = renderComponent({value: 'foo && '});
+    wrapper.find('input').simulate('focus');
+    const suggestions = wrapper
+      .find('[data-test-id="source-suggestions"]')
+      .hostNodes()
+      .children();
+
+    // [...defaultSuggestions, ...unaryOperatorSuggestions].length === 12
+    expect(suggestions).toHaveLength(12);
+    // !
+    expect(suggestions.at(11).text()).toEqual(unarySuggestions[0].value);
+  });
+
+  it('display binaryOperatorSuggestions if penultimateFieldValue has type value', () => {
+    const wrapper = renderComponent({value: 'foo && $string '});
+    wrapper.find('input').simulate('focus');
+    const suggestions = wrapper
+      .find('[data-test-id="source-suggestions"]')
+      .hostNodes()
+      .children();
+
+    // binaryOperatorSuggestions.length === 2
+    expect(suggestions).toHaveLength(2);
+    // &&
+    expect(suggestions.at(0).text()).toEqual(binarySuggestions[0].value);
+    // ||
+    expect(suggestions.at(1).text()).toEqual(binarySuggestions[1].value);
+  });
+
+  it('display binaryOperatorSuggestions if penultimateFieldValue is of typeof Array', () => {
+    const wrapper = renderComponent({value: 'foo && !$string '});
+    wrapper.find('input').simulate('focus');
+    const suggestions = wrapper
+      .find('[data-test-id="source-suggestions"]')
+      .hostNodes()
+      .children();
+
+    // binaryOperatorSuggestions.length === 2
+    expect(suggestions).toHaveLength(2);
+    // &&
+    expect(suggestions.at(0).text()).toEqual(binarySuggestions[0].value);
+    // ||
+    expect(suggestions.at(1).text()).toEqual(binarySuggestions[1].value);
+  });
+
+  it('display defaultSuggestions if penultimateFieldValue has type unary', () => {
+    const wrapper = renderComponent({value: 'foo && !'});
+    wrapper.find('input').simulate('focus');
+    const suggestions = wrapper
+      .find('[data-test-id="source-suggestions"]')
+      .hostNodes()
+      .children();
+
+    // defaultSuggestions.length === 11
+    expect(suggestions).toHaveLength(11);
+
+    // everywhere
+    expect(suggestions.at(0).text()).toEqual(
+      `${valueSuggestions[0].value}(${valueSuggestions[0].description})`
+    );
+  });
+
+  it('click on a suggestion should be possible', () => {
+    const handleOnChange = jest.fn();
+    const wrapper = renderComponent({value: 'foo && ', onChange: handleOnChange});
+
+    // makes showSuggestions === true
+    wrapper.find('input').simulate('focus');
+
+    const suggestions = wrapper
+      .find('[data-test-id="source-suggestions"]')
+      .hostNodes()
+      .children();
+
+    suggestions.at(1).simulate('click');
+    expect(wrapper.state().fieldValues[2].value).toBe(valueSuggestions[1].value);
+  });
+
+  it('suggestions keyDown and keyUp should work', () => {
+    const handleOnChange = jest.fn();
+    Element.prototype.scrollIntoView = jest.fn();
+    const wrapper = renderComponent({value: 'foo ', onChange: handleOnChange});
+    const input = wrapper.find('input');
+
+    // makes showSuggestions === true
+    input.simulate('focus');
+
+    const suggestions = wrapper
+      .find('[data-test-id="source-suggestions"]')
+      .hostNodes()
+      .children();
+
+    expect(suggestions).toHaveLength(2);
+
+    expect(suggestions.at(0).prop('active')).toBe(true);
+
+    input.simulate('keyDown', {keyCode: 40});
+    expect(wrapper.state().activeSuggestion).toBe(1);
+    input.simulate('keyDown', {keyCode: 13});
+    expect(wrapper.state().activeSuggestion).toBe(0);
+    expect(wrapper.state().fieldValues[1].value).toBe('||');
+
+    expect(handleOnChange).toHaveBeenCalledWith('foo ||');
+
+    input.simulate('change', {target: {value: 'foo || '}});
+    input
+      .simulate('keyDown', {keyCode: 40})
+      .simulate('keyDown', {keyCode: 40})
+      .simulate('keyDown', {keyCode: 38});
+    expect(wrapper.state().activeSuggestion).toBe(1);
+  });
+});
