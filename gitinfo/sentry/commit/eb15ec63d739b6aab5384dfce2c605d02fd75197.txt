commit eb15ec63d739b6aab5384dfce2c605d02fd75197
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Tue Jan 23 10:37:31 2018 -0600

    fix(tagstore): Do in-app deletes of v2 tagstore models since we can'tâ€¦ (#7029)

diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index d64d4840e0..0722c14ef7 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -81,12 +81,12 @@ class TagStorage(Service):
         'get_group_tag_value_qs',
     )
 
-    def setup_deletions(self, tagvalue_model, grouptagkey_model,
+    def setup_deletions(self, tagkey_model, tagvalue_model, grouptagkey_model,
                         grouptagvalue_model, eventtag_model):
         from sentry.deletions import default_manager as deletion_manager
         from sentry.deletions.defaults import BulkModelDeletionTask
         from sentry.deletions.base import ModelRelation, ModelDeletionTask
-        from sentry.models import Group, Event
+        from sentry.models import Group, Event, Project
 
         deletion_manager.register(tagvalue_model, BulkModelDeletionTask)
         deletion_manager.register(grouptagkey_model, BulkModelDeletionTask)
@@ -104,6 +104,13 @@ class TagStorage(Service):
                                                 ModelDeletionTask),
         ])
 
+        deletion_manager.add_dependencies(Project, [
+            lambda instance: ModelRelation(tagkey_model, {'project_id': instance.id}),
+            lambda instance: ModelRelation(tagvalue_model, {'project_id': instance.id}),
+            lambda instance: ModelRelation(grouptagkey_model, {'project_id': instance.id}),
+            lambda instance: ModelRelation(grouptagvalue_model, {'project_id': instance.id}),
+        ])
+
     def setup_cleanup(self, tagvalue_model, grouptagvalue_model, eventtag_model):
         from sentry.runner.commands import cleanup
 
diff --git a/src/sentry/tagstore/legacy/backend.py b/src/sentry/tagstore/legacy/backend.py
index 1231754aa5..ae53208bab 100644
--- a/src/sentry/tagstore/legacy/backend.py
+++ b/src/sentry/tagstore/legacy/backend.py
@@ -34,6 +34,7 @@ class LegacyTagStorage(TagStorage):
 
     def setup(self):
         self.setup_deletions(
+            tagkey_model=TagKey,
             tagvalue_model=TagValue,
             grouptagkey_model=GroupTagKey,
             grouptagvalue_model=GroupTagValue,
@@ -61,7 +62,6 @@ class LegacyTagStorage(TagStorage):
 
         from sentry.deletions import default_manager as deletion_manager
         from sentry.deletions.base import ModelRelation, ModelDeletionTask
-        from sentry.models import Project
 
         class TagKeyDeletionTask(ModelDeletionTask):
             def get_child_relations(self, instance):
@@ -81,12 +81,6 @@ class LegacyTagStorage(TagStorage):
                         instance.update(status=TagKeyStatus.DELETION_IN_PROGRESS)
 
         deletion_manager.register(TagKey, TagKeyDeletionTask)
-        deletion_manager.add_dependencies(Project, [
-            lambda instance: ModelRelation(TagKey, {'project_id': instance.id}),
-            lambda instance: ModelRelation(TagValue, {'project_id': instance.id}),
-            lambda instance: ModelRelation(GroupTagKey, {'project_id': instance.id}),
-            lambda instance: ModelRelation(GroupTagValue, {'project_id': instance.id}),
-        ])
 
     def setup_receivers(self, **kwargs):
         super(LegacyTagStorage, self).setup_receivers(**kwargs)
diff --git a/src/sentry/tagstore/v2/backend.py b/src/sentry/tagstore/v2/backend.py
index 3f79ffd7c7..4cf0a3d9d3 100644
--- a/src/sentry/tagstore/v2/backend.py
+++ b/src/sentry/tagstore/v2/backend.py
@@ -40,6 +40,7 @@ class V2TagStorage(TagStorage):
 
     def setup(self):
         self.setup_deletions(
+            tagkey_model=TagKey,
             tagvalue_model=TagValue,
             grouptagkey_model=GroupTagKey,
             grouptagvalue_model=GroupTagValue,
@@ -66,14 +67,26 @@ class V2TagStorage(TagStorage):
         super(V2TagStorage, self).setup_deletions(**kwargs)
 
         from sentry.deletions import default_manager as deletion_manager
-        from sentry.deletions.defaults import BulkModelDeletionTask
-        from sentry.deletions.base import ModelRelation
-        from sentry.models import Project
-
-        deletion_manager.register(TagKey, BulkModelDeletionTask)
-        deletion_manager.add_dependencies(Project, [
-            lambda instance: ModelRelation(TagKey, {'project_id': instance.id}),
-        ])
+        from sentry.deletions.base import ModelRelation, ModelDeletionTask
+
+        class TagKeyDeletionTask(ModelDeletionTask):
+            def get_child_relations(self, instance):
+                # in bulk
+                model_list = (GroupTagValue, GroupTagKey, TagValue)
+                relations = [
+                    ModelRelation(m, {
+                        'project_id': instance.project_id,
+                        'key_id': instance.id,
+                    }) for m in model_list
+                ]
+                return relations
+
+            def mark_deletion_in_progress(self, instance_list):
+                for instance in instance_list:
+                    if instance.status != TagKeyStatus.DELETION_IN_PROGRESS:
+                        instance.update(status=TagKeyStatus.DELETION_IN_PROGRESS)
+
+        deletion_manager.register(TagKey, TagKeyDeletionTask)
 
     def setup_receivers(self, **kwargs):
         super(V2TagStorage, self).setup_receivers(**kwargs)
