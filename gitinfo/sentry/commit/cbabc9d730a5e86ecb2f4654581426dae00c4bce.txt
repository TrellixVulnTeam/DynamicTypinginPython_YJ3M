commit cbabc9d730a5e86ecb2f4654581426dae00c4bce
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Feb 25 10:00:53 2015 -0800

    Improve metrics support

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 797d8c2e2f..fe1a906892 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -513,6 +513,7 @@ RECAPTCHA_PRIVATE_KEY = None
 # django-statsd
 
 STATSD_CLIENT = 'django_statsd.clients.null'
+SENTRY_METRICS_PREFIX = ''
 
 # Sentry and Raven configuration
 
diff --git a/src/sentry/tasks/base.py b/src/sentry/tasks/base.py
index b5bf7f4f25..8bef43e7a4 100644
--- a/src/sentry/tasks/base.py
+++ b/src/sentry/tasks/base.py
@@ -8,18 +8,19 @@ sentry.tasks.base
 from __future__ import absolute_import
 
 from celery.task import current, task
-from django_statsd.clients import statsd
 from functools import wraps
 
+from sentry.utils import metrics
+
 
 def instrumented_task(name, stat_suffix=None, **kwargs):
     def wrapped(func):
         @wraps(func)
         def _wrapped(*args, **kwargs):
-            statsd_key = 'jobs.duration.{name}'.format(name=name)
+            key = 'jobs.duration.{name}'.format(name=name)
             if stat_suffix:
-                statsd_key += '.{key}'.format(key=stat_suffix(*args, **kwargs))
-            with statsd.timer(statsd_key):
+                key += '.{key}'.format(key=stat_suffix(*args, **kwargs))
+            with metrics.timer(key):
                 result = func(*args, **kwargs)
             return result
         return task(name=name, **kwargs)(_wrapped)
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index ee317315e8..460acd2d1d 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -13,14 +13,34 @@ import logging
 from django.conf import settings
 from hashlib import md5
 
+from sentry.constants import PLATFORM_LIST, PLATFORM_ROOTS
 from sentry.plugins import plugins
 from sentry.tasks.base import instrumented_task
+from sentry.utils import metrics
 from sentry.utils.safe import safe_execute
 
 
 rules_logger = logging.getLogger('sentry.errors')
 
 
+def _capture_stats(event, is_new):
+    group = event.group
+    platform = group.platform or group.project.platform
+    if not platform:
+        return
+    platform = PLATFORM_ROOTS.get(platform, platform)
+    if platform not in PLATFORM_LIST:
+        return
+
+    if is_new:
+        metrics.incr('events.unique', 1)
+
+    metrics.incr('events.processed', 1)
+    metrics.incr('events.processed.{platform}'.format(
+        platform=platform), 1)
+    metrics.timing('events.size.data', len(unicode(event.data)))
+
+
 @instrumented_task(
     name='sentry.tasks.post_process.post_process_group')
 def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
@@ -32,6 +52,8 @@ def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
 
     project = Project.objects.get_from_cache(id=event.group.project_id)
 
+    _capture_stats(event, is_new)
+
     if settings.SENTRY_ENABLE_EXPLORE_CODE:
         record_affected_code.delay(event=event)
 
diff --git a/src/sentry/utils/metrics.py b/src/sentry/utils/metrics.py
new file mode 100644
index 0000000000..0561deb5c5
--- /dev/null
+++ b/src/sentry/utils/metrics.py
@@ -0,0 +1,25 @@
+from __future__ import absolute_import
+
+__all__ = ['timing', 'incr']
+
+from django_statsd.clients import statsd
+from django.conf import settings
+
+
+def _get_key(key):
+    prefix = settings.SENTRY_METRICS_PREFIX
+    if prefix:
+        return '{}{}'.format(prefix, key)
+    return key
+
+
+def incr(key, amount=1):
+    return statsd.incr(_get_key(key), amount)
+
+
+def timing(key, value):
+    return statsd.timing(_get_key(key), value)
+
+
+def timer(key):
+    return statsd.timer(_get_key(key))
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 72856870b8..13246ff715 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -48,7 +48,7 @@ from sentry.models import (
 from sentry.signals import event_received
 from sentry.plugins import plugins
 from sentry.quotas.base import RateLimit
-from sentry.utils import json
+from sentry.utils import json, metrics
 from sentry.utils.data_scrubber import SensitiveDataFilter
 from sentry.utils.db import get_db_engine
 from sentry.utils.javascript import to_json
@@ -312,6 +312,8 @@ class StoreView(APIView):
         return response
 
     def process(self, request, project, auth, data, **kwargs):
+        metrics.incr('events.total', 1)
+
         event_received.send_robust(ip=request.META['REMOTE_ADDR'], sender=type(self))
 
         # TODO: improve this API (e.g. make RateLimit act on __ne__)
@@ -327,6 +329,7 @@ class StoreView(APIView):
                 (app.tsdb.models.organization_total_received, project.organization_id),
                 (app.tsdb.models.organization_total_rejected, project.organization_id),
             ])
+            metrics.incr('events.dropped', 1)
             raise APIRateLimited(rate_limit.retry_after)
         else:
             app.tsdb.incr_multi([
@@ -337,6 +340,7 @@ class StoreView(APIView):
         result = plugins.first('has_perm', request.user, 'create_event', project,
                                version=1)
         if result is False:
+            metrics.incr('events.dropped', 1)
             raise APIForbidden('Creation of this event was blocked')
 
         content_encoding = request.META.get('HTTP_CONTENT_ENCODING', '')
