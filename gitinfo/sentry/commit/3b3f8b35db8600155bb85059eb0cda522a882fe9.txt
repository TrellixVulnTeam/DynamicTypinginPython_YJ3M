commit 3b3f8b35db8600155bb85059eb0cda522a882fe9
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Apr 2 12:10:27 2018 -0700

    feat(ui): Add API search to settings search (#7767)
    
    * add "hideMessage" and "relative" props to loading indicator

diff --git a/src/sentry/static/sentry/app/components/inlineSvg.jsx b/src/sentry/static/sentry/app/components/inlineSvg.jsx
index 7a903b7014..533dea019c 100644
--- a/src/sentry/static/sentry/app/components/inlineSvg.jsx
+++ b/src/sentry/static/sentry/app/components/inlineSvg.jsx
@@ -2,16 +2,15 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-const InlineSvg = ({src, size, width, height, style, className}) => {
+const InlineSvg = ({src, size, width, height, ...props}) => {
   const {id, viewBox} = require(`../icons/${src}.svg`).default;
 
   return (
     <StyledSvg
+      {...props}
       viewBox={viewBox}
       width={width || size || '1em'}
       height={height || size || '1em'}
-      style={style || {}}
-      className={className || ''}
     >
       <use href={`#${id}`} xlinkHref={`#${id}`} />
     </StyledSvg>
@@ -23,8 +22,6 @@ InlineSvg.propTypes = {
   size: PropTypes.string,
   width: PropTypes.string,
   height: PropTypes.string,
-  style: PropTypes.object,
-  className: PropTypes.string,
 };
 
 const StyledSvg = styled('svg')`
diff --git a/src/sentry/static/sentry/app/components/loadingIndicator.jsx b/src/sentry/static/sentry/app/components/loadingIndicator.jsx
index 8430abd3b3..a83ff746fa 100644
--- a/src/sentry/static/sentry/app/components/loadingIndicator.jsx
+++ b/src/sentry/static/sentry/app/components/loadingIndicator.jsx
@@ -3,7 +3,18 @@ import React from 'react';
 import classNames from 'classnames';
 
 function LoadingIndicator(props) {
-  let {mini, triangle, overlay, dark, children, finished, className, style} = props;
+  let {
+    hideMessage,
+    mini,
+    triangle,
+    overlay,
+    dark,
+    children,
+    finished,
+    className,
+    style,
+    relative,
+  } = props;
   let cx = classNames(className, {
     overlay,
     dark,
@@ -13,6 +24,7 @@ function LoadingIndicator(props) {
   });
 
   let loadingCx = classNames({
+    relative,
     'loading-indicator': true,
     'load-complete': finished,
   });
@@ -23,7 +35,7 @@ function LoadingIndicator(props) {
         {finished ? <div className="checkmark draw" /> : null}
       </div>
 
-      <div className="loading-message">{children}</div>
+      {!hideMessage && <div className="loading-message">{children}</div>}
     </div>
   );
 }
@@ -34,6 +46,8 @@ LoadingIndicator.propTypes = {
   mini: PropTypes.bool,
   triangle: PropTypes.bool,
   finished: PropTypes.bool,
+  relative: PropTypes.bool,
+  hideMessage: PropTypes.bool,
 };
 
 export default LoadingIndicator;
diff --git a/src/sentry/static/sentry/app/components/search/apiSearch.jsx b/src/sentry/static/sentry/app/components/search/apiSearch.jsx
new file mode 100644
index 0000000000..9b3ca39fb9
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/search/apiSearch.jsx
@@ -0,0 +1,149 @@
+import {flatten, debounce} from 'lodash';
+import {withRouter} from 'react-router';
+import PropTypes from 'prop-types';
+import Raven from 'raven-js';
+import React from 'react';
+
+import {Client} from '../../api';
+import withLatestContext from '../../utils/withLatestContext';
+
+class ApiSearch extends React.Component {
+  static propTypes = {
+    query: PropTypes.string,
+    /**
+     * Render function that passes:
+     * `isLoading` - loading state
+     * `allResults` - All results returned from all queries: [searchIndex, model, type]
+     * `results` - Results array filtered by `this.props.query`: [searchIndex, model, type]
+     */
+    children: PropTypes.func.isRequired,
+  };
+
+  constructor(props, ...args) {
+    super(props, ...args);
+    this.state = {
+      loading: false,
+      allResults: null,
+      results: null,
+    };
+
+    this.api = new Client();
+
+    if (props.query) this.doSearch(props.query);
+  }
+
+  componentWillReceiveProps(nextProps) {
+    if (nextProps.query !== this.props.query) {
+      this.setState({loading: true});
+      this.doSearch(nextProps.query);
+    }
+  }
+
+  doSearch = debounce(async query => {
+    let {params, organization} = this.props;
+    let orgId = params.orgId || (organization && organization.slug);
+    let urls = ['/organizations/'];
+
+    // Only run these queries when we have an org in context
+    if (orgId) {
+      urls = [
+        ...urls,
+        `/organizations/${orgId}/projects/`,
+        `/organizations/${orgId}/teams/`,
+        `/organizations/${orgId}/members/`,
+      ];
+    }
+
+    let reqs = urls.map(url =>
+      this.api
+        .requestPromise(url, {
+          query: {
+            query,
+          },
+        })
+        .then(
+          resp => resp,
+          err => {
+            Raven.captureException(err);
+            return [];
+          }
+        )
+    );
+
+    let [organizations, projects, teams, members] = await Promise.all(reqs);
+
+    let allResults = [
+      ...flatten(
+        organizations.map(org => [
+          {
+            searchIndex: org.slug,
+            model: org,
+            sourceType: 'organization',
+            resultType: 'settings',
+            to: `/settings/${org.slug}/`,
+          },
+          {
+            searchIndex: `${org.slug} Dashboard`,
+            model: org,
+            sourceType: 'organization',
+            resultType: 'route',
+            to: `/${org.slug}/`,
+          },
+        ])
+      ),
+      ...flatten(
+        (projects || []).map(project => [
+          {
+            searchIndex: project.slug,
+            model: project,
+            sourceType: 'project',
+            resultType: 'settings',
+            to: `/settings/${orgId}/${project.slug}/`,
+          },
+          {
+            searchIndex: `${project.slug} Dashboard`,
+            model: project,
+            sourceType: 'project',
+            resultType: 'route',
+            to: `/${orgId}/${project.slug}/`,
+          },
+        ])
+      ),
+      ...(teams || []).map(team => ({
+        searchIndex: team.slug,
+        model: team,
+        sourceType: 'team',
+        resultType: 'settings',
+        to: `/settings/${orgId}/teams/${team.slug}/`,
+      })),
+      ...(members || []).map(member => ({
+        searchIndex: `${member.email}${member.name}`,
+        model: member,
+        sourceType: 'member',
+        resultType: 'settings',
+        to: `/settings/${orgId}/members/${member.id}/`,
+      })),
+    ];
+
+    let results = allResults.filter(({searchIndex}) => searchIndex.indexOf(query) > -1);
+
+    this.setState({
+      loading: false,
+      allResults,
+      results,
+    });
+  }, 150);
+
+  render() {
+    let {children} = this.props;
+
+    return children({
+      isLoading: this.state.loading,
+      allResults: this.state.allResults,
+      results: this.state.results,
+    });
+  }
+}
+
+export {ApiSearch};
+export default withLatestContext(withRouter(ApiSearch));
diff --git a/src/sentry/static/sentry/app/components/search/formFieldSearch.jsx b/src/sentry/static/sentry/app/components/search/formFieldSearch.jsx
new file mode 100644
index 0000000000..22e2396995
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/search/formFieldSearch.jsx
@@ -0,0 +1,64 @@
+import {withRouter} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
+
+import FormSearchStore from '../../stores/formSearchStore';
+import replaceRouterParams from '../../utils/replaceRouterParams';
+
+class FormFieldSearch extends React.Component {
+  static propTypes = {
+    searchMap: PropTypes.object,
+
+    query: PropTypes.string,
+    /**
+     * Render function that passes:
+     * `isLoading` - loading state
+     * `allResults` - All results returned from all queries: [searchIndex, model, type]
+     * `results` - Results array filtered by `this.props.query`: [searchIndex, model, type]
+     */
+    children: PropTypes.func.isRequired,
+  };
+
+  render() {
+    let {searchMap, query, params, children} = this.props;
+
+    let results = searchMap
+      ? Object.keys(searchMap)
+          .filter(key => key.indexOf(query) > -1)
+          .map(key => searchMap[key])
+          .map(item => ({
+            sourceType: 'field',
+            resultType: 'field',
+            ...item,
+            title: item.field.label,
+            description: item.field.help,
+            searchIndex: `${replaceRouterParams(item.route, params)}#${encodeURIComponent(
+              item.field.name
+            )}`,
+            to: `${replaceRouterParams(item.route, params)}#${encodeURIComponent(
+              item.field.name
+            )}`,
+          })) || []
+      : null;
+
+    return children({
+      isLoading: searchMap === null,
+      allResults: searchMap,
+      results,
+    });
+  }
+}
+
+const FormFieldSearchContainer = withRouter(
+  createReactClass({
+    displayName: 'FormFieldSearchContainer',
+    mixins: [Reflux.connect(FormSearchStore, 'searchMap')],
+    render() {
+      return <FormFieldSearch searchMap={this.state.searchMap} {...this.props} />;
+    },
+  })
+);
+
+export default FormFieldSearchContainer;
diff --git a/src/sentry/static/sentry/app/components/userBadge.jsx b/src/sentry/static/sentry/app/components/userBadge.jsx
index 24fbeabf5f..4cb7866462 100644
--- a/src/sentry/static/sentry/app/components/userBadge.jsx
+++ b/src/sentry/static/sentry/app/components/userBadge.jsx
@@ -5,14 +5,18 @@ import Avatar from './avatar';
 import Link from './link';
 import overflowEllipsis from '../styles/overflowEllipsis';
 
-const UserBadge = ({user, orgId, avatarSize, ...props}) => {
+const UserBadge = ({user, orgId, avatarSize, useLink, ...props}) => {
+  const LinkOrText = useLink ? (
+    <StyledLink to={`/settings/${orgId}/members/${user.id}`} />
+  ) : (
+    'div'
+  );
+
   return (
     <StyledUserBadge {...props}>
-      <StyledAvatar user={user} size={avatarSize} className="avatar" />
+      <StyledAvatar user={user} size={avatarSize} />
       <StyledNameAndEmail>
-        <StyledLink to={`/settings/${orgId}/members/${user.id}`}>
-          {user.name || user.email}
-        </StyledLink>
+        <LinkOrText>{user.name || user.email}</LinkOrText>
         <StyledEmail>{user.email}</StyledEmail>
       </StyledNameAndEmail>
     </StyledUserBadge>
@@ -23,6 +27,11 @@ UserBadge.propTypes = {
   avatarSize: PropTypes.number,
   user: PropTypes.object,
   orgId: PropTypes.string,
+  useLink: PropTypes.bool,
+};
+
+UserBadge.defaultProps = {
+  userLink: true,
 };
 
 const StyledUserBadge = styled('div')`
diff --git a/src/sentry/static/sentry/app/constants.jsx b/src/sentry/static/sentry/app/constants/index.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/constants.jsx
rename to src/sentry/static/sentry/app/constants/index.jsx
diff --git a/src/sentry/static/sentry/app/stores/formSearchStore.jsx b/src/sentry/static/sentry/app/stores/formSearchStore.jsx
index 2f2c1018f2..27beebfa28 100644
--- a/src/sentry/static/sentry/app/stores/formSearchStore.jsx
+++ b/src/sentry/static/sentry/app/stores/formSearchStore.jsx
@@ -10,8 +10,13 @@ const FormSearchStore = Reflux.createStore({
     this.listenTo(FormSearchActions.addSearchMap, this.onAddSearchMap);
   },
 
+  getInitialState() {
+    return this.searchMap;
+  },
+
   reset() {
-    this.searchMap = {};
+    // `null` means it hasn't been loaded yet
+    this.searchMap = null;
   },
 
   /**
@@ -21,7 +26,7 @@ const FormSearchStore = Reflux.createStore({
    */
   onAddSearchMap(searchMap) {
     this.searchMap = {
-      ...this.searchMap,
+      ...(this.searchMap || {}),
       ...searchMap,
     };
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsSearch.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsSearch.jsx
index 6c937069c9..3f765161c8 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsSearch.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsSearch.jsx
@@ -1,107 +1,135 @@
-import {Link, withRouter} from 'react-router';
+import {Flex} from 'grid-emotion';
+import {Link} from 'react-router';
 import {css} from 'emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
-import Reflux from 'reflux';
-import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
-import {navigateTo} from '../../../actionCreators/navigation';
 import {loadSearchMap} from '../../../actionCreators/formSearch';
+import {navigateTo} from '../../../actionCreators/navigation';
 import {t} from '../../../locale';
+import ApiSearch from '../../../components/search/apiSearch';
 import AutoComplete from '../../../components/autoComplete';
-import FormSearchStore from '../../../stores/formSearchStore';
+import Avatar from '../../../components/avatar';
+import FormFieldSearch from '../../../components/search/formFieldSearch';
 import InlineSvg from '../../../components/inlineSvg';
+import LoadingIndicator from '../../../components/loadingIndicator';
+import SentryTypes from '../../../proptypes';
+import UserBadge from '../../../components/userBadge';
 import replaceRouterParams from '../../../utils/replaceRouterParams';
 
 const MIN_SEARCH_LENGTH = 2;
 
-const SearchInputWrapper = styled.div`
-  position: relative;
-`;
+class SearchResult extends React.Component {
+  static propTypes = {
+    /**
+     * The source of the search result (i.e. a model type)
+     */
+    sourceType: PropTypes.oneOf(['organization', 'project', 'team', 'member', 'field']),
+    /**
+     * The type of result this is, for example:
+     * - can be a setting route,
+     * - an application route (e.g. org dashboard)
+     * - form field
+     */
+    resultType: PropTypes.oneOf(['settings', 'route', 'field']),
+    title: PropTypes.string,
+    description: PropTypes.string,
+    model: PropTypes.oneOfType([
+      SentryTypes.Organization,
+      SentryTypes.Project,
+      SentryTypes.Team,
+      SentryTypes.Member,
+    ]),
+  };
 
-const SearchInputIcon = styled(props => <InlineSvg src="icon-search" {...props} />)`
-  color: ${p => p.theme.gray2}
-  position: absolute;
-  left: 10px;
-  top: 8px;
-`;
+  renderContent() {
+    let {sourceType, resultType, title, description, model, params} = this.props;
 
-const SearchInput = styled.input`
-  transition: border-color 0.15s ease;
-  font-size: 14px;
-  width: 260px;
-  line-height: 1;
-  padding: 5px 8px 4px 28px;
-  border: 1px solid ${p => p.theme.borderDark};
-  border-radius: 30px;
-  height: 28px;
+    let isSettings = resultType === 'settings';
 
-  box-shadow: inset ${p => p.theme.dropShadowLight};
+    if (sourceType === 'team') {
+      return (
+        <div>
+          <TeamAvatar team={model} size={32} />
+          #{model.slug}
+        </div>
+      );
+    }
 
-  &:focus {
-    outline: none;
-    border: 1px solid ${p => p.theme.gray1};
-  }
+    if (sourceType === 'member') {
+      return <UserBadge userLink={false} orgId={params.orgId} user={model} />;
+    }
 
-  &::placeholder {
-    color: ${p => p.theme.gray2};
-  }
-`;
+    if (sourceType === 'organization') {
+      return (
+        <React.Fragment>
+          {model.slug}{' '}
+          <SearchDetail>
+            Organization {isSettings ? ' Settings' : ' Dashboard'}
+          </SearchDetail>
+        </React.Fragment>
+      );
+    }
 
-const DropdownBox = styled.div`
-  background: #fff;
-  border: 1px solid ${p => p.theme.borderDark};
-  box-shadow: ${p => p.theme.dropShadowHeavy};
-  position: absolute;
-  top: 36px;
-  right: 0;
-  width: 400px;
-  border-radius: 5px;
-`;
+    if (sourceType === 'project') {
+      return (
+        <React.Fragment>
+          {model.slug}{' '}
+          <SearchDetail>Project {isSettings ? ' Settings' : ' Issues'}</SearchDetail>
+        </React.Fragment>
+      );
+    }
 
-const SettingsSearchWrapper = styled.div`
-  position: relative;
-`;
+    if (sourceType === 'field' || sourceType === 'route') {
+      return (
+        <React.Fragment>
+          <div>
+            <span>{title}</span>
+          </div>
 
-const SearchItem = styled(({highlighted, ...props}) => <Link {...props} />)`
-  display: block;
-  color: ${p => p.theme.gray5};
-  padding: 16px 16px 14px;
-  border-bottom: 1px solid ${p => p.theme.borderLight};
+          <SearchDetail>{description}</SearchDetail>
+        </React.Fragment>
+      );
+    }
 
-  ${p =>
-    p.highlighted &&
-    css`
-      color: ${p.theme.purpleDarkest};
-      background: ${p.theme.offWhite};
-    `} &:first-child {
-    border-radius: 5px 5px 0 0;
+    return null;
   }
 
-  &:last-child {
-    border-bottom: 0;
-    border-radius: 0 0 5px 5px;
+  renderResultType() {
+    let {resultType} = this.props;
+
+    // let isRoute = resultType === 'route';
+    let isSettings = resultType === 'settings';
+    let isField = resultType === 'field';
+
+    if (isSettings) {
+      return <ResultTypeIcon src="icon-settings" />;
+    }
+
+    if (isField) {
+      return <ResultTypeIcon src="icon-input" />;
+    }
+
+    return <ResultTypeIcon src="icon-location" />;
   }
-`;
 
-const SearchDetail = styled.div`
-  font-size: 0.8em;
-  line-height: 1.3;
-  margin-top: 4px;
-  color: ${p => p.theme.gray3};
-`;
+  render() {
+    return (
+      <Flex justify="space-between" align="center">
+        <Content>{this.renderContent()}</Content>
+        {this.renderResultType()}
+      </Flex>
+    );
+  }
+}
 
 class SettingsSearch extends React.Component {
   static propTypes = {
-    searchMap: PropTypes.object,
+    route: PropTypes.object,
     router: PropTypes.object,
   };
 
-  static defaultProps = {
-    searchMap: {},
-  };
-
   componentDidMount() {
     loadSearchMap();
   }
@@ -119,7 +147,7 @@ class SettingsSearch extends React.Component {
   };
 
   render() {
-    let {searchMap, params} = this.props;
+    let {params} = this.props;
 
     return (
       <AutoComplete
@@ -137,25 +165,9 @@ class SettingsSearch extends React.Component {
           highlightedIndex,
           onChange,
         }) => {
+          let searchQuery = inputValue.toLowerCase();
           let isValidSearch = inputValue.length > MIN_SEARCH_LENGTH;
 
-          let matches =
-            isValidSearch &&
-            isOpen &&
-            Object.keys(searchMap)
-              .filter(key => key.indexOf(inputValue.toLowerCase()) > -1)
-              .filter(key => {
-                // TODO: Open up a confirm to ask which project/team/org to use
-                // The route doesn't have all params to continue, don't show in search results
-                return (
-                  !searchMap[key].requireParams ||
-                  !searchMap[key].requireParams.length ||
-                  !searchMap[key].requireParams.find(
-                    param => typeof params[param] === 'undefined'
-                  )
-                );
-              });
-
           return (
             <SettingsSearchWrapper>
               <SearchInputWrapper>
@@ -169,39 +181,57 @@ class SettingsSearch extends React.Component {
               </SearchInputWrapper>
 
               {isValidSearch && isOpen ? (
-                <DropdownBox>
-                  {matches && matches.length ? (
-                    matches.map((key, index) => {
-                      let item = searchMap[key];
-                      let {route, field} = item;
-                      let to = `${replaceRouterParams(
-                        route,
-                        params
-                      )}#${encodeURIComponent(field.name)}`;
-
-                      return (
-                        <SearchItem
-                          {...getItemProps({
-                            item: {
-                              ...item,
-                              to,
-                            },
-                          })}
-                          highlighted={index === highlightedIndex}
-                          key={`${route}::${field.name}`}
-                        >
-                          <div>
-                            <span>{field.label}</span>
-                          </div>
-
-                          <SearchDetail>{field.help}</SearchDetail>
-                        </SearchItem>
-                      );
-                    })
-                  ) : (
-                    <SearchItem>{t('No results found')}</SearchItem>
-                  )}
-                </DropdownBox>
+                <ApiSearch query={searchQuery}>
+                  {({isLoading: apiIsLoading, results: apiResults}) => {
+                    return (
+                      <FormFieldSearch params={params} query={searchQuery}>
+                        {({isLoading: fieldIsLoading, results: fieldResults}) => {
+                          let isLoading =
+                            apiIsLoading ||
+                            fieldIsLoading ||
+                            apiResults === null ||
+                            fieldResults === null;
+                          let hasApiResults =
+                            !isLoading && apiResults && !!apiResults.length;
+                          let hasFieldResults =
+                            !isLoading && fieldResults && !!fieldResults.length;
+                          let hasAnyResults = hasFieldResults || hasApiResults;
+                          let results = !isLoading
+                            ? (fieldResults || []).concat(apiResults || [])
+                            : [];
+
+                          return (
+                            <DropdownBox>
+                              {isLoading && (
+                                <Flex justify="center" align="center" p={1}>
+                                  <LoadingIndicator mini hideMessage relative />
+                                </Flex>
+                              )}
+                              {results.map((item, index) => {
+                                return (
+                                  <SearchItem
+                                    {...getItemProps({
+                                      item,
+                                    })}
+                                    highlighted={index === highlightedIndex}
+                                    key={`${item.searchIndex}:${item.sourceType}:${item.resultType}`}
+                                  >
+                                    <SearchResult {...item} {...this.props} />
+                                  </SearchItem>
+                                );
+                              })}
+
+                              {!isLoading &&
+                                !hasAnyResults && (
+                                  <EmptyItem>{t('No results found')}</EmptyItem>
+                                )}
+                            </DropdownBox>
+                          );
+                        }}
+                      </FormFieldSearch>
+                    );
+                  }}
+                </ApiSearch>
               ) : null}
             </SettingsSearchWrapper>
           );
@@ -211,14 +241,101 @@ class SettingsSearch extends React.Component {
   }
 }
 
-const SettingsSearchContainer = withRouter(
-  createReactClass({
-    displayName: 'SettingsSearchContainer',
-    mixins: [Reflux.connect(FormSearchStore, 'searchMap')],
-    render() {
-      return <SettingsSearch searchMap={this.state.searchMap} {...this.props} />;
-    },
-  })
-);
-
-export default SettingsSearchContainer;
+export default SettingsSearch;
+
+const SearchInputWrapper = styled.div`
+  position: relative;
+`;
+
+const SearchInputIcon = styled(props => <InlineSvg src="icon-search" {...props} />)`
+  color: ${p => p.theme.gray2}
+  position: absolute;
+  left: 10px;
+  top: 8px;
+`;
+
+const SearchInput = styled.input`
+  transition: border-color 0.15s ease;
+  font-size: 14px;
+  width: 260px;
+  line-height: 1;
+  padding: 5px 8px 4px 28px;
+  border: 1px solid ${p => p.theme.borderDark};
+  border-radius: 30px;
+  height: 28px;
+
+  box-shadow: inset ${p => p.theme.dropShadowLight};
+
+  &:focus {
+    outline: none;
+    border: 1px solid ${p => p.theme.gray1};
+  }
+
+  &::placeholder {
+    color: ${p => p.theme.gray2};
+  }
+`;
+
+const DropdownBox = styled.div`
+  background: #fff;
+  border: 1px solid ${p => p.theme.borderDark};
+  box-shadow: ${p => p.theme.dropShadowHeavy};
+  position: absolute;
+  top: 36px;
+  right: 0;
+  width: 400px;
+  border-radius: 5px;
+`;
+
+const SettingsSearchWrapper = styled.div`
+  position: relative;
+`;
+
+const SearchItem = styled(({highlighted, ...props}) => <Link {...props} />)`
+  display: block;
+  color: ${p => p.theme.gray5};
+  padding: 10px;
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+
+  ${p =>
+    p.highlighted &&
+    css`
+      color: ${p.theme.purpleDarkest};
+      background: ${p.theme.offWhite};
+    `};
+
+  &:first-child {
+    border-radius: 5px 5px 0 0;
+  }
+
+  &:last-child {
+    border-bottom: 0;
+    border-radius: 0 0 5px 5px;
+  }
+`;
+
+const EmptyItem = styled(SearchItem)`
+  text-align: center;
+  padding: 16px;
+  opacity: 0.5;
+`;
+
+const SearchDetail = styled.div`
+  font-size: 0.8em;
+  line-height: 1.3;
+  margin-top: 4px;
+  opacity: 0.9;
+  color: ${p => p.theme.gray3};
+`;
+
+const Content = styled(props => <Flex direction="column" {...props} />)``;
+
+const ResultTypeIcon = styled(InlineSvg)`
+  color: ${p => p.theme.gray1};
+  font-size: 1.2em;
+  flex-shrink: 0;
+`;
+
+const TeamAvatar = styled(Avatar)`
+  margin-right: 0.5em;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx
index fefaa2630c..2e2afda4c1 100644
--- a/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx
@@ -91,11 +91,12 @@ class SettingsLayout extends React.Component {
   static propTypes = {
     renderNavigation: PropTypes.func,
     route: PropTypes.object,
+    router: PropTypes.object,
     routes: PropTypes.array,
   };
 
   render() {
-    let {params, routes, route, renderNavigation, children} = this.props;
+    let {params, routes, route, router, renderNavigation, children} = this.props;
     // We want child's view's props
     let childProps = (children && children.props) || this.props;
     let childRoutes = childProps.routes || routes || [];
@@ -117,7 +118,7 @@ class SettingsLayout extends React.Component {
                   route={childRoute}
                 />
               </Box>
-              <SettingsSearch params={params} />
+              <SettingsSearch routes={routes} router={router} params={params} />
             </Flex>
           </Container>
         </SettingsHeader>
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 76f919dd18..ff5f93e48c 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -795,6 +795,12 @@ table.integrations {
     position: absolute;
     left: 0;
     top: 0;
+
+    &.relative {
+      position: relative;
+      left: auto;
+      top: auto;
+    }
   }
 
   .loading-message {
diff --git a/tests/js/setup.js b/tests/js/setup.js
index cb106166f0..b01acce43c 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -27,6 +27,9 @@ window.$ = window.jQuery = jQuery;
 window.sinon = sinon;
 window.scrollTo = sinon.spy();
 
+// Instead of wrapping codeblocks in `setTimeout`
+window.tick = () => new Promise(res => setTimeout(res));
+
 window.Raven = {
   captureMessage: sinon.spy(),
   captureException: sinon.spy(),
diff --git a/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap b/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
index e627818677..3007b5435c 100644
--- a/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
@@ -23,7 +23,9 @@ exports[`SettingsLayout renders 1`] = `
             routes={Array []}
           />
         </Box>
-        <withRouter(SettingsSearchContainer) />
+        <SettingsSearch
+          routes={Array []}
+        />
       </Flex>
     </Container>
   </SettingsHeader>
diff --git a/tests/js/spec/components/search/apiSearch.spec.jsx b/tests/js/spec/components/search/apiSearch.spec.jsx
new file mode 100644
index 0000000000..0ea3c08a0e
--- /dev/null
+++ b/tests/js/spec/components/search/apiSearch.spec.jsx
@@ -0,0 +1,238 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import {ApiSearch} from 'app/components/search/apiSearch';
+
+jest.mock('lodash/debounce', () => jest.fn(fn => fn));
+
+describe('ApiSearch', function() {
+  let wrapper;
+  let org = TestStubs.Organization();
+  let orgsMock;
+  let projectsMock;
+  let teamsMock;
+  let membersMock;
+
+  beforeEach(function() {
+    orgsMock = MockApiClient.addMockResponse({
+      url: '/organizations/',
+      query: 'foo',
+      body: [TestStubs.Organization({slug: 'foo-org'})],
+    });
+    projectsMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/projects/',
+      query: 'foo',
+      body: [TestStubs.Project({slug: 'foo-project'})],
+    });
+    teamsMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/teams/',
+      query: 'foo',
+      body: [TestStubs.Team({slug: 'foo-team'})],
+    });
+    membersMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/members/',
+      query: 'foo',
+      body: TestStubs.Members(),
+    });
+  });
+
+  afterEach(function() {
+    MockApiClient.clearMockResponses();
+  });
+
+  it('queries all API endpoints', function() {
+    let mock = jest.fn().mockReturnValue(null);
+    wrapper = mount(
+      <ApiSearch params={{orgId: org.slug}} query="foo">
+        {mock}
+      </ApiSearch>,
+      TestStubs.routerContext()
+    );
+
+    expect(orgsMock).toHaveBeenCalled();
+    expect(projectsMock).toHaveBeenCalled();
+    expect(teamsMock).toHaveBeenCalled();
+    expect(membersMock).toHaveBeenCalled();
+  });
+
+  it('only queries org endpoint if there is no org in context', function() {
+    let mock = jest.fn().mockReturnValue(null);
+    wrapper = mount(
+      <ApiSearch params={{}} query="foo">
+        {mock}
+      </ApiSearch>,
+      TestStubs.routerContext()
+    );
+
+    expect(orgsMock).toHaveBeenCalled();
+    expect(projectsMock).not.toHaveBeenCalled();
+    expect(teamsMock).not.toHaveBeenCalled();
+    expect(membersMock).not.toHaveBeenCalled();
+  });
+
+  it('render function is called with correct results', async function() {
+    let mock = jest.fn().mockReturnValue(null);
+    wrapper = mount(
+      <ApiSearch params={{orgId: org.slug}} query="foo">
+        {mock}
+      </ApiSearch>,
+      TestStubs.routerContext()
+    );
+
+    await tick();
+    wrapper.update();
+    expect(mock).toHaveBeenLastCalledWith({
+      isLoading: false,
+      allResults: expect.anything(),
+      results: expect.arrayContaining([
+        expect.objectContaining({
+          searchIndex: 'foo-org',
+          model: expect.objectContaining({
+            slug: 'foo-org',
+          }),
+          sourceType: 'organization',
+          resultType: 'settings',
+          to: '/settings/foo-org/',
+        }),
+        expect.objectContaining({
+          searchIndex: 'foo-org Dashboard',
+          model: expect.objectContaining({
+            slug: 'foo-org',
+          }),
+          sourceType: 'organization',
+          resultType: 'route',
+          to: '/foo-org/',
+        }),
+        expect.objectContaining({
+          searchIndex: 'foo-project',
+          model: expect.objectContaining({
+            slug: 'foo-project',
+          }),
+          sourceType: 'project',
+          resultType: 'settings',
+          to: '/settings/org-slug/foo-project/',
+        }),
+        expect.objectContaining({
+          searchIndex: 'foo-project Dashboard',
+          model: expect.objectContaining({
+            slug: 'foo-project',
+          }),
+          sourceType: 'project',
+          resultType: 'route',
+          to: '/org-slug/foo-project/',
+        }),
+        expect.objectContaining({
+          searchIndex: 'foo-team',
+          model: expect.objectContaining({
+            slug: 'foo-team',
+          }),
+          sourceType: 'team',
+          resultType: 'settings',
+          to: '/settings/org-slug/teams/foo-team/',
+        }),
+      ]),
+    });
+
+    // There are no members that match
+    expect(mock.mock.calls[1][0].results.length).toBe(5);
+  });
+
+  it('render function is called with correct results when API requests partially succeed', async function() {
+    let mock = jest.fn().mockReturnValue(null);
+
+    teamsMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/projects/',
+      query: 'foo',
+      statusCode: 500,
+    });
+    wrapper = mount(
+      <ApiSearch params={{orgId: org.slug}} query="foo">
+        {mock}
+      </ApiSearch>,
+      TestStubs.routerContext()
+    );
+
+    await tick();
+    wrapper.update();
+    expect(mock).toHaveBeenLastCalledWith({
+      isLoading: false,
+      allResults: expect.anything(),
+      results: expect.arrayContaining([
+        expect.objectContaining({
+          model: expect.objectContaining({
+            slug: 'foo-org',
+          }),
+        }),
+        expect.objectContaining({
+          model: expect.objectContaining({
+            slug: 'foo-org',
+          }),
+        }),
+        expect.objectContaining({
+          model: expect.objectContaining({
+            slug: 'foo-team',
+          }),
+        }),
+      ]),
+    });
+
+    // There are no members that match
+    expect(mock.mock.calls[1][0].results.length).toBe(3);
+  });
+
+  it('render function is updated as query changes', async function() {
+    let mock = jest.fn().mockReturnValue(null);
+    wrapper = mount(
+      <ApiSearch params={{orgId: org.slug}} query="foo">
+        {mock}
+      </ApiSearch>,
+      TestStubs.routerContext()
+    );
+
+    await tick();
+    wrapper.update();
+    expect(mock).toHaveBeenLastCalledWith({
+      isLoading: false,
+      allResults: expect.anything(),
+      results: expect.arrayContaining([
+        expect.objectContaining({
+          model: expect.objectContaining({
+            slug: 'foo-org',
+          }),
+        }),
+        expect.objectContaining({
+          model: expect.objectContaining({
+            slug: 'foo-project',
+          }),
+        }),
+        expect.objectContaining({
+          model: expect.objectContaining({
+            slug: 'foo-team',
+          }),
+        }),
+      ]),
+    });
+
+    // There are no members that match
+    expect(mock.mock.calls[1][0].results.length).toBe(5);
+
+    mock.mockClear();
+    wrapper.setProps({query: 'foo-t'});
+    await tick();
+    wrapper.update();
+    expect(mock).toHaveBeenLastCalledWith({
+      isLoading: false,
+      allResults: expect.anything(),
+      results: [
+        expect.objectContaining({
+          model: expect.objectContaining({
+            slug: 'foo-team',
+          }),
+        }),
+      ],
+    });
+
+    // Should have two calls, first call is setLoading
+    expect(mock.mock.calls[1][0].results.length).toBe(1);
+  });
+});
diff --git a/tests/js/spec/components/search/formFieldSearch.spec.jsx b/tests/js/spec/components/search/formFieldSearch.spec.jsx
new file mode 100644
index 0000000000..8cc4150656
--- /dev/null
+++ b/tests/js/spec/components/search/formFieldSearch.spec.jsx
@@ -0,0 +1,66 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import FormFieldSearch from 'app/components/search/formFieldSearch';
+import {addSearchMap} from 'app/actionCreators/formSearch';
+
+describe('FormFieldSearch', function() {
+  let wrapper;
+  let searchMap = {
+    test: {
+      route: '/route/',
+      field: {
+        name: 'test-field',
+      },
+    },
+    foo: {
+      route: '/foo/',
+      field: {
+        name: 'foo-field',
+      },
+    },
+  };
+
+  beforeEach(function() {
+    addSearchMap(searchMap);
+  });
+
+  it('can find a form field', function(done) {
+    let mock = jest.fn().mockReturnValue(null);
+    wrapper = mount(<FormFieldSearch query="te">{mock}</FormFieldSearch>);
+
+    setTimeout(() => {
+      wrapper.update();
+      expect(mock).toHaveBeenCalledWith({
+        isLoading: false,
+        allResults: searchMap,
+        results: [
+          {
+            field: {name: 'test-field'},
+            resultType: 'field',
+            route: '/route/',
+            sourceType: 'field',
+            to: '/route/#test-field',
+            searchIndex: '/route/#test-field',
+          },
+        ],
+      });
+      done();
+    });
+  });
+
+  it('does not find any form field ', function(done) {
+    let mock = jest.fn().mockReturnValue(null);
+    wrapper = mount(<FormFieldSearch query="invalid">{mock}</FormFieldSearch>);
+
+    setTimeout(() => {
+      wrapper.update();
+      expect(mock).toHaveBeenCalledWith({
+        isLoading: false,
+        allResults: searchMap,
+        results: [],
+      });
+      done();
+    });
+  });
+});
diff --git a/tests/js/spec/views/__snapshots__/apiTokens.spec.jsx.snap b/tests/js/spec/views/__snapshots__/apiTokens.spec.jsx.snap
index f481e99be1..37dbb80aca 100644
--- a/tests/js/spec/views/__snapshots__/apiTokens.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/apiTokens.spec.jsx.snap
@@ -738,14 +738,12 @@ exports[`ApiTokens renders with result 1`] = `
                                                                   <StyledSvg
                                                                     className="glamor-45 glamor-42"
                                                                     height="12px"
-                                                                    style={Object {}}
                                                                     viewBox={Object {}}
                                                                     width="12px"
                                                                   >
                                                                     <svg
                                                                       className="glamor-42 glamor-43 glamor-44"
                                                                       height="12px"
-                                                                      style={Object {}}
                                                                       viewBox={Object {}}
                                                                       width="12px"
                                                                     >
diff --git a/tests/js/spec/views/__snapshots__/organizationIntegrationConfig.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationIntegrationConfig.spec.jsx.snap
index 91e3862df6..ebd22b42ea 100644
--- a/tests/js/spec/views/__snapshots__/organizationIntegrationConfig.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationIntegrationConfig.spec.jsx.snap
@@ -625,16 +625,13 @@ exports[`OrganizationIntegrationConfig render() with one integration renders 1`]
                   src="icon-chevron-right"
                 >
                   <StyledSvg
-                    className=""
                     height="1em"
-                    style={Object {}}
                     viewBox={Object {}}
                     width="1em"
                   >
                     <svg
                       className="glamor-46 glamor-47"
                       height="1em"
-                      style={Object {}}
                       viewBox={Object {}}
                       width="1em"
                     >
diff --git a/tests/js/spec/views/__snapshots__/organizationMembersView.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationMembersView.spec.jsx.snap
index 68c3f66823..69f20bce20 100644
--- a/tests/js/spec/views/__snapshots__/organizationMembersView.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationMembersView.spec.jsx.snap
@@ -289,14 +289,12 @@ exports[`OrganizationMembersView No Require Link does not have 2fa warning if us
                                             <StyledSvg
                                               className="glamor-5 glamor-2"
                                               height="12px"
-                                              style={Object {}}
                                               viewBox={Object {}}
                                               width="12px"
                                             >
                                               <svg
                                                 className="glamor-2 glamor-3 glamor-4"
                                                 height="12px"
-                                                style={Object {}}
                                                 viewBox={Object {}}
                                                 width="12px"
                                               >
@@ -1620,14 +1618,12 @@ exports[`OrganizationMembersView Require Link does not have 2fa warning if user
                                             <StyledSvg
                                               className="glamor-5 glamor-2"
                                               height="12px"
-                                              style={Object {}}
                                               viewBox={Object {}}
                                               width="12px"
                                             >
                                               <svg
                                                 className="glamor-2 glamor-3 glamor-4"
                                                 height="12px"
-                                                style={Object {}}
                                                 viewBox={Object {}}
                                                 width="12px"
                                               >
diff --git a/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap
index ba2f48836f..895c528d67 100644
--- a/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap
@@ -303,14 +303,12 @@ exports[`OrganizationProjectsView render() Should render the projects in the sto
                                             <StyledSvg
                                               className="glamor-5 glamor-2"
                                               height="12px"
-                                              style={Object {}}
                                               viewBox={Object {}}
                                               width="12px"
                                             >
                                               <svg
                                                 className="glamor-2 glamor-3 glamor-4"
                                                 height="12px"
-                                                style={Object {}}
                                                 viewBox={Object {}}
                                                 width="12px"
                                               >
diff --git a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
index 100a6a3799..85e35ce489 100644
--- a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
@@ -274,14 +274,12 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                                               <StyledSvg
                                                                 className="glamor-3 glamor-0"
                                                                 height="1em"
-                                                                style={Object {}}
                                                                 viewBox={Object {}}
                                                                 width="1em"
                                                               >
                                                                 <svg
                                                                   className="glamor-0 glamor-1 glamor-2"
                                                                   height="1em"
-                                                                  style={Object {}}
                                                                   viewBox={Object {}}
                                                                   width="1em"
                                                                 >
@@ -637,14 +635,12 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                             <StyledSvg
                                               className="glamor-43 glamor-40"
                                               height="1em"
-                                              style={Object {}}
                                               viewBox={Object {}}
                                               width="1em"
                                             >
                                               <svg
                                                 className="glamor-40 glamor-41 glamor-2"
                                                 height="1em"
-                                                style={Object {}}
                                                 viewBox={Object {}}
                                                 width="1em"
                                               >
diff --git a/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap b/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
index 511246b4af..b4de60bcea 100644
--- a/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
@@ -372,14 +372,12 @@ exports[`ProjectTeamsSettings render() renders 1`] = `
             <StyledSvg
               className="glamor-9 glamor-6"
               height="1em"
-              style={Object {}}
               viewBox={Object {}}
               width="1em"
             >
               <svg
                 className="glamor-6 glamor-7 glamor-8"
                 height="1em"
-                style={Object {}}
                 viewBox={Object {}}
                 width="1em"
               >
@@ -524,14 +522,12 @@ exports[`ProjectTeamsSettings render() renders 1`] = `
                                                       <StyledSvg
                                                         className="glamor-18 glamor-15"
                                                         height="1em"
-                                                        style={Object {}}
                                                         viewBox={Object {}}
                                                         width="1em"
                                                       >
                                                         <svg
                                                           className="glamor-15 glamor-16 glamor-8"
                                                           height="1em"
-                                                          style={Object {}}
                                                           viewBox={Object {}}
                                                           width="1em"
                                                         >
@@ -620,14 +616,12 @@ exports[`ProjectTeamsSettings render() renders 1`] = `
                               <StyledSvg
                                 className="glamor-48 glamor-45"
                                 height="16px"
-                                style={Object {}}
                                 viewBox={Object {}}
                                 width="16px"
                               >
                                 <svg
                                   className="glamor-45 glamor-46 glamor-8"
                                   height="16px"
-                                  style={Object {}}
                                   viewBox={Object {}}
                                   width="16px"
                                 >
diff --git a/tests/js/spec/views/__snapshots__/projectAlertRules.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectAlertRules.spec.jsx.snap
index 4e8ee9f742..3cb7a0f9b6 100644
--- a/tests/js/spec/views/__snapshots__/projectAlertRules.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectAlertRules.spec.jsx.snap
@@ -279,14 +279,12 @@ exports[`projectAlertRules renders 1`] = `
                                         <StyledSvg
                                           className="glamor-5 glamor-2"
                                           height="12px"
-                                          style={Object {}}
                                           viewBox={Object {}}
                                           width="12px"
                                         >
                                           <svg
                                             className="glamor-2 glamor-3 glamor-4"
                                             height="12px"
-                                            style={Object {}}
                                             viewBox={Object {}}
                                             width="12px"
                                           >
diff --git a/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap b/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
index 29f5eda552..56e56dbbfa 100644
--- a/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
@@ -303,14 +303,12 @@ exports[`RuleBuilder render() renders 1`] = `
           <StyledSvg
             className="glamor-9 glamor-6"
             height="1em"
-            style={Object {}}
             viewBox={Object {}}
             width="1em"
           >
             <svg
               className="glamor-6 glamor-7 glamor-8"
               height="1em"
-              style={Object {}}
               viewBox={Object {}}
               width="1em"
             >
@@ -497,14 +495,12 @@ exports[`RuleBuilder render() renders 1`] = `
                                                     <StyledSvg
                                                       className="glamor-18 glamor-15"
                                                       height="1em"
-                                                      style={Object {}}
                                                       viewBox={Object {}}
                                                       width="1em"
                                                     >
                                                       <svg
                                                         className="glamor-15 glamor-16 glamor-8"
                                                         height="1em"
-                                                        style={Object {}}
                                                         viewBox={Object {}}
                                                         width="1em"
                                                       >
@@ -593,14 +589,12 @@ exports[`RuleBuilder render() renders 1`] = `
                             <StyledSvg
                               className="glamor-48 glamor-45"
                               height="16px"
-                              style={Object {}}
                               viewBox={Object {}}
                               width="16px"
                             >
                               <svg
                                 className="glamor-45 glamor-46 glamor-8"
                                 height="16px"
-                                style={Object {}}
                                 viewBox={Object {}}
                                 width="16px"
                               >
diff --git a/tests/js/spec/views/__snapshots__/teamMembers.spec.jsx.snap b/tests/js/spec/views/__snapshots__/teamMembers.spec.jsx.snap
index 0028cfdbe0..e01643f535 100644
--- a/tests/js/spec/views/__snapshots__/teamMembers.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/teamMembers.spec.jsx.snap
@@ -57,6 +57,7 @@ exports[`TeamMembers render() renders 1`] = `
           },
         }
       }
+      userLink={true}
     />
     <Button
       disabled={false}
@@ -100,6 +101,7 @@ exports[`TeamMembers render() renders 1`] = `
           },
         }
       }
+      userLink={true}
     />
     <Button
       disabled={false}
@@ -143,6 +145,7 @@ exports[`TeamMembers render() renders 1`] = `
           },
         }
       }
+      userLink={true}
     />
     <Button
       disabled={false}
