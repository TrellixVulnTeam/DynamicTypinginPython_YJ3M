commit c21b62db5f1ca3c27f23c1f6926ba7c99fa1e481
Author: Ben Vinegar <ben@benv.ca>
Date:   Fri Dec 4 12:36:52 2015 -0800

    Add "select all" dropdown bar on stream page

diff --git a/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx b/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
index e87add50e5..64a5b66b1b 100644
--- a/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
@@ -36,10 +36,14 @@ const SelectedGroupStore = Reflux.createStore({
 
   allSelected() {
     let itemIds = this.getSelectedIds();
-    let numRecords = Object.keys(this.records).length;
+    let numRecords = this.numSelected();
     return itemIds.size > 0 && itemIds.size === numRecords;
   },
 
+  numSelected() {
+    return Object.keys(this.records).length;
+  },
+
   anySelected() {
     let itemIds = this.getSelectedIds();
     return itemIds.size > 0;
diff --git a/src/sentry/static/sentry/app/views/stream/actionLink.jsx b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
index 8438c1558b..6d46092330 100644
--- a/src/sentry/static/sentry/app/views/stream/actionLink.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
@@ -10,14 +10,11 @@ const ActionLink = React.createClass({
   propTypes: {
     confirmationQuestion: React.PropTypes.any,
     buttonTitle: React.PropTypes.string,
-    canActionAll: React.PropTypes.bool.isRequired,
     confirmLabel: React.PropTypes.any,
-    confirmAllLabel: React.PropTypes.any,
     disabled: React.PropTypes.bool,
     neverConfirm: React.PropTypes.bool,
     onAction: React.PropTypes.func.isRequired,
     onlyIfBulk: React.PropTypes.bool,
-    selectAllActive: React.PropTypes.bool.isRequired
   },
 
   mixins: [
@@ -30,9 +27,7 @@ const ActionLink = React.createClass({
 
   getDefaultProps() {
     return {
-      actionTypes: {},
       buttonTitle: null, // title="..." (optional)
-      canActionAll: false,
       onlyIfBulk: false,
       neverConfirm: false,
       disabled: false
@@ -48,7 +43,7 @@ const ActionLink = React.createClass({
   handleClick() {
     let selectedItemIds = SelectedGroupStore.getSelectedIds();
     if (!this.state.isModalOpen && !this.shouldConfirm(selectedItemIds.size)) {
-      return void this.handleActionSelected();
+      return void this.handleAction();
     }
 
     this.handleToggle();
@@ -63,15 +58,8 @@ const ActionLink = React.createClass({
     });
   },
 
-  handleActionAll(evt) {
-    this.props.onAction(evt, this.props.actionTypes.ALL);
-    this.setState({
-      isModalOpen: false
-    });
-  },
-
-  handleActionSelected(evt) {
-    this.props.onAction(evt, this.props.actionTypes.SELECTED);
+  handleAction(evt) {
+    this.props.onAction(evt);
     this.setState({
       isModalOpen: false
     });
@@ -129,12 +117,8 @@ const ActionLink = React.createClass({
           <div className="modal-footer">
             <button type="button" className="btn btn-default"
                     onClick={this.handleToggle}>{t('Cancel')}</button>
-            {this.props.canActionAll &&
-              <button type="button" className="btn btn-danger"
-                      onClick={this.handleActionAll}>{resolveLabel(this.props.confirmAllLabel)}</button>
-            }
             <button type="button" className="btn btn-primary"
-                    onClick={this.handleActionSelected}>
+                    onClick={this.handleAction}>
               {resolveLabel(this.props.confirmLabel)}
             </button>
           </div>
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index 80c2e18dae..44a44838a4 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -26,49 +26,51 @@ const StreamActions = React.createClass({
     PureRenderMixin
   ],
 
-  getDefaultProps() {
-    return {
-      actionTypes: {
-        ALL: 'all',
-        SELECTED: 'selected'
-      }
-    };
-  },
-
   getInitialState() {
     return {
       datePickerActive: false,
-      selectAllActive: false,
+
       anySelected: false,
-      multiSelected: false,
+      multiSelected: false, // more than one selected
+      pageSelected: false, // all on current page selected (e.g. 25)
+      allSelected: false, // all in current search query selected (e.g. 1000+)
     };
   },
 
+  selectAll() {
+    this.setState({
+      allSelected: true
+    });
+  },
+
   selectStatsPeriod(period) {
     return this.props.onSelectStatsPeriod(period);
   },
 
-  actionSelectedGroups(actionType, callback) {
+  actionSelectedGroups(callback) {
     let selectedIds;
 
-    if (actionType === this.props.actionTypes.ALL) {
+    if (this.state.allSelected) {
       selectedIds = undefined; // undefined means "all"
-    } else if (actionType === this.props.actionTypes.SELECTED) {
+    } else {
       let itemIdSet = SelectedGroupStore.getSelectedIds();
       selectedIds = this.props.groupIds.filter(
         (itemId) => itemIdSet.has(itemId)
       );
-    } else {
-      throw new Error('Invalid action type: ' + actionType);
     }
 
     callback(selectedIds);
 
+    this.deselectAll();
+  },
+
+  deselectAll() {
     SelectedGroupStore.deselectAll();
+    this.setState({allSelected: false});
   },
 
-  onUpdate(data, event, actionType) {
-    this.actionSelectedGroups(actionType, (itemIds) => {
+  onUpdate(data, event) {
+    this.actionSelectedGroups((itemIds) => {
       let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
       this.api.bulkUpdate({
@@ -84,10 +86,10 @@ const StreamActions = React.createClass({
     });
   },
 
-  onDelete(event, actionType) {
+  onDelete(event) {
     let loadingIndicator = IndicatorStore.add(t('Removing events..'));
 
-    this.actionSelectedGroups(actionType, (itemIds) => {
+    this.actionSelectedGroups((itemIds) => {
       this.api.bulkDelete({
         orgId: this.props.orgId,
         projectId: this.props.projectId,
@@ -100,10 +102,10 @@ const StreamActions = React.createClass({
     });
   },
 
-  onMerge(event, actionType) {
+  onMerge(event) {
     let loadingIndicator = IndicatorStore.add(t('Merging events..'));
 
-    this.actionSelectedGroups(actionType, (itemIds) => {
+    this.actionSelectedGroups((itemIds) => {
       this.api.merge({
         orgId: this.props.orgId,
         projectId: this.props.projectId,
@@ -118,7 +120,7 @@ const StreamActions = React.createClass({
 
   onSelectedGroupChange() {
     this.setState({
-      selectAllActive: SelectedGroupStore.allSelected(),
+      pageSelected: SelectedGroupStore.allSelected(),
       multiSelected: SelectedGroupStore.multiSelected(),
       anySelected: SelectedGroupStore.anySelected()
     });
@@ -135,210 +137,234 @@ const StreamActions = React.createClass({
   render() {
     // TODO(mitsuhiko): very unclear how to translate this
     return (
-      <div className="stream-actions row">
-        <div className="stream-actions-left col-md-6 col-sm-8 col-xs-8">
-          <div className="checkbox">
-            <input type="checkbox" className="chk-select-all"
-                   onChange={this.onSelectAll}
-                   checked={this.state.selectAllActive} />
-          </div>
-          <div className="btn-group">
-            <ActionLink
-               actionTypes={this.props.actionTypes}
-               className="btn btn-default btn-sm action-resolve"
-               disabled={!this.state.anySelected}
-               onAction={this.onUpdate.bind(this, {status: 'resolved'})}
-               buttonTitle={t('Resolve')}
-               confirmationQuestion={
-                 (count) =>
-                   tn('Are you sure you want to resolve these %d issue?',
-                      'Are you sure you want to resolve these %d issues?',
-                      count)
-               }
-               confirmAllLabel={t('Resolve all matching issues')}
-               confirmLabel={
-                 (count) =>
-                   tn('Resolve %d selected issue',
-                      'Resolve %d selected issues',
-                      count)
-               }
-               tooltip={t('Set Status to Resolved')}
-               canActionAll={true}
-               onlyIfBulk={true}
-               selectAllActive={this.state.selectAllActive}>
-              <i aria-hidden="true" className="icon-checkmark"></i>
-            </ActionLink>
-            <ActionLink
-               actionTypes={this.props.actionTypes}
-               className="btn btn-default btn-sm action-bookmark"
-               disabled={!this.state.anySelected}
-               onAction={this.onUpdate.bind(this, {isBookmarked: true})}
-               neverConfirm={true}
-               buttonTitle={t('Bookmark')}
-               confirmLabel={
-                 (count) =>
-                   tn('Bookmark %d selected issue',
-                      'Bookmark %d selected issues',
-                      count)
-               }
-               tooltip={t('Add to Bookmarks')}
-               canActionAll={false}
-               onlyIfBulk={true}
-               selectAllActive={this.state.selectAllActive}>
-              <i aria-hidden="true" className="icon-bookmark"></i>
-            </ActionLink>
-
-            <DropdownLink
-              key="actions"
-              btnGroup={true}
-              caret={false}
-              className="btn btn-sm btn-default hidden-xs action-more"
-              title={<span className="icon-ellipsis"></span>}>
-              <MenuItem noAnchor={true}>
-                <ActionLink
-                   actionTypes={this.props.actionTypes}
-                   className="action-merge"
-                   disabled={!this.state.multiSelected}
-                   onAction={this.onMerge}
-                   confirmationQuestion={
-                     (count) =>
-                       tn('Are you sure you want to merge %d issue?',
-                          'Are you sure you want to merge %d issues?',
+      <div>
+        <div className="stream-actions row">
+          <div className="stream-actions-left col-md-6 col-sm-8 col-xs-8">
+            <div className="checkbox">
+              <input type="checkbox" className="chk-select-all"
+                     onChange={this.onSelectAll}
+                     checked={this.state.pageSelected} />
+            </div>
+            <div className="btn-group">
+              <ActionLink
+                 className="btn btn-default btn-sm action-resolve"
+                 disabled={!this.state.anySelected}
+                 onAction={this.onUpdate.bind(this, {status: 'resolved'})}
+                 buttonTitle={t('Resolve')}
+                 confirmationQuestion={
+                  this.state.allSelected
+                    ? t('Are you sure you want to resolve all issues in the current query?')
+                    : (count) =>
+                        tn('Are you sure you want to resolve these %d issue?',
+                           'Are you sure you want to resolve these %d issues?',
+                           count)
+                 }
+                 confirmLabel={
+                  this.state.allSelected
+                    ? t('Resolve all issues')
+                    : (count) =>
+                        tn('Resolve %d selected issue',
+                           'Resolve %d selected issues',
+                           count)
+                 }
+                 tooltip={t('Set Status to Resolved')}
+                 onlyIfBulk={true}
+                 selectAllActive={this.state.pageSelected}>
+                <i aria-hidden="true" className="icon-checkmark"></i>
+              </ActionLink>
+              <ActionLink
+                 className="btn btn-default btn-sm action-bookmark"
+                 disabled={!this.state.anySelected || this.state.allSelected}
+                 onAction={this.onUpdate.bind(this, {isBookmarked: true})}
+                 neverConfirm={true}
+                 buttonTitle={t('Bookmark')}
+                 confirmLabel={
+                    (count) =>
+                      tn('Bookmark %d selected issue',
+                         'Bookmark %d selected issues',
                           count)
-                   }
-                   confirmLabel={
-                     (count) =>
-                       tn('Merge %d selected issue',
-                          'Merge %d selected issues',
-                          count)
-                   }
-                   canActionAll={false}
-                   selectAllActive={this.state.selectAllActive}>
-                  {t('Merge Events')}
-                </ActionLink>
-              </MenuItem>
-              <MenuItem noAnchor={true}>
-                <ActionLink
-                   actionTypes={this.props.actionTypes}
-                   className="action-remove-bookmark"
-                   disabled={!this.state.anySelected}
-                   onAction={this.onUpdate.bind(this, {isBookmarked: false})}
-                   confirmationQuestion={
-                     (count) =>
-                       tn('Are you sure you want to remove this %d issue from your bookmarks?',
-                          'Are you sure you want to remove these %d issues from your bookmarks?',
-                          count)
-                   }
-                   onlyIfBulk={true}
-                   selectAllActive={this.state.selectAllActive}>
-                 {t('Remove from Bookmarks')}
-                </ActionLink>
-              </MenuItem>
-              <MenuItem divider={true} />
-              <MenuItem noAnchor={true}>
-                <ActionLink
-                   actionTypes={this.props.actionTypes}
-                   className="action-unresolve"
-                   disabled={!this.state.anySelected}
-                   onAction={this.onUpdate.bind(this, {status: 'unresolved'})}
-                   confirmAllLabel={t('Unresolve all matching issues')}
-                   confirmationQuestion={
-                     (count) =>
-                       tn('Are you sure you want to unresolve these %d issue?',
-                          'Are you sure you want to unresolve these %d issues?',
-                          count)
-                   }
-                   confirmLabel={
-                     (count) =>
-                       tn('Unresolve %d selected issue',
-                          'Unresolve %d selected issues',
-                          count)
-                   }
-                   onlyIfBulk={true}
-                   canActionAll={true}
-                   selectAllActive={this.state.selectAllActive}
-                   groupIds={this.props.groupIds}>
-                 {t('Set status to: Unresolved')}
-                </ActionLink>
-              </MenuItem>
-              <MenuItem noAnchor={true}>
-                <ActionLink
-                   actionTypes={this.props.actionTypes}
-                   className="action-mute"
-                   disabled={!this.state.anySelected}
-                   onAction={this.onUpdate.bind(this, {status: 'muted'})}
-                   confirmAllLabel={t('Mute all matching issues')}
-                   confirmationQuestion={
-                     (count) =>
-                       tn('Are you sure you want to mute these %d issue?',
-                          'Are you sure you want to mute these %d issues?',
-                          count)
-                   }
-                   confirmLabel={
-                     (count) =>
-                       tn('Mute %d selected issue',
-                          'Mute %d selected issues',
-                          count)
-                   }
-                   onlyIfBulk={true}
-                   canActionAll={true}
-                   selectAllActive={this.state.selectAllActive}>
-                 {t('Set status to: Muted')}
-                </ActionLink>
-              </MenuItem>
-              <MenuItem divider={true} />
-              <MenuItem noAnchor={true}>
-                <ActionLink
-                   actionTypes={this.props.actionTypes}
-                   className="action-delete"
-                   disabled={!this.state.anySelected}
-                   onAction={this.onDelete}
-                   confirmationQuestion={
-                     (count) =>
-                       tn('Are you sure you want to delete %d issue?',
-                          'Are you sure you want to delete %d issues?',
-                          count)
-                   }
-                   confirmLabel={
-                     (count) =>
-                       tn('Delete %d selected issue',
-                          'Delete %d selected issues',
-                          count)
-                   }
-                   canActionAll={false}
-                   selectAllActive={this.state.selectAllActive}>
-                 {t('Delete Events')}
-                </ActionLink>
-              </MenuItem>
-            </DropdownLink>
-          </div>
+                 }
+                 tooltip={t('Add to Bookmarks')}
+                 onlyIfBulk={true}
+                 selectAllActive={this.state.pageSelected}>
+                <i aria-hidden="true" className="icon-bookmark"></i>
+              </ActionLink>
 
-          <div className="btn-group">
-            <a className="btn btn-default btn-sm hidden-xs realtime-control"
-               onClick={this.onRealtimeChange}>
-              {(this.props.realtimeActive ?
-                <span className="icon icon-pause"></span>
-                :
-                <span className="icon icon-play"></span>
-              )}
-            </a>
+              <DropdownLink
+                key="actions"
+                btnGroup={true}
+                caret={false}
+                className="btn btn-sm btn-default hidden-xs action-more"
+                title={<span className="icon-ellipsis"></span>}>
+                <MenuItem noAnchor={true}>
+                  <ActionLink
+                    className="action-merge"
+                    disabled={!this.state.multiSelected || this.state.allSelected}
+                    onAction={this.onMerge}
+                    confirmationQuestion={
+                      (count) =>
+                        tn('Are you sure you want to merge %d issue?',
+                           'Are you sure you want to merge %d issues?',
+                           count)
+                    }
+                    confirmLabel={
+                      (count) =>
+                        tn('Merge %d selected issue',
+                           'Merge %d selected issues',
+                           count)
+                    }
+                    selectAllActive={this.state.pageSelected}>
+                    {t('Merge Events')}
+                  </ActionLink>
+                </MenuItem>
+                <MenuItem noAnchor={true}>
+                  <ActionLink
+                    className="action-remove-bookmark"
+                    disabled={!this.state.anySelected}
+                    onAction={this.onUpdate.bind(this, {isBookmarked: false})}
+                    confirmationQuestion={
+                      this.state.allSelected
+                        ? t('Are you sure you want to remove all issues in the current query from your bookmarks?')
+                        : (count) =>
+                            tn('Are you sure you want to remove this %d issue from your bookmarks?',
+                               'Are you sure you want to remove these %d issues from your bookmarks?',
+                               count)
+                    }
+                    confirmLabel={
+                      this.state.allSelected
+                        ? t('Remove all issues from bookmarks')
+                        : (count) =>
+                            tn('Remove %d selected issue from bookmarks',
+                               'Remove %d selected issues from bookmarks',
+                               count)
+                    }
+                    onlyIfBulk={true}
+                    selectAllActive={this.state.pageSelected}>
+                   {t('Remove from Bookmarks')}
+                  </ActionLink>
+                </MenuItem>
+                <MenuItem divider={true} />
+                <MenuItem noAnchor={true}>
+                  <ActionLink
+                    className="action-unresolve"
+                    disabled={!this.state.anySelected}
+                    onAction={this.onUpdate.bind(this, {status: 'unresolved'})}
+                    confirmationQuestion={
+                      this.state.allSelected
+                        ? t('Are you sure you want to unresolve all issues in the current query?')
+                        : (count) =>
+                          tn('Are you sure you want to unresolve these %d issue?',
+                             'Are you sure you want to unresolve these %d issues?',
+                             count)
+                    }
+                    confirmLabel={
+                      this.state.allSelected
+                        ? t('Unresolve all issues')
+                        : (count) =>
+                            tn('Unresolve %d selected issue',
+                               'Unresolve %d selected issues',
+                               count)
+                    }
+                    onlyIfBulk={true}
+                    selectAllActive={this.state.pageSelected}
+                    groupIds={this.props.groupIds}>
+                   {t('Set status to: Unresolved')}
+                  </ActionLink>
+                </MenuItem>
+                <MenuItem noAnchor={true}>
+                  <ActionLink
+                    className="action-mute"
+                    disabled={!this.state.anySelected}
+                    onAction={this.onUpdate.bind(this, {status: 'muted'})}
+                    confirmationQuestion={
+                      this.state.allSelected
+                        ? t('Are you sure you want to mute all issues in the current query?')
+                        : (count) =>
+                             tn('Are you sure you want to mute these %d issue?',
+                                'Are you sure you want to mute these %d issues?',
+                                count)
+                    }
+                    confirmLabel={
+                      this.state.allSelected
+                        ? t('Mute all issues')
+                        : (count) =>
+                            tn('Mute %d selected issue',
+                               'Mute %d selected issues',
+                               count)
+                    }
+                    onlyIfBulk={true}
+                    selectAllActive={this.state.pageSelected}>
+                   {t('Set status to: Muted')}
+                  </ActionLink>
+                </MenuItem>
+                <MenuItem divider={true} />
+                <MenuItem noAnchor={true}>
+                  <ActionLink
+                    className="action-delete"
+                    disabled={!this.state.anySelected || this.state.allSelected}
+                    onAction={this.onDelete}
+                    confirmationQuestion={
+                      (count) =>
+                        tn('Are you sure you want to delete %d issue?',
+                           'Are you sure you want to delete %d issues?',
+                           count)
+                    }
+                    confirmLabel={
+                      (count) =>
+                        tn('Delete %d selected issue',
+                           'Delete %d selected issues',
+                           count)
+                    }
+                    selectAllActive={this.state.pageSelected}>
+                   {t('Delete Events')}
+                  </ActionLink>
+                </MenuItem>
+              </DropdownLink>
+            </div>
+
+            <div className="btn-group">
+              <a className="btn btn-default btn-sm hidden-xs realtime-control"
+                 onClick={this.onRealtimeChange}>
+                {(this.props.realtimeActive ?
+                  <span className="icon icon-pause"></span>
+                  :
+                  <span className="icon icon-play"></span>
+                )}
+              </a>
+            </div>
           </div>
+          <div className="hidden-sm stream-actions-assignee col-md-1"></div>
+          <div className="stream-actions-level col-md-1 hidden-xs"></div>
+          <div className="hidden-sm hidden-xs stream-actions-graph col-md-2">
+            <span className="stream-actions-graph-label">{t('Graph:')}</span>
+            <ul className="toggle-graph">
+              <li className={this.props.statsPeriod === '24h' ? 'active' : ''}>
+                <a onClick={this.selectStatsPeriod.bind(this, '24h')}>{t('24h')}</a>
+              </li>
+              <li className={this.props.statsPeriod === '14d' ? 'active' : ''}>
+                <a onClick={this.selectStatsPeriod.bind(this, '14d')}>{t('14d')}</a>
+              </li>
+            </ul>
+          </div>
+          <div className="stream-actions-count align-right col-md-1 col-sm-2 col-xs-2">{t('Events')}</div>
+          <div className="stream-actions-users align-right col-md-1 col-sm-2 col-xs-2">{t('Users')}</div>
         </div>
-        <div className="hidden-sm stream-actions-assignee col-md-1"></div>
-        <div className="stream-actions-level col-md-1 hidden-xs"></div>
-        <div className="hidden-sm hidden-xs stream-actions-graph col-md-2">
-          <span className="stream-actions-graph-label">{t('Graph:')}</span>
-          <ul className="toggle-graph">
-            <li className={this.props.statsPeriod === '24h' ? 'active' : ''}>
-              <a onClick={this.selectStatsPeriod.bind(this, '24h')}>{t('24h')}</a>
-            </li>
-            <li className={this.props.statsPeriod === '14d' ? 'active' : ''}>
-              <a onClick={this.selectStatsPeriod.bind(this, '14d')}>{t('14d')}</a>
-            </li>
-          </ul>
-        </div>
-        <div className="stream-actions-count align-right col-md-1 col-sm-2 col-xs-2">{t('Events')}</div>
-        <div className="stream-actions-users align-right col-md-1 col-sm-2 col-xs-2">{t('Users')}</div>
+        {this.state.pageSelected &&
+          <div className="row stream-select-all-notice" >
+            <div className="col-md-12">
+              {this.state.allSelected
+                ? <span>{t('All %d records in current query selected.', 500)}</span>
+                : <span>
+                    {tn('%d record on this page selected.',
+                      '%d records on this page selected.', 25)}
+                    <a onClick={this.selectAll}>
+                      {t('Select all %d records in current query.', 500)}
+                    </a>
+                  </span>
+              }
+            </div>
+          </div>
+        }
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/less/stream.less b/src/sentry/static/sentry/less/stream.less
index 8125cc418f..5b57c54531 100644
--- a/src/sentry/static/sentry/less/stream.less
+++ b/src/sentry/static/sentry/less/stream.less
@@ -34,7 +34,7 @@
 .group-header {
   // needs fixed height so that stream doesn't "pop" up
   // when stream actions turn "sticky"
-  height: 44px;
+  min-height: 44px;
 }
 
 .stream-no-bulk-actions {
@@ -160,6 +160,25 @@
   }
 }
 
+.stream-select-all-notice {
+  background: @headerBgColor;
+  border: 1px solid @trim;
+  border-bottom: none;
+  border-radius: 3px 3px 0 0;
+  box-shadow: 0 1px 0 @trim;
+  margin: 0;
+  padding-right: 10px;
+
+  > div {
+    background-color: #ffc;
+    text-align: center;
+
+    > a {
+      margin-left: 0.5em;
+    }
+  }
+}
+
 /**
 * Stream / Group List
 * ============================================================================
