commit 64814222ed8d316f32eb7946410dfe08b6f9452b
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Mar 1 11:28:20 2019 -0800

    ref(events): Remove duplicate function for fetching tags (#12250)

diff --git a/src/sentry/static/sentry/app/actionCreators/events.jsx b/src/sentry/static/sentry/app/actionCreators/events.jsx
index 17e62f845f..dbb46eda7c 100644
--- a/src/sentry/static/sentry/app/actionCreators/events.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/events.jsx
@@ -52,16 +52,3 @@ export const doEventsRequest = (
     },
   });
 };
-
-/**
- * Get all available values for a given event field name
- * This includes tags as well.
- */
-export function fetchEventFieldValues(api, orgId, tag, query) {
-  return api.requestPromise(`/organizations/${orgId}/tags/${tag}/values/`, {
-    data: {
-      query,
-    },
-    method: 'GET',
-  });
-}
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx b/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx
index e2d76f3594..ef9a6f929a 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx
@@ -6,8 +6,7 @@ import React from 'react';
 import {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'app/constants';
 import {addErrorMessage} from 'app/actionCreators/indicator';
 import {defined} from 'app/utils';
-import {fetchEventFieldValues} from 'app/actionCreators/events';
-import {fetchOrganizationTags} from 'app/actionCreators/tags';
+import {fetchOrganizationTags, fetchTagValues} from 'app/actionCreators/tags';
 import {t} from 'app/locale';
 import SentryTypes from 'app/sentryTypes';
 import SmartSearchBar from 'app/components/smartSearchBar';
@@ -59,7 +58,7 @@ class SearchBar extends React.PureComponent {
   getEventFieldValues = memoize((tag, query) => {
     const {api, organization} = this.props;
 
-    return fetchEventFieldValues(api, organization.slug, tag.key, query).then(
+    return fetchTagValues(api, organization.slug, tag.key, query).then(
       results => flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),
       () => {
         throw new Error('Unable to fetch event field values');
diff --git a/tests/js/spec/views/organizationEvents/searchBar.spec.jsx b/tests/js/spec/views/organizationEvents/searchBar.spec.jsx
index 336f1caed8..34837c0464 100644
--- a/tests/js/spec/views/organizationEvents/searchBar.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/searchBar.spec.jsx
@@ -75,7 +75,7 @@ describe('SearchBar', function() {
 
     expect(tagValuesMock).toHaveBeenCalledWith(
       '/organizations/org-slug/tags/gpu/values/',
-      expect.objectContaining({data: {query: ''}})
+      expect.objectContaining({query: {}})
     );
 
     await tick();
@@ -145,7 +145,7 @@ describe('SearchBar', function() {
 
     expect(tagValuesMock).toHaveBeenCalledWith(
       '/organizations/org-slug/tags/gpu/values/',
-      expect.objectContaining({data: {query: ''}})
+      expect.objectContaining({query: {}})
     );
     selectFirstAutocompleteItem(wrapper);
     expect(wrapper.find('input').prop('value')).toBe('!gpu:*"Nvidia 1080ti" ');
