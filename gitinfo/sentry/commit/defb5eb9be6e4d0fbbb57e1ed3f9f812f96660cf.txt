commit defb5eb9be6e4d0fbbb57e1ed3f9f812f96660cf
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Apr 10 12:49:30 2019 -0700

    fix(globalheader): Fix TimeRangeSelector in Safari and improve error handling [SEN-472] (#12704)
    
    * Fixes absolute dates for safari and includes better error handling for times (Safari does not follow standards for date parsing - it also does not enforce constraints in time input field)
    * Change to propagate time changes on "blur" event
    
    Fixes JAVASCRIPT-5YA

diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx
index f3a85980e6..1118ef38a1 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx
@@ -4,16 +4,23 @@ import 'react-date-range/dist/theme/default.css';
 import {DateRangePicker} from 'react-date-range';
 import PropTypes from 'prop-types';
 import React from 'react';
+import * as Sentry from '@sentry/browser';
 import moment from 'moment';
 import styled from 'react-emotion';
 
+import {addErrorMessage} from 'app/actionCreators/indicator';
 import {analytics} from 'app/utils/analytics';
-import {getEndOfDay, getStartOfPeriodAgo, setDateToTime} from 'app/utils/dates';
-import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
+import {
+  getEndOfDay,
+  getStartOfPeriodAgo,
+  isValidTime,
+  setDateToTime,
+} from 'app/utils/dates';
 import {t} from 'app/locale';
 import Checkbox from 'app/components/checkbox';
 import SentryTypes from 'app/sentryTypes';
 import TimePicker from 'app/components/organizations/timeRangeSelector/timePicker';
+import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
 import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 
@@ -105,42 +112,63 @@ class DateRange extends React.Component {
     const {start, end, onChange} = this.props;
     const startTime = e.target.value;
 
-    if (!startTime) {
-      return;
+    try {
+      if (!startTime || !isValidTime(startTime)) {
+        throw new Error('Invalid start time');
+      }
+      const newTime = setDateToTime(start, startTime, {local: true});
+
+      analytics('dateselector.time_changed', {
+        field_changed: 'start',
+        time: startTime,
+        path: getRouteStringFromRoutes(this.context.router.routes),
+        org_id: parseInt(this.props.organization.id, 10),
+      });
+
+      onChange({
+        start: newTime,
+        end,
+      });
+    } catch (err) {
+      Sentry.withScope(scope => {
+        scope.setExtra('startTime', startTime);
+        Sentry.captureException(err);
+      });
+
+      addErrorMessage(t('Invalid start time'));
     }
-
-    analytics('dateselector.time_changed', {
-      field_changed: 'start',
-      time: startTime,
-      path: getRouteStringFromRoutes(this.context.router.routes),
-      org_id: parseInt(this.props.organization.id, 10),
-    });
-
-    onChange({
-      start: setDateToTime(start, startTime, {local: true}),
-      end,
-    });
   };
 
   handleChangeEnd = e => {
     const {start, end, onChange} = this.props;
     const endTime = e.target.value;
 
-    if (!endTime) {
-      return;
+    try {
+      if (!endTime || !isValidTime(endTime)) {
+        throw new Error('Invalid end time');
+      }
+
+      const newTime = setDateToTime(end, endTime, {local: true});
+
+      analytics('dateselector.time_changed', {
+        field_changed: 'end',
+        time: endTime,
+        path: getRouteStringFromRoutes(this.context.router.routes),
+        org_id: parseInt(this.props.organization.id, 10),
+      });
+
+      onChange({
+        start,
+        end: newTime,
+      });
+    } catch (err) {
+      Sentry.withScope(scope => {
+        scope.setExtra('endTime', endTime);
+        Sentry.captureException(err);
+      });
+
+      addErrorMessage(t('Invalid end time'));
     }
-
-    analytics('dateselector.time_changed', {
-      field_changed: 'end',
-      time: endTime,
-      path: getRouteStringFromRoutes(this.context.router.routes),
-      org_id: parseInt(this.props.organization.id, 10),
-    });
-
-    onChange({
-      start,
-      end: setDateToTime(end, endTime, {local: true}),
-    });
   };
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
index 9022eb3e13..3da6dce96c 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
@@ -44,7 +44,7 @@ const getInternalDate = (date, utc) => {
     return getUtcToSystem(date);
   } else {
     return new Date(
-      moment.tz(moment.utc(date), getUserTimezone()).format('YYYY-MM-DD HH:mm:ss')
+      moment.tz(moment.utc(date), getUserTimezone()).format('YYYY/MM/DD HH:mm:ss')
     );
   }
 };
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/timePicker.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/timePicker.jsx
index 7114749776..c33216de8e 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/timePicker.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/timePicker.jsx
@@ -24,22 +24,24 @@ const TimePicker = styled(
           <div>
             <Input
               type="time"
+              key={start}
+              defaultValue={start}
               className="rdrDateDisplayItem"
               data-test-id="startTime"
               disabled={disabled}
-              value={start}
-              onChange={onChangeStart}
+              onBlur={onChangeStart}
             />
           </div>
 
           <div>
             <Input
               type="time"
+              defaultValue={end}
+              key={end}
               className="rdrDateDisplayItem"
               data-test-id="endTime"
               disabled={disabled}
-              value={end}
-              onChange={onChangeEnd}
+              onBlur={onChangeEnd}
             />
           </div>
         </div>
diff --git a/src/sentry/static/sentry/app/utils/dates.jsx b/src/sentry/static/sentry/app/utils/dates.jsx
index a72b7081da..18120291a7 100644
--- a/src/sentry/static/sentry/app/utils/dates.jsx
+++ b/src/sentry/static/sentry/app/utils/dates.jsx
@@ -5,12 +5,24 @@ import ConfigStore from 'app/stores/configStore';
 // TODO(billy): Move to TimeRangeSelector specific utils
 export const DEFAULT_DAY_START_TIME = '00:00:00';
 export const DEFAULT_DAY_END_TIME = '23:59:59';
-const DATE_FORMAT_NO_TIMEZONE = 'YYYY-MM-DD HH:mm:ss';
+const DATE_FORMAT_NO_TIMEZONE = 'YYYY/MM/DD HH:mm:ss';
 
 function getParser(local = false) {
   return local ? moment : moment.utc;
 }
 
+/**
+ * Checks if string is valid time. Only accepts 24 hour format.
+ *
+ * Chrome's time input will (at least for US locale), allow you to input 12
+ * hour format with AM/PM but the raw value is in 24 hour.
+ *
+ * Safari does not do any validation so you could get a value of > 24 hours
+ */
+export function isValidTime(str) {
+  return moment(str, 'HH:mm', true).isValid();
+}
+
 /**
  * Given a date object, format in datetime in UTC
  * given: Tue Oct 09 2018 00:00:00 GMT-0700 (Pacific Daylight Time)
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx b/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx
index 72c2bd5c37..a93117c095 100644
--- a/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx
+++ b/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx
@@ -101,7 +101,7 @@ describe('DateRange', function() {
     it('changes start time for existing date', function() {
       wrapper
         .find('input[data-test-id="startTime"]')
-        .simulate('change', {target: {value: '11:00'}});
+        .simulate('blur', {target: {value: '11:00'}});
 
       expect(onChange).toHaveBeenLastCalledWith({
         start: new Date('2017-10-13T15:00:00.000Z'),
@@ -112,7 +112,7 @@ describe('DateRange', function() {
     it('changes end time for existing date', function() {
       wrapper
         .find('input[data-test-id="endTime"]')
-        .simulate('change', {target: {value: '12:00'}});
+        .simulate('blur', {target: {value: '12:00'}});
 
       expect(onChange).toHaveBeenLastCalledWith({
         start: new Date('2017-10-14T02:38:00.000Z'),
@@ -172,7 +172,7 @@ describe('DateRange', function() {
     it('changes utc start time for existing date', function() {
       wrapper
         .find('input[data-test-id="startTime"]')
-        .simulate('change', {target: {value: '11:00'}});
+        .simulate('blur', {target: {value: '11:00'}});
 
       // Initial start date  is 2017-10-13T22:38:00-0400
       expect(onChange).toHaveBeenLastCalledWith({
@@ -184,7 +184,7 @@ describe('DateRange', function() {
     it('changes end time for existing date', function() {
       wrapper
         .find('input[data-test-id="endTime"]')
-        .simulate('change', {target: {value: '12:00'}});
+        .simulate('blur', {target: {value: '12:00'}});
 
       // Initial end time is 2017-10-16T22:38:00-0400
       // Setting this to 12:00 means 2017-10-16T12:00-0400
