commit 421260b91ce770ac799c31cfbd3b3a308b31a949
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Dec 6 12:01:21 2019 -0800

    feat(ui): Make Metric Alert chart work again [SEN-1226] (#15983)
    
    This makes Metric Alert chart work again after the inline Triggers refactor
    
    Fixes SEN-1226

diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
index 3470c9fcca..04ac9fe4ad 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
@@ -22,7 +22,7 @@ import withApi from 'app/utils/withApi';
 import withConfig from 'app/utils/withConfig';
 import withProject from 'app/utils/withProject';
 
-import {IncidentRule, Trigger} from '../types';
+import {AlertRuleAggregations, IncidentRule, Trigger} from '../types';
 import RuleConditionsForm from '../ruleConditionsForm';
 import FormModel from '../../components/forms/model';
 import {addOrUpdateRule} from '../actions';
@@ -45,14 +45,26 @@ type State = {
 
   // `null` means loading
   availableActions: MetricAction[] | null;
+
+  // Rule conditions form inputs
+  // Needed for TriggersChart
+  query: string;
+  aggregations: AlertRuleAggregations[];
+  timeWindow: number;
 } & AsyncComponent['state'];
 
 const isEmpty = (str: unknown): boolean => str === '' || !defined(str);
 
 class RuleFormContainer extends AsyncComponent<Props, State> {
   getDefaultState(): State {
+    const {rule} = this.props;
+
     return {
       ...super.getDefaultState(),
+
+      aggregations: rule.aggregations,
+      query: rule.query || '',
+      timeWindow: rule.timeWindow,
       triggerErrors: new Map(),
       availableActions: null,
       triggers: this.props.rule.triggers,
@@ -126,6 +138,14 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
     return triggerErrors;
   }
 
+  handleFieldChange = (name: string, value: unknown) => {
+    if (name === 'aggregations') {
+      this.setState({[name]: [value] as AlertRuleAggregations[]});
+    } else if (['query', 'timeWindow'].includes(name)) {
+      this.setState({[name]: value});
+    }
+  };
+
   handleSubmit = async (
     _data: Partial<IncidentRule>,
     _onSubmitSuccess,
@@ -218,7 +238,7 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
       params,
       onSubmitSuccess,
     } = this.props;
-    const {triggers} = this.state;
+    const {query, aggregations, timeWindow, triggers} = this.state;
 
     return (
       <Form
@@ -235,16 +255,16 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
         saveOnBlur={false}
         onSubmit={this.handleSubmit}
         onSubmitSuccess={onSubmitSuccess}
+        onFieldChange={this.handleFieldChange}
       >
-        {/* TODO(billy): Temp */}
         <TriggersChart
           api={api}
           config={config}
           organization={organization}
           projects={this.state.projects}
-          query={rule.query}
-          aggregations={rule.aggregations}
-          timeWindow={rule.timeWindow}
+          query={query}
+          aggregations={aggregations}
+          timeWindow={timeWindow}
         />
 
         <RuleConditionsForm organization={organization} />
