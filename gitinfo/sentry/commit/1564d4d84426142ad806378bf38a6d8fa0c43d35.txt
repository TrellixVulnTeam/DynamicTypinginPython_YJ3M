commit 1564d4d84426142ad806378bf38a6d8fa0c43d35
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Mar 5 17:01:39 2018 -0800

    feat(ownership): Calculation if an Event matches Rules

diff --git a/src/sentry/ownership/grammar.py b/src/sentry/ownership/grammar.py
index 5444bb48c8..1eac96e75d 100644
--- a/src/sentry/ownership/grammar.py
+++ b/src/sentry/ownership/grammar.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from collections import namedtuple
+from fnmatch import fnmatch
 from parsimonious.grammar import Grammar, NodeVisitor
 from parsimonious.exceptions import ParseError  # noqa
 
@@ -58,6 +59,9 @@ class Rule(namedtuple('Rule', 'matcher owners')):
             [Owner.load(o) for o in data['owners']],
         )
 
+    def test(self, data):
+        return self.matcher.test(data)
+
 
 class Matcher(namedtuple('Matcher', 'type pattern')):
     """
@@ -87,6 +91,35 @@ class Matcher(namedtuple('Matcher', 'type pattern')):
             data['pattern'],
         )
 
+    def test(self, data):
+        return getattr(self, 'test_%s' % self.type)(data)
+
+    def test_url(self, data):
+        try:
+            url = data['sentry.interfaces.Http']['url']
+        except KeyError:
+            return False
+        return fnmatch(url, self.pattern)
+
+    def test_path(self, data):
+        for frame in _iter_frames(data):
+            try:
+                filename = frame['filename']
+            except KeyError:
+                try:
+                    filename = frame['abs_path']
+                except KeyError:
+                    continue
+
+            # fnmatch keeps it's own internal cache, so
+            # there isn't any optimization we can do here
+            # by using fnmatch.translate before and compiling
+            # our own regex.
+            if fnmatch(filename, self.pattern):
+                return True
+
+        return False
+
 
 class Owner(namedtuple('Owner', 'type identifier')):
     """
@@ -158,6 +191,26 @@ class OwnershipVisitor(NodeVisitor):
         return children or node
 
 
+def _iter_frames(data):
+    try:
+        for frame in data['sentry.interfaces.Stacktrace']['frames']:
+            yield frame
+    except KeyError:
+        pass
+
+    try:
+        values = data['sentry.interfaces.Exception']['values']
+    except KeyError:
+        return
+
+    for value in values:
+        try:
+            for frame in value['stacktrace']['frames']:
+                yield frame
+        except KeyError:
+            continue
+
+
 def parse_rules(data):
     """Convert a raw text input into a Rule tree"""
     tree = ownership_grammar.parse(data)
diff --git a/tests/sentry/ownership/test_grammar.py b/tests/sentry/ownership/test_grammar.py
index 7ab1ae480a..8c9d315e85 100644
--- a/tests/sentry/ownership/test_grammar.py
+++ b/tests/sentry/ownership/test_grammar.py
@@ -60,3 +60,60 @@ def test_load_schema():
         Matcher('path', '*.js'),
         [Owner('team', 'frontend')]
     )]
+
+
+def test_matcher_test_url():
+    data = {
+        'sentry.interfaces.Http': {
+            'url': 'http://example.com/foo.js',
+        }
+    }
+
+    assert Matcher('url', '*.js').test(data)
+    assert Matcher('url', 'http://*.com/foo.js').test(data)
+    assert not Matcher('url', '*.py').test(data)
+    assert not Matcher('url', '*.jsx').test(data)
+    assert not Matcher('path', '*.js').test(data)
+    assert not Matcher('url', '*.js').test({})
+
+
+def test_matcher_test_exception():
+    data = {
+        'sentry.interfaces.Exception': {
+            'values': [{
+                'stacktrace': {
+                    'frames': [
+                        {'filename': 'foo/file.py'},
+                        {'abs_path': '/usr/local/src/other/app.py'},
+                    ],
+                },
+            }],
+        }
+    }
+
+    assert Matcher('path', '*.py').test(data)
+    assert Matcher('path', 'foo/*.py').test(data)
+    assert Matcher('path', '/usr/local/src/*/app.py').test(data)
+    assert not Matcher('path', '*.js').test(data)
+    assert not Matcher('path', '*.jsx').test(data)
+    assert not Matcher('url', '*.py').test(data)
+    assert not Matcher('path', '*.py').test({})
+
+
+def test_matcher_test_stacktrace():
+    data = {
+        'sentry.interfaces.Stacktrace': {
+            'frames': [
+                {'filename': 'foo/file.py'},
+                {'abs_path': '/usr/local/src/other/app.py'},
+            ],
+        }
+    }
+
+    assert Matcher('path', '*.py').test(data)
+    assert Matcher('path', 'foo/*.py').test(data)
+    assert Matcher('path', '/usr/local/src/*/app.py').test(data)
+    assert not Matcher('path', '*.js').test(data)
+    assert not Matcher('path', '*.jsx').test(data)
+    assert not Matcher('url', '*.py').test(data)
+    assert not Matcher('path', '*.py').test({})
