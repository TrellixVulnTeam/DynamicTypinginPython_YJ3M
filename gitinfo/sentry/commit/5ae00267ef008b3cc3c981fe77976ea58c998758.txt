commit 5ae00267ef008b3cc3c981fe77976ea58c998758
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 29 17:52:36 2015 -0700

    Basic fetching of new-style docs and rendering

diff --git a/src/sentry/api/endpoints/project_docs.py b/src/sentry/api/endpoints/project_docs.py
index 871783591a..6000bac652 100644
--- a/src/sentry/api/endpoints/project_docs.py
+++ b/src/sentry/api/endpoints/project_docs.py
@@ -2,22 +2,18 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
+from sentry import options
 from sentry.api.bases.project import ProjectEndpoint
-from sentry.constants import PLATFORM_LIST
 from sentry.models import ProjectKey
 
 
 class ProjectDocsEndpoint(ProjectEndpoint):
     def get(self, request, project):
+        data = options.get('sentry:docs')
         project_key = ProjectKey.get_default(project)
 
         context = {
-            'platforms': [
-                {
-                    'id': platform,
-                }
-                for platform in PLATFORM_LIST
-            ],
+            'platforms': data['platforms'],
         }
         if project_key:
             context['dsn'] = project_key.dsn_private
diff --git a/src/sentry/api/endpoints/project_docs_platform.py b/src/sentry/api/endpoints/project_docs_platform.py
index f12973dd31..8bc22e7acb 100644
--- a/src/sentry/api/endpoints/project_docs_platform.py
+++ b/src/sentry/api/endpoints/project_docs_platform.py
@@ -1,18 +1,12 @@
 from __future__ import absolute_import
 
-from django.core.cache import cache
 from rest_framework.response import Response
 
-from sentry import http
+from sentry import options
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.constants import PLATFORM_LIST
 from sentry.models import ProjectKey
 
-DOC_URL = 'https://docs.getsentry.com/hosted/_wizards/{platform}.json'
-
-PLATFORM_SET = frozenset(PLATFORM_LIST)
-
 
 def replace_keys(html, project_key):
     if project_key is None:
@@ -27,23 +21,15 @@ def replace_keys(html, project_key):
 
 class ProjectDocsPlatformEndpoint(ProjectEndpoint):
     def get(self, request, project, platform):
-        if platform not in PLATFORM_SET:
+        data = options.get('sentry:docs:{}'.format(platform))
+        if not data:
             raise ResourceDoesNotExist
 
-        cache_key = 'docs:{}'.format(platform)
-        result = cache.get(cache_key)
-        if result is None:
-            session = http.build_session()
-            result = session.get(DOC_URL.format(platform=platform)).json()
-            cache.set(cache_key, result, 3600)
-
         project_key = ProjectKey.get_default(project)
 
         return Response({
-            'id': platform,
-            'name': result['name'],
-            'html': replace_keys(result['body'], project_key),
-            'sdk': result['client_lib'],
-            'isFramework': result['is_framework'],
-            'link': result['doc_link'],
+            'id': data['id'],
+            'name': data['name'],
+            'html': replace_keys(data['html'], project_key),
+            'link': data['link'],
         })
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 8e248e9b1d..57909ce136 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -374,6 +374,7 @@ CELERY_IMPORTS = (
     'sentry.tasks.ping',
     'sentry.tasks.post_process',
     'sentry.tasks.process_buffer',
+    'sentry.tasks.sync_docs',
 )
 CELERY_QUEUES = [
     Queue('default', routing_key='default'),
@@ -433,6 +434,14 @@ CELERYBEAT_SCHEDULE = {
             'queue': 'counters-0',
         }
     },
+    'sync-docs': {
+        'task': 'sentry.tasks.options.sync_docs',
+        'schedule': timedelta(seconds=3600),
+        'options': {
+            'expires': 3600,
+            'queue': 'update',
+        }
+    },
     'sync-options': {
         'task': 'sentry.tasks.options.sync_options',
         'schedule': timedelta(seconds=10),
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index e5cb1d85c2..b6eeac0d56 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -75,37 +75,6 @@ MEMBER_TYPES = (
 # a User instance.
 EMPTY_PASSWORD_VALUES = ('!', '', '$')
 
-PLATFORM_LIST = sorted([
-    'python',
-    'python-bottle',
-    'python-celery',
-    'python-django',
-    'python-flask',
-    'python-pylons',
-    'python-pyramid',
-    'python-tornado',
-    'javascript',
-    'node',
-    'node-express',
-    'node-koa',
-    'node-connect',
-    'php',
-    'php-laravel',
-    'php-monolog',
-    'php-symfony2',
-    'ruby',
-    'ruby-rack',
-    'ruby-rails',
-    'objective-c',
-    'java',
-    'java-log4j',
-    'java-log4j2',
-    'java-logback',
-    'java-appengine',
-    'c-sharp',
-    'go',
-])
-
 # Normalize counts to the 15 minute marker. This value MUST be less than 60. A
 # value of 0 would store counts for every minute, and is the lowest level of
 # accuracy provided.
diff --git a/src/sentry/management/commands/create_sample_event.py b/src/sentry/management/commands/create_sample_event.py
index b66219370a..b617a1ce31 100644
--- a/src/sentry/management/commands/create_sample_event.py
+++ b/src/sentry/management/commands/create_sample_event.py
@@ -20,7 +20,6 @@ class Command(BaseCommand):
 
     def handle(self, **options):
         from django.conf import settings
-        from sentry.constants import PLATFORM_LIST
         from sentry.models import Project
         from sentry.utils.samples import create_sample_event
 
@@ -35,9 +34,6 @@ class Command(BaseCommand):
             else:
                 raise CommandError('Project must be specified as team-slug/project-slug or a project id')
 
-        if options['platform'] not in PLATFORM_LIST:
-            raise CommandError('Invalid platform. Must specify one of: %s' % ', '.join(PLATFORM_LIST))
-
         platform = options['platform']
         event = create_sample_event(project, platform)
         if not event:
diff --git a/src/sentry/management/commands/repair.py b/src/sentry/management/commands/repair.py
index 9609b6893e..b562da9a2c 100644
--- a/src/sentry/management/commands/repair.py
+++ b/src/sentry/management/commands/repair.py
@@ -14,10 +14,12 @@ class Command(BaseCommand):
     help = 'Attempts to repair any invalid data within Sentry'
 
     def handle(self, **options):
+        print("Forcing documentation sync")
+        from sentry.tasks.sync_docs import sync_docs
+        sync_docs()
+
         from sentry.models import Project, ProjectKey
         from sentry.utils.query import RangeQuerySetWrapperWithProgressBar
-
-        # Create missing project keys
         print("Creating missing project keys")
         queryset = Project.objects.all()
         for project in RangeQuerySetWrapperWithProgressBar(queryset):
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 4e8dc50f8f..d417738ced 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -17,7 +17,6 @@ from django.db.models import F, Q
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.constants import PLATFORM_LIST
 from sentry.db.models import (
     BaseManager, BoundedPositiveIntegerField, FlexibleForeignKey, Model,
     sane_repr
@@ -74,11 +73,6 @@ class Project(Model):
     Projects are permission based namespaces which generally
     are the top level entry point for all data.
     """
-    PLATFORM_CHOICES = tuple(
-        (p, p)
-        for p in PLATFORM_LIST
-    ) + (('other', 'Other'),)
-
     slug = models.SlugField(null=True)
     name = models.CharField(max_length=200)
     organization = FlexibleForeignKey('sentry.Organization')
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 8d11b8fcb0..ad5229ab81 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -18,6 +18,7 @@ import ProjectDashboard from "./views/projectDashboard";
 import ProjectEvents from "./views/projectEvents";
 import ProjectDetails from "./views/projectDetails";
 import ProjectInstall from "./views/projectInstall";
+import ProjectInstallOverview from "./views/projectInstall/overview";
 import ProjectInstallPlatform from "./views/projectInstall/platform";
 import ProjectReleases from "./views/projectReleases";
 import ProjectSettings from "./views/projectSettings";
@@ -49,8 +50,10 @@ var routes = (
           <Route name="releaseArtifacts" path="artifacts/" handler={ReleaseArtifacts} />
         </Route>
         <Route name="projectSettings" path="settings/" handler={ProjectSettings}>
-          <Route name="projectInstall" path="install/" handler={ProjectInstall}/>
-          <Route name="projectInstallPlatform" path="install/:platform/" handler={ProjectInstallPlatform}/>
+          <Route name="projectInstall" path="install/" handler={ProjectInstall}>
+            <DefaultRoute name="projectInstallOverview" handler={ProjectInstallOverview}/>
+            <Route name="projectInstallPlatform" path="install/:platform/" handler={ProjectInstallPlatform}/>
+          </Route>
         </Route>
         <Route name="groupDetails" path="group/:groupId/" handler={GroupDetails}
                ignoreScrollBehavior>
diff --git a/src/sentry/static/sentry/app/views/projectInstall/index.jsx b/src/sentry/static/sentry/app/views/projectInstall/index.jsx
index 214fbbb46d..56165749ca 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/index.jsx
@@ -1,12 +1,11 @@
 import React from "react";
-import {Link} from "react-router";
+import Router from "react-router";
 
 import api from "../../api";
-import AutoSelectText from "../../components/autoSelectText";
 import LoadingError from "../../components/loadingError";
 import LoadingIndicator from "../../components/loadingIndicator";
 
-var ProjectInstall = React.createClass({
+const ProjectInstall = React.createClass({
   contextTypes: {
     router: React.PropTypes.func
   },
@@ -42,23 +41,6 @@ var ProjectInstall = React.createClass({
     });
   },
 
-  getPlatformLink(root, platform, display) {
-    let params = this.context.router.getCurrentParams();
-    return (
-      <li className={`${root} ${platform}`} key={platform}>
-        <span className={`platformicon platformicon-${platform}`}/>
-        <Link to="projectInstallPlatform"
-              params={Object.assign({}, params, {platform: platform})}>
-          {display}
-        </Link>
-      </li>
-    );
-  },
-
-  toggleDsn() {
-    this.setState({showDsn: !this.state.showDsn});
-  },
-
   render() {
     if (this.state.loading)
       return <LoadingIndicator />;
@@ -66,142 +48,9 @@ var ProjectInstall = React.createClass({
       return <LoadingError onRetry={this.fetchData} />;
 
     let data = this.state.data;
-    let params = Object.assign({}, this.context.router.getCurrentParams());
-
     return (
-      <div>
-        <h1>Configure your application</h1>
-
-        <p>Get started by selecting the platform or language that powers your application.</p>
-
-        {this.state.showDsn ?
-          <div>
-            <h3>DSN</h3>
-
-            <div className="control-group">
-              <label>DSN</label>
-              <AutoSelectText className="form-control disabled">{data.dsn}</AutoSelectText>
-            </div>
-
-            <div className="control-group">
-              <label>Public DSN</label>
-              <AutoSelectText className="form-control disabled">{data.dsnPublic}</AutoSelectText>
-              <div className="help-block">Your public DSN should be used with JavaScript and ActionScript.</div>
-            </div>
-          </div>
-        :
-          <p><small>Already have things setup? <a onClick={this.toggleDsn}>Get your DSN</a>.</small></p>
-        }
-
-        <h3>Popular</h3>
-
-        <ul className="client-platform-list">
-          {this.getPlatformLink('python', 'python', 'Python')}
-          {this.getPlatformLink('javascript', 'javascript', 'JavaScript')}
-          {this.getPlatformLink('ruby', 'ruby', 'Ruby')}
-          {this.getPlatformLink('ruby', 'rails', 'Rails')}
-          {this.getPlatformLink('php', 'php', 'PHP')}
-          {this.getPlatformLink('python', 'django', 'Django')}
-          {this.getPlatformLink('python', 'flask', 'Flask')}
-        </ul>
-
-        <h3>Frameworks</h3>
-
-        <h3>Languages</h3>
-
-        <ul className="client-platform-list">
-          <li className="bottle python">
-            <span className="platformicon platformicon-generic"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"python-bottle"})}>Bottle</Link>
-          </li>
-          <li className="celery python">
-            <span className="platformicon platformicon-generic"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"python-celery"})}>Celery</Link>
-          </li>
-          <li className="flask python">
-            <span className="platformicon platformicon-generic"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"python-flask"})}>Flask</Link>
-          </li>
-          <li className="pylons python">
-            <span className="platformicon platformicon-generic"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"python-pylons"})}>Pylons</Link>
-          </li>
-          <li className="pyramid python">
-            <span className="platformicon platformicon-generic"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"python-pyramid"})}>Pyramid</Link>
-          </li>
-          <li className="tornado python">
-            <span className="platformicon platformicon-generic"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"python-tornado"})}>Tornado</Link>
-          </li>
-          <li className="node-js">
-            <span className="platformicon platformicon-node-js"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"node"})}>Node.js</Link>
-          </li>
-          <li className="express node-js">
-            <span className="platformicon platformicon-generic"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"node-express"})}>Express</Link>
-          </li>
-          <li className="koa node-js">
-            <span className="platformicon platformicon-generic"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"node-koa"})}>Koa</Link>
-          </li>
-          <li className="connect node-js">
-            <span className="platformicon platformicon-generic"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"node-connect"})}>Connect</Link>
-          </li>
-          <li className="laravel php">
-            <span className="platformicon platformicon-generic"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"php-laravel"})}>Laravel</Link>
-          </li>
-          <li className="monolog php">
-            <span className="platformicon platformicon-generic"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"php-monolog"})}>Monolog</Link>
-          </li>
-          <li className="symfony2 php">
-            <span className="platformicon platformicon-generic"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"php-symfony2"})}>Symfony2</Link>
-          </li>
-          <li className="rack ruby">
-            <span className="platformicon platformicon-generic"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"ruby-rack"})}>Rack</Link>
-          </li>
-          <li className="objective-c">
-            <span className="platformicon platformicon-apple"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"objective-c"})}>Objective-C</Link>
-          </li>
-          <li className="log4j java">
-            <span className="platformicon platformicon-generic"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"java-log4j"})}>Log4j</Link>
-          </li>
-          <li className="log4j2 java">
-            <span className="platformicon platformicon-generic"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"java-log4j2"})}>Log4j 2</Link>
-          </li>
-          <li className="logback java">
-            <span className="platformicon platformicon-generic"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"java-logback"})}>Logback</Link>
-          </li>
-          <li className="app-engine">
-            <span className="platformicon platformicon-generic"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"java-appengine"})}>App Engine</Link>
-          </li>
-          <li className="c-sharp">
-            <span className="platformicon platformicon-csharp"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"c-sharp"})}>C#</Link></li>
-          <li className="go">
-            <span className="platformicon platformicon-go"/>
-            <Link to="projectInstallPlatform" params={Object.assign({}, params, {platform:"go"})}>Go</Link>
-          </li>
-        </ul>
-
-        <p>
-          <em>Don't see your platform listed here?</em> For a complete list of client integrations,
-          please visit see <a href="http://docs.getsentry.com">our in-depth documentation</a>.
-        </p>
-
-        <Link to="stream" params={params} className="btn btn-lg btn-primary">Skip this step</Link>
-      </div>
+      <Router.RouteHandler
+          platformData={data} {...this.props} />
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/views/projectInstall/overview.jsx b/src/sentry/static/sentry/app/views/projectInstall/overview.jsx
new file mode 100644
index 0000000000..cba805b09d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectInstall/overview.jsx
@@ -0,0 +1,113 @@
+import React from "react";
+import {Link} from "react-router";
+
+import AutoSelectText from "../../components/autoSelectText";
+
+const ProjectInstallOverview = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  getInitialState() {
+    return {
+      data: this.props.platformData
+    };
+  },
+
+  getIntegrationLink(root, platform, display) {
+    let params = this.context.router.getCurrentParams();
+    return (
+      <li className={`${root} ${platform}`} key={platform}>
+        <span className={`platformicon platformicon-${platform}`}/>
+        <Link to="projectInstallPlatform"
+              params={Object.assign({}, params, {platform: platform})}>
+          {display}
+        </Link>
+      </li>
+    );
+  },
+
+  toggleDsn() {
+    this.setState({showDsn: !this.state.showDsn});
+  },
+
+  render() {
+    let data = this.state.data;
+    let params = Object.assign({}, this.context.router.getCurrentParams());
+
+    let frameworkList = [];
+    let languageList = [];
+    data.platforms.forEach((platform) => {
+      platform.integrations.forEach((integration) => {
+        if (integration.type === 'framework')
+          frameworkList.push([platform, integration]);
+        else if (integration.type === 'language')
+          languageList.push([platform, integration]);
+      });
+    });
+
+    return (
+      <div>
+        <h1>Configure your application</h1>
+
+        <p>Get started by selecting the platform or language that powers your application.</p>
+
+        {this.state.showDsn ?
+          <div>
+            <h3>DSN</h3>
+
+            <div className="control-group">
+              <label>DSN</label>
+              <AutoSelectText className="form-control disabled">{data.dsn}</AutoSelectText>
+            </div>
+
+            <div className="control-group">
+              <label>Public DSN</label>
+              <AutoSelectText className="form-control disabled">{data.dsnPublic}</AutoSelectText>
+              <div className="help-block">Your public DSN should be used with JavaScript and ActionScript.</div>
+            </div>
+          </div>
+        :
+          <p><small>Already have things setup? <a onClick={this.toggleDsn}>Get your DSN</a>.</small></p>
+        }
+
+        <h3>Popular</h3>
+
+        <ul className="client-platform-list">
+          {this.getIntegrationLink('python', 'python', 'Python')}
+          {this.getIntegrationLink('javascript', 'javascript', 'JavaScript')}
+          {this.getIntegrationLink('ruby', 'ruby', 'Ruby')}
+          {this.getIntegrationLink('ruby', 'rails', 'Rails')}
+          {this.getIntegrationLink('php', 'php', 'PHP')}
+          {this.getIntegrationLink('python', 'django', 'Django')}
+          {this.getIntegrationLink('python', 'flask', 'Flask')}
+        </ul>
+
+        <h3>Frameworks</h3>
+        <ul className="client-platform-list">
+          {frameworkList.map((item) => {
+            let [platform, integration] = item;
+            return this.getIntegrationLink(platform.id, integration.id, integration.name);
+          })}
+        </ul>
+
+        <h3>Languages</h3>
+        <ul className="client-platform-list">
+          {languageList.map((item) => {
+            let [platform, integration] = item;
+            return this.getIntegrationLink(platform.id, integration.id, integration.name);
+          })}
+        </ul>
+
+        <p>
+          <em>Don't see your platform listed here?</em> For a complete list of client integrations,
+          please visit see <a href="http://docs.getsentry.com">our in-depth documentation</a>.
+        </p>
+
+        <Link to="stream" params={params} className="btn btn-lg btn-primary">Skip this step</Link>
+      </div>
+    );
+  }
+});
+
+export default ProjectInstallOverview;
diff --git a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
index 237cd156a5..f9a44fac19 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
@@ -5,7 +5,6 @@ import api from "../../api";
 import LanguageNav from "./languageNav";
 import LoadingError from "../../components/loadingError";
 import LoadingIndicator from "../../components/loadingIndicator";
-import jQuery from "jquery";
 import RouteMixin from "../../mixins/routeMixin";
 
 var ProjectInstallPlatform = React.createClass({
@@ -16,9 +15,23 @@ var ProjectInstallPlatform = React.createClass({
   mixins: [RouteMixin],
 
   getInitialState() {
+    let params = this.context.router.getCurrentParams();
+    var key = params.platform;
+    var integration;
+    this.props.platformData.platforms.forEach((platform) => {
+      if (integration) {
+        return;
+      }
+      integration = platform.integrations.filter((item) => {
+        return item.id == key;
+      });
+    });
+
     return {
       loading: true,
-      data: null
+      error: false,
+      integration: integration,
+      html: null
     };
   },
 
@@ -26,18 +39,8 @@ var ProjectInstallPlatform = React.createClass({
     this.fetchData();
   },
 
-  componentWillMount() {
-    jQuery(document.body).addClass("white-bg");
-  },
-
-  componentWillUnmount() {
-    jQuery(document.body).removeClass("white-bg");
-  },
-
   routeDidChange() {
-    this.setState({
-      loading: true
-    }, this.fetchData);
+    this.setState(this.getInitialState(), this.fetchData);
   },
 
   fetchData() {
@@ -47,11 +50,11 @@ var ProjectInstallPlatform = React.createClass({
         this.setState({
           loading: false,
           error: false,
-          data: data
+          html: data.html
         });
       },
       error: () => {
-        this.setSTate({
+        this.setState({
           loading: false,
           error: true
         });
@@ -72,30 +75,36 @@ var ProjectInstallPlatform = React.createClass({
   },
 
   render() {
-    if (this.state.loading)
-      return <LoadingIndicator />;
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
-
     let params = this.context.router.getCurrentParams();
     let {platform} = params;
-    let data = this.state.data;
+    let integration = this.state.integration;
 
     return (
       <div className="install row">
         <div className="install-content col-md-10">
           <div className="pull-right">
-            <a href={data.link} className="btn btn-default">Full Documentation</a>
+            <a href={integration.link} className="btn btn-default">Full Documentation</a>
           </div>
 
-          <h1>Configure {data.name}</h1>
+          <h1>Configure {integration.name}</h1>
 
           <div>
             <p>
-              This is a quick getting started guide. For in-depth instructions on integrating Sentry with {data.name}, view <a href={data.link}>our complete documentation</a>.
+              This is a quick getting started guide. For in-depth instructions on integrating Sentry with {integration.name}, view <a href={integration.link}>our complete documentation</a>.
             </p>
-            <div dangerouslySetInnerHTML={{__html: data.html}}/>
-            <Link to="stream" params={params} className="btn btn-primary btn-lg">Continue</Link>
+
+            {this.state.loading ?
+              <LoadingIndicator />
+            : (this.state.error ?
+              <LoadingError onRetry={this.fetchData} />
+            :
+              <div>
+                <div dangerouslySetInnerHTML={{__html: this.state.html}}/>
+
+                <Link to="stream" params={params} className="btn btn-primary btn-lg">Continue</Link>
+              </div>
+            )}
+
           </div>
         </div>
         <div className="install-sidebar col-md-2">
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index c14dd29f35..5d12ad8a7e 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -11,7 +11,6 @@ from __future__ import absolute_import, print_function
 from celery.utils.log import get_task_logger
 from django.db import IntegrityError, transaction
 
-from sentry.constants import PLATFORM_LIST
 from sentry.plugins import plugins
 from sentry.tasks.base import instrumented_task
 from sentry.utils import metrics
@@ -21,13 +20,12 @@ logger = get_task_logger(__name__)
 
 
 def _capture_stats(event, is_new):
+    # TODO(dcramer): limit platforms to... something?
     group = event.group
     platform = group.platform
     if not platform:
         return
     platform = platform.split('-', 1)[0].split('_', 1)[0]
-    if platform not in PLATFORM_LIST:
-        return
 
     if is_new:
         metrics.incr('events.unique')
diff --git a/src/sentry/tasks/sync_docs.py b/src/sentry/tasks/sync_docs.py
new file mode 100644
index 0000000000..7dba8d99c2
--- /dev/null
+++ b/src/sentry/tasks/sync_docs.py
@@ -0,0 +1,56 @@
+from __future__ import absolute_import, print_function
+
+from sentry.tasks.base import instrumented_task
+
+BASE_URL = 'https://docs.getsentry.com/hosted/_platforms/{}'
+
+
+def get_integration_id(platform_id, integration_id):
+    if integration_id == '_self':
+        return platform_id
+    return '{}-{}'.format(platform_id, integration_id)
+
+
+@instrumented_task(name='sentry.tasks.sync_docs', queue='update')
+def sync_docs():
+    from sentry import http, options
+
+    session = http.build_session()
+
+    data = session.get(BASE_URL.format('_index.json')).json()
+    platform_list = []
+    for platform_id, integrations in data['platforms'].iteritems():
+        platform_list.append({
+            'id': platform_id,
+            'name': integrations['_self']['name'],
+            'integrations': [
+                {
+                    'id': get_integration_id(platform_id, i_id),
+                    'name': i_data['name'],
+                    'type': i_data['type'],
+                    'link': i_data['doc_link'],
+                } for i_id, i_data in integrations.iteritems()
+            ],
+        })
+
+    options.set('sentry:docs', {'platforms': platform_list})
+
+    for platform_id, platform_data in data['platforms'].iteritems():
+        for integration_id, integration in platform_data.iteritems():
+            sync_integration(platform_id, integration_id, integration['details'])
+
+
+def sync_integration(platform_id, integration_id, path):
+    from sentry import http, options
+
+    session = http.build_session()
+
+    data = session.get(BASE_URL.format(path)).json()
+
+    key = get_integration_id(platform_id, integration_id)
+    options.set('sentry:docs:{}'.format(key), {
+        'id': key,
+        'name': data['name'],
+        'html': data['body'],
+        'link': data['doc_link'],
+    })
