commit e694cc91c54bfac852f35bb35dd0abca4ca6b45c
Author: Jan Michael Auer <jan.auer@sentry.io>
Date:   Fri Feb 28 19:20:29 2020 +0100

    ref(native): Do not wait when querying symbolicator (#17378)

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 16a2a4e1fb..6a69eea4c1 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1772,8 +1772,7 @@ SYMBOLICATOR_PROCESS_EVENT_HARD_TIMEOUT = 1800
 # Log warning when process_event is taking more than n seconds to process event
 SYMBOLICATOR_PROCESS_EVENT_WARN_TIMEOUT = 120
 
-# Block process_event for this many seconds to wait for response If too low, a
-# lot of stuff ends up being unnecessarily rescheduled in the sleep queue. If
-# too high, we might have a backlog in the process-event queue that affects
-# events from unrelated platforms
-SYMBOLICATOR_POLL_TIMEOUT = 2
+# Block process_event for this many seconds to wait for a response from
+# symbolicator. If too low, too many events up in the sleep queue. If too high,
+# process_event might backlog and affect events from other platforms.
+SYMBOLICATOR_POLL_TIMEOUT = 4
diff --git a/src/sentry/lang/native/symbolicator.py b/src/sentry/lang/native/symbolicator.py
index d789ff70b1..5a539cd6ab 100644
--- a/src/sentry/lang/native/symbolicator.py
+++ b/src/sentry/lang/native/symbolicator.py
@@ -313,8 +313,6 @@ class SymbolicatorSession(object):
         self.timeout = timeout
         self.session = None
 
-        self._query_params = {"timeout": timeout, "scope": project_id}
-
     def __enter__(self):
         self.open()
         return self
@@ -389,35 +387,41 @@ class SymbolicatorSession(object):
                 time.sleep(wait)
                 wait *= 2.0
 
+    def _create_task(self, path, **kwargs):
+        params = {"timeout": self.timeout, "scope": self.project_id}
+        return self._request(method="post", path=path, params=params, **kwargs)
+
     def symbolicate_stacktraces(self, stacktraces, modules, signal=None):
         json = {"sources": self.sources, "stacktraces": stacktraces, "modules": modules}
 
         if signal:
             json["signal"] = signal
 
-        return self._request("post", "symbolicate", params=self._query_params, json=json)
+        return self._create_task("symbolicate", json=json)
 
     def upload_minidump(self, minidump):
-        return self._request(
-            method="post",
+        return self._create_task(
             path="minidump",
-            params=self._query_params,
             data={"sources": json.dumps(self.sources)},
             files={"upload_file_minidump": minidump},
         )
 
     def upload_applecrashreport(self, report):
-        return self._request(
-            method="post",
+        return self._create_task(
             path="applecrashreport",
-            params=self._query_params,
             data={"sources": json.dumps(self.sources)},
             files={"apple_crash_report": report},
         )
 
     def query_task(self, task_id):
         task_url = "requests/%s" % (task_id,)
-        return self._request("get", task_url, params=self._query_params)
+
+        params = {
+            "timeout": 0,  # Only wait when creating, but not when querying tasks
+            "scope": self.project_id,
+        }
+
+        return self._request("get", task_url, params=params)
 
     def healthcheck(self):
         return self._request("get", "healthcheck")
