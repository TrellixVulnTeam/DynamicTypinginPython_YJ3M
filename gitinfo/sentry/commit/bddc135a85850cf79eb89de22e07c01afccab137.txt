commit bddc135a85850cf79eb89de22e07c01afccab137
Author: Ted Kaemming <ted@kaemming.com>
Date:   Wed Feb 17 14:47:26 2016 -0800

    Don't require a cache to be used with `OptionsStore`.

diff --git a/src/sentry/options/__init__.py b/src/sentry/options/__init__.py
index 9716154912..82e38b9a52 100644
--- a/src/sentry/options/__init__.py
+++ b/src/sentry/options/__init__.py
@@ -7,6 +7,8 @@ sentry.options
 """
 from __future__ import absolute_import, print_function
 
+from sentry.cache import default_cache
+
 from .store import OptionsStore
 from .manager import OptionsManager
 from .manager import (  # NOQA
@@ -18,7 +20,7 @@ __all__ = (
     'get', 'set', 'delete', 'register', 'UnknownOption',
 )
 
-default_store = OptionsStore()
+default_store = OptionsStore(cache=default_cache)
 default_store.connect_signals()
 
 default_manager = OptionsManager(store=default_store)
diff --git a/src/sentry/options/store.py b/src/sentry/options/store.py
index 1b546832d2..90994cb801 100644
--- a/src/sentry/options/store.py
+++ b/src/sentry/options/store.py
@@ -52,9 +52,6 @@ class OptionsStore(object):
     """
 
     def __init__(self, cache=None, ttl=None):
-        if cache is None:
-            from sentry.cache import default_cache
-            cache = default_cache
         self.cache = cache
         self.ttl = ttl
         self.flush_local_cache()
@@ -92,6 +89,9 @@ class OptionsStore(object):
         if value is not None:
             return value
 
+        if self.cache is None:
+            return None
+
         cache_key = key.cache_key
         try:
             value = self.cache.get(cache_key)
@@ -203,8 +203,13 @@ class OptionsStore(object):
 
     def set_cache(self, key, value):
         cache_key = key.cache_key
+
         if key.ttl > 0:
             self._local_cache[cache_key] = _make_cache_value(key, value)
+
+        if self.cache is None:
+            return
+
         try:
             self.cache.set(cache_key, value, self.ttl)
             return True
@@ -231,6 +236,10 @@ class OptionsStore(object):
             del self._local_cache[cache_key]
         except KeyError:
             pass
+
+        if self.cache is None:
+            return
+
         try:
             self.cache.delete(cache_key)
             return True
diff --git a/tests/sentry/options/test_manager.py b/tests/sentry/options/test_manager.py
index 488c612d2a..84f8025a94 100644
--- a/tests/sentry/options/test_manager.py
+++ b/tests/sentry/options/test_manager.py
@@ -5,6 +5,7 @@ from __future__ import absolute_import
 from exam import fixture, around
 from mock import patch
 
+from sentry.cache.redis import RedisCache
 from sentry.models import Option
 from sentry.options.store import OptionsStore
 from sentry.options.manager import (
@@ -15,7 +16,9 @@ from sentry.testutils import TestCase
 
 
 class OptionsManagerTest(TestCase):
-    store = fixture(OptionsStore)
+    @fixture
+    def store(self):
+        return OptionsStore(cache=RedisCache())
 
     @fixture
     def manager(self):
diff --git a/tests/sentry/options/test_store.py b/tests/sentry/options/test_store.py
index 5a1f09387e..d4b8100c33 100644
--- a/tests/sentry/options/test_store.py
+++ b/tests/sentry/options/test_store.py
@@ -6,13 +6,16 @@ from uuid import uuid1
 from exam import fixture, before
 from mock import patch
 
+from sentry.cache.redis import RedisCache
 from sentry.models import Option
 from sentry.options.store import OptionsStore
 from sentry.testutils import TestCase
 
 
 class OptionsStoreTest(TestCase):
-    store = fixture(OptionsStore)
+    @fixture
+    def store(self):
+        return OptionsStore(cache=RedisCache())
 
     @fixture
     def key(self):
@@ -27,11 +30,20 @@ class OptionsStoreTest(TestCase):
 
     def test_simple(self):
         store, key = self.store, self.key
+
         assert store.get(key) is None
         assert store.set(key, 'bar')
         assert store.get(key) == 'bar'
         assert store.delete(key)
+
+    def test_simple_without_cache(self):
+        store = OptionsStore(cache=None)
+        key = self.key
+
         assert store.get(key) is None
+        assert store.set(key, 'bar') is None
+        assert store.get(key) == 'bar'
+        assert store.delete(key) is None
 
     def test_db_and_cache_unavailable(self):
         store, key = self.store, self.key
diff --git a/tests/sentry/tasks/test_beacon.py b/tests/sentry/tasks/test_beacon.py
index 59d25f4dc5..9cc6fe587a 100644
--- a/tests/sentry/tasks/test_beacon.py
+++ b/tests/sentry/tasks/test_beacon.py
@@ -24,7 +24,7 @@ class SendBeaconTest(TestCase):
             'version': {'stable': '1.0.0'},
         })
 
-        assert options.set('system.admin-email', 'foo@example.com')
+        assert options.set('system.admin-email', 'foo@example.com') is not False
         send_beacon()
 
         install_id = options.get('sentry:install-id')
