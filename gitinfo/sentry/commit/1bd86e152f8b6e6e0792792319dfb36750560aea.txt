commit 1bd86e152f8b6e6e0792792319dfb36750560aea
Author: Dan Fuller <dfuller@sentry.io>
Date:   Tue Apr 7 15:36:58 2020 -0700

    refs(mail): Move logic from `MailPlugin.notify_digest` into `MailAdapter` (#18086)
    
    This continues work done in https://github.com/getsentry/sentry/pull/18085 to move the core logic from MailPlugin into MailAdapter. As in the previous pr, I just copied the code exactly in the first commit, and then all modifications to get it working, add tests, etc are in the 2nd commit, so it's likely most useful for review.
    
    This PR moves the notify_digest method over to MailAdapter.

diff --git a/src/sentry/mail/adapter.py b/src/sentry/mail/adapter.py
index a0bec599bf..aa89e24293 100644
--- a/src/sentry/mail/adapter.py
+++ b/src/sentry/mail/adapter.py
@@ -1,13 +1,17 @@
 from __future__ import absolute_import
 
+import itertools
 import logging
 import six
 
+from django.utils import dateformat
 from django.utils.encoding import force_text
 from django.utils.safestring import mark_safe
 
 from sentry import options
+from sentry.digests.utilities import get_digest_metadata, get_personalized_digests
 from sentry.models import Commit, ProjectOption, ProjectOwnership, Release, User
+from sentry.plugins.base.structs import Notification
 from sentry.utils import metrics
 from sentry.utils.cache import cache
 from sentry.utils.committers import get_serialized_event_file_committers
@@ -249,3 +253,57 @@ class MailAdapter(object):
                 context=context,
                 send_to=[user_id],
             )
+
+    def get_digest_subject(self, group, counts, date):
+        return u"{short_id} - {count} new {noun} since {date}".format(
+            short_id=group.qualified_short_id,
+            count=len(counts),
+            noun="alert" if len(counts) == 1 else "alerts",
+            date=dateformat.format(date, "N j, Y, P e"),
+        )
+
+    def notify_digest(self, project, digest):
+        user_ids = self.get_send_to(project)
+        for user_id, digest in get_personalized_digests(project.id, digest, user_ids):
+            start, end, counts = get_digest_metadata(digest)
+
+            # If there is only one group in this digest (regardless of how many
+            # rules it appears in), we should just render this using the single
+            # notification template. If there is more than one record for a group,
+            # just choose the most recent one.
+            if len(counts) == 1:
+                group = six.next(iter(counts))
+                record = max(
+                    itertools.chain.from_iterable(
+                        groups.get(group, []) for groups in six.itervalues(digest)
+                    ),
+                    key=lambda record: record.timestamp,
+                )
+                notification = Notification(record.value.event, rules=record.value.rules)
+                return self.notify(notification)
+
+            context = {
+                "start": start,
+                "end": end,
+                "project": project,
+                "digest": digest,
+                "counts": counts,
+            }
+
+            headers = {"X-Sentry-Project": project.slug}
+
+            group = six.next(iter(counts))
+            subject = self.get_digest_subject(group, counts, start)
+
+            self.add_unsubscribe_link(context, user_id, project, "alert_digest")
+            self._send_mail(
+                subject=subject,
+                template="sentry/emails/digests/body.txt",
+                html_template="sentry/emails/digests/body.html",
+                project=project,
+                reference=project,
+                headers=headers,
+                type="notify.digest",
+                context=context,
+                send_to=[user_id],
+            )
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 5d134e6c0f..70edc96157 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -1,17 +1,12 @@
 from __future__ import absolute_import
 
-import itertools
 import logging
-import six
 
 import sentry
 
-from django.utils import dateformat
 from django.utils.encoding import force_text
 
-from sentry.digests.utilities import get_digest_metadata, get_personalized_digests
 from sentry.mail.adapter import MailAdapter
-from sentry.plugins.base.structs import Notification
 from sentry.plugins.bases.notify import NotificationPlugin
 from sentry.utils.email import MessageBuilder
 from sentry.utils.http import absolute_uri
@@ -62,59 +57,8 @@ class MailPlugin(NotificationPlugin):
     def notify(self, notification, **kwargs):
         return self.mail_adapter.notify(notification, **kwargs)
 
-    def get_digest_subject(self, group, counts, date):
-        return u"{short_id} - {count} new {noun} since {date}".format(
-            short_id=group.qualified_short_id,
-            count=len(counts),
-            noun="alert" if len(counts) == 1 else "alerts",
-            date=dateformat.format(date, "N j, Y, P e"),
-        )
-
     def notify_digest(self, project, digest):
-        user_ids = self.get_send_to(project)
-        for user_id, digest in get_personalized_digests(project.id, digest, user_ids):
-            start, end, counts = get_digest_metadata(digest)
-
-            # If there is only one group in this digest (regardless of how many
-            # rules it appears in), we should just render this using the single
-            # notification template. If there is more than one record for a group,
-            # just choose the most recent one.
-            if len(counts) == 1:
-                group = six.next(iter(counts))
-                record = max(
-                    itertools.chain.from_iterable(
-                        groups.get(group, []) for groups in six.itervalues(digest)
-                    ),
-                    key=lambda record: record.timestamp,
-                )
-                notification = Notification(record.value.event, rules=record.value.rules)
-                return self.notify(notification)
-
-            context = {
-                "start": start,
-                "end": end,
-                "project": project,
-                "digest": digest,
-                "counts": counts,
-            }
-
-            headers = {"X-Sentry-Project": project.slug}
-
-            group = six.next(iter(counts))
-            subject = self.get_digest_subject(group, counts, start)
-
-            self.mail_adapter.add_unsubscribe_link(context, user_id, project, "alert_digest")
-            self._send_mail(
-                subject=subject,
-                template="sentry/emails/digests/body.txt",
-                html_template="sentry/emails/digests/body.html",
-                project=project,
-                reference=project,
-                headers=headers,
-                type="notify.digest",
-                context=context,
-                send_to=[user_id],
-            )
+        return self.mail_adapter.notify_digest(project, digest)
 
     def notify_about_activity(self, activity):
         email_cls = emails.get(activity.type)
diff --git a/tests/sentry/mail/test_adapter.py b/tests/sentry/mail/test_adapter.py
index 6cfbbc5913..ef7893144d 100644
--- a/tests/sentry/mail/test_adapter.py
+++ b/tests/sentry/mail/test_adapter.py
@@ -2,11 +2,17 @@
 
 from __future__ import absolute_import
 
+from datetime import datetime
+
 import mock
+import pytz
 from django.core import mail
 from django.utils import timezone
 from exam import fixture
 
+from sentry.digests.notifications import build_digest, event_to_record
+from sentry.event_manager import EventManager, get_event_type
+from sentry.mail.adapter import MailAdapter
 from sentry.models import (
     OrganizationMember,
     OrganizationMemberTeam,
@@ -17,13 +23,12 @@ from sentry.models import (
     User,
     UserOption,
 )
-from sentry.event_manager import EventManager, get_event_type
-from sentry.mail.adapter import MailAdapter
 from sentry.ownership import grammar
 from sentry.ownership.grammar import dump_schema, Matcher, Owner
 from sentry.plugins.base import Notification
 from sentry.testutils import TestCase
 from sentry.testutils.helpers.datetime import before_now, iso_format
+from sentry.utils.email import MessageBuilder
 
 
 class BaseMailAdapterTest(object):
@@ -418,3 +423,81 @@ class MailAdapterNotifyTest(BaseMailAdapterTest, TestCase):
             data=self.make_event_data("foo.cbl"), project_id=project.id
         )
         self.assert_notify(event_all_users, [user.email])
+
+
+class MailAdapterGetDigestSubjectTest(BaseMailAdapterTest, TestCase):
+    def test_get_digest_subject(self):
+        assert (
+            self.adapter.get_digest_subject(
+                mock.Mock(qualified_short_id="BAR-1"),
+                {mock.sentinel.group: 3},
+                datetime(2016, 9, 19, 1, 2, 3, tzinfo=pytz.utc),
+            )
+            == "BAR-1 - 1 new alert since Sept. 19, 2016, 1:02 a.m. UTC"
+        )
+
+
+class MailAdapterNotifyDigestTest(BaseMailAdapterTest, TestCase):
+    @mock.patch.object(MailAdapter, "notify", side_effect=MailAdapter.notify, autospec=True)
+    def test_notify_digest(self, notify):
+        project = self.project
+        event = self.store_event(
+            data={"timestamp": iso_format(before_now(minutes=1)), "fingerprint": ["group-1"]},
+            project_id=project.id,
+        )
+        event2 = self.store_event(
+            data={"timestamp": iso_format(before_now(minutes=1)), "fingerprint": ["group-2"]},
+            project_id=project.id,
+        )
+
+        rule = project.rule_set.all()[0]
+        digest = build_digest(
+            project, (event_to_record(event, (rule,)), event_to_record(event2, (rule,)))
+        )
+
+        with self.tasks():
+            self.adapter.notify_digest(project, digest)
+
+        assert notify.call_count == 0
+        assert len(mail.outbox) == 1
+
+        message = mail.outbox[0]
+        assert "List-ID" in message.message()
+
+    @mock.patch.object(MailAdapter, "notify", side_effect=MailAdapter.notify, autospec=True)
+    @mock.patch.object(MessageBuilder, "send_async", autospec=True)
+    def test_notify_digest_single_record(self, send_async, notify):
+        event = self.store_event(data={}, project_id=self.project.id)
+        rule = self.project.rule_set.all()[0]
+        digest = build_digest(self.project, (event_to_record(event, (rule,)),))
+        self.adapter.notify_digest(self.project, digest)
+        assert send_async.call_count == 1
+        assert notify.call_count == 1
+
+    def test_notify_digest_subject_prefix(self):
+        ProjectOption.objects.set_value(
+            project=self.project, key=u"mail:subject_prefix", value="[Example prefix] "
+        )
+        event = self.store_event(
+            data={"timestamp": iso_format(before_now(minutes=1)), "fingerprint": ["group-1"]},
+            project_id=self.project.id,
+        )
+        event2 = self.store_event(
+            data={"timestamp": iso_format(before_now(minutes=1)), "fingerprint": ["group-2"]},
+            project_id=self.project.id,
+        )
+
+        rule = self.project.rule_set.all()[0]
+
+        digest = build_digest(
+            self.project, (event_to_record(event, (rule,)), event_to_record(event2, (rule,)))
+        )
+
+        with self.tasks():
+            self.adapter.notify_digest(self.project, digest)
+
+        assert len(mail.outbox) == 1
+
+        msg = mail.outbox[0]
+
+        assert msg.subject.startswith("[Example prefix]")
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 61c21adbf5..cf9e14a8dd 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -16,6 +16,7 @@ from sentry.utils.compat.mock import Mock
 
 from sentry.api.serializers import serialize, UserReportWithGroupSerializer
 from sentry.digests.notifications import build_digest, event_to_record
+from sentry.mail.adapter import MailAdapter
 from sentry.models import (
     Activity,
     GroupSubscription,
@@ -201,7 +202,7 @@ class MailPluginTest(TestCase):
 
     def test_get_digest_subject(self):
         assert (
-            self.plugin.get_digest_subject(
+            self.plugin.mail_adapter.get_digest_subject(
                 mock.Mock(qualified_short_id="BAR-1"),
                 {mock.sentinel.group: 3},
                 datetime(2016, 9, 19, 1, 2, 3, tzinfo=pytz.utc),
@@ -209,7 +210,7 @@ class MailPluginTest(TestCase):
             == "BAR-1 - 1 new alert since Sept. 19, 2016, 1:02 a.m. UTC"
         )
 
-    @mock.patch.object(MailPlugin, "notify", side_effect=MailPlugin.notify, autospec=True)
+    @mock.patch.object(MailAdapter, "notify", side_effect=MailAdapter.notify, autospec=True)
     def test_notify_digest(self, notify):
         project = self.project
         event = self.store_event(
@@ -235,7 +236,7 @@ class MailPluginTest(TestCase):
         message = mail.outbox[0]
         assert "List-ID" in message.message()
 
-    @mock.patch.object(MailPlugin, "notify", side_effect=MailPlugin.notify, autospec=True)
+    @mock.patch.object(MailAdapter, "notify", side_effect=MailAdapter.notify, autospec=True)
     @mock.patch.object(MessageBuilder, "send_async", autospec=True)
     def test_notify_digest_single_record(self, send_async, notify):
         event = self.store_event(data={}, project_id=self.project.id)
