commit aa2cc631e1dc2e07d2e1fdb9fd2ea1d7898596ee
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 2 17:44:16 2010 -0700

    Added remote HTTP api

diff --git a/runtests.py b/runtests.py
index 1fa87afeda..5a99dedc52 100644
--- a/runtests.py
+++ b/runtests.py
@@ -17,6 +17,8 @@ if not settings.configured:
             'django.contrib.contenttypes',
 
             'sentry',
+            'paging',
+            'indexer',
 
             # No fucking idea why I have to do this
             'sentry.tests',
diff --git a/sentry/filters/__init__.py b/sentry/filters/__init__.py
index f85192a4f3..10b0122e08 100644
--- a/sentry/filters/__init__.py
+++ b/sentry/filters/__init__.py
@@ -4,7 +4,8 @@ from django.utils.safestring import mark_safe
 
 from indexer.models import Index
 
-from sentry.models import GroupedMessage, Message, LOG_LEVELS
+from sentry.models import GroupedMessage, Message
+from sentry.settings import LOG_LEVELS
 
 class Widget(object):
     def __init__(self, filter, request):
diff --git a/sentry/helpers.py b/sentry/helpers.py
index de2378a85a..1b54650402 100644
--- a/sentry/helpers.py
+++ b/sentry/helpers.py
@@ -82,10 +82,10 @@ class ImprovedExceptionReporter(ExceptionReporter):
         })
         return t.render(c)
 
-def construct_checksum(error):
-    checksum = md5_constructor(str(error.level))
-    checksum.update(error.class_name or '')
-    message = error.traceback or error.message
+def construct_checksum(level=logging.ERROR, class_name='', traceback='', message='', **kwargs):
+    checksum = md5_constructor(str(level))
+    checksum.update(class_name or '')
+    message = traceback or message
     if isinstance(message, unicode):
         message = message.encode('utf-8', 'replace')
     checksum.update(message)
diff --git a/sentry/manager.py b/sentry/manager.py
index 95eb10d31c..eca81ec995 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -1,13 +1,20 @@
 # Multi-db support based on http://www.eflorenzano.com/blog/post/easy-multi-database-support-django/
 # TODO: is there a way to use the traceback module based on an exception variable?
 
-import traceback as traceback_mod
-import logging
-import socket
-import warnings
+import base64
+try:
+    import cPickle as pickle
+except ImportError:
+    import pickle
 import datetime
 import django
+import logging
+import socket
 import sys
+import traceback as traceback_mod
+import urllib
+import urllib2
+import warnings
 
 from django.core.cache import cache
 from django.db import models
@@ -18,6 +25,7 @@ from django.views.debug import ExceptionReporter
 
 from sentry import settings
 from sentry.helpers import construct_checksum, varmap
+from sentry.utils import transform
 
 assert not settings.DATABASE_USING or django.VERSION >= (1, 2), 'The `SENTRY_DATABASE_USING` setting requires Django >= 1.2'
 
@@ -32,56 +40,83 @@ class SentryManager(models.Manager):
             qs = qs.using(settings.DATABASE_USING)
         return qs
 
-    def _create(self, **defaults):
-        from sentry.models import Message, GroupedMessage
+    def process(self, **kwargs):
         from sentry.helpers import get_filters
         
-        URL_MAX_LENGTH = Message._meta.get_field_by_name('url')[0].max_length
-        
         for filter_ in get_filters():
-            defaults = filter_(None).process(defaults) or defaults
+            kwargs = filter_(None).process(kwargs) or kwargs
         
-        view = defaults.pop('view', None)
-        logger_name = defaults.pop('logger', 'root')
-        url = defaults.pop('url', None)
-
-        data = defaults.pop('data', {}) or {}
-        if url:
-            data['url'] = url
-            url = url[:URL_MAX_LENGTH]
-
-        instance = Message(
-            view=view,
-            logger=logger_name,
-            data=data,
-            url=url,
-            server_name=socket.gethostname(),
-            **defaults
-        )
-        instance.checksum = construct_checksum(instance)
+        kwargs.setdefault('level', logging.ERROR)
+        kwargs.setdefault('server_name', socket.gethostname())
+        
+        checksum = construct_checksum(**kwargs)
         
         if settings.THRASHING_TIMEOUT and settings.THRASHING_LIMIT:
-            cache_key = 'sentry:%s:%s' % (instance.class_name, instance.checksum)
+            cache_key = 'sentry:%s:%s' % (kwargs.get('class_name'), checksum)
             added = cache.add(cache_key, 1, settings.THRASHING_TIMEOUT)
             if not added and cache.incr(cache_key) > settings.THRASHING_LIMIT:
                 return
 
+        if settings.REMOTE_URL:
+            data = {
+                'data': base64.b64encode(pickle.dumps(transform(kwargs))).encode('zlib'),
+                'key': settings.KEY,
+            }
+            req = urllib2.Request(settings.REMOTE_URL, urllib.urlencode(data))
+
+            try:
+                response = urllib2.urlopen(req).read()
+            except urllib2.HTTPError, e:
+                logger.exception('Unable to reach Sentry log server')
+        return self._create(**kwargs)
+
+    def _create(self, **kwargs):
+        from sentry.models import Message, GroupedMessage
+        
+        URL_MAX_LENGTH = Message._meta.get_field_by_name('url')[0].max_length
+        now = datetime.datetime.now()
+
+        view = kwargs.pop('view', None)
+        logger_name = kwargs.pop('logger', 'root')
+        url = kwargs.pop('url', None)
+        server_name = kwargs.pop('server_name', )
+        data = kwargs.pop('data', {}) or {}
+
+        if url:
+            data['url'] = url
+            url = url[:URL_MAX_LENGTH]
+
+        checksum = construct_checksum(**kwargs)
+
         try:
             group, created = GroupedMessage.objects.get_or_create(
                 view=view,
                 logger=logger_name,
-                checksum=instance.checksum,
-                defaults=defaults
+                checksum=checksum,
+                defaults=kwargs
             )
             if not created:
                 GroupedMessage.objects.filter(pk=group.pk).update(
                     times_seen=models.F('times_seen') + 1,
                     status=0,
-                    last_seen=datetime.datetime.now(),
+                    last_seen=now,
                 )
-                # signals.post_save.send(sender=GroupedMessage, instance=group, created=False)
-            instance.group = group
-            instance.save()
+                # HACK: maintain appeared state
+                group.status = 0
+                group.last_seen = now
+                group.times_seen += 1
+                signals.post_save.send(sender=GroupedMessage, instance=group, created=False)
+
+            instance = Message.objects.create(
+                view=view,
+                logger=logger_name,
+                data=data,
+                url=url,
+                server_name=server_name,
+                checksum=checksum,
+                group=group,
+                **kwargs
+            )
         except Exception, exc:
             try:
                 logger.exception(u'Unable to process log entry: %s' % (exc,))
@@ -105,7 +140,7 @@ class SentryManager(models.Manager):
         if record.exc_info:
             return self.create_from_exception(*record.exc_info[1:2], **kwargs)
 
-        return self._create(
+        return self.process(
             traceback=record.exc_text,
             **kwargs
         )
@@ -114,7 +149,7 @@ class SentryManager(models.Manager):
         """
         Creates an error log for from ``type`` and ``message``.
         """
-        return self._create(
+        return self.process(
             message=message,
             **kwargs
         )
@@ -172,7 +207,7 @@ class SentryManager(models.Manager):
 
         kwargs.setdefault('message', to_unicode(exc_value))
 
-        return self._create(
+        return self.process(
             class_name=exc_type.__name__,
             traceback=tb_message,
             data=data,
diff --git a/sentry/models.py b/sentry/models.py
index 3e95f94c2e..0cef33ab91 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -32,14 +32,6 @@ logger = logging.getLogger('sentry')
 
 __all__ = ('Message', 'GroupedMessage')
 
-LOG_LEVELS = (
-    (logging.DEBUG, _('debug')),
-    (logging.INFO, _('info')),
-    (logging.WARNING, _('warning')),
-    (logging.ERROR, _('error')),
-    (logging.FATAL, _('fatal')),
-)
-
 STATUS_LEVELS = (
     (0, _('unresolved')),
     (1, _('resolved')),
@@ -48,7 +40,7 @@ STATUS_LEVELS = (
 class MessageBase(Model):
     logger          = models.CharField(max_length=64, blank=True, default='root', db_index=True)
     class_name      = models.CharField(_('type'), max_length=128, blank=True, null=True, db_index=True)
-    level           = models.PositiveIntegerField(choices=LOG_LEVELS, default=logging.ERROR, blank=True, db_index=True)
+    level           = models.PositiveIntegerField(choices=settings.LOG_LEVELS, default=logging.ERROR, blank=True, db_index=True)
     message         = models.TextField()
     traceback       = models.TextField(blank=True, null=True)
     view            = models.CharField(max_length=255, db_index=True, blank=True, null=True)
@@ -188,7 +180,7 @@ class Message(MessageBase):
 
     def save(self, *args, **kwargs):
         if not self.checksum:
-            self.checksum = construct_checksum(self)
+            self.checksum = construct_checksum(**self.__dict__)
         super(Message, self).save(*args, **kwargs)
 
     def get_absolute_url(self):
diff --git a/sentry/settings.py b/sentry/settings.py
index 6f5b64bbc7..a4e94fb8a3 100644
--- a/sentry/settings.py
+++ b/sentry/settings.py
@@ -1,4 +1,8 @@
 from django.conf import settings
+from django.utils.hashcompat import md5_constructor
+from django.utils.translation import ugettext_lazy as _
+
+import logging
 
 CATCH_404_ERRORS = getattr(settings, 'SENTRY_CATCH_404_ERRORS', False)
 
@@ -13,4 +17,17 @@ FILTERS = getattr(settings, 'SENTRY_FILTERS', (
     'sentry.filters.LoggerFilter',
     'sentry.filters.LevelFilter',
     'sentry.filters.ServerNameFilter',
-))
\ No newline at end of file
+))
+
+KEY = getattr(settings, 'SENTRY_KEY', md5_constructor(settings.SECRET_KEY).hexdigest())
+
+LOG_LEVELS = (
+    (logging.DEBUG, _('debug')),
+    (logging.INFO, _('info')),
+    (logging.WARNING, _('warning')),
+    (logging.ERROR, _('error')),
+    (logging.FATAL, _('fatal')),
+)
+
+# This should be the full URL to sentries store view
+REMOTE_URL = getattr(settings, 'SENTRY_REMOTE_URL', None)
\ No newline at end of file
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 4a57cd8854..d5e8e4d417 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -1,18 +1,63 @@
 # -*- coding: utf-8 -*-
 
-from django.core.handlers.wsgi import WSGIRequest
+from django.core.handlers.wsgi import WSGIRequest, WSGIHandler
 from django.core.urlresolvers import reverse
 from django.core.signals import got_request_exception
+from django.core.servers import basehttp
 from django.test.client import Client
 from django.test import TestCase
 from django.utils.encoding import smart_unicode
 
+from sentry import settings
 from sentry.models import Message, GroupedMessage
 from sentry.tests.models import TestModel, DuplicateKeyModel
-from sentry import settings
 
 import logging
 import sys
+import threading
+
+class TestServerThread(threading.Thread):
+    """Thread for running a http server while tests are running."""
+
+    def __init__(self, address, port):
+        self.address = address
+        self.port = port
+        self._stopevent = threading.Event()
+        self.started = threading.Event()
+        self.error = None
+        super(TestServerThread, self).__init__()
+
+    def run(self):
+        """Sets up test server and database and loops over handling http requests."""
+        from django.conf import settings
+        try:
+            handler = basehttp.AdminMediaHandler(WSGIHandler())
+            server_address = (self.address, self.port)
+            httpd = basehttp.StoppableWSGIServer(server_address, basehttp.WSGIRequestHandler)
+            httpd.set_app(handler)
+            self.started.set()
+        except basehttp.WSGIServerException, e:
+            self.error = e
+            self.started.set()
+            return
+
+        # Must do database stuff in this new thread if database in memory.
+        if settings.DATABASE_ENGINE == 'sqlite3' \
+            and (not settings.TEST_DATABASE_NAME or settings.TEST_DATABASE_NAME == ':memory:'):
+            # Import the fixture data into the test database.
+            if hasattr(self, 'fixtures'):
+                # We have to use this slightly awkward syntax due to the fact
+                # that we're using *args and **kwargs together.
+                call_command('loaddata', *self.fixtures, **{'verbosity': 0})
+
+        # Loop until we get a stop event.
+        while not self._stopevent.isSet():
+            httpd.handle_request()
+
+    def join(self, timeout=None):
+        """Stop the thread and wait for it to finish."""
+        self._stopevent.set()
+        threading.Thread.join(self, timeout)
 
 def conditional_on_module(module):
     def wrapped(func):
@@ -49,10 +94,8 @@ class SentryTestCase(TestCase):
     urls = 'sentry.tests.urls'
 
     def setUp(self):
-        settings.DATABASE_USING = None
         self._handlers = None
         self._level = None
-        settings.DEBUG = False
         self.logger = logging.getLogger('sentry')
         self.logger.addHandler(logging.StreamHandler())
         Message.objects.all().delete()
@@ -468,6 +511,61 @@ class SentryViewsTest(TestCase):
         self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, 'view exception')
 
+class RemoteSentryTest(TestCase):
+    urls = 'sentry.tests.urls'
+    
+    def start_test_server(self, address='localhost', port=8000):
+        """Creates a live test server object (instance of WSGIServer)."""
+        self.server_thread = TestServerThread(address, port)
+        self.server_thread.start()
+        self.server_thread.started.wait()
+        if self.server_thread.error:
+            raise self.server_thread.error
+
+    def stop_test_server(self):
+        if self.server_thread:
+            self.server_thread.join()
+    
+    def setUp(self):
+        self.server_thread = None
+        settings.REMOTE_URL = 'http://localhost:8000%s' % reverse('sentry-store')
+
+    def tearDown(self):
+        self.stop_test_server()
+        settings.REMOTE_URL = None
+
+    def testNoKey(self):
+        resp = self.client.post(reverse('sentry-store'))
+        self.assertEquals(resp.status_code, 403)
+
+    def testNoData(self):
+        resp = self.client.post(reverse('sentry-store'), {
+            'key': settings.KEY,
+        })
+        self.assertEquals(resp.status_code, 403)
+
+    def testBadData(self):
+        resp = self.client.post(reverse('sentry-store'), {
+            'key': settings.KEY,
+            'data': 'hell world',
+        })
+        self.assertEquals(resp.status_code, 403)
+
+    def testProcess(self):
+        self.start_test_server()
+        # TODO:
+        GroupedMessage.objects.process(message='hello')
+        instance = Message.objects.get()
+        self.assertEquals(instance.message, 'hello')
+    
+    def testExternal(self):
+        self.start_test_server()
+        self.assertRaises(Exception, self.client.get, '/?test')
+        instance = Message.objects.get()
+        self.assertEquals(instance.message, 'view exception')
+        self.assertEquals(instance.url, 'http://testserver/?test')
+        
+        
 class SentryFeedsTest(TestCase):
     fixtures = ['sentry/tests/fixtures/feeds.json']
     urls = 'sentry.tests.urls'
diff --git a/sentry/urls.py b/sentry/urls.py
index e068dfe30d..a61c217164 100644
--- a/sentry/urls.py
+++ b/sentry/urls.py
@@ -2,22 +2,31 @@ import os
 
 from django.conf import settings
 from django.conf.urls.defaults import *
-from django.utils.hashcompat import md5_constructor
 
-from feeds import MessageFeed, SummaryFeed
-import views
-
-hashed_secret = md5_constructor(settings.SECRET_KEY).hexdigest()
+from sentry.settings import KEY
+from sentry.feeds import MessageFeed, SummaryFeed
+from sentry import views
 
 SENTRY_ROOT = os.path.dirname(__file__) 
 
 urlpatterns = patterns('',
-    url(r'^feeds/%s/messages.xml$' % hashed_secret, MessageFeed(), name='sentry-feed-messages'),
-    url(r'^feeds/%s/summaries.xml$' % hashed_secret, SummaryFeed(), name='sentry-feed-summaries'),
+    url(r'^_media/(?P<path>.*)$', 'django.views.static.serve',
+        {'document_root': os.path.join(SENTRY_ROOT, 'media')}, name='sentry-media'),
+
+    # Feeds
+
+    url(r'^feeds/%s/messages.xml$' % KEY, MessageFeed(), name='sentry-feed-messages'),
+    url(r'^feeds/%s/summaries.xml$' % KEY, SummaryFeed(), name='sentry-feed-summaries'),
+
+    # JS and API
+
+    url(r'^jsapi/$', views.ajax_handler, name='sentry-ajax'),
+    url(r'^store/$', views.store, name='sentry-store'),
+    
+    # Normal views
+
     url(r'^login$', views.login, name='sentry-login'),
     url(r'^group/(\d+)$', views.group, name='sentry-group'),
+
     url(r'^$', views.index, name='sentry'),
-    url(r'^jsapi/$', views.ajax_handler, name='sentry-ajax'),
-    url(r'^_media/(?P<path>.*)$', 'django.views.static.serve',
-        {'document_root': os.path.join(SENTRY_ROOT, 'media')}, name='sentry-media'),
 )
diff --git a/sentry/views.py b/sentry/views.py
index 8a882831c9..c462b81d5f 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -1,5 +1,10 @@
-from math import log
+import base64
+try:
+    import cPickle as pickle
+except ImportError:
+    import pickle
 import datetime
+from math import log
 
 try:
     from pygooglechart import SimpleLineChart
@@ -17,8 +22,9 @@ from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
 from django.views.decorators.csrf import csrf_protect
 
+from sentry import settings
 from sentry.helpers import FakeRequest, ImprovedExceptionReporter, get_filters
-from sentry.models import GroupedMessage, Message, LOG_LEVELS
+from sentry.models import GroupedMessage, Message
 from sentry.templatetags.sentry_helpers import with_priority
 
 def login_required(func):
@@ -97,7 +103,7 @@ def ajax_handler(request):
     if op == 'poll':
         logger_names = SortedDict((l, l) for l in GroupedMessage.objects.values_list('logger', flat=True).distinct())
         server_names = SortedDict((l, l) for l in Message.objects.values_list('server_name', flat=True).distinct())
-        level_names = SortedDict((str(k), v) for k, v in LOG_LEVELS)
+        level_names = SortedDict((str(k), v) for k, v in settings.LOG_LEVELS)
 
         logger = request.GET.get('logger')
         server_name = request.GET.get('server_name') or ''
@@ -223,4 +229,22 @@ def group(request, group_id):
         chart.set_line_style(1, 1)
         chart_url = chart.get_url()
     
-    return render_to_response('sentry/group.html', locals())
\ No newline at end of file
+    return render_to_response('sentry/group.html', locals())
+
+def store(request):
+    key = request.POST.get('key')
+    if key != settings.KEY:
+        return HttpResponseForbidden('Invalid credentials')
+    
+    data = request.POST.get('data')
+    if not data:
+        return HttpResponseForbidden('Missing data')
+    
+    try:
+        data = base64.b64decode(pickle.loads(data.decode('zlib')))
+    except:
+        return HttpResponseForbidden('Bad data')
+
+    GroupedMessage.objects._create(**data)
+    
+    return HttpResponse()
\ No newline at end of file
