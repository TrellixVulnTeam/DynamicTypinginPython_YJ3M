commit d77e5a3666ce8bd4469b0f9eb2c45f1fec94049c
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Jan 22 16:52:35 2016 -0800

    Replace gunicorn with uwsgi

diff --git a/setup.py b/setup.py
index 58daa762ac..c5e964ff26 100755
--- a/setup.py
+++ b/setup.py
@@ -105,7 +105,6 @@ install_requires = [
     'email-reply-parser>=0.2.0,<0.3.0',
     'enum34>=0.9.18,<0.10.0',
     'exam>=0.5.1',
-    'gunicorn>=19.2.1,<20.0.0',
     'hiredis>=0.1.0,<0.2.0',
     'ipaddr>=2.1.11,<2.2.0',
     'kombu==3.0.30',
@@ -130,6 +129,7 @@ install_requires = [
     'toronado>=0.0.4,<0.1.0',
     'ua-parser>=0.6.1,<0.7.0',
     'urllib3>=1.11,<1.12',
+    'uwsgi>2.0.0,<2.1.0',
     'rb>=1.3.0,<2.0.0',
 ]
 
diff --git a/src/sentry/runner/settings.py b/src/sentry/runner/settings.py
index d22b8088e8..d281309f71 100644
--- a/src/sentry/runner/settings.py
+++ b/src/sentry/runner/settings.py
@@ -172,8 +172,7 @@ SENTRY_FILESTORE_OPTIONS = {
 SENTRY_WEB_HOST = '0.0.0.0'
 SENTRY_WEB_PORT = 9000
 SENTRY_WEB_OPTIONS = {
-    # 'workers': 3,  # the number of gunicorn workers
-    # 'secure_scheme_headers': {'X-FORWARDED-PROTO': 'https'},
+    # 'workers': 3,  # the number of web workers
 }
 
 ###############
diff --git a/src/sentry/services/http.py b/src/sentry/services/http.py
index f94b383eaf..4f005c18fa 100644
--- a/src/sentry/services/http.py
+++ b/src/sentry/services/http.py
@@ -2,37 +2,29 @@
 sentry.services.http
 ~~~~~~~~~~~~~~~~~~~~
 
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:copyright: (c) 2010-2016 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
 from __future__ import absolute_import, print_function
 
-from gunicorn.app.base import Application
-
+import os
+import sys
 from sentry.services.base import Service
 
 
-class SentryGunicornCommand(Application):
-    def __init__(self, options):
-        self.usage = None
-        self.prog = None
-        self.cfg = None
-        self.config_file = ""
-        self.options = options
-        self.callable = None
-        self.project_path = None
-        self.do_load_config()
-
-    def init(self, *args):
-        cfg = {}
-        for k, v in self.options.items():
-            if k.lower() in self.cfg.settings and v is not None:
-                cfg[k.lower()] = v
-        return cfg
-
-    def load(self):
-        import sentry.wsgi
-        return sentry.wsgi.application
+def add_option_to_env(k, v):
+    key = 'UWSGI_' + k.upper().replace('-', '_')
+    if isinstance(v, basestring):
+        value = v
+    elif v is True:
+        value = 'true'
+    elif v is False:
+        value = 'false'
+    elif isinstance(v, (int, long)):
+        value = str(v)
+    else:
+        raise TypeError('Unknown option type: %r (%s)' % (k, type(v)))
+    os.environ[key] = value
 
 
 class SentryHTTPServer(Service):
@@ -50,19 +42,64 @@ class SentryHTTPServer(Service):
         self.workers = workers
 
         options = (settings.SENTRY_WEB_OPTIONS or {}).copy()
-        options.setdefault('bind', '%s:%s' % (self.host, self.port))
-        options.setdefault('timeout', 30)
-        options.setdefault('proc_name', 'Sentry')
+        options.setdefault('module', 'sentry.wsgi:application')
+        options.setdefault('protocol', 'http')
+        options.setdefault('http-socket', '%s:%s' % (self.host, self.port))
+        options.setdefault('auto-procname', True)
+        options.setdefault('procname-prefix-spaced', '[Sentry]')
         options.setdefault('workers', 3)
-        options.setdefault('accesslog', '-')
-        options.setdefault('errorlog', '-')
-        options.setdefault('loglevel', 'info')
-        options.setdefault('limit_request_line', 0)
-        options['preload'] = False
+        options.setdefault('threads', 1)
+        options.setdefault('http-timeout', 30)
+        options.setdefault('vacuum', True)
+        options.setdefault('thunder-lock', True)
+        options.setdefault('log-x-forwarded-for', False)
+        options.setdefault('buffer-size', 32768)
+        options.setdefault('post-buffering', 65536)
+        options.setdefault('limit-post', 20971520)
+        options.setdefault('need-app', True)
+        options.setdefault('disable-logging', False)
+        options.setdefault('memory-report', True)
+        options.setdefault('reload-on-rss', 600)
+        options.setdefault('ignore-sigpipe', True)
+        options.setdefault('ignore-write-errors', True)
+        options.setdefault('disable-write-exception', True)
+        options.setdefault('virtualenv', sys.prefix)
+        options.setdefault('log-format', '%(addr) - %(user) [%(ltime)] "%(method) %(uri) %(proto)" %(status) %(size) "%(referer)" "%(uagent)"')
+        options.setdefault('uid', os.getuid())
+        options.setdefault('gid', os.getgid())
+
+        # Required arguments that should not be overridden
+        options['master'] = True
+        options['enable-threads'] = True
+        options['lazy-apps'] = True
+        options['single-interpreter'] = True
 
         if workers:
             options['workers'] = workers
 
+        # Old options from gunicorn
+        if 'bind' in options:
+            options['http-socket'] = options['bind']
+            del options['bind']
+        if 'accesslog' in options:
+            if options['accesslog'] != '-':
+                options['logto'] = options['accesslog']
+            del options['accesslog']
+        if 'errorlog' in options:
+            if options['errorlog'] != '-':
+                options['logto2'] = options['errorlog']
+            del options['errorlog']
+        if 'timeout' in options:
+            options['http-timeout'] = options['timeout']
+            del options['timeout']
+        if 'proc_name' in options:
+            options['procname-prefix-spaced'] = options['proc_name']
+            del options['proc_name']
+        if 'secure_scheme_headers' in options:
+            del options['secure_scheme_headers']
+        if 'loglevel' in options:
+            del options['loglevel']
+
         self.options = options
 
     def validate_settings(self):
@@ -72,4 +109,11 @@ class SentryHTTPServer(Service):
         validate_settings(django_settings)
 
     def run(self):
-        SentryGunicornCommand(self.options).run()
+        for k, v in self.options.iteritems():
+            if v is not None:
+                add_option_to_env(k, v)
+
+        # This has already been validated inside __init__
+        os.environ['SENTRY_SKIP_BACKEND_VALIDATION'] = '1'
+
+        os.execvp('uwsgi', ('uwsgi',))
