commit ba63056c98281032b9749366ee4e6e40841b55a8
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Oct 12 12:54:16 2018 -0700

    feat(ui): Add Organization Events view (#10105)

diff --git a/src/sentry/static/sentry/app/components/letterAvatar.jsx b/src/sentry/static/sentry/app/components/letterAvatar.jsx
index c5872511c2..63e999c2dc 100644
--- a/src/sentry/static/sentry/app/components/letterAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/letterAvatar.jsx
@@ -14,8 +14,8 @@ const LetterAvatar = createReactClass({
   displayName: 'LetterAvatar',
 
   propTypes: {
-    identifier: PropTypes.string.isRequired,
-    displayName: PropTypes.string.isRequired,
+    identifier: PropTypes.string,
+    displayName: PropTypes.string,
     round: PropTypes.bool,
   },
 
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index 94c2ac5b3c..ad69fc4b4a 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -196,6 +196,7 @@ class Sidebar extends React.Component {
                   label={t('Projects')}
                   to={`/${organization.slug}/`}
                 />
+
                 <Feature feature={['discover']}>
                   <SidebarItem
                     {...sidebarItemProps}
@@ -205,6 +206,16 @@ class Sidebar extends React.Component {
                     to={`/organizations/${organization.slug}/discover/`}
                   />
                 </Feature>
+
+                <Feature feature={['events-stream']}>
+                  <SidebarItem
+                    {...sidebarItemProps}
+                    onClick={this.hidePanel}
+                    icon={<InlineSvg src="icon-stack" />}
+                    label={t('Events')}
+                    to={`/organizations/${organization.slug}/events/`}
+                  />
+                </Feature>
               </SidebarSection>
 
               <SidebarSection>
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index cbb3bd4592..d51857cb43 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -756,6 +756,19 @@ function routes() {
             component={errorHandler(OrganizationActivity)}
           />
 
+          <Route
+            path="/organizations/:orgId/events/"
+            componentPromise={() =>
+              import(/*webpackChunkName: "OrganizationEventsContainer"*/ './views/organizationEvents')}
+            component={errorHandler(LazyLoad)}
+          >
+            <IndexRoute
+              componentPromise={() =>
+                import(/*webpackChunkName: "OrganizationEvents"*/ './views/organizationEvents/events')}
+              component={errorHandler(LazyLoad)}
+            />
+          </Route>
+
           <Route
             path="/organizations/:orgId/health/"
             componentPromise={() =>
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index 531d684f5e..7b82a8c851 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -32,7 +32,7 @@ export const User = PropTypes.shape({
   ),
   has2fa: PropTypes.bool,
   hasPasswordAuth: PropTypes.bool,
-  id: PropTypes.string.isRequired,
+  id: PropTypes.string,
   identities: PropTypes.array,
   isActive: PropTypes.bool,
   isManaged: PropTypes.bool,
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
new file mode 100644
index 0000000000..e0b6e1659f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
@@ -0,0 +1,124 @@
+import {Link} from 'react-router';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import AsyncView from 'app/views/asyncView';
+import DateTime from 'app/components/dateTime';
+import IdBadge from 'app/components/idBadge';
+import Pagination from 'app/components/pagination';
+import SentryTypes from 'app/sentryTypes';
+import Tooltip from 'app/components/tooltip';
+import withOrganization from 'app/utils/withOrganization';
+
+class OrganizationEvents extends AsyncView {
+  static propTypes = {
+    organization: SentryTypes.Organization,
+  };
+
+  constructor(props) {
+    super(props);
+    this.projectsMap = new Map(
+      props.organization.projects.map(project => [project.id, project])
+    );
+  }
+
+  getTitle() {
+    return `${this.props.organization.slug} Events`;
+  }
+
+  getEndpoints() {
+    return [['events', `/organizations/${this.props.organization.slug}/events/`]];
+  }
+
+  getEventTitle(event) {
+    const {organization} = this.props;
+    const project = organization.projects.find(({id}) => id === event.projectID);
+    return (
+      <Link to={`/${organization.slug}/${project.slug}/issues/?query=${event.eventID}`}>
+        {event.message.split('\n')[0].substr(0, 100)}
+      </Link>
+    );
+  }
+
+  renderBody() {
+    const {organization} = this.props;
+    const {events, eventsPageLinks} = this.state;
+    return (
+      <React.Fragment>
+        <Panel>
+          <PanelHeader hasButtons>
+            Events
+            {this.renderSearchInput({})}
+          </PanelHeader>
+          <Wrapper>
+            <Table>
+              <tbody>
+                {events.map((event, eventIdx) => {
+                  const project = this.projectsMap.get(event.projectID);
+                  return (
+                    <tr key={event.eventID}>
+                      <Td>
+                        <Link to={`/${organization.slug}/${project.slug}/`}>
+                          <Tooltip title={project.slug}>
+                            <IdBadge project={project} hideName />
+                          </Tooltip>
+                        </Link>
+                      </Td>
+
+                      <Td>
+                        <EventTitle>{this.getEventTitle(event)}</EventTitle>
+                      </Td>
+
+                      <Td>
+                        <IdBadge user={event.user} hideEmail />
+                        <DateRow>
+                          <DateTime date={new Date(event.timestamp)} />
+                        </DateRow>
+                      </Td>
+                    </tr>
+                  );
+                })}
+              </tbody>
+            </Table>
+          </Wrapper>
+        </Panel>
+
+        <Pagination pageLinks={eventsPageLinks} />
+      </React.Fragment>
+    );
+  }
+}
+export default withOrganization(OrganizationEvents);
+
+const Wrapper = styled(PanelBody)`
+  overflow-x: scroll;
+  padding: 0;
+`;
+const Table = styled('table')`
+  border: 0;
+  width: 100%;
+  max-width: 100%;
+  margin: 0;
+`;
+
+const Td = styled('td')`
+  padding: 10px 15px;
+  white-space: nowrap;
+  border-top: 1px solid ${p => p.theme.borderLight};
+  vertical-align: middle;
+
+  tr:first-child & {
+    border-top: none;
+  }
+`;
+
+const DateRow = styled('div')`
+  font-size: 0.85em;
+  opacity: 0.8;
+`;
+
+const EventTitle = styled('div')`
+  font-size: ${p => p.theme.fontSizeLarge};
+  font-weight: 600;
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsContext.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsContext.jsx
new file mode 100644
index 0000000000..d10fefd2db
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsContext.jsx
@@ -0,0 +1,9 @@
+import React from 'react';
+
+const EventsContext = React.createContext({
+  projects: [],
+  environments: [],
+  daterange: '7d',
+});
+
+export default EventsContext;
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
new file mode 100644
index 0000000000..1b6f7014f2
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
@@ -0,0 +1,123 @@
+import {Flex} from 'grid-emotion';
+import {withRouter} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import EventsContext from 'app/views/organizationEvents/eventsContext';
+import Feature from 'app/components/feature';
+import HeaderSeparator from 'app/components/organizations/headerSeparator';
+import MultipleEnvironmentSelector from 'app/components/organizations/multipleEnvironmentSelector';
+import MultipleProjectSelector from 'app/components/organizations/multipleProjectSelector';
+import SentryTypes from 'app/sentryTypes';
+import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
+import space from 'app/styles/space';
+import withOrganization from 'app/utils/withOrganization';
+
+class OrganizationEventsContainer extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization,
+    router: PropTypes.object,
+  };
+
+  static getDerivedStateFromProps(props, state) {
+    const {query} = props.router.location;
+
+    return {
+      projects: query.projects || [],
+      environments: query.environments || [],
+      period: query.period || '7d',
+    };
+  }
+
+  constructor(props) {
+    super(props);
+
+    this.actions = {
+      updateParams: this.updateParams,
+    };
+
+    this.state = {};
+  }
+
+  updateParams = obj => {
+    const {router} = this.props;
+    router.push({
+      pathname: router.location.pathname,
+      query: {
+        ...router.location.query,
+        ...obj,
+      },
+    });
+  };
+
+  handleChangeProjects = projects => {
+    this.updateParams({projects});
+  };
+
+  handleChangeEnvironments = environments => {
+    this.updateParams({environments});
+  };
+
+  handleChangeTime = period => {
+    this.updateParams({period});
+  };
+
+  render() {
+    let {organization, children} = this.props;
+
+    let projects =
+      organization.projects && organization.projects.filter(({isMember}) => isMember);
+
+    return (
+      <Feature feature={['events-stream']} renderNoFeatureMessage>
+        <EventsContext.Provider value={{actions: this.actions, ...this.state}}>
+          <Content>
+            <Header>
+              <MultipleProjectSelector
+                anchorRight
+                projects={projects}
+                value={this.state.projects}
+                onChange={this.handleChangeProjects}
+              />
+              <HeaderSeparator />
+              <MultipleEnvironmentSelector
+                organization={organization}
+                value={this.state.environments}
+                onChange={this.handleChangeEnvironments}
+              />
+              <HeaderSeparator />
+              <TimeRangeSelector
+                showAbsolute={false}
+                showRelative
+                relative={this.state.period}
+                onChange={this.handleChangeTime}
+              />
+            </Header>
+            <Body>{children}</Body>
+          </Content>
+        </EventsContext.Provider>
+      </Feature>
+    );
+  }
+}
+export default withRouter(withOrganization(OrganizationEventsContainer));
+export {OrganizationEventsContainer};
+
+const Content = styled(Flex)`
+  flex-direction: column;
+  flex: 1;
+  overflow: hidden;
+  margin-bottom: -20px; /* <footer> has margin-top: 20px; */
+`;
+
+const Header = styled(Flex)`
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+  font-size: 18px;
+  padding: ${space(1)} ${space(4)};
+`;
+
+const Body = styled('div')`
+  flex: 1;
+  padding: ${space(3)};
+`;
diff --git a/tests/js/fixtures/organizationEvent.js b/tests/js/fixtures/organizationEvent.js
new file mode 100644
index 0000000000..7843cc46fe
--- /dev/null
+++ b/tests/js/fixtures/organizationEvent.js
@@ -0,0 +1,14 @@
+export function OrganizationEvent(params) {
+  return {
+    projectID: '2',
+    eventID: '12345678901234567890123456789012',
+    message: 'ApiException',
+    timestamp: '2018-10-02T19:45:36+00:00',
+    user: {
+      email: 'billy@sentry.io',
+      id: '1',
+      username: null,
+    },
+    ...params,
+  };
+}
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/organizationEvents/events.spec.jsx
new file mode 100644
index 0000000000..651a7f3fc8
--- /dev/null
+++ b/tests/js/spec/views/organizationEvents/events.spec.jsx
@@ -0,0 +1,26 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import OrganizationEvents from 'app/views/organizationEvents/events';
+
+jest.mock('app/utils/withLatestContext');
+
+describe('OrganizationEventsErrors', function() {
+  const project = TestStubs.Project({isMember: true});
+  const org = TestStubs.Organization({projects: [project]});
+  MockApiClient.addMockResponse({
+    url: '/organizations/org-slug/events/',
+    body: (url, opts) => [TestStubs.OrganizationEvent(opts.query)],
+  });
+
+  it('renders events table', async function() {
+    let wrapper = mount(
+      <OrganizationEvents organization={org} />,
+      TestStubs.routerContext()
+    );
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
+    expect(wrapper.find('IdBadge')).toHaveLength(2);
+  });
+});
diff --git a/tests/js/spec/views/organizationEvents/index.spec.jsx b/tests/js/spec/views/organizationEvents/index.spec.jsx
new file mode 100644
index 0000000000..24e728625e
--- /dev/null
+++ b/tests/js/spec/views/organizationEvents/index.spec.jsx
@@ -0,0 +1,106 @@
+import React from 'react';
+
+import {OrganizationEventsContainer} from 'app/views/organizationEvents';
+import {mount} from 'enzyme';
+import {setActiveOrganization} from 'app/actionCreators/organizations';
+
+import {selectByLabel} from '../../../helpers/select';
+
+describe('OrganizationEvents', function() {
+  let wrapper;
+  const router = TestStubs.router({
+    location: {
+      pathname: '/organizations/org-slug/events/',
+      query: {},
+    },
+  });
+  const project = TestStubs.Project({isMember: true});
+  const organization = TestStubs.Organization({
+    features: ['events-stream'],
+    projects: [project],
+  });
+
+  beforeAll(async function() {
+    MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/environments/`,
+      body: TestStubs.Environments(),
+    });
+
+    setActiveOrganization(organization);
+    await tick();
+
+    wrapper = mount(
+      <OrganizationEventsContainer router={router} organization={organization}>
+        <div />
+      </OrganizationEventsContainer>,
+      TestStubs.routerContext([
+        {
+          organization,
+        },
+      ])
+    );
+  });
+
+  it('renders', function() {
+    expect(wrapper.find('Content')).toHaveLength(1);
+  });
+
+  it('updates router when changing environments', async function() {
+    wrapper.find('MultipleEnvironmentSelector .dropdown-actor').simulate('click');
+    await tick();
+    wrapper.update();
+
+    selectByLabel(wrapper, 'production', {control: true, name: 'environments'});
+    expect(router.push).toHaveBeenCalledWith({
+      pathname: '/organizations/org-slug/events/',
+      query: {
+        environments: ['production'],
+      },
+    });
+    selectByLabel(wrapper, 'staging', {control: true, name: 'environments'});
+    expect(router.push).toHaveBeenCalledWith({
+      pathname: '/organizations/org-slug/events/',
+      query: {
+        environments: ['production', 'staging'],
+      },
+    });
+  });
+
+  it('updates component state when router is updated', async function() {
+    wrapper = mount(
+      <OrganizationEventsContainer router={router} organization={organization}>
+        <div />
+      </OrganizationEventsContainer>,
+      TestStubs.routerContext([
+        {
+          organization,
+        },
+      ])
+    );
+    expect(wrapper.state('environments')).toEqual([]);
+
+    wrapper.setProps({
+      router: {
+        location: {
+          pathname: '/organizations/org-slug/events/',
+          query: {
+            environments: ['production'],
+          },
+        },
+      },
+    });
+    expect(wrapper.state('environments')).toEqual(['production']);
+
+    wrapper.setProps({
+      router: {
+        location: {
+          pathname: '/organizations/org-slug/events/',
+          query: {
+            environments: ['production', 'staging'],
+          },
+        },
+      },
+    });
+    expect(wrapper.state('environments')).toEqual(['production', 'staging']);
+  });
+});
