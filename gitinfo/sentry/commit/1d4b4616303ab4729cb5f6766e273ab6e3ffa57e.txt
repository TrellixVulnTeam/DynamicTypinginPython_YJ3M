commit 1d4b4616303ab4729cb5f6766e273ab6e3ffa57e
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jun 19 17:01:10 2014 +0800

    Make email go through the queue

diff --git a/src/sentry/models/activity.py b/src/sentry/models/activity.py
index 07b79693cc..b4dbf1b38e 100644
--- a/src/sentry/models/activity.py
+++ b/src/sentry/models/activity.py
@@ -6,8 +6,6 @@ sentry.models.activity
 :license: BSD, see LICENSE for more details.
 """
 
-import logging
-
 from django.conf import settings
 from django.db import models
 from django.db.models import F
@@ -151,9 +149,4 @@ class Activity(Model):
             reply_reference=self.group,
         )
         msg.add_users(send_to, project=self.project)
-
-        try:
-            msg.send()
-        except Exception as e:
-            logger = logging.getLogger('sentry.mail.errors')
-            logger.exception(e)
+        msg.send_async()
diff --git a/src/sentry/models/lostpasswordhash.py b/src/sentry/models/lostpasswordhash.py
index 8603b36472..cc6010f08b 100644
--- a/src/sentry/models/lostpasswordhash.py
+++ b/src/sentry/models/lostpasswordhash.py
@@ -6,8 +6,6 @@ sentry.models.useroption
 :license: BSD, see LICENSE for more details.
 """
 
-import logging
-
 from datetime import timedelta
 from urlparse import urlparse
 
@@ -61,9 +59,4 @@ class LostPasswordHash(Model):
             template='sentry/emails/recover_account.txt',
             context=context,
         )
-
-        try:
-            msg.send([self.user.email])
-        except Exception as e:
-            logger = logging.getLogger('sentry.mail.errors')
-            logger.exception(e)
+        msg.send_async([self.user.email])
diff --git a/src/sentry/tasks/email.py b/src/sentry/tasks/email.py
index 40a03a63d1..d5434bf5d4 100644
--- a/src/sentry/tasks/email.py
+++ b/src/sentry/tasks/email.py
@@ -10,6 +10,8 @@ from __future__ import absolute_import
 
 import logging
 
+from django.core.mail import get_connection
+
 from sentry.tasks.base import instrumented_task
 
 logger = logging.getLogger(__name__)
@@ -58,3 +60,11 @@ def process_inbound_email(mailfrom, group_id, payload):
     form = NewNoteForm({'text': payload})
     if form.is_valid():
         form.save(event, user)
+
+
+@instrumented_task(
+    name='sentry.tasks.email.send_email',
+    queue='email')
+def send_email(message):
+    connection = get_connection()
+    connection.send_messages([message])
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index 144e88fd3e..0a1af6e406 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -177,17 +177,25 @@ class MessageBuilder(object):
 
         return msg
 
-    def send(self, to=None, fail_silently=False):
+    def get_built_messages(self, to=None):
         send_to = set(to or ())
         send_to.update(self._send_to)
-        self.send_all(
-            [self.build(to=email, reply_to=send_to) for email in send_to],
-            fail_silently=fail_silently)
+        return [self.build(to=email, reply_to=send_to) for email in send_to]
+
+    def send(self, to=None, fail_silently=False):
+        messages = self.get_built_messages(to)
+        self.send_all(messages, fail_silently=fail_silently)
 
     def send_all(self, messages, fail_silently=False):
         connection = get_connection(fail_silently=fail_silently)
         return connection.send_messages(messages)
 
+    def send_async(self, to=None):
+        from sentry.tasks.email import send_email
+        messages = self.get_built_messages(to)
+        for message in messages:
+            send_email.delay(message=message)
+
 
 def inline_css(html):
     return toronado.from_string(html)
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index b0e59da64c..ffeb242adf 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -111,15 +111,16 @@ class LostPasswordTest(TestCase):
         )
 
     def test_send_recover_mail(self):
-        with self.settings(SENTRY_URL_PREFIX='http://testserver'):
+        with self.settings(SENTRY_URL_PREFIX='http://testserver', CELERY_ALWAYS_EAGER=True):
             self.password_hash.send_recover_mail()
-            assert len(mail.outbox) == 1
-            msg = mail.outbox[0]
-            assert msg.to == [self.user.email]
-            assert msg.subject == '[Sentry] Password Recovery'
-            url = 'http://testserver' + reverse('sentry-account-recover-confirm',
-                args=[self.password_hash.user_id, self.password_hash.hash])
-            assert url in msg.body
+
+        assert len(mail.outbox) == 1
+        msg = mail.outbox[0]
+        assert msg.to == [self.user.email]
+        assert msg.subject == '[Sentry] Password Recovery'
+        url = 'http://testserver' + reverse('sentry-account-recover-confirm',
+            args=[self.password_hash.user_id, self.password_hash.hash])
+        assert url in msg.body
 
 
 class GroupIsOverResolveAgeTest(TestCase):
diff --git a/tests/sentry/utils/email/tests.py b/tests/sentry/utils/email/tests.py
index 1b0750daa0..e31c602a73 100644
--- a/tests/sentry/utils/email/tests.py
+++ b/tests/sentry/utils/email/tests.py
@@ -131,3 +131,14 @@ class MessageBuilderTest(TestCase):
             '<html><body><b>hello world</b></body></html>',
             'text/html',
         )
+
+    def test_get_built_messages(self):
+        msg = MessageBuilder(
+            subject='Test',
+            body='hello world',
+            html_body='<b>hello world</b>',
+            reference=self.activity,
+            reply_reference=self.group,
+        )
+        results = msg.get_built_messages(['foo@example.com'])
+        assert len(results) == 1
