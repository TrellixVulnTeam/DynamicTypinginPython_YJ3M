commit 5c01122fd93781bd1f2fb203a6711ddc8dcd46dd
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Nov 25 12:18:38 2015 -0800

    Enforce type check on default value

diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index 30ad40ccf5..40d124f39d 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -23,6 +23,8 @@ CACHE_FETCH_ERR = 'Unable to fetch option cache for %s'
 CACHE_UPDATE_ERR = 'Unable to update option cache for %s'
 
 Key = namedtuple('Key', ('name', 'default', 'type', 'flags', 'cache_key'))
+# Prevent outselves from clobbering the builtin
+_type = type
 
 
 class UnknownOption(KeyError):
@@ -93,7 +95,7 @@ class OptionsManager(object):
         assert not (opt.flags & self.FLAG_IMMUTABLE), '%r cannot be changed at runtime' % key
 
         if not isinstance(value, opt.type):
-            raise TypeError('got %r, expected %r' % (type(value), opt.type))
+            raise TypeError('got %r, expected %r' % (_type(value), opt.type))
 
         create_or_update(
             model=Option,
@@ -209,6 +211,8 @@ class OptionsManager(object):
 
     def register(self, key, default='', type=basestring, flags=FLAG_DEFAULT):
         assert key not in self.registry, 'Option already registered: %r' % key
+        if not isinstance(default, type):
+            raise TypeError('got %r, expected %r' % (_type(default), type))
         self.registry[key] = Key(key, default, type, flags, self._make_cache_key(key))
 
     def unregister(self, key):
diff --git a/tests/sentry/options/test_manager.py b/tests/sentry/options/test_manager.py
index 1f17981caf..202ab0ba92 100644
--- a/tests/sentry/options/test_manager.py
+++ b/tests/sentry/options/test_manager.py
@@ -35,7 +35,7 @@ class OptionsManagerTest(TestCase):
 
         assert self.manager.get('foo') == ''
 
-    def test_unregistered_key(self):
+    def test_register(self):
         with self.assertRaises(UnknownOption):
             self.manager.get('does-not-exit')
 
@@ -53,6 +53,9 @@ class OptionsManagerTest(TestCase):
             # This key should already exist, and we can't re-register
             self.manager.register('foo')
 
+        with self.assertRaises(TypeError):
+            self.manager.register('wrong-type', default=1, type=basestring)
+
     def test_legacy_key(self):
         """
         Allow sentry: prefixed keys without any registration
@@ -65,7 +68,7 @@ class OptionsManagerTest(TestCase):
         assert self.manager.get('sentry:foo') == ''
 
     def test_types(self):
-        self.manager.register('some-int', type=int)
+        self.manager.register('some-int', type=int, default=0)
         with self.assertRaises(TypeError):
             self.manager.set('some-int', 'foo')
         self.manager.set('some-int', 1)
