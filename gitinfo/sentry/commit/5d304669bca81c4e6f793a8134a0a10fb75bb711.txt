commit 5d304669bca81c4e6f793a8134a0a10fb75bb711
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Nov 20 13:08:53 2018 -0800

    perf(org-events): Optimize when to update router (#10674)
    
    Make sure we do not update route when new query params are equivalent

diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
index 40eb0ca72e..cae0c0d530 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
@@ -1,5 +1,5 @@
 import {Flex} from 'grid-emotion';
-import {isDate, isEqualWith} from 'lodash';
+import {isDate, isEqual, isEqualWith} from 'lodash';
 import {withRouter} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
@@ -23,7 +23,7 @@ import {getParams} from './utils/getParams';
 import EventsContext from './utils/eventsContext';
 
 // `lodash.isEqual` does not compare date objects properly?
-const dateComparer = (value, other) => {
+const dateComparator = (value, other) => {
   if (isDate(value) && isDate(other)) {
     return +value === +other;
   }
@@ -32,6 +32,24 @@ const dateComparer = (value, other) => {
   return undefined;
 };
 
+const isEqualWithDates = (a, b) => isEqualWith(a, b, dateComparator);
+const isEqualWithEmptyArrays = (newQuery, current) => {
+  // We will only get empty arrays from `newQuery`
+  // Can't use isEqualWith because keys are unbalanced (guessing)
+  return isEqual(
+    Object.entries(newQuery)
+      .filter(([, value]) => !Array.isArray(value) || !!value.length)
+      .reduce(
+        (acc, [key, value]) => ({
+          ...acc,
+          [key]: value,
+        }),
+        {}
+      ),
+    current
+  );
+};
+
 class OrganizationEventsContainer extends React.Component {
   static propTypes = {
     organization: SentryTypes.Organization,
@@ -68,6 +86,8 @@ class OrganizationEventsContainer extends React.Component {
       period: query.statsPeriod || (hasAbsolute ? null : DEFAULT_STATS_PERIOD),
       start: start || null,
       end: end || null,
+
+      // params from URL will be a string
       utc: typeof query.utc !== 'undefined' ? query.utc === 'true' : DEFAULT_USE_UTC,
     };
   }
@@ -76,7 +96,7 @@ class OrganizationEventsContainer extends React.Component {
     const values = OrganizationEventsContainer.getStateFromRouter(props);
 
     // Update `queryValues` if URL parameters change
-    if (!isEqualWith(state.queryValues, values, dateComparer)) {
+    if (!isEqualWithDates(state.queryValues, values)) {
       return {
         ...values,
         queryValues: values,
@@ -115,6 +135,11 @@ class OrganizationEventsContainer extends React.Component {
       newQuery.end = getUtcDateString(newQuery.end);
     }
 
+    // Only push new location if query params has changed because this will cause a heavy re-render
+    if (isEqualWithEmptyArrays(newQuery, router.location.query)) {
+      return;
+    }
+
     router.push({
       pathname: router.location.pathname,
       query: newQuery,
@@ -138,41 +163,18 @@ class OrganizationEventsContainer extends React.Component {
   };
 
   handleUpdatePeriod = () => {
-    this.setState(({period, start, end, utc, ...state}) => {
-      let newValueObj = {
-        ...(defined(period) ? {period} : {start, end}),
-        utc,
-      };
-
-      this.updateParams(newValueObj);
-
-      const {
-        period: _period, // eslint-disable-line no-unused-vars
-        start: _start, // eslint-disable-line no-unused-vars
-        end: _end, // eslint-disable-line no-unused-vars
-        ...queryValues
-      } = state.queryValues;
+    let {period, start, end, utc} = this.state;
+    let newValueObj = {
+      ...(defined(period) ? {period} : {start, end}),
+      utc,
+    };
 
-      return {
-        queryValues: {
-          ...queryValues,
-          ...newValueObj,
-        },
-      };
-    });
+    this.updateParams(newValueObj);
   };
 
   handleUpdate = type => {
-    this.setState(state => {
-      let newValueObj = {[type]: state[type]};
-      this.updateParams(newValueObj);
-      return {
-        queryValues: {
-          ...state.queryValues,
-          ...newValueObj,
-        },
-      };
-    });
+    let newValueObj = {[type]: this.state[type]};
+    this.updateParams(newValueObj);
   };
 
   handleUpdateEnvironmments = () => this.handleUpdate('environment');
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/utils/getParams.jsx b/src/sentry/static/sentry/app/views/organizationEvents/utils/getParams.jsx
index 1ef6653adc..1d94291bbf 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/utils/getParams.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/utils/getParams.jsx
@@ -1,6 +1,14 @@
 import {DEFAULT_STATS_PERIOD} from 'app/constants';
 import {defined} from 'app/utils';
 
+const getUtcValue = utc => {
+  if (typeof utc !== 'undefined') {
+    return utc === true || utc === 'true' ? 'true' : 'false';
+  }
+
+  return utc;
+};
+
 // Filters out params with null values and returns a default
 // `statsPeriod` when necessary.
 //
@@ -8,7 +16,7 @@ import {defined} from 'app/utils';
 //
 // TODO(billy): Make period parameter name consistent
 export function getParams(params = {}) {
-  let {start, end, period, statsPeriod, ...otherParams} = params;
+  let {start, end, period, statsPeriod, utc, ...otherParams} = params;
 
   // `statsPeriod` takes precendence for now
   period = statsPeriod || period;
@@ -22,6 +30,9 @@ export function getParams(params = {}) {
     statsPeriod: period,
     start: period ? null : start,
     end: period ? null : end,
+    // coerce utc into a string (it can be both: a string representation from router,
+    // or a boolean from time range picker)
+    utc: getUtcValue(utc),
     ...otherParams,
   })
     .filter(([key, value]) => defined(value))
diff --git a/tests/js/spec/views/organizationEvents/index.spec.jsx b/tests/js/spec/views/organizationEvents/index.spec.jsx
index 517cd7fba6..c581d17bcd 100644
--- a/tests/js/spec/views/organizationEvents/index.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/index.spec.jsx
@@ -96,11 +96,9 @@ describe('OrganizationEvents', function() {
     expect(wrapper.state('environment')).toEqual(['production', 'staging']);
 
     // close dropdown
-    await wrapper
-      .find('MultipleEnvironmentSelector')
-      .instance()
-      .doUpdate();
-    wrapper.update();
+    wrapper
+      .find('MultipleEnvironmentSelector StyledInput')
+      .simulate('keyDown', {key: 'Escape'});
     expect(router.push).toHaveBeenLastCalledWith({
       pathname: '/organizations/org-slug/events/',
       query: {
@@ -244,8 +242,31 @@ describe('OrganizationEvents', function() {
       query: {
         start: '2017-10-01T00:00:00',
         end: '2017-10-01T23:59:59',
-        utc: true,
+        utc: 'true',
       },
     });
   });
+
+  it('does not update router when toggling environment selector without changes', async function() {
+    wrapper.setProps({
+      router: {
+        ...router,
+        location: {
+          ...router.location,
+          query: {
+            environment: ['production'],
+            statsPeriod: '14d',
+            utc: 'true',
+          },
+        },
+      },
+    });
+
+    // Toggle MultipleProjectSelector
+    wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
+    wrapper
+      .find('MultipleEnvironmentSelector StyledInput')
+      .simulate('keyDown', {key: 'Escape'});
+    expect(router.push).not.toHaveBeenCalled();
+  });
 });
