commit e7124a9a59ee7c9d99a80f18a9d6fb03001bf21c
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jan 9 14:59:31 2017 -0800

    [quotas] configurable rate limits (#4732)
    
    * [quotas] configurable rate limits
    
    - add per-hour account (org) limits
    - add configurable windows to quota implementations
    - remove deprecated project quotas
    
    * remove useless check
    
    * invalid comment
    
    * fix 1hr window

diff --git a/CHANGES b/CHANGES
index d791cfba28..7d74a9656a 100644
--- a/CHANGES
+++ b/CHANGES
@@ -4,6 +4,9 @@ Version 8.13 (Unreleased)
 
 - Support for setting a custom security header for javascript fetching.
 
+- Project quotas are no longer available, and must now be configured via the organizational rate limits.
+- Quotas implementation now requires a tuple of maximum rate and interval window.
+
 Version 8.12
 ------------
 
diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index d7b5f94cf4..989a87d93e 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -49,7 +49,8 @@ def update_organization_scenario(runner):
 
 
 class OrganizationSerializer(serializers.ModelSerializer):
-    projectRateLimit = serializers.IntegerField(min_value=1, max_value=100)
+    accountRateLimit = serializers.IntegerField(min_value=0, max_value=1000000)
+    projectRateLimit = serializers.IntegerField(min_value=50, max_value=100)
     slug = serializers.RegexField(r'^[a-z0-9_\-]+$', max_length=50,
                                   required=False)
 
@@ -73,6 +74,12 @@ class OrganizationSerializer(serializers.ModelSerializer):
                 key='sentry:project-rate-limit',
                 value=int(self.init_data['projectRateLimit']),
             )
+        if 'accountRateLimit' in self.init_data:
+            OrganizationOption.objects.set_value(
+                organization=self.object,
+                key='sentry:account-rate-limit',
+                value=int(self.init_data['accountRateLimit']),
+            )
         return rv
 
 
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index b35b8d737b..338d9a2826 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -77,8 +77,15 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
 
         context = super(DetailedOrganizationSerializer, self).serialize(
             obj, attrs, user)
+        max_rate = quotas.get_maximum_quota(obj)
         context['quota'] = {
-            'maxRate': quotas.get_organization_quota(obj),
+            'maxRate': max_rate[0],
+            'maxRateInterval': max_rate[1],
+            'accountLimit': int(OrganizationOption.objects.get_value(
+                organization=obj,
+                key='sentry:account-rate-limit',
+                default=0,
+            )),
             'projectLimit': int(OrganizationOption.objects.get_value(
                 organization=obj,
                 key='sentry:project-rate-limit',
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 65f8d583b0..30c09e3ea7 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -682,7 +682,6 @@ SENTRY_FEATURES = {
     'organizations:sso': True,
     'organizations:callsigns': False,
     'projects:global-events': False,
-    'projects:quotas': True,
     'projects:plugins': True,
     'projects:dsym': False,
     'workflow:release-emails': False,
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index e0d1af5318..fd224de840 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -14,7 +14,6 @@ default_manager.add('organizations:onboarding', OrganizationFeature)  # NOQA
 default_manager.add('organizations:callsigns', OrganizationFeature)  # NOQA
 default_manager.add('organizations:repos', OrganizationFeature)  # NOQA
 default_manager.add('projects:global-events', ProjectFeature)  # NOQA
-default_manager.add('projects:quotas', ProjectFeature)  # NOQA
 default_manager.add('projects:plugins', ProjectPluginFeature)  # NOQA
 default_manager.add('workflow:release-emails')
 
diff --git a/src/sentry/quotas/base.py b/src/sentry/quotas/base.py
index 248315c912..79d1746edd 100644
--- a/src/sentry/quotas/base.py
+++ b/src/sentry/quotas/base.py
@@ -52,15 +52,7 @@ class Quota(object):
         return int(quota or 0)
 
     def get_project_quota(self, project):
-        from sentry.models import (
-            ProjectOption, Organization, OrganizationOption
-        )
-
-        # DEPRECATED: Will likely be removed in a future version unless Sentry
-        # team is convinced otherwise.
-        legacy_quota = ProjectOption.objects.get_value(project, 'quotas:per_minute', '')
-        if legacy_quota == '':
-            legacy_quota = settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE
+        from sentry.models import Organization, OrganizationOption
 
         org = getattr(project, '_organization_cache', None)
         if not org:
@@ -70,40 +62,51 @@ class Quota(object):
         max_quota_share = int(OrganizationOption.objects.get_value(
             org, 'sentry:project-rate-limit', 100))
 
-        if not legacy_quota and max_quota_share == 100:
-            return 0
-
-        org_quota = self.get_organization_quota(org)
+        if max_quota_share == 100:
+            return (0, 60)
 
-        quota = self.translate_quota(
-            legacy_quota,
-            org_quota,
-        )
+        org_quota, window = self.get_organization_quota(org)
 
-        # if we have set a max project quota percentage and there's actually
-        # a quota set for the org, lets calculate the maximum by using the min
-        # of the two quotas
         if max_quota_share != 100 and org_quota:
-            if quota:
-                quota = min(quota, self.translate_quota(
-                    '{}%'.format(max_quota_share),
-                    org_quota,
-                ))
-            else:
-                quota = self.translate_quota(
-                    '{}%'.format(max_quota_share),
-                    org_quota,
-                )
-
-        return quota
+            quota = self.translate_quota(
+                '{}%'.format(max_quota_share),
+                org_quota,
+            )
+        else:
+            quota = 0
+
+        return (quota, window)
 
     def get_organization_quota(self, organization):
-        system_rate_limit = options.get('system.rate-limit')
+        from sentry.models import OrganizationOption
+
+        account_limit = int(OrganizationOption.objects.get_value(
+            organization=organization,
+            key='sentry:account-rate-limit',
+            default=0,
+        ))
+
+        system_limit = options.get('system.rate-limit')
+
         # If there is only a single org, this one org should
         # be allowed to consume the entire quota.
         if settings.SENTRY_SINGLE_ORGANIZATION:
-            return system_rate_limit
-        return self.translate_quota(
+            if system_limit < account_limit:
+                return (system_limit, 60)
+            return (account_limit, 3600)
+
+        # an account limit is enforced, which is set as a fixed value and cannot
+        # utilize percentage based limits
+        elif account_limit:
+            return (account_limit, 3600)
+
+        return (self.translate_quota(
             settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE,
-            system_rate_limit,
-        )
+            system_limit,
+        ), 60)
+
+    def get_maximum_quota(self, organization):
+        """
+        Return the maximum capable rate for an organization.
+        """
+        return (options.get('system.rate-limit'), 60)
diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
index d421202716..384a060e34 100644
--- a/src/sentry/quotas/redis.py
+++ b/src/sentry/quotas/redis.py
@@ -38,8 +38,8 @@ class RedisQuota(Quota):
 
     def get_quotas(self, project):
         return (
-            ('p:{}'.format(project.id), self.get_project_quota(project), 60),
-            ('o:{}'.format(project.organization.id), self.get_organization_quota(project.organization), 60),
+            ('p:{}'.format(project.id),) + self.get_project_quota(project),
+            ('o:{}'.format(project.organization.id),) + self.get_organization_quota(project.organization),
         )
 
     def get_redis_key(self, key, timestamp, interval):
diff --git a/src/sentry/static/sentry/app/components/forms/formField.jsx b/src/sentry/static/sentry/app/components/forms/formField.jsx
index 68f5fceafd..d6e4b8d821 100644
--- a/src/sentry/static/sentry/app/components/forms/formField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/formField.jsx
@@ -8,9 +8,9 @@ class FormField extends React.Component {
 }
 
 FormField.propTypes = {
-  label: React.PropTypes.string.isRequired,
   name: React.PropTypes.string.isRequired,
 
+  label: React.PropTypes.string,
   defaultValue: React.PropTypes.any,
   disabled: React.PropTypes.bool,
   error: React.PropTypes.string,
diff --git a/src/sentry/static/sentry/app/components/forms/inputField.jsx b/src/sentry/static/sentry/app/components/forms/inputField.jsx
index 5081eb023e..1ee1810ccf 100644
--- a/src/sentry/static/sentry/app/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/inputField.jsx
@@ -50,6 +50,10 @@ class InputField extends FormField {
     return 'id-' + this.props.name;
   }
 
+  getAttributes() {
+    return {};
+  }
+
   getField() {
     return (
       <input id={this.getId()}
@@ -60,7 +64,9 @@ class InputField extends FormField {
           disabled={this.props.disabled}
           ref="input"
           required={this.props.required}
-          value={this.state.value} />
+          value={this.state.value}
+          style={this.props.inputStyle}
+          {...this.getAttributes()} />
     );
   }
 
@@ -76,13 +82,16 @@ class InputField extends FormField {
     return (
       <div className={className}>
         <div className="controls">
-          <label htmlFor={this.getId()} className="control-label">{this.props.label}</label>
+          {this.props.label &&
+            <label htmlFor={this.getId()} className="control-label">{this.props.label}</label>
+          }
+          {this.getField()}
           {this.props.disabled && this.props.disabledReason &&
-            <span className="disabled-indicator tip" title={this.props.disabledReason}>
+            <span className="disabled-indicator tip"
+                  title={this.props.disabledReason}>
               <span className="icon-question" />
             </span>
           }
-          {this.getField()}
           {defined(this.props.help) &&
             <p className="help-block">{this.props.help}</p>
           }
diff --git a/src/sentry/static/sentry/app/components/forms/numberField.jsx b/src/sentry/static/sentry/app/components/forms/numberField.jsx
index 89095b52da..27d74af6c2 100644
--- a/src/sentry/static/sentry/app/components/forms/numberField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/numberField.jsx
@@ -4,4 +4,11 @@ export default class NumberField extends InputField {
   getType() {
     return 'number';
   }
+
+  getAttributes() {
+    return {
+        min: this.props.min || undefined,
+        max: this.props.max || undefined,
+    };
+  }
 }
diff --git a/src/sentry/static/sentry/app/components/forms/rangeField.jsx b/src/sentry/static/sentry/app/components/forms/rangeField.jsx
index f766886b84..cd6c4922ae 100644
--- a/src/sentry/static/sentry/app/components/forms/rangeField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/rangeField.jsx
@@ -1,5 +1,4 @@
 import jQuery from 'jquery';
-import React from 'react';
 import ReactDOM from 'react-dom';
 
 import InputField from './inputField';
@@ -18,12 +17,15 @@ export default class RangeField extends InputField {
   attachSlider() {
     let $value = jQuery('<span class="value" />');
     jQuery(ReactDOM.findDOMNode(this.refs.input)).on('slider:ready', (e, data) => {
+      let value = parseInt(data.value, 10);
       $value.appendTo(data.el);
-      $value.html(this.props.formatLabel(data.value));
+      $value.html(this.props.formatLabel(value));
     }).on('slider:changed', (e, data) => {
-      $value.html(this.props.formatLabel(data.value));
-      this.props.onChange(data.value);
+      let value = parseInt(data.value, 10);
+      $value.html(this.props.formatLabel(value));
+      this.props.onChange(value);
     }).simpleSlider({
+      value: this.props.defaultValue || this.props.value,
       range: [this.props.min, this.props.max],
       step: this.props.step,
       snap: this.props.snap,
@@ -36,20 +38,12 @@ export default class RangeField extends InputField {
     // implementation
   }
 
-  getField() {
-    return (
-      <input id={this.getId()}
-          type={this.getType()}
-          className="form-control"
-          placeholder={this.props.placeholder}
-          onChange={this.onChange.bind(this)}
-          disabled={this.props.disabled}
-          ref="input"
-          min={this.props.min}
-          max={this.props.max}
-          step={this.props.step}
-          value={this.state.value} />
-    );
+  getAttributes() {
+    return {
+      min: this.props.min,
+      max: this.props.max,
+      step: this.props.step,
+    };
   }
 
   getType() {
@@ -57,9 +51,9 @@ export default class RangeField extends InputField {
   }
 }
 
-RangeField.formatMinutes = (val) => {
-  val = parseInt(val / 60, 10);
-  return `${val} minute${(val != 1 ? 's' : '')}`;
+RangeField.formatMinutes = (value) => {
+  value = value / 60;
+  return `${value} minute${(value != 1 ? 's' : '')}`;
 };
 
 RangeField.defaultProps = {
diff --git a/src/sentry/static/sentry/app/components/forms/textareaField.jsx b/src/sentry/static/sentry/app/components/forms/textareaField.jsx
index b7fb37b444..8b12bf1a88 100644
--- a/src/sentry/static/sentry/app/components/forms/textareaField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/textareaField.jsx
@@ -12,7 +12,8 @@ export default class TextareaField extends InputField {
         disabled={this.props.disabled}
         required={this.props.required}
         placeholder={this.props.placeholder}
-        onChange={this.onChange.bind(this)} />
+        onChange={this.onChange.bind(this)}
+        {...this.getAttributes} />
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx b/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
index fc2d43df4e..649fd40893 100644
--- a/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
@@ -5,7 +5,46 @@ import IndicatorStore from '../../stores/indicatorStore';
 import OrganizationHomeContainer from '../../components/organizations/homeContainer';
 import OrganizationState from '../../mixins/organizationState';
 import {RangeField} from '../../components/forms';
-import {t, tct} from '../../locale';
+import {t} from '../../locale';
+
+const AccountLimit = React.createClass({
+  propTypes: {
+    value: React.PropTypes.number,
+    onChange: React.PropTypes.func.isRequired,
+  },
+
+  getRateLimitValues() {
+    let steps = [];
+    let i = 0;
+    while (i <= 1000000) {
+      steps.push(i);
+      if (i < 10000) {
+        i += 1000;
+      } else if (i < 100000) {
+        i += 10000;
+      } else {
+        i += 100000;
+      }
+    }
+    return steps;
+  },
+
+  render() {
+    return (
+      <RangeField
+          name="accountLimit"
+          min={0}
+          max={1000000}
+          value={this.props.value}
+          allowedValues={this.getRateLimitValues()}
+          help="The maximum number of events to accept across this entire organization."
+          placeholder="e.g. 500"
+          onChange={this.props.onChange}
+          inputClassName="col-md-3"
+          formatLabel={(value) => { return !value ? 'No Limit' : `${value.toLocaleString()} per hour`; }} />
+    );
+  },
+});
 
 const RateLimitEditor = React.createClass({
   propTypes: {
@@ -16,11 +55,15 @@ const RateLimitEditor = React.createClass({
 
   getInitialState() {
     let projectLimit = this.props.organization.quota.projectLimit;
+    let accountLimit = this.props.organization.quota.accountLimit;
 
     return {
       activeNav: 'rate-limits',
       currentProjectLimit: projectLimit,
       savedProjectLimit: projectLimit,
+      currentAccountLimit: accountLimit,
+      savedAccountLimit: accountLimit,
+      saving: false,
     };
   },
 
@@ -30,6 +73,12 @@ const RateLimitEditor = React.createClass({
     });
   },
 
+  onAccountLimitChange(value) {
+    this.setState({
+      currentAccountLimit: value,
+    });
+  },
+
   onSubmit(e) {
     e.preventDefault();
 
@@ -42,53 +91,74 @@ const RateLimitEditor = React.createClass({
       this.api.request(`/organizations/${this.props.organization.slug}/`, {
         method: 'PUT',
         data: {
-          projectRateLimit: this.state.currentProjectLimit
+          projectRateLimit: this.state.currentProjectLimit,
+          accountRateLimit: this.state.currentAccountLimit,
         },
         success: (data) => {
           // TODO(dcramer): propagate this change correctly (how??)
+          IndicatorStore.remove(loadingIndicator);
           this.props.organization.quota = data.quota;
           this.setState({
             saving: false,
             savedProjectLimit: data.quota.projectLimit,
+            savedAccountLimit: data.quota.accountLimit,
           });
         },
-        complete: () => {
+        error: () => {
+          this.setState({saving: false});
           IndicatorStore.remove(loadingIndicator);
-        },
+          IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
+            duration: 3000
+          });
+        }
       });
     });
   },
 
   render() {
-    let {currentProjectLimit, savedProjectLimit, saving} = this.state;
-    let maxRate = this.props.organization.quota.maxRate;
-    let canSave = savedProjectLimit === currentProjectLimit && !saving;
+    let {
+      currentProjectLimit,
+      savedProjectLimit,
+      currentAccountLimit,
+      savedAccountLimit,
+      saving,
+    } = this.state;
+    let {maxRate, maxRateInterval} = this.props.organization.quota;
+    let canSave = (
+      savedProjectLimit !== currentProjectLimit ||
+      savedAccountLimit !== currentAccountLimit
+    ) && !saving;
 
     return (
       <form onSubmit={this.onSubmit} className="ref-rate-limit-editor">
-        <p>
-          {/* This may not translate well to all languages since maxRate may affect plural form of "events per minute" */}
-          {tct('Your organization is limited to [strong:[maxRate] events per minute]. When this rate is exceeded the system will begin discarding data until the next interval.',
-            {
-              strong: <strong/>,
-              maxRate: maxRate
-            }
-          )}
-        </p>
+        <p>Rate limits allow you to control how much data is stored for this organization. When a rate is exceeded the system will begin discarding data until the next interval.</p>
+
+        <h5>Account Limit</h5>
+
+        {!maxRate ?
+          <AccountLimit value={currentAccountLimit} onChange={this.onAccountLimitChange} />
+        :
+          <p>Your account is limited to a maximum of {maxRate} events per {maxRateInterval} seconds.</p>
+        }
+
+        <h5>Per-Project Limit</h5>
 
         <RangeField
-            label={t('Max percentage a single project may send')}
-            defaultValue={savedProjectLimit}
+            name="projectLimit"
+            value={savedProjectLimit || 100}
             onChange={this.onProjectLimitChange}
-            formatLabel={(value) => { return `${value}%`; }} />
+            step={10}
+            min={50}
+            max={100}
+            formatLabel={(value) => { return value !== 100 ? `${value}%` : 'No Limit &mdash; 100%'; }} />
 
-        <div className="help-block">{t('The maximum percentage of your quota an individual project can consume.')}</div>
+        <div className="help-block">{t('The maximum percentage of your account quota an individual project can consume.')}</div>
 
         <div className="form-actions" style={{marginTop: 25}}>
           <button
             type="submit"
             className="btn btn-primary"
-            disabled={canSave}>{t('Apply Changes')}</button>
+            disabled={!canSave}>{t('Apply Changes')}</button>
         </div>
       </form>
     );
@@ -103,8 +173,6 @@ const OrganizationRateLimits = React.createClass({
       return null;
 
     let org = this.context.organization;
-    // TODO(dcramer): defined limit is only for testing atm
-    let maxRate = org.quota.maxRate;
 
     return (
       <OrganizationHomeContainer>
@@ -113,11 +181,7 @@ const OrganizationRateLimits = React.createClass({
             <h3>{t('Rate Limits')}</h3>
           </div>
           <div className="box-content with-padding">
-            {maxRate !== 0 ?
-              <RateLimitEditor organization={org} />
-            :
-              <p className="ref-no-rate-limits">{t('There are no rate limits configured for your organization.')}</p>
-            }
+            <RateLimitEditor organization={org} />
           </div>
         </div>
       </OrganizationHomeContainer>
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 088a9d3556..3f43cf68ca 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -187,11 +187,6 @@
     <li{% if page == 'alerts' %} class="active"{% endif %}>
         <a href="{% absolute_uri '/{}/{}/settings/alerts/' project.organization.slug project.slug %}">{% trans "Alerts" %}</a>
     </li>
-    {% feature projects:quotas project %}
-    <li{% if page == 'quotas' %} class="active"{% endif %}>
-        <a href="{% url 'sentry-manage-project-quotas' project.organization.slug project.slug %}">{% trans "Rate Limits" %}</a>
-    </li>
-    {% endfeature %}
     <li{% if page == 'tags' %} class="active"{% endif %}>
         <a href="{% url 'sentry-manage-project-tags' project.organization.slug project.slug %}">{% trans "Tags" %}</a>
     </li>
diff --git a/src/sentry/templates/sentry/projects/quotas.html b/src/sentry/templates/sentry/projects/quotas.html
index 6d0fcd8236..363ba9f251 100644
--- a/src/sentry/templates/sentry/projects/quotas.html
+++ b/src/sentry/templates/sentry/projects/quotas.html
@@ -16,8 +16,6 @@
 
         {% if not has_quotas %}
             <p><strong>{% blocktrans %}Note: The Sentry application is not configured to manage rate limits.{% endblocktrans %}</strong></p>
-        {% elif team_quota %}
-            <p>{% blocktrans %}Your team has <strong>{{ team_quota }} events per minute</strong> allocated collectively among projects.{% endblocktrans %}</p>
         {% elif system_quota %}
             <p>{% blocktrans %}The Sentry system has <strong>{{ system_quota }} events per minute</strong> allocated collectively among projects.{% endblocktrans %}</p>
         {% endif %}
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index df3f67fd41..8320479a2a 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -8,10 +8,8 @@ sentry.web.forms.projects
 from __future__ import absolute_import
 
 from django import forms
-from django.conf import settings
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import ProjectOption
 from sentry.web.forms.fields import RangeField
 
 
@@ -36,45 +34,6 @@ class DigestSettingsForm(forms.Form):
         return cleaned
 
 
-class ProjectQuotasForm(forms.Form):
-    per_minute = forms.CharField(
-        label=_('Maximum events per minute'),
-        widget=forms.TextInput(attrs={'placeholder': 'e.g. 90% or 100'}),
-        help_text=_('This cannot be higher than the team (or system) allotted maximum. The value can be either a fixed number, or a percentage that is relative to the team\'s overall quota.'),
-        required=False
-    )
-
-    def __init__(self, project, *args, **kwargs):
-        self.project = project
-        super(ProjectQuotasForm, self).__init__(*args, **kwargs)
-        per_minute = ProjectOption.objects.get_value(
-            self.project, 'quotas:per_minute', None
-        )
-        if per_minute is None:
-            per_minute = settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE
-        self.fields['per_minute'].initial = per_minute
-
-    def clean_per_minute(self):
-        value = self.cleaned_data.get('per_minute')
-        if not value:
-            return value
-        if value.endswith('%'):
-            try:
-                pct = int(value[:-1])
-            except (TypeError, ValueError):
-                raise forms.ValidationError('Invalid percentage')
-            if pct > 100:
-                raise forms.ValidationError('Invalid percentage')
-            if pct == 0:
-                value = '0'
-        return value
-
-    def save(self):
-        ProjectOption.objects.set_value(
-            self.project, 'quotas:per_minute', self.cleaned_data['per_minute'] or ''
-        )
-
-
 class NewRuleForm(forms.Form):
     label = forms.CharField(
         label=_('Label'),
diff --git a/src/sentry/web/frontend/project_quotas.py b/src/sentry/web/frontend/project_quotas.py
deleted file mode 100644
index f5bf3cc650..0000000000
--- a/src/sentry/web/frontend/project_quotas.py
+++ /dev/null
@@ -1,49 +0,0 @@
-from __future__ import absolute_import
-
-from django.contrib import messages
-from django.core.urlresolvers import reverse
-from django.utils.translation import ugettext_lazy as _
-
-from sentry import app, features
-from sentry.quotas.base import Quota
-from sentry.web.forms.projects import ProjectQuotasForm
-from sentry.web.frontend.base import ProjectView
-
-ERR_NO_SSO = _('The quotas feature is not enabled for this project.')
-
-
-class ProjectQuotasView(ProjectView):
-    required_scope = 'project:write'
-
-    def handle(self, request, organization, team, project):
-        if not features.has('projects:quotas', project, actor=request.user):
-            messages.add_message(
-                request, messages.ERROR,
-                ERR_NO_SSO,
-            )
-            redirect = reverse('sentry-manage-project',
-                               args=[organization.slug, project.slug])
-            return self.redirect(redirect)
-
-        form = ProjectQuotasForm(project, request.POST or None)
-
-        if form and form.is_valid():
-            form.save()
-
-            messages.add_message(
-                request, messages.SUCCESS,
-                _('Your settings were saved successfully.'))
-
-            return self.redirect(reverse('sentry-manage-project-quotas', args=[project.organization.slug, project.slug]))
-
-        context = {
-            'organization': organization,
-            'team': project.team,
-            'page': 'quotas',
-            # TODO(dcramer): has_quotas is an awful hack
-            'has_quotas': type(app.quotas) != Quota,
-            'organization_quota': int(app.quotas.get_organization_quota(project.organization)),
-            'project': project,
-            'form': form,
-        }
-        return self.respond('sentry/projects/quotas.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 7257e08c35..ed89a1deef 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -60,7 +60,6 @@ from sentry.web.frontend.project_plugin_disable import ProjectPluginDisableView
 from sentry.web.frontend.project_plugin_enable import ProjectPluginEnableView
 from sentry.web.frontend.project_plugin_reset import ProjectPluginResetView
 from sentry.web.frontend.project_plugins import ProjectPluginsView
-from sentry.web.frontend.project_quotas import ProjectQuotasView
 from sentry.web.frontend.project_release_tracking import \
     ProjectReleaseTrackingView
 from sentry.web.frontend.project_rule_edit import ProjectRuleEditView
@@ -416,10 +415,6 @@ urlpatterns += patterns(
         ProjectTagsView.as_view(),
         name='sentry-manage-project-tags'),
 
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/quotas/$',
-        ProjectQuotasView.as_view(),
-        name='sentry-manage-project-quotas'),
-
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/alerts/rules/new/$',
         ProjectRuleEditView.as_view(),
         name='sentry-new-project-rule'),
diff --git a/tests/acceptance/test_organization_rate_limits.py b/tests/acceptance/test_organization_rate_limits.py
index d19c1dea8a..cfb8f4a8cd 100644
--- a/tests/acceptance/test_organization_rate_limits.py
+++ b/tests/acceptance/test_organization_rate_limits.py
@@ -32,7 +32,7 @@ class OrganizationRateLimitsTest(AcceptanceTestCase):
         self.login_as(self.user)
         self.path = '/organizations/{}/rate-limits/'.format(self.org.slug)
 
-    @patch('sentry.app.quotas.get_organization_quota', Mock(return_value=100))
+    @patch('sentry.app.quotas.get_maximum_quota', Mock(return_value=(100, 60)))
     def test_with_rate_limits(self):
         self.project.update(first_event=timezone.now())
         self.browser.get(self.path)
@@ -41,11 +41,11 @@ class OrganizationRateLimitsTest(AcceptanceTestCase):
         self.browser.snapshot('organization rate limits with quota')
         assert self.browser.element_exists('.ref-rate-limit-editor')
 
-    @patch('sentry.app.quotas.get_organization_quota', Mock(return_value=0))
+    @patch('sentry.app.quotas.get_maximum_quota', Mock(return_value=(0, 60)))
     def test_without_rate_limits(self):
         self.project.update(first_event=timezone.now())
         self.browser.get(self.path)
         self.browser.wait_until('.organization-home')
         self.browser.wait_until_not('.loading-indicator')
         self.browser.snapshot('organization rate limits without quota')
-        assert self.browser.element_exists('.ref-no-rate-limits')
+        assert self.browser.element_exists('.ref-rate-limit-editor')
diff --git a/tests/sentry/quotas/redis/tests.py b/tests/sentry/quotas/redis/tests.py
index dc835452ac..160ce96651 100644
--- a/tests/sentry/quotas/redis/tests.py
+++ b/tests/sentry/quotas/redis/tests.py
@@ -50,18 +50,18 @@ class RedisQuotaTest(TestCase):
     @patcher.object(RedisQuota, 'get_project_quota')
     def get_project_quota(self):
         inst = mock.MagicMock()
-        inst.return_value = 0
+        inst.return_value = (0, 60)
         return inst
 
     @patcher.object(RedisQuota, 'get_organization_quota')
     def get_organization_quota(self):
         inst = mock.MagicMock()
-        inst.return_value = 0
+        inst.return_value = (0, 60)
         return inst
 
     def test_uses_defined_quotas(self):
-        self.get_project_quota.return_value = 200
-        self.get_organization_quota.return_value = 300
+        self.get_project_quota.return_value = (200, 60)
+        self.get_organization_quota.return_value = (300, 60)
         assert set(self.quota.get_quotas(self.project)) == set((
             ('p:{}'.format(self.project.id), 200, 60),
             ('o:{}'.format(self.project.organization.id), 300, 60),
@@ -76,12 +76,12 @@ class RedisQuotaTest(TestCase):
 
     @mock.patch('sentry.quotas.redis.is_rate_limited', return_value=(False, False))
     def test_is_not_limited_without_rejections(self, is_rate_limited):
-        self.get_organization_quota.return_value = 100
-        self.get_project_quota.return_value = 200
+        self.get_organization_quota.return_value = (100, 60)
+        self.get_project_quota.return_value = (200, 60)
         assert not self.quota.is_rate_limited(self.project).is_limited
 
     @mock.patch('sentry.quotas.redis.is_rate_limited', return_value=(True, False))
     def test_is_limited_on_rejections(self, is_rate_limited):
-        self.get_organization_quota.return_value = 100
-        self.get_project_quota.return_value = 200
+        self.get_organization_quota.return_value = (100, 60)
+        self.get_project_quota.return_value = (200, 60)
         assert self.quota.is_rate_limited(self.project).is_limited
diff --git a/tests/sentry/quotas/test_base.py b/tests/sentry/quotas/test_base.py
index 6e6370b393..4540350908 100644
--- a/tests/sentry/quotas/test_base.py
+++ b/tests/sentry/quotas/test_base.py
@@ -2,7 +2,7 @@
 
 from __future__ import absolute_import
 
-from sentry.models import OrganizationOption, ProjectOption
+from sentry.models import OrganizationOption
 from sentry.quotas.base import Quota
 from sentry.testutils import TestCase
 
@@ -17,47 +17,14 @@ class QuotaTest(TestCase):
 
         with self.settings(SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE=0):
             with self.options({'system.rate-limit': 0}):
-                assert self.backend.get_project_quota(project) == 0
-
-            ProjectOption.objects.set_value(
-                project, 'quotas:per_minute', '80%'
-            )
-
-            with self.options({'system.rate-limit': 100}):
-                assert self.backend.get_project_quota(project) == 80
-
-            with self.options({'system.rate-limit': 0}):
-                assert self.backend.get_project_quota(project) == 0
-
-            ProjectOption.objects.set_value(
-                project, 'quotas:per_minute', '50'
-            )
-
-            with self.options({'system.rate-limit': 100}):
-                assert self.backend.get_project_quota(project) == 50
-
-            with self.options({'system.rate-limit': 0}):
-                assert self.backend.get_project_quota(project) == 50
+                assert self.backend.get_project_quota(project) == (0, 60)
 
             OrganizationOption.objects.set_value(
                 org, 'sentry:project-rate-limit', 80,
             )
 
             with self.options({'system.rate-limit': 100}):
-                assert self.backend.get_project_quota(project) == 50
-
-            with self.options({'system.rate-limit': 50}):
-                assert self.backend.get_project_quota(project) == 40
-
-            with self.options({'system.rate-limit': 0}):
-                assert self.backend.get_project_quota(project) == 50
-
-            ProjectOption.objects.set_value(
-                project, 'quotas:per_minute', ''
-            )
-
-            with self.options({'system.rate-limit': 100}):
-                assert self.backend.get_project_quota(project) == 80
+                assert self.backend.get_project_quota(project) == (80, 60)
 
             with self.options({'system.rate-limit': 0}):
-                assert self.backend.get_project_quota(project) == 0
+                assert self.backend.get_project_quota(project) == (0, 60)
diff --git a/tests/sentry/web/forms/projects/__init__.py b/tests/sentry/web/forms/projects/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/tests/sentry/web/forms/projects/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/tests/sentry/web/forms/projects/tests.py b/tests/sentry/web/forms/projects/tests.py
deleted file mode 100644
index 7dc2c0b7e4..0000000000
--- a/tests/sentry/web/forms/projects/tests.py
+++ /dev/null
@@ -1,31 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.models import Project
-from sentry.web.forms.projects import ProjectQuotasForm
-from sentry.testutils import TestCase
-
-
-class ProjectQuotasFormTest(TestCase):
-    def test_accepts_percentage(self):
-        project = Project(id=1)
-        form = ProjectQuotasForm(project, {'per_minute': '50%'})
-        assert form.is_valid()
-        assert form.cleaned_data['per_minute'] == '50%'
-
-    def test_invalidates_101_percent(self):
-        project = Project(id=1)
-        form = ProjectQuotasForm(project, {'per_minute': '101%'})
-        assert not form.is_valid()
-        assert 'per_minute' in form.errors
-
-    def test_accepts_numbers(self):
-        project = Project(id=1)
-        form = ProjectQuotasForm(project, {'per_minute': '100'})
-        assert form.is_valid()
-        assert form.cleaned_data['per_minute'] == '100'
-
-    def test_discards_0_percent(self):
-        project = Project(id=1)
-        form = ProjectQuotasForm(project, {'per_minute': '0%'})
-        assert form.is_valid()
-        assert form.cleaned_data['per_minute'] == '0'
diff --git a/tests/sentry/web/frontend/test_project_quotas.py b/tests/sentry/web/frontend/test_project_quotas.py
deleted file mode 100644
index 65e298e784..0000000000
--- a/tests/sentry/web/frontend/test_project_quotas.py
+++ /dev/null
@@ -1,25 +0,0 @@
-from __future__ import absolute_import, print_function
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.testutils import TestCase
-
-
-class ProjectQuotasTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-manage-project-quotas', args=[self.organization.slug, self.project.slug])
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path)
-
-    def test_simple(self):
-        self.login_as(self.user)
-
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/projects/quotas.html')
-        assert resp.context['organization'] == self.organization
-        assert resp.context['team'] == self.team
-        assert resp.context['project'] == self.project
