commit d467f69cf7092df13f54d67fb947a3436b601552
Author: James Cunningham <cunninghamjt09@gmail.com>
Date:   Fri Aug 26 11:02:27 2016 -1000

    Expand on feedback from more verbose deletion logging. (#4022)
    
    * Expand logging for entries.
    
    * Log only things that are actually delayed for a good amount of time
    
    * Log all delete() calls only.
    
    * Change merge tasks to use different logger.
    
    * We dont actually delete users.
    
    * Create audit entry for frontends too.
    
    * Unnecessary type lookup.
    
    * Hey look at that, update the other entry.

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index c7d149f656..ebe8b05c19 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -111,6 +111,9 @@ class Endpoint(APIView):
         )
 
         extra = {
+            'ip_address': entry.ip_address,
+            'organization_id': entry.organization_id,
+            'object_id': entry.target_object,
             'entry_id': entry.id,
             'actor_label': entry.actor_label
         }
diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index ae12d43754..a3af6a575f 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -22,6 +22,8 @@ from sentry.utils.apidocs import scenario, attach_scenarios
 
 ERR_DEFAULT_ORG = 'You cannot remove the default organization.'
 
+delete_logger = logging.getLogger('sentry.deletions.api')
+
 
 @scenario('RetrieveOrganization')
 def retrieve_organization_scenario(runner):
@@ -160,20 +162,13 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
         if organization.is_default:
             return Response({'detail': ERR_DEFAULT_ORG}, status=400)
 
-        transaction_id = uuid4().hex
-        logging.getLogger('sentry.deletions.api').info('organization.remove.queued', extra={
-            'organization_id': organization.id,
-            'organization_slug': organization.slug,
-            'actor_id': request.user.id,
-            'transaction_id': transaction_id,
-            'ip_address': request.META['REMOTE_ADDR'],
-        })
-
         updated = Organization.objects.filter(
             id=organization.id,
             status=OrganizationStatus.VISIBLE,
         ).update(status=OrganizationStatus.PENDING_DELETION)
         if updated:
+            transaction_id = uuid4().hex
+
             delete_organization.apply_async(
                 kwargs={
                     'object_id': organization.id,
@@ -191,4 +186,10 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
                 transaction_id=transaction_id,
             )
 
+            delete_logger.info('object.delete.queued', extra={
+                'object_id': organization.id,
+                'transaction_id': transaction_id,
+                'model': Organization.__name__,
+            })
+
         return Response(status=204)
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index c312e6bfc8..a7b5e2769a 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -21,6 +21,8 @@ from sentry.plugins import plugins
 from sentry.tasks.deletion import delete_project
 from sentry.utils.apidocs import scenario, attach_scenarios
 
+delete_logger = logging.getLogger('sentry.deletions.api')
+
 
 @scenario('GetProject')
 def get_project_scenario(runner):
@@ -287,22 +289,13 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             return Response('{"error": "Cannot remove projects internally used by Sentry."}',
                             status=status.HTTP_403_FORBIDDEN)
 
-        transaction_id = uuid4().hex
-        logging.getLogger('sentry.deletions.api').info('project.remove.queued', extra={
-            'organization_id': project.organization.id,
-            'organization_slug': project.organization.slug,
-            'project_id': project.id,
-            'project_slug': project.slug,
-            'actor_id': request.user.id,
-            'transaction_id': transaction_id,
-            'ip_address': request.META['REMOTE_ADDR'],
-        })
-
         updated = Project.objects.filter(
             id=project.id,
             status=ProjectStatus.VISIBLE,
         ).update(status=ProjectStatus.PENDING_DELETION)
         if updated:
+            transaction_id = uuid4().hex
+
             delete_project.apply_async(
                 kwargs={
                     'object_id': project.id,
@@ -320,4 +313,10 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                 transaction_id=transaction_id,
             )
 
+            delete_logger.info('object.delete.queued', extra={
+                'object_id': project.id,
+                'transaction_id': transaction_id,
+                'model': type(project).__name__,
+            })
+
         return Response(status=204)
diff --git a/src/sentry/api/endpoints/team_details.py b/src/sentry/api/endpoints/team_details.py
index 78e5a545bc..3fafdab3b8 100644
--- a/src/sentry/api/endpoints/team_details.py
+++ b/src/sentry/api/endpoints/team_details.py
@@ -14,6 +14,8 @@ from sentry.models import AuditLogEntryEvent, Team, TeamStatus
 from sentry.tasks.deletion import delete_team
 from sentry.utils.apidocs import scenario, attach_scenarios
 
+delete_logger = logging.getLogger('sentry.deletions.api')
+
 
 @scenario('GetTeam')
 def get_team_scenario(runner):
@@ -121,22 +123,12 @@ class TeamDetailsEndpoint(TeamEndpoint):
         immediate.  However once deletion has begun the state of a project
         changes and will be hidden from most public views.
         """
-        transaction_id = uuid4().hex
-        logging.getLogger('sentry.deletions.api').info('team.remove.queued', extra={
-            'organization_id': team.organization.id,
-            'organization_slug': team.organization.slug,
-            'team_id': team.id,
-            'team_slug': team.slug,
-            'actor_id': request.user.id,
-            'transaction_id': transaction_id,
-            'ip_address': request.META['REMOTE_ADDR'],
-        })
-
         updated = Team.objects.filter(
             id=team.id,
             status=TeamStatus.VISIBLE,
         ).update(status=TeamStatus.PENDING_DELETION)
         if updated:
+            transaction_id = uuid4().hex
             delete_team.apply_async(
                 kwargs={
                     'object_id': team.id,
@@ -154,4 +146,10 @@ class TeamDetailsEndpoint(TeamEndpoint):
                 transaction_id=transaction_id,
             )
 
+            delete_logger.info('object.delete.queued', extra={
+                'object_id': team.id,
+                'transaction_id': transaction_id,
+                'model': type(team).__name__,
+            })
+
         return Response(status=204)
diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index 36380e6b4c..b15da0c36e 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -39,11 +39,6 @@ def delete_organization(object_id, transaction_id=None, continuous=True, **kwarg
         pending_delete.send(sender=Organization, instance=o)
 
     for team in Team.objects.filter(organization=o).exclude(status=TeamStatus.DELETION_IN_PROGRESS).order_by('id')[:1]:
-        logger.info('team.remove.queued', extra={
-            'team_id': team.id,
-            'organization_id': o.id,
-            'transaction_id': transaction_id,
-        })
         team.update(status=TeamStatus.DELETION_IN_PROGRESS)
         delete_team(team.id, transaction_id=transaction_id, continuous=False)
         if continuous:
@@ -65,9 +60,10 @@ def delete_organization(object_id, transaction_id=None, continuous=True, **kwarg
         return
     o_id = o.id
     o.delete()
-    logger.info('organization.remove.deleted', extra={
-        'organization_id': o_id,
+    logger.info('object.delete.executed', extra={
+        'object_id': o_id,
         'transaction_id': transaction_id,
+        'model': Organization.__name__,
     })
 
 
@@ -91,11 +87,6 @@ def delete_team(object_id, transaction_id=None, continuous=True, **kwargs):
 
     # Delete 1 project at a time since this is expensive by itself
     for project in Project.objects.filter(team=t).exclude(status=ProjectStatus.DELETION_IN_PROGRESS).order_by('id')[:1]:
-        logger.info('project.remove.queued', extra={
-            'project_id': project.id,
-            'team_id': t.id,
-            'transaction_id': transaction_id,
-        })
         project.update(status=ProjectStatus.DELETION_IN_PROGRESS)
         delete_project(project.id, transaction_id=transaction_id, continuous=False)
         if continuous:
@@ -107,9 +98,10 @@ def delete_team(object_id, transaction_id=None, continuous=True, **kwargs):
 
     t_id = t.id
     t.delete()
-    logger.info('team.remove.deleted', extra={
-        'team_id': t_id,
+    logger.info('object.delete.executed', extra={
+        'object_id': t_id,
         'transaction_id': transaction_id,
+        'model': Team.__name__,
     })
 
 
@@ -142,9 +134,10 @@ def delete_project(object_id, transaction_id=None, continuous=True, **kwargs):
     project_keys = list(ProjectKey.objects.filter(project_id=object_id).values_list('id', flat=True))
     ProjectKey.objects.filter(project_id=object_id).delete()
     for key_id in project_keys:
-        logger.info('projectkey.remove.deleted', extra={
-            'projectkey_id': key_id,
+        logger.info('object.delete.executed', extra={
+            'object_id': key_id,
             'transaction_id': transaction_id,
+            'model': ProjectKey.__name__,
         })
 
     model_list = (
@@ -202,9 +195,10 @@ def delete_project(object_id, transaction_id=None, continuous=True, **kwargs):
 
     p_id = p.id
     p.delete()
-    logger.info('project.remove.deleted', extra={
-        'project_id': p_id,
+    logger.info('object.delete.queued', extra={
+        'object_id': p_id,
         'transaction_id': transaction_id,
+        'model': Project.__name__,
     })
 
 
@@ -254,9 +248,10 @@ def delete_group(object_id, transaction_id=None, continuous=True, **kwargs):
         return
     g_id = group.id
     group.delete()
-    logger.info('group.remove.deleted', extra={
-        'group_id': g_id,
+    logger.info('object.delete.queued', extra={
+        'object_id': g_id,
         'transaction_id': transaction_id,
+        'model': Group.__name__,
     })
 
 
@@ -302,9 +297,10 @@ def delete_tag_key(object_id, transaction_id=None, continuous=True, **kwargs):
 
     tagkey_id = tagkey.id
     tagkey.delete()
-    logger.info('tagkey.remove.deleted', extra={
-        'tagkey_id': tagkey_id,
+    logger.info('object.delete.executed', extra={
+        'object_id': tagkey_id,
         'transaction_id': transaction_id,
+        'model': TagKey.__name__,
     })
 
 
@@ -316,7 +312,7 @@ def delete_events(relation, transaction_id=None, limit=100, logger=None):
     if logger is not None:
         # The only reason this is a different log statement is that logging every
         # single event that gets deleted in the relation will destroy disks.
-        logger.info('event.remove.deleted', extra=dict(
+        logger.info('object.delete.bulk_executed', extra=dict(
             relation.items() + [('transaction_id', transaction_id)],
         ))
 
@@ -342,12 +338,13 @@ def delete_objects(models, relation, transaction_id=None, limit=100, logger=None
     for model in models:
         for obj in model.objects.filter(**relation)[:limit]:
             obj_id = obj.id
-            model_name = type(obj).__name__.lower()
+            model_name = type(obj).__name__
             obj.delete()
             if logger is not None:
-                logger.info('%s.remove.deleted' % model_name, extra={
+                logger.info('object.delete.executed', extra={
+                    'object_id': obj_id,
                     'transaction_id': transaction_id,
-                    '%s_id' % model_name: obj_id,
+                    'model': model_name,
                 })
             has_more = True
 
diff --git a/src/sentry/tasks/merge.py b/src/sentry/tasks/merge.py
index 04c473dd20..495112c952 100644
--- a/src/sentry/tasks/merge.py
+++ b/src/sentry/tasks/merge.py
@@ -16,9 +16,7 @@ from django.db.models import F
 from sentry.tasks.base import instrumented_task, retry
 from sentry.tasks.deletion import delete_group
 
-# TODO(dcramer): probably should have a new logger for this, but it removes data
-# so lets bundle under deletions
-logger = logging.getLogger('sentry.deletions.merge')
+logger = logging.getLogger('sentry.group.merge')
 
 
 @instrumented_task(name='sentry.tasks.merge.merge_group', queue='merge',
@@ -39,13 +37,17 @@ def merge_group(from_object_id=None, to_object_id=None, **kwargs):
     try:
         group = Group.objects.get(id=from_object_id)
     except Group.DoesNotExist:
-        logger.warn('merge_group.malformed.invalid_id', extra={'object_id': from_object_id})
+        logger.warn('merge_group.malformed.invalid_id', extra={
+            'old_object_id': from_object_id,
+        })
         return
 
     try:
         new_group = Group.objects.get(id=to_object_id)
     except Group.DoesNotExist:
-        logger.warn('merge_group.malformed.invalid_id', extra={'object_id': from_object_id})
+        logger.warn('merge_group.malformed.invalid_id', extra={
+            'old_object_id': from_object_id,
+        })
         return
 
     model_list = (
@@ -167,9 +169,10 @@ def merge_objects(models, group, new_group, limit=1000,
     has_more = False
     for model in models:
         if logger is not None:
-            logger.info('%s.merge' % model.__name__.lower(), extra={
+            logger.info('group.merge', extra={
                 'new_group_id': new_group.id,
                 'old_group_id': group.id,
+                'model': model.__name__,
             })
         all_fields = model._meta.get_all_field_names()
         has_group = 'group' in all_fields
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 8c37765361..3cdcd79bcb 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -249,18 +249,25 @@ class BaseView(View, OrganizationMixin):
             with_projects=True,
         )
 
-    def create_audit_entry(self, request, **kwargs):
+    def create_audit_entry(self, request, transaction_id=None, **kwargs):
         entry = AuditLogEntry.objects.create(
             actor=request.user if request.user.is_authenticated() else None,
             # TODO(jtcunning): assert that REMOTE_ADDR is a real IP.
             ip_address=request.META['REMOTE_ADDR'],
             **kwargs
         )
-        audit_logger.info(entry.get_event_display(), extra={
+        extra = {
+            'ip_address': entry.ip_address,
+            'organization_id': entry.organization_id,
+            'object_id': entry.target_object,
             'entry_id': entry.id,
-            'actor_id': entry.actor_id,
-            'actor_label': entry.actor_label,
-        })
+            'actor_label': entry.actor_label
+        }
+
+        if transaction_id is not None:
+            extra['transaction_id'] = transaction_id
+
+        audit_logger.info(entry.get_event_display(), extra=extra)
 
 
 class OrganizationView(BaseView):
diff --git a/src/sentry/web/frontend/remove_account.py b/src/sentry/web/frontend/remove_account.py
index ee5eb14344..075a2529db 100644
--- a/src/sentry/web/frontend/remove_account.py
+++ b/src/sentry/web/frontend/remove_account.py
@@ -12,6 +12,8 @@ from sentry.models import (
 )
 from sentry.web.frontend.base import BaseView
 
+delete_logger = logging.getLogger('sentry.deletions.ui')
+
 
 class RemoveAccountForm(forms.Form):
     pass
@@ -51,7 +53,7 @@ class RemoveAccountView(BaseView):
                 if result['single_owner']:
                     orgs_to_remove.add(result['organization'].slug)
 
-            logging.getLogger('sentry.deletions.ui').info('user.deactivate', extra={
+            delete_logger.info('user.deactivate', extra={
                 'actor_id': request.user.id,
                 'ip_address': request.META['REMOTE_ADDR'],
             })
diff --git a/src/sentry/web/frontend/remove_organization.py b/src/sentry/web/frontend/remove_organization.py
index bc8bea862f..5e3dea2bca 100644
--- a/src/sentry/web/frontend/remove_organization.py
+++ b/src/sentry/web/frontend/remove_organization.py
@@ -8,7 +8,7 @@ from django.contrib import messages
 from django.core.urlresolvers import reverse
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import OrganizationStatus, Organization
+from sentry.models import AuditLogEntryEvent, OrganizationStatus, Organization
 from sentry.tasks.deletion import delete_organization
 from sentry.web.frontend.base import OrganizationView
 
@@ -16,6 +16,8 @@ ERR_DEFAULT_ORG = _('You cannot remove the default organization.')
 
 MSG_REMOVE_SUCCESS = _('The %s organization has been scheduled for removal.')
 
+delete_logger = logging.getLogger('sentry.deletions.ui')
+
 
 class RemoveOrganizationForm(forms.Form):
     pass
@@ -39,20 +41,13 @@ class RemoveOrganizationView(OrganizationView):
 
         form = self.get_form(request, organization)
         if form.is_valid():
-            transaction_id = uuid4().hex
-            logging.getLogger('sentry.deletions.ui').info('organization.remove.queued', extra={
-                'organization_id': organization.id,
-                'organization_slug': organization.slug,
-                'actor_id': request.user.id,
-                'transaction_id': transaction_id,
-                'ip_address': request.META['REMOTE_ADDR'],
-            })
-
             updated = Organization.objects.filter(
                 id=organization.id,
                 status=OrganizationStatus.VISIBLE,
             ).update(status=OrganizationStatus.PENDING_DELETION)
             if updated:
+                transaction_id = uuid4().hex
+
                 delete_organization.apply_async(
                     kwargs={
                         'object_id': organization.id,
@@ -61,6 +56,21 @@ class RemoveOrganizationView(OrganizationView):
                     countdown=86400,
                 )
 
+                self.create_audit_entry(
+                    request=request,
+                    organization=organization,
+                    target_object=organization.id,
+                    event=AuditLogEntryEvent.ORG_REMOVE,
+                    data=organization.get_audit_log_data(),
+                    transaction_id=transaction_id,
+                )
+
+                delete_logger.info('object.delete.queued', extra={
+                    'object_id': organization.id,
+                    'transaction_id': transaction_id,
+                    'model': Organization.__name__,
+                })
+
             messages.add_message(request, messages.SUCCESS,
                 MSG_REMOVE_SUCCESS % (organization.name,))
 
