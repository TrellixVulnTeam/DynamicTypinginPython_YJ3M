commit eff9e513f5841154b3ab17c8533dfbe552918b1b
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Wed Sep 13 13:05:29 2017 -0700

    feat(workflow): Render disabled feature component for small orgs (#6063)

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 82b733d464..d86a68bb72 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -35,7 +35,8 @@ def get_project_scenario(runner):
 @scenario('DeleteProject')
 def delete_project_scenario(runner):
     with runner.isolated_project('Plain Proxy') as project:
-        runner.request(method='DELETE', path='/projects/%s/%s/' % (runner.org.slug, project.slug))
+        runner.request(method='DELETE', path='/projects/%s/%s/' %
+                       (runner.org.slug, project.slug))
 
 
 @scenario('UpdateProject')
@@ -224,13 +225,17 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             ).delete()
 
         if result.get('digestsMinDelay'):
-            project.update_option('digests:mail:minimum_delay', result['digestsMinDelay'])
+            project.update_option(
+                'digests:mail:minimum_delay', result['digestsMinDelay'])
         if result.get('digestsMaxDelay'):
-            project.update_option('digests:mail:maximum_delay', result['digestsMaxDelay'])
+            project.update_option(
+                'digests:mail:maximum_delay', result['digestsMaxDelay'])
         if result.get('subjectPrefix'):
-            project.update_option('mail:subject_prefix', result['subjectPrefix'])
+            project.update_option('mail:subject_prefix',
+                                  result['subjectPrefix'])
         if result.get('subjectTemplate'):
-            project.update_option('mail:subject_template', result['subjectTemplate'])
+            project.update_option('mail:subject_template',
+                                  result['subjectTemplate'])
 
         if result.get('isSubscribed'):
             UserOption.objects.set_value(
@@ -245,15 +250,19 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             options = request.DATA.get('options', {})
             if 'sentry:origins' in options:
                 project.update_option(
-                    'sentry:origins', clean_newline_inputs(options['sentry:origins'])
+                    'sentry:origins', clean_newline_inputs(
+                        options['sentry:origins'])
                 )
             if 'sentry:resolve_age' in options:
-                project.update_option('sentry:resolve_age', int(options['sentry:resolve_age']))
+                project.update_option('sentry:resolve_age', int(
+                    options['sentry:resolve_age']))
             if 'sentry:scrub_data' in options:
-                project.update_option('sentry:scrub_data', bool(options['sentry:scrub_data']))
+                project.update_option('sentry:scrub_data', bool(
+                    options['sentry:scrub_data']))
             if 'sentry:scrub_defaults' in options:
                 project.update_option(
-                    'sentry:scrub_defaults', bool(options['sentry:scrub_defaults'])
+                    'sentry:scrub_defaults', bool(
+                        options['sentry:scrub_defaults'])
                 )
             if 'sentry:safe_fields' in options:
                 project.update_option(
@@ -263,7 +272,8 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             if 'sentry:sensitive_fields' in options:
                 project.update_option(
                     'sentry:sensitive_fields',
-                    [s.strip().lower() for s in options['sentry:sensitive_fields']]
+                    [s.strip().lower()
+                     for s in options['sentry:sensitive_fields']]
                 )
             if 'sentry:csp_ignored_sources_defaults' in options:
                 project.update_option(
@@ -281,7 +291,8 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                 )
             if 'sentry:reprocessing_active' in options:
                 project.update_option(
-                    'sentry:reprocessing_active', bool(options['sentry:reprocessing_active'])
+                    'sentry:reprocessing_active', bool(
+                        options['sentry:reprocessing_active'])
                 )
             if 'filters:blacklisted_ips' in options:
                 project.update_option(
@@ -289,10 +300,11 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                     clean_newline_inputs(options['filters:blacklisted_ips'])
                 )
             if 'filters:{}'.format(FilterTypes.RELEASES) in options:
-                if features.has('projects:additional-data-filters', project, actor=request.user):
+                if features.has('projects:custom-inbound-filters', project, actor=request.user):
                     project.update_option(
                         'sentry:{}'.format(FilterTypes.RELEASES),
-                        clean_newline_inputs(options['filters:{}'.format(FilterTypes.RELEASES)])
+                        clean_newline_inputs(
+                            options['filters:{}'.format(FilterTypes.RELEASES)])
                     )
                 else:
                     return Response(
@@ -301,11 +313,12 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                         }, status=400
                     )
             if 'filters:{}'.format(FilterTypes.ERROR_MESSAGES) in options:
-                if features.has('projects:additional-data-filters', project, actor=request.user):
+                if features.has('projects:custom-inbound-filters', project, actor=request.user):
                     project.update_option(
                         'sentry:{}'.format(FilterTypes.ERROR_MESSAGES),
                         clean_newline_inputs(
-                            options['filters:{}'.format(FilterTypes.ERROR_MESSAGES)],
+                            options['filters:{}'.format(
+                                FilterTypes.ERROR_MESSAGES)],
                             case_insensitive=False
                         )
                     )
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index a23aee9ba7..c8adec6c50 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -62,7 +62,8 @@ class ProjectSerializer(Serializer):
                     Q(user=user, key='subscribe_by_default', project__isnull=True)
                 )
             }
-            default_subscribe = (user_options.get('subscribe_by_default', '1') == '1')
+            default_subscribe = (user_options.get(
+                'subscribe_by_default', '1') == '1')
         else:
             bookmarks = set()
             user_options = {}
@@ -104,7 +105,7 @@ class ProjectSerializer(Serializer):
         feature_list = []
         for feature in (
             'global-events', 'data-forwarding', 'rate-limits', 'custom-filters', 'similarity-view',
-            'additional-data-filters',
+            'custom-inbound-filters',
         ):
             if features.has('projects:' + feature, obj, actor=user):
                 feature_list.append(feature)
@@ -135,30 +136,37 @@ class ProjectSerializer(Serializer):
 
 class ProjectWithOrganizationSerializer(ProjectSerializer):
     def get_attrs(self, item_list, user):
-        attrs = super(ProjectWithOrganizationSerializer, self).get_attrs(item_list, user)
+        attrs = super(ProjectWithOrganizationSerializer,
+                      self).get_attrs(item_list, user)
 
-        orgs = {d['id']: d for d in serialize(list(set(i.organization for i in item_list)), user)}
+        orgs = {d['id']: d for d in serialize(
+            list(set(i.organization for i in item_list)), user)}
         for item in item_list:
-            attrs[item]['organization'] = orgs[six.text_type(item.organization_id)]
+            attrs[item]['organization'] = orgs[six.text_type(
+                item.organization_id)]
         return attrs
 
     def serialize(self, obj, attrs, user):
-        data = super(ProjectWithOrganizationSerializer, self).serialize(obj, attrs, user)
+        data = super(ProjectWithOrganizationSerializer,
+                     self).serialize(obj, attrs, user)
         data['organization'] = attrs['organization']
         return data
 
 
 class ProjectWithTeamSerializer(ProjectSerializer):
     def get_attrs(self, item_list, user):
-        attrs = super(ProjectWithTeamSerializer, self).get_attrs(item_list, user)
+        attrs = super(ProjectWithTeamSerializer,
+                      self).get_attrs(item_list, user)
 
-        teams = {d['id']: d for d in serialize(list(set(i.team for i in item_list)), user)}
+        teams = {d['id']: d for d in serialize(
+            list(set(i.team for i in item_list)), user)}
         for item in item_list:
             attrs[item]['team'] = teams[six.text_type(item.team_id)]
         return attrs
 
     def serialize(self, obj, attrs, user):
-        data = super(ProjectWithTeamSerializer, self).serialize(obj, attrs, user)
+        data = super(ProjectWithTeamSerializer,
+                     self).serialize(obj, attrs, user)
         data['team'] = attrs['team']
         return data
 
@@ -188,7 +196,8 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
     )
 
     def get_attrs(self, item_list, user):
-        attrs = super(DetailedProjectSerializer, self).get_attrs(item_list, user)
+        attrs = super(DetailedProjectSerializer,
+                      self).get_attrs(item_list, user)
 
         project_ids = [i.id for i in item_list]
 
@@ -241,7 +250,8 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
         for option in queryset.iterator():
             options_by_project[option.project_id][option.key] = option.value
 
-        orgs = {d['id']: d for d in serialize(list(set(i.organization for i in item_list)), user)}
+        orgs = {d['id']: d for d in serialize(
+            list(set(i.organization for i in item_list)), user)}
 
         latest_releases = {
             r.actual_project_id: d
@@ -263,14 +273,16 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
     def serialize(self, obj, attrs, user):
         from sentry.plugins import plugins
 
-        data = super(DetailedProjectSerializer, self).serialize(obj, attrs, user)
+        data = super(DetailedProjectSerializer,
+                     self).serialize(obj, attrs, user)
         data.update(
             {
                 'latestRelease':
                 attrs['latest_release'],
                 'options': {
                     'sentry:origins':
-                    '\n'.join(attrs['options'].get('sentry:origins', ['*']) or []),
+                    '\n'.join(attrs['options'].get(
+                        'sentry:origins', ['*']) or []),
                     'sentry:resolve_age':
                     int(attrs['options'].get('sentry:resolve_age', 0)),
                     'sentry:scrub_data':
@@ -282,18 +294,24 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
                     'sentry:sensitive_fields':
                     attrs['options'].get('sentry:sensitive_fields', []),
                     'sentry:csp_ignored_sources_defaults':
-                    bool(attrs['options'].get('sentry:csp_ignored_sources_defaults', True)),
+                    bool(attrs['options'].get(
+                        'sentry:csp_ignored_sources_defaults', True)),
                     'sentry:csp_ignored_sources':
-                    '\n'.join(attrs['options'].get('sentry:csp_ignored_sources', []) or []),
+                    '\n'.join(attrs['options'].get(
+                        'sentry:csp_ignored_sources', []) or []),
                     'sentry:reprocessing_active':
-                    bool(attrs['options'].get('sentry:reprocessing_active', False)),
+                    bool(attrs['options'].get(
+                        'sentry:reprocessing_active', False)),
                     'filters:blacklisted_ips':
-                    '\n'.join(attrs['options'].get('sentry:blacklisted_ips', [])),
+                    '\n'.join(attrs['options'].get(
+                        'sentry:blacklisted_ips', [])),
                     'filters:{}'.format(FilterTypes.RELEASES):
-                    '\n'.join(attrs['options'].get('sentry:{}'.format(FilterTypes.RELEASES), [])),
+                    '\n'.join(attrs['options'].get(
+                        'sentry:{}'.format(FilterTypes.RELEASES), [])),
                     'filters:{}'.format(FilterTypes.ERROR_MESSAGES):
                     '\n'.
-                    join(attrs['options'].get('sentry:{}'.format(FilterTypes.ERROR_MESSAGES), [])),
+                    join(attrs['options'].get('sentry:{}'.format(
+                        FilterTypes.ERROR_MESSAGES), [])),
                     'feedback:branding':
                     attrs['options'].get('feedback:branding', '1') == '1',
                 },
@@ -310,7 +328,8 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
                 'subjectPrefix':
                 attrs['options'].get('mail:subject_prefix'),
                 'subjectTemplate':
-                attrs['options'].get('mail:subject_template') or DEFAULT_SUBJECT_TEMPLATE.template,
+                attrs['options'].get(
+                    'mail:subject_template') or DEFAULT_SUBJECT_TEMPLATE.template,
                 'organization':
                 attrs['org'],
                 'plugins':
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 85bc942ddb..dded079215 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -723,7 +723,7 @@ SENTRY_FEATURES = {
     'projects:data-forwarding': True,
     'projects:rate-limits': True,
     'projects:custom-filters': False,
-    'projects:additional-data-filters': False,
+    'projects:custom-inbound-filters': False,
     'projects:stream-hit-counts': False,
 }
 
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index f1532fd1ca..0fdbb874ce 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -25,7 +25,7 @@ default_manager.add('workflow:release-emails', ProjectFeature)  # NOQA
 default_manager.add('projects:sample-events', ProjectFeature)  # NOQA
 default_manager.add('projects:similarity-indexing', ProjectFeature)  # NOQA
 default_manager.add('projects:custom-filters', ProjectFeature)  # NOQA
-default_manager.add('projects:additional-data-filters', ProjectFeature)  # NOQA
+default_manager.add('projects:custom-inbound-filters', ProjectFeature)  # NOQA
 default_manager.add('projects:stream-hit-counts', ProjectFeature)  # NOQA
 
 # expose public api
diff --git a/src/sentry/static/sentry/app/stores/hookStore.jsx b/src/sentry/static/sentry/app/stores/hookStore.jsx
index f493b4b4f4..f6f1432a86 100644
--- a/src/sentry/static/sentry/app/stores/hookStore.jsx
+++ b/src/sentry/static/sentry/app/stores/hookStore.jsx
@@ -9,7 +9,8 @@ let validHookNames = new Set([
   'routes:admin',
   'routes:organization',
   'project:data-forwarding:disabled',
-  'project:rate-limits:disabled'
+  'project:rate-limits:disabled',
+  'project:custom-inbound-filters:disabled'
 ]);
 
 const HookStore = Reflux.createStore({
diff --git a/src/sentry/static/sentry/app/views/projectFilters.jsx b/src/sentry/static/sentry/app/views/projectFilters.jsx
index 912b6a2500..e08ac24e36 100644
--- a/src/sentry/static/sentry/app/views/projectFilters.jsx
+++ b/src/sentry/static/sentry/app/views/projectFilters.jsx
@@ -7,6 +7,7 @@ import moment from 'moment';
 import ApiMixin from '../mixins/apiMixin';
 import IndicatorStore from '../stores/indicatorStore';
 import GroupTombstones from '../components/groupTombstones';
+import HookStore from '../stores/hookStore';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import ProjectState from '../mixins/projectState';
@@ -62,13 +63,14 @@ const FilterRow = React.createClass({
         <div className="row">
           <div className="col-md-9">
             <h5 style={{marginBottom: 10}}>{data.name}</h5>
-            {data.description &&
+            {data.description && (
               <small
                 className="help-block"
                 dangerouslySetInnerHTML={{
                   __html: marked(data.description)
                 }}
-              />}
+              />
+            )}
           </div>
           <div className="col-md-3 align-right" style={{paddingRight: '25px'}}>
             <FilterSwitch {...this.props} size="lg" />
@@ -184,7 +186,9 @@ const LegacyBrowserFilterRow = React.createClass({
     let rows = _.groupBy(entries, (entry, i) => Math.floor(i / 3));
 
     return _.toArray(rows).map((row, i) => (
-      <div className="row m-b-1" key={i}>{row}</div>
+      <div className="row m-b-1" key={i}>
+        {row}
+      </div>
     ));
   },
 
@@ -196,13 +200,14 @@ const LegacyBrowserFilterRow = React.createClass({
         <div className="row">
           <div className="col-md-9">
             <h5 style={{marginBottom: 10}}>{data.name}</h5>
-            {data.description &&
+            {data.description && (
               <small
                 className="help-block"
                 dangerouslySetInnerHTML={{
                   __html: marked(data.description)
                 }}
-              />}
+              />
+            )}
           </div>
           <div className="col-md-3 align-right">
             <div className="filter-grid-filter">
@@ -230,26 +235,25 @@ const ProjectFiltersSettingsForm = React.createClass({
   mixins: [ApiMixin, ProjectState],
 
   getInitialState() {
-    let formData = {};
     let features = this.getProjectFeatures();
-    for (let key of Object.keys(this.props.initialData)) {
-      if (key.lastIndexOf('filters:') === 0) {
-        // the project details endpoint can partially succeed and still return a 400
-        // if the org does not have the additional-data-filters feature enabled,
-        // so this prevents the form from sending an empty string by default
-        if (
-          (!features.has('additional-data-filters') &&
-            key === 'filters:error_messages') ||
-          key === 'filters:releases'
-        )
-          continue;
+    let formData = {};
+    Object.keys(this.props.initialData)
+      .filter(
+        key =>
+          // the project details endpoint can partially succeed and still return a 400
+          // if the org does not have the additional-data-filters feature enabled,
+          // so this prevents the form from sending an empty string by default
+          features.has('custom-inbound-filters') ||
+          (key !== 'filters:releases' && key !== 'filters:error_messages')
+      )
+      .forEach(key => {
         formData[key] = this.props.initialData[key];
-      }
-    }
+      });
     return {
       hasChanged: false,
       formData,
-      errors: {}
+      errors: {},
+      hooksDisabled: HookStore.get('project:custom-inbound-filters:disabled')
     };
   },
 
@@ -309,6 +313,40 @@ const ProjectFiltersSettingsForm = React.createClass({
     );
   },
 
+  renderAdditionalFilters() {
+    let errors = this.state.errors;
+    return (
+      <div>
+        <h5>{t('Filter errors from these releases:')}</h5>
+        <TextareaField
+          key="release"
+          name="release"
+          help={this.renderLinkToGlobWiki()}
+          placeholder="e.g. 1.* or [!3].[0-9].*"
+          value={this.state.formData['filters:releases']}
+          error={errors['filters:releases']}
+          onChange={this.onFieldChange.bind(this, 'filters:releases')}
+        />
+        <h5>{t('Filter errors by error message:')}</h5>
+        <TextareaField
+          key="errorMessage"
+          name="errorMessage"
+          help={this.renderLinkToGlobWiki()}
+          placeholder="e.g. TypeError* or *: integer division or modulo by zero"
+          value={this.state.formData['filters:error_messages']}
+          error={errors['filters:error_messages']}
+          onChange={this.onFieldChange.bind(this, 'filters:error_messages')}
+        />
+      </div>
+    );
+  },
+
+  renderDisabledFeature() {
+    let project = this.getProject();
+    let organization = this.getOrganization();
+    return this.state.hooksDisabled.map(hook => hook(organization, project));
+  },
+
   render() {
     let isSaving = this.state.state === FormState.SAVING;
     let errors = this.state.errors;
@@ -316,12 +354,13 @@ const ProjectFiltersSettingsForm = React.createClass({
 
     return (
       <form onSubmit={this.onSubmit} className="form-stacked p-b-1">
-        {this.state.state === FormState.ERROR &&
+        {this.state.state === FormState.ERROR && (
           <div className="alert alert-error alert-block">
             {t(
               'Unable to save your changes. Please ensure all fields are valid and try again.'
             )}
-          </div>}
+          </div>
+        )}
         <fieldset>
           <h5>{t('Filter errors from these IP addresses:')}</h5>
           <TextareaField
@@ -333,29 +372,11 @@ const ProjectFiltersSettingsForm = React.createClass({
             error={errors['filters:blacklisted_ips']}
             onChange={this.onFieldChange.bind(this, 'filters:blacklisted_ips')}
           />
-          {features.has('additional-data-filters') &&
-            <div>
-              <h5>{t('Filter errors from these releases:')}</h5>
-              <TextareaField
-                key="release"
-                name="release"
-                help={this.renderLinkToGlobWiki()}
-                placeholder="e.g. 1.* or [!3].[0-9].*"
-                value={this.state.formData['filters:releases']}
-                error={errors['filters:releases']}
-                onChange={this.onFieldChange.bind(this, 'filters:releases')}
-              />
-              <h5>{t('Filter errors by error message:')}</h5>
-              <TextareaField
-                key="errorMessage"
-                name="errorMessage"
-                help={this.renderLinkToGlobWiki()}
-                placeholder="e.g. TypeError* or *: integer division or modulo by zero"
-                value={this.state.formData['filters:error_messages']}
-                error={errors['filters:error_messages']}
-                onChange={this.onFieldChange.bind(this, 'filters:error_messages')}
-              />
-            </div>}
+          {features.has('custom-inbound-filters') ? (
+            this.renderAdditionalFilters()
+          ) : (
+            this.renderDisabledFeature()
+          )}
           <div className="pull-right">
             <button
               type="submit"
@@ -363,7 +384,6 @@ const ProjectFiltersSettingsForm = React.createClass({
               disabled={isSaving || !this.state.hasChanged}>
               {t('Save Changes')}
             </button>
-
           </div>
         </fieldset>
       </form>
@@ -620,9 +640,11 @@ const ProjectFilters = React.createClass({
               projectId,
               onToggle: this.onToggleFilter
             };
-            return filter.id === 'legacy-browsers'
-              ? <LegacyBrowserFilterRow {...props} />
-              : <FilterRow {...props} />;
+            return filter.id === 'legacy-browsers' ? (
+              <LegacyBrowserFilterRow {...props} />
+            ) : (
+              <FilterRow {...props} />
+            );
           })}
 
           <div style={{borderTop: '1px solid #f2f3f4', padding: '20px 0 0'}}>
@@ -703,7 +725,9 @@ const ProjectFilters = React.createClass({
               />
             : <div className="box-content">
                 <div className="blankslate p-y-2">
-                  <h5>{t('Nothing filtered in the last 30 days.')}</h5>
+                  <h5>
+                    {t('Nothing filtered in the last 30 days.')}
+                  </h5>
                   <p className="m-b-0">
                     {t(
                       'Issues filtered as a result of your settings below will be shown here.'
@@ -712,25 +736,30 @@ const ProjectFilters = React.createClass({
                 </div>
               </div>}
         </div>
-        {features.has('custom-filters') &&
+        {features.has('custom-filters') && (
           <div className="sub-header flex flex-container flex-vertically-centered">
             <div className="p-t-1">
               <ul className="nav nav-tabs">
                 <li
-                  className={`col-xs-5  ${navSection == 'data-filters' ? 'active ' : ''}`}>
+                  className={`col-xs-5  ${navSection == 'data-filters'
+                    ? 'active '
+                    : ''}`}>
                   <a onClick={() => this.setProjectNavSection('data-filters')}>
                     {t('Data Filters')}
                   </a>
                 </li>
                 <li
-                  className={`col-xs-5 align-right ${navSection == 'discarded-groups' ? 'active ' : ''}`}>
+                  className={`col-xs-5 align-right ${navSection == 'discarded-groups'
+                    ? 'active '
+                    : ''}`}>
                   <a onClick={() => this.setProjectNavSection('discarded-groups')}>
                     {t('Discarded Groups')}
                   </a>
                 </li>
               </ul>
             </div>
-          </div>}
+          </div>
+        )}
         {this.renderSection()}
       </div>
     );
@@ -742,7 +771,9 @@ const ProjectFilters = React.createClass({
       <div>
         <h1>{t('Inbound Data Filters')}</h1>
         <p>
-          Filters allow you to prevent Sentry from storing events in certain situations. Filtered events are tracked separately from rate limits, and do not apply to any project quotas.
+          {t(
+            'Filters allow you to prevent Sentry from storing events in certain situations. Filtered events are tracked separately from rate limits, and do not apply to any project quotas.'
+          )}
         </p>
         {this.renderBody()}
       </div>
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index a21047f364..979871b1b0 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -172,7 +172,7 @@ class ProjectUpdateTest(APITestCase):
             'filters:releases': '1.*\n2.1.*',
             'filters:error_messages': 'TypeError*\n*: integer division by modulo or zero',
         }
-        with self.feature('projects:additional-data-filters', True):
+        with self.feature('projects:custom-inbound-filters', True):
             resp = self.client.put(url, data={'options': options})
         assert resp.status_code == 200, resp.content
         project = Project.objects.get(id=project.id)
