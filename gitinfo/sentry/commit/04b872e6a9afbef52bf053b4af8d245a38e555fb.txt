commit 04b872e6a9afbef52bf053b4af8d245a38e555fb
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 18 16:11:28 2015 -0700

    Pull in ThreadPool from Nydus
    
    - Removes nydus dependency
    
    Fixes GH-1794

diff --git a/setup.py b/setup.py
index 0768a663bb..9057fb3560 100755
--- a/setup.py
+++ b/setup.py
@@ -91,7 +91,6 @@ install_requires = [
     'logan>=0.7.1,<0.8.0',
     'lxml>=3.4.1',
     'mock>=0.8.0',
-    'nydus>=0.11.0,<0.12.0',
     'markdown>=2.4.1,<2.5.0',
     'petname>=1.7,<1.8',
     'progressbar>=2.2,<2.4',
diff --git a/src/sentry/management/commands/cleanup.py b/src/sentry/management/commands/cleanup.py
index 617a97ac19..1dfc790175 100644
--- a/src/sentry/management/commands/cleanup.py
+++ b/src/sentry/management/commands/cleanup.py
@@ -11,7 +11,6 @@ from datetime import timedelta
 from django.core.management.base import BaseCommand
 from django.db import connections
 from django.utils import timezone
-from nydus.utils import ThreadPool
 from optparse import make_option
 
 from sentry.app import nodestore
@@ -20,6 +19,7 @@ from sentry.models import (
     LostPasswordHash, TagValue
 )
 from sentry.utils import db
+from sentry.utils.threadpool import ThreadPool
 
 
 def delete_object(item):
diff --git a/src/sentry/utils/threadpool.py b/src/sentry/utils/threadpool.py
new file mode 100644
index 0000000000..59776f42d4
--- /dev/null
+++ b/src/sentry/utils/threadpool.py
@@ -0,0 +1,58 @@
+from __future__ import absolute_import
+
+from collections import defaultdict
+from Queue import Queue, Empty
+from threading import Thread
+
+
+class Worker(Thread):
+    def __init__(self, queue):
+        Thread.__init__(self)
+        self.queue = queue
+        self.results = defaultdict(list)
+
+    def run(self):
+        while True:
+            try:
+                ident, func, args, kwargs = self.queue.get_nowait()
+            except Empty:
+                break
+
+            try:
+                result = func(*args, **kwargs)
+                self.results[ident].append(result)
+            except Exception as e:
+                self.results[ident].append(e)
+            finally:
+                self.queue.task_done()
+
+        return self.results
+
+
+class ThreadPool(object):
+    def __init__(self, workers=10):
+        self.queue = Queue()
+        self.workers = []
+        self.tasks = []
+        for worker in xrange(workers):
+            self.workers.append(Worker(self.queue))
+
+    def add(self, ident, func, args=None, kwargs=None):
+        if args is None:
+            args = ()
+        if kwargs is None:
+            kwargs = {}
+        task = (ident, func, args, kwargs)
+        self.tasks.append(ident)
+        self.queue.put_nowait(task)
+
+    def join(self):
+        for worker in self.workers:
+            worker.start()
+
+        results = defaultdict(list)
+        for worker in self.workers:
+            worker.join()
+            for k, v in worker.results.iteritems():
+                results[k].extend(v)
+        return results
