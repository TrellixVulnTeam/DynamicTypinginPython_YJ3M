commit 7145e02b8908b51ce82b9c54f1bbe8a4a1bfb230
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon May 21 11:44:28 2018 -0700

    fix(ui): Fix Account Email Routing select styling (#8504)
    
    Requires us to add a `defaultValue` to the field, maybe a better experience would be to make use of the "clearable" feature, but I think this is good for now
    
    ![image](https://user-images.githubusercontent.com/79684/40321635-8493df8c-5ce4-11e8-988a-1c5661db3fe8.png)

diff --git a/src/sentry/static/sentry/app/views/acceptProjectTransfer.jsx b/src/sentry/static/sentry/app/views/acceptProjectTransfer.jsx
index e089c87b3b..d48ad7fd0f 100644
--- a/src/sentry/static/sentry/app/views/acceptProjectTransfer.jsx
+++ b/src/sentry/static/sentry/app/views/acceptProjectTransfer.jsx
@@ -4,7 +4,7 @@ import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import AsyncView from 'app/views/asyncView';
 import Form from 'app/views/settings/components/forms/form';
 import NarrowLayout from 'app/components/narrowLayout';
-import Select2Field from 'app/views/settings/components/forms/select2Field';
+import SelectField from 'app/views/settings/components/forms/selectField';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import {t, tct} from 'app/locale';
 
@@ -122,7 +122,7 @@ class AcceptProjectTransfer extends AsyncView {
               : {team: choices[0] && choices[0][0]}
           }
         >
-          <Select2Field
+          <SelectField
             choices={choices}
             label={hasTeamsFeature ? t('Organization') : t('Team')}
             name={hasTeamsFeature ? 'organization' : 'team'}
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx b/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
index 0181856e78..b94e127ca6 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
@@ -8,7 +8,7 @@ import Form from 'app/views/settings/components/forms/form';
 import JsonForm from 'app/views/settings/components/forms/jsonForm';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import ProjectsStore from 'app/stores/projectsStore';
-import Select2Field from 'app/views/settings/components/forms/select2Field';
+import SelectField from 'app/views/settings/components/forms/selectField';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import TextBlock from 'app/views/settings/components/text/textBlock';
 import {fields} from 'app/data/forms/accountNotificationSettings';
@@ -20,6 +20,7 @@ const ACCOUNT_NOTIFICATION_FIELDS = {
     description: t('Control alerts that you receive per project.'),
     type: 'select',
     choices: [[-1, t('Default')], [1, t('On')], [0, t('Off')]],
+    defaultValue: -1,
     defaultFieldName: 'subscribeByDefault',
   },
   workflow: {
@@ -34,6 +35,7 @@ const ACCOUNT_NOTIFICATION_FIELDS = {
       [1, t('Only on issues I subscribe to')],
       [2, t('Never')],
     ],
+    defaultValue: -1,
     defaultFieldName: 'workflowNotifications',
   },
   deploy: {
@@ -48,6 +50,7 @@ const ACCOUNT_NOTIFICATION_FIELDS = {
       [3, t('Only on deploys with my commits')],
       [4, t('Never')],
     ],
+    defaultValue: -1,
     defaultFieldName: 'deployNotifications',
   },
   reports: {
@@ -121,11 +124,11 @@ class AccountNotificationsByProject extends React.Component {
           {projectFields.map(field => {
             return (
               <PanelBodyLineItem key={field.name}>
-                <Select2Field
+                <SelectField
+                  defaultValue={field.defaultValue}
                   name={field.name}
                   choices={field.choices}
                   label={field.label}
-                  small={true}
                 />
               </PanelBodyLineItem>
             );
@@ -168,11 +171,11 @@ class AccountNotificationsByOrganization extends React.Component {
         {orgFields.map(field => {
           return (
             <PanelBodyLineItem key={field.name}>
-              <Select2Field
+              <SelectField
+                defaultValue={field.defaultValue}
                 name={field.name}
                 choices={field.choices}
                 label={field.label}
-                small
               />
             </PanelBodyLineItem>
           );
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
index 0574c0933a..b7b77bf950 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
@@ -4,7 +4,7 @@ import React from 'react';
 import BooleanField from 'app/views/settings/components/forms/booleanField';
 import RangeField from 'app/views/settings/components/forms/rangeField';
 // import Select2FieldAutocomplete from './select2FieldAutocomplete';
-import Select2Field from 'app/views/settings/components/forms/select2Field';
+import SelectField from 'app/views/settings/components/forms/selectField';
 // import Select2TextField from './select2TextField';
 import TextField from 'app/views/settings/components/forms/textField';
 import TextareaField from 'app/views/settings/components/forms/textareaField';
@@ -81,13 +81,13 @@ export default class FieldFromConfig extends React.Component {
       case 'select':
       case 'array':
         // the chrome required tip winds up in weird places
-        // for select2 elements, so just make it look like
-        // it's required (with *) and rely on server validation
+        // so just make it look like it's required in field (with *),
+        // and rely on server validation
         delete props.required;
         // if (props.has_autocomplete) {
         // return <Select2FieldAutocomplete {...props} />;
         // }
-        return <Select2Field {...props} />;
+        return <SelectField {...props} />;
       case 'radio':
         return <RadioField {...props} />;
       default:
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
index 819ff69b0d..227e5d2e1b 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
@@ -167,6 +167,9 @@ class FormField extends React.Component {
      */
     flexibleControlStateSize: PropTypes.bool,
 
+    // Default value to use for form field if value is not specified in `<Form>` parent
+    defaultValue: PropTypes.string,
+
     // the following should only be used without form context
     onChange: PropTypes.func,
     onBlur: PropTypes.func,
@@ -298,6 +301,10 @@ class FormField extends React.Component {
       saveOnBlur,
       saveMessage,
       saveMessageAlertType,
+
+      // Don't pass `defaultValue` down to input fields, will be handled in form model
+      // eslint-disable-next-line no-unused-vars
+      defaultValue,
       ...props
     } = this.props;
     let id = this.getId();
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
index 2eddd38db3..ef3ee79a8d 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
@@ -22,13 +22,12 @@ export default class InputField extends React.Component {
   };
 
   render() {
-    let {className, field, ...otherProps} = this.props;
+    let {className, field} = this.props;
 
     return (
       <FormField className={className} {...this.props}>
         {({children, ...formFieldProps}) => {
           return field({
-            ...otherProps,
             ...formFieldProps,
           });
         }}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
index 6a3f324f05..b03ae34c88 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
@@ -129,9 +129,21 @@ class FormModel {
    */
   setFieldDescriptor(id, props) {
     this.fieldDescriptor.set(id, props);
+
+    // Set default value iff initialData for field is undefined
+    // This must take place before checking for `props.setValue` so that it can
+    // be applied to `defaultValue`
+    if (
+      typeof props.defaultValue !== 'undefined' &&
+      typeof this.initialData[id] === 'undefined'
+    ) {
+      this.initialData[id] = props.defaultValue;
+      this.fields.set(id, this.initialData[id]);
+    }
+
     if (typeof props.setValue === 'function') {
       this.initialData[id] = props.setValue(this.initialData[id], props);
-      this.setValue(id, this.initialData[id]);
+      this.fields.set(id, this.initialData[id]);
     }
   }
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/select2Field.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/selectField.jsx
similarity index 96%
rename from src/sentry/static/sentry/app/views/settings/components/forms/select2Field.jsx
rename to src/sentry/static/sentry/app/views/settings/components/forms/selectField.jsx
index 3e4e5f0556..e2c355914c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/select2Field.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/selectField.jsx
@@ -4,7 +4,7 @@ import React from 'react';
 import InputField from 'app/views/settings/components/forms/inputField';
 import SelectControl from 'app/components/forms/selectControl';
 
-export default class Select2Field extends React.Component {
+export default class SelectField extends React.Component {
   static propTypes = {
     ...InputField.propTypes,
     choices: PropTypes.oneOfType([PropTypes.array, PropTypes.func]).isRequired,
diff --git a/tests/acceptance/test_account_notification_settings.py b/tests/acceptance/test_account_notification_settings.py
index 17d5095abe..4bbe55ee77 100644
--- a/tests/acceptance/test_account_notification_settings.py
+++ b/tests/acceptance/test_account_notification_settings.py
@@ -30,3 +30,12 @@ class AccountNotificationSettingsTest(AcceptanceTestCase):
         self.browser.get(self.path)
         self.browser.wait_until_not('.loading-indicator')
         self.browser.snapshot('account notification settings')
+
+    def test_new_simple(self):
+        self.browser.get('/settings/account/notifications/')
+        self.browser.wait_until_not('.loading-indicator')
+        self.browser.snapshot('account notification - settings (new)')
+
+        self.browser.click_when_visible('#Alerts a')
+        self.browser.wait_until_not('.loading-indicator')
+        self.browser.snapshot('account notification - fine tune "Alerts" (new)')
diff --git a/tests/js/spec/components/forms/__snapshots__/formField.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/formField.spec.jsx.snap
new file mode 100644
index 0000000000..7fbc26e156
--- /dev/null
+++ b/tests/js/spec/components/forms/__snapshots__/formField.spec.jsx.snap
@@ -0,0 +1,405 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`FormField + model renders with Form 1`] = `
+<Form
+  allowUndo={false}
+  cancelLabel="Cancel"
+  className="form-stacked"
+  footerClass="form-actions align-right"
+  model={
+    FormModel {
+      "api": Client {},
+      "errors": Object {},
+      "fieldDescriptor": Map {
+        "fieldName" => Object {
+          "children": [Function],
+          "className": undefined,
+          "field": [Function],
+          "flexibleControlStateSize": false,
+          "hideErrorMessage": false,
+          "name": "fieldName",
+          "type": "text",
+        },
+      },
+      "fieldState": Object {},
+      "fields": Object {},
+      "formState": undefined,
+      "initialData": Object {},
+      "options": Object {
+        "allowUndo": false,
+        "apiEndpoint": undefined,
+        "apiMethod": undefined,
+        "onFieldChange": undefined,
+        "onSubmitError": [Function],
+        "onSubmitSuccess": [Function],
+        "resetOnError": undefined,
+        "saveOnBlur": false,
+      },
+      "snapshots": Array [
+        Map {},
+      ],
+    }
+  }
+  onSubmitError={[Function]}
+  onSubmitSuccess={[Function]}
+  requireChanges={false}
+  saveOnBlur={false}
+  submitDisabled={false}
+  submitLabel="Save Changes"
+  submitPriority="primary"
+>
+  <form
+    className="form-stacked"
+    onSubmit={[Function]}
+  >
+    <div>
+      <TextField
+        name="fieldName"
+      >
+        <InputField
+          field={[Function]}
+          name="fieldName"
+          type="text"
+        >
+          <FormField
+            field={[Function]}
+            flexibleControlStateSize={false}
+            hideErrorMessage={false}
+            name="fieldName"
+            type="text"
+          >
+            <Field
+              alignRight={false}
+              disabled={false}
+              field={[Function]}
+              id="fieldName"
+              inline={true}
+              name="fieldName"
+              required={false}
+              type="text"
+              visible={true}
+            >
+              <FieldWrapper
+                hasControlState={true}
+                inline={true}
+              >
+                <Component
+                  className="css-mq954e-FieldWrapper-inlineStyle etqqcs20"
+                  hasControlState={true}
+                  inline={true}
+                >
+                  <Flex
+                    className="css-mq954e-FieldWrapper-inlineStyle etqqcs20"
+                  >
+                    <Base
+                      className="etqqcs20 css-14yamts-FieldWrapper-inlineStyle"
+                    >
+                      <div
+                        className="etqqcs20 css-14yamts-FieldWrapper-inlineStyle"
+                        is={null}
+                      >
+                        <FieldControl
+                          alignRight={false}
+                          controlState={
+                            <ControlState
+                              model={
+                                FormModel {
+                                  "api": Client {},
+                                  "errors": Object {},
+                                  "fieldDescriptor": Map {
+                                    "fieldName" => Object {
+                                      "children": [Function],
+                                      "className": undefined,
+                                      "field": [Function],
+                                      "flexibleControlStateSize": false,
+                                      "hideErrorMessage": false,
+                                      "name": "fieldName",
+                                      "type": "text",
+                                    },
+                                  },
+                                  "fieldState": Object {},
+                                  "fields": Object {},
+                                  "formState": undefined,
+                                  "initialData": Object {},
+                                  "options": Object {
+                                    "allowUndo": false,
+                                    "apiEndpoint": undefined,
+                                    "apiMethod": undefined,
+                                    "onFieldChange": undefined,
+                                    "onSubmitError": [Function],
+                                    "onSubmitSuccess": [Function],
+                                    "resetOnError": undefined,
+                                    "saveOnBlur": false,
+                                  },
+                                  "snapshots": Array [
+                                    Map {},
+                                  ],
+                                }
+                              }
+                              name="fieldName"
+                            />
+                          }
+                          disabled={false}
+                          errorState={
+                            <Observer>
+                              [Function]
+                            </Observer>
+                          }
+                          flexibleControlStateSize={false}
+                          inline={true}
+                        >
+                          <FieldControlErrorWrapper
+                            inline={true}
+                          >
+                            <Component
+                              className="css-1xbxyck-FieldControlErrorWrapper e78b1iv0"
+                              inline={true}
+                            >
+                              <Box
+                                className="css-1xbxyck-FieldControlErrorWrapper e78b1iv0"
+                              >
+                                <Base
+                                  className="e78b1iv0 css-1kkovz0-FieldControlErrorWrapper"
+                                >
+                                  <div
+                                    className="e78b1iv0 css-1kkovz0-FieldControlErrorWrapper"
+                                    is={null}
+                                  >
+                                    <FieldControlWrapper>
+                                      <Component
+                                        className="css-1ke1xob-FieldControlWrapper e78b1iv2"
+                                      >
+                                        <Flex
+                                          className="css-1ke1xob-FieldControlWrapper e78b1iv2"
+                                        >
+                                          <Base
+                                            className="e78b1iv2 css-w4o1g8-FieldControlWrapper"
+                                          >
+                                            <div
+                                              className="e78b1iv2 css-w4o1g8-FieldControlWrapper"
+                                              is={null}
+                                            >
+                                              <FieldControlStyled
+                                                alignRight={false}
+                                              >
+                                                <Component
+                                                  alignRight={false}
+                                                  className="css-1pkvhmy-FieldControlStyled e78b1iv1"
+                                                >
+                                                  <Box
+                                                    className="css-1pkvhmy-FieldControlStyled e78b1iv1"
+                                                  >
+                                                    <Base
+                                                      className="e78b1iv1 css-wkkbba-FieldControlStyled"
+                                                    >
+                                                      <div
+                                                        className="e78b1iv1 css-wkkbba-FieldControlStyled"
+                                                        is={null}
+                                                      >
+                                                        <Observer>
+                                                          <Component
+                                                            disabled={false}
+                                                            error={false}
+                                                            field={[Function]}
+                                                            id="fieldName"
+                                                            initialData={Object {}}
+                                                            innerRef={[Function]}
+                                                            name="fieldName"
+                                                            onBlur={[Function]}
+                                                            onChange={[Function]}
+                                                            onKeyDown={[Function]}
+                                                            type="text"
+                                                            value=""
+                                                          >
+                                                            <Input
+                                                              disabled={false}
+                                                              error={false}
+                                                              field={[Function]}
+                                                              id="fieldName"
+                                                              initialData={Object {}}
+                                                              innerRef={[Function]}
+                                                              name="fieldName"
+                                                              onBlur={[Function]}
+                                                              onChange={[Function]}
+                                                              onKeyDown={[Function]}
+                                                              type="text"
+                                                              value=""
+                                                            >
+                                                              <input
+                                                                className="css-1m7xmcf-Input-inputStyles e1xej46s0"
+                                                                disabled={false}
+                                                                id="fieldName"
+                                                                name="fieldName"
+                                                                onBlur={[Function]}
+                                                                onChange={[Function]}
+                                                                onKeyDown={[Function]}
+                                                                type="text"
+                                                                value=""
+                                                              />
+                                                            </Input>
+                                                          </Component>
+                                                        </Observer>
+                                                      </div>
+                                                    </Base>
+                                                  </Box>
+                                                </Component>
+                                              </FieldControlStyled>
+                                              <FieldControlState
+                                                flexibleControlStateSize={false}
+                                              >
+                                                <Component
+                                                  className="css-1j6hng-FieldControlState e1rziqw00"
+                                                  flexibleControlStateSize={false}
+                                                >
+                                                  <Flex
+                                                    className="css-1j6hng-FieldControlState e1rziqw00"
+                                                  >
+                                                    <Base
+                                                      className="e1rziqw00 css-1fqbh7r-FieldControlState"
+                                                    >
+                                                      <div
+                                                        className="e1rziqw00 css-1fqbh7r-FieldControlState"
+                                                        is={null}
+                                                      >
+                                                        <ControlState
+                                                          model={
+                                                            FormModel {
+                                                              "api": Client {},
+                                                              "errors": Object {},
+                                                              "fieldDescriptor": Map {
+                                                                "fieldName" => Object {
+                                                                  "children": [Function],
+                                                                  "className": undefined,
+                                                                  "field": [Function],
+                                                                  "flexibleControlStateSize": false,
+                                                                  "hideErrorMessage": false,
+                                                                  "name": "fieldName",
+                                                                  "type": "text",
+                                                                },
+                                                              },
+                                                              "fieldState": Object {},
+                                                              "fields": Object {},
+                                                              "formState": undefined,
+                                                              "initialData": Object {},
+                                                              "options": Object {
+                                                                "allowUndo": false,
+                                                                "apiEndpoint": undefined,
+                                                                "apiMethod": undefined,
+                                                                "onFieldChange": undefined,
+                                                                "onSubmitError": [Function],
+                                                                "onSubmitSuccess": [Function],
+                                                                "resetOnError": undefined,
+                                                                "saveOnBlur": false,
+                                                              },
+                                                              "snapshots": Array [
+                                                                Map {},
+                                                              ],
+                                                            }
+                                                          }
+                                                          name="fieldName"
+                                                        >
+                                                          <Observer />
+                                                          <Observer />
+                                                        </ControlState>
+                                                      </div>
+                                                    </Base>
+                                                  </Flex>
+                                                </Component>
+                                              </FieldControlState>
+                                            </div>
+                                          </Base>
+                                        </Flex>
+                                      </Component>
+                                    </FieldControlWrapper>
+                                    <Observer />
+                                  </div>
+                                </Base>
+                              </Box>
+                            </Component>
+                          </FieldControlErrorWrapper>
+                        </FieldControl>
+                      </div>
+                    </Base>
+                  </Flex>
+                </Component>
+              </FieldWrapper>
+            </Field>
+          </FormField>
+        </InputField>
+      </TextField>
+    </div>
+    <div
+      className="form-actions align-right"
+      style={
+        Object {
+          "marginTop": 25,
+        }
+      }
+    >
+      <Observer>
+        <Button
+          data-test-id="form-submit"
+          disabled={false}
+          priority="primary"
+          type="submit"
+        >
+          <StyledButton
+            aria-label="Save Changes"
+            data-test-id="form-submit"
+            disabled={false}
+            onClick={[Function]}
+            priority="primary"
+            role="button"
+            type="submit"
+          >
+            <Component
+              aria-label="Save Changes"
+              className="css-1msljz8-StyledButton-getColors e17811v30"
+              data-test-id="form-submit"
+              disabled={false}
+              onClick={[Function]}
+              priority="primary"
+              role="button"
+              type="submit"
+            >
+              <button
+                aria-label="Save Changes"
+                className="css-1msljz8-StyledButton-getColors e17811v30"
+                data-test-id="form-submit"
+                disabled={false}
+                onClick={[Function]}
+                priority="primary"
+                role="button"
+                type="submit"
+              >
+                <ButtonLabel>
+                  <Component
+                    className="css-1lzmoq1-ButtonLabel e17811v31"
+                  >
+                    <Flex
+                      align="center"
+                      className="css-1lzmoq1-ButtonLabel e17811v31"
+                    >
+                      <Base
+                        align="center"
+                        className="e17811v31 css-1br8hoo-ButtonLabel"
+                      >
+                        <div
+                          className="e17811v31 css-1br8hoo-ButtonLabel"
+                          is={null}
+                        >
+                          Save Changes
+                        </div>
+                      </Base>
+                    </Flex>
+                  </Component>
+                </ButtonLabel>
+              </button>
+            </Component>
+          </StyledButton>
+        </Button>
+      </Observer>
+    </div>
+  </form>
+</Form>
+`;
diff --git a/tests/js/spec/components/forms/formField.spec.jsx b/tests/js/spec/components/forms/formField.spec.jsx
new file mode 100644
index 0000000000..d2387cc62e
--- /dev/null
+++ b/tests/js/spec/components/forms/formField.spec.jsx
@@ -0,0 +1,73 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import TextField from 'app/views/settings/components/forms/textField';
+import Form from 'app/views/settings/components/forms/form';
+import FormModel from 'app/views/settings/components/forms/model';
+
+describe('FormField + model', function() {
+  let model;
+  let wrapper;
+  let routerContext = TestStubs.routerContext();
+
+  beforeEach(function() {
+    model = new FormModel();
+  });
+
+  it('renders with Form', function() {
+    wrapper = mount(
+      <Form model={model}>
+        <TextField name="fieldName" />
+      </Form>,
+      routerContext
+    );
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('sets initial data in model', function() {
+    wrapper = mount(
+      <Form model={model} initialData={{fieldName: 'test'}}>
+        <TextField name="fieldName" />
+      </Form>,
+      routerContext
+    );
+
+    expect(model.initialData.fieldName).toBe('test');
+  });
+
+  it('has `defaultValue` from field', function() {
+    wrapper = mount(
+      <Form model={model}>
+        <TextField name="fieldName" defaultValue="foo" />
+      </Form>,
+      routerContext
+    );
+
+    expect(model.initialData.fieldName).toBe('foo');
+    expect(model.fields.get('fieldName')).toBe('foo');
+  });
+
+  it('does not use `defaultValue` when there is initial data', function() {
+    wrapper = mount(
+      <Form model={model} initialData={{fieldName: 'test'}}>
+        <TextField name="fieldName" defaultValue="foo" />
+      </Form>,
+      routerContext
+    );
+
+    expect(model.initialData.fieldName).toBe('test');
+    expect(model.fields.get('fieldName')).toBe('test');
+  });
+
+  it('transforms `defaultValue` from field with `setValue`', function() {
+    wrapper = mount(
+      <Form model={model}>
+        <TextField name="fieldName" defaultValue="foo" setValue={v => `${v}${v}`} />
+      </Form>,
+      routerContext
+    );
+
+    expect(model.initialData.fieldName).toBe('foofoo');
+    expect(model.fields.get('fieldName')).toBe('foofoo');
+  });
+});
