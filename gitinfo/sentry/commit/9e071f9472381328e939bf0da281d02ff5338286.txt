commit 9e071f9472381328e939bf0da281d02ff5338286
Author: Mark Story <mark@sentry.io>
Date:   Tue Apr 23 18:08:31 2019 -0400

    fix(github) Fix github:enterprise issue search not working
    
    Adapting the changes from #12882 to not require abstraction piercing and
    also add tests for github:enterprise issue search as there were none
    before.

diff --git a/src/sentry/integrations/github/search.py b/src/sentry/integrations/github/search.py
index 6368fd7856..c2f0e40972 100644
--- a/src/sentry/integrations/github/search.py
+++ b/src/sentry/integrations/github/search.py
@@ -32,7 +32,7 @@ class GitHubSearchEndpoint(IntegrationEndpoint):
                 return Response({'detail': 'repo is a required parameter'}, status=400)
 
             try:
-                response = installation.get_client().search_issues(
+                response = installation.search_issues(
                     query=(u'repo:%s %s' % (repo, query)).encode('utf-8'),
                 )
             except ApiError as err:
diff --git a/src/sentry/integrations/github_enterprise/integration.py b/src/sentry/integrations/github_enterprise/integration.py
index f542b9459b..5ea6f2f04b 100644
--- a/src/sentry/integrations/github_enterprise/integration.py
+++ b/src/sentry/integrations/github_enterprise/integration.py
@@ -111,6 +111,9 @@ class GitHubEnterpriseIntegration(IntegrationInstallation, GitHubIssueBasic, Rep
             data.append({'name': repo['name'], 'identifier': repo['full_name']})
         return data
 
+    def search_issues(self, query):
+        return self.get_client().search_issues(query)
+
     def reinstall(self):
         installation_id = self.model.external_id.split(':')[1]
         metadata = self.model.metadata
diff --git a/tests/sentry/integrations/github/test_search.py b/tests/sentry/integrations/github/test_search.py
index 1bf730d7ae..3df8097c14 100644
--- a/tests/sentry/integrations/github/test_search.py
+++ b/tests/sentry/integrations/github/test_search.py
@@ -13,12 +13,14 @@ from sentry.testutils import APITestCase
 
 
 class GithubSearchTest(APITestCase):
+    # There is another test case that inherits from this
+    # one to ensure that github:enterprise behaves as expected.
     provider = 'github'
+    base_url = 'https://api.github.com'
 
-    def setUp(self):
-        super(GithubSearchTest, self).setUp()
+    def create_integration(self):
         future = datetime.now() + timedelta(hours=1)
-        self.integration = Integration.objects.create(
+        return Integration.objects.create(
             provider=self.provider,
             name='test',
             external_id=9999,
@@ -29,6 +31,10 @@ class GithubSearchTest(APITestCase):
                 'expires_at': future.replace(microsecond=0).isoformat(),
             }
         )
+
+    def setUp(self):
+        super(GithubSearchTest, self).setUp()
+        self.integration = self.create_integration()
         identity = Identity.objects.create(
             idp=IdentityProvider.objects.create(
                 type=self.provider,
@@ -57,7 +63,7 @@ class GithubSearchTest(APITestCase):
     def test_finds_external_issue_results(self):
         responses.add(
             responses.GET,
-            'https://api.github.com/search/issues?q=repo:example%20AEIOU',
+            self.base_url + '/search/issues?q=repo:example%20AEIOU',
             json={
                 'items': [
                     {'number': 25, 'title': 'AEIOU Error'},
@@ -84,7 +90,7 @@ class GithubSearchTest(APITestCase):
     def test_finds_external_issue_results_with_id(self):
         responses.add(
             responses.GET,
-            'https://api.github.com/search/issues?q=repo:example%2025',
+            self.base_url + '/search/issues?q=repo:example%2025',
             json={
                 'items': [
                     {'number': 25, 'title': 'AEIOU Error'},
@@ -109,7 +115,7 @@ class GithubSearchTest(APITestCase):
     def test_finds_repo_results(self):
         responses.add(
             responses.GET,
-            'https://api.github.com/search/repositories?q=org:test%20ex',
+            self.base_url + '/search/repositories?q=org:test%20ex',
             json={
                 'items': [
                     {
@@ -141,7 +147,7 @@ class GithubSearchTest(APITestCase):
     def test_finds_no_external_issues_results(self):
         responses.add(
             responses.GET,
-            'https://api.github.com/search/issues?q=repo:example%20nope',
+            self.base_url + '/search/issues?q=repo:example%20nope',
             json={'items': []}
         )
         resp = self.client.get(
@@ -160,7 +166,7 @@ class GithubSearchTest(APITestCase):
     def test_finds_no_project_results(self):
         responses.add(
             responses.GET,
-            'https://api.github.com/search/repositories?q=org:test%20nope',
+            self.base_url + '/search/repositories?q=org:test%20nope',
             json={}
         )
         resp = self.client.get(
@@ -178,7 +184,7 @@ class GithubSearchTest(APITestCase):
     def test_search_issues_rate_limit(self):
         responses.add(
             responses.GET,
-            'https://api.github.com/search/issues?q=repo:example%20ex',
+            self.base_url + '/search/issues?q=repo:example%20ex',
             status=403,
             json={
                 'message': 'API rate limit exceeded',
@@ -199,7 +205,7 @@ class GithubSearchTest(APITestCase):
     def test_search_project_rate_limit(self):
         responses.add(
             responses.GET,
-            'https://api.github.com/search/repositories?q=org:test%20ex',
+            self.base_url + '/search/repositories?q=org:test%20ex',
             status=403,
             json={
                 'message': 'API rate limit exceeded',
@@ -284,7 +290,7 @@ class GithubSearchTest(APITestCase):
     def test_search_issues_request_fails(self):
         responses.add(
             responses.GET,
-            'https://api.github.com/search/issues?q=repo:example%20ex',
+            self.base_url + '/search/issues?q=repo:example%20ex',
             status=503
         )
         resp = self.client.get(
@@ -301,7 +307,7 @@ class GithubSearchTest(APITestCase):
     def test_projects_request_fails(self):
         responses.add(
             responses.GET,
-            'https://api.github.com/search/repositories?q=org:test%20ex',
+            self.base_url + '/search/repositories?q=org:test%20ex',
             status=503
         )
         resp = self.client.get(
diff --git a/tests/sentry/integrations/github_enterprise/test_search.py b/tests/sentry/integrations/github_enterprise/test_search.py
new file mode 100644
index 0000000000..36fa1cb395
--- /dev/null
+++ b/tests/sentry/integrations/github_enterprise/test_search.py
@@ -0,0 +1,31 @@
+from __future__ import absolute_import
+
+from datetime import datetime, timedelta
+from sentry.models import Integration
+from ..github.test_search import GithubSearchTest
+
+
+class GithubEnterpriseSearchTest(GithubSearchTest):
+    # Inherit test methods/scenarios from GithubSearchTest
+    # and fill out the slots that customize it to use github:enterprise
+    provider = 'github_enterprise'
+    base_url = 'https://github.example.org/api/v3'
+
+    def create_integration(self):
+        future = datetime.now() + timedelta(hours=1)
+        return Integration.objects.create(
+            provider=self.provider,
+            name='test',
+            external_id=9999,
+            metadata={
+                'domain_name': 'github.example.org',
+                'account_type': 'Organization',
+                'access_token': '123456789',
+                'expires_at': future.replace(microsecond=0).isoformat(),
+                'installation': {
+                    'private_key': 'some private key',
+                    'id': 123456,
+                    'verify_ssl': True
+                }
+            }
+        )
