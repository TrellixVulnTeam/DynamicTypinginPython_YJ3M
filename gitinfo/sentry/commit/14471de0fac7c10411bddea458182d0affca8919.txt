commit 14471de0fac7c10411bddea458182d0affca8919
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Aug 1 13:31:53 2018 -0700

    chore(js): Add display name of wrapped component for HoCs (#9222)
    
    e.g. `withApi(MyWrappedComponent)`

diff --git a/src/sentry/static/sentry/app/utils/getDisplayName.jsx b/src/sentry/static/sentry/app/utils/getDisplayName.jsx
new file mode 100644
index 0000000000..edbcd65132
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/getDisplayName.jsx
@@ -0,0 +1,6 @@
+// Attempts to get a display name from a Component
+//
+// Use for HoCs
+export default function getDisplayName(WrappedComponent) {
+  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
+}
diff --git a/src/sentry/static/sentry/app/utils/withApi.jsx b/src/sentry/static/sentry/app/utils/withApi.jsx
index e68204d67c..007d760fa6 100644
--- a/src/sentry/static/sentry/app/utils/withApi.jsx
+++ b/src/sentry/static/sentry/app/utils/withApi.jsx
@@ -1,12 +1,13 @@
 import React from 'react';
 
 import {Client} from 'app/api';
+import getDisplayName from 'app/utils/getDisplayName';
 
 /**
  * HoC that provides "api" client when mounted, and clears API requests when component is unmounted
  */
-const withApi = WrappedComponent =>
-  class extends React.Component {
+const withApi = WrappedComponent => {
+  class WithApi extends React.Component {
     constructor(props) {
       super(props);
       this.api = new Client();
@@ -17,6 +18,11 @@ const withApi = WrappedComponent =>
     render() {
       return <WrappedComponent api={this.api} {...this.props} />;
     }
-  };
+  }
+
+  WithApi.displayName = `withApi(${getDisplayName(WrappedComponent)})`;
+
+  return WithApi;
+};
 
 export default withApi;
diff --git a/src/sentry/static/sentry/app/utils/withEnvironment.jsx b/src/sentry/static/sentry/app/utils/withEnvironment.jsx
index 75b52ce38b..ff2a2d3982 100644
--- a/src/sentry/static/sentry/app/utils/withEnvironment.jsx
+++ b/src/sentry/static/sentry/app/utils/withEnvironment.jsx
@@ -1,7 +1,8 @@
 import React from 'react';
-import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
 
+import getDisplayName from 'app/utils/getDisplayName';
 import LatestContextStore from 'app/stores/latestContextStore';
 
 // Passes the active environment to the wrapped component if the organizations:environments
@@ -9,7 +10,7 @@ import LatestContextStore from 'app/stores/latestContextStore';
 
 const withEnvironment = WrappedComponent =>
   createReactClass({
-    displayName: 'withEnvironment',
+    displayName: `withEnvironment(${getDisplayName(WrappedComponent)})`,
 
     mixins: [Reflux.listenTo(LatestContextStore, 'onLatestContextChange')],
 
diff --git a/src/sentry/static/sentry/app/utils/withEnvironmentInQueryString.jsx b/src/sentry/static/sentry/app/utils/withEnvironmentInQueryString.jsx
index e68c8256ec..4859fbb734 100644
--- a/src/sentry/static/sentry/app/utils/withEnvironmentInQueryString.jsx
+++ b/src/sentry/static/sentry/app/utils/withEnvironmentInQueryString.jsx
@@ -1,17 +1,18 @@
-import React from 'react';
+import {browserHistory} from 'react-router';
 import PropTypes from 'prop-types';
-import createReactClass from 'create-react-class';
+import React from 'react';
 import Reflux from 'reflux';
-import {browserHistory} from 'react-router';
+import createReactClass from 'create-react-class';
 import qs from 'query-string';
 
+import {ALL_ENVIRONMENTS_KEY} from 'app/constants';
+import getDisplayName from 'app/utils/getDisplayName';
 import EnvironmentStore from 'app/stores/environmentStore';
 import LatestContextStore from 'app/stores/latestContextStore';
-import {ALL_ENVIRONMENTS_KEY} from 'app/constants';
 
 const withEnvironmentInQueryString = WrappedComponent =>
   createReactClass({
-    displayName: 'withEnvironmentInQueryString',
+    displayName: `withEnvironmentInQueryString(${getDisplayName(WrappedComponent)})`,
 
     propTypes: {
       location: PropTypes.object,
diff --git a/src/sentry/static/sentry/app/utils/withLatestContext.jsx b/src/sentry/static/sentry/app/utils/withLatestContext.jsx
index 333d13a0d4..180210e6c5 100644
--- a/src/sentry/static/sentry/app/utils/withLatestContext.jsx
+++ b/src/sentry/static/sentry/app/utils/withLatestContext.jsx
@@ -1,10 +1,11 @@
+import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
-import PropTypes from 'prop-types';
+import createReactClass from 'create-react-class';
 
-import SentryTypes from 'app/sentryTypes';
+import getDisplayName from 'app/utils/getDisplayName';
 import LatestContextStore from 'app/stores/latestContextStore';
+import SentryTypes from 'app/sentryTypes';
 import withOrganizations from 'app/utils/withOrganizations';
 
 // HoC that returns most usable organization + project
@@ -13,7 +14,7 @@ import withOrganizations from 'app/utils/withOrganizations';
 const withLatestContext = WrappedComponent =>
   withOrganizations(
     createReactClass({
-      displayName: 'withLatestContext',
+      displayName: `withLatestContext(${getDisplayName(WrappedComponent)})`,
       propTypes: {
         organizations: PropTypes.arrayOf(SentryTypes.Organization),
       },
diff --git a/src/sentry/static/sentry/app/utils/withOrganizations.jsx b/src/sentry/static/sentry/app/utils/withOrganizations.jsx
index 7918d6575a..c60d3d169b 100644
--- a/src/sentry/static/sentry/app/utils/withOrganizations.jsx
+++ b/src/sentry/static/sentry/app/utils/withOrganizations.jsx
@@ -1,12 +1,13 @@
 import React from 'react';
-import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
 
+import getDisplayName from 'app/utils/getDisplayName';
 import OrganizationsStore from 'app/stores/organizationsStore';
 
 const withOrganizations = WrappedComponent =>
   createReactClass({
-    displayName: 'withOrganizations',
+    displayName: `withOrganizations(${getDisplayName(WrappedComponent)})`,
     mixins: [Reflux.connect(OrganizationsStore, 'organizations')],
 
     render() {
diff --git a/src/sentry/static/sentry/app/utils/withPlugins.jsx b/src/sentry/static/sentry/app/utils/withPlugins.jsx
index 91bcc161dc..ad8c5cf743 100644
--- a/src/sentry/static/sentry/app/utils/withPlugins.jsx
+++ b/src/sentry/static/sentry/app/utils/withPlugins.jsx
@@ -4,6 +4,7 @@ import createReactClass from 'create-react-class';
 
 import {defined} from 'app/utils';
 import {fetchPlugins} from 'app/actionCreators/plugins';
+import getDisplayName from 'app/utils/getDisplayName';
 import PluginsStore from 'app/stores/pluginsStore';
 import ProjectState from 'app/mixins/projectState';
 import SentryTypes from 'app/sentryTypes';
@@ -14,7 +15,7 @@ import SentryTypes from 'app/sentryTypes';
  */
 const withPlugins = WrappedComponent =>
   createReactClass({
-    displayName: 'withPlugins',
+    displayName: `withPlugins(${getDisplayName(WrappedComponent)})`,
     propTypes: {
       organization: SentryTypes.Organization,
       project: SentryTypes.Project,
diff --git a/src/sentry/static/sentry/app/utils/withProjects.jsx b/src/sentry/static/sentry/app/utils/withProjects.jsx
index 1443bd191e..5cdd2a047e 100644
--- a/src/sentry/static/sentry/app/utils/withProjects.jsx
+++ b/src/sentry/static/sentry/app/utils/withProjects.jsx
@@ -1,7 +1,8 @@
 import React from 'react';
-import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
 
+import getDisplayName from 'app/utils/getDisplayName';
 import ProjectsStore from 'app/stores/projectsStore';
 import SentryTypes from 'app/sentryTypes';
 
@@ -10,7 +11,7 @@ import SentryTypes from 'app/sentryTypes';
  */
 const withProjects = WrappedComponent =>
   createReactClass({
-    displayName: 'withProjects',
+    displayName: `withProjects(${getDisplayName(WrappedComponent)})`,
     propTypes: {
       organization: SentryTypes.Organization,
       project: SentryTypes.Project,
diff --git a/src/sentry/static/sentry/app/utils/withTeams.jsx b/src/sentry/static/sentry/app/utils/withTeams.jsx
index 9a302e8d5f..cf3658d76a 100644
--- a/src/sentry/static/sentry/app/utils/withTeams.jsx
+++ b/src/sentry/static/sentry/app/utils/withTeams.jsx
@@ -1,16 +1,17 @@
 import React from 'react';
-import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
 
-import TeamStore from 'app/stores/teamStore';
+import getDisplayName from 'app/utils/getDisplayName';
 import SentryTypes from 'app/sentryTypes';
+import TeamStore from 'app/stores/teamStore';
 
 /**
  * Higher order component that uses TeamStore and provides a list of teams
  */
 const withTeams = WrappedComponent =>
   createReactClass({
-    displayName: 'withTeams',
+    displayName: `withTeams(${getDisplayName(WrappedComponent)})`,
     propTypes: {
       organization: SentryTypes.Organization,
     },
diff --git a/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap b/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
index 87cdc6e69c..75f26adaf0 100644
--- a/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
@@ -5,7 +5,7 @@ exports[`SettingsLayout renders 1`] = `
   <SettingsHeader>
     <SettingsSubheader>
       <Container>
-        <withOrganizations />
+        <withOrganizations(withLatestContext(BackButton)) />
       </Container>
     </SettingsSubheader>
     <Container>
diff --git a/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap b/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap
index 6446f3f838..8adb490759 100644
--- a/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap
+++ b/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap
@@ -193,7 +193,7 @@ exports[`GroupSidebar renders with tags renders 1`] = `
       Tags
     </span>
   </h6>
-  <withEnvironment
+  <withEnvironment(TagDistributionMeter)
     data-test-id="group-tag"
     group={
       Object {
@@ -255,7 +255,7 @@ exports[`GroupSidebar renders with tags renders 1`] = `
     projectId="project-slug"
     tag="browser"
   />
-  <withEnvironment
+  <withEnvironment(TagDistributionMeter)
     data-test-id="group-tag"
     group={
       Object {
@@ -317,7 +317,7 @@ exports[`GroupSidebar renders with tags renders 1`] = `
     projectId="project-slug"
     tag="device"
   />
-  <withEnvironment
+  <withEnvironment(TagDistributionMeter)
     data-test-id="group-tag"
     group={
       Object {
@@ -379,7 +379,7 @@ exports[`GroupSidebar renders with tags renders 1`] = `
     projectId="project-slug"
     tag="url"
   />
-  <withEnvironment
+  <withEnvironment(TagDistributionMeter)
     data-test-id="group-tag"
     group={
       Object {
diff --git a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
index 296a212570..791d3ae041 100644
--- a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
@@ -491,7 +491,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
               <span
                 className="css-rkoh57-MenuItemLabel-MenuItemLabel ebifsjx0"
               >
-                <withOrganizations
+                <withOrganizations(SwitchOrganization)
                   canCreateOrganization={false}
                 >
                   <SwitchOrganization
@@ -530,7 +530,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
                       </SwitchOrganizationMenuActor>
                     </DropdownMenu>
                   </SwitchOrganization>
-                </withOrganizations>
+                </withOrganizations(SwitchOrganization)>
               </span>
             </MenuItemLabel>
           </div>
diff --git a/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
index 2a7c26905d..1c3001c862 100644
--- a/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
@@ -1,7 +1,7 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
 exports[`ProjectPluginDetails renders 1`] = `
-<withPlugins
+<withPlugins(ProjectPluginDetails)
   location={
     Object {
       "pathame": "/mock-pathname/",
@@ -633,5 +633,5 @@ exports[`ProjectPluginDetails renders 1`] = `
       </DocumentTitle>
     </SideEffect(DocumentTitle)>
   </ProjectPluginDetails>
-</withPlugins>
+</withPlugins(ProjectPluginDetails)>
 `;
diff --git a/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
index 8b08f673c0..ab3d213e6a 100644
--- a/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
@@ -14,7 +14,7 @@ exports[`Configure should render correctly render() should redirect to if no mat
     >
       Configure your application
     </h2>
-    <withProjects
+    <withProjects(withRouter(ProjectContext))
       orgId="testOrg"
       projectId="project-slug"
       style={
@@ -40,7 +40,7 @@ exports[`Configure should render correctly render() should redirect to if no mat
           }
         />
       </ProjectDocsContext>
-    </withProjects>
+    </withProjects(withRouter(ProjectContext))>
     <Waiting
       hasEvent={false}
       skip={[Function]}
@@ -73,7 +73,7 @@ exports[`Configure should render correctly render() should render platform docs
       >
         Configure your application
       </h2>
-      <withProjects
+      <withProjects(withRouter(ProjectContext))
         orgId="testOrg"
         projectId="project-slug"
         style={
@@ -489,7 +489,7 @@ exports[`Configure should render correctly render() should render platform docs
             </SideEffect(DocumentTitle)>
           </ProjectContext>
         </withRouter(ProjectContext)>
-      </withProjects>
+      </withProjects(withRouter(ProjectContext))>
       <Waiting
         hasEvent={false}
         skip={[Function]}
@@ -544,7 +544,7 @@ exports[`Configure should render correctly render() shouldn't redirect for a fou
     >
       Configure your application
     </h2>
-    <withProjects
+    <withProjects(withRouter(ProjectContext))
       orgId="testOrg"
       projectId="project-slug"
       style={
@@ -570,7 +570,7 @@ exports[`Configure should render correctly render() shouldn't redirect for a fou
           }
         />
       </ProjectDocsContext>
-    </withProjects>
+    </withProjects(withRouter(ProjectContext))>
     <Waiting
       hasEvent={false}
       skip={[Function]}
