commit 0b666271eaf4ab656f8d5803fc4fb81d9effe39b
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jan 7 11:03:42 2016 -0800

    Basic test for organization setup flow

diff --git a/src/sentry/auth/providers/dummy.py b/src/sentry/auth/providers/dummy.py
index 73c3709324..ddd250fc5c 100644
--- a/src/sentry/auth/providers/dummy.py
+++ b/src/sentry/auth/providers/dummy.py
@@ -29,3 +29,6 @@ class DummyProvider(Provider):
 
     def refresh_identity(self, auth_identity):
         pass
+
+    def build_config(self, state):
+        return {}
diff --git a/tests/sentry/web/frontend/test_organization_auth_settings.py b/tests/sentry/web/frontend/test_organization_auth_settings.py
index 80ad94b0c9..020b9739d2 100644
--- a/tests/sentry/web/frontend/test_organization_auth_settings.py
+++ b/tests/sentry/web/frontend/test_organization_auth_settings.py
@@ -55,6 +55,46 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
         assert resp.status_code == 200
         assert resp.content == self.provider.TEMPLATE
 
+    def test_basic_flow(self):
+        user = self.create_user('bar@example.com')
+        organization = self.create_organization(name='foo', owner=user)
+
+        base_path = reverse('sentry-organization-auth-settings', args=[organization.slug])
+
+        self.login_as(user)
+
+        with self.feature('organizations:sso'):
+            resp = self.client.post(base_path, {'provider': 'dummy'})
+
+            assert resp.status_code == 200
+            assert self.provider.TEMPLATE in resp.content
+
+            path = reverse('sentry-auth-sso')
+
+            resp = self.client.post(path, {'email': user.email})
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver{}'.format(base_path)
+
+        auth_provider = AuthProvider.objects.get(
+            organization=organization,
+            provider='dummy',
+        )
+
+        auth_identity = AuthIdentity.objects.get(
+            auth_provider=auth_provider,
+        )
+
+        assert user == auth_identity.user
+
+        member = OrganizationMember.objects.get(
+            organization=organization,
+            user=user,
+        )
+
+        assert getattr(member.flags, 'sso:linked')
+        assert not getattr(member.flags, 'sso:invalid')
+
     def test_disable_provider(self):
         organization = self.create_organization(name='foo', owner=self.user)
 
