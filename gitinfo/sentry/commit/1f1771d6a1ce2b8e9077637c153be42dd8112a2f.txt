commit 1f1771d6a1ce2b8e9077637c153be42dd8112a2f
Author: Katie Byers <katie.byers@sentry.io>
Date:   Tue Dec 10 20:54:13 2019 -0800

    ref(tests): Make sample event configurable, add event attribute tests (#16042)

diff --git a/tests/sentry/rules/conditions/test_event_attribute.py b/tests/sentry/rules/conditions/test_event_attribute.py
index 8095c1f581..ab8d467c31 100644
--- a/tests/sentry/rules/conditions/test_event_attribute.py
+++ b/tests/sentry/rules/conditions/test_event_attribute.py
@@ -7,40 +7,39 @@ from sentry.rules.conditions.event_attribute import EventAttributeCondition, Mat
 class EventAttributeConditionTest(RuleTestCase):
     rule_cls = EventAttributeCondition
 
-    def get_event(self):
-        event = self.store_event(
-            data={
-                "message": "hello world",
-                "request": {"method": "GET", "url": "http://example.com/"},
-                "user": {
-                    "id": "1",
-                    "ip_address": "127.0.0.1",
-                    "email": "foo@example.com",
-                    "username": "foo",
-                },
-                "exception": {
-                    "values": [
-                        {
-                            "type": "SyntaxError",
-                            "value": "hello world",
-                            "stacktrace": {
-                                "frames": [
-                                    {
-                                        "filename": "example.php",
-                                        "module": "example",
-                                        "context_line": 'echo "hello";',
-                                    }
-                                ]
-                            },
-                        }
-                    ]
-                },
-                "tags": [("environment", "production")],
-                "extra": {"foo": {"bar": "baz"}, "biz": ["baz"], "bar": "foo"},
-                "platform": "php",
+    def get_event(self, **kwargs):
+        data = {
+            "message": "hello world",
+            "request": {"method": "GET", "url": "http://example.com/"},
+            "user": {
+                "id": "1",
+                "ip_address": "127.0.0.1",
+                "email": "foo@example.com",
+                "username": "foo",
             },
-            project_id=self.project.id,
-        )
+            "exception": {
+                "values": [
+                    {
+                        "type": "SyntaxError",
+                        "value": "hello world",
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "filename": "example.php",
+                                    "module": "example",
+                                    "context_line": 'echo "hello";',
+                                }
+                            ]
+                        },
+                    }
+                ]
+            },
+            "tags": [("environment", "production")],
+            "extra": {"foo": {"bar": "baz"}, "biz": ["baz"], "bar": "foo"},
+            "platform": "php",
+        }
+        data.update(kwargs)
+        event = self.store_event(data, project_id=self.project.id)
         return event
 
     def test_render_label(self):
@@ -253,44 +252,117 @@ class EventAttributeConditionTest(RuleTestCase):
         self.assertDoesNotPass(rule, event)
 
     def test_stacktrace_filename(self):
-        event = self.get_event()
-        rule = self.get_rule(
-            data={
-                "match": MatchType.EQUAL,
-                "attribute": "stacktrace.filename",
-                "value": "example.php",
+        """Stacktrace.filename should match frames anywhere in the stack."""
+
+        event = self.get_event(
+            exception={
+                "values": [
+                    {
+                        "type": "SyntaxError",
+                        "value": "hello world",
+                        "stacktrace": {
+                            "frames": [
+                                {"filename": "example.php", "module": "example"},
+                                {"filename": "somecode.php", "module": "somecode"},
+                                {"filename": "othercode.php", "module": "othercode"},
+                            ]
+                        },
+                    }
+                ]
             }
         )
-        self.assertPasses(rule, event)
 
+        # correctly matching filenames, at various locations in the stacktrace
+        for value in ["example.php", "somecode.php", "othercode.php"]:
+            rule = self.get_rule(
+                data={"match": MatchType.EQUAL, "attribute": "stacktrace.filename", "value": value}
+            )
+            self.assertPasses(rule, event)
+
+        # non-matching filename
         rule = self.get_rule(
             data={"match": MatchType.EQUAL, "attribute": "stacktrace.filename", "value": "foo.php"}
         )
         self.assertDoesNotPass(rule, event)
 
     def test_stacktrace_module(self):
-        event = self.get_event()
-        rule = self.get_rule(
-            data={"match": MatchType.EQUAL, "attribute": "stacktrace.module", "value": "example"}
+        """Stacktrace.module should match frames anywhere in the stack."""
+
+        event = self.get_event(
+            exception={
+                "values": [
+                    {
+                        "type": "SyntaxError",
+                        "value": "hello world",
+                        "stacktrace": {
+                            "frames": [
+                                {"filename": "example.php", "module": "example"},
+                                {"filename": "somecode.php", "module": "somecode"},
+                                {"filename": "othercode.php", "module": "othercode"},
+                            ]
+                        },
+                    }
+                ]
+            }
         )
-        self.assertPasses(rule, event)
 
+        # correctly matching modules, at various locations in the stacktrace
+        for value in ["example", "somecode", "othercode"]:
+            rule = self.get_rule(
+                data={"match": MatchType.EQUAL, "attribute": "stacktrace.module", "value": value}
+            )
+            self.assertPasses(rule, event)
+
+        # non-matching module
         rule = self.get_rule(
             data={"match": MatchType.EQUAL, "attribute": "stacktrace.module", "value": "foo"}
         )
         self.assertDoesNotPass(rule, event)
 
     def test_stacktrace_code(self):
-        event = self.get_event()
-        rule = self.get_rule(
-            data={
-                "match": MatchType.EQUAL,
-                "attribute": "stacktrace.code",
-                "value": 'echo "hello";',
+        """Stacktrace.code should match frames anywhere in the stack."""
+
+        event = self.get_event(
+            exception={
+                "values": [
+                    {
+                        "type": "NameError",
+                        "value": "name 'hi' is not defined",
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "filename": "example.py",
+                                    "module": "example",
+                                    "function": "foo",
+                                    "context_line": "somecode.bar()",
+                                },
+                                {
+                                    "filename": "somecode.py",
+                                    "module": "somecode",
+                                    "function": "bar",
+                                    "context_line": "othercode.baz()",
+                                },
+                                {
+                                    "filename": "othercode.py",
+                                    "module": "othercode",
+                                    "function": "baz",
+                                    "context_line": "hi()",
+                                },
+                            ]
+                        },
+                    }
+                ]
             }
         )
-        self.assertPasses(rule, event)
 
+        # correctly matching code, at various locations in the stacktrace
+        for value in ["somecode.bar()", "othercode.baz()", "hi()"]:
+            rule = self.get_rule(
+                data={"match": MatchType.EQUAL, "attribute": "stacktrace.code", "value": value}
+            )
+            self.assertPasses(rule, event)
+
+        # non-matching code
         rule = self.get_rule(
             data={"match": MatchType.EQUAL, "attribute": "stacktrace.code", "value": "foo"}
         )
