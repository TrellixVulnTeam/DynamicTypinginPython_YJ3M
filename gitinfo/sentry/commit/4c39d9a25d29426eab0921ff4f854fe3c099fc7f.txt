commit 4c39d9a25d29426eab0921ff4f854fe3c099fc7f
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Sep 17 16:19:48 2019 -0700

    ref(ts): Convert `<Confirm>` (#14745)
    
    typescript me

diff --git a/src/sentry/static/sentry/app/components/confirm.jsx b/src/sentry/static/sentry/app/components/confirm.tsx
similarity index 61%
rename from src/sentry/static/sentry/app/components/confirm.jsx
rename to src/sentry/static/sentry/app/components/confirm.tsx
index 2cbf6e8043..d12432f0ec 100644
--- a/src/sentry/static/sentry/app/components/confirm.jsx
+++ b/src/sentry/static/sentry/app/components/confirm.tsx
@@ -5,7 +5,108 @@ import Modal from 'react-bootstrap/lib/Modal';
 import Button from 'app/components/button';
 import {t} from 'app/locale';
 
-class Confirm extends React.PureComponent {
+type MessageRenderProps = {
+  /**
+   * Confirms the modal
+   */
+  confirm: () => void;
+  /**
+   * Closes the modal, if `bypass` is true, will call `onConfirm` callback
+   */
+  close: (e: React.MouseEvent) => void;
+};
+
+type ChildrenRenderProps = {
+  open: () => void;
+  close: () => void;
+};
+
+type Props = {
+  /**
+   * Callback when user confirms
+   */
+  onConfirm: () => void;
+
+  /**
+   * Text to show in the confirmation button
+   */
+  confirmText: React.ReactNode;
+
+  /**
+   * Text to show in the cancel button
+   */
+  cancelText: React.ReactNode;
+
+  /**
+   * Button priority
+   */
+  priority: Button['props']['priority'];
+
+  /**
+   * Disables the confirm button
+   */
+  disableConfirmButton: boolean;
+
+  // Stop event propgation when opening the confirm modal
+  stopPropagation: boolean;
+
+  /**
+   * If true, will skip the confirmation modal and call `onConfirm` callback
+   */
+  bypass?: boolean;
+
+  /**
+   * Message to display to user when asking for confirmation
+   */
+  message?: React.ReactNode;
+  /**
+   * Renderer that passes:
+   * `confirm`: Allows renderer to perform confirm action
+   * `close`: Allows renderer to toggle confirm modal
+   */
+  renderMessage?: (renderProps: MessageRenderProps) => React.ReactNode;
+
+  /**
+   * Render props to control rendering of the modal in its entirety
+   */
+  children?:
+    | ((renderProps: ChildrenRenderProps) => React.ReactNode)
+    | React.ReactElement<{disabled: boolean; onClick: (e: React.MouseEvent) => void}>;
+
+  /**
+   * Passed to `children` render function
+   */
+  disabled?: boolean;
+
+  /**
+   * Callback function when user is in the confirming state
+   */
+  onConfirming?: () => void;
+
+  /**
+   * User cancels the modal
+   */
+  onCancel?: () => void;
+
+  /**
+   * Header of modal
+   */
+  header?: React.ReactNode;
+};
+
+type State = {
+  /**
+   * Is modal open
+   */
+  isModalOpen: boolean;
+
+  /**
+   * Is confirm button disabled
+   */
+  disableConfirmButton: boolean;
+};
+
+class Confirm extends React.PureComponent<Props, State> {
   static propTypes = {
     onConfirm: PropTypes.func.isRequired,
     confirmText: PropTypes.string.isRequired,
@@ -40,7 +141,12 @@ class Confirm extends React.PureComponent {
     stopPropagation: false,
   };
 
-  static getDerivedStateFromProps(props, state) {
+  state: State = {
+    isModalOpen: false,
+    disableConfirmButton: this.props.disableConfirmButton,
+  };
+
+  static getDerivedStateFromProps(props: Props, state: State) {
     // Reset the state to handle prop changes from ConfirmDelete
     if (props.disableConfirmButton !== state.disableConfirmButton) {
       return {
@@ -50,15 +156,7 @@ class Confirm extends React.PureComponent {
     return null;
   }
 
-  constructor(props) {
-    super(props);
-
-    this.state = {
-      isModalOpen: false,
-      disableConfirmButton: props.disableConfirmButton,
-    };
-    this.confirming = false;
-  }
+  confirming: boolean = false;
 
   openModal = () => {
     const {onConfirming, disableConfirmButton} = this.props;
@@ -68,7 +166,7 @@ class Confirm extends React.PureComponent {
 
     this.setState({
       isModalOpen: true,
-      disableConfirmButton,
+      disableConfirmButton: disableConfirmButton || false,
     });
 
     // always reset `confirming` when modal visibility changes
@@ -82,7 +180,7 @@ class Confirm extends React.PureComponent {
     }
     this.setState({
       isModalOpen: false,
-      disableConfirmButton,
+      disableConfirmButton: disableConfirmButton || false,
     });
 
     // always reset `confirming` when modal visibility changes
@@ -103,18 +201,18 @@ class Confirm extends React.PureComponent {
     this.confirming = true;
   };
 
-  handleToggle = e => {
-    const {disabled, bypass} = this.props;
+  handleToggle = (e: React.MouseEvent): void => {
+    const {disabled, bypass, stopPropagation, onConfirm} = this.props;
     if (disabled) {
       return;
     }
 
-    if (e && this.props.stopPropagation) {
+    if (e && stopPropagation) {
       e.stopPropagation();
     }
 
     if (bypass) {
-      this.props.onConfirm();
+      onConfirm();
       return;
     }
 
@@ -138,7 +236,8 @@ class Confirm extends React.PureComponent {
       header,
     } = this.props;
 
-    let confirmMessage;
+    let confirmMessage: React.ReactNode;
+
     if (typeof renderMessage === 'function') {
       confirmMessage = renderMessage({
         confirm: this.handleConfirm,
@@ -161,7 +260,8 @@ class Confirm extends React.PureComponent {
               close: this.closeModal,
               open: this.openModal,
             })
-          : React.cloneElement(children, {
+          : React.isValidElement(children) &&
+            React.cloneElement(children, {
               disabled,
               onClick: this.handleToggle,
             })}
diff --git a/src/sentry/static/sentry/app/components/globalModal.tsx b/src/sentry/static/sentry/app/components/globalModal.tsx
index 3168a650f1..da425e4be3 100644
--- a/src/sentry/static/sentry/app/components/globalModal.tsx
+++ b/src/sentry/static/sentry/app/components/globalModal.tsx
@@ -64,28 +64,29 @@ class GlobalModal extends React.Component<Props> {
 
   render() {
     const {visible, children, options} = this.props;
-    let Component = Modal;
+    const renderedChild =
+      typeof children === 'function'
+        ? children({
+            closeModal,
+            Header: Modal.Header,
+            Body: Modal.Body,
+            Footer: Modal.Footer,
+          })
+        : undefined;
 
     if (options && options.type === 'confirm') {
-      Component = Confirm;
+      return <Confirm onConfirm={() => {}}>{() => renderedChild}</Confirm>;
     }
 
     return (
-      <Component
+      <Modal
         className={options && options.modalClassName}
         show={visible}
         animation={false}
         onHide={this.handleCloseModal}
       >
-        {children
-          ? children({
-              closeModal,
-              Header: Modal.Header,
-              Body: Modal.Body,
-              Footer: Modal.Footer,
-            })
-          : null}
-      </Component>
+        {renderedChild}
+      </Modal>
     );
   }
 }
