commit a5ac49ff523f28f710da3ed6dcc4007b895e6b5c
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Feb 6 19:55:14 2012 -0800

    Added last seen and first seen to message filter values

diff --git a/sentry/manager.py b/sentry/manager.py
index 1ff4839e4d..12a8211ec8 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -456,13 +456,15 @@ class GroupManager(models.Manager, ChartMixin):
                 project=project,
                 key=key,
                 value=value,
-            ).update(times_seen=F('times_seen') + 1)
+            ).update(times_seen=F('times_seen') + 1, last_seen=date)
             if not affected:
                 group.messagefiltervalue_set.create(
                     project=project,
                     key=key,
                     value=value,
                     times_seen=1,
+                    last_seen=date,
+                    first_seen=date,
                 )
 
         return group, is_new, is_sample
diff --git a/sentry/migrations/0041_auto__add_field_messagefiltervalue_last_seen__add_field_messagefilterv.py b/sentry/migrations/0041_auto__add_field_messagefiltervalue_last_seen__add_field_messagefilterv.py
new file mode 100644
index 0000000000..ee61778efa
--- /dev/null
+++ b/sentry/migrations/0041_auto__add_field_messagefiltervalue_last_seen__add_field_messagefilterv.py
@@ -0,0 +1,214 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding field 'MessageFilterValue.last_seen'
+        db.add_column('sentry_messagefiltervalue', 'last_seen', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now, null=True, db_index=True), keep_default=False)
+
+        # Adding field 'MessageFilterValue.first_seen'
+        db.add_column('sentry_messagefiltervalue', 'first_seen', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now, null=True, db_index=True), keep_default=False)
+
+
+    def backwards(self, orm):
+        
+        # Deleting field 'MessageFilterValue.last_seen'
+        db.delete_column('sentry_messagefiltervalue', 'last_seen')
+
+        # Deleting field 'MessageFilterValue.first_seen'
+        db.delete_column('sentry_messagefiltervalue', 'first_seen')
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'logger', 'culprit', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'views': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.View']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectdomain': {
+            'Meta': {'unique_together': "(('project', 'domain'),)", 'object_name': 'ProjectDomain'},
+            'domain': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'domain_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.projectmember': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'ProjectMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_project_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.searchdocument': {
+            'Meta': {'unique_together': "(('project', 'group'),)", 'object_name': 'SearchDocument'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_changed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'total_events': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'})
+        },
+        'sentry.searchtoken': {
+            'Meta': {'unique_together': "(('document', 'field', 'token'),)", 'object_name': 'SearchToken'},
+            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'token_set'", 'to': "orm['sentry.SearchDocument']"}),
+            'field': ('django.db.models.fields.CharField', [], {'default': "'text'", 'max_length': '64'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.view': {
+            'Meta': {'object_name': 'View'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
+            'verbose_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'verbose_name_plural': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index e4cbf5565f..4bc8c3b5c2 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -485,6 +485,8 @@ class MessageFilterValue(Model):
     times_seen = models.PositiveIntegerField(default=0)
     key = models.CharField(choices=FILTER_KEYS, max_length=32)
     value = models.CharField(max_length=200)
+    last_seen = models.DateTimeField(default=datetime.now, db_index=True, null=True)
+    first_seen = models.DateTimeField(default=datetime.now, db_index=True, null=True)
 
     class Meta:
         unique_together = (('project', 'key', 'value', 'group'),)
diff --git a/sentry/plugins/sentry_servers/__init__.py b/sentry/plugins/sentry_servers/__init__.py
index d0bed472cb..370dcd4a86 100644
--- a/sentry/plugins/sentry_servers/__init__.py
+++ b/sentry/plugins/sentry_servers/__init__.py
@@ -22,10 +22,10 @@ class ServersPlugin(Plugin):
 
     def get_unique_servers(self, group):
         return group.messagefiltervalue_set.filter(key='server_name')\
-                   .values_list('value')\
-                   .annotate(times_seen=Sum('times_seen'))\
-                   .values_list('value', 'times_seen')\
-                   .order_by('-times_seen')
+                    .values_list('value')\
+                    .annotate(times_seen=Sum('times_seen'))\
+                    .values_list('value', 'times_seen', 'first_seen', 'last_seen')\
+                    .order_by('-times_seen')
 
     def panels(self, request, group, panel_list, **kwargs):
         panel_list.append((self.get_title(), self.get_url(group)))
diff --git a/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html b/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html
index dd7689469f..5b6c245274 100644
--- a/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html
+++ b/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html
@@ -13,18 +13,24 @@
             <colgroup>
                 <col>
                 <col style="width: 100px;">
+                <col style="width: 120px;">
+                <col style="width: 120px;">
             </colgroup>
             <thead>
                 <tr>
                     <th>{% trans "Server Name" %}</th>
-                    <td>{% trans "Times Seen" %}</th>
+                    <td class="text-align:center">{% trans "Times Seen" %}</th>
+                    <td class="text-align:center">{% trans "First Seen" %}</th>
+                    <td class="text-align:center">{% trans "Last Seen" %}</th>
                 </tr>
             </thead>
             <tbody>
-                {% for server_name, times_seen in server_list.objects %}
+                {% for server_name, times_seen, first_seen, last_seen in server_list.objects %}
                     <tr>
                         <td><a href="{% url sentry group.project_id %}?server_name={{ server_name }}">{{ server_name }}</a></td>
                         <td style="text-align:center">{{ times_seen|small_count }}</td>
+                        <td style="text-align:center">{% if first_seen %}{{ first_seen|timesince }}{% else %}<em>n/a</em>{% endif %}</td>
+                        <td style="text-align:center">{% if last_seen %}{{ last_seen|timesince }}{% else %}<em>n/a</em>{% endif %}</td>
                     </tr>
                 {% endfor %}
             </tbody>
diff --git a/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/widget.html b/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/widget.html
index 070434eee3..1b85725274 100644
--- a/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/widget.html
+++ b/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/widget.html
@@ -5,8 +5,8 @@
     <h6>{% trans "Servers" %}</h6>
 
     <ul class="server-list">
-        {% for server in unique_servers %}
-            <li><span class="count">{{ server.1|small_count }}</span> <a href="{% url sentry group.project_id %}?server_name={{ server.0 }}">{{ server.0 }}</a></li>
+        {% for server, times_seen, _, _ in unique_servers %}
+            <li><span class="count">{{ times_seen|small_count }}</span> <a href="{% url sentry group.project_id %}?server_name={{ server }}">{{ server }}</a></li>
         {% endfor %}
     </ul>
 {% endif %}
diff --git a/sentry/plugins/sentry_sites/__init__.py b/sentry/plugins/sentry_sites/__init__.py
index 99706f92bf..562e40feec 100644
--- a/sentry/plugins/sentry_sites/__init__.py
+++ b/sentry/plugins/sentry_sites/__init__.py
@@ -21,10 +21,10 @@ class SitesPlugin(Plugin):
 
     def get_unique_sites(self, group):
         return group.messagefiltervalue_set.filter(key='site')\
-                   .values_list('value')\
-                   .annotate(times_seen=Sum('times_seen'))\
-                   .values_list('value', 'times_seen')\
-                   .order_by('-times_seen')
+                    .values_list('value')\
+                    .annotate(times_seen=Sum('times_seen'))\
+                    .values_list('value', 'times_seen', 'first_seen', 'last_seen')\
+                    .order_by('-times_seen')
 
     def panels(self, request, group, panel_list, **kwargs):
         panel_list.append((self.get_title(), self.get_url(group)))
diff --git a/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html b/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html
index c2d089e166..29e20ae8f5 100644
--- a/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html
+++ b/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html
@@ -13,18 +13,24 @@
             <colgroup>
                 <col>
                 <col style="width: 100px;">
+                <col style="width: 120px;">
+                <col style="width: 120px;">
             </colgroup>
             <thead>
                 <tr>
                     <th>{% trans "Site Name" %}</th>
-                    <td>{% trans "Times Seen" %}</th>
+                    <td class="text-align:center">{% trans "Times Seen" %}</th>
+                    <td class="text-align:center">{% trans "First Seen" %}</th>
+                    <td class="text-align:center">{% trans "Last Seen" %}</th>
                 </tr>
             </thead>
             <tbody>
-                {% for site, times_seen in site_list.objects %}
+                {% for site, times_seen, first_seen, last_seen in site_list.objects %}
                     <tr>
                         <td><a href="{% url sentry group.project_id %}?site={{ site }}">{{ site }}</a></td>
                         <td style="text-align:center">{{ times_seen|small_count }}</td>
+                        <td style="text-align:center">{% if first_seen %}{{ first_seen|timesince }}{% else %}<em>n/a</em>{% endif %}</td>
+                        <td style="text-align:center">{% if last_seen %}{{ last_seen|timesince }}{% else %}<em>n/a</em>{% endif %}</td>
                     </tr>
                 {% endfor %}
             </tbody>
diff --git a/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/widget.html b/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/widget.html
index 196dd8d193..774d818e23 100644
--- a/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/widget.html
+++ b/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/widget.html
@@ -5,8 +5,8 @@
     <h6>{% trans "Sites" %}</h6>
 
     <ul class="server-list">
-        {% for site in unique_sites %}
-            <li><span class="count">{{ site.1|small_count }}</span> <a href="{% url sentry group.project_id %}?site={{ site.0 }}">{{ site.0 }}</a></li>
+        {% for site, times_seen, _, _ in unique_sites %}
+            <li><span class="count">{{ times_seen|small_count }}</span> <a href="{% url sentry group.project_id %}?site={{ site }}">{{ site }}</a></li>
         {% endfor %}
     </ul>
 {% endif %}
diff --git a/sentry/plugins/sentry_urls/__init__.py b/sentry/plugins/sentry_urls/__init__.py
index e9c4206f63..2bc3220d00 100644
--- a/sentry/plugins/sentry_urls/__init__.py
+++ b/sentry/plugins/sentry_urls/__init__.py
@@ -21,10 +21,10 @@ class UrlsPlugin(Plugin):
 
     def get_unique_urls(self, group):
         return group.messagefiltervalue_set.filter(key='url')\
-           .values_list('value')\
-           .annotate(times_seen=Sum('times_seen'))\
-           .values_list('value', 'times_seen')\
-           .order_by('-times_seen')
+                    .values_list('value')\
+                    .annotate(times_seen=Sum('times_seen'))\
+                    .values_list('value', 'times_seen', 'first_seen', 'last_seen')\
+                    .order_by('-times_seen')
 
     def panels(self, request, group, panel_list, **kwargs):
         panel_list.append((self.get_title(), self.get_url(group)))
diff --git a/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html b/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html
index 7efa78eb1b..aa2e577d6d 100644
--- a/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html
+++ b/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html
@@ -13,18 +13,24 @@
             <colgroup>
                 <col>
                 <col style="width: 100px;">
+                <col style="width: 120px;">
+                <col style="width: 120px;">
             </colgroup>
             <thead>
                 <tr>
                     <th>{% trans "URL" %}</th>
-                    <td>{% trans "Times Seen" %}</th>
+                    <td class="text-align:center">{% trans "Times Seen" %}</th>
+                    <td class="text-align:center">{% trans "First Seen" %}</th>
+                    <td class="text-align:center">{% trans "Last Seen" %}</th>
                 </tr>
             </thead>
             <tbody>
-                {% for url, times_seen in url_list.objects %}
+                {% for url, times_seen, first_seen, last_seen in url_list.objects %}
                     <tr>
                         <td><a href="{{ url }}">{{ url }}</a></td>
                         <td style="text-align:center">{{ times_seen|small_count }}</td>
+                        <td style="text-align:center">{% if first_seen %}{{ first_seen|timesince }}{% else %}<em>n/a</em>{% endif %}</td>
+                        <td style="text-align:center">{% if last_seen %}{{ last_seen|timesince }}{% else %}<em>n/a</em>{% endif %}</td>
                     </tr>
                 {% endfor %}
             </tbody>
diff --git a/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/widget.html b/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/widget.html
index 7dac60d5f1..203484da72 100644
--- a/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/widget.html
+++ b/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/widget.html
@@ -5,8 +5,8 @@
     <h6>{% trans "URLs" %}</h6>
 
     <ul class="url-list">
-        {% for link in unique_urls %}
-            <li><span class="count">{{ link.1|small_count }}</span> <a href="{{ link.0 }}">{{ link.0 }}</a></li>
+        {% for link, times_seen, _, _ in unique_urls %}
+            <li><span class="count">{{ times_seen|small_count }}</span> <a href="{{ link }}">{{ link }}</a></li>
         {% endfor %}
     </ul>
 {% endif %}
\ No newline at end of file
diff --git a/sentry/templatetags/sentry_helpers.py b/sentry/templatetags/sentry_helpers.py
index 85095e70c5..df8680d0ff 100644
--- a/sentry/templatetags/sentry_helpers.py
+++ b/sentry/templatetags/sentry_helpers.py
@@ -134,9 +134,9 @@ def get_actions(group, request):
             action_list = inst.actions(request, group, action_list)
         except:
             logger = logging.getLogger('sentry.plugins')
-            logger.exception('Error processing actions() on %r', inst.__class__, extra={
+            logger.error('Error processing actions() on %r', inst.__class__, extra={
                 'request': request,
-            })
+            }, exc_info=True)
 
     for action in action_list:
         yield action[0], action[1], request.path == action[1]
@@ -150,9 +150,9 @@ def get_panels(group, request):
             panel_list = inst.panels(request, group, panel_list)
         except:
             logger = logging.getLogger('sentry.plugins')
-            logger.exception('Error processing panels() on %r', inst.__class__, extra={
+            logger.error('Error processing panels() on %r', inst.__class__, extra={
                 'request': request,
-            })
+            }, exc_info=True)
 
     for panel in panel_list:
         yield panel[0], panel[1], request.path == panel[1]
@@ -167,9 +167,9 @@ def get_widgets(group, request):
                 resp = resp.render(request)
         except:
             logger = logging.getLogger('sentry.plugins')
-            logger.exception('Error processing widget() on %r', inst.__class__, extra={
+            logger.error('Error processing widget() on %r', inst.__class__, extra={
                 'request': request,
-            })
+            }, exc_info=True)
             continue
         if resp:
             yield resp
@@ -183,9 +183,9 @@ def get_tags(group, request):
             tag_list = inst.tags(request, group, tag_list)
         except:
             logger = logging.getLogger('sentry.plugins')
-            logger.exception('Error processing tags() on %r', inst.__class__, extra={
+            logger.rror('Error processing tags() on %r', inst.__class__, extra={
                 'request': request,
-            })
+            }, exc_info=True)
 
     for tag in tag_list:
         yield tag
@@ -200,9 +200,9 @@ def handle_before_events(request, event_list):
             inst.before_events(request, event_list)
         except:
             logger = logging.getLogger('sentry.plugins')
-            logger.exception('Error processing before_events() on %r', inst.__class__, extra={
+            logger.error('Error processing before_events() on %r', inst.__class__, extra={
                 'request': request,
-            })
+            }, exc_info=True)
     return ''
 
 
