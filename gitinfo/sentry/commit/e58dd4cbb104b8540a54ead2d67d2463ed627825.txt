commit e58dd4cbb104b8540a54ead2d67d2463ed627825
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Thu Jul 9 11:16:30 2020 -0400

    fix(apm): Various fixes for the span view (#19778)

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/dividerHandlerManager.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/dividerHandlerManager.tsx
index 9e8b3cf6d7..2937835e45 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/dividerHandlerManager.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/dividerHandlerManager.tsx
@@ -108,22 +108,35 @@ export class Provider extends React.Component<PropType, StateType> {
       userSelect: 'none',
       MozUserSelect: 'none',
       msUserSelect: 'none',
+      webkitUserSelect: 'none',
     });
 
     // attach event listeners so that the mouse cursor does not select text during a drag
     window.addEventListener('mousemove', this.onDragMove);
     window.addEventListener('mouseup', this.onDragEnd);
 
+    this.setHover(true);
+
     // indicate drag has begun
 
     this.isDragging = true;
 
     selectRefs(this.dividerLineRefs, (dividerDOM: HTMLDivElement) => {
       dividerDOM.style.backgroundColor = 'rgba(73,80,87,0.75)';
+      dividerDOM.style.cursor = 'col-resize';
     });
 
     selectRefs(this.ghostDividerLineRefs, (dividerDOM: HTMLDivElement) => {
-      dividerDOM.style.display = 'block';
+      dividerDOM.style.cursor = 'col-resize';
+
+      const {parentNode} = dividerDOM;
+
+      if (!parentNode) {
+        return;
+      }
+
+      const container = parentNode as HTMLDivElement;
+      container.style.display = 'block';
     });
   };
 
@@ -145,8 +158,16 @@ export class Provider extends React.Component<PropType, StateType> {
 
     const dividerHandlePositionString = toPercent(this.dividerHandlePosition);
 
-    selectRefs(this.dividerLineRefs, (dividerDOM: HTMLDivElement) => {
-      dividerDOM.style.left = dividerHandlePositionString;
+    selectRefs(this.ghostDividerLineRefs, (dividerDOM: HTMLDivElement) => {
+      const {parentNode} = dividerDOM;
+
+      if (!parentNode) {
+        return;
+      }
+
+      const container = parentNode as HTMLDivElement;
+
+      container.style.width = `calc(${dividerHandlePositionString} + 0.5px)`;
     });
   };
 
@@ -170,12 +191,24 @@ export class Provider extends React.Component<PropType, StateType> {
 
     this.isDragging = false;
 
+    this.setHover(false);
+
     selectRefs(this.dividerLineRefs, (dividerDOM: HTMLDivElement) => {
       dividerDOM.style.backgroundColor = '';
+      dividerDOM.style.cursor = '';
     });
 
     selectRefs(this.ghostDividerLineRefs, (dividerDOM: HTMLDivElement) => {
-      dividerDOM.style.display = 'none';
+      dividerDOM.style.cursor = '';
+
+      const {parentNode} = dividerDOM;
+
+      if (!parentNode) {
+        return;
+      }
+
+      const container = parentNode as HTMLDivElement;
+      container.style.display = 'none';
     });
 
     this.setState({
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/dragManager.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/dragManager.tsx
index 1f126ec47c..e497cbe303 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/dragManager.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/dragManager.tsx
@@ -116,6 +116,7 @@ class DragManager extends React.Component<DragManagerProps, DragManagerState> {
       userSelect: 'none',
       MozUserSelect: 'none',
       msUserSelect: 'none',
+      webkitUserSelect: 'none',
     });
 
     // attach event listeners so that the mouse cursor can drag outside of the
@@ -244,6 +245,7 @@ class DragManager extends React.Component<DragManagerProps, DragManagerState> {
       userSelect: 'none',
       MozUserSelect: 'none',
       msUserSelect: 'none',
+      webkitUserSelect: 'none',
     });
 
     // attach event listeners so that the mouse cursor can drag outside of the
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
index 0849aaa107..93bd7bc64c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
@@ -10,6 +10,7 @@ import Count from 'app/components/count';
 import Tooltip from 'app/components/tooltip';
 import {TableDataRow} from 'app/views/eventsV2/table/types';
 import {IconChevron, IconWarning} from 'app/icons';
+import globalTheme from 'app/utils/theme';
 
 import {
   toPercent,
@@ -171,6 +172,25 @@ const getDurationDisplay = ({
   return 'inset';
 };
 
+const getBackgroundColor = ({
+  showStriping,
+  showDetail,
+  theme,
+}: {
+  showStriping?: boolean;
+  showDetail?: boolean;
+  theme: any;
+}) => {
+  if (!theme) {
+    return theme.white;
+  }
+
+  if (showDetail) {
+    return theme.gray800;
+  }
+  return showStriping ? theme.gray100 : theme.white;
+};
+
 type SpanBarProps = {
   event: Readonly<SentryTransactionEvent>;
   orgId: string;
@@ -670,61 +690,45 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
     dividerHandlerChildrenProps: DividerHandlerManager.DividerHandlerManagerChildrenProps
   ) {
     if (this.state.showDetail) {
-      // we would like to hide the divider lines when the span details
-      // has been expanded
-      return null;
+      // Mock component to preserve layout spacing
+      return (
+        <DividerLine
+          style={{
+            position: 'relative',
+            backgroundColor: getBackgroundColor({
+              theme: globalTheme,
+              showDetail: true,
+            }),
+          }}
+        />
+      );
     }
 
-    const {
-      dividerPosition,
-      addDividerLineRef,
-      addGhostDividerLineRef,
-    } = dividerHandlerChildrenProps;
-
-    // We display the ghost divider line for whenever the divider line is being dragged.
-    // The ghost divider line indicates the original position of the divider line
-    const ghostDivider = (
+    const {addDividerLineRef} = dividerHandlerChildrenProps;
+
+    return (
       <DividerLine
-        ref={addGhostDividerLineRef()}
+        ref={addDividerLineRef()}
         style={{
-          left: toPercent(dividerPosition),
-          display: 'none',
+          position: 'relative',
+        }}
+        onMouseEnter={() => {
+          dividerHandlerChildrenProps.setHover(true);
         }}
+        onMouseLeave={() => {
+          dividerHandlerChildrenProps.setHover(false);
+        }}
+        onMouseOver={() => {
+          dividerHandlerChildrenProps.setHover(true);
+        }}
+        onMouseDown={dividerHandlerChildrenProps.onDragStart}
         onClick={event => {
-          // the ghost divider line should not be interactive.
           // we prevent the propagation of the clicks from this component to prevent
           // the span detail from being opened.
           event.stopPropagation();
         }}
       />
     );
-
-    return (
-      <React.Fragment>
-        {ghostDivider}
-        <DividerLine
-          ref={addDividerLineRef()}
-          style={{
-            left: toPercent(dividerPosition),
-          }}
-          onMouseEnter={() => {
-            dividerHandlerChildrenProps.setHover(true);
-          }}
-          onMouseLeave={() => {
-            dividerHandlerChildrenProps.setHover(false);
-          }}
-          onMouseOver={() => {
-            dividerHandlerChildrenProps.setHover(true);
-          }}
-          onMouseDown={dividerHandlerChildrenProps.onDragStart}
-          onClick={event => {
-            // we prevent the propagation of the clicks from this component to prevent
-            // the span detail from being opened.
-            event.stopPropagation();
-          }}
-        />
-      </React.Fragment>
-    );
   }
 
   renderWarningText({warningText}: {warningText?: string} = {}) {
@@ -748,27 +752,34 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
     const duration = Math.abs(endTimestamp - startTimestamp);
     const durationString = getHumanDuration(duration);
     const bounds = this.getBounds();
-    const {dividerPosition} = dividerHandlerChildrenProps;
+    const {dividerPosition, addGhostDividerLineRef} = dividerHandlerChildrenProps;
     const displaySpanBar = defined(bounds.left) && defined(bounds.width);
     const durationDisplay = getDurationDisplay(bounds);
 
     return (
       <SpanRowCellContainer showDetail={this.state.showDetail}>
         <SpanRowCell
+          data-type="span-row-cell"
           showDetail={this.state.showDetail}
           style={{
-            left: 0,
-            width: toPercent(dividerPosition),
+            width: `calc(${toPercent(dividerPosition)} - 0.5px)`,
+          }}
+          onClick={() => {
+            this.toggleDisplayDetail();
           }}
         >
           {this.renderTitle()}
         </SpanRowCell>
+        {this.renderDivider(dividerHandlerChildrenProps)}
         <SpanRowCell
+          data-type="span-row-cell"
           showDetail={this.state.showDetail}
           showStriping={spanNumber % 2 !== 0}
           style={{
-            left: toPercent(dividerPosition),
-            width: toPercent(1 - dividerPosition),
+            width: `calc(${toPercent(1 - dividerPosition)} - 0.5px)`,
+          }}
+          onClick={() => {
+            this.toggleDisplayDetail();
           }}
         >
           {displaySpanBar && (
@@ -792,7 +803,28 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
           )}
           {this.renderCursorGuide()}
         </SpanRowCell>
-        {this.renderDivider(dividerHandlerChildrenProps)}
+        {!this.state.showDetail && (
+          <DividerLineGhostContainer
+            style={{
+              width: `calc(${toPercent(dividerPosition)} + 0.5px)`,
+              display: 'none',
+            }}
+          >
+            <DividerLine
+              ref={addGhostDividerLineRef()}
+              style={{
+                right: 0,
+              }}
+              className="hovering"
+              onClick={event => {
+                // the ghost divider line should not be interactive.
+                // we prevent the propagation of the clicks from this component to prevent
+                // the span detail from being opened.
+                event.stopPropagation();
+              }}
+            />
+          </DividerLineGhostContainer>
+        )}
       </SpanRowCellContainer>
     );
   }
@@ -810,9 +842,6 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
         visible={isSpanVisible}
         showBorder={this.state.showDetail}
         data-test-id="span-row"
-        onClick={() => {
-          this.toggleDisplayDetail();
-        }}
       >
         <DividerHandlerManager.Consumer>
           {(
@@ -825,43 +854,29 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
   }
 }
 
-const getBackgroundColor = ({
-  showStriping,
-  showDetail,
-  theme,
-}: {
-  showStriping?: boolean;
-  showDetail?: boolean;
-  theme: any;
-}) => {
-  if (!theme) {
-    return theme.white;
-  }
-
-  if (showDetail) {
-    return theme.gray800;
-  }
-  return showStriping ? theme.gray100 : theme.white;
-};
-
 type SpanRowCellProps = OmitHtmlDivProps<{
   showStriping?: boolean;
   showDetail?: boolean;
 }>;
 
 const SpanRowCell = styled('div')<SpanRowCellProps>`
-  position: absolute;
+  position: relative;
   padding: ${space(0.5)} 1px;
   height: 100%;
   overflow: hidden;
   background-color: ${p => getBackgroundColor(p)};
+  transition: background-color 125ms ease-in-out;
   color: ${p => (p.showDetail ? p.theme.white : 'inherit')};
 `;
 
 const SpanRowCellContainer = styled('div')<SpanRowCellProps>`
+  display: flex;
   position: relative;
   height: ${SPAN_ROW_HEIGHT}px;
-  :hover > div {
+
+  user-select: none;
+
+  &:hover > div[data-type='span-row-cell'] {
     background-color: ${p => (p.showDetail ? p.theme.gray800 : p.theme.gray200)};
   }
 `;
@@ -875,27 +890,46 @@ const CursorGuide = styled('div')`
   height: 100%;
 `;
 
-export const DividerLine = styled('div')`
+const DividerLine = styled('div')`
   background-color: ${p => p.theme.gray400};
   position: absolute;
   height: 100%;
   width: 1px;
-  transform: translateX(-50%);
-  transition: all 125ms ease-in-out;
-  border-width: 0 2px;
-  border-color: rgba(0, 0, 0, 0);
-  border-style: solid;
-  box-sizing: content-box;
-  background-clip: content-box;
+  transition: background-color 125ms ease-in-out;
   z-index: ${zIndex.dividerLine};
 
+  /* enhanced hit-box */
+  &:after {
+    content: '';
+    z-index: -1;
+    position: absolute;
+    left: -2px;
+    top: 0;
+    width: 5px;
+    height: 100%;
+  }
+
   &.hovering {
     background-color: ${p => p.theme.gray800};
-    width: 2px;
-    cursor: col-resize;
+    width: 3px;
+    transform: translateX(-1px);
+    margin-right: -2px;
+
+    cursor: ew-resize;
+
+    &:after {
+      left: -2px;
+      width: 7px;
+    }
   }
 `;
 
+const DividerLineGhostContainer = styled('div')`
+  position: absolute;
+  width: 100%;
+  height: 100%;
+`;
+
 const SpanBarTitleContainer = styled('div')`
   display: flex;
   align-items: center;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
index fcd15bb6e8..2d591a0473 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
@@ -292,6 +292,7 @@ export type UserSelectValues = {
   userSelect: string | null;
   MozUserSelect: string | null;
   msUserSelect: string | null;
+  webkitUserSelect: string | null;
 };
 
 export const setBodyUserSelect = (nextValues: UserSelectValues): UserSelectValues => {
@@ -304,13 +305,15 @@ export const setBodyUserSelect = (nextValues: UserSelectValues): UserSelectValue
     // @ts-ignore
     MozUserSelect: document.body.style.MozUserSelect,
     msUserSelect: document.body.style.msUserSelect,
+    webkitUserSelect: document.body.style.webkitUserSelect,
   };
 
   document.body.style.userSelect = nextValues.userSelect || '';
   // MozUserSelect is not typed in TS
   // @ts-ignore
-  document.body.style.MozUserSelect = nextValues.MozUserSelect;
-  document.body.style.msUserSelect = nextValues.msUserSelect;
+  document.body.style.MozUserSelect = nextValues.MozUserSelect || '';
+  document.body.style.msUserSelect = nextValues.msUserSelect || '';
+  document.body.style.webkitUserSelect = nextValues.webkitUserSelect || '';
 
   return previousValues;
 };
diff --git a/src/sentry/static/sentry/app/utils/theme.tsx b/src/sentry/static/sentry/app/utils/theme.tsx
index 1eb8a7b87e..f9666b9d5a 100644
--- a/src/sentry/static/sentry/app/utils/theme.tsx
+++ b/src/sentry/static/sentry/app/utils/theme.tsx
@@ -240,8 +240,8 @@ const theme = {
     },
     traceView: {
       spanTreeToggler: 900,
-      rowInfoMessage: 900,
       dividerLine: 909,
+      rowInfoMessage: 910,
       minimapContainer: 999,
     },
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
index 4e07c5dbcd..eb953c5b7c 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
@@ -143,6 +143,7 @@ class ColumnEditCollection extends React.Component<Props, State> {
       userSelect: 'none',
       MozUserSelect: 'none',
       msUserSelect: 'none',
+      webkitUserSelect: 'none',
     });
 
     // attach event listeners so that the mouse cursor can drag anywhere
diff --git a/tests/js/spec/components/events/interfaces/breadcrumbs/__snapshots__/filter.spec.tsx.snap b/tests/js/spec/components/events/interfaces/breadcrumbs/__snapshots__/filter.spec.tsx.snap
index fd74fb583b..a56d96086f 100644
--- a/tests/js/spec/components/events/interfaces/breadcrumbs/__snapshots__/filter.spec.tsx.snap
+++ b/tests/js/spec/components/events/interfaces/breadcrumbs/__snapshots__/filter.spec.tsx.snap
@@ -703,7 +703,7 @@ exports[`Filter default render 1`] = `
                       "traceView": Object {
                         "dividerLine": 909,
                         "minimapContainer": 999,
-                        "rowInfoMessage": 900,
+                        "rowInfoMessage": 910,
                         "spanTreeToggler": 900,
                       },
                     },
