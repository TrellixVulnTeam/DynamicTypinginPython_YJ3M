commit 9d9dde8b34c12c0b8815c863c0f71ef014667828
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Sun Jul 3 00:51:19 2016 +0300

    Initial support for flexible symbolication

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 1850d90f9e..cc74c335cb 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -721,6 +721,7 @@ SENTRY_INTERFACES = {
     'breadcrumbs': 'sentry.interfaces.breadcrumbs.Breadcrumbs',
     'contexts': 'sentry.interfaces.contexts.Contexts',
     'threads': 'sentry.interfaces.threads.Threads',
+    'debug_images': 'sentry.interfaces.debug_images.DebugImages',
     'sentry.interfaces.Exception': 'sentry.interfaces.exception.Exception',
     'sentry.interfaces.Message': 'sentry.interfaces.message.Message',
     'sentry.interfaces.Stacktrace': 'sentry.interfaces.stacktrace.Stacktrace',
@@ -733,6 +734,7 @@ SENTRY_INTERFACES = {
     'sentry.interfaces.Breadcrumbs': 'sentry.interfaces.breadcrumbs.Breadcrumbs',
     'sentry.interfaces.Contexts': 'sentry.interfaces.contexts.Contexts',
     'sentry.interfaces.Threads': 'sentry.interfaces.threads.Threads',
+    'sentry.interfaces.DebugImages': 'sentry.interfaces.debug_images.DebugImages',
 }
 
 SENTRY_EMAIL_BACKEND_ALIASES = {
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 5647c64759..fdbc7272d7 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -197,3 +197,11 @@ WARN_SESSION_EXPIRED = 'Your session has expired.'  # TODO: translate this
 EVENT_ORDERING_KEY = attrgetter('datetime', 'id')
 
 FILTER_MASK = '[Filtered]'
+
+# Maximum length of a symbol
+MAX_SYM = 256
+
+# Known dsym mimetypes
+KNOWN_DSYM_TYPES = {
+    'application/x-mach-binary': 'macho'
+}
diff --git a/src/sentry/interfaces/debug_images.py b/src/sentry/interfaces/debug_images.py
new file mode 100644
index 0000000000..987df3bd26
--- /dev/null
+++ b/src/sentry/interfaces/debug_images.py
@@ -0,0 +1,70 @@
+from __future__ import absolute_import
+
+__all__ = ('DebugImages',)
+
+from sentry.interfaces.base import Interface, InterfaceValidationError
+
+
+image_types = {}
+
+
+def imagetype(name):
+    def decorator(f):
+        image_types[name] = f
+        return f
+    return decorator
+
+
+@imagetype('apple')
+def process_apple_image(image):
+    try:
+        return {
+            'cpu_type': image['cpu_type'],
+            'cpu_subtype': image['cpu_subtype'],
+            'image_addr': image['image_addr'],
+            'image_size': image['image_size'],
+            'image_vmaddr': image.get('image_vmaddr') or 0,
+            'name': image['name'],
+            'uuid': image['uuid'],
+        }
+    except KeyError as e:
+        raise InterfaceValidationError('Missing value for apple image: %s'
+                                       % e.args[0])
+
+
+class DebugImages(Interface):
+    """
+    Holds debug image information for processing stacktraces and similar
+    things.
+    """
+
+    ephemeral = True
+
+    @classmethod
+    def to_python(cls, data):
+        if 'images' not in data:
+            raise InterfaceValidationError('Missing key "images"')
+        if 'sdk_info' not in data:
+            raise InterfaceValidationError('Missing key "sdk_info"')
+        return cls(
+            images=[cls.normalize_image(x) for x in data['images']],
+            sdk_info=data['sdk_info'],
+        )
+
+    @staticmethod
+    def normalize_image(image):
+        ty = image.get('type')
+        if not ty:
+            raise InterfaceValidationError('Image type not provided')
+        func = image_types.get(ty)
+        if func is None:
+            raise InterfaceValidationError('Unknown image type %r' % image)
+        rv = func(image)
+        assert 'uuid' in rv, 'debug image normalizer did not produce a UUID'
+        assert 'object_addr' in rv, 'debug image normalizer did not ' \
+            'produce an object address'
+        rv['type'] = ty
+        return rv
+
+    def get_path(self):
+        return 'debug_images'
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index b627656051..806c3a4ebb 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -7,7 +7,10 @@ import posixpath
 from sentry.models import Project, EventError
 from sentry.plugins import Plugin2
 from sentry.lang.native.symbolizer import Symbolizer, have_symsynd
-from sentry.models.dsymfile import SDK_MAPPING
+from sentry.lang.native.utils import find_all_stacktraces, \
+    find_apple_crash_report_referenced_images, \
+    find_stacktrace_referenced_images, get_sdk_from_apple_system_info, \
+    APPLE_SDK_MAPPING
 
 
 logger = logging.getLogger(__name__)
@@ -215,7 +218,7 @@ def inject_apple_device_data(data, system):
     os = contexts.setdefault('os', {})
 
     try:
-        os['name'] = SDK_MAPPING[system['system_name']]
+        os['name'] = APPLE_SDK_MAPPING[system['system_name']]
     except LookupError:
         os['name'] = system.get('system_name') or 'Generic Apple'
 
@@ -248,6 +251,7 @@ def record_no_symsynd(data):
 
 
 def preprocess_apple_crash_event(data):
+    """This processes the "legacy" AppleCrashReport."""
     crash_report = data.get('sentry.interfaces.AppleCrashReport')
     if crash_report is None:
         return
@@ -276,8 +280,11 @@ def preprocess_apple_crash_event(data):
             'stacktrace': True,
         }
 
+    sdk_info = get_sdk_from_apple_system_info(system)
+    referenced_images = find_apple_crash_report_referenced_images(
+        crash_report['binary_images'], raw_threads.values())
     sym = Symbolizer(project, crash_report['binary_images'],
-                     threads=raw_threads.values())
+                     referenced_images=referenced_images)
 
     with sym:
         if crashed_thread is None:
@@ -288,7 +295,7 @@ def preprocess_apple_crash_event(data):
             system = crash_report.get('system')
             try:
                 bt, errors = sym.symbolize_backtrace(
-                    crashed_thread['backtrace']['contents'], system)
+                    crashed_thread['backtrace']['contents'], sdk_info)
                 for error in errors:
                     append_error(data, error)
                 if inject_apple_backtrace(data, bt, crash.get('diagnosis'),
@@ -312,7 +319,7 @@ def preprocess_apple_crash_event(data):
             if raw_threads is None:
                 continue
             bt, errors = sym.symbolize_backtrace(
-                raw_thread['backtrace']['contents'], system)
+                raw_thread['backtrace']['contents'], sdk_info)
             for error in errors:
                 append_error(data, error)
             thread['stacktrace'] = convert_stacktrace(
@@ -329,10 +336,96 @@ def preprocess_apple_crash_event(data):
     return data
 
 
+def resolve_frame_symbols(data):
+    debug_image_data = data.get('debug_images')
+    if not debug_image_data:
+        return
+
+    debug_images = debug_image_data['images']
+    sdk_info = debug_image_data['sdk_info']
+
+    stacktraces = find_all_stacktraces(data)
+    if not stacktraces:
+        return
+
+    project = Project.objects.get_from_cache(
+        id=data['project'],
+    )
+
+    errors = []
+    referenced_images = find_stacktrace_referenced_images(
+        debug_images, stacktraces)
+    sym = Symbolizer(project, debug_images,
+                     referenced_images=referenced_images)
+
+    frame = None
+    idx = -1
+
+    def report_error(e):
+        errors.append({
+            'type': EventError.NATIVE_INTERNAL_FAILURE,
+            'frame': frame,
+            'error': 'frame #%d: %s: %s' % (
+                idx,
+                e.__class__.__name__,
+                str(e),
+            )
+        })
+
+    longest_addr = 0
+    processed_frames = []
+    with sym:
+        for stacktrace in stacktraces:
+            for idx, frame in enumerate(stacktrace['frames']):
+                if 'package_addr' not in frame:
+                    continue
+                try:
+                    # We need to create a symsynd compatible frame here so
+                    # that we can perform symbolication.
+                    sfrm = sym.symbolize_frame({
+                        'object_addr': frame['package_addr'],
+                        'instruction_addr': frame['instruction_addr'],
+                    }, sdk_info, report_error=report_error)
+                    if not sfrm:
+                        continue
+                    frame['function'] = sfrm['symbol_name'] or '<unknown>'
+                    frame['abs_path'] = sfrm['filename']
+                    frame['filename'] = posixpath.basename(sfrm['filename'])
+                    if sfrm.get('line') is not None:
+                        frame['lineno'] = sfrm['line']
+                    else:
+                        frame['instruction_offset'] = \
+                            sfrm['instruction_addr'] - sfrm['symbol_addr']
+                    if sfrm.get('column') is not None:
+                        frame['colno'] = sfrm['column']
+                    frame['package'] = sfrm['object_name']
+                    frame['symbol_addr'] = '%x' % sfrm['symbol_addr']
+                    frame['instruction_addr'] = '%x' % sfrm['instruction_addr']
+                    longest_addr = max(longest_addr, len(sfrm['symbol_addr']),
+                                       len(sfrm['instruction_addr']))
+                    processed_frames.append(frame)
+                except Exception as e:
+                    logger.exception('Failed to symbolicate')
+                    errors.append({
+                        'type': EventError.NATIVE_INTERNAL_FAILURE,
+                        'error': '%s: %s' % (e.__class__.__name__, str(e)),
+                    })
+
+    # Pad out addresses to be of the same length and add prefix
+    for frame in processed_frames:
+        for key in 'symbol_addr', 'instruction_addr':
+            frame[key] = '0x' + frame[key][2:].rjust(longest_addr, '0')
+
+    if errors:
+        data.setdefault('errors', []).extend(errors)
+
+    return data
+
+
 class NativePlugin(Plugin2):
     can_disable = False
 
     def get_event_preprocessors(self, **kwargs):
         if not have_symsynd:
             return [record_no_symsynd]
-        return [preprocess_apple_crash_event]
+        return [preprocess_apple_crash_event, resolve_frame_symbols]
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index b8b29dd902..c7dbebad69 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -11,7 +11,7 @@ from sentry import options
 from sentry.lang.native.dsymcache import dsymcache
 from sentry.utils.safe import trim
 from sentry.models import DSymSymbol, EventError
-from sentry.models.dsymfile import MAX_SYM
+from sentry.constants import MAX_SYM
 
 
 def trim_frame(frame):
@@ -21,7 +21,7 @@ def trim_frame(frame):
     return frame
 
 
-def find_system_symbol(img, instruction_addr, system_info=None):
+def find_system_symbol(img, instruction_addr, sdk_info=None):
     """Finds a system symbol."""
     return DSymSymbol.objects.lookup_symbol(
         instruction_addr=instruction_addr,
@@ -31,33 +31,23 @@ def find_system_symbol(img, instruction_addr, system_info=None):
         cpu_name=get_cpu_name(img['cpu_type'],
                               img['cpu_subtype']),
         object_path=img['name'],
-        system_info=system_info
+        sdk_info=sdk_info
     )
 
 
-def make_symbolizer(project, binary_images, threads=None):
+def make_symbolizer(project, binary_images, referenced_images=None):
     """Creates a symbolizer for the given project and binary images.  If a
-    list of threads is referenced (from an apple crash report) then only
-    images needed by those frames are loaded.
+    list of referenced images is referenced (UUIDs) then only images
+    needed by those frames are loaded.
     """
     if not have_symsynd:
         raise RuntimeError('symsynd is unavailable.  Install sentry with '
                            'the dsym feature flag.')
     driver = Driver(options.get('dsym.llvm-symbolizer-path') or None)
 
-    if threads is None:
+    to_load = referenced_images
+    if to_load is None:
         to_load = [x['uuid'] for x in binary_images]
-    else:
-        image_map = {}
-        for image in binary_images:
-            image_map[image['image_addr']] = image['uuid']
-        to_load = set()
-        for thread in threads:
-            for frame in thread['backtrace']['contents']:
-                img_uuid = image_map.get(frame['object_addr'])
-                if img_uuid is not None:
-                    to_load.add(img_uuid)
-        to_load = list(to_load)
 
     dsym_paths, loaded = dsymcache.fetch_dsyms(project, to_load)
     return ReportSymbolizer(driver, dsym_paths, binary_images)
@@ -65,9 +55,9 @@ def make_symbolizer(project, binary_images, threads=None):
 
 class Symbolizer(object):
 
-    def __init__(self, project, binary_images, threads=None):
-        self.symsynd_symbolizer = make_symbolizer(project, binary_images,
-                                                  threads=threads)
+    def __init__(self, project, binary_images, referenced_images=None):
+        self.symsynd_symbolizer = make_symbolizer(
+            project, binary_images, referenced_images=referenced_images)
         self.images = dict((img['image_addr'], img) for img in binary_images)
 
     def __enter__(self):
@@ -87,7 +77,7 @@ class Symbolizer(object):
             rv['uuid'] = img['uuid']
         return rv
 
-    def symbolize_frame(self, frame, system_info=None,
+    def symbolize_frame(self, frame, sdk_info=None,
                         report_error=None):
         error = None
         img = self.images.get(frame['object_addr'])
@@ -104,7 +94,7 @@ class Symbolizer(object):
         # If that does not work, look up system symbols.
         if img is not None:
             symbol = find_system_symbol(img, frame['instruction_addr'],
-                                        system_info)
+                                        sdk_info)
             if symbol is not None:
                 symbol = demangle_symbol(symbol) or symbol
                 rv = dict(frame, symbol_name=symbol, filename=None,
@@ -116,7 +106,7 @@ class Symbolizer(object):
             report_error(error)
         return self._process_frame(frame, img)
 
-    def symbolize_backtrace(self, backtrace, system_info=None):
+    def symbolize_backtrace(self, backtrace, sdk_info=None):
         rv = []
         errors = []
         idx = -1
@@ -134,5 +124,5 @@ class Symbolizer(object):
 
         for idx, frm in enumerate(backtrace):
             rv.append(self.symbolize_frame(
-                frm, system_info, report_error=report_error))
+                frm, sdk_info, report_error=report_error))
         return rv, errors
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
new file mode 100644
index 0000000000..3c1fe72110
--- /dev/null
+++ b/src/sentry/lang/native/utils.py
@@ -0,0 +1,89 @@
+import logging
+
+
+logger = logging.getLogger(__name__)
+
+
+APPLE_SDK_MAPPING = {
+    'iPhone OS': 'iOS',
+    'tvOS': 'tvOS',
+    'Mac OS': 'macOS',
+}
+
+
+def find_apple_crash_report_referenced_images(binary_images, threads):
+    """Given some binary images from an apple crash report and a thread
+    list this returns a list of image UUIDs to load.
+    """
+    image_map = {}
+    for image in binary_images:
+        image_map[image['image_addr']] = image['uuid']
+    to_load = set()
+    for thread in threads:
+        for frame in thread['backtrace']['contents']:
+            img_uuid = image_map.get(frame['object_addr'])
+            if img_uuid is not None:
+                to_load.add(img_uuid)
+    return list(to_load)
+
+
+def find_stacktrace_referenced_images(debug_images, stacktraces):
+    image_map = {}
+    for image in debug_images:
+        image_map[image['image_addr']] = image['uuid']
+
+    to_load = set()
+    for stacktrace in stacktraces:
+        for frame in stacktrace['frames']:
+            if 'object_addr' in frame:
+                img_uuid = image_map.get(frame['object_addr'])
+                if img_uuid is not None:
+                    to_load.add(img_uuid)
+
+    return list(to_load)
+
+
+def find_all_stacktraces(data):
+    """Given a data dictionary from an event this returns all
+    relevant stacktraces in a list.
+    """
+    rv = []
+
+    exc_container = data.get('sentry.interfaces.Exception')
+    if exc_container:
+        for exc in exc_container['values']:
+            stacktrace = exc.get('stacktrace')
+            if stacktrace:
+                rv.append(stacktrace)
+
+    stacktrace = data.get('sentry.interfaces.Stacktrace')
+    if stacktrace:
+        rv.append(stacktrace)
+
+    threads = data.get('threads')
+    if threads:
+        for thread in threads:
+            stacktrace = thread.get('stacktrace')
+            if stacktrace:
+                rv.append(stacktrace)
+
+    return rv
+
+
+def get_sdk_from_apple_system_info(info):
+    if not info:
+        return None
+    try:
+        sdk_name = APPLE_SDK_MAPPING[info['system_name']]
+        system_version = tuple(int(x) for x in (
+            info['system_version'] + '.0' * 3).split('.')[:3])
+    except LookupError:
+        return None
+
+    return {
+        'dsym_type': 'macho',
+        'sdk_name': sdk_name,
+        'version_major': system_version[0],
+        'version_minor': system_version[1],
+        'version_patchlevel': system_version[2],
+    }
diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index 97d3a454a1..06677e6941 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -26,37 +26,7 @@ from sentry.db.models import FlexibleForeignKey, Model, BoundedBigIntegerField,
 from sentry.models.file import File
 from sentry.utils.zip import safe_extract_zip
 from sentry.utils.db import is_sqlite
-
-
-MAX_SYM = 256
-KNOWN_DSYM_TYPES = {
-    'application/x-mach-binary': 'macho'
-}
-
-SDK_MAPPING = {
-    'iPhone OS': 'iOS',
-    'tvOS': 'tvOS',
-    'Mac OS': 'macOS',
-}
-
-
-def get_sdk_from_system_info(info):
-    if not info:
-        return None
-    try:
-        sdk_name = SDK_MAPPING[info['system_name']]
-        system_version = tuple(int(x) for x in (
-            info['system_version'] + '.0' * 3).split('.')[:3])
-    except LookupError:
-        return None
-
-    return {
-        'dsym_type': 'macho',
-        'sdk_name': sdk_name,
-        'version_major': system_version[0],
-        'version_minor': system_version[1],
-        'version_patchlevel': system_version[2],
-    }
+from sentry.constants import KNOWN_DSYM_TYPES
 
 
 class DSymSDKManager(BaseManager):
@@ -197,7 +167,7 @@ class DSymSymbolManager(BaseManager):
         cur.close()
 
     def lookup_symbol(self, instruction_addr, image_addr, uuid,
-                      cpu_name=None, object_path=None, system_info=None,
+                      cpu_name=None, object_path=None, sdk_info=None,
                       image_vmaddr=None):
         """Finds a system symbol."""
         addr_abs = None
@@ -242,7 +212,6 @@ class DSymSymbolManager(BaseManager):
                     return rv[0]
 
             # Third try: exact match on path and arch (addr_rel)
-            sdk_info = get_sdk_from_system_info(system_info)
             if sdk_info is None or \
                cpu_name is None or \
                object_path is None:
diff --git a/src/sentry/runner/commands/dsym.py b/src/sentry/runner/commands/dsym.py
index 31f3e95ec8..c8e303b06d 100644
--- a/src/sentry/runner/commands/dsym.py
+++ b/src/sentry/runner/commands/dsym.py
@@ -21,7 +21,7 @@ SHUTDOWN = object()
 
 def load_bundle(q, uuid, data, sdk_info, trim_symbols, demangle):
     from sentry.models import DSymBundle, DSymObject, DSymSDK
-    from sentry.models.dsymfile import MAX_SYM
+    from sentry.constants import MAX_SYM
     from symsynd.demangle import demangle_symbol
 
     def _process_symbol(sym):
