commit 388992ac9b0cf2cf7727c7b5327c7aa831642160
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Nov 22 15:28:55 2018 +0100

    feat: Initial pass on legacy message removal (#10713)
    
    This makes the tests also correctly use message now and passes the right data to snuba for message.

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 13abd0823e..edcf69144c 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -99,8 +99,6 @@ def get_event_metadata_compat(data, fallback_message):
     """
     etype = data.get('type') or 'default'
     if 'metadata' not in data:
-        data = dict(data)
-        data['logentry'] = {'formatted': fallback_message}
         return eventtypes.get(etype)(data).get_metadata()
     return data['metadata']
 
diff --git a/src/sentry/eventstream/kafka.py b/src/sentry/eventstream/kafka.py
index 6b7f9106ad..834cc5eb84 100644
--- a/src/sentry/eventstream/kafka.py
+++ b/src/sentry/eventstream/kafka.py
@@ -130,7 +130,7 @@ class KafkaEventStream(EventStream):
             'event_id': event.event_id,
             'organization_id': project.organization_id,
             'project_id': event.project_id,
-            'message': event.message,
+            'message': event.real_message,
             'platform': event.platform,
             'datetime': event.datetime,
             'data': dict(event.data.items()),
diff --git a/src/sentry/eventstream/snuba.py b/src/sentry/eventstream/snuba.py
index 92e5c87b19..36b3b44be6 100644
--- a/src/sentry/eventstream/snuba.py
+++ b/src/sentry/eventstream/snuba.py
@@ -11,7 +11,7 @@ class SnubaEventStream(EventStream):
             'group_id': event.group_id,
             'event_id': event.event_id,
             'project_id': event.project_id,
-            'message': event.message,
+            'message': event.real_message,
             'platform': event.platform,
             'datetime': event.datetime,
             'data': dict(event.data.items()),
diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
index ceb7dfdedd..afa9c900cd 100644
--- a/src/sentry/integrations/issues.py
+++ b/src/sentry/integrations/issues.py
@@ -18,7 +18,7 @@ class IssueBasicMixin(object):
         return False
 
     def get_group_title(self, group, event, **kwargs):
-        return event.error()
+        return event.title
 
     def get_issue_url(self, key):
         """
diff --git a/src/sentry/interfaces/template.py b/src/sentry/interfaces/template.py
index 8546643c55..8c296f5790 100644
--- a/src/sentry/interfaces/template.py
+++ b/src/sentry/interfaces/template.py
@@ -71,7 +71,7 @@ class Template(Interface):
 
     def get_traceback(self, event, context):
         result = [
-            event.message,
+            event.real_message,
             '',
             'File "%s", line %s' % (self.filename, self.lineno),
             '',
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index f6847c7d6c..ec3b1db757 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -97,6 +97,10 @@ class Event(Model):
     project = property(_get_project, _set_project)
 
     def get_legacy_message(self):
+        # TODO(mitsuhiko): remove this code once it's unused.  It's still
+        # being used by plugin code and once the message rename is through
+        # plugins should instead swithc to the actual message attribute or
+        # this method could return what currently is real_message.
         msg_interface = self.data.get('logentry', {
             'message': self.message,
         })
@@ -130,6 +134,14 @@ class Event(Model):
 
     error.short_description = _('error')
 
+    @property
+    def real_message(self):
+        # XXX(mitsuhiko): this is a transitional attribute that should be
+        # removed.  `message` will be renamed to `search_message` and this
+        # will become `message`.
+        msg_interface = self.data.get('logentry')
+        return msg_interface and (msg_interface.get('formatted') or msg_interface['message']) or ''
+
     @property
     def message_short(self):
         warnings.warn('Event.message_short is deprecated, use Event.title', DeprecationWarning)
@@ -198,7 +210,7 @@ class Event(Model):
         data['release'] = self.release
         data['dist'] = self.dist
         data['platform'] = self.platform
-        data['message'] = self.get_legacy_message()
+        data['message'] = self.real_message
         data['datetime'] = self.datetime
         data['time_spent'] = self.time_spent
         data['tags'] = [(k.split('sentry:', 1)[-1], v) for (k, v) in self.get_tags()]
diff --git a/src/sentry/plugins/bases/issue2.py b/src/sentry/plugins/bases/issue2.py
index f0474e708c..ee3be4be02 100644
--- a/src/sentry/plugins/bases/issue2.py
+++ b/src/sentry/plugins/bases/issue2.py
@@ -77,7 +77,7 @@ class IssueTrackingPlugin2(Plugin):
         return '\n'.join(output)
 
     def get_group_title(self, request, group, event):
-        return event.error()
+        return event.title
 
     def is_configured(self, request, project, **kwargs):
         raise NotImplementedError
diff --git a/src/sentry/plugins/sentry_webhooks/plugin.py b/src/sentry/plugins/sentry_webhooks/plugin.py
index 6a4813a790..4a12a90fd6 100644
--- a/src/sentry/plugins/sentry_webhooks/plugin.py
+++ b/src/sentry/plugins/sentry_webhooks/plugin.py
@@ -83,7 +83,7 @@ class WebHooksPlugin(notify.NotificationPlugin):
             'logger': event.get_tag('logger'),
             'level': event.get_tag('level'),
             'culprit': group.culprit,
-            'message': event.get_legacy_message(),
+            'message': event.real_message,
             'url': group.get_absolute_url(params={'referrer': 'webhooks_plugin'}),
             'triggering_rules': triggering_rules,
         }
diff --git a/src/sentry/rules/conditions/event_attribute.py b/src/sentry/rules/conditions/event_attribute.py
index 625179a88c..7f5e5b7f06 100644
--- a/src/sentry/rules/conditions/event_attribute.py
+++ b/src/sentry/rules/conditions/event_attribute.py
@@ -123,10 +123,15 @@ class EventAttributeCondition(EventCondition):
         # TODO(dcramer): we should validate attributes (when we can) before
         path = attr.split('.')
 
-        if path[0] in ('message', 'platform'):
+        if path[0] == 'platform':
             if len(path) != 1:
                 return []
-            return [getattr(event, path[0])]
+            return [event.platform]
+
+        if path[0] == 'message':
+            if len(path) != 1:
+                return []
+            return [event.real_message]
 
         elif path[0] == 'environment':
             return [event.get_tag('environment')]
diff --git a/src/sentry/rules/processor.py b/src/sentry/rules/processor.py
index 471ceb99cd..feb0b350ca 100644
--- a/src/sentry/rules/processor.py
+++ b/src/sentry/rules/processor.py
@@ -23,6 +23,9 @@ class EventCompatibilityProxy(object):
     """
     __class__ = property(lambda x: x._event.__class__)
 
+    # TODO: this goes away once message has been renamed to search_message
+    # and real_message to message
+
     def __init__(self, event):
         self._event = event
 
@@ -31,7 +34,7 @@ class EventCompatibilityProxy(object):
 
     @property
     def message(self):
-        return self._event.get_legacy_message()
+        return self._event.real_message
 
 
 class RuleProcessor(object):
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 87b4f16826..1c618e31b3 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -826,7 +826,7 @@ class SnubaTestCase(TestCase):
             'group_id': event.group_id,
             'event_id': event.event_id,
             'project_id': event.project_id,
-            'message': event.message,
+            'message': event.real_message,
             'platform': event.platform,
             'datetime': event.datetime,
             'data': dict(data),
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 3ca0f859b3..c5531f2882 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -498,6 +498,7 @@ class Fixtures(object):
                                    for_store=False)
             manager.normalize()
             kwargs['data'] = manager.get_data()
+            kwargs['message'] = manager.get_search_message()
 
         else:
             assert 'message' not in kwargs, 'do not pass message this way'
diff --git a/src/sentry/web/frontend/debug/mail.py b/src/sentry/web/frontend/debug/mail.py
index 06a3da0c56..68d42bc1e5 100644
--- a/src/sentry/web/frontend/debug/mail.py
+++ b/src/sentry/web/frontend/debug/mail.py
@@ -26,6 +26,7 @@ from sentry.models import (
     Activity, Event, Group, GroupStatus, GroupSubscriptionReason, Organization, OrganizationMember,
     Project, Release, Rule, Team
 )
+from sentry.event_manager import EventManager
 from sentry.plugins.sentry_mail.activity import emails
 from sentry.utils.dates import to_datetime, to_timestamp
 from sentry.utils.email import inline_css
@@ -89,15 +90,25 @@ def make_group_generator(random, project):
         first_seen = epoch + random.randint(0, 60 * 60 * 24 * 30)
         last_seen = random.randint(first_seen, first_seen + (60 * 60 * 24 * 30))
 
+        culprit = make_culprit(random)
+        level = random.choice(LOG_LEVELS.keys())
+        message = make_message(random)
+
         group = Group(
             id=id,
             project=project,
-            culprit=make_culprit(random),
-            level=random.choice(LOG_LEVELS.keys()),
-            message=make_message(random),
+            culprit=culprit,
+            level=level,
+            message=message,
             first_seen=to_datetime(first_seen),
             last_seen=to_datetime(last_seen),
             status=random.choice((GroupStatus.UNRESOLVED, GroupStatus.RESOLVED, )),
+            data={
+                'type': 'default',
+                'metadata': {
+                    'title': message,
+                }
+            }
         )
 
         if random.random() < 0.8:
@@ -186,13 +197,27 @@ class ActivityMailDebugView(View):
             ),
         )
 
+        data = dict(load_data('python'))
+        data['message'] = group.message
+        data.pop('logentry', None)
+
+        event_manager = EventManager(data)
+        event_manager.normalize()
+        event_type = event_manager.get_event_type()
+
+        group.mesage = event_manager.get_search_message()
+        group.data = {
+            'type': event_type.key,
+            'metadata': event_type.get_metadata(),
+        }
+
         event = Event(
             id=1,
             project=project,
+            message=event_manager.get_search_message(),
             group=group,
-            message=group.message,
-            data=load_data('python'),
             datetime=datetime(2016, 6, 13, 3, 8, 24, tzinfo=timezone.utc),
+            data=event_manager.get_data()
         )
 
         activity = Activity(
@@ -227,19 +252,34 @@ def alert(request):
         make_group_generator(random, project),
     )
 
-    data = load_data(platform)
+    data = dict(load_data(platform))
+    data['message'] = group.message
+    data.pop('logentry', None)
+    data['environment'] = 'prod'
     data['tags'] = [
-        ('logger', 'javascript'), ('environment', 'prod'), ('level', 'error'),
+        ('logger', 'javascript'),
+        ('environment', 'prod'),
+        ('level', 'error'),
         ('device', 'Other')
     ]
 
+    event_manager = EventManager(data)
+    event_manager.normalize()
+    event_type = event_manager.get_event_type()
+
+    group.message = event_manager.get_search_message()
+    group.data = {
+        'type': event_type.key,
+        'metadata': event_type.get_metadata(),
+    }
+
     event = Event(
         id=1,
         event_id='44f1419e73884cd2b45c79918f4b6dc4',
         project=project,
         group=group,
-        message=group.message,
-        data=data,
+        message=event_manager.get_search_message(),
+        data=event_manager.get_data(),
         datetime=to_datetime(
             random.randint(
                 to_timestamp(group.first_seen),
diff --git a/tests/fixtures/emails/alert.txt b/tests/fixtures/emails/alert.txt
index f0d4e039ee..1c8c691562 100644
--- a/tests/fixtures/emails/alert.txt
+++ b/tests/fixtures/emails/alert.txt
@@ -44,6 +44,12 @@ User
 
 
 
+Message
+-----------
+
+
+
+
 
 
 Unsubscribe: javascript:alert("This is a preview page, what did you expect to happen?");
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 87f67d7ecc..be6adef3b6 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -28,6 +28,7 @@ from sentry.plugins.sentry_mail.activity.base import ActivityEmail
 from sentry.plugins.sentry_mail.models import MailPlugin
 from sentry.testutils import TestCase
 from sentry.utils.email import MessageBuilder
+from sentry.event_manager import EventManager
 
 
 class MailPluginTest(TestCase):
@@ -115,14 +116,26 @@ class MailPluginTest(TestCase):
 
     @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
     def test_notify_users_does_email(self, _send_mail):
+        event_manager = EventManager({
+            'message': 'hello world',
+            'level': 'error',
+        })
+        event_manager.normalize()
+        event_data = event_manager.get_data()
+        event_type = event_manager.get_event_type()
+
         group = Group(
             id=2,
             first_seen=timezone.now(),
             last_seen=timezone.now(),
             project=self.project,
-            message='hello world',
+            message=event_manager.get_search_message(),
             logger='root',
             short_id=2,
+            data={
+                'type': event_type.key,
+                'metadata': event_type.get_metadata(),
+            }
         )
 
         event = Event(
@@ -130,9 +143,7 @@ class MailPluginTest(TestCase):
             message=group.message,
             project=self.project,
             datetime=group.last_seen,
-            data={'tags': [
-                ('level', 'error'),
-            ]},
+            data=event_data
         )
 
         notification = Notification(event=event)
@@ -148,14 +159,26 @@ class MailPluginTest(TestCase):
 
     @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
     def test_multiline_error(self, _send_mail):
+        event_manager = EventManager({
+            'message': 'hello world\nfoo bar',
+            'level': 'error',
+        })
+        event_manager.normalize()
+        event_data = event_manager.get_data()
+        event_type = event_manager.get_event_type()
+
         group = Group(
             id=2,
             first_seen=timezone.now(),
             last_seen=timezone.now(),
             project=self.project,
-            message='hello world\nfoo bar',
+            message=event_manager.get_search_message(),
             logger='root',
             short_id=2,
+            data={
+                'type': event_type.key,
+                'metadata': event_type.get_metadata(),
+            }
         )
 
         event = Event(
@@ -163,9 +186,7 @@ class MailPluginTest(TestCase):
             message=group.message,
             project=self.project,
             datetime=group.last_seen,
-            data={'tags': [
-                ('level', 'error'),
-            ]},
+            data=event_data,
         )
 
         notification = Notification(event=event)
diff --git a/tests/sentry/rules/conditions/test_event_attribute.py b/tests/sentry/rules/conditions/test_event_attribute.py
index a18977f064..f14f04cae9 100644
--- a/tests/sentry/rules/conditions/test_event_attribute.py
+++ b/tests/sentry/rules/conditions/test_event_attribute.py
@@ -9,9 +9,9 @@ class EventAttributeConditionTest(RuleTestCase):
 
     def get_event(self):
         event = self.create_event(
-            message='hello world',
             platform='php',
             data={
+                'message': 'hello world',
                 'type': 'error',
                 'request': {
                     'method': 'GET',
diff --git a/tests/snuba/test_organization_discover_query.py b/tests/snuba/test_organization_discover_query.py
index 7feed15a19..f0ba13b96b 100644
--- a/tests/snuba/test_organization_discover_query.py
+++ b/tests/snuba/test_organization_discover_query.py
@@ -26,11 +26,11 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
 
         self.event = self.create_event(
             group=self.group,
-            message="message!",
             platform="python",
             datetime=one_second_ago,
             tags={'environment': 'production'},
             data={
+                'message': 'message!',
                 'exception': {
                     'values': [
                         {
