commit 93f52a5c433410636944f67aae133bf833c102a9
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Apr 19 10:48:09 2017 +0200

    Added distribution model

diff --git a/src/sentry/models/distribution.py b/src/sentry/models/distribution.py
new file mode 100644
index 0000000000..5857724bec
--- /dev/null
+++ b/src/sentry/models/distribution.py
@@ -0,0 +1,45 @@
+"""
+sentry.models.distribution
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+from django.db import models, IntegrityError, transaction
+from django.utils import timezone
+
+from sentry.db.models import Model, FlexibleForeignKey, sane_repr
+
+
+class Distribution(Model):
+    __core__ = False
+
+    release = FlexibleForeignKey('sentry.Release')
+    name = models.CharField(max_length=64)
+    date_added = models.DateTimeField()
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_distribution'
+        unique_together = (('release', 'name'),)
+
+    __repr__ = sane_repr('release', 'name')
+
+    @classmethod
+    def get_or_create(cls, release, name, date_added=None):
+        if date_added is None:
+            date_added = timezone.now()
+        try:
+            with transaction.atomic():
+                return cls.objects.create(
+                    release=release,
+                    name=name,
+                    date_added=date_added
+                )
+        except IntegrityError:
+            return cls.objects.get(
+                release=release,
+                name=name
+            )
diff --git a/src/sentry/models/releasefile.py b/src/sentry/models/releasefile.py
index 832d57a261..d09047a492 100644
--- a/src/sentry/models/releasefile.py
+++ b/src/sentry/models/releasefile.py
@@ -18,7 +18,8 @@ class ReleaseFile(Model):
     """
     A ReleaseFile is an association between a Release and a File.
 
-    The ident of the file should be sha1(name) and must be unique per release.
+    The ident of the file should be sha1(name) or
+    sha1(name '@@' distribution.name) and must be unique per release.
     """
     __core__ = False
 
@@ -28,6 +29,7 @@ class ReleaseFile(Model):
     file = FlexibleForeignKey('sentry.File')
     ident = models.CharField(max_length=40)
     name = models.TextField()
+    distribution = FlexibleForeignKey('sentry.Distribution')
 
     __repr__ = sane_repr('release', 'ident')
 
@@ -38,15 +40,20 @@ class ReleaseFile(Model):
 
     def save(self, *args, **kwargs):
         if not self.ident and self.name:
-            self.ident = type(self).get_ident(self.name)
+            dist = self.distribution and self.distribution.name or None
+            self.ident = type(self).get_ident(self.name, dist)
         return super(ReleaseFile, self).save(*args, **kwargs)
 
     def update(self, *args, **kwargs):
         # If our name is changing, we must also change the ident
         if 'name' in kwargs and 'ident' not in kwargs:
-            kwargs['ident'] = self.ident = type(self).get_ident(kwargs['name'])
+            dist = kwargs.get('distribution') or self.distribution
+            kwargs['ident'] = self.ident = type(self).get_ident(
+                kwargs['name'], dist and dist.name or dist)
         return super(ReleaseFile, self).update(*args, **kwargs)
 
     @classmethod
-    def get_ident(cls, name):
+    def get_ident(cls, name, distribution=None):
+        if distribution is not None:
+            return sha1_text(name + '@@' + distribution).hexdigest()
         return sha1_text(name).hexdigest()
