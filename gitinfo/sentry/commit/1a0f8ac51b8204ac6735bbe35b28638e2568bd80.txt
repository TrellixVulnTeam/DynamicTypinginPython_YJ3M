commit 1a0f8ac51b8204ac6735bbe35b28638e2568bd80
Author: Max Bittker <maxbittker@gmail.com>
Date:   Fri Feb 16 08:41:22 2018 -0800

    feat(subscribe): Bulk subscribe and subscribe_actor (#7261)
    
    * added bulk_subscribe
    
    * added subscribe_actor

diff --git a/src/sentry/api/endpoints/group_notes.py b/src/sentry/api/endpoints/group_notes.py
index 8631653342..7f3a075c23 100644
--- a/src/sentry/api/endpoints/group_notes.py
+++ b/src/sentry/api/endpoints/group_notes.py
@@ -73,19 +73,21 @@ class GroupNotesEndpoint(GroupEndpoint):
 
         mentioned_teams = actor_mentions.get('teams')
 
-        mentioned_team_users = User.objects.filter(
-            sentry_orgmember_set__organization_id=group.project.organization_id,
-            sentry_orgmember_set__organizationmemberteam__team__in=mentioned_teams,
-            sentry_orgmember_set__organizationmemberteam__is_active=True,
-            is_active=True,
-        ).exclude(id__in={u.id for u in actor_mentions.get('users')})
-
-        for user in mentioned_team_users:
-            GroupSubscription.objects.subscribe(
-                group=group,
-                user=user,
-                reason=GroupSubscriptionReason.team_mentioned,
-            )
+        mentioned_team_users = list(
+            User.objects.filter(
+                sentry_orgmember_set__organization_id=group.project.organization_id,
+                sentry_orgmember_set__organizationmemberteam__team__in=mentioned_teams,
+                sentry_orgmember_set__organizationmemberteam__is_active=True,
+                is_active=True,
+            ).exclude(id__in={u.id for u in actor_mentions.get('users')})
+            .values_list('id', flat=True)
+        )
+
+        GroupSubscription.objects.bulk_subscribe(
+            group=group,
+            user_ids=mentioned_team_users,
+            reason=GroupSubscriptionReason.team_mentioned,
+        )
 
         activity = Activity.objects.create(
             group=group,
diff --git a/src/sentry/models/groupsubscription.py b/src/sentry/models/groupsubscription.py
index 9b5271b798..8af92722b6 100644
--- a/src/sentry/models/groupsubscription.py
+++ b/src/sentry/models/groupsubscription.py
@@ -94,6 +94,54 @@ class GroupSubscriptionManager(BaseManager):
         except IntegrityError:
             pass
 
+    def subscribe_actor(self, group, actor, reason=GroupSubscriptionReason.unknown):
+        from sentry.models import User, Team
+
+        if isinstance(actor, User):
+            return self.subscribe(group, actor, reason)
+        if isinstance(actor, Team):
+            # subscribe the members of the team
+            team_users_ids = list(actor.member_set.values_list('user_id', flat=True))
+            return self.bulk_subscribe(group, team_users_ids, reason)
+
+        raise NotImplementedError('Unknown actor type: %r' % type(actor))
+
+    def bulk_subscribe(self, group, user_ids, reason=GroupSubscriptionReason.unknown):
+        """
+        Subscribe a list of user ids to an issue, but only if the users are not explicitly
+        unsubscribed.
+        """
+        # 5 retries for race conditions where
+        # concurrent subscription attempts cause integrity errors
+        for _ in range(5):
+
+            existing_subscriptions = set(GroupSubscription.objects.filter(
+                user_id__in=user_ids,
+                group=group,
+                project=group.project,
+            ).values_list('user_id', flat=True))
+
+            subscriptions = [
+                GroupSubscription(
+                    user_id=user_id,
+                    group=group,
+                    project=group.project,
+                    is_active=True,
+                    reason=reason,
+                )
+                for user_id in user_ids
+                if user_id not in existing_subscriptions
+            ]
+
+            try:
+                with transaction.atomic():
+                    self.bulk_create(subscriptions)
+                    return True
+            except IntegrityError:
+                pass
+
+        raise Exception('Bulk_Subscribe failed')
+
     def get_participants(self, group):
         """
         Identify all users who are participating with a given issue.
diff --git a/tests/sentry/models/test_groupsubscription.py b/tests/sentry/models/test_groupsubscription.py
index 157c8e0be0..08a7d71a92 100644
--- a/tests/sentry/models/test_groupsubscription.py
+++ b/tests/sentry/models/test_groupsubscription.py
@@ -24,6 +24,67 @@ class SubscribeTest(TestCase):
         # should not error
         GroupSubscription.objects.subscribe(group=group, user=user)
 
+    def test_bulk(self):
+        group = self.create_group()
+
+        user_ids = []
+        for i in range(20):
+            user = self.create_user()
+            user_ids.append(user.id)
+
+        GroupSubscription.objects.bulk_subscribe(group=group, user_ids=user_ids)
+
+        assert len(GroupSubscription.objects.filter(
+            group=group,
+        )) == 20
+
+        one_more = self.create_user()
+        user_ids.append(one_more.id)
+
+        # should not error
+        GroupSubscription.objects.bulk_subscribe(group=group, user_ids=user_ids)
+
+        assert len(GroupSubscription.objects.filter(
+            group=group,
+        )) == 21
+
+    def test_actor_user(self):
+        group = self.create_group()
+        user = self.create_user()
+
+        GroupSubscription.objects.subscribe_actor(group=group, actor=user)
+
+        assert GroupSubscription.objects.filter(
+            group=group,
+            user=user,
+        ).exists()
+
+        # should not error
+        GroupSubscription.objects.subscribe_actor(group=group, actor=user)
+
+    def test_actor_team(self):
+        org = self.create_organization()
+        group = self.create_group(organization=org)
+        user = self.create_user()
+        team = self.create_team(organization=org)
+        self.create_member(
+            user=user,
+            email='bar@example.com',
+            organization=org,
+            role='owner',
+            teams=[team],
+        )
+
+        GroupSubscription.objects.subscribe_actor(group=group, actor=team)
+
+        assert GroupSubscription.objects.filter(
+            group=group,
+            user=user,
+        ).exists()
+
+        # should not error
+        GroupSubscription.objects.subscribe_actor(group=group, actor=team)
+
 
 class GetParticipantsTest(TestCase):
     def test_simple(self):
