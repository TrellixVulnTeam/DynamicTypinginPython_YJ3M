commit 61573c44b5b98073e60e36712268197212ced831
Author: ted kaemming <ted@kaemming.com>
Date:   Mon Dec 11 11:56:28 2017 -0800

    ref(tsdb): Add `make_series` function to TSDB for generating arbitrary time series (#6691)

diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index 880a726444..4399f7d12a 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -7,6 +7,7 @@ sentry.tsdb.base
 """
 from __future__ import absolute_import
 
+import collections
 import six
 
 from collections import OrderedDict
@@ -100,7 +101,7 @@ class TSDBModel(Enum):
 class BaseTSDB(Service):
     __all__ = (
         'models', 'incr', 'incr_multi', 'get_range', 'get_rollups', 'get_sums', 'rollup',
-        'validate',
+        'validate', 'make_series',
     )
 
     models = TSDBModel
@@ -226,6 +227,11 @@ class BaseTSDB(Service):
             rollups[rollup] = map(to_datetime, series)
         return rollups
 
+    def make_series(self, default, start, end=None, rollup=None):
+        f = default if isinstance(default, collections.Callable) else lambda timestamp: default
+        return [(timestamp, f(timestamp))
+                for timestamp in self.get_optimal_rollup_series(start, end, rollup)[1]]
+
     def calculate_expiry(self, rollup, samples, timestamp):
         """
         Calculate the expiration time for a rollup.
diff --git a/tests/sentry/tsdb/test_base.py b/tests/sentry/tsdb/test_base.py
index 58542fe895..ec6c1b4a22 100644
--- a/tests/sentry/tsdb/test_base.py
+++ b/tests/sentry/tsdb/test_base.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import, division
 
+import itertools
 import mock
 import pytz
 
@@ -104,3 +105,28 @@ class BaseTSDBTest(TestCase):
         assert self.tsdb.get_optimal_rollup_series(
             start, rollup=ONE_DAY
         ) == (ONE_DAY, [to_timestamp(datetime(2016, 8, 1, 0, tzinfo=pytz.utc))])
+
+    @mock.patch('django.utils.timezone.now')
+    def test_make_series_aligned_intervals(self, now):
+        now.return_value = datetime(2016, 8, 1, tzinfo=pytz.utc)
+
+        start = now() - timedelta(seconds=30)
+        assert self.tsdb.make_series(0, start) == [
+            (to_timestamp(start + timedelta(seconds=10) * i), 0) for i in xrange(4)
+        ]
+
+        start = now() - timedelta(minutes=30)
+        assert self.tsdb.make_series(lambda timestamp: 1, start) == [
+            (to_timestamp(start + timedelta(minutes=1) * i), 1) for i in xrange(31)
+        ]
+
+        counter = itertools.count()
+        start = now() - timedelta(hours=5)
+        assert self.tsdb.make_series(lambda timestamp: next(counter), start) == [
+            (to_timestamp(start + timedelta(hours=1) * i), i) for i in xrange(6)
+        ]
+
+        start = now() - timedelta(days=7)
+        assert self.tsdb.make_series(0, start) == [
+            (to_timestamp(start + timedelta(hours=24) * i), 0) for i in xrange(8)
+        ]
