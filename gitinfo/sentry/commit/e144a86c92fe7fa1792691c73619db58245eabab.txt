commit e144a86c92fe7fa1792691c73619db58245eabab
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Jan 17 21:22:35 2017 +0100

    Backed out some reprocessing changes for now.

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 58b5df62ca..e1595a8858 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -71,7 +71,6 @@ STATUS_CHOICES = {
     'unresolved': GroupStatus.UNRESOLVED,
     'ignored': GroupStatus.IGNORED,
     'resolvedInNextRelease': GroupStatus.UNRESOLVED,
-    'unprocessed': GroupStatus.UNPROCESSED,
 
     # TODO(dcramer): remove in 9.0
     'muted': GroupStatus.IGNORED,
@@ -151,8 +150,6 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
             except InvalidQuery as e:
                 raise ValidationError(u'Your search query could not be parsed: {}'.format(e.message))
 
-        query_kwargs['include_unprocessed'] = request.GET.get('includeUnprocessed') == '1'
-
         return query_kwargs
 
     # bookmarks=0/1
@@ -187,9 +184,6 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
         :qparam querystring query: an optional Sentry structured search
                                    query.  If not provided an implied
                                    ``"is:resolved"`` is assumed.)
-        :qparam bool includeUnprocessed: include events that are unprocessed.
-                                         This is only used when filtering
-                                         by status is not used.
         :pparam string organization_slug: the slug of the organization the
                                           issues belong to.
         :pparam string project_slug: the slug of the project the issues
@@ -456,9 +450,6 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
 
             result['statusDetails'] = {}
 
-        elif result.get('status') == 'unprocessed':
-            return Response('{"detail": "Cannot set events to unprocessed from '
-                            'the API"}', status=400)
         elif result.get('status'):
             new_status = STATUS_CHOICES[result['status']]
 
diff --git a/src/sentry/api/endpoints/project_processingissues.py b/src/sentry/api/endpoints/project_processingissues.py
deleted file mode 100644
index ea662e4ae7..0000000000
--- a/src/sentry/api/endpoints/project_processingissues.py
+++ /dev/null
@@ -1,24 +0,0 @@
-from __future__ import absolute_import
-
-from rest_framework.response import Response
-
-from sentry.api.bases.project import ProjectEndpoint
-from sentry.api.serializers import serialize
-
-
-class ProjectProcessingIssuesEndpoint(ProjectEndpoint):
-    def get(self, request, project):
-        """
-        List a project's processing issues.
-        """
-        data = {
-            'hasIssues': False,
-            'affectedIssues': 0,
-            'affectedGroups': 0,
-            'affectedReleases': 0,
-        }
-
-        if request.GET.get('detailed') == '1':
-            data['issues'] = []
-
-        return Response(serialize(data, request.user))
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 6de57f9d25..ee1eda7c02 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -186,8 +186,6 @@ class GroupSerializer(Serializer):
             status_label = 'pending_deletion'
         elif status == GroupStatus.PENDING_MERGE:
             status_label = 'pending_merge'
-        elif status == GroupStatus.UNPROCESSED:
-            status_label = 'unprocessed'
         else:
             status_label = 'unresolved'
 
@@ -222,7 +220,6 @@ class GroupSerializer(Serializer):
             'assignedTo': attrs['assigned_to'],
             'isBookmarked': attrs['is_bookmarked'],
             'isSubscribed': is_subscribed,
-            'isTransient': obj.is_transient(),
             'subscriptionDetails': {
                 'reason': SUBSCRIPTION_REASON_MAP.get(
                     subscription.reason,
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index da0e0e61b4..68d4c58246 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -68,7 +68,6 @@ from .endpoints.project_rules import ProjectRulesEndpoint
 from .endpoints.project_rule_details import ProjectRuleDetailsEndpoint
 from .endpoints.project_searches import ProjectSearchesEndpoint
 from .endpoints.project_search_details import ProjectSearchDetailsEndpoint
-from .endpoints.project_processingissues import ProjectProcessingIssuesEndpoint
 from .endpoints.project_stats import ProjectStatsEndpoint
 from .endpoints.project_tags import ProjectTagsEndpoint
 from .endpoints.project_tagkey_details import ProjectTagKeyDetailsEndpoint
@@ -308,9 +307,6 @@ urlpatterns = patterns(
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/searches/(?P<search_id>[^\/]+)/$',
         ProjectSearchDetailsEndpoint.as_view(),
         name='sentry-api-0-project-search-details'),
-    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/processingissues/$',
-        ProjectProcessingIssuesEndpoint.as_view(),
-        name='sentry-api-0-project-processing-issues'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/stats/$',
         ProjectStatsEndpoint.as_view(),
         name='sentry-api-0-project-stats'),
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index b1a555eede..0e566c289c 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -51,13 +51,11 @@ SEARCH_SORT_OPTIONS = OrderedDict((
 STATUS_UNRESOLVED = 0
 STATUS_RESOLVED = 1
 STATUS_IGNORED = 2
-STATUS_UNPROCESSED = 6
 
 STATUS_CHOICES = {
     'resolved': STATUS_RESOLVED,
     'unresolved': STATUS_UNRESOLVED,
     'ignored': STATUS_IGNORED,
-    'unprocessed': STATUS_UNPROCESSED,
 
     # TODO(dcramer): remove in 9.0
     'muted': STATUS_IGNORED,
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index d99e651b10..517e3cbaa5 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -45,7 +45,6 @@ from sentry.utils.validators import validate_ip
 
 
 NON_STORED_DATA_KEYS = [
-    'unprocessed',
     'event_id',
     'level',
     'culprit',
@@ -421,8 +420,6 @@ class EventManager(object):
 
         data = self.data.copy()
 
-        unprocessed = data.get('unprocessed', False)
-
         # First we pull out our top-level (non-data attr) kwargs
         event_id = data.get('event_id')
         level = data.get('level')
@@ -601,7 +598,6 @@ class EventManager(object):
             event=event,
             hashes=hashes,
             release=release,
-            unprocessed=unprocessed,
             **group_kwargs
         )
 
@@ -811,7 +807,7 @@ class EventManager(object):
             group=group,
         )
 
-    def _save_aggregate(self, event, hashes, release, unprocessed=False, **kwargs):
+    def _save_aggregate(self, event, hashes, release, **kwargs):
         project = event.project
 
         # attempt to find a matching hash
@@ -827,13 +823,8 @@ class EventManager(object):
         # should be better tested/reviewed
         if existing_group_id is None:
             kwargs['score'] = ScoreClause.calculate(1, kwargs['last_seen'])
-            if unprocessed:
-                kwargs['status'] = GroupStatus.UNPROCESSED
             with transaction.atomic():
-                if unprocessed:
-                    short_id = None
-                else:
-                    short_id = project.next_short_id()
+                short_id = project.next_short_id()
                 group, group_is_new = Group.objects.create(
                     project=project,
                     short_id=short_id,
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index ff2fe3f27d..8316927b94 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -89,33 +89,6 @@ def find_all_stacktraces(data):
     return rv
 
 
-def update_stacktrace(stacktrace, new_frames, container=None,
-                      store_raw=False):
-    """Utility function that can update a stacktrace with new frames
-    according to the reprocessing rules.  Best paired with
-    `find_all_stacktraces`.
-    """
-    # If we have a known stacktrace container, put us to the
-    # expected places
-    if container is not None:
-        # Update raw_stacktrace based on if we want to store stuff there.
-        if store_raw:
-            container['raw_stacktrace'] = {
-                'frames': stacktrace['frames']
-            }
-        else:
-            container.pop('raw_stacktrace', None)
-
-        # We make sure the stacktrace moves to the processed slot.
-        # If the input data was 'raw_stacktrace' we need to make
-        # sure it now moves into 'stacktrace' as we will place a
-        # new unprocessed stacktrace in that location.
-        container['stacktrace'] = stacktrace
-
-    # Put the new frames into the stacktrace object.
-    stacktrace['frames'] = new_frames
-
-
 def get_sdk_from_event(event):
     sdk_info = (event.get('debug_meta') or {}).get('sdk_info')
     if sdk_info:
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 89fec871d5..dd8e8289f0 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -52,7 +52,6 @@ class GroupStatus(object):
     PENDING_DELETION = 3
     DELETION_IN_PROGRESS = 4
     PENDING_MERGE = 5
-    UNPROCESSED = 6
 
     # TODO(dcramer): remove in 9.0
     MUTED = IGNORED
@@ -243,17 +242,8 @@ class Group(Model):
         return self.last_seen < timezone.now() - timedelta(hours=int(resolve_age))
 
     def is_ignored(self):
-        if self.is_transient():
-            return True
         return self.get_status() == GroupStatus.IGNORED
 
-    def is_transient(self):
-        """Anything that is unprocessed is also transient.  Transient groups are
-        considered temporary and should not trigger notifications, do not
-        allow issues to be filed etc.
-        """
-        return self.status == GroupStatus.UNPROCESSED
-
     # TODO(dcramer): remove in 9.0 / after plugins no long ref
     is_muted = is_ignored
 
diff --git a/src/sentry/search/base.py b/src/sentry/search/base.py
index 600777b5a1..89ab8dc315 100644
--- a/src/sentry/search/base.py
+++ b/src/sentry/search/base.py
@@ -28,7 +28,7 @@ class SearchBackend(object):
               bookmarked_by=None, assigned_to=None, first_release=None,
               sort_by='date', age_from=None, age_to=None,
               unassigned=None, date_from=None, date_to=None,
-              include_unprocessed=False, cursor=None, limit=100):
+              cursor=None, limit=100):
         """
         The return value should be a CursorResult.
 
diff --git a/src/sentry/search/django/backend.py b/src/sentry/search/django/backend.py
index 8f35451efa..36bfebf1a7 100644
--- a/src/sentry/search/django/backend.py
+++ b/src/sentry/search/django/backend.py
@@ -75,7 +75,7 @@ class DjangoSearchBackend(SearchBackend):
                         date_to=None, date_to_inclusive=True,
                         active_at_from=None, active_at_from_inclusive=True,
                         active_at_to=None, active_at_to_inclusive=True,
-                        include_unprocessed=False, cursor=None, limit=None):
+                        cursor=None, limit=None):
         from sentry.models import Event, Group, GroupSubscription, GroupStatus
 
         engine = get_db_engine('default')
@@ -98,8 +98,6 @@ class DjangoSearchBackend(SearchBackend):
                 GroupStatus.DELETION_IN_PROGRESS,
                 GroupStatus.PENDING_MERGE,
             )
-            if not include_unprocessed:
-                status_in += (GroupStatus.UNPROCESSED,)
             queryset = queryset.exclude(status__in=status_in)
         else:
             queryset = queryset.filter(status=status)
diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index d60ce1a5aa..3d8b6001ef 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -144,9 +144,6 @@ const StreamGroup = React.createClass({
     if (data.status === 'ignored') {
       className += ' isIgnored';
     }
-    if (data.status === 'unprocessed') {
-      className += ' isUnprocessed';
-    }
 
     className += ' type-' + data.type;
     className += ' level-' + data.level;
@@ -167,11 +164,6 @@ const StreamGroup = React.createClass({
             data={data} />
           <div className="event-extra">
             <ul>
-              {data.status === 'unprocessed' &&
-                <li>
-                  <strong className="unprocessed-hint">UNPROCESSED</strong>
-                </li>
-              }
               {this.getFeatures().has('callsigns') && data.shortId &&
                 <li>
                   <ShortId shortId={data.shortId} />
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index ae4fba96af..b3ce7a09f7 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -47,7 +47,6 @@ import ProjectInstallPlatform from './views/projectInstall/platform';
 import ProjectReleases from './views/projectReleases';
 import ProjectSavedSearches from './views/projectSavedSearches';
 import ProjectDebugSymbols from './views/projectDebugSymbols';
-import ProjectProcessingIssues from './views/projectProcessingIssues';
 import ProjectSettings from './views/projectSettings';
 import ProjectUserReports from './views/projectUserReports';
 import ProjectUserReportSettings from './views/projectUserReportSettings';
@@ -159,7 +158,6 @@ function routes() {
             <Route path="filters/" component={errorHandler(ProjectFilters)} />
             <Route path="saved-searches/" component={errorHandler(ProjectSavedSearches)} />
             <Route path="debug-symbols/" component={errorHandler(ProjectDebugSymbols)} />
-            <Route path="processing-issues/" component={errorHandler(ProjectProcessingIssues)} />
             <Route path="user-feedback/" component={errorHandler(ProjectUserReportSettings)} />
             <Route path="csp/" component={errorHandler(ProjectCspSettings)} />
             <Route path="install/" component={errorHandler(ProjectDocsContext)}>
diff --git a/src/sentry/static/sentry/app/stores/streamTagStore.jsx b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
index a916996209..3b80f2a1b2 100644
--- a/src/sentry/static/sentry/app/stores/streamTagStore.jsx
+++ b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
@@ -29,8 +29,7 @@ const StreamTagStore = Reflux.createStore({
           // TODO(dcramer): remove muted once data is migrated and 9.0+
           'muted',
           'assigned',
-          'unassigned',
-          'unprocessed',
+          'unassigned'
         ],
         predefined: true
       },
diff --git a/src/sentry/static/sentry/app/views/groupDetails/header.jsx b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
index 6c27196746..dafea59c32 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/header.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
@@ -104,9 +104,6 @@ const GroupHeader = React.createClass({
     if (group.status === 'resolved') {
       className += ' isResolved';
     }
-    if (group.status === 'unprocessed') {
-      className += ' isUnprocessed';
-    }
 
     let groupId = group.id,
       projectId = this.getProject().slug,
@@ -119,9 +116,6 @@ const GroupHeader = React.createClass({
         <div className="row">
           <div className="col-sm-8">
             <h3>
-              {group.status === 'unprocessed' &&
-                <Link to={`/${orgId}/${projectId}/?query=is:unprocessed`} className="unprocessed-hint">UNPROCESSED</Link>
-              }
               <GroupTitle data={group} />
             </h3>
             <div className="event-message">
diff --git a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
deleted file mode 100644
index f853a002c9..0000000000
--- a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
+++ /dev/null
@@ -1,180 +0,0 @@
-import React from 'react';
-
-import ApiMixin from '../mixins/apiMixin';
-import DateTime from '../components/dateTime';
-import LoadingError from '../components/loadingError';
-import LoadingIndicator from '../components/loadingIndicator';
-import {t} from '../locale';
-
-const MESSAGES = {
-  'native:missing-dsym': t('Missing dSYM file'),
-  'native:bad-dsym': t('Bad dSYM file'),
-  'native:missing-symbol': t('Missing symbol in dSYM file'),
-};
-
-const HELP_LINKS = {
-  'native:missing-dsym': 'https://docs.sentry.io/clients/cocoa/dsym/',
-  'native:bad-dsym': 'https://docs.sentry.io/clients/cocoa/dsym/',
-};
-
-
-const ProjectProcessingIssues = React.createClass({
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      processingIssues: null,
-    };
-  },
-
-  componentDidMount() {
-    this.fetchData();
-  },
-
-  fetchData() {
-    let {orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/processingissues/?detailed=1`, {
-      success: (data, _, jqXHR) => {
-        this.setState({
-          error: false,
-          loading: false,
-          processingIssues: data,
-          pageLinks: jqXHR.getResponseHeader('Link')
-        });
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false
-        });
-      }
-    });
-  },
-
-  renderDebugTable() {
-    let body;
-
-    if (this.state.loading)
-      body = this.renderLoading();
-    else if (this.state.error)
-      body = <LoadingError onRetry={this.fetchData} />;
-    else if (this.state.processingIssues.hasIssues)
-      body = this.renderResults();
-    else
-      body = this.renderEmpty();
-
-    return body;
-  },
-
-  renderLoading() {
-    return (
-      <div className="box">
-        <LoadingIndicator />
-      </div>
-    );
-  },
-
-  renderEmpty() {
-    return (
-      <div className="box empty-stream">
-        <span className="icon icon-exclamation" />
-        <p>{t('Good news! There are no processing issues.')}</p>
-      </div>
-    );
-  },
-
-  getProblemDescription(item) {
-    let msg = MESSAGES[item.type + ':' + item.data.type];
-    return msg || item.message || 'Unknown Error';
-  },
-
-  getImageName(path) {
-    let pathSegments = path.split(/\//g);
-    return pathSegments[pathSegments.length - 1];
-  },
-
-  renderProblem(item) {
-    let description = this.getProblemDescription(item);
-    let helpLink = HELP_LINKS[item.type + ':' + item.data.type];
-    return (
-      <div className="processing-issue">
-        <span className="description">{description}</span>
-        {helpLink &&
-          <a href={helpLink} className="help-link"><span className="icon-question" /></a>}
-      </div>
-    );
-  },
-
-  renderDetails(item) {
-    let dsymUUID = null;
-    let dsymName = null;
-    let dsymArch = null;
-
-    if (item.type === 'native') {
-      if (item.data.image_uuid) {
-        dsymUUID = <code className="uuid">{item.data.image_uuid}</code>;
-      }
-      if (item.data.image_path) {
-        dsymName = <em>{this.getImageName(item.data.image_path)}</em>;
-      }
-      if (item.data.image_arch) {
-        dsymArch = item.data.image_arch;
-      }
-    }
-
-    return (
-      <span>
-        {dsymUUID && <span> {dsymUUID}</span>}
-        {dsymArch && <span> {dsymArch}</span>}
-        {dsymName && <span> (for {dsymName})</span>}
-      </span>
-    );
-  },
-
-  renderResults() {
-    return (
-      <table className="table processing-issues">
-        <thead>
-          <tr>
-            <th>{t('Problem')}</th>
-            <th>{t('Details')}</th>
-            <th>{t('Issues')}</th>
-            <th>{t('Last seen')}</th>
-          </tr>
-        </thead>
-        <tbody>
-          {this.state.processingIssues.issues.map((item, idx) => {
-            return (
-              <tr key={idx}>
-                <td>{this.renderProblem(item)}</td>
-                <td>{this.renderDetails(item)}</td>
-                <td>{item.affectedGroups + ''}</td>
-                <td><DateTime date={item.lastSeen}/></td>
-              </tr>
-            );
-          })}
-        </tbody>
-      </table>
-    );
-  },
-
-  render() {
-    return (
-      <div>
-        <h1>{t('Processing Issues')}</h1>
-        <p>{t(`
-          For some platforms the event processing requires configuration or
-          manual action.  If a misconfiguration happens or some necessary
-          steps are skipped issues can occur during processing.  In these
-          cases you can see all the problems here with guides of how to correct
-          them.
-        `)}</p>
-        {this.renderDebugTable()}
-      </div>
-    );
-  }
-});
-
-export default ProjectProcessingIssues;
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index ea49ee1149..b037c438fb 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -95,7 +95,6 @@ const ProjectSettings = React.createClass({
             <li><a href={`${settingsUrlRoot}/release-tracking/`}>{t('Release Tracking')}</a></li>
             <ListLink to={`/${orgId}/${projectId}/settings/saved-searches/`}>{t('Saved Searches')}</ListLink>
             <ListLink to={`/${orgId}/${projectId}/settings/debug-symbols/`}>{t('Debug Symbols')}</ListLink>
-            <ListLink to={`/${orgId}/${projectId}/settings/processing-issues/`}>{t('Processing Issues')}</ListLink>
           </ul>
           <h6 className="nav-header">{t('Data')}</h6>
           <ul className="nav nav-stacked">
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 8ef35826ff..29e35c9c73 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -22,7 +22,7 @@ import StreamSidebar from './stream/sidebar';
 import utils from '../utils';
 import {logAjaxError} from '../utils/logging';
 import parseLinkHeader from '../utils/parseLinkHeader';
-import {t, tn, tct} from '../locale';
+import {t, tct} from '../locale';
 
 const Stream = React.createClass({
   propTypes: {
@@ -59,7 +59,6 @@ const Stream = React.createClass({
       loading: (searchId || !this.hasQuery() ? true : false),
       savedSearchLoading: true,
       savedSearchList: [],
-      processingIssues: null,
       selectAllActive: false,
       multiSelected: false,
       anySelected: false,
@@ -87,7 +86,6 @@ const Stream = React.createClass({
     });
 
     this.fetchSavedSearches();
-    this.fetchProcessingIssues();
     this.fetchTags();
     if (!this.state.loading) {
       this.fetchData();
@@ -107,7 +105,6 @@ const Stream = React.createClass({
     if (searchIdChanged || nextProps.location.search !== this.props.location.search) {
       // TODO(dcramer): handle 404 from popState on searchId
       this.setState(this.getQueryState(nextProps), () => {
-        this.fetchProcessingIssues();
         this.fetchData();
       });
     }
@@ -195,23 +192,6 @@ const Stream = React.createClass({
     });
   },
 
-  fetchProcessingIssues() {
-    let {orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/processingissues/`, {
-      success: (data) => {
-        if (data.hasIssues) {
-          this.setState({
-            processingIssues: data,
-          });
-        }
-      },
-      error: (error) => {
-        logAjaxError(error);
-        // this is okay. it's just a ui hint
-      }
-    });
-  },
-
   fetchTags() {
     StreamTagStore.reset();
     StreamTagActions.loadTags();
@@ -482,10 +462,6 @@ const Stream = React.createClass({
     return links && !links.previous.results && !links.next.results;
   },
 
-  showingProcessingIssues() {
-    return this.state.query && this.state.query.trim() == 'is:unprocessed';
-  },
-
   transitionTo() {
     let queryParams = {};
 
@@ -565,37 +541,6 @@ const Stream = React.createClass({
     );
   },
 
-  renderProcessingIssuesHint() {
-    let pi = this.state.processingIssues;
-    if (!pi) {
-      return null;
-    }
-
-    let {orgId, projectId} = this.props.params;
-    let issues = tn('%d problems', '%d problems', pi.affectedIssues);
-    let groups = tn('%d group', '%d groups', pi.affectedGroups);
-    let releases = tn('%d release', '%d releases', pi.affectedReleases);
-
-    return (
-      <div className="processing-issues">
-        <strong>{t('Unprocessed Issues: ')}</strong>
-        {tct('there are [issues] affecting [groups] in [releases].', {
-          issues: issues,
-          groups: groups,
-          releases: releases,
-        })}
-        {!this.showingProcessingIssues() &&
-          <span>
-            {' '}
-            <Link to={`/${orgId}/${projectId}/?query=is:unprocessed`}>{t('show affected issues')}</Link>
-            {' or '}
-          </span>}
-        {' '}
-        <Link to={`/${orgId}/${projectId}/settings/processing-issues/`}>{t('resolve problems')}</Link>
-      </div>
-    );
-  },
-
   renderStreamBody() {
     let body;
 
@@ -669,7 +614,6 @@ const Stream = React.createClass({
                 </div>
               </div>
             </Sticky>
-            {this.renderProcessingIssuesHint()}
             {this.renderStreamBody()}
             <Pagination pageLinks={this.state.pageLinks}/>
           </div>
diff --git a/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx b/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
index 88f37e3508..be7ce61588 100644
--- a/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
+++ b/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
@@ -170,11 +170,7 @@ const SavedSearchSelector = React.createClass({
   getTitle() {
     let searchId = this.props.searchId || null;
     if (!searchId) {
-      if ((this.props.query || '').trim() === 'is:unprocessed') {
-        return t('Unprocessed Issues');
-      } else {
-        return t('Custom Search');
-      }
+      return t('Custom Search');
     }
     let results = this.props.savedSearchList.filter((search) => {
       return searchId === search.id;
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index ef7d79c096..b784f5c9ce 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -74,7 +74,7 @@ const SearchBar = React.createClass({
         {
           title: t('Status'),
           desc: t('State of an issue'),
-          example: 'is:resolved, unresolved, ignored, assigned, unassigned, unprocessed',
+          example: 'is:resolved, unresolved, ignored, assigned, unassigned',
           className: 'icon-toggle',
           value: 'is:'
         },
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 5ae63a5547..c19377094f 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -23,18 +23,6 @@
       color: @70;
       font-size: 90%;
     }
-
-    a.unprocessed-hint {
-      display: inline-block;
-      vertical-align: top;
-      font-size: 13px;
-      background: @purple-light;
-      color: white;
-      padding: 2px 6px;
-      border-radius: 2px;
-      margin-top: 3px;
-      margin-right: 10px;
-    }
   }
 
   .short-id {
diff --git a/src/sentry/static/sentry/less/project-settings.less b/src/sentry/static/sentry/less/project-settings.less
index cff5074850..ea173dc510 100644
--- a/src/sentry/static/sentry/less/project-settings.less
+++ b/src/sentry/static/sentry/less/project-settings.less
@@ -227,21 +227,3 @@
       opacity: 0.5;
     }
   }
-
-/**
- * Processing Issues
- * ============================================================================
- */
-table.processing-issues {
-  tbody tr td {
-    padding: 7px 20px;
-  }
-  a.help-link {
-    margin-left: 6px;
-  }
-  code.uuid {
-    font-size: 12px;
-    font-weight: bold;
-    border-radius: 2px;
-  }
-}
diff --git a/src/sentry/static/sentry/less/stream.less b/src/sentry/static/sentry/less/stream.less
index 548cb9ee26..11e733aeeb 100644
--- a/src/sentry/static/sentry/less/stream.less
+++ b/src/sentry/static/sentry/less/stream.less
@@ -193,24 +193,6 @@
 * ============================================================================
 */
 
-
-.stream-content .processing-issues {
-  padding-left: 0;
-  font-size: 14px;
-  font-weight: 400;
-  padding: 5px 10px;
-  border: 1px solid @purple-light;
-  background: lighten(@purple-lightest, 15%);
-  color: @purple-dark;
-  text-align: center;
-
-  a {
-    color: @purple-dark;
-    font-weight: bold;
-    text-decoration: underline;
-  }
-}
-
 .group-list {
   background: #fff;
   border: 1px solid @trim;
@@ -273,17 +255,6 @@
       }
     }
 
-    &.isUnprocessed {
-      background: lighten(@purple-light, 30%);
-
-      strong.unprocessed-hint {
-        background: @purple-light;
-        color: white;
-        padding: 2px 6px;
-        border-radius: 2px;
-      }
-    }
-
     &.selected {
       background: lighten(@blue, 20);
       box-shadow: inset 0 1px 0 rgba(52, 60, 69, 0.08);
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index 5e8c12dfce..093e5b2f8e 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -13,7 +13,6 @@ import logging
 from raven.contrib.django.models import client as Raven
 from time import time
 
-from sentry.models import Event
 from sentry.cache import default_cache
 from sentry.tasks.base import instrumented_task
 from sentry.utils import metrics
@@ -46,8 +45,7 @@ def should_process(data):
     time_limit=65,
     soft_time_limit=60,
 )
-def preprocess_event(cache_key=None, data=None, start_time=None,
-                     reprocesses_event_id=None, **kwargs):
+def preprocess_event(cache_key=None, data=None, start_time=None, **kwargs):
     if cache_key:
         data = default_cache.get(cache_key)
 
@@ -62,16 +60,14 @@ def preprocess_event(cache_key=None, data=None, start_time=None,
     })
 
     if should_process(data):
-        process_event.delay(cache_key=cache_key, start_time=start_time,
-                            reprocesses_event_id=reprocesses_event_id)
+        process_event.delay(cache_key=cache_key, start_time=start_time)
         return
 
     # If we get here, that means the event had no preprocessing needed to be done
     # so we can jump directly to save_event
     if cache_key:
         data = None
-    save_event.delay(cache_key=cache_key, data=data, start_time=start_time,
-                     reprocesses_event_id=reprocesses_event_id)
+    save_event.delay(cache_key=cache_key, data=data, start_time=start_time)
 
 
 @instrumented_task(
@@ -80,8 +76,7 @@ def preprocess_event(cache_key=None, data=None, start_time=None,
     time_limit=65,
     soft_time_limit=60,
 )
-def process_event(cache_key, start_time=None, reprocesses_event_id=None,
-                  **kwargs):
+def process_event(cache_key, start_time=None, **kwargs):
     from sentry.plugins import plugins
 
     data = default_cache.get(cache_key)
@@ -125,8 +120,7 @@ def process_event(cache_key, start_time=None, reprocesses_event_id=None,
 @instrumented_task(
     name='sentry.tasks.store.save_event',
     queue='events.save_event')
-def save_event(cache_key=None, data=None, start_time=None,
-               reprocesses_event_id=None, **kwargs):
+def save_event(cache_key=None, data=None, start_time=None, **kwargs):
     """
     Saves an event to the database.
     """
@@ -135,16 +129,6 @@ def save_event(cache_key=None, data=None, start_time=None,
     if cache_key:
         data = default_cache.get(cache_key)
 
-    # If we are reprocessing an old event we just delete it here.
-    # XXX(mitsuhiko): this is most likely completely wrong.
-    if reprocesses_event_id is not None:
-        try:
-            event = Event.objects.get(pk=reprocesses_event_id)
-        except Event.DoesNotExist:
-            pass
-        else:
-            event.delete()
-
     if data is None:
         metrics.incr('events.failed', tags={'reason': 'cache', 'stage': 'post'})
         return
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 0d42c2dbac..3f43cf68ca 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -202,9 +202,6 @@
     <li>
         <a href="{% absolute_uri '/{}/{}/settings/debug-symbols/' project.organization.slug project.slug %}">{% trans "Debug Symbols" %}</a>
     </li>
-    <li>
-        <a href="{% absolute_uri '/{}/{}/settings/processing-issues/' project.organization.slug project.slug %}">{% trans "Processing Issues" %}</a>
-    </li>
   </ul>
   <h6 class="nav-header">{% trans "Data" %}</h6>
   <ul class="nav nav-stacked">
diff --git a/src/sentry/utils/query.py b/src/sentry/utils/query.py
index 67ffde24a4..da7f56fa00 100644
--- a/src/sentry/utils/query.py
+++ b/src/sentry/utils/query.py
@@ -22,20 +22,6 @@ class InvalidQuerySetError(ValueError):
     pass
 
 
-def batched_queryset_iter(*args, **kwargs):
-    batch_size = kwargs.pop('batch_size', 100)
-    qsw = RangeQuerySetWrapper(*args, **kwargs)
-    batch = []
-    for item in qsw:
-        if len(batch) < batch_size:
-            batch.append(item)
-        else:
-            yield batch
-            batch = []
-    if batch:
-        yield batch
-
-
 class RangeQuerySetWrapper(object):
     """
     Iterates through a queryset by chunking results by ``step`` and using GREATER THAN
diff --git a/tests/sentry/api/serializers/test_group.py b/tests/sentry/api/serializers/test_group.py
index af239f0c97..2dde7901b4 100644
--- a/tests/sentry/api/serializers/test_group.py
+++ b/tests/sentry/api/serializers/test_group.py
@@ -47,16 +47,6 @@ class GroupSerializerTest(TestCase):
         assert result['status'] == 'ignored'
         assert result['statusDetails'] == {'ignoreUntil': snooze.until}
 
-    def test_is_ignored_unprocessed(self):
-        user = self.create_user()
-        group = self.create_group(
-            status=GroupStatus.UNPROCESSED,
-        )
-
-        result = serialize(group, user)
-        assert result['status'] == 'unprocessed'
-        assert result['isTransient'] is True
-
     def test_resolved_in_next_release(self):
         release = Release.objects.create(
             organization_id=self.project.organization_id,
diff --git a/tests/sentry/models/test_group.py b/tests/sentry/models/test_group.py
index 6af342cdb6..a946b0efec 100644
--- a/tests/sentry/models/test_group.py
+++ b/tests/sentry/models/test_group.py
@@ -36,17 +36,6 @@ class GroupTest(TestCase):
 
         assert group.is_resolved()
 
-    def test_is_transient(self):
-        group = self.create_group(status=GroupStatus.UNPROCESSED)
-        assert group.is_transient()
-        assert group.is_ignored()
-        assert group.get_status() == GroupStatus.UNPROCESSED
-
-        group = self.create_group(status=GroupStatus.RESOLVED)
-        assert not group.is_transient()
-        assert not group.is_ignored()
-        assert group.get_status() == GroupStatus.RESOLVED
-
     def test_get_oldest_latest_event_no_events(self):
         group = self.create_group()
         assert group.get_latest_event() is None
