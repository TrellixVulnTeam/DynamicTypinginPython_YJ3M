commit 9193d0721e5db5f8ca8aed9b2ae58b4e78c8dd5f
Author: Chris Fuller <cfuller@sentry.io>
Date:   Fri May 29 12:42:39 2020 -0400

    feat(workflow): Replicating alert rule action create logic into update logic (#18990)

diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index c6dc135220..4a677fc83f 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -932,19 +932,13 @@ def create_alert_rule_trigger_action(
     """
     target_display = None
     if type == AlertRuleTriggerAction.Type.SLACK:
-        from sentry.integrations.slack.utils import get_channel_id
 
         if target_type != AlertRuleTriggerAction.TargetType.SPECIFIC:
             raise InvalidTriggerActionError("Slack action must specify channel")
 
-        prefix, channel_id, _ = get_channel_id(
+        channel_id = get_alert_rule_trigger_action_slack_channel_id(
             trigger.alert_rule.organization, integration.id, target_identifier
         )
-        if channel_id is None:
-            raise InvalidTriggerActionError(
-                "Could not find channel %s. Channel may not exist, or Sentry may not "
-                "have been granted permission to access it" % target_identifier
-            )
 
         # Use the channel name for display
         target_display = target_identifier
@@ -984,14 +978,13 @@ def update_alert_rule_trigger_action(
         type = updated_fields.get("type", trigger_action.type)
 
         if type == AlertRuleTriggerAction.Type.SLACK.value:
-            from sentry.integrations.slack.utils import get_channel_id
-
             integration = updated_fields.get("integration", trigger_action.integration)
-            prefix, channel_id, _ = get_channel_id(
+            channel_id = get_alert_rule_trigger_action_slack_channel_id(
                 trigger_action.alert_rule_trigger.alert_rule.organization,
                 integration.id,
                 target_identifier,
             )
+
             # Use the channel name for display
             updated_fields["target_display"] = target_identifier
             updated_fields["target_identifier"] = channel_id
@@ -1002,6 +995,24 @@ def update_alert_rule_trigger_action(
     return trigger_action
 
 
+def get_alert_rule_trigger_action_slack_channel_id(organization, integration_id, name):
+    from sentry.integrations.slack.utils import get_channel_id
+
+    _prefix, channel_id, timed_out = get_channel_id(organization, integration_id, name,)
+    if timed_out:
+        raise InvalidTriggerActionError(
+            "Could not find channel %s. We have timed out trying to look for it. " % name
+        )
+
+    if channel_id is None:
+        raise InvalidTriggerActionError(
+            "Could not find channel %s. Channel may not exist, or Sentry may not "
+            "have been granted permission to access it" % name
+        )
+
+    return channel_id
+
+
 def delete_alert_rule_trigger_action(trigger_action):
     """
     Deletes a AlertRuleTriggerAction
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 8dd060f084..fc6658e5b7 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -21,6 +21,7 @@ from sentry.incidents.events import (
 from sentry.incidents.logic import (
     AlertRuleNameAlreadyUsedError,
     AlertRuleTriggerLabelAlreadyUsedError,
+    InvalidTriggerActionError,
     get_incident_stats,
     create_alert_rule,
     create_alert_rule_trigger,
@@ -1094,7 +1095,7 @@ class BaseAlertRuleTriggerActionTest(object):
         )
 
 
-class CreateAlertRuleTriggerAction(BaseAlertRuleTriggerActionTest, TestCase):
+class CreateAlertRuleTriggerActionTest(BaseAlertRuleTriggerActionTest, TestCase):
     def test(self):
         type = AlertRuleTriggerAction.Type.EMAIL
         target_type = AlertRuleTriggerAction.TargetType.USER
@@ -1139,6 +1140,25 @@ class CreateAlertRuleTriggerAction(BaseAlertRuleTriggerActionTest, TestCase):
         assert action.target_display == channel_name
         assert action.integration == integration
 
+    def test_slack_not_existing(self):
+        integration = Integration.objects.create(
+            external_id="1",
+            provider="slack",
+            metadata={"access_token": "xoxp-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx"},
+        )
+        integration.add_organization(self.organization, self.user)
+        type = AlertRuleTriggerAction.Type.SLACK
+        target_type = AlertRuleTriggerAction.TargetType.SPECIFIC
+        channel_name = "#some_channel_that_doesnt_exist"
+        with self.assertRaises(InvalidTriggerActionError):
+            create_alert_rule_trigger_action(
+                self.trigger,
+                type,
+                target_type,
+                target_identifier=channel_name,
+                integration=integration,
+            )
+
 
 class UpdateAlertRuleTriggerAction(BaseAlertRuleTriggerActionTest, TestCase):
     @fixture
@@ -1193,6 +1213,25 @@ class UpdateAlertRuleTriggerAction(BaseAlertRuleTriggerActionTest, TestCase):
         assert action.target_display == channel_name
         assert action.integration == integration
 
+    def test_slack_not_existing(self):
+        integration = Integration.objects.create(
+            external_id="1",
+            provider="slack",
+            metadata={"access_token": "xoxp-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx"},
+        )
+        integration.add_organization(self.organization, self.user)
+        type = AlertRuleTriggerAction.Type.SLACK
+        target_type = AlertRuleTriggerAction.TargetType.SPECIFIC
+        channel_name = "#some_channel_that_doesnt_exist"
+        with self.assertRaises(InvalidTriggerActionError):
+            update_alert_rule_trigger_action(
+                self.action,
+                type,
+                target_type,
+                target_identifier=channel_name,
+                integration=integration,
+            )
+
 
 class DeleteAlertRuleTriggerAction(BaseAlertRuleTriggerActionTest, TestCase):
     @fixture
