commit 7fe60ab82f64ec74431999396ded6f7033f60212
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Feb 14 10:34:11 2015 -0800

    Add status filter to bulk group mutate

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index a196669bb4..7606af2009 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -147,9 +147,11 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
               "isBookmarked": true
             }}
 
-        - For non-status updates, only queries by 'id' are accepted.
+        - For non-status updates, the 'id' parameter is required.
         - For status updates, the 'id' parameter may be omitted for a batch
-        "update all" query.
+          "update all" query.
+        - An optional 'status' parameter may be used to restrict mutations to
+          only events with the given status.
 
         Attributes:
 
@@ -185,14 +187,21 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
             return Response(status=400)
 
         if group_ids:
-            filters = Q(id__in=group_ids)
+            filters = [Q(id__in=group_ids)]
         else:
-            filters = Q(project=project)
+            filters = [Q(project=project)]
+
+        if request.GET.get('status'):
+            try:
+                status_filter = STATUS_CHOICES[request.GET['status']]
+            except KeyError:
+                return Response(status=400)
+            filters.append(Q(status=status_filter))
 
         if result.get('status') == 'resolved':
             now = timezone.now()
 
-            happened = Group.objects.filter(filters).exclude(
+            happened = Group.objects.filter(*filters).exclude(
                 status=GroupStatus.RESOLVED,
             ).update(
                 status=GroupStatus.RESOLVED,
@@ -214,14 +223,26 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
         elif result.get('status'):
             new_status = STATUS_CHOICES[result['status']]
 
-            happened = Group.objects.filter(filters).exclude(
+            happened = Group.objects.filter(*filters).exclude(
                 status=new_status,
             ).update(
                 status=new_status,
             )
             if group_list and happened:
+                if new_status == GroupStatus.UNRESOLVED:
+                    activity_type = Activity.SET_UNRESOLVED
+                elif new_status == GroupStatus.MUTED:
+                    activity_type = Activity.SET_MUTED
+
                 for group in group_list:
                     group.status = new_status
+                    activity = Activity.objects.create(
+                        project=group.project,
+                        group=group,
+                        type=activity_type,
+                        user=request.user,
+                    )
+                    activity.send_notification()
 
         if result.get('hasSeen'):
             for group in group_list:
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 5c6e4ee527..a0309f923d 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -29,7 +29,7 @@ class GroupListTest(APITestCase):
 
 
 class GroupUpdateTest(APITestCase):
-    def test_global_status_update(self):
+    def test_global_resolve(self):
         group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
         group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
         group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
@@ -40,7 +40,7 @@ class GroupUpdateTest(APITestCase):
         self.login_as(user=self.user)
         url = reverse('sentry-api-0-project-group-index', kwargs={
             'project_id': self.project.id})
-        response = self.client.put(url, data={
+        response = self.client.put(url + '?status=unresolved', data={
             'status': 'resolved',
         }, format='json')
         assert response.status_code == 200
@@ -48,6 +48,7 @@ class GroupUpdateTest(APITestCase):
             'status': 'resolved',
         }
 
+        # the previously resolved entry should not be included
         new_group1 = Group.objects.get(id=group1.id)
         assert new_group1.status == GroupStatus.RESOLVED
         assert new_group1.resolved_at is None
@@ -56,9 +57,10 @@ class GroupUpdateTest(APITestCase):
         assert new_group2.status == GroupStatus.RESOLVED
         assert new_group2.resolved_at is not None
 
+        # the muted entry should not be included
         new_group3 = Group.objects.get(id=group3.id)
-        assert new_group3.status == GroupStatus.RESOLVED
-        assert new_group3.resolved_at is not None
+        assert new_group3.status == GroupStatus.MUTED
+        assert new_group3.resolved_at is None
 
         new_group4 = Group.objects.get(id=group4.id)
         assert new_group4.status == GroupStatus.UNRESOLVED
