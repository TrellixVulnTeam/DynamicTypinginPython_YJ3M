commit c1438c4c7a8e2f1bb4bdcb83e1540cef29547998
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Apr 16 10:56:50 2015 -0700

    Initial work on member team edit endpoint

diff --git a/src/sentry/api/endpoints/organization_member_team_details.py b/src/sentry/api/endpoints/organization_member_team_details.py
new file mode 100644
index 0000000000..a51485bad7
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_member_team_details.py
@@ -0,0 +1,83 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers
+from rest_framework.response import Response
+
+from sentry.api.bases.organization import (
+    OrganizationEndpoint, OrganizationPermission
+)
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import OrganizationMember, OrganizationMemberTeam, Team
+
+ERR_INSUFFICIENT_ROLE = 'You cannot remove a member who has more access than you.'
+
+ERR_ONLY_OWNER = 'You cannot remove the only remaining owner of the organization.'
+
+ERR_UNINVITABLE = 'You cannot send an invitation to a user who is already a full member.'
+
+
+class OrganizationMemberTeamSerializer(serializers.Serializer):
+    isActive = serializers.BooleanField()
+
+
+class RelaxedOrganizationPermission(OrganizationPermission):
+    scope_map = {
+        'GET': ['org:read', 'org:write', 'org:delete'],
+        'POST': ['org:write', 'org:delete'],
+        'PUT': ['org:write', 'org:delete'],
+
+        # DELETE checks for role comparison as you can either remove a member
+        # with a lower access role, or yourself, without having the req. scope
+        'DELETE': ['org:read', 'org:write', 'org:delete'],
+    }
+
+
+class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
+    permission_classes = [RelaxedOrganizationPermission]
+
+    def put(self, request, organization, member_id, team_slug):
+        try:
+            om = OrganizationMember.objects.filter(
+                organization=organization,
+                id=member_id,
+            ).select_related('user').get()
+        except OrganizationMember.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        try:
+            team = Team.objects.get(
+                organization=organization,
+                slug=team_slug,
+            )
+        except Team.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        if not om.has_global_access:
+            try:
+                omt = OrganizationMemberTeam.objects.get(
+                    team=team,
+                    organizationmember=om,
+                )
+            except OrganizationMemberTeam.DoesNotExist:
+                raise ResourceDoesNotExist
+        else:
+            try:
+                omt = OrganizationMemberTeam.objects.get(
+                    team=team,
+                    organizationmember=om,
+                )
+            except OrganizationMemberTeam.DoesNotExist:
+                omt = OrganizationMemberTeam(
+                    team=team,
+                    organizationmember=om,
+                )
+
+        serializer = OrganizationMemberTeamSerializer(data=request.DATA, partial=True)
+        if not serializer.is_valid():
+            return Response(status=400)
+
+        result = serializer.object
+        if result.get('isActive') is not None:
+            omt.is_active = result['isActive']
+            omt.save()
+        return Response(status=204)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 696673e75c..5ebc32dc4e 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -21,6 +21,7 @@ from .endpoints.legacy_project_redirect import LegacyProjectRedirectEndpoint
 from .endpoints.organization_details import OrganizationDetailsEndpoint
 from .endpoints.organization_member_details import OrganizationMemberDetailsEndpoint
 from .endpoints.organization_member_index import OrganizationMemberIndexEndpoint
+from .endpoints.organization_member_team_details import OrganizationMemberTeamDetailsEndpoint
 from .endpoints.organization_index import OrganizationIndexEndpoint
 from .endpoints.organization_projects import OrganizationProjectsEndpoint
 from .endpoints.organization_stats import OrganizationStatsEndpoint
@@ -74,6 +75,9 @@ urlpatterns = patterns(
     url(r'^organizations/(?P<organization_slug>[^\/]+)/members/(?P<member_id>\d+)/$',
         OrganizationMemberDetailsEndpoint.as_view(),
         name='sentry-api-0-organization-member-details'),
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/members/(?P<member_id>\d+)/teams/(?P<team_slug>[^\/]+)/$',
+        OrganizationMemberTeamDetailsEndpoint.as_view(),
+        name='sentry-api-0-organization-member-team-details'),
     url(r'^organizations/(?P<organization_slug>[^\/]+)/projects/$',
         OrganizationProjectsEndpoint.as_view(),
         name='sentry-api-0-organization-projects'),
diff --git a/tests/sentry/api/endpoints/test_organization_member_team_details.py b/tests/sentry/api/endpoints/test_organization_member_team_details.py
new file mode 100644
index 0000000000..e739959a5d
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_member_team_details.py
@@ -0,0 +1,36 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import OrganizationMemberTeam, OrganizationMemberType
+from sentry.testutils import APITestCase
+
+
+class UpdateOrganizationMemberTeamTest(APITestCase):
+    def test_can_change_status_as_global_member(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        member_om = self.create_member(
+            organization=organization,
+            email='foo@example.com',
+            type=OrganizationMemberType.MEMBER,
+            has_global_access=True,
+        )
+        team = self.create_team(name='foo', organization=organization)
+
+        path = reverse('sentry-api-0-organization-member-team-details', args=[
+            organization.slug, member_om.id, team.slug,
+        ])
+
+        self.login_as(self.user)
+
+        resp = self.client.put(path, data={'isActive': '1'})
+
+        assert resp.status_code == 200
+
+        omt = OrganizationMemberTeam.objects.get(
+            team=team,
+            organizationmember=member_om,
+        )
+        assert omt.is_active
