commit 51e9c35e9ca9f407a24760b1108f3e18f040e5db
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Fri Feb 17 14:22:31 2017 -0800

    Add tests for filechange endpoint and serializer

diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 8e41437837..0e3d0f18a5 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -297,7 +297,7 @@ urlpatterns = patterns(
         name='sentry-api-0-release-commits'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/releases/(?P<version>[^/]+)/commitfiles/$',
         CommitFileChangeEndpoint.as_view(),
-        name='sentry-api-0-release-commits'),
+        name='sentry-api-0-release-commitfilechange'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/releases/(?P<version>[^/]+)/files/$',
         ReleaseFilesEndpoint.as_view(),
         name='sentry-api-0-release-files'),
diff --git a/tests/sentry/api/endpoints/test_commit_filechange.py b/tests/sentry/api/endpoints/test_commit_filechange.py
new file mode 100644
index 0000000000..e8955b00c4
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_commit_filechange.py
@@ -0,0 +1,70 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import Commit, CommitFileChange, Release, ReleaseCommit, Repository
+from sentry.testutils import APITestCase
+
+
+class CommitFileChangeTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project(
+            name='foo',
+        )
+        release = Release.objects.create(
+            organization_id=project.organization_id,
+            version='1',
+        )
+        release.add_project(project)
+        repo = Repository.objects.create(
+            organization_id=project.organization_id,
+            name=project.name,
+        )
+        commit = Commit.objects.create(
+            organization_id=project.organization_id,
+            repository_id=repo.id,
+            key='a' * 40,
+        )
+        commit2 = Commit.objects.create(
+            organization_id=project.organization_id,
+            repository_id=repo.id,
+            key='b' * 40,
+        )
+        ReleaseCommit.objects.create(
+            organization_id=project.organization_id,
+            release=release,
+            commit=commit,
+            order=1,
+        )
+        ReleaseCommit.objects.create(
+            organization_id=project.organization_id,
+            release=release,
+            commit=commit2,
+            order=0,
+        )
+        CommitFileChange.objects.create(
+            organization_id=project.organization_id,
+            commit=commit,
+            filename='.gitignore',
+            type='M'
+        )
+        CommitFileChange.objects.create(
+            organization_id=project.organization_id,
+            commit=commit2,
+            filename='/static/js/widget.js',
+            type='A'
+        )
+        url = reverse('sentry-api-0-release-commitfilechange', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'version': release.version,
+        })
+
+        self.login_as(user=self.user)
+
+        response = self.client.get(url)
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        assert response.data[0]['filename'] == '.gitignore'
+        assert response.data[1]['filename'] == '/static/js/widget.js'
diff --git a/tests/sentry/api/serializers/test_commit_filechange.py b/tests/sentry/api/serializers/test_commit_filechange.py
new file mode 100644
index 0000000000..ac6a737eda
--- /dev/null
+++ b/tests/sentry/api/serializers/test_commit_filechange.py
@@ -0,0 +1,91 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from uuid import uuid4
+
+from sentry.api.serializers import serialize
+from sentry.models import (Commit, CommitAuthor, CommitFileChange,
+    Release, ReleaseCommit, Repository)
+from sentry.testutils import TestCase
+
+
+class CommitFileChangeSerializerTest(TestCase):
+    def test_simple(self):
+        user = self.create_user()
+        project = self.create_project()
+        release = Release.objects.create(
+            organization_id=project.organization_id,
+            version=uuid4().hex,
+        )
+        release.add_project(project)
+        repository = Repository.objects.create(
+            organization_id=project.organization_id,
+            name='test/test',
+        )
+        commit_author = CommitAuthor.objects.create(
+            name='stebe',
+            email='stebe@sentry.io',
+            organization_id=project.organization_id,
+        )
+        commit = Commit.objects.create(
+            organization_id=project.organization_id,
+            repository_id=repository.id,
+            key='abc',
+            author=commit_author,
+            message='waddap',
+        )
+        ReleaseCommit.objects.create(
+            organization_id=project.organization_id,
+            project_id=project.id,
+            release=release,
+            commit=commit,
+            order=1,
+        )
+        cfc = CommitFileChange.objects.create(
+            organization_id=project.organization_id,
+            commit=commit,
+            filename='.gitignore',
+            type='M'
+        )
+        result = serialize(cfc, user)
+
+        assert result['filename'] == '.gitignore'
+        assert result['commit_message'] == 'waddap'
+        assert result['author'] == {'name': 'stebe', 'email': 'stebe@sentry.io'}
+
+    def test_no_author(self):
+        user = self.create_user()
+        project = self.create_project()
+        release = Release.objects.create(
+            organization_id=project.organization_id,
+            version=uuid4().hex,
+        )
+        release.add_project(project)
+        repository = Repository.objects.create(
+            organization_id=project.organization_id,
+            name='test/test',
+        )
+        commit = Commit.objects.create(
+            organization_id=project.organization_id,
+            repository_id=repository.id,
+            key='abc',
+            message='waddap',
+        )
+        ReleaseCommit.objects.create(
+            organization_id=project.organization_id,
+            project_id=project.id,
+            release=release,
+            commit=commit,
+            order=1,
+        )
+        cfc = CommitFileChange.objects.create(
+            organization_id=project.organization_id,
+            commit=commit,
+            filename='.gitignore',
+            type='M'
+        )
+
+        result = serialize(cfc, user)
+
+        assert result['author'] == {}
