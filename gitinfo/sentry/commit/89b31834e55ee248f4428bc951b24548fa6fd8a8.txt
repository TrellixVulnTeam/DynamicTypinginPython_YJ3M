commit 89b31834e55ee248f4428bc951b24548fa6fd8a8
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Oct 10 13:28:28 2014 -0700

    Add pagination to project group list

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 0e6f394a52..f074224b64 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -11,6 +11,7 @@ from rest_framework.response import Response
 from rest_framework.views import APIView
 
 from sentry.tsdb.base import ROLLUPS
+from sentry.utils.cursors import Cursor
 
 from .authentication import KeyAuthentication
 from .paginator import Paginator
@@ -37,9 +38,29 @@ class Endpoint(APIView):
     renderer_classes = (JSONRenderer,)
     parser_classes = (JSONParser,)
 
+    def build_cursor_link(self, request, name, cursor):
+        querystring = u'&'.join(
+            u'{0}={1}'.format(urlquote(k), urlquote(v))
+            for k, v in request.GET.iteritems()
+            if k != 'cursor'
+        )
+        base_url = request.build_absolute_uri(request.path)
+        if querystring:
+            base_url = '{0}?{1}'.format(base_url, querystring)
+        else:
+            base_url = base_url + '?'
+
+        return LINK_HEADER.format(
+            uri=base_url,
+            cursor=str(cursor),
+            name=name,
+        )
+
     def paginate(self, request, on_results=lambda x: x, **kwargs):
-        input_cursor = request.GET.get('cursor')
         per_page = int(request.GET.get('per_page', 100))
+        input_cursor = request.GET.get('cursor')
+        if input_cursor:
+            input_cursor = Cursor.from_string(input_cursor)
 
         assert per_page <= 100
 
@@ -52,33 +73,11 @@ class Endpoint(APIView):
         # map results based on callback
         results = on_results(cursor_result.results)
 
-        links = [
-            ('previous', str(cursor_result.prev)),
-            ('next', str(cursor_result.next)),
-        ]
-
-        querystring = u'&'.join(
-            u'{0}={1}'.format(urlquote(k), urlquote(v))
-            for k, v in request.GET.iteritems()
-            if k != 'cursor'
-        )
-        base_url = request.build_absolute_uri(request.path)
-        if querystring:
-            base_url = '{0}?{1}'.format(base_url, querystring)
-        else:
-            base_url = base_url + '?'
-
-        link_values = []
-        for name, cursor in links:
-            link_values.append(LINK_HEADER.format(
-                uri=base_url,
-                cursor=cursor,
-                name=name,
-            ))
-
         headers = {}
-        if link_values:
-            headers['Link'] = ', '.join(link_values)
+        headers['Link'] = ', '.join([
+            self.build_cursor_link(request, 'previous', cursor_result.prev),
+            self.build_cursor_link(request, 'next', cursor_result.next),
+        ])
 
         return Response(results, headers=headers)
 
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 9b9d2a2a70..edcb6654c5 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -63,7 +63,10 @@ class ProjectGroupIndexEndpoint(Endpoint):
         }
 
         if request.GET.get('status'):
-            query_kwargs['status'] = int(request.GET['status'])
+            try:
+                query_kwargs['status'] = STATUS_CHOICES[request.GET['status']]
+            except KeyError:
+                return Response('{"error": "invalid status"}', status=400)
 
         if request.user.is_authenticated() and request.GET.get('bookmarks'):
             query_kwargs['bookmarked_by'] = request.user
@@ -114,11 +117,19 @@ class ProjectGroupIndexEndpoint(Endpoint):
         if query is not None:
             query_kwargs.update(parse_query(query, request.user))
 
-        results = list(search.query(**query_kwargs))
+        cursor_result = search.query(**query_kwargs)
 
-        GroupMeta.objects.populate_cache(results)
+        context = list(cursor_result)
 
-        return Response(serialize(results, request.user))
+        GroupMeta.objects.populate_cache(context)
+
+        response = Response(serialize(context, request.user))
+        response['Link'] = ', '.join([
+            self.build_cursor_link(request, 'previous', cursor_result.prev),
+            self.build_cursor_link(request, 'next', cursor_result.next),
+        ])
+
+        return response
 
     def put(self, request, project_id):
         """
