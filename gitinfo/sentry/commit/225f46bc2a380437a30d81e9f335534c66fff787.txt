commit 225f46bc2a380437a30d81e9f335534c66fff787
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed Apr 1 13:58:46 2020 -0700

    chore(ts): Convert preferencesStore (#18030)

diff --git a/src/sentry/static/sentry/app/stores/preferencesStore.jsx b/src/sentry/static/sentry/app/stores/preferencesStore.jsx
deleted file mode 100644
index 49da5d5e62..0000000000
--- a/src/sentry/static/sentry/app/stores/preferencesStore.jsx
+++ /dev/null
@@ -1,44 +0,0 @@
-import Reflux from 'reflux';
-
-import PreferencesActions from '../actions/preferencesActions';
-
-/**
- * This store is used to hold local user preferences
- * Side-effects (like reading/writing to cookies) are done in associated actionCreators
- */
-const PreferencesStore = Reflux.createStore({
-  init() {
-    this.reset();
-
-    this.listenTo(PreferencesActions.hideSidebar, this.onHideSidebar);
-    this.listenTo(PreferencesActions.showSidebar, this.onShowSidebar);
-    this.listenTo(PreferencesActions.loadInitialState, this.loadInitialState);
-  },
-
-  getInitialState() {
-    return this._state;
-  },
-
-  reset() {
-    this._state = {
-      collapsed: false,
-    };
-  },
-
-  loadInitialState(state) {
-    this._state = {...state};
-    this.trigger(this._state);
-  },
-
-  onHideSidebar() {
-    this._state.collapsed = true;
-    this.trigger(this._state);
-  },
-
-  onShowSidebar() {
-    this._state.collapsed = false;
-    this.trigger(this._state);
-  },
-});
-
-export default PreferencesStore;
diff --git a/src/sentry/static/sentry/app/stores/preferencesStore.tsx b/src/sentry/static/sentry/app/stores/preferencesStore.tsx
new file mode 100644
index 0000000000..ad8e57d6a7
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/preferencesStore.tsx
@@ -0,0 +1,63 @@
+import Reflux from 'reflux';
+
+import PreferencesActions from '../actions/preferencesActions';
+
+type Preferences = {
+  /**
+   * Is the sidebar collapsed to the side
+   */
+  collapsed: boolean;
+};
+
+type PreferenceStoreInterface = {
+  prefs: Preferences;
+
+  getInitialState(): Preferences;
+  reset(): void;
+  loadInitialState(prefs: Preferences): void;
+};
+
+const preferenceStoreConfig: Reflux.StoreDefinition & PreferenceStoreInterface = {
+  prefs: {} as Preferences,
+
+  init() {
+    this.reset();
+
+    this.listenTo(PreferencesActions.hideSidebar, this.onHideSidebar);
+    this.listenTo(PreferencesActions.showSidebar, this.onShowSidebar);
+    this.listenTo(PreferencesActions.loadInitialState, this.loadInitialState);
+  },
+
+  getInitialState() {
+    return this.prefs;
+  },
+
+  reset() {
+    this.prefs = {
+      collapsed: false,
+    };
+  },
+
+  loadInitialState(prefs: Preferences) {
+    this.prefs = {...prefs};
+    this.trigger(this.prefs);
+  },
+
+  onHideSidebar() {
+    this.prefs.collapsed = true;
+    this.trigger(this.prefs);
+  },
+
+  onShowSidebar() {
+    this.prefs.collapsed = false;
+    this.trigger(this.prefs);
+  },
+};
+
+type PreferenceStore = Reflux.Store & PreferenceStoreInterface;
+
+/**
+ * This store is used to hold local user preferences
+ * Side-effects (like reading/writing to cookies) are done in associated actionCreators
+ */
+export default Reflux.createStore(preferenceStoreConfig) as PreferenceStore;
