commit 29c11dd78b08b698cc7e74d7ce2f0736b186041f
Author: Chris Fuller <cfuller@sentry.io>
Date:   Fri Feb 21 00:15:28 2020 -0500

    feat(workflow): Change the start time of incident graph to be about 20% earlier than the incident's length.  (#17163)

diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index 62578a99b6..fd293699f8 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -291,6 +291,8 @@ def bulk_build_incident_query_params(incidents, start=None, end=None):
             "start": incident.date_started if start is None else start,
             "end": incident.current_end_date if end is None else end,
         }
+        # Make start about 20% earlier:
+        params["start"] = params["start"] - (params["end"] - params["start"]) / 5
         group_ids = incident_groups[incident.id]
         if group_ids:
             params["group_ids"] = group_ids
diff --git a/tests/sentry/api/serializers/test_incident.py b/tests/sentry/api/serializers/test_incident.py
index b14caae014..3141b01f4e 100644
--- a/tests/sentry/api/serializers/test_incident.py
+++ b/tests/sentry/api/serializers/test_incident.py
@@ -35,8 +35,8 @@ class IncidentSerializerTest(TestCase):
         assert result["dateDetected"] == incident.date_detected
         assert result["dateCreated"] == incident.date_added
         assert result["dateClosed"] == incident.date_closed
-        assert len(result["eventStats"]["data"]) == 52
-        assert [data[1] for data in result["eventStats"]["data"]] == [[]] * 52
+        assert len(result["eventStats"]["data"]) == 62
+        assert [data[1] for data in result["eventStats"]["data"]] == [[]] * 62
         assert result["totalEvents"] == 0
         assert result["uniqueUsers"] == 0
 
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 2e63c97d71..3051225bdf 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 import json
 from uuid import uuid4
-
 import responses
 from datetime import timedelta
 from exam import fixture, patcher
@@ -261,8 +260,11 @@ class GetIncidentEventStatsTest(TestCase, BaseIncidentEventStatsTest):
         result = get_incident_event_stats(incident, data_points=20, **kwargs)
         # Duration of 300s / 20 data points
         assert result.rollup == 15
-        assert result.start == start if start else incident.date_started
-        assert result.end == end if end else incident.current_end_date
+        expected_start = start if start else incident.date_started
+        expected_end = end if end else incident.current_end_date
+        expected_start = expected_start - (expected_end - expected_start) / 5
+        assert result.start == expected_start
+        assert result.end == expected_end
         assert [r["count"] for r in result.data["data"]] == expected_results
 
     def test_project(self):
@@ -281,8 +283,11 @@ class BulkGetIncidentEventStatsTest(TestCase, BaseIncidentEventStatsTest):
         for incident, result, expected_results in zip(incidents, results, expected_results_list):
             # Duration of 300s / 20 data points
             assert result.rollup == 15
-            assert result.start == start if start else incident.date_started
-            assert result.end == end if end else incident.current_end_date
+            expected_start = start if start else incident.date_started
+            expected_end = end if end else incident.current_end_date
+            expected_start = expected_start - (expected_end - expected_start) / 5
+            assert result.start == expected_start
+            assert result.end == expected_end
             assert [r["count"] for r in result.data["data"]] == expected_results
 
     def test_project(self):
@@ -545,12 +550,17 @@ class BulkGetIncidentStatusTest(TestCase, BaseIncidentsTest):
             date_started=timezone.now() - timedelta(days=30),
         )
         incidents = [closed_incident, open_incident]
-
+        changed = False
         for incident, incident_stats in zip(incidents, bulk_get_incident_stats(incidents)):
             event_stats = get_incident_event_stats(incident)
             assert incident_stats["event_stats"].data["data"] == event_stats.data["data"]
-            assert incident_stats["event_stats"].start == event_stats.start
-            assert incident_stats["event_stats"].end == event_stats.end
+            expected_start = incident_stats["event_stats"].start
+            expected_end = incident_stats["event_stats"].end
+            if not changed:
+                expected_start = expected_start - (expected_end - expected_start) / 5
+                changed = True
+            assert event_stats.start == expected_start
+            assert event_stats.end == expected_end
             assert incident_stats["event_stats"].rollup == event_stats.rollup
 
             aggregates = get_incident_aggregates(incident)
