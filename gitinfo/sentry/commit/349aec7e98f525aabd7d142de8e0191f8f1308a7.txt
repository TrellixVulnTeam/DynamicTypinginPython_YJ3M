commit 349aec7e98f525aabd7d142de8e0191f8f1308a7
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Tue Feb 18 14:22:28 2020 +0100

    ref(ui): Added tooltip - Datascrubbers v2 - Part 7 (#17007)

diff --git a/src/sentry/static/sentry/app/components/events/contexts.jsx b/src/sentry/static/sentry/app/components/events/contexts.jsx
index e2f2d8cfc1..7790c70256 100644
--- a/src/sentry/static/sentry/app/components/events/contexts.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts.jsx
@@ -13,7 +13,7 @@ const CONTEXT_TYPES = {
   os: require('app/components/events/contexts/operatingSystem/operatingSystem').default,
   runtime: require('app/components/events/contexts/runtime/runtime').default,
   user: require('app/components/events/contexts/user').default,
-  gpu: require('app/components/events/contexts/gpu').default,
+  gpu: require('app/components/events/contexts/gpu/gpu').default,
 };
 
 function getContextComponent(type) {
diff --git a/src/sentry/static/sentry/app/components/events/contexts/app/getAppKnownData.tsx b/src/sentry/static/sentry/app/components/events/contexts/app/getAppKnownData.tsx
index c5c7bda9dc..f3dadaff21 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/app/getAppKnownData.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/app/getAppKnownData.tsx
@@ -11,10 +11,6 @@ function getAppKnownData(data: AppData): Array<KeyValueListData> {
   for (const key of dataKeys) {
     const knownDataDetails = getAppKnownDataDetails(data, key as AppKnownDataType);
 
-    if (!knownDataDetails) {
-      continue;
-    }
-
     knownData.push({
       key,
       ...knownDataDetails,
diff --git a/src/sentry/static/sentry/app/components/events/contexts/app/getAppKnownDataDetails.tsx b/src/sentry/static/sentry/app/components/events/contexts/app/getAppKnownDataDetails.tsx
index ceedd50654..41014d8945 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/app/getAppKnownDataDetails.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/app/getAppKnownDataDetails.tsx
@@ -4,56 +4,56 @@ import {AppData, AppKnownDataType} from './types';
 
 type Output = {
   subject: string;
-  value: string | null;
+  value?: React.ReactNode;
 };
 
-function getAppKnownDataDetails(
-  data: AppData,
-  type: AppKnownDataType
-): Output | undefined {
+function getAppKnownDataDetails(data: AppData, type: AppKnownDataType): Output {
   switch (type) {
     case AppKnownDataType.ID:
       return {
         subject: t('ID'),
-        value: data.app_id || null,
+        value: data.app_id,
       };
     case AppKnownDataType.START_TIME:
       return {
         subject: t('Start Time'),
-        value: data.app_start_time || null,
+        value: data.app_start_time,
       };
     case AppKnownDataType.DEVICE_HASH:
       return {
         subject: t('Device'),
-        value: data.device_app_hash || null,
+        value: data.device_app_hash,
       };
     case AppKnownDataType.TYPE:
       return {
         subject: t('Build Type'),
-        value: data.build_type || null,
+        value: data.build_type,
       };
     case AppKnownDataType.IDENTIFIER:
       return {
         subject: t('Build ID'),
-        value: data.app_identifier || null,
+        value: data.app_identifier,
       };
     case AppKnownDataType.NAME:
       return {
         subject: t('Build Name'),
-        value: data.app_name || null,
+        value: data.app_name,
       };
     case AppKnownDataType.VERSION:
       return {
         subject: t('Version'),
-        value: data.app_version || null,
+        value: data.app_version,
       };
     case AppKnownDataType.BUILD:
       return {
         subject: t('App Build'),
-        value: data.app_build || null,
+        value: data.app_build,
       };
     default:
-      return undefined;
+      return {
+        subject: type,
+        value: data[type],
+      };
   }
 }
 
diff --git a/src/sentry/static/sentry/app/components/events/contexts/contextBlockV2.tsx b/src/sentry/static/sentry/app/components/events/contexts/contextBlockV2.tsx
index dc56ee8574..fabfff43c8 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/contextBlockV2.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/contextBlockV2.tsx
@@ -6,16 +6,17 @@ import {KeyValueListData} from 'app/components/events/interfaces/keyValueList/ty
 
 type Props = {
   knownData: Array<KeyValueListData>;
+  raw?: boolean;
 };
 
-const ContextBlock = ({knownData}: Props) => {
+const ContextBlock = ({knownData, raw = false}: Props) => {
   if (knownData.length === 0) {
     return null;
   }
 
   return (
     <ErrorBoundary mini>
-      <KeyValueList data={knownData} isContextData />
+      <KeyValueList data={knownData} raw={raw} isContextData />
     </ErrorBoundary>
   );
 };
diff --git a/src/sentry/static/sentry/app/components/events/contexts/device/getDeviceKnownData.tsx b/src/sentry/static/sentry/app/components/events/contexts/device/getDeviceKnownData.tsx
index 2a3ec8737c..d6b15489ba 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/device/getDeviceKnownData.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/device/getDeviceKnownData.tsx
@@ -11,10 +11,6 @@ function getOperatingSystemKnownData(data: DeviceData): Array<KeyValueListData>
   for (const key of dataKeys) {
     const knownDataDetails = getDeviceKnownDataDetails(data, key as DeviceKnownDataType);
 
-    if (!knownDataDetails) {
-      continue;
-    }
-
     knownData.push({
       key,
       ...knownDataDetails,
diff --git a/src/sentry/static/sentry/app/components/events/contexts/device/getDeviceKnownDataDetails.tsx b/src/sentry/static/sentry/app/components/events/contexts/device/getDeviceKnownDataDetails.tsx
index 32a0e01432..70b2232970 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/device/getDeviceKnownDataDetails.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/device/getDeviceKnownDataDetails.tsx
@@ -10,13 +10,10 @@ import {DeviceKnownDataType, DeviceData} from './types';
 
 type Output = {
   subject: string;
-  value: null | React.ReactNode;
+  value?: React.ReactNode;
 };
 
-function getDeviceKnownDataDetails(
-  data: DeviceData,
-  type: DeviceKnownDataType
-): Output | undefined {
+function getDeviceKnownDataDetails(data: DeviceData, type: DeviceKnownDataType): Output {
   switch (type) {
     case DeviceKnownDataType.NAME:
       return {
@@ -36,7 +33,9 @@ function getDeviceKnownDataDetails(
             <DeviceName>
               {`${data.model} ${data.model_id ? `(${data.model_id})` : ''}`}
             </DeviceName>
-          ) : null,
+          ) : (
+            undefined
+          ),
       };
     case DeviceKnownDataType.CPU_DESCRIPTION:
       return {
@@ -51,7 +50,7 @@ function getDeviceKnownDataDetails(
     case DeviceKnownDataType.BATTERY_LEVEL:
       return {
         subject: t('Battery Level'),
-        value: defined(data.battery_level) ? `${data.battery_level}%` : null,
+        value: defined(data.battery_level) ? `${data.battery_level}%` : undefined,
       };
     case DeviceKnownDataType.BATTERY_STATUS:
       return {
@@ -70,7 +69,7 @@ function getDeviceKnownDataDetails(
         value:
           memory_size && free_memory && usable_memory
             ? formatMemory(memory_size, free_memory, usable_memory)
-            : null,
+            : undefined,
       };
     case DeviceKnownDataType.STORAGE:
       const {
@@ -89,7 +88,7 @@ function getDeviceKnownDataDetails(
                 external_storage_size,
                 external_free_storage
               )
-            : null,
+            : undefined,
       };
     case DeviceKnownDataType.SIMULATOR:
       return {
@@ -182,7 +181,10 @@ function getDeviceKnownDataDetails(
         value: data.screen_width_pixels,
       };
     default:
-      return undefined;
+      return {
+        subject: type,
+        value: data[type],
+      };
   }
 }
 
diff --git a/src/sentry/static/sentry/app/components/events/contexts/gpu.jsx b/src/sentry/static/sentry/app/components/events/contexts/gpu.jsx
deleted file mode 100644
index 41fe730590..0000000000
--- a/src/sentry/static/sentry/app/components/events/contexts/gpu.jsx
+++ /dev/null
@@ -1,63 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import ContextBlock from 'app/components/events/contexts/contextBlock';
-import {formatBytes} from 'app/utils';
-
-const megaByteInBytes = 1048576;
-
-class GpuContextType extends React.Component {
-  static propTypes = {
-    alias: PropTypes.string.isRequired,
-    data: PropTypes.object.isRequired,
-  };
-
-  formatMemory = memory_size => {
-    if (!Number.isInteger(memory_size) || memory_size <= 0) {
-      return null;
-    }
-
-    // 'usable_memory' is in defined in MB
-    return formatBytes(memory_size * megaByteInBytes);
-  };
-
-  render() {
-    const {
-      id,
-      name,
-      version,
-      vendor_name,
-      vendor_id,
-      memory_size,
-      npot_support,
-      multi_threaded_rendering,
-      api_type,
-      ...data
-    } = this.props.data;
-
-    const memory = this.formatMemory(memory_size);
-    const knownData = [
-      ['?Name', name],
-      ['?Version', version],
-      ['?Vendor', vendor_name],
-      ['?Memory', memory],
-      ['?NPOT Support', npot_support],
-      ['?Multi-Thread rendering', multi_threaded_rendering],
-      ['?API Type', api_type],
-    ];
-
-    if (vendor_id > 0) {
-      knownData.unshift(['?Vendor Id', vendor_id]);
-    }
-
-    if (id > 0) {
-      knownData.unshift(['?GPU Id', id]);
-    }
-
-    return <ContextBlock data={data} knownData={knownData} alias={this.props.alias} />;
-  }
-}
-
-GpuContextType.getTitle = () => 'GPU';
-
-export default GpuContextType;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/gpu/formatMemory.tsx b/src/sentry/static/sentry/app/components/events/contexts/gpu/formatMemory.tsx
new file mode 100644
index 0000000000..f15a24dfac
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/gpu/formatMemory.tsx
@@ -0,0 +1,14 @@
+import {formatBytes} from 'app/utils';
+
+const MEGABYTE_IN_BYTES = 1048576;
+
+function formatMemory(memory_size: number) {
+  if (!Number.isInteger(memory_size) || memory_size <= 0) {
+    return null;
+  }
+
+  // 'usable_memory' is in defined in MB
+  return formatBytes(memory_size * MEGABYTE_IN_BYTES);
+}
+
+export default formatMemory;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/gpu/getGPUKnownData.tsx b/src/sentry/static/sentry/app/components/events/contexts/gpu/getGPUKnownData.tsx
new file mode 100644
index 0000000000..2f31a7d5d0
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/gpu/getGPUKnownData.tsx
@@ -0,0 +1,29 @@
+import {KeyValueListData} from 'app/components/events/interfaces/keyValueList/types';
+import {getMeta} from 'app/components/events/meta/metaProxy';
+
+import getGpuKnownDataDetails from './getGPUKnownDataDetails';
+import {GPUData, GPUKnownDataType} from './types';
+
+function getGPUKnownData(
+  data: GPUData,
+  dataToBeFiltered: Array<GPUKnownDataType>
+): Array<KeyValueListData> {
+  const knownData: Array<KeyValueListData> = [];
+
+  const filteredDataKeys = Object.keys(data).filter(key =>
+    dataToBeFiltered.includes(key as GPUKnownDataType)
+  );
+
+  for (const key of filteredDataKeys) {
+    const knownDataDetails = getGpuKnownDataDetails(data, key as GPUKnownDataType);
+
+    knownData.push({
+      key,
+      ...knownDataDetails,
+      meta: getMeta(data, key),
+    });
+  }
+  return knownData;
+}
+
+export default getGPUKnownData;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/gpu/getGPUKnownDataDetails.tsx b/src/sentry/static/sentry/app/components/events/contexts/gpu/getGPUKnownDataDetails.tsx
new file mode 100644
index 0000000000..d6c2370bba
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/gpu/getGPUKnownDataDetails.tsx
@@ -0,0 +1,61 @@
+import {t} from 'app/locale';
+
+import formatMemory from './formatMemory';
+import {GPUData, GPUKnownDataType} from './types';
+
+type Output = {
+  subject: string;
+  value?: React.ReactNode;
+};
+
+function getGPUKnownDataDetails(data: GPUData, type: GPUKnownDataType): Output {
+  switch (type) {
+    case GPUKnownDataType.NAME:
+      return {
+        subject: t('Name'),
+        value: data.name,
+      };
+    case GPUKnownDataType.VERSION:
+      return {
+        subject: t('Version'),
+        value: data.version,
+      };
+    case GPUKnownDataType.MEMORY:
+      return {
+        subject: t('Memory'),
+        value: data.memory_size ? formatMemory(data.memory_size) : undefined,
+      };
+    case GPUKnownDataType.NPOT_SUPPORT:
+      return {
+        subject: t('NPOT Support'),
+        value: data.npot_support,
+      };
+    case GPUKnownDataType.MULTI_THREAD_RENDERING:
+      return {
+        subject: t('Multi-Thread rendering'),
+        value: data.multi_threaded_rendering,
+      };
+    case GPUKnownDataType.API_TYPE:
+      return {
+        subject: t('API Type'),
+        value: data.api_type,
+      };
+    case GPUKnownDataType.VENDOR_ID:
+      return {
+        subject: t('Vendor ID'),
+        value: data.vendor_id,
+      };
+    case GPUKnownDataType.ID:
+      return {
+        subject: t('GPU ID'),
+        value: data.id,
+      };
+    default:
+      return {
+        subject: type,
+        value: data[type],
+      };
+  }
+}
+
+export default getGPUKnownDataDetails;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/gpu/gpu.tsx b/src/sentry/static/sentry/app/components/events/contexts/gpu/gpu.tsx
new file mode 100644
index 0000000000..9cffef2861
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/gpu/gpu.tsx
@@ -0,0 +1,39 @@
+import React from 'react';
+
+import ContextBlock from 'app/components/events/contexts/contextBlockV2';
+
+import getOperatingSystemKnownData from './getGPUKnownData';
+import {GPUData, GPUKnownDataType} from './types';
+
+type Props = {
+  data?: GPUData;
+};
+
+const KNOWN_DATA = [
+  GPUKnownDataType.NAME,
+  GPUKnownDataType.VERSION,
+  GPUKnownDataType.VENDOR_NAME,
+  GPUKnownDataType.MEMORY,
+  GPUKnownDataType.NPOT_SUPPORT,
+  GPUKnownDataType.MULTI_THREAD_RENDERING,
+  GPUKnownDataType.API_TYPE,
+];
+
+const GPU = ({data}: Props) => {
+  if (data === undefined || data === null) {
+    return null;
+  }
+
+  if (data.vendor_id > 0) {
+    KNOWN_DATA.unshift[GPUKnownDataType.VENDOR_ID];
+  }
+  if (data.id > 0) {
+    KNOWN_DATA.unshift[GPUKnownDataType.ID];
+  }
+
+  return <ContextBlock knownData={getOperatingSystemKnownData(data, KNOWN_DATA)} />;
+};
+
+GPU.getTitle = () => 'GPU';
+
+export default GPU;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/gpu/types.tsx b/src/sentry/static/sentry/app/components/events/contexts/gpu/types.tsx
new file mode 100644
index 0000000000..0900fa8da3
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/gpu/types.tsx
@@ -0,0 +1,24 @@
+export enum GPUKnownDataType {
+  ID = 'id',
+  NAME = 'name',
+  VERSION = 'version',
+  VENDOR_NAME = 'vendor_name',
+  VENDOR_ID = 'vendor_id',
+  MEMORY = 'memory',
+  NPOT_SUPPORT = 'npot_support',
+  MULTI_THREAD_RENDERING = 'multi_threaded_rendering',
+  API_TYPE = 'api_type',
+}
+
+export type GPUData = {
+  id: number;
+  vendor_id: number;
+  name?: string;
+  version?: string;
+  vendor_name?: string;
+  memory?: number;
+  memory_size?: number;
+  npot_support?: string;
+  multi_threaded_rendering?: boolean;
+  api_type?: string;
+};
diff --git a/src/sentry/static/sentry/app/components/events/contexts/operatingSystem/getOperatingSystemKnownData.tsx b/src/sentry/static/sentry/app/components/events/contexts/operatingSystem/getOperatingSystemKnownData.tsx
index d2949d52a8..a630a123de 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/operatingSystem/getOperatingSystemKnownData.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/operatingSystem/getOperatingSystemKnownData.tsx
@@ -16,10 +16,6 @@ function getOperatingSystemKnownData(
       key as OperatingSystemKnownDataType
     );
 
-    if (!knownDataDetails) {
-      continue;
-    }
-
     knownData.push({
       key,
       ...knownDataDetails,
diff --git a/src/sentry/static/sentry/app/components/events/contexts/operatingSystem/getOperatingSystemKnownDataDetails.tsx b/src/sentry/static/sentry/app/components/events/contexts/operatingSystem/getOperatingSystemKnownDataDetails.tsx
index 9f53dab690..093a6f3a99 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/operatingSystem/getOperatingSystemKnownDataDetails.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/operatingSystem/getOperatingSystemKnownDataDetails.tsx
@@ -5,13 +5,13 @@ import {OperatingSystemKnownData, OperatingSystemKnownDataType} from './types';
 
 type Output = {
   subject: string;
-  value: string | null;
+  value: React.ReactNode | null;
 };
 
 function getOperatingSystemKnownDataDetails(
   data: OperatingSystemKnownData,
   type: OperatingSystemKnownDataType
-): Output | undefined {
+): Output {
   switch (type) {
     case OperatingSystemKnownDataType.NAME:
       return {
@@ -34,7 +34,10 @@ function getOperatingSystemKnownDataDetails(
         value: defined(data.rooted) ? (data.rooted ? 'yes' : 'no') : null,
       };
     default:
-      return undefined;
+      return {
+        subject: type,
+        value: data[type] || null,
+      };
   }
 }
 
diff --git a/src/sentry/static/sentry/app/components/events/contexts/runtime/getRuntimeKnownData.tsx b/src/sentry/static/sentry/app/components/events/contexts/runtime/getRuntimeKnownData.tsx
index 5591bddd7e..932f821393 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/runtime/getRuntimeKnownData.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/runtime/getRuntimeKnownData.tsx
@@ -14,10 +14,6 @@ function getRuntimeKnownData(data: RuntimeData): Array<KeyValueListData> {
       key as RuntimeKnownDataType
     );
 
-    if (!knownDataDetails) {
-      continue;
-    }
-
     knownData.push({
       key,
       ...knownDataDetails,
diff --git a/src/sentry/static/sentry/app/components/events/contexts/runtime/getRuntimeKnownDataDetails.tsx b/src/sentry/static/sentry/app/components/events/contexts/runtime/getRuntimeKnownDataDetails.tsx
index d48ea44ca7..38575ffee1 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/runtime/getRuntimeKnownDataDetails.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/runtime/getRuntimeKnownDataDetails.tsx
@@ -4,13 +4,13 @@ import {RuntimeData, RuntimeKnownDataType} from './types';
 
 type Output = {
   subject: string;
-  value: string | null;
+  value?: React.ReactNode;
 };
 
 function getRuntimeKnownDataDetails(
   data: RuntimeData,
   type: RuntimeKnownDataType
-): Output | undefined {
+): Output {
   switch (type) {
     case RuntimeKnownDataType.NAME:
       return {
@@ -23,7 +23,10 @@ function getRuntimeKnownDataDetails(
         value: `${data.version}${data.build ? `(${data.build})` : ''}`,
       };
     default:
-      return undefined;
+      return {
+        subject: type,
+        value: data[type],
+      };
   }
 }
 
diff --git a/src/sentry/static/sentry/app/components/events/eventExtraData/eventDataContent.tsx b/src/sentry/static/sentry/app/components/events/eventExtraData/eventDataContent.tsx
new file mode 100644
index 0000000000..41cee36b1f
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/eventExtraData/eventDataContent.tsx
@@ -0,0 +1,21 @@
+import React from 'react';
+
+import {defined} from 'app/utils';
+import ContextBlock from 'app/components/events/contexts/contextBlockV2';
+
+import getEventExtraDataKnownData from './getEventExtraDataKnownData';
+
+type Props = {
+  data?: any;
+  raw: boolean;
+};
+
+const EventDataContent = ({data, raw}: Props) => {
+  if (!defined(data)) {
+    return null;
+  }
+
+  return <ContextBlock knownData={getEventExtraDataKnownData(data)} raw={raw} />;
+};
+
+export default EventDataContent;
diff --git a/src/sentry/static/sentry/app/components/events/eventExtraData/eventExtraData.tsx b/src/sentry/static/sentry/app/components/events/eventExtraData/eventExtraData.tsx
index 1e41e00075..3bb7473d1d 100644
--- a/src/sentry/static/sentry/app/components/events/eventExtraData/eventExtraData.tsx
+++ b/src/sentry/static/sentry/app/components/events/eventExtraData/eventExtraData.tsx
@@ -2,14 +2,10 @@ import React from 'react';
 
 import {Event} from 'app/types';
 import {t} from 'app/locale';
-import ErrorBoundary from 'app/components/errorBoundary';
 import EventDataSection from 'app/components/events/eventDataSection';
-import KeyValueList from 'app/components/events/interfaces/keyValueList/keyValueListV2';
-import {KeyValueListData} from 'app/components/events/interfaces/keyValueList/types';
 import SentryTypes from 'app/sentryTypes';
-import {getMeta} from 'app/components/events/meta/metaProxy';
 
-import EventExtraDataSubject, {EventExtraDataSubjectType} from './eventExtraDataSubject';
+import EventDataContent from './eventDataContent';
 
 type Props = {
   event: Event;
@@ -38,23 +34,6 @@ class EventExtraData extends React.Component<Props, State> {
     });
   };
 
-  getKeyValueListData = (): Array<KeyValueListData> | undefined => {
-    const eventContext = this.props.event.context;
-
-    if (eventContext === undefined || eventContext === null) {
-      return undefined;
-    }
-
-    return Object.keys(eventContext)
-      .map(key => ({
-        key,
-        subject: <EventExtraDataSubject type={key as EventExtraDataSubjectType} />,
-        value: eventContext[key],
-        meta: getMeta(eventContext, key),
-      }))
-      .filter(data => data.key !== null);
-  };
-
   render() {
     return (
       <div className="extra-data">
@@ -64,13 +43,7 @@ class EventExtraData extends React.Component<Props, State> {
           toggleRaw={this.toggleRaw}
           raw={this.state.raw}
         >
-          <ErrorBoundary mini>
-            <KeyValueList
-              data={this.getKeyValueListData()}
-              raw={this.state.raw}
-              isContextData
-            />
-          </ErrorBoundary>
+          <EventDataContent raw={this.state.raw} data={this.props.event.context} />
         </EventDataSection>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/events/eventExtraData/eventExtraDataSubject.tsx b/src/sentry/static/sentry/app/components/events/eventExtraData/eventExtraDataSubject.tsx
deleted file mode 100644
index a413190412..0000000000
--- a/src/sentry/static/sentry/app/components/events/eventExtraData/eventExtraDataSubject.tsx
+++ /dev/null
@@ -1,22 +0,0 @@
-import React from 'react';
-
-import {t} from 'app/locale';
-
-export enum EventExtraDataSubjectType {
-  CRASHED_PROCESS = 'crashed_process',
-}
-
-type Props = {
-  type: EventExtraDataSubjectType;
-};
-
-const EventExtraDataSubject = ({type}: Props) => {
-  switch (type) {
-    case EventExtraDataSubjectType.CRASHED_PROCESS:
-      return <React.Fragment>{t('Crashed Process')}</React.Fragment>;
-    default:
-      return <React.Fragment>{type}</React.Fragment>;
-  }
-};
-
-export default EventExtraDataSubject;
diff --git a/src/sentry/static/sentry/app/components/events/eventExtraData/getEventExtraDataKnownData.tsx b/src/sentry/static/sentry/app/components/events/eventExtraData/getEventExtraDataKnownData.tsx
new file mode 100644
index 0000000000..a4c6df42fc
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/eventExtraData/getEventExtraDataKnownData.tsx
@@ -0,0 +1,26 @@
+import {KeyValueListData} from 'app/components/events/interfaces/keyValueList/types';
+import {getMeta} from 'app/components/events/meta/metaProxy';
+
+import getEventExtraDataKnownDataDetails from './getEventExtraDataKnownDataDetails';
+import {EventExtraData, EventExtraDataType} from './types';
+
+function getEventExtraDataKnownData(data: EventExtraData): Array<KeyValueListData> {
+  const knownData: Array<KeyValueListData> = [];
+
+  const dataKeys = Object.keys(data);
+  for (const key of dataKeys) {
+    const knownDataDetails = getEventExtraDataKnownDataDetails(
+      data,
+      key as EventExtraDataType
+    );
+
+    knownData.push({
+      key,
+      ...knownDataDetails,
+      meta: getMeta(data, key),
+    });
+  }
+  return knownData;
+}
+
+export default getEventExtraDataKnownData;
diff --git a/src/sentry/static/sentry/app/components/events/eventExtraData/getEventExtraDataKnownDataDetails.tsx b/src/sentry/static/sentry/app/components/events/eventExtraData/getEventExtraDataKnownDataDetails.tsx
new file mode 100644
index 0000000000..f66f119170
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/eventExtraData/getEventExtraDataKnownDataDetails.tsx
@@ -0,0 +1,30 @@
+import React from 'react';
+
+import {t} from 'app/locale';
+
+import {EventExtraDataType, EventExtraData} from './types';
+
+type Output = {
+  subject: string;
+  value?: React.ReactNode;
+};
+
+const getEventExtraDataKnownDataDetails = (
+  data: EventExtraData,
+  key: EventExtraDataType
+): Output => {
+  switch (key) {
+    case EventExtraDataType.CRASHED_PROCESS:
+      return {
+        subject: t('Crashed Process'),
+        value: data[key],
+      };
+    default:
+      return {
+        subject: key,
+        value: data[key],
+      };
+  }
+};
+
+export default getEventExtraDataKnownDataDetails;
diff --git a/src/sentry/static/sentry/app/components/events/eventExtraData/types.tsx b/src/sentry/static/sentry/app/components/events/eventExtraData/types.tsx
new file mode 100644
index 0000000000..2836d79fc4
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/eventExtraData/types.tsx
@@ -0,0 +1,7 @@
+export enum EventExtraDataType {
+  CRASHED_PROCESS = 'crashed_process',
+}
+
+export type EventExtraData = {
+  [key: string]: any;
+};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
index 9058553bdc..074e003319 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
@@ -21,7 +21,7 @@ type Props = {
 const KeyValueList = ({
   data,
   isContextData = false,
-  isSorted = true,
+  isSorted = false,
   raw = false,
   longKeys = false,
   onClick,
@@ -40,7 +40,7 @@ const KeyValueList = ({
   return (
     <table className="table key-value" onClick={onClick}>
       <tbody>
-        {getData().map(({key, subject, value, meta}) => (
+        {getData().map(({key, subject, value = null, meta}) => (
           <tr key={key}>
             <TableData className="key" wide={longKeys}>
               {subject}
@@ -54,12 +54,16 @@ const KeyValueList = ({
                 />
               ) : (
                 <pre className="val-string">
-                  <AnnotatedText
-                    value={value}
-                    chunks={meta.chunks}
-                    remarks={meta.rem}
-                    errors={meta.err}
-                  />
+                  {meta ? (
+                    <AnnotatedText
+                      value={value}
+                      chunks={meta.chunks}
+                      remarks={meta.rem}
+                      errors={meta.err}
+                    />
+                  ) : (
+                    value
+                  )}
                 </pre>
               )}
             </td>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/types.ts b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/types.ts
deleted file mode 100644
index a805497237..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/types.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import {Meta} from 'app/types';
-
-export type KeyValueListData = {
-  key: string;
-  subject: React.ReactNode;
-  value: React.ReactNode | null;
-  meta: Meta;
-};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/types.tsx b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/types.tsx
index f2ee78b0e2..cc45fa1c31 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/types.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/types.tsx
@@ -2,7 +2,7 @@ import {Meta} from 'app/types';
 
 export type KeyValueListData = {
   key: string;
-  subject: React.ReactNode;
-  value: string | null;
-  meta: Meta;
+  subject: string;
+  value?: React.ReactNode;
+  meta?: Meta;
 };
