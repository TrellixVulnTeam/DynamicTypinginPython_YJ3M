commit 22a9e3a15619768d508d5f60129119021389d958
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue May 12 11:35:54 2020 -0700

    ref(ts): Convert `app/views/app` to typescript (#18744)
    
    * ref(ts): Convert `app/views/app` to typescript
    
    * fixes to make types pass
    
    * update types

diff --git a/src/sentry/static/sentry/app/components/alerts.tsx b/src/sentry/static/sentry/app/components/alerts.tsx
index d0e68a9db5..5e114486f9 100644
--- a/src/sentry/static/sentry/app/components/alerts.tsx
+++ b/src/sentry/static/sentry/app/components/alerts.tsx
@@ -7,13 +7,13 @@ import AlertStore from 'app/stores/alertStore';
 import AlertMessage from 'app/components/alertMessage';
 import theme from 'app/utils/theme';
 
+type Props = {className?: string};
 type Alert = React.ComponentProps<typeof AlertMessage>['alert'];
-
 type State = {
   alerts: Array<Alert>;
 };
 
-const Alerts = createReactClass<{}, State>({
+const Alerts = createReactClass<Props, State>({
   displayName: 'Alerts',
   mixins: [Reflux.connect(AlertStore, 'alerts') as any],
 
@@ -24,10 +24,11 @@ const Alerts = createReactClass<{}, State>({
   },
 
   render() {
+    const {className} = this.props;
     const alerts = this.state.alerts as Array<Alert>;
     return (
       <ThemeProvider theme={theme}>
-        <div {...this.props}>
+        <div className={className}>
           {alerts.map(alert => (
             <AlertMessage alert={alert} key={alert.id} system />
           ))}
diff --git a/src/sentry/static/sentry/app/components/globalModal.tsx b/src/sentry/static/sentry/app/components/globalModal.tsx
index 49e75a0ada..52f8ce7cba 100644
--- a/src/sentry/static/sentry/app/components/globalModal.tsx
+++ b/src/sentry/static/sentry/app/components/globalModal.tsx
@@ -1,7 +1,6 @@
 import {ClassNames} from '@emotion/core';
 import {browserHistory} from 'react-router';
 import Modal from 'react-bootstrap/lib/Modal';
-import PropTypes from 'prop-types';
 import React from 'react';
 import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
@@ -16,36 +15,25 @@ type DefaultProps = {
 };
 
 type Props = DefaultProps & {
+  /**
+   * Needs to be a function that returns a React Element
+   * Function is injected with:
+   * Modal `Header`, `Body`, and `Footer`,
+   * `closeModal`
+   *
+   */
   children?: (renderProps: ModalRenderProps) => React.ReactNode;
+
+  /**
+   * Note this is the callback for the main App container and
+   * NOT the calling component.  GlobalModal is never used directly,
+   * but is controlled via stores. To access the onClose callback from
+   * the component, you must specify it when using the action creator.
+   */
   onClose?: () => void;
 };
 
 class GlobalModal extends React.Component<Props> {
-  static propTypes = {
-    /**
-     * Needs to be a function that returns a React Element
-     * Function is injected with:
-     * Modal `Header`, `Body`, and `Footer`,
-     * `closeModal`
-     *
-     */
-    children: PropTypes.func,
-    options: PropTypes.shape({
-      onClose: PropTypes.func,
-      dialogClassName: PropTypes.string,
-      modalClassName: PropTypes.string,
-      modalCss: PropTypes.any,
-    }),
-    visible: PropTypes.bool,
-    /**
-     * Note this is the callback for the main App container and
-     * NOT the calling component.  GlobalModal is never used directly,
-     * but is controlled via stores. To access the onClose callback from
-     * the component, you must specify it when using the action creator.
-     */
-    onClose: PropTypes.func,
-  };
-
   static defaultProps: DefaultProps = {
     visible: false,
     options: {},
@@ -105,7 +93,7 @@ class GlobalModal extends React.Component<Props> {
   }
 }
 
-const GlobalModalContainer = createReactClass({
+const GlobalModalContainer = createReactClass<Partial<Props>>({
   displayName: 'GlobalModalContainer',
   mixins: [Reflux.connect(ModalStore, 'modalStore') as any],
 
diff --git a/src/sentry/static/sentry/app/components/loadingIndicator.tsx b/src/sentry/static/sentry/app/components/loadingIndicator.tsx
index 6e78e62192..67334b822d 100644
--- a/src/sentry/static/sentry/app/components/loadingIndicator.tsx
+++ b/src/sentry/static/sentry/app/components/loadingIndicator.tsx
@@ -16,7 +16,7 @@ type Props = {
   size?: number;
   className?: string;
   style?: React.CSSProperties;
-  children?: React.ReactChildren;
+  children?: React.ReactNode;
   finishProfile: () => void;
 };
 
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 4033cbf6c3..d4998d6254 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -519,7 +519,11 @@ export type Config = {
   isOnPremise: boolean;
   lastOrganization: string | null;
   gravatarBaseUrl: string;
-  messages: string[];
+
+  /**
+   * This comes from django (django.contrib.messages)
+   */
+  messages: {message: string; level: string}[];
   dsn: string;
   userIdentity: {ip_address: string; email: string; id: string; isStaff: boolean};
   termsUrl: string | null;
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app/index.tsx
similarity index 86%
rename from src/sentry/static/sentry/app/views/app.jsx
rename to src/sentry/static/sentry/app/views/app/index.tsx
index f8b286556a..c3a4350dcb 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app/index.tsx
@@ -1,4 +1,5 @@
 import $ from 'jquery';
+import {RouteComponentProps} from 'react-router/lib/Router';
 import {ThemeProvider} from 'emotion-theming';
 import {browserHistory} from 'react-router';
 import Cookies from 'js-cookie';
@@ -7,6 +8,8 @@ import React from 'react';
 import isEqual from 'lodash/isEqual';
 import keydown from 'react-keydown';
 
+import {Client} from 'app/api';
+import {Config} from 'app/types';
 import {DEPLOY_PREVIEW_CONFIG, EXPERIMENTAL_SPA} from 'app/constants';
 import {displayDeployPreviewAlert} from 'app/actionCreators/deployPreview';
 import {fetchGuides} from 'app/actionCreators/guides';
@@ -18,6 +21,7 @@ import Alerts from 'app/components/alerts';
 import ConfigStore from 'app/stores/configStore';
 import ErrorBoundary from 'app/components/errorBoundary';
 import GlobalModal from 'app/components/globalModal';
+import GlobalStyles from 'app/styles/global';
 import HookStore from 'app/stores/hookStore';
 import Indicators from 'app/components/indicators';
 import LoadingIndicator from 'app/components/loadingIndicator';
@@ -27,7 +31,6 @@ import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
 import theme from 'app/utils/theme';
 import withApi from 'app/utils/withApi';
 import withConfig from 'app/utils/withConfig';
-import GlobalStyles from 'app/styles/global';
 
 // TODO: Need better way of identifying anonymous pages that don't trigger redirect
 const ALLOWED_ANON_PAGES = [
@@ -46,27 +49,30 @@ function getAlertTypeForProblem(problem) {
   }
 }
 
-class App extends React.Component {
-  static propTypes = {
-    api: PropTypes.object.isRequired,
-    routes: PropTypes.array,
-    config: PropTypes.object.isRequired,
-  };
+type Props = {
+  api: Client;
+  config: Config;
+} & RouteComponentProps<{}, {}>;
+
+type State = {
+  loading: boolean;
+  error: boolean;
+  needsUpgrade: boolean;
+  newsletterConsentPrompt: boolean;
+  user?: Config['user'];
+};
 
+class App extends React.Component<Props, State> {
   static childContextTypes = {
     location: PropTypes.object,
   };
 
-  constructor(props) {
-    super(props);
-    const user = ConfigStore.get('user');
-    this.state = {
-      loading: false,
-      error: false,
-      needsUpgrade: user && user.isSuperuser && ConfigStore.get('needsUpgrade'),
-      newsletterConsentPrompt: user && user.flags.newsletter_consent_prompt,
-    };
-  }
+  state = {
+    loading: false,
+    error: false,
+    needsUpgrade: ConfigStore.get('user')?.isSuperuser && ConfigStore.get('needsUpgrade'),
+    newsletterConsentPrompt: ConfigStore.get('user')?.flags?.newsletter_consent_prompt,
+  };
 
   getChildContext() {
     return {
@@ -74,7 +80,7 @@ class App extends React.Component {
     };
   }
 
-  UNSAFE_componentWillMount() {
+  componentDidMount() {
     this.props.api.request('/organizations/', {
       query: {
         member: '1',
@@ -147,7 +153,7 @@ class App extends React.Component {
       }
 
       // Otherwise, the user has become unauthenticated. Send them to auth
-      Cookies.set('session_expired', 1);
+      Cookies.set('session_expired', '1');
 
       if (EXPERIMENTAL_SPA) {
         browserHistory.replace('/auth/login/');
@@ -160,9 +166,7 @@ class App extends React.Component {
     if (user) {
       HookStore.get('analytics:init-user').map(cb => cb(user));
     }
-  }
 
-  componentDidMount() {
     fetchGuides();
   }
 
@@ -178,13 +182,15 @@ class App extends React.Component {
     OrganizationsStore.load([]);
   }
 
+  mainContainerRef = React.createRef<HTMLDivElement>();
+
   updateTracing() {
     const route = getRouteStringFromRoutes(this.props.routes);
     setTransactionName(route);
   }
 
   handleConfigStoreChange(config) {
-    const newState = {};
+    const newState = {} as State;
     if (config.needsUpgrade !== undefined) {
       newState.needsUpgrade = config.needsUpgrade;
     }
@@ -212,15 +218,10 @@ class App extends React.Component {
     });
 
   handleGlobalModalClose = () => {
-    if (!this.mainContainerRef) {
-      return;
-    }
-    if (typeof this.mainContainerRef.focus !== 'function') {
-      return;
+    if (typeof this.mainContainerRef.current?.focus === 'function') {
+      // Focus the main container to get hotkeys to keep working after modal closes
+      this.mainContainerRef.current.focus();
     }
-
-    // Focus the main container to get hotkeys to keep working after modal closes
-    this.mainContainerRef.focus();
   };
 
   renderBody() {
@@ -257,11 +258,7 @@ class App extends React.Component {
     return (
       <ThemeProvider theme={theme}>
         <GlobalStyles theme={theme} />
-        <div
-          className="main-container"
-          tabIndex="-1"
-          ref={ref => (this.mainContainerRef = ref)}
-        >
+        <div className="main-container" tabIndex={-1} ref={this.mainContainerRef}>
           <GlobalModal onClose={this.handleGlobalModalClose} />
           <Alerts className="messages-container" />
           <Indicators className="indicators-container" />
