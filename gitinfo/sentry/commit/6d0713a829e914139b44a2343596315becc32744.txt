commit 6d0713a829e914139b44a2343596315becc32744
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jan 16 13:27:52 2015 -0800

    Import react-bootstrap-datepicker
    
    - Correct visibility visuals
    - Fix default dateTime prop

diff --git a/package.json b/package.json
index 51346d9898..2d9d2fc0a5 100644
--- a/package.json
+++ b/package.json
@@ -8,7 +8,6 @@
   "dependencies": {
     "bootstrap": "^3.1.1",
     "chai": "1.7.x",
-    "eonasdan-bootstrap-datetimepicker": "^3.1.3",
     "flot": "^0.8.0-alpha",
     "gulp": "^3.8.10",
     "gulp-cached": "^1.0.1",
diff --git a/src/sentry/static/sentry/app/components/streamActions.jsx b/src/sentry/static/sentry/app/components/streamActions.jsx
index 7130654b07..4fd62cb3b3 100644
--- a/src/sentry/static/sentry/app/components/streamActions.jsx
+++ b/src/sentry/static/sentry/app/components/streamActions.jsx
@@ -4,7 +4,8 @@ var $ = require("jquery");
 
 var utils = require("../utils");
 
-var joinClasses = require('react-bootstrap/utils/joinClasses');
+var joinClasses = require("react-bootstrap/utils/joinClasses");
+var DateTimeField = require("../modules/datepicker/DateTimeField");
 var DropdownLink = require("./dropdownLink");
 var MenuItem = require("./menuItem");
 var Modal = require("react-bootstrap/Modal");
@@ -159,9 +160,19 @@ var StreamActions = React.createClass({
     selectAllActive: React.PropTypes.bool.isRequired,
     statsPeriod: React.PropTypes.string.isRequired
   },
+  getInitialState: function(){
+    return {
+      datePickerActive: false
+    };
+  },
   selectStatsPeriod: function(period) {
     return this.props.onSelectStatsPeriod(period);
   },
+  toggleDatePicker: function() {
+    this.setState({
+      datePickerActive: !this.state.datePickerActive
+    });
+  },
   render: function() {
     var params = utils.getQueryParams();
     var sortBy = params.sort || 'date';
@@ -284,18 +295,22 @@ var StreamActions = React.createClass({
           </DropdownLink>
 
           <div className="btn-group">
-            <a href="#" className="btn dropdown-toggle btn-sm" onclick="" data-toggle="dropdown">
+            <a href="#" className="btn btn-sm" onClick={this.toggleDatePicker}>
               All time
-            <span aria-hidden="true" className="icon-arrow-down"></span></a>
-            <div className="datepicker-box dropdown-menu" id="daterange">
+              <span aria-hidden="true" className="icon-arrow-down"></span>
+            </a>
+            <div className="datepicker-box dropdown-menu" id="daterange"
+                 style={{display: this.state.datePickerActive ? 'block': 'none'}}>
               <form method="GET" action=".">
                 <div className="input">
                   <div className="inline-inputs">
-                    <input data-toggle="datepicker" data-date-format="yyyy-mm-dd"name="df" className="form-control date" type="text" placeholder="Date" />
-                    <input className="time form-control" type="text" name="tf" placeholder="Time" />
+                    <DateTimeField />
+                    // <input data-toggle="datepicker" data-date-format="yyyy-mm-dd"name="df" className="form-control date" type="text" placeholder="Date" />
+                    // <input className="time form-control" type="text" name="tf" placeholder="Time" />
                     to
-                    <input data-toggle="datepicker" data-date-format="yyyy-mm-dd" name="dt" className="date form-control" type="text" placeholder="Date"/>
-                    <input className="time form-control" type="text" name="tt" placeholder="Time" />
+                    <DateTimeField />
+                    // <input data-toggle="datepicker" data-date-format="yyyy-mm-dd" name="dt" className="date form-control" type="text" placeholder="Date"/>
+                    // <input className="time form-control" type="text" name="tt" placeholder="Time" />
                   </div>
                   <div className="help-block">All events are represented in UTC time.</div>
                 </div>
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimeField.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimeField.jsx
new file mode 100644
index 0000000000..4fa95e9ed3
--- /dev/null
+++ b/src/sentry/static/sentry/app/modules/datepicker/DateTimeField.jsx
@@ -0,0 +1,307 @@
+/** @jsx React.DOM */
+var React = require('react');
+var DateTimePicker = require('./DateTimePicker');
+var moment = require('moment');
+var Glyphicon = require('react-bootstrap/Glyphicon');
+
+var DateTimeField = React.createClass({
+  propTypes: {
+    dateTime: function(props, propName, componentName){
+      if (!moment.isMoment(props[propName])) {
+        return new Error('Not a valid Moment');
+      }
+    },
+    onChange: React.PropTypes.func,
+    format: React.PropTypes.string,
+    inputFormat: React.PropTypes.string
+  },
+  getDefaultProps: function() {
+    return {
+      dateTime: moment(),
+      format: 'X',
+      inputFormat: "MM/DD/YY H:mm A",
+      showToday: true,
+      daysOfWeekDisabled: []
+    };
+  },
+  getInitialState: function() {
+    return {
+      showDatePicker: true,
+      showTimePicker: false,
+      widgetStyle: {
+        display: 'none',
+        position: 'absolute',
+        left: 'none',
+        zIndex: '9999 !important'
+      },
+      viewDate: moment(this.props.dateTime, this.props.format).startOf("month"),
+      selectedDate: moment(this.props.dateTime, this.props.format),
+      inputValue: moment(this.props.dateTime, this.props.format).format(this.props.inputFormat)
+    };
+  },
+  componentWillReceiveProps: function(nextProps) {
+    return this.setState({
+      viewDate: moment(nextProps.dateTime, nextProps.format).startOf("month"),
+      selectedDate: moment(nextProps.dateTime, nextProps.format),
+      inputValue: moment(nextProps.dateTime, nextProps.format).format(nextProps.inputFormat)
+    });
+  },
+  onChange: function(event) {
+    if (moment(event.target.value, this.props.format).isValid()) {
+      this.setState({
+        selectedDate: moment(event.target.value, this.props.format),
+        inputValue: moment(event.target.value, this.props.format).format(this.props.inputFormat)
+      });
+    } else {
+      this.setState({
+        inputValue: event.target.value
+      });
+      console.log("This is not a valid date");
+    }
+    if (this.props.onChange) {
+      return this.props.onChange(this.state.selectedDate.format(this.props.format));
+    }
+  },
+  setSelectedDate: function(e) {
+    return this.setState({
+      selectedDate: this.state.viewDate.clone().date(parseInt(e.target.innerHTML)).hour(this.state.selectedDate.hours()).minute(this.state.selectedDate.minutes())
+    }, function() {
+      this.closePicker();
+      if (this.props.onChange) {
+        this.props.onChange(this.state.selectedDate.format(this.props.format));
+      }
+      return this.setState({
+        inputValue: this.state.selectedDate.format(this.props.inputFormat)
+      });
+    });
+  },
+  setSelectedHour: function(e) {
+    return this.setState({
+      selectedDate: this.state.selectedDate.clone().hour(parseInt(e.target.innerHTML)).minute(this.state.selectedDate.minutes())
+    }, function() {
+      this.closePicker();
+      if (this.props.onChange) {
+        this.props.onChange(this.state.selectedDate.format(this.props.format));
+      }
+      return this.setState({
+        inputValue: this.state.selectedDate.format(this.props.inputFormat)
+      });
+    });
+  },
+  setSelectedMinute: function(e) {
+    return this.setState({
+      selectedDate: this.state.selectedDate.clone().hour(this.state.selectedDate.hours()).minute(parseInt(e.target.innerHTML))
+    }, function() {
+      this.closePicker();
+      if (this.props.onChange) {
+        this.props.onChange(this.state.selectedDate.format(this.props.format));
+      }
+      return this.setState({
+        inputValue: this.state.selectedDate.format(this.props.inputFormat)
+      });
+    });
+  },
+  setViewMonth: function(month) {
+    return this.setState({
+      viewDate: this.state.viewDate.clone().month(month)
+    });
+  },
+  setViewYear: function(year) {
+    return this.setState({
+      viewDate: this.state.viewDate.clone().year(year)
+    });
+  },
+  addMinute: function() {
+    return this.setState({
+      selectedDate: this.state.selectedDate.clone().add(1, "minutes")
+    }, function() {
+      if (this.props.onChange) {
+        return this.props.onChange(this.state.selectedDate.format(this.props.format));
+      }
+    });
+  },
+  addHour: function() {
+    return this.setState({
+      selectedDate: this.state.selectedDate.clone().add(1, "hours")
+    }, function() {
+      if (this.props.onChange) {
+        return this.props.onChange(this.state.selectedDate.format(this.props.format));
+      }
+    });
+  },
+  addMonth: function() {
+    return this.setState({
+      viewDate: this.state.viewDate.add(1, "months")
+    });
+  },
+  addYear: function() {
+    return this.setState({
+      viewDate: this.state.viewDate.add(1, "years")
+    });
+  },
+  addDecade: function() {
+    return this.setState({
+      viewDate: this.state.viewDate.add(10, "years")
+    });
+  },
+  subtractMinute: function() {
+    return this.setState({
+      selectedDate: this.state.selectedDate.clone().subtract(1, "minutes")
+    }, function() {
+      if (this.props.onChange) {
+        return this.props.onChange(this.state.selectedDate.format(this.props.format));
+      }
+    });
+  },
+  subtractHour: function() {
+    return this.setState({
+      selectedDate: this.state.selectedDate.clone().subtract(1, "hours")
+    }, function() {
+      if (this.props.onChange) {
+        return this.props.onChange(this.state.selectedDate.format(this.props.format));
+      }
+    });
+  },
+  subtractMonth: function() {
+    return this.setState({
+      viewDate: this.state.viewDate.subtract(1, "months")
+    });
+  },
+  subtractYear: function() {
+    return this.setState({
+      viewDate: this.state.viewDate.subtract(1, "years")
+    });
+  },
+  subtractDecade: function() {
+    return this.setState({
+      viewDate: this.state.viewDate.subtract(10, "years")
+    });
+  },
+  togglePeriod: function() {
+    if (this.state.selectedDate.hour() > 12) {
+      return this.setState({
+        selectedDate: this.state.selectedDate.clone().subtract(12, 'hours')
+      });
+    } else {
+      return this.setState({
+        selectedDate: this.state.selectedDate.clone().add(12, 'hours')
+      });
+    }
+  },
+  togglePicker: function() {
+    return this.setState({
+      showDatePicker: !this.state.showDatePicker,
+      showTimePicker: !this.state.showTimePicker
+    });
+  },
+  onClick: function() {
+    var classes, gBCR, offset, placePosition, scrollTop, styles;
+    if (this.state.showPicker) {
+      return this.closePicker();
+    } else {
+      this.setState({
+        showPicker: true
+      });
+      gBCR = this.refs.dtpbutton.getDOMNode().getBoundingClientRect();
+      classes = {
+        "bootstrap-datetimepicker-widget": true,
+        "dropdown-menu": true
+      };
+      offset = {
+        top: gBCR.top + window.pageYOffset - document.documentElement.clientTop,
+        left: gBCR.left + window.pageXOffset - document.documentElement.clientLeft
+      };
+      offset.top = offset.top + this.refs.datetimepicker.getDOMNode().offsetHeight;
+      scrollTop = (window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;
+      placePosition = this.props.direction === 'up' ? 'top' : this.props.direction === 'bottom' ? 'bottom' : this.props.direction === 'auto' ? offset.top + this.refs.widget.getDOMNode().offsetHeight > window.offsetHeight + scrollTop && this.refs.widget.offsetHeight + this.refs.datetimepicker.getDOMNode().offsetHeight > offset.top ? 'top' : 'bottom' : void 0;
+      if (placePosition === 'top') {
+        offset.top = -this.refs.widget.getDOMNode().offsetHeight - this.getDOMNode().clientHeight - 2;
+        classes.top = true;
+        classes.bottom = false;
+        classes['pull-right'] = true;
+      } else {
+        offset.top = 40;
+        classes.top = false;
+        classes.bottom = true;
+        classes['pull-right'] = true;
+      }
+      styles = {
+        display: 'block',
+        position: 'absolute',
+        top: offset.top,
+        left: 'auto',
+        right: 40
+      };
+      return this.setState({
+        widgetStyle: styles,
+        widgetClasses: classes
+      });
+    }
+  },
+  closePicker: function(e) {
+    var style;
+    style = this.state.widgetStyle;
+    style.display = 'none';
+    return this.setState({
+      showPicker: false,
+      widgetStyle: style
+    });
+  },
+  renderOverlay: function() {
+    var styles;
+    styles = {
+      position: 'fixed',
+      top: 0,
+      bottom: 0,
+      left: 0,
+      right: 0,
+      zIndex: '999'
+    };
+    if (this.state.showPicker) {
+      return (<div style={styles} onClick={this.closePicker} />);
+    } else {
+      return <div />;
+    }
+  },
+  render: function() {
+    return (
+          <div>
+            {this.renderOverlay()}
+            <DateTimePicker ref="widget"
+              widgetClasses={this.state.widgetClasses}
+              widgetStyle={this.state.widgetStyle}
+              showDatePicker={this.state.showDatePicker}
+              showTimePicker={this.state.showTimePicker}
+              viewDate={this.state.viewDate}
+              selectedDate={this.state.selectedDate}
+              showToday={this.props.showToday}
+              daysOfWeekDisabled={this.props.daysOfWeekDisabled}
+              addDecade={this.addDecade}
+              addYear={this.addYear}
+              addMonth={this.addMonth}
+              addHour={this.addHour}
+              addMinute={this.addMinute}
+              subtractDecade={this.subtractDecade}
+              subtractYear={this.subtractYear}
+              subtractMonth={this.subtractMonth}
+              subtractHour={this.subtractHour}
+              subtractMinute={this.subtractMinute}
+              setViewYear={this.setViewYear}
+              setViewMonth={this.setViewMonth}
+              setSelectedDate={this.setSelectedDate}
+              setSelectedHour={this.setSelectedHour}
+              setSelectedMinute={this.setSelectedMinute}
+              togglePicker={this.togglePicker}
+              togglePeriod={this.togglePeriod} />
+            <div className="input-group date" ref="datetimepicker">
+              <input type="text" className="form-control" onChange={this.onChange} value={this.state.selectedDate.format(this.props.inputFormat)} />
+              <span className="input-group-addon" onClick={this.onClick} onBlur={this.onBlur} ref="dtpbutton">
+                <Glyphicon glyph="calendar" />
+              </span>
+            </div>
+          </div>
+    );
+  }
+});
+
+module.exports = DateTimeField;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimePicker.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimePicker.jsx
new file mode 100644
index 0000000000..db36e6020d
--- /dev/null
+++ b/src/sentry/static/sentry/app/modules/datepicker/DateTimePicker.jsx
@@ -0,0 +1,81 @@
+/** @jsx React.DOM */
+var React = require('react');
+var DateTimePickerDate = require('./DateTimePickerDate');
+var DateTimePickerTime = require('./DateTimePickerTime');
+var Glyphicon = require('react-bootstrap/Glyphicon');
+
+DateTimePicker = React.createClass({
+  propTypes: {
+    showDatePicker: React.PropTypes.bool,
+    showTimePicker: React.PropTypes.bool,
+    subtractMonth: React.PropTypes.func.isRequired,
+    addMonth: React.PropTypes.func.isRequired,
+    viewDate: React.PropTypes.object.isRequired,
+    selectedDate: React.PropTypes.object.isRequired,
+    showToday: React.PropTypes.bool,
+    daysOfWeekDisabled: React.PropTypes.array,
+    setSelectedDate: React.PropTypes.func.isRequired,
+    subtractYear: React.PropTypes.func.isRequired,
+    addYear: React.PropTypes.func.isRequired,
+    setViewMonth: React.PropTypes.func.isRequired,
+    setViewYear: React.PropTypes.func.isRequired,
+    subtractHour: React.PropTypes.func.isRequired,
+    addHour: React.PropTypes.func.isRequired,
+    subtractMinute: React.PropTypes.func.isRequired,
+    addMinute: React.PropTypes.func.isRequired,
+    addDecade: React.PropTypes.func.isRequired,
+    subtractDecade: React.PropTypes.func.isRequired,
+    togglePeriod: React.PropTypes.func.isRequired
+  },
+  renderDatePicker: function() {
+    if (this.props.showDatePicker) {
+      return (
+        <DateTimePickerDate
+          addMonth={this.props.addMonth}
+          subtractMonth={this.props.subtractMonth}
+          setSelectedDate={this.props.setSelectedDate}
+          viewDate={this.props.viewDate}
+          selectedDate={this.props.selectedDate}
+          showToday={this.props.showToday}
+          daysOfWeekDisabled={this.props.daysOfWeekDisabled}
+          subtractYear={this.props.subtractYear}
+          addYear={this.props.addYear}
+          setViewMonth={this.props.setViewMonth}
+          setViewYear={this.props.setViewYear}
+          addDecade={this.props.addDecade}
+          subtractDecade={this.props.subtractDecade} />
+      );
+    }
+  },
+  renderTimePicker: function() {
+    if (this.props.showTimePicker) {
+      return (
+      <DateTimePickerTime
+        viewDate={this.props.viewDate}
+        selectedDate={this.props.selectedDate}
+        setSelectedHour={this.props.setSelectedHour}
+        setSelectedMinute={this.props.setSelectedMinute}
+        addHour={this.props.addHour}
+        subtractHour={this.props.subtractHour}
+        addMinute={this.props.addMinute}
+        subtractMinute={this.props.subtractMinute}
+        togglePeriod={this.props.togglePeriod} />
+      );
+    }
+  },
+  render: function() {
+    return (
+      <div className={React.addons.classSet(this.props.widgetClasses)} style={this.props.widgetStyle}>
+
+        {this.renderDatePicker()}
+
+        <a className="btn btn-default picker-switch" style={{width:'100%'}} onClick={this.props.togglePicker}><Glyphicon glyph={this.props.showTimePicker ? 'calendar' : 'time'} /></a>
+
+        {this.renderTimePicker()}
+
+      </div>
+    );
+  }
+});
+
+module.exports = DateTimePicker;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerDate.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerDate.jsx
new file mode 100644
index 0000000000..4b7f1e26ad
--- /dev/null
+++ b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerDate.jsx
@@ -0,0 +1,124 @@
+
+/** @jsx React.DOM */
+var DateTimePickerDate, DateTimePickerDays, DateTimePickerMonths, DateTimePickerYears, React;
+
+React = require('react');
+
+DateTimePickerDays = require('./DateTimePickerDays');
+
+DateTimePickerMonths = require('./DateTimePickerMonths');
+
+DateTimePickerYears = require('./DateTimePickerYears');
+
+DateTimePickerDate = React.createClass({
+  propTypes: {
+    subtractMonth: React.PropTypes.func.isRequired,
+    addMonth: React.PropTypes.func.isRequired,
+    viewDate: React.PropTypes.object.isRequired,
+    selectedDate: React.PropTypes.object.isRequired,
+    showToday: React.PropTypes.bool,
+    daysOfWeekDisabled: React.PropTypes.array,
+    setSelectedDate: React.PropTypes.func.isRequired,
+    subtractYear: React.PropTypes.func.isRequired,
+    addYear: React.PropTypes.func.isRequired,
+    setViewMonth: React.PropTypes.func.isRequired,
+    setViewYear: React.PropTypes.func.isRequired,
+    addDecade: React.PropTypes.func.isRequired,
+    subtractDecade: React.PropTypes.func.isRequired
+  },
+  getInitialState: function() {
+    return {
+      daysDisplayed: true,
+      monthsDisplayed: false,
+      yearsDisplayed: false
+    };
+  },
+  showMonths: function() {
+    return this.setState({
+      daysDisplayed: false,
+      monthsDisplayed: true
+    });
+  },
+  showYears: function() {
+    return this.setState({
+      monthsDisplayed: false,
+      yearsDisplayed: true
+    });
+  },
+  setViewYear: function(e) {
+    this.props.setViewYear(e.target.innerHTML);
+    return this.setState({
+      yearsDisplayed: false,
+      monthsDisplayed: true
+    });
+  },
+  setViewMonth: function(e) {
+    this.props.setViewMonth(e.target.innerHTML);
+    return this.setState({
+      monthsDisplayed: false,
+      daysDisplayed: true
+    });
+  },
+  renderDays: function() {
+    if (this.state.daysDisplayed) {
+      return (
+      <DateTimePickerDays
+            addMonth={this.props.addMonth}
+            subtractMonth={this.props.subtractMonth}
+            setSelectedDate={this.props.setSelectedDate}
+            viewDate={this.props.viewDate}
+            selectedDate={this.props.selectedDate}
+            showToday={this.props.showToday}
+            daysOfWeekDisabled={this.props.daysOfWeekDisabled}
+            showMonths={this.showMonths}
+      />
+      );
+    } else {
+      return null;
+    }
+  },
+  renderMonths: function() {
+    if (this.state.monthsDisplayed) {
+      return (
+      <DateTimePickerMonths
+            subtractYear={this.props.subtractYear}
+            addYear={this.props.addYear}
+            viewDate={this.props.viewDate}
+            selectedDate={this.props.selectedDate}
+            showYears={this.showYears}
+            setViewMonth={this.setViewMonth}
+      />
+      );
+    } else {
+      return null;
+    }
+  },
+  renderYears: function() {
+    if (this.state.yearsDisplayed) {
+      return (
+      <DateTimePickerYears
+            viewDate={this.props.viewDate}
+            selectedDate={this.props.selectedDate}
+            setViewYear={this.setViewYear}
+            addDecade={this.props.addDecade}
+            subtractDecade={this.props.subtractDecade}
+      />
+      );
+    } else {
+      return null;
+    }
+  },
+  render: function() {
+    return (
+    <div className="datepicker">
+      {this.renderDays()}
+
+      {this.renderMonths()}
+
+      {this.renderYears()}
+    </div>
+    );
+  }
+});
+
+module.exports = DateTimePickerDate;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerDays.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerDays.jsx
new file mode 100644
index 0000000000..4f1ce41266
--- /dev/null
+++ b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerDays.jsx
@@ -0,0 +1,115 @@
+
+/** @jsx React.DOM */
+var DateTimePickerDays, React, moment;
+
+React = require('react');
+
+moment = require('moment');
+
+DateTimePickerDays = React.createClass({
+  propTypes: {
+    subtractMonth: React.PropTypes.func.isRequired,
+    addMonth: React.PropTypes.func.isRequired,
+    viewDate: React.PropTypes.object.isRequired,
+    selectedDate: React.PropTypes.object.isRequired,
+    showToday: React.PropTypes.bool,
+    daysOfWeekDisabled: React.PropTypes.array,
+    setSelectedDate: React.PropTypes.func.isRequired,
+    showMonths: React.PropTypes.func.isRequired
+  },
+  getDefaultProps: function() {
+    return {
+      showToday: true
+    };
+  },
+  renderDays: function() {
+    var cells, classes, days, html, i, month, nextMonth, prevMonth, row, year, _i, _len, _ref;
+    year = this.props.viewDate.year();
+    month = this.props.viewDate.month();
+    prevMonth = this.props.viewDate.clone().subtract(1, "months");
+    days = prevMonth.daysInMonth();
+    prevMonth.date(days).startOf('week');
+    nextMonth = moment(prevMonth).clone().add(42, "d");
+    html = [];
+    cells = [];
+    while (prevMonth.isBefore(nextMonth)) {
+      classes = {
+        day: true
+      };
+      if (prevMonth.year() < year || (prevMonth.year() === year && prevMonth.month() < month)) {
+        classes.old = true;
+      } else if (prevMonth.year() > year || (prevMonth.year() === year && prevMonth.month() > month)) {
+        classes.new = true;
+      }
+      if (prevMonth.isSame(moment({
+        y: this.props.selectedDate.year(),
+        M: this.props.selectedDate.month(),
+        d: this.props.selectedDate.date()
+      }))) {
+        classes.active = true;
+      }
+      if (this.props.showToday) {
+        if (prevMonth.isSame(moment(), 'day')) {
+          classes.today = true;
+        }
+      }
+      if (this.props.daysOfWeekDisabled) {
+        _ref = this.props.daysOfWeekDisabled;
+        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
+          i = _ref[_i];
+          if (prevMonth.day() === this.props.daysOfWeekDisabled[i]) {
+            classes.disabled = true;
+            break;
+          }
+        }
+      }
+      cells.push(<td key={prevMonth.month() + '-' + prevMonth.date()} className={React.addons.classSet(classes)} onClick={this.props.setSelectedDate}>{prevMonth.date()}</td>);
+      if (prevMonth.weekday() === moment().endOf('week').weekday()) {
+        row = <tr key={prevMonth.month() + '-' + prevMonth.date()}>{cells}</tr>;
+        html.push(row);
+        cells = [];
+      }
+      prevMonth.add(1, "d");
+    }
+    return html;
+  },
+  render: function() {
+    return (
+    <div className="datepicker-days" style={{display: 'block'}}>
+        <table className="table-condensed">
+          <thead>
+            <tr>
+              <th className="prev" onClick={this.props.subtractMonth}>‹</th>
+
+              <th className="switch" colSpan="5" onClick={this.props.showMonths}>{moment.months()[this.props.viewDate.month()]} {this.props.viewDate.year()}</th>
+
+              <th className="next" onClick={this.props.addMonth}>›</th>
+            </tr>
+
+            <tr>
+              <th className="dow">Su</th>
+
+              <th className="dow">Mo</th>
+
+              <th className="dow">Tu</th>
+
+              <th className="dow">We</th>
+
+              <th className="dow">Th</th>
+
+              <th className="dow">Fr</th>
+
+              <th className="dow">Sa</th>
+            </tr>
+          </thead>
+
+          <tbody>
+            {this.renderDays()}
+          </tbody>
+        </table>
+      </div>
+    );
+  }
+});
+
+module.exports = DateTimePickerDays;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerHours.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerHours.jsx
new file mode 100644
index 0000000000..038b2559ca
--- /dev/null
+++ b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerHours.jsx
@@ -0,0 +1,82 @@
+
+/** @jsx React.DOM */
+var DateTimePickerHours, React;
+
+React = require('react');
+
+DateTimePickerHours = React.createClass({
+  propTypes: {
+    setSelectedHour: React.PropTypes.func.isRequired
+  },
+  render: function() {
+    return (
+      <div className="timepicker-hours" data-action="selectHour" style={{display: 'block'}}>
+        <table className="table-condensed">
+          <tbody>
+            <tr>
+              <td className="hour" onClick={this.props.setSelectedHour}>01</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>02</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>03</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>04</td>
+            </tr>
+
+            <tr>
+              <td className="hour" onClick={this.props.setSelectedHour}>05</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>06</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>07</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>08</td>
+            </tr>
+
+            <tr>
+              <td className="hour" onClick={this.props.setSelectedHour}>09</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>10</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>11</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>12</td>
+            </tr>
+
+            <tr>
+              <td className="hour" onClick={this.props.setSelectedHour}>13</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>14</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>15</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>16</td>
+            </tr>
+
+            <tr>
+              <td className="hour" onClick={this.props.setSelectedHour}>17</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>18</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>19</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>20</td>
+            </tr>
+
+            <tr>
+              <td className="hour" onClick={this.props.setSelectedHour}>21</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>22</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>23</td>
+
+              <td className="hour" onClick={this.props.setSelectedHour}>24</td>
+            </tr>
+          </tbody>
+        </table>
+      </div>
+    );
+  }
+});
+
+module.exports = DateTimePickerHours;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerMinutes.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerMinutes.jsx
new file mode 100644
index 0000000000..82c249e7a4
--- /dev/null
+++ b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerMinutes.jsx
@@ -0,0 +1,52 @@
+
+/** @jsx React.DOM */
+var DateTimePickerMinutes, React;
+
+React = require('react');
+
+DateTimePickerMinutes = React.createClass({
+  propTypes: {
+    setSelectedMinute: React.PropTypes.func.isRequired
+  },
+  render: function() {
+    return (
+      <div className="timepicker-minutes" data-action="selectMinute" style={{display: 'block'}}>
+        <table className="table-condensed">
+          <tbody>
+            <tr>
+              <td className="minute" onClick={this.props.setSelectedMinute}>00</td>
+
+              <td className="minute" onClick={this.props.setSelectedMinute}>05</td>
+
+              <td className="minute" onClick={this.props.setSelectedMinute}>10</td>
+
+              <td className="minute" onClick={this.props.setSelectedMinute}>15</td>
+            </tr>
+
+            <tr>
+              <td className="minute" onClick={this.props.setSelectedMinute}>20</td>
+
+              <td className="minute" onClick={this.props.setSelectedMinute}>25</td>
+
+              <td className="minute" onClick={this.props.setSelectedMinute}>30</td>
+
+              <td className="minute" onClick={this.props.setSelectedMinute}>35</td>
+            </tr>
+
+            <tr>
+              <td className="minute" onClick={this.props.setSelectedMinute}>40</td>
+
+              <td className="minute" onClick={this.props.setSelectedMinute}>45</td>
+
+              <td className="minute" onClick={this.props.setSelectedMinute}>50</td>
+
+              <td className="minute" onClick={this.props.setSelectedMinute}>55</td>
+            </tr>
+          </tbody>
+        </table>
+      </div>
+    );
+  }
+});
+
+module.exports = DateTimePickerMinutes;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerMonths.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerMonths.jsx
new file mode 100644
index 0000000000..30d5f12d7a
--- /dev/null
+++ b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerMonths.jsx
@@ -0,0 +1,59 @@
+
+/** @jsx React.DOM */
+var DateTimePickerMonths, React, moment;
+
+React = require('react');
+
+moment = require('moment');
+
+DateTimePickerMonths = React.createClass({
+  propTypes: {
+    subtractYear: React.PropTypes.func.isRequired,
+    addYear: React.PropTypes.func.isRequired,
+    viewDate: React.PropTypes.object.isRequired,
+    selectedDate: React.PropTypes.object.isRequired,
+    showYears: React.PropTypes.func.isRequired,
+    setViewMonth: React.PropTypes.func.isRequired
+  },
+  renderMonths: function() {
+    var classes, i, month, months, monthsShort;
+    month = this.props.selectedDate.month();
+    monthsShort = moment.monthsShort();
+    i = 0;
+    months = [];
+    while (i < 12) {
+      classes = {
+        month: true,
+        'active': i === month && this.props.viewDate.year() === this.props.selectedDate.year()
+      };
+      months.push(<span className={React.addons.classSet(classes)} onClick={this.props.setViewMonth}>{monthsShort[i]}</span>);
+      i++;
+    }
+    return months;
+  },
+  render: function() {
+    return (
+    <div className="datepicker-months" style={{display: 'block'}}>
+          <table className="table-condensed">
+            <thead>
+              <tr>
+                <th className="prev" onClick={this.props.subtractYear}>‹</th>
+
+                <th className="switch" colSpan="5" onClick={this.props.showYears}>{this.props.viewDate.year()}</th>
+
+                <th className="next" onClick={this.props.addYear}>›</th>
+              </tr>
+            </thead>
+
+            <tbody>
+              <tr>
+                <td colSpan="7">{this.renderMonths()}</td>
+              </tr>
+            </tbody>
+          </table>
+        </div>
+    );
+  }
+});
+
+module.exports = DateTimePickerMonths;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerTime.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerTime.jsx
new file mode 100644
index 0000000000..41279b63b0
--- /dev/null
+++ b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerTime.jsx
@@ -0,0 +1,119 @@
+
+/** @jsx React.DOM */
+var DateTimePickerHours, DateTimePickerMinutes, DateTimePickerTime, Glyphicon, React;
+
+React = require('react');
+
+DateTimePickerMinutes = require('./DateTimePickerMinutes');
+
+DateTimePickerHours = require('./DateTimePickerHours');
+
+Glyphicon = require('react-bootstrap/Glyphicon');
+
+DateTimePickerTime = React.createClass({
+  propTypes: {
+    setSelectedHour: React.PropTypes.func.isRequired,
+    setSelectedMinute: React.PropTypes.func.isRequired,
+    subtractHour: React.PropTypes.func.isRequired,
+    addHour: React.PropTypes.func.isRequired,
+    subtractMinute: React.PropTypes.func.isRequired,
+    addMinute: React.PropTypes.func.isRequired,
+    viewDate: React.PropTypes.object.isRequired,
+    selectedDate: React.PropTypes.object.isRequired,
+    togglePeriod: React.PropTypes.func.isRequired
+  },
+  getInitialState: function() {
+    return {
+      minutesDisplayed: false,
+      hoursDisplayed: false
+    };
+  },
+  showMinutes: function() {
+    return this.setState({
+      minutesDisplayed: true
+    });
+  },
+  showHours: function() {
+    return this.setState({
+      hoursDisplayed: true
+    });
+  },
+  renderMinutes: function() {
+    if (this.state.minutesDisplayed) {
+      return (<DateTimePickerMinutes
+            setSelectedMinute={this.props.setSelectedMinute}
+       />
+       );
+    } else {
+      return null;
+    }
+  },
+  renderHours: function() {
+    if (this.state.hoursDisplayed) {
+      return (<DateTimePickerHours
+            setSelectedHour={this.props.setSelectedHour}
+      />
+      );
+    } else {
+      return null;
+    }
+  },
+  renderPicker: function() {
+    if (!this.state.minutesDisplayed && !this.state.hoursDisplayed) {
+      return (
+      <div className="timepicker-picker">
+        <table className="table-condensed">
+          <tbody>
+            <tr>
+              <td><a className="btn" onClick={this.props.addHour}><Glyphicon glyph="chevron-up" /></a></td>
+
+              <td className="separator"></td>
+
+              <td><a className="btn" onClick={this.props.addMinute}><Glyphicon glyph="chevron-up" /></a></td>
+
+              <td className="separator"></td>
+            </tr>
+
+            <tr>
+              <td><span className="timepicker-hour" onClick={this.showHours}>{this.props.selectedDate.format('h')}</span></td>
+
+              <td className="separator">:</td>
+
+              <td><span className="timepicker-minute" onClick={this.showMinutes}>{this.props.selectedDate.format('mm')}</span></td>
+
+              <td className="separator"></td>
+
+              <td><button className="btn btn-primary" onClick={this.props.togglePeriod} type="button">{this.props.selectedDate.format('A')}</button></td>
+            </tr>
+
+            <tr>
+              <td><a className="btn" onClick={this.props.subtractHour}><Glyphicon glyph="chevron-down" /></a></td>
+
+              <td className="separator"></td>
+
+              <td><a className="btn" onClick={this.props.subtractMinute}><Glyphicon glyph="chevron-down" /></a></td>
+
+              <td className="separator"></td>
+            </tr>
+          </tbody>
+        </table>
+      </div>
+      );
+    } else {
+      return '';
+    }
+  },
+  render: function() {
+    return (
+        <div className="timepicker">
+          {this.renderPicker()}
+
+          {this.renderHours()}
+
+          {this.renderMinutes()}
+        </div>
+    );
+  }
+});
+
+module.exports = DateTimePickerTime;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerYears.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerYears.jsx
new file mode 100644
index 0000000000..33b787a3c0
--- /dev/null
+++ b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerYears.jsx
@@ -0,0 +1,60 @@
+
+/** @jsx React.DOM */
+var DateTimePickerYears, React;
+
+React = require('react');
+
+DateTimePickerYears = React.createClass({
+  propTypes: {
+    subtractDecade: React.PropTypes.func.isRequired,
+    addDecade: React.PropTypes.func.isRequired,
+    viewDate: React.PropTypes.object.isRequired,
+    selectedDate: React.PropTypes.object.isRequired,
+    setViewYear: React.PropTypes.func.isRequired
+  },
+  renderYears: function() {
+    var classes, i, year, years;
+    years = [];
+    year = parseInt(this.props.viewDate.year() / 10, 10) * 10;
+    year--;
+    i = -1;
+    while (i < 11) {
+      classes = {
+        year: true,
+        old: i === -1 | i === 10,
+        active: this.props.selectedDate.year() === year
+      };
+      years.push(<span className={React.addons.classSet(classes)} onClick={this.props.setViewYear}>{year}</span>);
+      year++;
+      i++;
+    }
+    return years;
+  },
+  render: function() {
+    var year;
+    year = parseInt(this.props.viewDate.year() / 10, 10) * 10;
+    return (
+      <div className="datepicker-years" style={{display: "block"}}>
+        <table className="table-condensed">
+          <thead>
+            <tr>
+              <th className="prev" onClick={this.props.subtractDecade}>‹</th>
+
+              <th className="switch" colSpan="5">{year} - {year+9}</th>
+
+              <th className="next" onClick={this.props.addDecade}>›</th>
+            </tr>
+          </thead>
+
+          <tbody>
+            <tr>
+              <td colSpan="7">{this.renderYears()}</td>
+            </tr>
+          </tbody>
+        </table>
+      </div>
+    );
+  }
+});
+
+module.exports = DateTimePickerYears;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/LICENSE b/src/sentry/static/sentry/app/modules/datepicker/LICENSE
new file mode 100644
index 0000000000..c5ce37de3e
--- /dev/null
+++ b/src/sentry/static/sentry/app/modules/datepicker/LICENSE
@@ -0,0 +1,22 @@
+The MIT License (MIT)
+
+Copyright (c) 2015 Sentry Team
+Copyright (c) 2014 Quri, Loïc CHOLLIER
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff --git a/src/sentry/static/sentry/app/modules/datepicker/README.md b/src/sentry/static/sentry/app/modules/datepicker/README.md
new file mode 100644
index 0000000000..1af684525e
--- /dev/null
+++ b/src/sentry/static/sentry/app/modules/datepicker/README.md
@@ -0,0 +1,13 @@
+react-bootstrap-datetimepicker
+===============================
+
+This project is a port of https://github.com/Eonasdan/bootstrap-datetimepicker for React.js
+
+Contributions
+===============================
+There's still plenty of features missing compared to the original date time picker, hence contributions would be highly appreciated.
+
+Aknowledgments
+===============================
+
+I took https://github.com/stevoland/react-bootstrap as a reference to get the build actually building.
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/modules/datepicker/test/DateTimePickerHoursSpec.jsx b/src/sentry/static/sentry/app/modules/datepicker/test/DateTimePickerHoursSpec.jsx
new file mode 100644
index 0000000000..f56f00d2cd
--- /dev/null
+++ b/src/sentry/static/sentry/app/modules/datepicker/test/DateTimePickerHoursSpec.jsx
@@ -0,0 +1,19 @@
+
+/** @jsx React.DOM */
+
+/* global describe, beforeEach, afterEach, it, assert */
+var DateTimePickerHours, React, ReactTestUtils;
+
+React = require('react');
+
+ReactTestUtils = require('react/lib/ReactTestUtils');
+
+DateTimePickerHours = require('../cjs/DateTimePickerHours');
+
+describe('DateTimePickerHours', function() {
+  return it('Should have a timepicker-hours class', function() {
+    var instance;
+    instance = ReactTestUtils.renderIntoDocument(DateTimePickerHours());
+    return assert.ok(instance.getDOMNode().className.match(/\btimepicker-hours\b/));
+  });
+});
diff --git a/webpack.config.js b/webpack.config.js
index e642e3e7c3..55569bcbd8 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -15,7 +15,7 @@ function vendorFile(name) {
 module.exports = {
   entry: {
     "app": file("app/main.jsx"),
-    "vendor": ["react", "react-bootstrap", "reflux", "jquery", "moment"]
+    "vendor": ["react/addons", "react-bootstrap", "reflux", "jquery", "moment"]
   },
   module: {
     loaders: [
