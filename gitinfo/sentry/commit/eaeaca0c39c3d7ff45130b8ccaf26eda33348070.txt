commit eaeaca0c39c3d7ff45130b8ccaf26eda33348070
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Thu Oct 25 14:00:51 2018 +0200

    ref: Remove usage of raven and LogHelper class (#10255)

diff --git a/src/sentry/api/authentication.py b/src/sentry/api/authentication.py
index 12a485aaa3..74d1cbf77f 100644
--- a/src/sentry/api/authentication.py
+++ b/src/sentry/api/authentication.py
@@ -5,9 +5,9 @@ from django.utils.crypto import constant_time_compare
 from rest_framework.authentication import (BasicAuthentication, get_authorization_header)
 from rest_framework.exceptions import AuthenticationFailed
 
-from sentry.app import raven
 from sentry.models import ApiApplication, ApiKey, ApiToken, Relay
 from sentry.relay.utils import get_header_relay_id, get_header_relay_signature
+from sentry.utils.sdk import configure_scope
 
 import semaphore
 
@@ -28,9 +28,8 @@ class RelayAuthentication(BasicAuthentication):
         return self.authenticate_credentials(relay_id, relay_sig, request)
 
     def authenticate_credentials(self, relay_id, relay_sig, request):
-        raven.tags_context({
-            'relay_id': relay_id,
-        })
+        with configure_scope() as scope:
+            scope.set_tag('relay_id', relay_id)
 
         try:
             relay = Relay.objects.get(relay_id=relay_id)
@@ -63,9 +62,8 @@ class ApiKeyAuthentication(QuietBasicAuthentication):
         if not key.is_active:
             raise AuthenticationFailed('Key is disabled')
 
-        raven.tags_context({
-            'api_key': key.id,
-        })
+        with configure_scope() as scope:
+            scope.set_tag("api_key", key.id)
 
         return (AnonymousUser(), key)
 
@@ -139,8 +137,7 @@ class TokenAuthentication(QuietBasicAuthentication):
         if token.application and not token.application.is_active:
             raise AuthenticationFailed('UserApplication inactive or deleted')
 
-        raven.tags_context({
-            'api_token': token.id,
-        })
+        with configure_scope() as scope:
+            scope.set_tag("api_token", token.id)
 
         return (token.user, token)
diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 7f62046d39..c9089b490a 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -19,13 +19,13 @@ from rest_framework.views import APIView
 from simplejson import JSONDecodeError
 
 from sentry import tsdb
-from sentry.app import raven
 from sentry.auth import access
 from sentry.models import Environment
 from sentry.utils.cursors import Cursor
 from sentry.utils.dates import to_datetime
 from sentry.utils.http import absolute_uri, is_valid_origin
 from sentry.utils.audit import create_audit_entry
+from sentry.utils.sdk import capture_exception
 from sentry.utils import json
 
 
@@ -92,7 +92,7 @@ class Endpoint(APIView):
             import sys
             import traceback
             sys.stderr.write(traceback.format_exc())
-            event_id = raven.captureException()
+            event_id = capture_exception()
             context = {
                 'detail': 'Internal Error',
                 'errorId': event_id,
diff --git a/src/sentry/api/bases/group.py b/src/sentry/api/bases/group.py
index 90df3fdcd2..2ce4d05bbe 100644
--- a/src/sentry/api/bases/group.py
+++ b/src/sentry/api/bases/group.py
@@ -5,7 +5,7 @@ import logging
 from sentry.api.base import Endpoint
 from sentry.api.bases.project import ProjectPermission
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.app import raven
+from sentry.utils.sdk import configure_scope
 from sentry.models import Group, GroupStatus, get_group_with_redirect
 
 logger = logging.getLogger(__name__)
@@ -51,12 +51,9 @@ class GroupEndpoint(Endpoint):
 
         self.check_object_permissions(request, group)
 
-        raven.tags_context(
-            {
-                'project': group.project_id,
-                'organization': group.project.organization_id,
-            }
-        )
+        with configure_scope() as scope:
+            scope.set_tag("project", group.project_id)
+            scope.set_tag("organization", group.project.organization_id)
 
         if group.status in EXCLUDED_STATUSES:
             raise ResourceDoesNotExist
diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index 304dd90264..9b1ed7b4cf 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from sentry.api.base import Endpoint, logger
 from sentry.api.exceptions import ResourceDoesNotExist, SsoRequired, TwoFactorRequired
 from sentry.api.permissions import ScopedPermission
-from sentry.app import raven
+from sentry.utils.sdk import configure_scope
 from sentry.auth import access
 from sentry.auth.superuser import is_active_superuser
 from sentry.models import (
@@ -152,9 +152,9 @@ class OrganizationEndpoint(Endpoint):
 
         self.check_object_permissions(request, organization)
 
-        raven.tags_context({
-            'organization': organization.id,
-        })
+        with configure_scope() as scope:
+            scope.set_tag("organization", organization.id)
+
         request._request.organization = organization
 
         # Track the 'active' organization when the request came from
diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
index 3a2afc8024..14a3d6e168 100644
--- a/src/sentry/api/bases/project.py
+++ b/src/sentry/api/bases/project.py
@@ -5,9 +5,9 @@ from rest_framework.response import Response
 from sentry import roles
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist, ProjectMoved
-from sentry.app import raven
 from sentry.auth.superuser import is_active_superuser
 from sentry.models import OrganizationMember, Project, ProjectStatus, ProjectRedirect
+from sentry.utils.sdk import configure_scope
 
 from .organization import OrganizationPermission
 from .team import has_team_permission
@@ -136,10 +136,9 @@ class ProjectEndpoint(Endpoint):
 
         self.check_object_permissions(request, project)
 
-        raven.tags_context({
-            'project': project.id,
-            'organization': project.organization_id,
-        })
+        with configure_scope() as scope:
+            scope.set_tag("project", project.id)
+            scope.set_tag("organization", project.organization_id)
 
         request._request.organization = project.organization
 
diff --git a/src/sentry/api/bases/sentryapps.py b/src/sentry/api/bases/sentryapps.py
index 7ef8e0c8f8..c1df49e7bc 100644
--- a/src/sentry/api/bases/sentryapps.py
+++ b/src/sentry/api/bases/sentryapps.py
@@ -3,8 +3,8 @@ from __future__ import absolute_import
 from sentry.api.base import Endpoint, SessionAuthentication
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import ScopedPermission
-from sentry.app import raven
 from sentry.models import SentryApp, SentryAppInstallation
+from sentry.utils.sdk import configure_scope
 
 
 class SentryAppDetailsPermission(ScopedPermission):
@@ -24,9 +24,8 @@ class SentryAppDetailsEndpoint(Endpoint):
 
         self.check_object_permissions(request, sentry_app)
 
-        raven.tags_context({
-            'sentry_app': sentry_app.id,
-        })
+        with configure_scope() as scope:
+            scope.set_tag("sentry_app", sentry_app.id)
 
         kwargs['sentry_app'] = sentry_app
         return (args, kwargs)
@@ -51,9 +50,8 @@ class SentryAppInstallationDetailsEndpoint(Endpoint):
 
         self.check_object_permissions(request, install)
 
-        raven.tags_context({
-            'sentry_app_installation': install.id,
-        })
+        with configure_scope() as scope:
+            scope.set_tag("sentry_app_installation", install.id)
 
         kwargs['install'] = install
         return (args, kwargs)
diff --git a/src/sentry/api/bases/team.py b/src/sentry/api/bases/team.py
index ae8503ca43..0c157ebb7d 100644
--- a/src/sentry/api/bases/team.py
+++ b/src/sentry/api/bases/team.py
@@ -2,8 +2,8 @@ from __future__ import absolute_import
 
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.app import raven
 from sentry.models import Team, TeamStatus
+from sentry.utils.sdk import configure_scope
 
 from .organization import OrganizationPermission
 
@@ -47,9 +47,8 @@ class TeamEndpoint(Endpoint):
 
         self.check_object_permissions(request, team)
 
-        raven.tags_context({
-            'organization': team.organization_id,
-        })
+        with configure_scope() as scope:
+            scope.set_tag("organization", team.organization_id)
 
         request._request.organization = team.organization
 
diff --git a/src/sentry/api/endpoints/organization_repositories.py b/src/sentry/api/endpoints/organization_repositories.py
index 5cda354a44..ae73448835 100644
--- a/src/sentry/api/endpoints/organization_repositories.py
+++ b/src/sentry/api/endpoints/organization_repositories.py
@@ -7,10 +7,10 @@ from sentry.api.base import DocSection
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
-from sentry.app import raven
 from sentry.constants import ObjectStatus
 from sentry.models import Integration, Repository
 from sentry.plugins import bindings
+from sentry.utils.sdk import capture_exception
 
 
 class OrganizationRepositoriesEndpoint(OrganizationEndpoint):
@@ -69,7 +69,7 @@ class OrganizationRepositoriesEndpoint(OrganizationEndpoint):
                     repos.extend(i.get_installation(organization.id)
                                   .get_unmigratable_repositories())
                 except Exception:
-                    raven.captureException()
+                    capture_exception()
                     # Don't rely on the Integration's API being available. If
                     # it's not, the page should still render.
                     continue
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index f58a6cc993..e3a95c2f16 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -31,6 +31,7 @@ from sentry.utils import json
 from sentry.utils.auth import parse_auth_header
 from sentry.utils.http import origin_from_request
 from sentry.utils.strings import decompress
+from sentry.utils.sdk import configure_scope
 from sentry.utils.canonical import CANONICAL_TYPES
 
 
@@ -94,57 +95,16 @@ class ClientContext(object):
     def bind_project(self, project):
         self.project = project
         self.project_id = project.id
+        with configure_scope() as scope:
+            scope.set_tag("project", project.id)
 
     def bind_auth(self, auth):
         self.agent = auth.client
         self.version = auth.version
 
-    def get_tags_context(self):
-        return {'project': self.project_id, 'agent': self.agent, 'protocol': self.version}
-
-
-class ClientLogHelper(object):
-    # XXX(markus): Remove. This should all be doable via scopes
-    def __init__(self, context):
-        self.context = context
-
-    def debug(self, *a, **k):
-        logger.debug(*a, **self._metadata(**k))
-
-    def info(self, *a, **k):
-        logger.info(*a, **self._metadata(**k))
-
-    def warning(self, *a, **k):
-        logger.warning(*a, **self._metadata(**k))
-
-    def error(self, *a, **k):
-        logger.error(*a, **self._metadata(**k))
-
-    def _metadata(self, tags=None, extra=None, **kwargs):
-        if not extra:
-            extra = {}
-        if not tags:
-            tags = {}
-
-        context = self.context
-
-        project = context.project
-        if project:
-            project_label = '%s/%s' % (project.organization.slug, project.slug)
-        else:
-            project_label = 'id=%s' % (context.project_id, )
-
-        tags.update(context.get_tags_context())
-        tags['project'] = project_label
-
-        extra['tags'] = tags
-        extra['agent'] = context.agent
-        extra['protocol'] = context.version
-        extra['project'] = project_label
-
-        kwargs['extra'] = extra
-
-        return kwargs
+        with configure_scope() as scope:
+            scope.set_tag("agent", self.agent)
+            scope.set_tag("protocol", self.version)
 
 
 class ClientApiHelper(object):
@@ -155,7 +115,6 @@ class ClientApiHelper(object):
             project_id=project_id,
             ip_address=ip_address,
         )
-        self.log = ClientLogHelper(self.context)
 
     def auth_from_request(self, request):
         result = {k: request.GET[k] for k in six.iterkeys(
diff --git a/src/sentry/tasks/assemble.py b/src/sentry/tasks/assemble.py
index 81c5152a95..48680574d9 100644
--- a/src/sentry/tasks/assemble.py
+++ b/src/sentry/tasks/assemble.py
@@ -4,6 +4,7 @@ import os
 import logging
 
 from sentry.tasks.base import instrumented_task
+from sentry.utils.sdk import configure_scope
 
 logger = logging.getLogger(__name__)
 
@@ -14,6 +15,9 @@ def assemble_dif(project_id, name, checksum, chunks, **kwargs):
         ProjectDebugFile, set_assemble_status, BadDif
     from sentry.reprocessing import bump_reprocessing_revision
 
+    with configure_scope() as scope:
+        scope.set_tag("project", project_id)
+
     project = Project.objects.filter(id=project_id).get()
     set_assemble_status(project, checksum, ChunkFileState.ASSEMBLING)
 
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 0c8c24fad6..3fdf2fbd34 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -14,7 +14,6 @@ import time
 from django.conf import settings
 
 from sentry import features
-from sentry.app import raven
 from sentry.utils.cache import cache
 from sentry.plugins import plugins
 from sentry.signals import event_processed
@@ -22,6 +21,7 @@ from sentry.tasks.base import instrumented_task
 from sentry.utils import metrics
 from sentry.utils.redis import redis_clusters
 from sentry.utils.safe import safe_execute
+from sentry.utils.sdk import configure_scope
 
 logger = logging.getLogger('sentry')
 
@@ -96,9 +96,8 @@ def post_process_group(event, is_new, is_regression, is_sample, is_new_group_env
     event.group_id = event.group.id
 
     project_id = event.group.project_id
-    raven.tags_context({
-        'project': project_id,
-    })
+    with configure_scope() as scope:
+        scope.set_tag("project", project_id)
 
     # Re-bind Project since we're pickling the whole Event object
     # which may contain a stale Project.
@@ -181,9 +180,9 @@ def plugin_post_process_group(plugin_slug, event, **kwargs):
     """
     Fires post processing hooks for a group.
     """
-    raven.tags_context({
-        'project': event.project_id,
-    })
+    with configure_scope() as scope:
+        scope.set_tag("project", event.project_id)
+
     plugin = plugins.get(plugin_slug)
     safe_execute(plugin.post_process, event=event, group=event.group, **kwargs)
 
@@ -198,9 +197,8 @@ def index_event_tags(organization_id, project_id, event_id, tags,
                      group_id, environment_id, date_added=None, **kwargs):
     from sentry import tagstore
 
-    raven.tags_context({
-        'project': project_id,
-    })
+    with configure_scope() as scope:
+        scope.set_tag("project", project_id)
 
     create_event_tags_kwargs = {}
     if date_added is not None:
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index 05a7023414..a47ceda850 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -16,7 +16,6 @@ from time import time
 from django.utils import timezone
 
 from sentry import features, reprocessing
-from sentry.app import raven
 from sentry.attachments import attachment_cache
 from sentry.cache import default_cache
 from sentry.tasks.base import instrumented_task
@@ -26,6 +25,7 @@ from sentry.stacktraces import process_stacktraces, \
     should_process_for_stacktraces
 from sentry.utils.canonical import CanonicalKeyDict, CANONICAL_TYPES
 from sentry.utils.dates import to_datetime
+from sentry.utils.sdk import configure_scope
 from sentry.models import EventAttachment, File, ProjectOption, Activity, Project
 
 error_logger = logging.getLogger('sentry.errors.events')
@@ -70,9 +70,9 @@ def _do_preprocess_event(cache_key, data, start_time, event_id, process_event):
 
     data = CanonicalKeyDict(data)
     project = data['project']
-    raven.tags_context({
-        'project': project,
-    })
+
+    with configure_scope() as scope:
+        scope.set_tag("project", project)
 
     if should_process(data):
         process_event.delay(cache_key=cache_key, start_time=start_time, event_id=event_id)
@@ -124,9 +124,10 @@ def _do_process_event(cache_key, start_time, event_id, process_task):
 
     data = CanonicalKeyDict(data)
     project = data['project']
-    raven.tags_context({
-        'project': project,
-    })
+
+    with configure_scope() as scope:
+        scope.set_tag("project", project)
+
     has_changed = False
 
     # Fetch the reprocessing revision
@@ -368,9 +369,8 @@ def save_event(cache_key=None, data=None, start_time=None, event_id=None,
         metrics.incr('events.failed', tags={'reason': 'cache', 'stage': 'post'})
         return
 
-    raven.tags_context({
-        'project': project_id,
-    })
+    with configure_scope() as scope:
+        scope.set_tag("project", project_id)
 
     try:
         manager = EventManager(data)
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 5ae0ea9ecd..1b65dd8d33 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -29,10 +29,9 @@ from querystring_parser import parser
 from symbolic import ProcessMinidumpError
 
 from sentry import features, quotas, tsdb, options
-from sentry.app import raven
 from sentry.attachments import CachedAttachment
 from sentry.coreapi import (
-    APIError, APIForbidden, APIRateLimited, ClientApiHelper, SecurityApiHelper, MinidumpApiHelper, safely_load_json_string,
+    APIError, APIForbidden, APIRateLimited, ClientApiHelper, SecurityApiHelper, MinidumpApiHelper, safely_load_json_string, logger as api_logger
 )
 from sentry.event_manager import EventManager
 from sentry.interfaces import schemas
@@ -240,7 +239,6 @@ class APIView(BaseView):
         project = self._get_project_from_id(project_id)
         if project:
             helper.context.bind_project(project)
-            raven.tags_context(helper.context.get_tags_context())
 
         if origin is not None:
             # This check is specific for clients who need CORS support
@@ -267,7 +265,6 @@ class APIView(BaseView):
                 raise APIError('Two different projects were specified')
 
             helper.context.bind_auth(auth)
-            raven.tags_context(helper.context.get_tags_context())
 
             # Explicitly bind Organization so we don't implicitly query it later
             # this just allows us to comfortably assure that `project.organization` is safe.
@@ -441,8 +438,7 @@ class StoreView(APIView):
         # it cannot cascade
         if rate_limit is None or rate_limit.is_limited:
             if rate_limit is None:
-                helper.log.debug(
-                    'Dropped event due to error with rate limiter')
+                api_logger.debug('Dropped event due to error with rate limiter')
             tsdb.incr_multi(
                 [
                     (tsdb.models.project_total_received, project.id),
@@ -534,7 +530,7 @@ class StoreView(APIView):
 
         cache.set(cache_key, '', 60 * 5)
 
-        helper.log.debug('New event received (%s)', event_id)
+        api_logger.debug('New event received (%s)', event_id)
 
         event_accepted.send_robust(
             ip=remote_addr,
@@ -571,7 +567,6 @@ class MinidumpView(StoreView):
 
         project = self._get_project_from_id(project_id)
         helper.context.bind_project(project)
-        raven.tags_context(helper.context.get_tags_context())
 
         # This is yanking the auth from the querystring since it's not
         # in the POST body. This means we expect a `sentry_key` and
@@ -583,7 +578,6 @@ class MinidumpView(StoreView):
             raise APIError('Two different projects were specified')
 
         helper.context.bind_auth(auth)
-        raven.tags_context(helper.context.get_tags_context())
 
         return super(APIView, self).dispatch(
             request=request, project=project, auth=auth, helper=helper, key=key, **kwargs
@@ -745,7 +739,6 @@ class SecurityReportView(StoreView):
 
         project = self._get_project_from_id(project_id)
         helper.context.bind_project(project)
-        raven.tags_context(helper.context.get_tags_context())
 
         # This is yanking the auth from the querystring since it's not
         # in the POST body. This means we expect a `sentry_key` and
@@ -757,7 +750,6 @@ class SecurityReportView(StoreView):
             raise APIError('Two different projects were specified')
 
         helper.context.bind_auth(auth)
-        raven.tags_context(helper.context.get_tags_context())
 
         return super(APIView, self).dispatch(
             request=request, project=project, auth=auth, helper=helper, key=key, **kwargs
diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
index ecae79c07c..bdf155ec3c 100644
--- a/src/sentry/web/frontend/auth_login.py
+++ b/src/sentry/web/frontend/auth_login.py
@@ -9,7 +9,6 @@ from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 from django.views.decorators.cache import never_cache
 
-from sentry.app import raven
 from sentry.auth.superuser import is_active_superuser
 from sentry.constants import WARN_SESSION_EXPIRED
 from sentry.http import get_server_hostname
@@ -17,6 +16,7 @@ from sentry.models import AuthProvider, Organization, OrganizationStatus
 from sentry.web.forms.accounts import AuthenticationForm, RegistrationForm
 from sentry.web.frontend.base import BaseView
 from sentry.utils import auth
+from sentry.utils.sdk import capture_exception
 
 ERR_NO_SSO = _(
     'The organization does not exist or does not have Single Sign-On enabled.')
@@ -41,7 +41,7 @@ class AdditionalContext(object):
                 result = cb(request)
                 context.update(result)
             except Exception:
-                raven.captureException()
+                capture_exception()
         return context
 
 
diff --git a/src/sentry/web/frontend/debug/debug_trigger_error.py b/src/sentry/web/frontend/debug/debug_trigger_error.py
index dfe4e5695c..c156bfa878 100644
--- a/src/sentry/web/frontend/debug/debug_trigger_error.py
+++ b/src/sentry/web/frontend/debug/debug_trigger_error.py
@@ -2,8 +2,8 @@ from __future__ import absolute_import
 
 from django.views.generic import View
 
-from sentry.app import raven
 from sentry.web.frontend.error_500 import Error500View
+from sentry.utils.sdk import capture_exception
 
 
 class DebugTriggerErrorView(View):
@@ -11,6 +11,6 @@ class DebugTriggerErrorView(View):
         try:
             raise ValueError('An example error')
         except Exception:
-            raven.captureException()
+            capture_exception()
 
         return Error500View.as_view()(request)
