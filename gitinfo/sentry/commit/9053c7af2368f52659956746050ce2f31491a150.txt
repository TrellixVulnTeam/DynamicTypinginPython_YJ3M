commit 9053c7af2368f52659956746050ce2f31491a150
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Mon Nov 27 16:41:27 2017 -0600

    feat(tags): New tagstore v2 backend models (#6427)

diff --git a/src/sentry/tagstore/v2/__init__.py b/src/sentry/tagstore/v2/__init__.py
new file mode 100644
index 0000000000..77b9061294
--- /dev/null
+++ b/src/sentry/tagstore/v2/__init__.py
@@ -0,0 +1,12 @@
+"""
+sentry.tagstore.v2
+~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+from .backend import TagStorage  # NOQA
+# from .receivers import *  # NOQA
+# from .tasks import *  # NOQA
diff --git a/src/sentry/tagstore/v2/backend.py b/src/sentry/tagstore/v2/backend.py
new file mode 100644
index 0000000000..fdf46787c1
--- /dev/null
+++ b/src/sentry/tagstore/v2/backend.py
@@ -0,0 +1,15 @@
+"""
+sentry.tagstore.v2.backend
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from sentry.tagstore.base import TagStorage
+
+
+class TagStorage(TagStorage):
+    pass
diff --git a/src/sentry/tagstore/v2/models/__init__.py b/src/sentry/tagstore/v2/models/__init__.py
new file mode 100644
index 0000000000..57b27c5cb3
--- /dev/null
+++ b/src/sentry/tagstore/v2/models/__init__.py
@@ -0,0 +1,13 @@
+"""
+sentry.tagstore.v2.models
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/tagstore/v2/models/eventtag.py b/src/sentry/tagstore/v2/models/eventtag.py
new file mode 100644
index 0000000000..9c457755ae
--- /dev/null
+++ b/src/sentry/tagstore/v2/models/eventtag.py
@@ -0,0 +1,36 @@
+"""
+sentry.tagstore.v2.models.eventtag
+~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+from django.db import models
+from django.utils import timezone
+
+from sentry.db.models import (Model, BoundedPositiveIntegerField, sane_repr)
+
+
+class EventTag(Model):
+    __core__ = False
+
+    project_id = BoundedPositiveIntegerField()
+    environment_id = BoundedPositiveIntegerField()
+    group_id = BoundedPositiveIntegerField()
+    event_id = BoundedPositiveIntegerField()
+    key_id = BoundedPositiveIntegerField()
+    value_id = BoundedPositiveIntegerField()
+    date_added = models.DateTimeField(default=timezone.now, db_index=True)
+
+    class Meta:
+        app_label = 'tagstore'
+        unique_together = (('event_id', 'key_id', 'value_id'), )
+        index_together = (
+            ('project_id', 'key_id', 'value_id'),
+            ('group_id', 'key_id', 'value_id'),
+            ('environment_id', 'key_id', 'value_id'),
+        )
+
+    __repr__ = sane_repr('event_id', 'key_id', 'value_id')
diff --git a/src/sentry/tagstore/v2/models/grouptagkey.py b/src/sentry/tagstore/v2/models/grouptagkey.py
new file mode 100644
index 0000000000..f70dfc6952
--- /dev/null
+++ b/src/sentry/tagstore/v2/models/grouptagkey.py
@@ -0,0 +1,87 @@
+"""
+sentry.tagstore.v2.models.grouptagkey
+~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+import six
+
+from django.db import router, transaction, DataError
+
+from sentry.api.serializers import Serializer, register
+from sentry.db.models import (
+    Model, BoundedPositiveIntegerField, BaseManager, sane_repr
+)
+
+
+class GroupTagKey(Model):
+    """
+    Stores a unique tag key name for a group.
+
+    An example key might be "url" or "server_name".
+    """
+    __core__ = False
+
+    project_id = BoundedPositiveIntegerField(db_index=True)
+    group_id = BoundedPositiveIntegerField(db_index=True)
+    environment_id = BoundedPositiveIntegerField()
+    key_id = BoundedPositiveIntegerField()
+    # values_seen will be in Redis
+
+    objects = BaseManager()
+
+    class Meta:
+        app_label = 'tagstore'
+        unique_together = (('project_id', 'group_id', 'environment_id', 'key_id'), )
+        # TODO: environment index(es)
+
+    __repr__ = sane_repr('project_id', 'group_id', 'environment_id', 'key_id')
+
+    # TODO: key property to fetch actual key string?
+
+    # TODO: this will have to iterate all of the possible environments a group has?
+    # TODO: values_seen will live in Redis
+    def merge_counts(self, new_group):
+        from sentry.tagstore.v2.models import GroupTagValue
+
+        try:
+            with transaction.atomic(using=router.db_for_write(GroupTagKey)):
+                GroupTagKey.objects.filter(
+                    group_id=new_group.id,
+                    key_id=self.key_id,
+                ).update(
+                    values_seen=GroupTagValue.objects.filter(
+                        group_id=new_group.id,
+                        key_id=self.key_id,
+                    ).count()
+                )
+        except DataError:
+            # it's possible to hit an out of range value for counters
+            pass
+
+
+@register(GroupTagKey)
+class GroupTagKeySerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        from sentry import tagstore
+
+        result = {}
+        for item in item_list:
+            key = tagstore.get_standardized_key(item.key)
+            result[item] = {
+                'name': tagstore.get_tag_key_label(item.key),
+                'key': key,
+            }
+
+        return result
+
+    def serialize(self, obj, attrs, user):
+        return {
+            'id': six.text_type(obj.id),
+            'name': attrs['name'],
+            'key': attrs['key'],
+            'uniqueValues': obj.values_seen,
+        }
diff --git a/src/sentry/tagstore/v2/models/grouptagvalue.py b/src/sentry/tagstore/v2/models/grouptagvalue.py
new file mode 100644
index 0000000000..5ad23d4cd1
--- /dev/null
+++ b/src/sentry/tagstore/v2/models/grouptagvalue.py
@@ -0,0 +1,100 @@
+"""
+sentry.tagstore.v2.models.grouptagvalue
+~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+import six
+
+from django.db import models, router, transaction, DataError
+from django.utils import timezone
+
+from sentry.api.serializers import Serializer, register
+from sentry.db.models import (
+    Model, BoundedPositiveIntegerField, BaseManager, sane_repr)
+
+
+class GroupTagValue(Model):
+    """
+    Stores the total number of messages seen by a group matching
+    the given filter.
+    """
+    __core__ = False
+
+    project_id = BoundedPositiveIntegerField(db_index=True)
+    group_id = BoundedPositiveIntegerField(db_index=True)
+    environment_id = BoundedPositiveIntegerField()
+    # times_seen will live in Redis
+    key_id = BoundedPositiveIntegerField()
+    value_id = BoundedPositiveIntegerField()
+    last_seen = models.DateTimeField(
+        default=timezone.now, db_index=True, null=True)
+    first_seen = models.DateTimeField(
+        default=timezone.now, db_index=True, null=True)
+
+    objects = BaseManager()
+
+    class Meta:
+        app_label = 'tagstore'
+        unique_together = (('project_id', 'group_id', 'environment_id', 'key_id', 'value_id'), )
+        # TODO: environment index(es)
+        index_together = (('project_id', 'key_id', 'value_id', 'last_seen'), )
+
+    __repr__ = sane_repr('project_id', 'group_id', 'key_id', 'value_id')
+
+    # TODO: key property to fetch actual key string?
+    # TODO: value property to fetch actual value string?
+
+    def save(self, *args, **kwargs):
+        if not self.first_seen:
+            self.first_seen = self.last_seen
+        super(GroupTagValue, self).save(*args, **kwargs)
+
+    # TODO: this will have to iterate all of the possible environments a group has?
+    # TODO: times_seen will live in Redis
+    def merge_counts(self, new_group):
+        try:
+            with transaction.atomic(using=router.db_for_write(GroupTagValue)):
+                new_obj = GroupTagValue.objects.get(
+                    group_id=new_group.id,
+                    key_id=self.key_id,
+                    value_id=self.value_id,
+                )
+                new_obj.update(
+                    first_seen=min(new_obj.first_seen, self.first_seen),
+                    last_seen=max(new_obj.last_seen, self.last_seen),
+                    times_seen=new_obj.times_seen + self.times_seen,
+                )
+        except DataError:
+            # it's possible to hit an out of range value for counters
+            pass
+
+
+@register(GroupTagValue)
+class GroupTagValueSerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        from sentry import tagstore
+
+        result = {}
+        for item in item_list:
+            result[item] = {
+                'name': tagstore.get_tag_value_label(item.key, item.value),
+            }
+
+        return result
+
+    def serialize(self, obj, attrs, user):
+        from sentry import tagstore
+
+        return {
+            'id': six.text_type(obj.id),
+            'name': attrs['name'],
+            'key': tagstore.get_standardized_key(obj.key),
+            'value': obj.value,
+            'count': obj.times_seen,
+            'lastSeen': obj.last_seen,
+            'firstSeen': obj.first_seen,
+        }
diff --git a/src/sentry/tagstore/v2/models/tagkey.py b/src/sentry/tagstore/v2/models/tagkey.py
new file mode 100644
index 0000000000..a5f469a056
--- /dev/null
+++ b/src/sentry/tagstore/v2/models/tagkey.py
@@ -0,0 +1,69 @@
+"""
+sentry.tagstore.v2.models.tagkey
+~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import, print_function
+
+import six
+
+from django.db import models
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.api.serializers import Serializer, register
+from sentry.tagstore import TagKeyStatus
+from sentry.constants import MAX_TAG_KEY_LENGTH
+from sentry.db.models import (Model, BoundedPositiveIntegerField, sane_repr)
+
+
+class TagKey(Model):
+    """
+    Stores references to available filters keys.
+    """
+    __core__ = False
+
+    project_id = BoundedPositiveIntegerField(db_index=True)
+    environment_id = BoundedPositiveIntegerField()
+    key = models.CharField(max_length=MAX_TAG_KEY_LENGTH)
+    # values_seen will live in Redis
+    status = BoundedPositiveIntegerField(
+        choices=(
+            (TagKeyStatus.VISIBLE, _('Visible')),
+            (TagKeyStatus.PENDING_DELETION, _('Pending Deletion')),
+            (TagKeyStatus.DELETION_IN_PROGRESS, _('Deletion in Progress')),
+        ),
+        default=TagKeyStatus.VISIBLE
+    )
+
+    class Meta:
+        app_label = 'tagstore'
+        unique_together = (('project_id', 'environment_id', 'key'), )
+        # TODO: environment index(es)
+
+    __repr__ = sane_repr('project_id', 'environment_id', 'key')
+
+    def get_label(self):
+        from sentry import tagstore
+
+        return tagstore.get_tag_key_label(self.key)
+
+    def get_audit_log_data(self):
+        return {
+            'key': self.key,
+        }
+
+
+@register(TagKey)
+class TagKeySerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        from sentry import tagstore
+
+        return {
+            'id': six.text_type(obj.id),
+            'key': tagstore.get_standardized_key(obj.key),
+            'name': tagstore.get_tag_key_label(obj.key),
+            'uniqueValues': obj.values_seen,
+        }
diff --git a/src/sentry/tagstore/v2/models/tagvalue.py b/src/sentry/tagstore/v2/models/tagvalue.py
new file mode 100644
index 0000000000..a9a09e724a
--- /dev/null
+++ b/src/sentry/tagstore/v2/models/tagvalue.py
@@ -0,0 +1,81 @@
+"""
+sentry.tagstore.v2.models.tagvalue
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+import six
+
+from django.db import models
+from django.utils import timezone
+
+from sentry.api.serializers import Serializer, register
+from sentry.constants import MAX_TAG_VALUE_LENGTH
+from sentry.db.models import (
+    Model, BoundedPositiveIntegerField, GzippedDictField, BaseManager, sane_repr
+)
+
+
+class TagValue(Model):
+    """
+    Stores references to available filters.
+    """
+    __core__ = False
+
+    project_id = BoundedPositiveIntegerField(db_index=True)
+    environment_id = BoundedPositiveIntegerField()
+    key_id = BoundedPositiveIntegerField()
+    value = models.CharField(max_length=MAX_TAG_VALUE_LENGTH)
+    # TODO: do we even use this anymore?
+    data = GzippedDictField(blank=True, null=True)
+    # times_seen will live in Redis
+    last_seen = models.DateTimeField(
+        default=timezone.now, db_index=True, null=True)
+    first_seen = models.DateTimeField(
+        default=timezone.now, db_index=True, null=True)
+
+    objects = BaseManager()
+
+    class Meta:
+        app_label = 'tagstore'
+        unique_together = (('project_id', 'environment_id', 'key_id', 'value'), )
+        # TODO: environment index(es)
+        index_together = (('project_id', 'key_id', 'last_seen'), )
+
+    __repr__ = sane_repr('project_id', 'environment_id', 'key_id', 'value')
+
+    # TODO: key property to fetch actual key string?
+
+    def get_label(self):
+        from sentry import tagstore
+
+        return tagstore.get_tag_value_label(self.key, self.value)
+
+
+@register(TagValue)
+class TagValueSerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        from sentry import tagstore
+
+        result = {}
+        for item in item_list:
+            result[item] = {
+                'name': tagstore.get_tag_value_label(item.key, item.value),
+            }
+        return result
+
+    def serialize(self, obj, attrs, user):
+        from sentry import tagstore
+
+        return {
+            'id': six.text_type(obj.id),
+            'key': tagstore.get_standardized_key(obj.key),
+            'name': attrs['name'],
+            'value': obj.value,
+            'count': obj.times_seen,
+            'lastSeen': obj.last_seen,
+            'firstSeen': obj.first_seen,
+        }
