commit 328a6224188e12c7fb78061eceef552f92f4e10c
Author: Jan Michael Auer <account@jauer.org>
Date:   Tue Apr 9 09:14:56 2019 +0200

    feat(symbolicator): Allow configuration of custom S3 sources (#12680)
    
    Adds project options and preliminary UI for external symbol sources in the debug
    files settings screen. There will be a refactor of the settings UI that replaces
    the JSON input box. The sources are validated with a JSON schema that currently
    only allows S3 buckets to be configured.

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 9295c90f18..0ae62010be 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -20,6 +20,7 @@ from sentry.api.serializers import serialize
 from sentry.api.serializers.models.project import DetailedProjectSerializer
 from sentry.api.serializers.rest_framework import ListField, OriginField
 from sentry.constants import RESERVED_PROJECT_SLUGS
+from sentry.lang.native.symbolicator import parse_sources, InvalidSourcesError
 from sentry.models import (
     AuditLogEntryEvent, Group, GroupStatus, Project, ProjectBookmark, ProjectRedirect,
     ProjectStatus, ProjectTeam, UserOption,
@@ -28,6 +29,7 @@ from sentry.grouping.enhancer import Enhancements, InvalidEnhancerConfig
 from sentry.grouping.fingerprinting import FingerprintingRules, InvalidFingerprintingConfig
 from sentry.tasks.deletion import delete_project
 from sentry.utils.apidocs import scenario, attach_scenarios
+from sentry.utils import json
 
 delete_logger = logging.getLogger('sentry.deletions.api')
 
@@ -98,6 +100,8 @@ class ProjectAdminSerializer(ProjectMemberSerializer):
     safeFields = ListField(child=serializers.CharField(), required=False)
     storeCrashReports = serializers.BooleanField(required=False)
     relayPiiConfig = serializers.CharField(required=False)
+    builtinSymbolSources = ListField(child=serializers.CharField(), required=False)
+    symbolSources = serializers.CharField(required=False)
     scrubIPAddresses = serializers.BooleanField(required=False)
     groupingConfig = serializers.CharField(required=False)
     groupingEnhancements = serializers.CharField(required=False)
@@ -173,6 +177,49 @@ class ProjectAdminSerializer(ProjectMemberSerializer):
             )
         return attrs
 
+    def validate_builtinSymbolSources(self, attrs, source):
+        if not attrs[source]:
+            return attrs
+
+        from sentry import features
+        organization = self.context['project'].organization
+        request = self.context["request"]
+        has_sources = features.has('organizations:symbol-sources',
+                                   organization,
+                                   actor=request.user)
+
+        if not has_sources:
+            raise serializers.ValidationError(
+                'Organization is not allowed to set symbol sources'
+            )
+
+        return attrs
+
+    def validate_symbolSources(self, attrs, source):
+        sources_json = attrs[source]
+        if not sources_json:
+            return attrs
+
+        from sentry import features
+        organization = self.context['project'].organization
+        request = self.context["request"]
+        has_sources = features.has('organizations:symbol-sources',
+                                   organization,
+                                   actor=request.user)
+
+        if not has_sources:
+            raise serializers.ValidationError(
+                'Organization is not allowed to set symbol sources'
+            )
+
+        try:
+            sources = parse_sources(sources_json.strip())
+            attrs[source] = json.dumps(sources) if sources else ''
+        except InvalidSourcesError as e:
+            raise serializers.ValidationError(e.message)
+
+        return attrs
+
     def validate_groupingEnhancements(self, attrs, source):
         if not attrs[source]:
             return attrs
@@ -446,6 +493,13 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             if project.update_option('sentry:relay_pii_config', result['relayPiiConfig']):
                 changed_proj_settings['sentry:relay_pii_config'] = result['relayPiiConfig'].strip(
                 ) or None
+        if result.get('builtinSymbolSources') is not None:
+            if project.update_option('sentry:builtin_symbol_sources',
+                                     result['builtinSymbolSources']):
+                changed_proj_settings['sentry:builtin_symbol_sources'] = result['builtinSymbolSources']
+        if result.get('symbolSources') is not None:
+            if project.update_option('sentry:symbol_sources', result['symbolSources']):
+                changed_proj_settings['sentry:symbol_sources'] = result['symbolSources'] or None
         if 'defaultEnvironment' in result:
             if result['defaultEnvironment'] is None:
                 project.delete_option('sentry:default_environment')
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index f2db17ff40..7192538dda 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -412,6 +412,8 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
             'sentry:scrub_defaults',
             'sentry:safe_fields',
             'sentry:store_crash_reports',
+            'sentry:builtin_symbol_sources',
+            'sentry:symbol_sources',
             'sentry:sensitive_fields',
             'sentry:csp_ignored_sources_defaults',
             'sentry:csp_ignored_sources',
@@ -563,6 +565,8 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
                 'processingIssues': attrs['processing_issues'],
                 'defaultEnvironment': attrs['options'].get('sentry:default_environment'),
                 'relayPiiConfig': attrs['options'].get('sentry:relay_pii_config'),
+                'builtinSymbolSources': attrs['options'].get('sentry:builtin_symbol_sources'),
+                'symbolSources': attrs['options'].get('sentry:symbol_sources'),
             }
         )
         return data
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 89b9f4dc71..2d478465d8 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -808,6 +808,8 @@ SENTRY_FEATURES = {
     'organizations:discover': False,
     # Enable attaching arbitrary files to events.
     'organizations:event-attachments': False,
+    # Allow organizations to configure custom external symbol sources.
+    'organizations:symbol-sources': False,
     # Enable the events stream interface.
     'organizations:events': False,
     # Enable multi project selection
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 77aad8c8a3..c9c476e3aa 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -58,6 +58,7 @@ default_manager.add('organizations:api-keys', OrganizationFeature)  # NOQA
 default_manager.add('organizations:discover', OrganizationFeature)  # NOQA
 default_manager.add('organizations:events', OrganizationFeature)  # NOQA
 default_manager.add('organizations:event-attachments', OrganizationFeature)  # NOQA
+default_manager.add('organizations:symbol-sources', OrganizationFeature)  # NOQA
 default_manager.add('organizations:gitlab-integration', OrganizationFeature)  # NOQA
 default_manager.add('organizations:global-views', OrganizationFeature)  # NOQA
 default_manager.add('organizations:integrations-issue-basic', OrganizationFeature)  # NOQA
diff --git a/src/sentry/lang/native/symbolicator.py b/src/sentry/lang/native/symbolicator.py
index 423d1904b5..de8f7fa29c 100644
--- a/src/sentry/lang/native/symbolicator.py
+++ b/src/sentry/lang/native/symbolicator.py
@@ -1,9 +1,9 @@
 from __future__ import absolute_import
 
+import jsonschema
+import logging
 import six
-
 import time
-import logging
 
 from django.core.urlresolvers import reverse
 
@@ -12,7 +12,7 @@ from requests.exceptions import RequestException
 from sentry import options
 from sentry.auth.system import get_system_token
 from sentry.cache import default_cache
-from sentry.utils import metrics
+from sentry.utils import json, metrics
 from sentry.net.http import Session
 from sentry.tasks.store import RetrySymbolication
 
@@ -23,7 +23,87 @@ SYMBOLICATOR_TIMEOUT = 5
 logger = logging.getLogger(__name__)
 
 
-def run_symbolicator(stacktraces, modules, project, arch, signal, request_id_cache_key):
+BUILTIN_SOURCES = {
+    'microsoft': {
+        'type': 'http',
+        'id': 'sentry:microsoft',
+        'layout': 'symstore',
+        'filetypes': ['pdb', 'pe'],
+        'url': 'https://msdl.microsoft.com/download/symbols/',
+        'is_public': True,
+    },
+}
+
+VALID_LAYOUTS = (
+    'native',
+    'symstore',
+)
+
+VALID_FILE_TYPES = (
+    'pe',
+    'pdb',
+    'mach_debug',
+    'mach_code',
+    'elf_debug',
+    'elf_code',
+    'breakpad',
+)
+
+COMMON_SOURCE_PROPERTIES = {
+    'id': {
+        'type': 'string',
+        'minLength': 1,
+    },
+    'layout': {
+        'type': 'string',
+        'enum': list(VALID_LAYOUTS),
+    },
+    'filetypes': {
+        'type': 'array',
+        'items': {
+            'type': 'string',
+            'enum': list(VALID_FILE_TYPES),
+        }
+    },
+}
+
+S3_SOURCE_SCHEMA = {
+    'type': 'object',
+    'properties': dict(
+        type={
+            'type': 'string',
+            'enum': ['s3'],
+        },
+        bucket={'type': 'string'},
+        region={'type': 'string'},
+        access_key={'type': 'string'},
+        secret_key={'type': 'string'},
+        prefix={'type': 'string'},
+        **COMMON_SOURCE_PROPERTIES
+    ),
+    'required': ['type', 'id', 'bucket', 'region', 'access_key', 'secret_key', 'layout'],
+    'additionalProperties': False,
+}
+
+SOURCES_SCHEMA = {
+    'type': 'array',
+    'items': {
+        'oneOf': [
+            # TODO: Implement HTTP sources
+            S3_SOURCE_SCHEMA,
+        ],
+    }
+}
+
+
+class InvalidSourcesError(Exception):
+    pass
+
+
+def get_internal_source(project):
+    """
+    Returns the source configuration for a Sentry project.
+    """
     internal_url_prefix = options.get('system.internal-url-prefix') \
         or options.get('system.url-prefix')
 
@@ -36,6 +116,77 @@ def run_symbolicator(stacktraces, modules, project, arch, signal, request_id_cac
         })
     )
 
+    return {
+        'type': 'sentry',
+        'id': 'sentry:project',
+        'url': sentry_source_url,
+        'token': get_system_token(),
+    }
+
+
+def parse_sources(config):
+    """
+    Parses the given sources in the config string (from JSON).
+    """
+
+    if not config:
+        return []
+
+    try:
+        sources = json.loads(config)
+    except BaseException as e:
+        raise InvalidSourcesError(e.message)
+
+    try:
+        jsonschema.validate(sources, SOURCES_SCHEMA)
+    except jsonschema.ValidationError as e:
+        raise InvalidSourcesError(e.message)
+
+    ids = set()
+    for source in sources:
+        if source['id'].startswith('sentry'):
+            raise InvalidSourcesError('Source ids must not start with "sentry:"')
+        if source['id'] in ids:
+            raise InvalidSourcesError('Duplicate source id: %s' % (source['id'], ))
+        ids.add(source['id'])
+
+    return sources
+
+
+def get_sources_for_project(project):
+    """
+    Returns a list of symbol sources for this project.
+    """
+
+    sources = []
+
+    # The symbolicator evaluates sources in the order they are declared. Always
+    # try to download symbols from Sentry first.
+    project_source = get_internal_source(project)
+    sources.append(project_source)
+
+    sources_config = project.get_option('sentry:symbol_sources')
+    if sources_config:
+        try:
+            custom_sources = parse_sources(sources_config)
+            sources.extend(custom_sources)
+        except InvalidSourcesError:
+            # Source configs should be validated when they are saved. If this
+            # did not happen, this indicates a bug. Record this, but do not stop
+            # processing at this point.
+            logger.error('Invalid symbolicator source config', exc_info=True)
+
+    # Add builtin sources last to ensure that custom sources have precedence
+    # over our defaults.
+    builtin_sources = project.get_option('sentry:builtin_symbol_sources') or []
+    for key, source in six.iteritems(BUILTIN_SOURCES):
+        if key in builtin_sources:
+            sources.push(source)
+
+    return sources
+
+
+def run_symbolicator(stacktraces, modules, project, arch, signal, request_id_cache_key):
     symbolicator_options = options.get('symbolicator.options')
     base_url = symbolicator_options['url'].rstrip('/')
     assert base_url
@@ -44,22 +195,27 @@ def run_symbolicator(stacktraces, modules, project, arch, signal, request_id_cac
     request_id = default_cache.get(request_id_cache_key)
     sess = Session()
 
+    # Will be set lazily when a symbolicator request is fired
+    sources = None
+
     attempts = 0
     wait = 0.5
 
     with sess:
-        while 1:
+        while True:
             try:
-
                 if request_id:
                     rv = _poll_symbolication_task(
                         sess=sess, base_url=base_url,
                         request_id=request_id
                     )
                 else:
+                    if sources is None:
+                        sources = get_sources_for_project(project)
+
                     rv = _create_symbolication_task(
                         sess=sess, base_url=base_url,
-                        project_id=project_id, sentry_source_url=sentry_source_url,
+                        project_id=project_id, sources=sources,
                         signal=signal, stacktraces=stacktraces, modules=modules
                     )
 
@@ -116,26 +272,11 @@ def _poll_symbolication_task(sess, base_url, request_id):
     return sess.get(url)
 
 
-def _create_symbolication_task(sess, base_url, project_id,
-                               sentry_source_url, signal, stacktraces, modules):
+def _create_symbolication_task(sess, base_url, project_id, sources,
+                               signal, stacktraces, modules):
     request = {
         'signal': signal,
-        'sources': [
-            {
-                'type': 'sentry',
-                'id': '__sentry_internal__',
-                'url': sentry_source_url,
-                'token': get_system_token(),
-            },
-            {
-                'type': 'http',
-                'id': 'microsoft',
-                'layout': 'symstore',
-                'filetypes': ['pdb', 'pe'],
-                'url': 'https://msdl.microsoft.com/download/symbols/',
-                'is_public': True,
-            }
-        ],
+        'sources': sources,
         'request': {
             'timeout': SYMBOLICATOR_TIMEOUT,
         },
diff --git a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
index b0d38831f9..092a8c9d24 100644
--- a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
@@ -352,7 +352,6 @@ export const fields = {
       return [];
     },
   },
-
   allowedDomains: {
     name: 'allowedDomains',
     type: 'string',
diff --git a/src/sentry/static/sentry/app/views/projectDebugFiles.jsx b/src/sentry/static/sentry/app/views/projectDebugFiles.jsx
index 372f15af0e..39243aaa29 100644
--- a/src/sentry/static/sentry/app/views/projectDebugFiles.jsx
+++ b/src/sentry/static/sentry/app/views/projectDebugFiles.jsx
@@ -1,4 +1,5 @@
 import {Box, Flex} from 'grid-emotion';
+import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
@@ -8,6 +9,9 @@ import Access from 'app/components/acl/access';
 import AsyncComponent from 'app/components/asyncComponent';
 import Button from 'app/components/button';
 import Confirm from 'app/components/confirm';
+import Form from 'app/views/settings/components/forms/form';
+import JsonForm from 'app/views/settings/components/forms/jsonForm';
+import PermissionAlert from 'app/views/settings/project/permissionAlert';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import FileSize from 'app/components/fileSize';
 import Pagination from 'app/components/pagination';
@@ -54,11 +58,57 @@ const DebugSymbolDetails = styled.div`
   margin-top: 4px;
 `;
 
+const formFields = [
+  {
+    name: 'builtinSymbolSources',
+    type: 'select',
+    multiple: true,
+    label: t('Built-in Repositories'),
+    help: t(
+      'Configures which built-in repositories Sentry should use to resolve debug files.'
+    ),
+    choices: [['microsoft', t('Microsoft Symbol Server')]],
+  },
+  {
+    name: 'symbolSources',
+    type: 'string',
+    label: t('Custom Repositories'),
+    placeholder: t('Paste JSON here.'),
+    multiline: true,
+    monospace: true,
+    autosize: true,
+    inline: false,
+    maxRows: 10,
+    saveOnBlur: false,
+    saveMessageAlertType: 'info',
+    saveMessage: t('Updates will apply to future events only.'),
+    formatMessageValue: false,
+    help: t(
+      'Configures custom repositories containing debug files. At the moment, only Amazon S3 buckets are supported.'
+    ),
+    validate: ({id, form}) => {
+      try {
+        if (form[id].trim()) {
+          JSON.parse(form[id]);
+        }
+      } catch (e) {
+        return [[id, e.toString().replace(/^SyntaxError: JSON.parse: /, '')]];
+      }
+      return [];
+    },
+  },
+];
+
 class ProjectDebugSymbols extends AsyncComponent {
+  static contextTypes = {
+    organization: PropTypes.object.isRequired,
+  };
+
   getEndpoints() {
     const {orgId, projectId} = this.props.params;
 
     return [
+      ['project', `/projects/${orgId}/${projectId}/`],
       [
         'debugFiles',
         `/projects/${orgId}/${projectId}/files/dsyms/`,
@@ -193,15 +243,50 @@ class ProjectDebugSymbols extends AsyncComponent {
   }
 
   renderBody() {
+    const {orgId, projectId} = this.props.params;
+    const {organization} = this.context;
+    const {project} = this.state;
+    const features = new Set(organization.features);
+    const access = new Set(organization.access);
+
     return (
       <React.Fragment>
         <SettingsPageHeader title={t('Debug Information Files')} />
+
         <TextBlock>
           {t(`
-          Here you can find all your uploaded debug information files (dSYMs, ProGuard, Breakpad ...).
-          This is used to convert addresses and minified function names from crash dumps
-          into function names and locations.`)}
+            Debug information files are used to convert addresses and minified
+            function names from native crash reports into function names and
+            locations.
+          `)}
         </TextBlock>
+
+        {features.has('symbol-sources') && (
+          <>
+            <PermissionAlert />
+
+            <Form
+              saveOnBlur
+              allowUndo
+              initialData={project}
+              apiMethod="PUT"
+              apiEndpoint={`/projects/${orgId}/${projectId}/`}
+            >
+              <JsonForm
+                access={access}
+                features={features}
+                title={t('External Sources')}
+                disabled={!access.has('project:write')}
+                fields={formFields}
+              />
+            </Form>
+          </>
+        )}
+
+        <TextBlock>
+          {t('This list contains all uploaded debug information files:')}
+        </TextBlock>
+
         <Panel>
           <PanelHeader hasButtons>
             <Box w={4.5 / 12}>{t('Debug ID')}</Box>
diff --git a/tests/js/spec/views/__snapshots__/projectDebugFiles.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectDebugFiles.spec.jsx.snap
index 6a4cf3db57..a5f5ccfff9 100644
--- a/tests/js/spec/views/__snapshots__/projectDebugFiles.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectDebugFiles.spec.jsx.snap
@@ -62,9 +62,21 @@ exports[`ProjectDebugFiles renders 1`] = `
         className="css-1geyb25-TextBlock ec8ep340"
       >
         
-          Here you can find all your uploaded debug information files (dSYMs, ProGuard, Breakpad ...).
-          This is used to convert addresses and minified function names from crash dumps
-          into function names and locations.
+            Debug information files are used to convert addresses and minified
+            function names from native crash reports into function names and
+            locations.
+          
+      </div>
+    </Component>
+  </TextBlock>
+  <TextBlock>
+    <Component
+      className="css-1geyb25-TextBlock ec8ep340"
+    >
+      <div
+        className="css-1geyb25-TextBlock ec8ep340"
+      >
+        This list contains all uploaded debug information files:
       </div>
     </Component>
   </TextBlock>
@@ -140,9 +152,9 @@ exports[`ProjectDebugFiles renders 1`] = `
                           onError={[Function]}
                           onSuccess={[Function]}
                           placeholder="Search DIFs"
-                          stateKey="debugFiles"
+                          stateKey="project"
                           updateRoute={true}
-                          url="/projects/org/project/files/dsyms/"
+                          url="/projects/org/project/"
                         >
                           <AsyncComponentSearchInput
                             api={Client {}}
@@ -172,9 +184,9 @@ exports[`ProjectDebugFiles renders 1`] = `
                                 "setRouteLeaveHook": [MockFunction],
                               }
                             }
-                            stateKey="debugFiles"
+                            stateKey="project"
                             updateRoute={true}
-                            url="/projects/org/project/files/dsyms/"
+                            url="/projects/org/project/"
                           >
                             <Form
                               onSubmit={[Function]}
@@ -287,9 +299,13 @@ exports[`ProjectDebugFiles renders empty 1`] = `
   />
   <TextBlock>
     
-          Here you can find all your uploaded debug information files (dSYMs, ProGuard, Breakpad ...).
-          This is used to convert addresses and minified function names from crash dumps
-          into function names and locations.
+            Debug information files are used to convert addresses and minified
+            function names from native crash reports into function names and
+            locations.
+          
+  </TextBlock>
+  <TextBlock>
+    This list contains all uploaded debug information files:
   </TextBlock>
   <Panel>
     <PanelHeader
@@ -312,9 +328,9 @@ exports[`ProjectDebugFiles renders empty 1`] = `
           onError={[Function]}
           onSuccess={[Function]}
           placeholder="Search DIFs"
-          stateKey="debugFiles"
+          stateKey="project"
           updateRoute={true}
-          url="/projects/org/project/files/dsyms/"
+          url="/projects/org/project/"
         />
       </Box>
     </PanelHeader>
diff --git a/tests/js/spec/views/projectDebugFiles.spec.jsx b/tests/js/spec/views/projectDebugFiles.spec.jsx
index 636dbd9e67..6748175ed0 100644
--- a/tests/js/spec/views/projectDebugFiles.spec.jsx
+++ b/tests/js/spec/views/projectDebugFiles.spec.jsx
@@ -9,6 +9,10 @@ const ENDPOINT = '/projects/org/project/files/dsyms/';
 describe('ProjectDebugFiles', function() {
   beforeEach(function() {
     Client.clearMockResponses();
+    Client.addMockResponse({
+      url: '/projects/org/project/',
+      body: {},
+    });
   });
 
   it('renders empty', function() {
