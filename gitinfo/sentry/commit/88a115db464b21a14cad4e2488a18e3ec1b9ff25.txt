commit 88a115db464b21a14cad4e2488a18e3ec1b9ff25
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Dec 29 00:53:59 2011 -0800

    Initial work on queue

diff --git a/sentry/commands/cleanup.py b/sentry/commands/cleanup.py
index 4c48fc6a58..814b0dcb53 100644
--- a/sentry/commands/cleanup.py
+++ b/sentry/commands/cleanup.py
@@ -7,9 +7,6 @@ sentry.commands.cleanup
 """
 from sentry.commands.utils import options, opt
 
-import datetime
-import logging
-
 
 @options(
     opt('--days', default='30', type=int, help='Numbers of days to truncate on.'),
@@ -19,87 +16,10 @@ import logging
     opt('--level', help='Limit truncation to only entries greater than or equal to level (e.g. DEBUG).'),
 )
 def cleanup(days=30, logger=None, site=None, server=None, level=None):
-    """
-    Deletes a portion of the trailing data in Sentry based on
-    their creation dates. For example, if ``days`` is 30, this
-    would attempt to clean up all data thats older than 30 days.
-
-    :param logger: limit all deletion scopes to messages from the
-                   specified logger.
-    :param site: limit the message deletion scope to the specified
-                 site.
-    :param server: limit the message deletion scope to the specified
-                   server.
-    :param level: limit all deleteion scopes to messages that are greater
-                  than or equal to level.
-    """
-    from sentry.models import Group, Event, MessageCountByMinute, \
-                              MessageFilterValue, FilterValue
-    from sentry.utils.query import RangeQuerySetWrapper, SkinnyQuerySet
+    import logging
+    from sentry.queue.tasks.cleanup import cleanup
 
     if level is not None and not str(level).isdigit():
         level = getattr(logging, level.upper())
 
-    # TODO: we should collect which messages above were deleted
-    # and potentially just send out post_delete signals where
-    # GroupedMessage can update itself accordingly
-    ts = datetime.datetime.now() - datetime.timedelta(days=days)
-
-    # Message
-    qs = SkinnyQuerySet(Event).filter(datetime__lte=ts)
-    if logger:
-        qs = qs.filter(logger=logger)
-    if site:
-        qs = qs.filter(site=site)
-    if server:
-        qs = qs.filter(server_name=server)
-    if level:
-        qs = qs.filter(level__gte=level)
-
-    groups_to_check = set()
-    for obj in RangeQuerySetWrapper(qs):
-        print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
-        obj.delete()
-        groups_to_check.add(obj.group_id)
-
-    if not (server or site):
-        # MessageCountByMinute
-        qs = SkinnyQuerySet(MessageCountByMinute).filter(date__lte=ts)
-        if logger:
-            qs = qs.filter(group__logger=logger)
-        if level:
-            qs = qs.filter(group__level__gte=level)
-
-        for obj in RangeQuerySetWrapper(qs):
-            print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
-            obj.delete()
-
-        # GroupedMessage
-        qs = SkinnyQuerySet(Group).filter(last_seen__lte=ts)
-        if logger:
-            qs = qs.filter(logger=logger)
-        if level:
-            qs = qs.filter(level__gte=level)
-
-        for obj in RangeQuerySetWrapper(qs):
-            for key, value in SkinnyQuerySet(MessageFilterValue).filter(group=obj).values_list('key', 'value'):
-                if not MessageFilterValue.objects.filter(key=key, value=value).exclude(group=obj).exists():
-                    print ">>> Removing <FilterValue: key=%s, value=%s>" % (key, value)
-                    FilterValue.objects.filter(key=key, value=value).delete()
-            print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
-            obj.delete()
-
-    # attempt to cleanup any groups that may now be empty
-    groups_to_delete = []
-    for group_id in groups_to_check:
-        if not Event.objects.filter(group=group_id).exists():
-            groups_to_delete.append(group_id)
-
-    if groups_to_delete:
-        for obj in SkinnyQuerySet(Group).filter(pk__in=groups_to_delete):
-            for key, value in SkinnyQuerySet(MessageFilterValue).filter(group=obj).values_list('key', 'value'):
-                if not MessageFilterValue.objects.filter(key=key, value=value).exclude(group=obj).exists():
-                    print ">>> Removing <FilterValue: key=%s, value=%s>" % (key, value)
-                    FilterValue.objects.filter(key=key, value=value).delete()
-            print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
-            obj.delete()
+    cleanup(days=days, logger=logger, site=site, server=server, level=level)
diff --git a/sentry/commands/start.py b/sentry/commands/start.py
index 55eebcac30..14c71f59bd 100644
--- a/sentry/commands/start.py
+++ b/sentry/commands/start.py
@@ -8,26 +8,46 @@ sentry.commands.start
 from sentry.commands.utils import options, opt
 
 
+class SentryWorker(object):
+    def __init__(self, **kwargs):
+        pass
+
+    def execute(self, command):
+        assert command in ('start',)
+
+        getattr(self, command)()
+
+    def start(self):
+        from sentry.queue.client import broker
+        from sentry.queue.worker import Worker
+
+        from kombu.utils.debug import setup_logging
+        setup_logging(loglevel="INFO")
+
+        from sentry.queue.tasks import test
+        broker.delay(test, 'foo', bar='baz')
+
+        try:
+            Worker(broker.connection).run()
+        except KeyboardInterrupt:
+            print("bye bye")
+
+
 @options(
-    opt('--host', metavar='HOSTNAME'),
-    opt('--port', type=int, metavar='PORT'),
-    opt('--daemon', action='store_true', default=False, dest='daemonize'),
-    opt('--no-daemon', action='store_false', default=False, dest='daemonize'),
+    opt('--background', action='store_true', default=False, dest='daemonize'),
+    opt('--foreground', action='store_false', default=False, dest='daemonize'),
     opt('--debug', action='store_true', default=False, dest='debug'),
-    opt('--pidfile', dest='pidfile'),
-    opt('--logfile', dest='logfile'),
-    opt('--service', dest='service', default='http', choices=['http']),
+    opt('--service', dest='service', default='http', choices=['http', 'worker']),
 )
-def start(daemonize=False, host=None, port=None, debug=False, pidfile=None, logfile=None, service='http'):
+def start(daemonize=False, debug=False, service='http'):
     from sentry.utils import server
     app_class = {
         'http': server.SentryHTTPServer,
+        'worker': SentryWorker,
     }[service]
+
+    # TODO: daemonize should generically daemonize any subproc
     app = app_class(
-        host=host,
-        port=port,
-        pidfile=pidfile,
-        logfile=logfile,
         daemonize=daemonize,
         debug=debug,
     )
diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index a0c10a4de2..9d1c1257b3 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -76,3 +76,12 @@ WEB_LOG_FILE = os.path.join(ROOT, 'sentry.log')
 WEB_PID_FILE = os.path.join(ROOT, 'sentry.pid')
 
 MESSAGES_PER_PAGE = 15
+
+QUEUE = {
+    'transport': 'djkombu.transport.DatabaseTransport',
+# BROKER_HOST = 'localhost',
+# BROKER_PORT = 5672
+# BROKER_USER = "guest"
+# BROKER_PASSWORD = "guest"
+# BROKER_VHOST = "/"
+}
diff --git a/sentry/conf/server.py b/sentry/conf/server.py
index 23adfd1eb6..c628439397 100644
--- a/sentry/conf/server.py
+++ b/sentry/conf/server.py
@@ -97,8 +97,10 @@ INSTALLED_APPS = (
     'django.contrib.sessions',
     'django.contrib.sites',
     # 'django.contrib.messages',
-    'sentry',
+
+    'djkombu',
     'raven.contrib.django',
+    'sentry',
     'sentry.plugins.sentry_servers',
     'sentry.plugins.sentry_sites',
     'sentry.plugins.sentry_urls',
diff --git a/sentry/queue/__init__.py b/sentry/queue/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/sentry/queue/client.py b/sentry/queue/client.py
new file mode 100644
index 0000000000..23b2ad4198
--- /dev/null
+++ b/sentry/queue/client.py
@@ -0,0 +1,38 @@
+"""
+sentry.queue.client
+~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from kombu import BrokerConnection
+from kombu.common import maybe_declare
+from kombu.pools import producers
+
+from sentry.conf import settings
+from sentry.queue.queues import task_queues, task_exchange
+
+
+class Broker(object):
+    def __init__(self, config):
+        self.connection = BrokerConnection(**config)
+
+    def delay(self, func, *args, **kwargs):
+        payload = {
+            "func": func,
+            "args": args,
+            "kwargs": kwargs,
+        }
+
+        with producers[self.connection].acquire(block=False) as producer:
+            for queue in task_queues:
+                maybe_declare(queue, producer.channel)
+            producer.publish(payload,
+                exchange=task_exchange,
+                serializer="pickle",
+                compression="bzip2",
+                queue='default',
+                routing_key='default',
+            )
+
+broker = Broker(settings.QUEUE)
diff --git a/sentry/queue/queues.py b/sentry/queue/queues.py
new file mode 100644
index 0000000000..f8031e983f
--- /dev/null
+++ b/sentry/queue/queues.py
@@ -0,0 +1,13 @@
+"""
+sentry.queue.queues
+~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from kombu import Exchange, Queue
+
+task_exchange = Exchange("tasks", type="direct")
+task_queues = [
+    Queue("default", task_exchange, routing_key="default"),
+]
diff --git a/sentry/queue/tasks/__init__.py b/sentry/queue/tasks/__init__.py
new file mode 100644
index 0000000000..e217eb8f7c
--- /dev/null
+++ b/sentry/queue/tasks/__init__.py
@@ -0,0 +1,3 @@
+def test(*args, **kwargs):
+    print args, kwargs
+    raise
diff --git a/sentry/queue/tasks/cleanup.py b/sentry/queue/tasks/cleanup.py
new file mode 100644
index 0000000000..c15ac18c3d
--- /dev/null
+++ b/sentry/queue/tasks/cleanup.py
@@ -0,0 +1,93 @@
+"""
+sentry.queue.tasks.cleanup
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+
+def cleanup(days=30, logger=None, site=None, server=None, level=None):
+    """
+    Deletes a portion of the trailing data in Sentry based on
+    their creation dates. For example, if ``days`` is 30, this
+    would attempt to clean up all data thats older than 30 days.
+
+    :param logger: limit all deletion scopes to messages from the
+                   specified logger.
+    :param site: limit the message deletion scope to the specified
+                 site.
+    :param server: limit the message deletion scope to the specified
+                   server.
+    :param level: limit all deleteion scopes to messages that are greater
+                  than or equal to level.
+    """
+    import datetime
+
+    from sentry.models import Group, Event, MessageCountByMinute, \
+                              MessageFilterValue, FilterValue
+    from sentry.utils.query import RangeQuerySetWrapper, SkinnyQuerySet
+
+    # TODO: we should collect which messages above were deleted
+    # and potentially just send out post_delete signals where
+    # GroupedMessage can update itself accordingly
+    ts = datetime.datetime.now() - datetime.timedelta(days=days)
+
+    # Message
+    qs = SkinnyQuerySet(Event).filter(datetime__lte=ts)
+    if logger:
+        qs = qs.filter(logger=logger)
+    if site:
+        qs = qs.filter(site=site)
+    if server:
+        qs = qs.filter(server_name=server)
+    if level:
+        qs = qs.filter(level__gte=level)
+
+    groups_to_check = set()
+    for obj in RangeQuerySetWrapper(qs):
+        print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
+        obj.delete()
+        groups_to_check.add(obj.group_id)
+
+    if not (server or site):
+        # MessageCountByMinute
+        qs = SkinnyQuerySet(MessageCountByMinute).filter(date__lte=ts)
+        if logger:
+            qs = qs.filter(group__logger=logger)
+        if level:
+            qs = qs.filter(group__level__gte=level)
+
+        for obj in RangeQuerySetWrapper(qs):
+            print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
+            obj.delete()
+
+        # GroupedMessage
+        qs = SkinnyQuerySet(Group).filter(last_seen__lte=ts)
+        if logger:
+            qs = qs.filter(logger=logger)
+        if level:
+            qs = qs.filter(level__gte=level)
+
+        for obj in RangeQuerySetWrapper(qs):
+            for key, value in SkinnyQuerySet(MessageFilterValue).filter(group=obj).values_list('key', 'value'):
+                if not MessageFilterValue.objects.filter(key=key, value=value).exclude(group=obj).exists():
+                    print ">>> Removing <FilterValue: key=%s, value=%s>" % (key, value)
+                    FilterValue.objects.filter(key=key, value=value).delete()
+            print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
+            obj.delete()
+
+    # attempt to cleanup any groups that may now be empty
+    groups_to_delete = []
+    for group_id in groups_to_check:
+        if not Event.objects.filter(group=group_id).exists():
+            groups_to_delete.append(group_id)
+
+    if groups_to_delete:
+        for obj in SkinnyQuerySet(Group).filter(pk__in=groups_to_delete):
+            for key, value in SkinnyQuerySet(MessageFilterValue).filter(group=obj).values_list('key', 'value'):
+                if not MessageFilterValue.objects.filter(key=key, value=value).exclude(group=obj).exists():
+                    print ">>> Removing <FilterValue: key=%s, value=%s>" % (key, value)
+                    FilterValue.objects.filter(key=key, value=value).delete()
+            print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
+            obj.delete()
diff --git a/sentry/queue/worker.py b/sentry/queue/worker.py
new file mode 100644
index 0000000000..5cf9cdf7a2
--- /dev/null
+++ b/sentry/queue/worker.py
@@ -0,0 +1,32 @@
+"""
+sentry.queue.worker
+~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from kombu.mixins import ConsumerMixin
+from kombu.utils import kwdict, reprcall
+
+from sentry.queue.queues import task_queues
+
+
+class Worker(ConsumerMixin):
+    def __init__(self, connection):
+        self.connection = connection
+
+    def get_consumers(self, Consumer, channel):
+        return [Consumer(queues=task_queues,
+                         callbacks=[self.process_task])]
+
+    def process_task(self, body, message):
+        func = body["func"]
+        args = body["args"]
+        kwargs = body["kwargs"]
+        self.info("Got task: %s", reprcall(func.__name__, args, kwargs))
+        try:
+            func(*args, **kwdict(kwargs))
+        except Exception, exc:
+            self.error("task raised exception: %r", exc)
+        message.ack()
+
diff --git a/setup.py b/setup.py
index 27cf6d95f1..7e017ae50b 100755
--- a/setup.py
+++ b/setup.py
@@ -25,9 +25,6 @@ from setuptools import setup, find_packages
 tests_require = [
     'nose==1.1.2',
     'django-nose==0.1.3',
-
-    # celery
-    'django-celery',
 ]
 
 install_requires = [
@@ -40,6 +37,8 @@ install_requires = [
     'python-daemon>=1.6',
     'eventlet>=0.9.15',
     'South>=0.7',
+    'kombu>=1.5.1',
+    'django-kombu==0.9.4',
 ]
 
 setup(
diff --git a/tests/tests.py b/tests/tests.py
index d7db8e21b9..ec61adf1ce 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -362,7 +362,7 @@ class SentryCleanupTest(TestCase):
     fixtures = ['tests/fixtures/cleanup.json']
 
     def test_simple(self):
-        from sentry.commands.cleanup import cleanup
+        from sentry.queue.tasks.cleanup import cleanup
 
         cleanup(days=1)
 
@@ -372,7 +372,7 @@ class SentryCleanupTest(TestCase):
         self.assertEquals(MessageFilterValue.objects.count(), 0)
 
     def test_logger(self):
-        from sentry.commands.cleanup import cleanup
+        from sentry.queue.tasks.cleanup import cleanup
 
         cleanup(days=1, logger='sentry')
 
@@ -400,7 +400,7 @@ class SentryCleanupTest(TestCase):
         self.assertEquals(MessageFilterValue.objects.count(), 0)
 
     def test_server_name(self):
-        from sentry.commands.cleanup import cleanup
+        from sentry.queue.tasks.cleanup import cleanup
 
         cleanup(days=1, server='dcramer.local')
 
@@ -417,7 +417,7 @@ class SentryCleanupTest(TestCase):
         self.assertEquals(MessageFilterValue.objects.count(), 0)
 
     def test_level(self):
-        from sentry.commands.cleanup import cleanup
+        from sentry.queue.tasks.cleanup import cleanup
 
         cleanup(days=1, level=logging.ERROR)
 
