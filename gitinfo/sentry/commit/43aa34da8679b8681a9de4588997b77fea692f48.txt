commit 43aa34da8679b8681a9de4588997b77fea692f48
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Fri May 15 15:40:27 2020 -0700

    ref(ui): Rename columnEditRow -> QueryField (#18834)

diff --git a/src/sentry/static/sentry/app/utils/discover/fields.tsx b/src/sentry/static/sentry/app/utils/discover/fields.tsx
index 135bb55558..cb07043137 100644
--- a/src/sentry/static/sentry/app/utils/discover/fields.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/fields.tsx
@@ -43,7 +43,7 @@ export type AggregationRefinement = string | undefined;
 // Functions and Fields are handled as subtypes to enable other
 // code to work more simply.
 // This type can be converted into a Field.field using generateFieldAsString()
-export type Column =
+export type QueryFieldValue =
   | {
       kind: 'field';
       field: string;
@@ -53,6 +53,9 @@ export type Column =
       function: [Aggregation, string, AggregationRefinement];
     };
 
+// Column is just an alias of a Query value
+export type Column = QueryFieldValue;
+
 // Refer to src/sentry/api/event_search.py
 export const AGGREGATIONS = {
   count: {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
index 15575f401d..7e30d627a2 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
@@ -16,7 +16,7 @@ import theme from 'app/utils/theme';
 import {Column, AGGREGATIONS, FIELDS, TRACING_FIELDS} from 'app/utils/discover/fields';
 
 import {FieldValue, FieldValueKind} from './types';
-import {ColumnEditRow} from './columnEditRow';
+import {QueryField} from './queryField';
 
 type Props = {
   // Input columns
@@ -346,12 +346,11 @@ class ColumnEditCollection extends React.Component<Props, State> {
           ) : (
             <span />
           )}
-          <ColumnEditRow
+          <QueryField
             fieldOptions={fieldOptions}
             gridColumns={gridColumns}
-            column={col}
-            parentIndex={i}
-            onChange={this.handleUpdateColumn}
+            fieldValue={col}
+            onChange={value => this.handleUpdateColumn(i, value)}
             takeFocus={i === this.props.columns.length - 1}
           />
           {canDelete ? (
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/queryField.tsx
similarity index 85%
rename from src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
rename to src/sentry/static/sentry/app/views/eventsV2/table/queryField.tsx
index 29614bfde3..0c420fa2bd 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/queryField.tsx
@@ -1,16 +1,16 @@
 import React, {CSSProperties} from 'react';
 import styled from '@emotion/styled';
+import cloneDeep from 'lodash/cloneDeep';
 // eslint import checks can't find types in the flow code.
 // eslint-disable-next-line import/named
 import {components, SingleValueProps, OptionProps} from 'react-select';
-import cloneDeep from 'lodash/cloneDeep';
 
-import Badge from 'app/components/badge';
 import SelectControl from 'app/components/forms/selectControl';
 import {SelectValue} from 'app/types';
 import {t} from 'app/locale';
+import Badge from 'app/components/badge';
 import space from 'app/styles/space';
-import {Column, ColumnType, AggregateParameter} from 'app/utils/discover/fields';
+import {ColumnType, AggregateParameter, QueryFieldValue} from 'app/utils/discover/fields';
 
 import {FieldValueKind, FieldValue} from './types';
 
@@ -34,12 +34,15 @@ type ParameterDescription =
 
 type Props = {
   className?: string;
-  takeFocus: boolean;
-  parentIndex: number;
-  column: Column;
-  gridColumns: number;
+  takeFocus?: boolean;
+  fieldValue: QueryFieldValue;
   fieldOptions: FieldOptions;
-  onChange: (index: number, column: Column) => void;
+  /**
+   * The number of columns to render. Columns that do not have a parameter will
+   * render an empty parameter placeholder.
+   */
+  gridColumns: number;
+  onChange: (fieldValue: QueryFieldValue) => void;
 };
 
 // Type for completing generics in react-select
@@ -48,21 +51,21 @@ type OptionType = {
   value: FieldValue;
 };
 
-class ColumnEditRow extends React.Component<Props> {
+class QueryField extends React.Component<Props> {
   handleFieldChange = ({value}) => {
-    const current = this.props.column;
-    let column: Column = cloneDeep(this.props.column);
+    const current = this.props.fieldValue;
+    let fieldValue: QueryFieldValue = cloneDeep(this.props.fieldValue);
 
     switch (value.kind) {
       case FieldValueKind.TAG:
       case FieldValueKind.FIELD:
-        column = {kind: 'field', field: value.meta.name};
+        fieldValue = {kind: 'field', field: value.meta.name};
         break;
       case FieldValueKind.FUNCTION:
         if (current.kind === 'field') {
-          column = {kind: 'function', function: [value.meta.name, '', undefined]};
+          fieldValue = {kind: 'function', function: [value.meta.name, '', undefined]};
         } else if (current.kind === 'function') {
-          column = {
+          fieldValue = {
             kind: 'function',
             function: [value.meta.name, current.function[1], current.function[2]],
           };
@@ -74,44 +77,44 @@ class ColumnEditRow extends React.Component<Props> {
 
     if (value.kind === FieldValueKind.FUNCTION) {
       value.meta.parameters.forEach((param: AggregateParameter, i: number) => {
-        if (column.kind !== 'function') {
+        if (fieldValue.kind !== 'function') {
           return;
         }
         if (param.kind === 'column') {
-          const field = this.getFieldOrTagValue(column.function[i + 1]);
+          const field = this.getFieldOrTagValue(fieldValue.function[i + 1]);
           if (field === null) {
-            column.function[i + 1] = param.defaultValue || '';
+            fieldValue.function[i + 1] = param.defaultValue || '';
           } else if (
             (field.kind === FieldValueKind.FIELD || field.kind === FieldValueKind.TAG) &&
             param.columnTypes.includes(field.meta.dataType)
           ) {
             // New function accepts current field.
-            column.function[i + 1] = field.meta.name;
+            fieldValue.function[i + 1] = field.meta.name;
           } else {
             // field does not fit within new function requirements, use the default.
-            column.function[i + 1] = param.defaultValue || '';
-            column.function[i + 2] = undefined;
+            fieldValue.function[i + 1] = param.defaultValue || '';
+            fieldValue.function[i + 2] = undefined;
           }
         }
         if (param.kind === 'value') {
-          column.function[i + 1] = param.defaultValue || '';
+          fieldValue.function[i + 1] = param.defaultValue || '';
         }
       });
 
-      if (column.kind === 'function') {
+      if (fieldValue.kind === 'function') {
         if (value.meta.parameters.length === 0) {
-          column.function = [column.function[0], '', undefined];
+          fieldValue.function = [fieldValue.function[0], '', undefined];
         } else if (value.meta.parameters.length === 1) {
-          column.function[2] = undefined;
+          fieldValue.function[2] = undefined;
         }
       }
     }
 
-    this.triggerChange(column);
+    this.triggerChange(fieldValue);
   };
 
   handleFieldParameterChange = ({value}) => {
-    const newColumn = cloneDeep(this.props.column);
+    const newColumn = cloneDeep(this.props.fieldValue);
     if (newColumn.kind === 'function') {
       newColumn.function[1] = value.meta.name;
     }
@@ -119,7 +122,7 @@ class ColumnEditRow extends React.Component<Props> {
   };
 
   handleScalarParameterChange = (value: string) => {
-    const newColumn = cloneDeep(this.props.column);
+    const newColumn = cloneDeep(this.props.fieldValue);
     if (newColumn.kind === 'function') {
       newColumn.function[1] = value;
     }
@@ -127,16 +130,15 @@ class ColumnEditRow extends React.Component<Props> {
   };
 
   handleRefinementChange = (value: string) => {
-    const newColumn = cloneDeep(this.props.column);
+    const newColumn = cloneDeep(this.props.fieldValue);
     if (newColumn.kind === 'function') {
       newColumn.function[2] = value;
     }
     this.triggerChange(newColumn);
   };
 
-  triggerChange(column: Column) {
-    const {parentIndex} = this.props;
-    this.props.onChange(parentIndex, column);
+  triggerChange(fieldValue: QueryFieldValue) {
+    this.props.onChange(fieldValue);
   }
 
   getFieldOrTagValue(name: string | undefined): FieldValue | null {
@@ -176,18 +178,18 @@ class ColumnEditRow extends React.Component<Props> {
   getFieldData() {
     let field: FieldValue | null = null;
 
-    const {column} = this.props;
+    const {fieldValue} = this.props;
     let {fieldOptions} = this.props;
 
-    if (column.kind === 'function') {
-      const funcName = `function:${column.function[0]}`;
+    if (fieldValue.kind === 'function') {
+      const funcName = `function:${fieldValue.function[0]}`;
       if (fieldOptions[funcName] !== undefined) {
         field = fieldOptions[funcName].value;
       }
     }
 
-    if (column.kind === 'field') {
-      field = this.getFieldOrTagValue(column.field);
+    if (fieldValue.kind === 'field') {
+      field = this.getFieldOrTagValue(fieldValue.field);
       fieldOptions = this.appendFieldIfUnknown(fieldOptions, field);
     }
 
@@ -197,12 +199,12 @@ class ColumnEditRow extends React.Component<Props> {
       field &&
       field.kind === FieldValueKind.FUNCTION &&
       field.meta.parameters.length > 0 &&
-      column.kind === 'function'
+      fieldValue.kind === 'function'
     ) {
       parameterDescriptions = field.meta.parameters.map(
         (param, index: number): ParameterDescription => {
           if (param.kind === 'column') {
-            const fieldParameter = this.getFieldOrTagValue(column.function[1]);
+            const fieldParameter = this.getFieldOrTagValue(fieldValue.function[1]);
             fieldOptions = this.appendFieldIfUnknown(fieldOptions, fieldParameter);
             return {
               kind: 'column',
@@ -220,7 +222,7 @@ class ColumnEditRow extends React.Component<Props> {
           return {
             kind: 'value',
             value:
-              (column.kind === 'function' && column.function[index + 1]) ||
+              (fieldValue.kind === 'function' && fieldValue.function[index + 1]) ||
               param.defaultValue ||
               '',
             dataType: param.dataType,
@@ -308,7 +310,7 @@ class ColumnEditRow extends React.Component<Props> {
             );
         }
       }
-      throw new Error(`Unknown parameter type encountered for ${this.props.column}`);
+      throw new Error(`Unknown parameter type encountered for ${this.props.fieldValue}`);
     });
 
     // Add enough disabled inputs to fill the grid up.
@@ -402,7 +404,7 @@ type InputState = {value: string};
 
 /**
  * Because controlled inputs fire onChange on every key stroke,
- * we can't update the ColumnEditRow that often as it would re-render
+ * we can't update the QueryField that often as it would re-render
  * the input elements causing focus to be lost.
  *
  * Using a buffered input lets us throttle rendering and enforce data
@@ -484,4 +486,4 @@ const BlankSpace = styled('div')`
   }
 `;
 
-export {ColumnEditRow};
+export {QueryField};
diff --git a/tests/js/spec/views/eventsV2/table/columnEditModal.spec.js b/tests/js/spec/views/eventsV2/table/columnEditModal.spec.js
index fcb7d8993e..6bec5b0009 100644
--- a/tests/js/spec/views/eventsV2/table/columnEditModal.spec.js
+++ b/tests/js/spec/views/eventsV2/table/columnEditModal.spec.js
@@ -71,7 +71,7 @@ describe('EventsV2 -> ColumnEditModal', function() {
 
     it('renders fields and basic controls', function() {
       // Should have fields equal to the columns.
-      expect(wrapper.find('ColumnEditRow')).toHaveLength(columns.length);
+      expect(wrapper.find('QueryField')).toHaveLength(columns.length);
 
       expect(wrapper.find('button[aria-label="Apply"]')).toHaveLength(1);
       expect(wrapper.find('button[aria-label="Add a Column"]')).toHaveLength(1);
@@ -101,7 +101,7 @@ describe('EventsV2 -> ColumnEditModal', function() {
     );
 
     it('renders unknown fields in field and field parameter controls', function() {
-      const funcRow = wrapper.find('ColumnEditRow').first();
+      const funcRow = wrapper.find('QueryField').first();
       expect(
         funcRow.find('SelectControl[name="field"] [data-test-id="label"]').text()
       ).toBe('count_unique(\u2026)');
@@ -109,7 +109,7 @@ describe('EventsV2 -> ColumnEditModal', function() {
         'user-defined'
       );
 
-      const fieldRow = wrapper.find('ColumnEditRow').last();
+      const fieldRow = wrapper.find('QueryField').last();
       expect(
         fieldRow.find('SelectControl[name="field"] span[data-test-id="label"]').text()
       ).toBe('user-def');
@@ -132,7 +132,7 @@ describe('EventsV2 -> ColumnEditModal', function() {
     );
 
     it('selects tag expressions that overlap fields', function() {
-      const funcRow = wrapper.find('ColumnEditRow').first();
+      const funcRow = wrapper.find('QueryField').first();
       expect(
         funcRow.find('SelectControl[name="field"] span[data-test-id="label"]').text()
       ).toBe('project');
@@ -140,7 +140,7 @@ describe('EventsV2 -> ColumnEditModal', function() {
     });
 
     it('selects tag expressions that overlap functions', function() {
-      const funcRow = wrapper.find('ColumnEditRow').last();
+      const funcRow = wrapper.find('QueryField').last();
       expect(
         funcRow.find('SelectControl[name="field"] span[data-test-id="label"]').text()
       ).toBe('count');
@@ -163,12 +163,12 @@ describe('EventsV2 -> ColumnEditModal', function() {
     );
 
     it('renders three columns when needed', function() {
-      const countRow = wrapper.find('ColumnEditRow').first();
+      const countRow = wrapper.find('QueryField').first();
       // Has a select and 2 disabled inputs
       expect(countRow.find('SelectControl')).toHaveLength(1);
       expect(countRow.find('BlankSpace')).toHaveLength(2);
 
-      const percentileRow = wrapper.find('ColumnEditRow').last();
+      const percentileRow = wrapper.find('QueryField').last();
       // two select fields, and one number input.
       expect(percentileRow.find('SelectControl')).toHaveLength(2);
       expect(percentileRow.find('BlankSpace')).toHaveLength(0);
@@ -195,7 +195,7 @@ describe('EventsV2 -> ColumnEditModal', function() {
 
       openMenu(wrapper, {name: 'parameter', at: 0, control: true});
       const options = wrapper
-        .find('ColumnEditRow SelectControl[name="parameter"] Option')
+        .find('QueryField SelectControl[name="parameter"] Option')
         .map(option => option.props().label);
 
       expect(options).not.toContain('title');
@@ -205,18 +205,18 @@ describe('EventsV2 -> ColumnEditModal', function() {
     it('shows no options for parameterless functions', function() {
       selectByLabel(wrapper, 'p95()', {name: 'field', at: 0, control: true});
 
-      expect(wrapper.find('ColumnEditRow BlankSpace')).toHaveLength(1);
+      expect(wrapper.find('QueryField BlankSpace')).toHaveLength(1);
     });
 
     it('shows additional inputs for multi-parameter functions', function() {
       selectByLabel(wrapper, 'percentile(\u2026)', {name: 'field', at: 0, control: true});
 
       // Parameter select should display and use the default value.
-      const field = wrapper.find('ColumnEditRow SelectControl[name="parameter"]');
+      const field = wrapper.find('QueryField SelectControl[name="parameter"]');
       expect(field.find('SingleValue').text()).toBe('transaction.duration');
 
       // Input should show and have default value.
-      const refinement = wrapper.find('ColumnEditRow input[inputMode="numeric"]');
+      const refinement = wrapper.find('QueryField input[inputMode="numeric"]');
       expect(refinement.props().value).toBe('0.5');
     });
 
@@ -224,7 +224,7 @@ describe('EventsV2 -> ColumnEditModal', function() {
       selectByLabel(wrapper, 'apdex(\u2026)', {name: 'field', at: 0, control: true});
 
       // Parameter select should display and use the default value.
-      const field = wrapper.find('ColumnEditRow input[name="refinement"]');
+      const field = wrapper.find('QueryField input[name="refinement"]');
       expect(field.props().value).toBe('300');
 
       // Trigger a blur and make sure the column is not wrong.
@@ -272,13 +272,13 @@ describe('EventsV2 -> ColumnEditModal', function() {
       initialData
     );
     it('allows rows to be removed, but not the last one', function() {
-      expect(wrapper.find('ColumnEditRow')).toHaveLength(2);
+      expect(wrapper.find('QueryField')).toHaveLength(2);
       wrapper
         .find('RowContainer button[aria-label="Remove column"]')
         .first()
         .simulate('click');
 
-      expect(wrapper.find('ColumnEditRow')).toHaveLength(1);
+      expect(wrapper.find('QueryField')).toHaveLength(1);
 
       // Last row cannot be removed or dragged.
       expect(
