commit 82320adbabbe8a870214ddc09f748855a1e9db48
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Wed Jan 15 18:12:18 2020 +0100

    fix(relay-projectconfigs): Do not crash on missing projects (#16464)
    
    * fix: Skip None in relay-projectconfigs endpoint
    
    * fix: Add test
    
    * fix: Add new sentinel value

diff --git a/src/sentry/api/endpoints/relay_projectconfigs.py b/src/sentry/api/endpoints/relay_projectconfigs.py
index 5128c3b5e5..f8159dd08d 100644
--- a/src/sentry/api/endpoints/relay_projectconfigs.py
+++ b/src/sentry/api/endpoints/relay_projectconfigs.py
@@ -76,7 +76,7 @@ class RelayProjectConfigsEndpoint(Endpoint):
 
         configs = {}
         for project_id in project_ids:
-            configs[six.text_type(project_id)] = None
+            configs[six.text_type(project_id)] = {"disabled": True}
 
             project = projects.get(int(project_id))
             if project is None:
@@ -114,6 +114,6 @@ class RelayProjectConfigsEndpoint(Endpoint):
                 )
 
         if full_config_requested:
-            projectconfig_cache.set_many(list(six.itervalues(configs)))
+            projectconfig_cache.set_many(configs)
 
         return Response({"configs": configs}, status=200)
diff --git a/src/sentry/relay/config.py b/src/sentry/relay/config.py
index 9f4234a13d..68e85c64ab 100644
--- a/src/sentry/relay/config.py
+++ b/src/sentry/relay/config.py
@@ -79,7 +79,7 @@ def get_project_config(project, org_options=None, full_config=True, project_keys
                 "piiConfig": _get_pii_config(project),
                 "datascrubbingSettings": _get_datascrubbing_settings(project, org_options),
             },
-            "projectId": project.id,
+            "projectId": project.id,  # XXX: Unused by Relay, required by Python store
         }
 
     if not full_config:
diff --git a/src/sentry/relay/projectconfig_cache/redis.py b/src/sentry/relay/projectconfig_cache/redis.py
index 656ec3e2a6..c70fdf8aa0 100644
--- a/src/sentry/relay/projectconfig_cache/redis.py
+++ b/src/sentry/relay/projectconfig_cache/redis.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.relay.projectconfig_cache.base import ProjectConfigCache
 from sentry.utils import json
 from sentry.utils.redis import get_dynamic_cluster_from_options, validate_dynamic_cluster
@@ -28,14 +30,14 @@ class RedisProjectConfigCache(ProjectConfigCache):
             return self.cluster.get_local_client_for_key(routing_key)
 
     def set_many(self, configs):
-        for config in configs:
+        for project_id, config in six.iteritems(configs):
             # XXX(markus): Figure out how to do pipelining here. We may have
             # multiple routing keys (-> multiple clients).
             #
             # We cannot route by org, because Relay does not know the org when
             # fetching.
 
-            key = self.__get_redis_key(config["projectId"])
+            key = self.__get_redis_key(project_id)
             client = self.__get_redis_client(key)
             client.setex(key, REDIS_CACHE_TIMEOUT, json.dumps(config))
 
diff --git a/src/sentry/tasks/relay.py b/src/sentry/tasks/relay.py
index 792bc4176e..47a62b9740 100644
--- a/src/sentry/tasks/relay.py
+++ b/src/sentry/tasks/relay.py
@@ -48,7 +48,10 @@ def update_config_cache(generate, organization_id=None, project_id=None, update_
 
     if generate:
         projectconfig_cache.set_many(
-            [get_project_config(project, full_config=True).to_dict() for project in projects]
+            {
+                project.id: get_project_config(project, full_config=True).to_dict()
+                for project in projects
+            }
         )
     else:
         projectconfig_cache.delete_many([project.id for project in projects])
diff --git a/tests/sentry/api/endpoints/test_relay_projectconfigs.py b/tests/sentry/api/endpoints/test_relay_projectconfigs.py
index 31c92f34d0..2a66efef8d 100644
--- a/tests/sentry/api/endpoints/test_relay_projectconfigs.py
+++ b/tests/sentry/api/endpoints/test_relay_projectconfigs.py
@@ -11,6 +11,7 @@ from django.core.urlresolvers import reverse
 
 from sentry.utils import safe
 from sentry.models.relay import Relay
+from sentry.models import Project
 
 from semaphore.auth import generate_key_pair
 
@@ -60,10 +61,11 @@ def setup_relay(default_project):
 
 @pytest.fixture
 def call_endpoint(client, relay, private_key, default_project):
-    def inner(full_config):
+    def inner(full_config, projects=None):
         path = reverse("sentry-api-0-relay-projectconfigs")
 
-        projects = [six.text_type(default_project.id)]
+        if projects is None:
+            projects = [six.text_type(default_project.id)]
 
         if full_config is None:
             raw_json, signature = private_key.pack({"projects": projects})
@@ -240,7 +242,7 @@ def test_untrusted_external_relays_should_not_receive_configs(
 
     cfg = result["configs"][six.text_type(default_project.id)]
 
-    assert cfg is None
+    assert cfg["disabled"]
 
 
 @pytest.fixture
@@ -278,7 +280,9 @@ def test_relay_projectconfig_cache_full_config(
         assert status_code < 400
 
     http_cfg, = six.itervalues(result["configs"])
-    [[redis_cfg]] = projectconfig_cache_set
+    call, = projectconfig_cache_set
+    assert len(call) == 1
+    redis_cfg = call[six.text_type(default_project.id)]
 
     del http_cfg["lastFetch"]
     del http_cfg["lastChange"]
@@ -286,3 +290,17 @@ def test_relay_projectconfig_cache_full_config(
     del redis_cfg["lastChange"]
 
     assert redis_cfg == http_cfg
+
+
+@pytest.mark.django_db
+def test_relay_nonexistent_project(call_endpoint, projectconfig_cache_set, task_runner):
+    wrong_id = max(p.id for p in Project.objects.all()) + 1
+
+    with task_runner():
+        result, status_code = call_endpoint(full_config=True, projects=[wrong_id])
+        assert status_code < 400
+
+    http_cfg, = six.itervalues(result["configs"])
+    assert http_cfg == {"disabled": True}
+
+    assert projectconfig_cache_set == [{six.text_type(wrong_id): http_cfg}]
diff --git a/tests/sentry/tasks/test_relay.py b/tests/sentry/tasks/test_relay.py
index 78cd9440d3..7aab134cc8 100644
--- a/tests/sentry/tasks/test_relay.py
+++ b/tests/sentry/tasks/test_relay.py
@@ -99,8 +99,8 @@ def test_invalidate(
     redis_cache,
 ):
 
-    cfg = {"projectId": default_project.id, "foo": "bar"}
-    redis_cache.set_many([cfg])
+    cfg = {"foo": "bar"}
+    redis_cache.set_many({default_project.id: cfg})
     assert redis_cache.get(default_project.id) == cfg
 
     if not entire_organization:
