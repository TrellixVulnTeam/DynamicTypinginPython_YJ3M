commit bafb4f0bc43ffa6bdc2cbf28a4a697d94c059abc
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Mar 11 23:31:37 2016 +0100

    Changes to callsign migration code
    
    * removed counter ident
    * disabled callsign prefilling
    * fixed up tests

diff --git a/src/sentry/migrations/0241_auto__add_counter__add_unique_counter_project_ident__add_field_group_s.py b/src/sentry/migrations/0241_auto__add_counter__add_unique_counter_project_ident__add_field_group_s.py
index d55c58e7ff..305bea8231 100644
--- a/src/sentry/migrations/0241_auto__add_counter__add_unique_counter_project_ident__add_field_group_s.py
+++ b/src/sentry/migrations/0241_auto__add_counter__add_unique_counter_project_ident__add_field_group_s.py
@@ -12,15 +12,11 @@ class Migration(SchemaMigration):
         # Adding model 'Counter'
         db.create_table('sentry_projectcounter', (
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.Project'])),
-            ('ident', self.gf('django.db.models.fields.CharField')(max_length=40)),
+            ('project', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.Project'], unique=True)),
             ('value', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')()),
         ))
         db.send_create_signal('sentry', ['Counter'])
 
-        # Adding unique constraint on 'Counter', fields ['project', 'ident']
-        db.create_unique('sentry_projectcounter', ['project_id', 'ident'])
-
         # Adding field 'Group.short_id'
         db.add_column('sentry_groupedmessage', 'short_id',
                       self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')(null=True),
@@ -40,20 +36,20 @@ class Migration(SchemaMigration):
         if 'postgres' in settings.DATABASES['default']['ENGINE']:
             db.execute('''
                 create function sentry_increment_project_counter(
-                    project bigint, counter text, delta int) returns int as $$
+                    project bigint, delta int) returns int as $$
                 declare
                   new_val int;
                 begin
                   loop
                     update sentry_projectcounter set value = value + delta
                      where project_id = project
-                       and ident = counter returning value into new_val;
+                       returning value into new_val;
                     if found then
                       return new_val;
                     end if;
                     begin
-                      insert into sentry_projectcounter(project_id, ident, value)
-                           values (project, counter, delta)
+                      insert into sentry_projectcounter(project_id, value)
+                           values (project, delta)
                         returning value into new_val;
                       return new_val;
                     exception when unique_violation then
@@ -72,9 +68,6 @@ class Migration(SchemaMigration):
         # Removing unique constraint on 'Group', fields ['project', 'short_id']
         db.delete_unique('sentry_groupedmessage', ['project_id', 'short_id'])
 
-        # Removing unique constraint on 'Counter', fields ['project', 'ident']
-        db.delete_unique('sentry_projectcounter', ['project_id', 'ident'])
-
         # Deleting model 'Counter'
         db.delete_table('sentry_projectcounter')
 
@@ -172,10 +165,9 @@ class Migration(SchemaMigration):
             'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
         },
         'sentry.counter': {
-            'Meta': {'unique_together': "(('project', 'ident'),)", 'object_name': 'Counter', 'db_table': "'sentry_projectcounter'"},
+            'Meta': {'object_name': 'Counter', 'db_table': "'sentry_projectcounter'"},
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'ident': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'unique': True}),
             'value': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
         },
         'sentry.event': {
diff --git a/src/sentry/migrations/0242_prefill_callsigns.py b/src/sentry/migrations/0242_prefill_callsigns.py
index a0956b1fd4..832d2ed6f6 100644
--- a/src/sentry/migrations/0242_prefill_callsigns.py
+++ b/src/sentry/migrations/0242_prefill_callsigns.py
@@ -41,6 +41,8 @@ def get_callsigns(projects):
 class Migration(DataMigration):
 
     def forwards(self, orm):
+        print 'DISABLED'
+        return
         from sentry.utils.query import RangeQuerySetWrapperWithProgressBar, \
             RangeQuerySetWrapper
         from sentry.models.counter import increment_project_counter
diff --git a/src/sentry/migrations/0243_auto__add_field_project_forced_color.py b/src/sentry/migrations/0243_auto__add_field_project_forced_color.py
index b09d1069f4..5affc522fb 100644
--- a/src/sentry/migrations/0243_auto__add_field_project_forced_color.py
+++ b/src/sentry/migrations/0243_auto__add_field_project_forced_color.py
@@ -100,11 +100,10 @@ class Migration(SchemaMigration):
             'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
         },
         'sentry.counter': {
-            'Meta': {'unique_together': "(('project', 'ident'),)", 'object_name': 'Counter', 'db_table': "'sentry_projectcounter'"},
+            'Meta': {'object_name': 'Counter', 'db_table': "'sentry_projectcounter'"},
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'ident': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
-            'value': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'unique': True}),
+            'value': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
         },
         'sentry.event': {
             'Meta': {'unique_together': "(('project_id', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group_id', 'datetime'),)"},
diff --git a/src/sentry/models/counter.py b/src/sentry/models/counter.py
index 339a14c6ab..10b0ad13b7 100644
--- a/src/sentry/models/counter.py
+++ b/src/sentry/models/counter.py
@@ -8,7 +8,7 @@ sentry.models.counter
 
 from __future__ import absolute_import
 
-from django.db import models, connection
+from django.db import connection
 
 from sentry.db.models import (
     FlexibleForeignKey, Model, sane_repr, BoundedBigIntegerField
@@ -24,24 +24,22 @@ class Counter(Model):
     """
     __core__ = False
 
-    project = FlexibleForeignKey('sentry.Project')
-    ident = models.CharField(max_length=40)
+    project = FlexibleForeignKey('sentry.Project', unique=True)
     value = BoundedBigIntegerField()
 
-    __repr__ = sane_repr('project', 'ident')
+    __repr__ = sane_repr('project')
 
     class Meta:
-        unique_together = (('project', 'ident'),)
         app_label = 'sentry'
         db_table = 'sentry_projectcounter'
 
     @classmethod
-    def increment(cls, project, name, delta=1):
+    def increment(cls, project, delta=1):
         """Increments a counter.  This can never decrement."""
-        return increment_project_counter(project, name, delta)
+        return increment_project_counter(project, delta)
 
 
-def increment_project_counter(project, name, delta=1):
+def increment_project_counter(project, delta=1):
     """This method primarily exists so that south code can use it."""
     if delta <= 0:
         raise ValueError('There is only one way, and that\'s up.')
@@ -50,24 +48,24 @@ def increment_project_counter(project, name, delta=1):
     try:
         if db.is_postgres():
             cur.execute('''
-                select sentry_increment_project_counter(%s, %s, %s)
-            ''', [project.id, name, delta])
+                select sentry_increment_project_counter(%s, %s)
+            ''', [project.id, delta])
             return cur.fetchone()[0]
         elif db.is_sqlite():
             value = cur.execute('''
                 insert or ignore into sentry_projectcounter
-                  (project_id, ident, value) values (%s, %s, 0);
-            ''', [project.id, name])
+                  (project_id, value) values (%s, 0);
+            ''', [project.id])
             value = cur.execute('''
                 select value from sentry_projectcounter
-                 where project_id = %s and ident = %s
-            ''', [project.id, name]).fetchone()[0]
+                 where project_id = %s
+            ''', [project.id]).fetchone()[0]
             while 1:
                 cur.execute('''
                     update sentry_projectcounter
                        set value = value + %s
-                     where project_id = %s and ident = %s;
-                ''', [delta, project.id, name])
+                     where project_id = %s;
+                ''', [delta, project.id])
                 changes = cur.execute('''
                     select changes();
                 ''').fetchone()[0]
@@ -76,12 +74,12 @@ def increment_project_counter(project, name, delta=1):
         elif db.is_mysql():
             cur.execute('''
                 insert into sentry_projectcounter
-                            (project_id, ident, value)
-                     values (%s, %s, @new_val := %s)
+                            (project_id, value)
+                     values (%s, @new_val := %s)
            on duplicate key
                      update value = @new_val := value + %s;
                      select @new_val;
-            ''', [project.id, name, delta, delta])
+            ''', [project.id, delta, delta])
             return cur.fetchone()[0]
         else:
             raise AssertionError("Not implemented database engine path")
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 0a58677f3c..3b55d52a2a 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -108,7 +108,7 @@ class Project(Model):
 
     def next_short_id(self):
         from sentry.models import Counter
-        return Counter.increment(self, 'short-ids')
+        return Counter.increment(self)
 
     def save(self, *args, **kwargs):
         if not self.slug:
diff --git a/tests/sentry/models/test_projectcounter.py b/tests/sentry/models/test_projectcounter.py
index b486aaea4b..52bc6aa19f 100644
--- a/tests/sentry/models/test_projectcounter.py
+++ b/tests/sentry/models/test_projectcounter.py
@@ -14,5 +14,5 @@ class ProjectCounterTest(TestCase):
         team = self.create_team(organization=org)
         project = self.create_project(team=team)
 
-        assert Counter.increment(project, 'demo', 42) == 42
-        assert Counter.increment(project, 'demo', 1) == 43
+        assert Counter.increment(project, 42) == 42
+        assert Counter.increment(project, 1) == 43
