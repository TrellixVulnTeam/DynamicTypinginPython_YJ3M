commit 81a40b91c20385a607caead2ee177ece1ea2698d
Author: Ben Vinegar <ben@benv.ca>
Date:   Fri May 27 16:52:50 2016 -0700

    Don't render pre/post frame context until expanded

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/contextLine.jsx b/src/sentry/static/sentry/app/components/events/interfaces/contextLine.jsx
new file mode 100644
index 0000000000..e155972416
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/contextLine.jsx
@@ -0,0 +1,29 @@
+import React from 'react';
+import {defined} from '../../../utils';
+
+const ContextLine = function(props) {
+  let {line, isActive} = props;
+  let liClassName = 'expandable';
+  if (isActive) {
+    liClassName += ' active';
+  }
+
+  let lineWs = '';
+  let lineCode = '';
+  if (defined(line[1]) && line[1].match) {
+    [, lineWs, lineCode] = line[1].match(/^(\s*)(.*?)$/m);
+  }
+
+  return (
+    <li className={liClassName} key={line[0]}>
+      <span className="ws">{lineWs}</span><span className="contextline">{lineCode}</span>
+    </li>
+  );
+};
+
+ContextLine.propTypes = {
+  line: React.PropTypes.array.isRequired,
+  isActive: React.PropTypes.number,
+};
+
+export default ContextLine;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index d9e609050c..9f0184d3d0 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -5,6 +5,7 @@ import {defined, objectIsEmpty, isUrl} from '../../../utils';
 
 import TooltipMixin from '../../../mixins/tooltip';
 import FrameVariables from './frameVariables';
+import ContextLine from './contextLine';
 import {t} from '../../../locale';
 
 function trimPackage(pkg) {
@@ -158,9 +159,10 @@ const Frame = React.createClass({
   renderContext() {
     let data = this.props.data;
     let context = '';
+    let {isExpanded} = this.state;
 
     let outerClassName = 'context';
-    if (this.state.isExpanded) {
+    if (isExpanded) {
       outerClassName += ' expanded';
     }
 
@@ -168,6 +170,10 @@ const Frame = React.createClass({
     let hasContextVars = this.hasContextVars();
     let expandable = this.isExpandable();
 
+    let contextLines = isExpanded
+      ? data.context
+      : data.context && data.context.filter(l => l[0] === data.lineNo);
+
     if (hasContextSource || hasContextVars) {
       let startLineNo = hasContextSource ? data.context[0][0] : '';
       context = (
@@ -177,27 +183,8 @@ const Frame = React.createClass({
           <li className={expandable ? 'expandable error' : 'error'}
               key="errors">{data.errors.join(', ')}</li>
           }
-          {(data.context || []).map((line) => {
-            let liClassName = 'expandable';
-            if (line[0] === data.lineNo) {
-              liClassName += ' active';
-            }
-
-            let lineWs;
-            let lineCode;
-            if (defined(line[1]) && line[1].match) {
-              [, lineWs, lineCode] = line[1].match(/^(\s*)(.*?)$/m);
-            } else {
-              lineWs = '';
-              lineCode = '';
-            }
-            return (
-              <li className={liClassName} key={line[0]}>
-                <span className="ws">{
-                lineWs}</span><span className="contextline">{lineCode
-                }</span>
-              </li>
-            );
+          {data.context && contextLines.map((line, index) => {
+            return <ContextLine key={index} line={line} isActive={data.lineNo === line[0]}/>;
           })}
 
           {hasContextVars &&
