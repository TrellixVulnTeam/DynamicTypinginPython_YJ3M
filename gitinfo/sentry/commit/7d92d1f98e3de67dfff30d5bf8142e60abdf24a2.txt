commit 7d92d1f98e3de67dfff30d5bf8142e60abdf24a2
Author: Max Bittker <maxbittker@gmail.com>
Date:   Tue Mar 20 14:18:03 2018 -0700

    fix(assigneeSelector): filter teams correctly (#7704)

diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index 212d2569ff..0297e007a8 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -35,13 +35,14 @@ const AssigneeSelector = createReactClass({
   ],
 
   statics: {
-    filterMembers(memberList, filter) {
-      if (!memberList) return [];
-      if (!filter) return memberList;
+    filterAssignees(itemList, filter) {
+      if (!itemList) return [];
+      if (!filter) return itemList;
 
       filter = filter.toLowerCase();
-      return memberList.filter(item => {
-        let fullName = [item.name, item.email].join(' ').toLowerCase();
+
+      return itemList.filter(item => {
+        let fullName = [item.name, item.email, item.slug].join(' ').toLowerCase();
 
         return fullName.indexOf(filter) !== -1;
       });
@@ -108,9 +109,12 @@ const AssigneeSelector = createReactClass({
   assignableTeams() {
     let group = GroupStore.get(this.props.id);
 
-    return (ProjectsStore.getAll().find(p => p.slug == group.project.slug) || {
-      teams: [],
-    }).teams.map(team => ({
+    return AssigneeSelector.filterAssignees(
+      (ProjectsStore.getAll().find(p => p.slug == group.project.slug) || {
+        teams: [],
+      }).teams,
+      this.state.filter
+    ).map(team => ({
       id: buildTeamId(team.id),
       display: `#${team.slug}`,
       email: team.id,
@@ -157,7 +161,7 @@ const AssigneeSelector = createReactClass({
 
   onFilterKeyDown(evt) {
     if (evt.key === 'Enter' && this.state.filter) {
-      let members = AssigneeSelector.filterMembers(
+      let members = AssigneeSelector.filterAssignees(
         this.state.memberList,
         this.state.filter
       );
@@ -210,7 +214,7 @@ const AssigneeSelector = createReactClass({
 
   renderMemberNodes() {
     let {filter, memberList} = this.state;
-    let members = AssigneeSelector.filterMembers(memberList, filter);
+    let members = AssigneeSelector.filterAssignees(memberList, filter);
     members = AssigneeSelector.putSessionUserFirst(members);
 
     return members && members.length ? (
@@ -239,10 +243,7 @@ const AssigneeSelector = createReactClass({
     let features = new Set(org.features);
 
     if (features.has('new-teams')) {
-      teamNodes = AssigneeSelector.filterMembers(
-        this.assignableTeams(),
-        filter
-      ).map(({id, display, team}) => {
+      teamNodes = this.assignableTeams().map(({id, display, team}) => {
         return (
           <MenuItem key={id} onSelect={this.assignToTeam.bind(this, team)}>
             <TeamAvatar team={team} className="avatar" size={48} />
diff --git a/tests/js/spec/components/assigneeSelector.spec.jsx b/tests/js/spec/components/assigneeSelector.spec.jsx
index 6c84fcbfe6..ccf86fcbaf 100644
--- a/tests/js/spec/components/assigneeSelector.spec.jsx
+++ b/tests/js/spec/components/assigneeSelector.spec.jsx
@@ -74,28 +74,28 @@ describe('AssigneeSelector', function() {
   });
 
   describe('statics', function() {
-    const filterMembers = AssigneeSelector.filterMembers;
+    const filterAssignees = AssigneeSelector.filterAssignees;
 
-    describe('filterMembers()', function() {
+    describe('filterAssignees()', function() {
       it('should return the full array when filter is falsy', function() {
-        expect(filterMembers([USER_1, USER_2], '')).toEqual([USER_1, USER_2]);
-        expect(filterMembers([USER_1, USER_2], null)).toEqual([USER_1, USER_2]);
-        expect(filterMembers([USER_1, USER_2], undefined)).toEqual([USER_1, USER_2]);
+        expect(filterAssignees([USER_1, USER_2], '')).toEqual([USER_1, USER_2]);
+        expect(filterAssignees([USER_1, USER_2], null)).toEqual([USER_1, USER_2]);
+        expect(filterAssignees([USER_1, USER_2], undefined)).toEqual([USER_1, USER_2]);
       });
 
       it('should match on email', function() {
-        expect(filterMembers([USER_1, USER_2], 'johnsmith@example.com')).toEqual([
+        expect(filterAssignees([USER_1, USER_2], 'johnsmith@example.com')).toEqual([
           USER_2,
         ]);
       });
 
       it('should match on name', function() {
-        expect(filterMembers([USER_1, USER_2], 'John Smith')).toEqual([USER_2]);
+        expect(filterAssignees([USER_1, USER_2], 'John Smith')).toEqual([USER_2]);
       });
 
       it('should ignore capitalization', function() {
-        expect(filterMembers([USER_1], 'Jane')).toEqual([USER_1]);
-        expect(filterMembers([USER_1], 'jane')).toEqual([USER_1]);
+        expect(filterAssignees([USER_1], 'Jane')).toEqual([USER_1]);
+        expect(filterAssignees([USER_1], 'jane')).toEqual([USER_1]);
       });
     });
 
