commit 5a3f5ade3d13ff1dc0e7e3e4bf03a0e685662674
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Oct 29 13:46:11 2018 -0700

    ref(discover): Refactor pagelinks, stores current cursor value (#10306)
    
    Only store the required cursor information in result manager, rather
    than the entire header object. We also store a "current" value for the
    cursor. This can be used to determine the active page.

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/pagination.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/pagination.jsx
index eb81ba076e..0cdab9f3e2 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/pagination.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/pagination.jsx
@@ -9,11 +9,10 @@ export default class Pagination extends React.Component {
   static propTypes = {
     getNextPage: PropTypes.func.isRequired,
     getPreviousPage: PropTypes.func.isRequired,
-    previous: PropTypes.object,
-    next: PropTypes.object,
+    previous: PropTypes.string,
+    next: PropTypes.string,
   };
 
-
   render() {
     const {getPreviousPage, getNextPage, previous, next} = this.props;
 
@@ -21,14 +20,14 @@ export default class Pagination extends React.Component {
       <PaginationButtons className="btn-group">
         <Button
           className="btn"
-          disabled={previous && !previous.results}
+          disabled={!previous}
           size="xsmall"
           icon="icon-chevron-left"
           onClick={getPreviousPage}
         />
         <Button
           className="btn"
-          disabled={next && !next.results}
+          disabled={!next}
           size="xsmall"
           icon="icon-chevron-right"
           onClick={getNextPage}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx
index e24ee877c0..19a0047942 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx
@@ -26,22 +26,15 @@ export default function createResultManager(queryBuilder) {
     const query = queryBuilder.getExternal();
     const baseQuery = queryBuilder.getQueryByType(query, 'baseQuery');
 
-    let results, cursor;
+    const cursor = data.baseQuery[pageToFetch];
 
-    if (data.baseQuery[pageToFetch]) {
-      results = data.baseQuery[pageToFetch].results;
-      cursor = data.baseQuery[pageToFetch].cursor;
-    }
-
-    if (results) {
+    if (cursor) {
       return queryBuilder.fetch(baseQuery, cursor).then(resp => {
+        data.baseQuery.current = cursor;
         data.baseQuery.query = query;
         data.baseQuery.data = resp;
-        if (resp.pageLinks) {
-          const links = parseLinkHeader(resp.pageLinks);
-          data.baseQuery.next = links.next;
-          data.baseQuery.previous = links.previous;
-        }
+        updatePageLinks(resp.pageLinks);
+
         return data;
       });
     }
@@ -81,11 +74,8 @@ export default function createResultManager(queryBuilder) {
     return Promise.all(promises).then(resp => {
       data.baseQuery.query = query;
       data.baseQuery.data = resp[0];
-      if (resp[0].pageLinks) {
-        const links = parseLinkHeader(resp[0].pageLinks);
-        data.baseQuery.next = links.next;
-        data.baseQuery.previous = links.previous;
-      }
+      data.baseQuery.current = '0:0:1';
+      updatePageLinks(resp[0].pageLinks);
 
       if (hasAggregations) {
         data.byDayQuery.query = byDayQuery;
@@ -98,6 +88,20 @@ export default function createResultManager(queryBuilder) {
     });
   }
 
+  /**
+   * Parses the Links header and sets the relevant next and previous cursor
+   * values on the data object
+   *
+   * @param {Object} pageLinks
+   * @returns {Void}
+   */
+  function updatePageLinks(pageLinks) {
+    if (!pageLinks) return;
+    const links = parseLinkHeader(pageLinks);
+    data.baseQuery.next = links.next.results ? links.next.cursor : null;
+    data.baseQuery.previous = links.previous.results ? links.previous.cursor : null;
+  }
+
   /**
    * Resets data for all visualizations.
    *
@@ -108,13 +112,13 @@ export default function createResultManager(queryBuilder) {
   }
 
   /**
-   * Resets all data
+   * Returns default data object to store results of all queries
    *
    * @returns {Object}
    */
   function getDefault() {
     return {
-      baseQuery: {query: null, data: null, next: null, previous: null},
+      baseQuery: {query: null, data: null, next: null, previous: null, current: null},
       byDayQuery: {query: null, data: null},
     };
   }
