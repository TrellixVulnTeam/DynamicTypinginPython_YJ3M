commit 514127d8f7499f6d6a5832a20dc47b2baccde6f7
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jan 28 00:55:54 2014 -0800

    Instrument Celery tasks with statsd

diff --git a/setup.py b/setup.py
index 3d58bc3036..d233a58490 100755
--- a/setup.py
+++ b/setup.py
@@ -76,6 +76,7 @@ install_requires = [
     'django-picklefield>=0.3.0,<0.4.0',
     'django-social-auth>=0.7.28,<0.8.0',
     'django-static-compiler>=0.3.0,<0.4.0',
+    'django-statsd-mozilla>=0.3.8.0,<0.3.9.0',
     'django-templatetag-sugar>=0.1.0,<0.2.0',
     'djangorestframework>=2.3.8,<2.4.0',
     'email-reply-parser>=0.2.0,<0.3.0',
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 0e763c11d7..9c9443c86a 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -437,6 +437,7 @@ REST_FRAMEWORK = {
     'TEST_REQUEST_DEFAULT_FORMAT': 'json',
 }
 
+STATSD_CLIENT = 'django_statsd.clients.null'
 
 # Sentry and Raven configuration
 
diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index 28971da115..846e091821 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -919,7 +919,7 @@ class Exception(Interface):
 
         output = []
         for exc in self.values:
-            output.append('{0}: {1}\n'.format(exc.type, exc.value))
+            output.append(u'{0}: {1}\n'.format(exc.type, exc.value))
             if exc.stacktrace:
                 output.append(exc.stacktrace.get_stacktrace(
                     event, system_frames=False, max_frames=5,
diff --git a/src/sentry/tasks/base.py b/src/sentry/tasks/base.py
new file mode 100644
index 0000000000..d9c1fa69de
--- /dev/null
+++ b/src/sentry/tasks/base.py
@@ -0,0 +1,21 @@
+"""
+sentry.tasks.base
+~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from celery.task import task
+from django_statsd.clients import statsd
+from functools import wraps
+
+
+def instrumented_task(name, queue, **kwargs):
+    def wrapped(func):
+        @wraps(func)
+        def _wrapped(*args, **kwargs):
+            with statsd.timer('tasks.{name}'.format(name=name)):
+                return func(*args, **kwargs)
+        return task(name=name, queue=queue, **kwargs)(func)
+    return wrapped
diff --git a/src/sentry/tasks/check_alerts.py b/src/sentry/tasks/check_alerts.py
index 19511c8cbd..7c37d17a92 100644
--- a/src/sentry/tasks/check_alerts.py
+++ b/src/sentry/tasks/check_alerts.py
@@ -5,12 +5,13 @@ sentry.tasks.check_alerts
 :copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-from __future__ import division
+
+from __future__ import absolute_import, division
 
 from datetime import timedelta
-from celery.task import task
 from django.utils import timezone
 from sentry.constants import MINUTE_NORMALIZATION
+from sentry.tasks.base import instrumented_task
 from sentry.utils import math
 
 
@@ -21,7 +22,7 @@ def fsteps(start, stop, steps):
         start += step
 
 
-@task(name='sentry.tasks.check_alerts', queue='alerts')
+@instrumented_task(name='sentry.tasks.check_alerts', queue='alerts')
 def check_alerts(**kwargs):
     """
     Iterates all current keys and fires additional tasks to check each individual
@@ -35,7 +36,8 @@ def check_alerts(**kwargs):
     min_date = max_date - timedelta(minutes=MINUTE_NORMALIZATION)
 
     # find each project which has data for the last interval
-    # TODO: we could force more work on the db by eliminating onces which don't have the full aggregate we need
+    # TODO: we could force more work on the db by eliminating onces which don't
+    # have the full aggregate we need
     qs = ProjectCountByMinute.objects.filter(
         date__lte=max_date,
         date__gt=min_date,
@@ -52,11 +54,12 @@ def check_alerts(**kwargs):
         )
 
 
-@task(name='sentry.tasks.check_alerts.check_project_alerts', queue='alerts')
+@instrumented_task(name='sentry.tasks.check_alerts.check_project_alerts', queue='alerts')
 def check_project_alerts(project_id, when, count, **kwargs):
     """
-    Given 'when' and 'count', which should signify recent times we compare it to historical data for this project
-    and if over a given threshold, create an alert.
+    Given 'when' and 'count', which should signify recent times we compare it to
+    historical data for this project and if over a given threshold, create an
+    alert.
     """
     from sentry.constants import DEFAULT_ALERT_PROJECT_THRESHOLD
     from sentry.models import ProjectCountByMinute, ProjectOption, Alert
diff --git a/src/sentry/tasks/check_update.py b/src/sentry/tasks/check_update.py
index e4dddbb95f..e95885a7d2 100644
--- a/src/sentry/tasks/check_update.py
+++ b/src/sentry/tasks/check_update.py
@@ -5,12 +5,15 @@ sentry.tasks.check_version
 :copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+
+from __future__ import absolute_import
+
 import json
 import logging
 
-from celery.task import task
 from simplejson import JSONDecodeError
 
+from sentry.tasks.base import instrumented_task
 from sentry.tasks.fetch_source import fetch_url_content, BAD_SOURCE
 
 PYPI_URL = 'https://pypi.python.org/pypi/sentry/json'
@@ -18,7 +21,7 @@ PYPI_URL = 'https://pypi.python.org/pypi/sentry/json'
 logger = logging.getLogger(__name__)
 
 
-@task(name='sentry.tasks.check_update', queue='update')
+@instrumented_task(name='sentry.tasks.check_update', queue='update')
 def check_update():
     """
     Daily retrieving latest available Sentry version from PyPI
diff --git a/src/sentry/tasks/cleanup.py b/src/sentry/tasks/cleanup.py
index 77098d38cc..92424624c7 100644
--- a/src/sentry/tasks/cleanup.py
+++ b/src/sentry/tasks/cleanup.py
@@ -6,10 +6,10 @@ sentry.tasks.cleanup
 :license: BSD, see LICENSE for more details.
 """
 
-from celery.task import task
+from sentry.tasks.base import instrumented_task
 
 
-@task(name='sentry.tasks.cleanup.cleanup', queue='cleanup')
+@instrumented_task(name='sentry.tasks.cleanup.cleanup', queue='cleanup')
 def cleanup(days=30, project=None, chunk_size=1000, **kwargs):
     """
     Deletes a portion of the trailing data in Sentry based on
diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index aca28b6a2e..bd03a30236 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -6,10 +6,12 @@ sentry.tasks.deletion
 :license: BSD, see LICENSE for more details.
 """
 
-from celery.task import task
+from __future__ import absolute_import
 
+from sentry.tasks.base import instrumented_task
 
-@task(name='sentry.tasks.deletion.delete_project', queue='cleanup')
+
+@instrumented_task(name='sentry.tasks.deletion.delete_project', queue='cleanup')
 def delete_project(object_id, **kwargs):
     from sentry.constants import STATUS_HIDDEN
     from sentry.models import (
@@ -46,7 +48,7 @@ def delete_project(object_id, **kwargs):
     p.delete()
 
 
-@task(name='sentry.tasks.deletion.delete_group', queue='cleanup')
+@instrumented_task(name='sentry.tasks.deletion.delete_group', queue='cleanup')
 def delete_group(object_id, **kwargs):
     from sentry.models import Group
 
diff --git a/src/sentry/tasks/email.py b/src/sentry/tasks/email.py
index e2fc44639e..40a03a63d1 100644
--- a/src/sentry/tasks/email.py
+++ b/src/sentry/tasks/email.py
@@ -5,8 +5,12 @@ sentry.tasks.email
 :copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+
+from __future__ import absolute_import
+
 import logging
-from celery.task import task
+
+from sentry.tasks.base import instrumented_task
 
 logger = logging.getLogger(__name__)
 
@@ -25,7 +29,9 @@ def _get_user_from_email(group, email):
         return user
 
 
-@task(name='sentry.tasks.email.process_inbound_email', queue='email')
+@instrumented_task(
+    name='sentry.tasks.email.process_inbound_email',
+    queue='email')
 def process_inbound_email(mailfrom, group_id, payload):
     """
     """
diff --git a/src/sentry/tasks/index.py b/src/sentry/tasks/index.py
index 9ce4e43f0a..0240939a5b 100644
--- a/src/sentry/tasks/index.py
+++ b/src/sentry/tasks/index.py
@@ -8,10 +8,10 @@ sentry.tasks.index
 
 from __future__ import absolute_import
 
-from celery.task import task
+from sentry.tasks.base import instrumented_task
 
 
-@task(name='sentry.tasks.index.index_event', queue='search')
+@instrumented_task(name='sentry.tasks.index.index_event', queue='search')
 def index_event(event, **kwargs):
     from sentry import app
 
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 811d5746e0..eee585e2d5 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -6,15 +6,19 @@ sentry.tasks.post_process
 :license: BSD, see LICENSE for more details.
 """
 
-from celery.task import task
+from __future__ import absolute_import
+
 from hashlib import md5
 
 from django.conf import settings
 from sentry.plugins import plugins
+from sentry.tasks.base import instrumented_task
 from sentry.utils.safe import safe_execute
 
 
-@task(name='sentry.tasks.post_process.post_process_group', queue='triggers')
+@instrumented_task(
+    name='sentry.tasks.post_process.post_process_group',
+    queue='triggers')
 def post_process_group(group, event, **kwargs):
     """
     Fires post processing hooks for a group.
@@ -27,7 +31,7 @@ def post_process_group(group, event, **kwargs):
     record_affected_user.delay(group=group, event=event)
 
 
-@task(
+@instrumented_task(
     name='sentry.tasks.post_process.plugin_post_process_group',
     queue='triggers')
 def plugin_post_process_group(plugin_slug, group, **kwargs):
@@ -38,7 +42,7 @@ def plugin_post_process_group(plugin_slug, group, **kwargs):
     safe_execute(plugin.post_process, group=group, **kwargs)
 
 
-@task(
+@instrumented_task(
     name='sentry.tasks.post_process.record_affected_user',
     queue='triggers')
 def record_affected_user(group, event, **kwargs):
@@ -64,7 +68,7 @@ def record_affected_user(group, event, **kwargs):
     ])
 
 
-@task(
+@instrumented_task(
     name='sentry.tasks.post_process.record_affected_code',
     queue='triggers')
 def record_affected_code(group, event, **kwargs):
diff --git a/src/sentry/tasks/process_buffer.py b/src/sentry/tasks/process_buffer.py
index 2fb6baca87..042a307e43 100644
--- a/src/sentry/tasks/process_buffer.py
+++ b/src/sentry/tasks/process_buffer.py
@@ -6,10 +6,14 @@ sentry.tasks.process_buffer
 :license: BSD, see LICENSE for more details.
 """
 
-from celery.task import task
+from __future__ import absolute_import
 
+from sentry.tasks.base import instrumented_task
 
-@task(name='sentry.tasks.process_buffer.process_pending', queue='counters')
+
+@instrumented_task(
+    name='sentry.tasks.process_buffer.process_pending',
+    queue='counters')
 def process_pending():
     """
     Process pending buffers.
@@ -19,7 +23,9 @@ def process_pending():
     app.buffer.process_pending()
 
 
-@task(name='sentry.tasks.process_buffer.process_incr', queue='counters')
+@instrumented_task(
+    name='sentry.tasks.process_buffer.process_incr',
+    queue='counters')
 def process_incr(**kwargs):
     """
     Processes a buffer event.
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index bd76cb046b..4dee400d55 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -6,11 +6,15 @@ sentry.tasks.store
 :license: BSD, see LICENSE for more details.
 """
 
-from celery.task import task
+from __future__ import absolute_import
+
 from django.conf import settings
+from sentry.tasks.base import instrumented_task
 
 
-@task(name='sentry.tasks.store.preprocess_event', queue='events')
+@instrumented_task(
+    name='sentry.tasks.store.preprocess_event',
+    queue='events')
 def preprocess_event(data, **kwargs):
     from sentry.tasks.fetch_source import expand_javascript_source
 
@@ -26,7 +30,9 @@ def preprocess_event(data, **kwargs):
         save_event.delay(data=data)
 
 
-@task(name='sentry.tasks.store.save_event', queue='events')
+@instrumented_task(
+    name='sentry.tasks.store.save_event',
+    queue='events')
 def save_event(data, **kwargs):
     """
     Saves an event to the database.
@@ -36,7 +42,9 @@ def save_event(data, **kwargs):
     Group.objects.save_data(data.pop('project'), data)
 
 
-@task(name='sentry.tasks.store.store_event', queue='events')
+@instrumented_task(
+    name='sentry.tasks.store.store_event',
+    queue='events')
 def store_event(data, **kwargs):
     """
     Saves an event to the database.
