commit fbda09d1e19ebe79141532bd4cc8aca45c328bf6
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Nov 26 12:51:01 2015 +0100

    Marked groupActivity translatable

diff --git a/src/sentry/static/sentry/app/views/groupActivity/index.jsx b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
index 8ab0298091..5c0269f8f7 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/index.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
@@ -10,64 +10,89 @@ import Version from '../../components/version';
 
 import NoteContainer from './noteContainer';
 import NoteInput from './noteInput';
+import {t, tct} from '../../locale';
 
-let formatActivity = function(item, params) {
-  let data = item.data;
-  let {orgId, projectId} = params;
-
-  switch(item.type) {
-    case 'note':
-      return 'left a comment';
-    case 'set_resolved':
-      return 'marked this issue as resolved';
-    case 'set_resolved_in_release':
-      return (data.version ?
-        <span>marked this issue as resolved in <Version version={data.version} orgId={orgId} projectId={projectId} /></span>
-      :
-        'marked this issue as resolved in the upcoming release'
-      );
-    case 'set_unresolved':
-      return 'marked this issue as unresolved';
-    case 'set_muted':
-      if (data.snoozeDuration) {
-        return <span>snoozed this issue for <Duration seconds={data.snoozeDuration * 60} /></span>;
-      }
-      return 'muted this issue';
-    case 'set_public':
-      return 'made this issue public';
-    case 'set_private':
-      return 'made this issue private';
-    case 'set_regression':
-      return (data.version ?
-        <span>marked this issue as a regression in <Version version={data.version} orgId={orgId} projectId={projectId} /></span>
-      :
-        'marked this issue as a regression'
-      );
-    case 'create_issue':
-      return <span>created an issue on {data.provider} titled <a href={data.location}>{data.title}</a></span>;
-    case 'first_seen':
-      return 'first saw this issue';
-    case 'assigned':
-      let assignee;
-      if (data.assignee === item.user.id) {
-        assignee = 'themselves';
-      } else {
-        assignee = MemberListStore.getById(data.assignee);
-        assignee = (assignee ? assignee.email : 'an unknown user');
-      }
-      return `assigned this event to ${assignee}`;
-    case 'unassigned':
-      return 'unassigned this issue';
-    default:
-      return ''; // should never hit (?)
-  }
-};
 
 const GroupActivity = React.createClass({
   // TODO(dcramer): only re-render on group/activity change
 
   mixins: [GroupState],
 
+  formatActivity(author, item, params) {
+    let data = item.data;
+    let {orgId, projectId} = params;
+
+    switch(item.type) {
+      case 'note':
+        return t('%s left a comment', author);
+      case 'set_resolved':
+        return t('%s marked this issue as resolved', author);
+      case 'set_resolved_in_release':
+        return (data.version ?
+          t('%(author)s marked this issue as resolved in %(version)s', {
+            author,
+            <Version version={data.version} orgId={orgId} projectId={projectId} />
+          })
+        :
+          t('%s marked this issue as resolved in the upcoming release')
+        );
+      case 'set_unresolved':
+        return t('%s marked this issue as unresolved');
+      case 'set_muted':
+        if (data.snoozeDuration) {
+          return t('%(author)s snoozed this issue for %(duration)s', {
+            author: author,
+            duration: <Duration seconds={data.snoozeDuration * 60} />
+          });
+        }
+        return t('%s muted this issue', author);
+      case 'set_public':
+        return t('%s made this issue public', author);
+      case 'set_private':
+        return t('%s made this issue private', author);
+      case 'set_regression':
+        return (data.version ?
+          t('%(author)s marked this issue as a regression in %(version)s', {
+            author: author,
+            version: <Version version={data.version} orgId={orgId} projectId={projectId} />
+          })
+        :
+          t('%s marked this issue as a regression', author)
+        );
+      case 'create_issue':
+        return t('created an issue on %(provider)s titled %(title)s', {
+          provider: data.provider,
+          title: <a href={data.location}>{data.title}</a>
+        });
+      case 'first_seen':
+        return t('%s first saw this issue', author);
+      case 'assigned':
+        let assignee;
+        if (data.assignee === item.user.id) {
+          assignee = 'themselves';
+          return t('%s assigned this event to themselves', author);
+        } else {
+          assignee = MemberListStore.getById(data.assignee);
+          if (assignee.email) {
+            return t('%(author)s assigned this event to %(assignee)s', {
+              author: author,
+              assignee: assignee.email
+            });
+          } else {
+            return t('%s assigned this event to an unknown user', author);
+          }
+        }
+        return t('%(author)s assigned this event to %(assignee)s', {
+          author: author,
+          assignee: assignee.email
+        });
+      case 'unassigned':
+        return t('%s unassigned this issue', author);
+      default:
+        return ''; // should never hit (?)
+    }
+  },
+
   render() {
     let group = this.props.group;
     let me = ConfigStore.get('user');
@@ -82,8 +107,6 @@ const GroupActivity = React.createClass({
         avatar: avatar,
       };
 
-      let label = formatActivity(item, this.props.params);
-
       if (item.type === 'note') {
         return (
           <NoteContainer group={group} item={item} key={itemIdx} author={author} />
@@ -93,7 +116,14 @@ const GroupActivity = React.createClass({
           <li className="activity-item" key={itemIdx}>
             <TimeSince date={item.dateCreated} />
             <div className="activity-item-content">
-              {author.avatar} <span className="activity-author">{author.name}</span> {label}
+              {this.formatActivity(
+                <span>
+                  author.avatar,
+                  <span className="activity-author">author.name</span>
+                </span>,
+                item,
+                this.props.params
+              )}
             </div>
           </li>
         );
diff --git a/src/sentry/static/sentry/app/views/groupActivity/note.jsx b/src/sentry/static/sentry/app/views/groupActivity/note.jsx
index 9f35fcd059..0c0eaa36d4 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/note.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/note.jsx
@@ -3,6 +3,7 @@ import React from 'react';
 import TimeSince from '../../components/timeSince';
 import ConfigStore from '../../stores/configStore';
 import LinkWithConfirmation from '../../components/linkWithConfirmation';
+import {t} from '../../locale';
 
 marked.setOptions({
   // Disable all HTML input and only accept Markdown
@@ -25,11 +26,11 @@ const Note = React.createClass({
         <div className="activity-author">{author.name}
         {this.canEdit() &&
           <span className="editor-tools">
-            <a onClick={onEdit}>Edit</a>
+            <a onClick={onEdit}>{t('Edit')}</a>
             <LinkWithConfirmation
               className="danger"
-              message="Are you sure you wish to delete this comment?"
-              onConfirm={onDelete}>Remove</LinkWithConfirmation>
+              message={t('Are you sure you wish to delete this comment?')}
+              onConfirm={onDelete}>{t('Remove')}</LinkWithConfirmation>
           </span>
         }
         </div>
diff --git a/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx b/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx
index 6937dcbffb..d85445917d 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx
@@ -5,6 +5,7 @@ import GroupStore from '../../stores/groupStore';
 
 import Note from './note';
 import NoteInput from './noteInput';
+import {t} from '../../locale';
 
 const NoteContainer = React.createClass({
   getInitialState() {
@@ -24,7 +25,7 @@ const NoteContainer = React.createClass({
   onDelete() {
     let {group, item} = this.props;
 
-    let loadingIndicator = IndicatorStore.add('Removing comment..');
+    let loadingIndicator = IndicatorStore.add(t('Removing comment..'));
 
     // Optimistically remove from UI
     let index = GroupStore.removeActivity(group.id, item.id);
diff --git a/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx b/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx
index 59c3193dda..7998b2052d 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx
@@ -5,10 +5,14 @@ import GroupStore from '../../stores/groupStore';
 import IndicatorStore from '../../stores/indicatorStore';
 import {logException} from '../../utils/logging';
 import {getItem, setItem} from '../../utils/localStorage';
+import {t} from '../../locale';
 
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 const localStorageKey = 'noteinput:latest';
-const DEFAULT_ERROR_JSON = {detail: 'Unknown error. Please try again.'};
+
+function makeDefaultErrorJson() {
+  return {detail: t('Unknown error. Please try again.')};
+}
 
 const NoteInput = React.createClass({
   mixins: [PureRenderMixin],
@@ -89,7 +93,7 @@ const NoteInput = React.createClass({
   create() {
     let {group} = this.props;
 
-    let loadingIndicator = IndicatorStore.add('Posting comment..');
+    let loadingIndicator = IndicatorStore.add(t('Posting comment..'));
 
     api.request('/groups/' + group.id + '/notes/', {
       method: 'POST',
@@ -101,7 +105,7 @@ const NoteInput = React.createClass({
           loading: false,
           preview: false,
           error: true,
-          errorJSON: error.responseJSON || DEFAULT_ERROR_JSON
+          errorJSON: error.responseJSON || makeDefaultErrorJson()
         });
       },
       success: (data) => {
@@ -123,7 +127,7 @@ const NoteInput = React.createClass({
   update() {
     let {group, item} = this.props;
 
-    let loadingIndicator = IndicatorStore.add('Updating comment..');
+    let loadingIndicator = IndicatorStore.add(t('Updating comment..'));
 
     api.request('/groups/' + group.id + '/notes/' + item.id + '/', {
       method: 'PUT',
@@ -135,7 +139,7 @@ const NoteInput = React.createClass({
           loading: false,
           preview: false,
           error: true,
-          errorJSON: error.responseJSON || DEFAULT_ERROR_JSON
+          errorJSON: error.responseJSON || makeDefaultErrorJson()
         });
       },
       success: (data) => {
@@ -202,20 +206,22 @@ const NoteInput = React.createClass({
       classNames += ' loading';
     }
 
-    let btnText = updating ? 'Save' : 'Post';
+    let btnText = updating ? t('Save Comment') : t('Post Comment');
 
     return (
       <form className={classNames} onSubmit={this.onSubmit}>
         <div className="activity-notes">
           <ul className="nav nav-tabs">
             <li className={!preview ? 'active' : ''}>
-              <a onClick={this.toggleEdit}>{updating ? 'Edit' : 'Write'}</a>
+              <a onClick={this.toggleEdit}>{updating ? t('Edit') : t('Write')}</a>
             </li>
             <li className={preview ? 'active' : ''}>
               <a onClick={this.togglePreview}>Preview</a>
             </li>
             <li className="markdown">
-              <span className="icon-markdown" /><span className="supported">Markdown supported</span>
+              <span className="icon-markdown" /><span className="supported">
+                {t('Markdown supported')}
+              </span>
             </li>
           </ul>
           {preview ?
@@ -235,9 +241,9 @@ const NoteInput = React.createClass({
               <small className="error">{errorJSON.detail}</small>
             }
             <button className="btn btn-default" type="submit"
-                    disabled={loading}>{btnText} Comment</button>
+                    disabled={loading}>{btnText}</button>
             {updating &&
-              <button className="btn btn-danger" onClick={this.onCancel}>Cancel</button>}
+              <button className="btn btn-danger" onClick={this.onCancel}>{t('Cancel')}</button>}
           </div>
         </div>
       </form>
