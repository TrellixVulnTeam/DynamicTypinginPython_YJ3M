commit 9e943f41a9353d91afe22fce506f3bbfe6217ca8
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon Jul 16 13:48:43 2018 -0700

    feat(integrations): VSTS Assignee sync inbound  (#8880)
    
    * first draft assignee sync
    
    * saving place.
    
    * almost working
    
    * Removed import
    
    * Fleshed out inbound assignee sync.
    
    * Got functionality working
    
    * removed commented out code.
    
    * removed status change code.
    
    * Removed commented out code.
    
    * Moved delete url to the url class.
    
    * Added webhook subscription
    
    * Added a check for the shared_secret in the webhook.
    
    * Changed url and moved get shared secret to integration
    
    * Changed delete_subscription
    
    * Fixed typo
    
    * Got test to pass need to test irl
    
    * Fixed vsts tests.
    
    * Added shared secret
    
    * removed print statements.

diff --git a/src/sentry/integrations/vsts/client.py b/src/sentry/integrations/vsts/client.py
index 4be71e312f..16c6337a42 100644
--- a/src/sentry/integrations/vsts/client.py
+++ b/src/sentry/integrations/vsts/client.py
@@ -1,6 +1,8 @@
 from __future__ import absolute_import
 
 from sentry.integrations.client import ApiClient, OAuth2RefreshMixin
+from sentry.utils.http import absolute_uri
+
 UNSET = object()
 
 FIELD_MAP = {
@@ -18,8 +20,10 @@ class VstsApiPath(object):
     commits = u'https://{account_name}/DefaultCollection/_apis/git/repositories/{repo_id}/commits'
     commits_batch = u'https://{account_name}/DefaultCollection/_apis/git/repositories/{repo_id}/commitsBatch'
     commits_changes = u'https://{account_name}/DefaultCollection/_apis/git/repositories/{repo_id}/commits/{commit_id}/changes'
+    delete = 'https://{account_name}/_apis/hooks/subscriptions/{subscription_id}'
     projects = u'https://{account_name}/DefaultCollection/_apis/projects'
     repositories = u'https://{account_name}/DefaultCollection/{project}_apis/git/repositories/{repo_id}'
+    subscriptions = u'https://{account_name}/_apis/hooks/subscriptions'
     work_items = u'https://{account_name}/DefaultCollection/_apis/wit/workitems/{id}'
     work_items_create = u'https://{account_name}/{project}/_apis/wit/workitems/${type}'
     work_items_types_states = u'https://{account_name}/{project}/_apis/wit/workitemtypes/{type}/states'
@@ -229,3 +233,30 @@ class VstsApiClient(ApiClient, OAuth2RefreshMixin):
             ),
             api_preview=True,
         )
+
+    def create_subscription(self, instance, external_id, shared_secret):
+        return self.post(
+            VstsApiPath.subscriptions.format(
+                account_name=instance
+            ),
+            data={
+                'publisherId': 'tfs',
+                'eventType': 'workitem.updated',
+                'resourceVersion': '1.0',
+                'consumerId': 'webHooks',
+                'consumerActionId': 'httpRequest',
+                'consumerInputs': {
+                    'url': absolute_uri('/extensions/vsts/issue-updated/'),
+                    'resourceDetailsToSend': 'all',
+                    'httpHeaders': 'shared-secret:%s' % shared_secret,
+                }
+            },
+        )
+
+    def delete_subscription(self, instance, subscription_id):
+        self.delete(
+            VstsApiPath.delete_url.format(
+                account_name=instance,
+                subscription_id=subscription_id,
+            )
+        )
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index af409fc4a9..7c34b76c5e 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -17,6 +17,7 @@ from sentry.web.helpers import render_to_response
 from sentry.utils.http import absolute_uri
 from .client import VstsApiClient
 from .repository import VstsRepositoryProvider
+from .webhooks import WorkItemWebhook
 DESCRIPTION = """
 VSTS
 """
@@ -162,9 +163,12 @@ class VstsIntegrationProvider(IntegrationProvider):
 
     def build_integration(self, state):
         data = state['identity']['data']
+        oauth_data = self.get_oauth_data(data)
         account = state['account']
         instance = state['instance']
         user = get_user_info(data['access_token'])
+        subscription_id, subscription_secret = self.create_subscription(
+            instance, account['AccountId'], oauth_data)
         scopes = sorted(VSTSIdentityProvider.oauth_scopes)
 
         return {
@@ -172,15 +176,25 @@ class VstsIntegrationProvider(IntegrationProvider):
             'external_id': account['AccountId'],
             'metadata': {
                 'domain_name': instance,
+                'scopes': scopes,
+                'subscription_id': subscription_id,
+                'subscription_secret': subscription_secret,
             },
             'user_identity': {
                 'type': 'vsts',
                 'external_id': user['id'],
                 'scopes': scopes,
-                'data': self.get_oauth_data(data),
+                'data': oauth_data,
             },
         }
 
+    def create_subscription(self, instance, account_id, oauth_data):
+        webhook = WorkItemWebhook()
+        subscription, shared_secret = webhook.create_subscription(
+            instance, oauth_data, self.oauth_redirect_url, account_id)
+        subscription_id = subscription['publisherInputs']['tfsSubscriptionId']
+        return subscription_id, shared_secret
+
     def get_oauth_data(self, payload):
         data = {'access_token': payload['access_token']}
 
diff --git a/src/sentry/integrations/vsts/urls.py b/src/sentry/integrations/vsts/urls.py
index 203527bcc7..349330c3cc 100644
--- a/src/sentry/integrations/vsts/urls.py
+++ b/src/sentry/integrations/vsts/urls.py
@@ -1,7 +1,8 @@
 from __future__ import absolute_import, print_function
 
-from django.conf.urls import patterns  # , url
-
+from django.conf.urls import patterns, url
+from .webhooks import WorkItemWebhook
 urlpatterns = patterns(
     '',
+    url(r'^issue-updated/$', WorkItemWebhook.as_view(), name='sentry-extensions-vsts-issue-updated'),
 )
diff --git a/src/sentry/integrations/vsts/webhooks.py b/src/sentry/integrations/vsts/webhooks.py
new file mode 100644
index 0000000000..31920d91d0
--- /dev/null
+++ b/src/sentry/integrations/vsts/webhooks.py
@@ -0,0 +1,76 @@
+from __future__ import absolute_import
+from .client import VstsApiClient
+
+from sentry.models import Identity, Integration, sync_group_assignee_inbound
+from sentry.api.base import Endpoint
+from uuid import uuid4
+from django.views.decorators.csrf import csrf_exempt
+
+import re
+UNSET = object()
+# Pull email from the string: u'lauryn <lauryn@sentry.io>'
+EMAIL_PARSER = re.compile(r'<(.*)>')
+
+
+class WorkItemWebhook(Endpoint):
+    authentication_classes = ()
+    permission_classes = ()
+
+    def get_client(self, identity, oauth_redirect_url):
+        return VstsApiClient(identity, oauth_redirect_url)
+
+    @csrf_exempt
+    def dispatch(self, request, *args, **kwargs):
+        return super(WorkItemWebhook, self).dispatch(request, *args, **kwargs)
+
+    def post(self, request, *args, **kwargs):
+        data = request.DATA
+        if data['eventType'] == 'workitem.updated':
+            integration = Integration.objects.get(
+                provider='vsts',
+                external_id=data['resourceContainers']['collection']['id'],
+            )
+            try:
+                self.check_webhook_secret(request, integration)
+            except AssertionError:
+                return self.respond(status=401)
+            self.handle_updated_workitem(data, integration)
+        return self.respond()
+
+    def check_webhook_secret(self, request, integration):
+        assert integration.metadata['subscription_secret'] == request.META['HTTP_SHARED_SECRET']
+
+    def handle_updated_workitem(self, data, integration):
+        external_issue_key = data['resource']['workItemId']
+        assigned_to = data['resource']['fields'].get('System.AssignedTo')
+        self.handle_assign_to(integration, external_issue_key, assigned_to)
+
+    def handle_assign_to(self, integration, external_issue_key, assigned_to):
+        if not assigned_to:
+            return
+        new_value = assigned_to.get('newValue')
+        if new_value is not None:
+            email = self.parse_email(new_value)
+            assign = True
+        else:
+            email = None
+            assign = False
+        sync_group_assignee_inbound(
+            integration=integration,
+            email=email,
+            external_issue_key=external_issue_key,
+            assign=assign,
+        )
+
+    def parse_email(self, email):
+        return EMAIL_PARSER.search(email).group(1)
+
+    def create_subscription(self, instance, identity_data, oauth_redirect_url, external_id):
+        client = self.get_client(Identity(data=identity_data), oauth_redirect_url)
+        shared_secret = self.create_webhook_secret()
+        return client.create_subscription(instance, external_id, shared_secret), shared_secret
+
+    def create_webhook_secret(self):
+        # following this example
+        # https://github.com/getsentry/sentry-plugins/blob/master/src/sentry_plugins/github/plugin.py#L305
+        return uuid4().hex + uuid4().hex
diff --git a/src/sentry/tasks/integrations.py b/src/sentry/tasks/integrations.py
index 980e510740..5ae0613539 100644
--- a/src/sentry/tasks/integrations.py
+++ b/src/sentry/tasks/integrations.py
@@ -49,7 +49,9 @@ def sync_assignee_outbound(external_issue_id, user_id, assign, **kwargs):
         user = None
     else:
         user = User.objects.get(id=user_id)
-    integration.get_installation().sync_assignee_outbound(external_issue, user, assign=assign)
+    integration.get_installation(
+        organization_id=external_issue.organization_id).sync_assignee_outbound(
+        external_issue, user, assign=assign)
 
 
 @instrumented_task(
diff --git a/tests/sentry/integrations/vsts/test_integration.py b/tests/sentry/integrations/vsts/test_integration.py
index 0588d8c265..f81f11529b 100644
--- a/tests/sentry/integrations/vsts/test_integration.py
+++ b/tests/sentry/integrations/vsts/test_integration.py
@@ -8,6 +8,7 @@ from sentry.identity.vsts import VSTSIdentityProvider
 from sentry.integrations.vsts import VstsIntegration, VstsIntegrationProvider
 from sentry.models import Integration, Identity, IdentityProvider
 from sentry.testutils import APITestCase, TestCase
+from .testutils import CREATE_SUBSCRIPTION
 
 
 class VstsIntegrationProviderTest(TestCase):
@@ -31,6 +32,11 @@ class VstsIntegrationProviderTest(TestCase):
                 },
             },
         )
+        responses.add(
+            responses.POST,
+            'https://sentry.visualstudio.com/_apis/hooks/subscriptions',
+            json=CREATE_SUBSCRIPTION,
+        )
 
     @responses.activate
     def test_build_integration(self):
diff --git a/tests/sentry/integrations/vsts/test_webhooks.py b/tests/sentry/integrations/vsts/test_webhooks.py
new file mode 100644
index 0000000000..a7bcbb1076
--- /dev/null
+++ b/tests/sentry/integrations/vsts/test_webhooks.py
@@ -0,0 +1,100 @@
+from __future__ import absolute_import
+
+import responses
+from mock import patch
+from time import time
+
+from sentry.testutils import APITestCase
+from sentry.models import ExternalIssue, Identity, IdentityProvider, Integration
+from sentry.integrations.vsts.integration import VstsIntegration
+from sentry.utils.http import absolute_uri
+from .testutils import (
+    WORK_ITEM_UPDATED,
+    WORK_ITEM_UNASSIGNED,
+)
+
+
+class VstsWebhookWorkItemTest(APITestCase):
+    def setUp(self):
+        self.organization = self.create_organization()
+        self.project = self.create_project(organization=self.organization)
+        self.access_token = '1234567890'
+        self.account_id = u'80ded3e8-3cd3-43b1-9f96-52032624aa3a'
+        self.instance = 'instance.visualstudio.com'
+        self.shared_secret = '1234567890'
+        self.model = Integration.objects.create(
+            provider='vsts',
+            external_id=self.account_id,
+            name='vsts_name',
+            metadata={
+                 'domain_name': 'instance.visualstudio.com',
+                 'subscription_secret': self.shared_secret,
+            }
+        )
+        self.identity_provider = IdentityProvider.objects.create(type='vsts')
+        self.identity = Identity.objects.create(
+            idp=self.identity_provider,
+            user=self.user,
+            external_id='vsts_id',
+            data={
+                'access_token': self.access_token,
+                'refresh_token': 'qwertyuiop',
+                'expires': int(time()) - int(1234567890),
+            }
+        )
+        self.org_integration = self.model.add_organization(self.organization.id, self.identity.id)
+        self.project_integration = self.model.add_project(self.project.id)
+        self.integration = VstsIntegration(self.model, self.organization.id, self.project.id)
+
+        self.user_to_assign = self.create_user('sentryuseremail@email.com')
+
+    @responses.activate
+    def test_workitem_change_assignee(self):
+        work_item_id = 31
+
+        external_issue = ExternalIssue.objects.create(
+            organization_id=self.organization.id,
+            integration_id=self.model.id,
+            key=work_item_id,
+        )
+        with patch('sentry.integrations.vsts.webhooks.sync_group_assignee_inbound') as mock:
+            resp = self.client.post(
+                absolute_uri('/extensions/vsts/issue-updated/'),
+                data=WORK_ITEM_UPDATED,
+                HTTP_SHARED_SECRET=self.shared_secret,
+            )
+
+            assert resp.status_code == 200
+            external_issue = ExternalIssue.objects.get(id=external_issue.id)
+            assert mock.call_count == 1
+            args = mock.call_args[1]
+
+            assert args['integration'].__class__ == Integration
+            assert args['email'] == 'lauryn@sentry.io'
+            assert args['external_issue_key'] == work_item_id
+            assert args['assign'] is True
+
+    @responses.activate
+    def test_workitem_unassign(self):
+        work_item_id = 33
+        external_issue = ExternalIssue.objects.create(
+            organization_id=self.organization.id,
+            integration_id=self.model.id,
+            key=work_item_id,
+        )
+        with patch('sentry.integrations.vsts.webhooks.sync_group_assignee_inbound') as mock:
+            resp = self.client.post(
+                absolute_uri('/extensions/vsts/issue-updated/'),
+                data=WORK_ITEM_UNASSIGNED,
+                HTTP_SHARED_SECRET=self.shared_secret,
+            )
+
+            assert resp.status_code == 200
+            external_issue = ExternalIssue.objects.get(id=external_issue.id)
+            assert mock.call_count == 1
+            args = mock.call_args[1]
+
+            assert args['integration'].__class__ == Integration
+            assert args['email'] is None
+            assert args['external_issue_key'] == work_item_id
+            assert args['assign'] is False
diff --git a/tests/sentry/integrations/vsts/testutils.py b/tests/sentry/integrations/vsts/testutils.py
index b141c36242..41caeab07b 100644
--- a/tests/sentry/integrations/vsts/testutils.py
+++ b/tests/sentry/integrations/vsts/testutils.py
@@ -181,3 +181,219 @@ GET_USERS_RESPONSE = b"""{
   ]
 }
 """
+CREATE_SUBSCRIPTION = {
+    'id': 'fd672255-8b6b-4769-9260-beea83d752ce',
+    'url': 'https://fabrikam.visualstudio.com/_apis/hooks/subscriptions/fd672255-8b6b-4769-9260-beea83d752ce',
+    'publisherId': 'tfs',
+    'eventType': 'workitem.update',
+    'resourceVersion': '1.0-preview.1',
+    'eventDescription': 'WorkItem Updated',
+    'consumerId': 'webHooks',
+    'consumerActionId': 'httpRequest',
+    'actionDescription': 'To host myservice',
+    'createdBy': {
+        'id': '00ca946b-2fe9-4f2a-ae2f-40d5c48001bc'
+    },
+    'createdDate': '2014-10-27T15:37:24.873Z',
+    'modifiedBy': {
+        'id': '00ca946b-2fe9-4f2a-ae2f-40d5c48001bc'
+    },
+    'modifiedDate': '2014-10-27T15:37:26.23Z',
+    'publisherInputs': {
+        'buildStatus': 'Failed',
+        'definitionName': 'MyWebSite CI',
+        'hostId': 'd81542e4-cdfa-4333-b082-1ae2d6c3ad16',
+        'projectId': '6ce954b1-ce1f-45d1-b94d-e6bf2464ba2c',
+        'tfsSubscriptionId': '3e8b33e7-426d-4c92-9bf9-58e163dd7dd5'
+    },
+    'consumerInputs': {
+        'url': 'https://myservice/newreceiver'
+    }
+}
+
+WORK_ITEM_UPDATED = {
+    u'resourceContainers': {
+        u'project': {u'id': u'c0bf429a-c03c-4a99-9336-d45be74db5a6', u'baseUrl': u'https://laurynsentry.visualstudio.com/'},
+        u'account': {u'id': u'90e9a854-eb98-4c56-ae1a-035a0f331dd6', u'baseUrl': u'https://laurynsentry.visualstudio.com/'},
+        u'collection': {u'id': u'80ded3e8-3cd3-43b1-9f96-52032624aa3a', u'baseUrl': u'https://laurynsentry.visualstudio.com/'}
+    },
+    u'resource': {
+        u'revisedBy': {
+            u'displayName': u'lauryn', u'name': u'lauryn <lauryn@sentry.io>', u'url': u'https://app.vssps.visualstudio.com/A90e9a854-eb98-4c56-ae1a-035a0f331dd6/_apis/Identities/21354f98-ab06-67d9-b974-5a54d992082e', u'imageUrl': u'https://laurynsentry.visualstudio.com/_api/_common/identityImage?id=21354f98-ab06-67d9-b974-5a54d992082e', u'descriptor': u'msa.MjEzNTRmOTgtYWIwNi03N2Q5LWI5NzQtNWE1NGQ5OTIwODJl', u'_links': {u'avatar': {u'href': u'https://laurynsentry.visualstudio.com/_apis/GraphProfile/MemberAvatars/msa.MjEzNTRmOTgtYWIwNi03N2Q5LWI5NzQtNWE1NGQ5OTIwODJl'}},
+            u'uniqueName': u'lauryn@sentry.io', u'id': u'21354f98-ab06-67d9-b974-5a54d992082e'
+        },
+        u'revisedDate': u'9999-01-01T00:00:00Z',
+        u'url': u'https://laurynsentry.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workItems/31/updates/2',
+        u'fields': {
+            u'System.AuthorizedDate': {u'newValue': u'2018-07-05T20:52:14.777Z', u'oldValue': u'2018-07-05T20:51:58.927Z'},
+            u'System.AssignedTo': {u'newValue': u'lauryn <lauryn@sentry.io>', u'oldValue': u'lauryn2 <lauryn2@sentry.io>'},
+            u'System.Watermark': {u'newValue': 78, u'oldValue': 77},
+            u'System.Rev': {u'newValue': 2, u'oldValue': 1},
+            u'System.RevisedDate': {u'newValue': u'9999-01-01T00:00:00Z', u'oldValue': u'2018-07-05T20:52:14.777Z'},
+            u'System.ChangedDate': {u'newValue': u'2018-07-05T20:52:14.777Z', u'oldValue': u'2018-07-05T20:51:58.927Z'}
+        },
+        u'workItemId': 31,
+        u'rev': 2,
+        u'_links': {
+            u'self': {u'href': u'https://laurynsentry.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workItems/31/updates/2'},
+            u'workItemUpdates': {u'href': u'https://laurynsentry.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workItems/31/updates'},
+            u'html': {u'href': u'https://laurynsentry.visualstudio.com/web/wi.aspx?pcguid=80ded3e8-3cd3-43b1-9f96-52032624aa3a&id=31'},
+            u'parent': {u'href': u'https://laurynsentry.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workItems/31'}
+        },
+        u'id': 2,
+        u'revision': {
+            u'url': u'https://laurynsentry.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workItems/31/revisions/2',
+            u'fields': {
+                u'System.AreaPath': u'MyFirstProject',
+                u'System.WorkItemType': u'Bug',
+                u'System.Reason': u'New',
+                u'System.Title': u"NameError: global name 'BitbucketRepositoryProvider' is not defined",
+                u'Microsoft.VSTS.Common.Priority': 2,
+                u'System.CreatedBy': u'lauryn <lauryn@sentry.io>',
+                u'System.AssignedTo': u'lauryn <lauryn@sentry.io>',
+                u'System.CreatedDate': u'2018-07-05T20:51:58.927Z',
+                u'System.TeamProject': u'MyFirstProject',
+                u'Microsoft.VSTS.Common.Severity': u'3 - Medium',
+                u'Microsoft.VSTS.Common.ValueArea': u'Business',
+                u'System.State': u'New',
+                u'System.Description': u'<p><a href="https://lauryn.ngrok.io/sentry/internal/issues/55/">https://lauryn.ngrok.io/sentry/internal/issues/55/</a></p>\n<pre><code>NameError: global name \'BitbucketRepositoryProvider\' is not defined\n(1 additional frame(s) were not displayed)\n...\n  File &quot;sentry/runner/__init__.py&quot;, line 125, in configure\n    configure(ctx, py, yaml, skip_service_validation)\n  File &quot;sentry/runner/settings.py&quot;, line 152, in configure\n    skip_service_validation=skip_service_validation\n  File &quot;sentry/runner/initializer.py&quot;, line 315, in initialize_app\n    register_plugins(settings)\n  File &quot;sentry/runner/initializer.py&quot;, line 60, in register_plugins\n    integration.setup()\n  File &quot;sentry/integrations/bitbucket/integration.py&quot;, line 78, in setup\n    BitbucketRepositoryProvider,\n\nNameError: global name \'BitbucketRepositoryProvider\' is not defined\n</code></pre>\n',
+                u'System.ChangedBy': u'lauryn <lauryn@sentry.io>',
+                u'System.ChangedDate': u'2018-07-05T20:52:14.777Z',
+                u'Microsoft.VSTS.Common.StateChangeDate': u'2018-07-05T20:51:58.927Z',
+                u'System.IterationPath': u'MyFirstProject'},
+            u'rev': 2,
+            u'id': 31,
+            u'_links': {u'self': {u'href': u'https://laurynsentry.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workItems/31/revisions/2'}, u'workItemRevisions': {u'href': u'https://laurynsentry.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workItems/31/revisions'}, u'parent': {u'href': u'https://laurynsentry.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workItems/31'}}
+        }
+    },
+    u'eventType': u'workitem.updated',
+    u'detailedMessage': None,
+    u'createdDate': u'2018-07-05T20:52:16.3051288Z',
+    u'id': u'18f51331-2640-4bce-9ebd-c59c855956a2',
+    u'resourceVersion': u'1.0',
+    u'notificationId': 1,
+    u'subscriptionId': u'7bf628eb-b3a7-4fb2-ab4d-8b60f2e8cb9b',
+    u'publisherId': u'tfs',
+    u'message': None
+}
+
+
+WORK_ITEM_UNASSIGNED = {
+    u'resourceContainers': {
+        u'project': {
+            u'id': u'c0bf429a-c03c-4a99-9336-d45be74db5a6',
+            u'baseUrl': u'https://laurynsentry.visualstudio.com/'
+        },
+        u'account': {
+            u'id': u'90e9a854-eb98-4c56-ae1a-035a0f331dd6',
+            u'baseUrl': u'https://laurynsentry.visualstudio.com/'
+        },
+        u'collection': {
+            u'id': u'80ded3e8-3cd3-43b1-9f96-52032624aa3a',
+            u'baseUrl': u'https://laurynsentry.visualstudio.com/'
+        }
+    },
+    u'resource': {
+        u'revisedBy': {
+            u'displayName': u'lauryn',
+            u'name': u'lauryn <lauryn@sentry.io>',
+            u'url': u'https://app.vssps.visualstudio.com/A90e9a854-eb98-4c56-ae1a-035a0f331dd6/_apis/Identities/21354f98-ab06-67d9-b974-5a54d992082e',
+            u'imageUrl': u'https://laurynsentry.visualstudio.com/_api/_common/identityImage?id=21354f98-ab06-67d9-b974-5a54d992082e',
+            u'descriptor': u'msa.MjEzNTRmOTgtYWIwNi03N2Q5LWI5NzQtNWE1NGQ5OTIwODJl',
+            u'_links': {
+                u'avatar': {
+                    u'href': u'https://laurynsentry.visualstudio.com/_apis/GraphProfile/MemberAvatars/msa.MjEzNTRmOTgtYWIwNi03N2Q5LWI5NzQtNWE1NGQ5OTIwODJl'
+                }
+            },
+            u'uniqueName': u'lauryn@sentry.io',
+            u'id': u'21354f98-ab06-67d9-b974-5a54d992082e'
+        },
+        u'revisedDate': u'9999-01-01T00:00:00      Z',
+        u'url': u'https://laurynsentry.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workItems/33/updates/3',
+        u'fields': {
+            u'System.AuthorizedDate': {
+                u'newValue': u'2018-07-05T23:23:09.493            Z',
+                u'oldValue': u'2018-07-05T23:21:38.243            Z'
+            },
+            u'System.AssignedTo': {
+                u'oldValue': u'lauryn <lauryn@sentry.io>'
+            },
+            u'System.Watermark': {
+                u'newValue': 83,
+                u'oldValue': 82
+            },
+            u'System.Rev': {
+                u'newValue': 3,
+                u'oldValue': 2
+            },
+            u'System.RevisedDate': {
+                u'newValue': u'9999-01-01T00:00:00            Z',
+                u'oldValue': u'2018-07-05T23:23:09.493            Z'
+            },
+            u'System.ChangedDate': {
+                u'newValue': u'2018-07-05T23:23:09.493            Z',
+                u'oldValue': u'2018-07-05T23:21:38.243            Z'
+            }
+        },
+        u'workItemId': 33,
+        u'rev': 3,
+        u'_links': {
+            u'self': {
+                u'href': u'https://laurynsentry.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workItems/33/updates/3'
+            },
+            u'workItemUpdates': {
+                u'href': u'https://laurynsentry.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workItems/33/updates'
+            },
+            u'html': {
+                u'href': u'https://laurynsentry.visualstudio.com/web/wi.aspx?pcguid=80ded3e8-3cd3-43b1-9f96-52032624aa3a&id=33'
+            },
+            u'parent': {
+                u'href': u'https://laurynsentry.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workItems/33'
+            }
+        },
+        u'id': 3,
+        u'revision': {
+            u'url': u'https://laurynsentry.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workItems/33/revisions/3',
+            u'fields': {
+                u'System.AreaPath': u'MyFirstProject',
+                u'System.WorkItemType': u'Bug',
+                u'System.Reason': u'New',
+                u'System.Title': u'NotImplementedError:Visual Studio Team Services requires an organization_id',
+                u'Microsoft.VSTS.Common.Priority': 2,
+                u'System.CreatedBy': u'lauryn <lauryn@sentry.io>',
+                u'Microsoft.VSTS.Common.StateChangeDate': u'2018-07-05T23:21:25.847            Z',
+                u'System.CreatedDate': u'2018-07-05T23:21:25.847            Z',
+                u'System.TeamProject': u'MyFirstProject',
+                u'Microsoft.VSTS.Common.ValueArea': u'Business',
+                u'System.State': u'New',
+                u'System.Description': u'<p><a href="https:            //lauryn.ngrok.io/sentry/internal/issues/196/">https:            //lauryn.ngrok.io/sentry/internal/issues/196/</a></p>\n<pre><code>NotImplementedError:Visual Studio Team Services requires an organization_id\n(57 additional frame(s) were not displayed)\n...\n  File &quot;sentry/tasks/base.py&quot;',
+                u'System.ChangedBy': u'lauryn <lauryn@sentry.io>',
+                u'System.ChangedDate': u'2018-07-05T23:23:09.493            Z',
+                u'Microsoft.VSTS.Common.Severity': u'3 - Medium',
+                u'System.IterationPath': u'MyFirstProject'
+            },
+            u'rev': 3,
+            u'id': 33,
+            u'_links': {
+                u'self': {
+                    u'href': u'https://laurynsentry.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workItems/33/revisions/3'
+                },
+                u'workItemRevisions': {
+                    u'href': u'https://laurynsentry.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workItems/33/revisions'
+                },
+                u'parent': {
+                    u'href': u'https://laurynsentry.visualstudio.com/c0bf429a-c03c-4a99-9336-d45be74db5a6/_apis/wit/workItems/33'
+                }
+            }
+        }
+    },
+    u'eventType': u'workitem.updated',
+    u'detailedMessage': None,
+    u'createdDate': u'2018-07-05T23:23:11.1935112   Z',
+    u'id': u'cc349c85-6595-4939-9b69-f89480be6a26',
+    u'resourceVersion': u'1.0',
+    u'notificationId': 2,
+    u'subscriptionId': u'7405a600-6a25-48e6-81b6-1dde044783ad',
+    u'publisherId': u'tfs',
+    u'message': None
+}
