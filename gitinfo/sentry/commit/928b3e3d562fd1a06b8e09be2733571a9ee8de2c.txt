commit 928b3e3d562fd1a06b8e09be2733571a9ee8de2c
Author: NisanthanNanthakumar <nisanthan.nanthakumar@sentry.io>
Date:   Thu Feb 27 16:58:26 2020 -0800

    ref(integration directory): Update the detailed integration view to match the design (#17336)
    
    Objective
    Update the detailed integration view to match the design.

diff --git a/src/sentry/static/sentry/app/utils/integrationUtil.tsx b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
index 202a582afa..1ad5daaad7 100644
--- a/src/sentry/static/sentry/app/utils/integrationUtil.tsx
+++ b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
@@ -60,7 +60,7 @@ export type SingleIntegrationEvent = {
     | 'Integrations: Plugin Add to Project Clicked';
   integration: string; //the slug
   already_installed?: boolean;
-  integration_tab?: 'configurations' | 'information';
+  integration_tab?: 'configurations' | 'overview';
 } & (SentryAppEvent | NonSentryAppEvent);
 
 type SentryAppEvent = {
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
index e08483a3f6..e3127ce2c2 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
@@ -24,10 +24,10 @@ import {
 import Alert, {Props as AlertProps} from 'app/components/alert';
 import ExternalLink from 'app/components/links/externalLink';
 import marked, {singleLineRenderer} from 'app/utils/marked';
-import {IconClose} from 'app/icons';
+import {IconClose, IconGithub, IconGeneric, IconDocs} from 'app/icons';
 import IntegrationStatus from './integrationStatus';
 
-type Tab = 'information' | 'configurations';
+type Tab = 'overview' | 'configurations';
 
 type AlertType = AlertProps & {
   text: string;
@@ -46,12 +46,11 @@ class AbstractIntegrationDetailedView<
   P extends Props = Props,
   S extends State = State
 > extends AsyncComponent<P, S> {
-  tabs: Tab[] = ['information', 'configurations'];
+  tabs: Tab[] = ['overview', 'configurations'];
 
   componentDidMount() {
     const {location} = this.props;
-    const value =
-      location.query.tab === 'configurations' ? 'configurations' : 'information';
+    const value = location.query.tab === 'configurations' ? 'configurations' : 'overview';
     // eslint-disable-next-line react/no-did-mount-set-state
     this.setState({tab: value});
   }
@@ -89,7 +88,7 @@ class AbstractIntegrationDetailedView<
     return [];
   }
 
-  //Returns a list of the resources displayed at the bottom of the information card
+  //Returns a list of the resources displayed at the bottom of the overview card
   get resourceLinks(): Array<{title: string; url: string}> {
     // Allow children to implement this
     throw new Error('Not implemented');
@@ -112,6 +111,23 @@ class AbstractIntegrationDetailedView<
     throw new Error('Not implemented');
   }
 
+  getIcon(title: string) {
+    switch (title) {
+      case 'View Source':
+        return <StyledIconCode />;
+      case 'Report Issue':
+        return <StyledIconGithub />;
+      case 'Documentation':
+        return <StyledIconDocs />;
+      case 'Splunk Setup Instructions':
+        return <StyledIconDocs />;
+      case 'Trello Setup Instructions':
+        return <StyledIconDocs />;
+      default:
+        return <StyledIconGeneric />;
+    }
+  }
+
   onTabChange = (value: Tab) => {
     this.trackIntegrationEvent({
       eventKey: 'integrations.integration_tab_clicked',
@@ -142,6 +158,19 @@ class AbstractIntegrationDetailedView<
     return null;
   }
 
+  renderEmptyConfigurations() {
+    return (
+      <EmptyConfigurationContainer>
+        <EmptyConfigurationTitle>You haven't set anything up yet</EmptyConfigurationTitle>
+        <EmptyConfigurationBody>
+          But that doesnâ€™t have to be the case for long! Add an installation to get
+          started.
+        </EmptyConfigurationBody>
+        <div>{this.renderAddInstallButton(true)}</div>
+      </EmptyConfigurationContainer>
+    );
+  }
+
   //Returns the list of configurations for the integration
   renderConfigurations() {
     // Allow children to implement this
@@ -208,12 +237,41 @@ class AbstractIntegrationDetailedView<
     );
   }
 
-  //Returns the content shown in the top section of the integration detail
-  renderTopSection() {
+  renderAddInstallButton(hideButtonIfDisabled = false) {
     const {organization} = this.props;
-
     const {IntegrationDirectoryFeatures} = getIntegrationFeatureGate();
+
+    return (
+      <IntegrationDirectoryFeatures {...this.featureProps}>
+        {({disabled, disabledReason}) => (
+          <DisableWrapper>
+            <Access organization={organization} access={['org:integrations']}>
+              {({hasAccess}) => (
+                <Tooltip
+                  title={t(
+                    'You must be an organization owner, manager or admin to install this.'
+                  )}
+                  disabled={hasAccess}
+                >
+                  {!hideButtonIfDisabled && disabled ? (
+                    <div />
+                  ) : (
+                    this.renderTopButton(disabled, hasAccess)
+                  )}
+                </Tooltip>
+              )}
+            </Access>
+            {disabled && <DisabledNotice reason={disabledReason} />}
+          </DisableWrapper>
+        )}
+      </IntegrationDirectoryFeatures>
+    );
+  }
+
+  //Returns the content shown in the top section of the integration detail
+  renderTopSection() {
     const tags = this.cleanTags();
+
     return (
       <Flex>
         <PluginIcon pluginId={this.integrationSlug} size={50} />
@@ -230,25 +288,7 @@ class AbstractIntegrationDetailedView<
             ))}
           </Flex>
         </NameContainer>
-        <IntegrationDirectoryFeatures {...this.featureProps}>
-          {({disabled, disabledReason}) => (
-            <DisableWrapper>
-              <Access organization={organization} access={['org:integrations']}>
-                {({hasAccess}) => (
-                  <Tooltip
-                    title={t(
-                      'You must be an organization owner, manager or admin to install this.'
-                    )}
-                    disabled={hasAccess}
-                  >
-                    {this.renderTopButton(disabled, hasAccess)}
-                  </Tooltip>
-                )}
-              </Access>
-              {disabled && <DisabledNotice reason={disabledReason} />}
-            </DisableWrapper>
-          )}
-        </IntegrationDirectoryFeatures>
+        {this.renderAddInstallButton()}
       </Flex>
     );
   }
@@ -300,11 +340,14 @@ class AbstractIntegrationDetailedView<
                 <AuthorName>{this.author}</AuthorName>
               </div>
             )}
-            {this.resourceLinks.map(({title, url}) => (
-              <ExternalLink key={url} href={url}>
-                {t(title)}
-              </ExternalLink>
-            ))}
+            {this.resourceLinks.map(({title, url}) => {
+              return (
+                <ExternalLinkContainer key={url}>
+                  {this.getIcon(title)}
+                  <ExternalLink href={url}>{t(title)}</ExternalLink>
+                </ExternalLinkContainer>
+              );
+            })}
           </Metadata>
         </Flex>
       </React.Fragment>
@@ -316,7 +359,7 @@ class AbstractIntegrationDetailedView<
       <React.Fragment>
         {this.renderTopSection()}
         {this.renderTabs()}
-        {this.state.tab === 'information'
+        {this.state.tab === 'overview'
           ? this.renderInformationCard()
           : this.renderConfigurations()}
       </React.Fragment>
@@ -333,7 +376,7 @@ const FlexContainer = styled('div')`
 `;
 
 const CapitalizedLink = styled('a')`
-  text-transform: 'capitalize';
+  text-transform: capitalize;
 `;
 
 const StyledTag = styled(Tag)`
@@ -397,10 +440,6 @@ const Metadata = styled(Flex)`
   font-size: 0.9em;
   margin-left: ${space(4)};
   margin-right: 100px;
-
-  a {
-    margin-bottom: ${space(2)};
-  }
 `;
 
 const AuthorName = styled('div')`
@@ -428,4 +467,50 @@ const CreatedContainer = styled('div')`
   font-weight: 600;
   font-size: 12px;
 `;
+
+const EmptyConfigurationContainer = styled('div')`
+  height: 200px;
+  background: #ffffff;
+  border: 1px solid #c6becf;
+  box-sizing: border-box;
+  box-shadow: 0px 2px 1px rgba(0, 0, 0, 0.08);
+  border-radius: 4px;
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+  justify-content: center;
+`;
+
+const EmptyConfigurationTitle = styled('div')`
+  font-size: 22px;
+  line-height: 31px;
+  padding-bottom: ${space(2)};
+`;
+
+const EmptyConfigurationBody = styled('div')`
+  font-size: 16px;
+  line-height: 28px;
+  color: ${p => p.theme.gray2};
+  padding-bottom: ${space(2)};
+`;
+
+const StyledIconCode = () => (
+  <span className="icon-code2" style={{fontWeight: 'bold', marginRight: space(1)}} />
+);
+
+const StyledIconGithub = styled(IconGithub)`
+  margin-right: ${space(1)};
+`;
+
+const StyledIconGeneric = styled(IconGeneric)`
+  margin-right: ${space(1)};
+`;
+const StyledIconDocs = styled(IconDocs)`
+  margin-right: ${space(1)};
+`;
+
+const ExternalLinkContainer = styled('div')`
+  margin-bottom: ${space(2)};
+  display: flex;
+`;
 export default AbstractIntegrationDetailedView;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegrationInDirectory.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegrationInDirectory.tsx
index c22b0ecb81..df561c7aa2 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegrationInDirectory.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegrationInDirectory.tsx
@@ -3,14 +3,16 @@ import styled from '@emotion/styled';
 
 import {t} from 'app/locale';
 import Access from 'app/components/acl/access';
-import AddIntegrationButton from 'app/views/organizationIntegrations/addIntegrationButton';
 import Alert from 'app/components/alert';
 import Button from 'app/components/button';
 import Confirm from 'app/components/confirm';
 import IntegrationItem from 'app/views/organizationIntegrations/integrationItem';
 import Tooltip from 'app/components/tooltip';
-import {IntegrationProvider, Integration, Organization} from 'app/types';
+import {IntegrationProvider, Integration, Organization, ObjectStatus} from 'app/types';
 import {SingleIntegrationEvent} from 'app/utils/integrationUtil';
+import CircleIndicator from 'app/components/circleIndicator';
+import theme from 'app/utils/theme';
+import space from 'app/styles/space';
 
 const CONFIGURABLE_FEATURES = ['commits', 'alert-rule'];
 
@@ -134,19 +136,10 @@ export default class InstalledIntegrationInDirectory extends React.Component<Pro
         {({hasAccess}) => (
           <IntegrationFlex key={integration.id} className={className}>
             <IntegrationItemBox>
-              <IntegrationItem compact integration={integration} />
+              <IntegrationItem integration={integration} />
             </IntegrationItemBox>
             <div>
-              {integration.status === 'disabled' && (
-                <AddIntegrationButton
-                  size="xsmall"
-                  priority="success"
-                  provider={provider}
-                  onAddIntegration={this.reinstallIntegration}
-                  reinstall
-                />
-              )}
-              {integration.status === 'active' && (
+              {
                 <Tooltip
                   disabled={this.hasConfiguration()}
                   position="left"
@@ -155,14 +148,18 @@ export default class InstalledIntegrationInDirectory extends React.Component<Pro
                   <StyledButton
                     borderless
                     icon="icon-settings"
-                    disabled={!this.hasConfiguration() || !hasAccess}
+                    disabled={
+                      !this.hasConfiguration() ||
+                      !hasAccess ||
+                      integration.status !== 'active'
+                    }
                     to={`/settings/${organization.slug}/integrations/${provider.key}/${integration.id}/`}
                     data-test-id="integration-configure-button"
                   >
                     Configure
                   </StyledButton>
                 </Tooltip>
-              )}
+              }
             </div>
             <div>
               <Confirm
@@ -181,6 +178,8 @@ export default class InstalledIntegrationInDirectory extends React.Component<Pro
                 </StyledButton>
               </Confirm>
             </div>
+
+            <IntegrationStatus status={integration.status} />
           </IntegrationFlex>
         )}
       </Access>
@@ -200,3 +199,40 @@ const IntegrationFlex = styled('div')`
 const IntegrationItemBox = styled('div')`
   flex: 1;
 `;
+
+const IntegrationStatus = styled(
+  (props: React.HTMLAttributes<HTMLElement> & {status: ObjectStatus}) => {
+    const {status, ...p} = props;
+    const color = status === 'active' ? theme.success : theme.gray2;
+    const titleText =
+      status === 'active'
+        ? t('This Integration can be disabled by clicking the Uninstall button')
+        : t('This Integration has been disconnected from the external provider');
+    return (
+      <Tooltip title={titleText}>
+        <div {...p}>
+          <CircleIndicator size={6} color={color} />
+          <IntegrationStatusText>{`${
+            status === 'active' ? t('enabled') : t('disabled')
+          }`}</IntegrationStatusText>
+        </div>
+      </Tooltip>
+    );
+  }
+)`
+  display: flex;
+  align-items: center;
+  color: ${p => p.theme.gray2};
+  font-weight: light;
+  text-transform: capitalize;
+  &:before {
+    content: '|';
+    color: ${p => p.theme.gray1};
+    margin-right: ${space(1)};
+    font-weight: normal;
+  }
+`;
+
+const IntegrationStatusText = styled('div')`
+  margin: 0 ${space(0.75)} 0 ${space(0.5)};
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedPlugin.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedPlugin.tsx
index bed9e08c49..16b8d4b5f4 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/installedPlugin.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/installedPlugin.tsx
@@ -16,6 +16,8 @@ import {
 } from 'app/actionCreators/indicator';
 import {PluginNoProject, PluginProjectItem, Organization, AvatarProject} from 'app/types';
 import {SingleIntegrationEvent} from 'app/utils/integrationUtil';
+import space from 'app/styles/space';
+import Switch from 'app/components/switch';
 
 export type Props = {
   api: Client;
@@ -23,7 +25,7 @@ export type Props = {
   projectItem: PluginProjectItem;
   organization: Organization;
   onResetConfiguration: (projectId: string) => void;
-  onEnablePlugin: (projectId: string) => void;
+  onPluginEnableStatusChange: (projectId: string, status: boolean) => void;
   trackIntegrationEvent: (
     options: Pick<SingleIntegrationEvent, 'eventKey' | 'eventName'> & {project_id: string}
   ) => void; //analytics callback
@@ -46,18 +48,26 @@ export class InstalledPlugin extends React.Component<Props> {
     );
   }
 
-  pluginUpdate = async (data: object) => {
+  pluginUpdate = async (data: object, method: 'POST' | 'DELETE' = 'POST') => {
     const {organization, projectItem, plugin} = this.props;
     // no try/catch so the caller will have to have it
     await this.props.api.requestPromise(
       `/projects/${organization.slug}/${projectItem.projectSlug}/plugins/${plugin.id}/`,
       {
-        method: 'POST',
+        method,
         data,
       }
     );
   };
 
+  updatePluginEnableStatus = async (enabled: boolean) => {
+    if (enabled) {
+      await this.pluginUpdate({enabled});
+    } else {
+      await this.pluginUpdate({}, 'DELETE');
+    }
+  };
+
   handleReset = async () => {
     try {
       addLoadingMessage(t('Removing...'));
@@ -82,19 +92,25 @@ export class InstalledPlugin extends React.Component<Props> {
     });
   };
 
-  enablePlugin = async () => {
+  toggleEnablePlugin = async (projectId: string, status: boolean = true) => {
     try {
       addLoadingMessage(t('Enabling...'));
-      await this.pluginUpdate({enabled: true});
-      addSuccessMessage(t('Configuration was enabled'));
-      this.props.onEnablePlugin(this.projectId);
+      await this.updatePluginEnableStatus(status);
+      addSuccessMessage(
+        status ? t('Configuration was enabled.') : t('Configuration was disabled.')
+      );
+      this.props.onPluginEnableStatusChange(projectId, status);
       this.props.trackIntegrationEvent({
-        eventKey: 'integrations.enabled',
-        eventName: 'Integrations: Enabled',
-        project_id: this.projectId,
+        eventKey: status ? 'integrations.enabled' : 'integrations.disabled',
+        eventName: status ? 'Integrations: Enabled' : 'Integrations: Disabled',
+        project_id: projectId,
       });
     } catch (_err) {
-      addErrorMessage(t('Unable to enable configuration'));
+      addErrorMessage(
+        status
+          ? t('Unable to enable configuration.')
+          : t('Unable to disable configuration.')
+      );
     }
   };
 
@@ -109,7 +125,6 @@ export class InstalledPlugin extends React.Component<Props> {
 
   render() {
     const {className, plugin, organization, projectItem} = this.props;
-
     return (
       <Container>
         <Access access={['org:integrations']}>
@@ -119,11 +134,7 @@ export class InstalledPlugin extends React.Component<Props> {
                 <ProjectBadge project={this.projectForBadge} />
               </IntegrationItemBox>
               <div>
-                {!projectItem.enabled ? (
-                  <Button size="small" priority="primary" onClick={this.enablePlugin}>
-                    {t('Enable')}
-                  </Button>
-                ) : (
+                {
                   <StyledButton
                     borderless
                     icon="icon-settings"
@@ -133,7 +144,7 @@ export class InstalledPlugin extends React.Component<Props> {
                   >
                     {t('Configure')}
                   </StyledButton>
-                )}
+                }
               </div>
               <div>
                 <Confirm
@@ -154,6 +165,12 @@ export class InstalledPlugin extends React.Component<Props> {
                   </StyledButton>
                 </Confirm>
               </div>
+              <Switch
+                isActive={projectItem.enabled}
+                toggle={() =>
+                  this.toggleEnablePlugin(projectItem.projectId, !projectItem.enabled)
+                }
+              />
             </IntegrationFlex>
           )}
         </Access>
@@ -165,7 +182,14 @@ export class InstalledPlugin extends React.Component<Props> {
 export default withApi(InstalledPlugin);
 
 const Container = styled('div')`
-  margin: 10px;
+  padding: ${space(2)};
+  border: 1px solid ${p => p.theme.borderLight};
+  border-bottom: none;
+  background-color: white;
+
+  &:last-child {
+    border-bottom: 1px solid ${p => p.theme.borderLight};
+  }
 `;
 
 const StyledButton = styled(Button)`
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
index bfdb028b28..3b8a96cdab 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
@@ -200,30 +200,39 @@ class IntegrationDetailedView extends AbstractIntegrationDetailedView<
     const {configurations} = this.state;
     const {organization} = this.props;
     const provider = this.provider;
-    return (
-      <div>
-        {configurations.map(integration => (
-          <InstallWrapper key={integration.id}>
-            <InstalledIntegration
-              organization={organization}
-              provider={provider}
-              integration={integration}
-              onRemove={this.onRemove}
-              onDisable={this.onDisable}
-              onReinstallIntegration={this.onInstall}
-              data-test-id={integration.id}
-              trackIntegrationEvent={this.trackIntegrationEvent}
-            />
-          </InstallWrapper>
-        ))}
-      </div>
-    );
+    if (configurations.length) {
+      return (
+        <div>
+          {configurations.map(integration => (
+            <InstallWrapper key={integration.id}>
+              <InstalledIntegration
+                organization={organization}
+                provider={provider}
+                integration={integration}
+                onRemove={this.onRemove}
+                onDisable={this.onDisable}
+                onReinstallIntegration={this.onInstall}
+                data-test-id={integration.id}
+                trackIntegrationEvent={this.trackIntegrationEvent}
+              />
+            </InstallWrapper>
+          ))}
+        </div>
+      );
+    }
+    return this.renderEmptyConfigurations();
   }
 }
 
 const InstallWrapper = styled('div')`
   padding: ${space(2)};
   border: 1px solid ${p => p.theme.borderLight};
+  border-bottom: none;
+  background-color: white;
+
+  &:last-child {
+    border-bottom: 1px solid ${p => p.theme.borderLight};
+  }
 `;
 
 export default withOrganization(IntegrationDetailedView);
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.tsx
index 28db41c82d..81a3c3594b 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.tsx
@@ -1,11 +1,8 @@
-import {Box, Flex} from 'reflexbox';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
 
-import {t} from 'app/locale';
 import IntegrationIcon from 'app/views/organizationIntegrations/integrationIcon';
-import Tooltip from 'app/components/tooltip';
 import space from 'app/styles/space';
 import {Integration} from 'app/types';
 
@@ -28,24 +25,14 @@ export default class IntegrationItem extends React.Component<Props> {
 
   render() {
     const {integration, compact} = this.props;
-
     return (
       <Flex>
-        <Box>
+        <div>
           <IntegrationIcon size={compact ? 22 : 32} integration={integration} />
-        </Box>
+        </div>
         <Labels compact={compact}>
           <IntegrationName data-test-id="integration-name">
             {integration.name}
-            {integration.status === 'disabled' && (
-              <Tooltip
-                title={t(
-                  'This Integration has been disconnected from the external provider'
-                )}
-              >
-                <small> â€” {t('Disabled')}</small>
-              </Tooltip>
-            )}
           </IntegrationName>
           <DomainName compact={compact}>{integration.domainName}</DomainName>
         </Labels>
@@ -54,6 +41,9 @@ export default class IntegrationItem extends React.Component<Props> {
   }
 }
 
+const Flex = styled('div')`
+  display: flex;
+`;
 type StyledProps = Pick<Props, 'compact'>;
 const Labels = styled('div')<StyledProps>`
   box-sizing: border-box;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
index 094fda3f33..2647c889bc 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
@@ -1,6 +1,7 @@
 import groupBy from 'lodash/groupBy';
 import debounce from 'lodash/debounce';
 import React from 'react';
+import styled from '@emotion/styled';
 import {RouteComponentProps} from 'react-router/lib/Router';
 
 import {
@@ -16,7 +17,7 @@ import {
   trackIntegrationEvent,
   getSentryAppInstallStatus,
 } from 'app/utils/integrationUtil';
-import {t} from 'app/locale';
+import {t, tct} from 'app/locale';
 import AsyncComponent from 'app/components/asyncComponent';
 import PermissionAlert from 'app/views/settings/organization/permissionAlert';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
@@ -25,6 +26,8 @@ import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader
 import withOrganization from 'app/utils/withOrganization';
 import SearchInput from 'app/components/forms/searchInput';
 import {createFuzzySearch} from 'app/utils/createFuzzySearch';
+import space from 'app/styles/space';
+
 import IntegrationRow from './integrationRow';
 
 type AppOrProviderOrPlugin = SentryApp | IntegrationProvider | PluginWithProjectList;
@@ -349,11 +352,38 @@ export class OrganizationIntegrations extends AsyncComponent<
 
         <PermissionAlert access={['org:integrations']} />
         <Panel>
-          <PanelBody>{displayedList.map(this.renderIntegration)}</PanelBody>
+          <PanelBody>
+            {displayedList.length ? (
+              displayedList.map(this.renderIntegration)
+            ) : (
+              <EmptyResultsContainer>
+                <EmptyResultsBody>
+                  {tct('No Integrations found for "[searchTerm]".', {
+                    searchTerm: this.state.searchInput,
+                  })}
+                </EmptyResultsBody>
+              </EmptyResultsContainer>
+            )}
+          </PanelBody>
         </Panel>
       </React.Fragment>
     );
   }
 }
 
+const EmptyResultsContainer = styled('div')`
+  height: 200px;
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+  justify-content: center;
+`;
+
+const EmptyResultsBody = styled('div')`
+  font-size: 16px;
+  line-height: 28px;
+  color: ${p => p.theme.gray2};
+  padding-bottom: ${space(2)};
+`;
+
 export default withOrganization(OrganizationIntegrations);
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx
index 294439300d..e3b90637a5 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx
@@ -79,7 +79,7 @@ class PluginDetailedView extends AbstractIntegrationDetailedView<
     });
   };
 
-  handleEnablePlugin = (projectId: string) => {
+  handlePluginEnableStatus = (projectId: string, enable: boolean = true) => {
     //make a copy of our project list
     const projectList = this.plugin.projectList.slice();
     //find the index of the project
@@ -92,7 +92,7 @@ class PluginDetailedView extends AbstractIntegrationDetailedView<
     //update item in array
     projectList[index] = {
       ...projectList[index],
-      enabled: true,
+      enabled: enable,
     };
 
     //update state
@@ -131,7 +131,7 @@ class PluginDetailedView extends AbstractIntegrationDetailedView<
     if (tab === 'configurations') {
       return 'project configurations';
     }
-    return tab;
+    return 'overview';
   }
 
   renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {
@@ -151,21 +151,24 @@ class PluginDetailedView extends AbstractIntegrationDetailedView<
   renderConfigurations() {
     const plugin = this.plugin;
     const {organization} = this.props;
-    return (
-      <div>
-        {plugin.projectList.map((projectItem: PluginProjectItem) => (
-          <InstalledPlugin
-            key={projectItem.projectId}
-            organization={organization}
-            plugin={plugin}
-            projectItem={projectItem}
-            onResetConfiguration={this.handleResetConfiguration}
-            onEnablePlugin={this.handleEnablePlugin}
-            trackIntegrationEvent={this.trackIntegrationEvent}
-          />
-        ))}
-      </div>
-    );
+    if (plugin.projectList.length) {
+      return (
+        <div>
+          {plugin.projectList.map((projectItem: PluginProjectItem) => (
+            <InstalledPlugin
+              key={projectItem.projectId}
+              organization={organization}
+              plugin={plugin}
+              projectItem={projectItem}
+              onResetConfiguration={this.handleResetConfiguration}
+              onPluginEnableStatusChange={this.handlePluginEnableStatus}
+              trackIntegrationEvent={this.trackIntegrationEvent}
+            />
+          ))}
+        </div>
+      );
+    }
+    return this.renderEmptyConfigurations();
   }
 }
 
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
index a953b8bdec..a473e75930 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
@@ -17,7 +17,7 @@ import withOrganization from 'app/utils/withOrganization';
 import SplitInstallationIdModal from 'app/views/organizationIntegrations/SplitInstallationIdModal';
 import {openModal} from 'app/actionCreators/modal';
 import {getSentryAppInstallStatus} from 'app/utils/integrationUtil';
-import {UninstallButton} from '../settings/organizationDeveloperSettings/sentryApplicationRow/installButtons';
+import {UninstallAppButton} from '../settings/organizationDeveloperSettings/sentryApplicationRow/installButtons';
 import AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';
 
 type State = {
@@ -32,7 +32,7 @@ class SentryAppDetailedView extends AbstractIntegrationDetailedView<
   AbstractIntegrationDetailedView['props'],
   State & AbstractIntegrationDetailedView['state']
 > {
-  tabs: Tab[] = ['information'];
+  tabs: Tab[] = ['overview'];
   getEndpoints(): ([string, string, any] | [string, string])[] {
     const {
       organization,
@@ -245,7 +245,7 @@ class SentryAppDetailedView extends AbstractIntegrationDetailedView<
         {t('Accept & Install')}
       </InstallButton>
     ) : (
-      <UninstallButton
+      <UninstallAppButton
         install={this.install}
         app={this.sentryApp}
         onClickUninstall={this.handleUninstall}
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx
index 8b56e7d99c..67538dfdfe 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx
@@ -4,8 +4,10 @@ import styled from '@emotion/styled';
 import Button from 'app/components/button';
 import Confirm from 'app/components/confirm';
 
-import {t} from 'app/locale';
+import {t, tct} from 'app/locale';
 import {SentryApp, SentryAppInstallation} from 'app/types';
+import {IconSubtract} from 'app/icons';
+import space from 'app/styles/space';
 
 type UninstallButtonProps = {
   install: SentryAppInstallation;
@@ -21,7 +23,9 @@ export const UninstallButton = ({
   onUninstallModalOpen,
   disabled,
 }: UninstallButtonProps) => {
-  const message = t(`Are you sure you want to remove the ${app.slug} installation?`);
+  const message = tct('Are you sure you want to remove the [slug] installation?', {
+    slug: app.slug,
+  });
 
   return (
     <Confirm
@@ -57,3 +61,40 @@ export const InstallButton = ({onClickInstall}: InstallButtonProps) => {
 const StyledButton = styled(Button)`
   color: ${p => p.theme.gray2};
 `;
+
+export const UninstallAppButton = ({
+  install,
+  app,
+  onClickUninstall,
+  onUninstallModalOpen,
+  disabled,
+}: UninstallButtonProps) => {
+  const message = tct('Are you sure you want to remove the [slug] installation?', {
+    slug: app.slug,
+  });
+
+  return (
+    <Confirm
+      message={message}
+      priority="danger"
+      onConfirm={() => onClickUninstall && install && onClickUninstall(install)} //called when the user confirms the action
+      onConfirming={onUninstallModalOpen} //called when the confirm modal opens
+      disabled={disabled}
+    >
+      <StyledUninstallButton size="small" data-test-id="sentry-app-uninstall">
+        <IconSubtract circle style={{marginRight: space(0.75)}} />
+        {t('Uninstall')}
+      </StyledUninstallButton>
+    </Confirm>
+  );
+};
+
+const StyledUninstallButton = styled(Button)`
+  color: ${p => p.theme.gray2};
+  background: #ffffff;
+
+  border: ${p => `1px solid ${p.theme.gray2}`};
+  box-sizing: border-box;
+  box-shadow: 0px 2px 1px rgba(0, 0, 0, 0.08);
+  border-radius: 4px;
+`;
diff --git a/tests/js/spec/views/organizationIntegrations/sentryAppDetailedView.spec.jsx b/tests/js/spec/views/organizationIntegrations/sentryAppDetailedView.spec.jsx
index f90c72753c..4880da10f1 100644
--- a/tests/js/spec/views/organizationIntegrations/sentryAppDetailedView.spec.jsx
+++ b/tests/js/spec/views/organizationIntegrations/sentryAppDetailedView.spec.jsx
@@ -127,13 +127,13 @@ describe('SentryAppDetailedView', function() {
         wrapper.update();
         wrapperState = wrapper;
         expect(wrapper.find('IntegrationStatus').props().status).toEqual('Installed');
-        expect(wrapper.find('UninstallButton').exists()).toEqual(true);
+        expect(wrapper.find('UninstallAppButton').exists()).toEqual(true);
       });
 
       it('uninstalls app', async function() {
-        expect(wrapperState.find('UninstallButton')).toHaveLength(1);
+        expect(wrapperState.find('UninstallAppButton')).toHaveLength(1);
         wrapperState
-          .find('UninstallButton')
+          .find('UninstallAppButton')
           .props()
           .onClickUninstall();
         await tick();
@@ -300,7 +300,7 @@ describe('SentryAppDetailedView', function() {
       expect(createRequest).toHaveBeenCalled();
       wrapper.update();
       expect(wrapper.find('IntegrationStatus').props().status).toEqual('Installed');
-      expect(wrapper.find('UninstallButton').exists()).toEqual(true);
+      expect(wrapper.find('UninstallAppButton').exists()).toEqual(true);
     });
   });
 
diff --git a/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx
index 218fe902a9..1d5cc79ce4 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx
+++ b/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx
@@ -54,7 +54,7 @@ describe('Sentry App Installations', function() {
         <SentryAppInstallationDetail {...props} install={install} />,
         routerContext
       );
-      expect(wrapper.find('[icon="icon-trash"]').exists()).toBe(true);
+      expect(wrapper.find('UninstallButton').exists()).toBe(true);
     });
 
     it('install button opens permissions modal', () => {
