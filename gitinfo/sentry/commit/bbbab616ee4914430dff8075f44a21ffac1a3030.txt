commit bbbab616ee4914430dff8075f44a21ffac1a3030
Author: Dena Mwangi <dena@getsentry.com>
Date:   Mon Aug 20 11:08:50 2018 -0700

    chore(experiments): Close out enriched first event experiment (#9373)

diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 5834d2ea4f..8b110d8f06 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -43,7 +43,6 @@ default_manager.add('projects:custom-inbound-filters', ProjectFeature)  # NOQA
 default_manager.add('projects:minidump', ProjectFeature)  # NOQA
 default_manager.add('workflow:release-emails', ProjectFeature)  # NOQA
 default_manager.add('user:assistant')
-default_manager.add('user:install-experiment')
 
 # expose public api
 add = default_manager.add
diff --git a/src/sentry/static/sentry/app/views/planout/installReact.jsx b/src/sentry/static/sentry/app/views/planout/installReact.jsx
deleted file mode 100644
index 0d0ac6942b..0000000000
--- a/src/sentry/static/sentry/app/views/planout/installReact.jsx
+++ /dev/null
@@ -1,106 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from 'react-emotion';
-import createReactClass from 'create-react-class';
-
-import {t} from 'app/locale';
-
-const InstallReactTest = createReactClass({
-  displayName: 'InstallReactTest',
-
-  propTypes: {
-    dsn: PropTypes.string,
-  },
-
-  getInitialState(props) {
-    return {
-      loading: true,
-      error: false,
-    };
-  },
-
-  render() {
-    let dsn = this.props.dsn;
-
-    return (
-      <div>
-        <h3> Installation </h3>
-        <p>
-          {t('Start by adding the')}
-          <span className="pre"> raven.js </span>{' '}
-          {t(`script tag to your
-          page. It should be loaded as early as possible, before your main javascript
-          bundle.`)}
-        </p>
-        <pre>
-          <span>{'<'}</span>
-          <ScriptSpan>script </ScriptSpan>
-          <AttributeSpan>src</AttributeSpan>
-          <span>=</span>
-          <ValueSpan>{t('https://cdn.ravenjs.com/3.24.0/raven.min.js')}</ValueSpan>
-          <br />
-          <AttributeSpan> crossorigin</AttributeSpan>
-          <span>=</span>
-          <ValueSpan>{'anonymous'}</ValueSpan>
-          <span>{'></'}</span>
-          <ScriptSpan>script</ScriptSpan>
-          <span>{'>'}</span>
-        </pre>
-
-        <h3> Basic Configuration </h3>
-        <p>
-          {t(`Next configure Raven.js to use your Sentry DSN. Sending release and environment data both provide valuable
-          context e.g. when an issue was first seen. Learn more about `)}
-          <a href="https://docs.sentry.io/clients/javascript/config/">
-            {' '}
-            configuration options{' '}
-          </a>here.
-        </p>
-
-        <pre>
-          <span>
-            {'<'}
-            <ScriptSpan>script</ScriptSpan>
-            {'>'}
-          </span>
-          <br />
-          <span>{' Raven.config('}</span>
-          <ValueSpan>'{dsn}'</ValueSpan>
-          <span>{', {'}</span>
-          <br />
-
-          <span>{'   release: '}</span>
-          <ValueSpan>{"'0-0-0'"}</ValueSpan>
-          <span>{','}</span>
-          <br />
-          <span>{'   environment: '}</span>
-          <ValueSpan>{"'development-test'"}</ValueSpan>
-          <span>{','}</span>
-          <br />
-          <span>{' }).install()'}</span>
-          <br />
-          <span>
-            {'</'}
-            <ScriptSpan>script</ScriptSpan>
-            {'>'}
-          </span>
-          <br />
-        </pre>
-
-        <p>Congrats! Raven is now ready to capture any uncaught exceptions</p>
-      </div>
-    );
-  },
-});
-
-const ScriptSpan = styled('span')`
-  color: #2eb0f7;
-`;
-const AttributeSpan = styled('span')`
-  color: #a47ac6;
-`;
-const ValueSpan = styled('span')`
-  color: #e8535a;
-`;
-
-export default InstallReactTest;
diff --git a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
index a44f7f04b8..25f1d6853a 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
@@ -5,11 +5,8 @@ import styled from 'react-emotion';
 
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {t, tct} from 'app/locale';
-import analytics from 'app/utils/analytics';
 import ApiMixin from 'app/mixins/apiMixin';
 import Button from 'app/components/buttons/button';
-import ConfigStore from 'app/stores/configStore';
-import InstallReactTest from 'app/views/planout/installReact';
 import LanguageNav from 'app/views/projectInstall/languageNav';
 import Link from 'app/components/link';
 import LoadingError from 'app/components/loadingError';
@@ -59,14 +56,12 @@ const ProjectInstallPlatform = createReactClass({
       integration,
       platform,
       html: null,
-      experimentPlatforms: new Set(['javascript-react']),
     };
   },
 
   componentDidMount() {
     this.fetchData();
     $(window).scrollTop(0);
-    this.recordAnalytics();
   },
 
   componentWillReceiveProps(nextProps) {
@@ -109,28 +104,6 @@ const ProjectInstallPlatform = createReactClass({
     );
   },
 
-  inInstallExperiment() {
-    let {experimentPlatforms, integration} = this.state;
-    if (!integration || !integration.id) return '';
-
-    let currentPlatform = integration.id;
-    let installExperiment =
-      ConfigStore.get('features').has('install-experiment') &&
-      experimentPlatforms.has(currentPlatform);
-    return installExperiment;
-  },
-
-  recordAnalytics() {
-    let {experimentPlatforms, integration} = this.state;
-
-    if (!integration || !experimentPlatforms.has(integration.id)) return;
-
-    analytics('experiment.installation_instructions', {
-      integration: integration.id,
-      experiment: this.inInstallExperiment(),
-    });
-  },
-
   renderSidebar() {
     let platform = this.state.platform;
     return (
@@ -210,58 +183,10 @@ const ProjectInstallPlatform = createReactClass({
     );
   },
 
-  renderTestBody() {
-    let {integration, platform} = this.state;
-    let {dsnPublic} = this.props.platformData;
-    let {orgId, projectId} = this.props.params;
-
-    if (!integration || !platform) {
-      return <NotFound />;
-    }
-
-    return (
-      <Panel>
-        <PanelHeader hasButtons>
-          {t('Configure %(integration)s', {integration: integration.name})}
-          <Button size="small" href={integration.link} external>
-            {t('Full Documentation')}
-          </Button>
-        </PanelHeader>
-
-        <PanelBody disablePadding={false}>
-          {this.state.loading ? (
-            <LoadingIndicator />
-          ) : this.state.error ? (
-            <LoadingError onRetry={this.fetchData} />
-          ) : (
-            <InstallReactTest dsn={dsnPublic} />
-          )}
-          {this.isGettingStarted() && (
-            <Button
-              priority="primary"
-              size="large"
-              to={`/${orgId}/${projectId}/#welcome`}
-              style={{marginTop: 20}}
-            >
-              {t('Got it! Take me to the Issue Stream.')}
-            </Button>
-          )}
-        </PanelBody>
-      </Panel>
-    );
-  },
-
   render() {
-    let installExperiment;
-    if (!this.state.loading) {
-      installExperiment = this.inInstallExperiment();
-    }
-
     return (
       <div className="install row">
-        <div className="install-content col-md-10">
-          {installExperiment ? this.renderTestBody() : this.renderBody()}
-        </div>
+        <div className="install-content col-md-10">{this.renderBody()}</div>
         {this.renderSidebar()}
       </div>
     );
diff --git a/src/sentry/templatetags/sentry_react.py b/src/sentry/templatetags/sentry_react.py
index aee2f5f0c9..dd1518f496 100644
--- a/src/sentry/templatetags/sentry_react.py
+++ b/src/sentry/templatetags/sentry_react.py
@@ -103,8 +103,6 @@ def get_react_config(context):
         enabled_features.append('auth:register')
     if features.has('user:assistant', actor=user):
         enabled_features.append('assistant')
-    if features.has('user:install-experiment', actor=user):
-        enabled_features.append('install-experiment')
 
     version_info = _get_version_info()
 
diff --git a/tests/js/spec/views/projectInstall/platform.spec.jsx b/tests/js/spec/views/projectInstall/platform.spec.jsx
index 20a0cea683..4621f94337 100644
--- a/tests/js/spec/views/projectInstall/platform.spec.jsx
+++ b/tests/js/spec/views/projectInstall/platform.spec.jsx
@@ -2,7 +2,6 @@ import React from 'react';
 import {shallow} from 'enzyme';
 
 import {Client} from 'app/api';
-import ConfigStore from 'app/stores/configStore';
 import ProjectInstallPlatform from 'app/views/projectInstall/platform';
 
 describe('ProjectInstallPlatform', function() {
@@ -90,60 +89,5 @@ describe('ProjectInstallPlatform', function() {
 
       expect(wrapper.find('LoadingIndicator')).toHaveLength(1);
     });
-
-    // TO-DO(Dena): Remove next three tests after experiment
-    it('should render experiment if selected react and in treatment', function() {
-      // Assignment in treatment or control lives in the configstore
-      ConfigStore.set('features', new Set(['install-experiment']));
-      let props = {
-        ...baseProps,
-        params: {
-          platform: 'javascript-react',
-        },
-      };
-      let wrapper = shallow(<ProjectInstallPlatform {...props} />, {
-        disableLifecycleMethods: false,
-        organization: {id: '1337'},
-      });
-
-      wrapper.setState({loading: false});
-      expect(wrapper.find('InstallReactTest')).toHaveLength(1);
-    });
-
-    it('should not render experiment if selected react and in control', function() {
-      // Assignment in treatment or control lives in the configstore
-      ConfigStore.set('features', new Set());
-      let props = {
-        ...baseProps,
-        params: {
-          platform: 'javascript-react',
-        },
-      };
-      let wrapper = shallow(<ProjectInstallPlatform {...props} />, {
-        disableLifecycleMethods: false,
-        organization: {id: '1337'},
-      });
-
-      wrapper.setState({loading: false});
-      expect(wrapper.find('InstallReactTest')).toHaveLength(0);
-    });
-
-    it('should not render experiment if did not select react and in treatment', function() {
-      // Assignment in treatment or control lives in the configstore
-      ConfigStore.set('features', new Set(['install-experiment']));
-      let props = {
-        ...baseProps,
-        params: {
-          platform: 'node-connect',
-        },
-      };
-      let wrapper = shallow(<ProjectInstallPlatform {...props} />, {
-        disableLifecycleMethods: false,
-        organization: {id: '1337'},
-      });
-
-      wrapper.setState({loading: false});
-      expect(wrapper.find('InstallReactTest')).toHaveLength(0);
-    });
   });
 });
