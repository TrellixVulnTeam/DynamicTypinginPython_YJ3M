commit 4717dd5438fce075d5034ee76b292ea0e7ca8ab6
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Oct 15 11:03:49 2018 -0700

    test(discover): Add tests for conditions components (#10118)

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/index.jsx
index 179b4aabd1..fea6279ba7 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/index.jsx
@@ -13,7 +13,7 @@ export default class Conditions extends React.Component {
   static propTypes = {
     value: PropTypes.arrayOf(PropTypes.array).isRequired,
     onChange: PropTypes.func.isRequired,
-    columns: PropTypes.array,
+    columns: PropTypes.array.isRequired,
   };
 
   addRow() {
diff --git a/tests/js/spec/views/organizationDiscover/conditions/index.spec.jsx b/tests/js/spec/views/organizationDiscover/conditions/index.spec.jsx
new file mode 100644
index 0000000000..16e2cd5c08
--- /dev/null
+++ b/tests/js/spec/views/organizationDiscover/conditions/index.spec.jsx
@@ -0,0 +1,47 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import Conditions from 'app/views/organizationDiscover/conditions';
+
+describe('Conditions', function() {
+  let wrapper, onChangeMock, conditions;
+  beforeEach(function() {
+    conditions = [['col1', 'IS NOT NULL', null], ['col2', '=', 2]];
+    onChangeMock = jest.fn();
+    const columns = [{name: 'col1', type: 'string'}, {name: 'col2', type: 'number'}];
+    const value = [];
+    wrapper = mount(
+      <Conditions columns={columns} onChange={onChangeMock} value={value} />
+    );
+  });
+  describe('render()', function() {
+    it('renders conditions', function() {
+      wrapper.setProps({value: conditions});
+      expect(wrapper.find('Condition')).toHaveLength(2);
+    });
+
+    it('renders empty text if no conditions', function() {
+      expect(wrapper.text()).toContain('None, showing all events');
+    });
+  });
+
+  it('addRow()', function() {
+    wrapper
+      .find('AddText')
+      .find('Link')
+      .simulate('click');
+    expect(onChangeMock).toHaveBeenCalledWith([[null, null, null]]);
+  });
+
+  it('removeRow()', function() {
+    wrapper.setProps({value: conditions});
+    wrapper.instance().removeRow(1);
+    expect(onChangeMock).toHaveBeenCalledWith([conditions[0]]);
+  });
+
+  it('handleChange', function() {
+    wrapper.setProps({value: conditions});
+    wrapper.instance().handleChange(['col1', 'IS NULL', null], 0);
+    expect(onChangeMock).toHaveBeenCalledWith([['col1', 'IS NULL', null], conditions[1]]);
+  });
+});
diff --git a/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
index 2a824d4fd6..fd056f2eeb 100644
--- a/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
@@ -39,6 +39,10 @@ const conditionList = [
     internal: 'exception_frames.in_app = true',
     external: ['exception_frames.in_app', '=', true],
   },
+  {
+    internal: 'exception_frames.in_app = false',
+    external: ['exception_frames.in_app', '=', false],
+  },
 ];
 
 describe('Conditions', function() {
