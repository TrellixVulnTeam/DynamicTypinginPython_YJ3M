commit 569fe0a75efb984696cfe120a9d18dabe4bd9d55
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Mon Jun 26 16:02:38 2017 -0700

    Create `GroupTombstoneEndpoint` and `GroupTombstoneSerializer`

diff --git a/src/sentry/api/endpoints/group_tombstone.py b/src/sentry/api/endpoints/group_tombstone.py
new file mode 100644
index 0000000000..582b2db3e7
--- /dev/null
+++ b/src/sentry/api/endpoints/group_tombstone.py
@@ -0,0 +1,39 @@
+from __future__ import absolute_import
+
+from sentry.api.bases import Endpoint
+from sentry.api.bases.group import GroupPermission
+from sentry.api.paginator import OffsetPaginator
+from sentry.api.serializers import serialize
+
+from sentry.models import (
+    GroupHash, GroupTombstone
+)
+
+
+class GroupTombstoneEndpoint(Endpoint):
+    permission_classes = (GroupPermission,)
+
+    def get(self, request, organization_id, project_id):
+        """
+        Retrieve a Project's GroupTombstones
+        ```````````````
+
+        Lists a project's `GroupTombstone` objects
+
+        :pparam string organization_id: the ID of the organization.
+        :pparam string project_id: the ID of the project to get the tombstones for
+        :auth: required
+        """
+        queryset = GroupTombstone.objects.filter(
+            id__in=GroupHash.objects.filter(
+                project=project_id
+            ).values_list('group_tombstone', flat=True)
+        )
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by='id',
+            paginator_cls=OffsetPaginator,
+            on_results=lambda x: serialize(x, request.user),
+        )
diff --git a/src/sentry/api/serializers/models/grouptombstone.py b/src/sentry/api/serializers/models/grouptombstone.py
new file mode 100644
index 0000000000..8aa7dba391
--- /dev/null
+++ b/src/sentry/api/serializers/models/grouptombstone.py
@@ -0,0 +1,37 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.api.serializers import Serializer, register, serialize
+from sentry.models import (
+    GroupTombstone
+)
+
+
+@register(GroupTombstone)
+class GroupTombstoneSerializer(Serializer):
+
+    def get_attrs(self, item_list, user):
+        projects = {
+            d['id']: d
+            for d in serialize(set(i.project for i in item_list), user)
+        }
+
+        attrs = {}
+        for item in item_list:
+            attrs[item] = {
+                'project': projects[six.text_type(item.project_id)]
+            }
+        return attrs
+
+    def serialize(self, obj, attrs, user):
+        d = {
+            'id': six.text_type(obj.id),
+            'project': attrs.get('project', ''),
+            'level': six.text_type(obj.level),
+            'message': obj.message,
+            'culprit': obj.culprit,
+            'type': obj.type,
+        }
+
+        return d
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index add354c2fd..040555eee2 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -26,6 +26,7 @@ from .endpoints.group_tags import GroupTagsEndpoint
 from .endpoints.group_tagkey_details import GroupTagKeyDetailsEndpoint
 from .endpoints.group_tagkey_values import GroupTagKeyValuesEndpoint
 from .endpoints.group_tombstone_details import GroupTombstoneDetailsEndpoint
+from .endpoints.group_tombstone import GroupTombstoneEndpoint
 from .endpoints.group_user_reports import GroupUserReportsEndpoint
 from .endpoints.index import IndexEndpoint
 from .endpoints.internal_queue_tasks import InternalQueueTasksEndpoint
@@ -480,6 +481,9 @@ urlpatterns = patterns(
         name='sentry-api-0-shared-group-details'),
 
     # Tombstone
+    url(r'^projects/(?P<organization_id>[^\/]+)/(?P<project_id>[^\/]+)/tombstone/$',
+        GroupTombstoneEndpoint.as_view(),
+        name='sentry-api-0-group-tombstone'),
     url(r'^tombstone/(?P<tombstone_id>\d+)/$',
         GroupTombstoneDetailsEndpoint.as_view(),
         name='sentry-api-0-group-tombstone-details'),
diff --git a/tests/sentry/api/endpoints/test_group_tombstone.py b/tests/sentry/api/endpoints/test_group_tombstone.py
new file mode 100644
index 0000000000..081a3850c5
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_tombstone.py
@@ -0,0 +1,39 @@
+from __future__ import absolute_import, print_function
+
+from sentry.models import GroupHash, GroupTombstone
+from sentry.testutils import APITestCase
+
+
+class GroupTombstoneTest(APITestCase):
+
+    def test_simple(self):
+        # import pdb; pdb.set_trace()
+        self.login_as(user=self.user)
+        org = self.create_organization(
+            owner=self.user,
+        )
+        project = self.create_project(
+            organization=org,
+            name='CoolProj',
+        )
+        group = self.create_group(project=project)
+        tombstone = GroupTombstone.objects.create(
+            project_id=group.project_id,
+            level=group.level,
+            message=group.message,
+            culprit=group.culprit,
+            type=group.get_event_type(),
+        )
+        GroupHash.objects.create(
+            project=group.project,
+            hash='x' * 32,
+            group=group,
+            group_tombstone=tombstone
+        )
+
+        path = '/api/0/projects/{}/{}/tombstone/'.format(org.id, project.id)
+        response = self.client.get(path)
+
+        assert response.status_code == 200, response
+        assert response.data[0]['message'] == group.message
+        assert response.data[0]['project']['name'] == project.name
diff --git a/tests/sentry/api/serializers/test_group_tombstone.py b/tests/sentry/api/serializers/test_group_tombstone.py
new file mode 100644
index 0000000000..d2af1bc1bb
--- /dev/null
+++ b/tests/sentry/api/serializers/test_group_tombstone.py
@@ -0,0 +1,38 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.api.serializers import serialize
+from sentry.models import (GroupHash, GroupTombstone)
+from sentry.testutils import TestCase
+
+
+class GroupTombstoneSerializerTest(TestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+        org = self.create_organization(
+            owner=self.user,
+        )
+        project = self.create_project(
+            organization=org,
+            name='CoolProj',
+        )
+        group = self.create_group(project=project)
+        tombstone = GroupTombstone.objects.create(
+            project_id=group.project_id,
+            level=group.level,
+            message=group.message,
+            culprit=group.culprit,
+            type=group.get_event_type(),
+        )
+        GroupHash.objects.create(
+            project=group.project,
+            hash='x' * 32,
+            group=group,
+            group_tombstone=tombstone
+        )
+        result = serialize(tombstone, self.user)
+
+        assert result['message'] == group.message
+        assert result['culprit'] == group.culprit
+        assert result['project']['name'] == 'CoolProj'
