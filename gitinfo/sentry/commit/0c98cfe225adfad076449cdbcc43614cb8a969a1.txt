commit 0c98cfe225adfad076449cdbcc43614cb8a969a1
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 22 15:27:57 2015 -0700

    Automatically generate culprits when missing
    
    Attempts to find the best frame by looking for the most recent frame
    marked as in_app, or the most recent frame if not present.
    
    Refs GH-1989

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 3db5ea9d5f..c843a0542d 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -37,6 +37,7 @@ from sentry.tasks.merge import merge_group
 from sentry.tasks.post_process import post_process_group
 from sentry.utils.db import get_db_engine
 from sentry.utils.safe import safe_execute, trim, trim_dict
+from sentry.utils.strings import truncatechars
 
 
 def count_limit(count):
@@ -109,6 +110,30 @@ else:
         return True
 
 
+def generate_culprit(data):
+    from sentry.interfaces.stacktrace import Stacktrace
+
+    try:
+        stacktraces = [
+            e['stacktrace']
+            for e in data['sentry.interfaces.Exception']['values']
+            if e.get('stacktrace')
+        ]
+    except KeyError:
+        if 'sentry.interfaces.Stacktrace' in data:
+            stacktraces = [data['sentry.interfaces.Stacktrace']]
+        else:
+            return ''
+
+    if not stacktraces:
+        return ''
+
+    return truncatechars(
+        Stacktrace.to_python(stacktraces[-1]).get_culprit_string(),
+        MAX_CULPRIT_LENGTH
+    )
+
+
 def plugin_is_regression(group, event):
     project = event.project
     for plugin in plugins.for_project(project):
@@ -293,7 +318,7 @@ class EventManager(object):
         message = data.pop('message')
         level = data.pop('level')
 
-        culprit = data.pop('culprit', None) or ''
+        culprit = data.pop('culprit', None)
         time_spent = data.pop('time_spent', None)
         logger_name = data.pop('logger', None)
         server_name = data.pop('server_name', None)
@@ -303,6 +328,9 @@ class EventManager(object):
         platform = data.pop('platform', None)
         release = data.pop('release', None)
 
+        if not culprit:
+            culprit = generate_culprit(data)
+
         date = datetime.fromtimestamp(data.pop('timestamp'))
         date = date.replace(tzinfo=timezone.utc)
 
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 49f7237c88..ba91402a60 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -363,6 +363,15 @@ class Frame(Interface):
             'context_line': self.context_line,
         }).strip('\n')
 
+    def get_culprit_string(self):
+        fileloc = self.module or self.filename
+        if not fileloc:
+            return ''
+        return '%s in %s' % (
+            fileloc,
+            self.function or '?',
+        )
+
 
 class Stacktrace(Interface):
     """
@@ -603,3 +612,12 @@ class Stacktrace(Interface):
         ]
 
         return '\n'.join(result)
+
+    def get_culprit_string(self):
+        default = None
+        for frame in reversed(self.frames):
+            if frame.in_app:
+                return frame.get_culprit_string()
+            elif default is None:
+                default = frame.get_culprit_string()
+        return default
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 5dab28de8b..c0a8d95c0e 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -23,12 +23,11 @@ except ImportError:
         pass
 
 from sentry import http
-from sentry.constants import MAX_CULPRIT_LENGTH
 from sentry.interfaces.stacktrace import Stacktrace
 from sentry.models import EventError, Release, ReleaseFile
+from sentry.event_manager import generate_culprit
 from sentry.utils.cache import cache
 from sentry.utils.http import is_valid_origin
-from sentry.utils.strings import truncatechars
 
 from .cache import SourceCache, SourceMapCache
 from .sourcemaps import sourcemap_to_index, find_source
@@ -370,10 +369,6 @@ def generate_module(src):
     return CLEAN_MODULE_RE.sub('', filename) or UNKNOWN_MODULE
 
 
-def generate_culprit(frame):
-    return '%s in %s' % (frame.module or frame.filename, frame.function)
-
-
 class SourceProcessor(object):
     """
     Attempts to fetch source code for javascript frames.
@@ -456,9 +451,7 @@ class SourceProcessor(object):
         return data
 
     def fix_culprit(self, data, stacktraces):
-        culprit_frame = stacktraces[-1][1].frames[-1]
-        if culprit_frame.filename and culprit_frame.function:
-            data['culprit'] = truncatechars(generate_culprit(culprit_frame), MAX_CULPRIT_LENGTH)
+        data['culprit'] = generate_culprit(data)
 
     def update_stacktraces(self, stacktraces):
         for raw, interface in stacktraces:
