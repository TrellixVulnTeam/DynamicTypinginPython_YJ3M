commit 0b4c100069a30e7725ace1c437ad6047ab90a9ff
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Nov 6 12:12:59 2014 -0800

    Add test for create organization member flow

diff --git a/src/sentry/web/frontend/create_organization_member.py b/src/sentry/web/frontend/create_organization_member.py
index 12fa22d4ce..f5b07e0eb3 100644
--- a/src/sentry/web/frontend/create_organization_member.py
+++ b/src/sentry/web/frontend/create_organization_member.py
@@ -27,13 +27,23 @@ class InviteOrganizationMemberForm(forms.ModelForm):
         om.organization = organization
         om.type = OrganizationMemberType.MEMBER
 
+        try:
+            existing = OrganizationMember.objects.get(
+                organization=organization,
+                user__email__iexact=om.email,
+            )
+        except OrganizationMember.DoesNotExist:
+            pass
+        else:
+            return existing, False
+
         sid = transaction.savepoint(using='default')
         try:
             om.save()
         except IntegrityError:
             transaction.savepoint_rollback(sid, using='default')
             return OrganizationMember.objects.get(
-                email=om.email,
+                email__iexact=om.email,
                 organization=organization,
             ), False
         transaction.savepoint_commit(sid, using='default')
diff --git a/tests/sentry/web/frontend/test_create_organization_member.py b/tests/sentry/web/frontend/test_create_organization_member.py
new file mode 100644
index 0000000000..14475989f0
--- /dev/null
+++ b/tests/sentry/web/frontend/test_create_organization_member.py
@@ -0,0 +1,113 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import OrganizationMember, OrganizationMemberType
+from sentry.testutils import TestCase
+
+
+class CreateOrganizationMemberTest(TestCase):
+    def test_renders_with_context(self):
+        organization = self.create_organization()
+        path = reverse('sentry-create-organization-member', args=[organization.id])
+        self.login_as(self.user)
+        resp = self.client.get(path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/create-organization-member.html')
+        assert resp.context['organization'] == organization
+        assert resp.context['form']
+
+    def test_valid_for_invites(self):
+        organization = self.create_organization()
+        path = reverse('sentry-create-organization-member', args=[organization.id])
+        self.login_as(self.user)
+
+        with self.settings(SENTRY_ENABLE_INVITES=True):
+            resp = self.client.post(path, {
+                'type': OrganizationMemberType.MEMBER,
+                'email': 'foo@example.com',
+            })
+        assert resp.status_code == 302
+
+        member = OrganizationMember.objects.get(
+            organization=organization,
+            email='foo@example.com',
+        )
+
+        assert member.type == OrganizationMemberType.MEMBER
+        assert member.user is None
+
+        redirect_uri = reverse('sentry-organization-member-settings', args=[organization.id, member.id])
+        assert resp['Location'] == 'http://testserver' + redirect_uri
+
+    def test_existing_user_for_invite(self):
+        organization = self.create_organization()
+        path = reverse('sentry-create-organization-member', args=[organization.id])
+        self.login_as(self.user)
+
+        user = self.create_user('foo@example.com')
+
+        member = OrganizationMember.objects.create(
+            organization=organization,
+            user=user,
+            type=OrganizationMemberType.MEMBER,
+        )
+
+        with self.settings(SENTRY_ENABLE_INVITES=True):
+            resp = self.client.post(path, {
+                'type': OrganizationMemberType.ADMIN,
+                'email': 'foo@example.com',
+            })
+
+        assert resp.status_code == 302
+
+        member = OrganizationMember.objects.get(
+            organization=organization,
+            user=member,
+        )
+
+        assert member.type == OrganizationMemberType.MEMBER
+        assert member.user == user
+        assert member.email is None
+
+        redirect_uri = reverse('sentry-organization-member-settings', args=[organization.id, member.id])
+        assert resp['Location'] == 'http://testserver' + redirect_uri
+
+    def test_valid_for_direct_add(self):
+        organization = self.create_organization()
+        path = reverse('sentry-create-organization-member', args=[organization.id])
+        self.login_as(self.user)
+
+        user = self.create_user('foo@example.com')
+
+        with self.settings(SENTRY_ENABLE_INVITES=False):
+            resp = self.client.post(path, {
+                'type': OrganizationMemberType.MEMBER,
+                'user': 'foo@example.com',
+            })
+        assert resp.status_code == 302
+
+        member = OrganizationMember.objects.get(
+            organization=organization,
+            user=user,
+        )
+
+        assert member.type == OrganizationMemberType.MEMBER
+        assert member.email is None
+
+        redirect_uri = reverse('sentry-organization-member-settings', args=[organization.id, member.id])
+        assert resp['Location'] == 'http://testserver' + redirect_uri
+
+    def test_invalid_user_for_direct_add(self):
+        organization = self.create_organization()
+        path = reverse('sentry-create-organization-member', args=[organization.id])
+        self.login_as(self.user)
+
+        with self.settings(SENTRY_ENABLE_INVITES=False):
+            resp = self.client.post(path, {
+                'type': OrganizationMemberType.MEMBER,
+                'user': 'bar@example.com',
+            })
+
+        assert resp.status_code == 200
+        assert 'user' in resp.context['form'].errors
