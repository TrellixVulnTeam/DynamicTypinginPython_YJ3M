commit 7eb9115c593acd781b14565ff2fbb77e896b5ed4
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Feb 17 00:46:30 2016 -0800

    Started work on UI for setting call signs

diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index f0482bcb91..b9aaa1052f 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -36,6 +36,7 @@ class ProjectSerializer(Serializer):
             'name': obj.name,
             'isPublic': obj.public,
             'isBookmarked': attrs['is_bookmarked'],
+            'shortName': obj.short_name,
             'dateCreated': obj.date_added,
             'firstEvent': obj.first_event,
             'features': feature_list,
diff --git a/src/sentry/static/sentry/app/components/actionOverlay.jsx b/src/sentry/static/sentry/app/components/actionOverlay.jsx
new file mode 100644
index 0000000000..83ddf51483
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/actionOverlay.jsx
@@ -0,0 +1,58 @@
+import React from 'react';
+import {History} from 'react-router';
+import OrganizationState from '../mixins/organizationState';
+import {t} from '../locale';
+
+const ActionOverlay = React.createClass({
+  propTypes: {
+    actionId: React.PropTypes.string.isRequired
+  },
+  mixins: [OrganizationState, History],
+
+  componentWillMount() {
+    // in case we mount but we are not an org admin or our action is not
+    // in the list of currently required actions, we bail out in a really
+    // stupid way but works.
+    let org = this.getOrganization();
+    let access = this.getAccess();
+    let requiredActions = new Set(org.requiredAdminActions);
+
+    if (!access.has('org:write') ||
+        !requiredActions.has(this.props.actionId)) {
+      this.dismiss();
+    }
+  },
+
+  dismiss() {
+    // is this the right thing?
+    this.context.history.goBack();
+  },
+
+  onDoThisLater(event) {
+    event.preventDefault();
+    this.dismiss();
+  },
+
+  render() {
+    let {children, ...other} = this.props;
+    let orgUrl = `/organizations/${this.getOrganization().slug}/`;
+    return (
+      <div className="admin-action-overlay" {...other}>
+        <div className="pattern"/>
+        <div className="container">
+          <div className="dialog">
+            <div className="discard-bar">
+              <a href={orgUrl} onClick={this.onDoThisLater}>{
+                t('Do this later …')}</a>
+            </div>
+            <div className="content">
+              {children}
+            </div>
+          </div>
+        </div>
+      </div>
+    );
+  }
+});
+
+export default ActionOverlay;
diff --git a/src/sentry/static/sentry/app/components/header/index.jsx b/src/sentry/static/sentry/app/components/header/index.jsx
index 4880667a6f..693cdc69f2 100644
--- a/src/sentry/static/sentry/app/components/header/index.jsx
+++ b/src/sentry/static/sentry/app/components/header/index.jsx
@@ -9,8 +9,10 @@ import {Link} from 'react-router';
 import Broadcasts from './broadcasts';
 import StatusPage from './statuspage';
 import UserNav from './userNav';
+import requiredAdminActions from '../requiredAdminActions';
 import OrganizationSelector from './organizationSelector';
 import TodoList from '../todos';
+import {t} from '../../locale';
 
 const OnboardingStatus = React.createClass({
   propTypes: {
@@ -89,6 +91,27 @@ const Header = React.createClass({
       logo = <span className="icon-sentry-logo-full"/>;
     }
 
+    let actionMessage = null;
+
+    if (org) {
+      let requiredActions = org.requiredAdminActions;
+      if (requiredActions.length > 0) {
+        if (this.getAccess().has('org:write')) {
+          let slugId = requiredActions[0].toLowerCase().replace(/_/g, '-');
+          let url = `/organizations/${org.slug}/actions/${slugId}/`;
+          actionMessage = (
+            <a href={url}>{t('Required Action:')}{' '}{
+              requiredAdminActions[requiredActions[0]].getActionLinkTitle()}</a>
+          );
+        } else {
+          actionMessage = (
+            <span>{t('There are pending actions for an administrator of this organization!')}</span>
+          );
+        }
+      }
+    }
+
+    // NOTE: this.props.orgId not guaranteed to be specified
     return (
       <header>
         <div className="container">
@@ -108,6 +131,9 @@ const Header = React.createClass({
                               onToggleTodos={this.toggleTodos}
                               onHideTodos={this.setState.bind(this, {showTodos: false})} />
           }
+          {actionMessage ?
+            <span className="admin-action-message">{actionMessage}</span>
+            : null}
         </div>
       </header>
     );
diff --git a/src/sentry/static/sentry/app/components/requiredAdminActions.jsx b/src/sentry/static/sentry/app/components/requiredAdminActions.jsx
new file mode 100644
index 0000000000..1caf7a4822
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/requiredAdminActions.jsx
@@ -0,0 +1,7 @@
+import SetShortIdsAction from '../views/requiredAdminActions/setShortIds';
+
+const requiredAdminActions = {
+  SET_SHORT_IDS: SetShortIdsAction
+};
+
+export default requiredAdminActions;
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 4542d484d8..f2a3687c4c 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -48,6 +48,8 @@ import TeamDetails from './views/teamDetails';
 import TeamMembers from './views/teamMembers';
 import TeamSettings from './views/teamSettings';
 
+import SetShortIdsAction from './views/requiredAdminActions/setShortIds';
+
 import errorHandler from './utils/errorHandler';
 
 function appendTrailingSlash(nextState, replaceState) {
@@ -86,6 +88,7 @@ let routes = (
         <Route path="settings/" component={errorHandler(TeamSettings)} />
         <Route path="members/" component={errorHandler(TeamMembers)} />
       </Route>
+      <Route path="/organizations/:orgId/actions/set-short-ids/" component={errorHandler(SetShortIdsAction)} />
 
       <Route path=":projectId/" component={errorHandler(ProjectDetails)}>
         <IndexRoute component={errorHandler(Stream)} />
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index febbd6d53f..cede34f63d 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -14,6 +14,25 @@ let ERROR_TYPES = {
   ORG_NOT_FOUND: 'ORG_NOT_FOUND'
 };
 
+function doProjectsNeedShortId(teams) {
+  for (let i = 0; i < teams.length; i++) {
+    for (let j = 0; j < teams[i].projects.length; j++) {
+      if (teams[i].projects[j].shortName === null) {
+        return true;
+      }
+    }
+  }
+  return false;
+}
+
+function getRequiredAdminActions(org) {
+  let rv = [];
+  if (doProjectsNeedShortId(org.teams)) {
+    rv.push('SET_SHORT_IDS');
+  }
+  return rv;
+}
+
 const OrganizationDetails = React.createClass({
   childContextTypes: {
     organization: PropTypes.Organization
@@ -65,6 +84,8 @@ const OrganizationDetails = React.createClass({
           hooks.push(cb(data));
         });
 
+        data.requiredAdminActions = getRequiredAdminActions(data);
+
         this.setState({
           organization: data,
           loading: false,
diff --git a/src/sentry/static/sentry/app/views/requiredAdminActions/setShortIds.jsx b/src/sentry/static/sentry/app/views/requiredAdminActions/setShortIds.jsx
new file mode 100644
index 0000000000..9e8ba11da3
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/requiredAdminActions/setShortIds.jsx
@@ -0,0 +1,110 @@
+import React from 'react';
+import ActionOverlay from '../../components/actionOverlay';
+import OrganizationState from '../../mixins/organizationState';
+import {t} from '../../locale';
+
+
+function generateShortName(name) {
+  let bits = name.split(/[\s_-]+/g);
+  if (bits.length > 1) {
+    return (bits[0][0] + bits[1][0]).toUpperCase();
+  }
+  return bits[0].substr(0, 2).toUpperCase();
+}
+
+function prefillShortNames(projects) {
+  let used = new Set();
+  projects.forEach((project) => {
+    if (project.shortName) {
+      used.add(project.shortName);
+    } else {
+      let shortName = generateShortName(project.projectName);
+      if (used.has(shortName)) {
+        let altShortName = project.teamName[0] + shortName;
+        if (!used.has(altShortName)) {
+          project.shortName = altShortName;
+          used.add(altShortName);
+        } else {
+          for (let i = 2; i < 10; i++) {
+            altShortName = shortName + i;
+            if (!used.has(altShortName)) {
+              used.add(altShortName);
+              project.shortName = altShortName;
+              break;
+            }
+          }
+        }
+      } else {
+        project.shortName = shortName;
+        used.add(shortName);
+      }
+    }
+  });
+}
+
+
+const SetShortIdsAction = React.createClass({
+  mixins: [OrganizationState],
+
+  getProjectList() {
+    let org = this.getOrganization();
+    let projects = [];
+    for (let i = 0; i < org.teams.length; i++) {
+      for (let j = 0; j < org.teams[i].projects.length; j++) {
+        let project = org.teams[i].projects[j];
+        projects.push({
+          projectId: project.id,
+          projectName: project.name,
+          teamName: org.teams[i].name,
+          shortName: project.shortName || null
+        });
+      }
+    }
+
+    prefillShortNames(projects);
+
+    return projects;
+  },
+
+  render() {
+    let org = this.getOrganization();
+    let projects = this.getProjectList();
+
+    return (
+      <ActionOverlay actionId="SET_SHORT_IDS">
+        <h1>{t('Add Call Signs to Projects')}</h1>
+        <p>{t('Sentry now requires you to specify a call sign (short name) for each project in the organization “%s”. These short names are used to identify the project in the issue IDs.  Ideally they are two or three letter long.', org.name)}</p>
+        <form className="form-horizontal">
+          {projects.map((project) => {
+            let inputId = 'input-' + project.projectId;
+            return (
+              <div className="form-group short-id-form-group" key={project.projectId}>
+                <label htmlFor={inputId}
+                  className="col-sm-6 col-sm-offset-2 control-label">
+                  {project.teamName} / {project.projectName}
+                </label>
+                <div className="col-sm-2">
+                  <input type="text"
+                    id={inputId}
+                    className="form-control"
+                    defaultValue={project.shortName}/>
+                </div>
+              </div>
+            );
+          })}
+          <div className="actions">
+            <button type="button" className="btn btn-primary btn-lg">
+              {t('Set Call Signs')}
+            </button>
+          </div>
+        </form>
+      </ActionOverlay>
+    );
+  }
+});
+
+SetShortIdsAction.getActionLinkTitle = function() {
+  return t('Call Signs for Projects');
+};
+
+export default SetShortIdsAction;
diff --git a/src/sentry/static/sentry/less/layout.less b/src/sentry/static/sentry/less/layout.less
index acadbbdf71..3c568a11d0 100644
--- a/src/sentry/static/sentry/less/layout.less
+++ b/src/sentry/static/sentry/less/layout.less
@@ -74,6 +74,15 @@ header {
     padding-right: 0;
   }
 
+  .admin-action-message {
+    line-height: 42px;
+    display: block;
+    float: right;
+    font-size: 13px;
+    font-weight: bold;
+    padding-right: 10px;
+  }
+
   a {
     color: #CBD4E1;
 
diff --git a/src/sentry/static/sentry/less/required-admin-actions.less b/src/sentry/static/sentry/less/required-admin-actions.less
new file mode 100644
index 0000000000..49065a2565
--- /dev/null
+++ b/src/sentry/static/sentry/less/required-admin-actions.less
@@ -0,0 +1,84 @@
+.admin-action-overlay {
+  #gradient > .horizontal(#9f73c3 , #6875be);
+  height: 100%;
+  position: fixed;
+  top: 0;
+  left: 0;
+  right: 0;
+  bottom: 0;
+  z-index: 99999;
+
+  .pattern {
+    position: fixed;
+    top: 0;
+    right: 0;
+    bottom: 0;
+    left: 0;
+    background: url(../images/sentry-pattern.png);
+    background-size: 400px;
+    opacity: .8;
+  }
+}
+
+.admin-action-overlay .container {
+  height: 100%;
+}
+
+.admin-action-overlay .dialog {
+  .clearfix;
+  background: #fff;
+  width: 600px;
+  padding: 20px;
+  border-radius: 4px;
+  box-shadow: 0 5px 30px rgba(0, 0, 0, .3);
+  position: absolute;
+  left: 50%;
+  margin-left: -300px;
+  margin-top: 50px;
+
+  .discard-bar {
+    float: right;
+    a {
+      font-weight: bold;
+    }
+  }
+
+  h1 {
+    .clearfix;
+    line-height: 32px;
+    font-size: 28px;
+
+    > span {
+      display: block;
+      float: left;
+    }
+    > small {
+      float: right;
+      display: block;
+      font-size: 18px;
+      line-height: inherit;
+    }
+  }
+}
+
+.admin-action-overlay {
+  div.actions {
+    text-align: center;
+    padding: 20px 0;
+  }
+
+  .short-id-form-group {
+    label { text-align: left; }
+    input {
+      text-align: center;
+      font-weight: bold;
+      font-size: 18px;
+      padding: 3px 10px 4px;
+      background: @purple;
+      color: white;
+      text-shadow: 0 0 2px darken(@purple, 30);
+      box-shadow: inset 0 0 4px darken(@purple, 20);
+      border: 1px solid darken(@purple, 40);
+    }
+  }
+}
diff --git a/src/sentry/static/sentry/less/sentry.less b/src/sentry/static/sentry/less/sentry.less
index 0ac5fe75de..1d8f73c362 100644
--- a/src/sentry/static/sentry/less/sentry.less
+++ b/src/sentry/static/sentry/less/sentry.less
@@ -11,6 +11,7 @@
 @import url("./organization.less");
 @import url("./project-settings.less");
 @import url("./setup-wizard.less");
+@import url("./required-admin-actions.less");
 @import url("./docs.less");
 @import url("./auth.less");
 @import url("./misc.less");
