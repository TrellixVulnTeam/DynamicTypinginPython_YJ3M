commit ed5452ffd34f9ea33d881c5308b18207e750bca2
Author: Matte Noble <me@mattenoble.com>
Date:   Fri Nov 30 16:18:56 2018 -0800

    fix(service-hooks): Update resource change hook (#10880)
    
    - Adds `*args` and `**kwargs` to handle the signature change.
    - Handles passing both a class object and class string (where the latter
    will be how it works moving forward)
    
    Fixes SENTRY-8H4

diff --git a/src/sentry/models/signals.py b/src/sentry/models/signals.py
index 2fdf79130e..70cd52a367 100644
--- a/src/sentry/models/signals.py
+++ b/src/sentry/models/signals.py
@@ -10,4 +10,8 @@ from sentry.models import Group
 def resource_changed(sender, instance, created, **kwargs):
     if created:
         from sentry.tasks.servicehooks import process_resource_change
-        process_resource_change.delay(sender, instance.id)
+
+        process_resource_change.delay(
+            sender=sender.__name__,
+            instance_id=instance.id,
+        )
diff --git a/src/sentry/tasks/servicehooks.py b/src/sentry/tasks/servicehooks.py
index d52ca8dcf4..c1a0f72c03 100644
--- a/src/sentry/tasks/servicehooks.py
+++ b/src/sentry/tasks/servicehooks.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import, print_function
 
 import six
+import inspect
 
 from time import time
 from celery.task import current
@@ -25,6 +26,10 @@ RESOURCE_RENAMES = {
     'Group': 'issue',
 }
 
+TYPES = {
+    'Group': Group,
+}
+
 
 @instrumented_task(
     'sentry.tasks.process_resource_change',
@@ -32,20 +37,28 @@ RESOURCE_RENAMES = {
     max_retries=5,
 )
 @retry()
-def process_resource_change(sender, instance_id):
-    model = sender.__name__
-    model = RESOURCE_RENAMES.get(model, model.lower())
+def process_resource_change(sender, instance_id, *args, **kwargs):
+    model = None
+    name = None
+
+    # Previous method signature.
+    if inspect.isclass(sender):
+        model = sender
+    else:
+        model = TYPES[sender]
+
+    name = RESOURCE_RENAMES.get(model.__name__, model.__name__.lower())
 
     # We may run into a race condition where this task executes before the
     # transaction that creates the Group has committed.
     try:
-        instance = sender.objects.get(id=instance_id)
-    except sender.DoesNotExist as e:
+        instance = model.objects.get(id=instance_id)
+    except model.DoesNotExist as e:
         # Explicitly requeue the task, so we don't report this to Sentry until
         # we hit the max number of retries.
         return current.retry(exc=e)
 
-    action = u'{}.created'.format(model)
+    action = u'{}.created'.format(name)
 
     if action not in ALLOWED_ACTIONS:
         return
diff --git a/tests/sentry/tasks/test_servicehooks.py b/tests/sentry/tasks/test_servicehooks.py
index 6415aa8379..737afac676 100644
--- a/tests/sentry/tasks/test_servicehooks.py
+++ b/tests/sentry/tasks/test_servicehooks.py
@@ -7,7 +7,9 @@ from mock import patch
 
 from sentry.models import Group
 from sentry.testutils import TestCase
-from sentry.tasks.servicehooks import get_payload_v0, process_service_hook
+from sentry.tasks.servicehooks import (
+    get_payload_v0, process_service_hook, process_resource_change
+)
 from sentry.testutils.helpers.faux import faux
 from sentry.utils import json
 
@@ -101,4 +103,9 @@ class TestServiceHooks(TestCase):
         group.update(last_seen=datetime.now())
 
         # Only called once for the create, not also for the update.
-        delay.assert_called_once_with(Group, group.id)
+        delay.assert_called_once_with(sender='Group', instance_id=group.id)
+
+    @patch('sentry.tasks.servicehooks.safe_urlopen')
+    def test_handles_previous_method_signature(self, safe_urlopen):
+        group = self.create_group(project=self.project)
+        process_resource_change(Group, group.id, True)  # Doesn't raise
