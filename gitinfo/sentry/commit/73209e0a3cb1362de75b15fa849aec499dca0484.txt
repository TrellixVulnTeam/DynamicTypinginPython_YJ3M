commit 73209e0a3cb1362de75b15fa849aec499dca0484
Author: Stephen Cefali <scefali@sentry.io>
Date:   Mon May 18 10:29:36 2020 -0700

    fix(integrations): jira 2 way sync by using Jira email API (#18709)

diff --git a/src/sentry/integrations/jira/client.py b/src/sentry/integrations/jira/client.py
index 8a0da86b80..12d8fca4fd 100644
--- a/src/sentry/integrations/jira/client.py
+++ b/src/sentry/integrations/jira/client.py
@@ -66,6 +66,7 @@ class JiraCloud(object):
 
 
 class JiraApiClient(ApiClient):
+    # TODO: Update to v3 endpoints
     COMMENTS_URL = "/rest/api/2/issue/%s/comment"
     COMMENT_URL = "/rest/api/2/issue/%s/comment/%s"
     STATUS_URL = "/rest/api/2/status"
@@ -80,6 +81,7 @@ class JiraApiClient(ApiClient):
     SERVER_INFO_URL = "/rest/api/2/serverInfo"
     ASSIGN_URL = "/rest/api/2/issue/%s/assignee"
     TRANSITION_URL = "/rest/api/2/issue/%s/transitions"
+    EMAIL_URL = "/rest/api/3/user/email"
 
     integration_name = "jira"
 
@@ -215,3 +217,7 @@ class JiraApiClient(ApiClient):
     def assign_issue(self, key, name_or_account_id):
         user_id_field = self.user_id_field()
         return self.put(self.ASSIGN_URL % key, data={user_id_field: name_or_account_id})
+
+    def get_email(self, account_id):
+        user = self.get_cached(self.EMAIL_URL, params={"accountId": account_id})
+        return user.get("email")
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index 5c86fea58a..f284095c15 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -4,6 +4,7 @@ import logging
 import six
 from operator import attrgetter
 
+from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.utils.translation import ugettext as _
 
@@ -24,6 +25,7 @@ from sentry.shared_integrations.exceptions import (
 from sentry.integrations.issues import IssueSyncMixin
 from sentry.models import IntegrationExternalProject, Organization, OrganizationIntegration, User
 from sentry.utils.http import absolute_uri
+from sentry.utils.decorators import classproperty
 
 from .client import JiraApiClient, JiraCloud
 
@@ -101,6 +103,10 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
     outbound_assignee_key = "sync_forward_assignment"
     inbound_assignee_key = "sync_reverse_assignment"
 
+    @classproperty
+    def use_email_scope(cls):
+        return settings.JIRA_USE_EMAIL_SCOPE
+
     def get_organization_config(self):
         configuration = [
             {
@@ -716,20 +722,20 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
         if assign:
             for ue in user.emails.filter(is_verified=True):
                 try:
-                    res = client.search_users_for_issue(external_issue.key, ue.email)
+                    possible_users = client.search_users_for_issue(external_issue.key, ue.email)
                 except (ApiUnauthorized, ApiError):
                     continue
-                try:
-                    jira_user = [
-                        r
-                        for r in res
-                        if r.get("emailAddress") and r["emailAddress"].lower() == ue.email.lower()
-                    ][0]
-                except IndexError:
-                    pass
-                else:
-                    break
-
+                for possible_user in possible_users:
+                    email = possible_user.get("emailAddress")
+                    # pull email from API if we can use it
+                    if email is None and self.use_email_scope:
+                        account_id = possible_user.get("accountId")
+                        email = client.get_email(account_id)
+                    # match on lowercase email
+                    # TODO(steve): add check against display name when JIRA_USE_EMAIL_SCOPE is false
+                    if email and email.lower() == ue.email.lower():
+                        jira_user = possible_user
+                        break
             if jira_user is None:
                 # TODO(jess): do we want to email people about these types of failures?
                 logger.info(
diff --git a/src/sentry/integrations/jira/webhooks.py b/src/sentry/integrations/jira/webhooks.py
index ac3e8dfb8a..373a0b4dfd 100644
--- a/src/sentry/integrations/jira/webhooks.py
+++ b/src/sentry/integrations/jira/webhooks.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 import logging
 
+from django.conf import settings
 from django.views.decorators.csrf import csrf_exempt
 
 from sentry.api.base import Endpoint
@@ -10,11 +11,12 @@ from sentry.integrations.atlassian_connect import (
     get_integration_from_jwt,
 )
 from sentry.models import sync_group_assignee_inbound
+from .client import JiraApiClient, JiraCloud
 
 logger = logging.getLogger("sentry.integrations.jira.webhooks")
 
 
-def handle_assignee_change(integration, data):
+def handle_assignee_change(integration, data, use_email_scope=False):
     assignee_changed = any(
         item for item in data["changelog"]["items"] if item["field"] == "assignee"
     )
@@ -30,15 +32,26 @@ def handle_assignee_change(integration, data):
     if assignee is None:
         sync_group_assignee_inbound(integration, None, issue_key, assign=False)
         return
+    email = assignee.get("emailAddress")
+    # pull email from API if we can use it
+    if email is None and use_email_scope:
+        account_id = assignee.get("accountId")
+        client = JiraApiClient(
+            integration.metadata["base_url"],
+            JiraCloud(integration.metadata["shared_secret"]),
+            verify_ssl=True,
+        )
+        email = client.get_email(account_id)
 
-    if not assignee.get("emailAddress"):
+    # TODO(steve) check display name
+    if email is None:
         logger.info(
             "missing-assignee-email",
             extra={"issue_key": issue_key, "integration_id": integration.id},
         )
         return
 
-    sync_group_assignee_inbound(integration, assignee["emailAddress"], issue_key, assign=True)
+    sync_group_assignee_inbound(integration, email, issue_key, assign=True)
 
 
 def handle_status_change(integration, data):
@@ -92,7 +105,7 @@ class JiraIssueUpdatedWebhook(Endpoint):
             logger.info("missing-changelog", extra={"integration_id": integration.id})
             return self.respond()
 
-        handle_assignee_change(integration, data)
+        handle_assignee_change(integration, data, use_email_scope=settings.JIRA_USE_EMAIL_SCOPE)
         handle_status_change(integration, data)
 
         return self.respond()
diff --git a/src/sentry/integrations/jira_server/integration.py b/src/sentry/integrations/jira_server/integration.py
index f31bf7d7e9..edede3183c 100644
--- a/src/sentry/integrations/jira_server/integration.py
+++ b/src/sentry/integrations/jira_server/integration.py
@@ -22,6 +22,7 @@ from sentry.shared_integrations.exceptions import IntegrationError, ApiError
 from sentry.integrations.jira import JiraIntegration
 from sentry.pipeline import PipelineView
 from sentry.utils.hashlib import sha1_text
+from sentry.utils.decorators import classproperty
 from sentry.web.helpers import render_to_response
 from .client import JiraServer, JiraServerSetupClient, JiraServerClient
 
@@ -220,6 +221,11 @@ class JiraServerIntegration(JiraIntegration):
 
     default_identity = None
 
+    @classproperty
+    def use_email_scope(cls):
+        # jira server doesn't need the email scope since it's not restricted by GDPR
+        return False
+
     def get_client(self):
         if self.default_identity is None:
             self.default_identity = self.get_default_identity()
diff --git a/tests/sentry/integrations/jira/test_integration.py b/tests/sentry/integrations/jira/test_integration.py
index db9523de7d..5cf7f265a3 100644
--- a/tests/sentry/integrations/jira/test_integration.py
+++ b/tests/sentry/integrations/jira/test_integration.py
@@ -7,6 +7,7 @@ import six
 import pytest
 import copy
 
+from django.test.utils import override_settings
 from django.core.urlresolvers import reverse
 from exam import fixture
 from sentry.utils.compat.mock import Mock
@@ -863,6 +864,41 @@ class JiraIntegrationTest(APITestCase):
         # No sync made as jira users don't have email addresses
         assert len(responses.calls) == 1
 
+    @override_settings(JIRA_USE_EMAIL_SCOPE=True)
+    @responses.activate
+    def test_sync_assignee_outbound_use_email_api(self):
+        self.user = self.create_user(email="bob@example.com")
+        issue_id = "APP-123"
+        installation = self.integration.get_installation(self.organization.id)
+        assign_issue_url = "https://example.atlassian.net/rest/api/2/issue/%s/assignee" % issue_id
+        external_issue = ExternalIssue.objects.create(
+            organization_id=self.organization.id, integration_id=installation.model.id, key=issue_id
+        )
+        responses.add(
+            responses.GET,
+            "https://example.atlassian.net/rest/api/2/user/assignable/search",
+            json=[{"accountId": "deadbeef123", "displayName": "Dead Beef"}],
+            match_querystring=False,
+        )
+
+        responses.add(
+            responses.GET,
+            "https://example.atlassian.net/rest/api/3/user/email",
+            json={"accountId": "deadbeef123", "email": "bob@example.com"},
+            match_querystring=False,
+        )
+        responses.add(responses.PUT, assign_issue_url, json={}, match_querystring=False)
+
+        installation.sync_assignee_outbound(external_issue, self.user)
+
+        # extra call to get email address
+        assert len(responses.calls) == 3
+
+        assign_issue_response = responses.calls[2][1]
+        assert assign_issue_url in assign_issue_response.url
+        assert assign_issue_response.status_code == 200
+        assert assign_issue_response.request.body == '{"accountId": "deadbeef123"}'
+
     def test_update_organization_config(self):
         org = self.organization
         self.login_as(self.user)
diff --git a/tests/sentry/integrations/jira/test_webhooks.py b/tests/sentry/integrations/jira/test_webhooks.py
index e1e445f46f..230da34bd1 100644
--- a/tests/sentry/integrations/jira/test_webhooks.py
+++ b/tests/sentry/integrations/jira/test_webhooks.py
@@ -1,9 +1,11 @@
 from __future__ import absolute_import
 
 import json
+import responses
 
 from sentry.utils.compat.mock import patch
 
+from django.test.utils import override_settings
 from django.core.urlresolvers import reverse
 
 from sentry.integrations.issues import IssueSyncMixin
@@ -70,7 +72,8 @@ SAMPLE_EDIT_ISSUE_PAYLOAD_ASSIGNEE = """
     "issue": {
         "fields": {
             "assignee": {
-                "emailAddress": "jess@sentry.io"
+                "emailAddress": "jess@sentry.io",
+                "accountId": "deadbeef123"
             }
         },
         "key": "APP-123"
@@ -130,6 +133,43 @@ class JiraWebhooksTest(APITestCase):
                 integration, "jess@sentry.io", "APP-123", assign=True
             )
 
+    @override_settings(JIRA_USE_EMAIL_SCOPE=True)
+    @patch("sentry.integrations.jira.webhooks.sync_group_assignee_inbound")
+    @responses.activate
+    def test_assign_use_email_api(self, mock_sync_group_assignee_inbound):
+        org = self.organization
+
+        integration = Integration.objects.create(
+            provider="jira",
+            name="Example Jira",
+            metadata={
+                "oauth_client_id": "oauth-client-id",
+                "shared_secret": "a-super-secret-key-from-atlassian",
+                "base_url": "https://example.atlassian.net",
+                "domain_name": "example.atlassian.net",
+            },
+        )
+        integration.add_organization(org, self.user)
+
+        path = reverse("sentry-extensions-jira-issue-updated")
+
+        responses.add(
+            responses.GET,
+            "https://example.atlassian.net/rest/api/3/user/email",
+            json={"accountId": "deadbeef123", "email": self.user.email},
+            match_querystring=False,
+        )
+
+        with patch(
+            "sentry.integrations.jira.webhooks.get_integration_from_jwt", return_value=integration
+        ):
+            data = json.loads(SAMPLE_EDIT_ISSUE_PAYLOAD_ASSIGNEE.strip())
+            data["issue"]["fields"]["assignee"].pop("emailAddress")
+            resp = self.client.post(path, data=data, HTTP_AUTHORIZATION="JWT anexampletoken")
+            assert resp.status_code == 200
+            assert mock_sync_group_assignee_inbound.called
+            assert len(responses.calls) == 1
+
     @patch("sentry.integrations.jira.webhooks.sync_group_assignee_inbound")
     def test_assign_missing_email(self, mock_sync_group_assignee_inbound):
         org = self.organization
diff --git a/tests/sentry/integrations/jira_server/test_integration.py b/tests/sentry/integrations/jira_server/test_integration.py
index 283764112b..cf39a4ca64 100644
--- a/tests/sentry/integrations/jira_server/test_integration.py
+++ b/tests/sentry/integrations/jira_server/test_integration.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import jwt
 import responses
+from django.test.utils import override_settings
 
 from requests.exceptions import ReadTimeout
 from sentry.integrations.jira_server import JiraServerIntegrationProvider
@@ -428,3 +429,7 @@ class JiraServerIntegrationTest(IntegrationTestCase):
         self.assertContains(resp, "Could not create issue webhook")
 
         assert Integration.objects.count() == 0
+
+    @override_settings(JIRA_USE_EMAIL_SCOPE=True)
+    def test_email_scope(self):
+        assert not self.provider.integration_cls.use_email_scope
