commit 58ef6014df3bbefba4f4cd645ad0d7faa8f1ab8f
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 10 15:53:55 2015 -0500

    Remove use of Organization.owner

diff --git a/bin/load-mocks b/bin/load-mocks
index 6a266f73f9..2adf448ced 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -15,7 +15,8 @@ from random import randint
 from sentry.app import tsdb, buffer
 from sentry.models import (
     Activity, File, GroupMeta, Organization, OrganizationAccessRequest,
-    OrganizationMember, Project, Release, ReleaseFile, Team, User, UserReport
+    OrganizationMember, OrganizationMemberType, Project, Release, ReleaseFile,
+    Team, User, UserReport
 )
 from sentry.utils.samples import create_sample_event
 
@@ -129,11 +130,17 @@ def main(num_events=1):
         print('Mocking org {}'.format('Default'))
         org, _ = Organization.objects.get_or_create(
             name='Default',
-            defaults={
-                'owner': user,
-            },
         )
 
+    OrganizationMember.objects.get_or_create(
+        user=user,
+        organization=org,
+        defaults={
+            'type': OrganizationMemberType.OWNER,
+            'has_global_access': True,
+        }
+    )
+
     dummy_member, _ = OrganizationMember.objects.get_or_create(
         user=dummy_user,
         organization=org,
diff --git a/docs/faq.rst b/docs/faq.rst
index 7e2d5425c2..9ad9b9d1d6 100644
--- a/docs/faq.rst
+++ b/docs/faq.rst
@@ -50,7 +50,10 @@ and users?
         configure()
 
         # Do something crazy
-        from sentry.models import Team, Project, ProjectKey, User, Organization
+        from sentry.models import (
+            Team, Project, ProjectKey, User, Organization, OrganizationMember,
+            OrganizationmemberType
+        )
 
         user = User()
         user.username = 'admin'
@@ -61,9 +64,15 @@ and users?
 
         organization = Organization()
         organization.name = 'MyOrg'
-        organization.owner = user
         organization.save()
 
+        OrganizationMember.objects.create(
+            organization=organization,
+            user=user,
+            type=OrganizationMemberType.OWNER,
+            has_global_access=True,
+        )
+
         team = Team()
         team.name = 'Sentry'
         team.organization = organization
diff --git a/src/sentry/admin.py b/src/sentry/admin.py
index fe41abba32..46701ccaa0 100644
--- a/src/sentry/admin.py
+++ b/src/sentry/admin.py
@@ -58,11 +58,10 @@ class OrganizationMemberInline(admin.TabularInline):
 
 
 class OrganizationAdmin(admin.ModelAdmin):
-    list_display = ('name', 'slug', 'owner', 'status')
+    list_display = ('name', 'slug', 'status')
     list_filter = ('status',)
-    search_fields = ('name', 'owner__username', 'owner__email', 'slug')
-    raw_id_fields = ('owner',)
-    fields = ('name', 'slug', 'owner', 'status')
+    search_fields = ('name', 'slug')
+    fields = ('name', 'slug', 'status')
     inlines = (OrganizationMemberInline, OrganizationTeamInline)
 
 admin.site.register(Organization, OrganizationAdmin)
diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
index bab807a56d..153cc47ab7 100644
--- a/src/sentry/api/endpoints/organization_index.py
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -6,7 +6,9 @@ from rest_framework.response import Response
 from sentry.api.base import DocSection, Endpoint
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.serializers import serialize
-from sentry.models import AuditLogEntryEvent, Organization
+from sentry.models import (
+    AuditLogEntryEvent, Organization, OrganizationMember, OrganizationMemberType
+)
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 
@@ -78,7 +80,13 @@ class OrganizationIndexEndpoint(Endpoint):
             org = Organization.objects.create(
                 name=result['name'],
                 slug=result.get('slug'),
-                owner=request.user,
+            )
+
+            OrganizationMember.objects.create(
+                user=request.user,
+                organization=org,
+                type=OrganizationMemberType.OWNER,
+                has_global_access=True,
             )
 
             self.create_audit_entry(
diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index fe4fec5fd2..21c7bd394a 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -127,16 +127,6 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
 
         audit_data = om.get_audit_log_data()
 
-        if om.user_id == organization.owner_id:
-            # TODO(dcramer): while we still maintain an owner field on
-            # organization we need to ensure it transfers
-            organization.owner = OrganizationMember.objects.filter(
-                organization=om.organization,
-                type=OrganizationMemberType.OWNER,
-                user__isnull=False,
-            ).exclude(id=om.id)[0].user
-            organization.save()
-
         # TODO(dcramer): we should probably clean up AuthIdentity here
         om.delete()
 
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index 205e6a0b01..075892eb81 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -88,12 +88,10 @@ class User(BaseModel, AbstractBaseUser):
     def merge_to(from_user, to_user):
         # TODO: we could discover relations automatically and make this useful
         from sentry.models import (
-            AuditLogEntry, Activity, AuthIdentity, GroupBookmark, Organization,
+            AuditLogEntry, Activity, AuthIdentity, GroupBookmark,
             OrganizationMember, UserOption
         )
 
-        for obj in Organization.objects.filter(owner=from_user):
-            obj.update(owner=to_user)
         for obj in OrganizationMember.objects.filter(user=from_user):
             with transaction.atomic():
                 try:
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
index 4d8d540ba2..6eaae122e9 100644
--- a/src/sentry/receivers/core.py
+++ b/src/sentry/receivers/core.py
@@ -11,8 +11,8 @@ from pkg_resources import parse_version as Version
 
 from sentry import options
 from sentry.models import (
-    Organization, Project, User, Team, ProjectKey,
-    TagKey, TagValue, GroupTagValue, GroupTagKey, Activity
+    Organization, OrganizationMember, OrganizationMemberType, Project, User,
+    Team, ProjectKey, TagKey, TagValue, GroupTagValue, GroupTagKey, Activity
 )
 from sentry.signals import buffer_incr_complete, regression_signal
 from sentry.utils import db
@@ -72,11 +72,19 @@ def create_default_project(id, name, slug, verbosity=2, **kwargs):
     org, _ = Organization.objects.get_or_create(
         slug='sentry',
         defaults={
-            'owner': user,
             'name': 'Sentry',
         }
     )
 
+    OrganizationMember.objects.get_or_create(
+        user=user,
+        organization=org,
+        defaults={
+            'type': OrganizationMemberType.OWNER,
+            'has_global_access': True,
+        },
+    )
+
     team, _ = Team.objects.get_or_create(
         organization=org,
         slug='sentry',
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 37ad142ab1..33ec15a238 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -84,7 +84,7 @@ class Fixtures(object):
 
         kwargs.setdefault('name', uuid4().hex)
 
-        org = Organization.objects.create(owner=owner, **kwargs)
+        org = Organization.objects.create(**kwargs)
         self.create_member(
             organization=org,
             user=owner,
diff --git a/src/sentry/utils/apidocs.py b/src/sentry/utils/apidocs.py
index 4e4ec44149..941287cc8c 100644
--- a/src/sentry/utils/apidocs.py
+++ b/src/sentry/utils/apidocs.py
@@ -254,12 +254,9 @@ class MockUtils(object):
         from sentry.models import Organization, OrganizationMember
         org, _ = Organization.objects.get_or_create(
             name=name,
-            defaults={
-                'owner': owner,
-            },
         )
 
-        dummy_member, _ = OrganizationMember.objects.get_or_create(
+        dummy_member, _ = OrganizationMember.objects.create(
             user=owner,
             organization=org,
             defaults={
diff --git a/src/sentry/web/frontend/create_organization.py b/src/sentry/web/frontend/create_organization.py
index aaca95c846..356a248619 100644
--- a/src/sentry/web/frontend/create_organization.py
+++ b/src/sentry/web/frontend/create_organization.py
@@ -32,9 +32,7 @@ class CreateOrganizationView(BaseView):
     def handle(self, request):
         form = self.get_form(request)
         if form.is_valid():
-            org = form.save(commit=False)
-            org.owner = request.user
-            org.save()
+            org = form.save()
 
             OrganizationMember.objects.create(
                 organization=org,
