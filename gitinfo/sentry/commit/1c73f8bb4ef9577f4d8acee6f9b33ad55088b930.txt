commit 1c73f8bb4ef9577f4d8acee6f9b33ad55088b930
Author: David Cramer <dcramer@gmail.com>
Date:   Sat May 7 16:25:36 2011 -0700

    Moved all Sentry CLI operations into new Sentry namespace. You can now launch a standalone Sentry webserver using 'sentry start'

diff --git a/.gitignore b/.gitignore
index beb9c087fb..c74af15414 100644
--- a/.gitignore
+++ b/.gitignore
@@ -10,4 +10,5 @@ pip-log.txt
 /docs/doctrees
 sentry/sentry_index/
 *.egg
-sentry_index/
\ No newline at end of file
+sentry_index/
+*.db
\ No newline at end of file
diff --git a/sentry/client/base.py b/sentry/client/base.py
index 32a5c59731..8acd426694 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -16,7 +16,7 @@ from django.views.debug import ExceptionReporter
 
 import sentry
 from sentry import conf
-from sentry.helpers import construct_checksum, varmap, transform, get_installed_apps, force_unicode, \
+from sentry.utils import construct_checksum, varmap, transform, get_installed_apps, force_unicode, \
                            get_versions, shorten, get_signature, get_auth_header
 
 logger = logging.getLogger('sentry.errors')
@@ -24,7 +24,7 @@ logger = logging.getLogger('sentry.errors')
 class SentryClient(object):
     def process(self, **kwargs):
         "Processes the message before passing it on to the server"
-        from sentry.helpers import get_filters
+        from sentry.utils import get_filters
 
         if kwargs.get('data'):
             # Ensure we're not changing the original data which was passed
diff --git a/sentry/filters/__init__.py b/sentry/filters.py
similarity index 100%
rename from sentry/filters/__init__.py
rename to sentry/filters.py
diff --git a/sentry/management/commands/cleanup_sentry.py b/sentry/management/commands/cleanup_sentry.py
deleted file mode 100644
index 31383b3511..0000000000
--- a/sentry/management/commands/cleanup_sentry.py
+++ /dev/null
@@ -1,28 +0,0 @@
-from django.core.management.base import BaseCommand
-
-from sentry.models import Message, GroupedMessage
-
-from optparse import make_option
-
-import datetime
-
-class Command(BaseCommand):
-    option_list = BaseCommand.option_list + (
-        make_option('--days', action='store', dest='days'),
-        make_option('--logger', action='store', dest='logger')
-    )
-    
-    help = 'Cleans up old entries in the log.'
-
-    def handle(self, *args, **options):
-        days = 30
-        if options.get('days'): # options always contain the days key
-            days = int(options['days'])
-        ts = datetime.datetime.now() - datetime.timedelta(days=days)
-        
-        base_kwargs = {}
-        if options.get('logger'):
-            base_kwargs['logger'] = options['logger']
-        
-        GroupedMessage.objects.filter(last_seen__lte=ts, **base_kwargs).delete()
-        Message.objects.filter(datetime__lte=ts, **base_kwargs).delete()
diff --git a/sentry/models.py b/sentry/models.py
index 9098c44675..219e6db1dd 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -17,9 +17,9 @@ from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
 from sentry import conf
-from sentry.helpers import cached_property, construct_checksum, transform, get_filters
-from sentry.manager import GroupedMessageManager, SentryManager
-from sentry.reporter import FakeRequest
+from sentry.utils import cached_property, construct_checksum, transform, get_filters, \
+                         MockDjangoRequest
+from sentry.utils.manager import GroupedMessageManager, SentryManager
 
 from indexer.models import BaseIndex
 
@@ -248,13 +248,14 @@ class Message(MessageBase):
 
     @cached_property
     def request(self):
-        fake_request = FakeRequest()
-        fake_request.META = self.data.get('META') or {}
-        fake_request.GET = self.data.get('GET') or {}
-        fake_request.POST = self.data.get('POST') or {}
-        fake_request.FILES = self.data.get('FILES') or {}
-        fake_request.COOKIES = self.data.get('COOKIES') or {}
-        fake_request.url = self.url
+        fake_request = MockDjangoRequest(
+            META = self.data.get('META') or {},
+            GET = self.data.get('GET') or {},
+            POST = self.data.get('POST') or {},
+            FILES = self.data.get('FILES') or {},
+            COOKIES = self.data.get('COOKIES') or {},
+            url = self.url,
+        )
         if self.url:
             fake_request.path_info = '/' + self.url.split('/', 3)[-1]
         else:
diff --git a/sentry/routers.py b/sentry/routers.py
index e4dc051e2b..873ae4cd45 100644
--- a/sentry/routers.py
+++ b/sentry/routers.py
@@ -1,16 +1,5 @@
-from sentry import conf
+import warnings
 
-class SentryRouter(object):
-    def db_for_write(self, model, **hints):
-        if model._meta.app_label == 'sentry':
-            return conf.DATABASE_USING
+warnings.warn("The use of 'sentry.routers' is deprecated. Please use 'sentry.utils.router' instead.", DeprecationWarning)
 
-    def db_for_read(self, model, **hints):
-        return self.db_for_write(model, **hints)
-
-    def allow_syncdb(self, db, model):
-        sentry_db = conf.DATABASE_USING
-        if not sentry_db:
-            return None
-        if model._meta.app_label == 'sentry' and db != sentry_db:
-            return False
\ No newline at end of file
+from sentry.utils.router import *
diff --git a/sentry/scripts/runner.py b/sentry/scripts/runner.py
index 6e2fc15527..7051e89b72 100644
--- a/sentry/scripts/runner.py
+++ b/sentry/scripts/runner.py
@@ -1,8 +1,48 @@
 #!/usr/bin/env python
+import eventlet
+import os
+import sys
+
+from daemon.daemon import DaemonContext
+from daemon.runner import DaemonRunner, make_pidlockfile
+from django.conf import settings
+from django.core.management import call_command
+from eventlet import wsgi
 from optparse import OptionParser
 from sentry import VERSION
+from sentry.wsgi import application
 
-import sys
+class SentryServer(DaemonRunner):
+    pidfile_timeout = 10
+    start_message = u"started with pid %(pid)d"
+
+    def __init__(self, host='localhost', port=9000, pidfile='/var/run/sentry.pid',
+                 logfile='/var/log/sentry/sentry.log'):
+
+        self.daemon_context = DaemonContext()
+        self.daemon_context.stdout = open(logfile, 'w+')
+        self.daemon_context.stderr = open(logfile, 'w+', buffering=0)
+
+        self.pidfile = None
+        if pidfile is not None:
+            self.pidfile = make_pidlockfile(
+                pidfile, self.pidfile_timeout)
+
+        self.daemon_context.pidfile = self.pidfile
+
+        self.host = host
+        self.port = port
+
+        # HACK: set app to self so self.app.run() works
+        self.app = self
+
+    def execute(self, action):
+        self.action = action
+        self.do_action()
+
+    def run(self):
+        upgrade()
+        wsgi.server(eventlet.listen((self.host, self.port)), application)
 
 def cleanup(days=30, logger=None, site=None, server=None):
     from sentry.models import GroupedMessage, Message
@@ -27,21 +67,36 @@ def cleanup(days=30, logger=None, site=None, server=None):
         qs.filter(logger=logger)
     qs.delete()
 
+def upgrade():
+    from sentry import conf
+    
+    call_command('syncdb', database=conf.DATABASE_USING or 'default', interactive=False)
+
+    if 'south' in settings.INSTALLED_APPS:
+        call_command('migrate', database=conf.DATABASE_USING or 'default', interactive=False)
+
 def main():
+    command_list = ('start', 'stop', 'cleanup', 'upgrade')
     args = sys.argv
-    if len(args) < 2 or args[1] not in ('start', 'stop', 'cleanup'):
+    if len(args) < 2 or args[1] not in command_list:
         print "usage: sentry [command] [options]"
         print
         print "Available subcommands:"
-        print "  start"
-        print "  stop"
-        print "  cleanup"
+        for cmd in command_list:
+            print "  ", cmd
         sys.exit(1)
 
     parser = OptionParser(version="%%prog %s" % VERSION)
-    parser.add_option('--config', default='/etc/sentry.conf', metavar='CONFIG')
+    parser.add_option('--config', metavar='CONFIG')
     if args[1] == 'start':
-        parser.add_option('--host', default='0.0.0.0:8000', metavar='HOST')
+        parser.add_option('--host', default='localhost', metavar='HOSTNAME')
+        parser.add_option('--port', type=int, default=9000, metavar='PORT')
+        parser.add_option('--daemon', action='store_true', default=False, dest='daemonize')
+        parser.add_option('--pidfile', default='/var/run/sentry.pid', dest='pidfile')
+        parser.add_option('--logfile', default='/var/log/sentry.log', dest='logfile')
+    elif args[1] == 'stop':
+        parser.add_option('--pidfile', default='/var/run/sentry.pid', dest='pidfile')
+        parser.add_option('--logfile', default='/var/log/sentry.log', dest='logfile')
     elif args[1] == 'cleanup':
         parser.add_option('--days', default='30',
                           help='Numbers of days to truncate on.')
@@ -53,10 +108,32 @@ def main():
                           help='Limit truncation to only entries from server.')
 
     (options, args) = parser.parse_args()
-    if args[0] == "start":
-        pass
-    elif args[0] == "stop":
-        pass
+
+    if options.config:
+        os.environ['DJANGO_SETTINGS_MODULE'] = options.config
+
+    if not settings.configured:
+        os.environ['DJANGO_SETTINGS_MODULE'] = 'sentry.utils.conf.default_settings'
+
+    if args[0] == 'upgrade':
+        upgrade()
+
+    elif args[0] == 'start':
+        if not options.pidfile:
+            sys.exit('You must specify --pidfile')
+
+        app = SentryServer(host=options.host, port=options.port,
+                             pidfile=options.pidfile, logfile=options.logfile)
+        app.execute(args[0])
+
+  
+    elif args[0] in ('stop', 'restart'):
+        if not options.pidfile:
+            sys.exit('You must specify --pidfile')
+
+        app = SentryServer(pidfile=options.pidfile, logfile=options.logfile)
+        app.execute(args[0])
+
     elif args[0] == 'cleanup':
         cleanup(days=options.days, logger=options.logger, site=options.site, server=options.server)
 
diff --git a/sentry/search_indexes.py b/sentry/search_indexes.py
index 6df58a3d86..cbc89e0e3a 100644
--- a/sentry/search_indexes.py
+++ b/sentry/search_indexes.py
@@ -3,7 +3,7 @@ from haystack.indexes import *
 from haystack.sites import SearchSite
 
 from sentry import conf
-from sentry.helpers import to_unicode
+from sentry.utils import to_unicode
 from sentry.models import GroupedMessage
 
 if conf.SEARCH_ENGINE:
diff --git a/sentry/templatetags/sentry_helpers.py b/sentry/templatetags/sentry_helpers.py
index 20a59fdba1..a693895424 100644
--- a/sentry/templatetags/sentry_helpers.py
+++ b/sentry/templatetags/sentry_helpers.py
@@ -8,7 +8,7 @@ from django.template import RequestContext
 from django.template.defaultfilters import stringfilter
 from django.template.loader import render_to_string
 from paging.helpers import paginate as paginate_func
-from sentry.helpers import get_db_engine
+from sentry.utils import get_db_engine
 from sentry.plugins import GroupActionProvider
 from templatetag_sugar.register import tag
 from templatetag_sugar.parser import Name, Variable, Constant, Optional
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 2a13fa5e55..e0c0708df4 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -28,7 +28,7 @@ from django.utils import simplejson
 from django.utils.encoding import smart_unicode
 
 from sentry import conf
-from sentry.helpers import transform, get_signature, get_auth_header
+from sentry.utils import transform, get_signature, get_auth_header
 from sentry.models import Message, GroupedMessage
 from sentry.client.base import SentryClient
 from sentry.client.handlers import SentryHandler
@@ -683,10 +683,11 @@ class SentryTestCase(TestCase):
         settings.MIDDLEWARE_CLASSES = existing
 
     def testExtraStorage(self):
-        from sentry.reporter import FakeRequest
+        from sentry.utils import MockDjangoRequest
         
-        request = FakeRequest()
-        request.META['foo'] = 'bar'
+        request = MockDjangoRequest(
+            META = {'foo': 'bar'},
+        )
         
         logger = logging.getLogger()
 
@@ -711,10 +712,11 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.data['baz'], 'bar')
 
     def testRawPostData(self):
-        from sentry.reporter import FakeRequest
+        from sentry.utils import MockDjangoRequest
         
-        request = FakeRequest()
-        request.raw_post_data = '{"json": "string"}'
+        request = MockDjangoRequest(
+            raw_post_data = '{"json": "string"}',
+        )
         
         logger = logging.getLogger()
 
@@ -1107,7 +1109,7 @@ class SentryMailTest(TestCase):
 
 class SentryHelpersTest(TestCase):
     def test_get_db_engine(self):
-        from sentry.helpers import get_db_engine
+        from sentry.utils import get_db_engine
         _databases = getattr(settings, 'DATABASES', {}).copy()
         _engine = settings.DATABASE_ENGINE
         
@@ -1128,7 +1130,7 @@ class SentryHelpersTest(TestCase):
         settings.DATABASE_ENGINE = _engine
 
     def test_transform_handles_gettext_lazy(self):
-        from sentry.helpers import transform
+        from sentry.utils import transform
         from django.utils.functional import lazy
 
         def fake_gettext(to_translate):
@@ -1141,7 +1143,7 @@ class SentryHelpersTest(TestCase):
 
     def test_get_versions(self):
         import sentry
-        from sentry.helpers import get_versions
+        from sentry.utils import get_versions
         versions = get_versions(['sentry'])
         self.assertEquals(versions.get('sentry'), sentry.VERSION)
         versions = get_versions(['sentry.client'])
@@ -1229,16 +1231,15 @@ class SentryClientTest(TestCase):
     # 
     #     conf.CLIENT = 'sentry.client.base.SentryClient'
 
-class SentryManageTest(TestCase):
+class SentryCommandTest(TestCase):
     fixtures = ['sentry/tests/fixtures/cleanup.json']
     
-    def test_cleanup_sentry(self):
-        from sentry.management.commands.cleanup_sentry import Command
+    def test_cleanup(self):
+        from sentry.scripts.runner import cleanup
         
         self.assertEquals(Message.objects.count(), 10)
         
-        command = Command()
-        command.handle(days=1)
+        cleanup(days=1)
         
         self.assertEquals(Message.objects.count(), 0)
 
diff --git a/sentry/urls.py b/sentry/urls.py
index c219e37667..ba7e4d0ce2 100644
--- a/sentry/urls.py
+++ b/sentry/urls.py
@@ -1,38 +1,5 @@
-import os
-import re
+import warnings
 
-from django.conf.urls.defaults import *
+warnings.warn("The use of 'sentry.urls' is deprecated. Please use 'sentry.web.urls' instead.", DeprecationWarning)
 
-from sentry.conf import KEY
-from sentry import views
-from sentry.feeds import MessageFeed, SummaryFeed
-
-SENTRY_ROOT = os.path.dirname(__file__) 
-
-urlpatterns = patterns('',
-    # This path is also reflected in conf.STATIC_URL_PREFIX
-    url(r'^_static/(?P<path>.*)$', views.static_media, name='sentry-media'),
-
-    # Feeds
-
-    url(r'^feeds/%s/messages.xml$' % re.escape(KEY), MessageFeed(), name='sentry-feed-messages'),
-    url(r'^feeds/%s/summaries.xml$' % re.escape(KEY), SummaryFeed(), name='sentry-feed-summaries'),
-
-    # JS and API
-
-    url(r'^jsapi/$', views.ajax_handler, name='sentry-ajax'),
-    url(r'^store/$', views.store, name='sentry-store'),
-    
-    # Normal views
-
-    url(r'^login$', views.login, name='sentry-login'),
-    url(r'^logout$', views.logout, name='sentry-logout'),
-    url(r'^group/(\d+)$', views.group, name='sentry-group'),
-    url(r'^group/(\d+)/messages$', views.group_message_list, name='sentry-group-messages'),
-    url(r'^group/(\d+)/messages/(\d+)$', views.group_message_details, name='sentry-group-message'),
-    url(r'^group/(\d+)/actions/([\w_-]+)', views.group_plugin_action, name='sentry-group-plugin-action'),
-
-    url(r'^search$', views.search, name='sentry-search'),
-
-    url(r'^$', views.index, name='sentry'),
-)
+from sentry.web.urls import *
diff --git a/sentry/helpers.py b/sentry/utils/__init__.py
similarity index 89%
rename from sentry/helpers.py
rename to sentry/utils/__init__.py
index e54e5ffeb5..99bfa6db87 100644
--- a/sentry/helpers.py
+++ b/sentry/utils/__init__.py
@@ -3,6 +3,7 @@ import logging
 import sys
 import uuid
 import warnings
+from pprint import pformat
 from types import ClassType, TypeType
 
 import django
@@ -265,4 +266,40 @@ def configure(**kwargs):
     for k, v in kwargs.iteritems():
         if not hasattr(conf, k):
             warnings.warn('Setting %k which is not defined by Sentry' % k)
-        setattr(conf, k, v)
\ No newline at end of file
+        setattr(conf, k, v)
+
+class MockDjangoRequest(object):
+    GET = {}
+    POST = {}
+    META = {}
+    COOKIES = {}
+    FILES = {}
+    raw_post_data = ''
+    url = ''
+    
+    def __init__(self, **kwargs):
+        self.__dict__.update(kwargs)
+    
+    def __repr__(self):
+        # Since this is called as part of error handling, we need to be very
+        # robust against potentially malformed input.
+        try:
+            get = pformat(self.GET)
+        except:
+            get = '<could not parse>'
+        try:
+            post = pformat(self.POST)
+        except:
+            post = '<could not parse>'
+        try:
+            cookies = pformat(self.COOKIES)
+        except:
+            cookies = '<could not parse>'
+        try:
+            meta = pformat(self.META)
+        except:
+            meta = '<could not parse>'
+        return '<Request\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>' % \
+            (get, post, cookies, meta)
+
+    def build_absolute_uri(self): return self.url
\ No newline at end of file
diff --git a/sentry/management/__init__.py b/sentry/utils/conf/__init__.py
similarity index 100%
rename from sentry/management/__init__.py
rename to sentry/utils/conf/__init__.py
diff --git a/sentry/utils/conf/default_settings.py b/sentry/utils/conf/default_settings.py
new file mode 100644
index 0000000000..0639f48fdd
--- /dev/null
+++ b/sentry/utils/conf/default_settings.py
@@ -0,0 +1,106 @@
+import hashlib
+import os
+import os.path
+import socket
+import sys
+# Django settings for example_project project.
+
+DEBUG = True
+TEMPLATE_DEBUG = True
+
+ADMINS = (
+    # ('Your Name', 'your_email@domain.com'),
+)
+
+INTERNAL_IPS = ('127.0.0.1',)
+
+MANAGERS = ADMINS
+
+PROJECT_ROOT = os.path.join(os.path.dirname(__file__), os.pardir, os.pardir)
+
+sys.path.insert(0, os.path.abspath(os.path.join(PROJECT_ROOT, '..')))
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
+        'NAME': 'sentry.db',                      # Or path to database file if using sqlite3.
+        'USER': '',                      # Not used with sqlite3.
+        'PASSWORD': '',                  # Not used with sqlite3.
+        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
+        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
+    }
+}
+
+# Local time zone for this installation. Choices can be found here:
+# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
+# although not all choices may be available on all operating systems.
+# On Unix systems, a value of None will cause Django to use the same
+# timezone as the operating system.
+# If running in a Windows environment this must be set to the same as your
+# system time zone.
+TIME_ZONE = 'America/Los_Angeles'
+
+# Language code for this installation. All choices can be found here:
+# http://www.i18nguy.com/unicode/language-identifiers.html
+LANGUAGE_CODE = 'en-us'
+
+SITE_ID = 1
+
+# If you set this to False, Django will make some optimizations so as not
+# to load the internationalization machinery.
+USE_I18N = True
+
+# If you set this to False, Django will not format dates, numbers and
+# calendars according to the current locale
+USE_L10N = True
+
+# Make this unique, and don't share it with anybody.
+SECRET_KEY = hashlib.md5(socket.gethostname() + ')*)&8a36)6%74e@-ne5(-!8a(vv#tkv)(eyg&@0=zd^pl!7=y@').hexdigest()
+
+# List of callables that know how to import templates from various sources.
+TEMPLATE_LOADERS = (
+    'django.template.loaders.filesystem.Loader',
+    'django.template.loaders.app_directories.Loader',
+#     'django.template.loaders.eggs.Loader',
+)
+
+MIDDLEWARE_CLASSES = (
+    'django.middleware.common.CommonMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    # 'django.contrib.messages.middleware.MessageMiddleware',
+)
+
+ROOT_URLCONF = 'sentry.web.urls'
+
+TEMPLATE_DIRS = (
+    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
+    # Always use forward slashes, even on Windows.
+    # Don't forget to use absolute paths, not relative paths.
+    os.path.join(PROJECT_ROOT, 'templates'),
+)
+
+INSTALLED_APPS = (
+    'django.contrib.auth',
+    'django.contrib.admin',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.sites',
+    # 'django.contrib.messages',
+    'sentry',
+    'sentry.client',
+    'sentry.plugins.sentry_servers',
+    'sentry.plugins.sentry_sites',
+    'sentry.plugins.sentry_urls',
+    'haystack',
+    'south',
+)
+
+import logging
+logging.basicConfig(level=logging.DEBUG)
+
+# SENTRY_SEARCH_ENGINE = 'whoosh'
+# SENTRY_SEARCH_OPTIONS = {
+#     'path': os.path.join(PROJECT_ROOT, 'sentry_index'),
+# }
diff --git a/sentry/manager.py b/sentry/utils/manager.py
similarity index 98%
rename from sentry/manager.py
rename to sentry/utils/manager.py
index c478677e3d..92741d9683 100644
--- a/sentry/manager.py
+++ b/sentry/utils/manager.py
@@ -7,7 +7,7 @@ from django.db import models
 from django.db.models import signals
 
 from sentry import conf
-from sentry.helpers import construct_checksum, get_db_engine
+from sentry.utils import construct_checksum, get_db_engine
 
 assert not conf.DATABASE_USING or django.VERSION >= (1, 2), 'The `SENTRY_DATABASE_USING` setting requires Django >= 1.2'
 
diff --git a/sentry/utils/router.py b/sentry/utils/router.py
new file mode 100644
index 0000000000..e4dc051e2b
--- /dev/null
+++ b/sentry/utils/router.py
@@ -0,0 +1,16 @@
+from sentry import conf
+
+class SentryRouter(object):
+    def db_for_write(self, model, **hints):
+        if model._meta.app_label == 'sentry':
+            return conf.DATABASE_USING
+
+    def db_for_read(self, model, **hints):
+        return self.db_for_write(model, **hints)
+
+    def allow_syncdb(self, db, model):
+        sentry_db = conf.DATABASE_USING
+        if not sentry_db:
+            return None
+        if model._meta.app_label == 'sentry' and db != sentry_db:
+            return False
\ No newline at end of file
diff --git a/sentry/management/commands/__init__.py b/sentry/web/__init__.py
similarity index 100%
rename from sentry/management/commands/__init__.py
rename to sentry/web/__init__.py
diff --git a/sentry/feeds.py b/sentry/web/feeds.py
similarity index 100%
rename from sentry/feeds.py
rename to sentry/web/feeds.py
diff --git a/sentry/reporter.py b/sentry/web/reporter.py
similarity index 90%
rename from sentry/reporter.py
rename to sentry/web/reporter.py
index 3606260333..757898313f 100644
--- a/sentry/reporter.py
+++ b/sentry/web/reporter.py
@@ -77,39 +77,6 @@ class ImprovedExceptionReporter(ExceptionReporter):
         })
         return t.render(c)
 
-class FakeRequest(object):
-    GET = {}
-    POST = {}
-    META = {}
-    COOKIES = {}
-    FILES = {}
-    raw_post_data = ''
-    url = ''
-    
-    def __repr__(self):
-        # Since this is called as part of error handling, we need to be very
-        # robust against potentially malformed input.
-        try:
-            get = pformat(self.GET)
-        except:
-            get = '<could not parse>'
-        try:
-            post = pformat(self.POST)
-        except:
-            post = '<could not parse>'
-        try:
-            cookies = pformat(self.COOKIES)
-        except:
-            cookies = '<could not parse>'
-        try:
-            meta = pformat(self.META)
-        except:
-            meta = '<could not parse>'
-        return '<Request\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>' % \
-            (get, post, cookies, meta)
-
-    def build_absolute_uri(self): return self.url
-
 TECHNICAL_500_TEMPLATE = """
 <div id="summary">
   <h3>{{ exception_type }}: {{ exception_value|escape }}</h3>
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
new file mode 100644
index 0000000000..433c43d88b
--- /dev/null
+++ b/sentry/web/urls.py
@@ -0,0 +1,37 @@
+import os
+import re
+
+from django.conf.urls.defaults import *
+
+from sentry.conf import KEY
+from sentry.web import views, feeds
+
+SENTRY_ROOT = os.path.dirname(__file__) 
+
+urlpatterns = patterns('',
+    # This path is also reflected in conf.STATIC_URL_PREFIX
+    url(r'^_static/(?P<path>.*)$', views.static_media, name='sentry-media'),
+
+    # Feeds
+
+    url(r'^feeds/%s/messages.xml$' % re.escape(KEY), feeds.MessageFeed(), name='sentry-feed-messages'),
+    url(r'^feeds/%s/summaries.xml$' % re.escape(KEY), feeds.SummaryFeed(), name='sentry-feed-summaries'),
+
+    # JS and API
+
+    url(r'^jsapi/$', views.ajax_handler, name='sentry-ajax'),
+    url(r'^store/$', views.store, name='sentry-store'),
+    
+    # Normal views
+
+    url(r'^login$', views.login, name='sentry-login'),
+    url(r'^logout$', views.logout, name='sentry-logout'),
+    url(r'^group/(\d+)$', views.group, name='sentry-group'),
+    url(r'^group/(\d+)/messages$', views.group_message_list, name='sentry-group-messages'),
+    url(r'^group/(\d+)/messages/(\d+)$', views.group_message_details, name='sentry-group-message'),
+    url(r'^group/(\d+)/actions/([\w_-]+)', views.group_plugin_action, name='sentry-group-plugin-action'),
+
+    url(r'^search$', views.search, name='sentry-search'),
+
+    url(r'^$', views.index, name='sentry'),
+)
diff --git a/sentry/views.py b/sentry/web/views.py
similarity index 99%
rename from sentry/views.py
rename to sentry/web/views.py
index 0275ef6640..b09fba1216 100644
--- a/sentry/views.py
+++ b/sentry/web/views.py
@@ -23,11 +23,11 @@ from django.utils.safestring import mark_safe
 from django.views.decorators.csrf import csrf_protect, csrf_exempt
 
 from sentry import conf
-from sentry.helpers import get_filters, is_float, get_signature, parse_auth_header
+from sentry.utils import get_filters, is_float, get_signature, parse_auth_header
 from sentry.models import GroupedMessage, Message
 from sentry.plugins import GroupActionProvider
 from sentry.templatetags.sentry_helpers import with_priority
-from sentry.reporter import ImprovedExceptionReporter
+from sentry.web.reporter import ImprovedExceptionReporter
 
 uuid_re = re.compile(r'^[a-z0-9]{32}$')
 
diff --git a/sentry/wsgi.py b/sentry/wsgi.py
new file mode 100644
index 0000000000..c5e1f40d7a
--- /dev/null
+++ b/sentry/wsgi.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python
+import os, sys, os.path
+
+# Add the project to the python path
+sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
+sys.stdout = sys.stderr
+
+# Set our settings module
+from django.conf import settings
+
+if not settings.configured:
+    os.environ['DJANGO_SETTINGS_MODULE'] = 'sentry.utils.conf.default_settings'
+os.environ['CELERY_LOADER'] = 'django'
+
+import django.core.handlers.wsgi
+
+# Run WSGI handler for the application
+application = django.core.handlers.wsgi.WSGIHandler()
+
+from django.conf import settings
+if settings.SESSION_FILE_PATH:
+    try:
+        os.makedirs(settings.SESSION_FILE_PATH)
+    except OSError:
+        pass
+
diff --git a/setup.py b/setup.py
index b9100efd16..5426214002 100644
--- a/setup.py
+++ b/setup.py
@@ -29,6 +29,9 @@ setup(
         'django-indexer>=0.3.0',
         'django-templatetag-sugar>=0.1.0',
         'uuid',
+        # python-daemon and eventlet are required to run the Sentry indepenent webserver
+        'python-daemon>=1.6',
+        'eventlet>=0.9.15',
     ],
     dependency_links=[
         'https://github.com/disqus/django-haystack/tarball/master#egg=django-haystack',
