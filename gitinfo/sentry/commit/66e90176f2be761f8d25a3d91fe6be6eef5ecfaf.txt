commit 66e90176f2be761f8d25a3d91fe6be6eef5ecfaf
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Wed Nov 21 10:22:51 2018 -0800

    fixed case in default repos where there are no repos. (#10706)

diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index a5f4a44b3f..d3f2e51dfc 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -117,7 +117,7 @@ class ExampleIntegration(IntegrationInstallation, IssueSyncMixin):
     def get_repositories(self):
         return [{
             'name': 'repo',
-            'id': 'user/repo',
+            'identifier': 'user/repo',
         }]
 
     def get_unmigratable_repositories(self):
diff --git a/src/sentry/integrations/github/issues.py b/src/sentry/integrations/github/issues.py
index fe7cbf1048..fc23909196 100644
--- a/src/sentry/integrations/github/issues.py
+++ b/src/sentry/integrations/github/issues.py
@@ -50,7 +50,7 @@ class GitHubIssueBasic(IssueBasicMixin):
         fields = super(GitHubIssueBasic, self).get_create_issue_config(group, **kwargs)
         default_repo, repo_choices = self.get_repository_choices(group, **kwargs)
 
-        assignees = self.get_allowed_assignees(default_repo)
+        assignees = self.get_allowed_assignees(default_repo) if default_repo else []
 
         org = group.organization
         autocomplete_url = reverse(
diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
index 6ea3e904ec..ceb7dfdedd 100644
--- a/src/sentry/integrations/issues.py
+++ b/src/sentry/integrations/issues.py
@@ -217,7 +217,11 @@ class IssueBasicMixin(object):
             defaults = self.get_project_defaults(group.project_id)
             repo = params.get('repo', defaults.get('repo'))
 
-        default_repo = repo or repo_choices[0][0]
+        try:
+            default_repo = repo or repo_choices[0][0]
+        except IndexError:
+            return '', repo_choices
+
         # If a repo has been selected outside of the default list of
         # repos, stick it onto the front of the list so that it can be
         # selected.
diff --git a/tests/sentry/integrations/bitbucket/test_issues.py b/tests/sentry/integrations/bitbucket/test_issues.py
index 7e894373d4..6bcd8a7267 100644
--- a/tests/sentry/integrations/bitbucket/test_issues.py
+++ b/tests/sentry/integrations/bitbucket/test_issues.py
@@ -136,6 +136,40 @@ class BitbucketIssueTest(APITestCase):
                 break
         assert repo_field['default'] == 'myaccount/repo1'
 
+    @responses.activate
+    def test_default_repo_link_fields_no_repos(self):
+        responses.add(
+            responses.GET,
+            'https://api.bitbucket.org/2.0/repositories/myaccount',
+            body=b"""{
+                "values": []
+            }""",
+            content_type='application/json',
+        )
+
+        installation = self.integration.get_installation(self.organization.id)
+        fields = installation.get_link_issue_config(self.group)
+        repo_field = [field for field in fields if field['name'] == 'repo'][0]
+        assert repo_field['default'] == ''
+        assert repo_field['choices'] == []
+
+    @responses.activate
+    def test_default_repo_create_fields_no_repos(self):
+        responses.add(
+            responses.GET,
+            'https://api.bitbucket.org/2.0/repositories/myaccount',
+            body=b"""{
+                "values": []
+            }""",
+            content_type='application/json',
+        )
+
+        installation = self.integration.get_installation(self.organization.id)
+        fields = installation.get_create_issue_config(self.group)
+        repo_field = [field for field in fields if field['name'] == 'repo'][0]
+        assert repo_field['default'] == ''
+        assert repo_field['choices'] == []
+
     @responses.activate
     def test_get_create_issue_config(self):
         responses.add(
diff --git a/tests/sentry/integrations/github/test_issues.py b/tests/sentry/integrations/github/test_issues.py
index 59c12ff993..98ab1f2bf0 100644
--- a/tests/sentry/integrations/github/test_issues.py
+++ b/tests/sentry/integrations/github/test_issues.py
@@ -293,3 +293,49 @@ class GitHubIssueBasicTest(TestCase):
                 repo_field = field
                 break
         assert repo_field['default'] == 'getsentry/sentry'
+
+    @responses.activate
+    @patch('sentry.integrations.github.client.GitHubClientMixin.get_token', return_value='jwt_token_1')
+    def test_default_repo_link_fields_no_repos(self, mock_get_jwt):
+        responses.add(
+            responses.GET,
+            'https://api.github.com/installation/repositories',
+            json={
+                'repositories': []
+            },
+        )
+        group = self.create_group()
+        self.create_event(group=group)
+
+        fields = self.integration.get_link_issue_config(group)
+        repo_field = [field for field in fields if field['name'] == 'repo'][0]
+        assert repo_field['default'] is ''
+        assert repo_field['choices'] == []
+
+    @responses.activate
+    @patch('sentry.integrations.github.client.get_jwt', return_value='jwt_token_1')
+    def test_default_repo_create_fields_no_repos(self, mock_get_jwt):
+        responses.add(
+            responses.GET,
+            'https://api.github.com/installation/repositories',
+            json={
+                'repositories': []
+            },
+        )
+        responses.add(
+            responses.POST,
+            'https://api.github.com/installations/github_external_id/access_tokens',
+            json={'token': 'token_1', 'expires_at': '2018-10-11T22:14:10Z'}
+        )
+
+        group = self.create_group()
+        self.create_event(group=group)
+
+        fields = self.integration.get_create_issue_config(group)
+        repo_field = [field for field in fields if field['name'] == 'repo'][0]
+        assignee_field = [field for field in fields if field['name'] == 'assignee'][0]
+
+        assert repo_field['default'] == ''
+        assert repo_field['choices'] == []
+        assert assignee_field['default'] == ''
+        assert assignee_field['choices'] == []
diff --git a/tests/sentry/integrations/gitlab/test_issues.py b/tests/sentry/integrations/gitlab/test_issues.py
index 7108a8f2f8..8beff5a7db 100644
--- a/tests/sentry/integrations/gitlab/test_issues.py
+++ b/tests/sentry/integrations/gitlab/test_issues.py
@@ -296,3 +296,47 @@ class GitlabIssuesTest(GitLabTestCase):
                 'maxRows': 10,
             }
         ]
+
+    @responses.activate
+    def test_create_issue_no_projects(self):
+        group_description = (
+            u'Sentry Issue: [%s](%s)\n\n'
+            '```\nStacktrace (most recent call last):\n\n'
+            '  File "sentry/models/foo.py", line 29, in build_msg\n'
+            '    string_max_length=self.string_max_length)\n\nmessage\n```'
+        ) % (
+            self.group.qualified_short_id,
+            absolute_uri(self.group.get_absolute_url(params={'referrer': 'gitlab_integration'})),
+        )
+
+        responses.add(
+            responses.GET,
+            u'https://example.gitlab.com/api/v4/groups/%s/projects' % self.installation.model.metadata['group_id'],
+            json=[]
+        )
+        assert self.installation.get_create_issue_config(self.group) == [
+            {
+                'url': '/extensions/gitlab/search/baz/%d/' % self.installation.model.id,
+                'name': 'project',
+                'required': True,
+                'choices': [],
+                'defaultValue': '',
+                'type': 'select',
+                'label': 'Gitlab Project'
+            },
+            {
+                'name': 'title',
+                'label': 'Title',
+                'default': self.group.get_latest_event().error(),
+                'type': 'string',
+                'required': True,
+            },
+            {
+                'name': 'description',
+                'label': 'Description',
+                'default': group_description,
+                'type': 'textarea',
+                'autosize': True,
+                'maxRows': 10,
+            }
+        ]
diff --git a/tests/sentry/integrations/test_issues.py b/tests/sentry/integrations/test_issues.py
index 2fac7f4c4e..77bb125a14 100644
--- a/tests/sentry/integrations/test_issues.py
+++ b/tests/sentry/integrations/test_issues.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.models import (
     ExternalIssue, Group, GroupStatus, GroupLink, Integration, OrganizationIntegration
 )
@@ -108,3 +110,63 @@ class IssueSyncIntegration(TestCase):
             })
 
             assert Group.objects.get(id=group.id).status == GroupStatus.UNRESOLVED
+
+
+class IssueDefaultTest(TestCase):
+    def setUp(self):
+        self.group.status = GroupStatus.RESOLVED
+        self.group.save()
+
+        integration = Integration.objects.create(
+            provider='example',
+            external_id='123456',
+        )
+        integration.add_organization(self.group.organization, self.user)
+
+        external_issue = ExternalIssue.objects.create(
+            organization_id=self.group.organization.id,
+            integration_id=integration.id,
+            key='APP-123',
+        )
+
+        GroupLink.objects.create(
+            group_id=self.group.id,
+            project_id=self.group.project_id,
+            linked_type=GroupLink.LinkedType.issue,
+            linked_id=external_issue.id,
+            relationship=GroupLink.Relationship.references,
+        )
+
+        self.installation = integration.get_installation(self.group.organization.id)
+
+    def test_get_repository_choices(self):
+        default_repo, repo_choice = self.installation.get_repository_choices(self.group)
+        assert default_repo == 'user/repo'
+        assert repo_choice == [('user/repo', 'repo')]
+
+    def test_get_repository_choices_no_repos(self):
+        self.installation.get_repositories = lambda: []
+        default_repo, repo_choice = self.installation.get_repository_choices(self.group)
+        assert default_repo == ''
+        assert repo_choice == []
+
+    def test_get_repository_choices_default_repo(self):
+        self.installation.org_integration.config = {
+            'project_issue_defaults': {
+                six.text_type(self.group.project_id): {'repo': 'user/repo2'}
+            }
+        }
+        self.installation.org_integration.save()
+        self.installation.get_repositories = lambda: [
+            {
+                'name': 'repo1',
+                'identifier': 'user/repo1',
+            },
+            {
+                'name': 'repo2',
+                'identifier': 'user/repo2',
+            },
+        ]
+        default_repo, repo_choice = self.installation.get_repository_choices(self.group)
+        assert default_repo == 'user/repo2'
+        assert repo_choice == [('user/repo1', 'repo1'), ('user/repo2', 'repo2')]
