commit 1f200a64b6dc0cf16d0cdcc5d6aa7b405a49b44e
Author: Jan Michael Auer <jan.auer@sentry.io>
Date:   Tue Mar 17 20:29:47 2020 +0100

    feat(sessions): Issue a reject-all quota without feature flag (#17728)

diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index e10cc192dd..ce7beb0e15 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -90,6 +90,7 @@ default_manager.add("organizations:sso-saml2", OrganizationFeature)  # NOQA
 default_manager.add("organizations:grouping-info", OrganizationFeature)  # NOQA
 default_manager.add("organizations:tweak-grouping-config", OrganizationFeature)  # NOQA
 default_manager.add("organizations:set-grouping-config", OrganizationFeature)  # NOQA
+default_manager.add("organizations:set-grouping-config", OrganizationFeature)  # NOQA
 
 # Project scoped features
 default_manager.add("projects:custom-inbound-filters", ProjectFeature)  # NOQA
diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
index ac786b2220..99703034fd 100644
--- a/src/sentry/quotas/redis.py
+++ b/src/sentry/quotas/redis.py
@@ -5,6 +5,7 @@ import six
 
 from time import time
 
+from sentry import features
 from sentry.constants import DataCategory
 from sentry.quotas.base import NotRateLimited, Quota, QuotaConfig, QuotaScope, RateLimited
 from sentry.utils.redis import (
@@ -66,6 +67,16 @@ class RedisQuota(Quota):
 
         results = []
 
+        if not features.has("organizations:releases-v2", project.organization):
+            results.append(
+                QuotaConfig(
+                    limit=0,
+                    scope=QuotaScope.ORGANIZATION,
+                    categories=[DataCategory.SESSION],
+                    reason_code="sessions_unavailable",
+                )
+            )
+
         pquota = self.get_project_quota(project)
         if pquota[0] is not None:
             results.append(
diff --git a/tests/sentry/quotas/redis/tests.py b/tests/sentry/quotas/redis/tests.py
index 9e5e6eb2bc..410221a4a2 100644
--- a/tests/sentry/quotas/redis/tests.py
+++ b/tests/sentry/quotas/redis/tests.py
@@ -8,6 +8,7 @@ import time
 
 from exam import fixture, patcher
 
+from sentry.constants import DataCategory
 from sentry.quotas.base import QuotaConfig, QuotaScope
 from sentry.quotas.redis import is_rate_limited, RedisQuota
 from sentry.testutils import TestCase
@@ -87,16 +88,31 @@ class RedisQuotaTest(TestCase):
     def test_uses_defined_quotas(self):
         self.get_project_quota.return_value = (200, 60)
         self.get_organization_quota.return_value = (300, 60)
-        quotas = self.quota.get_quotas(self.project)
+        with self.feature("organizations:releases-v2"):
+            quotas = self.quota.get_quotas(self.project)
+
         assert quotas[0].id == u"p"
+        assert quotas[0].scope == QuotaScope.PROJECT
         assert quotas[0].scope_id == six.text_type(self.project.id)
         assert quotas[0].limit == 200
         assert quotas[0].window == 60
         assert quotas[1].id == u"o"
+        assert quotas[1].scope == QuotaScope.ORGANIZATION
         assert quotas[1].scope_id == six.text_type(self.organization.id)
         assert quotas[1].limit == 300
         assert quotas[1].window == 60
 
+    def test_sessions_quota(self):
+        self.get_project_quota.return_value = (200, 60)
+        self.get_organization_quota.return_value = (300, 60)
+        with self.feature({"organizations:releases-v2": False}):
+            quotas = self.quota.get_quotas(self.project)
+
+        assert quotas[0].id is None  # should not be counted
+        assert quotas[0].categories == set([DataCategory.SESSION])
+        assert quotas[0].scope == QuotaScope.ORGANIZATION
+        assert quotas[0].limit == 0
+
     @mock.patch("sentry.quotas.redis.is_rate_limited")
     @mock.patch.object(RedisQuota, "get_quotas", return_value=[])
     def test_bails_immediately_without_any_quota(self, get_quotas, is_rate_limited):
@@ -175,16 +191,16 @@ class RedisQuotaTest(TestCase):
             self.quota.is_rate_limited(self.project, timestamp=timestamp)
 
         quotas = self.quota.get_quotas(self.project)
+        all_quotas = quotas + [
+            QuotaConfig(id="unlimited", limit=None, window=60, reason_code="unlimited"),
+            QuotaConfig(id="dummy", limit=10, window=60, reason_code="dummy"),
+        ]
 
-        assert self.quota.get_usage(
-            self.project.organization_id,
-            quotas
-            + [
-                QuotaConfig(id="unlimited", limit=None, window=60, reason_code="unlimited"),
-                QuotaConfig(id="dummy", limit=10, window=60, reason_code="dummy"),
-            ],
-            timestamp=timestamp,
-        ) == [n for _ in quotas] + [0, 0]
+        usage = self.quota.get_usage(self.project.organization_id, all_quotas, timestamp=timestamp)
+
+        # Only quotas with an ID are counted in Redis (via this ID). Assume the
+        # count for these quotas and None for the others.
+        assert usage == [n if q.id else None for q in quotas] + [0, 0]
 
     @mock.patch.object(RedisQuota, "get_quotas")
     def test_refund(self, mock_get_quotas):
@@ -234,14 +250,14 @@ class RedisQuotaTest(TestCase):
         self.quota.refund(self.project, timestamp=timestamp)
 
         quotas = self.quota.get_quotas(self.project)
+        all_quotas = quotas + [
+            QuotaConfig(id="unlimited", limit=None, window=60, reason_code="unlimited"),
+            QuotaConfig(id="dummy", limit=10, window=60, reason_code="dummy"),
+        ]
+
+        usage = self.quota.get_usage(self.project.organization_id, all_quotas, timestamp=timestamp)
 
-        assert self.quota.get_usage(
-            self.project.organization_id,
-            quotas
-            + [
-                QuotaConfig(id="unlimited", limit=None, window=60, reason_code="unlimited"),
-                QuotaConfig(id="dummy", limit=10, window=60, reason_code="dummy"),
-            ],
-            timestamp=timestamp,
-            # the - 1 is because we refunded once
-        ) == [n - 1 for _ in quotas] + [0, 0]
+        # Only quotas with an ID are counted in Redis (via this ID). Assume the
+        # count for these quotas and None for the others.
+        # The ``- 1`` is because we refunded once.
+        assert usage == [n - 1 if q.id else None for q in quotas] + [0, 0]
