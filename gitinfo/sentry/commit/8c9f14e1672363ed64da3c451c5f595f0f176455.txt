commit 8c9f14e1672363ed64da3c451c5f595f0f176455
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Apr 16 13:49:30 2019 -0700

    feat(saved-searches): Use Saved Searches store in OrganizationStream (#12762)
    
    Use store in org stream view

diff --git a/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
index e14c9ef5cc..793efe0f15 100644
--- a/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
@@ -4,7 +4,7 @@ import {t} from 'app/locale';
 import SavedSearchesActions from 'app/actions/savedSearchesActions';
 import handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';
 
-export function fetchSavedSearches(api, orgId, useOrgSavedSearches = false) {
+export function fetchSavedSearches(api, orgId, projectMap, useOrgSavedSearches = false) {
   const url = `/organizations/${orgId}/searches/`;
 
   const data = {};
@@ -21,7 +21,14 @@ export function fetchSavedSearches(api, orgId, useOrgSavedSearches = false) {
 
   promise
     .then(resp => {
-      SavedSearchesActions.fetchSavedSearchesSuccess(resp);
+      // Add in project slugs so that we can display them in the picker bars.
+      // TODO(billyvg): #org-saved-searches -- cleanup when removing project saved searches
+      const savedSearchList = resp.map(search => ({
+        ...search,
+        projectSlug: projectMap[search.projectId],
+      }));
+
+      SavedSearchesActions.fetchSavedSearchesSuccess(savedSearchList);
     })
     .catch(err => {
       SavedSearchesActions.fetchSavedSearchesError(err);
diff --git a/src/sentry/static/sentry/app/utils/withSavedSearches.jsx b/src/sentry/static/sentry/app/utils/withSavedSearches.jsx
index 48e4c64a67..c85c8aeb0c 100644
--- a/src/sentry/static/sentry/app/utils/withSavedSearches.jsx
+++ b/src/sentry/static/sentry/app/utils/withSavedSearches.jsx
@@ -25,17 +25,21 @@ const withSavedSearches = WrappedComponent =>
       return (
         <Feature features={['org-saved-searches']}>
           {({hasFeature}) => {
-            const {params} = this.props;
+            const {params, location} = this.props;
             const {searchId} = params;
             const {savedSearches, isLoading} = this.state;
             let savedSearch = null;
+
             // Switch to the current saved search or pinned result if available
             if (!isLoading && savedSearches) {
               if (searchId) {
                 const match = savedSearches.find(search => search.id === searchId);
                 savedSearch = match ? match : null;
               }
-              if (hasFeature && !savedSearch) {
+
+              // If there's no direct saved search being requested (via URL route)
+              // *AND* there's no query in URL, then check if there is pinned search
+              if (hasFeature && !savedSearch && !location.query.query) {
                 const pin = savedSearches.find(search => search.isPinned);
                 savedSearch = pin ? pin : null;
               }
diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index 1919d6bca0..d85e36de27 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -1,6 +1,7 @@
 import {browserHistory} from 'react-router';
-import {isEqual, omit, pickBy, uniq, sortBy} from 'lodash';
+import {isEqual, omit, pickBy, uniq} from 'lodash';
 import Cookies from 'js-cookie';
+import PropTypes from 'prop-types';
 import React from 'react';
 import Reflux from 'reflux';
 import classNames from 'classnames';
@@ -8,34 +9,35 @@ import createReactClass from 'create-react-class';
 import qs from 'query-string';
 
 import {Client} from 'app/api';
-import {t} from 'app/locale';
-import ErrorRobot from 'app/components/errorRobot';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import {extractSelectionParameters} from 'app/components/organizations/globalSelectionHeader/utils';
-import Pagination from 'app/components/pagination';
 import {Panel, PanelBody} from 'app/components/panels';
-import StreamGroup from 'app/components/stream/group';
-import {fetchOrganizationTags, fetchTagValues} from 'app/actionCreators/tags';
+import {analytics} from 'app/utils/analytics';
+import {extractSelectionParameters} from 'app/components/organizations/globalSelectionHeader/utils';
 import {fetchOrgMembers, indexMembersByProject} from 'app/actionCreators/members';
+import {fetchOrganizationTags, fetchTagValues} from 'app/actionCreators/tags';
 import {fetchSavedSearches, deleteSavedSearch} from 'app/actionCreators/savedSearches';
+import {getUtcDateString} from 'app/utils/dates';
+import {t} from 'app/locale';
 import ConfigStore from 'app/stores/configStore';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import ErrorRobot from 'app/components/errorRobot';
 import GroupStore from 'app/stores/groupStore';
+import LoadingError from 'app/components/loadingError';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import Pagination from 'app/components/pagination';
+import ProcessingIssueList from 'app/components/stream/processingIssueList';
 import SelectedGroupStore from 'app/stores/selectedGroupStore';
-import TagStore from 'app/stores/tagStore';
 import SentryTypes from 'app/sentryTypes';
 import StreamActions from 'app/views/stream/actions';
 import StreamFilters from 'app/views/stream/filters';
+import StreamGroup from 'app/components/stream/group';
 import StreamSidebar from 'app/views/stream/sidebar';
-import ProcessingIssueList from 'app/components/stream/processingIssueList';
-import {analytics} from 'app/utils/analytics';
-import {getUtcDateString} from 'app/utils/dates';
+import TagStore from 'app/stores/tagStore';
 import parseApiError from 'app/utils/parseApiError';
 import parseLinkHeader from 'app/utils/parseLinkHeader';
 import utils from 'app/utils';
-import withOrganization from 'app/utils/withOrganization';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
+import withOrganization from 'app/utils/withOrganization';
+import withSavedSearches from 'app/utils/withSavedSearches';
 
 const MAX_ITEMS = 25;
 const DEFAULT_QUERY = 'is:unresolved';
@@ -49,6 +51,10 @@ const OrganizationStream = createReactClass({
   propTypes: {
     organization: SentryTypes.Organization,
     selection: SentryTypes.GlobalSelection,
+    savedSearch: SentryTypes.SavedSearch,
+    savedSearches: PropTypes.arrayOf(SentryTypes.SavedSearch),
+    savedSearchLoading: PropTypes.bool.isRequired,
+    useOrgSavedSearches: PropTypes.bool.isRequired,
   },
 
   mixins: [
@@ -72,9 +78,6 @@ const OrganizationStream = createReactClass({
       queryCount: null,
       error: false,
       isSidebarVisible: false,
-      savedSearchLoading: true,
-      savedSearch: null,
-      savedSearchList: [],
       issuesLoading: true,
       tagsLoading: true,
       memberList: {},
@@ -122,7 +125,10 @@ const OrganizationStream = createReactClass({
     const newQuery = this.props.location.query;
 
     // Wait for saved searches to load before we attempt to fetch stream data
-    if (this.state.savedSearchLoading) {
+    if (this.props.savedSearchLoading) {
+      return;
+    } else if (prevProps.savedSearchLoading) {
+      this.fetchData();
       return;
     }
 
@@ -135,7 +141,7 @@ const OrganizationStream = createReactClass({
       prevQuery.query !== newQuery.query ||
       prevQuery.statsPeriod !== newQuery.statsPeriod ||
       prevQuery.groupStatsPeriod !== newQuery.groupStatsPeriod ||
-      prevState.savedSearch !== this.state.savedSearch
+      prevProps.savedSearch !== this.props.savedSearch
     ) {
       this.fetchData();
     } else if (
@@ -161,9 +167,10 @@ const OrganizationStream = createReactClass({
   projectCache: {},
 
   getQuery() {
-    if (this.state.savedSearch) {
-      return this.state.savedSearch.query;
+    if (this.props.savedSearch) {
+      return this.props.savedSearch.query;
     }
+
     const {query} = this.props.location.query;
     return typeof query === 'undefined' ? DEFAULT_QUERY : query;
   },
@@ -220,7 +227,9 @@ const OrganizationStream = createReactClass({
    */
   getGlobalSearchProjects() {
     let {projects} = this.props.selection;
-    projects = projects.map(p => p.toString());
+
+    // Not sure how this worked before for "omits null values" test
+    projects = (projects && projects.map(p => p.toString())) || [];
 
     return this.props.organization.projects.filter(p => projects.indexOf(p.id) > -1);
   },
@@ -435,16 +444,15 @@ const OrganizationStream = createReactClass({
     return links && !links.previous.results && !links.next.results;
   },
 
-  transitionTo(newParams = {}) {
+  transitionTo(newParams = {}, savedSearch = this.props.savedSearch) {
     const query = {
       ...this.getEndpointParams(),
       ...newParams,
     };
     const {organization} = this.props;
-    const {savedSearch} = this.state;
     let path;
 
-    if (savedSearch && savedSearch.query === query.query) {
+    if (savedSearch && savedSearch.id) {
       path = `/organizations/${organization.slug}/issues/searches/${savedSearch.id}/`;
       // Drop query and project, adding the search project if available.
       delete query.query;
@@ -547,81 +555,37 @@ const OrganizationStream = createReactClass({
   },
 
   fetchSavedSearches() {
-    const {orgId, searchId} = this.props.params;
-    const {organization} = this.props;
+    const {orgId} = this.props.params;
+    const {organization, useOrgSavedSearches} = this.props;
     const projectMap = organization.projects.reduce((acc, project) => {
       acc[project.id] = project.slug;
       return acc;
     }, {});
 
-    const useOrgSavedSearches = this.getFeatures().has('org-saved-searches');
-
-    fetchSavedSearches(this.api, orgId, useOrgSavedSearches).then(
-      data => {
-        // Add in project slugs so that we can display them in the picker bars.
-        const savedSearchList = data.map(search => {
-          search.projectSlug = projectMap[search.projectId];
-          return search;
-        });
-
-        const newState = {
-          savedSearchList,
-          savedSearchLoading: false,
-        };
-
-        // Switch to the the current saved search or pinned result if available
-        if (searchId) {
-          const match = savedSearchList.find(search => search.id === searchId);
-          newState.savedSearch = match ? match : null;
-        }
-        if (
-          useOrgSavedSearches &&
-          !newState.savedSearch &&
-          this.getQuery() === DEFAULT_QUERY
-        ) {
-          const pin = savedSearchList.find(search => search.isPinned);
-          newState.savedSearch = pin ? pin : null;
-        }
-        this.setState(newState);
-
-        // If we aren't loading a saved search/pin fetch data as there won't
-        // be a re-render
-        if (!newState.savedSearch) {
-          this.fetchData();
-        }
-      },
-      error => {
-        this.fetchData();
-      }
+    fetchSavedSearches(this.api, orgId, projectMap, useOrgSavedSearches).then(
+      data => {},
+      error => {}
     );
   },
 
-  onSavedSearchCreate(data) {
-    const savedSearchList = this.state.savedSearchList;
-
-    savedSearchList.push(data);
-    this.setState({
-      savedSearchList: sortBy(savedSearchList, ['name', 'projectId']),
-    });
-    this.setState({savedSearch: data}, this.transitionTo);
+  onSavedSearchCreate(newSavedSearch) {
+    // Navigate to new saved search
+    this.transitionTo(null, newSavedSearch);
   },
 
-  onSavedSearchSelect(search) {
-    this.setState({savedSearch: search, issuesLoading: true}, this.transitionTo);
+  onSavedSearchSelect(savedSearch) {
+    this.setState({issuesLoading: true}, () => this.transitionTo(null, savedSearch));
   },
 
   onSavedSearchDelete(search) {
     const {orgId} = this.props.params;
-    const {savedSearchList} = this.state;
 
     deleteSavedSearch(this.api, orgId, search).then(() => {
       this.setState(
         {
-          savedSearchList: savedSearchList.filter(s => s.id != search.id),
-          savedSearch: null,
           issuesLoading: true,
         },
-        this.transitionTo
+        () => this.transitionTo({}, null)
       );
     });
   },
@@ -649,7 +613,7 @@ const OrganizationStream = createReactClass({
   },
 
   render() {
-    if (this.state.savedSearchLoading) {
+    if (this.props.savedSearchLoading) {
       return this.renderLoading();
     }
     const classes = ['stream-row'];
@@ -657,7 +621,8 @@ const OrganizationStream = createReactClass({
       classes.push('show-sidebar');
     }
 
-    const {params, organization} = this.props;
+    const {params, organization, savedSearch, savedSearches} = this.props;
+    const {selectedProject} = this.state;
     const query = this.getQuery();
 
     // If we have a selected project set release data up
@@ -666,7 +631,6 @@ const OrganizationStream = createReactClass({
     let projectId = null;
     let latestRelease = null;
 
-    const {selectedProject} = this.state;
     const projects = this.getGlobalSearchProjects();
 
     if (selectedProject) {
@@ -687,7 +651,7 @@ const OrganizationStream = createReactClass({
             projectId={projectId}
             searchId={params.searchId}
             query={query}
-            savedSearch={this.state.savedSearch}
+            savedSearch={savedSearch}
             sort={this.getSort()}
             queryCount={this.state.queryCount}
             queryMaxCount={this.state.queryMaxCount}
@@ -698,7 +662,7 @@ const OrganizationStream = createReactClass({
             onSavedSearchDelete={this.onSavedSearchDelete}
             onSidebarToggle={this.onSidebarToggle}
             isSearchDisabled={this.state.isSidebarVisible}
-            savedSearchList={this.state.savedSearchList}
+            savedSearchList={savedSearches}
             tagValueLoader={this.tagValueLoader}
             tags={this.state.tags}
           />
@@ -743,5 +707,7 @@ const OrganizationStream = createReactClass({
   },
 });
 
-export default withGlobalSelection(withOrganization(OrganizationStream));
+export default withSavedSearches(
+  withGlobalSelection(withOrganization(OrganizationStream))
+);
 export {OrganizationStream};
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index b964484398..e4e82b1885 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -102,6 +102,7 @@ class StreamFilters extends React.Component {
 
           <Feature features={['org-saved-searches']}>
             <OrganizationSavedSearchSelector
+              key={query}
               organization={organization}
               savedSearchList={savedSearchList}
               onSavedSearchSelect={onSavedSearchSelect}
diff --git a/tests/js/spec/stores/savedSearchesStore.spec.jsx b/tests/js/spec/stores/savedSearchesStore.spec.jsx
index e981dd65d4..8474f56700 100644
--- a/tests/js/spec/stores/savedSearchesStore.spec.jsx
+++ b/tests/js/spec/stores/savedSearchesStore.spec.jsx
@@ -42,7 +42,7 @@ describe('SavedSearchesStore', function() {
   });
 
   it('fetching saved searches updates store', async function() {
-    await fetchSavedSearches(api, 'org-1');
+    await fetchSavedSearches(api, 'org-1', {});
     await tick();
 
     expect(SavedSearchesStore.get().savedSearches).toHaveLength(2);
@@ -50,7 +50,7 @@ describe('SavedSearchesStore', function() {
   });
 
   it('creates a new pin search', async function() {
-    await fetchSavedSearches(api, 'org-1');
+    await fetchSavedSearches(api, 'org-1', {});
     await tick();
 
     pinSearch(api, 'org-1', 0, 'level:info');
@@ -83,7 +83,7 @@ describe('SavedSearchesStore', function() {
         ...searches,
       ],
     });
-    fetchSavedSearches(api, 'org-1');
+    await fetchSavedSearches(api, 'org-1', {});
     await tick();
 
     pinSearch(api, 'org-1', 0, searches[1].query);
@@ -111,7 +111,7 @@ describe('SavedSearchesStore', function() {
       url: '/organizations/org-1/searches/',
       body: [{...searches[0], isPinned: true}, searches[1]],
     });
-    fetchSavedSearches(api, 'org-1');
+    await fetchSavedSearches(api, 'org-1', {});
     await tick();
 
     pinSearch(api, 'org-1', 0, searches[1].query);
@@ -155,7 +155,7 @@ describe('SavedSearchesStore', function() {
         ...searches,
       ],
     });
-    fetchSavedSearches(api, 'org-1');
+    await fetchSavedSearches(api, 'org-1', {});
     await tick();
 
     unpinSearch(api, 'org-1', 0, searches[0]);
@@ -192,7 +192,7 @@ describe('SavedSearchesStore', function() {
       url: '/organizations/org-1/searches/',
       body: [{...searches[0], isPinned: true}, searches[1]],
     });
-    fetchSavedSearches(api, 'org-1');
+    await fetchSavedSearches(api, 'org-1', {});
     await tick();
 
     unpinSearch(api, 'org-1', 0, searches[0]);
@@ -231,7 +231,7 @@ describe('SavedSearchesStore', function() {
         searches[1],
       ],
     });
-    fetchSavedSearches(api, 'org-1');
+    await fetchSavedSearches(api, 'org-1', {});
     await tick();
 
     unpinSearch(api, 'org-1', 0, searches[0]);
diff --git a/tests/js/spec/views/organizationStream/overview.spec.jsx b/tests/js/spec/views/organizationStream/overview.spec.jsx
index ffdc5f6419..c457a07cef 100644
--- a/tests/js/spec/views/organizationStream/overview.spec.jsx
+++ b/tests/js/spec/views/organizationStream/overview.spec.jsx
@@ -2,12 +2,21 @@ import {browserHistory} from 'react-router';
 import {clonedeep} from 'lodash';
 import React from 'react';
 
-import {OrganizationStream} from 'app/views/organizationStream/overview';
-import {shallow} from 'enzyme';
+import {initializeOrg} from 'app-test/helpers/initializeOrg';
+import {mount, shallow} from 'enzyme';
 import ErrorRobot from 'app/components/errorRobot';
 import GroupStore from 'app/stores/groupStore';
+import OrganizationStreamWithStores, {
+  OrganizationStream,
+} from 'app/views/organizationStream/overview';
+import StreamGroup from 'app/components/stream/group';
 import TagStore from 'app/stores/tagStore';
 
+// Mock <StreamSidebar> and <StreamActions>
+jest.mock('app/views/stream/sidebar', () => jest.fn(() => null));
+jest.mock('app/views/stream/actions', () => jest.fn(() => null));
+jest.mock('app/components/stream/group', () => jest.fn(() => null));
+
 const DEFAULT_LINKS_HEADER =
   '<http://127.0.0.1:8000/api/0/organizations/org-slug/issues/?cursor=1443575731:0:1>; rel="previous"; results="false"; cursor="1443575731:0:1", ' +
   '<http://127.0.0.1:8000/api/0/organizations/org-slug/issues/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
@@ -25,6 +34,7 @@ describe('OrganizationStream', function() {
   let fetchMembersRequest;
 
   beforeEach(function() {
+    MockApiClient.clearMockResponses();
     project = TestStubs.ProjectDetails({
       id: '3559',
       name: 'Foo Project',
@@ -35,15 +45,16 @@ describe('OrganizationStream', function() {
       id: '1337',
       slug: 'org-slug',
       access: ['releases'],
-      features: ['org-saved-searches'],
+      features: [],
       projects: [project],
     });
-    savedSearch = {
+
+    savedSearch = TestStubs.Search({
       id: '789',
       query: 'is:unresolved',
-      name: 'test',
+      name: 'Unresolved Issues',
       projectId: project.id,
-    };
+    });
 
     group = TestStubs.Group({project});
     MockApiClient.addMockResponse({
@@ -83,6 +94,9 @@ describe('OrganizationStream', function() {
     TagStore.init();
 
     props = {
+      savedSearchLoading: false,
+      savedSearches: [savedSearch],
+      useOrgSavedSearches: true,
       selection: {
         projects: [parseInt(organization.projects[0].id, 10)],
         environments: [],
@@ -96,12 +110,354 @@ describe('OrganizationStream', function() {
 
   afterEach(function() {
     MockApiClient.clearMockResponses();
+    if (wrapper) {
+      wrapper.unmount();
+    }
+    wrapper = null;
+  });
+
+  describe('withStores and feature flags', function() {
+    const {router, routerContext} = initializeOrg({
+      organization: {
+        features: ['org-saved-searches', 'recent-searches', 'global-views'],
+        slug: 'org-slug',
+      },
+      router: {
+        location: {query: {}, search: ''},
+        params: {orgId: 'org-slug'},
+      },
+    });
+    const defaultProps = {};
+    let savedSearchesRequest;
+    let recentSearchesRequest;
+    let issuesRequest;
+
+    /* helpers */
+    const getSavedSearchTitle = w =>
+      w.find('OrganizationSavedSearchSelector DropdownMenu ButtonTitle').text();
+
+    const getSearchBarValue = w =>
+      w
+        .find('SmartSearchBarContainer input')
+        .prop('value')
+        .trim();
+
+    const createWrapper = ({params, location, ...p} = {}) => {
+      const newRouter = {
+        ...router,
+        params: {
+          ...router.params,
+          ...params,
+        },
+        location: {
+          ...router.location,
+          ...location,
+        },
+      };
+
+      wrapper = mount(
+        <OrganizationStreamWithStores {...newRouter} {...defaultProps} {...p} />,
+        routerContext
+      );
+    };
+
+    beforeEach(function() {
+      StreamGroup.mockClear();
+
+      recentSearchesRequest = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/recent-searches/',
+        method: 'GET',
+        body: [],
+      });
+      savedSearchesRequest = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/searches/',
+        body: [savedSearch],
+      });
+      issuesRequest = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/issues/',
+        body: [group],
+        headers: {
+          Link: DEFAULT_LINKS_HEADER,
+        },
+      });
+    });
+
+    it('loads group rows with default query (no pinned queries, and no query in URL)', async function() {
+      createWrapper();
+
+      // Loading saved searches
+      expect(savedSearchesRequest).toHaveBeenCalledTimes(1);
+      // Update stores with saved searches
+      await tick();
+      wrapper.update();
+
+      // auxillary requests being made
+      expect(recentSearchesRequest).toHaveBeenCalledTimes(1);
+      expect(fetchTagsRequest).toHaveBeenCalledTimes(1);
+      expect(fetchMembersRequest).toHaveBeenCalledTimes(1);
+
+      // primary /issues/ request
+      expect(issuesRequest).toHaveBeenCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          // Should be called with default query
+          data: expect.stringContaining('is%3Aunresolved'),
+        })
+      );
+
+      expect(getSearchBarValue(wrapper)).toBe('is:unresolved');
+
+      // Organization saved search selector should have default saved search selected
+      expect(getSavedSearchTitle(wrapper)).toBe('Unresolved Issues');
+
+      // This is mocked
+      expect(StreamGroup).toHaveBeenCalled();
+    });
+
+    it('loads with query in URL and pinned queries', async function() {
+      savedSearchesRequest = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/searches/',
+        body: [
+          savedSearch,
+          TestStubs.Search({
+            id: '123',
+            name: 'My Pinned Search',
+            isPinned: true,
+            query: 'is:resolved',
+          }),
+        ],
+      });
+
+      createWrapper({
+        location: {
+          query: {
+            query: 'level:foo',
+          },
+        },
+      });
+
+      // Update stores with saved searches
+      await tick();
+      wrapper.update();
+
+      // Main /issues/ request
+      expect(issuesRequest).toHaveBeenCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          // Should be called with default query
+          data: expect.stringContaining('level%3Afoo'),
+        })
+      );
+
+      expect(getSearchBarValue(wrapper)).toBe('level:foo');
+
+      // Custom search
+      expect(getSavedSearchTitle(wrapper)).toBe('Custom Search');
+    });
+
+    it('loads with a pinned saved query', async function() {
+      savedSearchesRequest = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/searches/',
+        body: [
+          savedSearch,
+          TestStubs.Search({
+            id: '123',
+            name: 'Org Custom',
+            isPinned: true,
+            isGlobal: false,
+            isOrgCustom: true,
+            query: 'is:resolved',
+          }),
+        ],
+      });
+      createWrapper();
+
+      await tick();
+      wrapper.update();
+
+      expect(issuesRequest).toHaveBeenCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          // Should be called with default query
+          data: expect.stringContaining('is%3Aresolved'),
+        })
+      );
+
+      expect(getSearchBarValue(wrapper)).toBe('is:resolved');
+
+      // Organization saved search selector should have default saved search selected
+      expect(getSavedSearchTitle(wrapper)).toBe('Org Custom');
+    });
+
+    it('loads with a pinned custom query', async function() {
+      savedSearchesRequest = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/searches/',
+        body: [
+          savedSearch,
+          TestStubs.Search({
+            id: '123',
+            name: 'My Pinned Search',
+            isPinned: true,
+            isGlobal: false,
+            isOrgCustom: false,
+            query: 'is:resolved',
+          }),
+        ],
+      });
+      createWrapper();
+
+      await tick();
+      wrapper.update();
+
+      expect(issuesRequest).toHaveBeenCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          // Should be called with default query
+          data: expect.stringContaining('is%3Aresolved'),
+        })
+      );
+
+      expect(getSearchBarValue(wrapper)).toBe('is:resolved');
+
+      // Organization saved search selector should have default saved search selected
+      expect(getSavedSearchTitle(wrapper)).toBe('My Pinned Search');
+    });
+
+    it('loads with a saved query', async function() {
+      savedSearchesRequest = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/searches/',
+        body: [
+          TestStubs.Search({
+            id: '123',
+            name: 'Assigned to Me',
+            isPinned: false,
+            isGlobal: true,
+            query: 'assigned:me',
+            projectId: null,
+            type: 0,
+          }),
+        ],
+      });
+      createWrapper({params: {searchId: '123'}});
+
+      await tick();
+      wrapper.update();
+
+      expect(issuesRequest).toHaveBeenCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          // Should be called with default query
+          data: expect.stringContaining('assigned%3Ame'),
+        })
+      );
+
+      expect(getSearchBarValue(wrapper)).toBe('assigned:me');
+
+      // Organization saved search selector should have default saved search selected
+      expect(getSavedSearchTitle(wrapper)).toBe('Assigned to Me');
+    });
+
+    it('loads with a query in URL', async function() {
+      savedSearchesRequest = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/searches/',
+        body: [
+          TestStubs.Search({
+            id: '123',
+            name: 'Assigned to Me',
+            isPinned: false,
+            isGlobal: true,
+            query: 'assigned:me',
+            projectId: null,
+            type: 0,
+          }),
+        ],
+      });
+      createWrapper({location: {query: {query: 'level:error'}}});
+
+      await tick();
+      wrapper.update();
+
+      expect(issuesRequest).toHaveBeenCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          // Should be called with default query
+          data: expect.stringContaining('level%3Aerror'),
+        })
+      );
+
+      expect(getSearchBarValue(wrapper)).toBe('level:error');
+
+      // Organization saved search selector should have default saved search selected
+      expect(getSavedSearchTitle(wrapper)).toBe('Custom Search');
+    });
+
+    it('selects a saved search and changes sort', async function() {
+      const localSavedSearch = {...savedSearch, projectId: null};
+      savedSearchesRequest = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/searches/',
+        body: [localSavedSearch],
+      });
+      createWrapper();
+      await tick();
+      wrapper.update();
+
+      wrapper.find('OrganizationSavedSearchSelector DropdownButton').simulate('click');
+      wrapper
+        .find('OrganizationSavedSearchSelector MenuItem a')
+        .first()
+        .simulate('click');
+
+      expect(browserHistory.push).toHaveBeenLastCalledWith(
+        expect.objectContaining({
+          pathname: '/organizations/org-slug/issues/searches/789/',
+        })
+      );
+
+      // Need to update component
+      wrapper.setProps({
+        savedSearch: localSavedSearch,
+        location: {
+          ...router.location,
+          pathname: '/organizations/org-slug/issues/searches/789/',
+          query: {
+            environment: [],
+            project: [],
+          },
+        },
+      });
+
+      wrapper.find('SortOptions DropdownButton').simulate('click');
+      wrapper
+        .find('SortOptions MenuItem a')
+        .at(3)
+        .simulate('click');
+
+      expect(browserHistory.push).toHaveBeenLastCalledWith(
+        expect.objectContaining({
+          pathname: '/organizations/org-slug/issues/searches/789/',
+          query: {
+            environment: [],
+            sort: 'freq',
+          },
+        })
+      );
+    });
+
+    it.todo('pins and unpins a custom query');
+
+    it.todo('pins and unpins a saved query');
+
+    it.todo('saves a new query');
+
+    it.todo('loads pinned search when invalid saved search id is accessed');
   });
 
   describe('transitionTo', function() {
     let instance;
     beforeEach(function() {
-      wrapper = shallow(<OrganizationStream {...props} />);
+      wrapper = shallow(<OrganizationStream {...props} />, {
+        disableLifecycleMethods: false,
+      });
       instance = wrapper.instance();
     });
 
@@ -125,8 +481,7 @@ describe('OrganizationStream', function() {
         projectId: 99,
         query: 'foo:bar',
       };
-      instance.setState({savedSearch});
-      instance.transitionTo();
+      instance.transitionTo(null, savedSearch);
 
       expect(browserHistory.push).toHaveBeenCalledWith({
         pathname: '/organizations/org-slug/issues/searches/123/',
@@ -145,8 +500,7 @@ describe('OrganizationStream', function() {
         project: null,
         query: 'is:unresolved',
       };
-      instance.setState({savedSearch});
-      instance.transitionTo();
+      instance.transitionTo(null, savedSearch);
 
       expect(browserHistory.push).toHaveBeenCalledWith({
         pathname: '/organizations/org-slug/issues/searches/1/',
@@ -164,8 +518,7 @@ describe('OrganizationStream', function() {
         projectId: null,
         query: 'is:unresolved',
       };
-      instance.setState({savedSearch});
-      instance.transitionTo();
+      instance.transitionTo(null, savedSearch);
 
       expect(browserHistory.push).toHaveBeenCalledWith({
         pathname: '/organizations/org-slug/issues/searches/1/',
@@ -180,7 +533,9 @@ describe('OrganizationStream', function() {
 
   describe('getEndpointParams', function() {
     beforeEach(function() {
-      wrapper = shallow(<OrganizationStream {...props} />);
+      wrapper = shallow(<OrganizationStream {...props} />, {
+        disableLifecycleMethods: false,
+      });
     });
 
     it('omits null values', function() {
@@ -216,7 +571,6 @@ describe('OrganizationStream', function() {
     });
 
     it('uses saved search data', function() {
-      wrapper.setState({savedSearch});
       const value = wrapper.instance().getEndpointParams();
 
       expect(value.query).toEqual(savedSearch.query);
@@ -257,44 +611,6 @@ describe('OrganizationStream', function() {
     });
   });
 
-  describe('componentDidMount with a valid saved search', function() {
-    beforeEach(function() {
-      props.params.searchId = '789';
-      wrapper = shallow(<OrganizationStream {...props} />);
-    });
-
-    it('fetches searches and sets the savedSearch', async function() {
-      const instance = wrapper.instance();
-      instance.componentDidMount();
-      await wrapper.update();
-
-      expect(instance.state.savedSearch).toBeTruthy();
-    });
-
-    it('uses the saved search query', async function() {
-      const instance = wrapper.instance();
-      instance.componentDidMount();
-      await wrapper.update();
-
-      expect(instance.getQuery()).toEqual(savedSearch.query);
-    });
-  });
-
-  describe('componentDidMount with an invalid saved search', function() {
-    beforeEach(function() {
-      props.params.searchId = '999';
-      wrapper = shallow(<OrganizationStream {...props} />);
-    });
-
-    it('does not set the savedSearch state', async function() {
-      const instance = wrapper.instance();
-      instance.componentDidMount();
-      await wrapper.update();
-
-      expect(instance.state.savedSearch).toBeNull();
-    });
-  });
-
   describe('componentDidUpdate fetching groups', function() {
     let fetchDataMock;
     beforeEach(function() {
@@ -314,7 +630,8 @@ describe('OrganizationStream', function() {
 
     it('fetches data on savedSearch change', function() {
       savedSearch = {id: '1', query: 'is:resolved'};
-      wrapper.setState({savedSearch});
+      wrapper.setProps({savedSearch});
+      wrapper.update();
 
       expect(fetchDataMock).toHaveBeenCalled();
     });
@@ -327,9 +644,10 @@ describe('OrganizationStream', function() {
         location = clonedeep(location);
         location.query[attr] = 'newValue';
         wrapper.setProps({location});
+        wrapper.update();
 
         // Each propery change should cause a new fetch incrementing the call count.
-        expect(fetchDataMock).toHaveBeenCalledTimes(i + 2);
+        expect(fetchDataMock).toHaveBeenCalledTimes(i + 1);
       });
     });
   });
@@ -404,7 +722,9 @@ describe('OrganizationStream', function() {
 
   describe('render states', function() {
     beforeEach(function() {
-      wrapper = shallow(<OrganizationStream {...props} />);
+      wrapper = shallow(<OrganizationStream {...props} />, {
+        disableLifecycleMethods: false,
+      });
     });
 
     it('displays the loading icon', function() {
@@ -433,23 +753,13 @@ describe('OrganizationStream', function() {
       });
       expect(wrapper.find('EmptyStateWarning')).toHaveLength(1);
     });
-
-    it('displays group rows', function() {
-      GroupStore.add([group]);
-      wrapper.setState({
-        error: false,
-        savedSearchLoading: false,
-        issuesLoading: false,
-        groupIds: ['1'],
-      });
-      const groups = wrapper.find('StreamGroup');
-      expect(groups).toHaveLength(1);
-    });
   });
 
   describe('Empty State', function() {
     const createWrapper = moreProps => {
       const defaultProps = {
+        savedSearchLoading: false,
+        useOrgSavedSearches: true,
         selection: {
           projects: [],
           environments: [],
@@ -462,10 +772,11 @@ describe('OrganizationStream', function() {
         }),
         ...moreProps,
       };
-      const localWrapper = shallow(<OrganizationStream {...defaultProps} />);
+      const localWrapper = shallow(<OrganizationStream {...defaultProps} />, {
+        disableLifecycleMethods: false,
+      });
       localWrapper.setState({
         error: false,
-        savedSearchLoading: false,
         issuesLoading: false,
         groupIds: [],
       });
@@ -599,57 +910,4 @@ describe('OrganizationStream', function() {
       expect(wrapper.find(ErrorRobot)).toHaveLength(0);
     });
   });
-
-  describe('pinned searches', function() {
-    let pinnedSearch;
-
-    beforeEach(function() {
-      pinnedSearch = {
-        id: '888',
-        query: 'best:yes',
-        name: 'best issues',
-        isPinned: true,
-      };
-
-      MockApiClient.addMockResponse({
-        url: '/organizations/org-slug/searches/',
-        body: [savedSearch, pinnedSearch],
-      });
-
-      wrapper = shallow(<OrganizationStream {...props} />, {
-        disableLifecycleMethods: false,
-      });
-    });
-
-    it('defaults to the pinned search', async function() {
-      await wrapper.update();
-
-      const instance = wrapper.instance();
-      expect(instance.state.savedSearch).toEqual(pinnedSearch);
-    });
-
-    it('does not use pin when there is an existing query', async function() {
-      const location = {query: {query: 'timesSeen:>100'}};
-      wrapper = shallow(<OrganizationStream {...props} location={location} />, {
-        disableLifecycleMethods: false,
-      });
-      await wrapper.update();
-
-      const instance = wrapper.instance();
-      expect(instance.state.savedSearch).toEqual(null);
-    });
-
-    it('does not use pin when there is a saved search selected', async function() {
-      const params = {orgId: organization.slug, searchId: savedSearch.id};
-      wrapper = shallow(<OrganizationStream {...props} params={params} />, {
-        disableLifecycleMethods: false,
-      });
-
-      const instance = wrapper.instance();
-      instance.setState({savedSearch});
-      await wrapper.update();
-
-      expect(instance.state.savedSearch).toEqual(savedSearch);
-    });
-  });
 });
