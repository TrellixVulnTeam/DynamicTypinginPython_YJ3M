commit 3365608296f5db68adcb08828df235f604947498
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Nov 23 05:14:34 2014 -0800

    Move GroupManager

diff --git a/src/sentry/manager.py b/src/sentry/manager.py
deleted file mode 100644
index d54a1ad8dd..0000000000
--- a/src/sentry/manager.py
+++ /dev/null
@@ -1,81 +0,0 @@
-"""
-sentry.manager
-~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from __future__ import absolute_import
-
-import six
-
-from sentry.app import buffer, tsdb
-from sentry.constants import MAX_TAG_VALUE_LENGTH
-from sentry.db.models import BaseManager
-
-
-class GroupManager(BaseManager):
-    use_for_related_fields = True
-
-    def get_by_natural_key(self, project, checksum):
-        return self.get(project=project, checksum=checksum)
-
-    def from_kwargs(self, project, **kwargs):
-        from sentry.event_manager import EventManager
-
-        manager = EventManager(kwargs)
-        manager.normalize()
-        return manager.save(project)
-
-    def add_tags(self, group, tags):
-        from sentry.models import TagValue, GroupTagValue
-
-        project = group.project
-        date = group.last_seen
-
-        tsdb_keys = []
-
-        for tag_item in tags:
-            if len(tag_item) == 2:
-                (key, value), data = tag_item, None
-            else:
-                key, value, data = tag_item
-
-            if not value:
-                continue
-
-            value = six.text_type(value)
-            if len(value) > MAX_TAG_VALUE_LENGTH:
-                continue
-
-            tsdb_id = u'%s=%s' % (key, value)
-
-            tsdb_keys.extend([
-                (tsdb.models.project_tag_value, tsdb_id),
-            ])
-
-            buffer.incr(TagValue, {
-                'times_seen': 1,
-            }, {
-                'project': project,
-                'key': key,
-                'value': value,
-            }, {
-                'last_seen': date,
-                'data': data,
-            })
-
-            buffer.incr(GroupTagValue, {
-                'times_seen': 1,
-            }, {
-                'group': group,
-                'project': project,
-                'key': key,
-                'value': value,
-            }, {
-                'last_seen': date,
-            })
-
-        if tsdb_keys:
-            tsdb.incr_multi(tsdb_keys)
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 351fd6f602..c2a0ee8eed 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -9,30 +9,94 @@ from __future__ import absolute_import, print_function
 
 import logging
 import math
+import six
 import time
 
 from datetime import timedelta
-
 from django.core.urlresolvers import reverse
 from django.db import models
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
-import six
-
+from sentry.app import buffer, tsdb
 from sentry.constants import (
     LOG_LEVELS, STATUS_LEVELS, MAX_CULPRIT_LENGTH, STATUS_RESOLVED,
-    STATUS_UNRESOLVED, STATUS_MUTED
+    STATUS_UNRESOLVED, STATUS_MUTED, MAX_TAG_VALUE_LENGTH
 )
 from sentry.db.models import (
-    Model, GzippedDictField, BoundedIntegerField, BoundedPositiveIntegerField,
-    sane_repr
+    BaseManager, BoundedIntegerField, BoundedPositiveIntegerField,
+    Model, GzippedDictField, sane_repr
 )
-from sentry.manager import GroupManager
 from sentry.utils.http import absolute_uri
 from sentry.utils.strings import truncatechars, strip
 
 
+class GroupManager(BaseManager):
+    use_for_related_fields = True
+
+    def get_by_natural_key(self, project, checksum):
+        return self.get(project=project, checksum=checksum)
+
+    def from_kwargs(self, project, **kwargs):
+        from sentry.event_manager import EventManager
+
+        manager = EventManager(kwargs)
+        manager.normalize()
+        return manager.save(project)
+
+    def add_tags(self, group, tags):
+        from sentry.models import TagValue, GroupTagValue
+
+        project = group.project
+        date = group.last_seen
+
+        tsdb_keys = []
+
+        for tag_item in tags:
+            if len(tag_item) == 2:
+                (key, value), data = tag_item, None
+            else:
+                key, value, data = tag_item
+
+            if not value:
+                continue
+
+            value = six.text_type(value)
+            if len(value) > MAX_TAG_VALUE_LENGTH:
+                continue
+
+            tsdb_id = u'%s=%s' % (key, value)
+
+            tsdb_keys.extend([
+                (tsdb.models.project_tag_value, tsdb_id),
+            ])
+
+            buffer.incr(TagValue, {
+                'times_seen': 1,
+            }, {
+                'project': project,
+                'key': key,
+                'value': value,
+            }, {
+                'last_seen': date,
+                'data': data,
+            })
+
+            buffer.incr(GroupTagValue, {
+                'times_seen': 1,
+            }, {
+                'group': group,
+                'project': project,
+                'key': key,
+                'value': value,
+            }, {
+                'last_seen': date,
+            })
+
+        if tsdb_keys:
+            tsdb.incr_multi(tsdb_keys)
+
+
 class Group(Model):
     """
     Aggregated message which summarizes a set of Events.
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index 3c3e0f977f..fbd3ead763 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -48,14 +48,14 @@ class EventManagerTest(TestCase):
         assert EventMapping.objects.filter(
             group=event.group, event_id=event_id).exists()
 
-    @patch('sentry.manager.GroupManager.add_tags')
+    @patch('sentry.models.group.GroupManager.add_tags')
     def test_tags_as_list(self, add_tags):
         manager = EventManager(self.make_event(tags=[('foo', 'bar')]))
         data = manager.normalize()
 
         assert data['tags'] == [('foo', 'bar')]
 
-    @patch('sentry.manager.GroupManager.add_tags')
+    @patch('sentry.models.group.GroupManager.add_tags')
     def test_tags_as_dict(self, add_tags):
         manager = EventManager(self.make_event(tags={'foo': 'bar'}))
         data = manager.normalize()
