commit 174fde838f3f11cafea192773cca600fd9c26b55
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Oct 23 09:53:12 2019 -0700

    build(webpack): Build `integration-docs` on "watchRun" (#15230)
    
    Previously only built before webpack runs, but this did not include the "watch" mode. Include hook for `watchRun` so that it checks on first build in "watch" mode for integration-docs.

diff --git a/build-utils/integration-docs-fetch-plugin.js b/build-utils/integration-docs-fetch-plugin.js
index 114a3c0f78..c0e5a2d04d 100644
--- a/build-utils/integration-docs-fetch-plugin.js
+++ b/build-utils/integration-docs-fetch-plugin.js
@@ -31,9 +31,32 @@ const transformPlatformsToList = ({platforms}) =>
     })
     .sort(alphaSortFromKey(item => item.name));
 
+function fetch(_compilation, callback) {
+  https
+    .get(PLATFORMS_URL, res => {
+      res.setEncoding('utf8');
+      let buffer = '';
+      res
+        .on('data', data => {
+          buffer += data;
+        })
+        .on('end', () =>
+          fs.writeFile(
+            this.modulePath,
+            JSON.stringify({
+              platforms: transformPlatformsToList(JSON.parse(buffer)),
+            }),
+            callback
+          )
+        );
+    })
+    .on('error', callback);
+}
+
 class IntegrationDocsFetchPlugin {
   constructor({basePath}) {
     this.modulePath = path.join(basePath, DOCS_INDEX_PATH);
+    this.hasRun = false;
     const moduleDir = path.dirname(this.modulePath);
     if (!fs.existsSync(moduleDir)) {
       fs.mkdirSync(moduleDir, {recursive: true});
@@ -41,28 +64,19 @@ class IntegrationDocsFetchPlugin {
   }
 
   apply(compiler) {
-    compiler.hooks.beforeRun.tapAsync(
+    compiler.hooks.beforeRun.tapAsync('IntegrationDocsFetchPlugin', fetch.bind(this));
+
+    compiler.hooks.watchRun.tapAsync(
       'IntegrationDocsFetchPlugin',
       (compilation, callback) => {
-        https
-          .get(PLATFORMS_URL, res => {
-            res.setEncoding('utf8');
-            let buffer = '';
-            res
-              .on('data', data => {
-                buffer += data;
-              })
-              .on('end', () =>
-                fs.writeFile(
-                  this.modulePath,
-                  JSON.stringify({
-                    platforms: transformPlatformsToList(JSON.parse(buffer)),
-                  }),
-                  callback
-                )
-              );
-          })
-          .on('error', callback);
+        // Only run once when watching and only if it does not exist on fs
+        if (this.hasRun || fs.existsSync(this.modulePath)) {
+          callback();
+          return;
+        }
+
+        fetch.call(this, compilation, callback);
+        this.hasRun = true;
       }
     );
   }
