commit 69f6502ebc8d4816f562a53b94376b32db7677ca
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Feb 16 12:28:18 2016 -0800

    Added endpoint to resolve short ids

diff --git a/src/sentry/api/endpoints/organization_shortid.py b/src/sentry/api/endpoints/organization_shortid.py
new file mode 100644
index 0000000000..df9f366c4b
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_shortid.py
@@ -0,0 +1,49 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.base import DocSection
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.models import Group
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.utils.apidocs import scenario, attach_scenarios
+
+
+@scenario('ResolveShortId')
+def resolve_short_id_scenario(runner):
+    group = Group.objects.filter(project=runner.default_project).first()
+    runner.request(
+        method='GET',
+        path='/organizations/%s/shortids/%s/' % (
+            runner.org.slug,
+            group.qualified_short_id,
+        )
+    )
+
+
+class ShortIdLookupEndpoint(OrganizationEndpoint):
+    doc_section = DocSection.ORGANIZATIONS
+
+    @attach_scenarios([resolve_short_id_scenario])
+    def get(self, request, organization, short_id):
+        """
+        Resolve a Short ID
+        ``````````````````
+
+        This resolves a short ID to the project slug and internal issue ID.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          short ID should be looked up in.
+        :pparam string short_id: the short ID to look up.
+        :auth: required
+        """
+        group = Group.objects.by_qualified_short_id(organization, short_id)
+        if group is None:
+            raise ResourceDoesNotExist()
+
+        return Response({
+            'organizationSlug': organization.slug,
+            'projectSlug': group.project.slug,
+            'groupId': str(group.id),
+            'shortId': group.qualified_short_id,
+        })
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index f34bfa0162..10a1d07f8d 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -122,6 +122,7 @@ class GroupSerializer(Serializer):
         return {
             'id': str(obj.id),
             'shareId': obj.get_share_id(),
+            'shortId': obj.qualified_short_id,
             'count': str(obj.times_seen),
             'userCount': attrs['user_count'],
             'title': obj.message_short,
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 00f6748e6b..dc8d98bf8d 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -24,6 +24,7 @@ from .endpoints.legacy_project_redirect import LegacyProjectRedirectEndpoint
 from .endpoints.organization_access_request_details import OrganizationAccessRequestDetailsEndpoint
 from .endpoints.organization_activity import OrganizationActivityEndpoint
 from .endpoints.organization_details import OrganizationDetailsEndpoint
+from .endpoints.organization_shortid import ShortIdLookupEndpoint
 from .endpoints.organization_issues_new import OrganizationIssuesNewEndpoint
 from .endpoints.organization_member_details import OrganizationMemberDetailsEndpoint
 from .endpoints.organization_member_index import OrganizationMemberIndexEndpoint
@@ -107,6 +108,9 @@ urlpatterns = patterns(
     url(r'^organizations/(?P<organization_slug>[^\/]+)/$',
         OrganizationDetailsEndpoint.as_view(),
         name='sentry-api-0-organization-details'),
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/shortids/(?P<short_id>[^\/]+)/$',
+        ShortIdLookupEndpoint.as_view(),
+        name='sentry-api-0-short-id-lookup'),
     url(r'^organizations/(?P<organization_slug>[^\/]+)/access-requests/(?P<request_id>\d+)/$',
         OrganizationAccessRequestDetailsEndpoint.as_view(),
         name='sentry-api-0-organization-access-request-details'),
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 7994825534..b6bf6f445c 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -33,7 +33,7 @@ from sentry.utils.http import absolute_uri
 from sentry.utils.strings import truncatechars, strip
 
 
-_short_id_re = re.compile(r'^(.*?)([\s_-]*)(\d+)$')
+_short_id_re = re.compile(r'^(.*?)(?:[\s_-]*)(\d+)$')
 
 
 # TODO(dcramer): pull in enum library
@@ -49,7 +49,7 @@ class GroupStatus(object):
 class GroupManager(BaseManager):
     use_for_related_fields = True
 
-    def by_short_id(self, org, short_id):
+    def by_qualified_short_id(self, org, short_id):
         match = _short_id_re.match(short_id)
         if match is None:
             return
@@ -189,6 +189,15 @@ class Group(Model):
         return absolute_uri(reverse('sentry-group', args=[
             self.organization.slug, self.project.slug, self.id]))
 
+    @property
+    def qualified_short_id(self):
+        if self.project.short_name is not None and \
+           self.short_id is not None:
+            return '%s-%s' % (
+                self.project.short_name,
+                self.short_id,
+            )
+
     @property
     def event_set(self):
         from sentry.models import Event
diff --git a/src/sentry/utils/apidocs.py b/src/sentry/utils/apidocs.py
index b9f760af2b..00affe180b 100644
--- a/src/sentry/utils/apidocs.py
+++ b/src/sentry/utils/apidocs.py
@@ -290,13 +290,16 @@ class MockUtils(object):
             },
         )[0]
 
-    def create_project(self, name, team, org):
+    def create_project(self, name, team, org, short_id=None):
         from sentry.models import Project
+        if short_id is None:
+            short_id = name.upper()[:2]
         return Project.objects.get_or_create(
             team=team,
             name=name,
             defaults={
                 'organization': org,
+                'short_id': short_id,
             }
         )[0]
 
