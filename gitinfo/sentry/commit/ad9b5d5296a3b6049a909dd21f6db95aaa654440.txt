commit ad9b5d5296a3b6049a909dd21f6db95aaa654440
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed Mar 25 12:04:01 2020 -0700

    chore(ts): Convert utils/cursorPoller (#17889)

diff --git a/src/sentry/static/sentry/app/utils/cursorPoller.jsx b/src/sentry/static/sentry/app/utils/cursorPoller.jsx
deleted file mode 100644
index deb57d134a..0000000000
--- a/src/sentry/static/sentry/app/utils/cursorPoller.jsx
+++ /dev/null
@@ -1,92 +0,0 @@
-import {Client} from 'app/api';
-import parseLinkHeader from 'app/utils/parseLinkHeader';
-
-class CursorPoller {
-  constructor(options) {
-    this.api = new Client();
-    this.options = options;
-    this._timeoutId = null;
-    this._active = true;
-    this._baseDelay = 3000;
-    this._maxDelay = 60000;
-    this._reqsWithoutData = 0;
-    this._pollingEndpoint = options.endpoint;
-  }
-
-  getDelay() {
-    const delay = this._baseDelay * (this._reqsWithoutData + 1);
-    return Math.min(delay, this._maxDelay);
-  }
-
-  setEndpoint(url) {
-    this._pollingEndpoint = url;
-  }
-
-  enable() {
-    this._active = true;
-    if (!this._timeoutId) {
-      this._timeoutId = window.setTimeout(this.poll.bind(this), this.getDelay());
-    }
-  }
-
-  disable() {
-    this._active = false;
-    if (this._timeoutId) {
-      window.clearTimeout(this._timeoutId);
-      this._timeoutId = null;
-    }
-
-    if (this._lastRequest) {
-      this._lastRequest.cancel();
-    }
-  }
-
-  poll() {
-    this._lastRequest = this.api.request(this._pollingEndpoint, {
-      success: (data, _, jqXHR) => {
-        // cancel in progress operation if disabled
-        if (!this._active) {
-          return;
-        }
-
-        // if theres no data, nothing changes
-        if (!data || !data.length) {
-          this._reqsWithoutData += 1;
-          return;
-        }
-
-        if (this._reqsWithoutData > 0) {
-          this._reqsWithoutData -= 1;
-        }
-
-        const links = parseLinkHeader(jqXHR.getResponseHeader('Link'));
-        this._pollingEndpoint = links.previous.href;
-
-        this.options.success(data, jqXHR.getResponseHeader('Link'));
-      },
-      error: resp => {
-        if (!resp) {
-          return;
-        }
-
-        // If user does not have access to the endpoint, we should halt polling
-        // These errors could mean:
-        // * the user lost access to a project
-        // * project was renamed
-        // * user needs to reauth
-        if (resp.status === 404 || resp.status === 403 || resp.status === 401) {
-          this.disable();
-        }
-      },
-      complete: () => {
-        this._lastRequest = null;
-
-        if (this._active) {
-          this._timeoutId = window.setTimeout(this.poll.bind(this), this.getDelay());
-        }
-      },
-    });
-  }
-}
-
-export default CursorPoller;
diff --git a/src/sentry/static/sentry/app/utils/cursorPoller.tsx b/src/sentry/static/sentry/app/utils/cursorPoller.tsx
new file mode 100644
index 0000000000..cb05e0ae90
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/cursorPoller.tsx
@@ -0,0 +1,104 @@
+import {Client, Request} from 'app/api';
+import parseLinkHeader from 'app/utils/parseLinkHeader';
+
+type Options = {
+  endpoint: string;
+  success: (data: any, link?: string | null) => void;
+};
+
+const BASE_DELAY = 3000;
+const MAX_DELAY = 60000;
+
+class CursorPoller {
+  constructor(options: Options) {
+    this.options = options;
+    this.pollingEndpoint = options.endpoint;
+  }
+
+  api = new Client();
+  options: Options;
+  pollingEndpoint: string;
+  timeoutId: number | null = null;
+  lastRequest: Request | null = null;
+  active: boolean = true;
+
+  reqsWithoutData = 0;
+
+  getDelay() {
+    const delay = BASE_DELAY * (this.reqsWithoutData + 1);
+    return Math.min(delay, MAX_DELAY);
+  }
+
+  setEndpoint(url: string) {
+    this.pollingEndpoint = url;
+  }
+
+  enable() {
+    this.active = true;
+    if (!this.timeoutId) {
+      this.timeoutId = window.setTimeout(this.poll.bind(this), this.getDelay());
+    }
+  }
+
+  disable() {
+    this.active = false;
+    if (this.timeoutId) {
+      window.clearTimeout(this.timeoutId);
+      this.timeoutId = null;
+    }
+
+    if (this.lastRequest) {
+      this.lastRequest.cancel();
+    }
+  }
+
+  poll() {
+    this.lastRequest = this.api.request(this.pollingEndpoint, {
+      success: (data, _, jqXHR) => {
+        // cancel in progress operation if disabled
+        if (!this.active) {
+          return;
+        }
+
+        // if theres no data, nothing changes
+        if (!data || !data.length) {
+          this.reqsWithoutData += 1;
+          return;
+        }
+
+        if (this.reqsWithoutData > 0) {
+          this.reqsWithoutData -= 1;
+        }
+
+        const linksHeader = jqXHR?.getResponseHeader('Link') ?? null;
+        const links = parseLinkHeader(linksHeader);
+        this.pollingEndpoint = links.previous.href;
+
+        this.options.success(data, linksHeader);
+      },
+      error: resp => {
+        if (!resp) {
+          return;
+        }
+
+        // If user does not have access to the endpoint, we should halt polling
+        // These errors could mean:
+        // * the user lost access to a project
+        // * project was renamed
+        // * user needs to reauth
+        if (resp.status === 404 || resp.status === 403 || resp.status === 401) {
+          this.disable();
+        }
+      },
+      complete: () => {
+        this.lastRequest = null;
+
+        if (this.active) {
+          this.timeoutId = window.setTimeout(this.poll.bind(this), this.getDelay());
+        }
+      },
+    });
+  }
+}
+
+export default CursorPoller;
