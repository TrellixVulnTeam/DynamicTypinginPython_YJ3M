commit bfcf57700ef1bcbd90638a6df3b86bfcd7bf3fb3
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 9 15:43:26 2015 -0800

    Abstract query tokenization into helper function

diff --git a/src/sentry/nodestore/base.py b/src/sentry/nodestore/base.py
index 7b7002c605..0cfd86170d 100644
--- a/src/sentry/nodestore/base.py
+++ b/src/sentry/nodestore/base.py
@@ -48,6 +48,15 @@ class NodeStorage(local):
         for id in id_list:
             self.delete(id)
 
+    def add(self, id, data):
+        """
+        Create a node if an entry matching ``id`` does not already exist.
+
+        >>> nodestore.add('key1', {'foo': 'bar'})
+        """
+        if not self.get(id):
+            self.set(id, data)
+
     def get(self, id):
         """
         >>> data = nodestore.get('key1')
diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index 3cb6496b80..28a7cb2be0 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import, division, print_function
 
+from collections import defaultdict
 from sentry.constants import STATUS_CHOICES
 from sentry.models import EventUser, User
 from sentry.utils.auth import find_users
@@ -19,12 +20,21 @@ def get_user_tag(project, key, value):
     return euser.tag_value
 
 
-def parse_query(project, query, user):
-    # TODO(dcramer): handle query being wrapped in quotes
-    tokens = query.split(' ')
+def tokenize_query(query):
+    """
+    Tokenizes a standard Sentry search query.
 
-    results = {'tags': {}, 'query': []}
+    >>> query = 'is:resolved foo bar tag:value'
+    >>> tokenize_query(query)
+    {
+        'is': ['resolved'],
+        'query': ['foo', 'bar'],
+        'tag': ['value'],
+    }
+    """
+    results = defaultdict(list)
 
+    tokens = query.split(' ')
     tokens_iter = iter(tokens)
     for token in tokens_iter:
         # ignore empty tokens
@@ -53,38 +63,51 @@ def parse_query(project, query, user):
                 value = value[1:-1]
             else:
                 value = value[1:]
+        results[key].append(value)
+    return dict(results)
 
-        if key == 'is':
-            try:
-                results['status'] = STATUS_CHOICES[value]
-            except KeyError:
-                pass
-        elif key == 'assigned':
-            if value == 'me':
-                results['assigned_to'] = user
-            else:
+
+def parse_query(project, query, user):
+    # TODO(dcramer): handle query being wrapped in quotes
+    tokens = tokenize_query(query)
+
+    results = {'tags': {}, 'query': []}
+
+    for key, token_list in tokens.iteritems():
+        for value in token_list:
+            if key == 'query':
+                results['query'].append(value)
+            elif key == 'is':
                 try:
-                    results['assigned_to'] = find_users(value)[0]
-                except IndexError:
-                    # XXX(dcramer): hacky way to avoid showing any results when
-                    # an invalid user is entered
-                    results['assigned_to'] = User(id=0)
-        elif key == 'first-release':
-            results['first_release'] = value
-        elif key == 'release':
-            results['tags']['sentry:release'] = value
-        elif key == 'user':
-            if ':' in value:
-                comp, value = value.split(':', 1)
+                    results['status'] = STATUS_CHOICES[value]
+                except KeyError:
+                    pass
+            elif key == 'assigned':
+                if value == 'me':
+                    results['assigned_to'] = user
+                else:
+                    try:
+                        results['assigned_to'] = find_users(value)[0]
+                    except IndexError:
+                        # XXX(dcramer): hacky way to avoid showing any results when
+                        # an invalid user is entered
+                        results['assigned_to'] = User(id=0)
+            elif key == 'first-release':
+                results['first_release'] = value
+            elif key == 'release':
+                results['tags']['sentry:release'] = value
+            elif key == 'user':
+                if ':' in value:
+                    comp, value = value.split(':', 1)
+                else:
+                    comp = 'id'
+                results['tags']['sentry:user'] = get_user_tag(
+                    project, comp, value)
+            elif key.startswith('user.'):
+                results['tags']['sentry:user'] = get_user_tag(
+                    project, key.split('.', 1)[1], value)
             else:
-                comp = 'id'
-            results['tags']['sentry:user'] = get_user_tag(
-                project, comp, value)
-        elif key.startswith('user.'):
-            results['tags']['sentry:user'] = get_user_tag(
-                project, key.split('.', 1)[1], value)
-        else:
-            results['tags'][key] = value
+                results['tags'][key] = value
 
     results['query'] = ' '.join(results['query'])
 
diff --git a/src/sentry/utils/pytest.py b/src/sentry/utils/pytest.py
index 830dfbbdfa..41503d9264 100644
--- a/src/sentry/utils/pytest.py
+++ b/src/sentry/utils/pytest.py
@@ -104,10 +104,10 @@ def pytest_configure(config):
     client.flushdb()
 
     from sentry.runner.initializer import initialize_receivers, fix_south
-    initialize_receivers()
-
     fix_south(settings)
 
+    initialize_receivers()
+
     # force celery registration
     from sentry.celery import app  # NOQA
 
