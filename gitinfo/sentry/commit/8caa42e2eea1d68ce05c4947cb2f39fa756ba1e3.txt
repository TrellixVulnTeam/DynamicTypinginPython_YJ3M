commit 8caa42e2eea1d68ce05c4947cb2f39fa756ba1e3
Author: k-fish <6111995+k-fish@users.noreply.github.com>
Date:   Wed Jun 17 13:12:20 2020 -0700

    fix(discover): Fix race condition when updating date range (#19398)
    
    * fix(discover): Fix race condition when updating date range
    
    Changing date range could sometimes lead to a race condition if the requests take significant amount of time because the latest request finishes while the older request is still in-flight.
    
    This clears the existing api requests before fetching again.
    
    * ResultsChart should have its own client instance to avoid api.clear clearing requests from other components
    * Clear api requests before loadOrganizationTags and fetchTotalCount as well
    * Fix componentDidUpdate firing fetch/clear multiple times as selection and location occur during separate updates
    * Add additional checks for start/end changing to reload organization tags

diff --git a/src/sentry/static/sentry/app/components/charts/eventsRequest.tsx b/src/sentry/static/sentry/app/components/charts/eventsRequest.tsx
index 08cdaa4183..2a72a0c2e0 100644
--- a/src/sentry/static/sentry/app/components/charts/eventsRequest.tsx
+++ b/src/sentry/static/sentry/app/components/charts/eventsRequest.tsx
@@ -245,6 +245,7 @@ class EventsRequest extends React.PureComponent<EventsRequestProps, EventsReques
     }));
 
     try {
+      api.clear();
       timeseriesData = await doEventsRequest(api, props);
     } catch (resp) {
       if (resp && resp.responseJSON && resp.responseJSON.detail) {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
index 9fdc637fca..ca8e6f6052 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/results.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -81,18 +81,21 @@ class Results extends React.Component<Props, State> {
   componentDidUpdate(prevProps: Props, prevState: State) {
     const {api, location, organization, selection} = this.props;
     const {eventView} = this.state;
-    if (
-      !isEqual(prevProps.selection.projects, selection.projects) ||
-      !isEqual(prevProps.selection.datetime, selection.datetime)
-    ) {
-      loadOrganizationTags(api, organization.slug, selection);
-    }
 
     this.checkEventView();
     const currentQuery = eventView.getEventsAPIPayload(location);
     const prevQuery = prevState.eventView.getEventsAPIPayload(prevProps.location);
     if (!isAPIPayloadSimilar(currentQuery, prevQuery)) {
+      api.clear();
       this.fetchTotalCount();
+      if (
+        !isEqual(prevQuery.statsPeriod, currentQuery.statsPeriod) ||
+        !isEqual(prevQuery.start, currentQuery.start) ||
+        !isEqual(prevQuery.end, currentQuery.end) ||
+        !isEqual(prevQuery.project, currentQuery.project)
+      ) {
+        loadOrganizationTags(api, organization.slug, selection);
+      }
     }
   }
 
@@ -254,7 +257,7 @@ class Results extends React.Component<Props, State> {
   };
 
   render() {
-    const {organization, location, router, api} = this.props;
+    const {organization, location, router} = this.props;
     const {eventView, error, errorCode, totalValues, showTags} = this.state;
     const query = decodeScalar(location.query.query) || '';
     const title = this.getDocumentTitle();
@@ -280,7 +283,6 @@ class Results extends React.Component<Props, State> {
                   onSearch={this.handleSearch}
                 />
                 <ResultsChart
-                  api={api}
                   router={router}
                   organization={organization}
                   eventView={eventView}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
index 3f0ca2a284..4f5bf81b8e 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
@@ -14,6 +14,7 @@ import getDynamicText from 'app/utils/getDynamicText';
 import EventView from 'app/utils/discover/eventView';
 import {DisplayModes} from 'app/utils/discover/types';
 import {decodeScalar} from 'app/utils/queryString';
+import withApi from 'app/utils/withApi';
 
 import ChartFooter from './chartFooter';
 
@@ -167,7 +168,7 @@ class ResultsChartContainer extends React.Component<ContainerProps> {
   }
 }
 
-export default ResultsChartContainer;
+export default withApi(ResultsChartContainer);
 
 export const StyledPanel = styled(Panel)`
   @media (min-width: ${p => p.theme.breakpoints[1]}) {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index 9f453a3a4d..458c5ab161 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -92,6 +92,7 @@ class Table extends React.PureComponent<TableProps, TableState> {
     this.setState({isLoading: true, tableFetchID});
     metric.mark({name: `discover-events-start-${apiPayload.query}`});
 
+    this.props.api.clear();
     this.props.api
       .requestPromise(url, {
         method: 'GET',
diff --git a/tests/js/spec/components/charts/eventsRequest.spec.jsx b/tests/js/spec/components/charts/eventsRequest.spec.jsx
index c89e3fc39b..badfe69208 100644
--- a/tests/js/spec/components/charts/eventsRequest.spec.jsx
+++ b/tests/js/spec/components/charts/eventsRequest.spec.jsx
@@ -18,7 +18,7 @@ describe('EventsRequest', function() {
   const organization = TestStubs.Organization();
   const mock = jest.fn(() => null);
   const DEFAULTS = {
-    api: {},
+    api: new MockApiClient(),
     projects: [parseInt(project.id, 10)],
     environments: [],
     period: '24h',
