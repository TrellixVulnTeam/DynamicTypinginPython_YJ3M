commit 8b2e0e479b53fa77fb00d35b5ef76dc6101599c2
Author: Jan Michael Auer <jan.auer@sentry.io>
Date:   Fri Jun 26 14:00:08 2020 +0200

    ref(attachment): Allow arbitrary arguments in attachment cache (#19562)
    
    We will be adding additional attributes to attachment payloads in the
    future. This change ensures that we can create `CachedAttachment` from
    such payloads and do not crash when loading them from the cache. It is
    acceptable that this is lossy, since this only matters during deploys.

diff --git a/src/sentry/attachments/base.py b/src/sentry/attachments/base.py
index 7b8257e196..996ed03107 100644
--- a/src/sentry/attachments/base.py
+++ b/src/sentry/attachments/base.py
@@ -29,6 +29,8 @@ class CachedAttachment(object):
         data=UNINITIALIZED_DATA,
         chunks=None,
         cache=None,
+        rate_limited=None,
+        **kwargs
     ):
         self.key = key
         self.id = id
@@ -37,6 +39,7 @@ class CachedAttachment(object):
         self.content_type = content_type
         self.type = type or "event.attachment"
         assert isinstance(self.type, string_types), self.type
+        self.rate_limited = rate_limited
 
         self._data = data
         self.chunks = chunks
@@ -82,6 +85,7 @@ class CachedAttachment(object):
                 "content_type": self.content_type,
                 "type": self.type,
                 "chunks": self.chunks,
+                "rate_limited": self.rate_limited,
             }
         )
 
diff --git a/tests/sentry/attachments/test_base.py b/tests/sentry/attachments/test_base.py
index 6007e00346..2b8b44ad99 100644
--- a/tests/sentry/attachments/test_base.py
+++ b/tests/sentry/attachments/test_base.py
@@ -31,6 +31,35 @@ class InMemoryCache(object):
         del self.data[key]
 
 
+def test_meta_basic():
+    att = CachedAttachment(key="c:foo", id=123, name="lol.txt", content_type="text/plain", chunks=3)
+
+    # Regression test to verify that we do not add additional attributes. Note
+    # that ``rate_limited`` is missing from this dict.
+    assert att.meta() == {
+        "chunks": 3,
+        "content_type": "text/plain",
+        "id": 123,
+        "name": "lol.txt",
+        "type": "event.attachment",
+    }
+
+
+def test_meta_rate_limited():
+    att = CachedAttachment(
+        key="c:foo", id=123, name="lol.txt", content_type="text/plain", chunks=3, rate_limited=True
+    )
+
+    assert att.meta() == {
+        "chunks": 3,
+        "content_type": "text/plain",
+        "id": 123,
+        "name": "lol.txt",
+        "rate_limited": True,
+        "type": "event.attachment",
+    }
+
+
 def test_basic_chunked():
     data = InMemoryCache()
     cache = BaseAttachmentCache(data)
@@ -46,6 +75,7 @@ def test_basic_chunked():
     assert att2.key == att.key == "c:foo"
     assert att2.id == att.id == 123
     assert att2.data == att.data == b"Hello World! Bye."
+    assert att2.rate_limited is None
 
     cache.delete("c:foo")
     assert not list(cache.get("c:foo"))
@@ -62,6 +92,23 @@ def test_basic_unchunked():
     assert att2.key == att.key == "c:foo"
     assert att2.id == att.id == 0
     assert att2.data == att.data == b"Hello World! Bye."
+    assert att2.rate_limited is None
 
     cache.delete("c:foo")
     assert not list(cache.get("c:foo"))
+
+
+def test_basic_rate_limited():
+    data = InMemoryCache()
+    cache = BaseAttachmentCache(data)
+
+    att = CachedAttachment(
+        name="lol.txt", content_type="text/plain", data=b"Hello World! Bye.", rate_limited=True
+    )
+    cache.set("c:foo", [att])
+
+    (att2,) = cache.get("c:foo")
+    assert att2.key == att.key == "c:foo"
+    assert att2.id == att.id == 0
+    assert att2.data == att.data == b"Hello World! Bye."
+    assert att2.rate_limited is True
