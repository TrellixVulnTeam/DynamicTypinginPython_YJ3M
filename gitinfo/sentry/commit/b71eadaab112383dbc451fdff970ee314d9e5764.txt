commit b71eadaab112383dbc451fdff970ee314d9e5764
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Wed Mar 18 14:33:45 2020 +0100

    feat(disabled): added disabled option (#17758)

diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx
index e3fafecda9..4436e11655 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx
@@ -39,6 +39,7 @@ type PiiConfigRule = {
 type Applications = {[key: string]: Array<string>};
 
 type Props = {
+  disabled?: boolean;
   endpoint: string;
   relayPiiConfig?: string;
   panelHeaderSubTitle?: React.ReactNode;
@@ -241,7 +242,7 @@ class DataPrivacyRulesPanel extends React.Component<Props, State> {
   };
 
   render() {
-    const {panelHeaderSubTitle} = this.props;
+    const {panelHeaderSubTitle, disabled} = this.props;
     const {rules, savedRules} = this.state;
     const hideButtonBar = savedRules.length === 0 && rules.length === 0;
     return (
@@ -268,10 +269,12 @@ class DataPrivacyRulesPanel extends React.Component<Props, State> {
                 onDelete={this.handleDeleteRule}
                 onChange={this.handleChange}
                 rule={rule}
+                disabled={disabled}
               />
             ))}
             <PanelAction>
               <StyledButton
+                disabled={disabled}
                 icon={<IconAdd circle />}
                 onClick={this.handleAddRule}
                 borderless
@@ -283,8 +286,10 @@ class DataPrivacyRulesPanel extends React.Component<Props, State> {
         </Panel>
         {!hideButtonBar && (
           <StyledButtonBar gap={1.5}>
-            <Button onClick={this.handleCancelForm}>{t('Cancel')}</Button>
-            <Button priority="primary" onClick={this.handleSaveForm}>
+            <Button onClick={this.handleCancelForm} disabled={disabled}>
+              {t('Cancel')}
+            </Button>
+            <Button priority="primary" onClick={this.handleSaveForm} disabled={disabled}>
               {t('Save Rules')}
             </Button>
           </StyledButtonBar>
@@ -315,9 +320,9 @@ const PanelAction = styled('div')`
 
 // TODO(style): color #2c58a8 not yet in the theme
 const StyledButton = styled(Button)`
-  color: ${p => p.theme.blue};
+  color: ${p => (p.disabled ? p.theme.disabled : p.theme.blue)};
   :hover {
-    color: #2c58a8;
+    color: ${p => (p.disabled ? p.theme.disabled : '#2c58a8')};
   }
   > *:first-child {
     padding: 0;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
index 7c884d6c94..c853a947ef 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
@@ -28,6 +28,7 @@ type Props = {
   onDelete: (ruleId: Rule['id']) => void;
   onChange: (rule: Rule) => void;
   rule: Rule;
+  disabled?: boolean;
 };
 
 type State = {
@@ -84,7 +85,7 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
   };
 
   render() {
-    const {onDelete, rule} = this.props;
+    const {onDelete, rule, disabled} = this.props;
     const {from, customRegularExpression, type, method} = rule;
     const {errors} = this.state;
 
@@ -101,6 +102,7 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
             height={40}
             value={method}
             onChange={({value}) => this.handleChange('method', value)}
+            isDisabled={disabled}
             openOnFocus
             required
           />
@@ -114,10 +116,11 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
             height={40}
             value={type}
             onChange={({value}) => this.handleChange('type', value)}
+            isDisabled={disabled}
             openOnFocus
             required
           />
-          <From>{t('from')}</From>
+          <From disabled={disabled}>{t('from')}</From>
           <StyledTextField
             name="from"
             placeholder={t('ex. strings, numbers, custom')}
@@ -130,6 +133,7 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
             }}
             onBlur={this.handleValidation('from')}
             error={errors.from}
+            disabled={disabled}
           />
           {type === RULE_TYPE.PATTERN && (
             <CustomRegularExpression
@@ -144,11 +148,12 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
               }}
               onBlur={this.handleValidation('customRegularExpression')}
               error={errors.customRegularExpression}
+              disabled={disabled}
             />
           )}
         </WrapperFields>
         {onDelete && (
-          <StyledIconTrash onClick={this.handleDelete}>
+          <StyledIconTrash disabled={disabled} onClick={this.handleDelete}>
             <IconDelete />
           </StyledIconTrash>
         )}
@@ -185,15 +190,22 @@ const WrapperFields = styled('div')`
   }
 `;
 
-const From = styled('div')`
+const From = styled('div')<{disabled?: boolean}>`
   height: 40px;
   display: flex;
   align-items: center;
+  color: ${p => (p.disabled ? p.theme.disabled : p.theme.gray5)};
 `;
 
-const StyledSelectControl = styled(SelectControl)`
+const StyledSelectControl = styled(SelectControl)<{isDisabled?: boolean}>`
   width: 100%;
   height: 100%;
+  ${p =>
+    p.isDisabled &&
+    `
+      cursor: not-allowed;
+      pointer-events: auto;
+    `}
 `;
 
 const StyledTextField = styled(TextField)<{error?: string}>`
diff --git a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
index ae803daaa9..32f4912207 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
@@ -80,6 +80,7 @@ class OrganizationSecurityAndPrivacyContent extends AsyncView<Props> {
           panelHeaderSubTitle={t('This can also be configured per-project')}
           endpoint={endpoint}
           relayPiiConfig={relayPiiConfig}
+          disabled={!access.has('org:write')}
         />
       </React.Fragment>
     );
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
index 55152092eb..3e3d93c7e1 100644
--- a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
@@ -93,6 +93,7 @@ class ProjectDataPrivacyContent extends AsyncView<Props> {
           }
           endpoint={endpoint}
           relayPiiConfig={relayPiiConfig}
+          disabled={!access.has('project:write')}
         />
       </React.Fragment>
     );
