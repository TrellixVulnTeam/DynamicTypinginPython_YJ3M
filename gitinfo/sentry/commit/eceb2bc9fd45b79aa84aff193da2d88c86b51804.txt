commit eceb2bc9fd45b79aa84aff193da2d88c86b51804
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Wed Jul 25 13:36:38 2018 -0700

    feat(ui): New issue UI for integrations (#9058)
    
    * feat(ui): New issue UI for integrations

diff --git a/docs-ui/components/issueSyncListElement.stories.js b/docs-ui/components/issueSyncListElement.stories.js
index 718e9f8257..2048377dd6 100644
--- a/docs-ui/components/issueSyncListElement.stories.js
+++ b/docs-ui/components/issueSyncListElement.stories.js
@@ -24,17 +24,23 @@ storiesOf('IssueSyncListElement', module)
         <IssueSyncListElement
           integrationType="github"
           externalIssueLink="github.com/issues/gh-101"
-          externalIssueId="GH-101"
+          externalIssueId="101"
+          onOpen={() => {}}
+          onClose={() => {}}
         />
         <IssueSyncListElement
           integrationType="jira"
           externalIssueLink="getsentry.atlassian.net/browse/APP-367"
-          externalIssueId="APP-367"
+          externalIssueId="367"
+          onOpen={() => {}}
+          onClose={() => {}}
         />
         <IssueSyncListElement
           integrationType="vsts"
           externalIssueLink="visualstudio.microsoft.com/issues/vsts-35"
-          externalIssueId="VSTS-35"
+          externalIssueId="35"
+          onOpen={() => {}}
+          onClose={() => {}}
         />
       </StyledIssueSyncList>
     ))
diff --git a/src/sentry/api/endpoints/group_integration_details.py b/src/sentry/api/endpoints/group_integration_details.py
index 4403f3627e..560d44d9a8 100644
--- a/src/sentry/api/endpoints/group_integration_details.py
+++ b/src/sentry/api/endpoints/group_integration_details.py
@@ -105,7 +105,14 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
 
         # TODO(jess): would be helpful to return serialized external issue
         # once we have description, title, etc
-        return Response(status=201)
+        url = data.get('url') or installation.get_issue_url(external_issue.key)
+        context = {
+            'id': external_issue.id,
+            'key': external_issue.key,
+            'url': url,
+            'integrationId': external_issue.integration_id,
+        }
+        return Response(context, status=201)
 
     def post(self, request, group, integration_id):
         organization_id = group.project.organization_id
@@ -153,7 +160,15 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
             return Response({'detail': 'That issue is already linked'}, status=400)
 
         # TODO(jess): return serialized issue
-        return Response(status=201)
+        url = data.get('url') or installation.get_issue_url(external_issue.key)
+        context = {
+            'id': external_issue.id,
+            'key': external_issue.key,
+            'url': url,
+            'integrationId': external_issue.integration_id,
+
+        }
+        return Response(context, status=201)
 
     def delete(self, request, group, integration_id):
         # note here externalIssue refers to `ExternalIssue.id` wheras above
diff --git a/src/sentry/api/serializers/models/integration.py b/src/sentry/api/serializers/models/integration.py
index e30e2d8023..40ac66fce2 100644
--- a/src/sentry/api/serializers/models/integration.py
+++ b/src/sentry/api/serializers/models/integration.py
@@ -189,6 +189,7 @@ class IntegrationIssueSerializer(IntegrationSerializer):
             issues_by_integration[ei.integration_id].append({
                 'id': six.text_type(ei.id),
                 'key': ei.key,
+                'url': [i.get_installation(self.group.organization.id).get_issue_url(ei.key) for i in item_list if i.id == ei.integration_id][0],
                 'title': ei.title,
                 'description': ei.description,
             })
diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index 17d764e9da..e933950db0 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -50,6 +50,9 @@ class ExampleIntegration(Integration, IssueSyncMixin):
     outbound_assignee_key = 'sync_assignee_outbound'
     inbound_assignee_key = 'sync_assignee_inbound'
 
+    def get_issue_url(self, key, **kwargs):
+        return 'https://example/issues/{}'.format(key)
+
     def create_comment(self):
         pass
 
diff --git a/src/sentry/integrations/github/issues.py b/src/sentry/integrations/github/issues.py
index 9f5566cfcc..6a57aca31e 100644
--- a/src/sentry/integrations/github/issues.py
+++ b/src/sentry/integrations/github/issues.py
@@ -9,6 +9,11 @@ class GitHubIssueBasic(IssueBasicMixin):
     def make_external_key(self, data):
         return '{}#{}'.format(data['repo'], data['key'])
 
+    def get_issue_url(self, key, **kwargs):
+        domain_name, user = self.model.metadata['domain_name'].split('/')
+        repo, issue_id = key.split('#')
+        return "https://{}/{}/issues/{}".format(domain_name, repo, issue_id)
+
     def after_link_issue(self, external_issue, **kwargs):
         data = kwargs['data']
         client = self.get_client()
@@ -89,6 +94,7 @@ class GitHubIssueBasic(IssueBasicMixin):
             'key': issue['number'],
             'title': issue['title'],
             'description': issue['body'],
+            'url': issue['html_url'],
             'repo': repo,
         }
 
@@ -156,6 +162,7 @@ class GitHubIssueBasic(IssueBasicMixin):
             'key': issue['number'],
             'title': issue['title'],
             'description': issue['body'],
+            'url': issue['html_url'],
             'repo': repo,
         }
 
diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
index b3ab31fb47..adeb93751a 100644
--- a/src/sentry/integrations/issues.py
+++ b/src/sentry/integrations/issues.py
@@ -15,6 +15,12 @@ class IssueBasicMixin(object):
     def get_group_title(self, group, event, **kwargs):
         return event.error()
 
+    def get_issue_url(self, key, **kwargs):
+        """
+        Given the key of the external_issue return the external issue link.
+        """
+        raise NotImplementedError
+
     def get_group_body(self, group, event, **kwargs):
         result = []
         for interface in six.itervalues(event.interfaces):
diff --git a/src/sentry/plugins/bases/issue2.py b/src/sentry/plugins/bases/issue2.py
index 1ede4f0afd..b5fe177264 100644
--- a/src/sentry/plugins/bases/issue2.py
+++ b/src/sentry/plugins/bases/issue2.py
@@ -297,7 +297,9 @@ class IssueTrackingPlugin2(Plugin):
             plugin=self, project=group.project, user=request.user,
             sender=type(self)
         )
-        return Response({'issue_url': self.get_issue_url(group, issue)})
+        return Response({'issue_url': self.get_issue_url(group, issue),
+                         'link': self._get_issue_url_compat(group, issue),
+                         'id': issue['id']})
 
     def view_link(self, request, group, **kwargs):
         auth_errors = self.check_config_and_auth(request, group)
@@ -356,7 +358,9 @@ class IssueTrackingPlugin2(Plugin):
             user=request.user,
             data=issue_information,
         )
-        return Response({'message': 'Successfully linked issue.'})
+        return Response({'message': 'Successfully linked issue.',
+                         'link': self._get_issue_url_compat(group, issue),
+                         'id': issue['id']})
 
     def view_unlink(self, request, group, **kwargs):
         auth_errors = self.check_config_and_auth(request, group)
diff --git a/src/sentry/static/sentry/app/components/group/externalIssues.jsx b/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
similarity index 66%
rename from src/sentry/static/sentry/app/components/group/externalIssues.jsx
rename to src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
index 680efc90cf..7a163c7a47 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssues.jsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
@@ -3,13 +3,13 @@ import React from 'react';
 import PropTypes from 'prop-types';
 import Modal from 'react-bootstrap/lib/Modal';
 
-import {addSuccessMessage} from 'app/actionCreators/indicator';
+import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
 import AsyncComponent from 'app/components/asyncComponent';
-import DropdownLink from 'app/components/dropdownLink';
+import IssueSyncListElement from 'app/components/issueSyncListElement';
 import FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';
 import Form from 'app/views/settings/components/forms/form';
-import MenuItem from 'app/components/menuItem';
-import {t, tct} from 'app/locale';
+import SentryTypes from 'app/sentryTypes';
+import {t} from 'app/locale';
 
 const MESSAGES_BY_ACTION = {
   link: t('Successfully linked issue.'),
@@ -18,7 +18,7 @@ const MESSAGES_BY_ACTION = {
 
 class ExternalIssueForm extends AsyncComponent {
   static propTypes = {
-    group: PropTypes.object.isRequired,
+    group: SentryTypes.Group.isRequired,
     integration: PropTypes.object.isRequired,
     action: PropTypes.oneOf(['link', 'create']),
     onSubmitSuccess: PropTypes.func.isRequired,
@@ -34,9 +34,9 @@ class ExternalIssueForm extends AsyncComponent {
     ];
   }
 
-  onSubmitSuccess = () => {
+  onSubmitSuccess = data => {
     addSuccessMessage(MESSAGES_BY_ACTION[this.props.action]);
-    this.props.onSubmitSuccess();
+    this.props.onSubmitSuccess(data);
   };
 
   getOptions = (field, input) => {
@@ -162,67 +162,76 @@ class ExternalIssueForm extends AsyncComponent {
   }
 }
 
-class ExternalIssueActionList extends AsyncComponent {
+class ExternalIssueActions extends AsyncComponent {
   static propTypes = {
     group: PropTypes.object.isRequired,
+    integration: PropTypes.object.isRequired,
   };
 
   constructor(props, context) {
     super(props, context);
     this.state.showModal = false;
-    this.state.selectedIntegration = null;
-    this.state.action = null;
+    this.state.selectedIntegration = this.props.integration;
+    this.state.action = 'create';
+    this.state.issue = this.getIssue();
   }
 
-  getEndpoints() {
-    let {group} = this.props;
-    return [['integrations', `/groups/${group.id}/integrations/`]];
+  getIssue() {
+    return this.props.integration && this.props.integration.externalIssues
+      ? this.props.integration.externalIssues[0]
+      : null;
+  }
+
+  deleteIssue(issueId) {
+    let {group, integration} = this.props;
+    let endpoint = `/groups/${group.id}/integrations/${integration.id}/?externalIssue=${issueId}`;
+    this.api.request(endpoint, {
+      method: 'DELETE',
+      success: (data, _, jqXHR) => {
+        addSuccessMessage(t('Successfully unlinked issue.'));
+        this.setState({
+          issue: null,
+        });
+      },
+      error: error => {
+        addErrorMessage(t('Unable to unlink issue.'));
+      },
+    });
   }
 
-  openModal = (integration, action) => {
+  openModal = () => {
+    const {integration} = this.props;
     this.setState({
       showModal: true,
       selectedIntegration: integration,
-      action,
+      action: 'create',
     });
   };
 
-  closeModal = () => {
+  closeModal = data => {
     this.setState({
       showModal: false,
-      selectedIntegration: null,
       action: null,
+      issue: data.id ? data : null,
     });
   };
 
-  renderEmpty() {
-    // TODO(jess): This should link to org integrations page
-    return <MenuItem>{t('No integrations configured')}</MenuItem>;
-  }
+  handleClick = action => {
+    this.setState({action});
+  };
 
   renderBody() {
-    let {action, selectedIntegration, integrations} = this.state;
-    if (!integrations || !integrations.length) {
-      return this.renderEmpty();
-    }
+    let {action, selectedIntegration, issue} = this.state;
+
     return (
       <React.Fragment>
-        {integrations.map(integration => {
-          return (
-            <React.Fragment key={integration.id}>
-              <MenuItem noAnchor={true}>
-                <a onClick={this.openModal.bind(this, integration, 'link')}>
-                  {tct('Link [provider] issue', {provider: integration.provider.name})}
-                </a>
-              </MenuItem>
-              <MenuItem noAnchor={true}>
-                <a onClick={this.openModal.bind(this, integration, 'create')}>
-                  {tct('Create [provider] issue', {provider: integration.provider.name})}
-                </a>
-              </MenuItem>
-            </React.Fragment>
-          );
-        })}
+        <IssueSyncListElement
+          onOpen={this.openModal}
+          externalIssueLink={issue ? issue.url : null}
+          externalIssueId={issue ? issue.id : null}
+          onClose={this.deleteIssue.bind(this)}
+          integrationType={selectedIntegration.provider.key}
+        />
         {selectedIntegration && (
           <Modal
             show={this.state.showModal}
@@ -234,13 +243,34 @@ class ExternalIssueActionList extends AsyncComponent {
             <Modal.Header closeButton>
               <Modal.Title>{`${selectedIntegration.provider.name} Issue`}</Modal.Title>
             </Modal.Header>
+            <ul
+              className="nav nav-tabs"
+              style={{borderBottom: '1px solid rgb(221, 221, 221)'}}
+            >
+              <li className={action === 'create' ? 'active' : ''}>
+                <a onClick={() => this.handleClick('create')}>{t('Create')}</a>
+              </li>
+              <li className={action === 'link' ? 'active' : ''}>
+                <a onClick={() => this.handleClick('link')}>{t('Link')}</a>
+              </li>
+            </ul>
             <Modal.Body>
-              <ExternalIssueForm
-                group={this.props.group}
-                integration={selectedIntegration}
-                action={action}
-                onSubmitSuccess={this.closeModal}
-              />
+              {action === 'create' && (
+                <ExternalIssueForm
+                  group={this.props.group}
+                  integration={selectedIntegration}
+                  action={'create'}
+                  onSubmitSuccess={this.closeModal}
+                />
+              )}
+              {action === 'link' && (
+                <ExternalIssueForm
+                  group={this.props.group}
+                  integration={selectedIntegration}
+                  action={'link'}
+                  onSubmitSuccess={this.closeModal}
+                />
+              )}
             </Modal.Body>
           </Modal>
         )}
@@ -249,22 +279,4 @@ class ExternalIssueActionList extends AsyncComponent {
   }
 }
 
-class ExternalIssueActions extends React.Component {
-  static propTypes = {
-    group: PropTypes.object.isRequired,
-  };
-
-  render() {
-    return (
-      <DropdownLink
-        title={t('External Issues')}
-        caret={true}
-        className="btn btn-default btn-sm"
-      >
-        <ExternalIssueActionList group={this.props.group} />
-      </DropdownLink>
-    );
-  }
-}
-
 export default ExternalIssueActions;
diff --git a/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx b/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx
new file mode 100644
index 0000000000..623dfd2443
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx
@@ -0,0 +1,78 @@
+import React from 'react';
+
+import AsyncComponent from 'app/components/asyncComponent';
+import ExternalIssueActions from 'app/components/group/externalIssueActions';
+import IssueSyncListElement from 'app/components/issueSyncListElement';
+import SentryTypes from 'app/sentryTypes';
+import PluginActions from 'app/components/group/pluginActions';
+
+class ExternalIssueList extends AsyncComponent {
+  static propTypes = {
+    group: SentryTypes.Group.isRequired,
+  };
+
+  getEndpoints() {
+    let {group} = this.props;
+    return [['integrations', `/groups/${group.id}/integrations/`]];
+  }
+
+  renderIntegrationIssues(integrations) {
+    const {group} = this.props;
+    const externalIssues = [];
+
+    if (!integrations || !integrations.length) return null;
+
+    integrations.forEach(integration => {
+      externalIssues.push(
+        <ExternalIssueActions
+          key={integration.id}
+          integration={integration}
+          group={group}
+        />
+      );
+    });
+
+    return externalIssues;
+  }
+
+  renderPluginIssues() {
+    const {group} = this.props;
+
+    return group.pluginIssues && group.pluginIssues.length
+      ? group.pluginIssues.map((plugin, i) => {
+          return <PluginActions group={group} plugin={plugin} key={i} />;
+        })
+      : null;
+  }
+
+  renderPluginActions() {
+    const {group} = this.props;
+
+    return group.pluginActions && group.pluginActions.length
+      ? group.pluginActions.map((plugin, i) => {
+          return (
+            <IssueSyncListElement externalIssueLink={plugin[1]} key={i}>
+              {plugin[0]}
+            </IssueSyncListElement>
+          );
+        })
+      : null;
+  }
+
+  renderBody() {
+    return (
+      <React.Fragment>
+        <div className="m-b-2">
+          <h6>
+            <span>Linked Issues</span>
+          </h6>
+          {this.renderIntegrationIssues(this.state.integrations)}
+          {this.renderPluginIssues()}
+          {this.renderPluginActions()}
+        </div>
+      </React.Fragment>
+    );
+  }
+}
+
+export default ExternalIssueList;
diff --git a/src/sentry/static/sentry/app/components/group/pluginActions.jsx b/src/sentry/static/sentry/app/components/group/pluginActions.jsx
new file mode 100644
index 0000000000..8e2c9ffb58
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/group/pluginActions.jsx
@@ -0,0 +1,171 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import createReactClass from 'create-react-class';
+import Modal from 'react-bootstrap/lib/Modal';
+import ApiMixin from 'app/mixins/apiMixin';
+import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
+import GroupState from 'app/mixins/groupState';
+import plugins from 'app/plugins';
+import {t} from 'app/locale';
+import SentryTypes from 'app/sentryTypes';
+import IssueSyncListElement from 'app/components/issueSyncListElement';
+
+const PluginActions = createReactClass({
+  displayName: 'PluginActions',
+
+  propTypes: {
+    group: SentryTypes.Group.isRequired,
+    plugin: PropTypes.object.isRequired,
+  },
+
+  mixins: [ApiMixin, GroupState],
+
+  getInitialState() {
+    return {
+      showModal: false,
+      actionType: null,
+      issue: null,
+      pluginLoading: false,
+    };
+  },
+
+  componentDidMount() {
+    this.loadPlugin(this.props.plugin);
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (this.props.plugin.id !== nextProps.plugin.id) {
+      this.loadPlugin(nextProps.plugin);
+    }
+  },
+
+  ACTION_LABELS: {
+    create: t('Create New Issue'),
+    link: t('Link with Existing Issue'),
+    unlink: t('Unlink Issue'),
+  },
+
+  deleteIssue() {
+    const plugin = {
+      ...this.props.plugin,
+      issue: null,
+    };
+    // override plugin.issue so that 'create/link' Modal
+    // doesn't think the plugin still has an issue linked
+    const endpoint = `/issues/${this.props.group.id}/plugins/${plugin.slug}/unlink/`;
+    this.api.request(endpoint, {
+      success: data => {
+        this.loadPlugin(plugin);
+        addSuccessMessage(t('Successfully unlinked issue.'));
+      },
+      error: error => {
+        addErrorMessage(t('Unable to unlink issue'));
+      },
+    });
+  },
+
+  loadPlugin(data) {
+    this.setState(
+      {
+        pluginLoading: true,
+      },
+      () => {
+        plugins.load(data, () => {
+          let issue = data.issue || null;
+          this.setState({pluginLoading: false, issue});
+        });
+      }
+    );
+  },
+
+  openModal() {
+    this.setState({
+      showModal: true,
+      actionType: 'create',
+    });
+  },
+
+  closeModal(data) {
+    this.setState({
+      issue: data.id && data.link ? {issue_id: data.id, url: data.link} : null,
+      showModal: false,
+    });
+  },
+
+  handleClick(evt) {
+    this.setState({
+      actionType: evt.target.id,
+    });
+  },
+
+  render() {
+    const {actionType, issue} = this.state;
+    const plugin = {...this.props.plugin, issue};
+
+    return (
+      <React.Fragment>
+        <IssueSyncListElement
+          onOpen={this.openModal}
+          externalIssueId={issue ? issue.issue_id : null}
+          externalIssueLink={issue ? issue.url : null}
+          onClose={this.deleteIssue}
+          integrationType={plugin.id}
+        />
+        <Modal
+          show={this.state.showModal}
+          onHide={this.closeModal}
+          animation={false}
+          backdrop="static"
+          enforceFocus={false}
+        >
+          <Modal.Header closeButton>
+            <Modal.Title>{`${plugin.name || plugin.title} Issue`}</Modal.Title>
+          </Modal.Header>
+          <ul
+            className="nav nav-tabs"
+            style={{borderBottom: '1px solid rgb(221, 221, 221)'}}
+          >
+            <li className={actionType == 'create' ? 'active' : ''}>
+              <a id="create" onClick={this.handleClick}>
+                Create
+              </a>
+            </li>
+            <li className={actionType == 'link' ? 'active' : ''}>
+              <a id="link" onClick={this.handleClick}>
+                Link
+              </a>
+            </li>
+          </ul>
+          {this.state.showModal && actionType == 'create' &&
+            !this.state.pluginLoading && (
+              <Modal.Body>
+                {plugins.get(plugin).renderGroupActions({
+                  plugin,
+                  group: this.getGroup(),
+                  project: this.getProject(),
+                  organization: this.getOrganization(),
+                  actionType: 'create',
+                  onSuccess: this.closeModal,
+                })}
+              </Modal.Body>
+            )}
+          {this.state.showModal && actionType == 'link' &&
+            !this.state.pluginLoading && (
+              <Modal.Body>
+                {plugins.get(plugin).renderGroupActions({
+                  plugin,
+                  group: this.getGroup(),
+                  project: this.getProject(),
+                  organization: this.getOrganization(),
+                  actionType: 'link',
+                  onSuccess: this.closeModal,
+                })}
+              </Modal.Body>
+            )}
+        </Modal>
+      </React.Fragment>
+    );
+  },
+});
+
+export default PluginActions;
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index d3636323b4..887cb5fb7b 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -7,6 +7,7 @@ import classNames from 'classnames';
 import SentryTypes from 'app/sentryTypes';
 import ApiMixin from 'app/mixins/apiMixin';
 import SuggestedOwners from 'app/components/group/suggestedOwners';
+import Feature from 'app/components/feature';
 import GroupParticipants from 'app/components/group/participants';
 import GroupReleaseStats from 'app/components/group/releaseStats';
 import ProjectState from 'app/mixins/projectState';
@@ -17,6 +18,8 @@ import LoadingError from 'app/components/loadingError';
 import {t, tct} from 'app/locale';
 import withEnvironment from 'app/utils/withEnvironment';
 
+import ExternalIssueList from 'app/components/group/externalIssuesList';
+
 const GroupSidebar = createReactClass({
   displayName: 'GroupSidebar',
 
@@ -223,6 +226,9 @@ const GroupSidebar = createReactClass({
     return (
       <div className="group-stats">
         <SuggestedOwners event={this.props.event} />
+        <Feature feature={['internal-catchall']}>
+          <ExternalIssueList group={this.props.group} />
+        </Feature>
         <GroupReleaseStats
           group={this.props.group}
           allEnvironments={this.state.allEnvironmentsGroupData}
diff --git a/src/sentry/static/sentry/app/components/issueSyncListElement.jsx b/src/sentry/static/sentry/app/components/issueSyncListElement.jsx
index fcd382eff6..7f81b04bae 100644
--- a/src/sentry/static/sentry/app/components/issueSyncListElement.jsx
+++ b/src/sentry/static/sentry/app/components/issueSyncListElement.jsx
@@ -3,60 +3,102 @@ import React from 'react';
 import styled from 'react-emotion';
 import InlineSvg from 'app/components/inlineSvg';
 import space from 'app/styles/space';
+import {capitalize} from 'lodash';
 
 class IssueSyncElement extends React.Component {
   static propTypes = {
     externalIssueLink: PropTypes.string,
     externalIssueId: PropTypes.string,
+    onOpen: PropTypes.func,
     onClose: PropTypes.func,
-    integrationType: PropTypes.oneOf(['github', 'jira', 'vsts']),
-  };
-
-  static defaultProps = {
-    extenalIssueLink: '#',
+    integrationType: PropTypes.string,
   };
 
   isLinked() {
     return this.props.externalIssueLink && this.props.externalIssueId;
   }
 
+  handleDelete = evt => {
+    return this.props.onClose(this.props.externalIssueId);
+  };
+
+  getPrefix() {
+    switch (this.props.integrationType) {
+      case 'github':
+        return 'GH-';
+      case 'github_enterprise':
+        return 'GHE-';
+      default:
+        return this.getPrettyName() + '-';
+    }
+  }
+
   getIcon() {
     switch (this.props.integrationType) {
       case 'github':
         return <IntegrationIcon src="icon-github" />;
+      case 'github_enterprise':
+        return <IntegrationIcon src="icon-github" />;
       case 'jira':
         return <IntegrationIcon src="icon-jira" />;
       case 'vsts':
         return <IntegrationIcon src="icon-vsts" />;
       default:
-        return null;
+        return <IntegrationIcon src="icon-generic-box" />;
     }
   }
 
-  getText() {
-    return this.isLinked() ? (
-      <IntegrationLink href={this.props.externalIssueLink}>
-        {this.props.externalIssueId}
-      </IntegrationLink>
-    ) : (
-      <IntegrationLink href={'#'}>
-        Link <IntegrationName>{this.props.integrationType}</IntegrationName> Issue
+  getPrettyName() {
+    const type = this.props.integrationType;
+    switch (type) {
+      case 'github':
+        return 'GitHub';
+      case 'github_enterprise':
+        return 'GitHub Enterprise';
+      case 'vsts':
+        return 'VSTS';
+      default:
+        return capitalize(type);
+    }
+  }
+
+  getLink() {
+    return (
+      <IntegrationLink
+        href={this.props.externalIssueLink}
+        onClick={!this.isLinked() ? this.props.onOpen : undefined}
+      >
+        {this.getText()}
       </IntegrationLink>
     );
   }
 
+  getText() {
+    if (this.props.children) {
+      return this.props.children;
+    }
+    if (this.props.externalIssueId) {
+      return `${this.getPrefix()}${this.props.externalIssueId}`;
+    } else {
+      return `Link ${this.getPrettyName()} Issue`;
+    }
+  }
+
   render() {
     return (
       <IssueSyncListElementContainer>
         <div>
           {this.getIcon()}
-          {this.getText()}
+          {this.getLink()}
         </div>
-        <IconClose
-          src="icon-close"
-          onClick={this.props.onClose}
-          isLinked={this.isLinked()}
-        />
+        {this.props.onOpen &&
+          this.props.onClose && (
+            <OpenCloseIcon
+              src="icon-close"
+              onClick={this.isLinked() ? this.handleDelete : this.props.onOpen}
+              isLinked={this.isLinked()}
+            />
+          )}
       </IssueSyncListElementContainer>
     );
   }
@@ -67,13 +109,16 @@ const IssueSyncListElementContainer = styled('div')`
   display: flex;
   align-items: center;
   justify-content: space-between;
-  padding: ${space(1.5)} ${space(1)};
+  &:not(:last-child) {
+    padding-bottom: ${space(2)};
+  }
 `;
 
 const IntegrationIcon = styled(InlineSvg)`
   color: ${p => p.theme.gray4};
   width: ${space(3)};
   height: ${space(3)};
+  cursor: pointer;
 `;
 
 const IntegrationLink = styled('a')`
@@ -82,6 +127,7 @@ const IntegrationLink = styled('a')`
   margin-left: ${space(1)};
   color: ${p => p.theme.gray4};
   border-bottom: 1px solid ${p => p.theme.gray4};
+  cursor: pointer;
 
   &,
   &:hover {
@@ -89,14 +135,11 @@ const IntegrationLink = styled('a')`
   }
 `;
 
-const IntegrationName = styled('span')`
-  text-transform: capitalize;
-`;
-
-const IconClose = styled(InlineSvg)`
+const OpenCloseIcon = styled(InlineSvg)`
   height: 1.25rem;
   color: ${p => p.theme.gray4};
   transition: 0.2s transform;
+  cursor: pointer;
   ${p => (p.isLinked ? '' : 'transform: rotate(45deg) scale(0.75);')};
 `;
 
diff --git a/src/sentry/static/sentry/app/icons/icon-generic-box.svg b/src/sentry/static/sentry/app/icons/icon-generic-box.svg
new file mode 100644
index 0000000000..760851280e
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-generic-box.svg
@@ -0,0 +1,9 @@
+<svg viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
+  <g fill="currentColor" fill-rule="evenodd">
+    <path d="M16 32C7.163 32 0 24.837 0 16S7.163 0 16 0s16 7.163 16 16-7.163 16-16 16zm1.25-26.485a2.784 2.784 0 0 0-2.5 0L7.548 9.153A2.82 2.82 0 0 0 6 11.673v8.654a2.818 2.818 0 0 0 1.536 2.528l7.203 3.638c.79.4 1.722.4 2.513 0l7.2-3.637A2.82 2.82 0 0 0 26 20.336v-8.663a2.82 2.82 0 0 0-1.55-2.521l-7.2-3.637z"/>
+    <g fill-rule="nonzero" fill="currentColor">
+      <path d="M25.557 9.163a1 1 0 1 1 .899 1.787l-10.007 5.034a1 1 0 0 1-.9 0l-9.945-5.035a1 1 0 0 1 .903-1.785l9.494 4.807 9.556-4.808z"/>
+      <path d="M17 27.758a1 1 0 0 1-2 0V15.09a1 1 0 1 1 2 0v12.667z"/>
+    </g>
+  </g>
+</svg>
diff --git a/src/sentry/static/sentry/app/plugins/components/issueActions.jsx b/src/sentry/static/sentry/app/plugins/components/issueActions.jsx
index e3817ae122..86de5b6c1e 100644
--- a/src/sentry/static/sentry/app/plugins/components/issueActions.jsx
+++ b/src/sentry/static/sentry/app/plugins/components/issueActions.jsx
@@ -9,6 +9,7 @@ import PluginComponentBase from 'app/components/bases/pluginComponentBase';
 import {t} from 'app/locale';
 
 class IssueActions extends PluginComponentBase {
+
   constructor(props) {
     super(props);
 
@@ -50,6 +51,8 @@ class IssueActions extends PluginComponentBase {
     }
   }
 
+
+
   getPluginCreateEndpoint() {
     return (
       '/issues/' + this.getGroup().id + '/plugins/' + this.props.plugin.slug + '/create/'
@@ -132,9 +135,9 @@ class IssueActions extends PluginComponentBase {
     }
   }
 
-  onSuccess() {
+  onSuccess(data) {
     GroupActions.updateSuccess(null, [this.getGroup().id], {stale: true});
-    this.props.onSuccess && this.props.onSuccess();
+    this.props.onSuccess && this.props.onSuccess(data);
   }
 
   createIssue() {
diff --git a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
index 192bc3ea23..1ad8940637 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
@@ -9,8 +9,6 @@ import ApiMixin from 'app/mixins/apiMixin';
 import DropdownLink from 'app/components/dropdownLink';
 import GroupActions from 'app/actions/groupActions';
 import GroupState from 'app/mixins/groupState';
-import ErrorBoundary from 'app/components/errorBoundary';
-import ExternalIssueActions from 'app/components/group/externalIssues';
 import HookStore from 'app/stores/hookStore';
 import IndicatorStore from 'app/stores/indicatorStore';
 import IssuePluginActions from 'app/components/group/issuePluginActions';
@@ -272,7 +270,7 @@ const GroupDetailsActions = createReactClass({
           </div>
         )}
 
-        {group.pluginActions.length > 1 ? (
+        {group.pluginActions.length > 1 && !orgFeatures.has('internal-catchall') ? (
           <div className="btn-group more">
             <DropdownLink className="btn btn-default btn-sm" title={t('More')}>
               {group.pluginActions.map((action, actionIdx) => {
@@ -286,6 +284,7 @@ const GroupDetailsActions = createReactClass({
           </div>
         ) : (
           group.pluginActions.length !== 0 &&
+          !orgFeatures.has('internal-catchall') &&
           group.pluginActions.map((action, actionIdx) => {
             return (
               <div className="btn-group" key={actionIdx}>
@@ -297,6 +296,7 @@ const GroupDetailsActions = createReactClass({
           })
         )}
         {group.pluginIssues &&
+          !orgFeatures.has('internal-catchall') &&
           group.pluginIssues.map(plugin => {
             return <IssuePluginActions key={plugin.slug} plugin={plugin} />;
           })}
@@ -312,11 +312,6 @@ const GroupDetailsActions = createReactClass({
             </Link>
           </GuideAnchor>
         )}
-        {orgFeatures.has('internal-catchall') && (
-          <ErrorBoundary mini>
-            <ExternalIssueActions group={group} />
-          </ErrorBoundary>
-        )}
       </div>
     );
   },
diff --git a/src/sentry/static/sentry/app/views/groupDetails/header.jsx b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
index df09fcd1e4..84a461129f 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/header.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
@@ -117,14 +117,14 @@ const GroupHeader = createReactClass({
                 </span>
               )}
               {group.annotations.map((annotation, i) => {
-                return (
-                  <span
-                    className="event-annotation"
-                    key={i}
-                    dangerouslySetInnerHTML={{__html: annotation}}
-                  />
-                );
-              })}
+                  return (
+                    <span
+                      className="event-annotation"
+                      key={i}
+                      dangerouslySetInnerHTML={{__html: annotation}}
+                    />
+                  );
+                })}
             </div>
           </div>
           <div className="col-sm-5 stats">
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 6a0c66ba92..6fb840f810 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -512,6 +512,7 @@ window.TestStubs = {
       canAdd: true,
       canAddProject: false,
       config: [],
+      externalIssues: [],
       features: [],
       setupDialog: {
         url: '/github-integration-setup-uri/',
diff --git a/tests/js/spec/components/__snapshots__/issueSyncListElement.spec.jsx.snap b/tests/js/spec/components/__snapshots__/issueSyncListElement.spec.jsx.snap
new file mode 100644
index 0000000000..3533c184d9
--- /dev/null
+++ b/tests/js/spec/components/__snapshots__/issueSyncListElement.spec.jsx.snap
@@ -0,0 +1,14 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`AlertLink renders 1`] = `
+<IssueSyncListElementContainer>
+  <div>
+    <IntegrationIcon
+      src="icon-github"
+    />
+    <IntegrationLink>
+      Link GitHub Issue
+    </IntegrationLink>
+  </div>
+</IssueSyncListElementContainer>
+`;
diff --git a/tests/js/spec/components/group/__snapshots__/externalIssueActions.spec.jsx.snap b/tests/js/spec/components/group/__snapshots__/externalIssueActions.spec.jsx.snap
new file mode 100644
index 0000000000..2ba555ba6f
--- /dev/null
+++ b/tests/js/spec/components/group/__snapshots__/externalIssueActions.spec.jsx.snap
@@ -0,0 +1,291 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`ExternalIssueActions with an external issue linked renders 1`] = `
+<IssueSyncElement
+  externalIssueId="100"
+  externalIssueLink="https://github.com/MeredithAnya/testing/issues/2"
+  integrationType="github"
+  onClose={[Function]}
+  onOpen={[Function]}
+>
+  <IssueSyncListElementContainer>
+    <div
+      className="css-43gy94-IssueSyncListElementContainer e1vaar1z0"
+    >
+      <div>
+        <IntegrationIcon
+          src="icon-github"
+        >
+          <InlineSvg
+            className="css-qf3g6n-IntegrationIcon e1vaar1z1"
+            src="icon-github"
+          >
+            <StyledSvg
+              className="css-qf3g6n-IntegrationIcon e1vaar1z1"
+              height="1em"
+              viewBox={Object {}}
+              width="1em"
+            >
+              <svg
+                className="e1vaar1z1 css-18jkql6-StyledSvg-IntegrationIcon e2idor0"
+                height="1em"
+                viewBox={Object {}}
+                width="1em"
+              >
+                <use
+                  href="#test"
+                  xlinkHref="#test"
+                />
+              </svg>
+            </StyledSvg>
+          </InlineSvg>
+        </IntegrationIcon>
+        <IntegrationLink
+          href="https://github.com/MeredithAnya/testing/issues/2"
+        >
+          <a
+            className="css-1ado49n-IntegrationLink e1vaar1z2"
+            href="https://github.com/MeredithAnya/testing/issues/2"
+          >
+            GH-100
+          </a>
+        </IntegrationLink>
+      </div>
+      <OpenCloseIcon
+        isLinked="100"
+        onClick={[Function]}
+        src="icon-close"
+      >
+        <InlineSvg
+          className="css-wpxxiu-OpenCloseIcon e1vaar1z3"
+          isLinked="100"
+          onClick={[Function]}
+          src="icon-close"
+        >
+          <StyledSvg
+            className="css-wpxxiu-OpenCloseIcon e1vaar1z3"
+            height="1em"
+            isLinked="100"
+            onClick={[Function]}
+            viewBox={Object {}}
+            width="1em"
+          >
+            <svg
+              className="e1vaar1z3 css-ic08m8-StyledSvg-OpenCloseIcon e2idor0"
+              height="1em"
+              onClick={[Function]}
+              viewBox={Object {}}
+              width="1em"
+            >
+              <use
+                href="#test"
+                xlinkHref="#test"
+              />
+            </svg>
+          </StyledSvg>
+        </InlineSvg>
+      </OpenCloseIcon>
+    </div>
+  </IssueSyncListElementContainer>
+</IssueSyncElement>
+`;
+
+exports[`ExternalIssueActions with no external issues linked renders 1`] = `
+<ExternalIssueActions
+  group={
+    Object {
+      "assignedTo": null,
+      "id": "1",
+      "project": Object {
+        "id": "2",
+        "slug": "project-slug",
+      },
+      "stats": Object {
+        "24h": Array [
+          Array [
+            1517281200,
+            2,
+          ],
+          Array [
+            1517310000,
+            1,
+          ],
+        ],
+        "30d": Array [
+          Array [
+            1514764800,
+            1,
+          ],
+          Array [
+            1515024000,
+            122,
+          ],
+        ],
+      },
+      "tags": Array [],
+    }
+  }
+  integration={
+    Object {
+      "configData": Object {},
+      "configOrganization": Array [],
+      "configProject": Array [],
+      "domainName": "gtithub.com/test-integration",
+      "externalIssues": Array [],
+      "icon": "http://example.com/integration_icon.png",
+      "id": "1",
+      "name": "Test Integration",
+      "projects": Array [],
+      "provider": Object {
+        "canAdd": true,
+        "canAddProject": false,
+        "features": Array [],
+        "key": "github",
+        "name": "GitHub",
+      },
+    }
+  }
+>
+  <IssueSyncElement
+    externalIssueId={null}
+    externalIssueLink={null}
+    integrationType="github"
+    onClose={[Function]}
+    onOpen={[Function]}
+  >
+    <IssueSyncListElementContainer>
+      <div
+        className="css-43gy94-IssueSyncListElementContainer e1vaar1z0"
+      >
+        <div>
+          <IntegrationIcon
+            src="icon-github"
+          >
+            <InlineSvg
+              className="css-qf3g6n-IntegrationIcon e1vaar1z1"
+              src="icon-github"
+            >
+              <StyledSvg
+                className="css-qf3g6n-IntegrationIcon e1vaar1z1"
+                height="1em"
+                viewBox={Object {}}
+                width="1em"
+              >
+                <svg
+                  className="e1vaar1z1 css-18jkql6-StyledSvg-IntegrationIcon e2idor0"
+                  height="1em"
+                  viewBox={Object {}}
+                  width="1em"
+                >
+                  <use
+                    href="#test"
+                    xlinkHref="#test"
+                  />
+                </svg>
+              </StyledSvg>
+            </InlineSvg>
+          </IntegrationIcon>
+          <IntegrationLink
+            href={null}
+            onClick={[Function]}
+          >
+            <a
+              className="css-1ado49n-IntegrationLink e1vaar1z2"
+              href={null}
+              onClick={[Function]}
+            >
+              Link GitHub Issue
+            </a>
+          </IntegrationLink>
+        </div>
+        <OpenCloseIcon
+          isLinked={null}
+          onClick={[Function]}
+          src="icon-close"
+        >
+          <InlineSvg
+            className="css-1b9vh5k-OpenCloseIcon e1vaar1z3"
+            isLinked={null}
+            onClick={[Function]}
+            src="icon-close"
+          >
+            <StyledSvg
+              className="css-1b9vh5k-OpenCloseIcon e1vaar1z3"
+              height="1em"
+              isLinked={null}
+              onClick={[Function]}
+              viewBox={Object {}}
+              width="1em"
+            >
+              <svg
+                className="e1vaar1z3 css-u4m7dx-StyledSvg-OpenCloseIcon e2idor0"
+                height="1em"
+                onClick={[Function]}
+                viewBox={Object {}}
+                width="1em"
+              >
+                <use
+                  href="#test"
+                  xlinkHref="#test"
+                />
+              </svg>
+            </StyledSvg>
+          </InlineSvg>
+        </OpenCloseIcon>
+      </div>
+    </IssueSyncListElementContainer>
+  </IssueSyncElement>
+  <Modal
+    animation={false}
+    autoFocus={true}
+    backdrop="static"
+    bsClass="modal"
+    dialogComponentClass={[Function]}
+    enforceFocus={false}
+    keyboard={true}
+    manager={
+      ModalManager {
+        "add": [Function],
+        "containers": Array [],
+        "data": Array [],
+        "handleContainerOverflow": true,
+        "hideSiblingNodes": true,
+        "isTopModal": [Function],
+        "modals": Array [],
+        "remove": [Function],
+      }
+    }
+    onHide={[Function]}
+    renderBackdrop={[Function]}
+    restoreFocus={true}
+    show={false}
+  >
+    <Modal
+      autoFocus={true}
+      backdrop="static"
+      backdropClassName="modal-backdrop"
+      containerClassName="modal-open"
+      enforceFocus={false}
+      keyboard={true}
+      manager={
+        ModalManager {
+          "add": [Function],
+          "containers": Array [],
+          "data": Array [],
+          "handleContainerOverflow": true,
+          "hideSiblingNodes": true,
+          "isTopModal": [Function],
+          "modals": Array [],
+          "remove": [Function],
+        }
+      }
+      onEntering={[Function]}
+      onExited={[Function]}
+      onHide={[Function]}
+      renderBackdrop={[Function]}
+      restoreFocus={true}
+      show={false}
+    />
+  </Modal>
+</ExternalIssueActions>
+`;
diff --git a/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap b/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap
index 649837a7d0..b9fbc54ee9 100644
--- a/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap
+++ b/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap
@@ -14,6 +14,70 @@ exports[`GroupSidebar renders with tags renders 1`] = `
       }
     }
   />
+  <FeatureContainer
+    feature={
+      Array [
+        "internal-catchall",
+      ]
+    }
+  >
+    <ExternalIssueList
+      group={
+        Object {
+          "assignedTo": null,
+          "id": "1",
+          "project": Object {
+            "id": "2",
+            "slug": "project-slug",
+          },
+          "stats": Object {
+            "24h": Array [
+              Array [
+                1517281200,
+                2,
+              ],
+              Array [
+                1517310000,
+                1,
+              ],
+            ],
+            "30d": Array [
+              Array [
+                1514764800,
+                1,
+              ],
+              Array [
+                1515024000,
+                122,
+              ],
+            ],
+          },
+          "tags": Array [
+            Object {
+              "canDelete": true,
+              "key": "browser",
+              "name": "Browser",
+            },
+            Object {
+              "canDelete": true,
+              "key": "device",
+              "name": "Device",
+            },
+            Object {
+              "canDelete": true,
+              "key": "url",
+              "name": "URL",
+            },
+            Object {
+              "canDelete": false,
+              "key": "environment",
+              "name": "Environment",
+            },
+          ],
+        }
+      }
+    />
+  </FeatureContainer>
   <GroupReleaseStats
     allEnvironments={
       Object {
diff --git a/tests/js/spec/components/group/externalIssueActions.spec.jsx b/tests/js/spec/components/group/externalIssueActions.spec.jsx
new file mode 100644
index 0000000000..0d17168686
--- /dev/null
+++ b/tests/js/spec/components/group/externalIssueActions.spec.jsx
@@ -0,0 +1,79 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import ExternalIssueActions from 'app/components/group/externalIssueActions';
+
+describe('ExternalIssueActions', function() {
+  let group = TestStubs.Group();
+
+  describe('with no external issues linked', function() {
+    let integration = TestStubs.GitHubIntegration({externalIssues: []});
+    let wrapper = mount(
+      <ExternalIssueActions group={group} integration={integration} />,
+      TestStubs.routerContext()
+    );
+    it('renders', function() {
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('renders Link GitHub Issue when no issues currently linked', function() {
+      expect(wrapper.find('IntegrationLink a').text()).toEqual('Link GitHub Issue');
+    });
+
+    describe('opens modal', function() {
+      MockApiClient.addMockResponse({
+        url: '/groups/1/integrations/1/?action=create',
+        body: {createIssueConfig: []},
+      });
+      it('opens when clicking text', function() {
+        wrapper.find('IntegrationLink a').simulate('click');
+        expect(
+          wrapper
+            .find('Modal')
+            .first()
+            .prop('show')
+        ).toBe(true);
+      });
+
+      it('opens when clicking +', function() {
+        wrapper.find('OpenCloseIcon').simulate('click');
+        expect(
+          wrapper
+            .find('Modal')
+            .first()
+            .prop('show')
+        ).toBe(true);
+      });
+    });
+  });
+
+  describe('with an external issue linked', function() {
+    let externalIssues = [
+      {id: '100', url: 'https://github.com/MeredithAnya/testing/issues/2'},
+    ];
+    let integration = TestStubs.GitHubIntegration({externalIssues});
+    let wrapper = mount(
+      <ExternalIssueActions group={group} integration={integration} />,
+      TestStubs.routerContext()
+    );
+    it('renders', function() {
+      expect(wrapper.find('IssueSyncElement')).toMatchSnapshot();
+    });
+
+    it('renders Link GitHub Issue when no issues currently linked', function() {
+      expect(wrapper.find('IntegrationLink a').text()).toEqual('GH-100');
+    });
+
+    describe('deletes linked issue', function() {
+      MockApiClient.addMockResponse({
+        url: '/groups/1/integrations/1/?externalIssue=100',
+        method: 'DELETE',
+      });
+
+      it('deletes when clicking x', function() {
+        wrapper.find('OpenCloseIcon').simulate('click');
+        expect(wrapper.find('IntegrationLink a').text()).toEqual('Link GitHub Issue');
+      });
+    });
+  });
+});
diff --git a/tests/js/spec/components/issueSyncListElement.spec.jsx b/tests/js/spec/components/issueSyncListElement.spec.jsx
new file mode 100644
index 0000000000..203b91c2d6
--- /dev/null
+++ b/tests/js/spec/components/issueSyncListElement.spec.jsx
@@ -0,0 +1,39 @@
+import React from 'react';
+import {shallow, mount} from 'enzyme';
+import IssueSyncListElement from 'app/components/issueSyncListElement';
+
+describe('AlertLink', function() {
+  it('renders', function() {
+    let wrapper = shallow(<IssueSyncListElement integrationType="github" />);
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('can open', function() {
+    let onOpen = jest.fn();
+    let wrapper = shallow(
+      <IssueSyncListElement integrationType="github" onOpen={onOpen} />
+    );
+    expect(onOpen).not.toHaveBeenCalled();
+    wrapper.find('IntegrationLink').simulate('click');
+    expect(onOpen).toHaveBeenCalled();
+  });
+
+  it('can close', function() {
+    let onClose = jest.fn();
+    let onOpen = jest.fn();
+
+    let wrapper = mount(
+      <IssueSyncListElement
+        integrationType="github"
+        externalIssueLink="github.com/issues/gh-101"
+        externalIssueId="GH-101"
+        onClose={onClose}
+        onOpen={onOpen}
+      />
+    );
+
+    expect(onClose).not.toHaveBeenCalled();
+    wrapper.find('OpenCloseIcon').simulate('click');
+    expect(onClose).toHaveBeenCalled();
+  });
+});
diff --git a/tests/js/spec/components/modals/__snapshots__/integrationDetailsModal.spec.jsx.snap b/tests/js/spec/components/modals/__snapshots__/integrationDetailsModal.spec.jsx.snap
index 9acebcb636..22f3845f86 100644
--- a/tests/js/spec/components/modals/__snapshots__/integrationDetailsModal.spec.jsx.snap
+++ b/tests/js/spec/components/modals/__snapshots__/integrationDetailsModal.spec.jsx.snap
@@ -70,6 +70,7 @@ exports[`IntegrationDetailsModal renders simple integration 1`] = `
           "canAdd": true,
           "canAddProject": false,
           "config": Array [],
+          "externalIssues": Array [],
           "features": Array [],
           "key": "github",
           "metadata": Object {
diff --git a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
index e30bd966ca..a06abbfecf 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
@@ -92,6 +92,7 @@ exports[`OrganizationIntegrations render() with installed integrations Displays
                 "canAdd": true,
                 "canAddProject": false,
                 "config": Array [],
+                "externalIssues": Array [],
                 "features": Array [],
                 "key": "github",
                 "metadata": Object {
diff --git a/tests/sentry/api/endpoints/test_group_integrations.py b/tests/sentry/api/endpoints/test_group_integrations.py
index 94e7c7c96a..937a638d7c 100644
--- a/tests/sentry/api/endpoints/test_group_integrations.py
+++ b/tests/sentry/api/endpoints/test_group_integrations.py
@@ -54,6 +54,7 @@ class GroupIntegrationsTest(APITestCase):
             'externalIssues': [{
                 'description': 'this is an example description',
                 'id': six.text_type(external_issue.id),
+                'url': 'https://example/issues/APP-123',
                 'key': 'APP-123',
                 'title': 'this is an example title'
             }],
diff --git a/tests/sentry/integrations/github/test_issues.py b/tests/sentry/integrations/github/test_issues.py
index 13dd365b6f..0fcecc4f68 100644
--- a/tests/sentry/integrations/github/test_issues.py
+++ b/tests/sentry/integrations/github/test_issues.py
@@ -67,7 +67,7 @@ class GitHubIssueBasicTest(TestCase):
         responses.add(
             responses.POST,
             'https://api.github.com/repos/getsentry/sentry/issues',
-            json={'number': 321, 'title': 'hello', 'body': 'This is the description'}
+            json={'number': 321, 'title': 'hello', 'body': 'This is the description', 'html_url': 'https://github.com/getsentry/sentry/issues/231'}
         )
 
         form_data = {
@@ -80,6 +80,7 @@ class GitHubIssueBasicTest(TestCase):
             'key': 321,
             'description': 'This is the description',
             'title': 'hello',
+            'url': 'https://github.com/getsentry/sentry/issues/231',
             'repo': 'getsentry/sentry',
         }
         request = responses.calls[0].request
@@ -126,7 +127,7 @@ class GitHubIssueBasicTest(TestCase):
         responses.add(
             responses.GET,
             'https://api.github.com/repos/getsentry/sentry/issues/321',
-            json={'number': issue_id, 'title': 'hello', 'body': 'This is the description'}
+            json={'number': issue_id, 'title': 'hello', 'body': 'This is the description', 'html_url': 'https://github.com/getsentry/sentry/issues/231'}
         )
 
         data = {
@@ -139,6 +140,7 @@ class GitHubIssueBasicTest(TestCase):
             'key': issue_id,
             'description': 'This is the description',
             'title': 'hello',
+            'url': 'https://github.com/getsentry/sentry/issues/231',
             'repo': 'getsentry/sentry',
         }
         request = responses.calls[0].request
diff --git a/tests/sentry/integrations/github_enterprise/test_issues.py b/tests/sentry/integrations/github_enterprise/test_issues.py
index 056ad5e7bd..5942ea97a8 100644
--- a/tests/sentry/integrations/github_enterprise/test_issues.py
+++ b/tests/sentry/integrations/github_enterprise/test_issues.py
@@ -73,7 +73,7 @@ class GitHubEnterpriseIssueBasicTest(TestCase):
         responses.add(
             responses.POST,
             'https://35.232.149.196/api/v3/repos/getsentry/sentry/issues',
-            json={'number': 321, 'title': 'hello', 'body': 'This is the description'}
+            json={'number': 321, 'title': 'hello', 'body': 'This is the description', 'html_url': 'https://35.232.149.196/getsentry/sentry/issues/231'}
         )
 
         form_data = {
@@ -86,6 +86,7 @@ class GitHubEnterpriseIssueBasicTest(TestCase):
             'key': 321,
             'description': 'This is the description',
             'title': 'hello',
+            'url': 'https://35.232.149.196/getsentry/sentry/issues/231',
             'repo': 'getsentry/sentry',
         }
         request = responses.calls[0].request
@@ -132,7 +133,7 @@ class GitHubEnterpriseIssueBasicTest(TestCase):
         responses.add(
             responses.GET,
             'https://35.232.149.196/api/v3/repos/getsentry/sentry/issues/321',
-            json={'number': issue_id, 'title': 'hello', 'body': 'This is the description'}
+            json={'number': issue_id, 'title': 'hello', 'body': 'This is the description', 'html_url': 'https://35.232.149.196/getsentry/sentry/issues/231'}
         )
 
         data = {
@@ -145,6 +146,7 @@ class GitHubEnterpriseIssueBasicTest(TestCase):
             'key': issue_id,
             'description': 'This is the description',
             'title': 'hello',
+            'url': 'https://35.232.149.196/getsentry/sentry/issues/231',
             'repo': 'getsentry/sentry',
         }
         request = responses.calls[0].request
