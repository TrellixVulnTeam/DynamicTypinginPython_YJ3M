commit bd2aa6ed68a56a48f305786258157e3b82b6f722
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Oct 2 13:26:13 2019 -0700

    ref(deletions): Nodestore deletions no longer depend on event.data.id (#14900)
    
    Update nodestore deletions code to not depend on the node_id stored in the
    sentry_message database table. Since the node ID is now always a hash
    of the project ID and event UUID we can generate it rather than relying
    on this field being populated in the database. This will allow us to
    stop writing to this field in https://github.com/getsentry/sentry/pull/14725.

diff --git a/src/sentry/deletions/defaults/event.py b/src/sentry/deletions/defaults/event.py
index 9a22c769cd..3b74663af8 100644
--- a/src/sentry/deletions/defaults/event.py
+++ b/src/sentry/deletions/defaults/event.py
@@ -27,9 +27,12 @@ class EventDeletionTask(ModelDeletionTask):
         return relations
 
     def get_child_relations_bulk(self, instance_list):
+        from sentry.models import Event
+
         node_ids = []
         for i in instance_list:
-            node_ids.append(i.data.id)
+            node_id = Event.generate_node_id(i.project_id, i.event_id)
+            node_ids.append(node_id)
             # Unbind the NodeField so it doesn't attempt to get
             # get deleted a second time after NodeDeletionTask
             # runs, when the Event itself is deleted.
diff --git a/tests/sentry/deletions/test_event.py b/tests/sentry/deletions/test_event.py
index 38c8168ff6..6015584f54 100644
--- a/tests/sentry/deletions/test_event.py
+++ b/tests/sentry/deletions/test_event.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry import tagstore
+from sentry import nodestore, tagstore
 from sentry.tagstore.models import EventTag
 from sentry.models import Event, EventAttachment, File, ScheduledDeletion, UserReport
 from sentry.tasks.deletion import run_deletion
@@ -9,9 +9,11 @@ from sentry.testutils import TestCase
 
 class DeleteEventTest(TestCase):
     def test_simple(self):
+        event_id = "a" * 32
         project = self.create_project()
+        node_id = Event.generate_node_id(project.id, event_id)
         group = self.create_group(project=project)
-        event = self.create_event(group=group)
+        event = self.create_event(group=group, event_id=event_id)
         EventAttachment.objects.create(
             event_id=event.event_id,
             project_id=event.project_id,
@@ -36,7 +38,7 @@ class DeleteEventTest(TestCase):
             environment_id=self.environment.id,
             tags=[(tk.key, tv.value)],
         )
-
+        assert nodestore.get(node_id) is not None
         deletion = ScheduledDeletion.schedule(event, days=0)
         deletion.update(in_progress=True)
 
@@ -51,3 +53,5 @@ class DeleteEventTest(TestCase):
             event_id=event.event_id, project_id=project.id
         ).exists()
         assert not EventTag.objects.filter(event_id=event.id).exists()
+
+        assert nodestore.get(node_id) is None
