commit 650952f83f4d0947757f94d384a9856ecdf26ba0
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Oct 4 14:11:39 2018 -0700

    feat(integrations): Github default repo field (#9854)
    
    * github default feild no tst
    
    * Added params
    
    * Aded params for link as well.
    
    * Removed defaultlable from tests
    
    * removed linter error.

diff --git a/src/sentry/integrations/github/issues.py b/src/sentry/integrations/github/issues.py
index 7a1bac2534..55f7814d2e 100644
--- a/src/sentry/integrations/github/issues.py
+++ b/src/sentry/integrations/github/issues.py
@@ -39,8 +39,12 @@ class GitHubIssueBasic(IssueBasicMixin):
             except ApiError as e:
                 raise IntegrationError(self.message_from_error(e))
 
+    def get_persisted_default_config_fields(self):
+        return ['repo']
+
     def get_create_issue_config(self, group, **kwargs):
         fields = super(GitHubIssueBasic, self).get_create_issue_config(group, **kwargs)
+        defaults = self.get_project_defaults(group.project_id)
         try:
             repos = self.get_repositories()
         except ApiError:
@@ -49,7 +53,7 @@ class GitHubIssueBasic(IssueBasicMixin):
             repo_choices = [(repo['identifier'], repo['name']) for repo in repos]
 
         params = kwargs.get('params', {})
-        default_repo = params.get('repo', repo_choices[0][0])
+        default_repo = params.get('repo', defaults.get('repo') or repo_choices[0][0])
 
         # If a repo has been selected outside of the default 100-limit list of
         # repos, stick it onto the front of the list so that it can be
@@ -124,7 +128,8 @@ class GitHubIssueBasic(IssueBasicMixin):
             repo_choices = [(repo['identifier'], repo['name']) for repo in repos]
 
         params = kwargs.get('params', {})
-        default_repo = params.get('repo', repo_choices[0][0])
+        defaults = self.get_project_defaults(group.project_id)
+        default_repo = params.get('repo', defaults.get('repo') or repo_choices[0][0])
 
         # If a repo has been selected outside of the default 100-limit list of
         # repos, stick it onto the front of the list so that it can be
diff --git a/tests/sentry/integrations/github/test_issues.py b/tests/sentry/integrations/github/test_issues.py
index f0a1333954..10281ee9c8 100644
--- a/tests/sentry/integrations/github/test_issues.py
+++ b/tests/sentry/integrations/github/test_issues.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import responses
+import six
 
 from mock import patch
 from exam import fixture
@@ -226,3 +227,69 @@ class GitHubIssueBasicTest(TestCase):
         assert request.headers['Authorization'] == 'token token_1'
         payload = json.loads(request.body)
         assert payload == {'body': 'hello'}
+
+    @responses.activate
+    @patch('sentry.integrations.github.client.get_jwt', return_value='jwt_token_1')
+    def test_default_repo_link_fields(self, mock_get_jwt):
+        responses.add(
+            responses.GET,
+            'https://api.github.com/installation/repositories',
+            json={
+                'repositories': [
+                    {'name': 'sentry', 'full_name': 'getsentry/sentry'}
+                ]
+            },
+        )
+        group = self.create_group()
+        self.create_event(group=group)
+        org_integration = self.integration.org_integration
+        org_integration.config = {
+            'project_issue_defaults': {
+                six.text_type(group.project_id): {'repo': 'getsentry/sentry'}
+            }
+        }
+        org_integration.save()
+        fields = self.integration.get_link_issue_config(group)
+        for field in fields:
+            if field['name'] == 'repo':
+                repo_field = field
+                break
+        assert repo_field['default'] == 'getsentry/sentry'
+
+    @responses.activate
+    @patch('sentry.integrations.github.client.get_jwt', return_value='jwt_token_1')
+    def test_default_repo_create_fields(self, mock_get_jwt):
+        responses.add(
+            responses.GET,
+            'https://api.github.com/installation/repositories',
+            json={
+                'repositories': [
+                    {'name': 'sentry', 'full_name': 'getsentry/sentry'}
+                ]
+            },
+        )
+        responses.add(
+            responses.GET,
+            'https://api.github.com/repos/getsentry/sentry/assignees',
+            json=[{'login': 'MeredithAnya'}]
+        )
+        responses.add(
+            responses.POST,
+            'https://api.github.com/installations/github_external_id/access_tokens',
+            json={'token': 'token_1', 'expires_at': '2018-10-11T22:14:10Z'}
+        )
+        group = self.create_group()
+        self.create_event(group=group)
+        org_integration = self.integration.org_integration
+        org_integration.config = {
+            'project_issue_defaults': {
+                six.text_type(group.project_id): {'repo': 'getsentry/sentry'}
+            }
+        }
+        org_integration.save()
+        fields = self.integration.get_create_issue_config(group)
+        for field in fields:
+            if field['name'] == 'repo':
+                repo_field = field
+                break
+        assert repo_field['default'] == 'getsentry/sentry'
