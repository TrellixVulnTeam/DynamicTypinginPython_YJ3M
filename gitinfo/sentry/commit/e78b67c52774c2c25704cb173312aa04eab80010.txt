commit e78b67c52774c2c25704cb173312aa04eab80010
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Feb 6 13:33:52 2013 -0800

    Adjust public logic to be more focused on private vs public installs (refs GH-767)

diff --git a/docs/config/index.rst b/docs/config/index.rst
index 704bb54382..09ed9db5bb 100644
--- a/docs/config/index.rst
+++ b/docs/config/index.rst
@@ -96,9 +96,10 @@ Authentication
 .. data:: sentry.conf.PUBLIC
     :noindex:
 
-    Should Sentry be default to projects being publicly accessible?
+    Should Sentry make all data publicly accessible? This should **only** be
+    used if you're installing Sentry behind your company's firewall.
 
-    (Users will still need to have an account to view any data)
+    Users will still need to have an account to view any data.
 
     Defaults to ``False``.
 
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 4f577a74eb..8c9f31a809 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -1111,20 +1111,25 @@ class TeamManager(BaseManager):
         """
         from sentry.models import TeamMember
 
-        if not user.is_authenticated():
-            return SortedDict()
+        results = SortedDict()
 
-        qs = TeamMember.objects.filter(
-            user=user,
-            is_active=True,
-        ).select_related('team')
-        if access is not None:
-            qs = qs.filter(type__lte=access)
+        if not user.is_authenticated():
+            return results
 
-        results = SortedDict()
-        for tm in sorted(qs, key=lambda x: x.team.name):
-            team = tm.team
-            team.membership = tm
-            results[team.slug] = team
+        if settings.PUBLIC and access is None:
+            for team in self.order_by('name').iterator():
+                results[team.slug] = team
+        else:
+            qs = TeamMember.objects.filter(
+                user=user,
+                is_active=True,
+            ).select_related('team')
+            if access is not None:
+                qs = qs.filter(type__lte=access)
+
+            for tm in sorted(qs, key=lambda x: x.team.name):
+                team = tm.team
+                team.membership = tm
+                results[team.slug] = team
 
         return results
diff --git a/src/sentry/models.py b/src/sentry/models.py
index 59df5abd56..907fe7ff61 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -162,7 +162,7 @@ class Project(Model):
     name = models.CharField(max_length=200)
     owner = models.ForeignKey(User, related_name="sentry_owned_project_set", null=True)
     team = models.ForeignKey(Team, null=True)
-    public = models.BooleanField(default=settings.ALLOW_PUBLIC_PROJECTS and settings.PUBLIC)
+    public = models.BooleanField(default=False)
     date_added = models.DateTimeField(default=timezone.now)
     status = models.PositiveIntegerField(default=0, choices=(
         (STATUS_VISIBLE, 'Visible'),
@@ -997,7 +997,7 @@ def create_default_project(created_models, verbosity=2, **kwargs):
             return
 
         project = Project.objects.create(
-            public=settings.ALLOW_PUBLIC_PROJECTS and settings.PUBLIC,
+            public=False,
             name='Sentry (Internal)',
             slug='sentry',
         )
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index c19f91b752..4fc702d26e 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -109,7 +109,7 @@ class RemoveProjectForm(forms.Form):
 
 class EditProjectForm(BaseProjectForm):
     public = forms.BooleanField(required=False,
-        help_text=_('Allow anyone (even anonymous users) to view this project'))
+        help_text=_('Imply public access to any event for this project.'))
     team = forms.TypedChoiceField(choices=(), coerce=int)
     origins = OriginsField(label=_('Allowed Domains'), required=False,
         help_text=_('Separate multiple entries with a newline.'))
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 2e2ca361ed..2783b0bd48 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -11,7 +11,6 @@ import warnings
 
 from django.conf import settings as dj_settings
 from django.core.urlresolvers import reverse, resolve
-from django.db.models import Q
 from django.http import HttpResponse
 from django.template import loader, RequestContext, Context
 from django.utils.datastructures import SortedDict
@@ -25,36 +24,26 @@ from sentry.permissions import can_create_projects, can_create_teams
 logger = logging.getLogger('sentry.errors')
 
 
-def get_project_list(user=None, access=None, hidden=False, key='id', select_related=None):
+def get_project_list(user=None, access=None, hidden=False, key='id'):
     """
     Returns a SortedDict of all projects a user has some level of access to.
     """
+    if not (user and user.is_authenticated()):
+        return SortedDict()
+
     base_qs = Project.objects
     if not hidden:
         base_qs = base_qs.filter(status=0)
-    if select_related is not None:
-        base_qs = base_qs.select_related(*select_related)
-
-    # Collect kwarg queries to filter on. We can use this to perform a single
-    # query to get all of the desired projects ordered by name
-    filters = Q()
-
-    # If we're not requesting specific access include all
-    # public projects
-    if access is None:
-        filters |= Q(public=True)
-    elif not (user and user.is_authenticated()):
-        return SortedDict()
 
-    # If the user is authenticated, include their memberships
-    if user and user.is_authenticated():
+    if not settings.PUBLIC:
+        # If the user is authenticated, include their memberships
         teams = Team.objects.get_for_user(user, access).values()
-        if not teams and access is not None:
+        if not teams:
             return SortedDict()
-        filters |= Q(team__in=teams)
+        base_qs = base_qs.filter(team__in=teams)
 
     return SortedDict((getattr(p, key), p)
-        for p in base_qs.filter(filters).order_by('name'))
+        for p in base_qs.order_by('name'))
 
 
 def group_is_public(group, user):
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 5e07341ec6..4521f3682f 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -6,11 +6,13 @@ import datetime
 import mock
 import pytest
 
+from django.contrib.auth.models import User
 from django.utils import timezone
+from sentry.constants import MEMBER_OWNER
 from sentry.interfaces import Interface
 from sentry.manager import get_checksum_from_event
 from sentry.models import Event, Group, Project, GroupCountByMinute, ProjectCountByMinute, \
-  SearchDocument
+  SearchDocument, Team
 from sentry.utils.db import has_trending  # NOQA
 from sentry.testutils import TestCase
 
@@ -310,3 +312,34 @@ class GetChecksumFromEventTest(TestCase):
         stack_comp_hash.assert_called_once_with(interfaces=event.interfaces)
         assert not http_comp_hash.called
         assert checksum == '3858f62230ac3c915f300c664312c63f'
+
+
+class TeamManagerTest(TestCase):
+    def test_public_install_returns_all_teams_without_access(self):
+        teams = {self.team.slug: self.team}
+        user = User.objects.create()
+
+        with self.Settings(SENTRY_PUBLIC=True):
+            result = Team.objects.get_for_user(user)
+
+        assert result == teams
+
+    def test_public_install_returns_accessible_teams_with_access(self):
+        user = User.objects.create()
+        team = Team.objects.create(name='Test', owner=user)
+        teams = {team.slug: team}
+
+        with self.Settings(SENTRY_PUBLIC=True):
+            result = Team.objects.get_for_user(user, access=MEMBER_OWNER)
+
+        assert result == teams
+
+    def test_private_install_returns_accessible_teams(self):
+        user = User.objects.create()
+        team = Team.objects.create(name='Test', owner=user)
+        teams = {team.slug: team}
+
+        with self.Settings(SENTRY_PUBLIC=False):
+            result = Team.objects.get_for_user(user, access=MEMBER_OWNER)
+
+        assert result == teams
diff --git a/tests/sentry/web/helpers/tests.py b/tests/sentry/web/helpers/tests.py
index d3f1c2953e..d5df476cf9 100644
--- a/tests/sentry/web/helpers/tests.py
+++ b/tests/sentry/web/helpers/tests.py
@@ -20,32 +20,28 @@ class GetProjectListTEst(TestCase):
         self.project2 = Project.objects.create(name='Test', slug='test', owner=self.user, public=False)
 
     @mock.patch('sentry.models.Team.objects.get_for_user', mock.Mock(return_value={}))
-    def test_includes_public_projects_without_access(self):
+    def test_does_not_include_public_projects(self):
         project_list = get_project_list(self.user)
-        self.assertEquals(len(project_list), 1)
-        self.assertIn(self.project.id, project_list)
+        assert project_list == {}
 
-    @mock.patch('sentry.models.Team.objects.get_for_user', mock.Mock(return_value={}))
-    def test_does_exclude_public_projects_without_access(self):
         project_list = get_project_list(self.user, MEMBER_USER)
-        self.assertEquals(len(project_list), 0)
+        assert project_list == {}
 
     @mock.patch('sentry.models.Team.objects.get_for_user')
-    def test_does_include_private_projects_without_access(self, get_for_user):
+    def test_does_not_include_private_projects(self, get_for_user):
         get_for_user.return_value = {self.project2.team.id: self.project2.team}
         project_list = get_project_list(self.user)
         get_for_user.assert_called_once_with(self.user, None)
-        self.assertEquals(len(project_list), 2)
-        self.assertIn(self.project.id, project_list)
-        self.assertIn(self.project2.id, project_list)
+        assert project_list == {
+            self.project2.id: self.project2,
+        }
 
-    @mock.patch('sentry.models.Team.objects.get_for_user')
-    def test_does_exclude_public_projects_but_include_private_with_access(self, get_for_user):
-        get_for_user.return_value = {self.project2.team.id: self.project2.team}
+        get_for_user.reset_mock()
         project_list = get_project_list(self.user, MEMBER_USER)
         get_for_user.assert_called_once_with(self.user, MEMBER_USER)
-        self.assertEquals(len(project_list), 1)
-        self.assertIn(self.project2.id, project_list)
+        assert project_list == {
+            self.project2.id: self.project2,
+        }
 
 
 class GetLoginUrlTest(TestCase):
