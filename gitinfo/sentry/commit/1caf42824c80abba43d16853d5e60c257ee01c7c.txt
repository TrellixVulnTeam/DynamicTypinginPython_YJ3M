commit 1caf42824c80abba43d16853d5e60c257ee01c7c
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 30 13:34:07 2016 -0700

    Overhaul plugin API for future React support (#3986)
    
    * Overhaul plugin API for future React support
    
    This is a number of fairly large changes to both the new plugin configuration as well as the old, including exposing an API for configuration all plugins.
    
    /cc @getsentry/team

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index a7b5e2769a..d7dadc97f3 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -13,6 +13,7 @@ from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint, ProjectPermission
 from sentry.api.decorators import sudo_required
 from sentry.api.serializers import serialize
+from sentry.api.serializers.models.plugin import PluginSerializer
 from sentry.models import (
     AuditLogEntryEvent, Group, GroupStatus, Project, ProjectBookmark,
     ProjectStatus, UserOption
@@ -122,16 +123,6 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
         :pparam string project_slug: the slug of the project to delete.
         :auth: required
         """
-        active_plugins = [
-            {
-                'name': plugin.get_title(),
-                'id': plugin.slug,
-            }
-            for plugin in plugins.configurable_for_project(project, version=None)
-            if plugin.is_enabled(project)
-            and plugin.has_project_conf()
-        ]
-
         data = serialize(project, request.user)
         data['options'] = {
             'sentry:origins': '\n'.join(project.get_option('sentry:origins', ['*']) or []),
@@ -144,7 +135,11 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             'sentry:default_environment': project.get_option('sentry:default_environment'),
             'feedback:branding': project.get_option('feedback:branding', '1') == '1',
         }
-        data['activePlugins'] = active_plugins
+        data['plugins'] = serialize([
+            plugin
+            for plugin in plugins.configurable_for_project(project, version=None)
+            if plugin.has_project_conf()
+        ], request.user, PluginSerializer(project))
         data['team'] = serialize(project.team, request.user)
         data['organization'] = serialize(project.organization, request.user)
 
@@ -265,6 +260,7 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             'sentry:origins': '\n'.join(project.get_option('sentry:origins', ['*']) or []),
             'sentry:resolve_age': int(project.get_option('sentry:resolve_age', 0)),
         }
+
         return Response(data)
 
     @attach_scenarios([delete_project_scenario])
diff --git a/src/sentry/api/endpoints/project_plugin_details.py b/src/sentry/api/endpoints/project_plugin_details.py
new file mode 100644
index 0000000000..6a3fe7252b
--- /dev/null
+++ b/src/sentry/api/endpoints/project_plugin_details.py
@@ -0,0 +1,99 @@
+from __future__ import absolute_import
+
+import six
+
+from django import forms
+from rest_framework import serializers
+from rest_framework.response import Response
+
+from sentry.plugins import plugins
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.serializers import serialize
+from sentry.api.serializers.models.plugin import PluginWithConfigSerializer
+
+ERR_ALWAYS_ENABLED = 'This plugin is always enabled.'
+ERR_FIELD_REQUIRED = 'This field is required.'
+
+OK_UPDATED = 'Successfully updated configuration.'
+
+
+class ProjectPluginDetailsEndpoint(ProjectEndpoint):
+    def _get_plugin(self, plugin_id):
+        try:
+            return plugins.get(plugin_id)
+        except KeyError:
+            raise ResourceDoesNotExist
+
+    def get(self, request, project, plugin_id):
+        plugin = self._get_plugin(plugin_id)
+
+        context = serialize(
+            plugin, request.user, PluginWithConfigSerializer(project))
+
+        return Response(context)
+
+    def post(self, request, project, plugin_id):
+        """
+        Enable plugin
+        """
+        plugin = self._get_plugin(plugin_id)
+
+        if not plugin.can_disable:
+            return Response({'detail': ERR_ALWAYS_ENABLED}, status=400)
+
+        plugin.enable(project)
+
+        return Response(status=201)
+
+    def delete(self, request, project, plugin_id):
+        """
+        Disable plugin
+        """
+        plugin = self._get_plugin(plugin_id)
+
+        if not plugin.can_disable:
+            return Response({'detail': ERR_ALWAYS_ENABLED}, status=400)
+
+        plugin.disable(project)
+
+        return Response(status=204)
+
+    def put(self, request, project, plugin_id):
+        plugin = self._get_plugin(plugin_id)
+
+        config = plugin.get_config(
+            project=project,
+        )
+
+        cleaned = {}
+        errors = {}
+        for field in config:
+            key = field['name']
+            value = request.DATA.get(key)
+
+            if field.get('required') and not value:
+                errors[key] = ERR_FIELD_REQUIRED
+
+            for validator in field.get('validators', ()):
+                try:
+                    value = validator(value)
+                except (forms.ValidationError, serializers.ValidationError) as e:
+                    errors[key] = e.message
+
+            if not errors.get(key):
+                cleaned[key] = value
+
+        if errors:
+            return Response({
+                'errors': errors,
+            }, status=400)
+
+        for key, value in six.iteritems(cleaned):
+            plugin.set_option(
+                project=project,
+                key=key,
+                value=value,
+            )
+
+        return Response({'message': OK_UPDATED})
diff --git a/src/sentry/api/serializers/models/plugin.py b/src/sentry/api/serializers/models/plugin.py
new file mode 100644
index 0000000000..70245cbbe0
--- /dev/null
+++ b/src/sentry/api/serializers/models/plugin.py
@@ -0,0 +1,55 @@
+from __future__ import absolute_import
+
+
+from sentry.api.serializers import Serializer, register
+from sentry.plugins.config import PluginConfigMixin
+
+
+@register(PluginConfigMixin)
+class PluginSerializer(Serializer):
+    def __init__(self, project=None):
+        self.project = project
+
+    def serialize(self, obj, attrs, user):
+        d = {
+            'id': obj.slug,
+            'name': obj.get_title(),
+            'type': obj.get_plugin_type(),
+            'canDisable': obj.can_disable,
+        }
+        if self.project:
+            d['enabled'] = obj.is_enabled(self.project)
+        return d
+
+
+class PluginWithConfigSerializer(PluginSerializer):
+    def __init__(self, project=None):
+        self.project = project
+
+    def serialize(self, obj, attrs, user):
+        d = super(PluginWithConfigSerializer, self).serialize(obj, attrs, user)
+        d['config'] = [
+            serialize_field(self.project, obj, c)
+            for c in obj.get_config(
+                project=self.project,
+            )
+        ]
+        return d
+
+
+def serialize_field(project, plugin, field):
+    data = {
+        'name': field['name'],
+        'label': field.get('label') or field['name'].title().replace('_', ' '),
+        'type': field.get('type', 'text'),
+        'required': field.get('required', False),
+        'help': field.get('help'),
+        'placeholder': field.get('placeholder'),
+        'choices': field.get('choices'),
+        'readonly': field.get('readonly', False),
+        'defaultValue': field.get('default'),
+    }
+    if field.get('type') != 'secret':
+        data['value'] = plugin.get_option(field['name'], project)
+
+    return data
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 6931a21430..d4465a9424 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -56,6 +56,7 @@ from .endpoints.project_index import ProjectIndexEndpoint
 from .endpoints.project_keys import ProjectKeysEndpoint
 from .endpoints.project_key_details import ProjectKeyDetailsEndpoint
 from .endpoints.project_member_index import ProjectMemberIndexEndpoint
+from .endpoints.project_plugin_details import ProjectPluginDetailsEndpoint
 from .endpoints.project_releases import ProjectReleasesEndpoint
 from .endpoints.project_rules import ProjectRulesEndpoint
 from .endpoints.project_rule_details import ProjectRuleDetailsEndpoint
@@ -299,8 +300,12 @@ urlpatterns = patterns(
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/(?:user-feedback|user-reports)/$',
         ProjectUserReportsEndpoint.as_view(),
         name='sentry-api-0-project-user-reports'),
+
     # Load plugin project urls
-    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/plugin/',
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/plugins/(?P<plugin_id>[^\/]+)/$',
+        ProjectPluginDetailsEndpoint.as_view(),
+        name='sentry-api-0-project-plugin-details'),
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/plugins?/',
         include('sentry.plugins.base.project_api_urls')),
 
     # Groups
@@ -347,7 +352,7 @@ urlpatterns = patterns(
         GroupUserReportsEndpoint.as_view(),
         name='sentry-api-0-group-user-reports'),
     # Load plugin group urls
-    url(r'^(?:issues|groups)/(?P<issue_id>\d+)/plugin/',
+    url(r'^(?:issues|groups)/(?P<issue_id>\d+)/plugins?/',
         include('sentry.plugins.base.group_api_urls')),
 
     url(r'^shared/(?:issues|groups)/(?P<share_id>[^\/]+)/$',
diff --git a/src/sentry/plugins/base/group_api_urls.py b/src/sentry/plugins/base/group_api_urls.py
index ea33e8725c..0eb42993af 100644
--- a/src/sentry/plugins/base/group_api_urls.py
+++ b/src/sentry/plugins/base/group_api_urls.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import re
+
 from django.conf.urls import patterns, include, url
 
 from sentry.plugins import plugins
@@ -11,5 +13,5 @@ for _plugin in plugins.all():
     _plugin_group_urls = _plugin.get_group_urls()
     if _plugin_group_urls:
         urlpatterns.append(
-            url(r'^%s/' % _plugin.slug, include(_plugin_group_urls))
+            url(r'^%s/' % re.escape(_plugin.slug), include(_plugin_group_urls))
         )
diff --git a/src/sentry/plugins/base/project_api_urls.py b/src/sentry/plugins/base/project_api_urls.py
index 62ec066b2e..4d9818ee22 100644
--- a/src/sentry/plugins/base/project_api_urls.py
+++ b/src/sentry/plugins/base/project_api_urls.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import re
+
 from django.conf.urls import patterns, include, url
 
 from sentry.plugins import plugins
@@ -11,5 +13,5 @@ for _plugin in plugins.all():
     _plugin_project_urls = _plugin.get_project_urls()
     if _plugin_project_urls:
         urlpatterns.append(
-            url(r'^%s/' % _plugin.slug, include(_plugin_project_urls))
+            url(r'^%s/' % re.escape(_plugin.slug), include(_plugin_project_urls))
         )
diff --git a/src/sentry/plugins/base/v1.py b/src/sentry/plugins/base/v1.py
index 4b685349cf..968db331b3 100644
--- a/src/sentry/plugins/base/v1.py
+++ b/src/sentry/plugins/base/v1.py
@@ -86,6 +86,9 @@ class IPlugin(local, PluggableViewMixin, PluginConfigMixin):
     def _get_option_key(self, key):
         return '%s:%s' % (self.get_conf_key(), key)
 
+    def get_plugin_type(self):
+        return 'default'
+
     def is_enabled(self, project=None):
         """
         Returns a boolean representing if this plugin is enabled.
@@ -476,21 +479,13 @@ class IPlugin(local, PluggableViewMixin, PluginConfigMixin):
     def get_url_module(self):
         """Allows a plugin to return the import path to a URL module."""
 
-    def get_configure_plugin_fields(self, request, project, **kwargs):
-        form = self.project_conf_form
-        if not form:
-            return []
-
-        config = []
-        for name, field in six.iteritems(form.fields):
-            row = self.field_to_config(name, field)
-            row['default'] = self.get_option(name, project)
-            config.append(row)
-        return config
-
     def view_configure(self, request, project, **kwargs):
         if request.method == 'GET':
-            return Response(self.get_configure_plugin_fields(request, project, **kwargs))
+            return Response(self.get_configure_plugin_fields(
+                request=request,  # DEPRECATED: this param should not be used
+                project=project,
+                **kwargs
+            ))
         self.configure(project, request.DATA)
         return Response({'message': 'Successfully updated configuration.'})
 
diff --git a/src/sentry/plugins/base/v2.py b/src/sentry/plugins/base/v2.py
index 37d902b7ea..d932304c27 100644
--- a/src/sentry/plugins/base/v2.py
+++ b/src/sentry/plugins/base/v2.py
@@ -80,6 +80,9 @@ class IPlugin2(local, PluginConfigMixin):
     def _get_option_key(self, key):
         return '%s:%s' % (self.get_conf_key(), key)
 
+    def get_plugin_type(self):
+        return 'default'
+
     def is_enabled(self, project=None):
         """
         Returns a boolean representing if this plugin is enabled.
diff --git a/src/sentry/plugins/bases/issue.py b/src/sentry/plugins/bases/issue.py
index 3627e7ca91..f2ef23d504 100644
--- a/src/sentry/plugins/bases/issue.py
+++ b/src/sentry/plugins/bases/issue.py
@@ -43,6 +43,9 @@ class IssueTrackingPlugin(Plugin):
     can_unlink_issues = False
     can_link_existing_issues = False
 
+    def get_plugin_type(self):
+        return 'issue-tracking'
+
     def _get_group_body(self, request, group, event, **kwargs):
         result = []
         for interface in six.itervalues(event.interfaces):
diff --git a/src/sentry/plugins/bases/issue2.py b/src/sentry/plugins/bases/issue2.py
index 156a6d2f01..4bbfde5e1e 100644
--- a/src/sentry/plugins/bases/issue2.py
+++ b/src/sentry/plugins/bases/issue2.py
@@ -12,8 +12,7 @@ from django.utils.html import format_html
 
 from sentry.models import Activity, Event, GroupMeta
 from sentry.plugins import Plugin
-from sentry.plugins.endpoints import PluginGroupEndpoint, PluginProjectEndpoint
-from sentry.plugins.base.configuration import default_issue_plugin_config
+from sentry.plugins.endpoints import PluginGroupEndpoint
 from sentry.signals import issue_tracker_used
 from sentry.utils.auth import get_auth_providers
 from sentry.utils.http import absolute_uri
@@ -40,6 +39,9 @@ class IssueTrackingPlugin2(Plugin):
     auth_provider = None
     allowed_actions = ('create', 'link', 'unlink')
 
+    def get_plugin_type(self):
+        return 'issue-tracking'
+
     def has_project_conf(self):
         return True
 
@@ -84,21 +86,6 @@ class IssueTrackingPlugin2(Plugin):
             )
         return _urls
 
-    def get_project_urls(self):
-        _urls = []
-        # TODO: add enable here when moved to api
-        for action in ('configure', 'disable'):
-            view_method_name = 'view_%s' % action
-
-            _urls.append(
-                url(r'^%s/' % action,
-                    PluginProjectEndpoint.as_view(
-                        view=getattr(self, view_method_name),
-                    ),
-                )
-            )
-        return _urls
-
     def get_auth_for_user(self, user, **kwargs):
         """
         Return a ``UserSocialAuth`` object for the given user based on this plugins ``auth_provider``.
@@ -145,12 +132,6 @@ class IssueTrackingPlugin2(Plugin):
     def get_link_existing_issue_fields(self, request, group, event, **kwargs):
         return []
 
-    def get_configure_plugin_fields(self, request, project, **kwargs):
-        """
-        Must be overridden by plugins that require configuration.
-        """
-        raise NotImplementedError
-
     def get_issue_url(self, group, issue_id, **kwargs):
         """
         Given an issue_id (string) return an absolute URL to the issue's details
@@ -309,21 +290,12 @@ class IssueTrackingPlugin2(Plugin):
         )
         return Response({'message': 'Successfully linked issue.'})
 
-    def view_configure(self, request, project, **kwargs):
-        if request.method == 'GET':
-            return Response(self.get_configure_plugin_fields(request, project, **kwargs))
-        self.configure(project, request.DATA)
-        return Response({'message': 'Successfully updated configuration.'})
-
-    def configure(self, project, form_data):
-        """Configures the plugin"""
-        default_issue_plugin_config(self, project, form_data)
-
-    def view_disable(self, request, project, **kwargs):
-        if self.can_disable:
-            self.disable(project)
-            return Response({'message': 'Successfully disabled plugin'})
-        return Response({'message': 'Plugin cannot be disabled'}, status=400)
+    def get_config(self, *args, **kwargs):
+        # TODO(dcramer): update existing plugins to just use get_config
+        # TODO(dcramer): remove request kwarg after sentry-plugins has been
+        # updated
+        kwargs.setdefault('request', None)
+        return self.get_configure_plugin_fields(*args, **kwargs)
 
     def check_config_and_auth(self, request, group):
         has_auth_configured = self.has_auth_configured()
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 79b0d9bbb8..a9ec3fadf6 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -55,6 +55,9 @@ class NotificationPlugin(Plugin):
     # site_conf_form = NotificationConfigurationForm
     project_conf_form = NotificationConfigurationForm
 
+    def get_plugin_type(self):
+        return 'notification'
+
     def notify(self, notification):
         self.logger.info('notification.dispatched', extra={
             'event_id': notification.event.id,
diff --git a/src/sentry/plugins/bases/releasetracking.py b/src/sentry/plugins/bases/releasetracking.py
index de6f1fa705..16a2b88dfd 100644
--- a/src/sentry/plugins/bases/releasetracking.py
+++ b/src/sentry/plugins/bases/releasetracking.py
@@ -4,5 +4,8 @@ from sentry.plugins import Plugin2
 
 
 class ReleaseTrackingPlugin(Plugin2):
+    def get_plugin_type(self):
+        return 'release-tracking'
+
     def get_release_doc_html(self, hook_url):
         raise NotImplementedError
diff --git a/src/sentry/plugins/config.py b/src/sentry/plugins/config.py
index c80658220b..0f14d9437d 100644
--- a/src/sentry/plugins/config.py
+++ b/src/sentry/plugins/config.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 
 __all__ = ['PluginConfigMixin']
 
+import six
+
 from django import forms
 
 
@@ -9,12 +11,15 @@ class PluginConfigMixin(object):
     def field_to_config(self, name, field):
         config = {
             'name': name,
-            'label': field.label,
+            'label': field.label or name.replace('_', ' ').title(),
             'placeholder': field.widget.attrs.get('placeholder'),
             'help': field.help_text,
+            'required': field.required,
         }
         if isinstance(field, forms.CharField):
-            if field.widget == forms.Textarea:
+            if isinstance(field.widget, forms.PasswordInput):
+                config['type'] = 'secret'
+            elif isinstance(field.widget, forms.Textarea):
                 config['type'] = 'textarea'
             else:
                 config['type'] = 'text'
@@ -23,6 +28,18 @@ class PluginConfigMixin(object):
             config['choices'] = field.choices
         return config
 
+    def get_config(self, project, **kwargs):
+        form = self.project_conf_form
+        if not form:
+            return []
+
+        config = []
+        for name, field in six.iteritems(form.base_fields):
+            row = self.field_to_config(name, field)
+            row['default'] = field.initial
+            config.append(row)
+        return config
+
     def get_group_urls(self):
         return []
 
diff --git a/src/sentry/plugins/endpoints.py b/src/sentry/plugins/endpoints.py
index 39d16e4e3c..7a05d4ec1b 100644
--- a/src/sentry/plugins/endpoints.py
+++ b/src/sentry/plugins/endpoints.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 
 __all__ = ['PluginProjectEndpoint', 'PluginGroupEndpoint']
 
+from rest_framework.response import Response
+
 from sentry.api.bases.group import GroupEndpoint
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.models import GroupMeta
@@ -19,6 +21,9 @@ class PluginProjectEndpoint(ProjectEndpoint):
     def post(self, request, project, *args, **kwargs):
         return self._handle(request, project, *args, **kwargs)
 
+    def respond(self, *args, **kwargs):
+        return Response(*args, **kwargs)
+
 
 class PluginGroupEndpoint(GroupEndpoint):
     view = None
@@ -33,3 +38,6 @@ class PluginGroupEndpoint(GroupEndpoint):
 
     def post(self, request, group, *args, **kwargs):
         return self._handle(request, group, *args, **kwargs)
+
+    def respond(self, *args, **kwargs):
+        return Response(*args, **kwargs)
diff --git a/src/sentry/plugins/examples/__init__.py b/src/sentry/plugins/examples/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/sentry/plugins/examples/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/sentry/plugins/examples/issue_tracking.py b/src/sentry/plugins/examples/issue_tracking.py
new file mode 100644
index 0000000000..5747ddb225
--- /dev/null
+++ b/src/sentry/plugins/examples/issue_tracking.py
@@ -0,0 +1,50 @@
+from __future__ import absolute_import
+
+from sentry.plugins.bases.issue2 import IssuePlugin2
+
+
+class ExampleIssueTrackingPlugin(IssuePlugin2):
+    author = 'Sentry Team'
+    author_url = 'https://github.com/getsentry/sentry'
+    version = '0.0.0'
+    description = 'An example issue tracking plugin'
+    resource_links = [
+        ('Bug Tracker', 'https://github.com/getsentry/sentry/issues'),
+        ('Source', 'https://github.com/getsentry/sentry'),
+    ]
+
+    slug = 'example-issue'
+    title = 'Example Issue Tracking'
+    conf_title = title
+    conf_key = 'example-issue'
+
+    def is_configured(self, request, project, **kwargs):
+        return bool(self.get_option('repo', project))
+
+    def get_new_issue_fields(self, request, group, event, **kwargs):
+        fields = super(ExampleIssueTrackingPlugin, self).get_new_issue_fields(
+            request, group, event, **kwargs)
+        return [{
+            'name': 'tracker_url',
+            'label': 'Issue Tracker URL',
+            'type': 'text',
+        }] + fields
+
+    def create_issue(self, request, group, form_data, **kwargs):
+        return '1'
+
+    def get_issue_label(self, group, issue_id, **kwargs):
+        return 'Example-%s' % issue_id
+
+    def get_issue_url(self, group, issue_id, **kwargs):
+        tracker_url = self.get_option('tracker_url', group.project)
+
+        return '{}?issueID={}'.format(tracker_url, issue_id)
+
+    def get_configure_plugin_fields(self, project, **kwargs):
+        return [{
+            'name': 'tracker_url',
+            'label': 'Issue Tracker URL',
+            'type': 'text',
+            'placeholder': 'e.g. https://example.com',
+        }]
diff --git a/src/sentry/plugins/sentry_webhooks/plugin.py b/src/sentry/plugins/sentry_webhooks/plugin.py
index b937bd63e6..4aab75a457 100644
--- a/src/sentry/plugins/sentry_webhooks/plugin.py
+++ b/src/sentry/plugins/sentry_webhooks/plugin.py
@@ -4,8 +4,8 @@ import logging
 import six
 import sentry
 
-from django.conf import settings
 from django import forms
+from django.conf import settings
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.plugins.bases import notify
@@ -13,6 +13,20 @@ from sentry.http import is_valid_url, safe_urlopen
 from sentry.utils.safe import safe_execute
 
 
+def validate_urls(value):
+    output = []
+    for url in value.split('\n'):
+        url = url.strip()
+        if not url:
+            continue
+        if not url.startswith(('http://', 'https://')):
+            raise forms.ValidationError('Not a valid URL.')
+        if not is_valid_url(url):
+            raise forms.ValidationError('Not a valid URL.')
+        output.append(url)
+    return '\n'.join(output)
+
+
 class WebHooksOptionsForm(notify.NotificationConfigurationForm):
     urls = forms.CharField(
         label=_('Callback URLs'),
@@ -22,9 +36,7 @@ class WebHooksOptionsForm(notify.NotificationConfigurationForm):
 
     def clean_url(self):
         value = self.cleaned_data.get('url')
-        if not is_valid_url(value):
-            raise forms.ValidationError('Invalid hostname')
-        return value
+        return validate_urls(value)
 
 
 class WebHooksPlugin(notify.NotificationPlugin):
@@ -41,6 +53,7 @@ class WebHooksPlugin(notify.NotificationPlugin):
     title = 'WebHooks'
     conf_title = title
     conf_key = 'webhooks'
+    # TODO(dcramer): remove when this is migrated to React
     project_conf_form = WebHooksOptionsForm
     timeout = getattr(settings, 'SENTRY_WEBHOOK_TIMEOUT', 3)
     logger = logging.getLogger('sentry.plugins.webhooks')
@@ -49,6 +62,16 @@ class WebHooksPlugin(notify.NotificationPlugin):
     def is_configured(self, project, **kwargs):
         return bool(self.get_option('urls', project))
 
+    def get_config(self, project, **kwargs):
+        return [{
+            'name': 'urls',
+            'label': 'Callback URLs',
+            'type': 'textarea',
+            'help': 'Enter callback URLs to POST new events to (one per line).',
+            'placeholder': 'https://getsentry.com/callback/url',
+            'validators': [validate_urls],
+        }]
+
     def get_group_data(self, group, event):
         data = {
             'id': six.text_type(group.id),
diff --git a/src/sentry/static/sentry/app/components/forms/form.jsx b/src/sentry/static/sentry/app/components/forms/form.jsx
index 516d809106..d1148217b0 100644
--- a/src/sentry/static/sentry/app/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/components/forms/form.jsx
@@ -14,7 +14,7 @@ const Form = React.createClass({
     return {
       submitLabel: t('Save Changes'),
       submitDisabled: false,
-      footerClass: 'form-actions'
+      footerClass: 'form-actions align-right'
     };
   },
 
diff --git a/src/sentry/static/sentry/app/components/forms/index.jsx b/src/sentry/static/sentry/app/components/forms/index.jsx
index 8c4e84b78a..2e0c60f96a 100644
--- a/src/sentry/static/sentry/app/components/forms/index.jsx
+++ b/src/sentry/static/sentry/app/components/forms/index.jsx
@@ -1,4 +1,5 @@
 const FormState = {
+  LOADING: 'Loading',
   READY: 'Ready',
   SAVING: 'Saving',
   ERROR: 'Error',
@@ -9,6 +10,8 @@ export {default as CheckboxField} from './checkboxField';
 export {default as Form} from './form';
 export {default as EmailField} from './emailField';
 export {default as MultipleCheckboxField} from './multipleCheckboxField';
+export {default as PasswordField} from './passwordField';
+export {default as RangeField} from './rangeField';
 export {default as Select2FieldAutocomplete} from './select2FieldAutocomplete';
 export {default as Select2Field} from './select2Field';
 export {default as TextField} from './textField';
diff --git a/src/sentry/static/sentry/app/components/forms/inputField.jsx b/src/sentry/static/sentry/app/components/forms/inputField.jsx
index 56e6b84b59..3344281bc5 100644
--- a/src/sentry/static/sentry/app/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/inputField.jsx
@@ -3,6 +3,8 @@ import React from 'react';
 import ReactDOM from 'react-dom';
 import FormField from './formField';
 
+import {defined} from '../../utils';
+
 export default class InputField extends FormField {
   constructor(props) {
     super(props);
@@ -11,7 +13,7 @@ export default class InputField extends FormField {
   }
 
   valueFromProps(props) {
-    return props.value !== '' ? props.value : (props.defaultValue || '');
+    return defined(props.value) ? props.value : (props.defaultValue || '');
   }
 
   // XXX(dcramer): this comes from TooltipMixin
@@ -54,6 +56,7 @@ export default class InputField extends FormField {
           placeholder={this.props.placeholder}
           onChange={this.onChange.bind(this)}
           disabled={this.props.disabled}
+          ref="input"
           value={this.state.value} />
     );
   }
diff --git a/src/sentry/static/sentry/app/components/forms/passwordField.jsx b/src/sentry/static/sentry/app/components/forms/passwordField.jsx
new file mode 100644
index 0000000000..adab7f5d85
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/passwordField.jsx
@@ -0,0 +1,7 @@
+import InputField from './inputField';
+
+export default class PasswordField extends InputField {
+  getType() {
+    return 'password';
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/forms/rangeField.jsx b/src/sentry/static/sentry/app/components/forms/rangeField.jsx
new file mode 100644
index 0000000000..f766886b84
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/rangeField.jsx
@@ -0,0 +1,73 @@
+import jQuery from 'jquery';
+import React from 'react';
+import ReactDOM from 'react-dom';
+
+import InputField from './inputField';
+
+export default class RangeField extends InputField {
+  componentDidMount() {
+    super.componentDidMount();
+    this.attachSlider();
+  }
+
+  componentWillUnmount() {
+    this.removeSlider();
+    super.componentWillUnmount();
+  }
+
+  attachSlider() {
+    let $value = jQuery('<span class="value" />');
+    jQuery(ReactDOM.findDOMNode(this.refs.input)).on('slider:ready', (e, data) => {
+      $value.appendTo(data.el);
+      $value.html(this.props.formatLabel(data.value));
+    }).on('slider:changed', (e, data) => {
+      $value.html(this.props.formatLabel(data.value));
+      this.props.onChange(data.value);
+    }).simpleSlider({
+      range: [this.props.min, this.props.max],
+      step: this.props.step,
+      snap: this.props.snap,
+      allowedValues: this.props.allowedValues,
+    });
+  }
+
+  removeSlider() {
+    // TODO(dcramer): it seems we cant actually implement this with the current slider
+    // implementation
+  }
+
+  getField() {
+    return (
+      <input id={this.getId()}
+          type={this.getType()}
+          className="form-control"
+          placeholder={this.props.placeholder}
+          onChange={this.onChange.bind(this)}
+          disabled={this.props.disabled}
+          ref="input"
+          min={this.props.min}
+          max={this.props.max}
+          step={this.props.step}
+          value={this.state.value} />
+    );
+  }
+
+  getType() {
+    return 'range';
+  }
+}
+
+RangeField.formatMinutes = (val) => {
+  val = parseInt(val / 60, 10);
+  return `${val} minute${(val != 1 ? 's' : '')}`;
+};
+
+RangeField.defaultProps = {
+  onChange: (value) => {},
+  formatLabel: (value) => value,
+  min: 0,
+  max: 100,
+  step: 1,
+  snap: true,
+  allowedValues: null
+};
diff --git a/src/sentry/static/sentry/app/components/forms/textareaField.jsx b/src/sentry/static/sentry/app/components/forms/textareaField.jsx
index 72dc48771d..9d7c81088b 100644
--- a/src/sentry/static/sentry/app/components/forms/textareaField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/textareaField.jsx
@@ -6,6 +6,7 @@ export default class TextareaField extends InputField {
     return (
       <textarea {...this.props}
           id={this.getId()}
+          ref="input"
           className="form-control"
           value={this.state.value}
           onChange={this.onChange.bind(this)} />
diff --git a/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx b/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
index 60b8213881..7f025d694e 100644
--- a/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
@@ -44,17 +44,17 @@ const IssuePlugin = React.createClass({
 
   getPluginCreateEndpoint() {
     return ('/issues/' + this.getGroup().id +
-            '/plugin/' + this.props.plugin.slug + '/create/');
+            '/plugins/' + this.props.plugin.slug + '/create/');
   },
 
   getPluginLinkEndpoint() {
     return ('/issues/' + this.getGroup().id +
-            '/plugin/' + this.props.plugin.slug + '/link/');
+            '/plugins/' + this.props.plugin.slug + '/link/');
   },
 
   getPluginUnlinkEndpoint() {
     return ('/issues/' + this.getGroup().id +
-            '/plugin/' + this.props.plugin.slug + '/unlink/');
+            '/plugins/' + this.props.plugin.slug + '/unlink/');
   },
 
   setError(error, defaultMessage) {
@@ -199,7 +199,7 @@ const IssuePlugin = React.createClass({
       case 'select':
         if (field.has_autocomplete) {
           props.url = ('/api/0/issues/' + this.getGroup().id +
-                       '/plugin/' + this.props.plugin.slug + '/autocomplete');
+                       '/plugins/' + this.props.plugin.slug + '/autocomplete');
           el = <Select2FieldAutocomplete {...props} />;
         } else {
           props.choices = field.choices;
@@ -412,9 +412,11 @@ const IssuePluginActions = React.createClass({
             <Modal.Title>{plugin.title + ' Issue'}</Modal.Title>
           </Modal.Header>
           <Modal.Body>
-            <IssuePlugin plugin={this.props.plugin}
-                         actionType={this.state.actionType}
-                         onSuccess={this.closeModal}/>
+            {this.state.actionType &&
+              <IssuePlugin plugin={this.props.plugin}
+                           actionType={this.state.actionType}
+                           onSuccess={this.closeModal}/>
+            }
           </Modal.Body>
         </Modal>
       </span>
diff --git a/src/sentry/static/sentry/app/components/listLink.jsx b/src/sentry/static/sentry/app/components/listLink.jsx
index 5664586399..a7db781c9a 100644
--- a/src/sentry/static/sentry/app/components/listLink.jsx
+++ b/src/sentry/static/sentry/app/components/listLink.jsx
@@ -24,7 +24,7 @@ const ListLink = React.createClass({
   getDefaultProps() {
     return {
       activeClassName: 'active',
-      onlyActiveOnIndex: false,
+      index: false,
     };
   },
 
@@ -47,7 +47,7 @@ const ListLink = React.createClass({
   },
 
   render() {
-    let carriedProps = _.omit(this.props, 'activeClassName', 'isActive');
+    let carriedProps = _.omit(this.props, 'activeClassName', 'isActive', 'index');
     return (
       <li className={this.getClassName()}>
         <Link {...carriedProps} onlyActiveOnIndex={this.props.index}>{this.props.children}</Link>
diff --git a/src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx b/src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx
index 78b5820bf5..9bef90379e 100644
--- a/src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx
+++ b/src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx
@@ -1,7 +1,17 @@
 import React from 'react';
-import AlertActions from '../../actions/alertActions';
+import underscore from 'underscore';
+
 import ApiMixin from '../../mixins/apiMixin';
-import {Form, Select2Field, Select2FieldAutocomplete, TextareaField, TextField} from '../forms';
+import {
+  Form,
+  FormState,
+  PasswordField,
+  Select2Field,
+  Select2FieldAutocomplete,
+  TextField,
+  TextareaField,
+} from '../forms';
+import IndicatorStore from '../../stores/indicatorStore';
 import LoadingIndicator from '../loadingIndicator';
 import {t} from '../../locale';
 import {defined} from '../../utils';
@@ -10,7 +20,7 @@ const PluginConfigForm = React.createClass({
   propTypes: {
     organization: React.PropTypes.object.isRequired,
     project: React.PropTypes.object.isRequired,
-    plugin: React.PropTypes.object
+    plugin: React.PropTypes.object.isRequired,
   },
 
   mixins: [ApiMixin],
@@ -18,7 +28,10 @@ const PluginConfigForm = React.createClass({
   getInitialState() {
     return {
       fieldList: null,
-      formData: null
+      initialData: null,
+      formData: null,
+      errors: {},
+      state: FormState.READY,
     };
   },
 
@@ -26,32 +39,31 @@ const PluginConfigForm = React.createClass({
     this.fetchData();
   },
 
-  getPluginConfigureEndpoint() {
+  getPluginEndpoint() {
     let org = this.props.organization;
     let project = this.props.project;
     return (
-      `/projects/${org.slug}/${project.slug}/plugin/${this.props.plugin.slug}/configure/`
+      `/projects/${org.slug}/${project.slug}/plugins/${this.props.plugin.id}/`
     );
   },
 
   fetchData() {
-    this.api.request(this.getPluginConfigureEndpoint(), {
+    this.api.request(this.getPluginEndpoint(), {
       success: (data) => {
         let formData = {};
-        data.forEach((field) => {
-          formData[field.name] = field.default;
+        data.config.forEach((field) => {
+          formData[field.name] = field.value || field.defaultValue;
         });
         this.setState({
-          fieldList: data,
-          error: false,
-          loading: false,
-          formData: formData
+          fieldList: data.config,
+          state: FormState.LOADING,
+          formData: formData,
+          initialData: Object.assign({}, formData)
         });
       },
       error: (error) => {
         this.setState({
-          error: true,
-          loading: false
+          state: FormState.ERROR,
         });
       }
     });
@@ -72,10 +84,16 @@ const PluginConfigForm = React.createClass({
       label: field.label + (required ? '*' : ''),
       placeholder: field.placeholder,
       name: field.name,
+      error: this.state.errors[field.name],
       disabled: field.readonly,
+      key: field.name,
       help: <span dangerouslySetInnerHTML={{__html: field.help}}/>
     };
+
     switch (field.type) {
+      case 'secret':
+        el = <PasswordField {...props} />;
+        break;
       case 'text':
         el = <TextField {...props} />;
         break;
@@ -97,20 +115,35 @@ const PluginConfigForm = React.createClass({
   },
 
   onSubmit() {
-    this.api.request(this.getPluginConfigureEndpoint(), {
-      data: this.state.formData,
-      success: (data) => {
-        AlertActions.addAlert({
-          message: t('Successfully saved plugin settings.'),
-          type: 'success'
-        });
-      },
-      error: (error) => {
-        AlertActions.addAlert({
-          message: t('There was an error saving the plugin configuration.'),
-          type: 'error'
-        });
-      }
+    if (this.state.state == FormState.SAVING) {
+      return;
+    }
+    this.setState({
+      state: FormState.SAVING,
+    }, () => {
+      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+      this.api.request(this.getPluginEndpoint(), {
+        data: this.state.formData,
+        method: 'PUT',
+        success: (data) => {
+          this.setState({
+            formData: data,
+            initialData: Object.assign({}, data),
+            state: FormState.READY,
+            errors: {},
+          });
+        },
+        error: (error) => {
+          this.setState({
+            state: FormState.ERROR,
+            errors: error.responseJSON.errors || {},
+          });
+          IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
+        },
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
+        }
+      });
     });
   },
 
@@ -118,11 +151,11 @@ const PluginConfigForm = React.createClass({
     if (!this.state.fieldList) {
       return <LoadingIndicator />;
     }
+    let isSaving = this.state.state === FormState.SAVING;
+    let hasChanges = !underscore.isEqual(this.state.initialData, this.state.formData);
     return (
-      <Form onSubmit={this.onSubmit}>
-        {this.state.fieldList.map((field) => {
-          return <div key={field.name}>{this.renderField(field)}</div>;
-        })}
+      <Form onSubmit={this.onSubmit} submitDisabled={isSaving || !hasChanges}>
+        {this.state.fieldList.map(f => this.renderField(f))}
       </Form>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx b/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
index 13d63ecdd4..8969b0bbf3 100644
--- a/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
@@ -1,77 +1,11 @@
-import jQuery from 'jquery';
 import React from 'react';
 
 import ApiMixin from '../../mixins/apiMixin';
 import IndicatorStore from '../../stores/indicatorStore';
 import OrganizationHomeContainer from '../../components/organizations/homeContainer';
 import OrganizationState from '../../mixins/organizationState';
-import {t,tct} from '../../locale';
-
-const RangeInput = React.createClass({
-  propTypes: {
-    min: React.PropTypes.number.isRequired,
-    max: React.PropTypes.number.isRequired,
-    step: React.PropTypes.number.isRequired,
-    defaultValue: React.PropTypes.number,
-    formatLabel: React.PropTypes.func.isRequired,
-    onChange: React.PropTypes.func.isRequired
-  },
-
-  getDefaultProps() {
-    return {
-      min: 1,
-      max: 100,
-      step: 1,
-      formatLabel: function(value) {
-        return value;
-      },
-      onChange: function(e, value) {
-
-      },
-    };
-  },
-
-  getInitialState() {
-    return {
-      value: this.props.defaultValue,
-    };
-  },
-
-  componentDidMount() {
-    let {min, max, step} = this.props;
-    let $value = jQuery('<span class="value" />');
-    jQuery(this.refs.input).on('slider:ready', (e, data) => {
-      $value.appendTo(data.el);
-      $value.text(this.props.formatLabel(data.value));
-      this.setState({
-        value: data.value,
-      });
-    }).on('slider:changed', (e, data) => {
-      $value.text(this.props.formatLabel(data.value));
-      this.setState({
-        value: data.value,
-      });
-      this.props.onChange(e, data.value);
-    }).simpleSlider({
-      range: [min, max],
-      step: step,
-      snap: true
-    });
-  },
-
-  render() {
-    let {min, max, step} = this.props;
-    let {value} = this.state;
-    return (
-      <input type="range"
-          min={min}
-          max={max}
-          step={step}
-          defaultValue={value}
-          ref="input" />
-    );
-  },
-});
+import {RangeInput} from '../../components/forms';
+import {t, tct} from '../../locale';
 
 const RateLimitEditor = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/views/projectIssueTracking.jsx b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
index 0f3fecf4d3..040ea0c3cc 100644
--- a/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
+++ b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import AlertActions from '../actions/alertActions';
 import ApiMixin from '../mixins/apiMixin';
-import IssuePluginConfigForm from '../components/plugins/pluginConfigureForm';
+import PluginConfigForm from '../components/plugins/pluginConfigureForm';
 import {t} from '../locale';
 
 const IssuePluginConfiguration = React.createClass({
@@ -13,15 +13,17 @@ const IssuePluginConfiguration = React.createClass({
 
   mixins: [ApiMixin],
 
-  getPluginDisableEndpoint(plugin) {
+  getPluginEndpoint(plugin) {
     let org = this.props.organization;
     let project = this.props.project;
-    return ('/projects/' + org.slug + '/' + project.slug +
-            '/plugin/' + plugin.slug + '/disable/');
+    return (
+      `/projects/${org.slug}/${project.slug}/plugins/${plugin.id}/`
+    );
   },
 
   disablePlugin(plugin) {
-    this.api.request(this.getPluginDisableEndpoint(plugin), {
+    this.api.request(this.getPluginEndpoint(plugin), {
+      method: 'DELETE',
       success: () => {
         // When this whole page is a react view, this won't be necessary
         window.location.reload();
@@ -43,15 +45,15 @@ const IssuePluginConfiguration = React.createClass({
       <div>
         {this.props.plugins.map((plugin) => {
           return (
-            <div className="box" key={plugin.slug}>
+            <div className="box" key={plugin.id}>
               <div className="box-header">
-                {plugin.can_disable && plugin.is_enabled &&
+                {plugin.canDisable && plugin.enabled &&
                   <button className="btn btn-sm btn-default pull-right"
                           onClick={this.disablePlugin.bind(this, plugin)}>{t('Disable')}</button>}
                 <h3>{plugin.title}</h3>
               </div>
               <div className="box-content with-padding">
-                <IssuePluginConfigForm plugin={plugin} key={plugin.slug} {...this.props}/>
+                <PluginConfigForm plugin={plugin} {...this.props}/>
               </div>
             </div>
           );
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index de6558e4a3..ea472791ec 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -113,7 +113,7 @@ const ProjectSettings = React.createClass({
           <h6 className="nav-header">{t('Integrations')}</h6>
           <ul className="nav nav-stacked">
             <li><a href={`${settingsUrlRoot}/plugins/`}>{t('All Integrations')}</a></li>
-            {project.activePlugins.map((plugin) => {
+            {project.plugins.filter(p => p.enabled).map((plugin) => {
               return <li key={plugin.id}><a href={`${settingsUrlRoot}/plugins/${plugin.id}/`}>{plugin.name}</a></li>;
             })}
           </ul>
diff --git a/src/sentry/static/sentry/less/forms.less b/src/sentry/static/sentry/less/forms.less
index 1afde8731b..f67345bce7 100644
--- a/src/sentry/static/sentry/less/forms.less
+++ b/src/sentry/static/sentry/less/forms.less
@@ -58,6 +58,10 @@
   font-size: 90%;
 }
 
+textarea.form-control {
+  height: 150px;
+}
+
 legend {
   margin: 20px 0;
   border-bottom: 1px solid #E9EBEC;
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index f1b17c4358..08563208c7 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -3187,6 +3187,7 @@ ul.tag-list {
   li {
     display: inline-block;
     margin-bottom: 2px;
+
     button {
       width: 150px;
       text-align: center;
@@ -3200,6 +3201,7 @@ ul.tag-list {
       border-radius: 4px;
       padding: 10px;
       display: block;
+      margin-right: 5px;
 
       &:hover {
         border-color: #ccc;
diff --git a/src/sentry/templates/sentry/partial/_form.html b/src/sentry/templates/sentry/partial/_form.html
index fdc8a1f14e..ce38d1eea9 100644
--- a/src/sentry/templates/sentry/partial/_form.html
+++ b/src/sentry/templates/sentry/partial/_form.html
@@ -9,7 +9,7 @@
 
     {% include "sentry/partial/form_base.html" %}
 
-    <fieldset class="form-actions">
+    <fieldset class="form-actions align-right">
       {% if plugin.is_testable %}
       <button type="submit" class="btn btn-default" name="action_test" {% if not plugin_is_configured %}disabled{% endif %}>{% trans "Test Configuration" %}</button>
       {% endif %}
diff --git a/src/sentry/web/frontend/project_issue_tracking.py b/src/sentry/web/frontend/project_issue_tracking.py
index 60968910c9..fa588caa41 100644
--- a/src/sentry/web/frontend/project_issue_tracking.py
+++ b/src/sentry/web/frontend/project_issue_tracking.py
@@ -76,9 +76,9 @@ class ProjectIssueTrackingView(ProjectView):
             'other_plugins': other_plugins,
             'issue_v2_plugins': [{
                 'title': p.get_title(),
-                'slug': p.slug,
-                'can_disable': p.can_disable,
-                'is_enabled': True
+                'id': p.slug,
+                'canDisable': p.can_disable,
+                'enabled': True
             } for p in issue_v2_plugins]
         }
 
diff --git a/src/sentry/web/frontend/project_plugin_configure.py b/src/sentry/web/frontend/project_plugin_configure.py
index 4a9654f3ca..8faeca7f27 100644
--- a/src/sentry/web/frontend/project_plugin_configure.py
+++ b/src/sentry/web/frontend/project_plugin_configure.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 from django.http import HttpResponse
 
+from sentry.api import client
 from sentry.plugins import plugins, IssueTrackingPlugin2
 from sentry.web.frontend.base import ProjectView
 
@@ -23,12 +24,12 @@ class ProjectPluginConfigureView(ProjectView):
         is_enabled = plugin.is_enabled(project)
         if isinstance(plugin, IssueTrackingPlugin2):
             view = None
-            issue_v2_plugin = {
-                'title': plugin.get_title(),
-                'slug': plugin.slug,
-                'can_disable': plugin.can_disable,
-                'is_enabled': is_enabled
-            }
+            response = client.get('/projects/{}/{}/plugins/{}/'.format(
+                organization.slug,
+                project.slug,
+                slug,
+            ), request=request)
+            issue_v2_plugin = response.data
         else:
             view = plugin.configure(request=request, project=project)
             if isinstance(view, HttpResponse):
diff --git a/tests/sentry/api/endpoints/test_project_plugin_details.py b/tests/sentry/api/endpoints/test_project_plugin_details.py
new file mode 100644
index 0000000000..15cca1a5be
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_plugin_details.py
@@ -0,0 +1,98 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.plugins import plugins
+from sentry.models import ProjectOption
+from sentry.testutils import APITestCase
+
+
+class ProjectPluginDetailsTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project()
+
+        self.login_as(user=self.user)
+
+        url = reverse('sentry-api-0-project-plugin-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'plugin_id': 'webhooks',
+        })
+        response = self.client.get(url)
+        assert response.status_code == 200, (response.status_code, response.content)
+        assert response.data['id'] == 'webhooks'
+        assert response.data['config'] == [{
+            'readonly': False,
+            'choices': None,
+            'placeholder': 'https://getsentry.com/callback/url',
+            'name': 'urls',
+            'help': 'Enter callback URLs to POST new events to (one per line).',
+            'defaultValue': None,
+            'required': False,
+            'type': 'textarea',
+            'value': None,
+            'label': 'Callback URLs',
+        }]
+
+
+class UpdateProjectPluginTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project()
+
+        self.login_as(user=self.user)
+
+        url = reverse('sentry-api-0-project-plugin-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'plugin_id': 'webhooks',
+        })
+        response = self.client.put(url, data={
+            'urls': 'http://example.com/foo',
+        })
+        assert response.status_code == 200, (response.status_code, response.content)
+        assert ProjectOption.objects.get(
+            key='webhooks:urls',
+            project=project,
+        ).value == 'http://example.com/foo'
+
+
+class EnableProjectPluginTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project()
+
+        self.login_as(user=self.user)
+
+        plugins.get('webhooks').disable(project)
+
+        url = reverse('sentry-api-0-project-plugin-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'plugin_id': 'webhooks',
+        })
+        response = self.client.post(url)
+        assert response.status_code == 201, (response.status_code, response.content)
+        assert ProjectOption.objects.get(
+            key='webhooks:enabled',
+            project=project,
+        ).value is True
+
+
+class DisableProjectPluginTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project()
+
+        self.login_as(user=self.user)
+
+        plugins.get('webhooks').enable(project)
+
+        url = reverse('sentry-api-0-project-plugin-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'plugin_id': 'webhooks',
+        })
+        response = self.client.delete(url)
+        assert response.status_code == 204, (response.status_code, response.content)
+        assert ProjectOption.objects.get(
+            key='webhooks:enabled',
+            project=project,
+        ).value is False
diff --git a/tests/sentry/plugins/bases/issue/tests.py b/tests/sentry/plugins/bases/issue/tests.py
index 937c65ad31..be3a4ee0aa 100644
--- a/tests/sentry/plugins/bases/issue/tests.py
+++ b/tests/sentry/plugins/bases/issue/tests.py
@@ -79,7 +79,7 @@ class IssuePlugin2GroupAction(TestCase):
     @mock.patch('sentry.plugins.IssueTrackingPlugin2.is_configured', return_value=True)
     def test_get_create(self, *args):
         self.login_as(user=self.user)
-        url = '/api/0/issues/%s/plugin/issuetrackingplugin2/create/' % self.group.id
+        url = '/api/0/issues/%s/plugins/issuetrackingplugin2/create/' % self.group.id
         response = self.client.get(url, format='json')
         content = json.loads(response.content)
         field_names = [field['name'] for field in content]
@@ -91,7 +91,7 @@ class IssuePlugin2GroupAction(TestCase):
     @mock.patch('sentry.plugins.IssueTrackingPlugin2.is_configured', return_value=True)
     def test_post_create_invalid(self, *args):
         self.login_as(user=self.user)
-        url = '/api/0/issues/%s/plugin/issuetrackingplugin2/create/' % self.group.id
+        url = '/api/0/issues/%s/plugins/issuetrackingplugin2/create/' % self.group.id
         response = self.client.post(url, data={
             'title': '',
             'description': ''
@@ -105,7 +105,7 @@ class IssuePlugin2GroupAction(TestCase):
     @mock.patch('sentry.plugins.IssueTrackingPlugin2.get_issue_url', return_value='')
     def test_post_create_valid(self, *args):
         self.login_as(user=self.user)
-        url = '/api/0/issues/%s/plugin/issuetrackingplugin2/create/' % self.group.id
+        url = '/api/0/issues/%s/plugins/issuetrackingplugin2/create/' % self.group.id
         response = self.client.post(url, data={
             'title': 'test',
             'description': 'test'
@@ -117,14 +117,14 @@ class IssuePlugin2GroupAction(TestCase):
     @mock.patch('sentry.plugins.IssueTrackingPlugin2.is_configured', return_value=True)
     def test_get_link(self, *args):
         self.login_as(user=self.user)
-        url = '/api/0/issues/%s/plugin/issuetrackingplugin2/link/' % self.group.id
+        url = '/api/0/issues/%s/plugins/issuetrackingplugin2/link/' % self.group.id
         response = self.client.get(url, format='json')
         assert response.status_code == 200
 
     @mock.patch('sentry.plugins.IssueTrackingPlugin2.is_configured', return_value=True)
     def test_get_unlink_invalid(self, *args):
         self.login_as(user=self.user)
-        url = '/api/0/issues/%s/plugin/issuetrackingplugin2/unlink/' % self.group.id
+        url = '/api/0/issues/%s/plugins/issuetrackingplugin2/unlink/' % self.group.id
         response = self.client.get(url, format='json')
         assert response.status_code == 400
 
@@ -133,33 +133,8 @@ class IssuePlugin2GroupAction(TestCase):
         self.login_as(user=self.user)
         id_ = '%s:tid' % self.plugin_instance.get_conf_key()
         GroupMeta.objects.set_value(self.group, id_, 4)
-        url = '/api/0/issues/%s/plugin/issuetrackingplugin2/unlink/' % self.group.id
+        url = '/api/0/issues/%s/plugins/issuetrackingplugin2/unlink/' % self.group.id
         response = self.client.get(url, format='json')
         assert response.status_code == 200
         GroupMeta.objects.populate_cache([self.group])
         assert GroupMeta.objects.get_value(self.group, id_, None) is None
-
-
-class IssuePlugin2ProjectAction(TestCase):
-
-    def setUp(self):
-        super(IssuePlugin2ProjectAction, self).setUp()
-        self.project = self.create_project()
-        self.plugin_instance = plugins.get(slug='issuetrackingplugin2')
-
-    @mock.patch('sentry.plugins.IssueTrackingPlugin2.get_configure_plugin_fields', return_value={})
-    def test_get_configure(self, *args):
-        self.login_as(user=self.user)
-        url = ('/api/0/projects/%s/%s/plugin/'
-               'issuetrackingplugin2/configure/') % (self.project.organization.slug,
-                                                     self.project.slug)
-        response = self.client.get(url, format='json')
-        assert response.status_code == 200
-
-    def test_get_disable(self, *args):
-        self.login_as(user=self.user)
-        url = ('/api/0/projects/%s/%s/plugin/'
-               'issuetrackingplugin2/disable/') % (self.project.organization.slug,
-                                                   self.project.slug)
-        response = self.client.get(url, format='json')
-        assert response.status_code == 200
diff --git a/tests/sentry/plugins/test_config.py b/tests/sentry/plugins/test_config.py
new file mode 100644
index 0000000000..5db94f8839
--- /dev/null
+++ b/tests/sentry/plugins/test_config.py
@@ -0,0 +1,62 @@
+from __future__ import absolute_import
+
+from django import forms
+
+from sentry.plugins import Plugin2
+from sentry.testutils import TestCase
+
+
+class DummyForm(forms.Form):
+    text = forms.CharField(help_text='text field')
+    textarea = forms.CharField(widget=forms.Textarea, required=False)
+    password = forms.CharField(label='A Password', widget=forms.PasswordInput)
+    choice = forms.ChoiceField(choices=((1, 'one'), (2, 'two')))
+
+
+class DummyPlugin(Plugin2):
+    project_conf_form = DummyForm()
+
+
+class ConfigTest(TestCase):
+    def test_get_config(self):
+        project = self.create_project()
+        plugin = DummyPlugin()
+        config = plugin.get_config(project)
+        assert len(config) == 4
+        assert config[0] == {
+            'default': None,
+            'help': 'text field',
+            'label': 'Text',
+            'name': 'text',
+            'placeholder': None,
+            'required': True,
+            'type': 'text'
+        }
+        assert config[1] == {
+            'default': None,
+            'help': '',
+            'label': 'Textarea',
+            'name': 'textarea',
+            'placeholder': None,
+            'required': False,
+            'type': 'textarea',
+        }
+        assert config[2] == {
+            'default': None,
+            'help': '',
+            'label': 'A Password',
+            'name': 'password',
+            'placeholder': None,
+            'required': True,
+            'type': 'secret',
+        }
+        assert config[3] == {
+            'default': None,
+            'help': '',
+            'label': 'Choice',
+            'name': 'choice',
+            'placeholder': None,
+            'required': True,
+            'type': 'select',
+            'choices': [(1, 'one'), (2, 'two')],
+        }
