commit 6c96e8ae2971f22f380419b0f0ac72de7708f352
Author: Jess MacQueen <jess@getsentry.com>
Date:   Fri Jul 1 18:04:43 2016 -0700

    wip plugins to react
    
    move github configuration to react form
    
    fix main plugin config page, add error handling to react component
    
    handle plugin not being configured for a project
    
    make external issues tab handle multiple plugins
    
    resolve todos in select2 form field component
    
    add success/error messages for plugin configuration component
    
    improve external issues plugin ui
    
    move route definitions to plugin
    
    move issue plugin forms to modal
    
    add external issues to the sidebar
    
    uncomment error that isn't happening anymore
    
    remove unused methods, add read only fields
    
    move error messages to modal, add basic validation
    
    handle github api errors
    
    move config form into separate component
    
    add assignee back to create form
    
    add helptext and required to react forms

diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 41eebbe209..bd1759960f 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -17,7 +17,7 @@ from sentry.models import (
     GroupSubscriptionReason, GroupStatus, GroupTagKey, GroupTagValue, Release,
     User, UserReport
 )
-from sentry.plugins import plugins
+from sentry.plugins import IssueTrackingPlugin2, plugins
 from sentry.utils.safe import safe_execute
 from sentry.utils.apidocs import scenario, attach_scenarios
 
@@ -117,6 +117,16 @@ class GroupDetailsEndpoint(GroupEndpoint):
 
         return action_list
 
+    def _get_available_issue_plugins(self, request, group):
+        project = group.project
+
+        plugin_issues = []
+        for plugin in plugins.for_project(project, version=1):
+            if isinstance(plugin, IssueTrackingPlugin2):
+                plugin_issues = safe_execute(plugin.plugin_issues, request, group, plugin_issues,
+                                             _with_transaction=False)
+        return plugin_issues
+
     def _get_release_info(self, request, group, version):
         try:
             release = Release.objects.get(
@@ -212,6 +222,7 @@ class GroupDetailsEndpoint(GroupEndpoint):
             'seenBy': seen_by,
             'participants': serialize(participants, request.user),
             'pluginActions': action_list,
+            'pluginIssues': self._get_available_issue_plugins(request, group),
             'userReportCount': UserReport.objects.filter(group=group).count(),
             'tags': sorted(serialize(tags, request.user), key=lambda x: x['name']),
             'stats': {
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 65705193bb..75fa3ed6f2 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import, print_function
 
-from django.conf.urls import patterns, url
+from django.conf.urls import include, patterns, url
 
 from .endpoints.api_tokens import ApiTokensEndpoint
 from .endpoints.auth_index import AuthIndexEndpoint
@@ -356,6 +356,9 @@ urlpatterns = patterns(
         InternalStatsEndpoint.as_view(),
         name='sentry-api-0-internal-stats'),
 
+    # Plugin api
+    url(r'^', include('sentry.plugins.base.api_urls')),
+
     url(r'^$',
         IndexEndpoint.as_view(),
         name='sentry-api-index'),
diff --git a/src/sentry/plugins/base/api_urls.py b/src/sentry/plugins/base/api_urls.py
new file mode 100644
index 0000000000..3eb0efff20
--- /dev/null
+++ b/src/sentry/plugins/base/api_urls.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+
+from django.conf.urls import patterns, include, url
+
+from sentry.plugins import plugins, IssueTrackingPlugin2
+
+
+urlpatterns = patterns('')
+
+for _plugin in plugins.all():
+    if isinstance(_plugin, IssueTrackingPlugin2):
+        _plugin_group_urls = _plugin.get_group_urls()
+        if _plugin_group_urls:
+            urlpatterns += (url('^', include(_plugin_group_urls)),)
+        _plugin_project_urls = _plugin.get_project_urls()
+        if _plugin_project_urls:
+            urlpatterns += (url('^', include(_plugin_project_urls)),)
diff --git a/src/sentry/plugins/base/configuration.py b/src/sentry/plugins/base/configuration.py
index 3acff715c6..69e21f9b2b 100644
--- a/src/sentry/plugins/base/configuration.py
+++ b/src/sentry/plugins/base/configuration.py
@@ -82,6 +82,16 @@ def default_plugin_config(plugin, project, request):
     }, context_instance=RequestContext(request)))
 
 
+def default_issue_plugin_config(plugin, project, form_data):
+    plugin_key = plugin.get_conf_key()
+    for field, value in form_data.iteritems():
+        key = '%s:%s' % (plugin_key, field)
+        if project:
+            ProjectOption.objects.set_value(project, key, value)
+        else:
+            options.set(key, value)
+
+
 def default_plugin_options(plugin, project):
     form_class = plugin.get_conf_form(project)
     if form_class is None:
diff --git a/src/sentry/plugins/bases/__init__.py b/src/sentry/plugins/bases/__init__.py
index c8c3a3c566..f2b32c2461 100644
--- a/src/sentry/plugins/bases/__init__.py
+++ b/src/sentry/plugins/bases/__init__.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from .issue import IssueTrackingPlugin  # NOQA
+from .issue2 import IssueTrackingPlugin2  # NOQA
 from .notify import NotificationPlugin  # NOQA
 from .releasetracking import ReleaseTrackingPlugin  # NOQA
 from .tag import TagPlugin  # NOQA
diff --git a/src/sentry/plugins/bases/issue2.py b/src/sentry/plugins/bases/issue2.py
new file mode 100644
index 0000000000..eab3ddc171
--- /dev/null
+++ b/src/sentry/plugins/bases/issue2.py
@@ -0,0 +1,386 @@
+from rest_framework.response import Response
+from social_auth.models import UserSocialAuth
+
+from django.conf import settings
+from django.conf.urls import patterns, url
+from django.core.urlresolvers import reverse
+from django.utils.html import format_html
+
+from sentry.api.bases.group import GroupEndpoint
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.models import Activity, Event, GroupMeta
+from sentry.plugins import Plugin
+from sentry.plugins.base.configuration import default_issue_plugin_config
+from sentry.utils.auth import get_auth_providers
+from sentry.utils.http import absolute_uri
+from sentry.utils.safe import safe_execute
+
+
+class PluginError(Exception):
+    pass
+
+
+class IssueGroupActionEndpoint(GroupEndpoint):
+    view_method_name = None
+    plugin = None
+
+    def _handle(self, request, group, *args, **kwargs):
+        GroupMeta.objects.populate_cache([group])
+        return getattr(self.plugin, self.view_method_name)(request, group, *args, **kwargs)
+
+    def get(self, request, group, *args, **kwargs):
+        return self._handle(request, group, *args, **kwargs)
+
+    def post(self, request, group, *args, **kwargs):
+        return self._handle(request, group, *args, **kwargs)
+
+
+class IssuePluginProjectEndpoint(ProjectEndpoint):
+    view_method_name = None
+    plugin = None
+
+    def _handle(self, request, project, *args, **kwargs):
+        return getattr(self.plugin, self.view_method_name)(request, project, *args, **kwargs)
+
+    def get(self, request, project, *args, **kwargs):
+        return self._handle(request, project, *args, **kwargs)
+
+    def post(self, request, project, *args, **kwargs):
+        return self._handle(request, project, *args, **kwargs)
+
+
+class IssueTrackingPlugin2(Plugin):
+    auth_provider = None
+    allowed_actions = ('create', 'link', 'unlink')
+
+    def has_project_conf(self):
+        return True
+
+    def get_group_urls(self):
+        _urls = []
+        for action in self.allowed_actions:
+            view_method_name = 'view_%s' % action
+            _urls.append(url(r'^(?:issues|groups)/(?P<issue_id>\d+)/plugin/{action}/{slug}/'.format(action=action, slug=self.slug),
+                             IssueGroupActionEndpoint.as_view(view_method_name=view_method_name, plugin=self)))
+
+        return patterns('', *_urls)
+
+    def get_project_urls(self):
+        _urls = []
+        # TODO: add enable here when moved to api
+        for action in ('configure', 'disable'):
+            view_method_name = 'view_%s' % action
+            _urls.append(url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/plugin/{action}/{slug}'.format(action=action, slug=self.slug),
+                             IssuePluginProjectEndpoint.as_view(view_method_name=view_method_name, plugin=self)))
+
+        return patterns('', *_urls)
+
+    def _get_group_body(self, request, group, event, **kwargs):
+        result = []
+        for interface in event.interfaces.itervalues():
+            output = safe_execute(interface.to_string, event, _with_transaction=False)
+            if output:
+                result.append(output)
+        return '\n\n'.join(result)
+
+    def _get_group_description(self, request, group, event):
+        output = [
+            absolute_uri(group.get_absolute_url()),
+        ]
+        body = self._get_group_body(request, group, event)
+        if body:
+            output.extend([
+                '',
+                '```',
+                body,
+                '```',
+            ])
+        return '\n'.join(output)
+
+    def _get_group_title(self, request, group, event):
+        return event.error()
+
+    def is_configured(self, request, project, **kwargs):
+        raise NotImplementedError
+
+    def get_auth_for_user(self, user, **kwargs):
+        """
+        Return a ``UserSocialAuth`` object for the given user based on this plugins ``auth_provider``.
+        """
+        assert self.auth_provider, 'There is no auth provider configured for this plugin.'
+
+        if not user.is_authenticated():
+            return None
+
+        try:
+            return UserSocialAuth.objects.filter(user=user, provider=self.auth_provider)[0]
+        except IndexError:
+            return None
+
+    def needs_auth(self, request, project, **kwargs):
+        """
+        Return ``True`` if the authenticated user needs to associate an auth service before
+        performing actions with this plugin.
+        """
+        if self.auth_provider is None:
+            return False
+
+        if not request.user.is_authenticated():
+            return True
+
+        return bool(not UserSocialAuth.objects.filter(user=request.user, provider=self.auth_provider).exists())
+
+    def get_new_issue_fields(self, request, group, event, **kwargs):
+        """
+        If overriding, supported properties include 'readonly': true
+        """
+        return [{
+            'name': 'title',
+            'label': 'Title',
+            'default': self._get_group_title(request, group, event),
+            'type': 'text'
+        }, {
+            'name': 'description',
+            'label': 'Description',
+            'default': self._get_group_description(request, group, event),
+            'type': 'textarea'
+        }]
+
+    def get_link_existing_issue_fields(self, request, group, event, **kwargs):
+        return []
+
+    def get_configure_plugin_fields(self, request, project, **kwargs):
+        """
+        Must be overridden by plugins that require configuration.
+        """
+        raise NotImplementedError
+
+    def get_issue_url(self, group, issue_id, **kwargs):
+        """
+        Given an issue_id (string) return an absolute URL to the issue's details
+        page.
+        """
+        raise NotImplementedError
+
+    # TODO: should this return more than just title?
+    def get_issue_title_by_id(self, request, group, issue_id):
+        """
+        Given an issue_id return the issue's title.
+        """
+        raise NotImplementedError
+
+    def get_issue_label(self, group, issue_id, **kwargs):
+        """
+        Given an issue_id (string) return a string representing the issue.
+
+        e.g. GitHub represents issues as GH-XXX
+        """
+        return '#%s' % issue_id
+
+    def create_issue(self, request, group, form_data, **kwargs):
+        """
+        Creates the issue on the remote service and returns an issue ID.
+        """
+        raise NotImplementedError
+
+    def link_issue(self, request, group, form_data, **kwargs):
+        """
+        Can be overridden for any actions needed when linking issues
+        (like adding a comment to an existing issue).
+        """
+        pass
+
+    def has_auth_configured(self, **kwargs):
+        if not self.auth_provider:
+            return True
+
+        return self.auth_provider in get_auth_providers()
+
+    def validate_form(self, fields, form_data):
+        errors = {}
+        for field in fields:
+            if field.get('required', True) and not field.get('readonly'):
+                value = form_data.get(field['name'])
+                if value is None or value == '':
+                    errors[field['name']] = u'%s is a required field.' % field['label']
+        return errors
+
+    def view_create(self, request, group, **kwargs):
+        auth_errors = self.check_config_and_auth(request, group)
+        if auth_errors:
+            return Response(auth_errors, status=400)
+
+        event = group.get_latest_event()
+        Event.objects.bind_nodes([event], 'data')
+        fields = self.get_new_issue_fields(request, group, event, **kwargs)
+        if request.method == 'GET':
+            return Response(fields)
+
+        errors = self.validate_form(fields, request.DATA)
+        if errors:
+            return Response({
+                'error_type': 'validation',
+                'errors': errors
+            }, status=400)
+
+        try:
+            issue_id = self.create_issue(
+                group=group,
+                form_data=request.DATA,
+                request=request,
+            )
+        except PluginError as e:
+            return Response({
+                'error_type': 'validation',
+                'errors': [{'__all__': e.message}]
+            })
+        GroupMeta.objects.set_value(group, '%s:tid' % self.get_conf_key(), issue_id)
+
+        issue_information = {
+            'title': request.DATA['title'],
+            'provider': self.get_title(),
+            'location': self.get_issue_url(group, issue_id),
+            'label': self.get_issue_label(group=group, issue_id=issue_id),
+        }
+        Activity.objects.create(
+            project=group.project,
+            group=group,
+            type=Activity.CREATE_ISSUE,
+            user=request.user,
+            data=issue_information,
+        )
+
+        # issue_tracker_used.send(plugin=self, project=group.project, user=request.user, sender=IssueTrackingPlugin)
+        return Response({'success': True, 'issue_url': self.get_issue_url(group=group, issue_id=issue_id)})
+
+    def view_unlink(self, request, group, **kwargs):
+        auth_errors = self.check_config_and_auth(request, group)
+        if auth_errors:
+            return Response(auth_errors, status=400)
+        if GroupMeta.objects.get_value(group, '%s:tid' % self.get_conf_key(), None):
+            if 'unlink' in self.allowed_actions:
+                GroupMeta.objects.unset_value(group, '%s:tid' % self.get_conf_key())
+                return Response({'success': True, 'message': 'Successfully unlinked issue.'})
+            return Response({'success': False, 'message': 'No issues to unlink.'})
+
+    def view_link(self, request, group, **kwargs):
+        auth_errors = self.check_config_and_auth(request, group)
+        if auth_errors:
+            return Response(auth_errors, status=400)
+        event = group.get_latest_event()
+        Event.objects.bind_nodes([event], 'data')
+        fields = self.get_link_existing_issue_fields(request, group, event, **kwargs)
+        if request.method == 'GET':
+            return Response(fields)
+        errors = self.validate_form(fields, request.DATA)
+        if errors:
+            return Response({
+                'error_type': 'validation',
+                'errors': errors
+            }, status=400)
+        try:
+            self.link_issue(
+                group=group,
+                form_data=request.DATA,
+                request=request,
+            )
+        except PluginError as e:
+            return Response({
+                'error_type': 'validation',
+                'errors': [{'__all__': e.message}]
+            })
+
+        issue_id = int(request.DATA['issue_id'])
+        GroupMeta.objects.set_value(group, '%s:tid' % self.get_conf_key(), issue_id)
+        issue_information = {
+            'title': self.get_issue_title_by_id(request, group, issue_id),
+            'provider': self.get_title(),
+            'location': self.get_issue_url(group, issue_id),
+            'label': self.get_issue_label(group=group, issue_id=issue_id),
+        }
+        Activity.objects.create(
+            project=group.project,
+            group=group,
+            type=Activity.CREATE_ISSUE,
+            user=request.user,
+            data=issue_information,
+        )
+        return Response({'success': True, 'message': 'Successfully linked issue.'})
+
+    def view_configure(self, request, project, **kwargs):
+        if request.method == 'GET':
+            return Response(self.get_configure_plugin_fields(request, project, **kwargs))
+        self.configure(project, request.DATA)
+        return Response({'sucess': True, 'message': 'Successfully updated configuration.'})
+
+    def configure(self, project, form_data):
+        """Configures the plugin"""
+        default_issue_plugin_config(self, project, form_data)
+
+    def view_disable(self, request, project, **kwargs):
+        if self.can_disable:
+            self.disable(project)
+            return Response({'message': 'Successfully disabled plugin'})
+        return Response({'message': 'Plugin cannot be disabled'}, status=400)
+
+    def check_config_and_auth(self, request, group):
+        has_auth_configured = self.has_auth_configured()
+        if not (has_auth_configured and self.is_configured(project=group.project, request=request)):
+            if self.auth_provider:
+                required_auth_settings = settings.AUTH_PROVIDERS[self.auth_provider]
+            else:
+                required_auth_settings = None
+
+            return {
+                'error_type': 'config',
+                'title': self.get_title(),
+                'slug': self.slug,
+                'has_auth_configured': has_auth_configured,
+                'auth_provider': self.auth_provider,
+                'required_auth_settings': required_auth_settings,
+            }
+
+        if self.needs_auth(project=group.project, request=request):
+            return {
+                'error_type': 'auth',
+                'title': self.get_title(),
+                'auth_url': reverse('socialauth_associate_begin', args=[self.auth_provider])
+            }
+
+    def plugin_issues(self, request, group, plugin_issues, **kwargs):
+        if not self.is_configured(request=request, project=group.project):
+            return plugin_issues
+        prefix = self.get_conf_key()
+        issue_id = GroupMeta.objects.get_value(group, '%s:tid' % prefix, None)
+        item = {
+            'slug': self.slug,
+            'allowed_actions': self.allowed_actions,
+            'title': self.get_title()
+        }
+        if issue_id:
+            item['issue'] = {
+                'issue_id': issue_id,
+                'url': self.get_issue_url(group=group, issue_id=issue_id),
+                'label': self.get_issue_label(group=group, issue_id=issue_id),
+            }
+        plugin_issues.append(item)
+        return plugin_issues
+
+    # TODO: should we get rid of this (move it to react?)
+    def tags(self, request, group, tag_list, **kwargs):
+        if not self.is_configured(request=request, project=group.project):
+            return tag_list
+
+        prefix = self.get_conf_key()
+        issue_id = GroupMeta.objects.get_value(group, '%s:tid' % prefix)
+        if not issue_id:
+            return tag_list
+
+        tag_list.append(format_html('<a href="{}">{}</a>',
+            self.get_issue_url(group=group, issue_id=issue_id),
+            self.get_issue_label(group=group, issue_id=issue_id),
+        ))
+
+        return tag_list
+
+IssuePlugin2 = IssueTrackingPlugin2
diff --git a/src/sentry/receivers/onboarding.py b/src/sentry/receivers/onboarding.py
index 9f51912aea..c83f8f3132 100644
--- a/src/sentry/receivers/onboarding.py
+++ b/src/sentry/receivers/onboarding.py
@@ -10,7 +10,7 @@ from sentry.models import (
     OrganizationOnboardingTask,
     OrganizationOption
 )
-from sentry.plugins import IssueTrackingPlugin, NotificationPlugin
+from sentry.plugins import IssueTrackingPlugin, IssueTrackingPlugin2, NotificationPlugin
 from sentry.signals import (
     event_processed,
     project_created,
@@ -216,7 +216,7 @@ def record_sourcemaps_received(project, group, event, **kwargs):
 
 @plugin_enabled.connect(weak=False)
 def record_plugin_enabled(plugin, project, user, **kwargs):
-    if isinstance(plugin, IssueTrackingPlugin):
+    if isinstance(plugin, IssueTrackingPlugin) or isinstance(plugin, IssueTrackingPlugin2):
         task = OnboardingTask.ISSUE_TRACKER
         status = OnboardingTaskStatus.PENDING
     elif isinstance(plugin, NotificationPlugin):
diff --git a/src/sentry/static/sentry/app/actions/groupActions.jsx b/src/sentry/static/sentry/app/actions/groupActions.jsx
index 2a0ab116a8..8e11b7b34a 100644
--- a/src/sentry/static/sentry/app/actions/groupActions.jsx
+++ b/src/sentry/static/sentry/app/actions/groupActions.jsx
@@ -16,7 +16,8 @@ let GroupActions = Reflux.createActions([
   'updateSuccess',
   'merge',
   'mergeError',
-  'mergeSuccess'
+  'mergeSuccess',
+  'groupPluginChange'
 ]);
 
 
diff --git a/src/sentry/static/sentry/app/components/forms/booleanField.jsx b/src/sentry/static/sentry/app/components/forms/booleanField.jsx
index 1424241948..2b4d0b3526 100644
--- a/src/sentry/static/sentry/app/components/forms/booleanField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/booleanField.jsx
@@ -15,7 +15,7 @@ export default class BooleanField extends InputField {
       <input id={this.getId()}
           type={this.getType()}
           style={{marginLeft: '10px'}}
-          onChange={this.onChange}
+          onChange={this.onChange.bind(this)}
           disabled={this.props.disabled}
           defaultChecked={this.state.value} />
     );
diff --git a/src/sentry/static/sentry/app/components/forms/index.jsx b/src/sentry/static/sentry/app/components/forms/index.jsx
index 49168f69ed..8c4e84b78a 100644
--- a/src/sentry/static/sentry/app/components/forms/index.jsx
+++ b/src/sentry/static/sentry/app/components/forms/index.jsx
@@ -9,6 +9,8 @@ export {default as CheckboxField} from './checkboxField';
 export {default as Form} from './form';
 export {default as EmailField} from './emailField';
 export {default as MultipleCheckboxField} from './multipleCheckboxField';
+export {default as Select2FieldAutocomplete} from './select2FieldAutocomplete';
+export {default as Select2Field} from './select2Field';
 export {default as TextField} from './textField';
 export {default as TextareaField} from './textareaField';
 
diff --git a/src/sentry/static/sentry/app/components/forms/select2Field.jsx b/src/sentry/static/sentry/app/components/forms/select2Field.jsx
new file mode 100644
index 0000000000..df6d50ac15
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/select2Field.jsx
@@ -0,0 +1,39 @@
+import React from 'react';
+import ReactDOM from 'react-dom';
+
+import InputField from './inputField';
+
+export default class Select2Field extends InputField {
+  getField() {
+    return (
+      <select id={this.getId()}
+          className="form-control"
+          onChange={this.onChange.bind(this)}
+          disabled={this.props.disabled}
+          value={this.state.value}>
+          {this.props.choices.map((choice) => {
+            return (
+              <option key={choice[0]}
+                      value={choice[0]}>{choice[1]}</option>
+            );
+          })}
+      </select>
+    );
+  }
+
+  componentDidMount() {
+    let $el = $('select', ReactDOM.findDOMNode(this));
+    $el.on('change.select2field', this.onChange.bind(this));
+
+    // TODO(jess): upgrade select2 so we can just do
+    // dropdownParent: $('.modal-dialog') as a supported option
+    $('.modal').removeAttr('tabindex');
+    $el.select2();
+  }
+
+  componentWillUnmount() {
+    let $el = $('select', ReactDOM.findDOMNode(this));
+    $el.off('change.select2field');
+  }
+
+}
diff --git a/src/sentry/static/sentry/app/components/forms/select2FieldAutocomplete.jsx b/src/sentry/static/sentry/app/components/forms/select2FieldAutocomplete.jsx
new file mode 100644
index 0000000000..192a6db6f4
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/select2FieldAutocomplete.jsx
@@ -0,0 +1,48 @@
+import ReactDOM from 'react-dom';
+import InputField from './inputField';
+
+export default class Select2FieldAutocomplete extends InputField {
+  getType() {
+    return 'text';
+  }
+
+  componentDidMount() {
+    let $el = $('input', ReactDOM.findDOMNode(this));
+    $el.on('change.autocomplete', this.onChange.bind(this));
+    let url = this.props.url + '?autocomplete_field=' + this.props.name;
+
+    // TODO(jess): upgrade select2 so we can just do
+    // dropdownParent: $('.modal-dialog') as a supported option
+    $('.modal').removeAttr('tabindex');
+    $el.select2({
+      placeholder: 'Start typing to search for an issue',
+      minimumInputLength: 1,
+      ajax: {
+        quietMillis: 100,
+        url: url,
+        dataType: 'json',
+        data: (q) => {
+          return {autocomplete_query: q};
+        },
+        results: (data) => {
+          return {results: data[this.props.name]};
+        }
+      },
+      formatAjaxError: (error) => {
+        let resp = error.responseJSON;
+        if (resp && resp.error_type === 'validation') {
+          let message = resp.errors[0] && resp.errors[0].__all__;
+          if (message) {
+            return message;
+          }
+        }
+        return 'Loading failed';
+      }
+    });
+  }
+
+  componentWillUnmount() {
+    let $el = $('input', ReactDOM.findDOMNode(this));
+    $el.off('change.autocomplete');
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx b/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
new file mode 100644
index 0000000000..284f2bc6ff
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
@@ -0,0 +1,423 @@
+import React from 'react';
+import _ from 'underscore';
+import Modal from 'react-bootstrap/lib/Modal';
+import AlertActions from '../../actions/alertActions';
+import ApiMixin from '../../mixins/apiMixin';
+import {Form, Select2Field, Select2FieldAutocomplete, TextareaField, TextField} from '../../components/forms';
+import DropdownLink from '../../components/dropdownLink';
+import GroupActions from '../../actions/groupActions';
+import GroupState from '../../mixins/groupState';
+import LoadingError from '../../components/loadingError';
+import LoadingIndicator from '../../components/loadingIndicator';
+import MenuItem from '../../components/menuItem';
+import {t} from '../../locale';
+import {defined, toTitleCase} from '../../utils';
+
+const IssuePlugin = React.createClass({
+  propTypes: {
+    plugin: React.PropTypes.object.isRequired,
+    actionType: React.PropTypes.oneOf(['unlink', 'link', 'create']).isRequired,
+    onSuccess: React.PropTypes.func
+  },
+
+  mixins: [
+    ApiMixin,
+    GroupState
+  ],
+
+  getInitialState() {
+    return {
+      createFieldList: null,
+      linkFieldList: null,
+      loading: _.contains(['link', 'create'], this.props.actionType),
+      error: null,
+      createFormData: {},
+      linkFormData: {}
+    };
+  },
+
+  componentWillMount() {
+    let plugin = this.props.plugin;
+    if (!plugin.issue && this.props.actionType !== 'unlink') {
+      this.fetchData();
+    }
+  },
+
+  getPluginCreateEndpoint() {
+    return ('/issues/' + this.getGroup().id +
+            '/plugin/create/' + this.props.plugin.slug + '/');
+  },
+
+  getPluginLinkEndpoint() {
+    return ('/issues/' + this.getGroup().id +
+            '/plugin/link/' + this.props.plugin.slug + '/');
+  },
+
+  getPluginUnlinkEndpoint() {
+    return ('/issues/' + this.getGroup().id +
+            '/plugin/unlink/' + this.props.plugin.slug + '/');
+  },
+
+  setError(error, defaultMessage) {
+    let _error;
+    if (error.status === 400 && error.responseJSON) {
+      _error = error.responseJSON;
+    } else {
+      _error = {'message': defaultMessage};
+    }
+    this.setState({error: _error});
+  },
+
+  fetchData() {
+    this.setState({
+      loading: true
+    });
+
+    if (this.props.actionType === 'create') {
+      this.api.request(this.getPluginCreateEndpoint(), {
+        success: (data) => {
+          let createFormData = {};
+          data.forEach((field) => {
+            createFormData[field.name] = field.default;
+          });
+          this.setState({
+            createFieldList: data,
+            error: null,
+            loading: false,
+            createFormData: createFormData
+          });
+        },
+        error: (error) => {
+          let state = {
+            loading: false
+          };
+          if (error.status === 400 && error.responseJSON) {
+            state.error = error.responseJSON;
+          }
+          this.setState(state);
+        }
+      });
+    } else if (this.props.actionType === 'link') {
+      this.api.request(this.getPluginLinkEndpoint(), {
+        success: (data) => {
+          let linkFormData = {};
+          data.forEach((field) => {
+            linkFormData[field.name] = field.default;
+          });
+          this.setState({
+            linkFieldList: data,
+            error: null,
+            loading: false,
+            linkFormData: linkFormData
+          });
+        },
+        error: (error) => {
+          let state = {
+            loading: false
+          };
+          if (error.status === 400 && error.responseJSON) {
+            state.error = error.responseJSON;
+          }
+          this.setState(state);
+        }
+      });
+    }
+  },
+
+  createIssue() {
+    this.api.request(this.getPluginCreateEndpoint(), {
+      data: this.state.createFormData,
+      success: (data) => {
+        GroupActions.groupPluginChange(this.getGroup().id);
+        AlertActions.addAlert({
+          message: t('Successfully created issue.'),
+          type: 'success'
+        });
+        this.props.onSuccess && this.props.onSuccess();
+      },
+      error: (error) => {
+        this.setError(error, t('There was an error creating the issue.'));
+      }
+    });
+  },
+
+  linkIssue() {
+    this.api.request(this.getPluginLinkEndpoint(), {
+      data: this.state.linkFormData,
+      success: (data) => {
+        GroupActions.groupPluginChange(this.getGroup().id);
+        AlertActions.addAlert({
+          message: t('Successfully linked issue.'),
+          type: 'success'
+        });
+        this.props.onSuccess && this.props.onSuccess();
+      },
+      error: (error) => {
+        this.setError(error, t('There was an error linking the issue.'));
+      }
+    });
+  },
+
+  unlinkIssue() {
+    this.api.request(this.getPluginUnlinkEndpoint(), {
+      success: (data) => {
+        GroupActions.groupPluginChange(this.getGroup().id);
+        AlertActions.addAlert({
+          message: t('Successfully unlinked issue.'),
+          type: 'success'
+        });
+        this.props.onSuccess && this.props.onSuccess();
+      },
+      error: (error) => {
+        this.setError(error, t('There was an error unlinking the issue.'));
+      }
+    });
+  },
+
+  changeField(action, name, value) {
+    let key = action + 'FormData';
+    let formData = this.state[key];
+    formData[name] = value;
+    let state = {};
+    state[key] = formData;
+    this.setState(state);
+  },
+
+  renderField(action, field) {
+    let el;
+    let required = defined(field.required) ? field.required : true;
+    let props = {
+      value: this.state[action + 'FormData'][field.name],
+      onChange: this.changeField.bind(this, action, field.name),
+      label: field.label + (required ? '*' : ''),
+      name: field.name,
+      disabled: field.readonly,
+      help: <span dangerouslySetInnerHTML={{__html: field.help}}/>
+    };
+    switch (field.type) {
+      case 'text':
+        el = <TextField {...props} />;
+        break;
+      case 'textarea':
+        el = <TextareaField {...props} />;
+        break;
+      case 'select':
+        if (field.has_autocomplete) {
+          props.url = ('/api/0/issues/' + this.getGroup().id +
+                       '/plugin/autocomplete/' + this.props.plugin.slug);
+          el = <Select2FieldAutocomplete {...props} />;
+        } else {
+          props.choices = field.choices;
+          el = <Select2Field {...props} />;
+        }
+        break;
+      default:
+        el = null;
+    }
+    return el;
+  },
+
+  renderForm() {
+    let form;
+    switch (this.props.actionType) {
+      case 'create':
+        if (this.state.createFieldList) {
+          form = (
+            <Form onSubmit={this.createIssue} submitLabel={t('Create Issue')}>
+              {this.state.createFieldList.map((field) => {
+                return <div key={field.name}>{this.renderField('create', field)}</div>;
+              })}
+            </Form>
+          );
+        }
+        break;
+      case 'link':
+        if (this.state.linkFieldList) {
+          form = (
+            <Form onSubmit={this.linkIssue} submitLabel={t('Link Issue')}>
+              {this.state.linkFieldList.map((field) => {
+                return <div key={field.name}>{this.renderField('link', field)}</div>;
+              })}
+            </Form>
+          );
+        }
+        break;
+      case 'unlink':
+        form = (
+          <div>
+            <p>{t('Are you sure you want to unlink this issue?')}</p>
+            <button onClick={this.unlinkIssue}
+                    className="btn btn-danger">{t('Unlink Issue')}</button>
+          </div>
+        );
+        break;
+      default:
+        form = null;
+    }
+    return form;
+  },
+
+  getPluginConfigureUrl() {
+    let org = this.getOrganization();
+    let project = this.getProject();
+    let plugin = this.props.plugin;
+    return '/' + org.slug + '/' + project.slug + '/settings/plugins/' + plugin.slug;
+  },
+
+  renderError() {
+    let error = this.state.error;
+    if (!error) {
+      return null;
+    }
+    if (error.error_type === 'auth') {
+      return (
+        <div className="alert alert-block">
+          <p>You still need to <a href={error.auth_url}>associate an identity</a>
+           {' with ' + error.title + ' before you can create issues with this service.'}</p>
+        </div>
+      );
+    } else if (error.error_type === 'config') {
+      return (
+        <div className="alert alert-block">
+            {!error.has_auth_configured ?
+                <div>
+                  <p>{('Your server administrator will need to configure authentication with ')}
+                  <strong>{error.auth_provider}</strong>{(' before you can use this plugin.')}</p>
+                  <p>{('The following settings must be configured:')}</p>
+                  <ul>{error.required_auth_settings.map((setting) => {
+                    return <li><code>{setting}</code></li>;
+                  })}</ul>
+                </div>
+              :
+              <p>You still need to <a href={this.getPluginConfigureUrl()}>configure this plugin</a> before you can use it.</p>}
+        </div>
+      );
+    } else if (error.error_type === 'validation') {
+      let errors = [];
+      for (let name in error.errors) {
+        errors.push(<p key={name}>{error.errors[name]}</p>);
+      }
+      return (
+        <div className="alert alert-error alert-block">
+          {errors}
+        </div>
+      );
+    } else if (error.message) {
+      return (
+        <div className="alert alert-error alert-block">
+          <p>{error.message}</p>
+        </div>
+      );
+    }
+    return <LoadingError/>;
+  },
+
+  render() {
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    }
+    return (
+      <div>
+        {this.renderError()}
+        {this.renderForm()}
+      </div>
+    );
+  }
+});
+
+
+const IssuePluginActions = React.createClass({
+  propTypes: {
+    plugin: React.PropTypes.object.isRequired
+  },
+
+  mixins: [
+    ApiMixin,
+    GroupState
+  ],
+
+  getInitialState() {
+    return {
+      showModal: false,
+      actionType: null
+    };
+  },
+
+  openModal(action) {
+    this.setState({
+      showModal: true,
+      actionType: action
+    });
+  },
+
+  closeModal() {
+    this.setState({
+      showModal: false,
+      actionType: null
+    });
+  },
+
+  render() {
+    let plugin = this.props.plugin;
+
+    if (!plugin.allowed_actions || !plugin.allowed_actions.length) {
+      return null;
+    }
+
+    let allowedActions;
+    if (plugin.issue) {
+      allowedActions = plugin.allowed_actions.filter((action) => { return action === 'unlink'; });
+    } else {
+      allowedActions = plugin.allowed_actions.filter((action) => { return action !== 'unlink'; });
+    }
+
+    let button;
+    if (allowedActions.length === 1) {
+      button = (
+        <button className="btn btn-default btn-sm"
+                onClick={this.openModal.bind(this, allowedActions[0])}>
+          {toTitleCase(allowedActions[0]) + ' ' + plugin.title}
+        </button>
+      );
+    } else {
+      button = (
+        <div className="btn-group">
+          <DropdownLink
+            caret={false}
+            className="btn btn-default btn-sm"
+            title={<span>
+                     {plugin.title}
+                     <span className="icon-arrow-down" style={{marginLeft: 3, marginRight: -3}} />
+                   </span>}>
+            {allowedActions.map((action) => {
+              return (
+                <MenuItem key={action} noAnchor={true}>
+                  <a onClick={this.openModal.bind(this, action)}>{toTitleCase(action)}</a>
+                </MenuItem>
+              );
+            })}
+          </DropdownLink>
+        </div>
+      );
+    }
+
+    return (
+      <span>
+        {button}
+        <Modal show={this.state.showModal} onHide={this.closeModal}
+               animation={false} backdrop="static">
+          <Modal.Header closeButton>
+            <Modal.Title>{plugin.title + ' Issue'}</Modal.Title>
+          </Modal.Header>
+          <Modal.Body>
+            <IssuePlugin plugin={this.props.plugin}
+                         actionType={this.state.actionType}
+                         onSuccess={this.closeModal}/>
+          </Modal.Body>
+        </Modal>
+      </span>
+    );
+  }
+});
+
+export default IssuePluginActions;
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index cdcad42996..324b477724 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -47,6 +47,28 @@ const GroupSidebar = React.createClass({
     });
   },
 
+  renderPluginIssue() {
+    let issues = [];
+    this.props.group.pluginIssues.forEach((plugin) => {
+      let issue = plugin.issue;
+      if (issue) {
+        issues.push(
+          <dl key={plugin.slug}>
+            <dt>{plugin.title + ': '}</dt><dd><a href={issue.url}>{issue.label}</a></dd>
+          </dl>
+        );
+      }
+    });
+    if (issues.length) {
+      return (
+        <div>
+          <h6><span>{t('External Issues')}</span></h6>
+          {issues}
+        </div>
+      );
+    }
+  },
+
   render() {
     let project = this.getProject();
     let projectId = project.slug;
@@ -62,6 +84,8 @@ const GroupSidebar = React.createClass({
             location={this.context.location}
             defaultEnvironment={defaultEnvironment} />
 
+        {this.renderPluginIssue()}
+
         <h6><span>{t('Tags')}</span></h6>
         {group.tags.map((data) => {
           return (
diff --git a/src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx b/src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx
new file mode 100644
index 0000000000..cd2889910d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx
@@ -0,0 +1,130 @@
+import React from 'react';
+import AlertActions from '../../actions/alertActions';
+import ApiMixin from '../../mixins/apiMixin';
+import {Form, Select2Field, Select2FieldAutocomplete, TextareaField, TextField} from '../forms';
+import LoadingIndicator from '../loadingIndicator';
+import {t} from '../../locale';
+import {defined} from '../../utils';
+
+const IssuePluginConfigForm = React.createClass({
+  propTypes: {
+    organization: React.PropTypes.object.isRequired,
+    project: React.PropTypes.object.isRequired,
+    plugin: React.PropTypes.object
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      fieldList: null,
+      formData: null
+    };
+  },
+
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  getPluginConfigureEndpoint() {
+    let org = this.props.organization;
+    let project = this.props.project;
+    return ('/projects/' + org.slug + '/' + project.slug +
+            '/plugin/configure/' + this.props.plugin.slug + '/');
+  },
+
+  fetchData() {
+    this.api.request(this.getPluginConfigureEndpoint(), {
+      success: (data) => {
+        let formData = {};
+        data.forEach((field) => {
+          formData[field.name] = field.default;
+        });
+        this.setState({
+          fieldList: data,
+          error: false,
+          loading: false,
+          formData: formData
+        });
+      },
+      error: (error) => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
+  changeField(name, value) {
+    let formData = this.state.formData;
+    formData[name] = value;
+    this.setState({formData: formData});
+  },
+
+  renderField(field) {
+    let el;
+    let required = defined(field.required) ? field.required : true;
+    let props = {
+      value: this.state.formData[field.name],
+      onChange: this.changeField.bind(this, field.name),
+      label: field.label + (required ? '*' : ''),
+      placeholder: field.placeholder,
+      name: field.name,
+      disabled: field.readonly,
+      help: <span dangerouslySetInnerHTML={{__html: field.help}}/>
+    };
+    switch (field.type) {
+      case 'text':
+        el = <TextField {...props} />;
+        break;
+      case 'textarea':
+        el = <TextareaField {...props} />;
+        break;
+      case 'select':
+        if (field.has_autocomplete) {
+          el = <Select2FieldAutocomplete {...props} />;
+        } else {
+          props.choices = field.choices;
+          el = <Select2Field {...props} />;
+        }
+        break;
+      default:
+        el = null;
+    }
+    return el;
+  },
+
+  onSubmit() {
+    this.api.request(this.getPluginConfigureEndpoint(), {
+      data: this.state.formData,
+      success: (data) => {
+        AlertActions.addAlert({
+          message: t('Successfully saved plugin settings.'),
+          type: 'success'
+        });
+      },
+      error: (error) => {
+        AlertActions.addAlert({
+          message: t('There was an error saving the plugin configuration.'),
+          type: 'error'
+        });
+      }
+    });
+  },
+
+  render() {
+    if (!this.state.fieldList) {
+      return <LoadingIndicator />;
+    }
+    return (
+      <Form onSubmit={this.onSubmit}>
+        {this.state.fieldList.map((field) => {
+          return <div key={field.name}>{this.renderField(field)}</div>;
+        })}
+      </Form>
+    );
+  }
+});
+
+export default IssuePluginConfigForm;
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index 3bb90ca460..9f51bae887 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -58,6 +58,8 @@ export default {
     FlotChart: require('./components/flotChart'),
     HookStore: require('./stores/hookStore'),
     Indicators: require('./components/indicators'),
+    IssuePluginConfigForm: require('./components/plugins/pluginConfigureForm'),
+    IssuePluginConfiguration: require('./views/projectIssueTracking'),
     LoadingError: require('./components/loadingError'),
     LoadingIndicator: require('./components/loadingIndicator'),
     ListLink: require('./components/listLink'),
diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index 776f66a009..dbdc152776 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -336,6 +336,10 @@ const GroupStore = Reflux.createStore({
     });
     this.pendingChanges.remove(changeId);
     this.trigger(new Set(itemIds));
+  },
+
+  onGroupPluginChange(itemId) {
+    this.trigger(new Set([itemId]), true);
   }
 });
 
diff --git a/src/sentry/static/sentry/app/views/groupDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails.jsx
index cfe672a2a6..28e34c23ed 100644
--- a/src/sentry/static/sentry/app/views/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails.jsx
@@ -110,9 +110,13 @@ const GroupDetails = React.createClass({
     });
   },
 
-  onGroupChange(itemIds) {
+  onGroupChange(itemIds, isPluginChange) {
     let id = this.props.params.groupId;
     if (itemIds.has(id)) {
+      // TODO: do this in a less hacky way
+      if (isPluginChange) {
+        this.fetchData();
+      }
       this.setState({
         group: GroupStore.get(id),
       });
diff --git a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
index f6a04c0de5..020d5f6e8f 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
@@ -4,6 +4,7 @@ import ApiMixin from '../../mixins/apiMixin';
 import DropdownLink from '../../components/dropdownLink';
 import GroupState from '../../mixins/groupState';
 import IndicatorStore from '../../stores/indicatorStore';
+import IssuePluginActions from '../../components/group/issuePluginActions';
 import MenuItem from '../../components/menuItem';
 import LinkWithConfirmation from '../../components/linkWithConfirmation';
 import TooltipMixin from '../../mixins/tooltip';
@@ -223,6 +224,9 @@ const GroupActions = React.createClass({
             );
           })
         }
+        {group.pluginIssues && group.pluginIssues.map((plugin) => {
+          return <IssuePluginActions key={plugin.slug} plugin={plugin}/>;
+        })}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/projectIssueTracking.jsx b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
new file mode 100644
index 0000000000..2d3949dc84
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
@@ -0,0 +1,63 @@
+import React from 'react';
+import AlertActions from '../actions/alertActions';
+import ApiMixin from '../mixins/apiMixin';
+import IssuePluginConfigForm from '../components/plugins/pluginConfigureForm';
+import {t} from '../locale';
+
+const IssuePluginConfiguration = React.createClass({
+  propTypes: {
+    organization: React.PropTypes.object.isRequired,
+    project: React.PropTypes.object.isRequired,
+    plugins: React.PropTypes.array.isRequired
+  },
+
+  mixins: [ApiMixin],
+
+  getPluginDisableEndpoint(plugin) {
+    let org = this.props.organization;
+    let project = this.props.project;
+    return ('/projects/' + org.slug + '/' + project.slug +
+            '/plugin/disable/' + plugin.slug + '/');
+  },
+
+  disablePlugin(plugin) {
+    this.api.request(this.getPluginDisableEndpoint(plugin), {
+      success: () => {
+        // When this whole page is a react view, this won't be necessary
+        window.location.reload();
+      },
+      error: (error) => {
+        AlertActions.addAlert({
+          message: t('There was an error disabling the plugin'),
+          type: 'error'
+        });
+      }
+    });
+  },
+
+  render() {
+    if (!this.props.plugins.length) {
+      return null;
+    }
+    return (
+      <div>
+        {this.props.plugins.map((plugin) => {
+          return (
+            <div className="box">
+              <div className="box-header">
+                {plugin.can_disable && plugin.is_enabled &&
+                  <button className="btn btn-sm btn-default pull-right"
+                          onClick={this.disablePlugin.bind(this, plugin)}>{t('Disable')}</button>}
+                <h3>{plugin.title}</h3>
+              </div>
+              <div className="box-content with-padding">
+                <IssuePluginConfigForm plugin={plugin} key={plugin.slug} {...this.props}/>
+              </div>
+            </div>
+          );
+        })}
+      </div>);
+  }
+});
+
+export default IssuePluginConfiguration;
diff --git a/src/sentry/templates/sentry/project-issue-tracking.html b/src/sentry/templates/sentry/project-issue-tracking.html
index 2af9cfa3d3..a4adf05bfa 100644
--- a/src/sentry/templates/sentry/project-issue-tracking.html
+++ b/src/sentry/templates/sentry/project-issue-tracking.html
@@ -33,6 +33,8 @@
       </div>
     {% endfor %}
 
+    <div id="issue_plugins"></div>
+
     {% if other_plugins %}
       <div class="box">
         <div class="box-header">
@@ -59,4 +61,14 @@
       <p>There are no issue tracker integrations available. Ask your Sentry team about integrating with your favorite project management tools.</p>
     </div>
   {% endif %}
+
+  <script>
+  $(function(){
+    React.render(React.createFactory(Sentry.IssuePluginConfiguration)({
+      project: {% serialize project %},
+      organization: {% serialize organization %},
+      plugins: {% serialize issue_v2_plugins %}
+    }), document.getElementById('issue_plugins'));
+  });
+  </script>
 {% endblock %}
diff --git a/src/sentry/templates/sentry/projects/plugins/configure.html b/src/sentry/templates/sentry/projects/plugins/configure.html
index 8569bd5670..3625329c76 100644
--- a/src/sentry/templates/sentry/projects/plugins/configure.html
+++ b/src/sentry/templates/sentry/projects/plugins/configure.html
@@ -39,7 +39,11 @@
                     <a class="close" data-dismiss="alert" href="javascript:void(0)">&times;</a>
                 </div>
             {% endif %}
-            {{ view }}
+            {% if view %}
+                {{ view }}
+            {% else %}
+                <div id="issue_plugins"></div>
+            {% endif %}
         </div>
         <div class="col-md-4 col-md-offset-1">
             <div class="plugin-meta">
@@ -75,4 +79,14 @@
             </div>
         </div>
     </div>
+
+    <script>
+    $(function(){
+        React.render(React.createFactory(Sentry.IssuePluginConfigForm)({
+            project: {% serialize project %},
+            organization: {% serialize organization %},
+            plugin: {% serialize issue_v2_plugin %}
+        }), document.getElementById('issue_plugins'));
+    });
+    </script>
 {% endblock %}
diff --git a/src/sentry/web/frontend/project_issue_tracking.py b/src/sentry/web/frontend/project_issue_tracking.py
index 669bf6c08f..60968910c9 100644
--- a/src/sentry/web/frontend/project_issue_tracking.py
+++ b/src/sentry/web/frontend/project_issue_tracking.py
@@ -5,7 +5,7 @@ from django.http import HttpResponseRedirect, HttpResponse
 from django.utils.safestring import mark_safe
 
 from sentry import constants
-from sentry.plugins import plugins, IssueTrackingPlugin
+from sentry.plugins import plugins, IssueTrackingPlugin, IssueTrackingPlugin2
 from sentry.signals import plugin_enabled
 from sentry.web.frontend.base import ProjectView
 
@@ -15,7 +15,8 @@ class ProjectIssueTrackingView(ProjectView):
 
     def _iter_plugins(self):
         for plugin in plugins.all(version=1):
-            if not isinstance(plugin, IssueTrackingPlugin):
+            if not (isinstance(plugin, IssueTrackingPlugin)
+                    or isinstance(plugin, IssueTrackingPlugin2)):
                 continue
             yield plugin
 
@@ -50,8 +51,12 @@ class ProjectIssueTrackingView(ProjectView):
 
         enabled_plugins = []
         other_plugins = []
+        issue_v2_plugins = []
         for plugin in self._iter_plugins():
             if plugin.is_enabled(project):
+                if isinstance(plugin, IssueTrackingPlugin2):
+                    issue_v2_plugins.append(plugin)
+                    continue
                 content = plugin.get_issue_doc_html()
 
                 form = plugin.project_conf_form
@@ -69,6 +74,12 @@ class ProjectIssueTrackingView(ProjectView):
             'page': 'issue-tracking',
             'enabled_plugins': enabled_plugins,
             'other_plugins': other_plugins,
+            'issue_v2_plugins': [{
+                'title': p.get_title(),
+                'slug': p.slug,
+                'can_disable': p.can_disable,
+                'is_enabled': True
+            } for p in issue_v2_plugins]
         }
 
         return self.respond('sentry/project-issue-tracking.html', context)
diff --git a/src/sentry/web/frontend/project_plugin_configure.py b/src/sentry/web/frontend/project_plugin_configure.py
index 69e0a4e984..4a9654f3ca 100644
--- a/src/sentry/web/frontend/project_plugin_configure.py
+++ b/src/sentry/web/frontend/project_plugin_configure.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 from django.http import HttpResponse
 
-from sentry.plugins import plugins
+from sentry.plugins import plugins, IssueTrackingPlugin2
 from sentry.web.frontend.base import ProjectView
 
 
@@ -19,16 +19,28 @@ class ProjectPluginConfigureView(ProjectView):
         if not plugin.can_configure_for_project(project):
             return self.redirect(reverse('sentry-manage-project', args=[project.organization.slug, project.slug]))
 
-        view = plugin.configure(request=request, project=project)
-        if isinstance(view, HttpResponse):
-            return view
+        issue_v2_plugin = None
+        is_enabled = plugin.is_enabled(project)
+        if isinstance(plugin, IssueTrackingPlugin2):
+            view = None
+            issue_v2_plugin = {
+                'title': plugin.get_title(),
+                'slug': plugin.slug,
+                'can_disable': plugin.can_disable,
+                'is_enabled': is_enabled
+            }
+        else:
+            view = plugin.configure(request=request, project=project)
+            if isinstance(view, HttpResponse):
+                return view
 
         context = {
             'page': 'plugin',
             'title': plugin.get_title(),
             'view': view,
             'plugin': plugin,
-            'plugin_is_enabled': plugin.is_enabled(project),
+            'plugin_is_enabled': is_enabled,
+            'issue_v2_plugin': issue_v2_plugin
         }
 
         return self.respond('sentry/projects/plugins/configure.html', context)
