commit 8d7571013ce8b33bd5174c024527d3d404e5dfbc
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Oct 4 16:33:11 2016 -0700

    [search] fix quoted term behavior (#4270)

diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index bb5c4cbed0..71acd51cd3 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -171,6 +171,23 @@ def tokenize_query(query):
             results['query'].append(token)
             continue
 
+        # this handles quoted string, and is duplicated below
+        if token[0] == '"':
+            nvalue = token
+            while nvalue[-1] != '"':
+                try:
+                    nvalue = six.next(tokens_iter)
+                except StopIteration:
+                    break
+                token = '%s %s' % (token, nvalue)
+
+            if token[-1] == '"':
+                token = token[1:-1]
+            else:
+                token = token[1:]
+            results['query'].append(token)
+            continue
+
         key, value = token.split(':', 1)
         if not value:
             results['query'].append(token)
@@ -178,14 +195,14 @@ def tokenize_query(query):
 
         if value[0] == '"':
             nvalue = value
-            while not nvalue.endswith('"'):
+            while nvalue[-1] != '"':
                 try:
                     nvalue = six.next(tokens_iter)
                 except StopIteration:
                     break
                 value = '%s %s' % (value, nvalue)
 
-            if value.endswith('"'):
+            if value[-1] == '"':
                 value = value[1:-1]
             else:
                 value = value[1:]
diff --git a/tests/sentry/search/test_utils.py b/tests/sentry/search/test_utils.py
index 4edfa67976..83196dd094 100644
--- a/tests/sentry/search/test_utils.py
+++ b/tests/sentry/search/test_utils.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import pytest
+
 from datetime import datetime, timedelta
 from django.utils import timezone
 
@@ -196,3 +198,13 @@ class ParseQueryTest(TestCase):
     def test_has_release(self):
         result = self.parse_query('has:release')
         assert result['tags']['sentry:release'] == ANY
+
+    def test_quoted_string(self):
+        result = self.parse_query('"release:foo"')
+        assert result == {'tags': {}, 'query': 'release:foo'}
+
+    # TODO(dcramer): it'd be nice to support this without quotes
+    @pytest.mark.xfail
+    def test_invalid_tag_as_query(self):
+        result = self.parse_query('Resque::DirtyExit')
+        assert result == {'tags': {}, 'query': 'Resque::DirtyExit'}
