commit 9a16f573f23eedd07c760a6d3c6d0707961f75d9
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jun 26 14:37:37 2017 -0700

    ui: move create team into react
    
    Additionally this improves some behavior with Form to automatically pick up field changes

diff --git a/CHANGES b/CHANGES
index eef2fa9de6..02113e3812 100644
--- a/CHANGES
+++ b/CHANGES
@@ -13,6 +13,7 @@ Version 8.18 (Unreleased)
   is allowed on an installation.
 - Moved "create organization" into React.
 - Expanded React Form components (Form, ApiForm).
+- Moved "create team" into React.
 
 Schema Changes
 ~~~~~~~~~~~~~~
diff --git a/src/sentry/static/sentry/app/components/forms/apiForm.jsx b/src/sentry/static/sentry/app/components/forms/apiForm.jsx
index 9fc45ac8f9..f64c99f83e 100644
--- a/src/sentry/static/sentry/app/components/forms/apiForm.jsx
+++ b/src/sentry/static/sentry/app/components/forms/apiForm.jsx
@@ -17,11 +17,15 @@ class ApiForm extends Form {
   }
 
   onSubmit(e) {
-    super.onSubmit(e);
+    e.preventDefault();
 
     if (this.state.state == FormState.SAVING) {
       return;
     }
+
+    let {formData} = this.state;
+
+    this.props.onSubmit && this.props.onSubmit(formData);
     this.setState(
       {
         state: FormState.SAVING
@@ -30,20 +34,12 @@ class ApiForm extends Form {
         let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
         this.api.request(this.props.apiEndpoint, {
           method: this.props.apiMethod,
-          data: this.state.formData,
+          data: formData,
           success: data => {
-            this.setState({
-              state: FormState.READY,
-              errors: {}
-            });
-            this.props.onSubmitComplete && this.props.onSubmitComplete(data);
+            this.onSubmitSuccess(data);
           },
           error: error => {
-            this.setState({
-              state: FormState.ERROR,
-              errors: error.responseJSON
-            });
-            this.props.onSubmitError && this.props.onSubmitError(error);
+            this.onSubmitError(error);
           },
           complete: () => {
             IndicatorStore.remove(loadingIndicator);
@@ -57,8 +53,6 @@ class ApiForm extends Form {
 ApiForm.propTypes = {
   ...Form.propTypes,
   onSubmit: React.PropTypes.func,
-  onSubmitComplete: React.PropTypes.func.isRequired,
-  onSubmitError: React.PropTypes.func,
   apiMethod: React.PropTypes.string.isRequired,
   apiEndpoint: React.PropTypes.string.isRequired
 };
diff --git a/src/sentry/static/sentry/app/components/forms/form.jsx b/src/sentry/static/sentry/app/components/forms/form.jsx
index 8278d78d6f..ea27d1013d 100644
--- a/src/sentry/static/sentry/app/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/components/forms/form.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import underscore from 'underscore';
 
 import FormState from './state';
 import {t} from '../../locale';
@@ -7,17 +8,41 @@ class Form extends React.Component {
   constructor(props) {
     super(props);
     this.state = {
+      initialData: Object.assign({}, this.props.initialData),
       formData: Object.assign({}, this.props.initialData),
       errors: {}
     };
-    ['onSubmit', 'onFieldChange'].forEach(f => {
+    ['onSubmit', 'onSubmitSuccess', 'onSubmitError', 'onFieldChange'].forEach(f => {
       this[f] = this[f].bind(this);
     });
   }
 
   onSubmit(e) {
     e.preventDefault();
-    this.props.onSubmit && this.props.onSubmit(this.state.formData);
+    this.props.onSubmit(this.state.formData, this.onSubmitSuccess, this.onSubmitError);
+  }
+
+  onSubmitSuccess(data) {
+    let formData = this.state.formData;
+    let newData = {};
+    Object.keys(data).forEach(k => {
+      if (formData.hasOwnProperty(k)) newData[k] = data[k];
+    });
+
+    this.setState({
+      state: FormState.READY,
+      errors: {},
+      initialData: newData
+    });
+    this.props.onSubmitSuccess && this.props.onSubmitSuccess(data);
+  }
+
+  onSubmitError(error) {
+    this.setState({
+      state: FormState.ERROR,
+      errors: error.responseJSON
+    });
+    this.props.onSubmitError && this.props.onSubmitError(error);
   }
 
   onFieldChange(name, value) {
@@ -30,7 +55,9 @@ class Form extends React.Component {
 
   render() {
     let isSaving = this.state.state === FormState.SAVING;
-    let {formData, errors} = this.state;
+    let {initialData, formData, errors} = this.state;
+    let hasChanges =
+      Object.keys(formData).length && !underscore.isEqual(formData, initialData);
     return (
       <form onSubmit={this.onSubmit} className={this.props.className}>
         {this.state.state === FormState.ERROR &&
@@ -56,7 +83,7 @@ class Form extends React.Component {
         <div className={this.props.footerClass} style={{marginTop: 25}}>
           <button
             className="btn btn-primary"
-            disabled={isSaving || this.props.submitDisabled}
+            disabled={isSaving || this.props.submitDisabled || !hasChanges}
             type="submit">
             {this.props.submitLabel}
           </button>
@@ -69,6 +96,8 @@ class Form extends React.Component {
 
 Form.propTypes = {
   onSubmit: React.PropTypes.func.isRequired,
+  onSubmitSuccess: React.PropTypes.func,
+  onSubmitError: React.PropTypes.func,
   submitDisabled: React.PropTypes.bool,
   submitLabel: React.PropTypes.string.isRequired,
   footerClass: React.PropTypes.string,
diff --git a/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx b/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
index 9297fce2c8..364d9db541 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
@@ -1,4 +1,6 @@
 import React from 'react';
+import {Link} from 'react-router';
+
 import OrganizationHomeSidebar from './homeSidebar';
 import OrganizationState from '../../mixins/organizationState';
 import ProjectSelector from '../projectHeader/projectSelector';
@@ -39,11 +41,11 @@ const HomeContainer = React.createClass({
                   {t('New Project')}
                 </a>}
             {access.has('team:write')
-              ? <a
-                  href={`/organizations/${org.slug}/teams/new/`}
+              ? <Link
+                  to={`/organizations/${org.slug}/teams/new/`}
                   className="btn btn-primary">
                   {t('New Team')}
-                </a>
+                </Link>
               : <a
                   className="btn btn-primary btn-disabled tip"
                   data-placement="bottom"
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index f20d52ac78..4332c99e77 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -73,6 +73,7 @@ import ReleaseOverview from './views/releases/releaseOverview';
 import RouteNotFound from './views/routeNotFound';
 import SharedGroupDetails from './views/sharedGroupDetails';
 import Stream from './views/stream';
+import TeamCreate from './views/teamCreate';
 import TeamDetails from './views/teamDetails';
 import TeamMembers from './views/teamMembers';
 import TeamSettings from './views/teamSettings';
@@ -155,6 +156,10 @@ function routes() {
           path="/organizations/:orgId/teams/"
           component={errorHandler(OrganizationTeams)}
         />
+        <Route
+          path="/organizations/:orgId/teams/new/"
+          component={errorHandler(TeamCreate)}
+        />
         <Route
           path="/organizations/:orgId/teams/:teamId/"
           component={errorHandler(TeamDetails)}>
diff --git a/src/sentry/static/sentry/app/views/organizationCreate.jsx b/src/sentry/static/sentry/app/views/organizationCreate.jsx
index 5c48af0d73..e4765f2318 100644
--- a/src/sentry/static/sentry/app/views/organizationCreate.jsx
+++ b/src/sentry/static/sentry/app/views/organizationCreate.jsx
@@ -5,7 +5,7 @@ import {ApiForm, TextField} from '../components/forms';
 import {t} from '../locale';
 
 export default React.createClass({
-  onSubmitComplete(data) {
+  onSubmitSuccess(data) {
     // redirect to project creation
     // browserHistory.pushState(null, `/organizations/${data.slug}/projects/new/`);
     window.location.href = `/organizations/${data.slug}/projects/new/`;
@@ -36,7 +36,7 @@ export default React.createClass({
           submitLabel={t('Create Organization')}
           apiEndpoint="/organizations/"
           apiMethod="POST"
-          onSubmitComplete={this.onSubmitComplete}
+          onSubmitSuccess={this.onSubmitSuccess}
         />
       </NarrowLayout>
     );
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx
index 3e4a0df26b..4bc0bceb87 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import {Link} from 'react-router';
 
 import PropTypes from '../../proptypes';
 
@@ -43,7 +44,7 @@ const AllTeamsList = React.createClass({
       "You don't have any teams for this organization yet. Get started by [link:creating your first team].",
       {
         root: <p />,
-        link: <a href={`/organizations/${organization.slug}/teams/new/`} />
+        link: <Link to={`/organizations/${organization.slug}/teams/new/`} />
       }
     );
   }
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
index 3ad25a1c9e..d8b4bf0e37 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
@@ -163,7 +163,7 @@ const ExpandedTeamList = React.createClass({
                       to={`/organizations/${this.props.organization.slug}/all-teams/`}
                     />
                   ),
-                  createLink: <a href={this.urlPrefix() + '/teams/new/'} />
+                  createLink: <Link to={this.urlPrefix() + '/teams/new/'} />
                 }
               )
             : tct('You are not a member of any teams. [joinLink:Join a team].', {
@@ -181,7 +181,7 @@ const ExpandedTeamList = React.createClass({
         {tct(
           'You dont have any teams for this organization yet. Get started by [link:creating your first team].',
           {
-            link: <a href={this.urlPrefix() + '/teams/new/'} />
+            link: <Link to={this.urlPrefix() + '/teams/new/'} />
           }
         )}
       </p>
diff --git a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
index 40a0665185..c33f35ab31 100644
--- a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
@@ -282,7 +282,7 @@ const ProjectAlertSettings = React.createClass({
         this.setState({
           error: false,
           loading: false,
-          pluginList: data.filter(p => p.type === 'notification'),
+          pluginList: data.filter(p => p.type === 'notification')
         });
       },
       error: () => {
diff --git a/src/sentry/static/sentry/app/views/teamCreate.jsx b/src/sentry/static/sentry/app/views/teamCreate.jsx
new file mode 100644
index 0000000000..f528b18a6a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/teamCreate.jsx
@@ -0,0 +1,44 @@
+import React from 'react';
+
+import NarrowLayout from '../components/narrowLayout';
+import {ApiForm, TextField} from '../components/forms';
+import {t} from '../locale';
+
+export default React.createClass({
+  onSubmitSuccess(data) {
+    let {orgId} = this.props.params;
+    // redirect to project creation
+    window.location.href = `/organizations/${orgId}/projects/new/?team=${data.slug}`;
+  },
+
+  render() {
+    let {orgId} = this.props.params;
+    return (
+      <NarrowLayout>
+        <h3>{t('Create a New Team')}</h3>
+
+        <p>
+          {t(
+            "Teams group members' access to a specific focus, e.g. a major product or application that may have sub-projects."
+          )}
+        </p>
+
+        <ApiForm
+          fields={[
+            {
+              name: 'name',
+              label: 'Team Name',
+              placeholder: 'e.g. Operations, Web, Desktop',
+              required: true,
+              component: TextField
+            }
+          ]}
+          submitLabel={t('Save Changes')}
+          apiEndpoint={`/organizations/${orgId}/teams/`}
+          apiMethod="POST"
+          onSubmitSuccess={this.onSubmitSuccess}
+        />
+      </NarrowLayout>
+    );
+  }
+});
diff --git a/src/sentry/static/sentry/app/views/teamDetails.jsx b/src/sentry/static/sentry/app/views/teamDetails.jsx
index c66ba5fbe5..02824c25a1 100644
--- a/src/sentry/static/sentry/app/views/teamDetails.jsx
+++ b/src/sentry/static/sentry/app/views/teamDetails.jsx
@@ -71,8 +71,12 @@ const TeamDetails = React.createClass({
         `/organizations/${orgId}/teams/${data.slug}/settings/`
       );
     } else {
-      Object.assign({}, team, data);
-      this.setState({team: team});
+      this.setState({
+        team: {
+          ...team,
+          ...data
+        }
+      });
     }
   },
 
diff --git a/src/sentry/static/sentry/app/views/teamSettings.jsx b/src/sentry/static/sentry/app/views/teamSettings.jsx
index 138f9a72ea..b048ac2910 100644
--- a/src/sentry/static/sentry/app/views/teamSettings.jsx
+++ b/src/sentry/static/sentry/app/views/teamSettings.jsx
@@ -1,113 +1,9 @@
 import React from 'react';
 
-import ApiMixin from '../mixins/apiMixin';
-import IndicatorStore from '../stores/indicatorStore';
-import {FormState, TextField} from '../components/forms';
+import {ApiForm, TextField} from '../components/forms';
 import {t} from '../locale';
 
-const TeamSettingsForm = React.createClass({
-  propTypes: {
-    orgId: React.PropTypes.string.isRequired,
-    teamId: React.PropTypes.string.isRequired,
-    initialData: React.PropTypes.object,
-    onSave: React.PropTypes.func.isRequired
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      formData: Object.assign({}, this.props.initialData),
-      errors: {}
-    };
-  },
-
-  onFieldChange(name, value) {
-    let formData = this.state.formData;
-    formData[name] = value;
-    this.setState({
-      formData: formData
-    });
-  },
-
-  onSubmit(e) {
-    e.preventDefault();
-
-    if (this.state.state == FormState.SAVING) {
-      return;
-    }
-    this.setState(
-      {
-        state: FormState.SAVING
-      },
-      () => {
-        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-        let {orgId, teamId} = this.props;
-        this.api.request(`/teams/${orgId}/${teamId}/`, {
-          method: 'PUT',
-          data: this.state.formData,
-          success: data => {
-            this.props.onSave(data);
-            this.setState({
-              state: FormState.READY,
-              errors: {}
-            });
-          },
-          error: error => {
-            this.setState({
-              state: FormState.ERROR,
-              errors: error.responseJSON
-            });
-          },
-          complete: () => {
-            IndicatorStore.remove(loadingIndicator);
-          }
-        });
-      }
-    );
-  },
-
-  render() {
-    let isSaving = this.state.state === FormState.SAVING;
-    let errors = this.state.errors;
-    return (
-      <form onSubmit={this.onSubmit} className="form-stacked">
-        {this.state.state === FormState.ERROR &&
-          <div className="alert alert-error alert-block">
-            {t(
-              'Unable to save your changes. Please ensure all fields are valid and try again.'
-            )}
-          </div>}
-        <fieldset>
-          <TextField
-            key="name"
-            label={t('Name')}
-            placeholder={t('e.g. API Team')}
-            value={this.state.formData.name}
-            required={true}
-            error={errors.name}
-            onChange={this.onFieldChange.bind(this, 'name')}
-          />
-          <TextField
-            key="slug"
-            label={t('Short name')}
-            value={this.state.formData.slug}
-            required={true}
-            error={errors.slug}
-            onChange={this.onFieldChange.bind(this, 'slug')}
-          />
-        </fieldset>
-        <fieldset className="form-actions">
-          <button type="submit" className="btn btn-primary" disabled={isSaving}>
-            {t('Save Changes')}
-          </button>
-        </fieldset>
-      </form>
-    );
-  }
-});
-
-const TeamSettings = React.createClass({
+export default React.createClass({
   propTypes: {
     team: React.PropTypes.object.isRequired,
     onTeamChange: React.PropTypes.func.isRequired
@@ -121,11 +17,30 @@ const TeamSettings = React.createClass({
       <div>
         <div className="box">
           <div className="box-content with-padding">
-            <TeamSettingsForm
-              orgId={orgId}
-              teamId={teamId}
-              initialData={team}
-              onSave={this.props.onTeamChange}
+            <ApiForm
+              apiMethod="PUT"
+              apiEndpoint={`/teams/${orgId}/${teamId}/`}
+              initialData={{
+                name: team.name,
+                slug: team.slug
+              }}
+              onSubmitSuccess={this.props.onTeamChange}
+              fields={[
+                {
+                  name: 'name',
+                  label: t('Name'),
+                  placeholder: t('e.g. API Team'),
+                  required: true,
+                  component: TextField
+                },
+                {
+                  name: 'slug',
+                  label: t('Short name'),
+                  placeholder: t('e.g. api-team'),
+                  required: true,
+                  component: TextField
+                }
+              ]}
             />
           </div>
         </div>
@@ -133,5 +48,3 @@ const TeamSettings = React.createClass({
     );
   }
 });
-
-export default TeamSettings;
diff --git a/src/sentry/templates/sentry/create-team.html b/src/sentry/templates/sentry/create-team.html
deleted file mode 100644
index a540ae37d6..0000000000
--- a/src/sentry/templates/sentry/create-team.html
+++ /dev/null
@@ -1,17 +0,0 @@
-{% extends "sentry/bases/modal.html" %}
-
-{% load i18n %}
-{% block global_sidebar %}{% endblock %}
-{% block sub-header %}{% endblock %}
-
-{% block title %}{% trans "New Team" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-<div class="create-flow">
-  <h2 class="m-b-1">{% trans "Create a New Team" %}</h2>
-
-  <p>{% blocktrans %}Teams group members' access to a specific focus, e.g. a major product or application that may have sub-projects.{% endblocktrans %}</p>
-
-  {% include "sentry/partial/_form.html" %}
-</div>
-{% endblock %}
diff --git a/src/sentry/web/frontend/create_team.py b/src/sentry/web/frontend/create_team.py
deleted file mode 100644
index fc8e9d81af..0000000000
--- a/src/sentry/web/frontend/create_team.py
+++ /dev/null
@@ -1,33 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-
-from sentry.web.forms.add_team import AddTeamForm
-from sentry.web.frontend.base import OrganizationView
-
-
-class CreateTeamView(OrganizationView):
-    required_scope = 'team:write'
-
-    def get_form(self, request):
-        return AddTeamForm(request.POST or None, initial={
-            'team': request.GET.get('team'),
-        })
-
-    def handle(self, request, organization):
-        form = self.get_form(request)
-        if form.is_valid():
-            team = form.save(request.user, organization, request.META['REMOTE_ADDR'])
-
-            url = '{}?team={}'.format(
-                reverse('sentry-create-project', args=[organization.slug]),
-                team.slug,
-            )
-
-            return self.redirect(url)
-
-        context = {
-            'form': form,
-        }
-
-        return self.respond('sentry/create-team.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 696d972541..9b574e0370 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -28,7 +28,6 @@ from sentry.web.frontend.auth_close import AuthCloseView
 from sentry.web.frontend.create_organization_member import \
     CreateOrganizationMemberView
 from sentry.web.frontend.create_project import CreateProjectView
-from sentry.web.frontend.create_team import CreateTeamView
 from sentry.web.frontend.error_page_embed import ErrorPageEmbedView
 from sentry.web.frontend.group_event_json import GroupEventJsonView
 from sentry.web.frontend.group_plugin_action import GroupPluginActionView
@@ -270,8 +269,7 @@ urlpatterns += patterns(
         name='sentry-organization-stats'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/teams/(?P<team_slug>[\w_-]+)/remove/$', RemoveTeamView.as_view(),
         name='sentry-remove-team'),
-    url(r'^organizations/(?P<organization_slug>[\w_-]+)/teams/new/$', CreateTeamView.as_view(),
-        name='sentry-create-team'),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/teams/new/$', react_page_view),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/projects/new/$', CreateProjectView.as_view(),
         name='sentry-create-project'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/remove/$', RemoveOrganizationView.as_view(),
diff --git a/tests/acceptance/test_create_team.py b/tests/acceptance/test_create_team.py
new file mode 100644
index 0000000000..8ac7d18b83
--- /dev/null
+++ b/tests/acceptance/test_create_team.py
@@ -0,0 +1,18 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class CreateTeamTest(AcceptanceTestCase):
+    def setUp(self):
+        super(CreateTeamTest, self).setUp()
+        self.user = self.create_user('foo@example.com')
+        self.org = self.create_organization(
+            name='Rowdy Tiger',
+            owner=self.user,
+        )
+        self.login_as(self.user)
+
+    def test_simple(self):
+        self.browser.get('/organizations/{}/teams/new/'.format(self.org.slug))
+        self.browser.snapshot(name='create team')
diff --git a/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap
index 0dcf9a056b..7b1e54a28f 100644
--- a/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap
@@ -29,7 +29,7 @@ exports[`OrganizationCreate render() renders correctly 1`] = `
         "defaultTeam": true,
       }
     }
-    onSubmitComplete={[Function]}
+    onSubmitSuccess={[Function]}
     submitDisabled={false}
     submitLabel="Create Organization"
   />
diff --git a/tests/js/spec/views/__snapshots__/teamCreate.spec.jsx.snap b/tests/js/spec/views/__snapshots__/teamCreate.spec.jsx.snap
new file mode 100644
index 0000000000..41a55a0a2e
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/teamCreate.spec.jsx.snap
@@ -0,0 +1,32 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`TeamCreate render() renders correctly 1`] = `
+<NarryLayout>
+  <h3>
+    Create a New Team
+  </h3>
+  <p>
+    Teams group members' access to a specific focus, e.g. a major product or application that may have sub-projects.
+  </p>
+  <ApiForm
+    apiEndpoint="/organizations/org/teams/"
+    apiMethod="POST"
+    className="form-stacked"
+    fields={
+      Array [
+        Object {
+          "component": [Function],
+          "label": "Team Name",
+          "name": "name",
+          "placeholder": "e.g. Operations, Web, Desktop",
+          "required": true,
+        },
+      ]
+    }
+    footerClass="form-actions align-right"
+    onSubmitSuccess={[Function]}
+    submitDisabled={false}
+    submitLabel="Save Changes"
+  />
+</NarryLayout>
+`;
diff --git a/tests/js/spec/views/teamCreate.spec.jsx b/tests/js/spec/views/teamCreate.spec.jsx
new file mode 100644
index 0000000000..3820b1b00d
--- /dev/null
+++ b/tests/js/spec/views/teamCreate.spec.jsx
@@ -0,0 +1,20 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import toJson from 'enzyme-to-json';
+
+import TeamCreate from 'app/views/teamCreate';
+
+describe('TeamCreate', function() {
+  describe('render()', function() {
+    it('renders correctly', function() {
+      let wrapper = shallow(
+        <TeamCreate
+          params={{
+            orgId: 'org'
+          }}
+        />
+      );
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+  });
+});
diff --git a/tests/sentry/web/frontend/test_create_team.py b/tests/sentry/web/frontend/test_create_team.py
deleted file mode 100644
index 72e73a6f2f..0000000000
--- a/tests/sentry/web/frontend/test_create_team.py
+++ /dev/null
@@ -1,86 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-
-from sentry.models import OrganizationMember, OrganizationMemberTeam, Team
-from sentry.testutils import TestCase, PermissionTestCase
-
-
-class CreateTeamPermissionTest(PermissionTestCase):
-    def setUp(self):
-        super(CreateTeamPermissionTest, self).setUp()
-        self.path = reverse('sentry-create-team', args=[self.organization.slug])
-
-    def test_teamless_admin_can_load(self):
-        self.assert_teamless_admin_can_access(self.path)
-
-    def test_team_admin_can_load(self):
-        self.assert_team_admin_can_access(self.path)
-
-    def test_member_cannot_load(self):
-        self.assert_member_cannot_access(self.path)
-
-    def test_owner_can_load(self):
-        self.assert_owner_can_access(self.path)
-
-
-class CreateTeamTest(TestCase):
-    def test_renders_with_context(self):
-        organization = self.create_organization()
-        path = reverse('sentry-create-team', args=[organization.slug])
-        self.login_as(self.user)
-        resp = self.client.get(path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/create-team.html')
-        assert resp.context['organization'] == organization
-        assert resp.context['form']
-
-    def test_submission(self):
-        organization = self.create_organization()
-        path = reverse('sentry-create-team', args=[organization.slug])
-        self.login_as(self.user)
-        resp = self.client.post(path, {
-            'name': 'bar',
-        })
-        assert resp.status_code == 302, resp.context['form'].errors
-
-        team = Team.objects.get(organization=organization, name='bar')
-
-        member = OrganizationMember.objects.get(
-            user=self.user,
-            organization=organization,
-        )
-
-        assert OrganizationMemberTeam.objects.filter(
-            organizationmember=member,
-            team=team,
-            is_active=True,
-        ).exists()
-
-        redirect_uri = reverse('sentry-create-project', args=[organization.slug])
-        assert resp['Location'] == 'http://testserver%s?team=%s' % (
-            redirect_uri, team.slug)
-
-    def test_admin_can_create_team(self):
-        organization = self.create_organization()
-        path = reverse('sentry-create-team', args=[organization.slug])
-
-        admin = self.create_user('admin@example.com')
-        self.create_member(
-            organization=organization,
-            user=admin,
-            role='admin',
-            teams=[],
-        )
-
-        self.login_as(admin)
-
-        resp = self.client.post(path, {
-            'name': 'bar',
-        })
-        assert resp.status_code == 302, resp.context['form'].errors
-
-        assert Team.objects.filter(
-            organization=organization,
-            name='bar',
-        ).exists()
