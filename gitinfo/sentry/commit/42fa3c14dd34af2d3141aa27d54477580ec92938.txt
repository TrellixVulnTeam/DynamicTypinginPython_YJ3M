commit 42fa3c14dd34af2d3141aa27d54477580ec92938
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jul 5 14:18:48 2018 -0700

    feat: Add organization-wide scrapeJavaScript configuration
    
    This adds an override for scrapeJavaScript to the organization settings. Its inverted from the existing functions (like requireDataScrubbers), and when set to false will disable scrapeJavaScript on all projects.

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index b605d3f46d..daf71ad406 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -36,6 +36,7 @@ ORG_OPTIONS = (
     ('sensitiveFields', 'sentry:sensitive_fields', list),
     ('safeFields', 'sentry:safe_fields', list),
     ('scrubIPAddresses', 'sentry:require_scrub_ip_address', bool),
+    ('scrapeJavaScript', 'sentry:scrape_javascript', bool),
 )
 
 delete_logger = logging.getLogger('sentry.deletions.api')
@@ -84,6 +85,7 @@ class OrganizationSerializer(serializers.Serializer):
     sensitiveFields = ListField(child=serializers.CharField(), required=False)
     safeFields = ListField(child=serializers.CharField(), required=False)
     scrubIPAddresses = serializers.BooleanField(required=False)
+    scrapeJavaScript = serializers.BooleanField(required=False)
     isEarlyAdopter = serializers.BooleanField(required=False)
     require2FA = serializers.BooleanField(required=False)
 
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index a905e89a32..4b10639a30 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -178,6 +178,7 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
             'sensitiveFields': obj.get_option('sentry:sensitive_fields', None) or [],
             'safeFields': obj.get_option('sentry:safe_fields', None) or [],
             'scrubIPAddresses': bool(obj.get_option('sentry:require_scrub_ip_address', False)),
+            'scrapeJavaScript': bool(obj.get_option('sentry:scrape_javascript', True)),
         })
         context['teams'] = serialize(team_list, user, TeamSerializer())
         context['projects'] = serialize(project_list, user, ProjectSummarySerializer())
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 25df192292..b8f8e24daf 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -476,7 +476,10 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
     def __init__(self, *args, **kwargs):
         StacktraceProcessor.__init__(self, *args, **kwargs)
         self.max_fetches = MAX_RESOURCE_FETCHES
-        self.allow_scraping = self.project.get_option('sentry:scrape_javascript', True)
+        self.allow_scraping = (
+            self.project.organization.get_option('sentry:scrape_javascript', True) is not False
+            and self.project.get_option('sentry:scrape_javascript', True)
+        )
         self.fetch_count = 0
         self.sourcemaps_touched = set()
         self.cache = SourceCache()
diff --git a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
index aee9d082de..999b70844e 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
@@ -183,6 +183,17 @@ const formGroups = [
           ),
         },
       },
+      {
+        name: 'scrapeJavaScript',
+        type: 'boolean',
+        confirm: {
+          false: t(
+            "Are you sure you want to disable sourcecode fetching for JavaScript events? This will affect Sentry's ability to aggregate issues if you're not already uploading sourcemaps as artifacts."
+          ),
+        },
+        label: t('Allow JavaScript source fetching'),
+        help: t('Allow Sentry to scrape missing JavaScript source context when possible'),
+      },
     ],
   },
 ];
diff --git a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
index 265059e9be..1e7a043a1d 100644
--- a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
@@ -195,6 +195,11 @@ export const fields = {
   scrapeJavaScript: {
     name: 'scrapeJavaScript',
     type: 'boolean',
+    // if this is off for the organization, it cannot be enabled for the project
+    disabled: ({organization, name}) => !organization[name],
+    disabledReason: ORG_DISABLED_REASON,
+    // `props` are the props given to FormField
+    setValue: (val, props) => props.organization && props.organization[props.name] && val,
     label: t('Enable JavaScript source fetching'),
     help: t('Allow Sentry to scrape missing JavaScript source context when possible'),
   },
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 465c72f27c..1a13dcb06c 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -667,6 +667,7 @@ window.TestStubs = {
         id: 'active',
         name: 'active',
       },
+      scrapeJavaScript: true,
       features: [],
       onboardingTasks: [],
       teams: [],
diff --git a/tests/js/spec/components/projectHeader/__snapshots__/projectSelector.spec.jsx.snap b/tests/js/spec/components/projectHeader/__snapshots__/projectSelector.spec.jsx.snap
index dd1b4fe216..6ba56cbb1f 100644
--- a/tests/js/spec/components/projectHeader/__snapshots__/projectSelector.spec.jsx.snap
+++ b/tests/js/spec/components/projectHeader/__snapshots__/projectSelector.spec.jsx.snap
@@ -45,6 +45,7 @@ exports[`ProjectSelector render() can filter projects by project name 1`] = `
           ],
         },
       ],
+      "scrapeJavaScript": true,
       "slug": "org",
       "status": Object {
         "id": "active",
@@ -506,6 +507,7 @@ exports[`ProjectSelector render() can filter projects by team name/project name
           ],
         },
       ],
+      "scrapeJavaScript": true,
       "slug": "org",
       "status": Object {
         "id": "active",
@@ -1196,6 +1198,7 @@ exports[`ProjectSelector render() shows empty filter message when filtering has
           ],
         },
       ],
+      "scrapeJavaScript": true,
       "slug": "org",
       "status": Object {
         "id": "active",
diff --git a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
index 784406d568..93cd0b765d 100644
--- a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
@@ -157,6 +157,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
       "name": "Organization Name",
       "onboardingTasks": Array [],
       "projects": Array [],
+      "scrapeJavaScript": true,
       "slug": "org-slug",
       "status": Object {
         "id": "active",
@@ -191,6 +192,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
           "name": "Organization Name",
           "onboardingTasks": Array [],
           "projects": Array [],
+          "scrapeJavaScript": true,
           "slug": "org-slug",
           "status": Object {
             "id": "active",
@@ -225,6 +227,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
                 "name": "Organization Name",
                 "onboardingTasks": Array [],
                 "projects": Array [],
+                "scrapeJavaScript": true,
                 "slug": "org-slug",
                 "status": Object {
                   "id": "active",
@@ -256,6 +259,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
                   "name": "Organization Name",
                   "onboardingTasks": Array [],
                   "projects": Array [],
+                  "scrapeJavaScript": true,
                   "slug": "org-slug",
                   "status": Object {
                     "id": "active",
@@ -463,6 +467,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
           "name": "Organization Name",
           "onboardingTasks": Array [],
           "projects": Array [],
+          "scrapeJavaScript": true,
           "slug": "org-slug",
           "status": Object {
             "id": "active",
diff --git a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
index 014ae7ab2e..ef0d94d860 100644
--- a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
@@ -258,6 +258,7 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                         "name": "Organization Name",
                         "onboardingTasks": Array [],
                         "projects": Array [],
+                        "scrapeJavaScript": true,
                         "slug": "org-slug",
                         "status": Object {
                           "id": "active",
diff --git a/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap b/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
index 057897b389..e2d316dbc9 100644
--- a/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
@@ -21,6 +21,7 @@ exports[`Project Ownership Input renders 1`] = `
       "name": "Organization Name",
       "onboardingTasks": Array [],
       "projects": Array [],
+      "scrapeJavaScript": true,
       "slug": "org-slug",
       "status": Object {
         "id": "active",
@@ -67,6 +68,7 @@ exports[`Project Ownership Input renders 1`] = `
         "name": "Organization Name",
         "onboardingTasks": Array [],
         "projects": Array [],
+        "scrapeJavaScript": true,
         "slug": "org-slug",
         "status": Object {
           "id": "active",
@@ -471,6 +473,7 @@ exports[`Project Ownership Input renders 1`] = `
                     "name": "Organization Name",
                     "onboardingTasks": Array [],
                     "projects": Array [],
+                    "scrapeJavaScript": true,
                     "slug": "org-slug",
                     "status": Object {
                       "id": "active",
diff --git a/tests/js/spec/views/__snapshots__/projectAlertRuleDetails.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectAlertRuleDetails.spec.jsx.snap
index bd205b6ad5..78252eaded 100644
--- a/tests/js/spec/views/__snapshots__/projectAlertRuleDetails.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectAlertRuleDetails.spec.jsx.snap
@@ -105,6 +105,7 @@ exports[`ProjectAlertRuleDetails Edit alert rule renders 1`] = `
             "name": "Organization Name",
             "onboardingTasks": Array [],
             "projects": Array [],
+            "scrapeJavaScript": true,
             "slug": "org-slug",
             "status": Object {
               "id": "active",
@@ -1316,6 +1317,7 @@ exports[`ProjectAlertRuleDetails New alert rule renders 1`] = `
             "name": "Organization Name",
             "onboardingTasks": Array [],
             "projects": Array [],
+            "scrapeJavaScript": true,
             "slug": "org-slug",
             "status": Object {
               "id": "active",
diff --git a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
index 097f88853c..bbbd182d0f 100644
--- a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
@@ -145,6 +145,7 @@ exports[`ProjectAlertSettings render() renders 1`] = `
           "name": "Organization Name",
           "onboardingTasks": Array [],
           "projects": Array [],
+          "scrapeJavaScript": true,
           "slug": "org-slug",
           "status": Object {
             "id": "active",
diff --git a/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap
index 6a486a7321..29844a641d 100644
--- a/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap
@@ -89,6 +89,7 @@ exports[`ProjectTeamsSettings render() renders 1`] = `
               "name": "Organization Name",
               "onboardingTasks": Array [],
               "projects": Array [],
+              "scrapeJavaScript": true,
               "slug": "org-slug",
               "status": Object {
                 "id": "active",
diff --git a/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
index 6531de876b..2fdd53864f 100644
--- a/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
@@ -26,6 +26,7 @@ exports[`ProjectPluginDetails renders 1`] = `
       "name": "Organization Name",
       "onboardingTasks": Array [],
       "projects": Array [],
+      "scrapeJavaScript": true,
       "slug": "org-slug",
       "status": Object {
         "id": "active",
@@ -78,6 +79,7 @@ exports[`ProjectPluginDetails renders 1`] = `
         "name": "Organization Name",
         "onboardingTasks": Array [],
         "projects": Array [],
+        "scrapeJavaScript": true,
         "slug": "org-slug",
         "status": Object {
           "id": "active",
@@ -370,6 +372,7 @@ exports[`ProjectPluginDetails renders 1`] = `
                     "name": "Organization Name",
                     "onboardingTasks": Array [],
                     "projects": Array [],
+                    "scrapeJavaScript": true,
                     "slug": "org-slug",
                     "status": Object {
                       "id": "active",
@@ -526,6 +529,7 @@ exports[`ProjectPluginDetails renders 1`] = `
                                     "name": "Organization Name",
                                     "onboardingTasks": Array [],
                                     "projects": Array [],
+                                    "scrapeJavaScript": true,
                                     "slug": "org-slug",
                                     "status": Object {
                                       "id": "active",
diff --git a/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap b/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
index 1868c4091d..d95b6a28c9 100644
--- a/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
@@ -29,6 +29,7 @@ exports[`RuleBuilder renders 1`] = `
       "name": "Organization Name",
       "onboardingTasks": Array [],
       "projects": Array [],
+      "scrapeJavaScript": true,
       "slug": "org-slug",
       "status": Object {
         "id": "active",
@@ -440,6 +441,7 @@ exports[`RuleBuilder renders 1`] = `
                   "name": "Organization Name",
                   "onboardingTasks": Array [],
                   "projects": Array [],
+                  "scrapeJavaScript": true,
                   "slug": "org-slug",
                   "status": Object {
                     "id": "active",
@@ -998,6 +1000,7 @@ exports[`RuleBuilder renders with suggestions 1`] = `
       "name": "Organization Name",
       "onboardingTasks": Array [],
       "projects": Array [],
+      "scrapeJavaScript": true,
       "slug": "org-slug",
       "status": Object {
         "id": "active",
@@ -1631,6 +1634,7 @@ exports[`RuleBuilder renders with suggestions 1`] = `
                   "name": "Organization Name",
                   "onboardingTasks": Array [],
                   "projects": Array [],
+                  "scrapeJavaScript": true,
                   "slug": "org-slug",
                   "status": Object {
                     "id": "active",
diff --git a/tests/js/spec/views/__snapshots__/teamCreate.spec.jsx.snap b/tests/js/spec/views/__snapshots__/teamCreate.spec.jsx.snap
index 01d7d00387..80bf97b7c0 100644
--- a/tests/js/spec/views/__snapshots__/teamCreate.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/teamCreate.spec.jsx.snap
@@ -28,6 +28,7 @@ exports[`TeamCreate render() renders correctly 1`] = `
           "name": "Organization Name",
           "onboardingTasks": Array [],
           "projects": Array [],
+          "scrapeJavaScript": true,
           "slug": "org-slug",
           "status": Object {
             "id": "active",
diff --git a/tests/js/spec/views/groupDetails/__snapshots__/actions.spec.jsx.snap b/tests/js/spec/views/groupDetails/__snapshots__/actions.spec.jsx.snap
index a3968ce358..9d7c046700 100644
--- a/tests/js/spec/views/groupDetails/__snapshots__/actions.spec.jsx.snap
+++ b/tests/js/spec/views/groupDetails/__snapshots__/actions.spec.jsx.snap
@@ -52,6 +52,7 @@ exports[`GroupActions render() renders correctly 1`] = `
         "name": "Organization Name",
         "onboardingTasks": Array [],
         "projects": Array [],
+        "scrapeJavaScript": true,
         "slug": "org",
         "status": Object {
           "id": "active",
diff --git a/tests/js/spec/views/projectGeneralSettings.spec.jsx b/tests/js/spec/views/projectGeneralSettings.spec.jsx
index 49d1a23680..a4a29e6e03 100644
--- a/tests/js/spec/views/projectGeneralSettings.spec.jsx
+++ b/tests/js/spec/views/projectGeneralSettings.spec.jsx
@@ -73,6 +73,9 @@ describe('projectGeneralSettings', function() {
     expect(wrapper.find('TextArea[name="allowedDomains"]').prop('value')).toBe(
       'example.com\nhttps://example.com'
     );
+    expect(wrapper.find('Switch[name="scrapeJavaScript"]').prop('isDisabled')).toBe(
+      false
+    );
     expect(wrapper.find('Switch[name="scrapeJavaScript"]').prop('isActive')).toBeTruthy();
     expect(wrapper.find('Input[name="securityToken"]').prop('value')).toBe(
       'security-token'
@@ -98,6 +101,16 @@ describe('projectGeneralSettings', function() {
     expect(wrapper.find('Switch[name="dataScrubber"]').prop('isActive')).toBe(true);
   });
 
+  it('disables scrapeJavaScript when equivalent org setting is false', function() {
+    routerContext.context.organization.scrapeJavaScript = false;
+    let wrapper = mount(
+      <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />,
+      routerContext
+    );
+    expect(wrapper.find('Switch[name="scrapeJavaScript"]').prop('isDisabled')).toBe(true);
+    expect(wrapper.find('Switch[name="scrapeJavaScript"]').prop('isActive')).toBeFalsy();
+  });
+
   it('project admins can remove project', function() {
     let deleteMock = MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/`,
diff --git a/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap b/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap
index 86e0b8ba73..7cd33b51b0 100644
--- a/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap
+++ b/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap
@@ -43,6 +43,7 @@ exports[`ProjectPluginRow renders 1`] = `
           "name": "Organization Name",
           "onboardingTasks": Array [],
           "projects": Array [],
+          "scrapeJavaScript": true,
           "slug": "org-slug",
           "status": Object {
             "id": "active",
diff --git a/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap
index 601d3cc7c2..afd3958629 100644
--- a/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap
@@ -319,6 +319,7 @@ exports[`OrganizationProjects Should render the projects in the store 1`] = `
                                     "name": "Organization Name",
                                     "onboardingTasks": Array [],
                                     "projects": Array [],
+                                    "scrapeJavaScript": true,
                                     "slug": "org-slug",
                                     "status": Object {
                                       "id": "active",
diff --git a/tests/js/spec/views/settings/__snapshots__/settingsIndex.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/settingsIndex.spec.jsx.snap
index a31d267718..8c7cb5c35b 100644
--- a/tests/js/spec/views/settings/__snapshots__/settingsIndex.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/settingsIndex.spec.jsx.snap
@@ -23,6 +23,7 @@ exports[`SettingsIndex renders 1`] = `
         "name": "Organization Name",
         "onboardingTasks": Array [],
         "projects": Array [],
+        "scrapeJavaScript": true,
         "slug": "org-slug",
         "status": Object {
           "id": "active",
@@ -132,6 +133,7 @@ exports[`SettingsIndex renders 1`] = `
                       "name": "Organization Name",
                       "onboardingTasks": Array [],
                       "projects": Array [],
+                      "scrapeJavaScript": true,
                       "slug": "org-slug",
                       "status": Object {
                         "id": "active",
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index 1c76300a99..05d6fdfc6c 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -188,6 +188,7 @@ class OrganizationUpdateTest(APITestCase):
                 'sensitiveFields': ['password'],
                 'safeFields': ['email'],
                 'scrubIPAddresses': True,
+                'scrapeJavaScript': False,
                 'defaultRole': 'owner',
             }
         )
@@ -210,6 +211,7 @@ class OrganizationUpdateTest(APITestCase):
         assert options.get('sentry:require_scrub_ip_address')
         assert options.get('sentry:sensitive_fields') == ['password']
         assert options.get('sentry:safe_fields') == ['email']
+        assert options.get('sentry:scrape_javascript') is False
 
     def test_setting_legacy_rate_limits(self):
         org = self.create_organization(owner=self.user)
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index 0164f22aba..0253591a35 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -11,6 +11,7 @@ from requests.exceptions import RequestException
 
 from sentry import http
 from sentry.lang.javascript.processor import (
+    JavaScriptStacktraceProcessor,
     discover_sourcemap,
     fetch_sourcemap,
     fetch_file,
@@ -35,6 +36,25 @@ unicode_body = b"""function add(a, b) {
 }""".decode('utf-8')
 
 
+class JavaScriptStacktraceProcessorTest(TestCase):
+    def test_infers_allow_scraping(self):
+        project = self.create_project()
+        r = JavaScriptStacktraceProcessor({}, None, project)
+        # defaults
+        assert r.allow_scraping
+
+        # disabled for project
+        project.update_option('sentry:scrape_javascript', False)
+        r = JavaScriptStacktraceProcessor({}, None, project)
+        assert not r.allow_scraping
+
+        # disabled for org
+        project.delete_option('sentry:scrape_javascript')
+        project.organization.update_option('sentry:scrape_javascript', False)
+        r = JavaScriptStacktraceProcessor({}, None, project)
+        assert not r.allow_scraping
+
+
 class FetchReleaseFileTest(TestCase):
     def test_unicode(self):
         project = self.project
@@ -62,7 +82,7 @@ class FetchReleaseFileTest(TestCase):
 
         result = fetch_release_file('file.min.js', release)
 
-        assert type(result.body) is six.binary_type
+        assert isinstance(result.body, six.binary_type)
         assert result == http.UrlResult(
             'file.min.js',
             {'content-type': 'application/json; charset=utf-8'},
@@ -118,7 +138,7 @@ class FetchReleaseFileTest(TestCase):
 
         result = fetch_release_file('file.min.js', release, dist)
 
-        assert type(result.body) is six.binary_type
+        assert isinstance(result.body, six.binary_type)
         assert result == http.UrlResult(
             'file.min.js',
             {'content-type': 'application/json; charset=utf-8'},
@@ -158,7 +178,7 @@ class FetchReleaseFileTest(TestCase):
 
         result = fetch_release_file('http://example.com/file.min.js?lol', release)
 
-        assert type(result.body) is six.binary_type
+        assert isinstance(result.body, six.binary_type)
         assert result == http.UrlResult(
             'http://example.com/file.min.js?lol',
             {'content-type': 'application/json; charset=utf-8'},
