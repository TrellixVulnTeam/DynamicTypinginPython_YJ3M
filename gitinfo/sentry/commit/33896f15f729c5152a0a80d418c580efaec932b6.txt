commit 33896f15f729c5152a0a80d418c580efaec932b6
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jul 6 10:48:37 2017 -0700

    workflow: support empty releases with resolutions

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 59524cf2c2..edae72f467 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -917,11 +917,10 @@ class EventManager(object):
         if not group.is_resolved():
             return
 
-        elif release:
-            # we only mark it as a regression if the event's release is newer than
-            # the release which we originally marked this as resolved
-            if GroupResolution.has_resolution(group, release):
-                return
+        # we only mark it as a regression if the event's release is newer than
+        # the release which we originally marked this as resolved
+        elif GroupResolution.has_resolution(group, release):
+            return
 
         if not plugin_is_regression(group, event):
             return
diff --git a/src/sentry/models/groupresolution.py b/src/sentry/models/groupresolution.py
index ee64136d8c..5860101cd8 100644
--- a/src/sentry/models/groupresolution.py
+++ b/src/sentry/models/groupresolution.py
@@ -64,6 +64,11 @@ class GroupResolution(Model):
         except IndexError:
             return False
 
+        # if no release is present, we assume we've gone from "no release" to "some release"
+        # in application configuration, and thus this must be older
+        if not release:
+            return True
+
         if res_type in (None, cls.Type.in_next_release):
             if res_release == release.id:
                 return True
diff --git a/tests/sentry/models/test_groupresolution.py b/tests/sentry/models/test_groupresolution.py
index 6f40894589..0045890217 100644
--- a/tests/sentry/models/test_groupresolution.py
+++ b/tests/sentry/models/test_groupresolution.py
@@ -72,3 +72,14 @@ class GroupResolutionTest(TestCase):
             type=GroupResolution.Type.in_release,
         )
         assert GroupResolution.has_resolution(self.group, self.old_release)
+
+    def test_no_release_with_resolution(self):
+        GroupResolution.objects.create(
+            release=self.new_release,
+            group=self.group,
+            type=GroupResolution.Type.in_release,
+        )
+        assert GroupResolution.has_resolution(self.group, None)
+
+    def test_no_release_with_no_resolution(self):
+        assert not GroupResolution.has_resolution(self.group, None)
