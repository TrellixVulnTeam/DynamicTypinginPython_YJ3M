commit c4d147e7246d28f5a2122afde6a525bc0ebcf422
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Feb 18 11:46:20 2016 -0800

    Add group hashes endpoint

diff --git a/src/sentry/api/endpoints/group_hashes.py b/src/sentry/api/endpoints/group_hashes.py
new file mode 100644
index 0000000000..a4f4dc9bcb
--- /dev/null
+++ b/src/sentry/api/endpoints/group_hashes.py
@@ -0,0 +1,44 @@
+from __future__ import absolute_import
+
+from sentry.api.base import DocSection
+from sentry.api.bases import GroupEndpoint
+from sentry.api.serializers import serialize
+from sentry.models import Group, GroupHash
+from sentry.utils.apidocs import scenario, attach_scenarios
+
+
+@scenario('ListAvailableHashes')
+def list_available_hashes_scenario(runner):
+    group = Group.objects.filter(project=runner.default_project).first()
+    runner.request(
+        method='GET',
+        path='/issues/%s/hashes/' % group.id
+    )
+
+
+class GroupHashesEndpoint(GroupEndpoint):
+    doc_section = DocSection.EVENTS
+
+    @attach_scenarios([list_available_hashes_scenario])
+    def get(self, request, group):
+        """
+        List an Issue's Hashes
+        ``````````````````````
+
+        This endpoint lists an issue's hashes, which are the generated
+        checksums used to aggregate individual events.
+
+        :pparam string issue_id: the ID of the issue to retrieve.
+        :auth: required
+        """
+
+        queryset = GroupHash.objects.filter(
+            group=group.id,
+        )
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by='id',
+            on_results=lambda x: serialize(x, request.user),
+        )
diff --git a/src/sentry/api/serializers/models/grouphash.py b/src/sentry/api/serializers/models/grouphash.py
new file mode 100644
index 0000000000..d13dbebd24
--- /dev/null
+++ b/src/sentry/api/serializers/models/grouphash.py
@@ -0,0 +1,12 @@
+from __future__ import absolute_import
+
+from sentry.api.serializers import Serializer, register
+from sentry.models import GroupHash
+
+
+@register(GroupHash)
+class GroupHashSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        return {
+            'id': obj.hash,
+        }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 23a0dd7bc7..4a9daee2c7 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -10,6 +10,7 @@ from .endpoints.group_details import GroupDetailsEndpoint
 from .endpoints.group_events import GroupEventsEndpoint
 from .endpoints.group_events_latest import GroupEventsLatestEndpoint
 from .endpoints.group_events_oldest import GroupEventsOldestEndpoint
+from .endpoints.group_hashes import GroupHashesEndpoint
 from .endpoints.group_notes import GroupNotesEndpoint
 from .endpoints.group_notes_details import GroupNotesDetailsEndpoint
 from .endpoints.group_stats import GroupStatsEndpoint
@@ -258,6 +259,9 @@ urlpatterns = patterns(
     url(r'^(?:groups|issues)/(?P<issue_id>\d+)/(?:notes|comments)/(?P<note_id>[^\/]+)/$',
         GroupNotesDetailsEndpoint.as_view(),
         name='sentry-api-0-group-notes-details'),
+    url(r'^(?:groups|issues)/(?P<issue_id>\d+)/hashes/$',
+        GroupHashesEndpoint.as_view(),
+        name='sentry-api-0-group-events'),
     url(r'^(?:groups|issues)/(?P<issue_id>\d+)/stats/$',
         GroupStatsEndpoint.as_view(),
         name='sentry-api-0-group-stats'),
diff --git a/tests/sentry/api/endpoints/test_group_hashes.py b/tests/sentry/api/endpoints/test_group_hashes.py
new file mode 100644
index 0000000000..2b6c1edc7d
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_hashes.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import
+
+from sentry.models import GroupHash
+from sentry.testutils import APITestCase
+
+
+class GroupHashesTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+        GroupHash.objects.create(group=group, hash='a' * 32)
+        GroupHash.objects.create(group=group, hash='b' * 32)
+
+        url = '/api/0/issues/{}/hashes/'.format(group.id)
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        assert sorted(map(lambda x: x['id'], response.data)) == sorted([
+            'a' * 32,
+            'b' * 32,
+        ])
