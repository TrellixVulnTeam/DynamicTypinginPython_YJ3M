commit f8451ed0b81d8485d1a2d7091c1fb06bcb59d638
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Sep 26 10:07:42 2016 -0700

    Move str,unicode,basestring,long name checks into a visit_Name (#4199)
    
    * Move str,unicode,basestring,long name checks into a visit_Name
    
    When they were in visit_Call, they only got visited when explicitly
    doing `str()`, now it covers all of these uses:
    
    * `str('thing')`
    * `isinstance(a, str)`
    * `a = str`
    
    For all of str, unicode, basestring, and long
    
    * Fix new lint violations

diff --git a/src/sentry/lint/sentry_check.py b/src/sentry/lint/sentry_check.py
index ff014f0f3e..0afdcad7e5 100644
--- a/src/sentry/lint/sentry_check.py
+++ b/src/sentry/lint/sentry_check.py
@@ -92,7 +92,7 @@ class SentryVisitor(ast.NodeVisitor):
                             bug(node.lineno, node.col_offset)
                         )
                     break
-            for bug in (B311,):
+            for bug in (B312,):
                 if node.func.attr in bug.methods:
                     call_path = '.'.join(self.compose_call_path(node.func.value))
                     if call_path in bug.invalid_paths:
@@ -100,13 +100,6 @@ class SentryVisitor(ast.NodeVisitor):
                             bug(node.lineno, node.col_offset)
                         )
                     break
-        elif isinstance(node.func, ast.Name):
-            for bug in (B308, B309, B310):
-                if node.func.id in bug.names:
-                    self.errors.append(
-                        bug(node.lineno, node.col_offset)
-                    )
-                    break
         self.generic_visit(node)
 
     def visit_Attribute(self, node):
@@ -147,10 +140,20 @@ class SentryVisitor(ast.NodeVisitor):
                 )
             if '__unicode__' in assign_targets:
                 self.errors.append(
-                    B312(node.lineno, node.col_offset)
+                    B313(node.lineno, node.col_offset)
                 )
         self.generic_visit(node)
 
+    def visit_Name(self, node):
+        for bug in (B308, B309, B310, B311):
+            if node.id in bug.names:
+                self.errors.append(
+                    bug(
+                        lineno=node.lineno,
+                        col=node.col_offset,
+                    ),
+                )
+
     def compose_call_path(self, node):
         if isinstance(node, ast.Attribute):
             for item in self.compose_call_path(node.value):
@@ -305,40 +308,48 @@ B307.names = {'urllib', 'urlib2', 'urlparse'}
 
 B308 = partial(
     error,
-    message="B308: The usage of ``str()`` differs between Python 2 and 3. Use "
-            "``six.text_type()`` or ``six.binary_type`` instead.",
+    message="B308: The usage of ``str`` differs between Python 2 and 3. Use "
+            "``six.binary_type`` instead.",
     type=SentryCheck,
 )
 B308.names = {'str'}
 
 B309 = partial(
     error,
-    message="B309: ``unicode()`` does not exist in Python 3. Use "
-            "``six.text_type()`` instead.",
+    message="B309: ``unicode`` does not exist in Python 3. Use "
+            "``six.text_type`` instead.",
     type=SentryCheck,
 )
 B309.names = {'unicode'}
 
 B310 = partial(
     error,
-    message="B310: ``long`` should not be used. Use int instead, and allow "
-            "Python to deal with handling large integers.",
+    message="B310: ``basestring`` does not exist in Python 3. Use "
+            "``six.string_types`` instead.",
     type=SentryCheck,
 )
-B310.names = {'long'}
+B310.names = {'basestring'}
 
 B311 = partial(
     error,
-    message="B311: ``cgi.escape`` and ``html.escape`` should not be used. Use "
-            "sentry.utils.html.escape instead.",
+    message="B311: ``long`` should not be used. Use int instead, and allow "
+            "Python to deal with handling large integers.",
     type=SentryCheck,
 )
-B311.methods = {'escape'}
-B311.invalid_paths = {'cgi', 'html'}
+B311.names = {'long'}
 
 B312 = partial(
     error,
-    message="B312: ``__unicode__`` should not be defined on classes. Define "
+    message="B312: ``cgi.escape`` and ``html.escape`` should not be used. Use "
+            "sentry.utils.html.escape instead.",
+    type=SentryCheck,
+)
+B312.methods = {'escape'}
+B312.invalid_paths = {'cgi', 'html'}
+
+B313 = partial(
+    error,
+    message="B313: ``__unicode__`` should not be defined on classes. Define "
             "just ``__str__`` returning a unicode text string, and use the "
             "sentry.utils.compat.implements_to_string class decorator.",
     type=SentryCheck,
diff --git a/src/sentry/runner/commands/tsdb.py b/src/sentry/runner/commands/tsdb.py
index fafc0a60b5..6b872d8a55 100644
--- a/src/sentry/runner/commands/tsdb.py
+++ b/src/sentry/runner/commands/tsdb.py
@@ -115,6 +115,6 @@ def organizations(metrics, since, until):
                 '{} {} {}\n'.format(
                     instance.id,
                     instance.slug,
-                    ' '.join(map(str, values)),
+                    ' '.join(map(six.binary_type, values)),
                 ),
             )
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index 8df0402a1f..3939008a1c 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -55,7 +55,7 @@ register.filter(to_json)
 @register.filter
 def multiply(x, y):
     def coerce(value):
-        if isinstance(value, (int, long, float)):
+        if isinstance(value, (six.integer_types, float)):
             return value
         try:
             return int(value)
@@ -102,7 +102,7 @@ def subtract(value, amount):
 
 @register.filter
 def absolute_value(value):
-    return abs(int(value) if isinstance(value, (int, long)) else float(value))
+    return abs(int(value) if isinstance(value, six.integer_types) else float(value))
 
 
 @register.filter
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index 45613b8dc9..55cab7718c 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -213,7 +213,7 @@ class ListResolver(object):
                 'Cannot generate mailing list identifier for {!r}'.format(instance)
             )
 
-        label = '.'.join(map(str, handler(instance)))
+        label = '.'.join(map(six.binary_type, handler(instance)))
         assert is_valid_dot_atom(label)
 
         return '{}.{}'.format(label, self.__namespace)
diff --git a/src/sentry/utils/numbers.py b/src/sentry/utils/numbers.py
index 3c1b1050cf..710f8bacd7 100644
--- a/src/sentry/utils/numbers.py
+++ b/src/sentry/utils/numbers.py
@@ -60,5 +60,5 @@ def base36_encode(number):
     return _encode(number, BASE36_ALPHABET)
 
 
-def base36_decode(str):
-    return int(str, 36)
+def base36_decode(s):
+    return int(s, 36)
diff --git a/src/sentry/utils/versioning.py b/src/sentry/utils/versioning.py
index aa633bf174..321f86b476 100644
--- a/src/sentry/utils/versioning.py
+++ b/src/sentry/utils/versioning.py
@@ -1,12 +1,14 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.exceptions import InvalidConfiguration
 from sentry.utils import warnings
 
 
 class Version(tuple):
     def __str__(self):
-        return '.'.join(map(str, self))
+        return '.'.join(map(six.binary_type, self))
 
 
 def summarize(sequence, max=3):
@@ -21,7 +23,7 @@ def summarize(sequence, max=3):
 
 def make_upgrade_message(service, modality, version, hosts):
     return '{service} {modality} be upgraded to {version} on {hosts}.'.format(
-        hosts=','.join(map(str, summarize(hosts.keys(), 2))),
+        hosts=','.join(map(six.binary_type, summarize(hosts.keys(), 2))),
         modality=modality,
         service=service,
         version=version,
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index 50e11e3407..7e7f5f0062 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -222,7 +222,7 @@ def status_warnings(request):
         else:
             warnings.append(warning)
 
-    sort_by_message = functools.partial(sorted, key=str)
+    sort_by_message = functools.partial(sorted, key=six.binary_type)
 
     return render_to_response(
         'sentry/admin/status/warnings.html',
