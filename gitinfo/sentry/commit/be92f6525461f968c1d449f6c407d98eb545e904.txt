commit be92f6525461f968c1d449f6c407d98eb545e904
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jul 16 15:13:59 2015 -0700

    Migrate remaining logic into get_api_context

diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index aae2b55c0e..5702b9387b 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -13,7 +13,7 @@ __all__ = ('Exception',)
 from django.conf import settings
 
 from sentry.interfaces.base import Interface
-from sentry.interfaces.stacktrace import Stacktrace, is_newest_frame_first
+from sentry.interfaces.stacktrace import Stacktrace
 from sentry.utils.safe import trim
 
 
@@ -69,9 +69,12 @@ class SingleException(Interface):
             'stacktrace': stacktrace,
         }
 
-    def get_api_context(self, is_public=False):
+    def get_api_context(self, is_public=False, has_system_frames=None):
         if self.stacktrace:
-            stacktrace = self.stacktrace.get_api_context(is_public=is_public)
+            stacktrace = self.stacktrace.get_api_context(
+                is_public=is_public,
+                has_system_frames=has_system_frames,
+            )
         else:
             stacktrace = None
 
@@ -98,35 +101,6 @@ class SingleException(Interface):
             output = filter(bool, [self.type, self.value])
         return output
 
-    def get_context(self, event, is_public=False, **kwargs):
-        last_frame = None
-        interface = event.interfaces.get('sentry.interfaces.Stacktrace')
-        if interface is not None and interface.frames:
-            last_frame = interface.frames[-1]
-
-        e_module = self.module
-        e_type = self.type
-        e_value = self.value
-
-        if self.module:
-            fullname = '%s.%s' % (e_module, e_type)
-        else:
-            fullname = e_type
-
-        if e_value and not e_type:
-            e_type = e_value
-            e_value = None
-
-        return {
-            'is_public': is_public,
-            'event': event,
-            'exception_type': e_type,
-            'exception_value': e_value,
-            'exception_module': e_module,
-            'fullname': fullname,
-            'last_frame': last_frame,
-        }
-
 
 class Exception(Interface):
     """
@@ -160,6 +134,15 @@ class Exception(Interface):
 
     score = 2000
 
+    def __getitem__(self, key):
+        return self.values[key]
+
+    def __iter__(self):
+        return iter(self.values)
+
+    def __len__(self):
+        return len(self.values)
+
     @classmethod
     def to_python(cls, data):
         if 'values' not in data:
@@ -190,24 +173,6 @@ class Exception(Interface):
             'exc_omitted': self.exc_omitted,
         }
 
-    def get_api_context(self, is_public=False):
-        return {
-            'values': [
-                v.get_api_context(is_public=is_public)
-                for v in self.values
-            ],
-            'excOmitted': self.exc_omitted,
-        }
-
-    def __getitem__(self, key):
-        return self.values[key]
-
-    def __iter__(self):
-        return iter(self.values)
-
-    def __len__(self):
-        return len(self.values)
-
     def get_alias(self):
         return 'exception'
 
@@ -245,9 +210,35 @@ class Exception(Interface):
 
         return output
 
-    def get_context(self, event, is_public=False, **kwargs):
-        newest_first = is_newest_frame_first(event)
+    def get_api_context(self, is_public=False):
+        has_system_frames = self.has_system_frames()
 
+        return {
+            'values': [
+                v.get_api_context(
+                    is_public=is_public,
+                    has_system_frames=has_system_frames,
+                )
+                for v in self.values
+            ],
+            'hasSystemFrames': has_system_frames,
+            'excOmitted': self.exc_omitted,
+        }
+
+    def to_string(self, event, is_public=False, **kwargs):
+        if not self.values:
+            return ''
+
+        output = []
+        for exc in self.values:
+            output.append(u'{0}: {1}\n'.format(exc.type, exc.value))
+            if exc.stacktrace:
+                output.append(exc.stacktrace.get_stacktrace(
+                    event, system_frames=False, max_frames=5,
+                    header=False) + '\n\n')
+        return (''.join(output)).strip()
+
+    def has_system_frames(self):
         system_frames = 0
         app_frames = 0
         unknown_frames = 0
@@ -281,57 +272,7 @@ class Exception(Interface):
 
         # if there is a mix of frame styles then we indicate that system frames
         # are present and should be represented as a split
-        has_system_frames = app_frames and system_frames
-
-        context_kwargs = {
-            'event': event,
-            'is_public': is_public,
-            'newest_first': newest_first,
-            'has_system_frames': has_system_frames,
-        }
-
-        exceptions = []
-        last = len(self.values) - 1
-        for num, e in enumerate(self.values):
-            context = e.get_context(**context_kwargs)
-            if e.stacktrace:
-                context['stacktrace'] = e.stacktrace.get_context(
-                    with_stacktrace=False, **context_kwargs)
-            else:
-                context['stacktrace'] = {}
-            context['stack_id'] = 'exception_%d' % (num,)
-            context['is_root'] = num == last
-            exceptions.append(context)
-
-        if newest_first:
-            exceptions.reverse()
-
-        if self.exc_omitted:
-            first_exc_omitted, last_exc_omitted = self.exc_omitted
-        else:
-            first_exc_omitted, last_exc_omitted = None, None
-
-        return {
-            'newest_first': newest_first,
-            'system_frames': system_frames if has_system_frames else 0,
-            'exceptions': exceptions,
-            'stacktrace': self.get_stacktrace(event, newest_first=newest_first),
-            'first_exc_omitted': first_exc_omitted,
-            'last_exc_omitted': last_exc_omitted,
-        }
-
-    def to_string(self, event, is_public=False, **kwargs):
-        if not self.values:
-            return ''
-
-        output = []
-        for exc in self.values:
-            output.append(u'{0}: {1}\n'.format(exc.type, exc.value))
-            if exc.stacktrace:
-                output.append(exc.stacktrace.get_stacktrace(
-                    event, system_frames=False, max_frames=5,
-                    header=False) + '\n\n')
-        return (''.join(output)).strip()
+        return bool(app_frames and system_frames)
 
     def get_stacktrace(self, *args, **kwargs):
         exc = self.values[0]
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index d596bbd53b..2baa884efd 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -214,49 +214,6 @@ class Frame(Interface):
 
         return cls(**kwargs)
 
-    def get_api_context(self, is_public=False):
-        data = {
-            'filename': self.filename,
-            'absPath': self.abs_path,
-            'module': self.module,
-            'function': self.function,
-            'context': get_context(
-                lineno=self.lineno,
-                context_line=self.context_line,
-                pre_context=self.pre_context,
-                post_context=self.post_context,
-                filename=self.filename or self.module,
-            ),
-            'lineNo': self.lineno,
-            'colNo': self.colno,
-            'inApp': self.in_app,
-            'errors': self.errors,
-        }
-        if not is_public:
-            data['vars'] = self.vars
-        return data
-
-    def is_url(self):
-        if not self.abs_path:
-            return False
-        return is_url(self.abs_path)
-
-    def is_caused_by(self):
-        # XXX(dcramer): dont compute hash using frames containing the 'Caused by'
-        # text as it contains an exception value which may may contain dynamic
-        # values (see raven-java#125)
-        return self.filename.startswith('Caused by: ')
-
-    def is_unhashable_module(self):
-        # TODO(dcramer): this is Java specific
-        return '$$Lambda$' in self.module
-
-    def is_unhashable_function(self):
-        # TODO(dcramer): lambda$ is Java specific
-        # TODO(dcramer): [Anonymous is PHP specific (used for things like SQL
-        # queries and JSON data)
-        return self.function.startswith(('lambda$', '[Anonymous'))
-
     def get_hash(self):
         """
         The hash of the frame varies depending on the data available.
@@ -302,49 +259,60 @@ class Frame(Interface):
             output.append(self.lineno)
         return output
 
-    def get_context(self, event, is_public=False, **kwargs):
-        if (self.context_line and self.lineno is not None
-                and (self.pre_context or self.post_context)):
-            context = get_context(
+    def get_api_context(self, is_public=False):
+        data = {
+            'filename': self.filename,
+            'absPath': self.abs_path,
+            'module': self.module,
+            'function': self.function,
+            'context': get_context(
                 lineno=self.lineno,
                 context_line=self.context_line,
                 pre_context=self.pre_context,
                 post_context=self.post_context,
                 filename=self.filename or self.module,
-            )
-            start_lineno = context[0][0]
-        else:
-            context = []
-            start_lineno = None
-
-        frame_data = {
-            'abs_path': self.abs_path,
-            'filename': self.filename,
-            'module': self.module,
-            'function': self.function,
-            'start_lineno': start_lineno,
-            'lineno': self.lineno,
-            'colno': self.colno,
-            'context': context,
-            'context_line': self.context_line,
-            'errors': self.errors or [],
-            'in_app': self.in_app,
-            'is_url': self.is_url(),
+            ),
+            'lineNo': self.lineno,
+            'colNo': self.colno,
+            'inApp': self.in_app,
+            'errors': self.errors,
         }
         if not is_public:
-            frame_data['vars'] = self.vars or {}
-
-        if event.platform == 'javascript' and self.data:
-            frame_data.update({
-                'sourcemap': self.data['sourcemap'].rsplit('/', 1)[-1],
-                'sourcemap_url': urljoin(self.abs_path, self.data['sourcemap']),
-                'orig_function': self.data.get('orig_function', '?'),
-                'orig_abs_path': self.data.get('orig_abs_path', '?'),
-                'orig_filename': self.data.get('orig_filename', '?'),
-                'orig_lineno': self.data.get('orig_lineno', '?'),
-                'orig_colno': self.data.get('orig_colno', '?'),
+            data['vars'] = self.vars
+        # TODO(dcramer): abstract out this API
+        if self.data:
+            data.update({
+                'map': self.data['sourcemap'].rsplit('/', 1)[-1],
+                'origFunction': self.data.get('orig_function', '?'),
+                'origAbsPath': self.data.get('orig_abs_path', '?'),
+                'origFilename': self.data.get('orig_filename', '?'),
+                'origLineNo': self.data.get('orig_lineno', '?'),
+                'origColNo': self.data.get('orig_colno', '?'),
             })
-        return frame_data
+            if self.is_url():
+                data['mapUrl'] = urljoin(self.abs_path, self.data['sourcemap'])
+        return data
+
+    def is_url(self):
+        if not self.abs_path:
+            return False
+        return is_url(self.abs_path)
+
+    def is_caused_by(self):
+        # XXX(dcramer): dont compute hash using frames containing the 'Caused by'
+        # text as it contains an exception value which may may contain dynamic
+        # values (see raven-java#125)
+        return self.filename.startswith('Caused by: ')
+
+    def is_unhashable_module(self):
+        # TODO(dcramer): this is Java specific
+        return '$$Lambda$' in self.module
+
+    def is_unhashable_function(self):
+        # TODO(dcramer): lambda$ is Java specific
+        # TODO(dcramer): [Anonymous is PHP specific (used for things like SQL
+        # queries and JSON data)
+        return self.function.startswith(('lambda$', '[Anonymous'))
 
     def to_string(self, event):
         if event.platform is not None:
@@ -474,9 +442,22 @@ class Stacktrace(Interface):
 
         return cls(**kwargs)
 
-    def get_api_context(self, is_public=False):
+    def get_api_context(self, is_public=False, has_system_frames=None):
+        # if there are no system frames, pretend they're all part of the app
+        if has_system_frames is None:
+            has_system_frames = self.has_system_frames()
+
+        frame_list = []
+        for frame in self.frames:
+            frame_context = frame.get_api_context(is_public=is_public)
+            if not has_system_frames:
+                frame_context['inApp'] = True
+            elif frame_context.get('inApp') is None:
+                frame_context['inApp'] = False
+            frame_list.append(frame_context)
+
         return {
-            'frames': [f.get_api_context(is_public=is_public) for f in self.frames],
+            'frames': frame_list,
             'framesOmitted': self.frames_omitted,
         }
 
@@ -515,59 +496,19 @@ class Stacktrace(Interface):
             output.extend(frame.get_hash())
         return output
 
-    def get_context(self, event, is_public=False, newest_first=None,
-                    with_stacktrace=True, has_system_frames=None, **kwargs):
+    def to_string(self, event, is_public=False, **kwargs):
+        return self.get_stacktrace(event, system_frames=False, max_frames=10)
 
+    def has_system_frames(self):
         system_frames = 0
         frames = []
         for frame in self.frames:
-            frames.append(frame.get_context(event=event, is_public=is_public))
-
             if not frame.in_app:
                 system_frames += 1
 
-        if has_system_frames is None:
-            if len(frames) == system_frames:
-                system_frames = 0
-            has_system_frames = bool(system_frames)
-        elif not has_system_frames:
+        if len(frames) == system_frames:
             system_frames = 0
-
-        # if there are no system frames, pretend they're all part of the app
-        if not has_system_frames:
-            for frame in frames:
-                frame['in_app'] = True
-        else:
-            for frame in frames:
-                if frame.get('in_app') is None:
-                    frame['in_app'] = False
-
-        if newest_first is None:
-            newest_first = is_newest_frame_first(event)
-        if newest_first:
-            frames = frames[::-1]
-
-        if self.frames_omitted:
-            first_frame_omitted, last_frame_omitted = self.frames_omitted
-        else:
-            first_frame_omitted, last_frame_omitted = None, None
-
-        context = {
-            'is_public': is_public,
-            'newest_first': newest_first,
-            'system_frames': system_frames,
-            'event': event,
-            'frames': frames,
-            'stack_id': 'stacktrace_1',
-            'first_frame_omitted': first_frame_omitted,
-            'last_frame_omitted': last_frame_omitted,
-        }
-        if with_stacktrace:
-            context['stacktrace'] = self.get_traceback(event, newest_first=newest_first)
-        return context
-
-    def to_string(self, event, is_public=False, **kwargs):
-        return self.get_stacktrace(event, system_frames=False, max_frames=10)
+        return bool(system_frames)
 
     def get_stacktrace(self, event, system_frames=True, newest_first=None,
                        max_frames=None, header=True):
diff --git a/src/sentry/interfaces/user.py b/src/sentry/interfaces/user.py
index 0dc4ce0c39..ed3d691029 100644
--- a/src/sentry/interfaces/user.py
+++ b/src/sentry/interfaces/user.py
@@ -74,15 +74,12 @@ class User(Interface):
     def get_hash(self):
         return []
 
-    def get_context(self):
-        return {
-            'user_ip_address': self.ip_address,
+    def to_email_html(self, event, **kwargs):
+        context = {
             'user_id': self.id,
-            'user_username': self.username,
             'user_email': self.email,
+            'user_username': self.username,
+            'user_ip_address': self.ip_address,
             'user_data': self.data,
         }
-
-    def to_email_html(self, event, **kwargs):
-        context = self.get_context()
         return render_to_string('sentry/partial/interfaces/user_email.html', context)
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index a190154e72..e32d167088 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -101,10 +101,8 @@ ValueError: hello world
         event = self.create_event(data={
             'sentry.interfaces.Exception': inst.to_json(),
         })
-        context = inst.get_context(event)
-        assert context['system_frames'] == 1
-        assert context['exceptions'][0]['stacktrace']['system_frames'] == 0
-        assert context['exceptions'][1]['stacktrace']['system_frames'] == 1
+        context = inst.get_api_context()
+        assert context['hasSystemFrames']
 
     def test_context_with_only_system_frames(self):
         inst = Exception.to_python(dict(values=[{
@@ -130,10 +128,8 @@ ValueError: hello world
         event = self.create_event(data={
             'sentry.interfaces.Exception': inst.to_json(),
         })
-        context = inst.get_context(event)
-        assert context['system_frames'] == 0
-        assert context['exceptions'][0]['stacktrace']['system_frames'] == 0
-        assert context['exceptions'][1]['stacktrace']['system_frames'] == 0
+        context = inst.get_api_context()
+        assert not context['hasSystemFrames']
 
     def test_context_with_only_app_frames(self):
         inst = Exception.to_python(dict(values=[{
@@ -159,10 +155,8 @@ ValueError: hello world
         event = self.create_event(data={
             'sentry.interfaces.Exception': inst.to_json(),
         })
-        context = inst.get_context(event)
-        assert context['system_frames'] == 0
-        assert context['exceptions'][0]['stacktrace']['system_frames'] == 0
-        assert context['exceptions'][1]['stacktrace']['system_frames'] == 0
+        context = inst.get_api_context()
+        assert not context['hasSystemFrames']
 
 
 class SingleExceptionTest(TestCase):
