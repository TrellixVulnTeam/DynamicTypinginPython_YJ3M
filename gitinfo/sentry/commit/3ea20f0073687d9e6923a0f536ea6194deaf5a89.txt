commit 3ea20f0073687d9e6923a0f536ea6194deaf5a89
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Sep 28 17:18:26 2015 -0700

    Unify our use of force_bytes and hashlib

diff --git a/src/sentry/buffer/redis.py b/src/sentry/buffer/redis.py
index f61b4c3cf9..3940e9193c 100644
--- a/src/sentry/buffer/redis.py
+++ b/src/sentry/buffer/redis.py
@@ -9,8 +9,7 @@ from __future__ import absolute_import
 
 from django.conf import settings
 from django.db import models
-from django.utils.encoding import smart_str
-from hashlib import md5
+from django.utils.encoding import force_bytes
 from rb import Cluster
 from time import time
 
@@ -18,6 +17,7 @@ from sentry.buffer import Buffer
 from sentry.exceptions import InvalidConfiguration
 from sentry.tasks.process_buffer import process_incr
 from sentry.utils.compat import pickle
+from sentry.utils.hashlib import md5
 from sentry.utils.imports import import_string
 
 
@@ -45,7 +45,7 @@ class RedisBuffer(Buffer):
     def _coerce_val(self, value):
         if isinstance(value, models.Model):
             value = value.pk
-        return smart_str(value)
+        return force_bytes(value, errors='replace')
 
     def _make_key(self, model, filters):
         """
@@ -53,8 +53,8 @@ class RedisBuffer(Buffer):
         """
         return 'b:k:%s:%s' % (
             model._meta,
-            md5(smart_str('&'.join('%s=%s' % (k, self._coerce_val(v))
-                for k, v in sorted(filters.iteritems())))).hexdigest(),
+            md5('&'.join('%s=%s' % (k, self._coerce_val(v))
+                for k, v in sorted(filters.iteritems()))).hexdigest(),
         )
 
     def _make_lock_key(self, key):
diff --git a/src/sentry/db/models/manager.py b/src/sentry/db/models/manager.py
index 9a90d5573d..8dbc27c1cd 100644
--- a/src/sentry/db/models/manager.py
+++ b/src/sentry/db/models/manager.py
@@ -8,7 +8,6 @@ sentry.db.models.manager
 
 from __future__ import absolute_import, print_function
 
-import hashlib
 import logging
 import six
 import threading
@@ -63,7 +62,7 @@ def make_key(model, prefix, kwargs):
         kwargs_bits.append('%s=%s' % (k, v))
     kwargs_bits = ':'.join(kwargs_bits)
 
-    return '%s:%s:%s' % (prefix, model.__name__, hashlib.md5(kwargs_bits).hexdigest())
+    return '%s:%s:%s' % (prefix, model.__name__, md5(kwargs_bits).hexdigest())
 
 
 class BaseManager(Manager):
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index c7fbefc675..0b1bc15604 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -16,8 +16,8 @@ from datetime import datetime, timedelta
 from django.conf import settings
 from django.db import IntegrityError, transaction
 from django.utils import timezone
+from django.utils.encoding import force_bytes
 from hashlib import md5
-from raven.utils.encoding import to_string
 from uuid import uuid4
 
 from sentry.app import buffer, tsdb
@@ -63,7 +63,7 @@ def time_limit(silence):  # ~ 3600 per hour
 def md5_from_hash(hash_bits):
     result = md5()
     for bit in hash_bits:
-        result.update(to_string(bit))
+        result.update(force_bytes(bit, errors='replace'))
     return result.hexdigest()
 
 
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index c0a8d95c0e..8f374db768 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -8,8 +8,8 @@ import base64
 
 from django.conf import settings
 from django.core.exceptions import SuspiciousOperation
+from django.utils.encoding import force_bytes
 from collections import namedtuple
-from hashlib import md5
 from os.path import splitext
 from requests.exceptions import RequestException
 from simplejson import JSONDecodeError
@@ -27,6 +27,7 @@ from sentry.interfaces.stacktrace import Stacktrace
 from sentry.models import EventError, Release, ReleaseFile
 from sentry.event_manager import generate_culprit
 from sentry.utils.cache import cache
+from sentry.utils.hashlib import md5
 from sentry.utils.http import is_valid_origin
 
 from .cache import SourceCache, SourceMapCache
@@ -182,7 +183,7 @@ def discover_sourcemap(result):
 def fetch_release_file(filename, release):
     cache_key = 'releasefile:%s:%s' % (
         release.id,
-        md5(filename.encode('utf-8')).hexdigest(),
+        md5(filename).hexdigest(),
     )
     logger.debug('Checking cache for release artfiact %r (release_id=%s)',
                  filename, release.id)
@@ -221,7 +222,7 @@ def fetch_url(url, project=None, release=None):
     Attempts to fetch from the cache.
     """
     cache_key = 'source:cache:v2:%s' % (
-        md5(url.encode('utf-8')).hexdigest(),
+        md5(url).hexdigest(),
     )
 
     if release:
@@ -237,7 +238,7 @@ def fetch_url(url, project=None, release=None):
         # lock down domains that are problematic
         domain = urlparse(url).netloc
         domain_key = 'source:blacklist:v2:%s' % (
-            md5(domain.encode('utf-8')).hexdigest(),
+            md5(domain).hexdigest(),
         )
         domain_result = cache.get(domain_key)
         if domain_result:
@@ -508,7 +509,7 @@ class SourceProcessor(object):
                     else:
                         all_errors.append({
                             'type': EventError.JS_MISSING_SOURCE,
-                            'url': abs_path.encode('utf-8'),
+                            'url': force_bytes(abs_path, errors='replace'),
                         })
 
                 # Store original data in annotation
diff --git a/src/sentry/models/eventuser.py b/src/sentry/models/eventuser.py
index 4363035d9b..574b31e8eb 100644
--- a/src/sentry/models/eventuser.py
+++ b/src/sentry/models/eventuser.py
@@ -2,10 +2,10 @@ from __future__ import absolute_import
 
 from django.db import models
 from django.utils import timezone
-from hashlib import md5
 
 from sentry.db.models import FlexibleForeignKey, Model, sane_repr
 from sentry.utils.cache import memoize
+from sentry.utils.hashlib import md5
 
 
 class EventUser(Model):
@@ -40,7 +40,7 @@ class EventUser(Model):
 
     def get_hash(self):
         value = self.ident or self.username or self.email or self.ip_address
-        return md5(value.encode('utf-8')).hexdigest()
+        return md5(value).hexdigest()
 
     @memoize
     def tag_value(self):
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 480a0a97b7..2c71669528 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -9,13 +9,13 @@ from __future__ import absolute_import, print_function
 
 from django.db import models
 from django.utils import timezone
-from hashlib import md5
 from jsonfield import JSONField
 
 from sentry.db.models import (
     BoundedPositiveIntegerField, FlexibleForeignKey, Model, sane_repr
 )
 from sentry.utils.cache import cache
+from sentry.utils.hashlib import md5
 
 
 class Release(Model):
diff --git a/src/sentry/models/releasefile.py b/src/sentry/models/releasefile.py
index 5769ebc1c7..8b7a1de339 100644
--- a/src/sentry/models/releasefile.py
+++ b/src/sentry/models/releasefile.py
@@ -9,9 +9,9 @@ sentry.models.releasefile
 from __future__ import absolute_import
 
 from django.db import models
-from hashlib import sha1
 
 from sentry.db.models import FlexibleForeignKey, Model, sane_repr
+from sentry.utils.hashlib import sha1
 
 
 class ReleaseFile(Model):
@@ -42,4 +42,4 @@ class ReleaseFile(Model):
 
     @classmethod
     def get_ident(cls, name):
-        return sha1(name.encode('utf-8')).hexdigest()
+        return sha1(name).hexdigest()
diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index 8da47f0e47..b69386c1f0 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -11,11 +11,11 @@ import logging
 
 from django.conf import settings
 from django.utils import timezone
-from hashlib import md5
 
 from sentry.cache import default_cache
 from sentry.db.models.query import create_or_update
 from sentry.models import Option
+from sentry.utils.hashlib import md5
 
 
 CACHE_FETCH_ERR = 'Unable to fetch option cache for %s'
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index dcc57d4e7e..1960ec79f2 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -11,13 +11,13 @@ from __future__ import absolute_import, print_function
 from celery.utils.log import get_task_logger
 from django.conf import settings
 from django.db import IntegrityError, transaction
-from hashlib import md5
 
 from sentry.constants import PLATFORM_LIST, PLATFORM_ROOTS
 from sentry.plugins import plugins
 from sentry.tasks.base import instrumented_task
 from sentry.utils import metrics
 from sentry.utils.safe import safe_execute
+from sentry.utils.hashlib import md5
 
 logger = get_task_logger(__name__)
 
diff --git a/src/sentry/utils/avatar.py b/src/sentry/utils/avatar.py
index e0acdc2a2b..8a50ac745a 100644
--- a/src/sentry/utils/avatar.py
+++ b/src/sentry/utils/avatar.py
@@ -7,15 +7,16 @@ sentry.utils.avatar
 """
 from __future__ import absolute_import
 
-import hashlib
 import urllib
 
 from django.conf import settings
 
+from sentry.utils.hashlib import md5
+
 
 def get_gravatar_url(email, size=None, default='mm'):
     gravatar_url = "%s/avatar/%s" % (settings.SENTRY_GRAVATAR_BASE_URL,
-                                     hashlib.md5(email.lower()).hexdigest())
+                                     md5(email.lower()).hexdigest())
 
     properties = {}
     if size:
diff --git a/src/sentry/utils/hashlib.py b/src/sentry/utils/hashlib.py
new file mode 100644
index 0000000000..3ae9bf6766
--- /dev/null
+++ b/src/sentry/utils/hashlib.py
@@ -0,0 +1,17 @@
+"""
+sentry.utils.hashlib
+~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+from hashlib import md5 as _md5
+from hashlib import sha1 as _sha1
+
+from django.utils.encoding import force_bytes
+
+
+md5 = lambda x: _md5(force_bytes(x, errors='replace'))
+sha1 = lambda x: _sha1(force_bytes(x, errors='replace'))
diff --git a/src/sentry/web/frontend/mailgun_inbound_webhook.py b/src/sentry/web/frontend/mailgun_inbound_webhook.py
index 3f67b14e11..185a89a8bd 100644
--- a/src/sentry/web/frontend/mailgun_inbound_webhook.py
+++ b/src/sentry/web/frontend/mailgun_inbound_webhook.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import, print_function
 
-import hashlib
+from hashlib import sha256
 import hmac
 import logging
 
@@ -22,7 +22,7 @@ class MailgunInboundWebhookView(View):
         return constant_time_compare(signature, hmac.new(
             key=api_key,
             msg='{}{}'.format(timestamp, token),
-            digestmod=hashlib.sha256
+            digestmod=sha256
         ).hexdigest())
 
     @method_decorator(csrf_exempt)
diff --git a/src/sentry/web/frontend/project_release_tracking.py b/src/sentry/web/frontend/project_release_tracking.py
index 08a991b89e..9b323f8f9f 100644
--- a/src/sentry/web/frontend/project_release_tracking.py
+++ b/src/sentry/web/frontend/project_release_tracking.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-import hashlib
+from hashlib import sha256
 import hmac
 
 from django.contrib import messages
@@ -56,7 +56,7 @@ class ProjectReleaseTrackingView(ProjectView):
         return hmac.new(
             key=str(token),
             msg='{}-{}'.format(plugin_id, project_id),
-            digestmod=hashlib.sha256
+            digestmod=sha256
         ).hexdigest()
 
     def handle(self, request, organization, team, project):
diff --git a/src/sentry/web/frontend/release_webhook.py b/src/sentry/web/frontend/release_webhook.py
index 3e0d24a2c8..00bea25f72 100644
--- a/src/sentry/web/frontend/release_webhook.py
+++ b/src/sentry/web/frontend/release_webhook.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import, print_function
 
-import hashlib
+from hashlib import sha256
 import hmac
 import logging
 
@@ -19,7 +19,7 @@ class ReleaseWebhookView(View):
         return constant_time_compare(signature, hmac.new(
             key=str(token),
             msg='{}-{}'.format(plugin_id, project_id),
-            digestmod=hashlib.sha256
+            digestmod=sha256
         ).hexdigest())
 
     @method_decorator(csrf_exempt)
diff --git a/tests/sentry/utils/hashlib/__init__.py b/tests/sentry/utils/hashlib/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/utils/hashlib/tests.py b/tests/sentry/utils/hashlib/tests.py
new file mode 100644
index 0000000000..5f7e8a9b26
--- /dev/null
+++ b/tests/sentry/utils/hashlib/tests.py
@@ -0,0 +1,16 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.utils.hashlib import md5, sha1
+from sentry.testutils import TestCase
+
+
+class HashlibTest(TestCase):
+    def test_simple(self):
+        md5('x').hexdigest() == '9dd4e461268c8034f5c8564e155c67a6'
+        sha1('x').hexdigest() == '11f6ad8ec52a2984abaafd7c3b516503785c2072'
+
+    def test_unicode(self):
+        md5(u'ü').hexdigest() == 'c03410a5204b21cd8229ff754688d743'
+        sha1(u'ü').hexdigest() == '94a759fd37735430753c7b6b80684306d80ea16e'
diff --git a/tests/sentry/web/frontend/test_release_webhook.py b/tests/sentry/web/frontend/test_release_webhook.py
index 6288ea99c5..16c0f9e9cc 100644
--- a/tests/sentry/web/frontend/test_release_webhook.py
+++ b/tests/sentry/web/frontend/test_release_webhook.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-import hashlib
+from hashlib import sha256
 import hmac
 
 from django.core.urlresolvers import reverse
@@ -21,7 +21,7 @@ class ReleaseWebhookTest(TestCase):
         self.signature = hmac.new(
             key=self.token,
             msg='dummy-{}'.format(self.project.id),
-            digestmod=hashlib.sha256,
+            digestmod=sha256,
         ).hexdigest()
         ProjectOption.objects.set_value(
             self.project, 'sentry:release-token', self.token)
