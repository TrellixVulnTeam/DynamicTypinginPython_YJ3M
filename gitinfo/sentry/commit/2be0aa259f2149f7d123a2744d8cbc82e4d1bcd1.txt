commit 2be0aa259f2149f7d123a2744d8cbc82e4d1bcd1
Author: Scott Cooper <scttcper@gmail.com>
Date:   Wed May 13 14:17:18 2020 -0700

    feat(ui): Add environment filtering on issue tag details page (#18728)

diff --git a/src/sentry/api/endpoints/group_tagkey_values.py b/src/sentry/api/endpoints/group_tagkey_values.py
index 1b65683cb1..983aae00df 100644
--- a/src/sentry/api/endpoints/group_tagkey_values.py
+++ b/src/sentry/api/endpoints/group_tagkey_values.py
@@ -4,9 +4,10 @@ from sentry import tagstore
 from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases.group import GroupEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.helpers.environments import get_environments
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.tagvalue import UserTagValueSerializer
-from sentry.models import Group, Environment
+from sentry.models import Group
 from sentry.utils.apidocs import scenario
 
 
@@ -34,16 +35,10 @@ class GroupTagKeyValuesEndpoint(GroupEndpoint, EnvironmentMixin):
         """
         lookup_key = tagstore.prefix_reserved_key(key)
 
-        try:
-            environment_id = self._get_environment_id_from_request(
-                request, group.project.organization_id
-            )
-        except Environment.DoesNotExist:
-            # if the environment doesn't exist then the tag can't possibly exist
-            raise ResourceDoesNotExist
+        environment_ids = [e.id for e in get_environments(request, group.project.organization)]
 
         try:
-            tagstore.get_tag_key(group.project_id, environment_id, lookup_key)
+            tagstore.get_tag_key(group.project_id, None, lookup_key)
         except tagstore.TagKeyNotFound:
             raise ResourceDoesNotExist
 
@@ -61,7 +56,7 @@ class GroupTagKeyValuesEndpoint(GroupEndpoint, EnvironmentMixin):
             serializer_cls = None
 
         paginator = tagstore.get_group_tag_value_paginator(
-            group.project_id, group.id, environment_id, lookup_key, order_by=order_by
+            group.project_id, group.id, environment_ids, lookup_key, order_by=order_by
         )
 
         return self.paginate(
diff --git a/src/sentry/data_export/processors/issues_by_tag.py b/src/sentry/data_export/processors/issues_by_tag.py
index a779f5efdd..4c9ed5ca30 100644
--- a/src/sentry/data_export/processors/issues_by_tag.py
+++ b/src/sentry/data_export/processors/issues_by_tag.py
@@ -101,7 +101,7 @@ class IssuesByTagProcessor(object):
         return tagstore.get_group_tag_value_iter(
             project_id=self.group.project_id,
             group_id=self.group.id,
-            environment_id=self.environment_id,
+            environment_ids=[self.environment_id],
             key=self.lookup_key,
             callbacks=self.callbacks,
             offset=offset,
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx
index 54395f5135..79d52203cd 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx
@@ -13,12 +13,13 @@ import DeviceName from 'app/components/deviceName';
 import ExternalLink from 'app/components/links/externalLink';
 import GlobalSelectionLink from 'app/components/globalSelectionLink';
 import {IconMail, IconOpen} from 'app/icons';
+import DetailedError from 'app/components/errors/detailedError';
 import Pagination from 'app/components/pagination';
 import TimeSince from 'app/components/timeSince';
 import DataExport, {ExportQueryType} from 'app/components/dataExport';
 import space from 'app/styles/space';
 import theme from 'app/utils/theme';
-import {Group, Tag, TagValue} from 'app/types';
+import {Group, Tag, TagValue, Environment} from 'app/types';
 
 type RouteParams = {
   groupId: string;
@@ -28,6 +29,7 @@ type RouteParams = {
 
 type Props = {
   group: Group;
+  environments: Environment[];
 } & RouteComponentProps<RouteParams, {}>;
 
 type State = {
@@ -40,11 +42,16 @@ class GroupTagValues extends AsyncComponent<
   Props & AsyncComponent['props'],
   State & AsyncComponent['state']
 > {
-  getEndpoints(): [string, string][] {
+  getEndpoints(): [string, string, any?][] {
+    const {environments: environment} = this.props;
     const {groupId, tagKey} = this.props.params;
     return [
       ['tag', `/issues/${groupId}/tags/${tagKey}/`],
-      ['tagValueList', `/issues/${groupId}/tags/${tagKey}/values/`],
+      [
+        'tagValueList',
+        `/issues/${groupId}/tags/${tagKey}/values/`,
+        {query: {environment}},
+      ],
     ];
   }
 
@@ -52,6 +59,7 @@ class GroupTagValues extends AsyncComponent<
     const {
       group,
       params: {orgId, tagKey},
+      environments,
     } = this.props;
     const {tag, tagValueList, tagValueListPageLinks} = this.state;
     const sortedTagValueList: TagValue[] = sortBy(
@@ -59,6 +67,15 @@ class GroupTagValues extends AsyncComponent<
       property('count')
     ).reverse();
 
+    if (sortedTagValueList.length === 0 && environments.length > 0) {
+      return (
+        <DetailedError
+          heading={t('Sorry, the tags for this issue could not be found.')}
+          message={t('No tags were found for the currently selected environments')}
+        />
+      );
+    }
+
     const issuesPath = `/organizations/${orgId}/issues/`;
 
     const children = sortedTagValueList.map((tagValue, tagValueIdx) => {
diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index d11493ae0b..013cd93108 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -212,7 +212,7 @@ class TagStorage(Service):
         raise NotImplementedError
 
     def get_group_tag_value_iter(
-        self, project_id, group_id, environment_id, key, callbacks=(), offset=0
+        self, project_id, group_id, environment_ids, key, callbacks=(), offset=0
     ):
         """
         >>> get_group_tag_value_iter(1, 2, 3, 'environment')
@@ -220,7 +220,7 @@ class TagStorage(Service):
         raise NotImplementedError
 
     def get_group_tag_value_paginator(
-        self, project_id, group_id, environment_id, key, order_by="-id"
+        self, project_id, group_id, environment_ids, key, order_by="-id"
     ):
         """
         >>> get_group_tag_value_paginator(1, 2, 3, 'environment')
diff --git a/src/sentry/tagstore/snuba/backend.py b/src/sentry/tagstore/snuba/backend.py
index c857332b88..43039deba5 100644
--- a/src/sentry/tagstore/snuba/backend.py
+++ b/src/sentry/tagstore/snuba/backend.py
@@ -725,15 +725,15 @@ class SnubaTagStorage(TagStorage):
         )
 
     def get_group_tag_value_iter(
-        self, project_id, group_id, environment_id, key, callbacks=(), offset=0
+        self, project_id, group_id, environment_ids, key, callbacks=(), offset=0
     ):
         filters = {
             "project_id": get_project_list(project_id),
             "tags_key": [key],
             "group_id": [group_id],
         }
-        if environment_id:
-            filters["environment"] = [environment_id]
+        if environment_ids:
+            filters["environment"] = environment_ids
         results = snuba.query(
             groupby=["tags_value"],
             filter_keys=filters,
@@ -759,7 +759,7 @@ class SnubaTagStorage(TagStorage):
         return group_tag_values
 
     def get_group_tag_value_paginator(
-        self, project_id, group_id, environment_id, key, order_by="-id"
+        self, project_id, group_id, environment_ids, key, order_by="-id"
     ):
         from sentry.api.paginator import SequencePaginator
 
@@ -771,7 +771,7 @@ class SnubaTagStorage(TagStorage):
         else:
             raise ValueError("Unsupported order_by: %s" % order_by)
 
-        group_tag_values = self.get_group_tag_value_iter(project_id, group_id, environment_id, key)
+        group_tag_values = self.get_group_tag_value_iter(project_id, group_id, environment_ids, key)
 
         desc = order_by.startswith("-")
         score_field = order_by.lstrip("-")
diff --git a/tests/js/spec/views/organizationGroupDetails/groupTagValues.spec.jsx b/tests/js/spec/views/organizationGroupDetails/groupTagValues.spec.jsx
index 2156e07d6a..5a9909ec0f 100644
--- a/tests/js/spec/views/organizationGroupDetails/groupTagValues.spec.jsx
+++ b/tests/js/spec/views/organizationGroupDetails/groupTagValues.spec.jsx
@@ -3,24 +3,29 @@ import React from 'react';
 import {initializeOrg} from 'sentry-test/initializeOrg';
 import {mountWithTheme} from 'sentry-test/enzyme';
 import GroupTagValues from 'app/views/organizationGroupDetails/groupTagValues';
+import DetailedError from 'app/components/errors/detailedError';
 
-describe('GroupTagValues', function() {
+describe('GroupTagValues', () => {
   const {routerContext, router} = initializeOrg({});
   const group = TestStubs.Group();
   const tags = TestStubs.Tags();
 
-  beforeEach(function() {
+  beforeEach(() => {
     MockApiClient.addMockResponse({
       url: '/issues/1/tags/user/',
       body: tags.find(({key}) => key === 'user'),
     });
+  });
+
+  afterEach(() => {
+    MockApiClient.clearMockResponses();
+  });
+
+  it('navigates to issue details events tab with correct query params', async () => {
     MockApiClient.addMockResponse({
       url: '/issues/1/tags/user/values/',
       body: TestStubs.TagValues(),
     });
-  });
-
-  it('navigates to issue details events tab with correct query params', async function() {
     const wrapper = mountWithTheme(
       <GroupTagValues
         group={group}
@@ -43,4 +48,29 @@ describe('GroupTagValues', function() {
       query: {query: 'user.username:david'},
     });
   });
+
+  it('renders an error message if no tag values are returned because of environment selection', async () => {
+    MockApiClient.addMockResponse({
+      url: '/issues/1/tags/user/values/',
+      body: [],
+    });
+    const wrapper = mountWithTheme(
+      <GroupTagValues
+        group={group}
+        location={{query: {}}}
+        params={{
+          orgId: 'org-slug',
+          groupId: group.id,
+          tagKey: 'user',
+        }}
+        environments={['staging']}
+      />,
+      routerContext
+    );
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find(DetailedError)).toHaveLength(1);
+  });
 });
diff --git a/tests/snuba/tagstore/test_tagstore_backend.py b/tests/snuba/tagstore/test_tagstore_backend.py
index 540ead64c9..87ea425203 100644
--- a/tests/snuba/tagstore/test_tagstore_backend.py
+++ b/tests/snuba/tagstore/test_tagstore_backend.py
@@ -532,7 +532,7 @@ class TagStorageTest(TestCase, SnubaTestCase):
 
         assert list(
             self.ts.get_group_tag_value_iter(
-                self.proj1.id, self.proj1group1.id, self.proj1env1.id, "sentry:user"
+                self.proj1.id, self.proj1group1.id, [self.proj1env1.id], "sentry:user"
             )
         ) == [
             GroupTagValue(
@@ -558,7 +558,7 @@ class TagStorageTest(TestCase, SnubaTestCase):
 
         assert list(
             self.ts.get_group_tag_value_paginator(
-                self.proj1.id, self.proj1group1.id, self.proj1env1.id, "sentry:user"
+                self.proj1.id, self.proj1group1.id, [self.proj1env1.id], "sentry:user"
             ).get_result(10)
         ) == [
             GroupTagValue(
