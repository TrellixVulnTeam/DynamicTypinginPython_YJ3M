commit ed995489a0dd85b2f7694bc821bc535f6428a7b5
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Feb 18 09:32:31 2015 -0800

    Add explicit scopes to organization member roles

diff --git a/src/sentry/api/bases/group.py b/src/sentry/api/bases/group.py
index 2d1ac43527..f962c72f45 100644
--- a/src/sentry/api/bases/group.py
+++ b/src/sentry/api/bases/group.py
@@ -2,11 +2,11 @@ from __future__ import absolute_import
 
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.api.permissions import ScopedPermission
+from sentry.api.bases.project import ProjectPermission
 from sentry.models import Group
 
 
-class GroupPermission(ScopedPermission):
+class GroupPermission(ProjectPermission):
     scope_map = {
         'GET': ['event:read', 'event:write', 'event:delete'],
         'POST': ['event:write', 'event:delete'],
@@ -15,11 +15,8 @@ class GroupPermission(ScopedPermission):
     }
 
     def has_object_permission(self, request, view, group):
-        if request.auth:
-            return request.auth.organization_id == group.project.organization_id
-        if request.user.is_superuser:
-            return True
-        return group.project.has_access(request.user, self.access_map[request.method])
+        return super(GroupPermission, self).has_object_permission(
+            request, view, group.project)
 
 
 class GroupEndpoint(Endpoint):
diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index 04b341d5ea..b0e4a28f0f 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import ScopedPermission
-from sentry.models import Organization
+from sentry.models import Organization, OrganizationMember
 
 
 class OrganizationPermission(ScopedPermission):
@@ -19,7 +19,18 @@ class OrganizationPermission(ScopedPermission):
             return request.auth.organization_id == organization.organization_id
         if request.user.is_superuser:
             return True
-        return organization.has_access(request.user, self.access_map[request.method])
+
+        try:
+            om = OrganizationMember.objects.get(
+                organization=organization,
+                user=request.user,
+            )
+        except OrganizationMember.DoesNotExist:
+            return False
+
+        allowed_scopes = set(self.scope_map[request.method])
+        current_scopes = om.scopes
+        return any(s in allowed_scopes for s in current_scopes)
 
 
 class OrganizationEndpoint(Endpoint):
diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
index a045f10f62..f88bd871c6 100644
--- a/src/sentry/api/bases/project.py
+++ b/src/sentry/api/bases/project.py
@@ -1,9 +1,11 @@
 from __future__ import absolute_import
 
+from django.db.models import Q
+
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import ScopedPermission
-from sentry.models import Project
+from sentry.models import OrganizationMember, Project
 
 
 class ProjectPermission(ScopedPermission):
@@ -19,7 +21,19 @@ class ProjectPermission(ScopedPermission):
             return request.auth.organization_id == project.organization_id
         if request.user.is_superuser:
             return True
-        return project.has_access(request.user, self.access_map[request.method])
+
+        try:
+            om = OrganizationMember.objects.get(
+                Q(has_global_access=True) | Q(teams=project.team_id),
+                organization=project.organization_id,
+                user=request.user,
+            )
+        except OrganizationMember.DoesNotExist:
+            return False
+
+        allowed_scopes = set(self.scope_map[request.method])
+        current_scopes = om.scopes
+        return any(s in allowed_scopes for s in current_scopes)
 
 
 class ProjectEventPermission(ProjectPermission):
diff --git a/src/sentry/api/bases/team.py b/src/sentry/api/bases/team.py
index 8a2037b23c..e706375ecf 100644
--- a/src/sentry/api/bases/team.py
+++ b/src/sentry/api/bases/team.py
@@ -1,9 +1,11 @@
 from __future__ import absolute_import
 
+from django.db.models import Q
+
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import ScopedPermission
-from sentry.models import Team
+from sentry.models import OrganizationMember, Team
 
 
 class TeamPermission(ScopedPermission):
@@ -19,7 +21,22 @@ class TeamPermission(ScopedPermission):
             return request.auth.organization_id == team.organization_id
         if request.user.is_superuser:
             return True
-        return team.has_access(request.user, self.access_map[request.method])
+
+        try:
+            om = OrganizationMember.objects.get(
+                Q(has_global_access=True) | Q(teams=team),
+                organization=team.organization_id,
+                user=request.user,
+            )
+        except OrganizationMember.DoesNotExist:
+            return False
+
+        print('here')
+        print(om.scopes)
+
+        allowed_scopes = set(self.scope_map[request.method])
+        current_scopes = om.scopes
+        return any(s in allowed_scopes for s in current_scopes)
 
 
 class TeamEndpoint(Endpoint):
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index 27b23c499e..faf5f8d860 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -79,6 +79,22 @@ class OrganizationMember(Model):
             checksum.update(x)
         return checksum.hexdigest()
 
+    @property
+    def scopes(self):
+        scopes = []
+        if self.type <= OrganizationMemberType.MEMBER:
+            scopes.extend(['event:read', 'org:read', 'project:read', 'team:read'])
+        if self.type <= OrganizationMemberType.ADMIN:
+            scopes.extend(['event:write', 'project:write', 'team:write'])
+        if self.type <= OrganizationMemberType.OWNER:
+            scopes.extend(['event:delete', 'project:delete', 'team:delete'])
+        if self.has_global_access:
+            if self.type <= OrganizationMemberType.ADMIN:
+                scopes.extend(['org:write'])
+            if self.type <= OrganizationMemberType.OWNER:
+                scopes.extend(['org:delete'])
+        return scopes
+
     def send_invite_email(self):
         from sentry.utils.email import MessageBuilder
 
