commit 1da12cb45f98e104653c18fcbb26697c75422c4d
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 6 10:01:27 2011 -0700

    Change interval for normalized minutes to be 5m

diff --git a/CHANGES b/CHANGES
index 19520012ca..dc6c68c959 100644
--- a/CHANGES
+++ b/CHANGES
@@ -3,7 +3,7 @@
 * You can now pass ``extra={'stack': True}`` to logging methods to capture
   the current frames and their locals.
 * Code refactoring in various places related to stack extraction.
-* Denormalized graph data in MessageCountByMinute.
+* Denormalized graph data in MessageCountByMinute (stores at 5m intervals).
 * Denormalized filter counts into MessageFilterValue
 * Added message sampling (adapted from Yuri Baburov's patch).
 * Added SENTRY_MAIL_LEVEL setting.
diff --git a/sentry/models.py b/sentry/models.py
index edde1278f3..8a53627b46 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -288,6 +288,9 @@ class Message(MessageBase):
         return module, self.data['__sentry__']['version']
 
 class FilterValue(models.Model):
+    """
+    Stores references to available filters.
+    """
     key = models.CharField(choices=FILTER_KEYS, max_length=32)
     value = models.CharField(max_length=200)
     
@@ -298,6 +301,10 @@ class FilterValue(models.Model):
         return u'key=%s, value=%s' % (self.key, self.value)
 
 class MessageFilterValue(models.Model):
+    """
+    Stores the total number of messages seen by a group matching
+    the given filter.
+    """
     group = models.ForeignKey(GroupedMessage)
     times_seen = models.PositiveIntegerField(default=0)
     key = models.CharField(choices=FILTER_KEYS, max_length=32)
@@ -311,6 +318,12 @@ class MessageFilterValue(models.Model):
                                                                   self.key, self.value)
 
 class MessageCountByMinute(Model):
+    """
+    Stores the total number of messages seen by a group at 5 minute intervals
+    
+    e.g. if it happened at 08:34:55 the time would be normalized to 08:30:00
+    """
+    
     group = models.ForeignKey(GroupedMessage)
     date = models.DateTimeField() # normalized to HH:MM:00
     times_seen = models.PositiveIntegerField(default=0)
diff --git a/sentry/utils/manager.py b/sentry/utils/manager.py
index 6d0d95650c..424c09f959 100644
--- a/sentry/utils/manager.py
+++ b/sentry/utils/manager.py
@@ -161,12 +161,13 @@ class SentryManager(models.Manager):
             if not settings.SAMPLE_DATA or group.times_seen % min(count_limit(group.times_seen), time_limit(silence)) == 0:
                 instance.save()
 
-            normalized_to_minute = now.replace(second=0, microsecond=0)
+            # rounded down to the nearest 5m interval
+            normalized_datetime = now.replace(second=0, microsecond=0, minute=(now.minute - (now.minute % 5)))
 
-            affected = group.messagecountbyminute_set.filter(date=normalized_to_minute).update(times_seen=F('times_seen') + 1)
+            affected = group.messagecountbyminute_set.filter(date=normalized_datetime).update(times_seen=F('times_seen') + 1)
             if not affected:
                 group.messagecountbyminute_set.create(
-                    date=normalized_to_minute,
+                    date=normalized_datetime,
                     times_seen=1,
                 )
 
