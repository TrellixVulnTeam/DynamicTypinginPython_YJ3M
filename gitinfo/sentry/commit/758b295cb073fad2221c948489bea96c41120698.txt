commit 758b295cb073fad2221c948489bea96c41120698
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Apr 6 09:39:06 2018 -0700

    feat(ui): Add retry for dynamic imports (#7910)
    
    * fix async/await in storybook

diff --git a/.storybook/.babelrc b/.storybook/.babelrc
new file mode 100644
index 0000000000..a6b6af793d
--- /dev/null
+++ b/.storybook/.babelrc
@@ -0,0 +1,30 @@
+{
+  "presets": [
+    "react",
+    [
+      "latest",
+      {
+        "es2015": {
+          "modules": false
+        }
+      }
+    ]
+  ],
+  "plugins": [
+    "emotion",
+    "transform-decorators-legacy",
+    "transform-class-properties",
+    "transform-object-rest-spread",
+    "syntax-dynamic-import",
+    ["transform-runtime", {
+      "polyfill": false,
+      "regenerator": true
+    }],
+    [
+      "babel-plugin-transform-builtin-extend",
+      {
+        "globals": ["Array", "Error"]
+      }
+    ]
+  ]
+}
diff --git a/src/sentry/static/sentry/app/components/lazyLoad.jsx b/src/sentry/static/sentry/app/components/lazyLoad.jsx
index b81ff3598c..dbae0735d1 100644
--- a/src/sentry/static/sentry/app/components/lazyLoad.jsx
+++ b/src/sentry/static/sentry/app/components/lazyLoad.jsx
@@ -5,6 +5,7 @@ import React from 'react';
 import {t} from '../locale';
 import LoadingError from './loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
+import retryableImport from '../utils/retryableImport';
 
 class LazyLoad extends React.Component {
   static propTypes = {
@@ -75,7 +76,7 @@ class LazyLoad extends React.Component {
   fetchComponent = () => {
     let getComponent = this.getComponentGetter();
 
-    getComponent()
+    retryableImport(getComponent)
       .then(Component => {
         // Always load default export if available
         this.setState({
diff --git a/src/sentry/static/sentry/app/utils/retryableImport.jsx b/src/sentry/static/sentry/app/utils/retryableImport.jsx
new file mode 100644
index 0000000000..fba2fbb214
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/retryableImport.jsx
@@ -0,0 +1,20 @@
+const MAX_RETRIES = 2;
+
+export default async function retryableImport(fn) {
+  let retries = 0;
+  const tryLoad = async () => {
+    try {
+      const module = await fn();
+      return module.default || module;
+    } catch (err) {
+      if (retries < MAX_RETRIES) {
+        retries++;
+        return tryLoad();
+      }
+
+      throw err;
+    }
+  };
+
+  return tryLoad();
+}
diff --git a/tests/js/spec/components/lazyLoad.spec.jsx b/tests/js/spec/components/lazyLoad.spec.jsx
index 5fccaf5fa6..aef089198f 100644
--- a/tests/js/spec/components/lazyLoad.spec.jsx
+++ b/tests/js/spec/components/lazyLoad.spec.jsx
@@ -30,6 +30,8 @@ describe('LazyLoad', function() {
     res(ResolvedComponent);
 
     await promise;
+    // Need to wait for `retryableImport` to resolve
+    await tick();
     wrapper.update();
     expect(wrapper.state('Component')).toEqual('button');
     expect(wrapper.find('button')).toHaveLength(1);
@@ -39,22 +41,20 @@ describe('LazyLoad', function() {
   it('renders with error message when promise is rejected', async function() {
     // eslint-disable-next-line no-console
     console.error = jest.fn();
-    let reject;
-    let promise = new Promise((resolve, rej) => {
-      reject = rej;
-    });
-    let getComponent = () => promise;
+    let getComponent = jest.fn(
+      () =>
+        new Promise((resolve, reject) => reject(new Error('Could not load component')))
+    );
     let wrapper;
 
     try {
       wrapper = mount(<LazyLoad component={getComponent} />);
-
-      reject(new Error('Could not load component'));
-      await promise;
     } catch (err) {
       // ignore
     }
 
+    // Need to wait for `retryableImport` to resolve
+    await tick();
     wrapper.update();
     expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
     expect(wrapper.find('LoadingError')).toHaveLength(1);
diff --git a/tests/js/spec/utils/retryableImport.spec.jsx b/tests/js/spec/utils/retryableImport.spec.jsx
new file mode 100644
index 0000000000..b7251fd80b
--- /dev/null
+++ b/tests/js/spec/utils/retryableImport.spec.jsx
@@ -0,0 +1,61 @@
+import retryableImport from 'app/utils/retryableImport';
+
+describe('retryableImport', function() {
+  it('can dynamically import successfully on first try', async function() {
+    const importMock = jest.fn();
+
+    importMock.mockReturnValue(
+      new Promise(resolve =>
+        resolve({
+          default: {
+            foo: 'bar',
+          },
+        })
+      )
+    );
+
+    const result = await retryableImport(() => importMock());
+
+    expect(result).toEqual({
+      foo: 'bar',
+    });
+    expect(importMock).toHaveBeenCalledTimes(1);
+  });
+
+  it('can fail 2 dynamic imports and succeed on 3rd try', async function() {
+    const importMock = jest.fn();
+
+    importMock
+      .mockReturnValueOnce(
+        new Promise((resolve, reject) => reject(new Error('Unable to import')))
+      )
+      .mockReturnValueOnce(
+        new Promise((resolve, reject) => reject(new Error('Unable to import')))
+      )
+      .mockReturnValue(
+        new Promise(resolve =>
+          resolve({
+            default: {
+              foo: 'bar',
+            },
+          })
+        )
+      );
+
+    const result = await retryableImport(() => importMock());
+
+    expect(result).toEqual({
+      foo: 'bar',
+    });
+    expect(importMock).toHaveBeenCalledTimes(3);
+  });
+
+  it('only retries 3 times', async function() {
+    const importMock = jest.fn(
+      () => new Promise((resolve, reject) => reject('Unable to import'))
+    );
+
+    await expect(retryableImport(() => importMock())).rejects.toThrow('Unable to import');
+    expect(importMock).toHaveBeenCalledTimes(3);
+  });
+});
