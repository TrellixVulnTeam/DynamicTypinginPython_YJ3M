commit efdd526365f8218e7cb2898e52e0bd1cc0e21afa
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 5 12:08:12 2016 -0700

    Rate limit organization creation (#4080)
    
    * Rate limit organization creation
    
    This adds rate limits to org creation (to prevent abuse from HackerOne kids). They default at 5 per hour.

diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
index 8a5f3d91f7..86d4f387a8 100644
--- a/src/sentry/api/endpoints/organization_index.py
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -7,14 +7,15 @@ from django.db.models import Count, Q, Sum
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
-from sentry import roles
+from sentry import features, options, roles
+from sentry.app import ratelimiter
 from sentry.api.base import DocSection, Endpoint
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.paginator import DateTimePaginator, OffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.models import (
-    AuditLogEntryEvent, Organization, OrganizationMember, OrganizationStatus,
-    ProjectPlatform
+    AuditLogEntryEvent, Organization, OrganizationMember,
+    OrganizationMemberTeam, OrganizationStatus, ProjectPlatform
 )
 from sentry.search.utils import tokenize_query, in_iexact
 from sentry.utils.apidocs import scenario, attach_scenarios
@@ -32,6 +33,7 @@ class OrganizationSerializer(serializers.Serializer):
     name = serializers.CharField(max_length=64, required=True)
     slug = serializers.RegexField(r'^[a-z0-9_\-]+$', max_length=50,
                                   required=False)
+    defaultTeam = serializers.BooleanField(required=False)
 
 
 class OrganizationIndexEndpoint(Endpoint):
@@ -154,6 +156,20 @@ class OrganizationIndexEndpoint(Endpoint):
             return Response({'detail': 'This endpoint requires user info'},
                             status=401)
 
+        if not features.has('organizations:create', actor=request.user):
+            return Response({
+                'detail': 'Organizations are not allowed to be created by this user.'
+            }, status=401)
+
+        limit = options.get('api.rate-limit.org-create')
+        if limit and ratelimiter.is_limited(
+            u'org-create:{}'.format(request.user.id),
+            limit=5, window=3600,
+        ):
+            return Response({
+                'detail': 'You are attempting to create too many organizations too quickly.'
+            }, status=429)
+
         serializer = OrganizationSerializer(data=request.DATA)
 
         if serializer.is_valid():
@@ -171,12 +187,23 @@ class OrganizationIndexEndpoint(Endpoint):
                     status=409,
                 )
 
-            OrganizationMember.objects.create(
-                user=request.user,
+            om = OrganizationMember.objects.create(
                 organization=org,
+                user=request.user,
                 role=roles.get_top_dog().id,
             )
 
+            if result.get('defaultTeam'):
+                team = org.team_set.create(
+                    name=org.name,
+                )
+
+                OrganizationMemberTeam.objects.create(
+                    team=team,
+                    organizationmember=om,
+                    is_active=True
+                )
+
             self.create_audit_entry(
                 request=request,
                 organization=org,
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 5bc73bf559..7ec3435588 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -78,3 +78,5 @@ register('u2f.facets', default=(), type=Sequence,
 
 register('auth.ip-rate-limit', default=0, flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
 register('auth.user-rate-limit', default=0, flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
+
+register('api.rate-limit.org-create', default=5, flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index 266deecccc..a8409e7969 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -194,6 +194,9 @@ class OptionsManager(object):
                  ttl=DEFAULT_KEY_TTL, grace=DEFAULT_KEY_GRACE):
         assert key not in self.registry, 'Option already registered: %r' % key
 
+        if len(key) > 64:
+            raise ValueError('Option key has max length of 64 characters')
+
         # If our default is a callable, execute it to
         # see what value is returns, so we can use that to derive the type
         if not callable(default):
diff --git a/src/sentry/static/sentry/app/options.jsx b/src/sentry/static/sentry/app/options.jsx
index e9b293f972..98ab6b1321 100644
--- a/src/sentry/static/sentry/app/options.jsx
+++ b/src/sentry/static/sentry/app/options.jsx
@@ -51,6 +51,12 @@ const definitions = [
     placeholder: 'e.g. 10',
     help: t('The maximum number of times an authentication attempt may be made against a single account in a 60 second window.'),
   },
+  {
+    key: 'api.rate-limit.org-create',
+    label: 'Organization Creation Rate Limit',
+    placeholder: 'e.g. 5',
+    help: t('The maximum number of organizations which may be created by a single account in a one hour window.'),
+  },
   {
     key: 'mail.from',
     label: t('Email From'),
diff --git a/src/sentry/static/sentry/app/views/adminSettings.jsx b/src/sentry/static/sentry/app/views/adminSettings.jsx
index 6f67f352a0..d4627ec3ce 100644
--- a/src/sentry/static/sentry/app/views/adminSettings.jsx
+++ b/src/sentry/static/sentry/app/views/adminSettings.jsx
@@ -15,6 +15,7 @@ const optionsAvailable = [
   'system.rate-limit',
   'auth.ip-rate-limit',
   'auth.user-rate-limit',
+  'api.rate-limit.org-create',
 ];
 
 const SettingsList = React.createClass({
@@ -75,9 +76,10 @@ const SettingsList = React.createClass({
         {fields['system.admin-email']}
         {fields['system.rate-limit']}
 
-        <h4>Authentication</h4>
+        <h4>Security &amp; Abuse</h4>
         {fields['auth.ip-rate-limit']}
         {fields['auth.user-rate-limit']}
+        {fields['api.rate-limit.org-create']}
       </Form>
     );
   }
diff --git a/src/sentry/web/frontend/create_organization.py b/src/sentry/web/frontend/create_organization.py
index a34b96ccee..fd66856cf2 100644
--- a/src/sentry/web/frontend/create_organization.py
+++ b/src/sentry/web/frontend/create_organization.py
@@ -5,22 +5,15 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry import features, roles
-from sentry.models import (
-    AuditLogEntryEvent, Organization, OrganizationMember,
-    OrganizationMemberTeam
-)
+from sentry import features
+from sentry.api import client
 from sentry.web.frontend.base import BaseView
 
 
-class NewOrganizationForm(forms.ModelForm):
+class NewOrganizationForm(forms.Form):
     name = forms.CharField(label=_('Organization Name'), max_length=200,
         widget=forms.TextInput(attrs={'placeholder': _('My Company')}))
 
-    class Meta:
-        fields = ('name',)
-        model = Organization
-
 
 class CreateOrganizationView(BaseView):
     def get_form(self, request):
@@ -32,35 +25,14 @@ class CreateOrganizationView(BaseView):
     def handle(self, request):
         form = self.get_form(request)
         if form.is_valid():
-            org = form.save()
-
-            om = OrganizationMember.objects.create(
-                organization=org,
-                user=request.user,
-                role=roles.get_top_dog().id,
-            )
-
-            team = org.team_set.create(
-                name=org.name,
-            )
-
-            OrganizationMemberTeam.objects.create(
-                team=team,
-                organizationmember=om,
-                is_active=True
-            )
-
-            self.create_audit_entry(
-                request,
-                organization=org,
-                target_object=org.id,
-                event=AuditLogEntryEvent.ORG_ADD,
-                data=org.get_audit_log_data(),
-            )
+            resp = client.post('/organizations/', data={
+                'name': form.cleaned_data['name'],
+                'defaultTeam': True,
+            }, request=request)
 
-            url = reverse('sentry-create-project', args=[org.slug])
+            url = reverse('sentry-create-project', args=[resp.data['slug']])
 
-            return HttpResponseRedirect('{}?team={}'.format(url, team.slug))
+            return HttpResponseRedirect(url)
 
         context = {
             'form': form,
diff --git a/tests/sentry/web/frontend/test_create_organization.py b/tests/sentry/web/frontend/test_create_organization.py
index 59f89d7cd8..5a24791fb6 100644
--- a/tests/sentry/web/frontend/test_create_organization.py
+++ b/tests/sentry/web/frontend/test_create_organization.py
@@ -34,9 +34,9 @@ class CreateOrganizationTest(TestCase):
             role='owner',
         ).exists()
 
-        team = org.team_set.get()
+        assert org.team_set.exists()
 
         redirect_uri = reverse('sentry-create-project', args=[org.slug])
-        assert resp['Location'] == 'http://testserver%s?team=%s' % (
-            redirect_uri, team.slug,
+        assert resp['Location'] == 'http://testserver%s' % (
+            redirect_uri,
         )
