commit 8a636b0116c3ce3ebb02ccd83e4ce21aa7a5f17b
Author: Jan Michael Auer <jan.auer@sentry.io>
Date:   Fri Mar 6 15:35:46 2020 +0100

    feat(outcomes): Dispatch event_discarded from outcomes consumer (#17503)
    
    Moves dispatching of the event_discarded signal to outcomes consumers. As opposed to other signals, this is a special case of Outcome.FILTERED, where the reason is "discarded_hash".

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 6a0acbe341..383459c488 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -536,7 +536,12 @@ class EventManager(object):
                 event=job["event"], hashes=hashes, release=job["release"], **kwargs
             )
         except HashDiscarded:
-            event_discarded.send_robust(project=project, sender=EventManager)
+            if options.get("sentry:skip-discarded-signal-in-save-event") != "1":
+                event_discarded.send_robust(project=project, sender=EventManager)
+
+                # The outcomes_consumer generically handles all FILTERED outcomes,
+                # but needs to skip this since it cannot dispatch event_discarded.
+                mark_signal_sent(project_id, job["event"].event_id)
 
             project_key = None
             if job["key_id"] is not None:
@@ -547,10 +552,6 @@ class EventManager(object):
 
             quotas.refund(project, key=project_key, timestamp=start_time)
 
-            # The outcomes_consumer generically handles all FILTERED outcomes,
-            # but needs to skip this since it cannot dispatch event_discarded.
-            mark_signal_sent(project_id, job["event"].event_id)
-
             track_outcome(
                 project.organization_id,
                 project_id,
@@ -568,6 +569,7 @@ class EventManager(object):
                 tags={"organization_id": project.organization_id, "platform": job["platform"]},
             )
             raise
+
         job["event"].group = job["group"]
 
         if options.get("sentry:skip-accepted-signal-in-save-event") != "1":
diff --git a/src/sentry/ingest/outcomes_consumer.py b/src/sentry/ingest/outcomes_consumer.py
index 3c00cbc8e2..8febfa3c2f 100644
--- a/src/sentry/ingest/outcomes_consumer.py
+++ b/src/sentry/ingest/outcomes_consumer.py
@@ -33,11 +33,12 @@ from django.core.cache import cache
 from sentry.constants import DataCategory
 from sentry.models.project import Project
 from sentry.db.models.manager import BaseManager
-from sentry.signals import event_filtered, event_dropped, event_saved
+from sentry.signals import event_filtered, event_discarded, event_dropped, event_saved
 from sentry.utils.kafka import create_batching_kafka_consumer
 from sentry.utils import json, metrics
-from sentry.utils.outcomes import Outcome
+from sentry.utils.data_filters import FilterStatKeys
 from sentry.utils.dates import to_datetime, parse_timestamp
+from sentry.utils.outcomes import Outcome
 from sentry.buffer.redis import batch_buffers_incr
 
 logger = logging.getLogger(__name__)
@@ -109,6 +110,10 @@ def _process_signal(msg):
         event_saved.send_robust(
             project=project, category=category, quantity=quantity, sender=OutcomesConsumerWorker
         )
+    elif outcome == Outcome.FILTERED and reason == FilterStatKeys.DISCARDED_HASH:
+        event_discarded.send_robust(
+            project=project, category=category, quantity=quantity, sender=OutcomesConsumerWorker
+        )
     elif outcome == Outcome.FILTERED:
         event_filtered.send_robust(
             ip=remote_addr,
diff --git a/tests/sentry/ingest/outcome_consumer/test_outcomes_kafka.py b/tests/sentry/ingest/outcome_consumer/test_outcomes_kafka.py
index 2cd4494873..1132426dd7 100644
--- a/tests/sentry/ingest/outcome_consumer/test_outcomes_kafka.py
+++ b/tests/sentry/ingest/outcome_consumer/test_outcomes_kafka.py
@@ -5,12 +5,13 @@ import pytest
 import six
 
 from sentry.ingest.outcomes_consumer import get_outcomes_consumer, mark_signal_sent, is_signal_sent
-from sentry.signals import event_filtered, event_dropped, event_saved
+from sentry.signals import event_filtered, event_discarded, event_dropped, event_saved
 from sentry.testutils.factories import Factories
 from sentry.utils.outcomes import Outcome
 from django.conf import settings
 from sentry.utils import json
 from sentry.utils.json import prune_empty_keys
+from sentry.utils.data_filters import FilterStatKeys
 
 
 logger = logging.getLogger(__name__)
@@ -38,10 +39,12 @@ def _get_event_id(base_event_id):
 class OutcomeTester(object):
     def __init__(self, kafka_producer, kafka_admin, task_runner):
         self.events_filtered = []
+        self.events_discarded = []
         self.events_dropped = []
         self.events_saved = []
 
         event_filtered.connect(self._event_filtered_receiver)
+        event_discarded.connect(self._event_discarded_receiver)
         event_dropped.connect(self._event_dropped_receiver)
         event_saved.connect(self._event_saved_receiver)
 
@@ -99,6 +102,9 @@ class OutcomeTester(object):
     def _event_filtered_receiver(self, **kwargs):
         self.events_filtered.append(kwargs)
 
+    def _event_discarded_receiver(self, **kwargs):
+        self.events_discarded.append(kwargs)
+
     def _event_dropped_receiver(self, **kwargs):
         self.events_dropped.append(kwargs)
 
@@ -237,3 +243,24 @@ def test_outcome_consumer_handles_accepted_outcomes(outcome_tester):
 
     assert not outcome_tester.events_filtered
     assert len(outcome_tester.events_saved) == 2
+
+
+@pytest.mark.django_db
+def test_outcome_consumer_handles_discarded_outcomes(outcome_tester):
+    for i in six.moves.range(4):
+        if i < 2:
+            reason = "something_else"
+        else:
+            reason = FilterStatKeys.DISCARDED_HASH
+
+        outcome_tester.track_outcome(
+            event_id=_get_event_id(i),
+            outcome=Outcome.FILTERED,
+            reason=reason,
+            remote_addr="127.33.44.{}".format(i),
+        )
+
+    outcome_tester.run(lambda: len(outcome_tester.events_discarded) < 2)
+
+    assert len(outcome_tester.events_filtered) == 2
+    assert len(outcome_tester.events_discarded) == 2
