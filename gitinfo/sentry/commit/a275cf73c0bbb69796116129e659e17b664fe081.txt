commit a275cf73c0bbb69796116129e659e17b664fe081
Author: Matej Minar <matej.minar@sentry.io>
Date:   Wed Dec 18 10:26:40 2019 +0100

    fix(ui): Frame to image pairing by address (#16126)
    
    * fix(ui): Find frame's image by address range
    
    * feat(ui): Add empty package status
    
    * fix(ui): Changed wording of a tooltip

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
index 177a11017b..c5422fca25 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
@@ -15,7 +15,11 @@ import {Panel, PanelBody, PanelItem} from 'app/components/panels';
 import Tooltip from 'app/components/tooltip';
 import DebugMetaStore, {DebugMetaActions} from 'app/stores/debugMetaStore';
 import SearchInput from 'app/components/forms/searchInput';
-import {formatAddress, parseAddress} from 'app/components/events/interfaces/utils';
+import {
+  formatAddress,
+  parseAddress,
+  getImageRange,
+} from 'app/components/events/interfaces/utils';
 import ImageForBar from 'app/components/events/interfaces/imageForBar';
 import {t} from 'app/locale';
 import SentryTypes from 'app/sentryTypes';
@@ -24,19 +28,6 @@ import space from 'app/styles/space';
 const IMAGE_ADDR_LEN = 12;
 const MIN_FILTER_LEN = 3;
 
-function getImageRange(image) {
-  // The start address is normalized to a `0x` prefixed hex string. The event
-  // schema also allows ingesting plain numbers, but this is converted during
-  // ingestion.
-  const startAddress = parseAddress(image.image_addr);
-
-  // The image size is normalized to a regular number. However, it can also be
-  // `null`, in which case we assume that it counts up to the next image.
-  const endAddress = startAddress + (image.image_size || 0);
-
-  return [startAddress, endAddress];
-}
-
 function getFileName(path) {
   const directorySeparator = /^([a-z]:\\|\\\\)/i.test(path) ? '\\' : '/';
   return path.split(directorySeparator).pop();
@@ -80,7 +71,7 @@ function getImageStatusDetails(status) {
     case 'unused':
       return t('The image was not required for processing the stack trace.');
     case 'missing':
-      return t('No debug information could not be in any of the specified sources.');
+      return t('No debug information could be found in any of the specified sources.');
     case 'malformed':
       return t('The debug information file for this image failed to process.');
     case 'timeout':
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index f9e9d333ed..5ca26e6881 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -164,18 +164,28 @@ export class Frame extends React.Component {
   }
 
   shouldShowLinkToImage() {
-    return this.props.data.symbolicatorStatus !== SymbolicatorStatus.UNKNOWN_IMAGE;
+    const {symbolicatorStatus} = this.props.data;
+
+    return symbolicatorStatus && symbolicatorStatus !== SymbolicatorStatus.UNKNOWN_IMAGE;
   }
 
-  packageStatusIsError() {
+  packageStatus() {
+    // this is the status of image that belongs to this frame
     const {image} = this.props;
     if (!image) {
-      return true;
+      return 'empty';
     }
 
-    const imageStatus = combineStatus(image.debug_status, image.unwind_status);
+    const combinedStatus = combineStatus(image.debug_status, image.unwind_status);
 
-    return imageStatus !== 'found';
+    switch (combinedStatus) {
+      case 'unused':
+        return 'empty';
+      case 'found':
+        return 'success';
+      default:
+        return 'error';
+    }
   }
 
   scrollToImage = event => {
@@ -515,7 +525,7 @@ export class Frame extends React.Component {
               onClick={this.scrollToImage}
               isClickable={this.shouldShowLinkToImage()}
             >
-              <PackageStatus isError={this.packageStatusIsError()} />
+              <PackageStatus status={this.packageStatus()} />
             </PackageLink>
             <TogglableAddress
               address={data.instructionAddr}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/packageStatus.tsx b/src/sentry/static/sentry/app/components/events/interfaces/packageStatus.tsx
index efd6ff30d5..32ad96b636 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/packageStatus.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/packageStatus.tsx
@@ -6,16 +6,33 @@ import Tooltip from 'app/components/tooltip';
 import space from 'app/styles/space';
 
 type Props = {
-  isError: boolean;
+  status: 'error' | 'success' | 'empty';
   tooltip?: string;
 };
 
 class PackageStatus extends React.Component<Props> {
+  getIconTypeAndSource(
+    status: Props['status']
+  ): {iconType: PackageStatusIconProps['type']; iconSrc: string} {
+    switch (status) {
+      case 'success':
+        return {iconType: 'success', iconSrc: 'icon-circle-check'};
+      case 'empty':
+        return {iconType: 'muted', iconSrc: 'icon-circle-empty'};
+      case 'error':
+      default:
+        return {iconType: 'error', iconSrc: 'icon-circle-exclamation'};
+    }
+  }
+
   render() {
-    const {isError, tooltip} = this.props;
+    const {status, tooltip} = this.props;
+
+    const {iconType, iconSrc} = this.getIconTypeAndSource(status);
 
-    const iconType = isError ? 'error' : 'success';
-    const iconSrc = isError ? 'icon-circle-exclamation' : 'icon-circle-check';
+    if (status === 'empty') {
+      return null;
+    }
 
     return (
       <Tooltip title={tooltip} disabled={!(tooltip && tooltip.length)}>
@@ -26,7 +43,7 @@ class PackageStatus extends React.Component<Props> {
 }
 
 type PackageStatusIconProps = {
-  type: 'error' | 'success';
+  type: 'error' | 'success' | 'muted';
 };
 export const PackageStatusIcon = styled(InlineSvg)<PackageStatusIconProps>`
   color: ${p => p.theme.alert[p.type!].iconColor};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index cd469524f2..e989bce938 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -5,7 +5,7 @@ import get from 'lodash/get';
 import Frame from 'app/components/events/interfaces/frame';
 import {t} from 'app/locale';
 import SentryTypes from 'app/sentryTypes';
-import {parseAddress} from 'app/components/events/interfaces/utils';
+import {parseAddress, getImageRange} from 'app/components/events/interfaces/utils';
 
 export default class StacktraceContent extends React.Component {
   static propTypes = {
@@ -45,13 +45,18 @@ export default class StacktraceContent extends React.Component {
     );
   };
 
-  findImageForPackage(framePackage) {
+  findImageForAddress(address) {
     const images = get(
       this.props.event.entries.find(entry => entry.type === 'debugmeta'),
       'data.images'
     );
 
-    return images ? images.find(img => get(img, 'code_file') === framePackage) : null;
+    return images
+      ? images.find(img => {
+          const [startAddress, endAddress] = getImageRange(img);
+          return address >= startAddress && address < endAddress;
+        })
+      : null;
   }
 
   handleToggleAddresses = event => {
@@ -91,7 +96,7 @@ export default class StacktraceContent extends React.Component {
 
     const maxLengthOfAllRelativeAddresses = data.frames.reduce(
       (maxLengthUntilThisPoint, frame) => {
-        const correspondingImage = this.findImageForPackage(frame.package);
+        const correspondingImage = this.findImageForAddress(frame.instructionAddr);
 
         try {
           const relativeAddress = (
@@ -125,7 +130,7 @@ export default class StacktraceContent extends React.Component {
       }
 
       if (this.frameIsVisible(frame, nextFrame) && !repeatedFrame) {
-        const image = this.findImageForPackage(frame.package);
+        const image = this.findImageForAddress(frame.instructionAddr);
 
         frames.push(
           <Frame
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
index 97674afba3..21da907f16 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
@@ -2,6 +2,7 @@ import isEmpty from 'lodash/isEmpty';
 import isString from 'lodash/isString';
 import * as Sentry from '@sentry/browser';
 import queryString from 'query-string';
+import get from 'lodash/get';
 
 import {FILTER_MASK} from 'app/constants';
 import {defined} from 'app/utils';
@@ -148,3 +149,16 @@ export function parseAddress(address) {
     return 0;
   }
 }
+
+export function getImageRange(image) {
+  // The start address is normalized to a `0x` prefixed hex string. The event
+  // schema also allows ingesting plain numbers, but this is converted during
+  // ingestion.
+  const startAddress = parseAddress(get(image, 'image_addr'));
+
+  // The image size is normalized to a regular number. However, it can also be
+  // `null`, in which case we assume that it counts up to the next image.
+  const endAddress = startAddress + (get(image, 'image_size') || 0);
+
+  return [startAddress, endAddress];
+}
