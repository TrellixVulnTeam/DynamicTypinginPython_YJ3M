commit 27628574d0e6dc2fbc604a4921f5a3e991b89092
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu May 23 10:20:07 2019 -0700

    feat(api): Add PUT/DELETE methods for Incident Comments (#13348)
    
    Add endpoints to update and delete Incident comments.
    
    Fixes SEN-668
    Fixes SEN-669

diff --git a/src/sentry/api/bases/incident.py b/src/sentry/api/bases/incident.py
index 1f962c5935..3967714456 100644
--- a/src/sentry/api/bases/incident.py
+++ b/src/sentry/api/bases/incident.py
@@ -16,6 +16,7 @@ class IncidentPermission(OrganizationPermission):
         'GET': ['org:read', 'org:write', 'org:admin', 'project:read', 'project:write', 'project:admin'],
         'POST': ['org:write', 'org:admin', 'project:read', 'project:write', 'project:admin'],
         'PUT': ['org:write', 'org:admin', 'project:read', 'project:write', 'project:admin'],
+        'DELETE': ['org:write', 'org:admin', 'project:read', 'project:write', 'project:admin'],
     }
 
 
diff --git a/src/sentry/api/endpoints/organization_incident_comment_details.py b/src/sentry/api/endpoints/organization_incident_comment_details.py
new file mode 100644
index 0000000000..df1f2852ae
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_incident_comment_details.py
@@ -0,0 +1,91 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers
+from rest_framework.exceptions import PermissionDenied
+from rest_framework.response import Response
+
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.bases.incident import (
+    IncidentEndpoint,
+    IncidentPermission,
+)
+from sentry.api.serializers import serialize
+from sentry.incidents.models import IncidentActivity, IncidentActivityType
+from sentry.incidents.logic import (
+    delete_comment,
+    update_comment,
+)
+
+
+class CommentSerializer(serializers.Serializer):
+    comment = serializers.CharField(required=False)
+
+
+class CommentDetailsEndpoint(IncidentEndpoint):
+    def convert_args(self, request, activity_id, *args, **kwargs):
+        # See GroupNotesDetailsEndpoint:
+        #   We explicitly don't allow a request with an ApiKey
+        #   since an ApiKey is bound to the Organization, not
+        #   an individual. Not sure if we'd want to allow an ApiKey
+        #   to delete/update other users' comments
+        if not request.user.is_authenticated():
+            raise PermissionDenied(detail="Key doesn't have permission to delete Note")
+
+        args, kwargs = super(CommentDetailsEndpoint, self).convert_args(
+            request,
+            *args,
+            **kwargs
+        )
+
+        try:
+            kwargs['activity'] = IncidentActivity.objects.get(
+                id=activity_id,
+                user=request.user,
+                incident=kwargs['incident'],
+                # Only allow modifying comments
+                type=IncidentActivityType.COMMENT.value,
+            )
+        except IncidentActivity.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        return args, kwargs
+
+
+class OrganizationIncidentCommentDetailsEndpoint(CommentDetailsEndpoint):
+    permission_classes = (IncidentPermission, )
+
+    def delete(self, request, organization, incident, activity):
+        """
+        Delete a comment
+        ````````````````
+        :auth: required
+        """
+
+        try:
+            delete_comment(activity)
+        except IncidentActivity.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        return Response(status=204)
+
+    def put(self, request, organization, incident, activity):
+        """
+        Update an existing comment
+        ``````````````````````````
+        :auth: required
+        """
+
+        serializer = CommentSerializer(data=request.DATA)
+        if serializer.is_valid():
+            result = serializer.object
+
+            try:
+                comment = update_comment(
+                    activity=activity,
+                    comment=result.get('comment'),
+                )
+            except IncidentActivity.DoesNotExist:
+                raise ResourceDoesNotExist
+
+            return Response(serialize(comment, request.user), status=200)
+        return Response(serializer.errors, status=400)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 428e0bcb81..3e433c5cf6 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -83,6 +83,7 @@ from .endpoints.organization_eventid import EventIdLookupEndpoint
 from .endpoints.organization_slugs import SlugsUpdateEndpoint
 from .endpoints.organization_incident_activity_index import OrganizationIncidentActivityIndexEndpoint
 from .endpoints.organization_incident_comment_index import OrganizationIncidentCommentIndexEndpoint
+from .endpoints.organization_incident_comment_details import OrganizationIncidentCommentDetailsEndpoint
 from .endpoints.organization_incident_index import OrganizationIncidentIndexEndpoint
 from .endpoints.organization_incident_subscription_index import OrganizationIncidentSubscriptionIndexEndpoint
 from .endpoints.organization_issues_new import OrganizationIssuesNewEndpoint
@@ -428,6 +429,11 @@ urlpatterns = patterns(
         OrganizationIncidentCommentIndexEndpoint.as_view(),
         name='sentry-api-0-organization-incident-comments'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/incidents/(?P<incident_identifier>[^\/]+)/comments/(?P<activity_id>[^\/]+)/$',
+        OrganizationIncidentCommentDetailsEndpoint.as_view(),
+        name='sentry-api-0-organization-incident-comment-details'
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/incidents/(?P<incident_identifier>[^\/]+)/$',
         OrganizationIncidentDetailsEndpoint.as_view(),
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index 1af6acb7b2..59fc242593 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -175,6 +175,22 @@ def create_incident_activity(
     )
 
 
+def update_comment(activity, comment):
+    """
+    Specifically updates an IncidentActivity with type IncidentActivityType.COMMENT
+    """
+
+    return activity.update(comment=comment)
+
+
+def delete_comment(activity):
+    """
+    Specifically deletes an IncidentActivity with type IncidentActivityType.COMMENT
+    """
+
+    return activity.delete()
+
+
 def create_event_stat_snapshot(incident, start, end):
     """
     Creates an event stats snapshot for an incident in a given period of time.
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index 59e6cdc6fd..52c07c3fe8 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -25,6 +25,7 @@ from sentry.incidents.models import (
     IncidentGroup,
     IncidentProject,
     IncidentSeen,
+    IncidentActivity,
 )
 from sentry.mediators import sentry_apps, sentry_app_installations, service_hooks
 from sentry.models import (
@@ -872,3 +873,12 @@ class Factories(object):
             for user in seen_by:
                 IncidentSeen.objects.create(incident=incident, user=user, last_seen=timezone.now())
         return incident
+
+    @staticmethod
+    def create_incident_activity(incident, type, comment=None, user=None):
+        return IncidentActivity.objects.create(
+            incident=incident,
+            type=type,
+            comment=comment,
+            user=user,
+        )
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index e414d92bdb..96cb819756 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import, print_function, unicode_literals
 
 from sentry.models import Activity, OrganizationMember, OrganizationMemberTeam
+from sentry.incidents.models import IncidentActivityType
 
 import pytest
 from django.utils.functional import cached_property
@@ -219,6 +220,15 @@ class Fixtures(object):
             organization=organization, projects=projects, *args, **kwargs
         )
 
+    def create_incident_activity(self, incident, *args, **kwargs):
+        return Factories.create_incident_activity(
+            incident=incident, *args, **kwargs
+        )
+
+    def create_incident_comment(self, incident, *args, **kwargs):
+        return self.create_incident_activity(
+            incident, type=IncidentActivityType.COMMENT.value, *args, **kwargs)
+
     @pytest.fixture(autouse=True)
     def _init_insta_snapshot(self, insta_snapshot):
         self.insta_snapshot = insta_snapshot
diff --git a/tests/sentry/api/endpoints/test_organization_incident_comment_details.py b/tests/sentry/api/endpoints/test_organization_incident_comment_details.py
new file mode 100644
index 0000000000..ad0c46d5d1
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_incident_comment_details.py
@@ -0,0 +1,98 @@
+from __future__ import absolute_import
+
+from exam import fixture
+
+from sentry.incidents.models import (
+    IncidentActivity,
+    IncidentActivityType,
+)
+from sentry.testutils import APITestCase
+
+
+class BaseIncidentCommentDetailsTest(object):
+    endpoint = 'sentry-api-0-organization-incident-comment-details'
+
+    def setUp(self):
+        self.create_member(
+            user=self.user,
+            organization=self.organization,
+            role='owner',
+            teams=[self.team],
+        )
+        self.login_as(self.user)
+        self.activity = self.create_incident_comment(self.incident, user=self.user)
+        self.detected_activity = self.create_incident_activity(
+            self.incident, user=self.user, type=IncidentActivityType.DETECTED.value)
+
+    @fixture
+    def organization(self):
+        return self.create_organization()
+
+    @fixture
+    def project(self):
+        return self.create_project(organization=self.organization)
+
+    @fixture
+    def user(self):
+        return self.create_user()
+
+    @fixture
+    def incident(self):
+        return self.create_incident()
+
+    def test_not_found(self):
+        comment = 'hello'
+        with self.feature('organizations:incidents'):
+            self.get_valid_response(
+                self.organization.slug,
+                self.incident.identifier,
+                123,
+                comment=comment,
+                status_code=404,
+            )
+
+    def test_non_comment_type(self):
+        comment = "hello"
+        with self.feature('organizations:incidents'):
+            self.get_valid_response(
+                self.organization.slug,
+                self.incident.identifier,
+                self.detected_activity.id,
+                comment=comment,
+                status_code=404,
+            )
+
+
+class OrganizationIncidentCommentUpdateEndpointTest(
+        BaseIncidentCommentDetailsTest, APITestCase):
+    method = 'put'
+
+    def test_simple(self):
+        comment = 'hello'
+        with self.feature('organizations:incidents'):
+            self.get_valid_response(
+                self.organization.slug,
+                self.incident.identifier,
+                self.activity.id,
+                comment=comment,
+                status_code=200,
+            )
+        activity = IncidentActivity.objects.get(id=self.activity.id)
+        assert activity.type == IncidentActivityType.COMMENT.value
+        assert activity.user == self.user
+        assert activity.comment == comment
+
+
+class OrganizationIncidentCommentDeleteEndpointTest(
+        BaseIncidentCommentDetailsTest, APITestCase):
+    method = 'delete'
+
+    def test_simple(self):
+        with self.feature('organizations:incidents'):
+            self.get_valid_response(
+                self.organization.slug,
+                self.incident.identifier,
+                self.activity.id,
+                status_code=204,
+            )
+        assert not IncidentActivity.objects.filter(id=self.activity.id).exists()
