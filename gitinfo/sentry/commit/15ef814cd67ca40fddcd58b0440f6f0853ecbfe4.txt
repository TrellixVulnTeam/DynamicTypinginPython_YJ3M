commit 15ef814cd67ca40fddcd58b0440f6f0853ecbfe4
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Jun 29 12:03:30 2018 -0700

    feat(ui): Add a SearchInput into AsyncComponent (#8813)
    
    Additionally adds pagination.
    
    Fixes ISSUE-47

diff --git a/src/sentry/static/sentry/app/components/asyncComponent.jsx b/src/sentry/static/sentry/app/components/asyncComponent.jsx
index e706b02534..5f8b2ceeeb 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.jsx
@@ -5,6 +5,7 @@ import React from 'react';
 
 import {Client} from 'app/api';
 import {t} from 'app/locale';
+import AsyncComponentSearchInput from 'app/components/asyncComponentSearchInput';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import PermissionDenied from 'app/views/permissionDenied';
@@ -196,6 +197,23 @@ class AsyncComponent extends React.Component {
     return [['data', endpoint, this.getEndpointParams()]];
   }
 
+  renderSearchInput({onSearchSubmit, stateKey, ...other}) {
+    return (
+      <AsyncComponentSearchInput
+        onSearchSubmit={onSearchSubmit}
+        stateKey={stateKey}
+        api={this.api}
+        onSuccess={(data, jqXHR) => {
+          this.handleRequestSuccess({stateKey, data, jqXHR});
+        }}
+        onError={() => {
+          this.renderError(new Error('Error with AsyncComponentSearchInput'));
+        }}
+        {...other}
+      />
+    );
+  }
+
   renderLoading() {
     return <LoadingIndicator />;
   }
diff --git a/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx b/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx
new file mode 100644
index 0000000000..1a914da11d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx
@@ -0,0 +1,70 @@
+import {debounce} from 'lodash';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import Input from 'app/views/settings/components/forms/controls/input';
+
+/**
+ * This is a search input that can be easily used in AsyncComponent/Views.
+ *
+ * It probably doesn't make too much sense outside of an AsyncComponent atm.
+ */
+export default class AsyncComponentSearchInput extends React.Component {
+  static propTypes = {
+    api: PropTypes.any.isRequired,
+    url: PropTypes.string.isRequired,
+    onSuccess: PropTypes.func.isRequired,
+    onError: PropTypes.func.isRequired,
+    placeholder: PropTypes.string,
+    onSearchSubmit: PropTypes.func,
+  };
+
+  static defaultProps = {
+    placeholder: 'Search...',
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      query: '',
+    };
+  }
+
+  query = debounce(searchQuery => {
+    return this.props.api.request(`${this.props.url}?query=${searchQuery}`, {
+      method: 'GET',
+      success: (data, _, jqXHR) => {
+        this.props.onSuccess(data, jqXHR);
+      },
+      error: () => {
+        this.props.onError();
+      },
+    });
+  }, 200);
+
+  handleChange = evt => {
+    let searchQuery = evt.target.value;
+    this.query(searchQuery);
+    this.setState({query: searchQuery});
+  };
+
+  handleSearch = evt => {
+    let {onSearchSubmit} = this.props;
+    if (typeof onSearchSubmit !== 'function') return;
+    onSearchSubmit(this.state.query, evt);
+  };
+
+  render() {
+    let {placeholder, className} = this.props;
+    return (
+      <form onSubmit={this.handleSearch}>
+        <Input
+          value={this.state.query}
+          onChange={this.handleChange}
+          className={className}
+          placeholder={placeholder}
+        />
+      </form>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx b/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
index b94e127ca6..fb134b5a1f 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
@@ -1,17 +1,20 @@
+import {Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {fields} from 'app/data/forms/accountNotificationSettings';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import Form from 'app/views/settings/components/forms/form';
 import JsonForm from 'app/views/settings/components/forms/jsonForm';
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import Pagination from 'app/components/pagination';
 import ProjectsStore from 'app/stores/projectsStore';
 import SelectField from 'app/views/settings/components/forms/selectField';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import TextBlock from 'app/views/settings/components/text/textBlock';
-import {fields} from 'app/data/forms/accountNotificationSettings';
 import withOrganizations from 'app/utils/withOrganizations';
 
 const ACCOUNT_NOTIFICATION_FIELDS = {
@@ -231,6 +234,8 @@ export default class AccountNotificationFineTuning extends AsyncView {
     const isProject = isGroupedByProject(fineTuneType);
     const field = ACCOUNT_NOTIFICATION_FIELDS[fineTuneType];
     const {title, description} = field;
+    const [stateKey, url] = isProject ? this.getEndpoints()[2] : [];
+    const hasProjects = !!this.state.projects.length;
 
     if (fineTuneType === 'email') {
       // Fetch verified email addresses
@@ -263,16 +268,40 @@ export default class AccountNotificationFineTuning extends AsyncView {
           initialData={this.state.fineTuneData}
         >
           <Panel>
-            {isProject && (
-              <AccountNotificationsByProject
-                projects={this.state.projects}
-                field={field}
-              />
-            )}
+            <PanelBody>
+              <PanelHeader hasButtons>
+                <Box flex="1">{isProject ? t('Projects') : t('Organizations')}</Box>
+                <Box>
+                  {isProject &&
+                    this.renderSearchInput({
+                      placeholder: t('Search Projects'),
+                      url,
+                      stateKey,
+                    })}
+                </Box>
+              </PanelHeader>
+
+              {isProject &&
+                hasProjects && (
+                  <AccountNotificationsByProject
+                    projects={this.state.projects}
+                    field={field}
+                  />
+                )}
 
-            {!isProject && <AccountNotificationsByOrganizationContainer field={field} />}
+              {isProject &&
+                !hasProjects && <EmptyMessage>{t('No projects found')}</EmptyMessage>}
+
+              {!isProject && (
+                <AccountNotificationsByOrganizationContainer field={field} />
+              )}
+            </PanelBody>
           </Panel>
         </Form>
+
+        {this.state.projects && (
+          <Pagination pageLinks={this.state.projectsPageLinks} {...this.props} />
+        )}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/organizationProjects/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationProjects/index.jsx
index 2671ec96bb..9f064e5fb3 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationProjects/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationProjects/index.jsx
@@ -2,14 +2,12 @@ import {Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
 import idx from 'idx';
-import {debounce} from 'lodash';
 
 import {getOrganizationState} from 'app/mixins/organizationState';
 import {sortProjects} from 'app/utils';
 import {t} from 'app/locale';
 import Button from 'app/components/buttons/button';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
-import Input from 'app/views/settings/components/forms/controls/input';
 import AsyncView from 'app/views/asyncView';
 import Pagination from 'app/components/pagination';
 import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
@@ -71,32 +69,18 @@ export default class OrganizationProjects extends AsyncView {
     return `${org.name} Projects`;
   }
 
-  handleChange = evt => {
-    let searchQuery = evt.target.value;
-    this.getProjects(searchQuery);
-    this.setState({searchQuery});
-  };
-
-  getProjects = debounce(searchQuery => {
-    let {params} = this.props;
-    let {orgId} = params || {};
-
-    this.api.request(`/organizations/${orgId}/projects/?query=${searchQuery}`, {
-      method: 'GET',
-      success: (data, _, jqXHR) => {
-        this.handleRequestSuccess({stateKey: 'projectList', data, jqXHR});
-      },
-    });
-  }, 200);
-
-  handleSearch = e => {
+  /**
+   * This is called when "Enter" (more specifically a "submit" event) is pressed.
+   * Update the URL to reflect search term.
+   */
+  handleSearch = (query, e) => {
     let {router} = this.context;
     let {location} = this.props;
     e.preventDefault();
     router.push({
       pathname: location.pathname,
       query: {
-        query: this.state.searchQuery,
+        query,
       },
     });
   };
@@ -107,6 +91,7 @@ export default class OrganizationProjects extends AsyncView {
     let canCreateProjects = getOrganizationState(this.context.organization)
       .getAccess()
       .has('project:admin');
+    let [stateKey, url] = this.getEndpoints()[0];
 
     let action = (
       <Button
@@ -132,14 +117,13 @@ export default class OrganizationProjects extends AsyncView {
           <PanelHeader hasButtons>
             {t('Projects')}
 
-            <form onSubmit={this.handleSearch}>
-              <Input
-                value={this.state.searchQuery}
-                onChange={this.handleChange}
-                className="search"
-                placeholder={t('Search Projects')}
-              />
-            </form>
+            {this.renderSearchInput({
+              onSearchSubmit: this.handleSearch,
+              placeholder: t('Search Projects'),
+              className: 'search',
+              url,
+              stateKey,
+            })}
           </PanelHeader>
           <PanelBody css={{width: '100%'}}>
             {sortProjects(projectList).map((project, i) => (
diff --git a/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap
index e69f8e8619..b83b1f38a1 100644
--- a/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap
@@ -232,23 +232,34 @@ exports[`OrganizationProjects Should render the projects in the store 1`] = `
                           is={null}
                         >
                           Projects
-                          <form
-                            onSubmit={[Function]}
+                          <AsyncComponentSearchInput
+                            api={Client {}}
+                            className="search"
+                            onError={[Function]}
+                            onSearchSubmit={[Function]}
+                            onSuccess={[Function]}
+                            placeholder="Search Projects"
+                            stateKey="projectList"
+                            url="/organizations/org-slug/projects/"
                           >
-                            <Input
-                              className="search"
-                              onChange={[Function]}
-                              placeholder="Search Projects"
-                              value=""
+                            <form
+                              onSubmit={[Function]}
                             >
-                              <input
-                                className="search css-1m7xmcf-Input-inputStyles e1xej46s0"
+                              <Input
+                                className="search"
                                 onChange={[Function]}
                                 placeholder="Search Projects"
                                 value=""
-                              />
-                            </Input>
-                          </form>
+                              >
+                                <input
+                                  className="search css-1m7xmcf-Input-inputStyles e1xej46s0"
+                                  onChange={[Function]}
+                                  placeholder="Search Projects"
+                                  value=""
+                                />
+                              </Input>
+                            </form>
+                          </AsyncComponentSearchInput>
                         </div>
                       </Base>
                     </Flex>
diff --git a/tests/js/spec/views/settings/organizationProjects.spec.jsx b/tests/js/spec/views/settings/organizationProjects.spec.jsx
index 09c65b7835..c27a8a6ce7 100644
--- a/tests/js/spec/views/settings/organizationProjects.spec.jsx
+++ b/tests/js/spec/views/settings/organizationProjects.spec.jsx
@@ -68,9 +68,10 @@ describe('OrganizationProjects', function() {
 
     expect(searchMock).not.toHaveBeenCalled();
 
-    wrapper.find('Input').simulate('change', {target: {value: `${project.slug}`}});
+    wrapper
+      .find('AsyncComponentSearchInput Input')
+      .simulate('change', {target: {value: `${project.slug}`}});
 
-    expect(wrapper.state('searchQuery')).toBe(`${project.slug}`);
     expect(searchMock).toHaveBeenCalled();
     expect(searchMock).toHaveBeenCalledWith(
       `/organizations/${org.slug}/projects/?query=${project.slug}`,
