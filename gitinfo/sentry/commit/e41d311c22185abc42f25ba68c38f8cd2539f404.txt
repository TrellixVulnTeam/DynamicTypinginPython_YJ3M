commit e41d311c22185abc42f25ba68c38f8cd2539f404
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Dec 6 10:51:21 2017 -0800

    User reports are linked to corresponding event  (#6583)
    
    * ref(userReports): Refactor project user reports to use EventUserReport component
    
    * feat(api): Add event_id to user reports endpoints
    
    * fix(api): Scope event query by project ID
    
    * ref(ui): Refactor group user reports to use userReport component
    
    * feat(ui): Add link to events on user report components
    
    * ref(api): Reformat API response and mark `eventID` as deprecated
    
    * ref(userReports): Rename variable in serializer

diff --git a/src/sentry/api/serializers/models/userreport.py b/src/sentry/api/serializers/models/userreport.py
index cc40ed2bba..94ad635f39 100644
--- a/src/sentry/api/serializers/models/userreport.py
+++ b/src/sentry/api/serializers/models/userreport.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 import six
 
 from sentry.api.serializers import register, serialize, Serializer
-from sentry.models import EventUser, UserReport
+from sentry.models import EventUser, UserReport, Event
 
 
 @register(UserReport)
@@ -12,34 +12,49 @@ class UserReportSerializer(Serializer):
         queryset = list(EventUser.objects.filter(
             id__in=[i.event_user_id for i in item_list],
         ))
+
         event_users = {e.id: d for e, d in zip(queryset, serialize(queryset, user))}
 
+        # If a event list with multiple project IDs is passed to this and event IDs are not unique
+        # this could return the wrong eventIDs
+        events_list = Event.objects.filter(
+            project_id__in={i.project_id for i in item_list},
+            event_id__in=[i.event_id for i in item_list]
+        ).values('id', 'event_id')
+
+        events_dict = {e['event_id']: e['id'] for e in events_list}
+
         attrs = {}
         for item in item_list:
             attrs[item] = {
                 'event_user': event_users.get(item.event_user_id),
+                'event': {
+                    'id': events_dict.get(item.event_id)
+                }
             }
+
         return attrs
 
     def serialize(self, obj, attrs, user):
         # TODO(dcramer): add in various context from the event
         # context == user / http / extra interfaces
         return {
-            'id':
-            six.text_type(obj.id),
-            'eventID':
-            obj.event_id,
+            'id': six.text_type(obj.id),
+            # TODO(lyn): Verify this isn't being used and eventually remove this from API
+            'eventID': obj.event_id,
             'name': (
                 obj.name or obj.email or
                 (attrs['event_user'].get_display_name() if attrs['event_user'] else None)
             ),
             'email': (obj.email or (attrs['event_user'].email if attrs['event_user'] else None)),
-            'comments':
-            obj.comments,
-            'dateCreated':
-            obj.date_added,
-            'user':
-            attrs['event_user'],
+            'comments': obj.comments,
+            'dateCreated': obj.date_added,
+            'user': attrs['event_user'],
+            'event': {
+                'id': six.text_type(attrs['event']['id']) if attrs['event']['id'] else None,
+                'eventID': obj.event_id
+            }
+
         }
 
 
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 04a285e640..84b50e645d 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -62,12 +62,9 @@ const EventEntries = React.createClass({
   interfaces: INTERFACES,
 
   render() {
-    let group = this.props.group;
-    let evt = this.props.event;
-    let isShare = this.props.isShare;
-    let project = this.props.project;
+    let {group, isShare, project, event, orgId} = this.props;
 
-    let entries = evt.entries.map((entry, entryIdx) => {
+    let entries = event.entries.map((entry, entryIdx) => {
       try {
         let Component = this.interfaces[entry.type];
         if (!Component) {
@@ -81,7 +78,7 @@ const EventEntries = React.createClass({
           <Component
             key={'entry-' + entryIdx}
             group={group}
-            event={evt}
+            event={event}
             type={entry.type}
             data={entry.data}
             isShare={isShare}
@@ -92,7 +89,7 @@ const EventEntries = React.createClass({
         return (
           <EventDataSection
             group={group}
-            event={evt}
+            event={event}
             type={entry.type}
             title={entry.type}
           >
@@ -102,51 +99,58 @@ const EventEntries = React.createClass({
       }
     });
 
-    let hasContext = !utils.objectIsEmpty(evt.user) || !utils.objectIsEmpty(evt.contexts);
+    let hasContext =
+      !utils.objectIsEmpty(event.user) || !utils.objectIsEmpty(event.contexts);
 
     let hasContextSummary =
       hasContext &&
-      (evt.platform === 'cocoa' ||
-        evt.platform === 'native' ||
-        evt.platform === 'javascript' ||
-        evt.platform === 'java');
+      (event.platform === 'cocoa' ||
+        event.platform === 'native' ||
+        event.platform === 'javascript' ||
+        event.platform === 'java');
 
     return (
       <div className="entries">
-        {evt.userReport && <EventUserReport group={group} event={evt} />}
-        {!utils.objectIsEmpty(evt.errors) && <EventErrors group={group} event={evt} />}
-        {!utils.objectIsEmpty(evt.sdk) &&
-          evt.sdk.upstream.isNewer && (
+        {event.userReport && (
+          <EventUserReport
+            report={event.userReport}
+            orgId={orgId}
+            projectId={project.slug}
+            issueId={group.id}
+          />
+        )}
+        {!utils.objectIsEmpty(event.errors) && (
+          <EventErrors group={group} event={event} />
+        )}
+        {!utils.objectIsEmpty(event.sdk) &&
+          event.sdk.upstream.isNewer && (
             <div className="alert-block alert-info box">
               <span className="icon-exclamation" />
               {t(
                 'This event was reported with an old version of the %s SDK.',
-                evt.platform
+                event.platform
               )}
-              {evt.sdk.upstream.url && (
-                <a href={evt.sdk.upstream.url} className="btn btn-sm btn-default">
+              {event.sdk.upstream.url && (
+                <a href={event.sdk.upstream.url} className="btn btn-sm btn-default">
                   {t('Learn More')}
                 </a>
               )}
             </div>
           )}
-        {hasContextSummary && <EventContextSummary group={group} event={evt} />}
-        <EventTags
-          group={group}
-          event={evt}
-          orgId={this.props.orgId}
-          projectId={project.slug}
-        />
+        {hasContextSummary && <EventContextSummary group={group} event={event} />}
+        <EventTags group={group} event={event} orgId={orgId} projectId={project.slug} />
         {entries}
-        {hasContext && <EventContexts group={group} event={evt} />}
-        {!utils.objectIsEmpty(evt.context) && (
-          <EventExtraData group={group} event={evt} />
+        {hasContext && <EventContexts group={group} event={event} />}
+        {!utils.objectIsEmpty(event.context) && (
+          <EventExtraData group={group} event={event} />
+        )}
+        {!utils.objectIsEmpty(event.packages) && (
+          <EventPackageData group={group} event={event} />
         )}
-        {!utils.objectIsEmpty(evt.packages) && (
-          <EventPackageData group={group} event={evt} />
+        {!utils.objectIsEmpty(event.device) && (
+          <EventDevice group={group} event={event} />
         )}
-        {!utils.objectIsEmpty(evt.device) && <EventDevice group={group} event={evt} />}
-        {!utils.objectIsEmpty(evt.sdk) && <EventSdk group={group} event={evt} />}
+        {!utils.objectIsEmpty(event.sdk) && <EventSdk group={group} event={event} />}
       </div>
     );
   },
diff --git a/src/sentry/static/sentry/app/components/events/userReport.jsx b/src/sentry/static/sentry/app/components/events/userReport.jsx
index a58aa52a45..9fc6ed8bf4 100644
--- a/src/sentry/static/sentry/app/components/events/userReport.jsx
+++ b/src/sentry/static/sentry/app/components/events/userReport.jsx
@@ -3,14 +3,18 @@ import React from 'react';
 import Avatar from '../../components/avatar';
 import TimeSince from '../../components/timeSince';
 import utils from '../../utils';
+import Link from '../link';
 
 const EventUserReport = React.createClass({
   propTypes: {
-    event: PropTypes.object.isRequired,
+    report: PropTypes.object.isRequired,
+    orgId: PropTypes.string.isRequired,
+    projectId: PropTypes.string.isRequired,
+    issueId: PropTypes.string.isRequired,
   },
 
   render() {
-    let report = this.props.event.userReport;
+    let {report, orgId, projectId, issueId} = this.props;
 
     return (
       <div className="user-report">
@@ -21,7 +25,19 @@ const EventUserReport = React.createClass({
               <div className="activity-bubble">
                 <TimeSince date={report.dateCreated} />
                 <div className="activity-author">
-                  {report.name} <small>{report.email}</small>
+                  {report.name}
+                  <small>{report.email}</small>
+                  {/* event_id might be undefined for legacy accounts */}
+                  {report.event.id && (
+                    <small>
+                      <Link
+                        to={`/${orgId}/${projectId}/issues/${issueId}/events/${report
+                          .event.id}`}
+                      >
+                        View event
+                      </Link>
+                    </small>
+                  )}
                 </div>
                 <p
                   dangerouslySetInnerHTML={{
diff --git a/src/sentry/static/sentry/app/views/groupUserReports.jsx b/src/sentry/static/sentry/app/views/groupUserReports.jsx
index 644b58019c..bd2612b21e 100644
--- a/src/sentry/static/sentry/app/views/groupUserReports.jsx
+++ b/src/sentry/static/sentry/app/views/groupUserReports.jsx
@@ -2,12 +2,10 @@ import $ from 'jquery';
 import React from 'react';
 import {Link} from 'react-router';
 import ApiMixin from '../mixins/apiMixin';
-import Avatar from '../components/avatar';
 import GroupState from '../mixins/groupState';
+import EventUserReport from '../components/events/userReport';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
-import TimeSince from '../components/timeSince';
-import utils from '../utils';
 import {t} from '../locale';
 
 const GroupUserReports = React.createClass({
@@ -66,36 +64,30 @@ const GroupUserReports = React.createClass({
   },
 
   render() {
+    let {reportList} = this.state;
+    let {projectId, orgId, groupId} = this.props.params;
+
     if (this.state.loading) {
       return <LoadingIndicator />;
     } else if (this.state.error) {
       return <LoadingError onRetry={this.fetchData} />;
     }
 
-    let children = this.state.reportList.map((item, itemIdx) => {
-      let body = utils.nl2br(utils.urlize(utils.escape(item.comments)));
-
-      return (
-        <li className="activity-note" key={itemIdx}>
-          <Avatar user={item} size={64} className="avatar" />
-          <div className="activity-bubble">
-            <TimeSince date={item.dateCreated} />
-            <div className="activity-author">
-              {item.name} <small>{item.email}</small>
-            </div>
-            <p dangerouslySetInnerHTML={{__html: body}} />
-          </div>
-        </li>
-      );
-    });
-
-    if (children.length) {
+    if (reportList.length) {
       return (
         <div className="row">
           <div className="col-md-9">
-            <div className="activity-container">
-              <ul className="activity">{children}</ul>
-            </div>
+            {reportList.map((item, idx) => {
+              return (
+                <EventUserReport
+                  key={idx}
+                  report={item}
+                  projectId={projectId}
+                  orgId={orgId}
+                  issueId={groupId}
+                />
+              );
+            })}
           </div>
         </div>
       );
diff --git a/src/sentry/static/sentry/app/views/projectUserReports.jsx b/src/sentry/static/sentry/app/views/projectUserReports.jsx
index 7af02c56da..59013a6510 100644
--- a/src/sentry/static/sentry/app/views/projectUserReports.jsx
+++ b/src/sentry/static/sentry/app/views/projectUserReports.jsx
@@ -3,14 +3,12 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import {browserHistory, Link} from 'react-router';
 import ApiMixin from '../mixins/apiMixin';
-import Avatar from '../components/avatar';
 import GroupStore from '../stores/groupStore';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import Pagination from '../components/pagination';
 import CompactIssue from '../components/compactIssue';
-import TimeSince from '../components/timeSince';
-import utils from '../utils';
+import EventUserReport from '../components/events/userReport';
 import {t} from '../locale';
 
 const ProjectUserReports = React.createClass({
@@ -172,8 +170,8 @@ const ProjectUserReports = React.createClass({
 
   renderResults() {
     let {orgId, projectId} = this.props.params;
+
     let children = this.state.reportList.map((item, itemIdx) => {
-      let body = utils.nl2br(utils.urlize(utils.escape(item.comments)));
       let issue = item.issue;
 
       return (
@@ -184,20 +182,12 @@ const ProjectUserReports = React.createClass({
           orgId={orgId}
           projectId={projectId}
         >
-          <div className="activity-container" style={{margin: '10px 0 5px'}}>
-            <ul className="activity">
-              <li className="activity-note" style={{paddingBottom: 0}}>
-                <Avatar user={item} size={64} className="avatar" />
-                <div className="activity-bubble">
-                  <TimeSince date={item.dateCreated} />
-                  <div className="activity-author">
-                    {item.name} <small>{item.email}</small>
-                  </div>
-                  <p dangerouslySetInnerHTML={{__html: body}} />
-                </div>
-              </li>
-            </ul>
-          </div>
+          <EventUserReport
+            report={item}
+            orgId={orgId}
+            projectId={projectId}
+            issueId={issue.id}
+          />
         </CompactIssue>
       );
     });
diff --git a/src/sentry/static/sentry/less/stream.less b/src/sentry/static/sentry/less/stream.less
index 5e77b9886b..2fb6f83823 100644
--- a/src/sentry/static/sentry/less/stream.less
+++ b/src/sentry/static/sentry/less/stream.less
@@ -802,14 +802,14 @@
         color: @gray;
         margin-right: 10px;
       }
-    }
 
-    a {
-      color: @gray;
-      font-weight: bold;
+      a {
+        color: @gray;
+        font-weight: bold;
 
-      &:hover {
-        color: darken(@gray, 20);
+        &:hover {
+          color: darken(@gray, 20);
+        }
       }
     }
 
@@ -934,6 +934,16 @@
       border-bottom: 0;
     }
   }
+
+  .user-report {
+    .activity-container {
+      margin: 10px 0 5px;
+    }
+
+    .activity-note {
+      padding-bottom: 0;
+    }
+  }
 }
 
 // Generate .group positions for animating
