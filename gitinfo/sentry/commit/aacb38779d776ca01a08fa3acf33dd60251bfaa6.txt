commit aacb38779d776ca01a08fa3acf33dd60251bfaa6
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Oct 20 09:21:00 2014 +0200

    Migrate create project view

diff --git a/src/sentry/templates/sentry/teams/projects/new.html b/src/sentry/templates/sentry/teams/projects/new.html
index 84467a10b7..59b74336f3 100644
--- a/src/sentry/templates/sentry/teams/projects/new.html
+++ b/src/sentry/templates/sentry/teams/projects/new.html
@@ -1,4 +1,4 @@
-{% extends "sentry/teams/manage.html" %}
+{% extends "sentry/bases/team.html" %}
 
 {% load i18n %}
 
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index cc2ddba165..9e6e329553 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -70,18 +70,6 @@ class BaseProjectForm(forms.ModelForm):
         model = Project
 
 
-class NewProjectForm(BaseProjectForm):
-    pass
-
-
-class NewProjectAdminForm(NewProjectForm):
-    owner = UserField(required=False)
-
-    class Meta:
-        fields = ('name', 'platform')
-        model = Project
-
-
 class RemoveProjectForm(forms.Form):
     def __init__(self, user, *args, **kwargs):
         super(RemoveProjectForm, self).__init__(*args, **kwargs)
diff --git a/src/sentry/web/frontend/create_project.py b/src/sentry/web/frontend/create_project.py
new file mode 100644
index 0000000000..b8696c179b
--- /dev/null
+++ b/src/sentry/web/frontend/create_project.py
@@ -0,0 +1,72 @@
+from __future__ import absolute_import
+
+from django import forms
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.models import Project, TeamMemberType
+from sentry.permissions import can_create_projects, Permissions
+from sentry.web.frontend.base import TeamView
+from sentry.web.frontend.generic import missing_perm
+from sentry.utils.samples import create_sample_event
+
+BLANK_CHOICE = [("", "")]
+
+
+class NewProjectForm(forms.ModelForm):
+    name = forms.CharField(label=_('Project Name'), max_length=200,
+        widget=forms.TextInput(attrs={'placeholder': _('Production')}))
+    platform = forms.ChoiceField(
+        choices=Project._meta.get_field('platform').get_choices(blank_choice=BLANK_CHOICE),
+        widget=forms.Select(attrs={'data-placeholder': _('Select a platform')})
+    )
+
+    class Meta:
+        fields = ('name', 'platform')
+        model = Project
+
+
+class CreateProjectView(TeamView):
+    required_access = TeamMemberType.ADMIN
+
+    def get_form(self, request):
+        return NewProjectForm(request.POST or None)
+
+    def get(self, request, organization, team):
+        if not can_create_projects(request.user, team):
+            return missing_perm(request, Permissions.ADD_PROJECT, team=team)
+
+        form = self.get_form(request)
+
+        context = {
+            'form': form,
+        }
+
+        return self.respond('sentry/teams/projects/new.html', context)
+
+    def post(self, request, organization, team):
+        if not can_create_projects(request.user, team):
+            return missing_perm(request, Permissions.ADD_PROJECT, team=team)
+
+        form = self.get_form(request)
+        if form.is_valid():
+            project = form.save(commit=False)
+            project.team = team
+            if not project.owner:
+                project.owner = request.user
+            project.save()
+
+            create_sample_event(project)
+
+            if project.platform not in (None, 'other'):
+                url = reverse('sentry-docs-client', args=[project.team.slug, project.slug, project.platform])
+            else:
+                url = reverse('sentry-get-started', args=[project.team.slug, project.slug])
+            return HttpResponseRedirect(url)
+
+        context = {
+            'form': form,
+        }
+
+        return self.respond('sentry/teams/projects/new.html', context)
diff --git a/src/sentry/web/frontend/teams.py b/src/sentry/web/frontend/teams.py
index c1bea8591b..c6bd167c50 100644
--- a/src/sentry/web/frontend/teams.py
+++ b/src/sentry/web/frontend/teams.py
@@ -17,11 +17,9 @@ from django.utils.translation import ugettext as _
 from sentry.constants import MEMBER_USER, MEMBER_OWNER
 from sentry.models import PendingTeamMember, TeamMember, AccessGroup, User
 from sentry.permissions import (
-    can_add_team_member, can_create_projects,
-    can_edit_team_member, can_remove_team_member,
-    Permissions)
+    can_add_team_member, can_edit_team_member, can_remove_team_member,
+)
 from sentry.plugins import plugins
-from sentry.utils.samples import create_sample_event
 from sentry.web.decorators import has_access
 from sentry.web.forms.teams import (
     EditTeamMemberForm, NewTeamMemberForm,
@@ -29,7 +27,6 @@ from sentry.web.forms.teams import (
     EditAccessGroupForm, NewAccessGroupMemberForm, NewAccessGroupProjectForm,
     RemoveAccessGroupForm)
 from sentry.web.helpers import render_to_response
-from sentry.web.frontend.generic import missing_perm
 
 
 def render_with_team_context(team, template, context, request=None):
@@ -252,47 +249,6 @@ def reinvite_pending_team_member(request, team, member_id):
     return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
 
 
-@csrf_protect
-@has_access(MEMBER_OWNER)
-def create_new_team_project(request, team):
-    from sentry.web.forms.projects import NewProjectAdminForm, NewProjectForm
-
-    if not can_create_projects(request.user, team):
-        return missing_perm(request, Permissions.ADD_PROJECT, team=team)
-
-    if request.user.is_superuser:
-        form_cls = NewProjectAdminForm
-        initial = {
-            'owner': request.user.username,
-        }
-    else:
-        form_cls = NewProjectForm
-        initial = {}
-
-    form = form_cls(request.POST or None, initial=initial)
-    if form.is_valid():
-        project = form.save(commit=False)
-        project.team = team
-        if not project.owner:
-            project.owner = request.user
-        project.save()
-
-        create_sample_event(project)
-
-        if project.platform not in (None, 'other'):
-            return HttpResponseRedirect(reverse('sentry-docs-client', args=[project.team.slug, project.slug, project.platform]))
-        return HttpResponseRedirect(reverse('sentry-get-started', args=[project.team.slug, project.slug]))
-
-    context = csrf(request)
-    context.update({
-        'form': form,
-        'page': 'projects',
-        'SUBSECTION': 'new_project',
-    })
-
-    return render_with_team_context(team, 'sentry/teams/projects/new.html', context, request)
-
-
 @csrf_protect
 @has_access(MEMBER_OWNER)
 def new_access_group(request, team):
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 8fccfe8052..bdac843238 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -39,6 +39,7 @@ from sentry.web.frontend.organization_home import OrganizationHomeView
 from sentry.web.frontend.organization_members import OrganizationMembersView
 from sentry.web.frontend.organization_settings import OrganizationSettingsView
 from sentry.web.frontend.organization_teams import OrganizationTeamsView
+from sentry.web.frontend.create_project import CreateProjectView
 from sentry.web.frontend.create_team import CreateTeamView
 from sentry.web.frontend.remove_team import RemoveTeamView
 from sentry.web.frontend.team_access_groups import TeamAccessGroupsView
@@ -159,7 +160,7 @@ urlpatterns += patterns('',
         name='sentry-reinvite-pending-team-member'),
     url(r'^account/teams/(?P<team_slug>[\w_-]+)/projects/$', TeamProjectsView.as_view(),
         name='sentry-manage-team-projects'),
-    url(r'^account/teams/(?P<team_slug>[\w_-]+)/projects/new/$', teams.create_new_team_project,
+    url(r'^account/teams/(?P<team_slug>[\w_-]+)/projects/new/$', CreateProjectView.as_view(),
         name='sentry-new-project'),
     url(r'^accept/(?P<member_id>\d+)/(?P<token>\w+)/$', teams.accept_invite,
         name='sentry-accept-invite'),
