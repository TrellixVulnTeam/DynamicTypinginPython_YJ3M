commit 55f85520bb5573dfc7efb994b55e40269de855aa
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Mar 20 13:18:40 2020 -0700

    feat(ui): Fix pressing "Enter" in `<SmartSearchBar>` while loaâ€¦ (#17799)
    
    This would previously submit the field while the dropdown bar is visible and it is in a loading state -- this action (Tab/Enter) should not do anything while the dropdown is open and in a loading state.

diff --git a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
index f2bed3604d..2f04d09614 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
@@ -96,6 +96,24 @@ const getDropdownElementStyles = p => `
 `;
 
 class SmartSearchBar extends React.Component {
+  /**
+   * Given a query, and the current cursor position, return the string-delimiting
+   * index of the search term designated by the cursor.
+   */
+  static getLastTermIndex = (query, cursor) => {
+    // TODO: work with quoted-terms
+    const cursorOffset = query.slice(cursor).search(/\s|$/);
+    return cursor + (cursorOffset === -1 ? 0 : cursorOffset);
+  };
+
+  /**
+   * Returns an array of query terms, including incomplete terms
+   *
+   * e.g. ["is:unassigned", "browser:\"Chrome 33.0\"", "assigned"]
+   */
+  static getQueryTerms = (query, cursor) =>
+    query.slice(0, cursor).match(/\S+:"[^"]*"?|\S+/g);
+
   static propTypes = {
     api: PropTypes.object,
 
@@ -185,24 +203,6 @@ class SmartSearchBar extends React.Component {
     router: PropTypes.object,
   };
 
-  /**
-   * Given a query, and the current cursor position, return the string-delimiting
-   * index of the search term designated by the cursor.
-   */
-  static getLastTermIndex = (query, cursor) => {
-    // TODO: work with quoted-terms
-    const cursorOffset = query.slice(cursor).search(/\s|$/);
-    return cursor + (cursorOffset === -1 ? 0 : cursorOffset);
-  };
-
-  /**
-   * Returns an array of query terms, including incomplete terms
-   *
-   * e.g. ["is:unassigned", "browser:\"Chrome 33.0\"", "assigned"]
-   */
-  static getQueryTerms = (query, cursor) =>
-    query.slice(0, cursor).match(/\S+:"[^"]*"?|\S+/g);
-
   static defaultProps = {
     defaultQuery: '',
     query: null,
@@ -388,9 +388,15 @@ class SmartSearchBar extends React.Component {
         activeSearchItem: nextActiveSearchItem,
         searchItems: searchItems.slice(0),
       });
-    } else if ((key === 'Tab' || key === 'Enter') && isSelectingDropdownItems) {
+    }
+
+    if ((key === 'Tab' || key === 'Enter') && isSelectingDropdownItems) {
       evt.preventDefault();
 
+      if (this.state.loading) {
+        return;
+      }
+
       const {activeSearchItem, searchItems} = this.state;
       const [groupIndex, childrenIndex] = findSearchItemByIndex(
         searchItems,
@@ -401,12 +407,25 @@ class SmartSearchBar extends React.Component {
       if (item && !this.isDefaultDropdownItem(item)) {
         this.onAutoComplete(item.value, item);
       }
-    } else if (key === 'Enter' && !useFormWrapper && !isSelectingDropdownItems) {
-      // If enter is pressed, and we are not wrapping input in a `<form>`, and
-      // we are not selecting an item from the dropdown, then we should consider
-      // the user as finished selecting and perform a "search" since there is no
-      // `<form>` to catch and call `this.onSubmit`
-      this.doSearch();
+      return;
+    }
+
+    if (key === 'Enter') {
+      // If we are still loading dropdown, do nothing
+      // Otherwise, this will propagate up to form and submit
+      if (this.state.loading) {
+        evt.preventDefault();
+        return;
+      }
+
+      if (!useFormWrapper && !isSelectingDropdownItems) {
+        // If enter is pressed, and we are not wrapping input in a `<form>`, and
+        // we are not selecting an item from the dropdown, then we should consider
+        // the user as finished selecting and perform a "search" since there is no
+        // `<form>` to catch and call `this.onSubmit`
+        this.doSearch();
+      }
+      return;
     }
   };
 
diff --git a/tests/js/spec/components/smartSearchBar.spec.jsx b/tests/js/spec/components/smartSearchBar.spec.jsx
index a3e924f1df..35554d2dc7 100644
--- a/tests/js/spec/components/smartSearchBar.spec.jsx
+++ b/tests/js/spec/components/smartSearchBar.spec.jsx
@@ -75,6 +75,46 @@ describe('SmartSearchBar', function() {
     MockApiClient.clearMockResponses();
   });
 
+  it('calls preventDefault when loading and enter is pressed', async function() {
+    jest.useRealTimers();
+    const getTagValuesMock = jest.fn().mockImplementation(() => {
+      return new Promise(() => {});
+    });
+    const onSearch = jest.fn();
+    const props = {
+      orgId: 'org-slug',
+      projectId: '0',
+      query: '',
+      organization,
+      supportedTags,
+      onGetTagValues: getTagValuesMock,
+      onSearch,
+    };
+
+    const searchBar = mountWithTheme(
+      <SmartSearchBar {...props} api={new Client()} />,
+
+      options
+    );
+    searchBar.find('input').simulate('focus');
+    searchBar.find('input').simulate('change', {target: {value: 'bro'}});
+    await tick();
+
+    // Can't select with tab
+    searchBar.find('input').simulate('keyDown', {key: 'ArrowDown'});
+    searchBar.find('input').simulate('keyDown', {key: 'Tab'});
+    expect(onSearch).not.toHaveBeenCalled();
+
+    searchBar.find('input').simulate('change', {target: {value: 'browser:'}});
+    await tick();
+
+    // press enter
+    const preventDefault = jest.fn();
+    searchBar.find('input').simulate('keyDown', {key: 'Enter', preventDefault});
+    expect(onSearch).not.toHaveBeenCalled();
+    expect(preventDefault).toHaveBeenCalled();
+  });
+
   describe('componentWillReceiveProps()', function() {
     it('should add a space when setting state.query', function() {
       const searchBar = shallow(
