commit c57558313e8391103431d1f033e573006515784c
Author: Mark Story <mark@mark-story.com>
Date:   Mon Mar 11 16:51:46 2019 -0400

    fix(api) Don't 500 when we get an invalid member id (#12344)
    
    Gracefully handle garbage data coming from the internet.
    
    Fixes SENTRY-6T2

diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index 4a7c75cbdb..1ec649257b 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -76,11 +76,14 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
                 user__is_active=True,
             )
         else:
-            queryset = OrganizationMember.objects.filter(
-                Q(user__is_active=True) | Q(user__isnull=True),
-                organization=organization,
-                id=member_id,
-            )
+            try:
+                queryset = OrganizationMember.objects.filter(
+                    Q(user__is_active=True) | Q(user__isnull=True),
+                    organization=organization,
+                    id=member_id,
+                )
+            except ValueError:
+                raise OrganizationMember.DoesNotExist()
         return queryset.select_related('user').get()
 
     def _is_only_owner(self, member):
diff --git a/tests/sentry/api/endpoints/test_organization_member_details.py b/tests/sentry/api/endpoints/test_organization_member_details.py
index 71f3d5f1fc..38237cfbb3 100644
--- a/tests/sentry/api/endpoints/test_organization_member_details.py
+++ b/tests/sentry/api/endpoints/test_organization_member_details.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core import mail
 from django.core.urlresolvers import reverse
 from django.db.models import F
@@ -14,6 +16,26 @@ from sentry.testutils import APITestCase
 
 class UpdateOrganizationMemberTest(APITestCase):
 
+    def test_invalid_id(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        member = self.create_user('bar@example.com')
+        self.create_member(
+            organization=organization,
+            user=member,
+            role='member',
+        )
+
+        path = reverse(
+            'sentry-api-0-organization-member-details', args=[organization.slug, 'trash']
+        )
+        self.login_as(self.user)
+
+        resp = self.client.put(path, data={'reinvite': 1})
+
+        assert resp.status_code == 404
+
     @patch('sentry.models.OrganizationMember.send_invite_email')
     def test_reinvite_pending_member(self, mock_send_invite_email):
         self.login_as(user=self.user)
@@ -651,9 +673,28 @@ class DeleteOrganizationMemberTest(APITestCase):
         resp = self.client.delete(path)
 
         assert resp.status_code == 204
-
         assert not OrganizationMember.objects.filter(id=member_om.id).exists()
 
+    def test_invalid_id(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        member = self.create_user('bar@example.com')
+        self.create_member(
+            organization=organization,
+            user=member,
+            role='member',
+        )
+
+        path = reverse(
+            'sentry-api-0-organization-member-details', args=[organization.slug, 'trash']
+        )
+        self.login_as(self.user)
+
+        resp = self.client.delete(path)
+
+        assert resp.status_code == 404
+
     def test_cannot_delete_member_with_higher_access(self):
         organization = self.create_organization(name='foo', owner=self.user)
 
@@ -681,7 +722,6 @@ class DeleteOrganizationMemberTest(APITestCase):
         resp = self.client.delete(path)
 
         assert resp.status_code == 400
-
         assert OrganizationMember.objects.filter(id=owner_om.id).exists()
 
     def test_cannot_delete_only_owner(self):
@@ -712,7 +752,6 @@ class DeleteOrganizationMemberTest(APITestCase):
         resp = self.client.delete(path)
 
         assert resp.status_code == 403
-
         assert OrganizationMember.objects.filter(id=owner_om.id).exists()
 
     def test_can_delete_self(self):
@@ -734,7 +773,6 @@ class DeleteOrganizationMemberTest(APITestCase):
         resp = self.client.delete(path)
 
         assert resp.status_code == 204
-
         assert not OrganizationMember.objects.filter(
             user=other_user,
             organization=organization,
@@ -773,3 +811,56 @@ class DeleteOrganizationMemberTest(APITestCase):
         assert resp.status_code == 400
 
         assert OrganizationMember.objects.filter(id=member_om.id).exists()
+
+
+class GetOrganizationMemberTest(APITestCase):
+    def test_me(self):
+        user = self.create_user('dummy@example.com')
+        organization = self.create_organization(name='test', owner=user)
+        self.create_team(
+            name='first',
+            organization=organization,
+            members=[user])
+
+        path = reverse(
+            'sentry-api-0-organization-member-details', args=[organization.slug, 'me']
+        )
+        self.login_as(user)
+        resp = self.client.get(path)
+        assert resp.status_code == 200
+        assert resp.data['role'] == 'owner'
+        assert resp.data['user']['id'] == six.text_type(user.id)
+        assert resp.data['email'] == user.email
+
+    def test_get_by_id(self):
+        user = self.create_user('dummy@example.com')
+        organization = self.create_organization(name='test')
+        team = self.create_team(
+            name='first',
+            organization=organization,
+            members=[user])
+        member = team.member_set.first()
+
+        path = reverse(
+            'sentry-api-0-organization-member-details', args=[organization.slug, member.id]
+        )
+        self.login_as(user)
+        resp = self.client.get(path)
+        assert resp.status_code == 200
+        assert resp.data['role'] == 'member'
+        assert resp.data['id'] == six.text_type(member.id)
+
+    def test_get_by_garbage(self):
+        user = self.create_user('dummy@example.com')
+        organization = self.create_organization(name='test')
+        self.create_team(
+            name='first',
+            organization=organization,
+            members=[user])
+
+        path = reverse(
+            'sentry-api-0-organization-member-details', args=[organization.slug, 'trash']
+        )
+        self.login_as(user)
+        resp = self.client.get(path)
+        assert resp.status_code == 404
