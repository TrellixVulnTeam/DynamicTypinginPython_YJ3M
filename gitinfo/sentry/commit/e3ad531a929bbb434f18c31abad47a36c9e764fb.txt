commit e3ad531a929bbb434f18c31abad47a36c9e764fb
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Oct 2 12:17:53 2015 -0700

    Add project user endpoint and search (refs GH-2050)

diff --git a/src/sentry/api/endpoints/project_users.py b/src/sentry/api/endpoints/project_users.py
new file mode 100644
index 0000000000..12aea0648c
--- /dev/null
+++ b/src/sentry/api/endpoints/project_users.py
@@ -0,0 +1,57 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.base import DocSection
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.serializers import serialize
+from sentry.models import EventUser
+
+KEYWORD_MAP = {
+    'id': 'ident',
+    'email': 'email',
+    'username': 'username',
+    'ip': 'ip_address',
+}
+
+
+class ProjectUsersEndpoint(ProjectEndpoint):
+    doc_section = DocSection.PROJECTS
+
+    def get(self, request, project):
+        """
+        List a Project's Users
+        ``````````````````````
+
+        Return a list of users seen within this project.
+
+        :pparam string organization_slug: the slug of the organization.
+        :pparam string project_slug: the slug of the project.
+        :pparam string key: the tag key to look up.
+        :auth: required
+        :qparam string query: Limit results to users matching the given query.
+        Prefixes should be used to suggest the field to match on: ``id``,
+        ``email``, ``username``, ``ip``. For example,
+        ``query=email:foo@example.com``
+
+        """
+        queryset = EventUser.objects.filter(
+            project=project,
+        )
+        if request.GET.get('query'):
+            pieces = request.GET['query'].strip().split(':', 1)
+            if len(pieces) != 2:
+                return Response([])
+            try:
+                queryset = queryset.filter(**{
+                    '{}__icontains'.format(KEYWORD_MAP[pieces[0]]): pieces[1]
+                })
+            except KeyError:
+                return Response([])
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by='-id',
+            on_results=lambda x: serialize(x, request.user),
+        )
diff --git a/src/sentry/api/serializers/models/eventuser.py b/src/sentry/api/serializers/models/eventuser.py
new file mode 100644
index 0000000000..f4839deb4f
--- /dev/null
+++ b/src/sentry/api/serializers/models/eventuser.py
@@ -0,0 +1,18 @@
+from __future__ import absolute_import
+
+from sentry.api.serializers import Serializer, register
+from sentry.models import EventUser
+from sentry.utils.avatar import get_gravatar_url
+
+
+@register(EventUser)
+class EventUserSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        return {
+            'id': str(obj.id),
+            'identifier': obj.ident,
+            'username': obj.username,
+            'email': obj.email,
+            'ipAddress': obj.ip_address,
+            'avatarUrl': get_gravatar_url(obj.email, size=32),
+        }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 8a35c73cb2..44f5147d5b 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -48,6 +48,7 @@ from .endpoints.project_stats import ProjectStatsEndpoint
 from .endpoints.project_tags import ProjectTagsEndpoint
 from .endpoints.project_tagkey_details import ProjectTagKeyDetailsEndpoint
 from .endpoints.project_tagkey_values import ProjectTagKeyValuesEndpoint
+from .endpoints.project_users import ProjectUsersEndpoint
 from .endpoints.release_details import ReleaseDetailsEndpoint
 from .endpoints.release_files import ReleaseFilesEndpoint
 from .endpoints.release_file_details import ReleaseFileDetailsEndpoint
@@ -197,6 +198,9 @@ urlpatterns = patterns(
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/tags/(?P<key>[^/]+)/values/$',
         ProjectTagKeyValuesEndpoint.as_view(),
         name='sentry-api-0-project-tagkey-values'),
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/users/$',
+        ProjectUsersEndpoint.as_view(),
+        name='sentry-api-0-project-users'),
 
     # Groups
     url(r'^groups/(?P<group_id>\d+)/$',
diff --git a/tests/sentry/api/endpoints/test_project_users.py b/tests/sentry/api/endpoints/test_project_users.py
new file mode 100644
index 0000000000..3e3a3a9cb8
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_users.py
@@ -0,0 +1,108 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from sentry.models import EventUser
+from sentry.testutils import APITestCase
+
+
+class ProjectUsersTest(APITestCase):
+    def setUp(self):
+        super(ProjectUsersTest, self).setUp()
+
+        self.project = self.create_project()
+        self.euser1 = EventUser.objects.create(
+            project=self.project,
+            ident='1',
+            email='foo@example.com',
+            username='foobar',
+            ip_address='127.0.0.1',
+        )
+
+        self.euser2 = EventUser.objects.create(
+            project=self.project,
+            ident='2',
+            email='bar@example.com',
+            username='baz',
+            ip_address='192.168.0.1',
+        )
+
+        self.path = reverse('sentry-api-0-project-users', kwargs={
+            'organization_slug': self.project.organization.slug,
+            'project_slug': self.project.slug,
+        })
+
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        response = self.client.get(self.path, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        assert sorted(map(lambda x: x['id'], response.data)) == sorted([
+            str(self.euser1.id),
+            str(self.euser2.id),
+        ])
+
+    def test_empty_search_query(self):
+        self.login_as(user=self.user)
+
+        response = self.client.get('{}?query=foo'.format(self.path), format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 0
+
+    def test_username_search(self):
+        self.login_as(user=self.user)
+
+        response = self.client.get('{}?query=username:baz'.format(self.path), format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == str(self.euser2.id)
+
+        response = self.client.get('{}?query=username:ba'.format(self.path), format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+
+    def test_email_search(self):
+        self.login_as(user=self.user)
+
+        response = self.client.get('{}?query=email:foo@example.com'.format(self.path), format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == str(self.euser1.id)
+
+        response = self.client.get('{}?query=email:@example.com'.format(self.path), format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+
+    def test_id_search(self):
+        self.login_as(user=self.user)
+
+        response = self.client.get('{}?query=id:1'.format(self.path), format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == str(self.euser1.id)
+
+        response = self.client.get('{}?query=id:3'.format(self.path), format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 0
+
+    def test_ip_search(self):
+        self.login_as(user=self.user)
+
+        response = self.client.get('{}?query=ip:192.168.0.1'.format(self.path), format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == str(self.euser2.id)
+
+        response = self.client.get('{}?query=ip:0'.format(self.path), format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
