commit 475ec00569b16070fe3923491e06032668e90f8a
Author: MeredithAnya <meredith@getsentry.com>
Date:   Thu Aug 29 15:03:59 2019 -0400

    ref(integrations): Don't add identity on GH installation (#14241)
    
    * remove github identity creation
    
    * update tests

diff --git a/src/sentry/integrations/github/integration.py b/src/sentry/integrations/github/integration.py
index 650c743afb..c66fab692e 100644
--- a/src/sentry/integrations/github/integration.py
+++ b/src/sentry/integrations/github/integration.py
@@ -3,8 +3,7 @@ from __future__ import absolute_import
 from django.utils.translation import ugettext_lazy as _
 
 from sentry import http, options
-from sentry.identity.pipeline import IdentityProviderPipeline
-from sentry.identity.github import get_user_info
+
 from sentry.integrations import (
     IntegrationInstallation,
     IntegrationFeatures,
@@ -16,9 +15,8 @@ from sentry.integrations.exceptions import ApiError
 from sentry.integrations.constants import ERR_INTERNAL, ERR_UNAUTHORIZED
 from sentry.integrations.repositories import RepositoryMixin
 from sentry.models import Repository
-from sentry.pipeline import NestedPipelineView, PipelineView
+from sentry.pipeline import PipelineView
 from sentry.tasks.integrations import migrate_repo
-from sentry.utils.http import absolute_uri
 
 from .client import GitHubAppsClient
 from .issues import GitHubIssueBasic
@@ -178,21 +176,9 @@ class GitHubIntegrationProvider(IntegrationProvider):
             )
 
     def get_pipeline_views(self):
-        identity_pipeline_config = {
-            "oauth_scopes": (),
-            "redirect_url": absolute_uri("/extensions/github/setup/"),
-        }
-
-        identity_pipeline_view = NestedPipelineView(
-            bind_key="identity",
-            provider_key="github",
-            pipeline_cls=IdentityProviderPipeline,
-            config=identity_pipeline_config,
-        )
+        return [GitHubInstallationRedirect()]
 
-        return [GitHubInstallationRedirect(), identity_pipeline_view]
-
-    def get_installation_info(self, access_token, installation_id):
+    def get_installation_info(self, installation_id):
         session = http.build_session()
         resp = session.get(
             "https://api.github.com/app/installations/%s" % installation_id,
@@ -204,28 +190,10 @@ class GitHubIntegrationProvider(IntegrationProvider):
         resp.raise_for_status()
         installation_resp = resp.json()
 
-        resp = session.get(
-            "https://api.github.com/user/installations",
-            params={"access_token": access_token},
-            headers={"Accept": "application/vnd.github.machine-man-preview+json"},
-        )
-        resp.raise_for_status()
-        user_installations_resp = resp.json()
-
-        # verify that user actually has access to the installation
-        for installation in user_installations_resp["installations"]:
-            if installation["id"] == installation_resp["id"]:
-                return installation_resp
-
-        return None
+        return installation_resp
 
     def build_integration(self, state):
-        identity = state["identity"]["data"]
-
-        user = get_user_info(identity["access_token"])
-        installation = self.get_installation_info(
-            identity["access_token"], state["installation_id"]
-        )
+        installation = self.get_installation_info(state["installation_id"])
 
         integration = {
             "name": installation["account"]["login"],
@@ -242,12 +210,6 @@ class GitHubIntegrationProvider(IntegrationProvider):
                 "domain_name": installation["account"]["html_url"].replace("https://", ""),
                 "account_type": installation["account"]["type"],
             },
-            "user_identity": {
-                "type": "github",
-                "external_id": user["id"],
-                "scopes": [],  # GitHub apps do not have user scopes
-                "data": {"access_token": identity["access_token"]},
-            },
         }
 
         if state.get("reinstall_id"):
diff --git a/tests/sentry/integrations/github/test_integration.py b/tests/sentry/integrations/github/test_integration.py
index 61358cd06b..f96188bc5d 100644
--- a/tests/sentry/integrations/github/test_integration.py
+++ b/tests/sentry/integrations/github/test_integration.py
@@ -1,23 +1,14 @@
 from __future__ import absolute_import
 
 import responses
-import six
 import sentry
 
 from mock import MagicMock
-from six.moves.urllib.parse import parse_qs, urlencode, urlparse
+from six.moves.urllib.parse import urlencode, urlparse
 
 from sentry.constants import ObjectStatus
 from sentry.integrations.github import GitHubIntegrationProvider
-from sentry.models import (
-    Identity,
-    IdentityProvider,
-    IdentityStatus,
-    Integration,
-    OrganizationIntegration,
-    Repository,
-    Project,
-)
+from sentry.models import Integration, OrganizationIntegration, Repository, Project
 from sentry.plugins import plugins
 from sentry.testutils import IntegrationTestCase
 from tests.sentry.plugins.testutils import register_mock_plugins, unregister_mock_plugins
@@ -49,20 +40,12 @@ class GitHubIntegrationTest(IntegrationTestCase):
         sentry.integrations.github.integration.get_jwt = MagicMock(return_value="jwt_token_1")
         sentry.integrations.github.client.get_jwt = MagicMock(return_value="jwt_token_1")
 
-        responses.add(
-            responses.POST,
-            "https://github.com/login/oauth/access_token",
-            json={"access_token": self.access_token},
-        )
-
         responses.add(
             responses.POST,
             self.base_url + "/installations/{}/access_tokens".format(self.installation_id),
             json={"token": self.access_token, "expires_at": self.expires_at},
         )
 
-        responses.add(responses.GET, self.base_url + "/user", json={"id": self.user_id})
-
         responses.add(
             responses.GET,
             self.base_url + "/installation/repositories",
@@ -89,12 +72,6 @@ class GitHubIntegrationTest(IntegrationTestCase):
             },
         )
 
-        responses.add(
-            responses.GET,
-            self.base_url + "/user/installations",
-            json={"installations": [{"id": self.installation_id}]},
-        )
-
         responses.add(responses.GET, self.base_url + "/repos/Test-Organization/foo/hooks", json=[])
 
     def assert_setup_flow(self):
@@ -110,42 +87,7 @@ class GitHubIntegrationTest(IntegrationTestCase):
             u"{}?{}".format(self.setup_path, urlencode({"installation_id": self.installation_id}))
         )
 
-        redirect = urlparse(resp["Location"])
-
-        assert resp.status_code == 302
-        assert redirect.scheme == "https"
-        assert redirect.netloc == "github.com"
-        assert redirect.path == "/login/oauth/authorize"
-
-        params = parse_qs(redirect.query)
-
-        assert params["state"]
-        assert params["redirect_uri"] == ["http://testserver/extensions/github/setup/"]
-        assert params["response_type"] == ["code"]
-        assert params["client_id"] == ["github-client-id"]
-
-        # Compact list values into singular values, since there's only ever one.
-        authorize_params = {k: v[0] for k, v in six.iteritems(params)}
-
-        resp = self.client.get(
-            u"{}?{}".format(
-                self.setup_path,
-                urlencode({"code": "oauth-code", "state": authorize_params["state"]}),
-            )
-        )
-
-        oauth_exchange = responses.calls[0]
-        req_params = parse_qs(oauth_exchange.request.body)
-
-        assert req_params["grant_type"] == ["authorization_code"]
-        assert req_params["code"] == ["oauth-code"]
-        assert req_params["redirect_uri"] == ["http://testserver/extensions/github/setup/"]
-        assert req_params["client_id"] == ["github-client-id"]
-        assert req_params["client_secret"] == ["github-client-secret"]
-
-        assert oauth_exchange.response.status_code == 200
-
-        auth_header = responses.calls[2].request.headers["Authorization"]
+        auth_header = responses.calls[0].request.headers["Authorization"]
         assert auth_header == "Bearer jwt_token_1"
 
         self.assertDialogSuccess(resp)
@@ -181,30 +123,6 @@ class GitHubIntegrationTest(IntegrationTestCase):
         # Doesn't touch Repositories not accessible by the new Integration
         assert Repository.objects.get(id=inaccessible_repo.id).integration_id is None
 
-    @responses.activate
-    def test_disables_plugin_when_fully_migrated(self):
-        project = Project.objects.create(organization_id=self.organization.id)
-
-        plugin = plugins.get("github")
-        plugin.enable(project)
-
-        # Accessible to new Integration
-        Repository.objects.create(
-            organization_id=self.organization.id,
-            name="Test-Organization/foo",
-            url="https://github.com/Test-Organization/foo",
-            provider="github",
-            external_id=123,
-            config={"name": "Test-Organization/foo"},
-        )
-
-        assert "github" in [p.slug for p in plugins.for_project(project)]
-
-        with self.tasks():
-            self.assert_setup_flow()
-
-        assert "github" not in [p.slug for p in plugins.for_project(project)]
-
     @responses.activate
     def test_basic_flow(self):
         with self.tasks():
@@ -228,32 +146,6 @@ class GitHubIntegrationTest(IntegrationTestCase):
         )
         assert oi.config == {}
 
-        idp = IdentityProvider.objects.get(type="github")
-        identity = Identity.objects.get(idp=idp, user=self.user, external_id=self.user_id)
-        assert identity.status == IdentityStatus.VALID
-        assert identity.data == {"access_token": self.access_token}
-
-    @responses.activate
-    def test_reassign_user(self):
-        self.assert_setup_flow()
-
-        # Associate the identity with a user that has a password.
-        # Identity should be relinked.
-        user2 = self.create_user()
-        Identity.objects.get().update(user=user2)
-        self.assert_setup_flow()
-        identity = Identity.objects.get()
-        assert identity.user == self.user
-
-        # Associate the identity with a user without a password.
-        # Identity should not be relinked.
-        user2.set_unusable_password()
-        user2.save()
-        Identity.objects.get().update(user=user2)
-        resp = self.assert_setup_flow()
-        assert '"success":false' in resp.content
-        assert "The provided GitHub account is linked to a different Sentry user" in resp.content
-
     @responses.activate
     def test_reinstall_flow(self):
         self._stub_github()
@@ -277,47 +169,15 @@ class GitHubIntegrationTest(IntegrationTestCase):
         # New Installation
         self.installation_id = "install_2"
 
-        resp = self.client.get(
-            u"{}?{}".format(self.setup_path, urlencode({"installation_id": self.installation_id}))
-        )
-
-        redirect = urlparse(resp["Location"])
-
-        assert resp.status_code == 302
-        assert redirect.scheme == "https"
-        assert redirect.netloc == "github.com"
-        assert redirect.path == "/login/oauth/authorize"
-
-        params = parse_qs(redirect.query)
-
-        assert params["state"]
-        assert params["redirect_uri"] == ["http://testserver/extensions/github/setup/"]
-        assert params["response_type"] == ["code"]
-        assert params["client_id"] == ["github-client-id"]
-
-        # Compact list values to make the rest of this easier
-        authorize_params = {k: v[0] for k, v in six.iteritems(params)}
-
         self._stub_github()
 
         resp = self.client.get(
-            u"{}?{}".format(
-                self.setup_path,
-                urlencode({"code": "oauth-code", "state": authorize_params["state"]}),
-            )
+            u"{}?{}".format(self.setup_path, urlencode({"installation_id": self.installation_id}))
         )
 
-        mock_access_token_request = responses.calls[0].request
-        req_params = parse_qs(mock_access_token_request.body)
-        assert req_params["grant_type"] == ["authorization_code"]
-        assert req_params["code"] == ["oauth-code"]
-        assert req_params["redirect_uri"] == ["http://testserver/extensions/github/setup/"]
-        assert req_params["client_id"] == ["github-client-id"]
-        assert req_params["client_secret"] == ["github-client-secret"]
-
         assert resp.status_code == 200
 
-        auth_header = responses.calls[2].request.headers["Authorization"]
+        auth_header = responses.calls[0].request.headers["Authorization"]
         assert auth_header == "Bearer jwt_token_1"
 
         integration = Integration.objects.get(provider=self.provider.key)
