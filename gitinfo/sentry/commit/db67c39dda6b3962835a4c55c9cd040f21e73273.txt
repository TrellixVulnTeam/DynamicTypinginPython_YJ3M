commit db67c39dda6b3962835a4c55c9cd040f21e73273
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Mar 3 21:24:07 2015 -0800

    Add organization details endpoints

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
new file mode 100644
index 0000000000..8fec358510
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -0,0 +1,99 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers, status
+from rest_framework.response import Response
+
+from sentry.api.base import DocSection
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.decorators import sudo_required
+from sentry.api.serializers import serialize
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, Organization, OrganizationStatus
+)
+from sentry.tasks.deletion import delete_organization
+
+
+class OrganizationSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Organization
+        fields = ('name', 'slug')
+
+    def validate_slug(self, attrs, source):
+        value = attrs[source]
+        if Organization.objects.filter(slug=value).exclude(id=self.object.id):
+            raise serializers.ValidationError('The slug "%s" is already in use.' % (value,))
+        return attrs
+
+
+class OrganizationDetailsEndpoint(OrganizationEndpoint):
+    doc_section = DocSection.ORGANIZATIONS
+
+    def get(self, request, organization):
+        """
+        Retrieve an organization
+
+        Return details on an individual organization.
+
+            {method} {path}
+
+        """
+        context = serialize(organization, request.user)
+
+        return Response(context)
+
+    @sudo_required
+    def put(self, request, organization):
+        """
+        Update an organization
+
+        Update various attributes and configurable settings for the given
+        organization.
+
+            {method} {path}
+            {{
+              "name": "My Organization Name"
+            }}
+
+        """
+        serializer = OrganizationSerializer(organization, data=request.DATA,
+                                            partial=True)
+        if serializer.is_valid():
+            organization = serializer.save()
+
+            AuditLogEntry.objects.create(
+                organization=organization,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=organization.id,
+                event=AuditLogEntryEvent.ORG_EDIT,
+                data=organization.get_audit_log_data(),
+            )
+
+            return Response(serialize(organization, request.user))
+
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+    @sudo_required
+    def delete(self, request, organization):
+        """
+        Delete an organization
+
+        Schedules an organization for deletion.
+
+            {method} {path}
+
+        **Note:** Deletion happens asynchronously and therefor is not immediate.
+        However once deletion has begun the state of a project changes and will
+        be hidden from most public views.
+        """
+        updated = Organization.objects.filter(
+            id=organization.id,
+            status=OrganizationStatus.VISIBLE,
+        ).update(status=OrganizationStatus.PENDING_DELETION)
+        if updated:
+            delete_organization.delay(
+                object_id=organization.id,
+                countdown=60 * 5,
+            )
+
+        return Response(status=204)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index feae5690d3..dcd44dee64 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -17,6 +17,7 @@ from .endpoints.group_tagkey_values import GroupTagKeyValuesEndpoint
 from .endpoints.helppage_details import HelpPageDetailsEndpoint
 from .endpoints.helppage_index import HelpPageIndexEndpoint
 from .endpoints.index import IndexEndpoint
+from .endpoints.organization_details import OrganizationDetailsEndpoint
 from .endpoints.organization_member_details import OrganizationMemberDetailsEndpoint
 from .endpoints.organization_projects import OrganizationProjectsEndpoint
 from .endpoints.organization_stats import OrganizationStatsEndpoint
@@ -56,6 +57,9 @@ urlpatterns = patterns(
         name='sentry-api-0-user-details'),
 
     # Organizations
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/$',
+        OrganizationDetailsEndpoint.as_view(),
+        name='sentry-api-0-organization-details'),
     url(r'^organizations/(?P<organization_slug>[^\/]+)/members/(?P<member_id>\d+)/$',
         OrganizationMemberDetailsEndpoint.as_view(),
         name='sentry-api-0-organization-member-details'),
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
new file mode 100644
index 0000000000..f3b6fe08ec
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -0,0 +1,91 @@
+from django.core.urlresolvers import reverse
+from mock import patch
+
+from sentry.models import (
+    OrganizationMemberType, Organization, OrganizationStatus
+)
+from sentry.testutils import APITestCase
+
+
+class OrganizationDetailsTest(APITestCase):
+    def test_simple(self):
+        org = self.create_organization(owner=self.user)
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-organization-details', kwargs={
+            'organization_slug': org.slug,
+        })
+        response = self.client.get(url)
+        assert response.status_code == 200
+        assert response.data['id'] == str(org.id)
+
+
+class OrganizationUpdateTest(APITestCase):
+    def test_simple(self):
+        org = self.create_organization(owner=self.user)
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-organization-details', kwargs={
+            'organization_slug': org.slug,
+        })
+        resp = self.client.put(url, data={
+            'name': 'hello world',
+            'slug': 'foobar',
+        })
+        assert resp.status_code == 200, resp.content
+        org = Organization.objects.get(id=org.id)
+        assert org.name == 'hello world'
+        assert org.slug == 'foobar'
+
+
+class OrganizationDeleteTest(APITestCase):
+    @patch('sentry.api.endpoints.organization_details.delete_organization')
+    def test_as_owner(self, mock_delete_organization):
+        org = self.create_organization()
+
+        user = self.create_user(email='foo@example.com', is_superuser=False)
+
+        org.member_set.create(
+            user=user,
+            has_global_access=True,
+            type=OrganizationMemberType.OWNER,
+        )
+
+        self.login_as(user)
+
+        url = reverse('sentry-api-0-organization-details', kwargs={
+            'organization_slug': org.slug,
+        })
+
+        response = self.client.delete(url)
+
+        org = Organization.objects.get(id=org.id)
+
+        assert response.status_code == 204, response.data
+
+        assert org.status == OrganizationStatus.PENDING_DELETION
+
+        mock_delete_organization.delay.assert_called_once_with(
+            object_id=org.id,
+            countdown=60 * 5,
+        )
+
+    def test_as_admin(self):
+        org = self.create_organization(owner=self.user)
+
+        user = self.create_user(email='foo@example.com', is_superuser=False)
+
+        org.member_set.create_or_update(
+            organization=org,
+            user=user,
+            defaults={
+                'type': OrganizationMemberType.ADMIN,
+            }
+        )
+
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-organization-details', kwargs={
+            'organization_slug': org.slug,
+        })
+        response = self.client.delete(url)
+
+        assert response.status_code == 403
