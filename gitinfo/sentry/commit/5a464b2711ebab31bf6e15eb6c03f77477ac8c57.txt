commit 5a464b2711ebab31bf6e15eb6c03f77477ac8c57
Author: James Cunningham <cunninghamjt09@gmail.com>
Date:   Mon Jun 20 11:21:22 2016 -0700

    Json renderer for machine logging format. (#3516)
    
    * Take value only from disk.
    
    * Add json renderer for machine logging format.

diff --git a/src/sentry/logging/formatters.py b/src/sentry/logging/formatters.py
deleted file mode 100644
index 54c4ed6434..0000000000
--- a/src/sentry/logging/formatters.py
+++ /dev/null
@@ -1,31 +0,0 @@
-"""
-sentry.logging.formatters
-~~~~~~~~~~~~~~~~~~~~~~~~~
-:copyright: (c) 2010-2016 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from __future__ import absolute_import
-
-from logging import Formatter
-from traceback import format_tb
-
-from django.utils.encoding import force_bytes
-from msgpack import packb
-
-
-class MessagePackFormatter(Formatter):
-    """
-    Return a packed dictionary.
-
-    Will pack the dictionary or the String representation of the message.
-    """
-    def format(self, record):
-        pack = record.msg if isinstance(record.msg, dict) else {
-            'msg': force_bytes(record.msg, errors='replace')
-        }
-        pack['levelname'] = record.levelname
-        if record.exc_info:
-            pack['traceback'] = format_tb(record.exc_info[-1])
-
-        return packb(pack)
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 8f20a503e0..482a667c76 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -27,7 +27,7 @@ register('system.secret-key', flags=FLAG_NOSTORE)
 # Absolute URL to the sentry root directory. Should not include a trailing slash.
 register('system.url-prefix', ttl=60, grace=3600, flags=FLAG_REQUIRED | FLAG_PRIORITIZE_DISK)
 register('system.root-api-key', flags=FLAG_PRIORITIZE_DISK)
-register('system.logging-format', default=LoggingFormat.HUMAN, flags=FLAG_PRIORITIZE_DISK)
+register('system.logging-format', default=LoggingFormat.HUMAN, flags=FLAG_NOSTORE)
 
 # Redis
 register(
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 3c9bd26229..0849abe4b0 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -155,24 +155,41 @@ def configure_structlog():
     Make structlog comply with all of our options.
     """
     import structlog
+    from sentry import options
+    from sentry.logging import LoggingFormat
     WrappedDictClass = structlog.threadlocal.wrap_dict(dict)
-    structlog.configure(
-        processors=[
+    kwargs = {
+        'context_class': WrappedDictClass,
+        'wrapper_class': structlog.stdlib.BoundLogger,
+        'cache_logger_on_first_use': True,
+        'processors': [
             structlog.stdlib.add_log_level,
             structlog.stdlib.PositionalArgumentsFormatter(),
-            structlog.processors.StackInfoRenderer(),
             structlog.processors.format_exc_info,
+            structlog.processors.StackInfoRenderer(),
+        ]
+    }
+    fmt = options.get('system.logging-format')
+    if fmt == LoggingFormat.HUMAN:
+        kwargs['processors'].extend([
             structlog.processors.ExceptionPrettyPrinter(),
-            structlog.processors.KeyValueRenderer(key_order=[
-                'name',
-                'level',
-                'event',
-            ])
-        ],
-        context_class=WrappedDictClass,
-        wrapper_class=structlog.stdlib.BoundLogger,
-        cache_logger_on_first_use=True,
-    )
+            structlog.processors.KeyValueRenderer(
+                key_order=[
+                    'name',
+                    'level',
+                    'event',
+                ]
+            )
+        ])
+    elif fmt == LoggingFormat.MACHINE:
+        from sentry.utils.json import dumps
+        kwargs['processors'].append(
+            structlog.processors.JSONRenderer(
+                serializer=dumps
+            )
+        )
+
+    structlog.configure(**kwargs)
 
 
 def initialize_app(config, skip_backend_validation=False):
