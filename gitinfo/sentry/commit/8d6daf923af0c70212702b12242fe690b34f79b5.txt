commit 8d6daf923af0c70212702b12242fe690b34f79b5
Author: Ted Kaemming <ted@kaemming.com>
Date:   Thu Oct 1 10:27:33 2015 -0700

    Make Lock recipe explicitly not reentrant.

diff --git a/src/sentry/utils/cache.py b/src/sentry/utils/cache.py
index 58bf8063ba..3eb450bb31 100644
--- a/src/sentry/utils/cache.py
+++ b/src/sentry/utils/cache.py
@@ -23,6 +23,10 @@ class UnableToGetLock(Exception):
     pass
 
 
+class LockAlreadyHeld(UnableToGetLock):
+    pass
+
+
 class Lock(object):
     """
     Uses the defined cache backend to create a lock.
@@ -54,12 +58,9 @@ class Lock(object):
         # compatible in the future, but that would also require changes to the
         # the constructor: https://docs.python.org/2/library/threading.html#lock-objects
 
-        # XXX: This can lead to unexpected behavior, since the timeout is not
-        # correct -- maybe this should be an exception?
         time_remaining = self.seconds_remaining
         if time_remaining:
-            logger.warning('Tried to acquire lock that is already held, %.3fs remaining: %r', time_remaining, self)
-            return True
+            raise LockAlreadyHeld('Tried to acquire lock that is already held, %.3fs remaining: %r' % (time_remaining, self))
 
         started_at = time()
         self.__acquired_at = None
diff --git a/tests/sentry/utils/test_cache.py b/tests/sentry/utils/test_cache.py
index a5c07e4b87..b6e39b3485 100644
--- a/tests/sentry/utils/test_cache.py
+++ b/tests/sentry/utils/test_cache.py
@@ -7,6 +7,7 @@ import pytest
 from sentry.testutils import TestCase
 from sentry.utils.cache import (
     Lock,
+    LockAlreadyHeld,
     UnableToGetLock,
 )
 
@@ -23,7 +24,8 @@ class LockTestCase(TestCase):
         assert timeout > lock.seconds_remaining > (timeout - 0.1)
         assert lock.held is True
 
-        assert lock.acquire() is True  # ensure reentrancy
+        with pytest.raises(LockAlreadyHeld):
+            lock.acquire()
 
         assert lock.release() is True
         assert lock.seconds_remaining is 0
