commit c2094efbe6deb1248471847f99b1bb8271932c6e
Author: Mark Story <mark@sentry.io>
Date:   Mon Apr 13 10:13:52 2020 -0400

    fix(discover) Improve the column editor for tags (#18139)
    
    When custom tags overlap our standard fields or functions the current
    experience is not great. The selected state doesn't reflect that the
    value is a tag, and the selected column is also incorrect. This set of
    changes fixes both those problems, and widens the modal so that there is
    room to display the tag badges.

diff --git a/docs-ui/components/columnEditor.stories.js b/docs-ui/components/columnEditor.stories.js
index 10f9cc9582..ecc64e35c9 100644
--- a/docs-ui/components/columnEditor.stories.js
+++ b/docs-ui/components/columnEditor.stories.js
@@ -6,7 +6,7 @@ import {action} from '@storybook/addon-actions';
 import {openModal} from 'app/actionCreators/modal';
 import Button from 'app/components/button';
 import GlobalModal from 'app/components/globalModal';
-import ColumnEditModal from 'app/views/eventsV2/table/columnEditModal';
+import ColumnEditModal, {modalCss} from 'app/views/eventsV2/table/columnEditModal';
 
 storiesOf('Discover|ColumnEditor', module).add(
   'all',
@@ -17,51 +17,59 @@ storiesOf('Discover|ColumnEditor', module).add(
       slug: 'test-org',
       features: ['transaction-events'],
     };
-    const tags = ['browser.name', 'custom-field'];
+    const tags = ['browser.name', 'custom-field', 'project'];
     const columns = [
       {
+        kind: 'field',
         field: 'event.type',
       },
       {
+        kind: 'field',
         field: 'browser.name',
       },
       {
-        field: 'id',
-        aggregation: 'count',
+        kind: 'function',
+        function: ['count', 'id'],
       },
       {
-        field: 'title',
-        aggregation: 'count_unique',
+        kind: 'function',
+        function: ['count_unique', 'title'],
       },
       {
-        field: '',
-        aggregation: 'p95',
+        kind: 'function',
+        function: ['p95'],
       },
       {
+        kind: 'field',
         field: 'issue.id',
-        aggregation: '',
       },
       {
-        field: 'issue.id',
-        aggregation: 'count_unique',
+        kind: 'function',
+        function: ['count_unique', 'issue.id'],
+      },
+      {
+        kind: 'function',
+        function: ['percentile', 'transaction.duration', '0.81'],
       },
       {
-        refinement: '0.81',
-        field: 'transaction.duration',
-        aggregation: 'percentile',
+        kind: 'field',
+        field: 'tags[project]',
       },
     ];
 
     const showModal = () => {
-      openModal(modalProps => (
-        <ColumnEditModal
-          {...modalProps}
-          organization={organization}
-          tagKeys={tags}
-          columns={columns}
-          onApply={action('onApply')}
-        />
-      ));
+      openModal(
+        modalProps => (
+          <ColumnEditModal
+            {...modalProps}
+            organization={organization}
+            tagKeys={tags}
+            columns={columns}
+            onApply={action('onApply')}
+          />
+        ),
+        {modalCss}
+      );
     };
 
     return (
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
index 2a347b4abe..76d5a85ee7 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
@@ -134,11 +134,15 @@ class ColumnEditCollection extends React.Component<Props, State> {
 
     if (tagKeys !== null) {
       tagKeys.forEach(tag => {
+        const tagValue =
+          FIELDS.hasOwnProperty(tag) || AGGREGATIONS.hasOwnProperty(tag)
+            ? `tags[${tag}]`
+            : tag;
         fieldOptions[`tag:${tag}`] = {
           label: tag,
           value: {
             kind: FieldValueKind.TAG,
-            meta: {name: tag, dataType: 'string'},
+            meta: {name: tagValue, dataType: 'string'},
           },
         };
       });
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditModal.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditModal.tsx
index 3b762e5225..d4b8ad631a 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditModal.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditModal.tsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import {css} from '@emotion/core';
 import styled from '@emotion/styled';
 
 import Button from 'app/components/button';
@@ -8,6 +9,7 @@ import {ModalRenderProps} from 'app/actionCreators/modal';
 import {t} from 'app/locale';
 import {OrganizationSummary} from 'app/types';
 import space from 'app/styles/space';
+import theme from 'app/utils/theme';
 import {Column} from 'app/utils/discover/fields';
 
 import ColumnEditCollection from './columnEditCollection';
@@ -77,4 +79,15 @@ const Instruction = styled('div')`
   margin-bottom: ${space(3)};
 `;
 
+const modalCss = css`
+  @media (min-width: ${theme.breakpoints[0]}) {
+    .modal-dialog {
+      width: auto;
+      max-width: 875px;
+      margin-left: -437px;
+    }
+  }
+`;
+
 export default ColumnEditModal;
+export {modalCss};
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
index c8e9a688bb..1b5dfef4be 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
@@ -1,6 +1,8 @@
-import React from 'react';
+import React, {CSSProperties} from 'react';
 import styled from '@emotion/styled';
-import {components} from 'react-select';
+// eslint import checks can't find types in the flow code.
+// eslint-disable-next-line import/named
+import {components, SingleValueProps, OptionProps} from 'react-select';
 import cloneDeep from 'lodash/cloneDeep';
 
 import Badge from 'app/components/badge';
@@ -40,6 +42,12 @@ type Props = {
   onChange: (index: number, column: Column) => void;
 };
 
+// Type for completing generics in react-select
+type OptionType = {
+  label: string;
+  value: FieldValue;
+};
+
 class ColumnEditRow extends React.Component<Props> {
   handleFieldChange = ({value}) => {
     const current = this.props.column;
@@ -126,10 +134,14 @@ class ColumnEditRow extends React.Component<Props> {
     }
 
     const fieldName = `field:${name}`;
-    const tagName = `tag:${name}`;
     if (fieldOptions[fieldName]) {
       return fieldOptions[fieldName].value;
     }
+    const tagName =
+      name.indexOf('tags[') === 0
+        ? `tag:${name.replace(/tags\[(.*?)\]/, '$1')}`
+        : `tag:${name}`;
+
     if (fieldOptions[tagName]) {
       return fieldOptions[tagName].value;
     }
@@ -320,20 +332,45 @@ class ColumnEditRow extends React.Component<Props> {
       selectProps.autoFocus = true;
     }
 
+    const styles = {
+      singleValue(provided: CSSProperties) {
+        const custom = {
+          display: 'flex',
+          justifyContent: 'space-between',
+          alignItems: 'center',
+          width: 'calc(100% - 10px)',
+        };
+        return {...provided, ...custom};
+      },
+      option(provided: CSSProperties) {
+        const custom = {
+          display: 'flex',
+          justifyContent: 'space-between',
+          alignItems: 'center',
+          width: '100%',
+        };
+        return {...provided, ...custom};
+      },
+    };
+
     return (
       <Container className={className} gridColumns={gridColumns}>
         <SelectControl
           {...selectProps}
+          styles={styles}
           components={{
-            Option: ({label, value, ...props}) => (
-              //TODO(TS): stop typing props as any
+            Option: ({label, data, ...props}: OptionProps<OptionType>) => (
               <components.Option label={label} {...(props as any)}>
-                <Label>
-                  {label}
-                  {value.kind === FieldValueKind.TAG && <Badge text="tag" />}
-                </Label>
+                <span data-test-id="label">{label}</span>
+                {data.value.kind === FieldValueKind.TAG && <Badge text="tag" />}
               </components.Option>
             ),
+            SingleValue: ({data, ...props}: SingleValueProps<OptionType>) => (
+              <components.SingleValue data={data} {...(props as any)}>
+                <span data-test-id="label">{data.label}</span>
+                {data.value.kind === FieldValueKind.TAG && <Badge text="tag" />}
+              </components.SingleValue>
+            ),
           }}
         />
         {this.renderParameterInputs(parameterDescriptions)}
@@ -351,13 +388,6 @@ const Container = styled('div')<{gridColumns: number}>`
   flex-grow: 1;
 `;
 
-const Label = styled('span')`
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-  width: 100%;
-`;
-
 type InputProps = React.HTMLProps<HTMLInputElement> & {
   onUpdate: (value: string) => void;
   value: string;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
index 59c62c8d82..96edd0f945 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
@@ -21,7 +21,7 @@ import {generateEventSlug, eventDetailsRouteWithEventView} from 'app/utils/disco
 
 import {downloadAsCsv, getExpandedResults, pushEventViewToLocation} from '../utils';
 import SortLink from '../sortLink';
-import ColumnEditModal from './columnEditModal';
+import ColumnEditModal, {modalCss} from './columnEditModal';
 import {TableColumn, TableData, TableDataRow} from './types';
 import HeaderCell from './headerCell';
 import CellAction from './cellAction';
@@ -203,15 +203,18 @@ class TableView extends React.Component<TableViewProps> {
     const {organization, eventView, tagKeys} = this.props;
     this.trackEditAnalytics(organization, true);
 
-    openModal(modalProps => (
-      <ColumnEditModal
-        {...modalProps}
-        organization={organization}
-        tagKeys={tagKeys}
-        columns={eventView.getColumns().map(col => col.column)}
-        onApply={this.handleUpdateColumns}
-      />
-    ));
+    openModal(
+      modalProps => (
+        <ColumnEditModal
+          {...modalProps}
+          organization={organization}
+          tagKeys={tagKeys}
+          columns={eventView.getColumns().map(col => col.column)}
+          onApply={this.handleUpdateColumns}
+        />
+      ),
+      {modalCss}
+    );
   };
 
   handleUpdateColumns = (columns: Column[]): void => {
diff --git a/tests/js/spec/views/eventsV2/table/columnEditModal.spec.js b/tests/js/spec/views/eventsV2/table/columnEditModal.spec.js
index c4541193b4..e973a70714 100644
--- a/tests/js/spec/views/eventsV2/table/columnEditModal.spec.js
+++ b/tests/js/spec/views/eventsV2/table/columnEditModal.spec.js
@@ -102,21 +102,52 @@ describe('EventsV2 -> ColumnEditModal', function() {
 
     it('renders unknown fields in field and field parameter controls', function() {
       const funcRow = wrapper.find('ColumnEditRow').first();
-      expect(funcRow.find('SelectControl[name="field"] SingleValue').text()).toBe(
-        'count_unique(\u2026)'
-      );
+      expect(
+        funcRow.find('SelectControl[name="field"] [data-test-id="label"]').text()
+      ).toBe('count_unique(\u2026)');
       expect(funcRow.find('SelectControl[name="parameter"] SingleValue').text()).toBe(
         'user-defined'
       );
 
       const fieldRow = wrapper.find('ColumnEditRow').last();
-      expect(fieldRow.find('SelectControl[name="field"] SingleValue').text()).toBe(
-        'user-def'
-      );
+      expect(
+        fieldRow.find('SelectControl[name="field"] span[data-test-id="label"]').text()
+      ).toBe('user-def');
+      expect(fieldRow.find('SelectControl[name="field"] Badge')).toHaveLength(1);
       expect(fieldRow.find('StyledInput[disabled]')).toHaveLength(1);
     });
   });
 
+  describe('rendering tags that overlap fields & functions', function() {
+    const wrapper = mountModal(
+      {
+        columns: [
+          {kind: 'field', field: 'tags[project]'},
+          {kind: 'field', field: 'tags[count]'},
+        ],
+        onApply: () => void 0,
+        tagKeys: ['project', 'count'],
+      },
+      initialData
+    );
+
+    it('selects tag expressions that overlap fields', function() {
+      const funcRow = wrapper.find('ColumnEditRow').first();
+      expect(
+        funcRow.find('SelectControl[name="field"] span[data-test-id="label"]').text()
+      ).toBe('project');
+      expect(funcRow.find('SelectControl[name="field"] Badge')).toHaveLength(1);
+    });
+
+    it('selects tag expressions that overlap functions', function() {
+      const funcRow = wrapper.find('ColumnEditRow').last();
+      expect(
+        funcRow.find('SelectControl[name="field"] span[data-test-id="label"]').text()
+      ).toBe('count');
+      expect(funcRow.find('SelectControl[name="field"] Badge')).toHaveLength(1);
+    });
+  });
+
   describe('rendering functions', function() {
     const wrapper = mountModal(
       {
