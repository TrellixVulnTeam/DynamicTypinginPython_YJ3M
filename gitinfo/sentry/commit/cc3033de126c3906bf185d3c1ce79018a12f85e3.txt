commit cc3033de126c3906bf185d3c1ce79018a12f85e3
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Nov 22 16:17:44 2014 -0800

    Update team_details deletion behavior

diff --git a/src/sentry/api/endpoints/team_details.py b/src/sentry/api/endpoints/team_details.py
index bafb2651b8..222c9ce874 100644
--- a/src/sentry/api/endpoints/team_details.py
+++ b/src/sentry/api/endpoints/team_details.py
@@ -8,8 +8,8 @@ from sentry.api.base import Endpoint
 from sentry.api.decorators import sudo_required
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.constants import MEMBER_ADMIN, RESERVED_TEAM_SLUGS
-from sentry.models import Team, TeamStatus
+from sentry.constants import RESERVED_TEAM_SLUGS
+from sentry.models import OrganizationMemberType, Team, TeamStatus
 from sentry.tasks.deletion import delete_team
 
 
@@ -47,7 +47,7 @@ class TeamDetailsEndpoint(Endpoint):
     def put(self, request, team_id):
         team = Team.objects.get(id=team_id)
 
-        assert_perm(team, request.user, request.auth, access=MEMBER_ADMIN)
+        assert_perm(team, request.user, request.auth, access=OrganizationMemberType.ADMIN)
 
         # TODO(dcramer): this permission logic is duplicated from the
         # transformer
@@ -66,15 +66,12 @@ class TeamDetailsEndpoint(Endpoint):
     def delete(self, request, team_id):
         team = Team.objects.get(id=team_id)
 
-        assert_perm(team, request.user, request.auth, access=MEMBER_ADMIN)
+        assert_perm(team, request.user, request.auth, access=OrganizationMemberType.ADMIN)
 
         if team.project_set.filter(id=settings.SENTRY_PROJECT).exists():
             return Response('{"error": "Cannot remove team containing default project."}',
                             status=status.HTTP_403_FORBIDDEN)
 
-        if not (request.user.is_superuser or team.owner_id == request.user.id):
-            return Response('{"error": "You do not have permission to remove this team."}', status=status.HTTP_403_FORBIDDEN)
-
         team.update(status=TeamStatus.PENDING_DELETION)
 
         # we delay the task for 5 minutes so we can implement an undo
diff --git a/tests/sentry/api/endpoints/test_team_details.py b/tests/sentry/api/endpoints/test_team_details.py
index 4ca11d26eb..b66172d0a7 100644
--- a/tests/sentry/api/endpoints/test_team_details.py
+++ b/tests/sentry/api/endpoints/test_team_details.py
@@ -1,7 +1,9 @@
 from django.core.urlresolvers import reverse
 from mock import patch
 
-from sentry.models import OrganizationMemberType, Team, TeamStatus
+from sentry.models import (
+    OrganizationMemberType, Team, TeamStatus
+)
 from sentry.testutils import APITestCase
 
 
@@ -43,16 +45,16 @@ class TeamUpdateTest(APITestCase):
 class TeamDeleteTest(APITestCase):
     @patch('sentry.api.endpoints.team_details.delete_team')
     def test_as_admin(self, delete_team):
-        team = self.create_team()
+        org = self.create_organization()
+        team = self.create_team(organization=org)
         project = self.create_project(team=team)  # NOQA
 
         user = self.create_user(email='foo@example.com', is_superuser=False)
 
-        team.organization.member_set.create_or_update(
+        org.member_set.create(
             user=user,
-            defaults={
-                'type': OrganizationMemberType.ADMIN,
-            }
+            has_global_access=True,
+            type=OrganizationMemberType.ADMIN,
         )
 
         self.login_as(user)
@@ -64,9 +66,10 @@ class TeamDeleteTest(APITestCase):
 
         team = Team.objects.get(id=team.id)
 
+        assert response.status_code == 204, response.data
+
         assert team.status == TeamStatus.PENDING_DELETION
 
-        assert response.status_code == 204
         delete_team.apply_async.assert_called_once_with(
             kwargs={"object_id": team.id},
             countdown=60 * 5,
