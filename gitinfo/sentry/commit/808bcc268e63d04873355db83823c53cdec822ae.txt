commit 808bcc268e63d04873355db83823c53cdec822ae
Author: William Mak <william@wmak.io>
Date:   Thu Mar 19 16:12:41 2020 -0400

    fix(discover) - Fix csv download for users
    
    - The user field has to map to all the subfields, and do so in the same
      order as our userbadge for consistency
    - Adding tests for the downloadAsCsv

diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 671b2a5516..f799681b7a 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -303,6 +303,16 @@ export function downloadAsCsv(tableData, columnOrder, filename) {
     data: data.map(row =>
       headings.map(col => {
         col = getAggregateAlias(col);
+        // This needs to match the order done in the userBadge component
+        if (col === 'user') {
+          return disableMacros(
+            row['user.name'] ||
+              row['user.email'] ||
+              row['user.username'] ||
+              row['user.ipAddress'] ||
+              row['user.ip_address']
+          );
+        }
         return disableMacros(row[col]);
       })
     ),
@@ -318,6 +328,9 @@ export function downloadAsCsv(tableData, columnOrder, filename) {
   link.setAttribute('download', `${filename} ${getUtcDateString(now)}.csv`);
   link.click();
   link.remove();
+
+  // Make testing easier
+  return encodedDataUrl;
 }
 
 // A map between a field alias to a transform function to convert the aggregated field alias into
diff --git a/tests/js/spec/views/eventsV2/utils.spec.jsx b/tests/js/spec/views/eventsV2/utils.spec.jsx
index 7be3be6c1c..049993bcfa 100644
--- a/tests/js/spec/views/eventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/utils.spec.jsx
@@ -13,6 +13,7 @@ import {
   getDiscoverLandingUrl,
   explodeField,
   hasAggregateField,
+  downloadAsCsv,
 } from 'app/views/eventsV2/utils';
 import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable';
 
@@ -570,3 +571,49 @@ describe('hasAggregateField', function() {
     expect(hasAggregateField(eventView)).toBe(true);
   });
 });
+
+describe('downloadAsCsv', function() {
+  const messageColumn = {name: 'message'};
+  const environmentColumn = {name: 'environment'};
+  const countColumn = {name: 'count'};
+  const userColumn = {name: 'user'};
+  it('handles raw data', function() {
+    const result = {
+      data: [
+        {message: 'test 1', environment: 'prod'},
+        {message: 'test 2', environment: 'test'},
+      ],
+    };
+    expect(downloadAsCsv(result, [messageColumn, environmentColumn])).toContain(
+      encodeURIComponent('message,environment\r\ntest 1,prod\r\ntest 2,test')
+    );
+  });
+  it('handles aggregations', function() {
+    const result = {
+      data: [{count: 3}],
+    };
+    expect(downloadAsCsv(result, [countColumn])).toContain(encodeURI('count\r\n3'));
+  });
+  it('quotes unsafe strings', function() {
+    const result = {
+      data: [{message: '=HYPERLINK(http://some-bad-website#)'}],
+    };
+    expect(downloadAsCsv(result, [messageColumn])).toContain(
+      encodeURIComponent("message\r\n'=HYPERLINK(http://some-bad-website#)")
+    );
+  });
+  it('handles the user column', function() {
+    const result = {
+      data: [
+        {message: 'test 1', 'user.name': 'foo'},
+        {message: 'test 2', 'user.name': 'bar', 'user.ip_address': '127.0.0.1'},
+        {message: 'test 3', 'user.email': 'foo@example.com', 'user.username': 'foo'},
+      ],
+    };
+    expect(downloadAsCsv(result, [messageColumn, userColumn])).toContain(
+      encodeURIComponent(
+        'message,user\r\ntest 1,foo\r\ntest 2,bar\r\ntest 3,foo@example.com'
+      )
+    );
+  });
+});
