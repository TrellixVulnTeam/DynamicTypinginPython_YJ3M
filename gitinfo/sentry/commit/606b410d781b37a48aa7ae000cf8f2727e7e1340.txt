commit 606b410d781b37a48aa7ae000cf8f2727e7e1340
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Oct 18 12:53:13 2011 -0700

    When multiple messages are found w/ the same checksum, show a list of results

diff --git a/sentry/web/views.py b/sentry/web/views.py
index 8aed1ee1a5..312ea131f1 100644
--- a/sentry/web/views.py
+++ b/sentry/web/views.py
@@ -146,17 +146,17 @@ def search(request):
         result = message_re.match(query)
         if result:
             # Forward to message if it exists
-            message_id = result.group(1)
+            # message_id = result.group(1)
             checksum = result.group(2)
-            try:
-                message = GroupedMessage.objects.get(checksum=checksum)
-            except GroupedMessage.DoesNotExist:
+            message_list = GroupedMessage.objects.filter(checksum=checksum)
+            top_matches = message_list[:2]
+            if len(top_matches) == 0:
                 if not has_search:
                     return render_to_response('sentry/invalid_message_id.html')
                 else:
                     message_list = get_search_query_set(query)
-            else:
-                return HttpResponseRedirect(message.get_absolute_url())
+            elif len(top_matches) == 1:
+                return HttpResponseRedirect(top_matches[0].get_absolute_url())
         elif uuid_re.match(query):
             # Forward to message if it exists
             try:
diff --git a/tests/tests.py b/tests/tests.py
index bb6bd66e2b..1e5db4b3d7 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -1586,6 +1586,45 @@ class SentrySearchTest(TestCase):
         self.assertEquals(qs.count(), 1)
         self.assertEquals(qs[0:1][0].message, 'test search error')
 
+    def test_checksum_query(self):
+        checksum = 'a'*32
+        g = GroupedMessage.objects.create(
+            logger='root',
+            view='a',
+            checksum=checksum,
+            message='hi',
+        )
+
+        with Settings(SENTRY_PUBLIC=True):
+            response = self.client.get(reverse('sentry-search'), {'q': '%s$%s' % (checksum, checksum)})
+            self.assertEquals(response.status_code, 302)
+            self.assertEquals(response['Location'], 'http://testserver%s' % (g.get_absolute_url(),))
+
+    def test_dupe_checksum(self):
+        checksum = 'a'*32
+        g1 = GroupedMessage.objects.create(
+            logger='root',
+            view='a',
+            checksum=checksum,
+            message='hi',
+        )
+        g2 = GroupedMessage.objects.create(
+            logger='root',
+            view='b',
+            checksum=checksum,
+            message='hi',
+        )
+
+        with Settings(SENTRY_PUBLIC=True):
+            response = self.client.get(reverse('sentry-search'), {'q': '%s$%s' % (checksum, checksum)})
+            self.assertEquals(response.status_code, 200)
+            self.assertTemplateUsed(response, 'sentry/search.html')
+            context = response.context
+            self.assertTrue('message_list' in context)
+            self.assertEquals(len(context['message_list']), 2)
+            self.assertTrue(g1 in context['message_list'])
+            self.assertTrue(g2 in context['message_list'])
+
 class SentryPluginTest(TestCase):
     def test_registration(self):
         from sentry.plugins import GroupActionProvider
