commit 93ec4699aae591cddd009820f0e6c5aef806a055
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Mon Oct 28 17:41:46 2019 -0400

    feat(discover2): Add columns in-between columns (#15156)
    
    Closes SEN-1172

diff --git a/.vscode/settings.json b/.vscode/settings.json
index 0afbac77fb..23078470ba 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -66,6 +66,6 @@
   "restructuredtext.confPath": "",
   "python.linting.enabled": true,
   "python.linting.flake8Path": "${workspaceFolder}/.venv/bin/flake8",
-  "python.linting.pep8Path": "${workspaceFolder}/.venv/bin/pep8",
+  "python.linting.pycodestylePath": "${workspaceFolder}/.venv/bin/pep8",
   "python.testing.pytestPath": "${workspaceFolder}/.venv/bin/pytest"
 }
diff --git a/src/sentry/static/sentry/app/components/gridEditable/addColumnButton.tsx b/src/sentry/static/sentry/app/components/gridEditable/addColumnButton.tsx
new file mode 100644
index 0000000000..bed82a4336
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/gridEditable/addColumnButton.tsx
@@ -0,0 +1,71 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t} from 'app/locale';
+import ToolTip from 'app/components/tooltip';
+import InlineSvg from 'app/components/inlineSvg';
+
+import {GRID_HEADER_HEIGHT, Z_INDEX_ADD_COLUMN, ADD_BUTTON_SIZE} from './styles';
+
+type Props = {
+  onClick: () => void;
+  align: 'left' | 'right';
+  ['data-test-id']: string;
+};
+
+const AddColumnButton = (props: Props) => {
+  const {onClick, align} = props;
+
+  let style;
+
+  if (align === 'right') {
+    style = {
+      right: `-${ADD_BUTTON_SIZE / 2}px`,
+    };
+  } else {
+    style = {
+      left: `-${ADD_BUTTON_SIZE + (12 - ADD_BUTTON_SIZE / 2)}px`,
+    };
+  }
+
+  return (
+    <Wrapper onClick={onClick} data-test-id={props['data-test-id']} style={style}>
+      <ToolTip title={t('Add Column')}>
+        <AddButtonWrap>
+          <InlineSvg
+            src="icon-circle-add"
+            data-test-id="grid-column-add"
+            style={{position: 'absolute'}}
+          />
+        </AddButtonWrap>
+      </ToolTip>
+    </Wrapper>
+  );
+};
+
+const Wrapper = styled('div')`
+  height: ${GRID_HEADER_HEIGHT}px;
+  width: ${ADD_BUTTON_SIZE}px;
+
+  cursor: pointer;
+
+  position: absolute;
+  top: 0;
+
+  z-index: ${Z_INDEX_ADD_COLUMN};
+
+  color: ${p => p.theme.gray2};
+  &:hover {
+    color: ${p => p.theme.gray3};
+  }
+`;
+
+const AddButtonWrap = styled('div')`
+  width: ${ADD_BUTTON_SIZE}px;
+  height: ${GRID_HEADER_HEIGHT}px;
+
+  display: flex;
+  align-items: center;
+`;
+
+export default AddColumnButton;
diff --git a/src/sentry/static/sentry/app/components/gridEditable/gridHeadCell.tsx b/src/sentry/static/sentry/app/components/gridEditable/gridHeadCell.tsx
index 9f8820e057..4b2b3f1d4d 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/gridHeadCell.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/gridHeadCell.tsx
@@ -13,10 +13,12 @@ import {
   GridHeadCellResizer,
 } from './styles';
 import {GridColumnHeader} from './types';
+import AddColumnButton from './addColumnButton';
 
 export type GridHeadCellProps<Column> = {
   isColumnDragging: boolean;
   gridHeadCellButtonProps: {[prop: string]: any};
+  isLast: boolean;
 
   isEditing: boolean;
   isPrimary: boolean;
@@ -25,6 +27,8 @@ export type GridHeadCellProps<Column> = {
   column: Column;
   children: React.ReactNode | React.ReactChild;
 
+  openModalAddColumnAt: (insertIndex: number) => void;
+
   actions: {
     moveColumnCommit: (indexFrom: number, indexTo: number) => void;
     onDragStart: (
@@ -118,27 +122,64 @@ class GridHeadCell<Column extends GridColumnHeader> extends React.Component<
     );
   }
 
+  renderResizeGrabbable = () => {
+    const {isEditing} = this.props;
+
+    if (!FLAG_GRID_RESIZABLE || !isEditing) {
+      return null;
+    }
+
+    return <GridHeadCellResizer isEditing={isEditing} />;
+  };
+
+  renderAddColumnButton = () => {
+    const {
+      isEditing,
+      isLast,
+      openModalAddColumnAt,
+      indexColumnOrder,
+      isColumnDragging,
+    } = this.props;
+
+    if (isLast || !isEditing || isColumnDragging) {
+      return null;
+    }
+
+    return (
+      <AddColumnButton
+        align="right"
+        onClick={() => {
+          const insertIndex = indexColumnOrder + 1;
+          openModalAddColumnAt(insertIndex);
+        }}
+        data-test-id={`grid-add-column-${indexColumnOrder}`}
+      />
+    );
+  };
+
   render() {
     const {isEditing, children, column, gridHeadCellButtonProps} = this.props;
 
     return (
-      <GridHeadCellWrapper
-        onMouseEnter={() => this.setHovering(true)}
-        onMouseMove={() => this.setHovering(true)}
-        onMouseLeave={() => this.setHovering(false)}
-      >
+      <GridHeadCellWrapper>
         <GridHeadCellButton
           isDragging={column.isDragging}
-          isEditing={isEditing}
           {...gridHeadCellButtonProps}
+          isEditing={isEditing}
+          onMouseEnter={() => this.setHovering(true)}
+          onMouseMove={() => this.setHovering(true)}
+          onMouseLeave={() => this.setHovering(false)}
         >
           {children}
           {this.renderButtonHoverDraggable(children)}
         </GridHeadCellButton>
 
-        {/* Keep the Resizer at the bottom to ensure that it is will always
-            float on top of everything else */
-        FLAG_GRID_RESIZABLE && <GridHeadCellResizer isEditing={isEditing} />}
+        {/*
+          Keep the Resizer component and the add column button at the bottom
+          to ensure that it is will always
+          float on top of everything else */
+        this.renderResizeGrabbable()}
+        {this.renderAddColumnButton()}
       </GridHeadCellWrapper>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/gridEditable/index.tsx b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
index 062453bfb4..c7e7d27924 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/index.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
@@ -18,6 +18,7 @@ import {
 } from './types';
 import GridHeadCell from './gridHeadCell';
 import GridModalEditColumn from './gridModalEditColumn';
+import AddColumnButton from './addColumnButton';
 import {
   GridPanel,
   GridPanelBody,
@@ -132,6 +133,10 @@ class GridEditable<
     this.setState({isEditing: !this.state.isEditing});
   };
 
+  openModalAddColumnAt = (insertIndex: number) => {
+    return this.toggleModalEditColumn(insertIndex);
+  };
+
   toggleModalEditColumn = (
     indexColumnOrder?: number,
     column?: GridColumn<ColumnKey>
@@ -236,6 +241,8 @@ class GridEditable<
 
           {columnOrder.map((column, columnIndex) => (
             <GridHeadCell
+              openModalAddColumnAt={this.openModalAddColumnAt}
+              isLast={columnOrder.length - 1 === columnIndex}
               key={`${columnIndex}.${column.key}`}
               isColumnDragging={this.props.isColumnDragging}
               isPrimary={column.isPrimary}
@@ -279,13 +286,13 @@ class GridEditable<
 
     return (
       <GridEditGroup>
-        <GridEditGroupButton onClick={() => this.toggleModalEditColumn()}>
-          <ToolTip title={t('Add Columns')}>
-            <InlineSvg src="icon-circle-add" data-test-id="grid-edit-add" />
-          </ToolTip>
-        </GridEditGroupButton>
+        <AddColumnButton
+          align="left"
+          onClick={() => this.toggleModalEditColumn()}
+          data-test-id="grid-add-column-right-end"
+        />
         <GridEditGroupButton onClick={this.toggleEdit}>
-          <ToolTip title={t('Cancel Edit')}>
+          <ToolTip title={t('Exit Edit')}>
             <InlineSvg src="icon-close" />
           </ToolTip>
         </GridEditGroupButton>
diff --git a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
index d025e21460..df9a6dd16e 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
@@ -4,9 +4,11 @@ import InlineSvg from 'app/components/inlineSvg';
 import {Panel, PanelBody} from 'app/components/panels';
 import space from 'app/styles/space';
 
-const GRID_HEADER_HEIGHT = '45px';
-const GRID_EDIT_WIDTH = '35px';
-const GRID_EDIT_WIDTH_DOUBLE = '70px'; // (2 * GRID_EDIT_WIDTH)
+export const ADD_BUTTON_SIZE = 16; // this is an even number
+export const GRID_HEADER_HEIGHT = 45;
+const GRID_EDIT_WIDTH = 35;
+const GRID_EDIT_WIDTH_EDIT_MODE =
+  GRID_EDIT_WIDTH + ADD_BUTTON_SIZE / 2 + (12 - ADD_BUTTON_SIZE / 2);
 
 /**
  * Explanation of z-index:
@@ -15,6 +17,7 @@ const GRID_EDIT_WIDTH_DOUBLE = '70px'; // (2 * GRID_EDIT_WIDTH)
  */
 const Z_INDEX_RESIZER = '1';
 const Z_INDEX_EDITABLE = '10';
+export const Z_INDEX_ADD_COLUMN = '20';
 
 type GridEditableProps = {
   numColumn?: number;
@@ -67,10 +70,10 @@ export const Grid = styled('table')<GridEditableProps>`
         return 'padding-right: 0px';
       }
       if (!p.isEditing) {
-        return `padding-right: ${GRID_EDIT_WIDTH};`;
+        return `padding-right: ${GRID_EDIT_WIDTH}px;`;
       }
 
-      return `padding-right: ${GRID_EDIT_WIDTH_DOUBLE};`;
+      return `padding-right: ${GRID_EDIT_WIDTH_EDIT_MODE}px;`;
     }}
   }
 `;
@@ -93,7 +96,7 @@ export const GridHeadCell = styled('th')`
      We override this by setting min-width to be 0. */
   position: relative;
   min-width: 0;
-  height: ${GRID_HEADER_HEIGHT};
+  height: ${GRID_HEADER_HEIGHT}px;
 
   border-bottom: 1px solid ${p => p.theme.borderDark};
   background: ${p => p.theme.offWhite};
@@ -103,7 +106,7 @@ export const GridHeadCellButton = styled('div')<GridEditableProps>`
   min-width: 24px; /* Ensure that edit/remove buttons are never hidden */
   display: block;
 
-  margin: ${space(1)};
+  margin: ${space(1)} ${space(1.5)};
   padding: ${space(1)} ${space(1.5)};
   border-radius: ${p => p.theme.borderRadius};
 
@@ -303,7 +306,7 @@ export const GridEditGroup = styled('th')`
   top: 0;
   right: 0;
   display: flex;
-  height: ${GRID_HEADER_HEIGHT};
+  height: ${GRID_HEADER_HEIGHT}px;
 
   background-color: ${p => p.theme.offWhite};
   border-bottom: 1px solid ${p => p.theme.borderDark};
@@ -312,8 +315,8 @@ export const GridEditGroup = styled('th')`
 `;
 export const GridEditGroupButton = styled('div')`
   display: block;
-  width: ${GRID_EDIT_WIDTH};
-  height: ${GRID_HEADER_HEIGHT};
+  width: ${GRID_EDIT_WIDTH}px;
+  height: ${GRID_HEADER_HEIGHT}px;
 
   color: ${p => p.theme.gray2};
   font-size: 16px;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index 1f068f4a8b..0caa1b3924 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -546,6 +546,21 @@ class EventView {
     return newEventView;
   }
 
+  withNewColumnAt(
+    newColumn: {
+      aggregation: string;
+      field: string;
+      fieldname: string;
+    },
+    insertIndex: number
+  ): EventView {
+    const newEventView = this.withNewColumn(newColumn);
+
+    const fromIndex = newEventView.fields.length - 1;
+
+    return newEventView.withMovedColumn({fromIndex, toIndex: insertIndex});
+  }
+
   withUpdatedColumn(
     columnIndex: number,
     updatedColumn: {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
index 31b8f503dd..5f952c66b1 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
@@ -18,7 +18,7 @@ import {
 import {TableColumn} from './types';
 
 type ModalActions = {
-  createColumn: (column: TableColumn<ReactText>) => void;
+  createColumn: (column: TableColumn<ReactText>, insertAt?: number) => void;
   updateColumn: (indexColumnOrder: number, column: TableColumn<ReactText>) => void;
 };
 
@@ -117,7 +117,7 @@ class TableModalEditColumnBodyForm extends React.Component<
       if (typeof indexColumnOrder === 'number' && this.props.column) {
         updateColumn(indexColumnOrder, nextColumn);
       } else {
-        createColumn(nextColumn);
+        createColumn(nextColumn, indexColumnOrder);
       }
 
       if (onSuccess) {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
index 7c13990c8c..6eeb6067b0 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
@@ -45,14 +45,32 @@ class TableView extends React.Component<TableViewProps> {
    * In most cases, the new EventView object differs from the previous EventView
    * object. The new EventView object is pushed to the location object.
    */
-  _createColumn = (nextColumn: TableColumn<keyof TableDataRow>) => {
+  _createColumn = (
+    nextColumn: TableColumn<keyof TableDataRow>,
+    insertAt: number | undefined
+  ) => {
     const {location, eventView} = this.props;
 
-    const nextEventView = eventView.withNewColumn({
-      aggregation: String(nextColumn.aggregation),
-      field: String(nextColumn.field),
-      fieldname: nextColumn.name,
-    });
+    let nextEventView: EventView;
+
+    if (typeof insertAt === 'number') {
+      // create and insert a column at a specific index
+      nextEventView = eventView.withNewColumnAt(
+        {
+          aggregation: String(nextColumn.aggregation),
+          field: String(nextColumn.field),
+          fieldname: nextColumn.name,
+        },
+        insertAt
+      );
+    } else {
+      // create and insert a column at the right end of the table
+      nextEventView = eventView.withNewColumn({
+        aggregation: String(nextColumn.aggregation),
+        field: String(nextColumn.field),
+        fieldname: nextColumn.name,
+      });
+    }
 
     pushEventViewToLocation({
       location,
diff --git a/tests/acceptance/test_organization_events_v2.py b/tests/acceptance/test_organization_events_v2.py
index 36c96efd37..7879fb686e 100644
--- a/tests/acceptance/test_organization_events_v2.py
+++ b/tests/acceptance/test_organization_events_v2.py
@@ -59,7 +59,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
             self.browser.click_when_visible('[data-test-id="grid-edit-enable"]')
             self.browser.snapshot("events-v2 - querybuilder edit state")
 
-            self.browser.click_when_visible('[data-test-id="grid-edit-add"]')
+            self.browser.click_when_visible('[data-test-id="grid-add-column-right-end"]')
             self.browser.snapshot("events-v2 - querybuilder edit modal")
 
     @patch("django.utils.timezone.now")
