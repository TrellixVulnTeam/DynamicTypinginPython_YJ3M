commit 36c27f9f5b1a30dd04202746c096684213bf0995
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Nov 13 15:55:00 2015 -0800

    Add unresolved event stat to project details via include

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index c3a2b0f9cd..4d838f08c8 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 
 import logging
 
+from datetime import timedelta
+from django.utils import timezone
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
@@ -9,7 +11,9 @@ from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.decorators import sudo_required
 from sentry.api.serializers import serialize
-from sentry.models import AuditLogEntryEvent, Project, ProjectStatus
+from sentry.models import (
+    AuditLogEntryEvent, Group, GroupStatus, Project, ProjectStatus
+)
 from sentry.plugins import plugins
 from sentry.tasks.deletion import delete_project
 from sentry.utils.apidocs import scenario, attach_scenarios
@@ -69,6 +73,20 @@ class ProjectSerializer(serializers.ModelSerializer):
 class ProjectDetailsEndpoint(ProjectEndpoint):
     doc_section = DocSection.PROJECTS
 
+    def _get_unresolved_count(self, project):
+        queryset = Group.objects.filter(
+            status=GroupStatus.UNRESOLVED,
+            project=project,
+        )
+
+        resolve_age = project.get_option('sentry:resolve_age', None)
+        if resolve_age:
+            queryset = queryset.filter(
+                last_seen__gte=timezone.now() - timedelta(hours=int(resolve_age)),
+            )
+
+        return queryset.count()
+
     @attach_scenarios([get_project_scenario])
     def get(self, request, project):
         """
@@ -103,6 +121,12 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
         data['team'] = serialize(project.team, request.user)
         data['organization'] = serialize(project.organization, request.user)
 
+        include = set(filter(bool, request.GET.get('include', '').split(',')))
+        if 'stats' in include:
+            data['stats'] = {
+                'unresolved': self._get_unresolved_count(project),
+            }
+
         return Response(data)
 
     @attach_scenarios([update_project_scenario])
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 40a160f7ed..e116b57ffc 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -12,7 +12,7 @@ from sentry.api.bases.project import ProjectEndpoint, ProjectEventPermission
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.group import StreamGroupSerializer
 from sentry.constants import (
-    DEFAULT_SORT_OPTION, STATUS_CHOICES, STATUS_UNRESOLVED
+    DEFAULT_SORT_OPTION, STATUS_CHOICES
 )
 from sentry.db.models.query import create_or_update
 from sentry.models import (
@@ -215,7 +215,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
         )
 
         # HACK: remove auto resolved entries
-        if query_kwargs.get('status') == STATUS_UNRESOLVED:
+        if query_kwargs.get('status') == GroupStatus.UNRESOLVED:
             context = [
                 r for r in context
                 if r['status'] == 'unresolved'
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index acdaaa6f2a..4038a713d5 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -44,6 +44,18 @@ class ProjectDetailsTest(APITestCase):
         assert response.status_code == 200
         assert response.data['id'] == str(project.id)
 
+    def test_with_stats(self):
+        project = self.create_project()
+        self.create_group(project=project)
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-project-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+        response = self.client.get(url + '?include=stats')
+        assert response.status_code == 200
+        assert response.data['stats']['unresolved'] == 1
+
 
 class ProjectUpdateTest(APITestCase):
     def test_simple(self):
