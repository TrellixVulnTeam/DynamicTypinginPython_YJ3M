commit 8fb7dd75fe90b282875323e86d86f73f42550c09
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed Mar 11 17:54:54 2020 -0700

    feat(onboarding): Add completion_seen state (#17594)

diff --git a/migrations_lockfile.txt b/migrations_lockfile.txt
index b590736f2f..d694206b0f 100644
--- a/migrations_lockfile.txt
+++ b/migrations_lockfile.txt
@@ -10,7 +10,7 @@ auth: 0008_alter_user_username_max_length
 contenttypes: 0002_remove_content_type_name
 jira_ac: 0001_initial
 nodestore: 0001_initial
-sentry: 0051_fix_auditlog_pickled_data
+sentry: 0052_organizationonboardingtask_completion_seen
 sessions: 0001_initial
 sites: 0002_alter_domain_unique
 social_auth: 0001_initial
diff --git a/src/sentry/api/endpoints/organization_onboarding_tasks.py b/src/sentry/api/endpoints/organization_onboarding_tasks.py
index 064c89f025..d72e3c447b 100644
--- a/src/sentry/api/endpoints/organization_onboarding_tasks.py
+++ b/src/sentry/api/endpoints/organization_onboarding_tasks.py
@@ -15,8 +15,15 @@ class OrganizationOnboardingTaskEndpoint(OrganizationEndpoint):
         except KeyError:
             return Response({"detail": "Invalid task key"}, status=422)
 
-        status = OrganizationOnboardingTask.STATUS_LOOKUP_BY_KEY.get(request.data["status"])
-        if status is None:
+        status_value = request.data.get("status")
+        completion_seen = request.data.get("completionSeen")
+
+        if status_value is None and completion_seen is None:
+            return Response({"detail": "completionSeen or status must be provided"}, status=422)
+
+        status = OrganizationOnboardingTask.STATUS_LOOKUP_BY_KEY.get(status_value)
+
+        if status_value and status is None:
             return Response({"detail": "Invalid status key"}, status=422)
 
         # Cannot skip unskippable tasks
@@ -26,11 +33,16 @@ class OrganizationOnboardingTaskEndpoint(OrganizationEndpoint):
         ):
             return Response(status=422)
 
+        values = {}
+
+        if status:
+            values["status"] = status
+            values["date_completed"] = timezone.now()
+        if completion_seen:
+            values["completion_seen"] = timezone.now()
+
         rows_affected, created = OrganizationOnboardingTask.objects.create_or_update(
-            organization=organization,
-            user=request.user,
-            task=task_id,
-            values={"status": status, "date_completed": timezone.now()},
+            organization=organization, task=task_id, values=values, defaults={"user": request.user}
         )
 
         if rows_affected or created:
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 12192acd1b..e1ae3ed2d1 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -114,6 +114,7 @@ class OnboardingTasksSerializer(Serializer):
             "task": OrganizationOnboardingTask.TASK_KEY_MAP.get(obj.task),
             "status": OrganizationOnboardingTask.STATUS_KEY_MAP.get(obj.status),
             "user": obj.user.name if obj.user else None,
+            "completionSeen": obj.completion_seen,
             "dateCompleted": obj.date_completed,
             "data": obj.data,
         }
diff --git a/src/sentry/migrations/0052_organizationonboardingtask_completion_seen.py b/src/sentry/migrations/0052_organizationonboardingtask_completion_seen.py
new file mode 100644
index 0000000000..efdf871209
--- /dev/null
+++ b/src/sentry/migrations/0052_organizationonboardingtask_completion_seen.py
@@ -0,0 +1,37 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.28 on 2020-03-11 21:30
+from __future__ import unicode_literals
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    # This flag is used to decide whether to run this migration in a transaction or not.
+    # By default we prefer to run in a transaction, but for migrations where you want
+    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
+    # want to create an index concurrently when adding one to an existing table.
+    atomic = True
+
+
+    dependencies = [
+        ('sentry', '0051_fix_auditlog_pickled_data'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='organizationonboardingtask',
+            name='completion_seen',
+            field=models.DateTimeField(null=True),
+        ),
+    ]
diff --git a/src/sentry/models/organizationonboardingtask.py b/src/sentry/models/organizationonboardingtask.py
index 8d4e42f51d..0575b3be00 100644
--- a/src/sentry/models/organizationonboardingtask.py
+++ b/src/sentry/models/organizationonboardingtask.py
@@ -136,6 +136,7 @@ class OrganizationOnboardingTask(Model):
     user = FlexibleForeignKey(settings.AUTH_USER_MODEL, null=True)  # user that completed
     task = BoundedPositiveIntegerField(choices=TASK_CHOICES)
     status = BoundedPositiveIntegerField(choices=STATUS_CHOICES)
+    completion_seen = models.DateTimeField(null=True)
     date_completed = models.DateTimeField(default=timezone.now)
     project = FlexibleForeignKey("sentry.Project", db_constraint=False, null=True)
     data = JSONField()  # INVITE_MEMBER { invited_member: user.id }
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index e94578254f..73de637ed2 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -933,6 +933,7 @@ export type OnboardingTaskStatus = {
   status: 'skipped' | 'pending' | 'complete';
   user?: string | null;
   dateCompleted?: string;
+  completionSeen?: string;
   data?: object;
 };
 
diff --git a/tests/sentry/api/endpoints/test_organization_onboarding_tasks.py b/tests/sentry/api/endpoints/test_organization_onboarding_tasks.py
new file mode 100644
index 0000000000..f8981ea150
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_onboarding_tasks.py
@@ -0,0 +1,78 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import OrganizationOnboardingTask, OnboardingTask, OnboardingTaskStatus
+from sentry.testutils import APITestCase
+
+
+class OrganizationOnboardingTaskEndpointTest(APITestCase):
+    def setUp(self):
+        self.user = self.create_user()
+        self.org = self.create_organization(owner=self.user)
+        self.login_as(user=self.user)
+        self.path = reverse("sentry-api-0-organization-onboardingtasks", args=[self.org.slug])
+
+    def test_mark_complete(self):
+
+        response = self.client.post(self.path, {"task": "create_project", "status": "complete"})
+
+        assert response.status_code == 204, response.content
+
+        task = OrganizationOnboardingTask.objects.get(
+            organization=self.org, task=OnboardingTask.FIRST_PROJECT
+        )
+
+        assert task.status == OnboardingTaskStatus.COMPLETE
+        assert task.completion_seen is None
+        assert task.user == self.user
+
+    def test_mark_completion_seen(self):
+        response = self.client.post(self.path, {"task": "create_project", "status": "complete"})
+        assert response.status_code == 204, response.content
+
+        response = self.client.post(self.path, {"task": "create_project", "completionSeen": True})
+
+        assert response.status_code == 204, response.content
+
+        task = OrganizationOnboardingTask.objects.get(
+            organization=self.org, task=OnboardingTask.FIRST_PROJECT
+        )
+
+        assert task.completion_seen is not None
+
+    def test_cannot_skip_unskippable(self):
+        response = self.client.post(self.path, {"task": "create_project", "status": "skipped"})
+
+        assert response.status_code == 422, response.content
+        assert not OrganizationOnboardingTask.objects.filter(
+            organization=self.org, task=OnboardingTask.FIRST_PROJECT
+        ).exists()
+
+    def test_invalid_status_key(self):
+        response = self.client.post(self.path, {"task": "create_project", "status": "bad_status"})
+
+        assert response.status_code == 422, response.content
+        assert response.data["detail"] == "Invalid status key"
+        assert not OrganizationOnboardingTask.objects.filter(
+            organization=self.org, task=OnboardingTask.FIRST_PROJECT
+        ).exists()
+
+    def test_invalid_task_key(self):
+        response = self.client.post(self.path, {"task": "bad_key"})
+
+        assert response.status_code == 422, response.content
+        assert response.data["detail"] == "Invalid task key"
+        assert not OrganizationOnboardingTask.objects.filter(
+            organization=self.org, task=OnboardingTask.FIRST_PROJECT
+        ).exists()
+
+    def test_missing_status_or_completion_seen(self):
+        response = self.client.post(self.path, {"task": "create_project"})
+
+        assert response.status_code == 422, response.content
+        assert response.data["detail"] == "completionSeen or status must be provided"
+
+        assert not OrganizationOnboardingTask.objects.filter(
+            organization=self.org, task=OnboardingTask.FIRST_PROJECT
+        ).exists()
