commit d81b9c320e2417ab29929d2b47363a51fecb3c7a
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Nov 3 17:28:01 2016 -0700

    api: ignore "null" Origins and allow fallback to Referer (#4436)

diff --git a/CHANGES b/CHANGES
index b33059668f..9c08950775 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,6 +1,8 @@
 Version 8.11 (Unreleased)
 -------------------------
 
+- Ignore a ``null`` ``Origin`` header for authentication.
+
 Version 8.10
 ------------
 
diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 9f77641071..471410b1d7 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -150,7 +150,11 @@ class Endpoint(APIView):
         if settings.SENTRY_API_RESPONSE_DELAY:
             time.sleep(settings.SENTRY_API_RESPONSE_DELAY / 1000.0)
 
-        origin = request.META.get('HTTP_ORIGIN')
+        origin = request.META.get('HTTP_ORIGIN', 'null')
+        # A "null" value should be treated as no Origin for us.
+        # See RFC6454 for more information on this behavior.
+        if origin == 'null':
+            origin = None
 
         try:
             if origin and request.auth:
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 5faf25c842..799c6b166d 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -37,7 +37,7 @@ from sentry.tasks.store import preprocess_event
 from sentry.utils import json
 from sentry.utils.auth import parse_auth_header
 from sentry.utils.csp import is_valid_csp_report
-from sentry.utils.http import is_valid_ip
+from sentry.utils.http import is_valid_ip, origin_from_request
 from sentry.utils.strings import decompress
 from sentry.utils.validators import is_float, is_event_id
 
@@ -208,7 +208,7 @@ class ClientApiHelper(object):
         """
         Returns either the Origin or Referer value from the request headers.
         """
-        return request.META.get('HTTP_ORIGIN', request.META.get('HTTP_REFERER'))
+        return origin_from_request(request)
 
     def project_from_auth(self, auth):
         if not auth.public_key:
diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index a0f85ba7f7..7419b09031 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -215,3 +215,19 @@ def is_valid_ip(ip_address, project):
             return False
 
     return True
+
+
+def origin_from_request(request):
+    """
+    Returns either the Origin or Referer value from the request headers,
+    ignoring "null" Origins.
+    """
+    rv = request.META.get('HTTP_ORIGIN', 'null')
+    # In some situation, an Origin header may be the literal value
+    # "null". This means that the Origin header was stripped for
+    # privacy reasons, but we should ignore this value entirely.
+    # Behavior is specified in RFC6454. In either case, we should
+    # treat a "null" Origin as a nonexistent one and fallback to Referer.
+    if rv in ('', 'null'):
+        rv = request.META.get('HTTP_REFERER')
+    return rv
diff --git a/src/sentry/web/frontend/error_page_embed.py b/src/sentry/web/frontend/error_page_embed.py
index 87ee614f3b..f5389bd7cd 100644
--- a/src/sentry/web/frontend/error_page_embed.py
+++ b/src/sentry/web/frontend/error_page_embed.py
@@ -17,7 +17,7 @@ from sentry.models import (
 )
 from sentry.web.helpers import render_to_response
 from sentry.utils import json
-from sentry.utils.http import is_valid_origin
+from sentry.utils.http import is_valid_origin, origin_from_request
 from sentry.utils.validators import is_event_id
 
 GENERIC_ERROR = _('An unknown error occurred while submitting your report. Please try again.')
@@ -57,7 +57,7 @@ class ErrorPageEmbedView(View):
         return key
 
     def _get_origin(self, request):
-        return request.META.get('HTTP_ORIGIN', request.META.get('HTTP_REFERER'))
+        return origin_from_request(request)
 
     def _json_response(self, request, context=None, status=200):
         if context:
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index 0ee65ef56e..f0833b1bcd 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -5,12 +5,14 @@ from __future__ import absolute_import
 import mock
 
 from exam import fixture
+from django.http import HttpRequest
 
 from sentry import options
 from sentry.models import Project
 from sentry.testutils import TestCase
 from sentry.utils.http import (
     is_same_domain, is_valid_origin, get_origins, absolute_uri, is_valid_ip,
+    origin_from_request,
 )
 
 
@@ -230,3 +232,28 @@ class IsValidIPTestCase(TestCase):
     def test_match_blacklist_range(self):
         assert not self.is_valid_ip('127.0.0.1', ['127.0.0.0/8'])
         assert not self.is_valid_ip('127.0.0.1', ['0.0.0.0', '127.0.0.0/8', '192.168.1.0/8'])
+
+
+class OriginFromRequestTestCase(TestCase):
+    def test_nothing(self):
+        request = HttpRequest()
+        assert origin_from_request(request) is None
+
+    def test_origin(self):
+        request = HttpRequest()
+        request.META['HTTP_ORIGIN'] = 'http://example.com'
+        request.META['HTTP_REFERER'] = 'nope'
+        assert origin_from_request(request) == 'http://example.com'
+
+    def test_referer(self):
+        request = HttpRequest()
+        request.META['HTTP_REFERER'] = 'http://example.com'
+        assert origin_from_request(request) == 'http://example.com'
+
+    def test_null_origin(self):
+        request = HttpRequest()
+        request.META['HTTP_ORIGIN'] = 'null'
+        assert origin_from_request(request) is None
+
+        request.META['HTTP_REFERER'] = 'http://example.com'
+        assert origin_from_request(request) == 'http://example.com'
