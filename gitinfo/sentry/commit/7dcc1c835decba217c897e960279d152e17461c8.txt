commit 7dcc1c835decba217c897e960279d152e17461c8
Author: Ben Vinegar <ben@benv.ca>
Date:   Mon May 23 15:15:42 2016 -0700

    Show session expired message on non-org login

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 87c992e168..545da0c3f0 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -189,6 +189,8 @@ OK_PLUGIN_DISABLED = _("The {name} integration has been disabled.")
 
 OK_PLUGIN_SAVED = _('Configuration for the {name} integration has been saved.')
 
+WARN_SESSION_EXPIRED = _('Your session has expired.')
+
 # Key to use when ordering a list of events manually
 EVENT_ORDERING_KEY = attrgetter('datetime', 'id')
 
diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
index 09818f9e28..cfbeec57de 100644
--- a/src/sentry/web/frontend/auth_login.py
+++ b/src/sentry/web/frontend/auth_login.py
@@ -9,6 +9,7 @@ from django.utils.translation import ugettext_lazy as _
 from django.views.decorators.cache import never_cache
 
 from sentry import features
+from sentry.constants import WARN_SESSION_EXPIRED
 from sentry.models import AuthProvider, Organization, OrganizationStatus
 from sentry.web.forms.accounts import AuthenticationForm, RegistrationForm
 from sentry.web.frontend.base import BaseView
@@ -150,4 +151,14 @@ class AuthLoginView(BaseView):
                 messages.add_message(request, messages.ERROR, ERR_NO_SSO)
 
             return HttpResponseRedirect(next_uri)
-        return self.handle_basic_auth(request)
+
+        session_expired = 'session_expired' in request.COOKIES
+        if session_expired:
+            messages.add_message(request, messages.WARNING, WARN_SESSION_EXPIRED)
+
+        response = self.handle_basic_auth(request)
+
+        if session_expired:
+            response.delete_cookie('session_expired')
+
+        return response
diff --git a/src/sentry/web/frontend/auth_organization_login.py b/src/sentry/web/frontend/auth_organization_login.py
index 35f3c35859..6d89251f4c 100644
--- a/src/sentry/web/frontend/auth_organization_login.py
+++ b/src/sentry/web/frontend/auth_organization_login.py
@@ -4,19 +4,17 @@ from __future__ import absolute_import, print_function
 from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.db import transaction
-from django.utils.translation import ugettext as _
 from django.views.decorators.cache import never_cache
 from django.contrib import messages
 
 from sentry import features
 from sentry.auth.helper import AuthHelper
+from sentry.constants import WARN_SESSION_EXPIRED
 from sentry.models import AuthProvider, Organization, OrganizationStatus
 from sentry.utils import auth
 from sentry.web.forms.accounts import AuthenticationForm, RegistrationForm
 from sentry.web.frontend.base import BaseView
 
-ERR_EXPIRED = _('Your session has expired.')
-
 
 class AuthOrganizationLoginView(BaseView):
     auth_required = False
@@ -140,13 +138,16 @@ class AuthOrganizationLoginView(BaseView):
         except AuthProvider.DoesNotExist:
             auth_provider = None
 
-        if request.COOKIES.get('session_expired'):
-            messages.add_message(request, messages.WARNING, ERR_EXPIRED)
+        session_expired = 'session_expired' in request.COOKIES
+        if session_expired:
+            messages.add_message(request, messages.WARNING, WARN_SESSION_EXPIRED)
 
         if not auth_provider:
             response = self.handle_basic_auth(request, organization)
         else:
             response = self.handle_sso(request, organization, auth_provider)
 
-        response.delete_cookie('session_expired')
+        if session_expired:
+            response.delete_cookie('session_expired')
+
         return response
