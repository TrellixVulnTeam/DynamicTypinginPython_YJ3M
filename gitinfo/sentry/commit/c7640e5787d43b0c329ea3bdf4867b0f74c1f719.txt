commit c7640e5787d43b0c329ea3bdf4867b0f74c1f719
Author: ted kaemming <ted@kaemming.com>
Date:   Mon Nov 27 14:38:07 2017 -0800

    feat(api): Add environment filtering parameter to filterable statistics endpoints (#6623)

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 0b86ccb610..14d183c4da 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -243,7 +243,7 @@ class EnvironmentMixin(object):
 
 
 class StatsMixin(object):
-    def _parse_args(self, request):
+    def _parse_args(self, request, environment_id=None):
         resolution = request.GET.get('resolution')
         if resolution:
             resolution = self._parse_resolution(resolution)
@@ -266,6 +266,7 @@ class StatsMixin(object):
             'start': start,
             'end': end,
             'rollup': resolution,
+            'environment_id': environment_id,
         }
 
     def _parse_resolution(self, value):
diff --git a/src/sentry/api/endpoints/group_stats.py b/src/sentry/api/endpoints/group_stats.py
index 6c9d67bd73..acf1297fa8 100644
--- a/src/sentry/api/endpoints/group_stats.py
+++ b/src/sentry/api/endpoints/group_stats.py
@@ -3,14 +3,27 @@ from __future__ import absolute_import
 from rest_framework.response import Response
 
 from sentry import tsdb
-from sentry.api.base import StatsMixin
+from sentry.api.base import EnvironmentMixin, StatsMixin
 from sentry.api.bases.group import GroupEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import Environment
 
 
-class GroupStatsEndpoint(GroupEndpoint, StatsMixin):
+class GroupStatsEndpoint(GroupEndpoint, EnvironmentMixin, StatsMixin):
     def get(self, request, group):
+        try:
+            environment_id = self._get_environment_id_from_request(
+                request,
+                group.project.organization_id,
+            )
+        except Environment.DoesNotExist:
+            raise ResourceDoesNotExist
+
         data = tsdb.get_range(
-            model=tsdb.models.group, keys=[group.id], **self._parse_args(request)
+            model=tsdb.models.group, keys=[group.id], **self._parse_args(
+                request,
+                environment_id,
+            )
         )[group.id]
 
         return Response(data)
diff --git a/src/sentry/api/endpoints/organization_stats.py b/src/sentry/api/endpoints/organization_stats.py
index f14263c46e..f266660924 100644
--- a/src/sentry/api/endpoints/organization_stats.py
+++ b/src/sentry/api/endpoints/organization_stats.py
@@ -3,9 +3,10 @@ from __future__ import absolute_import
 from rest_framework.response import Response
 
 from sentry import tsdb
-from sentry.api.base import DocSection, StatsMixin
+from sentry.api.base import DocSection, EnvironmentMixin, StatsMixin
 from sentry.api.bases.organization import OrganizationEndpoint
-from sentry.models import Project, Team
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import Environment, Project, Team
 from sentry.utils.apidocs import attach_scenarios, scenario
 
 
@@ -14,7 +15,7 @@ def retrieve_event_counts_organization(runner):
     runner.request(method='GET', path='/organizations/%s/stats/' % runner.org.slug)
 
 
-class OrganizationStatsEndpoint(OrganizationEndpoint, StatsMixin):
+class OrganizationStatsEndpoint(OrganizationEndpoint, EnvironmentMixin, StatsMixin):
     doc_section = DocSection.ORGANIZATIONS
 
     @attach_scenarios([retrieve_event_counts_organization])
@@ -73,6 +74,7 @@ class OrganizationStatsEndpoint(OrganizationEndpoint, StatsMixin):
 
         stat_model = None
         stat = request.GET.get('stat', 'received')
+        query_kwargs = {}
         if stat == 'received':
             if group == 'project':
                 stat_model = tsdb.models.project_total_received
@@ -91,11 +93,19 @@ class OrganizationStatsEndpoint(OrganizationEndpoint, StatsMixin):
         elif stat == 'generated':
             if group == 'project':
                 stat_model = tsdb.models.project
+                try:
+                    query_kwargs['environment_id'] = self._get_environment_id_from_request(
+                        request,
+                        organization.id,
+                    )
+                except Environment.DoesNotExist:
+                    raise ResourceDoesNotExist
 
         if stat_model is None:
             raise ValueError('Invalid group: %s, stat: %s' % (group, stat))
 
-        data = tsdb.get_range(model=stat_model, keys=keys, **self._parse_args(request))
+        data = tsdb.get_range(model=stat_model, keys=keys,
+                              **self._parse_args(request, **query_kwargs))
 
         if group == 'organization':
             data = data[organization.id]
diff --git a/src/sentry/api/endpoints/project_group_stats.py b/src/sentry/api/endpoints/project_group_stats.py
index a0e3a8a429..f5157d974a 100644
--- a/src/sentry/api/endpoints/project_group_stats.py
+++ b/src/sentry/api/endpoints/project_group_stats.py
@@ -5,13 +5,22 @@ import six
 from rest_framework.response import Response
 
 from sentry.app import tsdb
-from sentry.api.base import StatsMixin
+from sentry.api.base import EnvironmentMixin, StatsMixin
 from sentry.api.bases.project import ProjectEndpoint
-from sentry.models import Group
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import Environment, Group
 
 
-class ProjectGroupStatsEndpoint(ProjectEndpoint, StatsMixin):
+class ProjectGroupStatsEndpoint(ProjectEndpoint, EnvironmentMixin, StatsMixin):
     def get(self, request, project):
+        try:
+            environment_id = self._get_environment_id_from_request(
+                request,
+                project.organization_id,
+            )
+        except Environment.DoesNotExist:
+            raise ResourceDoesNotExist
+
         group_ids = request.GET.getlist('id')
         if not group_ids:
             return Response(status=204)
@@ -22,6 +31,11 @@ class ProjectGroupStatsEndpoint(ProjectEndpoint, StatsMixin):
         if not group_ids:
             return Response(status=204)
 
-        data = tsdb.get_range(model=tsdb.models.group, keys=group_ids, **self._parse_args(request))
+        data = tsdb.get_range(
+            model=tsdb.models.group, keys=group_ids, **self._parse_args(
+                request,
+                environment_id,
+            )
+        )
 
         return Response({six.text_type(k): v for k, v in data.items()})
diff --git a/src/sentry/api/endpoints/project_stats.py b/src/sentry/api/endpoints/project_stats.py
index ab99f1028a..54ec040eb8 100644
--- a/src/sentry/api/endpoints/project_stats.py
+++ b/src/sentry/api/endpoints/project_stats.py
@@ -3,8 +3,10 @@ from __future__ import absolute_import
 from rest_framework.response import Response
 
 from sentry import tsdb
-from sentry.api.base import DocSection, StatsMixin
+from sentry.api.base import DocSection, EnvironmentMixin, StatsMixin
 from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import Environment
 from sentry.utils.data_filters import FILTER_STAT_KEYS_TO_VALUES
 from sentry.utils.apidocs import scenario, attach_scenarios
 
@@ -18,7 +20,7 @@ def retrieve_event_counts_project(runner):
     )
 
 
-class ProjectStatsEndpoint(ProjectEndpoint, StatsMixin):
+class ProjectStatsEndpoint(ProjectEndpoint, EnvironmentMixin, StatsMixin):
     doc_section = DocSection.PROJECTS
 
     @attach_scenarios([retrieve_event_counts_project])
@@ -52,6 +54,7 @@ class ProjectStatsEndpoint(ProjectEndpoint, StatsMixin):
         :auth: required
         """
         stat = request.GET.get('stat', 'received')
+        query_kwargs = {}
         if stat == 'received':
             stat_model = tsdb.models.project_total_received
         elif stat == 'rejected':
@@ -60,6 +63,13 @@ class ProjectStatsEndpoint(ProjectEndpoint, StatsMixin):
             stat_model = tsdb.models.project_total_blacklisted
         elif stat == 'generated':
             stat_model = tsdb.models.project
+            try:
+                query_kwargs['environment_id'] = self._get_environment_id_from_request(
+                    request,
+                    project.organization_id,
+                )
+            except Environment.DoesNotExist:
+                raise ResourceDoesNotExist
         elif stat == 'forwarded':
             stat_model = tsdb.models.project_total_forwarded
         else:
@@ -69,7 +79,7 @@ class ProjectStatsEndpoint(ProjectEndpoint, StatsMixin):
                 raise ValueError('Invalid stat: %s' % stat)
 
         data = tsdb.get_range(
-            model=stat_model, keys=[project.id], **self._parse_args(request)
+            model=stat_model, keys=[project.id], **self._parse_args(request, **query_kwargs)
         )[project.id]
 
         return Response(data)
diff --git a/src/sentry/api/endpoints/project_user_stats.py b/src/sentry/api/endpoints/project_user_stats.py
index 7bae8bcc71..aefcf99b77 100644
--- a/src/sentry/api/endpoints/project_user_stats.py
+++ b/src/sentry/api/endpoints/project_user_stats.py
@@ -5,20 +5,33 @@ from django.utils import timezone
 from rest_framework.response import Response
 
 from sentry.app import tsdb
+from sentry.api.base import EnvironmentMixin
 from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import Environment
 
 
-class ProjectUserStatsEndpoint(ProjectEndpoint):
+class ProjectUserStatsEndpoint(EnvironmentMixin, ProjectEndpoint):
     def get(self, request, project):
+        try:
+            environment_id = self._get_environment_id_from_request(
+                request,
+                project.organization_id,
+            )
+        except Environment.DoesNotExist:
+            raise ResourceDoesNotExist
+
         now = timezone.now()
         then = now - timedelta(days=30)
 
+        # TODO(tkaemming): Rollup doesn't actually work correctly here
         results = tsdb.rollup(
             tsdb.get_distinct_counts_series(
                 tsdb.models.users_affected_by_project,
                 (project.id, ),
                 then,
                 now,
+                environment_id=environment_id,
             ), 3600 * 24
         )[project.id]
 
diff --git a/src/sentry/api/endpoints/team_stats.py b/src/sentry/api/endpoints/team_stats.py
index 831824ea4c..b79582fcfd 100644
--- a/src/sentry/api/endpoints/team_stats.py
+++ b/src/sentry/api/endpoints/team_stats.py
@@ -4,9 +4,10 @@ from rest_framework.response import Response
 from six.moves import range
 
 from sentry import tsdb
-from sentry.api.base import DocSection, StatsMixin
+from sentry.api.base import DocSection, EnvironmentMixin, StatsMixin
 from sentry.api.bases.team import TeamEndpoint
-from sentry.models import Project
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import Environment, Project
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 
@@ -17,7 +18,7 @@ def retrieve_event_counts_team(runner):
     )
 
 
-class TeamStatsEndpoint(TeamEndpoint, StatsMixin):
+class TeamStatsEndpoint(TeamEndpoint, EnvironmentMixin, StatsMixin):
     doc_section = DocSection.TEAMS
 
     @attach_scenarios([retrieve_event_counts_team])
@@ -50,6 +51,14 @@ class TeamStatsEndpoint(TeamEndpoint, StatsMixin):
                                    values.
         :auth: required
         """
+        try:
+            environment_id = self._get_environment_id_from_request(
+                request,
+                team.organization_id,
+            )
+        except Environment.DoesNotExist:
+            raise ResourceDoesNotExist
+
         projects = Project.objects.get_for_user(
             team=team,
             user=request.user,
@@ -62,7 +71,7 @@ class TeamStatsEndpoint(TeamEndpoint, StatsMixin):
             tsdb.get_range(
                 model=tsdb.models.project,
                 keys=[p.id for p in projects],
-                **self._parse_args(request)
+                **self._parse_args(request, environment_id)
             ).values()
         )
 
