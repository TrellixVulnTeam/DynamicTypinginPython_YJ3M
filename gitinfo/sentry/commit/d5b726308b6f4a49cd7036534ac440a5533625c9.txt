commit d5b726308b6f4a49cd7036534ac440a5533625c9
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 6 10:10:02 2013 -0700

    Bind Sentry project to an existing superuser if possible

diff --git a/src/sentry/models.py b/src/sentry/models.py
index 92763b55b9..173fa94ddc 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -1181,13 +1181,19 @@ class AlertRelatedGroup(Model):
 
 def create_default_project(created_models, verbosity=2, **kwargs):
     if Project in created_models:
-        if Project.objects.filter(pk=settings.SENTRY_PROJECT).exists():
+        if Project.objects.filter(id=settings.SENTRY_PROJECT).exists():
             return
 
+        try:
+            user = User.objects.filter(is_superuser=True)[0]
+        except IndexError:
+            user = None
+
         project = Project.objects.create(
             public=False,
             name='Sentry (Internal)',
             slug='sentry',
+            owner=user,
         )
         # default key (used by sentry-js client, etc)
         ProjectKey.objects.create(
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index ab16e726c0..87db8eb760 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -5,6 +5,7 @@ from __future__ import absolute_import
 
 import mock
 from datetime import timedelta
+from django.conf import settings
 from django.core import mail
 from django.core.urlresolvers import reverse
 from django.utils import timezone
@@ -12,7 +13,7 @@ from sentry.constants import MINUTE_NORMALIZATION
 from sentry.models import (
     Project, ProjectKey, Group, Event, Team,
     GroupTag, GroupCountByMinute, TagValue, PendingTeamMember,
-    LostPasswordHash, Alert, User)
+    LostPasswordHash, Alert, User, create_default_project)
 from sentry.testutils import TestCase, fixture
 
 
@@ -146,3 +147,25 @@ class GroupIsOverResolveAgeTest(TestCase):
         assert group.is_over_resolve_age() is True
         group.last_seen = timezone.now()
         assert group.is_over_resolve_age() is False
+
+
+class CreateDefaultProjectTest(TestCase):
+    def test_simple(self):
+        Team.objects.filter(project__id=settings.SENTRY_PROJECT).delete()
+        Project.objects.filter(id=settings.SENTRY_PROJECT).delete()
+        user, _ = User.objects.get_or_create(is_superuser=True, defaults={
+            'username': 'test'
+        })
+
+        create_default_project(created_models=[Project])
+
+        project = Project.objects.filter(id=settings.SENTRY_PROJECT)
+        assert project.exists()
+        project = project.get()
+        assert project.owner == user
+        assert project.public is False
+        assert project.name == 'Sentry (Internal)'
+        assert project.slug == 'sentry'
+        team = project.team
+        assert team.owner == user
+        assert team.slug == 'sentry'
