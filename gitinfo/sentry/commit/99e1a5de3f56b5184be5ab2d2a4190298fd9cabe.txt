commit 99e1a5de3f56b5184be5ab2d2a4190298fd9cabe
Author: Matej Minar <matej.minar@sentry.io>
Date:   Thu Feb 27 21:54:20 2020 +0100

    feat(ui): Redesigned release health index page (#17348)
    
    * feat(ui): Redesigned release health index page
    
    * applied feedback

diff --git a/src/sentry/static/sentry/app/components/releaseStats.tsx b/src/sentry/static/sentry/app/components/releaseStats.tsx
index 50def957a1..45db496d35 100644
--- a/src/sentry/static/sentry/app/components/releaseStats.tsx
+++ b/src/sentry/static/sentry/app/components/releaseStats.tsx
@@ -2,13 +2,13 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
 
-import {Release} from 'app/types';
+import {Release, ProjectRelease} from 'app/types';
 import AvatarList from 'app/components/avatar/avatarList';
 import {t, tn} from 'app/locale';
 import space from 'app/styles/space';
 
 type Props = {
-  release: Release;
+  release: Release | ProjectRelease;
   withHeading: boolean;
 };
 
diff --git a/src/sentry/static/sentry/app/components/version.tsx b/src/sentry/static/sentry/app/components/version.tsx
index 2e18b8d5b0..45596daa23 100644
--- a/src/sentry/static/sentry/app/components/version.tsx
+++ b/src/sentry/static/sentry/app/components/version.tsx
@@ -145,6 +145,14 @@ Version.propTypes = {
   className: PropTypes.string,
 };
 
+// TODO(matej): try to wrap version with this when truncate prop is true (in seperate PR)
+// const VersionWrapper = styled('div')`
+//   ${overflowEllipsis};
+//   max-width: 100%;
+//   width: auto;
+//   display: inline-block;
+// `;
+
 const VersionText = styled('span')<{truncate?: boolean}>`
   ${p =>
     p.truncate &&
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 35b8d1b4b3..208c0e1688 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -115,6 +115,30 @@ export type Project = {
   processingIssues: number;
 } & AvatarProject;
 
+export type ProjectRelease = {
+  version: string;
+  dateCreated: string;
+  dateReleased: string | null;
+  commitCount: number;
+  authors: User[];
+  newGroups: number;
+  healthData: Health | null;
+  projectSlug: string;
+};
+
+export type Health = {
+  crash_free_users: number | null;
+  total_users: number;
+  crash_free_sessions: number | null;
+  stats: HealthGraphData;
+  crashes: number;
+  errors: number;
+  adoption: number | null;
+};
+export type HealthGraphData = {
+  [key: string]: [number, number][];
+};
+
 export type Team = {
   id: string;
   slug: string;
@@ -748,7 +772,7 @@ export type Release = {
   authors: User[];
   owner?: any; // TODO(ts)
   newGroups: number;
-  projects: {slug: string; name: string}[];
+  projects: {slug: string; name: string; healthData?: Health | null}[];
 } & BaseRelease;
 
 export type BaseRelease = {
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
index afcacd19a1..bf91ccc979 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
@@ -2,18 +2,18 @@ import React from 'react';
 import {Location} from 'history';
 import * as ReactRouter from 'react-router';
 import {Params} from 'react-router/lib/Router';
-import uniq from 'lodash/uniq';
-import flatten from 'lodash/flatten';
+import styled from '@emotion/styled';
+import pick from 'lodash/pick';
 
 import {t} from 'app/locale';
-import {Organization, Release} from 'app/types';
+import space from 'app/styles/space';
 import AsyncView from 'app/views/asyncView';
 import BetaTag from 'app/components/betaTag';
+import {Organization, Release, ProjectRelease} from 'app/types';
 import routeTitleGen from 'app/utils/routeTitle';
 import SearchBar from 'app/components/searchBar';
 import Pagination from 'app/components/pagination';
 import PageHeading from 'app/components/pageHeading';
-import {getQuery} from 'app/views/releases/list/utils';
 import withOrganization from 'app/utils/withOrganization';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import NoProjectMessage from 'app/components/noProjectMessage';
@@ -23,6 +23,9 @@ import EmptyStateWarning from 'app/components/emptyStateWarning';
 import ReleaseCard from 'app/views/releasesV2/list/releaseCard';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import Projects from 'app/utils/projects';
+import {URL_PARAM} from 'app/constants/globalSelectionHeader';
+
+import ReleaseListSortOptions from './releaseListSortOptions';
 
 type Props = {
   params: Params;
@@ -46,21 +49,43 @@ class ReleasesList extends AsyncView<Props, State> {
 
   getEndpoints(): [string, string, {}][] {
     const {organization, location} = this.props;
-    return [
-      [
-        'releases',
-        `/organizations/${organization.slug}/releases/`,
-        {query: getQuery(location.query)},
-      ],
-    ];
+
+    const query = {
+      ...pick(location.query, [...Object.values(URL_PARAM), 'cursor', 'query', 'sort']),
+      per_page: 50,
+      health: 1,
+    };
+
+    return [['releases', `/organizations/${organization.slug}/releases/`, {query}]];
+  }
+
+  getQuery() {
+    const {query} = this.props.location.query;
+
+    return typeof query === 'string' ? query : undefined;
+  }
+
+  getSort() {
+    const {sort} = this.props.location.query;
+
+    return typeof sort === 'string' ? sort : undefined;
   }
 
-  handleReleaseSearch = (query: string) => {
-    const {location, router, params} = this.props;
+  handleSearch = (query: string) => {
+    const {location, router} = this.props;
 
     router.push({
-      pathname: `/organizations/${params.orgId}/releases-v2/`,
-      query: {...location.query, query},
+      ...location,
+      query: {...location.query, cursor: undefined, query},
+    });
+  };
+
+  handleSort = (sort: string) => {
+    const {location, router} = this.props;
+
+    router.push({
+      ...location,
+      query: {...location.query, cursor: undefined, sort},
     });
   };
 
@@ -68,6 +93,35 @@ class ReleasesList extends AsyncView<Props, State> {
     return this.renderBody();
   }
 
+  transformToProjectRelease(releases: Release[]): ProjectRelease[] {
+    return releases.flatMap(release => {
+      return release.projects.map(project => {
+        const {
+          version,
+          dateCreated,
+          dateReleased,
+          commitCount,
+          authors,
+          lastEvent,
+          newGroups,
+        } = release;
+        const {slug, healthData} = project;
+        return {
+          version,
+          dateCreated,
+          dateReleased,
+          commitCount,
+          authors,
+          lastEvent,
+          newGroups,
+          healthData: healthData!,
+          projectSlug: slug,
+          // TODO(releasesv2): make api send also project platform
+        };
+      });
+    });
+  }
+
   renderInnerBody() {
     const {organization} = this.props;
     const {loading, releases} = this.state;
@@ -80,20 +134,16 @@ class ReleasesList extends AsyncView<Props, State> {
       return <EmptyStateWarning small>{t('There are no releases.')}</EmptyStateWarning>;
     }
 
-    const projectSlugs: string[] = uniq(
-      flatten(releases.map((r: Release) => r.projects.map(p => p.slug)))
-    );
+    const projectReleases = this.transformToProjectRelease(releases);
 
     return (
-      <Projects orgId={organization.slug} slugs={projectSlugs}>
+      <Projects orgId={organization.slug} slugs={projectReleases.map(r => r.projectSlug)}>
         {({projects}) =>
-          releases.map((release: Release) => (
+          projectReleases.map((release: ProjectRelease) => (
             <ReleaseCard
-              key={release.version}
+              key={`${release.version}-${release.dateCreated}`}
               release={release}
-              projects={projects.filter(project =>
-                release.projects.map(p => p.slug).includes(project.slug)
-              )}
+              project={projects.find(p => p.slug === release.projectSlug)}
             />
           ))
         }
@@ -102,7 +152,7 @@ class ReleasesList extends AsyncView<Props, State> {
   }
 
   renderBody() {
-    const {organization, location} = this.props;
+    const {organization} = this.props;
 
     return (
       <React.Fragment>
@@ -110,18 +160,22 @@ class ReleasesList extends AsyncView<Props, State> {
 
         <NoProjectMessage organization={organization}>
           <PageContent>
-            <PageHeader>
+            <StyledPageHeader>
               <PageHeading>
                 {t('Releases v2')} <BetaTag />
               </PageHeading>
-              <SearchBar
-                placeholder={t('Search for a release')}
-                onSearch={this.handleReleaseSearch}
-                defaultQuery={
-                  typeof location.query.query === 'string' ? location.query.query : ''
-                }
-              />
-            </PageHeader>
+              <SortAndFilterWrapper>
+                <ReleaseListSortOptions
+                  selected={this.getSort()}
+                  onSelect={this.handleSort}
+                />
+                <SearchBar
+                  placeholder={t('Search')}
+                  onSearch={this.handleSearch}
+                  defaultQuery={this.getQuery()}
+                />
+              </SortAndFilterWrapper>
+            </StyledPageHeader>
 
             <IntroBanner />
 
@@ -135,5 +189,19 @@ class ReleasesList extends AsyncView<Props, State> {
   }
 }
 
+const StyledPageHeader = styled(PageHeader)`
+  flex-wrap: wrap;
+  margin-bottom: 0;
+  ${PageHeading} {
+    margin-bottom: ${space(2)};
+  }
+`;
+const SortAndFilterWrapper = styled('div')`
+  display: grid;
+  grid-template-columns: auto 1fr;
+  grid-column-gap: ${space(2)};
+  margin-bottom: ${space(2)};
+`;
+
 export default withOrganization(ReleasesList);
 export {ReleasesList};
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx
index 01825851a4..f313d8224b 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx
@@ -6,20 +6,21 @@ import Count from 'app/components/count';
 import Version from 'app/components/version';
 import {Panel, PanelBody, PanelItem} from 'app/components/panels';
 import ReleaseStats from 'app/components/releaseStats';
-import {Project, AvatarProject, Release} from 'app/types';
+import {Project, AvatarProject, ProjectRelease} from 'app/types';
 import TimeSince from 'app/components/timeSince';
 import {t, tn} from 'app/locale';
 import {AvatarListWrapper} from 'app/components/avatar/avatarList';
-import ProjectList from 'app/components/avatar/projectList';
+import ProjectBadge from 'app/components/idBadge/projectBadge.jsx';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
 
 import ReleaseHealth from './releaseHealth';
 
 type Props = {
-  release: Release;
-  projects: Project[] | AvatarProject[];
+  release: ProjectRelease;
+  project?: Project | AvatarProject;
 };
 
-const ReleaseCard = ({release, projects}: Props) => {
+const ReleaseCard = ({release, project}: Props) => {
   // TODO(releasesv2): probably makes sense at this point to split the header and data to different files (move styles to share layout file)
   return (
     <Panel>
@@ -27,12 +28,10 @@ const ReleaseCard = ({release, projects}: Props) => {
         <StyledPanelItem>
           <HeaderLayout>
             <VersionColumn>
-              <ColumnTitle>{t('Release')}</ColumnTitle>
+              <ColumnTitle>{t('Version')}</ColumnTitle>
             </VersionColumn>
             <ProjectsColumn>
-              <ColumnTitle>
-                {tn('%s project', '%s projects', projects.length)}
-              </ColumnTitle>
+              <ColumnTitle>{t('Project name')}</ColumnTitle>
             </ProjectsColumn>
             <CommitsColumn>
               {release.commitCount > 0 && (
@@ -48,26 +47,25 @@ const ReleaseCard = ({release, projects}: Props) => {
             <CreatedColumn>
               <ColumnTitle>{t('Created')}</ColumnTitle>
             </CreatedColumn>
-            <LastEventColumn>
-              <ColumnTitle>{t('Last event')}</ColumnTitle>
-            </LastEventColumn>
             <NewIssuesColumn>
               <ColumnTitle>{t('New issues')}</ColumnTitle>
             </NewIssuesColumn>
           </HeaderLayout>
           <Layout>
             <VersionColumn>
-              <Version
-                version={release.version}
-                preserveGlobalSelection
-                tooltipRawVersion
-                truncate
-              />
-              <TimeWithIcon date={release.dateReleased || release.dateCreated} />
+              <VersionWrapper>
+                <Version
+                  version={release.version}
+                  preserveGlobalSelection
+                  tooltipRawVersion
+                  truncate
+                />
+                <TimeWithIcon date={release.dateReleased || release.dateCreated} />
+              </VersionWrapper>
             </VersionColumn>
 
             <ProjectsColumn>
-              <ProjectList projects={projects} />
+              <ProjectBadge project={project} avatarSize={14} key={project?.slug} />
             </ProjectsColumn>
 
             <CommitsColumn>
@@ -82,14 +80,6 @@ const ReleaseCard = ({release, projects}: Props) => {
               )}
             </CreatedColumn>
 
-            <LastEventColumn>
-              {release.lastEvent ? (
-                <TimeSince date={release.lastEvent} />
-              ) : (
-                <span>—</span>
-              )}
-            </LastEventColumn>
-
             <NewIssuesColumn>
               <Count value={release.newGroups || 0} />
             </NewIssuesColumn>
@@ -97,8 +87,7 @@ const ReleaseCard = ({release, projects}: Props) => {
         </StyledPanelItem>
       </PanelBody>
 
-      {/*  TODO(releasesv2)if has release health data */}
-      {Math.random() > 0.6 && <ReleaseHealth release={release} />}
+      {release.healthData && <ReleaseHealth release={release} />}
     </Panel>
   );
 };
@@ -109,23 +98,23 @@ const StyledPanelItem = styled(PanelItem)`
 
 const Layout = styled('div')`
   display: grid;
-  grid-template-areas: 'version projects commits created last-event new-issues';
-  grid-template-columns: 1fr 1fr 1fr 200px 1fr 1fr;
+  grid-template-areas: 'version projects commits created new-issues';
+  grid-template-columns: 3fr minmax(230px, 2fr) 4fr 1fr 1fr;
   grid-column-gap: ${space(1.5)};
   width: 100%;
   align-items: center;
   @media (max-width: ${p => p.theme.breakpoints[2]}) {
-    grid-template-areas: 'version projects created last-event new-issues';
-    grid-template-columns: 2fr 1fr 1fr 1fr 1fr;
+    grid-template-areas: 'version projects created new-issues';
+    grid-template-columns: 2fr 1fr 1fr 1fr;
   }
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+  @media (max-width: ${p => p.theme.breakpoints[1]}) {
     grid-template-areas: 'version projects new-issues';
-    grid-template-columns: 2fr 1fr 1fr;
+    grid-template-columns: 2fr 2fr 1fr;
   }
 `;
 
 const HeaderLayout = styled(Layout)`
-  align-items: flex-start;
+  align-items: flex-end;
 `;
 
 const Column = styled('div')`
@@ -135,20 +124,25 @@ const Column = styled('div')`
   }
 `;
 
-const RightAlignedColumn = styled('div')`
-  overflow: hidden;
+const RightAlignedColumn = styled(Column)`
   text-align: right;
 `;
 
+const CenterColumn = styled(Column)`
+  text-align: center;
+`;
+
 const VersionColumn = styled(Column)`
   grid-area: version;
+  display: flex;
+  align-items: center;
 `;
 
 const ProjectsColumn = styled(Column)`
   grid-area: projects;
 `;
 
-const CommitsColumn = styled(Column)`
+const CommitsColumn = styled(CenterColumn)`
   grid-area: commits;
   @media (max-width: ${p => p.theme.breakpoints[2]}) {
     display: none;
@@ -157,14 +151,7 @@ const CommitsColumn = styled(Column)`
 
 const CreatedColumn = styled(RightAlignedColumn)`
   grid-area: created;
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    display: none;
-  }
-`;
-
-const LastEventColumn = styled(RightAlignedColumn)`
-  grid-area: last-event;
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+  @media (max-width: ${p => p.theme.breakpoints[1]}) {
     display: none;
   }
 `;
@@ -182,6 +169,13 @@ const ColumnTitle = styled('div')`
   line-height: 1.2;
 `;
 
+const VersionWrapper = styled('div')`
+  ${overflowEllipsis};
+  max-width: 100%;
+  width: auto;
+  display: inline-block;
+`;
+
 const TimeWithIcon = styled(({date, ...props}) => (
   <span {...props}>
     <ClockIcon className="icon icon-clock" />
@@ -192,7 +186,7 @@ const TimeWithIcon = styled(({date, ...props}) => (
   color: ${p => p.theme.gray2};
   font-size: ${p => p.theme.fontSizeSmall};
   display: none;
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+  @media (max-width: ${p => p.theme.breakpoints[1]}) {
     display: inline-flex;
   }
 `;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releaseHealth.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releaseHealth.tsx
index 1abe16a6a1..5c842accaa 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/releaseHealth.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releaseHealth.tsx
@@ -1,70 +1,98 @@
 import React from 'react';
 import styled from '@emotion/styled';
 
-import {Release} from 'app/types';
+import {ProjectRelease} from 'app/types';
 import {PanelHeader, PanelBody, PanelItem} from 'app/components/panels';
-import ProjectBadge from 'app/components/idBadge/projectBadge';
-import {t} from 'app/locale';
+import {t, tn} from 'app/locale';
 import space from 'app/styles/space';
 import CircleProgress from 'app/components/circularProgressbar';
 import Count from 'app/components/count';
+import {defined} from 'app/utils';
 
 import UsersChart from './usersChart';
 import {mockData} from './mock';
 
 type Props = {
-  release: Release;
+  release: ProjectRelease;
 };
 
 const ReleaseHealth = ({release}: Props) => {
+  const {
+    adoption,
+    total_users,
+    crash_free_users,
+    crash_free_sessions,
+    crashes,
+    errors,
+  } = release.healthData!;
+
+  // TODO(releasesv2): make dynamic once api is finished
   return (
     <React.Fragment>
       <StyledPanelHeader>
         <HeaderLayout>
-          <ProjectColumn>{t('Project')}</ProjectColumn>
+          <DailyUsersColumn>{t('Daily active users')}</DailyUsersColumn>
+          <AdoptionColumn>{t('Release adoption')}</AdoptionColumn>
           <CrashFreeUsersColumn>{t('Crash free users')}</CrashFreeUsersColumn>
           <CrashFreeSessionsColumn>{t('Crash free sessions')}</CrashFreeSessionsColumn>
-          <DailyUsersColumn>{t('Daily active users')}</DailyUsersColumn>
           <CrashesColumn>{t('Crashes')}</CrashesColumn>
           <ErrorsColumn>{t('Errors')}</ErrorsColumn>
         </HeaderLayout>
       </StyledPanelHeader>
 
       <PanelBody>
-        {release.projects.map((project, index) => (
-          <PanelItem key={project.slug}>
-            <Layout>
-              <ProjectColumn>
-                <ProjectBadge project={project} avatarSize={14} />
-              </ProjectColumn>
-              {/* TODO(releasesv2): make dynamic once api is finished */}
-              <CrashFreeUsersColumn>
-                <CircleProgress value={mockData[index].crashFreeUsersPercent} />
-                <CircleProgressCaption>
-                  {mockData[index].crashFreeUsersPercent}%
-                </CircleProgressCaption>
-              </CrashFreeUsersColumn>
-              <CrashFreeSessionsColumn>
-                <CircleProgress value={mockData[index].crashFreeUsersSessionsPercent} />
-                <CircleProgressCaption>
-                  {mockData[index].crashFreeUsersSessionsPercent}%
-                </CircleProgressCaption>
-              </CrashFreeSessionsColumn>
-              <DailyUsersColumn>
-                <ChartWrapper>
-                  <UsersChart data={mockData[index].graphData} statsPeriod="24h" />
-                </ChartWrapper>
-                {mockData[index].dailyActiveUsers}%
-              </DailyUsersColumn>
-              <CrashesColumn>
-                <ColoredCount value={mockData[index].crashes} />
-              </CrashesColumn>
-              <ErrorsColumn>
-                <ColoredCount value={mockData[index].errors} />
-              </ErrorsColumn>
-            </Layout>
-          </PanelItem>
-        ))}
+        <StyledPanelItem>
+          <Layout>
+            <DailyUsersColumn>
+              <ChartWrapper>
+                <UsersChart data={mockData[0].graphData} height={20} statsPeriod="24h" />
+              </ChartWrapper>
+            </DailyUsersColumn>
+
+            <AdoptionColumn>
+              {defined(adoption) ? (
+                <React.Fragment>
+                  <CircleProgress value={adoption} />
+                  <CircleProgressCaption>
+                    {`${adoption}% ${tn('with %s user', 'with %s users', total_users)}`}
+                  </CircleProgressCaption>
+                </React.Fragment>
+              ) : (
+                '-'
+              )}
+            </AdoptionColumn>
+
+            <CrashFreeUsersColumn>
+              {defined(crash_free_users) ? (
+                <React.Fragment>
+                  <CircleProgress value={crash_free_users} />
+                  <CircleProgressCaption>{crash_free_users}%</CircleProgressCaption>
+                </React.Fragment>
+              ) : (
+                '-'
+              )}
+            </CrashFreeUsersColumn>
+
+            <CrashFreeSessionsColumn>
+              {defined(crash_free_sessions) ? (
+                <React.Fragment>
+                  <CircleProgress value={crash_free_sessions} />
+                  <CircleProgressCaption>{crash_free_sessions}%</CircleProgressCaption>
+                </React.Fragment>
+              ) : (
+                '-'
+              )}
+            </CrashFreeSessionsColumn>
+
+            <CrashesColumn>
+              <Count value={crashes ?? 0} />
+            </CrashesColumn>
+
+            <ErrorsColumn>
+              <Count value={errors ?? 0} />
+            </ErrorsColumn>
+          </Layout>
+        </StyledPanelItem>
       </PanelBody>
     </React.Fragment>
   );
@@ -72,6 +100,8 @@ const ReleaseHealth = ({release}: Props) => {
 
 const StyledPanelHeader = styled(PanelHeader)`
   border-top: 1px solid ${p => p.theme.borderDark};
+  border-bottom: none;
+  padding-bottom: ${space(1)};
   border-top-left-radius: 0;
   border-top-right-radius: 0;
   color: ${p => p.theme.gray2};
@@ -80,18 +110,18 @@ const StyledPanelHeader = styled(PanelHeader)`
 
 const Layout = styled('div')`
   display: grid;
-  grid-template-areas: 'project crash-free-users crash-free-sessions daily-users crashes errors';
-  grid-template-columns: 1fr 1fr 1fr 200px 1fr 1fr;
+  grid-template-areas: 'daily-users adoption crash-free-users crash-free-sessions crashes errors';
+  grid-template-columns: 3fr minmax(230px, 2fr) 2fr 2fr 1fr 1fr;
   grid-column-gap: ${space(1.5)};
   width: 100%;
   align-items: center;
   @media (max-width: ${p => p.theme.breakpoints[2]}) {
-    grid-template-areas: 'project crash-free-users crash-free-sessions crashes errors';
+    grid-template-areas: 'adoption crash-free-users crash-free-sessions crashes errors';
     grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
   }
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    grid-template-areas: 'project crash-free-users crash-free-sessions';
-    grid-template-columns: 1fr 1fr 1fr;
+  @media (max-width: ${p => p.theme.breakpoints[1]}) {
+    grid-template-areas: 'crash-free-users crash-free-sessions errors';
+    grid-template-columns: 2fr 2fr 1fr;
   }
 `;
 
@@ -103,26 +133,14 @@ const Column = styled('div')`
   overflow: hidden;
 `;
 
-const RightColumn = styled('div')`
-  overflow: 'hidden';
+const RightColumn = styled(Column)`
   text-align: right;
 `;
 
-const ProjectColumn = styled(Column)`
-  grid-area: project;
-`;
-const CrashFreeUsersColumn = styled(Column)`
-  grid-area: crash-free-users;
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    text-align: right;
-  }
-`;
-const CrashFreeSessionsColumn = styled(Column)`
-  grid-area: crash-free-sessions;
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    text-align: right;
-  }
+const CenterColumn = styled(Column)`
+  text-align: center;
 `;
+
 const DailyUsersColumn = styled(Column)`
   grid-area: daily-users;
   display: flex;
@@ -130,17 +148,37 @@ const DailyUsersColumn = styled(Column)`
     display: none;
   }
 `;
+const AdoptionColumn = styled(Column)`
+  grid-area: adoption;
+  @media (max-width: ${p => p.theme.breakpoints[1]}) {
+    display: none;
+  }
+`;
+const CrashFreeUsersColumn = styled(CenterColumn)`
+  grid-area: crash-free-users;
+  @media (max-width: ${p => p.theme.breakpoints[1]}) {
+    text-align: left;
+  }
+`;
+const CrashFreeSessionsColumn = styled(CenterColumn)`
+  grid-area: crash-free-sessions;
+  @media (max-width: ${p => p.theme.breakpoints[1]}) {
+    text-align: left;
+  }
+`;
 const CrashesColumn = styled(RightColumn)`
   grid-area: crashes;
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+  @media (max-width: ${p => p.theme.breakpoints[1]}) {
     display: none;
   }
 `;
 const ErrorsColumn = styled(RightColumn)`
   grid-area: errors;
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    display: none;
-  }
+`;
+
+const StyledPanelItem = styled(PanelItem)`
+  background: ${p => p.theme.offWhite};
+  padding-top: 0;
 `;
 
 const CircleProgressCaption = styled('span')`
@@ -148,15 +186,11 @@ const CircleProgressCaption = styled('span')`
 `;
 
 const ChartWrapper = styled('div')`
-  width: 150px;
   margin-right: ${space(2)};
-  position: relative;
-  bottom: 4px;
-`;
-
-const ColoredCount = styled(Count)`
-  /* TODO(releasesv2): decide on threshold, make dynamic */
-  ${p => p.value > 7000 && `color: ${p.theme.red};`}
+  g > .barchart-rect {
+    background: ${p => p.theme.gray2};
+    fill: ${p => p.theme.gray2};
+  }
 `;
 
 export default ReleaseHealth;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releaseListSortOptions.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releaseListSortOptions.tsx
new file mode 100644
index 0000000000..289ac39a8c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releaseListSortOptions.tsx
@@ -0,0 +1,60 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import DropdownControl, {DropdownItem} from 'app/components/dropdownControl';
+
+type Props = {
+  selected?: string;
+  onSelect: (key: string) => void;
+};
+
+const ReleaseListSortOptions = ({selected = 'date', onSelect}: Props) => {
+  const filterOptions = [
+    {
+      key: 'date',
+      label: t('Date Created'),
+    },
+    {
+      key: 'adoptionRate',
+      label: t('Adoption Rate'),
+    },
+    {
+      key: 'crashFreeUsers',
+      label: t('Crash Free Users'),
+    },
+    {
+      key: 'crashFreeSessions',
+      label: t('Crash Free Sessions'),
+    },
+  ];
+
+  const label = (
+    <React.Fragment>
+      <LabelText>{t('Sort by')}: &nbsp; </LabelText>
+      {filterOptions.find(filterItem => filterItem.key === selected)?.label}
+    </React.Fragment>
+  );
+
+  return (
+    <DropdownControl label={label}>
+      {filterOptions.map(filterItem => (
+        <DropdownItem
+          key={filterItem.key}
+          onSelect={onSelect}
+          eventKey={filterItem.key}
+          isActive={selected === filterItem.key}
+        >
+          {filterItem.label}
+        </DropdownItem>
+      ))}
+    </DropdownControl>
+  );
+};
+
+const LabelText = styled('em')`
+  font-style: normal;
+  color: ${p => p.theme.gray2};
+`;
+
+export default ReleaseListSortOptions;
