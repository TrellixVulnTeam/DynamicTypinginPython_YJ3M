commit 8df7769b862f579b788dcf93c192ac2197547140
Author: Manu <manu@sentry.io>
Date:   Fri Nov 22 13:00:19 2019 -0800

    feat(outcomes): Support single tenant (#15654)
    
    For outcomes based TSDB models, sentry.io now reads from `SnubaTSDB` and writes to `DummyTSDB`.
    
    This doesn't work for single tenant. For single tenant we still want to use `RedisTSDB` for outcomes based TSDB models. Single tenant uses `RedisSnubaTSDB`.
    
    So, this PR makes it such that `RedisSnubaTSDB` does the following:
    * Reads and writes to `RedisTSDB` for outcomes based TSDB models
    * Reads from `SnubaTSDB` and writes to `DummyTSDB` for events based TSDB models (i.e. the same as before we starting moving outcomes to use Snuba - [call site](https://github.com/getsentry/sentry/blob/95767d455b8004ec4b4c5026d84b64b6348e6d37/src/sentry/tsdb/redissnuba.py#L62) and [settings](https://github.com/getsentry/sentry/blob/95767d455b8004ec4b4c5026d84b64b6348e6d37/src/sentry/tsdb/snuba.py#L26-L35))
    * Reads and writes to `RedisTSDB` for everything else.

diff --git a/src/sentry/tsdb/redissnuba.py b/src/sentry/tsdb/redissnuba.py
index 4f2c92804b..26e0e3e308 100644
--- a/src/sentry/tsdb/redissnuba.py
+++ b/src/sentry/tsdb/redissnuba.py
@@ -59,7 +59,9 @@ assert (
 
 model_backends = {
     # model: (read, write)
-    model: ("redis", "redis") if model not in SnubaTSDB.model_query_settings else ("snuba", "dummy")
+    model: ("redis", "redis")
+    if model not in SnubaTSDB.non_outcomes_query_settings
+    else ("snuba", "dummy")
     for model in BaseTSDB.models
 }
 
diff --git a/src/sentry/tsdb/snuba.py b/src/sentry/tsdb/snuba.py
index 4b38bd9d3b..be5dac8d8d 100644
--- a/src/sentry/tsdb/snuba.py
+++ b/src/sentry/tsdb/snuba.py
@@ -31,15 +31,10 @@ class SnubaTSDB(BaseTSDB):
     will return empty results for unsupported models.
     """
 
-    project_filter_model_query_settings = {
-        model: SnubaModelQuerySettings(
-            snuba.Dataset.Outcomes, "project_id", "times_seen", [["reason", "=", reason]]
-        )
-        for reason, model in FILTER_STAT_KEYS_TO_VALUES.items()
-    }
-
-    # ``model_query_settings`` is a translation of TSDB models into required settings for querying snuba
-    other_model_query_settings = {
+    # ``non_outcomes_query_settings`` are all the query settings for for non outcomes based TSDB models.
+    # Single tenant reads Snuba for these models, and writes to DummyTSDB. It reads and writes to Redis for all the
+    # other models.
+    non_outcomes_query_settings = {
         TSDBModel.project: SnubaModelQuerySettings(snuba.Dataset.Events, "project_id", None, None),
         TSDBModel.group: SnubaModelQuerySettings(snuba.Dataset.Events, "issue", None, None),
         TSDBModel.release: SnubaModelQuerySettings(
@@ -60,6 +55,18 @@ class SnubaTSDB(BaseTSDB):
         TSDBModel.frequent_issues_by_project: SnubaModelQuerySettings(
             snuba.Dataset.Events, "project_id", "issue", None
         ),
+    }
+
+    # ``project_filter_model_query_settings`` and ``outcomes_partial_query_settings`` are all the TSDB models for
+    # outcomes
+    project_filter_model_query_settings = {
+        model: SnubaModelQuerySettings(
+            snuba.Dataset.Outcomes, "project_id", "times_seen", [["reason", "=", reason]]
+        )
+        for reason, model in FILTER_STAT_KEYS_TO_VALUES.items()
+    }
+
+    outcomes_partial_query_settings = {
         TSDBModel.organization_total_received: SnubaModelQuerySettings(
             snuba.Dataset.Outcomes,
             "org_id",
@@ -116,8 +123,11 @@ class SnubaTSDB(BaseTSDB):
         ),
     }
 
+    # ``model_query_settings`` is a translation of TSDB models into required settings for querying snuba
     model_query_settings = dict(
-        project_filter_model_query_settings.items() + other_model_query_settings.items()
+        project_filter_model_query_settings.items()
+        + outcomes_partial_query_settings.items()
+        + non_outcomes_query_settings.items()
     )
 
     # ``model_columns_being_upgraded`` are models that currently use Redis but are being
diff --git a/tests/sentry/tsdb/test_redissnuba.py b/tests/sentry/tsdb/test_redissnuba.py
new file mode 100644
index 0000000000..7c5657563f
--- /dev/null
+++ b/tests/sentry/tsdb/test_redissnuba.py
@@ -0,0 +1,38 @@
+from __future__ import absolute_import
+
+from sentry.tsdb.base import TSDBModel
+from sentry.tsdb.snuba import SnubaTSDB
+from sentry.tsdb.redissnuba import selector_func, method_specifications, READ
+
+
+def get_callargs(model):
+    """
+    Represents for all possible ways that a model could be passed to ``selector_func`` through the callargs
+    """
+    return {
+        "model": model,
+        "models": [model],
+        "items": [(model, "key", ["values"])],
+        "requests": [(model, "data")],
+    }
+
+
+def test_redissnuba_connects_to_correct_backend():
+    should_resolve_to_redis = set(list(TSDBModel)) - set(
+        SnubaTSDB.non_outcomes_query_settings.keys()
+    )
+    should_resolve_to_snuba = SnubaTSDB.non_outcomes_query_settings.keys()
+
+    methods = set(method_specifications.keys()) - set(["flush"])
+
+    for method in methods:
+        for model in should_resolve_to_redis:
+            assert "redis" == selector_func(method, get_callargs(model))
+
+        for model in should_resolve_to_snuba:
+            read_or_write, _ = method_specifications.get(method)
+
+            if read_or_write == READ:
+                assert "snuba" == selector_func(method, get_callargs(model))
+            else:
+                assert "dummy" == selector_func(method, get_callargs(model))
