commit 667d42d696f8a6075f6b6a83b556c670285bbff9
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Aug 20 10:45:52 2018 -0700

    ref(discover): Refactor dropdowns for aggregations and conditions (#9370)
    
    Simplify condition and aggregation components, also makes it easier to upgrade react-select since it allows controlled input values

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx
index 021ba53d6b..b8ee21cf50 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx
@@ -18,18 +18,18 @@ export default class Aggregation extends React.Component {
   constructor(props) {
     super(props);
     this.state = {
-      selectedFunction: null,
+      inputValue: '',
     };
   }
 
   getOptions() {
     const currentValue = getInternal(this.props.value);
-    const shouldDisplayValue = currentValue || this.state.selectedFunction;
+    const shouldDisplayValue = currentValue || this.state.inputValue;
     return shouldDisplayValue ? [{label: currentValue, value: currentValue}] : [];
   }
 
-  filterOptions = (_options, input, _value) => {
-    input = input || this.state.selectedFunction || '';
+  filterOptions = () => {
+    const input = this.state.inputValue;
 
     let optionList = [
       {value: 'count', label: 'count'},
@@ -83,56 +83,48 @@ export default class Aggregation extends React.Component {
     const topKValues = new Set([...TOPK_COUNTS.map(num => `topK(${num})`)]);
 
     if (option.value === 'uniq' || option.value === 'avg' || option.value === 'topK') {
-      this.setState({selectedFunction: option.value}, this.focus);
+      this.setState({inputValue: option.value}, this.focus);
     } else if (topKValues.has(option.value)) {
       this.setState(
         {
-          selectedFunction: option.value,
+          inputValue: option.value,
         },
         this.focus
       );
     } else {
-      this.setState({selectedFunction: null}, () => {
-        this.props.onChange(getExternal(option.value));
-      });
+      this.setState({inputValue: option.value});
+      this.props.onChange(getExternal(option.value));
     }
   };
 
-  handleClose = () => {
-    this.setState({selectedFunction: null});
-  };
-
   inputRenderer = props => {
-    const val = `${this.state.selectedFunction || ''}`.trim();
-
     return (
       <input
         type="text"
         {...props}
-        value={props.value || val}
+        value={props.value || this.state.inputValue}
         style={{width: '100%', border: 0}}
       />
     );
   };
 
   valueRenderer = option => {
-    const hideValue = this.state.selectedFunction;
+    const hideValue = this.state.inputValue;
     return hideValue ? '' : option.value;
   };
 
   handleInputChange = value => {
-    if (value === '') {
-      this.setState({selectedFunction: null});
-    }
+    this.setState({
+      inputValue: value,
+    });
   };
 
   render() {
-    const value = getInternal(this.props.value);
     return (
       <Box w={1}>
         <SelectControl
           forwardedRef={ref => (this.select = ref)}
-          value={value}
+          value={getInternal(this.props.value)}
           placeholder={
             <PlaceholderText>{t('Add aggregation function...')}</PlaceholderText>
           }
@@ -145,7 +137,6 @@ export default class Aggregation extends React.Component {
           clearable={false}
           backspaceRemoves={false}
           deleteRemoves={false}
-          onClose={this.handleClose}
           inputRenderer={this.inputRenderer}
           valueRenderer={this.valueRenderer}
           onInputChange={this.handleInputChange}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
index 71d3554cf3..dcac9071b5 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
@@ -20,8 +20,7 @@ export default class Condition extends React.Component {
   constructor(props) {
     super(props);
     this.state = {
-      selectedColumn: null,
-      selectedOperator: null,
+      inputValue: '',
     };
   }
 
@@ -33,26 +32,27 @@ export default class Condition extends React.Component {
     const external = getExternal(option.value, this.props.columns);
 
     if (isValidCondition(external, this.props.columns)) {
-      this.props.onChange(external);
-      return;
-    }
-
-    if (new Set(this.props.columns.map(({name}) => name)).has(external[0])) {
-      this.setState({selectedColumn: external[0]}, this.focus);
-    }
+      this.setState(
+        {
+          inputValue: '',
+        },
+        this.props.onChange(external)
+      );
 
-    if (new Set(CONDITION_OPERATORS).has(external[1])) {
-      this.setState({selectedOperator: external[1]}, this.focus);
+      return;
     }
-  };
 
-  handleClose = () => {
-    this.setState({selectedColumn: null, selectedOperator: null});
+    this.setState(
+      {
+        inputValue: option.value,
+      },
+      this.focus
+    );
   };
 
   getOptions() {
     const currentValue = getInternal(this.props.value);
-    const shouldDisplayValue = currentValue || this.state.selectedColumn;
+    const shouldDisplayValue = currentValue || this.state.inputValue;
     return shouldDisplayValue ? [{label: currentValue, value: currentValue}] : [];
   }
 
@@ -72,9 +72,7 @@ export default class Condition extends React.Component {
   }
 
   filterOptions = (options, input) => {
-    input =
-      input ||
-      `${this.state.selectedColumn || ''} ${this.state.selectedOperator || ''}`.trim();
+    input = input || this.state.inputValue;
 
     let optionList = options;
     const external = getExternal(input, this.props.columns);
@@ -84,9 +82,8 @@ export default class Condition extends React.Component {
       return [];
     }
 
-    const hasSelectedColumn = external[0] !== null || this.state.selectedColumn !== null;
-    const hasSelectedOperator =
-      external[1] !== null || this.state.selectedOperator !== null;
+    const hasSelectedColumn = external[0] !== null;
+    const hasSelectedOperator = external[1] !== null;
 
     if (!hasSelectedColumn) {
       optionList = this.props.columns.map(({name}) => ({
@@ -96,9 +93,9 @@ export default class Condition extends React.Component {
     }
 
     if (hasSelectedColumn && !hasSelectedOperator) {
-      const selectedColumn = external[0] || this.state.selectedColumn;
+      const selectedColumn = external[0];
       optionList = this.getConditionsForColumn(selectedColumn).map(op => {
-        const value = `${external[0] || this.state.selectedColumn} ${op}`;
+        const value = `${selectedColumn} ${op}`;
         return {
           value,
           label: value,
@@ -114,22 +111,18 @@ export default class Condition extends React.Component {
   };
 
   inputRenderer = props => {
-    let val = `${this.state.selectedColumn || ''} ${this.state.selectedOperator ||
-      ''}`.trim();
-
     return (
       <input
         type="text"
         {...props}
-        value={props.value || val}
-        style={{width: '100%', border: 0}}
+        value={this.state.inputValue}
+        style={{width: '100%', border: 0, zIndex: 1000}}
       />
     );
   };
 
   valueRenderer = option => {
-    const hideValue = this.state.selectedColumn || this.state.selectedOperator;
-
+    const hideValue = this.state.inputValue;
     return hideValue ? '' : option.value;
   };
 
@@ -139,19 +132,9 @@ export default class Condition extends React.Component {
   };
 
   handleInputChange = value => {
-    const external = getExternal(value, this.props.columns);
-
-    if (!external[0] && this.state.selectedColumn) {
-      this.setState({
-        selectedColumn: null,
-      });
-    }
-
-    if (!external[1] && this.state.selectedOperator) {
-      this.setState({
-        selectedOperator: null,
-      });
-    }
+    this.setState({
+      inputValue: value,
+    });
 
     return value;
   };
@@ -172,14 +155,13 @@ export default class Condition extends React.Component {
           clearable={false}
           backspaceRemoves={false}
           deleteRemoves={false}
-          onClose={this.handleClose}
-          creatable={true}
-          promptTextCreator={text => text}
           isValidNewOption={this.isValidNewOption}
           inputRenderer={this.inputRenderer}
           valueRenderer={this.valueRenderer}
-          shouldKeyDownEventCreateNewOption={this.shouldKeyDownEventCreateNewOption}
           onInputChange={this.handleInputChange}
+          creatable={true}
+          promptTextCreator={text => text}
+          shouldKeyDownEventCreateNewOption={this.shouldKeyDownEventCreateNewOption}
         />
       </Box>
     );
diff --git a/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx b/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx
index 5bb76d5fa8..55043bc57e 100644
--- a/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx
@@ -5,7 +5,7 @@ import Aggregation from 'app/views/organizationDiscover/aggregations/aggregation
 
 describe('Aggregation', function() {
   describe('render()', function() {
-    it('renders empty, count, topK, uniq and avg', function() {
+    it('renders empty, count, topK, uniq and avg', async function() {
       const data = [
         {value: [null, null, null], expectedTextValue: 'Add aggregation function...'},
         {value: ['count()', null, 'count'], expectedTextValue: 'count'},
@@ -27,7 +27,7 @@ describe('Aggregation', function() {
         },
       ];
 
-      data.forEach(function(item) {
+      data.forEach(async function(item) {
         const wrapper = mount(
           <Aggregation value={item.value} onChange={jest.fn()} columns={[]} />
         );
@@ -46,33 +46,38 @@ describe('Aggregation', function() {
     });
 
     it('displays top level options with no input', function() {
-      const options = wrapper.instance().filterOptions(null, '', null);
+      wrapper.setState({inputValue: ''});
+      const options = wrapper.instance().filterOptions();
 
       expect(options).toHaveLength(4);
       expect(options.map(({value}) => value)).toEqual(['count', 'uniq', 'topK', 'avg']);
     });
 
     it('displays uniq options on input `uniq`', function() {
-      const options = wrapper.instance().filterOptions(null, 'uniq', null);
+      wrapper.setState({inputValue: 'uniq'});
+      const options = wrapper.instance().filterOptions();
       expect(options).toHaveLength(2);
       expect(options[0]).toEqual({value: 'uniq(col1)', label: 'uniq(col1)'});
       expect(options[1]).toEqual({value: 'uniq(col2)', label: 'uniq(col2)'});
     });
 
     it('displays number value options on input `avg`', function() {
-      const options = wrapper.instance().filterOptions(null, 'avg', null);
+      wrapper.setState({inputValue: 'avg'});
+      const options = wrapper.instance().filterOptions();
       expect(options).toHaveLength(1);
       expect(options[0]).toEqual({value: 'avg(col2)', label: 'avg(col2)'});
     });
 
     it('displays TopK value options on input `topK`', function() {
-      const options = wrapper.instance().filterOptions(null, 'topK', null);
+      wrapper.setState({inputValue: 'topK'});
+      const options = wrapper.instance().filterOptions();
       expect(options).toHaveLength(5);
       expect(options[0]).toEqual({value: 'topK(5)', label: 'topK(5)(...)'});
     });
 
     it('displays TopK column options on input topK(5)', function() {
-      const options = wrapper.instance().filterOptions(null, 'topK(5)', null);
+      wrapper.setState({inputValue: 'topK(5)'});
+      const options = wrapper.instance().filterOptions();
       expect(options).toHaveLength(2);
       expect(options[0]).toEqual({value: 'topK(5)(col1)', label: 'topK(5)(col1)'});
       expect(options[1]).toEqual({value: 'topK(5)(col2)', label: 'topK(5)(col2)'});
@@ -97,25 +102,25 @@ describe('Aggregation', function() {
     describe('handles intermediate selections', function() {
       it('uniq', function() {
         wrapper.instance().handleChange({value: 'uniq'});
-        expect(wrapper.instance().state.selectedFunction).toBe('uniq');
+        expect(wrapper.instance().state.inputValue).toBe('uniq');
         expect(focusSpy).toHaveBeenCalled();
       });
 
       it('avg', function() {
         wrapper.instance().handleChange({value: 'avg'});
-        expect(wrapper.instance().state.selectedFunction).toBe('avg');
+        expect(wrapper.instance().state.inputValue).toBe('avg');
         expect(focusSpy).toHaveBeenCalled();
       });
 
       it('topK without number', function() {
         wrapper.instance().handleChange({value: 'topK'});
-        expect(wrapper.instance().state.selectedFunction).toBe('topK');
+        expect(wrapper.instance().state.inputValue).toBe('topK');
         expect(focusSpy).toHaveBeenCalled();
       });
 
       it('topK with number', function() {
         wrapper.instance().handleChange({value: 'topK(10)'});
-        expect(wrapper.instance().state.selectedFunction).toBe('topK(10)');
+        expect(wrapper.instance().state.inputValue).toBe('topK(10)');
         expect(focusSpy).toHaveBeenCalled();
       });
     });
@@ -126,7 +131,7 @@ describe('Aggregation', function() {
       it('handles count, avg, uniq, topK', function() {
         validFinalSelections.forEach(function(value) {
           wrapper.instance().handleChange({value});
-          expect(wrapper.instance().state.selectedFunction).toBe(null);
+          expect(wrapper.instance().state.inputValue).toBe(value);
           expect(focusSpy).not.toHaveBeenCalled();
         });
       });
