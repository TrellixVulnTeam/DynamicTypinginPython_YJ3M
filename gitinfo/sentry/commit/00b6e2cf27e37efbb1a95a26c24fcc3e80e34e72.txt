commit 00b6e2cf27e37efbb1a95a26c24fcc3e80e34e72
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Mar 7 11:32:53 2014 -0800

    Refactor model/signal receivers import patterns
    
    Conflicts:
            src/sentry/utils/imports.py
            src/sentry/utils/runner.py

diff --git a/src/sentry/models/__init__.py b/src/sentry/models/__init__.py
index 62d80e37d8..97706700f0 100644
--- a/src/sentry/models/__init__.py
+++ b/src/sentry/models/__init__.py
@@ -5,239 +5,11 @@ sentry.models
 :copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-# TODO(dcramer): move signal receivers elsewhere and just use this module
-# as an initializer
-
 from __future__ import absolute_import
 
-from .accessgroup import *  # NOQA
-from .activity import *  # NOQA
-from .alert import *  # NOQA
-from .event import *  # NOQA
-from .eventmapping import *  # NOQA
-from .group import *  # NOQA
-from .groupbookmark import *  # NOQA
-from .groupcountbyminute import *  # NOQA
-from .groupmeta import *  # NOQA
-from .groupseen import *  # NOQA
-from .grouptagkey import *  # NOQA
-from .grouptagvalue import *  # NOQA
-from .lostpasswordhash import *  # NOQA
-from .option import *  # NOQA
-from .pendingteammember import *  # NOQA
-from .project import *  # NOQA
-from .projectcountbyminute import *  # NOQA
-from .projectkey import *  # NOQA
-from .projectoption import *  # NOQA
-from .tagkey import *  # NOQA
-from .tagvalue import *  # NOQA
-from .team import *  # NOQA
-from .teammember import *  # NOQA
-from .user import *  # NOQA
-from .useroption import *  # NOQA
-
-
-from pkg_resources import parse_version as Version
-
+from sentry.utils.imports import import_submodules
 from south.modelsinspector import add_introspection_rules
 
-from django.conf import settings
-from django.contrib.auth.signals import user_logged_in
-from django.db.models.signals import post_syncdb, post_save, pre_delete
-
-from sentry.constants import MEMBER_OWNER
-from sentry.db.models import update
-from sentry.signals import buffer_incr_complete, regression_signal
-from sentry.utils.safe import safe_execute
-
-__all__ = ('Event', 'Group', 'Project')
-
-
-def create_default_project(created_models, verbosity=2, **kwargs):
-    if Project not in created_models:
-        return
-    if Project.objects.filter(id=settings.SENTRY_PROJECT).exists():
-        return
-
-    try:
-        user = User.objects.filter(is_superuser=True)[0]
-    except IndexError:
-        user = None
-
-    project = Project.objects.create(
-        public=False,
-        name='Sentry (Internal)',
-        slug='sentry',
-        owner=user,
-        platform='django',
-    )
-    # HACK: manually update the ID after insert due to Postgres
-    # sequence issues. Seriously, fuck everything about this.
-    # TODO(dcramer): find a better solution
-    if project.id != settings.SENTRY_PROJECT:
-        project.key_set.all().delete()
-        project.update(id=settings.SENTRY_PROJECT)
-        create_team_and_keys_for_project(project, created=True)
-
-    if verbosity > 0:
-        print 'Created internal Sentry project (slug=%s, id=%s)' % (project.slug, project.id)
-
-
-def set_sentry_version(latest=None, **kwargs):
-    import sentry
-    current = sentry.get_version()
-
-    version = Option.objects.get_value(
-        key='sentry:latest_version',
-        default=''
-    )
-
-    for ver in (current, version):
-        if Version(ver) >= Version(latest):
-            return
-
-    Option.objects.set_value(
-        key='sentry:latest_version',
-        value=(latest or current)
-    )
-
-
-def create_team_and_keys_for_project(instance, created, **kwargs):
-    if not created or kwargs.get('raw'):
-        return
-
-    if not instance.owner:
-        return
-
-    if not instance.team:
-        team = Team(owner=instance.owner, name=instance.name)
-        slugify_instance(team, instance.slug)
-        team.save()
-        update(instance, team=team)
-
-    if not ProjectKey.objects.filter(project=instance, user__isnull=True).exists():
-        ProjectKey.objects.create(
-            project=instance,
-        )
-
-
-def create_team_member_for_owner(instance, created, **kwargs):
-    if not created:
-        return
-
-    if not instance.owner:
-        return
-
-    instance.member_set.get_or_create(
-        user=instance.owner,
-        type=MEMBER_OWNER,
-    )
-
-
-def remove_key_for_team_member(instance, **kwargs):
-    for project in instance.team.project_set.all():
-        ProjectKey.objects.filter(
-            project=project,
-            user=instance.user,
-        ).delete()
-
-
-# Set user language if set
-def set_language_on_logon(request, user, **kwargs):
-    language = UserOption.objects.get_value(
-        user=user,
-        project=None,
-        key='language',
-        default=None,
-    )
-    if language and hasattr(request, 'session'):
-        request.session['django_language'] = language
-
-
-@buffer_incr_complete.connect(sender=TagValue, weak=False)
-def record_project_tag_count(filters, created, **kwargs):
-    from sentry import app
-
-    if not created:
-        return
-
-    app.buffer.incr(TagKey, {
-        'values_seen': 1,
-    }, {
-        'project': filters['project'],
-        'key': filters['key'],
-    })
-
-
-@buffer_incr_complete.connect(sender=GroupTag, weak=False)
-def record_group_tag_count(filters, created, **kwargs):
-    from sentry import app
-
-    if not created:
-        return
-
-    app.buffer.incr(GroupTagKey, {
-        'values_seen': 1,
-    }, {
-        'project': filters['project'],
-        'group': filters['group'],
-        'key': filters['key'],
-    })
-
-
-@regression_signal.connect(weak=False)
-def create_regression_activity(instance, **kwargs):
-    if instance.times_seen == 1:
-        # this event is new
-        return
-    Activity.objects.create(
-        project=instance.project,
-        group=instance,
-        type=Activity.SET_REGRESSION,
-    )
-
-
-def on_alert_creation(instance, **kwargs):
-    from sentry.plugins import plugins
-
-    for plugin in plugins.for_project(instance.project):
-        safe_execute(plugin.on_alert, alert=instance)
-
-
-# Signal registration
-post_syncdb.connect(
-    create_default_project,
-    dispatch_uid="create_default_project",
-    weak=False,
-)
-post_save.connect(
-    create_team_and_keys_for_project,
-    sender=Project,
-    dispatch_uid="create_team_and_keys_for_project",
-    weak=False,
-)
-post_save.connect(
-    create_team_member_for_owner,
-    sender=Team,
-    dispatch_uid="create_team_member_for_owner",
-    weak=False,
-)
-pre_delete.connect(
-    remove_key_for_team_member,
-    sender=TeamMember,
-    dispatch_uid="remove_key_for_team_member",
-    weak=False,
-)
-user_logged_in.connect(
-    set_language_on_logon,
-    dispatch_uid="set_language_on_logon",
-    weak=False
-)
-post_save.connect(
-    on_alert_creation,
-    sender=Alert,
-    dispatch_uid="on_alert_creation",
-    weak=False,
-)
+import_submodules(globals(), __name__, __path__)
 
 add_introspection_rules([], ["^social_auth\.fields\.JSONField"])
diff --git a/src/sentry/receivers/__init__.py b/src/sentry/receivers/__init__.py
new file mode 100644
index 0000000000..488216ed55
--- /dev/null
+++ b/src/sentry/receivers/__init__.py
@@ -0,0 +1,3 @@
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
new file mode 100644
index 0000000000..7c8b0e8c54
--- /dev/null
+++ b/src/sentry/receivers/core.py
@@ -0,0 +1,201 @@
+from django.conf import settings
+from django.contrib.auth.signals import user_logged_in
+from django.db.models.signals import post_syncdb, post_save, pre_delete
+from pkg_resources import parse_version as Version
+
+from sentry.constants import MEMBER_OWNER
+from sentry.db.models import update
+from sentry.db.models.utils import slugify_instance
+from sentry.models import (
+    Project, User, Option, Team, ProjectKey, UserOption, TagKey, TagValue,
+    GroupTag, GroupTagKey, Activity, TeamMember, Alert)
+from sentry.signals import buffer_incr_complete, regression_signal
+from sentry.utils.safe import safe_execute
+
+
+def create_default_project(created_models, verbosity=2, **kwargs):
+    if Project not in created_models:
+        return
+    if Project.objects.filter(id=settings.SENTRY_PROJECT).exists():
+        return
+
+    try:
+        user = User.objects.filter(is_superuser=True)[0]
+    except IndexError:
+        user = None
+
+    project = Project.objects.create(
+        public=False,
+        name='Sentry (Internal)',
+        slug='sentry',
+        owner=user,
+        platform='django',
+    )
+    # HACK: manually update the ID after insert due to Postgres
+    # sequence issues. Seriously, fuck everything about this.
+    # TODO(dcramer): find a better solution
+    if project.id != settings.SENTRY_PROJECT:
+        project.key_set.all().delete()
+        project.update(id=settings.SENTRY_PROJECT)
+        create_team_and_keys_for_project(project, created=True)
+
+    if verbosity > 0:
+        print 'Created internal Sentry project (slug=%s, id=%s)' % (project.slug, project.id)
+
+
+def set_sentry_version(latest=None, **kwargs):
+    import sentry
+    current = sentry.get_version()
+
+    version = Option.objects.get_value(
+        key='sentry:latest_version',
+        default=''
+    )
+
+    for ver in (current, version):
+        if Version(ver) >= Version(latest):
+            return
+
+    Option.objects.set_value(
+        key='sentry:latest_version',
+        value=(latest or current)
+    )
+
+
+def create_team_and_keys_for_project(instance, created, **kwargs):
+    if not created or kwargs.get('raw'):
+        return
+
+    if not instance.owner:
+        return
+
+    if not instance.team:
+        team = Team(owner=instance.owner, name=instance.name)
+        slugify_instance(team, instance.slug)
+        team.save()
+        update(instance, team=team)
+
+    if not ProjectKey.objects.filter(project=instance, user__isnull=True).exists():
+        ProjectKey.objects.create(
+            project=instance,
+        )
+
+
+def create_team_member_for_owner(instance, created, **kwargs):
+    if not created:
+        return
+
+    if not instance.owner:
+        return
+
+    instance.member_set.get_or_create(
+        user=instance.owner,
+        type=MEMBER_OWNER,
+    )
+
+
+def remove_key_for_team_member(instance, **kwargs):
+    for project in instance.team.project_set.all():
+        ProjectKey.objects.filter(
+            project=project,
+            user=instance.user,
+        ).delete()
+
+
+# Set user language if set
+def set_language_on_logon(request, user, **kwargs):
+    language = UserOption.objects.get_value(
+        user=user,
+        project=None,
+        key='language',
+        default=None,
+    )
+    if language and hasattr(request, 'session'):
+        request.session['django_language'] = language
+
+
+@buffer_incr_complete.connect(sender=TagValue, weak=False)
+def record_project_tag_count(filters, created, **kwargs):
+    from sentry import app
+
+    if not created:
+        return
+
+    app.buffer.incr(TagKey, {
+        'values_seen': 1,
+    }, {
+        'project': filters['project'],
+        'key': filters['key'],
+    })
+
+
+@buffer_incr_complete.connect(sender=GroupTag, weak=False)
+def record_group_tag_count(filters, created, **kwargs):
+    from sentry import app
+
+    if not created:
+        return
+
+    app.buffer.incr(GroupTagKey, {
+        'values_seen': 1,
+    }, {
+        'project': filters['project'],
+        'group': filters['group'],
+        'key': filters['key'],
+    })
+
+
+@regression_signal.connect(weak=False)
+def create_regression_activity(instance, **kwargs):
+    if instance.times_seen == 1:
+        # this event is new
+        return
+    Activity.objects.create(
+        project=instance.project,
+        group=instance,
+        type=Activity.SET_REGRESSION,
+    )
+
+
+def on_alert_creation(instance, **kwargs):
+    from sentry.plugins import plugins
+
+    for plugin in plugins.for_project(instance.project):
+        safe_execute(plugin.on_alert, alert=instance)
+
+
+# Signal registration
+post_syncdb.connect(
+    create_default_project,
+    dispatch_uid="create_default_project",
+    weak=False,
+)
+post_save.connect(
+    create_team_and_keys_for_project,
+    sender=Project,
+    dispatch_uid="create_team_and_keys_for_project",
+    weak=False,
+)
+post_save.connect(
+    create_team_member_for_owner,
+    sender=Team,
+    dispatch_uid="create_team_member_for_owner",
+    weak=False,
+)
+pre_delete.connect(
+    remove_key_for_team_member,
+    sender=TeamMember,
+    dispatch_uid="remove_key_for_team_member",
+    weak=False,
+)
+user_logged_in.connect(
+    set_language_on_logon,
+    dispatch_uid="set_language_on_logon",
+    weak=False
+)
+post_save.connect(
+    on_alert_creation,
+    sender=Alert,
+    dispatch_uid="on_alert_creation",
+    weak=False,
+)
diff --git a/src/sentry/tasks/check_update.py b/src/sentry/tasks/check_update.py
index e95885a7d2..31e1f000a7 100644
--- a/src/sentry/tasks/check_update.py
+++ b/src/sentry/tasks/check_update.py
@@ -26,7 +26,7 @@ def check_update():
     """
     Daily retrieving latest available Sentry version from PyPI
     """
-    from sentry.models import set_sentry_version
+    from sentry.receivers import set_sentry_version
 
     result = fetch_url_content(PYPI_URL)
 
diff --git a/src/sentry/utils/imports.py b/src/sentry/utils/imports.py
index c813d30297..30804430b3 100644
--- a/src/sentry/utils/imports.py
+++ b/src/sentry/utils/imports.py
@@ -5,6 +5,8 @@ sentry.utils.imports
 :copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+import pkgutil
+import sys
 
 
 class ModuleProxyCache(dict):
@@ -33,3 +35,13 @@ def import_string(path):
     """
     result = _cache[path]
     return result
+
+
+def import_submodules(context, root_module, path):
+    for loader, module_name, is_pkg in pkgutil.walk_packages(path):
+        module = loader.find_module(module_name).load_module(module_name)
+        for k, v in vars(module).iteritems():
+            if not k.startswith('_'):
+                context[k] = v
+        context[module_name] = module
+        sys.modules['{0}.{1}'.format(root_module, module_name)] = module
diff --git a/src/sentry/utils/runner.py b/src/sentry/utils/runner.py
index da62526d2f..8b35ae8630 100644
--- a/src/sentry/utils/runner.py
+++ b/src/sentry/utils/runner.py
@@ -217,6 +217,11 @@ def install_plugins(settings):
             register(plugin)
 
 
+def initialize_receivers():
+    # force signal registration
+    import sentry.receivers  # NOQA
+
+
 def initialize_app(config):
     from django.utils import timezone
     from sentry.app import env
@@ -233,6 +238,8 @@ def initialize_app(config):
 
     apply_legacy_settings(config)
 
+    initialize_receivers()
+
 
 def apply_legacy_settings(config):
     settings = config['settings']
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index dc22bce886..5aa1c6caaf 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -5,7 +5,6 @@ from __future__ import absolute_import
 import mock
 
 from datetime import timedelta
-from django.conf import settings
 from django.core import mail
 from django.core.urlresolvers import reverse
 from django.db import connection
@@ -17,7 +16,7 @@ from sentry.db.models.fields.node import NodeData
 from sentry.models import (
     Project, ProjectKey, Group, Event, Team,
     GroupTagValue, GroupCountByMinute, TagValue, PendingTeamMember,
-    LostPasswordHash, Alert, User, create_default_project)
+    LostPasswordHash, Alert, User)
 from sentry.testutils import TestCase
 from sentry.utils.compat import pickle
 from sentry.utils.strings import compress
@@ -156,28 +155,6 @@ class GroupIsOverResolveAgeTest(TestCase):
         assert group.is_over_resolve_age() is False
 
 
-class CreateDefaultProjectTest(TestCase):
-    def test_simple(self):
-        user, _ = User.objects.get_or_create(is_superuser=True, defaults={
-            'username': 'test'
-        })
-        Team.objects.filter(project__id=settings.SENTRY_PROJECT).delete()
-        Project.objects.filter(id=settings.SENTRY_PROJECT).delete()
-
-        create_default_project(created_models=[Project])
-
-        project = Project.objects.filter(id=settings.SENTRY_PROJECT)
-        assert project.exists() is True
-        project = project.get()
-        assert project.owner == user
-        assert project.public is False
-        assert project.name == 'Sentry (Internal)'
-        assert project.slug == 'sentry'
-        team = project.team
-        assert team.owner == user
-        assert team.slug == 'sentry'
-
-
 class EventNodeStoreTest(TestCase):
     def test_does_transition_data_to_node(self):
         group = self.group
diff --git a/tests/sentry/receivers/__init__.py b/tests/sentry/receivers/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/receivers/test_core.py b/tests/sentry/receivers/test_core.py
new file mode 100644
index 0000000000..391b00e72b
--- /dev/null
+++ b/tests/sentry/receivers/test_core.py
@@ -0,0 +1,31 @@
+# coding: utf-8
+
+from __future__ import absolute_import
+
+from django.conf import settings
+
+from sentry.models import Project, Team, User
+from sentry.receivers.core import create_default_project
+from sentry.testutils import TestCase
+
+
+class CreateDefaultProjectTest(TestCase):
+    def test_simple(self):
+        user, _ = User.objects.get_or_create(is_superuser=True, defaults={
+            'username': 'test'
+        })
+        Team.objects.filter(project__id=settings.SENTRY_PROJECT).delete()
+        Project.objects.filter(id=settings.SENTRY_PROJECT).delete()
+
+        create_default_project(created_models=[Project])
+
+        project = Project.objects.filter(id=settings.SENTRY_PROJECT)
+        assert project.exists() is True
+        project = project.get()
+        assert project.owner == user
+        assert project.public is False
+        assert project.name == 'Sentry (Internal)'
+        assert project.slug == 'sentry'
+        team = project.team
+        assert team.owner == user
+        assert team.slug == 'sentry'
diff --git a/tests/sentry/tasks/check_update/tests.py b/tests/sentry/tasks/check_update/tests.py
index 1645cc54f2..39891bfecb 100644
--- a/tests/sentry/tasks/check_update/tests.py
+++ b/tests/sentry/tasks/check_update/tests.py
@@ -4,7 +4,8 @@ import mock
 
 from sentry.plugins.helpers import get_option, set_option
 from sentry.testutils import TestCase
-from sentry.models import set_sentry_version, Option
+from sentry.models import Option
+from sentry.receivers import set_sentry_version
 from sentry.tasks.check_update import check_update, PYPI_URL
 
 
