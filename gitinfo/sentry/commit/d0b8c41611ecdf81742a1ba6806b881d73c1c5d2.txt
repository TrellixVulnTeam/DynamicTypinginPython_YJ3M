commit d0b8c41611ecdf81742a1ba6806b881d73c1c5d2
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue May 8 14:05:47 2018 -0700

    fix(jira): DRY up integration building (#8354)

diff --git a/src/sentry/integrations/jira/installed.py b/src/sentry/integrations/jira/installed.py
index 33646e542f..d0bb3ea4d2 100644
--- a/src/sentry/integrations/jira/installed.py
+++ b/src/sentry/integrations/jira/installed.py
@@ -1,11 +1,12 @@
 from __future__ import absolute_import
 
 
-from django.db import IntegrityError, transaction
 from django.views.decorators.csrf import csrf_exempt
 
 from sentry.api.base import Endpoint
-from sentry.models import Integration
+from sentry.integrations.pipeline import ensure_integration
+
+from .integration import JiraIntegrationProvider
 
 
 class JiraInstalledEndpoint(Endpoint):
@@ -17,23 +18,8 @@ class JiraInstalledEndpoint(Endpoint):
         return super(JiraInstalledEndpoint, self).dispatch(request, *args, **kwargs)
 
     def post(self, request, *args, **kwargs):
-        data = request.DATA
-        # TODO(jess): Handle updating existing integration
-        try:
-            with transaction.atomic():
-                Integration.objects.create(
-                    provider='jira',
-                    external_id=data['clientKey'],
-                    name=data['baseUrl'],
-                    metadata={
-                        'oauth_client_id': data['oauthClientId'],
-                        # public key is possibly deprecated, so we can maybe remove this
-                        'public_key': data['publicKey'],
-                        'shared_secret': data['sharedSecret'],
-                        'base_url': data['baseUrl'],
-                    }
-                )
-        except IntegrityError:
-            pass
+        state = request.DATA
+        data = JiraIntegrationProvider().build_integration(state)
+        ensure_integration('jira', data)
 
         return self.respond()
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index 23a715fbd3..e5b1555155 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -53,3 +53,22 @@ class JiraIntegrationProvider(IntegrationProvider):
 
     def get_pipeline_views(self):
         return []
+
+    def build_integration(self, state):
+        # Most information is not availabe during integration install time,
+        # since the integration won't have been fully configired on JIRA's side
+        # yet, we can't make API calls for more details like the server name or
+        # Icon.
+        return {
+            'provider': 'jira',
+            'external_id': state['clientKey'],
+            'name': 'JIRA',
+            'metadata': {
+                'oauth_client_id': state['oauthClientId'],
+                # public key is possibly deprecated, so we can maybe remove this
+                'public_key': state['publicKey'],
+                'shared_secret': state['sharedSecret'],
+                'base_url': state['baseUrl'],
+                'domain_name': state['baseUrl'].replace('https://', ''),
+            },
+        }
diff --git a/src/sentry/integrations/pipeline.py b/src/sentry/integrations/pipeline.py
index eabc9b1215..bf596674be 100644
--- a/src/sentry/integrations/pipeline.py
+++ b/src/sentry/integrations/pipeline.py
@@ -26,6 +26,22 @@ window.close();
 """
 
 
+def ensure_integration(key, data):
+    defaults = {
+        'metadata': data.get('metadata', {}),
+        'name': data.get('name', data['external_id']),
+    }
+    integration, created = Integration.objects.get_or_create(
+        provider=key,
+        external_id=data['external_id'],
+        defaults=defaults
+    )
+    if not created:
+        integration.update(**defaults)
+
+    return integration
+
+
 class IntegrationPipeline(Pipeline):
     pipeline_name = 'integration_pipeline'
     provider_manager = default_manager
@@ -37,18 +53,7 @@ class IntegrationPipeline(Pipeline):
         return response
 
     def _finish_pipeline(self, data):
-        # Create the new integration
-        defaults = {
-            'metadata': data.get('metadata', {}),
-            'name': data.get('name', data['external_id']),
-        }
-        integration, created = Integration.objects.get_or_create(
-            provider=self.provider.key,
-            external_id=data['external_id'],
-            defaults=defaults
-        )
-        if not created:
-            integration.update(**defaults)
+        integration = ensure_integration(self.provider.key, data)
         integration.add_organization(self.organization.id)
 
         # Does this integration provide a user identity for the user setting up
