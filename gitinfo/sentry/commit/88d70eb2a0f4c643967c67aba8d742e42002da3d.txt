commit 88d70eb2a0f4c643967c67aba8d742e42002da3d
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Mon Feb 17 17:04:30 2020 +0100

    ref(ui): Added tooltip - Datascrubbers v2 - Part 5 (#16977)

diff --git a/src/sentry/static/sentry/app/components/events/contexts.jsx b/src/sentry/static/sentry/app/components/events/contexts.jsx
index 84a3d8916d..49ee8dd718 100644
--- a/src/sentry/static/sentry/app/components/events/contexts.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts.jsx
@@ -9,7 +9,7 @@ import plugins from 'app/plugins';
 const CONTEXT_TYPES = {
   default: require('app/components/events/contexts/default').default,
   app: require('app/components/events/contexts/app').default,
-  device: require('app/components/events/contexts/device').default,
+  device: require('app/components/events/contexts/device/device').default,
   os: require('app/components/events/contexts/operatingSystem/operatingSystem').default,
   runtime: require('app/components/events/contexts/runtime/runtime').default,
   user: require('app/components/events/contexts/user').default,
diff --git a/src/sentry/static/sentry/app/components/events/contexts/device.jsx b/src/sentry/static/sentry/app/components/events/contexts/device.jsx
deleted file mode 100644
index 4feaad0107..0000000000
--- a/src/sentry/static/sentry/app/components/events/contexts/device.jsx
+++ /dev/null
@@ -1,153 +0,0 @@
-import isString from 'lodash/isString';
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import ContextBlock from 'app/components/events/contexts/contextBlock';
-import DeviceName from 'app/components/deviceName';
-import {defined, formatBytes} from 'app/utils';
-
-class DeviceContextType extends React.Component {
-  static propTypes = {
-    alias: PropTypes.string.isRequired,
-    data: PropTypes.object.isRequired,
-  };
-
-  formatMemory = (memory_size, free_memory, usable_memory) => {
-    if (
-      !Number.isInteger(memory_size) ||
-      memory_size <= 0 ||
-      !Number.isInteger(free_memory) ||
-      free_memory <= 0
-    ) {
-      return null;
-    }
-
-    let memory = `Total: ${formatBytes(memory_size)} / Free: ${formatBytes(free_memory)}`;
-    if (Number.isInteger(usable_memory) && usable_memory > 0) {
-      memory += ` / Usable: ${formatBytes(usable_memory)}`;
-    }
-
-    return memory;
-  };
-
-  formatStorage = (
-    storage_size,
-    free_storage,
-    external_storage_size,
-    external_free_storage
-  ) => {
-    if (!Number.isInteger(storage_size) || storage_size <= 0) {
-      return null;
-    }
-
-    let storage = `Total: ${formatBytes(storage_size)}`;
-    if (Number.isInteger(free_storage) && free_storage > 0) {
-      storage += ` / Free: ${formatBytes(free_storage)}`;
-    }
-
-    if (
-      Number.isInteger(external_storage_size) &&
-      external_storage_size > 0 &&
-      Number.isInteger(external_free_storage) &&
-      external_free_storage > 0
-    ) {
-      storage += ` (External Total: ${formatBytes(
-        external_storage_size
-      )} / Free: ${formatBytes(external_free_storage)})`;
-    }
-
-    return storage;
-  };
-
-  render() {
-    const {
-      name,
-      family,
-      model,
-      model_id,
-      cpu_description,
-      arch,
-      battery_level,
-      battery_status,
-      orientation,
-      simulator,
-      memory_size,
-      free_memory,
-      usable_memory,
-      storage_size,
-      free_storage,
-      external_storage_size,
-      external_free_storage,
-      boot_time,
-      timezone,
-      device_type,
-      archs,
-      brand,
-      charging,
-      connection_type,
-      id,
-      language,
-      low_memory,
-      manufacturer,
-      online,
-      screen_density,
-      screen_dpi,
-      screen_height_pixels,
-      screen_resolution,
-      screen_width_pixels,
-      ...data
-    } = this.props.data;
-    const memory = this.formatMemory(memory_size, free_memory, usable_memory);
-    const storage = this.formatStorage(
-      storage_size,
-      free_storage,
-      external_storage_size,
-      external_free_storage
-    );
-
-    const renderedModel = isString(model) ? (
-      <DeviceName>{model + (model_id ? ` (${model_id})` : '')}</DeviceName>
-    ) : null;
-
-    return (
-      <ContextBlock
-        data={data}
-        knownData={[
-          ['?Name', name],
-          ['?Family', family],
-          ['?Model', renderedModel],
-          ['?CPU Description', cpu_description],
-          ['?Architecture', arch],
-          ['?Battery Level', defined(battery_level) ? `${battery_level}%` : null],
-          ['?Battery Status', battery_status],
-          ['?Orientation', orientation],
-          ['?Memory', memory],
-          ['?Capacity', storage],
-          ['?Simulator', simulator],
-          ['?Boot Time', boot_time],
-          ['?Timezone', timezone],
-          ['?Device Type', device_type],
-          ['?Architectures', archs],
-          ['?Brand', brand],
-          ['?Charging', charging],
-          ['?Connection Type', connection_type],
-          ['?Id', id],
-          ['?Language', language],
-          ['?Low memory', low_memory],
-          ['?Manufacturer', manufacturer],
-          ['?Online', online],
-          ['?Screen density', screen_density],
-          ['?Screen DPI', screen_dpi],
-          ['?Screen height pixels', screen_height_pixels],
-          ['?Screen resolution', screen_resolution],
-          ['?Screen width pixels', screen_width_pixels],
-        ]}
-        alias={this.props.alias}
-      />
-    );
-  }
-}
-
-DeviceContextType.getTitle = () => 'Device';
-
-export default DeviceContextType;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/device/device.tsx b/src/sentry/static/sentry/app/components/events/contexts/device/device.tsx
new file mode 100644
index 0000000000..5daa37f2db
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/device/device.tsx
@@ -0,0 +1,23 @@
+import React from 'react';
+
+import ContextBlock from 'app/components/events/contexts/contextBlockV2';
+import {defined} from 'app/utils';
+
+import getDeviceKnownData from './getDeviceKnownData';
+import {DeviceData} from './types';
+
+type Props = {
+  data?: DeviceData;
+};
+
+const Device = ({data}: Props) => {
+  if (!defined(data)) {
+    return null;
+  }
+
+  return <ContextBlock knownData={getDeviceKnownData(data)} />;
+};
+
+Device.getTitle = () => 'Device';
+
+export default Device;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/device/formatMemory.tsx b/src/sentry/static/sentry/app/components/events/contexts/device/formatMemory.tsx
new file mode 100644
index 0000000000..e828900ae0
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/device/formatMemory.tsx
@@ -0,0 +1,21 @@
+import {formatBytes} from 'app/utils';
+
+function formatMemory(memory_size: number, free_memory: number, usable_memory: number) {
+  if (
+    !Number.isInteger(memory_size) ||
+    memory_size <= 0 ||
+    !Number.isInteger(free_memory) ||
+    free_memory <= 0
+  ) {
+    return null;
+  }
+
+  let memory = `Total: ${formatBytes(memory_size)} / Free: ${formatBytes(free_memory)}`;
+  if (Number.isInteger(usable_memory) && usable_memory > 0) {
+    memory = `${memory} / Usable: ${formatBytes(usable_memory)}`;
+  }
+
+  return memory;
+}
+
+export default formatMemory;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/device/formatStorage.tsx b/src/sentry/static/sentry/app/components/events/contexts/device/formatStorage.tsx
new file mode 100644
index 0000000000..906545b125
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/device/formatStorage.tsx
@@ -0,0 +1,32 @@
+import {formatBytes} from 'app/utils';
+
+function formatStorage(
+  storage_size: number,
+  free_storage: number,
+  external_storage_size: number,
+  external_free_storage: number
+) {
+  if (!Number.isInteger(storage_size) || storage_size <= 0) {
+    return null;
+  }
+
+  let storage = `Total: ${formatBytes(storage_size)}`;
+  if (Number.isInteger(free_storage) && free_storage > 0) {
+    storage = `${storage} / Free: ${formatBytes(free_storage)}`;
+  }
+
+  if (
+    Number.isInteger(external_storage_size) &&
+    external_storage_size > 0 &&
+    Number.isInteger(external_free_storage) &&
+    external_free_storage > 0
+  ) {
+    storage = `${storage} (External Total: ${formatBytes(
+      external_storage_size
+    )} / Free: ${formatBytes(external_free_storage)})`;
+  }
+
+  return storage;
+}
+
+export default formatStorage;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/device/getDeviceKnownData.tsx b/src/sentry/static/sentry/app/components/events/contexts/device/getDeviceKnownData.tsx
new file mode 100644
index 0000000000..2a3ec8737c
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/device/getDeviceKnownData.tsx
@@ -0,0 +1,27 @@
+import {KeyValueListData} from 'app/components/events/interfaces/keyValueList/types';
+import {getMeta} from 'app/components/events/meta/metaProxy';
+
+import getDeviceKnownDataDetails from './getDeviceKnownDataDetails';
+import {DeviceKnownDataType, DeviceData} from './types';
+
+function getOperatingSystemKnownData(data: DeviceData): Array<KeyValueListData> {
+  const knownData: Array<KeyValueListData> = [];
+
+  const dataKeys = Object.keys(data);
+  for (const key of dataKeys) {
+    const knownDataDetails = getDeviceKnownDataDetails(data, key as DeviceKnownDataType);
+
+    if (!knownDataDetails) {
+      continue;
+    }
+
+    knownData.push({
+      key,
+      ...knownDataDetails,
+      meta: getMeta(data, key),
+    });
+  }
+  return knownData;
+}
+
+export default getOperatingSystemKnownData;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/device/getDeviceKnownDataDetails.tsx b/src/sentry/static/sentry/app/components/events/contexts/device/getDeviceKnownDataDetails.tsx
new file mode 100644
index 0000000000..32a0e01432
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/device/getDeviceKnownDataDetails.tsx
@@ -0,0 +1,189 @@
+import React from 'react';
+
+import {t} from 'app/locale';
+import {defined} from 'app/utils';
+import DeviceName from 'app/components/deviceName';
+
+import formatMemory from './formatMemory';
+import formatStorage from './formatStorage';
+import {DeviceKnownDataType, DeviceData} from './types';
+
+type Output = {
+  subject: string;
+  value: null | React.ReactNode;
+};
+
+function getDeviceKnownDataDetails(
+  data: DeviceData,
+  type: DeviceKnownDataType
+): Output | undefined {
+  switch (type) {
+    case DeviceKnownDataType.NAME:
+      return {
+        subject: t('Name'),
+        value: data.name,
+      };
+    case DeviceKnownDataType.FAMILY:
+      return {
+        subject: t('Family'),
+        value: data.family,
+      };
+    case DeviceKnownDataType.RENDERED_MODEL:
+      return {
+        subject: t('Model'),
+        value:
+          typeof data.model === 'string' ? (
+            <DeviceName>
+              {`${data.model} ${data.model_id ? `(${data.model_id})` : ''}`}
+            </DeviceName>
+          ) : null,
+      };
+    case DeviceKnownDataType.CPU_DESCRIPTION:
+      return {
+        subject: t('CPU Description'),
+        value: data.cpu_description,
+      };
+    case DeviceKnownDataType.ARCH:
+      return {
+        subject: t('Architecture'),
+        value: data.arch,
+      };
+    case DeviceKnownDataType.BATTERY_LEVEL:
+      return {
+        subject: t('Battery Level'),
+        value: defined(data.battery_level) ? `${data.battery_level}%` : null,
+      };
+    case DeviceKnownDataType.BATTERY_STATUS:
+      return {
+        subject: t('Battery Status'),
+        value: data.battery_status,
+      };
+    case DeviceKnownDataType.ORIENTATION:
+      return {
+        subject: t('Orientation'),
+        value: data.orientation,
+      };
+    case DeviceKnownDataType.MEMORY:
+      const {memory_size, free_memory, usable_memory} = data;
+      return {
+        subject: t('Memory'),
+        value:
+          memory_size && free_memory && usable_memory
+            ? formatMemory(memory_size, free_memory, usable_memory)
+            : null,
+      };
+    case DeviceKnownDataType.STORAGE:
+      const {
+        storage_size,
+        free_storage,
+        external_storage_size,
+        external_free_storage,
+      } = data;
+      return {
+        subject: t('Capacity'),
+        value:
+          storage_size && free_storage && external_storage_size && external_free_storage
+            ? formatStorage(
+                storage_size,
+                free_storage,
+                external_storage_size,
+                external_free_storage
+              )
+            : null,
+      };
+    case DeviceKnownDataType.SIMULATOR:
+      return {
+        subject: t('Simulator'),
+        value: data.simulator,
+      };
+    case DeviceKnownDataType.BOOT_TIME:
+      return {
+        subject: t('Boot Time'),
+        value: data.boot_time,
+      };
+    case DeviceKnownDataType.TIMEZONE:
+      return {
+        subject: t('Timezone'),
+        value: data.timezone,
+      };
+    case DeviceKnownDataType.DEVICE_TYPE:
+      return {
+        subject: t('Device Type'),
+        value: data.device_type,
+      };
+    case DeviceKnownDataType.ARCHS:
+      return {
+        subject: t('Architectures'),
+        value: data.archs,
+      };
+    case DeviceKnownDataType.BRAND:
+      return {
+        subject: t('Brand'),
+        value: data.brand,
+      };
+    case DeviceKnownDataType.CHARGING:
+      return {
+        subject: t('Charging'),
+        value: data.charging,
+      };
+    case DeviceKnownDataType.CONNECTION_TYPE:
+      return {
+        subject: t('Connection Type'),
+        value: data.connection_type,
+      };
+    case DeviceKnownDataType.ID:
+      return {
+        subject: t('Id'),
+        value: data.id,
+      };
+    case DeviceKnownDataType.LANGUAGE:
+      return {
+        subject: t('Language'),
+        value: data.language,
+      };
+    case DeviceKnownDataType.LOW_MEMORY:
+      return {
+        subject: t('Low Memory'),
+        value: data.low_memory,
+      };
+    case DeviceKnownDataType.MANUFACTURER:
+      return {
+        subject: t('Manufacturer'),
+        value: data.manufacturer,
+      };
+    case DeviceKnownDataType.ONLINE:
+      return {
+        subject: t('Online'),
+        value: data.online,
+      };
+    case DeviceKnownDataType.SCREEN_DENSITY:
+      return {
+        subject: t('Screen density'),
+        value: data.screen_density,
+      };
+    case DeviceKnownDataType.SCREEN_DPI:
+      return {
+        subject: t('Screen DPI'),
+        value: data.screen_dpi,
+      };
+    case DeviceKnownDataType.SCREEN_HEIGHT_PIXELS:
+      return {
+        subject: t('Screen height pixels'),
+        value: data.screen_height_pixels,
+      };
+    case DeviceKnownDataType.SCREEN_RESOLUTION:
+      return {
+        subject: t('Screen resolution'),
+        value: data.screen_resolution,
+      };
+    case DeviceKnownDataType.SCREEN_WIDTH_PIXELS:
+      return {
+        subject: t('Screen width pixels'),
+        value: data.screen_width_pixels,
+      };
+    default:
+      return undefined;
+  }
+}
+
+export default getDeviceKnownDataDetails;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/device/types.tsx b/src/sentry/static/sentry/app/components/events/contexts/device/types.tsx
new file mode 100644
index 0000000000..0258a97200
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/device/types.tsx
@@ -0,0 +1,72 @@
+export enum DeviceKnownDataType {
+  NAME = 'name',
+  FAMILY = 'family',
+  RENDERED_MODEL = 'renderedModel',
+  CPU_DESCRIPTION = 'cpu_description',
+  ARCH = 'arch',
+  BATTERY_LEVEL = 'battery_level',
+  BATTERY_STATUS = 'baterry_status',
+  ORIENTATION = 'orientation',
+  MEMORY = 'memory',
+  STORAGE = 'storage',
+  SIMULATOR = 'simulator',
+  BOOT_TIME = 'boot_time',
+  TIMEZONE = 'timezone',
+  DEVICE_TYPE = 'device_type',
+  ARCHS = 'archs',
+  BRAND = 'brand',
+  CHARGING = 'charging',
+  CONNECTION_TYPE = 'connection_type',
+  ID = 'id',
+  LANGUAGE = 'language',
+  LOW_MEMORY = 'low_memory',
+  MANUFACTURER = 'manufacturer',
+  ONLINE = 'online',
+  SCREEN_DENSITY = 'screen_density',
+  SCREEN_DPI = 'screen_dpi',
+  SCREEN_HEIGHT_PIXELS = 'screen_height_pixels',
+  SCREEN_RESOLUTION = 'screen_resolution',
+  SCREEN_WIDTH_PIXELS = 'screen_width_pixels',
+}
+
+// TODO(ts): add correct types
+export type DeviceData = {
+  name: string;
+  family?: string;
+  cpu_description?: string;
+  arch?: string;
+  type?: string;
+  battery_level?: number;
+  battery_status?: string;
+  orientation?: string;
+  simulator?: boolean;
+  boot_time?: string;
+  timezone?: string;
+  device_type: string;
+  archs?: Array<string>;
+  brand?: string;
+  charging?: boolean;
+  low_memory?: boolean;
+  manufacturer?: string;
+  online?: boolean;
+  screen_density?: number;
+  screen_dpi?: number;
+  screen_height_pixels?: string;
+  screen_resolution?: string;
+  screen_width_pixels?: number;
+  memory_size?: number;
+  free_memory?: number;
+  usable_memory?: number;
+  storage_size?: number;
+  free_storage?: number;
+  external_storage_size?: number;
+  external_free_storage?: number;
+  model?: string;
+  model_id?: string;
+  id?: any;
+  language?: any;
+  connection_type?: any;
+  memory?: any;
+  storage?: any;
+  renderedModel?: any;
+};
diff --git a/src/sentry/static/sentry/app/components/events/contexts/operatingSystem/getOperatingSystemKnownData.tsx b/src/sentry/static/sentry/app/components/events/contexts/operatingSystem/getOperatingSystemKnownData.tsx
index 93413aad72..d2949d52a8 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/operatingSystem/getOperatingSystemKnownData.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/operatingSystem/getOperatingSystemKnownData.tsx
@@ -16,7 +16,7 @@ function getOperatingSystemKnownData(
       key as OperatingSystemKnownDataType
     );
 
-    if (key === null || !knownDataDetails) {
+    if (!knownDataDetails) {
       continue;
     }
 
diff --git a/src/sentry/static/sentry/app/components/events/contexts/runtime/getRuntimeKnownData.tsx b/src/sentry/static/sentry/app/components/events/contexts/runtime/getRuntimeKnownData.tsx
index 93d83423c0..5591bddd7e 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/runtime/getRuntimeKnownData.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/runtime/getRuntimeKnownData.tsx
@@ -14,7 +14,7 @@ function getRuntimeKnownData(data: RuntimeData): Array<KeyValueListData> {
       key as RuntimeKnownDataType
     );
 
-    if (key === null || !knownDataDetails) {
+    if (!knownDataDetails) {
       continue;
     }
 
diff --git a/src/sentry/static/sentry/app/components/events/contexts/runtime/types.ts b/src/sentry/static/sentry/app/components/events/contexts/runtime/types.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/components/events/contexts/runtime/types.ts
rename to src/sentry/static/sentry/app/components/events/contexts/runtime/types.tsx
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/types.ts b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/types.ts
index f2ee78b0e2..a805497237 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/types.ts
+++ b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/types.ts
@@ -3,6 +3,6 @@ import {Meta} from 'app/types';
 export type KeyValueListData = {
   key: string;
   subject: React.ReactNode;
-  value: string | null;
+  value: React.ReactNode | null;
   meta: Meta;
 };
