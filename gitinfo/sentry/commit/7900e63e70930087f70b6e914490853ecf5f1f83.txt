commit 7900e63e70930087f70b6e914490853ecf5f1f83
Author: Ben Vinegar <ben@benv.ca>
Date:   Fri Aug 28 17:48:48 2015 -0700

    Gracefully handle malformed query strings (back to pre tags)

diff --git a/src/sentry/static/sentry/app/components/interfaces/richHttpContent.jsx b/src/sentry/static/sentry/app/components/interfaces/richHttpContent.jsx
index 81de321317..917d3e4289 100644
--- a/src/sentry/static/sentry/app/components/interfaces/richHttpContent.jsx
+++ b/src/sentry/static/sentry/app/components/interfaces/richHttpContent.jsx
@@ -35,7 +35,7 @@ var RichHttpContent = React.createClass({
 
     switch (contentType) {
       case 'application/x-www-form-urlencoded':
-        return <DefinitionList data={this.objectToTupleArray(queryString.parse(data.data))}/>
+        return this.getQueryStringOrRaw(data.data);
       case 'application/json':
         // falls through
       default:
@@ -46,9 +46,20 @@ var RichHttpContent = React.createClass({
     }
   },
 
+  getQueryStringOrRaw(data) {
+    try {
+      // Sentry API abbreviates long query stirng values, sometimes resulting in
+      // an un-parsable querystring ... stay safe kids
+      return <DefinitionList data={this.objectToTupleArray(queryString.parse(data))}/>
+    } catch (e) {
+      return <pre>{data}</pre>
+    }
+  },
+
   getJsonOrRaw(data) {
     try {
-      // Sentry API abbreviates long JSON strings, which cannot be parsed ...
+      // Sentry API abbreviates long JSON strings, resulting in an un-parsable
+      // JSON string ... stay safe kids
       return <ContextData data={JSON.parse(data)} />;
     } catch (e) {
       return <pre>{data}</pre>
diff --git a/tests/js/spec/components/interfaces/richHttpContent.spec.jsx b/tests/js/spec/components/interfaces/richHttpContent.spec.jsx
index 6485d2c261..54dd6b062b 100644
--- a/tests/js/spec/components/interfaces/richHttpContent.spec.jsx
+++ b/tests/js/spec/components/interfaces/richHttpContent.spec.jsx
@@ -59,7 +59,7 @@ describe("RichHttpContent", function () {
       expect(out.type).to.eql('pre');
     });
 
-    it("should return a DefinitionList element when Content-Type is application/x-www-form-urlencoded", function () {
+    it("should return a DefinitionList element when Content-Type is x-www-form-urlencoded", function () {
       var out = this.elem.getBodySection({
         headers: [
           ['lol' , 'no'],
@@ -76,6 +76,17 @@ describe("RichHttpContent", function () {
       ]);
     });
 
+    it("should return plain-text when Content-Type is x-www-form-urlencoded and query string cannot be parsed", function () {
+      let out = this.elem.getBodySection({
+        headers: [
+          ['Content-Type', 'application/x-www-form-urlencoded']
+        ],
+        data: 'foo=hello%2...' // note: broken URL encoded value (%2 vs %2F)
+      });
+
+      expect(out.type).to.eql('pre');
+    });
+
     it("should return a ContextData element when Content-Type is application/json", function () {
       var out = this.elem.getBodySection({
         headers: [
