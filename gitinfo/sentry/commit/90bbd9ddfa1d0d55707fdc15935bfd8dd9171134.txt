commit 90bbd9ddfa1d0d55707fdc15935bfd8dd9171134
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Nov 28 11:04:22 2018 -0800

    feat(discover): Add tag badge to tag columns in Summarize dropdown (#10770)
    
    Allows tags to be more easily distinguished from built in columms

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index 36b3272471..f0da0fd86c 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -378,7 +378,7 @@ export default class OrganizationDiscover extends React.Component {
                 <div>
                   <HeadingContainer>
                     <Heading>
-                      {t('Discover')}  <BetaTag />
+                      {t('Discover')} <BetaTag />
                     </Heading>
                   </HeadingContainer>
                 </div>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
index c1af276e6c..71284cce14 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
@@ -42,6 +42,7 @@ export default function createQueryBuilder(initial = {}, organization) {
   const defaultProjects = organization.projects
     .filter(projects => projects.isMember)
     .map(project => parseInt(project.id, 10));
+  const columns = COLUMNS.map(col => ({...col, isTag: false}));
   let tags = [];
 
   return {
@@ -74,13 +75,13 @@ export default function createQueryBuilder(initial = {}, organization) {
       .then(res => {
         tags = res.data.map(tag => {
           const type = SPECIAL_TAGS[tags.tags_key] || 'string';
-          return {name: tag.tags_key, type};
+          return {name: tag.tags_key, type, isTag: true};
         });
       })
       .catch(err => {
         tags = PROMOTED_TAGS.map(tag => {
           const type = SPECIAL_TAGS[tag] || 'string';
-          return {name: tag, type};
+          return {name: tag, type, isTag: true};
         });
       });
   }
@@ -244,7 +245,7 @@ export default function createQueryBuilder(initial = {}, organization) {
    * @returns {Array<{name: String, type: String}>}
    */
   function getColumns() {
-    return [...COLUMNS, ...tags];
+    return [...columns, ...tags];
   }
 
   /**
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
index 8f8d735a36..afe1ef77f5 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
@@ -1,11 +1,13 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import {Flex} from 'grid-emotion';
 
 import SentryTypes from 'app/sentryTypes';
 import {t} from 'app/locale';
 import TextField from 'app/components/forms/textField';
 import NumberField from 'app/components/forms/numberField';
 import SelectControl from 'app/components/forms/selectControl';
+import Badge from 'app/components/badge';
 
 import Aggregations from '../aggregations';
 import Conditions from '../conditions';
@@ -35,6 +37,15 @@ export default class QueryFields extends React.Component {
     return <PlaceholderText>{text}</PlaceholderText>;
   };
 
+  optionRenderer = ({label, isTag}) => {
+    return (
+      <Flex align="center">
+        {label}
+        {isTag && <Badge text="tag" />}
+      </Flex>
+    );
+  };
+
   render() {
     const {
       queryBuilder,
@@ -53,9 +64,10 @@ export default class QueryFields extends React.Component {
       ({name}) => !NON_CONDITIONS_FIELDS.includes(name)
     );
 
-    const fieldOptions = columns.map(({name}) => ({
+    const fieldOptions = columns.map(({name, isTag}) => ({
       value: name,
       label: name,
+      isTag,
     }));
 
     return (
@@ -84,6 +96,7 @@ export default class QueryFields extends React.Component {
             multiple={true}
             placeholder={this.getSummarizePlaceholder()}
             options={fieldOptions}
+            optionRenderer={this.optionRenderer}
             value={currentQuery.fields}
             onChange={val => onUpdateField('fields', val.map(({value}) => value))}
             clearable={true}
diff --git a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
index bab214069a..caca9d1a43 100644
--- a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
@@ -61,14 +61,17 @@ describe('Query Builder', function() {
       expect(queryBuilder.getColumns()).toContainEqual({
         name: 'tag1',
         type: 'string',
+        isTag: true,
       });
       expect(queryBuilder.getColumns()).toContainEqual({
         name: 'tag2',
         type: 'string',
+        isTag: true,
       });
       expect(queryBuilder.getColumns()).not.toContainEqual({
         name: 'environment',
         type: 'string',
+        isTag: true,
       });
     });
 
@@ -88,10 +91,12 @@ describe('Query Builder', function() {
       expect(queryBuilder.getColumns()).toContainEqual({
         name: 'environment',
         type: 'string',
+        isTag: true,
       });
       expect(queryBuilder.getColumns()).not.toContainEqual({
         name: 'tag1',
         type: 'string',
+        isTag: true,
       });
     });
   });
@@ -208,4 +213,29 @@ describe('Query Builder', function() {
       expect(openModal).not.toHaveBeenCalled();
     });
   });
+
+  describe('getColumns()', function() {
+    let queryBuilder;
+    beforeEach(async function() {
+      queryBuilder = createQueryBuilder(
+        {},
+        TestStubs.Organization({projects: [TestStubs.Project()]})
+      );
+      await queryBuilder.load();
+    });
+
+    it('returns columns and tags', function() {
+      expect(queryBuilder.getColumns()).toContainEqual({
+        name: 'id',
+        type: 'string',
+        isTag: false,
+      });
+
+      expect(queryBuilder.getColumns()).toContainEqual({
+        name: 'logger',
+        type: 'string',
+        isTag: true,
+      });
+    });
+  });
 });
