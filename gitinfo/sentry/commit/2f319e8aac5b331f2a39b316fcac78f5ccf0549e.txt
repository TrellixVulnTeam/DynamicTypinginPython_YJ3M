commit 2f319e8aac5b331f2a39b316fcac78f5ccf0549e
Author: Dan Fuller <dfuller@sentry.io>
Date:   Fri Feb 22 14:46:36 2019 -0800

    fix(api): Return optional 'query' key for tags when they're related to a user (APP-1158)
    
    The query tag will contain a query that can be plugged into a search to search by that value. At the
    moment it only returns a value for users. Will be a value like `user.email:test@test.com`

diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 01853bd560..939e679bbd 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -8,6 +8,7 @@ from semaphore import meta_with_chunks
 
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.models import Event, EventError, EventAttachment, Release, UserReport
+from sentry.search.utils import convert_user_tag_to_query
 from sentry.utils.safe import get_path
 
 
@@ -327,12 +328,16 @@ class SnubaEventSerializer(Serializer):
         keys = getattr(obj, 'tags.key', None)
         values = getattr(obj, 'tags.value', None)
         if keys and values and len(keys) == len(values):
-            return sorted([
-                {
-                    'key': k.split('sentry:', 1)[-1],
-                    'value': v,
-                } for (k, v) in zip(keys, values)
-            ], key=lambda x: x['key'])
+            results = []
+            for key, value in zip(keys, values):
+                key = key.split('sentry:', 1)[-1]
+                result = {'key': key, 'value': value}
+                query = convert_user_tag_to_query(key, value)
+                if query:
+                    result['query'] = query
+                results.append(result)
+            results.sort(key=lambda x: x['key'])
+            return results
         return []
 
     def serialize(self, obj, attrs, user):
diff --git a/src/sentry/api/serializers/models/tagvalue.py b/src/sentry/api/serializers/models/tagvalue.py
index c5eea4845e..591c892a6f 100644
--- a/src/sentry/api/serializers/models/tagvalue.py
+++ b/src/sentry/api/serializers/models/tagvalue.py
@@ -4,6 +4,7 @@ import six
 
 from sentry.api.serializers import Serializer, serialize
 from sentry.models import EventUser
+from sentry.search.utils import convert_user_tag_to_query
 
 
 class EnvironmentTagValueSerializer(Serializer):
@@ -38,6 +39,11 @@ class UserTagValueSerializer(Serializer):
             }
         else:
             result = serialize(attrs['user'], user)
+
+        query = convert_user_tag_to_query('user', obj.value)
+        if query:
+            result['query'] = query
+
         result.update(
             {
                 'value': obj.value,
diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index ad0ec7559d..3382b68aa9 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -8,7 +8,7 @@ from django.db import DataError
 from django.utils import timezone
 
 from sentry.constants import STATUS_CHOICES
-from sentry.models import EventUser, Release, Team, User
+from sentry.models import EventUser, KEYWORD_MAP, Release, Team, User
 from sentry.search.base import ANY
 from sentry.utils.auth import find_users
 
@@ -444,3 +444,14 @@ def parse_query(projects, query, user, environments):
     results['query'] = ' '.join(results['query'])
 
     return results
+
+
+def convert_user_tag_to_query(key, value):
+    """
+    Converts a user tag to a query string that can be used to search for that
+    user. Returns None if not a user tag.
+    """
+    if key == 'user' and ':' in value:
+        sub_key, value = value.split(':', 1)
+        if KEYWORD_MAP.get_key(sub_key, None):
+            return 'user.%s:%s' % (sub_key, value)
diff --git a/src/sentry/tagstore/types.py b/src/sentry/tagstore/types.py
index fbc2e87e8e..edc2cdabab 100644
--- a/src/sentry/tagstore/types.py
+++ b/src/sentry/tagstore/types.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import six
 
+from sentry.search.utils import convert_user_tag_to_query
 from sentry.tagstore.base import TagKeyStatus
 
 
@@ -103,12 +104,18 @@ class TagKeySerializer(Serializer):
 class TagValueSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         from sentry import tagstore
-
-        return {
-            'key': tagstore.get_standardized_key(obj.key),
+        key = tagstore.get_standardized_key(obj.key)
+        serialized = {
+            'key': key,
             'name': tagstore.get_tag_value_label(obj.key, obj.value),
             'value': obj.value,
             'count': obj.times_seen,
             'lastSeen': obj.last_seen,
             'firstSeen': obj.first_seen,
         }
+
+        query = convert_user_tag_to_query(key, obj.value)
+        if query:
+            serialized['query'] = query
+
+        return serialized
diff --git a/src/sentry/tagstore/v2/models/tagvalue.py b/src/sentry/tagstore/v2/models/tagvalue.py
index b869e1c8af..4342c03681 100644
--- a/src/sentry/tagstore/v2/models/tagvalue.py
+++ b/src/sentry/tagstore/v2/models/tagvalue.py
@@ -18,6 +18,7 @@ from sentry.db.models import (
     Model, BoundedPositiveIntegerField, BoundedBigIntegerField, GzippedDictField,
     FlexibleForeignKey, sane_repr
 )
+from sentry.search.utils import convert_user_tag_to_query
 from sentry.tagstore.query import TagStoreManager
 from sentry.utils.cache import cache
 from sentry.utils.hashlib import md5_text
@@ -158,12 +159,18 @@ class TagValueSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         from sentry import tagstore
 
-        return {
+        key = tagstore.get_standardized_key(obj.key)
+        serialized = {
             'id': six.text_type(obj.id),
-            'key': tagstore.get_standardized_key(obj.key),
+            'key': key,
             'name': attrs['name'],
             'value': obj.value,
             'count': obj.times_seen,
             'lastSeen': obj.last_seen,
             'firstSeen': obj.first_seen,
         }
+
+        query = convert_user_tag_to_query(key, obj.value)
+        if query:
+            serialized['query'] = query
+        return serialized
diff --git a/tests/sentry/api/serializers/test_event.py b/tests/sentry/api/serializers/test_event.py
index f3f62626bd..722c2c13f5 100644
--- a/tests/sentry/api/serializers/test_event.py
+++ b/tests/sentry/api/serializers/test_event.py
@@ -2,12 +2,17 @@
 
 from __future__ import absolute_import
 
+from datetime import datetime
+
 import six
 
 from sentry.api.serializers import serialize
-from sentry.api.serializers.models.event import SharedEventSerializer
-from sentry.testutils import TestCase
+from sentry.api.serializers.models.event import (
+    SharedEventSerializer,
+    SnubaEvent,
+)
 from sentry.models import EventError
+from sentry.testutils import TestCase
 
 
 class EventSerializerTest(TestCase):
@@ -194,3 +199,39 @@ class SharedEventSerializerTest(TestCase):
         assert 'errors' not in result
         for entry in result['entries']:
             assert entry['type'] != 'breadcrumbs'
+
+
+class SnubaEventSerializerTest(TestCase):
+    def test_user(self):
+        event = SnubaEvent({
+            'event_id': 'a',
+            'project_id': 1,
+            'message': 'hello there',
+            'title': 'hi',
+            'location': 'somewhere',
+            'culprit': 'foo',
+            'timestamp': datetime.now(),
+            'user_id': 123,
+            'email': 'test@test.com',
+            'username': 'test',
+            'ip_address': '192.168.0.1',
+            'tags.key': ['sentry:user'],
+            'tags.value': ['email:test@test.com'],
+        })
+        result = serialize(event)
+        assert result['eventID'] == event.event_id
+        assert result['projectID'] == six.text_type(event.project_id)
+        assert result['message'] == event.message
+        assert result['title'] == event.title
+        assert result['location'] == event.location
+        assert result['culprit'] == event.culprit
+        assert result['dateCreated'] == event.timestamp
+        assert result['user']['id'] == event.user_id
+        assert result['user']['email'] == event.email
+        assert result['user']['username'] == event.username
+        assert result['user']['ipAddress'] == event.ip_address
+        assert result['tags'] == [{
+            'key': 'user',
+            'value': 'email:test@test.com',
+            'query': 'user.email:test@test.com',
+        }]
diff --git a/tests/sentry/api/serializers/test_tagvalue.py b/tests/sentry/api/serializers/test_tagvalue.py
index a8bb5a3acb..071c37ddce 100644
--- a/tests/sentry/api/serializers/test_tagvalue.py
+++ b/tests/sentry/api/serializers/test_tagvalue.py
@@ -4,7 +4,10 @@ from __future__ import absolute_import
 
 from datetime import datetime
 
-from sentry.api.serializers import serialize
+from sentry.api.serializers import (
+    serialize,
+    UserTagValueSerializer,
+)
 from sentry.tagstore.types import TagValue
 from sentry.testutils import TestCase
 
@@ -24,6 +27,7 @@ class TagValueSerializerTest(TestCase):
         assert result['key'] == 'user'
         assert result['value'] == 'username:ted'
         assert result['name'] == 'ted'
+        assert result['query'] == 'user.username:ted'
 
     def test_release(self):
         user = self.create_user()
@@ -39,3 +43,20 @@ class TagValueSerializerTest(TestCase):
         assert result['key'] == 'release'
         assert result['value'] == 'df84bccbb23ca15f2868be1f2a5f7c7a6464fadd'
         assert result['name'] == 'df84bcc'
+        assert 'query' not in result
+
+
+class UseTagValueSerializerTest(TestCase):
+    def test_query(self):
+        user = self.create_user()
+        tagvalue = TagValue(
+            key='sentry:user',
+            value='username:ted',
+            times_seen=1,
+            first_seen=datetime(2018, 1, 1),
+            last_seen=datetime(2018, 1, 1),
+        )
+
+        result = serialize(tagvalue, user, serializer=UserTagValueSerializer(project_id=1))
+        assert result['value'] == 'username:ted'
+        assert result['query'] == 'user.username:ted'
