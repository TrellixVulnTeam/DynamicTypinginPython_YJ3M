commit e29abe30f87a73062f6aef5c1071ca4d80f6e1d6
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Thu Sep 20 20:08:28 2018 +0200

    feat: Loader update/fixes (#9828)
    
    * feat: Update loader to support withScope
    
    * feat: Add metrics for loader, Increase cache timeout
    
    * feat: Refactor js loader
    
    * fix: Add getDynamicText to not mock percy
    
    * feat: Update wording + provide docs link
    
    * fix: add Access-Control-Allow-Origin
    
    * ref: Set cache lifetime back to 30/60secs
    
    * fix: Use get_from_cache
    
    * fix: init bug in loader, Add Access-Control-Allow-Origin header

diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
index ca68be9ba9..cfe2a9cfcd 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
@@ -12,7 +12,8 @@ import {
   removeIndicator,
 } from 'app/actionCreators/indicator';
 import {getOrganizationState} from 'app/mixins/organizationState';
-import {t} from 'app/locale';
+import {t, tct} from 'app/locale';
+import getDynamicText from 'app/utils/getDynamicText';
 import ApiMixin from 'app/mixins/apiMixin';
 import AsyncView from 'app/views/asyncView';
 import BooleanField from 'app/views/settings/components/forms/booleanField';
@@ -20,6 +21,7 @@ import Button from 'app/components/button';
 import Confirm from 'app/components/confirm';
 import DateTime from 'app/components/dateTime';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import ExternalLink from 'app/components/externalLink';
 import Field from 'app/views/settings/components/forms/field';
 import Form from 'app/views/settings/components/forms/form';
 import FormField from 'app/views/settings/components/forms/formField';
@@ -338,6 +340,10 @@ const KeySettings = createReactClass({
       project,
     } = this.props;
     let apiEndpoint = `/projects/${orgId}/${projectId}/keys/${keyId}/`;
+    const loaderLink = getDynamicText({
+      value: data.dsn.cdn,
+      fixed: '__JS_SDK_LOADER_URL__',
+    });
 
     return (
       <React.Fragment>
@@ -391,12 +397,20 @@ const KeySettings = createReactClass({
               <PanelHeader>{t('CDN')}</PanelHeader>
               <PanelBody>
                 <Field
-                  help={t('Copy this into your website and you are good to go')}
+                  help={tct(
+                    'Copy this script into your website to setup our JavaScript SDK without any additional configuration. [link]',
+                    {
+                      link: (
+                        <ExternalLink href="https://docs.sentry.io/platforms/javascript/browser/">
+                          What does the script provide?
+                        </ExternalLink>
+                      ),
+                    }
+                  )}
                   inline={false}
                   flexibleControlStateSize
                 >
-                  <TextCopyInput>{`<script src='${data.dsn
-                    .cdn}'></script>`}</TextCopyInput>
+                  <TextCopyInput>{`<script src='${loaderLink}'></script>`}</TextCopyInput>
                 </Field>
                 <SelectField
                   name="browserSdkVersion"
diff --git a/src/sentry/templates/sentry/js-sdk-loader-noop.js.tmpl b/src/sentry/templates/sentry/js-sdk-loader-noop.js.tmpl
index 086a3e94f1..5df7576133 100644
--- a/src/sentry/templates/sentry/js-sdk-loader-noop.js.tmpl
+++ b/src/sentry/templates/sentry/js-sdk-loader-noop.js.tmpl
@@ -1 +1 @@
-// Please set JS_SDK_LOADER_DEFAULT_SDK_URL in your config to point to a valid js file
+// nothing to see here
diff --git a/src/sentry/templates/sentry/js-sdk-loader.js.tmpl b/src/sentry/templates/sentry/js-sdk-loader.js.tmpl
index 7eb4772bda..ece31f605d 100644
--- a/src/sentry/templates/sentry/js-sdk-loader.js.tmpl
+++ b/src/sentry/templates/sentry/js-sdk-loader.js.tmpl
@@ -92,8 +92,10 @@
       // We want to replay all calls to Sentry first to make sure init is called before
       // we call all our internal error handlers
       var firstInitCall = false;
+      var calledSentry = false;
       for (var i = 0; i < data.length; i++) {
         if (data[i].f) {
+          calledSentry = true;
           var call = data[i];
           if (firstInitCall === false && call.f !== 'init') {
             // First call always has to be init, this is a conveniece for the user
@@ -104,7 +106,10 @@
           SDK[call.f].apply(SDK, call.a);
         }
       }
-
+      if (calledSentry === false) {
+        // Sentry has never been called but we need Sentry.init() so call it
+        SDK.init();
+      }
       // Because we installed the SDK, at this point we have an access to TraceKit's handler,
       // which can take care of browser differences (eg. missing exception argument in onerror)
       var tracekitErrorHandler = _window[_onerror];
@@ -149,6 +154,7 @@
     'captureException',
     'captureEvent',
     'configureScope',
+    'withScope',
     'showReportDialog',
   ].forEach(function(f) {
     _window[_namespace][f] = function() {
diff --git a/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl b/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl
index 2063e037d4..f72a9cd23f 100644
--- a/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl
+++ b/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl
@@ -1,3 +1,3 @@
-{% load sentry_helpers %}(function(d,u,v,l,m,n,z,A,w){function p(a){if(!x){x=!0;var e=u.getElementsByTagName(v)[0],b=u.createElement(v);b.src=A;b.crossorigin="anonymous";b.addEventListener("load",function(){try{d[l]=q;d[m]=r;var b=d[n],c=b.init;b.init=function(a){for(var b in a)Object.prototype.hasOwnProperty.call(a,b)&&(w[b]=a[b]);c(w)};B(a,b)}catch(k){console.error(k)}});e.parentNode.insertBefore(b,e)}}function B(a,e){try{a&&a();for(var b=g.data,f=!1,c=0;c<b.length;c++)if(b[c].f){var k=b[c];!1===f&&"init"!==k.f&&e.init();
-f=!0;e[k.f].apply(e,k.a)}var h=d[l];for(c=0;c<b.length;c++)b[c].e?h.apply(d,b[c].e):b[c].p&&e.captureException(b[c].p)}catch(C){console.error(C)}}for(var f=!0,y=!1,h=0;h<document.scripts.length;h++)if(-1<document.scripts[h].src.indexOf(z)){f="no"!==document.scripts[h].dataset.lazy;break}var x=!1,t,g=function(a){(a.e||a.p||a.f&&-1<a.f.indexOf("capture")||a.f&&-1<a.f.indexOf("showReportDialog"))&&f&&p(t);g.data.push(a)};g.data=[];d[n]={onLoad:function(a){f&&!y?t=a:p(a)},forceLoad:function(){y=!0;f&&
-setTimeout(function(){p(t)})}};"init addBreadcrumb captureMessage captureException captureEvent configureScope showReportDialog".split(" ").forEach(function(a){d[n][a]=function(){g({f:a,a:arguments})}});var q=d[l];d[l]=function(a,e,b,f,c){g({e:[].slice.call(arguments)});q&&q.apply(d,arguments)};var r=d[m];d[m]=function(a){g({p:a.reason});r&&r.apply(d,arguments)}})(window,document,"script","onerror","onunhandledrejection","Sentry","{{ publicKey|safe }}","{{ jsSdkUrl|safe }}",{{ config|to_json|safe }});
+{% load sentry_helpers %}(function(c,t,u,m,f,l,y,z,v){function n(a){if(!w){w=!0;var e=t.getElementsByTagName(u)[0],b=t.createElement(u);b.src=z;b.crossorigin="anonymous";b.addEventListener("load",function(){try{c[m]=p;c[f]=q;var b=c[l],e=b.init;b.init=function(a){for(var b in a)Object.prototype.hasOwnProperty.call(a,b)&&(v[b]=a[b]);e(v)};A(a,b)}catch(d){console.error(d)}});e.parentNode.insertBefore(b,e)}}function A(a,e){try{a&&a();for(var b=k.data,g=!1,h=!1,d=0;d<b.length;d++)if(b[d].f){h=!0;var f=b[d];!1===g&&"init"!==f.f&&
+e.init();g=!0;e[f.f].apply(e,f.a)}!1===h&&e.init();var l=c[m];for(d=0;d<b.length;d++)b[d].e?l.apply(c,b[d].e):b[d].p&&e.captureException(b[d].p)}catch(B){console.error(B)}}for(var g=!0,x=!1,h=0;h<document.scripts.length;h++)if(-1<document.scripts[h].src.indexOf(y)){g="no"!==document.scripts[h].dataset.lazy;break}var w=!1,r,k=function(a){(a.e||a.p||a.f&&-1<a.f.indexOf("capture")||a.f&&-1<a.f.indexOf("showReportDialog"))&&g&&n(r);k.data.push(a)};k.data=[];c[l]={onLoad:function(a){g&&!x?r=a:n(a)},forceLoad:function(){x=
+!0;g&&setTimeout(function(){n(r)})}};"init addBreadcrumb captureMessage captureException captureEvent configureScope withScope showReportDialog".split(" ").forEach(function(a){c[l][a]=function(){k({f:a,a:arguments})}});var p=c[m];c[m]=function(a,e,b,f,g){k({e:[].slice.call(arguments)});p&&p.apply(c,arguments)};var q=c[f];c[f]=function(a){k({p:a.reason});q&&q.apply(c,arguments)}})(window,document,"script","onerror","onunhandledrejection","Sentry","{{ publicKey|safe }}","{{ jsSdkUrl|safe }}",{{ config|to_json|safe }});
diff --git a/src/sentry/web/frontend/js_sdk_loader.py b/src/sentry/web/frontend/js_sdk_loader.py
index 1c7e43ccee..128c329aad 100644
--- a/src/sentry/web/frontend/js_sdk_loader.py
+++ b/src/sentry/web/frontend/js_sdk_loader.py
@@ -1,9 +1,11 @@
 from __future__ import absolute_import
 
-from django.http import Http404
+import time
+
 from django.conf import settings
 
 from sentry.relay import config
+from sentry.utils import metrics
 from sentry.models import ProjectKey
 from sentry.web.frontend.base import BaseView
 from sentry.web.helpers import render_to_response
@@ -16,14 +18,10 @@ CACHE_CONTROL = 'public, max-age=30, s-maxage=60, stale-while-revalidate=3153600
 class JavaScriptSdkLoader(BaseView):
     auth_required = False
 
-    def get(self, request, public_key, minified):
-        """Returns a js file that can be integrated into a website"""
-        try:
-            key = ProjectKey.objects.get(
-                public_key=public_key
-            )
-        except ProjectKey.DoesNotExist:
-            raise Http404
+    def _get_context(self, key):
+        """Sets context information needed to render the loader"""
+        if not key:
+            return ({}, None, None)
 
         sdk_version = get_browser_sdk_version(key)
         try:
@@ -34,23 +32,47 @@ class JavaScriptSdkLoader(BaseView):
         except TypeError:
             sdk_url = ''  # It fails if it cannot inject the version in the string
 
+        return ({
+            'config': config.get_project_key_config(key),
+            'jsSdkUrl': sdk_url,
+            'publicKey': key.public_key
+        }, sdk_version, sdk_url)
+
+    def get(self, request, public_key, minified):
+        """Returns a js file that can be integrated into a website"""
+        start_time = time.time()
+        key = None
+
+        try:
+            key = ProjectKey.objects.get_from_cache(
+                public_key=public_key
+            )
+        except ProjectKey.DoesNotExist:
+            pass
+
+        context, sdk_version, sdk_url = self._get_context(key)
+
+        instance = "default"
         if not sdk_url:
+            instance = "noop"
             tmpl = 'sentry/js-sdk-loader-noop.js.tmpl'
         elif minified is not None:
+            instance = "minified"
             tmpl = 'sentry/js-sdk-loader.min.js.tmpl'
         else:
             tmpl = 'sentry/js-sdk-loader.js.tmpl'
 
-        context = {
-            'config': config.get_project_key_config(key),
-            'jsSdkUrl': sdk_url,
-            'publicKey': public_key
-        }
+        metrics.incr('js-sdk-loader.rendered', instance=instance)
 
         response = render_to_response(tmpl, context, content_type="text/javascript")
 
+        response['Access-Control-Allow-Origin'] = '*'
         response['Cache-Control'] = CACHE_CONTROL
-        response['Surrogate-Key'] = 'project/%s sdk/%s sdk-loader' % (
-            key.project_id, sdk_version)
+        if sdk_version and key:
+            response['Surrogate-Key'] = 'project/%s sdk/%s sdk-loader' % (
+                key.project_id, sdk_version)
+
+        ms = int((time.time() - start_time) * 1000)
+        metrics.timing('js-sdk-loader.duration', ms, instance=instance)
 
         return response
diff --git a/tests/sentry/web/frontend/test_js_sdk_loader.py b/tests/sentry/web/frontend/test_js_sdk_loader.py
index 99e01f364d..e04b50d1c1 100644
--- a/tests/sentry/web/frontend/test_js_sdk_loader.py
+++ b/tests/sentry/web/frontend/test_js_sdk_loader.py
@@ -14,9 +14,10 @@ class JavaScriptSdkLoaderTest(TestCase):
         settings.JS_SDK_LOADER_DEFAULT_SDK_URL = 'https://s3.amazonaws.com/getsentry-cdn/@sentry/browser/%s/bundle.min.js'
         return reverse('sentry-js-sdk-loader', args=[self.projectkey.public_key])
 
-    def test_404(self):
+    def test_noop_no_pub_key(self):
         resp = self.client.get(reverse('sentry-js-sdk-loader', args=['abc']))
-        assert resp.status_code == 404
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/js-sdk-loader-noop.js.tmpl')
 
     def test_noop(self):
         settings.JS_SDK_LOADER_DEFAULT_SDK_URL = ''
@@ -57,6 +58,7 @@ class JavaScriptSdkLoaderTest(TestCase):
     def test_headers(self):
         resp = self.client.get(self.path)
         assert resp.status_code == 200, resp
+        self.assertIn('*', resp['Access-Control-Allow-Origin'])
         self.assertIn('stale-if-error', resp['Cache-Control'])
         self.assertIn('stale-while-revalidate', resp['Cache-Control'])
         self.assertIn('s-maxage', resp['Cache-Control'])
