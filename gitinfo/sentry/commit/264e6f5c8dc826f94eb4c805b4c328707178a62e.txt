commit 264e6f5c8dc826f94eb4c805b4c328707178a62e
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon Dec 10 13:00:39 2018 -0800

    ref(integrations): Assure releases api accept patch set data. (#10879)
    
    * Assume release accept patch set data.
    
    * Added more tests and cleaned up is valid check.
    
    * Added test class in cases and reused for both project and org.

diff --git a/src/sentry/api/endpoints/project_releases.py b/src/sentry/api/endpoints/project_releases.py
index 248997b947..432ca8a472 100644
--- a/src/sentry/api/endpoints/project_releases.py
+++ b/src/sentry/api/endpoints/project_releases.py
@@ -11,19 +11,34 @@ from sentry.api.paginator import OffsetPaginator
 from sentry.api.fields.user import UserField
 from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework import CommitSerializer, ListField
-from sentry.models import Activity, Environment, Release, ReleaseEnvironment
+from sentry.models import Activity, CommitFileChange, Environment, Release, ReleaseEnvironment
 from sentry.plugins.interfaces.releasehook import ReleaseHook
 from sentry.constants import VERSION_LENGTH
 from sentry.signals import release_created
 
 
+class CommitPatchSetSerializer(serializers.Serializer):
+    path = serializers.CharField(max_length=255)
+    type = serializers.CharField(max_length=1)
+
+    def validate_type(self, attrs, source):
+        value = attrs[source]
+        if not CommitFileChange.is_valid_type(value):
+            raise serializers.ValidationError('Commit patch_set type %s is not supported.' % value)
+        return attrs
+
+
+class CommitSerializerWithPatchSet(CommitSerializer):
+    patch_set = ListField(child=CommitPatchSetSerializer(), required=False, allow_null=False)
+
+
 class ReleaseSerializer(serializers.Serializer):
     version = serializers.CharField(max_length=VERSION_LENGTH, required=True)
     ref = serializers.CharField(max_length=VERSION_LENGTH, required=False)
     url = serializers.URLField(required=False)
     owner = UserField(required=False)
     dateReleased = serializers.DateTimeField(required=False)
-    commits = ListField(child=CommitSerializer(), required=False, allow_null=False)
+    commits = ListField(child=CommitSerializerWithPatchSet(), required=False, allow_null=False)
 
     def validate_version(self, attrs, source):
         value = attrs[source]
diff --git a/src/sentry/models/commitfilechange.py b/src/sentry/models/commitfilechange.py
index 44e3b285d5..1f9d9f652b 100644
--- a/src/sentry/models/commitfilechange.py
+++ b/src/sentry/models/commitfilechange.py
@@ -4,6 +4,8 @@ from django.db import models
 
 from sentry.db.models import (BoundedPositiveIntegerField, FlexibleForeignKey, Model, sane_repr)
 
+COMMIT_FILE_CHANGE_TYPES = frozenset(('A', 'D', 'M'))
+
 
 class CommitFileChange(Model):
     __core__ = False
@@ -21,3 +23,7 @@ class CommitFileChange(Model):
         unique_together = (('commit', 'filename'), )
 
     __repr__ = sane_repr('commit_id', 'filename')
+
+    @staticmethod
+    def is_valid_type(value):
+        return value in COMMIT_FILE_CHANGE_TYPES
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 2776b185f5..c2b595e101 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -11,7 +11,7 @@ from __future__ import absolute_import
 __all__ = (
     'TestCase', 'TransactionTestCase', 'APITestCase', 'TwoFactorAPITestCase', 'AuthProviderTestCase', 'RuleTestCase',
     'PermissionTestCase', 'PluginTestCase', 'CliTestCase', 'AcceptanceTestCase',
-    'IntegrationTestCase', 'UserReportEnvironmentTestCase', 'SnubaTestCase', 'IntegrationRepositoryTestCase',
+    'IntegrationTestCase', 'UserReportEnvironmentTestCase', 'SnubaTestCase', 'IntegrationRepositoryTestCase', 'ReleaseCommitPatchTest'
 )
 
 import base64
@@ -923,3 +923,32 @@ class IntegrationRepositoryTestCase(APITestCase):
     def assert_error_message(self, response, error_type, error_message):
         assert response.data['error_type'] == error_type
         assert error_message in response.data['errors']['__all__']
+
+
+class ReleaseCommitPatchTest(APITestCase):
+    def setUp(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        self.org = self.create_organization()
+        self.org.save()
+
+        team = self.create_team(organization=self.org)
+        self.project = self.create_project(name='foo', organization=self.org, teams=[team])
+
+        self.create_member(teams=[team], user=user, organization=self.org)
+        self.login_as(user=user)
+
+    @fixture
+    def url(self):
+        raise NotImplementedError
+
+    def assert_commit(self, commit, repo_id, key, author_id, message):
+        assert commit.organization_id == self.org.id
+        assert commit.repository_id == repo_id
+        assert commit.key == key
+        assert commit.author_id == author_id
+        assert commit.message == message
+
+    def assert_file_change(self, file_change, type, filename, commit_id):
+        assert file_change.type == type
+        assert file_change.filename == filename
+        assert file_change.commit_id == commit_id
diff --git a/tests/sentry/api/endpoints/test_organization_releases.py b/tests/sentry/api/endpoints/test_organization_releases.py
index 417f1aad5d..6fec765cce 100644
--- a/tests/sentry/api/endpoints/test_organization_releases.py
+++ b/tests/sentry/api/endpoints/test_organization_releases.py
@@ -5,12 +5,13 @@ from mock import patch
 from base64 import b64encode
 from datetime import datetime
 from django.core.urlresolvers import reverse
+from exam import fixture
 
 from sentry.models import (
-    Activity, ApiKey, ApiToken, Environment, Release, ReleaseCommit, ReleaseEnvironment, ReleaseProject, Repository
+    Activity, ApiKey, ApiToken, CommitAuthor, CommitFileChange, Environment, Release, ReleaseCommit, ReleaseEnvironment, ReleaseProject, Repository
 )
 from sentry.plugins.providers.dummy.repository import DummyRepositoryProvider
-from sentry.testutils import APITestCase
+from sentry.testutils import APITestCase, ReleaseCommitPatchTest
 
 
 class OrganizationReleaseListTest(APITestCase):
@@ -1032,3 +1033,97 @@ class OrganizationReleaseListEnvironmentsTest(APITestCase):
         )
         response = self.client.get(url + '?environment=' + 'invalid_environment', format='json')
         self.assert_releases(response, [])
+
+
+class OrganizationReleaseCreateCommitPatch(ReleaseCommitPatchTest):
+    @fixture
+    def url(self):
+        return reverse(
+            'sentry-api-0-organization-releases',
+            kwargs={'organization_slug': self.org.slug}
+        )
+
+    def test_commits_with_patch_set(self):
+        response = self.client.post(
+            self.url,
+            data={
+                "version": "2d1ab93fe4bb42db80890f01f8358fc9f8fbff3b",
+                "projects": [self.project.slug],
+                "commits": [
+                    {
+                        "patch_set": [{"path": "hello.py", "type": "M"}, {"path": "templates/hola.html", "type": "D"}],
+                        "repository": "laurynsentry/helloworld",
+                        "author_email": "lauryndbrown@gmail.com",
+                        "timestamp": "2018-11-29T18:50:28+03:00",
+                        "author_name": "Lauryn Brown",
+                        "message": "made changes to hello.",
+                        "id": "2d1ab93fe4bb42db80890f01f8358fc9f8fbff3b"
+                    }, {
+                        "patch_set": [{"path": "templates/hello.html", "type": "M"}, {"path": "templates/goodbye.html", "type": "A"}],
+                        "repository": "laurynsentry/helloworld",
+                        "author_email": "lauryndbrown@gmail.com",
+                        "timestamp": "2018-11-30T22:51:14+03:00",
+                        "author_name": "Lauryn Brown",
+                        "message": "Changed release",
+                        "id": "be2fe070f6d1b8a572b67defc87af2582f9b0d78"
+                    }
+                ]
+            }
+        )
+
+        assert response.status_code == 201, (response.status_code, response.content)
+        assert response.data['version']
+
+        release = Release.objects.get(
+            organization_id=self.org.id,
+            version=response.data['version'],
+        )
+
+        repo = Repository.objects.get(
+            organization_id=self.org.id,
+            name='laurynsentry/helloworld',
+        )
+        assert repo.provider is None
+
+        rc_list = list(
+            ReleaseCommit.objects.filter(
+                release=release,
+            ).select_related('commit', 'commit__author').order_by('order')
+        )
+        assert len(rc_list) == 2
+        for rc in rc_list:
+            assert rc.organization_id
+
+        author = CommitAuthor.objects.get(
+            organization_id=self.org.id,
+            email='lauryndbrown@gmail.com'
+        )
+        assert author.name == 'Lauryn Brown'
+
+        commits = [rc.commit for rc in rc_list]
+        commits.sort(key=lambda c: c.date_added)
+
+        self.assert_commit(
+            commit=commits[0],
+            repo_id=repo.id,
+            key='2d1ab93fe4bb42db80890f01f8358fc9f8fbff3b',
+            author_id=author.id,
+            message='made changes to hello.',
+        )
+
+        self.assert_commit(
+            commit=commits[1],
+            repo_id=repo.id,
+            key='be2fe070f6d1b8a572b67defc87af2582f9b0d78',
+            author_id=author.id,
+            message='Changed release',
+        )
+
+        file_changes = CommitFileChange.objects.filter(
+            organization_id=self.org.id
+        ).order_by('filename')
+
+        self.assert_file_change(file_changes[0], 'M', 'hello.py', commits[0].id)
+        self.assert_file_change(file_changes[1], 'A', 'templates/goodbye.html', commits[1].id)
+        self.assert_file_change(file_changes[2], 'M', 'templates/hello.html', commits[1].id)
+        self.assert_file_change(file_changes[3], 'D', 'templates/hola.html', commits[0].id)
diff --git a/tests/sentry/api/endpoints/test_project_releases.py b/tests/sentry/api/endpoints/test_project_releases.py
index 7731d485b4..698ad33300 100644
--- a/tests/sentry/api/endpoints/test_project_releases.py
+++ b/tests/sentry/api/endpoints/test_project_releases.py
@@ -3,9 +3,10 @@ from __future__ import absolute_import
 from datetime import datetime, timedelta
 from django.utils import timezone
 from django.core.urlresolvers import reverse
+from exam import fixture
 
-from sentry.models import Environment, Release, ReleaseCommit, ReleaseEnvironment, ReleaseProject, ReleaseProjectEnvironment
-from sentry.testutils import APITestCase
+from sentry.models import CommitAuthor, CommitFileChange, Environment, Release, ReleaseCommit, ReleaseEnvironment, ReleaseProject, ReleaseProjectEnvironment, Repository
+from sentry.testutils import APITestCase, ReleaseCommitPatchTest
 
 
 class ProjectReleaseListTest(APITestCase):
@@ -583,3 +584,124 @@ class ProjectReleaseCreateTest(APITestCase):
         assert len(rc_list) == 2
         for rc in rc_list:
             assert rc.organization_id
+
+
+class ProjectReleaseCreateCommitPatch(ReleaseCommitPatchTest):
+    @fixture
+    def url(self):
+        return reverse(
+            'sentry-api-0-project-releases',
+            kwargs={
+                'organization_slug': self.project.organization.slug,
+                'project_slug': self.project.slug,
+            }
+        )
+
+    def test_commits_with_patch_set(self):
+        response = self.client.post(
+            self.url,
+            data={
+                "version": "2d1ab93fe4bb42db80890f01f8358fc9f8fbff3b",
+                "projects": [self.project.slug],
+                "commits": [
+                    {
+                        "patch_set": [{"path": "hello.py", "type": "M"}, {"path": "templates/hola.html", "type": "D"}],
+                        "repository": "laurynsentry/helloworld",
+                        "author_email": "lauryndbrown@gmail.com",
+                        "timestamp": "2018-11-29T18:50:28+03:00",
+                        "author_name": "Lauryn Brown",
+                        "message": "made changes to hello.",
+                        "id": "2d1ab93fe4bb42db80890f01f8358fc9f8fbff3b"
+                    }, {
+                        "patch_set": [{"path": "templates/hello.html", "type": "M"}, {"path": "templates/goodbye.html", "type": "A"}],
+                        "repository": "laurynsentry/helloworld",
+                        "author_email": "lauryndbrown@gmail.com",
+                        "timestamp": "2018-11-30T22:51:14+03:00",
+                        "author_name": "Lauryn Brown",
+                        "message": "Changed release",
+                        "id": "be2fe070f6d1b8a572b67defc87af2582f9b0d78"
+                    }
+                ]
+            }
+        )
+
+        assert response.status_code == 201, (response.status_code, response.content)
+        assert response.data['version']
+
+        release = Release.objects.get(
+            organization_id=self.org.id,
+            version=response.data['version'],
+        )
+
+        repo = Repository.objects.get(
+            organization_id=self.org.id,
+            name='laurynsentry/helloworld',
+        )
+        assert repo.provider is None
+
+        rc_list = list(
+            ReleaseCommit.objects.filter(
+                release=release,
+            ).select_related('commit', 'commit__author')
+        )
+        assert len(rc_list) == 2
+        for rc in rc_list:
+            assert rc.organization_id
+
+        author = CommitAuthor.objects.get(
+            organization_id=self.org.id,
+            email='lauryndbrown@gmail.com'
+        )
+        assert author.name == 'Lauryn Brown'
+
+        commits = [rc.commit for rc in rc_list]
+        commits.sort(key=lambda c: c.date_added)
+
+        self.assert_commit(
+            commit=commits[0],
+            repo_id=repo.id,
+            key='2d1ab93fe4bb42db80890f01f8358fc9f8fbff3b',
+            author_id=author.id,
+            message='made changes to hello.',
+        )
+
+        self.assert_commit(
+            commit=commits[1],
+            repo_id=repo.id,
+            key='be2fe070f6d1b8a572b67defc87af2582f9b0d78',
+            author_id=author.id,
+            message='Changed release',
+        )
+
+        file_changes = CommitFileChange.objects.filter(
+            organization_id=self.org.id
+        ).order_by('filename')
+
+        self.assert_file_change(file_changes[0], 'M', 'hello.py', commits[0].id)
+        self.assert_file_change(file_changes[1], 'A', 'templates/goodbye.html', commits[1].id)
+        self.assert_file_change(file_changes[2], 'M', 'templates/hello.html', commits[1].id)
+        self.assert_file_change(file_changes[3], 'D', 'templates/hola.html', commits[0].id)
+
+    def test_invalid_patch_type(self):
+        response = self.client.post(
+            self.url,
+            data={
+                "version": "2d1ab93fe4bb42db80890f01f8358fc9f8fbff3b",
+                "projects": [self.project.slug],
+                "commits": [
+                    {
+                        "patch_set": [{"path": "hello.py", "type": "Z"}, {"path": "templates/hola.html", "type": "D"}],
+                        "repository": "laurynsentry/helloworld",
+                        "author_email": "lauryndbrown@gmail.com",
+                        "timestamp": "2018-11-29T18:50:28+03:00",
+                        "author_name": "Lauryn Brown",
+                        "message": "made changes to hello.",
+                        "id": "2d1ab93fe4bb42db80890f01f8358fc9f8fbff3b"
+                    },
+                ]
+            }
+        )
+
+        assert response.status_code == 400
+        # TODO(lb): What happened to my ValidationError??? this is not as helpful
+        assert response.content == '{"commits": ["patch_set: Incorrect type. Expected value, but got null"]}'
