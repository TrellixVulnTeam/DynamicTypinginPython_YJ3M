commit cd0c2c48516d057f9266dc3ecbb641571c265597
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jun 22 14:39:56 2017 -0700

    workflow: show actors for resolution when available

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index ce100fe66e..94bc19b40d 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -465,6 +465,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                 }
                 status_details = {
                     'inNextRelease': True,
+                    'actor': serialize(extract_lazy_object(request.user), request.user),
                 }
                 res_type = GroupResolution.Type.in_next_release
                 res_status = GroupResolution.Status.pending
@@ -477,6 +478,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                 }
                 status_details = {
                     'inRelease': release.version,
+                    'actor': serialize(extract_lazy_object(request.user), request.user),
                 }
                 res_type = GroupResolution.Type.in_release
                 res_status = GroupResolution.Status.resolved
@@ -511,8 +513,6 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
 
                     affected = Group.objects.filter(
                         id=group.id,
-                    ).exclude(
-                        status=GroupStatus.RESOLVED,
                     ).update(
                         status=GroupStatus.RESOLVED,
                         resolved_at=now,
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 909b522db7..5fe1ec7b5c 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import, print_function
 
 from collections import defaultdict, namedtuple
 from datetime import timedelta
+from itertools import izip
 
 import six
 from django.core.urlresolvers import reverse
@@ -14,7 +15,7 @@ from sentry.constants import LOG_LEVELS
 from sentry.models import (
     Group, GroupAssignee, GroupBookmark, GroupMeta, GroupResolution,
     GroupSeen, GroupSnooze, GroupStatus,
-    GroupSubscription, GroupSubscriptionReason, GroupTagKey, UserOption,
+    GroupSubscription, GroupSubscriptionReason, GroupTagKey, User, UserOption,
     UserOptionValue
 )
 from sentry.utils.db import attach_foreignkey
@@ -140,9 +141,20 @@ class GroupSerializer(Serializer):
             for i in GroupResolution.objects.filter(
                 group__in=item_list,
             ).values_list(
-                'group', 'type', 'release__version',
+                'group', 'type', 'release__version', 'actor_id',
             )
         }
+        actor_ids = set(r[-1] for r in six.itervalues(resolutions))
+        if actor_ids:
+            users = list(User.objects.filter(
+                id__in=actor_ids,
+                is_active=True,
+            ))
+            actors = {
+                u.id: d for u, d in izip(users, serialize(users, user))
+            }
+        else:
+            actors = {}
 
         result = {}
         for item in item_list:
@@ -156,6 +168,12 @@ class GroupSerializer(Serializer):
                 annotations.extend(safe_execute(plugin.get_annotations, group=item,
                                                 _with_transaction=False) or ())
 
+            resolution = resolutions.get(item.id)
+            if resolution:
+                resolution_actor = actors.get(resolution[-1])
+            else:
+                resolution_actor = None
+
             result[item] = {
                 'assigned_to': serialize(assignees.get(item.id)),
                 'is_bookmarked': item.id in bookmarks,
@@ -164,7 +182,8 @@ class GroupSerializer(Serializer):
                 'annotations': annotations,
                 'user_count': user_counts.get(item.id, 0),
                 'ignore_until': ignore_items.get(item.id),
-                'resolution': resolutions.get(item.id),
+                'resolution': resolution,
+                'resolution_actor': resolution_actor,
             }
         return result
 
@@ -198,11 +217,12 @@ class GroupSerializer(Serializer):
         if status == GroupStatus.RESOLVED:
             status_label = 'resolved'
             if attrs['resolution']:
-                res_type, res_version = attrs['resolution']
+                res_type, res_version, _ = attrs['resolution']
                 if res_type in (GroupResolution.Type.in_next_release, None):
                     status_details['inNextRelease'] = True
                 elif res_type == GroupResolution.Type.in_release:
                     status_details['inRelease'] = res_version
+                status_details['actor'] = attrs['resolution_actor']
         elif status == GroupStatus.IGNORED:
             status_label = 'ignored'
         elif status in [GroupStatus.PENDING_DELETION, GroupStatus.DELETION_IN_PROGRESS]:
diff --git a/src/sentry/static/sentry/app/components/resolutionBox.jsx b/src/sentry/static/sentry/app/components/resolutionBox.jsx
index b0f6dbf10f..872d9d8203 100644
--- a/src/sentry/static/sentry/app/components/resolutionBox.jsx
+++ b/src/sentry/static/sentry/app/components/resolutionBox.jsx
@@ -1,6 +1,7 @@
 import React from 'react';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
+import Avatar from './avatar';
 import Version from './version';
 import {t, tct} from '../locale';
 
@@ -13,10 +14,32 @@ export default React.createClass({
 
   renderReason() {
     let {params, statusDetails} = this.props;
-    if (statusDetails.inNextRelease) {
+    let actor = statusDetails.actor
+      ? (<strong>
+          <Avatar user={statusDetails.actor} size={20} className="avatar" />
+          <span style={{marginLeft: 5}}>{statusDetails.actor.name}</span>
+        </strong>)
+      : null;
+
+    if (statusDetails.inNextRelease && statusDetails.actor) {
+      return tct('[actor] marked this issue as resolved in the upcoming release.', {
+        actor: actor
+      });
+    } else if (statusDetails.inNextRelease) {
       return t('This issue has been marked as resolved in the upcoming release.');
+    } else if (statusDetails.inRelease && statusDetails.actor) {
+      return tct('[actor] marked this issue as resolved in version [version].', {
+        actor: actor,
+        version: (
+          <Version
+            version={statusDetails.inRelease}
+            orgId={params.orgId}
+            projectId={params.projectId}
+          />
+        )
+      });
     } else if (statusDetails.inRelease) {
-      return tct('This issue has been marked as resolved as of version [version].', {
+      return tct('This issue has been marked as resolved in version [version].', {
         version: (
           <Version
             version={statusDetails.inRelease}
diff --git a/tests/js/spec/components/__snapshots__/resolutionBox.spec.jsx.snap b/tests/js/spec/components/__snapshots__/resolutionBox.spec.jsx.snap
index 05b124f0d7..2f97c9eb76 100644
--- a/tests/js/spec/components/__snapshots__/resolutionBox.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/resolutionBox.spec.jsx.snap
@@ -26,6 +26,45 @@ exports[`ResolutionBox render() handles inNextRelease 1`] = `
 </div>
 `;
 
+exports[`ResolutionBox render() handles inNextRelease with actor 1`] = `
+<div
+  className="box"
+>
+  <span
+    className="icon icon-checkmark"
+  />
+  <p>
+    <span>
+      <strong>
+        <Avatar
+          className="avatar"
+          gravatar={true}
+          size={20}
+          user={
+            Object {
+              "email": "david@sentry.io",
+              "name": "David Cramer",
+            }
+          }
+        />
+        <span
+          style={
+            Object {
+              "marginLeft": 5,
+            }
+          }
+        >
+          David Cramer
+        </span>
+      </strong>
+      <span>
+         marked this issue as resolved in the upcoming release.
+      </span>
+    </span>
+  </p>
+</div>
+`;
+
 exports[`ResolutionBox render() handles inRelease 1`] = `
 <div
   className="box"
@@ -36,7 +75,55 @@ exports[`ResolutionBox render() handles inRelease 1`] = `
   <p>
     <span>
       <span>
-        This issue has been marked as resolved as of version 
+        This issue has been marked as resolved in version 
+      </span>
+      <Version
+        anchor={true}
+        orgId="org"
+        projectId="project"
+        version="1.0"
+      />
+      <span>
+        .
+      </span>
+    </span>
+  </p>
+</div>
+`;
+
+exports[`ResolutionBox render() handles inRelease with actor 1`] = `
+<div
+  className="box"
+>
+  <span
+    className="icon icon-checkmark"
+  />
+  <p>
+    <span>
+      <strong>
+        <Avatar
+          className="avatar"
+          gravatar={true}
+          size={20}
+          user={
+            Object {
+              "email": "david@sentry.io",
+              "name": "David Cramer",
+            }
+          }
+        />
+        <span
+          style={
+            Object {
+              "marginLeft": 5,
+            }
+          }
+        >
+          David Cramer
+        </span>
+      </strong>
+      <span>
+         marked this issue as resolved in version 
       </span>
       <Version
         anchor={true}
diff --git a/tests/js/spec/components/resolutionBox.spec.jsx b/tests/js/spec/components/resolutionBox.spec.jsx
index 0942c2a35c..fa0adf4152 100644
--- a/tests/js/spec/components/resolutionBox.spec.jsx
+++ b/tests/js/spec/components/resolutionBox.spec.jsx
@@ -15,10 +15,36 @@ describe('ResolutionBox', function() {
       );
       expect(toJson(wrapper)).toMatchSnapshot();
     });
+    it('handles inNextRelease with actor', function() {
+      let wrapper = shallow(
+        <ResolutionBox
+          statusDetails={{
+            inNextRelease: true,
+            actor: {name: 'David Cramer', email: 'david@sentry.io'}
+          }}
+          params={{orgId: 'org', projectId: 'project'}}
+        />
+      );
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
     it('handles inRelease', function() {
       let wrapper = shallow(
         <ResolutionBox
-          statusDetails={{inRelease: '1.0'}}
+          statusDetails={{
+            inRelease: '1.0'
+          }}
+          params={{orgId: 'org', projectId: 'project'}}
+        />
+      );
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+    it('handles inRelease with actor', function() {
+      let wrapper = shallow(
+        <ResolutionBox
+          statusDetails={{
+            inRelease: '1.0',
+            actor: {name: 'David Cramer', email: 'david@sentry.io'}
+          }}
           params={{orgId: 'org', projectId: 'project'}}
         />
       );
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 4ae8e40aa6..305bddf3ef 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -473,7 +473,8 @@ class GroupUpdateTest(APITestCase):
         }
 
         new_group1 = Group.objects.get(id=group1.id)
-        assert new_group1.resolved_at is None
+        assert new_group1.resolved_at is not None
+        assert new_group1.status == GroupStatus.RESOLVED
 
         new_group2 = Group.objects.get(id=group2.id)
         assert new_group2.resolved_at is not None
@@ -516,12 +517,9 @@ class GroupUpdateTest(APITestCase):
             },
         }, format='json')
         assert response.status_code == 200
-        assert response.data == {
-            'status': 'resolved',
-            'statusDetails': {
-                'inRelease': release.version,
-            },
-        }
+        assert response.data['status'] == 'resolved'
+        assert response.data['statusDetails']['inRelease'] == release.version
+        assert response.data['statusDetails']['actor']['id'] == six.text_type(self.user.id)
 
         group = Group.objects.get(id=group.id)
         assert group.status == GroupStatus.RESOLVED
@@ -532,6 +530,7 @@ class GroupUpdateTest(APITestCase):
         assert resolution.release == release
         assert resolution.type == GroupResolution.Type.in_release
         assert resolution.status == GroupResolution.Status.resolved
+        assert resolution.actor_id == self.user.id
 
         assert GroupSubscription.objects.filter(
             user=self.user,
@@ -571,12 +570,9 @@ class GroupUpdateTest(APITestCase):
             },
         }, format='json')
         assert response.status_code == 200
-        assert response.data == {
-            'status': 'resolved',
-            'statusDetails': {
-                'inRelease': release.version,
-            },
-        }
+        assert response.data['status'] == 'resolved'
+        assert response.data['statusDetails']['inRelease'] == release.version
+        assert response.data['statusDetails']['actor']['id'] == six.text_type(self.user.id)
 
         group = Group.objects.get(id=group.id)
         assert group.status == GroupStatus.RESOLVED
@@ -587,6 +583,7 @@ class GroupUpdateTest(APITestCase):
         assert resolution.release == release
         assert resolution.type == GroupResolution.Type.in_release
         assert resolution.status == GroupResolution.Status.resolved
+        assert resolution.actor_id == self.user.id
 
         assert GroupSubscription.objects.filter(
             user=self.user,
@@ -623,12 +620,9 @@ class GroupUpdateTest(APITestCase):
             },
         }, format='json')
         assert response.status_code == 200
-        assert response.data == {
-            'status': 'resolved',
-            'statusDetails': {
-                'inNextRelease': True,
-            },
-        }
+        assert response.data['status'] == 'resolved'
+        assert response.data['statusDetails']['inNextRelease']
+        assert response.data['statusDetails']['actor']['id'] == six.text_type(self.user.id)
 
         group = Group.objects.get(id=group.id)
         assert group.status == GroupStatus.RESOLVED
@@ -639,6 +633,7 @@ class GroupUpdateTest(APITestCase):
         assert resolution.release == release
         assert resolution.type == GroupResolution.Type.in_next_release
         assert resolution.status == GroupResolution.Status.pending
+        assert resolution.actor_id == self.user.id
 
         assert GroupSubscription.objects.filter(
             user=self.user,
@@ -672,12 +667,9 @@ class GroupUpdateTest(APITestCase):
             'status': 'resolvedInNextRelease',
         }, format='json')
         assert response.status_code == 200
-        assert response.data == {
-            'status': 'resolved',
-            'statusDetails': {
-                'inNextRelease': True,
-            },
-        }
+        assert response.data['status'] == 'resolved'
+        assert response.data['statusDetails']['inNextRelease']
+        assert response.data['statusDetails']['actor']['id'] == six.text_type(self.user.id)
 
         group = Group.objects.get(id=group.id)
         assert group.status == GroupStatus.RESOLVED
@@ -688,6 +680,7 @@ class GroupUpdateTest(APITestCase):
         assert resolution.release == release
         assert resolution.type == GroupResolution.Type.in_next_release
         assert resolution.status == GroupResolution.Status.pending
+        assert resolution.actor_id == self.user.id
 
         assert GroupSubscription.objects.filter(
             user=self.user,
diff --git a/tests/sentry/api/serializers/test_group.py b/tests/sentry/api/serializers/test_group.py
index aa662ad8cc..00d45be9a5 100644
--- a/tests/sentry/api/serializers/test_group.py
+++ b/tests/sentry/api/serializers/test_group.py
@@ -2,6 +2,8 @@
 
 from __future__ import absolute_import
 
+import six
+
 from datetime import timedelta
 from django.utils import timezone
 from mock import patch
@@ -9,7 +11,7 @@ from mock import patch
 from sentry.api.serializers import serialize
 from sentry.models import (
     GroupResolution, GroupSnooze, GroupSubscription,
-    GroupStatus, Release, UserOption, UserOptionValue
+    GroupStatus, UserOption, UserOptionValue
 )
 from sentry.testutils import TestCase
 
@@ -54,11 +56,7 @@ class GroupSerializerTest(TestCase):
         }
 
     def test_resolved_in_next_release(self):
-        release = Release.objects.create(
-            organization_id=self.project.organization_id,
-            version='a',
-        )
-        release.add_project(self.project)
+        release = self.create_release(project=self.project, version='a')
         user = self.create_user()
         group = self.create_group(
             status=GroupStatus.RESOLVED,
@@ -71,14 +69,26 @@ class GroupSerializerTest(TestCase):
 
         result = serialize(group, user)
         assert result['status'] == 'resolved'
-        assert result['statusDetails'] == {'inNextRelease': True}
+        assert result['statusDetails'] == {'inNextRelease': True, 'actor': None}
 
     def test_resolved_in_release(self):
-        release = Release.objects.create(
-            organization_id=self.project.organization_id,
-            version='a',
+        release = self.create_release(project=self.project, version='a')
+        user = self.create_user()
+        group = self.create_group(
+            status=GroupStatus.RESOLVED,
+        )
+        GroupResolution.objects.create(
+            group=group,
+            release=release,
+            type=GroupResolution.Type.in_release,
         )
-        release.add_project(self.project)
+
+        result = serialize(group, user)
+        assert result['status'] == 'resolved'
+        assert result['statusDetails'] == {'inRelease': 'a', 'actor': None}
+
+    def test_resolved_with_actor(self):
+        release = self.create_release(project=self.project, version='a')
         user = self.create_user()
         group = self.create_group(
             status=GroupStatus.RESOLVED,
@@ -87,11 +97,12 @@ class GroupSerializerTest(TestCase):
             group=group,
             release=release,
             type=GroupResolution.Type.in_release,
+            actor_id=user.id,
         )
 
         result = serialize(group, user)
         assert result['status'] == 'resolved'
-        assert result['statusDetails'] == {'inRelease': 'a'}
+        assert result['statusDetails']['actor']['id'] == six.text_type(user.id)
 
     @patch('sentry.models.Group.is_over_resolve_age')
     def test_auto_resolved(self, mock_is_over_resolve_age):
