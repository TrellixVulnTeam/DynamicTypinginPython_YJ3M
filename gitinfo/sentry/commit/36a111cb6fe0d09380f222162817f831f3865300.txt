commit 36a111cb6fe0d09380f222162817f831f3865300
Author: Chris Fuller <cfuller@sentry.io>
Date:   Tue Jan 28 10:52:44 2020 -0500

    feat(workflow): Supporting Incident severity levels (#16545)
    
    * Adding alert severity to incident
    
    * Adding function to update incident status on trigger alert/resolution

diff --git a/src/sentry/api/endpoints/organization_incident_index.py b/src/sentry/api/endpoints/organization_incident_index.py
index 9ee92b631f..3f775a6dfe 100644
--- a/src/sentry/api/endpoints/organization_incident_index.py
+++ b/src/sentry/api/endpoints/organization_incident_index.py
@@ -68,10 +68,14 @@ class OrganizationIncidentIndexEndpoint(OrganizationEndpoint):
 
         query_status = request.GET.get("status")
 
-        if query_status == "open":
-            incidents = incidents.filter(status=IncidentStatus.OPEN.value)
+        if query_status == "critical":
+            incidents = incidents.filter(status=IncidentStatus.CRITICAL.value)
+        elif query_status == "warning":
+            incidents = incidents.filter(status=IncidentStatus.WARNING.value)
         elif query_status == "closed":
             incidents = incidents.filter(status=IncidentStatus.CLOSED.value)
+        elif query_status == "open":
+            incidents = incidents.exclude(status=IncidentStatus.CLOSED.value)
 
         return self.paginate(
             request,
diff --git a/src/sentry/incidents/models.py b/src/sentry/incidents/models.py
index 9795212668..bdf7f62290 100644
--- a/src/sentry/incidents/models.py
+++ b/src/sentry/incidents/models.py
@@ -89,6 +89,8 @@ class IncidentType(Enum):
 class IncidentStatus(Enum):
     OPEN = 1
     CLOSED = 2
+    WARNING = 10
+    CRITICAL = 20
 
 
 class Incident(Model):
diff --git a/src/sentry/incidents/subscription_processor.py b/src/sentry/incidents/subscription_processor.py
index f58e720edd..9553061783 100644
--- a/src/sentry/incidents/subscription_processor.py
+++ b/src/sentry/incidents/subscription_processor.py
@@ -10,6 +10,7 @@ from django.conf import settings
 from django.db import transaction
 
 from sentry.incidents.logic import create_incident, update_incident_status
+from sentry.incidents.endpoints.serializers import WARNING_TRIGGER_LABEL, CRITICAL_TRIGGER_LABEL
 from sentry.snuba.subscriptions import query_aggregation_to_snuba
 from sentry.incidents.models import (
     AlertRule,
@@ -69,12 +70,15 @@ class SubscriptionProcessor(object):
         if not hasattr(self, "_active_incident"):
             try:
                 # Fetch the active incident if one exists for this alert rule.
-                self._active_incident = Incident.objects.filter(
-                    type=IncidentType.ALERT_TRIGGERED.value,
-                    status=IncidentStatus.OPEN.value,
-                    alert_rule=self.alert_rule,
-                    projects=self.subscription.project,
-                ).order_by("-date_added")[0]
+                self._active_incident = (
+                    Incident.objects.filter(
+                        type=IncidentType.ALERT_TRIGGERED.value,
+                        alert_rule=self.alert_rule,
+                        projects=self.subscription.project,
+                    )
+                    .exclude(status=IncidentStatus.CLOSED.value)
+                    .order_by("-date_added")[0]
+                )
             except IndexError:
                 self._active_incident = None
         return self._active_incident
@@ -193,6 +197,7 @@ class SubscriptionProcessor(object):
                     alert_rule_trigger=trigger,
                     status=TriggerStatus.ACTIVE.value,
                 )
+            self.handle_incident_severity_update()
             self.handle_trigger_actions(incident_trigger)
             self.incident_triggers[trigger.id] = incident_trigger
 
@@ -231,6 +236,7 @@ class SubscriptionProcessor(object):
             incident_trigger.status = TriggerStatus.RESOLVED.value
             incident_trigger.save()
             self.handle_trigger_actions(incident_trigger)
+            self.handle_incident_severity_update()
 
             if self.check_triggers_resolved():
                 update_incident_status(self.active_incident, IncidentStatus.CLOSED)
@@ -252,6 +258,23 @@ class SubscriptionProcessor(object):
                 countdown=5,
             )
 
+    def handle_incident_severity_update(self):
+        if self.active_incident:
+            active_incident_triggers = IncidentTrigger.objects.filter(
+                incident=self.active_incident, status=TriggerStatus.ACTIVE.value
+            )
+            severity = None
+            for active_incident_trigger in active_incident_triggers:
+                trigger = active_incident_trigger.alert_rule_trigger
+                if trigger.label == CRITICAL_TRIGGER_LABEL:
+                    severity = IncidentStatus.CRITICAL
+                    break
+                elif trigger.label == WARNING_TRIGGER_LABEL:
+                    severity = IncidentStatus.WARNING
+
+            if severity:
+                update_incident_status(self.active_incident, severity)
+
     def update_alert_rule_stats(self):
         """
         Updates stats about the alert rule, if they're changed.
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 49fa55e4d7..837c5c012c 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -165,9 +165,9 @@ class UpdateIncidentStatus(TestCase):
         return IncidentActivity.objects.filter(incident=incident).order_by("-id")[:1].get()
 
     def test_status_already_set(self):
-        incident = self.create_incident(status=IncidentStatus.OPEN.value)
+        incident = self.create_incident(status=IncidentStatus.WARNING.value)
         with self.assertRaises(StatusAlreadyChangedError):
-            update_incident_status(incident, IncidentStatus.OPEN)
+            update_incident_status(incident, IncidentStatus.WARNING)
 
     def run_test(self, incident, status, expected_date_closed, user=None, comment=None):
         prev_status = incident.status
@@ -214,24 +214,6 @@ class UpdateIncidentStatus(TestCase):
         ):
             self.run_test(incident, IncidentStatus.CLOSED, timezone.now())
 
-    def test_reopened(self):
-        incident = create_incident(
-            self.organization,
-            IncidentType.CREATED,
-            "Test",
-            "",
-            QueryAggregations.TOTAL,
-            timezone.now(),
-            projects=[self.project],
-        )
-        update_incident_status(incident, IncidentStatus.CLOSED)
-        with self.assertChanges(
-            lambda: IncidentSnapshot.objects.filter(incident=incident).exists(),
-            before=True,
-            after=False,
-        ):
-            self.run_test(incident, IncidentStatus.OPEN, None)
-
     def test_all_params(self):
         incident = self.create_incident()
         self.run_test(
@@ -444,13 +426,13 @@ class CreateIncidentActivityTest(TestCase, BaseIncidentsTest):
             IncidentActivityType.STATUS_CHANGE,
             user=self.user,
             value=six.text_type(IncidentStatus.CLOSED.value),
-            previous_value=six.text_type(IncidentStatus.OPEN.value),
+            previous_value=six.text_type(IncidentStatus.WARNING.value),
         )
         assert activity.incident == incident
         assert activity.type == IncidentActivityType.STATUS_CHANGE.value
         assert activity.user == self.user
         assert activity.value == six.text_type(IncidentStatus.CLOSED.value)
-        assert activity.previous_value == six.text_type(IncidentStatus.OPEN.value)
+        assert activity.previous_value == six.text_type(IncidentStatus.WARNING.value)
         self.assert_notifications_sent(activity)
         assert not self.record_event.called
 
diff --git a/tests/sentry/incidents/test_subscription_processor.py b/tests/sentry/incidents/test_subscription_processor.py
index c265a59d9f..8e8d5f7ef0 100644
--- a/tests/sentry/incidents/test_subscription_processor.py
+++ b/tests/sentry/incidents/test_subscription_processor.py
@@ -200,10 +200,9 @@ class ProcessUpdateTest(TestCase):
         return list(
             Incident.objects.filter(
                 type=IncidentType.ALERT_TRIGGERED.value,
-                status=IncidentStatus.OPEN.value,
                 alert_rule=rule,
                 projects=subscription.project,
-            )
+            ).exclude(status=IncidentStatus.CLOSED.value)
         )
 
     def assert_trigger_counts(self, processor, trigger, alert_triggers=0, resolve_triggers=0):
diff --git a/tests/sentry/incidents/test_tasks.py b/tests/sentry/incidents/test_tasks.py
index a34aa6a2e3..9182844334 100644
--- a/tests/sentry/incidents/test_tasks.py
+++ b/tests/sentry/incidents/test_tasks.py
@@ -138,12 +138,12 @@ class TestBuildActivityContext(BaseIncidentActivityTest, TestCase):
         )
         activity.type = IncidentActivityType.STATUS_CHANGE
         activity.value = six.text_type(IncidentStatus.CLOSED.value)
-        activity.previous_value = six.text_type(IncidentStatus.OPEN.value)
+        activity.previous_value = six.text_type(IncidentStatus.WARNING.value)
         self.run_test(
             activity,
             expected_username=activity.user.name,
             expected_action="changed status from %s to %s"
-            % (IncidentStatus.OPEN.name.lower(), IncidentStatus.CLOSED.name.lower()),
+            % (IncidentStatus.WARNING.name.lower(), IncidentStatus.CLOSED.name.lower()),
             expected_comment=activity.comment,
             expected_recipient=recipient,
         )
diff --git a/tests/snuba/incidents/test_tasks.py b/tests/snuba/incidents/test_tasks.py
index fe3e95696a..6e4abbe526 100644
--- a/tests/snuba/incidents/test_tasks.py
+++ b/tests/snuba/incidents/test_tasks.py
@@ -130,10 +130,8 @@ class HandleSnubaQueryUpdateTest(TestCase):
 
         def active_incident():
             return Incident.objects.filter(
-                type=IncidentType.ALERT_TRIGGERED.value,
-                status=IncidentStatus.OPEN.value,
-                alert_rule=self.rule,
-            )
+                type=IncidentType.ALERT_TRIGGERED.value, alert_rule=self.rule
+            ).exclude(status=IncidentStatus.CLOSED.value)
 
         consumer = QuerySubscriptionConsumer("hi", topic=self.topic)
         with self.assertChanges(
