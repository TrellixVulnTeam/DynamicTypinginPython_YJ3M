commit e6457380d15febb551a473d4737f46bd132ee1c6
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Mar 21 20:37:37 2012 -0700

    Add the ability to suspend memberships on projects

diff --git a/bootstrap/sentry.less b/bootstrap/sentry.less
index a40db45eb6..11dc7896f2 100644
--- a/bootstrap/sentry.less
+++ b/bootstrap/sentry.less
@@ -432,6 +432,9 @@ code {
 .table th {
   vertical-align: top;
 }
+.table td {
+  vertical-align: middle;
+}
 .clippy {
   display: inline-block;
   vertical-align: middle;
diff --git a/sentry/coreapi.py b/sentry/coreapi.py
index 644d7d6925..a387114d55 100644
--- a/sentry/coreapi.py
+++ b/sentry/coreapi.py
@@ -79,7 +79,7 @@ def project_from_auth_vars(auth_vars, data):
         except ProjectMember.DoesNotExist:
             raise APIForbidden('Invalid signature')
 
-        if pm.user and not pm.user.is_active:
+        if not pm.is_active or pm.user and not pm.user.is_active:
             raise APIUnauthorized('Account is not active')
 
         project = pm.project
@@ -120,7 +120,7 @@ def project_from_api_key_and_id(api_key, project_id):
     if str(pm.project_id) != str(project_id):
         raise APIUnauthorized()
 
-    if pm.user and not pm.user.is_active:
+    if not pm.is_active or pm.user and not pm.user.is_active:
         raise APIUnauthorized('Account is not active')
 
     return pm.project
@@ -142,6 +142,9 @@ def project_from_id(request):
     except ProjectMember.DoesNotExist:
         raise APIUnauthorized()
 
+    if not pm.is_active:
+        raise APIUnauthorized()
+
     return pm.project
 
 
diff --git a/sentry/migrations/0044_auto__add_field_projectmember_is_active.py b/sentry/migrations/0044_auto__add_field_projectmember_is_active.py
new file mode 100644
index 0000000000..08fa7f9a48
--- /dev/null
+++ b/sentry/migrations/0044_auto__add_field_projectmember_is_active.py
@@ -0,0 +1,218 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding field 'ProjectMember.is_active'
+        db.add_column('sentry_projectmember', 'is_active', self.gf('django.db.models.fields.BooleanField')(default=True), keep_default=False)
+
+
+    def backwards(self, orm):
+        
+        # Deleting field 'ProjectMember.is_active'
+        db.delete_column('sentry_projectmember', 'is_active')
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'logger', 'culprit', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'views': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.View']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectcountbyminute': {
+            'Meta': {'unique_together': "(('project', 'date'),)", 'object_name': 'ProjectCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.projectdomain': {
+            'Meta': {'unique_together': "(('project', 'domain'),)", 'object_name': 'ProjectDomain'},
+            'domain': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'domain_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.projectmember': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'ProjectMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_project_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.searchdocument': {
+            'Meta': {'unique_together': "(('project', 'group'),)", 'object_name': 'SearchDocument'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_changed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'total_events': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'})
+        },
+        'sentry.searchtoken': {
+            'Meta': {'unique_together': "(('document', 'field', 'token'),)", 'object_name': 'SearchToken'},
+            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'token_set'", 'to': "orm['sentry.SearchDocument']"}),
+            'field': ('django.db.models.fields.CharField', [], {'default': "'text'", 'max_length': '64'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.view': {
+            'Meta': {'object_name': 'View'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
+            'verbose_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'verbose_name_plural': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index e15641a136..9048abec2b 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -186,6 +186,7 @@ class ProjectMember(Model):
     """
     project = models.ForeignKey(Project, related_name="member_set")
     user = models.ForeignKey(User, related_name="sentry_project_set")
+    is_active = models.BooleanField(default=True)
     public_key = models.CharField(max_length=32, unique=True, null=True)
     secret_key = models.CharField(max_length=32, unique=True, null=True)
     type = models.IntegerField(choices=MEMBER_TYPES, default=globals().get(settings.DEFAULT_PROJECT_ACCESS))
diff --git a/sentry/static/styles/global.css b/sentry/static/styles/global.css
index a44a42a1a6..25d5c95037 100644
--- a/sentry/static/styles/global.css
+++ b/sentry/static/styles/global.css
@@ -3838,6 +3838,9 @@ code {
 .table th {
   vertical-align: top;
 }
+.table td {
+  vertical-align: middle;
+}
 .clippy {
   display: inline-block;
   vertical-align: middle;
@@ -4030,9 +4033,6 @@ pre.exception_value {
 .server-list li, .url-list li {
   padding-bottom: 10px;
 }
-.server-list li .count, .url-list li .count {
-  padding-right: 10px;
-}
 .url-list li a {
   line-height: 18px;
 }
diff --git a/sentry/static/styles/global.min.css b/sentry/static/styles/global.min.css
index 103cbb0890..ec03576411 100644
--- a/sentry/static/styles/global.min.css
+++ b/sentry/static/styles/global.min.css
@@ -669,6 +669,7 @@ pre span,code span{display:inline-block;}
 code{border:0;background-color:inherit;color:#666666;}
 .nav-tabs>li.pull-right{float:right;}
 .table th{vertical-align:top;}
+.table td{vertical-align:middle;}
 .clippy{display:inline-block;vertical-align:middle;}.clippy object{padding-right:5px;}
 ol.context{margin:0;list-style-position:inside;border:1px solid #ccc;border:1px solid rgba(0, 0, 0, 0.15);-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px;}ol.context>li{padding-left:20px;font-family:monospace;white-space:pre;color:rgba(0, 0, 0, 0.75);background-color:#f5f5f5;}ol.context>li>pre{background-color:inherit;color:rgba(0, 0, 0, 0.5);margin:0;padding:0;border:0;display:block;line-height:18px;font-size:12px;white-space:pre;white-space:pre-wrap;word-wrap:break-word;}
 ol.context>li.active{background-color:#ddd;}ol.context>li.active pre{color:#000000;}
diff --git a/sentry/templates/sentry/projects/manage.html b/sentry/templates/sentry/projects/manage.html
index 3dd5e985f5..10c74d7546 100644
--- a/sentry/templates/sentry/projects/manage.html
+++ b/sentry/templates/sentry/projects/manage.html
@@ -53,37 +53,50 @@
             </form>
             <div class="page-header">
                 {% if can_add_member %}
-                    <a href="{% url sentry-new-project-member project.pk %}" class="btn pull-right small btn-primary">{% trans "New Member" %}</a>
+                    <a href="{% url sentry-new-project-member project.pk %}" class="btn pull-right btn-small btn-primary">{% trans "New Member" %}</a>
                 {% endif %}
                 <h2>{% trans "Members" %}</h2>
             </div>
             <table class="table table-bordered table-striped">
                 <colgroup>
-                    <col width="100px"/>
                     <col/>
-                    <col width="50px"/>
+                    <col width="100px"/>
+                    <col width="90px"/>
+                    <col width="90px"/>
                 </colgroup>
                 <thead>
                     <tr>
-                        <th>{% trans "Username" %}</th>
-                        <th>{% trans "Access" %}</th>
-                        <th>&nbsp;</th>
+                        <th>{% trans "User" %}</th>
+                        <th style="text-align:center">{% trans "Access" %}</th>
+                        <th colspan="2" style="text-align:center">{% trans "Actions" %}</th>
                     </tr>
                 </thead>
                 <tbody>
                     {% for member, user in member_list %}
                         <tr>
-                            <td><a href="{% url sentry-edit-project-member project.pk member.pk %}">{{ user.username }}</a></td>
                             <td>
-                                {{ member.get_type_display }}
+                                <a href="{% url sentry-edit-project-member project.pk member.pk %}">{{ user.username }}</a><br>
+                                {{ user.email }}
                             </td>
                             <td style="text-align:center;">
-                                {% if user == project.owner %}
-                                    <em>{% trans "owner" %}</em>
-                                {% else %}
-                                    <a href="{% url sentry-remove-project-member project.pk member.pk %}">{% trans "Revoke" %}</a>
-                                {% endif %}
+                                {{ member.get_type_display }}
                             </td>
+                            {% if user == project.owner %}
+                                <td style="text-align:center;" colspan="2">
+                                    <em>{% trans "unavailable for owner" %}</em>
+                                </td>
+                            {% else %}
+                                <td style="text-align:center;">
+                                    <a href="{% url sentry-remove-project-member project.pk member.pk %}" class="btn btn-danger btn-small">{% trans "Remove" %}</a>
+                                </td>
+                                <td style="text-align:center;">
+                                    {% if member.is_active %}
+                                        <a href="{% url sentry-suspend-project-member project.pk member.pk %}" class="btn btn-small">{% trans "Suspend" %}</a>
+                                    {% else %}
+                                        <a href="{% url sentry-restore-project-member project.pk member.pk %}" class="btn btn-small">{% trans "Restore" %}</a>
+                                    {% endif %}
+                                </td>
+                            {% endif %}
                         </tr>
                     {% endfor %}
                 </tbody>
diff --git a/sentry/web/frontend/projects.py b/sentry/web/frontend/projects.py
index 657d98c577..4f3b0f2b52 100644
--- a/sentry/web/frontend/projects.py
+++ b/sentry/web/frontend/projects.py
@@ -226,6 +226,38 @@ def remove_project_member(request, project, member_id):
     return render_to_response('sentry/projects/members/remove.html', context, request)
 
 
+@csrf_protect
+@has_access(MEMBER_OWNER)
+def suspend_project_member(request, project, member_id):
+    member = project.member_set.get(pk=member_id)
+    if member.user == project.owner:
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
+
+    result = plugins.first('has_perm', request.user, 'suspend_project_member', member)
+    if result is False and not request.user.has_perm('sentry.can_change_projectmember'):
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
+
+    member.update(is_active=False)
+
+    return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
+
+
+@csrf_protect
+@has_access(MEMBER_OWNER)
+def restore_project_member(request, project, member_id):
+    member = project.member_set.get(pk=member_id)
+    if member.user == project.owner:
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
+
+    result = plugins.first('has_perm', request.user, 'restore_project_member', member)
+    if result is False and not request.user.has_perm('sentry.can_change_projectmember'):
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
+
+    member.update(is_active=True)
+
+    return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
+
+
 @login_required
 @has_access(MEMBER_OWNER)
 @csrf_protect
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
index 420c3cd7cf..24329784e8 100644
--- a/sentry/web/urls.py
+++ b/sentry/web/urls.py
@@ -53,6 +53,8 @@ urlpatterns = patterns('',
     url(r'^projects/(?P<project_id>\d+)/members/new/$', projects.new_project_member, name='sentry-new-project-member'),
     url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/edit/$', projects.edit_project_member, name='sentry-edit-project-member'),
     url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/remove/$', projects.remove_project_member, name='sentry-remove-project-member'),
+    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/suspend/$', projects.suspend_project_member, name='sentry-suspend-project-member'),
+    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/restore/$', projects.restore_project_member, name='sentry-restore-project-member'),
 
     # Global
 
diff --git a/setup.py b/setup.py
index b623dee9d6..c6bd10dd99 100755
--- a/setup.py
+++ b/setup.py
@@ -50,7 +50,7 @@ install_requires = [
 
 setup(
     name='sentry',
-    version='3.5.9',
+    version='3.6.0',
     author='David Cramer',
     author_email='dcramer@gmail.com',
     url='http://github.com/dcramer/sentry',
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index f2847a0ade..a811ff89b7 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -58,6 +58,16 @@ class ProjectFromIdTest(BaseAPITest):
 
         self.assertRaises(APIUnauthorized, project_from_id, request)
 
+    def test_inactive_member(self):
+        request = mock.Mock()
+        request.user = self.user
+        request.GET = {'project_id': self.project.id}
+
+        self.pm.is_active = False
+        self.pm.save()
+
+        self.assertRaises(APIUnauthorized, project_from_id, request)
+
 
 class ProjectFromApiKeyAndIdTest(BaseAPITest):
     def test_valid(self):
@@ -78,6 +88,12 @@ class ProjectFromApiKeyAndIdTest(BaseAPITest):
 
         self.assertRaises(APIUnauthorized, project_from_api_key_and_id, self.pm.public_key, self.project.id)
 
+    def test_inactive_member(self):
+        self.pm.is_active = False
+        self.pm.save()
+
+        self.assertRaises(APIUnauthorized, project_from_api_key_and_id, self.pm.public_key, self.project.id)
+
 
 class ExtractAuthVarsTest(BaseAPITest):
     def test_valid(self):
@@ -151,6 +167,25 @@ class ProjectFromAuthVarsTest(BaseAPITest):
             auth_vars['sentry_key'] = self.pm.public_key
             self.assertRaises(APIUnauthorized, project_from_auth_vars, auth_vars, '')
 
+    def test_inactive_member(self):
+        self.pm.is_active = False
+        self.pm.save()
+
+        auth_vars = {
+            'sentry_signature': 'adf',
+            'sentry_timestamp': time.time(),
+        }
+        with mock.patch('sentry.coreapi.validate_hmac') as validate_hmac_:
+            validate_hmac_.return_value = True
+
+            # without key
+            result = project_from_auth_vars(auth_vars, '')
+            self.assertEquals(result, None)
+
+            # with key
+            auth_vars['sentry_key'] = self.pm.public_key
+            self.assertRaises(APIUnauthorized, project_from_auth_vars, auth_vars, '')
+
 
 class ValidateHmacTest(BaseAPITest):
     def test_valid(self):
