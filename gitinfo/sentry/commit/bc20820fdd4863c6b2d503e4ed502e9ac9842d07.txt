commit bc20820fdd4863c6b2d503e4ed502e9ac9842d07
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 17 16:24:16 2015 -0700

    Add pluggable internal metrics backends
    
    - Adds statsd and datadog implementations

diff --git a/setup.py b/setup.py
index 8b1f239965..81012f14ea 100755
--- a/setup.py
+++ b/setup.py
@@ -56,6 +56,7 @@ tests_require = [
     'blist',  # used by cassandra
     'casscache',
     'cqlsh',
+    'datadog',
     'elasticsearch',
     'httpretty',
     'pytest-cov>=1.4',
@@ -79,7 +80,6 @@ install_requires = [
     'django-picklefield>=0.3.0,<0.4.0',
     'django-recaptcha>=1.0.0,<1.1.0',
     'django-social-auth>=0.7.28,<0.8.0',
-    'django-statsd-mozilla>=0.3.14.0,<0.3.15.0',
     'django-sudo>=1.1.3,<1.2.0',
     'django-templatetag-sugar>=0.1.0',
     'djangorestframework>=2.3.8,<2.4.0',
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 4d1d52ffba..a4d73320bd 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -523,12 +523,6 @@ REST_FRAMEWORK = {
 RECAPTCHA_PUBLIC_KEY = None
 RECAPTCHA_PRIVATE_KEY = None
 
-# django-statsd
-
-STATSD_CLIENT = 'django_statsd.clients.null'
-SENTRY_METRICS_PREFIX = ''
-SENTRY_METRICS_SAMPLE_RATE = 1.0
-
 # Debugger
 
 DEBUG_TOOLBAR_PANELS = (
@@ -724,6 +718,12 @@ SENTRY_TSDB_ROLLUPS = (
 SENTRY_FILESTORE = 'django.core.files.storage.FileSystemStorage'
 SENTRY_FILESTORE_OPTIONS = {'location': '/tmp/sentry-files'}
 
+# Internal metrics
+SENTRY_METRICS_BACKEND = 'sentry.metrics.dummy.DummyMetricsBackend'
+SENTRY_METRICS_OPTIONS = {}
+SENTRY_METRICS_SAMPLE_RATE = 1.0
+SENTRY_METRICS_PREFIX = ''
+
 # URL to embed in js documentation
 SENTRY_RAVEN_JS_URL = 'cdn.ravenjs.com/1.1.19/jquery,native/raven.min.js'
 
diff --git a/src/sentry/metrics/__init__.py b/src/sentry/metrics/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/sentry/metrics/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/sentry/metrics/base.py b/src/sentry/metrics/base.py
new file mode 100644
index 0000000000..c5105a61a4
--- /dev/null
+++ b/src/sentry/metrics/base.py
@@ -0,0 +1,28 @@
+from __future__ import absolute_import
+
+__all__ = ['MetricsBackend']
+
+from django.conf import settings
+from random import random
+from threading import local
+
+
+class MetricsBackend(local):
+    def __init__(self, prefix=None):
+        if prefix is None:
+            prefix = settings.SENTRY_METRICS_PREFIX
+        self.prefix = prefix
+
+    def _get_key(self, key):
+        if self.prefix:
+            return '{}{}'.format(self.prefix, key)
+        return key
+
+    def _should_sample(self, sample_rate):
+        return sample_rate >= 1 or random() >= 1 - sample_rate
+
+    def incr(self, key, amount=1, sample_rate=1):
+        raise NotImplementedError
+
+    def timing(self, key, value, sample_rate=1):
+        raise NotImplementedError
diff --git a/src/sentry/metrics/datadog.py b/src/sentry/metrics/datadog.py
new file mode 100644
index 0000000000..65405951c4
--- /dev/null
+++ b/src/sentry/metrics/datadog.py
@@ -0,0 +1,25 @@
+from __future__ import absolute_import
+
+__all__ = ['DatadogMetricsBackend']
+
+from datadog import initialize, ThreadStats
+
+from .base import MetricsBackend
+
+
+class DatadogMetricsBackend(MetricsBackend):
+    def __init__(self, prefix=None, **kwargs):
+        self._stats = ThreadStats()
+        self._stats.start()
+        # TODO(dcramer): it'd be nice if the initialize call wasn't a global
+        initialize(**kwargs)
+        super(DatadogMetricsBackend, self).__init__(prefix=prefix)
+
+    def __del__(self):
+        self._stats.stop()
+
+    def incr(self, key, amount=1, sample_rate=1):
+        self._stats.increment(self._get_key(key), amount, sample_rate=sample_rate)
+
+    def timing(self, key, value, sample_rate=1):
+        self._stats.timing(self._get_key(key), value, sample_rate=sample_rate)
diff --git a/src/sentry/metrics/dummy.py b/src/sentry/metrics/dummy.py
new file mode 100644
index 0000000000..5d1954637e
--- /dev/null
+++ b/src/sentry/metrics/dummy.py
@@ -0,0 +1,13 @@
+from __future__ import absolute_import
+
+__all__ = ['DummyMetricsBackend']
+
+from .base import MetricsBackend
+
+
+class DummyMetricsBackend(MetricsBackend):
+    def incr(self, key, amount=1, rate=1):
+        pass
+
+    def timing(self, key, value, rate=1):
+        pass
diff --git a/src/sentry/metrics/statsd.py b/src/sentry/metrics/statsd.py
new file mode 100644
index 0000000000..b3df64eddd
--- /dev/null
+++ b/src/sentry/metrics/statsd.py
@@ -0,0 +1,19 @@
+from __future__ import absolute_import
+
+__all__ = ['StatsdMetricsBackend']
+
+import statsd
+
+from .base import MetricsBackend
+
+
+class StatsdMetricsBackend(MetricsBackend):
+    def __init__(self, host='localhost', port=8125, **kwargs):
+        self.client = statsd.StatsClient(host=host, port=port)
+        super(StatsdMetricsBackend, self).__init__(**kwargs)
+
+    def incr(self, key, amount=1, sample_rate=1):
+        self.client.incr(self._get_key(key), amount, sample_rate)
+
+    def timing(self, key, value, sample_rate=1):
+        self.client.timing(self._get_key(key), value, sample_rate)
diff --git a/src/sentry/utils/metrics.py b/src/sentry/utils/metrics.py
index e47aa20fb2..13c67bdf44 100644
--- a/src/sentry/utils/metrics.py
+++ b/src/sentry/utils/metrics.py
@@ -2,9 +2,20 @@ from __future__ import absolute_import
 
 __all__ = ['timing', 'incr']
 
-from django_statsd.clients import statsd
+from contextlib import contextmanager
 from django.conf import settings
 from random import random
+from time import time
+
+
+def get_default_backend():
+    from sentry.utils.imports import import_string
+
+    cls = import_string(settings.SENTRY_METRICS_BACKEND)
+
+    return cls(**settings.SENTRY_METRICS_OPTIONS)
+
+backend = get_default_backend()
 
 
 def _get_key(key):
@@ -14,27 +25,43 @@ def _get_key(key):
     return key
 
 
-def incr(key, amount=1):
-    from sentry.app import tsdb
+def _should_sample():
+    sample_rate = settings.SENTRY_METRICS_SAMPLE_RATE
+
+    return sample_rate >= 1 or random() >= 1 - sample_rate
+
 
+def _sampled_value(value):
     sample_rate = settings.SENTRY_METRICS_SAMPLE_RATE
+    if sample_rate < 1:
+        value = int(value * (1.0 / sample_rate))
+    return value
 
-    statsd.incr(_get_key(key), amount,
-                rate=sample_rate)
 
-    if sample_rate >= 1 or random() >= 1 - sample_rate:
-        if sample_rate < 1:
-            amount = int(amount * (1.0 / sample_rate))
+def _incr_internal(key, amount):
+    from sentry.app import tsdb
+
+    sample_rate = settings.SENTRY_METRICS_SAMPLE_RATE
+    if _should_sample():
+        amount = _sampled_value(amount)
         tsdb.incr(tsdb.models.internal, key, count=amount)
 
 
+def incr(key, amount=1):
+    sample_rate = settings.SENTRY_METRICS_SAMPLE_RATE
+    _incr_internal(key, amount)
+    backend.incr(key, amount, sample_rate)
+
+
 def timing(key, value):
     # TODO(dcramer): implement timing for tsdb
-    return statsd.timing(_get_key(key), value,
-                         rate=settings.SENTRY_METRICS_SAMPLE_RATE)
+    # TODO(dcramer): implement sampling for timing
+    sample_rate = settings.SENTRY_METRICS_SAMPLE_RATE
+    backend.timing(key, value, sample_rate)
 
 
+@contextmanager
 def timer(key):
-    # TODO(dcramer): implement timing for tsdb
-    return statsd.timer(_get_key(key),
-                        rate=settings.SENTRY_METRICS_SAMPLE_RATE)
+    start = time()
+    yield
+    timing(key, time() - start)
diff --git a/tests/sentry/metrics/__init__.py b/tests/sentry/metrics/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/metrics/test_datadog.py b/tests/sentry/metrics/test_datadog.py
new file mode 100644
index 0000000000..712a12a8fb
--- /dev/null
+++ b/tests/sentry/metrics/test_datadog.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from mock import patch
+
+from sentry.metrics.datadog import DatadogMetricsBackend
+from sentry.testutils import TestCase
+
+
+class DatadogMetricsBackendTest(TestCase):
+    def setUp(self):
+        self.backend = DatadogMetricsBackend(prefix='sentrytest.')
+
+    @patch('datadog.threadstats.base.ThreadStats.increment')
+    def test_incr(self, mock_incr):
+        self.backend.incr('foo')
+        mock_incr.assert_called_once_with('sentrytest.foo', 1, sample_rate=1)
+
+    @patch('datadog.threadstats.base.ThreadStats.timing')
+    def test_timing(self, mock_timing):
+        self.backend.timing('foo', 30)
+        mock_timing.assert_called_once_with('sentrytest.foo', 30, sample_rate=1)
diff --git a/tests/sentry/metrics/test_statsd.py b/tests/sentry/metrics/test_statsd.py
new file mode 100644
index 0000000000..71d5e86051
--- /dev/null
+++ b/tests/sentry/metrics/test_statsd.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from mock import patch
+
+from sentry.metrics.statsd import StatsdMetricsBackend
+from sentry.testutils import TestCase
+
+
+class StatsdMetricsBackendTest(TestCase):
+    def setUp(self):
+        self.backend = StatsdMetricsBackend(prefix='sentrytest.')
+
+    @patch('statsd.StatsClient.incr')
+    def test_incr(self, mock_incr):
+        self.backend.incr('foo')
+        mock_incr.assert_called_once_with('sentrytest.foo', 1, 1)
+
+    @patch('statsd.StatsClient.timing')
+    def test_timing(self, mock_timing):
+        self.backend.timing('foo', 30)
+        mock_timing.assert_called_once_with('sentrytest.foo', 30, 1)
