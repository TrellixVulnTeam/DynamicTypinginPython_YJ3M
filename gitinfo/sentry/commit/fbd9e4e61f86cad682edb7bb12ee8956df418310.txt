commit fbd9e4e61f86cad682edb7bb12ee8956df418310
Author: Manu <manu@sentry.io>
Date:   Thu Nov 7 11:57:16 2019 -0800

    feat(outcomes): Remove writes to redis (#15466)
    
    Alright, alright, alright. Remove writes to Redis for outcomes.
    
    In this PR, we are basically moving items from `model_being_upgraded_query_settings` and `model_being_upgraded_query_settings2` into `model_query_settings` so that it stops writes to redis.
    
    ## Test plan
    - Tested manually by hitting the stats pages and the main issues page
    - Unit tests
    
    ## Next steps
    - Clean up tsdb.py
    - [Remove `incr_multi` for outcomes](https://github.com/getsentry/sentry/blob/master/src/sentry/utils/outcomes.py#L135). Why not do this in this PR? Admittedly, I'm being a little cautious here cause I don't know that area of the codebase well. So, going to do that separately.
    - Clean up some lingering code from the upgrade in [tsdb/snuba](https://github.com/getsentry/sentry/blob/e98f2cb61dbe28abf75ca3caf045c65ab977b508/src/sentry/tsdb/snuba.py#L111-L115)
    - Remove hack from [`project_key_stats.py`](https://github.com/getsentry/sentry/blob/master/src/sentry/api/endpoints/project_key_stats.py#L36-L38)

diff --git a/src/sentry/tsdb/redissnuba.py b/src/sentry/tsdb/redissnuba.py
index df91e7b1c5..4f2c92804b 100644
--- a/src/sentry/tsdb/redissnuba.py
+++ b/src/sentry/tsdb/redissnuba.py
@@ -59,7 +59,7 @@ assert (
 
 model_backends = {
     # model: (read, write)
-    model: ("redis", "redis") if model not in SnubaTSDB.model_columns else ("snuba", "dummy")
+    model: ("redis", "redis") if model not in SnubaTSDB.model_query_settings else ("snuba", "dummy")
     for model in BaseTSDB.models
 }
 
diff --git a/src/sentry/tsdb/snuba.py b/src/sentry/tsdb/snuba.py
index 90c2090661..9860f8d293 100644
--- a/src/sentry/tsdb/snuba.py
+++ b/src/sentry/tsdb/snuba.py
@@ -30,10 +30,7 @@ class SnubaTSDB(BaseTSDB):
     will return empty results for unsupported models.
     """
 
-    # The ``model_query_settings`` and ``model_being_upgraded_query_settings`` are translations of
-    # TSDB models into required settings for querying snuba. Queries for ``model_columns``
-    # directly hit snuba, while queries for ``model_columns_being_upgraded`` hit
-    # redis in the main thread and snuba in a background thread.
+    # ``model_query_settings`` is a translation of TSDB models into required settings for querying snuba
     model_query_settings = {
         TSDBModel.project: SnubaModelQuerySettings(snuba.Dataset.Events, "project_id", None, None),
         TSDBModel.group: SnubaModelQuerySettings(snuba.Dataset.Events, "issue", None, None),
@@ -55,17 +52,6 @@ class SnubaTSDB(BaseTSDB):
         TSDBModel.frequent_issues_by_project: SnubaModelQuerySettings(
             snuba.Dataset.Events, "project_id", "issue", None
         ),
-    }
-
-    # In getsentry/getsentry:tsdb.py, we check ``model_columns`` to see if a request
-    # should go to snuba. So, for now, for backwards compatibility, alias
-    # ``model_columns`` to ``model_query_settings``.
-    # TODO(manu): use model_query_settings instead of model_columns in getsentry
-    model_columns = model_query_settings
-
-    # ``model_columns_being_upgraded`` are models that currently use Redis but are being
-    # transitioned to use Snuba.
-    model_being_upgraded_query_settings = {
         TSDBModel.organization_total_received: SnubaModelQuerySettings(
             snuba.Dataset.Outcomes,
             "org_id",
@@ -102,9 +88,6 @@ class SnubaTSDB(BaseTSDB):
             "times_seen",
             [["outcome", "=", outcomes.Outcome.FILTERED]],
         ),
-    }
-
-    model_being_upgraded_query_settings2 = {
         TSDBModel.key_total_received: SnubaModelQuerySettings(
             snuba.Dataset.Outcomes,
             "key_id",
@@ -125,6 +108,12 @@ class SnubaTSDB(BaseTSDB):
         ),
     }
 
+    # ``model_columns_being_upgraded`` are models that currently use Redis but are being
+    # transitioned to use Snuba.
+    model_being_upgraded_query_settings = {}
+
+    model_being_upgraded_query_settings2 = {}
+
     # The Outcomes dataset aggregates outcomes into chunks of an hour. So, for rollups less than an hour, we want to
     # query the raw outcomes dataset, with a few different settings (defined in lower_rollup_query_settings).
     lower_rollup_query_settings = {
@@ -172,12 +161,6 @@ class SnubaTSDB(BaseTSDB):
         ),
     }
 
-    all_model_query_settings = dict(
-        model_columns.items()
-        + model_being_upgraded_query_settings.items()
-        + model_being_upgraded_query_settings2.items()
-    )
-
     def __init__(self, **options):
         super(SnubaTSDB, self).__init__(**options)
 
@@ -200,14 +183,18 @@ class SnubaTSDB(BaseTSDB):
         `group_on_model`: whether to add a GROUP BY clause on the primary model.
         """
         # XXX: to counteract the hack in project_key_stats.py
-        if model in self.model_being_upgraded_query_settings2.keys():
+        if model in [
+            TSDBModel.key_total_received,
+            TSDBModel.key_total_blacklisted,
+            TSDBModel.key_total_rejected,
+        ]:
             keys = list(set(map(lambda x: int(x), keys)))
 
         # 10s is the only rollup under an hour that we support
         if rollup and rollup == 10 and model in self.lower_rollup_query_settings.keys():
             model_query_settings = self.lower_rollup_query_settings.get(model)
         else:
-            model_query_settings = self.all_model_query_settings.get(model)
+            model_query_settings = self.model_query_settings.get(model)
 
         if model_query_settings is None:
             raise Exception(u"Unsupported TSDBModel: {}".format(model.name))
@@ -311,7 +298,7 @@ class SnubaTSDB(BaseTSDB):
         if rollup and rollup == 10 and model in self.lower_rollup_query_settings.keys():
             model_query_settings = self.lower_rollup_query_settings.get(model)
         else:
-            model_query_settings = self.all_model_query_settings.get(model)
+            model_query_settings = self.model_query_settings.get(model)
 
         assert model_query_settings is not None, u"Unsupported TSDBModel: {}".format(model.name)
 
