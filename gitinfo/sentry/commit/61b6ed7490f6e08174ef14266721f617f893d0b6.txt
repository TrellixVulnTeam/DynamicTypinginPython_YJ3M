commit 61b6ed7490f6e08174ef14266721f617f893d0b6
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Feb 27 10:29:47 2019 -0800

    feat(monitors): Improve handling of duplicate reports
    
    When a monitor isnt updated based on a check-in result, we'll now return a 208 response code indicating as much.
    
    Also corrects handling of cases where last_checkin has never been bound.

diff --git a/src/sentry/api/endpoints/monitor_checkin_details.py b/src/sentry/api/endpoints/monitor_checkin_details.py
index 378931cce6..254cc84ad5 100644
--- a/src/sentry/api/endpoints/monitor_checkin_details.py
+++ b/src/sentry/api/endpoints/monitor_checkin_details.py
@@ -125,7 +125,8 @@ class MonitorCheckInDetailsEndpoint(Endpoint):
         with transaction.atomic():
             checkin.update(**params)
             if checkin.status == CheckInStatus.ERROR:
-                monitor.mark_failed(current_datetime)
+                if not monitor.mark_failed(current_datetime):
+                    return self.respond(serialize(checkin, request.user), status=208)
             else:
                 monitor_params = {
                     'last_checkin': current_datetime,
diff --git a/src/sentry/api/endpoints/monitor_checkins.py b/src/sentry/api/endpoints/monitor_checkins.py
index 8fb57b4f9f..a2c62e66cb 100644
--- a/src/sentry/api/endpoints/monitor_checkins.py
+++ b/src/sentry/api/endpoints/monitor_checkins.py
@@ -76,7 +76,8 @@ class MonitorCheckInsEndpoint(MonitorEndpoint):
                 status=getattr(CheckInStatus, result['status'].upper()),
             )
             if checkin.status == CheckInStatus.ERROR:
-                monitor.mark_failed(last_checkin=checkin.date_added)
+                if not monitor.mark_failed(last_checkin=checkin.date_added):
+                    return self.respond(serialize(checkin, request.user), status=200)
             else:
                 monitor_params = {
                     'last_checkin': checkin.date_added,
@@ -90,4 +91,4 @@ class MonitorCheckInsEndpoint(MonitorEndpoint):
                     last_checkin__gt=checkin.date_added,
                 ).update(**monitor_params)
 
-        return self.respond(serialize(checkin, request.user))
+        return self.respond(serialize(checkin, request.user), status=201)
diff --git a/src/sentry/models/monitor.py b/src/sentry/models/monitor.py
index bf9e2e66ff..b0af9cb5c6 100644
--- a/src/sentry/models/monitor.py
+++ b/src/sentry/models/monitor.py
@@ -7,6 +7,7 @@ from croniter import croniter
 from datetime import datetime, timedelta
 from dateutil import rrule
 from django.db import models
+from django.db.models import Q
 from django.utils import timezone
 from uuid import uuid4
 
@@ -154,13 +155,13 @@ class Monitor(Model):
 
         if last_checkin is None:
             next_checkin_base = timezone.now()
-            last_checkin = self.last_checkin
+            last_checkin = self.last_checkin or timezone.now()
         else:
             next_checkin_base = last_checkin
 
         affected = type(self).objects.filter(
+            Q(last_checkin__lte=last_checkin) | Q(last_checkin__isnull=True),
             id=self.id,
-            last_checkin=self.last_checkin,
         ).update(
             next_checkin=self.get_next_scheduled_checkin(next_checkin_base),
             status=MonitorStatus.ERROR,
diff --git a/tests/sentry/api/endpoints/test_monitor_checkins.py b/tests/sentry/api/endpoints/test_monitor_checkins.py
index c88a2afeda..0127be93c1 100644
--- a/tests/sentry/api/endpoints/test_monitor_checkins.py
+++ b/tests/sentry/api/endpoints/test_monitor_checkins.py
@@ -28,15 +28,15 @@ class CreateMonitorCheckInTest(APITestCase):
                 'status': 'ok'
             })
 
-        assert resp.status_code == 200, resp.content
+        assert resp.status_code == 201, resp.content
 
         checkin = MonitorCheckIn.objects.get(guid=resp.data['id'])
         assert checkin.status == CheckInStatus.OK
 
         monitor = Monitor.objects.get(id=monitor.id)
-        assert monitor.next_checkin == monitor.get_next_scheduled_checkin(checkin.date_added)
         assert monitor.status == MonitorStatus.OK
         assert monitor.last_checkin == checkin.date_added
+        assert monitor.next_checkin == monitor.get_next_scheduled_checkin(checkin.date_added)
 
     def test_failing(self):
         user = self.create_user()
@@ -58,12 +58,12 @@ class CreateMonitorCheckInTest(APITestCase):
                 'status': 'error'
             })
 
-        assert resp.status_code == 200, resp.content
+        assert resp.status_code == 201, resp.content
 
         checkin = MonitorCheckIn.objects.get(guid=resp.data['id'])
         assert checkin.status == CheckInStatus.ERROR
 
         monitor = Monitor.objects.get(id=monitor.id)
-        assert monitor.next_checkin == monitor.get_next_scheduled_checkin(checkin.date_added)
         assert monitor.status == MonitorStatus.ERROR
         assert monitor.last_checkin == checkin.date_added
+        assert monitor.next_checkin == monitor.get_next_scheduled_checkin(checkin.date_added)
