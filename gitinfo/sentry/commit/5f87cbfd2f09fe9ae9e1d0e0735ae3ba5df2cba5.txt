commit 5f87cbfd2f09fe9ae9e1d0e0735ae3ba5df2cba5
Author: Ted Kaemming <ted@kaemming.com>
Date:   Tue Sep 29 11:32:20 2015 -0700

    Serialize Event instance into NotificationEvent, rather than just the data field.

diff --git a/digest.py b/digest.py
index 5050647b37..9d7a650c5a 100644
--- a/digest.py
+++ b/digest.py
@@ -7,6 +7,7 @@ configure()
 import itertools
 import sys
 
+from sentry.app import digests
 from sentry.digests.notifications import (
     build_digest,
     event_to_record,
@@ -16,10 +17,15 @@ from sentry.models import (
     Project,
 )
 
+
+def reserialize(value):
+    return digests.codec.decode(digests.codec.encode(value))
+
+
 project = Project.objects.get(id=int(sys.argv[1]))
 events = project.event_set.all()[:int(sys.argv[2])]
 Event.objects.bind_nodes(events, 'data')
-records = itertools.imap(event_to_record, events)
+records = itertools.imap(reserialize, itertools.imap(event_to_record, events))
 
 print '{project.organization} / {project}'.format(project=project)
 print ''
diff --git a/src/sentry/digests/notifications.py b/src/sentry/digests/notifications.py
index 776d406077..99314e0e67 100644
--- a/src/sentry/digests/notifications.py
+++ b/src/sentry/digests/notifications.py
@@ -20,7 +20,7 @@ from . import Record
 logger = logging.getLogger('sentry.digests')
 
 
-NotificationEvent = namedtuple('NotificationEvent', 'group_id event_id event_data rules')
+NotificationEvent = namedtuple('NotificationEvent', 'event rules')
 
 
 def split_key(key):
@@ -33,17 +33,25 @@ def unsplit_key(plugin, project):
     return '{plugin.slug}:p:{project.id}'.format(plugin=plugin, project=project)
 
 
+def strip_for_serialization(instance):
+    cls = type(instance)
+    return cls(**{field.attname: getattr(instance, field.attname) for field in cls._meta.fields})
+
+
 # XXX: Rules
 def event_to_record(event, rules=[]):
     return Record(
         event.event_id,
-        NotificationEvent(event.group_id, event.id, event.data.data, rules),
+        NotificationEvent(
+            strip_for_serialization(event),
+            map(strip_for_serialization, rules),
+        ),
         to_timestamp(event.datetime),
     )
 
 
 def group(records):
-    key = lambda record: record.value.group_id
+    key = lambda record: record.value.event.group_id
     raw = {}
     for group, records in itertools.groupby(sorted(records, key=key), key=key):
         yield group, list(records)
@@ -74,20 +82,17 @@ class NotificationDigest(object):
     @property
     def event(self):
         # TODO: Probably warn about this.
-        # XXX: Need to put a ``Event`` model back together, ugh...
-        raise NotImplementedError
+        return self.groups.values()[0][0].value.event
 
     @property
     def rule(self):
         # TODO: Probably warn about this.
-        records = self.groups.values()[0]
-        return records[0].rules[0]
+        return self.groups.values()[0][0].value.rules[0]
 
     @property
     def rules(self):
         # TODO: Probably warn about this.
-        records = self.groups.values()[0]
-        return records[0].rules
+        return self.groups.values()[0][0].value.rules
 
 
 def build_digest(project, records):
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index dad7574512..7f32c5cc14 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -62,13 +62,13 @@ class NotificationPlugin(Plugin):
                 continue
             raise NotImplementedError('The default behavior for notification de-duplication does not support args')
 
-        notification = Notification(event=event, rules=rules)
         if features.has('projects:digests', event.group.project):
             digests.add(
                 unsplit_key(self, event.group.project),
                 event_to_record(event, rules),
             )
         else:
+            notification = Notification(event=event, rules=rules)
             self.notify(notification)
 
     def notify_users(self, group, event, fail_silently=False):
