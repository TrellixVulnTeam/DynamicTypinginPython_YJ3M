commit 9fd86670d0f872eef4ed1211c05ff391c69ba0da
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 19 23:13:54 2012 -0800

    Improve stacktrace handling of newest first

diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index e553b961f8..ccc3399ae4 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -189,6 +189,8 @@ class Stacktrace(Interface):
     hash must contain **at least** the ``filename`` attribute. The rest of the values
     are optional, but recommended.
 
+    The list of frames should be ordered by the oldest call first.
+
     Each frame must contain the following attributes:
 
     ``filename``
@@ -294,7 +296,7 @@ class Stacktrace(Interface):
                 output.append(frame['lineno'])
         return output
 
-    def is_newest_frame_first(self, event):            
+    def is_newest_frame_first(self, event):
         newest_first = event.platform not in ('python', None)
 
         if env.request and env.request.user.is_authenticated():
@@ -353,7 +355,7 @@ class Stacktrace(Interface):
             system_frames = 0
 
         newest_first = self.is_newest_frame_first(event)
-        if not newest_first:
+        if newest_first:
             frames = frames[::-1]
 
         return render_to_string('sentry/partial/interfaces/stacktrace.html', {
@@ -361,20 +363,21 @@ class Stacktrace(Interface):
             'system_frames': system_frames,
             'event': event,
             'frames': frames,
-            'stacktrace': self.get_traceback(event),
+            'stacktrace': self.get_traceback(event, newest_first=newest_first),
         })
 
     def to_string(self, event):
         return self.get_stacktrace(event, system_frames=False)
 
-    def get_stacktrace(self, event, system_frames=True):
-        newest_first = self.is_newest_frame_first(event)
+    def get_stacktrace(self, event, system_frames=True, newest_first=None):
+        if newest_first is None:
+            newest_first = self.is_newest_frame_first(event)
 
         result = []
         if newest_first:
-            result.append(_('Stacktrace (most recent call first)'))
+            result.append(_('Stacktrace (most recent call first):'))
         else:
-            result.append(_('Stacktrace (most recent call last)'))
+            result.append(_('Stacktrace (most recent call last):'))
 
         result.append('')
 
@@ -384,7 +387,7 @@ class Stacktrace(Interface):
             if not frames:
                 frames = self.frames
 
-        if not newest_first:
+        if newest_first:
             frames = frames[::-1]
 
         for frame in frames:
@@ -400,10 +403,10 @@ class Stacktrace(Interface):
 
         return '\n'.join(result)
 
-    def get_traceback(self, event):
+    def get_traceback(self, event, newest_first=None):
         result = [
             event.message, '',
-            self.get_stacktrace(event),
+            self.get_stacktrace(event, newest_first=newest_first),
         ]
 
         return '\n'.join(result)
diff --git a/tests/sentry/interfaces/stacktrace/tests.py b/tests/sentry/interfaces/stacktrace/tests.py
index 66b61664e0..b277df77df 100644
--- a/tests/sentry/interfaces/stacktrace/tests.py
+++ b/tests/sentry/interfaces/stacktrace/tests.py
@@ -82,62 +82,69 @@ class StacktraceTest(TestCase):
 
     @mock.patch('sentry.interfaces.Stacktrace.get_stacktrace')
     def test_to_string_returns_stacktrace(self, get_stacktrace):
-        event = mock.Mock(spec=Event)
+        event = mock.Mock(spec=Event())
         interface = Stacktrace(frames=[])
         result = interface.to_string(event)
         get_stacktrace.assert_called_once_with(event, system_frames=False)
         self.assertEquals(result, get_stacktrace.return_value)
 
     @mock.patch('sentry.interfaces.Stacktrace.get_stacktrace')
+    @mock.patch('sentry.interfaces.Stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
     def test_get_traceback_response(self, get_stacktrace):
-        event = mock.Mock(spec=Event)
+        event = mock.Mock(spec=Event())
         event.message = 'foo'
         get_stacktrace.return_value = 'bar'
         interface = Stacktrace(frames=[])
         result = interface.get_traceback(event)
-        get_stacktrace.assert_called_once_with(event)
+        get_stacktrace.assert_called_once_with(event, newest_first=None)
         self.assertEquals(result, 'foo\n\nbar')
 
     @mock.patch('sentry.interfaces.Stacktrace.get_traceback')
     @mock.patch('sentry.interfaces.render_to_string')
+    @mock.patch('sentry.interfaces.Stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
     def test_to_html_render_call(self, render_to_string, get_traceback):
-        event = mock.Mock(spec=Event)
+        event = mock.Mock(spec=Event())
         get_traceback.return_value = 'bar'
         interface = Stacktrace(frames=[])
         result = interface.to_html(event)
-        get_traceback.assert_called_once_with(event)
+        get_traceback.assert_called_once_with(event, newest_first=False)
         render_to_string.assert_called_once_with('sentry/partial/interfaces/stacktrace.html', {
             'event': event,
             'frames': [],
             'stacktrace': 'bar',
             'system_frames': 0,
+            'newest_first': False,
         })
         self.assertEquals(result, render_to_string.return_value)
 
     @mock.patch('sentry.interfaces.Stacktrace.get_traceback')
+    @mock.patch('sentry.interfaces.Stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
     def test_to_html_response(self, get_traceback):
-        event = mock.Mock(spec=Event)
+        event = mock.Mock(spec=Event())
         event.message = 'foo'
         get_traceback.return_value = 'bar'
         interface = Stacktrace(frames=[])
         result = interface.to_html(event)
-        get_traceback.assert_called_once_with(event)
+        get_traceback.assert_called_once_with(event, newest_first=False)
         self.assertTrue('<div id="traceback" class="module">' in result)
 
+    @mock.patch('sentry.interfaces.Stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
     def test_get_stacktrace_with_only_filename(self):
-        event = mock.Mock(spec=Event)
+        event = mock.Mock(spec=Event())
         interface = Stacktrace(frames=[{'filename': 'foo'}, {'filename': 'bar'}])
         result = interface.get_stacktrace(event)
         self.assertEquals(result, 'Stacktrace (most recent call last):\n\n  File "foo"\n  File "bar"')
 
+    @mock.patch('sentry.interfaces.Stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
     def test_get_stacktrace_with_filename_and_function(self):
-        event = mock.Mock(spec=Event)
+        event = mock.Mock(spec=Event())
         interface = Stacktrace(frames=[{'filename': 'foo', 'function': 'biz'}, {'filename': 'bar', 'function': 'baz'}])
         result = interface.get_stacktrace(event)
         self.assertEquals(result, 'Stacktrace (most recent call last):\n\n  File "foo", in biz\n  File "bar", in baz')
 
+    @mock.patch('sentry.interfaces.Stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
     def test_get_stacktrace_with_filename_function_lineno_and_context(self):
-        event = mock.Mock(spec=Event)
+        event = mock.Mock(spec=Event())
         interface = Stacktrace(frames=[{'filename': 'foo', 'function': 'biz', 'lineno': 3, 'context_line': '  def foo(r):'},
             {'filename': 'bar', 'function': 'baz', 'lineno': 5, 'context_line': '    return None'}])
         result = interface.get_stacktrace(event)
