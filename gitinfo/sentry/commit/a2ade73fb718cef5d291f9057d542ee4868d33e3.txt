commit a2ade73fb718cef5d291f9057d542ee4868d33e3
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Feb 3 10:39:28 2017 -0800

    audit: implement logging for group deletions

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 471410b1d7..5b2277b2dd 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -99,13 +99,18 @@ class Endpoint(APIView):
         user = request.user if request.user.is_authenticated() else None
         api_key = request.auth if isinstance(request.auth, ApiKey) else None
 
-        entry = AuditLogEntry.objects.create(
+        entry = AuditLogEntry(
             actor=user,
             actor_key=api_key,
             ip_address=request.META['REMOTE_ADDR'],
             **kwargs
         )
 
+        # Only create a real AuditLogEntry record if we are passing an event type
+        # otherwise, we want to still log to our actual logging
+        if entry.event is not None:
+            entry.save()
+
         extra = {
             'ip_address': entry.ip_address,
             'organization_id': entry.organization_id,
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 665ad81099..901b341254 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -1,6 +1,9 @@
 from __future__ import absolute_import
 
 from datetime import timedelta
+import logging
+from uuid import uuid4
+
 from django.utils import timezone
 from rest_framework import serializers
 from rest_framework.response import Response
@@ -19,6 +22,8 @@ from sentry.plugins import IssueTrackingPlugin2, plugins
 from sentry.utils.safe import safe_execute
 from sentry.utils.apidocs import scenario, attach_scenarios
 
+delete_logger = logging.getLogger('sentry.deletions.api')
+
 
 @scenario('RetrieveAggregate')
 def retrieve_aggregate_scenario(runner):
@@ -323,9 +328,29 @@ class GroupDetailsEndpoint(GroupEndpoint):
         ).update(status=GroupStatus.PENDING_DELETION)
         if updated:
             GroupHash.objects.filter(group=group).delete()
+
+            transaction_id = uuid4().hex
+            project = group.project
+
             delete_group.apply_async(
-                kwargs={'object_id': group.id},
+                kwargs={
+                    'object_id': group.id,
+                    'transaction_id': transaction_id,
+                },
                 countdown=3600,
             )
 
+            self.create_audit_entry(
+                request=request,
+                organization_id=project.organization_id if project else None,
+                target_object=group.id,
+                transaction_id=transaction_id,
+            )
+
+            delete_logger.info('object.delete.queued', extra={
+                'object_id': group.id,
+                'transaction_id': transaction_id,
+                'model': type(group).__name__,
+            })
+
         return Response(status=202)
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 3581b0167a..87d9d2a490 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import, division, print_function
 
 from datetime import timedelta
+import logging
 from uuid import uuid4
 
 import six
@@ -31,6 +32,9 @@ from sentry.tasks.merge import merge_group
 from sentry.utils.apidocs import attach_scenarios, scenario
 from sentry.utils.cursors import Cursor
 
+delete_logger = logging.getLogger('sentry.deletions.api')
+
+
 ERR_INVALID_STATS_PERIOD = "Invalid stats_period. Valid choices are '', '24h', and '14d'"
 
 
@@ -730,10 +734,29 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
             ]
         ).update(status=GroupStatus.PENDING_DELETION)
         GroupHash.objects.filter(group__id__in=group_ids).delete()
+
+        transaction_id = uuid4().hex
+
         for group in group_list:
             delete_group.apply_async(
-                kwargs={'object_id': group.id},
+                kwargs={
+                    'object_id': group.id,
+                    'transaction_id': transaction_id,
+                },
                 countdown=3600,
             )
 
+            self.create_audit_entry(
+                request=request,
+                organization_id=project.organization_id,
+                target_object=group.id,
+                transaction_id=transaction_id,
+            )
+
+            delete_logger.info('object.delete.queued', extra={
+                'object_id': group.id,
+                'transaction_id': transaction_id,
+                'model': type(group).__name__,
+            })
+
         return Response(status=204)
diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index 16ab95d7a2..1de3e54007 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -260,7 +260,7 @@ def delete_group(object_id, transaction_id=None, continuous=True, **kwargs):
         return
     g_id = group.id
     group.delete()
-    logger.info('object.delete.queued', extra={
+    logger.info('object.delete.executed', extra={
         'object_id': g_id,
         'transaction_id': transaction_id,
         'model': Group.__name__,
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 9bf7c074d1..97328dad5d 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -249,12 +249,18 @@ class BaseView(View, OrganizationMixin):
         )
 
     def create_audit_entry(self, request, transaction_id=None, **kwargs):
-        entry = AuditLogEntry.objects.create(
+        entry = AuditLogEntry(
             actor=request.user if request.user.is_authenticated() else None,
             # TODO(jtcunning): assert that REMOTE_ADDR is a real IP.
             ip_address=request.META['REMOTE_ADDR'],
             **kwargs
         )
+
+        # Only create a real AuditLogEntry record if we are passing an event type
+        # otherwise, we want to still log to our actual logging
+        if entry.event is not None:
+            entry.save()
+
         extra = {
             'ip_address': entry.ip_address,
             'organization_id': entry.organization_id,
