commit 8804bf534731772f9c9eb05f5b58fa858a3b05d7
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Wed Oct 9 16:14:59 2019 -0700

    Remove unapproved invites (#15016)

diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index c16d1e16e5..3162ed2269 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -20,6 +20,7 @@ from sentry.models import (
     AuditLogEntryEvent,
     AuthIdentity,
     AuthProvider,
+    InviteStatus,
     OrganizationMember,
     OrganizationMemberTeam,
     Team,
@@ -32,7 +33,6 @@ ERR_INSUFFICIENT_SCOPE = "You are missing the member:admin scope."
 ERR_ONLY_OWNER = "You cannot remove the only remaining owner of the organization."
 ERR_UNINVITABLE = "You cannot send an invitation to a user who is already a full member."
 ERR_EXPIRED = "You cannot resend an expired invitation without regenerating the token."
-ERR_UNAPPROVED = "You cannot send an invitiation that requires prior approval."
 
 
 def get_allowed_roles(request, organization, member=None):
@@ -87,6 +87,7 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
                     Q(user__is_active=True) | Q(user__isnull=True),
                     organization=organization,
                     id=member_id,
+                    invite_status=InviteStatus.APPROVED.value,
                 )
             except ValueError:
                 raise OrganizationMember.DoesNotExist()
@@ -158,8 +159,6 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
         # XXX(dcramer): if/when this expands beyond reinvite we need to check
         # access level
         if result.get("reinvite"):
-            if not om.invite_approved:
-                return Response({"detail": ERR_UNAPPROVED}, status=400)
             if om.is_pending:
                 if result.get("regenerate"):
                     if request.access.has_scope("member:admin"):
diff --git a/src/sentry/api/endpoints/organization_member_index.py b/src/sentry/api/endpoints/organization_member_index.py
index fba9993f0f..beda7e9312 100644
--- a/src/sentry/api/endpoints/organization_member_index.py
+++ b/src/sentry/api/endpoints/organization_member_index.py
@@ -16,6 +16,7 @@ from sentry.api.serializers.rest_framework import ListField
 from sentry.api.validators import AllowedEmailField
 from sentry.models import (
     AuditLogEntryEvent,
+    InviteStatus,
     OrganizationMember,
     OrganizationMemberTeam,
     Team,
@@ -60,7 +61,9 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
     def get(self, request, organization):
         queryset = (
             OrganizationMember.objects.filter(
-                Q(user__is_active=True) | Q(user__isnull=True), organization=organization
+                Q(user__is_active=True) | Q(user__isnull=True),
+                organization=organization,
+                invite_status=InviteStatus.APPROVED.value,
             )
             .select_related("user")
             .order_by("email", "user__email")
diff --git a/tests/sentry/api/endpoints/test_organization_member_details.py b/tests/sentry/api/endpoints/test_organization_member_details.py
index 9809048bd0..8d2a981e4f 100644
--- a/tests/sentry/api/endpoints/test_organization_member_details.py
+++ b/tests/sentry/api/endpoints/test_organization_member_details.py
@@ -7,7 +7,6 @@ from django.core.urlresolvers import reverse
 from django.db.models import F
 from mock import patch
 
-from sentry.api.endpoints.organization_member_details import ERR_UNAPPROVED
 from sentry.models import (
     Authenticator,
     AuthProvider,
@@ -158,7 +157,7 @@ class UpdateOrganizationMemberTest(APITestCase):
 
     @patch("sentry.models.OrganizationMember.send_invite_email")
     def test_cannot_reinvite_unapproved_invite(self, mock_send_invite_email):
-        self.login_as(user=self.user)
+        self.login_as(self.user)
 
         organization = self.create_organization(name="foo", owner=self.user)
         member = self.create_member(
@@ -171,12 +170,9 @@ class UpdateOrganizationMemberTest(APITestCase):
         path = reverse(
             "sentry-api-0-organization-member-details", args=[organization.slug, member.id]
         )
-        self.login_as(self.user)
-        resp = self.client.put(path, data={"reinvite": 1})
 
-        assert resp.status_code == 400
-        assert ERR_UNAPPROVED in resp.content
-        assert mock_send_invite_email.called is False
+        resp = self.client.put(path, data={"reinvite": 1})
+        assert resp.status_code == 404
 
     @patch("sentry.models.OrganizationMember.send_invite_email")
     def test_cannot_regenerate_unapproved_invite(self, mock_send_invite_email):
@@ -193,12 +189,9 @@ class UpdateOrganizationMemberTest(APITestCase):
         path = reverse(
             "sentry-api-0-organization-member-details", args=[organization.slug, member.id]
         )
-        self.login_as(self.user)
-        resp = self.client.put(path, data={"reinvite": 1, "regenerate": 1})
 
-        assert resp.status_code == 400
-        assert ERR_UNAPPROVED in resp.content
-        assert mock_send_invite_email.called is False
+        resp = self.client.put(path, data={"reinvite": 1, "regenerate": 1})
+        assert resp.status_code == 404
 
     def test_reinvite_sso_link(self):
         self.login_as(user=self.user)
@@ -262,30 +255,6 @@ class UpdateOrganizationMemberTest(APITestCase):
         assert resp.status_code == 200
         assert "invite_link" not in resp.data
 
-    def test_cannot_get_unapproved_invite_link(self):
-        self.login_as(user=self.user)
-
-        organization = self.create_organization(name="foo", owner=self.user)
-
-        pending_om = self.create_member(
-            user=None,
-            email="bar@example.com",
-            organization=organization,
-            role="member",
-            teams=[],
-            invite_status=InviteStatus.REQUESTED_TO_JOIN.value,
-        )
-        path = reverse(
-            "sentry-api-0-organization-member-details", args=[organization.slug, pending_om.id]
-        )
-
-        self.login_as(self.user)
-
-        resp = self.client.get(path)
-
-        assert resp.status_code == 200
-        assert resp.data["invite_link"] is None
-
     def test_get_member_list_teams(self):
         self.login_as(user=self.user)
 
@@ -748,6 +717,34 @@ class DeleteOrganizationMemberTest(APITestCase):
 
         assert OrganizationMember.objects.filter(id=member_om.id).exists()
 
+    def test_cannot_delete_unapproved_invite(self):
+        organization = self.create_organization(name="test", owner=self.user)
+        self.login_as(self.user)
+
+        join_request = self.create_member(
+            organization=organization,
+            email="test@gmail.com",
+            invite_status=InviteStatus.REQUESTED_TO_JOIN.value,
+        )
+
+        invite_request = self.create_member(
+            organization=organization,
+            email="test2@gmail.com",
+            invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value,
+        )
+
+        path = reverse(
+            "sentry-api-0-organization-member-details", args=[organization.slug, join_request.id]
+        )
+        resp = self.client.delete(path)
+        assert resp.status_code == 404
+
+        path = reverse(
+            "sentry-api-0-organization-member-details", args=[organization.slug, invite_request.id]
+        )
+        resp = self.client.delete(path)
+        assert resp.status_code == 404
+
 
 class GetOrganizationMemberTest(APITestCase):
     def test_me(self):
@@ -789,3 +786,31 @@ class GetOrganizationMemberTest(APITestCase):
         self.login_as(user)
         resp = self.client.get(path)
         assert resp.status_code == 404
+
+    def test_cannot_get_unapproved_invite(self):
+        organization = self.create_organization(name="test", owner=self.user)
+        self.login_as(self.user)
+
+        join_request = self.create_member(
+            organization=organization,
+            email="test@gmail.com",
+            invite_status=InviteStatus.REQUESTED_TO_JOIN.value,
+        )
+
+        invite_request = self.create_member(
+            organization=organization,
+            email="test2@gmail.com",
+            invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value,
+        )
+
+        path = reverse(
+            "sentry-api-0-organization-member-details", args=[organization.slug, join_request.id]
+        )
+        resp = self.client.get(path)
+        assert resp.status_code == 404
+
+        path = reverse(
+            "sentry-api-0-organization-member-details", args=[organization.slug, invite_request.id]
+        )
+        resp = self.client.get(path)
+        assert resp.status_code == 404
diff --git a/tests/sentry/api/endpoints/test_organization_member_index.py b/tests/sentry/api/endpoints/test_organization_member_index.py
index da91142822..060fcedd7b 100644
--- a/tests/sentry/api/endpoints/test_organization_member_index.py
+++ b/tests/sentry/api/endpoints/test_organization_member_index.py
@@ -6,7 +6,7 @@ from django.core.urlresolvers import reverse
 from django.core import mail
 
 from sentry.testutils import APITestCase
-from sentry.models import OrganizationMember, OrganizationMemberTeam
+from sentry.models import InviteStatus, OrganizationMember, OrganizationMemberTeam
 from sentry.testutils.helpers import Feature
 
 
@@ -99,6 +99,36 @@ class OrganizationMemberListTest(APITestCase):
         assert len(response.data) == 1
         assert response.data[0]["email"] == self.owner_user.email
 
+    def test_cannot_get_unapproved_invites(self):
+        join_request = "test@email.com"
+        invite_request = "test@gmail.com"
+
+        self.create_member(
+            organization=self.org,
+            email=join_request,
+            invite_status=InviteStatus.REQUESTED_TO_JOIN.value,
+        )
+
+        self.create_member(
+            organization=self.org,
+            email=invite_request,
+            invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value,
+        )
+
+        response = self.client.get(self.url)
+        assert response.status_code == 200
+        assert len(response.data) == 2
+        assert response.data[0]["email"] == self.user_2.email
+        assert response.data[1]["email"] == self.owner_user.email
+
+        response = self.client.get(self.url + "?query=email:{}".format(join_request))
+        assert response.status_code == 200
+        assert response.data == []
+
+        response = self.client.get(self.url + "?query=email:{}".format(invite_request))
+        assert response.status_code == 200
+        assert response.data == []
+
     def test_owner_invites(self):
         self.login_as(user=self.owner_user)
         response = self.client.post(
