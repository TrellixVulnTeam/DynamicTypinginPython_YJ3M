commit 576c012cfec7a6d271259ab2ccb5a938a051cf9c
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Oct 11 15:27:42 2017 -0700

    ref(settings): Move various settings to new form components (#6091)
    
    * ref(settings): Move various settings to new form components
    
    * fix(config): Add integer support for boolean options

diff --git a/src/sentry/static/sentry/app/components/forms/form.jsx b/src/sentry/static/sentry/app/components/forms/form.jsx
index e387255a13..15c18c37d9 100644
--- a/src/sentry/static/sentry/app/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/components/forms/form.jsx
@@ -83,11 +83,11 @@ export default class Form extends React.Component {
   };
 
   onFieldChange = (name, value) => {
-    this.setState({
-      data: {
-        ...this.state.data,
+    this.setState(state => {
+      state.data = {
+        ...state.data,
         [name]: value
-      }
+      };
     });
   };
 
diff --git a/src/sentry/static/sentry/app/components/forms/formField.jsx b/src/sentry/static/sentry/app/components/forms/formField.jsx
index b52e43e842..f5df9e7a8d 100644
--- a/src/sentry/static/sentry/app/components/forms/formField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/formField.jsx
@@ -5,7 +5,7 @@ import idx from 'idx';
 
 import {defined} from '../../utils';
 
-export default class FormField extends React.Component {
+export default class FormField extends React.PureComponent {
   static propTypes = {
     name: PropTypes.string.isRequired,
     /** Inline style */
@@ -36,22 +36,25 @@ export default class FormField extends React.Component {
   };
 
   constructor(props, context) {
-    super(props);
-
+    super(props, context);
     this.state = {
       value: this.getValue(props, context)
     };
   }
 
+  componentDidMount() {}
+
   componentWillReceiveProps(nextProps, nextContext) {
     if (
       this.props.value !== nextProps.value ||
       (!defined(this.context.form) && defined(nextContext.form))
     ) {
-      this.setState({value: this.getValue(nextProps, nextContext)});
+      this.setValue(this.getValue(nextProps, nextContext));
     }
   }
 
+  componentWillUnmount() {}
+
   getValue(props, context) {
     let form = (context || this.context || {}).form;
     props = props || this.props;
diff --git a/src/sentry/static/sentry/app/components/forms/inputField.jsx b/src/sentry/static/sentry/app/components/forms/inputField.jsx
index 831d91b8fb..0282b5b9bd 100644
--- a/src/sentry/static/sentry/app/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/inputField.jsx
@@ -12,12 +12,14 @@ export default class InputField extends FormField {
 
   // XXX(dcramer): this comes from TooltipMixin
   componentDidMount() {
+    super.componentDidMount();
     this.attachTooltips();
   }
 
   componentWillUnmount() {
     this.removeTooltips();
     jQuery(ReactDOM.findDOMNode(this)).unbind();
+    super.componentWillUnmount();
   }
 
   attachTooltips() {
diff --git a/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx b/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx
index 30a7bd775e..749f14dd4b 100644
--- a/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx
@@ -6,6 +6,8 @@ import jQuery from 'jquery';
 
 import FormField from './formField';
 
+import {defined} from '../../utils';
+
 export default class MultipleCheckboxField extends FormField {
   static propTypes = {
     ...FormField.propTypes,
@@ -15,12 +17,14 @@ export default class MultipleCheckboxField extends FormField {
 
   // XXX(dcramer): this comes from TooltipMixin
   componentDidMount() {
+    super.componentDidMount();
     this.attachTooltips();
   }
 
   componentWillUnmount() {
     this.removeTooltips();
     jQuery(ReactDOM.findDOMNode(this)).unbind();
+    super.componentWillUnmount();
   }
 
   attachTooltips() {
@@ -99,7 +103,9 @@ export default class MultipleCheckboxField extends FormField {
                   value={value}
                   onChange={this.onChange.bind(this, value)}
                   disabled={disabled}
-                  checked={this.state.value.indexOf(value) !== -1}
+                  checked={
+                    defined(this.state.value) && this.state.value.indexOf(value) !== -1
+                  }
                 />
                 {choiceLabel}
               </label>
diff --git a/src/sentry/static/sentry/app/components/forms/select2Field.jsx b/src/sentry/static/sentry/app/components/forms/select2Field.jsx
index a1321bced0..46867fc7e3 100644
--- a/src/sentry/static/sentry/app/components/forms/select2Field.jsx
+++ b/src/sentry/static/sentry/app/components/forms/select2Field.jsx
@@ -75,10 +75,12 @@ export default class Select2Field extends InputField {
   }
 
   componentDidMount() {
+    super.componentDidMount();
     jQuery(this.refs.input).select2(this.getSelect2Options()).on('change', this.onChange);
   }
 
   componentWillUnmount() {
     jQuery(this.refs.select).select2('destroy');
+    super.componentWillUnmount();
   }
 }
diff --git a/src/sentry/static/sentry/app/options.jsx b/src/sentry/static/sentry/app/options.jsx
index ba4bf4c38e..3b1d41adaa 100644
--- a/src/sentry/static/sentry/app/options.jsx
+++ b/src/sentry/static/sentry/app/options.jsx
@@ -166,7 +166,7 @@ function optionsForSection(section) {
   return definitions.filter(option => option.key.split('.')[0] === section.key);
 }
 
-export function getOptionField(option, field, value, onChange) {
+export function getOptionField(option, field) {
   let meta = {...getOption(option), ...field};
   let Field = meta.component || TextField;
   return (
@@ -177,9 +177,7 @@ export function getOptionField(option, field, value, onChange) {
       defaultValue={meta.defaultValue ? meta.defaultValue() : undefined}
       placeholder={meta.placeholder}
       help={meta.help}
-      onChange={onChange}
       required={meta.required && !meta.allowEmpty}
-      value={value}
       disabled={meta.disabled}
       disabledReason={meta.disabledReason && disabledReasons[meta.disabledReason]}
     />
diff --git a/src/sentry/static/sentry/app/views/installWizard.jsx b/src/sentry/static/sentry/app/views/installWizard.jsx
index a6a9426e4b..2e4a8e7e14 100644
--- a/src/sentry/static/sentry/app/views/installWizard.jsx
+++ b/src/sentry/static/sentry/app/views/installWizard.jsx
@@ -1,31 +1,36 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import DocumentTitle from 'react-document-title';
-import _ from 'lodash';
 
+import AsyncView from '../views/asyncView';
 import {t} from '../locale';
-import ApiMixin from '../mixins/apiMixin';
 import ConfigStore from '../stores/configStore';
-import IndicatorStore from '../stores/indicatorStore';
-import LoadingIndicator from '../components/loadingIndicator';
-import {getOption, getOptionField, getForm} from '../options';
+import {ApiForm} from '../components/forms';
+import {getOptionField, getForm} from '../options';
 
-const InstallWizardSettings = React.createClass({
-  propTypes: {
-    options: PropTypes.object.isRequired,
-    formDisabled: PropTypes.bool,
-    onSubmit: PropTypes.func.isRequired
-  },
+export default class InstallWizard extends AsyncView {
+  static propTypes = {
+    onConfigured: PropTypes.func.isRequired
+  };
 
-  getInitialState() {
-    let options = {...this.props.options};
-    let requiredOptions = Object.keys(
-      _.pickBy(options, option => {
-        return option.field.required && !option.field.disabled;
-      })
-    );
+  componentWillMount() {
+    super.componentWillMount();
+    jQuery(document.body).addClass('install-wizard');
+  }
+
+  componentWillUnmount() {
+    super.componentWillUnmount();
+    jQuery(document.body).removeClass('install-wizard');
+  }
+
+  getEndpoint() {
+    return '/internal/options/?query=is:required';
+  }
+
+  renderFormFields() {
+    let options = this.state.data;
     let missingOptions = new Set(
-      requiredOptions.filter(option => !options[option].field.isSet)
+      Object.keys(options).filter(option => !options[option].field.isSet)
     );
     // This is to handle the initial installation case.
     // Even if all options are filled out, we want to prompt to confirm
@@ -33,7 +38,7 @@ const InstallWizardSettings = React.createClass({
     // the backend only spit back all filled out options for
     // this case.
     if (missingOptions.size === 0) {
-      missingOptions = new Set(requiredOptions);
+      missingOptions = new Set(Object.keys(options));
     }
 
     // A mapping of option name to Field object
@@ -41,208 +46,35 @@ const InstallWizardSettings = React.createClass({
 
     for (let key of missingOptions) {
       let option = options[key];
-      if (!option.field.isSet) {
-        let o = getOption(key);
-        option.value = o.defaultValue ? o.defaultValue() : '';
-      }
-      fields[key] = getOptionField(
-        key,
-        option.field,
-        option.value,
-        this.onFieldChange.bind(this, key)
-      );
-      // options is used for submitting to the server, and we dont submit values
-      // that are deleted
       if (option.field.disabled) {
-        delete options[key];
+        continue;
       }
+      fields[key] = getOptionField(key, option.field);
     }
 
-    return {
-      options,
-      required: requiredOptions,
-      fields
-    };
-  },
-
-  onFieldChange(name, value) {
-    let options = {...this.state.options};
-    options[name].value = value;
-    this.setState({
-      options
-    });
-  },
-
-  onSubmit(e) {
-    e.preventDefault();
-    this.props.onSubmit(this.state.options);
-  },
-
-  render() {
-    let {fields, required, options} = this.state;
-    let formValid = !required.filter(
-      option => !options[option].field.allowEmpty && !options[option].value
-    ).length;
-    let disabled = !formValid || this.props.formDisabled;
-
-    return (
-      <form onSubmit={this.onSubmit}>
-        <p>
-          Welcome to Sentry, yo! Complete setup by filling out the required
-          configuration.
-        </p>
-
-        {getForm(fields)}
-
-        <div className="form-actions" style={{marginTop: 25}}>
-          <button className="btn btn-primary" disabled={disabled} type="submit">
-            {t('Continue')}
-          </button>
-        </div>
-      </form>
-    );
+    return getForm(fields);
   }
-});
-
-const InstallWizard = React.createClass({
-  propTypes: {
-    onConfigured: PropTypes.func.isRequired
-  },
-
-  mixins: [ApiMixin],
 
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      options: {},
-      submitError: false,
-      submitErrorType: null,
-      submitInProgress: false
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-    jQuery(document.body).addClass('install-wizard');
-  },
-
-  componentWillUnmount() {
-    jQuery(document.body).removeClass('install-wizard');
-  },
-
-  remountComponent() {
-    this.setState(this.getInitialState(), this.fetchData);
-  },
-
-  fetchData(callback) {
-    // TODO(dcramer): ideally this would only be fetching options that aren't
-    // already configured
-    this.api.request('/internal/options/?query=is:required', {
-      method: 'GET',
-      success: data => {
-        this.setState({
-          options: data,
-          loading: false,
-          error: false
-        });
-      },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true
-        });
-      }
-    });
-  },
-
-  onSubmit(options) {
-    this.setState({
-      submitInProgress: true,
-      submitError: false
-    });
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-
-    // We only want to send back the values which weren't disabled
-    let data = _.mapValues(
-      _.pickBy(options, option => !option.field.disabled),
-      option => option.value
-    );
-
-    // keys to cast as boolean, otherwise will throw server error
-    // see https://github.com/getsentry/sentry/issues/5699
-    ['mail.use-tls'].forEach(key => {
-      if (typeof data[key] !== 'undefined') {
-        data[key] = !!data[key];
+  getInitialData() {
+    let options = this.state.data;
+    let data = {};
+    Object.keys(options).forEach(optionName => {
+      let option = options[optionName];
+      if (option.field.isSet) {
+        data[optionName] = option.value;
       }
     });
+    return data;
+  }
 
-    this.api.request('/internal/options/', {
-      method: 'PUT',
-      data,
-      success: () => {
-        this.setState({
-          submitInProgress: false
-        });
-        this.props.onConfigured();
-      },
-      error: (xhr, textStatus, errorThrown) => {
-        let err = {};
-        try {
-          err = xhr.responseJSON;
-        } catch (ex) {
-          // ...
-        }
-        let errorMessage = '';
-        if (err.detail) {
-          // err.detail comes back on some API responses
-          // specifically on a failed CSRF
-          errorMessage = err.detail;
-        } else {
-          switch (err.error) {
-            case 'unknown_option':
-              errorMessage = t(
-                'An invalid option (%s) was passed to the server. Please report this issue to the Sentry team.',
-                err.errorDetail.option
-              );
-              break;
-            case 'invalid_type':
-              errorMessage = t(
-                'An invalid value for (%s) was passed to the server.',
-                err.errorDetail.option
-              );
-              break;
-            default:
-              errorMessage = t(
-                'An unknown error occurred. Please take a look at the service logs.'
-              );
-          }
-        }
-        this.setState({
-          submitInProgress: false,
-          submitError: true,
-          submitErrorMessage: errorMessage,
-          submitErrorType: err.error
-        });
-      },
-      complete: () => {
-        IndicatorStore.remove(loadingIndicator);
-      }
-    });
-  },
+  getTitle() {
+    return t('Setup Sentry');
+  }
 
   render() {
-    let {
-      error,
-      loading,
-      options,
-      submitError,
-      submitErrorMessage,
-      submitInProgress
-    } = this.state;
     let version = ConfigStore.get('version');
     return (
-      <DocumentTitle title={t('Sentry Setup')}>
+      <DocumentTitle title={this.getTitle()}>
         <div className="app">
           <div className="pattern" />
           <div className="setup-wizard">
@@ -250,33 +82,42 @@ const InstallWizard = React.createClass({
               <span>{t('Welcome to Sentry')}</span>
               <small>{version.current}</small>
             </h1>
-            {loading
-              ? <LoadingIndicator>
-                  {t('Please wait while we load configuration.')}
-                </LoadingIndicator>
-              : error
-                  ? <div className="loading-error">
-                      <span className="icon-exclamation" />
-                      {t(
-                        'We were unable to load the required configuration from the Sentry server. Please take a look at the service logs.'
-                      )}
-                    </div>
-                  : <div>
-                      {submitError &&
-                        <div className="alert alert-block alert-error">
-                          {submitErrorMessage}
-                        </div>}
-                      <InstallWizardSettings
-                        options={options}
-                        onSubmit={this.onSubmit}
-                        formDisabled={submitInProgress}
-                      />
-                    </div>}
+            {this.state.loading
+              ? this.renderLoading()
+              : this.state.error
+                  ? this.renderError(new Error('Unable to load all required endpoints'))
+                  : this.renderBody()}
           </div>
         </div>
       </DocumentTitle>
     );
   }
-});
 
-export default InstallWizard;
+  renderError() {
+    return (
+      <div className="loading-error">
+        <span className="icon-exclamation" />
+        {t(
+          'We were unable to load the required configuration from the Sentry server. Please take a look at the service logs.'
+        )}
+      </div>
+    );
+  }
+
+  renderBody() {
+    return (
+      <ApiForm
+        apiMethod="PUT"
+        apiEndpoint={this.getEndpoint()}
+        submitLabel={t('Continue')}
+        initialData={this.getInitialData()}
+        onSubmitSuccess={this.props.onConfigured}>
+        <p>
+          {t('Complete setup by filling out the required configuration.')}
+        </p>
+
+        {this.renderFormFields()}
+      </ApiForm>
+    );
+  }
+}
diff --git a/src/sentry/utils/types.py b/src/sentry/utils/types.py
index 3897fc919b..235bdac6e2 100644
--- a/src/sentry/utils/types.py
+++ b/src/sentry/utils/types.py
@@ -70,8 +70,11 @@ class BoolType(Type):
     name = 'boolean'
     default = False
     expected_types = (bool, )
+    compatible_types = six.string_types + six.integer_types
 
     def convert(self, value):
+        if isinstance(value, six.integer_types):
+            return bool(value)
         value = value.lower()
         if value in ('y', 'yes', 't', 'true', '1', 'on'):
             return True
diff --git a/tests/sentry/api/endpoints/test_system_options.py b/tests/sentry/api/endpoints/test_system_options.py
index 8e0e5deb1b..fc032aee37 100644
--- a/tests/sentry/api/endpoints/test_system_options.py
+++ b/tests/sentry/api/endpoints/test_system_options.py
@@ -51,6 +51,13 @@ class SystemOptionsTest(APITestCase):
             assert response.data['mail.host']['field']['disabled'] is True
             assert response.data['mail.host']['field']['disabledReason'] == 'smtpDisabled'
 
+    def test_put_int_for_boolean(self):
+        self.login_as(user=self.user)
+        response = self.client.put(self.url, {
+            'auth.allow-registration': 1,
+        })
+        assert response.status_code == 200
+
     def test_put_unknown_option(self):
         self.login_as(user=self.user)
         response = self.client.put(self.url, {
diff --git a/tests/sentry/utils/test_types.py b/tests/sentry/utils/test_types.py
index 553b44dc95..5c303e163d 100644
--- a/tests/sentry/utils/test_types.py
+++ b/tests/sentry/utils/test_types.py
@@ -27,6 +27,7 @@ class OptionsTypesTest(TestCase):
 
     def test_bool(self):
         assert Bool(True) is True
+        assert Bool(1) is True
         assert Bool('y') is True
         assert Bool('YES') is True
         assert Bool('t') is True
@@ -34,6 +35,7 @@ class OptionsTypesTest(TestCase):
         assert Bool('1') is True
         assert Bool('on') is True
         assert Bool(False) is False
+        assert Bool(0) is False
         assert Bool('n') is False
         assert Bool('NO') is False
         assert Bool('f') is False
