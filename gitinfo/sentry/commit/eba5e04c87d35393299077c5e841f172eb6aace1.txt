commit eba5e04c87d35393299077c5e841f172eb6aace1
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Thu Mar 8 19:22:58 2018 -0600

    fix(tagstore): Use cached_property and select_related to reduce some â€¦ (#7527)

diff --git a/src/sentry/receivers/releases.py b/src/sentry/receivers/releases.py
index 1c80e6945e..41945c7f33 100644
--- a/src/sentry/receivers/releases.py
+++ b/src/sentry/receivers/releases.py
@@ -10,6 +10,9 @@ from sentry.tasks.clear_expired_resolutions import clear_expired_resolutions
 
 
 def ensure_release_exists(instance, created, **kwargs):
+    if not created:
+        return
+
     if instance.key != 'sentry:release':
         return
 
diff --git a/src/sentry/tagstore/v2/backend.py b/src/sentry/tagstore/v2/backend.py
index 1b6bb09a98..6c707ab31c 100644
--- a/src/sentry/tagstore/v2/backend.py
+++ b/src/sentry/tagstore/v2/backend.py
@@ -168,13 +168,16 @@ class V2TagStorage(TagStorage):
         tag_key, _ = self.get_or_create_tag_key(
             project_id, environment_id, key, **tag_key_kwargs)
 
-        return TagValue.objects.create(
+        tv = TagValue.objects.create(
             project_id=project_id,
             _key_id=tag_key.id,
             value=value,
             **kwargs
         )
 
+        tv.key = key
+        return tv
+
     def get_or_create_tag_value(self, project_id, environment_id,
                                 key, value, key_id=None, **kwargs):
         assert environment_id is not None
@@ -184,13 +187,16 @@ class V2TagStorage(TagStorage):
                 project_id, environment_id, key, **kwargs)
             key_id = tag_key.id
 
-        return TagValue.objects.get_or_create(
+        tv, created = TagValue.objects.get_or_create(
             project_id=project_id,
             _key_id=key_id,
             value=value,
             **kwargs
         )
 
+        tv.key = key
+        return (tv, created)
+
     def create_group_tag_key(self, project_id, group_id, environment_id, key, **kwargs):
         environment_id = AGGREGATE_ENVIRONMENT_ID if environment_id is None else environment_id
 
@@ -200,26 +206,32 @@ class V2TagStorage(TagStorage):
         tag_key, _ = self.get_or_create_tag_key(
             project_id, environment_id, key, **tag_key_kwargs)
 
-        return GroupTagKey.objects.create(
+        gtk = GroupTagKey.objects.create(
             project_id=project_id,
             group_id=group_id,
             _key_id=tag_key.id,
             **kwargs
         )
 
+        gtk.key = key
+        return gtk
+
     def get_or_create_group_tag_key(self, project_id, group_id, environment_id, key, **kwargs):
         assert environment_id is not None
 
         tag_key, _ = self.get_or_create_tag_key(
             project_id, environment_id, key, **kwargs)
 
-        return GroupTagKey.objects.get_or_create(
+        gtk, created = GroupTagKey.objects.get_or_create(
             project_id=project_id,
             group_id=group_id,
             _key_id=tag_key.id,
             **kwargs
         )
 
+        gtk.key = key
+        return (gtk, created)
+
     def create_group_tag_value(self, project_id, group_id, environment_id,
                                key, value, **kwargs):
         environment_id = AGGREGATE_ENVIRONMENT_ID if environment_id is None else environment_id
@@ -234,7 +246,7 @@ class V2TagStorage(TagStorage):
         tag_value, _ = self.get_or_create_tag_value(
             project_id, environment_id, key, value, **other_kwargs)
 
-        return GroupTagValue.objects.create(
+        gtv = GroupTagValue.objects.create(
             project_id=project_id,
             group_id=group_id,
             _key_id=tag_key.id,
@@ -242,6 +254,10 @@ class V2TagStorage(TagStorage):
             **kwargs
         )
 
+        gtv.key = key
+        gtv.value = value
+        return gtv
+
     def get_or_create_group_tag_value(self, project_id, group_id,
                                       environment_id, key, value, **kwargs):
         assert environment_id is not None
@@ -252,7 +268,7 @@ class V2TagStorage(TagStorage):
         tag_value, _ = self.get_or_create_tag_value(
             project_id, environment_id, key, value, **kwargs)
 
-        return GroupTagValue.objects.get_or_create(
+        gtv, created = GroupTagValue.objects.get_or_create(
             project_id=project_id,
             group_id=group_id,
             _key_id=tag_key.id,
@@ -260,6 +276,10 @@ class V2TagStorage(TagStorage):
             **kwargs
         )
 
+        gtv.key = key
+        gtv.value = value
+        return (gtv, created)
+
     def create_event_tags(self, project_id, group_id, environment_id, event_id, tags):
         assert environment_id is not None
 
@@ -332,7 +352,7 @@ class V2TagStorage(TagStorage):
     def get_tag_value(self, project_id, environment_id, key, value):
         from sentry.tagstore.exceptions import TagValueNotFound
 
-        qs = TagValue.objects.filter(
+        qs = TagValue.objects.select_related('_key').filter(
             project_id=project_id,
             _key__key=key,
             value=value,
@@ -346,7 +366,7 @@ class V2TagStorage(TagStorage):
             raise TagValueNotFound
 
     def get_tag_values(self, project_id, environment_id, key):
-        qs = TagValue.objects.filter(
+        qs = TagValue.objects.select_related('_key').filter(
             project_id=project_id,
             _key__key=key,
         )
@@ -358,7 +378,7 @@ class V2TagStorage(TagStorage):
     def get_group_tag_key(self, project_id, group_id, environment_id, key):
         from sentry.tagstore.exceptions import GroupTagKeyNotFound
 
-        qs = GroupTagKey.objects.filter(
+        qs = GroupTagKey.objects.select_related('_key').filter(
             project_id=project_id,
             group_id=group_id,
             _key__key=key,
@@ -372,7 +392,7 @@ class V2TagStorage(TagStorage):
             raise GroupTagKeyNotFound
 
     def get_group_tag_keys(self, project_id, group_id, environment_id, limit=None):
-        qs = GroupTagKey.objects.filter(
+        qs = GroupTagKey.objects.select_related('_key').filter(
             group_id=group_id,
         )
 
@@ -400,7 +420,7 @@ class V2TagStorage(TagStorage):
         return value
 
     def get_group_tag_values(self, project_id, group_id, environment_id, key):
-        qs = GroupTagValue.objects.filter(
+        qs = GroupTagValue.objects.select_related('_key', '_value').filter(
             group_id=group_id,
             _key__key=key,
         )
@@ -410,7 +430,7 @@ class V2TagStorage(TagStorage):
         return list(qs)
 
     def get_group_list_tag_value(self, project_id, group_id_list, environment_id, key, value):
-        qs = GroupTagValue.objects.filter(
+        qs = GroupTagValue.objects.select_related('_key', '_value').filter(
             project_id=project_id,
             group_id__in=group_id_list,
             _key__key=key,
@@ -639,7 +659,7 @@ class V2TagStorage(TagStorage):
             )
 
         cutoff = timezone.now() - timedelta(days=7)
-        qs = GroupTagValue.objects.filter(
+        qs = GroupTagValue.objects.select_related('_key', '_value').filter(
             group_id=group_id,
             _key__key=key,
             last_seen__gte=cutoff,
@@ -649,7 +669,7 @@ class V2TagStorage(TagStorage):
 
     def get_first_release(self, project_id, group_id):
         try:
-            first_release = GroupTagValue.objects.filter(
+            first_release = GroupTagValue.objects.select_related('_value').filter(
                 project_id=project_id,
                 group_id=group_id,
                 _key__key__in=('sentry:release', 'release'),
@@ -661,7 +681,7 @@ class V2TagStorage(TagStorage):
 
     def get_last_release(self, project_id, group_id):
         try:
-            last_release = GroupTagValue.objects.filter(
+            last_release = GroupTagValue.objects.select_related('_value').filter(
                 project_id=project_id,
                 group_id=group_id,
                 _key__key__in=('sentry:release', 'release'),
@@ -672,7 +692,7 @@ class V2TagStorage(TagStorage):
         return last_release.value
 
     def get_release_tags(self, project_ids, environment_id, versions):
-        qs = TagValue.objects.filter(
+        qs = TagValue.objects.select_related('_key').filter(
             project_id__in=project_ids,
             _key__key='sentry:release',
             value__in=versions,
@@ -696,7 +716,7 @@ class V2TagStorage(TagStorage):
             for eu in event_users
         ]
 
-        return list(GroupTagValue.objects.filter(
+        return list(GroupTagValue.objects.select_related('_value').filter(
             reduce(or_, tag_filters),
             _key__environment_id=AGGREGATE_ENVIRONMENT_ID,
             _key__key='sentry:user',
@@ -764,7 +784,7 @@ class V2TagStorage(TagStorage):
             )
 
     def get_tag_value_qs(self, project_id, environment_id, key, query=None):
-        qs = TagValue.objects.filter(
+        qs = TagValue.objects.select_related('_key').filter(
             project_id=project_id,
             _key__key=key,
         )
@@ -777,7 +797,7 @@ class V2TagStorage(TagStorage):
         return qs
 
     def get_group_tag_value_qs(self, project_id, group_id, environment_id, key):
-        qs = GroupTagValue.objects.filter(
+        qs = GroupTagValue.objects.select_related('_key', '_value').filter(
             project_id=project_id,
             group_id=group_id,
             _key__key=key,
diff --git a/src/sentry/tagstore/v2/models/grouptagkey.py b/src/sentry/tagstore/v2/models/grouptagkey.py
index 68e51607fb..127fb1bf92 100644
--- a/src/sentry/tagstore/v2/models/grouptagkey.py
+++ b/src/sentry/tagstore/v2/models/grouptagkey.py
@@ -40,8 +40,15 @@ class GroupTagKey(Model):
 
     @property
     def key(self):
+        if hasattr(self, '_set_key'):
+            return self._set_key
+
         return self._key.key
 
+    @key.setter
+    def key(self, key):
+        self._set_key = key
+
     def merge_counts(self, new_group):
         from sentry.tagstore.v2.models import GroupTagValue
 
diff --git a/src/sentry/tagstore/v2/models/grouptagvalue.py b/src/sentry/tagstore/v2/models/grouptagvalue.py
index 9ac13225fc..bede1f6e65 100644
--- a/src/sentry/tagstore/v2/models/grouptagvalue.py
+++ b/src/sentry/tagstore/v2/models/grouptagvalue.py
@@ -46,12 +46,26 @@ class GroupTagValue(Model):
 
     @property
     def key(self):
+        if hasattr(self, '_set_key'):
+            return self._set_key
+
         return self._key.key
 
+    @key.setter
+    def key(self, key):
+        self._set_key = key
+
     @property
     def value(self):
+        if hasattr(self, '_set_value'):
+            return self._set_value
+
         return self._value.value
 
+    @value.setter
+    def value(self, value):
+        self._set_value = value
+
     def save(self, *args, **kwargs):
         if not self.first_seen:
             self.first_seen = self.last_seen
diff --git a/src/sentry/tagstore/v2/models/tagvalue.py b/src/sentry/tagstore/v2/models/tagvalue.py
index a4ee0242ec..a87711d772 100644
--- a/src/sentry/tagstore/v2/models/tagvalue.py
+++ b/src/sentry/tagstore/v2/models/tagvalue.py
@@ -47,11 +47,14 @@ class TagValue(Model):
 
     @property
     def key(self):
-        from sentry.tagstore.v2.models import TagKey
-        return TagKey.objects.filter(
-            project_id=self.project_id,
-            id=self._key_id,
-        ).values_list('key', flat=True).get()
+        if hasattr(self, '_set_key'):
+            return self._set_key
+
+        return self._key.key
+
+    @key.setter
+    def key(self, key):
+        self._set_key = key
 
     def get_label(self):
         from sentry import tagstore
diff --git a/tests/sentry/tasks/test_unmerge.py b/tests/sentry/tasks/test_unmerge.py
index a0c66adb56..eac72617cf 100644
--- a/tests/sentry/tasks/test_unmerge.py
+++ b/tests/sentry/tasks/test_unmerge.py
@@ -308,7 +308,7 @@ class UnmergeTestCase(TestCase):
         assert set(
             [(gtv.key, gtv.value, gtv.times_seen)
              for gtv in
-             GroupTagValue.objects.filter(
+             GroupTagValue.objects.select_related('_key', '_value').filter(
                  project_id=source.project_id,
                  group_id=source.id,
             )]
