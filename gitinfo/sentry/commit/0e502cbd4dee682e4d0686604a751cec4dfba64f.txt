commit 0e502cbd4dee682e4d0686604a751cec4dfba64f
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Nov 30 13:03:48 2018 -0800

    feat(discover): Use group ID instead of short ID and link to group (#10866)
    
    Group IDs open link to group, return the id instead of short ID to make
    this possible

diff --git a/src/sentry/api/endpoints/organization_discover_query.py b/src/sentry/api/endpoints/organization_discover_query.py
index d78ea7750a..9443aa78e6 100644
--- a/src/sentry/api/endpoints/organization_discover_query.py
+++ b/src/sentry/api/endpoints/organization_discover_query.py
@@ -18,7 +18,7 @@ from sentry.api.serializers.rest_framework import ListField
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.bases import OrganizationEndpoint
 from sentry.api.paginator import GenericOffsetPaginator
-from sentry.models import Project, Group, ProjectStatus, OrganizationMember, OrganizationMemberTeam
+from sentry.models import Project, ProjectStatus, OrganizationMember, OrganizationMemberTeam
 from sentry.utils import snuba
 from sentry import roles
 from sentry import features
@@ -245,20 +245,6 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
                 if 'project.id' not in requested_query['groupby']:
                     del result['project.id']
 
-        if 'issue.id' in (requested_query['selected_columns'] + requested_query['groupby']):
-            for col in snuba_results['meta']:
-                if col['name'] == 'issue.id':
-                    col['type'] = 'String'
-
-        for arr in [requested_query['selected_columns'], requested_query['groupby']]:
-            if 'issue.id' in arr:
-                groups = {k: v for k, v in Group.objects.filter(
-                    id__in=[row['issue.id'] for row in snuba_results['data']]
-                ).values_list('id', 'short_id')}
-
-                for result in snuba_results['data']:
-                    result['issue.id'] = six.text_type(groups.get(result['issue.id']))
-
         # Convert snuba types to json types
         for col in snuba_results['meta']:
             col['type'] = self.get_json_type(col.get('type'))
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
index 707c55b601..a2d69b9837 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
@@ -228,7 +228,7 @@ export default function createQueryBuilder(initial = {}, organization) {
     // If id or issue.id is present in query fields, always fetch the project.id
     // so we can generate links
     if (type === 'baseQuery') {
-      return originalQuery.fields.includes('id')
+      return originalQuery.fields.some(field => field === 'id' || field === 'issue.id')
         ? {
             ...originalQuery,
             fields: uniq([...originalQuery.fields, 'project.id']),
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
index cf88e54419..f6e202cb6b 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
@@ -72,6 +72,11 @@ export default class ResultTable extends React.Component {
       value = this.getEventLink(data[rowIndex - 1]);
     }
 
+    // check for issue.id columm
+    if (columnIndex < cols.length && cols[columnIndex].name === 'issue.id') {
+      value = this.getIssueLink(data[rowIndex - 1]);
+    }
+
     return (
       <Cell key={key} style={style} isOddRow={rowIndex % 2 === 1} align={align}>
         {value}
@@ -93,6 +98,20 @@ export default class ResultTable extends React.Component {
     );
   };
 
+  getIssueLink = event => {
+    const {slug, projects} = this.context.organization;
+    const projectSlug = projects.find(project => project.id === `${event['project.id']}`)
+      .slug;
+
+    return (
+      <Tooltip title={t('Open issue')}>
+        <Link to={`/${slug}/${projectSlug}/issues/${event['issue.id']}`} target="_blank">
+          {event['issue.id']}
+        </Link>
+      </Tooltip>
+    );
+  };
+
   // Returns an array of column widths for each column in the table.
   // Estimates the column width based on the header row and the longest three
   // rows of data. Since this might be expensive, we'll only do this if there\
diff --git a/tests/snuba/test_organization_discover_query.py b/tests/snuba/test_organization_discover_query.py
index f0ba13b96b..716618012e 100644
--- a/tests/snuba/test_organization_discover_query.py
+++ b/tests/snuba/test_organization_discover_query.py
@@ -228,47 +228,6 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
         assert len(response.data['data']) == 1
         assert(response.data['data'][0]['uniq_project_name']) == 1
 
-    def test_select_issue_id(self):
-        with self.feature('organizations:discover'):
-            url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
-            response = self.client.post(url, {
-                'projects': [self.project.id],
-                'fields': ['issue.id'],
-                'range': '14d',
-                'orderby': '-timestamp',
-            })
-        assert response.status_code == 200, response.content
-        assert len(response.data['data']) == 1
-        assert(response.data['data'][0]['issue.id']) == '20'
-
-    def test_groupby_issue_id(self):
-        with self.feature('organizations:discover'):
-            url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
-            response = self.client.post(url, {
-                'projects': [self.project.id],
-                'aggregations': [['count()', '', 'count']],
-                'fields': ['issue.id'],
-                'range': '14d',
-                'orderby': '-count',
-            })
-        assert response.status_code == 200, response.content
-        assert len(response.data['data']) == 1
-        assert(response.data['data'][0]['issue.id']) == '20'
-        assert(response.data['data'][0]['count']) == 1
-
-    def test_uniq_issue_id(self):
-        with self.feature('organizations:discover'):
-            url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
-            response = self.client.post(url, {
-                'projects': [self.project.id],
-                'aggregations': [['uniq', 'issue.id', 'uniq_issue_id']],
-                'range': '14d',
-                'orderby': '-uniq_issue_id',
-            })
-        assert response.status_code == 200, response.content
-        assert len(response.data['data']) == 1
-        assert(response.data['data'][0]['uniq_issue_id']) == 1
-
     def test_meta_types(self):
         with self.feature('organizations:discover'):
             url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
