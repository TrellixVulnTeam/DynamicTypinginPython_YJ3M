commit 791177b330e64a61b67c87007ca61a9135a3b10e
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Jul 23 11:59:52 2019 -0700

    ref: Remove EventDetails endpoint (#14107)
    
    This endpoint isn't documented or used by the Sentry web application.
    There are no requests for this endpoint logged in Datadog over any recent
    time periods so it should be safe to remove.

diff --git a/src/sentry/api/endpoints/event_details.py b/src/sentry/api/endpoints/event_details.py
deleted file mode 100644
index 33f6e1e603..0000000000
--- a/src/sentry/api/endpoints/event_details.py
+++ /dev/null
@@ -1,39 +0,0 @@
-from __future__ import absolute_import
-
-from rest_framework.response import Response
-
-from sentry.api.base import Endpoint
-from sentry.api.bases.event import EventPermission
-from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.api.serializers import DetailedEventSerializer, serialize
-from sentry.models import Event
-
-
-class EventDetailsEndpoint(Endpoint):
-    permission_classes = (EventPermission, )
-
-    def get(self, request, event_id):
-        """
-        Retrieve an Event
-        `````````````````
-
-        This endpoint returns the data for a specific event.  The event ID
-        is the event as it appears in the Sentry database and not the event
-        ID that is reported by the client upon submission.
-
-        This method is deprecated.
-        """
-        event = Event.objects.from_event_id(event_id, project_id=None)
-        if event is None:
-            raise ResourceDoesNotExist
-
-        self.check_object_permissions(request, event)
-
-        Event.objects.bind_nodes([event], 'data')
-
-        data = serialize(event, request.user, DetailedEventSerializer())
-
-        data['nextEventID'] = event.next_event_id()
-        data['previousEventID'] = event.prev_event_id()
-
-        return Response(data)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 28fde49b05..0e4037d676 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -23,7 +23,6 @@ from .endpoints.debug_files import (
 from .endpoints.event_apple_crash_report import EventAppleCrashReportEndpoint
 from .endpoints.event_attachment_details import EventAttachmentDetailsEndpoint
 from .endpoints.event_attachments import EventAttachmentsEndpoint
-from .endpoints.event_details import EventDetailsEndpoint
 from .endpoints.event_file_committers import EventFileCommittersEndpoint
 from .endpoints.event_grouping_info import EventGroupingInfoEndpoint
 from .endpoints.event_owners import EventOwnersEndpoint
@@ -1401,13 +1400,6 @@ urlpatterns = patterns(
         name='sentry-api-0-shared-group-details'
     ),
 
-    # Events
-    url(
-        r'^events/(?P<event_id>[^\/]+)/$',
-        EventDetailsEndpoint.as_view(),
-        name='sentry-api-0-event-details'
-    ),
-
     # Sentry Apps
     url(
         r'^sentry-apps/$',
diff --git a/tests/snuba/api/endpoints/test_event_details.py b/tests/snuba/api/endpoints/test_event_details.py
deleted file mode 100644
index 4b5cfea3b2..0000000000
--- a/tests/snuba/api/endpoints/test_event_details.py
+++ /dev/null
@@ -1,370 +0,0 @@
-from __future__ import absolute_import
-
-import six
-
-from datetime import timedelta
-from django.utils import timezone
-from django.core.urlresolvers import reverse
-
-from sentry.models import UserReport, Group
-from sentry.testutils import APITestCase, SnubaTestCase
-
-
-class EventDetailsTest(APITestCase, SnubaTestCase):
-    def setUp(self):
-        super(EventDetailsTest, self).setUp()
-        self.project = self.create_project()
-        self.min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
-        self.two_min_ago = (timezone.now() - timedelta(minutes=2)).isoformat()[:19]
-        self.three_min_ago = (timezone.now() - timedelta(minutes=3)).isoformat()[:19]
-
-    def test_simple(self):
-        self.login_as(user=self.user)
-
-        prev_event = self.store_event(
-            data={
-                'event_id': 'a' * 32,
-                'timestamp': self.three_min_ago,
-                'fingerprint': ['group-1'],
-            },
-            project_id=self.project.id
-        )
-        cur_event = self.store_event(
-            data={
-                'event_id': 'b' * 32,
-                'timestamp': self.two_min_ago,
-                'fingerprint': ['group-1'],
-            },
-            project_id=self.project.id
-        )
-        next_event = self.store_event(
-            data={
-                'event_id': 'c' * 32,
-                'timestamp': self.min_ago,
-                'fingerprint': ['group-1'],
-            },
-            project_id=self.project.id
-        )
-
-        group = Group.objects.first()
-
-        url = reverse(
-            'sentry-api-0-event-details', kwargs={
-                'event_id': cur_event.id,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(cur_event.id)
-        assert response.data['nextEventID'] == six.text_type(next_event.event_id)
-        assert response.data['previousEventID'] == six.text_type(prev_event.event_id)
-        assert response.data['groupID'] == six.text_type(group.id)
-        assert not response.data['userReport']
-
-        url = reverse(
-            'sentry-api-0-event-details', kwargs={
-                'event_id': prev_event.id,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(prev_event.id)
-        assert response.data['nextEventID'] == six.text_type(cur_event.event_id)
-        assert response.data['previousEventID'] is None
-        assert response.data['groupID'] == six.text_type(group.id)
-        assert not response.data['userReport']
-
-        url = reverse(
-            'sentry-api-0-event-details', kwargs={
-                'event_id': next_event.id,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(next_event.id)
-        assert response.data['nextEventID'] is None
-        assert response.data['previousEventID'] == six.text_type(cur_event.event_id)
-        assert response.data['groupID'] == six.text_type(group.id)
-        assert not response.data['userReport']
-
-    def test_identical_datetime(self):
-        self.login_as(user=self.user)
-
-        events = []
-
-        for eid in 'abcde':
-            events.append(self.store_event(
-                data={
-                    'event_id': eid * 32,
-                    'timestamp': self.min_ago,
-                    'fingerprint': ['group-1'],
-                },
-                project_id=self.project.id
-            ))
-
-            group = Group.objects.first()
-
-        # First event, no prev
-        url = reverse(
-            'sentry-api-0-event-details', kwargs={
-                'event_id': events[0].id,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(events[0].id)
-        assert response.data['nextEventID'] == six.text_type(events[1].event_id)
-        assert response.data['previousEventID'] is None
-        assert response.data['groupID'] == six.text_type(group.id)
-        assert not response.data['userReport']
-
-        # Middle event, has prev and next
-        url = reverse(
-            'sentry-api-0-event-details', kwargs={
-                'event_id': events[1].id,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(events[1].id)
-        assert response.data['nextEventID'] == six.text_type(events[2].event_id)
-        assert response.data['previousEventID'] == six.text_type(events[0].event_id)
-        assert response.data['groupID'] == six.text_type(group.id)
-        assert not response.data['userReport']
-
-        # Middle event, has prev and next
-        url = reverse(
-            'sentry-api-0-event-details', kwargs={
-                'event_id': events[2].id,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(events[2].id)
-        assert response.data['nextEventID'] == six.text_type(events[3].event_id)
-        assert response.data['previousEventID'] == six.text_type(events[1].event_id)
-        assert response.data['groupID'] == six.text_type(group.id)
-        assert not response.data['userReport']
-
-        # Middle event, has prev and next
-        url = reverse(
-            'sentry-api-0-event-details', kwargs={
-                'event_id': events[3].id,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(events[3].id)
-        assert response.data['nextEventID'] == six.text_type(events[4].event_id)
-        assert response.data['previousEventID'] == six.text_type(events[2].event_id)
-        assert response.data['groupID'] == six.text_type(group.id)
-        assert not response.data['userReport']
-
-        # Last event, no next
-        url = reverse(
-            'sentry-api-0-event-details', kwargs={
-                'event_id': events[4].id,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(events[4].id)
-        assert response.data['nextEventID'] is None
-        assert response.data['previousEventID'] == six.text_type(events[3].event_id)
-        assert response.data['groupID'] == six.text_type(group.id)
-        assert not response.data['userReport']
-
-    def test_timestamps_out_of_order(self):
-        self.login_as(user=self.user)
-
-        cur_event = self.store_event(
-            data={
-                'event_id': 'b' * 32,
-                'timestamp': self.two_min_ago,
-                'fingerprint': ['group-1'],
-            },
-            project_id=self.project.id
-        )
-        next_event = self.store_event(
-            data={
-                'event_id': 'c' * 32,
-                'timestamp': self.min_ago,
-                'fingerprint': ['group-1'],
-            },
-            project_id=self.project.id
-        )
-        prev_event = self.store_event(
-            data={
-                'event_id': 'a' * 32,
-                'timestamp': self.three_min_ago,
-                'fingerprint': ['group-1'],
-            },
-            project_id=self.project.id
-        )
-
-        group = Group.objects.first()
-
-        url = reverse(
-            'sentry-api-0-event-details', kwargs={
-                'event_id': cur_event.id,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(cur_event.id)
-        assert response.data['nextEventID'] == six.text_type(next_event.event_id)
-        assert response.data['previousEventID'] == six.text_type(prev_event.event_id)
-        assert response.data['groupID'] == six.text_type(group.id)
-        assert not response.data['userReport']
-
-        url = reverse(
-            'sentry-api-0-event-details', kwargs={
-                'event_id': prev_event.id,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(prev_event.id)
-        assert response.data['nextEventID'] == six.text_type(cur_event.event_id)
-        assert response.data['previousEventID'] is None
-        assert response.data['groupID'] == six.text_type(group.id)
-        assert not response.data['userReport']
-
-        url = reverse(
-            'sentry-api-0-event-details', kwargs={
-                'event_id': next_event.id,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(next_event.id)
-        assert response.data['nextEventID'] is None
-        assert response.data['previousEventID'] == six.text_type(cur_event.event_id)
-        assert response.data['groupID'] == six.text_type(group.id)
-        assert not response.data['userReport']
-
-    def test_user_report(self):
-        self.login_as(user=self.user)
-
-        cur_event = self.store_event(
-            data={
-                'event_id': 'a' * 32,
-                'timestamp': self.min_ago,
-            },
-            project_id=self.project.id
-        )
-
-        group = Group.objects.first()
-
-        user_report = UserReport.objects.create(
-            event_id=cur_event.event_id,
-            project=group.project,
-            email='foo@example.com',
-            name='Jane Doe',
-            comments='Hello world!',
-        )
-
-        url = reverse(
-            'sentry-api-0-event-details', kwargs={
-                'event_id': cur_event.id,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(cur_event.id)
-        assert response.data['userReport']['id'] == six.text_type(user_report.id)
-
-    def test_event_ordering(self):
-        # Test that a real "prev" event that happened at an earlier time is not
-        # masked by multiple subsequent events in the same second.
-        self.login_as(user=self.user)
-
-        before = self.store_event(
-            data={
-                'event_id': 'a' * 32,
-                'timestamp': self.two_min_ago,
-                'fingerprint': ['group-1'],
-            },
-            project_id=self.project.id
-        )
-
-        event = self.store_event(
-            data={
-                'event_id': 'b' * 32,
-                'timestamp': self.min_ago,
-                'fingerprint': ['group-1'],
-            },
-            project_id=self.project.id
-        )
-
-        # Masking events: same time as event, but higher ids
-        for eid in 'cdef':
-            self.store_event(
-                data={
-                    'event_id': eid * 32,
-                    'timestamp': self.min_ago,
-                    'fingerprint': ['group-1'],
-                },
-                project_id=self.project.id
-            )
-
-        url = reverse(
-            'sentry-api-0-event-details', kwargs={
-                'event_id': event.id,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(event.id)
-        assert response.data['previousEventID'] == six.text_type(before.event_id)
-
-    def test_issueless_event(self):
-        self.login_as(user=self.user)
-
-        data = {
-            'event_id': 'b' * 32,
-            'timestamp': self.two_min_ago,
-            'fingerprint': ['whatever-will-be-ignored'],
-            'transaction': 'wait',
-            'contexts': {
-                'trace': {
-                    'parent_span_id': 'bce14471e0e9654d',
-                    'trace_id': 'a0fa8803753e40fd8124b21eeb2986b5',
-                    'span_id': 'bf5be759039ede9a'
-                }
-            },
-            'spans': [],
-            'start_timestamp': '2019-06-14T14:01:40Z',
-            'type': 'transaction',
-        }
-
-        cur_event = self.store_event(
-            data,
-            project_id=self.project.id
-        )
-
-        url = reverse(
-            'sentry-api-0-event-details', kwargs={
-                'event_id': cur_event.id,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(cur_event.id)
-        assert response.data['groupID'] is None
-        assert not response.data['userReport']
-        assert response.data['type'] == 'transaction'
