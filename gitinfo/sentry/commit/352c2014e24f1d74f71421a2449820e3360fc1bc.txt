commit 352c2014e24f1d74f71421a2449820e3360fc1bc
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Jan 29 11:06:26 2019 -0800

    feat(events-stream): Disable Sentry user feedback dialog (#11103)
    
    * feat(events-stream): Disable Sentry user feedback dialog
    
    * disables Sentry user feedback dialog on the events stream view.
    * disables the error view when `events-meta` endpoint has errors.
    * does not make `events-meta` request unless you have `internal-catchall` flag
    
    * revert this
    
    * fix onRequestError args
    
    * use parent method signature
    
    * fix tests

diff --git a/src/sentry/static/sentry/app/components/asyncComponent.jsx b/src/sentry/static/sentry/app/components/asyncComponent.jsx
index fbd1e6a98a..d13869bf94 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.jsx
@@ -200,6 +200,10 @@ export default class AsyncComponent extends React.Component {
     // Allow children to implement this
   }
 
+  onRequestError(resp, args) {
+    // Allow children to implement this
+  }
+
   handleRequestSuccess = ({stateKey, data, jqXHR}, initialRequest) => {
     this.setState(prevState => {
       let state = {
@@ -219,7 +223,8 @@ export default class AsyncComponent extends React.Component {
     this.onRequestSuccess({stateKey, data, jqXHR});
   };
 
-  handleError(error, [stateKey]) {
+  handleError(error, args) {
+    let [stateKey] = args;
     if (error && error.responseText) {
       Sentry.addBreadcrumb({
         message: error.responseText,
@@ -243,6 +248,7 @@ export default class AsyncComponent extends React.Component {
 
       return state;
     });
+    this.onRequestError(error, args);
   }
 
   // DEPRECATED: use getEndpoints()
@@ -298,7 +304,7 @@ export default class AsyncComponent extends React.Component {
     return <LoadingIndicator />;
   }
 
-  renderError(error, disableLog = false) {
+  renderError(error, disableLog = false, disableReport = false) {
     // 401s are captured by SudaModal, but may be passed back to AsyncComponent if they close the modal without identifying
     let unauthorizedErrors = Object.values(this.state.errors).find(
       resp => resp && resp.status === 401
@@ -343,6 +349,7 @@ export default class AsyncComponent extends React.Component {
         error={error}
         component={this}
         disableLogSentry={!shouldLogSentry}
+        disableReport={disableReport}
         onRetry={this.remountComponent}
       />
     );
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
index 79b4ea0564..3afc240873 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
@@ -1,3 +1,4 @@
+import * as Sentry from '@sentry/browser';
 import {Flex} from 'grid-emotion';
 import {isEqual} from 'lodash';
 import {withRouter} from 'react-router';
@@ -56,15 +57,20 @@ class TotalEventCount extends AsyncComponent {
     ];
   }
 
+  onRequestError(error) {
+    Sentry.captureException(new Error('Unable to fetch "total event count"'));
+  }
+
+  renderError(error, disableLog = false, disableReport = false) {
+    // Don't show an error message, handle it in `onRequestError`
+    return null;
+  }
+
   renderBody() {
     let {eventsMeta} = this.state;
-    let {isAllResults, organization, numRows} = this.props;
+    let {isAllResults, numRows} = this.props;
     let count = isAllResults ? numRows : eventsMeta.count;
-    return (
-      <Feature features={['internal-catchall']} organization={organization}>
-        {t(` of ${count.toLocaleString()}${isAllResults ? '' : ' (estimated)'}`)}
-      </Feature>
-    );
+    return t(` of ${count.toLocaleString()}${isAllResults ? '' : ' (estimated)'}`);
   }
 }
 
@@ -148,7 +154,12 @@ class OrganizationEvents extends AsyncView {
 
     return (
       <React.Fragment>
-        {error && super.renderError(new Error('Unable to load all required endpoints'))}
+        {error &&
+          super.renderError(
+            new Error('Unable to load all required endpoints'),
+            false,
+            true
+          )}
         <Panel>
           <EventsChart
             query={location.query.query}
@@ -172,14 +183,16 @@ class OrganizationEvents extends AsyncView {
               <RowDisplay>
                 {events.length ? t(`Results ${this.renderRowCounts()}`) : t('No Results')}
                 {!!events.length && (
-                  <TotalEventCount
-                    organization={organization}
-                    location={location}
-                    isAllResults={
-                      !parsedLinks.previous.results && !parsedLinks.next.results
-                    }
-                    numRows={events.length}
-                  />
+                  <Feature features={['internal-catchall']}>
+                    <TotalEventCount
+                      organization={organization}
+                      location={location}
+                      isAllResults={
+                        !parsedLinks.previous.results && !parsedLinks.next.results
+                      }
+                      numRows={events.length}
+                    />
+                  </Feature>
                 )}
               </RowDisplay>
               <Pagination pageLinks={eventsPageLinks} className="" />
diff --git a/src/sentry/static/sentry/app/views/routeError.jsx b/src/sentry/static/sentry/app/views/routeError.jsx
index def310fedd..138729baeb 100644
--- a/src/sentry/static/sentry/app/views/routeError.jsx
+++ b/src/sentry/static/sentry/app/views/routeError.jsx
@@ -12,6 +12,7 @@ class RouteError extends React.Component {
      * Disable logging to Sentry
      */
     disableLogSentry: PropTypes.bool,
+    disableReport: PropTypes.bool,
     error: PropTypes.object.isRequired,
     routes: PropTypes.array,
   };
@@ -22,7 +23,7 @@ class RouteError extends React.Component {
   };
 
   componentWillMount() {
-    let {disableLogSentry, routes, error} = this.props;
+    let {disableLogSentry, disableReport, routes, error} = this.props;
     let {organization, project} = this.context;
 
     if (disableLogSentry) return;
@@ -43,7 +44,10 @@ class RouteError extends React.Component {
         scope.setExtra('projectFeatures', (project && project.features) || []);
         Sentry.captureException(error);
       });
-      Sentry.showReportDialog();
+
+      if (!disableReport) {
+        Sentry.showReportDialog();
+      }
     });
   }
 
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/organizationEvents/events.spec.jsx
index 15399ffe5a..e953ecf9a1 100644
--- a/tests/js/spec/views/organizationEvents/events.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/events.spec.jsx
@@ -98,11 +98,26 @@ describe('OrganizationEventsErrors', function() {
     await tick();
     wrapper.update();
     expect(eventsStatsMock).toHaveBeenCalled();
-    expect(eventsMetaMock).toHaveBeenCalled();
+    expect(eventsMetaMock).not.toHaveBeenCalled();
     expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
     expect(wrapper.find('IdBadge')).toHaveLength(2);
   });
 
+  it('renders TotalEventCount with internal flag', async function() {
+    const newOrg = TestStubs.Organization({
+      ...org,
+      features: [...org.features, 'internal-catchall'],
+    });
+    const wrapper = mount(
+      <OrganizationEvents organization={newOrg} location={{query: {}}} />,
+      {...routerContext, context: {...routerContext.context, organization: newOrg}}
+    );
+    await tick();
+    wrapper.update();
+    expect(eventsMetaMock).toHaveBeenCalled();
+    expect(wrapper.find('Feature').text()).toEqual(' of 5 (estimated)');
+  });
+
   // This tests the component's `shouldComponentUpdate`
   // Use `search` to compare instead of `query` because that's what we check in `AsyncComponent`
   it('location.query changes updates events table', async function() {
@@ -242,66 +257,104 @@ describe('OrganizationEventsErrors', function() {
       );
     });
   });
+});
 
-  describe('OrganizationEventsContainer', function() {
-    let wrapper;
-
-    beforeEach(function() {
-      // GlobalSelectionStore.reset();
+describe('OrganizationEventsContainer', function() {
+  let wrapper;
+  let eventsMock;
+  let eventsStatsMock;
+  let eventsMetaMock;
 
-      router.location = {
+  const {organization, router, routerContext} = initializeOrg({
+    projects: [{isMember: true}, {isMember: true, slug: 'new-project', id: 3}],
+    organization: {
+      features: ['events', 'internal-catchall'],
+    },
+    router: {
+      location: {
         pathname: '/organizations/org-slug/events/',
         query: {},
-      };
-      wrapper = mount(
-        <OrganizationEventsContainer
-          router={router}
-          organization={organization}
-          location={router.location}
-        >
-          <OrganizationEvents location={router.location} organization={org} />
-        </OrganizationEventsContainer>,
-        routerContext
-      );
+      },
+    },
+  });
 
-      mockRouterPush(wrapper, router);
+  beforeAll(function() {
+    MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/environments/`,
+      body: TestStubs.Environments(),
     });
+  });
 
-    it('performs the correct queries when there is a search query', async function() {
-      wrapper.find('SmartSearchBar input').simulate('change', {target: {value: 'http'}});
-      wrapper.find('SmartSearchBar input').simulate('submit');
-
-      expect(router.push).toHaveBeenLastCalledWith({
-        pathname: '/organizations/org-slug/events/',
-        query: {query: 'http', statsPeriod: '14d'},
-      });
+  beforeEach(function() {
+    // Search bar makes this request when mounted
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/tags/',
+      body: [{count: 1, tag: 'transaction'}, {count: 2, tag: 'mechanism'}],
+    });
+    eventsMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/events/',
+      body: (url, opts) => [TestStubs.OrganizationEvent(opts.query)],
+      headers: {Link: pageOneLinks},
+    });
+    eventsStatsMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/events-stats/',
+      body: (url, opts) => {
+        return TestStubs.HealthGraph(opts.query);
+      },
+    });
+    eventsMetaMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/events-meta/',
+      body: {count: 5},
+    });
 
-      await tick();
-      await tick();
-      wrapper.update();
+    wrapper = mount(
+      <OrganizationEventsContainer
+        router={router}
+        organization={organization}
+        location={router.location}
+      >
+        <OrganizationEvents location={router.location} organization={organization} />
+      </OrganizationEventsContainer>,
+      routerContext
+    );
 
-      expect(eventsMock).toHaveBeenLastCalledWith(
-        '/organizations/org-slug/events/',
-        expect.objectContaining({
-          query: {query: 'http', statsPeriod: '14d'},
-        })
-      );
+    mockRouterPush(wrapper, router);
+  });
 
-      // 28d because of previous period
-      expect(eventsStatsMock).toHaveBeenLastCalledWith(
-        '/organizations/org-slug/events-stats/',
-        expect.objectContaining({
-          query: expect.objectContaining({query: 'http', statsPeriod: '28d'}),
-        })
-      );
+  it('performs the correct queries when there is a search query', async function() {
+    wrapper.find('SmartSearchBar input').simulate('change', {target: {value: 'http'}});
+    wrapper.find('SmartSearchBar input').simulate('submit');
 
-      expect(eventsMetaMock).toHaveBeenLastCalledWith(
-        '/organizations/org-slug/events-meta/',
-        expect.objectContaining({
-          query: {query: 'http', statsPeriod: '14d'},
-        })
-      );
+    expect(router.push).toHaveBeenLastCalledWith({
+      pathname: '/organizations/org-slug/events/',
+      query: {query: 'http', statsPeriod: '14d'},
     });
+
+    await tick();
+    await tick();
+    wrapper.update();
+
+    expect(eventsMock).toHaveBeenLastCalledWith(
+      '/organizations/org-slug/events/',
+      expect.objectContaining({
+        query: {query: 'http', statsPeriod: '14d'},
+      })
+    );
+
+    // 28d because of previous period
+    expect(eventsStatsMock).toHaveBeenLastCalledWith(
+      '/organizations/org-slug/events-stats/',
+      expect.objectContaining({
+        query: expect.objectContaining({query: 'http', statsPeriod: '28d'}),
+      })
+    );
+
+    expect(eventsMetaMock).toHaveBeenLastCalledWith(
+      '/organizations/org-slug/events-meta/',
+      expect.objectContaining({
+        query: {query: 'http', statsPeriod: '14d'},
+      })
+    );
   });
 });
 
