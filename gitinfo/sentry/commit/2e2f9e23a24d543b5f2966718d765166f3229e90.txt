commit 2e2f9e23a24d543b5f2966718d765166f3229e90
Author: Radu Woinaroski <5281987+RaduW@users.noreply.github.com>
Date:   Thu May 23 09:56:39 2019 -0700

    ref: Cleanup  sentry.coreApi.Auth class initialization (#13307)

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index cdc437134f..1838c7988e 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -77,11 +77,11 @@ class APIRateLimited(APIError):
 
 
 class Auth(object):
-    def __init__(self, auth_vars, is_public=False):
-        self.client = auth_vars.get('sentry_client')
-        self.version = six.text_type(auth_vars.get('sentry_version'))
-        self.secret_key = auth_vars.get('sentry_secret')
-        self.public_key = auth_vars.get('sentry_key')
+    def __init__(self, client=None, version=None, secret_key=None, public_key=None, is_public=False):
+        self.client = client
+        self.version = version
+        self.secret_key = secret_key
+        self.public_key = public_key
         self.is_public = is_public
 
 
@@ -235,7 +235,11 @@ class ClientAuthHelper(AbstractAuthHelper):
             raise APIUnauthorized('Unable to find authentication information')
 
         origin = cls.origin_from_request(request)
-        auth = Auth(result, is_public=bool(origin))
+        auth = Auth(client=result.get('sentry_client'),
+                    version=six.text_type(result.get('sentry_version')),
+                    secret_key=result.get('sentry_secret'),
+                    public_key=result.get('sentry_key'),
+                    is_public=bool(origin))
         # default client to user agent
         if not auth.client:
             auth.client = request.META.get('HTTP_USER_AGENT')
@@ -268,8 +272,7 @@ class MinidumpAuthHelper(AbstractAuthHelper):
         # Minidump requests are always "trusted".  We at this point only
         # use is_public to identify requests that have an origin set (via
         # CORS)
-        auth = Auth({'sentry_key': key}, is_public=False)
-        auth.client = 'sentry-minidump'
+        auth = Auth(public_key=key, client='sentry-minidump', is_public=False)
         return auth
 
 
@@ -287,11 +290,7 @@ class SecurityAuthHelper(AbstractAuthHelper):
         if not key:
             raise APIUnauthorized('Unable to find authentication information')
 
-        auth = Auth(
-            {
-                'sentry_key': key,
-            }, is_public=True
-        )
+        auth = Auth(public_key=key, is_public=True)
         auth.client = request.META.get('HTTP_USER_AGENT')
         return auth
 
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 53ed7e7737..7a36936be6 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -787,7 +787,7 @@ class UnrealView(StoreView):
         project = self._get_project_from_id(project_id)
         helper.context.bind_project(project)
 
-        auth = Auth({'sentry_key': sentry_key}, is_public=False)
+        auth = Auth(public_key=sentry_key, is_public=False)
         auth.client = 'sentry.unreal_engine'
 
         key = helper.project_key_from_auth(auth)
diff --git a/tests/sentry/coreapi/test_coreapi.py b/tests/sentry/coreapi/test_coreapi.py
index 6195bf2228..dd4e733a73 100644
--- a/tests/sentry/coreapi/test_coreapi.py
+++ b/tests/sentry/coreapi/test_coreapi.py
@@ -32,25 +32,25 @@ class BaseAPITest(TestCase):
 class ProjectIdFromAuthTest(BaseAPITest):
     def test_invalid_if_missing_key(self):
         with pytest.raises(APIUnauthorized):
-            self.helper.project_id_from_auth(Auth({}))
+            self.helper.project_id_from_auth(Auth())
 
     def test_valid_with_key(self):
-        auth = Auth({'sentry_key': self.pk.public_key})
+        auth = Auth(public_key=self.pk.public_key)
         result = self.helper.project_id_from_auth(auth)
         assert result == self.project.id
 
     def test_invalid_key(self):
-        auth = Auth({'sentry_key': 'z'})
+        auth = Auth(public_key='z')
         with pytest.raises(APIUnauthorized):
             self.helper.project_id_from_auth(auth)
 
     def test_invalid_secret(self):
-        auth = Auth({'sentry_key': self.pk.public_key, 'sentry_secret': 'z'})
+        auth = Auth(public_key=self.pk.public_key, secret_key='z')
         with pytest.raises(APIUnauthorized):
             self.helper.project_id_from_auth(auth)
 
     def test_nonascii_key(self):
-        auth = Auth({'sentry_key': '\xc3\xbc'})
+        auth = Auth(public_key='\xc3\xbc')
         with pytest.raises(APIUnauthorized):
             self.helper.project_id_from_auth(auth)
 
