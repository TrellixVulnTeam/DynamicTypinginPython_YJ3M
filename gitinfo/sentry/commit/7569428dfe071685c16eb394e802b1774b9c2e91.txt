commit 7569428dfe071685c16eb394e802b1774b9c2e91
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon Jun 3 12:44:46 2019 -0700

    feat(event-search): Organization Event Json endpoint (#13459)
    
    * first pass at org event json
    
    * Saving place
    
    * moved the event json class to project because project was included in the url.
    
    * Removed changes to event.py

diff --git a/src/sentry/api/endpoints/project_event_details.py b/src/sentry/api/endpoints/project_event_details.py
index eca5ae51c1..9e34e4f381 100644
--- a/src/sentry/api/endpoints/project_event_details.py
+++ b/src/sentry/api/endpoints/project_event_details.py
@@ -1,5 +1,8 @@
 from __future__ import absolute_import
 
+import json
+
+from datetime import datetime
 from rest_framework.response import Response
 
 from sentry import options
@@ -79,3 +82,18 @@ class ProjectEventDetailsEndpoint(ProjectEndpoint):
         data['previousEventID'] = prev_event_id
 
         return Response(data)
+
+
+class EventJsonEndpoint(ProjectEndpoint):
+
+    def get(self, request, project, event_id):
+        event = SnubaEvent.objects.from_event_id(event_id, project.id)
+
+        if not event:
+            return Response({'detail': 'Event not found'}, status=404)
+
+        event_dict = event.as_dict()
+        if isinstance(event_dict['datetime'], datetime):
+            event_dict['datetime'] = event_dict['datetime'].isoformat()
+
+        return Response(json.dumps(event_dict), status=200)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 438a6e15d9..c82ddc8db1 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -142,7 +142,7 @@ from .endpoints.project_environments import ProjectEnvironmentsEndpoint
 from .endpoints.project_environment_details import ProjectEnvironmentDetailsEndpoint
 from .endpoints.project_platforms import ProjectPlatformsEndpoint
 from .endpoints.project_events import ProjectEventsEndpoint
-from .endpoints.project_event_details import ProjectEventDetailsEndpoint
+from .endpoints.project_event_details import ProjectEventDetailsEndpoint, EventJsonEndpoint
 from .endpoints.project_filters import ProjectFiltersEndpoint
 from .endpoints.project_filter_details import ProjectFilterDetailsEndpoint
 from .endpoints.project_group_index import ProjectGroupIndexEndpoint
@@ -966,6 +966,11 @@ urlpatterns = patterns(
         EventFileCommittersEndpoint.as_view(),
         name='sentry-api-0-event-file-committers'
     ),
+    url(
+        r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/events/(?P<event_id>[\w-]+)/json/$',
+        EventJsonEndpoint.as_view(),
+        name='sentry-api-0-event-json'
+    ),
     url(
         r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/events/(?P<event_id>[\w-]+)/owners/$',
         EventOwnersEndpoint.as_view(),
diff --git a/tests/snuba/api/endpoints/test_project_event_details.py b/tests/snuba/api/endpoints/test_project_event_details.py
index f94323de65..7c9cd65eda 100644
--- a/tests/snuba/api/endpoints/test_project_event_details.py
+++ b/tests/snuba/api/endpoints/test_project_event_details.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import json
 import six
 
 from datetime import timedelta
@@ -125,3 +126,78 @@ class ProjectEventDetailsTest(APITestCase, SnubaTestCase):
         assert response.data['previousEventID'] is None
         assert response.data['nextEventID'] == self.next_event.event_id
         assert response.data['groupID'] == six.text_type(self.prev_event.group.id)
+
+
+class ProjectEventJsonEndpointTest(APITestCase, SnubaTestCase):
+    def setUp(self):
+        super(ProjectEventJsonEndpointTest, self).setUp()
+        self.login_as(user=self.user)
+        self.event_id = 'c' * 32
+        self.fingerprint = ['group_2']
+        self.min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
+        self.event = self.store_event(
+            data={
+                'event_id': self.event_id,
+                'timestamp': self.min_ago,
+                'fingerprint': self.fingerprint,
+                'user': {
+                    'email': self.user.email,
+                },
+            },
+            project_id=self.project.id,
+        )
+        self.url = reverse(
+            'sentry-api-0-event-json',
+            kwargs={
+                'organization_slug': self.organization.slug,
+                'project_slug': self.project.slug,
+                'event_id': self.event_id,
+            }
+        )
+
+    def assert_event(self, data):
+        data = json.loads(data.decode('utf-8'))
+        assert data['event_id'] == self.event_id
+        assert data['user']['email'] == self.user.email
+        assert data['datetime'][:19] == self.min_ago
+        assert data['fingerprint'] == self.fingerprint
+
+    def test_simple(self):
+        response = self.client.get(self.url, format='json')
+        assert response.status_code == 200, response.content
+        self.assert_event(response.data)
+
+    def test_event_does_not_exist(self):
+        self.url = reverse(
+            'sentry-api-0-event-json',
+            kwargs={
+                'organization_slug': self.organization.slug,
+                'project_slug': self.project.slug,
+                'event_id': 'no' * 16,
+            }
+        )
+        response = self.client.get(self.url, format='json')
+        assert response.status_code == 404, response.content
+        assert response.data == {'detail': 'Event not found'}
+
+    def test_user_unauthorized(self):
+        user = self.create_user()
+        self.login_as(user)
+
+        response = self.client.get(self.url, format='json')
+        assert response.status_code == 403, response.content
+        assert response.data == {'detail': 'You do not have permission to perform this action.'}
+
+    def test_project_not_associated_with_event(self):
+        project2 = self.create_project(organization=self.organization)
+        url = reverse(
+            'sentry-api-0-event-json',
+            kwargs={
+                'organization_slug': self.organization.slug,
+                'project_slug': project2.slug,
+                'event_id': self.event_id,
+            }
+        )
+        response = self.client.get(url, format='json')
+        assert response.status_code == 404, response.content
+        assert response.data == {'detail': 'Event not found'}
