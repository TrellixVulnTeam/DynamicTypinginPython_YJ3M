commit 6834a9d2fdc3ec8c2090b423106adb8c73d31307
Author: Stephen Cefali <scefali@sentry.io>
Date:   Thu Jan 2 13:26:53 2020 -0800

    ref(ts): utilize RouteComponentProps for AsyncComponent props (#16220)

diff --git a/src/sentry/static/sentry/app/components/asyncComponent.tsx b/src/sentry/static/sentry/app/components/asyncComponent.tsx
index e1f05c9266..66bf71c789 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.tsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.tsx
@@ -1,8 +1,8 @@
 import isEqual from 'lodash/isEqual';
 import PropTypes from 'prop-types';
 import React from 'react';
-import {Location} from 'history';
 import * as Sentry from '@sentry/browser';
+import {RouteComponentProps} from 'react-router/lib/Router';
 
 import {Client} from 'app/api';
 import {metric} from 'app/utils/analytics';
@@ -15,15 +15,11 @@ import RouteError from 'app/views/routeError';
 import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
 
 type AsyncComponentProps = {
-  location?: Location;
-  router?: any;
-  params?: any;
-
   // optional sentry APM profiling
   // Note we don't decorate `AsyncComponent` but rather the subclass
   // so we can get its component name
   finishProfile?: () => void;
-};
+} & Partial<RouteComponentProps<{}, {}>>;
 
 type AsyncComponentState = {
   loading: boolean;
@@ -114,8 +110,8 @@ export default class AsyncComponent<
     this._measurement = {
       hasMeasured: false,
     };
-    if (props.router && props.router.routes) {
-      metric.mark(`async-component-${getRouteStringFromRoutes(props.router.routes)}`);
+    if (props.routes && props.routes) {
+      metric.mark(`async-component-${getRouteStringFromRoutes(props.routes)}`);
     }
   }
 
@@ -155,10 +151,9 @@ export default class AsyncComponent<
     if (
       !this._measurement.hasMeasured &&
       this._measurement.finished &&
-      this.props.router &&
-      this.props.router.routes
+      this.props.routes
     ) {
-      const routeString = getRouteStringFromRoutes(this.props.router.routes);
+      const routeString = getRouteStringFromRoutes(this.props.routes);
       metric.measure({
         name: 'app.component.async-component',
         start: `async-component-${routeString}`,
diff --git a/src/sentry/static/sentry/app/utils/getRouteStringFromRoutes.tsx b/src/sentry/static/sentry/app/utils/getRouteStringFromRoutes.tsx
index 854dde541e..111492639a 100644
--- a/src/sentry/static/sentry/app/utils/getRouteStringFromRoutes.tsx
+++ b/src/sentry/static/sentry/app/utils/getRouteStringFromRoutes.tsx
@@ -12,7 +12,7 @@ type RouteWithPath = Omit<PlainRoute, 'path'> & Required<Pick<PlainRoute, 'path'
  * @param {Array<{}>} routes An array of route objects from react-router
  * @return String Returns a route path
  */
-export default function getRouteStringFromRoutes(routes: PlainRoute[]): string {
+export default function getRouteStringFromRoutes(routes?: PlainRoute[]): string {
   if (!Array.isArray(routes)) {
     return '';
   }
diff --git a/src/sentry/static/sentry/app/views/acceptOrganizationInvite.tsx b/src/sentry/static/sentry/app/views/acceptOrganizationInvite.tsx
index 4d971c8643..b16a3b0264 100644
--- a/src/sentry/static/sentry/app/views/acceptOrganizationInvite.tsx
+++ b/src/sentry/static/sentry/app/views/acceptOrganizationInvite.tsx
@@ -1,6 +1,7 @@
 import React, {MouseEvent} from 'react';
 import styled from 'react-emotion';
 import {browserHistory} from 'react-router';
+import {RouteComponentProps} from 'react-router/lib/Router';
 
 import {logout} from 'app/actionCreators/account';
 import {t, tct} from 'app/locale';
@@ -23,13 +24,15 @@ type InviteDetails = {
   ssoProvider?: string;
 };
 
+type Props = RouteComponentProps<{memberId: string; token: string}, {}>;
+
 type State = AsyncView['state'] & {
   inviteDetails: InviteDetails;
   accepting: boolean | undefined;
   acceptError: boolean | undefined;
 };
 
-class AcceptOrganizationInvite extends AsyncView<AsyncView['props'], State> {
+class AcceptOrganizationInvite extends AsyncView<Props, State> {
   getEndpoints(): [string, string][] {
     const {memberId, token} = this.props.params;
     return [['inviteDetails', `/accept-invite/${memberId}/${token}/`]];
diff --git a/src/sentry/static/sentry/app/views/incidents/details/body.tsx b/src/sentry/static/sentry/app/views/incidents/details/body.tsx
index 16a93e77bf..055c8b70da 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/body.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/body.tsx
@@ -1,4 +1,4 @@
-import {Params} from 'react-router/lib/Router';
+import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 import styled from 'react-emotion';
 
@@ -22,9 +22,8 @@ import Suspects from './suspects';
 import {Incident} from '../types';
 
 type Props = {
-  params: Params;
   incident?: Incident;
-};
+} & RouteComponentProps<{incidentId: string; orgId: string}, {}>;
 
 export default class DetailsBody extends React.Component<Props> {
   render() {
@@ -87,7 +86,7 @@ export default class DetailsBody extends React.Component<Props> {
               )}
             </div>
 
-            <Suspects params={params} />
+            <Suspects {...this.props} />
 
             <RelatedIssues params={params} incident={incident} />
           </PageContent>
diff --git a/src/sentry/static/sentry/app/views/incidents/details/index.tsx b/src/sentry/static/sentry/app/views/incidents/details/index.tsx
index 26506cc27a..9ce1579727 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/index.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/index.tsx
@@ -1,5 +1,5 @@
-import {Params} from 'react-router/lib/Router';
 import React from 'react';
+import {RouteComponentProps} from 'react-router/lib/Router';
 
 import {Client} from 'app/api';
 import {addErrorMessage} from 'app/actionCreators/indicator';
@@ -21,8 +21,7 @@ import {Incident} from '../types';
 
 type Props = {
   api: Client;
-  params: Params;
-};
+} & RouteComponentProps<{incidentId: string; orgId: string}, {}>;
 
 type State = {
   isLoading: boolean;
@@ -132,7 +131,7 @@ class IncidentDetails extends React.Component<Props, State> {
           onStatusChange={this.handleStatusChange}
         />
 
-        <DetailsBody params={params} incident={incident} />
+        <DetailsBody {...this.props} incident={incident} />
       </React.Fragment>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/incidents/details/suspects.tsx b/src/sentry/static/sentry/app/views/incidents/details/suspects.tsx
index ce7702fe80..6a593462b5 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/suspects.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/suspects.tsx
@@ -1,6 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
+import {RouteComponentProps} from 'react-router/lib/Router';
 
 import {Panel, PanelBody, PanelItem} from 'app/components/panels';
 import {t} from 'app/locale';
@@ -68,7 +69,10 @@ const StyledSuspects = styled(Suspects)<Props>`
   margin-top: ${space(1)};
 `;
 
-export default class SuspectsContainer extends AsyncComponent {
+type SuspectsContainerProps = AsyncComponent['props'] &
+  RouteComponentProps<{incidentId: string; orgId: string}, {}>;
+
+export default class SuspectsContainer extends AsyncComponent<SuspectsContainerProps> {
   getEndpoints(): [string, string][] {
     const {orgId, incidentId} = this.props.params;
 
diff --git a/src/sentry/static/sentry/app/views/integrationInstallation.tsx b/src/sentry/static/sentry/app/views/integrationInstallation.tsx
index ad073278d7..9d81a95b0b 100644
--- a/src/sentry/static/sentry/app/views/integrationInstallation.tsx
+++ b/src/sentry/static/sentry/app/views/integrationInstallation.tsx
@@ -14,7 +14,7 @@ import NarrowLayout from 'app/components/narrowLayout';
 import SelectControl from 'app/components/forms/selectControl';
 import {Organization, IntegrationProvider, Integration} from 'app/types';
 
-type Props = RouteComponentProps<{}, {}> & AsyncView['props'];
+type Props = RouteComponentProps<{providerId: string; installationId: string}, {}>;
 
 type State = AsyncView['state'] & {
   selectedOrg: string | null;
diff --git a/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx b/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx
index 25d66a7409..eb8b727be7 100644
--- a/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx
+++ b/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import {RouteComponentProps} from 'react-router/lib/Router';
 import styled from 'react-emotion';
 import get from 'lodash/get';
 
@@ -21,7 +22,7 @@ import {
   SentryAppInstallation,
 } from 'app/types';
 
-type Props = AsyncView['props'];
+type Props = RouteComponentProps<{sentryAppSlug: string}, {}>;
 
 type State = AsyncView['state'] & {
   selectedOrgSlug: string | null;
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiApplications/details.tsx b/src/sentry/static/sentry/app/views/settings/account/apiApplications/details.tsx
index 0eb5f55d77..9118c728f8 100644
--- a/src/sentry/static/sentry/app/views/settings/account/apiApplications/details.tsx
+++ b/src/sentry/static/sentry/app/views/settings/account/apiApplications/details.tsx
@@ -15,7 +15,7 @@ import TextCopyInput from 'app/views/settings/components/forms/textCopyInput';
 import apiApplication from 'app/data/forms/apiApplication';
 import getDynamicText from 'app/utils/getDynamicText';
 
-type Props = RouteComponentProps<{}, {}> & AsyncView['props'];
+type Props = RouteComponentProps<{appId: string}, {}>;
 type State = {
   app: ApiApplication;
 } & AsyncView['state'];
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiApplications/index.tsx b/src/sentry/static/sentry/app/views/settings/account/apiApplications/index.tsx
index 55ba6cac15..db25817a30 100644
--- a/src/sentry/static/sentry/app/views/settings/account/apiApplications/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/account/apiApplications/index.tsx
@@ -17,7 +17,7 @@ import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader
 
 const ROUTE_PREFIX = '/settings/account/api/';
 
-type Props = RouteComponentProps<{}, {}> & AsyncView['props'];
+type Props = RouteComponentProps<{}, {}>;
 type State = {
   appList: ApiApplication[];
 } & AsyncView['state'];
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
index 52cdc71a4b..9104b80081 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
@@ -7,15 +7,21 @@ import recreateRoute from 'app/utils/recreateRoute';
 
 import RuleForm from './ruleForm';
 
+type RouteParams = {
+  orgId: string;
+  projectId: string;
+  incidentRuleId: string; //TODO(ts): make optional
+};
+
 type Props = {
   organization: Organization;
   project: Project;
-};
+} & RouteComponentProps<RouteParams, {}>;
 
 /**
  * Show metric rules form with an empty rule. Redirects to alerts list after creation.
  */
-class IncidentRulesCreate extends React.Component<RouteComponentProps<{}, {}> & Props> {
+class IncidentRulesCreate extends React.Component<Props> {
   handleSubmitSuccess = () => {
     const {params, routes, router, location} = this.props;
 
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
index b75d59ecf8..7cc1222642 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
@@ -17,17 +17,14 @@ type RouteParams = {
 
 type Props = {
   organization: Organization;
-};
+} & RouteComponentProps<RouteParams, {}>;
 
 type State = {
   rule: IncidentRule;
   actions: Map<string, any>; // This is temp
 } & AsyncView['state'];
 
-class IncidentRulesDetails extends AsyncView<
-  RouteComponentProps<RouteParams, {}> & Props,
-  State
-> {
+class IncidentRulesDetails extends AsyncView<Props, State> {
   getDefaultState() {
     return {
       ...super.getDefaultState(),
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/index.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/index.tsx
index f4301e1a0a..91373c1245 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/index.tsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import styled from 'react-emotion';
+import {RouteComponentProps} from 'react-router/lib/Router';
 
 import AsyncView from 'app/views/asyncView';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
@@ -16,7 +17,7 @@ import {SentryApp} from 'app/types';
 
 import RequestLog from './requestLog';
 
-type Props = AsyncView['props'];
+type Props = RouteComponentProps<{appSlug: string; orgId: string}, {}>;
 
 type State = AsyncView['state'] & {
   stats: {
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
index 343c79034c..3ff0eb9081 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
@@ -4,6 +4,7 @@ import {Observer} from 'mobx-react';
 import omit from 'lodash/omit';
 import get from 'lodash/get';
 import scrollToElement from 'scroll-to-element';
+import {RouteComponentProps} from 'react-router/lib/Router';
 
 import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
 import {Panel, PanelItem, PanelBody, PanelHeader} from 'app/components/panels';
@@ -111,11 +112,7 @@ class SentryAppFormModel extends FormModel {
   }
 }
 
-type Props = AsyncView['props'] & {
-  route: {
-    path: string;
-  };
-};
+type Props = RouteComponentProps<{orgId: string; appSlug?: string}, {}>;
 
 type State = AsyncView['state'] & {
   app: SentryApp | null;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx b/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx
index 7fe3e15017..941543ea7a 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx
@@ -20,10 +20,9 @@ type RouteParams = {
   orgId: string;
   integrationId: string;
 };
-type Props = RouteComponentProps<RouteParams, {}> &
-  AsyncView['props'] & {
-    organization: Organization;
-  };
+type Props = RouteComponentProps<RouteParams, {}> & {
+  organization: Organization;
+};
 type State = AsyncView['state'] & {
   config: {providers: IntegrationProvider[]};
   integration: Integration;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.tsx
index d4697e1140..3600c57e5c 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.tsx
@@ -46,8 +46,7 @@ type RouteParams = {
 
 type Props = {
   organization: Organization;
-} & AsyncView['props'] &
-  RouteComponentProps<RouteParams, {}>;
+} & RouteComponentProps<RouteParams, {}>;
 
 type State = {
   roleList: Member['roles'];
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersList.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersList.tsx
index 540877a7fb..f1c879a782 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersList.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersList.tsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import styled, {css} from 'react-emotion';
+import {RouteComponentProps} from 'react-router/lib/Router';
 
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
@@ -23,9 +24,9 @@ import theme from 'app/utils/theme';
 import OrganizationMemberRow from './organizationMemberRow';
 import MembersFilter from './components/membersFilter';
 
-type Props = AsyncView['props'] & {
+type Props = {
   organization: Organization;
-};
+} & RouteComponentProps<{orgId: string}, {}>;
 
 type State = AsyncView['state'] & {
   member: Member & {roles: MemberRole[]};
@@ -139,7 +140,7 @@ class OrganizationMembersList extends AsyncView<Props, State> {
   };
 
   renderBody() {
-    const {params, router, organization} = this.props;
+    const {params, organization, routes} = this.props;
     const {membersPageLinks, members, member: currentMember} = this.state;
     const {name: orgName, access} = organization;
 
@@ -205,7 +206,7 @@ class OrganizationMembersList extends AsyncView<Props, State> {
             {members.map(member => {
               return (
                 <OrganizationMemberRow
-                  routes={router.routes}
+                  routes={routes}
                   params={params}
                   key={member.id}
                   member={member}
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx
index d8ed196302..d90188d49d 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import styled from 'react-emotion';
+import {RouteComponentProps} from 'react-router/lib/Router';
 
 import {openInviteMembersModal} from 'app/actionCreators/modal';
 import {Organization, Member} from 'app/types';
@@ -17,10 +18,10 @@ import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader
 import space from 'app/styles/space';
 import withOrganization from 'app/utils/withOrganization';
 
-type Props = AsyncView['props'] & {
+type Props = {
   children?: any;
   organization: Organization;
-};
+} & RouteComponentProps<{orgId: string}, {}>;
 
 type State = AsyncView['state'] & {
   inviteRequests: Member[];
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx
index 526497776a..7d8d8cb0ae 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx
@@ -1,6 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import * as ReactRouter from 'react-router';
+import {RouteComponentProps} from 'react-router/lib/Router';
 
 import {MEMBER_ROLES} from 'app/constants';
 import {AccessRequest, Member, Organization, Team} from 'app/types';
@@ -17,8 +17,6 @@ import InviteRequestRow from './inviteRequestRow';
 import OrganizationAccessRequests from './organizationAccessRequests';
 
 type Props = {
-  params: any;
-  router: ReactRouter.InjectedRouter;
   organization: Organization;
   requestList: AccessRequest[];
   inviteRequests: Member[];
@@ -27,7 +25,7 @@ type Props = {
   onRemoveInviteRequest: (id: string) => void;
   onRemoveAccessRequest: (id: string) => void;
   showInviteRequests: boolean;
-};
+} & RouteComponentProps<{orgId: string}, {}>;
 
 type State = AsyncView['state'] & {
   inviteRequestBusy: {[key: string]: boolean};
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/index.tsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/index.tsx
index 54fc468a59..e72cbbdd73 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/index.tsx
@@ -17,8 +17,7 @@ type Props = RouteComponentProps<
     projectId: string;
   },
   {}
-> &
-  AsyncView['props'];
+>;
 
 type State = {
   data: ProjectKey;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/index.tsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/index.tsx
index 3b4b4f22c1..8fd2a0efd8 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/index.tsx
@@ -28,8 +28,7 @@ import KeyRow from './keyRow';
 type Props = {
   organization: Organization;
   project: Project;
-} & RouteComponentProps<{orgId: string; projectId: string}, {}> &
-  AsyncView['props'];
+} & RouteComponentProps<{orgId: string; projectId: string}, {}>;
 
 type State = {
   keyList: ProjectKey[];
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.tsx
index 71f62117f4..c3e32190ca 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.tsx
@@ -1,10 +1,8 @@
-import {Params} from 'react-router/lib/Router';
-import {PlainRoute} from 'react-router/lib/Route';
 import PropTypes from 'prop-types';
 import React from 'react';
+import {RouteComponentProps} from 'react-router/lib/Router';
 
 import {IssueAlertRule} from 'app/types/alerts';
-import {Location} from 'history';
 import {Panel} from 'app/components/panels';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
@@ -14,20 +12,12 @@ import RuleRow from 'app/views/settings/projectAlerts/ruleRow';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import SentryTypes from 'app/sentryTypes';
 
-type Props = {
-  params: Params;
-  location: Location;
-  routes: PlainRoute[];
-};
-
+type Props = RouteComponentProps<{orgId: string; projectId: string}, {}>;
 type State = {
   ruleList: IssueAlertRule[];
-};
+} & AsyncView['state'];
 
-class ProjectAlertRules extends AsyncView<
-  Props & AsyncView['props'],
-  State & AsyncView['state']
-> {
+class ProjectAlertRules extends AsyncView<Props, State> {
   static propTypes = {
     routes: PropTypes.array.isRequired,
   };
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRulesNew.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRulesNew.tsx
index 2f2793775d..0a561e7df3 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRulesNew.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRulesNew.tsx
@@ -21,8 +21,7 @@ type Props = {organization: Organization} & RouteComponentProps<
     projectId: string;
   },
   {}
-> &
-  AsyncView['props'];
+>;
 
 type State = {
   rules: Array<
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleDetailsNew/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleDetailsNew/index.tsx
index c937d9a298..c6942edea5 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleDetailsNew/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleDetailsNew/index.tsx
@@ -16,11 +16,17 @@ import RadioGroup from 'app/views/settings/components/forms/controls/radioGroup'
 import withOrganization from 'app/utils/withOrganization';
 import withProject from 'app/utils/withProject';
 
+type RouteParams = {
+  orgId: string;
+  projectId: string;
+  incidentRuleId: string;
+  ruleId: string; //TODO(ts): Make ruleId optional
+};
+
 type Props = {
   organization: Organization;
   project: Project;
-} & RouteComponentProps<{organizationId: string; projectId: string}, {}> &
-  AsyncView['props'];
+} & RouteComponentProps<RouteParams, {}>;
 
 type State = {
   alertType: string | null;
@@ -32,8 +38,7 @@ type State = {
 
 class RuleDetails extends AsyncView<Props, State> {
   getDefaultState() {
-    const {router} = this.props;
-    const {pathname} = router.location;
+    const {pathname} = this.props.location;
 
     return {
       ...super.getDefaultState(),
