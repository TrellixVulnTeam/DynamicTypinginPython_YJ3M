commit 9eb46f9624d034775f5cf5a34f3ca7fe9d235af4
Author: evanh <evanh@users.noreply.github.com>
Date:   Thu May 14 13:44:33 2020 -0400

    feat(performance) Add the user misery score bar component (#18743)
    
    Change user misery to use the score bar component on the performance page.

diff --git a/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx b/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx
index b85ee98060..bf0ae58f01 100644
--- a/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx
@@ -5,14 +5,17 @@ import partial from 'lodash/partial';
 import {Organization} from 'app/types';
 import {t} from 'app/locale';
 import Count from 'app/components/count';
+import Duration from 'app/components/duration';
 import ProjectBadge from 'app/components/idBadge/projectBadge';
+import ScoreBar from 'app/components/scoreBar';
+import Tooltip from 'app/components/tooltip';
 import UserBadge from 'app/components/idBadge/userBadge';
+import Version from 'app/components/version';
 import getDynamicText from 'app/utils/getDynamicText';
-import Duration from 'app/components/duration';
 import {formatFloat, formatPercentage} from 'app/utils/formatters';
-import Version from 'app/components/version';
 import {getAggregateAlias} from 'app/utils/discover/fields';
 import Projects from 'app/utils/projects';
+import theme from 'app/utils/theme';
 
 import {
   Container,
@@ -258,6 +261,53 @@ const SPECIAL_FIELDS: SpecialFields = {
   },
 };
 
+type SpecialFunctions = {
+  user_misery: SpecialField;
+};
+
+/**
+ * "Special functions" are functions whose values either do not map 1:1 to a single column,
+ * or they require custom UI formatting that can't be handled by the datatype formatters.
+ */
+const SPECIAL_FUNCTIONS: SpecialFunctions = {
+  user_misery: {
+    sortField: null,
+    renderFunc: data => {
+      const uniqueUsers = data.count_unique_user;
+      let userMiseryField;
+      for (const field in data) {
+        if (field.startsWith('user_misery')) {
+          userMiseryField = field;
+        }
+      }
+      if (!userMiseryField) {
+        return <NumberContainer>{emptyValue}</NumberContainer>;
+      }
+
+      const userMisery = data[userMiseryField];
+
+      if (!uniqueUsers && uniqueUsers !== 0) {
+        return (
+          <NumberContainer>
+            {typeof userMisery === 'number' ? formatFloat(userMisery, 4) : emptyValue}
+          </NumberContainer>
+        );
+      }
+
+      const palette = new Array(10).fill(theme.purpleDarkest);
+      const score = Math.floor((userMisery / Math.max(uniqueUsers, 1)) * palette.length);
+      const miseryLimit = parseInt(userMiseryField.split('_').pop(), 10);
+      const title = `${userMisery} out of ${uniqueUsers} unique users waited more than ${4 *
+        miseryLimit}ms`;
+      return (
+        <Tooltip title={title} disabled={false}>
+          <ScoreBar size={20} score={score} palette={palette} />
+        </Tooltip>
+      );
+    },
+  },
+};
+
 /**
  * Get the sort field name for a given field if it is special or fallback
  * to the generic type formatter.
@@ -301,6 +351,12 @@ export function getFieldRenderer(
   const fieldName = getAggregateAlias(field);
   const fieldType = meta[fieldName];
 
+  for (const alias in SPECIAL_FUNCTIONS) {
+    if (fieldName.startsWith(alias)) {
+      return SPECIAL_FUNCTIONS[alias].renderFunc;
+    }
+  }
+
   if (FIELD_FORMATTERS.hasOwnProperty(fieldType)) {
     return partial(FIELD_FORMATTERS[fieldType].renderFunc, fieldName);
   }
diff --git a/src/sentry/static/sentry/app/views/performance/data.tsx b/src/sentry/static/sentry/app/views/performance/data.tsx
index 7163f166b5..374ad1c1f1 100644
--- a/src/sentry/static/sentry/app/views/performance/data.tsx
+++ b/src/sentry/static/sentry/app/views/performance/data.tsx
@@ -21,8 +21,8 @@ export const PERFORMANCE_EVENT_VIEW: Readonly<NewQuery> = {
     'p95()',
     'error_rate()',
     'apdex(300)',
-    'user_misery(300)',
     'count_unique(user)',
+    'user_misery(300)',
   ],
   version: 2,
 };
