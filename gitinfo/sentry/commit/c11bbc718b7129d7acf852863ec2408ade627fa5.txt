commit c11bbc718b7129d7acf852863ec2408ade627fa5
Author: David Cramer <dcramer@gmail.com>
Date:   Mon May 8 12:18:47 2017 -0700

    Remove configuration

diff --git a/src/sentry/static/sentry/app/views/projectDataForwarding.jsx b/src/sentry/static/sentry/app/views/projectDataForwarding.jsx
index 8243cf5cbc..b8796ca9ac 100644
--- a/src/sentry/static/sentry/app/views/projectDataForwarding.jsx
+++ b/src/sentry/static/sentry/app/views/projectDataForwarding.jsx
@@ -1,79 +1,12 @@
 import React from 'react';
 
 import ApiMixin from '../mixins/apiMixin';
-import {BooleanField} from '../components/forms';
-import IndicatorStore from '../stores/indicatorStore';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import PluginList from '../components/pluginList';
 import ProjectState from '../mixins/projectState';
 import {t} from '../locale';
 
-const Settings = React.createClass({
-  propTypes: {
-    initialData: React.PropTypes.object,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      formData: Object.assign({}, this.props.initialData),
-      errors: {},
-    };
-  },
-
-  onFieldChange(name, value) {
-    let {orgId, projectId} = this.props.params;
-    let prevValue = this.state.formData[name];
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-    this.api.request(`/projects/${orgId}/${projectId}/`, {
-      method: 'PUT',
-      data: {[name]: value},
-      success: data => {
-        IndicatorStore.remove(loadingIndicator);
-        this.setState({formData: {
-          ...this.state.formData,
-          [name]: value,
-        }});
-      },
-      error: error => {
-        IndicatorStore.remove(loadingIndicator);
-        IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
-        this.setState({formData: {
-          ...this.state.formData,
-          [name]: prevValue,
-        }});
-      },
-    });
-  },
-
-  render() {
-    let {formData} = this.state;
-    return (
-      <div className="box">
-        <div className="box-header">
-          <h3>{t('Settings')}</h3>
-        </div>
-
-        <div className="box-content with-padding">
-          <form className="form-stacked">
-            <BooleanField
-              key="newIssues"
-              name="newIssues"
-              label={t('New Issues')}
-              value={formData.newIssues}
-              required={false}
-              onChange={this.onFieldChange.bind(this, 'newIssues')}
-              help="Send an event when an issue is first seen."
-            />
-          </form>
-        </div>
-      </div>
-    );
-  }
-});
-
 export default React.createClass({
   mixins: [ApiMixin, ProjectState],
 
@@ -96,7 +29,7 @@ export default React.createClass({
         this.setState({
           error: false,
           loading: false,
-          pluginList: data.filter(p => p.type === 'data-forwarding'),
+          pluginList: data.filter(p => p.type === 'data-forwarding')
         });
       },
       error: () => {
@@ -109,32 +42,32 @@ export default React.createClass({
   },
 
   onEnablePlugin(plugin) {
-    this.setState({pluginList: this.state.pluginList.map(p => {
-      if (p.id !== plugin.id)
-        return p;
-      return {
-        ...plugin,
-        enabled: true,
-      };
-    })});
+    this.setState({
+      pluginList: this.state.pluginList.map(p => {
+        if (p.id !== plugin.id) return p;
+        return {
+          ...plugin,
+          enabled: true
+        };
+      })
+    });
   },
 
   onDisablePlugin(plugin) {
-    this.setState({pluginList: this.state.pluginList.map(p => {
-      if (p.id !== plugin.id)
-        return p;
-      return {
-        ...plugin,
-        enabled: false,
-      };
-    })});
+    this.setState({
+      pluginList: this.state.pluginList.map(p => {
+        if (p.id !== plugin.id) return p;
+        return {
+          ...plugin,
+          enabled: false
+        };
+      })
+    });
   },
 
   renderBody() {
-    if (this.state.loading)
-      return this.renderLoading();
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) return this.renderLoading();
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
     let organization = this.getOrganization();
     let project = this.getProject();
@@ -145,7 +78,8 @@ export default React.createClass({
         project={project}
         pluginList={pluginList}
         onEnablePlugin={this.onEnablePlugin}
-        onDisablePlugin={this.onDisablePlugin} />
+        onDisablePlugin={this.onDisablePlugin}
+      />
     );
   },
 
@@ -170,12 +104,24 @@ export default React.createClass({
     return (
       <div>
         <h1>{t('Data Forwarding')}</h1>
-        <p>Enabling Data Forwarding to send processed events to another provider based on the settings configured.</p>
-
-        <Settings params={this.props.params} initialData={{
-
-        }} />
-
+        <div className="panel panel-default">
+          <div className="panel-body p-b-0">
+            <p>
+              {
+                "Enable Data Forwarding to send processed events to your favorite business intelligence tools. The exact payload and types of data depend on the integration you're using."
+              }
+            </p>
+            <p>
+              <small>
+                Note: Sentry will forward
+                {' '}
+                <strong>all applicable events</strong>
+                {' '}
+                to the given provider, which in some situations may be a much more significant volume of data.
+              </small>
+            </p>
+          </div>
+        </div>
         {this.renderBody()}
       </div>
     );
