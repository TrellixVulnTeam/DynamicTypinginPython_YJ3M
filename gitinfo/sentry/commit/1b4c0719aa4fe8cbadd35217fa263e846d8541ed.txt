commit 1b4c0719aa4fe8cbadd35217fa263e846d8541ed
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Tue Oct 8 11:40:46 2019 -0400

    fix(discover2): Project and environment tags does not get reflected in the global selection header (#14896)

diff --git a/src/sentry/static/sentry/app/components/events/eventTags.tsx b/src/sentry/static/sentry/app/components/events/eventTags.tsx
index 49be985ebe..5ca45c248f 100644
--- a/src/sentry/static/sentry/app/components/events/eventTags.tsx
+++ b/src/sentry/static/sentry/app/components/events/eventTags.tsx
@@ -8,13 +8,12 @@ import {Event, EventTag, Group} from 'app/types';
 
 import EventDataSection from 'app/components/events/eventDataSection';
 import DeviceName from 'app/components/deviceName';
-import {isUrl} from 'app/utils';
+import {isUrl, generateQueryWithTag} from 'app/utils';
 import {t} from 'app/locale';
 import Pills from 'app/components/pills';
 import Pill from 'app/components/pill';
 import VersionHoverCard from 'app/components/versionHoverCard';
 import InlineSvg from 'app/components/inlineSvg';
-import {appendTagCondition} from 'app/utils/queryString';
 
 type EventTagsProps = {
   group: Group;
@@ -33,18 +32,7 @@ class EventTags extends React.Component<EventTagsProps> {
 
   renderPill(tag: EventTag, streamPath: string, releasesPath: string) {
     const {orgId, projectId, location} = this.props;
-    const query = {...location.query};
-
-    switch (tag.key) {
-      case 'environment':
-        query.environment = tag.value;
-        break;
-      case 'project':
-        query.project = tag.value;
-        break;
-      default:
-        query.query = appendTagCondition(query.query, tag.key, tag.value);
-    }
+    const query = generateQueryWithTag(location.query, tag);
 
     const locationSearch = `?${queryString.stringify(query)}`;
 
diff --git a/src/sentry/static/sentry/app/utils.tsx b/src/sentry/static/sentry/app/utils.tsx
index 41fd7973ec..d3d0c7303d 100644
--- a/src/sentry/static/sentry/app/utils.tsx
+++ b/src/sentry/static/sentry/app/utils.tsx
@@ -1,5 +1,8 @@
 import _ from 'lodash';
+import {Query} from 'history';
+
 import {Project} from 'app/types/index';
+import {appendTagCondition} from 'app/utils/queryString';
 
 function arrayIsEqual(arr?: any[], other?: any[], deep?: boolean): boolean {
   // if the other array is a falsy value, return
@@ -246,3 +249,25 @@ export type OmitHtmlDivProps<P extends object> = Omit<
   keyof P
 > &
   P;
+
+export function generateQueryWithTag(
+  prevQuery: Query,
+  tag: {key: string; value: string}
+): Query {
+  const query = {...prevQuery};
+
+  // some tags are dedicated query strings since other parts of the app consumes this,
+  // for example, the global selection header.
+  switch (tag.key) {
+    case 'environment':
+      query.environment = tag.value;
+      break;
+    case 'project':
+      query.project = tag.value;
+      break;
+    default:
+      query.query = appendTagCondition(query.query, tag.key, tag.value);
+  }
+
+  return query;
+}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index a8ff943783..8cb31eeeb9 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -4,7 +4,7 @@ import {browserHistory} from 'react-router';
 
 import {Client} from 'app/api';
 import {URL_PARAM} from 'app/constants/globalSelectionHeader';
-import {appendTagCondition} from 'app/utils/queryString';
+import {generateQueryWithTag} from 'app/utils';
 
 import {
   AGGREGATE_ALIASES,
@@ -64,8 +64,7 @@ export function getEventTagSearchUrl(
   tagValue: string,
   location: Location
 ) {
-  const query = {...location.query};
-  query.query = appendTagCondition(query.query, tagKey, tagValue);
+  const query = generateQueryWithTag(location.query, {key: tagKey, value: tagValue});
 
   // Remove the event slug so the user sees new search results.
   delete query.eventSlug;
diff --git a/tests/js/spec/views/eventsV2/tags.spec.jsx b/tests/js/spec/views/eventsV2/tags.spec.jsx
index 71fabc566b..4ec9eb10a6 100644
--- a/tests/js/spec/views/eventsV2/tags.spec.jsx
+++ b/tests/js/spec/views/eventsV2/tags.spec.jsx
@@ -4,6 +4,7 @@ import {mount} from 'enzyme';
 import {Client} from 'app/api';
 import {Tags} from 'app/views/eventsV2/tags';
 import EventView from 'app/views/eventsV2/eventView';
+import {initializeOrg} from 'app-test/helpers/initializeOrg';
 
 describe('Tags', function() {
   const org = TestStubs.Organization();
@@ -86,4 +87,61 @@ describe('Tags', function() {
     // component has loaded
     expect(wrapper.find('StyledPlaceholder')).toHaveLength(0);
   });
+
+  it('environment tag is a dedicated query string', async function() {
+    const api = new Client();
+
+    const view = new EventView({
+      fields: [],
+      sorts: [],
+      tags: ['release', 'environment'],
+      query: 'event.type:csp',
+    });
+
+    const initialData = initializeOrg({
+      organization: org,
+      router: {
+        location: {query: {}},
+      },
+    });
+
+    const wrapper = mount(
+      <Tags
+        eventView={view}
+        api={api}
+        organization={org}
+        selection={{projects: [], environments: [], datetime: {}}}
+        location={initialData.router.location}
+      />,
+      initialData.routerContext
+    );
+
+    // component is in loading state
+    expect(wrapper.find('StyledPlaceholder')).toHaveLength(2);
+
+    await tick();
+    wrapper.update();
+
+    // component has loaded
+    expect(wrapper.find('StyledPlaceholder')).toHaveLength(0);
+
+    const environmentFacetMap = wrapper
+      .find('TagDistributionMeter')
+      .filterWhere(component => {
+        return component.props().title === 'environment';
+      })
+      .first();
+
+    const clickable = environmentFacetMap.find('Segment').first();
+
+    clickable.simulate('click', {button: 0});
+
+    await tick();
+    wrapper.update();
+
+    expect(initialData.router.push).toHaveBeenCalledWith({
+      pathname: undefined,
+      query: {environment: 'abcd123'},
+    });
+  });
 });
