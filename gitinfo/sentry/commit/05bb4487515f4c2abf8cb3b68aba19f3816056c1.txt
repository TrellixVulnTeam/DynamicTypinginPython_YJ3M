commit 05bb4487515f4c2abf8cb3b68aba19f3816056c1
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Apr 14 13:07:02 2015 -0700

    Handle both new user and merge flows

diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index 4c6f6009e7..c46ba7765e 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -259,6 +259,48 @@ class AuthHelper(object):
 
         return auth_identity
 
+    def _handle_new_user(self, identity):
+        auth_provider = self.auth_provider
+        organization = self.organization
+        request = self.request
+
+        user = User.objects.create(
+            username=uuid4().hex,
+            email=identity['email'],
+            first_name=identity.get('name', ''),
+            is_managed=True,
+        )
+
+        auth_identity = AuthIdentity.objects.create(
+            auth_provider=auth_provider,
+            user=user,
+            ident=identity['id'],
+        )
+
+        om = OrganizationMember.objects.create(
+            organization=organization,
+            type=auth_provider.default_role,
+            has_global_access=auth_provider.default_global_access,
+            user=user,
+            flags=getattr(OrganizationMember.flags, 'sso:linked'),
+        )
+
+        default_teams = auth_provider.default_teams.all()
+        for team in default_teams:
+            om.teams.add(team)
+
+        AuditLogEntry.objects.create(
+            organization=organization,
+            actor=user,
+            ip_address=request.META['REMOTE_ADDR'],
+            target_object=om.id,
+            target_user=om.user,
+            event=AuditLogEntryEvent.MEMBER_ADD,
+            data=om.get_audit_log_data(),
+        )
+
+        return auth_identity
+
     @transaction.atomic
     def _finish_login_pipeline(self, identity):
         """
@@ -277,7 +319,11 @@ class AuthHelper(object):
         auth_provider = self.auth_provider
         request = self.request
 
-        if request.POST.get('op') != 'confirm':
+        if request.POST.get('op') == 'confirm' and request.user.is_authenticated():
+            auth_identity = self._handle_attach_identity(identity)
+        elif request.POST.get('op') == 'newuser':
+            auth_identity = self._handle_new_user(identity)
+        else:
             if request.user.is_authenticated():
                 return self.respond('sentry/auth-confirm-link.html', {
                     'identity': identity,
@@ -286,65 +332,6 @@ class AuthHelper(object):
                 'identity': identity,
             })
 
-        try:
-            auth_identity = AuthIdentity.objects.get(
-                auth_provider=auth_provider,
-                ident=identity['id'],
-            )
-        except AuthIdentity.DoesNotExist:
-            if request.user.is_authenticated():
-                user = request.user
-            else:
-                user = User.objects.create(
-                    username=uuid4().hex,
-                    email=identity['email'],
-                    first_name=identity.get('name', ''),
-                    is_managed=True,
-                )
-
-            auth_identity = AuthIdentity.objects.create(
-                auth_provider=auth_provider,
-                user=user,
-                ident=identity['id'],
-            )
-
-            om = OrganizationMember.objects.create(
-                organization=self.organization,
-                type=auth_provider.default_role,
-                has_global_access=auth_provider.default_global_access,
-                user=user,
-                flags=getattr(OrganizationMember.flags, 'sso:linked'),
-            )
-
-            default_teams = auth_provider.default_teams.all()
-            for team in default_teams:
-                om.teams.add(team)
-
-            AuditLogEntry.objects.create(
-                organization=self.organization,
-                actor=user,
-                ip_address=self.request.META['REMOTE_ADDR'],
-                target_object=om.id,
-                target_user=om.user,
-                event=AuditLogEntryEvent.MEMBER_ADD,
-                data=om.get_audit_log_data(),
-            )
-        else:
-            now = timezone.now()
-            auth_identity.update(
-                data=identity['data'],
-                last_verified=now,
-                last_synced=now,
-            )
-
-            om = OrganizationMember.objects.get(
-                user=auth_identity.user,
-                organization=self.organization,
-            )
-            setattr(om.flags, 'sso:invalid', False)
-            setattr(om.flags, 'sso:linked', True)
-            om.save()
-
         user = auth_identity.user
         user.backend = settings.AUTHENTICATION_BACKENDS[0]
 
@@ -427,13 +414,20 @@ class AuthHelper(object):
         if request.user.id != request.session['auth']['uid']:
             return self.error(ERR_UID_MISMATCH)
 
-        if request.POST.get('op') != 'confirm':
+        if request.POST.get('op') == 'confirm':
+            self._handle_attach_identity(identity)
+        elif request.POST.get('op') == 'newuser':
+            auth_identity = self._handle_new_user(identity)
+
+            user = auth_identity.user
+            user.backend = settings.AUTHENTICATION_BACKENDS[0]
+
+            login(self.request, user)
+        else:
             return self.respond('sentry/auth-confirm-link.html', {
                 'identity': identity,
             })
 
-        self._handle_attach_identity(identity)
-
         self.clear_session()
 
         next_uri = reverse('sentry-organization-home', args=[
diff --git a/tests/sentry/web/frontend/test_auth_organization_login.py b/tests/sentry/web/frontend/test_auth_organization_login.py
index f10a6a5d06..4a0e85bdc7 100644
--- a/tests/sentry/web/frontend/test_auth_organization_login.py
+++ b/tests/sentry/web/frontend/test_auth_organization_login.py
@@ -70,7 +70,7 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
         self.assertTemplateUsed(resp, 'sentry/auth-confirm-identity.html')
         assert resp.status_code == 200
 
-        resp = self.client.post(path, {'op': 'confirm'})
+        resp = self.client.post(path, {'op': 'newuser'})
 
         assert resp.status_code == 302
 
@@ -132,3 +132,48 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
 
         assert getattr(member.flags, 'sso:linked')
         assert not getattr(member.flags, 'sso:invalid')
+
+    def test_basic_provider_flow_as_existing_user_new_account(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        team = self.create_team(organization=organization)
+        project = self.create_project(team=team)
+        auth_provider = AuthProvider.objects.create(
+            organization=organization,
+            provider='dummy',
+        )
+        user = self.create_user('bar@example.com')
+
+        path = reverse('sentry-auth-organization', args=[organization.slug])
+
+        self.login_as(user)
+
+        resp = self.client.post(path)
+
+        assert resp.status_code == 200
+        assert self.provider.TEMPLATE in resp.content
+
+        path = reverse('sentry-auth-sso')
+
+        resp = self.client.post(path, {'email': 'foo@example.com'})
+
+        self.assertTemplateUsed(resp, 'sentry/auth-confirm-link.html')
+        assert resp.status_code == 200
+
+        resp = self.client.post(path, {'op': 'newuser'})
+
+        assert resp.status_code == 302
+
+        auth_identity = AuthIdentity.objects.get(
+            auth_provider=auth_provider,
+        )
+
+        assert auth_identity.user != user
+        assert auth_identity.user.email == 'foo@example.com'
+
+        member = OrganizationMember.objects.get(
+            organization=organization,
+            user=auth_identity.user,
+        )
+
+        assert getattr(member.flags, 'sso:linked')
+        assert not getattr(member.flags, 'sso:invalid')
