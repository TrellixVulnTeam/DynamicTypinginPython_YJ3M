commit de1af4e071560e478ec5f507f9ffc21f8ab53915
Author: Ben Vinegar <ben@benv.ca>
Date:   Fri Apr 29 15:45:36 2016 -0700

    Update breadcrumb mocks to use new category icons

diff --git a/bin/load-mocks b/bin/load-mocks
index 7ec31705a0..81205030aa 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -123,65 +123,49 @@ def get_sample_breadcrumbs(prior_event_id=None):
             {
                 "type": "navigation",
                 "timestamp": milliseconds_ago(now, 5200),
+                "category": "location",
                 "data": {
                     "from": "/login/",
                     "to": "/dashboard/",
                 }
             },
             {
-                "type": "message",
+                "type": "log",
                 "timestamp": milliseconds_ago(now, 4000),
-                "data": {
-                    "message": "This is a message breadcrumb",
-                    "level": "info"
-                }
+                "message": "This is an info log message",
             },
             {
-                "type": "message",
+                "type": "log",
                 "timestamp": milliseconds_ago(now, 3300),
-                "data": {
-                    "message": "This is a warning message",
-                    "level": "warning"
-                }
+                "message": "This is a warning log message",
+                "category": "warning"
             },
             {
-                "type": "message",
+                "type": "log",
                 "timestamp": milliseconds_ago(now, 2700),
-                "data": {
-                    "message": "This is an error message",
-                    "level": "error"
-                }
+                "message": "This is an error log message",
+                "category": "error"
             },
             {
-                "type": "http_request",
+                "type": "http",
+                "category": "io",
                 "timestamp": milliseconds_ago(now, 1300),
-                "data": {
-                    "url": "http://example.com/foo",
-                    "status_code": 200,
-                    "method": "POST",
-                    "headers": {
-                        "Referer": "http://example.com",
-                        "Content-Type": "application/json"
-                    }
-                }
+                "message": "POST http://example.com [200]"
             },
             {
                 "type": "query",
+                "category": "io",
                 "timestamp": milliseconds_ago(now, 1200),
-                "data": {
-                    "classifier": u'django.db',
-                    "params": [1],
-                    "duration": 0.002,
-                    "query": u'SELECT "auth_user"."password", "auth_user"."last_login", "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."email", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."is_managed", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = %s'
-                },
+                "message": u'SELECT "auth_user"."password", "auth_user"."last_login", "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."email", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."is_managed", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = %s',
+                "message_args": [1],
+                "duration": 0.002,
+                "classifier": u'django.db'
             },
             {
-                "type": "ui_event",
+                "type": "click",
+                "category": "user",
                 "timestamp": milliseconds_ago(now, 1000),
-                "data": {
-                    "type": "click",
-                    "target": "div > form[name=\"post\"] > button.btn.btn-small[name=\"submit\"]"
-                }
+                "message": "div > form[name=\"post\"] > button.btn.btn-small[name=\"submit\"]"
             }
         ]
     }
@@ -190,8 +174,9 @@ def get_sample_breadcrumbs(prior_event_id=None):
         sample_breadcrumbs["values"].insert(2, {
             "type": "error",
             "timestamp": milliseconds_ago(now, 3000),
+            "message": "TypeError: something broke earlier",
+            "category": "error",
             "data": {
-                "message": "TypeError: something broke earlier",
                 "event_id": prior_event_id
             }
         })
diff --git a/src/sentry/interfaces/breadcrumbs.py b/src/sentry/interfaces/breadcrumbs.py
index 0dbbe86c5e..32d73cd4f3 100644
--- a/src/sentry/interfaces/breadcrumbs.py
+++ b/src/sentry/interfaces/breadcrumbs.py
@@ -174,12 +174,16 @@ class Breadcrumbs(Interface):
             ts = parse_new_timestamp(crumb.get('timestamp'))
             if ts is None:
                 raise InterfaceValidationError('Unable to determine timestamp for crumb')
+
+            # TODO: re-implement breadcrumb validation
             values.append({
                 'type': ty,
                 # We need to store timestamps here as this will go into
                 # the node store which does not support datetime objects.
                 'timestamp': to_timestamp(ts),
-                'data': validate_payload_for_type(crumb.get('data'), ty),
+                'message': crumb.get('message', None),
+                'category': crumb.get('category', 'default'),
+                'data': crumb.get('data', {}),
             })
         return cls(values=values)
 
@@ -194,6 +198,8 @@ class Breadcrumbs(Interface):
             return {
                 'type': x['type'],
                 'timestamp': to_datetime(x['timestamp']),
+                'message': x['message'],
+                'category': x['category'],
                 'data': x['data'],
             }
         return {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/default.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/default.jsx
index b7eeb37528..e96859fa32 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/default.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/default.jsx
@@ -16,6 +16,7 @@ const DefaultCrumbComponent = React.createClass({
 
     let message = crumb.message || crumb.data && crumb.data.message;
 
+    let category = crumb.category || 'default';
     let body = _.chain(crumb.data)
       .map((val, key) => [val, key])
       .filter(([val, key]) => key !== 'message' && key !== 'level' && key !== 'classifier')
@@ -30,20 +31,25 @@ const DefaultCrumbComponent = React.createClass({
       .value();
 
     return (
-      <table className="table key-value">
-        <thead>
-          <tr>
-            <td className="key">{crumb.type}</td>
-            <td>{message && <pre><code>{message}</code></pre>}</td>
-          </tr>
-        </thead>
-        {crumb.data &&
-          <tbody>
-            {body}
-          </tbody>
-        }
-      </table>
-
+      <li className={'crumb crumb-' + category}>
+        <span className="icon-container">
+          <span className="icon"/>
+        </span>
+        <span className="dt">{moment(crumb.timestamp).format('HH:mm:ss')}</span>
+        <table className="table key-value">
+          <thead>
+            <tr>
+              <td className="key">{crumb.type}</td>
+              <td>{message && <pre><code>{message}</code></pre>}</td>
+            </tr>
+          </thead>
+          {crumb.data &&
+            <tbody>
+              {body}
+            </tbody>
+          }
+        </table>
+      </li>
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
index b908c15864..b45bc3b669 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
@@ -72,23 +72,26 @@ const BreadcrumbsInterface = React.createClass({
     // reverse array to get consistent idx between collapsed/expanded state
     // (indexes begin and increment from last breadcrumb)
     return crumbs.reverse().map((item, idx) => {
-      let Component = CRUMB_COMPONENTS[item.type];
+      // let Component = CRUMB_COMPONENTS[item.type];
       let el;
-      if (Component) {
+      // if (Component) {
         // el = <Component data={item.data} />;
         el = <DefaultCrumb crumb={item} />;
-      } else {
-        el = <div className="errors">Missing crumb "{item.type}"</div>;
-      }
-      return (
-        <li key={idx} className={'crumb crumb-' + item.type.replace(/_/g, '-')}>
-          <span className="icon-container">
-            <span className="icon"/>
-          </span>
-          <span className="dt">{moment(item.timestamp).format('HH:mm:ss')}</span>
-          {el}
-        </li>
-      );
+      // }
+      // else {
+      //   el = <div className="errors">Missing crumb "{item.type}"</div>;
+      // }
+      return <DefaultCrumb key={idx} crumb={item} />;
+
+      // (
+      //   <li key={idx} className={'crumb crumb-' + item.type.replace(/_/g, '-')}>
+      //     <span className="icon-container">
+      //       <span className="icon"/>
+      //     </span>
+      //     <span className="dt">{moment(item.timestamp).format('HH:mm:ss')}</span>
+      //     {el}
+      //   </li>
+      // );
     }).reverse(); // un-reverse rendered result
   },
 
@@ -111,10 +114,12 @@ const BreadcrumbsInterface = React.createClass({
     // TODO: what about non-exceptions (e.g. generic messages)?
     let exception = evt.entries.find(entry => entry.type === 'exception');
     if (exception) {
+      let {type, value} = exception.data.values[0];
       // make copy of values array / don't mutate props
       all = all.slice(0).concat([{
         type: 'error',
-        data: exception.data.values[0],
+        category: 'error',
+        message: type + ': ' + value,
         timestamp: evt.dateCreated
       }]);
     }
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 507179c71b..b1976c40a5 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1717,19 +1717,19 @@ ul.crumbs {
 
     }
 
-    &.crumb-navigation {
+    &.crumb-location {
       .icon-container {
-        border-color: @yellow-orange-dark;
+        border-color: @blue-dark;
 
         .icon {
           top: 5px;
-          color: darken(@yellow-orange, 5);
+          color: darken(@blue-dark, 5);
           &:before {content: "\e61d";}
         }
       }
     }
 
-    &.crumb-http-request {
+    &.crumb-io {
       .icon-container {
         border-color: @green-dark;
 
@@ -1743,30 +1743,16 @@ ul.crumbs {
       }
     }
 
-    &.crumb-message {
+    &.crumb-default {
       padding-top: 7px;
       clear: both;
 
-      //& + .crumb-message {
-      //  margin-top: -9px;
-      //  background: #fff;
-      //  min-height: 0;
-      //  padding-top: 0;
-      //  padding-bottom: 6px;
-      //  border-left: 1px solid @trim;
-      //  border-right: 1px solid @trim;
-      //
-      //  .icon-container {
-      //    display: none;
-      //  }
-      //}
-
       .icon-container {
-        border-color: @blue-dark;
+        border-color: @gray-dark;
       }
 
       .icon {
-        color: @blue;
+        color: @gray-dark;
         top: 5px;
 
         &:before {
@@ -1774,50 +1760,13 @@ ul.crumbs {
         }
       }
 
-      span.level {
-        font-size: 11px;
-        font-weight: bold;
-        text-transform: capitalize;
-        background: @white-darkest;
-        color: @gray-dark;
-        border-radius: 2px;
-        display: inline-block;
-        padding: 3px 0;
-        margin-right: 6px;
-        line-height: 1;
-        position: relative;
-        top: -2px;
-        width: 54px;
-        text-align: center;
-      }
-
-      span.level-info {
-        background: @blue;
-        color: @white;
-      }
-
-      span.level-error {
-        background: @orange;
-        color: @white;
-      }
-
-      span.level-warning {
-        background: @yellow-orange;
-        color: @white;
-      }
-
-      span.level-fatal {
-        background: @red;
-        color: @white;
-      }
-
       span.logger {
         padding-left: 8px;
         color: @gray;
       }
     }
 
-    &.crumb-ui-event {
+    &.crumb-user {
       .icon-container {
         border-color: @purple-dark;
       }
@@ -1831,6 +1780,21 @@ ul.crumbs {
       }
     }
 
+    &.crumb-warning {
+
+      .icon-container {
+        border-color: @yellow-orange-dark;
+
+        .icon {
+          top: 5px;
+          color: darken(@yellow-orange, 5);
+          &:before {
+            content: "\e906";
+          }
+        }
+      }
+    }
+
     &.crumb-error {
       background: #fffcfb;
       border: 1px solid #E7C0BC;
