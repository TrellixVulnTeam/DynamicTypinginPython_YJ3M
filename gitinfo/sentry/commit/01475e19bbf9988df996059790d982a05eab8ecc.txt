commit 01475e19bbf9988df996059790d982a05eab8ecc
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Thu Dec 6 10:52:08 2018 -0800

    ref(search): Add support for multiple projects to search backends (#10923)

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index c60192670f..1adf2f2c07 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -242,7 +242,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
 
     def _build_query_params_from_request(self, request, project):
         query_kwargs = {
-            'project': project,
+            'projects': [project],
             'sort_by': request.GET.get('sort', DEFAULT_SORT_OPTION),
         }
 
diff --git a/src/sentry/search/base.py b/src/sentry/search/base.py
index 28b734b410..2a25a1b1bc 100644
--- a/src/sentry/search/base.py
+++ b/src/sentry/search/base.py
@@ -21,6 +21,6 @@ class SearchBackend(Service):
     def __init__(self, **options):
         pass
 
-    def query(self, project, tags=None, environment=None, sort_by='date', limit=100,
+    def query(self, projects, tags=None, environment=None, sort_by='date', limit=100,
               cursor=None, count_hits=False, paginator_options=None, **parameters):
         raise NotImplementedError
diff --git a/src/sentry/search/django/backend.py b/src/sentry/search/django/backend.py
index 44681ce2d1..8d9ab3359a 100644
--- a/src/sentry/search/django/backend.py
+++ b/src/sentry/search/django/backend.py
@@ -164,7 +164,7 @@ def get_sort_clause(sort_by):
         return SORT_CLAUSES[sort_by]
 
 
-def assigned_to_filter(queryset, actor, project):
+def assigned_to_filter(queryset, actor, projects):
     from sentry.models import OrganizationMember, OrganizationMemberTeam, Team
 
     if isinstance(actor, Team):
@@ -174,24 +174,24 @@ def assigned_to_filter(queryset, actor, project):
         id__in=OrganizationMemberTeam.objects.filter(
             organizationmember__in=OrganizationMember.objects.filter(
                 user=actor,
-                organization_id=project.organization_id,
+                organization_id=projects[0].organization_id,
             ),
             is_active=True,
         ).values('team')
     )
 
     return queryset.filter(
-        Q(assignee_set__user=actor, assignee_set__project=project) |
+        Q(assignee_set__user=actor, assignee_set__project__in=projects) |
         Q(assignee_set__team__in=teams)
     )
 
 
-def get_latest_release(project, environment):
+def get_latest_release(projects, environment):
     from sentry.models import Release
 
     release_qs = Release.objects.filter(
-        organization_id=project.organization_id,
-        projects=project,
+        organization_id=projects[0].organization_id,
+        projects__in=projects,
     )
 
     if environment is not None:
@@ -207,11 +207,15 @@ def get_latest_release(project, environment):
 
 
 class DjangoSearchBackend(SearchBackend):
-    def query(self, project, tags=None, environment=None, sort_by='date', limit=100,
+    def query(self, projects, tags=None, environment=None, sort_by='date', limit=100,
               cursor=None, count_hits=False, paginator_options=None, **parameters):
 
         from sentry.models import Group, GroupAssignee, GroupStatus, GroupSubscription, Release
 
+        # ensure projects are from same org
+        if len({p.organization_id for p in projects}) != 1:
+            raise RuntimeError('Cross organization search not supported')
+
         if paginator_options is None:
             paginator_options = {}
 
@@ -220,10 +224,10 @@ class DjangoSearchBackend(SearchBackend):
 
         try:
             if tags.get('sentry:release') == 'latest':
-                tags['sentry:release'] = get_latest_release(project, environment)
+                tags['sentry:release'] = get_latest_release(projects, environment)
 
             if parameters.get('first_release') == 'latest':
-                parameters['first_release'] = get_latest_release(project, environment)
+                parameters['first_release'] = get_latest_release(projects, environment)
         except Release.DoesNotExist:
             # no matches could possibly be found from this point on
             return Paginator(Group.objects.none()).get_result()
@@ -239,24 +243,24 @@ class DjangoSearchBackend(SearchBackend):
             ),
             'bookmarked_by': CallbackCondition(
                 lambda queryset, user: queryset.filter(
-                    bookmark_set__project=project,
+                    bookmark_set__project__in=projects,
                     bookmark_set__user=user,
                 ),
             ),
             'assigned_to': CallbackCondition(
-                functools.partial(assigned_to_filter, project=project),
+                functools.partial(assigned_to_filter, projects=projects),
             ),
             'unassigned': CallbackCondition(
                 lambda queryset, unassigned: (queryset.exclude if unassigned else queryset.filter)(
                     id__in=GroupAssignee.objects.filter(
-                        project_id=project.id,
+                        project_id__in=[p.id for p in projects],
                     ).values_list('group_id', flat=True),
                 ),
             ),
             'subscribed_by': CallbackCondition(
                 lambda queryset, user: queryset.filter(
                     id__in=GroupSubscription.objects.filter(
-                        project=project,
+                        project__in=projects,
                         user=user,
                         is_active=True,
                     ).values_list('group'),
@@ -265,7 +269,7 @@ class DjangoSearchBackend(SearchBackend):
             'active_at_from': ScalarCondition('active_at', 'gt'),
             'active_at_to': ScalarCondition('active_at', 'lt'),
         }).build(
-            Group.objects.filter(project=project).exclude(status__in=[
+            Group.objects.filter(project__in=projects).exclude(status__in=[
                 GroupStatus.PENDING_DELETION,
                 GroupStatus.DELETION_IN_PROGRESS,
                 GroupStatus.PENDING_MERGE,
@@ -274,7 +278,7 @@ class DjangoSearchBackend(SearchBackend):
         )
 
         # filter out groups which are beyond the retention period
-        retention = quotas.get_event_retention(organization=project.organization)
+        retention = quotas.get_event_retention(organization=projects[0].organization)
         if retention:
             retention_window_start = timezone.now() - timedelta(days=retention)
         else:
@@ -289,15 +293,21 @@ class DjangoSearchBackend(SearchBackend):
         # This is a punt because the SnubaSearchBackend (a subclass) shares so much that it
         # seemed better to handle all the shared initialization and then handoff to the
         # actual backend.
-        return self._query(project, retention_window_start, group_queryset, tags,
+        return self._query(projects, retention_window_start, group_queryset, tags,
                            environment, sort_by, limit, cursor, count_hits,
                            paginator_options, **parameters)
 
-    def _query(self, project, retention_window_start, group_queryset, tags, environment,
+    def _query(self, projects, retention_window_start, group_queryset, tags, environment,
                sort_by, limit, cursor, count_hits, paginator_options, **parameters):
 
         from sentry.models import (Group, Environment, Event, GroupEnvironment, Release)
 
+        # this backend only supports search within one project
+        if len(projects) != 1:
+            raise NotImplementedError
+
+        project = projects[0]
+
         if environment is not None:
             if 'environment' in tags:
                 environment_name = tags.pop('environment')
diff --git a/src/sentry/search/snuba/backend.py b/src/sentry/search/snuba/backend.py
index 3ed7b3d9df..55ac83744b 100644
--- a/src/sentry/search/snuba/backend.py
+++ b/src/sentry/search/snuba/backend.py
@@ -127,7 +127,13 @@ class ScalarCondition(Condition):
 
 
 class SnubaSearchBackend(ds.DjangoSearchBackend):
-    def _query(self, project, retention_window_start, group_queryset, tags, environment,
+    def _get_project_count_cache_key(self, project_id):
+        return 'snuba.search:project.group.count:%s' % project_id
+
+    def _get_project_id_from_key(self, key):
+        return int(key.split(':')[2])
+
+    def _query(self, projects, retention_window_start, group_queryset, tags, environment,
                sort_by, limit, cursor, count_hits, paginator_options, **parameters):
 
         # TODO: Product decision: we currently search Group.message to handle
@@ -152,7 +158,7 @@ class SnubaSearchBackend(ds.DjangoSearchBackend):
                                 ds.get_sql_column(Release, 'version'),
                             ),
                         ],
-                        params=[project.organization_id, version],
+                        params=[projects[0].organization_id, version],
                         tables=[Release._meta.db_table],
                     ),
                 ),
@@ -176,7 +182,7 @@ class SnubaSearchBackend(ds.DjangoSearchBackend):
             group_queryset = ds.QuerySetBuilder({
                 'first_release': ds.CallbackCondition(
                     lambda queryset, version: queryset.filter(
-                        first_release__organization_id=project.organization_id,
+                        first_release__organization_id=projects[0].organization_id,
                         first_release__version=version,
                     ),
                 ),
@@ -248,10 +254,17 @@ class SnubaSearchBackend(ds.DjangoSearchBackend):
         # and the result groups are then post-filtered via queries to the Sentry DB
         optimizer_enabled = options.get('snuba.search.pre-snuba-candidates-optimizer')
         if optimizer_enabled:
-            key = 'snuba.search:project.group.count:%s' % project.id
-            project_group_count = cache.get(key)
-            if not project_group_count:
-                project_group_count = snuba.query(
+            missed_projects = []
+            keys = [self._get_project_count_cache_key(p.id) for p in projects]
+
+            counts_by_projects = {
+                self._get_project_id_from_key(key): count for key, count in cache.get_many(keys).items()
+            }
+
+            missed_projects = {p.id for p in projects} - set(counts_by_projects.keys())
+
+            if missed_projects:
+                missing_counts = snuba.query(
                     start=max(
                         filter(None, [
                             retention_window_start,
@@ -259,17 +272,20 @@ class SnubaSearchBackend(ds.DjangoSearchBackend):
                         ])
                     ),
                     end=now,
-                    groupby=[],
+                    groupby=['project_id'],
                     filter_keys={
-                        'project_id': [project.id],
+                        'project_id': list(missed_projects),
                     },
                     aggregations=[['uniq', 'group_id', 'group_count']],
                     referrer='search',
                 )
 
-                cache.set(key, project_group_count, options.get(
-                    'snuba.search.project-group-count-cache-time')
-                )
+                cache.set_many({
+                    self._get_project_count_cache_key(project_id): count
+                    for project_id, count in missing_counts.items()
+                }, options.get('snuba.search.project-group-count-cache-time'))
+
+                counts_by_projects.update(missing_counts)
 
             min_candidates = options.get('snuba.search.min-pre-snuba-candidates')
             max_candidates = options.get('snuba.search.max-pre-snuba-candidates')
@@ -279,7 +295,7 @@ class SnubaSearchBackend(ds.DjangoSearchBackend):
                 min_candidates,
                 min(
                     max_candidates,
-                    project_group_count * candidates_percentage
+                    sum(counts_by_projects.values()) * candidates_percentage
                 )
             )
         else:
@@ -343,7 +359,7 @@ class SnubaSearchBackend(ds.DjangoSearchBackend):
             snuba_groups, more_results = snuba_search(
                 start=start,
                 end=end,
-                project_id=project.id,
+                project_ids=[p.id for p in projects],
                 environment_id=environment and environment.id,
                 tags=tags,
                 sort_field=sort_field,
@@ -425,7 +441,7 @@ class SnubaSearchBackend(ds.DjangoSearchBackend):
         return paginator_results
 
 
-def snuba_search(start, end, project_id, environment_id, tags,
+def snuba_search(start, end, project_ids, environment_id, tags,
                  sort_field, cursor, candidate_ids, limit, offset, **parameters):
     """
     This function doesn't strictly benefit from or require being pulled out of the main
@@ -440,7 +456,7 @@ def snuba_search(start, end, project_id, environment_id, tags,
     from sentry.search.base import ANY
 
     filters = {
-        'project_id': [project_id],
+        'project_id': project_ids,
     }
 
     if environment_id is not None:
diff --git a/tests/sentry/search/django/tests.py b/tests/sentry/search/django/tests.py
index e21c779f19..878aaeccf0 100644
--- a/tests/sentry/search/django/tests.py
+++ b/tests/sentry/search/django/tests.py
@@ -163,42 +163,42 @@ class DjangoSearchBackendTest(TestCase):
                 )
 
     def test_query(self):
-        results = self.backend.query(self.project, query='foo')
+        results = self.backend.query([self.project], query='foo')
         assert set(results) == set([self.group1])
 
-        results = self.backend.query(self.project, query='bar')
+        results = self.backend.query([self.project], query='bar')
         assert set(results) == set([self.group2])
 
     def test_query_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             query='foo')
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             query='bar')
         assert set(results) == set([])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             query='bar')
         assert set(results) == set([self.group2])
 
     def test_sort(self):
-        results = self.backend.query(self.project, sort_by='date')
+        results = self.backend.query([self.project], sort_by='date')
         assert list(results) == [self.group1, self.group2]
 
-        results = self.backend.query(self.project, sort_by='new')
+        results = self.backend.query([self.project], sort_by='new')
         assert list(results) == [self.group2, self.group1]
 
-        results = self.backend.query(self.project, sort_by='freq')
+        results = self.backend.query([self.project], sort_by='freq')
         assert list(results) == [self.group2, self.group1]
 
-        results = self.backend.query(self.project, sort_by='priority')
+        results = self.backend.query([self.project], sort_by='priority')
         assert list(results) == [self.group1, self.group2]
 
     def test_sort_with_environment(self):
@@ -214,114 +214,114 @@ class DjangoSearchBackendTest(TestCase):
             self._setup_tags_for_event(event)
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             sort_by='date',
         )
         assert list(results) == [self.group2, self.group1]
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             sort_by='new',
         )
         assert list(results) == [self.group2, self.group1]
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             sort_by='freq',
         )
         assert list(results) == [self.group2, self.group1]
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             sort_by='priority',
         )
         assert list(results) == [self.group2, self.group1]
 
     def test_status(self):
-        results = self.backend.query(self.project, status=GroupStatus.UNRESOLVED)
+        results = self.backend.query([self.project], status=GroupStatus.UNRESOLVED)
         assert set(results) == set([self.group1])
 
-        results = self.backend.query(self.project, status=GroupStatus.RESOLVED)
+        results = self.backend.query([self.project], status=GroupStatus.RESOLVED)
         assert set(results) == set([self.group2])
 
     def test_status_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             status=GroupStatus.UNRESOLVED)
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             status=GroupStatus.RESOLVED)
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             status=GroupStatus.RESOLVED)
         assert set(results) == set([])
 
     def test_tags(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             tags={'environment': 'staging'})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             tags={'environment': 'example.com'})
         assert set(results) == set([])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             tags={'environment': ANY})
         assert set(results) == set([self.group2, self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             tags={'environment': 'staging',
                   'server': 'example.com'})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             tags={'environment': 'staging',
                   'server': ANY})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             tags={'environment': 'staging',
                   'server': 'bar.example.com'})
         assert set(results) == set([])
 
     def test_tags_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             tags={'server': 'example.com'})
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             tags={'server': 'example.com'})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             tags={'server': ANY})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             tags={
                 'environment': ANY,
@@ -330,52 +330,52 @@ class DjangoSearchBackendTest(TestCase):
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             tags={'url': 'http://example.com'})
         assert set(results) == set([])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             tags={'url': 'http://example.com'})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             tags={'server': 'bar.example.com'})
         assert set(results) == set([])
 
     def test_bookmarked_by(self):
-        results = self.backend.query(self.project, bookmarked_by=self.user)
+        results = self.backend.query([self.project], bookmarked_by=self.user)
         assert set(results) == set([self.group2])
 
     def test_bookmarked_by_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             bookmarked_by=self.user)
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             bookmarked_by=self.user)
         assert set(results) == set([])
 
     def test_project(self):
-        results = self.backend.query(self.create_project(name='other'))
+        results = self.backend.query([self.create_project(name='other')])
         assert set(results) == set([])
 
     def test_pagination(self):
-        results = self.backend.query(self.project, limit=1, sort_by='date')
+        results = self.backend.query([self.project], limit=1, sort_by='date')
         assert set(results) == set([self.group1])
 
-        results = self.backend.query(self.project, cursor=results.next, limit=1, sort_by='date')
+        results = self.backend.query([self.project], cursor=results.next, limit=1, sort_by='date')
         assert set(results) == set([self.group2])
 
-        results = self.backend.query(self.project, cursor=results.next, limit=1, sort_by='date')
+        results = self.backend.query([self.project], cursor=results.next, limit=1, sort_by='date')
         assert set(results) == set([])
 
     def test_pagination_with_environment(self):
@@ -391,7 +391,7 @@ class DjangoSearchBackendTest(TestCase):
             self._setup_tags_for_event(event)
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             sort_by='date',
             limit=1,
@@ -401,7 +401,7 @@ class DjangoSearchBackendTest(TestCase):
         assert results.hits == 2
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             sort_by='date',
             limit=1,
@@ -412,7 +412,7 @@ class DjangoSearchBackendTest(TestCase):
         assert results.hits == 2
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             sort_by='date',
             limit=1,
@@ -424,21 +424,21 @@ class DjangoSearchBackendTest(TestCase):
 
     def test_age_filter(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             age_from=self.group2.first_seen,
             age_from_inclusive=True,
         )
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             age_to=self.group1.first_seen + timedelta(minutes=1),
             age_to_inclusive=True,
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             age_from=self.group1.first_seen,
             age_from_inclusive=True,
             age_to=self.group1.first_seen + timedelta(minutes=1),
@@ -448,7 +448,7 @@ class DjangoSearchBackendTest(TestCase):
 
     def test_age_filter_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             age_from=self.group1.first_seen,
             age_from_inclusive=True,
@@ -456,7 +456,7 @@ class DjangoSearchBackendTest(TestCase):
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             age_to=self.group1.first_seen,
             age_to_inclusive=True,
@@ -464,7 +464,7 @@ class DjangoSearchBackendTest(TestCase):
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             age_from=self.group1.first_seen,
             age_from_inclusive=False,
@@ -482,7 +482,7 @@ class DjangoSearchBackendTest(TestCase):
         self._setup_tags_for_event(event)
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             age_from=self.group1.first_seen,
             age_from_inclusive=False,
@@ -490,7 +490,7 @@ class DjangoSearchBackendTest(TestCase):
         assert set(results) == set([])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['development'],
             age_from=self.group1.first_seen,
             age_from_inclusive=False,
@@ -499,21 +499,21 @@ class DjangoSearchBackendTest(TestCase):
 
     def test_last_seen_filter(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=True,
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             last_seen_to=self.group2.last_seen + timedelta(minutes=1),
             last_seen_to_inclusive=True,
         )
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=True,
             last_seen_to=self.group1.last_seen + timedelta(minutes=1),
@@ -523,7 +523,7 @@ class DjangoSearchBackendTest(TestCase):
 
     def test_last_seen_filter_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=True,
@@ -531,7 +531,7 @@ class DjangoSearchBackendTest(TestCase):
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             last_seen_to=self.group1.last_seen,
             last_seen_to_inclusive=True,
@@ -539,7 +539,7 @@ class DjangoSearchBackendTest(TestCase):
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=False,
@@ -557,7 +557,7 @@ class DjangoSearchBackendTest(TestCase):
         self._setup_tags_for_event(event)
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=False,
@@ -565,7 +565,7 @@ class DjangoSearchBackendTest(TestCase):
         assert set(results) == set([])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['development'],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=False,
@@ -574,19 +574,19 @@ class DjangoSearchBackendTest(TestCase):
 
     def test_date_filter(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             date_from=self.event2.datetime,
         )
         assert set(results) == set([self.group1, self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             date_to=self.event1.datetime + timedelta(minutes=1),
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             date_from=self.event1.datetime,
             date_to=self.event2.datetime + timedelta(minutes=1),
         )
@@ -598,21 +598,21 @@ class DjangoSearchBackendTest(TestCase):
     )
     def test_date_filter_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             date_from=self.event2.datetime,
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             date_to=self.event1.datetime + timedelta(minutes=1),
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             date_from=self.event1.datetime,
             date_to=self.event2.datetime + timedelta(minutes=1),
@@ -620,33 +620,33 @@ class DjangoSearchBackendTest(TestCase):
         assert set(results) == set([self.group2])
 
     def test_unassigned(self):
-        results = self.backend.query(self.project, unassigned=True)
+        results = self.backend.query([self.project], unassigned=True)
         assert set(results) == set([self.group1])
 
-        results = self.backend.query(self.project, unassigned=False)
+        results = self.backend.query([self.project], unassigned=False)
         assert set(results) == set([self.group2])
 
     def test_unassigned_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             unassigned=True)
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             unassigned=False)
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             unassigned=False)
         assert set(results) == set([])
 
     def test_assigned_to(self):
-        results = self.backend.query(self.project, assigned_to=self.user)
+        results = self.backend.query([self.project], assigned_to=self.user)
         assert set(results) == set([self.group2])
 
         # test team assignee
@@ -658,12 +658,12 @@ class DjangoSearchBackendTest(TestCase):
         ga.update(team=self.team, user=None)
         assert GroupAssignee.objects.get(id=ga.id).user is None
 
-        results = self.backend.query(self.project, assigned_to=self.user)
+        results = self.backend.query([self.project], assigned_to=self.user)
         assert set(results) == set([self.group2])
 
         # test when there should be no results
         other_user = self.create_user()
-        results = self.backend.query(self.project, assigned_to=other_user)
+        results = self.backend.query([self.project], assigned_to=other_user)
         assert set(results) == set([])
 
         owner = self.create_user()
@@ -675,39 +675,39 @@ class DjangoSearchBackendTest(TestCase):
         )
 
         # test that owners don't see results for all teams
-        results = self.backend.query(self.project, assigned_to=owner)
+        results = self.backend.query([self.project], assigned_to=owner)
         assert set(results) == set([])
 
     def test_assigned_to_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             assigned_to=self.user)
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             assigned_to=self.user)
         assert set(results) == set([])
 
     def test_subscribed_by(self):
         results = self.backend.query(
-            self.group1.project,
+            [self.group1.project],
             subscribed_by=self.user,
         )
         assert set(results) == set([self.group1])
 
     def test_subscribed_by_with_environment(self):
         results = self.backend.query(
-            self.group1.project,
+            [self.group1.project],
             environment=self.environments['production'],
             subscribed_by=self.user,
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.group1.project,
+            [self.group1.project],
             environment=self.environments['staging'],
             subscribed_by=self.user,
         )
@@ -717,7 +717,7 @@ class DjangoSearchBackendTest(TestCase):
         with pytest.raises(Release.DoesNotExist):
             # no releases exist period
             environment = None
-            result = get_latest_release(self.project, environment)
+            result = get_latest_release([self.project], environment)
 
         old = Release.objects.create(
             organization_id=self.project.organization_id,
@@ -754,16 +754,16 @@ class DjangoSearchBackendTest(TestCase):
 
         # latest overall (no environment filter)
         environment = None
-        result = get_latest_release(self.project, environment)
+        result = get_latest_release([self.project], environment)
         assert result == newest.version
 
         # latest in environment
         environment = self.environment
-        result = get_latest_release(self.project, environment)
+        result = get_latest_release([self.project], environment)
         assert result == new.version
 
         with pytest.raises(Release.DoesNotExist):
             # environment with no releases
             environment = self.create_environment()
-            result = get_latest_release(self.project, environment)
+            result = get_latest_release([self.project], environment)
             assert result == new.version
diff --git a/tests/snuba/search/test_backend.py b/tests/snuba/search/test_backend.py
index b515d1c93b..a2aaa25494 100644
--- a/tests/snuba/search/test_backend.py
+++ b/tests/snuba/search/test_backend.py
@@ -25,20 +25,20 @@ class SnubaSearchTest(SnubaTestCase):
         self.backend = SnubaSearchBackend()
         self.environments = {}
 
-        base_datetime = (datetime.utcnow() - timedelta(days=7)).replace(tzinfo=pytz.utc)
+        self.base_datetime = (datetime.utcnow() - timedelta(days=7)).replace(tzinfo=pytz.utc)
         self.group1 = self.create_group(
             project=self.project,
             checksum='a' * 32,
             message='foo',
             times_seen=5,
             status=GroupStatus.UNRESOLVED,
-            last_seen=base_datetime,
-            first_seen=base_datetime - timedelta(days=31),
+            last_seen=self.base_datetime,
+            first_seen=self.base_datetime - timedelta(days=31),
         )
         self.event1 = self.create_event(
             event_id='a' * 32,
             group=self.group1,
-            datetime=base_datetime - timedelta(days=31),
+            datetime=self.base_datetime - timedelta(days=31),
             message='group1',
             stacktrace={
                 'frames': [{
@@ -52,7 +52,7 @@ class SnubaSearchTest(SnubaTestCase):
         self.event3 = self.create_event(
             event_id='c' * 32,
             group=self.group1,
-            datetime=base_datetime,
+            datetime=self.base_datetime,
             message='group1',
             stacktrace={
                 'frames': [{
@@ -70,13 +70,13 @@ class SnubaSearchTest(SnubaTestCase):
             message='bar',
             times_seen=10,
             status=GroupStatus.RESOLVED,
-            last_seen=base_datetime - timedelta(days=30),
-            first_seen=base_datetime - timedelta(days=30),
+            last_seen=self.base_datetime - timedelta(days=30),
+            first_seen=self.base_datetime - timedelta(days=30),
         )
         self.event2 = self.create_event(
             event_id='b' * 32,
             group=self.group2,
-            datetime=base_datetime - timedelta(days=30),
+            datetime=self.base_datetime - timedelta(days=30),
             message='group2',
             stacktrace={
                 'frames': [{
@@ -115,6 +115,32 @@ class SnubaSearchTest(SnubaTestCase):
             is_active=False,
         )
 
+    def set_up_multi_project(self):
+        self.project2 = self.create_project(organization=self.project.organization)
+        self.group_p2 = self.create_group(
+            project=self.project2,
+            checksum='a' * 32,
+            message='foo',
+            times_seen=6,
+            status=GroupStatus.UNRESOLVED,
+            last_seen=self.base_datetime - timedelta(days=1),
+            first_seen=self.base_datetime - timedelta(days=31),
+        )
+        self.event_p2 = self.create_event(
+            event_id='a' * 32,
+            group=self.group_p2,
+            datetime=self.base_datetime - timedelta(days=31),
+            message='group1',
+            stacktrace={
+                'frames': [{
+                    'module': 'group_p2'
+                }]},
+            tags={
+                'server': 'example.com',
+                'environment': 'production',
+            }
+        )
+
     def create_event(self, *args, **kwargs):
         event = super(SnubaSearchTest, self).create_event(*args, **kwargs)
 
@@ -130,44 +156,77 @@ class SnubaSearchTest(SnubaTestCase):
         return event
 
     def test_query(self):
-        results = self.backend.query(self.project, query='foo')
+        results = self.backend.query([self.project], query='foo')
         assert set(results) == set([self.group1])
 
-        results = self.backend.query(self.project, query='bar')
+        results = self.backend.query([self.project], query='bar')
         assert set(results) == set([self.group2])
 
+    def test_query_multi_project(self):
+        self.set_up_multi_project()
+        results = self.backend.query([self.project, self.project2], query='foo')
+        assert set(results) == set([self.group1, self.group_p2])
+
     def test_query_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             query='foo')
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             query='bar')
         assert set(results) == set([])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             query='bar')
         assert set(results) == set([self.group2])
 
+    def test_query_with_environment_multi_project(self):
+        self.set_up_multi_project()
+        results = self.backend.query(
+            [self.project, self.project2],
+            environment=self.environments['production'],
+            query='foo')
+        assert set(results) == set([self.group1, self.group_p2])
+
+        results = self.backend.query(
+            [self.project, self.project2],
+            environment=self.environments['production'],
+            query='bar')
+        assert set(results) == set([])
+
     def test_sort(self):
-        results = self.backend.query(self.project, sort_by='date')
+        results = self.backend.query([self.project], sort_by='date')
         assert list(results) == [self.group1, self.group2]
 
-        results = self.backend.query(self.project, sort_by='new')
+        results = self.backend.query([self.project], sort_by='new')
         assert list(results) == [self.group2, self.group1]
 
-        results = self.backend.query(self.project, sort_by='freq')
+        results = self.backend.query([self.project], sort_by='freq')
         assert list(results) == [self.group1, self.group2]
 
-        results = self.backend.query(self.project, sort_by='priority')
+        results = self.backend.query([self.project], sort_by='priority')
         assert list(results) == [self.group1, self.group2]
 
+    def test_sort_multi_project(self):
+        self.set_up_multi_project()
+        results = self.backend.query([self.project, self.project2], sort_by='date')
+        assert list(results) == [self.group1, self.group_p2, self.group2]
+
+        results = self.backend.query([self.project, self.project2], sort_by='new')
+        assert list(results) == [self.group2, self.group_p2, self.group1]
+
+        results = self.backend.query([self.project, self.project2], sort_by='freq')
+        assert list(results) == [self.group1, self.group_p2, self.group2]
+
+        results = self.backend.query([self.project, self.project2], sort_by='priority')
+        assert list(results) == [self.group1, self.group2, self.group_p2]
+
     def test_sort_with_environment(self):
         for dt in [
                 self.group1.first_seen + timedelta(days=1),
@@ -185,149 +244,149 @@ class SnubaSearchTest(SnubaTestCase):
             )
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             sort_by='date',
         )
         assert list(results) == [self.group2, self.group1]
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             sort_by='new',
         )
         assert list(results) == [self.group2, self.group1]
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             sort_by='freq',
         )
         assert list(results) == [self.group2, self.group1]
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             sort_by='priority',
         )
         assert list(results) == [self.group2, self.group1]
 
     def test_status(self):
-        results = self.backend.query(self.project, status=GroupStatus.UNRESOLVED)
+        results = self.backend.query([self.project], status=GroupStatus.UNRESOLVED)
         assert set(results) == set([self.group1])
 
-        results = self.backend.query(self.project, status=GroupStatus.RESOLVED)
+        results = self.backend.query([self.project], status=GroupStatus.RESOLVED)
         assert set(results) == set([self.group2])
 
     def test_status_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             status=GroupStatus.UNRESOLVED)
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             status=GroupStatus.RESOLVED)
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             status=GroupStatus.RESOLVED)
         assert set(results) == set([])
 
     def test_tags(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             tags={'environment': 'staging'})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             tags={'environment': 'example.com'})
         assert set(results) == set([])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             tags={'environment': ANY})
         assert set(results) == set([self.group2, self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             tags={'environment': 'staging',
                   'server': 'example.com'})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             tags={'environment': 'staging',
                   'server': ANY})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             tags={'environment': 'staging',
                   'server': 'bar.example.com'})
         assert set(results) == set([])
 
     def test_tags_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             tags={'server': 'example.com'})
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             tags={'server': 'example.com'})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             tags={'server': ANY})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             tags={'url': 'http://example.com'})
         assert set(results) == set([])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             tags={'url': 'http://example.com'})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             tags={'server': 'bar.example.com'})
         assert set(results) == set([])
 
     def test_bookmarked_by(self):
-        results = self.backend.query(self.project, bookmarked_by=self.user)
+        results = self.backend.query([self.project], bookmarked_by=self.user)
         assert set(results) == set([self.group2])
 
     def test_bookmarked_by_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             bookmarked_by=self.user)
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             bookmarked_by=self.user)
         assert set(results) == set([])
 
     def test_project(self):
-        results = self.backend.query(self.create_project(name='other'))
+        results = self.backend.query([self.create_project(name='other')])
         assert set(results) == set([])
 
     def test_pagination(self):
@@ -336,45 +395,45 @@ class SnubaSearchTest(SnubaTestCase):
             {'snuba.search.min-pre-snuba-candidates': 500}
         ]:
             with self.options(options_set):
-                results = self.backend.query(self.project, limit=1, sort_by='date')
+                results = self.backend.query([self.project], limit=1, sort_by='date')
                 assert set(results) == set([self.group1])
                 assert not results.prev.has_results
                 assert results.next.has_results
 
                 results = self.backend.query(
-                    self.project, cursor=results.next, limit=1, sort_by='date')
+                    [self.project], cursor=results.next, limit=1, sort_by='date')
                 assert set(results) == set([self.group2])
                 assert results.prev.has_results
                 assert not results.next.has_results
 
                 # note: previous cursor
                 results = self.backend.query(
-                    self.project, cursor=results.prev, limit=1, sort_by='date')
+                    [self.project], cursor=results.prev, limit=1, sort_by='date')
                 assert set(results) == set([self.group1])
                 assert results.prev.has_results
                 assert results.next.has_results
 
                 # note: previous cursor, paging too far into 0 results
                 results = self.backend.query(
-                    self.project, cursor=results.prev, limit=1, sort_by='date')
+                    [self.project], cursor=results.prev, limit=1, sort_by='date')
                 assert set(results) == set([])
                 assert not results.prev.has_results
                 assert results.next.has_results
 
                 results = self.backend.query(
-                    self.project, cursor=results.next, limit=1, sort_by='date')
+                    [self.project], cursor=results.next, limit=1, sort_by='date')
                 assert set(results) == set([self.group1])
                 assert results.prev.has_results
                 assert results.next.has_results
 
                 results = self.backend.query(
-                    self.project, cursor=results.next, limit=1, sort_by='date')
+                    [self.project], cursor=results.next, limit=1, sort_by='date')
                 assert set(results) == set([self.group2])
                 assert results.prev.has_results
                 assert not results.next.has_results
 
                 results = self.backend.query(
-                    self.project, cursor=results.next, limit=1, sort_by='date')
+                    [self.project], cursor=results.next, limit=1, sort_by='date')
                 assert set(results) == set([])
                 assert results.prev.has_results
                 assert not results.next.has_results
@@ -396,7 +455,7 @@ class SnubaSearchTest(SnubaTestCase):
             )
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             sort_by='date',
             limit=1,
@@ -406,7 +465,7 @@ class SnubaSearchTest(SnubaTestCase):
         assert results.hits is None  # NOQA
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             sort_by='date',
             limit=1,
@@ -417,7 +476,7 @@ class SnubaSearchTest(SnubaTestCase):
         assert results.hits is None  # NOQA
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             sort_by='date',
             limit=1,
@@ -429,21 +488,21 @@ class SnubaSearchTest(SnubaTestCase):
 
     def test_age_filter(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             age_from=self.group2.first_seen,
             age_from_inclusive=True,
         )
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             age_to=self.group1.first_seen + timedelta(minutes=1),
             age_to_inclusive=True,
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             age_from=self.group1.first_seen,
             age_from_inclusive=True,
             age_to=self.group1.first_seen + timedelta(minutes=1),
@@ -453,7 +512,7 @@ class SnubaSearchTest(SnubaTestCase):
 
     def test_age_filter_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             age_from=self.group1.first_seen,
             age_from_inclusive=True,
@@ -461,7 +520,7 @@ class SnubaSearchTest(SnubaTestCase):
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             age_to=self.group1.first_seen,
             age_to_inclusive=True,
@@ -469,7 +528,7 @@ class SnubaSearchTest(SnubaTestCase):
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             age_from=self.group1.first_seen,
             age_from_inclusive=False,
@@ -490,7 +549,7 @@ class SnubaSearchTest(SnubaTestCase):
         )
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             age_from=self.group1.first_seen,
             age_from_inclusive=False,
@@ -498,7 +557,7 @@ class SnubaSearchTest(SnubaTestCase):
         assert set(results) == set([])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['development'],
             age_from=self.group1.first_seen,
             age_from_inclusive=False,
@@ -507,40 +566,40 @@ class SnubaSearchTest(SnubaTestCase):
 
     def test_times_seen_filter(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             times_seen=2,
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             times_seen_lower=2,
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             times_seen_upper=1,
         )
         assert set(results) == set([self.group2])
 
     def test_last_seen_filter(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=True,
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             last_seen_to=self.group2.last_seen + timedelta(minutes=1),
             last_seen_to_inclusive=True,
         )
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=True,
             last_seen_to=self.group1.last_seen + timedelta(minutes=1),
@@ -550,7 +609,7 @@ class SnubaSearchTest(SnubaTestCase):
 
     def test_last_seen_filter_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=True,
@@ -558,7 +617,7 @@ class SnubaSearchTest(SnubaTestCase):
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             last_seen_to=self.group1.last_seen,
             last_seen_to_inclusive=True,
@@ -566,7 +625,7 @@ class SnubaSearchTest(SnubaTestCase):
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=False,
@@ -589,7 +648,7 @@ class SnubaSearchTest(SnubaTestCase):
         self.group1.update(last_seen=self.group1.last_seen + timedelta(days=1))
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=False,
@@ -597,7 +656,7 @@ class SnubaSearchTest(SnubaTestCase):
         assert set(results) == set([])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             date_to=self.group1.last_seen + timedelta(days=1),
             environment=self.environments['development'],
             last_seen_from=self.group1.last_seen,
@@ -606,7 +665,7 @@ class SnubaSearchTest(SnubaTestCase):
         assert set(results) == set()
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             date_to=self.group1.last_seen + timedelta(days=1),
             environment=self.environments['development'],
             last_seen_from=self.group1.last_seen,
@@ -616,19 +675,19 @@ class SnubaSearchTest(SnubaTestCase):
 
     def test_date_filter(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             date_from=self.event2.datetime,
         )
         assert set(results) == set([self.group1, self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             date_to=self.event1.datetime + timedelta(minutes=1),
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             date_from=self.event1.datetime,
             date_to=self.event2.datetime + timedelta(minutes=1),
         )
@@ -640,21 +699,21 @@ class SnubaSearchTest(SnubaTestCase):
     )
     def test_date_filter_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             date_from=self.event2.datetime,
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             date_to=self.event1.datetime + timedelta(minutes=1),
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             date_from=self.event1.datetime,
             date_to=self.event2.datetime + timedelta(minutes=1),
@@ -662,33 +721,33 @@ class SnubaSearchTest(SnubaTestCase):
         assert set(results) == set([self.group2])
 
     def test_unassigned(self):
-        results = self.backend.query(self.project, unassigned=True)
+        results = self.backend.query([self.project], unassigned=True)
         assert set(results) == set([self.group1])
 
-        results = self.backend.query(self.project, unassigned=False)
+        results = self.backend.query([self.project], unassigned=False)
         assert set(results) == set([self.group2])
 
     def test_unassigned_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             unassigned=True)
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             unassigned=False)
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             unassigned=False)
         assert set(results) == set([])
 
     def test_assigned_to(self):
-        results = self.backend.query(self.project, assigned_to=self.user)
+        results = self.backend.query([self.project], assigned_to=self.user)
         assert set(results) == set([self.group2])
 
         # test team assignee
@@ -700,12 +759,12 @@ class SnubaSearchTest(SnubaTestCase):
         ga.update(team=self.team, user=None)
         assert GroupAssignee.objects.get(id=ga.id).user is None
 
-        results = self.backend.query(self.project, assigned_to=self.user)
+        results = self.backend.query([self.project], assigned_to=self.user)
         assert set(results) == set([self.group2])
 
         # test when there should be no results
         other_user = self.create_user()
-        results = self.backend.query(self.project, assigned_to=other_user)
+        results = self.backend.query([self.project], assigned_to=other_user)
         assert set(results) == set([])
 
         owner = self.create_user()
@@ -717,39 +776,39 @@ class SnubaSearchTest(SnubaTestCase):
         )
 
         # test that owners don't see results for all teams
-        results = self.backend.query(self.project, assigned_to=owner)
+        results = self.backend.query([self.project], assigned_to=owner)
         assert set(results) == set([])
 
     def test_assigned_to_with_environment(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['staging'],
             assigned_to=self.user)
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
-            self.project,
+            [self.project],
             environment=self.environments['production'],
             assigned_to=self.user)
         assert set(results) == set([])
 
     def test_subscribed_by(self):
         results = self.backend.query(
-            self.group1.project,
+            [self.group1.project],
             subscribed_by=self.user,
         )
         assert set(results) == set([self.group1])
 
     def test_subscribed_by_with_environment(self):
         results = self.backend.query(
-            self.group1.project,
+            [self.group1.project],
             environment=self.environments['production'],
             subscribed_by=self.user,
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
-            self.group1.project,
+            [self.group1.project],
             environment=self.environments['staging'],
             subscribed_by=self.user,
         )
@@ -759,7 +818,7 @@ class SnubaSearchTest(SnubaTestCase):
         with pytest.raises(Release.DoesNotExist):
             # no releases exist period
             environment = None
-            result = get_latest_release(self.project, environment)
+            result = get_latest_release([self.project], environment)
 
         old = Release.objects.create(
             organization_id=self.project.organization_id,
@@ -796,27 +855,27 @@ class SnubaSearchTest(SnubaTestCase):
 
         # latest overall (no environment filter)
         environment = None
-        result = get_latest_release(self.project, environment)
+        result = get_latest_release([self.project], environment)
         assert result == newest.version
 
         # latest in environment
         environment = self.environment
-        result = get_latest_release(self.project, environment)
+        result = get_latest_release([self.project], environment)
         assert result == new.version
 
         with pytest.raises(Release.DoesNotExist):
             # environment with no releases
             environment = self.create_environment()
-            result = get_latest_release(self.project, environment)
+            result = get_latest_release([self.project], environment)
             assert result == new.version
 
     @mock.patch('sentry.utils.snuba.query')
     def test_snuba_not_called_optimization(self, query_mock):
-        assert self.backend.query(self.project, query='foo').results == [self.group1]
+        assert self.backend.query([self.project], query='foo').results == [self.group1]
         assert not query_mock.called
 
         assert self.backend.query(
-            self.project, query='foo', sort_by='date', last_seen_from=timezone.now()
+            [self.project], query='foo', sort_by='date', last_seen_from=timezone.now()
         ).results == []
         assert query_mock.called
 
@@ -848,10 +907,11 @@ class SnubaSearchTest(SnubaTestCase):
             'offset': 0,
         }
 
-        self.backend.query(self.project, query='foo')
+        self.backend.query([self.project], query='foo')
         assert not query_mock.called
 
-        self.backend.query(self.project, query='foo', sort_by='date', last_seen_from=timezone.now())
+        self.backend.query([self.project], query='foo', sort_by='date',
+                           last_seen_from=timezone.now())
         assert query_mock.call_args == mock.call(
             orderby=['-last_seen', 'issue'],
             aggregations=[['toUInt64(max(timestamp)) * 1000', '', 'last_seen']],
@@ -859,7 +919,7 @@ class SnubaSearchTest(SnubaTestCase):
             **common_args
         )
 
-        self.backend.query(self.project, query='foo', sort_by='priority')
+        self.backend.query([self.project], query='foo', sort_by='priority')
         assert query_mock.call_args == mock.call(
             orderby=['-priority', 'issue'],
             aggregations=[
@@ -871,7 +931,7 @@ class SnubaSearchTest(SnubaTestCase):
             **common_args
         )
 
-        self.backend.query(self.project, query='foo', sort_by='freq', times_seen=5)
+        self.backend.query([self.project], query='foo', sort_by='freq', times_seen=5)
         assert query_mock.call_args == mock.call(
             orderby=['-times_seen', 'issue'],
             aggregations=[['count()', '', 'times_seen']],
@@ -879,7 +939,7 @@ class SnubaSearchTest(SnubaTestCase):
             **common_args
         )
 
-        self.backend.query(self.project, query='foo', sort_by='new', age_from=timezone.now())
+        self.backend.query([self.project], query='foo', sort_by='new', age_from=timezone.now())
         assert query_mock.call_args == mock.call(
             orderby=['-first_seen', 'issue'],
             aggregations=[['toUInt64(min(timestamp)) * 1000', '', 'first_seen']],
@@ -892,24 +952,37 @@ class SnubaSearchTest(SnubaTestCase):
         options.set('snuba.search.max-pre-snuba-candidates', 1)
         try:
             # normal queries work as expected
-            results = self.backend.query(self.project, query='foo')
+            results = self.backend.query([self.project], query='foo')
             assert set(results) == set([self.group1])
-            results = self.backend.query(self.project, query='bar')
+            results = self.backend.query([self.project], query='bar')
             assert set(results) == set([self.group2])
 
             # no candidate matches in Sentry, immediately return empty paginator
-            results = self.backend.query(self.project, query='NO MATCHES IN SENTRY')
+            results = self.backend.query([self.project], query='NO MATCHES IN SENTRY')
             assert set(results) == set()
 
             # too many candidates, skip pre-filter, requires >1 postfilter queries
-            results = self.backend.query(self.project)
+            results = self.backend.query([self.project])
             assert set(results) == set([self.group1, self.group2])
         finally:
             options.set('snuba.search.max-pre-snuba-candidates', prev_max_pre)
 
+    def test_optimizer_enabled(self):
+        prev_optimizer_enabled = options.get('snuba.search.pre-snuba-candidates-optimizer')
+        options.set('snuba.search.pre-snuba-candidates-optimizer', True)
+
+        try:
+            results = self.backend.query(
+                [self.project],
+                environment=self.environments['production'],
+                tags={'server': 'example.com'})
+            assert set(results) == set([self.group1])
+        finally:
+            options.set('snuba.search.pre-snuba-candidates-optimizer', prev_optimizer_enabled)
+
     def test_search_out_of_range(self):
         results = self.backend.query(
-            self.project,
+            [self.project],
             date_from=datetime(2000, 1, 1, 0, 0, 0, tzinfo=pytz.utc),
             date_to=datetime(2000, 1, 1, 1, 0, 0, tzinfo=pytz.utc),
         )
