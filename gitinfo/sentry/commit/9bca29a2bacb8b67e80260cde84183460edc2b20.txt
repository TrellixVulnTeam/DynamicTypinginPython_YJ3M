commit 9bca29a2bacb8b67e80260cde84183460edc2b20
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Feb 11 20:56:41 2013 -0800

    Some initial work on counters

diff --git a/src/sentry/counters/__init__.py b/src/sentry/counters/__init__.py
new file mode 100644
index 0000000000..e0404fb7b7
--- /dev/null
+++ b/src/sentry/counters/__init__.py
@@ -0,0 +1,9 @@
+"""
+sentry.counters
+~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from .base import Counter  # NOQA
diff --git a/src/sentry/counters/base.py b/src/sentry/counters/base.py
new file mode 100644
index 0000000000..9e5bbe5e4b
--- /dev/null
+++ b/src/sentry/counters/base.py
@@ -0,0 +1,35 @@
+"""
+sentry.counters.base
+~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+
+class Counter(object):
+    """
+    Counters are temporary stores for querying real-time counts of events.
+
+    Specifically, they store the following distinct counters:
+
+    - events (global)
+    - events per team
+    - events per project
+    - events per group
+
+    Each grouping tracks the following:
+
+    - # of total events
+    - # of unique events
+
+    Each counter stores counts at minute-level intervals for 15 minutes.
+    """
+    def __init__(self, **options):
+        pass
+
+    def incr(self, amount, created=False, **kwargs):
+        """
+        >>> incr(1, team_id=1, project_id=1, group_id=1, created=False)
+        """
+        pass
diff --git a/src/sentry/counters/redis.py b/src/sentry/counters/redis.py
new file mode 100644
index 0000000000..5ab97c5e7c
--- /dev/null
+++ b/src/sentry/counters/redis.py
@@ -0,0 +1,78 @@
+"""
+sentry.counters.redis
+~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import with_statement
+
+import time
+from nydus.db import create_cluster
+from sentry.counters import Counter
+from sentry.conf import settings
+
+
+class RedisCounter(Counter):
+    num_minutes = 15
+    key_expire = 60 * num_minutes
+
+    def __init__(self, **options):
+        if not options:
+            # inherit default options from REDIS_OPTIONS
+            options = settings.REDIS_OPTIONS
+
+        super(RedisCounter, self).__init__(**options)
+        options.setdefault('hosts', {
+            0: {},
+        })
+        options.setdefault('router', 'nydus.db.routers.keyvalue.PartitionRouter')
+        self.conn = create_cluster({
+            'engine': 'nydus.db.backends.redis.Redis',
+            'router': options['router'],
+            'hosts': options['hosts'],
+        })
+
+    def _make_key(self, key, value, when=None, unique=False):
+        """
+        Returns a Redis-compatible key for the given key/value combination.
+        """
+        if when is None:
+            when = time.time()
+        when = int(when / 60)  # chop it down to the minute
+        return 'sentry.counters:%s:%s:%s=%s' % (when, int(unique), key, value)
+
+    def incr(self, amount, created=False, **kwargs):
+        now = time.time()
+        with self.conn.map() as conn:
+            keys = [self._make_key('global', '1', now)]
+            keys.extend(self._make_key(k, v, now) for k, v in kwargs.iteritems())
+            if created:
+                keys.extend(self._make_key(k, v, now, True) for k, v in kwargs.iteritems())
+            for key in keys:
+                conn.incr(key, amount)
+                conn.expire(key, self.key_expire)
+
+    def _get_count(self, key=None, value=None, minutes=None, unique=False):
+        if minutes is None:
+            minutes = self.num_minutes
+
+        if key is value is None:
+            key = 'global'
+            value = '1'
+
+        now = time.time()
+        results = []
+        with self.conn.map() as conn:
+            for minute in xrange(minutes):
+                key = self._make_key(key, value, now - (minutes * 60), unique)
+                results.append(conn.get(key))
+
+        return sum(int(r or 0) for r in results)
+
+    def total(self, key, value, minutes=None):
+        return self._get_count(key, value, minutes=minutes, unique=False)
+
+    def unique(self, key, value, minutes=None):
+        return self._get_count(key, value, minutes=minutes, unique=True)
diff --git a/tests/sentry/counters/__init__.py b/tests/sentry/counters/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/counters/redis/__init__.py b/tests/sentry/counters/redis/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/counters/redis/tests.py b/tests/sentry/counters/redis/tests.py
new file mode 100644
index 0000000000..694b1b00d7
--- /dev/null
+++ b/tests/sentry/counters/redis/tests.py
@@ -0,0 +1,39 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import mock
+
+# from datetime import timedelta
+# from django.utils import timezone
+from sentry.counters.redis import RedisCounter
+# from sentry.models import Group, Project
+from sentry.testutils import TestCase, fixture
+
+
+class RedisCounterTest(TestCase):
+    @fixture
+    def counter(self):
+        counter = RedisCounter(hosts={
+            0: {'db': 9}
+        })
+        counter.conn.flushdb()
+        return counter
+
+    def test_default_host_is_local(self):
+        counter = RedisCounter()
+        self.assertEquals(len(counter.conn.hosts), 1)
+        self.assertEquals(counter.conn.hosts[0].host, 'localhost')
+
+    @mock.patch('sentry.counters.redis.time')
+    def test_make_key_response(self, time):
+        time = time.time
+
+        time.return_value = 1360644295.816033
+        assert self.counter._make_key('team_id', 1) == 'sentry.counters:22677404:0:team_id=1'
+        time.assert_called_once_with()
+
+        now = 1360654295.816033
+        assert self.counter._make_key('team_id', 1, now, unique=True) == 'sentry.counters:22677571:1:team_id=1'
+
+        assert self.counter._make_key('project_id', 'foo', now, unique=True) == 'sentry.counters:22677571:1:project_id=foo'
