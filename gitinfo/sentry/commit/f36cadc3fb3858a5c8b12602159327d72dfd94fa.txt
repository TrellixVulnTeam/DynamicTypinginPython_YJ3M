commit f36cadc3fb3858a5c8b12602159327d72dfd94fa
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Apr 24 13:08:35 2019 -0700

    fix(saved-searches): Fix updating store after pinning a search (#12908)
    
    Need to update store after a pinning a search successfully. Fixes navigating to pinned search in saved searches dropdown
    
    Fixes SEN-532

diff --git a/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
index ffa018ec5c..d0da2d0554 100644
--- a/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
@@ -141,6 +141,8 @@ export function pinSearch(api, orgId, type, query) {
     },
   });
 
+  promise.then(SavedSearchesActions.pinSearchSuccess);
+
   promise.catch(handleXhrErrorResponse('Unable to pin search'));
 
   promise.catch(err => {
diff --git a/src/sentry/static/sentry/app/actions/savedSearchesActions.jsx b/src/sentry/static/sentry/app/actions/savedSearchesActions.jsx
index 1befbf425e..cf091b48c8 100644
--- a/src/sentry/static/sentry/app/actions/savedSearchesActions.jsx
+++ b/src/sentry/static/sentry/app/actions/savedSearchesActions.jsx
@@ -7,5 +7,6 @@ export default Reflux.createActions([
   'createSavedSearchSuccess',
   'deleteSavedSearchSuccess',
   'pinSearch',
+  'pinSearchSuccess',
   'unpinSearch',
 ]);
diff --git a/src/sentry/static/sentry/app/stores/savedSearchesStore.jsx b/src/sentry/static/sentry/app/stores/savedSearchesStore.jsx
index bde3b42ea4..6b3b794c31 100644
--- a/src/sentry/static/sentry/app/stores/savedSearchesStore.jsx
+++ b/src/sentry/static/sentry/app/stores/savedSearchesStore.jsx
@@ -12,6 +12,7 @@ const SavedSearchesStore = Reflux.createStore({
       createSavedSearchSuccess,
       deleteSavedSearchSuccess,
       pinSearch,
+      pinSearchSuccess,
       unpinSearch,
     } = SavedSearchesActions;
 
@@ -21,6 +22,7 @@ const SavedSearchesStore = Reflux.createStore({
     this.listenTo(createSavedSearchSuccess, this.onCreateSavedSearchSuccess);
     this.listenTo(deleteSavedSearchSuccess, this.onDeleteSavedSearchSuccess);
     this.listenTo(pinSearch, this.onPinSearch);
+    this.listenTo(pinSearchSuccess, this.onPinSearchSuccess);
     this.listenTo(unpinSearch, this.onUnpinSearch);
 
     this.reset();
@@ -170,6 +172,16 @@ const SavedSearchesStore = Reflux.createStore({
     this.trigger(this.state);
   },
 
+  onPinSearchSuccess(resp) {
+    const existingSearch = this.findByQuery(resp.query);
+
+    if (existingSearch) {
+      this.updateExistingSearch(existingSearch.id, resp);
+    }
+
+    this.trigger(this.state);
+  },
+
   onUnpinSearch(type) {
     this.state = {
       ...this.state,
diff --git a/tests/js/spec/stores/savedSearchesStore.spec.jsx b/tests/js/spec/stores/savedSearchesStore.spec.jsx
index 5e6045c318..939f508ca5 100644
--- a/tests/js/spec/stores/savedSearchesStore.spec.jsx
+++ b/tests/js/spec/stores/savedSearchesStore.spec.jsx
@@ -22,6 +22,7 @@ describe('SavedSearchesStore', function() {
     Client.addMockResponse({
       url: '/organizations/org-1/pinned-searches/',
       method: 'PUT',
+      body: {},
     });
     Client.addMockResponse({
       url: '/organizations/org-1/pinned-searches/',
@@ -54,13 +55,22 @@ describe('SavedSearchesStore', function() {
     await fetchSavedSearches(api, 'org-1', {});
     await tick();
 
+    Client.addMockResponse({
+      url: '/organizations/org-1/pinned-searches/',
+      method: 'PUT',
+      body: {
+        id: '123',
+        query: 'level:info',
+        isPinned: true,
+      },
+    });
     pinSearch(api, 'org-1', 0, 'level:info');
     await tick();
 
     expect(SavedSearchesStore.get().savedSearches).toHaveLength(3);
     expect(SavedSearchesStore.get().savedSearches[0]).toEqual(
       expect.objectContaining({
-        id: null,
+        id: '123',
         isPinned: true,
         type: 0,
         query: 'level:info',
@@ -84,6 +94,22 @@ describe('SavedSearchesStore', function() {
         ...searches,
       ],
     });
+
+    Client.addMockResponse({
+      url: '/organizations/org-1/pinned-searches/',
+      method: 'PUT',
+      body: {
+        id: '1',
+        isDefault: false,
+        isGlobal: true,
+        isOrgCustom: false,
+        isPinned: true,
+        query: 'is:unresolved',
+        name: 'Unresolved Issues',
+        type: 0,
+      },
+    });
+
     await fetchSavedSearches(api, 'org-1', {});
     await tick();
 
@@ -94,6 +120,9 @@ describe('SavedSearchesStore', function() {
     expect(SavedSearchesStore.get().savedSearches[1]).toEqual(
       expect.objectContaining({
         id: '1',
+        isDefault: false,
+        isGlobal: true,
+        isOrgCustom: false,
         isPinned: true,
         type: 0,
         name: 'Unresolved Issues',
@@ -112,6 +141,21 @@ describe('SavedSearchesStore', function() {
       url: '/organizations/org-1/searches/',
       body: [{...searches[0], isPinned: true}, searches[1]],
     });
+
+    Client.addMockResponse({
+      url: '/organizations/org-1/pinned-searches/',
+      method: 'PUT',
+      body: {
+        id: '1',
+        isDefault: false,
+        isGlobal: true,
+        isOrgCustom: false,
+        isPinned: true,
+        query: 'is:unresolved',
+        name: 'Unresolved Issues',
+        type: 0,
+      },
+    });
     await fetchSavedSearches(api, 'org-1', {});
     await tick();
 
@@ -133,6 +177,9 @@ describe('SavedSearchesStore', function() {
     expect(SavedSearchesStore.get().savedSearches[1]).toEqual(
       expect.objectContaining({
         id: '1',
+        isDefault: false,
+        isGlobal: true,
+        isOrgCustom: false,
         isPinned: true,
         type: 0,
         name: 'Unresolved Issues',
diff --git a/tests/js/spec/views/organizationStream/overview.spec.jsx b/tests/js/spec/views/organizationStream/overview.spec.jsx
index 9bba7fa0de..850736b5fa 100644
--- a/tests/js/spec/views/organizationStream/overview.spec.jsx
+++ b/tests/js/spec/views/organizationStream/overview.spec.jsx
@@ -530,6 +530,7 @@ describe('OrganizationStream', function() {
         body: {
           ...savedSearch,
           id: '666',
+          name: 'My Pinned Search',
           query: 'assigned:me level:fatal',
           isPinned: true,
         },
