commit c718cd037caea9e0cefe45d635515c18776376d3
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Mar 23 13:55:56 2017 +0100

    Added endpoint for associating releases

diff --git a/src/sentry/api/endpoints/dsym_files.py b/src/sentry/api/endpoints/dsym_files.py
index c01959d8bb..179393b30c 100644
--- a/src/sentry/api/endpoints/dsym_files.py
+++ b/src/sentry/api/endpoints/dsym_files.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from rest_framework.response import Response
+from rest_framework import serializers
 
 from sentry.api.base import DocSection
 from sentry.api.base import Endpoint
@@ -8,12 +9,22 @@ from sentry.api.bases.project import ProjectEndpoint, ProjectReleasePermission
 from sentry.api.content_negotiation import ConditionalContentNegotiation
 from sentry.api.permissions import SystemPermission
 from sentry.api.serializers import serialize
+from sentry.api.serializers.rest_framework import ListField
 from sentry.models import ProjectDSymFile, create_files_from_macho_zip, \
-    find_missing_dsym_files, VersionDSymFile, DSymApp
+    VersionDSymFile, DSymApp
 
 ERR_FILE_EXISTS = 'A file matching this uuid already exists'
 
 
+class AssociateDsymSerializer(serializers.Serializer):
+    checksums = ListField(child=serializers.CharField(max_length=40))
+    platform = serializers.CharField(max_length=20)
+    name = serializers.CharField(max_length=250)
+    appId = serializers.CharField(max_length=250)
+    version = serializers.CharField(max_length=40)
+    build = serializers.CharField(max_length=40)
+
+
 def upload_from_request(request, project=None):
     if 'file' not in request.FILES:
         return Response({'detail': 'Missing uploaded file'}, status=400)
@@ -97,14 +108,22 @@ class UnknownDSymFilesEndpoint(ProjectEndpoint):
 
     def get(self, request, project):
         checksums = request.GET.getlist('checksums')
-        missing = find_missing_dsym_files(checksums, project=project)
+        missing = ProjectDSymFile.objects.find_missing(checksums, project=project)
         return Response({'missing': missing})
 
 
-class UnknownGlobalDSymFilesEndpoint(Endpoint):
-    permission_classes = (SystemPermission,)
+class AssociateDSymFilesEndpoint(ProjectEndpoint):
+    doc_section = DocSection.PROJECTS
+    permission_classes = (ProjectReleasePermission,)
 
-    def get(self, request):
-        checksums = request.GET.getlist('checksums')
-        missing = find_missing_dsym_files(checksums, project=None)
-        return Response({'missing': missing})
+    def post(self, request, project):
+        serializer = AssociateDsymSerializer(data=request.DATA)
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
+
+        data = serializer.object
+
+        ProjectDSymFile.objects.find_by_checksums(
+            data['checksums'], project)
+
+        return Response({'data': data})
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 4653be32bc..dba076067f 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -93,7 +93,7 @@ from .endpoints.project_release_file_details import ProjectReleaseFileDetailsEnd
 from .endpoints.project_release_commits import ProjectReleaseCommitsEndpoint
 from .endpoints.release_deploys import ReleaseDeploysEndpoint
 from .endpoints.dsym_files import DSymFilesEndpoint, GlobalDSymFilesEndpoint, \
-    UnknownDSymFilesEndpoint, UnknownGlobalDSymFilesEndpoint
+    UnknownDSymFilesEndpoint, AssociateDSymFilesEndpoint
 from .endpoints.shared_group_details import SharedGroupDetailsEndpoint
 from .endpoints.system_health import SystemHealthEndpoint
 from .endpoints.system_options import SystemOptionsEndpoint
@@ -341,6 +341,9 @@ urlpatterns = patterns(
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/files/dsyms/unknown/$',
         UnknownDSymFilesEndpoint.as_view(),
         name='sentry-api-0-unknown-dsym-files'),
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/files/dsyms/associate/$',
+        AssociateDSymFilesEndpoint.as_view(),
+        name='sentry-api-0-associate-dsym-files'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/rules/$',
         ProjectRulesEndpoint.as_view(),
         name='sentry-api-0-project-rules'),
@@ -451,9 +454,6 @@ urlpatterns = patterns(
     url(r'^system/global-dsyms/$',
         GlobalDSymFilesEndpoint.as_view(),
         name='sentry-api-0-global-dsym-files'),
-    url(r'^system/global-dsyms/unknown/$',
-        UnknownGlobalDSymFilesEndpoint.as_view(),
-        name='sentry-api-0-unknown-global-dsym-files'),
 
     # Internal
     url(r'^internal/health/$',
diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index 4630cca439..d782490ddf 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -394,10 +394,40 @@ class CommonDSymFile(Model):
         return KNOWN_DSYM_TYPES.get(ct, 'unknown')
 
 
+class ProjectDSymFileManager(BaseManager):
+
+    def find_missing(self, checksums, project):
+        if not checksums:
+            return[]
+
+        checksums = [x.lower() for x in checksums]
+        missing = set(checksums)
+
+        found = ProjectDSymFile.objects.filter(
+            file__checksum__in=checksums,
+            project=project
+        ).values('file__checksum')
+
+        for values in found:
+            missing.discard(values.values()[0])
+
+        return sorted(missing)
+
+    def find_by_checksums(self, checksums, project):
+        if not checksums:
+            return []
+        checksums = [x.lower() for x in checksums]
+        return ProjectDSymFile.objects.filter(
+            file__checksum__in=checksums,
+            project=project
+        )
+
+
 class ProjectDSymFile(CommonDSymFile):
     project = FlexibleForeignKey('sentry.Project', null=True)
     uuid = models.CharField(max_length=36)
     is_global = False
+    objects = ProjectDSymFileManager()
 
     class Meta(CommonDSymFile.Meta):
         unique_together = (('project', 'uuid'),)
@@ -526,29 +556,3 @@ def find_dsym_file(project, image_uuid):
         ).select_related('file').get()
     except GlobalDSymFile.DoesNotExist:
         return None
-
-
-def find_missing_dsym_files(checksums, project=None):
-    checksums = [x.lower() for x in checksums]
-    missing = set(checksums)
-
-    if project is not None:
-        found = ProjectDSymFile.objects.filter(
-            file__checksum__in=checksums,
-            project=project
-        ).values('file__checksum')
-
-        for values in found:
-            missing.discard(values.values()[0])
-
-        if not missing:
-            return []
-
-    found = GlobalDSymFile.objects.filter(
-        file__checksum__in=list(missing),
-    ).values('file__checksum')
-
-    for values in found:
-        missing.discard(values.values()[0])
-
-    return list(missing)
