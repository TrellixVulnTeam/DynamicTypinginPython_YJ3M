commit cb2b3672d6347f2a7bb0ea24d042be40ca9e495e
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Oct 17 14:23:39 2019 -0700

    ref(ts): Add typings for reflux (#15105)

diff --git a/package.json b/package.json
index 728085b274..762478eb0d 100644
--- a/package.json
+++ b/package.json
@@ -37,6 +37,7 @@
     "@types/react-router": "^3.0.20",
     "@types/react-sparklines": "^1.7.0",
     "@types/react-virtualized": "^9.20.1",
+    "@types/reflux": "0.4.1",
     "algoliasearch": "^3.32.0",
     "babel-core": "^7.0.0-bridge.0",
     "babel-loader": "^8.0.0",
diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.tsx b/src/sentry/static/sentry/app/components/assigneeSelector.tsx
index f8f8bf22f6..cd4c3692eb 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.tsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.tsx
@@ -55,8 +55,8 @@ const AssigneeSelectorComponent = createReactClass<Props, State>({
   },
 
   mixins: [
-    Reflux.listenTo(GroupStore, 'onGroupChange'),
-    Reflux.connect(MemberListStore, 'memberList'),
+    Reflux.listenTo(GroupStore, 'onGroupChange') as any,
+    Reflux.connect(MemberListStore, 'memberList') as any,
   ],
 
   getDefaultProps() {
diff --git a/src/sentry/static/sentry/app/components/globalModal.tsx b/src/sentry/static/sentry/app/components/globalModal.tsx
index 97d51fd1d4..f13c2f5ccc 100644
--- a/src/sentry/static/sentry/app/components/globalModal.tsx
+++ b/src/sentry/static/sentry/app/components/globalModal.tsx
@@ -95,7 +95,7 @@ class GlobalModal extends React.Component<Props> {
 
 const GlobalModalContainer = createReactClass({
   displayName: 'GlobalModalContainer',
-  mixins: [Reflux.connect(ModalStore, 'modalStore')],
+  mixins: [Reflux.connect(ModalStore, 'modalStore') as any],
 
   getInitialState() {
     return {
diff --git a/src/sentry/static/sentry/app/stores/configStore.tsx b/src/sentry/static/sentry/app/stores/configStore.tsx
index 6aaab52af0..e4269dd106 100644
--- a/src/sentry/static/sentry/app/stores/configStore.tsx
+++ b/src/sentry/static/sentry/app/stores/configStore.tsx
@@ -64,4 +64,5 @@ const ConfigStore = Reflux.createStore({
   },
 });
 
-export default ConfigStore;
+// TODO(ts): This should be properly typed
+export default ConfigStore as any;
diff --git a/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx b/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx
index 82cdd7e787..b9862fa85d 100644
--- a/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx
+++ b/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx
@@ -131,4 +131,5 @@ const DiscoverSavedQueriesStore = Reflux.createStore({
   },
 });
 
-export default DiscoverSavedQueriesStore;
+// TODO(ts): This should be properly typed
+export default DiscoverSavedQueriesStore as any;
diff --git a/src/sentry/static/sentry/app/stores/modalStore.tsx b/src/sentry/static/sentry/app/stores/modalStore.tsx
index c90f22b6f3..7a6a259c05 100644
--- a/src/sentry/static/sentry/app/stores/modalStore.tsx
+++ b/src/sentry/static/sentry/app/stores/modalStore.tsx
@@ -35,4 +35,5 @@ const ModalStore = Reflux.createStore({
   },
 });
 
-export default ModalStore;
+// TODO(ts): This should be properly typed
+export default ModalStore as any;
diff --git a/src/sentry/static/sentry/app/utils/withConfig.tsx b/src/sentry/static/sentry/app/utils/withConfig.tsx
index d791b89f5e..9900ae078b 100644
--- a/src/sentry/static/sentry/app/utils/withConfig.tsx
+++ b/src/sentry/static/sentry/app/utils/withConfig.tsx
@@ -25,7 +25,7 @@ const withConfig = <P extends InjectedConfigProps>(
     State
   >({
     displayName: `withConfig(${getDisplayName(WrappedComponent)})`,
-    mixins: [Reflux.listenTo(ConfigStore, 'onUpdate')],
+    mixins: [Reflux.listenTo(ConfigStore, 'onUpdate') as any],
 
     getInitialState() {
       return {config: ConfigStore.getConfig()};
diff --git a/src/sentry/static/sentry/app/utils/withDiscoverSavedQueries.tsx b/src/sentry/static/sentry/app/utils/withDiscoverSavedQueries.tsx
index c80531978a..48fcc386d9 100644
--- a/src/sentry/static/sentry/app/utils/withDiscoverSavedQueries.tsx
+++ b/src/sentry/static/sentry/app/utils/withDiscoverSavedQueries.tsx
@@ -28,7 +28,7 @@ const withDiscoverSavedQueries = <P extends InjectedDiscoverSavedQueriesProps>(
     State
   >({
     displayName: `withDiscoverSavedQuery(${getDisplayName(WrappedComponent)})`,
-    mixins: [Reflux.listenTo(DiscoverSavedQueriesStore, 'onUpdate')],
+    mixins: [Reflux.listenTo(DiscoverSavedQueriesStore, 'onUpdate') as any],
 
     getInitialState() {
       return {
diff --git a/src/sentry/static/sentry/app/utils/withGlobalSelection.tsx b/src/sentry/static/sentry/app/utils/withGlobalSelection.tsx
index 50ed7a9756..13cb47aec1 100644
--- a/src/sentry/static/sentry/app/utils/withGlobalSelection.tsx
+++ b/src/sentry/static/sentry/app/utils/withGlobalSelection.tsx
@@ -27,7 +27,7 @@ const withGlobalSelection = <P extends InjectedGlobalSelectionProps>(
     State
   >({
     displayName: `withGlobalSelection(${getDisplayName(WrappedComponent)})`,
-    mixins: [Reflux.listenTo(GlobalSelectionStore, 'onUpdate')],
+    mixins: [Reflux.listenTo(GlobalSelectionStore, 'onUpdate') as any],
 
     getInitialState() {
       return {
diff --git a/src/sentry/static/sentry/app/utils/withLatestContext.tsx b/src/sentry/static/sentry/app/utils/withLatestContext.tsx
index 884d788a88..9cbb74072d 100644
--- a/src/sentry/static/sentry/app/utils/withLatestContext.tsx
+++ b/src/sentry/static/sentry/app/utils/withLatestContext.tsx
@@ -41,7 +41,7 @@ const withLatestContext = <P extends InjectedLatestContextProps>(
         organization: SentryTypes.Organization,
         organizations: PropTypes.arrayOf(SentryTypes.Organization).isRequired,
       },
-      mixins: [Reflux.connect(LatestContextStore, 'latestContext')],
+      mixins: [Reflux.connect(LatestContextStore, 'latestContext') as any],
 
       render() {
         const {organizations} = this.props;
diff --git a/src/sentry/static/sentry/app/utils/withOrganizations.tsx b/src/sentry/static/sentry/app/utils/withOrganizations.tsx
index a7672d54ae..d887431d92 100644
--- a/src/sentry/static/sentry/app/utils/withOrganizations.tsx
+++ b/src/sentry/static/sentry/app/utils/withOrganizations.tsx
@@ -23,7 +23,7 @@ const withOrganizations = <P extends InjectedOrganizationsProps>(
     State
   >({
     displayName: `withOrganizations(${getDisplayName(WrappedComponent)})`,
-    mixins: [Reflux.connect(OrganizationsStore, 'organizations')],
+    mixins: [Reflux.connect(OrganizationsStore, 'organizations') as any],
 
     render() {
       return (
diff --git a/src/sentry/static/sentry/app/utils/withPlugins.tsx b/src/sentry/static/sentry/app/utils/withPlugins.tsx
index 06e84a08f6..e8a67c0bd0 100644
--- a/src/sentry/static/sentry/app/utils/withPlugins.tsx
+++ b/src/sentry/static/sentry/app/utils/withPlugins.tsx
@@ -35,7 +35,7 @@ const withPlugins = <P extends InjectedPluginProps>(
           organization: SentryTypes.Organization.isRequired,
           project: SentryTypes.Project.isRequired,
         },
-        mixins: [Reflux.connect(PluginsStore, 'store')],
+        mixins: [Reflux.connect(PluginsStore, 'store') as any],
 
         componentDidMount() {
           this.fetchPlugins();
diff --git a/src/sentry/static/sentry/app/utils/withProjects.tsx b/src/sentry/static/sentry/app/utils/withProjects.tsx
index 92478b4dbe..1ca35d5551 100644
--- a/src/sentry/static/sentry/app/utils/withProjects.tsx
+++ b/src/sentry/static/sentry/app/utils/withProjects.tsx
@@ -30,7 +30,7 @@ const withProjects = <P extends InjectedProjectsProps>(
       organization: SentryTypes.Organization,
       project: SentryTypes.Project,
     },
-    mixins: [Reflux.listenTo(ProjectsStore, 'onProjectUpdate')],
+    mixins: [Reflux.listenTo(ProjectsStore, 'onProjectUpdate') as any],
     getInitialState() {
       return {
         projects: ProjectsStore.getAll() as Project[],
diff --git a/src/sentry/static/sentry/app/utils/withSavedSearches.tsx b/src/sentry/static/sentry/app/utils/withSavedSearches.tsx
index e176b24f3e..2f4d6f5c21 100644
--- a/src/sentry/static/sentry/app/utils/withSavedSearches.tsx
+++ b/src/sentry/static/sentry/app/utils/withSavedSearches.tsx
@@ -28,7 +28,7 @@ const withSavedSearches = <P extends InjectedSavedSearchesProps>(
     State
   >({
     displayName: `withSavedSearches(${getDisplayName(WrappedComponent)})`,
-    mixins: [Reflux.listenTo(SavedSearchesStore, 'onUpdate')],
+    mixins: [Reflux.listenTo(SavedSearchesStore, 'onUpdate') as any],
 
     getInitialState() {
       return SavedSearchesStore.get();
diff --git a/src/sentry/static/sentry/app/utils/withSentryAppComponents.tsx b/src/sentry/static/sentry/app/utils/withSentryAppComponents.tsx
index 2794a132be..647f9a5465 100644
--- a/src/sentry/static/sentry/app/utils/withSentryAppComponents.tsx
+++ b/src/sentry/static/sentry/app/utils/withSentryAppComponents.tsx
@@ -29,7 +29,7 @@ const withSentryAppComponents = <P extends InjectedAppComponentsProps>(
     State
   >({
     displayName: `withSentryAppComponents(${getDisplayName(WrappedComponent)})`,
-    mixins: [Reflux.connect(SentryAppComponentsStore, 'components')],
+    mixins: [Reflux.connect(SentryAppComponentsStore, 'components') as any],
 
     render() {
       return (
diff --git a/src/sentry/static/sentry/app/utils/withTeams.tsx b/src/sentry/static/sentry/app/utils/withTeams.tsx
index e160abd23a..94e1ceda2a 100644
--- a/src/sentry/static/sentry/app/utils/withTeams.tsx
+++ b/src/sentry/static/sentry/app/utils/withTeams.tsx
@@ -22,7 +22,7 @@ const withTeams = <P extends InjectedTeamsProps>(
 ) =>
   createReactClass<Omit<P, keyof InjectedTeamsProps>, State>({
     displayName: `withTeams(${getDisplayName(WrappedComponent)})`,
-    mixins: [Reflux.listenTo(TeamStore, 'onTeamUpdate')],
+    mixins: [Reflux.listenTo(TeamStore, 'onTeamUpdate') as any],
 
     getInitialState() {
       return {
diff --git a/yarn.lock b/yarn.lock
index 0aae1570c6..12e64df25a 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -2248,6 +2248,11 @@
     "@types/prop-types" "*"
     csstype "^2.2.0"
 
+"@types/reflux@0.4.1":
+  version "0.4.1"
+  resolved "https://registry.yarnpkg.com/@types/reflux/-/reflux-0.4.1.tgz#1f91d5ede2172c535107e9f79755bda70234f9c1"
+  integrity sha1-H5HV7eIXLFNRB+n3l1W9pwI0+cE=
+
 "@types/tapable@*":
   version "1.0.4"
   resolved "https://registry.yarnpkg.com/@types/tapable/-/tapable-1.0.4.tgz#b4ffc7dc97b498c969b360a41eee247f82616370"
