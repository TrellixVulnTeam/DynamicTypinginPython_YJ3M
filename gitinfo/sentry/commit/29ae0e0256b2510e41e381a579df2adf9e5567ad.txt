commit 29ae0e0256b2510e41e381a579df2adf9e5567ad
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Jan 25 14:28:36 2016 -0800

    Strip bad characters out of the http bodies
    
    If we get these bad characters, typically from binary data, we
    ultimately fail to serialize the structures back to a json string.
    
    This strips the bad characters in hopes that we can at least keep the
    data.
    
    Refs: GH-2482

diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index 833a45fc85..f00af78fab 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -59,11 +59,23 @@ def format_cookies(value):
         value = value.items()
 
     return [
-        (k.encode('utf8').strip(), v)
+        (k.encode('utf8', errors='replace').strip(), v)
         for k, v in value
     ]
 
 
+def fix_broken_encoding(value):
+    """
+    Strips broken characters that can't be represented at all
+    in utf8. This prevents our parsers from breaking elsewhere.
+    """
+    if isinstance(value, unicode):
+        value = value.encode('utf8', errors='replace')
+    if isinstance(value, str):
+        value = value.decode('utf8', errors='replace')
+    return value
+
+
 class Http(Interface):
     """
     The Request information is stored in the Http interface. Two arguments
@@ -153,7 +165,7 @@ class Http(Interface):
         kwargs['cookies'] = trim_pairs(format_cookies(cookies))
         kwargs['env'] = trim_dict(data.get('env') or {})
         kwargs['headers'] = trim_pairs(headers)
-        kwargs['data'] = body
+        kwargs['data'] = fix_broken_encoding(body)
         kwargs['url'] = urlunsplit((scheme, netloc, path, '', ''))
         kwargs['fragment'] = trim(fragment, 1024)
 
