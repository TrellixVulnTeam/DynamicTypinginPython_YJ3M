commit b6ab8b415109bd2feb03af2eaa94e47d08c31351
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Oct 29 09:58:38 2019 -0700

    feat(incidents): Change Incident Rules to require a single proâ€¦ (#15251)
    
    This is looking forward to upcoming changes where we will initially require a single project for incident rules. API stays the same, only UI changes

diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
index e25bf986ab..ab3ce4b248 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
@@ -18,10 +18,6 @@ import TriggersModal from 'app/views/settings/incidentRules/triggers/modal';
 import withOrganization from 'app/utils/withOrganization';
 import withProjects from 'app/utils/withProjects';
 
-type State = {
-  rule: IncidentRule;
-} & AsyncView['state'];
-
 type RouteParams = {
   orgId: string;
   incidentRuleId: string;
@@ -32,10 +28,9 @@ type Props = {
   projects: Project[];
 };
 
-const widthCss = css`
-  width: 80%;
-  margin-left: -40%;
-`;
+type State = {
+  rule: IncidentRule;
+} & AsyncView['state'];
 
 class IncidentRulesDetails extends AsyncView<
   RouteComponentProps<RouteParams, {}> & Props,
@@ -54,19 +49,25 @@ class IncidentRulesDetails extends AsyncView<
 
   openTriggersModal = (trigger?: Trigger) => {
     const {organization, projects} = this.props;
+    const {rule} = this.state;
 
     openModal(
       ({closeModal}) => (
         <TriggersModal
           organization={organization}
-          projects={projects || []}
-          rule={this.state.rule}
+          projects={projects}
+          rule={rule}
           trigger={trigger}
           closeModal={closeModal}
           onSubmitSuccess={trigger ? this.handleEditedTrigger : this.handleAddedTrigger}
         />
       ),
-      {dialogClassName: widthCss}
+      {
+        dialogClassName: css`
+          width: 80%;
+          margin-left: -40%;
+        `,
+      }
     );
   };
 
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx
index 7660daddbb..e44e2cd465 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx
@@ -99,7 +99,7 @@ class IncidentRulesList extends AsyncView<Props, State> {
                     {rule.name}
                   </RuleLink>
 
-                  <MetricName>{getMetricDisplayName(rule.thresholdType)}</MetricName>
+                  <MetricName>{getMetricDisplayName(rule.aggregations[0])}</MetricName>
 
                   <ThresholdColumn>
                     <Thresholds>
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx
index af0e0145e8..08a089eb37 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx
@@ -55,34 +55,16 @@ class RuleForm extends React.Component<Props> {
                 placeholder: t('My Incident Rule Name'),
                 required: true,
               },
-              {
-                name: 'includeAllProjects',
-                type: 'boolean',
-                label: t('Apply to all Projects'),
-                help: t(
-                  'This should apply to all projects as well as all future projects'
-                ),
-              },
               {
                 name: 'projects',
                 type: 'select',
-                label: t('Projects'),
-                help: t('Select projects that this rule will apply to'),
+                label: t('Project'),
+                help: t('Select a project that this rule will apply to'),
                 choices: projects.map(({slug}) => [slug, slug]),
-                placeholder: t('All Projects'),
-                multiple: true,
+                getValue: value => [value],
+                setValue: value => (value.length ? value[0] : []),
+                placeholder: t('Select a project'),
                 required: true,
-                visible: ({model}) => !model.getValue('includeAllProjects'),
-              },
-              {
-                name: 'excludedProjects',
-                type: 'select',
-                label: t('Exclude Projects'),
-                help: t('Select projects that will be excluded from this rule'),
-                choices: projects.map(({slug}) => [slug, slug]),
-                placeholder: t('None'),
-                multiple: true,
-                visible: ({model}) => !!model.getValue('includeAllProjects'),
               },
               {
                 name: 'aggregations',
@@ -181,6 +163,7 @@ function RuleFormContainer({
         query: '',
         aggregations: DEFAULT_METRIC,
         projects: [],
+        includeAllProjects: false,
         excludedProjects: [],
 
         // TODO(incidents): Temp values
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/draggableChart.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/draggableChart.tsx
index c6878915af..4f4c88f1e7 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/draggableChart.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/draggableChart.tsx
@@ -6,23 +6,17 @@ import styled from 'react-emotion';
 import {ReactEchartsRef, Series, SeriesDataUnit} from 'app/types/echarts';
 import Graphic from 'app/components/charts/components/graphic';
 import LineChart from 'app/components/charts/lineChart';
-import SelectControl from 'app/components/forms/selectControl';
 import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 
-import {ProjectSelectOption} from './types';
-
 type Props = {
   xAxis: EChartOption.XAxis;
   data: Series[];
   alertThreshold: number | null;
   resolveThreshold: number | null;
   isInverted: boolean;
-  projectOptions: ProjectSelectOption[];
-  selectedProjects: ProjectSelectOption[];
   onChangeIncidentThreshold: (alertThreshold: number) => void;
   onChangeResolutionThreshold: (resolveThreshold: number) => void;
-  onChangeProjects: (projects: ProjectSelectOption) => void;
   maxValue?: number;
 };
 
@@ -233,7 +227,7 @@ export default class IncidentRulesChart extends React.Component<Props, State> {
   };
 
   render() {
-    const {data, xAxis, projectOptions, selectedProjects, onChangeProjects} = this.props;
+    const {data, xAxis} = this.props;
 
     const alertThresholdPosition =
       this.chartRef &&
@@ -244,12 +238,6 @@ export default class IncidentRulesChart extends React.Component<Props, State> {
 
     return (
       <Wrapper>
-        <CornerProjectSelect
-          value={selectedProjects.length && selectedProjects[0]}
-          options={projectOptions}
-          onChange={onChangeProjects}
-        />
-
         <LineChart
           isGroupedByDate
           forwardedRef={this.handleRef}
@@ -283,18 +271,3 @@ const Wrapper = styled('div')`
   position: relative;
   border-bottom: 1px solid ${p => p.theme.borderLight};
 `;
-
-const CornerProjectSelect = styled(SelectControl)`
-  position: absolute;
-  top: 0;
-  right: 0;
-  z-index: 1;
-  min-width: 150px;
-
-  .Select-control {
-    border-top: 0;
-    border-top-left-radius: 0;
-    border-bottom-right-radius: 0;
-    border-right: 0;
-  }
-`;
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx
index 596e6a3bbf..c32c507357 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx
@@ -10,14 +10,8 @@ import {getFormattedDate} from 'app/utils/dates';
 import EventsRequest from 'app/views/events/utils/eventsRequest';
 import LoadingMask from 'app/components/loadingMask';
 import Placeholder from 'app/components/placeholder';
-import SelectControl from 'app/components/forms/selectControl';
 
-import {
-  AlertRuleAggregations,
-  IncidentRule,
-  TimeWindow,
-  ProjectSelectOption,
-} from '../../types';
+import {AlertRuleAggregations, IncidentRule, TimeWindow} from '../../types';
 import DraggableChart from './draggableChart';
 
 type Props = {
@@ -34,22 +28,7 @@ type Props = {
   onChangeResolutionThreshold: (resolveThreshold: number) => void;
 };
 
-type State = {
-  // This is an array but we are only supporting a single project for now
-  selectedProjects: ProjectSelectOption[];
-};
-
-class TriggersChart extends React.Component<Props, State> {
-  state = {
-    selectedProjects: [],
-  };
-
-  handleSelectProjects = (selectedProjects: ProjectSelectOption) => {
-    this.setState({
-      selectedProjects: [selectedProjects],
-    });
-  };
-
+class TriggersChart extends React.Component<Props> {
   render() {
     const {
       api,
@@ -62,32 +41,17 @@ class TriggersChart extends React.Component<Props, State> {
       rule,
     } = this.props;
     const {timeWindow} = rule;
-    const {selectedProjects} = this.state;
-    const projectOptions = projects.map(({id, slug}) => ({
-      value: Number(id),
-      label: slug,
-    }));
 
-    // Show a placeholder with a message to select a project (as well as project selector)
+    const projectIdsFromRule = rule.projects.map(project => {
+      const found = projects.find(({slug}) => project === slug);
+      return found ? Number(found.id) : -1;
+    });
 
-    if (selectedProjects.length === 0) {
-      return (
-        <SelectProjectPlaceholder height="200px" bottomGutter={1}>
-          <SelectProjectWrapper>
-            Select Project to see last 24 hours of data
-            <SelectControl
-              options={projectOptions}
-              onChange={this.handleSelectProjects}
-            />
-          </SelectProjectWrapper>
-        </SelectProjectPlaceholder>
-      );
-    }
     return (
       <EventsRequest
         api={api}
         organization={organization}
-        project={selectedProjects.map(({value}) => value)}
+        project={projectIdsFromRule}
         interval={`${timeWindow}s`}
         period={getPeriodForTimeWindow(timeWindow)}
         yAxis={
@@ -132,9 +96,6 @@ class TriggersChart extends React.Component<Props, State> {
                     resolveThreshold={resolveThreshold}
                     isInverted={isInverted}
                     data={timeseriesData}
-                    projectOptions={projectOptions}
-                    selectedProjects={selectedProjects}
-                    onChangeProjects={this.handleSelectProjects}
                   />
                 </React.Fragment>
               )}
@@ -177,13 +138,3 @@ const TransparentLoadingMask = styled(LoadingMask)<{visible: boolean}>`
   opacity: 0.4;
   z-index: 1;
 `;
-
-const SelectProjectPlaceholder = styled(Placeholder)`
-  background-color: white;
-  border-bottom: 1px solid ${p => p.theme.borderLight};
-  align-items: center;
-`;
-
-const SelectProjectWrapper = styled('div')`
-  width: 40%;
-`;
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/modal.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/modal.tsx
index bdf95c579b..4978676fcb 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/modal.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/modal.tsx
@@ -46,9 +46,9 @@ class TriggersModal extends React.Component<Props> {
         <RuleName>{rule.name}</RuleName>
         <TriggerForm
           organization={organization}
-          projects={projects || []}
           orgId={organization.slug}
           onSubmitSuccess={this.handleSubmitSuccess}
+          projects={projects}
           rule={rule}
           trigger={trigger}
         />
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
index 617bdff17a..9dd6b455f0 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
@@ -30,21 +30,15 @@ export type SavedTrigger = UnsavedTrigger & {
 export type Trigger = Partial<SavedTrigger> & UnsavedTrigger;
 
 export type IncidentRule = {
-  aggregations: number[];
-  aggregation?: number;
-  alertThreshold: number;
-  dataset: 'events';
+  aggregations: AlertRuleAggregations[];
   dateAdded: string;
   dateModified: string;
   id: string;
   name: string;
-  projectId: string;
+  projects: string[];
   query: string;
-  resolution: number;
-  resolveThreshold: number;
   status: number;
-  thresholdPeriod: number;
-  thresholdType: number;
+  thresholdType: AlertRuleThresholdType;
   timeWindow: number;
   triggers: Trigger[];
 };
diff --git a/tests/js/sentry-test/fixtures/incidentRule.js b/tests/js/sentry-test/fixtures/incidentRule.js
index fa9d3882be..6fcf5f8774 100644
--- a/tests/js/sentry-test/fixtures/incidentRule.js
+++ b/tests/js/sentry-test/fixtures/incidentRule.js
@@ -14,7 +14,7 @@ export function IncidentRule(params) {
     timeWindow: 60,
     aggregations: [0],
     resolveThreshold: 13,
-    projectId: '1',
+    projects: ['project-slug'],
     resolution: 1,
     dateModified: '2019-07-31T23:02:02.731Z',
     triggers: [IncidentTrigger()],
diff --git a/tests/js/spec/views/settings/incidentRules/create.spec.jsx b/tests/js/spec/views/settings/incidentRules/create.spec.jsx
index 18b750aba8..816ad495c0 100644
--- a/tests/js/spec/views/settings/incidentRules/create.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/create.spec.jsx
@@ -5,6 +5,14 @@ import {initializeOrg} from 'sentry-test/initializeOrg';
 import IncidentRulesCreate from 'app/views/settings/incidentRules/create';
 
 describe('Incident Rules Create', function() {
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/tags/',
+      body: [],
+    });
+  });
+
   it('renders', function() {
     const {organization, routerContext} = initializeOrg();
     mountWithTheme(
diff --git a/tests/js/spec/views/settings/incidentRules/details.spec.jsx b/tests/js/spec/views/settings/incidentRules/details.spec.jsx
index b1d48687fd..2fdb73a33e 100644
--- a/tests/js/spec/views/settings/incidentRules/details.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/details.spec.jsx
@@ -6,9 +6,15 @@ import IncidentRulesDetails from 'app/views/settings/incidentRules/details';
 import GlobalModal from 'app/components/globalModal';
 
 describe('Incident Rules Details', function() {
-  MockApiClient.addMockResponse({
-    url: '/organizations/org-slug/tags/',
-    body: [],
+  beforeAll(function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/tags/',
+      body: [],
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/events-stats/',
+      body: null,
+    });
   });
 
   it('renders and adds and edits trigger', async function() {
diff --git a/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx b/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
index efda7d9595..81adb229b5 100644
--- a/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
@@ -38,39 +38,11 @@ describe('Incident Rules Form', function() {
     /**
      * Note this isn't necessarily the desired behavior, as it is just documenting the behavior
      */
-    it('keeps state of projects and excluded projects when toggling "Include all projects"', async function() {
+    it('creates a rule', async function() {
       const wrapper = createWrapper();
 
       selectByLabel(wrapper, 'project-slug', {name: 'projects'});
 
-      // Toggle include all projects to on
-      wrapper.find('button#includeAllProjects').simulate('click');
-
-      // Exclude 2nd project
-      selectByLabel(wrapper, 'project-2', {name: 'excludedProjects'});
-
-      // Toggle back to not include all projects
-      wrapper.find('button#includeAllProjects').simulate('click');
-
-      // Select field should have project-slug selected
-      expect(
-        wrapper
-          .find('SelectField[name="projects"] .Select-value-label')
-          .text()
-          .trim()
-      ).toBe('project-slug');
-
-      // Toggle back include all projects
-      wrapper.find('button#includeAllProjects').simulate('click');
-
-      // Select field should have project-slug selected
-      expect(
-        wrapper
-          .find('SelectField[name="excludedProjects"] .Select-value-label')
-          .text()
-          .trim()
-      ).toBe('project-2');
-
       // Enter in name so we can submit
       wrapper
         .find('input[name="name"]')
@@ -85,8 +57,7 @@ describe('Incident Rules Form', function() {
 
             // Note, backend handles this when ideally `includeAllProjects: true` should only send excludedProjects,
             // and `includeAllProjects: false` send `projects`
-            includeAllProjects: true,
-            excludedProjects: ['project-2'],
+            includeAllProjects: false,
             projects: ['project-slug'],
           }),
         })
@@ -106,59 +77,24 @@ describe('Incident Rules Form', function() {
       });
     });
 
-    it('keeps state of projects and excluded projects when toggling "Include all projects"', async function() {
+    it('edits projects', async function() {
       const wrapper = createWrapper({
         incidentRuleId: rule.id,
         initialData: rule,
         saveOnBlur: true,
       });
 
-      selectByLabel(wrapper, 'project-slug', {name: 'projects'});
-
-      expect(editRule).toHaveBeenLastCalledWith(
-        expect.anything(),
-        expect.objectContaining({
-          data: {
-            projects: ['project-slug'],
-          },
-        })
-      );
-      editRule.mockReset();
-
-      // Toggle include all projects to on
-      wrapper.find('button#includeAllProjects').simulate('click');
-      expect(editRule).toHaveBeenLastCalledWith(
-        expect.anything(),
-        expect.objectContaining({
-          data: {
-            includeAllProjects: true,
-          },
-        })
-      );
-      editRule.mockReset();
+      selectByLabel(wrapper, 'project-2', {name: 'projects'});
 
-      // Exclude 2nd project
-      selectByLabel(wrapper, 'project-2', {name: 'excludedProjects'});
       expect(editRule).toHaveBeenLastCalledWith(
         expect.anything(),
         expect.objectContaining({
           data: {
-            excludedProjects: ['project-2'],
+            projects: ['project-2'],
           },
         })
       );
       editRule.mockReset();
-
-      // Toggle back to not include all projects
-      wrapper.find('button#includeAllProjects').simulate('click');
-      expect(editRule).toHaveBeenLastCalledWith(
-        expect.anything(),
-        expect.objectContaining({
-          data: {
-            includeAllProjects: false,
-          },
-        })
-      );
     });
   });
 });
diff --git a/tests/js/spec/views/settings/incidentRules/triggers/modal.spec.jsx b/tests/js/spec/views/settings/incidentRules/triggers/modal.spec.jsx
index 02d94cdf87..36271162fd 100644
--- a/tests/js/spec/views/settings/incidentRules/triggers/modal.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/triggers/modal.spec.jsx
@@ -2,7 +2,6 @@ import {mountWithTheme} from 'sentry-test/enzyme';
 import React from 'react';
 
 import {initializeOrg} from 'sentry-test/initializeOrg';
-import {selectByLabel} from 'sentry-test/select';
 import TriggersModal from 'app/views/settings/incidentRules/triggers/modal';
 
 describe('Incident Rules -> Triggers Modal', function() {
@@ -26,16 +25,8 @@ describe('Incident Rules -> Triggers Modal', function() {
     });
   });
 
-  it('selects a Project to use for chart and changes project after chart renders', async function() {
+  it('renders chart', async function() {
     const wrapper = createWrapper();
-
-    expect(wrapper.find('SelectProjectPlaceholder')).toHaveLength(1);
-
-    await tick();
-    expect(statsMock).not.toHaveBeenCalled();
-
-    selectByLabel(wrapper, 'project-slug', {control: true});
-
     await tick();
     wrapper.update();
 
@@ -52,19 +43,5 @@ describe('Incident Rules -> Triggers Modal', function() {
 
     // Chart renders
     expect(wrapper.find('LineChart')).toHaveLength(1);
-
-    // Select a new project
-    selectByLabel(wrapper, 'project-2', {control: true});
-
-    // New API call for updated project
-    expect(statsMock).toHaveBeenCalledWith(
-      expect.anything(),
-      expect.objectContaining({
-        // Only check for project for now
-        query: expect.objectContaining({
-          project: [3],
-        }),
-      })
-    );
   });
 });
