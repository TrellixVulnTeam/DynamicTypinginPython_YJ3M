commit 33c1caec7343d87b837ba3919509b8c5fe844662
Author: Ben Vinegar <ben@benv.ca>
Date:   Fri Mar 18 11:28:57 2016 -0700

    Fix ProjectDetails not reloaing new projects

diff --git a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
index eb3e657ad1..eccb8f95be 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
@@ -180,8 +180,7 @@ const ProjectSelector = React.createClass({
     let orgId = org.slug;
     let projectId = project.slug;
 
-    let className = 'bookmark ' + project.isBookmarked ? 'icon-star-solid' : 'icon-star-outline';
-
+    let className = 'bookmark ' + (project.isBookmarked ? 'icon-star-solid' : 'icon-star-outline');
     return (
       <span>
         <a className={className} onClick={this.handleBookmarkClick.bind(this, project)}></a>
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index 9d04a916bf..cce21a1596 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -1,6 +1,5 @@
 import React from 'react';
 import Reflux from 'reflux';
-import update from 'react-addons-update';
 
 import ApiMixin from '../mixins/apiMixin';
 import DocumentTitle from 'react-document-title';
@@ -58,14 +57,13 @@ const ProjectDetails = React.createClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    if (nextProps.params.projectId !== this.props.params.projectId ||
-      nextProps.params.orgId != this.props.params.orgId) {
+    if (nextProps.params.projectId !== this.props.params.projectId) {
       this.remountComponent();
     }
   },
 
-  componentWillUpdate(nextProps, nextState) {
-    if (nextState.team.id !== this.state.team.id) {
+  componentDidUpdate(prevProps, prevState) {
+    if (prevProps.params.projectId !== this.props.params.projectId) {
       this.fetchData();
     }
   },
@@ -85,13 +83,14 @@ const ProjectDetails = React.createClass({
 
   onProjectChange(projectIds) {
     if (!projectIds.has(this.state.project.id)) return;
+
     this.setState({
       project: {...ProjectStore.getById(this.state.project.id)}
     });
   },
 
   identifyProject() {
-    let params = this.props.params;
+    let {params} = this.props;
     let projectSlug = params.projectId;
     let activeProject = null;
     let activeTeam = null;
@@ -115,6 +114,12 @@ const ProjectDetails = React.createClass({
     let [activeTeam, activeProject] = this.identifyProject();
     let hasAccess = activeTeam && activeTeam.hasAccess;
 
+    this.setState({
+      loading: true,
+      project: activeProject,
+      team: activeTeam
+    });
+
     if (activeProject && hasAccess) {
       // TODO(dcramer): move member list to organization level
       this.api.request(this.getMemberListEndpoint(), {
@@ -124,24 +129,18 @@ const ProjectDetails = React.createClass({
       });
 
       this.setState({
-        project: activeProject,
-        team: activeTeam,
         loading: false,
         error: false,
         errorType: null
       });
     } else if (activeTeam && activeTeam.isMember) {
       this.setState({
-        project: activeProject,
-        team: activeTeam,
         loading: false,
         error: true,
         errorType: ERROR_TYPES.MISSING_MEMBERSHIP
       });
     } else {
       this.setState({
-        project: activeProject,
-        team: activeTeam,
         loading: false,
         error: true,
         errorType: ERROR_TYPES.PROJECT_NOT_FOUND
