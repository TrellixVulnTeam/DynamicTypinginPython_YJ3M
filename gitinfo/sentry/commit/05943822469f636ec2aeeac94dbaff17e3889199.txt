commit 05943822469f636ec2aeeac94dbaff17e3889199
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Mar 9 12:04:55 2018 -0800

    feat(ui): Add UI for remove/transfer projects in React (#7269)
    
    * feat(ui): Add render prop for Confirm modal
    * fix sudo modal zindex

diff --git a/src/sentry/static/sentry/app/__mocks__/jquery.jsx b/src/sentry/static/sentry/app/__mocks__/jquery.jsx
index 4dd2e40521..66a03f3f5a 100644
--- a/src/sentry/static/sentry/app/__mocks__/jquery.jsx
+++ b/src/sentry/static/sentry/app/__mocks__/jquery.jsx
@@ -5,6 +5,7 @@ let jq = {
   off: () => jq,
   unbind: () => jq,
   ajaxError: () => jq,
+  simpleSlider: () => jq,
 };
 
 export default () => jq;
diff --git a/src/sentry/static/sentry/app/actionCreators/projects.jsx b/src/sentry/static/sentry/app/actionCreators/projects.jsx
index b1de48fca5..3c6f5326e9 100644
--- a/src/sentry/static/sentry/app/actionCreators/projects.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/projects.jsx
@@ -1,3 +1,5 @@
+import {addErrorMessage, addSuccessMessage} from './indicator';
+import {tct} from '../locale';
 import ProjectActions from '../actions/projectActions';
 
 export function update(api, params) {
@@ -34,3 +36,51 @@ export function loadStats(api, params) {
 export function setActiveProject(project) {
   ProjectActions.setActive(project);
 }
+
+export function removeProject(api, orgId, project) {
+  let endpoint = `/projects/${orgId}/${project.slug}/`;
+
+  ProjectActions.removeProject(project);
+  return api
+    .requestPromise(endpoint, {
+      method: 'DELETE',
+    })
+    .then(
+      () => {
+        ProjectActions.removeProjectSuccess(project);
+        addSuccessMessage(
+          tct('[project] was successfully removed', {project: project.slug})
+        );
+      },
+      err => {
+        ProjectActions.removeProjectError(project);
+        addErrorMessage(tct('Error removing [project]', {project: project.slug}));
+        throw err;
+      }
+    );
+}
+
+export function transferProject(api, orgId, project, email) {
+  let endpoint = `/projects/${orgId}/${project.slug}/transfer/`;
+
+  return api
+    .requestPromise(endpoint, {
+      method: 'POST',
+      data: {
+        email,
+      },
+    })
+    .then(
+      () => {
+        addSuccessMessage(
+          tct('A request was sent to move [project] to a different organization', {
+            project: project.slug,
+          })
+        );
+      },
+      err => {
+        addErrorMessage(tct('Error transferring [project]', {project: project.slug}));
+        throw err;
+      }
+    );
+}
diff --git a/src/sentry/static/sentry/app/actions/projectActions.jsx b/src/sentry/static/sentry/app/actions/projectActions.jsx
index 5257c34d69..abd4ac9e68 100644
--- a/src/sentry/static/sentry/app/actions/projectActions.jsx
+++ b/src/sentry/static/sentry/app/actions/projectActions.jsx
@@ -8,5 +8,8 @@ export default Reflux.createActions([
   'loadStats',
   'loadStatsError',
   'loadStatsSuccess',
+  'removeProject',
+  'removeProjectError',
+  'removeProjectSuccess',
   'setActive',
 ]);
diff --git a/src/sentry/static/sentry/app/components/confirm.jsx b/src/sentry/static/sentry/app/components/confirm.jsx
index 43da28ed3a..1832c3b23e 100644
--- a/src/sentry/static/sentry/app/components/confirm.jsx
+++ b/src/sentry/static/sentry/app/components/confirm.jsx
@@ -7,14 +7,21 @@ import {t} from '../locale';
 
 class Confirm extends React.PureComponent {
   static propTypes = {
-    disabled: PropTypes.bool,
-    message: PropTypes.node.isRequired,
     onConfirm: PropTypes.func.isRequired,
-    onConfirming: PropTypes.func,
-    onCancel: PropTypes.func,
-    priority: PropTypes.oneOf(['primary', 'danger']).isRequired,
     confirmText: PropTypes.string.isRequired,
     cancelText: PropTypes.string.isRequired,
+    priority: PropTypes.oneOf(['primary', 'danger']).isRequired,
+    message: PropTypes.node,
+    /**
+     * Renderer that passes:
+     * `confirm`: Allows renderer to perform confirm action
+     * `close`: Allows renderer to toggle confirm modal
+     */
+    renderMessage: PropTypes.func,
+
+    disabled: PropTypes.bool,
+    onConfirming: PropTypes.func,
+    onCancel: PropTypes.func,
   };
 
   static defaultProps = {
@@ -89,15 +96,32 @@ class Confirm extends React.PureComponent {
   };
 
   render() {
-    let {disabled, message, priority, confirmText, cancelText, children} = this.props;
-
-    let confirmMessage = React.isValidElement(message) ? (
-      message
-    ) : (
-      <p>
-        <strong>{message}</strong>
-      </p>
-    );
+    let {
+      disabled,
+      message,
+      renderMessage,
+      priority,
+      confirmText,
+      cancelText,
+      children,
+    } = this.props;
+
+    let confirmMessage;
+
+    if (typeof renderMessage === 'function') {
+      confirmMessage = renderMessage({
+        confirm: this.handleConfirm,
+        close: this.handleToggle,
+      });
+    } else {
+      confirmMessage = React.isValidElement(message) ? (
+        message
+      ) : (
+        <p>
+          <strong>{message}</strong>
+        </p>
+      );
+    }
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/components/modals/sudoModal.jsx b/src/sentry/static/sentry/app/components/modals/sudoModal.jsx
index ea73090d96..c250155d96 100644
--- a/src/sentry/static/sentry/app/components/modals/sudoModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/sudoModal.jsx
@@ -101,7 +101,7 @@ class SudoModal extends React.Component {
         </Header>
 
         <Body>
-          {this.state.busy && <LoadingIndicator overlay />}
+          {this.state.busy && <LoadingIndicator css={{zIndex: 1}} overlay />}
           <p>{t('Help us keep your account safe by confirming your identity.')}</p>
           {this.state.error && (
             <div className="alert alert-error alert-block">{t('Incorrect password')}</div>
diff --git a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
index 69167805c0..0c93595ab7 100644
--- a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
@@ -3,21 +3,20 @@ import PropTypes from 'prop-types';
 import React from 'react';
 
 import {getOrganizationState} from '../mixins/organizationState';
+import {removeProject, transferProject} from '../actionCreators/projects';
 import {t, tct} from '../locale';
 import AsyncView from './asyncView';
+import Button from '../components/buttons/button';
+import Confirm from '../components/confirm';
+import Field from './settings/components/forms/field';
 import Form from './settings/components/forms/form';
-
-import FieldControl from './settings/components/forms/field/fieldControl';
-import FieldDescription from './settings/components/forms/field/fieldDescription';
-import FieldLabel from './settings/components/forms/field/fieldLabel';
-import FieldHelp from './settings/components/forms/field/fieldHelp';
-import FieldWrapper from './settings/components/forms/field/fieldWrapper';
 import JsonForm from './settings/components/forms/jsonForm';
 import Panel from './settings/components/panel';
 import PanelAlert from './settings/components/panelAlert';
 import PanelHeader from './settings/components/panelHeader';
 import SettingsPageHeader from './settings/components/settingsPageHeader';
 import TextBlock from './settings/components/text/textBlock';
+import TextField from './settings/components/forms/textField';
 import projectFields from '../data/forms/projectGeneralSettings';
 
 const noMargin = {marginBottom: 0};
@@ -38,118 +37,181 @@ export default class ProjectGeneralSettings extends AsyncView {
     organization: PropTypes.object.isRequired,
   };
 
+  constructor(...args) {
+    super(...args);
+    this._form = {};
+  }
+
   getEndpoints() {
     let {orgId, projectId} = this.props.params;
     return [['data', `/projects/${orgId}/${projectId}/`]];
   }
 
-  renderRemoveProject() {
-    let {orgId, projectId} = this.props.params;
+  handleTransferFieldChange = (id, value) => {
+    this._form[id] = value;
+  };
 
+  handleRemoveProject = () => {
+    let {orgId} = this.props.params;
     let project = this.state.data;
+    if (!project) return;
+
+    removeProject(this.api, orgId, project).then(() => {
+      // Need to hard reload because lots of components do not listen to Projects Store
+      window.location.assign('/');
+    });
+  };
 
+  handleTransferProject = () => {
+    let {orgId} = this.props.params;
+    let project = this.state.data;
+    if (!project) return;
+    if (!this._form.email) return;
+
+    transferProject(this.api, orgId, project, this._form.email).then(() => {
+      // Need to hard reload because lots of components do not listen to Projects Store
+      window.location.assign('/');
+    });
+  };
+
+  renderRemoveProject() {
+    let project = this.state.data;
     let isProjectAdmin = getOrganizationState(this.context.organization)
       .getAccess()
       .has('project:admin');
+    let {isInternal} = project;
 
-    if (!isProjectAdmin) {
-      return (
-        <FieldWrapper inline>
-          <FieldDescription inline>
-            <FieldHelp>
-              {t('You do not have the required permission to remove this project.')}
-            </FieldHelp>
-          </FieldDescription>
-        </FieldWrapper>
-      );
-    } else if (project.isInternal) {
-      return (
-        <FieldWrapper inline>
-          <FieldDescription inline>
-            <FieldHelp>
-              {t(
-                'This project cannot be removed. It is used internally by the Sentry server.'
-              )}
-            </FieldHelp>
-          </FieldDescription>
-        </FieldWrapper>
-      );
-    } else {
-      return (
-        <FieldWrapper inline>
-          <FieldDescription inline>
-            <FieldLabel>{t('Remove Project')}</FieldLabel>
-            <FieldHelp>
-              Remove the <strong>{project.slug}</strong> project and all related data.
-              <br />
-              Careful, this action cannot be undone.
-            </FieldHelp>
-          </FieldDescription>
-          <FieldControl>
-            <a
-              href={`/${orgId}/${projectId}/settings/remove/`}
-              className="btn btn-danger"
+    return (
+      <Field
+        label={t('Remove Project')}
+        help={tct(
+          'Remove the [project] project and all related data. [linebreak] Careful, this action cannot be undone.',
+          {
+            project: <strong>{project.slug}</strong>,
+            linebreak: <br />,
+          }
+        )}
+      >
+        {!isProjectAdmin &&
+          t('You do not have the required permission to remove this project.')}
+
+        {isInternal &&
+          t(
+            'This project cannot be removed. It is used internally by the Sentry server.'
+          )}
+
+        {isProjectAdmin &&
+          !isInternal && (
+            <Confirm
+              onConfirm={this.handleRemoveProject}
+              priority="danger"
+              title={t('Remove project?')}
+              confirmText={t('Remove project')}
+              message={
+                <div>
+                  <TextBlock>
+                    <strong>
+                      {t('Removing this project is permanent and cannot be undone!')}
+                    </strong>
+                  </TextBlock>
+                  <TextBlock>
+                    {t('This will also remove all associated event data.')}
+                  </TextBlock>
+                </div>
+              }
             >
-              {t('Remove Project')}
-            </a>
-          </FieldControl>
-        </FieldWrapper>
-      );
-    }
+              <div>
+                <Button className="ref-remove-project" type="button" priority="danger">
+                  {t('Remove Project')}
+                </Button>
+              </div>
+            </Confirm>
+          )}
+      </Field>
+    );
   }
 
   renderTransferProject() {
-    let {orgId, projectId} = this.props.params;
-
     let project = this.state.data;
     let isProjectAdmin = getOrganizationState(this.context.organization)
       .getAccess()
       .has('project:admin');
+    let {isInternal} = project;
 
-    if (!isProjectAdmin) {
-      return (
-        <FieldWrapper inline>
-          <FieldDescription inline>
-            <FieldHelp>
-              {t('You do not have the required permission to transfer this project.')}
-            </FieldHelp>
-          </FieldDescription>
-        </FieldWrapper>
-      );
-    } else if (project.isInternal) {
-      return (
-        <FieldWrapper inline>
-          <FieldDescription inline>
-            <FieldHelp>
-              {t(
-                'This project cannot be removed. It is used internally by the Sentry server.'
+    return (
+      <Field
+        label={t('Transfer Project')}
+        help={tct(
+          'Transfer the [project] project and all related data. [linebreak] Careful, this action cannot be undone.',
+          {
+            project: <strong>{project.slug}</strong>,
+            linebreak: <br />,
+          }
+        )}
+      >
+        {!isProjectAdmin &&
+          t('You do not have the required permission to transfer this project.')}
+
+        {isInternal &&
+          t(
+            'This project cannot be transferred. It is used internally by the Sentry server.'
+          )}
+
+        {isProjectAdmin &&
+          !isInternal && (
+            <Confirm
+              onConfirm={this.handleTransferProject}
+              priority="danger"
+              title={`${t('Transfer project')}?`}
+              confirmText={t('Transfer project')}
+              renderMessage={({confirm}) => (
+                <div>
+                  <TextBlock>
+                    <strong>
+                      {t('Transferring this project is permanent and cannot be undone!')}
+                    </strong>
+                  </TextBlock>
+                  <TextBlock>
+                    {t(
+                      'Please enter the owner of the organization you would like to transfer this project to.'
+                    )}
+                  </TextBlock>
+                  <Panel>
+                    <PanelHeader>{t('Transfer to')}</PanelHeader>
+                    <Form
+                      hideFooter
+                      onFieldChange={this.handleTransferFieldChange}
+                      onSubmit={(data, onSuccess, onError, e) => {
+                        e.stopPropagation();
+                        confirm();
+                      }}
+                    >
+                      <TextField
+                        name="email"
+                        label={t('Organization Owner')}
+                        placeholder="admin@example.com"
+                        required
+                        help={tct(
+                          'A request will be emailed to the new owner in order to transfer [project] to a new organization.',
+                          {
+                            project: <strong> {project.slug} </strong>,
+                          }
+                        )}
+                      />
+                    </Form>
+                  </Panel>
+                </div>
               )}
-            </FieldHelp>
-          </FieldDescription>
-        </FieldWrapper>
-      );
-    } else {
-      return (
-        <FieldWrapper inline>
-          <FieldDescription inline>
-            <FieldLabel>{t('Transfer Project')}</FieldLabel>
-            <FieldHelp>
-              Transfer the <strong>{project.slug}</strong> project and all related data.
-              <br />
-              Careful, this action cannot be undone.
-            </FieldHelp>
-          </FieldDescription>
-          <FieldControl>
-            <a
-              href={`/${orgId}/${projectId}/settings/transfer/`}
-              className="btn btn-danger"
             >
-              {t('Transfer Project')}
-            </a>
-          </FieldControl>
-        </FieldWrapper>
-      );
-    }
+              <div>
+                <Button className="ref-transfer-project" type="button" priority="danger">
+                  {t('Transfer Project')}
+                </Button>
+              </div>
+            </Confirm>
+          )}
+      </Field>
+    );
   }
 
   renderBody() {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
index f3f95ffad5..ab866714a3 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
@@ -93,7 +93,12 @@ export default class Form extends React.Component {
     }
 
     if (this.props.onSubmit) {
-      this.props.onSubmit(this.model.getData(), this.onSubmitSuccess, this.onSubmitError);
+      this.props.onSubmit(
+        this.model.getData(),
+        this.onSubmitSuccess,
+        this.onSubmitError,
+        e
+      );
     } else {
       this.model.saveForm();
     }
diff --git a/tests/js/spec/views/projectGeneralSettings.spec.jsx b/tests/js/spec/views/projectGeneralSettings.spec.jsx
index 66c6006708..4bc9f419cf 100644
--- a/tests/js/spec/views/projectGeneralSettings.spec.jsx
+++ b/tests/js/spec/views/projectGeneralSettings.spec.jsx
@@ -7,11 +7,15 @@ import {Client} from 'app/api';
 import ProjectGeneralSettings from 'app/views/projectGeneralSettings';
 import theme from 'app/utils/theme';
 
+jest.mock('jquery');
+
 describe('projectGeneralSettings', function() {
   let org = TestStubs.Organization();
   let project = TestStubs.Project();
 
   beforeEach(function() {
+    sinon.stub(window.location, 'assign');
+    Client.clearMockResponses();
     Client.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/`,
       method: 'GET',
@@ -19,6 +23,10 @@ describe('projectGeneralSettings', function() {
     });
   });
 
+  afterEach(function() {
+    window.location.assign.restore();
+  });
+
   it('renders form fields', function() {
     let wrapper = mount(
       <ThemeProvider theme={theme}>
@@ -76,7 +84,12 @@ describe('projectGeneralSettings', function() {
     expect(wrapper.find('Switch[name="dataScrubber"]').prop('isActive')).toBe(true);
   });
 
-  it('project admins can transfer or remove project', function() {
+  it('project admins can remove project', function() {
+    let deleteMock = Client.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/`,
+      method: 'DELETE',
+    });
+
     let wrapper = mount(
       <ThemeProvider theme={theme}>
         <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />
@@ -84,11 +97,54 @@ describe('projectGeneralSettings', function() {
       TestStubs.routerContext()
     );
 
-    let removeBtn = wrapper.find('a.btn.btn-danger').first();
-    let transferBtn = wrapper.find('a.btn.btn-danger').at(1);
+    let removeBtn = wrapper.find('.ref-remove-project').first();
+
+    expect(removeBtn.prop('children')).toBe('Remove Project');
+
+    // Click button
+    removeBtn.simulate('click');
+
+    // Confirm Modal
+    wrapper.find('Modal Button[priority="danger"]').simulate('click');
+
+    expect(deleteMock).toHaveBeenCalled();
+  });
+
+  it('project admins can transfer project', function() {
+    let deleteMock = Client.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/transfer/`,
+      method: 'POST',
+    });
 
-    expect(removeBtn.text()).toBe('Remove Project');
-    expect(transferBtn.text()).toBe('Transfer Project');
+    let wrapper = mount(
+      <ThemeProvider theme={theme}>
+        <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />
+      </ThemeProvider>,
+      TestStubs.routerContext()
+    );
+
+    let removeBtn = wrapper.find('.ref-transfer-project').first();
+
+    expect(removeBtn.prop('children')).toBe('Transfer Project');
+
+    // Click button
+    removeBtn.simulate('click');
+
+    // Confirm Modal
+    wrapper
+      .find('input[name="email"]')
+      .simulate('change', {target: {value: 'billy@sentry.io'}});
+    wrapper.find('Modal Button[priority="danger"]').simulate('click');
+
+    expect(deleteMock).toHaveBeenCalledWith(
+      `/projects/${org.slug}/${project.slug}/transfer/`,
+      expect.objectContaining({
+        method: 'POST',
+        data: {
+          email: 'billy@sentry.io',
+        },
+      })
+    );
   });
 
   it('displays transfer/remove message for non-admins', function() {
