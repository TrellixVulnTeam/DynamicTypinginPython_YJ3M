commit 7d762d1db3f251962436629c902229b5001df553
Author: David Cramer <dcramer@gmail.com>
Date:   Thu May 11 16:31:20 2017 -0700

    various improvements

diff --git a/src/sentry/analytics/event.py b/src/sentry/analytics/event.py
index 32a1a1a82e..93ac7d43df 100644
--- a/src/sentry/analytics/event.py
+++ b/src/sentry/analytics/event.py
@@ -4,6 +4,7 @@ __all__ = ('Attribute', 'Event', 'Map')
 
 import six
 
+from collections import Mapping
 from django.utils import timezone
 
 
@@ -23,20 +24,27 @@ class Map(Attribute):
         self.attributes = attributes
 
     def type(self, value):
-        if not isinstance(value, dict):
+        if not isinstance(value, Mapping):
             raise ValueError('Value must be a dictionary')
 
+        # ensure we dont mutate the original
+        # we dont need to deepcopy as if it recurses into another Map it
+        # will once again copy itself
+        items = value.copy()
+
         data = {}
         for attr in self.attributes:
-            if attr.required:
-                nv = value.pop(attr.name)
-            else:
-                nv = value.pop(attr.name, None)
+            nv = items.pop(attr.name, None)
+            if attr.required and nv is None:
+                raise ValueError(u'{} is required (cannot be None)'.format(
+                    attr.name,
+                ))
+
             data[attr.name] = attr.type(nv) if nv is not None else nv
 
-        if value:
+        if items:
             raise ValueError(u'Unknown attributes: {}'.format(
-                ', '.join(value.keys()),
+                ', '.join(map(six.text_type, six.iterkeys(items))),
             ))
 
         return data
@@ -49,7 +57,7 @@ class Event(object):
 
     attributes = ()
 
-    def __init__(self, type=None, datetime=None, **kwargs):
+    def __init__(self, type=None, datetime=None, **items):
         self.datetime = datetime or timezone.now()
         if type is not None:
             self.type = type
@@ -59,15 +67,16 @@ class Event(object):
 
         data = {}
         for attr in self.attributes:
-            if attr.required:
-                value = kwargs.pop(attr.name)
-            else:
-                value = kwargs.pop(attr.name, None)
-            data[attr.name] = attr.type(value) if value is not None else value
+            nv = items.pop(attr.name, None)
+            if attr.required and nv is None:
+                raise ValueError(u'{} is required (cannot be None)'.format(
+                    attr.name,
+                ))
+            data[attr.name] = attr.type(nv) if nv is not None else nv
 
-        if kwargs:
+        if items:
             raise ValueError(u'Unknown attributes: {}'.format(
-                ', '.join(kwargs.keys()),
+                ', '.join(six.iterkeys(items)),
             ))
 
         self.data = data
diff --git a/tests/sentry/analytics/test_event.py b/tests/sentry/analytics/test_event.py
index 15652258c4..9c4288bd5a 100644
--- a/tests/sentry/analytics/test_event.py
+++ b/tests/sentry/analytics/test_event.py
@@ -39,6 +39,13 @@ class EventTest(TestCase):
             'optional': None,
         }
 
+    def test_required_cannot_be_none(self):
+        with pytest.raises(ValueError):
+            ExampleEvent(
+                id='1',
+                map={'key': None},
+            )
+
     def test_invalid_map(self):
         with pytest.raises(ValueError):
             ExampleEvent(id='1', map='foo')
