commit 9affc96554f55315c0b1453bafd4070139529bc1
Author: Bruno Garcia <github@brunogarcia.com>
Date:   Mon Apr 30 21:16:45 2018 +0200

    feat(contexts): Normalize known os.name to render UI context icons` (#8231)
    
    Following efforts to send more contextual data from the C# SDK, this PR intends to improve the visualization of the data extracted from the clients.

diff --git a/src/sentry/interfaces/contexts.py b/src/sentry/interfaces/contexts.py
index c74288a62d..80d0143078 100644
--- a/src/sentry/interfaces/contexts.py
+++ b/src/sentry/interfaces/contexts.py
@@ -15,6 +15,7 @@ from django.utils.encoding import force_text
 
 from sentry.utils.safe import trim
 from sentry.interfaces.base import Interface
+from sentry.utils.os_normalization import normalize
 
 __all__ = ('Contexts', )
 
@@ -142,6 +143,10 @@ class OsContextType(ContextType):
     }
     # build, rooted
 
+    def __init__(self, alias, data):
+        normalize(data)
+        super(OsContextType, self).__init__(alias, data)
+
 
 class Contexts(Interface):
     """
diff --git a/src/sentry/utils/os_normalization.py b/src/sentry/utils/os_normalization.py
new file mode 100644
index 0000000000..4d5dde4b66
--- /dev/null
+++ b/src/sentry/utils/os_normalization.py
@@ -0,0 +1,25 @@
+from __future__ import absolute_import
+import re
+
+# Environment.OSVersion (GetVersionEx) or RuntimeInformation.OSDescription, on Windows
+_windows_re = re.compile('^(Microsoft )?Windows (NT )?(?P<version>\d+\.\d+\.\d+).*$')
+# Environment.OSVersion or RuntimeInformation.OSDescription (uname)
+# on Mono and CoreCLR on macOS, iOS, Linux, etc
+_uname_re = re.compile('^(?P<name>[a-zA-Z]+) (?P<version>\d+\.\d+\.\d+(\.[1-9]+)?).*$')
+
+
+def normalize(data):
+    raw_description = data.get('raw_description')
+    # If there's no name and version, attempts to infer from raw_description
+    if raw_description is not None \
+            and data.get('name') is None \
+            and data.get('version') is None:
+        r = _windows_re.search(raw_description)
+        if r:
+            data['name'] = 'Windows'
+            data['version'] = r.group('version')
+        else:
+            r = _uname_re.search(raw_description)
+            if r:
+                data['name'] = r.group('name')
+                data['kernel_version'] = r.group('version')
diff --git a/tests/sentry/interfaces/test_contexts.py b/tests/sentry/interfaces/test_contexts.py
index b04e177aab..5d9330550b 100644
--- a/tests/sentry/interfaces/test_contexts.py
+++ b/tests/sentry/interfaces/test_contexts.py
@@ -29,6 +29,25 @@ class ContextsTest(TestCase):
             }
         }
 
+    def test_os_normalization(self):
+        ctx = Contexts.to_python({
+            'os': {
+                'raw_description': 'Microsoft Windows 6.1.7601 S'
+            },
+        })
+        assert sorted(ctx.iter_tags()) == [
+            ('os', 'Windows 6.1.7601'),
+            ('os.name', 'Windows')
+        ]
+        assert ctx.to_json() == {
+            'os': {
+                'type': 'os',
+                'raw_description': 'Microsoft Windows 6.1.7601 S',
+                'name': 'Windows',
+                'version': '6.1.7601'
+            }
+        }
+
     def test_runtime(self):
         ctx = Contexts.to_python(
             {
diff --git a/tests/sentry/utils/test_os_normalization.py b/tests/sentry/utils/test_os_normalization.py
new file mode 100644
index 0000000000..50432161f3
--- /dev/null
+++ b/tests/sentry/utils/test_os_normalization.py
@@ -0,0 +1,90 @@
+from __future__ import absolute_import
+from sentry.utils.os_normalization import normalize
+
+
+# Environment.OSVersion on Windows 7 (CoreCLR 1.0+, .NET Framework 1.1+, Mono 1+)
+def test_windows_7_or_server_2008():
+    data = {'raw_description': 'Microsoft Windows NT 6.1.7601 Service Pack 1'}
+    normalize(data)
+    assert data['name'] == 'Windows'
+    assert data['version'] == '6.1.7601'
+
+
+# Environment.OSVersion on Windows 10 (CoreCLR 1.0+, .NET Framework 1.1+, Mono 1+)
+# *or later, due to GetVersionEx deprecated on Windows 8.1
+# It's a potentially really misleading API on newer platforms
+# Only used if RuntimeInformation.OSDescription is not available (old runtimes)
+def test_windows_8_or_server_2012_or_later():
+    data = {'raw_description': 'Microsoft Windows NT 6.2.9200.0'}
+    normalize(data)
+    assert data['name'] == 'Windows'
+    assert data['version'] == '6.2.9200'
+
+
+# RuntimeInformation.OSDescription on Windows 10 (CoreCLR 2.0+, .NET Framework 4.7.1+, Mono 5.4+)
+def test_windows_10():
+    data = {'raw_description': 'Microsoft Windows 10.0.16299'}
+    normalize(data)
+    assert data['name'] == 'Windows'
+    assert data['version'] == '10.0.16299'
+
+
+# Environment.OSVersion on macOS (CoreCLR 1.0+, Mono 1+)
+def test_macos():
+    data = {'raw_description': 'Unix 17.5.0.0'}
+    normalize(data)
+    assert data['name'] == 'Unix'
+    assert data['kernel_version'] == '17.5.0'
+
+
+# Environment.OSVersion on CentOS 7 (CoreCLR 1.0+, Mono 1+)
+def test_centos_os_version():
+    data = {'raw_description': 'Unix 3.10.0.693'}
+    normalize(data)
+    assert data['name'] == 'Unix'
+    assert data['kernel_version'] == '3.10.0.693'
+
+
+# RuntimeInformation.OSDescription on CentOS 7 (CoreCLR 2.0+, Mono 5.4+)
+def test_centos_runtime_info():
+    data = {'raw_description': 'Linux 3.10.0-693.21.1.el7.x86_64 #1 SMP Wed Mar 7 19:03:37 UTC 2018'}
+    normalize(data)
+    assert data['name'] == 'Linux'
+    assert data['kernel_version'] == '3.10.0'
+
+
+# RuntimeInformation.OSDescription on macOS (CoreCLR 2.0+, Mono 5.4+)
+def test_darwin():
+    data = {'raw_description': 'Darwin 17.5.0 Darwin Kernel Version 17.5.0: Mon Mar  5 22:24:32 PST 2018; root:xnu-4570.51.1~1/RELEASE_X86_64'}
+    normalize(data)
+    assert data['name'] == 'Darwin'
+    assert data['kernel_version'] == '17.5.0'
+
+
+# RuntimeInformation.OSDescription on Windows Subsystem for Linux (Ubuntu) (CoreCLR 2.0+, Mono 5.4+)
+def test_wsl_ubuntu():
+    data = {'raw_description': 'Linux 4.4.0-43-Microsoft #1-Microsoft Wed Dec 31 14:42:53 PST 2014'}
+    normalize(data)
+    assert data['name'] == 'Linux'
+    assert data['kernel_version'] == '4.4.0'
+
+
+def test_name_not_overwritten():
+    data = {'name': 'Properly defined name', 'raw_description': 'Linux 4.4.0'}
+    normalize(data)
+    assert data['name'] == 'Properly defined name'
+
+
+def test_version_not_overwritten():
+    data = {'version': 'Properly defined version', 'raw_description': 'Linux 4.4.0'}
+    normalize(data)
+    assert data['version'] == 'Properly defined version'
+
+
+def test_no_name():
+    data = {}
+    normalize(data)
+    assert 'name' not in data
+    assert 'version' not in data
+    assert 'kernel_version' not in data
+    assert 'raw_description' not in data
