commit 2a23e3de2336bddfd9c983381f81c3be4cd986d1
Author: Stephen Cefali <scefali@sentry.io>
Date:   Mon May 18 13:16:56 2020 -0700

    feat(integrations): slack migration analytics (#18870)

diff --git a/src/sentry/analytics/events/integration_pipeline_step.py b/src/sentry/analytics/events/integration_pipeline_step.py
new file mode 100644
index 0000000000..6c4968fdeb
--- /dev/null
+++ b/src/sentry/analytics/events/integration_pipeline_step.py
@@ -0,0 +1,18 @@
+from __future__ import absolute_import, print_function
+
+from sentry import analytics
+
+
+class IntegrationPipelineStep(analytics.Event):
+    type = "integrations.pipeline_step"
+
+    attributes = (
+        analytics.Attribute("user_id"),
+        analytics.Attribute("organization_id"),
+        analytics.Attribute("integration"),
+        analytics.Attribute("step_index"),
+        analytics.Attribute("pipeline_type"),
+    )
+
+
+analytics.register(IntegrationPipelineStep)
diff --git a/src/sentry/integrations/slack/integration.py b/src/sentry/integrations/slack/integration.py
index 562508df39..365730657c 100644
--- a/src/sentry/integrations/slack/integration.py
+++ b/src/sentry/integrations/slack/integration.py
@@ -199,6 +199,7 @@ class SlackIntegrationProvider(IntegrationProvider):
             "missing_channels": missing_channels,
         }
         if private_channels or missing_channels:
+            logger.info("slack.integration.run_post_migration", extra=run_args)
             post_migration.run_post_migration.apply_async(kwargs=run_args)
         else:
             # if we don't have channels, log it so we know we skipped this
@@ -243,8 +244,7 @@ class SlackReAuthIntro(PipelineView):
 
         # if we dont have the integration_id we dont care about the
         # migration path, skip straight to install
-        pipeline.state.step_index = 2
-        return pipeline.current_step()
+        return pipeline.next_step(step_size=2)
 
 
 class SlackReAuthChannels(PipelineView):
diff --git a/src/sentry/pipeline/__init__.py b/src/sentry/pipeline/__init__.py
index b080505431..a47c8595af 100644
--- a/src/sentry/pipeline/__init__.py
+++ b/src/sentry/pipeline/__init__.py
@@ -9,6 +9,7 @@ from sentry.web.frontend.base import BaseView
 from sentry.utils.session_store import RedisSessionStore
 from sentry.utils.hashlib import md5_text
 from sentry.web.helpers import render_to_response
+from sentry import analytics
 
 
 class PipelineProvider(object):
@@ -227,11 +228,19 @@ class Pipeline(object):
         context = {"error": message}
         return render_to_response("sentry/pipeline-error.html", context, self.request)
 
-    def next_step(self):
+    def next_step(self, step_size=1):
         """
         Render the next step.
         """
-        self.state.step_index += 1
+        self.state.step_index += step_size
+        analytics.record(
+            "integrations.pipeline_step",
+            user_id=self.request.user.id,
+            organization_id=self.organization.id,
+            integration=self.provider.key,
+            step_index=self.state.step_index,
+            pipeline_type="reauth" if self.fetch_state("integration_id") else "install",
+        )
         return self.current_step()
 
     def finish_pipeline(self):
diff --git a/src/sentry/static/sentry/app/utils/integrationUtil.tsx b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
index 0eda725a41..15a713aaa7 100644
--- a/src/sentry/static/sentry/app/utils/integrationUtil.tsx
+++ b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
@@ -21,6 +21,8 @@ import HookStore from 'app/stores/hookStore';
 
 const INTEGRATIONS_ANALYTICS_SESSION_KEY = 'INTEGRATION_ANALYTICS_SESSION' as const;
 
+const FEATURES_TO_INCLUDE_IN_ANALYTICS = ['slack-migration'];
+
 export const startAnalyticsSession = () => {
   const sessionId = uniqueId();
   window.sessionStorage.setItem(INTEGRATIONS_ANALYTICS_SESSION_KEY, sessionId);
@@ -48,7 +50,10 @@ export type SingleIntegrationEvent = {
     | 'integrations.config_saved'
     | 'integrations.integration_tab_clicked'
     | 'integrations.plugin_add_to_project_clicked'
-    | 'integrations.upgrade_plan_modal_opened';
+    | 'integrations.upgrade_plan_modal_opened'
+    | 'integrations.resolve_now_clicked'
+    | 'integrations.reauth_start'
+    | 'integrations.reauth_complete';
   eventName:
     | 'Integrations: Install Modal Opened' //TODO: remove
     | 'Integrations: Installation Start'
@@ -62,20 +67,18 @@ export type SingleIntegrationEvent = {
     | 'Integrations: Integration Tab Clicked'
     | 'Integrations: Config Saved'
     | 'Integrations: Plugin Add to Project Clicked'
-    | 'Integrations: Upgrade Plan Modal Opened';
+    | 'Integrations: Upgrade Plan Modal Opened'
+    | 'Integrations: Resolve Now Clicked'
+    | 'Integrations: Reauth Start'
+    | 'Integrations: Reauth Complete';
   integration: string; //the slug
+  integration_type: 'plugin' | 'first_party' | 'sentry_app' | 'document_integration';
   already_installed?: boolean;
   integration_tab?: 'configurations' | 'overview';
   plan?: string;
-} & (SentryAppEvent | NonSentryAppEvent);
-
-type SentryAppEvent = {
-  integration_type: 'sentry_app';
   //include the status since people might do weird things testing unpublished integrations
-  integration_status: SentryAppStatus;
-};
-type NonSentryAppEvent = {
-  integration_type: 'plugin' | 'first_party';
+  integration_status?: SentryAppStatus;
+  referrer?: string; //where did the user come from
 };
 
 type MultipleIntegrationsEvent = {
@@ -135,10 +138,21 @@ export const trackIntegrationEvent = (
     sessionId = startAnalyticsSession();
   }
 
+  let features = {};
+  if (org) {
+    features = Object.fromEntries(
+      FEATURES_TO_INCLUDE_IN_ANALYTICS.map(f => [
+        `feature-${f}`,
+        org.features.includes(f),
+      ])
+    );
+  }
+
   const params = {
     analytics_session_id: sessionId,
     organization_id: org?.id,
     role: org?.role,
+    ...features,
     ...analyticsParams,
   };
 
@@ -276,3 +290,18 @@ export function isSlackWorkspaceApp(integration: Integration) {
 export function getReauthAlertText(provider: IntegrationProvider) {
   return provider.metadata.aspects?.reauthentication_alert?.alertText;
 }
+
+export const convertIntegrationTypeToSnakeCase = (
+  type: 'plugin' | 'firstParty' | 'sentryApp' | 'documentIntegration'
+) => {
+  switch (type) {
+    case 'firstParty':
+      return 'first_party';
+    case 'sentryApp':
+      return 'sentry_app';
+    case 'documentIntegration':
+      return 'document_integration';
+    default:
+      return type;
+  }
+};
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
index 9c20ae0d54..9fa6df0d9f 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
@@ -207,6 +207,7 @@ class AbstractIntegrationDetailedView<
       integration: this.integrationSlug,
       integration_type: this.integrationType,
       already_installed: this.installationStatus !== 'Not Installed', //pending counts as installed here
+      referrer: this.props.location.query.referrer,
       ...options,
     };
     //type cast here so TS won't complain
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.tsx
index 74668a4674..f282934e60 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.tsx
@@ -70,10 +70,16 @@ export default class AddIntegration extends React.Component<Props> {
   }
 
   openDialog = (urlParams?: {[key: string]: string}) => {
+    const {integrationId} = this.props;
+    //if we have the integrationId, it's used for the re-auth flow
     trackIntegrationEvent(
       {
-        eventKey: 'integrations.installation_start',
-        eventName: 'Integrations: Installation Start',
+        eventKey: integrationId
+          ? 'integrations.reauth_start'
+          : 'integrations.installation_start',
+        eventName: integrationId
+          ? 'Integrations: Reauth Start'
+          : 'Integrations: Installation Start',
         integration: this.props.provider.key,
         integration_type: 'first_party',
         ...this.props.analyticsParams,
@@ -86,8 +92,8 @@ export default class AddIntegration extends React.Component<Props> {
 
     const query: {[key: string]: string} = {...urlParams};
 
-    if (this.props.integrationId) {
-      query.integration_id = this.props.integrationId;
+    if (integrationId) {
+      query.integration_id = integrationId;
     }
 
     if (this.props.account) {
@@ -102,6 +108,7 @@ export default class AddIntegration extends React.Component<Props> {
   };
 
   didReceiveMessage = (message: MessageEvent) => {
+    const {integrationId} = this.props;
     if (message.origin !== document.location.origin) {
       return;
     }
@@ -124,8 +131,12 @@ export default class AddIntegration extends React.Component<Props> {
     this.props.onInstall(data);
     trackIntegrationEvent(
       {
-        eventKey: 'integrations.installation_complete',
-        eventName: 'Integrations: Installation Complete',
+        eventKey: integrationId
+          ? 'integrations.reauth_complete'
+          : 'integrations.installation_complete',
+        eventName: integrationId
+          ? 'Integrations: Reauth Complete'
+          : 'Integrations: Installation Complete',
         integration: this.props.provider.key,
         integration_type: 'first_party',
         ...this.props.analyticsParams,
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
index 437f9c772b..b0b6a1dedf 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
@@ -163,6 +163,7 @@ export default class InstalledIntegration extends React.Component<Props> {
                     priority="primary"
                     size="small"
                     buttonText={t('Upgrade Now')}
+                    organization={organization}
                     icon={<IconWarning size="sm" />}
                   />
                 </Tooltip>
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx
index 6547ac2b30..30d2c4aae6 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx
@@ -11,6 +11,10 @@ import PluginIcon from 'app/plugins/components/pluginIcon';
 import space from 'app/styles/space';
 import {Organization, SentryApp, IntegrationInstallationStatus} from 'app/types';
 import {t} from 'app/locale';
+import {
+  trackIntegrationEvent,
+  convertIntegrationTypeToSnakeCase,
+} from 'app/utils/integrationUtil';
 
 import IntegrationStatus from './integrationStatus';
 
@@ -96,7 +100,21 @@ const IntegrationRow = (props: Props) => {
         <AlertContainer>
           <Alert type="warning" icon={<IconWarning size="sm" />}>
             <span>{alertText}</span>
-            <ResolveNowButton href={`${baseUrl}?tab=configurations`} size="xsmall">
+            <ResolveNowButton
+              href={`${baseUrl}?tab=configurations&referrer=directory_resolve_now`}
+              size="xsmall"
+              onClick={() =>
+                trackIntegrationEvent(
+                  {
+                    eventKey: 'integrations.resolve_now_clicked',
+                    eventName: 'Integrations: Resolve Now Clicked',
+                    integration_type: convertIntegrationTypeToSnakeCase(type),
+                    integration: slug,
+                  },
+                  organization
+                )
+              }
+            >
               {t('Resolve Now')}
             </ResolveNowButton>
           </Alert>
