commit a418072946ebd2933724945e1ea2a833cf4c9b94
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jul 19 15:32:00 2017 -0700

    workflow: fix various behavior with GroupSnooze
    
    - activity entry was showing wrong value for duration
    - upon clearing of GroupSnooze, status was not reflected (fixes GH-5742)

diff --git a/src/sentry/models/groupsnooze.py b/src/sentry/models/groupsnooze.py
index 17ffe65867..2238745320 100644
--- a/src/sentry/models/groupsnooze.py
+++ b/src/sentry/models/groupsnooze.py
@@ -52,28 +52,24 @@ class GroupSnooze(Model):
             raise ValueError
 
         if self.until:
-            if self.until > timezone.now():
-                return True
+            if self.until <= timezone.now():
+                return False
 
         if self.count:
             if self.window:
                 if test_rates:
-                    if self.test_frequency_rates():
-                        return True
-                else:
-                    return True
-            elif self.count > group.times_seen - self.state['times_seen']:
-                return True
-
-        if self.user_count:
-            if not test_rates:
-                return True
+                    if not self.test_frequency_rates():
+                        return False
+            elif self.count <= group.times_seen - self.state['times_seen']:
+                return False
+
+        if self.user_count and test_rates:
             if self.user_window:
-                if self.test_user_rates():
-                    return True
-            elif self.user_count > group.count_users_seen() - self.state['users_seen']:
-                return True
-        return False
+                if not self.test_user_rates():
+                    return False
+            elif self.user_count <= group.count_users_seen() - self.state['users_seen']:
+                return False
+        return True
 
     def test_frequency_rates(self):
         from sentry.tsdb import backend as tsdb
diff --git a/src/sentry/static/sentry/app/components/activity/item.jsx b/src/sentry/static/sentry/app/components/activity/item.jsx
index 78bd28c891..6b57d13af3 100644
--- a/src/sentry/static/sentry/app/components/activity/item.jsx
+++ b/src/sentry/static/sentry/app/components/activity/item.jsx
@@ -125,7 +125,7 @@ const ActivityItem = React.createClass({
             {
               author: author,
               count: data.ignoreCount,
-              interval: <Duration seconds={data.ignoreWindow * 3600} />,
+              duration: <Duration seconds={data.ignoreWindow * 3600} />,
               issue: issueLink
             }
           );
@@ -141,7 +141,7 @@ const ActivityItem = React.createClass({
             {
               author: author,
               count: data.ignoreUserCount,
-              interval: <Duration seconds={data.ignoreUserWindow * 3600} />,
+              duration: <Duration seconds={data.ignoreUserWindow * 3600} />,
               issue: issueLink
             }
           );
diff --git a/src/sentry/static/sentry/app/views/groupActivity/index.jsx b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
index 520ceeffef..ff3fb0f2aa 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/index.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
@@ -73,7 +73,7 @@ const GroupActivity = React.createClass({
             {
               author: author,
               count: data.ignoreCount,
-              interval: <Duration seconds={data.ignoreWindow * 3600} />
+              duration: <Duration seconds={data.ignoreWindow * 3600} />
             }
           );
         } else if (data.ignoreCount) {
@@ -87,7 +87,7 @@ const GroupActivity = React.createClass({
             {
               author: author,
               count: data.ignoreUserCount,
-              interval: <Duration seconds={data.ignoreUserWindow * 3600} />
+              duration: <Duration seconds={data.ignoreUserWindow * 3600} />
             }
           );
         } else if (data.ignoreUserCount) {
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index abd7f30735..a8a7495cca 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -69,14 +69,15 @@ def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
 
     _capture_stats(event, is_new)
 
+    # we process snoozes before rules as it might create a regression
+    process_snoozes(event.group)
+
     rp = RuleProcessor(event, is_new, is_regression, is_sample)
     # TODO(dcramer): ideally this would fanout, but serializing giant
     # objects back and forth isn't super efficient
     for callback, futures in rp.apply():
         safe_execute(callback, event, futures)
 
-    process_snoozes(event.group)
-
     for plugin in plugins.for_project(event.project):
         plugin_post_process_group(
             plugin_slug=plugin.slug,
@@ -99,13 +100,14 @@ def record_additional_tags(event):
 
     added_tags = []
     for plugin in plugins.for_project(event.project, version=2):
-        added_tags.extend(safe_execute(plugin.get_tags, event, _with_transaction=False) or ())
+        added_tags.extend(safe_execute(
+            plugin.get_tags, event, _with_transaction=False) or ())
     if added_tags:
         Group.objects.add_tags(event.group, added_tags)
 
 
 def process_snoozes(group):
-    from sentry.models import GroupSnooze
+    from sentry.models import GroupSnooze, GroupStatus
 
     try:
         snooze = GroupSnooze.objects.get_from_cache(
@@ -116,6 +118,7 @@ def process_snoozes(group):
 
     if not snooze.is_valid(group, test_rates=True):
         snooze.delete()
+        group.update(status=GroupStatus.UNRESOLVED)
 
 
 @instrumented_task(
@@ -141,7 +144,8 @@ def record_affected_user(event, **kwargs):
         'project': event.project_id,
     })
 
-    user_data = event.data.get('sentry.interfaces.User', event.data.get('user'))
+    user_data = event.data.get(
+        'sentry.interfaces.User', event.data.get('user'))
     if not user_data:
         logger.info('No user data found for event_id=%s', event.event_id)
         return
diff --git a/tests/sentry/models/test_groupsnooze.py b/tests/sentry/models/test_groupsnooze.py
index 242341b7f6..2351f0b468 100644
--- a/tests/sentry/models/test_groupsnooze.py
+++ b/tests/sentry/models/test_groupsnooze.py
@@ -129,13 +129,15 @@ class GroupSnoozeTest(TestCase):
         snooze = GroupSnooze.objects.create(
             group=self.group,
             count=100,
-            window=60,
-        )
-        tsdb.incr(
-            tsdb.models.group,
-            self.group.id,
-            count=100,
-        )
+            window=24 * 60,
+        )
+        for n in range(6):
+            tsdb.incr(
+                tsdb.models.group,
+                self.group.id,
+                count=20,
+                timestamp=mock_now() - timedelta(minutes=n),
+            )
         assert not snooze.is_valid(test_rates=True)
 
     @mock.patch('django.utils.timezone.now')
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 22e064980a..f9518d03e9 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -6,7 +6,7 @@ from datetime import timedelta
 from django.utils import timezone
 from mock import Mock, patch
 
-from sentry.models import EventTag, GroupSnooze, TagKey, TagValue
+from sentry.models import EventTag, Group, GroupSnooze, GroupStatus, TagKey, TagValue
 from sentry.testutils import TestCase
 from sentry.tasks.merge import merge_group
 from sentry.tasks.post_process import index_event_tags, post_process_group
@@ -70,7 +70,7 @@ class PostProcessGroupTest(TestCase):
 
     @patch('sentry.tasks.post_process.record_affected_user', Mock())
     def test_invalidates_snooze(self):
-        group = self.create_group(project=self.project)
+        group = self.create_group(project=self.project, status=GroupStatus.IGNORED)
         event = self.create_event(group=group)
         snooze = GroupSnooze.objects.create(
             group=group,
@@ -88,6 +88,9 @@ class PostProcessGroupTest(TestCase):
             id=snooze.id,
         ).exists()
 
+        group = Group.objects.get(id=group.id)
+        assert group.status == GroupStatus.UNRESOLVED
+
     @patch('sentry.tasks.post_process.record_affected_user', Mock())
     def test_maintains_valid_snooze(self):
         group = self.create_group(project=self.project)
