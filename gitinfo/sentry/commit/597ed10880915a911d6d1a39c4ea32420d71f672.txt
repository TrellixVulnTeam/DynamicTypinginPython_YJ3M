commit 597ed10880915a911d6d1a39c4ea32420d71f672
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 27 19:42:01 2011 -0700

    Refactor store view into new api module

diff --git a/sentry/web/api.py b/sentry/web/api.py
new file mode 100644
index 0000000000..afed7189fd
--- /dev/null
+++ b/sentry/web/api.py
@@ -0,0 +1,155 @@
+"""
+sentry.web.views
+~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+import base64
+import datetime
+import logging
+import time
+import warnings
+import zlib
+
+from django.http import HttpResponse, HttpResponseBadRequest, \
+    HttpResponseForbidden, HttpResponseNotAllowed, HttpResponseGone
+from django.utils.encoding import smart_str
+from django.views.decorators.csrf import csrf_exempt
+
+from sentry.conf import settings
+from sentry.models import GroupedMessage, Message, Project, ProjectMember
+from sentry.utils import is_float, json
+from sentry.utils.auth import get_signature, parse_auth_header
+from sentry.utils.compat import pickle
+
+@csrf_exempt
+def store(request):
+    if request.method != 'POST':
+        return HttpResponseNotAllowed('This method only supports POST requests')
+
+    if request.META.get('HTTP_X_SENTRY_AUTH', '').startswith('Sentry'):
+        # Auth version 2.0
+        auth_vars = parse_auth_header(request.META['HTTP_X_SENTRY_AUTH'])
+    elif request.META.get('HTTP_AUTHORIZATION', '').startswith('Sentry'):
+        # Auth version 2.0
+        auth_vars = parse_auth_header(request.META['HTTP_AUTHORIZATION'])
+    else:
+        auth_vars = None
+
+    if auth_vars:
+        signature = auth_vars.get('sentry_signature')
+        timestamp = auth_vars.get('sentry_timestamp')
+        api_key = auth_vars.get('sentry_key')
+        # version = auth_vars.get('sentry_version')
+
+        if api_key:
+            try:
+                pm = ProjectMember.objects.get(api_key=api_key)
+            except ProjectMember.DoesNotExist:
+                return HttpResponseForbidden('Invalid signature')
+            project = pm.project
+            secret_key = pm.secret_key
+        else:
+            project = None
+            secret_key = settings.KEY
+
+        format = 'json'
+
+        data = request.raw_post_data
+
+        # Signed data packet
+        if signature and timestamp:
+            try:
+                timestamp = float(timestamp)
+            except ValueError:
+                return HttpResponseBadRequest('Invalid timestamp')
+
+            if timestamp < time.time() - 3600: # 1 hour
+                return HttpResponseGone('Message has expired')
+
+            sig_hmac = get_signature(data, timestamp, secret_key)
+            if sig_hmac != signature:
+                return HttpResponseForbidden('Invalid signature')
+        else:
+            return HttpResponse('Unauthorized', status_code=401)
+    else:
+        # Auth version 1.0
+        # deprecated
+        key = request.POST.get('key')
+
+        if not key:
+            return HttpResponseForbidden('Invalid credentials')
+
+        if key != settings.KEY:
+            warnings.warn('A client is sending the `key` parameter, which will be removed in Sentry 2.0', DeprecationWarning)
+            return HttpResponseForbidden('Invalid credentials')
+
+        data = request.POST.get('data')
+        if not data:
+            return HttpResponseBadRequest('Missing data')
+
+        format = request.POST.get('format', 'pickle')
+
+        if format not in ('pickle', 'json'):
+            return HttpResponseBadRequest('Invalid format')
+
+        project = None
+
+    logger = logging.getLogger('sentry.server')
+
+    try:
+        try:
+            data = base64.b64decode(data).decode('zlib')
+        except zlib.error:
+            data = base64.b64decode(data)
+    except Exception, e:
+        # This error should be caught as it suggests that there's a
+        # bug somewhere in the client's code.
+        logger.exception('Bad data received')
+        return HttpResponseForbidden('Bad data decoding request (%s, %s)' % (e.__class__.__name__, e))
+
+    try:
+        if format == 'pickle':
+            data = pickle.loads(data)
+        elif format == 'json':
+            data = json.loads(data)
+    except Exception, e:
+        # This error should be caught as it suggests that there's a
+        # bug somewhere in the client's code.
+        logger.exception('Bad data received')
+        return HttpResponseForbidden('Bad data reconstructing object (%s, %s)' % (e.__class__.__name__, e))
+
+    # XXX: ensure keys are coerced to strings
+    data = dict((smart_str(k), v) for k, v in data.iteritems())
+
+    if 'timestamp' in data:
+        if is_float(data['timestamp']):
+            try:
+                data['timestamp'] = datetime.datetime.fromtimestamp(float(data['timestamp']))
+            except:
+                logger.exception('Failed reading timestamp')
+                del data['timestamp']
+        elif not isinstance(data['timestamp'], datetime.datetime):
+            if '.' in data['timestamp']:
+                format = '%Y-%m-%dT%H:%M:%S.%f'
+            else:
+                format = '%Y-%m-%dT%H:%M:%S'
+            if 'Z' in data['timestamp']:
+                # support GMT market, but not other timestamps
+                format += 'Z'
+            try:
+                data['timestamp'] = datetime.datetime.strptime(data['timestamp'], format)
+            except:
+                logger.exception('Failed reading timestamp')
+                del data['timestamp']
+
+    # Confirm they're using either the master key, or their specified project matches with the
+    # signed project.
+    if project and str(data.get('project', '')) != str(project.pk):
+        return HttpResponseForbidden('Invalid credentials')
+
+    GroupedMessage.objects.from_kwargs(**data)
+
+    return HttpResponse()
\ No newline at end of file
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
index 5cc717b718..200f3b8139 100644
--- a/sentry/web/urls.py
+++ b/sentry/web/urls.py
@@ -12,7 +12,7 @@ from django.conf.urls.defaults import *
 from django.views.defaults import page_not_found
 
 from sentry.conf.settings import KEY
-from sentry.web import views, feeds
+from sentry.web import views, feeds, api
 
 handler404 = lambda x: page_not_found(x, template_name='sentry/404.html')
 
@@ -25,9 +25,9 @@ def handler500(request):
     """
     from django.template import Context, loader
     from django.http import HttpResponseServerError
-    
+
     context = {'request': request}
-    
+
     t = loader.get_template('sentry/500.html')
     return HttpResponseServerError(t.render(Context(context)))
 
@@ -39,11 +39,14 @@ urlpatterns = patterns('',
     url(r'^feeds/%s/messages.xml$' % re.escape(KEY), feeds.MessageFeed(), name='sentry-feed-messages'),
     url(r'^feeds/%s/summaries.xml$' % re.escape(KEY), feeds.SummaryFeed(), name='sentry-feed-summaries'),
 
-    # JS and API
+    # JS
 
     url(r'^jsapi/$', views.ajax_handler, name='sentry-ajax'),
-    url(r'^store/$', views.store, name='sentry-store'),
-    
+
+    # API
+
+    url(r'^store/$', api.store, name='sentry-store'),
+
     # Normal views
 
     url(r'^login$', views.login, name='sentry-login'),
diff --git a/sentry/web/views.py b/sentry/web/views.py
index 29b24a0b35..ad8bbed667 100644
--- a/sentry/web/views.py
+++ b/sentry/web/views.py
@@ -6,33 +6,24 @@ sentry.web.views
 :license: BSD, see LICENSE for more details.
 """
 
-import base64
 import datetime
-import logging
 import re
-import time
-import warnings
-import zlib
 
 from django.conf import settings as dj_settings
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse, resolve
 from django.db.models import Q
 from django.http import HttpResponse, HttpResponseBadRequest, \
-    HttpResponseForbidden, HttpResponseRedirect, Http404, HttpResponseNotModified, \
-    HttpResponseNotAllowed, HttpResponseGone
+    HttpResponseForbidden, HttpResponseRedirect, Http404, HttpResponseNotModified
 from django.shortcuts import get_object_or_404
 from django.template.loader import render_to_string
-from django.utils.encoding import smart_str
-from django.views.decorators.csrf import csrf_protect, csrf_exempt
+from django.views.decorators.csrf import csrf_protect
 
 from sentry.conf import settings
-from sentry.models import GroupedMessage, Message, Project, ProjectMember
+from sentry.models import GroupedMessage, Message, Project
 from sentry.plugins import GroupActionProvider
 from sentry.templatetags.sentry_helpers import with_priority
-from sentry.utils import get_filters, is_float, json
-from sentry.utils.auth import get_signature, parse_auth_header
-from sentry.utils.compat import pickle
+from sentry.utils import get_filters, json
 from sentry.utils.stacks import get_template_info
 
 uuid_re = re.compile(r'^[a-z0-9]{32}$')
@@ -507,136 +498,6 @@ def group_message_details(request, group_id, message_id):
         'request': request,
     })
 
-@csrf_exempt
-def store(request):
-    if request.method != 'POST':
-        return HttpResponseNotAllowed('This method only supports POST requests')
-
-    if request.META.get('HTTP_X_SENTRY_AUTH', '').startswith('Sentry'):
-        # Auth version 2.0
-        auth_vars = parse_auth_header(request.META['HTTP_X_SENTRY_AUTH'])
-    elif request.META.get('HTTP_AUTHORIZATION', '').startswith('Sentry'):
-        # Auth version 2.0
-        auth_vars = parse_auth_header(request.META['HTTP_AUTHORIZATION'])
-    else:
-        auth_vars = None
-
-    if auth_vars:
-        signature = auth_vars.get('sentry_signature')
-        timestamp = auth_vars.get('sentry_timestamp')
-        api_key = auth_vars.get('sentry_key')
-        # version = auth_vars.get('sentry_version')
-
-        if api_key:
-            try:
-                pm = ProjectMember.objects.get(api_key=api_key)
-            except ProjectMember.DoesNotExist:
-                return HttpResponseForbidden('Invalid signature')
-            project = pm.project
-            secret_key = pm.secret_key
-        else:
-            project = None
-            secret_key = settings.KEY
-
-        format = 'json'
-
-        data = request.raw_post_data
-
-        # Signed data packet
-        if signature and timestamp:
-            try:
-                timestamp = float(timestamp)
-            except ValueError:
-                return HttpResponseBadRequest('Invalid timestamp')
-
-            if timestamp < time.time() - 3600: # 1 hour
-                return HttpResponseGone('Message has expired')
-
-            sig_hmac = get_signature(data, timestamp, secret_key)
-            if sig_hmac != signature:
-                return HttpResponseForbidden('Invalid signature')
-        else:
-            return HttpResponse('Unauthorized', status_code=401)
-    else:
-        # Auth version 1.0
-        # deprecated
-        key = request.POST.get('key')
-
-        if not key:
-            return HttpResponseForbidden('Invalid credentials')
-
-        if key != settings.KEY:
-            warnings.warn('A client is sending the `key` parameter, which will be removed in Sentry 2.0', DeprecationWarning)
-            return HttpResponseForbidden('Invalid credentials')
-
-        data = request.POST.get('data')
-        if not data:
-            return HttpResponseBadRequest('Missing data')
-
-        format = request.POST.get('format', 'pickle')
-
-        if format not in ('pickle', 'json'):
-            return HttpResponseBadRequest('Invalid format')
-
-        project = None
-
-    logger = logging.getLogger('sentry.server')
-
-    try:
-        try:
-            data = base64.b64decode(data).decode('zlib')
-        except zlib.error:
-            data = base64.b64decode(data)
-    except Exception, e:
-        # This error should be caught as it suggests that there's a
-        # bug somewhere in the client's code.
-        logger.exception('Bad data received')
-        return HttpResponseForbidden('Bad data decoding request (%s, %s)' % (e.__class__.__name__, e))
-
-    try:
-        if format == 'pickle':
-            data = pickle.loads(data)
-        elif format == 'json':
-            data = json.loads(data)
-    except Exception, e:
-        # This error should be caught as it suggests that there's a
-        # bug somewhere in the client's code.
-        logger.exception('Bad data received')
-        return HttpResponseForbidden('Bad data reconstructing object (%s, %s)' % (e.__class__.__name__, e))
-
-    # XXX: ensure keys are coerced to strings
-    data = dict((smart_str(k), v) for k, v in data.iteritems())
-
-    if 'timestamp' in data:
-        if is_float(data['timestamp']):
-            try:
-                data['timestamp'] = datetime.datetime.fromtimestamp(float(data['timestamp']))
-            except:
-                logger.exception('Failed reading timestamp')
-                del data['timestamp']
-        elif not isinstance(data['timestamp'], datetime.datetime):
-            if '.' in data['timestamp']:
-                format = '%Y-%m-%dT%H:%M:%S.%f'
-            else:
-                format = '%Y-%m-%dT%H:%M:%S'
-            if 'Z' in data['timestamp']:
-                # support GMT market, but not other timestamps
-                format += 'Z'
-            try:
-                data['timestamp'] = datetime.datetime.strptime(data['timestamp'], format)
-            except:
-                logger.exception('Failed reading timestamp')
-                del data['timestamp']
-
-    # Confirm they're using either the master key, or their specified project matches with the
-    # signed project.
-    if project and str(data.get('project', '')) != str(project.pk):
-        return HttpResponseForbidden('Invalid credentials')
-
-    GroupedMessage.objects.from_kwargs(**data)
-
-    return HttpResponse()
-
 @login_required
 def group_plugin_action(request, group_id, slug):
     group = get_object_or_404(GroupedMessage, pk=group_id)
