commit db947d2f72c5fbbe5a840f2b48503aae72409351
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Fri Apr 10 15:35:46 2020 +0200

    fix(ui): small fixes data scrubbing (#18205)

diff --git a/src/sentry/static/sentry/app/components/forms/inputField.tsx b/src/sentry/static/sentry/app/components/forms/inputField.tsx
index e823d14d6c..f5ae36932f 100644
--- a/src/sentry/static/sentry/app/components/forms/inputField.tsx
+++ b/src/sentry/static/sentry/app/components/forms/inputField.tsx
@@ -25,7 +25,7 @@ export default class InputField<
   getField() {
     return (
       <input
-        id={this.getId()}
+        id={this.getId()} //TODO(Priscila): check the reason behind this. We are getting warnings if we have 2 or more fields with the same name, for instance in the DATA PRIVACY RULES
         type={this.getType()}
         className="form-control"
         autoComplete={this.props.autoComplete}
diff --git a/src/sentry/static/sentry/app/components/tooltip.tsx b/src/sentry/static/sentry/app/components/tooltip.tsx
index 92d5338052..48f964f021 100644
--- a/src/sentry/static/sentry/app/components/tooltip.tsx
+++ b/src/sentry/static/sentry/app/components/tooltip.tsx
@@ -174,7 +174,7 @@ class Tooltip extends React.Component<Props, State> {
   render() {
     const {disabled, children, title, position, popperStyle, isHoverable} = this.props;
     const {isOpen} = this.state;
-    if (disabled || title === '') {
+    if (disabled) {
       return children;
     }
 
@@ -198,6 +198,7 @@ class Tooltip extends React.Component<Props, State> {
               aria-hidden={!isOpen}
               ref={ref}
               style={style}
+              hide={!title}
               data-placement={placement}
               popperStyle={popperStyle}
               onMouseEnter={() => isHoverable && this.handleOpen()}
@@ -234,7 +235,7 @@ const Container = styled('span')<{
   max-width: 100%;
 `;
 
-const TooltipContent = styled('div')<Pick<Props, 'popperStyle'>>`
+const TooltipContent = styled('div')<{hide: boolean} & Pick<Props, 'popperStyle'>>`
   color: #fff;
   background: #000;
   opacity: 0.9;
@@ -252,6 +253,7 @@ const TooltipContent = styled('div')<Pick<Props, 'popperStyle'>>`
   margin: 6px;
   text-align: center;
   ${p => p.popperStyle as any};
+  ${p => p.hide && `display: none`};
 `;
 
 const TooltipArrow = styled('span')`
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesEventIdField.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesEventIdField.tsx
index b52f36c13d..ccfe3e79ce 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesEventIdField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesEventIdField.tsx
@@ -48,7 +48,7 @@ const DataPrivacyRulesEventIdField = ({
   onKeyDown,
   disabled,
 }: Props) => (
-  <Tooltip title={getEventTooltipTitle(status)}>
+  <Tooltip isHoverable title={getEventTooltipTitle(status)}>
     <TooltipContent>
       <StyledTextField
         name="eventId"
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx
index edd5d73caa..d2ad7d1a9e 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx
@@ -412,15 +412,19 @@ class DataPrivacyRulesPanel extends React.Component<Props, State> {
             ))}
           </PanelBody>
           <DataPrivacyRulesPanelFooter
-            hideButtonBar={
-              (savedRules.length === 0 && rules.length === 0) ||
-              isEqual(rules, savedRules)
-            }
             onAddRule={this.handleAddRule}
             onCancel={this.handleCancelForm}
             onSave={this.handleSaveForm}
             disabled={disabled}
-            disableSaveButton={!isFormValid}
+            disableCancelbutton={
+              (savedRules.length === 0 && rules.length === 0) ||
+              isEqual(rules, savedRules)
+            }
+            disableSaveButton={
+              !isFormValid ||
+              (savedRules.length === 0 && rules.length === 0) ||
+              isEqual(rules, savedRules)
+            }
           />
         </Panel>
       </React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelFooter.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelFooter.tsx
index fa4f1fea99..a622b363bf 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelFooter.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelFooter.tsx
@@ -11,9 +11,9 @@ type Props = {
   onAddRule: () => void;
   onSave: () => void;
   onCancel: () => void;
-  hideButtonBar: boolean;
   disabled?: boolean;
   disableSaveButton?: boolean;
+  disableCancelbutton?: boolean;
 };
 
 const DataPrivacyRulesPanelFooter = ({
@@ -21,8 +21,8 @@ const DataPrivacyRulesPanelFooter = ({
   onAddRule,
   onCancel,
   onSave,
-  hideButtonBar,
   disableSaveButton,
+  disableCancelbutton,
 }: Props) => (
   <PanelAction>
     <ButtonAddRuleLink
@@ -43,24 +43,26 @@ const DataPrivacyRulesPanelFooter = ({
     >
       {t('Add Rule')}
     </ButtonAddRule>
-    {!hideButtonBar && (
-      <Actions>
-        <ButtonBar gap={1.5}>
-          <Button size="small" onClick={onCancel} disabled={disabled}>
-            {t('Cancel')}
-          </Button>
-          <Button
-            size="small"
-            priority="primary"
-            onClick={onSave}
-            disabled={disabled || disableSaveButton}
-          >
-            {t('Save Rules')}
-          </Button>
-        </ButtonBar>
-        <Info>{t('The new rules will only apply to upcoming events')}</Info>
-      </Actions>
-    )}
+    <Actions>
+      <ButtonBar gap={1.5}>
+        <Button
+          size="small"
+          onClick={onCancel}
+          disabled={disabled || disableCancelbutton}
+        >
+          {t('Cancel')}
+        </Button>
+        <Button
+          size="small"
+          priority="primary"
+          onClick={onSave}
+          disabled={disabled || disableSaveButton}
+        >
+          {t('Save Rules')}
+        </Button>
+      </ButtonBar>
+      <Info>{t('The new rules will only apply to upcoming events')}</Info>
+    </Actions>
   </PanelAction>
 );
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
index 793478f965..8f309d6f7a 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
@@ -98,7 +98,7 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
     const {errors} = this.state;
 
     return (
-      <Wrapper hasError={Object.keys(errors).length > 0}>
+      <Wrapper>
         <WrapperFields>
           <StyledSelectControl
             placeholder={t('Select method')}
@@ -107,7 +107,6 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
               label: getMethodTypeSelectorFieldLabel(value),
               value,
             }))}
-            height={34}
             value={method}
             onChange={({value}) => this.handleChange('method', value)}
             isDisabled={disabled}
@@ -121,7 +120,6 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
               label: getRuleTypeSelectorFieldLabel(value),
               value,
             }))}
-            height={34}
             value={type}
             onChange={({value}) => this.handleChange('type', value)}
             isDisabled={disabled}
@@ -172,8 +170,8 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
 
 export default DataPrivacyRulesForm;
 
-const Wrapper = styled('div')<{hasError?: boolean}>`
-  padding: ${p => `${space(p.hasError ? 2 : 1.5)} ${space(2)}`};
+const Wrapper = styled('div')`
+  padding: ${space(3)} ${space(2)};
   display: grid;
   grid-gap: ${space(2)};
   grid-template-columns: 1fr;
@@ -188,6 +186,7 @@ const Wrapper = styled('div')<{hasError?: boolean}>`
 const WrapperFields = styled('div')`
   display: grid;
   grid-gap: ${space(2)};
+  grid-row-gap: ${space(3)};
   align-items: flex-start;
   justify-items: start;
 
@@ -202,7 +201,7 @@ const WrapperFields = styled('div')`
 
 const FromLabel = styled('div')<{disabled?: boolean}>`
   color: ${p => (p.disabled ? p.theme.disabled : p.theme.gray5)};
-  height: 34px;
+  height: 100%;
   align-items: center;
   display: flex;
   width: 100%;
@@ -216,6 +215,7 @@ const From = styled('div')`
   grid-column-start: 1;
   grid-gap: ${space(2)};
   width: 100%;
+  height: 34px;
 
   @media (min-width: ${p => p.theme.breakpoints[3]}) {
     grid-column-end: auto;
@@ -223,6 +223,7 @@ const From = styled('div')`
   }
 `;
 
+// TODO(Priscila): make possible to set min-height in the SelectControl
 const StyledSelectControl = styled(SelectControl)<{isDisabled?: boolean}>`
   width: 100%;
   line-height: 18px;
@@ -232,9 +233,10 @@ const StyledSelectControl = styled(SelectControl)<{isDisabled?: boolean}>`
       cursor: not-allowed;
       pointer-events: auto;
     `}
-
+  height: 34px;
   > *:first-child {
-    min-height: 34px;
+    height: 34px;
+    min-height: 34px !important;
   }
 `;
 
@@ -242,17 +244,13 @@ const CustomRegularExpression = styled(TextField)<{error?: string}>`
   grid-column-start: 1;
   grid-column-end: -1;
   width: 100%;
-  height: 34px;
-  font-family: ${p => p.theme.text.familyMono};
   font-size: ${p => p.theme.fontSizeSmall};
+  height: 34px;
   input {
     height: 34px;
+    font-family: ${p => p.theme.text.familyMono};
   }
-  ${p =>
-    !p.error &&
-    `
-      margin-bottom: 0;
-    `}
+  margin-bottom: 0;
 `;
 
 const StyledIconTrash = styled(Button)<{fullHeight?: boolean}>`
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.tsx
index 7a1faac2a1..71261b1b58 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.tsx
@@ -1,8 +1,6 @@
 import React from 'react';
 import styled from '@emotion/styled';
-import debounce from 'lodash/debounce';
 
-import {DEFAULT_DEBOUNCE_DURATION} from 'app/constants';
 import space from 'app/styles/space';
 import {t} from 'app/locale';
 import TextField from 'app/components/forms/textField';
@@ -47,11 +45,13 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
 
   componentDidMount() {
     this.loadFieldValues(this.props.value);
+    this.hideSuggestions();
   }
 
   componentDidUpdate(prevProps: Props) {
     if (prevProps.selectorSuggestions !== this.props.selectorSuggestions) {
       this.loadFieldValues(this.props.value);
+      this.hideSuggestions();
     }
   }
 
@@ -99,9 +99,9 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
       s => s.value.toLowerCase().indexOf(value.toLowerCase()) > -1
     );
 
-    const showSuggestions =
-      !(filteredSuggestions.length === 1 && filteredSuggestions[0].value === value) &&
-      this.state.fieldValues.length !== 0;
+    const showSuggestions = !(
+      filteredSuggestions.length === 1 && filteredSuggestions[0].value === value
+    );
 
     this.setState({
       showSuggestions,
@@ -164,12 +164,29 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
     return this.getFilteredSuggestions(lastFieldValue?.value, lastFieldValue?.type);
   };
 
+  hideSuggestions = () => {
+    this.setState({
+      showSuggestions: false,
+    });
+  };
+
   loadFieldValues = (newValue: string) => {
-    const splittedValue = newValue.split(' ');
     const fieldValues: Array<Suggestion | Array<Suggestion>> = [];
 
+    const splittedValue = newValue.split(' ');
+
     for (const splittedValueIndex in splittedValue) {
       const value = splittedValue[splittedValueIndex];
+      const lastFieldValue = fieldValues[fieldValues.length - 1];
+
+      if (
+        lastFieldValue &&
+        !Array.isArray(lastFieldValue) &&
+        !lastFieldValue.value &&
+        !value
+      ) {
+        continue;
+      }
 
       if (value.includes('!') && !!value.split('!')[1]) {
         const valueAfterUnaryOperator = value.split('!')[1];
@@ -288,58 +305,37 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
     });
   };
 
-  handleKeyDown = debounce(
-    (event: React.KeyboardEvent<HTMLInputElement>) => {
-      event.persist();
-
-      const {keyCode} = event;
-      const {fieldValues, activeSuggestion, suggestions} = this.state;
-
-      if (keyCode === 8) {
-        const lastFieldValue = fieldValues[fieldValues.length - 1];
-        if (Array.isArray(lastFieldValue) && lastFieldValue[1].value.length === 1) {
-          this.setState({
-            fieldValues: [...fieldValues, lastFieldValue[0]],
-          });
-        }
-        return;
-      }
+  handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    event.persist();
 
-      if (keyCode === 13) {
-        this.handleClickSuggestionItem(suggestions[activeSuggestion])();
-        return;
-      }
+    const {keyCode} = event;
+    const {activeSuggestion, suggestions} = this.state;
 
-      if (keyCode === 38) {
-        if (activeSuggestion === 0) {
-          return;
-        }
-        this.setState({activeSuggestion: activeSuggestion - 1}, () => {
-          this.scrollToSuggestion();
-        });
-        return;
-      }
+    if (keyCode === 13) {
+      this.handleClickSuggestionItem(suggestions[activeSuggestion])();
+      return;
+    }
 
-      if (keyCode === 40) {
-        if (activeSuggestion === suggestions.length - 1) {
-          return;
-        }
-        this.setState({activeSuggestion: activeSuggestion + 1}, () => {
-          this.scrollToSuggestion();
-        });
+    if (keyCode === 38) {
+      if (activeSuggestion === 0) {
         return;
       }
+      this.setState({activeSuggestion: activeSuggestion - 1}, () => {
+        this.scrollToSuggestion();
+      });
+      return;
+    }
 
-      if (keyCode === 32) {
-        this.setState({
-          fieldValues: [...fieldValues, {value: ' ', type: 'string'}],
-        });
+    if (keyCode === 40) {
+      if (activeSuggestion === suggestions.length - 1) {
         return;
       }
-    },
-    DEFAULT_DEBOUNCE_DURATION,
-    {leading: true}
-  );
+      this.setState({activeSuggestion: activeSuggestion + 1}, () => {
+        this.scrollToSuggestion();
+      });
+      return;
+    }
+  };
 
   handleFocus = () => {
     this.setState({
@@ -401,16 +397,12 @@ const Wrapper = styled('div')`
 
 const StyledTextField = styled(TextField)<{error?: string}>`
   width: 100%;
-  height: 34px;
   font-size: ${p => p.theme.fontSizeSmall};
+  height: 34px;
   input {
     height: 34px;
   }
-  ${p =>
-    !p.error &&
-    `
-      margin-bottom: 0;
-    `}
+  margin-bottom: 0;
 `;
 
 const SuggestionsWrapper = styled('ul')`
diff --git a/tests/js/spec/components/tooltip.spec.jsx b/tests/js/spec/components/tooltip.spec.jsx
index a8560d48ab..f36ee3595e 100644
--- a/tests/js/spec/components/tooltip.spec.jsx
+++ b/tests/js/spec/components/tooltip.spec.jsx
@@ -5,7 +5,7 @@ import Tooltip from 'app/components/tooltip';
 
 describe('Tooltip', function() {
   it('renders', function() {
-    const wrapper = mount(
+    const wrapper = mountWithTheme(
       <Tooltip title="test">
         <span>My Button</span>
       </Tooltip>
@@ -50,7 +50,7 @@ describe('Tooltip', function() {
   });
 
   it('does not render an empty tooltip', function() {
-    const wrapper = mount(
+    const wrapper = mountWithTheme(
       <Tooltip title="">
         <span>My Button</span>
       </Tooltip>,
@@ -59,8 +59,8 @@ describe('Tooltip', function() {
     const trigger = wrapper.find('span');
     trigger.simulate('mouseEnter');
 
-    const tooltip = document.querySelector('#tooltip-portal .tooltip-content');
-    expect(tooltip).toBeFalsy();
+    const tooltipContent = wrapper.find('TooltipContent');
+    expect(tooltipContent.prop('hide')).toBe(true);
 
     trigger.simulate('mouseLeave');
   });
diff --git a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesPanelSelectorField.spec.tsx.snap b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesPanelSelectorField.spec.tsx.snap
index 7f27873305..bd7ef4c75f 100644
--- a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesPanelSelectorField.spec.tsx.snap
+++ b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesPanelSelectorField.spec.tsx.snap
@@ -82,7 +82,7 @@ exports[`DataPrivacyRulesPanelSelectorField default render 1`] = `
       >
         <TextField
           autoComplete="off"
-          className="css-16uh7iz-StyledTextField e1e07je01"
+          className="css-lml2jl-StyledTextField e1e07je01"
           disabled={false}
           hideErrorMessage={false}
           name="from"
@@ -94,7 +94,7 @@ exports[`DataPrivacyRulesPanelSelectorField default render 1`] = `
           value="$string"
         >
           <div
-            className="css-16uh7iz-StyledTextField e1e07je01 control-group"
+            className="css-lml2jl-StyledTextField e1e07je01 control-group"
           >
             <div
               className="controls"
