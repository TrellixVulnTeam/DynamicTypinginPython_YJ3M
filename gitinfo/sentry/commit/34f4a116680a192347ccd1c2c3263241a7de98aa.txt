commit 34f4a116680a192347ccd1c2c3263241a7de98aa
Author: Mark Story <mark@sentry.io>
Date:   Tue Oct 29 11:12:48 2019 -0400

    ref(ts) Convert UserAvatar to Typescript (#15293)
    
    I've had to introduce a new partial User type for use in the Avatar
    context. This lets us typehint against a subset of the very large user
    object as we don't need it all.

diff --git a/src/sentry/static/sentry/app/components/avatar/baseAvatar.tsx b/src/sentry/static/sentry/app/components/avatar/baseAvatar.tsx
index d101d3f126..22398d035f 100644
--- a/src/sentry/static/sentry/app/components/avatar/baseAvatar.tsx
+++ b/src/sentry/static/sentry/app/components/avatar/baseAvatar.tsx
@@ -43,7 +43,7 @@ type Props = {
   /**
    * The content for the tooltip. Requires hasTooltip to display
    */
-  tooltip?: Pick<Tooltip['props'], 'title'>;
+  tooltip?: React.ReactNode;
   /**
    * Additional props for the tooltip
    */
diff --git a/src/sentry/static/sentry/app/components/avatar/userAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/userAvatar.jsx
deleted file mode 100644
index 0619fe9d24..0000000000
--- a/src/sentry/static/sentry/app/components/avatar/userAvatar.jsx
+++ /dev/null
@@ -1,65 +0,0 @@
-import React from 'react';
-import PropTypes from 'prop-types';
-
-import {userDisplayName} from 'app/utils/formatters';
-import BaseAvatar from 'app/components/avatar/baseAvatar';
-import SentryTypes from 'app/sentryTypes';
-
-class UserAvatar extends React.Component {
-  static propTypes = {
-    user: SentryTypes.User,
-    gravatar: PropTypes.bool,
-    renderTooltip: PropTypes.func,
-    ...BaseAvatar.propTypes,
-  };
-
-  static defaultProps = {
-    // Default gravatar to false in order to support transparent avatars
-    // Avatar falls through to letter avatars if a remote image fails to load,
-    // however gravatar sends back a transparent image when it does not find a gravatar,
-    // so there's little we have to control whether we need to fallback to letter avatar
-    gravatar: false,
-  };
-
-  getType = (user, gravatar) => {
-    if (user.avatar) {
-      return user.avatar.avatarType;
-    }
-    if (user.options && user.options.avatarType) {
-      return user.options.avatarType;
-    }
-
-    return user.email && gravatar ? 'gravatar' : 'letter_avatar';
-  };
-
-  render() {
-    const {user, gravatar, renderTooltip, ...props} = this.props;
-
-    if (!user) {
-      return null;
-    }
-
-    const type = this.getType(user, gravatar);
-
-    return (
-      <BaseAvatar
-        round
-        {...props}
-        type={type}
-        uploadPath="avatar"
-        uploadId={user.avatar && user.avatar.avatarUuid}
-        gravatarId={user && user.email && user.email.toLowerCase()}
-        letterId={user.email || user.username || user.id || user.ip_address}
-        tooltip={
-          typeof renderTooltip === 'function'
-            ? renderTooltip(user)
-            : props.tooltip
-            ? props.tooltip
-            : userDisplayName(user)
-        }
-        title={user.name || user.email || user.username || ''}
-      />
-    );
-  }
-}
-export default UserAvatar;
diff --git a/src/sentry/static/sentry/app/components/avatar/userAvatar.tsx b/src/sentry/static/sentry/app/components/avatar/userAvatar.tsx
new file mode 100644
index 0000000000..1639973215
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/avatar/userAvatar.tsx
@@ -0,0 +1,85 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import {AvatarUser} from 'app/types';
+import {userDisplayName} from 'app/utils/formatters';
+import BaseAvatar from 'app/components/avatar/baseAvatar';
+import SentryTypes from 'app/sentryTypes';
+
+type RenderTooltipFunc = (user: AvatarUser) => React.ReactNode;
+
+// Type Guard for render prop
+function isRenderFunc(func: any): func is RenderTooltipFunc {
+  return typeof func === 'function';
+}
+
+const defaultProps = {
+  // Default gravatar to false in order to support transparent avatars
+  // Avatar falls through to letjer avatars if a remote image fails to load,
+  // however gravatar sends back a transparent image when it does not find a gravatar,
+  // so there's little we have to control whether we need to fallback to letter avatar
+  gravatar: false,
+};
+
+type DefaultProps = typeof defaultProps;
+
+type Props = {
+  user: AvatarUser;
+  renderTooltip?: RenderTooltipFunc;
+} & Partial<DefaultProps> &
+  BaseAvatar['props'];
+
+class UserAvatar extends React.Component<Props> {
+  static propTypes: any = {
+    user: SentryTypes.User,
+    gravatar: PropTypes.bool,
+    renderTooltip: PropTypes.func,
+    ...BaseAvatar.propTypes,
+  };
+
+  static defaultProps = defaultProps;
+
+  getType = (user: AvatarUser, gravatar: boolean | undefined) => {
+    if (user.avatar) {
+      return user.avatar.avatarType;
+    }
+    if (user.options && user.options.avatarType) {
+      return user.options.avatarType;
+    }
+
+    return user.email && gravatar ? 'gravatar' : 'letter_avatar';
+  };
+
+  render() {
+    const {user, gravatar, renderTooltip, ...props} = this.props;
+
+    if (!user) {
+      return null;
+    }
+
+    const type = this.getType(user, gravatar);
+    let tooltip: React.ReactNode = null;
+    if (isRenderFunc(renderTooltip)) {
+      tooltip = renderTooltip(user);
+    } else if (props.tooltip) {
+      tooltip = props.tooltip;
+    } else {
+      tooltip = userDisplayName(user);
+    }
+
+    return (
+      <BaseAvatar
+        round
+        {...props}
+        type={type}
+        uploadPath="avatar"
+        uploadId={user.avatar ? user.avatar.avatarUuid || '' : ''}
+        gravatarId={user && user.email && user.email.toLowerCase()}
+        letterId={user.email || user.username || user.id || user.ip_address}
+        tooltip={tooltip}
+        title={user.name || user.email || user.username || ''}
+      />
+    );
+  }
+}
+export default UserAvatar;
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index d17c9e3056..4f313dadca 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -163,8 +163,24 @@ export type EventsStats = {
   totals?: {count: number};
 };
 
-export type User = {
+// Avatars are a more primitive version of User.
+export type AvatarUser = {
+  id: string;
+  name: string;
   username: string;
+  email: string;
+  avatarUrl: string;
+  avatar: {
+    avatarUuid: string | null;
+    avatarType: 'letter_avatar' | 'upload';
+  };
+  ip_address: string;
+  options?: {
+    avatarType: string;
+  };
+};
+
+export type User = AvatarUser & {
   lastLogin: string;
   isSuperuser: boolean;
   emails: {
@@ -176,12 +192,9 @@ export type User = {
   lastActive: string;
   isStaff: boolean;
   identities: any[];
-  id: string;
   isActive: boolean;
   has2fa: boolean;
   canReset2fa: boolean;
-  name: string;
-  avatarUrl: string;
   authenticators: Authenticator[];
   dateJoined: string;
   options: {
@@ -189,13 +202,11 @@ export type User = {
     stacktraceOrder: number;
     language: string;
     clock24Hours: boolean;
+    avatarType: string;
   };
   flags: {newsletter_consent_prompt: boolean};
-  avatar: {avatarUuid: string | null; avatarType: 'letter_avatar' | 'upload'};
-  ip_address: string;
   hasPasswordAuth: boolean;
   permissions: Set<string>;
-  email: string;
 };
 
 export type CommitAuthor = {
diff --git a/tests/js/spec/components/avatar/__snapshots__/avatarList.spec.jsx.snap b/tests/js/spec/components/avatar/__snapshots__/avatarList.spec.jsx.snap
index b1be68eccc..2f87cdfd6a 100644
--- a/tests/js/spec/components/avatar/__snapshots__/avatarList.spec.jsx.snap
+++ b/tests/js/spec/components/avatar/__snapshots__/avatarList.spec.jsx.snap
@@ -248,6 +248,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                 }
               }
               type="letter_avatar"
+              uploadId=""
               uploadPath="avatar"
             >
               <Tooltip
@@ -446,6 +447,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                 }
               }
               type="letter_avatar"
+              uploadId=""
               uploadPath="avatar"
             >
               <Tooltip
@@ -644,6 +646,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                 }
               }
               type="letter_avatar"
+              uploadId=""
               uploadPath="avatar"
             >
               <Tooltip
@@ -842,6 +845,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                 }
               }
               type="letter_avatar"
+              uploadId=""
               uploadPath="avatar"
             >
               <Tooltip
@@ -1040,6 +1044,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                 }
               }
               type="letter_avatar"
+              uploadId=""
               uploadPath="avatar"
             >
               <Tooltip
@@ -1290,6 +1295,7 @@ exports[`AvatarList renders with user avatars 1`] = `
                 }
               }
               type="letter_avatar"
+              uploadId=""
               uploadPath="avatar"
             >
               <Tooltip
@@ -1488,6 +1494,7 @@ exports[`AvatarList renders with user avatars 1`] = `
                 }
               }
               type="letter_avatar"
+              uploadId=""
               uploadPath="avatar"
             >
               <Tooltip
diff --git a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
index fe1e6e44af..a933aff53d 100644
--- a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
@@ -753,6 +753,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
                                     title="Foo Bar"
                                     tooltip="Foo Bar (foo@example.com)"
                                     type="letter_avatar"
+                                    uploadId=""
                                     uploadPath="avatar"
                                   >
                                     <Tooltip
@@ -3540,6 +3541,7 @@ exports[`Sidebar renders without org and router 1`] = `
                                     title="Foo Bar"
                                     tooltip="Foo Bar (foo@example.com)"
                                     type="letter_avatar"
+                                    uploadId=""
                                     uploadPath="avatar"
                                   >
                                     <Tooltip
diff --git a/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap b/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
index bc370104b4..0dd5adf5da 100644
--- a/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
@@ -2564,6 +2564,7 @@ exports[`RuleBuilder renders with suggestions 1`] = `
                                               title="Jane Doe"
                                               tooltip="Jane Doe (janedoe@example.com)"
                                               type="letter_avatar"
+                                              uploadId=""
                                               uploadPath="avatar"
                                             >
                                               <Tooltip
diff --git a/tests/js/spec/views/releases/detail/__snapshots__/releaseCommits.spec.jsx.snap b/tests/js/spec/views/releases/detail/__snapshots__/releaseCommits.spec.jsx.snap
index c7ec0352fa..35a7aecb10 100644
--- a/tests/js/spec/views/releases/detail/__snapshots__/releaseCommits.spec.jsx.snap
+++ b/tests/js/spec/views/releases/detail/__snapshots__/releaseCommits.spec.jsx.snap
@@ -216,7 +216,7 @@ Users now have access to useful links from the blogs and docs on Spike-protectio
                                   title="Foo Bar"
                                   tooltip="Foo Bar (example@sentry.io)"
                                   type="letter_avatar"
-                                  uploadId={null}
+                                  uploadId=""
                                   uploadPath="avatar"
                                 >
                                   <Tooltip
@@ -590,7 +590,7 @@ Users now have access to useful links from the blogs and docs on Spike-protectio
                                   title="Foo Bar"
                                   tooltip="Foo Bar (example@sentry.io)"
                                   type="letter_avatar"
-                                  uploadId={null}
+                                  uploadId=""
                                   uploadPath="avatar"
                                 >
                                   <Tooltip
