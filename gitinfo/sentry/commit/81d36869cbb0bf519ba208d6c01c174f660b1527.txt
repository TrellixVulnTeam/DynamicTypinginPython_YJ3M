commit 81d36869cbb0bf519ba208d6c01c174f660b1527
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Oct 23 17:12:02 2011 -0700

    Some initial work on validation and tests for the group manager

diff --git a/sentry/exceptions.py b/sentry/exceptions.py
new file mode 100644
index 0000000000..5e9552acf6
--- /dev/null
+++ b/sentry/exceptions.py
@@ -0,0 +1,5 @@
+class InvalidData(Exception):
+    pass
+
+class InvalidInterface(InvalidData):
+    pass
\ No newline at end of file
diff --git a/sentry/models.py b/sentry/models.py
index cf12279148..e29707c7ad 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -25,7 +25,7 @@ from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.conf import settings
-from sentry.utils import cached_property, construct_checksum, get_filters, \
+from sentry.utils import cached_property, get_filters, \
                          MockDjangoRequest
 from sentry.utils.models import Model, GzippedDictField
 from sentry.utils.manager import GroupManager
@@ -252,11 +252,6 @@ class Event(MessageBase):
     def __unicode__(self):
         return self.error()
 
-    def save(self, *args, **kwargs):
-        if not self.checksum:
-            self.checksum = construct_checksum(**self.__dict__)
-        super(Event, self).save(*args, **kwargs)
-
     @models.permalink
     def get_absolute_url(self):
         if self.project_id:
diff --git a/sentry/utils/__init__.py b/sentry/utils/__init__.py
index 99fa0037bc..f16bc03199 100644
--- a/sentry/utils/__init__.py
+++ b/sentry/utils/__init__.py
@@ -6,7 +6,6 @@ sentry.utils
 :license: BSD, see LICENSE for more details.
 """
 
-import hashlib
 import logging
 from pprint import pformat
 
@@ -49,26 +48,6 @@ def get_db_engine(alias='default'):
         value = django_settings.DATABASE_ENGINE
     return value.rsplit('.', 1)[-1]
 
-def construct_checksum(level=logging.ERROR, class_name='', traceback='', message='', **kwargs):
-    checksum = hashlib.md5(str(level))
-    checksum.update(class_name or '')
-
-    if 'data' in kwargs and kwargs['data'] and '__sentry__' in kwargs['data'] and 'frames' in kwargs['data']['__sentry__']:
-        frames = kwargs['data']['__sentry__']['frames']
-        for frame in frames:
-            checksum.update(frame['module'])
-            checksum.update(frame['function'])
-
-    elif traceback:
-        traceback = '\n'.join(traceback.split('\n')[:-3])
-
-    elif message:
-        if isinstance(message, unicode):
-            message = message.encode('utf-8', 'replace')
-        checksum.update(message)
-
-    return checksum.hexdigest()
-
 class _Missing(object):
 
     def __repr__(self):
diff --git a/sentry/utils/manager.py b/sentry/utils/manager.py
index d6abff989c..4aa9bd282d 100644
--- a/sentry/utils/manager.py
+++ b/sentry/utils/manager.py
@@ -7,6 +7,7 @@ sentry.utils.manager
 """
 
 import datetime
+import hashlib
 import logging
 import warnings
 
@@ -14,8 +15,9 @@ from django.db import models
 from django.db.models import Sum, F
 
 from sentry.conf import settings
+from sentry.exceptions import InvalidInterface, InvalidData
 from sentry.signals import regression_signal
-from sentry.utils import construct_checksum, get_db_engine, should_mail
+from sentry.utils import get_db_engine, should_mail
 from sentry.utils.charts import has_charts
 from sentry.utils.compat.db import connections
 
@@ -70,9 +72,23 @@ def time_limit(silence): # ~ 3600 per hour
         return 60
     return 10000
 
+class ModuleProxyCache(dict):
+    def __missing__(self, key):
+        module, class_name = key.rsplit('.', 1)
+
+        handler = getattr(__import__(module, {}, {}, [class_name], -1), class_name)
+
+        self[key] = handler
+
+        return handler
+
 class GroupManager(models.Manager):
     use_for_related_fields = True
 
+    def __init__(self, *args, **kwargs):
+        super(GroupManager, self).__init__(*args, **kwargs)
+        self.module_cache = ModuleProxyCache()
+
     def convert_legacy_kwargs(self, kwargs):
         from sentry.interfaces import Http, User, Exception, Stacktrace, Template
         from sentry.utils.template_info import get_template_info
@@ -85,7 +101,7 @@ class GroupManager(models.Manager):
             'level': kwargs.pop('level', None),
             'logger': kwargs.pop('logger', None),
             'server_name': kwargs.pop('server_name', None),
-            'message': kwargs.pop('message'),
+            'message': kwargs.pop('message', ''),
             'culprit': kwargs.pop('view', None),
             'date': kwargs.pop('timestamp', None),
         }
@@ -95,14 +111,15 @@ class GroupManager(models.Manager):
             result['message'] = '%s: %s' % (class_name, result['message'])
 
         if 'url' in data or 'url' in kwargs and 'META' in data:
-            meta = data.pop('META')
+            meta = data.pop('META', {})
             req_data = data.pop('POST', None) or data.pop('GET', None)
             result['sentry.interfaces.Http'] = Http(
-                url=data.pop('url', kwargs['url']),
-                method=meta['REQUEST_METHOD'],
-                query_string=meta['QUERY_STRING'],
+                url=data.pop('url', None) or kwargs['url'],
+                method=meta.get('REQUEST_METHOD'),
+                query_string=meta.get('QUERY_STRING'),
                 data=req_data,
-                cookies=meta.get('COOKIES')
+                cookies=meta.get('COOKIES'),
+                env=meta,
             ).serialize()
 
         if 'user' in sentry:
@@ -157,12 +174,28 @@ class GroupManager(models.Manager):
         date = kwargs.pop('date', None) or datetime.datetime.now()
         extra = kwargs.pop('extra', None)
 
+        if not message:
+            raise InvalidData('Missing required parameter: message')
+
         checksum = kwargs.pop('checksum', None)
-        # TODO: should checksum still be optional? probably; we need to fix the method
         if not checksum:
-            checksum = construct_checksum(**kwargs)
+            checksum = hashlib.md5(message).hexdigest()
 
         data = kwargs
+
+        for k, v in kwargs.iteritems():
+            if '.' not in k:
+                raise InvalidInterface('%r is not a valid interface name' % k)
+            try:
+                interface = self.module_cache[k]
+            except ImportError, e:
+                raise InvalidInterface('%r is not a valid interface name: %s' % (k, e))
+
+            try:
+                data[k] = interface(**v).serialize()
+            except Exception, e:
+                raise InvalidData('Unable to validate interface, %r: %s' % (k, e))
+
         # TODO: at this point we should validate what is left in kwargs (it should either
         #       be an interface or it should be in ``extra``)
         if extra:
diff --git a/sentry/web/views.py b/sentry/web/views.py
index 74889432f7..6c738f1105 100644
--- a/sentry/web/views.py
+++ b/sentry/web/views.py
@@ -284,7 +284,6 @@ def search(request, project):
 
 @login_required
 def dashboard(request):
-    raise
     return render_to_response('sentry/dashboard.html', {
         'request': request,
     })
diff --git a/tests/tests.py b/tests/tests.py
index 11b3c32458..07c1d478f4 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -13,8 +13,10 @@ from django.core import mail
 from django.core.urlresolvers import reverse
 
 from sentry.conf import settings
+from sentry.exceptions import InvalidInterface, InvalidData
+from sentry.interfaces import Interface
 from sentry.models import Event, Group, MessageCountByMinute, \
-                          FilterValue, MessageFilterValue
+                          FilterValue, MessageFilterValue, Project
 from sentry.web.helpers import get_login_url
 
 from tests.models import TestModel, DuplicateKeyModel
@@ -448,3 +450,58 @@ class SentrySearchTest(TestCase):
         qs = get_search_query_set('error')
         self.assertEquals(qs.count(), 1)
         self.assertEquals(qs[0:1][0].message, 'test search error')
+
+class DummyInterface(Interface):
+    def __init__(self, baz):
+        self.baz = baz
+
+class SentryManagerTest(TestCase):
+    def test_invalid_project(self):
+        self.assertRaises(Project.DoesNotExist, Group.objects.from_kwargs, 2, message='foo')
+
+    def test_invalid_interface_name(self):
+        self.assertRaises(InvalidInterface, Group.objects.from_kwargs, 1, message='foo', data={
+            'foo': 'bar',
+        })
+
+    def test_invalid_interface_import_path(self):
+        self.assertRaises(InvalidInterface, Group.objects.from_kwargs, 1, message='foo', data={
+            'sentry.interfaces.Exception2': 'bar',
+        })
+
+    def test_invalid_interface_args(self):
+        self.assertRaises(InvalidData, Group.objects.from_kwargs, 1, message='foo', data={
+            'tests.tests.DummyInterface': {'foo': 'bar'}
+        })
+
+    def test_missing_required_args(self):
+        self.assertRaises(InvalidData, Group.objects.from_kwargs, 1)
+
+    def test_valid_only_message(self):
+        group = Group.objects.from_kwargs(1, message='foo')
+        self.assertEquals(group.message, 'foo')
+        self.assertEquals(group.project_id, 1)
+
+    def test_legacy_data(self):
+        result = Group.objects.convert_legacy_kwargs({'message_id': '1234'})
+        self.assertEquals(result['event_id'], '1234')
+
+        result = Group.objects.convert_legacy_kwargs({'message': 'hello', 'class_name': 'ValueError'})
+        self.assertEquals(result['message'], 'ValueError: hello')
+
+        result = Group.objects.convert_legacy_kwargs({'view': 'foo.bar'})
+        self.assertEquals(result['culprit'], 'foo.bar')
+
+        result = Group.objects.convert_legacy_kwargs({'data': {
+            'url': 'http://foo.com',
+            'META': {
+                'REQUEST_METHOD': 'POST',
+                'QUERY_STRING': 'foo=bar'
+            }
+        }})
+        self.assertTrue('sentry.interfaces.Http' in result)
+        http = result['sentry.interfaces.Http']
+        self.assertEquals(http['url'], 'http://foo.com')
+        self.assertEquals(http['query_string'], 'foo=bar')
+        self.assertEquals(http['method'], 'POST')
+        self.assertEquals(http['data'], {})
\ No newline at end of file
