commit 581fd99b1fe8d17e729821124b5743a7286d0bd4
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Jun 21 15:22:00 2018 -0700

    feat(breadcrumbs): Support a BreadcrumbTitle side effect component (#8703)
    
    Allows you to use the <BreadcrumbTitle /> component within settings
    views to modify the breadcrumb title for that route.

diff --git a/src/sentry/static/sentry/app/actions/settingsBreadcrumbActions.jsx b/src/sentry/static/sentry/app/actions/settingsBreadcrumbActions.jsx
new file mode 100644
index 0000000000..fd59cc5e15
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/settingsBreadcrumbActions.jsx
@@ -0,0 +1,3 @@
+import Reflux from 'reflux';
+
+export default Reflux.createActions(['mapTitle', 'trimMappings']);
diff --git a/src/sentry/static/sentry/app/stores/settingsBreadcrumbStore.jsx b/src/sentry/static/sentry/app/stores/settingsBreadcrumbStore.jsx
new file mode 100644
index 0000000000..a7041ef95a
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/settingsBreadcrumbStore.jsx
@@ -0,0 +1,35 @@
+import Reflux from 'reflux';
+
+import {stringifyRouteList} from 'app/utils';
+import SettingsBreadcrumbActions from 'app/actions/settingsBreadcrumbActions';
+
+const SettingsBreadcrumbStore = Reflux.createStore({
+  init() {
+    this.reset();
+    this.listenTo(SettingsBreadcrumbActions.mapTitle, this.onUpdateRouteMap);
+    this.listenTo(SettingsBreadcrumbActions.trimMappings, this.onTrimMappings);
+  },
+
+  reset() {
+    this.pathMap = {};
+  },
+
+  getInitialState() {
+    return this.pathMap;
+  },
+
+  onUpdateRouteMap({routes, title}) {
+    this.pathMap[stringifyRouteList(routes)] = title;
+    this.trigger(this.pathMap);
+  },
+
+  onTrimMappings(routes) {
+    const routePath = stringifyRouteList(routes);
+    for (const fullPath in this.pathMap) {
+      if (!routePath.startsWith(fullPath)) delete this.pathMap[fullPath];
+    }
+    this.trigger(this.pathMap);
+  },
+});
+
+export default SettingsBreadcrumbStore;
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index e215b1ef30..05a12ab5e7 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -220,6 +220,13 @@ export function sortProjects(projects) {
   return projects.sort(projectDisplayCompare);
 }
 
+// Map a routes list into a string
+export const stringifyRouteList = routes =>
+  routes
+    .filter(r => r.path)
+    .map(r => r.path.replace(/\/$/, ''))
+    .join('') + '/';
+
 //build actorIds
 export const buildUserId = id => `user:${id}`;
 export const buildTeamId = id => `team:${id}`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbTitle.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbTitle.jsx
new file mode 100644
index 0000000000..768a8e7e3a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbTitle.jsx
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import SettingsBreadcrumbActions from 'app/actions/settingsBreadcrumbActions';
+
+class BreadcrumbTitle extends React.Component {
+  static propTypes = {
+    routes: PropTypes.array.isRequired, // eslint-disable-line react/no-unused-prop-types
+    title: PropTypes.string.isRequired, // eslint-disable-line react/no-unused-prop-types
+  };
+
+  componentDidMount() {
+    SettingsBreadcrumbActions.mapTitle(this.props);
+  }
+
+  render() {
+    return null;
+  }
+}
+
+export default BreadcrumbTitle;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx
index 096dc14b80..ea0145d030 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx
@@ -1,13 +1,18 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
+import {stringifyRouteList} from 'app/utils';
 import Crumb from 'app/views/settings/components/settingsBreadcrumb/crumb';
 import Divider from 'app/views/settings/components/settingsBreadcrumb/divider';
 import InlineSvg from 'app/components/inlineSvg';
 import OrganizationCrumb from 'app/views/settings/components/settingsBreadcrumb/organizationCrumb';
 import ProjectCrumb from 'app/views/settings/components/settingsBreadcrumb/projectCrumb';
 import SentryTypes from 'app/proptypes';
+import SettingsBreadcrumbActions from 'app/actions/settingsBreadcrumbActions';
+import SettingsBreadcrumbStore from 'app/stores/settingsBreadcrumbStore';
 import TeamCrumb from 'app/views/settings/components/settingsBreadcrumb/teamCrumb';
 import TextLink from 'app/components/textLink';
 import recreateRoute from 'app/utils/recreateRoute';
@@ -21,22 +26,35 @@ const MENUS = {
 class SettingsBreadcrumb extends React.Component {
   static propTypes = {
     routes: PropTypes.array,
+    // pathMap maps stringifed routes to a breadcrumb title. This property is
+    // provided by the SettingsBreadcrumbStore.
+    pathMap: PropTypes.object,
   };
 
   static contextTypes = {
     organization: SentryTypes.Organization,
   };
 
+  static defaultProps = {
+    pathMap: {},
+  };
+
+  componentDidUpdate(prevProps) {
+    if (this.props.routes === prevProps.routes) return;
+    SettingsBreadcrumbActions.trimMappings(this.props.routes);
+  }
+
   render() {
-    let {routes, params} = this.props;
-    let routesWithNames = routes.filter(({name}) => name);
-    let lastRouteIndex = routesWithNames.length - 1;
+    let {routes, params, pathMap} = this.props;
+    let lastRouteIndex = routes.map(r => !!r.name).lastIndexOf(true);
     return (
       <Breadcrumbs>
         <LogoLink href="/">
           <StyledInlineSvg src="icon-sentry" size="20px" />
         </LogoLink>
-        {routesWithNames.map((route, i) => {
+        {routes.map((route, i) => {
+          if (!route.name) return null;
+          let pathTitle = pathMap[stringifyRouteList(routes.slice(0, i + 1))];
           let isLast = i === lastRouteIndex;
           let createMenu = MENUS[route.name];
           let Menu = typeof createMenu === 'function' && createMenu;
@@ -46,7 +64,7 @@ class SettingsBreadcrumb extends React.Component {
             : () => (
                 <Crumb route={route} isLast={isLast}>
                   <TextLink to={recreateRoute(route, {routes, params})}>
-                    {route.name}{' '}
+                    {pathTitle || route.name}{' '}
                   </TextLink>
                   <Divider isLast={isLast} />
                 </Crumb>
@@ -67,7 +85,13 @@ class SettingsBreadcrumb extends React.Component {
   }
 }
 
-export default SettingsBreadcrumb;
+export default createReactClass({
+  displayName: 'ConnectedSettingsBreadcrumb',
+  mixins: [Reflux.connect(SettingsBreadcrumbStore, 'pathMap')],
+  render() {
+    return <SettingsBreadcrumb {...this.props} {...this.state} />;
+  },
+});
 
 const Breadcrumbs = styled.div`
   display: flex;
diff --git a/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap b/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
index 4ec573ee0c..a3429a80f9 100644
--- a/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
@@ -16,7 +16,7 @@ exports[`SettingsLayout renders 1`] = `
         <Box
           flex="1"
         >
-          <SettingsBreadcrumb
+          <ConnectedSettingsBreadcrumb
             route={Object {}}
             routes={Array []}
           />
diff --git a/tests/js/spec/utils/utils.spec.jsx b/tests/js/spec/utils/utils.spec.jsx
index 5ea20c3367..bef9b7372a 100644
--- a/tests/js/spec/utils/utils.spec.jsx
+++ b/tests/js/spec/utils/utils.spec.jsx
@@ -4,6 +4,7 @@ import {
   parseRepo,
   explodeSlug,
   sortProjects,
+  stringifyRouteList,
 } from 'app/utils';
 
 describe('utils.valueIsEqual', function() {
@@ -234,3 +235,16 @@ describe('utils.projectDisplayCompare', function() {
     ]);
   });
 });
+
+describe('utils.stringifyRouteList', function() {
+  it('converts a routes list into a string', function() {
+    const routes = [
+      {path: '/one/'},
+      {path: '/two/'},
+      {path: undefined},
+      {path: '/three/'},
+      {path: '/:someKey/'},
+    ];
+    expect(stringifyRouteList(routes)).toEqual('/one/two/three/:someKey/');
+  });
+});
diff --git a/tests/js/spec/views/settings/components/settingsBreadcrumb/breadcrumbTitle.spec.jsx b/tests/js/spec/views/settings/components/settingsBreadcrumb/breadcrumbTitle.spec.jsx
new file mode 100644
index 0000000000..5e4e6c7fd8
--- /dev/null
+++ b/tests/js/spec/views/settings/components/settingsBreadcrumb/breadcrumbTitle.spec.jsx
@@ -0,0 +1,56 @@
+import React from 'react';
+
+import {mount} from 'enzyme';
+import BreadcrumbTitle from 'app/views/settings/components/settingsBreadcrumb/breadcrumbTitle';
+import Crumb from 'app/views/settings/components/settingsBreadcrumb/crumb';
+import SettingsBreadcrumb from 'app/views/settings/components/settingsBreadcrumb';
+import SettingsBreadcrumbStore from 'app/stores/settingsBreadcrumbStore';
+
+describe('BreadcrumbTitle', function() {
+  const routes = [
+    {name: 'One', path: '/one/'},
+    {name: 'Two', path: '/two/'},
+    {name: 'Three', path: '/three/'},
+  ];
+
+  it('renders', async function() {
+    const wrapper = mount(
+      <div>
+        <SettingsBreadcrumb routes={routes} />;
+        <BreadcrumbTitle routes={routes} title="Last Title" />
+      </div>
+    );
+
+    await tick();
+    wrapper.update();
+    expect(
+      wrapper
+        .find(Crumb)
+        .last()
+        .text()
+    ).toEqual('Last Title ');
+  });
+
+  it('cleans up routes', async function() {
+    const upOneRoutes = routes.slice(0, -1);
+    const breadcrumbs = mount(<SettingsBreadcrumb routes={routes} />);
+    mount(
+      <div>
+        <BreadcrumbTitle routes={upOneRoutes} title="Second Title" />
+        <BreadcrumbTitle routes={routes} title="Last Title" />
+      </div>
+    );
+
+    await tick();
+    breadcrumbs.update();
+
+    const crumbs = breadcrumbs.find(Crumb);
+    expect(crumbs.at(1).text()).toEqual('Second Title ');
+    expect(crumbs.last().text()).toEqual('Last Title ');
+
+    // Simulate navigating up a level, trimming the last title
+    breadcrumbs.setProps({routes: upOneRoutes});
+    await tick();
+    expect(SettingsBreadcrumbStore.pathMap).toEqual({'/one/two/': 'Second Title'});
+  });
+});
