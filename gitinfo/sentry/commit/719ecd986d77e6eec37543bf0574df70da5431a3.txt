commit 719ecd986d77e6eec37543bf0574df70da5431a3
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Apr 21 19:09:48 2020 -0700

    chore(alerts): Minor codestyle cleanup, guard statement (#18393)

diff --git a/src/sentry/static/sentry/app/views/alerts/list/index.tsx b/src/sentry/static/sentry/app/views/alerts/list/index.tsx
index 07e95374ee..c9e5fb1eb3 100644
--- a/src/sentry/static/sentry/app/views/alerts/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/list/index.tsx
@@ -62,27 +62,31 @@ class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state'
       ],
     ];
   }
+
   async onLoadAllEndpointsSuccess() {
     const {incidentList} = this.state;
-    if (incidentList.length === 0) {
-      // Check if they have rules or not, to know which empty state message to display
-      const {params} = this.props;
-
-      try {
-        const alertRules = await this.api.requestPromise(
-          `/organizations/${params && params.orgId}/alert-rules/`,
-          {
-            method: 'GET',
-          }
-        );
-        this.setState({
-          hasAlertRule: alertRules.length > 0 ? true : false,
-        });
-      } catch (err) {
-        this.setState({
-          hasAlertRule: true, // endpoint failed, using true as the "safe" choice in case they actually do have rules
-        });
-      }
+
+    if (incidentList.length !== 0) {
+      return;
+    }
+
+    // Check if they have rules or not, to know which empty state message to display
+    const {params} = this.props;
+
+    try {
+      const alertRules = await this.api.requestPromise(
+        `/organizations/${params && params.orgId}/alert-rules/`,
+        {
+          method: 'GET',
+        }
+      );
+      this.setState({
+        hasAlertRule: alertRules.length > 0 ? true : false,
+      });
+    } catch (err) {
+      this.setState({
+        hasAlertRule: true, // endpoint failed, using true as the "safe" choice in case they actually do have rules
+      });
     }
   }
 
