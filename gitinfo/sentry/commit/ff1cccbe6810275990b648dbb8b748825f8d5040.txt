commit ff1cccbe6810275990b648dbb8b748825f8d5040
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Sat Jul 2 11:25:34 2016 +0300

    Refactored thread, exception and stacktrace rendering

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
new file mode 100644
index 0000000000..555785225d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
@@ -0,0 +1,62 @@
+import React from 'react';
+import PropTypes from '../../../proptypes';
+import rawStacktraceContent from './rawStacktraceContent';
+import StacktraceContent from './stacktraceContent';
+import ExceptionContent from './exceptionContent';
+import RawExceptionContent from './rawExceptionContent';
+
+
+const CrashContent = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    event: PropTypes.Event.isRequired,
+    stackView: React.PropTypes.string.isRequired,
+    stackType: React.PropTypes.string,
+    newestFirst: React.PropTypes.bool.isRequired,
+    exception: React.PropTypes.object,
+    stacktrace: React.PropTypes.object,
+  },
+
+  renderException() {
+    const {event, stackView, stackType, newestFirst, exception} = this.props;
+    return (
+      stackView === 'raw' ?
+        <RawExceptionContent
+          type={stackType}
+          values={exception.values}
+          platform={event.platform} /> :
+        <ExceptionContent
+          type={stackType}
+          view={stackView}
+          values={exception.values}
+          platform={event.platform}
+          newestFirst={newestFirst} />
+    );
+  },
+
+  renderStacktrace() {
+    const {event, stackView, newestFirst, stacktrace} = this.props;
+    return (
+      stackView === 'raw' ?
+        <pre className="traceback plain">
+          {rawStacktraceContent(stacktrace, event.platform)}</pre> :
+        <StacktraceContent
+          data={stacktrace}
+          className="no-exception"
+          includeSystemFrames={stackView === 'full'}
+          platform={event.platform}
+          newestFirst={newestFirst} />
+    );
+  },
+
+  render() {
+    if (this.props.exception) {
+      return this.renderException();
+    }
+    if (this.props.stacktrace) {
+      return this.renderStacktrace();
+    }
+  }
+});
+
+export default CrashContent;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx b/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
new file mode 100644
index 0000000000..bd77ccc16e
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
@@ -0,0 +1,104 @@
+import React from 'react';
+import PropTypes from '../../../proptypes';
+import TooltipMixin from '../../../mixins/tooltip';
+import {t} from '../../../locale';
+
+const CrashHeader = React.createClass({
+  propTypes: {
+    title: React.PropTypes.string,
+    group: PropTypes.Group.isRequired,
+    thread: React.PropTypes.object,
+    exception: React.PropTypes.object,
+    stacktrace: React.PropTypes.object,
+    stackView: React.PropTypes.string.isRequired,
+    newestFirst: React.PropTypes.bool.isRequired,
+    stackType: React.PropTypes.string.isRequired,
+    onChange: React.PropTypes.func,
+  },
+
+  mixins: [TooltipMixin({
+    html: false,
+    selector: '.tip',
+    trigger: 'hover'
+  })],
+
+  hasSystemFrames() {
+    const {stacktrace, thread, exception} = this.props;
+    return (
+      (stacktrace && stacktrace.hasSystemFrames) ||
+      (thread && thread.stacktrace && thread.stacktrace.hasSystemFrames) ||
+      (exception && exception.values.find(x => !!x.stacktrace.hasSystemFrames))
+    );
+  },
+
+  hasMinified() {
+    if (!this.props.stackType) {
+      return false;
+    }
+    const {exception} = this.props;
+    return exception && !!exception.values.find(x => x.rawStacktrace);
+  },
+
+  toggleOrder() {
+    this.notify({
+      newestFirst: !this.props.newestFirst
+    });
+  },
+
+  setStackType(type) {
+    this.notify({
+      stackType: type
+    });
+  },
+
+  setStackView(view) {
+    this.notify({
+      stackView: view
+    });
+  },
+
+  notify(obj) {
+    if (this.props.onChange) {
+      this.props.onChange(obj);
+    }
+  },
+
+  render() {
+    let {stackView, stackType, newestFirst} = this.props;
+
+    return (
+      <div className="crash-title">
+        <h3 className="pull-left">
+          {this.props.title || t('Exception')}
+          <small style={{marginLeft: 5}}>
+            (<a onClick={this.toggleOrder} className="tip" title={t('Toggle stacktrace order')} style={{borderBottom: '1px dotted #aaa'}}>
+              {newestFirst ?
+                t('most recent call first')
+              :
+                t('most recent call last')
+              }
+            </a>)
+          </small>
+        </h3>
+        {this.props.children}
+        <div className="btn-group" style={{marginLeft:10}}>
+          {this.hasSystemFrames() &&
+            <a className={(stackView === 'app' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.setStackView.bind(this, 'app')}>{t('App Only')}</a>
+          }
+          <a className={(stackView === 'full' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.setStackView.bind(this, 'full')}>{t('Full')}</a>
+          <a className={(stackView === 'raw' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.setStackView.bind(this, 'raw')}>{t('Raw')}</a>
+        </div>
+        <div className="btn-group">
+          {this.hasMinified() &&
+            [
+              <a key="original" className={(stackType === 'original' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={() => this.setStackType('original')}>{t('Original')}</a>,
+              <a key="minified" className={(stackType === 'minified' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={() => this.setStackType('minified')}>{t('Minified')}</a>
+            ]
+          }
+        </div>
+      </div>
+    );
+  }
+});
+
+export default CrashHeader;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
index bb0c00a8ae..7aaa8ced32 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
@@ -1,11 +1,9 @@
 import React from 'react';
 import GroupEventDataSection from '../eventDataSection';
 import PropTypes from '../../../proptypes';
-import ExceptionContent from './exceptionContent';
-import RawExceptionContent from './rawExceptionContent';
-import TooltipMixin from '../../../mixins/tooltip';
-import {t} from '../../../locale';
 import {isStacktraceNewestFirst} from './stacktrace';
+import CrashHeader from './crashHeader';
+import CrashContent from './crashContent';
 
 const ExceptionInterface = React.createClass({
   propTypes: {
@@ -15,12 +13,6 @@ const ExceptionInterface = React.createClass({
     data: React.PropTypes.object.isRequired,
   },
 
-  mixins: [TooltipMixin({
-    html: false,
-    selector: '.tip',
-    trigger: 'hover'
-  })],
-
   getInitialState() {
     return {
       stackView: this.props.data.hasSystemFrames ? 'app' : 'full',
@@ -29,79 +21,52 @@ const ExceptionInterface = React.createClass({
     };
   },
 
-  toggleStackView(value) {
-    this.setState({
-      stackView: value
-    });
-  },
-
-  toggleOrder() {
-    this.setState({newestFirst: !this.state.newestFirst});
+  eventHasThreads() {
+    return !!this.props.event.entries.find(x => x.type === 'threads');
   },
 
   render() {
     let group = this.props.group;
-    let evt = this.props.event;
+    let event = this.props.event;
     let data = this.props.data;
     let stackView = this.state.stackView;
     let stackType = this.state.stackType;
     let newestFirst = this.state.newestFirst;
 
-    // at least one stack trace contains raw/minified code
-    let hasMinified = data.values.find(x => !!x.rawStacktrace);
+    // in case there are threads in the event data, we don't render the
+    // exception block.  Instead the exception is contained within the
+    // thread interface.
+    if (this.eventHasThreads()) {
+      return null;
+    }
 
     let title = (
-      <div>
-        <div className="btn-group" style={{marginLeft:10}}>
-          {data.hasSystemFrames &&
-            <a className={(stackView === 'app' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStackView.bind(this, 'app')}>{t('App Only')}</a>
-          }
-          <a className={(stackView === 'full' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStackView.bind(this, 'full')}>{t('Full')}</a>
-          <a className={(stackView === 'raw' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStackView.bind(this, 'raw')}>{t('Raw')}</a>
-        </div>
-        <div className="btn-group">
-          {hasMinified &&
-            [
-              <a key="original" className={(stackType === 'original' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={() => this.setState({stackType: 'original'})}>{t('Original')}</a>,
-              <a key="minified" className={(stackType === 'minified' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={() => this.setState({stackType: 'minified'})}>{t('Minified')}</a>
-            ]
-          }
-        </div>
-        <h3>
-          {t('Exception')}
-          <small style={{marginLeft: 5}}>
-            (<a onClick={this.toggleOrder} className="tip" title={t('Toggle stacktrace order')} style={{borderBottom: '1px dotted #aaa'}}>
-              {newestFirst ?
-                t('most recent call first')
-              :
-                t('most recent call last')
-              }
-            </a>)
-          </small>
-        </h3>
-      </div>
+      <CrashHeader
+        group={group}
+        exception={data}
+        stackView={stackView}
+        newestFirst={newestFirst}
+        stackType={stackType}
+        onChange={(newState) => {
+          this.setState(newState);
+        }}
+      />
     );
 
     return (
       <GroupEventDataSection
           group={group}
-          event={evt}
+          event={event}
           type={this.props.type}
           title={title}
           wrapTitle={false}>
-        {stackView === 'raw' ?
-          <RawExceptionContent
-            type={stackType}
-            values={data.values}
-            platform={evt.platform}/> :
-
-          <ExceptionContent
-            type={stackType}
-            view={stackView}
-            values={data.values}
-            platform={evt.platform}
-            newestFirst={newestFirst}/>
-        }
+        <CrashContent
+          group={group}
+          event={event}
+          stackType={stackType}
+          stackView={stackView}
+          newestFirst={newestFirst}
+          exception={data} />
       </GroupEventDataSection>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 6b26e63f4e..8d4c3a8283 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -158,7 +158,7 @@ const Frame = React.createClass({
 
     if (defined(data.package)) {
       title.push(<span className="within" key="within"> within </span>);
-      title.push(<code title={data.package} className="package">{trimPackage(data.package)}</code>);
+      title.push(<code title={data.package} className="package" key="package">{trimPackage(data.package)}</code>);
     }
 
     if (defined(data.origAbsPath)) {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
index 65bb10a642..1b096d2125 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
@@ -2,9 +2,9 @@ import React from 'react';
 import ConfigStore from '../../../stores/configStore';
 import GroupEventDataSection from '../eventDataSection';
 import PropTypes from '../../../proptypes';
-import rawStacktraceContent from './rawStacktraceContent';
-import StacktraceContent from './stacktraceContent';
 import {t} from '../../../locale';
+import CrashHeader from './crashHeader';
+import CrashContent from './crashContent';
 
 
 export function isStacktraceNewestFirst() {
@@ -53,23 +53,16 @@ const StacktraceInterface = React.createClass({
     let newestFirst = this.state.newestFirst;
 
     let title = (
-      <div>
-        <div className="btn-group">
-          {data.hasSystemFrames &&
-            <a className={(stackView === 'app' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'app')}>{t('App Only')}</a>
-          }
-          <a className={(stackView === 'full' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'full')}>{t('Full')}</a>
-          <a className={(stackView === 'raw' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'raw')}>{t('Raw')}</a>
-        </div>
-        <h3>
-          {'Stacktrace '}
-          {newestFirst ?
-            <small>({t('most recent call last')})</small>
-          :
-            <small>({t('most recent call first')})</small>
-          }
-        </h3>
-      </div>
+      <CrashHeader
+        title={t('Stacktrace')}
+        group={group}
+        stacktrace={data}
+        stackView={stackView}
+        newestFirst={newestFirst}
+        onChange={(newState) => {
+          this.setState(newState);
+        }}
+      />
     );
 
     return (
@@ -79,18 +72,12 @@ const StacktraceInterface = React.createClass({
           type={this.props.type}
           title={title}
           wrapTitle={false}>
-        {stackView === 'raw' ?
-          <pre className="traceback plain">
-            {rawStacktraceContent(data, evt.platform)}
-          </pre>
-        :
-          <StacktraceContent
-              data={data}
-              className="no-exception"
-              includeSystemFrames={stackView === 'full'}
-              platform={evt.platform}
-              newestFirst={newestFirst} />
-        }
+        <CrashContent
+          group={group}
+          event={event}
+          stackView={stackView}
+          newestFirst={newestFirst}
+          stacktrace={data} />
       </GroupEventDataSection>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
index d9fe92624c..7289b9d396 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
@@ -2,15 +2,14 @@ import React from 'react';
 import GroupEventDataSection from '../eventDataSection';
 import PropTypes from '../../../proptypes';
 import KeyValueList from './keyValueList';
-import rawStacktraceContent from './rawStacktraceContent';
-import StacktraceContent from './stacktraceContent';
 import {isStacktraceNewestFirst} from './stacktrace';
 import {t} from '../../../locale';
 import {defined} from '../../../utils';
 import DropdownLink from '../../dropdownLink';
 import MenuItem from '../../menuItem';
 import {trimPackage} from './frame';
-
+import CrashHeader from './crashHeader';
+import CrashContent from './crashContent';
 
 function trimFilename(fn) {
   let pieces = fn.split(/\//g);
@@ -31,23 +30,37 @@ function findRelevantFrame(stacktrace) {
   return stacktrace.frames[stacktrace.frames.length - 1];
 }
 
-function findThreadStacktrace(thread, event) {
-  if (thread.stacktrace) {
-    return thread.stacktrace;
-  }
+function findThreadException(thread, event) {
   for (let entry of event.entries) {
     if (entry.type !== 'exception') {
       continue;
     }
     for (let exc of entry.data.values) {
-      if (exc.threadId === thread.id && exc.stacktrace) {
-        return exc.stacktrace;
+      if (exc.threadId === thread.id) {
+        return entry.data;
       }
     }
   }
   return null;
 }
 
+function findThreadStacktrace(thread, event) {
+  if (thread.stacktrace) {
+    return thread.stacktrace;
+  }
+  let exc = findThreadException(thread, event);
+  if (exc) {
+    let rv = null;
+    for (let singleExc of exc.values) {
+      if (singleExc.threadId === thread.id) {
+        rv = singleExc.stacktrace;
+      }
+    }
+    return rv;
+  }
+  return null;
+}
+
 function getThreadTitle(thread, event) {
   let stacktrace = findThreadStacktrace(thread, event);
   let bits = ['Thread'];
@@ -70,6 +83,11 @@ function getThreadTitle(thread, event) {
     );
   }
 
+  if (thread.crashed) {
+    bits.push(' — ');
+    bits.push(<small key="crashed">(crashed)</small>);
+  }
+
   return bits;
 }
 
@@ -95,10 +113,13 @@ function findBestThread(threads) {
 
 const Thread = React.createClass({
   propTypes: {
+    group: PropTypes.Group.isRequired,
     event: PropTypes.Event.isRequired,
     data: React.PropTypes.object.isRequired,
     stackView: React.PropTypes.string,
+    stackType: React.PropTypes.string,
     newestFirst: React.PropTypes.bool,
+    exception: React.PropTypes.object,
     stacktrace: React.PropTypes.object,
   },
 
@@ -120,8 +141,14 @@ const Thread = React.createClass({
     );
   },
 
+  hasMissingStacktrace() {
+    const {exception, stacktrace} = this.props;
+    return !(exception || stacktrace);
+  },
+
   render() {
-    const {data} = this.props;
+    const {data, group, event, stackView, stackType,
+      newestFirst, exception, stacktrace} = this.props;
     return (
       <div className="thread">
         <KeyValueList
@@ -132,21 +159,16 @@ const Thread = React.createClass({
             ['Crashed', data.crashed ? 'yes' : 'no'],
           ]}
           isSorted={false} />
-        {this.props.stacktrace ? (
-          this.props.stackView === 'raw' ?
-            <pre className="traceback plain">
-              {rawStacktraceContent(
-                this.props.stacktrace, this.props.event.platform)}
-            </pre>
-          :
-            <StacktraceContent
-                data={this.props.stacktrace}
-                includeSystemFrames={this.props.stackView === 'full'}
-                platform={this.props.event.platform}
-                newestFirst={this.props.newestFirst} />
-        ) : (
-          this.renderMissingStacktrace()
-        )}
+        {this.hasMissingStacktrace() ?
+          this.renderMissingStacktrace() :
+          <CrashContent
+            group={group}
+            event={event}
+            stackType={stackType}
+            stackView={stackView}
+            newestFirst={newestFirst}
+            exception={exception}
+            stacktrace={stacktrace} />}
       </div>
     );
   }
@@ -166,6 +188,7 @@ const ThreadsInterface = React.createClass({
     return {
       activeThread: thread,
       stackView: getIntendedStackView(thread, this.props.event),
+      stackType: 'original',
       newestFirst: isStacktraceNewestFirst(),
     };
   },
@@ -180,6 +203,10 @@ const ThreadsInterface = React.createClass({
     return findThreadStacktrace(this.state.activeThread, this.props.event);
   },
 
+  getException() {
+    return findThreadException(this.state.activeThread, this.props.event);
+  },
+
   onSelectNewThread(thread) {
     let newStackView = this.state.stackView;
     if (this.state.stackView !== 'raw') {
@@ -188,25 +215,30 @@ const ThreadsInterface = React.createClass({
     this.setState({
       activeThread: thread,
       stackView: newStackView,
+      stackType: 'original',
     });
   },
 
   render() {
     let group = this.props.group;
     let evt = this.props.event;
-    let {stackView, newestFirst, activeThread} = this.state;
+    let {stackView, stackType, newestFirst, activeThread} = this.state;
+    let exception = this.getException();
     let stacktrace = this.getStacktrace();
 
     let title = (
-      <div className="thread-title">
-        <h3 className="pull-left">
-          {'Threads '}
-          {newestFirst ?
-            <small>({t('most recent call last')})</small>
-          :
-            <small>({t('most recent call first')})</small>
-          }
-        </h3>
+      <CrashHeader
+        title={t('Threads')}
+        group={group}
+        thread={activeThread}
+        stacktrace={stacktrace}
+        exception={exception}
+        stackView={stackView}
+        newestFirst={newestFirst}
+        stackType={stackType}
+        onChange={(newState) => {
+          this.setState(newState);
+        }}>
         <div className="pull-left btn-group">
           <DropdownLink 
             btnGroup={true}
@@ -223,14 +255,7 @@ const ThreadsInterface = React.createClass({
             })}
           </DropdownLink>
         </div>
-        <div className="btn-group">
-          {(stacktrace && stacktrace.hasSystemFrames) &&
-            <a className={(stackView === 'app' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'app')}>{t('App Only')}</a>
-          }
-          <a className={(stackView === 'full' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'full')}>{t('Full')}</a>
-          <a className={(stackView === 'raw' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'raw')}>{t('Raw')}</a>
-        </div>
-      </div>
+      </CrashHeader>
     );
 
     return (
@@ -241,8 +266,11 @@ const ThreadsInterface = React.createClass({
           title={title}
           wrapTitle={false}>
         <Thread
+          group={group}
           data={activeThread}
+          exception={exception}
           stackView={stackView}
+          stackType={stackType}
           stacktrace={stacktrace}
           event={evt}
           newestFirst={newestFirst} />
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 5c1764b9bb..be4b3225eb 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1741,10 +1741,10 @@ pre.val, span.val {
 }
 
 /**
-* Threads
+* Exceptions and Threads
 * ============================================================================
 */
-.box .thread-title {
+.box .crash-title {
   h3 {
     padding-right: 10px;
   }
