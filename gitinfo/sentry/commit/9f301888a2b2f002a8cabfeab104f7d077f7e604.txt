commit 9f301888a2b2f002a8cabfeab104f7d077f7e604
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Apr 28 15:15:53 2015 -0700

    Functional overview

diff --git a/src/sentry/static/sentry/app/views/groupDetails/event.jsx b/src/sentry/static/sentry/app/views/groupDetails/event.jsx
index 57e31b0c9f..ea1760e47e 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/event.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/event.jsx
@@ -3,7 +3,7 @@
 var React = require("react");
 var Sticky = require("react-sticky");
 
-var GroupEventDataSection = require("./eventDataSection");
+var GroupEventEntries = require("./eventEntries");
 var GroupEventHeader = require("./eventHeader");
 var GroupEventTags = require("./eventTags");
 var GroupState = require("../../mixins/groupState");
@@ -33,44 +33,6 @@ var UserWidget = React.createClass({
   }
 });
 
-var GroupEventExtraData = React.createClass({
-  mixins: [GroupState],
-
-  propTypes: {
-    group: PropTypes.Group.isRequired,
-    event: PropTypes.Event.isRequired
-  },
-
-  shouldComponentUpdate(nextProps, nextState) {
-    return this.props.event.id !== nextProps.event.id;
-  },
-
-  render() {
-    var children = [];
-    var context = this.props.event.context;
-    for (var key in context) {
-      children.push(<dt key={'dt-' + key}>{key}</dt>);
-      children.push((
-        <dd key={'dd-' + key}>
-          <pre>{JSON.stringify(context[key], null, 2)}</pre>
-        </dd>
-      ));
-    }
-
-    return (
-      <GroupEventDataSection
-          group={this.props.group}
-          event={this.props.event}
-          type="extra"
-          title="Additional Data">
-        <dl className="vars">
-          {children}
-        </dl>
-      </GroupEventDataSection>
-    );
-  }
-});
-
 var GroupEvent = React.createClass({
   mixins: [GroupState],
 
@@ -78,59 +40,19 @@ var GroupEvent = React.createClass({
     event: PropTypes.Event.isRequired
   },
 
-  // TODO(dcramer): make this extensible
-  interfaces: {
-    exception: require("./interfaces/exception"),
-    request: require("./interfaces/request"),
-    stacktrace: require("./interfaces/stacktrace")
-  },
-
   render(){
     var group = this.getGroup();
     var evt = this.props.event;
 
-    var entries = evt.entries.map((entry, entryIdx) => {
-      try {
-        var Component = this.interfaces[entry.type];
-        if (!Component) {
-          throw new Error('Unregistered interface: ' + entry.type);
-
-        }
-        return <Component
-                  key={"entry-" + entryIdx}
-                  group={group}
-                  event={evt}
-                  type={entry.type}
-                  data={entry.data} />;
-      } catch (ex) {
-        // TODO(dcramer): this should log to Sentry
-        return (
-          <GroupEventDataSection
-              group={group}
-              event={evt}
-              type={entry.type}
-              title={entry.type}>
-            <p>There was an error rendering this data.</p>
-          </GroupEventDataSection>
-        );
-      }
-    });
-
     return (
       <div className="row event">
         <div className="col-md-9">
-          <GroupEventHeader
+          <GroupEventTags
               group={group}
               event={evt} />
-          <GroupEventTags
+          <GroupEventEntries
               group={group}
               event={evt} />
-          {entries}
-          {!utils.objectIsEmpty(evt.context) &&
-            <GroupEventExtraData
-                group={group}
-                event={evt} />
-          }
         </div>
         <div className="col-md-3">
           <Sticky stickyClass="sticky-sidebar" stickyStyle={{}}>
diff --git a/src/sentry/static/sentry/app/views/groupDetails/eventEntries.jsx b/src/sentry/static/sentry/app/views/groupDetails/eventEntries.jsx
new file mode 100644
index 0000000000..38581f9bab
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupDetails/eventEntries.jsx
@@ -0,0 +1,107 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+var Sticky = require("react-sticky");
+
+var GroupEventDataSection = require("./eventDataSection");
+var PropTypes = require("../../proptypes");
+var utils = require("../../utils");
+
+var GroupEventExtraData = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    event: PropTypes.Event.isRequired
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return this.props.event.id !== nextProps.event.id;
+  },
+
+  render() {
+    var children = [];
+    var context = this.props.event.context;
+    for (var key in context) {
+      children.push(<dt key={'dt-' + key}>{key}</dt>);
+      children.push((
+        <dd key={'dd-' + key}>
+          <pre>{JSON.stringify(context[key], null, 2)}</pre>
+        </dd>
+      ));
+    }
+
+    return (
+      <GroupEventDataSection
+          group={this.props.group}
+          event={this.props.event}
+          type="extra"
+          title="Additional Data">
+        <dl className="vars">
+          {children}
+        </dl>
+      </GroupEventDataSection>
+    );
+  }
+});
+
+var GroupEventEntries = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    event: PropTypes.Event.isRequired
+  },
+
+  // TODO(dcramer): make this extensible
+  interfaces: {
+    exception: require("./interfaces/exception"),
+    request: require("./interfaces/request"),
+    stacktrace: require("./interfaces/stacktrace")
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return this.props.event.id !== nextProps.event.id;
+  },
+
+  render(){
+    var group = this.props.group;
+    var evt = this.props.event;
+
+    var entries = evt.entries.map((entry, entryIdx) => {
+      try {
+        var Component = this.interfaces[entry.type];
+        if (!Component) {
+          throw new Error('Unregistered interface: ' + entry.type);
+
+        }
+        return <Component
+                  key={"entry-" + entryIdx}
+                  group={group}
+                  event={evt}
+                  type={entry.type}
+                  data={entry.data} />;
+      } catch (ex) {
+        // TODO(dcramer): this should log to Sentry
+        return (
+          <GroupEventDataSection
+              group={group}
+              event={evt}
+              type={entry.type}
+              title={entry.type}>
+            <p>There was an error rendering this data.</p>
+          </GroupEventDataSection>
+        );
+      }
+    });
+
+    return (
+      <div>
+        {entries}
+        {!utils.objectIsEmpty(evt.context) &&
+          <GroupEventExtraData
+              group={group}
+              event={evt} />
+        }
+      </div>
+    );
+  }
+});
+
+module.exports = GroupEventEntries;
diff --git a/src/sentry/static/sentry/app/views/groupOverview.jsx b/src/sentry/static/sentry/app/views/groupOverview.jsx
index 52411ec4af..451bd649cf 100644
--- a/src/sentry/static/sentry/app/views/groupOverview.jsx
+++ b/src/sentry/static/sentry/app/views/groupOverview.jsx
@@ -6,8 +6,7 @@ var Router = require("react-router");
 var api = require("../api");
 var ApiMixin = require("../mixins/apiMixin");
 var GroupChart = require("./groupDetails/chart");
-var GroupEvent = require("./groupDetails/event");
-var GroupEventToolbar = require("./groupDetails/eventToolbar");
+var GroupEventEntries = require("./groupDetails/eventEntries");
 var GroupState = require("../mixins/groupState");
 var MutedBox = require("../components/mutedBox");
 var LoadingError = require("../components/loadingError");
@@ -17,7 +16,6 @@ var RouteMixin = require("../mixins/routeMixin");
 var TimeSince = require("../components/timeSince");
 var utils = require("../utils");
 
-
 var GroupOverview = React.createClass({
   contextTypes: {
     router: React.PropTypes.func
@@ -121,30 +119,15 @@ var GroupOverview = React.createClass({
       <div>
         <div className="row group-overview">
           <div className="col-md-9">
-            <div className="box">
-              <div className="box-header">
-                <h3>Exception</h3>
-              </div>
-              <div className="box-content with-padding">
-                <p>...</p>
-              </div>
-            </div>
-            <div className="box">
-              <div className="box-header">
-                <h3>Request</h3>
-              </div>
-              <div className="box-content with-padding">
-                <p>...</p>
-              </div>
-            </div>
-            <div className="box">
-              <div className="box-header">
-                <h3>Additional Data</h3>
-              </div>
-              <div className="box-content with-padding">
-                <p>...</p>
-              </div>
-            </div>
+            {this.state.loading ?
+              <LoadingIndicator />
+            : (this.state.error ?
+              <LoadingError onRetry={this.fetchData} />
+            :
+              <GroupEventEntries
+                  group={group}
+                  event={evt} />
+            )}
           </div>
           <div className="col-md-3">
             <GroupChart statsPeriod={this.props.statsPeriod} group={group} />
