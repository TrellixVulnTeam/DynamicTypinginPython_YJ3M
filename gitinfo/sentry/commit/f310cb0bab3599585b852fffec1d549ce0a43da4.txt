commit f310cb0bab3599585b852fffec1d549ce0a43da4
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Dec 3 21:46:45 2012 -0800

    Add support for raven-js

diff --git a/src/sentry/migrations/0049_create_default_project_keys.py b/src/sentry/migrations/0049_create_default_project_keys.py
index f1562a4351..8cea573ab4 100644
--- a/src/sentry/migrations/0049_create_default_project_keys.py
+++ b/src/sentry/migrations/0049_create_default_project_keys.py
@@ -7,12 +7,18 @@ from django.db import models
 class Migration(DataMigration):
 
     def forwards(self, orm):
-        from sentry.utils.models import update
+        from sentry.models import ProjectKey
 
         for project in orm['sentry.Project'].objects.all():
-            orm['sentry.ProjectKey'].objects.create(
+            if ProjectKey.objects.filter(project=project, user=None).exists():
+                continue
+
+            ProjectKey.objects.create(
                 project=project,
-                user=None,
+                defaults=dict(
+                    public_key=ProjectKey.generate_api_key(),
+                    secret_key=ProjectKey.generate_api_key(),
+                )
             )
 
     def backwards(self, orm):
diff --git a/src/sentry/migrations/0065_create_default_project_key.py b/src/sentry/migrations/0065_create_default_project_key.py
new file mode 100644
index 0000000000..b56eac5c67
--- /dev/null
+++ b/src/sentry/migrations/0065_create_default_project_key.py
@@ -0,0 +1,259 @@
+# -*- coding: utf-8 -*-
+import datetime
+from south.db import db
+from south.v2 import DataMigration
+from django.db import models
+
+class Migration(DataMigration):
+
+    def forwards(self, orm):
+        from sentry.models import ProjectKey
+
+        for project in orm['sentry.Project'].objects.all():
+            if ProjectKey.objects.filter(project=project, user=None).exists():
+                continue
+
+            ProjectKey.objects.create(
+                project=project,
+                defaults=dict(
+                    public_key=ProjectKey.generate_api_key(),
+                    secret_key=ProjectKey.generate_api_key(),
+                )
+            )
+
+    def backwards(self, orm):
+        "Write your backwards methods here."
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filterkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'FilterKey'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'logger', 'culprit', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'views': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.View']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.pendingteammember': {
+            'Meta': {'unique_together': "(('team', 'email'),)", 'object_name': 'PendingTeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pending_member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'unique': 'True', 'null': 'True'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Team']", 'null': 'True'})
+        },
+        'sentry.projectcountbyminute': {
+            'Meta': {'unique_together': "(('project', 'date'),)", 'object_name': 'ProjectCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.searchdocument': {
+            'Meta': {'unique_together': "(('project', 'group'),)", 'object_name': 'SearchDocument'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_changed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'total_events': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'})
+        },
+        'sentry.searchtoken': {
+            'Meta': {'unique_together': "(('document', 'field', 'token'),)", 'object_name': 'SearchToken'},
+            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'token_set'", 'to': "orm['sentry.SearchDocument']"}),
+            'field': ('django.db.models.fields.CharField', [], {'default': "'text'", 'max_length': '64'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.team': {
+            'Meta': {'object_name': 'Team'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
+        },
+        'sentry.teammember': {
+            'Meta': {'unique_together': "(('team', 'user'),)", 'object_name': 'TeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_teammember_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.view': {
+            'Meta': {'object_name': 'View'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
+            'verbose_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'verbose_name_plural': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
+        }
+    }
+
+    complete_apps = ['sentry']
+    symmetrical = True
diff --git a/src/sentry/models.py b/src/sentry/models.py
index 13467ff0b6..b16dfe5f78 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -780,6 +780,10 @@ def create_default_project(created_models, verbosity=2, **kwargs):
             name='Sentry (Internal)',
             slug='sentry',
         )
+        # default key (used by sentry-js client, etc)
+        ProjectKey.objects.create(
+            project=project,
+        )
 
         if verbosity > 0:
             print 'Created internal Sentry project (slug=%s, id=%s)' % (project.slug, project.id)
diff --git a/src/sentry/static/sentry/scripts/lib/raven.js b/src/sentry/static/sentry/scripts/lib/raven.js
new file mode 100644
index 0000000000..369411294d
--- /dev/null
+++ b/src/sentry/static/sentry/scripts/lib/raven.js
@@ -0,0 +1,545 @@
+// parseUri 1.2.2
+// (c) Steven Levithan <stevenlevithan.com>
+// MIT License
+
+function parseUri (str) {
+  var o   = parseUri.options,
+    m   = o.parser[o.strictMode ? "strict" : "loose"].exec(str),
+    uri = {},
+    i   = 14;
+
+  while (i--) uri[o.key[i]] = m[i] || "";
+
+  uri[o.q.name] = {};
+  uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
+    if ($1) uri[o.q.name][$1] = $2;
+  });
+
+  return uri;
+}
+
+parseUri.options = {
+  strictMode: false,
+  key: ["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],
+  q:   {
+    name:   "queryKey",
+    parser: /(?:^|&)([^&=]*)=?([^&]*)/g
+  },
+  parser: {
+    strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
+    loose:  /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
+  }
+};
+// Raven.js
+//
+// Originally based on the Arecibo JavaScript client.
+//
+// Requires:
+//     * Either jQuery (>1.5) or Zepto.js (>0.8).
+//     * parseUri (included in the full and minified distribution files)
+
+(function(){
+    // Save a reference to the global object (`window` in the browser, `global`
+    // on the server).
+    "use strict";
+
+    var root = this;
+
+    var Raven;
+    root.Raven = Raven = {};
+
+    var self = Raven;
+
+    Raven.VERSION = '0.7';
+
+    // jQuery, Zepto, or Ender owns the `$` variable.
+    var $ = root.jQuery || root.Zepto || root.ender;
+    if (typeof($) === 'undefined') {
+        throw "Raven requires one of the following libraries: jQuery, Zepto, or ender";
+    }
+    if (root.jQuery === $ && $.fn.jquery < '1.5.0') {
+        throw "A newer version of jQuery is required";
+    }
+
+    Raven.options = {
+        secretKey: undefined,  // The global key if not using project auth
+        publicKey: undefined,  // Leave as undefined if not using project auth
+        servers: [],
+        projectId: 1,
+        logger: 'javascript',
+        site: undefined,
+        dataCallback: null,
+        signatureUrl: undefined,
+        fetchHeaders: false,  // Generates a synchronous request to your server
+        testMode: false,  // Disables some things that randomize the signature
+        ignoreErrors: [],
+        ignoreUrls: []
+    };
+
+    Raven.funcNameRE = /function\s*([\w\-$]+)?\s*\(/i;
+
+    Raven.config = function(config) {
+        var servers = [];
+
+        if (typeof(config) === "string") {
+            if (config.indexOf('http') === 0) {
+                // new-style DSN configuration
+                config = Raven.parseDSN(config);
+            } else {
+                throw "Base64 encoded config is no longer supported - use DSN";
+            }
+        }
+
+        $.each(config, function(key, option) {
+            self.options[key] = option;
+        });
+
+        // Expand server base URLs into API URLs
+        $.each(self.options.servers, function(i, server) {
+            // Add a trailing slash if one isn't provided
+            if (server.slice(-1) !== '/') {
+                server += '/';
+            }
+            servers.push(server + 'api/' + self.options.projectId + '/store/');
+        });
+        self.options.servers = servers;
+
+    };
+
+    Raven.parseDSN = function(dsn) {
+        var uri = parseUri(dsn);
+        var path_idx = uri.path.lastIndexOf('/');
+        var project_id;
+        var path;
+
+        if (path_idx === -1) {
+            project_id = uri.path.substr(1);
+            path = '';
+        } else {
+            path = uri.path.substr(1, path_idx);
+            project_id = uri.path.substr(path_idx + 1);
+        }
+
+        return {
+            servers: [uri.protocol + '://' + uri.host + ':' + uri.port + '/' + path],
+            publicKey: uri.user,
+            secretKey: uri.password,
+            projectId: project_id
+        };
+    };
+
+    Raven.getHeaders = function() {
+        var headers = {};
+
+        if (self.options.fetchHeaders && !self.options.testMode) {
+            headers = $.ajax({
+                type: 'HEAD',
+                url: root.location,
+                async: false
+            }).getAllResponseHeaders();
+        }
+
+        headers.Referer = document.referrer;
+        headers["User-Agent"] = navigator.userAgent;
+        return headers;
+    };
+
+    Raven.parseHeaders = function(headers_string) {
+        /*
+         * Parse the header string returned from getAllResponseHeaders
+         */
+        var headers = {};
+        $.each(headers_string.split('\n'), function(i, header) {
+            var name = header.slice(0, header.indexOf(':')),
+                value = header.slice(header.indexOf(':') + 2);
+            headers[name] = value;
+        });
+        return headers;
+    };
+
+    Raven.getSignature = function(message, timestamp, callback) {
+        if (self.options.signatureUrl) {
+            $.ajax({
+                type: 'POST',
+                url: self.options.signatureUrl,
+                data: {
+                    message: message,
+                    timestamp: timestamp
+                },
+                dataType: 'json',
+                success: function(data) {
+                    callback(data.signature);
+                }
+            });
+        } else {
+            callback();
+        }
+    };
+
+    Raven.getAuthHeader = function(signature, timestamp) {
+        var header = "Sentry sentry_version=2.0, ";
+        header += "sentry_timestamp=" + timestamp + ", ";
+        header += "sentry_client=raven-js/" + self.VERSION;
+        if (self.options.publicKey) {
+            header += ", sentry_key=" + self.options.publicKey;
+        }
+        if (signature) {
+            header += ", sentry_signature=" + signature;
+        }
+        return header;
+    };
+
+    Raven.captureException = function(e, options) {
+        var label, lineno, fileurl, traceback;
+
+        if (e.line) {  // WebKit
+            lineno = e.line;
+        } else if (e.lineNumber) {  // Mozilla
+            lineno = e.lineNumber;
+        }
+
+        if (e.sourceURL) {  // Webkit
+            fileurl = e.sourceURL;
+        } else if (e.fileName) {  // Mozilla
+            fileurl = e.fileName;
+        }
+
+        if (e["arguments"] && e.stack) {
+            traceback = self.chromeTraceback(e);
+        } else if (e.stack) {
+            // Detect edge cases where Chrome doesn't have 'arguments'
+            if (e.stack.indexOf('@') == -1) {
+                traceback = self.chromeTraceback(e);
+            } else {
+                traceback = self.firefoxOrSafariTraceback(e);
+            }
+        } else {
+            traceback = [{"filename": fileurl, "lineno": lineno}];
+            traceback = traceback.concat(self.otherTraceback(Raven.captureException));
+        }
+
+        self.process(e, fileurl, lineno, traceback, options);
+    };
+
+    Raven.captureMessage = function(msg, options) {
+        var data = self.arrayMerge({
+            'message': msg
+        }, options);
+        
+        self.send(data);
+    };
+
+    Raven.process = function(message, fileurl, lineno, traceback, options) {
+        var type, stacktrace, label, data;
+
+        if (typeof(message) === 'object') {
+            type = message.name;
+            message = message.message;
+        }
+
+        if ($.inArray(message, self.options.ignoreErrors) >= 0) {
+            return;
+        }
+
+
+        if (traceback) {
+            stacktrace = {"frames": traceback};
+            fileurl = fileurl || traceback[0].filename;
+        } else if (fileurl) {
+            stacktrace = {
+                "frames": [{
+                    "filename": fileurl,
+                    "lineno": lineno
+                }]
+            };
+        }
+
+        for (var i = 0; i < self.options.ignoreUrls.length; i++) {
+            if (self.options.ignoreUrls[i].test(fileurl)) {
+                return;
+            }
+        }
+
+        label = lineno ? message + " at " + lineno : message;
+
+        data = self.arrayMerge({
+            "sentry.interfaces.Exception": {
+                "type": type,
+                "value": message
+            },
+            "sentry.interfaces.Stacktrace": stacktrace,
+            "culprit": fileurl,
+            "message": label
+        }, options);
+
+        self.send(data);
+    };
+
+    Raven.arrayMerge = function(arr1, arr2) {
+        if (typeof(arr2) === "undefined") {
+            return arr1;
+        }
+        $.each(arr2, function(key, value){
+            arr1[key] = value;
+        });
+        return arr1;
+    };
+
+    Raven.trimString = function(str) {
+        return str.replace(/^\s+|\s+$/g, "");
+    };
+
+    Raven.chromeTraceback = function(e) {
+        /*
+         * First line is simply the repeated message:
+         *   ReferenceError: aldfjalksdjf is not defined
+         *
+         * Following lines contain error context:
+         *   at http://localhost:9000/1/group/306:41:5
+         */
+        var chunks, fn, filename, lineno, fileBits,
+            traceback = [],
+            lines = e.stack.split('\n');
+        $.each(lines.slice(1), function(i, line) {
+            // Trim the 'at ' from the beginning, and split by spaces
+            chunks = Raven.trimString(line).slice(3);
+            if (chunks == "unknown source") {
+                return;  // Skip this one
+            } else {
+                chunks = chunks.split(' ');
+            }
+
+            if (chunks.length > 2) {
+                // If there are more than 2 chunks, there are spaces in the
+                // filename
+                fn = chunks[0];
+                filename = chunks.slice(1).join(' ');
+                lineno = '(unknown)';
+            } else if (chunks.length == 2) {
+                // If there are two chunks, the first one is the function name
+                fn = chunks[0];
+                filename = chunks[1];
+            } else {
+                fn = '(unknown)';
+                filename = chunks[0];
+            }
+
+            if (filename && filename !== '(unknown source)') {
+                if (filename[0] === '(') {
+                    // Remove parentheses
+                    filename = filename.slice(1, -1);
+                }
+                // filename should be: <scheme>://<uri>:<line>:<column>
+                // where :<column> is optional
+                fileBits = filename.split(':');
+                lineno = fileBits[2];
+                filename = fileBits.slice(0, 2).join(':');
+            }
+
+            traceback.push({
+                'function': fn,
+                'filename': filename,
+                'lineno': lineno
+            });
+        });
+        return traceback;
+    };
+
+    Raven.firefoxOrSafariTraceback = function(e) {
+        /*
+         * Each line is a function with args and a filename, separated by an ampersand.
+         *   unsubstantiatedClaim("I am Batman")@http://raven-js.com/test/exception.js:7
+         *
+         * Anonymous functions are presented without a name, but including args.
+         *   (66)@http://raven-js.com/test/vendor/qunit.js:418
+         *
+         */
+        var chunks, fn, args, filename, lineno,
+            traceback = [],
+            lines = e.stack.split('\n');
+        $.each(lines, function(i, line) {
+            if (line) {
+                chunks = line.split('@');
+                if (chunks[0]) {
+                    fn = chunks[0].split('(');
+
+                    if (fn.length > 1 && fn[1] != ')') {
+                        args = fn[1].slice(0, -1).split(',');
+                    } else {
+                        args = undefined;
+                    }
+
+                    if (fn[0]) {
+                        fn = fn[0];
+                    } else {
+                        fn = '(unknown)';
+                    }
+                } else {
+                    fn = '(unknown)';
+                }
+
+                if (chunks.length > 1) {
+                    filename = chunks[1].split(':');
+                    lineno = filename.slice(-1)[0];
+                    filename = filename.slice(0, -1).join(':');
+                } else if (chunks[0] == '[native code]') {
+                    fn = '(unknown)';
+                    filename = '[native code]';
+                    lineno = 0;
+                    args = undefined;
+                }
+
+                traceback.push({
+                    'function': fn,
+                    'filename': filename,
+                    'lineno': lineno,
+                    'vars': {'arguments': args}
+                });
+            }
+        });
+        return traceback;
+    };
+
+    Raven.otherTraceback = function(callee) {
+        /*
+         * Generates best-efforts tracebacks for other browsers, such as Safari
+         * or IE.
+         */
+        var fn, args,
+            ANON = '<anonymous>',
+            traceback = [],
+            max = 9;
+        while (callee && traceback.length < max) {
+            fn = callee.name || (self.funcNameRE.test(callee.toString()) ? RegExp.$1 || ANON : ANON);
+            if (callee["arguments"]) {
+                args = self.stringifyArguments(callee["arguments"]);
+            } else {
+                args = undefined;
+            }
+            traceback.push({
+                'filename': '(unknown source)',
+                'lineno': '(unknown)',
+                'function': fn,
+                'post_context': callee.toString().split('\n'),
+                'vars': {'arguments': args}
+            });
+            callee = callee.caller;
+        }
+        return traceback;
+    };
+
+    Raven.stringifyArguments = function(args) {
+        /*
+         * Converts a callee's arguments to strings
+         */
+        var fn,
+            self = this,
+            UNKNOWN = '<unknown>',
+            results = [];
+
+        $.each(args, function(i, arg) {
+            if (arg === undefined) {
+                results.push('undefined');
+            } else if (arg === null) {
+                results.push('null');
+            } else if (arg instanceof Array) {
+                results.push(self.stringifyArguments(arg));
+            } else if (arg.constructor) {
+                fn = arg.constructor.name || (self.funcNameRE.test(arg.constructor.toString()) ? RegExp.$1 || UNKNOWN : UNKNOWN);
+                if (fn == 'String') {
+                    results.push('"' + arg + '"');
+                } else if (fn == 'Number' || fn == 'Date') {
+                    results.push(arg);
+                } else if (fn == 'Boolean') {
+                    results.push(arg ? 'true' : 'false');
+                } else {
+                    results.push(fn);
+                }
+            } else {
+                results.push(UNKNOWN);
+            }
+        });
+
+        return results;
+    };
+
+    Raven.getUTCNow = function() {
+        var now = new Date();
+        
+        return new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(),
+            now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds());
+    };
+
+    Raven.pad = function(n, amount) {
+        var i,
+            len = ('' + n).length;
+        if (typeof(amount) === "undefined") {
+            amount = 2;
+        }
+        if (len >= amount) {
+            return n;
+        }
+        for (i=0; i < (amount - len); i++) {
+            n = '0' + n;
+        }
+        return n;
+    };
+
+    Raven.dateToISOString = function(date) {
+        if (Date.prototype.toISOString) {
+            return date.toISOString();
+        }
+        
+        return date.getUTCFullYear() + '-' +
+            self.pad(date.getUTCMonth() + 1) + '-' +
+            self.pad(date.getUTCDate()) + 'T' +
+            self.pad(date.getUTCHours()) + ':' +
+            self.pad(date.getUTCMinutes()) + ':' +
+            self.pad(date.getUTCSeconds()) + '.' +
+            self.pad(date.getUTCMilliseconds(), 3) + 'Z';
+    };
+
+    Raven.send = function(data) {
+        var encoded_msg,
+            timestamp= new Date().getTime(),
+            url = root.location.protocol + '//' + root.location.host + root.location.pathname,
+            querystring = root.location.search.slice(1);  // Remove the ?
+
+        data = self.arrayMerge({
+            "project": self.options.projectId,
+            "logger": self.options.logger,
+            "site": self.options.site,
+            "timestamp": self.getUTCNow(),
+            "sentry.interfaces.Http": {
+                "url": url,
+                "querystring": querystring,
+                "headers": self.getHeaders()
+            }
+        }, data);
+
+        if (typeof(self.options.dataCallback) == 'function') {
+            data = self.options.dataCallback(data);
+        }
+
+        data.timestamp = self.dateToISOString(data.timestamp);
+
+        encoded_msg = JSON.stringify(data);
+        self.getSignature(encoded_msg, timestamp, function(signature) {
+            var header = self.getAuthHeader(signature, timestamp);
+            $.each(self.options.servers, function (i, server) {
+                $.ajax({
+                    type: 'POST',
+                    url: server,
+                    data: encoded_msg,
+                    dataType: 'json',
+                    headers: {
+                        // We send both headers, since Authentication may be blocked,
+                        // and custom headers arent supported in IE9
+                        'X-Sentry-Auth': header,
+                        'Authentication': header
+                    }
+                });
+            });
+        });
+    };
+}).call(this);
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index dbc4e5cb6f..9174fa6a70 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -19,18 +19,6 @@
 
         <title>{% block title %}Sentry{% endblock %}</title>
 
-        {% if USE_JS_CLIENT %}
-            <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/client.js" %}"></script>
-            <script type="text/javascript">
-            Sentry.client.config({
-                server: '{% url sentry-api-store %}',
-                projectId: {{ PROJECT_ID|to_json|safe }},
-                logger: 'sentry.errors.javascript'
-            })
-            Sentry.client.registerGlobalHandler();
-            </script>
-        {% endif %}
-
         <!--[if lt IE 9]>
         <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/html5shiv.js" %}"></script>
         <![endif]-->
@@ -82,6 +70,21 @@
             </script>
         {% endblock %}
 
+        {% if USE_JS_CLIENT and INTERNAL_PROJECT %}
+            {% compress js %}
+                <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/lib/raven.js" %}"></script>
+            {% endcompress %}
+            <script type="text/javascript">
+            Raven.config({
+                servers: ['/'],
+                projectId: {{ INTERNAL_PROJECT.id|to_json|safe }},
+                publicKey: {{ INTERNAL_PROJECT.public_key|to_json|safe }},
+                logger: 'sentry.errors.javascript'
+            })
+            window.onerror = Raven.process;
+            </script>
+        {% endif %}
+
         {% block meta %}
         {% endblock %}
     </head>
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 0f12c7591a..6a9eaf65a7 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -19,7 +19,7 @@ from django.utils.safestring import mark_safe
 
 from sentry.conf import settings
 from sentry.models import Project, View, Team, \
-  Option, ProjectOption
+  Option, ProjectOption, ProjectKey
 from sentry.permissions import can_create_projects, can_create_teams
 
 logger = logging.getLogger('sentry.errors')
@@ -88,12 +88,26 @@ def iter_data(obj):
         yield k, v
 
 
+def get_internal_project():
+    project = Project.objects.get(id=settings.PROJECT)
+    try:
+        projectkey = ProjectKey.objects.filter(project=project).order_by('-user')[0]
+    except IndexError:
+        return {}
+
+    return {
+        'id': project.id,
+        'public_key': projectkey.public_key,
+    }
+
+
 def get_default_context(request, existing_context=None):
     from sentry.plugins import plugins
 
     context = {
         'HAS_SEARCH': settings.USE_SEARCH,
         'MESSAGES_PER_PAGE': settings.MESSAGES_PER_PAGE,
+        'INTERNAL_PROJECT': get_internal_project(),
         'PROJECT_ID': str(settings.PROJECT),
         'VIEWS': list(View.objects.all()),
         'URL_PREFIX': settings.URL_PREFIX,
