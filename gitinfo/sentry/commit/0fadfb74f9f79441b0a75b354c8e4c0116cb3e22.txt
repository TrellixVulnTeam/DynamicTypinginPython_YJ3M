commit 0fadfb74f9f79441b0a75b354c8e4c0116cb3e22
Author: Dan Fuller <dfuller@sentry.io>
Date:   Fri Apr 3 11:47:58 2020 -0700

    refs(mail): Move logic from `MailPlugin._send_mail` into `MailAdapter`. (#18060)
    
    refs(mail): Move logic from `MailPlugin._send_mail` into `MailAdapter`
    
    This continues the work done in https://github.com/getsentry/sentry/pull/18056 to move the core logic from MailPlugin into MailAdapter.
    
    Depends on https://github.com/getsentry/sentry/pull/18056

diff --git a/src/sentry/mail/adapter.py b/src/sentry/mail/adapter.py
index 32f7f8181d..d29def5671 100644
--- a/src/sentry/mail/adapter.py
+++ b/src/sentry/mail/adapter.py
@@ -2,10 +2,13 @@ from __future__ import absolute_import
 
 import logging
 
-from sentry.models import ProjectOwnership, User
+from django.utils.encoding import force_text
 
+from sentry import options
+from sentry.models import ProjectOption, ProjectOwnership, User
 from sentry.utils import metrics
 from sentry.utils.cache import cache
+from sentry.utils.email import MessageBuilder
 
 logger = logging.getLogger(__name__)
 
@@ -18,8 +21,57 @@ class MailAdapter(object):
     and eventually deprecate `MailPlugin` entirely.
     """
 
+    mail_option_key = "mail:subject_prefix"
     alert_option_key = "mail:alert"
 
+    def _build_subject_prefix(self, project):
+        subject_prefix = ProjectOption.objects.get_value(project, self.mail_option_key, None)
+        if not subject_prefix:
+            subject_prefix = options.get("mail.subject-prefix")
+        return force_text(subject_prefix)
+
+    def _build_message(
+        self,
+        project,
+        subject,
+        template=None,
+        html_template=None,
+        body=None,
+        reference=None,
+        reply_reference=None,
+        headers=None,
+        context=None,
+        send_to=None,
+        type=None,
+    ):
+        if send_to is None:
+            send_to = self.get_send_to(project)
+        if not send_to:
+            logger.debug("Skipping message rendering, no users to send to.")
+            return
+
+        subject_prefix = self._build_subject_prefix(project)
+        subject = force_text(subject)
+
+        msg = MessageBuilder(
+            subject="%s%s" % (subject_prefix, subject),
+            template=template,
+            html_template=html_template,
+            body=body,
+            headers=headers,
+            type=type,
+            context=context,
+            reference=reference,
+            reply_reference=reply_reference,
+        )
+        msg.add_users(send_to, project=project)
+        return msg
+
+    def _send_mail(self, *args, **kwargs):
+        message = self._build_message(*args, **kwargs)
+        if message is not None:
+            return message.send_async()
+
     def get_sendable_users(self, project):
         """
         Return a collection of user IDs that are eligible to receive
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index d8da15c2e0..acbd602261 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -10,8 +10,6 @@ from django.utils import dateformat
 from django.utils.encoding import force_text
 from django.utils.safestring import mark_safe
 
-from sentry import options
-
 from sentry.digests.utilities import get_digest_metadata, get_personalized_digests
 from sentry.mail.adapter import MailAdapter
 from sentry.plugins.base.structs import Notification
@@ -37,51 +35,8 @@ class MailPlugin(NotificationPlugin):
     project_conf_form = None
     mail_adapter = MailAdapter()
 
-    def _subject_prefix(self):
-        return options.get("mail.subject-prefix")
-
-    def _build_message(
-        self,
-        project,
-        subject,
-        template=None,
-        html_template=None,
-        body=None,
-        reference=None,
-        reply_reference=None,
-        headers=None,
-        context=None,
-        send_to=None,
-        type=None,
-    ):
-        if send_to is None:
-            send_to = self.get_send_to(project)
-        if not send_to:
-            logger.debug("Skipping message rendering, no users to send to.")
-            return
-
-        subject_prefix = self.get_option("subject_prefix", project) or self._subject_prefix()
-        subject_prefix = force_text(subject_prefix)
-        subject = force_text(subject)
-
-        msg = MessageBuilder(
-            subject="%s%s" % (subject_prefix, subject),
-            template=template,
-            html_template=html_template,
-            body=body,
-            headers=headers,
-            type=type,
-            context=context,
-            reference=reference,
-            reply_reference=reply_reference,
-        )
-        msg.add_users(send_to, project=project)
-        return msg
-
     def _send_mail(self, *args, **kwargs):
-        message = self._build_message(*args, **kwargs)
-        if message is not None:
-            return message.send_async()
+        return self.mail_adapter._send_mail(*args, **kwargs)
 
     def get_project_url(self, project):
         return absolute_uri(u"/{}/{}/".format(project.organization.slug, project.slug))
@@ -310,8 +265,7 @@ class MailPlugin(NotificationPlugin):
             "enhanced_privacy": enhanced_privacy,
         }
 
-        subject_prefix = self.get_option("subject_prefix", project) or self._subject_prefix()
-        subject_prefix = force_text(subject_prefix)
+        subject_prefix = self.mail_adapter._build_subject_prefix(project)
         subject = force_text(
             u"{}{} - New Feedback from {}".format(
                 subject_prefix, group.qualified_short_id, payload["report"]["name"]
diff --git a/tests/sentry/mail/test_adapter.py b/tests/sentry/mail/test_adapter.py
index f121ec25ed..e9b3c24538 100644
--- a/tests/sentry/mail/test_adapter.py
+++ b/tests/sentry/mail/test_adapter.py
@@ -1,10 +1,12 @@
 from __future__ import absolute_import
 
+from django.core import mail
 from exam import fixture
 
 from sentry.models import (
     OrganizationMember,
     OrganizationMemberTeam,
+    ProjectOption,
     ProjectOwnership,
     User,
     UserOption,
@@ -153,3 +155,40 @@ class MailAdapterGetSendableUsersTest(BaseMailAdapterTest, TestCase):
         )
 
         assert user4.pk not in self.adapter.get_sendable_users(project)
+
+
+class MailAdapterBuildSubjectPrefixTest(BaseMailAdapterTest, TestCase):
+    def test_default_prefix(self):
+        assert self.adapter._build_subject_prefix(self.project) == "[Sentry] "
+
+    def test_project_level_prefix(self):
+        prefix = "[Example prefix] "
+        ProjectOption.objects.set_value(
+            project=self.project, key=u"mail:subject_prefix", value=prefix
+        )
+        assert self.adapter._build_subject_prefix(self.project) == prefix
+
+
+class MailAdapterBuildMessageTest(BaseMailAdapterTest, TestCase):
+    def test(self):
+        subject = "hello"
+        msg = self.adapter._build_message(self.project, subject)
+        assert msg._send_to == set([self.user.email])
+        assert msg.subject.endswith(subject)
+
+    def test_specify_send_to(self):
+        subject = "hello"
+        send_to_user = self.create_user("hello@timecube.com")
+        msg = self.adapter._build_message(self.project, subject, send_to=[send_to_user.id])
+        assert msg._send_to == set([send_to_user.email])
+        assert msg.subject.endswith(subject)
+
+
+class MailAdapterSendMailTest(BaseMailAdapterTest, TestCase):
+    def test(self):
+        subject = "hello"
+        with self.tasks():
+            self.adapter._send_mail(self.project, subject, body="hi")
+            msg = mail.outbox[0]
+            assert msg.subject.endswith(subject)
+            assert msg.recipients() == [self.user.email]
