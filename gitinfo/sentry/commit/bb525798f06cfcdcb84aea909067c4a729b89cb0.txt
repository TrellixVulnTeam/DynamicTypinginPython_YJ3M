commit bb525798f06cfcdcb84aea909067c4a729b89cb0
Author: Jan Michael Auer <account@jauer.org>
Date:   Tue Dec 11 08:53:16 2018 -0800

    ref(event_manager): Use meta for validation errors (#10779)

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 7607fbbd35..789d7c0059 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -31,7 +31,7 @@ from sentry.coreapi import (
     decode_data,
     safely_load_json_string,
 )
-from sentry.interfaces.base import get_interface, prune_empty_keys, InterfaceValidationError
+from sentry.interfaces.base import get_interface, prune_empty_keys
 from sentry.interfaces.exception import normalize_mechanism_meta
 from sentry.interfaces.schemas import validate_and_default_interface
 from sentry.lang.native.utils import get_sdk_from_event
@@ -180,12 +180,17 @@ def plugin_is_regression(group, event):
     return True
 
 
-def process_timestamp(value, current_datetime=None):
+def process_timestamp(value, meta, current_datetime=None):
+    original_value = value
+    if value is None:
+        return None
+
     if is_float(value):
         try:
             value = datetime.fromtimestamp(float(value))
         except Exception:
-            raise InvalidTimestamp(EventError.INVALID_DATA)
+            meta.add_error(EventError.INVALID_DATA, original_value)
+            return None
     elif not isinstance(value, datetime):
         # all timestamps are in UTC, but the marker is optional
         if value.endswith('Z'):
@@ -201,16 +206,19 @@ def process_timestamp(value, current_datetime=None):
         try:
             value = datetime.strptime(value, fmt)
         except Exception:
-            raise InvalidTimestamp(EventError.INVALID_DATA)
+            meta.add_error(EventError.INVALID_DATA, original_value)
+            return None
 
     if current_datetime is None:
         current_datetime = datetime.now()
 
     if value > current_datetime + ALLOWED_FUTURE_DELTA:
-        raise InvalidTimestamp(EventError.FUTURE_TIMESTAMP)
+        meta.add_error(EventError.FUTURE_TIMESTAMP, original_value)
+        return None
 
     if value < current_datetime - timedelta(days=30):
-        raise InvalidTimestamp(EventError.PAST_TIMESTAMP)
+        meta.add_error(EventError.PAST_TIMESTAMP, original_value)
+        return None
 
     return float(value.strftime('%s'))
 
@@ -299,8 +307,18 @@ else:
             return scoreclause_sql(self, connection)
 
 
-class InvalidTimestamp(Exception):
-    pass
+def add_meta_errors(errors, meta):
+    for field_meta in meta:
+        original_value = field_meta.get().get('val')
+
+        for i, (err_type, err_data) in enumerate(field_meta.iter_errors()):
+            error = dict(err_data)
+            error['type'] = err_type
+            if field_meta.path:
+                error['name'] = field_meta.path
+            if i == 0 and original_value is not None:
+                error['value'] = original_value
+            errors.append(error)
 
 
 def _decode_event(data, content_encoding):
@@ -431,11 +449,6 @@ class EventManager(object):
             if self._auth is not None:
                 data['sdk'] = data.get('sdk') or parse_client_as_sdk(self._auth.client)
 
-        # permit the client to transmit errors as well.
-        errors = data.get('errors')
-        if not errors:
-            errors = data['errors'] = []
-
         # Before validating with a schema, attempt to cast values to their desired types
         # so that the schema doesn't have to take every type variation into account.
         text = six.text_type
@@ -457,7 +470,6 @@ class EventManager(object):
             'dist': lambda v: text(v).strip() if v is not None else v,
             'time_spent': lambda v: int(v) if v is not None else v,
             'tags': lambda v: [(text(v_k).replace(' ', '-').strip(), text(v_v).strip()) for (v_k, v_v) in dict(v).items()],
-            'timestamp': lambda v: process_timestamp(v),
             'platform': lambda v: v if v in VALID_PLATFORMS else 'other',
             'logentry': lambda v: v if isinstance(v, dict) else {'message': v},
 
@@ -470,17 +482,17 @@ class EventManager(object):
         meta = Meta(data.get('_meta'))
 
         for c in casts:
-            if data.get(c) is not None:
+            value = data.pop(c, None)
+            if value is not None:
                 try:
-                    data[c] = casts[c](data[c])
-                except InvalidTimestamp as it:
-                    errors.append({'type': it.args[0], 'name': c, 'value': data[c]})
-                    meta.enter(c).add_error(it, data[c])
-                    del data[c]
+                    data[c] = casts[c](value)
                 except Exception as e:
-                    errors.append({'type': EventError.INVALID_DATA, 'name': c, 'value': data[c]})
-                    meta.enter(c).add_error(e, data[c])
-                    del data[c]
+                    meta.enter(c).add_error(EventError.INVALID_DATA, value, {
+                        'reason': six.text_type(e),
+                    })
+
+        data['timestamp'] = process_timestamp(data.get('timestamp'),
+                                              meta.enter('timestamp'))
 
         # raw 'message' is coerced to the Message interface.  Longer term
         # we want to treat 'message' as a pure alias for 'logentry' but
@@ -516,11 +528,10 @@ class EventManager(object):
         # Validate main event body and tags against schema.
         # XXX(ja): jsonschema does not like CanonicalKeyDict, so we need to pass
         #          in the inner data dict.
-        is_valid, event_errors = validate_and_default_interface(data.data, 'event')
-        errors.extend(event_errors)
+        validate_and_default_interface(data.data, 'event', meta=meta)
         if data.get('tags') is not None:
-            is_valid, tag_errors = validate_and_default_interface(data['tags'], 'tags', name='tags')
-            errors.extend(tag_errors)
+            validate_and_default_interface(
+                data['tags'], 'tags', name='tags', meta=meta.enter('tags'))
 
         # Validate interfaces
         for k in list(iter(data)):
@@ -529,26 +540,22 @@ class EventManager(object):
 
             value = data.pop(k)
 
+            # Ignore all top-level None and empty values, regardless whether
+            # they are interfaces or not. For all other unrecognized attributes,
+            # we emit an explicit error.
             if not value:
-                logger.debug('Ignored empty interface value: %s', k)
                 continue
 
             try:
                 interface = get_interface(k)
             except ValueError:
                 logger.debug('Ignored unknown attribute: %s', k)
-                errors.append({'type': EventError.INVALID_ATTRIBUTE, 'name': k})
+                meta.enter(k).add_error(EventError.INVALID_ATTRIBUTE)
                 continue
 
-            try:
-                inst = interface.to_python(value)
-                data[inst.path] = inst.to_json()
-            except Exception as e:
-                log = logger.debug if isinstance(
-                    e, InterfaceValidationError) else logger.error
-                log('Discarded invalid value for interface: %s (%r)', k, value, exc_info=True)
-                errors.append({'type': EventError.INVALID_DATA, 'name': k, 'value': value})
-                meta.enter(k).add_error(e, value)
+            normalized = interface.normalize(value, meta.enter(k))
+            if normalized:
+                data[interface.path] = normalized
 
         # Additional data coercion and defaulting we only do for store.
         if self._for_store:
@@ -664,6 +671,17 @@ class EventManager(object):
             if not data.get(key):
                 data.pop(key, None)
 
+        # Merge meta errors into the errors array. We need to iterate over the
+        # raw meta instead of data due to pruned null values.
+        errors = data.get('errors') or []
+        add_meta_errors(errors, meta)
+        add_meta_errors(errors, meta.enter('tags'))
+
+        if errors:
+            data['errors'] = errors
+        elif 'errors' in data:
+            del data['errors']
+
         if meta.raw():
             data['_meta'] = meta.raw()
         elif '_meta' in data:
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index 5eb4f7139b..e7c4bd241b 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -1,11 +1,13 @@
 from __future__ import absolute_import
 
+from collections import Mapping, OrderedDict
+import logging
 import six
-from collections import OrderedDict
 
 from django.conf import settings
 from django.utils.translation import ugettext as _
 
+from sentry.models.eventerror import EventError
 from sentry.utils.canonical import get_canonical_name
 from sentry.utils.html import escape
 from sentry.utils.imports import import_string
@@ -13,6 +15,9 @@ from sentry.utils.safe import safe_execute
 from sentry.utils.decorators import classproperty
 
 
+logger = logging.getLogger("sentry.events")
+
+
 def get_interface(name):
     try:
         name = get_canonical_name(name)
@@ -120,7 +125,66 @@ class Interface(object):
 
     @classmethod
     def to_python(cls, data):
-        return cls(**data)
+        """Creates a python interface object from the given raw data.
+
+        This function can assume fully normalized and valid data. It can create
+        defaults where data is missing but does not need to handle interface
+        validation.
+        """
+        return cls(**data) if data is not None else None
+
+    @classmethod
+    def _normalize(cls, data, meta):
+        """Custom interface normalization. ``data`` is guaranteed to be a
+        non-empty mapping. Return ``None`` for invalid data.
+        """
+        return cls.to_python(data).to_json()
+
+    @classmethod
+    def normalize(cls, data, meta):
+        """Normalizes the given raw data removing or replacing all invalid
+        attributes. If the interface is unprocessable, ``None`` is returned
+        instead.
+
+        Errors are written to the ``meta`` container. Use ``Meta.enter(key)`` to
+        obtain an instance.
+
+        TEMPORARY: The transitional default behavior is to call to_python and
+        catch exceptions into meta data. To migrate, override ``_normalize``.
+        """
+
+        # Gracefully skip empty data. We treat ``None`` and empty objects the
+        # same as missing data. If there are meta errors attached already, they
+        # will remain in meta.
+        if not data:
+            return None
+
+        # Interface data is required to be a JSON object. Places where the
+        # protocol permits lists must be casted to a values wrapper first.
+        if not isinstance(data, Mapping):
+            meta.add_error(EventError.INVALID_DATA, data, {
+                'reason': 'expected %s' % (cls.__name__,),
+            })
+            return None
+
+        try:
+            data = cls._normalize(data, meta=meta)
+        except Exception as e:
+            # XXX: InterfaceValidationErrors can be thrown in the transitional
+            # phase while to_python is being used for normalization. All other
+            # exceptions indicate a programming error and need to be reported.
+            if not isinstance(e, InterfaceValidationError):
+                logger.error('Discarded invalid value for interface: %s (%r)',
+                             cls.path, data, exc_info=True)
+
+            meta.add_error(EventError.INVALID_DATA, data, {
+                'reason': six.text_type(e)
+            })
+            return None
+
+        # As with input data, empty interface data is coerced to None after
+        # normalization.
+        return data or None
 
     def get_api_context(self, is_public=False):
         return self.to_json()
diff --git a/src/sentry/interfaces/schemas.py b/src/sentry/interfaces/schemas.py
index 8da3d28c80..98a180e829 100644
--- a/src/sentry/interfaces/schemas.py
+++ b/src/sentry/interfaces/schemas.py
@@ -26,6 +26,7 @@ from sentry.constants import (
 from sentry.interfaces.base import InterfaceValidationError
 from sentry.models import EventError
 from sentry.tagstore.base import INTERNAL_TAG_KEYS
+from sentry.utils.meta import Meta
 
 
 def iverror(message="Invalid data"):
@@ -734,7 +735,7 @@ def validator_for_interface(name):
     )
 
 
-def validate_and_default_interface(data, interface, name=None,
+def validate_and_default_interface(data, interface, name=None, meta=None,
                                    strip_nones=True, raise_on_invalid=False):
     """
     Modify data to conform to named interface's schema.
@@ -747,6 +748,9 @@ def validate_and_default_interface(data, interface, name=None,
     Returns whether the resulting modified data is valid against the schema and
     a list of any validation errors encountered in processing.
     """
+    if meta is None:
+        meta = Meta()
+
     is_valid = True
     needs_revalidation = False
     errors = []
@@ -770,6 +774,7 @@ def validate_and_default_interface(data, interface, name=None,
                     default = schema['properties'][p]['default']
                     data[p] = default() if callable(default) else default
                 else:
+                    meta.add_error(EventError.MISSING_ATTRIBUTE, data={'name': p})
                     errors.append({'type': EventError.MISSING_ATTRIBUTE, 'name': p})
 
     validator_errors = list(validator.iter_errors(data))
@@ -787,6 +792,7 @@ def validate_and_default_interface(data, interface, name=None,
             error_type = EventError.INVALID_ENVIRONMENT
         else:
             error_type = EventError.INVALID_DATA
+        meta.enter(key).add_error(error_type, data[key])
         errors.append({'type': error_type, 'name': name or key, 'value': data[key]})
 
         if 'default' in ve.schema:
diff --git a/src/sentry/utils/meta.py b/src/sentry/utils/meta.py
index 423b233514..3d5677e74c 100644
--- a/src/sentry/utils/meta.py
+++ b/src/sentry/utils/meta.py
@@ -29,6 +29,13 @@ class Meta(object):
         """
         return Meta(self._meta, path=self._path + map(six.text_type, path))
 
+    @property
+    def path(self):
+        """
+        Returns the full path of this meta instance, joined with dots (".").
+        """
+        return '.'.join(self._path)
+
     def raw(self):
         """
         Returns the raw meta tree at the current path, if it exists; otherwise
@@ -147,3 +154,11 @@ class Meta(object):
 
         if value is not None:
             meta['val'] = value
+
+    def __iter__(self):
+        """
+        Iterates all child meta entries that potentially have errors set.
+        """
+        for key in self.raw():
+            if key != '':
+                yield self.enter(key)
diff --git a/tests/sentry/event_manager/test_process_timestamp.py b/tests/sentry/event_manager/test_process_timestamp.py
index 0f0a0c6231..efb7a86e66 100644
--- a/tests/sentry/event_manager/test_process_timestamp.py
+++ b/tests/sentry/event_manager/test_process_timestamp.py
@@ -1,50 +1,52 @@
 from __future__ import absolute_import
 
-import pytest
-
 from datetime import datetime
 
-from sentry.event_manager import InvalidTimestamp, process_timestamp
-
-
-def test_iso_timestamp():
-    assert process_timestamp(
-        '2012-01-01T10:30:45',
-        current_datetime=datetime(2012, 1, 1, 10, 30, 45),
-    ) == 1325413845.0
-
-
-def test_iso_timestamp_with_ms():
-    assert process_timestamp(
-        '2012-01-01T10:30:45.434',
-        current_datetime=datetime(2012, 1, 1, 10, 30, 45, 434000),
-    ) == 1325413845.0
-
-
-def test_timestamp_iso_timestamp_with_Z():
-    assert process_timestamp(
-        '2012-01-01T10:30:45Z',
-        current_datetime=datetime(2012, 1, 1, 10, 30, 45),
-    ) == 1325413845.0
-
-
-def test_invalid_timestamp():
-    with pytest.raises(InvalidTimestamp):
-        process_timestamp('foo')
-
-
-def test_invalid_numeric_timestamp():
-    with pytest.raises(InvalidTimestamp):
-        process_timestamp('100000000000000000000.0')
-
-
-def test_future_timestamp():
-    with pytest.raises(InvalidTimestamp):
-        process_timestamp('2052-01-01T10:30:45Z')
-
-
-def test_long_microseconds_value():
-    assert process_timestamp(
-        '2012-01-01T10:30:45.341324Z',
-        current_datetime=datetime(2012, 1, 1, 10, 30, 45),
-    ) == 1325413845.0
+from sentry.event_manager import process_timestamp
+from sentry.utils.meta import Meta
+from sentry.testutils import TestCase
+
+
+class ProcessTimestampTest(TestCase):
+    def setUp(self):
+        self.meta = Meta()
+
+    def test_iso_timestamp(self):
+        assert process_timestamp(
+            '2012-01-01T10:30:45',
+            self.meta,
+            current_datetime=datetime(2012, 1, 1, 10, 30, 45),
+        ) == 1325413845.0
+
+    def test_iso_timestamp_with_ms(self):
+        assert process_timestamp(
+            '2012-01-01T10:30:45.434',
+            self.meta,
+            current_datetime=datetime(2012, 1, 1, 10, 30, 45, 434000),
+        ) == 1325413845.0
+
+    def test_timestamp_iso_timestamp_with_Z(self):
+        assert process_timestamp(
+            '2012-01-01T10:30:45Z',
+            self.meta,
+            current_datetime=datetime(2012, 1, 1, 10, 30, 45),
+        ) == 1325413845.0
+
+    def test_invalid_timestamp(self):
+        assert process_timestamp('foo', self.meta) is None
+        assert len(list(self.meta.iter_errors())) == 1
+
+    def test_invalid_numeric_timestamp(self):
+        assert process_timestamp('100000000000000000000.0', self.meta) is None
+        assert len(list(self.meta.iter_errors())) == 1
+
+    def test_future_timestamp(self):
+        assert process_timestamp('2052-01-01T10:30:45Z', self.meta) is None
+        assert len(list(self.meta.iter_errors())) == 1
+
+    def test_long_microseconds_value(self):
+        assert process_timestamp(
+            '2012-01-01T10:30:45.341324Z',
+            self.meta,
+            current_datetime=datetime(2012, 1, 1, 10, 30, 45),
+        ) == 1325413845.0
diff --git a/tests/sentry/event_manager/test_validate_data.py b/tests/sentry/event_manager/test_validate_data.py
index 0a89311f81..fadfb85b03 100644
--- a/tests/sentry/event_manager/test_validate_data.py
+++ b/tests/sentry/event_manager/test_validate_data.py
@@ -169,7 +169,7 @@ def test_reserved_tags():
     assert data["tags"] == [("foo", "bar")]
     assert len(data["errors"]) == 1
     assert data["errors"][0]["type"] == "invalid_data"
-    assert data["errors"][0]["name"] == "tags"
+    assert data["errors"][0]["name"] == "tags.0"
     assert data["errors"][0]["value"] == ("release", "abc123")
 
 
@@ -180,7 +180,7 @@ def test_tag_value():
     assert data["tags"] == [("biz", "baz")]
     assert len(data["errors"]) == 1
     assert data["errors"][0]["type"] == "invalid_data"
-    assert data["errors"][0]["name"] == "tags"
+    assert data["errors"][0]["name"] == "tags.0"
     assert data["errors"][0]["value"] == ("foo", "b\nar")
 
 
