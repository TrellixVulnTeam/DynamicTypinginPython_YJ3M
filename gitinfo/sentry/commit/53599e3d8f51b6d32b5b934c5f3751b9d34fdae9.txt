commit 53599e3d8f51b6d32b5b934c5f3751b9d34fdae9
Author: Chris Clark <christopherchristopherclark@gmail.com>
Date:   Fri Sep 27 13:42:26 2019 -0700

    feat(apm): add tree to tree (#14840)
    
    * visual improvements
    
    * terminate tree on late sibling for each depth
    
    * don't render any tree connector stuff on the root span
    
    * move spanTreeConnector code into a function and add looping ability for connecting bars
    
    * move spanTreeConnector code into a function and add looping ability for connecting bars
    
    * refactor unecessary double iterating loop
    
    * unique keys for spanbars
    
    * move OmitHtmlDivProps to app/utils

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
index 7363c2d4f3..f0546ae54d 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
@@ -5,7 +5,7 @@ import color from 'color';
 import 'intersection-observer'; // this is a polyfill
 
 import {t} from 'app/locale';
-import {defined} from 'app/utils';
+import {defined, OmitHtmlDivProps} from 'app/utils';
 import space from 'app/styles/space';
 import Count from 'app/components/count';
 import Tooltip from 'app/components/tooltip';
@@ -139,6 +139,7 @@ const INTERSECTION_THRESHOLDS: Array<number> = [
 const TOGGLE_BUTTON_MARGIN_RIGHT = 8;
 const TOGGLE_BUTTON_MAX_WIDTH = 40;
 const TOGGLE_BORDER_BOX = TOGGLE_BUTTON_MAX_WIDTH + TOGGLE_BUTTON_MARGIN_RIGHT;
+const MARGIN_LEFT = 8;
 
 const getDurationDisplay = ({
   width,
@@ -167,9 +168,12 @@ type SpanBarProps = {
   spanBarColour: string;
   generateBounds: (bounds: SpanBoundsType) => SpanGeneratedBoundsType;
   treeDepth: number;
+  continuingTreeDepths: Array<number>;
   showSpanTree: boolean;
   numOfSpanChildren: number;
   spanNumber: number;
+  isLast?: boolean;
+  isRoot?: boolean;
   toggleSpanTree: () => void;
 };
 
@@ -266,6 +270,24 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
     }
   };
 
+  renderSpanTreeConnector = ({hasToggler}: {hasToggler: boolean}) => {
+    const {isLast, isRoot, treeDepth, continuingTreeDepths, span} = this.props;
+    if (isRoot) {
+      return null;
+    }
+
+    const connectorBars: Array<React.ReactNode> = continuingTreeDepths.map(depth => {
+      const left = ((treeDepth - depth) * (TOGGLE_BORDER_BOX / 2) + 1) * -1;
+      return <ConnectorBar style={{left}} key={`${span.span_id}-${depth}`} />;
+    });
+
+    return (
+      <SpanTreeConnector isLast={isLast} hasToggler={hasToggler}>
+        {connectorBars}
+      </SpanTreeConnector>
+    );
+  };
+
   renderSpanTreeToggler = ({left}: {left: number}) => {
     const {numOfSpanChildren} = this.props;
 
@@ -273,11 +295,16 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
     const chevron = <Chevron src={chevronSrc} />;
 
     if (numOfSpanChildren <= 0) {
-      return <SpanTreeTogglerContainer style={{left: `${left}px`}} />;
+      return (
+        <SpanTreeTogglerContainer style={{left: `${left}px`}}>
+          {this.renderSpanTreeConnector({hasToggler: false})}
+        </SpanTreeTogglerContainer>
+      );
     }
 
     return (
-      <SpanTreeTogglerContainer style={{left: `${left}px`}}>
+      <SpanTreeTogglerContainer style={{left: `${left}px`}} hasToggler={true}>
+        {this.renderSpanTreeConnector({hasToggler: true})}
         <SpanTreeToggler
           isExpanded={this.props.showSpanTree}
           onClick={event => {
@@ -303,7 +330,6 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
     const op = span.op ? <strong>{`${span.op} \u2014 `}</strong> : '';
     const description = get(span, 'description', span.span_id);
 
-    const MARGIN_LEFT = 8;
     const left = treeDepth * (TOGGLE_BORDER_BOX / 2) + MARGIN_LEFT;
 
     return (
@@ -711,18 +737,12 @@ const getBackgroundColor = ({
   return showStriping ? theme.offWhite : 'white';
 };
 
-type SpanRowCellProps = {
+type SpanRowCellProps = OmitHtmlDivProps<{
   showStriping?: boolean;
   showDetail?: boolean;
-};
-
-type SpanRowCellAndDivProps = Omit<
-  React.HTMLProps<HTMLDivElement>,
-  keyof SpanRowCellProps
-> &
-  SpanRowCellProps;
+}>;
 
-const SpanRowCell = styled('div')<SpanRowCellAndDivProps>`
+const SpanRowCell = styled('div')<SpanRowCellProps>`
   position: absolute;
   padding: ${space(0.5)} 1px;
   height: 100%;
@@ -797,17 +817,63 @@ const SpanBarTitle = styled('div')`
   align-items: center;
 `;
 
-const SpanTreeTogglerContainer = styled('div')`
+type TogglerTypes = OmitHtmlDivProps<{
+  hasToggler?: boolean;
+  isLast?: boolean;
+}>;
+
+const SpanTreeTogglerContainer = styled('div')<TogglerTypes>`
   position: relative;
   height: 15px;
-  width: 40px;
-  min-width: 40px; /* annoying flex thing */
+  width: ${p => (p.hasToggler ? '44px' : '16px')};
+  min-width: ${p => (p.hasToggler ? '44px' : '16px')}; /* annoying flex thing */
   margin-right: ${space(1)};
   z-index: ${zIndex.spanTreeToggler};
   display: flex;
   justify-content: flex-end;
 `;
 
+// one-off to get the perfect heirarchy
+const spanTreeColor = '#D5CEDB';
+
+const SpanTreeConnector = styled('div')<TogglerTypes>`
+  height: ${p => (p.isLast ? '85%' : '175%')};
+  border-left: 1px solid ${spanTreeColor};
+  position: absolute;
+  left: 4px;
+  top: -5px;
+
+  &:before {
+    content: '';
+    width: ${p => (p.hasToggler ? '3px' : '8px')};
+    position: absolute;
+    height: 1px;
+    top: ${p => (p.isLast ? '100%' : '50%')};
+    transform: translateY(-50%);
+    background: ${spanTreeColor};
+  }
+
+  &:after {
+    content: '';
+    width: 4px;
+    height: 4px;
+    border-radius: 50%;
+    /* border radius stops working at 3px */
+    transform: scale(0.5) translateY(-100%);
+    left: ${p => (p.hasToggler ? '1px' : '6px')};
+    top: ${p => (p.isLast ? '100%' : '50%')};
+    position: absolute;
+    background: ${spanTreeColor};
+  }
+`;
+
+const ConnectorBar = styled('div')`
+  height: 250%;
+  border-left: 1px solid ${spanTreeColor};
+  top: -5px;
+  position: absolute;
+`;
+
 const getTogglerTheme = ({isExpanded, theme}) => {
   const buttonTheme = isExpanded ? theme.button.default : theme.button.primary;
   const activeButtonTheme = isExpanded ? theme.button.primary : theme.button.default;
@@ -825,15 +891,9 @@ const getTogglerTheme = ({isExpanded, theme}) => {
   `;
 };
 
-type SpanTreeTogglerProps = {
+type SpanTreeTogglerAndDivProps = OmitHtmlDivProps<{
   isExpanded: boolean;
-};
-
-type SpanTreeTogglerAndDivProps = Omit<
-  React.HTMLProps<HTMLDivElement>,
-  keyof SpanTreeTogglerProps
-> &
-  SpanTreeTogglerProps;
+}>;
 
 const SpanTreeToggler = styled('div')<SpanTreeTogglerAndDivProps>`
   white-space: nowrap;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
index d4faf94432..29486b7274 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
@@ -9,10 +9,13 @@ type PropType = {
   trace: Readonly<ParsedTraceType>;
   generateBounds: (bounds: SpanBoundsType) => SpanGeneratedBoundsType;
   treeDepth: number;
+  continuingTreeDepths: Array<number>;
   numOfSpanChildren: number;
   renderedSpanChildren: Array<JSX.Element>;
   spanBarColour: string;
   spanNumber: number;
+  isLast: boolean;
+  isRoot?: boolean;
 };
 
 type State = {
@@ -46,6 +49,9 @@ class SpanGroup extends React.Component<PropType, State> {
       span,
       numOfSpanChildren,
       trace,
+      isLast,
+      isRoot,
+      continuingTreeDepths,
       generateBounds,
       treeDepth,
       spanNumber,
@@ -62,7 +68,10 @@ class SpanGroup extends React.Component<PropType, State> {
           generateBounds={generateBounds}
           toggleSpanTree={this.toggleSpanTree}
           treeDepth={treeDepth}
+          continuingTreeDepths={continuingTreeDepths}
           spanNumber={spanNumber}
+          isLast={isLast}
+          isRoot={isRoot}
         />
         {this.renderSpanChildren()}
       </React.Fragment>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
index c89ff90856..2b679b17d0 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
@@ -40,7 +40,10 @@ class SpanTree extends React.Component<PropType> {
 
   renderSpan = ({
     spanNumber,
+    isRoot,
+    isLast,
     treeDepth,
+    continuingTreeDepths,
     numOfHiddenSpansAbove,
     childSpans,
     span,
@@ -48,13 +51,15 @@ class SpanTree extends React.Component<PropType> {
   }: {
     spanNumber: number;
     treeDepth: number;
+    continuingTreeDepths: Array<number>;
+    isLast: boolean;
+    isRoot?: boolean;
     numOfHiddenSpansAbove: number;
     span: Readonly<SpanType>;
     childSpans: Readonly<SpanChildrenLookupType>;
     generateBounds: (bounds: SpanBoundsType) => SpanGeneratedBoundsType;
   }): RenderedSpanTree => {
     const spanBarColour: string = pickSpanBarColour(span.op);
-
     const spanChildren: Array<SpanType> = get(childSpans, span.span_id, []);
 
     const bounds = generateBounds({
@@ -70,12 +75,16 @@ class SpanTree extends React.Component<PropType> {
       numOfHiddenSpansAbove: number;
     };
 
+    const treeArr = isLast ? continuingTreeDepths : [...continuingTreeDepths, treeDepth];
+
     const reduced: AccType = spanChildren.reduce(
-      (acc: AccType, spanChild) => {
+      (acc: AccType, spanChild, index) => {
         const key = `${span.trace_id}${spanChild.span_id}`;
 
         const results = this.renderSpan({
           spanNumber: acc.nextSpanNumber,
+          isLast: index + 1 === spanChildren.length,
+          continuingTreeDepths: treeArr,
           treeDepth: treeDepth + 1,
           numOfHiddenSpansAbove: acc.numOfHiddenSpansAbove,
           span: spanChild,
@@ -118,6 +127,9 @@ class SpanTree extends React.Component<PropType> {
           {hiddenSpansMessage}
           <SpanGroup
             spanNumber={spanNumber}
+            isLast={isLast}
+            continuingTreeDepths={continuingTreeDepths}
+            isRoot={isRoot}
             span={span}
             trace={this.props.trace}
             generateBounds={generateBounds}
@@ -151,8 +163,11 @@ class SpanTree extends React.Component<PropType> {
     });
 
     return this.renderSpan({
+      isRoot: true,
+      isLast: true,
       spanNumber: 1,
       treeDepth: 0,
+      continuingTreeDepths: [],
       numOfHiddenSpansAbove: 0,
       span: rootSpan,
       childSpans: trace.childSpans,
diff --git a/src/sentry/static/sentry/app/utils.tsx b/src/sentry/static/sentry/app/utils.tsx
index 0aa73923ff..41fd7973ec 100644
--- a/src/sentry/static/sentry/app/utils.tsx
+++ b/src/sentry/static/sentry/app/utils.tsx
@@ -240,3 +240,9 @@ export function deepFreeze<T>(object: T) {
 
   return Object.freeze(object);
 }
+
+export type OmitHtmlDivProps<P extends object> = Omit<
+  React.HTMLProps<HTMLDivElement>,
+  keyof P
+> &
+  P;
