commit 50d7cb1dfc8484b4d29f128f1ffea5b29e7c0159
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Feb 23 15:50:02 2015 -0800

    Add pluggable view abstraction

diff --git a/src/sentry/plugins/base/v1.py b/src/sentry/plugins/base/v1.py
index de9c965d0b..909eee8816 100644
--- a/src/sentry/plugins/base/v1.py
+++ b/src/sentry/plugins/base/v1.py
@@ -15,6 +15,7 @@ from django.http import HttpResponseRedirect
 from threading import local
 
 from sentry.plugins.base.response import Response
+from sentry.plugins.base.view import PluggableViewMixin
 
 
 class PluginMount(type):
@@ -29,7 +30,7 @@ class PluginMount(type):
         return new_cls
 
 
-class IPlugin(local):
+class IPlugin(local, PluggableViewMixin):
     """
     Plugin interface. Should not be inherited from directly.
 
@@ -174,28 +175,6 @@ class IPlugin(local):
     def get_form_initial(self, project=None):
         return {}
 
-    # Response methods
-
-    def redirect(self, url):
-        """
-        Returns a redirect response type.
-        """
-        return HttpResponseRedirect(url)
-
-    def render(self, template, context=None):
-        """
-        Given a template name, and an optional context (dictionary), returns a
-        ready-to-render response.
-
-        Default context includes the plugin instance.
-
-        >>> plugin.render('template.html', {'hello': 'world'})
-        """
-        if context is None:
-            context = {}
-        context['plugin'] = self
-        return Response(template, context)
-
     # The following methods are specific to web requests
 
     def get_title(self):
diff --git a/src/sentry/plugins/base/view.py b/src/sentry/plugins/base/view.py
new file mode 100644
index 0000000000..061fe5781f
--- /dev/null
+++ b/src/sentry/plugins/base/view.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import
+
+__all__ = ['PluggableViewMixin']
+
+from django.http import HttpResponseRedirect
+
+from .response import Response
+
+
+class PluggableViewMixin(object):
+    """
+    A mix-in which provides a render method which returns a special object to
+    enable embedding of content within base-views.
+    """
+    def redirect(self, url):
+        """
+        Returns a redirect response type.
+        """
+        return HttpResponseRedirect(url)
+
+    def render(self, template, context=None):
+        """
+        Given a template name, and an optional context (dictionary), returns a
+        ready-to-render response.
+
+        Default context includes the plugin instance.
+
+        >>> self.render('template.html', {'hello': 'world'})
+        """
+        if context is None:
+            context = {}
+        context['plugin'] = self
+        return Response(template, context)
