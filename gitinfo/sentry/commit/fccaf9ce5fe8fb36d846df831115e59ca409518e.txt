commit fccaf9ce5fe8fb36d846df831115e59ca409518e
Author: David Cramer <dcramer@gmail.com>
Date:   Wed May 1 01:17:50 2013 -0700

    Remove django-indexer and most of the custom filter functionality

diff --git a/CHANGES b/CHANGES
index 955c4fd92f..6b708bbbeb 100644
--- a/CHANGES
+++ b/CHANGES
@@ -27,6 +27,15 @@ A basic alert system has been added.
 - Configured at the project level.
 - Signaled via Plugin.on_alert.
 
+Filters
+=======
+
+The outdated filter system has been mostly removed. You should rely on
+tagged data for filter generation.
+
+If you were previously defining ``SENTRY_FILTERS`` you should remove it
+from your settings as it will be entirely obsolete in a future version.
+
 Other Changes
 =============
 
diff --git a/docs/config/index.rst b/docs/config/index.rst
index cef7e407fe..246a71b696 100644
--- a/docs/config/index.rst
+++ b/docs/config/index.rst
@@ -49,19 +49,6 @@ This document describes additional configuration options available to the Sentry
 
 		SENTRY_SAMPLE_DATA = False
 
-.. data:: sentry.conf.FILTERS
-    :noindex:
-
-    A list of filters for extending the Sentry interface (as well as post-processing of data).
-
-    ::
-
-		SENTRY_FILTERS = (
-		    'sentry.filters.StatusFilter',
-		    'sentry.filters.LoggerFilter',
-		    'sentry.filters.LevelFilter',
-		)
-
 .. data:: sentry.conf.LOG_LEVELS
     :noindex:
 
diff --git a/setup.py b/setup.py
index 36bfa49faa..fd1f31d066 100755
--- a/setup.py
+++ b/setup.py
@@ -59,7 +59,6 @@ install_requires = [
     'celery>=3.0.15,<3.1.0',
     'django-crispy-forms>=1.2.3,<1.3.0',
     'Django>=1.4.5,<1.5',
-    'django-indexer>=0.3.0,<0.4.0',
     'django-paging>=0.2.4,<0.3.0',
     'django-picklefield>=0.3.0,<0.4.0',
     'django-static-compiler>=0.3.0,<0.4.0',
diff --git a/src/sentry/filters/base.py b/src/sentry/filters/base.py
index d134cabf5f..25162c27b8 100644
--- a/src/sentry/filters/base.py
+++ b/src/sentry/filters/base.py
@@ -9,13 +9,13 @@ sentry.filters.base
 # Widget api is pretty ugly
 from __future__ import absolute_import
 
-__all__ = ('Filter', 'GroupFilter', 'EventFilter')
+__all__ = ('Filter',)
 
 import hashlib
 
 from django.utils.datastructures import SortedDict
 
-from sentry.models import Group, Event, FilterValue, MessageIndex
+from sentry.models import FilterValue
 from sentry.utils.cache import cache
 from .widgets import ChoiceWidget
 
@@ -27,7 +27,6 @@ class Filter(object):
     # This must be a string
     default = ''
     show_label = True
-    types = [Group, Event]
     max_choices = 50
 
     def __init__(self, request, project):
@@ -74,8 +73,6 @@ class Filter(object):
 
     def get_query_set(self, queryset):
         kwargs = {self.column: self.get_value()}
-        if self.column.startswith('data__'):
-            return MessageIndex.objects.get_for_queryset(queryset, **kwargs)
         return queryset.filter(**kwargs)
 
     def process(self, data):
@@ -87,25 +84,11 @@ class Filter(object):
         return widget.render(self.get_value())
 
 
-class EventFilter(Filter):
-    types = [Event]
-
-
-class GroupFilter(Filter):
-    types = [Group]
-
-
 class TagFilter(Filter):
     def get_query_set(self, queryset):
         col, val = self.get_column(), self.get_value()
-        if queryset.model == Event:
-            queryset = queryset.filter(**dict(
-                group__grouptag__key=col,
-                group__grouptag__value=val,
-            ))
-        else:
-            queryset = queryset.filter(**dict(
-                grouptag__key=col,
-                grouptag__value=val,
-            ))
+        queryset = queryset.filter(**dict(
+            grouptag__key=col,
+            grouptag__value=val,
+        ))
         return queryset.distinct()
diff --git a/src/sentry/filters/builtins.py b/src/sentry/filters/builtins.py
index 7a7ff5b612..7c094dc61a 100644
--- a/src/sentry/filters/builtins.py
+++ b/src/sentry/filters/builtins.py
@@ -7,14 +7,13 @@ sentry.filters.base
 """
 from django.utils.datastructures import SortedDict
 from django.utils.translation import ugettext_lazy as _
-from sentry.conf import settings
 from sentry.constants import STATUS_LEVELS
-from .base import Filter, GroupFilter
+from .base import Filter
 
-__all__ = ('StatusFilter', 'LoggerFilter', 'LevelFilter')
+__all__ = ('StatusFilter',)
 
 
-class StatusFilter(GroupFilter):
+class StatusFilter(Filter):
     label = _('Status')
     column = 'status'
     default = '0'
@@ -22,19 +21,3 @@ class StatusFilter(GroupFilter):
 
     def get_choices(self):
         return self.choices
-
-
-class LoggerFilter(Filter):
-    label = _('Logger')
-    column = 'logger'
-
-
-class LevelFilter(Filter):
-    label = _('Level')
-    column = 'level'
-
-    def get_choices(self):
-        return SortedDict((str(k), v) for k, v in settings.LOG_LEVELS)
-
-    def get_query_set(self, queryset):
-        return queryset.filter(level=self.get_value())
diff --git a/src/sentry/filters/helpers.py b/src/sentry/filters/helpers.py
index 9023a11813..cdcd37b95a 100644
--- a/src/sentry/filters/helpers.py
+++ b/src/sentry/filters/helpers.py
@@ -63,6 +63,4 @@ def get_filters(model=None, project=None):
 
     # yield all filters which support ``model``
     for filter_cls in filter_list:
-        if model and model not in filter_cls.types:
-            continue
         yield filter_cls
diff --git a/src/sentry/models.py b/src/sentry/models.py
index c0150bde54..be070e9f00 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -16,7 +16,6 @@ import urlparse
 
 from datetime import timedelta
 from hashlib import md5
-from indexer.models import BaseIndex
 from picklefield.fields import PickledObjectField
 from south.modelsinspector import add_introspection_rules
 
@@ -25,8 +24,7 @@ from django.contrib.auth.signals import user_logged_in
 from django.core.urlresolvers import reverse
 from django.db import models
 from django.db.models import F
-from django.db.models.signals import (post_syncdb, post_save, pre_delete,
-    class_prepared)
+from django.db.models.signals import post_syncdb, post_save, pre_delete
 from django.template.defaultfilters import slugify
 from django.utils import timezone
 from django.utils.datastructures import SortedDict
@@ -34,11 +32,13 @@ from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.conf import settings
-from sentry.constants import (STATUS_LEVELS, MEMBER_TYPES,
+from sentry.constants import (
+    STATUS_LEVELS, MEMBER_TYPES,
     MEMBER_OWNER, MEMBER_USER, PLATFORM_TITLES, PLATFORM_LIST,
     STATUS_UNRESOLVED, STATUS_RESOLVED, STATUS_VISIBLE, STATUS_HIDDEN,
     MINUTE_NORMALIZATION, STATUS_MUTED)
-from sentry.manager import (GroupManager, ProjectManager,
+from sentry.manager import (
+    GroupManager, ProjectManager,
     MetaManager, InstanceMetaManager, SearchDocumentManager, BaseManager,
     UserOptionManager, FilterKeyManager, TeamManager)
 from sentry.signals import buffer_incr_complete, regression_signal
@@ -73,7 +73,8 @@ def sane_repr(*attrs):
     def _repr(self):
         cls = type(self).__name__
 
-        pairs = ('%s=%s' % (a, repr(getattr(self, a, None)))
+        pairs = (
+            '%s=%s' % (a, repr(getattr(self, a, None)))
             for a in attrs)
 
         return u'<%s at 0x%x: %s>' % (cls, id(self), ', '.join(pairs))
@@ -1174,26 +1175,6 @@ class AlertRelatedGroup(Model):
     __repr__ = sane_repr('group_id', 'alert_id')
 
 
-### django-indexer
-
-class MessageIndex(BaseIndex):
-    model = Event
-
-
-## Register Signals
-
-def register_indexes(**kwargs):
-    """
-    Grabs all required indexes from filters and registers them.
-    """
-    from sentry.filters import get_filters
-    logger = logging.getLogger('sentry.setup')
-    for cls in (f for f in get_filters() if f.column.startswith('data__')):
-        MessageIndex.objects.register_index(cls.column, index_to='group')
-        logger.debug('Registered index for for %r', cls.column)
-class_prepared.connect(register_indexes, sender=MessageIndex)
-
-
 def create_default_project(created_models, verbosity=2, **kwargs):
     if Project in created_models:
         if Project.objects.filter(pk=settings.PROJECT).exists():
