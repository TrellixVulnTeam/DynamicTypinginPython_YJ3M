commit 83dacb23d52d6efe6c6a7d5ffbc9511ff4d6cdc7
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Mar 25 11:48:38 2020 -0700

    feat(ui): Add `<PanelTable>` (#17745)
    
    This adds a bare bones css grid that supports loading and empty states.
    
    Co-authored-by: Mark Story <mark@sentry.io>

diff --git a/docs-ui/components/panels.stories.js b/docs-ui/components/panels.stories.js
index 66f2b3c650..7a9818e65a 100644
--- a/docs-ui/components/panels.stories.js
+++ b/docs-ui/components/panels.stories.js
@@ -3,7 +3,13 @@ import {storiesOf} from '@storybook/react';
 import {withInfo} from '@storybook/addon-info';
 
 import Button from 'app/components/button';
-import {Panel, PanelHeader, PanelBody, PanelItem} from 'app/components/panels';
+import {
+  Panel,
+  PanelHeader,
+  PanelBody,
+  PanelItem,
+  PanelTable,
+} from 'app/components/panels';
 import Field from 'app/views/settings/components/forms/field';
 
 storiesOf('UI|Panels', module)
@@ -24,6 +30,49 @@ storiesOf('UI|Panels', module)
       </Panel>
     ))
   )
+  .add(
+    'Panel Table',
+    withInfo({
+      text: 'A Panel for "tabular" data',
+    })(() => (
+      <React.Fragment>
+        <PanelTable
+          // eslint-disable-next-line react/jsx-key
+          headers={[<div>Header #1</div>, 'Header #2', <div>Custom Header Wooooo</div>]}
+        >
+          <div>Panel Item with really long content</div>
+          <div>Panel Item</div>
+          <div>Panel Item</div>
+          <div>Panel Item</div>
+          <div>Panel Item</div>
+          <div>Panel Item</div>
+          <div>Panel Item</div>
+          <div>Panel Item</div>
+          <div>Panel Item</div>
+        </PanelTable>
+
+        <PanelTable
+          isLoading
+          // eslint-disable-next-line react/jsx-key
+          headers={[<div>Header #1</div>, 'Header #2', <div>Custom Header Wooooo</div>]}
+        >
+          <div>Panel Item</div>
+          <div>Panel Item</div>
+          <div>Panel Item</div>
+        </PanelTable>
+
+        <PanelTable
+          isEmpty
+          // eslint-disable-next-line react/jsx-key
+          headers={[<div>Header #1</div>, 'Header #2', <div>Custom Header Wooooo</div>]}
+        >
+          <div>Panel Item</div>
+          <div>Panel Item</div>
+          <div>Panel Item</div>
+        </PanelTable>
+      </React.Fragment>
+    ))
+  )
   .add(
     'With Fields',
     withInfo({
diff --git a/src/sentry/static/sentry/app/components/emptyStateWarning.tsx b/src/sentry/static/sentry/app/components/emptyStateWarning.tsx
index 649bc4f034..2720f3ab59 100644
--- a/src/sentry/static/sentry/app/components/emptyStateWarning.tsx
+++ b/src/sentry/static/sentry/app/components/emptyStateWarning.tsx
@@ -12,18 +12,24 @@ type Props = {
   small?: boolean;
   children?: React.ReactNode;
   withIcon?: boolean;
+  className?: string;
 };
 
-const EmptyStateWarning = ({small = false, withIcon = true, children}: Props) =>
+const EmptyStateWarning = ({
+  small = false,
+  withIcon = true,
+  children,
+  className,
+}: Props) =>
   small ? (
-    <EmptyMessage>
+    <EmptyMessage className={className}>
       <SmallMessage>
         {withIcon && <StyledIconWarning color={theme.gray2} size="lg" />}
         {children}
       </SmallMessage>
     </EmptyMessage>
   ) : (
-    <EmptyStreamWrapper data-test-id="empty-state">
+    <EmptyStreamWrapper data-test-id="empty-state" className={className}>
       {withIcon && <HeroIcon src="icon-circle-exclamation" size="54" />}
       {children}
     </EmptyStreamWrapper>
diff --git a/src/sentry/static/sentry/app/components/panels/index.tsx b/src/sentry/static/sentry/app/components/panels/index.tsx
index 765eb68b68..90207e0ece 100644
--- a/src/sentry/static/sentry/app/components/panels/index.tsx
+++ b/src/sentry/static/sentry/app/components/panels/index.tsx
@@ -5,4 +5,6 @@ import PanelFooter from 'app/components/panels/panelFooter';
 import PanelItem from 'app/components/panels/panelItem';
 import PanelAlert from 'app/components/panels/panelAlert';
 
+export {default as PanelTable} from 'app/components/panels/panelTable';
+
 export {Panel, PanelHeader, PanelBody, PanelFooter, PanelItem, PanelAlert};
diff --git a/src/sentry/static/sentry/app/components/panels/panelTable.tsx b/src/sentry/static/sentry/app/components/panels/panelTable.tsx
new file mode 100644
index 0000000000..80c4935ec7
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/panels/panelTable.tsx
@@ -0,0 +1,152 @@
+import React from 'react';
+import isPropValid from '@emotion/is-prop-valid';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import space from 'app/styles/space';
+
+import Panel from './panel';
+
+type Props = {
+  /**
+   * Headers of the table.
+   */
+  headers: React.ReactNode[];
+
+  /**
+   * The body of the table. Make sure the number of children elements are
+   * multiples of the length of headers.
+   */
+  children: React.ReactNode | (() => React.ReactNode);
+
+  /**
+   * If this is true, then display a loading indicator
+   */
+  isLoading?: boolean;
+
+  /**
+   * Displays an `<EmptyStateWarning>` if true
+   */
+  isEmpty?: boolean;
+
+  /**
+   * Message to use for `<EmptyStateWarning>`
+   */
+  emptyMessage?: React.ReactNode;
+
+  /**
+   * Renders without predefined padding on the header and body cells
+   */
+  disablePadding?: boolean;
+
+  className?: string;
+};
+
+/**
+ * Bare bones table generates a CSS grid template based on the content.
+ *
+ * The number of children elements should be a multiple of `this.props.columns` to have
+ * it look ok.
+ *
+ *
+ * Potential customizations:
+ * - [ ] Add borders for columns to make them more like cells
+ * - [ ] Add prop to disable borders for rows
+ * - [ ] We may need to wrap `children` with our own component (similar to what we're doing
+ *       with `headers`. Then we can get rid of that gross `> *` selector
+ * - [ ] Allow customization of wrappers (Header and body cells if added)
+ */
+const PanelTable = ({
+  headers,
+  children,
+  isLoading,
+  isEmpty,
+  emptyMessage = t('There are no items to display'),
+  disablePadding,
+  className,
+}: Props) => {
+  const shouldShowLoading = isLoading === true;
+  const shouldShowEmptyMessage = !shouldShowLoading && isEmpty;
+  const shouldShowContent = !shouldShowLoading && !shouldShowEmptyMessage;
+
+  return (
+    <Wrapper
+      columns={headers.length}
+      disablePadding={disablePadding}
+      className={className}
+    >
+      {headers.map((header, i) => (
+        <PanelTableHeader key={i}>{header}</PanelTableHeader>
+      ))}
+
+      {shouldShowLoading && (
+        <LoadingWrapper>
+          <LoadingIndicator />
+        </LoadingWrapper>
+      )}
+
+      {shouldShowEmptyMessage && (
+        <TableEmptyStateWarning>
+          <p>{emptyMessage}</p>
+        </TableEmptyStateWarning>
+      )}
+
+      {shouldShowContent && getContent(children)}
+    </Wrapper>
+  );
+};
+
+function getContent(children: Props['children']) {
+  if (typeof children === 'function') {
+    return children();
+  }
+
+  return children;
+}
+
+type WrapperProps = {
+  /**
+   * The number of columns the table will have, this is derived from the headers list
+   */
+  columns: number;
+  disablePadding: Props['disablePadding'];
+};
+
+const LoadingWrapper = styled('div')``;
+
+const TableEmptyStateWarning = styled(EmptyStateWarning)``;
+
+const Wrapper = styled(Panel, {
+  shouldForwardProp: p => isPropValid(p) && p !== 'columns',
+})<WrapperProps>`
+  display: grid;
+  grid-template-columns: repeat(${p => p.columns}, auto);
+
+  > * {
+    padding: ${p => (p.disablePadding ? 0 : space(2))};
+    border-bottom: 1px solid ${p => p.theme.borderDark};
+
+    &:nth-child(-${p => p.columns}) {
+      border-bottom: none;
+    }
+  }
+
+  > ${TableEmptyStateWarning}, > ${LoadingWrapper} {
+    border: none;
+    grid-column: auto / span ${p => p.columns};
+  }
+`;
+
+const PanelTableHeader = styled('div')`
+  color: ${p => p.theme.gray3};
+  font-size: 13px;
+  font-weight: 600;
+  text-transform: uppercase;
+  border-radius: ${p => p.theme.borderRadius} ${p => p.theme.borderRadius} 0 0;
+  background: ${p => p.theme.offWhite};
+  line-height: 1;
+`;
+
+export default PanelTable;
diff --git a/tests/js/spec/components/panels/panelTable.spec.jsx b/tests/js/spec/components/panels/panelTable.spec.jsx
new file mode 100644
index 0000000000..ddd8816d3b
--- /dev/null
+++ b/tests/js/spec/components/panels/panelTable.spec.jsx
@@ -0,0 +1,74 @@
+import React from 'react';
+
+import {mountWithTheme} from 'sentry-test/enzyme';
+import PanelTable from 'app/components/panels/panelTable';
+
+describe('PanelTable', function() {
+  const createWrapper = (props = {}) =>
+    mountWithTheme(
+      <PanelTable
+        headers={[<div key="1">1</div>, <div key="2">2</div>, <div key="3">3</div>]}
+        {...props}
+      >
+        <div data-test-id="cell">Cell 1</div>
+        <div data-test-id="cell">Cell 2</div>
+        <div data-test-id="cell">Cell 3</div>
+      </PanelTable>
+    );
+
+  it('renders headers', function() {
+    const wrapper = createWrapper();
+
+    expect(wrapper.find('PanelTableHeader')).toHaveLength(3);
+
+    // 3 divs from headers, 3 from "body"
+    expect(wrapper.find('[data-test-id="cell"]')).toHaveLength(3);
+
+    expect(
+      wrapper
+        .find('PanelTableHeader')
+        .at(0)
+        .text()
+    ).toBe('1');
+  });
+
+  it('renders loading', function() {
+    const wrapper = createWrapper({isLoading: true});
+
+    // Does not render content
+    expect(wrapper.find('[data-test-id="cell"]')).toHaveLength(0);
+
+    // renders loading
+    expect(wrapper.find('LoadingIndicator')).toBeDefined();
+  });
+
+  it('ignores empty state when loading', function() {
+    const wrapper = createWrapper({isLoading: true, isEmpty: true});
+
+    // renders loading
+    expect(wrapper.find('LoadingIndicator')).toBeDefined();
+    expect(wrapper.find('EmptyStateWarning')).toHaveLength(0);
+  });
+
+  it('renders empty state with custom message', function() {
+    const wrapper = createWrapper({isEmpty: true, emptyMessage: 'I am empty inside'});
+
+    // Does not render content
+    expect(wrapper.find('[data-test-id="cell"]')).toHaveLength(0);
+
+    // renders empty state
+    expect(wrapper.find('EmptyStateWarning').text()).toBe('I am empty inside');
+  });
+
+  it('children can be a render function', function() {
+    const wrapper = mountWithTheme(
+      <PanelTable
+        headers={[<div key="1">1</div>, <div key="2">2</div>, <div key="3">3</div>]}
+      >
+        {() => <p>I am child</p>}
+      </PanelTable>
+    );
+
+    expect(wrapper.find('p').text()).toBe('I am child');
+  });
+});
