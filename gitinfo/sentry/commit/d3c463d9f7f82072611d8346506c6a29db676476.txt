commit d3c463d9f7f82072611d8346506c6a29db676476
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Nov 25 14:56:21 2012 -0800

    Various improvements to the store api endpoint

diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index 6916daec50..d716b8c842 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -74,15 +74,3 @@ def is_valid_origin(origin, project=None):
         return False
 
     return origin in allowed
-
-
-def apply_access_control_headers(response, origin):
-    """
-    Provides the Access-Control headers to enable cross-site HTTP requests. You
-    can find more information about these headers here:
-    https://developer.mozilla.org/En/HTTP_access_control#Simple_requests
-    """
-    if origin:
-        response['Access-Control-Allow-Origin'] = origin
-
-    return response
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 4dbd0a7125..2de316de95 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -31,8 +31,7 @@ from sentry.utils import json
 from sentry.utils.cache import cache
 from sentry.utils.db import has_trending
 from sentry.utils.javascript import to_json
-from sentry.utils.http import is_valid_origin, apply_access_control_headers, \
-  get_origins
+from sentry.utils.http import is_valid_origin, get_origins
 from sentry.web.decorators import has_access
 from sentry.web.frontend.groups import _get_group_list
 from sentry.web.helpers import render_to_response, render_to_string, get_project_list
@@ -64,7 +63,10 @@ def transform_groups(request, group_list, template='sentry/partial/_group.html')
 
 class Auth(object):
     def __init__(self, auth_vars):
-        self.client = auth_vars.get('client')
+        self.client = auth_vars.get('sentry_client')
+        self.version = auth_vars.get('sentry_version')
+        self.secret_key = auth_vars.get('sentry_secret')
+        self.public_key = auth_vars.get('sentry_key')
 
 
 class APIView(BaseView):
@@ -105,18 +107,22 @@ class APIView(BaseView):
 
     @csrf_exempt
     def dispatch(self, request, project_id=None, *args, **kwargs):
+        origin = request.META.get('HTTP_ORIGIN', None)
+
         response = self._dispatch(request, project_id=project_id, *args, **kwargs)
 
         if response.status_code != 200:
             # Set X-Sentry-Error as in many cases it is easier to inspect the headers
             response['X-Sentry-Error'] = response.content[:200]  # safety net on content length
 
-            # We allow all origins on errors
-            response['Access-Control-Allow-Origin'] = '*'
+            if origin:
+                # We allow all origins on errors
+                response['Access-Control-Allow-Origin'] = '*'
 
-        response['Access-Control-Allow-Headers'] = 'X-Sentry-Auth, X-Requested-With, Origin, Accept, Content-Type, ' \
-            'Authentication'
-        response['Access-Control-Allow-Methods'] = ', '.join(self._allowed_methods())
+        if origin:
+            response['Access-Control-Allow-Headers'] = 'X-Sentry-Auth, X-Requested-With, Origin, Accept, Content-Type, ' \
+                'Authentication'
+            response['Access-Control-Allow-Methods'] = ', '.join(self._allowed_methods())
 
         return response
 
@@ -166,6 +172,11 @@ class APIView(BaseView):
 
             auth = Auth(auth_vars)
 
+            if auth.version == '3':
+                # Version 3 enforces secret key for server side requests
+                if origin is None and not auth.secret_key:
+                    return HttpResponse('Missing required attribute in authentication header: sentry_secret', status=400)
+
             try:
                 response = super(APIView, self).dispatch(request, project=project, auth=auth, **kwargs)
 
@@ -175,7 +186,8 @@ class APIView(BaseView):
                 }, exc_info=True)
                 response = HttpResponse(unicode(error.msg), status=error.http_status)
 
-        response = apply_access_control_headers(response, origin)
+        if origin:
+            response['Access-Control-Allow-Origin'] = origin
 
         return response
 
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index 3113986786..a9fe455ea6 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -4,8 +4,7 @@ from __future__ import absolute_import
 
 from django.http import HttpResponse
 
-from sentry.utils.http import is_same_domain, apply_access_control_headers, \
-  is_valid_origin
+from sentry.utils.http import is_same_domain, is_valid_origin
 
 from sentry.testutils import TestCase
 
@@ -30,22 +29,6 @@ class SameDomainTestCase(TestCase):
         self.assertFalse(is_same_domain(url1, url2))
 
 
-class AccessControlTestCase(TestCase):
-
-    def test_allow_origin_none(self):
-        """If ALLOW_ORIGIN is None, the headers should not be added"""
-        with self.Settings(SENTRY_ALLOW_ORIGIN=None):
-            response = apply_access_control_headers(HttpResponse(), None)
-            self.assertEqual(response.get('Access-Control-Allow-Origin', None),
-                             None)
-
-    def test_allow_origin(self):
-        with self.Settings(SENTRY_ALLOW_ORIGIN="http://foo.example"):
-            response = apply_access_control_headers(HttpResponse(), "http://foo.example")
-            self.assertEqual(response.get('Access-Control-Allow-Origin', None),
-                             "http://foo.example")
-
-
 class IsValidOriginTestCase(TestCase):
 
     def test_project(self):
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 3736d4f238..875b30669f 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -33,6 +33,23 @@ class StoreViewTest(TestCase):
         self.assertIn('Content-Length', resp)
         self.assertEquals(resp['Content-Length'], '0')
 
+    def test_options_response_with_invalid_origin(self):
+        resp = self.client.options(self.path, HTTP_ORIGIN='http://foo.com')
+        self.assertEquals(resp.status_code, 400)
+        self.assertIn('Access-Control-Allow-Origin', resp)
+        self.assertEquals(resp['Access-Control-Allow-Origin'], '*')
+        self.assertIn('X-Sentry-Error', resp)
+        self.assertEquals(resp['X-Sentry-Error'], "Invalid origin: 'http://foo.com'")
+        self.assertEquals(resp.content, resp['X-Sentry-Error'])
+
+    @mock.patch('sentry.web.api.is_valid_origin')
+    def test_options_response_with_valid_origin(self, is_valid_origin):
+        is_valid_origin.return_value = True
+        resp = self.client.options(self.path, HTTP_ORIGIN='http://foo.com')
+        self.assertEquals(resp.status_code, 200)
+        self.assertIn('Access-Control-Allow-Origin', resp)
+        self.assertEquals(resp['Access-Control-Allow-Origin'], 'http://foo.com')
+
 
 class CrossDomainXmlTest(TestCase):
     @fixture
