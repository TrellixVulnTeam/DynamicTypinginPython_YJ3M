commit feb2e60dadbd65da669494d97d248a21b954ed22
Author: Chris Montrois <cmontrois@quickleft.com>
Date:   Wed Jul 1 14:36:09 2015 -0600

    Fix broken JS tests
    
    General changes around getting the test harness working for JS.
    - Moved js installation into Makefile
    - Moved some npm dependencies into devDependencies
    - Removed broken, legacy tests
    - Updated Karma config for webpack
    - Added webpack test loader

diff --git a/Makefile b/Makefile
index 57bf5ae4e0..c407e4ec10 100644
--- a/Makefile
+++ b/Makefile
@@ -78,6 +78,8 @@ test-cli:
 
 test-js:
 	@echo "--> Running JavaScript tests"
+	@npm install
+	@webpack
 	@npm run test
 	@echo ""
 
diff --git a/package.json b/package.json
index 16a1e8f0f3..2d61fbc652 100644
--- a/package.json
+++ b/package.json
@@ -6,9 +6,7 @@
     "url": "git://github.com/getsentry/sentry.git"
   },
   "dependencies": {
-    "babel-loader": "^5.1.4",
     "bootstrap": "^3.3.4",
-    "chai": "1.7.x",
     "crypto-js": "^3.1.2-5",
     "gulp": "^3.8.11",
     "gulp-clean": "^0.3.1",
@@ -21,13 +19,10 @@
     "jshint": "~2.5.0",
     "jsxhint": "^0.9.0",
     "karma": "^0.12.19",
-    "karma-chai": "^0.1.0",
     "karma-mocha": "^0.1.6",
     "karma-phantomjs-launcher": "^0.1.4",
-    "karma-sinon": "^1.0.3",
     "karma-sourcemap-loader": "^0.3.3",
     "less": "1.7.0",
-    "mocha": "1.9.x",
     "moment": "^2.8.4",
     "node-libs-browser": "^0.5.2",
     "raven-js": "^1.1.19",
@@ -37,7 +32,6 @@
     "react-router": "^0.13.3",
     "react-sticky": "^2.1.0",
     "reflux": "^0.2.8",
-    "sinon": "^1.10.3",
     "sync-exec": "^0.5.0",
     "webpack": "^1.9.10"
   },
@@ -45,7 +39,16 @@
   "APIMethod": "stub",
   "proxyURL": "http://localhost:8000",
   "scripts": {
-    "pretest": "npm install && webpack",
     "test": "node_modules/karma/bin/karma start tests/karma.conf.js --single-run"
+  },
+  "devDependencies": {
+    "babel-core": "^5.6.15",
+    "babel-loader": "^5.2.2",
+    "chai": "^3.0.0",
+    "karma-chai": "^0.1.0",
+    "karma-sinon": "^1.0.4",
+    "karma-webpack": "^1.5.1",
+    "sinon": "^1.15.4",
+    "sinon-chai": "^2.8.0"
   }
 }
diff --git a/tests/js/spec/assigneeSelectorSpec.js b/tests/js/spec/assigneeSelectorSpec.js
deleted file mode 100644
index e1bf707f8f..0000000000
--- a/tests/js/spec/assigneeSelectorSpec.js
+++ /dev/null
@@ -1,4 +0,0 @@
-describe('<AssigneeSelector>', function(){
-  // TODO(dcramer): figure out how we make 'app' a module
-  var AssigneeSelector = require('app/components/assigneeSelector.jsx');
-});
diff --git a/tests/js/spec/collectionSpec.js b/tests/js/spec/collectionSpec.js
deleted file mode 100644
index a365150b4a..0000000000
--- a/tests/js/spec/collectionSpec.js
+++ /dev/null
@@ -1,70 +0,0 @@
-describe('utils.Collection', function(){
-  // TODO(dcramer): figure out how we make 'app' a module
-  var Collection = require('app/utils/collection.jsx');
-
-  describe('add', function() {
-    it('should append elements', function(){
-      var c = new Collection();
-      c.add({id: 'foo'});
-      c.add({id: 'bar'});
-
-      assert.equal(c.length, 2);
-
-      assert.equal(c[0].id, 'foo');
-      assert.equal(c[1].id, 'bar');
-    });
-
-    it('should update existing elements', function(){
-      var c = new Collection();
-      c.add({id: 'foo', biz: 'baz'});
-      c.add({id: 'foo', biz: 'boz'});
-
-      assert.equal(c.length, 1);
-
-      assert.equal(c[0].id, 'foo');
-      assert.equal(c[0].biz, 'boz');
-    });
-
-    it('should should respect limit', function(){
-      var c = new Collection([], {limit: 2});
-      c.add({id: 'foo'});
-      c.add({id: 'bar'});
-      c.add({id: 'baz'});
-
-      assert.equal(c.length, 2);
-
-      assert.equal(c[0].id, 'foo');
-      assert.equal(c[1].id, 'bar');
-    });
-
-  });
-
-  describe('remove', function() {
-    it('should not fail with missing elements', function(){
-      var c = new Collection();
-
-      c.remove({id: 'foo'});
-    });
-
-    it('should remove matching element', function(){
-      var c = new Collection([{id: 'foo'}, {id: 'bar'}]);
-
-      c.remove({id: 'foo'});
-
-      assert.equal(c.length, 1);
-
-      assert.equal(c[0].id, 'bar');
-    });
-  });
-
-  describe('empty', function() {
-    it('should clear all values', function(){
-      var c = new Collection([{id: 'foo'}, {id: 'bar'}]);
-
-      c.empty();
-
-      assert.equal(c.length, 0);
-    });
-  });
-
-});
diff --git a/tests/js/spec/floatFormat.js b/tests/js/spec/floatFormat.js
deleted file mode 100644
index 0aac5ed857..0000000000
--- a/tests/js/spec/floatFormat.js
+++ /dev/null
@@ -1,9 +0,0 @@
-describe("floatFormat", function() {
-  it("does format two decimal places", function() {
-    assert.strictEqual(app.utils.floatFormat(1.134, 2), 1.13);
-  });
-
-  it("does format one decimal places", function() {
-    assert.strictEqual(app.utils.floatFormat(1.134, 1), 1.1);
-  });
-});
diff --git a/tests/js/spec/formatNumber.js b/tests/js/spec/formatNumber.js
deleted file mode 100644
index 53d7a47e7b..0000000000
--- a/tests/js/spec/formatNumber.js
+++ /dev/null
@@ -1,22 +0,0 @@
-describe("formatNumber", function() {
-  it("handles billions", function() {
-    assert.strictEqual(app.utils.formatNumber(1134134134), '1.1b');
-  });
-
-  it("handles millions", function() {
-    assert.strictEqual(app.utils.formatNumber(1234134), '1.2m');
-  });
-
-  it("handles thousands", function() {
-    assert.strictEqual(app.utils.formatNumber(5334), '5.3k');
-  });
-
-  it("removes decimals on large numbers", function() {
-    assert.strictEqual(app.utils.formatNumber(533334), '533k');
-    assert.strictEqual(app.utils.formatNumber(53334), '53k');
-  });
-
-  it("doesnt format small numbers", function() {
-    assert.strictEqual(app.utils.formatNumber(15), '15');
-  });
-});
diff --git a/tests/karma.conf.js b/tests/karma.conf.js
index 46636c1c15..561ff4813c 100644
--- a/tests/karma.conf.js
+++ b/tests/karma.conf.js
@@ -1,51 +1,39 @@
 // Karma configuration
 // Generated on Sat Jul 26 2014 13:49:45 GMT+0200 (CEST)
 var path = require('path');
-
 var appPrefix = path.join(__dirname, "../src/sentry/static/sentry/app");
 
-console.log(appPrefix);
-
 module.exports = function(config) {
   config.set({
 
     // base path that will be used to resolve all patterns (eg. files, exclude)
-    basePath: '..',
-
+    basePath: '../',
 
     // frameworks to use
     // available frameworks: https://npmjs.org/browse/keyword/karma-adapter
     frameworks: ['mocha', 'chai', 'sinon'],
 
-
     // list of files / patterns to load in the browser
     files: [
-      'src/sentry/static/sentry/dist/vendor.js',
-      'src/sentry/static/sentry/dist/app.js',
-      'tests/js/**/*Spec.js'
-    ],
-
-
-    // list of files to exclude
-    exclude: [
+      'tests/js/vendor/**/*.js',
+      'tests/tests.webpack.js'
     ],
 
     webpack: {
       cache: true,
-        module: {
-        resolve: {
-          alias: {
-            "app": appPrefix
-          },
-          modulesDirectories: ["node_modules"],
-          extensions: ["", ".jsx", ".js", ".json"]
+      resolve: {
+        alias: {
+          "app": appPrefix
         },
+        modulesDirectories: ["node_modules"],
+        extensions: ["", ".jsx", ".js", ".json"]
+      },
+      module: {
         loaders: [
           {
-            test: /\.jsx$/,
-            loader: "jsx-loader?insertPragma=React.DOM&harmony",
-            include: path.join(__dirname, appPrefix),
-            exclude: /vendor/
+            exclude: /(vendor|node_modules)/,
+            test: /\.jsx?$/,
+            loader: "babel-loader"
           }
         ]
       },
@@ -53,15 +41,7 @@ module.exports = function(config) {
     },
 
     webpackMiddleware: {
-        // webpack-dev-middleware configuration
-        // i. e.
-        noInfo: true
-    },
-
-    webpackServer: {
-      stats: {
-        colors: true
-      }
+      noInfo: true
     },
 
     plugins: [
@@ -76,37 +56,32 @@ module.exports = function(config) {
     // preprocess matching files before serving them to the browser
     // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor
     preprocessors: {
-      'tests/**/*.js': ['webpack', 'sourcemap']
+      'tests/tests.webpack.js': ['webpack', 'sourcemap']
     },
 
     // test results reporter to use
     // possible values: 'dots', 'progress'
     // available reporters: https://npmjs.org/browse/keyword/karma-reporter
-    reporters: ['progress'],
-
+    reporters: ['dots'],
 
     // web server port
     port: 9876,
 
-
     // enable / disable colors in the output (reporters and logs)
     colors: true,
 
-
     // level of logging
     // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
     logLevel: config.LOG_INFO,
 
-
     // enable / disable watching file and executing tests whenever any file changes
     autoWatch: true,
 
-
     // start these browsers
     // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher
+    // browsers: ['PhantomJS'],
     browsers: ['PhantomJS'],
 
-
     // Continuous Integration mode
     // if true, Karma captures browsers, runs the tests and exits
     singleRun: false
diff --git a/tests/tests.webpack.js b/tests/tests.webpack.js
new file mode 100644
index 0000000000..8eb7fc8fb7
--- /dev/null
+++ b/tests/tests.webpack.js
@@ -0,0 +1,3 @@
+var context = require.context('./', true, /\.spec\.js$/);
+context.keys().forEach(context);
+module.exports = context;
diff --git a/webpack.config.js b/webpack.config.js
index 21c46c148c..28779f2b08 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -31,8 +31,8 @@ var config = {
   module: {
     loaders: [
       {
-        test: /\.jsx$/,
-        loader: "babel",
+        test: /\.jsx?$/,
+        loader: "babel-loader",
         include: path.join(__dirname, staticPrefix),
         exclude: /(vendor|node_modules)/
       }
