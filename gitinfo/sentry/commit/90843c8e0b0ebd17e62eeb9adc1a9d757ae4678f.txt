commit 90843c8e0b0ebd17e62eeb9adc1a9d757ae4678f
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue May 28 10:57:18 2019 -0700

    test(onboarding): Add inviteMembers tests (#13423)

diff --git a/src/sentry/static/sentry/app/views/onboarding/projectSetup/inviteMembers.jsx b/src/sentry/static/sentry/app/views/onboarding/projectSetup/inviteMembers.jsx
index 99c051375b..de56b0365a 100644
--- a/src/sentry/static/sentry/app/views/onboarding/projectSetup/inviteMembers.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/projectSetup/inviteMembers.jsx
@@ -27,7 +27,6 @@ const recordAnalyticsUserInvited = ({organization, project}) =>
 class InviteMembers extends React.Component {
   static propTypes = {
     api: PropTypes.object.isRequired,
-    orgId: PropTypes.string.isRequired,
     organization: SentryTypes.Organization.isRequired,
     project: SentryTypes.Project.isRequired,
     config: SentryTypes.Config.isRequired,
@@ -44,9 +43,10 @@ class InviteMembers extends React.Component {
   }
 
   async fetchRoleDetails() {
-    const {api, orgId} = this.props;
+    const {api, organization} = this.props;
+
+    const member = await getCurrentMember(api, organization.slug);
 
-    const member = await getCurrentMember(api, orgId);
     this.setState({roleList: member.roles});
   }
 
@@ -65,7 +65,7 @@ class InviteMembers extends React.Component {
 
   render() {
     const {invitedEmails, roleList} = this.state;
-    const {project, formProps, orgId} = this.props;
+    const {project, formProps, organization} = this.props;
 
     return (
       <React.Fragment>
@@ -78,7 +78,8 @@ class InviteMembers extends React.Component {
         )}
         <Panel>
           <Form
-            apiEndpoint={`/organizations/${orgId}/members/`}
+            apiEndpoint={`/organizations/${organization.slug}/members/`}
+            apiMethod="POST"
             submitLabel={t('Invite Member')}
             onSubmitSuccess={this.handleSubmitSuccess}
             initialData={{teams: [project.team.slug]}}
diff --git a/tests/js/spec/views/onboarding/projectSetup/inviteMembers.spec.jsx b/tests/js/spec/views/onboarding/projectSetup/inviteMembers.spec.jsx
new file mode 100644
index 0000000000..ee9a974368
--- /dev/null
+++ b/tests/js/spec/views/onboarding/projectSetup/inviteMembers.spec.jsx
@@ -0,0 +1,66 @@
+import React from 'react';
+
+import {mount} from 'enzyme';
+import ConfigStore from 'app/stores/configStore';
+import InviteMembers from 'app/views/onboarding/projectSetup/inviteMembers';
+
+import {selectByValue} from '../../../../helpers/select';
+
+describe('InviteMembers', function() {
+  const email = 'test@someDomain.com';
+  ConfigStore.loadInitialData({user: {email, options: {}}});
+
+  const org = TestStubs.Organization();
+  const project = TestStubs.ProjectDetails({
+    team: {slug: 'team1'},
+  });
+
+  MockApiClient.addMockResponse({
+    url: `/organizations/${org.slug}/members/me/`,
+    method: 'GET',
+    body: {roles: [{id: 'admin', name: 'Admin', desc: 'User Admin'}]},
+  });
+
+  it('displays an example email using their domain', function() {
+    const wrapper = mount(
+      <InviteMembers project={project} organization={org} />,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('EmailField').props().placeholder).toEqual(
+      expect.stringContaining('team.member@someDomain.com')
+    );
+  });
+
+  it('adds a new team member', async function() {
+    const addMemberApi = MockApiClient.addMockResponse({
+      url: `/organizations/${org.slug}/members/`,
+      method: 'POST',
+      body: {email: 'rick@morty.com'},
+    });
+
+    const wrapper = mount(
+      <InviteMembers project={project} organization={org} />,
+      TestStubs.routerContext()
+    );
+
+    await tick();
+
+    wrapper
+      .find('input[id="email"]')
+      .simulate('change', {target: {value: 'rick@morty.com'}});
+    selectByValue(wrapper, 'admin', {name: 'role'});
+
+    wrapper.find('form').simulate('submit');
+
+    expect(addMemberApi).toHaveBeenCalled();
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('Alert').exists()).toBe(true);
+    expect(wrapper.find('Alert').text()).toEqual(
+      'rick@morty.com has been invited to your organization.'
+    );
+  });
+});
