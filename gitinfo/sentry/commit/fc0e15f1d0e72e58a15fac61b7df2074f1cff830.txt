commit fc0e15f1d0e72e58a15fac61b7df2074f1cff830
Author: Jan Michael Auer <account@jauer.org>
Date:   Mon Nov 26 11:10:22 2018 +0100

    test(acceptance): Add tests for the project events view (#10757)

diff --git a/src/sentry/utils/pytest/selenium.py b/src/sentry/utils/pytest/selenium.py
index 1bf40942ec..b3ad7f5292 100644
--- a/src/sentry/utils/pytest/selenium.py
+++ b/src/sentry/utils/pytest/selenium.py
@@ -177,6 +177,17 @@ class Browser(object):
         """
         # TODO(dcramer): ideally this would take the executing test package
         # into account for duplicate names
+        if os.environ.get('SENTRY_SCREENSHOT') == 'open':
+            import tempfile
+            import click
+            import time
+
+            with tempfile.NamedTemporaryFile('wb', suffix='.png') as tf:
+                tf.write(self.driver.get_screenshot_as_png())
+                tf.flush()
+                click.launch(tf.name)
+                time.sleep(1)
+
         self.percy.snapshot(name=name)
         return self
 
diff --git a/tests/acceptance/test_project_events.py b/tests/acceptance/test_project_events.py
new file mode 100644
index 0000000000..80b53ba27c
--- /dev/null
+++ b/tests/acceptance/test_project_events.py
@@ -0,0 +1,84 @@
+from __future__ import absolute_import
+
+import os
+
+import json
+import uuid
+from datetime import datetime
+from django.utils import timezone
+
+from sentry.constants import DATA_ROOT
+from sentry.event_manager import EventManager
+from sentry.testutils import AcceptanceTestCase
+
+
+class ProjectEventsTest(AcceptanceTestCase):
+    def setUp(self):
+        super(ProjectEventsTest, self).setUp()
+        self.user = self.create_user('foo@example.com')
+        self.org = self.create_organization(owner=self.user, name='Rowdy Tiger')
+        self.team = self.create_team(organization=self.org, name='Mariachi Band')
+        self.project = self.create_project(
+            organization=self.org,
+            teams=[self.team],
+            name='Bengal',
+        )
+        self.environment = self.create_environment(name="staging")
+        self.login_as(self.user)
+        self.path = u'/{}/{}/events/'.format(self.org.slug, self.project.slug)
+        self.clock_seq = 0
+
+    def next_uuid(self):
+        self.clock_seq += 1
+        return uuid.uuid1(node=4711, clock_seq=self.clock_seq).hex
+
+    def create_sample_event(self, platform):
+        json_path = os.path.join(DATA_ROOT, 'samples', '%s.json' % (platform.encode('utf-8'), ))
+        with open(json_path) as fp:
+            data = json.loads(fp.read())
+
+        data.update(
+            platform=platform,
+            event_id=self.next_uuid(),
+        )
+
+        manager = EventManager(data)
+        manager.normalize()
+        event = manager.save(self.project.id, raw=True)
+
+        event.group.update(
+            first_seen=datetime(2015, 8, 13, 3, 8, 25, tzinfo=timezone.utc),
+            last_seen=datetime(2016, 1, 13, 3, 8, 25, tzinfo=timezone.utc),
+        )
+
+        return event
+
+    def test_with_events(self):
+        self.project.update(first_event=timezone.now())
+
+        self.create_sample_event(platform='cocoa')
+        self.create_sample_event(platform='cordova')
+        self.create_sample_event(platform='aspnetcore')
+        self.create_sample_event(platform='unity')
+        self.create_sample_event(platform='elixir')
+        self.create_sample_event(platform='empty-exception')
+        self.create_sample_event(platform='java')
+        self.create_sample_event(platform='javascript')
+        self.create_sample_event(platform='native')
+        self.create_sample_event(platform='php')
+        self.create_sample_event(platform='pii')
+        self.create_sample_event(platform='python')
+        self.create_sample_event(platform='react-native')
+        self.create_sample_event(platform='ruby')
+
+        self.browser.get(self.path)
+        self.browser.wait_until('.event-list')
+        self.browser.wait_until('.table')
+        self.browser.snapshot('project events with events')
+
+    def test_with_no_events(self):
+        self.project.update(first_event=timezone.now())
+        self.browser.get(self.path)
+        self.browser.wait_until('.event-list')
+        self.browser.wait_until('.ref-empty-state')
+        self.browser.snapshot('project events without events')
