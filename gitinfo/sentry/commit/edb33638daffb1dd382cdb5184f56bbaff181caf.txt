commit edb33638daffb1dd382cdb5184f56bbaff181caf
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Thu Feb 23 15:14:30 2017 +0100

    Add outfile parameter, Move utf-8 conf to processor, Add test for outfile

diff --git a/src/sentry/http.py b/src/sentry/http.py
index 037cd0dc16..6fdc31e473 100644
--- a/src/sentry/http.py
+++ b/src/sentry/http.py
@@ -234,11 +234,9 @@ def expose_url(url):
     return url
 
 
-def fetch_file(url, headers=None, domain_lock_enabled=True):
+def fetch_file(url, headers=None, domain_lock_enabled=True, outfile=None):
     """
     Pull down a URL, returning a UrlResult object.
-
-    Attempts to fetch from the cache.
     """
     # lock down domains that are problematic
     if domain_lock_enabled:
@@ -283,7 +281,11 @@ def fetch_file(url, headers=None, domain_lock_enabled=True):
                 for chunk in response.iter_content(16 * 1024):
                     if time.time() - start > settings.SENTRY_FETCH_TIMEOUT:
                         raise Timeout()
-                    contents.append(chunk)
+                    # we write to a file instead of writing a string
+                    if outfile is not None:
+                        outfile.write(chunk)
+                    else:
+                        contents.append(chunk)
                     cl += len(chunk)
                     if cl > settings.SENTRY_FETCH_MAX_SIZE:
                         raise OverflowError()
@@ -332,7 +334,10 @@ def fetch_file(url, headers=None, domain_lock_enabled=True):
             logger.warning('source.disabled', extra=error)
             raise CannotFetch(error)
 
-        body = b''.join(contents)
+        if outfile is not None:
+            body = None
+        else:
+            body = b''.join(contents)
         headers = {k.lower(): v for k, v in response.headers.items()}
         encoding = response.encoding
 
@@ -351,19 +356,4 @@ def fetch_file(url, headers=None, domain_lock_enabled=True):
         }
         raise CannotFetch(error)
 
-    # Make sure the file we're getting back is six.binary_type. The only
-    # reason it'd not be binary would be from old cached blobs, so
-    # for compatibility with current cached files, let's coerce back to
-    # binary and say utf8 encoding.
-    if not isinstance(result[1], six.binary_type):
-        try:
-            result = (result[0], result[1].encode('utf8'), result[2], result[3])
-        except UnicodeEncodeError:
-            error = {
-                'type': EventError.FETCH_INVALID_ENCODING,
-                'value': 'utf8',
-                'url': expose_url(url),
-            }
-            raise CannotFetch(error)
-
     return UrlResult(url, result[0], result[1], result[2], result[3])
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 5bda42daef..e75dd14b46 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -317,6 +317,21 @@ def fetch_file(url, project=None, release=None, allow_scraping=True):
             z_body = zlib.compress(result.body)
             cache.set(cache_key, (url, result.headers, z_body, result.status, result.encoding), 60)
 
+    # Make sure the file we're getting back is six.binary_type. The only
+    # reason it'd not be binary would be from old cached blobs, so
+    # for compatibility with current cached files, let's coerce back to
+    # binary and say utf8 encoding.
+    if not isinstance(result.body, six.binary_type):
+        try:
+            result = http.UrlResult(result.url, result.headers, result.body.encode('utf8'), result.status, result.encoding)
+        except UnicodeEncodeError:
+            error = {
+                'type': EventError.FETCH_INVALID_ENCODING,
+                'value': 'utf8',
+                'url': http.expose_url(url),
+            }
+            raise http.CannotFetch(error)
+
     # For JavaScript files, check if content is something other than JavaScript/JSON (i.e. HTML)
     # NOTE: possible to have JS files that don't actually end w/ ".js", but this should catch 99% of cases
     if url.endswith('.js'):
diff --git a/tests/sentry/test_http.py b/tests/sentry/test_http.py
index ad84f19732..09c5596614 100644
--- a/tests/sentry/test_http.py
+++ b/tests/sentry/test_http.py
@@ -4,6 +4,7 @@ import ipaddress
 import platform
 import responses
 import pytest
+import tempfile
 
 from django.core.exceptions import SuspiciousOperation
 from mock import patch
@@ -53,3 +54,19 @@ class HttpTest(TestCase):
         with pytest.raises(SuspiciousOperation):
             # '0177.0000.0000.0001' is an octal for '127.0.0.1'
             http.safe_urlopen('http://0177.0000.0000.0001')
+
+    @responses.activate
+    def test_fetch_file(self):
+        responses.add(responses.GET, 'http://example.com', body='foo bar',
+                      content_type='application/json')
+
+        temp = tempfile.TemporaryFile()
+        result = http.fetch_file(
+            url='http://example.com',
+            domain_lock_enabled=False,
+            outfile=temp
+        )
+        temp.seek(0)
+        assert result.body is None
+        assert temp.read() == 'foo bar'
+        temp.close()
