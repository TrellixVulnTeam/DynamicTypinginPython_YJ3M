commit dcb4f01013e5231b71150958c8b3d59a92234ad8
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 11 17:02:05 2015 -0700

    Render messages instead of abstract params

diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 950edc63e5..bf3a588875 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 from sentry.api.serializers import Serializer, register
 from sentry.models import Event, EventError
-from sentry.utils import json
 
 
 @register(Event)
@@ -45,21 +44,13 @@ class EventSerializer(Serializer):
         errors = []
         error_set = set()
         for error in obj.data.get('errors', []):
-            error_data = {
-                k: v for k, v in error.iteritems()
-                if k != 'type'
-            }
-            if not error_data:
-                error_data = None
-
-            error_hash = (error['type'], json.dumps(error_data))
-            if error_hash in error_set:
+            message = EventError.get_message(error)
+            if message in error_set:
                 continue
-            error_set.add(error_hash)
+            error_set.add(message)
             error_result = {
                 'type': error['type'],
-                'title': EventError.get_title(error['type']),
-                'data': error_data,
+                'message': message,
             }
             errors.append(error_result)
 
diff --git a/src/sentry/models/eventerror.py b/src/sentry/models/eventerror.py
index 600a667436..eb4a309b67 100644
--- a/src/sentry/models/eventerror.py
+++ b/src/sentry/models/eventerror.py
@@ -14,19 +14,19 @@ class EventError(object):
     JS_INVALID_SOURCEMAP = 'js_invalid_source'
     JS_TOO_MANY_REMOTE_SOURCES = 'js_too_many_sources'
 
-    _titles = {
-        INVALID_DATA: 'Discarded invalid data',
-        INVALID_ATTRIBUTE: 'Discarded invalid attribute',
+    _messages = {
+        INVALID_DATA: 'Discarded invalid value for parameter \'{name}\'',
+        INVALID_ATTRIBUTE: 'Discarded invalid parameter \'{name}\'',
         UNKNOWN_ERROR: 'Unknown error',
-        SECURITY_VIOLATION: 'Security violation',
-        JS_GENERIC_FETCH_ERROR: 'Unable to fetch URL',
-        JS_INVALID_HTTP_CODE: 'HTTP returned unsuccessful response',
-        JS_NO_COLUMN: 'No column information available',
-        JS_MISSING_SOURCE: 'Source code was not found',
-        JS_INVALID_SOURCEMAP: 'Sourcemap was invalid or not parseable',
+        SECURITY_VIOLATION: 'Security violation on {url}: {value}',
+        JS_GENERIC_FETCH_ERROR: 'Unable to fetch resource: {url}',
+        JS_INVALID_HTTP_CODE: 'HTTP returned {value} response on {url}',
+        JS_NO_COLUMN: 'Cannot expand sourcemap due to no column information for {url}',
+        JS_MISSING_SOURCE: 'Source code was not found for {url}',
+        JS_INVALID_SOURCEMAP: 'Sourcemap was invalid or not parseable: {url}',
         JS_TOO_MANY_REMOTE_SOURCES: 'Too many remote source requests',
     }
 
     @classmethod
-    def get_title(cls, type):
-        return cls._titles[type]
+    def get_message(cls, data):
+        return cls._messages[data['type']].format(**data)
diff --git a/src/sentry/static/sentry/app/components/eventEntries.jsx b/src/sentry/static/sentry/app/components/eventEntries.jsx
index cb13acae85..c621ce8584 100644
--- a/src/sentry/static/sentry/app/components/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/eventEntries.jsx
@@ -45,12 +45,7 @@ var EventErrors = React.createClass({
         <ul style={{display: isOpen ? 'block' : 'none'}}>
           {errors.map((error, errorIdx) => {
             return (
-              <li key={errorIdx}>
-                {error.title}<br />
-                {error.data &&
-                  <pre>{JSON.stringify(error.data).substr(0, 512)}</pre>
-                }
-              </li>
+              <li key={errorIdx}>{error.message}</li>
             );
           })}
         </ul>
