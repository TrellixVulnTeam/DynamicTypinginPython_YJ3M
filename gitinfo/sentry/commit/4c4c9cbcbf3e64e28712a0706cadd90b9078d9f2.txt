commit 4c4c9cbcbf3e64e28712a0706cadd90b9078d9f2
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 11 13:51:03 2015 -0700

    Add basic high level errors to events
    
    Refs GH-1746

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 356f442521..4128cd7ac3 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -209,6 +209,7 @@ HTTP_METHODS = ('GET', 'POST', 'PUT', 'OPTIONS', 'HEAD', 'DELETE', 'TRACE', 'CON
 
 CLIENT_RESERVED_ATTRS = (
     'project',
+    'errors',
     'event_id',
     'message',
     'checksum',
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index a7d7c0a916..6e91556261 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -28,6 +28,7 @@ from sentry.constants import (
     CLIENT_RESERVED_ATTRS, DEFAULT_LOG_LEVEL, LOG_LEVELS, MAX_TAG_VALUE_LENGTH,
     MAX_TAG_KEY_LENGTH
 )
+from sentry.event_manager import EventError
 from sentry.interfaces.base import get_interface
 from sentry.models import Project, ProjectKey
 from sentry.tasks.store import preprocess_event
@@ -309,6 +310,8 @@ class ClientApiHelper(object):
         # TODO(dcramer): move project out of the data packet
         data['project'] = project.id
 
+        data.setdefault('errors', [])
+
         if not data.get('message'):
             data['message'] = '<no message value>'
         elif not isinstance(data['message'], six.string_types):
@@ -327,6 +330,11 @@ class ClientApiHelper(object):
             self.log.info(
                 'Discarded value for event_id due to length (%d chars)',
                 len(data['event_id']))
+            data['errors'].append({
+                'type': EventError.INVALID_DATA,
+                'name': 'event_id',
+                'value': data['event_id'],
+            })
             data['event_id'] = uuid.uuid4().hex
 
         if 'timestamp' in data:
@@ -336,18 +344,33 @@ class ClientApiHelper(object):
                 self.log.info(
                     'Discarded invalid value for timestamp: %r',
                     data['timestamp'], exc_info=True)
+                data['errors'].append({
+                    'type': EventError.INVALID_DATA,
+                    'name': 'timestamp',
+                    'value': data['timestamp'],
+                })
                 del data['timestamp']
 
         if data.get('modules') and type(data['modules']) != dict:
             self.log.info(
                 'Discarded invalid type for modules: %s',
                 type(data['modules']))
+            data['errors'].append({
+                'type': EventError.INVALID_DATA,
+                'name': 'modules',
+                'value': data['modules'],
+            })
             del data['modules']
 
         if data.get('extra') is not None and type(data['extra']) != dict:
             self.log.info(
                 'Discarded invalid type for extra: %s',
                 type(data['extra']))
+            data['errors'].append({
+                'type': EventError.INVALID_DATA,
+                'name': 'extra',
+                'value': data['extra'],
+            })
             del data['extra']
 
         if data.get('tags') is not None:
@@ -356,6 +379,11 @@ class ClientApiHelper(object):
             elif not isinstance(data['tags'], (list, tuple)):
                 self.log.info(
                     'Discarded invalid type for tags: %s', type(data['tags']))
+                data['errors'].append({
+                    'type': EventError.INVALID_DATA,
+                    'name': 'tags',
+                    'value': data['tags'],
+                })
                 del data['tags']
 
         if data.get('tags'):
@@ -366,6 +394,11 @@ class ClientApiHelper(object):
                     k, v = pair
                 except ValueError:
                     self.log.info('Discarded invalid tag value: %r', pair)
+                    data['errors'].append({
+                        'type': EventError.INVALID_DATA,
+                        'name': 'tags',
+                        'value': pair,
+                    })
                     continue
 
                 if not isinstance(k, six.string_types):
@@ -373,6 +406,11 @@ class ClientApiHelper(object):
                         k = six.text_type(k)
                     except Exception:
                         self.log.info('Discarded invalid tag key: %r', type(k))
+                        data['errors'].append({
+                            'type': EventError.INVALID_DATA,
+                            'name': 'tags',
+                            'value': pair,
+                        })
                         continue
 
                 if not isinstance(v, six.string_types):
@@ -381,9 +419,20 @@ class ClientApiHelper(object):
                     except Exception:
                         self.log.info('Discarded invalid tag value: %s=%r',
                                       k, type(v))
+                        data['errors'].append({
+                            'type': EventError.INVALID_DATA,
+                            'name': 'tags',
+                            'value': pair,
+                        })
                         continue
+
                 if len(k) > MAX_TAG_KEY_LENGTH or len(v) > MAX_TAG_VALUE_LENGTH:
                     self.log.info('Discarded invalid tag: %s=%s', k, v)
+                    data['errors'].append({
+                        'type': EventError.INVALID_DATA,
+                        'name': 'tags',
+                        'value': pair,
+                    })
                     continue
                 tags.append((k, v))
             data['tags'] = tags
@@ -396,12 +445,21 @@ class ClientApiHelper(object):
 
             if not value:
                 self.log.info('Ignored empty interface value: %s', k)
+                data['errors'].append({
+                    'type': EventError.INVALID_DATA,
+                    'name': k,
+                    'value': value,
+                })
                 continue
 
             try:
                 interface = get_interface(k)
             except ValueError:
                 self.log.info('Ignored unknown attribute: %s', k)
+                data['errors'].append({
+                    'type': EventError.INVALID_ATTRIBUTE,
+                    'name': k,
+                })
                 continue
 
             if type(value) != dict:
@@ -412,6 +470,11 @@ class ClientApiHelper(object):
                 else:
                     self.log.info(
                         'Invalid parameter for value: %s (%r)', k, type(value))
+                    data['errors'].append({
+                        'type': EventError.INVALID_DATA,
+                        'name': k,
+                        'value': value,
+                    })
                     continue
 
             try:
@@ -424,6 +487,11 @@ class ClientApiHelper(object):
                     log = self.log.error
                 log('Discarded invalid value for interface: %s (%r)', k, value,
                     exc_info=True)
+                data['errors'].append({
+                    'type': EventError.INVALID_DATA,
+                    'name': k,
+                    'value': value,
+                })
 
         level = data.get('level') or DEFAULT_LOG_LEVEL
         if isinstance(level, six.string_types) and not level.isdigit():
@@ -433,6 +501,11 @@ class ClientApiHelper(object):
             except KeyError as e:
                 self.log.info(
                     'Discarded invalid logger value: %s', level)
+                data['errors'].append({
+                    'type': EventError.INVALID_DATA,
+                    'name': 'level',
+                    'value': level,
+                })
                 data['level'] = LOG_LEVEL_REVERSE_MAP.get(
                     DEFAULT_LOG_LEVEL, DEFAULT_LOG_LEVEL)
 
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index f83698bf5e..0c815d2bae 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -151,6 +151,11 @@ class ScoreClause(object):
         return math.log(times_seen) * 600 + float(last_seen.strftime('%s'))
 
 
+class EventError(object):
+    INVALID_DATA = 'invalid_data'
+    INVALID_ATTRIBUTE = 'invalid_attribute'
+
+
 class EventManager(object):
     logger = logging.getLogger('sentry.events')
 
@@ -204,6 +209,7 @@ class EventManager(object):
         data.setdefault('fingerprint', None)
         data.setdefault('platform', None)
         data.setdefault('extra', {})
+        data.setdefault('errors', [])
 
         tags = data.get('tags')
         if not tags:
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index b52cd74886..f8bd3f34ff 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -130,6 +130,10 @@ class ValidateDataTest(BaseAPITest):
             'event_id': 'a' * 33,
         })
         assert data['event_id'] == '031667ea1758441f92c7995a428d2d14'
+        assert len(data['errors']) == 1
+        assert data['errors'][0]['type'] == 'invalid_data'
+        assert data['errors'][0]['name'] == 'event_id'
+        assert data['errors'][0]['value'] == 'a' * 33
 
     def test_invalid_event_id_raises(self):
         self.assertRaises(APIError, self.helper.validate_data, self.project, {
@@ -142,6 +146,9 @@ class ValidateDataTest(BaseAPITest):
             'foo': 'bar',
         })
         assert 'foo' not in data
+        assert len(data['errors']) == 1
+        assert data['errors'][0]['type'] == 'invalid_attribute'
+        assert data['errors'][0]['name'] == 'foo'
 
     def test_invalid_interface_name(self):
         data = self.helper.validate_data(self.project, {
@@ -149,6 +156,9 @@ class ValidateDataTest(BaseAPITest):
             'foo.baz': 'bar',
         })
         assert 'foo.baz' not in data
+        assert len(data['errors']) == 1
+        assert data['errors'][0]['type'] == 'invalid_attribute'
+        assert data['errors'][0]['name'] == 'foo.baz'
 
     def test_invalid_interface_import_path(self):
         data = self.helper.validate_data(self.project, {
@@ -156,13 +166,9 @@ class ValidateDataTest(BaseAPITest):
             'sentry.interfaces.Exception2': 'bar',
         })
         assert 'sentry.interfaces.Exception2' not in data
-
-    def test_invalid_interface_args(self):
-        data = self.helper.validate_data(self.project, {
-            'message': 'foo',
-            'tests.manager.tests.DummyInterface': {'foo': 'bar'}
-        })
-        assert 'tests.manager.tests.DummyInterface' not in data
+        assert len(data['errors']) == 1
+        assert data['errors'][0]['type'] == 'invalid_attribute'
+        assert data['errors'][0]['name'] == 'sentry.interfaces.Exception2'
 
     def test_does_expand_list(self):
         data = self.helper.validate_data(self.project, {
@@ -188,6 +194,10 @@ class ValidateDataTest(BaseAPITest):
             'level': 'foobar',
         })
         assert data['level'] == 40
+        assert len(data['errors']) == 1
+        assert data['errors'][0]['type'] == 'invalid_data'
+        assert data['errors'][0]['name'] == 'level'
+        assert data['errors'][0]['value'] == 'foobar'
 
     def test_tags_as_string(self):
         data = self.helper.validate_data(self.project, {
@@ -202,6 +212,7 @@ class ValidateDataTest(BaseAPITest):
             'tags': {'f' * 33: 'value', 'foo': 'v' * 201, 'bar': 'value'},
         })
         assert data['tags'] == [('bar', 'value')]
+        assert len(data['errors']) == 2
 
     def test_tags_as_invalid_pair(self):
         data = self.helper.validate_data(self.project, {
@@ -209,6 +220,10 @@ class ValidateDataTest(BaseAPITest):
             'tags': [('foo', 'bar'), ('biz', 'baz', 'boz')],
         })
         assert data['tags'] == [('foo', 'bar')]
+        assert len(data['errors']) == 1
+        assert data['errors'][0]['type'] == 'invalid_data'
+        assert data['errors'][0]['name'] == 'tags'
+        assert data['errors'][0]['value'] == ('biz', 'baz', 'boz')
 
     def test_extra_as_string(self):
         data = self.helper.validate_data(self.project, {
