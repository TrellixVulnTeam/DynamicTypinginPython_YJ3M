commit b31510c62f772d514e7d5e0872b048704adf41fb
Author: Chris Fuller <cfuller@sentry.io>
Date:   Mon Apr 6 23:29:41 2020 -0400

    feat(workflow): Alert list empty state messaging (#18033)
    
    * Adding empty state messaging

diff --git a/src/sentry/static/sentry/app/views/alerts/list/index.tsx b/src/sentry/static/sentry/app/views/alerts/list/index.tsx
index fe3929e2b1..7bc7e84585 100644
--- a/src/sentry/static/sentry/app/views/alerts/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/list/index.tsx
@@ -34,6 +34,7 @@ const DEFAULT_QUERY_STATUS = 'open';
 
 type Props = {
   organization: Organization;
+  hasAlertRule?: boolean;
 } & RouteComponentProps<{orgId: string}, {}>;
 
 type State = {
@@ -60,11 +61,63 @@ class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state'
       ],
     ];
   }
+  async onLoadAllEndpointsSuccess() {
+    const {incidentList} = this.state;
+    if (incidentList.length === 0) {
+      // Check if they have rules or not, to know which empty state message to display
+      const {params} = this.props;
+
+      try {
+        const alertRules = await this.api.requestPromise(
+          `/organizations/${params && params.orgId}/alert-rules/`,
+          {
+            method: 'GET',
+          }
+        );
+        this.setState({
+          hasAlertRule: alertRules.length > 0 ? true : false,
+        });
+      } catch (err) {
+        this.setState({
+          hasAlertRule: true, // endpoint failed, using true as the "safe" choice in case they actually do have rules
+        });
+      }
+    }
+  }
+
+  /**
+   * Incidents list is currently at the organization level, but the link needs to
+   * go down to a specific project scope.
+   */
+  handleAddAlertRule = (e: React.MouseEvent) => {
+    const {router, params} = this.props;
+    e.preventDefault();
+    navigateTo(`/settings/${params.orgId}/projects/:projectId/alerts/new/`, router);
+  };
 
   renderEmpty() {
+    const {location} = this.props;
+    const {query} = location;
+    const status = getQueryStatus(query.status);
+
+    const hasAlertRule = this.state.hasAlertRule ? this.state.hasAlertRule : false;
+
     return (
       <EmptyStateWarning>
-        <p>{t("You don't have any Metric Alerts yet")}</p>
+        <p>
+          <React.Fragment>
+            {tct('No [status] metric alerts. ', {
+              status: status === 'open' || status === 'all' ? 'active' : 'resolved',
+            })}
+          </React.Fragment>
+          <React.Fragment>
+            {!hasAlertRule
+              ? tct('Start by [link:creating your first rule].', {
+                  link: <ExternalLink onClick={this.handleAddAlertRule} />,
+                })
+              : ''}
+          </React.Fragment>
+        </p>
       </EmptyStateWarning>
     );
   }
@@ -74,12 +127,16 @@ class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state'
   }
 
   renderBody() {
-    const {loading, incidentList, incidentListPageLinks} = this.state;
+    const {loading, incidentList, incidentListPageLinks, hasAlertRule} = this.state;
     const {orgId} = this.props.params;
-
     const allProjectsFromIncidents = new Set(
       flatten(incidentList?.map(({projects}) => projects))
     );
+    const checkingForAlertRules =
+      incidentList && incidentList.length === 0 && hasAlertRule === undefined
+        ? true
+        : false;
+    const showLoadingIndicator = loading || checkingForAlertRules;
 
     return (
       <React.Fragment>
@@ -99,8 +156,8 @@ class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state'
           </PanelHeader>
 
           <PanelBody>
-            {loading && <LoadingIndicator />}
-            {!loading && (
+            {showLoadingIndicator && <LoadingIndicator />}
+            {!showLoadingIndicator && (
               <React.Fragment>
                 {incidentList.length === 0 && this.renderEmpty()}
                 <Projects orgId={orgId} slugs={Array.from(allProjectsFromIncidents)}>
diff --git a/tests/js/spec/views/alerts/list/index.spec.jsx b/tests/js/spec/views/alerts/list/index.spec.jsx
index 3529e4c354..46dd17813f 100644
--- a/tests/js/spec/views/alerts/list/index.spec.jsx
+++ b/tests/js/spec/views/alerts/list/index.spec.jsx
@@ -132,10 +132,20 @@ describe('IncidentsList', function() {
       url: '/organizations/org-slug/incidents/',
       body: [],
     });
+    const rules_mock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/alert-rules/',
+      body: [],
+    });
 
     wrapper = await createWrapper();
+
+    expect(rules_mock).toHaveBeenCalledTimes(1);
+
+    await tick();
+    wrapper.update();
+
     expect(wrapper.find('PanelItem')).toHaveLength(0);
-    expect(wrapper.text()).toContain("You don't have any Metric Alerts yet");
+    expect(wrapper.text()).toContain('No active metric alerts.');
   });
 
   it('toggles all/open', async function() {
