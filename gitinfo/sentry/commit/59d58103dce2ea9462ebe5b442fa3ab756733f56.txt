commit 59d58103dce2ea9462ebe5b442fa3ab756733f56
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Nov 9 14:07:40 2018 -0800

    feat(discover): Do not use tags[...] syntax for tags (#10504)
    
    Every requested column not found in SENTRY_SNUBA_MAP is now assumed to be a
    tag column in Snuba

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
index a0cc48bd20..ad4f35cdc0 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
@@ -6,29 +6,29 @@ const TYPES = {
 };
 
 export const PROMOTED_TAGS = [
-  {name: 'tags[level]', type: TYPES.STRING},
-  {name: 'tags[logger]', type: TYPES.STRING},
-  {name: 'tags[server_name]', type: TYPES.STRING},
-  {name: 'tags[transaction]', type: TYPES.STRING},
-  {name: 'tags[environment]', type: TYPES.STRING},
-  {name: 'tags[site]', type: TYPES.STRING},
-  {name: 'tags[url]', type: TYPES.STRING},
-  {name: 'tags[app_device]', type: TYPES.STRING},
-  {name: 'tags[device]', type: TYPES.STRING},
-  {name: 'tags[device_family]', type: TYPES.STRING},
-  {name: 'tags[runtime]', type: TYPES.STRING},
-  {name: 'tags[runtime_name]', type: TYPES.STRING},
-  {name: 'tags[browser]', type: TYPES.STRING},
-  {name: 'tags[browser_name]', type: TYPES.STRING},
-  {name: 'tags[os]', type: TYPES.STRING},
-  {name: 'tags[os_name]', type: TYPES.STRING},
-  {name: 'tags[os_rooted]', type: TYPES.BOOLEAN},
-  {name: 'tags[sentry:release]', type: TYPES.STRING},
+  'level',
+  'logger',
+  'server_name',
+  'transaction',
+  'environment',
+  'site',
+  'url',
+  'app_device',
+  'device',
+  'device_family',
+  'runtime',
+  'runtime_name',
+  'browser',
+  'browser_name',
+  'os',
+  'os_name',
+  'os_rooted',
+  'sentry:release',
 ];
 
 // All tags are assumed to be strings, except the following
 export const SPECIAL_TAGS = {
-  'tags[os_rooted]': TYPES.BOOLEAN,
+  os_rooted: TYPES.BOOLEAN,
 };
 
 export const COLUMNS = [
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
index 7cd72338e3..a105125315 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
@@ -70,11 +70,14 @@ export default function createQueryBuilder(initial = {}, organization) {
       .then(res => {
         tags = res.data.map(tag => {
           const type = SPECIAL_TAGS[tags.tags_key] || 'string';
-          return {name: `tags[${tag.tags_key}]`, type};
+          return {name: tag.tags_key, type};
         });
       })
       .catch(err => {
-        tags = PROMOTED_TAGS;
+        tags = PROMOTED_TAGS.map(tag => {
+          const type = SPECIAL_TAGS[tag] || 'string';
+          return {name: tag, type};
+        });
       });
   }
 
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index 1517e000f0..e7c7c0a705 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -29,6 +29,16 @@ MAX_ISSUES = 500
 MAX_HASHES = 5000
 
 SENTRY_SNUBA_MAP = {
+    # general
+    'event_id': 'event_id',
+    'project_id': 'project_id',
+    'platform': 'platform',
+    'message': 'message',
+    'issue': 'issue',
+    'timestamp': 'timestamp',
+    'time': 'time',
+    'type': 'type',
+    'version': 'version',
     # user
     'user.id': 'user_id',
     'user.email': 'email',
@@ -73,13 +83,15 @@ SENTRY_SNUBA_MAP = {
     'stack.colno': 'exception_frames.colno',
     'stack.lineno': 'exception_frames.lineno',
     'stack.stack_level': 'exception_frames.stack_level',
-
+    # tags, contexts
+    'tags.key': 'tags.key',
+    'tags.value': 'tags.value',
+    'tags_key': 'tags_key',
+    'tags_value': 'tags_value',
+    'contexts.key': 'contexts.key',
+    'contexts.value': 'contexts.value',
     # misc
     'release': 'tags[sentry:release]',
-    'message': 'message',
-    'timestamp': 'timestamp',
-    'type': 'type',
-    'platform': 'platform',
 }
 
 
@@ -119,6 +131,16 @@ _snuba_pool = connection_from_url(
 )
 
 
+def get_snuba_column_name(name):
+    """
+    Get corresponding Snuba column name from Sentry snuba map, if not found
+    the column is assumed to be a tag. If name is falsy, leave unchanged.
+    """
+    if not name:
+        return name
+    return SENTRY_SNUBA_MAP.get(name, u'tags[{}]'.format(name))
+
+
 def transform_aliases_and_query(**kwargs):
     """
     Convert aliases in selected_columns, groupby, aggregation, conditions,
@@ -133,6 +155,7 @@ def transform_aliases_and_query(**kwargs):
     }
 
     translated_columns = {}
+    derived_columns = set()
 
     selected_columns = kwargs['selected_columns']
     groupby = kwargs['groupby']
@@ -140,20 +163,18 @@ def transform_aliases_and_query(**kwargs):
     conditions = kwargs['conditions'] or []
 
     for (idx, col) in enumerate(selected_columns):
-        match = SENTRY_SNUBA_MAP.get(col)
-        if match:
-            selected_columns[idx] = match
-            translated_columns[match] = col
+        name = get_snuba_column_name(col)
+        selected_columns[idx] = name
+        translated_columns[name] = col
 
     for (idx, col) in enumerate(groupby):
-        match = SENTRY_SNUBA_MAP.get(col)
-        if match:
-            groupby[idx] = match
-            translated_columns[match] = col
+        name = get_snuba_column_name(col)
+        groupby[idx] = name
+        translated_columns[name] = col
 
     for aggregation in aggregations or []:
-        if len(aggregation) and SENTRY_SNUBA_MAP.get(aggregation[1]):
-            aggregation[1] = SENTRY_SNUBA_MAP[aggregation[1]]
+        derived_columns.add(aggregation[2])
+        aggregation[1] = get_snuba_column_name(aggregation[1])
 
     def handle_condition(cond):
         if isinstance(cond, (list, tuple)) and len(cond):
@@ -161,10 +182,10 @@ def transform_aliases_and_query(**kwargs):
                 cond[0] = handle_condition(cond[0])
             elif len(cond) == 3:
                 # map column name
-                cond[0] = SENTRY_SNUBA_MAP.get(cond[0], cond[0])
-            elif len(cond) == 2:
-                # map function arguments
-                cond[1] = [SENTRY_SNUBA_MAP.get(arg, arg) for arg in cond[1]]
+                cond[0] = get_snuba_column_name(cond[0])
+            elif len(cond) == 2 and cond[0] == "has":
+                # first function argument is the column if function is "has"
+                cond[1][0] = get_snuba_column_name(cond[1][0])
         return cond
 
     kwargs['conditions'] = [handle_condition(condition) for condition in conditions]
@@ -172,7 +193,8 @@ def transform_aliases_and_query(**kwargs):
     order_by_column = kwargs['orderby'].lstrip('-')
     kwargs['orderby'] = u'{}{}'.format(
         '-' if kwargs['orderby'].startswith('-') else '',
-        SENTRY_SNUBA_MAP.get(order_by_column, order_by_column)
+        order_by_column if order_by_column in derived_columns else get_snuba_column_name(
+            order_by_column)
     ) or None
 
     kwargs['arrayjoin'] = arrayjoin_map.get(kwargs['arrayjoin'], kwargs['arrayjoin'])
diff --git a/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx b/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx
index bba05111ab..0e5ebe74c3 100644
--- a/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx
@@ -18,8 +18,8 @@ describe('Aggregation', function() {
           expectedTextValue: 'avg(device.battery_level)',
         },
         {
-          value: ['uniq', 'tags[message]', 'uniq_tags_message'],
-          expectedTextValue: 'uniq(tags[message])',
+          value: ['uniq', 'message', 'uniq_message'],
+          expectedTextValue: 'uniq(message)',
         },
       ];
 
diff --git a/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
index de1a079e54..79143654cc 100644
--- a/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
@@ -20,12 +20,12 @@ const aggregationList = [
     external: ['avg', 'device.battery_level', 'avg_device_battery_level'],
   },
   {
-    internal: 'uniq(tags[server_name])',
-    external: ['uniq', 'tags[server_name]', 'uniq_tags_server_name'],
+    internal: 'uniq(server_name)',
+    external: ['uniq', 'server_name', 'uniq_server_name'],
   },
   {
-    internal: 'uniq(tags[browser.name])',
-    external: ['uniq', 'tags[browser.name]', 'uniq_tags_browser_name'],
+    internal: 'uniq(browser.name)',
+    external: ['uniq', 'browser.name', 'uniq_browser_name'],
   },
 ];
 
diff --git a/tests/js/spec/views/organizationDiscover/index.spec.jsx b/tests/js/spec/views/organizationDiscover/index.spec.jsx
index ab07d3b0b8..40108a42a4 100644
--- a/tests/js/spec/views/organizationDiscover/index.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/index.spec.jsx
@@ -33,12 +33,8 @@ describe('OrganizationDiscoverContainer', function() {
     it('fetches tags', function() {
       const queryBuilder = wrapper.instance().queryBuilder;
       expect(wrapper.state().isLoading).toBe(false);
-      expect(queryBuilder.getColumns().some(column => column.name === 'tags[tag1]')).toBe(
-        true
-      );
-      expect(queryBuilder.getColumns().some(column => column.name === 'tags[tag2]')).toBe(
-        true
-      );
+      expect(queryBuilder.getColumns().some(column => column.name === 'tag1')).toBe(true);
+      expect(queryBuilder.getColumns().some(column => column.name === 'tag2')).toBe(true);
     });
   });
 
diff --git a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
index eff0c53212..f828858907 100644
--- a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
@@ -52,15 +52,15 @@ describe('Query Builder', function() {
       );
 
       expect(queryBuilder.getColumns()).toContainEqual({
-        name: 'tags[tag1]',
+        name: 'tag1',
         type: 'string',
       });
       expect(queryBuilder.getColumns()).toContainEqual({
-        name: 'tags[tag2]',
+        name: 'tag2',
         type: 'string',
       });
       expect(queryBuilder.getColumns()).not.toContainEqual({
-        name: 'tags[environment]',
+        name: 'environment',
         type: 'string',
       });
     });
@@ -79,11 +79,11 @@ describe('Query Builder', function() {
       expect(discoverMock).toHaveBeenCalled();
 
       expect(queryBuilder.getColumns()).toContainEqual({
-        name: 'tags[environment]',
+        name: 'environment',
         type: 'string',
       });
       expect(queryBuilder.getColumns()).not.toContainEqual({
-        name: 'tags[tag1]',
+        name: 'tag1',
         type: 'string',
       });
     });
diff --git a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
index 8a0a4b4753..39e604c602 100644
--- a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
@@ -11,34 +11,34 @@ import {
 describe('Utils', function() {
   it('getChartData()', function() {
     const raw = [
-      {count: 2, uniq_event_id: 1, project_id: 5, 'tags[environment]': null},
-      {count: 2, uniq_event_id: 3, project_id: 5, 'tags[environment]': 'staging'},
-      {count: 2, uniq_event_id: 4, project_id: 5, 'tags[environment]': 'alpha'},
-      {count: 6, uniq_event_id: 10, project_id: 5, 'tags[environment]': 'production'},
+      {count: 2, uniq_event_id: 1, project_id: 5, environment: null},
+      {count: 2, uniq_event_id: 3, project_id: 5, environment: 'staging'},
+      {count: 2, uniq_event_id: 4, project_id: 5, environment: 'alpha'},
+      {count: 6, uniq_event_id: 10, project_id: 5, environment: 'production'},
     ];
 
     const query = {
       aggregations: [['count()', null, 'count'], ['uniq', 'event_id', 'uniq_event_id']],
-      fields: ['project_id', 'tags[environment]'],
+      fields: ['project_id', 'environment'],
     };
 
     const expected = [
       {
         seriesName: 'count',
         data: [
-          {value: 2, name: 'project_id 5 tags[environment] null'},
-          {value: 2, name: 'project_id 5 tags[environment] staging'},
-          {value: 2, name: 'project_id 5 tags[environment] alpha'},
-          {value: 6, name: 'project_id 5 tags[environment] production'},
+          {value: 2, name: 'project_id 5 environment null'},
+          {value: 2, name: 'project_id 5 environment staging'},
+          {value: 2, name: 'project_id 5 environment alpha'},
+          {value: 6, name: 'project_id 5 environment production'},
         ],
       },
       {
         seriesName: 'uniq_event_id',
         data: [
-          {value: 1, name: 'project_id 5 tags[environment] null'},
-          {value: 3, name: 'project_id 5 tags[environment] staging'},
-          {value: 4, name: 'project_id 5 tags[environment] alpha'},
-          {value: 10, name: 'project_id 5 tags[environment] production'},
+          {value: 1, name: 'project_id 5 environment null'},
+          {value: 3, name: 'project_id 5 environment staging'},
+          {value: 4, name: 'project_id 5 environment alpha'},
+          {value: 10, name: 'project_id 5 environment production'},
         ],
       },
     ];
