commit 05ee264ee4a0c1e5bda12e1fc71b79ec7ecf929a
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon May 13 09:54:34 2019 -0700

    feat(incidents): Add components to handle activities for an incident (#13158)
    
    This adds components to render activities for an incident. Adds placeholder actionCreators for the different actions required to fetch, create, delete, and update notes.

diff --git a/src/sentry/static/sentry/app/actionCreators/incident.jsx b/src/sentry/static/sentry/app/actionCreators/incident.jsx
index ae4b840e69..8e838836b3 100644
--- a/src/sentry/static/sentry/app/actionCreators/incident.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/incident.jsx
@@ -36,3 +36,55 @@ export async function createIncident(api, organization, title, groups) {
     throw err;
   }
 }
+
+/**
+ * Fetches a list of activities for an incident
+ */
+export async function fetchIncidentActivities(api, orgId, incidentId) {}
+
+/**
+ * Creates a note for an incident
+ */
+export async function createIncidentNote(api, incidentId, note) {
+  addLoadingMessage(t('Posting comment...'));
+
+  try {
+    // TODO: Implement me
+
+    clearIndicators();
+  } catch (err) {
+    addErrorMessage(t('Unable to post comment'));
+    throw err;
+  }
+}
+
+/**
+ * Deletes a note for an incident
+ */
+export async function deleteIncidentNote(api, incidentId, item) {
+  addLoadingMessage(t('Removing comment...'));
+
+  try {
+    // TODO: Implement me
+
+    clearIndicators();
+  } catch (err) {
+    addErrorMessage(t('Failed to delete comment'));
+    throw err;
+  }
+}
+
+/**
+ * Updates a note for an incident
+ */
+export async function updateIncidentNote(api, incidentId, item, note) {
+  addLoadingMessage(t('Updating comment...'));
+
+  try {
+    // TODO: Implement me
+    clearIndicators();
+  } catch (err) {
+    addErrorMessage(t('Unable to update comment'));
+    throw err;
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/activity/item/avatar.jsx b/src/sentry/static/sentry/app/components/activity/item/avatar.jsx
index c8bcaa8077..9e5eed119a 100644
--- a/src/sentry/static/sentry/app/components/activity/item/avatar.jsx
+++ b/src/sentry/static/sentry/app/components/activity/item/avatar.jsx
@@ -55,6 +55,6 @@ const Placeholder = styled('div')`
   height: ${p => p.size}px;
   width: ${p => p.size}px;
   border-radius: 100%;
-  background-color: #f5f5f5;
+  background-color: ${p => p.theme.placeholderBackground};
   flex-shrink: 0;
 `;
diff --git a/src/sentry/static/sentry/app/utils/theme.jsx b/src/sentry/static/sentry/app/utils/theme.jsx
index be1c667d61..2749381993 100644
--- a/src/sentry/static/sentry/app/utils/theme.jsx
+++ b/src/sentry/static/sentry/app/utils/theme.jsx
@@ -70,6 +70,7 @@ const theme = {
   dropShadowHeavy: '0 1px 4px 1px rgba(47,40,55,0.08), 0 4px 16px 0 rgba(47,40,55,0.12)',
 
   background: '#fff',
+  placeholderBackground: '#f5f5f5',
 
   // Try to keep these ordered plz
   zIndex: {
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupActivity.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupActivity.jsx
index 3a5f7a2303..0e2f8f941c 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupActivity.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupActivity.jsx
@@ -38,7 +38,6 @@ class GroupActivity extends React.Component {
 
   state = {
     createBusy: false,
-    preview: false,
     error: false,
     inputId: uniqueId(),
   };
@@ -59,6 +58,10 @@ class GroupActivity extends React.Component {
     }
   };
 
+  /**
+   * Note: This is nearly the same logic as `app/views/organizationIncidents/details/activity`
+   * This can be abstracted a bit if we create more objects that can have activities
+   */
   handleNoteCreate = async note => {
     const {api, group} = this.props;
 
@@ -73,8 +76,6 @@ class GroupActivity extends React.Component {
 
       this.setState({
         createBusy: false,
-        preview: false,
-        mentions: [],
 
         // This is used as a `key` to Note Input so that after successful post
         // we reset the value of the input
@@ -84,7 +85,6 @@ class GroupActivity extends React.Component {
     } catch (error) {
       this.setState({
         createBusy: false,
-        preview: false,
         error: true,
         errorJSON: error.responseJSON || makeDefaultErrorJson(),
       });
@@ -104,13 +104,11 @@ class GroupActivity extends React.Component {
       await updateNote(api, group, item, note);
       this.setState({
         updateBusy: false,
-        preview: false,
       });
       clearIndicators();
     } catch (error) {
       this.setState({
         updateBusy: false,
-        preview: false,
         error: true,
         errorJSON: error.responseJSON || makeDefaultErrorJson(),
       });
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx
index c90fb167af..5a1b337abc 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx
@@ -1,7 +1,277 @@
+import {groupBy} from 'lodash';
+import PropTypes from 'prop-types';
 import React from 'react';
+import moment from 'moment';
+import styled from 'react-emotion';
+
+import {
+  createIncidentNote,
+  deleteIncidentNote,
+  fetchIncidentActivities,
+  updateIncidentNote,
+} from 'app/actionCreators/incident';
+import {t} from 'app/locale';
+import {uniqueId} from 'app/utils/guid';
+import ActivityItem from 'app/components/activity/item';
+import Avatar from 'app/components/avatar';
+import ConfigStore from 'app/stores/configStore';
+import ErrorBoundary from 'app/components/errorBoundary';
+import LoadingError from 'app/components/loadingError';
+import Note from 'app/components/activity/note';
+import NoteInputWithStorage from 'app/components/activity/note/inputWithStorage';
+import SentryTypes from 'app/sentryTypes';
+import TimeSince from 'app/components/timeSince';
+import space from 'app/styles/space';
+import withApi from 'app/utils/withApi';
+
+import ActivityPlaceholder from './activityPlaceholder';
+import DateDivider from './dateDivider';
+
+function makeDefaultErrorJson() {
+  return {detail: t('Unknown error. Please try again.')};
+}
+
+/**
+ * Activity component on Incident Details view
+ * Allows user to leave a comment on an incidentId as well as
+ * fetch and render existing activity items.
+ */
+class Activity extends React.Component {
+  static propTypes = {
+    api: PropTypes.object.isRequired,
+    incidentId: PropTypes.string.isRequired,
+    loading: PropTypes.bool,
+    error: PropTypes.bool,
+    me: SentryTypes.User,
+    activities: PropTypes.arrayOf(SentryTypes.Activity),
+  };
+
+  state = {
+    createBusy: false,
+    updateBusy: false,
+    requestError: false,
+    errorJSON: null,
+  };
+
+  /**
+   * Note: This is nearly the same logic as `app/views/groupDetails/shared/groupActivity`
+   * This can be abstracted a bit if we create more objects that can have activities
+   */
+  handleCreateNote = async note => {
+    const {api, incidentId} = this.props;
+
+    this.setState({
+      createBusy: true,
+    });
+
+    try {
+      await createIncidentNote(api, incidentId, note);
+
+      this.setState({
+        createBusy: false,
+
+        // This is used as a `key` to Note Input so that after successful post
+        // we reset the value of the input
+        inputId: uniqueId(),
+      });
+    } catch (error) {
+      // TODO: Optimistic update
+      this.setState({
+        createBusy: false,
+        requestError: true,
+        errorJSON: error.responseJSON || makeDefaultErrorJson(),
+      });
+    }
+  };
+
+  handleDeleteNote = async item => {
+    const {api, incidentId} = this.props;
+
+    try {
+      await deleteIncidentNote(api, incidentId, item);
+    } catch (error) {
+      // TODO: Optimistic update
+    }
+  };
+
+  handleUpdateNote = async (note, item) => {
+    const {api, incidentId} = this.props;
+
+    this.setState({
+      updateBusy: true,
+    });
+
+    try {
+      await updateIncidentNote(api, incidentId, item, note);
+      this.setState({
+        updateBusy: false,
+      });
+    } catch (error) {
+      this.setState({
+        updateBusy: false,
+        requestError: true,
+        errorJSON: error.responseJSON || makeDefaultErrorJson(),
+      });
+      // TODO: Optimistic update
+    }
+  };
+
+  render() {
+    const {loading, error, me, incidentId, activities} = this.props;
+    const noteProps = {
+      memberList: [],
+      teams: [],
+      minHeight: 80,
+    };
+
+    const activitiesByDate = groupBy(activities, ({dateCreated}) =>
+      moment(dateCreated).format('ll')
+    );
+    const today = moment().format('ll');
+
+    return (
+      <div>
+        <ActivityItem author={{type: 'user', user: me}}>
+          {() => (
+            <NoteInputWithStorage
+              storageKey="incidentIdinput"
+              itemKey={incidentId}
+              onCreate={this.handleCreateNote}
+              busy={this.state.createBusy}
+              error={this.state.requestError}
+              errorJSON={this.state.errorJSON}
+              placeholder={t(
+                'Leave a comment, paste a tweet, or link any other relevant information about this Incident...'
+              )}
+              sessionUser={me}
+              {...noteProps}
+            />
+          )}
+        </ActivityItem>
+
+        {error && <LoadingError message={t('There was a problem loading activities')} />}
+
+        {loading && (
+          <React.Fragment>
+            <ActivityPlaceholder />
+            <ActivityPlaceholder />
+            <ActivityPlaceholder />
+          </React.Fragment>
+        )}
+
+        {!loading &&
+          !error &&
+          Object.entries(activitiesByDate).map(([date, activitiesForDate]) => {
+            const title =
+              date === today ? (
+                'Today'
+              ) : (
+                <React.Fragment>
+                  {date} <StyledTimeSince date={date} />
+                </React.Fragment>
+              );
+            return (
+              <React.Fragment key={date}>
+                <DateDivider>{title}</DateDivider>
+                {activitiesForDate &&
+                  activitiesForDate.map(activity => {
+                    const authorName = activity.user ? activity.user.name : 'Sentry';
+
+                    if (activity.type === 'note') {
+                      return (
+                        <ErrorBoundary mini key={`note-${activity.id}`}>
+                          <Note
+                            showTime
+                            item={activity}
+                            id={`note-${activity.id}`}
+                            author={{
+                              name: authorName,
+                              avatar: <Avatar user={activity.user} size={38} />,
+                            }}
+                            onDelete={this.handleDeleteNote}
+                            onUpdate={this.handleUpdateNote}
+                            busy={this.state.updateBusy}
+                            {...noteProps}
+                          />
+                        </ErrorBoundary>
+                      );
+                    } else {
+                      // TODO(billy): This will change depending on the different
+                      // activity types we will have to support
+                      return (
+                        <ErrorBoundary mini key={`note-${activity.id}`}>
+                          <ActivityItem
+                            showTime
+                            item={activity}
+                            author={{
+                              type: activity.user ? 'user' : 'system',
+                              user: activity.user,
+                            }}
+                            date={activity.dateCreated}
+                          />
+                        </ErrorBoundary>
+                      );
+                    }
+                  })}
+              </React.Fragment>
+            );
+          })}
+      </div>
+    );
+  }
+}
+
+class ActivityContainer extends React.Component {
+  static propTypes = {
+    api: PropTypes.object.isRequired,
+  };
+
+  state = {
+    loading: true,
+    error: false,
+  };
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  async fetchData() {
+    const {api, params} = this.props;
+    const {incidentId, orgId} = params;
+
+    try {
+      const activities = await fetchIncidentActivities(api, orgId, incidentId);
+      this.setState({activities, loading: false});
+    } catch (err) {
+      this.setState({loading: false, error: err});
+    }
+  }
 
-export default class Activity extends React.Component {
   render() {
-    return 'TODO - Activity Stream';
+    const {loading, error, activities} = this.state;
+    const {api, params, ...props} = this.props;
+    const {incidentId, orgId} = params;
+    const me = ConfigStore.get('user');
+
+    return (
+      <Activity
+        incidentId={incidentId}
+        orgId={orgId}
+        loading={loading}
+        error={error}
+        me={me}
+        activities={activities}
+        api={api}
+        {...props}
+      />
+    );
   }
 }
+
+export default withApi(ActivityContainer);
+
+const StyledTimeSince = styled(TimeSince)`
+  color: ${p => p.theme.gray2};
+  font-size: ${p => p.theme.fontSizeSmall};
+  margin-left: ${space(0.5)};
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/activityPlaceholder.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/activityPlaceholder.jsx
new file mode 100644
index 0000000000..5ab9507ecf
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/activityPlaceholder.jsx
@@ -0,0 +1,26 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import ActivityItem from 'app/components/activity/item';
+import space from 'app/styles/space';
+import theme from 'app/utils/theme';
+
+const ActivityPlaceholder = () => {
+  return (
+    <ActivityItem
+      author={null}
+      bubbleProps={{
+        background: theme.placeholderBackground,
+        borderColor: theme.placeholderBackground,
+      }}
+    >
+      {() => <Placeholder />}
+    </ActivityItem>
+  );
+};
+
+const Placeholder = styled('div')`
+  padding: ${space(4)};
+`;
+
+export default ActivityPlaceholder;
diff --git a/tests/js/spec/views/organizationIncidents/details/activity.spec.jsx b/tests/js/spec/views/organizationIncidents/details/activity.spec.jsx
new file mode 100644
index 0000000000..b3acdca1fa
--- /dev/null
+++ b/tests/js/spec/views/organizationIncidents/details/activity.spec.jsx
@@ -0,0 +1,33 @@
+// import React from 'react';
+// import {mount} from 'enzyme';
+
+// import {initializeOrg} from 'app-test/helpers/initializeOrg';
+// import IncidentActivity from 'app/views/organizationIncidents/details/activity';
+
+describe('IncidentDetails', function() {
+  // const incident = TestStubs.Incident();
+  // const {organization, routerContext} = initializeOrg();
+
+  beforeAll(function() {});
+
+  afterAll(function() {
+    MockApiClient.clearMockResponses();
+  });
+
+  // const createWrapper = props =>
+  // mount(
+  // <IncidentActivity
+  // params={{incidentId: incident.id, orgId: organization.slug}}
+  // {...props}
+  // />,
+  // routerContext
+  // );
+
+  it.todo('fetches and renders activities');
+  it.todo('creates a new note');
+  it.todo('fails to create a new note');
+  it.todo('updates an existing note');
+  it.todo('fails to update an existing note');
+  it.todo('deletes a note');
+  it.todo('fails to delete a note');
+});
diff --git a/tests/js/spec/views/organizationIncidents/details/index.spec.jsx b/tests/js/spec/views/organizationIncidents/details/index.spec.jsx
index 443a0eb356..b5c4ca6577 100644
--- a/tests/js/spec/views/organizationIncidents/details/index.spec.jsx
+++ b/tests/js/spec/views/organizationIncidents/details/index.spec.jsx
@@ -5,6 +5,8 @@ import IncidentDetails from 'app/views/organizationIncidents/details';
 
 describe('IncidentDetails', function() {
   const mockIncident = TestStubs.Incident();
+  const routerContext = TestStubs.routerContext();
+
   beforeAll(function() {
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/incidents/123/',
@@ -23,7 +25,7 @@ describe('IncidentDetails', function() {
   it('loads incident', async function() {
     const wrapper = mount(
       <IncidentDetails params={{orgId: 'org-slug', incidentId: mockIncident.id}} />,
-      TestStubs.routerContext()
+      routerContext
     );
     expect(wrapper.find('LoadingIndicator')).toHaveLength(1);
     await tick();
@@ -34,7 +36,7 @@ describe('IncidentDetails', function() {
   it('handles invalid incident', async function() {
     const wrapper = mount(
       <IncidentDetails params={{orgId: 'org-slug', incidentId: '456'}} />,
-      TestStubs.routerContext()
+      routerContext
     );
     await tick();
     wrapper.update();
diff --git a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
index b0a56478c3..3acb14cd18 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
@@ -408,6 +408,7 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
                                       "pink": "#F868BC",
                                       "pinkDark": "#DF4FA3",
                                       "pinkLight": "#FF82D6",
+                                      "placeholderBackground": "#f5f5f5",
                                       "purple": "#6C5FC7",
                                       "purple2": "#6f617c",
                                       "purpleDark": "#5346AE",
@@ -680,6 +681,7 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
                                               "pink": "#F868BC",
                                               "pinkDark": "#DF4FA3",
                                               "pinkLight": "#FF82D6",
+                                              "placeholderBackground": "#f5f5f5",
                                               "purple": "#6C5FC7",
                                               "purple2": "#6f617c",
                                               "purpleDark": "#5346AE",
