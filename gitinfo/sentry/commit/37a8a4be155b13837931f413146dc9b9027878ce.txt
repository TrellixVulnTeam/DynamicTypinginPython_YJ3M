commit 37a8a4be155b13837931f413146dc9b9027878ce
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Oct 12 20:53:00 2015 -0700

    Various improvements and fixes to tag displays

diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 32a650c9d4..ddeb8eed83 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -192,9 +192,9 @@ class GroupDetailsEndpoint(GroupEndpoint):
         if last_release:
             last_release = self._get_release_info(request, group, last_release)
 
-        tag_counts = dict(GroupTagKey.objects.filter(
+        tags = list(GroupTagKey.objects.filter(
             group=group,
-        ).values_list('key', 'values_seen')[:100])
+        )[:100])
 
         data.update({
             'firstRelease': first_release,
@@ -203,7 +203,7 @@ class GroupDetailsEndpoint(GroupEndpoint):
             'seenBy': seen_by,
             'pluginActions': action_list,
             'userReportCount': UserReport.objects.filter(group=group).count(),
-            'tags': tag_counts,
+            'tags': sorted(serialize(tags, request.user), key=lambda x: x['name']),
             'stats': {
                 '24h': hourly_stats,
                 '30d': daily_stats,
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 8f11f1221c..385c6bea79 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -58,6 +58,13 @@ class EventSerializer(Serializer):
             }
             errors.append(error_result)
 
+        tags = sorted([
+            {
+                'key': k.split('sentry:', 1)[-1],
+                'value': v
+            } for k, v in obj.get_tags()
+        ], key=lambda x: x['key'])
+
         # TODO(dcramer): move release serialization here
         d = {
             'id': str(obj.id),
@@ -69,7 +76,7 @@ class EventSerializer(Serializer):
             'user': attrs['user'],
             'context': obj.data.get('extra', {}),
             'packages': obj.data.get('modules', {}),
-            'tags': dict(obj.get_tags()),
+            'tags': tags,
             'platform': obj.platform,
             'dateCreated': obj.datetime,
             'timeSpent': obj.time_spent,
diff --git a/src/sentry/api/serializers/models/grouptagkey.py b/src/sentry/api/serializers/models/grouptagkey.py
new file mode 100644
index 0000000000..4e26c69085
--- /dev/null
+++ b/src/sentry/api/serializers/models/grouptagkey.py
@@ -0,0 +1,39 @@
+from __future__ import absolute_import
+
+from sentry.api.serializers import Serializer, register
+from sentry.models import GroupTagKey, TagKey
+
+
+@register(GroupTagKey)
+class GroupTagKeySerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        tag_labels = {
+            t.key: t.get_label()
+            for t in TagKey.objects.filter(
+                project=item_list[0].project,
+                key__in=[i.key for i in item_list]
+            )
+        }
+
+        result = {}
+        for item in item_list:
+            try:
+                label = tag_labels[item.key]
+            except KeyError:
+                label = item.value
+            result[item] = {
+                'name': label,
+            }
+        return result
+
+    def serialize(self, obj, attrs, user):
+        if obj.key.startswith('sentry:'):
+            key = obj.key.split('sentry:', 1)[-1]
+        else:
+            key = obj.key
+
+        return {
+            'name': attrs['name'],
+            'key': key,
+            'uniqueValues': obj.values_seen,
+        }
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index c6066db60e..8e18c0130b 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -11,11 +11,6 @@ var GroupSidebar = React.createClass({
     var orgId = this.getOrganization().slug;
     var projectId = this.getProject().slug;
     var group = this.getGroup();
-    var tagList = [];
-    for (var key in group.tags) {
-      tagList.push([group.tags[key].name, key]);
-    }
-    tagList.sort();
 
     return (
       <div className="group-stats">
@@ -44,13 +39,13 @@ var GroupSidebar = React.createClass({
             release={group.lastRelease} />
 
         <h6><span>Tags</span></h6>
-        {tagList.map((data) => {
+        {group.tags.map((data) => {
           return (
             <TagDistributionMeter
-              key={data[0]}
+              key={data.key}
               group={group}
-              name={data[0]}
-              tag={data[1]} />
+              name={data.name}
+              tag={data.key} />
           );
         })}
       </div>
diff --git a/src/sentry/static/sentry/app/views/groupEvents.jsx b/src/sentry/static/sentry/app/views/groupEvents.jsx
index 37328b23a6..8981f80883 100644
--- a/src/sentry/static/sentry/app/views/groupEvents.jsx
+++ b/src/sentry/static/sentry/app/views/groupEvents.jsx
@@ -81,11 +81,9 @@ var GroupEvents = React.createClass({
     }
 
     var group = this.getGroup();
-    var tagList = [];
-    for (var key in group.tags) {
-      tagList.push([group.tags[key].name, key]);
-    }
-    tagList.sort();
+    var tagList = group.tags.filter((tag) => {
+      return tag.key !== 'user';
+    });
 
     var hasUser = false;
     for (var i = 0; i < this.state.eventList.length; i++) {
@@ -102,6 +100,10 @@ var GroupEvents = React.createClass({
         groupId: this.getGroup().id,
         eventId: event.id
       };
+      var tagMap = {};
+      event.tags.forEach((tag) => {
+        tagMap[tag.key] = tag.value;
+      });
 
       return (
         <tr key={eventIdx}>
@@ -114,10 +116,10 @@ var GroupEvents = React.createClass({
               <small>{event.eventID}</small>
             </h5>
           </td>
-          {tagList.map((tag, tagIdx) => {
+          {tagList.map((tag) => {
             return (
-              <td key={tagIdx}>
-                {event.tags[tag[1]]}
+              <td key={tag.key}>
+                {tagMap[tag.key]}
               </td>
             );
           })}
@@ -143,10 +145,10 @@ var GroupEvents = React.createClass({
           <table className="table">
             <thead>
               <th>ID</th>
-              {tagList.map((tag, tagIdx) => {
+              {tagList.map((tag) => {
                 return (
-                  <th key={tagIdx}>
-                    {tag[0]}
+                  <th key={tag.key}>
+                    {tag.name}
                   </th>
                 );
               })}
