commit be2a0257f8b1f4bf27123d5698c06c76913eb297
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Feb 19 15:23:40 2016 -0800

    tests for reporting upstream

diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index e445ac21a0..700bfb9ecf 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -16,6 +16,7 @@ __all__ = (
 import base64
 import os.path
 import urllib
+from contextlib import contextmanager
 
 from click.testing import CliRunner
 from django.conf import settings
@@ -213,6 +214,19 @@ class BaseTestCase(Fixtures, Exam):
         """
         return override_options(options)
 
+    @contextmanager
+    def dsn(self, dsn):
+        """
+        A context manager that temporarily sets the internal client's DSN
+        """
+        from raven.contrib.django.models import client
+
+        try:
+            client.set_dsn(dsn)
+            yield
+        finally:
+            client.set_dsn(None)
+
     _postWithSignature = _postWithHeader
     _postWithNewSignature = _postWithHeader
 
diff --git a/src/sentry/utils/raven.py b/src/sentry/utils/raven.py
index e7f4213656..24f0e145f6 100644
--- a/src/sentry/utils/raven.py
+++ b/src/sentry/utils/raven.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import, print_function
 
+import copy
 import inspect
 import logging
 import raven
@@ -45,15 +46,9 @@ class SentryInternalClient(DjangoClient):
         if self.remote.is_active():
             from sentry import options
             # Append some extra tags that are useful for remote reporting
-            extra_tags = {
-                'install-id': options.get('sentry:install-id'),
-            }
-            kwargs['tags'].update(extra_tags)
-            super(SentryInternalClient, self).send(**kwargs)
-            # Now pop off all of the extra_tags keys since we don't need to
-            # record them locally.
-            for k in extra_tags.iterkeys():
-                del kwargs['tags'][k]
+            super_kwargs = copy.deepcopy(kwargs)
+            super_kwargs['tags']['install-id'] = options.get('sentry:install-id')
+            super(SentryInternalClient, self).send(**super_kwargs)
 
         if not can_record_current_event():
             metrics.incr('internal.uncaptured.events')
diff --git a/tests/sentry/utils/test_raven.py b/tests/sentry/utils/test_raven.py
index fea1f85f18..5ac99355ca 100644
--- a/tests/sentry/utils/test_raven.py
+++ b/tests/sentry/utils/test_raven.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import, print_function
 
 from mock import Mock, patch
 from raven.contrib.django.models import client
+from raven.base import Client
 
 from sentry.models import Event
 from sentry.testutils import TestCase
@@ -10,7 +11,8 @@ from sentry.utils.raven import SentryInternalClient
 
 class SentryInternalClientTest(TestCase):
     @patch.object(SentryInternalClient, 'is_enabled', Mock(return_value=True))
-    def test_simple(self):
+    @patch.object(Client, 'send')
+    def test_simple(self, send):
         assert client.__class__ is SentryInternalClient
 
         with self.tasks():
@@ -18,3 +20,21 @@ class SentryInternalClientTest(TestCase):
 
         event = Event.objects.get()
         assert event.message == 'internal client test'
+        assert send.call_count == 0
+
+    @patch.object(SentryInternalClient, 'is_enabled', Mock(return_value=True))
+    @patch.object(Client, 'send')
+    def test_upstream(self, send):
+        with self.dsn('http://foo:bar@example.com/1'):
+            with self.options({'sentry:install-id': 'abc123'}):
+                with self.tasks():
+                    client.captureMessage('internal client test')
+
+                event = Event.objects.get()
+                assert event.message == 'internal client test'
+
+                # Make sure that the event also got sent upstream
+                assert send.call_count == 1
+                _, kwargs = send.call_args
+                # and got tagged properly
+                assert kwargs['tags']['install-id'] == 'abc123'
