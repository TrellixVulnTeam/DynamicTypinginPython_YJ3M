commit 2a9db3eb61967bbefc9d3397ece9f74e150fab34
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Oct 3 10:42:48 2019 -0700

    ref(ui): Move and rename `getConditionString` for Incident Trigger (#14873)
    
    This renames `getConditionString()` to `getTriggerConditionDisplayName()` and moves it into a module so that it can be re-used in the Incident Rules List.

diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/list.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/list.tsx
index 1f5d54cf54..e2f138f32a 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/list.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/list.tsx
@@ -8,7 +8,8 @@ import Confirm from 'app/components/confirm';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import space from 'app/styles/space';
 
-import {Trigger, AlertRuleThresholdType} from '../types';
+import {Trigger} from '../types';
+import getTriggerConditionDisplayName from '../utils/getTriggerConditionDisplayName';
 
 type Props = {
   triggers: Trigger[];
@@ -16,23 +17,6 @@ type Props = {
   onEdit: (trigger: Trigger) => void;
 };
 
-function getConditionStrings(trigger: Trigger): [string, string | null] {
-  if (trigger.thresholdType === AlertRuleThresholdType.ABOVE) {
-    return [
-      `> ${trigger.alertThreshold}`,
-      typeof trigger.resolveThreshold !== 'undefined' && trigger.resolveThreshold !== null
-        ? `Auto-resolves when metric falls below ${trigger.resolveThreshold}`
-        : null,
-    ];
-  } else {
-    return [
-      `< ${trigger.alertThreshold}`,
-      typeof trigger.resolveThreshold !== 'undefined' && trigger.resolveThreshold !== null
-        ? `Auto-resolves when metric is above ${trigger.resolveThreshold}`
-        : null,
-    ];
-  }
-}
 export default class TriggersList extends React.Component<Props> {
   handleEdit = (trigger: Trigger) => {
     this.props.onEdit(trigger);
@@ -57,7 +41,9 @@ export default class TriggersList extends React.Component<Props> {
         <PanelBody>
           {isEmpty && <EmptyMessage>{t('No triggers added')}</EmptyMessage>}
           {triggers.map(trigger => {
-            const [mainCondition, secondaryCondition] = getConditionStrings(trigger);
+            const [mainCondition, secondaryCondition] = getTriggerConditionDisplayName(
+              trigger
+            );
 
             return (
               <Grid key={trigger.id}>
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/utils/getTriggerConditionDisplayName.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/utils/getTriggerConditionDisplayName.tsx
new file mode 100644
index 0000000000..369722037e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/utils/getTriggerConditionDisplayName.tsx
@@ -0,0 +1,23 @@
+import {t} from 'app/locale';
+
+import {Trigger, AlertRuleThresholdType} from '../types';
+
+export default function getTriggerConditionDisplayName(
+  trigger: Trigger
+): [string, string | null] {
+  if (trigger.thresholdType === AlertRuleThresholdType.ABOVE) {
+    return [
+      `> ${trigger.alertThreshold}`,
+      typeof trigger.resolveThreshold !== 'undefined' && trigger.resolveThreshold !== null
+        ? t('Auto-resolves when metric falls below %s', trigger.resolveThreshold)
+        : null,
+    ];
+  } else {
+    return [
+      `< ${trigger.alertThreshold}`,
+      typeof trigger.resolveThreshold !== 'undefined' && trigger.resolveThreshold !== null
+        ? t('Auto-resolves when metric is above %s', trigger.resolveThreshold)
+        : null,
+    ];
+  }
+}
