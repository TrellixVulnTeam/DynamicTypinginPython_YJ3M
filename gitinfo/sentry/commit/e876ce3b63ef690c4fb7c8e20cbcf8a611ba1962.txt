commit e876ce3b63ef690c4fb7c8e20cbcf8a611ba1962
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 1 22:04:26 2016 -0700

    Improve performance on GroupRelease updates

diff --git a/src/sentry/models/grouprelease.py b/src/sentry/models/grouprelease.py
index 8d5fd96a4f..8d7b17aa2d 100644
--- a/src/sentry/models/grouprelease.py
+++ b/src/sentry/models/grouprelease.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
-from django.db import models
+from datetime import timedelta
+from django.db import IntegrityError, models, transaction
 from django.utils import timezone
 
 from sentry.utils.cache import cache
@@ -40,21 +41,36 @@ class GroupRelease(Model):
 
         instance = cache.get(cache_key)
         if instance is None:
-            instance, created = cls.objects.get_or_create(
-                release_id=release.id,
-                group_id=group.id,
-                environment=environment.name,
-                defaults={
-                    'project_id': group.project_id,
-                    'first_seen': datetime,
-                    'last_seen': datetime,
-                },
-            )
+            try:
+                with transaction.atomic():
+                    instance, created = cls.objects.create(
+                        release_id=release.id,
+                        group_id=group.id,
+                        environment=environment.name,
+                        project_id=group.project_id,
+                        first_seen=datetime,
+                        last_seen=datetime,
+                    ), True
+            except IntegrityError:
+                instance, created = cls.objects.get(
+                    release_id=release.id,
+                    group_id=group.id,
+                    environment=environment.name,
+                ), False
             cache.set(cache_key, instance, 3600)
         else:
             created = False
 
-        # TODO(dcramer): this would be good to buffer
-        if not created:
-            instance.update(last_seen=datetime)
+        # TODO(dcramer): this would be good to buffer, but until then we minimize
+        # updates to once a minute, and allow Postgres to optimistically skip
+        # it even if we can't
+        if not created and instance.last_seen < datetime - timedelta(seconds=60):
+            cls.objects.filter(
+                id=instance.id,
+                last_seen__lt=datetime - timedelta(seconds=60),
+            ).update(
+                last_seen=datetime,
+            )
+            instance.last_seen = datetime
+            cache.set(cache_key, instance, 3600)
         return instance
diff --git a/tests/sentry/models/test_grouprelease.py b/tests/sentry/models/test_grouprelease.py
index 4850c28fc9..f73ef3d18d 100644
--- a/tests/sentry/models/test_grouprelease.py
+++ b/tests/sentry/models/test_grouprelease.py
@@ -40,3 +40,16 @@ class GetOrCreateTest(TestCase):
 
         assert grouprelease.first_seen == datetime
         assert grouprelease.last_seen == datetime_new
+
+        datetime_new2 = datetime_new + timedelta(seconds=1)
+
+        # this should not update immediately as the window is too close
+        grouprelease = GroupRelease.get_or_create(
+            group=group,
+            release=release,
+            environment=env,
+            datetime=datetime_new2,
+        )
+
+        assert grouprelease.first_seen == datetime
+        assert grouprelease.last_seen == datetime_new
