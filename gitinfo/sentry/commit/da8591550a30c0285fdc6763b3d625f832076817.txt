commit da8591550a30c0285fdc6763b3d625f832076817
Author: David Cramer <dcramer@gmail.com>
Date:   Tue May 12 10:37:17 2020 -0700

    feat(permissions): Option to disable event:admin for members
    
    Add an organization-level option to change the default permissions for the member role to include or exclude the 'event:admin' role, and couple Discard & Delete to event:admin.
    
    Moves the Attachment role setting to the Membership section of organization settings.

diff --git a/src/sentry/api/endpoints/event_attachment_details.py b/src/sentry/api/endpoints/event_attachment_details.py
index de6944561e..72fefac4f8 100644
--- a/src/sentry/api/endpoints/event_attachment_details.py
+++ b/src/sentry/api/endpoints/event_attachment_details.py
@@ -7,9 +7,9 @@ from django.http import StreamingHttpResponse
 
 from sentry import eventstore, features, roles
 from sentry.api.bases.project import ProjectEndpoint, ProjectPermission
-from sentry.api.serializers.models.organization import ATTACHMENTS_ROLE_DEFAULT
 from sentry.auth.superuser import is_active_superuser
 from sentry.auth.system import is_system_auth
+from sentry.constants import ATTACHMENTS_ROLE_DEFAULT
 from sentry.models import EventAttachment, OrganizationMember
 
 
diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index 0f1a7129f3..1ded72dcbf 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -77,6 +77,12 @@ ORG_OPTIONS = (
         six.text_type,
         org_serializers.ATTACHMENTS_ROLE_DEFAULT,
     ),
+    (
+        "eventsMemberAdmin",
+        "sentry:events_member_admin",
+        bool,
+        org_serializers.EVENTS_MEMBER_ADMIN_DEFAULT,
+    ),
     (
         "scrubIPAddresses",
         "sentry:require_scrub_ip_address",
@@ -135,6 +141,7 @@ class OrganizationSerializer(serializers.Serializer):
     safeFields = ListField(child=serializers.CharField(), required=False)
     storeCrashReports = serializers.IntegerField(min_value=-1, max_value=20, required=False)
     attachmentsRole = serializers.CharField(required=True)
+    eventsMemberAdmin = serializers.BooleanField(required=False)
     scrubIPAddresses = serializers.BooleanField(required=False)
     scrapeJavaScript = serializers.BooleanField(required=False)
     isEarlyAdopter = serializers.BooleanField(required=False)
diff --git a/src/sentry/api/helpers/group_index.py b/src/sentry/api/helpers/group_index.py
index ea6b06b9f7..a4452bd819 100644
--- a/src/sentry/api/helpers/group_index.py
+++ b/src/sentry/api/helpers/group_index.py
@@ -276,6 +276,12 @@ class GroupValidator(serializers.Serializer):
 
         return value
 
+    def validate_discard(self, value):
+        access = self.context.get("access")
+        if value and (not access or not access.has_scope("event:admin")):
+            raise serializers.ValidationError("You do not have permission to discard events")
+        return value
+
     def validate(self, attrs):
         attrs = super(GroupValidator, self).validate(attrs)
         if len(attrs) > 1 and "discard" in attrs:
@@ -430,7 +436,9 @@ def track_update_groups(function):
             raise
 
         serializer = GroupValidator(
-            data=request.data, partial=True, context={"project": projects[0]}
+            data=request.data,
+            partial=True,
+            context={"project": projects[0], "access": getattr(request, "access", None)},
         )
         results = dict(serializer.validated_data) if serializer.is_valid() else {}
         tags = {key: True for key in results.keys()}
@@ -460,7 +468,11 @@ def update_groups(request, projects, organization_id, search_fn):
     # to support multiple projects, but this is pretty complicated
     # because of the assignee validation. Punting on this for now.
     for project in projects:
-        serializer = GroupValidator(data=request.data, partial=True, context={"project": project})
+        serializer = GroupValidator(
+            data=request.data,
+            partial=True,
+            context={"project": project, "access": getattr(request, "access", None)},
+        )
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
@@ -493,6 +505,7 @@ def update_groups(request, projects, organization_id, search_fn):
 
     discard = result.get("discard")
     if discard:
+
         return handle_discard(request, list(queryset), projects, acting_user)
 
     statusDetails = result.pop("statusDetails", result)
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index ad6359b4bf..fc33e9a37d 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -2,13 +2,26 @@ from __future__ import absolute_import
 
 import six
 
-from django.conf import settings
-
 from sentry import roles
 from sentry.app import quotas
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.api.serializers.models import UserSerializer
-from sentry.constants import LEGACY_RATE_LIMIT_OPTIONS
+from sentry.constants import (
+    LEGACY_RATE_LIMIT_OPTIONS,
+    PROJECT_RATE_LIMIT_DEFAULT,
+    ACCOUNT_RATE_LIMIT_DEFAULT,
+    REQUIRE_SCRUB_DATA_DEFAULT,
+    REQUIRE_SCRUB_DEFAULTS_DEFAULT,
+    SENSITIVE_FIELDS_DEFAULT,
+    SAFE_FIELDS_DEFAULT,
+    ATTACHMENTS_ROLE_DEFAULT,
+    REQUIRE_SCRUB_IP_ADDRESS_DEFAULT,
+    SCRAPE_JAVASCRIPT_DEFAULT,
+    TRUSTED_RELAYS_DEFAULT,
+    JOIN_REQUESTS_DEFAULT,
+    EVENTS_MEMBER_ADMIN_DEFAULT,
+)
+
 from sentry.lang.native.utils import convert_crashreport_count
 from sentry.models import (
     ApiKey,
@@ -24,19 +37,6 @@ from sentry.models import (
     TeamStatus,
 )
 
-# org option default values
-PROJECT_RATE_LIMIT_DEFAULT = 100
-ACCOUNT_RATE_LIMIT_DEFAULT = 0
-REQUIRE_SCRUB_DATA_DEFAULT = False
-REQUIRE_SCRUB_DEFAULTS_DEFAULT = False
-SENSITIVE_FIELDS_DEFAULT = None
-SAFE_FIELDS_DEFAULT = None
-ATTACHMENTS_ROLE_DEFAULT = settings.SENTRY_DEFAULT_ROLE
-REQUIRE_SCRUB_IP_ADDRESS_DEFAULT = False
-SCRAPE_JAVASCRIPT_DEFAULT = True
-TRUSTED_RELAYS_DEFAULT = None
-JOIN_REQUESTS_DEFAULT = True
-
 
 @register(Organization)
 class OrganizationSerializer(Serializer):
@@ -193,6 +193,9 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
                 "attachmentsRole": six.text_type(
                     obj.get_option("sentry:attachments_role", ATTACHMENTS_ROLE_DEFAULT)
                 ),
+                "eventsMemberAdmin": bool(
+                    obj.get_option("sentry:events_member_admin", EVENTS_MEMBER_ADMIN_DEFAULT)
+                ),
                 "scrubIPAddresses": bool(
                     obj.get_option(
                         "sentry:require_scrub_ip_address", REQUIRE_SCRUB_IP_ADDRESS_DEFAULT
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 0aa4adad68..2ff8e33a0a 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -521,3 +521,21 @@ class DataCategory(IntEnum):
 
     def api_name(self):
         return self.name.lower()
+
+
+# org option default values
+PROJECT_RATE_LIMIT_DEFAULT = 100
+ACCOUNT_RATE_LIMIT_DEFAULT = 0
+REQUIRE_SCRUB_DATA_DEFAULT = False
+REQUIRE_SCRUB_DEFAULTS_DEFAULT = False
+SENSITIVE_FIELDS_DEFAULT = None
+SAFE_FIELDS_DEFAULT = None
+ATTACHMENTS_ROLE_DEFAULT = settings.SENTRY_DEFAULT_ROLE
+EVENTS_ADMIN_ROLE_DEFAULT = settings.SENTRY_DEFAULT_ROLE
+REQUIRE_SCRUB_IP_ADDRESS_DEFAULT = False
+SCRAPE_JAVASCRIPT_DEFAULT = True
+TRUSTED_RELAYS_DEFAULT = None
+JOIN_REQUESTS_DEFAULT = True
+
+# `sentry:events_member_admin` - controls whether the 'member' role gets the event:admin scope
+EVENTS_MEMBER_ADMIN_DEFAULT = True
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index 43fee5ec00..e8d67cf610 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -17,6 +17,7 @@ from uuid import uuid4
 from six.moves.urllib.parse import urlencode
 
 from sentry import roles
+from sentry.constants import EVENTS_MEMBER_ADMIN_DEFAULT
 from sentry.db.models import (
     BaseModel,
     BoundedAutoField,
@@ -342,7 +343,14 @@ class OrganizationMember(Model):
         )
 
     def get_scopes(self):
-        return roles.get(self.role).scopes
+        scopes = roles.get(self.role).scopes
+
+        if self.role == "member" and not self.organization.get_option(
+            "sentry:events_member_admin", EVENTS_MEMBER_ADMIN_DEFAULT
+        ):
+            scopes = frozenset(s for s in scopes if s != "event:admin")
+
+        return scopes
 
     @classmethod
     def delete_expired(cls, threshold):
diff --git a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.tsx b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.tsx
index e514c63868..33b365d6fb 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.tsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.tsx
@@ -63,6 +63,25 @@ const formGroups: JsonFormObject[] = [
         label: t('Open Membership'),
         help: t('Allow organization members to freely join or leave any team'),
       },
+      {
+        name: 'eventsMemberAdmin',
+        type: 'boolean',
+        label: t('Grant Members Events Admin'),
+        help: t(
+          'Allow members to delete events (including the delete & discard action) by granting them the `event:admin` scope.'
+        ),
+      },
+      {
+        name: 'attachmentsRole',
+        type: 'array',
+        choices: ({initialData = {}}) =>
+          initialData?.availableRoles?.map((r: MemberRole) => [r.id, r.name]) ?? [],
+        label: t('Attachments Access'),
+        help: t(
+          'Permissions required to download event attachments, such as native crash reports or log files.'
+        ),
+        visible: ({features}) => features.has('event-attachments'),
+      },
     ],
   },
 ];
diff --git a/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx b/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx
index dadc9c15d4..4c1e212a46 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx
@@ -5,7 +5,6 @@ import {
   formatStoreCrashReports,
 } from 'app/utils/crashReports';
 import {JsonFormObject} from 'app/views/settings/components/forms/type';
-import {MemberRole} from 'app/types';
 
 const organizationSecurityAndPrivacy: JsonFormObject[] = [
   {
@@ -144,17 +143,6 @@ const organizationSecurityAndPrivacy: JsonFormObject[] = [
         allowedValues: STORE_CRASH_REPORTS_VALUES,
         formatLabel: formatStoreCrashReports,
       },
-      {
-        name: 'attachmentsRole',
-        type: 'array',
-        choices: ({initialData = {}}) =>
-          initialData?.availableRoles?.map((r: MemberRole) => [r.id, r.name]) ?? [],
-        label: t('Attachments Access'),
-        help: t(
-          'Permissions required to download event attachments, such as native crash reports or log files'
-        ),
-        visible: ({features}) => features.has('event-attachments'),
-      },
       {
         name: 'trustedRelays',
         type: 'string',
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index d4998d6254..369cc757a9 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -98,6 +98,7 @@ export type OrganizationSummary = {
 export type LightWeightOrganization = OrganizationSummary & {
   scrubIPAddresses: boolean;
   attachmentsRole: string;
+  eventsMemberAdmin: boolean;
   sensitiveFields: string[];
   openMembership: boolean;
   quota: {
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index b28ba99046..3386856733 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -198,6 +198,7 @@ class OrganizationUpdateTest(APITestCase):
             "dataScrubber": True,
             "dataScrubberDefaults": True,
             "sensitiveFields": [u"password"],
+            "eventsMemberAdmin": False,
             "safeFields": [u"email"],
             "storeCrashReports": 10,
             "scrubIPAddresses": True,
@@ -234,6 +235,7 @@ class OrganizationUpdateTest(APITestCase):
         assert options.get("sentry:store_crash_reports") == 10
         assert options.get("sentry:scrape_javascript") is False
         assert options.get("sentry:join_requests") is False
+        assert options.get("sentry:events_member_admin") is False
 
         # log created
         log = AuditLogEntry.objects.get(organization=org)
@@ -254,6 +256,7 @@ class OrganizationUpdateTest(APITestCase):
         assert u"to {}".format(data["scrubIPAddresses"]) in log.data["scrubIPAddresses"]
         assert u"to {}".format(data["scrapeJavaScript"]) in log.data["scrapeJavaScript"]
         assert u"to {}".format(data["allowJoinRequests"]) in log.data["allowJoinRequests"]
+        assert u"to {}".format(data["eventsMemberAdmin"]) in log.data["eventsMemberAdmin"]
 
     def test_setting_trusted_relays_forbidden(self):
         org = self.create_organization(owner=self.user)
diff --git a/tests/sentry/models/test_organizationmember.py b/tests/sentry/models/test_organizationmember.py
index 53be0ce17a..b6367d0acf 100644
--- a/tests/sentry/models/test_organizationmember.py
+++ b/tests/sentry/models/test_organizationmember.py
@@ -186,3 +186,19 @@ class OrganizationMemberTest(TestCase):
         member.approve_invite()
         assert member.invite_approved
         member.invite_status == InviteStatus.APPROVED.value
+
+    def test_scopes_with_member_admin_config(self):
+        organization = self.create_organization()
+        member = OrganizationMember.objects.create(
+            organization=organization, role="member", email="test@example.com",
+        )
+
+        assert "event:admin" in member.get_scopes()
+
+        organization.update_option("sentry:events_member_admin", True)
+
+        assert "event:admin" in member.get_scopes()
+
+        organization.update_option("sentry:events_member_admin", False)
+
+        assert "event:admin" not in member.get_scopes()
diff --git a/tests/snuba/api/endpoints/test_project_group_index.py b/tests/snuba/api/endpoints/test_project_group_index.py
index 776ab28d63..1ec507668d 100644
--- a/tests/snuba/api/endpoints/test_project_group_index.py
+++ b/tests/snuba/api/endpoints/test_project_group_index.py
@@ -5,6 +5,7 @@ from datetime import timedelta
 from uuid import uuid4
 
 import six
+from django.conf import settings
 from django.utils import timezone
 from exam import fixture
 from sentry.utils.compat.mock import patch, Mock
@@ -1284,6 +1285,23 @@ class GroupUpdateTest(APITestCase, SnubaTestCase):
         assert tombstone.project == group1.project
         assert tombstone.data == group1.data
 
+    @patch(
+        "sentry.models.OrganizationMember.get_scopes",
+        return_value=frozenset(s for s in settings.SENTRY_SCOPES if s != "event:admin"),
+    )
+    def test_discard_requires_events_admin(self, mock_get_scopes):
+        group1 = self.create_group(checksum="a" * 32, is_public=True)
+        user = self.user
+
+        self.login_as(user=user)
+
+        url = u"{url}?id={group1.id}".format(url=self.path, group1=group1)
+        with self.tasks(), self.feature("projects:discard-groups"):
+            response = self.client.put(url, data={"discard": True})
+
+        assert response.status_code == 400
+        assert Group.objects.filter(id=group1.id).exists()
+
 
 class GroupDeleteTest(APITestCase, SnubaTestCase):
     @fixture
