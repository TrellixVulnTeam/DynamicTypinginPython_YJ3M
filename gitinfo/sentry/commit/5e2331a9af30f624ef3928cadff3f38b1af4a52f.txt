commit 5e2331a9af30f624ef3928cadff3f38b1af4a52f
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Mar 15 13:35:47 2018 -0700

    fix(environments): Support environments provided within quotation marks (#7645)

diff --git a/src/sentry/static/sentry/app/utils/queryString.jsx b/src/sentry/static/sentry/app/utils/queryString.jsx
index f7546de633..8b21e92631 100644
--- a/src/sentry/static/sentry/app/utils/queryString.jsx
+++ b/src/sentry/static/sentry/app/utils/queryString.jsx
@@ -4,10 +4,22 @@ export function formatQueryString(qs) {
 }
 
 // returns environment name from query or null if not specified
-// Any charater can be valid in an environment name
+// Any character can be valid in an environment name but we need to
+// check for matching environments with the quotation marks first
+// to match the way tag searches are being done
 export function getQueryEnvironment(qs) {
-  const match = qs.match(/environment:([^\s]*)/);
-  return match ? match[1] : null;
+  // A match with quotes will lazily match any characters within quotation marks
+  const matchWithQuotes = qs.match(/environment:"(.*?)"/);
+  // A match without quotes will match any non space character
+  const matchWithoutQuotes = qs.match(/environment:([^\s]*)/);
+
+  if (matchWithQuotes) {
+    return matchWithQuotes[1];
+  } else if (matchWithoutQuotes) {
+    return matchWithoutQuotes[1];
+  } else {
+    return null;
+  }
 }
 
 export function getQueryStringWithEnvironment(qs, env) {
diff --git a/tests/js/spec/utils/queryString.spec.js b/tests/js/spec/utils/queryString.spec.js
index 4bebbac1a4..b0abd862f7 100644
--- a/tests/js/spec/utils/queryString.spec.js
+++ b/tests/js/spec/utils/queryString.spec.js
@@ -21,6 +21,16 @@ describe('getQueryEnvironment()', function() {
     const qs = 'is:unresolved is:unassigned environment:something.com';
     expect(utils.getQueryEnvironment(qs)).toBe('something.com');
   });
+
+  it('handles environment provided with quote marks', function() {
+    const qs = 'is:unresolved is:unassigned environment:"production"';
+    expect(utils.getQueryEnvironment(qs)).toBe('production');
+  });
+
+  it('handles environment names with space and quote marks', function() {
+    const qs = 'is:unresolved is:unassigned environment:"my environment"';
+    expect(utils.getQueryEnvironment(qs)).toBe('my environment');
+  });
 });
 
 describe('getQueryStringWithEnvironment', function() {
