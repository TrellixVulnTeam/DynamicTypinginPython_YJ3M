commit dfa2808ecc2952e3c78d5ebd6d1d007ae6aee677
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon Dec 18 11:04:36 2017 -0800

    feat(settings): Verify password (#6738)
    
    * Added verify password field.
    
    * Worked with the tests so that they are now compatible.
    
    * Added a couple of form tests need to finish
    
    * Combined my new tests with Settings tests.
    
    * Added test to check that an error is thrown if you try to change password without an equal verify password.
    
    * pulled data from cleaned data. Removed unneeded comments.

diff --git a/src/sentry/templates/sentry/account/settings.html b/src/sentry/templates/sentry/account/settings.html
index 40226dc804..f2c48eade3 100644
--- a/src/sentry/templates/sentry/account/settings.html
+++ b/src/sentry/templates/sentry/account/settings.html
@@ -57,6 +57,9 @@
               {% with form.new_password as field %}
                 {{ field|as_crispy_field }}
               {% endwith %}
+              {% with form.verify_new_password as field %}
+                {{ field|as_crispy_field }}
+              {% endwith %}
             {% endif %}
           </div>
         </div>
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 4f9f3b7c83..494272da6c 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -316,6 +316,11 @@ class AccountSettingsForm(forms.Form):
         required=False,
         # help_text=password_validation.password_validators_help_text_html(),
     )
+    verify_new_password = forms.CharField(
+        label=_('Verify new password'),
+        widget=forms.PasswordInput(),
+        required=False,
+    )
     password = forms.CharField(
         label=_('Current password'),
         widget=forms.PasswordInput(),
@@ -340,6 +345,7 @@ class AccountSettingsForm(forms.Form):
                     needs_password = False
 
             del self.fields['new_password']
+            del self.fields['verify_new_password']
 
         # don't show username field if its the same as their email address
         if self.user.email == self.user.username:
@@ -393,6 +399,19 @@ class AccountSettingsForm(forms.Form):
             raise forms.ValidationError('You must confirm your current password to make changes.')
         return value
 
+    def clean_verify_new_password(self):
+        new_password = self.cleaned_data.get('new_password')
+
+        if new_password:
+            verify_new_password = self.cleaned_data.get('verify_new_password')
+            if verify_new_password is None:
+                raise forms.ValidationError('You must verify your new password.')
+
+            if new_password != verify_new_password:
+                raise forms.ValidationError('Your new password and verify new password must match.')
+
+            return verify_new_password
+
     def clean_new_password(self):
         new_password = self.cleaned_data.get('new_password')
         if new_password:
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index f2fa2850b2..525d984cef 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -139,6 +139,7 @@ class SettingsTest(TestCase):
         params = self.params()
         params['password'] = 'admin'
         params['new_password'] = 'foobar'
+        params['verify_new_password'] = 'foobar'
 
         resp = self.client.post(self.path, params)
         assert resp.status_code == 302
@@ -151,6 +152,7 @@ class SettingsTest(TestCase):
 
         params = self.params()
         params['new_password'] = 'foobar'
+        params['verify_new_password'] = 'foobar'
 
         resp = self.client.post(self.path, params)
         assert resp.status_code == 200
@@ -168,6 +170,7 @@ class SettingsTest(TestCase):
         params['email'] = user.email
         params['password'] = 'admin'
         params['new_password'] = 'foobar'
+        params['verify_new_password'] = 'foobar'
 
         resp = self.client.post(self.path, params)
         assert resp.status_code == 302
@@ -212,6 +215,62 @@ class SettingsTest(TestCase):
         user = User.objects.get(id=self.user.id)
         assert user.email == 'admin@localhost'
 
+    def test_settings_renders_with_verify_new_password(self):
+        user = self.create_user('foo@example.com')
+        self.login_as(user)
+        path = reverse('sentry-account-settings')
+        resp = self.client.get(path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/account/settings.html')
+        form = resp.context['form']
+        assert form.errors == {}
+        for field in ('name', 'email', 'new_password', 'verify_new_password', 'password'):
+            assert field in form.fields
+
+        self.assertContains(resp, 'New password')
+        self.assertContains(resp, 'Verify new password')
+
+    def test_settings_renders_without_new_password(self):
+        user = self.create_user('foo@example.com')
+        user.update(is_managed=True)
+        self.login_as(user)
+        path = reverse('sentry-account-settings')
+        resp = self.client.get(path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/account/settings.html')
+        form = resp.context['form']
+        assert form.errors == {}
+        for field in ('new_password', 'verify_new_password'):
+            assert field not in form.fields
+
+    def test_cannot_change_password_without_verify_password(self):
+        self.login_as(self.user)
+
+        params = self.params()
+        params['new_password'] = 'foobar'
+
+        resp = self.client.post(self.path, params)
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/account/settings.html')
+        assert resp.context['form'].errors
+        user = User.objects.get(id=self.user.id)
+        assert not user.check_password('foobar')
+
+    def test_cannot_change_password_with_unequal_verify_password(self):
+        self.login_as(self.user)
+
+        params = self.params()
+        params['new_password'] = 'foobar'
+        params['verify_new_password'] = 'foobars'
+
+        resp = self.client.post(self.path, params)
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/account/settings.html')
+        assert resp.context['form'].errors
+        user = User.objects.get(id=self.user.id)
+        assert not user.check_password('foobar')
+        assert not user.check_password('foobars')
+
 
 class ListIdentitiesTest(TestCase):
     @fixture
