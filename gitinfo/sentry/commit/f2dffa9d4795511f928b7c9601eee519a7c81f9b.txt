commit f2dffa9d4795511f928b7c9601eee519a7c81f9b
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Wed Oct 16 10:04:38 2019 +0200

    ref: Remove dead interface code (#14763)
    
    * ref: Remove dead interface code
    
    * fix: Remove test that tests dead code

diff --git a/src/sentry/interfaces/geo.py b/src/sentry/interfaces/geo.py
index 7c577c6fd0..d0f438799c 100644
--- a/src/sentry/interfaces/geo.py
+++ b/src/sentry/interfaces/geo.py
@@ -2,10 +2,7 @@ from __future__ import absolute_import
 
 __all__ = ("Geo",)
 
-import six
-
 from sentry.interfaces.base import Interface
-from sentry.utils.geo import geo_by_addr
 
 
 class Geo(Interface):
@@ -28,24 +25,3 @@ class Geo(Interface):
         }
 
         return cls(**data)
-
-    @classmethod
-    def from_ip_address(cls, ip_address):
-        try:
-            geo = geo_by_addr(ip_address)
-        except Exception:
-            geo = None
-
-        if not geo:
-            return None
-
-        data = {}
-        for k in ("country_code", "city", "region"):
-            d = geo.get(k)
-
-            if isinstance(d, six.binary_type):
-                d = d.decode("ISO-8859-1")
-
-            data[k] = d
-
-        return cls.to_python(data)
diff --git a/tests/sentry/event_manager/interfaces/test_geo.py b/tests/sentry/event_manager/interfaces/test_geo.py
index 4e7e37e5e9..20ac8dbbdc 100644
--- a/tests/sentry/event_manager/interfaces/test_geo.py
+++ b/tests/sentry/event_manager/interfaces/test_geo.py
@@ -2,9 +2,6 @@ from __future__ import absolute_import
 
 import pytest
 
-import mock
-
-from sentry.interfaces.geo import Geo
 from sentry.models import Event
 from sentry.event_manager import EventManager
 
@@ -31,48 +28,3 @@ def test_serialize_behavior(make_geo_snapshot):
 @pytest.mark.parametrize("input", [{}, {"country_code": None}, {"city": None}, {"region": None}])
 def test_null_values(make_geo_snapshot, input):
     make_geo_snapshot(input)
-
-
-@mock.patch("sentry.interfaces.geo.geo_by_addr")
-def test_from_ip_address(geo_by_addr_mock):
-    geo_by_addr_mock.return_value = {
-        "area_code": 415,
-        "city": "San Francisco",
-        "country_code": "US",
-        "country_code3": "USA",
-        "country_name": "United States",
-        "dma_code": 807,
-        "latitude": 37.79570007324219,
-        "longitude": -122.4208984375,
-        "metro_code": 807,
-        "postal_code": "94109",
-        "region": "CA",
-        "region_name": "California",
-        "time_zone": "America/Los_Angeles",
-    }
-
-    assert Geo.from_ip_address("192.168.0.1").to_json() == {
-        "country_code": "US",
-        "city": "San Francisco",
-        "region": "CA",
-    }
-
-
-@mock.patch("sentry.interfaces.geo.geo_by_addr")
-def test_iso_8859_1_country_code(geo_by_addr_mock):
-    # https://github.com/maxmind/geoip-api-python/releases/tag/v1.3.2
-    # Previously GeoIP.country_names was populated from GeoIP_country_name in
-    # the libGeoIP C API. Some versions of the libGeoIP include non-ASCII
-    # ISO-8859-1 characters in these names, causing encoding errors under Python
-
-    geo_by_addr_mock.return_value = {
-        "city": "San Francisco",
-        "country_code": "\xc5lborg",
-        "region": "CA",
-    }
-
-    assert Geo.from_ip_address("192.168.0.1").to_json() == {
-        "city": u"San Francisco",
-        "country_code": u"\xc5lborg",
-        "region": u"CA",
-    }
diff --git a/tests/sentry/event_manager/test_normalization.py b/tests/sentry/event_manager/test_normalization.py
index 0037ec22a4..4549e2b6bb 100644
--- a/tests/sentry/event_manager/test_normalization.py
+++ b/tests/sentry/event_manager/test_normalization.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import
 
 import pytest
-import mock
 import logging
 
 from datetime import datetime
@@ -64,17 +63,6 @@ def test_does_default_ip_address_to_user(user):
     assert data["user"]["ip_address"] == "127.0.0.1"
 
 
-@mock.patch("sentry.interfaces.geo.geo_by_addr")
-def test_skips_geo_with_no_result(geo_by_addr_mock):
-    geo_by_addr_mock.return_value = None
-
-    manager = EventManager(make_event(**{"user": {"ip_address": "127.0.0.1"}}))
-    manager.normalize()
-    data = manager.get_data()
-    assert data["user"]["ip_address"] == "127.0.0.1"
-    assert "geo" not in data["user"]
-
-
 def test_does_default_ip_address_if_present():
     manager = EventManager(
         make_event(
