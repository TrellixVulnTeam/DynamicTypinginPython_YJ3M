commit 19e8641c31baf8fb54f5afefeba30534c5e9cceb
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jul 31 09:25:57 2008 +0000

    Fix for issue #2; Added a setting to catch 404 errors: DBLOG_CATCH_404_ERRORS, defaults to False; Issue #4 patched in: is_resolved column in ErrorBatch

diff --git a/djangodblog/__init__.py b/djangodblog/__init__.py
index 519098fbcc..b6c6fc784c 100644
--- a/djangodblog/__init__.py
+++ b/djangodblog/__init__.py
@@ -1,35 +1,2 @@
-from models import Error, ErrorBatch
-
-import traceback
-import socket
-import warnings
-import md5
-
-class DBLogMiddleware(object):
-    def process_exception(self, request, exception):
-        server_name = socket.gethostname()
-        tb_text     = traceback.format_exc()
-        class_name  = exception.__class__.__name__
-        checksum    = md5.new(tb_text).hexdigest()
-
-        defaults = dict(
-            class_name  = class_name,
-            message     = exception.message,
-            url         = request.build_absolute_uri(),
-            server_name = server_name,
-            traceback   = tb_text,
-        )
-
-        try:
-            Error.objects.create(**defaults)
-            batch, created = ErrorBatch.objects.get_or_create(
-                class_name = class_name,
-                server_name = server_name,
-                checksum = checksum,
-                defaults = defaults
-            )
-            if not created:
-                batch.times_seen += 1
-                batch.save()
-        except Exception, exc:
-            warnings.warn(unicode(exc))
\ No newline at end of file
+from models import *
+from middleware import *
diff --git a/djangodblog/middleware.py b/djangodblog/middleware.py
new file mode 100644
index 0000000000..9e66ec06dc
--- /dev/null
+++ b/djangodblog/middleware.py
@@ -0,0 +1,43 @@
+import traceback
+import socket
+import warnings
+import md5
+
+from django.conf import settings
+from django.http import Http404
+
+__all__ = ('DBLogMiddleware', 'DBLOG_CATCH_404_ERRORS')
+
+DBLOG_CATCH_404_ERRORS = getattr(settings, 'DBLOG_CATCH_404_ERRORS', False)
+
+class DBLogMiddleware(object):
+    def process_exception(self, request, exception):
+        if not DBLOG_CATCH_404_ERRORS and isinstance(exception, Http404):
+            return
+        server_name = socket.gethostname()
+        tb_text     = traceback.format_exc()
+        class_name  = exception.__class__.__name__
+        checksum    = md5.new(tb_text).hexdigest()
+
+        defaults = dict(
+            class_name  = class_name,
+            message     = getattr(exception, 'message', ''),
+            url         = request.build_absolute_uri(),
+            server_name = server_name,
+            traceback   = tb_text,
+        )
+
+        try:
+            Error.objects.create(**defaults)
+            batch, created = ErrorBatch.objects.get_or_create(
+                class_name = class_name,
+                server_name = server_name,
+                checksum = checksum,
+                defaults = defaults
+            )
+            if not created:
+                batch.times_seen += 1
+                batch.resolved = False
+                batch.save()
+        except Exception, exc:
+            warnings.warn(unicode(exc))
\ No newline at end of file
diff --git a/djangodblog/models.py b/djangodblog/models.py
index 9388e4aaef..a9574a709c 100644
--- a/djangodblog/models.py
+++ b/djangodblog/models.py
@@ -3,10 +3,13 @@ from django.utils.translation import ugettext_lazy as _
 
 import datetime
 
+__all__ = ('Error', 'ErrorBatch')
+
 class ErrorBatch(models.Model):
     class_name      = models.CharField(_('Type'), max_length=128)
     message         = models.TextField()
     traceback       = models.TextField()
+    is_resolved     = models.BooleanField(default=False)
     times_seen      = models.PositiveIntegerField(default=1)
     last_seen       = models.DateTimeField(default=datetime.datetime.now)
     first_seen      = models.DateTimeField(default=datetime.datetime.now)
@@ -15,8 +18,8 @@ class ErrorBatch(models.Model):
     checksum        = models.CharField(max_length=32, db_index=True)
 
     class Admin:
-        list_display    = ('class_name', 'message', 'last_seen', 'times_seen', 'url', 'server_name')
-        list_filter     = ('class_name', 'times_seen', 'server_name')
+        list_display    = ('class_name', 'message', 'is_resolved', 'last_seen', 'times_seen', 'url', 'server_name')
+        list_filter     = ('class_name', 'times_seen', 'server_name', 'is_resolved')
         ordering        = ('-last_seen',)
         
     class Meta:
