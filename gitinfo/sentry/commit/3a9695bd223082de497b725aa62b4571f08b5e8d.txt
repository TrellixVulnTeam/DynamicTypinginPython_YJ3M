commit 3a9695bd223082de497b725aa62b4571f08b5e8d
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Jan 30 12:27:38 2018 -0800

    fix(slack): Fix slack API discrepancy (#7092)

diff --git a/src/sentry/integrations/slack/action_endpoint.py b/src/sentry/integrations/slack/action_endpoint.py
index 7a169a12f9..b6649263f7 100644
--- a/src/sentry/integrations/slack/action_endpoint.py
+++ b/src/sentry/integrations/slack/action_endpoint.py
@@ -89,6 +89,7 @@ class SlackActionEndpoint(Endpoint):
         callback_id = json.dumps({
             'issue': group.id,
             'orig_response_url': data['response_url'],
+            'is_message': self.is_message(data),
         })
 
         dialog = {
@@ -112,6 +113,27 @@ class SlackActionEndpoint(Endpoint):
                 'error': resp.get('error'),
             })
 
+    def construct_reply(self, attachment, is_message=False):
+        # XXX(epurkhiser): Slack is inconsistent about it's expected responses
+        # for interactive action requests.
+        #
+        #  * For _unfurled_ action responses, slack expects the entire
+        #    attachment body used to replace the unfurled attachment to be at
+        #    the top level of the json response body.
+        #
+        #  * For _bot posted message_ action responses, slack expects the
+        #    attachment body used to replace the attachment to be within an
+        #    `attachments` array.
+        if is_message:
+            attachment = {'attachments': [attachment]}
+
+        return attachment
+
+    def is_message(self, data):
+        # XXX(epurkhsier): Used in coordination with construct_reply. Bot
+        # posted messages will not have the type at all.
+        return data.get('original_message', {}).get('type') == 'message'
+
     def post(self, request):
         logging_data = {}
 
@@ -209,9 +231,11 @@ class SlackActionEndpoint(Endpoint):
 
             attachment = build_attachment(group, identity=identity, actions=[action])
 
+            body = self.construct_reply(attachment, is_message=callback_data['is_message'])
+
             # use the original response_url to update the link attachment
             session = http.build_session()
-            req = session.post(callback_data['orig_response_url'], json=attachment)
+            req = session.post(callback_data['orig_response_url'], json=body)
             resp = req.json()
             if not resp.get('ok'):
                 logger.error('slack.action.response-error', extra={
@@ -250,4 +274,6 @@ class SlackActionEndpoint(Endpoint):
         group = Group.objects.get(id=group.id)
 
         attachment = build_attachment(group, identity=identity, actions=action_list)
-        return self.respond(attachment)
+        body = self.construct_reply(attachment, is_message=self.is_message(data))
+
+        return self.respond(body)
diff --git a/tests/sentry/integrations/slack/test_action_endpoint.py b/tests/sentry/integrations/slack/test_action_endpoint.py
index 637ad7e3b8..3ce0a09198 100644
--- a/tests/sentry/integrations/slack/test_action_endpoint.py
+++ b/tests/sentry/integrations/slack/test_action_endpoint.py
@@ -57,7 +57,7 @@ class BaseEventTest(APITestCase):
         self.response_url = 'https://hooks.slack.com/actions/T47563693/6204672533/x7ZLaiVMoECAW50Gw1ZYAXEM'
 
     def post_webhook(self, action_data=None, type='event_callback', data=None,
-                     token=None, team_id='TXXXXXXX1', callback_id=None, slack_user=None):
+                     token=None, team_id='TXXXXXXX1', callback_id=None, slack_user=None, original_message=None):
         if token is None:
             token = options.get('slack.verification-token')
 
@@ -67,6 +67,9 @@ class BaseEventTest(APITestCase):
         if callback_id is None:
             callback_id = json.dumps({'issue': self.group1.id})
 
+        if original_message is None:
+            original_message = {}
+
         payload = {
             'token': token,
             'team': {
@@ -81,7 +84,7 @@ class BaseEventTest(APITestCase):
             'callback_id': callback_id,
             'action_ts': '1458170917.164398',
             'message_ts': '1458170866.000004',
-            'original_message': {},  # unused
+            'original_message': original_message,
             'trigger_id': self.trigger_id,
             'response_url': self.response_url,
             'attachment_id': '1',
@@ -225,6 +228,24 @@ class StatusActionTest(BaseEventTest):
 
         assert resp.data['text'].endswith(expect_status), resp.data['text']
 
+    def test_response_differs_on_bot_message(self):
+        status_action = {
+            'name': 'status',
+            'value': 'ignored',
+            'type': 'button'
+        }
+
+        original_message = {
+            'type': 'message',
+        }
+
+        resp = self.post_webhook(action_data=[status_action], original_message=original_message)
+        self.group1 = Group.objects.get(id=self.group1.id)
+
+        assert resp.status_code == 200, resp.content
+        assert 'attachments' in resp.data
+        assert resp.data['attachments'][0]['title'] == self.group1.title
+
     @responses.activate
     def test_resolve_issue(self):
         status_action = {
