commit cf7a13f8a28e41b148b7ac09a7c29b1ac4fb4648
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Feb 8 10:26:43 2019 +0100

    ref: Rename message to search_message (#10740)
    
    This also starts using `title` in snuba events if available.

diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
index 8ccf5bb022..2fa1c026f6 100644
--- a/src/sentry/api/endpoints/group_events.py
+++ b/src/sentry/api/endpoints/group_events.py
@@ -127,7 +127,7 @@ class GroupEventsEndpoint(GroupEndpoint, EnvironmentMixin):
         events = Event.objects.filter(group_id=group.id)
 
         if query:
-            q = Q(message__icontains=query)
+            q = Q(search_message__icontains=query)
 
             if is_event_id(query):
                 q |= Q(event_id__exact=query)
diff --git a/src/sentry/api/endpoints/project_events.py b/src/sentry/api/endpoints/project_events.py
index 81775a793a..edeb1fc796 100644
--- a/src/sentry/api/endpoints/project_events.py
+++ b/src/sentry/api/endpoints/project_events.py
@@ -34,7 +34,7 @@ class ProjectEventsEndpoint(ProjectEndpoint):
         query = request.GET.get('query')
         if query:
             events = events.filter(
-                message__icontains=query,
+                search_message__icontains=query,
             )
 
         # filter out events which are beyond the retention period
diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index e7a0f19365..216f0ee330 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -389,7 +389,8 @@ def get_snuba_query_args(query=None, params=None):
             operator = '=' if _filter.operator == '!=' else '!='
             # make message search case insensitive
             kwargs['conditions'].append(
-                [['positionCaseInsensitive', ['message', "'%s'" % (value,)]], operator, 0]
+                [['positionCaseInsensitive', [
+                    ['coalesce', ['search_message', 'message']], "'%s'" % (value,)]], operator, 0]
             )
 
         else:
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index b657e1907f..82999a0b1a 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -9,6 +9,7 @@ from semaphore import meta_with_chunks
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.models import Event, EventError, EventAttachment, Release, UserReport
 from sentry.utils.safe import get_path
+from sentry.constants import LEGACY_MESSAGE_FALLBACK
 
 
 CRASH_FILE_TYPES = set(['event.minidump'])
@@ -112,7 +113,7 @@ class EventSerializer(Serializer):
         meta = get_path(event.data, '_meta', attr)
         return (value, meta_with_chunks(value, meta))
 
-    def _get_legacy_message_with_meta(self, event):
+    def _get_message_with_meta(self, event):
         meta = event.data.get('_meta')
 
         message = get_path(event.data, 'logentry', 'formatted')
@@ -122,10 +123,6 @@ class EventSerializer(Serializer):
             message = get_path(event.data, 'logentry', 'message')
             msg_meta = get_path(meta, 'logentry', 'message')
 
-        if not message:
-            message = event.message
-            msg_meta = None
-
         return (message, meta_with_chunks(message, msg_meta))
 
     def _get_release_info(self, user, event):
@@ -200,7 +197,7 @@ class EventSerializer(Serializer):
             if self.should_display_error(error)
         ]
 
-        (message, message_meta) = self._get_legacy_message_with_meta(obj)
+        (message, message_meta) = self._get_message_with_meta(obj)
         (tags, tags_meta) = self._get_tags_with_meta(obj)
         (context, context_meta) = self._get_attr_with_meta(obj, 'extra', {})
         (packages, packages_meta) = self._get_attr_with_meta(obj, 'modules', {})
@@ -223,8 +220,11 @@ class EventSerializer(Serializer):
             'size': obj.size,
             'entries': attrs['entries'],
             'dist': obj.dist,
-            # See GH-3248
             'message': message,
+            'searchMessage': obj.search_message,
+            'title': obj.title,
+            'location': obj.location,
+            'culprit': obj.culprit,
             'user': attrs['user'],
             'contexts': attrs['contexts'],
             'crashFile': attrs['crash_file'],
@@ -296,6 +296,10 @@ class SnubaEvent(object):
         'event_id',
         'project_id',
         'message',
+        'search_message',
+        'title',
+        'location',
+        'culprit',
         'user_id',
         'username',
         'ip_address',
@@ -330,10 +334,19 @@ class SnubaEventSerializer(Serializer):
         return []
 
     def serialize(self, obj, attrs, user):
+        title = obj.title
+        if LEGACY_MESSAGE_FALLBACK:
+            title = title or obj.message
+        message = obj.message
+        if LEGACY_MESSAGE_FALLBACK:
+            message = message or obj.search_message
         result = {
             'eventID': six.text_type(obj.event_id),
             'projectID': six.text_type(obj.project_id),
-            'message': obj.message,
+            'message': message,
+            'title': title,
+            'location': obj.location,
+            'culprit': obj.culprit,
             'dateCreated': obj.timestamp,
             'user': {
                 'id': obj.user_id,
diff --git a/src/sentry/api/serializers/models/grouptombstone.py b/src/sentry/api/serializers/models/grouptombstone.py
index 222b0fc210..2212ba9557 100644
--- a/src/sentry/api/serializers/models/grouptombstone.py
+++ b/src/sentry/api/serializers/models/grouptombstone.py
@@ -25,7 +25,7 @@ class GroupTombstoneSerializer(Serializer):
         return {
             'id': six.text_type(obj.id),
             'level': LOG_LEVELS.get(obj.level, 'unknown'),
-            'message': obj.message,
+            'message': obj.search_message,
             'culprit': obj.culprit,
             'type': obj.get_event_type(),
             'metadata': obj.get_event_metadata(),
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 6493c5a704..c8d2653855 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -390,3 +390,7 @@ class SentryAppStatus(object):
 StatsPeriod = namedtuple('StatsPeriod', ('segments', 'interval'))
 
 LEGACY_RATE_LIMIT_OPTIONS = frozenset(('sentry:project-rate-limit', 'sentry:account-rate-limit'))
+
+# A temporary backwards compatibility mode for message handling.  This is to
+# be removed around May 2019
+LEGACY_MESSAGE_FALLBACK = True
diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
index 87c1e63fe0..46309c06a2 100644
--- a/src/sentry/db/models/fields/node.py
+++ b/src/sentry/db/models/fields/node.py
@@ -49,6 +49,7 @@ class NodeData(collections.MutableMapping):
         data=None means, this is a node that needs to be fetched from nodestore.
         data={...} means, this is an object that should be saved to nodestore.
     """
+
     def __init__(self, field, id, data=None):
         self.field = field
         self.id = id
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index ceb8fffbaf..dbd597b479 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -99,7 +99,7 @@ def get_tag(data, key):
             return v
 
 
-def get_event_metadata_compat(data, fallback_message):
+def get_event_metadata_compat(data):
     """This is a fallback path to getting the event metadata.  This is used
     by some code paths that could potentially deal with old sentry events that
     do not have metadata yet.  This does not happen in practice any more but
@@ -814,7 +814,7 @@ class EventManager(object):
         return eventtypes.get(self._data.get('type', 'default'))(self._data)
 
     def get_search_message(self, event_metadata=None, culprit=None):
-        """This generates the internal event.message attribute which is used
+        """This generates the internal search_message attribute which is used
         for search purposes.  It adds a bunch of data from the metadata and
         the culprit.
         """
@@ -852,7 +852,8 @@ class EventManager(object):
         data = self._data
 
         project = Project.objects.get_from_cache(id=project_id)
-        project._organization_cache = Organization.objects.get_from_cache(id=project.organization_id)
+        project._organization_cache = Organization.objects.get_from_cache(
+            id=project.organization_id)
 
         # Check to make sure we're not about to do a bunch of work that's
         # already been done if we've processed an event with this ID. (This
@@ -983,14 +984,14 @@ class EventManager(object):
         data['metadata'] = event_metadata
         data['hashes'] = hashes
 
-        # index components into ``Event.message``
+        # index components into ``Event.search_message``
         # See GH-3248
-        event.message = self.get_search_message(event_metadata, culprit)
+        event.search_message = self.get_search_message(event_metadata, culprit)
         received_timestamp = event.data.get('received') or float(event.datetime.strftime('%s'))
 
         kwargs = {
             'platform': platform,
-            'message': event.message,
+            'search_message': event.search_message,
             'culprit': culprit,
             'logger': logger_name,
             'level': LOG_LEVELS_MAP.get(level),
@@ -1486,8 +1487,8 @@ class EventManager(object):
             'score': ScoreClause(group),
             'data': data['data'],
         }
-        if event.message and event.message != group.message:
-            extra['message'] = event.message
+        if event.search_message and event.search_message != group.search_message:
+            extra['search_message'] = event.search_message
         if group.level != data['level']:
             extra['level'] = data['level']
         if group.culprit != data['culprit']:
diff --git a/src/sentry/eventstream/kafka/backend.py b/src/sentry/eventstream/kafka/backend.py
index bc2b3762a0..de8afe4373 100644
--- a/src/sentry/eventstream/kafka/backend.py
+++ b/src/sentry/eventstream/kafka/backend.py
@@ -132,12 +132,10 @@ class KafkaEventStream(EventStream):
             'event_id': event.event_id,
             'organization_id': project.organization_id,
             'project_id': event.project_id,
-            # TODO(mitsuhiko): We do not want to send this incorrect
-            # message but this is what snuba needs at the moment.
-            'message': event.message,
+            'search_message': event.search_message,
             'platform': event.platform,
             'datetime': event.datetime,
-            'data': dict(event.data.items()),
+            'data': event.as_dict(),
             'primary_hash': primary_hash,
             'retention_days': retention_days,
         }, {
diff --git a/src/sentry/eventstream/kafka/protocol.py b/src/sentry/eventstream/kafka/protocol.py
index e532600f1e..b5f968a100 100644
--- a/src/sentry/eventstream/kafka/protocol.py
+++ b/src/sentry/eventstream/kafka/protocol.py
@@ -28,13 +28,16 @@ def basic_protocol_handler(unsupported_operations):
             "%Y-%m-%dT%H:%M:%S.%fZ",
         ).replace(tzinfo=pytz.utc)
 
+        def _get_attr(name):
+            return event_data[name]
+
         kwargs = {
             'event': Event(**{
-                name: event_data[name] for name in [
+                name: _get_attr(name) for name in [
                     'group_id',
                     'event_id',
                     'project_id',
-                    'message',
+                    'search_message',
                     'platform',
                     'datetime',
                     'data',
diff --git a/src/sentry/eventtypes/base.py b/src/sentry/eventtypes/base.py
index 0211ef195d..5087568104 100644
--- a/src/sentry/eventtypes/base.py
+++ b/src/sentry/eventtypes/base.py
@@ -19,6 +19,9 @@ class BaseEvent(object):
     def to_string(self, metadata):
         raise NotImplementedError
 
+    def get_location(self, metadata):
+        return None
+
 
 class DefaultEvent(BaseEvent):
     key = 'default'
diff --git a/src/sentry/eventtypes/error.py b/src/sentry/eventtypes/error.py
index e5dca7d383..60fc65112b 100644
--- a/src/sentry/eventtypes/error.py
+++ b/src/sentry/eventtypes/error.py
@@ -53,3 +53,6 @@ class ErrorEvent(BaseEvent):
             metadata['type'],
             truncatechars(metadata['value'].splitlines()[0], 100),
         )
+
+    def get_location(self, metadata):
+        return metadata.get('filename')
diff --git a/src/sentry/eventtypes/security.py b/src/sentry/eventtypes/security.py
index 71813b3b63..f82e90dd17 100644
--- a/src/sentry/eventtypes/security.py
+++ b/src/sentry/eventtypes/security.py
@@ -24,6 +24,9 @@ class CspEvent(BaseEvent):
     def to_string(self, metadata):
         return metadata['message']
 
+    def get_location(self, metadata):
+        return metadata.get('uri')
+
 
 class HpkpEvent(BaseEvent):
     key = 'hpkp'
@@ -42,6 +45,9 @@ class HpkpEvent(BaseEvent):
     def to_string(self, metadata):
         return metadata['message']
 
+    def get_location(self, metadata):
+        return metadata.get('origin')
+
 
 class ExpectCTEvent(BaseEvent):
     key = 'expectct'
@@ -60,6 +66,9 @@ class ExpectCTEvent(BaseEvent):
     def to_string(self, metadata):
         return metadata['message']
 
+    def get_location(self, metadata):
+        return metadata.get('origin')
+
 
 class ExpectStapleEvent(BaseEvent):
     key = 'expectstaple'
@@ -77,3 +86,6 @@ class ExpectStapleEvent(BaseEvent):
 
     def to_string(self, metadata):
         return metadata['message']
+
+    def get_location(self, metadata):
+        return metadata.get('origin')
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 994878f64c..254aa60ac2 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -43,7 +43,7 @@ class Event(Model):
     group_id = BoundedBigIntegerField(blank=True, null=True)
     event_id = models.CharField(max_length=32, null=True, db_column="message_id")
     project_id = BoundedBigIntegerField(blank=True, null=True)
-    message = models.TextField()
+    search_message = models.TextField(db_column='message')
     platform = models.CharField(max_length=64, null=True)
     datetime = models.DateTimeField(default=timezone.now, db_index=True)
     time_spent = BoundedIntegerField(null=True)
@@ -87,9 +87,14 @@ class Event(Model):
         state.pop('_project_cache', None)
         state.pop('_group_cache', None)
         state.pop('interfaces', None)
+        state['message'] = state.pop('search_message', None)
 
         return state
 
+    def __setstate__(self, state):
+        state['search_message'] = state.pop('message')
+        Model.__setstate__(self, state)
+
     # Implement a ForeignKey-like accessor for backwards compat
     def _set_group(self, group):
         self.group_id = group.id
@@ -123,7 +128,7 @@ class Event(Model):
         # this method could return what currently is real_message.
         return get_path(self.data, 'logentry', 'formatted') \
             or get_path(self.data, 'logentry', 'message') \
-            or self.message
+            or self.search_message
 
     def get_event_type(self):
         """
@@ -140,7 +145,7 @@ class Event(Model):
         See ``sentry.eventtypes``.
         """
         from sentry.event_manager import get_event_metadata_compat
-        return get_event_metadata_compat(self.data, self.message)
+        return get_event_metadata_compat(self.data)
 
     def get_hashes(self):
         """
@@ -163,11 +168,10 @@ class Event(Model):
         et = eventtypes.get(self.get_event_type())(self.data)
         return et.to_string(self.get_event_metadata())
 
-    def error(self):
-        warnings.warn('Event.error is deprecated, use Event.title', DeprecationWarning)
-        return self.title
-
-    error.short_description = _('error')
+    @property
+    def location(self):
+        et = eventtypes.get(self.get_event_type())(self.data)
+        return et.get_location(self.get_event_metadata())
 
     @property
     def real_message(self):
@@ -178,11 +182,6 @@ class Event(Model):
             or get_path(self.data, 'logentry', 'message') \
             or ''
 
-    @property
-    def message_short(self):
-        warnings.warn('Event.message_short is deprecated, use Event.title', DeprecationWarning)
-        return self.title
-
     @property
     def organization(self):
         return self.project.organization
@@ -212,9 +211,8 @@ class Event(Model):
 
     def get_tags(self):
         try:
-            rv = [(t, v) for t, v in get_path(
-                self.data, 'tags', filter=True) or () if t is not None and v is not None]
-            rv.sort()
+            rv = sorted([(t, v) for t, v in get_path(
+                self.data, 'tags', filter=True) or () if t is not None and v is not None])
             return rv
         except ValueError:
             # at one point Sentry allowed invalid tag sets such as (foo, bar)
@@ -245,8 +243,6 @@ class Event(Model):
         data['release'] = self.release
         data['dist'] = self.dist
         data['platform'] = self.platform
-        data['message'] = self.real_message
-        data['datetime'] = self.datetime
         data['time_spent'] = self.time_spent
         data['tags'] = [(k.split('sentry:', 1)[-1], v) for (k, v) in self.get_tags()]
         for k, v in sorted(six.iteritems(self.data)):
@@ -258,9 +254,19 @@ class Event(Model):
 
         # for a long time culprit was not persisted.  In those cases put
         # the culprit in from the group.
+        data['title'] = self.title
+        data['location'] = self.location
         if data.get('culprit') is None:
             data['culprit'] = self.group.culprit
 
+        # TODO(mitsuhiko): This is a deprecated property.  Can we kill this?
+        # The new replacement is `timestamp`.
+        data['datetime'] = self.datetime
+
+        # TODO(mitsuhiko): What do we do with this?  This got phased out for
+        # logentry.formatted
+        data['message'] = self.real_message
+
         return data
 
     @property
@@ -270,42 +276,10 @@ class Event(Model):
             data_len += len(repr(value))
         return data_len
 
-    # XXX(dcramer): compatibility with plugins
-    def get_level_display(self):
-        warnings.warn(
-            'Event.get_level_display is deprecated. Use Event.tags instead.', DeprecationWarning
-        )
-        return self.group.get_level_display()
-
-    @property
-    def level(self):
-        warnings.warn('Event.level is deprecated. Use Event.tags instead.', DeprecationWarning)
-        return self.group.level
-
-    @property
-    def logger(self):
-        warnings.warn('Event.logger is deprecated. Use Event.tags instead.', DeprecationWarning)
-        return self.get_tag('logger')
-
-    @property
-    def site(self):
-        warnings.warn('Event.site is deprecated. Use Event.tags instead.', DeprecationWarning)
-        return self.get_tag('site')
-
-    @property
-    def server_name(self):
-        warnings.warn('Event.server_name is deprecated. Use Event.tags instead.')
-        return self.get_tag('server_name')
-
     @property
     def culprit(self):
-        warnings.warn('Event.culprit is deprecated. Use Group.culprit instead.')
-        return self.group.culprit
-
-    @property
-    def checksum(self):
-        warnings.warn('Event.checksum is no longer used', DeprecationWarning)
-        return ''
+        # For a while events did not save the culprit
+        return self.data.get('culprit') or self.group.culprit
 
     @property
     def transaction(self):
@@ -335,6 +309,17 @@ class Event(Model):
 
         return self._environment_cache
 
+    @property
+    def level(self):
+        # we might want to move to this:
+        # return LOG_LEVELS_MAP.get(self.get_level_display()) or self.group.level
+        return self.group.level
+
+    def get_level_display(self):
+        # we might want to move to this:
+        # return self.get_tag('level') or self.group.get_level_display()
+        return self.group.get_level_display()
+
     # Find next and previous events based on datetime and id. We cannot
     # simply `ORDER BY (datetime, id)` as this is too slow (no index), so
     # we grab the next 5 / prev 5 events by datetime, and sort locally to
@@ -365,6 +350,26 @@ class Event(Model):
         events.sort(key=EVENT_ORDERING_KEY, reverse=True)
         return events[0] if events else None
 
+    # deprecated accessors
+
+    def error(self):
+        warnings.warn('Event.error is deprecated, use Event.title', DeprecationWarning)
+        return self.title
+
+    error.short_description = _('error')
+
+    @property
+    def message(self):
+        warnings.warn(
+            'Event.message is deprecated. Use Event.search_message instead.',
+            DeprecationWarning)
+        return self.real_message or self.title
+
+    @property
+    def message_short(self):
+        warnings.warn('Event.message_short is deprecated, use Event.title', DeprecationWarning)
+        return self.title
+
 
 class EventSubjectTemplate(string.Template):
     idpattern = r'(tag:)?[_a-z][_a-z0-9]*'
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index f69e2fbaf1..113f19bd71 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -21,7 +21,8 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry import eventtypes, tagstore
 from sentry.constants import (
-    DEFAULT_LOGGER_NAME, EVENT_ORDERING_KEY, LOG_LEVELS, MAX_CULPRIT_LENGTH
+    DEFAULT_LOGGER_NAME, EVENT_ORDERING_KEY, LOG_LEVELS, MAX_CULPRIT_LENGTH,
+    LEGACY_MESSAGE_FALLBACK
 )
 from sentry.db.models import (
     BaseManager, BoundedBigIntegerField, BoundedIntegerField, BoundedPositiveIntegerField,
@@ -100,7 +101,7 @@ class GroupManager(BaseManager):
             short_id=short_id,
         )
 
-    def from_kwargs(self, project, **kwargs):
+    def from_event_data(self, project, **kwargs):
         from sentry.event_manager import HashDiscarded, EventManager
 
         manager = EventManager(kwargs)
@@ -214,7 +215,7 @@ class Group(Model):
     level = BoundedPositiveIntegerField(
         choices=LOG_LEVELS.items(), default=logging.ERROR, blank=True, db_index=True
     )
-    message = models.TextField()
+    search_message = models.TextField(db_column='message')
     culprit = models.CharField(
         max_length=MAX_CULPRIT_LENGTH, blank=True, null=True, db_column='view'
     )
@@ -257,6 +258,15 @@ class Group(Model):
 
     __repr__ = sane_repr('project_id')
 
+    def __getstate__(self):
+        state = Model.__getstate__(self)
+        state['message'] = state.pop('search_message', None)
+        return state
+
+    def __setstate__(self, state):
+        state['search_message'] = state.pop('message')
+        Model.__setstate__(self, state)
+
     def __unicode__(self):
         return "(%s) %s" % (self.times_seen, self.error())
 
@@ -268,9 +278,9 @@ class Group(Model):
         if not self.active_at:
             self.active_at = self.first_seen
         # We limit what we store for the message body
-        self.message = strip(self.message)
-        if self.message:
-            self.message = truncatechars(self.message.splitlines()[0], 255)
+        self.search_message = strip(self.search_message)
+        if self.search_message:
+            self.search_message = truncatechars(self.search_message.splitlines()[0], 255)
         if self.times_seen is None:
             self.times_seen = 1
         self.score = type(self).calculate_score(
@@ -415,33 +425,24 @@ class Group(Model):
         See ``sentry.eventtypes``.
         """
         from sentry.event_manager import get_event_metadata_compat
-        return get_event_metadata_compat(self.data, self.message)
+        return get_event_metadata_compat(self.data)
 
     @property
     def title(self):
         et = eventtypes.get(self.get_event_type())(self.data)
         return et.to_string(self.get_event_metadata())
 
-    def error(self):
-        warnings.warn('Group.error is deprecated, use Group.title', DeprecationWarning)
-        return self.title
-
-    error.short_description = _('error')
-
     @property
-    def message_short(self):
-        warnings.warn('Group.message_short is deprecated, use Group.title', DeprecationWarning)
-        return self.title
+    def location(self):
+        et = eventtypes.get(self.get_event_type())(self.data)
+        return et.get_location(self.get_event_metadata())
+
+    # TODO(mitsuhiko): how to get real_message
 
     @property
     def organization(self):
         return self.project.organization
 
-    @property
-    def checksum(self):
-        warnings.warn('Group.checksum is no longer used', DeprecationWarning)
-        return ''
-
     def get_email_subject(self):
         return '%s - %s' % (
             self.qualified_short_id.encode('utf-8'),
@@ -455,3 +456,29 @@ class Group(Model):
     @classmethod
     def calculate_score(cls, times_seen, last_seen):
         return math.log(float(times_seen or 1)) * 600 + float(last_seen.strftime('%s'))
+
+    # deprecated accessors
+
+    @property
+    def message(self):
+        if LEGACY_MESSAGE_FALLBACK:
+            warnings.warn(
+                'Group.message is deprecated. Use Group.search_message or Group.title instead.',
+                DeprecationWarning)
+            return self.title
+        raise NotImplementedError('This is no longer here')
+
+    def error(self):
+        if LEGACY_MESSAGE_FALLBACK:
+            warnings.warn('Group.error is deprecated, use Group.title', DeprecationWarning)
+            return self.title
+        raise NotImplementedError('This is no longer here')
+
+    error.short_description = _('error')
+
+    @property
+    def message_short(self):
+        if LEGACY_MESSAGE_FALLBACK:
+            warnings.warn('Group.message_short is deprecated, use Group.title', DeprecationWarning)
+            return self.title
+        raise NotImplementedError('This is no longer here')
diff --git a/src/sentry/models/grouptombstone.py b/src/sentry/models/grouptombstone.py
index 233e029d1c..20663b2f68 100644
--- a/src/sentry/models/grouptombstone.py
+++ b/src/sentry/models/grouptombstone.py
@@ -9,7 +9,7 @@ from sentry.db.models import (
     BoundedPositiveIntegerField, FlexibleForeignKey, GzippedDictField, Model
 )
 
-TOMBSTONE_FIELDS_FROM_GROUP = ('project_id', 'level', 'message', 'culprit', 'data')
+TOMBSTONE_FIELDS_FROM_GROUP = ('project_id', 'level', 'search_message', 'culprit', 'data')
 
 
 class GroupTombstone(Model):
@@ -20,7 +20,7 @@ class GroupTombstone(Model):
     level = BoundedPositiveIntegerField(
         choices=LOG_LEVELS.items(), default=logging.ERROR, blank=True
     )
-    message = models.TextField()
+    search_message = models.TextField(db_column='message')
     culprit = models.CharField(
         max_length=MAX_CULPRIT_LENGTH,
         blank=True,
@@ -48,4 +48,4 @@ class GroupTombstone(Model):
         See ``sentry.eventtypes``.
         """
         from sentry.event_manager import get_event_metadata_compat
-        return get_event_metadata_compat(self.data, self.message)
+        return get_event_metadata_compat(self.data)
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 8cfb5b579e..d61381a497 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -58,7 +58,11 @@ register(
 register('redis.options', type=Dict, flags=FLAG_NOSTORE)
 
 # symbolizer specifics
-register('dsym.cache-path', type=String, default='/tmp/sentry-dsym-cache', flags=FLAG_PRIORITIZE_DISK)
+register(
+    'dsym.cache-path',
+    type=String,
+    default='/tmp/sentry-dsym-cache',
+    flags=FLAG_PRIORITIZE_DISK)
 
 # Mail
 register('mail.backend', default='smtp', flags=FLAG_NOSTORE)
diff --git a/src/sentry/plugins/bases/issue.py b/src/sentry/plugins/bases/issue.py
index 7037585298..278ebec917 100644
--- a/src/sentry/plugins/bases/issue.py
+++ b/src/sentry/plugins/bases/issue.py
@@ -70,7 +70,7 @@ class IssueTrackingPlugin(Plugin):
         return '\n'.join(output)
 
     def _get_group_title(self, request, group, event):
-        return event.error()
+        return event.title
 
     def is_configured(self, request, project, **kwargs):
         raise NotImplementedError
diff --git a/src/sentry/search/django/backend.py b/src/sentry/search/django/backend.py
index be2f77940b..9fc4c5789c 100644
--- a/src/sentry/search/django/backend.py
+++ b/src/sentry/search/django/backend.py
@@ -236,7 +236,7 @@ class DjangoSearchBackend(SearchBackend):
         group_queryset = QuerySetBuilder({
             'query': CallbackCondition(
                 lambda queryset, query: queryset.filter(
-                    Q(message__icontains=query) | Q(culprit__icontains=query),
+                    Q(search_message__icontains=query) | Q(culprit__icontains=query),
                 ) if query else queryset,
             ),
             'status': CallbackCondition(
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx
index 7fa01ca4e3..d5292e07d8 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx
@@ -26,7 +26,7 @@ class EventsTableBody extends React.PureComponent {
 
     return events.map((event, eventIdx) => {
       const project = projectsMap.get(event.projectID);
-      const trimmedMessage = event.message.split('\n')[0].substr(0, 100);
+      const trimmedMessage = event.title || event.message.split('\n')[0].substr(0, 100);
 
       const hasSentry10 = new Set(organization.features).has('sentry10');
 
diff --git a/src/sentry/tasks/unmerge.py b/src/sentry/tasks/unmerge.py
index d5f5dd3e58..81fa846087 100644
--- a/src/sentry/tasks/unmerge.py
+++ b/src/sentry/tasks/unmerge.py
@@ -90,7 +90,7 @@ initial_fields = {
         event.get_tag('level'),
         logging.ERROR,
     ),
-    'message': lambda event: event.message,
+    'search_message': lambda event: event.search_message,
     'times_seen': lambda event: 0,
 }
 
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 8b6b05fb40..3f551c2c2a 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -226,13 +226,13 @@ class Fixtures(object):
 
     @fixture
     def group(self):
-        return self.create_group(message=u'\u3053\u3093\u306b\u3061\u306f')
+        return self.create_group(search_message=u'\u3053\u3093\u306b\u3061\u306f')
 
     @fixture
     def event(self):
         return self.create_event(
             event_id='a' * 32,
-            message=u'\u3053\u3093\u306b\u3061\u306f',
+            search_message=u'\u3053\u3093\u306b\u3061\u306f',
         )
 
     @fixture
@@ -473,8 +473,11 @@ class Fixtures(object):
             kwargs['group'] = self.group
         kwargs.setdefault('project', kwargs['group'].project)
         kwargs.setdefault('data', copy.deepcopy(DEFAULT_EVENT_DATA))
+        message = kwargs.pop('message', None)
+        if message is not None:
+            kwargs['data']['message'] = message
         kwargs.setdefault('platform', kwargs['data'].get('platform', 'python'))
-        kwargs.setdefault('message', kwargs['data'].get('message', 'message'))
+        kwargs.setdefault('search_message', kwargs['data'].get('message', 'message'))
         if kwargs.get('tags'):
             tags = kwargs.pop('tags')
             if isinstance(tags, dict):
@@ -499,7 +502,7 @@ class Fixtures(object):
         # parameter just like our API would
         if 'logentry' not in kwargs['data']:
             kwargs['data']['logentry'] = {
-                'message': kwargs['message'] or '<unlabeled event>',
+                'message': kwargs.get('search_message') or '<unlabeled event>',
             }
 
         if normalize:
@@ -507,7 +510,7 @@ class Fixtures(object):
                                    for_store=False)
             manager.normalize()
             kwargs['data'] = manager.get_data()
-            kwargs['message'] = manager.get_search_message()
+            kwargs['search_message'] = manager.get_search_message()
 
         event = Event(event_id=event_id, **kwargs)
         EventMapping.objects.create(
@@ -633,18 +636,19 @@ class Fixtures(object):
         return event
 
     def create_group(self, project=None, checksum=None, **kwargs):
+        assert 'message' not in kwargs, 'message was removed use search_message instead'
         if checksum:
             warnings.warn('Checksum passed to create_group', DeprecationWarning)
         if project is None:
             project = self.project
-        kwargs.setdefault('message', 'Hello world')
+        kwargs.setdefault('search_message', 'Hello world')
         kwargs.setdefault('data', {})
         if 'type' not in kwargs['data']:
             kwargs['data'].update(
                 {
                     'type': 'default',
                     'metadata': {
-                        'title': kwargs['message'],
+                        'title': kwargs['search_message'],
                     },
                 }
             )
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index 60473ecbc5..cd714c7019 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -39,6 +39,8 @@ SENTRY_SNUBA_MAP = {
     'project.id': 'project_id',
     'platform': 'platform',
     'message': 'message',
+    'title': 'title',
+    'location': 'location',
     'issue.id': 'issue',
     'timestamp': 'timestamp',
     'time': 'time',
diff --git a/src/sentry/utils/strings.py b/src/sentry/utils/strings.py
index 92d284dd7e..4912e9387e 100644
--- a/src/sentry/utils/strings.py
+++ b/src/sentry/utils/strings.py
@@ -93,7 +93,8 @@ def soft_break(value, length, process=lambda chunk: chunk):
     zero-width spaces after common delimeters, as well as soft-hyphenating long
     identifiers.
     """
-    delimiters = re.compile(six.text_type(r'([{}]+)').format(''.join(map(re.escape, ',.$:/+@!?()<>[]{}'))))
+    delimiters = re.compile(six.text_type(
+        r'([{}]+)').format(''.join(map(re.escape, ',.$:/+@!?()<>[]{}'))))
 
     def soft_break_delimiter(match):
         results = []
diff --git a/src/sentry/web/frontend/debug/mail.py b/src/sentry/web/frontend/debug/mail.py
index e884d10b21..88a6bd697e 100644
--- a/src/sentry/web/frontend/debug/mail.py
+++ b/src/sentry/web/frontend/debug/mail.py
@@ -99,7 +99,7 @@ def make_group_generator(random, project):
             project=project,
             culprit=culprit,
             level=level,
-            message=message,
+            search_message=message,
             first_seen=to_datetime(first_seen),
             last_seen=to_datetime(last_seen),
             status=random.choice((GroupStatus.UNRESOLVED, GroupStatus.RESOLVED, )),
@@ -198,7 +198,7 @@ class ActivityMailDebugView(View):
         )
 
         data = dict(load_data('python'))
-        data['message'] = group.message
+        data['message'] = group.search_message
         data.pop('logentry', None)
 
         event_manager = EventManager(data)
@@ -214,7 +214,7 @@ class ActivityMailDebugView(View):
         event = Event(
             id=1,
             project=project,
-            message=event_manager.get_search_message(),
+            search_message=event_manager.get_search_message(),
             group=group,
             datetime=datetime(2016, 6, 13, 3, 8, 24, tzinfo=timezone.utc),
             data=event_manager.get_data()
@@ -253,7 +253,8 @@ def alert(request):
     )
 
     data = dict(load_data(platform))
-    data['message'] = group.message
+    # XXX: this is not exactly right
+    data['message'] = group.search_message
     data['event_id'] = '44f1419e73884cd2b45c79918f4b6dc4'
     data.pop('logentry', None)
     data['environment'] = 'prod'
@@ -269,7 +270,7 @@ def alert(request):
     event = event_manager.save(project.id)
     event_type = event_manager.get_event_type()
 
-    group.message = event_manager.get_search_message()
+    group.search_message = event_manager.get_search_message()
     group.data = {
         'type': event_type.key,
         'metadata': event_type.get_metadata(),
@@ -360,7 +361,7 @@ def digest(request):
                 event_id=uuid.uuid4().hex,
                 project=project,
                 group=group,
-                message=group.message,
+                search_message=group.search_message,
                 data=load_data('python'),
                 datetime=to_datetime(
                     random.randint(
diff --git a/tests/acceptance/test_organization_discover.py b/tests/acceptance/test_organization_discover.py
index e5f6c2a8b9..c7c2392b79 100644
--- a/tests/acceptance/test_organization_discover.py
+++ b/tests/acceptance/test_organization_discover.py
@@ -23,7 +23,7 @@ class OrganizationDiscoverTest(AcceptanceTestCase):
         self.group = self.create_group(project=self.project)
         self.event = self.create_event(
             group=self.group,
-            message="message!",
+            search_message="message!",
             platform="python",
         )
 
diff --git a/tests/acceptance/test_organization_releases.py b/tests/acceptance/test_organization_releases.py
index e369674f74..b723dfe543 100644
--- a/tests/acceptance/test_organization_releases.py
+++ b/tests/acceptance/test_organization_releases.py
@@ -34,7 +34,7 @@ class OrganizationReleasesTest(AcceptanceTestCase):
             self.create_group(
                 first_release=release,
                 project=self.project,
-                message='Foo bar',
+                search_message='Foo bar',
             )
             self.project.update(first_event=timezone.now())
             self.browser.get(self.path)
diff --git a/tests/acceptance/test_organization_user_feedback.py b/tests/acceptance/test_organization_user_feedback.py
index 0f6a949a62..fe43f4fe54 100644
--- a/tests/acceptance/test_organization_user_feedback.py
+++ b/tests/acceptance/test_organization_user_feedback.py
@@ -29,7 +29,7 @@ class OrganizationUserFeedbackTest(AcceptanceTestCase):
         with self.feature('organizations:sentry10'):
             self.create_group(
                 project=self.project,
-                message='Foo bar',
+                search_message='Foo bar',
             )
             self.create_userreport(group=self.group, project=self.project, event=self.event)
             self.browser.get(self.path)
diff --git a/tests/acceptance/test_project_issues.py b/tests/acceptance/test_project_issues.py
index 9200558541..8d327b45a5 100644
--- a/tests/acceptance/test_project_issues.py
+++ b/tests/acceptance/test_project_issues.py
@@ -33,7 +33,7 @@ class ProjectIssuesTest(AcceptanceTestCase):
         self.project.update(first_event=timezone.now())
         self.create_group(
             project=self.project,
-            message='Foo bar',
+            search_message='Foo bar',
         )
         self.browser.get(self.path)
         self.browser.wait_until('.ref-group-list')
diff --git a/tests/acceptance/test_project_overview.py b/tests/acceptance/test_project_overview.py
index 3317a9cf82..a009504cfe 100644
--- a/tests/acceptance/test_project_overview.py
+++ b/tests/acceptance/test_project_overview.py
@@ -26,7 +26,7 @@ class ProjectOverviewTest(AcceptanceTestCase):
         self.project.update(first_event=timezone.now())
         self.create_group(
             project=self.project,
-            message='Foo bar',
+            search_message='Foo bar',
         )
         self.browser.get(self.path)
         self.browser.wait_until('.chart-wrapper')
diff --git a/tests/acceptance/test_project_releases.py b/tests/acceptance/test_project_releases.py
index c0dde191be..d844ff674d 100644
--- a/tests/acceptance/test_project_releases.py
+++ b/tests/acceptance/test_project_releases.py
@@ -30,7 +30,7 @@ class ProjectReleasesTest(AcceptanceTestCase):
         self.create_group(
             first_release=release,
             project=self.project,
-            message='Foo bar',
+            search_message='Foo bar',
         )
         self.project.update(first_event=timezone.now())
         self.browser.get(self.path)
@@ -66,7 +66,7 @@ class ProjectReleaseDetailsTest(AcceptanceTestCase):
         self.create_group(
             first_release=self.release,
             project=self.project,
-            message='Foo bar',
+            search_message='Foo bar',
         )
         self.login_as(self.user)
         self.path = u'/{}/{}/releases/{}/'.format(
diff --git a/tests/acceptance/test_project_user_feedback.py b/tests/acceptance/test_project_user_feedback.py
index 5ab29aee89..2b3cce4a8a 100644
--- a/tests/acceptance/test_project_user_feedback.py
+++ b/tests/acceptance/test_project_user_feedback.py
@@ -26,7 +26,7 @@ class ProjectUserFeedbackTest(AcceptanceTestCase):
     def test(self):
         self.create_group(
             project=self.project,
-            message='Foo bar',
+            search_message='Foo bar',
         )
         self.create_userreport(group=self.group, project=self.project, event=self.event)
         self.browser.get(self.path)
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index b92ca3c481..c191d7a028 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -194,7 +194,7 @@ class SentryRemoteTest(TestCase):
         event_id = json.loads(resp.content)['id']
         instance = Event.objects.get(event_id=event_id)
 
-        assert instance.message == 'hello'
+        assert instance.search_message == 'hello'
 
         assert tagstore.get_tag_key(self.project.id, None, 'foo') is not None
         assert tagstore.get_tag_value(self.project.id, None, 'foo', 'bar') is not None
@@ -215,7 +215,7 @@ class SentryRemoteTest(TestCase):
         resp = self._postWithSignature(kwargs)
         assert resp.status_code == 200, resp.content
         instance = Event.objects.get()
-        assert instance.message == 'hello'
+        assert instance.real_message == 'hello'
         assert instance.datetime == timestamp
         group = instance.group
         assert group.first_seen == timestamp
@@ -229,7 +229,7 @@ class SentryRemoteTest(TestCase):
         resp = self._postWithSignature(kwargs)
         assert resp.status_code == 200, resp.content
         instance = Event.objects.get()
-        assert instance.message == 'hello'
+        assert instance.real_message == 'hello'
         assert instance.datetime == timestamp
         group = instance.group
         assert group.first_seen == timestamp
@@ -240,7 +240,7 @@ class SentryRemoteTest(TestCase):
         resp = self._postWithSignature(kwargs)
         assert resp.status_code == 200
         instance = Event.objects.get()
-        assert instance.message == 'hello'
+        assert instance.real_message == 'hello'
 
     @override_settings(SENTRY_ALLOW_ORIGIN='sentry.io')
     def test_correct_data_with_get(self):
@@ -248,7 +248,7 @@ class SentryRemoteTest(TestCase):
         resp = self._getWithReferer(kwargs)
         assert resp.status_code == 200, resp.content
         instance = Event.objects.get()
-        assert instance.message == 'hello'
+        assert instance.real_message == 'hello'
 
     @override_settings(SENTRY_ALLOW_ORIGIN='*')
     def test_get_without_referer_allowed(self):
@@ -263,7 +263,7 @@ class SentryRemoteTest(TestCase):
         resp = self._postWithReferer(kwargs)
         assert resp.status_code == 200, resp.content
         instance = Event.objects.get()
-        assert instance.message == 'hello'
+        assert instance.real_message == 'hello'
 
     @override_settings(SENTRY_ALLOW_ORIGIN='sentry.io')
     def test_post_without_referer(self):
@@ -299,7 +299,7 @@ class SentryRemoteTest(TestCase):
 
         instance = Event.objects.get()
 
-        assert instance.message == 'hello'
+        assert instance.real_message == 'hello'
 
     def test_content_encoding_deflate(self):
         kwargs = {'message': 'hello'}
@@ -323,7 +323,7 @@ class SentryRemoteTest(TestCase):
         event_id = json.loads(resp.content)['id']
         instance = Event.objects.get(event_id=event_id)
 
-        assert instance.message == 'hello'
+        assert instance.real_message == 'hello'
 
     def test_content_encoding_gzip(self):
         kwargs = {'message': 'hello'}
@@ -355,7 +355,7 @@ class SentryRemoteTest(TestCase):
         event_id = json.loads(resp.content)['id']
         instance = Event.objects.get(event_id=event_id)
 
-        assert instance.message == 'hello'
+        assert instance.real_message == 'hello'
 
     def test_protocol_v2_0_without_secret_key(self):
         kwargs = {'message': 'hello'}
@@ -371,7 +371,7 @@ class SentryRemoteTest(TestCase):
         event_id = json.loads(resp.content)['id']
         instance = Event.objects.get(event_id=event_id)
 
-        assert instance.message == 'hello'
+        assert instance.real_message == 'hello'
 
     def test_protocol_v3(self):
         kwargs = {'message': 'hello'}
@@ -388,7 +388,7 @@ class SentryRemoteTest(TestCase):
         event_id = json.loads(resp.content)['id']
         instance = Event.objects.get(event_id=event_id)
 
-        assert instance.message == 'hello'
+        assert instance.real_message == 'hello'
 
     def test_protocol_v4(self):
         kwargs = {'message': 'hello'}
@@ -405,7 +405,7 @@ class SentryRemoteTest(TestCase):
         event_id = json.loads(resp.content)['id']
         instance = Event.objects.get(event_id=event_id)
 
-        assert instance.message == 'hello'
+        assert instance.real_message == 'hello'
 
     def test_protocol_v5(self):
         kwargs = {'message': 'hello'}
@@ -422,7 +422,7 @@ class SentryRemoteTest(TestCase):
         event_id = json.loads(resp.content)['id']
         instance = Event.objects.get(event_id=event_id)
 
-        assert instance.message == 'hello'
+        assert instance.real_message == 'hello'
 
     def test_protocol_v6(self):
         kwargs = {'message': 'hello'}
@@ -439,7 +439,7 @@ class SentryRemoteTest(TestCase):
         event_id = json.loads(resp.content)['id']
         instance = Event.objects.get(event_id=event_id)
 
-        assert instance.message == 'hello'
+        assert instance.real_message == 'hello'
 
 
 class DepdendencyTest(TestCase):
diff --git a/tests/sentry/api/endpoints/test_event_committers.py b/tests/sentry/api/endpoints/test_event_committers.py
index 2e01cbbfe2..16c94f1c18 100644
--- a/tests/sentry/api/endpoints/test_event_committers.py
+++ b/tests/sentry/api/endpoints/test_event_committers.py
@@ -98,7 +98,7 @@ class EventCommittersTest(APITestCase):
             project_id=project.id,
             group_id=group.id,
             event_id='abcd',
-            message='hello 123456',
+            search_message='hello 123456',
             data={
                 'environment': 'production',
                 'type': 'default',
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index c7473d3bf0..32c81dfd3a 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -472,7 +472,7 @@ class GroupUpdateTest(APITestCase):
         tombstone = GroupTombstone.objects.get(
             id=GroupHash.objects.get(id=group_hash.id).group_tombstone_id,
         )
-        assert tombstone.message == group.message
+        assert tombstone.search_message == group.search_message
         assert tombstone.culprit == group.culprit
         assert tombstone.project == group.project
         assert tombstone.data == group.data
diff --git a/tests/sentry/api/endpoints/test_group_events.py b/tests/sentry/api/endpoints/test_group_events.py
index 1fca521cb9..704bb57572 100644
--- a/tests/sentry/api/endpoints/test_group_events.py
+++ b/tests/sentry/api/endpoints/test_group_events.py
@@ -151,9 +151,17 @@ class GroupEventsTest(APITestCase):
         self.login_as(user=self.user)
 
         group = self.create_group()
-        event_1 = self.create_event(event_id='a' * 32, group=group, message="foo bar hello world")
+        event_1 = self.create_event(
+            event_id='a' * 32,
+            group=group,
+            data=dict(
+                message="foo bar hello world"))
 
-        event_2 = self.create_event(event_id='b' * 32, group=group, message='this bar hello world ')
+        event_2 = self.create_event(
+            event_id='b' * 32,
+            group=group,
+            data=dict(
+                message='this bar hello world '))
 
         query_1 = "foo"
         query_2 = "hello+world"
diff --git a/tests/sentry/api/endpoints/test_group_tombstone.py b/tests/sentry/api/endpoints/test_group_tombstone.py
index 12d85bcf1c..0a33cd8824 100644
--- a/tests/sentry/api/endpoints/test_group_tombstone.py
+++ b/tests/sentry/api/endpoints/test_group_tombstone.py
@@ -21,7 +21,7 @@ class GroupTombstoneTest(APITestCase):
         tombstone = GroupTombstone.objects.create(
             project_id=group.project_id,
             level=group.level,
-            message=group.message,
+            search_message=group.search_message,
             culprit=group.culprit,
             data=group.data,
             previous_group_id=group.id,
@@ -43,4 +43,4 @@ class GroupTombstoneTest(APITestCase):
 
         response = self.client.get(path)
         assert response.status_code == 200, response
-        assert response.data[0]['message'] == group.message
+        assert response.data[0]['message'] == group.search_message
diff --git a/tests/sentry/api/endpoints/test_group_tombstone_details.py b/tests/sentry/api/endpoints/test_group_tombstone_details.py
index 43dee7fecd..ba58c976e7 100644
--- a/tests/sentry/api/endpoints/test_group_tombstone_details.py
+++ b/tests/sentry/api/endpoints/test_group_tombstone_details.py
@@ -21,7 +21,7 @@ class GroupTombstoneDetailsTest(APITestCase):
         tombstone = GroupTombstone.objects.create(
             project_id=group.project_id,
             level=group.level,
-            message=group.message,
+            search_message=group.search_message,
             culprit=group.culprit,
             data=group.data,
             previous_group_id=group.id,
@@ -68,7 +68,7 @@ class GroupTombstoneDetailsTest(APITestCase):
         tombstone = GroupTombstone.objects.create(
             project_id=group.project_id,
             level=group.level,
-            message=group.message,
+            search_message=group.search_message,
             culprit=group.culprit,
             data=group.data,
             previous_group_id=group.id,
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index fce4d66577..0d12499df9 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -1766,7 +1766,7 @@ class GroupUpdateTest(APITestCase):
         tombstone = GroupTombstone.objects.get(
             id=GroupHash.objects.get(id=group_hash.id).group_tombstone_id,
         )
-        assert tombstone.message == group1.message
+        assert tombstone.search_message == group1.search_message
         assert tombstone.culprit == group1.culprit
         assert tombstone.project == group1.project
         assert tombstone.data == group1.data
diff --git a/tests/sentry/api/serializers/test_event.py b/tests/sentry/api/serializers/test_event.py
index f3f62626bd..a7e2fabae6 100644
--- a/tests/sentry/api/serializers/test_event.py
+++ b/tests/sentry/api/serializers/test_event.py
@@ -103,10 +103,11 @@ class EventSerializerTest(TestCase):
 
     def test_message_legacy(self):
         event = self.create_event(data={'logentry': None})
-        event.message = 'search message'
+        event.search_message = 'search message'
 
         result = serialize(event)
-        assert result['message'] == 'search message'
+        assert result['message'] is None
+        assert result['searchMessage'] == 'search message'
 
     def test_tags_tuples(self):
         event = self.create_event(
diff --git a/tests/sentry/api/serializers/test_group_tombstone.py b/tests/sentry/api/serializers/test_group_tombstone.py
index ab34d0dc79..1a09544b6e 100644
--- a/tests/sentry/api/serializers/test_group_tombstone.py
+++ b/tests/sentry/api/serializers/test_group_tombstone.py
@@ -22,7 +22,7 @@ class GroupTombstoneSerializerTest(TestCase):
         tombstone = GroupTombstone.objects.create(
             project_id=group.project_id,
             level=group.level,
-            message=group.message,
+            search_message=group.search_message,
             culprit=group.culprit,
             data=group.data,
             actor_id=self.user.id,
@@ -36,6 +36,6 @@ class GroupTombstoneSerializerTest(TestCase):
         )
         result = serialize(tombstone, self.user)
 
-        assert result['message'] == group.message
+        assert result['message'] == group.search_message
         assert result['culprit'] == group.culprit
         assert result['actor']['email'] == 'foo@example.com'
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 1f38c89bc5..5effd6b9dc 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -423,7 +423,7 @@ class GetSnubaQueryArgsTest(TestCase):
                 ['email', '=', 'foo@example.com'],
                 ['tags[sentry:release]', '=', '1.2.1'],
                 ['tags[fruit]', '=', 'apple'],
-                [['positionCaseInsensitive', ['message', "'hello'"]], '!=', 0],
+                [['positionCaseInsensitive', [['coalesce', ['search_message', 'message']], "'hello'"]], '!=', 0],
             ],
             'filter_keys': {'project_id': [1, 2, 3]},
             'start': datetime.datetime(2015, 5, 18, 10, 15, 1, tzinfo=timezone.utc),
@@ -484,7 +484,8 @@ class GetSnubaQueryArgsTest(TestCase):
         assert get_snuba_query_args('!message:"post_process.process_error HTTPError 403"') == {
             'filter_keys': {},
             'conditions': [[
-                ['positionCaseInsensitive', ['message', "'post_process.process_error HTTPError 403'"]],
+                ['positionCaseInsensitive', [['coalesce', ['search_message', 'message']],
+                                             "'post_process.process_error HTTPError 403'"]],
                 '=',
                 0,
             ]]
diff --git a/tests/sentry/buffer/base/tests.py b/tests/sentry/buffer/base/tests.py
index bbda5674f8..54d6c36104 100644
--- a/tests/sentry/buffer/base/tests.py
+++ b/tests/sentry/buffer/base/tests.py
@@ -33,9 +33,9 @@ class BufferTest(TestCase):
 
     def test_process_saves_data_without_existing_row(self):
         columns = {'times_seen': 1}
-        filters = {'message': 'foo bar', 'project_id': 1}
+        filters = {'search_message': 'foo bar', 'project_id': 1}
         self.buf.process(Group, columns, filters)
-        group = Group.objects.get(message='foo bar')
+        group = Group.objects.get(search_message='foo bar')
         # the default value for times_seen is 1, so we actually end up
         # incrementing it to 2 here
         assert group.times_seen == 2
diff --git a/tests/sentry/digests/test_utilities.py b/tests/sentry/digests/test_utilities.py
index 1ce05e8964..966fd90aa0 100644
--- a/tests/sentry/digests/test_utilities.py
+++ b/tests/sentry/digests/test_utilities.py
@@ -213,12 +213,12 @@ class GetPersonalizedDigestsTestCase(TestCase):
                 project=project,
                 first_seen=start_time - timedelta(days=index + 1),
                 last_seen=start_time - timedelta(hours=index + 1),
-                message='group%d' % index
+                search_message='group%d' % index
             )
             if filenames is not None:
                 event = self.create_event(
                     group=group,
-                    message=group.message,
+                    search_message=group.search_message,
                     datetime=group.last_seen,
                     project=project,
                     data=self.create_event_data(filename=label)
@@ -226,7 +226,7 @@ class GetPersonalizedDigestsTestCase(TestCase):
             else:
                 event = self.create_event(
                     group=group,
-                    message=group.message,
+                    search_message=group.search_message,
                     datetime=group.last_seen,
                     project=project,
                     data=self.create_event_data('foo.bar', url=label)
diff --git a/tests/sentry/event_manager/test_event_manager.py b/tests/sentry/event_manager/test_event_manager.py
index 0b630b121b..cd372c7d25 100644
--- a/tests/sentry/event_manager/test_event_manager.py
+++ b/tests/sentry/event_manager/test_event_manager.py
@@ -48,8 +48,8 @@ class EventManagerTest(TransactionTestCase):
 
     def test_similar_message_prefix_doesnt_group(self):
         # we had a regression which caused the default hash to just be
-        # 'event.message' instead of '[event.message]' which caused it to
-        # generate a hash per letter
+        # 'event.search_message' instead of '[event.search_message]' which
+        # caused it to generate a hash per letter
         manager = EventManager(make_event(event_id='a', message='foo bar'))
         manager.normalize()
         event1 = manager.save(1)
@@ -152,7 +152,7 @@ class EventManagerTest(TransactionTestCase):
 
         assert group.times_seen == 2
         assert group.last_seen.replace(microsecond=0) == event2.datetime.replace(microsecond=0)
-        assert group.message == event2.message
+        assert group.search_message == event2.search_message
         assert group.data.get('type') == 'default'
         assert group.data.get('metadata') == {
             'title': 'foo bar',
@@ -186,7 +186,7 @@ class EventManagerTest(TransactionTestCase):
 
         assert group.times_seen == 2
         assert group.last_seen.replace(microsecond=0) == event.datetime.replace(microsecond=0)
-        assert group.message == event2.message
+        assert group.search_message == event2.search_message
 
     def test_differentiates_with_fingerprint(self):
         manager = EventManager(
@@ -1114,7 +1114,8 @@ class EventManagerTest(TransactionTestCase):
         manager.normalize()
         event = manager.save(self.project.id)
 
-        assert event.message == 'hello world'
+        assert event.search_message == 'hello world'
+        assert event.real_message == 'hello world'
 
     def test_stringified_message(self):
         manager = EventManager(make_event(**{
@@ -1123,6 +1124,8 @@ class EventManagerTest(TransactionTestCase):
         manager.normalize()
         event = manager.save(self.project.id)
 
+        assert event.search_message == '1234'
+        assert event.real_message == '1234'
         assert event.data['logentry'] == {
             'formatted': '1234',
         }
@@ -1200,7 +1203,7 @@ class EventManagerTest(TransactionTestCase):
         tombstone = GroupTombstone.objects.create(
             project_id=group.project_id,
             level=group.level,
-            message=group.message,
+            search_message=group.search_message,
             culprit=group.culprit,
             data=group.data,
             previous_group_id=group.id,
diff --git a/tests/sentry/event_manager/test_get_hashes_from_fingerprint.py b/tests/sentry/event_manager/test_get_hashes_from_fingerprint.py
index e56cfacff3..96e26297bd 100644
--- a/tests/sentry/event_manager/test_get_hashes_from_fingerprint.py
+++ b/tests/sentry/event_manager/test_get_hashes_from_fingerprint.py
@@ -27,7 +27,7 @@ def test_stacktrace_wins_over_http(http_comp_hash, stack_comp_hash):
             },
         },
         platform='python',
-        message='Foo bar',
+        search_message='Foo bar',
     )
     hashes = event.get_hashes()
     assert len(hashes) == 1
diff --git a/tests/sentry/eventstream/kafka/test_consumer.py b/tests/sentry/eventstream/kafka/test_consumer.py
index a9ce7990c3..eae2876365 100644
--- a/tests/sentry/eventstream/kafka/test_consumer.py
+++ b/tests/sentry/eventstream/kafka/test_consumer.py
@@ -45,7 +45,8 @@ def requires_kafka(function):
         if not has_kafka_client:
             return pytest.xfail('test requires confluent_kafka which is not installed')
         if 'SENTRY_KAFKA_HOSTS' not in os.environ:
-            return pytest.xfail('test requires SENTRY_KAFKA_HOSTS environment variable which is not set')
+            return pytest.xfail(
+                'test requires SENTRY_KAFKA_HOSTS environment variable which is not set')
         return function(*args, **kwargs)
 
     return wrapper
@@ -536,7 +537,8 @@ def collect_messages_recieved(count):
 
 
 @requires_kafka
-@pytest.mark.xfail(reason='assignment during rebalance requires partition rollback to last committed offset', run=False)
+@pytest.mark.xfail(
+    reason='assignment during rebalance requires partition rollback to last committed offset', run=False)
 def test_consumer_rebalance_from_uncommitted_offset():
     consumer_group = 'consumer-{}'.format(uuid.uuid1().hex)
     synchronize_commit_group = 'consumer-{}'.format(uuid.uuid1().hex)
diff --git a/tests/sentry/eventstream/kafka/test_protocol.py b/tests/sentry/eventstream/kafka/test_protocol.py
index b2a65149ea..7af99fab43 100644
--- a/tests/sentry/eventstream/kafka/test_protocol.py
+++ b/tests/sentry/eventstream/kafka/test_protocol.py
@@ -28,7 +28,7 @@ def test_get_task_kwargs_for_message_version_1():
         'project_id': 1,
         'group_id': 2,
         'event_id': '00000000000010008080808080808080',
-        'message': 'message',
+        'search_message': 'search message',
         'platform': 'python',
         'datetime': '2018-07-20T21:04:27.600640Z',
         'data': {},
@@ -48,7 +48,7 @@ def test_get_task_kwargs_for_message_version_1():
     assert event.project_id == 1
     assert event.group_id == 2
     assert event.event_id == '00000000000010008080808080808080'
-    assert event.message == 'message'
+    assert event.search_message == 'search message'
     assert event.platform == 'python'
     assert event.datetime == datetime(2018, 7, 20, 21, 4, 27, 600640, tzinfo=pytz.utc)
     assert dict(event.data) == {}
diff --git a/tests/sentry/lang/native/test_plugin.py b/tests/sentry/lang/native/test_plugin.py
index 9251d9bf41..e5a672dae7 100644
--- a/tests/sentry/lang/native/test_plugin.py
+++ b/tests/sentry/lang/native/test_plugin.py
@@ -1605,7 +1605,7 @@ class MinidumpIntegrationTest(TestCase):
     def test_attachment_deletion(self):
         event = self.create_event(
             event_id='a' * 32,
-            message='Minidump test event',
+            search_message='Minidump test event',
         )
 
         attachment = self.create_event_attachment(event=event, name='log.txt')
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 6885865e95..79fe8da0aa 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -9,13 +9,13 @@ from sentry.testutils import TestCase
 
 class SentryManagerTest(TestCase):
     def test_valid_only_message(self):
-        event = Group.objects.from_kwargs(1, message='foo')
+        event = Group.objects.from_event_data(1, message='foo')
         self.assertEquals(event.group.last_seen, event.datetime)
-        self.assertEquals(event.message, 'foo')
+        self.assertEquals(event.search_message, 'foo')
         self.assertEquals(event.project_id, 1)
 
     def test_add_tags(self):
-        event = Group.objects.from_kwargs(1, message='rrr')
+        event = Group.objects.from_event_data(1, search_message='rrr')
         group = event.group
         environment = self.create_environment()
 
diff --git a/tests/sentry/models/test_event.py b/tests/sentry/models/test_event.py
index ec106bea97..3fe4352ae2 100644
--- a/tests/sentry/models/test_event.py
+++ b/tests/sentry/models/test_event.py
@@ -17,19 +17,19 @@ class EventTest(TestCase):
                 ('server_name', 'bar'),
             ]}
         )
-        assert event.logger == 'foobar'
         assert event.level == event.group.level
-        assert event.site == 'foo'
-        assert event.server_name == 'bar'
         assert event.culprit == event.group.culprit
 
     def test_pickling_compat(self):
         event = self.create_event(
-            data={'tags': [
-                ('logger', 'foobar'),
-                ('site', 'foo'),
-                ('server_name', 'bar'),
-            ]}
+            message='Hello World!',
+            data={
+                'tags': [
+                    ('logger', 'foobar'),
+                    ('site', 'foo'),
+                    ('server_name', 'bar'),
+                ]
+            }
         )
 
         # Ensure we load and memoize the interfaces as well.
@@ -40,6 +40,10 @@ class EventTest(TestCase):
         data = pickle.dumps(event, protocol=2)
         assert 'canonical' not in data
 
+        # Make sure the search message is serialized as message
+        assert 'search_message' not in data
+        assert 'Hello World!' in data
+
         # For testing we remove the backwards compat support in the
         # `NodeData` as well.
         nodedata_getstate = NodeData.__getstate__
@@ -72,10 +76,10 @@ class EventTest(TestCase):
 
     def test_email_subject(self):
         event1 = self.create_event(
-            event_id='a' * 32, group=self.group, tags={'level': 'info'}, message='Foo bar'
+            event_id='a' * 32, group=self.group, tags={'level': 'info'}, data=dict(message='Foo bar')
         )
         event2 = self.create_event(
-            event_id='b' * 32, group=self.group, tags={'level': 'ERROR'}, message='Foo bar'
+            event_id='b' * 32, group=self.group, tags={'level': 'ERROR'}, data=dict(message='Foo bar')
         )
         self.group.level = 30
 
@@ -164,12 +168,12 @@ class EventTest(TestCase):
 
 class EventGetLegacyMessageTest(TestCase):
     def test_message(self):
-        event = self.create_event(message='foo bar')
+        event = self.create_event(search_message='foo bar')
         assert event.get_legacy_message() == 'foo bar'
 
     def test_message_interface(self):
         event = self.create_event(
-            message='biz baz',
+            search_message='biz baz',
             data={'logentry': {
                 'message': 'foo bar'
             }},
@@ -178,7 +182,7 @@ class EventGetLegacyMessageTest(TestCase):
 
     def test_message_interface_with_formatting(self):
         event = self.create_event(
-            message='biz baz',
+            search_message='biz baz',
             data={
                 'logentry': {
                     'message': 'foo %s',
diff --git a/tests/sentry/models/test_group.py b/tests/sentry/models/test_group.py
index 10eff9a170..bc71b13005 100644
--- a/tests/sentry/models/test_group.py
+++ b/tests/sentry/models/test_group.py
@@ -126,10 +126,10 @@ class GroupTest(TestCase):
         assert group.first_release == release
 
     def test_save_truncate_message(self):
-        assert len(self.create_group(message='x' * 300).message) == 255
-        assert self.create_group(message='\nfoo\n   ').message == 'foo'
-        assert self.create_group(message='foo').message == 'foo'
-        assert self.create_group(message='').message == ''
+        assert len(self.create_group(search_message='x' * 300).search_message) == 255
+        assert self.create_group(search_message='\nfoo\n   ').search_message == 'foo'
+        assert self.create_group(search_message='foo').search_message == 'foo'
+        assert self.create_group(search_message='').search_message == ''
 
     def test_get_group_with_redirect(self):
         group = self.create_group()
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index c367fbdda6..a7e735ecca 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -163,7 +163,8 @@ class EventNodeStoreTest(TestCase):
         # Create an event with a new event body that specifies the node_id to use.
         e3 = Event(project_id=1, event_id='ghi', data={'baz': 'quux', 'node_id': '1:ghi'})
         assert e3.data.id == '1:ghi', "Event should have the specified node_id"
-        assert e3.data.data == {'baz': 'quux'}, "Event body should be the one provided (sans node_id)"
+        assert e3.data.data == {
+            'baz': 'quux'}, "Event body should be the one provided (sans node_id)"
         e3.save()
         e3_body = nodestore.get('1:ghi')
         assert e3_body == {'baz': 'quux'}, "Event body should be saved to nodestore"
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 032fa932bf..b384c5ebdf 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -47,8 +47,12 @@ class MailPluginTest(TestCase):
         assert not self.plugin.should_notify(group=Mock(), event=Mock())
 
     def test_simple_notification(self):
-        group = self.create_group(message='Hello world')
-        event = self.create_event(group=group, message='Hello world', tags={'level': 'error'})
+        group = self.create_group(search_message='Hello world')
+        event = self.create_event(
+            group=group,
+            search_message='Hello world',
+            tags={
+                'level': 'error'})
 
         rule = Rule.objects.create(project=self.project, label='my rule')
 
@@ -77,7 +81,7 @@ class MailPluginTest(TestCase):
         event = Event()
         event.group = group
         event.project = self.project
-        event.message = 'hello world'
+        event.search_message = 'hello world'
         event.interfaces = {'stacktrace': stacktrace}
 
         notification = Notification(event=event)
@@ -104,7 +108,7 @@ class MailPluginTest(TestCase):
         event = Event()
         event.group = group
         event.project = self.project
-        event.message = 'Soubor ji\xc5\xbe existuje'
+        event.search_message = 'Soubor ji\xc5\xbe existuje'
         event.interfaces = {'stacktrace': stacktrace}
 
         notification = Notification(event=event)
@@ -130,7 +134,7 @@ class MailPluginTest(TestCase):
             first_seen=timezone.now(),
             last_seen=timezone.now(),
             project=self.project,
-            message=event_manager.get_search_message(),
+            search_message=event_manager.get_search_message(),
             logger='root',
             short_id=2,
             data={
@@ -141,7 +145,7 @@ class MailPluginTest(TestCase):
 
         event = Event(
             group=group,
-            message=group.message,
+            search_message=group.search_message,
             project=self.project,
             datetime=group.last_seen,
             data=event_data
@@ -173,7 +177,7 @@ class MailPluginTest(TestCase):
             first_seen=timezone.now(),
             last_seen=timezone.now(),
             project=self.project,
-            message=event_manager.get_search_message(),
+            search_message=event_manager.get_search_message(),
             logger='root',
             short_id=2,
             data={
@@ -184,7 +188,7 @@ class MailPluginTest(TestCase):
 
         event = Event(
             group=group,
-            message=group.message,
+            search_message=group.search_message,
             project=self.project,
             datetime=group.last_seen,
             data=event_data,
@@ -252,8 +256,8 @@ class MailPluginTest(TestCase):
         assert user4.pk not in self.plugin.get_sendable_users(project)
 
     def test_notify_users_with_utf8_subject(self):
-        group = self.create_group(message='Hello world')
-        event = self.create_event(group=group, message=u'רונית מגן', tags={'level': 'error'})
+        group = self.create_group(search_message='Hello world')
+        event = self.create_event(group=group, search_message=u'רונית מגן', tags={'level': 'error'})
 
         notification = Notification(event=event)
 
@@ -531,7 +535,7 @@ class MailPluginOwnersTest(TestCase):
             first_seen=timezone.now(),
             last_seen=timezone.now(),
             project=self.project,
-            message='hello  world',
+            search_message='hello  world',
             logger='root',
         )
         ProjectOwnership.objects.create(
@@ -578,7 +582,7 @@ class MailPluginOwnersTest(TestCase):
     def test_get_send_to_with_team_owners(self):
         event = Event(
             group=self.group,
-            message=self.group.message,
+            search_message=self.group.search_message,
             project=self.project,
             datetime=self.group.last_seen,
             data=self.make_event_data('foo.py')
@@ -589,7 +593,7 @@ class MailPluginOwnersTest(TestCase):
     def test_get_send_to_with_user_owners(self):
         event = Event(
             group=self.group,
-            message=self.group.message,
+            search_message=self.group.search_message,
             project=self.project,
             datetime=self.group.last_seen,
             data=self.make_event_data('foo.cbl')
@@ -600,7 +604,7 @@ class MailPluginOwnersTest(TestCase):
     def test_get_send_to_with_user_owner(self):
         event = Event(
             group=self.group,
-            message=self.group.message,
+            search_message=self.group.search_message,
             project=self.project,
             datetime=self.group.last_seen,
             data=self.make_event_data('foo.jx')
@@ -611,7 +615,7 @@ class MailPluginOwnersTest(TestCase):
     def test_get_send_to_with_fallthrough(self):
         event = Event(
             group=self.group,
-            message=self.group.message,
+            search_message=self.group.search_message,
             project=self.project,
             datetime=self.group.last_seen,
             data=self.make_event_data('foo.jx')
@@ -623,7 +627,7 @@ class MailPluginOwnersTest(TestCase):
         ProjectOwnership.objects.get(project_id=self.project.id).update(fallthrough=False)
         event = Event(
             group=self.group,
-            message=self.group.message,
+            search_message=self.group.search_message,
             project=self.project,
             datetime=self.group.last_seen,
             data=self.make_event_data('foo.cpp')
@@ -633,7 +637,7 @@ class MailPluginOwnersTest(TestCase):
     def test_notify_users_with_owners(self):
         event_all_users = Event(
             group=self.group,
-            message=self.group.message,
+            search_message=self.group.search_message,
             project=self.project,
             datetime=self.group.last_seen,
             data=self.make_event_data('foo.cbl'),
@@ -642,7 +646,7 @@ class MailPluginOwnersTest(TestCase):
 
         event_team = Event(
             group=self.group,
-            message=self.group.message,
+            search_message=self.group.search_message,
             project=self.project,
             datetime=self.group.last_seen,
             data=self.make_event_data('foo.py'),
@@ -651,7 +655,7 @@ class MailPluginOwnersTest(TestCase):
 
         event_single_user = Event(
             group=self.group,
-            message=self.group.message,
+            search_message=self.group.search_message,
             project=self.project,
             datetime=self.group.last_seen,
             data=self.make_event_data('foo.jx'),
diff --git a/tests/sentry/plugins/sentry_webhooks/test_plugin.py b/tests/sentry/plugins/sentry_webhooks/test_plugin.py
index 3705d36bd8..062c8948d5 100644
--- a/tests/sentry/plugins/sentry_webhooks/test_plugin.py
+++ b/tests/sentry/plugins/sentry_webhooks/test_plugin.py
@@ -23,7 +23,7 @@ class WebHooksPluginTest(TestCase):
     @responses.activate
     def test_simple_notification(self):
         responses.add(responses.POST, 'http://example.com')
-        group = self.create_group(message='Hello world')
+        group = self.create_group(search_message='Hello world')
         event = self.create_event(
             group=group, message='Hello world', tags={'level': 'warning'}, id=24
         )
diff --git a/tests/sentry/receivers/test_featureadoption.py b/tests/sentry/receivers/test_featureadoption.py
index 8b8bd7ad2b..d35cf063a2 100644
--- a/tests/sentry/receivers/test_featureadoption.py
+++ b/tests/sentry/receivers/test_featureadoption.py
@@ -43,11 +43,11 @@ class FeatureAdoptionTest(TestCase):
 
     def test_all_passed_feature_slugs_are_complete(self):
         group1 = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
+            project=self.project, platform='javascript', search_message='javascript error message'
         )
         event1 = self.create_full_event()
         group2 = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
+            project=self.project, platform='javascript', search_message='javascript error message'
         )
         event2 = self.create_full_event(event_id='b')
         event_processed.send(
@@ -64,7 +64,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_first_event(self):
         group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
+            project=self.project, platform='javascript', search_message='javascript error message'
         )
         first_event_received.send(project=self.project, group=group, sender=type(self.project))
 
@@ -75,7 +75,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_javascript(self):
         group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
+            project=self.project, platform='javascript', search_message='javascript error message'
         )
         event = self.create_event()
         event_processed.send(
@@ -87,7 +87,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_python(self):
         group = self.create_group(
-            project=self.project, platform='python', message='python error message'
+            project=self.project, platform='python', search_message='python error message'
         )
         event = self.create_event()
         event_processed.send(
@@ -99,7 +99,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_node(self):
         group = self.create_group(
-            project=self.project, platform='node', message='node error message'
+            project=self.project, platform='node', search_message='node error message'
         )
         event = self.create_event()
         event_processed.send(
@@ -111,7 +111,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_ruby(self):
         group = self.create_group(
-            project=self.project, platform='ruby', message='ruby error message'
+            project=self.project, platform='ruby', search_message='ruby error message'
         )
         event = self.create_event()
         event_processed.send(
@@ -123,7 +123,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_java(self):
         group = self.create_group(
-            project=self.project, platform='java', message='java error message'
+            project=self.project, platform='java', search_message='java error message'
         )
         event = self.create_event()
         event_processed.send(
@@ -135,7 +135,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_cocoa(self):
         group = self.create_group(
-            project=self.project, platform='cocoa', message='cocoa error message'
+            project=self.project, platform='cocoa', search_message='cocoa error message'
         )
         event = self.create_event()
         event_processed.send(
@@ -147,7 +147,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_objc(self):
         group = self.create_group(
-            project=self.project, platform='objc', message='objc error message'
+            project=self.project, platform='objc', search_message='objc error message'
         )
         event = self.create_event()
         event_processed.send(
@@ -158,7 +158,10 @@ class FeatureAdoptionTest(TestCase):
         assert objc.complete
 
     def test_php(self):
-        group = self.create_group(project=self.project, platform='php', message='php error message')
+        group = self.create_group(
+            project=self.project,
+            platform='php',
+            search_message='php error message')
         event = self.create_event()
         event_processed.send(
             project=self.project, group=group, event=event, sender=type(self.project)
@@ -168,7 +171,10 @@ class FeatureAdoptionTest(TestCase):
         assert php.complete
 
     def test_go(self):
-        group = self.create_group(project=self.project, platform='go', message='go error message')
+        group = self.create_group(
+            project=self.project,
+            platform='go',
+            search_message='go error message')
         event = self.create_event()
         event_processed.send(
             project=self.project, group=group, event=event, sender=type(self.project)
@@ -179,7 +185,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_csharp(self):
         group = self.create_group(
-            project=self.project, platform='csharp', message='C# error message'
+            project=self.project, platform='csharp', search_message='C# error message'
         )
         event = self.create_event()
         event_processed.send(
@@ -190,7 +196,10 @@ class FeatureAdoptionTest(TestCase):
         assert csharp.complete
 
     def test_perl(self):
-        group = self.create_group(project=self.project, platform='perl', message='C# error message')
+        group = self.create_group(
+            project=self.project,
+            platform='perl',
+            search_message='C# error message')
         event = self.create_event()
         event_processed.send(
             project=self.project, group=group, event=event, sender=type(self.project)
@@ -201,7 +210,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_elixir(self):
         group = self.create_group(
-            project=self.project, platform='elixir', message='C# error message'
+            project=self.project, platform='elixir', search_message='C# error message'
         )
         event = self.create_event()
         event_processed.send(
@@ -212,7 +221,10 @@ class FeatureAdoptionTest(TestCase):
         assert elixir.complete
 
     def test_cfml(self):
-        group = self.create_group(project=self.project, platform='cfml', message='C# error message')
+        group = self.create_group(
+            project=self.project,
+            platform='cfml',
+            search_message='C# error message')
         event = self.create_event()
         event_processed.send(
             project=self.project, group=group, event=event, sender=type(self.project)
@@ -223,7 +235,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_groovy(self):
         group = self.create_group(
-            project=self.project, platform='groovy', message='C# error message'
+            project=self.project, platform='groovy', search_message='C# error message'
         )
         event = self.create_event()
         event_processed.send(
@@ -234,7 +246,10 @@ class FeatureAdoptionTest(TestCase):
         assert groovy.complete
 
     def test_csp(self):
-        group = self.create_group(project=self.project, platform='csp', message='C# error message')
+        group = self.create_group(
+            project=self.project,
+            platform='csp',
+            search_message='C# error message')
         event = self.create_event()
         event_processed.send(
             project=self.project, group=group, event=event, sender=type(self.project)
@@ -245,7 +260,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_release_tracking(self):
         group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
+            project=self.project, platform='javascript', search_message='javascript error message'
         )
         event = self.create_full_event()
         event_processed.send(
@@ -259,7 +274,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_environment_tracking(self):
         group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
+            project=self.project, platform='javascript', search_message='javascript error message'
         )
         event = self.create_full_event()
         event_processed.send(
@@ -273,7 +288,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_bulk_create(self):
         group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
+            project=self.project, platform='javascript', search_message='javascript error message'
         )
         event = self.create_full_event()
         event_processed.send(
@@ -302,7 +317,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_user_tracking(self):
         group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
+            project=self.project, platform='javascript', search_message='javascript error message'
         )
         event = self.create_full_event()
         event_processed.send(
@@ -401,7 +416,7 @@ class FeatureAdoptionTest(TestCase):
                 }
             }"""
         group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
+            project=self.project, platform='javascript', search_message='javascript error message'
         )
         userless_event = self.create_event(
             event_id='a', platform='javascript', data=json.loads(userless_payload)
@@ -501,7 +516,7 @@ class FeatureAdoptionTest(TestCase):
                 }
             }"""
         group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
+            project=self.project, platform='javascript', search_message='javascript error message'
         )
         envless_event = self.create_event(
             event_id='a', platform='javascript', data=json.loads(envless_payload)
@@ -517,7 +532,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_custom_tags(self):
         group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
+            project=self.project, platform='javascript', search_message='javascript error message'
         )
         event = self.create_full_event()
         event.data['tags'].append(('foo', 'bar'))
@@ -533,7 +548,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_source_maps(self):
         group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
+            project=self.project, platform='javascript', search_message='javascript error message'
         )
         event = self.create_full_event()
         event_processed.send(
@@ -547,7 +562,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_breadcrumbs(self):
         group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
+            project=self.project, platform='javascript', search_message='javascript error message'
         )
         event = self.create_full_event()
         event_processed.send(
@@ -561,7 +576,7 @@ class FeatureAdoptionTest(TestCase):
 
     def test_multiple_events(self):
         group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
+            project=self.project, platform='javascript', search_message='javascript error message'
         )
         simple_event = self.create_event()
         first_event_received.send(project=self.project, group=group, sender=type(self.project))
diff --git a/tests/sentry/receivers/test_onboarding.py b/tests/sentry/receivers/test_onboarding.py
index 205233135c..6cd6f3b402 100644
--- a/tests/sentry/receivers/test_onboarding.py
+++ b/tests/sentry/receivers/test_onboarding.py
@@ -136,7 +136,7 @@ class OrganizationOnboardingTaskTest(TestCase):
         project = self.create_project(first_event=now)
         project_created.send(project=project, user=self.user, sender=type(project))
         group = self.create_group(
-            project=project, platform='javascript', message='javascript error message'
+            project=project, platform='javascript', search_message='javascript error message'
         )
         first_event_received.send(project=project, group=group, sender=type(project))
 
@@ -159,7 +159,7 @@ class OrganizationOnboardingTaskTest(TestCase):
         assert second_task is not None
 
         second_group = self.create_group(
-            project=second_project, platform='python', message='python error message'
+            project=second_project, platform='python', search_message='python error message'
         )
         first_event_received.send(
             project=second_project, group=second_group, sender=type(second_project)
@@ -257,7 +257,7 @@ class OrganizationOnboardingTaskTest(TestCase):
         project = self.create_project(first_event=now)
         second_project = self.create_project(first_event=now)
         second_group = self.create_group(
-            project=second_project, platform='python', message='python error message'
+            project=second_project, platform='python', search_message='python error message'
         )
         event = self.create_full_event()
         member = self.create_member(organization=self.organization, teams=[self.team], user=user)
diff --git a/tests/sentry/receivers/test_sentry_apps.py b/tests/sentry/receivers/test_sentry_apps.py
index 8a89745a70..78730172ad 100644
--- a/tests/sentry/receivers/test_sentry_apps.py
+++ b/tests/sentry/receivers/test_sentry_apps.py
@@ -20,7 +20,7 @@ class TestIssueSaved(TestCase):
     def test_does_not_process_unless_created(self, delay):
         issue = self.create_group()
         delay.reset_mock()
-        issue.update(message='Stuff blew up')
+        issue.update(search_message='Stuff blew up')
         assert len(delay.mock_calls) == 0
 
 
diff --git a/tests/sentry/tasks/test_unmerge.py b/tests/sentry/tasks/test_unmerge.py
index cb06f647d1..f679e6d356 100644
--- a/tests/sentry/tasks/test_unmerge.py
+++ b/tests/sentry/tasks/test_unmerge.py
@@ -65,7 +65,7 @@ class UnmergeTestCase(TestCase):
         events = [
             Event(
                 platform='javascript',
-                message='Hello from JavaScript',
+                search_message='Hello from JavaScript',
                 datetime=now,
                 data={
                     'type': 'default',
@@ -78,7 +78,7 @@ class UnmergeTestCase(TestCase):
             ),
             Event(
                 platform='python',
-                message='Hello from Python',
+                search_message='Hello from Python',
                 datetime=now - timedelta(hours=1),
                 data={
                     'type': 'default',
@@ -91,7 +91,7 @@ class UnmergeTestCase(TestCase):
             ),
             Event(
                 platform='java',
-                message='Hello from Java',
+                search_message='Hello from Java',
                 datetime=now - timedelta(hours=2),
                 data={
                     'type': 'default',
@@ -112,7 +112,7 @@ class UnmergeTestCase(TestCase):
             'first_seen': now - timedelta(hours=2),
             'last_seen': now,
             'platform': 'java',
-            'message': 'Hello from JavaScript',
+            'search_message': 'Hello from JavaScript',
             'level': logging.INFO,
             'score': Group.calculate_score(3, now),
             'logger': 'java',
@@ -135,7 +135,7 @@ class UnmergeTestCase(TestCase):
                 first_seen=now,
                 last_seen=now,
                 platform='javascript',
-                message='Hello from JavaScript',
+                search_message='Hello from JavaScript',
                 level=logging.INFO,
                 score=Group.calculate_score(3, now),
                 logger='javascript',
@@ -151,7 +151,7 @@ class UnmergeTestCase(TestCase):
             [
                 Event(
                     platform='python',
-                    message='Hello from Python',
+                    search_message='Hello from Python',
                     datetime=now - timedelta(hours=1),
                     data={
                         'type': 'default',
@@ -164,7 +164,7 @@ class UnmergeTestCase(TestCase):
                 ),
                 Event(
                     platform='java',
-                    message='Hello from Java',
+                    search_message='Hello from Java',
                     datetime=now - timedelta(hours=2),
                     data={
                         'type': 'default',
@@ -238,7 +238,7 @@ class UnmergeTestCase(TestCase):
                 project_id=project.id,
                 group_id=source.id,
                 event_id=event_id,
-                message='%s' % (id, ),
+                search_message='%s' % (id, ),
                 datetime=now + shift(i),
                 data={
                     'environment': environment,
diff --git a/tests/sentry/test_canonical.py b/tests/sentry/test_canonical.py
index 2990fa0f14..499caf6865 100644
--- a/tests/sentry/test_canonical.py
+++ b/tests/sentry/test_canonical.py
@@ -230,3 +230,16 @@ class DoubleAliasingTests(TestCase):
         assert view['logentry'] == 'foo'
         assert view['sentry.interfaces.Message'] == 'foo'
         assert view['message'] == 'foo'
+
+    def test_legacy_message(self):
+        view = CanonicalKeyView({'message': 'bar', 'logentry': 'foo'})
+        assert len(view) == 1
+        assert view.keys() == ['logentry']
+
+        assert 'logentry' in view
+        assert 'sentry.interfaces.Message' in view
+        assert 'message' in view
+
+        assert view['logentry'] == 'foo'
+        assert view['sentry.interfaces.Message'] == 'foo'
+        assert view['message'] == 'foo'
diff --git a/tests/snuba/api/endpoints/test_organization_group_index.py b/tests/snuba/api/endpoints/test_organization_group_index.py
index 54ba6607f9..3f327e0a83 100644
--- a/tests/snuba/api/endpoints/test_organization_group_index.py
+++ b/tests/snuba/api/endpoints/test_organization_group_index.py
@@ -1828,7 +1828,7 @@ class GroupUpdateTest(APITestCase, SnubaTestCase):
         tombstone = GroupTombstone.objects.get(
             id=GroupHash.objects.get(id=group_hash.id).group_tombstone_id,
         )
-        assert tombstone.message == group1.message
+        assert tombstone.search_message == group1.search_message
         assert tombstone.culprit == group1.culprit
         assert tombstone.project == group1.project
         assert tombstone.data == group1.data
diff --git a/tests/snuba/search/test_backend.py b/tests/snuba/search/test_backend.py
index b46515ef5a..e90cd026f4 100644
--- a/tests/snuba/search/test_backend.py
+++ b/tests/snuba/search/test_backend.py
@@ -30,7 +30,7 @@ class SnubaSearchTest(SnubaTestCase):
         self.group1 = self.create_group(
             project=self.project,
             checksum='a' * 32,
-            message='foo',
+            search_message='foo',
             times_seen=5,
             status=GroupStatus.UNRESOLVED,
             last_seen=self.base_datetime,
@@ -40,7 +40,7 @@ class SnubaSearchTest(SnubaTestCase):
             event_id='a' * 32,
             group=self.group1,
             datetime=self.base_datetime - timedelta(days=31),
-            message='group1',
+            search_message='group1',
             stacktrace={
                 'frames': [{
                     'module': 'group1'
@@ -54,7 +54,7 @@ class SnubaSearchTest(SnubaTestCase):
             event_id='c' * 32,
             group=self.group1,
             datetime=self.base_datetime,
-            message='group1',
+            search_message='group1',
             stacktrace={
                 'frames': [{
                     'module': 'group1'
@@ -68,7 +68,7 @@ class SnubaSearchTest(SnubaTestCase):
         self.group2 = self.create_group(
             project=self.project,
             checksum='b' * 32,
-            message='bar',
+            search_message='bar',
             times_seen=10,
             status=GroupStatus.RESOLVED,
             last_seen=self.base_datetime - timedelta(days=30),
@@ -78,7 +78,7 @@ class SnubaSearchTest(SnubaTestCase):
             event_id='b' * 32,
             group=self.group2,
             datetime=self.base_datetime - timedelta(days=30),
-            message='group2',
+            search_message='group2',
             stacktrace={
                 'frames': [{
                     'module': 'group2'
@@ -121,7 +121,7 @@ class SnubaSearchTest(SnubaTestCase):
         self.group_p2 = self.create_group(
             project=self.project2,
             checksum='a' * 32,
-            message='foo',
+            search_message='foo',
             times_seen=6,
             status=GroupStatus.UNRESOLVED,
             last_seen=self.base_datetime - timedelta(days=1),
@@ -131,7 +131,7 @@ class SnubaSearchTest(SnubaTestCase):
             event_id='a' * 32,
             group=self.group_p2,
             datetime=self.base_datetime - timedelta(days=31),
-            message='group1',
+            search_message='group1',
             stacktrace={
                 'frames': [{
                     'module': 'group_p2'
@@ -246,7 +246,7 @@ class SnubaSearchTest(SnubaTestCase):
             self.create_event(
                 group=self.group2,
                 datetime=dt,
-                message='group2',
+                search_message='group2',
                 stacktrace={
                     'frames': [{
                         'module': 'group2'
@@ -457,7 +457,7 @@ class SnubaSearchTest(SnubaTestCase):
             self.create_event(
                 group=self.group2,
                 datetime=dt,
-                message='group2',
+                search_message='group2',
                 stacktrace={
                     'frames': [{
                         'module': 'group2'
@@ -549,7 +549,7 @@ class SnubaSearchTest(SnubaTestCase):
         self.create_event(
             group=self.group1,
             datetime=self.group1.first_seen + timedelta(days=1),
-            message='group1',
+            search_message='group1',
             stacktrace={
                 'frames': [{
                     'module': 'group1'
@@ -646,7 +646,7 @@ class SnubaSearchTest(SnubaTestCase):
         self.create_event(
             group=self.group1,
             datetime=self.group1.last_seen + timedelta(days=1),
-            message='group1',
+            search_message='group1',
             stacktrace={
                 'frames': [{
                     'module': 'group1'
@@ -1024,7 +1024,7 @@ class SnubaSearchTest(SnubaTestCase):
             group = self.create_group(
                 project=self.project,
                 checksum=md5('group {}'.format(i)).hexdigest(),
-                message='group {}'.format(i),
+                search_message='group {}'.format(i),
                 times_seen=5,
                 status=GroupStatus.UNRESOLVED if i % 3 == 0 else GroupStatus.RESOLVED,
                 last_seen=self.base_datetime,
@@ -1034,7 +1034,7 @@ class SnubaSearchTest(SnubaTestCase):
                 event_id=md5('event {}'.format(i)).hexdigest(),
                 group=group,
                 datetime=self.base_datetime - timedelta(days=31),
-                message='group {} event'.format(i),
+                search_message='group {} event'.format(i),
                 stacktrace={
                     'frames': [{
                         'module': 'module {}'.format(i)
