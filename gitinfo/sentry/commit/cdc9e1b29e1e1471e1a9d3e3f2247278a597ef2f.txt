commit cdc9e1b29e1e1471e1a9d3e3f2247278a597ef2f
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Fri Sep 13 16:33:39 2019 +0200

    feat: Return quota objects as part of project configs (#14650)
    
    * feat: Return quota objects as part of project configs
    
    * fix: Fix tests
    
    * fix: Apply prune_empty_keys

diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index 17765d4a70..f69038ca5c 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -13,6 +13,7 @@ from sentry.utils.html import escape
 from sentry.utils.imports import import_string
 from sentry.utils.safe import safe_execute
 from sentry.utils.decorators import classproperty
+from sentry.utils.json import prune_empty_keys
 
 
 logger = logging.getLogger("sentry.events")
@@ -57,23 +58,6 @@ def get_interfaces(data):
     )
 
 
-def prune_empty_keys(obj):
-    if obj is None:
-        return None
-
-    # eliminate None values for serialization to compress the keyspace
-    # and save (seriously) ridiculous amounts of bytes
-    #
-    # Do not coerce empty arrays/dicts or other "falsy" values here to None,
-    # but rather deal with them case-by-case before calling `prune_empty_keys`
-    # (e.g. in `Interface.to_json`). Rarely, but sometimes, there's a slight
-    # semantic difference between empty containers and a missing value. One
-    # example would be `event.logentry.formatted`, where `{}` means "this
-    # message has no params" and `None` means "this message is already
-    # formatted".
-    return dict((k, v) for k, v in six.iteritems(obj) if v is not None)
-
-
 class InterfaceValidationError(Exception):
     pass
 
diff --git a/src/sentry/interfaces/breadcrumbs.py b/src/sentry/interfaces/breadcrumbs.py
index c62e105147..4b334acf79 100644
--- a/src/sentry/interfaces/breadcrumbs.py
+++ b/src/sentry/interfaces/breadcrumbs.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 __all__ = ("Breadcrumbs",)
 
-from sentry.interfaces.base import Interface, prune_empty_keys
+from sentry.interfaces.base import Interface
+from sentry.utils.json import prune_empty_keys
 from sentry.utils.safe import get_path
 from sentry.utils.dates import to_timestamp, to_datetime, parse_timestamp
 
diff --git a/src/sentry/interfaces/contexts.py b/src/sentry/interfaces/contexts.py
index f0402edf6c..f710b5892d 100644
--- a/src/sentry/interfaces/contexts.py
+++ b/src/sentry/interfaces/contexts.py
@@ -5,7 +5,8 @@ import string
 
 from django.utils.encoding import force_text
 
-from sentry.interfaces.base import Interface, prune_empty_keys
+from sentry.interfaces.base import Interface
+from sentry.utils.json import prune_empty_keys
 from sentry.utils.safe import get_path, trim
 
 __all__ = ("Contexts",)
diff --git a/src/sentry/interfaces/debug_meta.py b/src/sentry/interfaces/debug_meta.py
index fc9b321762..9bc5ce2d0e 100644
--- a/src/sentry/interfaces/debug_meta.py
+++ b/src/sentry/interfaces/debug_meta.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 __all__ = ("DebugMeta",)
 
-from sentry.interfaces.base import Interface, prune_empty_keys
+from sentry.interfaces.base import Interface
+from sentry.utils.json import prune_empty_keys
 
 
 class DebugMeta(Interface):
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 878294d1eb..874079ec6f 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -7,7 +7,8 @@ import six
 
 from django.conf import settings
 
-from sentry.interfaces.base import Interface, prune_empty_keys
+from sentry.interfaces.base import Interface
+from sentry.utils.json import prune_empty_keys
 from sentry.interfaces.stacktrace import Stacktrace, slim_frame_data
 from sentry.utils.safe import get_path
 
diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index 60fd7482a4..a56df84c96 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -9,7 +9,8 @@ from django.utils.translation import ugettext as _
 from django.utils.http import urlencode
 from six.moves.urllib.parse import parse_qsl
 
-from sentry.interfaces.base import Interface, prune_empty_keys
+from sentry.interfaces.base import Interface
+from sentry.utils.json import prune_empty_keys
 from sentry.utils import json
 from sentry.utils.strings import to_unicode
 from sentry.utils.safe import get_path
diff --git a/src/sentry/interfaces/message.py b/src/sentry/interfaces/message.py
index dc898d0ac6..883550f5df 100644
--- a/src/sentry/interfaces/message.py
+++ b/src/sentry/interfaces/message.py
@@ -4,7 +4,8 @@ __all__ = ("Message",)
 
 import six
 
-from sentry.interfaces.base import Interface, prune_empty_keys
+from sentry.interfaces.base import Interface
+from sentry.utils.json import prune_empty_keys
 from sentry.utils import json
 
 
diff --git a/src/sentry/interfaces/sdk.py b/src/sentry/interfaces/sdk.py
index fa921e86ee..235616c082 100644
--- a/src/sentry/interfaces/sdk.py
+++ b/src/sentry/interfaces/sdk.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 __all__ = ("Sdk",)
 
-from sentry.interfaces.base import Interface, prune_empty_keys
+from sentry.interfaces.base import Interface
+from sentry.utils.json import prune_empty_keys
 
 
 class Sdk(Interface):
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 0a67bb1428..0e9b870ec9 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -8,7 +8,8 @@ from django.conf import settings
 from django.utils.translation import ugettext as _
 
 from sentry.app import env
-from sentry.interfaces.base import Interface, prune_empty_keys
+from sentry.interfaces.base import Interface
+from sentry.utils.json import prune_empty_keys
 from sentry.models import UserOption
 from sentry.web.helpers import render_to_string
 
diff --git a/src/sentry/interfaces/threads.py b/src/sentry/interfaces/threads.py
index 9d2d4a05b1..70a01d450f 100644
--- a/src/sentry/interfaces/threads.py
+++ b/src/sentry/interfaces/threads.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
-from sentry.interfaces.base import Interface, prune_empty_keys
+from sentry.interfaces.base import Interface
+from sentry.utils.json import prune_empty_keys
 from sentry.interfaces.stacktrace import Stacktrace
 from sentry.utils.safe import trim
 
diff --git a/src/sentry/interfaces/user.py b/src/sentry/interfaces/user.py
index 984d4569e7..981f0a3a04 100644
--- a/src/sentry/interfaces/user.py
+++ b/src/sentry/interfaces/user.py
@@ -3,7 +3,8 @@ from __future__ import absolute_import
 __all__ = ("User",)
 
 
-from sentry.interfaces.base import Interface, prune_empty_keys
+from sentry.interfaces.base import Interface
+from sentry.utils.json import prune_empty_keys
 from sentry.interfaces.geo import Geo
 from sentry.web.helpers import render_to_string
 
diff --git a/src/sentry/quotas/base.py b/src/sentry/quotas/base.py
index d00d60c65d..1845107629 100644
--- a/src/sentry/quotas/base.py
+++ b/src/sentry/quotas/base.py
@@ -73,6 +73,7 @@ class Quota(Service):
         "validate",
         "refund",
         "get_event_retention",
+        "get_quotas",
     )
 
     def __init__(self, **options):
@@ -168,3 +169,6 @@ class Quota(Service):
 
     def get_event_retention(self, organization):
         return _limit_from_settings(options.get("system.event-retention-days"))
+
+    def get_quotas(self, project, key=None):
+        return []
diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
index 82bccfedd7..c0740410ac 100644
--- a/src/sentry/quotas/redis.py
+++ b/src/sentry/quotas/redis.py
@@ -9,6 +9,7 @@ from sentry import options
 from sentry.exceptions import InvalidConfiguration
 from sentry.quotas.base import NotRateLimited, Quota, RateLimited
 from sentry.utils.redis import get_cluster_from_options, load_script, redis_clusters
+from sentry.utils.json import prune_empty_keys
 
 is_rate_limited = load_script("quotas/is_rate_limited.lua")
 
@@ -109,6 +110,17 @@ class BasicRedisQuota(object):
 
         return self.prefix is not None
 
+    def to_json(self):
+        return prune_empty_keys(
+            {
+                "prefix": self.prefix,
+                "subscope": self.subscope,
+                "limit": self.limit,
+                "window": self.window,
+                "reasonCode": self.reason_code,
+            }
+        )
+
 
 class RedisQuota(Quota):
     #: The ``grace`` period allows accomodating for clock drift in TTL
diff --git a/src/sentry/relay/config.py b/src/sentry/relay/config.py
index 9e1fbb7021..c9a60b9f3b 100644
--- a/src/sentry/relay/config.py
+++ b/src/sentry/relay/config.py
@@ -11,6 +11,7 @@ from sentry.coreapi import APIError
 from sentry.grouping.api import get_grouping_config_dict_for_project
 from sentry.interfaces.security import DEFAULT_DISALLOWED_SOURCES
 from sentry.message_filters import get_all_filters, get_filter_key
+from sentry import quotas
 
 from sentry.models.organization import Organization
 from sentry.models.organizationoption import OrganizationOption
@@ -56,9 +57,17 @@ def get_project_config(project_id, full_config=True, for_store=False):
     else:
         project_keys = ProjectKey.objects.filter(project=project).all()
 
-    public_keys = {}
+    public_keys = []
+
     for project_key in project_keys:
-        public_keys[project_key.public_key] = project_key.status == 0
+        key = {"publicKey": project_key.public_key, "isEnabled": project_key.status == 0}
+        if full_config:
+            key["numericId"] = project_key.id
+
+            key["quotas"] = [
+                quota.to_json() for quota in quotas.get_quotas(project, key=project_key)
+            ]
+        public_keys.append(key)
 
     now = datetime.utcnow().replace(tzinfo=utc)
 
diff --git a/src/sentry/utils/json.py b/src/sentry/utils/json.py
index 14cf086978..e7c1539b90 100644
--- a/src/sentry/utils/json.py
+++ b/src/sentry/utils/json.py
@@ -105,3 +105,20 @@ def loads(value, **kwargs):
 
 def dumps_htmlsafe(value):
     return mark_safe(_default_escaped_encoder.encode(value))
+
+
+def prune_empty_keys(obj):
+    if obj is None:
+        return None
+
+    # eliminate None values for serialization to compress the keyspace
+    # and save (seriously) ridiculous amounts of bytes
+    #
+    # Do not coerce empty arrays/dicts or other "falsy" values here to None,
+    # but rather deal with them case-by-case before calling `prune_empty_keys`
+    # (e.g. in `Interface.to_json`). Rarely, but sometimes, there's a slight
+    # semantic difference between empty containers and a missing value. One
+    # example would be `event.logentry.formatted`, where `{}` means "this
+    # message has no params" and `None` means "this message is already
+    # formatted".
+    return dict((k, v) for k, v in six.iteritems(obj) if v is not None)
diff --git a/tests/sentry/api/endpoints/test_relay_projectconfigs.py b/tests/sentry/api/endpoints/test_relay_projectconfigs.py
index 0c52bf1b01..bb9d9aff86 100644
--- a/tests/sentry/api/endpoints/test_relay_projectconfigs.py
+++ b/tests/sentry/api/endpoints/test_relay_projectconfigs.py
@@ -80,7 +80,12 @@ class RelayQueryGetProjectConfigTest(APITestCase):
 
         cfg = safe.get_path(result, "configs", six.text_type(self.project.id))
         assert safe.get_path(cfg, "disabled") is False
-        assert safe.get_path(cfg, "publicKeys", self.projectkey.public_key) is True
+
+        public_key, = cfg["publicKeys"]
+        assert public_key["publicKey"] == self.projectkey.public_key
+        assert public_key["isEnabled"]
+        assert "quotas" in public_key
+
         assert safe.get_path(cfg, "slug") == self.project.slug
         last_change = safe.get_path(cfg, "lastChange")
         assert self._date_regex.match(last_change) is not None
@@ -140,7 +145,11 @@ class RelayQueryGetProjectConfigTest(APITestCase):
 
         cfg = safe.get_path(result, "configs", six.text_type(self.project.id))
         assert safe.get_path(cfg, "disabled") is False
-        assert safe.get_path(cfg, "publicKeys", self.projectkey.public_key) is True
+        public_key, = cfg["publicKeys"]
+        assert public_key["publicKey"] == self.projectkey.public_key
+        assert public_key["isEnabled"]
+        assert "quotas" not in public_key
+
         assert safe.get_path(cfg, "slug") == self.project.slug
         last_change = safe.get_path(cfg, "lastChange")
         assert self._date_regex.match(last_change) is not None
