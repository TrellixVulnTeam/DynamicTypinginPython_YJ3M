commit 33b6e5cfe70e564ebc6c844e9f9a0489cbcc386b
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jul 16 14:42:58 2015 -0700

    Expand release details with functional all events tab

diff --git a/src/sentry/static/sentry/app/components/groupList.jsx b/src/sentry/static/sentry/app/components/groupList.jsx
new file mode 100644
index 0000000000..d29318de14
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/groupList.jsx
@@ -0,0 +1,169 @@
+var React = require("react");
+var Reflux = require("reflux");
+var Router = require("react-router");
+var jQuery = require("jquery");
+
+var api = require("../api");
+var GroupStore = require("../stores/groupStore");
+var LoadingError = require("../components/loadingError");
+var LoadingIndicator = require("../components/loadingIndicator");
+var ProjectState = require("../mixins/projectState");
+var PropTypes = require("../proptypes");
+var StreamGroup = require("../components/streamGroup");
+var TimeSince = require("../components/timeSince");
+var utils = require("../utils");
+
+var GroupList = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  propTypes: {
+    query: React.PropTypes.string.isRequired,
+    canSelectGroups: React.PropTypes.bool
+  },
+
+  mixins: [
+    ProjectState,
+    Reflux.listenTo(GroupStore, "onGroupChange"),
+  ],
+
+  crumbReservations: 1,
+
+  getDefaultProps() {
+    return {
+      canSelectGroups: true
+    };
+  },
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      groupIds: []
+    };
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return !utils.valueIsEqual(this.state, nextState, true);
+  },
+
+  componentWillMount() {
+    var params = this.context.router.getCurrentParams();
+
+    this._streamManager = new utils.StreamManager(GroupStore);
+    this._poller = new utils.CursorPoller({
+      success: this.onRealtimePoll,
+      endpoint: this.getGroupListEndpoint()
+    });
+    this._poller.enable();
+
+    this.fetchData();
+  },
+
+  routeDidChange() {
+    this._poller.disable();
+    this.fetchData();
+  },
+
+  componentWillUnmount() {
+    this._poller.disable();
+    GroupStore.loadInitialData([]);
+  },
+
+  componentDidUpdate(prevProps, prevState) {
+    if (prevState.realtimeActive !== this.state.realtimeActive) {
+      if (this.state.realtimeActive) {
+        this._poller.enable();
+      } else {
+        this._poller.disable();
+      }
+    }
+  },
+
+  fetchData() {
+    GroupStore.loadInitialData([]);
+
+    this.setState({
+      loading: true,
+      error: false
+    });
+
+    api.request(this.getGroupListEndpoint(), {
+      success: (data, _, jqXHR) => {
+        this._streamManager.push(data);
+
+        this.setState({
+          error: false,
+          loading: false,
+          pageLinks: jqXHR.getResponseHeader('Link')
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      },
+      complete: () => {
+        if (this.state.realtimeActive) {
+          this._poller.enable();
+        }
+      }
+    });
+  },
+
+  getGroupListEndpoint() {
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    var queryParams = router.getCurrentQuery();
+    queryParams.limit = 50;
+    queryParams.sort = 'new';
+    queryParams.query = this.props.query;
+    var querystring = jQuery.param(queryParams);
+
+    return '/projects/' + params.orgId + '/' + params.projectId + '/groups/?' + querystring;
+  },
+
+  onRealtimePoll(data, links) {
+    this._streamManager.unshift(data);
+    if (!utils.valueIsEqual(this.state.pageLinks, links, true)) {
+      this.setState({
+        pageLinks: links,
+      });
+    }
+  },
+
+  onGroupChange() {
+    var groupIds = this._streamManager.getAllItems().map((item) => item.id);
+    if (!utils.valueIsEqual(groupIds, this.state.groupIds)) {
+      this.setState({
+        groupIds: groupIds
+      });
+    }
+  },
+
+  render() {
+    if (this.state.loading)
+      return <LoadingIndicator />;
+    else if (this.state.error)
+      return <LoadingError onRetry={this.fetchData} />;
+    else if (this.state.groupIds.length === 0)
+      return (
+        <div className="box empty-stream">
+          <span className="icon icon-exclamation"></span>
+          <p>There don't seem to be an events fitting the query.</p>
+        </div>
+      );
+
+    return (
+      <ul className="group-list">
+        {this.state.groupIds.map((id) => {
+          return <StreamGroup key={id} id={id} canSelect={this.props.canSelectGroups} />;
+        })}
+      </ul>
+    );
+  }
+});
+
+module.exports = GroupList;
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index e27734ef01..2ec5692cb9 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -18,6 +18,7 @@ var ProjectDashboard = require("./views/projectDashboard");
 var ProjectDetails = require("./views/projectDetails");
 var ProjectReleases = require("./views/projectReleases");
 var PropTypes = require("./proptypes");
+var ReleaseAllEvents = require("./views/releaseAllEvents");
 var ReleaseDetails = require("./views/releaseDetails");
 var ReleaseNewEvents = require("./views/releaseNewEvents");
 var SharedGroupDetails = require("./views/sharedGroupDetails");
@@ -38,6 +39,7 @@ var routes = (
         <Route name="projectReleases" path="releases/" handler={ProjectReleases} />
         <Route name="releaseDetails" path="releases/:version/" handler={ReleaseDetails}>
           <DefaultRoute name="releaseNewEvents" handler={ReleaseNewEvents} />
+          <Route name="releaseAllEvents" path="all-events/" handler={ReleaseAllEvents} />
         </Route>
         <Route name="groupDetails" path="group/:groupId/" handler={GroupDetails}
                ignoreScrollBehavior>
diff --git a/src/sentry/static/sentry/app/views/releaseAllEvents.jsx b/src/sentry/static/sentry/app/views/releaseAllEvents.jsx
new file mode 100644
index 0000000000..6ad5a96b2a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releaseAllEvents.jsx
@@ -0,0 +1,22 @@
+var React = require("react");
+var Router = require("react-router");
+
+var GroupList = require("../components/groupList");
+var PropTypes = require("../proptypes");
+
+var ReleaseAllEvents = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func,
+    release: PropTypes.AnyModel
+  },
+
+  render() {
+    return (
+      <GroupList
+        query={'sentry:release:"' + this.context.release.version + '"'}
+        canSelectGroups={false} />
+    );
+  }
+});
+
+module.exports = ReleaseAllEvents;
diff --git a/src/sentry/static/sentry/app/views/releaseDetails.jsx b/src/sentry/static/sentry/app/views/releaseDetails.jsx
index 11ec038a3d..38102d40c3 100644
--- a/src/sentry/static/sentry/app/views/releaseDetails.jsx
+++ b/src/sentry/static/sentry/app/views/releaseDetails.jsx
@@ -4,6 +4,7 @@ var Router = require("react-router");
 
 var api = require("../api");
 var DocumentTitle = require("react-document-title");
+var ListLink = require("../components/listLink");
 var LoadingError = require("../components/loadingError");
 var LoadingIndicator = require("../components/loadingIndicator");
 var ProjectState = require("../mixins/projectState");
@@ -93,6 +94,7 @@ var ReleaseDetails = React.createClass({
       return <LoadingError onRetry={this.fetchData} />;
 
     var release = this.state.release;
+    var params = this.context.router.getCurrentParams();
 
     return (
       <DocumentTitle title={this.getTitle()}>
@@ -114,8 +116,8 @@ var ReleaseDetails = React.createClass({
               </div>
             </div>
             <ul className="nav nav-tabs">
-              <li className="active"><a>Caused by this release</a></li>
-              <li><a>Seen in this release</a></li>
+              <ListLink to="releaseNewEvents" params={params}>New Events</ListLink>
+              <ListLink to="releaseAllEvents" params={params}>All Events</ListLink>
             </ul>
           </div>
           <Router.RouteHandler />
diff --git a/src/sentry/static/sentry/app/views/releaseNewEvents.jsx b/src/sentry/static/sentry/app/views/releaseNewEvents.jsx
index 9202bcb1bb..0d5a4d3a39 100644
--- a/src/sentry/static/sentry/app/views/releaseNewEvents.jsx
+++ b/src/sentry/static/sentry/app/views/releaseNewEvents.jsx
@@ -1,17 +1,8 @@
 var React = require("react");
-var Reflux = require("reflux");
 var Router = require("react-router");
-var jQuery = require("jquery");
 
-var api = require("../api");
-var GroupStore = require("../stores/groupStore");
-var LoadingError = require("../components/loadingError");
-var LoadingIndicator = require("../components/loadingIndicator");
-var ProjectState = require("../mixins/projectState");
+var GroupList = require("../components/groupList");
 var PropTypes = require("../proptypes");
-var StreamGroup = require("../components/streamGroup");
-var TimeSince = require("../components/timeSince");
-var utils = require("../utils");
 
 var ReleaseNewEvents = React.createClass({
   contextTypes: {
@@ -19,141 +10,11 @@ var ReleaseNewEvents = React.createClass({
     release: PropTypes.AnyModel
   },
 
-  mixins: [
-    ProjectState,
-    Reflux.listenTo(GroupStore, "onGroupChange"),
-  ],
-
-  crumbReservations: 1,
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      groupIds: []
-    };
-  },
-
-  shouldComponentUpdate(nextProps, nextState) {
-    return !utils.valueIsEqual(this.state, nextState, true);
-  },
-
-  componentWillMount() {
-    var params = this.context.router.getCurrentParams();
-
-    this._streamManager = new utils.StreamManager(GroupStore);
-    this._poller = new utils.CursorPoller({
-      success: this.onRealtimePoll,
-      endpoint: this.getGroupListEndpoint()
-    });
-    this._poller.enable();
-
-    this.fetchData();
-  },
-
-  routeDidChange() {
-    this._poller.disable();
-    this.fetchData();
-  },
-
-  componentWillUnmount() {
-    this._poller.disable();
-    GroupStore.loadInitialData([]);
-  },
-
-  componentDidUpdate(prevProps, prevState) {
-    if (prevState.realtimeActive !== this.state.realtimeActive) {
-      if (this.state.realtimeActive) {
-        this._poller.enable();
-      } else {
-        this._poller.disable();
-      }
-    }
-  },
-
-  fetchData() {
-    GroupStore.loadInitialData([]);
-
-    this.setState({
-      loading: true,
-      error: false
-    });
-
-    api.request(this.getGroupListEndpoint(), {
-      success: (data, _, jqXHR) => {
-        this._streamManager.push(data);
-
-        this.setState({
-          error: false,
-          loading: false,
-          pageLinks: jqXHR.getResponseHeader('Link')
-        });
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false
-        });
-      },
-      complete: () => {
-        if (this.state.realtimeActive) {
-          this._poller.enable();
-        }
-      }
-    });
-  },
-
-  getGroupListEndpoint() {
-    var router = this.context.router;
-    var params = router.getCurrentParams();
-    var queryParams = router.getCurrentQuery();
-    queryParams.limit = 50;
-    queryParams.sort = 'new';
-    queryParams.query = 'first-release:' + this.context.release.version;
-    var querystring = jQuery.param(queryParams);
-
-    return '/projects/' + params.orgId + '/' + params.projectId + '/groups/?' + querystring;
-  },
-
-  onRealtimePoll(data, links) {
-    this._streamManager.unshift(data);
-    if (!utils.valueIsEqual(this.state.pageLinks, links, true)) {
-      this.setState({
-        pageLinks: links,
-      });
-    }
-  },
-
-  onGroupChange() {
-    var groupIds = this._streamManager.getAllItems().map((item) => item.id);
-    if (!utils.valueIsEqual(groupIds, this.state.groupIds)) {
-      this.setState({
-        groupIds: groupIds
-      });
-    }
-  },
-
   render() {
-    var release = this.context.release;
-
-    if (this.state.loading)
-      return <LoadingIndicator />;
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
-    else if (this.state.groupIds.length === 0)
-      return (
-        <div className="box empty-stream">
-          <span className="icon icon-exclamation"></span>
-          <p>There don't seem to be an events fitting the query.</p>
-        </div>
-      );
-
     return (
-      <ul className="group-list">
-        {this.state.groupIds.map((id) => {
-          return <StreamGroup key={id} id={id} canSelect={false} />;
-        })}
-      </ul>
+      <GroupList
+        query={'first-release:"' + this.context.release.version + '"'}
+        canSelectGroups={false} />
     );
   }
 });
