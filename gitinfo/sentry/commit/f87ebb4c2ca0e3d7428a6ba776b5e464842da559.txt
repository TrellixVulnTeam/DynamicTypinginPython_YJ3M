commit f87ebb4c2ca0e3d7428a6ba776b5e464842da559
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Fri Jul 10 12:31:18 2020 +0200

    Ref(image-loaded): Improve performance (#19744)

diff --git a/src/sentry/static/sentry/app/components/clippedBox.tsx b/src/sentry/static/sentry/app/components/clippedBox.tsx
index 98a2151ad5..a6bbbbbd0a 100644
--- a/src/sentry/static/sentry/app/components/clippedBox.tsx
+++ b/src/sentry/static/sentry/app/components/clippedBox.tsx
@@ -15,12 +15,15 @@ type DefaultProps = {
 type Props = {
   clipHeight: number;
   title?: string;
+  renderedHeight?: number;
+  onReveal?: () => void;
   className?: string;
 } & DefaultProps;
 
 type State = {
   isClipped: boolean;
   isRevealed: boolean;
+  renderedHeight?: number;
 };
 
 class ClippedBox extends React.PureComponent<Props, State> {
@@ -33,23 +36,24 @@ class ClippedBox extends React.PureComponent<Props, State> {
   state: State = {
     isClipped: !!this.props.defaultClipped,
     isRevealed: false, // True once user has clicked "Show More" button
+    renderedHeight: this.props.renderedHeight,
   };
 
   componentDidMount() {
     // eslint-disable-next-line react/no-find-dom-node
     const renderedHeight = (ReactDOM.findDOMNode(this) as HTMLElement).offsetHeight;
+    this.calcHeight(renderedHeight);
+  }
 
-    if (!this.state.isClipped && renderedHeight > this.props.clipHeight) {
-      /*eslint react/no-did-mount-set-state:0*/
-      // okay if this causes re-render; cannot determine until
-      // rendered first anyways
-      this.setState({
-        isClipped: true,
-      });
+  componentDidUpdate(_prevProps: Props, prevState: State) {
+    if (prevState.renderedHeight !== this.props.renderedHeight) {
+      this.setRenderedHeight();
+    }
+
+    if (prevState.renderedHeight !== this.state.renderedHeight) {
+      this.calcHeight(this.state.renderedHeight);
     }
-  }
 
-  componentDidUpdate() {
     if (this.state.isRevealed || !this.state.isClipped) {
       return;
     }
@@ -62,11 +66,38 @@ class ClippedBox extends React.PureComponent<Props, State> {
     }
   }
 
+  setRenderedHeight() {
+    this.setState({
+      renderedHeight: this.props.renderedHeight,
+    });
+  }
+
+  calcHeight(renderedHeight?: number) {
+    if (!renderedHeight) {
+      return;
+    }
+
+    if (!this.state.isClipped && renderedHeight > this.props.clipHeight) {
+      /*eslint react/no-did-mount-set-state:0*/
+      // okay if this causes re-render; cannot determine until
+      // rendered first anyways
+      this.setState({
+        isClipped: true,
+      });
+    }
+  }
+
   reveal = () => {
+    const {onReveal} = this.props;
+
     this.setState({
       isClipped: false,
       isRevealed: true,
     });
+
+    if (onReveal) {
+      onReveal();
+    }
   };
 
   handleClickReveal = (event: React.MouseEvent) => {
diff --git a/src/sentry/static/sentry/app/components/debugFileFeature.tsx b/src/sentry/static/sentry/app/components/debugFileFeature.tsx
index 18c336e971..dfe55d38ec 100644
--- a/src/sentry/static/sentry/app/components/debugFileFeature.tsx
+++ b/src/sentry/static/sentry/app/components/debugFileFeature.tsx
@@ -63,6 +63,10 @@ DebugFileFeature.propTypes = {
   feature: PropTypes.oneOf(Object.keys(FEATURE_TOOLTIPS)).isRequired,
 };
 
+DebugFileFeature.defaultProps = {
+  available: true,
+};
+
 const IconWrapper = styled('span')`
   margin-right: 1ex;
 `;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/debugMeta/index.tsx b/src/sentry/static/sentry/app/components/events/interfaces/debugMeta/index.tsx
index c8709e6f8f..ad48c2a8df 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/debugMeta/index.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/debugMeta/index.tsx
@@ -1,6 +1,13 @@
 import isNil from 'lodash/isNil';
 import React from 'react';
 import styled from '@emotion/styled';
+import {
+  List,
+  ListRowProps,
+  AutoSizer,
+  CellMeasurer,
+  CellMeasurerCache,
+} from 'react-virtualized';
 
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import space from 'app/styles/space';
@@ -23,6 +30,7 @@ import {getFileName} from './utils';
 
 const MIN_FILTER_LEN = 3;
 const DEFAULT_CLIP_HEIGHT = 560;
+const PANEL_MAX_HEIGHT = 600;
 
 type Image = React.ComponentProps<typeof DebugImage>['image'];
 
@@ -39,27 +47,83 @@ type Props = DefaultProps & {
 };
 
 type State = {
+  filter: string;
+  debugImages: Array<Image>;
+  filteredImages: Array<Image>;
   showUnused: boolean;
   showDetails: boolean;
-  filter: string;
+  clipHeight: number;
+  foundFrame?: Frame;
+  panelBodyHeight?: number;
 };
 
+const cache = new CellMeasurerCache({
+  fixedWidth: true,
+  defaultHeight: 81,
+});
+
 class DebugMeta extends React.PureComponent<Props, State> {
+  static defaultProps: DefaultProps = {
+    data: {images: []},
+  };
+
   state: State = {
+    filter: '',
+    debugImages: [],
+    filteredImages: [],
     showUnused: false,
     showDetails: false,
-    filter: '',
+    clipHeight: DEFAULT_CLIP_HEIGHT,
   };
 
   componentDidMount() {
     this.unsubscribeFromStore = DebugMetaStore.listen(this.onStoreChange);
+    cache.clearAll();
+    this.filterImages();
   }
+
+  componentDidUpdate(_prevProps: Props, prevState: State) {
+    if (
+      prevState.showUnused !== this.state.showUnused ||
+      prevState.filter !== this.state.filter
+    ) {
+      this.filterImages();
+    }
+
+    if (
+      prevState.foundFrame !== this.state.foundFrame ||
+      this.state.showDetails !== prevState.showDetails
+    ) {
+      this.updateGrid();
+    }
+
+    if (prevState.filteredImages.length === 0 && this.state.filteredImages.length > 0) {
+      this.getPanelBodyHeight();
+    }
+  }
+
   componentWillUnmount() {
-    this.unsubscribeFromStore();
+    if (this.unsubscribeFromStore) {
+      this.unsubscribeFromStore();
+    }
   }
 
   unsubscribeFromStore: any;
 
+  panelBodyRef = React.createRef<HTMLDivElement>();
+  listRef: List | null = null;
+
+  updateGrid() {
+    cache.clearAll();
+    this.listRef?.forceUpdateGrid();
+  }
+
+  getPanelBodyHeight() {
+    this.setState({
+      panelBodyHeight: this.panelBodyRef?.current?.offsetHeight,
+    });
+  }
+
   onStoreChange = (store: {filter: string}) => {
     this.setState({
       filter: store.filter,
@@ -109,23 +173,14 @@ class DebugMeta extends React.PureComponent<Props, State> {
     );
   }
 
-  handleChangeShowUnused = (event: React.ChangeEvent<HTMLInputElement>) => {
-    const showUnused = event.target.checked;
-    this.setState({showUnused});
-  };
-
-  handleShowUnused = () => {
-    this.setState({showUnused: true});
-  };
-
-  handleChangeShowDetails = (event: React.ChangeEvent<HTMLInputElement>) => {
-    const showDetails = event.target.checked;
-    this.setState({showDetails});
-  };
+  filterImages() {
+    const foundFrame = this.getFrame();
+    // skip null values indicating invalid debug images
+    const debugImages = this.getDebugImages();
+    const filteredImages = debugImages.filter(image => this.filterImage(image));
 
-  handleChangeFilter = (value = '') => {
-    DebugMetaActions.updateFilter(value);
-  };
+    this.setState({debugImages, filteredImages, foundFrame});
+  }
 
   isValidImage(image: Image) {
     // in particular proguard images do not have a code file, skip them
@@ -141,6 +196,18 @@ class DebugMeta extends React.PureComponent<Props, State> {
     return true;
   }
 
+  getFrame(): Frame | undefined {
+    const {
+      event: {entries},
+    } = this.props;
+
+    const frames: Array<Frame> | undefined = entries.find(
+      ({type}) => type === 'exception'
+    )?.data?.values?.[0]?.stacktrace?.frames;
+
+    return frames?.find(frame => frame.instructionAddr === this.state.filter);
+  }
+
   getDebugImages() {
     const {
       data: {images},
@@ -159,10 +226,10 @@ class DebugMeta extends React.PureComponent<Props, State> {
     return filtered;
   }
 
-  getNoImagesMessage(images: Array<Image>) {
-    const {filter, showUnused} = this.state;
+  getNoImagesMessage() {
+    const {filter, showUnused, debugImages} = this.state;
 
-    if (images.length === 0) {
+    if (debugImages.length === 0) {
       return t('No loaded images available.');
     }
 
@@ -186,6 +253,7 @@ class DebugMeta extends React.PureComponent<Props, State> {
           <Checkbox checked={showDetails} onChange={this.handleChangeShowDetails} />
           {t('details')}
         </Label>
+
         <Label>
           <Checkbox
             checked={showUnused || !!filter}
@@ -196,7 +264,8 @@ class DebugMeta extends React.PureComponent<Props, State> {
         </Label>
         <SearchInputWrapper>
           <StyledSearchBar
-            onSearch={this.handleChangeFilter}
+            onChange={this.handleChangeFilter}
+            query={filter}
             placeholder={t('Search images\u2026')}
           />
         </SearchInputWrapper>
@@ -204,19 +273,114 @@ class DebugMeta extends React.PureComponent<Props, State> {
     );
   }
 
-  render() {
-    // skip null values indicating invalid debug images
-    const images = this.getDebugImages();
+  renderRow = ({index, key, parent, style}: ListRowProps) => {
+    const {orgId, projectId} = this.props;
+    const {filteredImages, showDetails} = this.state;
+
+    return (
+      <CellMeasurer
+        cache={cache}
+        columnIndex={0}
+        key={key}
+        parent={parent}
+        rowIndex={index}
+      >
+        <DebugImage
+          style={style}
+          image={filteredImages[index]}
+          orgId={orgId}
+          projectId={projectId}
+          showDetails={showDetails}
+        />
+      </CellMeasurer>
+    );
+  };
 
-    const filteredImages = images.filter(image => this.filterImage(image));
+  getListHeight() {
+    const {showUnused, showDetails, panelBodyHeight} = this.state;
 
-    const frames: Array<Frame> | undefined = this.props.event.entries.find(
-      ({type}) => type === 'exception'
-    )?.data?.values?.[0]?.stacktrace?.frames;
+    if (
+      !panelBodyHeight ||
+      panelBodyHeight > PANEL_MAX_HEIGHT ||
+      showUnused ||
+      showDetails
+    ) {
+      return PANEL_MAX_HEIGHT;
+    }
+
+    return panelBodyHeight;
+  }
+
+  renderImageList() {
+    const {filteredImages, showDetails, panelBodyHeight, clipHeight} = this.state;
+    const {orgId, projectId} = this.props;
+
+    if (!panelBodyHeight) {
+      return filteredImages.map(filteredImage => (
+        <DebugImage
+          key={filteredImage.debug_id}
+          image={filteredImage}
+          orgId={orgId}
+          projectId={projectId}
+          showDetails={showDetails}
+        />
+      ));
+    }
+
+    return (
+      <AutoSizer disableHeight>
+        {({width}) => (
+          <StyledList
+            ref={(el: List | null) => {
+              this.listRef = el;
+            }}
+            deferredMeasurementCache={cache}
+            height={this.getListHeight()}
+            overscanRowCount={5}
+            rowCount={filteredImages.length}
+            rowHeight={cache.rowHeight}
+            rowRenderer={this.renderRow}
+            width={width}
+            isScrolling={false}
+            overflowHidden={panelBodyHeight > clipHeight}
+          />
+        )}
+      </AutoSizer>
+    );
+  }
+
+  handleOnReveal = () => {
+    const {panelBodyHeight} = this.state;
+
+    if (!panelBodyHeight) {
+      return;
+    }
+
+    this.setState({
+      clipHeight: panelBodyHeight,
+    });
+  };
+
+  handleChangeShowUnused = (event: React.ChangeEvent<HTMLInputElement>) => {
+    const showUnused = event.target.checked;
+    this.setState({showUnused});
+  };
+
+  handleShowUnused = () => {
+    this.setState({showUnused: true});
+  };
 
-    const foundFrame = frames
-      ? frames.find(frame => frame.instructionAddr === this.state.filter)
-      : undefined;
+  handleChangeShowDetails = (event: React.ChangeEvent<HTMLInputElement>) => {
+    const showDetails = event.target.checked;
+    this.setState({showDetails});
+  };
+
+  handleChangeFilter = (value = '') => {
+    DebugMetaActions.updateFilter(value);
+  };
+
+  render() {
+    const {filteredImages, foundFrame, panelBodyHeight, clipHeight} = this.state;
 
     return (
       <StyledEventDataSection
@@ -231,8 +395,12 @@ class DebugMeta extends React.PureComponent<Props, State> {
         isCentered
       >
         <DebugImagesPanel>
-          <ClippedBox clipHeight={DEFAULT_CLIP_HEIGHT}>
-            <PanelBody>
+          <ClippedBox
+            clipHeight={clipHeight}
+            renderedHeight={panelBodyHeight}
+            onReveal={this.handleOnReveal}
+          >
+            <PanelBody forwardRef={this.panelBodyRef}>
               {foundFrame && (
                 <ImageForBar
                   frame={foundFrame}
@@ -240,18 +408,10 @@ class DebugMeta extends React.PureComponent<Props, State> {
                 />
               )}
               {filteredImages.length > 0 ? (
-                filteredImages.map(image => (
-                  <DebugImage
-                    key={image.debug_id}
-                    image={image}
-                    orgId={this.props.orgId}
-                    projectId={this.props.projectId}
-                    showDetails={this.state.showDetails}
-                  />
-                ))
+                this.renderImageList()
               ) : (
                 <EmptyMessage icon={<IconWarning size="xl" />}>
-                  {this.getNoImagesMessage(images)}
+                  {this.getNoImagesMessage()}
                 </EmptyMessage>
               )}
             </PanelBody>
@@ -264,6 +424,12 @@ class DebugMeta extends React.PureComponent<Props, State> {
 
 export default DebugMeta;
 
+const StyledList = styled(List)<{overflowHidden: boolean; height: number}>`
+  ${p => p.overflowHidden && 'overflow: hidden !important;'}
+  height: auto !important;
+  max-height: ${p => p.height}px;
+`;
+
 const Label = styled('label')`
   font-weight: normal;
   margin-right: 1em;
@@ -286,7 +452,7 @@ const StyledEventDataSection = styled(EventDataSection)`
 
 const DebugImagesPanel = styled(Panel)`
   margin-bottom: ${space(1)};
-  max-height: 600px;
+  max-height: ${PANEL_MAX_HEIGHT}px;
   overflow-y: auto;
   overflow-x: hidden;
 `;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/packageLink.tsx b/src/sentry/static/sentry/app/components/events/interfaces/packageLink.tsx
index 373df0a4a2..dbfaa3740b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/packageLink.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/packageLink.tsx
@@ -44,7 +44,7 @@ class PackageLink extends React.Component<Props> {
           <span>{'<unknown>'}</span>
         )}
         {children}
-        {isClickable && <LinkChevron direction="right" size="sm" />}
+        {isClickable && <LinkChevron direction="right" size="xs" />}
       </Package>
     );
   }
@@ -52,9 +52,10 @@ class PackageLink extends React.Component<Props> {
 
 const LinkChevron = styled(IconChevron)`
   opacity: 0;
-  transform: translateX(${space(0.25)});
   transition: all 0.2s ease-in-out;
   vertical-align: top;
+  margin-left: ${space(0.5)};
+  flex-shrink: 0;
 `;
 
 const Package = styled('a')<Partial<Props>>`
@@ -65,12 +66,12 @@ const Package = styled('a')<Partial<Props>>`
   cursor: ${p => (p.isClickable ? 'pointer' : 'default')};
   ${PackageStatusIcon} {
     opacity: 0;
+    flex-shrink: 0;
   }
   &:hover {
     color: ${p => p.theme.gray700};
     ${LinkChevron} {
       opacity: 1;
-      transform: translateX(${space(0.5)});
     }
     ${PackageStatusIcon} {
       opacity: 1;
diff --git a/src/sentry/static/sentry/app/components/panels/panelBody.tsx b/src/sentry/static/sentry/app/components/panels/panelBody.tsx
index 2a1c4066e4..d5708e83c1 100644
--- a/src/sentry/static/sentry/app/components/panels/panelBody.tsx
+++ b/src/sentry/static/sentry/app/components/panels/panelBody.tsx
@@ -11,10 +11,19 @@ type FlexComponentProps = Omit<React.ComponentPropsWithoutRef<typeof Flex>, 'the
 type Props = FlexComponentProps & {
   flexible?: boolean;
   withPadding?: boolean;
+  forwardRef?: React.Ref<HTMLDivElement>;
 };
 
-const PanelBody: React.FunctionComponent<Props> = ({flexible, ...props}: Props) => (
-  <FlexBox {...props} {...(flexible ? {flexDirection: 'column'} : null)} />
+const PanelBody: React.FunctionComponent<Props> = ({
+  flexible,
+  forwardRef,
+  ...props
+}: Props) => (
+  <FlexBox
+    {...props}
+    ref={forwardRef}
+    {...(flexible ? {flexDirection: 'column'} : null)}
+  />
 );
 
 PanelBody.propTypes = {
