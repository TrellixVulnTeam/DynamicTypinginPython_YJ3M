commit 02d637717b3fb8b3950cea4bbed7a784eca5f3f7
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Mon Nov 18 17:18:32 2019 +0100

    fix(relay): Use camelCase everywhere (#15636)
    
    * ref(relay): Use camelCase consistently
    
    * ref: Make filter IDs camel case, as relay expects
    
    * fix: Set allowedDomains once
    
    * fix: Fix filter test
    
    * fix: Fix stray access to snake_case config
    
    * trigger bot

diff --git a/src/sentry/api/endpoints/relay_projectconfigs.py b/src/sentry/api/endpoints/relay_projectconfigs.py
index 26bdcf8f6d..5afa952f66 100644
--- a/src/sentry/api/endpoints/relay_projectconfigs.py
+++ b/src/sentry/api/endpoints/relay_projectconfigs.py
@@ -91,6 +91,6 @@ class RelayProjectConfigsEndpoint(Endpoint):
                         project_keys=project_keys.get(project.id, []),
                     )
 
-            configs[six.text_type(project_id)] = project_config.to_camel_case_dict()
+            configs[six.text_type(project_id)] = project_config.to_dict()
 
         return Response({"configs": configs}, status=200)
diff --git a/src/sentry/message_filters.py b/src/sentry/message_filters.py
index b7f0d6f697..2fb690ceb4 100644
--- a/src/sentry/message_filters.py
+++ b/src/sentry/message_filters.py
@@ -5,15 +5,16 @@ import collections
 from collections import namedtuple
 import re
 
-from sentry.models.projectoption import ProjectOption
-from sentry.utils.data_filters import FilterStatKeys
 from rest_framework import serializers
-from sentry.api.fields.multiplechoice import MultipleChoiceField
-
 from six.moves.urllib.parse import urlparse
-from sentry.utils.safe import get_path
 from ua_parser.user_agent_parser import Parse
+
+from sentry.api.fields.multiplechoice import MultipleChoiceField
+from sentry.models.projectoption import ProjectOption
 from sentry.signals import inbound_filter_toggled
+from sentry.utils.data_filters import FilterStatKeys, get_filter_key
+from sentry.utils.safe import get_path
+
 
 EventFilteredRet = namedtuple("EventFilteredRet", "should_filter reason")
 
@@ -170,7 +171,7 @@ def _get_filter_settings(project_config, flt):
     :param flt: the filter
     :return: the options for the filter
     """
-    filter_settings = project_config.config.get("filter_settings", {})
+    filter_settings = project_config.config.get("filterSettings", {})
     return filter_settings.get(get_filter_key(flt), None)
 
 
@@ -180,11 +181,7 @@ def _is_filter_enabled(project_config, flt):
     if filter_options is None:
         raise ValueError("unknown filter", flt.spec.id)
 
-    return filter_options["is_enabled"]
-
-
-def get_filter_key(flt):
-    return flt.spec.id.replace("-", "_")
+    return filter_options["isEnabled"]
 
 
 # ************* local host filter *************
diff --git a/src/sentry/relay/config.py b/src/sentry/relay/config.py
index d262989cc4..9108ef51f9 100644
--- a/src/sentry/relay/config.py
+++ b/src/sentry/relay/config.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 import six
 import uuid
-import sentry.utils as utils
 
 from sentry_sdk import Hub
 
@@ -11,13 +10,14 @@ from pytz import utc
 
 from sentry.grouping.api import get_grouping_config_dict_for_project
 from sentry.interfaces.security import DEFAULT_DISALLOWED_SOURCES
-from sentry.message_filters import get_all_filters, get_filter_key
-from sentry import quotas
+from sentry.message_filters import get_all_filters
+from sentry import quotas, utils
 
 from sentry.models.organizationoption import OrganizationOption
-from sentry.utils.data_filters import FilterTypes, FilterStatKeys
+from sentry.utils.data_filters import FilterTypes, FilterStatKeys, get_filter_key
 from sentry.utils.http import get_origins
 from sentry.utils.sdk import configure_scope
+from sentry.relay.utils import to_camel_case_name
 
 
 def get_project_key_config(project_key):
@@ -73,12 +73,12 @@ def get_project_config(project, org_options=None, full_config=True, project_keys
             "rev": project.get_option("sentry:relay-rev", uuid.uuid4().hex),
             "publicKeys": public_keys,
             "config": {
-                "allowedDomains": project.get_option("sentry:origins", ["*"]),
+                "allowedDomains": list(get_origins(project)),
                 "trustedRelays": org_options.get("sentry:trusted-relays", []),
                 "piiConfig": _get_pii_config(project),
                 "datascrubbingSettings": _get_datascrubbing_settings(project, org_options),
             },
-            "project_id": project.id,
+            "projectId": project.id,
         }
 
     if not full_config:
@@ -87,14 +87,14 @@ def get_project_config(project, org_options=None, full_config=True, project_keys
 
     # The organization id is only required for reporting when processing events
     # internally. Do not expose it to external Relays.
-    cfg["organization_id"] = project.organization_id
+    cfg["organizationId"] = project.organization_id
 
     project_cfg = cfg["config"]
 
     with Hub.current.start_span(op="get_filter_settings"):
         # get the filter settings for this project
         filter_settings = {}
-        project_cfg["filter_settings"] = filter_settings
+        project_cfg["filterSettings"] = filter_settings
 
         for flt in get_all_filters():
             filter_id = get_filter_key(flt)
@@ -103,34 +103,25 @@ def get_project_config(project, org_options=None, full_config=True, project_keys
 
         invalid_releases = project.get_option(u"sentry:{}".format(FilterTypes.RELEASES))
         if invalid_releases:
-            filter_settings[FilterTypes.RELEASES] = {"releases": invalid_releases}
+            filter_settings["releases"] = {"releases": invalid_releases}
 
         blacklisted_ips = project.get_option("sentry:blacklisted_ips")
         if blacklisted_ips:
-            filter_settings["client_ips"] = {"blacklisted_ips": blacklisted_ips}
+            filter_settings["clientIps"] = {"blacklistedIps": blacklisted_ips}
 
         error_messages = project.get_option(u"sentry:{}".format(FilterTypes.ERROR_MESSAGES))
         if error_messages:
-            filter_settings[FilterTypes.ERROR_MESSAGES] = {"patterns": error_messages}
+            filter_settings["errorMessages"] = {"patterns": error_messages}
 
         csp_disallowed_sources = []
         if bool(project.get_option("sentry:csp_ignored_sources_defaults", True)):
             csp_disallowed_sources += DEFAULT_DISALLOWED_SOURCES
         csp_disallowed_sources += project.get_option("sentry:csp_ignored_sources", [])
         if csp_disallowed_sources:
-            filter_settings["csp"] = {"disallowed_sources": csp_disallowed_sources}
-
-    scrub_ip_address = org_options.get(
-        "sentry:require_scrub_ip_address", False
-    ) or project.get_option("sentry:scrub_ip_address", False)
-
-    project_cfg["scrub_ip_addresses"] = scrub_ip_address
+            filter_settings["csp"] = {"disallowedSources": csp_disallowed_sources}
 
     with Hub.current.start_span(op="get_grouping_config_dict_for_project"):
-        project_cfg["grouping_config"] = get_grouping_config_dict_for_project(project)
-
-    with Hub.current.start_span(op="get_origins"):
-        project_cfg["allowed_domains"] = list(get_origins(project))
+        project_cfg["groupingConfig"] = get_grouping_config_dict_for_project(project)
 
     return ProjectConfig(project, **cfg)
 
@@ -165,13 +156,12 @@ class _ConfigBase(object):
 
     def __getattr__(self, name):
         data = self.__get_data()
-        return data.get(name)
+        return data.get(to_camel_case_name(name))
 
     def to_dict(self):
         """
         Converts the config object into a dictionary
 
-        :param to_camel_case: should the dictionary keys be converted to camelCase from snake_case
         :return: A dictionary containing the object properties, with config properties also converted in dictionaries
 
         >>> x = _ConfigBase( a= 1, b="The b", c= _ConfigBase(x=33, y = _ConfigBase(m=3.14159 , w=[1,2,3], z={'t':1})))
@@ -184,9 +174,6 @@ class _ConfigBase(object):
             for (key, value) in six.iteritems(data)
         }
 
-    def to_camel_case_dict(self):
-        return _to_camel_case_dict(self.to_dict())
-
     def to_json_string(self):
         """
         >>> x = _ConfigBase( a = _ConfigBase(b = _ConfigBase( w=[1,2,3])))
@@ -196,7 +183,6 @@ class _ConfigBase(object):
         :return:
         """
         data = self.to_dict()
-        data = _to_camel_case_dict(data)
         return utils.json.dumps(data)
 
     def get_at_path(self, *args):
@@ -294,80 +280,6 @@ def _get_datascrubbing_settings(project, org_options):
     return rv
 
 
-def _to_camel_case_name(name):
-    """
-    Converts a string from snake_case to camelCase
-
-    :param name: the string to convert
-    :return: the name converted to camelCase
-
-    >>> _to_camel_case_name(22)
-    22
-    >>> _to_camel_case_name("hello_world")
-    'helloWorld'
-    >>> _to_camel_case_name("_hello_world")
-    'helloWorld'
-    >>> _to_camel_case_name("__hello___world___")
-    'helloWorld'
-    >>> _to_camel_case_name("hello")
-    'hello'
-    >>> _to_camel_case_name("Hello_world")
-    'helloWorld'
-    >>> _to_camel_case_name("one_two_three_four")
-    'oneTwoThreeFour'
-    >>> _to_camel_case_name("oneTwoThreeFour")
-    'oneTwoThreeFour'
-    """
-
-    def first_lower(s):
-        return s[:1].lower() + s[1:]
-
-    def first_upper(s):
-        return s[:1].upper() + s[1:]
-
-    if not isinstance(name, six.string_types):
-        return name
-    else:
-        name = name.strip("_")
-        pieces = name.split("_")
-        return first_lower(pieces[0]) + "".join(first_upper(x) for x in pieces[1:])
-
-
-def _to_camel_case_dict(obj):
-    """
-    Converts recursively the keys of a dictionary from snake_case to camelCase
-
-    This is intended for converting dictionaries that use the python convention to
-    dictionaries that use the javascript/JSON convention
-
-    NOTE: this function will, by default,  mutate the dictionary in place.
-    If you do not want to change the input use clone=True
-
-    :param obj: the dictionary
-
-    :return: a dictionary with the string keys converted
-
-    >>> _to_camel_case_dict({'_abc': {'_one_two_three': 1}})
-    {'abc': {'oneTwoThree': 1}}
-    >>> val = {'_abc': {'_one_two_three': 1}}
-    >>> _to_camel_case_dict({'_abc': {'_one_two_three': 1}})
-    {'abc': {'oneTwoThree': 1}}
-
-    # check that we didn't affect the original
-    >>> val
-    {'_abc': {'_one_two_three': 1}}
-
-    """
-
-    if not isinstance(obj, dict):
-        raise ValueError("Bad parameter passed expected dictionary got {}".format(repr(type(obj))))
-
-    return {
-        _to_camel_case_name(key): _to_camel_case_dict(value) if isinstance(value, dict) else value
-        for (key, value) in six.iteritems(obj)
-    }
-
-
 def _load_filter_settings(flt, project):
     """
     Returns the filter settings for the specified project
@@ -403,7 +315,7 @@ def _filter_option_to_config_setting(flt, setting):
 
     is_enabled = setting != "0"
 
-    ret_val = {"is_enabled": is_enabled}
+    ret_val = {"isEnabled": is_enabled}
 
     # special case for legacy browser.
     # If the number of special cases increases we'll have to factor this functionality somewhere
diff --git a/src/sentry/relay/utils.py b/src/sentry/relay/utils.py
index 0373826c23..518d27fbe1 100644
--- a/src/sentry/relay/utils.py
+++ b/src/sentry/relay/utils.py
@@ -21,3 +21,42 @@ def get_header_relay_signature(request):
 def type_to_class_name(snake_str):
     components = snake_str.split("_")
     return "".join(x.title() for x in components[0:])
+
+
+def to_camel_case_name(name):
+    """
+    Converts a string from snake_case to camelCase
+
+    :param name: the string to convert
+    :return: the name converted to camelCase
+
+    >>> to_camel_case_name(22)
+    22
+    >>> to_camel_case_name("hello_world")
+    'helloWorld'
+    >>> to_camel_case_name("_hello_world")
+    'helloWorld'
+    >>> to_camel_case_name("__hello___world___")
+    'helloWorld'
+    >>> to_camel_case_name("hello")
+    'hello'
+    >>> to_camel_case_name("Hello_world")
+    'helloWorld'
+    >>> to_camel_case_name("one_two_three_four")
+    'oneTwoThreeFour'
+    >>> to_camel_case_name("oneTwoThreeFour")
+    'oneTwoThreeFour'
+    """
+
+    def first_lower(s):
+        return s[:1].lower() + s[1:]
+
+    def first_upper(s):
+        return s[:1].upper() + s[1:]
+
+    if not isinstance(name, six.string_types):
+        return name
+    else:
+        name = name.strip("_")
+        pieces = name.split("_")
+        return first_lower(pieces[0]) + "".join(first_upper(x) for x in pieces[1:])
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 5ec4472487..c5e6a5bfbe 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -231,7 +231,7 @@ class BaseTestCase(Fixtures, Exam):
     def _makePostMessage(self, data):
         return base64.b64encode(self._makeMessage(data))
 
-    def _postWithHeader(self, data, key=None, secret=None, protocol=None):
+    def _postWithHeader(self, data, key=None, secret=None, protocol=None, **extra):
         if key is None:
             key = self.projectkey.public_key
             secret = self.projectkey.secret_key
@@ -243,6 +243,7 @@ class BaseTestCase(Fixtures, Exam):
                 message,
                 content_type="application/octet-stream",
                 HTTP_X_SENTRY_AUTH=get_auth_header("_postWithHeader/0.0.0", key, secret, protocol),
+                **extra
             )
         return resp
 
diff --git a/src/sentry/utils/data_filters.py b/src/sentry/utils/data_filters.py
index 66a3479b2c..d4c42c67fd 100644
--- a/src/sentry/utils/data_filters.py
+++ b/src/sentry/utils/data_filters.py
@@ -8,6 +8,7 @@ from django.utils.encoding import force_text
 
 from sentry import tsdb
 from sentry.utils.safe import get_path
+from sentry.relay.utils import to_camel_case_name
 
 
 class FilterStatKeys(object):
@@ -52,7 +53,7 @@ def is_valid_ip(project_config, ip_address):
     Verify that an IP address is not being blacklisted
     for the given project.
     """
-    blacklist = get_path(project_config.config, "filter_settings", "client_ips", "blacklisted_ips")
+    blacklist = get_path(project_config.config, "filterSettings", "clientIps", "blacklistedIps")
     if not blacklist:
         return True
 
@@ -80,9 +81,7 @@ def is_valid_release(project_config, release):
     Verify that a release is not being filtered
     for the given project.
     """
-    invalid_versions = get_path(
-        project_config.config, "filter_settings", FilterTypes.RELEASES, "releases"
-    )
+    invalid_versions = get_path(project_config.config, "filterSettings", "releases", "releases")
 
     if not invalid_versions:
         return True
@@ -101,9 +100,7 @@ def is_valid_error_message(project_config, message):
     Verify that an error message is not being filtered
     for the given project.
     """
-    filtered_errors = get_path(
-        project_config.config, "filter_settings", FilterTypes.ERROR_MESSAGES, "patterns"
-    )
+    filtered_errors = get_path(project_config.config["filterSettings"], "errorMessages", "patterns")
 
     if not filtered_errors:
         return True
@@ -120,3 +117,7 @@ def is_valid_error_message(project_config, message):
             pass
 
     return True
+
+
+def get_filter_key(flt):
+    return to_camel_case_name(flt.spec.id.replace("-", "_"))
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 4d8c4aa4cb..b331f5d450 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -490,7 +490,7 @@ class APIView(BaseView):
 
         project = project_config.project
         config = project_config.config
-        allowed = config.get("allowed_domains")
+        allowed = config.get("allowedDomains")
 
         if origin is not None:
             if not is_valid_origin(origin, allowed=allowed):
diff --git a/tests/sentry/api/endpoints/test_relay_projectconfigs.py b/tests/sentry/api/endpoints/test_relay_projectconfigs.py
index bb9d9aff86..bcb22b17fb 100644
--- a/tests/sentry/api/endpoints/test_relay_projectconfigs.py
+++ b/tests/sentry/api/endpoints/test_relay_projectconfigs.py
@@ -15,6 +15,14 @@ from sentry.testutils import APITestCase
 from semaphore.auth import generate_key_pair
 
 
+def _get_all_keys(config):
+    for key in config:
+        yield key
+        if isinstance(config[key], dict):
+            for key in _get_all_keys(config[key]):
+                yield key
+
+
 class RelayQueryGetProjectConfigTest(APITestCase):
     _date_regex = re.compile(r"\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z$")
 
@@ -68,6 +76,10 @@ class RelayQueryGetProjectConfigTest(APITestCase):
 
         assert status_code < 400
 
+        # Sweeping assertion that we do not have any snake_case in that config.
+        # Might need refining.
+        assert not set(x for x in _get_all_keys(result) if "-" in x or "_" in x)
+
         cfg = safe.get_path(result, "configs", six.text_type(self.project.id))
         assert safe.get_path(cfg, "config", "filterSettings") is None
         assert safe.get_path(cfg, "config", "groupingConfig") is None
@@ -78,6 +90,10 @@ class RelayQueryGetProjectConfigTest(APITestCase):
 
         assert status_code < 400
 
+        # Sweeping assertion that we do not have any snake_case in that config.
+        # Might need refining.
+        assert not set(x for x in _get_all_keys(result) if "-" in x or "_" in x)
+
         cfg = safe.get_path(result, "configs", six.text_type(self.project.id))
         assert safe.get_path(cfg, "disabled") is False
 
diff --git a/tests/sentry/filters/test_legacy_browsers.py b/tests/sentry/filters/test_legacy_browsers.py
index b6f24ef67d..5d510624a4 100644
--- a/tests/sentry/filters/test_legacy_browsers.py
+++ b/tests/sentry/filters/test_legacy_browsers.py
@@ -232,7 +232,7 @@ class LegacyBrowsersFilterTest(TestCase):
         ret_val = ProjectConfig(self.project, config={})
         config = ret_val.config
         filter_settings = {}
-        config["filter_settings"] = filter_settings
+        config["filterSettings"] = filter_settings
         if filter_opt is not None:
             key = get_filter_key(_legacy_browsers_filter)
             filter_settings[key] = _filter_option_to_config_setting(
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 02f037c117..1621b004dc 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -351,7 +351,17 @@ class StoreViewTest(TestCase):
         resp = self._postWithHeader(body)
         assert resp.status_code == 403, (resp.status_code, resp.content)
 
-    def test_request_with_beggining_glob(self):
+    @mock.patch("sentry.relay.config.get_origins")
+    def test_request_with_bad_origin(self, get_origins):
+        get_origins.return_value = ["foo.com"]
+
+        body = {"logentry": {"formatted": "hello world"}}
+
+        resp = self._postWithHeader(body, HTTP_ORIGIN="lolnope.com")
+        assert resp.status_code == 403, (resp.status_code, resp.content)
+        assert "Invalid origin" in resp.content
+
+    def test_request_with_beginning_glob(self):
         self.project.update_option(
             u"sentry:{}".format(FilterTypes.ERROR_MESSAGES),
             ["*: integer division or modulo by zero"],
