commit 013a509dc1ad4cfd8aaa24eb5bef0ccd27e8a894
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Feb 25 11:46:27 2020 -0800

    ref(ts): Convert `actionCreators/members` to typescript (#17274)
    
    This also fixes/masks an issue where members is undefined.

diff --git a/src/sentry/static/sentry/app/actionCreators/members.jsx b/src/sentry/static/sentry/app/actionCreators/members.jsx
deleted file mode 100644
index 11cddd125a..0000000000
--- a/src/sentry/static/sentry/app/actionCreators/members.jsx
+++ /dev/null
@@ -1,86 +0,0 @@
-import MemberActions from 'app/actions/memberActions';
-import MemberListStore from 'app/stores/memberListStore';
-
-function getMemberUser(member) {
-  const user = member.user;
-  user.role = member.role;
-  return user;
-}
-
-export function fetchOrgMembers(api, orgId, projectIds = null) {
-  const endpoint = `/organizations/${orgId}/users/`;
-  const query = projectIds ? {project: projectIds} : null;
-
-  const promise = api.requestPromise(endpoint, {method: 'GET', query});
-  return promise.then(members => {
-    members = members.filter(m => m.user);
-
-    // Update the store with just the users, as avatars rely on them.
-    MemberListStore.loadInitialData(members.map(getMemberUser));
-
-    return members;
-  });
-}
-
-/**
- * Convert a list of members with user & project data
- * into a object that maps project slugs : users in that project.
- */
-export function indexMembersByProject(members) {
-  return members.reduce((acc, member) => {
-    for (const project of member.projects) {
-      if (!acc.hasOwnProperty(project)) {
-        acc[project] = [];
-      }
-      acc[project].push(member.user);
-    }
-    return acc;
-  }, {});
-}
-
-export function updateMember(api, params) {
-  MemberActions.update(params.memberId, params.data);
-
-  const endpoint = `/organizations/${params.orgId}/members/${params.memberId}/`;
-  return new Promise((resolve, reject) =>
-    api.request(endpoint, {
-      method: 'PUT',
-      data: params.data,
-      success: data => {
-        MemberActions.updateSuccess(data);
-        resolve(data);
-      },
-      error: data => {
-        MemberActions.updateError(data);
-        reject(data);
-      },
-    })
-  );
-}
-
-export function resendMemberInvite(api, params) {
-  MemberActions.resendMemberInvite(params.orgId, params.data);
-
-  const endpoint = `/organizations/${params.orgId}/members/${params.memberId}/`;
-  return new Promise((resolve, reject) =>
-    api.request(endpoint, {
-      method: 'PUT',
-      data: {
-        regenerate: params.regenerate,
-        reinvite: true,
-      },
-      success: data => {
-        MemberActions.resendMemberInviteSuccess(data);
-        resolve(data);
-      },
-      error: data => {
-        MemberActions.resendMemberInviteError(data);
-        reject(data);
-      },
-    })
-  );
-}
-
-export function getCurrentMember(api, orgId) {
-  return api.requestPromise(`/organizations/${orgId}/members/me/`);
-}
diff --git a/src/sentry/static/sentry/app/actionCreators/members.tsx b/src/sentry/static/sentry/app/actionCreators/members.tsx
new file mode 100644
index 0000000000..77ab363e1d
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/members.tsx
@@ -0,0 +1,136 @@
+import * as Sentry from '@sentry/browser';
+
+import {Client} from 'app/api';
+import {Member} from 'app/types';
+import MemberActions from 'app/actions/memberActions';
+import MemberListStore from 'app/stores/memberListStore';
+
+function getMemberUser(member: Member) {
+  return {
+    ...member.user,
+    role: member.role,
+  };
+}
+
+export async function fetchOrgMembers(
+  api: Client,
+  orgId: string,
+  projectIds: number[] | null = null
+) {
+  const endpoint = `/organizations/${orgId}/users/`;
+  const query = projectIds ? {project: projectIds} : {};
+
+  try {
+    const members = await api.requestPromise(endpoint, {method: 'GET', query});
+
+    if (!members) {
+      // This shouldn't happen if the request was successful
+      // It should at least be an empty list
+      Sentry.withScope(scope => {
+        scope.setExtras({
+          orgId,
+          projectIds,
+        });
+        Sentry.captureException(new Error('Members is undefined'));
+      });
+    }
+
+    const memberUsers = members?.filter(({user}: Member) => user);
+
+    if (!memberUsers) {
+      return [];
+    }
+
+    // Update the store with just the users, as avatars rely on them.
+    MemberListStore.loadInitialData(memberUsers.map(getMemberUser));
+
+    return members;
+  } catch (err) {
+    Sentry.setExtras({
+      resp: err,
+    });
+    Sentry.captureException(err);
+  }
+
+  return [];
+}
+
+type IndexedMembersByProject = {
+  [key: string]: Member['user'][];
+};
+
+/**
+ * Convert a list of members with user & project data
+ * into a object that maps project slugs : users in that project.
+ */
+export function indexMembersByProject(members: Member[]): IndexedMembersByProject {
+  return members.reduce((acc, member) => {
+    for (const project of member.projects) {
+      if (!acc.hasOwnProperty(project)) {
+        acc[project] = [];
+      }
+      acc[project].push(member.user);
+    }
+    return acc;
+  }, {});
+}
+
+type UpdateMemberOptions = {
+  orgId: string;
+  memberId: string;
+  data: Member | null;
+};
+
+export async function updateMember(
+  api: Client,
+  {orgId, memberId, data}: UpdateMemberOptions
+) {
+  MemberActions.update(memberId, data);
+
+  const endpoint = `/organizations/${orgId}/members/${memberId}/`;
+  try {
+    const resp = await api.requestPromise(endpoint, {
+      method: 'PUT',
+      data,
+    });
+    MemberActions.updateSuccess(resp);
+    return resp;
+  } catch (err) {
+    MemberActions.updateError(err);
+    throw err;
+  }
+}
+
+type ResendMemberInviteOptions = {
+  orgId: string;
+  memberId: string;
+  regenerate?: boolean;
+  data?: object;
+};
+
+export async function resendMemberInvite(
+  api: Client,
+  {orgId, memberId, regenerate, data}: ResendMemberInviteOptions
+) {
+  MemberActions.resendMemberInvite(orgId, data);
+
+  const endpoint = `/organizations/${orgId}/members/${memberId}/`;
+  try {
+    const resp = await api.requestPromise(endpoint, {
+      method: 'PUT',
+      data: {
+        regenerate,
+        reinvite: true,
+      },
+    });
+    MemberActions.resendMemberInviteSuccess(resp);
+    return resp;
+  } catch (err) {
+    MemberActions.resendMemberInviteError(err);
+    throw err;
+  }
+}
+
+export function getCurrentMember(api: Client, orgId: string) {
+  return api.requestPromise(`/organizations/${orgId}/members/me/`);
+}
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 0b4f40513c..7352072152 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -438,6 +438,9 @@ export type Group = {
   userReportCount: number;
 };
 
+/**
+ * Returned from /organizations/org/users/
+ */
 export type Member = {
   dateCreated: string;
   email: string;
@@ -453,9 +456,10 @@ export type Member = {
   isOnlyOwner: boolean;
   name: string;
   pending: boolean | undefined;
+  projects: string[];
   role: string;
   roleName: string;
-  roles: MemberRole[];
+  roles: MemberRole[]; // TODO(ts): This is not present from API call
   teams: string[];
   user: User;
 };
