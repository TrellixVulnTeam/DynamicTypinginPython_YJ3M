commit b2d0b1cbfcf9408ba0ee95a726c886002186a118
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 4 21:48:37 2012 -0800

    Adjust permissions on public projects and add a bunch of very basic web view tests

diff --git a/runtests.py b/runtests.py
index 5496a169d2..1f3bf6feeb 100644
--- a/runtests.py
+++ b/runtests.py
@@ -33,6 +33,7 @@ if not settings.configured:
             # Included to fix Disqus' test Django which solves IntegrityMessage case
             'django.contrib.contenttypes',
 
+            'djkombu',
             'south',
 
             'sentry',
diff --git a/sentry/templates/sentry/partial/_event.html b/sentry/templates/sentry/partial/_event.html
index 7ef0181d5a..89e3706468 100644
--- a/sentry/templates/sentry/partial/_event.html
+++ b/sentry/templates/sentry/partial/_event.html
@@ -1,7 +1,7 @@
 {% load sentry_helpers %}
 
 <li class="{% cycle 'row1' 'row2' %} level-{{ event.level }}{% if priority %} priority-{{ priority }}{% endif %}" id="message_{{ event.pk|safe }}">
-    <h3><a href="{% url sentry-group-event event.project_id group.pk event.pk %}">{% if event.view %}{{ event.view }}{% else %}{{ event.message_top|truncatechars:100 }}{% endif %}</a></h3>
+    <h3><a href="{% url sentry-group-event event.project_id event.group_id event.pk %}">{% if event.view %}{{ event.view }}{% else %}{{ event.message_top|truncatechars:100 }}{% endif %}</a></h3>
     <span class="last_seen">{{ event.datetime|timesince }}</span>
     {% if event.time_spent %}
         <span class="time_spent">{{ event.time_spent|duration }}</span>
@@ -18,6 +18,6 @@
         {% for tag in event|get_tags:request %}<span class="tag">{{ tag }}</span> {% endfor %}
         {{ event.error }}
     </p>
-    <a href="{% url sentry-group-event event.project_id group.pk event.pk %}" class="row_link"></a>
+    <a href="{% url sentry-group-event event.project_id event.group_id event.pk %}" class="row_link"></a>
 </li>
 
diff --git a/sentry/web/frontend/events.py b/sentry/web/frontend/events.py
index 0afdd57bf6..e3a8ef83da 100644
--- a/sentry/web/frontend/events.py
+++ b/sentry/web/frontend/events.py
@@ -2,6 +2,8 @@ import datetime
 import urllib
 
 from django.core.context_processors import csrf
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
 
 from sentry.conf import settings
@@ -54,11 +56,16 @@ def event_list(request, project):
 @login_required
 @csrf_protect
 def replay_event(request, project_id, event_id):
-    event = Event.objects.get(pk=event_id)
+    try:
+        event = Event.objects.get(pk=event_id)
+    except Event.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry'))
+
     interfaces = event.interfaces
     if 'sentry.interfaces.Http' not in interfaces:
         # TODO: show a proper error
-        raise ValueError
+        return HttpResponseRedirect(reverse('sentry'))
+
     http = interfaces['sentry.interfaces.Http']
     if http.headers:
         headers = '\n'.join('%s: %s' % (k, v) for k, v in http.headers.iteritems() if k[0].upper() == k[0])
diff --git a/sentry/web/helpers.py b/sentry/web/helpers.py
index e97ac3fe12..bf83905d96 100644
--- a/sentry/web/helpers.py
+++ b/sentry/web/helpers.py
@@ -27,11 +27,15 @@ def get_project_list(user=None, access=None, hidden=False):
     if access is None:
         access = MEMBER_USER
 
-    # First we fetch public projects
-    qs = Project.objects.filter(public=True)
-    if not hidden:
-        qs = qs.filter(status=0)
-    projects = dict((p.pk, p) for p in qs)
+    # If we're not requesting specific access include all
+    # public projects
+    if access <= MEMBER_USER:
+        qs = Project.objects.filter(public=True)
+        if not hidden:
+            qs = qs.filter(status=0)
+        projects = dict((p.pk, p) for p in qs)
+    else:
+        projects = dict()
 
     # If the user is authenticated, include their memberships
     if user and user.is_authenticated():
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
index f1751104ba..b8a6e18fdc 100644
--- a/sentry/web/urls.py
+++ b/sentry/web/urls.py
@@ -84,7 +84,7 @@ urlpatterns = patterns('',
     url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/events/(?P<event_id>\d+)$', groups.group_event_details, name='sentry-group-event'),
     url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)', groups.group_plugin_action, name='sentry-group-plugin-action'),
 
-    url(r'^(?P<project_id>\d+)/events$', events.event_list, name='sentry'),
+    url(r'^(?P<project_id>\d+)/events$', events.event_list, name='sentry-events'),
     url(r'^(?P<project_id>\d+)/events/(?P<event_id>\d+)/replay$', events.replay_event, name='sentry-replay'),
 
     url(r'^(?P<project_id>\d+)/search$', groups.search, name='sentry-search'),
diff --git a/tests/web/tests.py b/tests/web/tests.py
index d8fbbb0542..487e644633 100644
--- a/tests/web/tests.py
+++ b/tests/web/tests.py
@@ -93,6 +93,125 @@ class SentryViewsTest(TestCase):
         group = Group.objects.get(pk=2)
         self.assertEquals(resp.context['group'], group)
 
+    # TODO: improve upon these tests
+    def test_group_json(self):
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(reverse('sentry-group-json', kwargs={'project_id': 1, 'group_id': 2}))
+        self.assertEquals(resp.status_code, 200)
+        self.assertEquals(resp['Content-Type'], 'application/json')
+
+    def test_status(self):
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(reverse('sentry-status'), follow=True)
+        self.assertEquals(resp.status_code, 200)
+        self.assertTemplateUsed(resp, 'sentry/status.html')
+
+    def test_event_list(self):
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(reverse('sentry-events', kwargs={'project_id': 1}))
+        self.assertEquals(resp.status_code, 200)
+        self.assertTemplateUsed(resp, 'sentry/events/event_list.html')
+
+    def test_replay_event(self):
+        # bad event_id
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(reverse('sentry-replay', kwargs={'project_id': 1, 'event_id': 1}))
+        self.assertEquals(resp.status_code, 302)
+
+        # valid params
+        # self.client.login(username='admin', password='admin')
+        # resp = self.client.get(reverse('sentry-replay', kwargs={'project_id': 1, 'event_id': 4}))
+        # self.assertEquals(resp.status_code, 200)
+        # self.assertTemplateUsed(resp, 'sentry/events/replay.html')
+
+    def test_project_list(self):
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(reverse('sentry-project-list'))
+        self.assertEquals(resp.status_code, 200)
+        self.assertTemplateUsed(resp, 'sentry/projects/list.html')
+
+    def test_new_project(self):
+        path = reverse('sentry-new-project')
+
+        # unauthenticated
+        resp = self.client.get(path)
+        self.assertEquals(resp.status_code, 302)
+
+        # superuser
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(path)
+        self.assertEquals(resp.status_code, 200)
+        self.assertTemplateUsed(resp, 'sentry/projects/new.html')
+
+    def test_manage_project(self):
+        path = reverse('sentry-manage-project', kwargs={'project_id': 1})
+
+        # unauthenticated
+        resp = self.client.get(path)
+        self.assertEquals(resp.status_code, 302)
+
+        # superuser
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(path)
+        self.assertEquals(resp.status_code, 200)
+        self.assertTemplateUsed(resp, 'sentry/projects/manage.html')
+
+    def test_remove_project(self):
+        path = reverse('sentry-remove-project', kwargs={'project_id': 1})
+
+        # unauthenticated
+        resp = self.client.get(path)
+        self.assertEquals(resp.status_code, 302)
+
+        # superuser
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(path)
+        self.assertEquals(resp.status_code, 200)
+        self.assertTemplateUsed(resp, 'sentry/projects/remove.html')
+
+    def test_new_project_member(self):
+        path = reverse('sentry-new-project-member', kwargs={'project_id': 1})
+
+        # unauthenticated
+        resp = self.client.get(path)
+        self.assertEquals(resp.status_code, 302)
+
+        # superuser
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(path)
+        self.assertEquals(resp.status_code, 200)
+        self.assertTemplateUsed(resp, 'sentry/projects/members/new.html')
+
+    def test_edit_project_member(self):
+        ProjectMember.objects.create(project_id=1, user_id=1)
+
+        path = reverse('sentry-edit-project-member', kwargs={'project_id': 1, 'member_id': 1})
+
+        # unauthenticated
+        resp = self.client.get(path)
+        self.assertEquals(resp.status_code, 302)
+
+        # superuser
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(path)
+        self.assertEquals(resp.status_code, 200, resp.content)
+        self.assertTemplateUsed(resp, 'sentry/projects/members/edit.html')
+
+    def test_remove_project_member(self):
+        ProjectMember.objects.create(project_id=1, user_id=1)
+
+        path = reverse('sentry-remove-project-member', kwargs={'project_id': 1, 'member_id': 1})
+
+        # unauthenticated
+        resp = self.client.get(path)
+        self.assertEquals(resp.status_code, 302, resp.content)
+
+        # superuser
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(path)
+        self.assertEquals(resp.status_code, 200, resp.content)
+        self.assertTemplateUsed(resp, 'sentry/projects/members/remove.html')
+
 
 class SentryFeedsTest(TestCase):
     fixtures = ['tests/fixtures/feeds.json']
