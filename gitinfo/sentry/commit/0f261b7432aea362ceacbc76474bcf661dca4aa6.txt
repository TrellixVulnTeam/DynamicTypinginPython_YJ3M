commit 0f261b7432aea362ceacbc76474bcf661dca4aa6
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Thu May 31 16:53:12 2018 -0700

    feat(integrations): Add link external issue UI (#8589)

diff --git a/src/sentry/api/endpoints/group_integration_details.py b/src/sentry/api/endpoints/group_integration_details.py
index c29d868f69..9d0cc1469b 100644
--- a/src/sentry/api/endpoints/group_integration_details.py
+++ b/src/sentry/api/endpoints/group_integration_details.py
@@ -90,7 +90,7 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
                     relationship=GroupLink.Relationship.references,
                 )
         except IntegrityError:
-            return Response({'detail': 'That issue is already linked'}, status=400)
+            return Response({'non_field_errors': ['That issue is already linked']}, status=400)
 
         # TODO(jess): would be helpful to return serialized external issue
         # once we have description, title, etc
@@ -116,7 +116,7 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
         try:
             data = installation.create_issue(request.DATA)
         except IntegrationError as exc:
-            return Response({'detail': exc.message}, status=400)
+            return Response({'non_field_errors': exc.message}, status=400)
 
         external_issue = ExternalIssue.objects.get_or_create(
             organization_id=organization_id,
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index c2159031e8..92c46c8fe2 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -968,7 +968,7 @@ urlpatterns = patterns(
         name='sentry-api-0-group-integrations'
     ),
     url(
-        r'^(?:issues|groups)/(?P<issue_id>\d+)/integrations/(?P<integration_id>[^\/]+)/$',
+        r'^(?:issues|groups)/(?P<issue_id>\d+)/integrations/(?P<integration_id>\d+)/$',
         GroupIntegrationDetailsEndpoint.as_view(),
         name='sentry-api-0-group-integration-details'
     ),
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index a41d9ca8a3..d0c9cb0783 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -101,7 +101,7 @@ class JiraIntegration(Integration, IssueSyncMixin):
         )
         for field in fields:
             if field['name'] == 'externalIssue':
-                field['autocompleteUrl'] = autocomplete_url
+                field['url'] = autocomplete_url
         return fields
 
     def get_client(self):
diff --git a/src/sentry/static/sentry/app/components/group/externalIssues.jsx b/src/sentry/static/sentry/app/components/group/externalIssues.jsx
new file mode 100644
index 0000000000..ca1d87f401
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/group/externalIssues.jsx
@@ -0,0 +1,145 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Modal from 'react-bootstrap/lib/Modal';
+
+import {addSuccessMessage} from 'app/actionCreators/indicator';
+import AsyncComponent from 'app/components/asyncComponent';
+import DropdownLink from 'app/components/dropdownLink';
+import FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';
+import Form from 'app/views/settings/components/forms/form';
+import MenuItem from 'app/components/menuItem';
+import {t, tct} from 'app/locale';
+
+const MESSAGES_BY_ACTION = {
+  link: t('Successfully linked issue.'),
+  create: t('Successfully created issue.'),
+};
+
+class ExternalIssueForm extends AsyncComponent {
+  static propTypes = {
+    group: PropTypes.object.isRequired,
+    integration: PropTypes.object.isRequired,
+    action: PropTypes.oneOf(['link', 'create']),
+    onSubmitSuccess: PropTypes.func.isRequired,
+  };
+
+  getEndpoints() {
+    let {action, group, integration} = this.props;
+    return [
+      [
+        'integrationDetails',
+        `/groups/${group.id}/integrations/${integration.id}/?action=${action}`,
+      ],
+    ];
+  }
+
+  onSubmitSuccess = () => {
+    addSuccessMessage(MESSAGES_BY_ACTION[this.props.action]);
+    this.props.onSubmitSuccess();
+  };
+
+  renderBody() {
+    let {integrationDetails} = this.state;
+    let {action, group, integration} = this.props;
+    return (
+      <Form
+        apiEndpoint={`/groups/${group.id}/integrations/${integration.id}/`}
+        apiMethod={action === 'create' ? 'POST' : 'PUT'}
+        onSubmitSuccess={this.onSubmitSuccess}
+      >
+        {integrationDetails[`${action}IssueConfig`].map(field => {
+          return <FieldFromConfig key={field.name} field={field} />;
+        })}
+      </Form>
+    );
+  }
+}
+
+class ExternalIssueActionList extends AsyncComponent {
+  static propTypes = {
+    group: PropTypes.object.isRequired,
+  };
+
+  constructor(props, context) {
+    super(props, context);
+    this.state.showModal = false;
+    this.state.selectedIntegration = null;
+  }
+
+  getEndpoints() {
+    let {group} = this.props;
+    return [['integrations', `/groups/${group.id}/integrations/`]];
+  }
+
+  openModal = integration => {
+    this.setState({
+      showModal: true,
+      selectedIntegration: integration,
+    });
+  };
+
+  closeModal = () => {
+    this.setState({
+      showModal: false,
+      selectedIntegration: null,
+    });
+  };
+
+  renderBody() {
+    let {selectedIntegration} = this.state;
+    return (
+      <React.Fragment>
+        {this.state.integrations.map(integration => {
+          return (
+            <MenuItem key={integration.id} noAnchor={true}>
+              <a onClick={this.openModal.bind(this, integration)}>
+                {tct('Link [provider] issue', {provider: integration.provider.name})}
+              </a>
+            </MenuItem>
+          );
+        })}
+        {selectedIntegration && (
+          <Modal
+            show={this.state.showModal}
+            onHide={this.closeModal}
+            animation={false}
+            backdrop="static"
+            enforceFocus={false}
+          >
+            <Modal.Header closeButton>
+              <Modal.Title>{`${selectedIntegration.provider.name} Issue`}</Modal.Title>
+            </Modal.Header>
+            <Modal.Body>
+              <ExternalIssueForm
+                group={this.props.group}
+                integration={selectedIntegration}
+                action="link"
+                onSubmitSuccess={this.closeModal}
+              />
+            </Modal.Body>
+          </Modal>
+        )}
+      </React.Fragment>
+    );
+  }
+}
+
+class ExternalIssueActions extends React.Component {
+  static propTypes = {
+    group: PropTypes.object.isRequired,
+  };
+
+  render() {
+    return (
+      <DropdownLink
+        title={t('External Issues')}
+        caret={true}
+        className="btn btn-default btn-sm"
+      >
+        <ExternalIssueActionList group={this.props.group} />
+      </DropdownLink>
+    );
+  }
+}
+
+export default ExternalIssueActions;
diff --git a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
index 397877e3da..1470869aaa 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
@@ -9,6 +9,8 @@ import ApiMixin from 'app/mixins/apiMixin';
 import DropdownLink from 'app/components/dropdownLink';
 import GroupActions from 'app/actions/groupActions';
 import GroupState from 'app/mixins/groupState';
+import ErrorBoundary from 'app/components/errorBoundary';
+import ExternalIssueActions from 'app/components/group/externalIssues';
 import HookStore from 'app/stores/hookStore';
 import IndicatorStore from 'app/stores/indicatorStore';
 import IssuePluginActions from 'app/components/group/issuePluginActions';
@@ -309,6 +311,11 @@ const GroupDetailsActions = createReactClass({
             </a>
           </GuideAnchor>
         )}
+        {orgFeatures.has('internal-catchall') && (
+          <ErrorBoundary mini>
+            <ExternalIssueActions group={group} />
+          </ErrorBoundary>
+        )}
       </div>
     );
   },
diff --git a/tests/sentry/api/endpoints/test_group_integration_details.py b/tests/sentry/api/endpoints/test_group_integration_details.py
index 9080145f16..d68c5f7322 100644
--- a/tests/sentry/api/endpoints/test_group_integration_details.py
+++ b/tests/sentry/api/endpoints/test_group_integration_details.py
@@ -126,7 +126,7 @@ class GroupIntegrationDetailsTest(APITestCase):
 
         response = self.client.post(path, data={})
         assert response.status_code == 400
-        assert response.data['detail'] == 'Assignee is required'
+        assert response.data['non_field_errors'] == 'Assignee is required'
 
         response = self.client.post(path, data={'assignee': 'foo@sentry.io'})
         assert response.status_code == 201
diff --git a/tests/sentry/integrations/jira/test_integration.py b/tests/sentry/integrations/jira/test_integration.py
index 873287893f..06e32bd5fd 100644
--- a/tests/sentry/integrations/jira/test_integration.py
+++ b/tests/sentry/integrations/jira/test_integration.py
@@ -373,7 +373,7 @@ class JiraIntegrationTest(APITestCase):
                 'label': 'Issue',
                 'default': '',
                 'type': 'string',
-                'autocompleteUrl': reverse(
+                'url': reverse(
                     'sentry-extensions-jira-search', args=[org.slug, integration.id],
                 )
             }
