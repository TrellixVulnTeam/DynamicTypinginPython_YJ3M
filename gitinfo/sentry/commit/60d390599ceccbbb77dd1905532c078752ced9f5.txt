commit 60d390599ceccbbb77dd1905532c078752ced9f5
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Wed Oct 31 16:03:46 2018 -0700

    feat(api): Add search syntax error handling to organization events

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index 76ff4b98b9..4b8cd58c9d 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -7,7 +7,7 @@ from rest_framework.response import Response
 
 from sentry import roles
 from sentry.api.bases import OrganizationEndpoint
-from sentry.api.event_search import get_snuba_query_args
+from sentry.api.event_search import get_snuba_query_args, InvalidSearchQuery
 from sentry.api.paginator import GenericOffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.event import SnubaEvent
@@ -67,17 +67,22 @@ class OrganizationEventsEndpoint(OrganizationEndpoint):
         except ValueError:
             return Response({'detail': 'Invalid project ids'}, status=400)
 
+        try:
+            snuba_args = get_snuba_query_args(query=request.GET.get('query'), params={
+                'start': start,
+                'end': end,
+                'project_id': project_ids,
+            })
+        except InvalidSearchQuery as exc:
+            return Response({'detail': exc.message}, status=400)
+
         data_fn = partial(
             # extract 'data' from raw_query result
             lambda *args, **kwargs: raw_query(*args, **kwargs)['data'],
             selected_columns=SnubaEvent.selected_columns,
             orderby='-timestamp',
             referrer='api.organization-events',
-            **get_snuba_query_args(query=request.GET.get('query'), params={
-                'start': start,
-                'end': end,
-                'project_id': project_ids,
-            })
+            **snuba_args
         )
 
         return self.paginate(
diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 448a653620..26b1fdbcc2 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -1,6 +1,8 @@
 from __future__ import absolute_import
 
 from collections import namedtuple
+
+from parsimonious.exceptions import ParseError
 from parsimonious.grammar import Grammar, NodeVisitor
 
 from sentry.search.utils import parse_datetime_string, InvalidQuery
@@ -173,7 +175,12 @@ def get_snuba_query_args(query=None, params=None):
     # NOTE: this function assumes project permisions check already happened
     parsed_filters = []
     if query is not None:
-        parsed_filters = parse_search_query(query)
+        try:
+            parsed_filters = parse_search_query(query)
+        except ParseError as e:
+            raise InvalidSearchQuery(
+                u'Parse error: %r (column %d)' % (e.expr.name, e.column())
+            )
 
     # Keys included as url params take precedent if same key is included in search
     if params is not None:
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index e64407497f..331c23f26e 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -116,6 +116,29 @@ class OrganizationEventsTest(APITestCase, SnubaTestCase):
         assert response.data[0]['eventID'] == event_2.event_id
         assert response.data[0]['message'] == 'Delet the Data'
 
+    def test_invalid_search_terms(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        group = self.create_group(project=project)
+        self.create_event('x' * 32, group=group, message="how to make fast", datetime=self.min_ago)
+
+        url = reverse(
+            'sentry-api-0-organization-events',
+            kwargs={
+                'organization_slug': project.organization.slug,
+            }
+        )
+        response = self.client.get(url, {'query': 'fruit:banana'}, format='json')
+
+        assert response.status_code == 400, response.content
+        assert response.data['detail'] == 'Unsupported search term: fruit'
+
+        response = self.client.get(url, {'query': 'hi \n there'}, format='json')
+
+        assert response.status_code == 400, response.content
+        assert response.data['detail'] == "Parse error: 'search' (column 1)"
+
     def test_project_filtering(self):
         user = self.create_user()
         org = self.create_organization()
