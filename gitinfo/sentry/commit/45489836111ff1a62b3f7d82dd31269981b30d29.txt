commit 45489836111ff1a62b3f7d82dd31269981b30d29
Author: Dan Fuller <dfuller@sentry.io>
Date:   Tue Feb 25 14:43:49 2020 -0800

    perf(incidents): Cache alert rule triggers for an hour in subscription_processor
    
    More performance caching for subscription_processor. This should help us avoid making multiple
    duplicate db calls when processing an update for a subscription. We still trigger extra queries if
    the metric has already triggered, which will be handled in a follow up.

diff --git a/src/sentry/incidents/models.py b/src/sentry/incidents/models.py
index 2fff14c166..8779e54e55 100644
--- a/src/sentry/incidents/models.py
+++ b/src/sentry/incidents/models.py
@@ -377,6 +377,34 @@ class IncidentTrigger(Model):
         unique_together = (("incident", "alert_rule_trigger"),)
 
 
+class AlertRuleTriggerManager(BaseManager):
+    CACHE_KEY = "alert_rule_triggers:alert_rule:%s"
+
+    @classmethod
+    def _build_trigger_cache_key(self, alert_rule_id):
+        return self.CACHE_KEY % alert_rule_id
+
+    def get_for_alert_rule(self, alert_rule):
+        """
+        Fetches the AlertRuleTriggers associated with an AlertRule. Attempts to fetch
+        from cache then hits the database
+        """
+        cache_key = self._build_trigger_cache_key(alert_rule.id)
+        triggers = cache.get(cache_key)
+        if triggers is None:
+            triggers = list(AlertRuleTrigger.objects.filter(alert_rule=alert_rule))
+            cache.set(cache_key, triggers, 3600)
+        return triggers
+
+    @classmethod
+    def clear_trigger_cache(cls, instance, **kwargs):
+        cache.delete(cls._build_trigger_cache_key(instance.alert_rule_id))
+
+    @classmethod
+    def clear_alert_rule_trigger_cache(cls, instance, **kwargs):
+        cache.delete(cls._build_trigger_cache_key(instance.id))
+
+
 class AlertRuleTrigger(Model):
     __core__ = True
 
@@ -390,6 +418,8 @@ class AlertRuleTrigger(Model):
     )
     date_added = models.DateTimeField(default=timezone.now)
 
+    objects = AlertRuleTriggerManager()
+
     class Meta:
         app_label = "sentry"
         db_table = "sentry_alertruletrigger"
@@ -523,3 +553,8 @@ post_delete.connect(AlertRuleManager.clear_subscription_cache, sender=QuerySubsc
 post_save.connect(AlertRuleManager.clear_subscription_cache, sender=QuerySubscription)
 post_save.connect(AlertRuleManager.clear_alert_rule_subscription_caches, sender=AlertRule)
 post_delete.connect(AlertRuleManager.clear_alert_rule_subscription_caches, sender=AlertRule)
+
+post_delete.connect(AlertRuleTriggerManager.clear_alert_rule_trigger_cache, sender=AlertRule)
+post_save.connect(AlertRuleTriggerManager.clear_alert_rule_trigger_cache, sender=AlertRule)
+post_save.connect(AlertRuleTriggerManager.clear_trigger_cache, sender=AlertRuleTrigger)
+post_delete.connect(AlertRuleTriggerManager.clear_trigger_cache, sender=AlertRuleTrigger)
diff --git a/src/sentry/incidents/subscription_processor.py b/src/sentry/incidents/subscription_processor.py
index 3c6d6387cd..7b2bd8af27 100644
--- a/src/sentry/incidents/subscription_processor.py
+++ b/src/sentry/incidents/subscription_processor.py
@@ -15,6 +15,7 @@ from sentry.snuba.subscriptions import query_aggregation_to_snuba
 from sentry.incidents.models import (
     AlertRule,
     AlertRuleThresholdType,
+    AlertRuleTrigger,
     Incident,
     IncidentStatus,
     IncidentTrigger,
@@ -58,7 +59,8 @@ class SubscriptionProcessor(object):
         except AlertRule.DoesNotExist:
             return
 
-        self.triggers = list(self.alert_rule.alertruletrigger_set.all().order_by("alert_threshold"))
+        self.triggers = AlertRuleTrigger.objects.get_for_alert_rule(self.alert_rule)
+        self.triggers.sort(key=lambda trigger: trigger.alert_threshold)
 
         self.last_update, self.trigger_alert_counts, self.trigger_resolve_counts = get_alert_rule_stats(
             self.alert_rule, self.subscription, self.triggers
diff --git a/tests/sentry/incidents/test_models.py b/tests/sentry/incidents/test_models.py
index a6b76487c1..a3082c046b 100644
--- a/tests/sentry/incidents/test_models.py
+++ b/tests/sentry/incidents/test_models.py
@@ -14,6 +14,7 @@ from sentry.utils.compat.mock import Mock, patch
 from sentry.db.models.manager import BaseManager
 from sentry.incidents.models import (
     AlertRule,
+    AlertRuleTrigger,
     AlertRuleTriggerAction,
     Incident,
     IncidentStatus,
@@ -110,6 +111,51 @@ class IncidentClearSubscriptionCacheTest(TestCase):
             AlertRule.objects.get_for_subscription(self.subscription)
 
 
+class AlertRuleTriggerClearCacheTest(TestCase):
+    def setUp(self):
+        self.alert_rule = self.create_alert_rule()
+        self.trigger = self.create_alert_rule_trigger(self.alert_rule)
+
+    def test_updated_alert_rule(self):
+        AlertRuleTrigger.objects.get_for_alert_rule(self.alert_rule)
+        assert cache.get(AlertRuleTrigger.objects._build_trigger_cache_key(self.alert_rule.id)) == [
+            self.trigger
+        ]
+        self.alert_rule.save()
+        assert (
+            cache.get(AlertRuleTrigger.objects._build_trigger_cache_key(self.alert_rule.id))
+        ) is None
+
+    def test_deleted_alert_rule(self):
+        AlertRuleTrigger.objects.get_for_alert_rule(self.alert_rule)
+        assert cache.get(AlertRuleTrigger.objects._build_trigger_cache_key(self.alert_rule.id)) == [
+            self.trigger
+        ]
+        alert_rule_id = self.alert_rule.id
+        self.alert_rule.delete()
+        assert (cache.get(AlertRuleTrigger.objects._build_trigger_cache_key(alert_rule_id))) is None
+
+    def test_updated_alert_rule_trigger(self):
+        AlertRuleTrigger.objects.get_for_alert_rule(self.alert_rule)
+        assert cache.get(AlertRuleTrigger.objects._build_trigger_cache_key(self.alert_rule.id)) == [
+            self.trigger
+        ]
+        self.trigger.save()
+        assert (
+            cache.get(AlertRuleTrigger.objects._build_trigger_cache_key(self.alert_rule.id))
+        ) is None
+
+    def test_deleted_alert_rule_trigger(self):
+        AlertRuleTrigger.objects.get_for_alert_rule(self.alert_rule)
+        assert cache.get(AlertRuleTrigger.objects._build_trigger_cache_key(self.alert_rule.id)) == [
+            self.trigger
+        ]
+        self.trigger.delete()
+        assert (
+            cache.get(AlertRuleTrigger.objects._build_trigger_cache_key(self.alert_rule.id))
+        ) is None
+
+
 class IncidentCreationTest(TestCase):
     def test_simple(self):
         title = "hello"
