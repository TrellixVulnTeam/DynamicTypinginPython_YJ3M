commit 39092f38543e79637fdf4ce8932c5dafd81e0350
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Feb 19 14:27:17 2015 -0800

    Initial working configure flow for Google

diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index d92f00aa68..258a671d09 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -2,10 +2,16 @@ from __future__ import absolute_import, print_function
 
 import logging
 
+from django.db import transaction
+from django.http import HttpResponseRedirect
+from django.contrib.auth import login
 from django.core.urlresolvers import reverse
 from hashlib import md5
 
-from sentry.models import AuthProvider, Organization
+from sentry.models import AuthIdentity, AuthProvider, Organization, User
+from sentry.utils.auth import get_login_redirect
+
+from . import manager
 
 
 class AuthHelper(object):
@@ -15,39 +21,65 @@ class AuthHelper(object):
     Designed to link provider and views as well as manage the state and
     pipeline.
     """
+    FLOW_LOGIN = 1
+    FLOW_SETUP_PROVIDER = 2
+
     @classmethod
     def get_for_request(cls, request):
         session = request.session.get('auth', {})
-        auth_provider_id = session.get('ap')
-        if not auth_provider_id:
+        organization_id = session.get('org')
+        if not organization_id:
             logging.info('Invalid SSO data found')
             return None
 
-        auth_provider = AuthProvider.objects.get(
-            id=auth_provider_id
-        )
-        organization = Organization.objects.get_from_cache(
+        flow = session['flow']
+
+        auth_provider_id = session.get('ap')
+        provider_key = session.get('p')
+        if auth_provider_id:
+            auth_provider = AuthProvider.objects.get(
+                id=auth_provider_id
+            )
+        elif provider_key:
+            auth_provider = None
+
+        organization = Organization.objects.get(
             id=session['org'],
         )
 
-        return cls(request, organization, auth_provider)
+        return cls(request, organization, flow,
+                   auth_provider=auth_provider, provider_key=provider_key)
+
+    def __init__(self, request, organization, flow, auth_provider=None,
+                 provider_key=None):
+        assert provider_key or auth_provider
 
-    def __init__(self, request, organization, auth_provider):
         self.request = request
         self.auth_provider = auth_provider
         self.organization = organization
+        self.flow = flow
 
-        provider = auth_provider.get_provider()(
-            key=auth_provider.provider,
-            **auth_provider.config
-        )
+        if auth_provider:
+            provider = auth_provider.get_provider()
+        elif provider_key:
+            provider = manager.get(provider_key)
+        else:
+            raise NotImplementedError
 
         self.provider = provider
-        self.pipeline = provider.get_auth_pipeline()
+        if flow == self.FLOW_LOGIN:
+            self.pipeline = provider.get_auth_pipeline()
+        elif flow == self.FLOW_SETUP_PROVIDER:
+            self.pipeline = provider.get_setup_pipeline()
+        else:
+            raise NotImplementedError
+
         # we serialize the pipeline to be [AuthView().get_ident(), ...] which
         # allows us to determine if the pipeline has changed during the auth
         # flow or if the user is somehow circumventing a chunk of it
-        self.signature = md5(' '.join(av.get_ident() for av in self.pipeline)).hexdigest()
+        self.signature = md5(
+            ' '.join(av.get_ident() for av in self.pipeline)
+        ).hexdigest()
 
     def pipeline_is_valid(self):
         session = self.request.session.get('auth', {})
@@ -55,12 +87,14 @@ class AuthHelper(object):
             return False
         return session.get('sig') == self.signature
 
-    def reset_pipeline(self):
+    def init_pipeline(self):
         session = {
-            'ap': self.auth_provider.id,
+            'ap': self.auth_provider.id if self.auth_provider else None,
+            'p': self.provider.key,
             'org': self.organization.id,
             'idx': -1,
             'sig': self.signature,
+            'flow': self.flow,
             'state': {},
         }
         self.request.session['auth'] = session
@@ -82,12 +116,82 @@ class AuthHelper(object):
 
         idx = session['idx']
         if idx == len(self.pipeline):
-            identity = self.provider.get_identity(session.get('state', {}))
-            raise NotImplementedError
+            return self.finish_pipeline()
 
         return self.pipeline[idx].dispatch(self.request, self)
 
+    def finish_pipeline(self):
+        session = self.request.session['auth']
+        state = session['state']
+        identity = self.provider.build_identity(state)
+
+        if session['flow'] == self.FLOW_LOGIN:
+            # create identity and authenticate the user
+            response = self._finish_login_pipeline(identity)
+        elif session['flow'] == self.FLOW_SETUP_PROVIDER:
+            response = self._finish_setup_pipeline(identity)
+
+        del self.request.session['auth']
+        self.request.session.is_modified = True
+
+        return response
+
+    def _finish_login_pipeline(self, identity):
+        with transaction.atomic():
+            try:
+                auth_identity = AuthIdentity.objects.get(
+                    auth_provider=self.auth_provider,
+                    ident=identity['id'],
+                )
+            except AuthIdentity.DoesNotExist:
+                user = User.objects.create(
+                    email=identity['email'],
+                    first_name=identity.get('name'),
+                    is_managed=True,
+                )
+
+                AuthIdentity.objects.create(
+                    auth_provider=self.auth_provider,
+                    user=user,
+                    ident=identity['id'],
+                )
+            else:
+                if auth_identity.data != identity.get('data', {}):
+                    auth_identity.update(data=identity['data'])
+
+        login(self.request, auth_identity.user)
+
+        return HttpResponseRedirect(get_login_redirect(self.request))
+
+    def _finish_setup_pipeline(self, identity):
+        state = self.request.session['auth']['state']
+        config = self.provider.build_config(state)
+        with transaction.atomic():
+            self.auth_provider = AuthProvider.objects.create(
+                provider=self.provider.key,
+                config=config,
+                created_by=self.request.user,
+            )
+
+            assert not self.organization.auth_provider
+            self.organization.update(auth_provider=self.auth_provider)
+
+            AuthIdentity.objects.create_or_update(
+                user=self.request.user,
+                ident=identity['id'],
+                auth_provider=self.auth_provider,
+                defaults={
+                    'data': identity.get('data', {}),
+                },
+            )
+
+        next_uri = reverse('sentry-organization-auth-settings', args=[
+            self.organization.slug,
+        ])
+        return HttpResponseRedirect(next_uri)
+
     def error(self, message):
+        # TODO
         raise Exception(message)
 
     def bind_state(self, key, value):
diff --git a/src/sentry/auth/manager.py b/src/sentry/auth/manager.py
index 2523b366c4..9fea11ccbf 100644
--- a/src/sentry/auth/manager.py
+++ b/src/sentry/auth/manager.py
@@ -12,8 +12,11 @@ class ProviderManager(object):
     def __iter__(self):
         return self.__values.iteritems()
 
-    def get(self, key):
-        return self.__values.get(key)
+    def get(self, key, **kwargs):
+        return self.__values.get(key)(key=key, **kwargs)
+
+    def exists(self, key):
+        return key in self.__values
 
     def register(self, key, cls):
         self.__values[key] = cls
diff --git a/src/sentry/auth/provider.py b/src/sentry/auth/provider.py
index 6037490f59..ec58501476 100644
--- a/src/sentry/auth/provider.py
+++ b/src/sentry/auth/provider.py
@@ -26,5 +26,35 @@ class Provider(object):
         """
         raise NotImplementedError
 
-    def get_identity(self, state):
+    def get_setup_pipeline(self):
+        """
+        Return a list of AuthView instances representing the initial setup
+        pipeline for this provider.
+
+        Defaults to the defined authentication pipeline.
+        """
+        return self.get_auth_pipeline()
+
+    def build_config(self, state):
+        """
+        Return a mapping containing provider configuration.
+
+        - ``state`` is the resulting data captured by the pipeline
+        """
+        raise NotImplementedError
+
+    def build_identity(self, state):
+        """
+        Return a mapping containing the identity information.
+
+        - ``state`` is the resulting data captured by the pipeline
+
+        >>> {
+        >>>     "id": "foo@example.com",
+        >>>     "email": "foo@example.com",
+        >>>     "name": "Foo Bar",
+        >>> }
+
+        The ``email`` and ``id`` keys are required, ``name`` is optional.
+        """
         raise NotImplementedError
diff --git a/src/sentry/auth/providers/google_oauth2.py b/src/sentry/auth/providers/google_oauth2.py
index 34085cf8a5..975a12e9a7 100644
--- a/src/sentry/auth/providers/google_oauth2.py
+++ b/src/sentry/auth/providers/google_oauth2.py
@@ -73,7 +73,15 @@ class GoogleOAuth2Provider(OAuth2Provider):
             FetchUser(domain=self.domain),
         ]
 
-    def get_identity(self, state):
+    def build_config(self, state):
+        # TODO(dcramer): we actually want to enforce a domain here. Should that
+        # be a view which does that, or should we allow this step to raise
+        # validation errors?
+        return {
+            'domain': state['user']['domain'],
+        }
+
+    def build_identity(self, state):
         # data.user => {
         #   "displayName": "David Cramer",
         #   "emails": [{"value": "david@getsentry.com", "type": "account"}],
@@ -82,7 +90,11 @@ class GoogleOAuth2Provider(OAuth2Provider):
         # }
         user_data = state['user']
         return {
+            'id': user_data['id'],
             # TODO: is there a "correct" email?
             'email': user_data['emails'][0]['value'],
             'name': user_data['displayName'],
+            'data': {
+                'access_token': state['data']['access_token'],
+            },
         }
diff --git a/src/sentry/auth/providers/oauth2.py b/src/sentry/auth/providers/oauth2.py
index ffa74787ca..32df4778e3 100644
--- a/src/sentry/auth/providers/oauth2.py
+++ b/src/sentry/auth/providers/oauth2.py
@@ -8,7 +8,7 @@ from uuid import uuid4
 from sentry.auth import Provider, AuthView
 from sentry.http import safe_urlopen, safe_urlread
 from sentry.utils import json
-from sentry.utils.http import absolute_uri, safe_urlencode
+from sentry.utils.http import absolute_uri
 
 ERR_INVALID_STATE = 'An error occurred while validating your request.'
 
@@ -87,11 +87,11 @@ class OAuth2Callback(AuthView):
 
     def exchange_token(self, request, helper, code):
         # TODO: this needs the auth yet
-        params = safe_urlencode(self.get_token_params(
+        data = self.get_token_params(
             code=code,
             redirect_uri=absolute_uri(helper.get_redirect_url()),
-        ))
-        req = safe_urlopen(self.access_token_url, data=params)
+        )
+        req = safe_urlopen(self.access_token_url, data=data)
         body = safe_urlread(req)
 
         return json.loads(body)
diff --git a/src/sentry/migrations/0158_auto__add_authidentity__add_unique_authidentity_auth_provider_ident.py b/src/sentry/migrations/0158_auto__add_authidentity__add_unique_authidentity_auth_provider_ident.py
new file mode 100644
index 0000000000..9f16f8086a
--- /dev/null
+++ b/src/sentry/migrations/0158_auto__add_authidentity__add_unique_authidentity_auth_provider_ident.py
@@ -0,0 +1,414 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Adding model 'AuthIdentity'
+        db.create_table('sentry_authidentity', (
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('user', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.User'])),
+            ('auth_provider', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.AuthProvider'])),
+            ('ident', self.gf('django.db.models.fields.CharField')(max_length=128)),
+            ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')()),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+        ))
+        db.send_create_signal('sentry', ['AuthIdentity'])
+
+        # Adding unique constraint on 'AuthIdentity', fields ['auth_provider', 'ident']
+        db.create_unique('sentry_authidentity', ['auth_provider_id', 'ident'])
+
+
+    def backwards(self, orm):
+        # Removing unique constraint on 'AuthIdentity', fields ['auth_provider', 'ident']
+        db.delete_unique('sentry_authidentity', ['auth_provider_id', 'ident'])
+
+        # Deleting model 'AuthIdentity'
+        db.delete_table('sentry_authidentity')
+
+
+    models = {
+        'sentry.accessgroup': {
+            'Meta': {'unique_together': "(('team', 'name'),)", 'object_name': 'AccessGroup'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.User']", 'symmetrical': 'False'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Project']", 'symmetrical': 'False'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '50'})
+        },
+        'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Event']", 'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.alert': {
+            'Meta': {'object_name': 'Alert'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'related_groups': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'related_alerts'", 'symmetrical': 'False', 'through': "orm['sentry.AlertRelatedGroup']", 'to': "orm['sentry.Group']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.alertrelatedgroup': {
+            'Meta': {'unique_together': "(('group', 'alert'),)", 'object_name': 'AlertRelatedGroup'},
+            'alert': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Alert']"}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'})
+        },
+        'sentry.apikey': {
+            'Meta': {'object_name': 'ApiKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'default': "'Default'", 'max_length': '64', 'blank': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Organization']"}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.auditlogentry': {
+            'Meta': {'object_name': 'AuditLogEntry'},
+            'actor': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'audit_actors'", 'to': "orm['sentry.User']"}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'target_object': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'target_user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_targets'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.authidentity': {
+            'Meta': {'unique_together': "(('auth_provider', 'ident'),)", 'object_name': 'AuthIdentity'},
+            'auth_provider': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.AuthProvider']"}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.authprovider': {
+            'Meta': {'object_name': 'AuthProvider'},
+            'config': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'created_by': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True', 'on_delete': 'models.SET_NULL'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_sync': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'sync_time': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.broadcast': {
+            'Meta': {'object_name': 'Broadcast'},
+            'badge': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
+            'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.CharField', [], {'max_length': '256'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group', 'datetime'),)"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'null': 'True'})
+        },
+        'sentry.eventmapping': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'EventMapping'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.file': {
+            'Meta': {'unique_together': "(('name', 'checksum'),)", 'object_name': 'File'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'storage': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'storage_options': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'time_spent_total': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupassignee': {
+            'Meta': {'object_name': 'GroupAssignee', 'db_table': "'sentry_groupasignee'"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'unique': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_assignee_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.grouphash': {
+            'Meta': {'unique_together': "(('project', 'hash'),)", 'object_name': 'GroupHash'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.grouprulestatus': {
+            'Meta': {'unique_together': "(('rule', 'group'),)", 'object_name': 'GroupRuleStatus'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_active': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'rule': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Rule']"}),
+            'status': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'})
+        },
+        'sentry.groupseen': {
+            'Meta': {'unique_together': "(('user', 'group'),)", 'object_name': 'GroupSeen'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'db_index': 'False'})
+        },
+        'sentry.grouptagkey': {
+            'Meta': {'unique_together': "(('project', 'group', 'key'),)", 'object_name': 'GroupTagKey'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouptagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'GroupTagValue', 'db_table': "'sentry_messagefiltervalue'"},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'null': 'True', 'to': "orm['sentry.Project']"}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.helppage': {
+            'Meta': {'object_name': 'HelpPage'},
+            'content': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_visible': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64', 'unique': 'True', 'null': 'True'}),
+            'priority': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'title': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'unique': 'True'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'last_updated': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.organization': {
+            'Meta': {'object_name': 'Organization'},
+            'auth_provider': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.AuthProvider']", 'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'org_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMember']", 'to': "orm['sentry.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.organizationmember': {
+            'Meta': {'unique_together': "(('organization', 'user'), ('organization', 'email'))", 'object_name': 'OrganizationMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
+            'has_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Organization']"}),
+            'teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'blank': 'True'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'sentry_orgmember_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.pendingteammember': {
+            'Meta': {'unique_together': "(('team', 'email'),)", 'object_name': 'PendingTeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'pending_member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '50'})
+        },
+        'sentry.project': {
+            'Meta': {'unique_together': "(('team', 'slug'), ('organization', 'slug'))", 'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'roles': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'}),
+            'user_added': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'keys_added_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.release': {
+            'Meta': {'unique_together': "(('project', 'version'),)", 'object_name': 'Release'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'version': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.rule': {
+            'Meta': {'object_name': 'Rule'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.tagkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'TagKey', 'db_table': "'sentry_filterkey'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.tagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'TagValue', 'db_table': "'sentry_filtervalue'"},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.team': {
+            'Meta': {'unique_together': "(('organization', 'slug'),)", 'object_name': 'Team'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.teammember': {
+            'Meta': {'unique_together': "(('team', 'user'),)", 'object_name': 'TeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '50'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        }
+    }
+
+    complete_apps = ['sentry']
\ No newline at end of file
diff --git a/src/sentry/models/authidentity.py b/src/sentry/models/authidentity.py
new file mode 100644
index 0000000000..097423e6f9
--- /dev/null
+++ b/src/sentry/models/authidentity.py
@@ -0,0 +1,19 @@
+from __future__ import absolute_import, print_function
+
+from django.db import models
+from django.utils import timezone
+
+from sentry.db.models import FlexibleForeignKey, GzippedDictField, Model
+
+
+class AuthIdentity(Model):
+    user = FlexibleForeignKey('sentry.User')
+    auth_provider = FlexibleForeignKey('sentry.AuthProvider')
+    ident = models.CharField(max_length=128)
+    data = GzippedDictField()
+    date_added = models.DateTimeField(default=timezone.now)
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_authidentity'
+        unique_together = (('auth_provider', 'ident'),)
diff --git a/src/sentry/models/authprovider.py b/src/sentry/models/authprovider.py
index 7cd1832ec9..3cc4c7e461 100644
--- a/src/sentry/models/authprovider.py
+++ b/src/sentry/models/authprovider.py
@@ -24,4 +24,4 @@ class AuthProvider(Model):
     def get_provider(self):
         from sentry.auth import manager
 
-        return manager.get(self.provider)
+        return manager.get(self.provider, **self.config)
diff --git a/src/sentry/models/organization.py b/src/sentry/models/organization.py
index fe9aace3df..52dad3b345 100644
--- a/src/sentry/models/organization.py
+++ b/src/sentry/models/organization.py
@@ -82,7 +82,7 @@ class Organization(Model):
         (OrganizationStatus.DELETION_IN_PROGRESS, _('Deletion in Progress')),
     ), default=OrganizationStatus.VISIBLE)
     date_added = models.DateTimeField(default=timezone.now)
-    auth_provider = models.ForeignKey('sentry.AuthProvider', null=True)
+    auth_provider = models.ForeignKey('sentry.AuthProvider', null=True, blank=True)
     members = models.ManyToManyField(settings.AUTH_USER_MODEL, through='sentry.OrganizationMember', related_name='org_memberships')
 
     objects = OrganizationManager(cache_fields=(
diff --git a/src/sentry/templates/sentry/organization-auth-provider-settings.html b/src/sentry/templates/sentry/organization-auth-provider-settings.html
new file mode 100644
index 0000000000..62b0d22eb0
--- /dev/null
+++ b/src/sentry/templates/sentry/organization-auth-provider-settings.html
@@ -0,0 +1,29 @@
+{% extends "sentry/bases/organization.html" %}
+
+{% load i18n %}
+
+{% block org_auth_settings_nav %}active{% endblock %}
+
+{% block inner %}
+  <div class="page-header">
+    <h2>{{ provider_name }} Authentication</h2>
+  </div>
+
+  <div class="row">
+    <div class="span9">
+      <form method="POST">
+        {% csrf_token %}
+
+        <hr>
+
+        <h3>Disable {{ provider_name }} Authentication</h3>
+
+        <button class="btn btn-danger pull-right" name="op"
+                value="disable" style="margin-left: 20px">Disable {{ provider_name }} Auth</button>
+
+        <p>Your organization will no longer being able to authenticate with their existing accounts. This will prevent any existing users from logging in unless they have access outside of SSO.</p>
+
+      </form>
+    </div>
+  </div>
+{% endblock %}
diff --git a/src/sentry/web/frontend/auth_organization_login.py b/src/sentry/web/frontend/auth_organization_login.py
index fb25939bda..75bcf376df 100644
--- a/src/sentry/web/frontend/auth_organization_login.py
+++ b/src/sentry/web/frontend/auth_organization_login.py
@@ -22,6 +22,11 @@ class AuthOrganizationLoginView(BaseView):
         if auth_provider is None:
             return self.redirect(reverse('sentry-login'))
 
-        helper = AuthHelper(request, organization, auth_provider)
-        helper.reset_pipeline()
+        helper = AuthHelper(
+            request=request,
+            organization=organization,
+            auth_provider=auth_provider,
+            flow=AuthHelper.FLOW_LOGIN,
+        )
+        helper.init_pipeline()
         return helper.next_step()
diff --git a/src/sentry/web/frontend/organization_auth_settings.py b/src/sentry/web/frontend/organization_auth_settings.py
index 0639cbebb5..20f1c1685b 100644
--- a/src/sentry/web/frontend/organization_auth_settings.py
+++ b/src/sentry/web/frontend/organization_auth_settings.py
@@ -1,7 +1,8 @@
 from __future__ import absolute_import
 
 from sentry.auth import manager
-from sentry.models import AuthProvider, OrganizationMemberType
+from sentry.auth.helper import AuthHelper
+from sentry.models import OrganizationMemberType
 from sentry.web.frontend.base import OrganizationView
 
 
@@ -11,27 +12,36 @@ class OrganizationAuthSettingsView(OrganizationView):
     def handle_existing_provider(self, request, organization):
         # at this point the provider may or may not be fully configured
         auth_provider = organization.auth_provider
+        provider = auth_provider.get_provider()
 
         context = {
             'auth_provider': auth_provider,
+            'provider_name': provider.name,
         }
 
         return self.respond('sentry/organization-auth-provider-settings.html', context)
 
+    def handle_provider_setup(self, request, organization, provider_key):
+        helper = AuthHelper(
+            request=request,
+            organization=organization,
+            provider_key=provider_key,
+            flow=AuthHelper.FLOW_SETUP_PROVIDER,
+        )
+        helper.init_pipeline()
+        return helper.next_step()
+
     def handle(self, request, organization):
         if organization.auth_provider:
             return self.handle_existing_provider(request, organization)
 
         if request.method == 'POST':
-            provider = request.POST.get('provider')
-            if manager.get(provider):
-                organization.update(
-                    auth_provider=AuthProvider.objects.create(
-                        created_by=request.user,
-                        provider=provider,
-                    )
-                )
-                return self.handle_existing_provider(request, organization)
+            provider_key = request.POST.get('provider')
+            if not manager.exists(provider_key):
+                raise ValueError('Provider not found: {}'.format(provider_key))
+
+            # render first time setup view
+            return self.handle_provider_setup(request, organization, provider_key)
 
         context = {
             'provider_list': [(k, v.name) for k, v in manager],
diff --git a/tests/sentry/web/frontend/test_organization_auth_settings.py b/tests/sentry/web/frontend/test_organization_auth_settings.py
new file mode 100644
index 0000000000..94a1b09d8b
--- /dev/null
+++ b/tests/sentry/web/frontend/test_organization_auth_settings.py
@@ -0,0 +1,53 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import TestCase, PermissionTestCase
+
+
+class OrganizationAuthSettingsPermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(OrganizationAuthSettingsPermissionTest, self).setUp()
+        self.path = reverse('sentry-organization-auth-settings', args=[self.organization.slug])
+
+    def test_teamless_owner_cannot_load(self):
+        self.assert_teamless_owner_cannot_access(self.path)
+
+    def test_org_admin_cannot_load(self):
+        self.assert_org_admin_cannot_access(self.path)
+
+    def test_org_owner_can_load(self):
+        self.assert_org_owner_can_access(self.path)
+
+
+class OrganizationAuthSettingsTest(TestCase):
+    def test_renders_with_context(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        team = self.create_team(organization=organization)
+        project = self.create_project(team=team)
+
+        path = reverse('sentry-organization-auth-settings', args=[organization.slug])
+
+        self.login_as(self.user)
+
+        resp = self.client.get(path)
+
+        assert resp.status_code == 200
+
+        self.assertTemplateUsed(resp, 'sentry/organization-auth-settings.html')
+
+        assert resp.context['organization'] == organization
+        assert resp.context['provider_list']
+
+    def test_can_start_auth_flow(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        team = self.create_team(organization=organization)
+        project = self.create_project(team=team)
+
+        path = reverse('sentry-organization-auth-settings', args=[organization.slug])
+
+        self.login_as(self.user)
+
+        resp = self.client.post(path, {'provider': 'google'})
+
+        assert resp.status_code == 302
