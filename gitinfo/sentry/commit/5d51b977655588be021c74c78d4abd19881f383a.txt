commit 5d51b977655588be021c74c78d4abd19881f383a
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Thu Mar 14 15:28:32 2019 +0100

    ref: Prepare snapshot fixture (#12389)
    
    * ref: Prepare snapshot fixture
    
    * ref: Port all interface tests to go through event manager, move tests
    
    * ref: Restructure snapshots
    
    * ref: Restructure again
    
    * ref: Port context interface tests to snapshots
    
    * fix: Update snapshot paths
    
    * ref: Port test_http.py to snapshot tests
    
    * ref: Split up exception test
    
    * ref: Port test_single_exception.py to snapshot tests
    
    * ref: Port mechanism tests to snapshot tests, remove dead code
    
    * ref: Port breadcrumbs to snapshot tests
    
    * ref: Split up test_stacktrace.py
    
    * ref: Port test_frame.py to snapshots
    
    * ref: Port test_sdk.py to snapshots
    
    * ref: Split up test_security.py
    
    * ref: Port test_expectstaple.py
    
    * ref: Port test_debug_meta to snapshots
    
    * ref: Port test_user.py to snapshots
    
    * ref: Port test_threads to snapshots
    
    * ref: Port test_template to snapshots
    
    * ref: Port test_message to snapshots
    
    * ref: Port test_geo to snapshots
    
    * ref: Port test_csp to snapshots
    
    * ref: Port test_stacktrace to snapshots
    
    * ref: Remove unused snapfile
    
    * ref: Port test_expectct to snapshots
    
    * ref: Port test_exception to snapshots
    
    * ref: Reindent all snapshots
    
    * ref: Remove dead code
    
    * fix: Rename snapfiles to not collide with jest
    
    * fix: Newline at end of file is not accepted by commit hook

diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 02bee58692..b6cac5574f 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -8,7 +8,7 @@ sentry.interfaces.exception
 
 from __future__ import absolute_import
 
-__all__ = ('Exception', 'Mechanism', 'normalize_mechanism_meta', 'upgrade_legacy_mechanism')
+__all__ = ('Exception', 'Mechanism', 'upgrade_legacy_mechanism')
 
 import re
 import six
@@ -23,595 +23,6 @@ from sentry.utils.safe import get_path, trim
 
 _type_value_re = re.compile('^(\w+):(.*)$')
 
-WELL_KNOWN_ERRNO = {
-    'linux': {
-        1: 'EPERM',  # Operation not permitted
-        2: 'ENOENT',  # No such file or directory
-        3: 'ESRCH',  # No such process
-        4: 'EINTR',  # Interrupted system call
-        5: 'EIO',  # I/O error
-        6: 'ENXIO',  # No such device or address
-        7: 'E2BIG',  # Argument list too long
-        8: 'ENOEXEC',  # Exec format error
-        9: 'EBADF',  # Bad file number
-        10: 'ECHILD',  # No child processes
-        11: 'EAGAIN',  # Try again
-        12: 'ENOMEM',  # Out of memory
-        13: 'EACCES',  # Permission denied
-        14: 'EFAULT',  # Bad address
-        15: 'ENOTBLK',  # Block device required
-        16: 'EBUSY',  # Device or resource busy
-        17: 'EEXIST',  # File exists
-        18: 'EXDEV',  # Cross-device link
-        19: 'ENODEV',  # No such device
-        20: 'ENOTDIR',  # Not a directory
-        21: 'EISDIR',  # Is a directory
-        22: 'EINVAL',  # Invalid argument
-        23: 'ENFILE',  # File table overflow
-        24: 'EMFILE',  # Too many open files
-        25: 'ENOTTY',  # Not a typewriter
-        26: 'ETXTBSY',  # Text file busy
-        27: 'EFBIG',  # File too large
-        28: 'ENOSPC',  # No space left on device
-        29: 'ESPIPE',  # Illegal seek
-        30: 'EROFS',  # Read-only file system
-        31: 'EMLINK',  # Too many links
-        32: 'EPIPE',  # Broken pipe
-        33: 'EDOM',  # Math argument out of domain of func
-        34: 'ERANGE',  # Math result not representable
-
-        35: 'EDEADLK',  # Resource deadlock would occur
-        36: 'ENAMETOOLONG',  # File name too long
-        37: 'ENOLCK',  # No record locks available
-
-        38: 'ENOSYS',  # Invalid system call number
-
-        39: 'ENOTEMPTY',  # Directory not empty
-        40: 'ELOOP',  # Too many symbolic links encountered
-        42: 'ENOMSG',  # No message of desired type
-        43: 'EIDRM',  # Identifier removed
-        44: 'ECHRNG',  # Channel number out of range
-        45: 'EL2NSYNC',  # Level 2 not synchronized
-        46: 'EL3HLT',  # Level 3 halted
-        47: 'EL3RST',  # Level 3 reset
-        48: 'ELNRNG',  # Link number out of range
-        49: 'EUNATCH',  # Protocol driver not attached
-        50: 'ENOCSI',  # No CSI structure available
-        51: 'EL2HLT',  # Level 2 halted
-        52: 'EBADE',  # Invalid exchange
-        53: 'EBADR',  # Invalid request descriptor
-        54: 'EXFULL',  # Exchange full
-        55: 'ENOANO',  # No anode
-        56: 'EBADRQC',  # Invalid request code
-        57: 'EBADSLT',  # Invalid slot
-
-        59: 'EBFONT',  # Bad font file format
-        60: 'ENOSTR',  # Device not a stream
-        61: 'ENODATA',  # No data available
-        62: 'ETIME',  # Timer expired
-        63: 'ENOSR',  # Out of streams resources
-        64: 'ENONET',  # Machine is not on the network
-        65: 'ENOPKG',  # Package not installed
-        66: 'EREMOTE',  # Object is remote
-        67: 'ENOLINK',  # Link has been severed
-        68: 'EADV',  # Advertise error
-        69: 'ESRMNT',  # Srmount error
-        70: 'ECOMM',  # Communication error on send
-        71: 'EPROTO',  # Protocol error
-        72: 'EMULTIHOP',  # Multihop attempted
-        73: 'EDOTDOT',  # RFS specific error
-        74: 'EBADMSG',  # Not a data message
-        75: 'EOVERFLOW',  # Value too large for defined data type
-        76: 'ENOTUNIQ',  # Name not unique on network
-        77: 'EBADFD',  # File descriptor in bad state
-        78: 'EREMCHG',  # Remote address changed
-        79: 'ELIBACC',  # Can not access a needed shared library
-        80: 'ELIBBAD',  # Accessing a corrupted shared library
-        81: 'ELIBSCN',  # .lib section in a.out corrupted
-        82: 'ELIBMAX',  # Attempting to link in too many shared libraries
-        83: 'ELIBEXEC',  # Cannot exec a shared library directly
-        84: 'EILSEQ',  # Illegal byte sequence
-        85: 'ERESTART',  # Interrupted system call should be restarted
-        86: 'ESTRPIPE',  # Streams pipe error
-        87: 'EUSERS',  # Too many users
-        88: 'ENOTSOCK',  # Socket operation on non-socket
-        89: 'EDESTADDRREQ',  # Destination address required
-        90: 'EMSGSIZE',  # Message too long
-        91: 'EPROTOTYPE',  # Protocol wrong type for socket
-        92: 'ENOPROTOOPT',  # Protocol not available
-        93: 'EPROTONOSUPPORT',  # Protocol not supported
-        94: 'ESOCKTNOSUPPORT',  # Socket type not supported
-        95: 'EOPNOTSUPP',  # Operation not supported on transport endpoint
-        96: 'EPFNOSUPPORT',  # Protocol family not supported
-        97: 'EAFNOSUPPORT',  # Address family not supported by protocol
-        98: 'EADDRINUSE',  # Address already in use
-        99: 'EADDRNOTAVAIL',  # Cannot assign requested address
-        100: 'ENETDOWN',  # Network is down
-        101: 'ENETUNREACH',  # Network is unreachable
-        102: 'ENETRESET',  # Network dropped connection because of reset
-        103: 'ECONNABORTED',  # Software caused connection abort
-        104: 'ECONNRESET',  # Connection reset by peer
-        105: 'ENOBUFS',  # No buffer space available
-        106: 'EISCONN',  # Transport endpoint is already connected
-        107: 'ENOTCONN',  # Transport endpoint is not connected
-        108: 'ESHUTDOWN',  # Cannot send after transport endpoint shutdown
-        109: 'ETOOMANYREFS',  # Too many references: cannot splice
-        110: 'ETIMEDOUT',  # Connection timed out
-        111: 'ECONNREFUSED',  # Connection refused
-        112: 'EHOSTDOWN',  # Host is down
-        113: 'EHOSTUNREACH',  # No route to host
-        114: 'EALREADY',  # Operation already in progress
-        115: 'EINPROGRESS',  # Operation now in progress
-        116: 'ESTALE',  # Stale file handle
-        117: 'EUCLEAN',  # Structure needs cleaning
-        118: 'ENOTNAM',  # Not a XENIX named type file
-        119: 'ENAVAIL',  # No XENIX semaphores available
-        120: 'EISNAM',  # Is a named type file
-        121: 'EREMOTEIO',  # Remote I/O error
-        122: 'EDQUOT',  # Quota exceeded
-
-        123: 'ENOMEDIUM',  # No medium found
-        124: 'EMEDIUMTYPE',  # Wrong medium type
-        125: 'ECANCELED',  # Operation Canceled
-        126: 'ENOKEY',  # Required key not available
-        127: 'EKEYEXPIRED',  # Key has expired
-        128: 'EKEYREVOKED',  # Key has been revoked
-        129: 'EKEYREJECTED',  # Key was rejected by service
-
-        130: 'EOWNERDEAD',  # Owner died
-        131: 'ENOTRECOVERABLE',  # State not recoverable
-
-        132: 'ERFKILL',  # Operation not possible due to RF-kill
-
-        133: 'EHWPOISON',  # Memory page has hardware error
-    },
-    'darwin': {
-        1: 'EPERM',  # Operation not permitted
-        2: 'ENOENT',  # No such file or directory
-        3: 'ESRCH',  # No such process
-        4: 'EINTR',  # Interrupted system call
-        5: 'EIO',  # Input/output error
-        6: 'ENXIO',  # Device not configured
-        7: 'E2BIG',  # Argument list too long
-        8: 'ENOEXEC',  # Exec format error
-        9: 'EBADF',  # Bad file descriptor
-        10: 'ECHILD',  # No child processes
-        11: 'EDEADLK',  # Resource deadlock avoided
-        12: 'ENOMEM',  # Cannot allocate memory
-        13: 'EACCES',  # Permission denied
-        14: 'EFAULT',  # Bad address
-        15: 'ENOTBLK',  # Block device required
-        16: 'EBUSY',  # Device / Resource busy
-        17: 'EEXIST',  # File exists
-        18: 'EXDEV',  # Cross-device link
-        19: 'ENODEV',  # Operation not supported by device
-        20: 'ENOTDIR',  # Not a directory
-        21: 'EISDIR',  # Is a directory
-        22: 'EINVAL',  # Invalid argument
-        23: 'ENFILE',  # Too many open files in system
-        24: 'EMFILE',  # Too many open files
-        25: 'ENOTTY',  # Inappropriate ioctl for device
-        26: 'ETXTBSY',  # Text file busy
-        27: 'EFBIG',  # File too large
-        28: 'ENOSPC',  # No space left on device
-        29: 'ESPIPE',  # Illegal seek
-        30: 'EROFS',  # Read-only file system
-        31: 'EMLINK',  # Too many links
-        32: 'EPIPE',  # Broken pipe
-
-        # math software
-        33: 'EDOM',  # Numerical argument out of domain
-        34: 'ERANGE',  # Result too large
-
-        # non - blocking and interrupt i / o
-        35: 'EAGAIN',  # Resource temporarily unavailable
-        36: 'EINPROGRESS',  # Operation now in progress
-        37: 'EALREADY',  # Operation already in progress
-
-        # ipc / network software - - argument errors
-        38: 'ENOTSOCK',  # Socket operation on non-socket
-        39: 'EDESTADDRREQ',  # Destination address required
-        40: 'EMSGSIZE',  # Message too long
-        41: 'EPROTOTYPE',  # Protocol wrong type for socket
-        42: 'ENOPROTOOPT',  # Protocol not available
-        43: 'EPROTONOSUPPORT',  # Protocol not supported
-        44: 'ESOCKTNOSUPPORT',  # Socket type not supported
-        45: 'ENOTSUP',  # Operation not supported
-
-        46: 'EPFNOSUPPORT',  # Protocol family not supported
-        47: 'EAFNOSUPPORT',  # Address family not supported by protocol family
-        48: 'EADDRINUSE',  # Address already in use
-        49: 'EADDRNOTAVAIL',  # Can't assign requested address
-
-        # ipc / network software - - operational errors
-        50: 'ENETDOWN',  # Network is down
-        51: 'ENETUNREACH',  # Network is unreachable
-        52: 'ENETRESET',  # Network dropped connection on reset
-        53: 'ECONNABORTED',  # Software caused connection abort
-        54: 'ECONNRESET',  # Connection reset by peer
-        55: 'ENOBUFS',  # No buffer space available
-        56: 'EISCONN',  # Socket is already connected
-        57: 'ENOTCONN',  # Socket is not connected
-        58: 'ESHUTDOWN',  # Can't send after socket shutdown
-        59: 'ETOOMANYREFS',  # Too many references: can't splice
-        60: 'ETIMEDOUT',  # Operation timed out
-        61: 'ECONNREFUSED',  # Connection refused
-
-        62: 'ELOOP',  # Too many levels of symbolic links
-        63: 'ENAMETOOLONG',  # File name too long
-
-        # should be rearranged
-        64: 'EHOSTDOWN',  # Host is down
-        65: 'EHOSTUNREACH',  # No route to host
-        66: 'ENOTEMPTY',  # Directory not empty
-
-        # quotas & mush
-        67: 'EPROCLIM',  # Too many processes
-        68: 'EUSERS',  # Too many users
-        69: 'EDQUOT',  # Disc quota exceeded
-
-        # Network File System
-        70: 'ESTALE',  # Stale NFS file handle
-        71: 'EREMOTE',  # Too many levels of remote in path
-        72: 'EBADRPC',  # RPC struct is bad
-        73: 'ERPCMISMATCH',  # RPC version wrong
-        74: 'EPROGUNAVAIL',  # RPC prog. not avail
-        75: 'EPROGMISMATCH',  # Program version wrong
-        76: 'EPROCUNAVAIL',  # Bad procedure for program
-
-        77: 'ENOLCK',  # No locks available
-        78: 'ENOSYS',  # Function not implemented
-
-        79: 'EFTYPE',  # Inappropriate file type or format
-        80: 'EAUTH',  # Authentication error
-        81: 'ENEEDAUTH',  # Need authenticator
-
-        # Intelligent device errors
-        82: 'EPWROFF',  # Device power is off
-        83: 'EDEVERR',  # Device error, e.g. paper out
-
-        84: 'EOVERFLOW',  # Value too large to be stored in data type
-
-        # Program loading errors
-        85: 'EBADEXEC',  # Bad executable
-        86: 'EBADARCH',  # Bad CPU type in executable
-        87: 'ESHLIBVERS',  # Shared library version mismatch
-        88: 'EBADMACHO',  # Malformed Macho file
-
-        89: 'ECANCELED',  # Operation canceled
-
-        90: 'EIDRM',  # Identifier removed
-        91: 'ENOMSG',  # No message of desired type
-        92: 'EILSEQ',  # Illegal byte sequence
-        93: 'ENOATTR',  # Attribute not found
-
-        94: 'EBADMSG',  # Bad message
-        95: 'EMULTIHOP',  # Reserved
-        96: 'ENODATA',  # No message available on STREAM
-        97: 'ENOLINK',  # Reserved
-        98: 'ENOSR',  # No STREAM resources
-        99: 'ENOSTR',  # Not a STREAM
-        100: 'EPROTO',  # Protocol error
-        101: 'ETIME',  # STREAM ioctl timeout
-
-        102: 'EOPNOTSUPP',  # Operation not supported on socket
-        103: 'ENOPOLICY',  # No such policy registered
-        104: 'ENOTRECOVERABLE',  # State not recoverable
-        105: 'EOWNERDEAD',  # Previous owner died
-        106: 'EQFULL',  # Interface output queue is full
-    },
-    'windows': {
-        1: 'EPERM',
-        2: 'ENOENT',
-        3: 'ESRCH',
-        4: 'EINTR',
-        5: 'EIO',
-        6: 'ENXIO',
-        7: 'E2BIG',
-        8: 'ENOEXEC',
-        9: 'EBADF',
-        10: 'ECHILD',
-        11: 'EAGAIN',
-        12: 'ENOMEM',
-        13: 'EACCES',
-        14: 'EFAULT',
-        16: 'EBUSY',
-        17: 'EEXIST',
-        18: 'EXDEV',
-        19: 'ENODEV',
-        20: 'ENOTDIR',
-        21: 'EISDIR',
-        23: 'ENFILE',
-        24: 'EMFILE',
-        25: 'ENOTTY',
-        27: 'EFBIG',
-        28: 'ENOSPC',
-        29: 'ESPIPE',
-        30: 'EROFS',
-        31: 'EMLINK',
-        32: 'EPIPE',
-        33: 'EDOM',
-        36: 'EDEADLK',
-        38: 'ENAMETOOLONG',
-        39: 'ENOLCK',
-        40: 'ENOSYS',
-        41: 'ENOTEMPTY',
-
-        # Error codes used in the Secure CRT functions
-        22: 'EINVAL',
-        34: 'ERANGE',
-        42: 'EILSEQ',
-        80: 'STRUNCATE',
-
-        # POSIX Supplement
-        100: 'EADDRINUSE',
-        101: 'EADDRNOTAVAIL',
-        102: 'EAFNOSUPPORT',
-        103: 'EALREADY',
-        104: 'EBADMSG',
-        105: 'ECANCELED',
-        106: 'ECONNABORTED',
-        107: 'ECONNREFUSED',
-        108: 'ECONNRESET',
-        109: 'EDESTADDRREQ',
-        110: 'EHOSTUNREACH',
-        111: 'EIDRM',
-        112: 'EINPROGRESS',
-        113: 'EISCONN',
-        114: 'ELOOP',
-        115: 'EMSGSIZE',
-        116: 'ENETDOWN',
-        117: 'ENETRESET',
-        118: 'ENETUNREACH',
-        119: 'ENOBUFS',
-        120: 'ENODATA',
-        121: 'ENOLINK',
-        122: 'ENOMSG',
-        123: 'ENOPROTOOPT',
-        124: 'ENOSR',
-        125: 'ENOSTR',
-        126: 'ENOTCONN',
-        127: 'ENOTRECOVERABLE',
-        128: 'ENOTSOCK',
-        129: 'ENOTSUP',
-        130: 'EOPNOTSUPP',
-        131: 'EOTHER',
-        132: 'EOVERFLOW',
-        133: 'EOWNERDEAD',
-        134: 'EPROTO',
-        135: 'EPROTONOSUPPORT',
-        136: 'EPROTOTYPE',
-        137: 'ETIME',
-        138: 'ETIMEDOUT',
-        139: 'ETXTBSY',
-        140: 'EWOULDBLOCK',
-    },
-}
-
-WELL_KNOWN_SIGNALS = {
-    # Linux signals have been taken from <uapi/asm-generic/signal.h>
-    'linux': {
-        1: 'SIGHUP',  # Hangup.
-        2: 'SIGINT',  # Terminal interrupt signal.
-        3: 'SIGQUIT',  # Terminal quit signal.
-        4: 'SIGILL',  # Illegal instruction.
-        5: 'SIGTRAP',
-        6: 'SIGABRT',  # Process abort signal.
-        7: 'SIGBUS',
-        8: 'SIGFPE',  # Erroneous arithmetic operation.
-        9: 'SIGKILL',  # Kill (cannot be caught or ignored).
-        10: 'SIGUSR1',  # User-defined signal 1.
-        11: 'SIGSEGV',  # Invalid memory reference.
-        12: 'SIGUSR2',  # User-defined signal 2.
-        13: 'SIGPIPE',  # Write on a pipe with no one to read it.
-        14: 'SIGALRM',  # Alarm clock.
-        15: 'SIGTERM',  # Termination signal.
-        16: 'SIGSTKFLT',
-        17: 'SIGCHLD',  # Child process terminated or stopped.
-        18: 'SIGCONT',  # Continue executing, if stopped.
-        19: 'SIGSTOP',  # Stop executing (cannot be caught or ignored).
-        20: 'SIGTSTP',  # Terminal stop signal.
-        21: 'SIGTTIN',  # Background process attempting read.
-        22: 'SIGTTOU',  # Background process attempting write.
-        23: 'SIGURG',  # High bandwidth data is available at a socket.
-        24: 'SIGXCPU',  # CPU time limit exceeded.
-        25: 'SIGXFSZ',  # File size limit exceeded.
-        26: 'SIGVTALRM',  # Virtual timer expired.
-        27: 'SIGPROF',  # Profiling timer expired.
-        28: 'SIGWINCH',
-        29: 'SIGIO',
-        30: 'SIGPWR',
-        31: 'SIGSYS',
-    },
-    'darwin': {
-        1: 'SIGHUP',  # hangup
-        2: 'SIGINT',  # interrupt
-        3: 'SIGQUIT',  # quit
-        4: 'SIGILL',  # illegal instruction (not reset when caught)
-        5: 'SIGTRAP',  # trace trap (not reset when caught)
-        6: 'SIGABRT',  # abort()
-        # if (defined(_POSIX_C_SOURCE) && !defined(_DARWIN_C_SOURCE))
-        7: 'SIGPOLL',  # pollable event ([XSR] generated, not supported)
-        # if (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE)
-        # 7: 'SIGEMT', # EMT instruction
-        8: 'SIGFPE',  # floating point exception
-        9: 'SIGKILL',  # kill (cannot be caught or ignored)
-        10: 'SIGBUS',  # bus error
-        11: 'SIGSEGV',  # segmentation violation
-        12: 'SIGSYS',  # bad argument to system call
-        13: 'SIGPIPE',  # write on a pipe with no one to read it
-        14: 'SIGALRM',  # alarm clock
-        15: 'SIGTERM',  # software termination signal from kill
-        16: 'SIGURG',  # urgent condition on IO channel
-        17: 'SIGSTOP',  # sendable stop signal not from tty
-        18: 'SIGTSTP',  # stop signal from tty
-        19: 'SIGCONT',  # continue a stopped process
-        20: 'SIGCHLD',  # to parent on child stop or exit
-        21: 'SIGTTIN',  # to readers pgrp upon background tty read
-        22: 'SIGTTOU',  # like TTIN for output if (tp->t_local&LTOSTOP)
-        23: 'SIGIO',  # input/output possible signal
-        24: 'SIGXCPU',  # exceeded CPU time limit
-        25: 'SIGXFSZ',  # exceeded file size limit
-        26: 'SIGVTALRM',  # virtual time alarm
-        27: 'SIGPROF',  # profiling time alarm
-        28: 'SIGWINCH',  # window size changes
-        29: 'SIGINFO',  # information request
-        30: 'SIGUSR1',  # user defined signal 1
-        31: 'SIGUSR2',  # user defined signal 2
-    },
-}
-
-# Codes for Darwin `si_code`
-WELL_KNOWN_SIGNAL_CODES = {
-    # Codes for SIGILL
-    4: {
-        0: 'ILL_NOOP',  # if only I knew...
-        1: 'ILL_ILLOPC',  # [XSI] illegal opcode
-        2: 'ILL_ILLTRP',  # [XSI] illegal trap
-        3: 'ILL_PRVOPC',  # [XSI] privileged opcode
-        4: 'ILL_ILLOPN',  # [XSI] illegal operand -NOTIMP
-        5: 'ILL_ILLADR',  # [XSI] illegal addressing mode -NOTIMP
-        6: 'ILL_PRVREG',  # [XSI] privileged register -NOTIMP
-        7: 'ILL_COPROC',  # [XSI] coprocessor error -NOTIMP
-        8: 'ILL_BADSTK',  # [XSI] internal stack error -NOTIMP
-    },
-
-    # Codes for SIGFPE
-    8: {
-        0: 'FPE_NOOP',  # if only I knew...
-        1: 'FPE_FLTDIV',  # [XSI] floating point divide by zero
-        2: 'FPE_FLTOVF',  # [XSI] floating point overflow
-        3: 'FPE_FLTUND',  # [XSI] floating point underflow
-        4: 'FPE_FLTRES',  # [XSI] floating point inexact result
-        5: 'FPE_FLTINV',  # [XSI] invalid floating point operation
-        6: 'FPE_FLTSUB',  # [XSI] subscript out of range -NOTIMP
-        7: 'FPE_INTDIV',  # [XSI] integer divide by zero
-        8: 'FPE_INTOVF',  # [XSI] integer overflow
-    },
-
-    # Codes for SIGSEGV
-    11: {
-        0: 'SEGV_NOOP',  # if only I knew...
-        1: 'SEGV_MAPERR',  # [XSI] address not mapped to object
-        2: 'SEGV_ACCERR',  # [XSI] invalid permission for mapped object
-    },
-
-    # Codes for SIGBUS
-    10: {
-        0: 'BUS_NOOP',  # if only I knew...
-        1: 'BUS_ADRALN',  # [XSI] Invalid address alignment
-        2: 'BUS_ADRERR',  # [XSI] Nonexistent physical address -NOTIMP
-        3: 'BUS_OBJERR',  # [XSI] Object-specific HW error - NOTIMP
-    },
-
-    # Codes for SIGTRAP
-    5: {
-        1: 'TRAP_BRKPT',  # [XSI] Process breakpoint -NOTIMP
-        2: 'TRAP_TRACE',  # [XSI] Process trace trap -NOTIMP
-    },
-
-    # Codes for SIGCHLD
-    20: {
-        0: 'CLD_NOOP',  # if only I knew...
-        1: 'CLD_EXITED',  # [XSI] child has exited
-        2: 'CLD_KILLED',  # [XSI] terminated abnormally, no core file
-        3: 'CLD_DUMPED',  # [XSI] terminated abnormally, core file
-        4: 'CLD_TRAPPED',  # [XSI] traced child has trapped
-        5: 'CLD_STOPPED',  # [XSI] child has stopped
-        6: 'CLD_CONTINUED',  # [XSI] stopped child has continued
-    },
-
-    # Codes for SIGPOLL
-    7: {
-        1: 'POLL_IN',  # [XSR] Data input available
-        2: 'POLL_OUT',  # [XSR] Output buffers available
-        3: 'POLL_MSG',  # [XSR] Input message available
-        4: 'POLL_ERR',  # [XSR] I/O error
-        5: 'POLL_PRI',  # [XSR] High priority input available
-        6: 'POLL_HUP',  # [XSR] Device disconnected
-    },
-}
-
-# Mach exception codes used in Darwin.
-WELL_KNOWN_MACH_EXCEPTIONS = {
-    1: 'EXC_BAD_ACCESS',  # Could not access memory
-    2: 'EXC_BAD_INSTRUCTION',  # Instruction failed
-    3: 'EXC_ARITHMETIC',  # Arithmetic exception
-    4: 'EXC_EMULATION',  # Emulation instruction
-    5: 'EXC_SOFTWARE',  # Software generated exception
-    6: 'EXC_BREAKPOINT',  # Trace, breakpoint, etc.
-    7: 'EXC_SYSCALL',  # System calls.
-    8: 'EXC_MACH_SYSCALL',  # Mach system calls.
-    9: 'EXC_RPC_ALERT',  # RPC alert
-    10: 'EXC_CRASH',  # Abnormal process exit
-    11: 'EXC_RESOURCE',  # Hit resource consumption limit
-    12: 'EXC_GUARD',  # Violated guarded resource protections
-    13: 'EXC_CORPSE_NOTIFY',  # Abnormal process exited to corpse state
-}
-
-
-def normalize_mechanism_errno(errno, sdk):
-    if not sdk:
-        return
-
-    if not errno.get('name'):
-        errnos = WELL_KNOWN_ERRNO.get(sdk, {})
-        name = errnos.get(errno['number'])
-        if name:
-            errno['name'] = name
-
-
-def normalize_mechanism_signal(signal, sdk):
-    if not sdk:
-        return
-
-    if not signal.get('name'):
-        signals = WELL_KNOWN_SIGNALS.get(sdk, {})
-        name = signals.get(signal['number'])
-        if name:
-            signal['name'] = name
-
-    if sdk != 'darwin':
-        return
-
-    if signal.get('code') is not None and not signal.get('code_name'):
-        codes = WELL_KNOWN_SIGNAL_CODES.get(signal['number'], {})
-        code_name = codes.get(signal['code'])
-        if code_name:
-            signal['code_name'] = code_name
-
-
-def normalize_mechanism_mach_exception(mach):
-    if not mach.get('name'):
-        name = WELL_KNOWN_MACH_EXCEPTIONS.get(mach['exception'])
-        if name:
-            mach['name'] = name
-
-
-def normalize_mechanism_meta(mechanism, sdk_info=None):
-    meta = get_path(mechanism, 'meta')
-    if not meta:
-        return
-
-    sdk_name = sdk_info['sdk_name'].lower() if sdk_info else ''
-    if sdk_name in ('ios', 'watchos', 'tvos', 'macos'):
-        sdk = 'darwin'
-    elif sdk_name in ('linux', 'android'):
-        sdk = 'linux'
-    elif sdk_name in ('windows',):
-        sdk = 'windows'
-    else:
-        sdk = None
-
-    if 'errno' in meta:
-        normalize_mechanism_errno(meta['errno'], sdk)
-
-    if 'signal' in meta:
-        normalize_mechanism_signal(meta['signal'], sdk)
-
-    if 'mach_exception' in meta:
-        normalize_mechanism_mach_exception(meta['mach_exception'])
-
 
 def upgrade_legacy_mechanism(data):
     """
diff --git a/src/sentry/utils/pytest/fixtures.py b/src/sentry/utils/pytest/fixtures.py
index 053eac90bf..c0681d4a7f 100644
--- a/src/sentry/utils/pytest/fixtures.py
+++ b/src/sentry/utils/pytest/fixtures.py
@@ -7,7 +7,12 @@ including ``db`` fixture in the function resolution scope.
 """
 from __future__ import absolute_import, print_function, unicode_literals
 
+import os
+import sys
+import yaml
+
 import pytest
+import six
 
 
 DEFAULT_EVENT_DATA = {
@@ -238,3 +243,61 @@ def default_activity(default_group, default_project, default_user):
     return Activity.objects.create(
         group=default_group, project=default_project, type=Activity.NOTE, user=default_user, data={}
     )
+
+
+_snapshot_writeback = os.environ.get("SENTRY_SNAPSHOTS_WRITEBACK", "0") in ("true", "1")
+
+
+@pytest.fixture
+def log():
+    def inner(x):
+        return sys.stdout.write(x + '\n')
+    return inner
+
+
+@pytest.fixture
+def insta_snapshot(request, log):
+    calls = []
+
+    def inner(output, reference_file=None, subname=None):
+        calls.append(1)
+        if reference_file is None:
+            name = request.node.name
+            for c in ('::', '-', '[', ']'):
+                name = name.replace(c, '/')
+            name = name.strip('/')
+
+            reference_file = os.path.join(
+                os.path.dirname(six.text_type(request.node.fspath)),
+                'snapshots',
+                os.path.splitext(os.path.basename(request.node.parent.name))[0],
+                name + '.pysnap'
+
+            )
+        elif subname is not None:
+            raise ValueError(
+                "subname only works if you don't provide your own entire reference_file")
+
+        if not isinstance(output, six.string_types):
+            output = yaml.safe_dump(output, indent=2)
+
+        try:
+            with open(reference_file) as f:
+                refval = f.read().decode('utf-8')
+        except IOError:
+            refval = ''
+
+        refval = refval.rstrip()
+        output = output.rstrip()
+
+        if _snapshot_writeback and refval != output:
+            if not os.path.isdir(os.path.dirname(reference_file)):
+                os.makedirs(os.path.dirname(reference_file))
+            with open(reference_file, "w") as f:
+                f.write(output)
+        else:
+            log("Run with SENTRY_SNAPSHOTS_WRITEBACK=1 to update snapshots.")
+            assert refval == output
+
+    yield inner
+    assert calls, "Test is loading insta_snapshot but is not using it. This is likely a bug"
diff --git a/tests/sentry/interfaces/__init__.py b/tests/sentry/event_manager/interfaces/__init__.py
similarity index 100%
rename from tests/sentry/interfaces/__init__.py
rename to tests/sentry/event_manager/interfaces/__init__.py
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_non_string_keys.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_non_string_keys.pysnap
new file mode 100644
index 0000000000..e1ae18e876
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_non_string_keys.pysnap
@@ -0,0 +1,8 @@
+errors: null
+to_json:
+  values:
+  - data:
+      extra: {foo: '"bar"'}
+    level: info
+    timestamp: 1458857193.973
+    type: message
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input0.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input0.pysnap
new file mode 100644
index 0000000000..311aaf0602
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input0.pysnap
@@ -0,0 +1 @@
+{errors: null, to_json: null}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input1.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input1.pysnap
new file mode 100644
index 0000000000..311aaf0602
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input1.pysnap
@@ -0,0 +1 @@
+{errors: null, to_json: null}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input2.pysnap
new file mode 100644
index 0000000000..357a099a73
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input2.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input3.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input3.pysnap
new file mode 100644
index 0000000000..357a099a73
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input3.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input4.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input4.pysnap
new file mode 100644
index 0000000000..357a099a73
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_null_values/input4.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_simple.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_simple.pysnap
new file mode 100644
index 0000000000..f67c8d255a
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_simple.pysnap
@@ -0,0 +1,7 @@
+errors: null
+to_json:
+  values:
+  - data: {message: 'Whats up dawg?'}
+    level: info
+    timestamp: 1458857193.973
+    type: message
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_string_data.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_string_data.pysnap
new file mode 100644
index 0000000000..de840508c2
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_breadcrumbs/test_string_data.pysnap
@@ -0,0 +1,6 @@
+errors:
+- {name: breadcrumbs.values.0.data, reason: expected an object, type: invalid_data,
+  value: must be a mapping}
+to_json:
+  values:
+  - {level: info, timestamp: 1458857193.973, type: message}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_app.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_app.pysnap
new file mode 100644
index 0000000000..b491ca3c4c
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_app.pysnap
@@ -0,0 +1,5 @@
+errors: null
+tags:
+- [app.device, '5678']
+to_json:
+  app: {app_id: '1234', device_app_hash: '5678', type: app}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_default.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_default.pysnap
new file mode 100644
index 0000000000..b204a0f8d9
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_default.pysnap
@@ -0,0 +1,9 @@
+errors: null
+tags: []
+to_json:
+  whatever:
+    baz: {foo: bar}
+    biz: [1, 2, 3]
+    blub: blah
+    foo: bar
+    type: default
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_device.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_device.pysnap
new file mode 100644
index 0000000000..68f8c9b32a
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_device.pysnap
@@ -0,0 +1,6 @@
+errors: null
+tags:
+- [device, iPad]
+to_json:
+  device: {arch: arm64, model: iPad, model_id: 1234AB, name: My iPad, type: device,
+    version: 1.2.3}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_device_with_alias.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_device_with_alias.pysnap
new file mode 100644
index 0000000000..de2f844063
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_device_with_alias.pysnap
@@ -0,0 +1,6 @@
+errors: null
+tags:
+- [my_device, iPad]
+to_json:
+  my_device: {arch: arm64, model: iPad, model_id: 1234AB, name: My iPad, title: My
+      Title, type: device, version: 1.2.3}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_gpu.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_gpu.pysnap
new file mode 100644
index 0000000000..708afae9df
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_gpu.pysnap
@@ -0,0 +1,6 @@
+errors: null
+tags:
+- [gpu.name, AMD Radeon Pro 560]
+- [gpu.vendor, Apple]
+to_json:
+  gpu: {name: AMD Radeon Pro 560, type: gpu, vendor_name: Apple, version: Metal}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_null_values.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_null_values.pysnap
new file mode 100644
index 0000000000..a8bba41788
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_null_values.pysnap
@@ -0,0 +1,3 @@
+errors: null
+tags: []
+to_json: {}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_null_values2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_null_values2.pysnap
new file mode 100644
index 0000000000..008cf585dd
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_null_values2.pysnap
@@ -0,0 +1,4 @@
+errors: null
+tags: []
+to_json:
+  os: {type: os}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_null_values3.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_null_values3.pysnap
new file mode 100644
index 0000000000..008cf585dd
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_null_values3.pysnap
@@ -0,0 +1,4 @@
+errors: null
+tags: []
+to_json:
+  os: {type: os}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_os.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_os.pysnap
new file mode 100644
index 0000000000..7cfdf4270f
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_os.pysnap
@@ -0,0 +1,7 @@
+errors: null
+tags:
+- [os, Windows 95]
+- [os.name, Windows]
+- [os.rooted, 'yes']
+to_json:
+  os: {name: Windows, rooted: true, type: os, version: '95'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_os_normalization.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_os_normalization.pysnap
new file mode 100644
index 0000000000..9a2adcbfde
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_os_normalization.pysnap
@@ -0,0 +1,6 @@
+errors: null
+tags:
+- [os, Windows 6.1.7601]
+- [os.name, Windows]
+to_json:
+  os: {name: Windows, raw_description: Microsoft Windows 6.1.7601 S, type: os, version: 6.1.7601}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_runtime.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_runtime.pysnap
new file mode 100644
index 0000000000..bc9d995864
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_runtime.pysnap
@@ -0,0 +1,6 @@
+errors: null
+tags:
+- [runtime, Java 1.2.3]
+- [runtime.name, Java]
+to_json:
+  runtime: {build: BLAH, name: Java, type: runtime, version: 1.2.3}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_runtime_normalization.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_runtime_normalization.pysnap
new file mode 100644
index 0000000000..c779db74b1
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_contexts/test_runtime_normalization.pysnap
@@ -0,0 +1,7 @@
+errors: null
+tags:
+- [runtime, .NET Framework 4.7.2]
+- [runtime.name, .NET Framework]
+to_json:
+  runtime: {build: '461808', name: .NET Framework, raw_description: .NET Framework
+      4.0.30319.42000, type: runtime, version: 4.7.2}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_basic.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_basic.pysnap
new file mode 100644
index 0000000000..5db04cdf51
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_basic.pysnap
@@ -0,0 +1,9 @@
+culprit: style-src cdn.example.com
+errors: null
+message: Blocked 'style' from 'example.com'
+origin: http://example.com
+tags:
+- [effective-directive, style-src]
+- [blocked-uri, 'http://example.com/lol.css']
+to_json: {blocked_uri: 'http://example.com/lol.css', document_uri: 'http://example.com',
+  effective_directive: style-src, violated_directive: style-src cdn.example.com}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_coerce_blocked_uri_if_missing.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_coerce_blocked_uri_if_missing.pysnap
new file mode 100644
index 0000000000..4852848e72
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_coerce_blocked_uri_if_missing.pysnap
@@ -0,0 +1,9 @@
+culprit: ''
+errors: null
+message: Blocked unsafe (eval() or inline) 'script'
+origin: http://example.com
+tags:
+- [effective-directive, script-src]
+- [blocked-uri, self]
+to_json: {blocked_uri: self, document_uri: 'http://example.com', effective_directive: script-src,
+  violated_directive: ''}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input0.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input0.pysnap
new file mode 100644
index 0000000000..f37fe651b0
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input0.pysnap
@@ -0,0 +1,9 @@
+culprit: style-src http://cdn.example.com
+errors: null
+message: Blocked inline 'style'
+origin: http://example.com/foo
+tags:
+- [effective-directive, style-src]
+- [blocked-uri, self]
+to_json: {blocked_uri: self, document_uri: 'http://example.com/foo', effective_directive: style-src,
+  violated_directive: 'style-src http://cdn.example.com'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input1.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input1.pysnap
new file mode 100644
index 0000000000..fb2a510158
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input1.pysnap
@@ -0,0 +1,9 @@
+culprit: style-src cdn.example.com
+errors: null
+message: Blocked inline 'style'
+origin: http://example.com/foo
+tags:
+- [effective-directive, style-src]
+- [blocked-uri, self]
+to_json: {blocked_uri: self, document_uri: 'http://example.com/foo', effective_directive: style-src,
+  violated_directive: style-src cdn.example.com}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input2.pysnap
new file mode 100644
index 0000000000..82cdf4c22c
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input2.pysnap
@@ -0,0 +1,9 @@
+culprit: style-src cdn.example.com
+errors: null
+message: Blocked inline 'style'
+origin: https://example.com/foo
+tags:
+- [effective-directive, style-src]
+- [blocked-uri, self]
+to_json: {blocked_uri: self, document_uri: 'https://example.com/foo', effective_directive: style-src,
+  violated_directive: style-src cdn.example.com}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input3.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input3.pysnap
new file mode 100644
index 0000000000..4ade9eea48
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input3.pysnap
@@ -0,0 +1,9 @@
+culprit: style-src https://cdn.example.com
+errors: null
+message: Blocked inline 'style'
+origin: http://example.com/foo
+tags:
+- [effective-directive, style-src]
+- [blocked-uri, self]
+to_json: {blocked_uri: self, document_uri: 'http://example.com/foo', effective_directive: style-src,
+  violated_directive: 'style-src https://cdn.example.com'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input4.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input4.pysnap
new file mode 100644
index 0000000000..4c1ee809c5
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input4.pysnap
@@ -0,0 +1,9 @@
+culprit: style-src 'self'
+errors: null
+message: Blocked inline 'style'
+origin: http://example.com/foo
+tags:
+- [effective-directive, style-src]
+- [blocked-uri, self]
+to_json: {blocked_uri: self, document_uri: 'http://example.com/foo', effective_directive: style-src,
+  violated_directive: 'style-src http://example.com'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input5.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input5.pysnap
new file mode 100644
index 0000000000..0f8d059994
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_culprit/input5.pysnap
@@ -0,0 +1,9 @@
+culprit: style-src http://example2.com 'self'
+errors: null
+message: Blocked inline 'style'
+origin: http://example.com/foo
+tags:
+- [effective-directive, style-src]
+- [blocked-uri, self]
+to_json: {blocked_uri: self, document_uri: 'http://example.com/foo', effective_directive: style-src,
+  violated_directive: 'style-src http://example2.com example.com'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input0.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input0.pysnap
new file mode 100644
index 0000000000..bd95985ba2
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input0.pysnap
@@ -0,0 +1,9 @@
+culprit: ''
+errors: null
+message: Blocked 'image' from 'google.com'
+origin: http://example.com/foo
+tags:
+- [effective-directive, img-src]
+- [blocked-uri, 'http://google.com/foo']
+to_json: {blocked_uri: 'http://google.com/foo', document_uri: 'http://example.com/foo',
+  effective_directive: img-src, violated_directive: ''}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input1.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input1.pysnap
new file mode 100644
index 0000000000..428826eabc
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input1.pysnap
@@ -0,0 +1,9 @@
+culprit: ''
+errors: null
+message: Blocked inline 'style'
+origin: http://example.com/foo
+tags:
+- [effective-directive, style-src]
+- [blocked-uri, '']
+to_json: {blocked_uri: '', document_uri: 'http://example.com/foo', effective_directive: style-src,
+  violated_directive: ''}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input2.pysnap
new file mode 100644
index 0000000000..431f6cbf68
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input2.pysnap
@@ -0,0 +1,9 @@
+culprit: script-src 'unsafe-inline'
+errors: null
+message: Blocked unsafe inline 'script'
+origin: http://example.com/foo
+tags:
+- [effective-directive, script-src]
+- [blocked-uri, '']
+to_json: {blocked_uri: '', document_uri: 'http://example.com/foo', effective_directive: script-src,
+  violated_directive: script-src 'unsafe-inline'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input3.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input3.pysnap
new file mode 100644
index 0000000000..7e4d94d76b
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input3.pysnap
@@ -0,0 +1,9 @@
+culprit: script-src 'unsafe-eval'
+errors: null
+message: Blocked unsafe eval() 'script'
+origin: http://example.com/foo
+tags:
+- [effective-directive, script-src]
+- [blocked-uri, '']
+to_json: {blocked_uri: '', document_uri: 'http://example.com/foo', effective_directive: script-src,
+  violated_directive: script-src 'unsafe-eval'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input4.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input4.pysnap
new file mode 100644
index 0000000000..f9b6ef9b6c
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input4.pysnap
@@ -0,0 +1,9 @@
+culprit: script-src 'self'
+errors: null
+message: Blocked unsafe (eval() or inline) 'script'
+origin: http://example.com/foo
+tags:
+- [effective-directive, script-src]
+- [blocked-uri, '']
+to_json: {blocked_uri: '', document_uri: 'http://example.com/foo', effective_directive: script-src,
+  violated_directive: script-src example.com}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input5.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input5.pysnap
new file mode 100644
index 0000000000..449eb09bc6
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input5.pysnap
@@ -0,0 +1,9 @@
+culprit: ''
+errors: null
+message: Blocked 'script' from 'data:'
+origin: http://example.com/foo
+tags:
+- [effective-directive, script-src]
+- [blocked-uri, 'data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D']
+to_json: {blocked_uri: 'data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D', document_uri: 'http://example.com/foo',
+  effective_directive: script-src, violated_directive: ''}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input6.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input6.pysnap
new file mode 100644
index 0000000000..9dbb4078bd
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input6.pysnap
@@ -0,0 +1,9 @@
+culprit: ''
+errors: null
+message: Blocked 'script' from 'data:'
+origin: http://example.com/foo
+tags:
+- [effective-directive, script-src]
+- [blocked-uri, data]
+to_json: {blocked_uri: data, document_uri: 'http://example.com/foo', effective_directive: script-src,
+  violated_directive: ''}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input7.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input7.pysnap
new file mode 100644
index 0000000000..0c6ac4453d
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input7.pysnap
@@ -0,0 +1,9 @@
+culprit: ''
+errors: null
+message: Blocked 'style' from 'fonts.google.com'
+origin: http://example.com/foo
+tags:
+- [effective-directive, style-src-elem]
+- [blocked-uri, 'http://fonts.google.com/foo']
+to_json: {blocked_uri: 'http://fonts.google.com/foo', document_uri: 'http://example.com/foo',
+  effective_directive: style-src-elem, violated_directive: ''}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input8.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input8.pysnap
new file mode 100644
index 0000000000..224de133e0
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_message/input8.pysnap
@@ -0,0 +1,9 @@
+culprit: ''
+errors: null
+message: Blocked 'script' from 'cdn.ajaxapis.com'
+origin: http://example.com/foo
+tags:
+- [effective-directive, script-src-elem]
+- [blocked-uri, 'http://cdn.ajaxapis.com/foo']
+to_json: {blocked_uri: 'http://cdn.ajaxapis.com/foo', document_uri: 'http://example.com/foo',
+  effective_directive: script-src-elem, violated_directive: ''}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_tags_stripe.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_tags_stripe.pysnap
new file mode 100644
index 0000000000..da6bf91a74
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_get_tags_stripe.pysnap
@@ -0,0 +1,9 @@
+culprit: ''
+errors: null
+message: Blocked 'script' from 'api.stripe.com'
+origin: https://example.com
+tags:
+- [effective-directive, script-src]
+- [blocked-uri, 'https://api.stripe.com/v1/tokens']
+to_json: {blocked_uri: 'https://api.stripe.com/v1/tokens?card[number]=xxx', document_uri: 'https://example.com',
+  effective_directive: script-src, violated_directive: ''}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_real_report.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_real_report.pysnap
new file mode 100644
index 0000000000..47d16acf01
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_csp/test_real_report.pysnap
@@ -0,0 +1,22 @@
+culprit: script-src
+errors: null
+message: Blocked 'script' from 'baddomain.com'
+origin: https://sentry.io/sentry/csp/issues/88513416/
+tags:
+- [effective-directive, script-src]
+- [blocked-uri, 'http://baddomain.com/test.js?_=1515535030116']
+to_json: {blocked_uri: 'http://baddomain.com/test.js?_=1515535030116', column_number: 66270,
+  disposition: enforce, document_uri: 'https://sentry.io/sentry/csp/issues/88513416/',
+  effective_directive: script-src, line_number: 24, original_policy: 'default-src
+    *; script-src ''make_csp_snapshot'' ''unsafe-eval'' ''unsafe-inline'' e90d271df3e973c7.global.ssl.fastly.net
+    cdn.ravenjs.com assets.zendesk.com ajax.googleapis.com ssl.google-analytics.com
+    www.googleadservices.com analytics.twitter.com platform.twitter.com *.pingdom.net
+    js.stripe.com api.stripe.com statuspage-production.s3.amazonaws.com s3.amazonaws.com
+    *.google.com www.gstatic.com aui-cdn.atlassian.com www.hipchat.com *.atlassian.net
+    *.jira.com *.zopim.com; font-src * data:; connect-src * wss://*.zopim.com; style-src
+    ''make_csp_snapshot'' ''unsafe-inline'' e90d271df3e973c7.global.ssl.fastly.net
+    s3.amazonaws.com aui-cdn.atlassian.com www.hipchat.com fonts.googleapis.com; img-src
+    * data: blob:; report-uri https://sentry.io/api/54785/csp-report/?sentry_key=f724a8a027db45f5b21507e7142ff78e&sentry_release=39662eb9734f68e56b7f202260bb706be2f4cee7',
+  referrer: 'https://sentry.io/sentry/sentry/releases/7329107476ff14cfa19cf013acd8ce47781bb93a/',
+  script_sample: '', source_file: 'https://e90d271df3e973c7.global.ssl.fastly.net/_static/f0c7c026a4b2a3d2b287ae2d012c9924/sentry/dist/vendor.js',
+  status_code: 0, violated_directive: script-src}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_apple_behavior.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_apple_behavior.pysnap
new file mode 100644
index 0000000000..050d49bf46
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_apple_behavior.pysnap
@@ -0,0 +1,8 @@
+errors: null
+to_json:
+  images:
+  - {cpu_subtype: 0, cpu_type: 16777228, image_addr: '0x100020000', image_size: 32768,
+    image_vmaddr: '0x100000000', name: /var/containers/Bundle/Application/B33C37A8-F933-4B6B-9FFA-152282BFDF13/SentryTest.app/SentryTest,
+    type: apple, uuid: c05b4ddd-69a7-3840-a649-32180d341587}
+  sdk_info: {build: null, dsym_type: none, sdk_name: iOS, version_major: 9, version_minor: 3,
+    version_patchlevel: 0}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_apple_behavior_with_arch.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_apple_behavior_with_arch.pysnap
new file mode 100644
index 0000000000..cb1dc46af0
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_apple_behavior_with_arch.pysnap
@@ -0,0 +1,8 @@
+errors: null
+to_json:
+  images:
+  - {arch: x86_64, cpu_subtype: 0, cpu_type: 16777228, image_addr: '0x100020000',
+    image_size: 32768, image_vmaddr: '0x100000000', name: /var/containers/Bundle/Application/B33C37A8-F933-4B6B-9FFA-152282BFDF13/SentryTest.app/SentryTest,
+    type: apple, uuid: c05b4ddd-69a7-3840-a649-32180d341587}
+  sdk_info: {build: null, dsym_type: none, sdk_name: iOS, version_major: 9, version_minor: 3,
+    version_patchlevel: 0}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_null_values/input0.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_null_values/input0.pysnap
new file mode 100644
index 0000000000..311aaf0602
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_null_values/input0.pysnap
@@ -0,0 +1 @@
+{errors: null, to_json: null}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_null_values/input1.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_null_values/input1.pysnap
new file mode 100644
index 0000000000..311aaf0602
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_null_values/input1.pysnap
@@ -0,0 +1 @@
+{errors: null, to_json: null}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_null_values/input2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_null_values/input2.pysnap
new file mode 100644
index 0000000000..357a099a73
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_null_values/input2.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_proguard_behavior.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_proguard_behavior.pysnap
new file mode 100644
index 0000000000..91d0a62e88
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_proguard_behavior.pysnap
@@ -0,0 +1,4 @@
+errors: null
+to_json:
+  images:
+  - {type: proguard, uuid: c05b4ddd-69a7-3840-a649-32180d341587}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_symbolic_behavior.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_symbolic_behavior.pysnap
new file mode 100644
index 0000000000..2c381b066b
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_symbolic_behavior.pysnap
@@ -0,0 +1,8 @@
+errors: null
+to_json:
+  images:
+  - {id: 3249d99d-0c40-4931-8610-f4e4fb0b6936-1, image_addr: '0x2a0000', image_size: 36864,
+    image_vmaddr: '0x0', name: 'C:\projects\breakpad-tools\windows\Release\crash.exe',
+    type: symbolic}
+  sdk_info: {build: null, dsym_type: none, sdk_name: Windows, version_major: 10, version_minor: 0,
+    version_patchlevel: 14393}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_symbolic_behavior_with_arch.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_symbolic_behavior_with_arch.pysnap
new file mode 100644
index 0000000000..7cac33282a
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_debug_meta/test_symbolic_behavior_with_arch.pysnap
@@ -0,0 +1,8 @@
+errors: null
+to_json:
+  images:
+  - {arch: x86, id: 3249d99d-0c40-4931-8610-f4e4fb0b6936-1, image_addr: '0x2a0000',
+    image_size: 36864, image_vmaddr: '0x0', name: 'C:\projects\breakpad-tools\windows\Release\crash.exe',
+    type: symbolic}
+  sdk_info: {build: null, dsym_type: none, sdk_name: Windows, version_major: 10, version_minor: 0,
+    version_patchlevel: 14393}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_args_as_keyword_args.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_args_as_keyword_args.pysnap
new file mode 100644
index 0000000000..e449c0dc58
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_args_as_keyword_args.pysnap
@@ -0,0 +1,11 @@
+errors: null
+get_api_context:
+  excOmitted: null
+  hasSystemFrames: false
+  values:
+  - {mechanism: null, module: foo.bar, rawStacktrace: null, stacktrace: null, threadId: null,
+    type: ValueError, value: hello world}
+to_json:
+  values:
+  - {module: foo.bar, type: ValueError, value: hello world}
+to_string: 'ValueError: hello world'
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_args_as_old_style.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_args_as_old_style.pysnap
new file mode 100644
index 0000000000..e449c0dc58
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_args_as_old_style.pysnap
@@ -0,0 +1,11 @@
+errors: null
+get_api_context:
+  excOmitted: null
+  hasSystemFrames: false
+  values:
+  - {mechanism: null, module: foo.bar, rawStacktrace: null, stacktrace: null, threadId: null,
+    type: ValueError, value: hello world}
+to_json:
+  values:
+  - {module: foo.bar, type: ValueError, value: hello world}
+to_string: 'ValueError: hello world'
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_basic.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_basic.pysnap
new file mode 100644
index 0000000000..0e0cc384f2
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_basic.pysnap
@@ -0,0 +1,75 @@
+errors: null
+get_api_context:
+  excOmitted: null
+  hasSystemFrames: true
+  values:
+  - mechanism: null
+    module: foo.bar
+    rawStacktrace: null
+    stacktrace:
+      frames:
+      - absPath: foo/baz.py
+        colNo: null
+        context: []
+        errors: null
+        filename: foo/baz.py
+        function: null
+        inApp: true
+        instructionAddr: null
+        lineNo: 1
+        module: null
+        package: null
+        platform: null
+        symbol: null
+        symbolAddr: null
+        trust: null
+        vars: null
+      framesOmitted: null
+      hasSystemFrames: true
+      registers: null
+    threadId: null
+    type: ValueError
+    value: hello world
+  - mechanism: null
+    module: foo.bar
+    rawStacktrace: null
+    stacktrace:
+      frames:
+      - absPath: foo/baz.py
+        colNo: null
+        context: []
+        errors: null
+        filename: foo/baz.py
+        function: null
+        inApp: true
+        instructionAddr: null
+        lineNo: 1
+        module: null
+        package: null
+        platform: null
+        symbol: null
+        symbolAddr: null
+        trust: null
+        vars: null
+      framesOmitted: null
+      hasSystemFrames: true
+      registers: null
+    threadId: null
+    type: ValueError
+    value: hello world
+to_json:
+  values:
+  - module: foo.bar
+    stacktrace:
+      frames:
+      - {abs_path: foo/baz.py, filename: foo/baz.py, in_app: true, lineno: 1}
+    type: ValueError
+    value: hello world
+  - module: foo.bar
+    stacktrace:
+      frames:
+      - {abs_path: foo/baz.py, filename: foo/baz.py, in_app: true, lineno: 1}
+    type: ValueError
+    value: hello world
+to_string: "ValueError: hello world\n  File \"foo/baz.py\", line 1\n\nValueError:\
+  \ hello world\n  File \"foo/baz.py\", line 1"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_mechanism.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_mechanism.pysnap
new file mode 100644
index 0000000000..2743b63169
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_mechanism.pysnap
@@ -0,0 +1,42 @@
+errors: null
+get_api_context:
+  excOmitted: null
+  hasSystemFrames: true
+  values:
+  - mechanism: {type: generic}
+    module: foo.bar
+    rawStacktrace: null
+    stacktrace:
+      frames:
+      - absPath: foo/baz.py
+        colNo: null
+        context: []
+        errors: null
+        filename: foo/baz.py
+        function: null
+        inApp: true
+        instructionAddr: null
+        lineNo: 1
+        module: null
+        package: null
+        platform: null
+        symbol: null
+        symbolAddr: null
+        trust: null
+        vars: null
+      framesOmitted: null
+      hasSystemFrames: true
+      registers: null
+    threadId: null
+    type: ValueError
+    value: hello world
+to_json:
+  values:
+  - mechanism: {type: generic}
+    module: foo.bar
+    stacktrace:
+      frames:
+      - {abs_path: foo/baz.py, filename: foo/baz.py, in_app: true, lineno: 1}
+    type: ValueError
+    value: hello world
+to_string: "ValueError: hello world\n  File \"foo/baz.py\", line 1"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_mixed_frames.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_mixed_frames.pysnap
new file mode 100644
index 0000000000..b80089e7dd
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_mixed_frames.pysnap
@@ -0,0 +1,75 @@
+errors: null
+get_api_context:
+  excOmitted: null
+  hasSystemFrames: true
+  values:
+  - mechanism: null
+    module: foo.bar
+    rawStacktrace: null
+    stacktrace:
+      frames:
+      - absPath: foo/baz.py
+        colNo: null
+        context: []
+        errors: null
+        filename: foo/baz.py
+        function: null
+        inApp: true
+        instructionAddr: null
+        lineNo: 1
+        module: null
+        package: null
+        platform: null
+        symbol: null
+        symbolAddr: null
+        trust: null
+        vars: null
+      framesOmitted: null
+      hasSystemFrames: true
+      registers: null
+    threadId: null
+    type: ValueError
+    value: hello world
+  - mechanism: null
+    module: foo.bar
+    rawStacktrace: null
+    stacktrace:
+      frames:
+      - absPath: foo/baz.py
+        colNo: null
+        context: []
+        errors: null
+        filename: foo/baz.py
+        function: null
+        inApp: false
+        instructionAddr: null
+        lineNo: 1
+        module: null
+        package: null
+        platform: null
+        symbol: null
+        symbolAddr: null
+        trust: null
+        vars: null
+      framesOmitted: null
+      hasSystemFrames: false
+      registers: null
+    threadId: null
+    type: ValueError
+    value: hello world
+to_json:
+  values:
+  - module: foo.bar
+    stacktrace:
+      frames:
+      - {abs_path: foo/baz.py, filename: foo/baz.py, in_app: true, lineno: 1}
+    type: ValueError
+    value: hello world
+  - module: foo.bar
+    stacktrace:
+      frames:
+      - {abs_path: foo/baz.py, filename: foo/baz.py, in_app: false, lineno: 1}
+    type: ValueError
+    value: hello world
+to_string: "ValueError: hello world\n  File \"foo/baz.py\", line 1\n\nValueError:\
+  \ hello world\n  File \"foo/baz.py\", line 1"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_only_app_frames.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_only_app_frames.pysnap
new file mode 100644
index 0000000000..51b1555399
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_only_app_frames.pysnap
@@ -0,0 +1,75 @@
+errors: null
+get_api_context:
+  excOmitted: null
+  hasSystemFrames: false
+  values:
+  - mechanism: null
+    module: foo.bar
+    rawStacktrace: null
+    stacktrace:
+      frames:
+      - absPath: foo/baz.py
+        colNo: null
+        context: []
+        errors: null
+        filename: foo/baz.py
+        function: null
+        inApp: false
+        instructionAddr: null
+        lineNo: 1
+        module: null
+        package: null
+        platform: null
+        symbol: null
+        symbolAddr: null
+        trust: null
+        vars: null
+      framesOmitted: null
+      hasSystemFrames: false
+      registers: null
+    threadId: null
+    type: ValueError
+    value: hello world
+  - mechanism: null
+    module: foo.bar
+    rawStacktrace: null
+    stacktrace:
+      frames:
+      - absPath: foo/baz.py
+        colNo: null
+        context: []
+        errors: null
+        filename: foo/baz.py
+        function: null
+        inApp: false
+        instructionAddr: null
+        lineNo: 1
+        module: null
+        package: null
+        platform: null
+        symbol: null
+        symbolAddr: null
+        trust: null
+        vars: null
+      framesOmitted: null
+      hasSystemFrames: false
+      registers: null
+    threadId: null
+    type: ValueError
+    value: hello world
+to_json:
+  values:
+  - module: foo.bar
+    stacktrace:
+      frames:
+      - {abs_path: foo/baz.py, filename: foo/baz.py, in_app: false, lineno: 1}
+    type: ValueError
+    value: hello world
+  - module: foo.bar
+    stacktrace:
+      frames:
+      - {abs_path: foo/baz.py, filename: foo/baz.py, in_app: false, lineno: 1}
+    type: ValueError
+    value: hello world
+to_string: "ValueError: hello world\n  File \"foo/baz.py\", line 1\n\nValueError:\
+  \ hello world\n  File \"foo/baz.py\", line 1"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_only_system_frames.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_only_system_frames.pysnap
new file mode 100644
index 0000000000..51b1555399
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_only_system_frames.pysnap
@@ -0,0 +1,75 @@
+errors: null
+get_api_context:
+  excOmitted: null
+  hasSystemFrames: false
+  values:
+  - mechanism: null
+    module: foo.bar
+    rawStacktrace: null
+    stacktrace:
+      frames:
+      - absPath: foo/baz.py
+        colNo: null
+        context: []
+        errors: null
+        filename: foo/baz.py
+        function: null
+        inApp: false
+        instructionAddr: null
+        lineNo: 1
+        module: null
+        package: null
+        platform: null
+        symbol: null
+        symbolAddr: null
+        trust: null
+        vars: null
+      framesOmitted: null
+      hasSystemFrames: false
+      registers: null
+    threadId: null
+    type: ValueError
+    value: hello world
+  - mechanism: null
+    module: foo.bar
+    rawStacktrace: null
+    stacktrace:
+      frames:
+      - absPath: foo/baz.py
+        colNo: null
+        context: []
+        errors: null
+        filename: foo/baz.py
+        function: null
+        inApp: false
+        instructionAddr: null
+        lineNo: 1
+        module: null
+        package: null
+        platform: null
+        symbol: null
+        symbolAddr: null
+        trust: null
+        vars: null
+      framesOmitted: null
+      hasSystemFrames: false
+      registers: null
+    threadId: null
+    type: ValueError
+    value: hello world
+to_json:
+  values:
+  - module: foo.bar
+    stacktrace:
+      frames:
+      - {abs_path: foo/baz.py, filename: foo/baz.py, in_app: false, lineno: 1}
+    type: ValueError
+    value: hello world
+  - module: foo.bar
+    stacktrace:
+      frames:
+      - {abs_path: foo/baz.py, filename: foo/baz.py, in_app: false, lineno: 1}
+    type: ValueError
+    value: hello world
+to_string: "ValueError: hello world\n  File \"foo/baz.py\", line 1\n\nValueError:\
+  \ hello world\n  File \"foo/baz.py\", line 1"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_raw_stacks.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_raw_stacks.pysnap
new file mode 100644
index 0000000000..528ab88b9b
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_raw_stacks.pysnap
@@ -0,0 +1,64 @@
+errors: null
+get_api_context:
+  excOmitted: null
+  hasSystemFrames: true
+  values:
+  - mechanism: null
+    module: foobar
+    rawStacktrace:
+      frames:
+      - absPath: null
+        colNo: null
+        context: []
+        errors: null
+        filename: null
+        function: <redacted>
+        inApp: true
+        instructionAddr: null
+        lineNo: 1
+        module: null
+        package: null
+        platform: null
+        symbol: null
+        symbolAddr: null
+        trust: null
+        vars: null
+      framesOmitted: null
+      hasSystemFrames: true
+      registers: null
+    stacktrace:
+      frames:
+      - absPath: foo/baz.c
+        colNo: null
+        context: []
+        errors: null
+        filename: foo/baz.c
+        function: main
+        inApp: true
+        instructionAddr: null
+        lineNo: 1
+        module: null
+        package: null
+        platform: null
+        symbol: null
+        symbolAddr: null
+        trust: null
+        vars: null
+      framesOmitted: null
+      hasSystemFrames: true
+      registers: null
+    threadId: null
+    type: ValueError
+    value: hello world
+to_json:
+  values:
+  - module: foobar
+    raw_stacktrace:
+      frames:
+      - {function: <redacted>, in_app: true, lineno: 1}
+    stacktrace:
+      frames:
+      - {abs_path: foo/baz.c, filename: foo/baz.c, function: main, in_app: true, lineno: 1}
+    type: ValueError
+    value: hello world
+to_string: "ValueError: hello world\n  File \"foo/baz.c\", line 1, in main"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_symbols.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_symbols.pysnap
new file mode 100644
index 0000000000..0fb2a96d5a
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_context_with_symbols.pysnap
@@ -0,0 +1,42 @@
+errors: null
+get_api_context:
+  excOmitted: null
+  hasSystemFrames: true
+  values:
+  - mechanism: null
+    module: foo.bar
+    rawStacktrace: null
+    stacktrace:
+      frames:
+      - absPath: foo/baz.py
+        colNo: null
+        context: []
+        errors: null
+        filename: foo/baz.py
+        function: myfunc
+        inApp: true
+        instructionAddr: null
+        lineNo: 1
+        module: null
+        package: null
+        platform: null
+        symbol: Class.myfunc
+        symbolAddr: null
+        trust: null
+        vars: null
+      framesOmitted: null
+      hasSystemFrames: true
+      registers: null
+    threadId: null
+    type: ValueError
+    value: hello world
+to_json:
+  values:
+  - module: foo.bar
+    stacktrace:
+      frames:
+      - {abs_path: foo/baz.py, filename: foo/baz.py, function: myfunc, in_app: true,
+        lineno: 1, symbol: Class.myfunc}
+    type: ValueError
+    value: hello world
+to_string: "ValueError: hello world\n  File \"foo/baz.py\", line 1, in myfunc"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_non_string_value_with_no_type.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_non_string_value_with_no_type.pysnap
new file mode 100644
index 0000000000..6d1ea2f1da
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_non_string_value_with_no_type.pysnap
@@ -0,0 +1,11 @@
+errors: null
+get_api_context:
+  excOmitted: null
+  hasSystemFrames: false
+  values:
+  - {mechanism: null, module: null, rawStacktrace: null, stacktrace: null, threadId: null,
+    type: null, value: '{"foo":"bar"}'}
+to_json:
+  values:
+  - {value: '{"foo":"bar"}'}
+to_string: 'None: {"foo":"bar"}'
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_slim_exception_data_over_max.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_slim_exception_data_over_max.pysnap
new file mode 100644
index 0000000000..6ffd58cfed
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_slim_exception_data_over_max.pysnap
@@ -0,0 +1,91 @@
+values:
+- stacktrace:
+    frames:
+    - abs_path: exc 0 frame 0
+      context_line: b
+      filename: exc 0 frame 0
+      post_context: [c]
+      pre_context: [a]
+      vars: {foo: bar}
+    - abs_path: exc 0 frame 1
+      context_line: b
+      filename: exc 0 frame 1
+      post_context: [c]
+      pre_context: [a]
+      vars: {foo: bar}
+    - abs_path: exc 0 frame 2
+      context_line: b
+      filename: exc 0 frame 2
+      post_context: [c]
+      pre_context: [a]
+      vars: {foo: bar}
+    - abs_path: exc 0 frame 3
+      context_line: b
+      filename: exc 0 frame 3
+      post_context: [c]
+      pre_context: [a]
+      vars: {foo: bar}
+    - abs_path: exc 0 frame 4
+      context_line: b
+      filename: exc 0 frame 4
+      post_context: [c]
+      pre_context: [a]
+      vars: {foo: bar}
+  value: exc 0
+- stacktrace:
+    frames:
+    - {abs_path: exc 1 frame 0, context_line: b, filename: exc 1 frame 0}
+    - {abs_path: exc 1 frame 1, context_line: b, filename: exc 1 frame 1}
+    - {abs_path: exc 1 frame 2, context_line: b, filename: exc 1 frame 2}
+    - {abs_path: exc 1 frame 3, context_line: b, filename: exc 1 frame 3}
+    - {abs_path: exc 1 frame 4, context_line: b, filename: exc 1 frame 4}
+  value: exc 1
+- stacktrace:
+    frames:
+    - {abs_path: exc 2 frame 0, context_line: b, filename: exc 2 frame 0}
+    - {abs_path: exc 2 frame 1, context_line: b, filename: exc 2 frame 1}
+    - {abs_path: exc 2 frame 2, context_line: b, filename: exc 2 frame 2}
+    - {abs_path: exc 2 frame 3, context_line: b, filename: exc 2 frame 3}
+    - {abs_path: exc 2 frame 4, context_line: b, filename: exc 2 frame 4}
+  value: exc 2
+- stacktrace:
+    frames:
+    - {abs_path: exc 3 frame 0, context_line: b, filename: exc 3 frame 0}
+    - {abs_path: exc 3 frame 1, context_line: b, filename: exc 3 frame 1}
+    - {abs_path: exc 3 frame 2, context_line: b, filename: exc 3 frame 2}
+    - {abs_path: exc 3 frame 3, context_line: b, filename: exc 3 frame 3}
+    - {abs_path: exc 3 frame 4, context_line: b, filename: exc 3 frame 4}
+  value: exc 3
+- stacktrace:
+    frames:
+    - abs_path: exc 4 frame 0
+      context_line: b
+      filename: exc 4 frame 0
+      post_context: [c]
+      pre_context: [a]
+      vars: {foo: bar}
+    - abs_path: exc 4 frame 1
+      context_line: b
+      filename: exc 4 frame 1
+      post_context: [c]
+      pre_context: [a]
+      vars: {foo: bar}
+    - abs_path: exc 4 frame 2
+      context_line: b
+      filename: exc 4 frame 2
+      post_context: [c]
+      pre_context: [a]
+      vars: {foo: bar}
+    - abs_path: exc 4 frame 3
+      context_line: b
+      filename: exc 4 frame 3
+      post_context: [c]
+      pre_context: [a]
+      vars: {foo: bar}
+    - abs_path: exc 4 frame 4
+      context_line: b
+      filename: exc 4 frame 4
+      post_context: [c]
+      pre_context: [a]
+      vars: {foo: bar}
+  value: exc 4
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_slim_exception_data_under_max.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_slim_exception_data_under_max.pysnap
new file mode 100644
index 0000000000..2c0bf25c83
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_exception/test_slim_exception_data_under_max.pysnap
@@ -0,0 +1,5 @@
+values:
+- stacktrace:
+    frames:
+    - {abs_path: foo, filename: foo}
+  value: foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_expectct/test_basic.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_expectct/test_basic.pysnap
new file mode 100644
index 0000000000..080ea42c1d
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_expectct/test_basic.pysnap
@@ -0,0 +1,14 @@
+errors: null
+to_json:
+  date_time: '2014-04-06T13:00:50Z'
+  effective_expiration_date: '2014-05-01T12:40:50Z'
+  hostname: www.example.com
+  port: 443
+  scts:
+  - {serialized_sct: ABCD==, source: embedded, status: invalid, version: 1}
+  served_certificate_chain: ['-----BEGIN CERTIFICATE-----
+
+      -----END CERTIFICATE-----']
+  validated_certificate_chain: ['-----BEGIN CERTIFICATE-----
+
+      -----END CERTIFICATE-----']
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_expectct/test_from_raw.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_expectct/test_from_raw.pysnap
new file mode 100644
index 0000000000..080ea42c1d
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_expectct/test_from_raw.pysnap
@@ -0,0 +1,14 @@
+errors: null
+to_json:
+  date_time: '2014-04-06T13:00:50Z'
+  effective_expiration_date: '2014-05-01T12:40:50Z'
+  hostname: www.example.com
+  port: 443
+  scts:
+  - {serialized_sct: ABCD==, source: embedded, status: invalid, version: 1}
+  served_certificate_chain: ['-----BEGIN CERTIFICATE-----
+
+      -----END CERTIFICATE-----']
+  validated_certificate_chain: ['-----BEGIN CERTIFICATE-----
+
+      -----END CERTIFICATE-----']
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_expectct/test_invalid_format.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_expectct/test_invalid_format.pysnap
new file mode 100644
index 0000000000..58963823f5
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_expectct/test_invalid_format.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {hostname: www.example.com}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_expectstaple/test_basic.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_expectstaple/test_basic.pysnap
new file mode 100644
index 0000000000..25731133f0
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_expectstaple/test_basic.pysnap
@@ -0,0 +1,14 @@
+errors: null
+to_json:
+  cert_status: REVOKED
+  date_time: '2014-04-06T13:00:50Z'
+  effective_expiration_date: '2014-05-01T12:40:50Z'
+  hostname: www.example.com
+  port: 443
+  response_status: ERROR_RESPONSE
+  served_certificate_chain: ['-----BEGIN CERTIFICATE-----
+
+      -----END CERTIFICATE-----']
+  validated_certificate_chain: ['-----BEGIN CERTIFICATE-----
+
+      -----END CERTIFICATE-----']
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_expectstaple/test_from_raw.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_expectstaple/test_from_raw.pysnap
new file mode 100644
index 0000000000..25731133f0
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_expectstaple/test_from_raw.pysnap
@@ -0,0 +1,14 @@
+errors: null
+to_json:
+  cert_status: REVOKED
+  date_time: '2014-04-06T13:00:50Z'
+  effective_expiration_date: '2014-05-01T12:40:50Z'
+  hostname: www.example.com
+  port: 443
+  response_status: ERROR_RESPONSE
+  served_certificate_chain: ['-----BEGIN CERTIFICATE-----
+
+      -----END CERTIFICATE-----']
+  validated_certificate_chain: ['-----BEGIN CERTIFICATE-----
+
+      -----END CERTIFICATE-----']
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_address_normalization.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_address_normalization.pysnap
new file mode 100644
index 0000000000..86db0d664c
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_address_normalization.pysnap
@@ -0,0 +1,3 @@
+errors: null
+to_json: {abs_path: blah.c, filename: blah.c, function: main, image_addr: '0x0', instruction_addr: '0x1e240',
+  lineno: 1, symbol_addr: '0x1e23a'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_bad_input/input0.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_bad_input/input0.pysnap
new file mode 100644
index 0000000000..e9540218bc
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_bad_input/input0.pysnap
@@ -0,0 +1,4 @@
+errors:
+- {name: stacktrace.frames.0.abs_path, reason: expected a string, type: invalid_data,
+  value: 1}
+to_json: {}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_bad_input/input1.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_bad_input/input1.pysnap
new file mode 100644
index 0000000000..ddc75b510b
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_bad_input/input1.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {abs_path: foo, filename: foo}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_bad_input/input2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_bad_input/input2.pysnap
new file mode 100644
index 0000000000..d3b3e64c91
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_bad_input/input2.pysnap
@@ -0,0 +1,4 @@
+errors:
+- {name: stacktrace.frames.0.function, reason: expected a string, type: invalid_data,
+  value: 1}
+to_json: {}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_bad_input/input3.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_bad_input/input3.pysnap
new file mode 100644
index 0000000000..17aeb64a16
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_bad_input/input3.pysnap
@@ -0,0 +1,4 @@
+errors:
+- {name: stacktrace.frames.0.module, reason: expected a string, type: invalid_data,
+  value: 1}
+to_json: {}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_bad_input/input4.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_bad_input/input4.pysnap
new file mode 100644
index 0000000000..357a099a73
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_bad_input/input4.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_context_with_nan/inf.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_context_with_nan/inf.pysnap
new file mode 100644
index 0000000000..fbf082e0f8
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_context_with_nan/inf.pysnap
@@ -0,0 +1,5 @@
+errors: null
+to_json:
+  abs_path: x
+  filename: x
+  vars: {x: 0}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_context_with_nan/nan.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_context_with_nan/nan.pysnap
new file mode 100644
index 0000000000..fbf082e0f8
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_context_with_nan/nan.pysnap
@@ -0,0 +1,5 @@
+errors: null
+to_json:
+  abs_path: x
+  filename: x
+  vars: {x: 0}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_context_with_nan/neginf.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_context_with_nan/neginf.pysnap
new file mode 100644
index 0000000000..fbf082e0f8
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_frame/test_context_with_nan/neginf.pysnap
@@ -0,0 +1,5 @@
+errors: null
+to_json:
+  abs_path: x
+  filename: x
+  vars: {x: 0}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_geo/test_null_values/input0.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_geo/test_null_values/input0.pysnap
new file mode 100644
index 0000000000..311aaf0602
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_geo/test_null_values/input0.pysnap
@@ -0,0 +1 @@
+{errors: null, to_json: null}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_geo/test_null_values/input1.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_geo/test_null_values/input1.pysnap
new file mode 100644
index 0000000000..311aaf0602
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_geo/test_null_values/input1.pysnap
@@ -0,0 +1 @@
+{errors: null, to_json: null}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_geo/test_null_values/input2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_geo/test_null_values/input2.pysnap
new file mode 100644
index 0000000000..311aaf0602
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_geo/test_null_values/input2.pysnap
@@ -0,0 +1 @@
+{errors: null, to_json: null}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_geo/test_null_values/input3.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_geo/test_null_values/input3.pysnap
new file mode 100644
index 0000000000..311aaf0602
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_geo/test_null_values/input3.pysnap
@@ -0,0 +1 @@
+{errors: null, to_json: null}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_geo/test_serialize_behavior.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_geo/test_serialize_behavior.pysnap
new file mode 100644
index 0000000000..6c2c5fbb9e
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_geo/test_serialize_behavior.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {city: San Francisco, country_code: US, region: CA}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_basic.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_basic.pysnap
new file mode 100644
index 0000000000..e190c0bdb8
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_basic.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {url: 'http://example.com/'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_cookies_as_string.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_cookies_as_string.pysnap
new file mode 100644
index 0000000000..fa379601b2
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_cookies_as_string.pysnap
@@ -0,0 +1,6 @@
+errors: null
+to_json:
+  cookies:
+  - [a, b]
+  - [c, d]
+  url: http://example.com/
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_cookies_in_header.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_cookies_in_header.pysnap
new file mode 100644
index 0000000000..fa379601b2
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_cookies_in_header.pysnap
@@ -0,0 +1,6 @@
+errors: null
+to_json:
+  cookies:
+  - [a, b]
+  - [c, d]
+  url: http://example.com/
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_cookies_in_header2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_cookies_in_header2.pysnap
new file mode 100644
index 0000000000..5b0bba67a8
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_cookies_in_header2.pysnap
@@ -0,0 +1,5 @@
+errors: null
+to_json:
+  cookies:
+  - [foo, bar]
+  url: http://example.com/
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_data_as_dict.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_data_as_dict.pysnap
new file mode 100644
index 0000000000..6902703c21
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_data_as_dict.pysnap
@@ -0,0 +1,4 @@
+errors: null
+to_json:
+  data: {foo: bar}
+  url: http://example.com/
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_full.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_full.pysnap
new file mode 100644
index 0000000000..1948a9fa58
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_full.pysnap
@@ -0,0 +1,13 @@
+errors: null
+to_json:
+  cookies:
+  - [foo, bar]
+  data: hello world
+  env: {bing: bong}
+  fragment: foobar
+  headers:
+  - [X-Foo-Bar, baz]
+  method: GET
+  query_string:
+  - [foo, bar]
+  url: http://example.com/
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_header_value_list.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_header_value_list.pysnap
new file mode 100644
index 0000000000..c0186070fe
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_header_value_list.pysnap
@@ -0,0 +1,5 @@
+errors: null
+to_json:
+  headers:
+  - [Foo, '1,2']
+  url: http://example.com/
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_header_value_str.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_header_value_str.pysnap
new file mode 100644
index 0000000000..7ebf754eca
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_header_value_str.pysnap
@@ -0,0 +1,5 @@
+errors: null
+to_json:
+  headers:
+  - [Foo, '1']
+  url: http://example.com/
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_infer_json_content_type.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_infer_json_content_type.pysnap
new file mode 100644
index 0000000000..dd88b9682b
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_infer_json_content_type.pysnap
@@ -0,0 +1,5 @@
+errors: null
+to_json:
+  data: {foo: bar}
+  inferred_content_type: application/json
+  url: http://example.com/
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_infer_urlencoded_content_type.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_infer_urlencoded_content_type.pysnap
new file mode 100644
index 0000000000..9884ddb0d4
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_infer_urlencoded_content_type.pysnap
@@ -0,0 +1,5 @@
+errors: null
+to_json:
+  data: {foo: bar}
+  inferred_content_type: application/x-www-form-urlencoded
+  url: http://example.com/
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_invalid_method.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_invalid_method.pysnap
new file mode 100644
index 0000000000..3e56702d78
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_invalid_method.pysnap
@@ -0,0 +1,3 @@
+errors:
+- {name: request.method, type: invalid_data, value: '1234'}
+to_json: {url: 'http://example.com/'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_invalid_method2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_invalid_method2.pysnap
new file mode 100644
index 0000000000..e9ce52ae1b
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_invalid_method2.pysnap
@@ -0,0 +1,3 @@
+errors:
+- {name: request.method, type: invalid_data, value: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}
+to_json: {url: 'http://example.com/'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_invalid_method3.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_invalid_method3.pysnap
new file mode 100644
index 0000000000..96710badea
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_invalid_method3.pysnap
@@ -0,0 +1,3 @@
+errors:
+- {name: request.method, type: invalid_data, value: A}
+to_json: {url: 'http://example.com/'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_json_data.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_json_data.pysnap
new file mode 100644
index 0000000000..555d25f2d3
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_json_data.pysnap
@@ -0,0 +1,7 @@
+errors: null
+to_json:
+  data: {foo: bar}
+  headers:
+  - [Content-Type, application/json]
+  inferred_content_type: application/json
+  url: http://example.com/
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_query_string_and_fragment_as_params.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_query_string_and_fragment_as_params.pysnap
new file mode 100644
index 0000000000..ed0a169d2d
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_query_string_and_fragment_as_params.pysnap
@@ -0,0 +1,6 @@
+errors: null
+to_json:
+  fragment: fragment
+  query_string:
+  - ["foo\uFFFD", "bar\u2026"]
+  url: http://example.com/
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_query_string_and_fragment_in_url.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_query_string_and_fragment_in_url.pysnap
new file mode 100644
index 0000000000..85e58a898f
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_query_string_and_fragment_in_url.pysnap
@@ -0,0 +1,6 @@
+errors: null
+to_json:
+  fragment: fragment...
+  query_string:
+  - ["foo\uFFFD", bar]
+  url: http://example.com/
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_query_string_as_bytes.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_query_string_as_bytes.pysnap
new file mode 100644
index 0000000000..faa8667141
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_query_string_as_bytes.pysnap
@@ -0,0 +1,5 @@
+errors: null
+to_json:
+  query_string:
+  - [foo, "\0"]
+  url: http://example.com/
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_query_string_as_dict.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_query_string_as_dict.pysnap
new file mode 100644
index 0000000000..243e18d2ed
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_query_string_as_dict.pysnap
@@ -0,0 +1,5 @@
+errors: null
+to_json:
+  query_string:
+  - [foo, bar]
+  url: http://example.com/
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_query_string_as_pairlist.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_query_string_as_pairlist.pysnap
new file mode 100644
index 0000000000..243e18d2ed
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_query_string_as_pairlist.pysnap
@@ -0,0 +1,5 @@
+errors: null
+to_json:
+  query_string:
+  - [foo, bar]
+  url: http://example.com/
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_unknown_method.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_unknown_method.pysnap
new file mode 100644
index 0000000000..eedc137a19
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_unknown_method.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {method: TEST, url: 'http://example.com/'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_unknown_method2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_unknown_method2.pysnap
new file mode 100644
index 0000000000..ec27f36713
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_unknown_method2.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {method: FOO-BAR, url: 'http://example.com/'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_unknown_method3.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_unknown_method3.pysnap
new file mode 100644
index 0000000000..92201e7c36
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_unknown_method3.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {method: FOO_BAR, url: 'http://example.com/'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_http/test_urlencoded_data.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_urlencoded_data.pysnap
new file mode 100644
index 0000000000..4097db120f
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_http/test_urlencoded_data.pysnap
@@ -0,0 +1,7 @@
+errors: null
+to_json:
+  data: {foo: bar}
+  headers:
+  - [Content-Type, application/x-www-form-urlencoded]
+  inferred_content_type: application/x-www-form-urlencoded
+  url: http://example.com/
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_data.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_data.pysnap
new file mode 100644
index 0000000000..1c7b8b090c
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_data.pysnap
@@ -0,0 +1,6 @@
+errors: null
+tags:
+- [mechanism, generic]
+to_json:
+  data: {relevant_address: '0x1'}
+  type: generic
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_empty_data.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_empty_data.pysnap
new file mode 100644
index 0000000000..2e038e6556
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_empty_data.pysnap
@@ -0,0 +1,4 @@
+errors: null
+tags:
+- [mechanism, generic]
+to_json: {type: generic}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_empty_mechanism.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_empty_mechanism.pysnap
new file mode 100644
index 0000000000..2e038e6556
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_empty_mechanism.pysnap
@@ -0,0 +1,4 @@
+errors: null
+tags:
+- [mechanism, generic]
+to_json: {type: generic}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_full_errno_meta.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_full_errno_meta.pysnap
new file mode 100644
index 0000000000..cdcdf32b0b
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_full_errno_meta.pysnap
@@ -0,0 +1,7 @@
+errors: null
+tags:
+- [mechanism, generic]
+to_json:
+  meta:
+    errno: {name: ENOENT, number: 2}
+  type: generic
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_full_mach_meta.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_full_mach_meta.pysnap
new file mode 100644
index 0000000000..b974169820
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_full_mach_meta.pysnap
@@ -0,0 +1,7 @@
+errors: null
+tags:
+- [mechanism, generic]
+to_json:
+  meta:
+    mach_exception: {code: 0, exception: 10, name: EXC_CRASH, subcode: 0}
+  type: generic
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_full_signal_meta.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_full_signal_meta.pysnap
new file mode 100644
index 0000000000..df5febe3ec
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_full_signal_meta.pysnap
@@ -0,0 +1,7 @@
+errors: null
+tags:
+- [mechanism, generic]
+to_json:
+  meta:
+    signal: {code: 0, code_name: BUS_NOOP, name: SIGBUS, number: 10}
+  type: generic
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_min_errno_meta.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_min_errno_meta.pysnap
new file mode 100644
index 0000000000..009c621b9f
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_min_errno_meta.pysnap
@@ -0,0 +1,7 @@
+errors: null
+tags:
+- [mechanism, generic]
+to_json:
+  meta:
+    errno: {number: 2}
+  type: generic
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_min_mach_meta.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_min_mach_meta.pysnap
new file mode 100644
index 0000000000..b974169820
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_min_mach_meta.pysnap
@@ -0,0 +1,7 @@
+errors: null
+tags:
+- [mechanism, generic]
+to_json:
+  meta:
+    mach_exception: {code: 0, exception: 10, name: EXC_CRASH, subcode: 0}
+  type: generic
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_min_signal_meta.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_min_signal_meta.pysnap
new file mode 100644
index 0000000000..c1eded8677
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_min_signal_meta.pysnap
@@ -0,0 +1,7 @@
+errors: null
+tags:
+- [mechanism, generic]
+to_json:
+  meta:
+    signal: {code: 0, number: 10}
+  type: generic
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_tag.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_tag.pysnap
new file mode 100644
index 0000000000..2e038e6556
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_tag.pysnap
@@ -0,0 +1,4 @@
+errors: null
+tags:
+- [mechanism, generic]
+to_json: {type: generic}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_tag_with_handled.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_tag_with_handled.pysnap
new file mode 100644
index 0000000000..02d90f30cf
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_mechanism/test_tag_with_handled.pysnap
@@ -0,0 +1,5 @@
+errors: null
+tags:
+- [handled, 'no']
+- [mechanism, generic]
+to_json: {handled: false, type: generic}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_message/test_basic.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_message/test_basic.pysnap
new file mode 100644
index 0000000000..733192aa1e
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_message/test_basic.pysnap
@@ -0,0 +1,5 @@
+errors: null
+to_json:
+  formatted: Hello there world!
+  message: Hello there %s!
+  params: [world]
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_message/test_discards_dupe_message.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_message/test_discards_dupe_message.pysnap
new file mode 100644
index 0000000000..dc131396d3
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_message/test_discards_dupe_message.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {formatted: foo bar}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_message/test_format_braces.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_message/test_format_braces.pysnap
new file mode 100644
index 0000000000..d753999419
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_message/test_format_braces.pysnap
@@ -0,0 +1,5 @@
+errors: null
+to_json:
+  formatted: Hello there world!
+  message: Hello there {}!
+  params: [world]
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_message/test_format_kwargs.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_message/test_format_kwargs.pysnap
new file mode 100644
index 0000000000..abbb60a199
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_message/test_format_kwargs.pysnap
@@ -0,0 +1,5 @@
+errors: null
+to_json:
+  formatted: Hello there world!
+  message: Hello there %(name)s!
+  params: {name: world}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_message/test_retains_formatted.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_message/test_retains_formatted.pysnap
new file mode 100644
index 0000000000..6b3a147a15
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_message/test_retains_formatted.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {formatted: foo bar baz, message: foo bar}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_message/test_stringify_primitives/4.2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_message/test_stringify_primitives/4.2.pysnap
new file mode 100644
index 0000000000..5e3e4984b4
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_message/test_stringify_primitives/4.2.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {formatted: '4.2'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_message/test_stringify_primitives/42.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_message/test_stringify_primitives/42.pysnap
new file mode 100644
index 0000000000..8cd258f53f
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_message/test_stringify_primitives/42.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {formatted: '42'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_message/test_stringify_primitives/True.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_message/test_stringify_primitives/True.pysnap
new file mode 100644
index 0000000000..0e5bf97f29
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_message/test_stringify_primitives/True.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {formatted: 'true'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_sdk/test_missing_name.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_sdk/test_missing_name.pysnap
new file mode 100644
index 0000000000..7a2c02b5df
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_sdk/test_missing_name.pysnap
@@ -0,0 +1,3 @@
+errors:
+- {name: sdk.name, type: missing_attribute}
+to_json: {version: '1.0'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_sdk/test_missing_version.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_sdk/test_missing_version.pysnap
new file mode 100644
index 0000000000..c979cbef56
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_sdk/test_missing_version.pysnap
@@ -0,0 +1,3 @@
+errors:
+- {name: sdk.version, type: missing_attribute}
+to_json: {name: sentry-unity}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_sdk/test_serialize_behavior.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_sdk/test_serialize_behavior.pysnap
new file mode 100644
index 0000000000..b76ba296ea
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_sdk/test_serialize_behavior.pysnap
@@ -0,0 +1,7 @@
+errors: null
+to_json:
+  integrations: [log4j]
+  name: sentry-java
+  packages:
+  - {name: 'maven:io.sentry.sentry', version: 1.7.10}
+  version: '1.0'
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_basic.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_basic.pysnap
new file mode 100644
index 0000000000..b68e4dc471
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_basic.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {module: foo.bar, type: ValueError, value: hello world}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_coerces_object_value_to_string.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_coerces_object_value_to_string.pysnap
new file mode 100644
index 0000000000..f56626a291
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_coerces_object_value_to_string.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {type: ValueError, value: '{"unauthorized":true}'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_handles_type_in_value.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_handles_type_in_value.pysnap
new file mode 100644
index 0000000000..05ecd2fbfa
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_handles_type_in_value.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {type: ValueError, value: unauthorized}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_handles_type_in_value2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_handles_type_in_value2.pysnap
new file mode 100644
index 0000000000..05ecd2fbfa
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_handles_type_in_value2.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {type: ValueError, value: unauthorized}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_requires_only_type_or_value.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_requires_only_type_or_value.pysnap
new file mode 100644
index 0000000000..bcb23d022d
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_requires_only_type_or_value.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {type: ValueError}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_requires_only_type_or_value2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_requires_only_type_or_value2.pysnap
new file mode 100644
index 0000000000..3d2128a03a
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_requires_only_type_or_value2.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {value: ValueError}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_value_serialization_idempotent.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_value_serialization_idempotent.pysnap
new file mode 100644
index 0000000000..d1d7efaf0f
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_value_serialization_idempotent.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {value: '{"unauthorized":true}'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_value_serialization_idempotent2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_value_serialization_idempotent2.pysnap
new file mode 100644
index 0000000000..d1d7efaf0f
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_single_exception/test_value_serialization_idempotent2.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {value: '{"unauthorized":true}'}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_allows_abs_path_without_filename.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_allows_abs_path_without_filename.pysnap
new file mode 100644
index 0000000000..6e341eb856
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_allows_abs_path_without_filename.pysnap
@@ -0,0 +1,8 @@
+errors: null
+get_stacktrace: "Stacktrace (most recent call last):\n\n  File \"foo/bar/baz.py\"\
+  , line 1"
+to_json:
+  frames:
+  - {abs_path: foo/bar/baz.py, filename: foo/bar/baz.py, lineno: 1}
+to_string: "Stacktrace (most recent call last):\n\n  File \"foo/bar/baz.py\", line\
+  \ 1"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_basic.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_basic.pysnap
new file mode 100644
index 0000000000..f222e69213
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_basic.pysnap
@@ -0,0 +1,9 @@
+errors: null
+get_stacktrace: "Stacktrace (most recent call last):\n\n  File \"foo/bar.py\"\n  File\
+  \ \"foo/baz.py\", line 1"
+to_json:
+  frames:
+  - {abs_path: foo/bar.py, filename: foo/bar.py}
+  - {abs_path: foo/baz.py, filename: foo/baz.py, in_app: true, lineno: 1}
+to_string: "Stacktrace (most recent call last):\n\n  File \"foo/bar.py\"\n  File \"\
+  foo/baz.py\", line 1"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_coerces_url_filenames.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_coerces_url_filenames.pysnap
new file mode 100644
index 0000000000..30b9817b6d
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_coerces_url_filenames.pysnap
@@ -0,0 +1,6 @@
+errors: null
+get_stacktrace: "Stacktrace (most recent call last):\n\n  File \"/foo.js\", line 1"
+to_json:
+  frames:
+  - {abs_path: 'http://foo.com/foo.js', filename: /foo.js, lineno: 1}
+to_string: "Stacktrace (most recent call last):\n\n  File \"/foo.js\", line 1"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_does_not_overwrite_filename.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_does_not_overwrite_filename.pysnap
new file mode 100644
index 0000000000..b284e1d727
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_does_not_overwrite_filename.pysnap
@@ -0,0 +1,6 @@
+errors: null
+get_stacktrace: "Stacktrace (most recent call last):\n\n  File \"foo.js\", line 1"
+to_json:
+  frames:
+  - {abs_path: 'http://foo.com/foo.js', filename: foo.js, lineno: 1}
+to_string: "Stacktrace (most recent call last):\n\n  File \"foo.js\", line 1"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_filename.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_filename.pysnap
new file mode 100644
index 0000000000..b2ff6ea4e5
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_filename.pysnap
@@ -0,0 +1,6 @@
+errors: null
+get_stacktrace: "Stacktrace (most recent call last):\n\n  File \"foo.py\""
+to_json:
+  frames:
+  - {abs_path: foo.py, filename: foo.py}
+to_string: "Stacktrace (most recent call last):\n\n  File \"foo.py\""
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_filename2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_filename2.pysnap
new file mode 100644
index 0000000000..6b8b0021f3
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_filename2.pysnap
@@ -0,0 +1,6 @@
+errors: null
+get_stacktrace: "Stacktrace (most recent call last):\n\n  File \"foo.py\", line 1"
+to_json:
+  frames:
+  - {abs_path: foo.py, filename: foo.py, lineno: 1}
+to_string: "Stacktrace (most recent call last):\n\n  File \"foo.py\", line 1"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_frame_hard_limit.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_frame_hard_limit.pysnap
new file mode 100644
index 0000000000..047196f0bd
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_frame_hard_limit.pysnap
@@ -0,0 +1,386 @@
+errors: null
+get_stacktrace: "Stacktrace (most recent call last):\n\n  File \"Application.java\"\
+  , line 1, in main\n  File \"Application.java\", line 2, in main\n  File \"Application.java\"\
+  , line 3, in main\n  File \"Application.java\", line 4, in main\n  File \"Application.java\"\
+  , line 5, in main\n  File \"Application.java\", line 6, in main\n  File \"Application.java\"\
+  , line 7, in main\n  File \"Application.java\", line 8, in main\n  File \"Application.java\"\
+  , line 9, in main\n  File \"Application.java\", line 10, in main\n  File \"Application.java\"\
+  , line 11, in main\n  File \"Application.java\", line 12, in main\n  File \"Application.java\"\
+  , line 13, in main\n  File \"Application.java\", line 14, in main\n  File \"Application.java\"\
+  , line 15, in main\n  File \"Application.java\", line 16, in main\n  File \"Application.java\"\
+  , line 17, in main\n  File \"Application.java\", line 18, in main\n  File \"Application.java\"\
+  , line 19, in main\n  File \"Application.java\", line 20, in main\n  File \"Application.java\"\
+  , line 21, in main\n  File \"Application.java\", line 22, in main\n  File \"Application.java\"\
+  , line 23, in main\n  File \"Application.java\", line 24, in main\n  File \"Application.java\"\
+  , line 25, in main\n  File \"Application.java\", line 26, in main\n  File \"Application.java\"\
+  , line 27, in main\n  File \"Application.java\", line 28, in main\n  File \"Application.java\"\
+  , line 29, in main\n  File \"Application.java\", line 30, in main\n  File \"Application.java\"\
+  , line 31, in main\n  File \"Application.java\", line 32, in main\n  File \"Application.java\"\
+  , line 33, in main\n  File \"Application.java\", line 34, in main\n  File \"Application.java\"\
+  , line 35, in main\n  File \"Application.java\", line 36, in main\n  File \"Application.java\"\
+  , line 37, in main\n  File \"Application.java\", line 38, in main\n  File \"Application.java\"\
+  , line 39, in main\n  File \"Application.java\", line 40, in main\n  File \"Application.java\"\
+  , line 41, in main\n  File \"Application.java\", line 42, in main\n  File \"Application.java\"\
+  , line 43, in main\n  File \"Application.java\", line 44, in main\n  File \"Application.java\"\
+  , line 45, in main\n  File \"Application.java\", line 46, in main\n  File \"Application.java\"\
+  , line 47, in main\n  File \"Application.java\", line 48, in main\n  File \"Application.java\"\
+  , line 49, in main\n  File \"Application.java\", line 50, in main\n  File \"Application.java\"\
+  , line 51, in main\n  File \"Application.java\", line 52, in main\n  File \"Application.java\"\
+  , line 53, in main\n  File \"Application.java\", line 54, in main\n  File \"Application.java\"\
+  , line 55, in main\n  File \"Application.java\", line 56, in main\n  File \"Application.java\"\
+  , line 57, in main\n  File \"Application.java\", line 58, in main\n  File \"Application.java\"\
+  , line 59, in main\n  File \"Application.java\", line 60, in main\n  File \"Application.java\"\
+  , line 61, in main\n  File \"Application.java\", line 62, in main\n  File \"Application.java\"\
+  , line 63, in main\n  File \"Application.java\", line 64, in main\n  File \"Application.java\"\
+  , line 65, in main\n  File \"Application.java\", line 66, in main\n  File \"Application.java\"\
+  , line 67, in main\n  File \"Application.java\", line 68, in main\n  File \"Application.java\"\
+  , line 69, in main\n  File \"Application.java\", line 70, in main\n  File \"Application.java\"\
+  , line 71, in main\n  File \"Application.java\", line 72, in main\n  File \"Application.java\"\
+  , line 73, in main\n  File \"Application.java\", line 74, in main\n  File \"Application.java\"\
+  , line 75, in main\n  File \"Application.java\", line 76, in main\n  File \"Application.java\"\
+  , line 77, in main\n  File \"Application.java\", line 78, in main\n  File \"Application.java\"\
+  , line 79, in main\n  File \"Application.java\", line 80, in main\n  File \"Application.java\"\
+  , line 81, in main\n  File \"Application.java\", line 82, in main\n  File \"Application.java\"\
+  , line 83, in main\n  File \"Application.java\", line 84, in main\n  File \"Application.java\"\
+  , line 85, in main\n  File \"Application.java\", line 86, in main\n  File \"Application.java\"\
+  , line 87, in main\n  File \"Application.java\", line 88, in main\n  File \"Application.java\"\
+  , line 89, in main\n  File \"Application.java\", line 90, in main\n  File \"Application.java\"\
+  , line 91, in main\n  File \"Application.java\", line 92, in main\n  File \"Application.java\"\
+  , line 93, in main\n  File \"Application.java\", line 94, in main\n  File \"Application.java\"\
+  , line 95, in main\n  File \"Application.java\", line 96, in main\n  File \"Application.java\"\
+  , line 97, in main\n  File \"Application.java\", line 98, in main\n  File \"Application.java\"\
+  , line 99, in main\n  File \"Application.java\", line 100, in main\n  File \"Application.java\"\
+  , line 101, in main\n  File \"Application.java\", line 102, in main\n  File \"Application.java\"\
+  , line 103, in main\n  File \"Application.java\", line 104, in main\n  File \"Application.java\"\
+  , line 105, in main\n  File \"Application.java\", line 106, in main\n  File \"Application.java\"\
+  , line 107, in main\n  File \"Application.java\", line 108, in main\n  File \"Application.java\"\
+  , line 109, in main\n  File \"Application.java\", line 110, in main\n  File \"Application.java\"\
+  , line 111, in main\n  File \"Application.java\", line 112, in main\n  File \"Application.java\"\
+  , line 113, in main\n  File \"Application.java\", line 114, in main\n  File \"Application.java\"\
+  , line 115, in main\n  File \"Application.java\", line 116, in main\n  File \"Application.java\"\
+  , line 117, in main\n  File \"Application.java\", line 118, in main\n  File \"Application.java\"\
+  , line 119, in main\n  File \"Application.java\", line 120, in main\n  File \"Application.java\"\
+  , line 121, in main\n  File \"Application.java\", line 122, in main\n  File \"Application.java\"\
+  , line 123, in main\n  File \"Application.java\", line 124, in main\n  File \"Application.java\"\
+  , line 125, in main\n  File \"Application.java\", line 126, in main\n  File \"Application.java\"\
+  , line 127, in main\n  File \"Application.java\", line 128, in main\n  File \"Application.java\"\
+  , line 129, in main\n  File \"Application.java\", line 130, in main\n  File \"Application.java\"\
+  , line 131, in main\n  File \"Application.java\", line 132, in main\n  File \"Application.java\"\
+  , line 133, in main\n  File \"Application.java\", line 134, in main\n  File \"Application.java\"\
+  , line 135, in main\n  File \"Application.java\", line 136, in main\n  File \"Application.java\"\
+  , line 137, in main\n  File \"Application.java\", line 138, in main\n  File \"Application.java\"\
+  , line 139, in main\n  File \"Application.java\", line 140, in main\n  File \"Application.java\"\
+  , line 141, in main\n  File \"Application.java\", line 142, in main\n  File \"Application.java\"\
+  , line 143, in main\n  File \"Application.java\", line 144, in main\n  File \"Application.java\"\
+  , line 145, in main\n  File \"Application.java\", line 146, in main\n  File \"Application.java\"\
+  , line 147, in main\n  File \"Application.java\", line 148, in main\n  File \"Application.java\"\
+  , line 149, in main\n  File \"Application.java\", line 150, in main\n  File \"Application.java\"\
+  , line 151, in main\n  File \"Application.java\", line 152, in main\n  File \"Application.java\"\
+  , line 153, in main\n  File \"Application.java\", line 154, in main\n  File \"Application.java\"\
+  , line 155, in main\n  File \"Application.java\", line 156, in main\n  File \"Application.java\"\
+  , line 157, in main\n  File \"Application.java\", line 158, in main\n  File \"Application.java\"\
+  , line 159, in main\n  File \"Application.java\", line 160, in main\n  File \"Application.java\"\
+  , line 161, in main\n  File \"Application.java\", line 162, in main\n  File \"Application.java\"\
+  , line 163, in main\n  File \"Application.java\", line 164, in main\n  File \"Application.java\"\
+  , line 165, in main\n  File \"Application.java\", line 166, in main\n  File \"Application.java\"\
+  , line 167, in main\n  File \"Application.java\", line 168, in main\n  File \"Application.java\"\
+  , line 169, in main\n  File \"Application.java\", line 170, in main\n  File \"Application.java\"\
+  , line 171, in main\n  File \"Application.java\", line 172, in main\n  File \"Application.java\"\
+  , line 173, in main\n  File \"Application.java\", line 174, in main\n  File \"Application.java\"\
+  , line 175, in main\n  File \"Application.java\", line 176, in main\n  File \"Application.java\"\
+  , line 177, in main\n  File \"Application.java\", line 178, in main\n  File \"Application.java\"\
+  , line 179, in main\n  File \"Application.java\", line 180, in main\n  File \"Application.java\"\
+  , line 181, in main\n  File \"Application.java\", line 182, in main\n  File \"Application.java\"\
+  , line 183, in main\n  File \"Application.java\", line 184, in main\n  File \"Application.java\"\
+  , line 185, in main\n  File \"Application.java\", line 186, in main\n  File \"Application.java\"\
+  , line 187, in main\n  File \"Application.java\", line 188, in main\n  File \"Application.java\"\
+  , line 189, in main\n  File \"Application.java\", line 190, in main\n  File \"Application.java\"\
+  , line 191, in main\n  File \"Application.java\", line 192, in main\n  File \"Application.java\"\
+  , line 193, in main\n  File \"Application.java\", line 194, in main\n  File \"Application.java\"\
+  , line 195, in main\n  File \"Application.java\", line 196, in main\n  File \"Application.java\"\
+  , line 197, in main\n  File \"Application.java\", line 198, in main\n  File \"Application.java\"\
+  , line 199, in main\n  File \"Application.java\", line 200, in main\n  File \"Application.java\"\
+  , line 201, in main\n  File \"Application.java\", line 202, in main\n  File \"Application.java\"\
+  , line 203, in main\n  File \"Application.java\", line 204, in main\n  File \"Application.java\"\
+  , line 205, in main\n  File \"Application.java\", line 206, in main\n  File \"Application.java\"\
+  , line 207, in main\n  File \"Application.java\", line 208, in main\n  File \"Application.java\"\
+  , line 209, in main\n  File \"Application.java\", line 210, in main\n  File \"Application.java\"\
+  , line 211, in main\n  File \"Application.java\", line 212, in main\n  File \"Application.java\"\
+  , line 213, in main\n  File \"Application.java\", line 214, in main\n  File \"Application.java\"\
+  , line 215, in main\n  File \"Application.java\", line 216, in main\n  File \"Application.java\"\
+  , line 217, in main\n  File \"Application.java\", line 218, in main\n  File \"Application.java\"\
+  , line 219, in main\n  File \"Application.java\", line 220, in main\n  File \"Application.java\"\
+  , line 221, in main\n  File \"Application.java\", line 222, in main\n  File \"Application.java\"\
+  , line 223, in main\n  File \"Application.java\", line 224, in main\n  File \"Application.java\"\
+  , line 225, in main\n  File \"Application.java\", line 226, in main\n  File \"Application.java\"\
+  , line 227, in main\n  File \"Application.java\", line 228, in main\n  File \"Application.java\"\
+  , line 229, in main\n  File \"Application.java\", line 230, in main\n  File \"Application.java\"\
+  , line 231, in main\n  File \"Application.java\", line 232, in main\n  File \"Application.java\"\
+  , line 233, in main\n  File \"Application.java\", line 234, in main\n  File \"Application.java\"\
+  , line 235, in main\n  File \"Application.java\", line 236, in main\n  File \"Application.java\"\
+  , line 237, in main\n  File \"Application.java\", line 238, in main\n  File \"Application.java\"\
+  , line 239, in main\n  File \"Application.java\", line 240, in main\n  File \"Application.java\"\
+  , line 241, in main\n  File \"Application.java\", line 242, in main\n  File \"Application.java\"\
+  , line 243, in main\n  File \"Application.java\", line 244, in main\n  File \"Application.java\"\
+  , line 245, in main\n  File \"Application.java\", line 246, in main\n  File \"Application.java\"\
+  , line 247, in main\n  File \"Application.java\", line 248, in main\n  File \"Application.java\"\
+  , line 249, in main\n  File \"Application.java\", line 251, in main"
+to_json:
+  frames:
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 1}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 2}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 3}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 4}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 5}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 6}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 7}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 8}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 9}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 10}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 11}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 12}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 13}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 14}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 15}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 16}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 17}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 18}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 19}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 20}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 21}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 22}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 23}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 24}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 25}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 26}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 27}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 28}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 29}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 30}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 31}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 32}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 33}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 34}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 35}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 36}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 37}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 38}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 39}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 40}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 41}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 42}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 43}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 44}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 45}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 46}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 47}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 48}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 49}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 50}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 51}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 52}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 53}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 54}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 55}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 56}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 57}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 58}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 59}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 60}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 61}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 62}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 63}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 64}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 65}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 66}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 67}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 68}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 69}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 70}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 71}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 72}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 73}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 74}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 75}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 76}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 77}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 78}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 79}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 80}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 81}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 82}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 83}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 84}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 85}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 86}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 87}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 88}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 89}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 90}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 91}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 92}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 93}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 94}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 95}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 96}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 97}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 98}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 99}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 100}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 101}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 102}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 103}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 104}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 105}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 106}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 107}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 108}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 109}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 110}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 111}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 112}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 113}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 114}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 115}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 116}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 117}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 118}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 119}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 120}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 121}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 122}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 123}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 124}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 125}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 126}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 127}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 128}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 129}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 130}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 131}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 132}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 133}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 134}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 135}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 136}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 137}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 138}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 139}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 140}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 141}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 142}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 143}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 144}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 145}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 146}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 147}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 148}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 149}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 150}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 151}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 152}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 153}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 154}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 155}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 156}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 157}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 158}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 159}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 160}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 161}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 162}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 163}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 164}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 165}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 166}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 167}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 168}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 169}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 170}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 171}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 172}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 173}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 174}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 175}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 176}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 177}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 178}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 179}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 180}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 181}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 182}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 183}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 184}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 185}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 186}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 187}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 188}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 189}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 190}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 191}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 192}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 193}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 194}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 195}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 196}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 197}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 198}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 199}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 200}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 201}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 202}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 203}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 204}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 205}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 206}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 207}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 208}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 209}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 210}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 211}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 212}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 213}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 214}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 215}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 216}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 217}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 218}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 219}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 220}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 221}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 222}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 223}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 224}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 225}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 226}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 227}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 228}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 229}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 230}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 231}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 232}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 233}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 234}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 235}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 236}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 237}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 238}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 239}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 240}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 241}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 242}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 243}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 244}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 245}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 246}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 247}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 248}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 249}
+  - {abs_path: Application.java, filename: Application.java, function: main, lineno: 251}
+to_string: "Stacktrace (most recent call last):\n\n(240 additional frame(s) were not\
+  \ displayed)\n...\n  File \"Application.java\", line 241, in main\n  File \"Application.java\"\
+  , line 242, in main\n  File \"Application.java\", line 243, in main\n  File \"Application.java\"\
+  , line 244, in main\n  File \"Application.java\", line 245, in main\n  File \"Application.java\"\
+  , line 246, in main\n  File \"Application.java\", line 247, in main\n  File \"Application.java\"\
+  , line 248, in main\n  File \"Application.java\", line 249, in main\n  File \"Application.java\"\
+  , line 251, in main"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_get_stacktrace_with_filename_and_function.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_get_stacktrace_with_filename_and_function.pysnap
new file mode 100644
index 0000000000..006306231c
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_get_stacktrace_with_filename_and_function.pysnap
@@ -0,0 +1,9 @@
+errors: null
+get_stacktrace: "Stacktrace (most recent call last):\n\n  File \"foo\", in biz\n \
+  \ File \"bar\", in baz"
+to_json:
+  frames:
+  - {abs_path: foo, filename: foo, function: biz}
+  - {abs_path: bar, filename: bar, function: baz}
+to_string: "Stacktrace (most recent call last):\n\n  File \"foo\", in biz\n  File\
+  \ \"bar\", in baz"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_get_stacktrace_with_filename_function_lineno_and_context.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_get_stacktrace_with_filename_function_lineno_and_context.pysnap
new file mode 100644
index 0000000000..0058b56c7d
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_get_stacktrace_with_filename_function_lineno_and_context.pysnap
@@ -0,0 +1,10 @@
+errors: null
+get_stacktrace: "Stacktrace (most recent call last):\n\n  File \"foo\", line 3, in\
+  \ biz\n    def foo(r):\n  File \"bar\", line 5, in baz\n    return None"
+to_json:
+  frames:
+  - {abs_path: foo, context_line: '  def foo(r):', filename: foo, function: biz, lineno: 3}
+  - {abs_path: bar, context_line: '    return None', filename: bar, function: baz,
+    lineno: 5}
+to_string: "Stacktrace (most recent call last):\n\n  File \"foo\", line 3, in biz\n\
+  \    def foo(r):\n  File \"bar\", line 5, in baz\n    return None"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_get_stacktrace_with_module.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_get_stacktrace_with_module.pysnap
new file mode 100644
index 0000000000..c792247b42
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_get_stacktrace_with_module.pysnap
@@ -0,0 +1,8 @@
+errors: null
+get_stacktrace: "Stacktrace (most recent call last):\n\n  Module \"foo\"\n  Module\
+  \ \"bar\""
+to_json:
+  frames:
+  - {module: foo}
+  - {module: bar}
+to_string: "Stacktrace (most recent call last):\n\n  Module \"foo\"\n  Module \"bar\""
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_ignores_results_with_empty_path.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_ignores_results_with_empty_path.pysnap
new file mode 100644
index 0000000000..b03496faad
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_ignores_results_with_empty_path.pysnap
@@ -0,0 +1,8 @@
+errors: null
+get_stacktrace: "Stacktrace (most recent call last):\n\n  File \"http://foo.com\"\
+  , line 1"
+to_json:
+  frames:
+  - {abs_path: 'http://foo.com', filename: 'http://foo.com', lineno: 1}
+to_string: "Stacktrace (most recent call last):\n\n  File \"http://foo.com\", line\
+  \ 1"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_null_values_in_frames/input0.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_null_values_in_frames/input0.pysnap
new file mode 100644
index 0000000000..a014554427
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_null_values_in_frames/input0.pysnap
@@ -0,0 +1,6 @@
+errors: null
+get_stacktrace: "Stacktrace (most recent call last):\n\n  ?"
+to_json:
+  frames:
+  - {}
+to_string: "Stacktrace (most recent call last):\n\n  ?"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_null_values_in_frames/input1.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_null_values_in_frames/input1.pysnap
new file mode 100644
index 0000000000..a014554427
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_null_values_in_frames/input1.pysnap
@@ -0,0 +1,6 @@
+errors: null
+get_stacktrace: "Stacktrace (most recent call last):\n\n  ?"
+to_json:
+  frames:
+  - {}
+to_string: "Stacktrace (most recent call last):\n\n  ?"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_serialize_returns_frames.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_serialize_returns_frames.pysnap
new file mode 100644
index 0000000000..6b8b0021f3
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_serialize_returns_frames.pysnap
@@ -0,0 +1,6 @@
+errors: null
+get_stacktrace: "Stacktrace (most recent call last):\n\n  File \"foo.py\", line 1"
+to_json:
+  frames:
+  - {abs_path: foo.py, filename: foo.py, lineno: 1}
+to_string: "Stacktrace (most recent call last):\n\n  File \"foo.py\", line 1"
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_to_string_returns_stacktrace.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_to_string_returns_stacktrace.pysnap
new file mode 100644
index 0000000000..2d99d604c8
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_stacktrace/test_to_string_returns_stacktrace.pysnap
@@ -0,0 +1,5 @@
+errors:
+- {name: stacktrace.frames, reason: expected a non-empty value, type: invalid_data}
+get_stacktrace: foo
+to_json: {}
+to_string: foo
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_template/test_basic.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_basic.pysnap
new file mode 100644
index 0000000000..329d52985b
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_basic.pysnap
@@ -0,0 +1,16 @@
+api_context:
+  context:
+  - [1, hello world]
+  filename: foo.html
+  lineNo: 1
+errors: null
+to_json: {context_line: hello world, filename: foo.html, lineno: 1}
+to_string: 'Stacktrace (most recent call last):
+
+
+
+
+  File "foo.html", line 1
+
+
+  hello world'
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input0.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input0.pysnap
new file mode 100644
index 0000000000..5d3fc4ea9c
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input0.pysnap
@@ -0,0 +1 @@
+{api_context: null, errors: null, to_json: null, to_string: null}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input1.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input1.pysnap
new file mode 100644
index 0000000000..5d3fc4ea9c
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input1.pysnap
@@ -0,0 +1 @@
+{api_context: null, errors: null, to_json: null, to_string: null}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input2.pysnap
new file mode 100644
index 0000000000..5d3fc4ea9c
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input2.pysnap
@@ -0,0 +1 @@
+{api_context: null, errors: null, to_json: null, to_string: null}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input3.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input3.pysnap
new file mode 100644
index 0000000000..5d3fc4ea9c
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input3.pysnap
@@ -0,0 +1 @@
+{api_context: null, errors: null, to_json: null, to_string: null}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input4.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input4.pysnap
new file mode 100644
index 0000000000..a957ef9996
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_template/test_required_attributes/input4.pysnap
@@ -0,0 +1,5 @@
+api_context: null
+errors:
+- {name: template.context_line, reason: expected a string, type: invalid_data, value: 42}
+to_json: null
+to_string: null
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_basics.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_basics.pysnap
new file mode 100644
index 0000000000..939991ee62
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_basics.pysnap
@@ -0,0 +1,61 @@
+api_context:
+  values:
+  - crashed: false
+    current: true
+    id: 42
+    name: Main Thread
+    rawStacktrace:
+      frames:
+      - absPath: null
+        colNo: null
+        context: []
+        errors: null
+        filename: null
+        function: <redacted>
+        inApp: true
+        instructionAddr: null
+        lineNo: 1
+        module: null
+        package: null
+        platform: null
+        symbol: null
+        symbolAddr: null
+        trust: null
+        vars: null
+      framesOmitted: null
+      hasSystemFrames: true
+      registers: null
+    stacktrace:
+      frames:
+      - absPath: foo/baz.c
+        colNo: null
+        context: []
+        errors: null
+        filename: foo/baz.c
+        function: main
+        inApp: true
+        instructionAddr: null
+        lineNo: 1
+        module: null
+        package: null
+        platform: null
+        symbol: null
+        symbolAddr: null
+        trust: null
+        vars: null
+      framesOmitted: null
+      hasSystemFrames: true
+      registers: null
+errors: null
+to_json:
+  values:
+  - crashed: false
+    current: true
+    id: 42
+    name: Main Thread
+    raw_stacktrace:
+      frames:
+      - {function: <redacted>, in_app: true, lineno: 1}
+    stacktrace:
+      frames:
+      - {abs_path: foo/baz.c, filename: foo/baz.c, function: main, in_app: true, lineno: 1}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input0.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input0.pysnap
new file mode 100644
index 0000000000..10774c51d0
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input0.pysnap
@@ -0,0 +1,5 @@
+api_context:
+  values: []
+errors: null
+to_json:
+  values: []
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input1.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input1.pysnap
new file mode 100644
index 0000000000..10774c51d0
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input1.pysnap
@@ -0,0 +1,5 @@
+api_context:
+  values: []
+errors: null
+to_json:
+  values: []
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input2.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input2.pysnap
new file mode 100644
index 0000000000..10774c51d0
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input2.pysnap
@@ -0,0 +1,5 @@
+api_context:
+  values: []
+errors: null
+to_json:
+  values: []
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input3.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input3.pysnap
new file mode 100644
index 0000000000..10774c51d0
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_threads/test_null_values/input3.pysnap
@@ -0,0 +1,5 @@
+api_context:
+  values: []
+errors: null
+to_json:
+  values: []
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_user/test_extra_keys.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_user/test_extra_keys.pysnap
new file mode 100644
index 0000000000..db36e1c6f3
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_user/test_extra_keys.pysnap
@@ -0,0 +1,3 @@
+errors: null
+to_json:
+  data: {extra1: foo, extra2: bar}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_user/test_invalid_email_address/1.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_user/test_invalid_email_address/1.pysnap
new file mode 100644
index 0000000000..c935088626
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_user/test_invalid_email_address/1.pysnap
@@ -0,0 +1,3 @@
+errors:
+- {name: user.email, reason: expected a string, type: invalid_data, value: 1}
+to_json: {}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_user/test_invalid_email_address/foo.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_user/test_invalid_email_address/foo.pysnap
new file mode 100644
index 0000000000..fe52c92f1c
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_user/test_invalid_email_address/foo.pysnap
@@ -0,0 +1,2 @@
+errors: null
+to_json: {email: foo}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_user/test_invalid_ip_address.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_user/test_invalid_ip_address.pysnap
new file mode 100644
index 0000000000..7ed6c1d2fb
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_user/test_invalid_ip_address.pysnap
@@ -0,0 +1,3 @@
+errors:
+- {name: user.ip_address, reason: expected an ip address, type: invalid_data, value: abc}
+to_json: {}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_user/test_null_values.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_user/test_null_values.pysnap
new file mode 100644
index 0000000000..311aaf0602
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_user/test_null_values.pysnap
@@ -0,0 +1 @@
+{errors: null, to_json: null}
diff --git a/tests/sentry/event_manager/interfaces/snapshots/test_user/test_serialize_behavior.pysnap b/tests/sentry/event_manager/interfaces/snapshots/test_user/test_serialize_behavior.pysnap
new file mode 100644
index 0000000000..8838aa1b87
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/snapshots/test_user/test_serialize_behavior.pysnap
@@ -0,0 +1,5 @@
+errors: null
+to_json:
+  data: {favorite_color: brown}
+  email: lol@example.com
+  id: '1'
diff --git a/tests/sentry/event_manager/interfaces/test_breadcrumbs.py b/tests/sentry/event_manager/interfaces/test_breadcrumbs.py
new file mode 100644
index 0000000000..a9fe9649ce
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_breadcrumbs.py
@@ -0,0 +1,86 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.models import Event
+from sentry.event_manager import EventManager
+
+
+@pytest.fixture
+def make_breadcrumbs_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={"breadcrumbs": data})
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+        breadcrumbs = evt.interfaces.get('breadcrumbs')
+
+        insta_snapshot({
+            'errors': evt.data.get("errors"),
+            'to_json': breadcrumbs and breadcrumbs.to_json(),
+        })
+
+    return inner
+
+
+def test_simple(make_breadcrumbs_snapshot):
+    make_breadcrumbs_snapshot(
+        dict(
+            values=[
+                {
+                    'type': 'message',
+                    'timestamp': 1458857193.973275,
+                    'data': {
+                        'message': 'Whats up dawg?',
+                    },
+                }
+            ]
+        )
+    )
+
+
+@pytest.mark.parametrize('input', [
+    {},
+    {'values': []},
+
+    # TODO(markus): The following cases should eventually generate {"values": [None]}
+    {'values': [{}]},
+    {'values': [{"type": None}]},
+
+    {'values': [None]}
+])
+def test_null_values(make_breadcrumbs_snapshot, input):
+    make_breadcrumbs_snapshot(input)
+
+
+def test_non_string_keys(make_breadcrumbs_snapshot):
+    make_breadcrumbs_snapshot(
+        dict(
+            values=[
+                {
+                    'type': 'message',
+                    'timestamp': 1458857193.973275,
+                    'data': {
+                        'extra': {
+                            'foo': 'bar'
+                        },
+                    },
+                }
+            ]
+        )
+    )
+
+
+def test_string_data(make_breadcrumbs_snapshot):
+    make_breadcrumbs_snapshot(
+        dict(
+            values=[
+                {
+                    'type': 'message',
+                    'timestamp': 1458857193.973275,
+                    'data': 'must be a mapping'
+                }
+            ]
+        )
+    )
diff --git a/tests/sentry/event_manager/interfaces/test_contexts.py b/tests/sentry/event_manager/interfaces/test_contexts.py
new file mode 100644
index 0000000000..fe4dc0a824
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_contexts.py
@@ -0,0 +1,141 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.models import Event
+from sentry.event_manager import EventManager
+
+
+@pytest.fixture
+def make_ctx_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={"contexts": data})
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+
+        interface = evt.interfaces.get('contexts')
+
+        insta_snapshot({
+            'errors': evt.data.get('errors'),
+            'to_json': interface.to_json(),
+            'tags': sorted(interface.iter_tags())
+        })
+
+    return inner
+
+
+def test_os(make_ctx_snapshot):
+    make_ctx_snapshot({
+        'os': {
+            'name': 'Windows',
+            'version': '95',
+            'rooted': True,
+        },
+    })
+
+
+def test_null_values(make_ctx_snapshot):
+    make_ctx_snapshot({'os': None})
+
+
+def test_null_values2(make_ctx_snapshot):
+    make_ctx_snapshot({'os': {}})
+
+
+def test_null_values3(make_ctx_snapshot):
+    make_ctx_snapshot({'os': {'name': None}})
+
+
+def test_os_normalization(make_ctx_snapshot):
+    make_ctx_snapshot({
+        'os': {
+            'raw_description': 'Microsoft Windows 6.1.7601 S'
+        },
+    })
+
+
+def test_runtime(make_ctx_snapshot, insta_snapshot):
+    make_ctx_snapshot(
+        {
+            'runtime': {
+                'name': 'Java',
+                'version': '1.2.3',
+                'build': 'BLAH',
+            },
+        }
+    )
+
+
+def test_runtime_normalization(make_ctx_snapshot):
+    make_ctx_snapshot({
+        'runtime': {
+            'raw_description': '.NET Framework 4.0.30319.42000',
+            'build': '461808',
+        }
+    })
+
+
+def test_device(make_ctx_snapshot):
+    make_ctx_snapshot(
+        {
+            'device': {
+                'name': 'My iPad',
+                'model': 'iPad',
+                'model_id': '1234AB',
+                'version': '1.2.3',
+                'arch': 'arm64',
+            },
+        }
+    )
+
+
+def test_device_with_alias(make_ctx_snapshot):
+    make_ctx_snapshot(
+        {
+            'my_device': {
+                'type': 'device',
+                'title': 'My Title',
+                'name': 'My iPad',
+                'model': 'iPad',
+                'model_id': '1234AB',
+                'version': '1.2.3',
+                'arch': 'arm64',
+            },
+        }
+    )
+
+
+def test_default(make_ctx_snapshot):
+    make_ctx_snapshot(
+        {
+            'whatever': {
+                'foo': 'bar',
+                'blub': 'blah',
+                'biz': [1, 2, 3],
+                'baz': {
+                    'foo': 'bar'
+                },
+            },
+        }
+    )
+
+
+def test_app(make_ctx_snapshot):
+    make_ctx_snapshot({
+        'app': {
+            'app_id': '1234',
+            'device_app_hash': '5678',
+        },
+    })
+
+
+def test_gpu(make_ctx_snapshot):
+    make_ctx_snapshot({
+        'gpu': {
+            'name': 'AMD Radeon Pro 560',
+            'vendor_name': 'Apple',
+            'version': 'Metal'
+        },
+    })
diff --git a/tests/sentry/event_manager/interfaces/test_csp.py b/tests/sentry/event_manager/interfaces/test_csp.py
new file mode 100644
index 0000000000..4a8d051cb3
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_csp.py
@@ -0,0 +1,171 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.interfaces.security import Csp
+from sentry.event_manager import EventManager
+from sentry.models import Event
+
+
+@pytest.fixture
+def make_csp_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={"csp": data})
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+
+        interface = evt.interfaces.get('csp')
+
+        insta_snapshot({
+            'errors': evt.data.get('errors'),
+            'to_json': interface and interface.to_json(),
+            'message': interface and interface.get_message(),
+            'culprit': interface and interface.get_culprit(),
+            'origin': interface and interface.get_origin(),
+            'tags': interface and interface.get_tags()
+        })
+
+    return inner
+
+
+def test_basic(make_csp_snapshot):
+    make_csp_snapshot(
+        dict(
+            document_uri='http://example.com',
+            violated_directive='style-src cdn.example.com',
+            blocked_uri='http://example.com/lol.css',
+            effective_directive='style-src',
+        )
+    )
+
+
+def test_coerce_blocked_uri_if_missing(make_csp_snapshot):
+    make_csp_snapshot(
+        dict(
+            document_uri='http://example.com',
+            effective_directive='script-src',
+        )
+    )
+
+
+@pytest.mark.parametrize('input', [
+    dict(
+        document_uri='http://example.com/foo',
+        violated_directive='style-src http://cdn.example.com',
+        effective_directive='style-src',
+    ),
+    dict(
+        document_uri='http://example.com/foo',
+        violated_directive='style-src cdn.example.com',
+        effective_directive='style-src',
+    ),
+    dict(
+        document_uri='https://example.com/foo',
+        violated_directive='style-src cdn.example.com',
+        effective_directive='style-src',
+    ),
+    dict(
+        document_uri='http://example.com/foo',
+        violated_directive='style-src https://cdn.example.com',
+        effective_directive='style-src',
+    ),
+    dict(
+        document_uri='http://example.com/foo',
+        violated_directive='style-src http://example.com',
+        effective_directive='style-src',
+    ),
+    dict(
+        document_uri='http://example.com/foo',
+        violated_directive='style-src http://example2.com example.com',
+        effective_directive='style-src',
+    )
+])
+def test_get_culprit(make_csp_snapshot, input):
+    make_csp_snapshot(input)
+
+
+def test_get_tags_stripe(make_csp_snapshot):
+    make_csp_snapshot(
+        dict(
+            document_uri='https://example.com',
+            blocked_uri='https://api.stripe.com/v1/tokens?card[number]=xxx',
+            effective_directive='script-src',
+        )
+    )
+
+
+@pytest.mark.parametrize('input', [
+    dict(
+        document_uri='http://example.com/foo',
+        effective_directive='img-src',
+        blocked_uri='http://google.com/foo',
+    ),
+    dict(
+        document_uri='http://example.com/foo',
+        effective_directive='style-src',
+        blocked_uri='',
+    ),
+    dict(
+        document_uri='http://example.com/foo',
+        effective_directive='script-src',
+        blocked_uri='',
+        violated_directive="script-src 'unsafe-inline'",
+    ),
+    dict(
+        document_uri='http://example.com/foo',
+        effective_directive='script-src',
+        blocked_uri='',
+        violated_directive="script-src 'unsafe-eval'",
+    ),
+    dict(
+        document_uri='http://example.com/foo',
+        effective_directive='script-src',
+        blocked_uri='',
+        violated_directive="script-src example.com",
+    ),
+    dict(
+        document_uri='http://example.com/foo',
+        effective_directive='script-src',
+        blocked_uri='data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D',
+    ),
+    dict(
+        document_uri='http://example.com/foo',
+        effective_directive='script-src',
+        blocked_uri='data',
+    ),
+    dict(
+        document_uri='http://example.com/foo',
+        effective_directive='style-src-elem',
+        blocked_uri='http://fonts.google.com/foo',
+    ),
+    dict(
+        document_uri='http://example.com/foo',
+        effective_directive='script-src-elem',
+        blocked_uri='http://cdn.ajaxapis.com/foo',
+    )
+])
+def test_get_message(make_csp_snapshot, input):
+    make_csp_snapshot(input)
+
+
+def test_real_report(make_csp_snapshot):
+    raw_report = {
+        "csp-report": {
+            "document-uri": "https://sentry.io/sentry/csp/issues/88513416/",
+            "referrer": "https://sentry.io/sentry/sentry/releases/7329107476ff14cfa19cf013acd8ce47781bb93a/",
+            "violated-directive": "script-src",
+            "effective-directive": "script-src",
+            "original-policy": "default-src *; script-src 'make_csp_snapshot' 'unsafe-eval' 'unsafe-inline' e90d271df3e973c7.global.ssl.fastly.net cdn.ravenjs.com assets.zendesk.com ajax.googleapis.com ssl.google-analytics.com www.googleadservices.com analytics.twitter.com platform.twitter.com *.pingdom.net js.stripe.com api.stripe.com statuspage-production.s3.amazonaws.com s3.amazonaws.com *.google.com www.gstatic.com aui-cdn.atlassian.com www.hipchat.com *.atlassian.net *.jira.com *.zopim.com; font-src * data:; connect-src * wss://*.zopim.com; style-src 'make_csp_snapshot' 'unsafe-inline' e90d271df3e973c7.global.ssl.fastly.net s3.amazonaws.com aui-cdn.atlassian.com www.hipchat.com fonts.googleapis.com; img-src * data: blob:; report-uri https://sentry.io/api/54785/csp-report/?sentry_key=f724a8a027db45f5b21507e7142ff78e&sentry_release=39662eb9734f68e56b7f202260bb706be2f4cee7",
+            "disposition": "enforce",
+            "blocked-uri": "http://baddomain.com/test.js?_=1515535030116",
+            "line-number": 24,
+            "column-number": 66270,
+            "source-file": "https://e90d271df3e973c7.global.ssl.fastly.net/_static/f0c7c026a4b2a3d2b287ae2d012c9924/sentry/dist/vendor.js",
+            "status-code": 0,
+            "script-sample": ""
+        }
+    }
+    interface = Csp.from_raw(raw_report)
+    make_csp_snapshot(interface.to_json())
diff --git a/tests/sentry/event_manager/interfaces/test_debug_meta.py b/tests/sentry/event_manager/interfaces/test_debug_meta.py
new file mode 100644
index 0000000000..b9722ec355
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_debug_meta.py
@@ -0,0 +1,148 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.models import Event
+from sentry.event_manager import EventManager
+
+
+@pytest.fixture
+def make_debug_meta_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={"debug_meta": data})
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+        interface = evt.interfaces.get('debug_meta')
+        insta_snapshot({
+            'errors': evt.data.get('errors'),
+            'to_json': interface and interface.to_json()
+        })
+
+    return inner
+
+
+@pytest.mark.parametrize('input', [
+    {},
+    {"images": None},
+    # TODO(markus): Should eventually generate {"images": [None]}
+    {"images": [None]},
+])
+def test_null_values(make_debug_meta_snapshot, input):
+    make_debug_meta_snapshot(input)
+
+
+def test_apple_behavior(make_debug_meta_snapshot):
+    image_name = (
+        '/var/containers/Bundle/Application/'
+        'B33C37A8-F933-4B6B-9FFA-152282BFDF13/SentryTest.app/SentryTest'
+    )
+    make_debug_meta_snapshot(
+        {
+            "images": [
+                {
+                    "type": "apple",
+                    "cpu_subtype": 0,
+                    "uuid": "C05B4DDD-69A7-3840-A649-32180D341587",
+                    "image_vmaddr": 4294967296,
+                    "image_addr": '0x100020000',
+                    "cpu_type": 16777228,
+                    "image_size": 32768,
+                    "name": image_name,
+                }
+            ],
+            "sdk_info": {
+                "sdk_name": "iOS",
+                "version_major": 9,
+                "version_minor": 3,
+                "version_patchlevel": 0
+            }
+        }
+    )
+
+
+def test_apple_behavior_with_arch(make_debug_meta_snapshot):
+    image_name = (
+        '/var/containers/Bundle/Application/'
+        'B33C37A8-F933-4B6B-9FFA-152282BFDF13/SentryTest.app/SentryTest'
+    )
+    make_debug_meta_snapshot(
+        {
+            "images": [
+                {
+                    "type": "apple",
+                    "arch": "x86_64",
+                    "cpu_subtype": 0,
+                    "uuid": "C05B4DDD-69A7-3840-A649-32180D341587",
+                    "image_vmaddr": 4294967296,
+                    "image_addr": '0x100020000',
+                    "cpu_type": 16777228,
+                    "image_size": 32768,
+                    "name": image_name,
+                }
+            ],
+            "sdk_info": {
+                "sdk_name": "iOS",
+                "version_major": 9,
+                "version_minor": 3,
+                "version_patchlevel": 0
+            }
+        }
+    )
+
+
+def test_symbolic_behavior(make_debug_meta_snapshot):
+    make_debug_meta_snapshot(
+        {
+            "images": [
+                {
+                    "type": "symbolic",
+                    "id": "3249d99d-0c40-4931-8610-f4e4fb0b6936-1",
+                    "image_addr": 2752512,
+                    "image_size": 36864,
+                    "name": "C:\\projects\\breakpad-tools\\windows\\Release\\crash.exe",
+                }
+            ],
+            "sdk_info": {
+                "sdk_name": "Windows",
+                "version_major": 10,
+                "version_minor": 0,
+                "version_patchlevel": 14393
+            }
+        }
+    )
+
+
+def test_symbolic_behavior_with_arch(make_debug_meta_snapshot):
+    make_debug_meta_snapshot(
+        {
+            "images": [
+                {
+                    "type": "symbolic",
+                    "arch": "x86",
+                    "id": "3249d99d-0c40-4931-8610-f4e4fb0b6936-1",
+                    "image_addr": 2752512,
+                    "image_size": 36864,
+                    "name": "C:\\projects\\breakpad-tools\\windows\\Release\\crash.exe",
+                }
+            ],
+            "sdk_info": {
+                "sdk_name": "Windows",
+                "version_major": 10,
+                "version_minor": 0,
+                "version_patchlevel": 14393
+            }
+        }
+    )
+
+
+def test_proguard_behavior(make_debug_meta_snapshot):
+    make_debug_meta_snapshot(
+        {
+            "images": [{
+                "type": "proguard",
+                "uuid": "C05B4DDD-69A7-3840-A649-32180D341587",
+            }]
+        }
+    )
diff --git a/tests/sentry/event_manager/interfaces/test_exception.py b/tests/sentry/event_manager/interfaces/test_exception.py
new file mode 100644
index 0000000000..15331ecdab
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_exception.py
@@ -0,0 +1,319 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.interfaces.exception import Exception, slim_exception_data
+from sentry.stacktraces import normalize_in_app
+from sentry.models import Event
+from sentry.event_manager import EventManager
+
+
+@pytest.fixture
+def make_exception_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={"exception": data})
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+
+        interface = evt.interfaces.get('exception')
+
+        insta_snapshot({
+            'errors': evt.data.get('errors'),
+            'to_json': interface and interface.to_json(),
+            'get_api_context': interface and interface.get_api_context(),
+            'to_string': interface and interface.to_string(evt),
+        })
+
+    return inner
+
+
+def test_basic(make_exception_snapshot):
+    make_exception_snapshot(
+        dict(
+            values=[
+                {
+                    'type': 'ValueError',
+                    'value': 'hello world',
+                    'module': 'foo.bar',
+                    'stacktrace': {
+                        'frames': [{
+                            'filename': 'foo/baz.py',
+                            'lineno': 1,
+                            'in_app': True,
+                        }]
+                    },
+                }, {
+                    'type': 'ValueError',
+                    'value': 'hello world',
+                    'module': 'foo.bar',
+                    'stacktrace': {
+                        'frames': [{
+                            'filename': 'foo/baz.py',
+                            'lineno': 1,
+                            'in_app': True,
+                        }]
+                    },
+                }
+            ]
+        )
+    )
+
+
+def test_args_as_keyword_args(make_exception_snapshot):
+    make_exception_snapshot(
+        dict(values=[{
+            'type': 'ValueError',
+            'value': 'hello world',
+            'module': 'foo.bar',
+        }])
+    )
+
+
+def test_args_as_old_style(make_exception_snapshot):
+    make_exception_snapshot(
+        {
+            'type': 'ValueError',
+            'value': 'hello world',
+            'module': 'foo.bar',
+        }
+    )
+
+
+def test_non_string_value_with_no_type(make_exception_snapshot):
+    make_exception_snapshot(
+        {
+            'value': {'foo': 'bar'},
+        }
+    )
+
+
+def test_context_with_mixed_frames(make_exception_snapshot):
+    make_exception_snapshot(
+        dict(
+            values=[
+                {
+                    'type': 'ValueError',
+                    'value': 'hello world',
+                    'module': 'foo.bar',
+                    'stacktrace': {
+                        'frames': [{
+                            'filename': 'foo/baz.py',
+                            'lineno': 1,
+                            'in_app': True,
+                        }]
+                    },
+                }, {
+                    'type': 'ValueError',
+                    'value': 'hello world',
+                    'module': 'foo.bar',
+                    'stacktrace': {
+                        'frames': [{
+                            'filename': 'foo/baz.py',
+                            'lineno': 1,
+                            'in_app': False,
+                        }]
+                    },
+                }
+            ]
+        )
+    )
+
+
+def test_context_with_symbols(make_exception_snapshot):
+    make_exception_snapshot(
+        dict(
+            values=[
+                {
+                    'type': 'ValueError',
+                    'value': 'hello world',
+                    'module': 'foo.bar',
+                    'stacktrace': {
+                        'frames': [
+                            {
+                                'filename': 'foo/baz.py',
+                                'function': 'myfunc',
+                                'symbol': 'Class.myfunc',
+                                'lineno': 1,
+                                'in_app': True,
+                            }
+                        ]
+                    },
+                }
+            ]
+        )
+    )
+
+
+def test_context_with_only_system_frames(make_exception_snapshot):
+    make_exception_snapshot(
+        dict(
+            values=[
+                {
+                    'type': 'ValueError',
+                    'value': 'hello world',
+                    'module': 'foo.bar',
+                    'stacktrace': {
+                        'frames': [{
+                            'filename': 'foo/baz.py',
+                            'lineno': 1,
+                            'in_app': False,
+                        }]
+                    },
+                }, {
+                    'type': 'ValueError',
+                    'value': 'hello world',
+                    'module': 'foo.bar',
+                    'stacktrace': {
+                        'frames': [{
+                            'filename': 'foo/baz.py',
+                            'lineno': 1,
+                            'in_app': False,
+                        }]
+                    },
+                }
+            ]
+        )
+    )
+
+
+def test_context_with_only_app_frames(make_exception_snapshot):
+    values = [
+        {
+            'type': 'ValueError',
+            'value': 'hello world',
+            'module': 'foo.bar',
+            'stacktrace': {
+                'frames': [{
+                    'filename': 'foo/baz.py',
+                    'lineno': 1,
+                    'in_app': True,
+                }]
+            },
+        }, {
+            'type': 'ValueError',
+            'value': 'hello world',
+            'module': 'foo.bar',
+            'stacktrace': {
+                'frames': [{
+                    'filename': 'foo/baz.py',
+                    'lineno': 1,
+                    'in_app': True,
+                }]
+            },
+        }
+    ]
+    exc = dict(values=values)
+    normalize_in_app({'exception': exc})
+    make_exception_snapshot(exc)
+
+
+def test_context_with_raw_stacks(make_exception_snapshot):
+    make_exception_snapshot(
+        dict(
+            values=[
+                {
+                    'type': 'ValueError',
+                    'value': 'hello world',
+                    'module': 'foobar',
+                    'raw_stacktrace': {
+                        'frames': [
+                            {
+                                'filename': None,
+                                'lineno': 1,
+                                'function': '<redacted>',
+                                'in_app': True,
+                            }
+                        ]
+                    },
+                    'stacktrace': {
+                        'frames': [
+                            {
+                                'filename': 'foo/baz.c',
+                                'lineno': 1,
+                                'function': 'main',
+                                'in_app': True,
+                            }
+                        ]
+                    },
+                }
+            ]
+        )
+    )
+
+
+def test_context_with_mechanism(make_exception_snapshot):
+    make_exception_snapshot(
+        dict(
+            values=[
+                {
+                    'type': 'ValueError',
+                    'value': 'hello world',
+                    'module': 'foo.bar',
+                    'stacktrace': {
+                        'frames': [{
+                            'filename': 'foo/baz.py',
+                            'lineno': 1,
+                            'in_app': True,
+                        }]
+                    },
+                    'mechanism': {
+                        'type': 'generic',
+                    }
+                }
+            ]
+        )
+    )
+
+
+def test_iteration():
+    inst = Exception.to_python({
+        'values': [None, {'type': 'ValueError'}, None]
+    })
+
+    assert len(inst) == 1
+    assert inst[0].type == 'ValueError'
+    for exc in inst:
+        assert exc.type == 'ValueError'
+
+
+def test_slim_exception_data_under_max(insta_snapshot):
+    interface = Exception.to_python(
+        {
+            'values': [{
+                'value': 'foo',
+                'stacktrace': {
+                    'frames': [{
+                        'filename': 'foo'
+                    }]
+                },
+            }]
+        }
+    )
+    slim_exception_data(interface)
+    insta_snapshot(interface.to_json())
+
+
+def test_slim_exception_data_over_max(insta_snapshot):
+    values = []
+    for x in range(5):
+        exc = {'value': 'exc %d' % x, 'stacktrace': {'frames': []}}
+        values.append(exc)
+        for y in range(5):
+            exc['stacktrace']['frames'].append(
+                {
+                    'filename': 'exc %d frame %d' % (x, y),
+                    'vars': {
+                        'foo': 'bar'
+                    },
+                    'context_line': 'b',
+                    'pre_context': ['a'],
+                    'post_context': ['c'],
+                }
+            )
+
+    interface = Exception.to_python({'values': values})
+    # slim to 10 frames to make tests easier
+    slim_exception_data(interface, 10)
+    insta_snapshot(interface.to_json())
diff --git a/tests/sentry/event_manager/interfaces/test_expectct.py b/tests/sentry/event_manager/interfaces/test_expectct.py
new file mode 100644
index 0000000000..214143a77e
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_expectct.py
@@ -0,0 +1,76 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.interfaces.security import ExpectCT
+from sentry.event_manager import EventManager
+from sentry.models import Event
+
+
+@pytest.fixture
+def make_expectct_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={"expectct": data})
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+
+        interface = evt.interfaces.get('expectct')
+
+        insta_snapshot({
+            'errors': evt.data.get('errors'),
+            'to_json': interface and interface.to_json(),
+        })
+
+    return inner
+
+
+raw_report = {
+    "expect-ct-report": {
+        "date-time": "2014-04-06T13:00:50Z",
+        "hostname": "www.example.com",
+        "port": 443,
+        "effective-expiration-date": "2014-05-01T12:40:50Z",
+        "served-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
+        "validated-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
+        "scts": [
+            {
+                "version": 1,
+                "status": "invalid",
+                "source": "embedded",
+                "serialized_sct": "ABCD=="
+            },
+        ],
+    }
+}
+interface_json = {
+    'date_time': '2014-04-06T13:00:50Z',
+    'hostname': 'www.example.com',
+    'port': 443,
+    'effective_expiration_date': '2014-05-01T12:40:50Z',
+    'served_certificate_chain': ['-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----'],
+    'validated_certificate_chain': ['-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----'],
+    'scts': [{
+        'status': 'invalid',
+        'source': 'embedded',
+        'serialized_sct': 'ABCD==',
+        'version': 1
+    }]
+}
+
+
+def test_from_raw(make_expectct_snapshot):
+    make_expectct_snapshot(ExpectCT.from_raw(raw_report).to_json())
+
+
+def test_basic(make_expectct_snapshot):
+    make_expectct_snapshot(interface_json)
+
+
+def test_invalid_format(make_expectct_snapshot):
+    # invalid keys are just removed
+    make_expectct_snapshot({
+        'hostname': 'www.example.com',
+        'date_time': 'Not an RFC3339 datetime'
+    })
diff --git a/tests/sentry/event_manager/interfaces/test_expectstaple.py b/tests/sentry/event_manager/interfaces/test_expectstaple.py
new file mode 100644
index 0000000000..76e464c278
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_expectstaple.py
@@ -0,0 +1,55 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.interfaces.security import ExpectStaple
+from sentry.event_manager import EventManager
+from sentry.models import Event
+
+
+@pytest.fixture
+def make_csp_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={"expectstaple": data})
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+        insta_snapshot({
+            'errors': evt.data.get('errors'),
+            'to_json': evt.interfaces.get('expectstaple').to_json()
+        })
+
+    return inner
+
+
+raw_report = {
+    "expect-staple-report": {
+        "date-time": "2014-04-06T13:00:50Z",
+        "hostname": "www.example.com",
+        "port": 443,
+        "response-status": "ERROR_RESPONSE",
+        "cert-status": "REVOKED",
+        "effective-expiration-date": "2014-05-01T12:40:50Z",
+        "served-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
+        "validated-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
+    }
+}
+interface_json = {
+    "date_time": "2014-04-06T13:00:50Z",
+    "hostname": "www.example.com",
+    "port": 443,
+    "response_status": "ERROR_RESPONSE",
+    "cert_status": "REVOKED",
+    "effective_expiration_date": "2014-05-01T12:40:50Z",
+    "served_certificate_chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
+    "validated_certificate_chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
+}
+
+
+def test_basic(make_csp_snapshot):
+    make_csp_snapshot(interface_json)
+
+
+def test_from_raw(make_csp_snapshot):
+    make_csp_snapshot(ExpectStaple.from_raw(raw_report).to_json())
diff --git a/tests/sentry/event_manager/interfaces/test_frame.py b/tests/sentry/event_manager/interfaces/test_frame.py
new file mode 100644
index 0000000000..9bc7c9b67b
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_frame.py
@@ -0,0 +1,59 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.event_manager import EventManager
+from sentry.models import Event
+
+
+@pytest.fixture
+def make_frames_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={"stacktrace": {"frames": [data]}})
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+        frame = evt.interfaces['stacktrace'].frames[0]
+
+        insta_snapshot({
+            'errors': evt.data.get('errors'),
+            'to_json': frame.to_json()
+        })
+
+    return inner
+
+
+@pytest.mark.parametrize('input', [
+    {'filename': 1},
+    {'filename': 'foo', 'abs_path': 1},
+    {'function': 1},
+    {'module': 1},
+    {'function': '?'}
+])
+def test_bad_input(make_frames_snapshot, input):
+    make_frames_snapshot(input)
+
+
+@pytest.mark.parametrize('x', [float('inf'), float('-inf'), float('nan')],
+                         ids=['inf', 'neginf', 'nan'])
+def test_context_with_nan(make_frames_snapshot, x):
+    make_frames_snapshot({
+        'filename': 'x',
+        'vars': {
+            'x': x
+        },
+    })
+
+
+def test_address_normalization(make_frames_snapshot):
+    make_frames_snapshot(
+        {
+            'lineno': 1,
+            'filename': 'blah.c',
+            'function': 'main',
+            'instruction_addr': 123456,
+            'symbol_addr': '123450',
+            'image_addr': '0x0',
+        }
+    )
diff --git a/tests/sentry/event_manager/interfaces/test_geo.py b/tests/sentry/event_manager/interfaces/test_geo.py
new file mode 100644
index 0000000000..f4ac680425
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_geo.py
@@ -0,0 +1,88 @@
+from __future__ import absolute_import
+
+import pytest
+
+import mock
+
+from sentry.interfaces.geo import Geo
+from sentry.models import Event
+from sentry.event_manager import EventManager
+
+
+@pytest.fixture
+def make_geo_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={"user": {"id": "123", "geo": data}})
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+
+        interface = evt.interfaces['user'].geo
+        insta_snapshot({
+            'errors': evt.data.get('errors'),
+            'to_json': interface and interface.to_json()
+        })
+
+    return inner
+
+
+def test_serialize_behavior(make_geo_snapshot):
+    make_geo_snapshot({
+        'country_code': 'US',
+        'city': 'San Francisco',
+        'region': 'CA',
+    })
+
+
+@pytest.mark.parametrize('input', [
+    {},
+    {"country_code": None},
+    {"city": None},
+    {"region": None},
+])
+def test_null_values(make_geo_snapshot, input):
+    make_geo_snapshot(input)
+
+
+@mock.patch('sentry.interfaces.geo.geo_by_addr')
+def test_from_ip_address(geo_by_addr_mock):
+    geo_by_addr_mock.return_value = {
+        'area_code': 415,
+        'city': 'San Francisco',
+        'country_code': 'US',
+        'country_code3': 'USA',
+        'country_name': 'United States',
+        'dma_code': 807,
+        'latitude': 37.79570007324219,
+        'longitude': -122.4208984375,
+        'metro_code': 807,
+        'postal_code': '94109',
+        'region': 'CA',
+        'region_name': 'California',
+        'time_zone': 'America/Los_Angeles'
+    }
+
+    assert Geo.from_ip_address('192.168.0.1').to_json() == {
+        'country_code': 'US',
+        'city': 'San Francisco',
+        'region': 'CA',
+    }
+
+
+@mock.patch('sentry.interfaces.geo.geo_by_addr')
+def test_iso_8859_1_country_code(geo_by_addr_mock):
+    # https://github.com/maxmind/geoip-api-python/releases/tag/v1.3.2
+    # Previously GeoIP.country_names was populated from GeoIP_country_name in
+    # the libGeoIP C API. Some versions of the libGeoIP include non-ASCII
+    # ISO-8859-1 characters in these names, causing encoding errors under Python
+
+    geo_by_addr_mock.return_value = {
+        'city': 'San Francisco',
+        'country_code': '\xc5lborg',
+        'region': 'CA',
+    }
+
+    assert Geo.from_ip_address('192.168.0.1').to_json() == {
+        'city': u'San Francisco',
+        'country_code': u'\xc5lborg',
+        'region': u'CA'
+    }
diff --git a/tests/sentry/event_manager/interfaces/test_http.py b/tests/sentry/event_manager/interfaces/test_http.py
new file mode 100644
index 0000000000..e630bd7911
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_http.py
@@ -0,0 +1,211 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.models import Event
+from sentry.event_manager import EventManager
+
+
+@pytest.fixture
+def make_http_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={"request": data})
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+
+        interface = evt.interfaces.get('request')
+
+        insta_snapshot({
+            'errors': evt.data.get('errors'),
+            'to_json': interface.to_json(),
+        })
+
+    return inner
+
+
+def test_basic(make_http_snapshot):
+    make_http_snapshot(dict(
+        url='http://example.com',
+    ))
+
+
+def test_full(make_http_snapshot):
+    make_http_snapshot(
+        dict(
+            method='GET',
+            url='http://example.com',
+            query_string='foo=bar',
+            fragment='foobar',
+            headers={'x-foo-bar': 'baz'},
+            cookies={'foo': 'bar'},
+            env={'bing': 'bong'},
+            data='hello world',
+        )
+    )
+
+
+def test_query_string_as_dict(make_http_snapshot):
+    make_http_snapshot(dict(
+        url='http://example.com',
+        query_string={'foo': 'bar'},
+    ))
+
+
+def test_query_string_as_pairlist(make_http_snapshot):
+    make_http_snapshot(dict(
+        url='http://example.com',
+        query_string=[['foo', 'bar']],
+    ))
+
+
+def test_query_string_as_bytes(make_http_snapshot):
+    make_http_snapshot(
+        dict(
+            url='http://example.com',
+            query_string=b'foo=\x00',
+        )
+    )
+
+
+def test_data_as_dict(make_http_snapshot):
+    make_http_snapshot(dict(
+        url='http://example.com',
+        data={'foo': 'bar'},
+    ))
+
+
+def test_urlencoded_data(make_http_snapshot):
+    make_http_snapshot(
+        dict(
+            url='http://example.com',
+            headers={'Content-Type': 'application/x-www-form-urlencoded'},
+            data='foo=bar',
+        )
+    )
+
+
+def test_infer_urlencoded_content_type(make_http_snapshot):
+    make_http_snapshot(
+        dict(
+            url='http://example.com',
+            data='foo=bar',
+        )
+    )
+
+
+def test_json_data(make_http_snapshot):
+    make_http_snapshot(
+        dict(
+            url='http://example.com',
+            headers={'Content-Type': 'application/json'},
+            data='{"foo":"bar"}',
+        )
+    )
+
+
+def test_infer_json_content_type(make_http_snapshot):
+    make_http_snapshot(
+        dict(
+            url='http://example.com',
+            data='{"foo":"bar"}',
+        )
+    )
+
+
+def test_cookies_as_string(make_http_snapshot):
+    make_http_snapshot(dict(
+        url='http://example.com',
+        cookies='a=b;c=d',
+    ))
+    make_http_snapshot(dict(
+        url='http://example.com',
+        cookies='a=b;c=d',
+    ))
+
+
+def test_cookies_in_header(make_http_snapshot):
+    make_http_snapshot(dict(
+        url='http://example.com',
+        headers={'Cookie': 'a=b;c=d'},
+    ))
+
+
+def test_cookies_in_header2(make_http_snapshot):
+    make_http_snapshot(
+        dict(
+            url='http://example.com',
+            headers={'Cookie': 'a=b;c=d'},
+            cookies={'foo': 'bar'},
+        )
+    )
+
+
+def test_query_string_and_fragment_as_params(make_http_snapshot):
+    make_http_snapshot(
+        dict(
+            url='http://example.com',
+            query_string=u'foo\ufffd=bar\u2026',
+            fragment='fragment',
+        )
+    )
+
+
+def test_query_string_and_fragment_in_url(make_http_snapshot):
+    make_http_snapshot(dict(
+        url=u'http://example.com?foo\ufffd=bar#fragment\u2026',
+    ))
+
+
+def test_header_value_list(make_http_snapshot):
+    make_http_snapshot(dict(
+        url='http://example.com',
+        headers={'Foo': ['1', '2']},
+    ))
+
+
+def test_header_value_str(make_http_snapshot):
+    make_http_snapshot(dict(url='http://example.com', headers={'Foo': 1}))
+
+
+def test_invalid_method(make_http_snapshot):
+    make_http_snapshot(dict(
+        url='http://example.com',
+        method='1234',
+    ))
+
+
+def test_invalid_method2(make_http_snapshot):
+    make_http_snapshot(dict(
+        url='http://example.com',
+        method='A' * 33,
+    ))
+
+
+def test_invalid_method3(make_http_snapshot):
+    make_http_snapshot(dict(
+        url='http://example.com',
+        method='A',
+    ))
+
+
+def test_unknown_method(make_http_snapshot):
+    make_http_snapshot(dict(
+        url='http://example.com',
+        method='TEST',
+    ))
+
+
+def test_unknown_method2(make_http_snapshot):
+    make_http_snapshot(dict(
+        url='http://example.com',
+        method='FOO-BAR',
+    ))
+
+
+def test_unknown_method3(make_http_snapshot):
+    make_http_snapshot(dict(
+        url='http://example.com',
+        method='FOO_BAR',
+    ))
diff --git a/tests/sentry/event_manager/interfaces/test_mechanism.py b/tests/sentry/event_manager/interfaces/test_mechanism.py
new file mode 100644
index 0000000000..9d993ca578
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_mechanism.py
@@ -0,0 +1,187 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.interfaces.exception import upgrade_legacy_mechanism
+from sentry.models import Event
+from sentry.event_manager import EventManager
+
+
+@pytest.fixture
+def make_mechanism_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={
+            "exception": {
+                "values": [{"type": "FooError", "mechanism": data}]
+            }
+        })
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+        mechanism = evt.interfaces['exception'].values[0].mechanism
+
+        insta_snapshot({
+            'errors': evt.data.get('errors'),
+            'to_json': mechanism.to_json(),
+            'tags': sorted(mechanism.iter_tags())
+        })
+
+    return inner
+
+
+def test_empty_mechanism(make_mechanism_snapshot):
+    data = {'type': 'generic'}
+    make_mechanism_snapshot(data)
+
+
+def test_tag(make_mechanism_snapshot):
+    data = {'type': 'generic'}
+    make_mechanism_snapshot(data)
+
+
+def test_tag_with_handled(make_mechanism_snapshot):
+    data = {
+        'type': 'generic',
+        'handled': False,
+    }
+
+    make_mechanism_snapshot(data)
+
+
+def test_data(make_mechanism_snapshot):
+    data = {
+        'type': 'generic',
+        'data': {'relevant_address': '0x1'},
+    }
+    make_mechanism_snapshot(data)
+
+
+def test_empty_data(make_mechanism_snapshot):
+    data = {
+        'type': 'generic',
+        'data': {},
+    }
+
+    make_mechanism_snapshot(data)
+
+
+def test_min_mach_meta(make_mechanism_snapshot):
+    input = {
+        'type': 'generic',
+        'meta': {
+            'mach_exception': {
+                'exception': 10,
+                'code': 0,
+                'subcode': 0,
+            }
+        }
+    }
+    make_mechanism_snapshot(input)
+
+
+def test_full_mach_meta(make_mechanism_snapshot):
+    data = {
+        'type': 'generic',
+        'meta': {
+            'mach_exception': {
+                'exception': 10,
+                'code': 0,
+                'subcode': 0,
+                'name': 'EXC_CRASH'
+            }
+        }
+    }
+    make_mechanism_snapshot(data)
+
+
+def test_min_signal_meta(make_mechanism_snapshot):
+    data = {
+        'type': 'generic',
+        'meta': {
+            'signal': {
+                'number': 10,
+                'code': 0,
+            }
+        }
+    }
+    make_mechanism_snapshot(data)
+
+
+def test_full_signal_meta(make_mechanism_snapshot):
+    data = {
+        'type': 'generic',
+        'meta': {
+            'signal': {
+                'number': 10,
+                'code': 0,
+                'name': 'SIGBUS',
+                'code_name': 'BUS_NOOP',
+            }
+        }
+    }
+    make_mechanism_snapshot(data)
+
+
+def test_min_errno_meta(make_mechanism_snapshot):
+    data = {
+        'type': 'generic',
+        'meta': {
+            'errno': {
+                'number': 2,
+            }
+        }
+    }
+    make_mechanism_snapshot(data)
+
+
+def test_full_errno_meta(make_mechanism_snapshot):
+    data = {
+        'type': 'generic',
+        'meta': {
+            'errno': {
+                'number': 2,
+                'name': 'ENOENT',
+            }
+        }
+    }
+    make_mechanism_snapshot(data)
+
+
+def test_upgrade():
+    data = {
+        "posix_signal": {
+            "name": "SIGSEGV",
+            "code_name": "SEGV_NOOP",
+            "signal": 11,
+            "code": 0
+        },
+        "relevant_address": "0x1",
+        "mach_exception": {
+            "exception": 1,
+            "exception_name": "EXC_BAD_ACCESS",
+            "subcode": 8,
+            "code": 1
+        }
+    }
+
+    assert upgrade_legacy_mechanism(data) == {
+        "type": "generic",
+        "data": {
+            "relevant_address": "0x1"
+        },
+        "meta": {
+            "mach_exception": {
+                "exception": 1,
+                "subcode": 8,
+                "code": 1,
+                "name": "EXC_BAD_ACCESS"
+            },
+            "signal": {
+                "number": 11,
+                "code": 0,
+                "name": "SIGSEGV",
+                "code_name": "SEGV_NOOP"
+            }
+        }
+    }
diff --git a/tests/sentry/event_manager/interfaces/test_message.py b/tests/sentry/event_manager/interfaces/test_message.py
new file mode 100644
index 0000000000..71035a7614
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_message.py
@@ -0,0 +1,62 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.models import Event
+from sentry.event_manager import EventManager
+
+
+@pytest.fixture
+def make_message_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={"logentry": data})
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+
+        interface = evt.interfaces.get('logentry')
+        insta_snapshot({
+            'errors': evt.data.get('errors'),
+            'to_json': interface and interface.to_json(),
+        })
+
+    return inner
+
+
+def test_basic(make_message_snapshot):
+    make_message_snapshot(
+        dict(
+            message='Hello there %s!',
+            params=('world', ),
+            formatted='Hello there world!',
+        )
+    )
+
+
+def test_format_kwargs(make_message_snapshot):
+    make_message_snapshot(dict(
+        message='Hello there %(name)s!',
+        params={'name': 'world'},
+    ))
+
+
+def test_format_braces(make_message_snapshot):
+    make_message_snapshot(dict(
+        message='Hello there {}!',
+        params=('world', ),
+    ))
+
+
+@pytest.mark.parametrize('input', [42, True, 4.2])
+def test_stringify_primitives(make_message_snapshot, input):
+    make_message_snapshot(input)
+
+
+def test_retains_formatted(make_message_snapshot):
+    # we had a regression which was throwing this data away
+    make_message_snapshot({'message': 'foo bar', 'formatted': 'foo bar baz'})
+
+
+def test_discards_dupe_message(make_message_snapshot):
+    make_message_snapshot({'message': 'foo bar', 'formatted': 'foo bar'})
diff --git a/tests/sentry/event_manager/interfaces/test_sdk.py b/tests/sentry/event_manager/interfaces/test_sdk.py
new file mode 100644
index 0000000000..cf31b6551c
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_sdk.py
@@ -0,0 +1,42 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.models import Event
+from sentry.event_manager import EventManager
+
+
+@pytest.fixture
+def make_sdk_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={"sdk": data})
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+        insta_snapshot({
+            'errors': evt.data.get('errors'),
+            'to_json': evt.interfaces.get('sdk').to_json()
+        })
+
+    return inner
+
+
+def test_serialize_behavior(make_sdk_snapshot):
+    make_sdk_snapshot({
+        'name': 'sentry-java',
+        'version': '1.0',
+        'integrations': ['log4j'],
+        'packages': [{
+            'name': 'maven:io.sentry.sentry',
+            'version': '1.7.10',
+        }],
+    })
+
+
+def test_missing_name(make_sdk_snapshot):
+    make_sdk_snapshot({'version': '1.0'})
+
+
+def test_missing_version(make_sdk_snapshot):
+    make_sdk_snapshot({'name': 'sentry-unity'})
diff --git a/tests/sentry/event_manager/interfaces/test_single_exception.py b/tests/sentry/event_manager/interfaces/test_single_exception.py
new file mode 100644
index 0000000000..7e26e95569
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_single_exception.py
@@ -0,0 +1,85 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.models import Event
+from sentry.event_manager import EventManager
+
+
+@pytest.fixture
+def make_single_exception_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={"exception": {"values": [data]}})
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+
+        excs = evt.interfaces['exception'].values
+        if excs:
+            to_json = excs[0].to_json()
+        else:
+            to_json = None
+
+        insta_snapshot({
+            'to_json': to_json,
+            'errors': evt.data.get("errors")
+        })
+
+    return inner
+
+
+def test_basic(make_single_exception_snapshot):
+    make_single_exception_snapshot(
+        dict(
+            type='ValueError',
+            value='hello world',
+            module='foo.bar',
+        )
+    )
+
+
+def test_requires_only_type_or_value(make_single_exception_snapshot):
+    make_single_exception_snapshot(dict(
+        type='ValueError',
+    ))
+
+
+def test_requires_only_type_or_value2(make_single_exception_snapshot):
+    make_single_exception_snapshot(dict(
+        value='ValueError',
+    ))
+
+
+def test_coerces_object_value_to_string(make_single_exception_snapshot):
+    make_single_exception_snapshot({
+        'type': 'ValueError',
+        'value': {'unauthorized': True},
+    })
+
+
+def test_handles_type_in_value(make_single_exception_snapshot):
+    make_single_exception_snapshot(dict(
+        value='ValueError: unauthorized',
+    ))
+
+
+def test_handles_type_in_value2(make_single_exception_snapshot):
+    make_single_exception_snapshot(dict(
+        value='ValueError:unauthorized',
+    ))
+
+
+def test_value_serialization_idempotent(make_single_exception_snapshot):
+    make_single_exception_snapshot({
+        'type': None,
+        'value': {'unauthorized': True},
+    })
+
+
+def test_value_serialization_idempotent2(make_single_exception_snapshot):
+    # Don't re-split a json-serialized value on the colon
+    make_single_exception_snapshot({
+        'type': None,
+        'value': '{"unauthorized":true}'
+    })
diff --git a/tests/sentry/event_manager/interfaces/test_stacktrace.py b/tests/sentry/event_manager/interfaces/test_stacktrace.py
new file mode 100644
index 0000000000..2e30b6b8b4
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_stacktrace.py
@@ -0,0 +1,212 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+
+import pytest
+import mock
+from django.conf import settings
+
+from sentry.interfaces.stacktrace import (
+    get_context, is_url,
+    trim_function_name
+)
+from sentry.event_manager import EventManager
+from sentry.models import Event
+
+
+def test_is_url():
+    assert is_url('http://example.org/') is True
+    assert is_url('https://example.org/') is True
+    assert is_url('file:///tmp/filename') is True
+    assert is_url('applewebdata://00000000-0000-1000-8080-808080808080') is True
+    assert is_url('app:///index.bundle') is False   # react native
+    assert is_url('webpack:///./app/index.jsx') is False  # webpack bundle
+    assert is_url('data:,') is False
+    assert is_url('blob:\x00') is False
+
+
+def test_trim_function_name():
+    assert trim_function_name('+[foo:(bar)]', 'objc') == '+[foo:(bar)]'
+    assert trim_function_name('[foo:(bar)]', 'objc') == '[foo:(bar)]'
+    assert trim_function_name('-[foo:(bar)]', 'objc') == '-[foo:(bar)]'
+    assert trim_function_name(
+        '(anonymous namespace)::foo(int)',
+        'native') == '(anonymous namespace)::foo'
+    assert trim_function_name('foo::bar::foo(int)', 'native') == 'foo::bar::foo'
+
+
+def test_works_with_empty_filename():
+    result = get_context(0, 'hello world')
+    assert result == [(0, 'hello world')]
+
+
+@pytest.fixture
+def make_stacktrace_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={"stacktrace": data})
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+
+        interface = evt.interfaces.get('stacktrace')
+
+        insta_snapshot({
+            'errors': evt.data.get('errors'),
+            'to_json': interface and interface.to_json(),
+            'get_stacktrace': interface and interface.get_stacktrace(evt),
+            'to_string': interface and interface.to_string(evt),
+        })
+
+    return inner
+
+
+def test_basic(make_stacktrace_snapshot):
+    make_stacktrace_snapshot(
+        dict(
+            frames=[
+                {
+                    'filename': 'foo/bar.py'
+                }, {
+                    'filename': 'foo/baz.py',
+                    'lineno': 1,
+                    'in_app': True,
+                }
+            ]
+        )
+    )
+
+
+@pytest.mark.parametrize('input', [
+    {'frames': [{}]},
+    {'frames': [{'abs_path': None}]},
+])
+def test_null_values_in_frames(make_stacktrace_snapshot, input):
+    make_stacktrace_snapshot(input)
+
+
+def test_filename(make_stacktrace_snapshot):
+    make_stacktrace_snapshot(dict(frames=[{
+        'filename': 'foo.py',
+    }]))
+
+
+def test_filename2(make_stacktrace_snapshot):
+    make_stacktrace_snapshot(dict(frames=[{
+        'lineno': 1,
+        'filename': 'foo.py',
+    }]))
+
+
+def test_allows_abs_path_without_filename(make_stacktrace_snapshot):
+    make_stacktrace_snapshot(
+        dict(frames=[{
+            'lineno': 1,
+            'abs_path': 'foo/bar/baz.py',
+        }])
+    )
+
+
+def test_coerces_url_filenames(make_stacktrace_snapshot):
+    make_stacktrace_snapshot(
+        dict(frames=[{
+            'lineno': 1,
+            'filename': 'http://foo.com/foo.js',
+        }])
+    )
+
+
+def test_does_not_overwrite_filename(make_stacktrace_snapshot):
+    make_stacktrace_snapshot(
+        dict(
+            frames=[{
+                'lineno': 1,
+                'filename': 'foo.js',
+                'abs_path': 'http://foo.com/foo.js',
+            }]
+        )
+    )
+
+
+def test_ignores_results_with_empty_path(make_stacktrace_snapshot):
+    make_stacktrace_snapshot(
+        dict(frames=[{
+            'lineno': 1,
+            'filename': 'http://foo.com',
+        }])
+    )
+
+
+def test_serialize_returns_frames(make_stacktrace_snapshot):
+    make_stacktrace_snapshot(dict(frames=[{
+        'lineno': 1,
+        'filename': 'foo.py',
+    }]))
+
+
+def test_frame_hard_limit(make_stacktrace_snapshot):
+    hard_limit = settings.SENTRY_STACKTRACE_FRAMES_HARD_LIMIT
+    make_stacktrace_snapshot(
+        {
+            'frames': [
+                {
+                    'filename': 'Application.java',
+                    'function': 'main',
+                    'lineno': i,  # linenos from 1 to the hard limit + 1
+                } for i in range(1, hard_limit + 2)
+            ]
+        }
+    )
+
+
+@mock.patch('sentry.interfaces.stacktrace.Stacktrace.get_stacktrace', mock.Mock(return_value='foo'))
+def test_to_string_returns_stacktrace(make_stacktrace_snapshot):
+    make_stacktrace_snapshot(dict(frames=[]))
+
+
+@mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
+def test_get_stacktrace_with_only_filename():
+    make_stacktrace_snapshot(dict(frames=[{'filename': 'foo'}, {'filename': 'bar'}]))
+
+
+@mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
+def test_get_stacktrace_with_module(make_stacktrace_snapshot):
+    make_stacktrace_snapshot(dict(frames=[{'module': 'foo'}, {'module': 'bar'}]))
+
+
+@mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
+def test_get_stacktrace_with_filename_and_function(make_stacktrace_snapshot):
+    make_stacktrace_snapshot(
+        dict(
+            frames=[
+                {
+                    'filename': 'foo',
+                    'function': 'biz'
+                }, {
+                    'filename': 'bar',
+                    'function': 'baz'
+                }
+            ]
+        )
+    )
+
+
+@mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
+def test_get_stacktrace_with_filename_function_lineno_and_context(make_stacktrace_snapshot):
+    make_stacktrace_snapshot(
+        dict(
+            frames=[
+                {
+                    'filename': 'foo',
+                    'function': 'biz',
+                    'lineno': 3,
+                    'context_line': '  def foo(r):'
+                },
+                {
+                    'filename': 'bar',
+                    'function': 'baz',
+                    'lineno': 5,
+                    'context_line': '    return None'
+                },
+            ]
+        )
+    )
diff --git a/tests/sentry/event_manager/interfaces/test_template.py b/tests/sentry/event_manager/interfaces/test_template.py
new file mode 100644
index 0000000000..108b28bbbb
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_template.py
@@ -0,0 +1,47 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.event_manager import EventManager
+from sentry.models import Event
+
+
+@pytest.fixture
+def make_template_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={"template": data})
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+
+        interface = evt.interfaces.get('template')
+        insta_snapshot({
+            'errors': evt.data.get('errors'),
+            'to_json': interface and interface.to_json(),
+            'api_context': interface and interface.get_api_context(),
+            'to_string': interface and interface.to_string(evt),
+        })
+
+    return inner
+
+
+def test_basic(make_template_snapshot):
+    make_template_snapshot(
+        dict(
+            filename='foo.html',
+            context_line='hello world',
+            lineno=1,
+        )
+    )
+
+
+@pytest.mark.parametrize('input', [
+    {},
+    {"lineno": None, "context_line": ""},
+    {"lineno": 0, "context_line": ""},
+    {"lineno": 1},
+    {"lineno": 1, "context_line": 42},
+])
+def test_required_attributes(make_template_snapshot, input):
+    make_template_snapshot(input)
diff --git a/tests/sentry/event_manager/interfaces/test_threads.py b/tests/sentry/event_manager/interfaces/test_threads.py
new file mode 100644
index 0000000000..d976fda10b
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_threads.py
@@ -0,0 +1,71 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.event_manager import EventManager
+from sentry.models import Event
+
+
+@pytest.fixture
+def make_threads_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={"threads": data})
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+
+        interface = evt.interfaces.get('threads')
+        insta_snapshot({
+            'errors': evt.data.get('errors'),
+            'to_json': interface and interface.to_json(),
+            'api_context': interface and interface.get_api_context()
+        })
+
+    return inner
+
+
+basic_payload = dict(
+    values=[
+        {
+            'id': 42,
+            'crashed': False,
+            'current': True,
+            'name': 'Main Thread',
+            'stacktrace': {
+                'frames': [
+                    {
+                        'filename': 'foo/baz.c',
+                        'function': 'main',
+                        'lineno': 1,
+                        'in_app': True,
+                    }
+                ]
+            },
+            'raw_stacktrace': {
+                'frames': [
+                    {
+                        'filename': None,
+                        'lineno': 1,
+                        'function': '<redacted>',
+                        'in_app': True,
+                    }
+                ]
+            },
+        }
+    ]
+)
+
+
+def test_basics(make_threads_snapshot):
+    make_threads_snapshot(basic_payload)
+
+
+@pytest.mark.parametrize('input', [
+    {"values": [{}]},
+    {"values": [{"id": None}]},
+    {"values": [{"name": None}]},
+    {"values": [{"stacktrace": None}]},
+])
+def test_null_values(make_threads_snapshot, input):
+    make_threads_snapshot(input)
diff --git a/tests/sentry/event_manager/interfaces/test_user.py b/tests/sentry/event_manager/interfaces/test_user.py
new file mode 100644
index 0000000000..183b368446
--- /dev/null
+++ b/tests/sentry/event_manager/interfaces/test_user.py
@@ -0,0 +1,53 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.event_manager import EventManager
+from sentry.models import Event
+
+
+@pytest.fixture
+def make_user_snapshot(insta_snapshot):
+    def inner(data):
+        mgr = EventManager(data={"user": data})
+        mgr.normalize()
+        evt = Event(data=mgr.get_data())
+
+        interface = evt.interfaces.get('user')
+
+        insta_snapshot({
+            'errors': evt.data.get('errors'),
+            'to_json': interface and interface.to_json(),
+        })
+
+    return inner
+
+
+def test_null_values(make_user_snapshot):
+    make_user_snapshot({})
+
+
+def test_serialize_behavior(make_user_snapshot):
+    make_user_snapshot(dict(
+        id=1,
+        email='lol@example.com',
+        favorite_color='brown',
+    ))
+
+
+def test_invalid_ip_address(make_user_snapshot):
+    make_user_snapshot(dict(ip_address='abc'))
+
+
+@pytest.mark.parametrize('email', [1, 'foo'])
+def test_invalid_email_address(make_user_snapshot, email):
+    make_user_snapshot(dict(email=email))
+
+
+def test_extra_keys(make_user_snapshot):
+    make_user_snapshot({
+        'extra1': 'foo',
+        'data': {'extra2': 'bar'},
+    })
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/actix.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/actix.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/actix.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/actix.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/aspnetcore.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/aspnetcore.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/aspnetcore.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/aspnetcore.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/connection-error.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/connection_error.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/connection-error.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/connection_error.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/csp.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/csp.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/csp.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/csp.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/csp-img-src.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/csp_img_src.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/csp-img-src.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/csp_img_src.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/csp-no-blocked-uri.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/csp_no_blocked_uri.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/csp-no-blocked-uri.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/csp_no_blocked_uri.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/csp-script-data-uri.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/csp_script_data_uri.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/csp-script-data-uri.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/csp_script_data_uri.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/csp-script-src-uri.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/csp_script_src_uri.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/csp-script-src-uri.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/csp_script_src_uri.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/csp-style-src-elem.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/csp_style_src_elem.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/csp-style-src-elem.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/csp_style_src_elem.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/custom-fingerprint.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/custom_fingerprint.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/custom-fingerprint.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/custom_fingerprint.pysnap
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/empty.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/empty.pysnap
new file mode 100644
index 0000000000..cd1f2fcc85
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/empty.pysnap
@@ -0,0 +1,2 @@
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/exception-comput-hashes.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/exception_comput_hashes.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/exception-comput-hashes.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/exception_comput_hashes.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/exception-compute-hashes-2.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/exception_compute_hashes.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/exception-compute-hashes-2.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/exception_compute_hashes.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/exception-compute-hashes.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/exception_compute_hashes_2.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/exception-compute-hashes.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/exception_compute_hashes_2.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/exception-compute-hashes-3.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/exception_compute_hashes_3.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/exception-compute-hashes-3.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/exception_compute_hashes_3.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/exception-without-type.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/exception_without_type.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/exception-without-type.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/exception_without_type.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/exception-without-value.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/exception_without_value.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/exception-without-value.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/exception_without_value.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/expectct.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/expectct.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/expectct.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/expectct.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-comput-hashes-ignores-ENHANCED-clojure-classes.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_comput_hashes_ignores_ENHANCED_clojure_classes.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-comput-hashes-ignores-ENHANCED-clojure-classes.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_comput_hashes_ignores_ENHANCED_clojure_classes.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-ENHANCED-spring-classes.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_ENHANCED_spring_classes.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-ENHANCED-spring-classes.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_ENHANCED_spring_classes.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-extra-ENHANCED-clojure-classes.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_extra_ENHANCED_clojure_classes.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-extra-ENHANCED-clojure-classes.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_extra_ENHANCED_clojure_classes.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-extra-ENHANCED-spring-classes.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_extra_ENHANCED_spring_classes.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-extra-ENHANCED-spring-classes.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_extra_ENHANCED_spring_classes.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-filename-if-abs-path-is-http.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_filename_if_abs_path_is_http.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-filename-if-abs-path-is-http.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_filename_if_abs_path_is_http.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-filename-if-blob.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_filename_if_blob.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-filename-if-blob.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_filename_if_blob.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-filename-if-http.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_filename_if_http.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-filename-if-http.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_filename_if_http.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-filename-if-https.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_filename_if_https.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-filename-if-https.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_filename_if_https.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-java8-lambda-function.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_java8_lambda_function.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-java8-lambda-function.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_java8_lambda_function.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-java8-lambda-module.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_java8_lambda_module.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-java8-lambda-module.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_java8_lambda_module.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-javassist-2.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_javassist.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-javassist-2.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_javassist.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-javassist.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_javassist_2.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-javassist.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_javassist_2.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-javassist-3.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_javassist_3.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-javassist-3.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_javassist_3.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-module-if-page-url.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_module_if_page_url.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-module-if-page-url.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_module_if_page_url.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-module-if-page-url-2.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_module_if_page_url_2.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-module-if-page-url-2.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_module_if_page_url_2.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-safari-native-code.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_safari_native_code.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-safari-native-code.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_safari_native_code.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-sun-java-generated-constructors.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_sun_java_generated_constructors.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-sun-java-generated-constructors.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_sun_java_generated_constructors.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-sun-java-generated-constructors-2.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_sun_java_generated_constructors_2.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-sun-java-generated-constructors-2.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_sun_java_generated_constructors_2.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-sun-java-generated-methods.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_sun_java_generated_methods.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-sun-java-generated-methods.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_sun_java_generated_methods.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-block-functions.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_sanitizes_block_functions.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-block-functions.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_sanitizes_block_functions.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-erb-templates.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_sanitizes_erb_templates.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-erb-templates.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_sanitizes_erb_templates.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-versioned-filenames.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_sanitizes_versioned_filenames.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-versioned-filenames.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_sanitizes_versioned_filenames.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-versioned-filenames-2.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_sanitizes_versioned_filenames_2.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-versioned-filenames-2.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_sanitizes_versioned_filenames_2.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-skips-symbol-if-unknown.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_skips_symbol_if_unknown.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-skips-symbol-if-unknown.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_skips_symbol_if_unknown.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-uses-context-line-over-function.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_uses_context_line_over_function.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-uses-context-line-over-function.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_uses_context_line_over_function.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-uses-function-over-lineno.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_uses_function_over_lineno.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-uses-function-over-lineno.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_uses_function_over_lineno.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-uses-module-over-filename.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_uses_module_over_filename.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-uses-module-over-filename.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_uses_module_over_filename.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-uses-symbol-instead-of-function.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_uses_symbol_instead_of_function.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-uses-symbol-instead-of-function.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_uses_symbol_instead_of_function.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-with-only-required-vars.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_with_only_required_vars.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-with-only-required-vars.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_with_only_required_vars.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/hpkp.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/hpkp.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/hpkp.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/hpkp.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/java-chained.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/java_chained.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/java-chained.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/java_chained.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/java-minimal.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/java_minimal.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/java-minimal.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/java_minimal.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/javascript-exception-no-in-app.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_exception_no_in_app.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/javascript-exception-no-in-app.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_exception_no_in_app.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/javascript-message.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_message.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/javascript-message.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_message.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/laravel.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/laravel.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/laravel.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/laravel.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/logentry-prefers-message.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/logentry_prefers_message.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/logentry-prefers-message.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/logentry_prefers_message.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/logentry-uses-formatted.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/logentry_uses_formatted.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/logentry-uses-formatted.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/logentry_uses_formatted.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/message-prefers-message.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/message_prefers_message.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/message-prefers-message.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/message_prefers_message.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/message-uses-formatted.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/message_uses_formatted.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/message-uses-formatted.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/message_uses_formatted.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/minified-javascript.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/minified_javascript.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/minified-javascript.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/minified_javascript.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/node-exception-weird.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/node_exception_weird.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/node-exception-weird.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/node_exception_weird.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/python-exception-base.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/python_exception_base.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/python-exception-base.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/python_exception_base.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/python-http-error.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/python_http_error.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/python-http-error.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/python_http_error.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/react-native.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/react_native.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/react-native.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/react_native.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-cocoa.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_cocoa.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-cocoa.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_cocoa.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-collapse-recursion.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_collapse_recursion.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-collapse-recursion.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_collapse_recursion.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-compute-hashes.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_compute_hashes.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-compute-hashes.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_compute_hashes.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-discards-seemingly-useless-stack.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_discards_seemingly_useless_stack.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-discards-seemingly-useless-stack.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_discards_seemingly_useless_stack.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-does-not-discard-non-urls.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_does_not_discard_non_urls.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-does-not-discard-non-urls.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_does_not_discard_non_urls.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-does-not-group-different-js-errors.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_does_not_group_different_js_errors.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-does-not-group-different-js-errors.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_does_not_group_different_js_errors.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-excludes-single-frame-urls.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_excludes_single_frame_urls.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-excludes-single-frame-urls.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_excludes_single_frame_urls.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-hash-without-system-frames.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_hash_without_system_frames.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-hash-without-system-frames.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_hash_without_system_frames.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-ignores-singular-anonymous-frame.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_ignores_singular_anonymous_frame.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-ignores-singular-anonymous-frame.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_ignores_singular_anonymous_frame.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-with-minimal-app-frames.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_with_minimal_app_frames.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-with-minimal-app-frames.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/stacktrace_with_minimal_app_frames.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/template-compute-hashes.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/template_compute_hashes.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/template-compute-hashes.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/template_compute_hashes.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/threads-compute-hashes.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/threads_compute_hashes.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/threads-compute-hashes.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/threads_compute_hashes.pysnap
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/threads-no-hash.out b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/threads_no_hash.pysnap
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/threads-no-hash.out
rename to tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/threads_no_hash.pysnap
diff --git a/tests/sentry/grouping/test_variants.py b/tests/sentry/grouping/test_variants.py
index c049942c2a..d143d905c8 100644
--- a/tests/sentry/grouping/test_variants.py
+++ b/tests/sentry/grouping/test_variants.py
@@ -3,7 +3,6 @@
 from __future__ import absolute_import, print_function
 
 import os
-import sys
 import json
 import pytest
 
@@ -12,10 +11,6 @@ from sentry.event_manager import EventManager
 from sentry.grouping.component import GroupingComponent
 
 
-def log(x):
-    return sys.stdout.write(x + '\n')
-
-
 def dump_variant(variant, lines=None, indent=0):
     if lines is None:
         lines = []
@@ -64,15 +59,14 @@ def load_configs():
     return rv
 
 
-@pytest.mark.parametrize('config_name,test_name', load_configs())
-def test_event_hash_variant(config_name, test_name):
+@pytest.mark.parametrize(
+    'config_name,test_name',
+    load_configs(),
+    ids=lambda x: x.replace("-", "_")  # Nicer folder structure for insta_snapshot
+)
+def test_event_hash_variant(insta_snapshot, config_name, test_name, log):
     with open(os.path.join(_fixture_path, config_name, test_name + '.json')) as f:
         input = json.load(f)
-    try:
-        with open(os.path.join(_fixture_path, config_name, test_name + '.out')) as f:
-            refval = f.read().decode('utf-8').rstrip()
-    except IOError:
-        refval = ''
 
     mgr = EventManager(data=input)
     mgr.normalize()
@@ -86,8 +80,6 @@ def test_event_hash_variant(config_name, test_name):
         rv.append('%s:' % key)
         dump_variant(value, rv, 1)
     output = '\n'.join(rv)
-    if not refval:
-        log(output)
     log(repr(evt.get_hashes()))
 
-    assert refval == output
+    insta_snapshot(output)
diff --git a/tests/sentry/interfaces/test_breadcrumbs.py b/tests/sentry/interfaces/test_breadcrumbs.py
deleted file mode 100644
index adc7f9f7b9..0000000000
--- a/tests/sentry/interfaces/test_breadcrumbs.py
+++ /dev/null
@@ -1,79 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from sentry.interfaces.breadcrumbs import Breadcrumbs
-from sentry.testutils import TestCase
-
-
-class BreadcrumbsTest(TestCase):
-    def test_path(self):
-        assert Breadcrumbs().get_path() == 'breadcrumbs'
-
-    def test_simple(self):
-        result = Breadcrumbs.to_python(
-            dict(
-                values=[
-                    {
-                        'type': 'message',
-                        'timestamp': 1458857193.973275,
-                        'data': {
-                            'message': 'Whats up dawg?',
-                        },
-                    }
-                ]
-            )
-        )
-        assert len(result.values) == 1
-        assert result.values[0]['type'] == 'message'
-        ts = result.values[0]['timestamp']
-        assert int(ts) == 1458857193
-        assert abs(ts - 1458857193.973275) < 0.001
-        assert result.values[0]['data'] == {'message': 'Whats up dawg?'}
-
-    def test_null_values(self):
-        sink = {}
-
-        assert Breadcrumbs.to_python({}).to_json() == sink
-        assert Breadcrumbs.to_python({'values': None}).to_json() == sink
-        assert Breadcrumbs.to_python({'values': []}).to_json() == sink
-
-        # TODO(markus): The following cases should eventually generate {"values": [None]}
-        assert Breadcrumbs.to_python({'values': [{}]}).to_json() == sink
-        assert Breadcrumbs.to_python({'values': [{"type": None}]}).to_json() == sink
-
-        assert Breadcrumbs.to_python({'values': [None]}).to_json() == sink
-
-    def test_non_string_keys(self):
-        result = Breadcrumbs.to_python(
-            dict(
-                values=[
-                    {
-                        'type': 'message',
-                        'timestamp': 1458857193.973275,
-                        'data': {
-                            'extra': {
-                                'foo': 'bar'
-                            },
-                        },
-                    }
-                ]
-            )
-        )
-        assert len(result.values) == 1
-        assert result.values[0]['data'] == {'extra': {"foo": "bar"}}
-
-    def test_string_data(self):
-        result = Breadcrumbs.to_python(
-            dict(
-                values=[
-                    {
-                        'type': 'message',
-                        'timestamp': 1458857193.973275,
-                        'data': 'must be a mapping'
-                    }
-                ]
-            )
-        )
-        assert len(result.values) == 1
-        assert not result.values[0].get('data')
diff --git a/tests/sentry/interfaces/test_contexts.py b/tests/sentry/interfaces/test_contexts.py
deleted file mode 100644
index d77918f842..0000000000
--- a/tests/sentry/interfaces/test_contexts.py
+++ /dev/null
@@ -1,219 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from sentry.interfaces.contexts import Contexts
-from sentry.testutils import TestCase
-
-
-class ContextsTest(TestCase):
-    def test_os(self):
-        ctx = Contexts.to_python({
-            'os': {
-                'name': 'Windows',
-                'version': '95',
-                'rooted': True,
-            },
-        })
-        assert sorted(ctx.iter_tags()) == [
-            ('os', 'Windows 95'),
-            ('os.name', 'Windows'),
-            ('os.rooted', 'yes'),
-        ]
-        assert ctx.to_json() == {
-            'os': {
-                'type': 'os',
-                'name': 'Windows',
-                'version': '95',
-                'rooted': True,
-            }
-        }
-
-    def test_null_values(self):
-        assert Contexts.to_python({'os': None}).to_json() == {}
-        assert Contexts.to_python({'os': {}}).to_json() == {'os': {'type': 'os'}}
-        assert Contexts.to_python({'os': {'name': None}}).to_json() == {'os': {'type': 'os'}}
-
-    def test_os_normalization(self):
-        ctx = Contexts.to_python({
-            'os': {
-                'raw_description': 'Microsoft Windows 6.1.7601 S'
-            },
-        })
-        assert sorted(ctx.iter_tags()) == [
-            ('os', 'Windows 6.1.7601'),
-            ('os.name', 'Windows')
-        ]
-        assert ctx.to_json() == {
-            'os': {
-                'type': 'os',
-                'raw_description': 'Microsoft Windows 6.1.7601 S',
-                'name': 'Windows',
-                'version': '6.1.7601'
-            }
-        }
-
-    def test_runtime(self):
-        ctx = Contexts.to_python(
-            {
-                'runtime': {
-                    'name': 'Java',
-                    'version': '1.2.3',
-                    'build': 'BLAH',
-                },
-            }
-        )
-        assert sorted(ctx.iter_tags()) == [
-            ('runtime', 'Java 1.2.3'),
-            ('runtime.name', 'Java'),
-        ]
-        assert ctx.to_json() == {
-            'runtime': {
-                'type': 'runtime',
-                'name': 'Java',
-                'version': '1.2.3',
-                'build': 'BLAH',
-            }
-        }
-
-    def test_runtime_normalization(self):
-        ctx = Contexts.to_python({
-            'runtime': {
-                'raw_description': '.NET Framework 4.0.30319.42000',
-                'build': '461808',
-            }
-        })
-        assert sorted(ctx.iter_tags()) == [
-            ('runtime', '.NET Framework 4.7.2'),
-            ('runtime.name', '.NET Framework')
-        ]
-        assert ctx.to_json() == {
-            'runtime': {
-                'type': 'runtime',
-                'raw_description': '.NET Framework 4.0.30319.42000',
-                'build': '461808',
-                'name': '.NET Framework',
-                'version': '4.7.2'
-            }
-        }
-
-    def test_device(self):
-        ctx = Contexts.to_python(
-            {
-                'device': {
-                    'name': 'My iPad',
-                    'model': 'iPad',
-                    'model_id': '1234AB',
-                    'version': '1.2.3',
-                    'arch': 'arm64',
-                },
-            }
-        )
-        assert sorted(ctx.iter_tags()) == [
-            ('device', 'iPad'),
-        ]
-        assert ctx.to_json() == {
-            'device': {
-                'type': 'device',
-                'name': 'My iPad',
-                'model': 'iPad',
-                'model_id': '1234AB',
-                'version': '1.2.3',
-                'arch': 'arm64',
-            }
-        }
-
-    def test_device_with_alias(self):
-        ctx = Contexts.to_python(
-            {
-                'my_device': {
-                    'type': 'device',
-                    'title': 'My Title',
-                    'name': 'My iPad',
-                    'model': 'iPad',
-                    'model_id': '1234AB',
-                    'version': '1.2.3',
-                    'arch': 'arm64',
-                },
-            }
-        )
-        assert sorted(ctx.iter_tags()) == [('my_device', 'iPad')]
-        assert ctx.to_json() == {
-            'my_device': {
-                'type': 'device',
-                'title': 'My Title',
-                'name': 'My iPad',
-                'model': 'iPad',
-                'model_id': '1234AB',
-                'version': '1.2.3',
-                'arch': 'arm64',
-            }
-        }
-
-    def test_default(self):
-        ctx = Contexts.to_python(
-            {
-                'whatever': {
-                    'foo': 'bar',
-                    'blub': 'blah',
-                    'biz': [1, 2, 3],
-                    'baz': {
-                        'foo': 'bar'
-                    },
-                },
-            }
-        )
-        assert sorted(ctx.iter_tags()) == []
-        assert ctx.to_json() == {
-            'whatever': {
-                'type': 'default',
-                'foo': 'bar',
-                'blub': 'blah',
-                'biz': [1, 2, 3],
-                'baz': {
-                    'foo': 'bar'
-                },
-            }
-        }
-
-    def test_path(self):
-        assert Contexts().get_path() == 'contexts'
-
-    def test_app(self):
-        ctx = Contexts.to_python({
-            'app': {
-                'app_id': '1234',
-                'device_app_hash': '5678',
-            },
-        })
-        assert sorted(ctx.iter_tags()) == [
-            ('app.device', '5678'),
-        ]
-        assert ctx.to_json() == {
-            'app': {
-                'type': 'app',
-                'app_id': '1234',
-                'device_app_hash': '5678',
-            }
-        }
-
-    def test_gpu(self):
-        ctx = Contexts.to_python({
-            'gpu': {
-                'name': 'AMD Radeon Pro 560',
-                'vendor_name': 'Apple',
-                'version': 'Metal'
-            },
-        })
-        assert sorted(ctx.iter_tags()) == [
-            ('gpu.name', 'AMD Radeon Pro 560'),
-            ('gpu.vendor', 'Apple'),
-        ]
-        assert ctx.to_json() == {
-            'gpu': {
-                'type': 'gpu',
-                'name': 'AMD Radeon Pro 560',
-                'vendor_name': 'Apple',
-                'version': 'Metal'
-            }
-        }
diff --git a/tests/sentry/interfaces/test_debug_meta.py b/tests/sentry/interfaces/test_debug_meta.py
deleted file mode 100644
index f5262a2c22..0000000000
--- a/tests/sentry/interfaces/test_debug_meta.py
+++ /dev/null
@@ -1,173 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from sentry.interfaces.debug_meta import DebugMeta
-from sentry.testutils import TestCase
-
-
-class DebugMetaTest(TestCase):
-    def test_null_values(self):
-        assert DebugMeta.to_python({}).to_json() == {}
-        assert DebugMeta.to_python({"images": None}).to_json() == {}
-
-        # TODO(markus): Should eventually generate {"images": [None]}
-        assert DebugMeta.to_python({"images": [None]}).to_json() == {}
-
-    def test_apple_behavior(self):
-        image_name = (
-            '/var/containers/Bundle/Application/'
-            'B33C37A8-F933-4B6B-9FFA-152282BFDF13/SentryTest.app/SentryTest'
-        )
-        interface = DebugMeta.to_python(
-            {
-                "images": [
-                    {
-                        "type": "apple",
-                        "cpu_subtype": 0,
-                        "uuid": "C05B4DDD-69A7-3840-A649-32180D341587",
-                        "image_vmaddr": 4294967296,
-                        "image_addr": '0x100020000',
-                        "cpu_type": 16777228,
-                        "image_size": 32768,
-                        "name": image_name,
-                    }
-                ],
-                "sdk_info": {
-                    "sdk_name": "iOS",
-                    "version_major": 9,
-                    "version_minor": 3,
-                    "version_patchlevel": 0
-                }
-            }
-        )
-
-        assert len(interface.images) == 1
-        assert interface.images[0] == {
-            'type': 'apple',
-            'cpu_type': 16777228,
-            'cpu_subtype': 0,
-            'uuid': 'c05b4ddd-69a7-3840-a649-32180d341587',
-            'image_vmaddr': '0x100000000',
-            'image_addr': '0x100020000',
-            'image_size': 32768,
-            'name': image_name,
-        }
-        assert interface.sdk_info == {
-            'build': None,
-            'dsym_type': 'none',
-            'sdk_name': 'iOS',
-            'version_major': 9,
-            'version_minor': 3,
-            'version_patchlevel': 0,
-        }
-
-    def test_apple_behavior_with_arch(self):
-        image_name = (
-            '/var/containers/Bundle/Application/'
-            'B33C37A8-F933-4B6B-9FFA-152282BFDF13/SentryTest.app/SentryTest'
-        )
-        interface = DebugMeta.to_python(
-            {
-                "images": [
-                    {
-                        "type": "apple",
-                        "arch": "x86_64",
-                        "cpu_subtype": 0,
-                        "uuid": "C05B4DDD-69A7-3840-A649-32180D341587",
-                        "image_vmaddr": 4294967296,
-                        "image_addr": '0x100020000',
-                        "cpu_type": 16777228,
-                        "image_size": 32768,
-                        "name": image_name,
-                    }
-                ],
-                "sdk_info": {
-                    "sdk_name": "iOS",
-                    "version_major": 9,
-                    "version_minor": 3,
-                    "version_patchlevel": 0
-                }
-            }
-        )
-
-        assert interface.images[0]['arch'] == 'x86_64'
-
-    def test_symbolic_behavior(self):
-        interface = DebugMeta.to_python(
-            {
-                "images": [
-                    {
-                        "type": "symbolic",
-                        "id": "3249d99d-0c40-4931-8610-f4e4fb0b6936-1",
-                        "image_addr": 2752512,
-                        "image_size": 36864,
-                        "name": "C:\\projects\\breakpad-tools\\windows\\Release\\crash.exe",
-                    }
-                ],
-                "sdk_info": {
-                    "sdk_name": "Windows",
-                    "version_major": 10,
-                    "version_minor": 0,
-                    "version_patchlevel": 14393
-                }
-            }
-        )
-
-        assert len(interface.images) == 1
-        assert interface.images[0] == {
-            'type': 'symbolic',
-            'id': '3249d99d-0c40-4931-8610-f4e4fb0b6936-1',
-            'image_vmaddr': '0x0',
-            'image_addr': '0x2a0000',
-            'image_size': 36864,
-            'name': 'C:\\projects\\breakpad-tools\\windows\\Release\\crash.exe',
-        }
-
-        assert interface.sdk_info == {
-            'build': None,
-            'dsym_type': 'none',
-            'sdk_name': 'Windows',
-            'version_major': 10,
-            'version_minor': 0,
-            'version_patchlevel': 14393,
-        }
-
-    def test_symbolic_behavior_with_arch(self):
-        interface = DebugMeta.to_python(
-            {
-                "images": [
-                    {
-                        "type": "symbolic",
-                        "arch": "x86",
-                        "id": "3249d99d-0c40-4931-8610-f4e4fb0b6936-1",
-                        "image_addr": 2752512,
-                        "image_size": 36864,
-                        "name": "C:\\projects\\breakpad-tools\\windows\\Release\\crash.exe",
-                    }
-                ],
-                "sdk_info": {
-                    "sdk_name": "Windows",
-                    "version_major": 10,
-                    "version_minor": 0,
-                    "version_patchlevel": 14393
-                }
-            }
-        )
-
-        assert interface.images[0]['arch'] == 'x86'
-
-    def test_proguard_behavior(self):
-        interface = DebugMeta.to_python(
-            {
-                "images": [{
-                    "type": "proguard",
-                    "uuid": "C05B4DDD-69A7-3840-A649-32180D341587",
-                }]
-            }
-        )
-
-        assert len(interface.images) == 1
-        img = interface.images[0]
-        assert img['type'] == 'proguard'
-        assert img['uuid'] == 'c05b4ddd-69a7-3840-a649-32180d341587'
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
deleted file mode 100644
index 8f169a3dab..0000000000
--- a/tests/sentry/interfaces/test_exception.py
+++ /dev/null
@@ -1,815 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from exam import fixture
-
-from sentry.interfaces.exception import (SingleException, Exception, slim_exception_data,
-                                         Mechanism, normalize_mechanism_meta, upgrade_legacy_mechanism)
-from sentry.testutils import TestCase
-from sentry.stacktraces import normalize_in_app
-
-
-class ExceptionTest(TestCase):
-    @fixture
-    def interface(self):
-        return Exception.to_python(
-            dict(
-                values=[
-                    {
-                        'type': 'ValueError',
-                        'value': 'hello world',
-                        'module': 'foo.bar',
-                        'stacktrace': {
-                            'frames': [{
-                                'filename': 'foo/baz.py',
-                                'lineno': 1,
-                                'in_app': True,
-                            }]
-                        },
-                    }, {
-                        'type': 'ValueError',
-                        'value': 'hello world',
-                        'module': 'foo.bar',
-                        'stacktrace': {
-                            'frames': [{
-                                'filename': 'foo/baz.py',
-                                'lineno': 1,
-                                'in_app': True,
-                            }]
-                        },
-                    }
-                ]
-            )
-        )
-
-    def test_null_values(self):
-        sink = {}
-        assert Exception.to_python({}).to_json() == sink
-        assert Exception.to_python({'exc_omitted': None}).to_json() == sink
-        assert Exception.to_python({'values': None}).to_json() == sink
-        assert Exception.to_python({'values': []}).to_json() == sink
-        assert Exception.to_python({'values': [None]}).to_json() == {"values": [None]}
-
-    def test_does_not_wrap_if_exception_omitted_present(self):
-        input = {
-            "exc_omitted": None,
-            "mechanism": {
-                "handled": True, "type": "generic"
-            }
-        }
-        assert Exception.to_python(input).to_json() == {}
-
-    def test_path(self):
-        assert self.interface.get_path() == 'exception'
-
-    def test_args_as_keyword_args(self):
-        inst = Exception.to_python(
-            dict(values=[{
-                'type': 'ValueError',
-                'value': 'hello world',
-                'module': 'foo.bar',
-            }])
-        )
-        assert isinstance(inst.values[0], SingleException)
-        assert inst.values[0].type == 'ValueError'
-        assert inst.values[0].value == 'hello world'
-        assert inst.values[0].module == 'foo.bar'
-
-    def test_args_as_old_style(self):
-        inst = Exception.to_python(
-            {
-                'type': 'ValueError',
-                'value': 'hello world',
-                'module': 'foo.bar',
-            }
-        )
-        assert isinstance(inst.values[0], SingleException)
-        assert inst.values[0].type == 'ValueError'
-        assert inst.values[0].value == 'hello world'
-        assert inst.values[0].module == 'foo.bar'
-
-    def test_non_string_value_with_no_type(self):
-        inst = Exception.to_python(
-            {
-                'value': {'foo': 'bar'},
-            }
-        )
-        assert inst.values[0].value == '{"foo":"bar"}'
-
-    def test_serialize_unserialize_behavior(self):
-        result = type(self.interface).to_python(self.interface.to_json())
-        assert result.to_json() == self.interface.to_json()
-
-    def test_to_string(self):
-        result = self.interface.to_string(self.event)
-        assert result == """ValueError: hello world
-  File "foo/baz.py", line 1
-
-ValueError: hello world
-  File "foo/baz.py", line 1"""
-
-    def test_context_with_mixed_frames(self):
-        inst = Exception.to_python(
-            dict(
-                values=[
-                    {
-                        'type': 'ValueError',
-                        'value': 'hello world',
-                        'module': 'foo.bar',
-                        'stacktrace': {
-                            'frames': [{
-                                'filename': 'foo/baz.py',
-                                'lineno': 1,
-                                'in_app': True,
-                            }]
-                        },
-                    }, {
-                        'type': 'ValueError',
-                        'value': 'hello world',
-                        'module': 'foo.bar',
-                        'stacktrace': {
-                            'frames': [{
-                                'filename': 'foo/baz.py',
-                                'lineno': 1,
-                                'in_app': False,
-                            }]
-                        },
-                    }
-                ]
-            )
-        )
-
-        self.create_event(data={
-            'exception': inst.to_json(),
-        })
-        context = inst.get_api_context()
-        assert context['hasSystemFrames']
-
-    def test_context_with_symbols(self):
-        inst = Exception.to_python(
-            dict(
-                values=[
-                    {
-                        'type': 'ValueError',
-                        'value': 'hello world',
-                        'module': 'foo.bar',
-                        'stacktrace': {
-                            'frames': [
-                                {
-                                    'filename': 'foo/baz.py',
-                                    'function': 'myfunc',
-                                    'symbol': 'Class.myfunc',
-                                    'lineno': 1,
-                                    'in_app': True,
-                                }
-                            ]
-                        },
-                    }
-                ]
-            )
-        )
-
-        self.create_event(data={
-            'exception': inst.to_json(),
-        })
-        context = inst.get_api_context()
-        assert context['values'][0]['stacktrace']['frames'][0]['symbol'] == 'Class.myfunc'
-
-    def test_context_with_only_system_frames(self):
-        inst = Exception.to_python(
-            dict(
-                values=[
-                    {
-                        'type': 'ValueError',
-                        'value': 'hello world',
-                        'module': 'foo.bar',
-                        'stacktrace': {
-                            'frames': [{
-                                'filename': 'foo/baz.py',
-                                'lineno': 1,
-                                'in_app': False,
-                            }]
-                        },
-                    }, {
-                        'type': 'ValueError',
-                        'value': 'hello world',
-                        'module': 'foo.bar',
-                        'stacktrace': {
-                            'frames': [{
-                                'filename': 'foo/baz.py',
-                                'lineno': 1,
-                                'in_app': False,
-                            }]
-                        },
-                    }
-                ]
-            )
-        )
-
-        self.create_event(data={
-            'exception': inst.to_json(),
-        })
-        context = inst.get_api_context()
-        assert not context['hasSystemFrames']
-
-    def test_context_with_only_app_frames(self):
-        values = [
-            {
-                'type': 'ValueError',
-                'value': 'hello world',
-                'module': 'foo.bar',
-                'stacktrace': {
-                    'frames': [{
-                        'filename': 'foo/baz.py',
-                        'lineno': 1,
-                        'in_app': True,
-                    }]
-                },
-            }, {
-                'type': 'ValueError',
-                'value': 'hello world',
-                'module': 'foo.bar',
-                'stacktrace': {
-                    'frames': [{
-                        'filename': 'foo/baz.py',
-                        'lineno': 1,
-                        'in_app': True,
-                    }]
-                },
-            }
-        ]
-        exc = dict(values=values)
-        normalize_in_app({'exception': exc})
-        inst = Exception.to_python(exc)
-
-        self.create_event(data={
-            'exception': inst.to_json(),
-        })
-        context = inst.get_api_context()
-        assert not context['hasSystemFrames']
-
-    def test_context_with_raw_stacks(self):
-        inst = Exception.to_python(
-            dict(
-                values=[
-                    {
-                        'type': 'ValueError',
-                        'value': 'hello world',
-                        'module': 'foobar',
-                        'raw_stacktrace': {
-                            'frames': [
-                                {
-                                    'filename': None,
-                                    'lineno': 1,
-                                    'function': '<redacted>',
-                                    'in_app': True,
-                                }
-                            ]
-                        },
-                        'stacktrace': {
-                            'frames': [
-                                {
-                                    'filename': 'foo/baz.c',
-                                    'lineno': 1,
-                                    'function': 'main',
-                                    'in_app': True,
-                                }
-                            ]
-                        },
-                    }
-                ]
-            )
-        )
-
-        self.create_event(data={
-            'exception': inst.to_json(),
-        })
-        context = inst.get_api_context()
-        assert context['values'][0]['stacktrace']['frames'][0]['function'] == 'main'
-        assert context['values'][0]['rawStacktrace']['frames'][0]['function'] == '<redacted>'
-
-    def test_context_with_mechanism(self):
-        inst = Exception.to_python(
-            dict(
-                values=[
-                    {
-                        'type': 'ValueError',
-                        'value': 'hello world',
-                        'module': 'foo.bar',
-                        'stacktrace': {
-                            'frames': [{
-                                'filename': 'foo/baz.py',
-                                'lineno': 1,
-                                'in_app': True,
-                            }]
-                        },
-                        'mechanism': {
-                            'type': 'generic',
-                        }
-                    }
-                ]
-            )
-        )
-
-        self.create_event(data={
-            'exception': inst.to_json(),
-        })
-        context = inst.get_api_context()
-        assert context['values'][0]['mechanism']['type'] == 'generic'
-
-    def test_iteration(self):
-        inst = Exception.to_python({
-            'values': [None, {'type': 'ValueError'}, None]
-        })
-
-        assert len(inst) == 1
-        assert inst[0].type == 'ValueError'
-        for exc in inst:
-            assert exc.type == 'ValueError'
-
-
-class SingleExceptionTest(TestCase):
-    @fixture
-    def interface(self):
-        return SingleException.to_python(
-            dict(
-                type='ValueError',
-                value='hello world',
-                module='foo.bar',
-            )
-        )
-
-    def test_serialize_behavior(self):
-        assert self.interface.to_json() == {
-            'type': self.interface.type,
-            'value': self.interface.value,
-            'module': self.interface.module,
-        }
-
-    def test_serialize_unserialize_behavior(self):
-        result = type(self.interface).to_python(self.interface.to_json())
-        assert result.to_json() == self.interface.to_json()
-
-    def test_only_requires_only_type_or_value(self):
-        SingleException.to_python(dict(
-            type='ValueError',
-        ))
-        SingleException.to_python(dict(
-            value='ValueError',
-        ))
-
-    def test_throws_away_empty_stacktrace(self):
-        result = SingleException.to_python(
-            dict(
-                type='ValueError',
-                value='foo',
-                stacktrace={'frames': []},
-            )
-        )
-        assert not result.stacktrace
-
-    def test_coerces_object_value_to_string(self):
-        result = SingleException.to_python({
-            'type': 'ValueError',
-            'value': {'unauthorized': True},
-        })
-        assert result.value == '{"unauthorized":true}'
-
-    def test_handles_type_in_value(self):
-        result = SingleException.to_python(dict(
-            value='ValueError: unauthorized',
-        ))
-        assert result.type == 'ValueError'
-        assert result.value == 'unauthorized'
-
-        result = SingleException.to_python(dict(
-            value='ValueError:unauthorized',
-        ))
-        assert result.type == 'ValueError'
-        assert result.value == 'unauthorized'
-
-    def test_value_serialization_idempotent(self):
-        result = SingleException.to_python({
-            'type': None,
-            'value': {'unauthorized': True},
-        }).to_json()
-
-        assert 'type' not in result
-        assert result['value'] == '{"unauthorized":true}'
-
-        # Don't re-split a json-serialized value on the colon
-        result = SingleException.to_python(result).to_json()
-        assert 'type' not in result
-        assert result['value'] == '{"unauthorized":true}'
-
-
-class SlimExceptionDataTest(TestCase):
-    def test_under_max(self):
-        interface = Exception.to_python(
-            {
-                'values': [{
-                    'value': 'foo',
-                    'stacktrace': {
-                        'frames': [{
-                            'filename': 'foo'
-                        }]
-                    },
-                }]
-            }
-        )
-        slim_exception_data(interface)
-        assert len(interface.values[0].stacktrace.frames) == 1
-
-    def test_over_max(self):
-        values = []
-        for x in range(5):
-            exc = {'value': 'exc %d' % x, 'stacktrace': {'frames': []}}
-            values.append(exc)
-            for y in range(5):
-                exc['stacktrace']['frames'].append(
-                    {
-                        'filename': 'exc %d frame %d' % (x, y),
-                        'vars': {
-                            'foo': 'bar'
-                        },
-                        'context_line': 'b',
-                        'pre_context': ['a'],
-                        'post_context': ['c'],
-                    }
-                )
-
-        interface = Exception.to_python({'values': values})
-
-        # slim to 10 frames to make tests easier
-        slim_exception_data(interface, 10)
-
-        assert len(interface.values) == 5
-        for e_num, value in enumerate(interface.values):
-            assert value.value == 'exc %d' % e_num
-            assert len(value.stacktrace.frames) == 5
-            for f_num, frame in enumerate(value.stacktrace.frames):
-                assert frame.filename == 'exc %d frame %d' % (e_num, f_num)
-                if e_num in (0, 4):
-                    assert frame.vars is not None
-                    assert frame.pre_context is not None
-                    assert frame.post_context is not None
-                else:
-                    assert frame.vars is None
-                    assert frame.pre_context is None
-                    assert frame.post_context is None
-
-
-class MechanismTest(TestCase):
-    def test_path(self):
-        inst = Mechanism.to_python({'type': 'generic'})
-        assert inst.get_path() == 'mechanism'
-
-    def test_empty_mechanism(self):
-        data = {'type': 'generic'}
-        assert Mechanism.to_python(data).to_json() == data
-
-    def test_tag(self):
-        data = {'type': 'generic'}
-        inst = Mechanism.to_python(data)
-        assert list(inst.iter_tags()) == [
-            ('mechanism', 'generic')
-        ]
-
-    def test_tag_with_handled(self):
-        data = {
-            'type': 'generic',
-            'handled': False,
-        }
-
-        inst = Mechanism.to_python(data)
-        assert list(inst.iter_tags()) == [
-            ('mechanism', 'generic'),
-            ('handled', 'no')
-        ]
-
-    def test_data(self):
-        data = {
-            'type': 'generic',
-            'data': {'relevant_address': '0x1'},
-        }
-        assert Mechanism.to_python(data).to_json() == data
-
-    def test_empty_data(self):
-        data = {
-            'type': 'generic',
-            'data': {},
-        }
-
-        assert Mechanism.to_python(data).to_json() == {
-            'type': 'generic'
-        }
-
-    def test_min_mach_meta(self):
-        data = {
-            'type': 'generic',
-            'meta': {
-                'mach_exception': {
-                    'exception': 10,
-                    'code': 0,
-                    'subcode': 0,
-                }
-            }
-        }
-        assert Mechanism.to_python(data).to_json() == data
-
-    def test_full_mach_meta(self):
-        data = {
-            'type': 'generic',
-            'meta': {
-                'mach_exception': {
-                    'exception': 10,
-                    'code': 0,
-                    'subcode': 0,
-                    'name': 'EXC_CRASH'
-                }
-            }
-        }
-        assert Mechanism.to_python(data).to_json() == data
-
-    def test_min_signal_meta(self):
-        data = {
-            'type': 'generic',
-            'meta': {
-                'signal': {
-                    'number': 10,
-                    'code': 0,
-                }
-            }
-        }
-        assert Mechanism.to_python(data).to_json() == data
-
-    def test_full_signal_meta(self):
-        data = {
-            'type': 'generic',
-            'meta': {
-                'signal': {
-                    'number': 10,
-                    'code': 0,
-                    'name': 'SIGBUS',
-                    'code_name': 'BUS_NOOP',
-                }
-            }
-        }
-        assert Mechanism.to_python(data).to_json() == data
-
-    def test_min_errno_meta(self):
-        data = {
-            'type': 'generic',
-            'meta': {
-                'errno': {
-                    'number': 2,
-                }
-            }
-        }
-        assert Mechanism.to_python(data).to_json() == data
-
-    def test_full_errno_meta(self):
-        data = {
-            'type': 'generic',
-            'meta': {
-                'errno': {
-                    'number': 2,
-                    'name': 'ENOENT',
-                }
-            }
-        }
-        assert Mechanism.to_python(data).to_json() == data
-
-    def test_upgrade(self):
-        data = {
-            "posix_signal": {
-                "name": "SIGSEGV",
-                "code_name": "SEGV_NOOP",
-                "signal": 11,
-                "code": 0
-            },
-            "relevant_address": "0x1",
-            "mach_exception": {
-                "exception": 1,
-                "exception_name": "EXC_BAD_ACCESS",
-                "subcode": 8,
-                "code": 1
-            }
-        }
-
-        assert upgrade_legacy_mechanism(data) == {
-            "type": "generic",
-            "data": {
-                "relevant_address": "0x1"
-            },
-            "meta": {
-                "mach_exception": {
-                    "exception": 1,
-                    "subcode": 8,
-                    "code": 1,
-                    "name": "EXC_BAD_ACCESS"
-                },
-                "signal": {
-                    "number": 11,
-                    "code": 0,
-                    "name": "SIGSEGV",
-                    "code_name": "SEGV_NOOP"
-                }
-            }
-        }
-
-    def test_normalize_missing(self):
-        data = {'type': 'generic'}
-        normalize_mechanism_meta(data, None)
-        assert data == {'type': 'generic'}
-
-    def test_normalize_errno(self):
-        data = {
-            'type': 'generic',
-            'meta': {
-                'errno': {
-                    'number': 2
-                }
-            }
-        }
-
-        normalize_mechanism_meta(data, {'sdk_name': 'linux'})
-        assert data['meta']['errno'] == {
-            'number': 2,
-            'name': 'ENOENT'
-        }
-
-    def test_normalize_errno_override(self):
-        data = {
-            'type': 'generic',
-            'meta': {
-                'errno': {
-                    'number': 2,
-                    'name': 'OVERRIDDEN',
-                }
-            }
-        }
-
-        normalize_mechanism_meta(data, {'sdk_name': 'linux'})
-        assert data['meta']['errno'] == {
-            'number': 2,
-            'name': 'OVERRIDDEN',
-        }
-
-    def test_normalize_errno_fail(self):
-        data = {
-            'type': 'generic',
-            'meta': {
-                'errno': {
-                    'number': 2
-                }
-            }
-        }
-
-        normalize_mechanism_meta(data, {'sdk_name': 'invalid'})
-        assert data['meta']['errno'] == {
-            'number': 2,
-        }
-
-    def test_normalize_signal(self):
-        data = {
-            'type': 'generic',
-            'meta': {
-                'signal': {
-                    'number': 11,
-                    'code': 0,
-                }
-            }
-        }
-
-        normalize_mechanism_meta(data, {'sdk_name': 'macos'})
-        assert data['meta']['signal'] == {
-            'number': 11,
-            'code': 0,
-            'name': 'SIGSEGV',
-            'code_name': 'SEGV_NOOP'
-        }
-
-    def test_normalize_partial_signal(self):
-        data = {
-            'type': 'generic',
-            'meta': {
-                'signal': {
-                    'number': 11
-                }
-            }
-        }
-
-        normalize_mechanism_meta(data, {'sdk_name': 'linux'})
-        assert data['meta']['signal'] == {
-            'number': 11,
-            'name': 'SIGSEGV',
-        }
-
-    def test_normalize_signal_override(self):
-        data = {
-            'type': 'generic',
-            'meta': {
-                'signal': {
-                    'number': 11,
-                    'code': 0,
-                    'name': 'OVERRIDDEN',
-                    'code_name': 'OVERRIDDEN',
-                }
-            }
-        }
-
-        normalize_mechanism_meta(data, {'sdk_name': 'macos'})
-        assert data['meta']['signal'] == {
-            'number': 11,
-            'code': 0,
-            'name': 'OVERRIDDEN',
-            'code_name': 'OVERRIDDEN',
-        }
-
-    def test_normalize_signal_fail(self):
-        data = {
-            'type': 'generic',
-            'meta': {
-                'signal': {
-                    'number': 11,
-                    'code': 0,
-                }
-            }
-        }
-
-        normalize_mechanism_meta(data, {'sdk_name': 'invalid'})
-        assert data['meta']['signal'] == {
-            'number': 11,
-            'code': 0,
-        }
-
-    def test_normalize_mach(self):
-        data = {
-            'type': 'generic',
-            'meta': {
-                'mach_exception': {
-                    'exception': 1,
-                    'subcode': 8,
-                    'code': 1,
-                }
-            }
-        }
-
-        # We do not need SDK information here because mach exceptions only
-        # occur on Darwin
-
-        normalize_mechanism_meta(data, None)
-        assert data['meta']['mach_exception'] == {
-            'exception': 1,
-            'subcode': 8,
-            'code': 1,
-            'name': 'EXC_BAD_ACCESS'
-        }
-
-    def test_normalize_mach_override(self):
-        data = {
-            'type': 'generic',
-            'meta': {
-                'mach_exception': {
-                    'exception': 1,
-                    'subcode': 8,
-                    'code': 1,
-                    'name': 'OVERRIDDEN',
-                }
-            }
-        }
-
-        # We do not need SDK information here because mach exceptions only
-        # occur on Darwin
-
-        normalize_mechanism_meta(data, None)
-        assert data['meta']['mach_exception'] == {
-            'exception': 1,
-            'subcode': 8,
-            'code': 1,
-            'name': 'OVERRIDDEN'
-        }
-
-    def test_normalize_mach_fail(self):
-        data = {
-            'type': 'generic',
-            'meta': {
-                'mach_exception': {
-                    'exception': 99,
-                    'subcode': 8,
-                    'code': 1,
-                }
-            }
-        }
-
-        # We do not need SDK information here because mach exceptions only
-        # occur on Darwin
-
-        normalize_mechanism_meta(data, None)
-        assert data['meta']['mach_exception'] == {
-            'exception': 99,
-            'subcode': 8,
-            'code': 1,
-        }
diff --git a/tests/sentry/interfaces/test_geo.py b/tests/sentry/interfaces/test_geo.py
deleted file mode 100644
index e04e008d2f..0000000000
--- a/tests/sentry/interfaces/test_geo.py
+++ /dev/null
@@ -1,72 +0,0 @@
-from __future__ import absolute_import
-
-import mock
-
-from sentry.interfaces.geo import Geo
-from sentry.testutils import TestCase
-
-
-class GeoTest(TestCase):
-    def test_serialize_behavior(self):
-        assert Geo.to_python({
-            'country_code': 'US',
-            'city': 'San Francisco',
-            'region': 'CA',
-        }).to_json() == {
-            'country_code': 'US',
-            'city': 'San Francisco',
-            'region': 'CA',
-        }
-
-    def test_null_values(self):
-        sink = {}
-        assert Geo.to_python({}).to_json() == sink
-        assert Geo.to_python({"country_code": None}).to_json() == sink
-        assert Geo.to_python({"city": None}).to_json() == sink
-        assert Geo.to_python({"region": None}).to_json() == sink
-
-    @mock.patch('sentry.interfaces.geo.geo_by_addr')
-    def test_from_ip_address(self, geo_by_addr_mock):
-        geo_by_addr_mock.return_value = {
-            'area_code': 415,
-            'city': 'San Francisco',
-            'country_code': 'US',
-            'country_code3': 'USA',
-            'country_name': 'United States',
-            'dma_code': 807,
-            'latitude': 37.79570007324219,
-            'longitude': -122.4208984375,
-            'metro_code': 807,
-            'postal_code': '94109',
-            'region': 'CA',
-            'region_name': 'California',
-            'time_zone': 'America/Los_Angeles'
-        }
-
-        assert Geo.from_ip_address('192.168.0.1').to_json() == {
-            'country_code': 'US',
-            'city': 'San Francisco',
-            'region': 'CA',
-        }
-
-    def test_path(self):
-        assert Geo().get_path() == 'geo'
-
-    @mock.patch('sentry.interfaces.geo.geo_by_addr')
-    def test_iso_8859_1_country_code(self, geo_by_addr_mock):
-        # https://github.com/maxmind/geoip-api-python/releases/tag/v1.3.2
-        # Previously GeoIP.country_names was populated from GeoIP_country_name in
-        # the libGeoIP C API. Some versions of the libGeoIP include non-ASCII
-        # ISO-8859-1 characters in these names, causing encoding errors under Python
-
-        geo_by_addr_mock.return_value = {
-            'city': 'San Francisco',
-            'country_code': '\xc5lborg',
-            'region': 'CA',
-        }
-
-        assert Geo.from_ip_address('192.168.0.1').to_json() == {
-            'city': u'San Francisco',
-            'country_code': u'\xc5lborg',
-            'region': u'CA'
-        }
diff --git a/tests/sentry/interfaces/test_http.py b/tests/sentry/interfaces/test_http.py
deleted file mode 100644
index c762758b30..0000000000
--- a/tests/sentry/interfaces/test_http.py
+++ /dev/null
@@ -1,226 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from exam import fixture
-
-from sentry.interfaces.base import InterfaceValidationError
-from sentry.interfaces.http import Http
-from sentry.testutils import TestCase
-
-
-class HttpTest(TestCase):
-    @fixture
-    def interface(self):
-        return Http.to_python(dict(
-            url='http://example.com',
-        ))
-
-    def test_path(self):
-        assert self.interface.get_path() == 'request'
-
-    def test_serialize_unserialize_behavior(self):
-        result = type(self.interface).to_python(self.interface.to_json())
-        assert result.to_json() == self.interface.to_json()
-
-    def test_basic(self):
-        result = self.interface
-        assert result.url == 'http://example.com'
-        assert result.method is None
-        assert result.fragment == ''
-        assert result.query_string == []
-        assert result.data is None
-        assert result.cookies == []
-        assert result.headers == []
-        assert result.env == {}
-        assert result.full_url == result.url
-
-    def test_full(self):
-        result = Http.to_python(
-            dict(
-                method='GET',
-                url='http://example.com',
-                query_string='foo=bar',
-                fragment='foobar',
-                headers={'x-foo-bar': 'baz'},
-                cookies={'foo': 'bar'},
-                env={'bing': 'bong'},
-                data='hello world',
-            )
-        )
-        assert result.method == 'GET'
-        assert result.query_string == [('foo', 'bar')]
-        assert result.fragment == 'foobar'
-        assert result.cookies == [('foo', 'bar')]
-        assert result.headers == [('X-Foo-Bar', 'baz')]
-        assert result.env == {'bing': 'bong'}
-        assert result.data == 'hello world'
-
-    def test_query_string_as_dict(self):
-        result = Http.to_python(dict(
-            url='http://example.com',
-            query_string={'foo': 'bar'},
-        ))
-        assert result.query_string == [('foo', 'bar')]
-
-    def test_query_string_as_pairlist(self):
-        result = Http.to_python(dict(
-            url='http://example.com',
-            query_string=[['foo', 'bar']],
-        ))
-        assert result.query_string == [('foo', 'bar')]
-
-    def test_query_string_as_bytes(self):
-        result = Http.to_python(
-            dict(
-                url='http://example.com',
-                query_string=b'foo=\x00',
-            )
-        )
-        assert result.query_string == [('foo', '\x00')]
-
-    def test_data_as_dict(self):
-        result = Http.to_python(dict(
-            url='http://example.com',
-            data={'foo': 'bar'},
-        ))
-        assert result.data == {'foo': 'bar'}
-
-    def test_urlencoded_data(self):
-        result = Http.to_python(
-            dict(
-                url='http://example.com',
-                headers={'Content-Type': 'application/x-www-form-urlencoded'},
-                data='foo=bar',
-            )
-        )
-
-        assert result.data == {'foo': ['bar']}
-        assert result.inferred_content_type == 'application/x-www-form-urlencoded'
-
-    def test_infer_urlencoded_content_type(self):
-        result = Http.to_python(
-            dict(
-                url='http://example.com',
-                data='foo=bar',
-            )
-        )
-
-        assert result.data == {'foo': ['bar']}
-        assert result.inferred_content_type == 'application/x-www-form-urlencoded'
-
-    def test_json_data(self):
-        result = Http.to_python(
-            dict(
-                url='http://example.com',
-                headers={'Content-Type': 'application/json'},
-                data='{"foo":"bar"}',
-            )
-        )
-
-        assert result.data == {'foo': 'bar'}
-        assert result.inferred_content_type == 'application/json'
-
-    def test_infer_json_content_type(self):
-        result = Http.to_python(
-            dict(
-                url='http://example.com',
-                data='{"foo":"bar"}',
-            )
-        )
-
-        assert result.data == {'foo': 'bar'}
-        assert result.inferred_content_type == 'application/json'
-
-    def test_cookies_as_string(self):
-        result = Http.to_python(dict(
-            url='http://example.com',
-            cookies='a=b;c=d',
-        ))
-        assert result.cookies == [('a', 'b'), ('c', 'd')]
-        result = Http.to_python(dict(
-            url='http://example.com',
-            cookies='a=b&c=d',
-        ))
-        assert result.cookies == [('a', 'b'), ('c', 'd')]
-
-    def test_cookies_in_header(self):
-        result = Http.to_python(dict(
-            url='http://example.com',
-            headers={'Cookie': 'a=b;c=d'},
-        ))
-        assert result.cookies == [('a', 'b'), ('c', 'd')]
-        result = Http.to_python(
-            dict(
-                url='http://example.com',
-                headers={'Cookie': 'a=b;c=d'},
-                cookies={'foo': 'bar'},
-            )
-        )
-        assert result.cookies == [('foo', 'bar')]
-
-    def test_query_string_and_fragment_as_params(self):
-        result = Http.to_python(
-            dict(
-                url='http://example.com',
-                query_string=u'foo\ufffd=bar\u2026',
-                fragment='fragment',
-            )
-        )
-        assert result.url == 'http://example.com'
-        assert result.full_url == 'http://example.com?foo%EF%BF%BD=bar...#fragment'
-
-    def test_query_string_and_fragment_in_url(self):
-        result = Http.to_python(dict(
-            url=u'http://example.com?foo\ufffd=bar#fragment\u2026',
-        ))
-        assert result.url == 'http://example.com'
-        assert result.full_url == 'http://example.com?foo%EF%BF%BD=bar#fragment...'
-
-    def test_header_value_list(self):
-        result = Http.to_python(dict(
-            url='http://example.com',
-            headers={'Foo': ['1', '2']},
-        ))
-        assert result.headers == [('Foo', '1, 2')]
-
-    def test_header_value_str(self):
-        result = Http.to_python(dict(url='http://example.com', headers={'Foo': 1}))
-        assert result.headers == [('Foo', '1')]
-
-    def test_method(self):
-        with self.assertRaises(InterfaceValidationError):
-            Http.to_python(dict(
-                url='http://example.com',
-                method='1234',
-            ))
-
-        with self.assertRaises(InterfaceValidationError):
-            Http.to_python(dict(
-                url='http://example.com',
-                method='A' * 33,
-            ))
-
-        with self.assertRaises(InterfaceValidationError):
-            Http.to_python(dict(
-                url='http://example.com',
-                method='A',
-            ))
-
-        result = Http.to_python(dict(
-            url='http://example.com',
-            method='TEST',
-        ))
-        assert result.method == 'TEST'
-
-        result = Http.to_python(dict(
-            url='http://example.com',
-            method='FOO-BAR',
-        ))
-        assert result.method == 'FOO-BAR'
-
-        result = Http.to_python(dict(
-            url='http://example.com',
-            method='FOO_BAR',
-        ))
-        assert result.method == 'FOO_BAR'
diff --git a/tests/sentry/interfaces/test_message.py b/tests/sentry/interfaces/test_message.py
deleted file mode 100644
index 3f309253fa..0000000000
--- a/tests/sentry/interfaces/test_message.py
+++ /dev/null
@@ -1,69 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from exam import fixture
-
-from sentry.testutils import TestCase
-from sentry.interfaces.message import Message
-
-
-class MessageTest(TestCase):
-    @fixture
-    def interface(self):
-        return Message.to_python(
-            dict(
-                message='Hello there %s!',
-                params=('world', ),
-                formatted='Hello there world!',
-            )
-        )
-
-    def test_serialize_behavior(self):
-        assert self.interface.to_json() == {
-            'message': self.interface.message,
-            'params': self.interface.params,
-            'formatted': 'Hello there world!'
-        }
-
-    def test_format_kwargs(self):
-        interface = Message.to_python(dict(
-            message='Hello there %(name)s!',
-            params={'name': 'world'},
-        ))
-        assert interface.to_json() == {
-            'message': interface.message,
-            'params': interface.params,
-            'formatted': 'Hello there world!'
-        }
-
-    def test_format_braces(self):
-        interface = Message.to_python(dict(
-            message='Hello there {}!',
-            params=('world', ),
-        ))
-        assert interface.to_json() == {
-            'message': interface.message,
-            'params': interface.params,
-            'formatted': 'Hello there world!'
-        }
-
-    def test_stringify_primitives(self):
-        assert Message.to_python({'formatted': 42}).formatted == '42'
-        assert Message.to_python({'formatted': True}).formatted == 'true'
-        assert Message.to_python({'formatted': 4.2}).formatted == '4.2'
-
-    def test_serialize_unserialize_behavior(self):
-        result = type(self.interface).to_python(self.interface.to_json())
-        assert result.to_json() == self.interface.to_json()
-
-    # we had a regression which was throwing this data away
-    def test_retains_formatted(self):
-        result = type(self.interface).to_python({'message': 'foo bar', 'formatted': 'foo bar baz'})
-        assert result.message == 'foo bar'
-        assert result.formatted == 'foo bar baz'
-
-    def test_discards_dupe_message(self):
-        result = type(self.interface).to_python({'message': 'foo bar', 'formatted': 'foo bar'})
-        assert result.message is None
-        assert result.formatted == 'foo bar'
diff --git a/tests/sentry/interfaces/test_paths.py b/tests/sentry/interfaces/test_paths.py
deleted file mode 100644
index ea5912af5d..0000000000
--- a/tests/sentry/interfaces/test_paths.py
+++ /dev/null
@@ -1,11 +0,0 @@
-from __future__ import absolute_import
-
-from django.conf import settings
-from sentry.utils.imports import import_string
-
-
-def test_paths():
-    for interface in settings.SENTRY_INTERFACES.values():
-        cls = import_string(interface)
-        assert cls.path == object.__new__(cls).get_path()
-        assert cls.path == object.__new__(cls).get_alias()
diff --git a/tests/sentry/interfaces/test_sdk.py b/tests/sentry/interfaces/test_sdk.py
deleted file mode 100644
index 8fc3bde889..0000000000
--- a/tests/sentry/interfaces/test_sdk.py
+++ /dev/null
@@ -1,52 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from sentry.interfaces.sdk import Sdk
-from sentry.testutils import TestCase
-
-
-class SdkTest(TestCase):
-    def test_serialize_behavior(self):
-        assert Sdk.to_python({
-            'name': 'sentry-java',
-            'version': '1.0',
-            'integrations': ['log4j'],
-            'packages': [{
-                'name': 'maven:io.sentry.sentry',
-                'version': '1.7.10',
-            }],
-        }).to_json() == {
-            'name': 'sentry-java',
-            'version': '1.0',
-            'integrations': ['log4j'],
-            'packages': [{
-                'name': 'maven:io.sentry.sentry',
-                'version': '1.7.10',
-            }],
-        }
-
-    def test_null_values(self):
-        sink = {}
-        assert Sdk.to_python({}).to_json() == sink
-        assert Sdk.to_python({'name': None}).to_json() == sink
-        assert Sdk.to_python({'integrations': []}).to_json() == sink
-        assert Sdk.to_python({'packages': None}).to_json() == sink
-        assert Sdk.to_python({'packages': [None]}).to_json() == {"packages": [None]}
-
-    def test_missing_name(self):
-        assert Sdk.to_python({
-            'version': '1.0',
-        }).to_json() == {
-            'version': '1.0',
-        }
-
-    def test_missing_version(self):
-        assert Sdk.to_python({
-            'name': 'sentry-unity',
-        }).to_json() == {
-            'name': 'sentry-unity',
-        }
-
-    def test_path(self):
-        assert Sdk().get_path() == 'sdk'
diff --git a/tests/sentry/interfaces/test_security.py b/tests/sentry/interfaces/test_security.py
deleted file mode 100644
index c331c7fb82..0000000000
--- a/tests/sentry/interfaces/test_security.py
+++ /dev/null
@@ -1,324 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from exam import fixture
-
-from sentry.interfaces.security import Csp, ExpectCT, ExpectStaple
-from sentry.testutils import TestCase
-
-
-class CspTest(TestCase):
-    @fixture
-    def interface(self):
-        return Csp.to_python(
-            dict(
-                document_uri='http://example.com',
-                violated_directive='style-src cdn.example.com',
-                blocked_uri='http://example.com/lol.css',
-                effective_directive='style-src',
-            )
-        )
-
-    def test_path(self):
-        assert self.interface.get_path() == 'csp'
-
-    def test_serialize_unserialize_behavior(self):
-        result = type(self.interface).to_python(self.interface.to_json())
-        assert result.to_json() == self.interface.to_json()
-
-    def test_basic(self):
-        result = self.interface
-        assert result.document_uri == 'http://example.com'
-        assert result.violated_directive == 'style-src cdn.example.com'
-        assert result.blocked_uri == 'http://example.com/lol.css'
-
-    def test_coerce_blocked_uri_if_missing(self):
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com',
-                effective_directive='script-src',
-            )
-        )
-        assert result.blocked_uri == 'self'
-
-    def test_get_culprit(self):
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                violated_directive='style-src http://cdn.example.com',
-                effective_directive='style-src',
-            )
-        )
-        assert result.get_culprit() == 'style-src http://cdn.example.com'
-
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                violated_directive='style-src cdn.example.com',
-                effective_directive='style-src',
-            )
-        )
-        assert result.get_culprit() == 'style-src cdn.example.com'
-
-        result = Csp.to_python(
-            dict(
-                document_uri='https://example.com/foo',
-                violated_directive='style-src cdn.example.com',
-                effective_directive='style-src',
-            )
-        )
-        assert result.get_culprit() == 'style-src cdn.example.com'
-
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                violated_directive='style-src https://cdn.example.com',
-                effective_directive='style-src',
-            )
-        )
-        assert result.get_culprit() == 'style-src https://cdn.example.com'
-
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                violated_directive='style-src http://example.com',
-                effective_directive='style-src',
-            )
-        )
-        assert result.get_culprit() == "style-src 'self'"
-
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                violated_directive='style-src http://example2.com example.com',
-                effective_directive='style-src',
-            )
-        )
-        assert result.get_culprit() == "style-src http://example2.com 'self'"
-
-    def test_get_tags(self):
-        assert self.interface.get_tags() == [
-            ('effective-directive', 'style-src'), ('blocked-uri', 'http://example.com/lol.css'),
-        ]
-
-    def test_get_tags_stripe(self):
-        result = Csp.to_python(
-            dict(
-                blocked_uri='https://api.stripe.com/v1/tokens?card[number]=xxx',
-                effective_directive='script-src',
-            )
-        )
-        assert result.get_tags() == [
-            ('effective-directive', 'script-src'),
-            ('blocked-uri', 'https://api.stripe.com/v1/tokens'),
-        ]
-
-    def test_get_message(self):
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                effective_directive='img-src',
-                blocked_uri='http://google.com/foo',
-            )
-        )
-        assert result.get_message() == "Blocked 'image' from 'google.com'"
-
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                effective_directive='style-src',
-                blocked_uri='',
-            )
-        )
-        assert result.get_message() == "Blocked inline 'style'"
-
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                effective_directive='script-src',
-                blocked_uri='',
-                violated_directive="script-src 'unsafe-inline'",
-            )
-        )
-        assert result.get_message() == "Blocked unsafe inline 'script'"
-
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                effective_directive='script-src',
-                blocked_uri='',
-                violated_directive="script-src 'unsafe-eval'",
-            )
-        )
-        assert result.get_message() == "Blocked unsafe eval() 'script'"
-
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                effective_directive='script-src',
-                blocked_uri='',
-                violated_directive="script-src example.com",
-            )
-        )
-        assert result.get_message() == "Blocked unsafe (eval() or inline) 'script'"
-
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                effective_directive='script-src',
-                blocked_uri='data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D',
-            )
-        )
-        assert result.get_message() == "Blocked 'script' from 'data:'"
-
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                effective_directive='script-src',
-                blocked_uri='data',
-            )
-        )
-        assert result.get_message() == "Blocked 'script' from 'data:'"
-
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                effective_directive='style-src-elem',
-                blocked_uri='http://fonts.google.com/foo',
-            )
-        )
-        assert result.get_message() == "Blocked 'style' from 'fonts.google.com'"
-
-        result = Csp.to_python(
-            dict(
-                document_uri='http://example.com/foo',
-                effective_directive='script-src-elem',
-                blocked_uri='http://cdn.ajaxapis.com/foo',
-            )
-        )
-        assert result.get_message() == "Blocked 'script' from 'cdn.ajaxapis.com'"
-
-    def test_real_report(self):
-        raw_report = {
-            "csp-report": {
-                "document-uri": "https://sentry.io/sentry/csp/issues/88513416/",
-                "referrer": "https://sentry.io/sentry/sentry/releases/7329107476ff14cfa19cf013acd8ce47781bb93a/",
-                "violated-directive": "script-src",
-                "effective-directive": "script-src",
-                "original-policy": "default-src *; script-src 'self' 'unsafe-eval' 'unsafe-inline' e90d271df3e973c7.global.ssl.fastly.net cdn.ravenjs.com assets.zendesk.com ajax.googleapis.com ssl.google-analytics.com www.googleadservices.com analytics.twitter.com platform.twitter.com *.pingdom.net js.stripe.com api.stripe.com statuspage-production.s3.amazonaws.com s3.amazonaws.com *.google.com www.gstatic.com aui-cdn.atlassian.com www.hipchat.com *.atlassian.net *.jira.com *.zopim.com; font-src * data:; connect-src * wss://*.zopim.com; style-src 'self' 'unsafe-inline' e90d271df3e973c7.global.ssl.fastly.net s3.amazonaws.com aui-cdn.atlassian.com www.hipchat.com fonts.googleapis.com; img-src * data: blob:; report-uri https://sentry.io/api/54785/csp-report/?sentry_key=f724a8a027db45f5b21507e7142ff78e&sentry_release=39662eb9734f68e56b7f202260bb706be2f4cee7",
-                "disposition": "enforce",
-                "blocked-uri": "http://baddomain.com/test.js?_=1515535030116",
-                "line-number": 24,
-                "column-number": 66270,
-                "source-file": "https://e90d271df3e973c7.global.ssl.fastly.net/_static/f0c7c026a4b2a3d2b287ae2d012c9924/sentry/dist/vendor.js",
-                "status-code": 0,
-                "script-sample": ""
-            }
-        }
-        interface = Csp.from_raw(raw_report)
-        assert interface.effective_directive == 'script-src'
-
-
-class ExpectCTTest(TestCase):
-
-    raw_report = {
-        "expect-ct-report": {
-            "date-time": "2014-04-06T13:00:50Z",
-            "hostname": "www.example.com",
-            "port": 443,
-            "effective-expiration-date": "2014-05-01T12:40:50Z",
-            "served-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
-            "validated-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
-            "scts": [
-                {
-                    "version": 1,
-                    "status": "invalid",
-                    "source": "embedded",
-                    "serialized_sct": "ABCD=="
-                },
-            ],
-        }
-    }
-    interface_json = {
-        'date_time': '2014-04-06T13:00:50Z',
-        'hostname': 'www.example.com',
-        'port': 443,
-        'effective_expiration_date': '2014-05-01T12:40:50Z',
-        'served_certificate_chain': ['-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----'],
-        'validated_certificate_chain': ['-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----'],
-        'scts': [{
-            'status': 'invalid',
-            'source': 'embedded',
-            'serialized_sct': 'ABCD==',
-            'version': 1
-        }]
-    }
-
-    def test_from_raw(self):
-        interface = ExpectCT.from_raw(self.raw_report)
-        assert interface.hostname == 'www.example.com'
-        assert interface.date_time == '2014-04-06T13:00:50Z'
-        assert interface.port == 443
-        assert len(interface.served_certificate_chain) == 1
-
-    def test_to_python(self):
-        interface = ExpectCT.to_python(self.interface_json)
-        assert interface.hostname == 'www.example.com'
-        assert interface.date_time == '2014-04-06T13:00:50Z'
-        assert interface.port == 443
-        assert len(interface.served_certificate_chain) == 1
-
-    def test_serialize_unserialize_behavior(self):
-        assert ExpectCT.to_python(self.interface_json).to_json() == self.interface_json
-
-    def test_invalid_format(self):
-        interface = ExpectCT.to_python({
-            'hostname': 'www.example.com',
-            'date_time': 'Not an RFC3339 datetime'
-        })
-        # invalid keys are just removed
-        assert interface.to_json() == {'hostname': 'www.example.com'}
-
-
-class ExpectStapleTest(TestCase):
-
-    raw_report = {
-        "expect-staple-report": {
-            "date-time": "2014-04-06T13:00:50Z",
-            "hostname": "www.example.com",
-            "port": 443,
-            "response-status": "ERROR_RESPONSE",
-            "cert-status": "REVOKED",
-            "effective-expiration-date": "2014-05-01T12:40:50Z",
-            "served-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
-            "validated-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
-        }
-    }
-    interface_json = {
-        "date_time": "2014-04-06T13:00:50Z",
-        "hostname": "www.example.com",
-        "port": 443,
-        "response_status": "ERROR_RESPONSE",
-        "cert_status": "REVOKED",
-        "effective_expiration_date": "2014-05-01T12:40:50Z",
-        "served_certificate_chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
-        "validated_certificate_chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
-    }
-
-    def test_from_raw(self):
-        interface = ExpectStaple.from_raw(self.raw_report)
-        assert interface.hostname == 'www.example.com'
-        assert interface.date_time == '2014-04-06T13:00:50Z'
-        assert interface.port == 443
-        assert len(interface.served_certificate_chain) == 1
-
-    def test_to_python(self):
-        interface = ExpectStaple.to_python(self.interface_json)
-        assert interface.hostname == 'www.example.com'
-        assert interface.date_time == '2014-04-06T13:00:50Z'
-        assert interface.port == 443
-        assert len(interface.served_certificate_chain) == 1
-
-    def test_serialize_unserialize_behavior(self):
-        assert ExpectStaple.to_python(self.interface_json).to_json() == self.interface_json
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
deleted file mode 100644
index f038138e76..0000000000
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ /dev/null
@@ -1,400 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-import functools
-
-import mock
-from django.conf import settings
-from django.template.loader import render_to_string
-from exam import fixture
-
-from sentry.interfaces.stacktrace import (
-    Frame, Stacktrace, get_context, is_url, slim_frame_data,
-    trim_function_name
-)
-from sentry.models import Event
-from sentry.testutils import TestCase
-
-
-def test_is_url():
-    assert is_url('http://example.org/') is True
-    assert is_url('https://example.org/') is True
-    assert is_url('file:///tmp/filename') is True
-    assert is_url('applewebdata://00000000-0000-1000-8080-808080808080') is True
-    assert is_url('app:///index.bundle') is False   # react native
-    assert is_url('webpack:///./app/index.jsx') is False  # webpack bundle
-    assert is_url('data:,') is False
-    assert is_url('blob:\x00') is False
-
-
-def test_trim_function_name():
-    assert trim_function_name('+[foo:(bar)]', 'objc') == '+[foo:(bar)]'
-    assert trim_function_name('[foo:(bar)]', 'objc') == '[foo:(bar)]'
-    assert trim_function_name('-[foo:(bar)]', 'objc') == '-[foo:(bar)]'
-    assert trim_function_name(
-        '(anonymous namespace)::foo(int)',
-        'native') == '(anonymous namespace)::foo'
-    assert trim_function_name('foo::bar::foo(int)', 'native') == 'foo::bar::foo'
-
-
-class GetContextTest(TestCase):
-    def test_works_with_empty_filename(self):
-        result = get_context(0, 'hello world')
-        assert result == [(0, 'hello world')]
-
-
-class StacktraceTest(TestCase):
-    @fixture
-    def interface(self):
-        return Stacktrace.to_python(
-            dict(
-                frames=[
-                    {
-                        'filename': 'foo/bar.py'
-                    }, {
-                        'filename': 'foo/baz.py',
-                        'lineno': 1,
-                        'in_app': True,
-                    }
-                ]
-            )
-        )
-
-    def test_null_values(self):
-        sink = {}
-
-        assert Stacktrace.to_python({}).to_json() == sink
-        assert Stacktrace.to_python({'frames': None}).to_json() == sink
-        assert Stacktrace.to_python({'frames': []}).to_json() == sink
-
-        # TODO(markus): Should eventually generate frames: [None]
-        assert Stacktrace.to_python({'frames': [None]}).to_json() == {}
-
-    def test_null_values_in_frames(self):
-        sink = {'frames': [{}]}
-
-        assert Stacktrace.to_python({'frames': [{}]}).to_json() == sink
-        assert Stacktrace.to_python({'frames': [{'abs_path': None}]}).to_json() == sink
-
-    def test_legacy_interface(self):
-        # Simple test to ensure legacy data works correctly with the ``Frame``
-        # objects
-        event = self.event
-        interface = Stacktrace.to_python(event.data['stacktrace'])
-        assert len(interface.frames) == 2
-        assert interface == event.interfaces['stacktrace']
-
-    def test_filename(self):
-        Stacktrace.to_python(dict(frames=[{
-            'filename': 'foo.py',
-        }]))
-        Stacktrace.to_python(dict(frames=[{
-            'lineno': 1,
-            'filename': 'foo.py',
-        }]))
-
-    def test_allows_abs_path_without_filename(self):
-        interface = Stacktrace.to_python(
-            dict(frames=[{
-                'lineno': 1,
-                'abs_path': 'foo/bar/baz.py',
-            }])
-        )
-        frame = interface.frames[0]
-        assert frame.filename == 'foo/bar/baz.py'
-        assert frame.abs_path == frame.filename
-
-    def test_coerces_url_filenames(self):
-        interface = Stacktrace.to_python(
-            dict(frames=[{
-                'lineno': 1,
-                'filename': 'http://foo.com/foo.js',
-            }])
-        )
-        frame = interface.frames[0]
-        assert frame.filename == '/foo.js'
-        assert frame.abs_path == 'http://foo.com/foo.js'
-
-    def test_does_not_overwrite_filename(self):
-        interface = Stacktrace.to_python(
-            dict(
-                frames=[{
-                    'lineno': 1,
-                    'filename': 'foo.js',
-                    'abs_path': 'http://foo.com/foo.js',
-                }]
-            )
-        )
-        frame = interface.frames[0]
-        assert frame.filename == 'foo.js'
-        assert frame.abs_path == 'http://foo.com/foo.js'
-
-    def test_ignores_results_with_empty_path(self):
-        interface = Stacktrace.to_python(
-            dict(frames=[{
-                'lineno': 1,
-                'filename': 'http://foo.com',
-            }])
-        )
-        frame = interface.frames[0]
-        assert frame.filename == 'http://foo.com'
-        assert frame.abs_path == frame.filename
-
-    def test_serialize_returns_frames(self):
-        interface = Stacktrace.to_python(dict(frames=[{
-            'lineno': 1,
-            'filename': 'foo.py',
-        }]))
-        result = interface.to_json()
-        assert 'frames' in result
-
-    def test_frame_hard_limit(self):
-        hard_limit = settings.SENTRY_STACKTRACE_FRAMES_HARD_LIMIT
-        interface = Stacktrace.to_python(
-            {
-                'frames': [
-                    {
-                        'filename': 'Application.java',
-                        'function': 'main',
-                        'lineno': i,  # linenos from 1 to the hard limit + 1
-                    } for i in range(1, hard_limit + 2)
-                ]
-            }
-        )
-
-        assert len(interface.frames) == hard_limit
-        assert interface.frames[0].lineno == 1
-        assert interface.frames[-1].lineno == hard_limit + 1
-        # second to last frame (lineno:250) should be removed
-        assert interface.frames[-2].lineno == hard_limit - 1
-
-    @mock.patch('sentry.interfaces.stacktrace.Stacktrace.get_stacktrace')
-    def test_to_string_returns_stacktrace(self, get_stacktrace):
-        event = mock.Mock(spec=Event())
-        interface = Stacktrace(frames=[])
-        result = interface.to_string(event)
-        get_stacktrace.assert_called_once_with(event, system_frames=False, max_frames=10)
-        self.assertEquals(result, get_stacktrace.return_value)
-
-    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
-    def test_get_stacktrace_with_only_filename(self):
-        event = mock.Mock(spec=Event())
-        interface = Stacktrace.to_python(dict(frames=[{'filename': 'foo'}, {'filename': 'bar'}]))
-        result = interface.get_stacktrace(event)
-        self.assertEquals(
-            result, 'Stacktrace (most recent call last):\n\n  File "foo"\n  File "bar"'
-        )
-
-    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
-    def test_get_stacktrace_with_module(self):
-        event = mock.Mock(spec=Event())
-        interface = Stacktrace.to_python(dict(frames=[{'module': 'foo'}, {'module': 'bar'}]))
-        result = interface.get_stacktrace(event)
-        self.assertEquals(
-            result, 'Stacktrace (most recent call last):\n\n  Module "foo"\n  Module "bar"'
-        )
-
-    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
-    def test_get_stacktrace_with_filename_and_function(self):
-        event = mock.Mock(spec=Event())
-        interface = Stacktrace.to_python(
-            dict(
-                frames=[
-                    {
-                        'filename': 'foo',
-                        'function': 'biz'
-                    }, {
-                        'filename': 'bar',
-                        'function': 'baz'
-                    }
-                ]
-            )
-        )
-        result = interface.get_stacktrace(event)
-        self.assertEquals(
-            result,
-            'Stacktrace (most recent call last):\n\n  File "foo", in biz\n  File "bar", in baz'
-        )
-
-    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
-    def test_get_stacktrace_with_filename_function_lineno_and_context(self):
-        event = mock.Mock(spec=Event())
-        interface = Stacktrace.to_python(
-            dict(
-                frames=[
-                    {
-                        'filename': 'foo',
-                        'function': 'biz',
-                        'lineno': 3,
-                        'context_line': '  def foo(r):'
-                    },
-                    {
-                        'filename': 'bar',
-                        'function': 'baz',
-                        'lineno': 5,
-                        'context_line': '    return None'
-                    },
-                ]
-            )
-        )
-        result = interface.get_stacktrace(event)
-        self.assertEquals(
-            result,
-            'Stacktrace (most recent call last):\n\n  File "foo", line 3, in biz\n    def foo(r):\n  File "bar", line 5, in baz\n    return None'
-        )
-
-    def test_bad_input(self):
-        assert Frame.to_python({
-            'filename': 1,
-        }).filename is None
-
-        assert Frame.to_python({
-            'filename': 'foo',
-            'abs_path': 1,
-        }).abs_path == 'foo'
-
-        assert Frame.to_python({
-            'function': 1,
-        }).function is None
-
-        assert Frame.to_python({
-            'module': 1,
-        }).module is None
-
-        assert Frame.to_python({
-            'function': '?',
-        }).function is None
-
-    def test_context_with_nan(self):
-        self.assertEquals(
-            Frame.to_python({
-                'filename': 'x',
-                'vars': {
-                    'x': float('inf')
-                },
-            }).vars,
-            {'x': '<inf>'},
-        )
-        self.assertEquals(
-            Frame.to_python({
-                'filename': 'x',
-                'vars': {
-                    'x': float('-inf')
-                },
-            }).vars,
-            {'x': '<-inf>'},
-        )
-        self.assertEquals(
-            Frame.to_python({
-                'filename': 'x',
-                'vars': {
-                    'x': float('nan')
-                },
-            }).vars,
-            {'x': '<nan>'},
-        )
-
-    def test_address_normalization(self):
-        interface = Frame.to_python(
-            {
-                'lineno': 1,
-                'filename': 'blah.c',
-                'function': 'main',
-                'instruction_addr': 123456,
-                'symbol_addr': '123450',
-                'image_addr': '0x0',
-            }
-        )
-        assert interface.instruction_addr == '0x1e240'
-        assert interface.symbol_addr == '0x1e23a'
-        assert interface.image_addr == '0x0'
-
-
-class SlimFrameDataTest(TestCase):
-    def test_under_max(self):
-        interface = Stacktrace.to_python({'frames': [{'filename': 'foo'}]})
-        slim_frame_data(interface, 4)
-        assert len(interface.frames) == 1
-        assert not interface.frames_omitted
-
-    def test_over_max(self):
-        values = []
-        for n in range(5):
-            values.append(
-                {
-                    'filename': 'frame %d' % n,
-                    'vars': {
-                        'foo': 'bar'
-                    },
-                    'context_line': 'b',
-                    'pre_context': ['a'],
-                    'post_context': ['c'],
-                }
-            )
-        interface = Stacktrace.to_python({'frames': values})
-        slim_frame_data(interface, 4)
-
-        assert len(interface.frames) == 5
-
-        for value, num in zip(interface.frames[:2], range(2)):
-            assert value.filename == 'frame %d' % num
-            assert value.vars is not None
-            assert value.pre_context is not None
-            assert value.post_context is not None
-
-        for value, num in zip(interface.frames[3:], range(3, 5)):
-            assert value.filename == 'frame %d' % num
-            assert value.vars is not None
-            assert value.pre_context is not None
-            assert value.post_context is not None
-
-        value = interface.frames[2]
-        assert value.filename == 'frame 2'
-        assert not value.vars
-        assert not value.pre_context
-        assert not value.post_context
-
-
-def test_java_frame_rendering():
-    render = functools.partial(render_to_string, 'sentry/partial/frames/java.txt')
-
-    # This is the ideal case.
-    assert render(
-        {
-            'module': 'com.getsentry.example.Example',
-            'function': 'test',
-            'filename': 'Example.java',
-            'lineno': 1,
-        }
-    ).strip() == 'at com.getsentry.example.Example.test(Example.java:1)'
-
-    # Legacy support for frames without filename.
-    assert render({
-        'module': 'com.getsentry.example.Example',
-        'function': 'test',
-        'lineno': 1,
-    }).strip() == 'at com.getsentry.example.Example.test'
-
-    # (This shouldn't happen, but...)
-    assert render(
-        {
-            'module': 'com.getsentry.example.Example',
-            'function': 'test',
-            'filename': 'foo/bar/Example.java',
-            'lineno': 1,
-        }
-    ).strip() == 'at com.getsentry.example.Example.test(Example.java:1)'
-
-    # Native methods don't have line numbers.
-    assert render({
-        'function': 'test',
-        'filename': 'Example.java',
-        'lineno': -2,
-    }).strip() == 'at test(Example.java)'
-
-    assert render({
-        'function': 'test',
-        'filename': 'Example.java',
-        'lineno': 1,
-    }).strip() == 'at test(Example.java:1)'
diff --git a/tests/sentry/interfaces/test_template.py b/tests/sentry/interfaces/test_template.py
deleted file mode 100644
index d629ae4534..0000000000
--- a/tests/sentry/interfaces/test_template.py
+++ /dev/null
@@ -1,63 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from exam import fixture
-import mock
-import pytest
-
-from sentry.interfaces.base import InterfaceValidationError
-from sentry.interfaces.template import Template
-from sentry.models import Event
-from sentry.testutils import TestCase
-
-
-class TemplateTest(TestCase):
-    @fixture
-    def interface(self):
-        return Template.to_python(
-            dict(
-                filename='foo.html',
-                context_line='hello world',
-                lineno=1,
-            )
-        )
-
-    def test_serialize(self):
-        result = self.interface.to_json()
-        self.assertEquals(result['filename'], 'foo.html')
-        self.assertEquals(result['context_line'], 'hello world')
-        self.assertEquals(result['lineno'], 1)
-
-    def test_required_attributes(self):
-        with pytest.raises(InterfaceValidationError):
-            Template.to_python({})
-        with pytest.raises(InterfaceValidationError):
-            Template.to_python({"lineno": None, "context_line": ""})
-        with pytest.raises(InterfaceValidationError):
-            Template.to_python({"lineno": 0, "context_line": ""})
-        with pytest.raises(InterfaceValidationError):
-            Template.to_python({"lineno": 1})
-        with pytest.raises(InterfaceValidationError):
-            Template.to_python({"lineno": 1, "context_line": 42})
-
-    @mock.patch('sentry.interfaces.template.get_context')
-    @mock.patch('sentry.interfaces.template.Template.get_traceback')
-    def test_to_string_returns_traceback(self, get_traceback, get_context):
-        get_traceback.return_value = 'traceback'
-        event = mock.Mock(spec=Event)
-        result = self.interface.to_string(event)
-        get_traceback.assert_called_once_with(event, get_context.return_value)
-        self.assertEquals(result, 'Stacktrace (most recent call last):\n\ntraceback')
-
-    def test_serialize_unserialize_behavior(self):
-        result = type(self.interface).to_python(self.interface.to_json())
-        assert result.to_json() == self.interface.to_json()
-
-    def test_get_api_context(self):
-        result = self.interface.get_api_context()
-        assert result == {
-            'filename': 'foo.html',
-            'context': [(1, 'hello world')],
-            'lineNo': 1,
-        }
diff --git a/tests/sentry/interfaces/test_threads.py b/tests/sentry/interfaces/test_threads.py
deleted file mode 100644
index 679340e0fd..0000000000
--- a/tests/sentry/interfaces/test_threads.py
+++ /dev/null
@@ -1,77 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from exam import fixture
-
-from sentry.interfaces.threads import Threads
-from sentry.testutils import TestCase
-
-
-class ThreadsTest(TestCase):
-    @fixture
-    def interface(self):
-        return Threads.to_python(
-            dict(
-                values=[
-                    {
-                        'id': 42,
-                        'crashed': False,
-                        'current': True,
-                        'name': 'Main Thread',
-                        'stacktrace': {
-                            'frames': [
-                                {
-                                    'filename': 'foo/baz.c',
-                                    'function': 'main',
-                                    'lineno': 1,
-                                    'in_app': True,
-                                }
-                            ]
-                        },
-                        'raw_stacktrace': {
-                            'frames': [
-                                {
-                                    'filename': None,
-                                    'lineno': 1,
-                                    'function': '<redacted>',
-                                    'in_app': True,
-                                }
-                            ]
-                        },
-                    }
-                ]
-            )
-        )
-
-    def test_basics(self):
-        self.create_event(data={
-            'exception': self.interface.to_json(),
-        })
-        context = self.interface.get_api_context()
-        assert context['values'][0]['stacktrace']['frames'][0]['function'] == 'main'
-        assert context['values'][0]['rawStacktrace']['frames'][0]['function'] == '<redacted>'
-        assert context['values'][0]['id'] == 42
-        assert context['values'][0]['name'] == 'Main Thread'
-        assert context['values'][0]['crashed'] is False
-        assert context['values'][0]['current'] is True
-
-    def test_null_values(self):
-        sink = {"values": []}
-        assert Threads.to_python({}).to_json() == sink
-        assert Threads.to_python({'values': []}).to_json() == sink
-        assert Threads.to_python({'values': None}).to_json() == sink
-
-        # TODO(markus): Should eventually generate values: [None]
-        assert Threads.to_python({"values": [None]}).to_json() == sink
-
-    def test_null_values_in_values(self):
-        sink = {"values": [{
-            "crashed": False,
-            "current": False,
-        }]}
-
-        assert Threads.to_python({"values": [{}]}).to_json() == sink
-        assert Threads.to_python({"values": [{"id": None}]}).to_json() == sink
-        assert Threads.to_python({"values": [{"name": None}]}).to_json() == sink
-        assert Threads.to_python({"values": [{"stacktrace": None}]}).to_json() == sink
diff --git a/tests/sentry/interfaces/test_user.py b/tests/sentry/interfaces/test_user.py
deleted file mode 100644
index 16e444bba2..0000000000
--- a/tests/sentry/interfaces/test_user.py
+++ /dev/null
@@ -1,88 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-import mock
-from exam import fixture
-
-from sentry.testutils import TestCase
-from sentry.interfaces.user import User
-from sentry.models import Event
-
-
-class UserTest(TestCase):
-    @fixture
-    def event(self):
-        return mock.Mock(spec=Event())
-
-    @fixture
-    def interface(self):
-        return User.to_python(dict(
-            id=1,
-            email='lol@example.com',
-            favorite_color='brown',
-        ))
-
-    def test_null_values(self):
-        sink = {}
-
-        assert User.to_python({}).to_json() == sink
-
-    def test_path(self):
-        assert self.interface.get_path() == 'user'
-
-    def test_serialize_behavior(self):
-        assert self.interface.to_json() == {
-            'id': '1',
-            'email': 'lol@example.com',
-            'data': {
-                'favorite_color': 'brown'
-            }
-        }
-
-    def test_invalid_ip_address(self):
-        user = User.to_python(dict(
-            ip_address='abc',
-        ))
-        assert user.ip_address is None
-
-    def test_invalid_email_address(self):
-        user = User.to_python(dict(
-            email=1,
-        ))
-        assert user.email is None
-
-        user = User.to_python(dict(
-            email='foo',
-        ))
-        assert user.email == 'foo'
-
-    def test_id_long_dict(self):
-        u = User.to_python({
-            'id': {x: 'foobarbaz' for x in range(10)},  # dict longer than 128 chars
-        })
-        assert len(u.to_json()['id']) == 128
-
-    def test_serialize_unserialize_behavior(self):
-        result = type(self.interface).to_python(self.interface.to_json())
-        assert result.to_json() == self.interface.to_json()
-
-    def test_trimming(self):
-        u = User.to_python({
-            'name': ['v' * 100, 'v' * 100],
-            'username': ['v' * 100, 'v' * 100],
-        })
-
-        assert len(u.name) <= 128
-        assert len(u.username) <= 128
-
-    def test_extra_keys(self):
-        u = User.to_python({
-            'extra1': 'foo',
-            'data': {'extra2': 'bar'},
-        })
-
-        assert u.data == {
-            'extra1': 'foo',
-            'extra2': 'bar',
-        }
