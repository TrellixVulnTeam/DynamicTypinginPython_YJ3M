commit 1e51724f88bc3d57bfcf6eaf6182dce0092643ab
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Wed May 2 15:43:43 2018 +0200

    feat(ui): Add mechanism pills for js (#8245)
    
    * feat: Add machanism pills for js
    
    * fix: Empty generic pill
    
    * feat: Add tests for mechanism

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx
index bd40e63d65..cc8fbb5dfb 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx
@@ -1,3 +1,4 @@
+import _ from 'lodash';
 import PropTypes from 'prop-types';
 import React from 'react';
 import Pills from 'app/components/pills';
@@ -38,6 +39,35 @@ class ExceptionMechanism extends React.Component {
       );
     }
 
+    if (this.props.data.type && this.props.data.description) {
+      pills.push(
+        <Pill
+          key="generic"
+          name={this.props.data.type}
+          value={this.props.data.description}
+        />
+      );
+      if (this.props.data.extra && _.isObject(this.props.data.extra)) {
+        let counter = 0;
+        _.forOwn(this.props.data.extra, function(value, key) {
+          if (!_.isObject(value)) {
+            pills.push(
+              <Pill key={`generic-extra-${counter++}`} name={key} value={value} />
+            );
+          }
+        });
+      }
+      if (this.props.data.handled !== undefined) {
+        pills.push(
+          <Pill
+            key="generic-extra-handled"
+            name="handled"
+            value={this.props.data.handled}
+          />
+        );
+      }
+    }
+
     if (pills.length === 0) {
       return null;
     }
diff --git a/tests/js/spec/components/events/interfaces/exceptionMechanism.spec.jsx b/tests/js/spec/components/events/interfaces/exceptionMechanism.spec.jsx
new file mode 100644
index 0000000000..3b21cd0293
--- /dev/null
+++ b/tests/js/spec/components/events/interfaces/exceptionMechanism.spec.jsx
@@ -0,0 +1,250 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import ExceptionMechanism from 'app/components/events/interfaces/exceptionMechanism';
+
+describe('ExceptionMechanism', function() {
+  let sandbox;
+  let mechanism;
+  let platform;
+  let elem;
+
+  beforeEach(function() {
+    platform = 'cocoa';
+
+    sandbox = sinon.sandbox.create();
+  });
+
+  afterEach(function() {
+    sandbox.restore();
+  });
+
+  describe('render', function() {
+    it('should render no Pills on empty', function() {
+      mechanism = {};
+      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
+      expect(elem.find('li')).toHaveLength(0);
+    });
+
+    it('should not render generic pills if description is missing', function() {
+      mechanism = {
+        type: 'promise',
+      };
+      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
+      expect(elem.find('li')).toHaveLength(0);
+    });
+
+    it('should render one mach_exception', function() {
+      mechanism = {
+        mach_exception: {
+          exception_name: 'EXC_!',
+        },
+      };
+      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
+      expect(elem.find('li')).toHaveLength(1);
+      expect(
+        elem
+          .find('li')
+          .find('span')
+          .first()
+          .text()
+      ).toEqual('mach exception');
+      expect(
+        elem
+          .find('li')
+          .find('span')
+          .last()
+          .text()
+      ).toEqual('EXC_!');
+    });
+
+    it('should render one posix_signal', function() {
+      mechanism = {
+        posix_signal: {
+          name: 'SIG_',
+          signal: '01',
+        },
+      };
+      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
+      expect(elem.find('li')).toHaveLength(1);
+      expect(
+        elem
+          .find('li')
+          .find('span')
+          .first()
+          .text()
+      ).toEqual('signal');
+      expect(
+        elem
+          .find('li')
+          .find('span')
+          .last()
+          .text()
+      ).toEqual('SIG_ (01)');
+    });
+
+    it('should render posix_signal and mach_exception', function() {
+      mechanism = {
+        posix_signal: {
+          name: 'SIG_',
+          signal: '01',
+        },
+        mach_exception: {
+          exception_name: 'EXC_!',
+        },
+      };
+      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
+      expect(elem.find('li')).toHaveLength(2);
+      expect(
+        elem
+          .find('li')
+          .first()
+          .find('span')
+          .first()
+          .text()
+      ).toEqual('mach exception');
+      expect(
+        elem
+          .find('li')
+          .first()
+          .find('span')
+          .last()
+          .text()
+      ).toEqual('EXC_!');
+      expect(
+        elem
+          .find('li')
+          .last()
+          .find('span')
+          .first()
+          .text()
+      ).toEqual('signal');
+      expect(
+        elem
+          .find('li')
+          .last()
+          .find('span')
+          .last()
+          .text()
+      ).toEqual('SIG_ (01)');
+    });
+
+    it('should render generic mechanism', function() {
+      mechanism = {
+        type: 'promise',
+        description: 'unhandledPromiseRejection',
+      };
+      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
+      expect(elem.find('li')).toHaveLength(1);
+      expect(
+        elem
+          .find('li')
+          .find('span')
+          .first()
+          .text()
+      ).toEqual('promise');
+      expect(
+        elem
+          .find('li')
+          .find('span')
+          .last()
+          .text()
+      ).toEqual('unhandledPromiseRejection');
+    });
+
+    it('should render generic mechanism with extra', function() {
+      mechanism = {
+        type: 'promise',
+        description: 'unhandledPromiseRejection',
+        extra: {
+          pid: 0,
+          or: 'anything really',
+        },
+      };
+      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
+      expect(elem.find('li')).toHaveLength(3);
+      expect(
+        elem
+          .find('li')
+          .first()
+          .find('span')
+          .first()
+          .text()
+      ).toEqual('promise');
+      expect(
+        elem
+          .find('li')
+          .first()
+          .find('span')
+          .last()
+          .text()
+      ).toEqual('unhandledPromiseRejection');
+      expect(
+        elem
+          .find('li')
+          .last()
+          .find('span')
+          .first()
+          .text()
+      ).toEqual('or');
+      expect(
+        elem
+          .find('li')
+          .last()
+          .find('span')
+          .last()
+          .text()
+      ).toEqual('anything really');
+    });
+
+    it('should not render generic mechanism with extra containing object', function() {
+      mechanism = {
+        type: 'promise',
+        description: 'unhandledPromiseRejection',
+        extra: {
+          pid: 0,
+          or: 'anything really',
+          ob: {iam: 'an object'},
+        },
+      };
+      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
+      expect(elem.find('li')).toHaveLength(3);
+    });
+
+    it('should render generic mechanism with unhandled flag true', function() {
+      mechanism = {
+        type: 'promise',
+        description: 'unhandledPromiseRejection',
+        handled: false,
+      };
+      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
+      expect(elem.find('li')).toHaveLength(2);
+      expect(
+        elem
+          .find('li')
+          .last()
+          .find('span')
+          .last()
+          .text()
+      ).toEqual('no');
+    });
+
+    it('should render generic mechanism with unhandled flag false', function() {
+      mechanism = {
+        type: 'promise',
+        description: 'unhandledPromiseRejection',
+        handled: true,
+      };
+      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
+      expect(elem.find('li')).toHaveLength(2);
+      expect(
+        elem
+          .find('li')
+          .last()
+          .find('span')
+          .last()
+          .text()
+      ).toEqual('yes');
+    });
+  });
+});
