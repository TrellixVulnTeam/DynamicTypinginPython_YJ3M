commit 853c8f8398f91d556121406fa3514d5322c30973
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Apr 18 23:12:21 2019 +0200

    feat(grouping): New iteration of the newstyle trimming with message stripping (#12819)

diff --git a/src/sentry/grouping/strategies/configurations.py b/src/sentry/grouping/strategies/configurations.py
index aa9253ee2f..9a275f6e09 100644
--- a/src/sentry/grouping/strategies/configurations.py
+++ b/src/sentry/grouping/strategies/configurations.py
@@ -81,6 +81,33 @@ register_strategy_config(
     '''
 )
 
+register_strategy_config(
+    id='newstyle:2019-04-17',
+    strategies=[
+        'expect-ct:v1',
+        'expect-staple:v1',
+        'hpkp:v1',
+        'csp:v1',
+        'threads:v1',
+        'stacktrace:v1',
+        'chained-exception:v1',
+        'template:v1',
+        'message:v2',
+    ],
+    delegates=[
+        'frame:v1',
+        'stacktrace:v1',
+        'single-exception:v2',
+    ],
+    changelog='''
+        * messages are now preprocessed to increase change of grouping together
+        * exceptions without stacktraces are now grouped by a trimmed message
+
+        *This algorithm is currently work in progress and will continue to
+        evolve based on feedback*
+    '''
+)
+
 # This is a combined strategy that dispatches to legacy:2019-03-12 and
 # newstyle:2019-04-05 depending on the platform.
 
diff --git a/src/sentry/grouping/strategies/message.py b/src/sentry/grouping/strategies/message.py
index 52011fedd2..dfbe7bd5e0 100644
--- a/src/sentry/grouping/strategies/message.py
+++ b/src/sentry/grouping/strategies/message.py
@@ -1,9 +1,106 @@
 from __future__ import absolute_import
 
+import re
+import six
+from itertools import islice
+
 from sentry.grouping.component import GroupingComponent
 from sentry.grouping.strategies.base import strategy
 
 
+_irrelevant_re = re.compile(r'''(?x)
+    (?P<email>
+        [a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*
+    ) |
+    (?P<url>
+        \b(wss?|https?|ftp)://[^\s/$.?#].[^\s]*
+    ) |
+    (?P<ip>
+        (
+            ([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|
+            ([0-9a-fA-F]{1,4}:){1,7}:|
+            ([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|
+            ([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|
+            ([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|
+            ([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|
+            ([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|
+            [0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|
+            :((:[0-9a-fA-F]{1,4}){1,7}|:)|
+            fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|
+            ::(ffff(:0{1,4}){0,1}:){0,1}
+            ((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}
+            (25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|
+            ([0-9a-fA-F]{1,4}:){1,4}:
+            ((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}
+            (25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\b
+        ) |
+        (
+            \b((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}
+            (25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\b
+        )
+    ) |
+    (?P<uuid>
+        \b
+            [0-9a-fA-F]{8}-
+            [0-9a-fA-F]{4}-
+            [0-9a-fA-F]{4}-
+            [0-9a-fA-F]{4}-
+            [0-9a-fA-F]{12}
+        \b
+    ) |
+    (?P<sha1>
+        \b[0-9a-fA-F]{40}\b
+    ) |
+    (?P<md5>
+        \b[0-9a-fA-F]{32}\b
+    ) |
+    (?P<date>
+        (
+            (\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|
+            (\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|
+            (\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))
+        ) |
+        (
+            \b(?:(Sun|Mon|Tue|Wed|Thu|Fri|Sat)\s+)?
+            (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+
+            ([\d]{1,2})\s+
+            ([\d]{2}:[\d]{2}:[\d]{2})\s+
+            [\d]{4}
+        ) |
+        (
+            \b(?:(Sun|Mon|Tue|Wed|Thu|Fri|Sat),\s+)?
+            (0[1-9]|[1-2]?[\d]|3[01])\s+
+            (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+
+            (19[\d]{2}|[2-9][\d]{3})\s+
+            (2[0-3]|[0-1][\d]):([0-5][\d])
+            (?::(60|[0-5][\d]))?\s+
+            ([-\+][\d]{2}[0-5][\d]|(?:UT|GMT|(?:E|C|M|P)(?:ST|DT)|[A-IK-Z]))
+        )
+    ) |
+    (?P<float>
+        -\d+\.\d+\b |
+        \b\d+\.\d+\b
+    ) |
+    (?P<int>
+        -\d+\b |
+        \b\d+\b
+    )
+''')
+
+
+def trim_message_for_grouping(string):
+    s = '\n'.join(islice((x for x in string.splitlines() if x.strip()), 2)).strip()
+    if s != string:
+        s += '...'
+
+    def _handle_match(match):
+        for key, value in six.iteritems(match.groupdict()):
+            if value is not None:
+                return '<%s>' % key
+        return ''
+    return _irrelevant_re.sub(_handle_match, s)
+
+
 @strategy(
     id='message:v1',
     interfaces=['message'],
@@ -15,3 +112,20 @@ def message_v1(message_interface, **meta):
         id='message',
         values=[message_interface.message or message_interface.formatted],
     )
+
+
+@strategy(
+    id='message:v2',
+    interfaces=['message'],
+    variants=['default'],
+    score=0,
+)
+def message_v2(message_interface, **meta):
+    message_in = message_interface.message or message_interface.formatted
+    message_trimmed = trim_message_for_grouping(message_in)
+    hint = 'stripped common values' if message_in != message_trimmed else None
+    return GroupingComponent(
+        id='message',
+        values=[message_trimmed],
+        hint=hint
+    )
diff --git a/src/sentry/grouping/strategies/newstyle.py b/src/sentry/grouping/strategies/newstyle.py
index 04b3a1bb51..47dd5c9abd 100644
--- a/src/sentry/grouping/strategies/newstyle.py
+++ b/src/sentry/grouping/strategies/newstyle.py
@@ -7,6 +7,7 @@ from sentry.grouping.component import GroupingComponent
 from sentry.grouping.strategies.base import strategy
 from sentry.grouping.strategies.utils import replace_enclosed_string, \
     split_func_tokens, remove_non_stacktrace_variants
+from sentry.grouping.strategies.message import trim_message_for_grouping
 
 
 _rust_hash = re.compile(r'::h[a-z0-9]{16}$')
@@ -359,12 +360,7 @@ def stacktrace_v1_variant_processor(variants, config, **meta):
     return remove_non_stacktrace_variants(variants)
 
 
-@strategy(
-    id='single-exception:v1',
-    interfaces=['singleexception'],
-    variants=['!system', 'app'],
-)
-def single_exception_v1(exception, config, **meta):
+def single_exception_common(exception, config, meta, with_value):
     if exception.stacktrace is not None:
         stacktrace_component = config.get_grouping_component(
             exception.stacktrace, **meta)
@@ -382,15 +378,53 @@ def single_exception_v1(exception, config, **meta):
             hint='ignored because exception is synthetic'
         )
 
+    values = [stacktrace_component, type_component]
+
+    if with_value:
+        value_component = GroupingComponent(id='value')
+
+        value_in = exception.value
+        if value_in is not None:
+            value_trimmed = trim_message_for_grouping(value_in)
+            hint = 'stripped common values' if value_in != value_trimmed else None
+            if value_trimmed:
+                value_component.update(
+                    values=[value_trimmed],
+                    hint=hint
+                )
+
+        if stacktrace_component.contributes and value_component.contributes:
+            value_component.update(
+                contributes=False,
+                hint='ignored because stacktrace takes precedence'
+            )
+
+        values.append(value_component)
+
     return GroupingComponent(
         id='exception',
-        values=[
-            stacktrace_component,
-            type_component,
-        ]
+        values=values
     )
 
 
+@strategy(
+    id='single-exception:v1',
+    interfaces=['singleexception'],
+    variants=['!system', 'app'],
+)
+def single_exception_v1(exception, config, **meta):
+    return single_exception_common(exception, config, meta, with_value=False)
+
+
+@strategy(
+    id='single-exception:v2',
+    interfaces=['singleexception'],
+    variants=['!system', 'app'],
+)
+def single_exception_v2(exception, config, **meta):
+    return single_exception_common(exception, config, meta, with_value=True)
+
+
 @strategy(
     id='chained-exception:v1',
     interfaces=['exception'],
diff --git a/tests/sentry/grouping/grouping_inputs/javascript-exception-fallback-to-message-whistles.json b/tests/sentry/grouping/grouping_inputs/javascript-exception-fallback-to-message-whistles.json
new file mode 100644
index 0000000000..5c4a2bd118
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/javascript-exception-fallback-to-message-whistles.json
@@ -0,0 +1,19 @@
+{
+  "culprit": "onScriptComplete(webpack/bootstrap)",
+  "event_id": "07882247670741c797467e8142a146b4",
+  "environment": "prod",
+  "platform": "javascript",
+  "logger": "",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "value": "Wed Apr 17 22:31:45 2019: foobar.bazblafasel@example.invalid logged in (error 42) time spent 1234.33 --- correlation id 88ee7c66-29a9-4a4a-bc26-c72d76c5de14, checksum da39a3ee5e6b4b0d3255bfef95601890afd80709 (md5 d41d8cd98f00b204e9800998ecf8427e); payload timestamp 2019-04-17T20:29:05Z (submitted from 127.0.0.1 via 2001:0db8:85a3:0000:0000:8a2e:0370:7334 via ::1)",
+        "type": "Error"
+      }
+    ]
+  },
+  "release": "fb54ad9453c2c41a5810a6b3ee37e4a9eb943410"
+}
diff --git a/tests/sentry/grouping/grouping_inputs/javascript-exception-fallback-to-message.json b/tests/sentry/grouping/grouping_inputs/javascript-exception-fallback-to-message.json
new file mode 100644
index 0000000000..62ba5d93be
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/javascript-exception-fallback-to-message.json
@@ -0,0 +1,28 @@
+{
+  "culprit": "onScriptComplete(webpack/bootstrap)",
+  "event_id": "07882247670741c797467e8142a146b4",
+  "environment": "prod",
+  "platform": "javascript",
+  "logger": "",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "mechanism": {
+          "data": {
+            "message": "Loading chunk 158 failed.\n(timeout: https://s1.sentry-cdn.com/_static/34f8a6d11b9f52ebb4e5fd949650088f/sentry/dist/passwordStrength.js)",
+            "mode": "stack",
+            "name": "Error"
+          },
+          "type": "onunhandledrejection",
+          "handled": false
+        },
+        "value": "Loading chunk 158 failed.\n(timeout: https://s1.sentry-cdn.com/_static/34f8a6d11b9f52ebb4e5fd949650088f/sentry/dist/passwordStrength.js)",
+        "type": "Error"
+      }
+    ]
+  },
+  "release": "fb54ad9453c2c41a5810a6b3ee37e4a9eb943410"
+}
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_exception_fallback_to_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_exception_fallback_to_message.pysnap
new file mode 100644
index 0000000000..7f6d39a728
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_exception_fallback_to_message.pysnap
@@ -0,0 +1,24 @@
+---
+created: '2019-04-17T20:21:33.425865Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'Error'
+        value*
+          u'Loading chunk 158 failed.\n(timeout: https://s1.sentry-cdn.com/_static/34f8a6d11b9f52ebb4e5fd949650088f/sentry/dist/passwordStrength.js)'
+--------------------------------------------------------------------------
+system:
+  hash: 'ad1efff799d4f9435077701aee66dde0'
+  component:
+    system*
+      exception*
+        type*
+          u'Error'
+        value*
+          u'Loading chunk 158 failed.\n(timeout: https://s1.sentry-cdn.com/_static/34f8a6d11b9f52ebb4e5fd949650088f/sentry/dist/passwordStrength.js)'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_exception_fallback_to_message_whistles.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_exception_fallback_to_message_whistles.pysnap
new file mode 100644
index 0000000000..5de3b01019
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_exception_fallback_to_message_whistles.pysnap
@@ -0,0 +1,24 @@
+---
+created: '2019-04-18T14:29:06.978161Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'Error'
+        value*
+          u'Wed Apr 17 22:31:45 2019: foobar.bazblafasel@example.invalid logged in (error 42) time spent 1234.33 --- correlation id 88ee7c66-29a9-4a4a-bc26-c72d76c5de14, checksum da39a3ee5e6b4b0d3255bfef95601890afd80709 (md5 d41d8cd98f00b204e9800998ecf8427e); payload timestamp 2019-04-17T20:29:05Z (submitted from 127.0.0.1 via 2001:0db8:85a3:0000:0000:8a2e:0370:7334 via ::1)'
+--------------------------------------------------------------------------
+system:
+  hash: '9db349ff5ca081a615d14b00c6da9027'
+  component:
+    system*
+      exception*
+        type*
+          u'Error'
+        value*
+          u'Wed Apr 17 22:31:45 2019: foobar.bazblafasel@example.invalid logged in (error 42) time spent 1234.33 --- correlation id 88ee7c66-29a9-4a4a-bc26-c72d76c5de14, checksum da39a3ee5e6b4b0d3255bfef95601890afd80709 (md5 d41d8cd98f00b204e9800998ecf8427e); payload timestamp 2019-04-17T20:29:05Z (submitted from 127.0.0.1 via 2001:0db8:85a3:0000:0000:8a2e:0370:7334 via ::1)'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_exception_fallback_to_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_exception_fallback_to_message.pysnap
new file mode 100644
index 0000000000..51bf64bb26
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_exception_fallback_to_message.pysnap
@@ -0,0 +1,24 @@
+---
+created: '2019-04-17T20:26:38.329000Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'Error'
+        value*
+          u'Loading chunk 158 failed.\n(timeout: https://s1.sentry-cdn.com/_static/34f8a6d11b9f52ebb4e5fd949650088f/sentry/dist/passwordStrength.js)'
+--------------------------------------------------------------------------
+system:
+  hash: 'ad1efff799d4f9435077701aee66dde0'
+  component:
+    system*
+      exception*
+        type*
+          u'Error'
+        value*
+          u'Loading chunk 158 failed.\n(timeout: https://s1.sentry-cdn.com/_static/34f8a6d11b9f52ebb4e5fd949650088f/sentry/dist/passwordStrength.js)'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_exception_fallback_to_message_whistles.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_exception_fallback_to_message_whistles.pysnap
new file mode 100644
index 0000000000..e9fb08ac8a
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_exception_fallback_to_message_whistles.pysnap
@@ -0,0 +1,24 @@
+---
+created: '2019-04-18T14:29:08.052541Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'Error'
+        value*
+          u'Wed Apr 17 22:31:45 2019: foobar.bazblafasel@example.invalid logged in (error 42) time spent 1234.33 --- correlation id 88ee7c66-29a9-4a4a-bc26-c72d76c5de14, checksum da39a3ee5e6b4b0d3255bfef95601890afd80709 (md5 d41d8cd98f00b204e9800998ecf8427e); payload timestamp 2019-04-17T20:29:05Z (submitted from 127.0.0.1 via 2001:0db8:85a3:0000:0000:8a2e:0370:7334 via ::1)'
+--------------------------------------------------------------------------
+system:
+  hash: '9db349ff5ca081a615d14b00c6da9027'
+  component:
+    system*
+      exception*
+        type*
+          u'Error'
+        value*
+          u'Wed Apr 17 22:31:45 2019: foobar.bazblafasel@example.invalid logged in (error 42) time spent 1234.33 --- correlation id 88ee7c66-29a9-4a4a-bc26-c72d76c5de14, checksum da39a3ee5e6b4b0d3255bfef95601890afd80709 (md5 d41d8cd98f00b204e9800998ecf8427e); payload timestamp 2019-04-17T20:29:05Z (submitted from 127.0.0.1 via 2001:0db8:85a3:0000:0000:8a2e:0370:7334 via ::1)'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_exception_fallback_to_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_exception_fallback_to_message.pysnap
new file mode 100644
index 0000000000..eac7be7ef4
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_exception_fallback_to_message.pysnap
@@ -0,0 +1,20 @@
+---
+created: '2019-04-17T20:21:35.232896Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'Error'
+--------------------------------------------------------------------------
+system:
+  hash: '902b0d55fddef6f8d651fe1035b7d4bd'
+  component:
+    system*
+      exception*
+        type*
+          u'Error'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_exception_fallback_to_message_whistles.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_exception_fallback_to_message_whistles.pysnap
new file mode 100644
index 0000000000..7e2dfe5ff3
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_exception_fallback_to_message_whistles.pysnap
@@ -0,0 +1,20 @@
+---
+created: '2019-04-17T20:35:10.497138Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'Error'
+--------------------------------------------------------------------------
+system:
+  hash: '902b0d55fddef6f8d651fe1035b7d4bd'
+  component:
+    system*
+      exception*
+        type*
+          u'Error'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/actix.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/actix.pysnap
new file mode 100644
index 0000000000..8d443d7732
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/actix.pysnap
@@ -0,0 +1,788 @@
+---
+created: '2019-04-17T20:02:28.163299Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '3abe7858e37e8eb76c484efa7c7ba121'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'__pthread_start'
+          frame*
+            function*
+              u'__pthread_body'
+          frame (non app frame)
+            filename*
+              u'thread.rs'
+            function*
+              u'std::sys::unix::thread::Thread::new::thread_start'
+          frame*
+            filename*
+              u'boxed.rs'
+            function* (isolated function)
+              u'<F as alloc::boxed::FnBox<T>>::call_box'
+          frame (non app frame)
+            filename*
+              u'mod.rs'
+            function*
+              u'std::thread::Builder::spawn_unchecked::{{closure}}'
+          frame (non app frame)
+            filename*
+              u'panic.rs'
+            function*
+              u'std::panic::catch_unwind'
+          frame (non app frame)
+            filename*
+              u'panicking.rs'
+            function*
+              u'std::panicking::try'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (non app frame)
+            filename*
+              u'panicking.rs'
+            function*
+              u'std::panicking::try::do_call'
+          frame (non app frame)
+            filename*
+              u'panic.rs'
+            function* (isolated function)
+              u'<std::panic::AssertUnwindSafe<T> as core::ops::function::FnOnce<T>>::call_once'
+          frame (non app frame)
+            filename*
+              u'mod.rs'
+            function*
+              u'std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}'
+          frame (non app frame)
+            filename*
+              u'backtrace.rs'
+            function*
+              u'std::sys_common::backtrace::__rust_begin_short_backtrace'
+          frame*
+            filename*
+              u'arbiter.rs'
+            function*
+              u'actix::arbiter::Arbiter::new_with_builder::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::block_on'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_reactor::with_default'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_reactor::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}'
+          frame*
+            filename*
+              u'clock.rs'
+            function*
+              u'tokio_timer::clock::clock::with_default'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'clock.rs'
+            function*
+              u'tokio_timer::clock::clock::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'handle.rs'
+            function*
+              u'tokio_timer::timer::handle::with_default'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'handle.rs'
+            function*
+              u'tokio_timer::timer::handle::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'global.rs'
+            function*
+              u'tokio_executor::global::with_default'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'global.rs'
+            function*
+              u'tokio_executor::global::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::block_on::{{closure}}'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Entered<T>>::block_on'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Entered<T>>::tick'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::scheduler::Scheduler<T>>::tick'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Borrow<T>>::enter'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Borrow<T>>::enter::{{closure}}'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::CurrentRunner::set_spawn'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Borrow<T>>::enter::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::scheduler::Scheduler<T>>::tick::{{closure}}'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::scheduler::Scheduled<T>>::tick'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_future_notify'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_fn_notify'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::enter'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::std::set'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::enter::{{closure}}'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_future_notify::{{closure}}'
+          frame (non app frame)
+            filename*
+              u'mod.rs'
+            function* (isolated function)
+              u'<alloc::boxed::Box<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'then.rs'
+            function* (isolated function)
+              u'<futures::future::then::Then<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'chain.rs'
+            function* (isolated function)
+              u'<futures::future::chain::Chain<T>>::poll'
+          frame*
+            filename*
+              u'either.rs'
+            function* (isolated function)
+              u'<futures::future::either::Either<T> as futures::future::Future>::poll'
+          frame (ignored due to recursion)
+            filename*
+              u'either.rs'
+            function* (isolated function)
+              u'<futures::future::either::Either<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'acceptor.rs'
+            function*
+              u'<actix_web::server::acceptor::ServerMessageAcceptorServiceFut<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'and_then.rs'
+            function* (isolated function)
+              u'<actix_net::service::and_then::AndThenFuture<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'map_err.rs'
+            function* (isolated function)
+              u'<actix_net::service::map_err::MapErrFuture<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'channel.rs'
+            function* (isolated function)
+              u'<actix_web::server::channel::HttpChannel<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'channel.rs'
+            function* (isolated function)
+              u'<actix_web::server::channel::HttpChannel<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'h1.rs'
+            function* (isolated function)
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll'
+          frame*
+            filename*
+              u'h1.rs'
+            function* (isolated function)
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll_handler'
+          frame*
+            filename*
+              u'h1.rs'
+            function* (isolated function)
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll_io'
+          frame*
+            filename*
+              u'h1.rs'
+            function* (isolated function)
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::parse'
+          frame*
+            filename*
+              u'pipeline.rs'
+            function* (isolated function)
+              u'<actix_web::pipeline::Pipeline<T> as actix_web::server::handler::HttpHandlerTask>::poll_io'
+          frame*
+            filename*
+              u'<::log::macros::log macros>'
+            function* (isolated function)
+              u'<actix_web::pipeline::ProcessResponse<T>>::poll_io'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'log::__private_api_log'
+          frame (non app frame)
+            filename*
+              u'log.rs'
+            function*
+              u'<sentry::integrations::log::Logger as log::Log>::log'
+          frame (non app frame)
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with_active'
+          frame (non app frame)
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame (non app frame)
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with::{{closure}}'
+          frame (non app frame)
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with_active::{{closure}}'
+        type*
+          u'actix_web::pipeline'
+        value (ignored because stacktrace takes precedence)
+          u'Error occurred during request handling, status: <int> Internal Server Error Something went really wrong here'
+--------------------------------------------------------------------------
+system:
+  hash: '7f12fecf89ac9e64cdfa36b08e634681'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'__pthread_start'
+          frame*
+            function*
+              u'__pthread_body'
+          frame*
+            filename*
+              u'thread.rs'
+            function*
+              u'std::sys::unix::thread::Thread::new::thread_start'
+          frame*
+            filename*
+              u'boxed.rs'
+            function* (isolated function)
+              u'<F as alloc::boxed::FnBox<T>>::call_box'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'std::thread::Builder::spawn_unchecked::{{closure}}'
+          frame*
+            filename*
+              u'panic.rs'
+            function*
+              u'std::panic::catch_unwind'
+          frame*
+            filename*
+              u'panicking.rs'
+            function*
+              u'std::panicking::try'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'___rust_maybe_catch_panic'
+          frame*
+            filename*
+              u'panicking.rs'
+            function*
+              u'std::panicking::try::do_call'
+          frame*
+            filename*
+              u'panic.rs'
+            function* (isolated function)
+              u'<std::panic::AssertUnwindSafe<T> as core::ops::function::FnOnce<T>>::call_once'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'backtrace.rs'
+            function*
+              u'std::sys_common::backtrace::__rust_begin_short_backtrace'
+          frame*
+            filename*
+              u'arbiter.rs'
+            function*
+              u'actix::arbiter::Arbiter::new_with_builder::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::block_on'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_reactor::with_default'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_reactor::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}'
+          frame*
+            filename*
+              u'clock.rs'
+            function*
+              u'tokio_timer::clock::clock::with_default'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'clock.rs'
+            function*
+              u'tokio_timer::clock::clock::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'handle.rs'
+            function*
+              u'tokio_timer::timer::handle::with_default'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'handle.rs'
+            function*
+              u'tokio_timer::timer::handle::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'global.rs'
+            function*
+              u'tokio_executor::global::with_default'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'global.rs'
+            function*
+              u'tokio_executor::global::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::block_on::{{closure}}'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Entered<T>>::block_on'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Entered<T>>::tick'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::scheduler::Scheduler<T>>::tick'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Borrow<T>>::enter'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Borrow<T>>::enter::{{closure}}'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::CurrentRunner::set_spawn'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Borrow<T>>::enter::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::scheduler::Scheduler<T>>::tick::{{closure}}'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::scheduler::Scheduled<T>>::tick'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_future_notify'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_fn_notify'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::enter'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::std::set'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::enter::{{closure}}'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_future_notify::{{closure}}'
+          frame*
+            filename*
+              u'mod.rs'
+            function* (isolated function)
+              u'<alloc::boxed::Box<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'then.rs'
+            function* (isolated function)
+              u'<futures::future::then::Then<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'chain.rs'
+            function* (isolated function)
+              u'<futures::future::chain::Chain<T>>::poll'
+          frame*
+            filename*
+              u'either.rs'
+            function* (isolated function)
+              u'<futures::future::either::Either<T> as futures::future::Future>::poll'
+          frame (ignored due to recursion)
+            filename*
+              u'either.rs'
+            function* (isolated function)
+              u'<futures::future::either::Either<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'acceptor.rs'
+            function*
+              u'<actix_web::server::acceptor::ServerMessageAcceptorServiceFut<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'and_then.rs'
+            function* (isolated function)
+              u'<actix_net::service::and_then::AndThenFuture<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'map_err.rs'
+            function* (isolated function)
+              u'<actix_net::service::map_err::MapErrFuture<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'channel.rs'
+            function* (isolated function)
+              u'<actix_web::server::channel::HttpChannel<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'channel.rs'
+            function* (isolated function)
+              u'<actix_web::server::channel::HttpChannel<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'h1.rs'
+            function* (isolated function)
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll'
+          frame*
+            filename*
+              u'h1.rs'
+            function* (isolated function)
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll_handler'
+          frame*
+            filename*
+              u'h1.rs'
+            function* (isolated function)
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll_io'
+          frame*
+            filename*
+              u'h1.rs'
+            function* (isolated function)
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::parse'
+          frame*
+            filename*
+              u'pipeline.rs'
+            function* (isolated function)
+              u'<actix_web::pipeline::Pipeline<T> as actix_web::server::handler::HttpHandlerTask>::poll_io'
+          frame*
+            filename*
+              u'<::log::macros::log macros>'
+            function* (isolated function)
+              u'<actix_web::pipeline::ProcessResponse<T>>::poll_io'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'log::__private_api_log'
+          frame*
+            filename*
+              u'log.rs'
+            function*
+              u'<sentry::integrations::log::Logger as log::Log>::log'
+          frame*
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with_active'
+          frame*
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with::{{closure}}'
+          frame*
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with_active::{{closure}}'
+        type*
+          u'actix_web::pipeline'
+        value (ignored because stacktrace takes precedence)
+          u'Error occurred during request handling, status: <int> Internal Server Error Something went really wrong here'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/aspnetcore.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/aspnetcore.pysnap
new file mode 100644
index 0000000000..bc79f44638
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/aspnetcore.pysnap
@@ -0,0 +1,347 @@
+---
+created: '2019-04-17T20:07:50.067739Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '228c649a3aa0901622c0a0e66ab0522c'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware'
+            function*
+              u'Invoke'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware'
+            function*
+              u'Invoke'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Routing.EndpointMiddleware'
+            function*
+              u'Invoke'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeAsync'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeFilterPipelineAsync'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'Next'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'Rethrow'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeNextResourceFilter'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeInnerFilterAsync'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'Next'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'Rethrow'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeNextActionFilterAsync'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeActionMethodAsync'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor+SyncObjectResultExecutor'
+            function*
+              u'Execute'
+          frame (non app frame)
+            module*
+              u'Microsoft.Extensions.Internal.ObjectMethodExecutor'
+            function*
+              u'Execute'
+          frame*
+            module*
+              u'(unknown)'
+            function*
+              u'lambda_method'
+          frame*
+            module*
+              u'SentryTest2.Controllers.ValuesController'
+            filename (module takes precedence)
+              u'valuescontroller.cs'
+            function*
+              u'Get'
+        type*
+          u'System.Exception'
+        value (ignored because stacktrace takes precedence)
+          u'sync exception'
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of app takes precedence)
+      message (exception of app takes precedence)
+        u'An unhandled exception has occurred while executing the request.'
+--------------------------------------------------------------------------
+system:
+  hash: '4ccd0f1953483581ba360c7518f90332'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware'
+            function*
+              u'Invoke'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware'
+            function*
+              u'Invoke'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Routing.EndpointMiddleware'
+            function*
+              u'Invoke'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeAsync'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeFilterPipelineAsync'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'Next'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'Rethrow'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeNextResourceFilter'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeInnerFilterAsync'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'Next'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'Rethrow'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeNextActionFilterAsync'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeActionMethodAsync'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor+SyncObjectResultExecutor'
+            function*
+              u'Execute'
+          frame*
+            module*
+              u'Microsoft.Extensions.Internal.ObjectMethodExecutor'
+            function*
+              u'Execute'
+          frame*
+            module*
+              u'(unknown)'
+            function*
+              u'lambda_method'
+          frame*
+            module*
+              u'SentryTest2.Controllers.ValuesController'
+            filename (module takes precedence)
+              u'valuescontroller.cs'
+            function*
+              u'Get'
+        type*
+          u'System.Exception'
+        value (ignored because stacktrace takes precedence)
+          u'sync exception'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/connection_error.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/connection_error.pysnap
new file mode 100644
index 0000000000..1b927fa7e8
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/connection_error.pysnap
@@ -0,0 +1,187 @@
+---
+created: '2019-04-17T20:02:28.191952Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'a3bcd79525a31922367598b0e6b6fda4'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry.utils.safe'
+            filename (module takes precedence)
+              u'safe.py'
+            function*
+              u'safe_execute'
+          frame*
+            module*
+              u'sentry.utils.services'
+            filename (module takes precedence)
+              u'services.py'
+            function*
+              u'<lambda>'
+          frame*
+            module*
+              u'getsentry.quotas'
+            filename (module takes precedence)
+              u'quotas.py'
+            function*
+              u'is_rate_limited'
+          frame*
+            module*
+              u'sentry.quotas.redis'
+            filename (module takes precedence)
+              u'redis.py'
+            function*
+              u'is_rate_limited'
+          frame*
+            module*
+              u'sentry.utils.redis'
+            filename (module takes precedence)
+              u'redis.py'
+            function*
+              u'call_script'
+          frame (non app frame)
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'__call__'
+          frame (non app frame)
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'evalsha'
+          frame (non app frame)
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'execute_command'
+          frame (non app frame)
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'parse_response'
+          frame (non app frame)
+            module*
+              u'redis.connection'
+            filename (module takes precedence)
+              u'connection.py'
+            function*
+              u'read_response'
+          frame (non app frame)
+            module*
+              u'redis.connection'
+            filename (module takes precedence)
+              u'connection.py'
+            function*
+              u'read_response'
+        type*
+          u'ConnectionError'
+        value (ignored because stacktrace takes precedence)
+          u"Error while reading from socket: ('Connection closed by server.',)"
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of app takes precedence)
+      message (exception of app takes precedence)
+        u'%s.process_error'
+--------------------------------------------------------------------------
+system:
+  hash: '011c0e7a2decebaeb1897a7f08baeb1a'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry.utils.safe'
+            filename (module takes precedence)
+              u'safe.py'
+            function*
+              u'safe_execute'
+          frame*
+            module*
+              u'sentry.utils.services'
+            filename (module takes precedence)
+              u'services.py'
+            function*
+              u'<lambda>'
+          frame*
+            module*
+              u'getsentry.quotas'
+            filename (module takes precedence)
+              u'quotas.py'
+            function*
+              u'is_rate_limited'
+          frame*
+            module*
+              u'sentry.quotas.redis'
+            filename (module takes precedence)
+              u'redis.py'
+            function*
+              u'is_rate_limited'
+          frame*
+            module*
+              u'sentry.utils.redis'
+            filename (module takes precedence)
+              u'redis.py'
+            function*
+              u'call_script'
+          frame*
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'__call__'
+          frame*
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'evalsha'
+          frame*
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'execute_command'
+          frame*
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'parse_response'
+          frame*
+            module*
+              u'redis.connection'
+            filename (module takes precedence)
+              u'connection.py'
+            function*
+              u'read_response'
+          frame*
+            module*
+              u'redis.connection'
+            filename (module takes precedence)
+              u'connection.py'
+            function*
+              u'read_response'
+        type*
+          u'ConnectionError'
+        value (ignored because stacktrace takes precedence)
+          u"Error while reading from socket: ('Connection closed by server.',)"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp.pysnap
new file mode 100644
index 0000000000..9e6545cc22
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp.pysnap
@@ -0,0 +1,17 @@
+---
+created: '2019-04-17T20:02:28.201100Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '666766514295bb52812324097cdaf53e'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'script-src'
+        violation (not a local script violation)
+        uri*
+          u'YYY'
+      message (csp takes precedence)
+        u"Blocked 'script' from 'YYY'"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp_img_src.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp_img_src.pysnap
new file mode 100644
index 0000000000..8c9c3cf8fc
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp_img_src.pysnap
@@ -0,0 +1,15 @@
+---
+created: '2019-04-17T20:07:50.096382Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '1742101e08eb1608f569751dfedd0062'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'img-src'
+        violation (not a local script violation)
+        uri*
+          u'ftp://example.com'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp_no_blocked_uri.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp_no_blocked_uri.pysnap
new file mode 100644
index 0000000000..1ea0e2552c
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp_no_blocked_uri.pysnap
@@ -0,0 +1,15 @@
+---
+created: '2019-04-17T20:02:28.217626Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: 'efddf1cde918097259aa7d4904fb1942'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'script-src'
+        violation (not a local script violation)
+        uri*
+          "'self'"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp_script_data_uri.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp_script_data_uri.pysnap
new file mode 100644
index 0000000000..e0ffccb0af
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp_script_data_uri.pysnap
@@ -0,0 +1,15 @@
+---
+created: '2019-04-17T20:07:50.110881Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '4e6f2bce9d121aa89f4dc5e5da08afb5'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'img-src'
+        violation (not a local script violation)
+        uri*
+          u'data:'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp_script_src_uri.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp_script_src_uri.pysnap
new file mode 100644
index 0000000000..042b9d40f4
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp_script_src_uri.pysnap
@@ -0,0 +1,15 @@
+---
+created: '2019-04-17T20:07:50.119361Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '223cdacfe5b4b830dc700b5c18cc21b4'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'script-src'
+        violation (not a local script violation)
+        uri*
+          u'example.com'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp_style_src_elem.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp_style_src_elem.pysnap
new file mode 100644
index 0000000000..5e868cc029
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/csp_style_src_elem.pysnap
@@ -0,0 +1,17 @@
+---
+created: '2019-04-17T20:02:28.242350Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '537a973f594c364842893e9a72af62a5'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'style-src-elem'
+        violation (not a local script violation)
+        uri*
+          u'use.fontawesome.com'
+      message (csp takes precedence)
+        u"Blocked 'style' from 'use.fontawesome.com'"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/custom_fingerprint.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/custom_fingerprint.pysnap
new file mode 100644
index 0000000000..bbea3b4f80
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/custom_fingerprint.pysnap
@@ -0,0 +1,8 @@
+---
+created: '2019-04-17T20:07:50.137754Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+custom-fingerprint:
+  hash: 'f30afa00b85f5cac5ee0bce01b31f08d'
+  values: [u'celery', u'SoftTimeLimitExceeded', u'sentry.tasks.store.process_event']
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/empty.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/empty.pysnap
new file mode 100644
index 0000000000..43e2844a8c
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/empty.pysnap
@@ -0,0 +1,7 @@
+---
+created: '2019-04-17T20:07:50.146616Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_comput_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_comput_hashes.pysnap
new file mode 100644
index 0000000000..9eab1d394d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_comput_hashes.pysnap
@@ -0,0 +1,24 @@
+---
+created: '2019-04-17T20:07:50.155718Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'ValueError'
+        value*
+          u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: 'b23ee1963904c2ca87b145febf94b66c'
+  component:
+    system*
+      exception*
+        type*
+          u'ValueError'
+        value*
+          u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_compute_hashes.pysnap
new file mode 100644
index 0000000000..5a2f03b694
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_compute_hashes.pysnap
@@ -0,0 +1,32 @@
+---
+created: '2019-04-17T20:02:28.278116Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'baz.py'
+        type*
+          u'ValueError'
+        value*
+          u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '9509e122c6175606d52862fa4f64853c'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'baz.py'
+        type*
+          u'ValueError'
+        value (ignored because stacktrace takes precedence)
+          u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_compute_hashes_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_compute_hashes_2.pysnap
new file mode 100644
index 0000000000..ee27be9480
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_compute_hashes_2.pysnap
@@ -0,0 +1,32 @@
+---
+created: '2019-04-17T20:07:50.174875Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'baz.py'
+        type*
+          u'ValueError'
+        value*
+          u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '9509e122c6175606d52862fa4f64853c'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'baz.py'
+        type*
+          u'ValueError'
+        value (ignored because stacktrace takes precedence)
+          u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_compute_hashes_3.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_compute_hashes_3.pysnap
new file mode 100644
index 0000000000..6dd37dc997
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_compute_hashes_3.pysnap
@@ -0,0 +1,52 @@
+---
+created: '2019-04-17T20:02:28.297190Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'b4c29e2a2a2681fbaf9fd8f5b09e4154'
+  component:
+    app*
+      chained-exception*
+        exception*
+          stacktrace
+            frame (non app frame)
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value*
+            u'hello world'
+        exception*
+          stacktrace
+            frame (non app frame)
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value*
+            u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '669cb6664e0f5fed38665da04e464f7e'
+  component:
+    system*
+      chained-exception*
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value (ignored because stacktrace takes precedence)
+            u'hello world'
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value (ignored because stacktrace takes precedence)
+            u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_javascript_no_in_app.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_javascript_no_in_app.pysnap
new file mode 100644
index 0000000000..c1805362be
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_javascript_no_in_app.pysnap
@@ -0,0 +1,50 @@
+---
+created: '2019-04-17T20:07:50.196282Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'app/components/modals/createTeamModal'
+            filename (module takes precedence)
+              u'createteammodal.jsx'
+          frame (non app frame)
+            module*
+              u'app/views/settings/components/forms/form'
+            filename (module takes precedence)
+              u'form.jsx'
+            function*
+              u'onError'
+        type*
+          u'TypeError'
+        value*
+          u"Cannot read property 'submitError' of null"
+--------------------------------------------------------------------------
+system:
+  hash: '8717a0fb8a1ddcabdd21bc2b7ca9ebee'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'app/components/modals/createTeamModal'
+            filename (module takes precedence)
+              u'createteammodal.jsx'
+          frame*
+            module*
+              u'app/views/settings/components/forms/form'
+            filename (module takes precedence)
+              u'form.jsx'
+            function*
+              u'onError'
+        type*
+          u'TypeError'
+        value (ignored because stacktrace takes precedence)
+          u"Cannot read property 'submitError' of null"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_without_type.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_without_type.pysnap
new file mode 100644
index 0000000000..ec7a237e45
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_without_type.pysnap
@@ -0,0 +1,20 @@
+---
+created: '2019-04-17T20:02:28.316208Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        value*
+          u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '5eb63bbbe01eeed093cb22bb8f5acdc3'
+  component:
+    system*
+      exception*
+        value*
+          u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_without_value.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_without_value.pysnap
new file mode 100644
index 0000000000..faa540aaa6
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/exception_without_value.pysnap
@@ -0,0 +1,20 @@
+---
+created: '2019-04-17T20:07:50.227912Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'ValueError'
+--------------------------------------------------------------------------
+system:
+  hash: '5a2cfd89b7b171fd7b4794b08023d04f'
+  component:
+    system*
+      exception*
+        type*
+          u'ValueError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/expectct.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/expectct.pysnap
new file mode 100644
index 0000000000..2581b14edf
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/expectct.pysnap
@@ -0,0 +1,14 @@
+---
+created: '2019-04-17T20:07:50.237599Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '3d2933f4b5ec459ec8d569a398fd328c'
+  component:
+    default*
+      expect-ct*
+        salt* (a static salt)
+          'expect-ct'
+        hostname*
+          u'example.com'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_comput_hashes_ignores_ENHANCED_clojure_classes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_comput_hashes_ignores_ENHANCED_clojure_classes.pysnap
new file mode 100644
index 0000000000..b6d80e5ee4
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_comput_hashes_ignores_ENHANCED_clojure_classes.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.246903Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '526b64456c48836a46ec1a89544fd412'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_ENHANCED_spring_classes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_ENHANCED_spring_classes.pysnap
new file mode 100644
index 0000000000..81df74dd60
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_ENHANCED_spring_classes.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.256752Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
+--------------------------------------------------------------------------
+system:
+  hash: '45c0b0a8c777e7a7040d7c39233a08a5'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_extra_ENHANCED_clojure_classes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_extra_ENHANCED_clojure_classes.pysnap
new file mode 100644
index 0000000000..3a2d46f89a
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_extra_ENHANCED_clojure_classes.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:02:28.361231Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>$fn__<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '353e05904b48bd3ae4fa9623934a70d0'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>$fn__<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_extra_ENHANCED_spring_classes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_extra_ENHANCED_spring_classes.pysnap
new file mode 100644
index 0000000000..dfb7a8c901
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_extra_ENHANCED_spring_classes.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.275606Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>$$EnhancerBySpringCGLIB$$<auto>$$FastClassBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
+--------------------------------------------------------------------------
+system:
+  hash: 'be15ca3d511b96918e087c4f42503ca2'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>$$EnhancerBySpringCGLIB$$<auto>$$FastClassBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_filename_if_abs_path_is_http.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_filename_if_abs_path_is_http.pysnap
new file mode 100644
index 0000000000..de20adb7e8
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_filename_if_abs_path_is_http.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.285154Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
+--------------------------------------------------------------------------
+system:
+  hash: '098f6bcd4621d373cade4e832627b4f6'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_filename_if_blob.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_filename_if_blob.pysnap
new file mode 100644
index 0000000000..e57ac1413a
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_filename_if_blob.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-04-17T20:07:50.295173Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'7f7aaadf-a006-4217-9ed5-5fbf8585c6c0'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame
+          filename (ignored because frame points to a URL)
+            u'7f7aaadf-a006-4217-9ed5-5fbf8585c6c0'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_filename_if_http.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_filename_if_http.pysnap
new file mode 100644
index 0000000000..a97eb2d9b8
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_filename_if_http.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.304837Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
+--------------------------------------------------------------------------
+system:
+  hash: '098f6bcd4621d373cade4e832627b4f6'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_filename_if_https.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_filename_if_https.pysnap
new file mode 100644
index 0000000000..64859e1eb9
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_filename_if_https.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.314645Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
+--------------------------------------------------------------------------
+system:
+  hash: '098f6bcd4621d373cade4e832627b4f6'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_java8_lambda_function.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_java8_lambda_function.pysnap
new file mode 100644
index 0000000000..a400d8b508
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_java8_lambda_function.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:02:28.418294Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'foo.bar.Baz'
+          function (ignored lambda function)
+            u'lambda$work$1'
+--------------------------------------------------------------------------
+system:
+  hash: 'be7f1b8b4014de623c533a8218dba5bd'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'foo.bar.Baz'
+          function (ignored lambda function)
+            u'lambda$work$1'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_java8_lambda_module.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_java8_lambda_module.pysnap
new file mode 100644
index 0000000000..2796cf8b80
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_java8_lambda_module.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.334132Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module (ignored java lambda)
+            u'foo.bar.Baz$$Lambda$40/1673859467'
+          function*
+            u'call'
+--------------------------------------------------------------------------
+system:
+  hash: '53b9e9679a8ea25880376080b76f98ad'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module (ignored java lambda)
+            u'foo.bar.Baz$$Lambda$40/1673859467'
+          function*
+            u'call'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_javassist.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_javassist.pysnap
new file mode 100644
index 0000000000..225f32da8d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_javassist.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:02:28.437263Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
+--------------------------------------------------------------------------
+system:
+  hash: '538bdfd8d7bb2495d0d6429c3689a420'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_javassist_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_javassist_2.pysnap
new file mode 100644
index 0000000000..635bba898b
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_javassist_2.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.353119Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
+--------------------------------------------------------------------------
+system:
+  hash: '538bdfd8d7bb2495d0d6429c3689a420'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_javassist_3.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_javassist_3.pysnap
new file mode 100644
index 0000000000..8a23641adf
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_javassist_3.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:02:28.455437Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename* (cleaned javassist parts)
+            u'entriesresource_$$_javassist<auto>.java'
+          function*
+            u'fn'
+--------------------------------------------------------------------------
+system:
+  hash: 'dc3d511120ce04996b1eef3496516e5c'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename* (cleaned javassist parts)
+            u'entriesresource_$$_javassist<auto>.java'
+          function*
+            u'fn'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_module_if_page_url.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_module_if_page_url.pysnap
new file mode 100644
index 0000000000..d5a196adda
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_module_if_page_url.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.372035Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'foo/bar/baz'
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+--------------------------------------------------------------------------
+system:
+  hash: 'a7a536723f7289f3ab7cbb444b7058ac'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'foo/bar/baz'
+          filename (ignored because frame points to a URL)
+            u'foo.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_module_if_page_url_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_module_if_page_url_2.pysnap
new file mode 100644
index 0000000000..c52d7e31d5
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_module_if_page_url_2.pysnap
@@ -0,0 +1,29 @@
+---
+created: '2019-04-17T20:02:28.475095Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (non app frame)
+          module (ignored bad javascript module)
+            u'foo/bar/baz'
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame
+          module (ignored bad javascript module)
+            u'foo/bar/baz'
+          filename (ignored because frame points to a URL)
+            u'foo.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_safari_native_code.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_safari_native_code.pysnap
new file mode 100644
index 0000000000..012d69a27b
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_safari_native_code.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.390585Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (native code indicated by filename)
+            u'[native code]'
+          function*
+            u'forEach'
+--------------------------------------------------------------------------
+system:
+  hash: '30eb5001914d29dd8461898b5b8094fe'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (native code indicated by filename)
+            u'[native code]'
+          function*
+            u'forEach'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_sun_java_generated_constructors.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_sun_java_generated_constructors.pysnap
new file mode 100644
index 0000000000..9c75d83813
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_sun_java_generated_constructors.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.400714Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedSerializationConstructorAccessor<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '07d1a8e5728b3c4c7aa8b8273fd0e753'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedSerializationConstructorAccessor<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_sun_java_generated_constructors_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_sun_java_generated_constructors_2.pysnap
new file mode 100644
index 0000000000..c603d7c675
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_sun_java_generated_constructors_2.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.410557Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedConstructorAccessor<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '09e0efcab18f545166318118ed4e0292'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedConstructorAccessor<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_sun_java_generated_methods.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_sun_java_generated_methods.pysnap
new file mode 100644
index 0000000000..f3fe16d890
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_sun_java_generated_methods.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.420285Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed reflection marker)
+            'sun.reflect.GeneratedMethodAccessor'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: 'df0a8233b314c542a0b98a4e8865c7b5'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed reflection marker)
+            'sun.reflect.GeneratedMethodAccessor'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_sanitizes_block_functions.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_sanitizes_block_functions.pysnap
new file mode 100644
index 0000000000..1d3e76d1ec
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_sanitizes_block_functions.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:02:28.523687Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.py'
+          function* (ruby block)
+            'block'
+--------------------------------------------------------------------------
+system:
+  hash: '27eed4125fc13d42163ddb0b8f357b48'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          function* (ruby block)
+            'block'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_sanitizes_erb_templates.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_sanitizes_erb_templates.pysnap
new file mode 100644
index 0000000000..01dd524e9d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_sanitizes_erb_templates.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:02:28.533322Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.html.erb'
+          function* (removed generated erb template suffix)
+            u'_foo_html_erb'
+--------------------------------------------------------------------------
+system:
+  hash: '4067a71d7098866f87c746a57a77b2bb'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.html.erb'
+          function* (removed generated erb template suffix)
+            u'_foo_html_erb'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_sanitizes_versioned_filenames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_sanitizes_versioned_filenames.pysnap
new file mode 100644
index 0000000000..3318555c57
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_sanitizes_versioned_filenames.pysnap
@@ -0,0 +1,22 @@
+---
+created: '2019-04-17T20:02:28.542399Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.html.erb'
+--------------------------------------------------------------------------
+system:
+  hash: '2f908c015ad77a50595512fcf65d344c'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.html.erb'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_sanitizes_versioned_filenames_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_sanitizes_versioned_filenames_2.pysnap
new file mode 100644
index 0000000000..7aba165fce
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_sanitizes_versioned_filenames_2.pysnap
@@ -0,0 +1,22 @@
+---
+created: '2019-04-17T20:07:50.456820Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.html.erb'
+--------------------------------------------------------------------------
+system:
+  hash: '2f908c015ad77a50595512fcf65d344c'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.html.erb'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_skips_symbol_if_unknown.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_skips_symbol_if_unknown.pysnap
new file mode 100644
index 0000000000..aba680ea61
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_skips_symbol_if_unknown.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.466994Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'libfoo'
+          function*
+            u'main'
+--------------------------------------------------------------------------
+system:
+  hash: 'a972f399399f5566f39b14a7afdd24ff'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'libfoo'
+          function*
+            u'main'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_uses_context_line_over_function.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_uses_context_line_over_function.pysnap
new file mode 100644
index 0000000000..bd869826e3
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_uses_context_line_over_function.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:02:28.570816Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
+--------------------------------------------------------------------------
+system:
+  hash: 'fb73cb54ced59b1c0c60d9bb40b7336b'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_uses_function_over_lineno.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_uses_function_over_lineno.pysnap
new file mode 100644
index 0000000000..0379baeb55
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_uses_function_over_lineno.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.487612Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
+--------------------------------------------------------------------------
+system:
+  hash: 'fb73cb54ced59b1c0c60d9bb40b7336b'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_uses_module_over_filename.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_uses_module_over_filename.pysnap
new file mode 100644
index 0000000000..8a9a622d28
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_uses_module_over_filename.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.497809Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'foo'
+          filename (module takes precedence)
+            u'foo.py'
+--------------------------------------------------------------------------
+system:
+  hash: 'acbd18db4cc2f85cedef654fccc4a4d8'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'foo'
+          filename (module takes precedence)
+            u'foo.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_uses_symbol_instead_of_function.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_uses_symbol_instead_of_function.pysnap
new file mode 100644
index 0000000000..943fb8fbe7
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_uses_symbol_instead_of_function.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.507465Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'libfoo'
+          function*
+            u'int main()'
+--------------------------------------------------------------------------
+system:
+  hash: '23db4a9e73800923f345d2b868993345'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'libfoo'
+          function*
+            u'int main()'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_with_only_required_vars.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_with_only_required_vars.pysnap
new file mode 100644
index 0000000000..b68f5cdb7d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_with_only_required_vars.pysnap
@@ -0,0 +1,22 @@
+---
+created: '2019-04-17T20:07:50.517534Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.py'
+--------------------------------------------------------------------------
+system:
+  hash: '1effb24729ae4c43efa36b460511136a'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/hpkp.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/hpkp.pysnap
new file mode 100644
index 0000000000..d903486bd8
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/hpkp.pysnap
@@ -0,0 +1,14 @@
+---
+created: '2019-04-17T20:07:50.527542Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '1e37a374cb33572622d02ff7a6237c44'
+  component:
+    default*
+      hpkp*
+        salt* (a static salt)
+          'hpkp'
+        hostname*
+          u'example.com'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/java_chained.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/java_chained.pysnap
new file mode 100644
index 0000000000..46bf0d5ce0
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/java_chained.pysnap
@@ -0,0 +1,787 @@
+---
+created: '2019-04-17T20:02:28.650833Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '750486b8d8c51500fa0dfbb6f1577af0'
+  component:
+    app*
+      chained-exception*
+        exception*
+          stacktrace
+            frame (non app frame)
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.connector.Connector'
+              filename (module takes precedence)
+                u'connector.java'
+              function*
+                u'startInternal'
+            frame (non app frame)
+              module*
+                u'org.apache.coyote.AbstractProtocol'
+              filename (module takes precedence)
+                u'abstractprotocol.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.apache.tomcat.util.net.AbstractEndpoint'
+              filename (module takes precedence)
+                u'abstractendpoint.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.apache.tomcat.util.net.NioEndpoint'
+              filename (module takes precedence)
+                u'nioendpoint.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.ServerSocketAdaptor'
+              filename (module takes precedence)
+                u'serversocketadaptor.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.ServerSocketChannelImpl'
+              filename (module takes precedence)
+                u'serversocketchannelimpl.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind0'
+          type*
+            u'BindException'
+          value*
+            u'Address already in use'
+        exception*
+          stacktrace
+            frame (non app frame)
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.connector.Connector'
+              filename (module takes precedence)
+                u'connector.java'
+              function*
+                u'startInternal'
+          type*
+            u'LifecycleException'
+          value*
+            u'service.getName(): "Tomcat";  Protocol handler start failed'
+        exception*
+          stacktrace*
+            frame*
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+          type*
+            u'LifecycleException'
+          value (ignored because stacktrace takes precedence)
+            u'Failed to start component [Connector[HTTP/<float><int>]]'
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of app takes precedence)
+      message (exception of app takes precedence)
+        u'Failed to start connector [Connector[HTTP/<float><int>]]'
+--------------------------------------------------------------------------
+system:
+  hash: '8924849495809d42431719c2b9ab65c8'
+  component:
+    system*
+      chained-exception*
+        exception*
+          stacktrace*
+            frame*
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame*
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame*
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.apache.catalina.connector.Connector'
+              filename (module takes precedence)
+                u'connector.java'
+              function*
+                u'startInternal'
+            frame*
+              module*
+                u'org.apache.coyote.AbstractProtocol'
+              filename (module takes precedence)
+                u'abstractprotocol.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.apache.tomcat.util.net.AbstractEndpoint'
+              filename (module takes precedence)
+                u'abstractendpoint.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.apache.tomcat.util.net.NioEndpoint'
+              filename (module takes precedence)
+                u'nioendpoint.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.ServerSocketAdaptor'
+              filename (module takes precedence)
+                u'serversocketadaptor.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.ServerSocketChannelImpl'
+              filename (module takes precedence)
+                u'serversocketchannelimpl.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind0'
+          type*
+            u'BindException'
+          value (ignored because stacktrace takes precedence)
+            u'Address already in use'
+        exception*
+          stacktrace*
+            frame*
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame*
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame*
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.apache.catalina.connector.Connector'
+              filename (module takes precedence)
+                u'connector.java'
+              function*
+                u'startInternal'
+          type*
+            u'LifecycleException'
+          value (ignored because stacktrace takes precedence)
+            u'service.getName(): "Tomcat";  Protocol handler start failed'
+        exception*
+          stacktrace*
+            frame*
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame*
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame*
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+          type*
+            u'LifecycleException'
+          value (ignored because stacktrace takes precedence)
+            u'Failed to start component [Connector[HTTP/<float><int>]]'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/java_minimal.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/java_minimal.pysnap
new file mode 100644
index 0000000000..10d61dd8b7
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/java_minimal.pysnap
@@ -0,0 +1,803 @@
+---
+created: '2019-04-17T20:07:50.591394Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'java.lang.Thread'
+            filename (module takes precedence)
+              u'thread.java'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'org.apache.tomcat.util.threads.TaskThread$WrappingRunnable'
+            filename (module takes precedence)
+              u'taskthread.java'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'java.util.concurrent.ThreadPoolExecutor$Worker'
+            filename (module takes precedence)
+              u'threadpoolexecutor.java'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'java.util.concurrent.ThreadPoolExecutor'
+            filename (module takes precedence)
+              u'threadpoolexecutor.java'
+            function*
+              u'runWorker'
+          frame (non app frame)
+            module*
+              u'org.apache.tomcat.util.net.SocketProcessorBase'
+            filename (module takes precedence)
+              u'socketprocessorbase.java'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'org.apache.tomcat.util.net.NioEndpoint$SocketProcessor'
+            filename (module takes precedence)
+              u'nioendpoint.java'
+            function*
+              u'doRun'
+          frame (non app frame)
+            module*
+              u'org.apache.coyote.AbstractProtocol$ConnectionHandler'
+            filename (module takes precedence)
+              u'abstractprotocol.java'
+            function*
+              u'process'
+          frame (non app frame)
+            module*
+              u'org.apache.coyote.AbstractProcessorLight'
+            filename (module takes precedence)
+              u'abstractprocessorlight.java'
+            function*
+              u'process'
+          frame (non app frame)
+            module*
+              u'org.apache.coyote.http11.Http11Processor'
+            filename (module takes precedence)
+              u'http11processor.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.connector.CoyoteAdapter'
+            filename (module takes precedence)
+              u'coyoteadapter.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.StandardEngineValve'
+            filename (module takes precedence)
+              u'standardenginevalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.valves.ErrorReportValve'
+            filename (module takes precedence)
+              u'errorreportvalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.StandardHostValve'
+            filename (module takes precedence)
+              u'standardhostvalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.authenticator.AuthenticatorBase'
+            filename (module takes precedence)
+              u'authenticatorbase.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.StandardContextValve'
+            filename (module takes precedence)
+              u'standardcontextvalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.StandardWrapperValve'
+            filename (module takes precedence)
+              u'standardwrappervalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.CharacterEncodingFilter'
+            filename (module takes precedence)
+              u'characterencodingfilter.java'
+            function*
+              u'doFilterInternal'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.HiddenHttpMethodFilter'
+            filename (module takes precedence)
+              u'hiddenhttpmethodfilter.java'
+            function*
+              u'doFilterInternal'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.HttpPutFormContentFilter'
+            filename (module takes precedence)
+              u'httpputformcontentfilter.java'
+            function*
+              u'doFilterInternal'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.RequestContextFilter'
+            filename (module takes precedence)
+              u'requestcontextfilter.java'
+            function*
+              u'doFilterInternal'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.tomcat.websocket.server.WsFilter'
+            filename (module takes precedence)
+              u'wsfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'javax.servlet.http.HttpServlet'
+            filename (module takes precedence)
+              u'httpservlet.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'javax.servlet.http.HttpServlet'
+            filename (module takes precedence)
+              u'httpservlet.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'doGet'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'processRequest'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.DispatcherServlet'
+            filename (module takes precedence)
+              u'dispatcherservlet.java'
+            function*
+              u'doService'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.DispatcherServlet'
+            filename (module takes precedence)
+              u'dispatcherservlet.java'
+            function*
+              u'doDispatch'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter'
+            filename (module takes precedence)
+              u'abstracthandlermethodadapter.java'
+            function*
+              u'handle'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter'
+            filename (module takes precedence)
+              u'requestmappinghandleradapter.java'
+            function*
+              u'handleInternal'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter'
+            filename (module takes precedence)
+              u'requestmappinghandleradapter.java'
+            function*
+              u'invokeHandlerMethod'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod'
+            filename (module takes precedence)
+              u'servletinvocablehandlermethod.java'
+            function*
+              u'invokeAndHandle'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.method.support.InvocableHandlerMethod'
+            filename (module takes precedence)
+              u'invocablehandlermethod.java'
+            function*
+              u'invokeForRequest'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.method.support.InvocableHandlerMethod'
+            filename (module takes precedence)
+              u'invocablehandlermethod.java'
+            function*
+              u'doInvoke'
+          frame (non app frame)
+            module*
+              u'java.lang.reflect.Method'
+            filename (module takes precedence)
+              u'method.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'jdk.internal.reflect.DelegatingMethodAccessorImpl'
+            filename (module takes precedence)
+              u'delegatingmethodaccessorimpl.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'jdk.internal.reflect.NativeMethodAccessorImpl'
+            filename (module takes precedence)
+              u'nativemethodaccessorimpl.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'jdk.internal.reflect.NativeMethodAccessorImpl'
+            filename (module takes precedence)
+              u'nativemethodaccessorimpl.java'
+            function*
+              u'invoke0'
+          frame (non app frame)
+            module*
+              u'io.sentry.example.Application'
+            filename (module takes precedence)
+              u'application.java'
+            function*
+              u'home'
+        type*
+          u'ArithmeticException'
+        value*
+          u'/ by zero'
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of system takes precedence)
+      message (exception of system takes precedence)
+        u'Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ArithmeticException: / by zero] with root cause'
+--------------------------------------------------------------------------
+system:
+  hash: 'ec87dd10e4f7512ecccb4a068c5774ae'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'java.lang.Thread'
+            filename (module takes precedence)
+              u'thread.java'
+            function*
+              u'run'
+          frame*
+            module*
+              u'org.apache.tomcat.util.threads.TaskThread$WrappingRunnable'
+            filename (module takes precedence)
+              u'taskthread.java'
+            function*
+              u'run'
+          frame*
+            module*
+              u'java.util.concurrent.ThreadPoolExecutor$Worker'
+            filename (module takes precedence)
+              u'threadpoolexecutor.java'
+            function*
+              u'run'
+          frame*
+            module*
+              u'java.util.concurrent.ThreadPoolExecutor'
+            filename (module takes precedence)
+              u'threadpoolexecutor.java'
+            function*
+              u'runWorker'
+          frame*
+            module*
+              u'org.apache.tomcat.util.net.SocketProcessorBase'
+            filename (module takes precedence)
+              u'socketprocessorbase.java'
+            function*
+              u'run'
+          frame*
+            module*
+              u'org.apache.tomcat.util.net.NioEndpoint$SocketProcessor'
+            filename (module takes precedence)
+              u'nioendpoint.java'
+            function*
+              u'doRun'
+          frame*
+            module*
+              u'org.apache.coyote.AbstractProtocol$ConnectionHandler'
+            filename (module takes precedence)
+              u'abstractprotocol.java'
+            function*
+              u'process'
+          frame*
+            module*
+              u'org.apache.coyote.AbstractProcessorLight'
+            filename (module takes precedence)
+              u'abstractprocessorlight.java'
+            function*
+              u'process'
+          frame*
+            module*
+              u'org.apache.coyote.http11.Http11Processor'
+            filename (module takes precedence)
+              u'http11processor.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'org.apache.catalina.connector.CoyoteAdapter'
+            filename (module takes precedence)
+              u'coyoteadapter.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'org.apache.catalina.core.StandardEngineValve'
+            filename (module takes precedence)
+              u'standardenginevalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.valves.ErrorReportValve'
+            filename (module takes precedence)
+              u'errorreportvalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.core.StandardHostValve'
+            filename (module takes precedence)
+              u'standardhostvalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.authenticator.AuthenticatorBase'
+            filename (module takes precedence)
+              u'authenticatorbase.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.core.StandardContextValve'
+            filename (module takes precedence)
+              u'standardcontextvalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.core.StandardWrapperValve'
+            filename (module takes precedence)
+              u'standardwrappervalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.CharacterEncodingFilter'
+            filename (module takes precedence)
+              u'characterencodingfilter.java'
+            function*
+              u'doFilterInternal'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.HiddenHttpMethodFilter'
+            filename (module takes precedence)
+              u'hiddenhttpmethodfilter.java'
+            function*
+              u'doFilterInternal'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.HttpPutFormContentFilter'
+            filename (module takes precedence)
+              u'httpputformcontentfilter.java'
+            function*
+              u'doFilterInternal'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.RequestContextFilter'
+            filename (module takes precedence)
+              u'requestcontextfilter.java'
+            function*
+              u'doFilterInternal'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.apache.tomcat.websocket.server.WsFilter'
+            filename (module takes precedence)
+              u'wsfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'javax.servlet.http.HttpServlet'
+            filename (module takes precedence)
+              u'httpservlet.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'javax.servlet.http.HttpServlet'
+            filename (module takes precedence)
+              u'httpservlet.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'doGet'
+          frame*
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'processRequest'
+          frame*
+            module*
+              u'org.springframework.web.servlet.DispatcherServlet'
+            filename (module takes precedence)
+              u'dispatcherservlet.java'
+            function*
+              u'doService'
+          frame*
+            module*
+              u'org.springframework.web.servlet.DispatcherServlet'
+            filename (module takes precedence)
+              u'dispatcherservlet.java'
+            function*
+              u'doDispatch'
+          frame*
+            module*
+              u'org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter'
+            filename (module takes precedence)
+              u'abstracthandlermethodadapter.java'
+            function*
+              u'handle'
+          frame*
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter'
+            filename (module takes precedence)
+              u'requestmappinghandleradapter.java'
+            function*
+              u'handleInternal'
+          frame*
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter'
+            filename (module takes precedence)
+              u'requestmappinghandleradapter.java'
+            function*
+              u'invokeHandlerMethod'
+          frame*
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod'
+            filename (module takes precedence)
+              u'servletinvocablehandlermethod.java'
+            function*
+              u'invokeAndHandle'
+          frame*
+            module*
+              u'org.springframework.web.method.support.InvocableHandlerMethod'
+            filename (module takes precedence)
+              u'invocablehandlermethod.java'
+            function*
+              u'invokeForRequest'
+          frame*
+            module*
+              u'org.springframework.web.method.support.InvocableHandlerMethod'
+            filename (module takes precedence)
+              u'invocablehandlermethod.java'
+            function*
+              u'doInvoke'
+          frame*
+            module*
+              u'java.lang.reflect.Method'
+            filename (module takes precedence)
+              u'method.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'jdk.internal.reflect.DelegatingMethodAccessorImpl'
+            filename (module takes precedence)
+              u'delegatingmethodaccessorimpl.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'jdk.internal.reflect.NativeMethodAccessorImpl'
+            filename (module takes precedence)
+              u'nativemethodaccessorimpl.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'jdk.internal.reflect.NativeMethodAccessorImpl'
+            filename (module takes precedence)
+              u'nativemethodaccessorimpl.java'
+            function*
+              u'invoke0'
+          frame*
+            module*
+              u'io.sentry.example.Application'
+            filename (module takes precedence)
+              u'application.java'
+            function*
+              u'home'
+        type*
+          u'ArithmeticException'
+        value (ignored because stacktrace takes precedence)
+          u'/ by zero'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_exception_fallback_to_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_exception_fallback_to_message.pysnap
new file mode 100644
index 0000000000..60b2b59287
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_exception_fallback_to_message.pysnap
@@ -0,0 +1,24 @@
+---
+created: '2019-04-17T20:26:40.111823Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'Error'
+        value* (stripped common values)
+          u'Loading chunk <int> failed.\n(timeout: <url>'
+--------------------------------------------------------------------------
+system:
+  hash: '10dfd81e2df31e96fae451b9e205ad81'
+  component:
+    system*
+      exception*
+        type*
+          u'Error'
+        value* (stripped common values)
+          u'Loading chunk <int> failed.\n(timeout: <url>'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_exception_fallback_to_message_whistles.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_exception_fallback_to_message_whistles.pysnap
new file mode 100644
index 0000000000..4a633902fa
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_exception_fallback_to_message_whistles.pysnap
@@ -0,0 +1,24 @@
+---
+created: '2019-04-18T14:29:10.019528Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'Error'
+        value* (stripped common values)
+          u'<date>: <email> logged in (error <int>) time spent <float> --- correlation id <uuid>, checksum <sha1> (md5 <md5>); payload timestamp <date> (submitted from <ip> via <ip> via <ip>)'
+--------------------------------------------------------------------------
+system:
+  hash: '0bbe78766de9b3b64a5cc115018bec46'
+  component:
+    system*
+      exception*
+        type*
+          u'Error'
+        value* (stripped common values)
+          u'<date>: <email> logged in (error <int>) time spent <float> --- correlation id <uuid>, checksum <sha1> (md5 <md5>); payload timestamp <date> (submitted from <ip> via <ip> via <ip>)'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_exception_no_in_app.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_exception_no_in_app.pysnap
new file mode 100644
index 0000000000..7cf29e14b5
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_exception_no_in_app.pysnap
@@ -0,0 +1,146 @@
+---
+created: '2019-04-17T20:07:50.604570Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'dispatchInteractiveEvent'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'interactiveUpdates'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'interactiveUpdates$1'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performSyncWork'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performWork'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performWorkOnRoot'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'renderRoot'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'replayUnitOfWork'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'invokeGuardedCallback'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'Object.invokeGuardedCallbackDev'
+          frame (non app frame)
+            filename*
+              u'index.js'
+            function*
+              u'HTMLUnknownElement.sentryWrapped'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'HTMLUnknownElement.callCallback'
+        type*
+          u'ReferenceError'
+        value*
+          u'varant is not defined'
+--------------------------------------------------------------------------
+system:
+  hash: 'c792aaace0c1a534a115ece18c376538'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'dispatchInteractiveEvent'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'interactiveUpdates'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'interactiveUpdates$1'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performSyncWork'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performWork'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performWorkOnRoot'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'renderRoot'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'replayUnitOfWork'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'invokeGuardedCallback'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'Object.invokeGuardedCallbackDev'
+          frame*
+            filename*
+              u'index.js'
+            function*
+              u'HTMLUnknownElement.sentryWrapped'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'HTMLUnknownElement.callCallback'
+        type*
+          u'ReferenceError'
+        value (ignored because stacktrace takes precedence)
+          u'varant is not defined'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_message.pysnap
new file mode 100644
index 0000000000..a663ff09ff
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_message.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-04-17T20:02:28.701389Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '4119639092e62c55ea8be348e4d9260d'
+  component:
+    default*
+      message*
+        u'event'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/laravel.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/laravel.pysnap
new file mode 100644
index 0000000000..e21a47298b
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/laravel.pysnap
@@ -0,0 +1,522 @@
+---
+created: '2019-04-17T20:07:50.642378Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '294cfb8d1aa7ab375c4b49ce2733092c'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'server.php'
+          frame*
+            filename*
+              u'index.php'
+            function*
+              u'require_once'
+          frame (non app frame)
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::handle'
+          frame (non app frame)
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::sendRequestThroughRouter'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::then'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'checkformaintenancemode.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'validatepostsize.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'transformsrequest.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'transformsrequest.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'trustproxies.php'
+            function*
+              u'Fideloper\\Proxy\\TrustProxies::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::Illuminate\\Foundation\\Http\\{closure}'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::dispatch'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::dispatchToRoute'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::runRoute'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::runRouteWithinStack'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::then'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'encryptcookies.php'
+            function*
+              u'Illuminate\\Cookie\\Middleware\\EncryptCookies::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'addqueuedcookiestoresponse.php'
+            function*
+              u'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'startsession.php'
+            function*
+              u'Illuminate\\Session\\Middleware\\StartSession::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'shareerrorsfromsession.php'
+            function*
+              u'Illuminate\\View\\Middleware\\ShareErrorsFromSession::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'verifycsrftoken.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'substitutebindings.php'
+            function*
+              u'Illuminate\\Routing\\Middleware\\SubstituteBindings::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'route.php'
+            function*
+              u'Illuminate\\Routing\\Route::run'
+          frame (non app frame)
+            filename*
+              u'route.php'
+            function*
+              u'Illuminate\\Routing\\Route::runCallable'
+          frame*
+            filename*
+              u'web.php'
+            function*
+              u'Illuminate\\Routing\\RouteFileRegistrar::{closure}'
+        type*
+          u'Exception'
+        value (ignored because stacktrace takes precedence)
+          u'LARAVEL TEST'
+--------------------------------------------------------------------------
+system:
+  hash: 'a3719dac43d28c56931056d073154398'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'server.php'
+          frame*
+            filename*
+              u'index.php'
+            function*
+              u'require_once'
+          frame*
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::handle'
+          frame*
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::sendRequestThroughRouter'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::then'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'checkformaintenancemode.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'validatepostsize.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'transformsrequest.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'transformsrequest.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'trustproxies.php'
+            function*
+              u'Fideloper\\Proxy\\TrustProxies::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::Illuminate\\Foundation\\Http\\{closure}'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::dispatch'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::dispatchToRoute'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::runRoute'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::runRouteWithinStack'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::then'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'encryptcookies.php'
+            function*
+              u'Illuminate\\Cookie\\Middleware\\EncryptCookies::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'addqueuedcookiestoresponse.php'
+            function*
+              u'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'startsession.php'
+            function*
+              u'Illuminate\\Session\\Middleware\\StartSession::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'shareerrorsfromsession.php'
+            function*
+              u'Illuminate\\View\\Middleware\\ShareErrorsFromSession::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'verifycsrftoken.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'substitutebindings.php'
+            function*
+              u'Illuminate\\Routing\\Middleware\\SubstituteBindings::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'route.php'
+            function*
+              u'Illuminate\\Routing\\Route::run'
+          frame*
+            filename*
+              u'route.php'
+            function*
+              u'Illuminate\\Routing\\Route::runCallable'
+          frame*
+            filename*
+              u'web.php'
+            function*
+              u'Illuminate\\Routing\\RouteFileRegistrar::{closure}'
+        type*
+          u'Exception'
+        value (ignored because stacktrace takes precedence)
+          u'LARAVEL TEST'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/logentry_prefers_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/logentry_prefers_message.pysnap
new file mode 100644
index 0000000000..19364ba96c
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/logentry_prefers_message.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-04-17T20:02:28.738214Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '8ec8bbc71eb6e2af7fbe5076a8534f96'
+  component:
+    default*
+      message*
+        u'Hello there %s!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/logentry_uses_formatted.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/logentry_uses_formatted.pysnap
new file mode 100644
index 0000000000..6d7e8211b0
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/logentry_uses_formatted.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-04-17T20:07:50.658523Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '329b29efcf1f77067a063e34f56e7791'
+  component:
+    default*
+      message*
+        u'Hello there world!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/message_prefers_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/message_prefers_message.pysnap
new file mode 100644
index 0000000000..6b2f6e130d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/message_prefers_message.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-04-17T20:02:28.754190Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '8ec8bbc71eb6e2af7fbe5076a8534f96'
+  component:
+    default*
+      message*
+        u'Hello there %s!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/message_uses_formatted.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/message_uses_formatted.pysnap
new file mode 100644
index 0000000000..2f1ebcb299
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/message_uses_formatted.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-04-17T20:02:28.761775Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: 'd3f5e52d24e9c1eae5abe6c866cced63'
+  component:
+    default*
+      message*
+        u'Hello there Peter!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/minified_javascript.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/minified_javascript.pysnap
new file mode 100644
index 0000000000..a315fd82e4
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/minified_javascript.pysnap
@@ -0,0 +1,330 @@
+---
+created: '2019-04-17T20:09:17.479725Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'M'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'S/<'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'i'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'b'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'n'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'g/</t[e]'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'h/p._invoke</<'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'W'
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/<'
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/</a</<'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u't.exports/<'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'L'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u't.exports/</<'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'c'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'n'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'g/</t[e]'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'h/p._invoke</<'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'W'
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/<'
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'componentPromise'
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'o.e'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'Pt</t.prototype.wrapTimeFunction/<'
+        type*
+          u'NS_ERROR_NOT_INITIALIZED'
+--------------------------------------------------------------------------
+system:
+  hash: '074e2ed5d89f602d31be5742ac107fef'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'M'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'S/<'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'i'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'b'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'n'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'g/</t[e]'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'h/p._invoke</<'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'W'
+          frame*
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/<'
+          frame*
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/</a</<'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u't.exports/<'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'L'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u't.exports/</<'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'c'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'n'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'g/</t[e]'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'h/p._invoke</<'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'W'
+          frame*
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/<'
+          frame*
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'componentPromise'
+          frame*
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'o.e'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'Pt</t.prototype.wrapTimeFunction/<'
+        type*
+          u'NS_ERROR_NOT_INITIALIZED'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_complex_function_names.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_complex_function_names.pysnap
new file mode 100644
index 0000000000..826ef89566
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_complex_function_names.pysnap
@@ -0,0 +1,38 @@
+---
+created: '2019-04-17T20:07:50.708385Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            function* (isolated function)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (non app frame)
+            function* (isolated function)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '9b78cced1eefcd0c655a0a3d8ce2cdd2'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function* (isolated function)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame*
+            function* (isolated function)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_no_filenames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_no_filenames.pysnap
new file mode 100644
index 0000000000..5ed94acf05
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_no_filenames.pysnap
@@ -0,0 +1,110 @@
+---
+created: '2019-04-17T20:02:28.820942Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '418120a66f7031923031f5c52aca0724'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame (non app frame)
+            function*
+              u'std::rt::lang_start'
+          frame (non app frame)
+            function*
+              u'std::rt::lang_start_internal'
+          frame*
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (non app frame)
+            function*
+              u'std::panicking::try::do_call'
+          frame (non app frame)
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame*
+            function*
+              u'log_demo::main'
+          frame*
+            function*
+              u'log::__private_api_log'
+          frame (non app frame)
+            function*
+              u'<sentry::integrations::log::Logger as log::Log>::log'
+          frame (non app frame)
+            function*
+              u'sentry::hub::Hub::with_active'
+          frame (non app frame)
+            function*
+              u'sentry::hub::Hub::with'
+          frame (non app frame)
+            function*
+              u'sentry::hub::Hub::with_active::{{closure}}'
+          frame (non app frame)
+            function (ignored unknown function)
+              u'<unknown>'
+          frame (non app frame)
+            function (ignored unknown function)
+              u'<redacted>'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '06f8f02638bc75df5a5c88712055ee5f'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame*
+            function*
+              u'std::rt::lang_start'
+          frame*
+            function*
+              u'std::rt::lang_start_internal'
+          frame*
+            function*
+              u'___rust_maybe_catch_panic'
+          frame*
+            function*
+              u'std::panicking::try::do_call'
+          frame*
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame*
+            function*
+              u'log_demo::main'
+          frame*
+            function*
+              u'log::__private_api_log'
+          frame*
+            function*
+              u'<sentry::integrations::log::Logger as log::Log>::log'
+          frame*
+            function*
+              u'sentry::hub::Hub::with_active'
+          frame*
+            function*
+              u'sentry::hub::Hub::with'
+          frame*
+            function*
+              u'sentry::hub::Hub::with_active::{{closure}}'
+          frame
+            function (ignored unknown function)
+              u'<unknown>'
+          frame
+            function (ignored unknown function)
+              u'<redacted>'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/node_exception_weird.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/node_exception_weird.pysnap
new file mode 100644
index 0000000000..1356a22c92
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/node_exception_weird.pysnap
@@ -0,0 +1,166 @@
+---
+created: '2019-04-17T20:07:50.747578Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '6e721dc6a6f261cc9ce994fe8dc2c917'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'hub'
+            filename (module takes precedence)
+              u'hub.js'
+            function*
+              u'Hub.Object.<anonymous>.Hub.withScope'
+          frame*
+            module*
+              u'onunhandledrejection.ts'
+            filename (module takes precedence)
+              u'onunhandledrejection.ts'
+            function*
+              u'null.<anonymous>'
+          frame (non app frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'Hub.mockConstructor [as captureException]'
+          frame (non app frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'Hub.<anonymous>'
+          frame (non app frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'finalReturnValue'
+          frame (non app frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'Hub.<anonymous>'
+          frame*
+            module*
+              u'hub.ts'
+            filename (module takes precedence)
+              u'hub.ts'
+            function*
+              u'Hub.Object.<anonymous>.Hub.captureException'
+          frame*
+            module*
+              u'hub'
+            filename (module takes precedence)
+              u'hub.js'
+            function*
+              u'Hub.Object.<anonymous>.Hub.invokeClient'
+          frame*
+            module*
+              u'baseclient.ts'
+            filename (module takes precedence)
+              u'baseclient.ts'
+            function*
+              u'NodeClient.Object.<anonymous>.BaseClient.captureException'
+          frame*
+            module*
+              u'backend.ts'
+            filename (module takes precedence)
+              u'backend.ts'
+            function*
+              u'NodeBackend.Object.<anonymous>.NodeBackend.eventFromException'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bla'
+--------------------------------------------------------------------------
+system:
+  hash: '4dc62db23de39a20e1274015ee07d202'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'hub'
+            filename (module takes precedence)
+              u'hub.js'
+            function*
+              u'Hub.Object.<anonymous>.Hub.withScope'
+          frame*
+            module*
+              u'onunhandledrejection.ts'
+            filename (module takes precedence)
+              u'onunhandledrejection.ts'
+            function*
+              u'null.<anonymous>'
+          frame*
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'Hub.mockConstructor [as captureException]'
+          frame*
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'Hub.<anonymous>'
+          frame*
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'finalReturnValue'
+          frame*
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'Hub.<anonymous>'
+          frame*
+            module*
+              u'hub.ts'
+            filename (module takes precedence)
+              u'hub.ts'
+            function*
+              u'Hub.Object.<anonymous>.Hub.captureException'
+          frame*
+            module*
+              u'hub'
+            filename (module takes precedence)
+              u'hub.js'
+            function*
+              u'Hub.Object.<anonymous>.Hub.invokeClient'
+          frame*
+            module*
+              u'baseclient.ts'
+            filename (module takes precedence)
+              u'baseclient.ts'
+            function*
+              u'NodeClient.Object.<anonymous>.BaseClient.captureException'
+          frame*
+            module*
+              u'backend.ts'
+            filename (module takes precedence)
+              u'backend.ts'
+            function*
+              u'NodeBackend.Object.<anonymous>.NodeBackend.eventFromException'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bla'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/python_exception_base.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/python_exception_base.pysnap
new file mode 100644
index 0000000000..5f64f2bcb6
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/python_exception_base.pysnap
@@ -0,0 +1,52 @@
+---
+created: '2019-04-17T20:07:50.757292Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'b4c29e2a2a2681fbaf9fd8f5b09e4154'
+  component:
+    app*
+      chained-exception*
+        exception*
+          stacktrace
+            frame (non app frame)
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value*
+            u'hello world'
+        exception*
+          stacktrace
+            frame (non app frame)
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value*
+            u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '669cb6664e0f5fed38665da04e464f7e'
+  component:
+    system*
+      chained-exception*
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value (ignored because stacktrace takes precedence)
+            u'hello world'
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value (ignored because stacktrace takes precedence)
+            u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/python_http_error.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/python_http_error.pysnap
new file mode 100644
index 0000000000..03a62808e8
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/python_http_error.pysnap
@@ -0,0 +1,75 @@
+---
+created: '2019-04-17T20:07:50.767883Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '86a7a80de1a3e572aeb20b28ae8d62c6'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry.utils.safe'
+            filename (module takes precedence)
+              u'safe.py'
+            function*
+              u'safe_execute'
+          frame*
+            module*
+              u'sentry.integrations.slack.notify_action'
+            filename (module takes precedence)
+              u'notify_action.py'
+            function*
+              u'send_notification'
+          frame (non app frame)
+            module*
+              u'requests.models'
+            filename (module takes precedence)
+              u'models.py'
+            function*
+              u'raise_for_status'
+        type*
+          u'HTTPError'
+        value (ignored because stacktrace takes precedence)
+          u'<int> Client Error: Too Many Requests for url: <url>'
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of app takes precedence)
+      message (exception of app takes precedence)
+        u'%s.process_error'
+--------------------------------------------------------------------------
+system:
+  hash: '07a725d19885057d03eccfa450a274f4'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry.utils.safe'
+            filename (module takes precedence)
+              u'safe.py'
+            function*
+              u'safe_execute'
+          frame*
+            module*
+              u'sentry.integrations.slack.notify_action'
+            filename (module takes precedence)
+              u'notify_action.py'
+            function*
+              u'send_notification'
+          frame*
+            module*
+              u'requests.models'
+            filename (module takes precedence)
+              u'models.py'
+            function*
+              u'raise_for_status'
+        type*
+          u'HTTPError'
+        value (ignored because stacktrace takes precedence)
+          u'<int> Client Error: Too Many Requests for url: <url>'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/react_native.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/react_native.pysnap
new file mode 100644
index 0000000000..bf54767f55
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/react_native.pysnap
@@ -0,0 +1,326 @@
+---
+created: '2019-04-17T20:02:28.878165Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '93c2d97697ba4aa34b91557c1c217641'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function*
+              u'value'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function*
+              u'flushedQueue'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function*
+              u'_inCall'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function*
+              u'flushedQueue'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'_lastFlush'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'_receiveRootNodeIDEvent'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'batchedUpdates'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'_batchedUpdates'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'fn'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'forEachAccumulated'
+          frame (non app frame)
+            function*
+              u'[native code] forEach'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'D'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'executeDispatch'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'invokeGuardedCallbackAndCatchFirstError'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'apply'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'apply'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function*
+              u'arguments'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function*
+              u'_receiveSignal'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function*
+              u'_performSideEffectsForTransition'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Components/Touchable/TouchableNativeFeedback.android'
+            filename (module takes precedence)
+              u'touchablenativefeedback.android.js'
+            function*
+              u'this'
+          frame*
+            module*
+              u'App'
+            filename (module takes precedence)
+              u'app.js'
+            function*
+              u'onPress'
+          frame*
+            module*
+              u'App'
+            filename (module takes precedence)
+              u'app.js'
+            function*
+              u'Button'
+        type*
+          u'TypeError'
+        value (ignored because stacktrace takes precedence)
+          u"undefined is not a function (evaluating '({}).invalidFunction()')"
+--------------------------------------------------------------------------
+system:
+  hash: '53f5eee7a48d6754dcc87aee2be66195'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function*
+              u'value'
+          frame*
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function*
+              u'flushedQueue'
+          frame*
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function*
+              u'_inCall'
+          frame*
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function*
+              u'flushedQueue'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'_lastFlush'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'_receiveRootNodeIDEvent'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'batchedUpdates'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'_batchedUpdates'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'fn'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'forEachAccumulated'
+          frame*
+            function*
+              u'[native code] forEach'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'D'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'executeDispatch'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'invokeGuardedCallbackAndCatchFirstError'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'apply'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'apply'
+          frame*
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function*
+              u'arguments'
+          frame*
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function*
+              u'_receiveSignal'
+          frame*
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function*
+              u'_performSideEffectsForTransition'
+          frame*
+            module*
+              u'react-native/Libraries/Components/Touchable/TouchableNativeFeedback.android'
+            filename (module takes precedence)
+              u'touchablenativefeedback.android.js'
+            function*
+              u'this'
+          frame*
+            module*
+              u'App'
+            filename (module takes precedence)
+              u'app.js'
+            function*
+              u'onPress'
+          frame*
+            module*
+              u'App'
+            filename (module takes precedence)
+              u'app.js'
+            function*
+              u'Button'
+        type*
+          u'TypeError'
+        value (ignored because stacktrace takes precedence)
+          u"undefined is not a function (evaluating '({}).invalidFunction()')"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_cocoa.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_cocoa.pysnap
new file mode 100644
index 0000000000..d6130c38c0
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_cocoa.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-04-17T20:02:28.888856Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'eb416f98479efa56a77c524602dc9979'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'bar.m'
+        frame (non app frame)
+          filename*
+            u'baz.m'
+--------------------------------------------------------------------------
+system:
+  hash: '1df786c8c266506e1acb6669c8df5154'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'bar.m'
+        frame*
+          filename*
+            u'baz.m'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_collapse_recursion.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_collapse_recursion.pysnap
new file mode 100644
index 0000000000..9a166a0c41
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_collapse_recursion.pysnap
@@ -0,0 +1,114 @@
+---
+created: '2019-04-17T20:02:28.900220Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'main'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'normalFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'throwError'
+--------------------------------------------------------------------------
+system:
+  hash: '894c3489e2ade384dc107bca6829d134'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'main'
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'normalFunc'
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (ignored due to recursion)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (ignored due to recursion)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'throwError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_compute_hashes.pysnap
new file mode 100644
index 0000000000..359bf9c738
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_compute_hashes.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-04-17T20:07:50.821045Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '1effb24729ae4c43efa36b460511136a'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+--------------------------------------------------------------------------
+system:
+  hash: '659ad79e2e70c822d30a53d7d889529e'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame*
+          filename*
+            u'bar.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_discards_seemingly_useless_stack.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_discards_seemingly_useless_stack.pysnap
new file mode 100644
index 0000000000..a32e1cddaf
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_discards_seemingly_useless_stack.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-04-17T20:02:28.918152Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame
+          filename (ignored because frame points to a URL)
+            u'foo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_does_not_discard_non_urls.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_does_not_discard_non_urls.pysnap
new file mode 100644
index 0000000000..c9a366d980
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_does_not_discard_non_urls.pysnap
@@ -0,0 +1,22 @@
+---
+created: '2019-04-17T20:07:50.840132Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo'
+--------------------------------------------------------------------------
+system:
+  hash: 'acbd18db4cc2f85cedef654fccc4a4d8'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_does_not_group_different_js_errors.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_does_not_group_different_js_errors.pysnap
new file mode 100644
index 0000000000..10256f1492
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_does_not_group_different_js_errors.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-04-17T20:02:28.936612Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'index.js'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame
+          filename (ignored because frame points to a URL)
+            u'index.js'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_excludes_single_frame_urls.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_excludes_single_frame_urls.pysnap
new file mode 100644
index 0000000000..620c61752f
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_excludes_single_frame_urls.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-04-17T20:07:50.858441Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'<unknown module>'
+          filename (ignored because frame points to a URL)
+            u''
+--------------------------------------------------------------------------
+system:
+  hash: 'cd2a9fd0cdaa8cd55ed22b101fc65882'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'<unknown module>'
+          filename (ignored because frame points to a URL)
+            u''
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_hash_without_system_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_hash_without_system_frames.pysnap
new file mode 100644
index 0000000000..fe1f448275
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_hash_without_system_frames.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-04-17T20:02:28.958253Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '1effb24729ae4c43efa36b460511136a'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+--------------------------------------------------------------------------
+system:
+  hash: '659ad79e2e70c822d30a53d7d889529e'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame*
+          filename*
+            u'bar.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_ignores_singular_anonymous_frame.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_ignores_singular_anonymous_frame.pysnap
new file mode 100644
index 0000000000..216427ffce
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_ignores_singular_anonymous_frame.pysnap
@@ -0,0 +1,42 @@
+---
+created: '2019-04-17T20:07:50.878689Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (anonymous filename discarded)
+            u'<anonymous>'
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'dojo.js'
+          function*
+            u'c'
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'dojo.js'
+          function*
+            u'Object._createDocumentViewModel'
+--------------------------------------------------------------------------
+system:
+  hash: 'e61225523929cf925f6ac3b1f7f26d85'
+  component:
+    system*
+      stacktrace*
+        frame
+          filename (anonymous filename discarded)
+            u'<anonymous>'
+        frame*
+          filename (ignored because frame points to a URL)
+            u'dojo.js'
+          function*
+            u'c'
+        frame*
+          filename (ignored because frame points to a URL)
+            u'dojo.js'
+          function*
+            u'Object._createDocumentViewModel'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_rust.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_rust.pysnap
new file mode 100644
index 0000000000..75798f4f29
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_rust.pysnap
@@ -0,0 +1,68 @@
+---
+created: '2019-04-17T20:02:29.034332Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'eb87c1031dba55b67df86fb9fff59dc6'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            function*
+              u'_main'
+          frame (non app frame)
+            function*
+              u'std::rt::lang_start_internal'
+          frame (non app frame)
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (non app frame)
+            function*
+              u'std::panicking::try::do_call'
+          frame (non app frame)
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule)
+            function*
+              u'log_demo::main'
+          frame (non app frame)
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: 'e0b4eea234ff891472cb927c00153bbe'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame*
+            function*
+              u'std::rt::lang_start_internal'
+          frame*
+            function*
+              u'___rust_maybe_catch_panic'
+          frame*
+            function*
+              u'std::panicking::try::do_call'
+          frame*
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule)
+            function*
+              u'log_demo::main'
+          frame*
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_rust2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_rust2.pysnap
new file mode 100644
index 0000000000..c0e3f17ce5
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_rust2.pysnap
@@ -0,0 +1,68 @@
+---
+created: '2019-04-17T20:02:29.084952Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'eb87c1031dba55b67df86fb9fff59dc6'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            function*
+              u'_main'
+          frame (non app frame)
+            function*
+              u'std::rt::lang_start_internal'
+          frame (non app frame)
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (non app frame)
+            function*
+              u'std::panicking::try::do_call'
+          frame (non app frame)
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule)
+            function*
+              u'log_demo::main'
+          frame (non app frame)
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '9b33b65a645c66239cafcd276fcd0659'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame*
+            function*
+              u'std::rt::lang_start_internal'
+          frame (ignored by grouping enhancement rule)
+            function*
+              u'___rust_maybe_catch_panic'
+          frame*
+            function*
+              u'std::panicking::try::do_call'
+          frame*
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule)
+            function*
+              u'log_demo::main'
+          frame (ignored by grouping enhancement rule)
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_with_minimal_app_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_with_minimal_app_frames.pysnap
new file mode 100644
index 0000000000..08f0c91186
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/stacktrace_with_minimal_app_frames.pysnap
@@ -0,0 +1,88 @@
+---
+created: '2019-04-17T20:07:50.980149Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '1effb24729ae4c43efa36b460511136a'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+--------------------------------------------------------------------------
+system:
+  hash: '659ad79e2e70c822d30a53d7d889529e'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame*
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/template_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/template_compute_hashes.pysnap
new file mode 100644
index 0000000000..ab79564b37
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/template_compute_hashes.pysnap
@@ -0,0 +1,14 @@
+---
+created: '2019-04-17T20:07:50.987961Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '826f66ef602835f68030c04c634df320'
+  component:
+    default*
+      template*
+        filename*
+          u'foo.html'
+        context-line*
+          u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/threads_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/threads_compute_hashes.pysnap
new file mode 100644
index 0000000000..7e7d2501bd
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/threads_compute_hashes.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-04-17T20:02:29.122896Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (threads of system takes precedence)
+      threads (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'baz.c'
+            function*
+              u'main'
+--------------------------------------------------------------------------
+system:
+  hash: '1a11687556cf74559f0ae90b1c87e2fd'
+  component:
+    system*
+      threads*
+        stacktrace*
+          frame*
+            filename*
+              u'baz.c'
+            function*
+              u'main'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/threads_no_hash.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/threads_no_hash.pysnap
new file mode 100644
index 0000000000..f40237c38d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/threads_no_hash.pysnap
@@ -0,0 +1,19 @@
+---
+created: '2019-04-17T20:02:29.134183Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      threads (ignored because contains 2 threads)
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      threads (ignored because contains 2 threads)
