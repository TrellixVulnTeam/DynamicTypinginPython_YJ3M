commit 04a137febe36a502d7fb960b63035bffdbea28f4
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Apr 12 12:41:59 2018 -0700

    feat(ui): Add "saveOnBlur: false" override for individual fields (#7993)
    
    * add PanelAlert to non-saveOnBlur fields
    * change slug input fields to not save on blur
    * re-enable team settings test with an extra await

diff --git a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
index 0906daca65..755156927a 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
@@ -16,7 +16,13 @@ const formGroups = [
         type: 'string',
         required: true,
         label: t('Name'),
-        help: t('A unique ID used to identify this organization.'),
+        help: t('A unique ID used to identify this organization'),
+
+        saveOnBlur: false,
+        saveMessageAlertType: 'info',
+        saveMessage: t(
+          'You will be redirected to the new organization slug after saving'
+        ),
       },
       {
         name: 'name',
@@ -36,7 +42,7 @@ const formGroups = [
         name: 'isEarlyAdopter',
         type: 'boolean',
         label: t('Early Adopter'),
-        help: t("Opt-in to new features before they're released to the public."),
+        help: t("Opt-in to new features before they're released to the public"),
       },
     ],
   },
@@ -54,7 +60,7 @@ const formGroups = [
           (initialData.availableRoles &&
             initialData.availableRoles.map(r => [r.id, r.name])) ||
           [],
-        help: t('The default role new members will receive.'),
+        help: t('The default role new members will receive'),
         disabled: ({access}) => !access.has('org:admin'),
       },
       {
@@ -62,7 +68,7 @@ const formGroups = [
         type: 'boolean',
         required: true,
         label: t('Open Membership'),
-        help: t('Allow organization members to freely join or leave any team.'),
+        help: t('Allow organization members to freely join or leave any team'),
       },
     ],
   },
@@ -74,7 +80,7 @@ const formGroups = [
         name: 'require2FA',
         type: 'boolean',
         label: t('Require Two-Factor Authentication'),
-        help: t('Require two-factor authentication for all members.'),
+        help: t('Require two-factor authentication for all members'),
         confirm: t(
           'Enabling this feature will disable all accounts without two-factor authentication. It will also send an email to all users to enable two-factor authentication. Do you want to continue?'
         ),
@@ -85,7 +91,7 @@ const formGroups = [
         type: 'boolean',
 
         label: t('Allow Shared Issues'),
-        help: t('Enable sharing of limited details on issues to anonymous users.'),
+        help: t('Enable sharing of limited details on issues to anonymous users'),
       },
       {
         name: 'enhancedPrivacy',
@@ -93,21 +99,21 @@ const formGroups = [
 
         label: t('Enhanced Privacy'),
         help: t(
-          'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.'
+          'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications'
         ),
       },
       {
         name: 'dataScrubber',
         type: 'boolean',
         label: t('Require Data Scrubber'),
-        help: t('Require server-side data scrubbing be enabled for all projects.'),
+        help: t('Require server-side data scrubbing be enabled for all projects'),
       },
       {
         name: 'dataScrubberDefaults',
         type: 'boolean',
         label: t('Require Using Default Scrubbers'),
         help: t(
-          'Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects.'
+          'Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects'
         ),
       },
       {
@@ -135,7 +141,7 @@ const formGroups = [
           'Field names which data scrubbers should ignore. Separate multiple entries with a newline.'
         ),
         extraHelp: t(
-          'Note: These fields will be used in addition to project specific fields.'
+          'Note: These fields will be used in addition to project specific fields'
         ),
         getValue: val => extractMultilineFields(val),
         setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
@@ -145,7 +151,7 @@ const formGroups = [
         type: 'boolean',
         label: t('Prevent Storing of IP Addresses'),
         help: t(
-          'Preventing IP addresses from being stored for new events on all projects.'
+          'Preventing IP addresses from being stored for new events on all projects'
         ),
       },
     ],
diff --git a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
index 816f62ab66..87970a8922 100644
--- a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
@@ -58,6 +58,10 @@ export const fields = {
     label: t('Name'),
     placeholder: t('my-service-name'),
     help: t('A unique ID used to identify this project'),
+
+    saveOnBlur: false,
+    saveMessageAlertType: 'info',
+    saveMessage: t('You will be redirected to the new project slug after saving'),
   },
   team: {
     name: 'team',
@@ -98,6 +102,15 @@ export const fields = {
       }
       return tn('%d hour', '%d hours', val);
     },
+    saveOnBlur: false,
+    saveMessage: tct(
+      '[Caution]: Enabling auto resolve will immediately resolve anything that has ' +
+        'not been seen within this period of time. There is no undo!',
+      {
+        Caution: <strong>Caution</strong>,
+      }
+    ),
+    saveMessageAlertType: 'warning',
   },
 
   dataScrubber: {
@@ -191,13 +204,13 @@ export const fields = {
     placeholder: t('X-Sentry-Token'),
     label: t('Security Token Header'),
     help: t(
-      'Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended.'
+      'Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended'
     ),
   },
   verifySSL: {
     name: 'verifySSL',
     type: 'boolean',
     label: t('Verify TLS/SSL'),
-    help: t('Outbound requests will verify TLS (sometimes known as SSL) connections.'),
+    help: t('Outbound requests will verify TLS (sometimes known as SSL) connections'),
   },
 };
diff --git a/src/sentry/static/sentry/app/data/forms/teamSettingsFields.jsx b/src/sentry/static/sentry/app/data/forms/teamSettingsFields.jsx
index 95eb39b74a..1605f56caa 100644
--- a/src/sentry/static/sentry/app/data/forms/teamSettingsFields.jsx
+++ b/src/sentry/static/sentry/app/data/forms/teamSettingsFields.jsx
@@ -17,6 +17,10 @@ const formGroups = [
         label: t('Name'),
         placeholder: 'e.g. api-team',
         help: t('A unique ID used to identify the team'),
+
+        saveOnBlur: false,
+        saveMessageAlertType: 'info',
+        saveMessage: t('You will be redirected to the new team slug after saving'),
       },
       {
         name: 'name',
diff --git a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
index 3acecbc9dc..80e61bd75e 100644
--- a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
@@ -25,17 +25,6 @@ import TextBlock from './settings/components/text/textBlock';
 import TextField from './settings/components/forms/textField';
 import recreateRoute from '../utils/recreateRoute';
 
-const AutoResolveFooter = () => (
-  <PanelAlert type="warning">
-    <strong>
-      {t(
-        'Note: Enabling auto resolve will immediately resolve anything that has ' +
-          'not been seen within this period of time. There is no undo!'
-      )}
-    </strong>
-  </PanelAlert>
-);
-
 class ProjectGeneralSettings extends AsyncView {
   static propTypes = {
     onChangeSlug: PropTypes.func,
@@ -273,7 +262,6 @@ class ProjectGeneralSettings extends AsyncView {
             {...jsonFormProps}
             title={t('Event Settings')}
             fields={[fields.resolveAge]}
-            renderFooter={() => <AutoResolveFooter />}
           />
 
           <JsonForm
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
index 0feaf8fac2..ee533b1fd9 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
@@ -32,7 +32,14 @@ export default class FieldFromConfig extends React.Component {
       help: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
       visible: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
       disabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
+      /**
+       * Should show a "return key" icon in input?
+       */
       showReturnButton: PropTypes.bool,
+      /**
+       * Iff false, disable saveOnBlur for field, instead show a save/cancel button
+       */
+      saveOnBlur: PropTypes.bool,
       getValue: PropTypes.func,
       setValue: PropTypes.func,
     }).isRequired,
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
index 9729fea332..de624eca0e 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
@@ -5,12 +5,16 @@ import styled from 'react-emotion';
 
 import {defined} from '../../../../../utils';
 import {pulse, fadeOut} from '../../../../../styles/animations';
+import {t} from '../../../../../locale';
+import Button from '../../../../../components/buttons/button';
 import Field from '../field';
 import FieldControl from '../field/fieldControl';
 import FormState from '../../../../../components/forms/state';
 import InlineSvg from '../../../../../components/inlineSvg';
+import PanelAlert from '../../../../../components/panels/panelAlert';
 import Spinner from '../spinner';
 import returnButton from '../returnButton';
+import space from '../../../../../styles/space';
 
 const FormFieldErrorReason = styled.div`
   color: ${p => p.theme.redDark};
@@ -138,9 +142,21 @@ class FormField extends React.Component {
     style: PropTypes.object,
 
     /**
-     * Should show a "return key" icon in input?
+     * Iff false, disable saveOnBlur for field, instead show a save/cancel button
      */
-    showReturnButton: PropTypes.bool,
+    saveOnBlur: PropTypes.bool,
+
+    /**
+     * If saveOnBlur is false, then an optional saveMessage can be used to let
+     * the user know what's going to happen when they save a field.
+     */
+    saveMessage: PropTypes.node,
+
+    /**
+     * The "alert type" to use for the save message.
+     * Probably only "info"/"warning" should be used.
+     */
+    saveMessageAlertType: PropTypes.oneOf(['', 'info', 'warning', 'success', 'error']),
 
     /**
      * Should hide error message?
@@ -169,11 +185,6 @@ class FormField extends React.Component {
     form: PropTypes.object,
   };
 
-  constructor(props) {
-    super(props);
-    this.state = {showReturnButton: false};
-  }
-
   componentDidMount() {
     // Tell model about this field's props
     this.getModel().setFieldDescriptor(this.props.name, this.props);
@@ -215,8 +226,6 @@ class FormField extends React.Component {
     let {value, event} = getValueFromEvent(...args);
     let model = this.getModel();
 
-    if (this.props.showReturnButton) this.setState({showReturnButton: true});
-
     if (onChange) {
       onChange(value, event);
     }
@@ -237,7 +246,7 @@ class FormField extends React.Component {
     }
 
     // Always call this, so model can decide what to do
-    model.handleFieldBlur(name, value);
+    model.handleBlurField(name, value);
   };
 
   /**
@@ -249,7 +258,7 @@ class FormField extends React.Component {
     let model = this.getModel();
 
     if (event.key === 'Enter') {
-      model.handleFieldBlur(name, value);
+      model.handleBlurField(name, value);
     }
 
     if (onKeyDown) {
@@ -257,70 +266,139 @@ class FormField extends React.Component {
     }
   };
 
+  /**
+   * Handle saving an individual field via UI button
+   */
+  handleSaveField = (...args) => {
+    let {name} = this.props;
+    let model = this.getModel();
+
+    model.handleSaveField(name, model.getValue(name));
+  };
+
+  handleCancelField = (...args) => {
+    let {name} = this.props;
+    let model = this.getModel();
+
+    model.handleCancelSaveField(name);
+  };
+
   render() {
     let {
       name,
-      showReturnButton,
       hideErrorMessage,
       flexibleControlStateSize,
+      saveOnBlur,
+      saveMessage,
+      saveMessageAlertType,
       ...props
     } = this.props;
     let id = this.getId();
     let model = this.getModel();
+    let saveOnBlurFieldOverride = typeof saveOnBlur !== 'undefined' && !saveOnBlur;
 
     return (
-      <Field id={id} name={name} {...props}>
-        {({alignRight, inline, disabled, disabledReason}) => (
-          <FieldControl
-            disabled={disabled}
-            disabledReason={disabledReason}
-            inline={inline}
-            alignRight={alignRight}
-            flexibleControlStateSize={flexibleControlStateSize}
-            controlState={<ControlState model={model} name={name} />}
-            errorState={
+      <React.Fragment>
+        <Field id={id} name={name} {...props}>
+          {({alignRight, inline, disabled, disabledReason}) => (
+            <FieldControl
+              disabled={disabled}
+              disabledReason={disabledReason}
+              inline={inline}
+              alignRight={alignRight}
+              flexibleControlStateSize={flexibleControlStateSize}
+              controlState={<ControlState model={model} name={name} />}
+              errorState={
+                <Observer>
+                  {() => {
+                    let error = this.getError();
+                    let shouldShowErrorMessage = error && !hideErrorMessage;
+                    if (!shouldShowErrorMessage) return null;
+                    return <FormFieldErrorReason>{error}</FormFieldErrorReason>;
+                  }}
+                </Observer>
+              }
+            >
               <Observer>
                 {() => {
                   let error = this.getError();
-                  let shouldShowErrorMessage = error && !hideErrorMessage;
-                  if (!shouldShowErrorMessage) return null;
-                  return <FormFieldErrorReason>{error}</FormFieldErrorReason>;
+                  let value = model.getValue(name);
+                  let showReturnButton = model.getFieldState(name, 'showReturnButton');
+
+                  return (
+                    <React.Fragment>
+                      <this.props.children
+                        innerRef={this.handleInputMount}
+                        {...{
+                          ...this.props,
+                          id,
+                          onKeyDown: this.handleKeyDown,
+                          onChange: this.handleChange,
+                          onBlur: this.handleBlur,
+                          // Fixes react warnings about input switching from controlled to uncontrolled
+                          // So force to empty string for null values
+                          value: value === null ? '' : value,
+                          error,
+                          disabled,
+                        }}
+                        initialData={model.initialData}
+                      />
+                      {showReturnButton && <ReturnButtonStyled />}
+                    </React.Fragment>
+                  );
                 }}
               </Observer>
-            }
-          >
-            <Observer>
-              {() => {
-                let error = this.getError();
-                let value = model.getValue(this.props.name);
-
-                return (
-                  <this.props.children
-                    innerRef={this.handleInputMount}
-                    {...{
-                      ...this.props,
-                      id,
-                      onKeyDown: this.handleKeyDown,
-                      onChange: this.handleChange,
-                      onBlur: this.handleBlur,
-                      // Fixes react warnings about input switching from controlled to uncontrolled
-                      // So force to empty string for null values
-                      value: value === null ? '' : value,
-                      error,
-                      disabled,
-                    }}
-                    initialData={model.initialData}
-                  />
-                );
-              }}
-            </Observer>
-
-            {showReturnButton && this.state.showReturnButton && <ReturnButtonStyled />}
-          </FieldControl>
+            </FieldControl>
+          )}
+        </Field>
+        {saveOnBlurFieldOverride && (
+          <Observer>
+            {() => {
+              let showFieldSave = model.getFieldState(name, 'showSave');
+
+              if (!showFieldSave) return null;
+
+              return (
+                <PanelAlert type={saveMessageAlertType}>
+                  <MessageAndActions>
+                    <div>{saveMessage}</div>
+                    <Actions>
+                      <CancelButton onClick={this.handleCancelField}>
+                        {t('Cancel')}
+                      </CancelButton>
+                      <SaveButton priority="primary" onClick={this.handleSaveField}>
+                        {t('Save')}
+                      </SaveButton>
+                    </Actions>
+                  </MessageAndActions>
+                </PanelAlert>
+              );
+            }}
+          </Observer>
         )}
-      </Field>
+      </React.Fragment>
     );
   }
 }
 
 export default FormField;
+
+const MessageAndActions = styled('div')`
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+`;
+
+const Actions = styled('div')`
+  height: 0;
+  display: flex;
+  align-items: center;
+  justify-content: flex-end;
+`;
+
+const CancelButton = styled(Button)`
+  margin-left: ${space(2)};
+`;
+const SaveButton = styled(Button)`
+  margin-left: ${space(1)};
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
index 7902cfa6f4..c68c235b1b 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
@@ -7,6 +7,7 @@ import {
   saveOnBlurUndoMessage,
 } from '../../../../actionCreators/indicator';
 import {defined} from '../../../../utils';
+import {t} from '../../../../locale';
 import FormState from '../../../../components/forms/state';
 
 class FormModel {
@@ -255,14 +256,48 @@ class FormModel {
       this.options.onFieldChange(id, value);
     }
 
+    this.updateErrorState(id);
+    this.updateShowSaveState(id, value);
+    this.updateShowReturnButtonState(id, value);
+  }
+  @action
+  updateErrorState(id) {
+    let fieldIsRequiredMessage = t('Field is required');
+    let isValid = this.isValidRequiredField(id);
     // specifically check for empty string, 0 should be allowed
-    if (!this.isValidRequiredField(id)) {
-      this.setError(id, 'Field is required');
-    } else {
-      this.setError(id, false);
-    }
+    if (isValid && !this.errors.get(id)) return;
+    if (!isValid && this.errors.get(id) === fieldIsRequiredMessage) return;
+
+    this.setError(id, isValid ? false : fieldIsRequiredMessage);
   }
 
+  @action
+  updateShowSaveState(id, value) {
+    let isValueChanged = value !== this.initialData[id];
+    // Update field state to "show save" if save on blur is disabled for this field
+    // (only if contents of field differs from initial value)
+    let saveOnBlurFieldOverride = this.getDescriptor(id, 'saveOnBlur');
+    if (typeof saveOnBlurFieldOverride === 'undefined' || saveOnBlurFieldOverride) return;
+    if (this.getFieldState(id, 'showSave') === isValueChanged) return;
+
+    this.setFieldState(id, 'showSave', isValueChanged);
+  }
+
+  @action
+  updateShowReturnButtonState(id, value) {
+    let isValueChanged = value !== this.initialData[id];
+    let shouldShowReturnButton = this.getDescriptor(id, 'showReturnButton');
+
+    if (!shouldShowReturnButton) return;
+    // Only update state if state has changed
+    if (this.getFieldState(id, 'showReturnButton') === isValueChanged) return;
+
+    this.setFieldState(id, 'showReturnButton', isValueChanged);
+  }
+
+  /**
+   * Changes form values to previous saved state
+   */
   @action
   undo() {
     // Always have initial data snapshot
@@ -275,7 +310,7 @@ class FormModel {
   }
 
   /**
-   * Attempts to save entire form
+   * Attempts to save entire form to server and saves a snapshot for undos
    */
   @action
   saveForm() {
@@ -322,6 +357,41 @@ class FormModel {
     return request;
   }
 
+  /**
+   * Attempts to save field and show undo message if necessary.
+   * Calls submit handlers.
+   */
+  @action
+  saveField(id, currentValue) {
+    let oldValue = this.initialData[id];
+    let savePromise = this.saveFieldRequest(id, currentValue);
+
+    if (!savePromise) return null;
+
+    return savePromise
+      .then(resp => {
+        let newValue = this.getValue(id);
+        let change = {old: oldValue, new: newValue};
+
+        // Only use `allowUndo` option if explicity defined
+        if (typeof this.options.allowUndo === 'undefined' || this.options.allowUndo) {
+          saveOnBlurUndoMessage(change, this, id);
+        }
+
+        if (this.options.onSubmitSuccess) {
+          this.options.onSubmitSuccess(resp, this, id, change);
+        }
+
+        return resp;
+      })
+      .catch(error => {
+        if (this.options.onSubmitError) {
+          this.options.onSubmitError(error, this, id);
+        }
+        return {};
+      });
+  }
+
   /**
    * Saves a field with new value
    *
@@ -332,7 +402,7 @@ class FormModel {
    * If failed then: 1) reset save state, 2) add error state
    */
   @action
-  saveField(id, currentValue) {
+  saveFieldRequest(id, currentValue) {
     let initialValue = this.initialData[id];
 
     // Don't save if field hasn't changed
@@ -424,37 +494,36 @@ class FormModel {
    * If `saveOnBlur` is set then call `saveField` and handle form callbacks accordingly
    */
   @action
-  handleFieldBlur(id, currentValue) {
+  handleBlurField(id, currentValue) {
     // Nothing to do if `saveOnBlur` is not on
     if (!this.options.saveOnBlur) return null;
 
-    let oldValue = this.initialData[id];
-    let savePromise = this.saveField(id, currentValue);
-
-    if (!savePromise) return null;
-
-    return savePromise
-      .then(resp => {
-        let newValue = this.getValue(id);
-        let change = {old: oldValue, new: newValue};
+    // Fields can individually set `saveOnBlur` to `false` (note this is ignored when `undefined`)
+    let saveOnBlurFieldOverride = this.getDescriptor(id, 'saveOnBlur');
+    if (typeof saveOnBlurFieldOverride !== 'undefined' && !saveOnBlurFieldOverride) {
+      return null;
+    }
 
-        // Only use `allowUndo` option if explicity defined
-        if (typeof this.options.allowUndo === 'undefined' || this.options.allowUndo) {
-          saveOnBlurUndoMessage(change, this, id);
-        }
+    return this.saveField(id, currentValue);
+  }
 
-        if (this.options.onSubmitSuccess) {
-          this.options.onSubmitSuccess(resp, this, id, change);
-        }
+  /**
+   * This is called when a field does not saveOnBlur and has an individual "Save" button
+   */
+  @action
+  handleSaveField(id, currentValue) {
+    return this.saveField(id, currentValue).then(() => {
+      this.setFieldState(id, 'showSave', false);
+    });
+  }
 
-        return resp;
-      })
-      .catch(error => {
-        if (this.options.onSubmitError) {
-          this.options.onSubmitError(error, this, id);
-        }
-        return {};
-      });
+  /**
+   * Cancel "Save Field" state and revert form value back to initial value
+   */
+  @action
+  handleCancelSaveField(id) {
+    this.setValue(id, this.initialData[id]);
+    this.setFieldState(id, 'showSave', false);
   }
 
   @action
diff --git a/tests/js/spec/views/organizationGeneralSettingsView.spec.jsx b/tests/js/spec/views/organizationGeneralSettingsView.spec.jsx
index a68ce95b06..e8ad03ded0 100644
--- a/tests/js/spec/views/organizationGeneralSettingsView.spec.jsx
+++ b/tests/js/spec/views/organizationGeneralSettingsView.spec.jsx
@@ -1,9 +1,11 @@
+import {browserHistory} from 'react-router';
 import React from 'react';
+
 import {mount} from 'enzyme';
-import {browserHistory} from 'react-router';
+import OrganizationGeneralSettingsView from 'app/views/settings/organization/general/organizationGeneralSettingsView';
 import recreateRoute from 'app/utils/recreateRoute';
 
-import OrganizationGeneralSettingsView from 'app/views/settings/organization/general/organizationGeneralSettingsView';
+import {mountWithTheme} from '../../../helpers';
 
 jest.mock('jquery');
 jest.mock('app/utils/recreateRoute');
@@ -71,7 +73,7 @@ describe('OrganizationGeneralSettingsView', function() {
   });
 
   it('changes org slug and redirects to new slug', async function() {
-    let wrapper = mount(
+    let wrapper = mountWithTheme(
       <OrganizationGeneralSettingsView params={{orgId: org.slug}} />,
       TestStubs.routerContext()
     );
@@ -90,7 +92,7 @@ describe('OrganizationGeneralSettingsView', function() {
       .simulate('change', {target: {value: 'new-slug'}})
       .simulate('blur');
 
-    wrapper.update();
+    wrapper.find('SaveButton').simulate('click');
     expect(mock).toHaveBeenCalledWith(
       ENDPOINT,
       expect.objectContaining({
@@ -295,6 +297,8 @@ describe('OrganizationGeneralSettingsView', function() {
     wrapper.update();
     wrapper.find('Switch[name="require2FA"]').simulate('click');
 
+    // hide console.error for this test
+    sinon.stub(console, 'error');
     // Confirm but has API failure
     wrapper
       .find(
@@ -305,5 +309,7 @@ describe('OrganizationGeneralSettingsView', function() {
     await tick();
     wrapper.update();
     expect(wrapper.find('Switch[name="require2FA"]').prop('isActive')).toBe(false);
+    // eslint-disable-next-line no-console
+    console.error.restore();
   });
 });
diff --git a/tests/js/spec/views/projectGeneralSettings.spec.jsx b/tests/js/spec/views/projectGeneralSettings.spec.jsx
index b7bd3f005d..06e239c7d7 100644
--- a/tests/js/spec/views/projectGeneralSettings.spec.jsx
+++ b/tests/js/spec/views/projectGeneralSettings.spec.jsx
@@ -205,7 +205,9 @@ describe('projectGeneralSettings', function() {
       .simulate('change', {target: {value: 'new-project'}})
       .simulate('blur');
 
-    expect(putMock).toHaveBeenCalled();
+    // Slug does not save on blur
+    expect(putMock).not.toHaveBeenCalled();
+    wrapper.find('SaveButton').simulate('click');
 
     await tick();
     // :(
@@ -221,4 +223,96 @@ describe('projectGeneralSettings', function() {
     wrapper.update();
     expect(wrapper.find('Input[name="slug"]').prop('value')).toBe('new-project');
   });
+
+  describe('Non-"save on blur" Field', function() {
+    let wrapper;
+
+    beforeEach(function() {
+      let params = {orgId: org.slug, projectId: project.slug};
+      ProjectsStore.loadInitialData([project]);
+      putMock = MockApiClient.addMockResponse({
+        url: `/projects/${org.slug}/${project.slug}/`,
+        method: 'PUT',
+        body: {
+          ...project,
+          slug: 'new-project',
+        },
+      });
+      wrapper = mountWithTheme(
+        <ProjectContext orgId={org.slug} projectId={project.slug}>
+          <ProjectGeneralSettings
+            routes={[]}
+            location={routerContext.context.location}
+            params={params}
+          />
+        </ProjectContext>,
+        routerContext
+      );
+    });
+
+    it('can cancel unsaved changes for a field', async function() {
+      await tick();
+      wrapper.update();
+      // Initially does not have "Cancel" button
+      expect(wrapper.find('MessageAndActions CancelButton')).toHaveLength(0);
+      // Has initial value
+      expect(wrapper.find('input[name="resolveAge"]').prop('value')).toBe(19);
+
+      // Change value
+      wrapper
+        .find('input[name="resolveAge"]')
+        .simulate('input', {target: {value: 12}})
+        .simulate('mouseUp');
+
+      // Has updated value
+      expect(wrapper.find('input[name="resolveAge"]').prop('value')).toBe(12);
+      // Has "Cancel" button visible
+      expect(wrapper.find('MessageAndActions CancelButton')).toHaveLength(1);
+
+      // Click cancel
+      wrapper.find('MessageAndActions CancelButton').simulate('click');
+      // Cancel row should disappear
+      expect(wrapper.find('MessageAndActions CancelButton')).toHaveLength(0);
+      // Value should be reverted
+      expect(wrapper.find('input[name="resolveAge"]').prop('value')).toBe(19);
+      // PUT should not be called
+      expect(putMock).not.toHaveBeenCalled();
+    });
+
+    it('saves when value is changed and "Save" clicked', async function() {
+      await tick();
+      wrapper.update();
+      // Initially does not have "Save" button
+      expect(wrapper.find('MessageAndActions SaveButton')).toHaveLength(0);
+
+      // Change value
+      wrapper
+        .find('input[name="resolveAge"]')
+        .simulate('input', {target: {value: 12}})
+        .simulate('mouseUp');
+
+      // Has "Save" button visible
+      expect(wrapper.find('MessageAndActions SaveButton')).toHaveLength(1);
+
+      // Should not have put mock called yet
+      expect(putMock).not.toHaveBeenCalled();
+
+      // Click "Save"
+      wrapper.find('MessageAndActions SaveButton').simulate('click');
+      // API endpoint should have been called
+      expect(putMock).toHaveBeenCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          data: {
+            resolveAge: 12,
+          },
+        })
+      );
+
+      // Should hide "Save" button after saving
+      await tick();
+      wrapper.update();
+      expect(wrapper.find('MessageAndActions SaveButton')).toHaveLength(0);
+    });
+  });
 });
diff --git a/tests/js/spec/views/teamSettings.spec.jsx b/tests/js/spec/views/teamSettings.spec.jsx
index a9cc49c0b1..8d5ad27938 100644
--- a/tests/js/spec/views/teamSettings.spec.jsx
+++ b/tests/js/spec/views/teamSettings.spec.jsx
@@ -5,6 +5,7 @@ import {mount, shallow} from 'enzyme';
 import TeamSettings from 'app/views/settings/team/teamSettings.old';
 import TeamStore from 'app/stores/teamStore';
 import NewTeamSettings from 'app/views/settings/team/teamSettings';
+import {mountWithTheme} from '../../../helpers';
 
 const childContextTypes = {
   organization: PropTypes.object,
@@ -73,7 +74,7 @@ describe('NewTeamSettings', function() {
       method: 'PUT',
     });
 
-    let wrapper = mount(
+    let wrapper = mountWithTheme(
       <NewTeamSettings
         routes={[]}
         params={{orgId: 'org', teamId: team.slug}}
@@ -102,6 +103,8 @@ describe('NewTeamSettings', function() {
       .simulate('change', {target: {value: 'new-slug'}})
       .simulate('blur');
 
+    wrapper.find('SaveButton').simulate('click');
+
     expect(putMock).toHaveBeenCalledWith(
       `/teams/org/${team.slug}/`,
       expect.objectContaining({
@@ -140,7 +143,7 @@ describe('NewTeamSettings', function() {
     ).not.toBe('Remove Team');
   });
 
-  xit('can remove team', async function() {
+  it('can remove team', async function() {
     let team = TestStubs.Team();
     let deleteMock = MockApiClient.addMockResponse({
       url: `/teams/org/${team.slug}/`,
@@ -180,6 +183,7 @@ describe('NewTeamSettings', function() {
       })
     );
 
+    await tick();
     await tick();
     expect(routerPushMock).toHaveBeenCalledWith('/settings/org/teams/');
 
