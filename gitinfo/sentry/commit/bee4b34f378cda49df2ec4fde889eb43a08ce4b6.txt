commit bee4b34f378cda49df2ec4fde889eb43a08ce4b6
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Tue Nov 15 16:24:43 2016 -0800

    Require password verification to add new email (#4536)

diff --git a/src/sentry/templates/sentry/account/emails.html b/src/sentry/templates/sentry/account/emails.html
index 86b4f40cd6..9c9492f741 100644
--- a/src/sentry/templates/sentry/account/emails.html
+++ b/src/sentry/templates/sentry/account/emails.html
@@ -73,6 +73,10 @@
     <br>
     {{ email_form.alt_email|as_crispy_field }}
 
+    {% if email_form.password %}
+      {{ email_form.password|as_crispy_field }}
+    {% endif %}
+
     <fieldset class="form-actions">
       <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
     </fieldset>
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index f7b881244f..d3ece95371 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -227,10 +227,22 @@ class EmailForm(forms.Form):
         help_text='Designate an alternative email for this account',
     )
 
+    password = forms.CharField(
+        label=_('Current password'),
+        widget=forms.PasswordInput(),
+        help_text=_('You will need to enter your current account password to make changes.'),
+        required=True,
+    )
+
     def __init__(self, user, *args, **kwargs):
         self.user = user
         super(EmailForm, self).__init__(*args, **kwargs)
 
+        needs_password = user.has_usable_password()
+
+        if not needs_password:
+            del self.fields['password']
+
     def save(self, commit=True):
 
         if self.cleaned_data['primary_email'] != self.user.email:
@@ -248,6 +260,14 @@ class EmailForm(forms.Form):
 
         return self.user
 
+    def clean_password(self):
+        value = self.cleaned_data.get('password')
+        if value and not self.user.check_password(value):
+            raise forms.ValidationError(_('The password you entered is not correct.'))
+        elif not value:
+            raise forms.ValidationError(_('You must confirm your current password to make changes.'))
+        return value
+
 
 class AccountSettingsForm(forms.Form):
     name = forms.CharField(required=True, label=_('Name'), max_length=30)
diff --git a/tests/sentry/web/frontend/test_emails.py b/tests/sentry/web/frontend/test_emails.py
index a1e68b74a8..815cef2b50 100644
--- a/tests/sentry/web/frontend/test_emails.py
+++ b/tests/sentry/web/frontend/test_emails.py
@@ -31,17 +31,50 @@ class EmailsTest(TestCase):
         self.assertIn('bar@example.com', resp.content)
         assert 'bar@example.com' in ([thing.email for thing in user.emails.all()])
 
-    def test_create_alt_email(self):
+    def test_create_alt_email_with_password(self):
         user = self.create_user('foo@example.com')
         self.login_as(user)
+        user.set_password('something')
+        user.save()
+        resp = self.client.post(self.path, data={
+            'primary_email': user.email,
+            'alt_email': 'hello@gmail.com',
+            'password': 'something'},
+            follow=True
+        )
+        assert resp.status_code == 200
+        self.assertIn('hello@gmail.com', resp.content)
+        emails = UserEmail.objects.filter(user=user)
+        assert 'hello@gmail.com' in ([email.email for email in emails])
+
+    def test_fail_to_create_email_without_pw(self):
+        user = self.create_user('foo@example.com')
+        self.login_as(user)
+        user.set_password('something')
+        user.save()
         resp = self.client.post(self.path, data={
             'primary_email': user.email,
             'alt_email': 'hello@gmail.com'},
             follow=True
         )
         assert resp.status_code == 200
+        self.assertIn('This field is required', resp.content)
+        emails = UserEmail.objects.filter(user=user)
+        assert 'hello@gmail.com' not in ([email.email for email in emails])
+
+    def test_create_alt_email_without_usable_pw(self):
+        user = self.create_user('foo@example.com')
+        self.login_as(user)
+        user.set_unusable_password()
+        user.save()
+        resp = self.client.post(self.path, data={
+            'primary_email': user.email,
+            'alt_email': 'hello@gmail.com'
+        },
+            follow=True
+        )
+        assert resp.status_code == 200
         self.assertIn('hello@gmail.com', resp.content)
-        self.assertNotIn('bar@gmail.com', resp.content)
         emails = UserEmail.objects.filter(user=user)
         assert 'hello@gmail.com' in ([email.email for email in emails])
 
@@ -59,9 +92,15 @@ class EmailsTest(TestCase):
     def test_change_primary_email(self):
         user = self.create_user('foo@example.com')
         self.login_as(user)
+        user.set_password('something')
+        user.save()
         resp = self.client.get(self.path)
         self.assertIn('foo@example.com', resp.content)
-        resp = self.client.post(self.path, {'primary_email': 'bar@example.com'}, follow=True)
+        resp = self.client.post(self.path,
+            {'primary_email': 'bar@example.com',
+             'password': 'something'},
+            follow=True
+        )
         self.assertIn('bar@example.com', resp.content)
         user = User.objects.get(id=user.id)
         assert user.email != 'foo@example.com'
