commit 6800d9a76272d32d39a51c2520c66fdc9e6db999
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Jan 16 12:39:04 2018 -0800

    feat(environments): Release stats uses project default environment
    
    The release stats component uses the project default environment if one is specified

diff --git a/src/sentry/static/sentry/app/components/group/releaseStats.jsx b/src/sentry/static/sentry/app/components/group/releaseStats.jsx
index 9f078ac765..dbd08da036 100644
--- a/src/sentry/static/sentry/app/components/group/releaseStats.jsx
+++ b/src/sentry/static/sentry/app/components/group/releaseStats.jsx
@@ -75,7 +75,8 @@ const GroupReleaseStats = createReactClass({
 
   fetchData() {
     let group = this.props.group;
-    let envName = this.state.environment.urlRoutingName;
+    let env = this.state.environment || {};
+    let envName = env.urlRoutingName;
     let stats = this.props.group.stats['24h'];
 
     // due to the current stats logic in Sentry we need to extend the bounds
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index ec54f8ce85..34279b34b5 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -194,18 +194,13 @@ const GroupSidebar = createReactClass({
     let project = this.getProject();
     let projectId = project.slug;
     let orgId = this.getOrganization().slug;
-    let defaultEnvironment = project.defaultEnvironment;
     let group = this.getGroup();
 
     return (
       <div className="group-stats">
         <SuggestedOwners event={this.props.event} />
 
-        <GroupReleaseStats
-          group={group}
-          location={this.context.location}
-          defaultEnvironment={defaultEnvironment}
-        />
+        <GroupReleaseStats group={group} location={this.context.location} />
 
         {this.renderPluginIssue()}
 
diff --git a/src/sentry/static/sentry/app/stores/environmentStore.jsx b/src/sentry/static/sentry/app/stores/environmentStore.jsx
index dd58074110..324c4d86a7 100644
--- a/src/sentry/static/sentry/app/stores/environmentStore.jsx
+++ b/src/sentry/static/sentry/app/stores/environmentStore.jsx
@@ -1,5 +1,6 @@
 import Reflux from 'reflux';
 import {toTitleCase} from '../utils';
+import ProjectActions from '../actions/projectActions';
 
 const PRODUCTION_ENV_NAMES = new Set([
   'production',
@@ -15,6 +16,8 @@ const DEFAULT_ROUTING_NAME = 'none';
 const EnvironmentStore = Reflux.createStore({
   init() {
     this.items = [];
+    this.defaultEnvironment = null;
+    this.listenTo(ProjectActions.setActive, this.onSetActiveProject);
   },
 
   loadInitialData(items) {
@@ -45,13 +48,27 @@ const EnvironmentStore = Reflux.createStore({
     return this.items;
   },
 
+  onSetActiveProject(project) {
+    if (project) {
+      this.defaultEnvironment = project.defaultEnvironment || null;
+    }
+  },
+
   // Default environment is either the first based on the set of common names
   // or the first in the environment list if none match
   getDefault() {
     let allEnvs = this.items;
+
+    let defaultEnv = allEnvs.find(e => e.name === this.defaultEnvironment);
+
     let prodEnvs = allEnvs.filter(e => PRODUCTION_ENV_NAMES.has(e.name));
 
-    return (prodEnvs.length && prodEnvs[0]) || (allEnvs.length && allEnvs[0]) || null;
+    return (
+      defaultEnv ||
+      (prodEnvs.length && prodEnvs[0]) ||
+      (allEnvs.length && allEnvs[0]) ||
+      null
+    );
   },
 });
 
