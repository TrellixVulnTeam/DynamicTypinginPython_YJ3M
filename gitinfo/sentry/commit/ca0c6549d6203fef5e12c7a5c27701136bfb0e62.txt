commit ca0c6549d6203fef5e12c7a5c27701136bfb0e62
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Apr 10 11:43:39 2019 -0700

    feat(recent-searches): Add UI to pin from searchbar [SEN-406] (#12529)
    
    This is hidden by "org-saved-searches" feature flag (only pinning will work
    atm, as it requires additional data to toggle pinned state).
    
    Blocked by #12444 and #12499
    
    Fixes SEN-406

diff --git a/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
index b64322e8c6..5790caac9b 100644
--- a/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
@@ -34,15 +34,15 @@ const getRecentSearchUrl = orgId => `/organizations/${orgId}/recent-searches/`;
  */
 export function saveRecentSearch(api, orgId, type, query) {
   const url = getRecentSearchUrl(orgId);
-  const promise = api
-    .requestPromise(url, {
-      method: 'POST',
-      data: {
-        query,
-        type,
-      },
-    })
-    .catch(handleXhrErrorResponse('Unable to save a recent search'));
+  const promise = api.requestPromise(url, {
+    method: 'POST',
+    data: {
+      query,
+      type,
+    },
+  });
+
+  promise.catch(handleXhrErrorResponse('Unable to save a recent search'));
 
   return promise;
 }
@@ -81,15 +81,46 @@ export function createSavedSearch(api, orgId, name, query) {
  */
 export function fetchRecentSearches(api, orgId, type, query) {
   const url = getRecentSearchUrl(orgId);
-  const promise = api
-    .requestPromise(url, {
-      query: {
-        query,
-        type,
-        limit: MAX_RECENT_SEARCHES,
-      },
-    })
-    .catch(handleXhrErrorResponse('Unable to fetch recent searches'));
+  const promise = api.requestPromise(url, {
+    query: {
+      query,
+      type,
+      limit: MAX_RECENT_SEARCHES,
+    },
+  });
+
+  promise.catch(handleXhrErrorResponse('Unable to fetch recent searches'));
+
+  return promise;
+}
+
+const getPinSearchUrl = orgId => `/organizations/${orgId}/pinned-searches/`;
+
+export function pinSearch(api, orgId, type, query) {
+  const url = getPinSearchUrl(orgId);
+  const promise = api.requestPromise(url, {
+    method: 'PUT',
+    data: {
+      query,
+      type,
+    },
+  });
+
+  promise.catch(handleXhrErrorResponse('Unable to pin search'));
+
+  return promise;
+}
+
+export function unpinSearch(api, orgId, type) {
+  const url = getPinSearchUrl(orgId);
+  const promise = api.requestPromise(url, {
+    method: 'DELETE',
+    data: {
+      type,
+    },
+  });
+
+  promise.catch(handleXhrErrorResponse('Unable to un-pin search'));
 
   return promise;
 }
diff --git a/src/sentry/static/sentry/app/components/smartSearchBar.jsx b/src/sentry/static/sentry/app/components/smartSearchBar.jsx
index 637d23ba89..fc9637fac6 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar.jsx
@@ -9,10 +9,19 @@ import styled from 'react-emotion';
 
 import {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'app/constants';
 import {defined} from 'app/utils';
-import {fetchRecentSearches, saveRecentSearch} from 'app/actionCreators/savedSearches';
+import {
+  fetchRecentSearches,
+  pinSearch,
+  saveRecentSearch,
+  unpinSearch,
+} from 'app/actionCreators/savedSearches';
 import {t} from 'app/locale';
+import Button from 'app/components/button';
+import InlineSvg from 'app/components/inlineSvg';
 import MemberListStore from 'app/stores/memberListStore';
 import SearchDropdown from 'app/views/stream/searchDropdown';
+import SentryTypes from 'app/sentryTypes';
+import space from 'app/styles/space';
 import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
 
@@ -35,6 +44,8 @@ class SmartSearchBar extends React.Component {
   static propTypes = {
     api: PropTypes.object,
 
+    organization: SentryTypes.Organization,
+
     orgId: PropTypes.string,
 
     // Class name for search dropdown
@@ -71,7 +82,17 @@ class SmartSearchBar extends React.Component {
     /**
      * If this is defined, attempt to save search term scoped to the user and the current org
      */
-    recentSearchType: PropTypes.number,
+    savedSearchType: PropTypes.number,
+
+    /**
+     * Has pinned search feature
+     */
+    hasPinnedSearch: PropTypes.bool,
+
+    /**
+     * The pinned search object
+     */
+    pinnedSearch: SentryTypes.SavedSearch,
 
     // Callback that returns a promise of an array of strings
     onGetTagValues: PropTypes.func,
@@ -168,16 +189,16 @@ class SmartSearchBar extends React.Component {
   };
 
   doSearch = async () => {
-    const {onSearch, onSavedRecentSearch, api, orgId, recentSearchType} = this.props;
+    const {onSearch, onSavedRecentSearch, api, orgId, savedSearchType} = this.props;
     this.blur();
     const query = removeSpace(this.state.query);
     onSearch(query);
 
-    // Only save recent search query if we have a recentSearchType (also 0 is a valid value)
+    // Only save recent search query if we have a savedSearchType (also 0 is a valid value)
     // Do not save empty string queries (i.e. if they clear search)
-    if (typeof recentSearchType !== 'undefined' && query) {
+    if (typeof savedSearchType !== 'undefined' && query) {
       try {
-        await saveRecentSearch(api, orgId, recentSearchType, query);
+        await saveRecentSearch(api, orgId, savedSearchType, query);
 
         if (onSavedRecentSearch) {
           onSavedRecentSearch(query);
@@ -296,9 +317,9 @@ class SmartSearchBar extends React.Component {
    */
   getRecentSearches = _.debounce(
     async () => {
-      const {recentSearchType, displayRecentSearches, onGetRecentSearches} = this.props;
-      // `recentSearchType` can be 0
-      if (!defined(recentSearchType) || !displayRecentSearches) {
+      const {savedSearchType, displayRecentSearches, onGetRecentSearches} = this.props;
+      // `savedSearchType` can be 0
+      if (!defined(savedSearchType) || !displayRecentSearches) {
         return [];
       }
 
@@ -310,12 +331,12 @@ class SmartSearchBar extends React.Component {
   );
 
   fetchRecentSearches = async fullQuery => {
-    const {api, orgId, recentSearchType} = this.props;
+    const {api, orgId, savedSearchType} = this.props;
 
     const recentSearches = await fetchRecentSearches(
       api,
       orgId,
-      recentSearchType,
+      savedSearchType,
       fullQuery
     );
 
@@ -494,6 +515,29 @@ class SmartSearchBar extends React.Component {
     });
   };
 
+  onTogglePinnedSearch = evt => {
+    const {
+      api,
+      organization,
+      savedSearchType,
+      hasPinnedSearch,
+      pinnedSearch,
+    } = this.props;
+
+    evt.preventDefault();
+    evt.stopPropagation();
+
+    if (!defined(savedSearchType) || !hasPinnedSearch) {
+      return;
+    }
+
+    if (!!pinnedSearch) {
+      unpinSearch(api, organization.slug, savedSearchType);
+    } else {
+      pinSearch(api, organization.slug, savedSearchType, this.state.query);
+    }
+  };
+
   onKeyDown = evt => {
     const state = this.state;
     const searchItems = state.searchItems;
@@ -617,11 +661,16 @@ class SmartSearchBar extends React.Component {
             />
             <span className="icon-search" />
             {this.state.query !== '' && (
-              <div>
+              <React.Fragment>
+                {this.props.hasPinnedSearch && (
+                  <PinButton borderless size="zero" onClick={this.onTogglePinnedSearch}>
+                    <PinIcon isPinned={!!this.props.pinnedSearch} src="icon-pin" />
+                  </PinButton>
+                )}
                 <a className="search-clear-form" onClick={this.clearSearch}>
                   <span className="icon-circle-cross" />
                 </a>
-              </div>
+              </React.Fragment>
             )}
           </div>
 
@@ -672,6 +721,20 @@ const SmartSearchBarContainer = withApi(
   )
 );
 
+const PinButton = styled(Button)`
+  margin-right: ${space(0.5)};
+  position: absolute;
+  right: 26px;
+  top: 10px;
+`;
+
+const PinIcon = styled(InlineSvg)`
+  fill: ${p => (p.isPinned ? p.theme.blueLight : p.theme.gray2)};
+  &:hover {
+    fill: ${p => p.theme.blueLight};
+  }
+`;
+
 const DropdownWrapper = styled('div')`
   display: ${p => (p.visible ? 'block' : 'none')};
 `;
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index 79b8712151..750a389a99 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -1,5 +1,7 @@
 import PropTypes from 'prop-types';
 
+import {SEARCH_TYPES} from 'app/constants';
+
 export const Metadata = PropTypes.shape({
   value: PropTypes.string,
   message: PropTypes.string,
@@ -378,6 +380,21 @@ export const SentryApplication = PropTypes.shape({
   status: PropTypes.string,
 });
 
+export const SavedSearch = PropTypes.shape({
+  id: PropTypes.string.isRequired,
+  dateCreated: PropTypes.string,
+  isDefault: PropTypes.bool,
+  isGlobal: PropTypes.bool,
+  isOrgCustom: PropTypes.bool,
+  isPinned: PropTypes.bool,
+  isPrivate: PropTypes.bool,
+  isUserDefault: PropTypes.bool,
+  name: PropTypes.string,
+  projectId: PropTypes.string,
+  query: PropTypes.string,
+  type: PropTypes.oneOf([SEARCH_TYPES.ISSUE, SEARCH_TYPES.EVENTS]),
+});
+
 export const GlobalSelection = PropTypes.shape({
   projects: PropTypes.arrayOf(PropTypes.number),
   environments: PropTypes.arrayOf(PropTypes.string),
@@ -928,6 +945,7 @@ const SentryTypes = {
   Release,
   Repository,
   User,
+  SavedSearch,
   SentryApplication,
   Widget,
 
diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index af4b0e5642..1919d6bca0 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -687,6 +687,7 @@ const OrganizationStream = createReactClass({
             projectId={projectId}
             searchId={params.searchId}
             query={query}
+            savedSearch={this.state.savedSearch}
             sort={this.getSort()}
             queryCount={this.state.queryCount}
             queryMaxCount={this.state.queryMaxCount}
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index 552625a505..3b1f782be8 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -19,7 +19,8 @@ class StreamFilters extends React.Component {
     organization: SentryTypes.Organization,
 
     searchId: PropTypes.string,
-    savedSearchList: PropTypes.array.isRequired,
+    savedSearchList: PropTypes.arrayOf(SentryTypes.SavedSearch),
+    savedSearch: SentryTypes.SavedSearch,
 
     sort: PropTypes.string,
     query: PropTypes.string,
@@ -54,6 +55,7 @@ class StreamFilters extends React.Component {
     const {
       organization,
       projectId,
+      savedSearch,
       searchId,
       queryCount,
       queryMaxCount,
@@ -119,6 +121,7 @@ class StreamFilters extends React.Component {
             excludeEnvironment={true}
             supportedTags={tags}
             tagValueLoader={tagValueLoader}
+            savedSearch={savedSearch}
           />
           <a className="btn btn-default toggle-stream-sidebar" onClick={onSidebarToggle}>
             <span className="icon-filter" />
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index 03a57caaef..ea13fb7987 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -62,6 +62,7 @@ class SearchBar extends React.Component {
   static propTypes = {
     ...SmartSearchBar.propTypes,
 
+    savedSearch: SentryTypes.SavedSearch,
     organization: SentryTypes.Organization.isRequired,
     tagValueLoader: PropTypes.func.isRequired,
   };
@@ -82,6 +83,11 @@ class SearchBar extends React.Component {
     return organization && organization.features.includes('recent-searches');
   };
 
+  hasOrgSavedSearches = () => {
+    const {organization} = this.props;
+    return organization && organization.features.includes('org-saved-searches');
+  };
+
   fetchData = async () => {
     if (!this.hasRecentSearches()) {
       this.setState({
@@ -142,6 +148,7 @@ class SearchBar extends React.Component {
   render() {
     const {
       tagValueLoader, // eslint-disable-line no-unused-vars
+      savedSearch,
       ...props
     } = this.props;
 
@@ -150,9 +157,11 @@ class SearchBar extends React.Component {
         onGetTagValues={this.getTagValues}
         defaultSearchItems={this.state.defaultSearchItems}
         maxSearchItems={5}
-        recentSearchType={SEARCH_TYPES.ISSUE}
+        hasPinnedSearch={this.hasOrgSavedSearches()}
+        savedSearchType={SEARCH_TYPES.ISSUE}
         displayRecentSearches={this.hasRecentSearches()}
         onSavedRecentSearch={this.handleSavedRecentSearch}
+        pinnedSearch={savedSearch && savedSearch.isPinned ? savedSearch : null}
         {...props}
       />
     );
diff --git a/tests/js/spec/views/organizationStream/overview.spec.jsx b/tests/js/spec/views/organizationStream/overview.spec.jsx
index 9f26046383..611e573640 100644
--- a/tests/js/spec/views/organizationStream/overview.spec.jsx
+++ b/tests/js/spec/views/organizationStream/overview.spec.jsx
@@ -312,7 +312,7 @@ describe('OrganizationStream', function() {
     });
 
     it('fetches data on savedSearch change', function() {
-      savedSearch = {id: 1, query: 'is:resolved'};
+      savedSearch = {id: '1', query: 'is:resolved'};
       wrapper.setState({savedSearch});
 
       expect(fetchDataMock).toHaveBeenCalled();
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index c60a32b26b..6e20869c4c 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -1,6 +1,7 @@
 import React from 'react';
-import {mount} from 'enzyme';
 
+import {initializeOrg} from 'app-test/helpers/initializeOrg';
+import {mount} from 'enzyme';
 import SearchBar from 'app/views/stream/searchBar';
 import TagStore from 'app/stores/tagStore';
 
@@ -197,4 +198,94 @@ describe('SearchBar', function() {
       );
     });
   });
+
+  describe('Pinned Searches', function() {
+    let pinSearch;
+    let unpinSearch;
+    const {organization, routerContext} = initializeOrg({
+      organization: {features: ['org-saved-searches']},
+    });
+
+    beforeEach(function() {
+      MockApiClient.clearMockResponses();
+      pinSearch = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/pinned-searches/',
+        method: 'PUT',
+        body: {},
+      });
+      unpinSearch = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/pinned-searches/',
+        method: 'DELETE',
+        body: {},
+      });
+    });
+
+    it('does not have pin icon without org-saved-searches featureflag', function() {
+      const props = {
+        orgId: organization.slug,
+        query: 'url:"fu"',
+        onSearch: jest.fn(),
+        tagValueLoader: () => Promise.resolve([]),
+        supportedTags,
+        organization,
+      };
+      const searchBar = mount(<SearchBar {...props} />, routerContext);
+      expect(searchBar.find('PinIcon')).toHaveLength(1);
+
+      searchBar.setProps({
+        organization: TestStubs.Organization({features: []}),
+      });
+
+      searchBar.update();
+      expect(searchBar.find('PinIcon')).toHaveLength(0);
+    });
+
+    it('pins a search from the searchbar', function() {
+      const props = {
+        orgId: organization.slug,
+        query: 'url:"fu"',
+        onSearch: jest.fn(),
+        tagValueLoader: () => Promise.resolve([]),
+        supportedTags,
+        organization,
+      };
+      const searchBar = mount(<SearchBar {...props} />, routerContext);
+      searchBar.find('PinButton').simulate('click');
+
+      expect(pinSearch).toHaveBeenLastCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          method: 'PUT',
+          data: {
+            query: 'url:"fu" ',
+            type: 0,
+          },
+        })
+      );
+    });
+
+    it('unpins a search from the searchbar', function() {
+      const props = {
+        orgId: organization.slug,
+        query: 'url:"fu"',
+        onSearch: jest.fn(),
+        tagValueLoader: () => Promise.resolve([]),
+        supportedTags,
+        organization,
+        pinnedSearch: {id: '1', query: 'url:"fu" '},
+      };
+      const searchBar = mount(<SearchBar {...props} />, routerContext);
+      searchBar.find('PinButton').simulate('click');
+
+      expect(unpinSearch).toHaveBeenLastCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          method: 'DELETE',
+          data: {
+            type: 0,
+          },
+        })
+      );
+    });
+  });
 });
