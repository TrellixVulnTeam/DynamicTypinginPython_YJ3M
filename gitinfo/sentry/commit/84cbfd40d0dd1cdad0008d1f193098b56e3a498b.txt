commit 84cbfd40d0dd1cdad0008d1f193098b56e3a498b
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jan 23 11:57:17 2015 -0800

    Draft of moving group mutation into actions

diff --git a/src/sentry/static/sentry/app/actions/aggregateListActions.jsx b/src/sentry/static/sentry/app/actions/aggregateListActions.jsx
index cbf16cccb4..6b6de030d7 100644
--- a/src/sentry/static/sentry/app/actions/aggregateListActions.jsx
+++ b/src/sentry/static/sentry/app/actions/aggregateListActions.jsx
@@ -2,6 +2,7 @@
 
 var Reflux = require("reflux");
 
+
 // TODO(dcramer): we should probably just make every parameter update
 // work on bulk aggregates
 // TODO(dcramer): define a spec for action parameterization and children
@@ -12,6 +13,12 @@ var AggregateListActions = Reflux.createActions({
   },
   "bulkUpdate": {
     children: ["completed", "failed"]
+  },
+  "bulkDelete": {
+    children: ["completed", "failed"]
+  },
+  "merge": {
+    children: ["completed", "failed"]
   }
 });
 
@@ -37,17 +44,65 @@ AggregateListActions.assignTo.listen(function(itemId, userEmail){
   });
 });
 
-AggregateListActions.bulkUpdate.listen(function(params){
+AggregateListActions.merge.listen(function(params){
+  if (!(params.itemIds && params.orgId && params.projectId)) {
+    return this.failed(params);
+  }
+
   var url = '/api/0/projects/' + params.orgId + '/' + params.projectId + '/groups/';
   url += '?id=' + params.itemIds.join('&id=');
 
+  $.ajax({
+    url: url,
+    method: 'PUT',
+    data: {merge: 1},
+    contentType: 'application/json',
+    success: function(data){
+      this.completed(params);
+    }.bind(this),
+    error: function(){
+      this.failed(params);
+    }.bind(this)
+  });
+});
+
+AggregateListActions.bulkUpdate.listen(function(params){
+  if (!(params.orgId && params.projectId)) {
+    this.failed(params);
+  }
+  var url = '/api/0/projects/' + params.orgId + '/' + params.projectId + '/groups/';
+  if (params.itemIds) {
+    url += '?id=' + params.itemIds.join('&id=');
+  }
+
   $.ajax({
     url: url,
     method: 'PUT',
     data: JSON.stringify(params.data),
     contentType: 'application/json',
     success: function(data){
-      this.completed(params, data);
+      this.completed(params);
+    }.bind(this),
+    error: function(){
+      this.failed(params);
+    }.bind(this)
+  });
+});
+
+AggregateListActions.bulkDelete.listen(function(params){
+  if (!params.itemIds) {
+    return this.failed(params);
+  }
+
+  var url = '/api/0/projects/' + params.orgId + '/' + params.projectId + '/groups/';
+  url += '?id=' + params.itemIds.join('&id=');
+
+  $.ajax({
+    url: url,
+    method: 'DELETE',
+    contentType: 'application/json',
+    success: function(data){
+      this.completed(params);
     }.bind(this),
     error: function(){
       this.failed(params);
diff --git a/src/sentry/static/sentry/app/components/stream.jsx b/src/sentry/static/sentry/app/components/stream.jsx
index 0882b1d905..7032edc3c1 100644
--- a/src/sentry/static/sentry/app/components/stream.jsx
+++ b/src/sentry/static/sentry/app/components/stream.jsx
@@ -186,36 +186,31 @@ var Stream = React.createClass({
     });
   },
 
-  actionAggregates: function(aggList, options) {
+  actionAggregates: function(action, aggList, data) {
+    var itemIds;
     var params = this.getParams();
-    var url = options.url || '/api/0/projects/' + params.orgId + '/' + params.projectId + '/groups/';
-
     var selectedAggList;
-    if (aggList === StreamActions.SELECTED) {
+
+    if (aggList === AggregateListActions.SELECTED) {
+      itemIds = [];
       selectedAggList = [];
       for (var i = 0, node; (node = this.state.aggList[i]); i++) {
         if (node.isSelected === true) {
+          itemIds.push(node.id);
           selectedAggList.push(node);
         }
       }
-      url += '?id=' + selectedAggList.map(function(node){ return node.id; }).join('&id=');
-    } else {
+    } else if (aggList === StreamActions.ALL) {
       selectedAggList = this.state.aggList;
     }
 
-    var data = options.data || {};
-
-    // TODO(dcramer): handle errors
-    $.ajax({
-      url: url,
-      method: options.method || 'PUT',
-      contentType: 'application/json',
-      data: JSON.stringify(data)
+    action({
+      orgId: params.orgId,
+      projectId: params.projectId,
+      itemIds: itemIds,
+      data: data
     });
 
-    if (aggList === StreamActions.ALL) {
-      aggList = this.state.aggList;
-    }
     selectedAggList.forEach(function(node){
       node.version = new Date().getTime() + 10;
       node.isSelected = false;
@@ -224,10 +219,6 @@ var Stream = React.createClass({
       }
     });
 
-    if (typeof options.success !== "undefined") {
-      options.success(selectedAggList);
-    }
-
     this.setState({
       aggList: this.state.aggList,
       selectAllActive: false,
@@ -236,14 +227,10 @@ var Stream = React.createClass({
     });
   },
   handleResolve: function(aggList, event){
-    return this.actionAggregates(aggList, {
-      data: {status: 'resolved'}
-    });
+    return this.actionAggregates(AggregateListActions.bulkUpdate, aggList, {status: 'resolved'});
   },
   handleBookmark: function(aggList, event){
-    return this.actionAggregates(aggList, {
-      data: {isBookmarked: true}
-    });
+    return this.actionAggregates(AggregateListActions.bulkUpdate, aggList, {isBookmarked: true});
   },
   handleRealtimeChange: function(event) {
     this.setState({
@@ -251,25 +238,15 @@ var Stream = React.createClass({
     });
   },
   handleRemoveBookmark: function(aggList, event){
-    return this.actionAggregates(aggList, {
-      data: {isBookmarked: false}
-    });
+    return this.actionAggregates(AggregateListActions.bulkUpdate, aggList, {isBookmarked: false});
   },
   handleDelete: function(aggList, event){
-    return this.actionAggregates(aggList, {
+    return this.actionAggregates(AggregateListActions.bulkDelete, aggList, {
       method: 'DELETE',
-      success: function() {
-        AlertActions.addAlert('The selected events have been scheduled for deletion.', 'success');
-      }
     });
   },
   handleMerge: function(aggList, event) {
-    return this.actionAggregates(aggList, {
-      data: {merge: 1},
-      success: function() {
-        AlertActions.addAlert('The selected events have been scheduled for merge.', 'success');
-      }
-    });
+    return this.actionAggregates(AggregateListActions.merge, {merge: 1});
   },
   handleSelectStatsPeriod: function(period) {
     this.setState({
diff --git a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
index 7ab2e10c79..d27acd56b9 100644
--- a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
+++ b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
@@ -21,8 +21,6 @@ var AggregateListStore = Reflux.createStore({
     // TODO(dcramer): theres no documented way to do listenables via these
     this.listenTo(AggregateListActions.assignTo.completed, this.onAssignToCompleted);
     this.listenTo(AggregateListActions.assignTo.failed, this.onAssignToFailed);
-
-    this.listenTo(AggregateListActions.bulkUpdate.completed, this.onBulkUpdateCompleted);
   },
 
   // TODO(dcramer): this should actually come from an action of some sorts
@@ -48,15 +46,6 @@ var AggregateListStore = Reflux.createStore({
     this.trigger(this.items);
   },
 
-  onBulkUpdateCompleted: function(params) {
-    this.items.forEach(function(item){
-      if (params.itemIds.indexOf(item.id) !== -1) {
-        $.extend(true, item, data);
-      }
-    });
-    this.trigger(this.items);
-  },
-
   onBulkDeleteCompleted: function(params) {
     AlertActions.addAlert(OK_SCHEDULE_DELETE, 'success');
   },
