commit db5e882fbff9f40b67a4e2cf71b7013118018931
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri May 6 00:44:50 2016 +0200

    Revert to 9004201b02cd2663d86e38c4ffe20c1eeb894538
    
    This was an accidental pull request merge gone bad.

diff --git a/src/sentry/middleware/auth.py b/src/sentry/middleware/auth.py
index 56ec1583a9..352e3b53e1 100644
--- a/src/sentry/middleware/auth.py
+++ b/src/sentry/middleware/auth.py
@@ -1,34 +1,7 @@
 from __future__ import absolute_import
 
-from django.contrib import auth
-from django.utils.functional import SimpleLazyObject
-from django.dispatch import receiver
-from sentry.utils.dates import to_datetime
-from sentry.utils.auth import bump_session_timestamp
+from django.contrib.auth import middleware
 
 
-@receiver(auth.user_logged_in)
-def on_user_logged_in(sender, request, user, **extra):
-    if user.is_authenticated():
-        bump_session_timestamp(request)
-
-
-def get_user_safely(request):
-    user = auth.get_user(request)
-
-    if not user.is_authenticated() or user.last_password_change is None:
-        return user
-
-    login_time = request.session.get('_auth_ts')
-    if login_time is not None:
-        login_time = to_datetime(login_time)
-    if login_time is None or login_time < user.last_password_change:
-        request.session.clear()
-        return auth.AnonymousUser()
-    return user
-
-
-class AuthenticationMiddleware(object):
-
-    def process_request(self, request):
-        request.user = SimpleLazyObject(lambda: get_user_safely(request))
+class AuthenticationMiddleware(middleware.AuthenticationMiddleware):
+    pass
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index 8fbda1ccd1..8d430bb9cb 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -48,8 +48,6 @@ class User(BaseModel, AbstractBaseUser):
                     'modifying their account (username, password, etc).'))
 
     date_joined = models.DateTimeField(_('date joined'), default=timezone.now)
-    last_password_change = models.DateTimeField(_('last password change'),
-                                                null=True, blank=True)
 
     objects = UserManager(cache_fields=['pk'])
 
@@ -92,10 +90,6 @@ class User(BaseModel, AbstractBaseUser):
     def get_short_name(self):
         return self.username
 
-    def set_password(self, raw_password):
-        super(User, self).set_password(raw_password)
-        self.last_password_change = timezone.now()
-
     def merge_to(from_user, to_user):
         # TODO: we could discover relations automatically and make this useful
         from sentry.models import (
diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index aed36c9b2d..551ab4edbc 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -9,9 +9,6 @@ from __future__ import absolute_import
 
 import logging
 
-import time
-import math
-
 from django.conf import settings
 from django.contrib.auth import login as _login
 from django.contrib.auth.backends import ModelBackend
@@ -116,9 +113,3 @@ class EmailAuthBackend(ModelBackend):
                 except ValueError:
                     continue
         return None
-
-
-def bump_session_timestamp(request):
-    # Round up so that the truncation does not conflict with higher
-    # solution on the db data on password change
-    request.session['_auth_ts'] = int(math.ceil(time.time()))
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 85fbb597c5..0c50a1bfc8 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -20,7 +20,7 @@ from six.moves import range
 
 from sentry.constants import LANGUAGES
 from sentry.models import UserOption, User
-from sentry.utils.auth import find_users, bump_session_timestamp
+from sentry.utils.auth import find_users
 from sentry.web.forms.fields import ReadOnlyTextField
 
 
@@ -295,13 +295,10 @@ class AccountSettingsForm(forms.Form):
             raise forms.ValidationError(_("That username is already in use."))
         return value
 
-    def save(self, commit=True, request=None):
+    def save(self, commit=True):
         if self.cleaned_data.get('new_password'):
             self.user.set_password(self.cleaned_data['new_password'])
-            if request is not None:
-                bump_session_timestamp(request)
         self.user.name = self.cleaned_data['name']
-        self.user.first_name = self.cleaned_data['first_name']
 
         if self.cleaned_data['email'] != self.user.email:
             new_username = self.user.email == self.user.username
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index f0b8dc999c..8ffcb90820 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -124,7 +124,7 @@ def settings(request):
         'name': request.user.name,
     })
     if form.is_valid():
-        form.save(request=request)
+        form.save()
         messages.add_message(request, messages.SUCCESS, 'Your settings were saved.')
         return HttpResponseRedirect(request.path)
 
