commit 22b17c40ad86deced83e14a22c2fcf47ed2cd434
Author: Jan Michael Auer <account@jauer.org>
Date:   Tue Apr 16 11:50:00 2019 +0200

    feat(grouping): Add package matchers for grouping enhancers (#12731)
    
    This adds matchers for frame "package" fields to grouping enhancers.

diff --git a/src/sentry/grouping/enhancer.py b/src/sentry/grouping/enhancer.py
index 915923b03c..e7f0803699 100644
--- a/src/sentry/grouping/enhancer.py
+++ b/src/sentry/grouping/enhancer.py
@@ -26,7 +26,7 @@ rule = _ matchers actions
 
 matchers       = matcher+
 matcher        = _ matcher_type sep argument
-matcher_type   = "path" / "function" / "module" / "family"
+matcher_type   = "path" / "function" / "module" / "family" / "package"
 
 actions        = action+
 action         = _ range? flag action_name
@@ -62,6 +62,7 @@ MATCH_KEYS = {
     'function': 'f',
     'module': 'm',
     'family': 'F',
+    'package': 'P',
 }
 SHORT_MATCH_KEYS = dict((v, k) for k, v in six.iteritems(MATCH_KEYS))
 
@@ -89,8 +90,11 @@ class Match(object):
 
     def matches_frame(self, frame_data, platform):
         # Path matches are always case insensitive
-        if self.key == 'path':
-            value = frame_data.get('abs_path') or frame_data.get('filename') or ''
+        if self.key in ('path', 'package'):
+            if self.key == 'package':
+                value = frame_data.get('package') or ''
+            else:
+                value = frame_data.get('abs_path') or frame_data.get('filename') or ''
             if glob_match(value, self.pattern, ignorecase=True,
                           doublestar=True, path_normalize=True):
                 return True
diff --git a/src/sentry/grouping/fingerprinting.py b/src/sentry/grouping/fingerprinting.py
index 55890206d4..4f07874c6c 100644
--- a/src/sentry/grouping/fingerprinting.py
+++ b/src/sentry/grouping/fingerprinting.py
@@ -25,7 +25,7 @@ rule = _ matchers _ follow _ fingerprint
 
 matchers       = matcher+
 matcher        = _ matcher_type sep argument
-matcher_type   = "path" / "function" / "module" / "family" / "type" / "value" / "message"
+matcher_type   = "path" / "function" / "module" / "family" / "type" / "value" / "message" / "package"
 argument       = quoted / unquoted
 
 fingerprint    = fp_value+
@@ -93,6 +93,7 @@ class EventAccess(object):
                     'path': frame.get('abs_path') or frame.get('filename'),
                     'module': frame.get('module'),
                     'family': get_grouping_family_for_platform(frame.get('platform') or self.event.get('platform')),
+                    'package': frame.get('package'),
                 })
 
             have_errors = False
@@ -200,7 +201,7 @@ class Match(object):
     def matches_value(self, value):
         if value is None:
             return False
-        if self.key == 'path':
+        if self.key in ('path', 'package'):
             if glob_match(value, self.pattern, ignorecase=True,
                           doublestar=True, path_normalize=True):
                 return True
diff --git a/tests/sentry/grouping/test_enhancer.py b/tests/sentry/grouping/test_enhancer.py
index eca3512367..24cd3576d2 100644
--- a/tests/sentry/grouping/test_enhancer.py
+++ b/tests/sentry/grouping/test_enhancer.py
@@ -97,3 +97,48 @@ def test_family_matching():
     assert bool(native_rule.get_matching_frame_actions({
         'function': 'std::whatever',
     }, 'native'))
+
+
+def test_package_matching():
+    # This tests a bunch of different rules from the default in-app logic that
+    # was ported from the former native plugin.
+    enhancement = Enhancements.from_config_string('''
+        family:native package:/var/**/Frameworks/**                  -app
+        family:native package:**/*.app/Contents/**                   +app
+        family:native package:linux-gate.so                          -app
+        family:native package:?:/Windows/**                          -app
+    ''')
+
+    bundled_rule, macos_rule, linux_rule, windows_rule = enhancement.rules
+
+    assert bool(bundled_rule.get_matching_frame_actions({
+        'package': '/var/containers/MyApp/Frameworks/libsomething',
+    }, 'native'))
+
+    assert bool(macos_rule.get_matching_frame_actions({
+        'package': '/Applications/MyStuff.app/Contents/MacOS/MyStuff',
+    }, 'native'))
+
+    assert bool(linux_rule.get_matching_frame_actions({
+        'package': 'linux-gate.so',
+    }, 'native'))
+
+    assert bool(windows_rule.get_matching_frame_actions({
+        'package': 'D:\\Windows\\System32\\kernel32.dll',
+    }, 'native'))
+
+    assert bool(windows_rule.get_matching_frame_actions({
+        'package': 'd:\\windows\\System32\\kernel32.dll',
+    }, 'native'))
+
+    assert not bool(bundled_rule.get_matching_frame_actions({
+        'package': '/var2/containers/MyApp/Frameworks/libsomething',
+    }, 'native'))
+
+    assert not bool(bundled_rule.get_matching_frame_actions({
+        'package': '/var/containers/MyApp/MacOs/MyApp',
+    }, 'native'))
+
+    assert not bool(bundled_rule.get_matching_frame_actions({
+        'package': '/usr/lib/linux-gate.so',
+    }, 'native'))
