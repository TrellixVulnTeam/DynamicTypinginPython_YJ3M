commit d8d27666e315d16d69906b7e09bdc0cb57743574
Author: Mark Story <mark@mark-story.com>
Date:   Mon Jan 14 12:02:26 2019 -0500

    feat(issues) Build UX for issue actions (#11489)
    
    Not all the issue actions are wired up as their APIs don't all exist,
    but this covers:
    
    * Disabling resolve/merge buttons when issues from multiple projects are
      selected.
    * Disabling merge when < 2 issues are selected.
    * Changing the bar graph period.
    * Extract request into a reflux action.
    
    I added a full reflux action as projects already have fairly consistent
    reflux support and I didn't want to create a detached action.
    
    Refs APP-990

diff --git a/src/sentry/static/sentry/app/actionCreators/projects.jsx b/src/sentry/static/sentry/app/actionCreators/projects.jsx
index 4884df7e4f..01c7297692 100644
--- a/src/sentry/static/sentry/app/actionCreators/projects.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/projects.jsx
@@ -9,6 +9,15 @@ import {t, tct} from 'app/locale';
 import ProjectActions from 'app/actions/projectActions';
 import ProjectsStatsStore from 'app/stores/projectsStatsStore';
 
+export function fetchProject(api, orgId, slug) {
+  let promise = api.requestPromise(`/projects/${orgId}/${slug}/`, {method: 'GET'});
+  promise.then(project => {
+    ProjectActions.fetchSuccess(project);
+  });
+
+  return promise;
+}
+
 export function update(api, params) {
   ProjectActions.update(params.projectId, params.data);
 
diff --git a/src/sentry/static/sentry/app/actions/projectActions.jsx b/src/sentry/static/sentry/app/actions/projectActions.jsx
index de1c6ef0f4..575c4bc683 100644
--- a/src/sentry/static/sentry/app/actions/projectActions.jsx
+++ b/src/sentry/static/sentry/app/actions/projectActions.jsx
@@ -2,6 +2,7 @@ import Reflux from 'reflux';
 
 export default Reflux.createActions([
   'createSuccess',
+  'fetchSuccess',
   'update',
   'updateError',
   'updateSuccess',
diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 4362df4b8c..77089d8ebe 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -256,7 +256,10 @@ export class Client {
   }
 
   bulkDelete(params, options) {
-    let path = '/projects/' + params.orgId + '/' + params.projectId + '/issues/';
+    let path = params.projectId
+      ? `/projects/${params.orgId}/${params.projectId}/issues/`
+      : `/organizations/${params.orgId}/issues/`;
+
     let query = paramsToQueryArgs(params);
     let id = uniqueId();
 
@@ -279,7 +282,10 @@ export class Client {
   }
 
   bulkUpdate(params, options) {
-    let path = '/projects/' + params.orgId + '/' + params.projectId + '/issues/';
+    let path = params.projectId
+      ? `/projects/${params.orgId}/${params.projectId}/issues/`
+      : `/organizations/${params.orgId}/issues/`;
+
     let query = paramsToQueryArgs(params);
     let id = uniqueId();
 
diff --git a/src/sentry/static/sentry/app/components/actions/resolve.jsx b/src/sentry/static/sentry/app/components/actions/resolve.jsx
index 7520be9291..cc6b2925f6 100644
--- a/src/sentry/static/sentry/app/components/actions/resolve.jsx
+++ b/src/sentry/static/sentry/app/components/actions/resolve.jsx
@@ -16,7 +16,7 @@ export default class ResolveActions extends React.Component {
     latestRelease: PropTypes.object,
     onUpdate: PropTypes.func.isRequired,
     orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
+    projectId: PropTypes.string,
     shouldConfirm: PropTypes.bool,
     confirmMessage: PropTypes.node,
     disabled: PropTypes.bool,
diff --git a/src/sentry/static/sentry/app/components/customResolutionModal.jsx b/src/sentry/static/sentry/app/components/customResolutionModal.jsx
index dca07c66ec..fca2e313ad 100644
--- a/src/sentry/static/sentry/app/components/customResolutionModal.jsx
+++ b/src/sentry/static/sentry/app/components/customResolutionModal.jsx
@@ -14,7 +14,7 @@ export default class CustomResolutionModal extends React.Component {
     onSelected: PropTypes.func.isRequired,
     onCanceled: PropTypes.func.isRequired,
     orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
+    projectId: PropTypes.string,
     show: PropTypes.bool,
   };
 
@@ -42,6 +42,9 @@ export default class CustomResolutionModal extends React.Component {
 
   render() {
     let {orgId, projectId} = this.props;
+    let url = projectId
+      ? `/projects/${orgId}/${projectId}/releases/`
+      : `/organizations/${orgId}/releases/`;
 
     return (
       <Modal show={this.props.show} animation={false} onHide={this.props.onCanceled}>
@@ -54,7 +57,7 @@ export default class CustomResolutionModal extends React.Component {
               name="version"
               onChange={this.onChange}
               placeholder={t('e.g. 1.0.4')}
-              url={`/projects/${orgId}/${projectId}/releases/`}
+              url={url}
               onResults={results => {
                 return results.map(release => ({
                   value: release.version,
diff --git a/src/sentry/static/sentry/app/stores/projectsStore.jsx b/src/sentry/static/sentry/app/stores/projectsStore.jsx
index dae8e93c96..d2219dc9b4 100644
--- a/src/sentry/static/sentry/app/stores/projectsStore.jsx
+++ b/src/sentry/static/sentry/app/stores/projectsStore.jsx
@@ -8,6 +8,7 @@ const ProjectsStore = Reflux.createStore({
   init() {
     this.reset();
     this.listenTo(ProjectActions.createSuccess, this.onCreateSuccess);
+    this.listenTo(ProjectActions.fetchSuccess, this.onFetchSuccess);
     this.listenTo(ProjectActions.updateSuccess, this.onUpdateSuccess);
     this.listenTo(ProjectActions.loadStatsSuccess, this.onStatsLoadSuccess);
     this.listenTo(ProjectActions.changeSlug, this.onChangeSlug);
@@ -57,6 +58,14 @@ const ProjectsStore = Reflux.createStore({
     this.trigger(new Set([project.id]));
   },
 
+  onFetchSuccess(project) {
+    this.itemsById = {
+      ...this.itemsById,
+      [project.id]: project,
+    };
+    this.trigger(new Set([project.id]));
+  },
+
   onUpdateSuccess(data) {
     let project = this.getById(data.id);
     let newProject = Object.assign({}, project, data);
diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index 97927ee444..0d21198493 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -1,5 +1,5 @@
 import {browserHistory} from 'react-router';
-import {omit, pickBy} from 'lodash';
+import {omit, pickBy, uniq} from 'lodash';
 import Cookies from 'js-cookie';
 import React from 'react';
 import Reflux from 'reflux';
@@ -10,17 +10,20 @@ import qs from 'query-string';
 import {Panel, PanelBody} from 'app/components/panels';
 import {analytics} from 'app/utils/analytics';
 import {t, tct} from 'app/locale';
+import {fetchProject} from 'app/actionCreators/projects';
 import {fetchTags} from 'app/actionCreators/tags';
 import ApiMixin from 'app/mixins/apiMixin';
 import ConfigStore from 'app/stores/configStore';
 import GlobalSelectionStore from 'app/stores/globalSelectionStore';
 import GroupStore from 'app/stores/groupStore';
+import SelectedGroupStore from 'app/stores/selectedGroupStore';
 import TagStore from 'app/stores/tagStore';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import Pagination from 'app/components/pagination';
 import SentryTypes from 'app/sentryTypes';
 import StreamGroup from 'app/components/stream/group';
+import StreamActions from 'app/views/stream/actions';
 import StreamFilters from 'app/views/stream/filters';
 import StreamSidebar from 'app/views/stream/sidebar';
 import parseApiError from 'app/utils/parseApiError';
@@ -43,6 +46,7 @@ const OrganizationStream = createReactClass({
   mixins: [
     Reflux.listenTo(GlobalSelectionStore, 'onSelectionChange'),
     Reflux.listenTo(GroupStore, 'onGroupChange'),
+    Reflux.listenTo(SelectedGroupStore, 'onSelectedGroupChange'),
     Reflux.listenTo(TagStore, 'onTagsChange'),
     ApiMixin,
   ],
@@ -67,7 +71,6 @@ const OrganizationStream = createReactClass({
       loading: false,
       selectAllActive: false,
       multiSelected: false,
-      anySelected: false,
       groupStatsPeriod,
       realtimeActive,
       pageLinks: '',
@@ -81,6 +84,10 @@ const OrganizationStream = createReactClass({
       processingIssues: null,
       tagsLoading: true,
       tags: TagStore.getAllTags(),
+      // the project for the selected issues
+      // Will only be set if selected issues all belong
+      // to one project.
+      selectedProject: null,
     };
   },
 
@@ -109,9 +116,14 @@ const OrganizationStream = createReactClass({
 
   componentWillUnmount() {
     this._poller.disable();
+    this.projectCache = {};
     GroupStore.reset();
   },
 
+  // Memoize projects fetched as selections are made
+  // This data is fed into the action toolbar for release data.
+  projectCache: {},
+
   getQueryParams() {
     let selection = this.state.selection;
     let params = {
@@ -150,7 +162,6 @@ const OrganizationStream = createReactClass({
       error: false,
     });
 
-    let url = this.getGroupListEndpoint();
     let requestParams = {
       ...this.getQueryParams(),
       limit: MAX_ITEMS,
@@ -168,7 +179,7 @@ const OrganizationStream = createReactClass({
 
     this._poller.disable();
 
-    this.lastRequest = this.api.request(url, {
+    this.lastRequest = this.api.request(this.getGroupListEndpoint(), {
       method: 'GET',
       data: qs.stringify(requestParams),
       success: (data, ignore, jqXHR) => {
@@ -182,7 +193,7 @@ const OrganizationStream = createReactClass({
             let redirect = `/${this.props.params
               .orgId}/${project.slug}/issues/${id}/events/${matchingEventId}/`;
 
-            // TODO set environment for the requested issue.
+            // TODO include global search query params
             browserHistory.replace(redirect);
             return;
           }
@@ -280,22 +291,12 @@ const OrganizationStream = createReactClass({
       // if query is the same, just re-fetch data
       this.fetchData();
     } else {
-      this.setState(
-        {
-          query,
-        },
-        this.transitionTo
-      );
+      this.setState({query}, this.transitionTo);
     }
   },
 
   onSortChange(sort) {
-    this.setState(
-      {
-        sort,
-      },
-      this.transitionTo
-    );
+    this.setState({sort}, this.transitionTo);
   },
 
   onTagsChange(tags) {
@@ -316,6 +317,37 @@ const OrganizationStream = createReactClass({
     });
   },
 
+  onSelectedGroupChange() {
+    let selected = SelectedGroupStore.getSelectedIds();
+    let projects = [...selected]
+      .map(id => GroupStore.get(id))
+      .map(group => group.project.slug);
+
+    let uniqProjects = uniq(projects);
+
+    // we only want selectedProject set if there is 1 project
+    // more or fewer should result in a null so that the action toolbar
+    // can behave correctly.
+    if (uniqProjects.length !== 1) {
+      this.setState({selectedProject: null});
+      return;
+    }
+    this.fetchProject(uniqProjects[0]);
+  },
+
+  fetchProject(projectSlug) {
+    if (projectSlug in this.projectCache) {
+      this.setState({selectedProject: this.projectCache[projectSlug]});
+      return;
+    }
+
+    let orgId = this.props.organization.slug;
+    fetchProject(this.api, orgId, projectSlug).then(project => {
+      this.projectCache[project.slug] = project;
+      this.setState({selectedProject: project});
+    });
+  },
+
   /**
    * Returns true if all results in the current query are visible/on this page
    */
@@ -417,10 +449,17 @@ const OrganizationStream = createReactClass({
     let {orgId} = this.props.params;
     let access = this.getAccess();
 
-    // In the project mode this reads from the project feature.
-    // There is no analogous property for organizations yet.
+    // If we have a selected project we can get release data
     let hasReleases = false;
-    let latestRelease = '';
+    let projectId = null;
+    let latestRelease = null;
+    let {selectedProject} = this.state;
+    if (selectedProject) {
+      let features = new Set(selectedProject.features);
+      hasReleases = features.has('releases');
+      latestRelease = selectedProject.latestRelease;
+      projectId = selectedProject.slug;
+    }
 
     return (
       <div className={classNames(classes)}>
@@ -442,6 +481,7 @@ const OrganizationStream = createReactClass({
           <Panel>
             <StreamActions
               orgId={params.orgId}
+              projectId={projectId}
               hasReleases={hasReleases}
               latestRelease={latestRelease}
               environment={this.state.environment}
@@ -470,8 +510,5 @@ const OrganizationStream = createReactClass({
   },
 });
 
-// Placeholder components to keep pull requests manageable.
-const StreamActions = props => <p>Stream actions are coming soon</p>;
-
 export default withOrganization(OrganizationStream);
 export {OrganizationStream};
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index aca52a4216..a38ac9591f 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -138,7 +138,7 @@ const StreamActions = createReactClass({
   propTypes: {
     allResultsVisible: PropTypes.bool,
     orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
+    projectId: PropTypes.string,
     groupIds: PropTypes.instanceOf(Array).isRequired,
     onRealtimeChange: PropTypes.func.isRequired,
     onSelectStatsPeriod: PropTypes.func.isRequired,
@@ -154,7 +154,11 @@ const StreamActions = createReactClass({
   mixins: [ApiMixin, Reflux.listenTo(SelectedGroupStore, 'onSelectedGroupChange')],
 
   getDefaultProps() {
-    return {hasReleases: false, latestRelease: null};
+    return {
+      projectId: '',
+      hasReleases: false,
+      latestRelease: null,
+    };
   },
 
   getInitialState() {
@@ -201,7 +205,6 @@ const StreamActions = createReactClass({
   onUpdate(data) {
     this.actionSelectedGroups(itemIds => {
       let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-
       this.api.bulkUpdate(
         {
           orgId: this.props.orgId,
@@ -316,6 +319,11 @@ const StreamActions = createReactClass({
     let confirm = getConfirm(numIssues, allInQuerySelected, query, queryCount);
     let label = getLabel(numIssues, allInQuerySelected);
 
+    // resolve and merge require a single project to be active
+    // in an org context projectId is null when 0 or >1 projects are selected.
+    let resolveDisabled = !(anySelected && projectId);
+    let mergeDisabled = !(multiSelected && projectId);
+
     return (
       <Sticky>
         <StyledFlex py={1}>
@@ -332,7 +340,7 @@ const StreamActions = createReactClass({
               shouldConfirm={this.shouldConfirm('resolve')}
               confirmMessage={confirm('resolve', true)}
               confirmLabel={label('resolve')}
-              disabled={!anySelected}
+              disabled={resolveDisabled}
             />
             <IgnoreActions
               onUpdate={this.onUpdate}
@@ -344,7 +352,7 @@ const StreamActions = createReactClass({
             <div className="btn-group hidden-sm hidden-xs">
               <ActionLink
                 className={'btn btn-default btn-sm action-merge'}
-                disabled={!multiSelected}
+                disabled={mergeDisabled}
                 onAction={this.onMerge}
                 shouldConfirm={this.shouldConfirm('merge')}
                 message={confirm('merge', false)}
@@ -378,7 +386,7 @@ const StreamActions = createReactClass({
                 <MenuItem noAnchor={true}>
                   <ActionLink
                     className={'action-merge hidden-md hidden-lg hidden-xl'}
-                    disabled={!multiSelected}
+                    disabled={mergeDisabled}
                     onAction={this.onMerge}
                     shouldConfirm={this.shouldConfirm('merge')}
                     message={confirm('merge', false)}
diff --git a/tests/js/spec/views/stream/actions.spec.jsx b/tests/js/spec/views/stream/actions.spec.jsx
index 2fbc8c4e98..33bd813a44 100644
--- a/tests/js/spec/views/stream/actions.spec.jsx
+++ b/tests/js/spec/views/stream/actions.spec.jsx
@@ -178,4 +178,31 @@ describe('StreamActions', function() {
       });
     });
   });
+
+  describe('missing projectId prop', function() {
+    beforeEach(function() {
+      wrapper = mount(
+        <StreamActions
+          query=""
+          orgId="1337"
+          groupIds={[1, 2, 3]}
+          onRealtimeChange={function() {}}
+          onSelectStatsPeriod={function() {}}
+          realtimeActive={false}
+          statsPeriod="24h"
+        />,
+        TestStubs.routerContext()
+      );
+    });
+
+    it('should disable resolve picker', function() {
+      let resolve = wrapper.find('ResolveActions').first();
+      expect(resolve.props().disabled).toBeTruthy();
+    });
+
+    it('should disable merge button', function() {
+      let merge = wrapper.find('ActionLink[className~="action-merge"]').first();
+      expect(merge.props().disabled).toBeTruthy();
+    });
+  });
 });
