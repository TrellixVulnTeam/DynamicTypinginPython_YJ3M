commit 850d606bc60edbfb621727462251403554397337
Author: William Mak <william@wmak.io>
Date:   Wed Jun 24 14:58:33 2020 -0400

    feat(discover): project confirmation (#19325)
    
    * feat(discover): Show a warning when a user tries expensive queries
    
    - When the user has a query that spans >=10 projects over 30 days show
      them a warning asking them to confirm
    - Adding a new projects-count endpoint to get counts of projects if `allProjects`
      or `myProjects` is selected

diff --git a/src/sentry/api/endpoints/organization_projects.py b/src/sentry/api/endpoints/organization_projects.py
index e2c8725196..b45dd91380 100644
--- a/src/sentry/api/endpoints/organization_projects.py
+++ b/src/sentry/api/endpoints/organization_projects.py
@@ -124,3 +124,13 @@ class OrganizationProjectsEndpoint(OrganizationEndpoint, EnvironmentMixin):
                 on_results=serialize_on_result,
                 paginator_cls=OffsetPaginator,
             )
+
+
+class OrganizationProjectsCountEndpoint(OrganizationEndpoint, EnvironmentMixin):
+    def get(self, request, organization):
+        queryset = Project.objects.filter(organization=organization)
+
+        all_projects = queryset.count()
+        my_projects = queryset.filter(teams__organizationmember__user=request.user).count()
+
+        return Response({"allProjects": all_projects, "myProjects": my_projects})
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index bb543e4fa5..a52c72c3af 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -127,7 +127,10 @@ from .endpoints.organization_pinned_searches import OrganizationPinnedSearchEndp
 from .endpoints.organization_plugins import OrganizationPluginsEndpoint
 from .endpoints.organization_plugins_configs import OrganizationPluginsConfigsEndpoint
 from .endpoints.organization_processingissues import OrganizationProcessingIssuesEndpoint
-from .endpoints.organization_projects import OrganizationProjectsEndpoint
+from .endpoints.organization_projects import (
+    OrganizationProjectsEndpoint,
+    OrganizationProjectsCountEndpoint,
+)
 from .endpoints.organization_recent_searches import OrganizationRecentSearchesEndpoint
 from .endpoints.organization_release_assemble import OrganizationReleaseAssembleEndpoint
 from .endpoints.organization_release_commits import OrganizationReleaseCommitsEndpoint
@@ -942,6 +945,11 @@ urlpatterns = [
                     OrganizationProjectsEndpoint.as_view(),
                     name="sentry-api-0-organization-projects",
                 ),
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/projects-count/$",
+                    OrganizationProjectsCountEndpoint.as_view(),
+                    name="sentry-api-0-organization-projects",
+                ),
                 url(
                     r"^(?P<organization_slug>[^\/]+)/sent-first-event/$",
                     OrganizationProjectsSentFirstEventEndpoint.as_view(),
diff --git a/src/sentry/static/sentry/app/actionCreators/projects.tsx b/src/sentry/static/sentry/app/actionCreators/projects.tsx
index 629ce9e984..8ab3b338bb 100644
--- a/src/sentry/static/sentry/app/actionCreators/projects.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/projects.tsx
@@ -337,3 +337,13 @@ export function loadDocs(
 ) {
   return api.requestPromise(`/projects/${orgSlug}/${projectSlug}/docs/${platform}/`);
 }
+
+/**
+ * Load the counts of my projects and all projects for the current user
+ *
+ * @param api API Client
+ * @param orgSlug Organization Slug
+ */
+export function fetchProjectsCount(api: Client, orgSlug: string) {
+  return api.requestPromise(`/organizations/${orgSlug}/projects-count/`);
+}
diff --git a/src/sentry/static/sentry/app/components/charts/eventsChart.tsx b/src/sentry/static/sentry/app/components/charts/eventsChart.tsx
index fd52da99a7..a58554136e 100644
--- a/src/sentry/static/sentry/app/components/charts/eventsChart.tsx
+++ b/src/sentry/static/sentry/app/components/charts/eventsChart.tsx
@@ -213,6 +213,7 @@ type Props = {
    * Overide the interval calculation and show daily results.
    */
   showDaily?: boolean;
+  confirmedQuery?: boolean;
 } & Pick<ChartProps, 'currentSeriesName' | 'previousSeriesName' | 'showLegend'>;
 
 type ChartDataProps = {
@@ -248,6 +249,7 @@ class EventsChart extends React.Component<Props> {
     field: PropTypes.arrayOf(PropTypes.string),
     showDaily: PropTypes.bool,
     orderby: PropTypes.string,
+    confirmedQuery: PropTypes.bool,
   };
 
   render() {
@@ -272,6 +274,7 @@ class EventsChart extends React.Component<Props> {
       showDaily,
       topEvents,
       orderby,
+      confirmedQuery,
       ...props
     } = this.props;
     // Include previous only on relative dates (defaults to relative if no start and end)
@@ -385,6 +388,7 @@ class EventsChart extends React.Component<Props> {
             field={field}
             orderby={orderby}
             topEvents={topEvents}
+            confirmedQuery={confirmedQuery}
           >
             {eventData =>
               chartImplementation({
diff --git a/src/sentry/static/sentry/app/components/charts/eventsRequest.tsx b/src/sentry/static/sentry/app/components/charts/eventsRequest.tsx
index 2a72a0c2e0..b61cfebb51 100644
--- a/src/sentry/static/sentry/app/components/charts/eventsRequest.tsx
+++ b/src/sentry/static/sentry/app/components/charts/eventsRequest.tsx
@@ -139,6 +139,11 @@ type EventsRequestPartialProps = {
    * How to order results when getting top events.
    */
   orderby?: string;
+  /**
+   * Discover needs confirmation to run >30 day >10 project queries,
+   * optional and when not passed confirmation is not required.
+   */
+  confirmedQuery?: boolean;
 };
 
 type TimeAggregationProps =
@@ -199,6 +204,8 @@ class EventsRequest extends React.PureComponent<EventsRequestProps, EventsReques
     keyTransactions: PropTypes.bool,
     topEvents: PropTypes.number,
     orderby: PropTypes.string,
+
+    confirmedQuery: PropTypes.bool,
   };
 
   static defaultProps: DefaultProps = {
@@ -236,9 +243,13 @@ class EventsRequest extends React.PureComponent<EventsRequestProps, EventsReques
   private unmounting: boolean = false;
 
   fetchData = async () => {
-    const {api, ...props} = this.props;
+    const {api, confirmedQuery, ...props} = this.props;
     let timeseriesData: EventsStats | MultiSeriesEventsStats | null = null;
 
+    if (confirmedQuery === false) {
+      return;
+    }
+
     this.setState(state => ({
       reloading: state.timeseriesData !== null,
       errored: false,
diff --git a/src/sentry/static/sentry/app/utils/discover/eventView.tsx b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
index 4b1d177bbe..d0115494d2 100644
--- a/src/sentry/static/sentry/app/utils/discover/eventView.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
@@ -534,6 +534,22 @@ class EventView {
     return decodeColumnOrder(this.fields);
   }
 
+  getDays(): number {
+    const statsPeriod = decodeScalar(this.statsPeriod);
+
+    if (statsPeriod && statsPeriod.endsWith('d')) {
+      return parseInt(statsPeriod.slice(0, -1), 10);
+    } else if (statsPeriod && statsPeriod.endsWith('h')) {
+      return parseInt(statsPeriod.slice(0, -1), 10) / 24;
+    } else if (this.start && this.end) {
+      return (
+        (new Date(this.end).getTime() - new Date(this.start).getTime()) /
+        (24 * 60 * 60 * 1000)
+      );
+    }
+    return 0;
+  }
+
   clone(): EventView {
     // NOTE: We rely on usage of Readonly from TypeScript to ensure we do not mutate
     //       the attributes of EventView directly. This enables us to quickly
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
index 210019c39a..5c33a144f0 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/results.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -7,15 +7,18 @@ import omit from 'lodash/omit';
 import isEqual from 'lodash/isEqual';
 
 import {Organization, GlobalSelection} from 'app/types';
+import {t, tct} from 'app/locale';
 import {PageContent} from 'app/styles/organization';
 import {Client} from 'app/api';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import {fetchTotalCount} from 'app/actionCreators/events';
 import {loadOrganizationTags} from 'app/actionCreators/tags';
+import {fetchProjectsCount} from 'app/actionCreators/projects';
 import Alert from 'app/components/alert';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
+import Confirm from 'app/components/confirm';
 import space from 'app/styles/space';
 import SearchBar from 'app/views/events/searchBar';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
@@ -49,6 +52,8 @@ type State = {
   errorCode: number;
   totalValues: null | number;
   showTags: boolean;
+  needConfirmation: boolean;
+  confirmedQuery: boolean;
 };
 const SHOW_TAGS_STORAGE_KEY = 'discover2:show-tags';
 
@@ -69,25 +74,27 @@ class Results extends React.Component<Props, State> {
     errorCode: 200,
     totalValues: null,
     showTags: readShowTagsState(),
+    needConfirmation: false,
+    confirmedQuery: false,
   };
 
   componentDidMount() {
     const {api, organization, selection} = this.props;
     loadOrganizationTags(api, organization.slug, selection);
     this.checkEventView();
-    this.fetchTotalCount();
+    this.canLoadEvents();
   }
 
   componentDidUpdate(prevProps: Props, prevState: State) {
     const {api, location, organization, selection} = this.props;
-    const {eventView} = this.state;
+    const {eventView, confirmedQuery} = this.state;
 
     this.checkEventView();
     const currentQuery = eventView.getEventsAPIPayload(location);
     const prevQuery = prevState.eventView.getEventsAPIPayload(prevProps.location);
     if (!isAPIPayloadSimilar(currentQuery, prevQuery)) {
       api.clear();
-      this.fetchTotalCount();
+      this.canLoadEvents();
       if (
         !isEqual(prevQuery.statsPeriod, currentQuery.statsPeriod) ||
         !isEqual(prevQuery.start, currentQuery.start) ||
@@ -97,12 +104,73 @@ class Results extends React.Component<Props, State> {
         loadOrganizationTags(api, organization.slug, selection);
       }
     }
+
+    if (prevState.confirmedQuery !== confirmedQuery) this.fetchTotalCount();
   }
 
+  canLoadEvents = async () => {
+    const {api, location, organization} = this.props;
+    const {eventView} = this.state;
+    let needConfirmation = false;
+    let confirmedQuery = true;
+    const currentQuery = eventView.getEventsAPIPayload(location);
+    const duration = eventView.getDays();
+
+    if (duration > 30 && currentQuery.project) {
+      let projectLength = currentQuery.project.length;
+
+      if (
+        projectLength === 0 ||
+        (projectLength === 1 && currentQuery.project[0] === '-1')
+      ) {
+        try {
+          const results = await fetchProjectsCount(api, organization.slug);
+
+          if (projectLength === 0) projectLength = results.myProjects;
+          else projectLength = results.allProjects;
+        } catch (err) {
+          // do nothing, so the length is 0 or 1 and the query is assumed safe
+        }
+      }
+
+      if (projectLength > 10) {
+        needConfirmation = true;
+        confirmedQuery = false;
+      }
+    }
+    // Once confirmed, a change of project or datetime will happen before this can set it to false,
+    // this means a query will still happen even if the new conditions need confirmation
+    // using a state callback to return this to false
+    this.setState({needConfirmation, confirmedQuery}, () => {
+      this.setState({confirmedQuery: false});
+    });
+    if (needConfirmation) {
+      this.openConfirm();
+    }
+  };
+
+  openConfirm = () => {};
+
+  setOpenFunction = ({open}) => {
+    this.openConfirm = open;
+    return null;
+  };
+
+  handleConfirmed = async () => {
+    this.setState({needConfirmation: false, confirmedQuery: true}, () => {
+      this.setState({confirmedQuery: false});
+    });
+  };
+
+  handleCancelled = () => {
+    this.setState({needConfirmation: false, confirmedQuery: false});
+  };
+
   async fetchTotalCount() {
     const {api, organization, location} = this.props;
-    const {eventView} = this.state;
-    if (!eventView.isValid()) {
+    const {eventView, confirmedQuery} = this.state;
+
+    if (confirmedQuery === false || !eventView.isValid()) {
       return;
     }
 
@@ -214,7 +282,7 @@ class Results extends React.Component<Props, State> {
 
   renderTagsTable() {
     const {organization, location} = this.props;
-    const {eventView, totalValues} = this.state;
+    const {eventView, totalValues, confirmedQuery} = this.state;
 
     return (
       <Layout.Side>
@@ -224,6 +292,7 @@ class Results extends React.Component<Props, State> {
           eventView={eventView}
           organization={organization}
           location={location}
+          confirmedQuery={confirmedQuery}
         />
       </Layout.Side>
     );
@@ -258,7 +327,14 @@ class Results extends React.Component<Props, State> {
 
   render() {
     const {organization, location, router} = this.props;
-    const {eventView, error, errorCode, totalValues, showTags} = this.state;
+    const {
+      eventView,
+      error,
+      errorCode,
+      totalValues,
+      showTags,
+      confirmedQuery,
+    } = this.state;
     const query = decodeScalar(location.query.query) || '';
     const title = this.getDocumentTitle();
 
@@ -290,6 +366,7 @@ class Results extends React.Component<Props, State> {
                   onAxisChange={this.handleYAxisChange}
                   onDisplayChange={this.handleDisplayChange}
                   total={totalValues}
+                  confirmedQuery={confirmedQuery}
                 />
               </Top>
               <Layout.Main fullWidth={!showTags}>
@@ -301,9 +378,34 @@ class Results extends React.Component<Props, State> {
                   setError={this.setError}
                   onChangeShowTags={this.handleChangeShowTags}
                   showTags={showTags}
+                  confirmedQuery={confirmedQuery}
                 />
               </Layout.Main>
               {showTags ? this.renderTagsTable() : null}
+              <Confirm
+                priority="primary"
+                header={<strong>{t('May lead to thumb twiddling')}</strong>}
+                confirmText={t('Do it')}
+                cancelText={t('Nevermind')}
+                onConfirm={this.handleConfirmed}
+                onCancel={this.handleCancelled}
+                message={
+                  <p>
+                    {tct(
+                      `You've created a query that will search for events made
+                      [dayLimit:over more than 30 days] for [projectLimit:more than 10 projects].
+                      A lot has happened during that time, so this might take awhile.
+                      Are you sure you want to do this?`,
+                      {
+                        dayLimit: <strong />,
+                        projectLimit: <strong />,
+                      }
+                    )}
+                  </p>
+                }
+              >
+                {this.setOpenFunction}
+              </Confirm>
             </Layout.Body>
           </LightWeightNoProjectMessage>
         </StyledPageContent>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
index 4f5bf81b8e..cef18415f0 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
@@ -24,6 +24,7 @@ type ResultsChartProps = {
   organization: Organization;
   eventView: EventView;
   location: Location;
+  confirmedQuery: boolean;
 };
 
 class ResultsChart extends React.Component<ResultsChartProps> {
@@ -39,7 +40,7 @@ class ResultsChart extends React.Component<ResultsChartProps> {
   }
 
   render() {
-    const {api, eventView, location, organization, router} = this.props;
+    const {api, eventView, location, organization, router, confirmedQuery} = this.props;
 
     const yAxisValue = eventView.getYAxis();
 
@@ -84,6 +85,7 @@ class ResultsChart extends React.Component<ResultsChartProps> {
               topEvents={isTopEvents ? 5 : undefined}
               orderby={isTopEvents ? decodeScalar(apiPayload.sort) : undefined}
               utc={utc === 'true'}
+              confirmedQuery={confirmedQuery}
             />
           ),
           fixed: 'events chart',
@@ -99,6 +101,7 @@ type ContainerProps = {
   eventView: EventView;
   location: Location;
   organization: Organization;
+  confirmedQuery: boolean;
 
   // chart footer props
   total: number | null;
@@ -111,7 +114,10 @@ class ResultsChartContainer extends React.Component<ContainerProps> {
     const {eventView, ...restProps} = this.props;
     const {eventView: nextEventView, ...restNextProps} = nextProps;
 
-    if (!eventView.isEqualTo(nextEventView)) {
+    if (
+      !eventView.isEqualTo(nextEventView) ||
+      this.props.confirmedQuery !== nextProps.confirmedQuery
+    ) {
       return true;
     }
 
@@ -128,6 +134,7 @@ class ResultsChartContainer extends React.Component<ContainerProps> {
       onAxisChange,
       onDisplayChange,
       organization,
+      confirmedQuery,
     } = this.props;
 
     const yAxisValue = eventView.getYAxis();
@@ -153,6 +160,7 @@ class ResultsChartContainer extends React.Component<ContainerProps> {
           location={location}
           organization={organization}
           router={router}
+          confirmedQuery={confirmedQuery}
         />
         <ChartFooter
           total={total}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index 458c5ab161..9b9b934876 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -24,6 +24,7 @@ type TableProps = {
   setError: (msg: string, code: number) => void;
   title: string;
   onChangeShowTags: () => void;
+  confirmedQuery: boolean;
 };
 
 type TableState = {
@@ -61,7 +62,8 @@ class Table extends React.PureComponent<TableProps, TableState> {
     // from an invalid view state to a valid one.
     if (
       (!this.state.isLoading && this.shouldRefetchData(prevProps)) ||
-      (prevProps.eventView.isValid() === false && this.props.eventView.isValid())
+      (prevProps.eventView.isValid() === false && this.props.eventView.isValid()) ||
+      prevProps.confirmedQuery !== this.props.confirmedQuery
     ) {
       this.fetchData();
     }
@@ -75,9 +77,9 @@ class Table extends React.PureComponent<TableProps, TableState> {
   };
 
   fetchData = () => {
-    const {eventView, organization, location, setError} = this.props;
+    const {eventView, organization, location, setError, confirmedQuery} = this.props;
 
-    if (!eventView.isValid()) {
+    if (!eventView.isValid() || !confirmedQuery) {
       return;
     }
 
@@ -87,6 +89,7 @@ class Table extends React.PureComponent<TableProps, TableState> {
     const url = `/organizations/${organization.slug}/eventsv2/`;
     const tableFetchID = Symbol('tableFetchID');
     const apiPayload = eventView.getEventsAPIPayload(location);
+
     setError('', 200);
 
     this.setState({isLoading: true, tableFetchID});
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
index e6adf6af10..11217dda8f 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
@@ -25,6 +25,7 @@ type Props = {
   eventView: EventView;
   location: Location;
   totalValues: null | number;
+  confirmedQuery?: boolean;
   generateUrl: (key: string, value: string) => LocationDescriptor;
 };
 
@@ -41,6 +42,7 @@ class Tags extends React.Component<Props, State> {
     organization: SentryTypes.Organization.isRequired,
     location: PropTypes.object.isRequired,
     eventView: PropTypes.object.isRequired,
+    confirmedQuery: PropTypes.bool,
   };
 
   state: State = {
@@ -55,7 +57,10 @@ class Tags extends React.Component<Props, State> {
   }
 
   componentDidUpdate(prevProps: Props) {
-    if (this.shouldRefetchData(prevProps)) {
+    if (
+      this.shouldRefetchData(prevProps) ||
+      prevProps.confirmedQuery !== this.props.confirmedQuery
+    ) {
       this.fetchData();
     }
   }
@@ -68,9 +73,13 @@ class Tags extends React.Component<Props, State> {
   };
 
   fetchData = async () => {
-    const {api, organization, eventView, location} = this.props;
+    const {api, organization, eventView, location, confirmedQuery} = this.props;
     this.setState({loading: true, error: '', tags: []});
 
+    if (confirmedQuery === false) {
+      return;
+    }
+
     try {
       const tags = await fetchTagFacets(
         api,
diff --git a/tests/js/spec/utils/discover/eventView.spec.jsx b/tests/js/spec/utils/discover/eventView.spec.jsx
index 3f636bfbdb..70d4770155 100644
--- a/tests/js/spec/utils/discover/eventView.spec.jsx
+++ b/tests/js/spec/utils/discover/eventView.spec.jsx
@@ -1165,6 +1165,37 @@ describe('EventView.numOfColumns()', function() {
   });
 });
 
+describe('EventView.getDays()', function() {
+  it('returns the right number of days for statsPeriod', function() {
+    const eventView = new EventView({
+      statsPeriod: '14d',
+    });
+
+    expect(eventView.getDays()).toBe(14);
+
+    const eventView2 = new EventView({
+      statsPeriod: '12h',
+    });
+
+    expect(eventView2.getDays()).toBe(0.5);
+  });
+
+  it('returns the right number of days for start/end', function() {
+    const eventView = new EventView({
+      start: '2019-10-01T00:00:00',
+      end: '2019-10-02T00:00:00',
+    });
+
+    expect(eventView.getDays()).toBe(1);
+
+    const eventView2 = new EventView({
+      start: '2019-10-01T00:00:00',
+      end: '2019-10-15T00:00:00',
+    });
+    expect(eventView2.getDays()).toBe(14);
+  });
+});
+
 describe('EventView.clone()', function() {
   it('returns a unique instance', function() {
     const state = {
diff --git a/tests/js/spec/views/eventsV2/results.spec.jsx b/tests/js/spec/views/eventsV2/results.spec.jsx
index 04b5a83995..1e4d62444e 100644
--- a/tests/js/spec/views/eventsV2/results.spec.jsx
+++ b/tests/js/spec/views/eventsV2/results.spec.jsx
@@ -36,6 +36,10 @@ describe('EventsV2 > Results', function() {
       url: '/organizations/org-slug/projects/',
       body: [],
     });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/projects-count/',
+      body: {myProjects: 10, allProjects: 300},
+    });
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/tags/',
       body: [],
@@ -329,4 +333,128 @@ describe('EventsV2 > Results', function() {
     expect(options).not.toContain('option-dailytop5');
     expect(options).toContain('option-default');
   });
+
+  it('needs confirmation on long queries', async function() {
+    const organization = TestStubs.Organization({
+      features: ['discover-basic'],
+      projects: [TestStubs.Project()],
+    });
+
+    const initialData = initializeOrg({
+      organization,
+      router: {
+        location: {query: {...generateFields(), statsPeriod: '60d', project: '-1'}},
+      },
+    });
+
+    const wrapper = mountWithTheme(
+      <Results
+        organization={organization}
+        location={initialData.router.location}
+        router={initialData.router}
+      />,
+      initialData.routerContext
+    );
+
+    await tick();
+
+    const results = wrapper.find('Results');
+
+    expect(results.state('needConfirmation')).toEqual(true);
+  });
+
+  it('needs confirmation on long query with explicit projects', async function() {
+    const organization = TestStubs.Organization({
+      features: ['discover-basic'],
+      projects: [TestStubs.Project()],
+    });
+
+    const initialData = initializeOrg({
+      organization,
+      router: {
+        location: {
+          query: {
+            ...generateFields(),
+            statsPeriod: '60d',
+            project: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
+          },
+        },
+      },
+    });
+
+    const wrapper = mountWithTheme(
+      <Results
+        organization={organization}
+        location={initialData.router.location}
+        router={initialData.router}
+      />,
+      initialData.routerContext
+    );
+
+    await tick();
+
+    const results = wrapper.find('Results');
+
+    expect(results.state('needConfirmation')).toEqual(true);
+  });
+
+  it('does not need confirmation on short queries', async function() {
+    const organization = TestStubs.Organization({
+      features: ['discover-basic'],
+      projects: [TestStubs.Project()],
+    });
+
+    const initialData = initializeOrg({
+      organization,
+      router: {
+        location: {query: {...generateFields(), statsPeriod: '30d', project: '-1'}},
+      },
+    });
+
+    const wrapper = mountWithTheme(
+      <Results
+        organization={organization}
+        location={initialData.router.location}
+        router={initialData.router}
+      />,
+      initialData.routerContext
+    );
+
+    await tick();
+
+    const results = wrapper.find('Results');
+
+    expect(results.state('needConfirmation')).toEqual(false);
+  });
+
+  it('does not need confirmation with to few projects', async function() {
+    const organization = TestStubs.Organization({
+      features: ['discover-basic'],
+      projects: [TestStubs.Project()],
+    });
+
+    const initialData = initializeOrg({
+      organization,
+      router: {
+        location: {
+          query: {...generateFields(), statsPeriod: '90d', project: [1, 2, 3, 4]},
+        },
+      },
+    });
+
+    const wrapper = mountWithTheme(
+      <Results
+        organization={organization}
+        location={initialData.router.location}
+        router={initialData.router}
+      />,
+      initialData.routerContext
+    );
+
+    await tick();
+
+    const results = wrapper.find('Results');
+
+    expect(results.state('needConfirmation')).toEqual(false);
+  });
 });
diff --git a/tests/sentry/api/endpoints/test_organization_projects.py b/tests/sentry/api/endpoints/test_organization_projects.py
index 212494fe45..ff19d3b7f7 100644
--- a/tests/sentry/api/endpoints/test_organization_projects.py
+++ b/tests/sentry/api/endpoints/test_organization_projects.py
@@ -9,17 +9,9 @@ from sentry.testutils import APITestCase
 
 
 class OrganizationProjectsTest(APITestCase):
-    @fixture
-    def org(self):
-        return self.create_organization(owner=self.user, name="baz")
-
-    @fixture
-    def team(self):
-        return self.create_team(organization=self.org)
-
     @fixture
     def path(self):
-        return u"/api/0/organizations/{}/projects/".format(self.org.slug)
+        return u"/api/0/organizations/{}/projects/".format(self.organization.slug)
 
     def check_valid_response(self, response, expected_projects):
         assert response.status_code == 200, response.content
@@ -33,7 +25,7 @@ class OrganizationProjectsTest(APITestCase):
 
         response = self.client.get(self.path)
         self.check_valid_response(response, [project])
-        assert self.client.session["activeorg"] == self.org.slug
+        assert self.client.session["activeorg"] == self.organization.slug
 
     def test_with_stats(self):
         self.login_as(user=self.user)
@@ -127,7 +119,7 @@ class OrganizationProjectsTest(APITestCase):
 
     def test_team_filter(self):
         self.login_as(user=self.user)
-        other_team = self.create_team(organization=self.org)
+        other_team = self.create_team(organization=self.organization)
 
         project_bar = self.create_project(teams=[self.team], name="bar", slug="bar")
         project_foo = self.create_project(teams=[other_team], name="foo", slug="foo")
@@ -141,7 +133,7 @@ class OrganizationProjectsTest(APITestCase):
         self.check_valid_response(response, [project_baz, project_foo])
 
     def test_api_key(self):
-        key = ApiKey.objects.create(organization=self.org, scope_list=["org:read"])
+        key = ApiKey.objects.create(organization=self.organization, scope_list=["org:read"])
 
         project = self.create_project(teams=[self.team])
 
@@ -152,7 +144,7 @@ class OrganizationProjectsTest(APITestCase):
 
     def test_all_projects(self):
         self.login_as(user=self.user)
-        other_team = self.create_team(organization=self.org)
+        other_team = self.create_team(organization=self.organization)
 
         project_bar = self.create_project(teams=[self.team], name="bar", slug="bar")
         project_foo = self.create_project(teams=[other_team], name="foo", slug="foo")
@@ -167,17 +159,43 @@ class OrganizationProjectsTest(APITestCase):
         self.foo_user = self.create_user("foo@example.com")
         self.login_as(user=self.foo_user)
 
-        other_team = self.create_team(organization=self.org)
+        other_team = self.create_team(organization=self.organization)
 
         project_bar = self.create_project(teams=[self.team], name="bar", slug="bar")
         self.create_project(teams=[other_team], name="foo", slug="foo")
         self.create_project(teams=[other_team], name="baz", slug="baz")
 
         # Make foo_user a part of the org and self.team
-        self.create_member(organization=self.org, user=self.foo_user, teams=[self.team])
+        self.create_member(organization=self.organization, user=self.foo_user, teams=[self.team])
 
         foo_user_projects = [project_bar]
 
         response = self.client.get(self.path + "?query=is_member:1")
         # Verify projects that were returned were foo_users projects
         self.check_valid_response(response, foo_user_projects)
+
+
+class OrganizationProjectsCountTest(APITestCase):
+    @fixture
+    def path(self):
+        return u"/api/0/organizations/{}/projects-count/".format(self.organization.slug)
+
+    def test_project_count(self):
+        self.foo_user = self.create_user("foo@example.com")
+        self.login_as(user=self.foo_user)
+
+        other_team = self.create_team(organization=self.organization)
+
+        self.create_project(teams=[self.team], name="bar", slug="bar")
+        self.create_project(teams=[self.team], name="bar1", slug="bar1")
+        self.create_project(teams=[self.team], name="bar2", slug="bar2")
+        self.create_project(teams=[self.team], name="bar3", slug="bar3")
+        self.create_project(teams=[other_team], name="foo", slug="foo")
+        self.create_project(teams=[other_team], name="baz", slug="baz")
+
+        # Make foo_user a part of the org and self.team
+        self.create_member(organization=self.organization, user=self.foo_user, teams=[self.team])
+
+        response = self.client.get(self.path + "?get_counts=1")
+        assert response.status_code == 200, response.content
+        assert response.data == {"allProjects": 6, "myProjects": 4}
