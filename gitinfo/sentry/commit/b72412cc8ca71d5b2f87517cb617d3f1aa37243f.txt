commit b72412cc8ca71d5b2f87517cb617d3f1aa37243f
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Wed Mar 18 10:04:16 2020 +0100

    feat(org-data-privacy-rules): added data privacy rules - org level (#17720)

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index 32ed7f6fd9..0538edc1eb 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -140,6 +140,7 @@ class OrganizationSerializer(serializers.Serializer):
     require2FA = serializers.BooleanField(required=False)
     trustedRelays = ListField(child=serializers.CharField(), required=False)
     allowJoinRequests = serializers.BooleanField(required=False)
+    relayPiiConfig = serializers.CharField(required=False, allow_blank=True, allow_null=True)
 
     @memoize
     def _has_legacy_rate_limits(self):
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 52d45d653e..c1cdbfd114 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -206,6 +206,9 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
                 "allowJoinRequests": bool(
                     obj.get_option("sentry:join_requests", JOIN_REQUESTS_DEFAULT)
                 ),
+                "relayPiiConfig": six.text_type(
+                    obj.get_option("sentry:relay_pii_config")
+                ),
             }
         )
         context["access"] = access.scopes
diff --git a/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx b/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx
index 599be1ca2e..23f91a2bee 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx
@@ -1,7 +1,5 @@
-import React from 'react';
-
 import {extractMultilineFields} from 'app/utils';
-import {t, tct} from 'app/locale';
+import {t} from 'app/locale';
 import {
   STORE_CRASH_REPORTS_VALUES,
   formatStoreCrashReports,
@@ -123,37 +121,6 @@ const organizationSecurityAndPrivacy: Array<JsonFormObject> = [
           ),
         },
       },
-      {
-        name: 'relayPiiConfig',
-        type: 'string',
-        label: t('Advanced datascrubber configuration'),
-        placeholder: t('Paste a JSON configuration here.'),
-        multiline: true,
-        monospace: true,
-        autosize: true,
-        inline: false,
-        maxRows: 20,
-        help: tct(
-          'Advanced JSON-based configuration for datascrubbing. Applied in addition to the settings above. This list of rules can be extended on a per-project level, but never overridden. [learn_more:Learn more]',
-          {
-            learn_more: (
-              <a href="https://docs.sentry.io/data-management/advanced-datascrubbing/" />
-            ),
-          }
-        ),
-        visible: ({features}) => features.has('datascrubbers-v2'),
-        validate: ({id, form}) => {
-          if (form[id] === '') {
-            return [];
-          }
-          try {
-            JSON.parse(form[id]);
-          } catch (e) {
-            return [[id, e.toString().replace(/^SyntaxError: JSON.parse: /, '')]];
-          }
-          return [];
-        },
-      },
       {
         name: 'scrapeJavaScript',
         type: 'boolean',
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyRulesPanel.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx
similarity index 83%
rename from src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyRulesPanel.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx
index ae3c68cb2d..75338e902a 100644
--- a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyRulesPanel.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx
@@ -2,10 +2,9 @@ import React from 'react';
 import styled from '@emotion/styled';
 import omit from 'lodash/omit';
 
-import AlertLink from 'app/components/alertLink';
 import space from 'app/styles/space';
 import {t} from 'app/locale';
-import {Panel, PanelHeader, PanelBody} from 'app/components/panels';
+import {Panel, PanelHeader, PanelAlert, PanelBody} from 'app/components/panels';
 import Button from 'app/components/button';
 import {IconAdd} from 'app/icons/iconAdd';
 import ButtonBar from 'app/components/buttonBar';
@@ -15,14 +14,15 @@ import {
   addLoadingMessage,
   addSuccessMessage,
 } from 'app/actionCreators/indicator';
+import Link from 'app/components/links/link';
 
-import ProjectDataPrivacyRulesForm from './projectDataPrivacyRulesForm';
+import DataPrivacyRulesPanelForm from './dataPrivacyRulesPanelForm';
 import {RULE_TYPE, METHOD_TYPE} from './utils';
 
 const INDICATORS_DURATION = 500;
 const DEFAULT_RULE_FROM_VALUE = '$string';
 
-type Rule = React.ComponentProps<typeof ProjectDataPrivacyRulesForm>['rule'];
+type Rule = React.ComponentProps<typeof DataPrivacyRulesPanelForm>['rule'];
 
 type PiiConfig = {
   type: RULE_TYPE;
@@ -39,9 +39,9 @@ type PiiConfigRule = {
 type Applications = {[key: string]: Array<string>};
 
 type Props = {
-  orgId: string;
-  projectId: string;
+  endpoint: string;
   relayPiiConfig?: string;
+  panelHeaderSubTitle?: React.ReactNode;
 };
 
 type State = {
@@ -50,7 +50,7 @@ type State = {
   relayPiiConfig?: string;
 };
 
-class ProjectDataPrivacyRulesPanel extends React.Component<Props, State> {
+class DataPrivacyRulesPanel extends React.Component<Props, State> {
   state: State = {
     rules: [],
     savedRules: [],
@@ -152,7 +152,7 @@ class ProjectDataPrivacyRulesPanel extends React.Component<Props, State> {
   };
 
   handleSubmit = async () => {
-    const {orgId, projectId} = this.props;
+    const {endpoint} = this.props;
     const {rules} = this.state;
     let customRulesCounter = 0;
     const applications: Applications = {};
@@ -191,7 +191,7 @@ class ProjectDataPrivacyRulesPanel extends React.Component<Props, State> {
     const relayPiiConfig = JSON.stringify(piiConfig);
 
     await this.api
-      .requestPromise(`/projects/${orgId}/${projectId}/`, {
+      .requestPromise(endpoint, {
         method: 'PUT',
         data: {relayPiiConfig},
       })
@@ -241,25 +241,29 @@ class ProjectDataPrivacyRulesPanel extends React.Component<Props, State> {
   };
 
   render() {
+    const {panelHeaderSubTitle} = this.props;
     const {rules, savedRules} = this.state;
     const hideButtonBar = savedRules.length === 0 && rules.length === 0;
     return (
       <React.Fragment>
         <Panel>
-          <PanelHeader>{t('Data Privacy Rules')}</PanelHeader>
-          <AlertLink
-            priority="info"
-            icon="icon-docs"
-            href="https://docs.sentry.io/data-management/advanced-datascrubbing/"
-            size="small"
-            openInNewTab
-            withoutMarginBottom
-          >
-            {t('Check out how to use advanced datascrubbing')}
-          </AlertLink>
+          <StyledPanelHeader>
+            {t('Data Privacy Rules')}
+            {panelHeaderSubTitle && (
+              <PanelHeaderSubTitle>{panelHeaderSubTitle}</PanelHeaderSubTitle>
+            )}
+          </StyledPanelHeader>
+          <PanelAlert type="info" icon="icon-docs">
+            <Link
+              href="https://docs.sentry.io/data-management/advanced-datascrubbing/"
+              target="_blank"
+            >
+              {t('Check out how to use advanced datascrubbing')}
+            </Link>
+          </PanelAlert>
           <PanelBody>
             {rules.map(rule => (
-              <ProjectDataPrivacyRulesForm
+              <DataPrivacyRulesPanelForm
                 key={rule.id}
                 onDelete={this.handleDeleteRule}
                 onChange={this.handleChange}
@@ -290,7 +294,20 @@ class ProjectDataPrivacyRulesPanel extends React.Component<Props, State> {
   }
 }
 
-export default ProjectDataPrivacyRulesPanel;
+export default DataPrivacyRulesPanel;
+
+const StyledPanelHeader = styled(PanelHeader)`
+  display: grid;
+  grid-gap: ${space(1)};
+`;
+
+const PanelHeaderSubTitle = styled('div')`
+  color: ${p => p.theme.gray2};
+  font-size: ${p => p.theme.fontSizeMedium};
+  line-height: 1.4;
+  text-transform: initial;
+  font-weight: normal;
+`;
 
 const PanelAction = styled('div')`
   padding: ${space(2)} ${space(3)};
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyRulesForm.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
similarity index 97%
rename from src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyRulesForm.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
index 499d0a30a0..7c884d6c94 100644
--- a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyRulesForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
@@ -35,7 +35,7 @@ type State = {
     [key: string]: string;
   };
 };
-class ProjectDataPrivacyRulesForm extends React.PureComponent<Props, State> {
+class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
   state: State = {
     errors: {},
   };
@@ -92,29 +92,28 @@ class ProjectDataPrivacyRulesForm extends React.PureComponent<Props, State> {
       <Wrapper hasError={Object.keys(errors).length > 0}>
         <WrapperFields>
           <StyledSelectControl
-            placeholder={t('Select type')}
-            name="type"
-            options={Object.values(RULE_TYPE).map(value => ({
-              label: getRuleTypeSelectorFieldLabel(value),
+            placeholder={t('Select method')}
+            name="method"
+            options={Object.values(METHOD_TYPE).map(value => ({
+              label: getMethodTypeSelectorFieldLabel(value),
               value,
             }))}
             height={40}
-            value={type}
-            onChange={({value}) => this.handleChange('type', value)}
+            value={method}
+            onChange={({value}) => this.handleChange('method', value)}
             openOnFocus
             required
           />
-
           <StyledSelectControl
-            placeholder={t('Select method')}
-            name="method"
-            options={Object.values(METHOD_TYPE).map(value => ({
-              label: getMethodTypeSelectorFieldLabel(value),
+            placeholder={t('Select type')}
+            name="type"
+            options={Object.values(RULE_TYPE).map(value => ({
+              label: getRuleTypeSelectorFieldLabel(value),
               value,
             }))}
             height={40}
-            value={method}
-            onChange={({value}) => this.handleChange('method', value)}
+            value={type}
+            onChange={({value}) => this.handleChange('type', value)}
             openOnFocus
             required
           />
@@ -158,7 +157,7 @@ class ProjectDataPrivacyRulesForm extends React.PureComponent<Props, State> {
   }
 }
 
-export default ProjectDataPrivacyRulesForm;
+export default DataPrivacyRulesForm;
 
 const Wrapper = styled('div')<{hasError?: boolean}>`
   padding: ${p => `${space(p.hasError ? 4 : 2)} ${space(3)}`};
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/utils.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/utils.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/projectDataPrivacy/utils.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/utils.tsx
diff --git a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
index 15047e4821..ae803daaa9 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
@@ -13,6 +13,8 @@ import {updateOrganization} from 'app/actionCreators/organizations';
 import organizationSecurityAndPrivacy from 'app/data/forms/organizationSecurityAndPrivacy';
 import SentryTypes from 'app/sentryTypes';
 
+import DataPrivacyRulesPanel from '../components/dataPrivacyRulesPanel/dataPrivacyRulesPanel';
+
 type Props = {
   organization: Organization;
   params: {
@@ -30,7 +32,10 @@ class OrganizationSecurityAndPrivacyContent extends AsyncView<Props> {
 
   getEndpoints(): ReturnType<AsyncView['getEndpoints']> {
     const {orgId} = this.props.params;
-    return [['authProvider', `/organizations/${orgId}/auth-provider/`]];
+    return [
+      ['data', `/organizations/${orgId}/`],
+      ['authProvider', `/organizations/${orgId}/auth-provider/`],
+    ];
   }
 
   handleSave = (data: Organization) => {
@@ -47,6 +52,7 @@ class OrganizationSecurityAndPrivacyContent extends AsyncView<Props> {
     const endpoint = `/organizations/${orgId}/`;
     const access = new Set(organization.access);
     const features = new Set(organization.features);
+    const relayPiiConfig = this.state.data?.relayPiiConfig;
 
     return (
       <React.Fragment>
@@ -70,6 +76,11 @@ class OrganizationSecurityAndPrivacyContent extends AsyncView<Props> {
             disabled={!access.has('org:write')}
           />
         </Form>
+        <DataPrivacyRulesPanel
+          panelHeaderSubTitle={t('This can also be configured per-project')}
+          endpoint={endpoint}
+          relayPiiConfig={relayPiiConfig}
+        />
       </React.Fragment>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
index 4ecdad7c12..55152092eb 100644
--- a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
@@ -1,7 +1,9 @@
 import React from 'react';
 import PropTypes from 'prop-types';
+import styled from '@emotion/styled';
 
-import {t} from 'app/locale';
+import Link from 'app/components/links/link';
+import {t, tct} from 'app/locale';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import JsonForm from 'app/views/settings/components/forms/jsonForm';
 import Form from 'app/views/settings/components/forms/form';
@@ -11,7 +13,7 @@ import ProjectActions from 'app/actions/projectActions';
 import {Organization} from 'app/types';
 import SentryTypes from 'app/sentryTypes';
 
-import ProjectDataPrivacyRulesPanel from './projectDataPrivacyRulesPanel';
+import DataPrivacyRulesPanel from '../components/dataPrivacyRulesPanel/dataPrivacyRulesPanel';
 
 type Props = {
   organization: Organization;
@@ -74,9 +76,22 @@ class ProjectDataPrivacyContent extends AsyncView<Props> {
             ]}
           />
         </Form>
-        <ProjectDataPrivacyRulesPanel
-          orgId={orgId}
-          projectId={projectId}
+        <DataPrivacyRulesPanel
+          panelHeaderSubTitle={
+            <PanelHeaderSubTitle>
+              {tct(
+                'This can also be configured organization-wide in [linkToOrganizationSecurityAndPrivacy]',
+                {
+                  linkToOrganizationSecurityAndPrivacy: (
+                    <Link to={`/settings/${orgId}/security-and-privacy/`}>
+                      {t('Organization Security and Privacy')}
+                    </Link>
+                  ),
+                }
+              )}
+            </PanelHeaderSubTitle>
+          }
+          endpoint={endpoint}
           relayPiiConfig={relayPiiConfig}
         />
       </React.Fragment>
@@ -85,3 +100,9 @@ class ProjectDataPrivacyContent extends AsyncView<Props> {
 }
 
 export default ProjectDataPrivacyContent;
+
+const PanelHeaderSubTitle = styled('div')`
+  display: grid;
+  grid-gap: 4px;
+  grid-template-columns: auto 1fr;
+`;
diff --git a/tests/js/spec/views/settings/organizationSecurityAndPrivacy.spec.jsx b/tests/js/spec/views/settings/organizationSecurityAndPrivacy.spec.jsx
index b306526797..95948b7d3a 100644
--- a/tests/js/spec/views/settings/organizationSecurityAndPrivacy.spec.jsx
+++ b/tests/js/spec/views/settings/organizationSecurityAndPrivacy.spec.jsx
@@ -14,6 +14,12 @@ describe('OrganizationSecurityAndPrivacy', function() {
       url: `/organizations/${organization.slug}/auth-provider/`,
       method: 'GET',
     });
+
+    MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/`,
+      method: 'GET',
+    });
+
     organization.features = ['datascrubbers-v2'];
   });
 
@@ -121,10 +127,10 @@ describe('OrganizationSecurityAndPrivacy', function() {
 
     await tick();
     wrapper.update();
+
     expect(wrapper.find('Switch[name="require2FA"]')).toHaveLength(1);
     wrapper.find('Switch[name="require2FA"]').simulate('click');
     expect(wrapper.find('Field[name="require2FA"] ModalDialog')).toHaveLength(1);
-
     // Confirm
     wrapper
       .find(
