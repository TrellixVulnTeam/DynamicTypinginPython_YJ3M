commit 8d6cd519302074093c36520d7af7bc67e3c2e877
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Thu Apr 18 16:27:47 2019 +0200

    feat(symbolicator): Show errors while fetching CFI files (#12817)
    
    * feat(symbolicator): Show errors while fetching CFI files
    
    * ref: Add more comments
    
    * ref: Move out methods and add unit tests
    
    * ref: Move status fields to constant

diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 601c073ad6..61e15ed407 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import
 import uuid
 import logging
 import posixpath
-import six
 
 from symbolic import parse_addr, find_best_instruction, arch_get_ip_reg_name, \
     ObjectLookup
@@ -13,13 +12,13 @@ from sentry.plugins import Plugin2
 from sentry.lang.native.cfi import reprocess_minidump_with_cfi
 from sentry.lang.native.minidump import is_minidump_event
 from sentry.lang.native.symbolizer import Symbolizer, SymbolicationFailed
-from sentry.lang.native.symbolicator import run_symbolicator
+from sentry.lang.native.symbolicator import run_symbolicator, merge_symbolicator_image
 from sentry.lang.native.utils import get_sdk_from_event, cpu_name_from_data, \
-    rebase_addr, signal_from_data, image_name
+    rebase_addr, signal_from_data
 from sentry.lang.native.systemsymbols import lookup_system_symbols
 from sentry.models.eventerror import EventError
 from sentry.utils import metrics
-from sentry.utils.in_app import is_known_third_party, is_optional_package
+from sentry.utils.in_app import is_known_third_party
 from sentry.utils.safe import get_path
 from sentry.stacktraces import StacktraceProcessor
 from sentry.reprocessing import report_processing_issue
@@ -253,44 +252,9 @@ class NativeStacktraceProcessor(StacktraceProcessor):
 
         assert len(self.images) == len(rv['modules']), (self.images, rv)
 
-        for image, fetched_debug_file in zip(self.images, rv['modules']):
-            status = fetched_debug_file.pop('status')
-            # Set image data from symbolicator as symbolicator might know more
-            # than the SDK, especially for minidumps
-            for k, v in six.iteritems(fetched_debug_file):
-                if not (v is None or (k, v) == ('arch', 'unknown')):
-                    image[k] = v
-
-            if status in ('found', 'unused'):
-                continue
-            elif status == 'missing_debug_file':
-                package = fetched_debug_file.get('code_file')
-                if not package or is_known_third_party(package, sdk_info=self.sdk_info):
-                    continue
-
-                if is_optional_package(package, sdk_info=self.sdk_info):
-                    error = SymbolicationFailed(
-                        type=EventError.NATIVE_MISSING_OPTIONALLY_BUNDLED_DSYM)
-                else:
-                    error = SymbolicationFailed(type=EventError.NATIVE_MISSING_DSYM)
-            elif status == 'malformed_debug_file':
-                error = SymbolicationFailed(type=EventError.NATIVE_BAD_DSYM)
-            elif status == 'too_large':
-                error = SymbolicationFailed(type=EventError.FETCH_TOO_LARGE)
-            elif status == 'fetching_failed':
-                error = SymbolicationFailed(type=EventError.FETCH_GENERIC_ERROR)
-            elif status == 'other':
-                error = SymbolicationFailed(type=EventError.UNKNOWN_ERROR)
-            else:
-                logger.error("Unknown status: %s", status)
-                continue
-
-            error.image_arch = image.get('arch')
-            error.image_path = image.get('code_file')
-            error.image_name = image_name(image.get('code_file'))
-            error.image_uuid = image.get('debug_id')
-            self.data.setdefault('errors', []) \
-                .extend(self._handle_symbolication_failed(error))
+        for image, complete_image in zip(self.images, rv['modules']):
+            merge_symbolicator_image(image, complete_image, self.sdk_info,
+                                     self._handle_symbolication_failed)
 
         assert len(stacktraces) == len(rv['stacktraces'])
 
@@ -342,7 +306,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                     continue
                 pf.data['symbolserver_match'] = symrv
 
-    def _handle_symbolication_failed(self, e):
+    def _handle_symbolication_failed(self, e, errors=None):
         # User fixable but fatal errors are reported as processing
         # issues
         if e.is_user_fixable and e.is_fatal:
@@ -362,15 +326,15 @@ class NativeStacktraceProcessor(StacktraceProcessor):
         # up at all.  We want to keep this here though in case we
         # do not want to report some processing issues (eg:
         # optional difs)
-        errors = []
+        if errors is None:
+            errors = self.data.setdefault('errors', [])
+
         if e.is_user_fixable or e.is_sdk_failure:
             errors.append(e.get_data())
         else:
             logger.debug('Failed to symbolicate with native backend',
                          exc_info=True)
 
-        return errors
-
     def process_frame(self, processable_frame, processing_task):
         frame = processable_frame.frame
         raw_frame = dict(frame)
@@ -406,7 +370,8 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                     else:
                         return None, [raw_frame], []
             except SymbolicationFailed as e:
-                errors = self._handle_symbolication_failed(e)
+                errors = []
+                self._handle_symbolication_failed(e, errors=errors)
                 return [raw_frame], [raw_frame], errors
 
             _ignored = None  # Used to be in_app
diff --git a/src/sentry/lang/native/symbolicator.py b/src/sentry/lang/native/symbolicator.py
index 65dea75888..4bf1da487a 100644
--- a/src/sentry/lang/native/symbolicator.py
+++ b/src/sentry/lang/native/symbolicator.py
@@ -13,7 +13,11 @@ from requests.exceptions import RequestException
 from sentry import options
 from sentry.auth.system import get_system_token
 from sentry.cache import default_cache
+from sentry.lang.native.symbolizer import SymbolicationFailed
+from sentry.lang.native.utils import image_name
+from sentry.models.eventerror import EventError
 from sentry.utils import json, metrics
+from sentry.utils.in_app import is_known_third_party, is_optional_package
 from sentry.net.http import Session
 from sentry.tasks.store import RetrySymbolication
 
@@ -117,6 +121,13 @@ SOURCES_SCHEMA = {
 }
 
 
+IMAGE_STATUS_FIELDS = frozenset((
+    'status',  # TODO(markus): Legacy key. Remove after next deploy
+    'unwind_status',
+    'debug_status'
+))
+
+
 class InvalidSourcesError(Exception):
     pass
 
@@ -317,3 +328,56 @@ def _create_symbolication_task(sess, base_url, project_id, sources,
         scope=project_id,
     )
     return sess.post(url, json=request)
+
+
+def merge_symbolicator_image(raw_image, complete_image, sdk_info, handle_symbolication_failed):
+    statuses = set()
+
+    # Set image data from symbolicator as symbolicator might know more
+    # than the SDK, especially for minidumps
+    for k, v in six.iteritems(complete_image):
+        if k in IMAGE_STATUS_FIELDS:
+            statuses.add(v)
+        elif not (v is None or (k, v) == ('arch', 'unknown')):
+            raw_image[k] = v
+
+    for status in set(statuses):
+        handle_symbolicator_status(status, raw_image, sdk_info, handle_symbolication_failed)
+
+
+def handle_symbolicator_status(status, image, sdk_info, handle_symbolication_failed):
+    if status in ('found', 'unused'):
+        return
+    elif status in (
+        'missing_debug_file',  # TODO(markus): Legacy key. Remove after next deploy
+        'missing'
+    ):
+        package = image.get('code_file')
+        if not package or is_known_third_party(package, sdk_info=sdk_info):
+            return
+
+        if is_optional_package(package, sdk_info=sdk_info):
+            error = SymbolicationFailed(
+                type=EventError.NATIVE_MISSING_OPTIONALLY_BUNDLED_DSYM)
+        else:
+            error = SymbolicationFailed(type=EventError.NATIVE_MISSING_DSYM)
+    elif status in (
+        'malformed_debug_file',  # TODO(markus): Legacy key. Remove after next deploy
+        'malformed'
+    ):
+        error = SymbolicationFailed(type=EventError.NATIVE_BAD_DSYM)
+    elif status == 'too_large':
+        error = SymbolicationFailed(type=EventError.FETCH_TOO_LARGE)
+    elif status == 'fetching_failed':
+        error = SymbolicationFailed(type=EventError.FETCH_GENERIC_ERROR)
+    elif status == 'other':
+        error = SymbolicationFailed(type=EventError.UNKNOWN_ERROR)
+    else:
+        logger.error("Unknown status: %s", status)
+        return
+
+    error.image_arch = image.get('arch')
+    error.image_path = image.get('code_file')
+    error.image_name = image_name(image.get('code_file'))
+    error.image_uuid = image.get('debug_id')
+    handle_symbolication_failed(error)
diff --git a/tests/sentry/lang/native/test_symbolicator.py b/tests/sentry/lang/native/test_symbolicator.py
new file mode 100644
index 0000000000..dc4e2af1d1
--- /dev/null
+++ b/tests/sentry/lang/native/test_symbolicator.py
@@ -0,0 +1,107 @@
+"""
+This file is intended for unit tests that don't require fixtures or a live
+service. Most tests live in tests/symbolicator/
+"""
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.models.eventerror import EventError
+
+from sentry.lang.native.symbolicator import merge_symbolicator_image
+
+
+def test_merge_symbolicator_image_empty():
+    errors = []
+    merge_symbolicator_image({}, {}, None, errors.append)
+    assert not errors
+
+
+def test_merge_symbolicator_image_basic():
+    raw_image = {"instruction_addr": 0xFEEBEE, "other": "foo"}
+    sdk_info = {"sdk_name": "linux"}
+    complete_image = {
+        "debug_status": "found",
+        "unwind_status": "found",
+        "other2": "bar",
+        "arch": "unknown",
+    }
+    errors = []
+
+    merge_symbolicator_image(raw_image, complete_image, sdk_info, errors.append)
+
+    assert not errors
+    assert raw_image == {"instruction_addr": 0xFEEBEE, "other": "foo", "other2": "bar"}
+
+
+def test_merge_symbolicator_image_basic_success():
+    raw_image = {"instruction_addr": 0xFEEBEE, "other": "foo"}
+    sdk_info = {"sdk_name": "linux"}
+    complete_image = {
+        "debug_status": "found",
+        "unwind_status": "found",
+        "other2": "bar",
+        "arch": "foo",
+    }
+    errors = []
+
+    merge_symbolicator_image(raw_image, complete_image, sdk_info, errors.append)
+
+    assert not errors
+    assert raw_image == {
+        "instruction_addr": 0xFEEBEE,
+        "other": "foo",
+        "other2": "bar",
+        "arch": "foo",
+    }
+
+
+def test_merge_symbolicator_image_remove_unknown_arch():
+    raw_image = {"instruction_addr": 0xFEEBEE}
+    sdk_info = {"sdk_name": "linux"}
+    complete_image = {
+        "debug_status": "found",
+        "unwind_status": "found",
+        "arch": "unknown",
+    }
+    errors = []
+
+    merge_symbolicator_image(raw_image, complete_image, sdk_info, errors.append)
+
+    assert not errors
+    assert raw_image == {"instruction_addr": 0xFEEBEE}
+
+
+@pytest.mark.parametrize(
+    "code_file,error",
+    [
+        ("/var/containers/Bundle/Application/asdf/foo", EventError.NATIVE_MISSING_DSYM),
+        ("/var/containers/Bundle/Application/asdf/Frameworks/foo",
+         EventError.NATIVE_MISSING_OPTIONALLY_BUNDLED_DSYM),
+    ],
+)
+def test_merge_symbolicator_image_errors(code_file, error):
+    raw_image = {"instruction_addr": 0xFEEBEE, "other": "foo", "code_file": code_file}
+    sdk_info = {"sdk_name": "macos"}
+    complete_image = {
+        "debug_status": "found",
+        "unwind_status": "missing",
+        "other2": "bar",
+        "arch": "unknown",
+    }
+    errors = []
+
+    merge_symbolicator_image(raw_image, complete_image, sdk_info, errors.append)
+
+    e, = errors
+
+    assert e.image_name == "foo"
+    assert e.type == error
+
+    assert raw_image == {
+        "instruction_addr": 0xFEEBEE,
+        "other": "foo",
+        "other2": "bar",
+        "code_file": code_file,
+    }
