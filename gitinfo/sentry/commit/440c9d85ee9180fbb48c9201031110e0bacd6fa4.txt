commit 440c9d85ee9180fbb48c9201031110e0bacd6fa4
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Dec 12 11:36:15 2017 -0800

    feat(workflow): New Org Settings (#6582)
    
    * feat(react): Add react views for Org Auth Provider
    
    * feat(settings): New settings area
    
    * ref(ui): Rename Org/Project Store
    
    * "OrganizationStore" --> "OrganizationsStore"
    * "ProjectStore" --> "ProjectsStore"
    
    * fix(ui): Propagate new org form changes
    
    * feat(ui): Add store for last active org/project
    
    * fix(ui): Fix AsyncComponent to potentially allow for errors
    
    * fix(ui): Disabled buttons should not follow links
    
    * feat(ui): Add org nav hooks in new settings area
    
    * fix(settings): Temp remove getsentry urls
    
    * fix(settings): Redirect when org slug changes
    
    * fix(ui): Show org/project name in settings breadcrumb
    
    * fix(settings): Add save on enter

diff --git a/.babelrc b/.babelrc
index c8177e75eb..ba7f96da6b 100644
--- a/.babelrc
+++ b/.babelrc
@@ -11,6 +11,8 @@
     ]
   ],
   "plugins": [
+    "emotion",
+    "transform-decorators-legacy",
     "transform-class-properties",
     "transform-object-rest-spread",
     "lodash",
@@ -19,29 +21,25 @@
     [
       "babel-plugin-transform-builtin-extend",
       {
-        "globals": [
-          "Array"
-        ]
+        "globals": ["Array"]
       }
     ],
     "idx"
   ],
   "env": {
     "test": {
-      "presets": [
-        "react",
-        "latest"
-      ],
+      "presets": ["react", "latest"],
       "plugins": [
+        "emotion",
+        "transform-decorators-legacy",
         "transform-class-properties",
         "transform-object-rest-spread",
         "dynamic-import-node",
+        "syntax-dynamic-import",
         [
           "babel-plugin-transform-builtin-extend",
           {
-            "globals": [
-              "Array"
-            ]
+            "globals": ["Array"]
           }
         ],
         "idx"
diff --git a/docs-ui/components/autoComplete.stories.js b/docs-ui/components/autoComplete.stories.js
new file mode 100644
index 0000000000..e52e7db5bd
--- /dev/null
+++ b/docs-ui/components/autoComplete.stories.js
@@ -0,0 +1,83 @@
+import React from 'react';
+import {storiesOf} from '@storybook/react';
+import {withInfo} from '@storybook/addon-info';
+// import {action} from '@storybook/addon-actions';
+
+import AutoComplete from 'sentry-ui/autoComplete';
+
+const items = [
+  {
+    name: 'Apple',
+  },
+  {
+    name: 'Pineapple',
+  },
+  {
+    name: 'Orange',
+  },
+];
+
+storiesOf('AutoComplete', module).add(
+  'default',
+  withInfo('Description')(() => (
+    <AutoComplete itemToString={item => item.name}>
+      {({
+        getRootProps,
+        getInputProps,
+        getMenuProps,
+        getItemProps,
+        inputValue,
+        selectedItem,
+        highlightedIndex,
+        isOpen,
+      }) => {
+        return (
+          <div {...getRootProps({style: {position: 'relative'}})}>
+            <input {...getInputProps({})} />
+
+            {isOpen && (
+              <div
+                {...getMenuProps({
+                  style: {
+                    boxShadow:
+                      '0 1px 4px 1px rgba(47,40,55,0.08), 0 4px 16px 0 rgba(47,40,55,0.12)',
+                    position: 'absolute',
+                    backgroundColor: 'white',
+                    padding: '0',
+                  },
+                })}
+              >
+                <div>
+                  {items
+                    .filter(
+                      item =>
+                        item.name.toLowerCase().indexOf(inputValue.toLowerCase()) > -1
+                    )
+                    .map((item, index) => (
+                      <div
+                        key={item.name}
+                        {...getItemProps({
+                          item,
+                          index,
+                          style: {
+                            cursor: 'pointer',
+                            padding: '6px 12px',
+                            backgroundColor:
+                              index === highlightedIndex
+                                ? 'rgba(0, 0, 0, 0.02)'
+                                : undefined,
+                          },
+                        })}
+                      >
+                        {item.name}
+                      </div>
+                    ))}
+                </div>
+              </div>
+            )}
+          </div>
+        );
+      }}
+    </AutoComplete>
+  ))
+);
diff --git a/docs-ui/components/form.stories.js b/docs-ui/components/form.stories.js
index 9d363300ca..dfdb56a0cf 100644
--- a/docs-ui/components/form.stories.js
+++ b/docs-ui/components/form.stories.js
@@ -1,10 +1,26 @@
 import React from 'react';
+import PropTypes from 'prop-types';
 import {storiesOf} from '@storybook/react';
 import {withInfo} from '@storybook/addon-info';
 import {action} from '@storybook/addon-actions';
 
 import {Form, TextField, PasswordField, BooleanField} from 'sentry-ui/forms';
 
+class UndoButton extends React.Component {
+  static contextTypes = {
+    form: PropTypes.object
+  };
+
+  handleClick = e => {
+    e.preventDefault();
+    this.context.form.undo();
+  };
+
+  render() {
+    return <button type="button" onClick={this.handleClick}> Undo</button>;
+  }
+}
+
 // eslint-disable-next-line
 storiesOf('Forms/Form', module)
   .add('empty', withInfo('Empty form')(() => <Form onSubmit={action('submit')} />))
@@ -13,13 +29,28 @@ storiesOf('Forms/Form', module)
     withInfo('Adds a "Cancel" button when `onCancel` is defined')(() => (
       <Form onCancel={action('cancel')} onSubmit={action('submit')} />
     ))
+  )
+  .add(
+    'save on blur and undo',
+    withInfo('Saves on blur and has undo')(() => (
+      <Form saveOnBlur allowUndo>
+        <TextField
+          name="name"
+          label="Team Name"
+          placeholder="e.g. Operations, Web, Desktop"
+          required
+        />
+        <TextField name="slug" label="Short name" placeholder="e.g. api-team" />
+        <UndoButton />
+      </Form>
+    ))
   );
 
 storiesOf('Forms/Fields', module)
   .add(
     'TextField',
     withInfo('Simple text input')(() => (
-      <div>
+      <Form saveOnBlur allowUndo>
         <TextField
           name="name"
           label="Team Name"
@@ -27,20 +58,22 @@ storiesOf('Forms/Fields', module)
           required
         />
         <TextField name="slug" label="Short name" placeholder="e.g. api-team" />
-      </div>
+      </Form>
     ))
   )
   .add(
     'PasswordField',
-    withInfo('Password input')(() => {
-      <div>
-        <PasswordField name="password" />
-      </div>;
-    })
+    withInfo('Password input')(() => (
+      <Form>
+        <PasswordField hasSavedValue name="password" label="password" />
+      </Form>
+    ))
   )
   .add(
     'BooleanField',
-    withInfo('Boolean field (i.e. checkbox)')(() => {
-      <BooleanField name="field" />;
-    })
+    withInfo('Boolean field (i.e. checkbox)')(() => (
+      <Form>
+        <BooleanField name="field" />
+      </Form>
+    ))
   );
diff --git a/package.json b/package.json
index 09c2b6918a..671c931f66 100644
--- a/package.json
+++ b/package.json
@@ -11,10 +11,12 @@
     "babel-loader": "^7.1.2",
     "babel-plugin-add-module-exports": "^0.2.1",
     "babel-plugin-dynamic-import-node": "^1.0.2",
+    "babel-plugin-emotion": "^8.0.2-11",
     "babel-plugin-idx": "^1.5.1",
     "babel-plugin-lodash": "^3.2.11",
     "babel-plugin-transform-builtin-extend": "^1.1.0",
     "babel-plugin-transform-class-properties": "^6.24.1",
+    "babel-plugin-transform-decorators-legacy": "^1.3.4",
     "babel-plugin-transform-object-rest-spread": "^6.20.2",
     "babel-polyfill": "6.20.0",
     "babel-preset-latest": "^6.16.0",
@@ -26,10 +28,13 @@
     "crypto-js": "3.1.5",
     "css-loader": "^0.28.2",
     "diff": "^3.3.0",
+    "emotion": "^8.0.2-12",
+    "emotion-theming": "^8.0.2-10",
     "enzyme-to-json": "^1.5.1",
     "extract-text-webpack-plugin": "^3.0.0",
     "file-loader": "0.8.4",
     "gettext-parser": "1.1.1",
+    "grid-emotion": "^2.1.0",
     "history": "1.13.0",
     "idx": "^1.5.0",
     "ios-device-list": "^1.1.28",
@@ -42,6 +47,8 @@
     "lodash": "^4.17.4",
     "lodash-webpack-plugin": "^0.11.4",
     "marked": "0.3.5",
+    "mobx": "^3.2.2",
+    "mobx-react": "^4.2.2",
     "mockdate": "2.0.2",
     "moment": "2.10.6",
     "moment-timezone": "0.4.1",
@@ -60,6 +67,7 @@
     "react-code-input": "1.0.8",
     "react-document-title": "1.0.4",
     "react-dom": "15.3.2",
+    "react-emotion": "^8.0.2-12 ",
     "react-hot-loader": "^3.0.0-beta.7",
     "react-icon-base": "^2.0.4",
     "react-lazy-load": "3.0.10",
@@ -68,6 +76,7 @@
     "react-sparklines": "1.6.0",
     "react-sticky": "5.0.4",
     "reflux": "0.4.1",
+    "scroll-to-element": "^2.0.0",
     "select2": "3.5.1",
     "sprintf-js": "1.0.3",
     "style-loader": "0.12.4",
@@ -107,6 +116,7 @@
     "setupFiles": [
       "<rootDir>/tests/js/setup.js"
     ],
+    "setupTestFrameworkScriptFile": "<rootDir>/tests/js/setupFramework.js",
     "testPathIgnorePatterns": [
       "<rootDir>/tests/sentry/lang/javascript/"
     ],
@@ -133,6 +143,7 @@
     "eslint-plugin-import": "^2.7.0",
     "eslint-plugin-react": "7.4.0",
     "jest": "21.2.1",
+    "jest-glamor-react": "^3.1.2",
     "prettier": "1.7.4",
     "sinon": "1.17.2",
     "sinon-chai": "2.8.0",
diff --git a/scripts/devproxy.js b/scripts/devproxy.js
index d0c6b11be4..57f7c9a536 100644
--- a/scripts/devproxy.js
+++ b/scripts/devproxy.js
@@ -47,4 +47,9 @@ const server = http.createServer(function(req, res) {
     console.log('Proxy target not responding');
   }
 });
+
+server.on('error', function() {
+  console.log('devproxy error', arguments);
+});
+
 server.listen(WEBPACK_DEV_PROXY);
diff --git a/src/sentry/static/sentry/app/actionCreators/members.jsx b/src/sentry/static/sentry/app/actionCreators/members.jsx
new file mode 100644
index 0000000000..8eedf9e446
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/members.jsx
@@ -0,0 +1,44 @@
+import MemberActions from '../actions/memberActions';
+
+export function updateMember(api, params) {
+  MemberActions.update(params.memberId, params.data);
+
+  let endpoint = `/organizations/${params.orgId}/members/${params.memberId}/`;
+  return new Promise((resolve, reject) =>
+    api.request(endpoint, {
+      method: 'PUT',
+      data: params.data,
+      success: data => {
+        MemberActions.updateSuccess(data);
+        resolve(data);
+      },
+      error: data => {
+        MemberActions.updateError(data);
+        reject(data);
+      }
+    })
+  );
+}
+
+export function resendMemberInvite(api, params) {
+  MemberActions.resendMemberInvite(params.orgId, params.data);
+
+  let endpoint = `/organizations/${params.orgId}/members/${params.memberId}/`;
+  return new Promise((resolve, reject) =>
+    api.request(endpoint, {
+      method: 'PUT',
+      data: {
+        regenerate: params.regenerate,
+        reinvite: true
+      },
+      success: data => {
+        MemberActions.resendMemberInviteSuccess(data);
+        resolve(data);
+      },
+      error: data => {
+        MemberActions.resendMemberInviteError(data);
+        reject(data);
+      }
+    })
+  );
+}
diff --git a/src/sentry/static/sentry/app/actionCreators/organizations.jsx b/src/sentry/static/sentry/app/actionCreators/organizations.jsx
new file mode 100644
index 0000000000..80ad999d54
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/organizations.jsx
@@ -0,0 +1,56 @@
+import {browserHistory} from 'react-router';
+
+import IndicatorStore from '../stores/indicatorStore';
+import OrganizationsStore from '../stores/organizationsStore';
+import OrganizationsActions from '../actions/organizationsActions';
+
+export function redirectToRemainingOrganization({orgId}) {
+  // Remove queued, should redirect
+  let allOrgs = OrganizationsStore.getAll().filter(org => org.slug !== orgId);
+  if (!allOrgs.length) {
+    // This is bad...
+    return;
+  }
+
+  // Let's be smart and select the best org to redirect to
+  let firstRemainingOrg = allOrgs[0];
+  browserHistory.push(`/${firstRemainingOrg.slug}/`);
+}
+
+export function remove(api, {successMessage, errorMessage, orgId} = {}) {
+  let endpoint = `/organizations/${orgId}/`;
+  return api
+    .requestPromise(endpoint, {
+      method: 'DELETE',
+    })
+    .then(data => {
+      OrganizationsActions.removeSuccess(orgId);
+
+      if (successMessage) {
+        IndicatorStore.add(successMessage, 'success', {duration: 3000});
+      }
+    })
+    .catch(err => {
+      OrganizationsActions.removeError();
+
+      if (errorMessage) {
+        IndicatorStore.add(errorMessage, 'error', {duration: 3000});
+      }
+    });
+}
+
+export function removeAndRedirectToRemainingOrganization(api, params) {
+  remove(api, params).then(() => redirectToRemainingOrganization(params));
+}
+
+export function setActiveOrganization(org) {
+  OrganizationsActions.setActive(org);
+}
+
+export function changeOrganizationSlug(prev, next) {
+  OrganizationsActions.changeSlug(prev, next);
+}
+
+export function updateOrganization(org) {
+  OrganizationsActions.update(org);
+}
diff --git a/src/sentry/static/sentry/app/actionCreators/projects.jsx b/src/sentry/static/sentry/app/actionCreators/projects.jsx
index 49c97b03d6..b1de48fca5 100644
--- a/src/sentry/static/sentry/app/actionCreators/projects.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/projects.jsx
@@ -30,3 +30,7 @@ export function loadStats(api, params) {
     },
   });
 }
+
+export function setActiveProject(project) {
+  ProjectActions.setActive(project);
+}
diff --git a/src/sentry/static/sentry/app/actionCreators/settingsIndicator.jsx b/src/sentry/static/sentry/app/actionCreators/settingsIndicator.jsx
new file mode 100644
index 0000000000..34e9be2980
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/settingsIndicator.jsx
@@ -0,0 +1,38 @@
+import {DEFAULT_TOAST_DURATION} from '../constants';
+import SettingsIndicatorActions from '../actions/settingsIndicatorActions';
+
+let clearId;
+
+export function remove() {
+  SettingsIndicatorActions.remove();
+}
+
+export function undo() {
+  SettingsIndicatorActions.undo();
+}
+
+export function addMessage(msg, type, options = {}) {
+  let {duration} = options;
+
+  // use default only if undefined, as 0 is a valid duration
+  duration = typeof duration === 'undefined' ? DEFAULT_TOAST_DURATION : duration;
+
+  SettingsIndicatorActions.add(msg, type, options);
+
+  // clear existing timeout if exists
+  if (duration && clearId) {
+    window.clearTimeout(clearId);
+  }
+
+  if (duration) {
+    clearId = window.setTimeout(remove, duration);
+  }
+}
+
+export function addErrorMessage(msg, duration, options = {}) {
+  addMessage(msg, 'error', {...options, duration});
+}
+
+export function addSuccessMessage(msg, duration, options = {}) {
+  addMessage(msg, 'success', {...options, duration});
+}
diff --git a/src/sentry/static/sentry/app/actions/memberActions.jsx b/src/sentry/static/sentry/app/actions/memberActions.jsx
new file mode 100644
index 0000000000..45a68cac4d
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/memberActions.jsx
@@ -0,0 +1,13 @@
+import Reflux from 'reflux';
+
+const MemberActions = Reflux.createActions([
+  'createSuccess',
+  'update',
+  'updateError',
+  'updateSuccess',
+  'resendMemberInvite',
+  'resendMemberInviteSuccess',
+  'resendMemberInviteError'
+]);
+
+export default MemberActions;
diff --git a/src/sentry/static/sentry/app/actions/organizationsActions.jsx b/src/sentry/static/sentry/app/actions/organizationsActions.jsx
new file mode 100644
index 0000000000..93ed8098f5
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/organizationsActions.jsx
@@ -0,0 +1,12 @@
+import Reflux from 'reflux';
+
+const OrganizationsActions = Reflux.createActions([
+  'update',
+  'setActive',
+  'changeSlug',
+  'remove',
+  'removeSuccess',
+  'removeError',
+]);
+
+export default OrganizationsActions;
diff --git a/src/sentry/static/sentry/app/actions/projectActions.jsx b/src/sentry/static/sentry/app/actions/projectActions.jsx
index 21e3874c7d..a89b4f4f3d 100644
--- a/src/sentry/static/sentry/app/actions/projectActions.jsx
+++ b/src/sentry/static/sentry/app/actions/projectActions.jsx
@@ -10,4 +10,5 @@ export default Reflux.createActions([
   'loadStatsSuccess',
   'openDiffModal',
   'closeDiffModal',
+  'setActive',
 ]);
diff --git a/src/sentry/static/sentry/app/actions/settingsIndicatorActions.jsx b/src/sentry/static/sentry/app/actions/settingsIndicatorActions.jsx
new file mode 100644
index 0000000000..648f67812d
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/settingsIndicatorActions.jsx
@@ -0,0 +1,5 @@
+import Reflux from 'reflux';
+
+const SettingsIndicatorActions = Reflux.createActions(['add', 'remove', 'undo']);
+
+export default SettingsIndicatorActions;
diff --git a/src/sentry/static/sentry/app/components/asyncComponent.jsx b/src/sentry/static/sentry/app/components/asyncComponent.jsx
index da40750c2c..1a5fc7eed1 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.jsx
@@ -22,7 +22,11 @@ class AsyncComponent extends React.Component {
   }
 
   componentWillReceiveProps(nextProps) {
-    if (!isEqual(this.props.params, nextProps.params)) {
+    // re-fetch data when router params change
+    if (
+      !isEqual(this.props.params, nextProps.params) ||
+      this.props.location.search !== nextProps.location.search
+    ) {
       this.remountComponent();
     }
   }
@@ -54,6 +58,7 @@ class AsyncComponent extends React.Component {
   // TODO(dcramer): we'd like to support multiple initial api requests
   fetchData() {
     let endpoints = this.getEndpoints();
+
     if (!endpoints.length) {
       this.setState({
         loading: false,
@@ -61,13 +66,16 @@ class AsyncComponent extends React.Component {
       });
       return;
     }
+
     // TODO(dcramer): this should cancel any existing API requests
     this.setState({
       loading: true,
       error: false,
       remainingRequests: endpoints.length,
     });
-    endpoints.forEach(([stateKey, endpoint, params]) => {
+
+    endpoints.forEach(([stateKey, endpoint, params, options]) => {
+      options = options || {};
       this.api.request(endpoint, {
         method: 'GET',
         ...params,
@@ -77,10 +85,16 @@ class AsyncComponent extends React.Component {
               [stateKey]: data,
               remainingRequests: prevState.remainingRequests - 1,
               loading: prevState.remainingRequests > 1,
+              pageLinks: jqXHR.getResponseHeader('Link'),
             };
           });
         },
         error: error => {
+          // Allow endpoints to fail
+          if (options.allowError && options.allowError(error)) {
+            error = null;
+          }
+
           this.setState(prevState => {
             return {
               [stateKey]: null,
@@ -90,7 +104,7 @@ class AsyncComponent extends React.Component {
               },
               remainingRequests: prevState.remainingRequests - 1,
               loading: prevState.remainingRequests > 1,
-              error: true,
+              error: !!error,
             };
           });
         },
@@ -100,11 +114,15 @@ class AsyncComponent extends React.Component {
 
   // DEPRECATED: use getEndpoints()
   getEndpointParams() {
+    // eslint-disable-next-line no-console
+    console.warn('getEndpointParams is deprecated');
     return {};
   }
 
   // DEPRECATED: use getEndpoints()
   getEndpoint() {
+    // eslint-disable-next-line no-console
+    console.warn('getEndpoint is deprecated');
     return null;
   }
 
@@ -148,6 +166,7 @@ AsyncComponent.errorHandler = (component, fn) => {
       return fn(...args);
     } catch (err) {
       /*eslint no-console:0*/
+      console.error(err);
       setTimeout(() => {
         throw err;
       });
diff --git a/src/sentry/static/sentry/app/components/autoComplete.jsx b/src/sentry/static/sentry/app/components/autoComplete.jsx
new file mode 100644
index 0000000000..fc00a4c6e2
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/autoComplete.jsx
@@ -0,0 +1,223 @@
+/**
+ * Inspired by [Downshift](https://github.com/paypal/downshift)
+ *
+ * Implemented with a stripped-down, compatible API for our use case.
+ * May be worthwhile to switch if we find we need more features
+ *
+ * Basic idea is that we call `children` with props necessary to render with any sort of component structure.
+ * This component handles logic like when the dropdown menu should be displayed, as well as handling keyboard input, how
+ * it is rendered should be left to the child.
+ */
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import DropdownMenu from './dropdownMenu';
+
+// Checks if `fn` is a function and calls it with `args`
+const callIfFunction = (fn, ...args) => typeof fn === 'function' && fn(...args);
+
+class AutoComplete extends React.Component {
+  static propTypes = {
+    /**
+     * Must be a function that returns a component
+     */
+    children: PropTypes.func.isRequired,
+    itemToString: PropTypes.func.isRequired,
+    defaultHighlightedIndex: PropTypes.number,
+    defaultInputValue: PropTypes.string,
+    isOpen: PropTypes.bool,
+    onSelect: PropTypes.func,
+  };
+
+  static defaultProps = {
+    itemToString: i => i,
+  };
+
+  constructor(props) {
+    super(props);
+
+    this.state = {
+      isOpen: !!props.isOpen,
+      highlightedIndex: props.defaultHighlightedIndex || 0,
+      inputValue: props.defaultInputValue || '',
+    };
+
+    this.items = new Map();
+  }
+
+  componentWillReceiveProps() {
+    this.resetHighlightState();
+  }
+
+  componentWillUpdate() {
+    this.items.clear();
+  }
+
+  /**
+   * Resets `this.items` and `this.state.highlightedIndex`.
+   * Should be called whenever `inputValue` changes.
+   */
+  resetHighlightState = () => {
+    // reset items and expect `getInputProps` in child to give us a list of new items
+    this.setState({
+      highlightedIndex: this.props.defaultHighlightedIndex || 0,
+    });
+  };
+
+  handleInputChange = ({onChange} = {}, e) => {
+    let value = e.target.value;
+
+    // We force `isOpen: true` here because:
+    // 1) it's possible to have menu closed but input with focus (i.e. hitting "Esc")
+    // 2) you select an item, input still has focus, and then change input
+    this.setState({
+      inputValue: value,
+      isOpen: true,
+    });
+
+    callIfFunction(onChange, e);
+  };
+
+  handleInputFocus = ({onFocus} = {}, e) => {
+    this.openMenu();
+
+    callIfFunction(onFocus, e);
+  };
+
+  /**
+   *
+   * We need this delay because we want to close the menu when input
+   * is blurred (i.e. clicking or via keyboard). However we have to handle the
+   * case when we want to click on the dropdown and causes focus.
+   *
+   * Clicks outside should close the dropdown immediately via <DropdownMenu />,
+   * however blur via keyboard will have a 200ms delay
+   */
+  handleInputBlur = ({onBlur} = {}, e) => {
+    this.blurTimer = setTimeout(() => {
+      this.closeMenu();
+      callIfFunction(onBlur, e);
+    }, 200);
+  };
+
+  handleInputKeyDown = ({onKeyDown} = {}, e) => {
+    let shouldSelectWithEnter =
+      e.key === 'Enter' && this.items.size && this.items.has(this.state.highlightedIndex);
+
+    if (shouldSelectWithEnter) {
+      this.handleSelect(this.items.get(this.state.highlightedIndex));
+      e.preventDefault();
+    }
+
+    if (e.key === 'ArrowUp') {
+      this.moveHighlightedIndex(-1);
+      e.preventDefault();
+    }
+
+    if (e.key === 'ArrowDown') {
+      this.moveHighlightedIndex(1);
+      e.preventDefault();
+    }
+
+    if (e.key === 'Escape') {
+      this.closeMenu();
+    }
+
+    callIfFunction(onKeyDown, e);
+  };
+
+  handleItemClick = ({onClick, item, index} = {}, e) => {
+    if (this.blurTimer) clearTimeout(this.blurTimer);
+    this.setState({highlightedIndex: index});
+    this.handleSelect(item, e);
+    callIfFunction(onClick, item, e);
+  };
+
+  /**
+   * When an item is selected via clicking or using the keyboard (e.g. pressing "Enter")
+   */
+  handleSelect = item => {
+    let {onSelect, itemToString} = this.props;
+
+    callIfFunction(onSelect, item);
+
+    this.closeMenu();
+    this.setState({inputValue: itemToString(item)});
+  };
+
+  moveHighlightedIndex = (step, e) => {
+    let listSize = this.items.size - 1;
+    let newIndex = this.state.highlightedIndex + step;
+
+    // Make sure new index is within bounds
+    newIndex = Math.max(0, Math.min(newIndex, listSize));
+
+    this.setState({
+      highlightedIndex: newIndex,
+    });
+  };
+
+  openMenu = () => {
+    this.setState({
+      isOpen: true,
+    });
+  };
+
+  closeMenu = () => {
+    this.setState({
+      isOpen: false,
+    });
+  };
+
+  getInputProps = inputProps => ({
+    ...inputProps,
+    value: this.state.inputValue,
+    onChange: this.handleInputChange.bind(this, inputProps),
+    onKeyDown: this.handleInputKeyDown.bind(this, inputProps),
+    onFocus: this.handleInputFocus.bind(this, inputProps),
+    onBlur: this.handleInputBlur.bind(this, inputProps),
+  });
+
+  getItemProps = ({item, index, ...props} = {}) => {
+    if (!item) {
+      // eslint-disable-next-line no-console
+      console.warn('getItemProps requires an object with an `item` key');
+    }
+
+    let newIndex = index || this.items.size;
+    this.items.set(newIndex, item);
+
+    return {
+      ...props,
+      onClick: this.handleItemClick.bind(this, {item, index: newIndex, ...props}),
+    };
+  };
+
+  getMenuProps = props => ({
+    ...props,
+  });
+
+  render() {
+    let {children} = this.props;
+
+    return (
+      <DropdownMenu
+        isOpen={this.state.isOpen}
+        onClickOutside={() => this.setState({isOpen: false})}
+      >
+        {dropdownMenuProps =>
+          children({
+            ...dropdownMenuProps,
+            getInputProps: props => {
+              return dropdownMenuProps.getActorProps(this.getInputProps(props));
+            },
+            getItemProps: this.getItemProps,
+            inputValue: this.state.inputValue,
+            highlightedIndex: this.state.highlightedIndex,
+          })}
+      </DropdownMenu>
+    );
+  }
+}
+
+export default AutoComplete;
diff --git a/src/sentry/static/sentry/app/components/avatar.jsx b/src/sentry/static/sentry/app/components/avatar.jsx
index d227fb4e5c..972010b5b5 100644
--- a/src/sentry/static/sentry/app/components/avatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar.jsx
@@ -95,7 +95,7 @@ const Avatar = React.createClass({
     }
 
     return (
-      <span className={this.props.className}>
+      <span className={this.props.className} style={this.props.style}>
         {this.state.showBackupAvatar && <UserLetterAvatar user={user} />}
         {this.renderImg()}
       </span>
diff --git a/src/sentry/static/sentry/app/components/buttons/button.jsx b/src/sentry/static/sentry/app/components/buttons/button.jsx
index 1c1c5d4ff9..c91bd2d572 100644
--- a/src/sentry/static/sentry/app/components/buttons/button.jsx
+++ b/src/sentry/static/sentry/app/components/buttons/button.jsx
@@ -9,7 +9,7 @@ import '../../../less/components/button.less';
 
 const Button = React.createClass({
   propTypes: {
-    priority: PropTypes.oneOf(['primary', 'danger']),
+    priority: PropTypes.oneOf(['primary', 'danger', 'link']),
     size: PropTypes.oneOf(['small', 'xsmall', 'large']),
     disabled: PropTypes.bool,
     busy: PropTypes.bool,
@@ -47,6 +47,12 @@ const Button = React.createClass({
     onClick(...args);
   },
 
+  getUrl() {
+    let {disabled, to, href} = this.props;
+    if (disabled) return null;
+    return to || href;
+  },
+
   render() {
     let {
       priority,
@@ -69,13 +75,15 @@ const Button = React.createClass({
 
     let isPrimary = priority === 'primary' && !disabled;
     let isDanger = priority === 'danger' && !disabled;
+    let isLink = priority === 'link';
 
     let cx = classNames(className, 'button', {
       tip: !!title,
       'button-no-border': borderless,
       'button-primary': isPrimary,
       'button-danger': isDanger,
-      'button-default': !isPrimary && !isDanger,
+      'button-link': isLink && !isPrimary && !isDanger,
+      'button-default': !isLink && !isPrimary && !isDanger,
       'button-sm': size === 'small',
       'button-xs': size === 'xsmall',
       'button-lg': size === 'large',
@@ -108,12 +116,12 @@ const Button = React.createClass({
 
     // Handle react-router Links
     if (to) {
-      return <Link to={to} {...componentProps} />;
+      return <Link to={this.getUrl()} {...componentProps} />;
     }
 
     // Handle traditional links
     if (href) {
-      return <a href={href} {...componentProps} />;
+      return <a href={this.getUrl()} {...componentProps} />;
     }
 
     // Otherwise, fall back to basic button element
diff --git a/src/sentry/static/sentry/app/components/confirm.jsx b/src/sentry/static/sentry/app/components/confirm.jsx
index 17e2f39330..dc7c8166a4 100644
--- a/src/sentry/static/sentry/app/components/confirm.jsx
+++ b/src/sentry/static/sentry/app/components/confirm.jsx
@@ -77,9 +77,9 @@ class Confirm extends React.PureComponent {
     const ConfirmModal = (
       <Modal show={this.state.isModalOpen} animation={false} onHide={this.handleToggle}>
         <div className="modal-body">
-          <p>
+          <div>
             <strong>{message}</strong>
-          </p>
+          </div>
         </div>
         <div className="modal-footer">
           <Button style={{marginRight: 10}} onClick={this.handleToggle}>
diff --git a/src/sentry/static/sentry/app/components/dropdownMenu.jsx b/src/sentry/static/sentry/app/components/dropdownMenu.jsx
index 481b5b94af..e2c2432578 100644
--- a/src/sentry/static/sentry/app/components/dropdownMenu.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownMenu.jsx
@@ -105,7 +105,7 @@ class DropdownMenu extends React.Component {
 
   // Decide whether dropdown should be closed when mouse leaves element
   handleMouseLeave = e => {
-    const toElement = e.toElement || e.relatedTarget;
+    let toElement = e.toElement || e.relatedTarget;
 
     try {
       if (this.dropdownMenu && !this.dropdownMenu.contains(toElement)) {
@@ -138,6 +138,7 @@ class DropdownMenu extends React.Component {
   // bind a click handler to `document` to listen for clicks outside of
   // this component and close menu if so
   handleMenuMount = ref => {
+    if (ref && !(ref instanceof HTMLElement)) return;
     this.dropdownMenu = ref;
 
     if (this.dropdownMenu) {
@@ -148,6 +149,11 @@ class DropdownMenu extends React.Component {
     }
   };
 
+  handleActorMount = ref => {
+    if (ref && !(ref instanceof HTMLElement)) return;
+    this.dropdownActor = ref;
+  };
+
   handleToggle = e => {
     if (this.isOpen()) {
       this.handleClose(e);
@@ -165,17 +171,31 @@ class DropdownMenu extends React.Component {
 
   getRootProps = props => props;
 
-  getActorProps = ({onClick, ...props} = {}) => {
+  // Actor is the component that will open the dropdown menu
+  getActorProps = ({onClick, onMouseEnter, onMouseLeave, isStyled, ...props} = {}) => {
     let {isNestedDropdown} = this.props;
+
+    // Props that the actor needs to have <DropdownMenu> work
+    //
+    // `isStyled`: with styled-components we need to pass `innerRef` to get DOM el's ref vs `ref` otherwise
     return {
       ...props,
-      ref: ref => (this.dropdownActor = ref),
+      ...((isStyled && {innerRef: this.handleActorMount}) || {}),
+      ref: !isStyled ? this.handleActorMount : undefined,
       onMouseEnter: (...args) => {
+        if (typeof onMouseEnter === 'function') {
+          onMouseEnter(...args);
+        }
+
         if (!isNestedDropdown) return;
         this.handleOpen(...args);
       },
 
       onMouseLeave: (...args) => {
+        if (typeof onMouseLeave === 'function') {
+          onMouseLeave(...args);
+        }
+
         if (!isNestedDropdown) return;
         this.handleMouseLeave(...args);
       },
@@ -191,12 +211,22 @@ class DropdownMenu extends React.Component {
     };
   };
 
-  getMenuProps = ({onClick, ...props} = {}) => {
+  // Menu is the menu component that <DropdownMenu> will control
+  getMenuProps = ({onClick, onMouseLeave, isStyled, ...props} = {}) => {
     let {isNestedDropdown} = this.props;
+
+    // Props that the menu needs to have <DropdownMenu> work
+    //
+    // `isStyled`: with styled-components we need to pass `innerRef` to get DOM el's ref vs `ref` otherwise
     return {
       ...props,
-      ref: this.handleMenuMount,
+      ...((isStyled && {innerRef: this.handleMenuMount}) || {}),
+      ref: !isStyled ? this.handleMenuMount : undefined,
       onMouseLeave: (...args) => {
+        if (typeof onMouseLeave === 'function') {
+          onMouseLeave(...args);
+        }
+
         if (!isNestedDropdown) return;
         this.handleMouseLeave(...args);
       },
diff --git a/src/sentry/static/sentry/app/components/forms/input.jsx b/src/sentry/static/sentry/app/components/forms/input.jsx
new file mode 100644
index 0000000000..dee2800acc
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/input.jsx
@@ -0,0 +1,6 @@
+import React from 'react';
+import classNames from 'classnames';
+
+export default function Input({className, children, ...otherProps}) {
+  return <input className={classNames('form-control', className)} {...otherProps} />;
+}
diff --git a/src/sentry/static/sentry/app/components/forms/state.jsx b/src/sentry/static/sentry/app/components/forms/state.jsx
index 64a83c9cd2..2b6509e70a 100644
--- a/src/sentry/static/sentry/app/components/forms/state.jsx
+++ b/src/sentry/static/sentry/app/components/forms/state.jsx
@@ -1,4 +1,6 @@
 export default {
+  HOVER: 'Hover',
+  DISABLED: 'Disabled',
   LOADING: 'Loading',
   READY: 'Ready',
   SAVING: 'Saving',
diff --git a/src/sentry/static/sentry/app/components/issueDiff.jsx b/src/sentry/static/sentry/app/components/issueDiff.jsx
index 950a8f55ca..adfb8b0805 100644
--- a/src/sentry/static/sentry/app/components/issueDiff.jsx
+++ b/src/sentry/static/sentry/app/components/issueDiff.jsx
@@ -41,7 +41,7 @@ const IssueDiff = React.createClass({
 
     // Fetch component and event data
     Promise.all([
-      import('./splitDiff'),
+      import(/* webpackChunkName: "splitDiff" */ './splitDiff'),
       this.fetchData(baseIssueId, baseEventId),
       this.fetchData(targetIssueId, targetEventId),
     ]).then(([{default: SplitDiffAsync}, baseEvent, targetEvent]) => {
diff --git a/src/sentry/static/sentry/app/components/lazyLoad.jsx b/src/sentry/static/sentry/app/components/lazyLoad.jsx
new file mode 100644
index 0000000000..57b0146fac
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/lazyLoad.jsx
@@ -0,0 +1,36 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import LoadingIndicator from '../components/loadingIndicator';
+
+class LazyLoad extends React.Component {
+  static propTypes = {
+    hideBusy: PropTypes.bool,
+    /**
+     * specifically needs to be a thenable
+     */
+    component: PropTypes.func,
+  };
+
+  constructor(...args) {
+    super(...args);
+    this.state = {
+      Component: null,
+    };
+  }
+
+  componentDidMount() {
+    this.props.component().then(Component => {
+      this.setState({Component});
+    });
+  }
+
+  render() {
+    // eslint-disable-next-line no-unused-vars
+    let {hideBusy, component, ...otherProps} = this.props;
+    if (!this.state.Component && !hideBusy) return <LoadingIndicator />;
+    return <this.state.Component {...otherProps} />;
+  }
+}
+
+export default LazyLoad;
diff --git a/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx b/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
index 661eb03cff..290278694f 100644
--- a/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
+++ b/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
@@ -9,8 +9,8 @@ import Confirm from './confirm';
 class LinkWithConfirmation extends React.PureComponent {
   static propTypes = {
     disabled: PropTypes.bool,
-    message: PropTypes.string.isRequired,
-    title: PropTypes.string.isRequired,
+    message: PropTypes.node.isRequired,
+    title: PropTypes.node.isRequired,
     onConfirm: PropTypes.func.isRequired,
   };
 
diff --git a/src/sentry/static/sentry/app/components/loadingIndicator.jsx b/src/sentry/static/sentry/app/components/loadingIndicator.jsx
index ebcc4d96f4..8430abd3b3 100644
--- a/src/sentry/static/sentry/app/components/loadingIndicator.jsx
+++ b/src/sentry/static/sentry/app/components/loadingIndicator.jsx
@@ -3,8 +3,10 @@ import React from 'react';
 import classNames from 'classnames';
 
 function LoadingIndicator(props) {
-  let {mini, triangle, children, finished, className, style} = props;
+  let {mini, triangle, overlay, dark, children, finished, className, style} = props;
   let cx = classNames(className, {
+    overlay,
+    dark,
     loading: true,
     mini,
     triangle,
@@ -27,6 +29,8 @@ function LoadingIndicator(props) {
 }
 
 LoadingIndicator.propTypes = {
+  overlay: PropTypes.bool,
+  dark: PropTypes.bool,
   mini: PropTypes.bool,
   triangle: PropTypes.bool,
   finished: PropTypes.bool,
diff --git a/src/sentry/static/sentry/app/components/modals/diffModal.jsx b/src/sentry/static/sentry/app/components/modals/diffModal.jsx
index 674e591c50..12e4ca33d2 100644
--- a/src/sentry/static/sentry/app/components/modals/diffModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/diffModal.jsx
@@ -14,11 +14,16 @@ const DiffModal = React.createClass({
 
   componentDidMount() {
     // Listen for route changes so we can dismiss modal
-    this.unlisten = browserHistory.listen(() =>
+    this.unlisten = browserHistory.listen(() => {
+      // Ignore if diffModal is not visible
+      if (!this.state.diffModal) {
+        return;
+      }
+
       this.setState({
         diffModal: false,
-      })
-    );
+      });
+    });
   },
 
   componentWillUnmount() {
diff --git a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
index 84165222d7..86a15974ea 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
@@ -1,12 +1,90 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import classnames from 'classnames';
 
 import ListLink from '../listLink';
 import OrganizationState from '../../mixins/organizationState';
 import HookStore from '../../stores/hookStore';
 import {t} from '../../locale';
 
+let RouterOrBrowserLink = ({isRouter, path, ...props}) =>
+  isRouter ? (
+    <ListLink to={path} {...props} />
+  ) : (
+    <li>
+      <a href={path} {...props} />
+    </li>
+  );
+
+RouterOrBrowserLink.propTypes = {
+  isRouter: PropTypes.bool,
+  path: PropTypes.string.isRequired,
+};
+
+const OrgSettingsMenu = ({access, org, features}) => {
+  if (!access.has('org:read')) return null;
+
+  let hasNewSettings = features.has('new-settings');
+  let pathPrefix = `${hasNewSettings
+    ? '/settings/organization'
+    : '/organizations'}/${org.slug}`;
+
+  return (
+    <div>
+      <h6 className="nav-header with-divider">{t('Manage')}</h6>
+      <ul className="nav nav-stacked">
+        {access.has('org:read') && (
+          <RouterOrBrowserLink isRouter={hasNewSettings} path={`${pathPrefix}/members/`}>
+            {t('Members')}&nbsp;
+            {access.has('org:write') &&
+              org.pendingAccessRequests > 0 && (
+                <span className="badge" style={{marginLeft: 5}}>
+                  {org.pendingAccessRequests}
+                </span>
+              )}
+          </RouterOrBrowserLink>
+        )}
+        {features.has('sso') &&
+          access.has('org:admin') && (
+            <RouterOrBrowserLink
+              isRouter={false}
+              path={`/organizations/${org.slug}/auth/`}
+            >
+              {t('Auth')}
+            </RouterOrBrowserLink>
+          )}
+
+        {access.has('org:admin') &&
+          features.has('api-keys') && (
+            <ListLink to={`${pathPrefix}/api-keys/`}>{t('API Keys')}</ListLink>
+          )}
+
+        {access.has('org:write') && (
+          <ListLink to={`${pathPrefix}/audit-log/`}>{t('Audit Log')}</ListLink>
+        )}
+        {access.has('org:write') && (
+          <ListLink to={`${pathPrefix}/rate-limits/`}>{t('Rate Limits')}</ListLink>
+        )}
+        {features.has('integrations-v3') &&
+          access.has('org:integrations') && (
+            <ListLink to={`${pathPrefix}/integrations/`}>{t('Integrations')}</ListLink>
+          )}
+        {access.has('org:write') && (
+          <ListLink to={`${pathPrefix}/repos/`}>{t('Repositories')}</ListLink>
+        )}
+        {access.has('org:write') && (
+          <ListLink to={`${pathPrefix}/settings/`}>{t('Settings')}</ListLink>
+        )}
+      </ul>
+    </div>
+  );
+};
+
+OrgSettingsMenu.propTypes = {
+  access: PropTypes.object,
+  features: PropTypes.object,
+  org: PropTypes.object,
+};
+
 const HomeSidebar = React.createClass({
   contextTypes: {
     location: PropTypes.object,
@@ -32,7 +110,12 @@ const HomeSidebar = React.createClass({
     let features = this.getFeatures();
     let org = this.getOrganization();
 
+    let hasNewSettings = features.has('new-settings');
+    let pathPrefix = `${hasNewSettings
+      ? '/settings/organization'
+      : '/organizations'}/${org.slug}`;
     let orgId = org.slug;
+
     return (
       <div>
         <h6 className="nav-header">{t('Organization')}</h6>
@@ -47,7 +130,7 @@ const HomeSidebar = React.createClass({
             {t('Dashboard')}
           </ListLink>
           <ListLink
-            to={`/organizations/${orgId}/teams/`}
+            to={`${pathPrefix}/teams/`}
             isActive={() => {
               // return true if path matches /organizations/slug-name/teams/ OR /organizations/slug-name/all-teams/
               return /^\/organizations\/[^\/]+\/(teams|all-teams)\/$/.test(
@@ -75,72 +158,9 @@ const HomeSidebar = React.createClass({
             </ListLink>
           </ul>
         </div>
-        {access.has('org:read') && (
-          <div>
-            <h6 className="nav-header with-divider">{t('Manage')}</h6>
-            <ul className="nav nav-stacked">
-              {access.has('org:read') && (
-                <li
-                  className={classnames({
-                    active: /^\/organizations\/[^\/]+\/members\/new\/$/.test(
-                      this.context.location.pathname
-                    ),
-                  })}
-                >
-                  <a href={`/organizations/${orgId}/members/`}>
-                    {t('Members')}&nbsp;
-                    {access.has('org:write') &&
-                      org.pendingAccessRequests > 0 && (
-                        <span className="badge" style={{marginLeft: 5}}>
-                          {org.pendingAccessRequests}
-                        </span>
-                      )}
-                  </a>
-                </li>
-              )}
-              {features.has('sso') &&
-                access.has('org:admin') && (
-                  <li>
-                    <a href={`/organizations/${orgId}/auth/`}>{t('Auth')}</a>
-                  </li>
-                )}
-
-              {access.has('org:admin') &&
-                features.has('api-keys') && (
-                  <ListLink to={`/organizations/${orgId}/api-keys/`}>
-                    {t('API Keys')}
-                  </ListLink>
-                )}
-
-              {access.has('org:write') && (
-                <ListLink to={`/organizations/${orgId}/audit-log/`}>
-                  {t('Audit Log')}
-                </ListLink>
-              )}
-              {access.has('org:write') && (
-                <ListLink to={`/organizations/${orgId}/rate-limits/`}>
-                  {t('Rate Limits')}
-                </ListLink>
-              )}
-              {features.has('integrations-v3') &&
-                access.has('org:integrations') && (
-                  <ListLink to={`/organizations/${orgId}/integrations/`}>
-                    {t('Integrations')}
-                  </ListLink>
-                )}
-              {access.has('org:write') && (
-                <ListLink to={`/organizations/${orgId}/repos/`}>
-                  {t('Repositories')}
-                </ListLink>
-              )}
-              {access.has('org:write') && (
-                <ListLink to={`/organizations/${orgId}/settings/`}>
-                  {t('Settings')}
-                </ListLink>
-              )}
-            </ul>
-          </div>
-        )}
+
+        <OrgSettingsMenu access={access} features={features} org={org} />
+
         {this.state.hooks}
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/organizations/organizationsLoader.jsx b/src/sentry/static/sentry/app/components/organizations/organizationsLoader.jsx
index e7b529c4c8..df843b3cff 100644
--- a/src/sentry/static/sentry/app/components/organizations/organizationsLoader.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/organizationsLoader.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 
 import ApiMixin from '../../mixins/apiMixin';
-import OrganizationStore from '../../stores/organizationStore';
+import OrganizationsStore from '../../stores/organizationsStore';
 
 const OrganizationsLoader = React.createClass({
   mixins: [ApiMixin],
@@ -12,7 +12,7 @@ const OrganizationsLoader = React.createClass({
         member: '1',
       },
       success: data => {
-        OrganizationStore.load(data);
+        OrganizationsStore.load(data);
         this.setState({
           loading: false,
         });
@@ -27,7 +27,7 @@ const OrganizationsLoader = React.createClass({
   },
 
   componentWillUnmount() {
-    OrganizationStore.load([]);
+    OrganizationsStore.load([]);
   },
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/sidebar/organizationSelector.jsx b/src/sentry/static/sentry/app/components/sidebar/organizationSelector.jsx
index b1fd6211e8..48cf07d72c 100644
--- a/src/sentry/static/sentry/app/components/sidebar/organizationSelector.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/organizationSelector.jsx
@@ -5,11 +5,19 @@ import SidebarPanel from '../sidebarPanel';
 import LetterAvatar from '../letterAvatar';
 
 import AppState from '../../mixins/appState';
-import OrganizationStore from '../../stores/organizationStore';
+import OrganizationsStore from '../../stores/organizationsStore';
 import ConfigStore from '../../stores/configStore';
 
 import {t} from '../../locale';
 
+let RouterOrBrowserLink = ({isRouter, path, ...props}) =>
+  isRouter ? <Link to={path} {...props} /> : <a href={path} {...props} />;
+
+RouterOrBrowserLink.propTypes = {
+  isRouter: PropTypes.bool,
+  path: PropTypes.string.isRequired,
+};
+
 const OrganizationSelector = React.createClass({
   propTypes: {
     organization: PropTypes.object,
@@ -52,6 +60,11 @@ const OrganizationSelector = React.createClass({
 
     let features = ConfigStore.get('features');
 
+    let hasNewSettings = new Set(activeOrg.features).has('new-settings');
+    let settingsPrefix = `${hasNewSettings
+      ? '/settings/organization'
+      : '/organizations'}`;
+
     let classNames = 'org-selector divider-bottom';
     if (this.props.currentPanel == 'org-selector') {
       classNames += ' active';
@@ -67,7 +80,7 @@ const OrganizationSelector = React.createClass({
           this.props.currentPanel == 'org-selector' && (
             <SidebarPanel title={t('Organizations')} hidePanel={this.props.hidePanel}>
               <ul className="org-list list-unstyled">
-                {OrganizationStore.getAll().map(org => {
+                {OrganizationsStore.getAll().map(org => {
                   return (
                     <li
                       className={activeOrg.id === org.id ? 'org active' : 'org'}
@@ -80,12 +93,18 @@ const OrganizationSelector = React.createClass({
                       )}
                       <h5>{this.getLinkNode(org, org.name)}</h5>
                       <p>
-                        <a href={`/organizations/${org.slug}/settings/`}>
+                        <RouterOrBrowserLink
+                          isRouter={hasNewSettings}
+                          path={`${settingsPrefix}/${org.slug}/settings/`}
+                        >
                           <span className="icon-settings" /> {t('Settings')}
-                        </a>
-                        <a href={`/organizations/${org.slug}/members/`}>
+                        </RouterOrBrowserLink>
+                        <RouterOrBrowserLink
+                          isRouter={hasNewSettings}
+                          path={`${settingsPrefix}/${org.slug}/members/`}
+                        >
                           <span className="icon-users" /> {t('Members')}
-                        </a>
+                        </RouterOrBrowserLink>
                       </p>
                     </li>
                   );
diff --git a/src/sentry/static/sentry/app/components/switch.jsx b/src/sentry/static/sentry/app/components/switch.jsx
index a9e78dcabd..8a9e95ada3 100644
--- a/src/sentry/static/sentry/app/components/switch.jsx
+++ b/src/sentry/static/sentry/app/components/switch.jsx
@@ -1,8 +1,10 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import classNames from 'classnames';
 
 const Switch = React.createClass({
   propTypes: {
+    id: PropTypes.string,
     size: PropTypes.string,
     isActive: PropTypes.bool,
     isLoading: PropTypes.bool,
@@ -11,30 +13,21 @@ const Switch = React.createClass({
   },
 
   render() {
-    let switchClasses = 'switch';
-
-    if (this.props.size) {
-      switchClasses += ' switch-' + this.props.size;
-    }
-
-    if (this.props.isActive) {
-      switchClasses += ' switch-on';
-    }
-
-    if (this.props.isLoading) {
-      switchClasses += ' switch-changing';
-    }
-
-    if (this.props.isDisabled) {
-      switchClasses += ' switch-disabled';
-    }
+    let {size, isActive, isLoading, isDisabled, toggle, id} = this.props;
+    let switchClasses = classNames('switch', {
+      [`switch-${size}`]: size,
+      'switch-on': isActive,
+      'switch-changing': isLoading,
+      'switch-disabled': isDisabled,
+    });
 
     return (
       <div
+        id={id}
         className={switchClasses}
-        onClick={this.props.isDisabled ? null : this.props.toggle}
+        onClick={isDisabled ? null : toggle}
         role="checkbox"
-        aria-checked={this.props.isActive}
+        aria-checked={isActive}
       >
         <span className="switch-toggle" />
       </div>
diff --git a/src/sentry/static/sentry/app/constants.jsx b/src/sentry/static/sentry/app/constants.jsx
index e07fb20226..2b1ca216ec 100644
--- a/src/sentry/static/sentry/app/constants.jsx
+++ b/src/sentry/static/sentry/app/constants.jsx
@@ -29,3 +29,5 @@ export const DEFAULT_API_SCOPES = [
   'team:read',
   'member:read',
 ];
+
+export const DEFAULT_TOAST_DURATION = 2000;
diff --git a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
new file mode 100644
index 0000000000..2c6eea2b4f
--- /dev/null
+++ b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
@@ -0,0 +1,139 @@
+import {createSearchMap} from './util';
+import {extractMultilineFields} from '../../utils';
+
+const forms = [
+  {
+    // Form "section"/"panel"
+    title: 'General',
+    fields: [
+      {
+        name: 'name',
+        type: 'string',
+        required: true,
+
+        // additional data/props that is related to rendering of form field rather than data
+        label: 'Name',
+        help: 'The name of your organization. e.g. My Company',
+      },
+      {
+        name: 'slug',
+        type: 'string',
+        required: true,
+        label: 'Short Name',
+        help: 'A unique ID used to identify this organization.',
+      },
+      {
+        name: 'isEarlyAdopter',
+        type: 'boolean',
+        label: 'Early Adopter',
+        help: "Opt-in to new features before they're released to the public.",
+      },
+    ],
+  },
+
+  {
+    title: 'Membership',
+    fields: [
+      {
+        name: 'defaultRole',
+        type: 'array',
+        required: true,
+        label: 'Default Role',
+        // seems weird to have choices in initial form data
+        choices: ({data}) => data.availableRoles.map(r => [r.id, r.name]),
+        help: 'The default role new members will receive.',
+        getValue: (val, {access}) => (access.has('org:admin') ? val : undefined),
+      },
+      {
+        name: 'openMembership',
+        type: 'boolean',
+        required: true,
+        label: 'Open Membership',
+        help: 'Allow organization members to freely join or leave any team.',
+      },
+    ],
+  },
+
+  {
+    title: 'Security & Privacy',
+    fields: [
+      {
+        name: 'allowSharedIssues',
+        type: 'boolean',
+
+        label: 'Allow Shared Issues',
+        help: 'Enable sharing of limited details on issues to anonymous users.',
+      },
+      {
+        name: 'enhancedPrivacy',
+        type: 'boolean',
+
+        label: 'Enhanced Privacy',
+        help:
+          'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.',
+      },
+      {
+        name: 'dataScrubber',
+        type: 'boolean',
+        label: 'Require Data Scrubber',
+        help: 'Require server-side data scrubbing be enabled for all projects.',
+      },
+      {
+        name: 'dataScrubberDefaults',
+        type: 'boolean',
+
+        required: true,
+        label: 'Require Using Default Scrubbers',
+        help:
+          'Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects.',
+      },
+      {
+        name: 'sensitiveFields',
+        type: 'string',
+        multiline: true,
+        placeholder: 'e.g. email',
+        label: 'Global sensitive fields',
+        help:
+          'Additional field names to match against when scrubbing data for all projects. Separate multiple entries with a newline.',
+        extraHelp:
+          'Note: These fields will be used in addition to project specific fields.',
+        getValue: val => extractMultilineFields(val),
+        setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
+      },
+      {
+        name: 'safeFields',
+        type: 'string',
+        multiline: true,
+        placeholder: 'e.g. business-email',
+        label: 'Global safe fields',
+        help:
+          'Field names which data scrubbers should ignore. Separate multiple entries with a newline.',
+        extraHelp:
+          'Note: These fields will be used in addition to project specific fields.',
+        getValue: val => extractMultilineFields(val),
+        setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
+      },
+      {
+        name: 'scrubIPAddresses',
+        type: 'boolean',
+        label: 'Prevent Storing of IP Addresses',
+        help: 'Preventing IP addresses from being stored for new events on all projects.',
+      },
+    ],
+  },
+];
+
+export default forms;
+
+// generate search index from form fields
+export const searchIndex = createSearchMap({
+  route: '/settings/organization/:orgId/settings/',
+  requireParams: ['orgId'],
+  formGroups: forms,
+});
+
+// need to associate index -> form group -> route
+// so when we search for a term we need to find:
+//   * what field(s) it matches:
+//     * what form group it belongs to
+//     * what route that belongs to
diff --git a/src/sentry/static/sentry/app/data/forms/teamSettingsFields.jsx b/src/sentry/static/sentry/app/data/forms/teamSettingsFields.jsx
new file mode 100644
index 0000000000..34068ffd34
--- /dev/null
+++ b/src/sentry/static/sentry/app/data/forms/teamSettingsFields.jsx
@@ -0,0 +1,43 @@
+import {createSearchMap} from './util';
+
+const forms = [
+  {
+    // Form "section"/"panel"
+    title: 'Team Settings',
+    fields: [
+      {
+        name: 'name',
+        type: 'string',
+        required: true,
+
+        // additional data/props that is related to rendering of form field rather than data
+        label: 'Name',
+        placeholder: 'e.g. API Team',
+        help: 'The name of your team',
+      },
+      {
+        name: 'slug',
+        type: 'string',
+        required: true,
+        label: 'Short Name',
+        placeholder: 'e.g. api-team',
+        help: 'A unique ID used to identify the team',
+      },
+    ],
+  },
+];
+
+export default forms;
+
+// generate search index from form fields
+export const searchIndex = createSearchMap({
+  route: '/settings/organization/:orgId/teams/:teamId/settings/',
+  requireParams: ['orgId', 'teamId'],
+  formGroups: forms,
+});
+
+// need to associate index -> form group -> route
+// so when we search for a term we need to find:
+//   * what field(s) it matches:
+//     * what form group it belongs to
+//     * what route that belongs to
diff --git a/src/sentry/static/sentry/app/data/forms/util.jsx b/src/sentry/static/sentry/app/data/forms/util.jsx
new file mode 100644
index 0000000000..b5a95cb998
--- /dev/null
+++ b/src/sentry/static/sentry/app/data/forms/util.jsx
@@ -0,0 +1,32 @@
+import {fromPairs, flatMap} from 'lodash';
+
+// Create a simple search index for a field
+export const createSearchIndex = field => {
+  let fields = [field.name, field.label, field.help];
+
+  return fields
+    .join('')
+    .toLowerCase()
+    .replace(' ', '');
+};
+
+// need to associate index -> form group -> route
+// so when we search for a term we need to find:
+//   * what field(s) it matches:
+//     * what form group it belongs to
+//     * what route that belongs to
+export const createSearchMap = ({route, formGroups, ...other}) => {
+  return fromPairs(
+    flatMap(formGroups, ({title, fields}) =>
+      fields.map(field => [
+        createSearchIndex(field),
+        {
+          ...other,
+          route,
+          groupTitle: title,
+          field,
+        },
+      ])
+    )
+  );
+};
diff --git a/src/sentry/static/sentry/app/icons/icon-checkmark-sm.js b/src/sentry/static/sentry/app/icons/icon-checkmark-sm.js
new file mode 100644
index 0000000000..51877959c6
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-checkmark-sm.js
@@ -0,0 +1,20 @@
+import React from 'react';
+import Icon from 'react-icon-base';
+
+function IconCheckmarkSm(props) {
+  return (
+    <Icon viewBox="0 0 9 9" {...props}>
+      <g
+        stroke="currentColor"
+        strokeWidth="1"
+        fill="none"
+        strokeLinecap="round"
+        strokeLinejoin="round"
+      >
+        <polyline points="0.5 5 2.5 7 8.5 2" />
+      </g>
+    </Icon>
+  );
+}
+
+export default IconCheckmarkSm;
diff --git a/src/sentry/static/sentry/app/icons/icon-chevron-left.js b/src/sentry/static/sentry/app/icons/icon-chevron-left.js
new file mode 100644
index 0000000000..ee65a44b49
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-chevron-left.js
@@ -0,0 +1,20 @@
+import React from 'react';
+import Icon from 'react-icon-base';
+
+function IconChevronLeft(props) {
+  return (
+    <Icon viewBox="0 0 15 15" {...props}>
+      <g
+        stroke="currentColor"
+        strokeWidth="1"
+        fill="none"
+        strokeLinecap="round"
+        strokeLinejoin="round"
+      >
+        <polyline points="10.5051954 14.4948046 4.50519544 7.49480456 10.498744 0.505195444 10.498744 0.505195444" />
+      </g>
+    </Icon>
+  );
+}
+
+export default IconChevronLeft;
diff --git a/src/sentry/static/sentry/app/icons/icon-chevron-right.js b/src/sentry/static/sentry/app/icons/icon-chevron-right.js
new file mode 100644
index 0000000000..b93f61ab03
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-chevron-right.js
@@ -0,0 +1,20 @@
+import React from 'react';
+import Icon from 'react-icon-base';
+
+function IconChevronRight(props) {
+  return (
+    <Icon viewBox="0 0 15 15" {...props}>
+      <g
+        stroke="currentColor"
+        strokeWidth="1"
+        fill="none"
+        strokeLinecap="round"
+        strokeLinejoin="round"
+      >
+        <polyline points="4.5 0.5 10.5 7.5 4.5 14.5" />
+      </g>
+    </Icon>
+  );
+}
+
+export default IconChevronRight;
diff --git a/src/sentry/static/sentry/app/icons/icon-docs.js b/src/sentry/static/sentry/app/icons/icon-docs.js
new file mode 100644
index 0000000000..c968574601
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-docs.js
@@ -0,0 +1,15 @@
+import React from 'react';
+import Icon from 'react-icon-base';
+
+function IconDocs(props) {
+  return (
+    <Icon viewBox="0 0 24 24" {...props}>
+      <g fill="currentColor" transform="translate(0, 2)">
+        <path d="M12,18 L11,17 L13,17 L12,18 Z M12,1 L13,0 L13,19 L12,18 L11,19 L11,0 L12,1 Z M11,0 L13,0 L13,19 L11,19 L11,0 Z M4.5,4 L8.5,4 C8.77614237,4 9,4.22385763 9,4.5 L9,5.5 C9,5.77614237 8.77614237,6 8.5,6 L4.5,6 C4.22385763,6 4,5.77614237 4,5.5 L4,4.5 C4,4.22385763 4.22385763,4 4.5,4 Z M4.5,8 L8.5,8 C8.77614237,8 9,8.22385763 9,8.5 L9,9.5 C9,9.77614237 8.77614237,10 8.5,10 L4.5,10 C4.22385763,10 4,9.77614237 4,9.5 L4,8.5 C4,8.22385763 4.22385763,8 4.5,8 Z M15.5,4 L19.5,4 C19.7761424,4 20,4.22385763 20,4.5 L20,5.5 C20,5.77614237 19.7761424,6 19.5,6 L15.5,6 C15.2238576,6 15,5.77614237 15,5.5 L15,4.5 C15,4.22385763 15.2238576,4 15.5,4 Z M15.5,8 L19.5,8 C19.7761424,8 20,8.22385763 20,8.5 L20,9.5 C20,9.77614237 19.7761424,10 19.5,10 L15.5,10 C15.2238576,10 15,9.77614237 15,9.5 L15,8.5 C15,8.22385763 15.2238576,8 15.5,8 Z" />
+        <path d="M13.0323974,17.0050759 C14.7760821,17.0297734 17.7499296,17.2836527 22.0000005,17.7665315 L22.0000005,2.00149037 L1.99998195,2.00149037 L1.99998195,17.7665315 C6.25868152,17.2831307 9.23891076,17.0291037 10.9867776,17.0048068 C11.3618943,16.9995923 11.7084419,17.0886039 12.009162,17.2484601 C12.3108039,17.0885315 12.6578264,16.9997705 13.0323974,17.0050759 Z M2,0 L22,0 C23.1045695,0 24,0.896097761 24,2.00149037 L24,17.7663794 C23.9999952,18.8717694 23.1045669,19.767865 22,19.767865 C21.9246391,19.767865 21.8493384,19.7636024 21.7744582,19.7550975 C17.586602,19.2794418 14.6631471,19.0298646 13.0040934,19.0063658 C12.6693956,19.0016251 13.110352,20.0001461 12,20 C10.889648,19.9998539 11.3430374,19.0015379 11.014556,19.0061041 C9.35147785,19.0292224 6.42175439,19.2789444 2.22538564,19.7552701 C1.12786139,19.8798308 0.137228083,19.0904412 0.0127421831,17.9921011 C0.00425417034,17.9172113 0,17.8419015 0,17.7665315 L0,2.00149037 C0,0.896097761 0.8954305,0 2,0 Z" />
+      </g>
+    </Icon>
+  );
+}
+
+export default IconDocs;
diff --git a/src/sentry/static/sentry/app/icons/icon-laptop.js b/src/sentry/static/sentry/app/icons/icon-laptop.js
new file mode 100644
index 0000000000..93d35dab56
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-laptop.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import Icon from 'react-icon-base';
+
+function IconLaptop(props) {
+  return (
+    <Icon viewBox="0 0 24 24" {...props}>
+      <g fill="currentColor">
+        <path
+          d="M5.14285714,5.14285714 C4.19608329,5.14285714 3.42857143,5.910369 3.42857143,6.85714286 L3.42857143,15.4285714 C3.42857143,16.3753453 4.19608329,17.1428571 5.14285714,17.1428571 L18.8571429,17.1428571 C19.8039167,17.1428571 20.5714286,16.3753453 20.5714286,15.4285714 L20.5714286,6.85714286 C20.5714286,5.910369 19.8039167,5.14285714 18.8571429,5.14285714 L5.14285714,5.14285714 Z M5.14285714,3.42857143 L18.8571429,3.42857143 C20.7506906,3.42857143 22.2857143,4.96359514 22.2857143,6.85714286 L22.2857143,15.4285714 C22.2857143,17.3221191 20.7506906,18.8571429 18.8571429,18.8571429 L5.14285714,18.8571429 C3.24930943,18.8571429 1.71428571,17.3221191 1.71428571,15.4285714 L1.71428571,6.85714286 C1.71428571,4.96359514 3.24930943,3.42857143 5.14285714,3.42857143 Z"
+          fillRule="nonzero"
+        />
+        <circle cx="12" cy="11.1428571" r="1" />
+        <circle cx="15.4285714" cy="11.1428571" r="1" />
+        <circle cx="8.57142857" cy="11.1428571" r="1" />
+        <path d="M0,17.1428571 L24,17.1428571 L24,17.8571429 C24,18.4094276 23.5522847,18.8571429 23,18.8571429 L1,18.8571429 C0.44771525,18.8571429 6.76353751e-17,18.4094276 0,17.8571429 L0,17.1428571 Z" />
+      </g>
+    </Icon>
+  );
+}
+
+export default IconLaptop;
diff --git a/src/sentry/static/sentry/app/icons/icon-lock.js b/src/sentry/static/sentry/app/icons/icon-lock.js
new file mode 100644
index 0000000000..06f095d5d7
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-lock.js
@@ -0,0 +1,15 @@
+import React from 'react';
+import Icon from 'react-icon-base';
+
+function IconLock(props) {
+  return (
+    <Icon viewBox="0 0 24 24" {...props}>
+      <g fill="currentColor" transform="translate(0, -1)">
+        <path d="M4.28571429,10.7857143 C3.81232736,10.7857143 3.42857143,11.1694702 3.42857143,11.6428571 L3.42857143,20.2142857 C3.42857143,20.6876726 3.81232736,21.0714286 4.28571429,21.0714286 L19.7142857,21.0714286 C20.1876726,21.0714286 20.5714286,20.6876726 20.5714286,20.2142857 L20.5714286,11.6428571 C20.5714286,11.1694702 20.1876726,10.7857143 19.7142857,10.7857143 L4.28571429,10.7857143 Z M4.28571429,9.07142857 L19.7142857,9.07142857 C21.1344465,9.07142857 22.2857143,10.2226964 22.2857143,11.6428571 L22.2857143,20.2142857 C22.2857143,21.6344465 21.1344465,22.7857143 19.7142857,22.7857143 L4.28571429,22.7857143 C2.8655535,22.7857143 1.71428571,21.6344465 1.71428571,20.2142857 L1.71428571,11.6428571 C1.71428571,10.2226964 2.8655535,9.07142857 4.28571429,9.07142857 Z" />
+        <path d="M17.1428571,9.07142857 L15.4285714,9.07142857 L15.4285714,7.46428571 C15.4285714,5.51156463 13.8935477,3.92857143 12,3.92857143 C10.1064523,3.92857143 8.57142857,5.51156463 8.57142857,7.46428571 L8.57142857,9.07142857 L6.85714286,9.07142857 L6.85714286,7.57142857 C6.85714286,4.61276027 9.15967843,2.21428571 12,2.21428571 C14.8403216,2.21428571 17.1428571,4.61276027 17.1428571,7.57142857 L17.1428571,9.07142857 Z" />
+      </g>
+    </Icon>
+  );
+}
+
+export default IconLock;
diff --git a/src/sentry/static/sentry/app/icons/icon-search.js b/src/sentry/static/sentry/app/icons/icon-search.js
new file mode 100644
index 0000000000..c2b2c8d07c
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-search.js
@@ -0,0 +1,14 @@
+import React from 'react';
+import Icon from 'react-icon-base';
+
+function IconSearch(props) {
+  return (
+    <Icon viewBox="0 0 14 14" {...props}>
+      <g stroke="none" fill="currentColor">
+        <path d="M8.3099521,6.89573854 L11.7071068,10.2928932 C12.0976311,10.6834175 12.0976311,11.3165825 11.7071068,11.7071068 C11.3165825,12.0976311 10.6834175,12.0976311 10.2928932,11.7071068 L6.89573854,8.3099521 C6.20201398,8.74709153 5.38054196,9 4.5,9 C2.01471863,9 0,6.98528137 0,4.5 C0,2.01471863 2.01471863,0 4.5,0 C6.98528137,0 9,2.01471863 9,4.5 C9,5.38054196 8.74709153,6.20201398 8.3099521,6.89573854 L8.3099521,6.89573854 Z M4.5,7 C5.88071187,7 7,5.88071187 7,4.5 C7,3.11928813 5.88071187,2 4.5,2 C3.11928813,2 2,3.11928813 2,4.5 C2,5.88071187 3.11928813,7 4.5,7 Z" />
+      </g>
+    </Icon>
+  );
+}
+
+export default IconSearch;
diff --git a/src/sentry/static/sentry/app/icons/icon-stack.js b/src/sentry/static/sentry/app/icons/icon-stack.js
new file mode 100644
index 0000000000..33fea451f9
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-stack.js
@@ -0,0 +1,25 @@
+import React from 'react';
+import Icon from 'react-icon-base';
+
+function IconStack(props) {
+  return (
+    <Icon viewBox="0 0 24 24" {...props}>
+      <g fill="currentColor">
+        <path
+          d="M11.9952835,4 L3.51000214,8.48528137 L11.9952835,12.9705627 L20.4805649,8.48528137 L11.9952835,4 Z M12.9299314,2.23182769 L21.4152128,6.71710906 C22.8356823,7.46796281 22.8356823,9.50259994 21.4152128,10.2534537 L12.9299314,14.7387351 C12.3451674,15.0478386 11.6453996,15.0478386 11.0606356,14.7387351 L2.57535425,10.2534537 C1.15488477,9.50259994 1.15488477,7.46796281 2.57535425,6.71710906 L11.0606356,2.23182769 C11.6453996,1.9227241 12.3451674,1.9227241 12.9299314,2.23182769 Z"
+          id="Rectangle-82"
+        />
+        <path
+          d="M2.96574643,12.1150818 C2.47701959,11.8578571 1.87230643,12.0455267 1.61508178,12.5342536 C1.35785713,13.0229804 1.54552673,13.6276936 2.03425357,13.8849182 L11.5342536,18.8849182 C11.8257941,19.0383606 12.1742059,19.0383606 12.4657464,18.8849182 L21.9657464,13.8849182 C22.4544733,13.6276936 22.6421429,13.0229804 22.3849182,12.5342536 C22.1276936,12.0455267 21.5229804,11.8578571 21.0342536,12.1150818 L12,16.8699521 L2.96574643,12.1150818 Z"
+          id="Line-15"
+        />
+        <path
+          d="M2.96574643,16.1150818 C2.47701959,15.8578571 1.87230643,16.0455267 1.61508178,16.5342536 C1.35785713,17.0229804 1.54552673,17.6276936 2.03425357,17.8849182 L11.5342536,22.8849182 C11.8257941,23.0383606 12.1742059,23.0383606 12.4657464,22.8849182 L21.9657464,17.8849182 C22.4544733,17.6276936 22.6421429,17.0229804 22.3849182,16.5342536 C22.1276936,16.0455267 21.5229804,15.8578571 21.0342536,16.1150818 L12,20.8699521 L2.96574643,16.1150818 Z"
+          id="Line-15"
+        />
+      </g>
+    </Icon>
+  );
+}
+
+export default IconStack;
diff --git a/src/sentry/static/sentry/app/icons/icon-support.js b/src/sentry/static/sentry/app/icons/icon-support.js
new file mode 100644
index 0000000000..8ab24d4e23
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-support.js
@@ -0,0 +1,14 @@
+import React from 'react';
+import Icon from 'react-icon-base';
+
+function IconSupport(props) {
+  return (
+    <Icon viewBox="0 0 24 24" {...props}>
+      <g fill="currentColor" transform="translate(0, 2)">
+        <path d="M8,15.9620708 L8,15.5 C8,14.6715729 8.67157288,14 9.5,14 L14.5,14 C15.3284271,14 16,14.6715729 16,15.5 L16,18.5 C16,19.3284271 15.3284271,20 14.5,20 L9.5,20 C8.67157288,20 8,19.3284271 8,18.5 L8,17.9857815 C5.74896172,17.7302697 4,15.8193808 4,13.5 L4,12.5 L6,12.5 L6,13.5 C6,14.7124547 6.8580279,15.7245062 8,15.9620708 Z M10,18 L14,18 L14,16 L10,16 L10,18 Z M20,7 L21,7 C22.6568542,7 24,8.34314575 24,10 L24,12 C24,13.6568542 22.6568542,15 21,15 L18,15 L18,4 C18,2.8954305 17.1045695,2 16,2 L8,2 C6.8954305,2 6,2.8954305 6,4 L6,15 L3,15 C1.34314575,15 0,13.6568542 0,12 L0,10 C-2.22044605e-16,8.34314575 1.34314575,7 3,7 L4,7 L4,4.5 C4,2.01471863 6.01471863,8.8817842e-16 8.5,0 L15.5,0 C17.9852814,-8.8817842e-16 20,2.01471863 20,4.5 L20,7 Z M20,13 L21,13 C21.5522847,13 22,12.5522847 22,12 L22,10 C22,9.44771525 21.5522847,9 21,9 L20,9 L20,13 Z M4,9 L3,9 C2.44771525,9 2,9.44771525 2,10 L2,12 C2,12.5522847 2.44771525,13 3,13 L4,13 L4,9 Z" />
+      </g>
+    </Icon>
+  );
+}
+
+export default IconSupport;
diff --git a/src/sentry/static/sentry/app/icons/icon-user.js b/src/sentry/static/sentry/app/icons/icon-user.js
new file mode 100644
index 0000000000..f8343ca8f9
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-user.js
@@ -0,0 +1,14 @@
+import React from 'react';
+import Icon from 'react-icon-base';
+
+function IconUser(props) {
+  return (
+    <Icon viewBox="0 0 24 24" {...props}>
+      <g fill="currentColor">
+        <path d="M4.57694084,15.0573642 C3.09845147,15.2679649 2,16.5339712 2,18.0273845 L2,20.5 C2,21.3284271 2.67157288,22 3.5,22 L20.5,22 C21.3284271,22 22,21.3284271 22,20.5 L22,18.0273845 C22,16.5339712 20.9015485,15.2679649 19.4230592,15.0573642 L15.9042257,14.5561303 C14.8548438,15.4562022 13.4909273,16 12,16 C10.5090727,16 9.14515623,15.4562022 8.0957743,14.5561303 L4.57694084,15.0573642 Z M4.2949014,13.0773506 L8.7103901,12.4483943 L9.39785869,13.0380473 C10.1184044,13.656071 11.0299588,14 12,14 C12.9700412,14 13.8815956,13.656071 14.6021413,13.0380473 L15.2896099,12.4483943 L19.7050986,13.0773506 C22.1692475,13.4283518 24,15.5383623 24,18.0273845 L24,20.5 C24,22.4329966 22.4329966,24 20.5,24 L3.5,24 C1.56700338,24 0,22.4329966 0,20.5 L8.8817842e-16,18.0273845 C8.8817842e-16,15.5383623 1.83075245,13.4283518 4.2949014,13.0773506 Z M12,2 C9.790861,2 8,3.790861 8,6 L8,10 C8,12.209139 9.790861,14 12,14 C14.209139,14 16,12.209139 16,10 L16,6 C16,3.790861 14.209139,2 12,2 Z M12,8.8817842e-16 C15.3137085,-1.11022302e-15 18,2.6862915 18,6 L18,10 C18,13.3137085 15.3137085,16 12,16 C8.6862915,16 6,13.3137085 6,10 L6,6 C6,2.6862915 8.6862915,6.66133815e-16 12,8.8817842e-16 Z" />
+      </g>
+    </Icon>
+  );
+}
+
+export default IconUser;
diff --git a/src/sentry/static/sentry/app/icons/icon-warning-sm.js b/src/sentry/static/sentry/app/icons/icon-warning-sm.js
new file mode 100644
index 0000000000..3ae8a65fc5
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-warning-sm.js
@@ -0,0 +1,16 @@
+import React from 'react';
+import Icon from 'react-icon-base';
+
+function IconWarningSm(props) {
+  return (
+    <Icon viewBox="0 0 9 9" {...props}>
+      <g stroke="currentColor" fill="none" strokeLinecap="round" strokeLinejoin="round">
+        <path d="M5.15181854,1.30233422 L8.39553842,7.00429812 L8.39553842,7.00429812 C8.60035317,7.36433116 8.47452389,7.82223078 8.11449085,8.02704553 C8.00146855,8.09134139 7.87367169,8.12514804 7.74364093,8.12514804 L1.25620116,8.12514804 L1.25620116,8.12514804 C0.841987601,8.12514804 0.506201163,7.7893616 0.506201163,7.37514804 C0.506201163,7.24511728 0.540007811,7.11732042 0.604303673,7.00429812 L3.84802356,1.30233422 L3.84802356,1.30233422 C4.05283831,0.942301175 4.51073792,0.816471891 4.87077097,1.02128665 C4.98802388,1.08798921 5.08511597,1.1850813 5.15181854,1.30233422 Z" />
+        <path d="M4.5,3.5 L4.5,4.5" />
+        <circle cx="4.5" cy="6" r=".5" fill="currentColor" stroke="none" />
+      </g>
+    </Icon>
+  );
+}
+
+export default IconWarningSm;
diff --git a/src/sentry/static/sentry/app/main.jsx b/src/sentry/static/sentry/app/main.jsx
index ad269f22d8..3e0155f513 100644
--- a/src/sentry/static/sentry/app/main.jsx
+++ b/src/sentry/static/sentry/app/main.jsx
@@ -1,9 +1,9 @@
 import React from 'react';
-import * as Router from 'react-router';
+import {Router, browserHistory} from 'react-router';
 import routes from './routes';
 
 export default class App extends React.Component {
   render() {
-    return <Router.Router history={Router.browserHistory}>{routes()}</Router.Router>;
+    return <Router history={browserHistory}>{routes()}</Router>;
   }
 }
diff --git a/src/sentry/static/sentry/app/mixins/appState.jsx b/src/sentry/static/sentry/app/mixins/appState.jsx
index c373b78226..4d7064e766 100644
--- a/src/sentry/static/sentry/app/mixins/appState.jsx
+++ b/src/sentry/static/sentry/app/mixins/appState.jsx
@@ -1,8 +1,8 @@
-import OrganizationStore from '../stores/organizationStore';
+import OrganizationsStore from '../stores/organizationsStore';
 
 let AppState = {
   getOrganizationList() {
-    return OrganizationStore.getAll();
+    return OrganizationsStore.getAll();
   },
 };
 
diff --git a/src/sentry/static/sentry/app/proptypes.jsx b/src/sentry/static/sentry/app/proptypes.jsx
index 54882fe56b..bb68fb5f4c 100644
--- a/src/sentry/static/sentry/app/proptypes.jsx
+++ b/src/sentry/static/sentry/app/proptypes.jsx
@@ -105,6 +105,47 @@ export const Tag = PropTypes.shape({
   uniqueValues: PropTypes.number,
 });
 
+export const Project = PropTypes.shape({
+  id: PropTypes.string.isRequired,
+  name: PropTypes.string.isRequired,
+  slug: PropTypes.string.isRequired,
+  callSign: PropTypes.string,
+  color: PropTypes.string,
+  dateCreated: PropTypes.string,
+  features: PropTypes.arrayOf(PropTypes.string),
+  firstEvent: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
+  isBookmarked: PropTypes.bool,
+  isPublic: PropTypes.bool,
+  platform: PropTypes.string,
+  stats: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),
+  status: PropTypes.string,
+});
+
+export const NavigationObject = PropTypes.shape({
+  name: PropTypes.string,
+  items: PropTypes.arrayOf(
+    PropTypes.shape({
+      path: PropTypes.string.isRequired,
+      title: PropTypes.string.isRequired,
+      /**
+       * Function that is given an object with
+       * `access`, `features`
+       *
+       * Return true to show nav item, false to hide
+       */
+      show: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
+
+      /**
+       * Function that is given an object with
+       * `access`, `features`, `organization`
+       *
+       * Return number to show in badge
+       */
+      badge: PropTypes.func,
+    })
+  ),
+});
+
 let SentryTypes = {
   AnyModel: PropTypes.shape({
     id: PropTypes.string.isRequired,
@@ -115,15 +156,14 @@ let SentryTypes = {
     id: PropTypes.string.isRequired,
   }),
   Tag,
-  Project: PropTypes.shape({
-    id: PropTypes.string.isRequired,
-  }),
+  Project,
   TagKey: PropTypes.shape({
     key: PropTypes.string.isRequired,
   }),
   Team: PropTypes.shape({
     id: PropTypes.string.isRequired,
   }),
+  NavigationObject,
   Member,
   User,
 };
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 0d77a7a9bd..f95cda8856 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -11,7 +11,6 @@ import AdminProjects from './views/adminProjects';
 import AdminQueue from './views/adminQueue';
 import AdminSettings from './views/adminSettings';
 import AdminUsers from './views/adminUsers';
-import AllTeamsList from './views/organizationTeams/allTeamsList';
 import ApiApplicationDetails from './views/apiApplicationDetails';
 import ApiApplications from './views/apiApplications';
 import ApiLayout from './views/apiLayout';
@@ -29,24 +28,31 @@ import GroupTagValues from './views/groupTagValues';
 import GroupTags from './views/groupTags';
 import GroupUserReports from './views/groupUserReports';
 import HookStore from './stores/hookStore';
+import InviteMember from './views/inviteMember/inviteMember';
 import MyIssuesAssignedToMe from './views/myIssues/assignedToMe';
 import MyIssuesBookmarked from './views/myIssues/bookmarked';
 import MyIssuesViewed from './views/myIssues/viewed';
 import NewProject from './views/projectInstall/newProject';
 import OnboardingConfigure from './views/onboarding/configure/index';
 import OnboardingWizard from './views/onboarding/index';
-import OrganizationAuditLog from './views/organizationAuditLog';
-import OrganizationContext from './views/organizationContext';
-import OrganizationApiKeysView from './views/settings/organization/apiKeys/organizationApiKeysView';
 import OrganizationApiKeyDetailsView from './views/settings/organization/apiKeys/organizationApiKeyDetailsView';
+import OrganizationApiKeysView from './views/settings/organization/apiKeys/organizationApiKeysView';
+import OrganizationAuditLogView from './views/settings/organization/auditLog/auditLogView';
+import OrganizationAuthView from './views/settings/organization/auth/organizationAuthView';
+import OrganizationContext from './views/organizationContext';
 import OrganizationCreate from './views/organizationCreate';
 import OrganizationDashboard from './views/organizationDashboard';
 import OrganizationDetails from './views/organizationDetails';
 import OrganizationHomeContainer from './components/organizations/homeContainer';
 import OrganizationIntegrations from './views/organizationIntegrations';
+import OrganizationMemberDetail from './views/settings/organization/members/organizationMemberDetail';
+import OrganizationMembersView from './views/settings/organization/members/organizationMembersView';
+import OrganizationPicker from './views/settings/components/organizationPicker';
+import OrganizationProjectsView from './views/settings/organization/projects/organizationProjectsView';
 import OrganizationRateLimits from './views/organizationRateLimits';
-import OrganizationRepositories from './views/organizationRepositories';
-import OrganizationSettings from './views/organizationSettings';
+import OrganizationRepositoriesView from './views/organizationRepositoriesView';
+import OrganizationGeneralSettingsView from './views/settings/organization/general/organizationGeneralSettingsView';
+import OrganizationSettingsLayout from './views/settings/organization/organizationSettingsLayout';
 import OrganizationStats from './views/organizationStats';
 import OrganizationTeams from './views/organizationTeams';
 import ProjectAlertRules from './views/projectAlertRules';
@@ -66,11 +72,13 @@ import ProjectInstallOverview from './views/projectInstall/overview';
 import ProjectInstallPlatform from './views/projectInstall/platform';
 import ProjectKeyDetails from './views/projectKeyDetails';
 import ProjectKeys from './views/projectKeys';
+import ProjectPicker from './views/settings/components/projectPicker';
 import ProjectProcessingIssues from './views/projectProcessingIssues';
 import ProjectReleaseTracking from './views/projectReleaseTracking';
 import ProjectReleases from './views/projectReleases';
 import ProjectSavedSearches from './views/projectSavedSearches';
 import ProjectSettings from './views/projectSettings';
+import ProjectSettingsLayout from './views/settings/project/projectSettingsLayout';
 import ProjectUserReportSettings from './views/projectUserReportSettings';
 import ProjectUserReports from './views/projectUserReports';
 import ReleaseAllEvents from './views/releaseAllEvents';
@@ -81,9 +89,10 @@ import ReleaseNewEvents from './views/releaseNewEvents';
 import ReleaseOverview from './views/releases/releaseOverview';
 import RouteNotFound from './views/routeNotFound';
 import SetCallsignsAction from './views/requiredAdminActions/setCallsigns';
+import SettingsIndex from './views/settings/settingsIndex';
+import SettingsWrapper from './views/settings/settingsWrapper';
 import SharedGroupDetails from './views/sharedGroupDetails';
 import Stream from './views/stream';
-import InviteMember from './views/inviteMember/inviteMember';
 import TeamCreate from './views/teamCreate';
 import TeamDetails from './views/teamDetails';
 import TeamMembers from './views/teamMembers';
@@ -98,53 +107,118 @@ function appendTrailingSlash(nextState, replaceState) {
 }
 
 const orgSettingsRoutes = [
+  <IndexRedirect key="index-org-settings" to="settings/" />,
+
+  <Route
+    key="projects"
+    path="projects/"
+    name="Projects"
+    component={errorHandler(OrganizationProjectsView)}
+  />,
+
+  <Route
+    key="settings"
+    path="settings/"
+    name="General"
+    component={errorHandler(OrganizationGeneralSettingsView)}
+  />,
+
   <Route
     key="api-keys"
     path="api-keys/"
+    name="API Key"
     component={errorHandler(OrganizationApiKeysView)}
   />,
+
   <Route
     key="api-keys-detail"
     path="api-keys/:apiKey/"
     component={errorHandler(OrganizationApiKeyDetailsView)}
   />,
+
   <Route
     key="audit-log"
     path="audit-log/"
-    component={errorHandler(OrganizationAuditLog)}
+    name="Audit Log"
+    component={errorHandler(OrganizationAuditLogView)}
+  />,
+
+  <Route
+    key="auth"
+    path="auth/"
+    name="Auth Providers"
+    component={errorHandler(OrganizationAuthView)}
   />,
+
   <Route
     key="integrations"
     path="integrations/"
+    name="Integrations"
     component={errorHandler(OrganizationIntegrations)}
   />,
+
+  <Route key="members" path="members/" name="Members">
+    <IndexRoute component={errorHandler(OrganizationMembersView)} />
+    <Route path="new/" name="Invite" component={errorHandler(InviteMember)} />,
+    <Route
+      path=":memberId/"
+      name="Details"
+      component={errorHandler(OrganizationMemberDetail)}
+    />,
+  </Route>,
+
   <Route
     key="rate-limits"
     path="rate-limits/"
+    name="Rate Limits"
     component={errorHandler(OrganizationRateLimits)}
   />,
-  <Route key="members/new/" path="members/new/" component={errorHandler(InviteMember)} />,
-  <Route key="repos" path="repos/" component={errorHandler(OrganizationRepositories)} />,
+
+  <Route
+    key="repos"
+    path="repos/"
+    name="Repositories"
+    component={errorHandler(OrganizationRepositoriesView)}
+  />,
+
   <Route
     key="settings"
     path="settings/"
-    component={errorHandler(OrganizationSettings)}
+    component={errorHandler(OrganizationGeneralSettingsView)}
   />,
 
-  <Route key="team-details" path="teams/:teamId/" component={errorHandler(TeamDetails)}>
+  <Route
+    key="team-details"
+    name="Teams"
+    path="teams/:teamId/"
+    component={errorHandler(TeamDetails)}
+  >
     <IndexRedirect to="settings/" />
-    <Route path="settings/" component={errorHandler(TeamSettings)} />
-    <Route path="members/" component={errorHandler(TeamMembers)} />
+    <Route path="settings/" name="Settings" component={errorHandler(TeamSettings)} />
+    <Route path="members/" name="Members" component={errorHandler(TeamMembers)} />
   </Route>,
 
-  <Route key="teams" path="teams/" component={errorHandler(OrganizationTeams)} />,
+  <Route
+    key="teams"
+    path="teams/"
+    name="Teams"
+    component={errorHandler(OrganizationTeams)}
+  />,
 
-  <Route key="all-teams" path="all-teams/" component={errorHandler(OrganizationTeams)}>
-    <IndexRoute component={errorHandler(AllTeamsList)} />
-  </Route>,
+  <Route
+    key="all-teams"
+    path="all-teams/"
+    name="All Teams"
+    allTeams
+    component={errorHandler(OrganizationTeams)}
+  />,
+
+  <Route key="org-stats" path="stats/" component={errorHandler(OrganizationStats)} />,
 ];
 
 const projectSettingsRoutes = [
+  <IndexRedirect key="projects-index" to="alerts/" />,
+
   <Route
     key="alerts/"
     name="Alerts"
@@ -260,6 +334,40 @@ function routes() {
         />
       </Route>
 
+      <Route
+        newnew
+        path="/settings/"
+        name="Settings"
+        component={errorHandler(SettingsWrapper)}
+      >
+        <IndexRoute component={errorHandler(SettingsIndex)} />
+        <Route path="organization/">
+          <IndexRoute component={errorHandler(OrganizationPicker)} />
+
+          <Route
+            name="Organization"
+            path=":orgId/"
+            component={errorHandler(OrganizationContext)}
+          >
+            <Route component={errorHandler(OrganizationSettingsLayout)}>
+              {hooksOrgRoutes}
+              {orgSettingsRoutes}
+            </Route>
+
+            <Route path="project/">
+              <IndexRoute component={errorHandler(ProjectPicker)} />
+              <Route
+                name="Project"
+                path=":projectId/"
+                component={errorHandler(ProjectSettingsLayout)}
+              >
+                {projectSettingsRoutes}
+              </Route>
+            </Route>
+          </Route>
+        </Route>
+      </Route>
+
       <Route path="/api/new-token/" component={errorHandler(ApiNewToken)} />
 
       <Route path="/manage/" component={errorHandler(AdminLayout)}>
@@ -323,10 +431,6 @@ function routes() {
           path="/organizations/:orgId/projects/choose/"
           component={errorHandler(ProjectChooser)}
         />
-        <Route
-          path="/organizations/:orgId/stats/"
-          component={errorHandler(OrganizationStats)}
-        />
 
         <Route
           path="/organizations/:orgId/actions/set-callsigns/"
diff --git a/src/sentry/static/sentry/app/stores/hookStore.jsx b/src/sentry/static/sentry/app/stores/hookStore.jsx
index 689f879ca3..1b2f3103fe 100644
--- a/src/sentry/static/sentry/app/stores/hookStore.jsx
+++ b/src/sentry/static/sentry/app/stores/hookStore.jsx
@@ -3,6 +3,8 @@ import _ from 'lodash';
 
 let validHookNames = new Set([
   'footer',
+  'settings:organization-navigation',
+  'settings:organization-navigation-config',
   'organization:header',
   'organization:sidebar',
   'organization:dashboard:secondary-column',
@@ -51,3 +53,4 @@ const HookStore = Reflux.createStore({
 });
 
 export default HookStore;
+window.hook = HookStore;
diff --git a/src/sentry/static/sentry/app/stores/latestContextStore.jsx b/src/sentry/static/sentry/app/stores/latestContextStore.jsx
new file mode 100644
index 0000000000..d3f7402433
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/latestContextStore.jsx
@@ -0,0 +1,66 @@
+import Reflux from 'reflux';
+
+import ProjectActions from '../actions/projectActions';
+import OrganizationsActions from '../actions/organizationsActions';
+
+// Keeps track of last usable project/org
+// this currently won't track when users navigate out of a org/project completely,
+// it tracks only if a user switches into a new org/project
+//
+// Only keep slug so that people don't get the idea to access org/project data here
+// Org/project data is currently in organizationsStore/projectsStore
+const LatestContextStore = Reflux.createStore({
+  getInitialState() {
+    return this.state;
+  },
+
+  init() {
+    this.reset();
+    this.listenTo(ProjectActions.setActive, this.onSetActiveProject);
+    this.listenTo(OrganizationsActions.setActive, this.onSetActiveOrganization);
+    this.listenTo(OrganizationsActions.update, this.onUpdateOrganization);
+  },
+
+  reset() {
+    this.state = {
+      project: null,
+      organization: null,
+    };
+    return this.state;
+  },
+
+  onUpdateOrganization(org) {
+    // Don't do anything if base/target orgs are falsey
+    if (!this.state.organization) return;
+    if (!org) return;
+    // Check to make sure current active org is what has been updated
+    if (org.slug !== this.state.organization.slug) return;
+
+    this.state.organization = {...org};
+    this.trigger(this.state);
+  },
+
+  onSetActiveOrganization(org) {
+    if (!org) {
+      this.state.organization = null;
+    } else if (!this.state.organization || this.state.organization.slug !== org.slug) {
+      // Update only if different
+      this.state.organization = {...org};
+    }
+
+    this.trigger(this.state);
+  },
+
+  onSetActiveProject(project) {
+    if (!project) {
+      this.state.project = null;
+    } else if (!this.state.project || this.state.project.slug !== project.slug) {
+      // Update only if different
+      this.state.project = {...project};
+    }
+
+    this.trigger(this.state);
+  },
+});
+
+export default LatestContextStore;
diff --git a/src/sentry/static/sentry/app/stores/organizationStore.jsx b/src/sentry/static/sentry/app/stores/organizationStore.jsx
deleted file mode 100644
index f7dcba5d28..0000000000
--- a/src/sentry/static/sentry/app/stores/organizationStore.jsx
+++ /dev/null
@@ -1,37 +0,0 @@
-import Reflux from 'reflux';
-
-const OrganizationStore = Reflux.createStore({
-  init() {
-    this.items = [];
-  },
-
-  get(slug) {
-    return this.items.find(item => item.slug === slug);
-  },
-
-  getAll() {
-    return this.items;
-  },
-
-  add(item) {
-    let match = false;
-    this.items.forEach((existing, idx) => {
-      if (existing.id === item.id) {
-        item = {...existing, ...item};
-        this.items[idx] = item;
-        match = true;
-      }
-    });
-    if (!match) {
-      this.items.push(item);
-    }
-    this.trigger([item]);
-  },
-
-  load(items) {
-    this.items = items;
-    this.trigger(items);
-  },
-});
-
-export default OrganizationStore;
diff --git a/src/sentry/static/sentry/app/stores/organizationsStore.jsx b/src/sentry/static/sentry/app/stores/organizationsStore.jsx
new file mode 100644
index 0000000000..7a7fb728e1
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/organizationsStore.jsx
@@ -0,0 +1,68 @@
+import Reflux from 'reflux';
+
+import OrganizationsActions from '../actions/organizationsActions';
+
+const OrganizationsStore = Reflux.createStore({
+  listenables: [OrganizationsActions],
+
+  // So we can use Reflux.connect in a component mixin
+  getInitialState() {
+    return this.items;
+  },
+
+  init() {
+    this.items = [];
+  },
+
+  onUpdate(org) {
+    this.add(org);
+  },
+
+  onChangeSlug(prev, next) {
+    if (prev.slug === next.slug) return;
+
+    this.remove(prev.slug);
+    this.add(next);
+  },
+
+  onRemoveSuccess(slug) {
+    this.remove(slug);
+  },
+
+  get(slug) {
+    return this.items.find(item => item.slug === slug);
+  },
+
+  getAll() {
+    return this.items;
+  },
+
+  remove(slug) {
+    this.items = this.items.filter(item => slug !== item.slug);
+    this.trigger(this.items);
+  },
+
+  add(item) {
+    let match = false;
+    this.items.forEach((existing, idx) => {
+      if (existing.id === item.id) {
+        item = {...existing, ...item};
+        this.items[idx] = item;
+        match = true;
+      }
+    });
+    if (!match) {
+      this.items.push(item);
+    }
+    this.trigger(this.items);
+  },
+
+  load(items) {
+    this.items = items;
+    this.trigger(items);
+  },
+});
+
+export default OrganizationsStore;
+
+window.o = OrganizationsStore;
diff --git a/src/sentry/static/sentry/app/stores/projectStore.jsx b/src/sentry/static/sentry/app/stores/projectsStore.jsx
similarity index 95%
rename from src/sentry/static/sentry/app/stores/projectStore.jsx
rename to src/sentry/static/sentry/app/stores/projectsStore.jsx
index 9abee9b141..6ec8422cce 100644
--- a/src/sentry/static/sentry/app/stores/projectStore.jsx
+++ b/src/sentry/static/sentry/app/stores/projectsStore.jsx
@@ -3,7 +3,7 @@ import _ from 'lodash';
 
 import ProjectActions from '../actions/projectActions';
 
-const ProjectStore = Reflux.createStore({
+const ProjectsStore = Reflux.createStore({
   init() {
     this.reset();
     this.listenTo(ProjectActions.createSuccess, this.onCreateSuccess);
@@ -61,4 +61,4 @@ const ProjectStore = Reflux.createStore({
   },
 });
 
-export default ProjectStore;
+export default ProjectsStore;
diff --git a/src/sentry/static/sentry/app/stores/settingsIndicatorStore.jsx b/src/sentry/static/sentry/app/stores/settingsIndicatorStore.jsx
new file mode 100644
index 0000000000..f1feffa90a
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/settingsIndicatorStore.jsx
@@ -0,0 +1,57 @@
+import Reflux from 'reflux';
+
+import SettingsIndicatorActions from '../actions/settingsIndicatorActions';
+
+const SettingsIndicatorStore = Reflux.createStore({
+  init() {
+    this.state = null;
+    this.model = null;
+    this.id = null;
+    this.listenTo(SettingsIndicatorActions.add, this.add);
+    this.listenTo(SettingsIndicatorActions.undo, this.undo);
+    this.listenTo(SettingsIndicatorActions.remove, this.remove);
+  },
+
+  add(message, type, options = {}) {
+    if (options.model) {
+      this.model = options.model;
+    }
+    this.id = options.id;
+
+    this.state = {
+      message,
+      type,
+    };
+    this.trigger(this.state);
+  },
+
+  remove() {
+    // Do nothing if already null
+    if (!this.state) return;
+
+    this.state = null;
+    this.trigger(this.state);
+  },
+
+  undo() {
+    if (!this.model || !this.id) return;
+
+    // Remove current messages
+    this.remove();
+    let oldValue = this.model.getValue(this.id);
+    let didUndo = this.model.undo();
+    let newValue = this.model.getValue(this.id);
+
+    if (!didUndo) return;
+
+    // billy: I don't like the store <-> model coupling
+    let label = this.model.getDescriptor(this.id, 'label');
+    if (!label) return;
+
+    this.model.saveField(this.id, newValue).then(() => {
+      this.add(`Restored ${label} from "${oldValue}" to "${newValue}"`, 'undo', 5000);
+    });
+  },
+});
+
+export default SettingsIndicatorStore;
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
index 60f7930b6d..7608170194 100644
--- a/src/sentry/static/sentry/app/stores/teamStore.jsx
+++ b/src/sentry/static/sentry/app/stores/teamStore.jsx
@@ -1,13 +1,14 @@
 import Reflux from 'reflux';
 import TeamActions from '../actions/teamActions';
-import ProjectStore from './projectStore';
+import ProjectsStore from './projectsStore';
 
 const TeamStore = Reflux.createStore({
   init() {
+    this.initialized = false;
     this.reset();
 
     this.listenTo(TeamActions.updateSuccess, this.onUpdateSuccess);
-    this.listenTo(ProjectStore, this.onProject);
+    this.listenTo(ProjectsStore, this.onProject);
   },
 
   reset() {
@@ -21,6 +22,7 @@ const TeamStore = Reflux.createStore({
         this.projectMap[project.id] = item.id;
       });
     });
+    this.initialized = true;
     this.items = items;
     this.trigger(new Set(items.map(item => item.id)));
   },
@@ -46,7 +48,7 @@ const TeamStore = Reflux.createStore({
       let team = this.getById(teamId);
       // TODO: make copy of project? right now just assigning reference
       // to project form project store
-      let project = ProjectStore.getById(projectId);
+      let project = ProjectsStore.getById(projectId);
       team.project = project;
       teamsChanged.add(team.id);
     });
diff --git a/src/sentry/static/sentry/app/utils/getSettingsComponent.jsx b/src/sentry/static/sentry/app/utils/getSettingsComponent.jsx
new file mode 100644
index 0000000000..27fdb6fb23
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/getSettingsComponent.jsx
@@ -0,0 +1,13 @@
+// Load components based on route properties
+//
+// This is for new/old settings pages
+//
+// @return Promise<React.Component>
+export default function getSettingsComponent(newComponent, oldComponent, routes) {
+  // Use property on Route to see if it should be apart of new settings
+  if (routes && routes.length > 0 && routes[1] && routes[1].newnew) {
+    return newComponent().then(mod => mod.default);
+  }
+
+  return oldComponent().then(mod => mod.default);
+}
diff --git a/src/sentry/static/sentry/app/utils/recreateRoute.jsx b/src/sentry/static/sentry/app/utils/recreateRoute.jsx
new file mode 100644
index 0000000000..ded0832310
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/recreateRoute.jsx
@@ -0,0 +1,29 @@
+import {findLastIndex} from 'lodash';
+
+import replaceRouterParams from './replaceRouterParams';
+
+// Given a route object or a string and a list of routes + params from router, this will attempt to
+// recreate a location string while replacing url params.
+//
+// Can additionally specify the number of routes to move back
+//
+// See tests for examples
+export default function recreateRoute(to, {routes, params, stepBack}) {
+  let paths = routes.map(({path}) => path || '');
+  let lastRootIndex = findLastIndex(paths, path => path[0] === '/');
+  let routeIndex;
+  let routeToRoute = typeof to !== 'string';
+  if (routeToRoute) {
+    routeIndex = routes.indexOf(to) + lastRootIndex;
+  }
+
+  let baseRoute = paths.slice(lastRootIndex, routeIndex);
+
+  if (typeof stepBack !== 'undefined') {
+    baseRoute = baseRoute.slice(0, stepBack);
+  }
+
+  let fullRoute = `${baseRoute.join('')}${routeToRoute ? '' : to}`;
+
+  return replaceRouterParams(fullRoute, params);
+}
diff --git a/src/sentry/static/sentry/app/utils/replaceRouterParams.jsx b/src/sentry/static/sentry/app/utils/replaceRouterParams.jsx
new file mode 100644
index 0000000000..83462f6214
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/replaceRouterParams.jsx
@@ -0,0 +1,18 @@
+export default function replaceRouterParams(route, params) {
+  // parse route params from route
+  let matches = route.match(/:\w+/g);
+
+  if (!matches || !matches.length) {
+    return route;
+  }
+
+  // replace with current params
+  matches.forEach(param => {
+    let paramName = param.slice(1);
+    if (typeof params[paramName] === 'undefined') return;
+
+    route = route.replace(param, params[paramName]);
+  });
+
+  return route;
+}
diff --git a/src/sentry/static/sentry/app/utils/theme.js b/src/sentry/static/sentry/app/utils/theme.js
new file mode 100644
index 0000000000..dbe0aaca15
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/theme.js
@@ -0,0 +1,79 @@
+const theme = {
+  offWhite: '#FBFBFC',
+
+  gray1: '#C1B8CA',
+  gray2: '#9788A5',
+  gray3: '#655674',
+  gray4: '',
+  gray5: '#2F2837',
+
+  blue: '#4674ca',
+  blueLight: '#608EE4',
+  blueDark: '#2D5BB1',
+
+  green: '#57be8c',
+  greenLight: '#71D8A6',
+  greenDark: '#3EA573',
+
+  yellow: '#ECD744',
+  yellowLight: '#FFF15E',
+  yellowDark: '#D3BE2B',
+
+  yellowOrange: '#f9a66d',
+  yellowOrangeLight: '#FFC087',
+  yellowOrangeDark: '#E08D54',
+
+  orange: '#ec5e44',
+  orangeLight: '#FF785E',
+  orangeDark: '#D3452B',
+
+  red: '#e03e2f',
+  redLight: '#FA5849',
+  redDark: '#C72516',
+
+  pink: '#F868BC',
+  pinkLight: '#FF82D6',
+  pinkDark: '#DF4FA3',
+
+  purple: '#6C5FC7',
+  purplelightest: '#9F92FA',
+  purpleLight: '#8679E1',
+  purpleDark: '#5346AE',
+  purpleDarkest: '#392C94',
+
+  borderLight: '#E7E1EC',
+  borderDark: '#D5CFDB',
+
+  fontFamily: '"Rubik", "Avenir Next", sans-serif',
+  fontFamilyMono: 'Monaco, monospace',
+
+  radius: '4px',
+
+  dropShadowLight: '0 2px 0 rgba(37, 11, 54, 0.04)',
+  dropShadowHeavy: '0 1px 4px 1px rgba(47,40,55,0.08), 0 4px 16px 0 rgba(47,40,55,0.12)',
+
+  alert: {
+    info: {
+      background: '#F5FAFE',
+      border: '#B5D6ED',
+    },
+    warning: {
+      background: '#FFFDF7',
+      border: '#E1D697',
+    },
+    success: {
+      background: '#F8FCF7',
+      border: '#BBD6B3',
+    },
+    error: {
+      background: '#FDF6F5',
+      border: '#E7C0BC',
+      textLight: '#92635f',
+      textDark: '#5d3e3b',
+    },
+  },
+};
+
+theme.textColor = theme.gray5;
+
+export default theme;
diff --git a/src/sentry/static/sentry/app/utils/withLatestContext.jsx b/src/sentry/static/sentry/app/utils/withLatestContext.jsx
new file mode 100644
index 0000000000..bd3746ef55
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/withLatestContext.jsx
@@ -0,0 +1,38 @@
+import React from 'react';
+import Reflux from 'reflux';
+
+import LatestContextStore from '../stores/latestContextStore';
+import withOrganizations from './withOrganizations';
+
+// HoC that returns most usable organization + project
+// This means your org if you only have 1 org, or
+// last accessed organization/project
+const withLatestContext = WrappedComponent =>
+  withOrganizations(
+    React.createClass({
+      mixins: [Reflux.connect(LatestContextStore, 'latestContext')],
+      render() {
+        let {organizations} = this.props;
+        let {latestContext} = this.state;
+        let {organization, project} = latestContext || {};
+
+        // Even though org details exists in LatestContextStore,
+        // fetch organization from OrganizationsStore so that we can
+        // expect consistent data structure because OrganizationsStore has a list
+        // of orgs but not full org details
+        let latestOrganization =
+          organization || (organizations && organizations.length && organizations[0]);
+
+        return (
+          <WrappedComponent
+            organizations={organizations}
+            organization={latestOrganization}
+            project={project}
+            {...this.props}
+          />
+        );
+      },
+    })
+  );
+
+export default withLatestContext;
diff --git a/src/sentry/static/sentry/app/utils/withOrganizations.jsx b/src/sentry/static/sentry/app/utils/withOrganizations.jsx
new file mode 100644
index 0000000000..4b87668063
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/withOrganizations.jsx
@@ -0,0 +1,16 @@
+import React from 'react';
+import Reflux from 'reflux';
+
+import OrganizationsStore from '../stores/organizationsStore';
+
+const withOrganizations = WrappedComponent =>
+  React.createClass({
+    mixins: [Reflux.connect(OrganizationsStore, 'organizations')],
+    render() {
+      return (
+        <WrappedComponent organizations={this.state.organizations} {...this.props} />
+      );
+    },
+  });
+
+export default withOrganizations;
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 85dbf36849..115a0086b9 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -4,6 +4,8 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import $ from 'jquery';
 import Cookies from 'js-cookie';
+import {ThemeProvider} from 'emotion-theming';
+import theme from '../utils/theme';
 
 import ApiMixin from '../mixins/apiMixin';
 import Alerts from '../components/alerts';
@@ -13,7 +15,7 @@ import Indicators from '../components/indicators';
 import InstallWizard from './installWizard';
 import LoadingIndicator from '../components/loadingIndicator';
 import OrganizationsLoader from '../components/organizations/organizationsLoader';
-import OrganizationStore from '../stores/organizationStore';
+import OrganizationsStore from '../stores/organizationsStore';
 
 import {t} from '../locale';
 
@@ -55,7 +57,7 @@ const App = React.createClass({
         member: '1',
       },
       success: data => {
-        OrganizationStore.load(data);
+        OrganizationsStore.load(data);
         this.setState({
           loading: false,
         });
@@ -105,7 +107,7 @@ const App = React.createClass({
   },
 
   componentWillUnmount() {
-    OrganizationStore.load([]);
+    OrganizationsStore.load([]);
   },
 
   onConfigured() {
@@ -134,11 +136,13 @@ const App = React.createClass({
     }
 
     return (
-      <OrganizationsLoader>
-        <Alerts className="messages-container" />
-        <Indicators className="indicators-container" />
-        {this.props.children}
-      </OrganizationsLoader>
+      <ThemeProvider theme={theme}>
+        <OrganizationsLoader>
+          <Alerts className="messages-container" />
+          <Indicators className="indicators-container" />
+          {this.props.children}
+        </OrganizationsLoader>
+      </ThemeProvider>
     );
   },
 });
diff --git a/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx b/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx
index 600cfe2772..effeb6a61b 100644
--- a/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx
+++ b/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx
@@ -1,19 +1,18 @@
+import {browserHistory} from 'react-router';
 import React from 'react';
 import classNames from 'classnames';
 
-import OrganizationState from '../../mixins/organizationState';
-import ApiMixin from '../../mixins/apiMixin';
+import {t} from '../../locale';
 import AlertActions from '../../actions/alertActions';
-
+import ApiMixin from '../../mixins/apiMixin';
 import Button from '../../components/buttons/button';
+import ConfigStore from '../../stores/configStore';
 import LoadingIndicator from '../../components/loadingIndicator';
-import TextField from '../../components/forms/textField';
-
+import OrganizationState from '../../mixins/organizationState';
 import RoleSelect from './roleSelect';
 import TeamSelect from './teamSelect';
-
-import ConfigStore from '../../stores/configStore';
-import {t} from '../../locale';
+import TextField from '../../components/forms/textField';
+import recreateRoute from '../../utils/recreateRoute';
 
 const InviteMember = React.createClass({
   mixins: [ApiMixin, OrganizationState],
@@ -71,8 +70,13 @@ const InviteMember = React.createClass({
   },
 
   redirectToMemberPage() {
-    let {slug} = this.getOrganization();
-    window.location.href = `/organizations/${slug}/members/`;
+    // Get path to parent route (`/organizations/${slug}/members/`)
+    let pathToParentRoute = recreateRoute('', {
+      params: this.props.params,
+      routes: this.props.routes,
+      stepBack: -1,
+    });
+    browserHistory.push(pathToParentRoute);
   },
 
   splitEmails(text) {
@@ -96,6 +100,7 @@ const InviteMember = React.createClass({
           role: selectedRole,
         },
         success: () => {
+          // TODO(billy): Use SettingsIndicator when these views only exist in Settings area
           AlertActions.addAlert({
             message: `Added ${email}`,
             type: 'success',
@@ -129,7 +134,7 @@ const InviteMember = React.createClass({
     if (!emails.length) return;
     this.setState({busy: true});
     Promise.all(emails.map(this.inviteUser))
-      .then(() => setTimeout(this.redirectToMemberPage, 3000))
+      .then(() => this.redirectToMemberPage())
       .catch(error => {
         if (!error.email && !error.role) {
           Raven.captureMessage('unkown error ', {
diff --git a/src/sentry/static/sentry/app/views/organizationAuditLog.jsx b/src/sentry/static/sentry/app/views/organizationAuditLog.jsx
deleted file mode 100644
index 9c6c4accab..0000000000
--- a/src/sentry/static/sentry/app/views/organizationAuditLog.jsx
+++ /dev/null
@@ -1,219 +0,0 @@
-import React from 'react';
-import DocumentTitle from 'react-document-title';
-import {browserHistory} from 'react-router';
-
-import ApiMixin from '../mixins/apiMixin';
-import DateTime from '../components/dateTime';
-import Avatar from '../components/avatar';
-import LoadingIndicator from '../components/loadingIndicator';
-import LoadingError from '../components/loadingError';
-import OrganizationState from '../mixins/organizationState';
-import Pagination from '../components/pagination';
-import SelectInput from '../components/selectInput';
-
-import {t} from '../locale';
-
-const EVENT_TYPES = [
-  'member.invite',
-  'member.add',
-  'member.accept-invite',
-  'member.remove',
-  'member.edit',
-  'member.join-team',
-  'member.leave-team',
-  'team.create',
-  'team.edit',
-  'team.remove',
-  'project.create',
-  'project.edit',
-  'project.remove',
-  'project.set-public',
-  'project.set-private',
-  'org.create',
-  'org.edit',
-  'org.remove',
-  'tagkey.remove',
-  'projectkey.create',
-  'projectkey.edit',
-  'projectkey.remove',
-  'projectkey.enable',
-  'projectkey.disable',
-  'sso.enable',
-  'sso.disable',
-  'sso.edit',
-  'sso-identity.link',
-  'api-key.create',
-  'api-key.edit',
-  'api-key.remove',
-].sort();
-
-const OrganizationAuditLog = React.createClass({
-  mixins: [ApiMixin, OrganizationState],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      entryList: [],
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  componentWillReceiveProps(nextProps) {
-    if (
-      nextProps.location.search !== this.props.location.search ||
-      nextProps.params.orgId !== this.props.params.orgId
-    ) {
-      this.remountComponent();
-    }
-  },
-
-  remountComponent() {
-    this.setState(this.getInitialState(), this.fetchData);
-  },
-
-  fetchData() {
-    this.setState({
-      loading: true,
-    });
-
-    this.api.request(this.getEndpoint(), {
-      query: this.props.location.query,
-      success: (data, _, jqXHR) => {
-        this.setState({
-          loading: false,
-          error: false,
-          entryList: data,
-          pageLinks: jqXHR.getResponseHeader('Link'),
-        });
-      },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true,
-        });
-      },
-    });
-  },
-
-  getEndpoint() {
-    return `/organizations/${this.props.params.orgId}/audit-logs/`;
-  },
-
-  getTitle() {
-    let org = this.context.organization;
-    return `${org.name} Audit Log`;
-  },
-
-  onEventSelect(sel) {
-    let value = sel.val();
-    if (this.props.location.query.event === value) {
-      return;
-    }
-    let queryParams = {
-      event: value,
-    };
-    browserHistory.pushState(null, this.props.location.pathname, queryParams);
-  },
-
-  renderResults() {
-    if (this.state.entryList.length === 0) {
-      return (
-        <tr>
-          <td colSpan="4">{t('No results found.')}</td>
-        </tr>
-      );
-    }
-
-    return this.state.entryList.map(entry => {
-      return (
-        <tr key={entry.id}>
-          <td className="table-user-info">
-            {entry.actor.email && <Avatar user={entry.actor} />}
-            <h5>{entry.actor.name}</h5>
-            {entry.note}
-          </td>
-          <td>{entry.event}</td>
-          <td>{entry.ipAddress}</td>
-          <td>
-            <DateTime date={entry.dateCreated} />
-          </td>
-        </tr>
-      );
-    });
-  },
-
-  render() {
-    let currentEventType = this.props.location.query.event;
-
-    return (
-      <DocumentTitle title={this.getTitle()}>
-        <div>
-          <h3>{t('Audit Log')}</h3>
-
-          <div className="pull-right">
-            <form className="form-horizontal" style={{marginBottom: 20}}>
-              <div className="control-group">
-                <div className="controls">
-                  <SelectInput
-                    name="event"
-                    onChange={this.onEventSelect}
-                    value={currentEventType}
-                    style={{width: 250}}
-                  >
-                    <option key="any" value="">
-                      {t('Any')}
-                    </option>
-                    {EVENT_TYPES.map(eventType => {
-                      return <option key={eventType}>{eventType}</option>;
-                    })}
-                  </SelectInput>
-                </div>
-              </div>
-            </form>
-          </div>
-
-          <p>{t('Sentry keeps track of important events within your organization.')}</p>
-
-          <div className="panel panel-default horizontal-scroll c-b">
-            <table className="table">
-              <thead>
-                <tr>
-                  <th>{t('Member')}</th>
-                  <th>{t('Action')}</th>
-                  <th>{t('IP')}</th>
-                  <th>{t('Time')}</th>
-                </tr>
-              </thead>
-              <tbody>
-                {this.state.loading ? (
-                  <tr>
-                    <td colSpan="4">
-                      <LoadingIndicator />
-                    </td>
-                  </tr>
-                ) : this.state.error ? (
-                  <tr>
-                    <td colSpan="4">
-                      <LoadingError onRetry={this.fetchData} />
-                    </td>
-                  </tr>
-                ) : (
-                  this.renderResults()
-                )}
-              </tbody>
-            </table>
-          </div>
-          {this.state.pageLinks && (
-            <Pagination pageLinks={this.state.pageLinks} {...this.props} />
-          )}
-        </div>
-      </DocumentTitle>
-    );
-  },
-});
-
-export default OrganizationAuditLog;
diff --git a/src/sentry/static/sentry/app/views/organizationContext.jsx b/src/sentry/static/sentry/app/views/organizationContext.jsx
index e699d55110..1e00b55f0d 100644
--- a/src/sentry/static/sentry/app/views/organizationContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationContext.jsx
@@ -10,11 +10,10 @@ import LoadingIndicator from '../components/loadingIndicator';
 import BroadcastModal from '../components/broadcastModal';
 import SentryTypes from '../proptypes';
 import TeamStore from '../stores/teamStore';
-import ProjectStore from '../stores/projectStore';
+import ProjectsStore from '../stores/projectsStore';
 import ProjectActions from '../actions/projectActions';
 import ConfigStore from '../stores/configStore';
-
-import OrganizationState from '../mixins/organizationState';
+import {setActiveOrganization} from '../actionCreators/organizations';
 
 import {t} from '../locale';
 
@@ -31,11 +30,7 @@ const OrganizationContext = React.createClass({
     organization: SentryTypes.Organization,
   },
 
-  mixins: [
-    ApiMixin,
-    OrganizationState,
-    Reflux.listenTo(ProjectActions.createSuccess, 'onProjectCreation'),
-  ],
+  mixins: [ApiMixin, Reflux.listenTo(ProjectActions.createSuccess, 'onProjectCreation')],
 
   getInitialState() {
     return {
@@ -100,8 +95,10 @@ const OrganizationContext = React.createClass({
           showBroadcast: this.shouldShowBroadcast(data),
         });
 
+        setActiveOrganization(data);
+
         TeamStore.loadInitialData(data.teams);
-        ProjectStore.loadInitialData(
+        ProjectsStore.loadInitialData(
           data.teams.reduce((out, team) => {
             return out.concat(team.projects);
           }, [])
diff --git a/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx b/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
index 22fa6244b5..2637f8ff70 100644
--- a/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
@@ -1,191 +1,8 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 
-import ApiMixin from '../../mixins/apiMixin';
-import IndicatorStore from '../../stores/indicatorStore';
 import OrganizationState from '../../mixins/organizationState';
-import {RangeField} from '../../components/forms';
-import {t} from '../../locale';
-
-const AccountLimit = React.createClass({
-  propTypes: {
-    value: PropTypes.number,
-    onChange: PropTypes.func.isRequired,
-  },
-
-  getRateLimitValues() {
-    let steps = [];
-    let i = 0;
-    while (i <= 1000000) {
-      steps.push(i);
-      if (i < 10000) {
-        i += 1000;
-      } else if (i < 100000) {
-        i += 10000;
-      } else {
-        i += 100000;
-      }
-    }
-    return steps;
-  },
-
-  render() {
-    return (
-      <RangeField
-        name="accountLimit"
-        min={0}
-        max={1000000}
-        value={this.props.value}
-        allowedValues={this.getRateLimitValues()}
-        help="The maximum number of events to accept across this entire organization."
-        placeholder="e.g. 500"
-        onChange={this.props.onChange}
-        inputClassName="col-md-3"
-        formatLabel={value => {
-          return !value ? 'No Limit' : `${value.toLocaleString()} per hour`;
-        }}
-      />
-    );
-  },
-});
-
-const RateLimitEditor = React.createClass({
-  propTypes: {
-    organization: PropTypes.object.isRequired,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    let projectLimit = this.props.organization.quota.projectLimit;
-    let accountLimit = this.props.organization.quota.accountLimit;
-
-    return {
-      activeNav: 'rate-limits',
-      currentProjectLimit: projectLimit,
-      savedProjectLimit: projectLimit,
-      currentAccountLimit: accountLimit,
-      savedAccountLimit: accountLimit,
-      saving: false,
-    };
-  },
-
-  onProjectLimitChange(value) {
-    this.setState({
-      currentProjectLimit: value,
-    });
-  },
-
-  onAccountLimitChange(value) {
-    this.setState({
-      currentAccountLimit: value,
-    });
-  },
-
-  onSubmit(e) {
-    e.preventDefault();
-
-    let loadingIndicator = IndicatorStore.add(t('Saving..'));
-
-    this.setState(
-      {
-        saving: true,
-        error: false,
-      },
-      () => {
-        this.api.request(`/organizations/${this.props.organization.slug}/`, {
-          method: 'PUT',
-          data: {
-            projectRateLimit: this.state.currentProjectLimit,
-            accountRateLimit: this.state.currentAccountLimit,
-          },
-          success: data => {
-            // TODO(dcramer): propagate this change correctly (how??)
-            IndicatorStore.remove(loadingIndicator);
-            this.props.organization.quota = data.quota;
-            this.setState({
-              saving: false,
-              savedProjectLimit: data.quota.projectLimit,
-              savedAccountLimit: data.quota.accountLimit,
-            });
-          },
-          error: () => {
-            this.setState({saving: false});
-            IndicatorStore.remove(loadingIndicator);
-            IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
-              duration: 3000,
-            });
-          },
-        });
-      }
-    );
-  },
-
-  render() {
-    let {
-      currentProjectLimit,
-      savedProjectLimit,
-      currentAccountLimit,
-      savedAccountLimit,
-      saving,
-    } = this.state;
-    let {maxRate, maxRateInterval} = this.props.organization.quota;
-    let canSave =
-      (savedProjectLimit !== currentProjectLimit ||
-        savedAccountLimit !== currentAccountLimit) &&
-      !saving;
-
-    return (
-      <form onSubmit={this.onSubmit} className="ref-rate-limit-editor">
-        <p>
-          Rate limits allow you to control how much data is stored for this organization.
-          When a rate is exceeded the system will begin discarding data until the next
-          interval.
-        </p>
-
-        <h5>Account Limit</h5>
-
-        {!maxRate ? (
-          <AccountLimit
-            value={currentAccountLimit}
-            onChange={this.onAccountLimitChange}
-          />
-        ) : (
-          <p>
-            Your account is limited to a maximum of {maxRate} events per {maxRateInterval}{' '}
-            seconds.
-          </p>
-        )}
-
-        <h5>Per-Project Limit</h5>
-
-        <RangeField
-          name="projectLimit"
-          value={savedProjectLimit || 100}
-          onChange={this.onProjectLimitChange}
-          step={5}
-          min={50}
-          max={100}
-          formatLabel={value => {
-            return value !== 100 ? `${value}%` : 'No Limit &mdash; 100%';
-          }}
-        />
-
-        <div className="help-block">
-          {t(
-            'The maximum percentage of your account limit an individual project can consume.'
-          )}
-        </div>
-
-        <div className="form-actions" style={{marginTop: 25}}>
-          <button type="submit" className="btn btn-primary" disabled={!canSave}>
-            {t('Apply Changes')}
-          </button>
-        </div>
-      </form>
-    );
-  },
-});
+import LazyLoad from '../../components/lazyLoad';
+import getSettingsComponent from '../../utils/getSettingsComponent';
 
 const OrganizationRateLimits = React.createClass({
   mixins: [OrganizationState],
@@ -193,17 +10,18 @@ const OrganizationRateLimits = React.createClass({
   render() {
     if (!this.context.organization) return null;
 
-    let org = this.context.organization;
-
     return (
-      <div className="box">
-        <div className="box-header">
-          <h3>{t('Rate Limits')}</h3>
-        </div>
-        <div className="box-content with-padding">
-          <RateLimitEditor organization={org} />
-        </div>
-      </div>
+      <LazyLoad
+        component={() =>
+          getSettingsComponent(
+            () =>
+              import(/*webpackChunkName: "rateLimitView"*/ '../settings/organization/rateLimit/rateLimitView'),
+            () => import(/*webpackChunkName: "rateLimitView.old"*/ './rateLimitView.old'),
+            this.props.routes
+          )}
+        {...this.props}
+        organization={this.context.organization}
+      />
     );
   },
 });
diff --git a/src/sentry/static/sentry/app/views/organizationRateLimits/rateLimitView.old.jsx b/src/sentry/static/sentry/app/views/organizationRateLimits/rateLimitView.old.jsx
new file mode 100644
index 0000000000..af544f97b3
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationRateLimits/rateLimitView.old.jsx
@@ -0,0 +1,196 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import ApiMixin from '../../mixins/apiMixin';
+import IndicatorStore from '../../stores/indicatorStore';
+import {RangeField} from '../../components/forms';
+import {t} from '../../locale';
+
+const AccountLimit = React.createClass({
+  propTypes: {
+    value: PropTypes.number,
+    onChange: PropTypes.func.isRequired,
+  },
+
+  getRateLimitValues() {
+    let steps = [];
+    let i = 0;
+    while (i <= 1000000) {
+      steps.push(i);
+      if (i < 10000) {
+        i += 1000;
+      } else if (i < 100000) {
+        i += 10000;
+      } else {
+        i += 100000;
+      }
+    }
+    return steps;
+  },
+
+  render() {
+    return (
+      <RangeField
+        name="accountLimit"
+        min={0}
+        max={1000000}
+        value={this.props.value}
+        allowedValues={this.getRateLimitValues()}
+        help="The maximum number of events to accept across this entire organization."
+        placeholder="e.g. 500"
+        onChange={this.props.onChange}
+        inputClassName="col-md-3"
+        formatLabel={value => {
+          return !value ? 'No Limit' : `${value.toLocaleString()} per hour`;
+        }}
+      />
+    );
+  },
+});
+
+const RateLimitView = React.createClass({
+  propTypes: {
+    organization: PropTypes.object.isRequired,
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    let projectLimit = this.props.organization.quota.projectLimit;
+    let accountLimit = this.props.organization.quota.accountLimit;
+
+    return {
+      activeNav: 'rate-limits',
+      currentProjectLimit: projectLimit,
+      savedProjectLimit: projectLimit,
+      currentAccountLimit: accountLimit,
+      savedAccountLimit: accountLimit,
+      saving: false,
+    };
+  },
+
+  onProjectLimitChange(value) {
+    this.setState({
+      currentProjectLimit: value,
+    });
+  },
+
+  onAccountLimitChange(value) {
+    this.setState({
+      currentAccountLimit: value,
+    });
+  },
+
+  onSubmit(e) {
+    e.preventDefault();
+
+    let loadingIndicator = IndicatorStore.add(t('Saving..'));
+
+    this.setState(
+      {
+        saving: true,
+        error: false,
+      },
+      () => {
+        this.api.request(`/organizations/${this.props.organization.slug}/`, {
+          method: 'PUT',
+          data: {
+            projectRateLimit: this.state.currentProjectLimit,
+            accountRateLimit: this.state.currentAccountLimit,
+          },
+          success: data => {
+            // TODO(dcramer): propagate this change correctly (how??)
+            IndicatorStore.remove(loadingIndicator);
+            this.props.organization.quota = data.quota;
+            this.setState({
+              saving: false,
+              savedProjectLimit: data.quota.projectLimit,
+              savedAccountLimit: data.quota.accountLimit,
+            });
+          },
+          error: () => {
+            this.setState({saving: false});
+            IndicatorStore.remove(loadingIndicator);
+            IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
+              duration: 3000,
+            });
+          },
+        });
+      }
+    );
+  },
+
+  render() {
+    let {
+      currentProjectLimit,
+      savedProjectLimit,
+      currentAccountLimit,
+      savedAccountLimit,
+      saving,
+    } = this.state;
+    let {maxRate, maxRateInterval} = this.props.organization.quota;
+    let canSave =
+      (savedProjectLimit !== currentProjectLimit ||
+        savedAccountLimit !== currentAccountLimit) &&
+      !saving;
+
+    return (
+      <div className="box">
+        <div className="box-header">
+          <h3>{t('Rate Limits')}</h3>
+        </div>
+        <div className="box-content with-padding">
+          <form onSubmit={this.onSubmit} className="ref-rate-limit-editor">
+            <p>
+              Rate limits allow you to control how much data is stored for this
+              organization. When a rate is exceeded the system will begin discarding data
+              until the next interval.
+            </p>
+
+            <h5>Account Limit</h5>
+
+            {!maxRate ? (
+              <AccountLimit
+                value={currentAccountLimit}
+                onChange={this.onAccountLimitChange}
+              />
+            ) : (
+              <p>
+                Your account is limited to a maximum of {maxRate} events per{' '}
+                {maxRateInterval} seconds.
+              </p>
+            )}
+
+            <h5>Per-Project Limit</h5>
+
+            <RangeField
+              name="projectLimit"
+              value={savedProjectLimit || 100}
+              onChange={this.onProjectLimitChange}
+              step={5}
+              min={50}
+              max={100}
+              formatLabel={value => {
+                return value !== 100 ? `${value}%` : 'No Limit &mdash; 100%';
+              }}
+            />
+
+            <div className="help-block">
+              {t(
+                'The maximum percentage of your account limit an individual project can consume.'
+              )}
+            </div>
+
+            <div className="form-actions" style={{marginTop: 25}}>
+              <button type="submit" className="btn btn-primary" disabled={!canSave}>
+                {t('Apply Changes')}
+              </button>
+            </div>
+          </form>
+        </div>
+      </div>
+    );
+  },
+});
+
+export default RateLimitView;
diff --git a/src/sentry/static/sentry/app/views/organizationRepositories.jsx b/src/sentry/static/sentry/app/views/organizationRepositories.jsx
deleted file mode 100644
index deafc976bd..0000000000
--- a/src/sentry/static/sentry/app/views/organizationRepositories.jsx
+++ /dev/null
@@ -1,413 +0,0 @@
-import Modal from 'react-bootstrap/lib/Modal';
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import {FormState} from '../components/forms';
-import {sortArray, parseRepo} from '../utils';
-import {t, tct} from '../locale';
-import Button from '../components/buttons/button';
-import Confirm from '../components/confirm';
-import DropdownLink from '../components/dropdownLink';
-import IndicatorStore from '../stores/indicatorStore';
-import MenuItem from '../components/menuItem';
-import OrganizationSettingsView from './organizationSettingsView';
-import PluginComponentBase from '../components/bases/pluginComponentBase';
-
-const UNKNOWN_ERROR = {
-  error_type: 'unknown',
-};
-
-class AddRepositoryLink extends PluginComponentBase {
-  static propTypes = {
-    provider: PropTypes.object.isRequired,
-  };
-
-  constructor(props, context) {
-    super(props, context);
-
-    Object.assign(this.state, {
-      ...this.getDefaultState(),
-      fieldList: null,
-      loading: true,
-      state: FormState.LOADING,
-    });
-
-    ['onOpen', 'onCancel', 'formSubmit', 'changeField'].forEach(method => {
-      this[method] = this[method].bind(this);
-    });
-  }
-
-  getDefaultState() {
-    return {
-      isModalOpen: false,
-      error: {},
-      formData: {},
-    };
-  }
-
-  onOpen() {
-    this.setState({isModalOpen: true});
-  }
-
-  onCancel() {
-    this.setState(this.getDefaultState());
-  }
-
-  formSubmit(ev) {
-    // since this doesn't use the Form component, wrap onSubmit
-    // in a function that calls preventDefault
-    ev.preventDefault();
-    this.onSubmit();
-  }
-
-  onSubmit() {
-    // TODO(dcramer): set form saving state
-    let formData = {
-      ...this.state.formData,
-      provider: this.props.provider.id,
-    };
-    if (formData.name) {
-      formData.name = parseRepo(formData.name);
-    }
-
-    this.setState(
-      {
-        state: FormState.SAVING,
-      },
-      () => {
-        this.api.request(`/organizations/${this.props.orgId}/repos/`, {
-          data: formData,
-          method: 'POST',
-          success: this.onSaveSuccess.bind(this, data => {
-            this.setState({isModalOpen: false, formData: {}, error: {}});
-            this.props.onSuccess(data);
-          }),
-          error: this.onSaveError.bind(this, error => {
-            this.setState({
-              error: error.responseJSON || UNKNOWN_ERROR || UNKNOWN_ERROR,
-              state: FormState.error,
-            });
-          }),
-          complete: this.onSaveComplete,
-        });
-      }
-    );
-  }
-
-  changeField(name, value) {
-    this.setState(state => ({
-      formData: {
-        ...state.formData,
-        [name]: value,
-      },
-    }));
-  }
-
-  renderForm() {
-    let errors = this.state.error.errors || {};
-    let provider = this.props.provider;
-    return (
-      <form onSubmit={this.formSubmit}>
-        {errors.__all__ && (
-          <div className="alert alert-error alert-block" key="_errors">
-            <p>{errors.__all__}</p>
-          </div>
-        )}
-        {provider.config.map(field => {
-          return (
-            <div key={field.name}>
-              {this.renderField({
-                config: field,
-                formData: this.state.formData,
-                formErrors: errors,
-                onChange: this.changeField.bind(this, field.name),
-              })}
-            </div>
-          );
-        })}
-      </form>
-    );
-  }
-
-  renderBody() {
-    let error = this.state.error;
-    if (error.error_type === 'auth') {
-      let authUrl = error.auth_url;
-      if (authUrl.indexOf('?') === -1) {
-        authUrl += '?next=' + encodeURIComponent(document.location.pathname);
-      } else {
-        authUrl += '&next=' + encodeURIComponent(document.location.pathname);
-      }
-      return (
-        <div>
-          <div className="alert alert-warning m-b-1">
-            {'You need to associate an identity with ' +
-              this.props.provider.name +
-              ' before you can create issues with this service.'}
-          </div>
-          <a className="btn btn-primary" href={authUrl}>
-            Associate Identity
-          </a>
-        </div>
-      );
-    } else if (error.error_type && error.error_type !== 'validation') {
-      return (
-        <div className="alert alert-error alert-block">
-          <p>
-            {error.message
-              ? error.message
-              : tct(
-                  'An unknown error occurred. Need help with this? [link:Contact support]',
-                  {
-                    link: <a href="https://sentry.io/support/" />,
-                  }
-                )}
-          </p>
-        </div>
-      );
-    }
-    return this.renderForm();
-  }
-
-  renderModal() {
-    let {error, state} = this.state;
-    return (
-      <Modal show={this.state.isModalOpen} animation={false}>
-        <div className="modal-header">
-          <h4>{t('Add Repository')}</h4>
-        </div>
-        <div className="modal-body">{this.renderBody()}</div>
-        {!error || error.error_type !== 'unknown' || error.message ? (
-          <div className="modal-footer">
-            <button
-              type="button"
-              className="btn btn-default"
-              onClick={this.onCancel}
-              disabled={state === FormState.SAVING}
-            >
-              {t('Cancel')}
-            </button>
-            <button
-              type="button"
-              className="btn btn-primary"
-              onClick={this.onSubmit}
-              disabled={state === FormState.SAVING}
-            >
-              {t('Save Changes')}
-            </button>
-          </div>
-        ) : null}
-      </Modal>
-    );
-  }
-
-  render() {
-    let provider = this.props.provider;
-    return (
-      <a onClick={this.onOpen}>
-        {provider.name}
-        {this.renderModal()}
-      </a>
-    );
-  }
-}
-
-class OrganizationRepositories extends OrganizationSettingsView {
-  getEndpoints() {
-    let {orgId} = this.props.params;
-    return [
-      ['itemList', `/organizations/${orgId}/repos/`, {query: {status: ''}}],
-      ['repoConfig', `/organizations/${orgId}/config/repos/`],
-    ];
-  }
-
-  deleteRepo = repo => {
-    let indicator = IndicatorStore.add(t('Saving changes..'));
-    this.api.request(`/organizations/${this.props.params.orgId}/repos/${repo.id}/`, {
-      method: 'DELETE',
-      success: data => {
-        let itemList = this.state.itemList;
-        itemList.forEach(item => {
-          if (item.id === data.id) {
-            item.status = data.status;
-          }
-        });
-        this.setState({
-          itemList,
-        });
-      },
-      error: () => {
-        IndicatorStore.add(t('An error occurred.'), 'error', {
-          duration: 3000,
-        });
-      },
-      complete: () => {
-        IndicatorStore.remove(indicator);
-      },
-    });
-  };
-
-  cancelDelete = repo => {
-    let indicator = IndicatorStore.add(t('Saving changes..'));
-    this.api.request(`/organizations/${this.props.params.orgId}/repos/${repo.id}/`, {
-      method: 'PUT',
-      data: {status: 'visible'},
-      success: data => {
-        let itemList = this.state.itemList;
-        itemList.forEach(item => {
-          if (item.id === data.id) {
-            item.status = data.status;
-          }
-        });
-        this.setState({
-          itemList,
-        });
-      },
-      error: () => {
-        IndicatorStore.add(t('An error occurred.'), 'error', {
-          duration: 3000,
-        });
-      },
-      complete: () => {
-        IndicatorStore.remove(indicator);
-      },
-    });
-  };
-
-  onAddRepo = repo => {
-    let itemList = this.state.itemList;
-    itemList.push(repo);
-    this.setState({
-      itemList: sortArray(itemList, item => item.name),
-    });
-  };
-
-  getStatusLabel(repo) {
-    switch (repo.status) {
-      case 'pending_deletion':
-        return 'Deletion Queued';
-      case 'deletion_in_progress':
-        return 'Deletion in Progress';
-      case 'hidden':
-        return 'Disabled';
-      default:
-        return null;
-    }
-  }
-
-  getTitle() {
-    return 'Repositories';
-  }
-
-  renderBody() {
-    let orgId = this.props.params.orgId;
-    let itemList = this.state.itemList;
-    let hasItemList = itemList && itemList.length > 0;
-
-    return (
-      <div>
-        <div className="pull-right">
-          <DropdownLink
-            anchorRight
-            className="btn btn-primary btn-sm"
-            title={t('Add Repository')}
-          >
-            {this.state.repoConfig.providers.map(provider => {
-              return (
-                <MenuItem noAnchor={true} key={provider.id}>
-                  <AddRepositoryLink
-                    provider={provider}
-                    orgId={orgId}
-                    onSuccess={this.onAddRepo}
-                  />
-                </MenuItem>
-              );
-            })}
-          </DropdownLink>
-        </div>
-        <h3 className="m-b-2">{t('Repositories')}</h3>
-        {hasItemList && (
-          <div className="m-b-2">
-            <p>
-              {t(
-                'Connecting a repository allows Sentry to capture commit data via webhooks. ' +
-                  'This enables features like suggested assignees and resolving issues via commit message. ' +
-                  "Once you've connected a repository, you can associate commits with releases via the API."
-              )}
-              &nbsp;
-              {tct('See our [link:documentation] for more details.', {
-                link: <a href="https://docs.sentry.io/learn/releases/" />,
-              })}
-            </p>
-          </div>
-        )}
-        {hasItemList ? (
-          <div className="panel panel-default">
-            <table className="table">
-              <tbody>
-                {itemList.map(repo => {
-                  let repoIsVisible = repo.status === 'visible';
-                  return (
-                    <tr key={repo.id}>
-                      <td>
-                        <strong>{repo.name}</strong>
-                        {!repoIsVisible && <small> — {this.getStatusLabel(repo)}</small>}
-                        {repo.status === 'pending_deletion' && (
-                          <small>
-                            {' '}
-                            (
-                            <a onClick={() => this.cancelDelete(repo)}>{t('Cancel')}</a>
-                            )
-                          </small>
-                        )}
-                        <br />
-                        <small>{repo.provider.name}</small>
-                        {repo.url && (
-                          <small>
-                            {' '}
-                            — <a href={repo.url}>{repo.url}</a>
-                          </small>
-                        )}
-                      </td>
-                      <td style={{width: 60}}>
-                        <Confirm
-                          disabled={!repoIsVisible}
-                          onConfirm={() => this.deleteRepo(repo)}
-                          message={t('Are you sure you want to remove this repository?')}
-                        >
-                          <Button size="xsmall">
-                            <span className="icon icon-trash" />
-                          </Button>
-                        </Confirm>
-                      </td>
-                    </tr>
-                  );
-                })}
-              </tbody>
-            </table>
-          </div>
-        ) : (
-          <div className="well blankslate align-center p-x-2 p-y-1">
-            <div className="icon icon-lg icon-git-commit" />
-            <h3>{t('Sentry is better with commit data')}</h3>
-            <p>
-              {t(
-                'Adding one or more repositories will enable enhanced releases and the ability to resolve Sentry Issues via git message.'
-              )}
-            </p>
-            <p className="m-b-1">
-              <a
-                className="btn btn-default"
-                href="https://docs.sentry.io/learn/releases/"
-              >
-                Learn more
-              </a>
-            </p>
-          </div>
-        )}
-      </div>
-    );
-  }
-}
-
-export default OrganizationRepositories;
diff --git a/src/sentry/static/sentry/app/views/organizationRepositories.old.jsx b/src/sentry/static/sentry/app/views/organizationRepositories.old.jsx
new file mode 100644
index 0000000000..192ef6356a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationRepositories.old.jsx
@@ -0,0 +1,153 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t, tct} from '../locale';
+import Button from '../components/buttons/button';
+import Confirm from '../components/confirm';
+import DropdownLink from '../components/dropdownLink';
+import MenuItem from '../components/menuItem';
+import AddRepositoryLink from './settings/organization/repositories/addRepositoryLink';
+
+class OrganizationRepositories extends React.Component {
+  static propTypes = {
+    itemList: PropTypes.array,
+    repoConfig: PropTypes.object,
+    onAddRepo: PropTypes.func,
+    onCancelDelete: PropTypes.func,
+    onDeleteRepo: PropTypes.func,
+  };
+
+  getStatusLabel(repo) {
+    switch (repo.status) {
+      case 'pending_deletion':
+        return 'Deletion Queued';
+      case 'deletion_in_progress':
+        return 'Deletion in Progress';
+      case 'hidden':
+        return 'Disabled';
+      default:
+        return null;
+    }
+  }
+
+  render() {
+    let {
+      params,
+      itemList,
+      repoConfig,
+      onAddRepo,
+      onCancelDelete,
+      onDeleteRepo,
+    } = this.props;
+    let {orgId} = params;
+    let hasItemList = itemList && itemList.length > 0;
+
+    return (
+      <div>
+        <div className="pull-right">
+          <DropdownLink
+            anchorRight
+            className="btn btn-primary btn-sm"
+            title={t('Add Repository')}
+          >
+            {repoConfig &&
+              repoConfig.providers &&
+              repoConfig.providers.map(provider => {
+                return (
+                  <MenuItem noAnchor={true} key={provider.id}>
+                    <AddRepositoryLink
+                      provider={provider}
+                      orgId={orgId}
+                      onSuccess={onAddRepo}
+                    />
+                  </MenuItem>
+                );
+              })}
+          </DropdownLink>
+        </div>
+        <h3 className="m-b-2">{t('Repositories')}</h3>
+        {hasItemList && (
+          <div className="m-b-2">
+            <p>
+              {t(
+                'Connecting a repository allows Sentry to capture commit data via webhooks. ' +
+                  'This enables features like suggested assignees and resolving issues via commit message. ' +
+                  "Once you've connected a repository, you can associate commits with releases via the API."
+              )}
+              &nbsp;
+              {tct('See our [link:documentation] for more details.', {
+                link: <a href="https://docs.sentry.io/learn/releases/" />,
+              })}
+            </p>
+          </div>
+        )}
+        {hasItemList ? (
+          <div className="panel panel-default">
+            <table className="table">
+              <tbody>
+                {itemList.map(repo => {
+                  let repoIsVisible = repo.status === 'visible';
+                  return (
+                    <tr key={repo.id}>
+                      <td>
+                        <strong>{repo.name}</strong>
+                        {!repoIsVisible && <small> — {this.getStatusLabel(repo)}</small>}
+                        {repo.status === 'pending_deletion' && (
+                          <small>
+                            {' '}
+                            (
+                            <a onClick={() => onCancelDelete(repo)}>{t('Cancel')}</a>
+                            )
+                          </small>
+                        )}
+                        <br />
+                        <small>{repo.provider.name}</small>
+                        {repo.url && (
+                          <small>
+                            {' '}
+                            — <a href={repo.url}>{repo.url}</a>
+                          </small>
+                        )}
+                      </td>
+                      <td style={{width: 60}}>
+                        <Confirm
+                          disabled={!repoIsVisible}
+                          onConfirm={() => onDeleteRepo(repo)}
+                          message={t('Are you sure you want to remove this repository?')}
+                        >
+                          <Button size="xsmall">
+                            <span className="icon icon-trash" />
+                          </Button>
+                        </Confirm>
+                      </td>
+                    </tr>
+                  );
+                })}
+              </tbody>
+            </table>
+          </div>
+        ) : (
+          <div className="well blankslate align-center p-x-2 p-y-1">
+            <div className="icon icon-lg icon-git-commit" />
+            <h3>{t('Sentry is better with commit data')}</h3>
+            <p>
+              {t(
+                'Adding one or more repositories will enable enhanced releases and the ability to resolve Sentry Issues via git message.'
+              )}
+            </p>
+            <p className="m-b-1">
+              <a
+                className="btn btn-default"
+                href="https://docs.sentry.io/learn/releases/"
+              >
+                Learn more
+              </a>
+            </p>
+          </div>
+        )}
+      </div>
+    );
+  }
+}
+
+export default OrganizationRepositories;
diff --git a/src/sentry/static/sentry/app/views/organizationRepositoriesView.jsx b/src/sentry/static/sentry/app/views/organizationRepositoriesView.jsx
new file mode 100644
index 0000000000..cde023a6c7
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationRepositoriesView.jsx
@@ -0,0 +1,105 @@
+import React from 'react';
+
+import {sortArray} from '../utils';
+import {t} from '../locale';
+import IndicatorStore from '../stores/indicatorStore';
+import OrganizationSettingsView from './organizationSettingsView';
+import LazyLoad from '../components/lazyLoad';
+import getSettingsComponent from '../utils/getSettingsComponent';
+
+class OrganizationRepositoriesView extends OrganizationSettingsView {
+  getEndpoints() {
+    let {orgId} = this.props.params;
+    return [
+      ['itemList', `/organizations/${orgId}/repos/`, {query: {status: ''}}],
+      ['repoConfig', `/organizations/${orgId}/config/repos/`],
+    ];
+  }
+
+  deleteRepo = repo => {
+    let indicator = IndicatorStore.add(t('Saving changes..'));
+    this.api.request(`/organizations/${this.props.params.orgId}/repos/${repo.id}/`, {
+      method: 'DELETE',
+      success: data => {
+        let itemList = this.state.itemList;
+        itemList.forEach(item => {
+          if (item.id === data.id) {
+            item.status = data.status;
+          }
+        });
+        this.setState({
+          itemList,
+        });
+      },
+      error: () => {
+        IndicatorStore.add(t('An error occurred.'), 'error', {
+          duration: 3000,
+        });
+      },
+      complete: () => {
+        IndicatorStore.remove(indicator);
+      },
+    });
+  };
+
+  cancelDelete = repo => {
+    let indicator = IndicatorStore.add(t('Saving changes..'));
+    this.api.request(`/organizations/${this.props.params.orgId}/repos/${repo.id}/`, {
+      method: 'PUT',
+      data: {status: 'visible'},
+      success: data => {
+        let itemList = this.state.itemList;
+        itemList.forEach(item => {
+          if (item.id === data.id) {
+            item.status = data.status;
+          }
+        });
+        this.setState({
+          itemList,
+        });
+      },
+      error: () => {
+        IndicatorStore.add(t('An error occurred.'), 'error', {
+          duration: 3000,
+        });
+      },
+      complete: () => {
+        IndicatorStore.remove(indicator);
+      },
+    });
+  };
+
+  onAddRepo = repo => {
+    let itemList = this.state.itemList;
+    itemList.push(repo);
+    this.setState({
+      itemList: sortArray(itemList, item => item.name),
+    });
+  };
+
+  getTitle() {
+    return 'Repositories';
+  }
+
+  renderBody() {
+    return (
+      <LazyLoad
+        component={() =>
+          getSettingsComponent(
+            () =>
+              import(/*webpackChunkName: "organizationRepositories"*/ './settings/organization/repositories/organizationRepositories'),
+            () =>
+              import(/*webpackChunkName: "organizationRepositories.old"*/ './organizationRepositories.old'),
+            this.props.routes
+          )}
+        {...this.props}
+        {...this.state}
+        onAddRepo={this.onAddRepo}
+        onCancelDelete={this.cancelDelete}
+        onDeleteRepo={this.deleteRepo}
+      />
+    );
+  }
+}
+
+export default OrganizationRepositoriesView;
diff --git a/src/sentry/static/sentry/app/views/organizationSettings.jsx b/src/sentry/static/sentry/app/views/organizationSettings.jsx
deleted file mode 100644
index 792b83215f..0000000000
--- a/src/sentry/static/sentry/app/views/organizationSettings.jsx
+++ /dev/null
@@ -1,409 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import ApiMixin from '../mixins/apiMixin';
-import {
-  BooleanField,
-  FormState,
-  Select2Field,
-  TextField,
-  TextareaField,
-} from '../components/forms';
-import IndicatorStore from '../stores/indicatorStore';
-import LoadingIndicator from '../components/loadingIndicator';
-import OrganizationStore from '../stores/organizationStore';
-import {t} from '../locale';
-import {extractMultilineFields} from '../utils';
-
-const OrganizationSettingsForm = React.createClass({
-  propTypes: {
-    orgId: PropTypes.string.isRequired,
-    access: PropTypes.object.isRequired,
-    initialData: PropTypes.object.isRequired,
-    onSave: PropTypes.func.isRequired,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      formData: this.buildFormData(this.props.initialData),
-      errors: {},
-      hasChanges: false,
-    };
-  },
-
-  buildFormData(data) {
-    let result = {
-      name: data.name,
-      slug: data.slug,
-      openMembership: data.openMembership,
-      allowSharedIssues: data.allowSharedIssues,
-      isEarlyAdopter: data.isEarlyAdopter,
-      enhancedPrivacy: data.enhancedPrivacy,
-      dataScrubber: data.dataScrubber,
-      dataScrubberDefaults: data.dataScrubberDefaults,
-      scrubIPAddresses: data.scrubIPAddresses,
-      safeFields: data.safeFields.join('\n'),
-      sensitiveFields: data.sensitiveFields.join('\n'),
-    };
-    if (this.props.access.has('org:admin')) {
-      result.defaultRole = data.defaultRole;
-    }
-    return result;
-  },
-
-  onFieldChange(name, value) {
-    let formData = {
-      ...this.state.formData,
-      [name]: value,
-    };
-    this.setState({
-      hasChanges: true,
-      formData,
-    });
-  },
-
-  onSubmit(e) {
-    e.preventDefault();
-
-    if (this.state.state == FormState.SAVING) {
-      return;
-    }
-
-    this.setState(
-      {
-        state: FormState.SAVING,
-        hasChanges: false,
-      },
-      () => {
-        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-        let {orgId} = this.props;
-        let formData = this.state.formData;
-        this.api.request(`/organizations/${orgId}/`, {
-          method: 'PUT',
-          data: {
-            ...formData,
-            safeFields: extractMultilineFields(formData.safeFields),
-            sensitiveFields: extractMultilineFields(formData.sensitiveFields),
-          },
-          success: data => {
-            this.props.onSave(data);
-            this.setState({
-              state: FormState.READY,
-              errors: {},
-            });
-            IndicatorStore.remove(loadingIndicator);
-            IndicatorStore.add(t('Changes saved.'), 'success', {
-              duration: 1500,
-            });
-          },
-          error: error => {
-            this.setState({
-              state: FormState.ERROR,
-              errors: error.responseJSON,
-            });
-            IndicatorStore.remove(loadingIndicator);
-            IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
-              duration: 3000,
-            });
-          },
-        });
-      }
-    );
-  },
-
-  render() {
-    let isSaving = this.state.state === FormState.SAVING;
-    let {errors, formData} = this.state;
-    let {access, initialData} = this.props;
-
-    let sensitiveFieldsHelp = (
-      <span>
-        {t(
-          'Additional field names to match against when scrubbing data for all projects. Separate multiple entries with a newline.'
-        )}
-        <br />
-        <strong>
-          {t('Note: These fields will be used in addition to project specific fields.')}
-        </strong>
-      </span>
-    );
-
-    let safeFieldsHelp = (
-      <span>
-        {t(
-          'Field names which data scrubbers should ignore. Separate multiple entries with a newline.'
-        )}
-        <br />
-        <strong>
-          {t('Note: These fields will be used in addition to project specific fields.')}
-        </strong>
-      </span>
-    );
-
-    return (
-      <form onSubmit={this.onSubmit} className="form-stacked ref-organization-settings">
-        {this.state.state === FormState.ERROR && (
-          <div className="alert alert-error alert-block">
-            {t(
-              'Unable to save your changes. Please ensure all fields are valid and try again.'
-            )}
-          </div>
-        )}
-        <fieldset>
-          <legend style={{marginTop: 0}}>{t('General')}</legend>
-
-          <TextField
-            key="name"
-            name="name"
-            label={t('Name')}
-            help={t('The name of your organization. i.e. My Company')}
-            value={formData.name}
-            required={true}
-            error={errors.name}
-            onChange={this.onFieldChange.bind(this, 'name')}
-          />
-          <TextField
-            key="slug"
-            name="slug"
-            label={t('Short name')}
-            value={formData.slug}
-            help={t('A unique ID used to identify this organization.')}
-            required={true}
-            error={errors.slug}
-            onChange={this.onFieldChange.bind(this, 'slug')}
-          />
-          <BooleanField
-            key="isEarlyAdopter"
-            name="isEarlyAdopter"
-            label={t('Early Adopter')}
-            value={formData.isEarlyAdopter}
-            help={t("Opt-in to new features before they're released to the public.")}
-            required={false}
-            error={errors.isEarlyAdopter}
-            onChange={this.onFieldChange.bind(this, 'isEarlyAdopter')}
-          />
-
-          <legend>{t('Membership')}</legend>
-
-          {access.has('org:admin') && (
-            <Select2Field
-              key="defaultRole"
-              name="defaultRole"
-              label={t('Default Role')}
-              choices={initialData.availableRoles.map(r => [r.id, r.name])}
-              value={formData.defaultRole}
-              help={t('The default role new members will receive.')}
-              required={true}
-              error={errors.defaultRole}
-              onChange={this.onFieldChange.bind(this, 'defaultRole')}
-            />
-          )}
-
-          <BooleanField
-            key="openMembership"
-            name="openMembership"
-            label={t('Open Membership')}
-            value={formData.openMembership}
-            help={t('Allow organization members to freely join or leave any team.')}
-            required={true}
-            error={errors.openMembership}
-            onChange={this.onFieldChange.bind(this, 'openMembership')}
-          />
-
-          <legend>{t('Security & Privacy')}</legend>
-
-          <BooleanField
-            key="allowSharedIssues"
-            name="allowSharedIssues"
-            label={t('Allow Shared Issues')}
-            value={formData.allowSharedIssues}
-            help={t('Enable sharing of limited details on issues to anonymous users.')}
-            required={false}
-            error={errors.allowSharedIssues}
-            onChange={this.onFieldChange.bind(this, 'allowSharedIssues')}
-          />
-
-          <BooleanField
-            key="enhancedPrivacy"
-            name="enhancedPrivacy"
-            label={t('Enhanced Privacy')}
-            value={formData.enhancedPrivacy}
-            help={t(
-              'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.'
-            )}
-            required={false}
-            error={errors.enhancedPrivacy}
-            onChange={this.onFieldChange.bind(this, 'enhancedPrivacy')}
-          />
-
-          <BooleanField
-            key="dataScrubber"
-            name="dataScrubber"
-            label={t('Require Data Scrubber')}
-            value={formData.dataScrubber}
-            help={t('Require server-side data scrubbing be enabled for all projects.')}
-            required={false}
-            error={errors.dataScrubber}
-            onChange={this.onFieldChange.bind(this, 'dataScrubber')}
-          />
-
-          <BooleanField
-            key="dataScrubberDefaults"
-            name="dataScrubberDefaults"
-            label={t('Require Using Default Scrubbers')}
-            value={formData.dataScrubberDefaults}
-            help={t(
-              'Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects.'
-            )}
-            required={true}
-            error={errors.dataScrubberDefaults}
-            onChange={this.onFieldChange.bind(this, 'dataScrubberDefaults')}
-          />
-
-          <TextareaField
-            key="sensitiveFields"
-            name="sensitiveFields"
-            label={t('Global sensitive fields')}
-            value={formData.sensitiveFields}
-            help={sensitiveFieldsHelp}
-            placeholder={t('e.g. email')}
-            required={false}
-            error={errors.sensitiveFields}
-            onChange={this.onFieldChange.bind(this, 'sensitiveFields')}
-          />
-
-          <TextareaField
-            key="safeFields"
-            name="safeFields"
-            label={t('Global safe fields')}
-            value={formData.safeFields}
-            help={safeFieldsHelp}
-            placeholder={t('e.g. email')}
-            required={false}
-            error={errors.safeFields}
-            onChange={this.onFieldChange.bind(this, 'safeFields')}
-          />
-
-          <BooleanField
-            key="scrubIPAddresses"
-            name="scrubIPAddresses"
-            label={t('Prevent Storing of IP Addresses')}
-            value={formData.scrubIPAddresses}
-            help={t(
-              'Preventing IP addresses from being stored for new events on all projects.'
-            )}
-            required={false}
-            error={errors.scrubIPAddresses}
-            onChange={this.onFieldChange.bind(this, 'scrubIPAddresses')}
-          />
-        </fieldset>
-        <fieldset className="form-actions">
-          <button
-            type="submit"
-            className="btn btn-primary"
-            disabled={isSaving || !this.state.hasChanges}
-          >
-            {t('Save Changes')}
-          </button>
-        </fieldset>
-      </form>
-    );
-  },
-});
-
-const OrganizationSettings = React.createClass({
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      data: null,
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  fetchData() {
-    this.api.request(`/organizations/${this.props.params.orgId}/`, {
-      method: 'GET',
-      success: data => {
-        this.setState({
-          data,
-          loading: false,
-        });
-      },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true,
-        });
-      },
-    });
-  },
-
-  onSave(data) {
-    // TODO(dcramer): this should propagate
-    this.setState({data});
-    OrganizationStore.add(data);
-  },
-
-  render() {
-    let data = this.state.data;
-    let orgId = this.props.params.orgId;
-    let access = new Set((data && data.access) || []);
-
-    return (
-      <div>
-        {this.state.loading && <LoadingIndicator />}
-
-        {!this.state.loading && (
-          <div>
-            <h3>{t('Organization Settings')}</h3>
-            <div className="box">
-              <div className="box-content with-padding">
-                <OrganizationSettingsForm
-                  initialData={data}
-                  orgId={orgId}
-                  access={access}
-                  onSave={this.onSave}
-                />
-              </div>
-            </div>
-
-            {access.has('org:admin') &&
-              !data.isDefault && (
-                <div className="box">
-                  <div className="box-header">
-                    <h3>{t('Remove Organization')}</h3>
-                  </div>
-                  <div className="box-content with-padding">
-                    <p>
-                      {t(
-                        'Removing this organization will delete all data including projects and their associated events.'
-                      )}
-                    </p>
-
-                    <fieldset className="form-actions">
-                      <a
-                        href={`/organizations/${orgId}/remove/`}
-                        className="btn btn-danger"
-                      >
-                        {t('Remove Organization')}
-                      </a>
-                    </fieldset>
-                  </div>
-                </div>
-              )}
-          </div>
-        )}
-      </div>
-    );
-  },
-});
-
-export default OrganizationSettings;
diff --git a/src/sentry/static/sentry/app/views/organizationStats/index.jsx b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
index 2c3d02f44d..ef33313ac7 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
@@ -1,16 +1,10 @@
 import $ from 'jquery';
 import React from 'react';
 import ApiMixin from '../../mixins/apiMixin';
-import LoadingError from '../../components/loadingError';
-import LoadingIndicator from '../../components/loadingIndicator';
-import OrganizationHomeContainer from '../../components/organizations/homeContainer';
-import StackedBarChart from '../../components/stackedBarChart';
 import OrganizationState from '../../mixins/organizationState';
-import Pagination from '../../components/pagination';
 
-import ProjectTable from './projectTable';
-import {t} from '../../locale';
-import {intcomma} from '../../utils';
+import LazyLoad from '../../components/lazyLoad';
+import getSettingsComponent from '../../utils/getSettingsComponent';
 
 const OrganizationStats = React.createClass({
   mixins: [ApiMixin, OrganizationState],
@@ -241,92 +235,22 @@ const OrganizationStats = React.createClass({
     });
   },
 
-  renderTooltip(point, pointIdx, chart) {
-    let timeLabel = chart.getTimeLabel(point);
-    let [accepted, rejected, blacklisted] = point.y;
-
-    let value = `${intcomma(accepted)} accepted`;
-    if (rejected) {
-      value += `<br>${intcomma(rejected)} rate limited`;
-    }
-    if (blacklisted) {
-      value += `<br>${intcomma(blacklisted)} filtered`;
-    }
-
-    return (
-      '<div style="width:150px">' +
-      `<div class="time-label">${timeLabel}</div>` +
-      `<div class="value-label">${value}</div>` +
-      '</div>'
-    );
-  },
-
   render() {
+    let organization = this.getOrganization();
+
     return (
-      <OrganizationHomeContainer>
-        <h3>{t('Stats')}</h3>
-        <div className="row">
-          <div className="col-md-9">
-            <p>
-              {t(
-                `The chart below reflects events the system has received
-            across your entire organization. Events are broken down into
-            three categories: Accepted, Rate Limited, and Filtered. Rate
-            Limited events are entries that the system threw away due to quotas
-            being hit, and Filtered events are events that were blocked
-            due to your inbound data filter rules.`
-              )}
-            </p>
-          </div>
-          {!this.state.statsLoading && (
-            <div className="col-md-3 stats-column">
-              <h6 className="nav-header">{t('Events per minute')}</h6>
-              <p className="count">{this.state.orgTotal.avgRate}</p>
-            </div>
+      <LazyLoad
+        component={() =>
+          getSettingsComponent(
+            () =>
+              import(/* webpackChunkName: "organizationStats" */ '../settings/organization/stats/organizationStats'),
+            () =>
+              import(/* webpackChunkName: "organizationStats.old" */ './organizationStats.old'),
+            this.props.routes
           )}
-        </div>
-        <div className="organization-stats">
-          {this.state.statsLoading ? (
-            <LoadingIndicator />
-          ) : this.state.statsError ? (
-            <LoadingError onRetry={this.fetchData} />
-          ) : (
-            <div className="bar-chart">
-              <StackedBarChart
-                points={this.state.orgStats}
-                height={150}
-                label="events"
-                className="standard-barchart"
-                barClasses={['accepted', 'rate-limited', 'black-listed']}
-                tooltip={this.renderTooltip}
-              />
-            </div>
-          )}
-        </div>
-
-        <div className="box">
-          <div className="box-header">
-            <h3>{t('Events by Project')}</h3>
-          </div>
-          <div className="box-content">
-            {this.state.statsLoading || this.state.projectsLoading ? (
-              <LoadingIndicator />
-            ) : this.state.projectsError ? (
-              <LoadingError onRetry={this.fetchData} />
-            ) : (
-              <ProjectTable
-                projectTotals={this.state.projectTotals}
-                orgTotal={this.state.orgTotal}
-                organization={this.getOrganization()}
-                projectMap={this.state.projectMap}
-              />
-            )}
-          </div>
-        </div>
-        {this.state.pageLinks && (
-          <Pagination pageLinks={this.state.pageLinks} {...this.props} />
-        )}
-      </OrganizationHomeContainer>
+        organization={organization}
+        {...this.state}
+      />
     );
   },
 });
diff --git a/src/sentry/static/sentry/app/views/organizationStats/organizationStats.old.jsx b/src/sentry/static/sentry/app/views/organizationStats/organizationStats.old.jsx
new file mode 100644
index 0000000000..d3515bc56f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationStats/organizationStats.old.jsx
@@ -0,0 +1,128 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import LoadingError from '../../components/loadingError';
+import LoadingIndicator from '../../components/loadingIndicator';
+import StackedBarChart from '../../components/stackedBarChart';
+import Pagination from '../../components/pagination';
+
+import ProjectTable from './projectTable';
+import {t} from '../../locale';
+import {intcomma} from '../../utils';
+
+class OrganizationStats extends React.Component {
+  static propTypes = {
+    statsLoading: PropTypes.bool,
+    projectsLoading: PropTypes.bool,
+    orgTotal: PropTypes.object,
+    statsError: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
+    orgStats: PropTypes.array,
+    projectTotals: PropTypes.array,
+    projectMap: PropTypes.object,
+    projectsError: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
+    pageLinks: PropTypes.string,
+    organization: PropTypes.object,
+  };
+
+  renderTooltip(point, pointIdx, chart) {
+    let timeLabel = chart.getTimeLabel(point);
+    let [accepted, rejected, blacklisted] = point.y;
+
+    let value = `${intcomma(accepted)} accepted`;
+    if (rejected) {
+      value += `<br>${intcomma(rejected)} rate limited`;
+    }
+    if (blacklisted) {
+      value += `<br>${intcomma(blacklisted)} filtered`;
+    }
+
+    return (
+      '<div style="width:150px">' +
+      `<div class="time-label">${timeLabel}</div>` +
+      `<div class="value-label">${value}</div>` +
+      '</div>'
+    );
+  }
+
+  render() {
+    let {
+      statsLoading,
+      orgTotal,
+      statsError,
+      orgStats,
+      projectsLoading,
+      projectTotals,
+      projectMap,
+      projectsError,
+      pageLinks,
+      organization,
+    } = this.props;
+
+    return (
+      <div>
+        <h3>{t('Stats')}</h3>
+        <div className="row">
+          <div className="col-md-9">
+            <p>
+              {t(
+                `The chart below reflects events the system has received
+            across your entire organization. Events are broken down into
+            three categories: Accepted, Rate Limited, and Filtered. Rate
+            Limited events are entries that the system threw away due to quotas
+            being hit, and Filtered events are events that were blocked
+            due to your inbound data filter rules.`
+              )}
+            </p>
+          </div>
+          {!statsLoading && (
+            <div className="col-md-3 stats-column">
+              <h6 className="nav-header">{t('Events per minute')}</h6>
+              <p className="count">{orgTotal.avgRate}</p>
+            </div>
+          )}
+        </div>
+        <div className="organization-stats">
+          {statsLoading ? (
+            <LoadingIndicator />
+          ) : statsError ? (
+            <LoadingError onRetry={this.fetchData} />
+          ) : (
+            <div className="bar-chart">
+              <StackedBarChart
+                points={orgStats}
+                height={150}
+                label="events"
+                className="standard-barchart"
+                barClasses={['accepted', 'rate-limited', 'black-listed']}
+                tooltip={this.renderTooltip}
+              />
+            </div>
+          )}
+        </div>
+
+        <div className="box">
+          <div className="box-header">
+            <h3>{t('Events by Project')}</h3>
+          </div>
+          <div className="box-content">
+            {statsLoading || projectsLoading ? (
+              <LoadingIndicator />
+            ) : projectsError ? (
+              <LoadingError onRetry={this.fetchData} />
+            ) : (
+              <ProjectTable
+                projectTotals={projectTotals}
+                orgTotal={orgTotal}
+                organization={organization}
+                projectMap={projectMap}
+              />
+            )}
+          </div>
+        </div>
+        {pageLinks && <Pagination pageLinks={pageLinks} {...this.props} />}
+      </div>
+    );
+  }
+}
+
+export default OrganizationStats;
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/index.jsx b/src/sentry/static/sentry/app/views/organizationTeams/index.jsx
index 9037c17b86..08cad20368 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/index.jsx
@@ -1,31 +1,44 @@
+import PropTypes from 'prop-types';
 import React from 'react';
 import Reflux from 'reflux';
 
-import {t} from '../../locale';
+import {loadStats} from '../../actionCreators/projects';
+import {sortArray} from '../../utils';
 import ApiMixin from '../../mixins/apiMixin';
-import ListLink from '../../components/listLink';
+import LoadingIndicator from '../../components/loadingIndicator';
 import OrganizationState from '../../mixins/organizationState';
 import TeamStore from '../../stores/teamStore';
-import {sortArray} from '../../utils';
-
-import ExpandedTeamList from './expandedTeamList';
-import OrganizationStatOverview from './organizationStatOverview';
-import {loadStats} from '../../actionCreators/projects';
+import getSettingsComponent from '../../utils/getSettingsComponent';
 
 const OrganizationTeams = React.createClass({
+  propTypes: {
+    routes: PropTypes.arrayOf(PropTypes.object),
+  },
+
   mixins: [ApiMixin, OrganizationState, Reflux.listenTo(TeamStore, 'onTeamListChange')],
 
   getInitialState() {
     return {
+      Component: null,
       teamList: sortArray(TeamStore.getAll(), function(o) {
-        return o.name;
+        return o && o.name;
       }),
       projectStats: {},
     };
   },
 
-  componentWillMount() {
+  componentDidMount() {
     this.fetchStats();
+
+    getSettingsComponent(
+      () =>
+        import(/* webpackChunkName: "organizationTeamsView" */ '../settings/team/organizationTeamsView'),
+      () =>
+        import(/* webpackChunkName: "organizationTeamsView.old" */ './organizationTeamsView'),
+      this.props.routes
+    ).then(Component => {
+      this.setState({Component});
+    });
   },
 
   fetchStats() {
@@ -51,6 +64,7 @@ const OrganizationTeams = React.createClass({
 
   render() {
     if (!this.context.organization) return null;
+    if (!this.state.Component) return <LoadingIndicator />;
 
     let access = this.getAccess();
     let features = this.getFeatures();
@@ -60,42 +74,14 @@ const OrganizationTeams = React.createClass({
     let activeTeams = this.state.teamList.filter(team => team.isMember);
 
     return (
-      <div className="row">
-        <div className="col-md-9">
-          <div className="team-list">
-            <ul className="nav nav-tabs border-bottom">
-              <ListLink to={`/organizations/${org.slug}/teams/`}>
-                {t('Your Teams')}
-              </ListLink>
-              <ListLink to={`/organizations/${org.slug}/all-teams/`}>
-                {t('All Teams')}{' '}
-                <span className="badge badge-soft">{allTeams.length}</span>
-              </ListLink>
-            </ul>
-            {this.props.children /* should be AllTeamsList */ ? (
-              React.cloneElement(this.props.children, {
-                organization: org,
-                teamList: allTeams,
-                access,
-                openMembership:
-                  features.has('open-membership') || access.has('org:write'),
-              })
-            ) : (
-              <ExpandedTeamList
-                organization={org}
-                teamList={activeTeams}
-                projectStats={this.state.projectStats}
-                hasTeams={allTeams.length !== 0}
-                access={access}
-              />
-            )}
-          </div>
-        </div>
-        <OrganizationStatOverview
-          orgId={this.props.params.orgId}
-          className="col-md-3 stats-column"
-        />
-      </div>
+      <this.state.Component
+        {...this.props}
+        access={access}
+        features={features}
+        organization={org}
+        allTeams={allTeams}
+        activeTeams={activeTeams}
+      />
     );
   },
 });
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/organizationTeamsView.jsx b/src/sentry/static/sentry/app/views/organizationTeams/organizationTeamsView.jsx
new file mode 100644
index 0000000000..496d52f5a6
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationTeams/organizationTeamsView.jsx
@@ -0,0 +1,85 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import SentryTypes from '../../proptypes';
+import {t} from '../../locale';
+import ExpandedTeamList from './expandedTeamList';
+import AllTeamsList from './allTeamsList';
+import ListLink from '../../components/listLink';
+import OrganizationStatOverview from '../organizationTeams/organizationStatOverview';
+import recreateRoute from '../../utils/recreateRoute';
+
+class OrganizationTeamsView extends React.Component {
+  static propTypes = {
+    allTeams: PropTypes.arrayOf(SentryTypes.Team),
+    activeTeams: PropTypes.arrayOf(SentryTypes.Team),
+    projectStats: PropTypes.array,
+    organization: SentryTypes.Organization,
+    access: PropTypes.object,
+    features: PropTypes.object,
+    route: PropTypes.object,
+    routes: PropTypes.array,
+    params: PropTypes.object,
+  };
+
+  render() {
+    let {
+      allTeams,
+      activeTeams,
+      projectStats,
+      organization,
+      access,
+      features,
+      route,
+      routes,
+      params,
+    } = this.props;
+    let org = organization;
+
+    if (!organization) return null;
+
+    let urlPrefix = recreateRoute('', {routes, params, stepBack: -1});
+
+    return (
+      <div className="row">
+        <div className="col-md-9">
+          <div className="team-list">
+            <ul className="nav nav-tabs border-bottom">
+              <ListLink to={`${urlPrefix}teams/`}>{t('Your Teams')}</ListLink>
+              <ListLink to={`${urlPrefix}all-teams/`}>
+                {t('All Teams')}{' '}
+                <span className="badge badge-soft">{allTeams.length}</span>
+              </ListLink>
+            </ul>
+            {route.allTeams /* should be AllTeamsList */ ? (
+              <AllTeamsList
+                urlPrefix={urlPrefix}
+                organization={org}
+                teamList={allTeams}
+                access={access}
+                openMembership={
+                  features.has('open-membership') || access.has('org:write')
+                }
+              />
+            ) : (
+              <ExpandedTeamList
+                urlPrefix={urlPrefix}
+                organization={org}
+                teamList={activeTeams}
+                projectStats={projectStats}
+                hasTeams={allTeams.length !== 0}
+                access={access}
+              />
+            )}
+          </div>
+        </div>
+        <OrganizationStatOverview
+          orgId={this.props.params.orgId}
+          className="col-md-3 stats-column"
+        />
+      </div>
+    );
+  }
+}
+
+export default OrganizationTeamsView;
diff --git a/src/sentry/static/sentry/app/views/projects/projectContext.jsx b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
index daa05b9ed6..d065209123 100644
--- a/src/sentry/static/sentry/app/views/projects/projectContext.jsx
+++ b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
@@ -12,7 +12,8 @@ import MissingProjectMembership from '../../components/missingProjectMembership'
 import OrganizationState from '../../mixins/organizationState';
 import SentryTypes from '../../proptypes';
 import TeamStore from '../../stores/teamStore';
-import ProjectStore from '../../stores/projectStore';
+import ProjectsStore from '../../stores/projectsStore';
+import {setActiveProject} from '../../actionCreators/projects';
 import {t} from '../../locale';
 
 const ERROR_TYPES = {
@@ -43,7 +44,7 @@ const ProjectContext = React.createClass({
     ApiMixin,
     Reflux.connect(MemberListStore, 'memberList'),
     Reflux.listenTo(TeamStore, 'onTeamChange'),
-    Reflux.listenTo(ProjectStore, 'onProjectChange'),
+    Reflux.listenTo(ProjectsStore, 'onProjectChange'),
     OrganizationState,
   ],
 
@@ -122,7 +123,7 @@ const ProjectContext = React.createClass({
     if (!projectIds.has(this.state.project.id)) return;
 
     this.setState({
-      project: {...ProjectStore.getById(this.state.project.id)},
+      project: {...ProjectsStore.getById(this.state.project.id)},
     });
   },
 
@@ -157,6 +158,7 @@ const ProjectContext = React.createClass({
     });
 
     if (activeProject && hasAccess) {
+      setActiveProject(null);
       this.api.request(`/projects/${orgId}/${projectId}/`, {
         success: data => {
           this.setState({
@@ -166,6 +168,8 @@ const ProjectContext = React.createClass({
             error: false,
             errorType: null,
           });
+          // assuming here that this means the project is considered the active project
+          setActiveProject(data);
         },
         error: error => {
           // TODO(dcramer): this should handle 404 (project not found)
diff --git a/src/sentry/static/sentry/app/views/settings/components/crumb.styled.jsx b/src/sentry/static/sentry/app/views/settings/components/crumb.styled.jsx
new file mode 100644
index 0000000000..b2c001689a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/crumb.styled.jsx
@@ -0,0 +1,20 @@
+import styled from 'react-emotion';
+
+const Crumb = styled('div')`
+  display: flex;
+  align-items: center;
+  position: relative;
+  font-size: 18px;
+  color: ${p => p.theme.gray3};
+  margin-right: 10px;
+  cursor: pointer;
+  > span {
+    transition: 0.1s all ease;
+  }
+
+  &:hover {
+    color: ${p => p.theme.gray5};
+  }
+`;
+
+export default Crumb;
diff --git a/src/sentry/static/sentry/app/views/settings/components/emptyMessage.jsx b/src/sentry/static/sentry/app/views/settings/components/emptyMessage.jsx
new file mode 100644
index 0000000000..f5a75688f3
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/emptyMessage.jsx
@@ -0,0 +1,12 @@
+import styled from 'react-emotion';
+
+const EmptyMessage = styled.div`
+  display: flex;
+  justify-content: center;
+  padding: 18px;
+  font-size: 1.5em;
+  opacity: 0.4;
+  font-weight: bold;
+`;
+
+export default EmptyMessage;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/apiForm.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/apiForm.jsx
new file mode 100644
index 0000000000..73ece3fa5f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/apiForm.jsx
@@ -0,0 +1,49 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {Client} from '../../../../api';
+import IndicatorStore from '../../../../stores/indicatorStore';
+import Form from './form';
+import {t} from '../../../../locale';
+
+export default class ApiForm extends React.Component {
+  static propTypes = {
+    ...Form.propTypes,
+    onSubmit: PropTypes.func,
+    apiMethod: PropTypes.string.isRequired,
+    apiEndpoint: PropTypes.string.isRequired,
+  };
+
+  constructor(props, context) {
+    super(props, context);
+    this.api = new Client();
+  }
+
+  componentWillUnmount() {
+    this.api.clear();
+  }
+
+  onSubmit = (data, onSuccess, onError) => {
+    this.props.onSubmit && this.props.onSubmit(data);
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    this.api.request(this.props.apiEndpoint, {
+      method: this.props.apiMethod,
+      data,
+      success: result => {
+        IndicatorStore.remove(loadingIndicator);
+        onSuccess(result);
+      },
+      error: error => {
+        IndicatorStore.remove(loadingIndicator);
+        onError(error);
+      },
+    });
+  };
+
+  render() {
+    // eslint-disable-next-line no-unused-vars
+    let {onSubmit, apiMethod, apiEndpoint, ...otherProps} = this.props;
+
+    return <Form onSubmit={this.onSubmit} {...otherProps} />;
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/booleanField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/booleanField.jsx
new file mode 100644
index 0000000000..c42720c1b4
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/booleanField.jsx
@@ -0,0 +1,34 @@
+import React from 'react';
+
+import InputField from './inputField';
+import Switch from '../../../../components/switch';
+
+export default class BooleanField extends InputField {
+  coerceValue(value) {
+    return value ? true : false;
+  }
+
+  onChange = (value, onChange, onBlur, e) => {
+    // We need to toggle current value because Switch is not an input
+    let newValue = this.coerceValue(!value);
+    onChange(newValue, e);
+    onBlur(newValue, e);
+  };
+
+  render() {
+    return (
+      <InputField
+        {...this.props}
+        field={({onChange, onBlur, value, disabled, ...props}) => (
+          <Switch
+            size="lg"
+            {...props}
+            isActive={value}
+            isDisabled={disabled}
+            toggle={this.onChange.bind(this, value, onChange, onBlur)}
+          />
+        )}
+      />
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
new file mode 100644
index 0000000000..1cb34eef8f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
@@ -0,0 +1,97 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import BooleanField from './booleanField';
+// import EmailField from './emailField';
+// import NumberField from './numberField';
+import PasswordField from './passwordField';
+// import RangeField from './rangeField';
+// import Select2FieldAutocomplete from './select2FieldAutocomplete';
+import Select2Field from './select2Field';
+// import Select2TextField from './select2TextField';
+import TextField from './textField';
+import TextareaField from './textareaField';
+
+export default class FieldFromConfig extends React.Component {
+  static propTypes = {
+    field: PropTypes.shape({
+      name: PropTypes.string,
+      type: PropTypes.oneOf(['string', 'array', 'boolean']),
+      required: PropTypes.bool,
+      multiline: PropTypes.bool,
+      label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
+      placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
+      help: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
+      extraHelp: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
+      visible: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
+      getValue: PropTypes.func,
+      setValue: PropTypes.func,
+    }).isRequired,
+  };
+
+  static defaultProps = {
+    formData: {},
+    formErrors: {},
+  };
+
+  render() {
+    let {field, ...otherProps} = this.props;
+
+    // TODO(billy) Not sure of structure yet
+    let props = {
+      ...otherProps,
+      ...field,
+    };
+
+    // let props = Object.assign(Object.assign({}, field), {
+    // value: this.props.formData[field.name],
+    // onChange: this.props.onChange,
+    // label: field.label + (required ? '*' : ''),
+    // required,
+    // error: (this.props.formErrors || {})[field.name],
+    // disabled: field.readonly,
+    // key: field.name,
+    // formState: this.props.formState,
+    // help:
+    // defined(field.help) && field.help !== '' ? (
+    // <span dangerouslySetInnerHTML={{__html: field.help}} />
+    // ) : null,
+    // });
+
+    switch (field.type) {
+      case 'secret':
+        return <PasswordField {...props} />;
+      // case 'range':
+      // return <RangeField {...props} />;
+      case 'bool':
+      case 'boolean':
+        return <BooleanField {...props} />;
+      // case 'email':
+      // return <EmailField {...props} />;
+      case 'string':
+      case 'text':
+      case 'url':
+        if (props.multiline) {
+          return <TextareaField {...props} />;
+        }
+        // if (props.choices) return <Select2TextField {...props} />;
+        return <TextField {...props} />;
+      // case 'number':
+      // return <NumberField {...props} />;
+      case 'textarea':
+        return <TextareaField {...props} />;
+      case 'choice':
+      case 'select':
+        // the chrome required tip winds up in weird places
+        // for select2 elements, so just make it look like
+        // it's required (with *) and rely on server validation
+        delete props.required;
+        // if (props.has_autocomplete) {
+        // return <Select2FieldAutocomplete {...props} />;
+        // }
+        return <Select2Field {...props} />;
+      default:
+        return null;
+    }
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
new file mode 100644
index 0000000000..aa0ece2ab6
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
@@ -0,0 +1,151 @@
+import {Observer} from 'mobx-react';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t} from '../../../../locale';
+import Button from '../../../../components/buttons/button';
+import FormModel from './model';
+
+export default class Form extends React.Component {
+  static propTypes = {
+    cancelLabel: PropTypes.string,
+    onCancel: PropTypes.func,
+    onSubmit: PropTypes.func,
+    onSubmitSuccess: PropTypes.func,
+    onSubmitError: PropTypes.func,
+    submitDisabled: PropTypes.bool,
+    submitLabel: PropTypes.string,
+    footerClass: PropTypes.string,
+    extraButton: PropTypes.element,
+    initialData: PropTypes.object,
+    requireChanges: PropTypes.bool,
+    model: PropTypes.object,
+    allowUndo: PropTypes.bool,
+    saveOnBlur: PropTypes.bool,
+    apiMethod: PropTypes.string,
+    apiEndpoint: PropTypes.string,
+  };
+
+  static defaultProps = {
+    cancelLabel: t('Cancel'),
+    submitLabel: t('Save Changes'),
+    submitDisabled: false,
+    footerClass: 'form-actions align-right',
+    className: 'form-stacked',
+    requireChanges: false,
+    allowUndo: false,
+    saveOnBlur: false,
+  };
+
+  static childContextTypes = {
+    saveOnBlur: PropTypes.bool.isRequired,
+    form: PropTypes.object.isRequired,
+  };
+
+  constructor(props, context) {
+    super(props, context);
+    let {
+      saveOnBlur,
+      apiEndpoint,
+      apiMethod,
+      onSubmitSuccess,
+      onSubmitError,
+      initialData,
+      model,
+      allowUndo,
+    } = props;
+
+    this.model = model || new FormModel();
+    this.model.setInitialData(initialData);
+    this.model.setFormOptions({
+      allowUndo,
+      onSubmitSuccess,
+      onSubmitError,
+      saveOnBlur,
+      apiEndpoint,
+      apiMethod,
+    });
+  }
+
+  getChildContext() {
+    return {
+      saveOnBlur: this.props.saveOnBlur,
+      form: this.model,
+    };
+  }
+
+  componentWillUnmount() {
+    this.model.reset();
+    this.model = null;
+  }
+
+  onSubmit = e => {
+    e.preventDefault();
+    if (this.model.isSaving) {
+      return;
+    }
+
+    this.props.onSubmit(this.model.getData(), this.onSubmitSuccess, this.onSubmitError);
+  };
+
+  onSubmitSuccess = data => {
+    this.model.submitSuccess(data);
+    this.props.onSubmitSuccess && this.props.onSubmitSuccess(data, this.model);
+  };
+
+  onSubmitError = error => {
+    this.model.submitError(error);
+    this.props.onSubmitError && this.props.onSubmitError(error, this.model);
+  };
+
+  render() {
+    let {isSaving} = this.model;
+    let {
+      className,
+      children,
+      footerClass,
+      submitDisabled,
+      submitLabel,
+      cancelLabel,
+      onCancel,
+      extraButton,
+      requireChanges,
+      saveOnBlur,
+    } = this.props;
+    let shouldShowFooter = !saveOnBlur;
+
+    return (
+      <form onSubmit={this.onSubmit} className={className}>
+        {children}
+
+        {shouldShowFooter && (
+          <div className={footerClass} style={{marginTop: 25}}>
+            <Observer>
+              {() => (
+                <Button
+                  priority="primary"
+                  disabled={
+                    this.model.isError ||
+                    isSaving ||
+                    submitDisabled ||
+                    (requireChanges ? !this.model.formChanged : false)
+                  }
+                  type="submit"
+                >
+                  {submitLabel}
+                </Button>
+              )}
+            </Observer>
+
+            {onCancel && (
+              <Button disabled={isSaving} onClick={onCancel} style={{marginLeft: 5}}>
+                {cancelLabel}
+              </Button>
+            )}
+            {extraButton}
+          </div>
+        )}
+      </form>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField.jsx
new file mode 100644
index 0000000000..d0179416eb
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField.jsx
@@ -0,0 +1,380 @@
+import {Box, Flex} from 'grid-emotion';
+import {Observer} from 'mobx-react';
+import {css} from 'emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import ReactDOM from 'react-dom';
+import styled, {keyframes} from 'react-emotion';
+
+import {defined} from '../../../../utils';
+import FormState from '../../../../components/forms/state';
+import IconCheckmarkSm from '../../../../icons/icon-checkmark-sm';
+import IconWarningSm from '../../../../icons/icon-warning-sm';
+import Spinner from './styled/spinner';
+
+const SettingsPanelItemWrapper = styled(({highlighted, ...props}) => <Flex {...props} />)`
+  padding: 15px 20px;
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+  align-items: center;
+  transition: background 0.15s;
+
+  ${p =>
+    p.highlighted
+      ? css`
+          outline: 1px solid ${p.theme.purple};
+        `
+      : ''} &:last-child {
+    border-bottom: none;
+  }
+`;
+
+const SettingsPanelItemLabel = styled.div`
+  color: ${p => p.theme.gray5};
+`;
+
+const SettingsPanelItemCtrl = styled(Box)`
+  color: ${p => p.theme.gray3};
+  width: 50%;
+  padding-left: 10px;
+  position: relative;
+`;
+
+const SettingsPanelItemCtrlState = styled(Box)`
+  width: 36px;
+  text-align: right;
+`;
+
+const SettingsPanelItemDesc = styled(Box)`
+  width: 50%;
+  padding-right: 10px;
+`;
+
+const SettingsRequiredBadge = styled.div`
+  display: inline-block;
+  background: ${p => p.theme.gray2};
+  width: 5px;
+  height: 5px;
+  border-radius: 5px;
+  text-indent: -9999em;
+  vertical-align: super;
+`;
+
+const SettingsPanelItemHelp = styled.div`
+  color: ${p => p.theme.gray2};
+  font-size: 14px;
+  margin-top: 8px;
+  line-height: 1.4;
+`;
+
+const SettingsErrorReason = styled.div`
+  color: ${p => p.theme.redDark};
+  position: absolute;
+  background: #fff;
+  left: 10px;
+  padding: 6px 8px;
+  font-weight: 600;
+  font-size: 12px;
+  border-radius: 3px;
+  box-shadow: 0 0 0 1px rgba(64, 11, 54, 0.15), 0 4px 20px 0 rgba(64, 11, 54, 0.36);
+  z-index: 10000;
+`;
+const fadeOut = keyframes`
+  0% {
+    opacity: 1;
+  }
+  100% {
+    opacity: 0;
+  }
+`;
+
+const pulse = keyframes`
+  0% {
+    transform: scale(1,1);
+  }
+  50% {
+    transform: scale(1.15, 1.15);
+  }
+  100% {
+    transform: scale(1, 1);
+  }
+`;
+
+const SettingsError = styled.div`
+  color: ${p => p.theme.redDark};
+  animation: ${pulse} 1s ease infinite;
+  width: 16px;
+  margin-left: auto;
+`;
+
+const SettingsIsSaved = styled.div`
+  color: ${p => p.theme.green};
+  animation: ${fadeOut} 0.3s ease 2s 1 forwards;
+`;
+
+/**
+ * Some fields don't need to implement their own onChange handlers, in
+ * which case we will receive an Event, but if they do we should handle
+ * the case where they return a value as the first argument.
+ */
+const getValueFromEvent = (valueOrEvent, e) => {
+  let event = e || valueOrEvent;
+  let value = defined(e) ? valueOrEvent : event && event.target && event.target.value;
+
+  return {
+    value,
+    event,
+  };
+};
+
+class FormField extends React.Component {
+  static propTypes = {
+    name: PropTypes.string.isRequired,
+    /** Inline style */
+    style: PropTypes.object,
+
+    label: PropTypes.string,
+    defaultValue: PropTypes.any,
+    disabled: PropTypes.bool,
+    disabledReason: PropTypes.string,
+    help: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
+    required: PropTypes.bool,
+    hideErrorMessage: PropTypes.bool,
+    highlighted: PropTypes.bool,
+
+    // the following should only be used without form context
+    onChange: PropTypes.func,
+    onBlur: PropTypes.func,
+    onKeyDown: PropTypes.func,
+    onMouseOver: PropTypes.func,
+    onMouseOut: PropTypes.func,
+    error: PropTypes.string,
+    value: PropTypes.any,
+  };
+
+  static defaultProps = {
+    hideErrorMessage: false,
+    disabled: false,
+    required: false,
+  };
+
+  static contextTypes = {
+    location: PropTypes.object,
+    form: PropTypes.object,
+  };
+
+  componentDidMount() {
+    // this.attachTooltips();
+    // Tell model about this field's props
+    this.getModel().setFieldDescriptor(this.props.name, this.props);
+  }
+
+  componentWillUnmount() {
+    //this.removeTooltips();
+    jQuery(ReactDOM.findDOMNode(this)).unbind();
+  }
+
+  attachTooltips() {
+    jQuery('.tip', ReactDOM.findDOMNode(this)).tooltip();
+  }
+
+  removeTooltips() {
+    jQuery('.tip', ReactDOM.findDOMNode(this)).tooltip('destroy');
+  }
+
+  getError(props, context) {
+    return this.getModel().getError(this.props.name);
+  }
+
+  getId() {
+    return this.props.name;
+  }
+
+  getModel() {
+    return this.context.form;
+  }
+
+  // Only works for styled inputs
+  handleInputMount = ref => {
+    if (ref && !this.input) {
+      let hash = this.context.location.hash;
+
+      if (!hash) return;
+      if (hash !== `#${this.props.name}`) return;
+
+      ref.focus();
+    }
+
+    this.input = ref;
+  };
+
+  /**
+   * Set field's hover state and propagate callbacks
+   */
+  handleHover = (mouseOver, ...args) => {
+    let {name, onMouseOver, onMouseOut} = this.props;
+    let model = this.getModel();
+
+    model.setFieldState(name, FormState.HOVER, mouseOver);
+    if (onMouseOver) {
+      onMouseOver(...args);
+    }
+    if (onMouseOut) {
+      onMouseOut(...args);
+    }
+  };
+
+  /**
+   * Update field value in form model
+   */
+  handleChange = (...args) => {
+    let {name, onChange} = this.props;
+    let {value, event} = getValueFromEvent(...args);
+    let model = this.getModel();
+
+    if (onChange) {
+      onChange(value, event);
+    }
+
+    model.setValue(name, value);
+  };
+
+  /**
+   * Notify model of a field being blurred
+   */
+  handleBlur = (...args) => {
+    let {name, onBlur} = this.props;
+    let {value, event} = getValueFromEvent(...args);
+    let model = this.getModel();
+
+    if (onBlur) {
+      onBlur(value, event);
+    }
+
+    // Always call this, so model can decide what to do
+    model.handleFieldBlur(name, value);
+  };
+
+  /**
+   * Handle keydown to trigger a save on Enter
+   */
+  handleKeyDown = (...args) => {
+    let {onKeyDown, name} = this.props;
+    let {value, event} = getValueFromEvent(...args);
+    let model = this.getModel();
+
+    if (event.key === 'Enter') {
+      model.handleFieldBlur(name, value);
+    }
+
+    if (onKeyDown) {
+      onKeyDown(value, event);
+    }
+  };
+
+  render() {
+    let {
+      highlighted,
+      required,
+      label,
+      disabled,
+      disabledReason,
+      hideErrorMessage,
+      help,
+    } = this.props;
+    let id = this.getId();
+    let model = this.getModel();
+
+    return (
+      <SettingsPanelItemWrapper
+        highlighted={highlighted}
+        onMouseOver={e => this.handleHover(true, e)}
+        onMouseOut={e => this.handleHover(false, e)}
+      >
+        <SettingsPanelItemDesc>
+          {label && (
+            <SettingsPanelItemLabel>
+              {label} {required && <SettingsRequiredBadge />}
+            </SettingsPanelItemLabel>
+          )}
+          {help && <SettingsPanelItemHelp>{help}</SettingsPanelItemHelp>}
+        </SettingsPanelItemDesc>
+        <SettingsPanelItemCtrl>
+          <Observer>
+            {() => {
+              let error = this.getError();
+              let value = model.getValue(this.props.name);
+
+              return (
+                <this.props.children
+                  innerRef={this.handleInputMount}
+                  {...{
+                    ...this.props,
+                    id,
+                    hover: model.getFieldState(this.props.name, FormState.HOVER),
+                    onKeyDown: this.handleKeyDown,
+                    onChange: this.handleChange,
+                    onBlur: this.handleBlur,
+                    value,
+                    error,
+                  }}
+                />
+              );
+            }}
+          </Observer>
+
+          {disabled &&
+            disabledReason && (
+              <span className="disabled-indicator tip" title={disabledReason}>
+                <span className="icon-question" />
+              </span>
+            )}
+
+          <Observer>
+            {() => {
+              let error = this.getError();
+              let shouldShowErrorMessage = error && !hideErrorMessage;
+              if (!shouldShowErrorMessage) return null;
+              return <SettingsErrorReason>{error}</SettingsErrorReason>;
+            }}
+          </Observer>
+        </SettingsPanelItemCtrl>
+        <SettingsPanelItemCtrlState>
+          <Observer>
+            {() => {
+              let isSaving = model.getFieldState(this.props.name, FormState.SAVING);
+              let isSaved = model.getFieldState(this.props.name, FormState.READY);
+
+              if (isSaving) {
+                return <Spinner />;
+              } else if (isSaved) {
+                return (
+                  <SettingsIsSaved>
+                    <IconCheckmarkSm size="18" />
+                  </SettingsIsSaved>
+                );
+              }
+
+              return null;
+            }}
+          </Observer>
+
+          <Observer>
+            {() => {
+              let error = this.getError();
+
+              if (!error) return null;
+
+              return (
+                <SettingsError>
+                  <IconWarningSm size="18" />
+                </SettingsError>
+              );
+            }}
+          </Observer>
+        </SettingsPanelItemCtrlState>
+      </SettingsPanelItemWrapper>
+    );
+  }
+}
+
+export default FormField;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
new file mode 100644
index 0000000000..eaa08989d0
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
@@ -0,0 +1,38 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import FormField from './formField';
+import Input from './styled/input';
+
+export default class InputField extends React.Component {
+  static propTypes = {
+    ...FormField.propTypes,
+    field: PropTypes.func.isRequired,
+  };
+
+  static defaultProps = {
+    field: ({onChange, onBlur, onKeyDown, ...props}) => (
+      <Input
+        {...props}
+        onBlur={e => onBlur(e.target.value, e)}
+        onKeyDown={e => onKeyDown(e.target.value, e)}
+        onChange={e => onChange(e.target.value, e)}
+      />
+    ),
+  };
+
+  render() {
+    let {field, ...otherProps} = this.props;
+
+    return (
+      <FormField {...this.props}>
+        {({children, ...formFieldProps}) => {
+          return field({
+            ...otherProps,
+            ...formFieldProps,
+          });
+        }}
+      </FormField>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
new file mode 100644
index 0000000000..d76a357b51
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
@@ -0,0 +1,82 @@
+import {Box} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import scrollToElement from 'scroll-to-element';
+
+import FieldFromConfig from './fieldFromConfig';
+import Panel from '../panel';
+import PanelBody from '../panelBody';
+import PanelHeader from '../panelHeader';
+
+class JsonForm extends React.Component {
+  static propTypes = {
+    /**
+     * Fields that are grouped by "section"
+     */
+    forms: PropTypes.arrayOf(
+      PropTypes.shape({
+        title: PropTypes.string,
+        fields: PropTypes.arrayOf(FieldFromConfig.propTypes.field),
+      })
+    ).isRequired,
+  };
+
+  static contextTypes = {
+    location: PropTypes.object,
+  };
+
+  constructor(props, ...args) {
+    super(props, ...args);
+    this.state = {highlighted: props.location.hash};
+  }
+
+  componentDidMount() {
+    this.scrollToHash();
+  }
+
+  componentWillReceiveProps(nextProps, e) {
+    if (this.props.location.hash !== nextProps.location.hash) {
+      this.scrollToHash(nextProps.location.hash);
+      this.setState({highlighted: nextProps.location.hash});
+    }
+  }
+
+  scrollToHash(toHash) {
+    let hash = toHash || this.props.location.hash;
+
+    if (!hash) return;
+
+    // Push onto callback queue so it runs after the DOM is updated,
+    // this is required when navigating from a different page so that
+    // the element is rendered on the page before trying to getElementById.
+    scrollToElement(hash, {align: 'middle', offset: -100});
+  }
+
+  render() {
+    let {forms, ...otherProps} = this.props;
+
+    return (
+      <Box>
+        {forms.map(({title, fields}) => {
+          return (
+            <Panel key={title} id={title}>
+              <PanelHeader>{title}</PanelHeader>
+              <PanelBody>
+                {fields.map(field => (
+                  <FieldFromConfig
+                    key={field.name}
+                    {...otherProps}
+                    field={field}
+                    highlighted={this.state.highlighted === `#${field.name}`}
+                  />
+                ))}
+              </PanelBody>
+            </Panel>
+          );
+        })}
+      </Box>
+    );
+  }
+}
+
+export default JsonForm;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
new file mode 100644
index 0000000000..d4ba4a4e30
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
@@ -0,0 +1,373 @@
+import {observable, computed, action} from 'mobx';
+import _ from 'lodash';
+
+import {Client} from '../../../../api';
+import {defined} from '../../../../utils';
+import FormState from '../../../../components/forms/state';
+
+class FormModel {
+  /**
+   * Map of field name -> value
+   */
+  @observable fields = new Map();
+
+  /**
+   * Errors for individual fields
+   * Note we don't keep error in `this.fieldState` so that we can easily
+   * See if the form is in an "error" state with the `isError` getter
+   */
+  @observable errors = new Map();
+
+  /**
+   * State of individual fields
+   *
+   * Map of field name -> object
+   */
+
+  @observable fieldState = new Map();
+
+  /**
+   * State of the form as a whole
+   */
+  @observable formState;
+
+  /**
+   * Holds field properties as declared in <Form>
+   * Does not need to be observable since these props should never change
+   */
+  fieldDescriptor = new Map();
+
+  /**
+   * Holds a list of `fields` states
+   */
+  snapshots = [];
+
+  /**
+   * POJO of field name -> value
+   * It holds field values "since last save"
+   */
+  initialData = {};
+
+  constructor({initialData, ...options} = {}) {
+    this.setFormOptions(options);
+
+    if (initialData) {
+      this.setInitialData(initialData);
+    }
+
+    this.api = new Client();
+  }
+
+  /**
+   * Reset state of model
+   */
+  reset() {
+    this.api.clear();
+    this.api = null;
+    this.fields.clear();
+    this.errors.clear();
+    this.fieldState.clear();
+    this.snapshots = [];
+    this.initialData = {};
+    this.fieldDescriptor.clear();
+  }
+
+  /**
+   * Deep equality comparison between last saved state and current fields state
+   */
+  @computed
+  get formChanged() {
+    return !_.isEqual(this.initialData, this.fields.toJSON(), true);
+  }
+
+  @computed
+  get formData() {
+    return this.fields;
+  }
+
+  /** Is form saving */
+  @computed
+  get isSaving() {
+    return this.formState === FormState.SAVING;
+  }
+
+  /** Does form have any errors */
+  @computed
+  get isError() {
+    return !!this.errors.size;
+  }
+
+  /**
+   * Sets initial form data
+   *
+   * Also resets snapshots
+   */
+  setInitialData(initialData, {noResetSnapshots} = {}) {
+    this.fields.replace(initialData || {});
+    this.initialData = this.fields.toJSON() || {};
+
+    if (noResetSnapshots) return;
+
+    this.snapshots = [new Map(this.fields)];
+  }
+
+  /**
+   * Set form options
+   */
+  setFormOptions(options) {
+    this.options = options || {};
+  }
+
+  /**
+   * Set field properties
+   */
+  setFieldDescriptor(id, props) {
+    this.fieldDescriptor.set(id, props);
+    if (typeof props.setValue === 'function') {
+      this.initialData[id] = props.setValue(this.initialData[id]);
+      this.setValue(id, this.initialData[id]);
+    }
+  }
+
+  /**
+   * Creates a cloned Map of `this.fields` and returns a closure that when called
+   * will save Map to `snapshots
+   */
+  createSnapshot() {
+    let snapshot = new Map(this.fields);
+    return () => this.snapshots.unshift(snapshot);
+  }
+
+  getDescriptor(id, key) {
+    // Needs to call `has` or else component will not be reactive if `id` doesn't exist in observable map
+    let descriptor = this.fieldDescriptor.has(id) && this.fieldDescriptor.get(id);
+    if (!descriptor) {
+      return null;
+    }
+
+    return descriptor[key];
+  }
+
+  getFieldState(id, key) {
+    // Needs to call `has` or else component will not be reactive if `id` doesn't exist in observable map
+    let fieldState = this.fieldState.has(id) && this.fieldState.get(id);
+    if (!fieldState) {
+      return null;
+    }
+
+    return fieldState[key];
+  }
+
+  getValue(id) {
+    if (!this.fields.has(id)) {
+      return '';
+    }
+
+    return this.fields.get(id);
+  }
+
+  getError(id) {
+    return this.errors.has(id) && this.errors.get(id);
+  }
+
+  // Returns true if not required or is required and is not empty
+  isValidRequiredField(id) {
+    // Check field descriptor to see if field is required
+    let isRequired = this.getDescriptor(id, 'required');
+    return !isRequired || this.getValue(id) !== '';
+  }
+
+  isValidField(id) {
+    return this.isValidRequiredField(id);
+  }
+
+  doApiRequest({apiEndpoint, apiMethod, data}) {
+    let endpoint = apiEndpoint || this.options.apiEndpoint;
+    let method = apiMethod || this.options.apiMethod;
+
+    return new Promise((resolve, reject) => {
+      this.api.request(endpoint, {
+        method,
+        data,
+        success: response => resolve(response),
+        error: error => reject(error),
+      });
+    });
+  }
+
+  @action
+  setValue(id, value) {
+    this.fields.set(id, value);
+
+    // specifically check for empty string, 0 should be allowed
+    if (!this.isValidRequiredField(id)) {
+      this.setError(id, 'Field is required');
+    } else {
+      this.setError(id, false);
+    }
+  }
+
+  @action
+  undo() {
+    // Always have initial data snapshot
+    if (this.snapshots.length < 2) return null;
+
+    this.snapshots.shift();
+    this.fields.replace(this.snapshots[0]);
+
+    return true;
+  }
+
+  /**
+   * Saves a field with new value
+   *
+   * If field has changes, field does not have errors, then it will:
+   * Save a snapshot, apply any data transforms, perform api request.
+   *
+   * If successful then: 1) reset save state, 2) update `initialData`, 3) save snapshot
+   * If failed then: 1) reset save state, 2) add error state
+   */
+  @action
+  saveField(id, currentValue) {
+    // Don't save if field hasn't changed
+    // Don't need to check for error state since initialData wouldn't have updated since last error
+    if (
+      currentValue === this.initialData[id] ||
+      (currentValue === '' && !defined(this.initialData[id]))
+    )
+      return null;
+
+    // Check for error first
+    if (!this.isValidField(id)) return null;
+
+    // shallow clone fields
+    let saveSnapshot = this.createSnapshot();
+    let newValue = this.getValue(id);
+
+    // Save field + value
+    this.setSaving(id, true);
+
+    // Transform data before saving, this uses `getValue` defined when declaring the form
+    let fieldDescriptor = this.fieldDescriptor.get(id);
+    let serializer =
+      typeof fieldDescriptor.getValue === 'function' ? fieldDescriptor.getValue : a => a;
+
+    return this.doApiRequest({data: {[id]: serializer(newValue)}})
+      .then(data => {
+        this.setSaving(id, false);
+
+        // Updating initialData and save snapshot
+        let oldValue = this.initialData[id];
+        this.initialData[id] = newValue;
+
+        if (saveSnapshot) {
+          saveSnapshot();
+          saveSnapshot = null;
+        }
+
+        return {old: oldValue, new: newValue};
+      })
+      .catch(error => {
+        // should we revert field value to last known state?
+
+        saveSnapshot = null;
+        this.setError(id, 'Failed to save');
+
+        // eslint-disable-next-line no-console
+        console.error(error);
+        throw error;
+      });
+  }
+
+  /**
+   * This is called when a field is blurred
+   *
+   * If `saveOnBlur` is set then call `saveField` and handle form callbacks accordingly
+   */
+  @action
+  handleFieldBlur(id, currentValue) {
+    // Nothing to do if `saveOnBlur` is not on
+    if (!this.options.saveOnBlur) return null;
+
+    let savePromise = this.saveField(id, currentValue);
+
+    if (!savePromise) return null;
+
+    return savePromise
+      .then(change => {
+        if (this.options.onSubmitSuccess) {
+          this.options.onSubmitSuccess(change, this, id);
+        }
+        return change;
+      })
+      .catch(error => {
+        if (this.options.onSubmitError) {
+          this.options.onSubmitError(error, this, id);
+        }
+        return {};
+      });
+  }
+
+  @action
+  setFieldState(id, key, value) {
+    let state = {
+      ...(this.fieldState.get(id) || {}),
+      [key]: value,
+    };
+    this.fieldState.set(id, state);
+  }
+
+  /**
+   * Set "saving" state for field
+   */
+  @action
+  setSaving(id, value) {
+    // When saving, reset error state
+    this.setError(id, false);
+    this.setFieldState(id, FormState.SAVING, value);
+    this.setFieldState(id, FormState.READY, !value);
+  }
+
+  /**
+   * Set "error" state for field
+   */
+  @action
+  setError(id, error) {
+    // Note we don't keep error in `this.fieldState` so that we can easily
+    // See if the form is in an "error" state with the `isError` getter
+    if (!!error) {
+      this.formState = FormState.ERROR;
+      this.errors.set(id, error);
+    } else {
+      this.formState = FormState.READY;
+      this.errors.delete(id);
+    }
+
+    // Field should no longer to "saving", but is not necessarily "ready"
+    this.setFieldState(id, FormState.SAVING, false);
+  }
+
+  @action
+  getData() {
+    return this.fields;
+  }
+
+  // TODO: More validations
+  @action
+  validate() {}
+
+  @action
+  submitSuccess(data) {
+    // update initial data
+    this.formState = FormState.READY;
+    this.initialData = data;
+  }
+
+  @action
+  submitError(err) {
+    this.formState = FormState.ERROR;
+    this.formErrors = err.responseJSON;
+  }
+}
+
+export default FormModel;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/passwordField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/passwordField.jsx
new file mode 100644
index 0000000000..e2ea29b8d9
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/passwordField.jsx
@@ -0,0 +1,89 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import InputField from './inputField';
+import FormState from '../../../../components/forms/state';
+
+// TODO(dcramer): im not entirely sure this is working correctly with
+// value propagation in all scenarios
+export default class PasswordField extends InputField {
+  static propTypes = {
+    ...InputField.propTypes,
+    hasSavedValue: PropTypes.bool,
+    prefix: PropTypes.string,
+  };
+
+  static defaultProps = {
+    ...InputField.defaultProps,
+    hasSavedValue: false,
+    prefix: '',
+  };
+
+  constructor(props, context) {
+    super(props, context);
+
+    this.state.editing = false;
+  }
+
+  componentWillReceiveProps(nextProps) {
+    // close edit mode after successful save
+    // TODO(dcramer): this needs to work with this.context.form
+    if (
+      this.props.formState &&
+      this.props.formState === FormState.SAVING &&
+      nextProps.formState === FormState.READY
+    ) {
+      this.setState({
+        editing: false,
+      });
+    }
+  }
+
+  getType() {
+    return 'password';
+  }
+
+  cancelEdit = e => {
+    e.preventDefault();
+    this.setState(
+      {
+        editing: false,
+      },
+      () => {
+        this.setValue('');
+      }
+    );
+  };
+
+  startEdit = e => {
+    e.preventDefault();
+    this.setState({
+      editing: true,
+    });
+  };
+
+  getField() {
+    if (!this.props.hasSavedValue) {
+      return super.getField();
+    }
+
+    if (this.state.editing) {
+      return (
+        <div className="form-password editing">
+          <div>{super.getField()}</div>
+          <div>
+            <a onClick={this.cancelEdit}>Cancel</a>
+          </div>
+        </div>
+      );
+    } else {
+      return (
+        <div className="form-password saved">
+          <span>
+            {this.props.prefix + new Array(21 - this.props.prefix.length).join('*')}
+          </span>
+          {!this.props.disabled && <a onClick={this.startEdit}>Edit</a>}
+        </div>
+      );
+    }
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/select2Field.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/select2Field.jsx
new file mode 100644
index 0000000000..dd818d1b52
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/select2Field.jsx
@@ -0,0 +1,99 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import jQuery from 'jquery';
+
+import InputField from './inputField';
+
+export default class Select2Field extends React.Component {
+  static propTypes = {
+    ...InputField.propTypes,
+    choices: PropTypes.array.isRequired,
+    allowClear: PropTypes.bool,
+    allowEmpty: PropTypes.bool,
+    multiple: PropTypes.bool,
+    escapeMarkup: PropTypes.bool,
+  };
+
+  static defaultProps = {
+    ...InputField.defaultProps,
+    allowClear: false,
+    allowEmpty: false,
+    placeholder: '--',
+    escapeMarkup: true,
+    multiple: false,
+  };
+
+  componentWillUnmount() {
+    if (this.select) {
+      jQuery(this.select)
+        .off('change')
+        .select2('destroy');
+    }
+  }
+
+  onChange = (onBlur, onChange, e) => {
+    if (this.props.multiple) {
+      let options = e.target.options;
+      let value = [];
+      for (let i = 0; i < options.length; i++) {
+        if (options[i].selected) {
+          value.push(options[i].value);
+        }
+      }
+      onChange(value, e);
+    } else {
+      let value = e.target.value;
+      onChange(value, e);
+
+      // Not multplie, also call onBlur to handle saveOnBlur behavior
+      onBlur(value, e);
+    }
+  };
+
+  handleSelectMount = (onBlur, onChange, ref) => {
+    if (ref) {
+      jQuery(ref)
+        .select2(this.getSelect2Options())
+        .on('change', this.onChange.bind(this, onBlur, onChange));
+    } else {
+      jQuery(this.select)
+        .select2('destroy')
+        .off('change');
+    }
+
+    this.select = ref;
+  };
+
+  getSelect2Options() {
+    return {
+      allowClear: this.props.allowClear,
+      allowEmpty: this.props.allowEmpty,
+      width: 'element',
+      escapeMarkup: !this.props.escapeMarkup ? m => m : undefined,
+    };
+  }
+
+  render() {
+    return (
+      <InputField
+        {...this.props}
+        field={({onChange, onBlur, ...props}) => (
+          <select
+            ref={ref => this.handleSelectMount(onBlur, onChange, ref)}
+            style={{width: '100%'}}
+            onChange={() => {}}
+            value={props.value}
+          >
+            {(props.choices || []).map(choice => {
+              return (
+                <option key={choice[0]} value={choice[0]}>
+                  {choice[1]}
+                </option>
+              );
+            })}
+          </select>
+        )}
+      />
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/styled/input.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/styled/input.jsx
new file mode 100644
index 0000000000..3063434a49
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/styled/input.jsx
@@ -0,0 +1,9 @@
+import styled from 'react-emotion';
+
+import {inputStyles} from './styles';
+
+const SettingsInputField = styled.input`
+  ${inputStyles};
+`;
+
+export default SettingsInputField;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/styled/spinner.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/styled/spinner.jsx
new file mode 100644
index 0000000000..2c7f560f7f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/styled/spinner.jsx
@@ -0,0 +1,25 @@
+import {keyframes} from 'emotion';
+import styled from 'react-emotion';
+
+const spin = keyframes`
+  0% {
+    transform: rotate(0deg);
+  }
+  100% {
+    transform: rotate(360deg);
+  }
+`;
+
+const Spinner = styled.div`
+  animation: ${spin} .4s linear infinite;
+  width: 18px;
+  height: 18px
+  border-radius: 18px;
+  border-top: 2px solid ${p => p.theme.borderLight};
+  border-right: 2px solid ${p => p.theme.borderLight};
+  border-bottom: 2px solid ${p => p.theme.borderLight};
+  border-left: 2px solid ${p => p.theme.purple};
+  margin-left: auto;
+`;
+
+export default Spinner;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/styled/styles.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/styled/styles.jsx
new file mode 100644
index 0000000000..8abfe5ce2b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/styled/styles.jsx
@@ -0,0 +1,40 @@
+import {css} from 'react-emotion';
+
+const inputStyles = props => css`
+  color: ${props.theme.gray5};
+  display: block;
+  width: 100%;
+  border: 0;
+  border-radius: 2px;
+  padding: 10px;
+  transition: border 0.2s ease;
+
+  &:focus {
+    outline: none;
+    background: #f7f7f9;
+    border-bottom-color: ${p => props.theme.blue};
+  }
+
+  ${p => {
+    if (props.hover) {
+      return css`
+        background: ${props.error ? '#fff' : props.theme.offWhite};
+      `;
+    }
+    return '';
+  }} ${p => {
+      if (props.error) {
+        return css`
+    background: #f7f7f9;
+    &:hover, &:focus {
+      background: #f7f7f9};
+    }
+    `;
+      }
+      return '';
+    }} &::placeholder {
+    color: ${props.theme.gray2};
+  }
+`;
+
+export {inputStyles};
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/styled/textarea.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/styled/textarea.jsx
new file mode 100644
index 0000000000..b09e8c7be0
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/styled/textarea.jsx
@@ -0,0 +1,8 @@
+import styled from 'react-emotion';
+
+import {inputStyles} from './styles';
+
+const SettingsInputField = styled.textarea`
+  ${inputStyles};
+`;
+export default SettingsInputField;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/textField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/textField.jsx
new file mode 100644
index 0000000000..3613ec4f3a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/textField.jsx
@@ -0,0 +1,8 @@
+import React from 'react';
+import InputField from './inputField';
+
+export default class TextField extends React.Component {
+  render() {
+    return <InputField {...this.props} type="text" />;
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/textareaField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/textareaField.jsx
new file mode 100644
index 0000000000..b75d0b52c4
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/textareaField.jsx
@@ -0,0 +1,14 @@
+import React from 'react';
+import InputField from './inputField';
+import Textarea from './styled/textarea';
+
+export default class TextareaField extends InputField {
+  render() {
+    return (
+      <InputField
+        {...this.props}
+        field={({children, ...fieldProps}) => <Textarea {...fieldProps} />}
+      />
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/components/organizationPicker.jsx b/src/sentry/static/sentry/app/views/settings/components/organizationPicker.jsx
new file mode 100644
index 0000000000..b716d2247c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/organizationPicker.jsx
@@ -0,0 +1,8 @@
+import React from 'react';
+
+class OrganizationPicker extends React.Component {
+  render() {
+    return <div>Select an organization</div>;
+  }
+}
+export default OrganizationPicker;
diff --git a/src/sentry/static/sentry/app/views/settings/components/panel.jsx b/src/sentry/static/sentry/app/views/settings/components/panel.jsx
new file mode 100644
index 0000000000..a5dc56cf48
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/panel.jsx
@@ -0,0 +1,12 @@
+import styled from 'react-emotion';
+
+const Panel = styled.div`
+  background: #fff;
+  border-radius: ${p => p.theme.radius};
+  border: 1px solid ${p => p.theme.borderDark};
+  box-shadow: ${p => p.theme.dropShadowLight};
+  margin-bottom: 30px;
+  position: relative;
+`;
+
+export default Panel;
diff --git a/src/sentry/static/sentry/app/views/settings/components/panelBody.jsx b/src/sentry/static/sentry/app/views/settings/components/panelBody.jsx
new file mode 100644
index 0000000000..a4315ab3ec
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/panelBody.jsx
@@ -0,0 +1,5 @@
+import styled from 'react-emotion';
+
+const PanelBody = styled.div``;
+
+export default PanelBody;
diff --git a/src/sentry/static/sentry/app/views/settings/components/panelHeader.jsx b/src/sentry/static/sentry/app/views/settings/components/panelHeader.jsx
new file mode 100644
index 0000000000..2603d4d88c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/panelHeader.jsx
@@ -0,0 +1,36 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import PanelHeading from './panelHeading';
+
+const StyledPanelHeader = styled.div`
+  border-bottom: 1px solid ${p => p.theme.borderDark};
+  border-radius: ${p => p.theme.radius} ${p => p.theme.radius} 0 0;
+  background: ${p => p.theme.offWhite}
+  padding: ${p => (p.disablePadding ? '15px 0' : '15px 20px')};
+  text-transform: uppercase;
+  font-size: 13px;
+`;
+
+const StyledPanelHeaderHeading = styled(PanelHeading)`
+  font-size: inherit;
+  text-transform: inherit;
+  margin: 0;
+`;
+
+class PanelHeader extends React.Component {
+  render() {
+    return (
+      <StyledPanelHeader disablePadding={this.props.disablePadding} {...this.props}>
+        <StyledPanelHeaderHeading>{this.props.children}</StyledPanelHeaderHeading>
+      </StyledPanelHeader>
+    );
+  }
+}
+
+PanelHeader.propTypes = {
+  disablePadding: PropTypes.bool,
+};
+
+export default PanelHeader;
diff --git a/src/sentry/static/sentry/app/views/settings/components/panelHeading.jsx b/src/sentry/static/sentry/app/views/settings/components/panelHeading.jsx
new file mode 100644
index 0000000000..94ef8ca543
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/panelHeading.jsx
@@ -0,0 +1,9 @@
+import styled from 'react-emotion';
+
+export default styled.div`
+  color: ${p => p.theme.gray3};
+  font-size: 12px;
+  font-weight: 600;
+  text-transform: uppercase;
+  margin-bottom: 20px;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/projectPicker.jsx b/src/sentry/static/sentry/app/views/settings/components/projectPicker.jsx
new file mode 100644
index 0000000000..f1fbb2745c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/projectPicker.jsx
@@ -0,0 +1,8 @@
+import React from 'react';
+
+class ProjectPicker extends React.Component {
+  render() {
+    return <div>Select a project</div>;
+  }
+}
+export default ProjectPicker;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsActivity.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsActivity.jsx
new file mode 100644
index 0000000000..4f9e281256
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsActivity.jsx
@@ -0,0 +1,63 @@
+import React from 'react';
+import Reflux from 'reflux';
+import styled from 'react-emotion';
+
+import {t} from '../../../locale';
+import {undo} from '../../../actionCreators/settingsIndicator';
+import SettingsIndicatorStore from '../../../stores/settingsIndicatorStore';
+
+const Container = styled.div`
+  position: fixed;
+  bottom: 32px;
+  right: 40px;
+  font-size: 15px;
+  color: ${p => p.theme.gray5};
+  background: #fff;
+  border-radius: 3px;
+  border: 1px solid ${p => p.theme.borderDark};
+  box-shadow: ${p => p.theme.dropShadowHeavy};
+  padding: 12px 24px;
+  line-height: 1;
+`;
+
+const Undo = styled.div`
+  display: inline-block;
+  color: ${p => p.theme.gray2};
+  padding-left: 16px;
+  margin-left: 16px;
+  border-left: 1px solid ${p => p.theme.borderLight};
+  cursor: pointer;
+
+  &:hover {
+    color: ${p => p.theme.gray3};
+  }
+`;
+
+const SettingsActivity = React.createClass({
+  mixins: [Reflux.connect(SettingsIndicatorStore, 'activity')],
+
+  getInitialState() {
+    return {
+      activity: null,
+    };
+  },
+
+  render() {
+    let {activity} = this.state;
+
+    if (!activity) {
+      return null;
+    }
+
+    let showUndo = activity.type !== 'error' && activity.type !== 'undo';
+
+    return (
+      <Container type={activity.type}>
+        {activity.message}
+        {showUndo && <Undo onClick={undo}>{t('Undo')}</Undo>}
+      </Container>
+    );
+  },
+});
+
+export default SettingsActivity;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx
new file mode 100644
index 0000000000..ffad140001
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx
@@ -0,0 +1,217 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import Crumb from './crumb.styled';
+import Link from '../../../components/link';
+import LoadingIndicator from '../../../components/loadingIndicator';
+import SentryTypes from '../../../proptypes';
+import SettingsBreadcrumbDivider from './settingsBreadcrumbDivider';
+import SettingsBreadcrumbDropdown from './settingsBreadcrumbDropdown';
+import recreateRoute from '../../../utils/recreateRoute';
+import replaceRouterParams from '../../../utils/replaceRouterParams';
+import withLatestContext from '../../../utils/withLatestContext';
+
+const Breadcrumbs = styled.div`
+  display: flex;
+  align-items: center;
+`;
+
+const MenuItem = styled(Link)`
+  display: block;
+  padding: 15px;
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+
+  &:last-child {
+    border: none;
+  }
+
+  &:hover {
+    background: ${p => p.theme.offWhite};
+  }
+
+  ${p =>
+    p.active
+      ? `
+      font-weight: bold;
+    background: ${p.theme.offWhite};
+  `
+      : ''};
+`;
+
+const StyledLink = styled(Link)`
+  color: ${p => p.theme.gray3};
+  &:hover {
+    color: ${p => p.theme.gray5};
+  }
+`;
+
+const ProjectName = styled.div`
+  display: flex;
+`;
+
+// `organizationDetails` to differeniate from the organization that comes from `OrganizationsStore` which only has
+// a fraction of an org's properties
+const ProjectCrumb = withLatestContext(
+  ({
+    team,
+    organization: latestOrganization,
+    project: latestProject,
+    params,
+    routes,
+    route,
+    ...props
+  }) => {
+    if (!latestOrganization) return null;
+
+    let {teams} = latestOrganization;
+    let teamFromOrg = (teams && teams.find(({slug}) => slug === team.slug)) || {};
+    let {projects} = teamFromOrg;
+
+    if (!projects) return null;
+
+    let hasMenu = projects && projects.length > 1;
+
+    return (
+      <SettingsBreadcrumbDropdown
+        hasMenu={hasMenu}
+        route={route}
+        name={
+          <ProjectName>
+            {!latestProject ? (
+              <LoadingIndicator mini />
+            ) : (
+              <div>
+                <StyledLink
+                  to={replaceRouterParams(
+                    '/settings/organization/:orgId/project/:projectId/',
+                    {
+                      orgId: latestOrganization.slug,
+                      projectId: latestProject.slug,
+                    }
+                  )}
+                >
+                  {`${teamFromOrg.name} / ${latestProject.name}`}
+                </StyledLink>
+              </div>
+            )}
+          </ProjectName>
+        }
+        {...props}
+      >
+        {projects.map(project => (
+          <MenuItem
+            to={recreateRoute(route, {
+              routes,
+              params: {...params, projectId: project.slug},
+            })}
+            active={project.slug === params.projectId}
+            key={project.slug}
+          >
+            {project.name}
+          </MenuItem>
+        ))}
+      </SettingsBreadcrumbDropdown>
+    );
+  }
+);
+
+ProjectCrumb.displayName = 'ProjectCrumb';
+ProjectCrumb.propTypes = {
+  team: SentryTypes.Team,
+  organizationDetails: SentryTypes.Organization,
+  routes: PropTypes.array,
+  route: PropTypes.object,
+  isLast: PropTypes.bool,
+};
+
+const MENUS = {
+  Organization: withLatestContext(
+    ({organizations, organization, params, routes, route, isLast, ...props}) => {
+      let hasMenu = organizations.length > 1;
+
+      return (
+        <SettingsBreadcrumbDropdown
+          name={
+            <StyledLink
+              to={recreateRoute(route, {
+                routes,
+                params: {...params, orgId: organization.slug},
+              })}
+            >
+              {organization.name}
+            </StyledLink>
+          }
+          hasMenu={hasMenu}
+          route={route}
+          {...props}
+        >
+          {organizations.map(org => (
+            <MenuItem
+              to={recreateRoute(route, {
+                routes,
+                params: {...params, orgId: org.slug},
+              })}
+              active={org.slug === params.orgId}
+              key={org.slug}
+            >
+              {org.name}
+            </MenuItem>
+          ))}
+        </SettingsBreadcrumbDropdown>
+      );
+    }
+  ),
+
+  Project: ProjectCrumb,
+};
+
+class SettingsBreadcrumb extends React.Component {
+  static propTypes = {
+    routes: PropTypes.array,
+  };
+
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+    team: SentryTypes.Team,
+  };
+
+  render() {
+    let {routes, params} = this.props;
+    let routesWithNames = routes.filter(({name}) => name);
+    let lastRouteIndex = routesWithNames.length - 1;
+    return (
+      <Breadcrumbs>
+        {routesWithNames.map((route, i) => {
+          let isLast = i === lastRouteIndex;
+          let createMenu = MENUS[route.name];
+          let Menu = typeof createMenu === 'function' && createMenu;
+          let hasMenu = !!Menu;
+          let CrumbPicker = hasMenu
+            ? Menu
+            : () => (
+                <Crumb route={route} isLast={isLast}>
+                  <StyledLink to={recreateRoute(route, {routes, params})}>
+                    {route.name}{' '}
+                  </StyledLink>
+                  <SettingsBreadcrumbDivider isLast={isLast} />
+                </Crumb>
+              );
+
+          return (
+            <CrumbPicker
+              key={`${route.name}:${route.path}`}
+              team={this.context.team}
+              routes={routes}
+              params={params}
+              route={route}
+              isLast={isLast}
+            />
+          );
+        })}
+      </Breadcrumbs>
+    );
+  }
+}
+
+export default SettingsBreadcrumb;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumbDivider.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumbDivider.jsx
new file mode 100644
index 0000000000..616386bf85
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumbDivider.jsx
@@ -0,0 +1,40 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import IconChevronRight from '../../../icons/icon-chevron-right';
+
+const StyledDivider = styled.span`
+  display: inline-block;
+  margin-left: 6px;
+  color: ${p => p.theme.gray1};
+  position: relative;
+  top: -1px;
+
+  ${p =>
+    p.isHover
+      ? `
+    transform: rotate(90deg);
+    top: 0;
+    `
+      : ''};
+`;
+
+class SettingsBreadcrumbDivider extends React.Component {
+  static propTypes = {
+    isHover: PropTypes.bool,
+    isLast: PropTypes.bool,
+  };
+  render() {
+    let {isHover, isLast} = this.props;
+    if (isLast) return null;
+
+    return (
+      <StyledDivider isHover={isHover}>
+        <IconChevronRight size="15" />
+      </StyledDivider>
+    );
+  }
+}
+
+export default SettingsBreadcrumbDivider;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumbDropdown.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumbDropdown.jsx
new file mode 100644
index 0000000000..aaddb24eec
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumbDropdown.jsx
@@ -0,0 +1,132 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import DropdownMenu from '../../../components/dropdownMenu';
+import SettingsBreadcrumbDivider from './settingsBreadcrumbDivider';
+import Crumb from './crumb.styled';
+
+const Menu = styled.div`
+  font-size: 16px;
+  position: absolute;
+  opacity: 0;
+  visibility: hidden;
+  top: 140%;
+  width: 200px;
+  background: #fff;
+  border: 1px solid ${p => p.theme.borderDark};
+  box-shadow: ${p => p.theme.dropShadowHeavy};
+  transition: 0.1s all ease;
+  border-radius: ${p => p.theme.radius};
+  overflow: hidden;
+
+  ${p =>
+    p.isOpen
+      ? `
+  opacity: 1;
+  visibility: visible;`
+      : ''};
+`;
+
+class SettingsBreadcrumbDropdown extends React.Component {
+  static propTypes = {
+    hasMenu: PropTypes.bool,
+    route: PropTypes.object,
+    isLast: PropTypes.bool,
+    enterDelay: PropTypes.number,
+    name: PropTypes.node,
+  };
+
+  static defaultProps = {
+    enterDelay: 200,
+  };
+
+  constructor(...args) {
+    super(...args);
+
+    this.entering = false;
+    this.leaving = false;
+    this.state = {isOpen: false};
+  }
+
+  // Adds a delay when mouse hovers on actor (in this case the breadcrumb)
+  handleMouseEnterActor = () => {
+    if (this.leaving) {
+      clearTimeout(this.leaving);
+    }
+
+    this.entering = setTimeout(
+      () => this.setState({isOpen: true}),
+      this.props.enterDelay
+    );
+  };
+
+  // handles mouseEnter event on actor and menu, should clear the leaving timeout and keep menu open
+  handleMouseEnter = () => {
+    if (this.leaving) {
+      clearTimeout(this.leaving);
+    }
+
+    this.setState({isOpen: true});
+  };
+
+  // handles mouseLeave event on actor and menu, adds a timeout before updating state to account for
+  // mouseLeave into
+  handleMouseLeave = e => {
+    if (this.entering) {
+      clearTimeout(this.entering);
+    }
+
+    this.leaving = setTimeout(() => this.setState({isOpen: false}), 200);
+  };
+
+  // Close immediately when actor is clicked clicked
+  handleClickActor = e => {
+    this.setState({isOpen: false});
+  };
+
+  // Close immediately when clicked outside
+  handleClose = () => {
+    this.setState({isOpen: false});
+  };
+
+  render() {
+    let {children, hasMenu, route, isLast, name} = this.props;
+    return (
+      <DropdownMenu isOpen={this.state.isOpen} onClickOutside={this.handleClose}>
+        {({isOpen, getRootProps, getActorProps, getMenuProps}) => {
+          return (
+            <Crumb {...getRootProps({hasMenu})}>
+              <div
+                {...getActorProps({
+                  onClick: this.handleClickActor,
+                  onMouseEnter: this.handleMouseEnterActor,
+                  onMouseLeave: this.handleMouseLeave,
+                  style: {display: 'inline'},
+                })}
+              >
+                {name || route.name}{' '}
+              </div>
+              <SettingsBreadcrumbDivider isHover={hasMenu && isOpen} isLast={isLast} />
+              {hasMenu && (
+                <Menu
+                  {...getMenuProps({
+                    isOpen,
+                    isStyled: true,
+                    onMouseEnter: this.handleMouseEnter,
+                    onMouseLeave: this.handleMouseLeave,
+                    className: 'menu',
+                  })}
+                >
+                  {children}
+                </Menu>
+              )}
+            </Crumb>
+          );
+        }}
+      </DropdownMenu>
+    );
+  }
+}
+
+export default SettingsBreadcrumbDropdown;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsHeader.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsHeader.jsx
new file mode 100644
index 0000000000..e19b6ecfcd
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsHeader.jsx
@@ -0,0 +1,19 @@
+import {Flex} from 'grid-emotion';
+import styled from 'react-emotion';
+
+const SettingsHeader = styled(Flex)`
+  align-items: center;
+  position: sticky;
+  top: 0;
+  height: 105px;
+  width: 1010px;
+  background-image: linear-gradient(
+    to bottom,
+    #fcfcfc 0%,
+    #fcfcfc 80%,
+    rgba(255, 255, 255, 0.2) 100%
+  );
+  z-index: 1000000;
+`;
+
+export default SettingsHeader;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsNavItem.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsNavItem.jsx
new file mode 100644
index 0000000000..136b009a8f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsNavItem.jsx
@@ -0,0 +1,53 @@
+import {Link} from 'react-router';
+import {withTheme} from 'emotion-theming';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import Badge from '../../../components/badge';
+
+const StyledNavItem = withTheme(
+  styled(({active, ...props}) => <Link {...props} />)`
+    display: block;
+    color: ${p => (p.active ? p.theme.gray5 : p.theme.gray2)};
+    font-size: 14px;
+    line-height: 30px;
+    position: relative;
+
+    &:hover,
+    &:focus,
+    &:active {
+      color: ${p => p.theme.gray5};
+    }
+
+    &:before {
+      position: absolute;
+      content: '';
+      display: block;
+      top: 8px;
+      left: -22px;
+      height: 14px;
+      width: 2px;
+      background: ${p => (p.active ? p.theme.purple : 'transparent')};
+      border-radius: 1px;
+    }
+  `
+);
+
+class SettingsNavItem extends React.Component {
+  static propTypes = {
+    label: PropTypes.node.isRequired,
+    badge: PropTypes.node,
+  };
+
+  render() {
+    let {badge, label, ...props} = this.props;
+
+    return (
+      <StyledNavItem {...props}>
+        {label} {badge ? <Badge text={badge} /> : null}
+      </StyledNavItem>
+    );
+  }
+}
+export default SettingsNavItem;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx
new file mode 100644
index 0000000000..6f144e0a3c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx
@@ -0,0 +1,35 @@
+import {Box} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import SettingsNavigationGroup from '../components/settingsNavigationGroup';
+import SentryTypes from '../../../proptypes';
+
+class SettingsNavigation extends React.Component {
+  static propTypes = {
+    hooks: PropTypes.array,
+    hookConfigs: PropTypes.array,
+    navigationObjects: PropTypes.arrayOf(SentryTypes.NavigationObject).isRequired,
+  };
+
+  static defaultProps = {
+    hooks: [],
+    hookConfigs: [],
+  };
+
+  render() {
+    let {navigationObjects, hooks, hookConfigs, ...otherProps} = this.props;
+    let navWithHooks = navigationObjects.concat(hookConfigs);
+
+    return (
+      <Box>
+        {navWithHooks.map(config => (
+          <SettingsNavigationGroup key={config.name} {...otherProps} {...config} />
+        ))}
+        {hooks.map((Hook, i) => Hook)}
+      </Box>
+    );
+  }
+}
+
+export default SettingsNavigation;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsNavigationGroup.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsNavigationGroup.jsx
new file mode 100644
index 0000000000..0fb64e68d5
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsNavigationGroup.jsx
@@ -0,0 +1,64 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import SentryTypes from '../../../proptypes';
+import SettingsNavItem from './settingsNavItem';
+import replaceRouterParams from '../../../utils/replaceRouterParams';
+
+const NavSection = styled.div`
+  margin-bottom: 20px;
+`;
+
+const SettingsHeading = styled.div`
+  color: ${p => p.theme.gray3};
+  font-size: 12px;
+  font-weight: 600;
+  text-transform: uppercase;
+  margin-bottom: 20px;
+`;
+
+export default class NavigationGroup extends React.Component {
+  static propTypes = {
+    ...SentryTypes.NavigationGroup,
+    organization: SentryTypes.Organization,
+    project: SentryTypes.Project,
+    access: PropTypes.object,
+    features: PropTypes.object,
+  };
+
+  static contextTypes = {
+    router: PropTypes.object,
+    location: PropTypes.object,
+  };
+
+  render() {
+    let {organization, project, name, items} = this.props;
+    let {router} = this.context;
+
+    return (
+      <NavSection>
+        <SettingsHeading>{name}</SettingsHeading>
+        {items.map(({path, title, show, badge}) => {
+          if (typeof show === 'function' && !show(this.props)) return null;
+          if (typeof show !== 'undefined' && !show) return null;
+          let badgeResult = typeof badge === 'function' ? badge(this.props) : null;
+          let to = replaceRouterParams(path, {
+            orgId: organization && organization.slug,
+            projectId: project && project.slug,
+          });
+
+          return (
+            <SettingsNavItem
+              active={router.isActive(to)}
+              key={title}
+              to={to}
+              label={title}
+              badge={badgeResult}
+            />
+          );
+        })}
+      </NavSection>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsPageHeader.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsPageHeader.jsx
new file mode 100644
index 0000000000..3b62c063bc
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsPageHeader.jsx
@@ -0,0 +1,54 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+class SettingsPageHeading extends React.Component {
+  static propTypes = {
+    label: PropTypes.string,
+    action: PropTypes.node,
+  };
+
+  render() {
+    // Todo(ckj) support tabs
+    return (
+      <Wrapper>
+        {this.props.label && (
+          <LabelContainer>
+            <Label>
+              <LabelText>{this.props.label}</LabelText>
+            </Label>
+          </LabelContainer>
+        )}
+        {this.props.action && <div>{this.props.action}</div>}
+      </Wrapper>
+    );
+  }
+}
+
+const Wrapper = styled.div`
+  display: flex;
+  align-items: center;
+  font-size: 14px;
+  box-shadow: inset 0 -1px 0 ${p => p.theme.borderLight};
+  margin-bottom: 30px;
+`;
+
+const LabelContainer = styled.div`
+  display: flex;
+  flex: 1;
+`;
+
+// Label w/ border
+const Label = styled.div`
+  display: flex;
+  align-items: center;
+  font-weight: bold;
+  border-bottom: 3px solid ${p => p.theme.purple};
+`;
+
+// Label text only
+const LabelText = styled.span`
+  padding: 14px 0;
+`;
+
+export default SettingsPageHeading;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsSearch.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsSearch.jsx
new file mode 100644
index 0000000000..72774c0060
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsSearch.jsx
@@ -0,0 +1,202 @@
+import {Link, browserHistory} from 'react-router';
+import {css} from 'emotion';
+import React from 'react';
+import styled from 'react-emotion';
+
+import AutoComplete from '../../../components/autoComplete';
+import {searchIndex as orgSearchIndex} from '../../../data/forms/organizationGeneralSettings';
+import {searchIndex as teamSearchIndex} from '../../../data/forms/teamSettingsFields';
+import {t} from '../../../locale';
+import IconSearch from '../../../icons/icon-search';
+import replaceRouterParams from '../../../utils/replaceRouterParams';
+
+const MIN_SEARCH_LENGTH = 2;
+
+const searchIndex = Object.assign({}, orgSearchIndex, teamSearchIndex);
+
+const SearchInputWrapper = styled.div`
+  position: relative;
+`;
+
+const SearchInputIcon = styled(IconSearch)`
+  color: ${p => p.theme.gray2}
+  position: absolute;
+  left: 10px;
+  top: 8px;
+`;
+
+const SearchInput = styled.input`
+  transition: border-color 0.15s ease;
+  font-size: 14px;
+  width: 220px;
+  line-height: 1;
+  padding: 5px 8px 4px 28px;
+  border: 1px solid ${p => p.theme.borderDark};
+  border-radius: 30px;
+  height: 28px;
+
+  box-shadow: inset ${p => p.theme.dropShadowLight};
+
+  &:focus {
+    outline: none;
+    border: 1px solid ${p => p.theme.gray1};
+  }
+
+  &::placeholder {
+    color: ${p => p.theme.gray2};
+  }
+`;
+
+const DropdownBox = styled.div`
+  background: #fff;
+  border: 1px solid ${p => p.theme.borderDark};
+  box-shadow: ${p => p.theme.dropShadowHeavy};
+  position: absolute;
+  top: 36px;
+  right: 0;
+  width: 400px;
+  border-radius: 5px;
+`;
+
+const SettingsSearchContainer = styled.div`
+  position: relative;
+`;
+
+const SearchItem = styled(Link)`
+  display: block;
+  color: ${p => p.theme.gray5};
+  padding: 16px 16px 14px;
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+
+  ${p =>
+    p.highlighted &&
+    css`
+      color: ${p.theme.purpleDarkest};
+      background: ${p.theme.offWhite};
+    `} &:first-child {
+    border-radius: 5px 5px 0 0;
+  }
+
+  &:last-child {
+    border-bottom: 0;
+    border-radius: 0 0 5px 5px;
+  }
+`;
+
+const SearchDetail = styled.div`
+  font-size: 0.8em;
+  line-height: 1.3;
+  margin-top: 4px;
+  color: ${p => p.theme.gray3};
+`;
+
+class SettingsSearch extends React.Component {
+  static propTypes = {};
+
+  handleSelect = (item, state) => {
+    if (!item) return;
+
+    let {to} = item;
+    if (!to) return;
+
+    browserHistory.push(item.to);
+  };
+
+  render() {
+    let {params} = this.props;
+
+    // TODO Create search index based on route
+    // (i.e. can only search project settings when a project is in context)
+
+    return (
+      <AutoComplete
+        defaultHighlightedIndex={0}
+        itemToString={() => ''}
+        onSelect={this.handleSelect}
+        onStateChange={this.handleStateChange}
+      >
+        {({
+          getInputProps,
+          getItemProps,
+          isOpen,
+          inputValue,
+          selectedItem,
+          highlightedIndex,
+          onChange,
+        }) => {
+          let isValidSearch = inputValue.length > MIN_SEARCH_LENGTH;
+
+          let matches =
+            isValidSearch &&
+            isOpen &&
+            Object.keys(searchIndex)
+              .filter(key => key.indexOf(inputValue.toLowerCase()) > -1)
+              .filter(key => {
+                // TODO: Open up a confirm to ask which project/team/org to use
+                // The route doesn't have all params to continue, don't show in search results
+                return (
+                  !searchIndex[key].requireParams ||
+                  !searchIndex[key].requireParams.length ||
+                  !searchIndex[key].requireParams.find(
+                    param => typeof params[param] === 'undefined'
+                  )
+                );
+              });
+
+          return (
+            <SettingsSearchContainer>
+              <SearchInputWrapper>
+                <SearchInputIcon size="14px" />
+                <SearchInput
+                  {...getInputProps({
+                    type: 'text',
+                    placeholder: 'Search settings',
+                  })}
+                />
+              </SearchInputWrapper>
+
+              {isValidSearch && isOpen ? (
+                <DropdownBox>
+                  {matches && matches.length ? (
+                    matches.map((key, index) => {
+                      let item = searchIndex[key];
+                      let {route, field} = item;
+                      let to = `${replaceRouterParams(
+                        route,
+                        params
+                      )}#${encodeURIComponent(field.name)}`;
+
+                      return (
+                        <SearchItem
+                          {...getItemProps({
+                            item: {
+                              ...item,
+                              to,
+                            },
+                          })}
+                          highlighted={index === highlightedIndex}
+                          to={to}
+                          key={field.name}
+                        >
+                          <div>
+                            <span>{field.label}</span>
+                          </div>
+
+                          <SearchDetail>{field.help}</SearchDetail>
+                        </SearchItem>
+                      );
+                    })
+                  ) : (
+                    <SearchItem>{t('No results found')}</SearchItem>
+                  )}
+                </DropdownBox>
+              ) : null}
+            </SettingsSearchContainer>
+          );
+        }}
+      </AutoComplete>
+    );
+  }
+}
+
+export default SettingsSearch;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/apiKeys/organizationApiKeyDetailsView.jsx b/src/sentry/static/sentry/app/views/settings/organization/apiKeys/organizationApiKeyDetailsView.jsx
index 218943b4ed..0ceae89f72 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/apiKeys/organizationApiKeyDetailsView.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/apiKeys/organizationApiKeyDetailsView.jsx
@@ -6,11 +6,12 @@ import {t} from '../../../../locale';
 import ApiForm from '../../../../components/forms/apiForm';
 import IndicatorStore from '../../../../stores/indicatorStore';
 import MultipleCheckboxField from '../../../../components/forms/multipleCheckboxField';
+import OrganizationSettingsView from '../../../organizationSettingsView';
 import SentryTypes from '../../../../proptypes';
 import SplitLayout from '../../../../components/splitLayout';
 import TextField from '../../../../components/forms/textField';
 import TextareaField from '../../../../components/forms/textareaField';
-import OrganizationSettingsView from '../../../organizationSettingsView';
+import recreateRoute from '../../../../utils/recreateRoute';
 
 const API_CHOICES = API_SCOPES.map(s => [s, s]);
 
@@ -73,7 +74,13 @@ class OrganizationApiKeyDetailsView extends OrganizationSettingsView {
           onSubmitSuccess={this.handleSubmitSuccess}
           onSubmitError={this.handleSubmitError}
           onCancel={() =>
-            browserHistory.push(`/organizations/${this.props.params.orgId}/api-keys/`)}
+            browserHistory.push(
+              recreateRoute('api-keys/', {
+                stepBack: -1,
+                routes: this.props.routes,
+                params: this.props.params,
+              })
+            )}
         >
           <SplitLayout splitWidth={15}>
             <TextField label={t('Label')} name="label" />
diff --git a/src/sentry/static/sentry/app/views/settings/organization/apiKeys/organizationApiKeysList.jsx b/src/sentry/static/sentry/app/views/settings/organization/apiKeys/organizationApiKeysList.jsx
new file mode 100644
index 0000000000..9873d95d06
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/apiKeys/organizationApiKeysList.jsx
@@ -0,0 +1,137 @@
+import {Box, Flex} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t, tct} from '../../../../locale';
+import Button from '../../../../components/buttons/button';
+import EmptyMessage from '../../components/emptyMessage';
+import ExternalLink from '../../../../components/externalLink';
+import Link from '../../../../components/link';
+import LinkWithConfirmation from '../../../../components/linkWithConfirmation';
+import Panel from '../../components/panel';
+import PanelBody from '../../components/panelBody';
+import PanelHeader from '../../components/panelHeader';
+import SettingsPageHeader from '../../components/settingsPageHeader';
+import recreateRoute from '../../../../utils/recreateRoute';
+
+const Row = styled(Flex)`
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+
+  &:last-child {
+    border: 0;
+  }
+`;
+
+const PlusIcon = styled.span`
+  margin-right: 4px;
+`;
+
+const TextBlock = styled.p`
+  line-height: 1.8;
+`;
+
+class OrganizationApiKeysList extends React.Component {
+  static propTypes = {
+    routes: PropTypes.array,
+    keys: PropTypes.array,
+    busy: PropTypes.bool,
+    onRemove: PropTypes.func,
+    onAddApiKey: PropTypes.func,
+  };
+
+  render() {
+    let {params, routes, keys, busy, onAddApiKey, onRemove} = this.props;
+    let hasKeys = keys && keys.length;
+
+    let action = (
+      <Button priority="link" busy={busy} disabled={busy} onClick={onAddApiKey}>
+        <PlusIcon className="icon-plus" /> {t('New API Key')}
+      </Button>
+    );
+    return (
+      <div>
+        <SettingsPageHeader label={t('API Keys')} action={action} />
+
+        <TextBlock>
+          {tct(
+            `API keys grant access to the [api:developer web API].
+          If you're looking to configure a Sentry client, you'll need a
+          client key which is available in your project settings.`,
+            {
+              api: <ExternalLink href="https://docs.sentry.io/hosted/api/" />,
+            }
+          )}
+        </TextBlock>
+
+        <div className="alert alert-block alert-info">
+          {tct(
+            'psst. Until Sentry supports OAuth, you might want to switch to using [tokens:Auth Tokens] instead.',
+            {
+              tokens: <Link to="/api/" />,
+            }
+          )}
+        </div>
+
+        <Panel>
+          <PanelHeader disablePadding={true}>
+            <Flex align="center">
+              <Flex align="center" flex="1">
+                <Box px={2} flex="1">
+                  {t('Name')}
+                </Box>
+                <Box px={2} flex="2">
+                  {t('Key')}
+                </Box>
+              </Flex>
+
+              <Box px={2} w={100}>
+                {t('Actions')}
+              </Box>
+            </Flex>
+          </PanelHeader>
+
+          <PanelBody>
+            {!hasKeys && (
+              <EmptyMessage>{t('No API keys for this organization')}</EmptyMessage>
+            )}
+
+            {keys &&
+              keys.map(({id, key, label}) => {
+                let apiDetailsUrl = recreateRoute(`${id}/`, {
+                  params,
+                  routes,
+                });
+
+                return (
+                  <Row align="center" py={1} key={id}>
+                    <Flex align="center" flex="1">
+                      <Box px={2} flex="1" align="center">
+                        <Link to={apiDetailsUrl}>{label}</Link>
+                      </Box>
+                      <Box px={2} flex="2">
+                        <div className="form-control disabled auto-select">{key}</div>
+                      </Box>
+                    </Flex>
+
+                    <Box px={2} w={100}>
+                      <LinkWithConfirmation
+                        className="btn btn-default btn-sm"
+                        onConfirm={e => onRemove(id, e)}
+                        message={t('Are you sure you want to remove this API key?')}
+                        title={t('Remove API Key?')}
+                      >
+                        <span className="icon-trash" />
+                      </LinkWithConfirmation>
+                    </Box>
+                  </Row>
+                );
+              })}
+          </PanelBody>
+        </Panel>
+      </div>
+    );
+  }
+}
+
+export default OrganizationApiKeysList;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/apiKeys/organizationApiKeysList.old.jsx b/src/sentry/static/sentry/app/views/settings/organization/apiKeys/organizationApiKeysList.old.jsx
new file mode 100644
index 0000000000..7cb29b6b1e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/apiKeys/organizationApiKeysList.old.jsx
@@ -0,0 +1,117 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t} from '../../../../locale';
+import Button from '../../../../components/buttons/button';
+import ExternalLink from '../../../../components/externalLink';
+import Link from '../../../../components/link';
+import LinkWithConfirmation from '../../../../components/linkWithConfirmation';
+import SentryTypes from '../../../../proptypes';
+import SpreadLayout from '../../../../components/spreadLayout';
+import recreateRoute from '../../../../utils/recreateRoute';
+
+class OrganizationApiKeysList extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization,
+    routes: PropTypes.array,
+    keys: PropTypes.array,
+    busy: PropTypes.bool,
+    onRemove: PropTypes.func,
+    onAddApiKey: PropTypes.func,
+  };
+
+  render() {
+    let {params, routes, keys, busy, onAddApiKey, onRemove} = this.props;
+
+    return (
+      <div>
+        <SpreadLayout className="page-header">
+          <h3>{t('Api Keys')}</h3>
+
+          <Button
+            type="button"
+            priority="primary"
+            busy={busy}
+            disabled={busy}
+            onClick={onAddApiKey}
+          >
+            New API Key
+          </Button>
+        </SpreadLayout>
+
+        <p>
+          API keys grant access to the{' '}
+          <ExternalLink
+            target="_blank"
+            rel="nofollow"
+            href="https://docs.sentry.io/hosted/api/"
+          >
+            developer web API
+          </ExternalLink>
+          . If you're looking to configure a Sentry client, you'll need a client key which
+          is available in your project settings.
+        </p>
+
+        <div className="alert alert-block alert-info">
+          psst. Until Sentry supports OAuth, you might want to switch to using{' '}
+          <Link to="/api/">Auth Tokens</Link> instead.
+        </div>
+
+        {keys && (
+          <table className="table api-key-list">
+            <colgroup>
+              <col style={{width: '40%'}} />
+              <col style={{width: '40%'}} />
+              <col style={{width: '20%'}} />
+            </colgroup>
+            <tbody>
+              {keys.map(({id, key, label}) => {
+                let apiDetailsUrl = recreateRoute(`${id}/`, {
+                  params,
+                  routes,
+                });
+                return (
+                  <tr key={key}>
+                    <td>
+                      <h5>
+                        <Link to={apiDetailsUrl}>{label}</Link>
+                      </h5>
+                    </td>
+                    <td>
+                      <div className="form-control disabled auto-select">{key}</div>
+                    </td>
+                    <td className="align-right">
+                      <Link
+                        to={apiDetailsUrl}
+                        className="btn btn-default btn-sm"
+                        style={{marginRight: 4}}
+                      >
+                        Edit Key
+                      </Link>
+                      <LinkWithConfirmation
+                        className="btn btn-default btn-sm"
+                        onConfirm={e => onRemove(id, e)}
+                        message="Are you sure you want to remove this API key?"
+                        title="Remove API Key?"
+                      >
+                        <span className="icon-trash" />
+                      </LinkWithConfirmation>
+                    </td>
+                  </tr>
+                );
+              })}
+            </tbody>
+          </table>
+        )}
+
+        {!keys && (
+          <div className="blankslate well">
+            There are no API keys for this organization.
+          </div>
+        )}
+      </div>
+    );
+  }
+}
+
+export default OrganizationApiKeysList;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/apiKeys/organizationApiKeysView.jsx b/src/sentry/static/sentry/app/views/settings/organization/apiKeys/organizationApiKeysView.jsx
index d90b300339..2ab7e7a1ed 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/apiKeys/organizationApiKeysView.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/apiKeys/organizationApiKeysView.jsx
@@ -1,15 +1,12 @@
-import React from 'react';
 import {browserHistory} from 'react-router';
+import React from 'react';
 
 import {Client} from '../../../../api';
-import {t} from '../../../../locale';
-import Button from '../../../../components/buttons/button';
-import Link from '../../../../components/link';
-import ExternalLink from '../../../../components/externalLink';
-import LinkWithConfirmation from '../../../../components/linkWithConfirmation';
-import SentryTypes from '../../../../proptypes';
-import SpreadLayout from '../../../../components/spreadLayout';
+import LazyLoad from '../../../../components/lazyLoad';
 import OrganizationSettingsView from '../../../organizationSettingsView';
+import SentryTypes from '../../../../proptypes';
+import getSettingsComponent from '../../../../utils/getSettingsComponent';
+import recreateRoute from '../../../../utils/recreateRoute';
 
 class OrganizationApiKeysView extends OrganizationSettingsView {
   static contextTypes = {
@@ -52,7 +49,10 @@ class OrganizationApiKeysView extends OrganizationSettingsView {
       success: data => {
         this.setState({busy: false});
         browserHistory.push(
-          `/organizations/${this.props.params.orgId}/api-keys/${data.id}`
+          recreateRoute(`${data.id}/`, {
+            params: this.props.params,
+            routes: this.props.routes,
+          })
         );
       },
       error: () => {
@@ -62,89 +62,23 @@ class OrganizationApiKeysView extends OrganizationSettingsView {
   };
 
   renderBody() {
-    let keyList = this.state.keys;
-
     return (
-      <div>
-        <SpreadLayout className="page-header">
-          <h3>{t('Api Keys')}</h3>
-
-          <Button
-            type="button"
-            priority="primary"
-            busy={this.state.busy}
-            disabled={this.state.busy}
-            onClick={this.handleAddApiKey}
-          >
-            New API Key
-          </Button>
-        </SpreadLayout>
-
-        <p>
-          API keys grant access to the{' '}
-          <ExternalLink href="https://docs.sentry.io/hosted/api/">
-            developer web API
-          </ExternalLink>
-          . If you're looking to configure a Sentry client, you'll need a client key which
-          is available in your project settings.
-        </p>
-
-        <div className="alert alert-block alert-info">
-          psst. Until Sentry supports OAuth, you might want to switch to using{' '}
-          <Link to="/api/">Auth Tokens</Link> instead.
-        </div>
-
-        {keyList && (
-          <table className="table api-key-list">
-            <colgroup>
-              <col style={{width: '40%'}} />
-              <col style={{width: '40%'}} />
-              <col style={{width: '20%'}} />
-            </colgroup>
-            <tbody>
-              {keyList.map(({id, key, label}) => {
-                let apiDetailsUrl = `/organizations/${this.props.params
-                  .orgId}/api-keys/${id}`;
-                return (
-                  <tr key={key}>
-                    <td>
-                      <h5>
-                        <Link to={apiDetailsUrl}>{label}</Link>
-                      </h5>
-                    </td>
-                    <td>
-                      <div className="form-control disabled auto-select">{key}</div>
-                    </td>
-                    <td className="align-right">
-                      <Link
-                        to={apiDetailsUrl}
-                        className="btn btn-default btn-sm"
-                        style={{marginRight: 4}}
-                      >
-                        Edit Key
-                      </Link>
-                      <LinkWithConfirmation
-                        className="btn btn-default btn-sm"
-                        onConfirm={this.handleRemove.bind(this, id)}
-                        message="Are you sure you want to remove this API key?"
-                        title="Remove API Key?"
-                      >
-                        <span className="icon-trash" />
-                      </LinkWithConfirmation>
-                    </td>
-                  </tr>
-                );
-              })}
-            </tbody>
-          </table>
-        )}
-
-        {!keyList && (
-          <div className="blankslate well">
-            There are no API keys for this organization.
-          </div>
-        )}
-      </div>
+      <LazyLoad
+        component={() =>
+          getSettingsComponent(
+            () =>
+              import(/*webpackChunkName: "organizationApiKeysList"*/ './organizationApiKeysList'),
+            () =>
+              import(/*webpackChunkName: "organizationApiKeysList.old"*/ './organizationApiKeysList.old'),
+            this.props.routes
+          )}
+        busy={this.state.busy}
+        keys={this.state.keys}
+        organization={this.context.organization}
+        onRemove={this.handleRemove}
+        onAddApiKey={this.handleAddApiKey}
+        {...this.props}
+      />
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/settings/organization/auditLog/auditLogList.jsx b/src/sentry/static/sentry/app/views/settings/organization/auditLog/auditLogList.jsx
new file mode 100644
index 0000000000..5085c0702c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/auditLog/auditLogList.jsx
@@ -0,0 +1,147 @@
+import {Box, Flex} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t} from '../../../../locale';
+import Avatar from '../../../../components/avatar';
+import DateTime from '../../../../components/dateTime';
+import EmptyMessage from '../../components/emptyMessage';
+import Pagination from '../../../../components/pagination';
+import Panel from '../../components/panel';
+import PanelBody from '../../components/panelBody';
+import PanelHeader from '../../components/panelHeader';
+import SelectInput from '../../../../components/selectInput';
+import SettingsPageHeader from '../../components/settingsPageHeader';
+import SpreadLayout from '../../../../components/spreadLayout';
+
+const UserInfo = styled(Box)`
+  display: flex;
+  line-height: 1.2;
+  font-size: 13px;
+  flex: 1;
+`;
+
+const NameContainer = styled.div`
+  display: flex;
+  flex-direction: column;
+  justify-content: center;
+`;
+
+const Name = styled.div`
+  font-weight: 600;
+  font-size: 15px;
+`;
+const Note = styled.div`
+  font-size: 13px;
+`;
+
+const avatarStyle = {
+  width: 36,
+  height: 36,
+  marginRight: 8,
+};
+
+const Row = styled.div`
+  display: flex;
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+  align-items: center;
+
+  &:last-child {
+    border: 0;
+  }
+`;
+
+class AuditLogList extends React.Component {
+  static propTypes = {
+    entries: PropTypes.array,
+    pageLinks: PropTypes.string,
+    eventType: PropTypes.string,
+    eventTypes: PropTypes.arrayOf(PropTypes.string),
+    onEventSelect: PropTypes.func,
+  };
+
+  render() {
+    let {pageLinks, entries, eventType, eventTypes, onEventSelect} = this.props;
+    let hasEntries = entries && entries.length > 0;
+
+    return (
+      <div>
+        <SettingsPageHeader label={t('Audit Log')} />
+
+        <SpreadLayout>
+          <p>{t('Sentry keeps track of important events within your organization.')}</p>
+
+          <form className="form-horizontal" style={{marginBottom: 20}}>
+            <div className="control-group">
+              <div className="controls">
+                <SelectInput
+                  name="event"
+                  onChange={onEventSelect}
+                  value={eventType}
+                  style={{width: 250}}
+                >
+                  <option key="any" value="">
+                    {t('Any')}
+                  </option>
+                  {eventTypes.map(type => {
+                    return <option key={type}>{type}</option>;
+                  })}
+                </SelectInput>
+              </div>
+            </div>
+          </form>
+        </SpreadLayout>
+
+        <Panel>
+          <PanelHeader disablePadding>
+            <Flex align="center">
+              <Box flex="1" pl={2}>
+                {t('Member')}
+              </Box>
+              <Box w={150}>{t('Action')}</Box>
+              <Box w={130}>{t('IP')}</Box>
+              <Box w={150} px={1}>
+                {t('Time')}
+              </Box>
+            </Flex>
+          </PanelHeader>
+
+          <PanelBody>
+            {!hasEntries && (
+              <EmptyMessage>{t('No audit entries available')}</EmptyMessage>
+            )}
+
+            {hasEntries &&
+              entries.map(entry => {
+                return (
+                  <Row key={entry.id}>
+                    <UserInfo flex="1" p={2}>
+                      <div>
+                        {entry.actor.email && (
+                          <Avatar style={avatarStyle} user={entry.actor} />
+                        )}
+                      </div>
+                      <NameContainer>
+                        <Name>{entry.actor.name}</Name>
+                        <Note>{entry.note}</Note>
+                      </NameContainer>
+                    </UserInfo>
+                    <Box w={150}>{entry.event}</Box>
+                    <Box w={130}>{entry.ipAddress}</Box>
+                    <Box w={150} p={1}>
+                      <DateTime date={entry.dateCreated} />
+                    </Box>
+                  </Row>
+                );
+              })}
+          </PanelBody>
+        </Panel>
+
+        {pageLinks && <Pagination pageLinks={pageLinks} {...this.props} />}
+      </div>
+    );
+  }
+}
+
+export default AuditLogList;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/auditLog/auditLogList.old.jsx b/src/sentry/static/sentry/app/views/settings/organization/auditLog/auditLogList.old.jsx
new file mode 100644
index 0000000000..c524c96eb1
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/auditLog/auditLogList.old.jsx
@@ -0,0 +1,98 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t} from '../../../../locale';
+import Avatar from '../../../../components/avatar';
+import DateTime from '../../../../components/dateTime';
+import Pagination from '../../../../components/pagination';
+import SelectInput from '../../../../components/selectInput';
+
+class OrganizationAuditLog extends React.Component {
+  static propTypes = {
+    entries: PropTypes.array,
+    pageLinks: PropTypes.array,
+    eventType: PropTypes.string,
+    eventTypes: PropTypes.arrayOf(PropTypes.string),
+    onEventSelect: PropTypes.func,
+  };
+
+  renderResults() {
+    let {entries} = this.props;
+
+    if (entries.length === 0) {
+      return (
+        <tr>
+          <td colSpan="4">{t('No results found.')}</td>
+        </tr>
+      );
+    }
+
+    return entries.map(entry => {
+      return (
+        <tr key={entry.id}>
+          <td className="table-user-info">
+            {entry.actor.email && <Avatar user={entry.actor} />}
+            <h5>{entry.actor.name}</h5>
+            {entry.note}
+          </td>
+          <td>{entry.event}</td>
+          <td>{entry.ipAddress}</td>
+          <td>
+            <DateTime date={entry.dateCreated} />
+          </td>
+        </tr>
+      );
+    });
+  }
+
+  render() {
+    let {pageLinks, eventType, eventTypes, onEventSelect} = this.props;
+
+    return (
+      <div>
+        <h3>{t('Audit Log')}</h3>
+
+        <div className="pull-right">
+          <form className="form-horizontal" style={{marginBottom: 20}}>
+            <div className="control-group">
+              <div className="controls">
+                <SelectInput
+                  name="event"
+                  onChange={onEventSelect}
+                  value={eventType}
+                  style={{width: 250}}
+                >
+                  <option key="any" value="">
+                    {t('Any')}
+                  </option>
+                  {eventTypes.map(type => {
+                    return <option key={type}>{type}</option>;
+                  })}
+                </SelectInput>
+              </div>
+            </div>
+          </form>
+        </div>
+
+        <p>{t('Sentry keeps track of important events within your organization.')}</p>
+
+        <div className="panel panel-default horizontal-scroll c-b">
+          <table className="table">
+            <thead>
+              <tr>
+                <th>{t('Member')}</th>
+                <th>{t('Action')}</th>
+                <th>{t('IP')}</th>
+                <th>{t('Time')}</th>
+              </tr>
+            </thead>
+            <tbody>{this.renderResults()}</tbody>
+          </table>
+        </div>
+        {pageLinks && <Pagination pageLinks={pageLinks} {...this.props} />}
+      </div>
+    );
+  }
+}
+
+export default OrganizationAuditLog;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/auditLog/auditLogView.jsx b/src/sentry/static/sentry/app/views/settings/organization/auditLog/auditLogView.jsx
new file mode 100644
index 0000000000..2dfb7a1e80
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/auditLog/auditLogView.jsx
@@ -0,0 +1,106 @@
+import {browserHistory} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import LazyLoad from '../../../../components/lazyLoad';
+import OrganizationSettingsView from '../../../organizationSettingsView';
+import SentryTypes from '../../../../proptypes';
+import getSettingsComponent from '../../../../utils/getSettingsComponent';
+
+const EVENT_TYPES = [
+  'member.invite',
+  'member.add',
+  'member.accept-invite',
+  'member.remove',
+  'member.edit',
+  'member.join-team',
+  'member.leave-team',
+  'team.create',
+  'team.edit',
+  'team.remove',
+  'project.create',
+  'project.edit',
+  'project.remove',
+  'project.set-public',
+  'project.set-private',
+  'org.create',
+  'org.edit',
+  'org.remove',
+  'tagkey.remove',
+  'projectkey.create',
+  'projectkey.edit',
+  'projectkey.remove',
+  'projectkey.enable',
+  'projectkey.disable',
+  'sso.enable',
+  'sso.disable',
+  'sso.edit',
+  'sso-identity.link',
+  'api-key.create',
+  'api-key.edit',
+  'api-key.remove',
+].sort();
+
+class AuditLogView extends OrganizationSettingsView {
+  static propTypes = {
+    routes: PropTypes.array,
+  };
+
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+  };
+
+  getEndpoints() {
+    return [
+      [
+        'entryList',
+        `/organizations/${this.props.params.orgId}/audit-logs/`,
+        {
+          query: this.props.location.query,
+        },
+      ],
+    ];
+  }
+
+  getTitle() {
+    let org = this.context.organization;
+    return `${org.name} Audit Log`;
+  }
+
+  handleEventSelect = sel => {
+    let value = sel.val();
+
+    // Dont update if event has not changed
+    if (this.props.location.query.event === value) {
+      return;
+    }
+
+    browserHistory.push({
+      pathname: this.props.location.pathname,
+      search: `?event=${value}`,
+    });
+  };
+
+  renderBody() {
+    let currentEventType = this.props.location.query.event;
+
+    return (
+      <LazyLoad
+        component={() =>
+          getSettingsComponent(
+            () => import(/*webpackChunkName: "auditLogList"*/ './auditLogList'),
+            () => import(/*webpackChunkName: "auditLogList.old"*/ './auditLogList.old'),
+            this.props.routes
+          )}
+        entries={this.state.entryList}
+        pageLinks={this.state.pageLinks}
+        eventType={currentEventType}
+        eventTypes={EVENT_TYPES}
+        onEventSelect={this.handleEventSelect}
+        {...this.props}
+      />
+    );
+  }
+}
+
+export default AuditLogView;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/auth/organizationAuthList.jsx b/src/sentry/static/sentry/app/views/settings/organization/auth/organizationAuthList.jsx
new file mode 100644
index 0000000000..afbb5969d5
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/auth/organizationAuthList.jsx
@@ -0,0 +1,67 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t, tct} from '../../../../locale';
+import ExternalLink from '../../../../components/externalLink';
+import SentryTypes from '../../../../proptypes';
+import ProviderItem from './providerItem';
+
+class OrganizationAuthList extends React.Component {
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+  };
+
+  static propTypes = {
+    onConfigure: PropTypes.func,
+    providerList: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),
+  };
+
+  render() {
+    let {providerList, onConfigure} = this.props;
+    let hasProviderList = providerList && !!providerList.length;
+
+    return (
+      <div className="sso">
+        <h2>{t('Authentication')}</h2>
+
+        <div className="box">
+          <div className="box-header">
+            <h3>{t('Choose a provider')}</h3>
+          </div>
+          <div className="box-content with-padding">
+            <p>
+              {tct(
+                `Get started with Single Sign-on for your organization by selecting a
+              provider. For more information on SSO please see our [link:documentation]`,
+                {
+                  link: <ExternalLink href="https://docs.sentry.io/learn/sso/" />,
+                }
+              )}.
+            </p>
+
+            {hasProviderList && (
+              <ul className="simple-list list-unstyled">
+                {providerList.map(([providerKey, providerName]) => (
+                  <ProviderItem
+                    key={providerKey}
+                    providerKey={providerKey}
+                    providerName={providerName}
+                    onConfigure={onConfigure}
+                  />
+                ))}
+              </ul>
+            )}
+
+            {!hasProviderList && (
+              <p style={{padding: 50, textAlign: 'center'}}>
+                {t('No authentication providers are available.')}
+              </p>
+            )}
+          </div>
+        </div>
+      </div>
+    );
+  }
+}
+
+export default OrganizationAuthList;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/auth/organizationAuthProvider.jsx b/src/sentry/static/sentry/app/views/settings/organization/auth/organizationAuthProvider.jsx
new file mode 100644
index 0000000000..6d46f6472c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/auth/organizationAuthProvider.jsx
@@ -0,0 +1,166 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t, tct} from '../../../../locale';
+import ApiForm from '../../../../components/forms/apiForm';
+import BooleanField from '../../../../components/forms/booleanField';
+import Button from '../../../../components/buttons/button';
+import Select2Field from '../../../../components/forms/select2Field';
+
+const ROLES = [
+  ['member', 'Member'],
+  ['billing', 'Billing'],
+  ['owner', 'Owner'],
+  ['admin', 'Admin'],
+  ['manager', 'Manager'],
+];
+
+class OrganizationAuthProvider extends React.Component {
+  static propTypes = {
+    orgId: PropTypes.string.isRequired,
+    onDisableProvider: PropTypes.func.isRequired,
+    onSendReminders: PropTypes.func.isRequired,
+    sendRemindersBusy: PropTypes.bool,
+    provider: PropTypes.shape({
+      auth_provider: PropTypes.shape({
+        id: PropTypes.string.isRequired,
+        provider: PropTypes.string.isRequired,
+      }),
+      require_link: PropTypes.bool,
+      default_role: PropTypes.string,
+      login_url: PropTypes.string,
+      provider_name: PropTypes.string,
+      pending_links_count: PropTypes.number,
+      content: PropTypes.string,
+    }),
+    disableBusy: PropTypes.bool,
+  };
+
+  static defaultProps = {
+    provider: {},
+    onDisableProvider: () => {},
+    onSendReminders: () => {},
+  };
+
+  render() {
+    let {
+      orgId,
+      provider,
+      sendRemindersBusy,
+      disableBusy,
+      onDisableProvider,
+      onSendReminders,
+    } = this.props;
+
+    if (!provider) return null;
+
+    let {
+      content,
+      login_url: loginUrl,
+      provider_name: providerName,
+      pending_links_count: pendingLinksCount,
+    } = provider;
+
+    return (
+      <div>
+        <h3>{tct('[providerName] Authentication', {providerName})}</h3>
+
+        <div className="box">
+          <div className="box-content with-padding">
+            <legend style={{marginTop: 0}}>{t('Login URL')}</legend>
+
+            <p>
+              {t(
+                `While Sentry will try to be clever about directing members to the
+              appropriate login form, you're safest just to hit up your
+              organization-specific login when visiting the app`
+              )}:
+            </p>
+
+            <pre>
+              <a href={loginUrl}>{loginUrl}</a>
+            </pre>
+
+            {!!pendingLinksCount && (
+              <div>
+                <hr />
+                <h4>{t('Unlinked Members')}</h4>
+
+                <Button
+                  priority="primary"
+                  className="pull-right"
+                  busy={sendRemindersBusy}
+                  onClick={onSendReminders}
+                  style={{marginLeft: 20}}
+                >
+                  {t('Send Reminders')}
+                </Button>
+
+                <p>
+                  {tct(
+                    `There are currently [pendingLinksCount] member(s) who have
+                  not yet linked their account with [providerName]. Until this
+                  is done they will be unable to access the organization.`,
+                    {pendingLinksCount, providerName}
+                  )}
+                </p>
+              </div>
+            )}
+
+            <div dangerouslySetInnerHTML={{__html: content}} />
+
+            <legend>{t('General Settings')}</legend>
+
+            <ApiForm
+              apiMethod="PUT"
+              initialData={provider}
+              apiEndpoint={`/organizations/${orgId}/auth-provider/`}
+              onSubmit={() => {}}
+              submitLabel={t('Save Settings')}
+            >
+              <BooleanField
+                name="require_link"
+                label="Require SSO"
+                help="Require members to use a valid linked SSO account to access this organization"
+              />
+              <Select2Field
+                name="default_role"
+                label="Default Role"
+                choices={ROLES}
+                required
+              />
+            </ApiForm>
+          </div>
+        </div>
+
+        <div className="box">
+          <div className="box-header">
+            <h3>{tct('Disable [providerName] Authentication', {providerName})}</h3>
+          </div>
+
+          <div className="box-content with-padding">
+            <p>
+              {t(
+                `Your organization will no longer being able to authenticate with their
+              existing accounts. This will prevent any existing users from logging in
+              unless they have access outside of SSO.`
+              )}
+            </p>
+
+            <fieldset className="form-actions">
+              <Button
+                priority="danger"
+                disabled={disableBusy}
+                onClick={() => onDisableProvider(providerName)}
+              >
+                {tct('Disable [providerName] Auth', {providerName})}
+              </Button>
+            </fieldset>
+          </div>
+        </div>
+      </div>
+    );
+  }
+}
+
+export default OrganizationAuthProvider;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/auth/organizationAuthView.jsx b/src/sentry/static/sentry/app/views/settings/organization/auth/organizationAuthView.jsx
new file mode 100644
index 0000000000..f8de4893e5
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/auth/organizationAuthView.jsx
@@ -0,0 +1,141 @@
+import {Flex, Box} from 'grid-emotion';
+import React from 'react';
+
+import {t} from '../../../../locale';
+import IndicatorStore from '../../../../stores/indicatorStore';
+// import OrganizationAuthList from './organizationAuthList';
+// import OrganizationAuthProvider from './organizationAuthProvider';
+import OrganizationSettingsView from '../../../organizationSettingsView';
+import Panel from '../../components/panel';
+import PanelBody from '../../components/panelBody';
+import PanelHeader from '../../components/panelHeader';
+import SettingsPageHeader from '../../components/settingsPageHeader';
+import SentryTypes from '../../../../proptypes';
+
+class OrganizationAuthView extends OrganizationSettingsView {
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+  };
+
+  getEndpoints() {
+    return [
+      ['providerList', `/organizations/${this.props.params.orgId}/auth-providers/`],
+      ['provider', `/organizations/${this.props.params.orgId}/auth-provider/`],
+    ];
+  }
+
+  getTitle() {
+    let org = this.context.organization;
+    return `${org.name} - Auth Settings`;
+  }
+
+  handleSendReminders = provider => {
+    this.setState({sendRemindersBusy: true});
+
+    this.api.request(
+      `/organizations/${this.props.params.orgId}/auth-provider/send-reminders/`,
+      {
+        method: 'POST',
+        data: {},
+        success: data => IndicatorStore.add(t('Sent reminders to members'), 'success'),
+        error: err => IndicatorStore.add(t('Failed to send reminders'), 'error'),
+        complete: () => this.setState({sendRemindersBusy: false}),
+      }
+    );
+  };
+
+  // Configure auth provider
+  handleConfigure = provider => {
+    this.setState({
+      busy: true,
+    });
+
+    this.api.request(`/organizations/${this.props.params.orgId}/auth-provider/`, {
+      method: 'POST',
+      data: {provider, init: true},
+      success: data => {
+        // Redirect to auth provider URL
+        if (data && data.auth_url) {
+          window.location.href = data.auth_url;
+        }
+      },
+      error: err => {
+        this.setState({busy: false});
+      },
+    });
+  };
+
+  // Disable auth provider
+  handleDisableProvider = provider => {
+    this.setState({
+      disableBusy: true,
+    });
+
+    this.api.request(`/organizations/${this.props.params.orgId}/auth-provider/`, {
+      method: 'DELETE',
+      data: {provider},
+      success: data => {
+        this.setState({
+          provider: null,
+          disableBusy: false,
+        });
+      },
+      error: err => {
+        this.setState({disableBusy: false});
+      },
+    });
+  };
+
+  renderBody() {
+    let {params} = this.props;
+    let {orgId} = params;
+    // let {providerList, provider, disableBusy, sendRemindersBusy} = this.state;
+
+    return (
+      <div>
+        <SettingsPageHeader label="Authentication" />
+        <Panel>
+          <PanelHeader disablePadding>
+            <Flex>
+              <Box px={2} flex={1}>
+                {t('Providers')}
+              </Box>
+            </Flex>
+          </PanelHeader>
+          <PanelBody>
+            <Box p={2}>
+              Not ready yet, go to <a href={`/organizations/${orgId}/auth/`}>
+                old page
+              </a>{' '}
+              for now.
+            </Box>
+          </PanelBody>
+        </Panel>
+      </div>
+    );
+
+    /*
+    if (provider) {
+      return (
+        <OrganizationAuthProvider
+          orgId={orgId}
+          onDisableProvider={this.handleDisableProvider}
+          onSendReminders={this.handleSendReminders}
+          sendRemindersBusy={sendRemindersBusy}
+          disableBusy={disableBusy}
+          provider={provider}
+        />
+      );
+    }
+
+    return (
+      <OrganizationAuthList
+        providerList={providerList}
+        onConfigure={this.handleConfigure}
+      />
+    );
+  */
+  }
+}
+
+export default OrganizationAuthView;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/auth/providerItem.jsx b/src/sentry/static/sentry/app/views/settings/organization/auth/providerItem.jsx
new file mode 100644
index 0000000000..7e89d1a4bb
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/auth/providerItem.jsx
@@ -0,0 +1,38 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t, tct} from '../../../../locale';
+import Button from '../../../../components/buttons/button';
+
+export default class ProviderItem extends React.PureComponent {
+  static propTypes = {
+    providerKey: PropTypes.string.isRequired,
+    providerName: PropTypes.string.isRequired,
+    onConfigure: PropTypes.func.isRequired,
+  };
+
+  static defaultProps = {
+    onConfigure: () => {},
+  };
+
+  handleConfigure = e => {
+    this.props.onConfigure(this.props.providerKey, e);
+  };
+
+  render() {
+    let {providerKey, providerName} = this.props;
+    return (
+      <li key={providerKey}>
+        <div className={`provider-logo ${providerName.toLowerCase()}`} />
+        <Button onClick={this.handleConfigure} className="pull-right">
+          {t('Configure')}
+        </Button>
+        <h4>{providerName}</h4>
+        <p>
+          {tct('Enable your organization to sign in with [providerName]', {providerName})}
+          .
+        </p>
+      </li>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/organization/general/organizationGeneralSettingsView.jsx b/src/sentry/static/sentry/app/views/settings/organization/general/organizationGeneralSettingsView.jsx
new file mode 100644
index 0000000000..845c264619
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/general/organizationGeneralSettingsView.jsx
@@ -0,0 +1,196 @@
+import {browserHistory} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+import Reflux from 'reflux';
+
+import {
+  changeOrganizationSlug,
+  removeAndRedirectToRemainingOrganization,
+  updateOrganization,
+} from '../../../../actionCreators/organizations';
+import {t, tct} from '../../../../locale';
+import ApiMixin from '../../../../mixins/apiMixin';
+import LinkWithConfirmation from '../../../../components/linkWithConfirmation';
+import LoadingIndicator from '../../../../components/loadingIndicator';
+import OrganizationsStore from '../../../../stores/organizationsStore';
+import SettingsPageHeader from '../../components/settingsPageHeader';
+import getSettingsComponent from '../../../../utils/getSettingsComponent';
+import recreateRoute from '../../../../utils/recreateRoute';
+
+const OrganizationGeneralSettingsView = React.createClass({
+  propTypes: {
+    routes: PropTypes.arrayOf(PropTypes.object),
+  },
+
+  mixins: [ApiMixin, Reflux.connect(OrganizationsStore, 'organizations')],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      data: null,
+    };
+  },
+
+  componentDidMount() {
+    let {routes} = this.props;
+    let fetchForm = getSettingsComponent(
+      () =>
+        import(/*webpackChunkName: "organizationSettingsForm"*/ './organizationSettingsForm'),
+      () =>
+        import(/*webpackChunkName: "organizationSettingsForm.old"*/ './organizationSettingsForm.old'),
+      routes
+    );
+    Promise.all([this.fetchData(), fetchForm]).then(
+      ([data, Form]) => {
+        // Redirect if can't write to org
+        if (
+          data &&
+          data.access.indexOf('org:admin') === -1 &&
+          data.access.indexOf('org:write') === -1
+        ) {
+          browserHistory.push(
+            recreateRoute('teams', {
+              params: this.props.params,
+              routes: this.props.routes,
+              stepBack: -1,
+            })
+          );
+          return;
+        }
+
+        this.setState({data, loading: false, Form});
+      },
+      () => {
+        this.setState({error: true, loading: false});
+      }
+    );
+  },
+
+  fetchData() {
+    return new Promise((resolve, reject) => {
+      this.api.request(`/organizations/${this.props.params.orgId}/`, {
+        method: 'GET',
+        success: data => {
+          resolve(data);
+        },
+        error: () => {
+          reject();
+        },
+      });
+    });
+  },
+
+  handleRemoveOrganization() {
+    let {data} = this.state || {};
+    if (!data) return;
+
+    // Can't remove if this is only org
+    let allOrgs = OrganizationsStore.getAll();
+    if (allOrgs && allOrgs.length < 2) return;
+
+    removeAndRedirectToRemainingOrganization(this.api, {
+      orgId: this.props.params.orgId,
+      successMessage: `${data.name} is queued for deletion.`,
+      errorMessage: `Error removing the ${data && data.name} organization`,
+    });
+  },
+
+  handleSave(prevData, data) {
+    if (data.slug && data.slug !== prevData.slug) {
+      changeOrganizationSlug(prevData, data);
+      browserHistory.push(`/settings/organization/${data.slug}/settings/`);
+    } else {
+      // TODO(dcramer): this should propagate
+      this.setState({data});
+      // Ugh `data` here is different than data in OrganizationsStore
+      updateOrganization(data);
+    }
+  },
+
+  render() {
+    let {data, organizations} = this.state;
+    let orgId = this.props.params.orgId;
+    let access = data && new Set(data.access);
+
+    let hasTeams = data && data.teams && !!data.teams.length;
+    let hasMultipleOrgs = data && organizations.length > 1;
+
+    return (
+      <div>
+        {this.state.loading && <LoadingIndicator />}
+
+        {!this.state.loading &&
+          this.state.Form && (
+            <div>
+              <SettingsPageHeader label={t('Organization Settings')} />
+              <this.state.Form
+                {...this.props}
+                initialData={data}
+                orgId={orgId}
+                access={access}
+                onSave={this.handleSave}
+              />
+
+              {access.has('org:admin') &&
+                !data.isDefault &&
+                hasMultipleOrgs && (
+                  <div className="box">
+                    <div className="box-header">
+                      <h3>{t('Remove Organization')}</h3>
+                    </div>
+                    <div className="box-content with-padding">
+                      <p>
+                        {t(
+                          'Removing this organization will delete all data including projects and their associated events.'
+                        )}
+                      </p>
+
+                      <fieldset className="form-actions">
+                        <LinkWithConfirmation
+                          className="btn btn-danger"
+                          priority="danger"
+                          title={tct('Remove [name] organization', {
+                            name: data && data.name,
+                          })}
+                          message={
+                            <div>
+                              <p>
+                                {tct(
+                                  'Removing the [name] organization is permanent and cannot be undone!',
+                                  {name: data && data.name}
+                                )}
+                              </p>
+
+                              {hasTeams && (
+                                <div>
+                                  <p>
+                                    {t(
+                                      'This will also remove the following teams and all associated projects:'
+                                    )}
+                                  </p>
+                                  <ul>
+                                    {data.teams.map(team => (
+                                      <li key={team.slug}>{team.name}</li>
+                                    ))}
+                                  </ul>
+                                </div>
+                              )}
+                            </div>
+                          }
+                          onConfirm={this.handleRemoveOrganization}
+                        >
+                          {t('Remove Organization')}
+                        </LinkWithConfirmation>
+                      </fieldset>
+                    </div>
+                  </div>
+                )}
+            </div>
+          )}
+      </div>
+    );
+  },
+});
+
+export default OrganizationGeneralSettingsView;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
new file mode 100644
index 0000000000..5230ec0816
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
@@ -0,0 +1,65 @@
+import {Box} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {
+  addErrorMessage,
+  addSuccessMessage,
+} from '../../../../actionCreators/settingsIndicator';
+import ApiMixin from '../../../../mixins/apiMixin';
+import Form from '../../components/forms/form';
+import JsonForm from '../../components/forms/jsonForm';
+import organizationSettingsFields from '../../../../data/forms/organizationGeneralSettings';
+
+const TOAST_DURATION = 10000;
+
+const NewOrganizationSettingsForm = React.createClass({
+  propTypes: {
+    location: PropTypes.object,
+    orgId: PropTypes.string.isRequired,
+    access: PropTypes.object.isRequired,
+    initialData: PropTypes.object.isRequired,
+    onSave: PropTypes.func.isRequired,
+  },
+
+  mixins: [ApiMixin],
+
+  render() {
+    let {initialData, orgId, onSave} = this.props;
+
+    return (
+      <Form
+        apiMethod="PUT"
+        apiEndpoint={`/organizations/${orgId}/`}
+        saveOnBlur
+        allowUndo
+        initialData={initialData}
+        onSubmitSuccess={(change, model, id) => {
+          if (!model) return;
+
+          let label = model.getDescriptor(id, 'label');
+
+          if (!label) return;
+
+          addSuccessMessage(
+            `Changed ${label} from "${change.old}" to "${change.new}"`,
+            TOAST_DURATION,
+            {model, id}
+          );
+
+          // Special case for slug, need to forward to new slug
+          if (typeof onSave === 'function') {
+            onSave(initialData, model.initialData);
+          }
+        }}
+        onSubmitError={() => addErrorMessage('Unable to save change', TOAST_DURATION)}
+      >
+        <Box>
+          <JsonForm location={this.props.location} forms={organizationSettingsFields} />
+        </Box>
+      </Form>
+    );
+  },
+});
+
+export default NewOrganizationSettingsForm;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.old.jsx b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.old.jsx
new file mode 100644
index 0000000000..89d6acfb55
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.old.jsx
@@ -0,0 +1,323 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {extractMultilineFields} from '../../../../utils';
+import {t} from '../../../../locale';
+import ApiMixin from '../../../../mixins/apiMixin';
+import BooleanField from '../../../../components/forms/booleanField';
+import FormState from '../../../../components/forms/state';
+import IndicatorStore from '../../../../stores/indicatorStore';
+import Select2Field from '../../../../components/forms/select2Field';
+import TextField from '../../../../components/forms/textField';
+import TextareaField from '../../../../components/forms/textareaField';
+
+const OldOrganizationSettingsForm = React.createClass({
+  propTypes: {
+    orgId: PropTypes.string.isRequired,
+    access: PropTypes.object.isRequired,
+    initialData: PropTypes.object.isRequired,
+    onSave: PropTypes.func.isRequired,
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      formData: this.buildFormData(this.props.initialData),
+      errors: {},
+      hasChanges: false,
+    };
+  },
+
+  buildFormData(data) {
+    let result = {
+      name: data.name,
+      slug: data.slug,
+      openMembership: data.openMembership,
+      allowSharedIssues: data.allowSharedIssues,
+      isEarlyAdopter: data.isEarlyAdopter,
+      enhancedPrivacy: data.enhancedPrivacy,
+      dataScrubber: data.dataScrubber,
+      dataScrubberDefaults: data.dataScrubberDefaults,
+      scrubIPAddresses: data.scrubIPAddresses,
+      safeFields: data.safeFields.join('\n'),
+      sensitiveFields: data.sensitiveFields.join('\n'),
+    };
+    if (this.props.access.has('org:admin')) {
+      result.defaultRole = data.defaultRole;
+    }
+    return result;
+  },
+
+  onFieldChange(name, value) {
+    let formData = {
+      ...this.state.formData,
+      [name]: value,
+    };
+    this.setState({
+      hasChanges: true,
+      formData,
+    });
+  },
+
+  onSubmit(e) {
+    e.preventDefault();
+
+    if (this.state.state == FormState.SAVING) {
+      return;
+    }
+
+    this.setState(
+      {
+        state: FormState.SAVING,
+        hasChanges: false,
+      },
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        let {orgId} = this.props;
+        let formData = this.state.formData;
+        this.api.request(`/organizations/${orgId}/`, {
+          method: 'PUT',
+          data: {
+            ...formData,
+            safeFields: extractMultilineFields(formData.safeFields),
+            sensitiveFields: extractMultilineFields(formData.sensitiveFields),
+          },
+          success: data => {
+            this.props.onSave(formData, data);
+            this.setState({
+              state: FormState.READY,
+              errors: {},
+            });
+            IndicatorStore.remove(loadingIndicator);
+            IndicatorStore.add(t('Changes saved.'), 'success', {
+              duration: 1500,
+            });
+          },
+          error: error => {
+            this.setState({
+              state: FormState.ERROR,
+              errors: error.responseJSON,
+            });
+            IndicatorStore.remove(loadingIndicator);
+            IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
+              duration: 3000,
+            });
+          },
+        });
+      }
+    );
+  },
+
+  render() {
+    let isSaving = this.state.state === FormState.SAVING;
+    let {errors, formData} = this.state;
+    let {access, initialData} = this.props;
+
+    let sensitiveFieldsHelp = (
+      <span>
+        {t(
+          'Additional field names to match against when scrubbing data for all projects. Separate multiple entries with a newline.'
+        )}
+        <br />
+        <strong>
+          {t('Note: These fields will be used in addition to project specific fields.')}
+        </strong>
+      </span>
+    );
+
+    let safeFieldsHelp = (
+      <span>
+        {t(
+          'Field names which data scrubbers should ignore. Separate multiple entries with a newline.'
+        )}
+        <br />
+        <strong>
+          {t('Note: These fields will be used in addition to project specific fields.')}
+        </strong>
+      </span>
+    );
+
+    return (
+      <div className="box">
+        <div className="box-content with-padding">
+          <form
+            onSubmit={this.onSubmit}
+            className="form-stacked ref-organization-settings"
+          >
+            {this.state.state === FormState.ERROR && (
+              <div className="alert alert-error alert-block">
+                {t(
+                  'Unable to save your changes. Please ensure all fields are valid and try again.'
+                )}
+              </div>
+            )}
+            <fieldset>
+              <legend style={{marginTop: 0}}>{t('General')}</legend>
+
+              <TextField
+                key="name"
+                name="name"
+                label={t('Name')}
+                help={t('The name of your organization. i.e. My Company')}
+                value={formData.name}
+                required={true}
+                error={errors.name}
+                onChange={this.onFieldChange.bind(this, 'name')}
+              />
+              <TextField
+                key="slug"
+                name="slug"
+                label={t('Short name')}
+                value={formData.slug}
+                help={t('A unique ID used to identify this organization.')}
+                required={true}
+                error={errors.slug}
+                onChange={this.onFieldChange.bind(this, 'slug')}
+              />
+              <BooleanField
+                key="isEarlyAdopter"
+                name="isEarlyAdopter"
+                label={t('Early Adopter')}
+                value={formData.isEarlyAdopter}
+                help={t("Opt-in to new features before they're released to the public.")}
+                required={false}
+                error={errors.isEarlyAdopter}
+                onChange={this.onFieldChange.bind(this, 'isEarlyAdopter')}
+              />
+
+              <legend>{t('Membership')}</legend>
+
+              {access.has('org:admin') && (
+                <Select2Field
+                  key="defaultRole"
+                  name="defaultRole"
+                  label={t('Default Role')}
+                  choices={initialData.availableRoles.map(r => [r.id, r.name])}
+                  value={formData.defaultRole}
+                  help={t('The default role new members will receive.')}
+                  required={true}
+                  error={errors.defaultRole}
+                  onChange={this.onFieldChange.bind(this, 'defaultRole')}
+                />
+              )}
+
+              <BooleanField
+                key="openMembership"
+                name="openMembership"
+                label={t('Open Membership')}
+                value={formData.openMembership}
+                help={t('Allow organization members to freely join or leave any team.')}
+                required={true}
+                error={errors.openMembership}
+                onChange={this.onFieldChange.bind(this, 'openMembership')}
+              />
+
+              <legend>{t('Security & Privacy')}</legend>
+
+              <BooleanField
+                key="allowSharedIssues"
+                name="allowSharedIssues"
+                label={t('Allow Shared Issues')}
+                value={formData.allowSharedIssues}
+                help={t(
+                  'Enable sharing of limited details on issues to anonymous users.'
+                )}
+                required={false}
+                error={errors.allowSharedIssues}
+                onChange={this.onFieldChange.bind(this, 'allowSharedIssues')}
+              />
+
+              <BooleanField
+                key="enhancedPrivacy"
+                name="enhancedPrivacy"
+                label={t('Enhanced Privacy')}
+                value={formData.enhancedPrivacy}
+                help={t(
+                  'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.'
+                )}
+                required={false}
+                error={errors.enhancedPrivacy}
+                onChange={this.onFieldChange.bind(this, 'enhancedPrivacy')}
+              />
+
+              <BooleanField
+                key="dataScrubber"
+                name="dataScrubber"
+                label={t('Require Data Scrubber')}
+                value={formData.dataScrubber}
+                help={t(
+                  'Require server-side data scrubbing be enabled for all projects.'
+                )}
+                required={false}
+                error={errors.dataScrubber}
+                onChange={this.onFieldChange.bind(this, 'dataScrubber')}
+              />
+
+              <BooleanField
+                key="dataScrubberDefaults"
+                name="dataScrubberDefaults"
+                label={t('Require Using Default Scrubbers')}
+                value={formData.dataScrubberDefaults}
+                help={t(
+                  'Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects.'
+                )}
+                required={true}
+                error={errors.dataScrubberDefaults}
+                onChange={this.onFieldChange.bind(this, 'dataScrubberDefaults')}
+              />
+
+              <TextareaField
+                key="sensitiveFields"
+                name="sensitiveFields"
+                label={t('Global sensitive fields')}
+                value={formData.sensitiveFields}
+                help={sensitiveFieldsHelp}
+                placeholder={t('e.g. email')}
+                required={false}
+                error={errors.sensitiveFields}
+                onChange={this.onFieldChange.bind(this, 'sensitiveFields')}
+              />
+
+              <TextareaField
+                key="safeFields"
+                name="safeFields"
+                label={t('Global safe fields')}
+                value={formData.safeFields}
+                help={safeFieldsHelp}
+                placeholder={t('e.g. email')}
+                required={false}
+                error={errors.safeFields}
+                onChange={this.onFieldChange.bind(this, 'safeFields')}
+              />
+
+              <BooleanField
+                key="scrubIPAddresses"
+                name="scrubIPAddresses"
+                label={t('Prevent Storing of IP Addresses')}
+                value={formData.scrubIPAddresses}
+                help={t(
+                  'Preventing IP addresses from being stored for new events on all projects.'
+                )}
+                required={false}
+                error={errors.scrubIPAddresses}
+                onChange={this.onFieldChange.bind(this, 'scrubIPAddresses')}
+              />
+            </fieldset>
+            <fieldset className="form-actions">
+              <button
+                type="submit"
+                className="btn btn-primary"
+                disabled={isSaving || !this.state.hasChanges}
+              >
+                {t('Save Changes')}
+              </button>
+            </fieldset>
+          </form>
+        </div>
+      </div>
+    );
+  },
+});
+
+export default OldOrganizationSettingsForm;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/members/organizationAccessRequests.jsx b/src/sentry/static/sentry/app/views/settings/organization/members/organizationAccessRequests.jsx
index 55be648560..801aa33ddb 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/members/organizationAccessRequests.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/members/organizationAccessRequests.jsx
@@ -1,10 +1,21 @@
 import React from 'react';
 import PropTypes from 'prop-types';
+import {Flex, Box} from 'grid-emotion';
+import {withTheme} from 'emotion-theming';
+import styled from 'react-emotion';
 
 import {t, tct} from '../../../../locale';
 import Button from '../../../../components/buttons/button';
+import Panel from '../../components/panel';
+import PanelBody from '../../components/panelBody';
+import SpreadLayout from '../../../../components/spreadLayout';
+import PanelHeader from '../../components/panelHeader';
 import SentryTypes from '../../../../proptypes';
 
+const PendingRow = withTheme(styled(SpreadLayout)`
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+`);
+
 class OrganizationAccessRequests extends React.Component {
   static propTypes = {
     requestList: PropTypes.arrayOf(
@@ -39,51 +50,51 @@ class OrganizationAccessRequests extends React.Component {
     if (!requestList || !requestList.length) return null;
 
     return (
-      <div className="panel panel-default horizontal-scroll">
-        <table className="table" id="access_request_list">
-          <thead>
-            <tr>
-              <th colSpan="2">{t('Pending Access Requests')}</th>
-            </tr>
-          </thead>
+      <Panel>
+        <PanelHeader disablePadding>
+          <Flex>
+            <Box px={2} flex="1">
+              {t('Pending Access Requests')}
+            </Box>
+          </Flex>
+        </PanelHeader>
 
-          <tbody>
-            {requestList.map(({id, member, team}, i) => {
-              let displayName =
-                member.user &&
-                (member.user.name || member.user.email || member.user.username);
-              return (
-                <tr key={i}>
-                  <td>
-                    {tct('[name] requests access to the [team] team.', {
-                      name: <strong>{displayName}</strong>,
-                      team: <strong>{team.name}</strong>,
-                    })}
-                  </td>
-                  <td className="align-right">
-                    <Button
-                      onClick={e => this.handleApprove(id, e)}
-                      busy={accessRequestBusy.get(id)}
-                      priority="primary"
-                      style={{marginRight: 4}}
-                      size="small"
-                    >
-                      {t('Approve')}
-                    </Button>
-                    <Button
-                      busy={accessRequestBusy.get(id)}
-                      onClick={e => this.handleDeny(id, e)}
-                      size="small"
-                    >
-                      {t('Deny')}
-                    </Button>
-                  </td>
-                </tr>
-              );
-            })}
-          </tbody>
-        </table>
-      </div>
+        <PanelBody>
+          {requestList.map(({id, member, team}, i) => {
+            let displayName =
+              member.user &&
+              (member.user.name || member.user.email || member.user.username);
+            return (
+              <PendingRow key={id}>
+                <Box p={2} flex="1">
+                  {tct('[name] requests access to the [team] team.', {
+                    name: <strong>{displayName}</strong>,
+                    team: <strong>{team.name}</strong>,
+                  })}
+                </Box>
+                <Box p={2}>
+                  <Button
+                    onClick={e => this.handleApprove(id, e)}
+                    busy={accessRequestBusy.get(id)}
+                    priority="primary"
+                    style={{marginRight: 4}}
+                    size="small"
+                  >
+                    {t('Approve')}
+                  </Button>
+                  <Button
+                    busy={accessRequestBusy.get(id)}
+                    onClick={e => this.handleDeny(id, e)}
+                    size="small"
+                  >
+                    {t('Deny')}
+                  </Button>
+                </Box>
+              </PendingRow>
+            );
+          })}
+        </PanelBody>
+      </Panel>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/settings/organization/members/organizationMemberDetail.jsx b/src/sentry/static/sentry/app/views/settings/organization/members/organizationMemberDetail.jsx
new file mode 100644
index 0000000000..25782e2e7b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/members/organizationMemberDetail.jsx
@@ -0,0 +1,231 @@
+import {browserHistory} from 'react-router';
+import React from 'react';
+
+import {resendMemberInvite, updateMember} from '../../../../actionCreators/members';
+import {t} from '../../../../locale';
+import AsyncView from '../../../asyncView';
+import Button from '../../../../components/buttons/button';
+import DateTime from '../../../../components/dateTime';
+import IndicatorStore from '../../../../stores/indicatorStore';
+import NotFound from '../../../../components/errors/notFound';
+import recreateRoute from '../../../../utils/recreateRoute';
+import RoleSelect from '../../../inviteMember/roleSelect';
+import SentryTypes from '../../../../proptypes';
+import TeamSelect from '../../../inviteMember/teamSelect';
+
+class OrganizationMemberDetail extends AsyncView {
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+  };
+
+  constructor(...args) {
+    super(...args);
+    let {teams} = this.getOrganization();
+
+    this.state = {
+      ...this.state,
+      selectedTeams: new Set(teams.map(({slug}) => slug)),
+      roleList: [],
+      selectedRole: '',
+      member: null,
+    };
+  }
+
+  getEndpoints() {
+    let {slug} = this.getOrganization();
+    let {params} = this.props;
+    return [['member', `/organizations/${slug}/members/${params.memberId}/`]];
+  }
+
+  getOrganization() {
+    return this.context.organization;
+  }
+
+  redirectToMemberPage() {
+    let members = recreateRoute('members/', {
+      routes: this.props.routes,
+      params: this.props.params,
+      stepBack: -1,
+    });
+    browserHistory.push(members);
+  }
+
+  handleSave = () => {
+    let {slug} = this.getOrganization();
+    let {params} = this.props;
+
+    let indicator = IndicatorStore.add('Saving...');
+    this.setState({busy: true});
+
+    updateMember(this.api, {
+      orgId: slug,
+      memberId: params.memberId,
+      data: this.state.member,
+    })
+      .then(() => {
+        IndicatorStore.add('Saved', 'success', {duration: 5000});
+        let members = recreateRoute('members/', {
+          routes: this.props.routes,
+          params: this.props.params,
+          stepBack: -1,
+        });
+        browserHistory.push(members);
+      })
+      .catch(() => IndicatorStore.add('Could not save...', 'error', {duration: 5000}))
+      .then(() => {
+        IndicatorStore.remove(indicator);
+        this.setState({busy: false});
+      });
+  };
+
+  handleInvite = regenerate => {
+    let {slug} = this.getOrganization();
+    let {params} = this.props;
+
+    let indicator = IndicatorStore.add('Sending invite...');
+    this.setState({busy: true});
+
+    resendMemberInvite(this.api, {
+      orgId: slug,
+      memberId: params.memberId,
+      regenerate,
+    })
+      .then(data => {
+        IndicatorStore.add('Sent invite!', 'success', {duration: 5000});
+        if (regenerate) {
+          this.setState(state => ({member: {...state.member, ...data}}));
+        }
+      })
+      .catch(() => IndicatorStore.add('Could not send invite', 'error', {duration: 5000}))
+      .then(() => {
+        IndicatorStore.remove(indicator);
+        this.setState({busy: false});
+      });
+  };
+
+  handleToggleTeam = slug => {
+    let {member} = this.state;
+    let selectedTeams = new Set(member.teams);
+    if (selectedTeams.has(slug)) {
+      selectedTeams.delete(slug);
+    } else {
+      selectedTeams.add(slug);
+    }
+
+    this.setState({
+      member: {
+        ...member,
+        teams: Array.from(selectedTeams.values()),
+      },
+    });
+  };
+
+  renderBody() {
+    let {error, member} = this.state;
+    let {teams} = this.getOrganization();
+
+    if (!member) return <NotFound />;
+
+    let email = member.email;
+    let inviteLink = member.invite_link;
+
+    return (
+      <div>
+        <div className="page-header">
+          <h3>
+            {member.name}
+            <br />
+            <small>Member Settings</small>
+          </h3>
+        </div>
+
+        {error && error.role && <p className="error alert-error">{error.role}</p>}
+
+        <div className="box">
+          <div className="box-header">
+            <h3>{t('Basics')}</h3>
+          </div>
+
+          <div className="box-content with-padding">
+            <div className="row" style={{marginBottom: '10px'}}>
+              <div className="col-md-6">
+                <div className="control-group">
+                  <label>{t('Email')}</label>
+                  <div className="controls">
+                    <a href={`mailto:${email}`}>{email}</a>
+                  </div>
+                </div>
+              </div>
+              <div className="col-md-3">
+                <div className="control-group">
+                  <label>{t('Status')}</label>
+                  <div className="controls">
+                    {member.pending ? <em>Invitation Pending</em> : 'Active'}
+                  </div>
+                </div>
+              </div>
+              <div className="col-md-3">
+                <div className="control-group">
+                  <label>{t('Added')}</label>
+                  <div className="controls">
+                    <DateTime dateOnly date={member.dateCreated} />
+                  </div>
+                </div>
+              </div>
+            </div>
+
+            {inviteLink && (
+              <div className="form-actions">
+                <div className="control-group">
+                  <label>{t('Invite Link')}</label>
+                  <div className="controls">
+                    <code className="auto-select form-control" style={{overflow: 'auto'}}>
+                      {inviteLink}
+                    </code>
+                  </div>
+                  <p className="help-block">
+                    This unique invite link may only be used by this member.
+                  </p>
+                </div>
+                <div className="align-right">
+                  <Button
+                    style={{marginRight: 10}}
+                    onClick={() => this.handleInvite(true)}
+                  >
+                    {t('Generate New Invite')}
+                  </Button>
+                  <Button onClick={() => this.handleInvite(false)}>
+                    {t('Resend Invite')}
+                  </Button>
+                </div>
+              </div>
+            )}
+          </div>
+        </div>
+
+        <RoleSelect
+          roleList={member.roles}
+          selectedRole={member.role}
+          setRole={slug => this.setState({member: {...member, role: slug}})}
+        />
+
+        <TeamSelect
+          teams={teams}
+          selectedTeams={new Set(member.teams)}
+          toggleTeam={this.handleToggleTeam}
+        />
+
+        <Button
+          priority="primary"
+          busy={this.state.busy}
+          className="invite-member-submit"
+          onClick={this.handleSave}
+        >
+          {t('Save Member')}
+        </Button>
+      </div>
+    );
+  }
+}
+
+export default OrganizationMemberDetail;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/members/organizationMemberRow.jsx b/src/sentry/static/sentry/app/views/settings/organization/members/organizationMemberRow.jsx
index ddc0292de3..ae279bc83f 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/members/organizationMemberRow.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/members/organizationMemberRow.jsx
@@ -1,5 +1,7 @@
+import {Flex, Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
+import styled from 'react-emotion';
 
 import {t, tct} from '../../../../locale';
 import Avatar from '../../../../components/avatar';
@@ -8,15 +10,33 @@ import Confirm from '../../../../components/confirm';
 import Link from '../../../../components/link';
 import LoadingIndicator from '../../../../components/loadingIndicator';
 import SentryTypes from '../../../../proptypes';
+import recreateRoute from '../../../../utils/recreateRoute';
+
+const UserName = styled(Link)`font-size: 16px;`;
+
+const Email = styled.div`
+  color: ${p => p.theme.gray3};
+  font-size: 14px;
+`;
+
+const Row = styled(Flex)`
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+
+  &:last-child {
+    border: 0;
+  }
+`;
+
+const TextCenter = styled.div`text-align: center;`;
 
 export default class OrganizationMemberRow extends React.PureComponent {
   static propTypes = {
+    routes: PropTypes.array,
     // XXX: Spreading this does not work :(
     member: SentryTypes.Member,
     onRemove: PropTypes.func.isRequired,
     onLeave: PropTypes.func.isRequired,
     onSendInvite: PropTypes.func.isRequired,
-    orgId: PropTypes.string.isRequired,
     orgName: PropTypes.string.isRequired,
     memberCanLeave: PropTypes.bool,
     requireLink: PropTypes.bool,
@@ -34,6 +54,8 @@ export default class OrganizationMemberRow extends React.PureComponent {
   handleRemove = e => {
     let {onRemove} = this.props;
 
+    if (typeof onRemove !== 'function') return;
+
     this.setState({busy: true});
     onRemove(this.props.member, e);
   };
@@ -41,6 +63,8 @@ export default class OrganizationMemberRow extends React.PureComponent {
   handleLeave = e => {
     let {onLeave} = this.props;
 
+    if (typeof onLeave !== 'function') return;
+
     this.setState({busy: true});
     onLeave(this.props.member, e);
   };
@@ -48,13 +72,16 @@ export default class OrganizationMemberRow extends React.PureComponent {
   handleSendInvite = e => {
     let {onSendInvite} = this.props;
 
+    if (typeof onSendInvite !== 'function') return;
+
     onSendInvite(this.props.member, e);
   };
 
   render() {
     let {
+      params,
+      routes,
       member,
-      orgId,
       orgName,
       status,
       requireLink,
@@ -75,30 +102,24 @@ export default class OrganizationMemberRow extends React.PureComponent {
     // member has a `user` property if they are registered with sentry
     // i.e. has accepted an invite to join org
     let has2fa = user && user.has2fa;
-    let detailsUrl = `/organizations/${orgId}/members/${id}/`;
+    let detailsUrl = recreateRoute(id, {routes, params});
     let isInviteSuccessful = status === 'success';
     let isInviting = status === 'loading';
 
     return (
-      <tr key={id}>
-        <td className="table-user-info">
-          <Avatar
-            user={
-              user
-                ? user
-                : {
-                    email,
-                  }
-            }
-          />
-          <h5>
-            <Link to={detailsUrl}>{name}</Link>
+      <Row align="center" py={1}>
+        <Box pl={2}>
+          <Avatar style={{width: 32, height: 32}} user={user ? user : {email}} />
+        </Box>
+
+        <Box pl={1} pr={2} flex="1">
+          <h5 style={{margin: '0 0 3px'}}>
+            <UserName to={detailsUrl}>{name}</UserName>
           </h5>
-          {email}
-          <br />
-        </td>
+          <Email>{email}</Email>
+        </Box>
 
-        <td className="status">
+        <Box px={2} w={180}>
           {needsSso || pending ? (
             <div>
               <div>
@@ -132,26 +153,27 @@ export default class OrganizationMemberRow extends React.PureComponent {
                   </Button>
                 )}
             </div>
-          ) : !has2fa ? (
-            <span
-              style={{color: '#B64236'}}
-              className="icon-exclamation tip"
-              title={t('Two-factor auth not enabled')}
-            />
-          ) : null}
-        </td>
-
-        <td className="squash">{roleName}</td>
-        {showRemoveButton || showLeaveButton ? (
-          <td className="align-right squash">
-            <Button
-              style={{marginRight: 4}}
-              size="small"
-              to={`/organizations/${orgId}/members/${id}/`}
-            >
-              {t('Details')}
-            </Button>
+          ) : (
+            <div>
+              {!has2fa ? (
+                <span
+                  style={{color: '#B64236'}}
+                  className="icon-exclamation tip"
+                  title={t('Two-factor auth not enabled')}
+                />
+              ) : (
+                <span style={{color: 'green'}} className="icon-check" />
+              )}
+            </div>
+          )}
+        </Box>
+
+        <Box px={2} w={100}>
+          {roleName}
+        </Box>
 
+        {showRemoveButton || showLeaveButton ? (
+          <Box px={2} w={120}>
             {showRemoveButton &&
               canRemoveMember && (
                 <Confirm
@@ -218,9 +240,9 @@ export default class OrganizationMemberRow extends React.PureComponent {
                   <span className="icon icon-exit" /> {t('Leave')}
                 </Button>
               )}
-          </td>
+          </Box>
         ) : null}
-      </tr>
+      </Row>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/settings/organization/members/organizationMembersView.jsx b/src/sentry/static/sentry/app/views/settings/organization/members/organizationMembersView.jsx
index 1012c86406..6a2b60f283 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/members/organizationMembersView.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/members/organizationMembersView.jsx
@@ -1,21 +1,33 @@
+import {Flex, Box} from 'grid-emotion';
+import {browserHistory} from 'react-router';
+import PropTypes from 'prop-types';
 import React from 'react';
 
 import {t, tct} from '../../../../locale';
 import Button from '../../../../components/buttons/button';
 import ConfigStore from '../../../../stores/configStore';
 import IndicatorStore from '../../../../stores/indicatorStore';
-import SentryTypes from '../../../../proptypes';
-import SpreadLayout from '../../../../components/spreadLayout';
-import OrganizationSettingsView from '../../../organizationSettingsView';
-import OrganizationMemberRow from './organizationMemberRow';
 import OrganizationAccessRequests from './organizationAccessRequests';
+import OrganizationMemberRow from './organizationMemberRow';
+import OrganizationSettingsView from '../../../organizationSettingsView';
+import Panel from '../../components/panel';
+import PanelBody from '../../components/panelBody';
+import PanelHeader from '../../components/panelHeader';
+import SentryTypes from '../../../../proptypes';
+import SettingsPageHeader from '../../components/settingsPageHeader';
+import recreateRoute from '../../../../utils/recreateRoute';
 
 class OrganizationMembersView extends OrganizationSettingsView {
+  static propTypes = {
+    routes: PropTypes.array,
+  };
+
   static contextTypes = {
     organization: SentryTypes.Organization,
   };
 
-  // XXX(billy): careful, setState causes re-render of the entire class hierarchy
+  // XXX(billy): setState causes re-render of the entire view...
+  // we should not do this
   getDefaultState() {
     let state = super.getDefaultState();
     return {
@@ -29,7 +41,17 @@ class OrganizationMembersView extends OrganizationSettingsView {
   getEndpoints() {
     return [
       ['members', `/organizations/${this.props.params.orgId}/members/`],
-      ['authProvider', `/organizations/${this.props.params.orgId}/auth-provider/`],
+      [
+        'authProvider',
+        `/organizations/${this.props.params.orgId}/auth-provider/`,
+        {},
+        {
+          allowError: error => {
+            // Allow for 403s
+            return error.status === 403;
+          },
+        },
+      ],
       ['requestList', `/organizations/${this.props.params.orgId}/access-requests/`],
     ];
   }
@@ -49,7 +71,7 @@ class OrganizationMembersView extends OrganizationSettingsView {
         data: {},
         success: data => {
           this.setState(state => ({
-            members: state.members.filter(member => member.id !== id),
+            members: state.members.filter(({id: existingId}) => existingId !== id),
           }));
           resolve(data);
         },
@@ -73,7 +95,7 @@ class OrganizationMembersView extends OrganizationSettingsView {
         success: data => {
           this.setState(state => ({
             requestList: state.requestList.filter(
-              requestMember => requestMember.id !== id
+              ({id: existingId}) => existingId !== id
             ),
           }));
           resolve(data);
@@ -158,8 +180,27 @@ class OrganizationMembersView extends OrganizationSettingsView {
     });
   };
 
+  handleAddMember = () => {
+    this.setState({
+      busy: true,
+    });
+    this.api.request(`/organizations/${this.props.params.orgId}/members/`, {
+      method: 'POST',
+      data: {},
+      success: data => {
+        this.setState({busy: false});
+        browserHistory.push(
+          `/organizations/${this.props.params.orgId}/members/${data.id}`
+        );
+      },
+      error: () => {
+        this.setState({busy: false});
+      },
+    });
+  };
+
   renderBody() {
-    let {params} = this.props;
+    let {params, routes} = this.props;
     let {members, requestList} = this.state;
     let {organization} = this.context;
     let {orgId} = params || {};
@@ -171,27 +212,27 @@ class OrganizationMembersView extends OrganizationSettingsView {
     let isOnlyOwner = !members.find(
       ({role, email}) => role === 'owner' && email !== currentUser.email
     );
+    // Only admins/owners can remove members
     let requireLink = !!this.state.authProvider && this.state.authProvider.require_link;
 
+    let action = (
+      <Button
+        priority="link"
+        disabled={!canAddMembers}
+        title={
+          !canAddMembers
+            ? t('You do not have enough permission to add new members')
+            : undefined
+        }
+        to={recreateRoute('new', {routes, params})}
+      >
+        <span className="icon-plus" /> {t('Invite Member')}
+      </Button>
+    );
+
     return (
       <div>
-        <SpreadLayout className="page-header">
-          <h3>Members</h3>
-          <Button
-            priority="primary"
-            size="small"
-            className="pull-right"
-            disabled={!canAddMembers}
-            title={
-              !canAddMembers
-                ? t('You do not have enough permission to add new members')
-                : undefined
-            }
-            to={`/organization/${orgId}/members/invite/`}
-          >
-            <span className="icon-plus" /> {t('Invite Member')}
-          </Button>
-        </SpreadLayout>
+        <SettingsPageHeader label="Members" action={action} />
 
         <OrganizationAccessRequests
           onApprove={this.handleApprove}
@@ -200,47 +241,48 @@ class OrganizationMembersView extends OrganizationSettingsView {
           requestList={requestList}
         />
 
-        <div className="panel panel-default horizontal-scroll">
-          <table className="table member-list">
-            <colgroup>
-              <col width="45%" />
-              <col width="15%" />
-              <col width="15%" />
-              <col width="25%" />
-            </colgroup>
-
-            <thead>
-              <tr>
-                <th>{t('Member')}</th>
-                <th>&nbsp;</th>
-                <th className="squash">{t('Role')}</th>
-                <th className="squash">&nbsp;</th>
-              </tr>
-            </thead>
-
-            <tbody>
-              {members.map(member => {
-                return (
-                  <OrganizationMemberRow
-                    key={member.id}
-                    member={member}
-                    status={this.state.invited.get(member.id)}
-                    orgId={orgId}
-                    orgName={orgName}
-                    memberCanLeave={!isOnlyOwner}
-                    currentUser={currentUser}
-                    canRemoveMembers={canRemove}
-                    canAddMembers={canAddMembers}
-                    requireLink={requireLink}
-                    onSendInvite={this.handleSendInvite}
-                    onRemove={this.handleRemove}
-                    onLeave={this.handleLeave}
-                  />
-                );
-              })}
-            </tbody>
-          </table>
-        </div>
+        <Panel>
+          <PanelHeader disablePadding={true}>
+            <Flex align="center">
+              <Box px={2} flex="1">
+                {t('Member')}
+              </Box>
+              <Box px={2} w={180}>
+                {t('Status')}
+              </Box>
+              <Box px={2} w={100}>
+                {t('Role')}
+              </Box>
+              <Box px={2} w={120}>
+                {t('Actions')}
+              </Box>
+            </Flex>
+          </PanelHeader>
+
+          <PanelBody>
+            {members.map(member => {
+              return (
+                <OrganizationMemberRow
+                  routes={routes}
+                  params={params}
+                  key={member.id}
+                  member={member}
+                  status={this.state.invited.get(member.id)}
+                  orgId={orgId}
+                  orgName={orgName}
+                  memberCanLeave={!isOnlyOwner}
+                  currentUser={currentUser}
+                  canRemoveMembers={canRemove}
+                  canAddMembers={canAddMembers}
+                  requireLink={requireLink}
+                  onSendInvite={this.handleSendInvite}
+                  onRemove={this.handleRemove}
+                  onLeave={this.handleLeave}
+                />
+              );
+            })}
+          </PanelBody>
+        </Panel>
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
new file mode 100644
index 0000000000..ebab23a863
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
@@ -0,0 +1,70 @@
+import {t} from '../../../locale';
+
+const pathPrefix = '/settings/organization/:orgId';
+
+const organizationNavigation = [
+  {
+    name: 'Organization',
+    items: [
+      {
+        path: `${pathPrefix}/settings/`,
+        title: 'General Settings',
+        show: ({access}) => access.has('org:write'),
+      },
+      {
+        path: `${pathPrefix}/teams/`,
+        title: t('Projects & Teams'),
+      },
+      {
+        path: `${pathPrefix}/stats/`,
+        title: t('Stats'),
+        show: ({access}) => access.has('org:read'),
+      },
+      {
+        path: `${pathPrefix}/members/`,
+        title: 'Members',
+        // eslint-disable-next-line no-shadow
+        badge: ({organization, access, features}) => {
+          if (!access.has('org:write')) return null;
+          if (organization.pendingAccessRequests <= 0) return null;
+
+          return `${organization.pendingAccessRequests}`;
+        },
+        show: ({access}) => access.has('org:read'),
+      },
+      {
+        path: `${pathPrefix}/auth/`,
+        title: 'Auth',
+        show: ({access, features}) => features.has('sso') && access.has('org:admin'),
+      },
+      {
+        path: `${pathPrefix}/api-keys/`,
+        title: 'API Keys',
+        show: ({access, features}) => features.has('api-keys') && access.has('org:admin'),
+      },
+      {
+        path: `${pathPrefix}/audit-log/`,
+        title: 'Audit Log',
+        show: ({access}) => access.has('org:write'),
+      },
+      {
+        path: `${pathPrefix}/rate-limits/`,
+        title: 'Rate Limits',
+        show: ({access}) => access.has('org:write'),
+      },
+      {
+        path: `${pathPrefix}/repos/`,
+        title: 'Repositories',
+        show: ({access}) => access.has('org:write'),
+      },
+      {
+        path: `${pathPrefix}/integrations/`,
+        title: 'Integrations',
+        show: ({access, features}) =>
+          features.has('integrations-v3') && access.has('org:integrations'),
+      },
+    ],
+  },
+];
+
+export default organizationNavigation;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsLayout.jsx
new file mode 100644
index 0000000000..163e54a37c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsLayout.jsx
@@ -0,0 +1,17 @@
+import React from 'react';
+
+import OrganizationSettingsNavigation from './organizationSettingsNavigation';
+import SettingsLayout from '../settingsLayout';
+
+export default class OrganizationSettingsLayout extends React.Component {
+  render() {
+    return (
+      <SettingsLayout
+        {...this.props}
+        renderNavigation={() => <OrganizationSettingsNavigation {...this.props} />}
+      >
+        {this.props.children}
+      </SettingsLayout>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx
new file mode 100644
index 0000000000..e1b12423f0
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx
@@ -0,0 +1,50 @@
+import Reflux from 'reflux';
+import React from 'react';
+
+import HookStore from '../../../stores/hookStore';
+import OrganizationState from '../../../mixins/organizationState';
+import SettingsNavigation from '../components/settingsNavigation';
+import navigationConfiguration from './navigationConfiguration';
+
+const OrganizationSettingsNavigation = React.createClass({
+  mixins: [OrganizationState, Reflux.listenTo(HookStore, 'handleHooks')],
+
+  handleHooks(name, hooks) {
+    let org = this.getOrganization();
+    if (name !== 'settings:organization-navigation-config') return;
+    this.setState(state => ({
+      hookConfigs: [...state.hookConfigs, ...hooks.map(cb => cb(org))],
+    }));
+  },
+
+  getInitialState() {
+    // Allow injection via getsentry et all
+    let org = this.getOrganization();
+
+    return {
+      hookConfigs: HookStore.get('settings:organization-navigation-config').map(cb =>
+        cb(org)
+      ),
+      hooks: HookStore.get('settings:organization-navigation').map(cb => cb(org)),
+    };
+  },
+
+  render() {
+    let access = this.getAccess();
+    let features = this.getFeatures();
+    let org = this.getOrganization();
+
+    return (
+      <SettingsNavigation
+        navigationObjects={navigationConfiguration}
+        access={access}
+        features={features}
+        organization={org}
+        hooks={this.state.hooks}
+        hookConfigs={this.state.hookConfigs}
+      />
+    );
+  },
+});
+
+export default OrganizationSettingsNavigation;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/projects/components/projectListItem.jsx b/src/sentry/static/sentry/app/views/settings/organization/projects/components/projectListItem.jsx
new file mode 100644
index 0000000000..bfacdcf4f7
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/projects/components/projectListItem.jsx
@@ -0,0 +1,110 @@
+import styled from 'react-emotion';
+import LazyLoad from 'react-lazy-load';
+import React from 'react';
+
+import {update} from '../../../../../actionCreators/projects';
+import ApiMixin from '../../../../../mixins/apiMixin';
+import TooltipMixin from '../../../../../mixins/tooltip';
+import BarChart from '../../../../../components/barChart';
+import Link from '../../../../../components/link';
+import ProjectLabel from '../../../../../components/projectLabel';
+import SentryTypes from '../../../../../proptypes';
+
+const StyledChartCell = styled.td`
+  text-align: right;
+  justify-content: flex-end;
+  width: 200px;
+`;
+
+const ProjectListItem = React.createClass({
+  propTypes: {
+    project: SentryTypes.Project,
+    organization: SentryTypes.Organization,
+  },
+
+  mixins: [
+    ApiMixin,
+    TooltipMixin(function() {
+      return {
+        selector: '.tip',
+        title: function(instance) {
+          return this.getAttribute('data-isbookmarked') === 'true'
+            ? 'Remove from bookmarks'
+            : 'Add to bookmarks';
+        },
+      };
+    }),
+  ],
+
+  getInitialState() {
+    return {
+      bookmarked: null,
+    };
+  },
+
+  componentWillReceiveProps(nextProps) {
+    // Local bookmarked state should be unset when the project data changes
+    // Local state is used for optimistic UI update
+    if (nextProps.project.isBookmarked !== this.props.project.isBookmarked) {
+      this.setState({bookmarked: null});
+    }
+  },
+
+  toggleBookmark() {
+    let {project, organization} = this.props;
+
+    this.setState({bookmarked: !project.isBookmarked}, () =>
+      update(this.api, {
+        orgId: organization.slug,
+        projectId: project.slug,
+        data: {
+          isBookmarked: !project.isBookmarked,
+        },
+      })
+    );
+  },
+
+  render() {
+    let {project, organization} = this.props;
+    let org = organization;
+    let chartData =
+      project.stats &&
+      project.stats.map(point => {
+        return {x: point[0], y: point[1]};
+      });
+    let isBookmarked = this.state.bookmarked || project.isBookmarked;
+
+    return (
+      <tr key={project.id} className={isBookmarked ? 'isBookmarked' : null}>
+        <td>
+          <h5>
+            <a
+              onClick={this.toggleBookmark}
+              className="tip"
+              data-isbookmarked={isBookmarked}
+            >
+              {isBookmarked ? (
+                <span className="icon-star-solid bookmark" />
+              ) : (
+                <span className="icon-star-outline bookmark" />
+              )}
+            </a>
+            <Link to={`/settings/organization/${org.slug}/project/${project.slug}/`}>
+              <ProjectLabel project={project} organization={this.props.organization} />
+            </Link>
+          </h5>
+        </td>
+
+        <StyledChartCell>
+          {chartData && (
+            <LazyLoad>
+              <BarChart height={20} points={chartData} label="events" />
+            </LazyLoad>
+          )}
+        </StyledChartCell>
+      </tr>
+    );
+  },
+});
+
+export default ProjectListItem;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/projects/organizationProjectsView.jsx b/src/sentry/static/sentry/app/views/settings/organization/projects/organizationProjectsView.jsx
new file mode 100644
index 0000000000..59fe96a1aa
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/projects/organizationProjectsView.jsx
@@ -0,0 +1,83 @@
+import React from 'react';
+import Reflux from 'reflux';
+
+import {loadStats} from '../../../../actionCreators/projects';
+import {t} from '../../../../locale';
+import ApiMixin from '../../../../mixins/apiMixin';
+import OrganizationSettingsView from '../../../organizationSettingsView';
+import ProjectListItem from './components/projectListItem';
+import ProjectsStore from '../../../../stores/projectsStore';
+import SentryTypes from '../../../../proptypes';
+import SpreadLayout from '../../../../components/spreadLayout';
+
+class OrganizationProjectsView extends OrganizationSettingsView {
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+  };
+
+  getTitle() {
+    let org = this.context.organization;
+    return `${org.name} Projects`;
+  }
+
+  renderBody() {
+    let {projects} = this.props;
+
+    return (
+      <div>
+        <SpreadLayout className="page-header">
+          <h3>{t('Projects')}</h3>
+        </SpreadLayout>
+
+        <table className="table table-no-top-border m-b-0">
+          <tbody>
+            {projects
+              .sort(({isBookmarked}) => (isBookmarked ? -1 : 1))
+              .map(project => (
+                <ProjectListItem
+                  key={project.slug}
+                  project={project}
+                  organization={this.context.organization}
+                />
+              ))}
+          </tbody>
+        </table>
+      </div>
+    );
+  }
+}
+
+// reflux :(
+const OrganizationProjectsViewContainer = React.createClass({
+  mixins: [ApiMixin, Reflux.listenTo(ProjectsStore, 'onProjectUpdate')],
+
+  getInitialState() {
+    return {
+      projects: Array.from(ProjectsStore.getAll().values()),
+    };
+  },
+
+  componentDidMount() {
+    loadStats(this.api, {
+      orgId: this.props.params.orgId,
+      query: {
+        since: new Date().getTime() / 1000 - 3600 * 24,
+        stat: 'generated',
+        group: 'project',
+      },
+    });
+  },
+
+  onProjectUpdate(projects) {
+    // loadInitialData returns a list of ids
+    this.setState({
+      projects: Array.from(ProjectsStore.getAll().values()),
+    });
+  },
+
+  render() {
+    return <OrganizationProjectsView projects={this.state.projects} />;
+  },
+});
+
+export default OrganizationProjectsViewContainer;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/rateLimit/rateLimitView.jsx b/src/sentry/static/sentry/app/views/settings/organization/rateLimit/rateLimitView.jsx
new file mode 100644
index 0000000000..acdbc09d58
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/rateLimit/rateLimitView.jsx
@@ -0,0 +1,219 @@
+import {Box, Flex} from 'grid-emotion';
+import {withTheme} from 'emotion-theming';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import ApiMixin from '../../../../mixins/apiMixin';
+import IndicatorStore from '../../../../stores/indicatorStore';
+import {RangeField} from '../../../../components/forms';
+import Panel from '../../components/panel';
+import PanelBody from '../../components/panelBody';
+import PanelHeader from '../../components/panelHeader';
+import SettingsPageHeader from '../../components/settingsPageHeader';
+import {t} from '../../../../locale';
+
+const AccountLimit = React.createClass({
+  propTypes: {
+    value: PropTypes.number,
+    onChange: PropTypes.func.isRequired,
+  },
+
+  getRateLimitValues() {
+    let steps = [];
+    let i = 0;
+    while (i <= 1000000) {
+      steps.push(i);
+      if (i < 10000) {
+        i += 1000;
+      } else if (i < 100000) {
+        i += 10000;
+      } else {
+        i += 100000;
+      }
+    }
+    return steps;
+  },
+
+  render() {
+    return (
+      <RangeField
+        name="accountLimit"
+        min={0}
+        max={1000000}
+        value={this.props.value}
+        allowedValues={this.getRateLimitValues()}
+        help="The maximum number of events to accept across this entire organization."
+        placeholder="e.g. 500"
+        onChange={this.props.onChange}
+        inputClassName="col-md-3"
+        formatLabel={value => {
+          return !value ? 'No Limit' : `${value.toLocaleString()} per hour`;
+        }}
+      />
+    );
+  },
+});
+
+const OldFooter = withTheme(styled.div`
+  bordertop: 1px solid ${p => p.theme.borderLight};
+`);
+
+const RateLimitView = React.createClass({
+  propTypes: {
+    organization: PropTypes.object.isRequired,
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    let projectLimit = this.props.organization.quota.projectLimit;
+    let accountLimit = this.props.organization.quota.accountLimit;
+
+    return {
+      activeNav: 'rate-limits',
+      currentProjectLimit: projectLimit,
+      savedProjectLimit: projectLimit,
+      currentAccountLimit: accountLimit,
+      savedAccountLimit: accountLimit,
+      saving: false,
+    };
+  },
+
+  onProjectLimitChange(value) {
+    this.setState({
+      currentProjectLimit: value,
+    });
+  },
+
+  onAccountLimitChange(value) {
+    this.setState({
+      currentAccountLimit: value,
+    });
+  },
+
+  onSubmit(e) {
+    e.preventDefault();
+
+    let loadingIndicator = IndicatorStore.add(t('Saving..'));
+
+    this.setState(
+      {
+        saving: true,
+        error: false,
+      },
+      () => {
+        this.api.request(`/organizations/${this.props.organization.slug}/`, {
+          method: 'PUT',
+          data: {
+            projectRateLimit: this.state.currentProjectLimit,
+            accountRateLimit: this.state.currentAccountLimit,
+          },
+          success: data => {
+            // TODO(dcramer): propagate this change correctly (how??)
+            IndicatorStore.remove(loadingIndicator);
+            this.props.organization.quota = data.quota;
+            this.setState({
+              saving: false,
+              savedProjectLimit: data.quota.projectLimit,
+              savedAccountLimit: data.quota.accountLimit,
+            });
+          },
+          error: () => {
+            this.setState({saving: false});
+            IndicatorStore.remove(loadingIndicator);
+            IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
+              duration: 3000,
+            });
+          },
+        });
+      }
+    );
+  },
+
+  render() {
+    let {
+      currentProjectLimit,
+      savedProjectLimit,
+      currentAccountLimit,
+      savedAccountLimit,
+      saving,
+    } = this.state;
+    let {maxRate, maxRateInterval} = this.props.organization.quota;
+    let canSave =
+      (savedProjectLimit !== currentProjectLimit ||
+        savedAccountLimit !== currentAccountLimit) &&
+      !saving;
+
+    return (
+      <div>
+        <SettingsPageHeader label={t('Rate Limits')} />
+
+        <Panel>
+          <PanelHeader disablePadding>
+            <Flex>
+              <Box px={2} flex="1">
+                {t('Adjust Limits')}
+              </Box>
+            </Flex>
+          </PanelHeader>
+          <PanelBody>
+            <form onSubmit={this.onSubmit} className="ref-rate-limit-editor">
+              <Box p={2}>
+                <p>
+                  Rate limits allow you to control how much data is stored for this
+                  organization. When a rate is exceeded the system will begin discarding
+                  data until the next interval.
+                </p>
+
+                <h5>Account Limit</h5>
+
+                {!maxRate ? (
+                  <AccountLimit
+                    value={currentAccountLimit}
+                    onChange={this.onAccountLimitChange}
+                  />
+                ) : (
+                  <p>
+                    Your account is limited to a maximum of {maxRate} events per{' '}
+                    {maxRateInterval} seconds.
+                  </p>
+                )}
+
+                <h5>Per-Project Limit</h5>
+
+                <RangeField
+                  name="projectLimit"
+                  value={savedProjectLimit || 100}
+                  onChange={this.onProjectLimitChange}
+                  step={5}
+                  min={50}
+                  max={100}
+                  formatLabel={value => {
+                    return value !== 100 ? `${value}%` : 'No Limit &mdash; 100%';
+                  }}
+                />
+
+                <div className="help-block">
+                  {t(
+                    'The maximum percentage of your account limit an individual project can consume.'
+                  )}
+                </div>
+              </Box>
+
+              <OldFooter>
+                <Box p={2}>
+                  <button type="submit" className="btn btn-primary" disabled={!canSave}>
+                    {t('Apply Changes')}
+                  </button>
+                </Box>
+              </OldFooter>
+            </form>
+          </PanelBody>
+        </Panel>
+      </div>
+    );
+  },
+});
+
+export default RateLimitView;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/repositories/addRepositoryLink.jsx b/src/sentry/static/sentry/app/views/settings/organization/repositories/addRepositoryLink.jsx
new file mode 100644
index 0000000000..b6ca860bf9
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/repositories/addRepositoryLink.jsx
@@ -0,0 +1,208 @@
+import Modal from 'react-bootstrap/lib/Modal';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {FormState} from '../../../../components/forms';
+import {parseRepo} from '../../../../utils';
+import {t, tct} from '../../../../locale';
+import PluginComponentBase from '../../../../components/bases/pluginComponentBase';
+
+const UNKNOWN_ERROR = {
+  error_type: 'unknown',
+};
+
+class AddRepositoryLink extends PluginComponentBase {
+  static propTypes = {
+    provider: PropTypes.object.isRequired,
+  };
+
+  constructor(props, context) {
+    super(props, context);
+
+    Object.assign(this.state, {
+      ...this.getDefaultState(),
+      fieldList: null,
+      loading: true,
+      state: FormState.LOADING,
+    });
+
+    ['onOpen', 'onCancel', 'formSubmit', 'changeField'].forEach(method => {
+      this[method] = this[method].bind(this);
+    });
+  }
+
+  getDefaultState() {
+    return {
+      isModalOpen: false,
+      error: {},
+      formData: {},
+    };
+  }
+
+  onOpen() {
+    this.setState({isModalOpen: true});
+  }
+
+  onCancel() {
+    this.setState(this.getDefaultState());
+  }
+
+  formSubmit(ev) {
+    // since this doesn't use the Form component, wrap onSubmit
+    // in a function that calls preventDefault
+    ev.preventDefault();
+    this.onSubmit();
+  }
+
+  onSubmit() {
+    // TODO(dcramer): set form saving state
+    let formData = {
+      ...this.state.formData,
+      provider: this.props.provider.id,
+    };
+    if (formData.name) {
+      formData.name = parseRepo(formData.name);
+    }
+
+    this.setState(
+      {
+        state: FormState.SAVING,
+      },
+      () => {
+        this.api.request(`/organizations/${this.props.orgId}/repos/`, {
+          data: formData,
+          method: 'POST',
+          success: this.onSaveSuccess.bind(this, data => {
+            this.setState({isModalOpen: false, formData: {}, error: {}});
+            this.props.onSuccess(data);
+          }),
+          error: this.onSaveError.bind(this, error => {
+            this.setState({
+              error: error.responseJSON || UNKNOWN_ERROR || UNKNOWN_ERROR,
+              state: FormState.error,
+            });
+          }),
+          complete: this.onSaveComplete,
+        });
+      }
+    );
+  }
+
+  changeField(name, value) {
+    this.setState(state => ({
+      formData: {
+        ...state.formData,
+        [name]: value,
+      },
+    }));
+  }
+
+  renderForm() {
+    let errors = this.state.error.errors || {};
+    let provider = this.props.provider;
+    return (
+      <form onSubmit={this.formSubmit}>
+        {errors.__all__ && (
+          <div className="alert alert-error alert-block" key="_errors">
+            <p>{errors.__all__}</p>
+          </div>
+        )}
+        {provider.config.map(field => {
+          return (
+            <div key={field.name}>
+              {this.renderField({
+                config: field,
+                formData: this.state.formData,
+                formErrors: errors,
+                onChange: this.changeField.bind(this, field.name),
+              })}
+            </div>
+          );
+        })}
+      </form>
+    );
+  }
+
+  renderBody() {
+    let error = this.state.error;
+    if (error.error_type === 'auth') {
+      let authUrl = error.auth_url;
+      if (authUrl.indexOf('?') === -1) {
+        authUrl += '?next=' + encodeURIComponent(document.location.pathname);
+      } else {
+        authUrl += '&next=' + encodeURIComponent(document.location.pathname);
+      }
+      return (
+        <div>
+          <div className="alert alert-warning m-b-1">
+            {'You need to associate an identity with ' +
+              this.props.provider.name +
+              ' before you can create issues with this service.'}
+          </div>
+          <a className="btn btn-primary" href={authUrl}>
+            Associate Identity
+          </a>
+        </div>
+      );
+    } else if (error.error_type && error.error_type !== 'validation') {
+      return (
+        <div className="alert alert-error alert-block">
+          <p>
+            {error.message
+              ? error.message
+              : tct(
+                  'An unknown error occurred. Need help with this? [link:Contact support]',
+                  {
+                    link: <a href="https://sentry.io/support/" />,
+                  }
+                )}
+          </p>
+        </div>
+      );
+    }
+    return this.renderForm();
+  }
+
+  renderModal() {
+    let {error, state} = this.state;
+    return (
+      <Modal show={this.state.isModalOpen} animation={false}>
+        <div className="modal-header">
+          <h4>{t('Add Repository')}</h4>
+        </div>
+        <div className="modal-body">{this.renderBody()}</div>
+        {!error || error.error_type !== 'unknown' || error.message ? (
+          <div className="modal-footer">
+            <button
+              type="button"
+              className="btn btn-default"
+              onClick={this.onCancel}
+              disabled={state === FormState.SAVING}
+            >
+              {t('Cancel')}
+            </button>
+            <button
+              type="button"
+              className="btn btn-primary"
+              onClick={this.onSubmit}
+              disabled={state === FormState.SAVING}
+            >
+              {t('Save Changes')}
+            </button>
+          </div>
+        ) : null}
+      </Modal>
+    );
+  }
+
+  render() {
+    let provider = this.props.provider;
+    return (
+      <a onClick={this.onOpen}>
+        {provider.name}
+        {this.renderModal()}
+      </a>
+    );
+  }
+}
+export default AddRepositoryLink;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/repositories/organizationRepositories.jsx b/src/sentry/static/sentry/app/views/settings/organization/repositories/organizationRepositories.jsx
new file mode 100644
index 0000000000..b40f921f4a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/repositories/organizationRepositories.jsx
@@ -0,0 +1,191 @@
+import {Box, Flex} from 'grid-emotion';
+import {withTheme} from 'emotion-theming';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t, tct} from '../../../../locale';
+import Button from '../../../../components/buttons/button';
+import Confirm from '../../../../components/confirm';
+import DropdownLink from '../../../../components/dropdownLink';
+import MenuItem from '../../../../components/menuItem';
+import SpreadLayout from '../../../../components/spreadLayout';
+import Panel from '../../components/panel';
+import PanelBody from '../../components/panelBody';
+import PanelHeader from '../../components/panelHeader';
+import SettingsPageHeader from '../../components/settingsPageHeader';
+import AddRepositoryLink from './addRepositoryLink';
+
+const RepoRow = withTheme(styled(SpreadLayout)`
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+
+  &:last-child {
+    border-bottom: none;
+  }
+`);
+
+class OrganizationRepositories extends React.Component {
+  static propTypes = {
+    itemList: PropTypes.array,
+    repoConfig: PropTypes.object,
+    onAddRepo: PropTypes.func,
+    onCancelDelete: PropTypes.func,
+    onDeleteRepo: PropTypes.func,
+  };
+
+  getStatusLabel(repo) {
+    switch (repo.status) {
+      case 'pending_deletion':
+        return 'Deletion Queued';
+      case 'deletion_in_progress':
+        return 'Deletion in Progress';
+      case 'hidden':
+        return 'Disabled';
+      default:
+        return null;
+    }
+  }
+
+  render() {
+    let {
+      params,
+      itemList,
+      repoConfig,
+      onAddRepo,
+      onCancelDelete,
+      onDeleteRepo,
+    } = this.props;
+    let {orgId} = params;
+    let hasItemList = itemList && itemList.length > 0;
+
+    // let action = (
+    //   <Button priority="link" onClick={onAddRepo}>
+    //   </Button>
+    // );
+
+    return (
+      <div>
+        <SettingsPageHeader
+          label={t('Repositories')}
+          action={
+            <DropdownLink
+              anchorRight
+              className="btn btn-primary btn-sm"
+              title={t('Add Repository')}
+            >
+              {repoConfig &&
+                repoConfig.providers &&
+                repoConfig.providers.map(provider => {
+                  return (
+                    <MenuItem noAnchor={true} key={provider.id}>
+                      <AddRepositoryLink
+                        provider={provider}
+                        orgId={orgId}
+                        onSuccess={onAddRepo}
+                      />
+                    </MenuItem>
+                  );
+                })}
+            </DropdownLink>
+          }
+        />
+
+        {!hasItemList && (
+          <div className="m-b-2">
+            <p>
+              {t(
+                'Connecting a repository allows Sentry to capture commit data via webhooks. ' +
+                  'This enables features like suggested assignees and resolving issues via commit message. ' +
+                  "Once you've connected a repository, you can associate commits with releases via the API."
+              )}
+              &nbsp;
+              {tct('See our [link:documentation] for more details.', {
+                link: <a href="https://docs.sentry.io/learn/releases/" />,
+              })}
+            </p>
+          </div>
+        )}
+
+        {hasItemList ? (
+          <Panel>
+            <PanelHeader disablePadding={true}>
+              <Flex>
+                <Box px={2}>{t('Added Repositories')}</Box>
+              </Flex>
+            </PanelHeader>
+            <PanelBody>
+              <Box>
+                {itemList.map(repo => {
+                  let repoIsVisible = repo.status === 'visible';
+                  return (
+                    <RepoRow key={repo.id}>
+                      <Box p={2} flex="1">
+                        <Flex direction="column">
+                          <Box pb={1}>
+                            <strong>{repo.name}</strong>
+                            {!repoIsVisible && (
+                              <small> — {this.getStatusLabel(repo)}</small>
+                            )}
+                            {repo.status === 'pending_deletion' && (
+                              <small>
+                                {' '}
+                                (
+                                <a onClick={() => onCancelDelete(repo)}>{t('Cancel')}</a>
+                                )
+                              </small>
+                            )}
+                          </Box>
+                          <Box>
+                            <small>{repo.provider.name}</small>
+                            {repo.url && (
+                              <small>
+                                {' '}
+                                — <a href={repo.url}>{repo.url}</a>
+                              </small>
+                            )}
+                          </Box>
+                        </Flex>
+                      </Box>
+
+                      <Box p={2}>
+                        <Confirm
+                          disabled={!repoIsVisible}
+                          onConfirm={() => onDeleteRepo(repo)}
+                          message={t('Are you sure you want to remove this repository?')}
+                        >
+                          <Button size="xsmall">
+                            <span className="icon icon-trash" />
+                          </Button>
+                        </Confirm>
+                      </Box>
+                    </RepoRow>
+                  );
+                })}
+              </Box>
+            </PanelBody>
+          </Panel>
+        ) : (
+          <div className="well blankslate align-center p-x-2 p-y-1">
+            <div className="icon icon-lg icon-git-commit" />
+            <h3>{t('Sentry is better with commit data')}</h3>
+            <p>
+              {t(
+                'Adding one or more repositories will enable enhanced releases and the ability to resolve Sentry Issues via git message.'
+              )}
+            </p>
+            <p className="m-b-1">
+              <a
+                className="btn btn-default"
+                href="https://docs.sentry.io/learn/releases/"
+              >
+                Learn more
+              </a>
+            </p>
+          </div>
+        )}
+      </div>
+    );
+  }
+}
+
+export default OrganizationRepositories;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/stats/organizationStats.jsx b/src/sentry/static/sentry/app/views/settings/organization/stats/organizationStats.jsx
new file mode 100644
index 0000000000..f135c9f824
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/stats/organizationStats.jsx
@@ -0,0 +1,129 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import LoadingError from '../../../../components/loadingError';
+import LoadingIndicator from '../../../../components/loadingIndicator';
+import StackedBarChart from '../../../../components/stackedBarChart';
+import Pagination from '../../../../components/pagination';
+import SettingsPageHeader from '../../components/settingsPageHeader';
+
+import ProjectTable from './projectTable';
+import {t} from '../../../../locale';
+import {intcomma} from '../../../../utils';
+
+class OrganizationStats extends React.Component {
+  static propTypes = {
+    statsLoading: PropTypes.bool,
+    projectsLoading: PropTypes.bool,
+    orgTotal: PropTypes.object,
+    statsError: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
+    orgStats: PropTypes.array,
+    projectTotals: PropTypes.array,
+    projectMap: PropTypes.object,
+    projectsError: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
+    pageLinks: PropTypes.string,
+    organization: PropTypes.object,
+  };
+
+  renderTooltip(point, pointIdx, chart) {
+    let timeLabel = chart.getTimeLabel(point);
+    let [accepted, rejected, blacklisted] = point.y;
+
+    let value = `${intcomma(accepted)} accepted`;
+    if (rejected) {
+      value += `<br>${intcomma(rejected)} rate limited`;
+    }
+    if (blacklisted) {
+      value += `<br>${intcomma(blacklisted)} filtered`;
+    }
+
+    return (
+      '<div style="width:150px">' +
+      `<div class="time-label">${timeLabel}</div>` +
+      `<div class="value-label">${value}</div>` +
+      '</div>'
+    );
+  }
+
+  render() {
+    let {
+      statsLoading,
+      orgTotal,
+      statsError,
+      orgStats,
+      projectsLoading,
+      projectTotals,
+      projectMap,
+      projectsError,
+      pageLinks,
+      organization,
+    } = this.props;
+
+    return (
+      <div>
+        <SettingsPageHeader label={t('Organization Stats')} />
+        <div className="row">
+          <div className="col-md-9">
+            <p>
+              {t(
+                `The chart below reflects events the system has received
+            across your entire organization. Events are broken down into
+            three categories: Accepted, Rate Limited, and Filtered. Rate
+            Limited events are entries that the system threw away due to quotas
+            being hit, and Filtered events are events that were blocked
+            due to your inbound data filter rules.`
+              )}
+            </p>
+          </div>
+          {!statsLoading && (
+            <div className="col-md-3 stats-column">
+              <h6 className="nav-header">{t('Events per minute')}</h6>
+              <p className="count">{orgTotal.avgRate}</p>
+            </div>
+          )}
+        </div>
+        <div className="organization-stats">
+          {statsLoading ? (
+            <LoadingIndicator />
+          ) : statsError ? (
+            <LoadingError onRetry={this.fetchData} />
+          ) : (
+            <div className="bar-chart">
+              <StackedBarChart
+                points={orgStats}
+                height={150}
+                label="events"
+                className="standard-barchart"
+                barClasses={['accepted', 'rate-limited', 'black-listed']}
+                tooltip={this.renderTooltip}
+              />
+            </div>
+          )}
+        </div>
+
+        <div className="box">
+          <div className="box-header">
+            <h3>{t('Events by Project')}</h3>
+          </div>
+          <div className="box-content">
+            {statsLoading || projectsLoading ? (
+              <LoadingIndicator />
+            ) : projectsError ? (
+              <LoadingError onRetry={this.fetchData} />
+            ) : (
+              <ProjectTable
+                projectTotals={projectTotals}
+                orgTotal={orgTotal}
+                organization={organization}
+                projectMap={projectMap}
+              />
+            )}
+          </div>
+        </div>
+        {pageLinks && <Pagination pageLinks={pageLinks} {...this.props} />}
+      </div>
+    );
+  }
+}
+
+export default OrganizationStats;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/stats/projectTable.jsx b/src/sentry/static/sentry/app/views/settings/organization/stats/projectTable.jsx
new file mode 100644
index 0000000000..c7e75eab7d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/stats/projectTable.jsx
@@ -0,0 +1,107 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import {Link} from 'react-router';
+import PureRenderMixin from 'react-addons-pure-render-mixin';
+
+import Count from '../../../../components/count';
+import {t} from '../../../../locale';
+
+let getPercent = (item, total) => {
+  if (total === 0) {
+    return '';
+  }
+  if (item === 0) {
+    return '0%';
+  }
+  return parseInt(item / total * 100, 10) + '%';
+};
+
+const ProjectTable = React.createClass({
+  propTypes: {
+    projectMap: PropTypes.object.isRequired,
+    projectTotals: PropTypes.array.isRequired,
+    orgTotal: PropTypes.object.isRequired,
+    organization: PropTypes.object.isRequired,
+  },
+
+  mixins: [PureRenderMixin],
+
+  render() {
+    let projectMap = this.props.projectMap;
+    let projectTotals = this.props.projectTotals;
+    let orgTotal = this.props.orgTotal;
+    let org = this.props.organization;
+
+    if (!projectTotals) {
+      return <div />;
+    }
+
+    // Sort based on # events received in desc order
+    projectTotals.sort((a, b) => {
+      return b.received - a.received;
+    });
+
+    return (
+      <table className="table m-b-0">
+        <thead>
+          <tr>
+            <th>{t('Project')}</th>
+            <th className="align-right">{t('Accepted')}</th>
+            <th className="align-right">
+              {t('Dropped')}
+              <br />
+              {t('(Rate Limit)')}
+            </th>
+            <th className="align-right">
+              {t('Dropped')}
+              <br />
+              {t('(Filters)')}
+            </th>
+            <th className="align-right">{t('Total')}</th>
+          </tr>
+        </thead>
+        <tbody>
+          {projectTotals.map(item => {
+            let project = projectMap[item.id];
+
+            if (!project) {
+              return null;
+            }
+
+            return (
+              <tr key={item.id}>
+                <td>
+                  <Link to={`/${org.slug}/${project.slug}/`}>
+                    {project.team.name} / {project.name}
+                  </Link>
+                </td>
+                <td className="align-right">
+                  <Count value={item.accepted} />
+                  <br />
+                  <small>{getPercent(item.accepted, orgTotal.accepted)}</small>
+                </td>
+                <td className="align-right">
+                  <Count value={item.rejected} />
+                  <br />
+                  <small>{getPercent(item.rejected, orgTotal.rejected)}</small>
+                </td>
+                <td className="align-right">
+                  <Count value={item.blacklisted} />
+                  <br />
+                  <small>{getPercent(item.blacklisted, orgTotal.blacklisted)}</small>
+                </td>
+                <td className="align-right">
+                  <Count value={item.received} />
+                  <br />
+                  <small>{getPercent(item.received, orgTotal.received)}</small>
+                </td>
+              </tr>
+            );
+          })}
+        </tbody>
+      </table>
+    );
+  },
+});
+
+export default ProjectTable;
diff --git a/src/sentry/static/sentry/app/views/settings/project/navgationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/project/navgationConfiguration.jsx
new file mode 100644
index 0000000000..d210625fcb
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/navgationConfiguration.jsx
@@ -0,0 +1,100 @@
+import {t} from '../../../locale';
+
+const pathPrefix = '/settings/organization/:orgId/project/:projectId';
+
+export default function getConfiguration({project}) {
+  let plugins = ((project && project.plugins) || []).filter(plugin => plugin.enabled);
+
+  return [
+    {
+      name: t('Configuration'),
+      items: [
+        {
+          path: `${pathPrefix}/settings/`,
+          title: t('General (needs react)'),
+        },
+        {
+          path: `${pathPrefix}/alerts/`,
+          title: t('Alerts'),
+        },
+        {
+          path: `${pathPrefix}/quotas/`,
+          title: t('Rate Limits (needs react)'),
+          show: ({features}) => features.has('quotas'),
+        },
+        {
+          path: `${pathPrefix}/tags/`,
+          title: t('Tags'),
+        },
+        {
+          path: `${pathPrefix}/issue-tracking/`,
+          title: t('Issue Tracking (needs react)'),
+        },
+        {
+          path: `${pathPrefix}/release-tracking/`,
+          title: t('Release Tracking'),
+          show: ({access}) => access.has('project:write'),
+        },
+        {
+          path: `${pathPrefix}/data-forwarding/`,
+          title: t('Data Forwarding'),
+        },
+        {
+          path: `${pathPrefix}/saved-searches/`,
+          title: t('Saved Searches'),
+        },
+        {
+          path: `${pathPrefix}/debug-symbols/`,
+          title: t('Debug Information Files'),
+        },
+        {
+          path: `${pathPrefix}/processing-issues/`,
+          title: t('Processing Issues'),
+          // eslint-disable-next-line no-shadow
+          badge: ({project}) => {
+            if (project.processingIssues <= 0) return null;
+            return project.processingIssues > 99 ? '99+' : project.processingIssues;
+          },
+        },
+      ],
+    },
+    {
+      name: t('Data'),
+      items: [
+        {
+          path: `${pathPrefix}/install/`,
+          title: t('Error Tracking'),
+        },
+        {
+          path: `${pathPrefix}/csp/`,
+          title: t('CSP Reports'),
+        },
+        {
+          path: `${pathPrefix}/user-feedback/`,
+          title: t('User Feedback'),
+        },
+        {
+          path: `${pathPrefix}/filters/`,
+          title: t('Inbound Filters'),
+        },
+        {
+          path: `${pathPrefix}/keys/`,
+          title: t('Client Keys (DSN)'),
+        },
+      ],
+    },
+    {
+      name: t('Integrations'),
+      items: [
+        {
+          path: `${pathPrefix}/plugins/`,
+          title: t('All Integrations (needs react)'),
+        },
+        ...plugins.map(plugin => ({
+          path: `${pathPrefix}/plugins/${plugin.id}/`,
+          title: plugin.name,
+        })),
+      ],
+    },
+  ];
+}
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectSettingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/project/projectSettingsLayout.jsx
new file mode 100644
index 0000000000..7052ccdae9
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectSettingsLayout.jsx
@@ -0,0 +1,33 @@
+import React from 'react';
+
+import ProjectContext from '../../projects/projectContext';
+import ProjectSettingsNavigation from './projectSettingsNavigation';
+import SettingsLayout from '../settingsLayout';
+import SentryTypes from '../../../proptypes';
+
+class ProjectSettingsLayout extends React.Component {
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+  };
+
+  render() {
+    let {orgId, projectId} = this.props.params;
+
+    return (
+      <ProjectContext {...this.props.params} orgId={orgId} projectId={projectId}>
+        <SettingsLayout
+          {...this.props}
+          renderNavigation={() => <ProjectSettingsNavigation {...this.props} />}
+        >
+          {this.props.children &&
+            React.cloneElement(this.props.children, {
+              organization: this.context.organization,
+              setProjectNavSection: () => {},
+            })}
+        </SettingsLayout>
+      </ProjectContext>
+    );
+  }
+}
+
+export default ProjectSettingsLayout;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx
new file mode 100644
index 0000000000..01ca234e9b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx
@@ -0,0 +1,43 @@
+import React from 'react';
+
+import HookStore from '../../../stores/hookStore';
+import ProjectState from '../../../mixins/projectState';
+import SettingsNavigation from '../components/settingsNavigation';
+import getConfiguration from './navgationConfiguration';
+
+const ProjectSettingsNavigation = React.createClass({
+  mixins: [ProjectState],
+
+  getInitialState() {
+    // Allow injection via getsentry et all
+    let org = this.getOrganization();
+    let hooks = [];
+    HookStore.get('project:settings-sidebar').forEach(cb => {
+      hooks.push(cb(org));
+    });
+
+    return {
+      hooks,
+    };
+  },
+
+  render() {
+    let access = this.getAccess();
+    let features = this.getFeatures();
+    let org = this.getOrganization();
+    let project = this.getProject();
+
+    return (
+      <SettingsNavigation
+        navigationObjects={getConfiguration(project)}
+        access={access}
+        features={features}
+        organization={org}
+        project={project}
+        hooks={this.state.hooks}
+      />
+    );
+  },
+});
+
+export default ProjectSettingsNavigation;
diff --git a/src/sentry/static/sentry/app/views/settings/settingsIndex.jsx b/src/sentry/static/sentry/app/views/settings/settingsIndex.jsx
new file mode 100644
index 0000000000..ecd49b0855
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/settingsIndex.jsx
@@ -0,0 +1,309 @@
+import {Flex, Box} from 'grid-emotion';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t} from '../../locale';
+import ConfigStore from '../../stores/configStore';
+import ExternalLink from '../../components/externalLink';
+import IconDocs from '../../icons/icon-docs';
+import IconLaptop from '../../icons/icon-laptop';
+import IconLock from '../../icons/icon-lock';
+import IconStack from '../../icons/icon-stack';
+import IconSupport from '../../icons/icon-support';
+import IconUser from '../../icons/icon-user';
+import Link from '../../components/link';
+import LoadingIndicator from '../../components/loadingIndicator';
+import Panel from './components/panel';
+import PanelBody from './components/panelBody';
+import PanelHeader from './components/panelHeader';
+import SentryTypes from '../../proptypes';
+import SettingsLayout from './settingsLayout';
+import withLatestContext from '../../utils/withLatestContext';
+
+const LINKS = {
+  DOCUMENTATION: 'https://docs.sentry.io/',
+  DOCUMENTATION_PLATFORMS: 'https://docs.sentry.io/clients/',
+  DOCUMENATATION_QUICKSTART: 'https://docs.sentry.io/quickstart/',
+  DOCUMENTATION_CLI: 'https://docs.sentry.io/learn/cli/',
+  DOCUMENTATION_API: 'https://docs.sentry.io/hosted/api/',
+  API: '/api/',
+  API_APPLICATION: '/api/application/',
+  MANAGE: '/manage/',
+  FORUM: 'https://forum.sentry.io/',
+  GITHUB_ISSUES: 'https://github.com/getsentry/sentry/issues',
+  SERVICE_STATUS: 'https://status.sentry.io/',
+};
+
+const HomePanelHeader = styled(PanelHeader)`
+  background: #fff;
+  text-align: center;
+  font-size: 18px;
+  text-transform: unset;
+  padding: 35px 30px;
+`;
+
+const HomePanelBody = styled(PanelBody)`
+  padding: 30px;
+
+  h3 {
+    font-size: 14px;
+  }
+
+  ul {
+    margin: 0;
+    li {
+      line-height: 1.6;
+      /* Bullet color */
+      color: ${p => p.theme.gray1};
+    }
+  }
+`;
+
+const HomeIcon = styled.div`
+  background: ${p => p.theme[p.color || 'gray2']};
+  color: #fff;
+  width: 76px;
+  height: 76px;
+  border-radius: 76px;
+  margin: 0 auto 20px;
+  > svg {
+    margin-top: 14px;
+  }
+`;
+
+const HomeLink = styled(Link)`
+  color: ${p => p.theme.purple};
+
+  &:hover {
+    color: ${p => p.theme.purpleDark};
+  }
+`;
+
+const ExternalHomeLink = styled(ExternalLink)`
+  color: ${p => p.theme.purple};
+
+  &:hover {
+    color: ${p => p.theme.purpleDark};
+  }
+`;
+
+class SettingsIndex extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization,
+  };
+
+  render() {
+    let {organization} = this.props;
+    let user = ConfigStore.get('user');
+    let isOnPremise = ConfigStore.get('isOnPremise');
+    let isSuperuser = user.isSuperuser;
+
+    let organizationSettingsUrl =
+      (organization && `/settings/organization/${organization.slug}/`) || '';
+
+    let supportLinkProps = isOnPremise
+      ? {href: LINKS.FORUM}
+      : {to: `${organizationSettingsUrl}support`};
+    let supportText = isOnPremise ? t('Community Forums') : t('Contact Support');
+    let SupportLinkComponent = isOnPremise ? ExternalHomeLink : HomeLink;
+
+    return (
+      <SettingsLayout {...this.props}>
+        <Flex mx={-2} wrap>
+          <Box w={1 / 3} px={2}>
+            <Panel>
+              <HomePanelHeader>
+                <HomeLink href="/account/settings/">
+                  <HomeIcon color="blue">
+                    <IconUser size={44} />
+                  </HomeIcon>
+                  {t('My Account')}
+                </HomeLink>
+              </HomePanelHeader>
+
+              <HomePanelBody>
+                <h3>{t('Quick links')}:</h3>
+                <ul>
+                  <li>
+                    <HomeLink href="/account/settings/">
+                      {t('Change my password')}
+                    </HomeLink>
+                  </li>
+                  <li>
+                    <HomeLink href="/account/settings/notifications/">
+                      {t('Notification Preferences')}
+                    </HomeLink>
+                  </li>
+                  <li>
+                    <HomeLink href="/account/settings/avatar/">
+                      {t('Change my avatar')}
+                    </HomeLink>
+                  </li>
+                </ul>
+              </HomePanelBody>
+            </Panel>
+          </Box>
+
+          <Box w={1 / 3} px={2}>
+            {/* if admin */}
+            <Panel>
+              {!organization && <LoadingIndicator overlay />}
+              <HomePanelHeader>
+                <HomeLink to={organizationSettingsUrl}>
+                  <HomeIcon color="green">
+                    <IconStack size={44} />
+                  </HomeIcon>
+                  {organization ? organization.name : t('Organization')}
+                </HomeLink>
+              </HomePanelHeader>
+              <HomePanelBody>
+                <h3>{t('Quick links')}:</h3>
+                <ul>
+                  <li>
+                    <HomeLink to={`${organizationSettingsUrl}teams/`}>
+                      {t('Projects & Teams')}
+                    </HomeLink>
+                  </li>
+                  <li>
+                    <HomeLink to={`${organizationSettingsUrl}members/`}>
+                      {t('Members')}
+                    </HomeLink>
+                  </li>
+                  <li>
+                    <HomeLink to={`${organizationSettingsUrl}stats/`}>
+                      {t('Stats')}
+                    </HomeLink>
+                  </li>
+                </ul>
+              </HomePanelBody>
+            </Panel>
+          </Box>
+
+          <Box w={1 / 3} px={2}>
+            <Panel>
+              <HomePanelHeader>
+                <ExternalHomeLink href={LINKS.DOCUMENTATION}>
+                  <HomeIcon color="orange">
+                    <IconDocs size={48} />
+                  </HomeIcon>
+                </ExternalHomeLink>
+                <ExternalHomeLink href={LINKS.DOCUMENTATION}>
+                  {t('Documentation')}
+                </ExternalHomeLink>
+              </HomePanelHeader>
+
+              <HomePanelBody>
+                <h3>{t('Quick links')}:</h3>
+                <ul>
+                  <li>
+                    <ExternalHomeLink href={LINKS.DOCUMENATATION_QUICKSTART}>
+                      {t('Quickstart Guide')}
+                    </ExternalHomeLink>
+                  </li>
+                  <li>
+                    <ExternalHomeLink href={LINKS.DOCUMENTATION_PLATFORMS}>
+                      {t('Platforms & Frameworks')}
+                    </ExternalHomeLink>
+                  </li>
+                  <li>
+                    <ExternalHomeLink href={LINKS.DOCUMENTATION_CLI}>
+                      {t('Sentry CLI')}
+                    </ExternalHomeLink>
+                  </li>
+                </ul>
+              </HomePanelBody>
+            </Panel>
+          </Box>
+
+          <Box w={1 / 3} px={2}>
+            <Panel>
+              <HomePanelHeader>
+                <SupportLinkComponent {...supportLinkProps}>
+                  <HomeIcon color="purple">
+                    <IconSupport size={48} />
+                  </HomeIcon>
+                  {t('Support')}
+                </SupportLinkComponent>
+              </HomePanelHeader>
+
+              <HomePanelBody>
+                <h3>{t('Quick links')}:</h3>
+                <ul>
+                  <li>
+                    <SupportLinkComponent {...supportLinkProps}>
+                      {supportText}
+                    </SupportLinkComponent>
+                  </li>
+                  <li>
+                    <ExternalHomeLink href={LINKS.GITHUB_ISSUES}>
+                      {t('Sentry on GitHub')}
+                    </ExternalHomeLink>
+                  </li>
+                  <li>
+                    <ExternalHomeLink href={LINKS.SERVICE_STATUS}>
+                      {t('Service Status')}
+                    </ExternalHomeLink>
+                  </li>
+                </ul>
+              </HomePanelBody>
+            </Panel>
+          </Box>
+
+          <Box w={1 / 3} px={2}>
+            <Panel>
+              <HomePanelHeader>
+                <HomeLink to={LINKS.API}>
+                  <HomeIcon>
+                    <IconLock size={48} />
+                  </HomeIcon>
+                  {t('API Keys')}
+                </HomeLink>
+              </HomePanelHeader>
+
+              <HomePanelBody>
+                <h3>{t('Quick links')}:</h3>
+                <ul>
+                  <li>
+                    <HomeLink to={LINKS.API}>{t('Auth Tokens')}</HomeLink>
+                  </li>
+                  <li>
+                    <HomeLink to={LINKS.API_APPLICATION}>{t('Applications')}</HomeLink>
+                  </li>
+                  <li>
+                    <ExternalHomeLink href={LINKS.DOCUMENTATION_API}>
+                      {t('Documentation')}
+                    </ExternalHomeLink>
+                  </li>
+                </ul>
+              </HomePanelBody>
+            </Panel>
+          </Box>
+
+          {isSuperuser && (
+            <Box w={1 / 3} px={2}>
+              <Panel>
+                <HomePanelHeader>
+                  <HomeLink href={LINKS.MANAGE}>
+                    <HomeIcon color="red">
+                      <IconLaptop size={48} />
+                    </HomeIcon>
+                    {t('Server Admin')}
+                  </HomeLink>
+                </HomePanelHeader>
+                <HomePanelBody>
+                  <h3>{t('Quick links')}:</h3>
+                  <ul>
+                    <li />
+                    <li />
+                    <li />
+                  </ul>
+                </HomePanelBody>
+              </Panel>
+            </Box>
+          )}
+        </Flex>
+      </SettingsLayout>
+    );
+  }
+}
+export default withLatestContext(SettingsIndex);
diff --git a/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx
new file mode 100644
index 0000000000..44d45f4881
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx
@@ -0,0 +1,139 @@
+import {Box, Flex} from 'grid-emotion';
+import {Link} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import IconChevronLeft from '../../icons/icon-chevron-left';
+import SettingsActivity from './components/settingsActivity';
+import SettingsBreadcrumb from './components/settingsBreadcrumb';
+import SettingsHeader from './components/settingsHeader';
+import SettingsSearch from './components/settingsSearch';
+import replaceRouterParams from '../../utils/replaceRouterParams';
+import withLatestContext from '../../utils/withLatestContext';
+import SentryTypes from '../../proptypes';
+
+let StyledWarning = styled.div`
+  margin-bottom: 30px;
+`;
+// TODO(billy): Temp
+let NewSettingsWarning = ({location = {}}) => {
+  // TODO(billy): Remove this warning when ready
+  let oldLocation = location.pathname
+    ? location.pathname.replace(/^\/settings\/organization\//, '/organizations/')
+    : '';
+
+  if (oldLocation === location.pathname) return null;
+
+  // members or auth should not be react routes
+  let isRouter = !/\/(members|auth)\//.test(location.pathname);
+  let linkProps = {
+    href: isRouter ? undefined : oldLocation,
+    to: isRouter ? oldLocation : undefined,
+  };
+  let Component = isRouter ? Link : 'a';
+  return (
+    <StyledWarning className="alert alert-warning">
+      These settings are currently in beta. Please report any issues. You can temporarily
+      visit the <Component {...linkProps}>old settings page</Component> if necessary.
+    </StyledWarning>
+  );
+};
+
+const BackButtonWrapper = styled(Link)`
+  position: fixed;
+  display: block;
+  left: 20px;
+  font-size: 18px;
+  color: ${p => p.theme.gray3};
+  &:hover {
+    color: ${p => p.theme.gray5};
+  }
+`;
+
+const BackIcon = styled.span`
+  color: ${p => p.theme.gray1};
+  position: relative;
+  top: -2px;
+  margin-right: 8px;
+`;
+
+class BackButtonComponent extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization,
+    project: SentryTypes.Project,
+  };
+
+  render() {
+    let {params, organization, project} = this.props;
+
+    let projectId = params.projectId || (project && project.slug);
+    let orgId = params.orgId || (organization && organization.slug);
+    let url = projectId ? '/:orgId/:projectId/' : '/:orgId/';
+
+    return (
+      <BackButtonWrapper
+        to={replaceRouterParams(url, {
+          orgId,
+          projectId,
+        })}
+      >
+        <BackIcon>
+          <IconChevronLeft size="15" />
+        </BackIcon>Back
+      </BackButtonWrapper>
+    );
+  }
+}
+
+const BackButton = withLatestContext(BackButtonComponent);
+
+const Content = styled(Box)`
+  flex: 1;
+`;
+
+class SettingsLayout extends React.Component {
+  static propTypes = {
+    renderNavigation: PropTypes.func,
+    route: PropTypes.object,
+    routes: PropTypes.array,
+  };
+
+  render() {
+    let {params, routes, route, renderNavigation, children} = this.props;
+    // We want child's view's props
+    let childProps = (children && children.props) || this.props;
+    let childRoutes = childProps.routes || routes || [];
+    let childRoute = childProps.route || route || {};
+    return (
+      <div>
+        <SettingsHeader>
+          <BackButton params={params} />
+          <Box flex="1">
+            <SettingsBreadcrumb params={params} routes={childRoutes} route={childRoute} />
+          </Box>
+          <SettingsSearch params={params} />
+        </SettingsHeader>
+        <Flex>
+          {typeof renderNavigation === 'function' && (
+            <Box flex="0 0 210px">
+              <StickySidebar>{renderNavigation()}</StickySidebar>
+            </Box>
+          )}
+          <Content>
+            <NewSettingsWarning location={this.props.location} />
+
+            {children}
+          </Content>
+        </Flex>
+        <SettingsActivity />
+      </div>
+    );
+  }
+}
+const StickySidebar = styled.div`
+  position: sticky;
+  top: 105px;
+`;
+
+export default SettingsLayout;
diff --git a/src/sentry/static/sentry/app/views/settings/settingsWrapper.jsx b/src/sentry/static/sentry/app/views/settings/settingsWrapper.jsx
new file mode 100644
index 0000000000..f3bfb9a20c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/settingsWrapper.jsx
@@ -0,0 +1,37 @@
+import $ from 'jquery';
+import React from 'react';
+import styled from 'react-emotion';
+import {withTheme} from 'emotion-theming';
+
+const StyledSettingsWrapper = withTheme(
+  styled.div`
+    font-family: 'Rubik', sans-serif;
+    font-size: 16px;
+    color: ${p => p.theme.gray5};
+  `
+);
+const StyledSettingsContainer = styled.div`
+  max-width: 1040px;
+  padding: 0 16px;
+  margin: 0 auto;
+  line-height: 1;
+`;
+
+class SettingsWrapper extends React.Component {
+  componentWillMount() {
+    $(document.body).addClass('new-settings');
+  }
+  componentWillUnmount() {
+    $(document.body).removeClass('new-settings');
+  }
+
+  render() {
+    return (
+      <StyledSettingsWrapper>
+        <StyledSettingsContainer>{this.props.children}</StyledSettingsContainer>
+      </StyledSettingsWrapper>
+    );
+  }
+}
+
+export default SettingsWrapper;
diff --git a/src/sentry/static/sentry/app/views/settings/team/allTeamsList.jsx b/src/sentry/static/sentry/app/views/settings/team/allTeamsList.jsx
new file mode 100644
index 0000000000..50935345ae
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/team/allTeamsList.jsx
@@ -0,0 +1,54 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import {Link} from 'react-router';
+
+import SentryTypes from '../../../proptypes';
+
+import AllTeamsRow from './allTeamsRow';
+import {tct} from '../../../locale';
+
+const AllTeamsList = React.createClass({
+  propTypes: {
+    urlPrefix: PropTypes.string,
+    access: PropTypes.object,
+    organization: SentryTypes.Organization,
+    teamList: PropTypes.arrayOf(SentryTypes.Team),
+    openMembership: PropTypes.bool,
+  },
+
+  render() {
+    let {access, organization, urlPrefix, openMembership} = this.props;
+    let teamNodes = this.props.teamList.map((team, teamIdx) => {
+      return (
+        <AllTeamsRow
+          urlPrefix={urlPrefix}
+          access={access}
+          team={team}
+          organization={organization}
+          openMembership={openMembership}
+          key={team.slug}
+        />
+      );
+    });
+
+    if (teamNodes.length !== 0) {
+      return (
+        <div className="panel panel-default">
+          <table className="table">
+            <tbody>{teamNodes}</tbody>
+          </table>
+        </div>
+      );
+    }
+
+    return tct(
+      "You don't have any teams for this organization yet. Get started by [link:creating your first team].",
+      {
+        root: <p />,
+        link: <Link to={`${urlPrefix}teams/new/`} />,
+      }
+    );
+  },
+});
+
+export default AllTeamsList;
diff --git a/src/sentry/static/sentry/app/views/settings/team/allTeamsRow.jsx b/src/sentry/static/sentry/app/views/settings/team/allTeamsRow.jsx
new file mode 100644
index 0000000000..2038aee626
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/team/allTeamsRow.jsx
@@ -0,0 +1,131 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import {Link} from 'react-router';
+
+import ApiMixin from '../../../mixins/apiMixin';
+import AlertActions from '../../../actions/alertActions';
+import {t} from '../../../locale';
+
+// TODO(dcramer): this isnt great UX
+
+const AllTeamsRow = React.createClass({
+  propTypes: {
+    urlPrefix: PropTypes.string.isRequired,
+    access: PropTypes.object.isRequired,
+    organization: PropTypes.object.isRequired,
+    team: PropTypes.object.isRequired,
+    openMembership: PropTypes.bool.isRequired,
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: false,
+      error: false,
+    };
+  },
+
+  joinTeam() {
+    this.setState({
+      loading: true,
+    });
+
+    this.api.joinTeam(
+      {
+        orgId: this.props.organization.slug,
+        teamId: this.props.team.slug,
+      },
+      {
+        success: () => {
+          this.setState({
+            loading: false,
+            error: false,
+          });
+        },
+        error: () => {
+          this.setState({
+            loading: false,
+            error: true,
+          });
+          AlertActions.addAlert({
+            message: t('There was an error while trying to join the team.'),
+            type: 'error',
+          });
+        },
+      }
+    );
+  },
+
+  leaveTeam() {
+    this.setState({
+      loading: true,
+    });
+
+    this.api.leaveTeam(
+      {
+        orgId: this.props.organization.slug,
+        teamId: this.props.team.slug,
+      },
+      {
+        success: () => {
+          this.setState({
+            loading: false,
+            error: false,
+          });
+        },
+        error: () => {
+          this.setState({
+            loading: false,
+            error: true,
+          });
+          AlertActions.addAlert({
+            message: t('There was an error while trying to leave the team.'),
+            type: 'error',
+          });
+        },
+      }
+    );
+  },
+
+  render() {
+    let {access, team, urlPrefix, openMembership} = this.props;
+    return (
+      <tr>
+        <td>
+          <h5>{team.name}</h5>
+        </td>
+        <td className="actions align-right">
+          {this.state.loading ? (
+            <a className="btn btn-default btn-sm btn-loading btn-disabled">...</a>
+          ) : team.isMember ? (
+            <a className="leave-team btn btn-default btn-sm" onClick={this.leaveTeam}>
+              {t('Leave Team')}
+            </a>
+          ) : team.isPending ? (
+            <a className="btn btn-default btn-sm btn-disabled">{t('Request Pending')}</a>
+          ) : openMembership ? (
+            <a className="btn btn-default btn-sm" onClick={this.joinTeam}>
+              {t('Join Team')}
+            </a>
+          ) : (
+            <a className="btn btn-default btn-sm" onClick={this.joinTeam}>
+              {t('Request Access')}
+            </a>
+          )}
+          {access.has('team:write') && (
+            <Link
+              className="btn btn-default btn-sm"
+              to={`${urlPrefix}teams/${team.slug}/settings/`}
+              style={{marginLeft: 5}}
+            >
+              {t('Team Settings')}
+            </Link>
+          )}
+        </td>
+      </tr>
+    );
+  },
+});
+
+export default AllTeamsRow;
diff --git a/src/sentry/static/sentry/app/views/settings/team/expandedTeamList.jsx b/src/sentry/static/sentry/app/views/settings/team/expandedTeamList.jsx
new file mode 100644
index 0000000000..79faf4575f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/team/expandedTeamList.jsx
@@ -0,0 +1,212 @@
+import {Link} from 'react-router';
+import LazyLoad from 'react-lazy-load';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {sortArray} from '../../../utils';
+import {t, tct} from '../../../locale';
+import ApiMixin from '../../../mixins/apiMixin';
+import {update} from '../../../actionCreators/projects';
+import TooltipMixin from '../../../mixins/tooltip';
+import BarChart from '../../../components/barChart';
+import ProjectLabel from '../../../components/projectLabel';
+import SentryTypes from '../../../proptypes';
+
+const ExpandedTeamList = React.createClass({
+  propTypes: {
+    access: PropTypes.object.isRequired,
+    organization: SentryTypes.Organization.isRequired,
+    teamList: PropTypes.arrayOf(SentryTypes.Team).isRequired,
+    projectStats: PropTypes.object,
+    urlPrefix: PropTypes.string,
+    hasTeams: PropTypes.bool,
+  },
+
+  mixins: [
+    ApiMixin,
+    TooltipMixin(function() {
+      return {
+        selector: '.tip',
+        title: function(instance) {
+          return this.getAttribute('data-isbookmarked') === 'true'
+            ? 'Remove from bookmarks'
+            : 'Add to bookmarks';
+        },
+      };
+    }),
+  ],
+
+  leaveTeam(team) {
+    // TODO(dcramer): handle loading indicator
+    this.api.leaveTeam({
+      orgId: this.props.organization.slug,
+      teamId: team.slug,
+    });
+  },
+
+  urlPrefix() {
+    let {organization, urlPrefix} = this.props;
+    return urlPrefix || `/organizations/${organization.slug}/`;
+  },
+
+  renderProjectList(team) {
+    return (
+      <tbody>
+        {sortArray(team.projects, function(o) {
+          return o.name;
+        }).map(this.renderProject)}
+      </tbody>
+    );
+  },
+
+  renderNoProjects(team) {
+    let {organization} = this.props;
+    return (
+      <tbody>
+        <tr>
+          <td>
+            <p className="project-list-empty">
+              {tct(
+                'There are no projects in this team. Get started by [link:creating your first project].',
+                {
+                  link: (
+                    <Link
+                      to={`/organizations/${organization.slug}/projects/new/?team=${team.slug}`}
+                    />
+                  ),
+                }
+              )}
+            </p>
+          </td>
+        </tr>
+      </tbody>
+    );
+  },
+
+  renderTeamNode(team, urlPrefix) {
+    // TODO: make this cleaner
+    let access = this.props.access;
+    return (
+      <div className="box" key={team.slug}>
+        <div className="box-header">
+          <div className="pull-right actions hidden-xs">
+            <a className="leave-team" onClick={this.leaveTeam.bind(this, team)}>
+              {t('Leave Team')}
+            </a>
+            {access.has('team:write') && (
+              <Link
+                className="team-settings"
+                to={`${this.urlPrefix()}teams/${team.slug}/settings/`}
+              >
+                {t('Team Settings')}
+              </Link>
+            )}
+          </div>
+          <h3>{team.name}</h3>
+        </div>
+        <div className="box-content">
+          <table className="table table-no-top-border m-b-0">
+            {team.projects.length
+              ? this.renderProjectList(team)
+              : this.renderNoProjects(team)}
+          </table>
+        </div>
+      </div>
+    );
+  },
+
+  toggleBookmark(project) {
+    update(this.api, {
+      orgId: this.props.organization.slug,
+      projectId: project.slug,
+      data: {
+        isBookmarked: !project.isBookmarked,
+      },
+    });
+  },
+
+  renderProject(project) {
+    let org = this.props.organization;
+    let chartData =
+      project.stats &&
+      project.stats.map(point => {
+        return {x: point[0], y: point[1]};
+      });
+
+    return (
+      <tr key={project.id} className={project.isBookmarked ? 'isBookmarked' : null}>
+        <td>
+          <h5>
+            <a
+              onClick={this.toggleBookmark.bind(this, project)}
+              className="tip"
+              data-isbookmarked={project.isBookmarked}
+            >
+              {project.isBookmarked ? (
+                <span className="icon-star-solid bookmark" />
+              ) : (
+                <span className="icon-star-outline bookmark" />
+              )}
+            </a>
+            <Link
+              to={`/settings/organization/${org.slug}/project/${project.slug}/alerts/`}
+            >
+              <ProjectLabel project={project} organization={this.props.organization} />
+            </Link>
+          </h5>
+        </td>
+        <td className="align-right project-chart">
+          {chartData && (
+            <LazyLoad>
+              <BarChart points={chartData} label="events" />
+            </LazyLoad>
+          )}
+        </td>
+      </tr>
+    );
+  },
+
+  renderEmpty() {
+    if (this.props.hasTeams) {
+      return (
+        <p>
+          {this.props.access.has('project:write')
+            ? tct(
+                'You are not a member of any teams. [joinLink:Join an existing team] or [createLink:create a new one].',
+                {
+                  joinLink: <Link to={`${this.urlPrefix()}all-teams/`} />,
+                  createLink: <Link to={this.urlPrefix() + 'teams/new/'} />,
+                }
+              )
+            : tct('You are not a member of any teams. [joinLink:Join a team].', {
+                joinLink: <Link to={`${this.urlPrefix()}all-teams/`} />,
+              })}
+        </p>
+      );
+    }
+    return (
+      <p>
+        {tct(
+          'You dont have any teams for this organization yet. Get started by [link:creating your first team].',
+          {
+            link: <Link to={this.urlPrefix() + 'teams/new/'} />,
+          }
+        )}
+      </p>
+    );
+  },
+
+  renderTeamNodes() {
+    return this.props.teamList.map(team => {
+      return this.renderTeamNode(team);
+    });
+  },
+
+  render() {
+    let hasTeams = this.props.teamList.length > 0;
+
+    return <div>{hasTeams ? this.renderTeamNodes() : this.renderEmpty()}</div>;
+  },
+});
+
+export default ExpandedTeamList;
diff --git a/src/sentry/static/sentry/app/views/settings/team/model.jsx b/src/sentry/static/sentry/app/views/settings/team/model.jsx
new file mode 100644
index 0000000000..6f72f6a68c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/team/model.jsx
@@ -0,0 +1,14 @@
+import {updateTeam} from '../../../actionCreators/teams';
+import FormModel from '../components/forms/model';
+
+class TeamFormModel extends FormModel {
+  doApiRequest({data}) {
+    return updateTeam(this.api, {
+      orgId: this.orgId,
+      teamId: this.teamId,
+      data,
+    });
+  }
+}
+
+export default TeamFormModel;
diff --git a/src/sentry/static/sentry/app/views/settings/team/organizationStatOverview.jsx b/src/sentry/static/sentry/app/views/settings/team/organizationStatOverview.jsx
new file mode 100644
index 0000000000..ca72749051
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/team/organizationStatOverview.jsx
@@ -0,0 +1,99 @@
+import {Link} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+import classNames from 'classnames';
+
+import {defined} from '../../../utils';
+import {t} from '../../../locale';
+import ApiMixin from '../../../mixins/apiMixin';
+import OrganizationState from '../../../mixins/organizationState';
+
+const OrganizationStatOverview = React.createClass({
+  propTypes: {
+    orgId: PropTypes.string,
+  },
+
+  contextTypes: {
+    location: PropTypes.object,
+  },
+
+  mixins: [ApiMixin, OrganizationState],
+
+  getInitialState() {
+    return {
+      totalRejected: null,
+      epm: null,
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  getOrganizationStatsEndpoint() {
+    return '/organizations/' + this.props.orgId + '/stats/';
+  },
+
+  fetchData() {
+    let statsEndpoint = this.getOrganizationStatsEndpoint();
+    this.api.request(statsEndpoint, {
+      query: {
+        since: new Date().getTime() / 1000 - 3600 * 24,
+        stat: 'rejected',
+      },
+      success: data => {
+        let totalRejected = 0;
+        data.forEach(point => {
+          totalRejected += point[1];
+        });
+        this.setState({totalRejected});
+      },
+    });
+    this.api.request(statsEndpoint, {
+      query: {
+        since: new Date().getTime() / 1000 - 3600 * 3,
+        resolution: '1h',
+        stat: 'received',
+      },
+      success: data => {
+        let received = [0, 0];
+        data.forEach(point => {
+          if (point[1] > 0) {
+            received[0] += point[1];
+            received[1] += 1;
+          }
+        });
+        let epm = received[1] ? parseInt(received[0] / received[1] / 60, 10) : 0;
+        this.setState({epm});
+      },
+    });
+  },
+
+  render() {
+    if (!defined(this.state.epm) || !defined(this.state.totalRejected)) return null;
+
+    let access = this.getAccess();
+
+    let rejectedClasses = ['count'];
+    if (this.state.totalRejected > 0) rejectedClasses.push('rejected');
+
+    return (
+      <div className={this.props.className}>
+        <h6 className="nav-header">{t('Events Per Minute')}</h6>
+        <p className="count">{this.state.epm}</p>
+        <h6 className="nav-header">{t('Rejected in last 24h')}</h6>
+        <p className={classNames(rejectedClasses)}>{this.state.totalRejected}</p>
+        {access.has('org:read') && (
+          <Link
+            to={`/settings/organization/${this.props.orgId}/stats/`}
+            className="stats-link"
+          >
+            {t('View all stats')}
+          </Link>
+        )}
+      </div>
+    );
+  },
+});
+
+export default OrganizationStatOverview;
diff --git a/src/sentry/static/sentry/app/views/settings/team/organizationTeamsView.jsx b/src/sentry/static/sentry/app/views/settings/team/organizationTeamsView.jsx
new file mode 100644
index 0000000000..b518b2e72e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/team/organizationTeamsView.jsx
@@ -0,0 +1,73 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import SentryTypes from '../../../proptypes';
+import {t} from '../../../locale';
+import ExpandedTeamList from './expandedTeamList';
+import AllTeamsList from './allTeamsList';
+import ListLink from '../../../components/listLink';
+import recreateRoute from '../../../utils/recreateRoute';
+
+class OrganizationTeamsView extends React.Component {
+  static propTypes = {
+    allTeams: PropTypes.arrayOf(SentryTypes.Team),
+    activeTeams: PropTypes.arrayOf(SentryTypes.Team),
+    projectStats: PropTypes.array,
+    organization: SentryTypes.Organization,
+    access: PropTypes.object,
+    features: PropTypes.object,
+    route: PropTypes.object,
+    routes: PropTypes.array,
+    params: PropTypes.object,
+  };
+
+  render() {
+    let {
+      allTeams,
+      activeTeams,
+      projectStats,
+      organization,
+      access,
+      features,
+      route,
+      routes,
+      params,
+    } = this.props;
+    let org = organization;
+
+    if (!organization) return null;
+
+    let urlPrefix = recreateRoute('', {routes, params, stepBack: -1});
+
+    return (
+      <div className="team-list">
+        <ul className="nav nav-tabs border-bottom">
+          <ListLink to={`${urlPrefix}teams/`}>{t('Your Teams')}</ListLink>
+          <ListLink to={`${urlPrefix}all-teams/`}>
+            {t('All Teams')} <span className="badge badge-soft">{allTeams.length}</span>
+          </ListLink>
+        </ul>
+        {route.allTeams /* should be AllTeamsList */ ? (
+          <AllTeamsList
+            urlPrefix={urlPrefix}
+            organization={org}
+            teamList={allTeams}
+            access={access}
+            openMembership={features.has('open-membership') || access.has('org:write')}
+          />
+        ) : (
+          <ExpandedTeamList
+            urlPrefix={urlPrefix}
+            organization={org}
+            teamList={activeTeams}
+            projectStats={projectStats}
+            hasTeams={allTeams.length !== 0}
+            access={access}
+          />
+        )}
+      </div>
+    );
+  }
+}
+
+export default OrganizationTeamsView;
diff --git a/src/sentry/static/sentry/app/views/settings/team/teamMembers.jsx b/src/sentry/static/sentry/app/views/settings/team/teamMembers.jsx
new file mode 100644
index 0000000000..9f29dda7a3
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/team/teamMembers.jsx
@@ -0,0 +1,135 @@
+import React from 'react';
+import {Link} from 'react-router';
+
+import ApiMixin from '../../../mixins/apiMixin';
+import Avatar from '../../../components/avatar';
+import Button from '../../../components/buttons/button';
+import LoadingError from '../../../components/loadingError';
+import LoadingIndicator from '../../../components/loadingIndicator';
+import OrganizationState from '../../../mixins/organizationState';
+import recreateRoute from '../../../utils/recreateRoute';
+import {t} from '../../../locale';
+
+const TeamMembers = React.createClass({
+  mixins: [ApiMixin, OrganizationState],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      memberList: null,
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  componentWillReceiveProps(nextProps) {
+    let params = this.props.params;
+    if (
+      nextProps.params.teamId !== params.teamId ||
+      nextProps.params.orgId !== params.orgId
+    ) {
+      this.setState(
+        {
+          loading: true,
+          error: false,
+        },
+        this.fetchData
+      );
+    }
+  },
+
+  fetchData() {
+    let params = this.props.params;
+
+    this.api.request(`/teams/${params.orgId}/${params.teamId}/members/`, {
+      success: data => {
+        this.setState({
+          memberList: data,
+          loading: false,
+          error: false,
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true,
+        });
+      },
+    });
+  },
+
+  render() {
+    if (this.state.loading) return <LoadingIndicator />;
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+
+    let {params, routes} = this.props;
+
+    let access = this.getAccess();
+
+    return (
+      <div>
+        <div style={{marginBottom: 20}} className="clearfix">
+          {access.has('org:write') ? (
+            <Button
+              priority="primary"
+              size="small"
+              className="pull-right"
+              to={`${recreateRoute('members/new/', {routes, params, stepBack: -2})}`}
+            >
+              <span className="icon-plus" /> {t('Invite Member')}
+            </Button>
+          ) : (
+            <a
+              className="btn btn-primary btn-sm btn-disabled tip pull-right"
+              title={t('You do not have enough permission to add new members')}
+            >
+              <span className="icon-plus" /> {t('Invite Member')}
+            </a>
+          )}
+        </div>
+
+        <table className="table member-list">
+          <colgroup>
+            <col />
+            <col width="150" />
+          </colgroup>
+          <thead>
+            <tr>
+              <th>{t('Member')}</th>
+              <th>{t('Role')}</th>
+            </tr>
+          </thead>
+          <tbody>
+            {this.state.memberList.map((member, i) => {
+              return (
+                <tr key={i}>
+                  <td className="table-user-info">
+                    <Avatar user={member} size={80} />
+                    <h5>
+                      <Link
+                        to={`${recreateRoute(`members/${member.id}`, {
+                          routes,
+                          params,
+                          stepBack: -2,
+                        })}`}
+                      >
+                        {member.email}
+                      </Link>
+                    </h5>
+                    {member.email}
+                  </td>
+                  <td>{member.roleName}</td>
+                </tr>
+              );
+            })}
+          </tbody>
+        </table>
+      </div>
+    );
+  },
+});
+
+export default TeamMembers;
diff --git a/src/sentry/static/sentry/app/views/settings/team/teamMembers.old.jsx b/src/sentry/static/sentry/app/views/settings/team/teamMembers.old.jsx
new file mode 100644
index 0000000000..38cce40408
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/team/teamMembers.old.jsx
@@ -0,0 +1,122 @@
+import React from 'react';
+
+import ApiMixin from '../../../mixins/apiMixin';
+import Avatar from '../../../components/avatar';
+import LoadingError from '../../../components/loadingError';
+import LoadingIndicator from '../../../components/loadingIndicator';
+import OrganizationState from '../../../mixins/organizationState';
+import {t} from '../../../locale';
+
+const TeamMembers = React.createClass({
+  mixins: [ApiMixin, OrganizationState],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      memberList: null,
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  componentWillReceiveProps(nextProps) {
+    let params = this.props.params;
+    if (
+      nextProps.params.teamId !== params.teamId ||
+      nextProps.params.orgId !== params.orgId
+    ) {
+      this.setState(
+        {
+          loading: true,
+          error: false,
+        },
+        this.fetchData
+      );
+    }
+  },
+
+  fetchData() {
+    let params = this.props.params;
+
+    this.api.request(`/teams/${params.orgId}/${params.teamId}/members/`, {
+      success: data => {
+        this.setState({
+          memberList: data,
+          loading: false,
+          error: false,
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true,
+        });
+      },
+    });
+  },
+
+  render() {
+    if (this.state.loading) return <LoadingIndicator />;
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+
+    let {orgId} = this.props.params;
+    let memberPrefix = `/organizations/${orgId}/members`;
+    let access = this.getAccess();
+
+    return (
+      <div>
+        <div style={{marginBottom: 20}} className="clearfix">
+          {access.has('org:write') ? (
+            <a
+              className="btn btn-primary btn-sm pull-right"
+              href={`${memberPrefix}/new/`}
+            >
+              <span className="icon-plus" /> {t('Invite Member')}
+            </a>
+          ) : (
+            <a
+              className="btn btn-primary btn-sm btn-disabled tip pull-right"
+              title={t('You do not have enough permission to add new members')}
+            >
+              <span className="icon-plus" /> {t('Invite Member')}
+            </a>
+          )}
+        </div>
+
+        <table className="table member-list">
+          <colgroup>
+            <col />
+            <col width="150" />
+          </colgroup>
+          <thead>
+            <tr>
+              <th>{t('Member')}</th>
+              <th>{t('Role')}</th>
+            </tr>
+          </thead>
+          <tbody>
+            {this.state.memberList.map((member, i) => {
+              return (
+                <tr key={i}>
+                  <td className="table-user-info">
+                    <Avatar user={member} size={80} />
+                    <h5>
+                      <a href={`${memberPrefix}/${member.id}/`}>{member.email}</a>
+                    </h5>
+                    {member.email}
+                  </td>
+                  <td>{member.roleName}</td>
+                </tr>
+              );
+            })}
+          </tbody>
+        </table>
+      </div>
+    );
+  },
+});
+
+export default TeamMembers;
diff --git a/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx b/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx
new file mode 100644
index 0000000000..f1779d2c7c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx
@@ -0,0 +1,74 @@
+import {Box} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {
+  addErrorMessage,
+  addSuccessMessage,
+} from '../../../actionCreators/settingsIndicator';
+import AsyncView from '../../asyncView';
+import Form from '../components/forms/form';
+import JsonForm from '../components/forms/jsonForm';
+import teamSettingsFields from '../../../data/forms/teamSettingsFields';
+import TeamModel from './model';
+
+const TOAST_DURATION = 10000;
+
+export default class TeamSettings extends AsyncView {
+  static propTypes = {
+    ...AsyncView.propTypes,
+    team: PropTypes.object.isRequired,
+    onTeamChange: PropTypes.func.isRequired,
+  };
+
+  static contextTypes = {
+    location: PropTypes.object,
+  };
+
+  constructor(props, context) {
+    super(props, context);
+
+    this.model = new TeamModel();
+    this.model.teamId = props.params.teamId;
+    this.model.orgId = props.params.orgId;
+  }
+
+  getTitle() {
+    return 'Team Settings';
+  }
+
+  renderBody() {
+    let team = this.props.team;
+
+    return (
+      <Form
+        model={this.model}
+        apiMethod="PUT"
+        saveOnBlur
+        allowUndo
+        onSubmitSuccess={(change, model, id) => {
+          if (!model) return;
+
+          let label = model.getDescriptor(id, 'label');
+
+          if (!label) return;
+
+          addSuccessMessage(
+            `Changed ${label} from "${change.old}" to "${change.new}"`,
+            TOAST_DURATION,
+            {model, id}
+          );
+        }}
+        onSubmitError={() => addErrorMessage('Unable to save change', TOAST_DURATION)}
+        initialData={{
+          name: team.name,
+          slug: team.slug,
+        }}
+      >
+        <Box>
+          <JsonForm location={this.context.location} forms={teamSettingsFields} />
+        </Box>
+      </Form>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/team/teamSettings.old.jsx b/src/sentry/static/sentry/app/views/settings/team/teamSettings.old.jsx
new file mode 100644
index 0000000000..f8d362c3f7
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/team/teamSettings.old.jsx
@@ -0,0 +1,53 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import AsyncView from '../../asyncView';
+import {ApiForm, TextField} from '../../../components/forms';
+import {t} from '../../../locale';
+
+export default class TeamSettings extends AsyncView {
+  static propTypes = {
+    ...AsyncView.propTypes,
+    team: PropTypes.object.isRequired,
+    onTeamChange: PropTypes.func.isRequired,
+  };
+
+  getTitle() {
+    return 'Team Settings';
+  }
+
+  renderBody() {
+    let {orgId, teamId} = this.props.params;
+    let team = this.props.team;
+
+    return (
+      <div className="box">
+        <div className="box-content with-padding">
+          <ApiForm
+            apiMethod="PUT"
+            apiEndpoint={`/teams/${orgId}/${teamId}/`}
+            initialData={{
+              name: team.name,
+              slug: team.slug,
+            }}
+            onSubmitSuccess={this.props.onTeamChange}
+            requireChanges={true}
+          >
+            <TextField
+              name="name"
+              label={t('Name')}
+              placeholder={t('e.g. API Team')}
+              required={true}
+            />
+            <TextField
+              name="slug"
+              label={t('Short name')}
+              placeholder={t('e.g. api-team')}
+              required={true}
+            />
+          </ApiForm>
+        </div>
+      </div>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/teamDetails.jsx b/src/sentry/static/sentry/app/views/teamDetails.jsx
index 957a6dc717..a6d664b7e9 100644
--- a/src/sentry/static/sentry/app/views/teamDetails.jsx
+++ b/src/sentry/static/sentry/app/views/teamDetails.jsx
@@ -1,6 +1,10 @@
-import React from 'react';
 import {browserHistory} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+import Reflux from 'reflux';
 
+import {fetchTeamDetails} from '../actionCreators/teams';
+import {t} from '../locale';
 import ApiMixin from '../mixins/apiMixin';
 import DropdownLink from '../components/dropdownLink';
 import ListLink from '../components/listLink';
@@ -8,23 +12,26 @@ import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import MenuItem from '../components/menuItem';
 import OrganizationState from '../mixins/organizationState';
-import {t} from '../locale';
+import TeamStore from '../stores/teamStore';
+import recreateRoute from '../utils/recreateRoute';
 
 const TeamDetails = React.createClass({
-  mixins: [ApiMixin, OrganizationState],
+  propTypes: {
+    routes: PropTypes.array,
+  },
+
+  mixins: [ApiMixin, OrganizationState, Reflux.listenTo(TeamStore, 'onTeamStoreUpdate')],
 
   getInitialState() {
+    let team = TeamStore.getBySlug(this.props.params.teamId);
+
     return {
-      loading: true,
+      loading: !TeamStore.initialized,
       error: false,
-      team: null,
+      team,
     };
   },
 
-  componentWillMount() {
-    this.fetchData();
-  },
-
   componentWillReceiveProps(nextProps) {
     let params = this.props.params;
     if (
@@ -41,26 +48,21 @@ const TeamDetails = React.createClass({
     }
   },
 
-  fetchData() {
-    let params = this.props.params;
-
-    this.api.request(`/teams/${params.orgId}/${params.teamId}/`, {
-      success: data => {
-        this.setState({
-          team: data,
-          loading: false,
-          error: false,
-        });
-      },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true,
-        });
-      },
+  onTeamStoreUpdate(...args) {
+    let team = TeamStore.getBySlug(this.props.params.teamId);
+    let loading = !TeamStore.initialized;
+    let error = !loading && !team;
+    this.setState({
+      team,
+      error,
+      loading,
     });
   },
 
+  fetchData() {
+    fetchTeamDetails(this.api, this.props.params);
+  },
+
   onTeamChange(data) {
     let team = this.state.team;
     if (data.slug !== team.slug) {
@@ -80,12 +82,13 @@ const TeamDetails = React.createClass({
   },
 
   render() {
+    let {params, routes, children} = this.props;
+    let team = this.state.team;
+
     if (this.state.loading) return <LoadingIndicator />;
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+    else if (!team || this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
-    let team = this.state.team;
-    let {orgId, teamId} = this.props.params;
-    let routePrefix = `/organizations/${orgId}/teams/${teamId}`;
+    let routePrefix = recreateRoute('', {routes, params, stepBack: -1}); //`/organizations/${orgId}/teams/${teamId}`;
     let access = this.getAccess();
 
     return (
@@ -94,19 +97,20 @@ const TeamDetails = React.createClass({
 
         {access.has('team:admin') && (
           <DropdownLink anchorRight title={t('More')}>
-            <MenuItem href={`${routePrefix}/remove/`}>{t('Remove Team')}</MenuItem>
+            <MenuItem href={`${routePrefix}remove/`}>{t('Remove Team')}</MenuItem>
           </DropdownLink>
         )}
 
         <ul className="nav nav-tabs border-bottom">
-          <ListLink to={`${routePrefix}/settings/`}>{t('Settings')}</ListLink>
-          <ListLink to={`${routePrefix}/members/`}>{t('Members')}</ListLink>
+          <ListLink to={`${routePrefix}settings/`}>{t('Settings')}</ListLink>
+          <ListLink to={`${routePrefix}members/`}>{t('Members')}</ListLink>
         </ul>
 
-        {React.cloneElement(this.props.children, {
-          team,
-          onTeamChange: this.onTeamChange,
-        })}
+        {children &&
+          React.cloneElement(children, {
+            team,
+            onTeamChange: this.onTeamChange,
+          })}
       </div>
     );
   },
diff --git a/src/sentry/static/sentry/app/views/teamMembers.jsx b/src/sentry/static/sentry/app/views/teamMembers.jsx
index 43f66fdf3d..4857fe5c6f 100644
--- a/src/sentry/static/sentry/app/views/teamMembers.jsx
+++ b/src/sentry/static/sentry/app/views/teamMembers.jsx
@@ -1,122 +1,29 @@
 import React from 'react';
+import PropTypes from 'prop-types';
 
-import ApiMixin from '../mixins/apiMixin';
-import Avatar from '../components/avatar';
-import LoadingError from '../components/loadingError';
-import LoadingIndicator from '../components/loadingIndicator';
-import OrganizationState from '../mixins/organizationState';
-import {t} from '../locale';
+import LazyLoad from '../components/lazyLoad';
+import getSettingsComponent from '../utils/getSettingsComponent';
 
-const TeamMembers = React.createClass({
-  mixins: [ApiMixin, OrganizationState],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      memberList: null,
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  componentWillReceiveProps(nextProps) {
-    let params = this.props.params;
-    if (
-      nextProps.params.teamId !== params.teamId ||
-      nextProps.params.orgId !== params.orgId
-    ) {
-      this.setState(
-        {
-          loading: true,
-          error: false,
-        },
-        this.fetchData
-      );
-    }
-  },
-
-  fetchData() {
-    let params = this.props.params;
-
-    this.api.request(`/teams/${params.orgId}/${params.teamId}/members/`, {
-      success: data => {
-        this.setState({
-          memberList: data,
-          loading: false,
-          error: false,
-        });
-      },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true,
-        });
-      },
-    });
-  },
+class TeamMembers extends React.Component {
+  static propTypes = {
+    routes: PropTypes.array,
+  };
 
   render() {
-    if (this.state.loading) return <LoadingIndicator />;
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
-
-    let {orgId} = this.props.params;
-    let memberPrefix = `/organizations/${orgId}/members`;
-    let access = this.getAccess();
-
     return (
-      <div>
-        <div style={{marginBottom: 20}} className="clearfix">
-          {access.has('org:write') ? (
-            <a
-              className="btn btn-primary btn-sm pull-right"
-              href={`${memberPrefix}/new/`}
-            >
-              <span className="icon-plus" /> {t('Invite Member')}
-            </a>
-          ) : (
-            <a
-              className="btn btn-primary btn-sm btn-disabled tip pull-right"
-              title={t('You do not have enough permission to add new members')}
-            >
-              <span className="icon-plus" /> {t('Invite Member')}
-            </a>
+      <LazyLoad
+        component={() =>
+          getSettingsComponent(
+            () =>
+              import(/*webpackChunkName: "teamMembers"*/ './settings/team/teamMembers'),
+            () =>
+              import(/*webpackChunkName: "teamMembers.old"*/ './settings/team/teamMembers.old'),
+            this.props.routes
           )}
-        </div>
-
-        <table className="table member-list">
-          <colgroup>
-            <col />
-            <col width="150" />
-          </colgroup>
-          <thead>
-            <tr>
-              <th>{t('Member')}</th>
-              <th>{t('Role')}</th>
-            </tr>
-          </thead>
-          <tbody>
-            {this.state.memberList.map((member, i) => {
-              return (
-                <tr key={i}>
-                  <td className="table-user-info">
-                    <Avatar user={member} size={80} />
-                    <h5>
-                      <a href={`${memberPrefix}/${member.id}/`}>{member.email}</a>
-                    </h5>
-                    {member.email}
-                  </td>
-                  <td>{member.roleName}</td>
-                </tr>
-              );
-            })}
-          </tbody>
-        </table>
-      </div>
+        {...this.props}
+      />
     );
-  },
-});
+  }
+}
 
 export default TeamMembers;
diff --git a/src/sentry/static/sentry/app/views/teamSettings.jsx b/src/sentry/static/sentry/app/views/teamSettings.jsx
index 5235b78dc7..a40a502ee1 100644
--- a/src/sentry/static/sentry/app/views/teamSettings.jsx
+++ b/src/sentry/static/sentry/app/views/teamSettings.jsx
@@ -1,53 +1,29 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import AsyncView from './asyncView';
-import {ApiForm, TextField} from '../components/forms';
-import {t} from '../locale';
+import LazyLoad from '../components/lazyLoad';
+import getSettingsComponent from '../utils/getSettingsComponent';
 
-export default class TeamSettings extends AsyncView {
+class TeamSettings extends React.Component {
   static propTypes = {
-    ...AsyncView.propTypes,
-    team: PropTypes.object.isRequired,
-    onTeamChange: PropTypes.func.isRequired,
+    routes: PropTypes.array,
   };
 
-  getTitle() {
-    return 'Team Settings';
-  }
-
-  renderBody() {
-    let {orgId, teamId} = this.props.params;
-    let team = this.props.team;
-
+  render() {
     return (
-      <div className="box">
-        <div className="box-content with-padding">
-          <ApiForm
-            apiMethod="PUT"
-            apiEndpoint={`/teams/${orgId}/${teamId}/`}
-            initialData={{
-              name: team.name,
-              slug: team.slug,
-            }}
-            onSubmitSuccess={this.props.onTeamChange}
-            requireChanges={true}
-          >
-            <TextField
-              name="name"
-              label={t('Name')}
-              placeholder={t('e.g. API Team')}
-              required={true}
-            />
-            <TextField
-              name="slug"
-              label={t('Short name')}
-              placeholder={t('e.g. api-team')}
-              required={true}
-            />
-          </ApiForm>
-        </div>
-      </div>
+      <LazyLoad
+        component={() =>
+          getSettingsComponent(
+            () =>
+              import(/*webpackChunkName: "teamSettings"*/ './settings/team/teamSettings'),
+            () =>
+              import(/*webpackChunkName: "teamSettings.old"*/ './settings/team/teamSettings.old'),
+            this.props.routes
+          )}
+        {...this.props}
+      />
     );
   }
 }
+
+export default TeamSettings;
diff --git a/src/sentry/static/sentry/fonts/rubik-medium.woff b/src/sentry/static/sentry/fonts/rubik-medium.woff
new file mode 100644
index 0000000000..8ba7f6ec8e
Binary files /dev/null and b/src/sentry/static/sentry/fonts/rubik-medium.woff differ
diff --git a/src/sentry/static/sentry/fonts/rubik-medium.woff2 b/src/sentry/static/sentry/fonts/rubik-medium.woff2
new file mode 100644
index 0000000000..0e3426b14d
Binary files /dev/null and b/src/sentry/static/sentry/fonts/rubik-medium.woff2 differ
diff --git a/src/sentry/static/sentry/fonts/rubik-regular.woff b/src/sentry/static/sentry/fonts/rubik-regular.woff
new file mode 100644
index 0000000000..6894d9a44a
Binary files /dev/null and b/src/sentry/static/sentry/fonts/rubik-regular.woff differ
diff --git a/src/sentry/static/sentry/fonts/rubik-regular.woff2 b/src/sentry/static/sentry/fonts/rubik-regular.woff2
new file mode 100644
index 0000000000..a4fc17b428
Binary files /dev/null and b/src/sentry/static/sentry/fonts/rubik-regular.woff2 differ
diff --git a/src/sentry/static/sentry/less/components/button.less b/src/sentry/static/sentry/less/components/button.less
index 407a616f5d..907c65aa0c 100644
--- a/src/sentry/static/sentry/less/components/button.less
+++ b/src/sentry/static/sentry/less/components/button.less
@@ -35,7 +35,6 @@
 
 // Priority concerns
 // - font color, background, and border
-
 .button-default {
   color: @90;
   background: #fff;
@@ -48,6 +47,31 @@
   }
 }
 
+.button-link {
+  color: @blue;
+  background: transparent;
+  border: none;
+  box-shadow: none;
+  font-weight: 400;
+
+  .button-label {
+    padding: 0;
+  }
+
+  &.button-disabled {
+    background: transparent;
+    border: none;
+    box-shadow: none;
+    &:hover,
+    &:focus,
+    &:active {
+      background: transparent;
+      border: none;
+      box-shadow: none;
+    }
+  }
+}
+
 .button-primary {
   color: #fff;
   background: @purple;
diff --git a/src/sentry/static/sentry/less/fonts.less b/src/sentry/static/sentry/less/fonts.less
index 7d8c0879dd..5cd0a41760 100644
--- a/src/sentry/static/sentry/less/fonts.less
+++ b/src/sentry/static/sentry/less/fonts.less
@@ -21,6 +21,24 @@
   font-style: normal;
 }
 
+// Rubik
+
+@font-face {
+  font-family: 'Rubik';
+  src: url('../fonts/rubik-regular.woff') format('woff2'),
+    url('../fonts/rubik-regular.woff') format('woff');
+  font-weight: normal;
+  font-style: normal;
+}
+
+@font-face {
+  font-family: 'Rubik';
+  src: url('../fonts/rubik-medium.woff') format('woff2'),
+    url('../fonts/rubik-medium.woff') format('woff');
+  font-weight: bold;
+  font-style: normal;
+}
+
 // Sentry icon font
 
 @font-face {
diff --git a/src/sentry/static/sentry/less/layout.less b/src/sentry/static/sentry/less/layout.less
index de09c23732..4810831ac8 100644
--- a/src/sentry/static/sentry/less/layout.less
+++ b/src/sentry/static/sentry/less/layout.less
@@ -18,6 +18,17 @@ body {
   background-image: linear-gradient(@header-bg-color, @header-bg-color);
   background-size: @sidebar-width;
   background-repeat: repeat-y;
+
+  &.new-settings {
+    overflow-y: scroll;
+    background-image: none;
+    background-color: #fcfcfc;
+    padding: 0 0 40px;
+
+    .messages-container {
+      margin: 0;
+    }
+  }
 }
 
 /**
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 2d61444910..28c05b57ab 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -696,6 +696,23 @@ table.integrations {
   margin: 6em auto;
   position: relative;
 
+  &.overlay {
+    position: absolute;
+    top: 0;
+    bottom: 0;
+    left: 0;
+    right: 0;
+    background-color: rgba(255, 255, 255, 0.8);
+    display: flex;
+    align-items: center;
+    justify-content: center;
+    margin: 0;
+
+    &.dark {
+      background-color: rgba(0, 0, 0, 0.6);
+    }
+  }
+
   .loading-indicator {
     position: relative;
     border: @check-thickness solid @white-darker;
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index e707afcc34..3abb79412b 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -344,6 +344,8 @@ urlpatterns += patterns(
     url(r'^accept-transfer/$', AcceptProjectTransferView.as_view(),
         name='sentry-accept-project-transfer'),
 
+    url(r'^settings/$', react_page_view),
+
     # Organizations
     url(r'^(?P<organization_slug>[\w_-]+)/$',
         react_page_view, name='sentry-organization-home'),
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 80af79e4b0..20c2887465 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -43,6 +43,25 @@ window.TestStubs = {
     };
   },
 
+  AuthProviders: () => {
+    return [['dummy', 'Dummy']];
+  },
+
+  AuthProvider: () => {
+    return {
+      auth_provider: {
+        id: '1',
+        provider: 'dummy',
+      },
+      require_link: true,
+      default_role: 'member',
+      login_url: 'http://loginUrl',
+      provider_name: 'dummy',
+      pending_links_count: 0,
+      content: '',
+    };
+  },
+
   Team: (...params) => {
     return {
       id: '1',
@@ -107,10 +126,6 @@ window.TestStubs = {
     ...params,
   ],
 
-  AuthProvider: (...params) => ({
-    require_link: false,
-  }),
-
   Project: (...params) => {
     return {
       id: '2',
diff --git a/tests/js/setupFramework.js b/tests/js/setupFramework.js
new file mode 100644
index 0000000000..3948df5657
--- /dev/null
+++ b/tests/js/setupFramework.js
@@ -0,0 +1,5 @@
+// jest snapshot serializer for emotion
+import {sheet} from 'emotion';
+import serializer from 'jest-glamor-react';
+
+expect.addSnapshotSerializer(serializer(sheet));
diff --git a/tests/js/spec/components/__snapshots__/confirm.spec.jsx.snap b/tests/js/spec/components/__snapshots__/confirm.spec.jsx.snap
index 23a7026ce6..6748f5913a 100644
--- a/tests/js/spec/components/__snapshots__/confirm.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/confirm.spec.jsx.snap
@@ -30,11 +30,11 @@ exports[`Confirm renders 1`] = `
     <div
       className="modal-body"
     >
-      <p>
+      <div>
         <strong>
           Are you sure?
         </strong>
-      </p>
+      </div>
     </div>
     <div
       className="modal-footer"
diff --git a/tests/js/spec/components/autoComplete.spec.jsx b/tests/js/spec/components/autoComplete.spec.jsx
new file mode 100644
index 0000000000..34b9978750
--- /dev/null
+++ b/tests/js/spec/components/autoComplete.spec.jsx
@@ -0,0 +1,250 @@
+import React from 'react';
+import {mount} from 'enzyme';
+import AutoComplete from 'app/components/autoComplete';
+
+const items = [
+  {
+    name: 'Apple',
+  },
+  {
+    name: 'Pineapple',
+  },
+  {
+    name: 'Orange',
+  },
+];
+
+/**
+ * For every render, we push all injected params into `autoCompleteState`, we probably want to
+ * assert against those instead of the wrapper's state since component state will be different if we have
+ * "controlled" props where <AutoComplete> does not handle state
+ */
+describe('AutoComplete', function() {
+  let wrapper;
+  let input;
+  let autoCompleteState = [];
+  let mocks = {
+    onSelect: jest.fn(),
+  };
+
+  beforeEach(() => {
+    autoCompleteState = [];
+    Object.keys(mocks).forEach(key => mocks[key].mockReset());
+
+    wrapper = mount(
+      <AutoComplete {...mocks} itemToString={item => item.name}>
+        {injectedProps => {
+          let {
+            getRootProps,
+            getInputProps,
+            getMenuProps,
+            getItemProps,
+            inputValue,
+            highlightedIndex,
+            isOpen,
+          } = injectedProps;
+
+          // This is purely for testing
+          autoCompleteState.push(injectedProps);
+
+          return (
+            <div {...getRootProps({style: {position: 'relative'}})}>
+              <input {...getInputProps({})} />
+
+              {isOpen && (
+                <div
+                  {...getMenuProps({
+                    style: {
+                      boxShadow:
+                        '0 1px 4px 1px rgba(47,40,55,0.08), 0 4px 16px 0 rgba(47,40,55,0.12)',
+                      position: 'absolute',
+                      backgroundColor: 'white',
+                      padding: '0',
+                    },
+                  })}
+                >
+                  <ul>
+                    {items
+                      .filter(
+                        item =>
+                          item.name.toLowerCase().indexOf(inputValue.toLowerCase()) > -1
+                      )
+                      .map((item, index) => (
+                        <li
+                          key={item.name}
+                          {...getItemProps({
+                            item,
+                            index,
+                            style: {
+                              cursor: 'pointer',
+                              padding: '6px 12px',
+                              backgroundColor:
+                                index === highlightedIndex
+                                  ? 'rgba(0, 0, 0, 0.02)'
+                                  : undefined,
+                            },
+                          })}
+                        >
+                          {item.name}
+                        </li>
+                      ))}
+                  </ul>
+                </div>
+              )}
+            </div>
+          );
+        }}
+      </AutoComplete>
+    );
+
+    input = wrapper.find('input');
+  });
+
+  it('shows dropdown menu when input has focus', function() {
+    input.simulate('focus');
+    expect(wrapper.state('isOpen')).toBe(true);
+    expect(wrapper.find('li')).toHaveLength(3);
+  });
+
+  it('hides dropdown menu when input is blurred', function() {
+    jest.useFakeTimers();
+    input.simulate('focus');
+    input.simulate('blur');
+    expect(wrapper.state('isOpen')).toBe(true);
+    expect(wrapper.find('li')).toHaveLength(3);
+    jest.runAllTimers();
+
+    expect(wrapper.state('isOpen')).toBe(false);
+    expect(wrapper.find('li')).toHaveLength(0);
+  });
+
+  it('can close dropdown menu when Escape is pressed', function() {
+    input.simulate('focus');
+    expect(wrapper.state('isOpen')).toBe(true);
+
+    input.simulate('keyDown', {key: 'Escape'});
+    expect(wrapper.state('isOpen')).toBe(false);
+  });
+
+  it('reopens dropdown menu after Escape is pressed and input is changed', function() {
+    input.simulate('focus');
+    expect(wrapper.state('isOpen')).toBe(true);
+
+    input.simulate('keyDown', {key: 'Escape'});
+    expect(wrapper.state('isOpen')).toBe(false);
+
+    input.simulate('change', {target: {value: 'a'}});
+    expect(wrapper.state('isOpen')).toBe(true);
+    expect(wrapper.instance().items.size).toBe(3);
+  });
+
+  it('reopens dropdown menu after item is selectted and then input is changed', function() {
+    input.simulate('focus');
+    expect(wrapper.state('isOpen')).toBe(true);
+
+    input.simulate('change', {target: {value: 'eapp'}});
+    expect(wrapper.state('isOpen')).toBe(true);
+    expect(wrapper.instance().items.size).toBe(1);
+    input.simulate('keyDown', {key: 'Enter'});
+    expect(wrapper.state('isOpen')).toBe(false);
+
+    input.simulate('change', {target: {value: 'app'}});
+    expect(wrapper.state('isOpen')).toBe(true);
+    expect(wrapper.instance().items.size).toBe(2);
+  });
+
+  it('selects dropdown item by clicking and sets input to selected value', function() {
+    input.simulate('focus');
+    expect(wrapper.state('isOpen')).toBe(true);
+    expect(wrapper.instance().items.size).toBe(3);
+
+    wrapper
+      .find('li')
+      .at(1)
+      .simulate('click');
+    expect(mocks.onSelect).toHaveBeenCalledWith(items[1]);
+
+    expect(wrapper.state('inputValue')).toBe('Pineapple');
+    expect(wrapper.instance().items.size).toBe(0);
+  });
+
+  it('can navigate dropdown items with keyboard and select with "Enter" keypress', function() {
+    input.simulate('focus');
+    expect(wrapper.state('isOpen')).toBe(true);
+    expect(wrapper.state('highlightedIndex')).toBe(0);
+
+    input.simulate('keyDown', {key: 'ArrowDown'});
+    expect(wrapper.state('highlightedIndex')).toBe(1);
+
+    input.simulate('keyDown', {key: 'ArrowDown'});
+    expect(wrapper.state('highlightedIndex')).toBe(2);
+
+    expect(wrapper.instance().items.size).toBe(3);
+    input.simulate('keyDown', {key: 'Enter'});
+
+    expect(mocks.onSelect).toHaveBeenCalledWith(items[2]);
+    expect(wrapper.instance().items.size).toBe(0);
+    expect(wrapper.state('inputValue')).toBe('Orange');
+  });
+
+  it('respects list bounds when navigating filtered items with arrow keys', function() {
+    input.simulate('focus');
+    expect(wrapper.state('isOpen')).toBe(true);
+    expect(wrapper.state('highlightedIndex')).toBe(0);
+
+    input.simulate('keyDown', {key: 'ArrowUp'});
+    expect(wrapper.state('highlightedIndex')).toBe(0);
+
+    input.simulate('keyDown', {key: 'ArrowDown'});
+    expect(wrapper.state('highlightedIndex')).toBe(1);
+
+    input.simulate('keyDown', {key: 'ArrowDown'});
+    expect(wrapper.state('highlightedIndex')).toBe(2);
+
+    input.simulate('keyDown', {key: 'ArrowDown'});
+    expect(wrapper.state('highlightedIndex')).toBe(2);
+
+    input.simulate('keyDown', {key: 'ArrowUp'});
+    expect(wrapper.state('highlightedIndex')).toBe(1);
+
+    input.simulate('keyDown', {key: 'ArrowUp'});
+    expect(wrapper.state('highlightedIndex')).toBe(0);
+
+    input.simulate('keyDown', {key: 'ArrowUp'});
+    expect(wrapper.state('highlightedIndex')).toBe(0);
+
+    expect(wrapper.instance().items.size).toBe(3);
+  });
+
+  it('can filter items and then navigate with keyboard', function() {
+    input.simulate('focus');
+    expect(wrapper.state('isOpen')).toBe(true);
+    expect(wrapper.state('highlightedIndex')).toBe(0);
+    expect(wrapper.instance().items.size).toBe(3);
+
+    input.simulate('change', {target: {value: 'a'}});
+    expect(wrapper.state('highlightedIndex')).toBe(0);
+    expect(wrapper.state('inputValue')).toBe('a');
+    // Apple, pineapple, orange
+    expect(wrapper.instance().items.size).toBe(3);
+
+    input.simulate('change', {target: {value: 'ap'}});
+    expect(wrapper.state('highlightedIndex')).toBe(0);
+    expect(wrapper.state('inputValue')).toBe('ap');
+    expect(autoCompleteState[autoCompleteState.length - 1].inputValue).toBe('ap');
+    // Apple, pineapple
+    expect(wrapper.instance().items.size).toBe(2);
+
+    input.simulate('keyDown', {key: 'ArrowDown'});
+    expect(wrapper.state('highlightedIndex')).toBe(1);
+
+    input.simulate('keyDown', {key: 'ArrowDown'});
+    expect(wrapper.state('highlightedIndex')).toBe(1);
+    expect(wrapper.instance().items.size).toBe(2);
+
+    input.simulate('keyDown', {key: 'Enter'});
+    expect(mocks.onSelect).toHaveBeenCalledWith(items[1]);
+    expect(wrapper.instance().items.size).toBe(0);
+    expect(wrapper.state('inputValue')).toBe('Pineapple');
+  });
+});
diff --git a/tests/js/spec/utils/recreateRoute.spec.jsx b/tests/js/spec/utils/recreateRoute.spec.jsx
new file mode 100644
index 0000000000..224efa0e60
--- /dev/null
+++ b/tests/js/spec/utils/recreateRoute.spec.jsx
@@ -0,0 +1,55 @@
+import recreateRoute from 'app/utils/recreateRoute';
+
+const routes = [
+  {path: '/', childRoutes: []},
+  {newnew: true, path: '/settings/', name: 'Settings'},
+  {name: 'Organizations', path: 'organization/'},
+  {path: ':orgId/', childRoutes: []},
+  {childRoutes: []},
+  {path: 'api-keys/', name: 'API Key'},
+];
+
+const projectRoutes = [
+  {path: '/', childRoutes: []},
+  {newnew: true, path: '/settings/', name: 'Settings', indexRoute: {}, childRoutes: []},
+  {path: 'organization/', indexRoute: {}, childRoutes: []},
+  {name: 'Organization', path: ':orgId/', childRoutes: []},
+  {path: 'project/', indexRoute: {}, childRoutes: []},
+  {name: 'Project', path: ':projectId/', childRoutes: []},
+  {name: 'Alerts', path: 'alerts/'},
+];
+
+const params = {
+  orgId: 'org-slug',
+  projectId: 'project-slug',
+};
+
+describe('recreateRoute', function() {
+  it('returns correct path to a route object', function() {
+    expect(recreateRoute(routes[5], {routes, params})).toBe(
+      '/settings/organization/org-slug/api-keys/'
+    );
+
+    expect(recreateRoute(projectRoutes[6], {routes: projectRoutes, params})).toBe(
+      '/settings/organization/org-slug/project/project-slug/alerts/'
+    );
+  });
+
+  it('returns correct path to a string (at the end of the routes)', function() {
+    expect(recreateRoute('test/', {routes, params})).toBe(
+      '/settings/organization/org-slug/api-keys/test/'
+    );
+  });
+
+  it('returns correct path to a string after the 2nd to last route', function() {
+    expect(recreateRoute('test/', {routes, params, stepBack: -2})).toBe(
+      '/settings/organization/org-slug/test/'
+    );
+  });
+
+  it('switches to new org but keeps current route', function() {
+    expect(recreateRoute(routes[5], {routes, params: {orgId: 'new-org'}})).toBe(
+      '/settings/organization/new-org/api-keys/'
+    );
+  });
+});
diff --git a/tests/js/spec/utils/replaceRouterParams.spec.jsx b/tests/js/spec/utils/replaceRouterParams.spec.jsx
new file mode 100644
index 0000000000..cf475ec6ef
--- /dev/null
+++ b/tests/js/spec/utils/replaceRouterParams.spec.jsx
@@ -0,0 +1,29 @@
+import replaceRouterParams from 'app/utils/replaceRouterParams';
+
+const params = {
+  orgId: 'org-slug',
+  projectId: 'project-slug',
+};
+
+describe('replaceRouterParams', function() {
+  it('replaces `:orgId` in a path', function() {
+    expect(replaceRouterParams('/path/to/:orgId/test', params)).toBe(
+      '/path/to/org-slug/test'
+    );
+    expect(replaceRouterParams('/path/to/:orgId/test/:projectId', params)).toBe(
+      '/path/to/org-slug/test/project-slug'
+    );
+  });
+
+  it('does not replace a path param if it doesnt exist in params object', function() {
+    expect(replaceRouterParams('/path/to/:invalidId/test/', params)).toBe(
+      '/path/to/:invalidId/test/'
+    );
+  });
+
+  it('requires `:` prefix in route path', function() {
+    expect(replaceRouterParams('/path/to/orgId/test/', params)).toBe(
+      '/path/to/orgId/test/'
+    );
+  });
+});
diff --git a/tests/js/spec/views/__snapshots__/organizationAccessRequests.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationAccessRequests.spec.jsx.snap
index a3ff253d2a..f19a959c19 100644
--- a/tests/js/spec/views/__snapshots__/organizationAccessRequests.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationAccessRequests.spec.jsx.snap
@@ -3,66 +3,65 @@
 exports[`OrganizationAccessRequests renders empty 1`] = `null`;
 
 exports[`OrganizationAccessRequests renders list 1`] = `
-<div
-  className="panel panel-default horizontal-scroll"
->
-  <table
-    className="table"
-    id="access_request_list"
+<Styled(div)>
+  <PanelHeader
+    disablePadding={true}
   >
-    <thead>
-      <tr>
-        <th
-          colSpan="2"
-        >
-          Pending Access Requests
-        </th>
-      </tr>
-    </thead>
-    <tbody>
-      <tr>
-        <td>
+    <Flex>
+      <Box
+        flex="1"
+        px={2}
+      >
+        Pending Access Requests
+      </Box>
+    </Flex>
+  </PanelHeader>
+  <Styled(div)>
+    <WithTheme(Styled(SpreadLayout))>
+      <Box
+        flex="1"
+        p={2}
+      >
+        <span>
+          <strong>
+            sentry@test.com
+          </strong>
           <span>
-            <strong>
-              sentry@test.com
-            </strong>
-            <span>
-               requests access to the 
-            </span>
-            <strong>
-              Team Name
-            </strong>
-            <span>
-               team.
-            </span>
+             requests access to the 
           </span>
-        </td>
-        <td
-          className="align-right"
-        >
-          <Button
-            disabled={false}
-            onClick={[Function]}
-            priority="primary"
-            size="small"
-            style={
-              Object {
-                "marginRight": 4,
-              }
+          <strong>
+            Team Name
+          </strong>
+          <span>
+             team.
+          </span>
+        </span>
+      </Box>
+      <Box
+        p={2}
+      >
+        <Button
+          disabled={false}
+          onClick={[Function]}
+          priority="primary"
+          size="small"
+          style={
+            Object {
+              "marginRight": 4,
             }
-          >
-            Approve
-          </Button>
-          <Button
-            disabled={false}
-            onClick={[Function]}
-            size="small"
-          >
-            Deny
-          </Button>
-        </td>
-      </tr>
-    </tbody>
-  </table>
-</div>
+          }
+        >
+          Approve
+        </Button>
+        <Button
+          disabled={false}
+          onClick={[Function]}
+          size="small"
+        >
+          Deny
+        </Button>
+      </Box>
+    </WithTheme(Styled(SpreadLayout))>
+  </Styled(div)>
+</Styled(div)>
 `;
diff --git a/tests/js/spec/views/__snapshots__/organizationApiKeysList.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationApiKeysList.spec.jsx.snap
new file mode 100644
index 0000000000..81fb3e2240
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/organizationApiKeysList.spec.jsx.snap
@@ -0,0 +1,604 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`OrganizationApiKeysList renders 1`] = `
+.glamor-8 {
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+  font-size: 14px;
+  box-shadow: inset 0 -1px 0;
+  margin-bottom: 30px;
+}
+
+.glamor-4 {
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+}
+
+.glamor-2 {
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+  font-weight: bold;
+  border-bottom: 3px solid;
+}
+
+.glamor-0 {
+  padding: 14px 0;
+}
+
+.glamor-6 {
+  margin-right: 4px;
+}
+
+.glamor-10 {
+  line-height: 1.8;
+}
+
+.glamor-40 {
+  background: #fff;
+  border: 1px solid;
+  margin-bottom: 30px;
+  position: relative;
+}
+
+.glamor-24 {
+  border-bottom: 1px solid;
+  border-radius: 0 0;
+  background: padding:15px 0;
+  text-transform: uppercase;
+  font-size: 13px;
+}
+
+.glamor-22 {
+  font-size: 12px;
+  font-weight: 600;
+  text-transform: uppercase;
+  margin-bottom: 20px;
+  font-size: inherit;
+  text-transform: inherit;
+  margin: 0;
+}
+
+.glamor-20 {
+  box-sizing: border-box;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+}
+
+.glamor-16 {
+  box-sizing: border-box;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+}
+
+.glamor-12 {
+  box-sizing: border-box;
+  padding-left: 16px;
+  padding-right: 16px;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+}
+
+.glamor-14 {
+  box-sizing: border-box;
+  padding-left: 16px;
+  padding-right: 16px;
+  -webkit-flex: 2;
+  -ms-flex: 2;
+  flex: 2;
+}
+
+.glamor-18 {
+  box-sizing: border-box;
+  width: 100px;
+  padding-left: 16px;
+  padding-right: 16px;
+}
+
+.glamor-34 {
+  box-sizing: border-box;
+  padding-top: 8px;
+  padding-bottom: 8px;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+  border-bottom: 1px solid;
+}
+
+.glamor-34:last-child {
+  border: 0;
+}
+
+<OrganizationApiKeysList
+  keys={
+    Array [
+      Object {
+        "allowed_origins": "",
+        "id": 1,
+        "key": "aa624bcc12024702a202cd90be5feda0",
+        "label": "Default",
+        "scope_list": Array [
+          "project:read",
+          "event:read",
+          "team:read",
+          "member:read",
+        ],
+        "status": 0,
+      },
+    ]
+  }
+  params={
+    Object {
+      "orgId": "org-slug",
+    }
+  }
+  routes={
+    Array [
+      Object {
+        "path": "/",
+      },
+      Object {
+        "path": "/:orgId/",
+      },
+      Object {
+        "path": "/organizations/:orgId/",
+      },
+      Object {
+        "name": "API Key",
+        "path": "api-keys/",
+      },
+    ]
+  }
+>
+  <div>
+    <SettingsPageHeading
+      action={
+        <Button
+          busy={undefined}
+          disabled={false}
+          onClick={undefined}
+          priority="link"
+        >
+          <Styled(span)
+            className="icon-plus"
+          />
+           
+          New API Key
+        </Button>
+      }
+      label="API Keys"
+    >
+      <Styled(div)>
+        <div
+          className="glamor-8 glamor-9"
+        >
+          <Styled(div)>
+            <div
+              className="glamor-4 glamor-5"
+            >
+              <Styled(div)>
+                <div
+                  className="glamor-2 glamor-3"
+                >
+                  <Styled(span)>
+                    <span
+                      className="glamor-0 glamor-1"
+                    >
+                      API Keys
+                    </span>
+                  </Styled(span)>
+                </div>
+              </Styled(div)>
+            </div>
+          </Styled(div)>
+          <div>
+            <Button
+              disabled={false}
+              priority="link"
+            >
+              <button
+                className="button button-link"
+                disabled={false}
+                onClick={[Function]}
+                role="button"
+              >
+                <FlowLayout
+                  truncate={false}
+                >
+                  <div
+                    className="flow-layout"
+                  >
+                    <span
+                      className="button-label"
+                    >
+                      <Styled(span)
+                        className="icon-plus"
+                      >
+                        <span
+                          className="icon-plus glamor-6 glamor-7"
+                        />
+                      </Styled(span)>
+                       
+                      New API Key
+                    </span>
+                  </div>
+                </FlowLayout>
+              </button>
+            </Button>
+          </div>
+        </div>
+      </Styled(div)>
+    </SettingsPageHeading>
+    <Styled(p)>
+      <p
+        className="glamor-10 glamor-11"
+      >
+        <span>
+          <span>
+            API keys grant access to the 
+          </span>
+          <ExternalLink
+            href="https://docs.sentry.io/hosted/api/"
+            rel="noreferrer noopener"
+            target="_blank"
+          >
+            <a
+              href="https://docs.sentry.io/hosted/api/"
+              rel="noreferrer noopener"
+              target="_blank"
+            >
+              <span>
+                developer web API
+              </span>
+            </a>
+          </ExternalLink>
+          <span>
+            .
+          If you're looking to configure a Sentry client, you'll need a
+          client key which is available in your project settings.
+          </span>
+        </span>
+      </p>
+    </Styled(p)>
+    <div
+      className="alert alert-block alert-info"
+    >
+      <span>
+        <span>
+          psst. Until Sentry supports OAuth, you might want to switch to using 
+        </span>
+        <Link
+          to="/api/"
+        >
+          <a
+            href="/api/"
+          >
+            <span>
+              Auth Tokens
+            </span>
+          </a>
+        </Link>
+        <span>
+           instead.
+        </span>
+      </span>
+    </div>
+    <Styled(div)>
+      <div
+        className="glamor-40 glamor-41"
+      >
+        <PanelHeader
+          disablePadding={true}
+        >
+          <Styled(div)
+            disablePadding={true}
+          >
+            <div
+              className="glamor-24 glamor-25"
+            >
+              <Styled(div)>
+                <div
+                  className="glamor-22 glamor-23"
+                >
+                  <Flex
+                    align="center"
+                  >
+                    <Base
+                      align="center"
+                      className="glamor-20"
+                    >
+                      <div
+                        className="glamor-20"
+                        is={null}
+                      >
+                        <Flex
+                          align="center"
+                          flex="1"
+                        >
+                          <Base
+                            align="center"
+                            className="glamor-16"
+                            flex="1"
+                          >
+                            <div
+                              className="glamor-16"
+                              is={null}
+                            >
+                              <Box
+                                flex="1"
+                                px={2}
+                              >
+                                <Base
+                                  className="glamor-12"
+                                  flex="1"
+                                  px={2}
+                                >
+                                  <div
+                                    className="glamor-12"
+                                    is={null}
+                                  >
+                                    Name
+                                  </div>
+                                </Base>
+                              </Box>
+                              <Box
+                                flex="2"
+                                px={2}
+                              >
+                                <Base
+                                  className="glamor-14"
+                                  flex="2"
+                                  px={2}
+                                >
+                                  <div
+                                    className="glamor-14"
+                                    is={null}
+                                  >
+                                    Key
+                                  </div>
+                                </Base>
+                              </Box>
+                            </div>
+                          </Base>
+                        </Flex>
+                        <Box
+                          px={2}
+                          w={100}
+                        >
+                          <Base
+                            className="glamor-18"
+                            px={2}
+                            w={100}
+                          >
+                            <div
+                              className="glamor-18"
+                              is={null}
+                            >
+                              Actions
+                            </div>
+                          </Base>
+                        </Box>
+                      </div>
+                    </Base>
+                  </Flex>
+                </div>
+              </Styled(div)>
+            </div>
+          </Styled(div)>
+        </PanelHeader>
+        <Styled(div)>
+          <div
+            className="glamor-38 glamor-39"
+          >
+            <Styled(Base)
+              align="center"
+              py={1}
+            >
+              <Base
+                align="center"
+                className="glamor-34 glamor-35"
+                py={1}
+              >
+                <div
+                  className="glamor-34 glamor-35"
+                  is={null}
+                >
+                  <Flex
+                    align="center"
+                    flex="1"
+                  >
+                    <Base
+                      align="center"
+                      className="glamor-16"
+                      flex="1"
+                    >
+                      <div
+                        className="glamor-16"
+                        is={null}
+                      >
+                        <Box
+                          align="center"
+                          flex="1"
+                          px={2}
+                        >
+                          <Base
+                            align="center"
+                            className="glamor-12"
+                            flex="1"
+                            px={2}
+                          >
+                            <div
+                              className="glamor-12"
+                              is={null}
+                            >
+                              <Link
+                                to="/organizations/org-slug/api-keys/1/"
+                              >
+                                <a
+                                  href="/organizations/org-slug/api-keys/1/"
+                                >
+                                  Default
+                                </a>
+                              </Link>
+                            </div>
+                          </Base>
+                        </Box>
+                        <Box
+                          flex="2"
+                          px={2}
+                        >
+                          <Base
+                            className="glamor-14"
+                            flex="2"
+                            px={2}
+                          >
+                            <div
+                              className="glamor-14"
+                              is={null}
+                            >
+                              <div
+                                className="form-control disabled auto-select"
+                              >
+                                aa624bcc12024702a202cd90be5feda0
+                              </div>
+                            </div>
+                          </Base>
+                        </Box>
+                      </div>
+                    </Base>
+                  </Flex>
+                  <Box
+                    px={2}
+                    w={100}
+                  >
+                    <Base
+                      className="glamor-18"
+                      px={2}
+                      w={100}
+                    >
+                      <div
+                        className="glamor-18"
+                        is={null}
+                      >
+                        <LinkWithConfirmation
+                          className="btn btn-default btn-sm"
+                          message="Are you sure you want to remove this API key?"
+                          onConfirm={[Function]}
+                          title="Remove API Key?"
+                        >
+                          <Confirm
+                            cancelText="Cancel"
+                            confirmText="Confirm"
+                            message="Are you sure you want to remove this API key?"
+                            onConfirm={[Function]}
+                            priority="primary"
+                          >
+                            <a
+                              className="btn btn-default btn-sm"
+                              onClick={[Function]}
+                              title="Remove API Key?"
+                            >
+                              <span
+                                className="icon-trash"
+                              />
+                              <Modal
+                                animation={false}
+                                autoFocus={true}
+                                backdrop={true}
+                                bsClass="modal"
+                                dialogComponentClass={[Function]}
+                                enforceFocus={true}
+                                keyboard={true}
+                                manager={
+                                  ModalManager {
+                                    "containers": Array [],
+                                    "data": Array [],
+                                    "handleContainerOverflow": true,
+                                    "hideSiblingNodes": true,
+                                    "modals": Array [],
+                                  }
+                                }
+                                onHide={[Function]}
+                                renderBackdrop={[Function]}
+                                restoreFocus={true}
+                                show={false}
+                              >
+                                <Modal
+                                  autoFocus={true}
+                                  backdrop={true}
+                                  backdropClassName="modal-backdrop"
+                                  backdropTransitionTimeout={150}
+                                  containerClassName="modal-open"
+                                  dialogTransitionTimeout={300}
+                                  enforceFocus={true}
+                                  keyboard={true}
+                                  manager={
+                                    ModalManager {
+                                      "containers": Array [],
+                                      "data": Array [],
+                                      "handleContainerOverflow": true,
+                                      "hideSiblingNodes": true,
+                                      "modals": Array [],
+                                    }
+                                  }
+                                  onEntering={[Function]}
+                                  onExited={[Function]}
+                                  onHide={[Function]}
+                                  renderBackdrop={[Function]}
+                                  restoreFocus={true}
+                                  show={false}
+                                />
+                              </Modal>
+                            </a>
+                          </Confirm>
+                        </LinkWithConfirmation>
+                      </div>
+                    </Base>
+                  </Box>
+                </div>
+              </Base>
+            </Styled(Base)>
+          </div>
+        </Styled(div)>
+      </div>
+    </Styled(div)>
+  </div>
+</OrganizationApiKeysList>
+`;
diff --git a/tests/js/spec/views/__snapshots__/organizationApiKeysView.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationApiKeysView.spec.jsx.snap
deleted file mode 100644
index bc6c1833dd..0000000000
--- a/tests/js/spec/views/__snapshots__/organizationApiKeysView.spec.jsx.snap
+++ /dev/null
@@ -1,266 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`OrganizationApiKeysView renders 1`] = `
-<OrganizationApiKeysView
-  params={
-    Object {
-      "orgId": "org-slug",
-    }
-  }
->
-  <DocumentTitle
-    title="Organization Name API Keys"
-  >
-    <div>
-      <SpreadLayout
-        center={true}
-        className="page-header"
-        responsive={false}
-      >
-        <div
-          className="spread-layout page-header center"
-        >
-          <h3>
-            Api Keys
-          </h3>
-          <Button
-            disabled={false}
-            onClick={[Function]}
-            priority="primary"
-            type="button"
-          >
-            <button
-              className="button button-primary"
-              disabled={false}
-              onClick={[Function]}
-              role="button"
-              type="button"
-            >
-              <FlowLayout
-                truncate={false}
-              >
-                <div
-                  className="flow-layout"
-                >
-                  <span
-                    className="button-label"
-                  >
-                    New API Key
-                  </span>
-                </div>
-              </FlowLayout>
-            </button>
-          </Button>
-        </div>
-      </SpreadLayout>
-      <p>
-        API keys grant access to the
-         
-        <ExternalLink
-          href="https://docs.sentry.io/hosted/api/"
-          rel="noreferrer noopener"
-          target="_blank"
-        >
-          <a
-            href="https://docs.sentry.io/hosted/api/"
-            rel="noreferrer noopener"
-            target="_blank"
-          >
-            developer web API
-          </a>
-        </ExternalLink>
-        . If you're looking to configure a Sentry client, you'll need a client key which is available in your project settings.
-      </p>
-      <div
-        className="alert alert-block alert-info"
-      >
-        psst. Until Sentry supports OAuth, you might want to switch to using
-         
-        <Link
-          to="/api/"
-        >
-          <Link
-            onlyActiveOnIndex={false}
-            style={Object {}}
-            to="/api/"
-          >
-            <a
-              onClick={[Function]}
-              style={Object {}}
-            >
-              Auth Tokens
-            </a>
-          </Link>
-        </Link>
-         instead.
-      </div>
-      <table
-        className="table api-key-list"
-      >
-        <colgroup>
-          <col
-            style={
-              Object {
-                "width": "40%",
-              }
-            }
-          />
-          <col
-            style={
-              Object {
-                "width": "40%",
-              }
-            }
-          />
-          <col
-            style={
-              Object {
-                "width": "20%",
-              }
-            }
-          />
-        </colgroup>
-        <tbody>
-          <tr>
-            <td>
-              <h5>
-                <Link
-                  to="/organizations/org-slug/api-keys/1"
-                >
-                  <Link
-                    onlyActiveOnIndex={false}
-                    style={Object {}}
-                    to="/organizations/org-slug/api-keys/1"
-                  >
-                    <a
-                      onClick={[Function]}
-                      style={Object {}}
-                    >
-                      Default
-                    </a>
-                  </Link>
-                </Link>
-              </h5>
-            </td>
-            <td>
-              <div
-                className="form-control disabled auto-select"
-              >
-                aa624bcc12024702a202cd90be5feda0
-              </div>
-            </td>
-            <td
-              className="align-right"
-            >
-              <Link
-                className="btn btn-default btn-sm"
-                style={
-                  Object {
-                    "marginRight": 4,
-                  }
-                }
-                to="/organizations/org-slug/api-keys/1"
-              >
-                <Link
-                  className="btn btn-default btn-sm"
-                  onlyActiveOnIndex={false}
-                  style={
-                    Object {
-                      "marginRight": 4,
-                    }
-                  }
-                  to="/organizations/org-slug/api-keys/1"
-                >
-                  <a
-                    className="btn btn-default btn-sm"
-                    onClick={[Function]}
-                    style={
-                      Object {
-                        "marginRight": 4,
-                      }
-                    }
-                  >
-                    Edit Key
-                  </a>
-                </Link>
-              </Link>
-              <LinkWithConfirmation
-                className="btn btn-default btn-sm"
-                message="Are you sure you want to remove this API key?"
-                onConfirm={[Function]}
-                title="Remove API Key?"
-              >
-                <Confirm
-                  cancelText="Cancel"
-                  confirmText="Confirm"
-                  message="Are you sure you want to remove this API key?"
-                  onConfirm={[Function]}
-                  priority="primary"
-                >
-                  <a
-                    className="btn btn-default btn-sm"
-                    onClick={[Function]}
-                    title="Remove API Key?"
-                  >
-                    <span
-                      className="icon-trash"
-                    />
-                    <Modal
-                      animation={false}
-                      autoFocus={true}
-                      backdrop={true}
-                      bsClass="modal"
-                      dialogComponentClass={[Function]}
-                      enforceFocus={true}
-                      keyboard={true}
-                      manager={
-                        ModalManager {
-                          "containers": Array [],
-                          "data": Array [],
-                          "handleContainerOverflow": true,
-                          "hideSiblingNodes": true,
-                          "modals": Array [],
-                        }
-                      }
-                      onHide={[Function]}
-                      renderBackdrop={[Function]}
-                      restoreFocus={true}
-                      show={false}
-                    >
-                      <Modal
-                        autoFocus={true}
-                        backdrop={true}
-                        backdropClassName="modal-backdrop"
-                        backdropTransitionTimeout={150}
-                        containerClassName="modal-open"
-                        dialogTransitionTimeout={300}
-                        enforceFocus={true}
-                        keyboard={true}
-                        manager={
-                          ModalManager {
-                            "containers": Array [],
-                            "data": Array [],
-                            "handleContainerOverflow": true,
-                            "hideSiblingNodes": true,
-                            "modals": Array [],
-                          }
-                        }
-                        onEntering={[Function]}
-                        onExited={[Function]}
-                        onHide={[Function]}
-                        renderBackdrop={[Function]}
-                        restoreFocus={true}
-                        show={false}
-                      />
-                    </Modal>
-                  </a>
-                </Confirm>
-              </LinkWithConfirmation>
-            </td>
-          </tr>
-        </tbody>
-      </table>
-    </div>
-  </DocumentTitle>
-</OrganizationApiKeysView>
-`;
diff --git a/tests/js/spec/views/__snapshots__/organizationAuthList.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationAuthList.spec.jsx.snap
new file mode 100644
index 0000000000..6b4bf4a37a
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/organizationAuthList.spec.jsx.snap
@@ -0,0 +1,106 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`OrganizationAuthList renders 1`] = `
+<div
+  className="sso"
+>
+  <h2>
+    Authentication
+  </h2>
+  <div
+    className="box"
+  >
+    <div
+      className="box-header"
+    >
+      <h3>
+        Choose a provider
+      </h3>
+    </div>
+    <div
+      className="box-content with-padding"
+    >
+      <p>
+        <span>
+          <span>
+            Get started with Single Sign-on for your organization by selecting a
+              provider. For more information on SSO please see our 
+          </span>
+          <ExternalLink
+            href="https://docs.sentry.io/learn/sso/"
+            rel="noreferrer noopener"
+            target="_blank"
+          >
+            <span>
+              documentation
+            </span>
+          </ExternalLink>
+        </span>
+        .
+      </p>
+      <ul
+        className="simple-list list-unstyled"
+      >
+        <ProviderItem
+          onConfigure={[Function]}
+          providerKey="dummy"
+          providerName="Dummy"
+        />
+      </ul>
+    </div>
+  </div>
+</div>
+`;
+
+exports[`OrganizationAuthList renders with no providers 1`] = `
+<div
+  className="sso"
+>
+  <h2>
+    Authentication
+  </h2>
+  <div
+    className="box"
+  >
+    <div
+      className="box-header"
+    >
+      <h3>
+        Choose a provider
+      </h3>
+    </div>
+    <div
+      className="box-content with-padding"
+    >
+      <p>
+        <span>
+          <span>
+            Get started with Single Sign-on for your organization by selecting a
+              provider. For more information on SSO please see our 
+          </span>
+          <ExternalLink
+            href="https://docs.sentry.io/learn/sso/"
+            rel="noreferrer noopener"
+            target="_blank"
+          >
+            <span>
+              documentation
+            </span>
+          </ExternalLink>
+        </span>
+        .
+      </p>
+      <p
+        style={
+          Object {
+            "padding": 50,
+            "textAlign": "center",
+          }
+        }
+      >
+        No authentication providers are available.
+      </p>
+    </div>
+  </div>
+</div>
+`;
diff --git a/tests/js/spec/views/__snapshots__/organizationAuthProvider.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationAuthProvider.spec.jsx.snap
new file mode 100644
index 0000000000..a7aa97e32b
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/organizationAuthProvider.spec.jsx.snap
@@ -0,0 +1,536 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`OrganizationAuthProvider renders 1`] = `
+<div>
+  <h3>
+    <span>
+      <span>
+        dummy
+      </span>
+      <span>
+         Authentication
+      </span>
+    </span>
+  </h3>
+  <div
+    className="box"
+  >
+    <div
+      className="box-content with-padding"
+    >
+      <legend
+        style={
+          Object {
+            "marginTop": 0,
+          }
+        }
+      >
+        Login URL
+      </legend>
+      <p>
+        While Sentry will try to be clever about directing members to the
+              appropriate login form, you're safest just to hit up your
+              organization-specific login when visiting the app
+        :
+      </p>
+      <pre>
+        <a
+          href="http://loginUrl"
+        >
+          http://loginUrl
+        </a>
+      </pre>
+      <div
+        dangerouslySetInnerHTML={
+          Object {
+            "__html": "",
+          }
+        }
+      />
+      <legend>
+        General Settings
+      </legend>
+      <ApiForm
+        apiEndpoint="/organizations/org-slug/auth-provider/"
+        apiMethod="PUT"
+        cancelLabel="Cancel"
+        className="form-stacked"
+        footerClass="form-actions align-right"
+        initialData={
+          Object {
+            "auth_provider": Object {
+              "id": "1",
+              "provider": "dummy",
+            },
+            "content": "",
+            "default_role": "member",
+            "login_url": "http://loginUrl",
+            "pending_links_count": 0,
+            "provider_name": "dummy",
+            "require_link": true,
+          }
+        }
+        onSubmit={[Function]}
+        requireChanges={false}
+        submitDisabled={false}
+        submitLabel="Save Settings"
+      >
+        <BooleanField
+          disabled={false}
+          help="Require members to use a valid linked SSO account to access this organization"
+          hideErrorMessage={false}
+          label="Require SSO"
+          name="require_link"
+          required={false}
+        />
+        <Select2Field
+          allowClear={false}
+          allowEmpty={false}
+          choices={
+            Array [
+              Array [
+                "member",
+                "Member",
+              ],
+              Array [
+                "billing",
+                "Billing",
+              ],
+              Array [
+                "owner",
+                "Owner",
+              ],
+              Array [
+                "admin",
+                "Admin",
+              ],
+              Array [
+                "manager",
+                "Manager",
+              ],
+            ]
+          }
+          disabled={false}
+          escapeMarkup={true}
+          hideErrorMessage={false}
+          label="Default Role"
+          multiple={false}
+          name="default_role"
+          placeholder="--"
+          required={true}
+        />
+      </ApiForm>
+    </div>
+  </div>
+  <div
+    className="box"
+  >
+    <div
+      className="box-header"
+    >
+      <h3>
+        <span>
+          <span>
+            Disable 
+          </span>
+          <span>
+            dummy
+          </span>
+          <span>
+             Authentication
+          </span>
+        </span>
+      </h3>
+    </div>
+    <div
+      className="box-content with-padding"
+    >
+      <p>
+        Your organization will no longer being able to authenticate with their
+              existing accounts. This will prevent any existing users from logging in
+              unless they have access outside of SSO.
+      </p>
+      <fieldset
+        className="form-actions"
+      >
+        <Button
+          disabled={false}
+          onClick={[Function]}
+          priority="danger"
+        >
+          <span>
+            <span>
+              Disable 
+            </span>
+            <span>
+              dummy
+            </span>
+            <span>
+               Auth
+            </span>
+          </span>
+        </Button>
+      </fieldset>
+    </div>
+  </div>
+</div>
+`;
+
+exports[`OrganizationAuthProvider renders with Unlinked members  1`] = `
+<div>
+  <h3>
+    <span>
+      <span>
+        dummy
+      </span>
+      <span>
+         Authentication
+      </span>
+    </span>
+  </h3>
+  <div
+    className="box"
+  >
+    <div
+      className="box-content with-padding"
+    >
+      <legend
+        style={
+          Object {
+            "marginTop": 0,
+          }
+        }
+      >
+        Login URL
+      </legend>
+      <p>
+        While Sentry will try to be clever about directing members to the
+              appropriate login form, you're safest just to hit up your
+              organization-specific login when visiting the app
+        :
+      </p>
+      <pre>
+        <a
+          href="http://loginUrl"
+        >
+          http://loginUrl
+        </a>
+      </pre>
+      <div>
+        <hr />
+        <h4>
+          Unlinked Members
+        </h4>
+        <Button
+          className="pull-right"
+          disabled={false}
+          onClick={[Function]}
+          priority="primary"
+          style={
+            Object {
+              "marginLeft": 20,
+            }
+          }
+        >
+          Send Reminders
+        </Button>
+        <p>
+          <span>
+            <span>
+              There are currently 
+            </span>
+            <span>
+              4
+            </span>
+            <span>
+               member(s) who have
+                  not yet linked their account with 
+            </span>
+            <span>
+              dummy
+            </span>
+            <span>
+              . Until this
+                  is done they will be unable to access the organization.
+            </span>
+          </span>
+        </p>
+      </div>
+      <div
+        dangerouslySetInnerHTML={
+          Object {
+            "__html": "",
+          }
+        }
+      />
+      <legend>
+        General Settings
+      </legend>
+      <ApiForm
+        apiEndpoint="/organizations/org-slug/auth-provider/"
+        apiMethod="PUT"
+        cancelLabel="Cancel"
+        className="form-stacked"
+        footerClass="form-actions align-right"
+        initialData={
+          Object {
+            "auth_provider": Object {
+              "id": "1",
+              "provider": "dummy",
+            },
+            "content": "",
+            "default_role": "member",
+            "login_url": "http://loginUrl",
+            "pending_links_count": 4,
+            "provider_name": "dummy",
+            "require_link": true,
+          }
+        }
+        onSubmit={[Function]}
+        requireChanges={false}
+        submitDisabled={false}
+        submitLabel="Save Settings"
+      >
+        <BooleanField
+          disabled={false}
+          help="Require members to use a valid linked SSO account to access this organization"
+          hideErrorMessage={false}
+          label="Require SSO"
+          name="require_link"
+          required={false}
+        />
+        <Select2Field
+          allowClear={false}
+          allowEmpty={false}
+          choices={
+            Array [
+              Array [
+                "member",
+                "Member",
+              ],
+              Array [
+                "billing",
+                "Billing",
+              ],
+              Array [
+                "owner",
+                "Owner",
+              ],
+              Array [
+                "admin",
+                "Admin",
+              ],
+              Array [
+                "manager",
+                "Manager",
+              ],
+            ]
+          }
+          disabled={false}
+          escapeMarkup={true}
+          hideErrorMessage={false}
+          label="Default Role"
+          multiple={false}
+          name="default_role"
+          placeholder="--"
+          required={true}
+        />
+      </ApiForm>
+    </div>
+  </div>
+  <div
+    className="box"
+  >
+    <div
+      className="box-header"
+    >
+      <h3>
+        <span>
+          <span>
+            Disable 
+          </span>
+          <span>
+            dummy
+          </span>
+          <span>
+             Authentication
+          </span>
+        </span>
+      </h3>
+    </div>
+    <div
+      className="box-content with-padding"
+    >
+      <p>
+        Your organization will no longer being able to authenticate with their
+              existing accounts. This will prevent any existing users from logging in
+              unless they have access outside of SSO.
+      </p>
+      <fieldset
+        className="form-actions"
+      >
+        <Button
+          disabled={false}
+          onClick={[Function]}
+          priority="danger"
+        >
+          <span>
+            <span>
+              Disable 
+            </span>
+            <span>
+              dummy
+            </span>
+            <span>
+               Auth
+            </span>
+          </span>
+        </Button>
+      </fieldset>
+    </div>
+  </div>
+</div>
+`;
+
+exports[`OrganizationAuthProvider renders with no provider 1`] = `null`;
+
+exports[`OrganizationAuthProvider renders with provider template 1`] = `
+Array [
+  <div
+    className="box-content with-padding"
+  >
+    <legend
+      style={
+        Object {
+          "marginTop": 0,
+        }
+      }
+    >
+      Login URL
+    </legend>
+    <p>
+      While Sentry will try to be clever about directing members to the
+              appropriate login form, you're safest just to hit up your
+              organization-specific login when visiting the app
+      :
+    </p>
+    <pre>
+      <a
+        href="http://loginUrl"
+      >
+        http://loginUrl
+      </a>
+    </pre>
+    <div
+      dangerouslySetInnerHTML={
+        Object {
+          "__html": "<strong>Test</strong>",
+        }
+      }
+    />
+    <legend>
+      General Settings
+    </legend>
+    <ApiForm
+      apiEndpoint="/organizations/org-slug/auth-provider/"
+      apiMethod="PUT"
+      cancelLabel="Cancel"
+      className="form-stacked"
+      footerClass="form-actions align-right"
+      initialData={
+        Object {
+          "auth_provider": Object {
+            "id": "1",
+            "provider": "dummy",
+          },
+          "content": "<strong>Test</strong>",
+          "default_role": "member",
+          "login_url": "http://loginUrl",
+          "pending_links_count": 0,
+          "provider_name": "dummy",
+          "require_link": true,
+        }
+      }
+      onSubmit={[Function]}
+      requireChanges={false}
+      submitDisabled={false}
+      submitLabel="Save Settings"
+    >
+      <BooleanField
+        disabled={false}
+        help="Require members to use a valid linked SSO account to access this organization"
+        hideErrorMessage={false}
+        label="Require SSO"
+        name="require_link"
+        required={false}
+      />
+      <Select2Field
+        allowClear={false}
+        allowEmpty={false}
+        choices={
+          Array [
+            Array [
+              "member",
+              "Member",
+            ],
+            Array [
+              "billing",
+              "Billing",
+            ],
+            Array [
+              "owner",
+              "Owner",
+            ],
+            Array [
+              "admin",
+              "Admin",
+            ],
+            Array [
+              "manager",
+              "Manager",
+            ],
+          ]
+        }
+        disabled={false}
+        escapeMarkup={true}
+        hideErrorMessage={false}
+        label="Default Role"
+        multiple={false}
+        name="default_role"
+        placeholder="--"
+        required={true}
+      />
+    </ApiForm>
+  </div>,
+  <div
+    className="box-content with-padding"
+  >
+    <p>
+      Your organization will no longer being able to authenticate with their
+              existing accounts. This will prevent any existing users from logging in
+              unless they have access outside of SSO.
+    </p>
+    <fieldset
+      className="form-actions"
+    >
+      <Button
+        disabled={false}
+        onClick={[Function]}
+        priority="danger"
+      >
+        <span>
+          <span>
+            Disable 
+          </span>
+          <span>
+            dummy
+          </span>
+          <span>
+             Auth
+          </span>
+        </span>
+      </Button>
+    </fieldset>
+  </div>,
+]
+`;
diff --git a/tests/js/spec/views/__snapshots__/organizationAuthView.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationAuthView.spec.jsx.snap
new file mode 100644
index 0000000000..789b2cb789
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/organizationAuthView.spec.jsx.snap
@@ -0,0 +1,154 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`OrganizationAuthView renders from api 1`] = `
+<div>
+  <h3>
+    <span>
+      <span />
+      <span>
+         Authentication
+      </span>
+    </span>
+  </h3>
+  <div
+    className="box"
+  >
+    <div
+      className="box-content with-padding"
+    >
+      <legend
+        style={
+          Object {
+            "marginTop": 0,
+          }
+        }
+      >
+        Login URL
+      </legend>
+      <p>
+        While Sentry will try to be clever about directing members to the
+              appropriate login form, you're safest just to hit up your
+              organization-specific login when visiting the app
+        :
+      </p>
+      <pre>
+        <a />
+      </pre>
+      <div
+        dangerouslySetInnerHTML={
+          Object {
+            "__html": undefined,
+          }
+        }
+      />
+      <legend>
+        General Settings
+      </legend>
+      <ApiForm
+        apiEndpoint="/organizations/org-slug/auth-provider/"
+        apiMethod="PUT"
+        cancelLabel="Cancel"
+        className="form-stacked"
+        footerClass="form-actions align-right"
+        initialData={Object {}}
+        onSubmit={[Function]}
+        requireChanges={false}
+        submitDisabled={false}
+        submitLabel="Save Settings"
+      >
+        <BooleanField
+          disabled={false}
+          help="Require members to use a valid linked SSO account to access this organization"
+          hideErrorMessage={false}
+          label="Require SSO"
+          name="require_link"
+          required={false}
+        />
+        <Select2Field
+          allowClear={false}
+          allowEmpty={false}
+          choices={
+            Array [
+              Array [
+                "member",
+                "Member",
+              ],
+              Array [
+                "billing",
+                "Billing",
+              ],
+              Array [
+                "owner",
+                "Owner",
+              ],
+              Array [
+                "admin",
+                "Admin",
+              ],
+              Array [
+                "manager",
+                "Manager",
+              ],
+            ]
+          }
+          disabled={false}
+          escapeMarkup={true}
+          hideErrorMessage={false}
+          label="Default Role"
+          multiple={false}
+          name="default_role"
+          placeholder="--"
+          required={true}
+        />
+      </ApiForm>
+    </div>
+  </div>
+  <div
+    className="box"
+  >
+    <div
+      className="box-header"
+    >
+      <h3>
+        <span>
+          <span>
+            Disable 
+          </span>
+          <span />
+          <span>
+             Authentication
+          </span>
+        </span>
+      </h3>
+    </div>
+    <div
+      className="box-content with-padding"
+    >
+      <p>
+        Your organization will no longer being able to authenticate with their
+              existing accounts. This will prevent any existing users from logging in
+              unless they have access outside of SSO.
+      </p>
+      <fieldset
+        className="form-actions"
+      >
+        <Button
+          disabled={false}
+          onClick={[Function]}
+          priority="danger"
+        >
+          <span>
+            <span>
+              Disable 
+            </span>
+            <span />
+            <span>
+               Auth
+            </span>
+          </span>
+        </Button>
+      </fieldset>
+    </div>
+  </div>
+</div>
+`;
diff --git a/tests/js/spec/views/__snapshots__/organizationMembersView.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationMembersView.spec.jsx.snap
index c0fd89fa62..ec2d183137 100644
--- a/tests/js/spec/views/__snapshots__/organizationMembersView.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationMembersView.spec.jsx.snap
@@ -1,6 +1,155 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
 exports[`OrganizationMembersView No Require Link does not have 2fa warning if user has 2fa 1`] = `
+.glamor-6 {
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+  font-size: 14px;
+  box-shadow: inset 0 -1px 0;
+  margin-bottom: 30px;
+}
+
+.glamor-4 {
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+}
+
+.glamor-2 {
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+  font-weight: bold;
+  border-bottom: 3px solid;
+}
+
+.glamor-0 {
+  padding: 14px 0;
+}
+
+.glamor-84 {
+  background: #fff;
+  border: 1px solid;
+  margin-bottom: 30px;
+  position: relative;
+}
+
+.glamor-20 {
+  border-bottom: 1px solid;
+  border-radius: 0 0;
+  background: padding:15px 0;
+  text-transform: uppercase;
+  font-size: 13px;
+}
+
+.glamor-18 {
+  font-size: 12px;
+  font-weight: 600;
+  text-transform: uppercase;
+  margin-bottom: 20px;
+  font-size: inherit;
+  text-transform: inherit;
+  margin: 0;
+}
+
+.glamor-16 {
+  box-sizing: border-box;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+}
+
+.glamor-8 {
+  box-sizing: border-box;
+  padding-left: 16px;
+  padding-right: 16px;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+}
+
+.glamor-10 {
+  box-sizing: border-box;
+  width: 180px;
+  padding-left: 16px;
+  padding-right: 16px;
+}
+
+.glamor-12 {
+  box-sizing: border-box;
+  width: 100px;
+  padding-left: 16px;
+  padding-right: 16px;
+}
+
+.glamor-14 {
+  box-sizing: border-box;
+  width: 120px;
+  padding-left: 16px;
+  padding-right: 16px;
+}
+
+.glamor-38 {
+  box-sizing: border-box;
+  padding-top: 8px;
+  padding-bottom: 8px;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+  border-bottom: 1px solid;
+}
+
+.glamor-38:last-child {
+  border: 0;
+}
+
+.glamor-22 {
+  box-sizing: border-box;
+  padding-left: 16px;
+}
+
+.glamor-30 {
+  box-sizing: border-box;
+  padding-left: 8px;
+  padding-right: 16px;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+}
+
+.glamor-24 {
+  font-size: 16px;
+}
+
+.glamor-28 {
+  font-size: 14px;
+}
+
 <OrganizationMembersView
   canAddMembers={false}
   canRemoveMembers={false}
@@ -35,674 +184,1132 @@ exports[`OrganizationMembersView No Require Link does not have 2fa warning if us
     }
   }
   requireLink={false}
+  routes={Array []}
   status=""
 >
   <DocumentTitle
     title="Organization Name Members"
   >
     <div>
-      <SpreadLayout
-        center={true}
-        className="page-header"
-        responsive={false}
-      >
-        <div
-          className="spread-layout page-header center"
-        >
-          <h3>
-            Members
-          </h3>
+      <SettingsPageHeading
+        action={
           <Button
-            className="pull-right"
             disabled={false}
-            priority="primary"
-            size="small"
-            to="/organization/org-id/members/invite/"
+            priority="link"
+            title={undefined}
+            to="new"
           >
-            <Link
-              className="pull-right button button-primary button-sm"
-              disabled={false}
-              onClick={[Function]}
-              onlyActiveOnIndex={false}
-              role="button"
-              style={Object {}}
-              to="/organization/org-id/members/invite/"
-            >
-              <a
-                className="pull-right button button-primary button-sm"
-                disabled={false}
-                onClick={[Function]}
-                role="button"
-                style={Object {}}
+            <span
+              className="icon-plus"
+            />
+             
+            Invite Member
+          </Button>
+        }
+        label="Members"
+      >
+        <Styled(div)>
+          <div
+            className="glamor-6 glamor-7"
+          >
+            <Styled(div)>
+              <div
+                className="glamor-4 glamor-5"
               >
-                <FlowLayout
-                  truncate={false}
-                >
+                <Styled(div)>
                   <div
-                    className="flow-layout"
+                    className="glamor-2 glamor-3"
                   >
-                    <span
-                      className="button-label"
-                    >
+                    <Styled(span)>
                       <span
-                        className="icon-plus"
-                      />
-                       
-                      Invite Member
-                    </span>
+                        className="glamor-0 glamor-1"
+                      >
+                        Members
+                      </span>
+                    </Styled(span)>
                   </div>
-                </FlowLayout>
-              </a>
-            </Link>
-          </Button>
-        </div>
-      </SpreadLayout>
+                </Styled(div)>
+              </div>
+            </Styled(div)>
+            <div>
+              <Button
+                disabled={false}
+                priority="link"
+                to="new"
+              >
+                <Link
+                  className="button button-link"
+                  disabled={false}
+                  onClick={[Function]}
+                  onlyActiveOnIndex={false}
+                  role="button"
+                  style={Object {}}
+                  to="new"
+                >
+                  <a
+                    className="button button-link"
+                    disabled={false}
+                    onClick={[Function]}
+                    role="button"
+                    style={Object {}}
+                  >
+                    <FlowLayout
+                      truncate={false}
+                    >
+                      <div
+                        className="flow-layout"
+                      >
+                        <span
+                          className="button-label"
+                        >
+                          <span
+                            className="icon-plus"
+                          />
+                           
+                          Invite Member
+                        </span>
+                      </div>
+                    </FlowLayout>
+                  </a>
+                </Link>
+              </Button>
+            </div>
+          </div>
+        </Styled(div)>
+      </SettingsPageHeading>
       <OrganizationAccessRequests
         accessRequestBusy={Map {}}
         onApprove={[Function]}
         onDeny={[Function]}
         requestList={Array []}
       />
-      <div
-        className="panel panel-default horizontal-scroll"
-      >
-        <table
-          className="table member-list"
+      <Styled(div)>
+        <div
+          className="glamor-84 glamor-85"
         >
-          <colgroup>
-            <col
-              width="45%"
-            />
-            <col
-              width="15%"
-            />
-            <col
-              width="15%"
-            />
-            <col
-              width="25%"
-            />
-          </colgroup>
-          <thead>
-            <tr>
-              <th>
-                Member
-              </th>
-              <th>
-                 
-              </th>
-              <th
-                className="squash"
-              >
-                Role
-              </th>
-              <th
-                className="squash"
+          <PanelHeader
+            disablePadding={true}
+          >
+            <Styled(div)
+              disablePadding={true}
+            >
+              <div
+                className="glamor-20 glamor-21"
               >
-                 
-              </th>
-            </tr>
-          </thead>
-          <tbody>
-            <OrganizationMemberRow
-              canAddMembers={true}
-              canRemoveMembers={false}
-              currentUser={
-                Object {
-                  "email": "",
-                  "flags": Object {
-                    "sso:linked": false,
-                  },
-                  "id": "2",
-                  "name": "",
-                  "pending": false,
-                  "roleName": "",
-                  "user": Object {
-                    "email": "sentry2@test.com",
-                    "has2fa": true,
+                <Styled(div)>
+                  <div
+                    className="glamor-18 glamor-19"
+                  >
+                    <Flex
+                      align="center"
+                    >
+                      <Base
+                        align="center"
+                        className="glamor-16"
+                      >
+                        <div
+                          className="glamor-16"
+                          is={null}
+                        >
+                          <Box
+                            flex="1"
+                            px={2}
+                          >
+                            <Base
+                              className="glamor-8"
+                              flex="1"
+                              px={2}
+                            >
+                              <div
+                                className="glamor-8"
+                                is={null}
+                              >
+                                Member
+                              </div>
+                            </Base>
+                          </Box>
+                          <Box
+                            px={2}
+                            w={180}
+                          >
+                            <Base
+                              className="glamor-10"
+                              px={2}
+                              w={180}
+                            >
+                              <div
+                                className="glamor-10"
+                                is={null}
+                              >
+                                Status
+                              </div>
+                            </Base>
+                          </Box>
+                          <Box
+                            px={2}
+                            w={100}
+                          >
+                            <Base
+                              className="glamor-12"
+                              px={2}
+                              w={100}
+                            >
+                              <div
+                                className="glamor-12"
+                                is={null}
+                              >
+                                Role
+                              </div>
+                            </Base>
+                          </Box>
+                          <Box
+                            px={2}
+                            w={120}
+                          >
+                            <Base
+                              className="glamor-14"
+                              px={2}
+                              w={120}
+                            >
+                              <div
+                                className="glamor-14"
+                                is={null}
+                              >
+                                Actions
+                              </div>
+                            </Base>
+                          </Box>
+                        </div>
+                      </Base>
+                    </Flex>
+                  </div>
+                </Styled(div)>
+              </div>
+            </Styled(div)>
+          </PanelHeader>
+          <Styled(div)>
+            <div
+              className="glamor-82 glamor-83"
+            >
+              <OrganizationMemberRow
+                canAddMembers={true}
+                canRemoveMembers={false}
+                currentUser={
+                  Object {
+                    "email": "",
+                    "flags": Object {
+                      "sso:linked": false,
+                    },
                     "id": "2",
-                    "name": "Sentry 2 Name",
-                    "username": "Sentry 2 Username",
-                  },
+                    "name": "",
+                    "pending": false,
+                    "roleName": "",
+                    "user": Object {
+                      "email": "sentry2@test.com",
+                      "has2fa": true,
+                      "id": "2",
+                      "name": "Sentry 2 Name",
+                      "username": "Sentry 2 Username",
+                    },
+                  }
                 }
-              }
-              member={
-                Object {
-                  "email": "",
-                  "flags": Object {
-                    "sso:linked": false,
-                  },
-                  "id": "1",
-                  "name": "",
-                  "pending": false,
-                  "roleName": "",
-                  "user": Object {
-                    "email": "sentry1@test.com",
-                    "has2fa": false,
+                member={
+                  Object {
+                    "email": "",
+                    "flags": Object {
+                      "sso:linked": false,
+                    },
                     "id": "1",
-                    "name": "Sentry 1 Name",
-                    "username": "Sentry 1 Username",
-                  },
+                    "name": "",
+                    "pending": false,
+                    "roleName": "",
+                    "user": Object {
+                      "email": "sentry1@test.com",
+                      "has2fa": false,
+                      "id": "1",
+                      "name": "Sentry 1 Name",
+                      "username": "Sentry 1 Username",
+                    },
+                  }
                 }
-              }
-              memberCanLeave={false}
-              onLeave={[Function]}
-              onRemove={[Function]}
-              onSendInvite={[Function]}
-              orgId="org-id"
-              orgName="Organization Name"
-              requireLink={false}
-            >
-              <tr>
-                <td
-                  className="table-user-info"
-                >
-                  <Avatar
-                    className="avatar"
-                    gravatar={true}
-                    size={64}
-                    user={
-                      Object {
-                        "email": "sentry1@test.com",
-                        "has2fa": false,
-                        "id": "1",
-                        "name": "Sentry 1 Name",
-                        "username": "Sentry 1 Username",
-                      }
-                    }
-                  >
-                    <span
-                      className="avatar"
-                    >
-                      <img
-                        onError={[Function]}
-                        onLoad={[Function]}
-                        src="undefined/avatar/c68ca8af553301ae11c5607b8bb672b4?s=64&d=blank"
-                      />
-                    </span>
-                  </Avatar>
-                  <h5>
-                    <Link
-                      to="/organizations/org-id/members/1/"
-                    >
-                      <a
-                        href="/organizations/org-id/members/1/"
-                      />
-                    </Link>
-                  </h5>
-                  <br />
-                </td>
-                <td
-                  className="status"
-                >
-                  <span
-                    className="icon-exclamation tip"
-                    style={
-                      Object {
-                        "color": "#B64236",
-                      }
-                    }
-                    title="Two-factor auth not enabled"
-                  />
-                </td>
-                <td
-                  className="squash"
-                />
-                <td
-                  className="align-right squash"
+                memberCanLeave={false}
+                onLeave={[Function]}
+                onRemove={[Function]}
+                onSendInvite={[Function]}
+                orgId="org-id"
+                orgName="Organization Name"
+                params={
+                  Object {
+                    "orgId": "org-id",
+                  }
+                }
+                requireLink={false}
+                routes={Array []}
+              >
+                <Styled(Base)
+                  align="center"
+                  py={1}
                 >
-                  <Button
-                    disabled={false}
-                    size="small"
-                    style={
-                      Object {
-                        "marginRight": 4,
-                      }
-                    }
-                    to="/organizations/org-id/members/1/"
+                  <Base
+                    align="center"
+                    className="glamor-38 glamor-39"
+                    py={1}
                   >
-                    <Link
-                      className="button button-default button-sm"
-                      disabled={false}
-                      onClick={[Function]}
-                      onlyActiveOnIndex={false}
-                      role="button"
-                      style={
-                        Object {
-                          "marginRight": 4,
-                        }
-                      }
-                      to="/organizations/org-id/members/1/"
+                    <div
+                      className="glamor-38 glamor-39"
+                      is={null}
                     >
-                      <a
-                        className="button button-default button-sm"
-                        disabled={false}
-                        onClick={[Function]}
-                        role="button"
-                        style={
-                          Object {
-                            "marginRight": 4,
-                          }
-                        }
+                      <Box
+                        pl={2}
                       >
-                        <FlowLayout
-                          truncate={false}
+                        <Base
+                          className="glamor-22"
+                          pl={2}
                         >
                           <div
-                            className="flow-layout"
+                            className="glamor-22"
+                            is={null}
                           >
-                            <span
-                              className="button-label"
+                            <Avatar
+                              className="avatar"
+                              gravatar={true}
+                              size={64}
+                              style={
+                                Object {
+                                  "height": 32,
+                                  "width": 32,
+                                }
+                              }
+                              user={
+                                Object {
+                                  "email": "sentry1@test.com",
+                                  "has2fa": false,
+                                  "id": "1",
+                                  "name": "Sentry 1 Name",
+                                  "username": "Sentry 1 Username",
+                                }
+                              }
                             >
-                              Details
-                            </span>
+                              <span
+                                className="avatar"
+                                style={
+                                  Object {
+                                    "height": 32,
+                                    "width": 32,
+                                  }
+                                }
+                              >
+                                <img
+                                  onError={[Function]}
+                                  onLoad={[Function]}
+                                  src="undefined/avatar/c68ca8af553301ae11c5607b8bb672b4?s=64&d=blank"
+                                />
+                              </span>
+                            </Avatar>
                           </div>
-                        </FlowLayout>
-                      </a>
-                    </Link>
-                  </Button>
-                  <Button
-                    disabled={true}
-                    size="small"
-                    title="You cannot leave the organization as you are the only owner."
-                  >
-                    <button
-                      className="button tip button-default button-sm button-disabled"
-                      disabled={true}
-                      onClick={[Function]}
-                      role="button"
-                    >
-                      <FlowLayout
-                        truncate={false}
+                        </Base>
+                      </Box>
+                      <Box
+                        flex="1"
+                        pl={1}
+                        pr={2}
                       >
-                        <div
-                          className="flow-layout"
+                        <Base
+                          className="glamor-30"
+                          flex="1"
+                          pl={1}
+                          pr={2}
                         >
-                          <span
-                            className="button-label"
+                          <div
+                            className="glamor-30"
+                            is={null}
                           >
-                            <span
-                              className="icon icon-exit"
-                            />
-                             
-                            Leave
-                          </span>
-                        </div>
-                      </FlowLayout>
-                    </button>
-                  </Button>
-                </td>
-              </tr>
-            </OrganizationMemberRow>
-            <OrganizationMemberRow
-              canAddMembers={true}
-              canRemoveMembers={false}
-              currentUser={
-                Object {
-                  "email": "",
-                  "flags": Object {
-                    "sso:linked": false,
-                  },
-                  "id": "2",
-                  "name": "",
-                  "pending": false,
-                  "roleName": "",
-                  "user": Object {
-                    "email": "sentry2@test.com",
-                    "has2fa": true,
+                            <h5
+                              style={
+                                Object {
+                                  "margin": "0 0 3px",
+                                }
+                              }
+                            >
+                              <Styled(Link)
+                                to="1"
+                              >
+                                <Link
+                                  className="glamor-24 glamor-25"
+                                  to="1"
+                                >
+                                  <a
+                                    className="glamor-24 glamor-25"
+                                    href="1"
+                                  />
+                                </Link>
+                              </Styled(Link)>
+                            </h5>
+                            <Styled(div)>
+                              <div
+                                className="glamor-28 glamor-29"
+                              />
+                            </Styled(div)>
+                          </div>
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={180}
+                      >
+                        <Base
+                          className="glamor-10"
+                          px={2}
+                          w={180}
+                        >
+                          <div
+                            className="glamor-10"
+                            is={null}
+                          >
+                            <div>
+                              <span
+                                className="icon-exclamation tip"
+                                style={
+                                  Object {
+                                    "color": "#B64236",
+                                  }
+                                }
+                                title="Two-factor auth not enabled"
+                              />
+                            </div>
+                          </div>
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={100}
+                      >
+                        <Base
+                          className="glamor-12"
+                          px={2}
+                          w={100}
+                        >
+                          <div
+                            className="glamor-12"
+                            is={null}
+                          />
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={120}
+                      >
+                        <Base
+                          className="glamor-14"
+                          px={2}
+                          w={120}
+                        >
+                          <div
+                            className="glamor-14"
+                            is={null}
+                          >
+                            <Button
+                              disabled={true}
+                              size="small"
+                              title="You cannot leave the organization as you are the only owner."
+                            >
+                              <button
+                                className="button tip button-default button-sm button-disabled"
+                                disabled={true}
+                                onClick={[Function]}
+                                role="button"
+                              >
+                                <FlowLayout
+                                  truncate={false}
+                                >
+                                  <div
+                                    className="flow-layout"
+                                  >
+                                    <span
+                                      className="button-label"
+                                    >
+                                      <span
+                                        className="icon icon-exit"
+                                      />
+                                       
+                                      Leave
+                                    </span>
+                                  </div>
+                                </FlowLayout>
+                              </button>
+                            </Button>
+                          </div>
+                        </Base>
+                      </Box>
+                    </div>
+                  </Base>
+                </Styled(Base)>
+              </OrganizationMemberRow>
+              <OrganizationMemberRow
+                canAddMembers={true}
+                canRemoveMembers={false}
+                currentUser={
+                  Object {
+                    "email": "",
+                    "flags": Object {
+                      "sso:linked": false,
+                    },
                     "id": "2",
-                    "name": "Sentry 2 Name",
-                    "username": "Sentry 2 Username",
-                  },
+                    "name": "",
+                    "pending": false,
+                    "roleName": "",
+                    "user": Object {
+                      "email": "sentry2@test.com",
+                      "has2fa": true,
+                      "id": "2",
+                      "name": "Sentry 2 Name",
+                      "username": "Sentry 2 Username",
+                    },
+                  }
                 }
-              }
-              member={
-                Object {
-                  "email": "",
-                  "flags": Object {
-                    "sso:linked": false,
-                  },
-                  "id": "2",
-                  "name": "",
-                  "pending": false,
-                  "roleName": "",
-                  "user": Object {
-                    "email": "sentry2@test.com",
-                    "has2fa": true,
+                member={
+                  Object {
+                    "email": "",
+                    "flags": Object {
+                      "sso:linked": false,
+                    },
                     "id": "2",
-                    "name": "Sentry 2 Name",
-                    "username": "Sentry 2 Username",
-                  },
+                    "name": "",
+                    "pending": false,
+                    "roleName": "",
+                    "user": Object {
+                      "email": "sentry2@test.com",
+                      "has2fa": true,
+                      "id": "2",
+                      "name": "Sentry 2 Name",
+                      "username": "Sentry 2 Username",
+                    },
+                  }
                 }
-              }
-              memberCanLeave={false}
-              onLeave={[Function]}
-              onRemove={[Function]}
-              onSendInvite={[Function]}
-              orgId="org-id"
-              orgName="Organization Name"
-              requireLink={false}
-            >
-              <tr>
-                <td
-                  className="table-user-info"
-                >
-                  <Avatar
-                    className="avatar"
-                    gravatar={true}
-                    size={64}
-                    user={
-                      Object {
-                        "email": "sentry2@test.com",
-                        "has2fa": true,
-                        "id": "2",
-                        "name": "Sentry 2 Name",
-                        "username": "Sentry 2 Username",
-                      }
-                    }
-                  >
-                    <span
-                      className="avatar"
-                    >
-                      <img
-                        onError={[Function]}
-                        onLoad={[Function]}
-                        src="undefined/avatar/4eca4e68b0a900e542fdf17e57d04dcd?s=64&d=blank"
-                      />
-                    </span>
-                  </Avatar>
-                  <h5>
-                    <Link
-                      to="/organizations/org-id/members/2/"
-                    >
-                      <a
-                        href="/organizations/org-id/members/2/"
-                      />
-                    </Link>
-                  </h5>
-                  <br />
-                </td>
-                <td
-                  className="status"
-                />
-                <td
-                  className="squash"
-                />
-                <td
-                  className="align-right squash"
+                memberCanLeave={false}
+                onLeave={[Function]}
+                onRemove={[Function]}
+                onSendInvite={[Function]}
+                orgId="org-id"
+                orgName="Organization Name"
+                params={
+                  Object {
+                    "orgId": "org-id",
+                  }
+                }
+                requireLink={false}
+                routes={Array []}
+              >
+                <Styled(Base)
+                  align="center"
+                  py={1}
                 >
-                  <Button
-                    disabled={false}
-                    size="small"
-                    style={
-                      Object {
-                        "marginRight": 4,
-                      }
-                    }
-                    to="/organizations/org-id/members/2/"
+                  <Base
+                    align="center"
+                    className="glamor-38 glamor-39"
+                    py={1}
                   >
-                    <Link
-                      className="button button-default button-sm"
-                      disabled={false}
-                      onClick={[Function]}
-                      onlyActiveOnIndex={false}
-                      role="button"
-                      style={
-                        Object {
-                          "marginRight": 4,
-                        }
-                      }
-                      to="/organizations/org-id/members/2/"
+                    <div
+                      className="glamor-38 glamor-39"
+                      is={null}
                     >
-                      <a
-                        className="button button-default button-sm"
-                        disabled={false}
-                        onClick={[Function]}
-                        role="button"
-                        style={
-                          Object {
-                            "marginRight": 4,
-                          }
-                        }
+                      <Box
+                        pl={2}
                       >
-                        <FlowLayout
-                          truncate={false}
+                        <Base
+                          className="glamor-22"
+                          pl={2}
                         >
                           <div
-                            className="flow-layout"
+                            className="glamor-22"
+                            is={null}
                           >
-                            <span
-                              className="button-label"
+                            <Avatar
+                              className="avatar"
+                              gravatar={true}
+                              size={64}
+                              style={
+                                Object {
+                                  "height": 32,
+                                  "width": 32,
+                                }
+                              }
+                              user={
+                                Object {
+                                  "email": "sentry2@test.com",
+                                  "has2fa": true,
+                                  "id": "2",
+                                  "name": "Sentry 2 Name",
+                                  "username": "Sentry 2 Username",
+                                }
+                              }
                             >
-                              Details
-                            </span>
+                              <span
+                                className="avatar"
+                                style={
+                                  Object {
+                                    "height": 32,
+                                    "width": 32,
+                                  }
+                                }
+                              >
+                                <img
+                                  onError={[Function]}
+                                  onLoad={[Function]}
+                                  src="undefined/avatar/4eca4e68b0a900e542fdf17e57d04dcd?s=64&d=blank"
+                                />
+                              </span>
+                            </Avatar>
                           </div>
-                        </FlowLayout>
-                      </a>
-                    </Link>
-                  </Button>
-                  <Button
-                    disabled={true}
-                    size="small"
-                    title="You cannot leave the organization as you are the only owner."
-                  >
-                    <button
-                      className="button tip button-default button-sm button-disabled"
-                      disabled={true}
-                      onClick={[Function]}
-                      role="button"
-                    >
-                      <FlowLayout
-                        truncate={false}
+                        </Base>
+                      </Box>
+                      <Box
+                        flex="1"
+                        pl={1}
+                        pr={2}
                       >
-                        <div
-                          className="flow-layout"
+                        <Base
+                          className="glamor-30"
+                          flex="1"
+                          pl={1}
+                          pr={2}
                         >
-                          <span
-                            className="button-label"
+                          <div
+                            className="glamor-30"
+                            is={null}
                           >
-                            <span
-                              className="icon icon-exit"
-                            />
-                             
-                            Leave
-                          </span>
-                        </div>
-                      </FlowLayout>
-                    </button>
-                  </Button>
-                </td>
-              </tr>
-            </OrganizationMemberRow>
-            <OrganizationMemberRow
-              canAddMembers={true}
-              canRemoveMembers={false}
-              currentUser={
-                Object {
-                  "email": "",
-                  "flags": Object {
-                    "sso:linked": false,
-                  },
-                  "id": "2",
-                  "name": "",
-                  "pending": false,
-                  "roleName": "",
-                  "user": Object {
-                    "email": "sentry2@test.com",
-                    "has2fa": true,
+                            <h5
+                              style={
+                                Object {
+                                  "margin": "0 0 3px",
+                                }
+                              }
+                            >
+                              <Styled(Link)
+                                to="2"
+                              >
+                                <Link
+                                  className="glamor-24 glamor-25"
+                                  to="2"
+                                >
+                                  <a
+                                    className="glamor-24 glamor-25"
+                                    href="2"
+                                  />
+                                </Link>
+                              </Styled(Link)>
+                            </h5>
+                            <Styled(div)>
+                              <div
+                                className="glamor-28 glamor-29"
+                              />
+                            </Styled(div)>
+                          </div>
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={180}
+                      >
+                        <Base
+                          className="glamor-10"
+                          px={2}
+                          w={180}
+                        >
+                          <div
+                            className="glamor-10"
+                            is={null}
+                          >
+                            <div>
+                              <span
+                                className="icon-check"
+                                style={
+                                  Object {
+                                    "color": "green",
+                                  }
+                                }
+                              />
+                            </div>
+                          </div>
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={100}
+                      >
+                        <Base
+                          className="glamor-12"
+                          px={2}
+                          w={100}
+                        >
+                          <div
+                            className="glamor-12"
+                            is={null}
+                          />
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={120}
+                      >
+                        <Base
+                          className="glamor-14"
+                          px={2}
+                          w={120}
+                        >
+                          <div
+                            className="glamor-14"
+                            is={null}
+                          >
+                            <Button
+                              disabled={true}
+                              size="small"
+                              title="You cannot leave the organization as you are the only owner."
+                            >
+                              <button
+                                className="button tip button-default button-sm button-disabled"
+                                disabled={true}
+                                onClick={[Function]}
+                                role="button"
+                              >
+                                <FlowLayout
+                                  truncate={false}
+                                >
+                                  <div
+                                    className="flow-layout"
+                                  >
+                                    <span
+                                      className="button-label"
+                                    >
+                                      <span
+                                        className="icon icon-exit"
+                                      />
+                                       
+                                      Leave
+                                    </span>
+                                  </div>
+                                </FlowLayout>
+                              </button>
+                            </Button>
+                          </div>
+                        </Base>
+                      </Box>
+                    </div>
+                  </Base>
+                </Styled(Base)>
+              </OrganizationMemberRow>
+              <OrganizationMemberRow
+                canAddMembers={true}
+                canRemoveMembers={false}
+                currentUser={
+                  Object {
+                    "email": "",
+                    "flags": Object {
+                      "sso:linked": false,
+                    },
                     "id": "2",
-                    "name": "Sentry 2 Name",
-                    "username": "Sentry 2 Username",
-                  },
+                    "name": "",
+                    "pending": false,
+                    "roleName": "",
+                    "user": Object {
+                      "email": "sentry2@test.com",
+                      "has2fa": true,
+                      "id": "2",
+                      "name": "Sentry 2 Name",
+                      "username": "Sentry 2 Username",
+                    },
+                  }
                 }
-              }
-              member={
-                Object {
-                  "email": "",
-                  "flags": Object {
-                    "sso:linked": true,
-                  },
-                  "id": "3",
-                  "name": "",
-                  "pending": false,
-                  "roleName": "",
-                  "user": Object {
-                    "email": "sentry3@test.com",
-                    "has2fa": true,
+                member={
+                  Object {
+                    "email": "",
+                    "flags": Object {
+                      "sso:linked": true,
+                    },
                     "id": "3",
-                    "name": "Sentry 3 Name",
-                    "username": "Sentry 3 Username",
-                  },
+                    "name": "",
+                    "pending": false,
+                    "roleName": "",
+                    "user": Object {
+                      "email": "sentry3@test.com",
+                      "has2fa": true,
+                      "id": "3",
+                      "name": "Sentry 3 Name",
+                      "username": "Sentry 3 Username",
+                    },
+                  }
                 }
-              }
-              memberCanLeave={false}
-              onLeave={[Function]}
-              onRemove={[Function]}
-              onSendInvite={[Function]}
-              orgId="org-id"
-              orgName="Organization Name"
-              requireLink={false}
-            >
-              <tr>
-                <td
-                  className="table-user-info"
-                >
-                  <Avatar
-                    className="avatar"
-                    gravatar={true}
-                    size={64}
-                    user={
-                      Object {
-                        "email": "sentry3@test.com",
-                        "has2fa": true,
-                        "id": "3",
-                        "name": "Sentry 3 Name",
-                        "username": "Sentry 3 Username",
-                      }
-                    }
-                  >
-                    <span
-                      className="avatar"
-                    >
-                      <img
-                        onError={[Function]}
-                        onLoad={[Function]}
-                        src="undefined/avatar/40d78e2a4587a53a171944ffe71ee3d4?s=64&d=blank"
-                      />
-                    </span>
-                  </Avatar>
-                  <h5>
-                    <Link
-                      to="/organizations/org-id/members/3/"
-                    >
-                      <a
-                        href="/organizations/org-id/members/3/"
-                      />
-                    </Link>
-                  </h5>
-                  <br />
-                </td>
-                <td
-                  className="status"
-                />
-                <td
-                  className="squash"
-                />
-                <td
-                  className="align-right squash"
+                memberCanLeave={false}
+                onLeave={[Function]}
+                onRemove={[Function]}
+                onSendInvite={[Function]}
+                orgId="org-id"
+                orgName="Organization Name"
+                params={
+                  Object {
+                    "orgId": "org-id",
+                  }
+                }
+                requireLink={false}
+                routes={Array []}
+              >
+                <Styled(Base)
+                  align="center"
+                  py={1}
                 >
-                  <Button
-                    disabled={false}
-                    size="small"
-                    style={
-                      Object {
-                        "marginRight": 4,
-                      }
-                    }
-                    to="/organizations/org-id/members/3/"
+                  <Base
+                    align="center"
+                    className="glamor-38 glamor-39"
+                    py={1}
                   >
-                    <Link
-                      className="button button-default button-sm"
-                      disabled={false}
-                      onClick={[Function]}
-                      onlyActiveOnIndex={false}
-                      role="button"
-                      style={
-                        Object {
-                          "marginRight": 4,
-                        }
-                      }
-                      to="/organizations/org-id/members/3/"
+                    <div
+                      className="glamor-38 glamor-39"
+                      is={null}
                     >
-                      <a
-                        className="button button-default button-sm"
-                        disabled={false}
-                        onClick={[Function]}
-                        role="button"
-                        style={
-                          Object {
-                            "marginRight": 4,
-                          }
-                        }
+                      <Box
+                        pl={2}
                       >
-                        <FlowLayout
-                          truncate={false}
+                        <Base
+                          className="glamor-22"
+                          pl={2}
                         >
                           <div
-                            className="flow-layout"
+                            className="glamor-22"
+                            is={null}
                           >
-                            <span
-                              className="button-label"
+                            <Avatar
+                              className="avatar"
+                              gravatar={true}
+                              size={64}
+                              style={
+                                Object {
+                                  "height": 32,
+                                  "width": 32,
+                                }
+                              }
+                              user={
+                                Object {
+                                  "email": "sentry3@test.com",
+                                  "has2fa": true,
+                                  "id": "3",
+                                  "name": "Sentry 3 Name",
+                                  "username": "Sentry 3 Username",
+                                }
+                              }
                             >
-                              Details
-                            </span>
+                              <span
+                                className="avatar"
+                                style={
+                                  Object {
+                                    "height": 32,
+                                    "width": 32,
+                                  }
+                                }
+                              >
+                                <img
+                                  onError={[Function]}
+                                  onLoad={[Function]}
+                                  src="undefined/avatar/40d78e2a4587a53a171944ffe71ee3d4?s=64&d=blank"
+                                />
+                              </span>
+                            </Avatar>
                           </div>
-                        </FlowLayout>
-                      </a>
-                    </Link>
-                  </Button>
-                  <Button
-                    disabled={true}
-                    size="small"
-                    title="You cannot leave the organization as you are the only owner."
-                  >
-                    <button
-                      className="button tip button-default button-sm button-disabled"
-                      disabled={true}
-                      onClick={[Function]}
-                      role="button"
-                    >
-                      <FlowLayout
-                        truncate={false}
+                        </Base>
+                      </Box>
+                      <Box
+                        flex="1"
+                        pl={1}
+                        pr={2}
                       >
-                        <div
-                          className="flow-layout"
+                        <Base
+                          className="glamor-30"
+                          flex="1"
+                          pl={1}
+                          pr={2}
                         >
-                          <span
-                            className="button-label"
+                          <div
+                            className="glamor-30"
+                            is={null}
                           >
-                            <span
-                              className="icon icon-exit"
-                            />
-                             
-                            Leave
-                          </span>
-                        </div>
-                      </FlowLayout>
-                    </button>
-                  </Button>
-                </td>
-              </tr>
-            </OrganizationMemberRow>
-          </tbody>
-        </table>
-      </div>
+                            <h5
+                              style={
+                                Object {
+                                  "margin": "0 0 3px",
+                                }
+                              }
+                            >
+                              <Styled(Link)
+                                to="3"
+                              >
+                                <Link
+                                  className="glamor-24 glamor-25"
+                                  to="3"
+                                >
+                                  <a
+                                    className="glamor-24 glamor-25"
+                                    href="3"
+                                  />
+                                </Link>
+                              </Styled(Link)>
+                            </h5>
+                            <Styled(div)>
+                              <div
+                                className="glamor-28 glamor-29"
+                              />
+                            </Styled(div)>
+                          </div>
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={180}
+                      >
+                        <Base
+                          className="glamor-10"
+                          px={2}
+                          w={180}
+                        >
+                          <div
+                            className="glamor-10"
+                            is={null}
+                          >
+                            <div>
+                              <span
+                                className="icon-check"
+                                style={
+                                  Object {
+                                    "color": "green",
+                                  }
+                                }
+                              />
+                            </div>
+                          </div>
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={100}
+                      >
+                        <Base
+                          className="glamor-12"
+                          px={2}
+                          w={100}
+                        >
+                          <div
+                            className="glamor-12"
+                            is={null}
+                          />
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={120}
+                      >
+                        <Base
+                          className="glamor-14"
+                          px={2}
+                          w={120}
+                        >
+                          <div
+                            className="glamor-14"
+                            is={null}
+                          >
+                            <Button
+                              disabled={true}
+                              size="small"
+                              title="You cannot leave the organization as you are the only owner."
+                            >
+                              <button
+                                className="button tip button-default button-sm button-disabled"
+                                disabled={true}
+                                onClick={[Function]}
+                                role="button"
+                              >
+                                <FlowLayout
+                                  truncate={false}
+                                >
+                                  <div
+                                    className="flow-layout"
+                                  >
+                                    <span
+                                      className="button-label"
+                                    >
+                                      <span
+                                        className="icon icon-exit"
+                                      />
+                                       
+                                      Leave
+                                    </span>
+                                  </div>
+                                </FlowLayout>
+                              </button>
+                            </Button>
+                          </div>
+                        </Base>
+                      </Box>
+                    </div>
+                  </Base>
+                </Styled(Base)>
+              </OrganizationMemberRow>
+            </div>
+          </Styled(div)>
+        </div>
+      </Styled(div)>
     </div>
   </DocumentTitle>
 </OrganizationMembersView>
 `;
 
 exports[`OrganizationMembersView Require Link does not have 2fa warning if user has 2fa 1`] = `
+.glamor-6 {
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+  font-size: 14px;
+  box-shadow: inset 0 -1px 0;
+  margin-bottom: 30px;
+}
+
+.glamor-4 {
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+}
+
+.glamor-2 {
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+  font-weight: bold;
+  border-bottom: 3px solid;
+}
+
+.glamor-0 {
+  padding: 14px 0;
+}
+
+.glamor-84 {
+  background: #fff;
+  border: 1px solid;
+  margin-bottom: 30px;
+  position: relative;
+}
+
+.glamor-20 {
+  border-bottom: 1px solid;
+  border-radius: 0 0;
+  background: padding:15px 0;
+  text-transform: uppercase;
+  font-size: 13px;
+}
+
+.glamor-18 {
+  font-size: 12px;
+  font-weight: 600;
+  text-transform: uppercase;
+  margin-bottom: 20px;
+  font-size: inherit;
+  text-transform: inherit;
+  margin: 0;
+}
+
+.glamor-16 {
+  box-sizing: border-box;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+}
+
+.glamor-8 {
+  box-sizing: border-box;
+  padding-left: 16px;
+  padding-right: 16px;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+}
+
+.glamor-10 {
+  box-sizing: border-box;
+  width: 180px;
+  padding-left: 16px;
+  padding-right: 16px;
+}
+
+.glamor-12 {
+  box-sizing: border-box;
+  width: 100px;
+  padding-left: 16px;
+  padding-right: 16px;
+}
+
+.glamor-14 {
+  box-sizing: border-box;
+  width: 120px;
+  padding-left: 16px;
+  padding-right: 16px;
+}
+
+.glamor-38 {
+  box-sizing: border-box;
+  padding-top: 8px;
+  padding-bottom: 8px;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+  border-bottom: 1px solid;
+}
+
+.glamor-38:last-child {
+  border: 0;
+}
+
+.glamor-22 {
+  box-sizing: border-box;
+  padding-left: 16px;
+}
+
+.glamor-30 {
+  box-sizing: border-box;
+  padding-left: 8px;
+  padding-right: 16px;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+}
+
+.glamor-24 {
+  font-size: 16px;
+}
+
+.glamor-28 {
+  font-size: 14px;
+}
+
 <OrganizationMembersView
   canAddMembers={false}
   canRemoveMembers={false}
@@ -737,752 +1344,1048 @@ exports[`OrganizationMembersView Require Link does not have 2fa warning if user
     }
   }
   requireLink={false}
+  routes={Array []}
   status=""
 >
   <DocumentTitle
     title="Organization Name Members"
   >
     <div>
-      <SpreadLayout
-        center={true}
-        className="page-header"
-        responsive={false}
-      >
-        <div
-          className="spread-layout page-header center"
-        >
-          <h3>
-            Members
-          </h3>
+      <SettingsPageHeading
+        action={
           <Button
-            className="pull-right"
             disabled={false}
-            priority="primary"
-            size="small"
-            to="/organization/org-id/members/invite/"
+            priority="link"
+            title={undefined}
+            to="new"
           >
-            <Link
-              className="pull-right button button-primary button-sm"
-              disabled={false}
-              onClick={[Function]}
-              onlyActiveOnIndex={false}
-              role="button"
-              style={Object {}}
-              to="/organization/org-id/members/invite/"
-            >
-              <a
-                className="pull-right button button-primary button-sm"
-                disabled={false}
-                onClick={[Function]}
-                role="button"
-                style={Object {}}
+            <span
+              className="icon-plus"
+            />
+             
+            Invite Member
+          </Button>
+        }
+        label="Members"
+      >
+        <Styled(div)>
+          <div
+            className="glamor-6 glamor-7"
+          >
+            <Styled(div)>
+              <div
+                className="glamor-4 glamor-5"
               >
-                <FlowLayout
-                  truncate={false}
-                >
+                <Styled(div)>
                   <div
-                    className="flow-layout"
+                    className="glamor-2 glamor-3"
                   >
-                    <span
-                      className="button-label"
-                    >
+                    <Styled(span)>
                       <span
-                        className="icon-plus"
-                      />
-                       
-                      Invite Member
-                    </span>
+                        className="glamor-0 glamor-1"
+                      >
+                        Members
+                      </span>
+                    </Styled(span)>
                   </div>
-                </FlowLayout>
-              </a>
-            </Link>
-          </Button>
-        </div>
-      </SpreadLayout>
+                </Styled(div)>
+              </div>
+            </Styled(div)>
+            <div>
+              <Button
+                disabled={false}
+                priority="link"
+                to="new"
+              >
+                <Link
+                  className="button button-link"
+                  disabled={false}
+                  onClick={[Function]}
+                  onlyActiveOnIndex={false}
+                  role="button"
+                  style={Object {}}
+                  to="new"
+                >
+                  <a
+                    className="button button-link"
+                    disabled={false}
+                    onClick={[Function]}
+                    role="button"
+                    style={Object {}}
+                  >
+                    <FlowLayout
+                      truncate={false}
+                    >
+                      <div
+                        className="flow-layout"
+                      >
+                        <span
+                          className="button-label"
+                        >
+                          <span
+                            className="icon-plus"
+                          />
+                           
+                          Invite Member
+                        </span>
+                      </div>
+                    </FlowLayout>
+                  </a>
+                </Link>
+              </Button>
+            </div>
+          </div>
+        </Styled(div)>
+      </SettingsPageHeading>
       <OrganizationAccessRequests
         accessRequestBusy={Map {}}
         onApprove={[Function]}
         onDeny={[Function]}
         requestList={Array []}
       />
-      <div
-        className="panel panel-default horizontal-scroll"
-      >
-        <table
-          className="table member-list"
+      <Styled(div)>
+        <div
+          className="glamor-84 glamor-85"
         >
-          <colgroup>
-            <col
-              width="45%"
-            />
-            <col
-              width="15%"
-            />
-            <col
-              width="15%"
-            />
-            <col
-              width="25%"
-            />
-          </colgroup>
-          <thead>
-            <tr>
-              <th>
-                Member
-              </th>
-              <th>
-                 
-              </th>
-              <th
-                className="squash"
-              >
-                Role
-              </th>
-              <th
-                className="squash"
+          <PanelHeader
+            disablePadding={true}
+          >
+            <Styled(div)
+              disablePadding={true}
+            >
+              <div
+                className="glamor-20 glamor-21"
               >
-                 
-              </th>
-            </tr>
-          </thead>
-          <tbody>
-            <OrganizationMemberRow
-              canAddMembers={true}
-              canRemoveMembers={false}
-              currentUser={
-                Object {
-                  "email": "",
-                  "flags": Object {
-                    "sso:linked": false,
-                  },
-                  "id": "2",
-                  "name": "",
-                  "pending": false,
-                  "roleName": "",
-                  "user": Object {
-                    "email": "sentry2@test.com",
-                    "has2fa": true,
+                <Styled(div)>
+                  <div
+                    className="glamor-18 glamor-19"
+                  >
+                    <Flex
+                      align="center"
+                    >
+                      <Base
+                        align="center"
+                        className="glamor-16"
+                      >
+                        <div
+                          className="glamor-16"
+                          is={null}
+                        >
+                          <Box
+                            flex="1"
+                            px={2}
+                          >
+                            <Base
+                              className="glamor-8"
+                              flex="1"
+                              px={2}
+                            >
+                              <div
+                                className="glamor-8"
+                                is={null}
+                              >
+                                Member
+                              </div>
+                            </Base>
+                          </Box>
+                          <Box
+                            px={2}
+                            w={180}
+                          >
+                            <Base
+                              className="glamor-10"
+                              px={2}
+                              w={180}
+                            >
+                              <div
+                                className="glamor-10"
+                                is={null}
+                              >
+                                Status
+                              </div>
+                            </Base>
+                          </Box>
+                          <Box
+                            px={2}
+                            w={100}
+                          >
+                            <Base
+                              className="glamor-12"
+                              px={2}
+                              w={100}
+                            >
+                              <div
+                                className="glamor-12"
+                                is={null}
+                              >
+                                Role
+                              </div>
+                            </Base>
+                          </Box>
+                          <Box
+                            px={2}
+                            w={120}
+                          >
+                            <Base
+                              className="glamor-14"
+                              px={2}
+                              w={120}
+                            >
+                              <div
+                                className="glamor-14"
+                                is={null}
+                              >
+                                Actions
+                              </div>
+                            </Base>
+                          </Box>
+                        </div>
+                      </Base>
+                    </Flex>
+                  </div>
+                </Styled(div)>
+              </div>
+            </Styled(div)>
+          </PanelHeader>
+          <Styled(div)>
+            <div
+              className="glamor-82 glamor-83"
+            >
+              <OrganizationMemberRow
+                canAddMembers={true}
+                canRemoveMembers={false}
+                currentUser={
+                  Object {
+                    "email": "",
+                    "flags": Object {
+                      "sso:linked": false,
+                    },
                     "id": "2",
-                    "name": "Sentry 2 Name",
-                    "username": "Sentry 2 Username",
-                  },
+                    "name": "",
+                    "pending": false,
+                    "roleName": "",
+                    "user": Object {
+                      "email": "sentry2@test.com",
+                      "has2fa": true,
+                      "id": "2",
+                      "name": "Sentry 2 Name",
+                      "username": "Sentry 2 Username",
+                    },
+                  }
                 }
-              }
-              member={
-                Object {
-                  "email": "",
-                  "flags": Object {
-                    "sso:linked": false,
-                  },
-                  "id": "1",
-                  "name": "",
-                  "pending": false,
-                  "roleName": "",
-                  "user": Object {
-                    "email": "sentry1@test.com",
-                    "has2fa": false,
+                member={
+                  Object {
+                    "email": "",
+                    "flags": Object {
+                      "sso:linked": false,
+                    },
                     "id": "1",
-                    "name": "Sentry 1 Name",
-                    "username": "Sentry 1 Username",
-                  },
+                    "name": "",
+                    "pending": false,
+                    "roleName": "",
+                    "user": Object {
+                      "email": "sentry1@test.com",
+                      "has2fa": false,
+                      "id": "1",
+                      "name": "Sentry 1 Name",
+                      "username": "Sentry 1 Username",
+                    },
+                  }
                 }
-              }
-              memberCanLeave={false}
-              onLeave={[Function]}
-              onRemove={[Function]}
-              onSendInvite={[Function]}
-              orgId="org-id"
-              orgName="Organization Name"
-              requireLink={true}
-            >
-              <tr>
-                <td
-                  className="table-user-info"
+                memberCanLeave={false}
+                onLeave={[Function]}
+                onRemove={[Function]}
+                onSendInvite={[Function]}
+                orgId="org-id"
+                orgName="Organization Name"
+                params={
+                  Object {
+                    "orgId": "org-id",
+                  }
+                }
+                requireLink={true}
+                routes={Array []}
+              >
+                <Styled(Base)
+                  align="center"
+                  py={1}
                 >
-                  <Avatar
-                    className="avatar"
-                    gravatar={true}
-                    size={64}
-                    user={
-                      Object {
-                        "email": "sentry1@test.com",
-                        "has2fa": false,
-                        "id": "1",
-                        "name": "Sentry 1 Name",
-                        "username": "Sentry 1 Username",
-                      }
-                    }
+                  <Base
+                    align="center"
+                    className="glamor-38 glamor-39"
+                    py={1}
                   >
-                    <span
-                      className="avatar"
-                    >
-                      <img
-                        onError={[Function]}
-                        onLoad={[Function]}
-                        src="undefined/avatar/c68ca8af553301ae11c5607b8bb672b4?s=64&d=blank"
-                      />
-                    </span>
-                  </Avatar>
-                  <h5>
-                    <Link
-                      to="/organizations/org-id/members/1/"
-                    >
-                      <a
-                        href="/organizations/org-id/members/1/"
-                      />
-                    </Link>
-                  </h5>
-                  <br />
-                </td>
-                <td
-                  className="status"
-                >
-                  <div>
-                    <div>
-                      <strong>
-                        Missing SSO Link
-                      </strong>
-                    </div>
-                    <Button
-                      disabled={false}
-                      onClick={[Function]}
-                      priority="primary"
-                      size="xsmall"
-                      style={
-                        Object {
-                          "marginTop": 2,
-                          "padding": "0 4px",
-                        }
-                      }
+                    <div
+                      className="glamor-38 glamor-39"
+                      is={null}
                     >
-                      <button
-                        className="button button-primary button-xs"
-                        disabled={false}
-                        onClick={[Function]}
-                        role="button"
-                        style={
-                          Object {
-                            "marginTop": 2,
-                            "padding": "0 4px",
-                          }
-                        }
+                      <Box
+                        pl={2}
                       >
-                        <FlowLayout
-                          truncate={false}
+                        <Base
+                          className="glamor-22"
+                          pl={2}
                         >
                           <div
-                            className="flow-layout"
+                            className="glamor-22"
+                            is={null}
                           >
-                            <span
-                              className="button-label"
+                            <Avatar
+                              className="avatar"
+                              gravatar={true}
+                              size={64}
+                              style={
+                                Object {
+                                  "height": 32,
+                                  "width": 32,
+                                }
+                              }
+                              user={
+                                Object {
+                                  "email": "sentry1@test.com",
+                                  "has2fa": false,
+                                  "id": "1",
+                                  "name": "Sentry 1 Name",
+                                  "username": "Sentry 1 Username",
+                                }
+                              }
                             >
-                              Resend invite
-                            </span>
+                              <span
+                                className="avatar"
+                                style={
+                                  Object {
+                                    "height": 32,
+                                    "width": 32,
+                                  }
+                                }
+                              >
+                                <img
+                                  onError={[Function]}
+                                  onLoad={[Function]}
+                                  src="undefined/avatar/c68ca8af553301ae11c5607b8bb672b4?s=64&d=blank"
+                                />
+                              </span>
+                            </Avatar>
                           </div>
-                        </FlowLayout>
-                      </button>
-                    </Button>
-                  </div>
-                </td>
-                <td
-                  className="squash"
-                />
-                <td
-                  className="align-right squash"
-                >
-                  <Button
-                    disabled={false}
-                    size="small"
-                    style={
-                      Object {
-                        "marginRight": 4,
-                      }
-                    }
-                    to="/organizations/org-id/members/1/"
-                  >
-                    <Link
-                      className="button button-default button-sm"
-                      disabled={false}
-                      onClick={[Function]}
-                      onlyActiveOnIndex={false}
-                      role="button"
-                      style={
-                        Object {
-                          "marginRight": 4,
-                        }
-                      }
-                      to="/organizations/org-id/members/1/"
-                    >
-                      <a
-                        className="button button-default button-sm"
-                        disabled={false}
-                        onClick={[Function]}
-                        role="button"
-                        style={
-                          Object {
-                            "marginRight": 4,
-                          }
-                        }
+                        </Base>
+                      </Box>
+                      <Box
+                        flex="1"
+                        pl={1}
+                        pr={2}
                       >
-                        <FlowLayout
-                          truncate={false}
+                        <Base
+                          className="glamor-30"
+                          flex="1"
+                          pl={1}
+                          pr={2}
                         >
                           <div
-                            className="flow-layout"
+                            className="glamor-30"
+                            is={null}
                           >
-                            <span
-                              className="button-label"
+                            <h5
+                              style={
+                                Object {
+                                  "margin": "0 0 3px",
+                                }
+                              }
                             >
-                              Details
-                            </span>
+                              <Styled(Link)
+                                to="1"
+                              >
+                                <Link
+                                  className="glamor-24 glamor-25"
+                                  to="1"
+                                >
+                                  <a
+                                    className="glamor-24 glamor-25"
+                                    href="1"
+                                  />
+                                </Link>
+                              </Styled(Link)>
+                            </h5>
+                            <Styled(div)>
+                              <div
+                                className="glamor-28 glamor-29"
+                              />
+                            </Styled(div)>
                           </div>
-                        </FlowLayout>
-                      </a>
-                    </Link>
-                  </Button>
-                  <Button
-                    disabled={true}
-                    size="small"
-                    title="You cannot leave the organization as you are the only owner."
-                  >
-                    <button
-                      className="button tip button-default button-sm button-disabled"
-                      disabled={true}
-                      onClick={[Function]}
-                      role="button"
-                    >
-                      <FlowLayout
-                        truncate={false}
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={180}
                       >
-                        <div
-                          className="flow-layout"
+                        <Base
+                          className="glamor-10"
+                          px={2}
+                          w={180}
                         >
-                          <span
-                            className="button-label"
+                          <div
+                            className="glamor-10"
+                            is={null}
                           >
-                            <span
-                              className="icon icon-exit"
-                            />
-                             
-                            Leave
-                          </span>
-                        </div>
-                      </FlowLayout>
-                    </button>
-                  </Button>
-                </td>
-              </tr>
-            </OrganizationMemberRow>
-            <OrganizationMemberRow
-              canAddMembers={true}
-              canRemoveMembers={false}
-              currentUser={
-                Object {
-                  "email": "",
-                  "flags": Object {
-                    "sso:linked": false,
-                  },
-                  "id": "2",
-                  "name": "",
-                  "pending": false,
-                  "roleName": "",
-                  "user": Object {
-                    "email": "sentry2@test.com",
-                    "has2fa": true,
+                            <div>
+                              <div>
+                                <strong>
+                                  Missing SSO Link
+                                </strong>
+                              </div>
+                              <Button
+                                disabled={false}
+                                onClick={[Function]}
+                                priority="primary"
+                                size="xsmall"
+                                style={
+                                  Object {
+                                    "marginTop": 2,
+                                    "padding": "0 4px",
+                                  }
+                                }
+                              >
+                                <button
+                                  className="button button-primary button-xs"
+                                  disabled={false}
+                                  onClick={[Function]}
+                                  role="button"
+                                  style={
+                                    Object {
+                                      "marginTop": 2,
+                                      "padding": "0 4px",
+                                    }
+                                  }
+                                >
+                                  <FlowLayout
+                                    truncate={false}
+                                  >
+                                    <div
+                                      className="flow-layout"
+                                    >
+                                      <span
+                                        className="button-label"
+                                      >
+                                        Resend invite
+                                      </span>
+                                    </div>
+                                  </FlowLayout>
+                                </button>
+                              </Button>
+                            </div>
+                          </div>
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={100}
+                      >
+                        <Base
+                          className="glamor-12"
+                          px={2}
+                          w={100}
+                        >
+                          <div
+                            className="glamor-12"
+                            is={null}
+                          />
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={120}
+                      >
+                        <Base
+                          className="glamor-14"
+                          px={2}
+                          w={120}
+                        >
+                          <div
+                            className="glamor-14"
+                            is={null}
+                          >
+                            <Button
+                              disabled={true}
+                              size="small"
+                              title="You cannot leave the organization as you are the only owner."
+                            >
+                              <button
+                                className="button tip button-default button-sm button-disabled"
+                                disabled={true}
+                                onClick={[Function]}
+                                role="button"
+                              >
+                                <FlowLayout
+                                  truncate={false}
+                                >
+                                  <div
+                                    className="flow-layout"
+                                  >
+                                    <span
+                                      className="button-label"
+                                    >
+                                      <span
+                                        className="icon icon-exit"
+                                      />
+                                       
+                                      Leave
+                                    </span>
+                                  </div>
+                                </FlowLayout>
+                              </button>
+                            </Button>
+                          </div>
+                        </Base>
+                      </Box>
+                    </div>
+                  </Base>
+                </Styled(Base)>
+              </OrganizationMemberRow>
+              <OrganizationMemberRow
+                canAddMembers={true}
+                canRemoveMembers={false}
+                currentUser={
+                  Object {
+                    "email": "",
+                    "flags": Object {
+                      "sso:linked": false,
+                    },
                     "id": "2",
-                    "name": "Sentry 2 Name",
-                    "username": "Sentry 2 Username",
-                  },
+                    "name": "",
+                    "pending": false,
+                    "roleName": "",
+                    "user": Object {
+                      "email": "sentry2@test.com",
+                      "has2fa": true,
+                      "id": "2",
+                      "name": "Sentry 2 Name",
+                      "username": "Sentry 2 Username",
+                    },
+                  }
                 }
-              }
-              member={
-                Object {
-                  "email": "",
-                  "flags": Object {
-                    "sso:linked": false,
-                  },
-                  "id": "2",
-                  "name": "",
-                  "pending": false,
-                  "roleName": "",
-                  "user": Object {
-                    "email": "sentry2@test.com",
-                    "has2fa": true,
+                member={
+                  Object {
+                    "email": "",
+                    "flags": Object {
+                      "sso:linked": false,
+                    },
                     "id": "2",
-                    "name": "Sentry 2 Name",
-                    "username": "Sentry 2 Username",
-                  },
+                    "name": "",
+                    "pending": false,
+                    "roleName": "",
+                    "user": Object {
+                      "email": "sentry2@test.com",
+                      "has2fa": true,
+                      "id": "2",
+                      "name": "Sentry 2 Name",
+                      "username": "Sentry 2 Username",
+                    },
+                  }
                 }
-              }
-              memberCanLeave={false}
-              onLeave={[Function]}
-              onRemove={[Function]}
-              onSendInvite={[Function]}
-              orgId="org-id"
-              orgName="Organization Name"
-              requireLink={true}
-            >
-              <tr>
-                <td
-                  className="table-user-info"
+                memberCanLeave={false}
+                onLeave={[Function]}
+                onRemove={[Function]}
+                onSendInvite={[Function]}
+                orgId="org-id"
+                orgName="Organization Name"
+                params={
+                  Object {
+                    "orgId": "org-id",
+                  }
+                }
+                requireLink={true}
+                routes={Array []}
+              >
+                <Styled(Base)
+                  align="center"
+                  py={1}
                 >
-                  <Avatar
-                    className="avatar"
-                    gravatar={true}
-                    size={64}
-                    user={
-                      Object {
-                        "email": "sentry2@test.com",
-                        "has2fa": true,
-                        "id": "2",
-                        "name": "Sentry 2 Name",
-                        "username": "Sentry 2 Username",
-                      }
-                    }
+                  <Base
+                    align="center"
+                    className="glamor-38 glamor-39"
+                    py={1}
                   >
-                    <span
-                      className="avatar"
-                    >
-                      <img
-                        onError={[Function]}
-                        onLoad={[Function]}
-                        src="undefined/avatar/4eca4e68b0a900e542fdf17e57d04dcd?s=64&d=blank"
-                      />
-                    </span>
-                  </Avatar>
-                  <h5>
-                    <Link
-                      to="/organizations/org-id/members/2/"
-                    >
-                      <a
-                        href="/organizations/org-id/members/2/"
-                      />
-                    </Link>
-                  </h5>
-                  <br />
-                </td>
-                <td
-                  className="status"
-                >
-                  <div>
-                    <div>
-                      <strong>
-                        Missing SSO Link
-                      </strong>
-                    </div>
-                    <Button
-                      disabled={false}
-                      onClick={[Function]}
-                      priority="primary"
-                      size="xsmall"
-                      style={
-                        Object {
-                          "marginTop": 2,
-                          "padding": "0 4px",
-                        }
-                      }
+                    <div
+                      className="glamor-38 glamor-39"
+                      is={null}
                     >
-                      <button
-                        className="button button-primary button-xs"
-                        disabled={false}
-                        onClick={[Function]}
-                        role="button"
-                        style={
-                          Object {
-                            "marginTop": 2,
-                            "padding": "0 4px",
-                          }
-                        }
+                      <Box
+                        pl={2}
                       >
-                        <FlowLayout
-                          truncate={false}
+                        <Base
+                          className="glamor-22"
+                          pl={2}
                         >
                           <div
-                            className="flow-layout"
+                            className="glamor-22"
+                            is={null}
                           >
-                            <span
-                              className="button-label"
+                            <Avatar
+                              className="avatar"
+                              gravatar={true}
+                              size={64}
+                              style={
+                                Object {
+                                  "height": 32,
+                                  "width": 32,
+                                }
+                              }
+                              user={
+                                Object {
+                                  "email": "sentry2@test.com",
+                                  "has2fa": true,
+                                  "id": "2",
+                                  "name": "Sentry 2 Name",
+                                  "username": "Sentry 2 Username",
+                                }
+                              }
                             >
-                              Resend invite
-                            </span>
+                              <span
+                                className="avatar"
+                                style={
+                                  Object {
+                                    "height": 32,
+                                    "width": 32,
+                                  }
+                                }
+                              >
+                                <img
+                                  onError={[Function]}
+                                  onLoad={[Function]}
+                                  src="undefined/avatar/4eca4e68b0a900e542fdf17e57d04dcd?s=64&d=blank"
+                                />
+                              </span>
+                            </Avatar>
                           </div>
-                        </FlowLayout>
-                      </button>
-                    </Button>
-                  </div>
-                </td>
-                <td
-                  className="squash"
-                />
-                <td
-                  className="align-right squash"
-                >
-                  <Button
-                    disabled={false}
-                    size="small"
-                    style={
-                      Object {
-                        "marginRight": 4,
-                      }
-                    }
-                    to="/organizations/org-id/members/2/"
-                  >
-                    <Link
-                      className="button button-default button-sm"
-                      disabled={false}
-                      onClick={[Function]}
-                      onlyActiveOnIndex={false}
-                      role="button"
-                      style={
-                        Object {
-                          "marginRight": 4,
-                        }
-                      }
-                      to="/organizations/org-id/members/2/"
-                    >
-                      <a
-                        className="button button-default button-sm"
-                        disabled={false}
-                        onClick={[Function]}
-                        role="button"
-                        style={
-                          Object {
-                            "marginRight": 4,
-                          }
-                        }
+                        </Base>
+                      </Box>
+                      <Box
+                        flex="1"
+                        pl={1}
+                        pr={2}
                       >
-                        <FlowLayout
-                          truncate={false}
+                        <Base
+                          className="glamor-30"
+                          flex="1"
+                          pl={1}
+                          pr={2}
                         >
                           <div
-                            className="flow-layout"
+                            className="glamor-30"
+                            is={null}
                           >
-                            <span
-                              className="button-label"
+                            <h5
+                              style={
+                                Object {
+                                  "margin": "0 0 3px",
+                                }
+                              }
                             >
-                              Details
-                            </span>
+                              <Styled(Link)
+                                to="2"
+                              >
+                                <Link
+                                  className="glamor-24 glamor-25"
+                                  to="2"
+                                >
+                                  <a
+                                    className="glamor-24 glamor-25"
+                                    href="2"
+                                  />
+                                </Link>
+                              </Styled(Link)>
+                            </h5>
+                            <Styled(div)>
+                              <div
+                                className="glamor-28 glamor-29"
+                              />
+                            </Styled(div)>
                           </div>
-                        </FlowLayout>
-                      </a>
-                    </Link>
-                  </Button>
-                  <Button
-                    disabled={true}
-                    size="small"
-                    title="You cannot leave the organization as you are the only owner."
-                  >
-                    <button
-                      className="button tip button-default button-sm button-disabled"
-                      disabled={true}
-                      onClick={[Function]}
-                      role="button"
-                    >
-                      <FlowLayout
-                        truncate={false}
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={180}
                       >
-                        <div
-                          className="flow-layout"
+                        <Base
+                          className="glamor-10"
+                          px={2}
+                          w={180}
                         >
-                          <span
-                            className="button-label"
+                          <div
+                            className="glamor-10"
+                            is={null}
                           >
-                            <span
-                              className="icon icon-exit"
-                            />
-                             
-                            Leave
-                          </span>
-                        </div>
-                      </FlowLayout>
-                    </button>
-                  </Button>
-                </td>
-              </tr>
-            </OrganizationMemberRow>
-            <OrganizationMemberRow
-              canAddMembers={true}
-              canRemoveMembers={false}
-              currentUser={
-                Object {
-                  "email": "",
-                  "flags": Object {
-                    "sso:linked": false,
-                  },
-                  "id": "2",
-                  "name": "",
-                  "pending": false,
-                  "roleName": "",
-                  "user": Object {
-                    "email": "sentry2@test.com",
-                    "has2fa": true,
+                            <div>
+                              <div>
+                                <strong>
+                                  Missing SSO Link
+                                </strong>
+                              </div>
+                              <Button
+                                disabled={false}
+                                onClick={[Function]}
+                                priority="primary"
+                                size="xsmall"
+                                style={
+                                  Object {
+                                    "marginTop": 2,
+                                    "padding": "0 4px",
+                                  }
+                                }
+                              >
+                                <button
+                                  className="button button-primary button-xs"
+                                  disabled={false}
+                                  onClick={[Function]}
+                                  role="button"
+                                  style={
+                                    Object {
+                                      "marginTop": 2,
+                                      "padding": "0 4px",
+                                    }
+                                  }
+                                >
+                                  <FlowLayout
+                                    truncate={false}
+                                  >
+                                    <div
+                                      className="flow-layout"
+                                    >
+                                      <span
+                                        className="button-label"
+                                      >
+                                        Resend invite
+                                      </span>
+                                    </div>
+                                  </FlowLayout>
+                                </button>
+                              </Button>
+                            </div>
+                          </div>
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={100}
+                      >
+                        <Base
+                          className="glamor-12"
+                          px={2}
+                          w={100}
+                        >
+                          <div
+                            className="glamor-12"
+                            is={null}
+                          />
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={120}
+                      >
+                        <Base
+                          className="glamor-14"
+                          px={2}
+                          w={120}
+                        >
+                          <div
+                            className="glamor-14"
+                            is={null}
+                          >
+                            <Button
+                              disabled={true}
+                              size="small"
+                              title="You cannot leave the organization as you are the only owner."
+                            >
+                              <button
+                                className="button tip button-default button-sm button-disabled"
+                                disabled={true}
+                                onClick={[Function]}
+                                role="button"
+                              >
+                                <FlowLayout
+                                  truncate={false}
+                                >
+                                  <div
+                                    className="flow-layout"
+                                  >
+                                    <span
+                                      className="button-label"
+                                    >
+                                      <span
+                                        className="icon icon-exit"
+                                      />
+                                       
+                                      Leave
+                                    </span>
+                                  </div>
+                                </FlowLayout>
+                              </button>
+                            </Button>
+                          </div>
+                        </Base>
+                      </Box>
+                    </div>
+                  </Base>
+                </Styled(Base)>
+              </OrganizationMemberRow>
+              <OrganizationMemberRow
+                canAddMembers={true}
+                canRemoveMembers={false}
+                currentUser={
+                  Object {
+                    "email": "",
+                    "flags": Object {
+                      "sso:linked": false,
+                    },
                     "id": "2",
-                    "name": "Sentry 2 Name",
-                    "username": "Sentry 2 Username",
-                  },
+                    "name": "",
+                    "pending": false,
+                    "roleName": "",
+                    "user": Object {
+                      "email": "sentry2@test.com",
+                      "has2fa": true,
+                      "id": "2",
+                      "name": "Sentry 2 Name",
+                      "username": "Sentry 2 Username",
+                    },
+                  }
                 }
-              }
-              member={
-                Object {
-                  "email": "",
-                  "flags": Object {
-                    "sso:linked": true,
-                  },
-                  "id": "3",
-                  "name": "",
-                  "pending": false,
-                  "roleName": "",
-                  "user": Object {
-                    "email": "sentry3@test.com",
-                    "has2fa": true,
+                member={
+                  Object {
+                    "email": "",
+                    "flags": Object {
+                      "sso:linked": true,
+                    },
                     "id": "3",
-                    "name": "Sentry 3 Name",
-                    "username": "Sentry 3 Username",
-                  },
+                    "name": "",
+                    "pending": false,
+                    "roleName": "",
+                    "user": Object {
+                      "email": "sentry3@test.com",
+                      "has2fa": true,
+                      "id": "3",
+                      "name": "Sentry 3 Name",
+                      "username": "Sentry 3 Username",
+                    },
+                  }
                 }
-              }
-              memberCanLeave={false}
-              onLeave={[Function]}
-              onRemove={[Function]}
-              onSendInvite={[Function]}
-              orgId="org-id"
-              orgName="Organization Name"
-              requireLink={true}
-            >
-              <tr>
-                <td
-                  className="table-user-info"
-                >
-                  <Avatar
-                    className="avatar"
-                    gravatar={true}
-                    size={64}
-                    user={
-                      Object {
-                        "email": "sentry3@test.com",
-                        "has2fa": true,
-                        "id": "3",
-                        "name": "Sentry 3 Name",
-                        "username": "Sentry 3 Username",
-                      }
-                    }
-                  >
-                    <span
-                      className="avatar"
-                    >
-                      <img
-                        onError={[Function]}
-                        onLoad={[Function]}
-                        src="undefined/avatar/40d78e2a4587a53a171944ffe71ee3d4?s=64&d=blank"
-                      />
-                    </span>
-                  </Avatar>
-                  <h5>
-                    <Link
-                      to="/organizations/org-id/members/3/"
-                    >
-                      <a
-                        href="/organizations/org-id/members/3/"
-                      />
-                    </Link>
-                  </h5>
-                  <br />
-                </td>
-                <td
-                  className="status"
-                />
-                <td
-                  className="squash"
-                />
-                <td
-                  className="align-right squash"
+                memberCanLeave={false}
+                onLeave={[Function]}
+                onRemove={[Function]}
+                onSendInvite={[Function]}
+                orgId="org-id"
+                orgName="Organization Name"
+                params={
+                  Object {
+                    "orgId": "org-id",
+                  }
+                }
+                requireLink={true}
+                routes={Array []}
+              >
+                <Styled(Base)
+                  align="center"
+                  py={1}
                 >
-                  <Button
-                    disabled={false}
-                    size="small"
-                    style={
-                      Object {
-                        "marginRight": 4,
-                      }
-                    }
-                    to="/organizations/org-id/members/3/"
+                  <Base
+                    align="center"
+                    className="glamor-38 glamor-39"
+                    py={1}
                   >
-                    <Link
-                      className="button button-default button-sm"
-                      disabled={false}
-                      onClick={[Function]}
-                      onlyActiveOnIndex={false}
-                      role="button"
-                      style={
-                        Object {
-                          "marginRight": 4,
-                        }
-                      }
-                      to="/organizations/org-id/members/3/"
+                    <div
+                      className="glamor-38 glamor-39"
+                      is={null}
                     >
-                      <a
-                        className="button button-default button-sm"
-                        disabled={false}
-                        onClick={[Function]}
-                        role="button"
-                        style={
-                          Object {
-                            "marginRight": 4,
-                          }
-                        }
+                      <Box
+                        pl={2}
                       >
-                        <FlowLayout
-                          truncate={false}
+                        <Base
+                          className="glamor-22"
+                          pl={2}
                         >
                           <div
-                            className="flow-layout"
+                            className="glamor-22"
+                            is={null}
                           >
-                            <span
-                              className="button-label"
+                            <Avatar
+                              className="avatar"
+                              gravatar={true}
+                              size={64}
+                              style={
+                                Object {
+                                  "height": 32,
+                                  "width": 32,
+                                }
+                              }
+                              user={
+                                Object {
+                                  "email": "sentry3@test.com",
+                                  "has2fa": true,
+                                  "id": "3",
+                                  "name": "Sentry 3 Name",
+                                  "username": "Sentry 3 Username",
+                                }
+                              }
                             >
-                              Details
-                            </span>
+                              <span
+                                className="avatar"
+                                style={
+                                  Object {
+                                    "height": 32,
+                                    "width": 32,
+                                  }
+                                }
+                              >
+                                <img
+                                  onError={[Function]}
+                                  onLoad={[Function]}
+                                  src="undefined/avatar/40d78e2a4587a53a171944ffe71ee3d4?s=64&d=blank"
+                                />
+                              </span>
+                            </Avatar>
                           </div>
-                        </FlowLayout>
-                      </a>
-                    </Link>
-                  </Button>
-                  <Button
-                    disabled={true}
-                    size="small"
-                    title="You cannot leave the organization as you are the only owner."
-                  >
-                    <button
-                      className="button tip button-default button-sm button-disabled"
-                      disabled={true}
-                      onClick={[Function]}
-                      role="button"
-                    >
-                      <FlowLayout
-                        truncate={false}
+                        </Base>
+                      </Box>
+                      <Box
+                        flex="1"
+                        pl={1}
+                        pr={2}
                       >
-                        <div
-                          className="flow-layout"
+                        <Base
+                          className="glamor-30"
+                          flex="1"
+                          pl={1}
+                          pr={2}
                         >
-                          <span
-                            className="button-label"
+                          <div
+                            className="glamor-30"
+                            is={null}
                           >
-                            <span
-                              className="icon icon-exit"
-                            />
-                             
-                            Leave
-                          </span>
-                        </div>
-                      </FlowLayout>
-                    </button>
-                  </Button>
-                </td>
-              </tr>
-            </OrganizationMemberRow>
-          </tbody>
-        </table>
-      </div>
+                            <h5
+                              style={
+                                Object {
+                                  "margin": "0 0 3px",
+                                }
+                              }
+                            >
+                              <Styled(Link)
+                                to="3"
+                              >
+                                <Link
+                                  className="glamor-24 glamor-25"
+                                  to="3"
+                                >
+                                  <a
+                                    className="glamor-24 glamor-25"
+                                    href="3"
+                                  />
+                                </Link>
+                              </Styled(Link)>
+                            </h5>
+                            <Styled(div)>
+                              <div
+                                className="glamor-28 glamor-29"
+                              />
+                            </Styled(div)>
+                          </div>
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={180}
+                      >
+                        <Base
+                          className="glamor-10"
+                          px={2}
+                          w={180}
+                        >
+                          <div
+                            className="glamor-10"
+                            is={null}
+                          >
+                            <div>
+                              <span
+                                className="icon-check"
+                                style={
+                                  Object {
+                                    "color": "green",
+                                  }
+                                }
+                              />
+                            </div>
+                          </div>
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={100}
+                      >
+                        <Base
+                          className="glamor-12"
+                          px={2}
+                          w={100}
+                        >
+                          <div
+                            className="glamor-12"
+                            is={null}
+                          />
+                        </Base>
+                      </Box>
+                      <Box
+                        px={2}
+                        w={120}
+                      >
+                        <Base
+                          className="glamor-14"
+                          px={2}
+                          w={120}
+                        >
+                          <div
+                            className="glamor-14"
+                            is={null}
+                          >
+                            <Button
+                              disabled={true}
+                              size="small"
+                              title="You cannot leave the organization as you are the only owner."
+                            >
+                              <button
+                                className="button tip button-default button-sm button-disabled"
+                                disabled={true}
+                                onClick={[Function]}
+                                role="button"
+                              >
+                                <FlowLayout
+                                  truncate={false}
+                                >
+                                  <div
+                                    className="flow-layout"
+                                  >
+                                    <span
+                                      className="button-label"
+                                    >
+                                      <span
+                                        className="icon icon-exit"
+                                      />
+                                       
+                                      Leave
+                                    </span>
+                                  </div>
+                                </FlowLayout>
+                              </button>
+                            </Button>
+                          </div>
+                        </Base>
+                      </Box>
+                    </div>
+                  </Base>
+                </Styled(Base)>
+              </OrganizationMemberRow>
+            </div>
+          </Styled(div)>
+        </div>
+      </Styled(div)>
     </div>
   </DocumentTitle>
 </OrganizationMembersView>
diff --git a/tests/js/spec/views/__snapshots__/organizationRepositories.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationRepositories.spec.jsx.snap
index df092d308c..69d54a4bc6 100644
--- a/tests/js/spec/views/__snapshots__/organizationRepositories.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationRepositories.spec.jsx.snap
@@ -1,361 +1,74 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`OrganizationRepositories render() with a provider renders 1`] = `
-<OrganizationRepositories
-  params={
-    Object {
-      "orgId": "org-slug",
-    }
-  }
->
-  <DocumentTitle
-    title="Repositories"
-  >
-    <div>
-      <div
-        className="pull-right"
-      >
-        <DropdownLink
-          alwaysRenderMenu={true}
-          anchorRight={true}
-          caret={true}
-          className="btn btn-primary btn-sm"
-          disabled={false}
-          title="Add Repository"
-        >
-          <DropdownMenu
-            keepMenuOpen={false}
-          >
-            <span
-              className="dropdown pull-right anchor-right open"
-            >
-              <a
-                className="dropdown-actor btn btn-primary btn-sm dropdown-menu-right dropdown-toggle hover"
-                onClick={[Function]}
-                onMouseEnter={[Function]}
-                onMouseLeave={[Function]}
-              >
-                <div
-                  className="dropdown-actor-title"
-                >
-                  <span>
-                    Add Repository
-                  </span>
-                  <i
-                    className="icon-arrow-down"
-                  />
-                </div>
-              </a>
-              <ul
-                className="dropdown-menu"
-                onClick={[Function]}
-                onMouseLeave={[Function]}
-              >
-                <MenuItem
-                  noAnchor={true}
-                >
-                  <li
-                    className=""
-                    href={null}
-                    role="presentation"
-                    title={null}
-                  >
-                    <AddRepositoryLink
-                      onSuccess={[Function]}
-                      orgId="org-slug"
-                      provider={
-                        Object {
-                          "config": Array [
-                            Object {
-                              "help": "Enter your repository name, including the owner.",
-                              "label": "Repository Name",
-                              "name": "name",
-                              "placeholder": "e.g. getsentry/sentry",
-                              "required": true,
-                              "type": "text",
-                            },
-                          ],
-                          "id": "github",
-                          "name": "GitHub",
-                        }
-                      }
-                    >
-                      <a
-                        onClick={[Function]}
-                      >
-                        GitHub
-                        <Modal
-                          animation={false}
-                          autoFocus={true}
-                          backdrop={true}
-                          bsClass="modal"
-                          dialogComponentClass={[Function]}
-                          enforceFocus={true}
-                          keyboard={true}
-                          manager={
-                            ModalManager {
-                              "containers": Array [],
-                              "data": Array [],
-                              "handleContainerOverflow": true,
-                              "hideSiblingNodes": true,
-                              "modals": Array [],
-                            }
-                          }
-                          onHide={[Function]}
-                          renderBackdrop={[Function]}
-                          restoreFocus={true}
-                          show={false}
-                        >
-                          <Modal
-                            autoFocus={true}
-                            backdrop={true}
-                            backdropClassName="modal-backdrop"
-                            backdropTransitionTimeout={150}
-                            containerClassName="modal-open"
-                            dialogTransitionTimeout={300}
-                            enforceFocus={true}
-                            keyboard={true}
-                            manager={
-                              ModalManager {
-                                "containers": Array [],
-                                "data": Array [],
-                                "handleContainerOverflow": true,
-                                "hideSiblingNodes": true,
-                                "modals": Array [],
-                              }
-                            }
-                            onEntering={[Function]}
-                            onExited={[Function]}
-                            onHide={[Function]}
-                            renderBackdrop={[Function]}
-                            restoreFocus={true}
-                            show={false}
-                          />
-                        </Modal>
-                      </a>
-                    </AddRepositoryLink>
-                  </li>
-                </MenuItem>
-              </ul>
-            </span>
-          </DropdownMenu>
-        </DropdownLink>
-      </div>
-      <h3
-        className="m-b-2"
-      >
-        Repositories
-      </h3>
-      <div
-        className="well blankslate align-center p-x-2 p-y-1"
+exports[`OrganizationRepositories renders with a repository 1`] = `
+<div>
+  <SettingsPageHeading
+    action={
+      <DropdownLink
+        alwaysRenderMenu={true}
+        anchorRight={true}
+        caret={true}
+        className="btn btn-primary btn-sm"
+        disabled={false}
+        title="Add Repository"
       >
-        <div
-          className="icon icon-lg icon-git-commit"
-        />
-        <h3>
-          Sentry is better with commit data
-        </h3>
-        <p>
-          Adding one or more repositories will enable enhanced releases and the ability to resolve Sentry Issues via git message.
-        </p>
-        <p
-          className="m-b-1"
+        <MenuItem
+          noAnchor={true}
         >
-          <a
-            className="btn btn-default"
-            href="https://docs.sentry.io/learn/releases/"
-          >
-            Learn more
-          </a>
-        </p>
-      </div>
-    </div>
-  </DocumentTitle>
-</OrganizationRepositories>
-`;
-
-exports[`OrganizationRepositories render() with a provider renders with a repository 1`] = `
-<OrganizationRepositories
-  params={
-    Object {
-      "orgId": "org-slug",
+          <AddRepositoryLink
+            orgId="org-slug"
+            provider={
+              Object {
+                "config": Array [
+                  Object {
+                    "help": "Enter your repository name, including the owner.",
+                    "label": "Repository Name",
+                    "name": "name",
+                    "placeholder": "e.g. getsentry/sentry",
+                    "required": true,
+                    "type": "text",
+                  },
+                ],
+                "id": "github",
+                "name": "GitHub",
+              }
+            }
+          />
+        </MenuItem>
+      </DropdownLink>
     }
-  }
->
-  <DocumentTitle
-    title="Repositories"
-  >
-    <div>
-      <div
-        className="pull-right"
-      >
-        <DropdownLink
-          alwaysRenderMenu={true}
-          anchorRight={true}
-          caret={true}
-          className="btn btn-primary btn-sm"
-          disabled={false}
-          title="Add Repository"
+    label="Repositories"
+  />
+  <Styled(div)>
+    <PanelHeader
+      disablePadding={true}
+    >
+      <Flex>
+        <Box
+          px={2}
         >
-          <DropdownMenu
-            keepMenuOpen={false}
+          Added Repositories
+        </Box>
+      </Flex>
+    </PanelHeader>
+    <Styled(div)>
+      <Box>
+        <WithTheme(Styled(SpreadLayout))>
+          <Box
+            flex="1"
+            p={2}
           >
-            <span
-              className="dropdown pull-right anchor-right open"
+            <Flex
+              direction="column"
             >
-              <a
-                className="dropdown-actor btn btn-primary btn-sm dropdown-menu-right dropdown-toggle hover"
-                onClick={[Function]}
-                onMouseEnter={[Function]}
-                onMouseLeave={[Function]}
+              <Box
+                pb={1}
               >
-                <div
-                  className="dropdown-actor-title"
-                >
-                  <span>
-                    Add Repository
-                  </span>
-                  <i
-                    className="icon-arrow-down"
-                  />
-                </div>
-              </a>
-              <ul
-                className="dropdown-menu"
-                onClick={[Function]}
-                onMouseLeave={[Function]}
-              >
-                <MenuItem
-                  noAnchor={true}
-                >
-                  <li
-                    className=""
-                    href={null}
-                    role="presentation"
-                    title={null}
-                  >
-                    <AddRepositoryLink
-                      onSuccess={[Function]}
-                      orgId="org-slug"
-                      provider={
-                        Object {
-                          "config": Array [
-                            Object {
-                              "help": "Enter your repository name, including the owner.",
-                              "label": "Repository Name",
-                              "name": "name",
-                              "placeholder": "e.g. getsentry/sentry",
-                              "required": true,
-                              "type": "text",
-                            },
-                          ],
-                          "id": "github",
-                          "name": "GitHub",
-                        }
-                      }
-                    >
-                      <a
-                        onClick={[Function]}
-                      >
-                        GitHub
-                        <Modal
-                          animation={false}
-                          autoFocus={true}
-                          backdrop={true}
-                          bsClass="modal"
-                          dialogComponentClass={[Function]}
-                          enforceFocus={true}
-                          keyboard={true}
-                          manager={
-                            ModalManager {
-                              "containers": Array [],
-                              "data": Array [],
-                              "handleContainerOverflow": true,
-                              "hideSiblingNodes": true,
-                              "modals": Array [],
-                            }
-                          }
-                          onHide={[Function]}
-                          renderBackdrop={[Function]}
-                          restoreFocus={true}
-                          show={false}
-                        >
-                          <Modal
-                            autoFocus={true}
-                            backdrop={true}
-                            backdropClassName="modal-backdrop"
-                            backdropTransitionTimeout={150}
-                            containerClassName="modal-open"
-                            dialogTransitionTimeout={300}
-                            enforceFocus={true}
-                            keyboard={true}
-                            manager={
-                              ModalManager {
-                                "containers": Array [],
-                                "data": Array [],
-                                "handleContainerOverflow": true,
-                                "hideSiblingNodes": true,
-                                "modals": Array [],
-                              }
-                            }
-                            onEntering={[Function]}
-                            onExited={[Function]}
-                            onHide={[Function]}
-                            renderBackdrop={[Function]}
-                            restoreFocus={true}
-                            show={false}
-                          />
-                        </Modal>
-                      </a>
-                    </AddRepositoryLink>
-                  </li>
-                </MenuItem>
-              </ul>
-            </span>
-          </DropdownMenu>
-        </DropdownLink>
-      </div>
-      <h3
-        className="m-b-2"
-      >
-        Repositories
-      </h3>
-      <div
-        className="m-b-2"
-      >
-        <p>
-          Connecting a repository allows Sentry to capture commit data via webhooks. This enables features like suggested assignees and resolving issues via commit message. Once you've connected a repository, you can associate commits with releases via the API.
-           
-          <span>
-            <span>
-              See our 
-            </span>
-            <a
-              href="https://docs.sentry.io/learn/releases/"
-            >
-              <span>
-                documentation
-              </span>
-            </a>
-            <span>
-               for more details.
-            </span>
-          </span>
-        </p>
-      </div>
-      <div
-        className="panel panel-default"
-      >
-        <table
-          className="table"
-        >
-          <tbody>
-            <tr>
-              <td>
                 <strong>
                   repo-name
                 </strong>
-                <br />
+              </Box>
+              <Box>
                 <small />
                 <small>
                    
@@ -366,117 +79,41 @@ exports[`OrganizationRepositories render() with a provider renders with a reposi
                     https://github.com/example/repo-name
                   </a>
                 </small>
-              </td>
-              <td
-                style={
-                  Object {
-                    "width": 60,
-                  }
-                }
+              </Box>
+            </Flex>
+          </Box>
+          <Box
+            p={2}
+          >
+            <Confirm
+              cancelText="Cancel"
+              confirmText="Confirm"
+              disabled={false}
+              message="Are you sure you want to remove this repository?"
+              onConfirm={[Function]}
+              priority="primary"
+            >
+              <Button
+                disabled={false}
+                size="xsmall"
               >
-                <Confirm
-                  cancelText="Cancel"
-                  confirmText="Confirm"
-                  disabled={false}
-                  message="Are you sure you want to remove this repository?"
-                  onConfirm={[Function]}
-                  priority="primary"
-                >
-                  <Button
-                    disabled={false}
-                    onClick={[Function]}
-                    size="xsmall"
-                  >
-                    <button
-                      className="button button-default button-xs"
-                      disabled={false}
-                      onClick={[Function]}
-                      role="button"
-                    >
-                      <FlowLayout
-                        truncate={false}
-                      >
-                        <div
-                          className="flow-layout"
-                        >
-                          <span
-                            className="button-label"
-                          >
-                            <span
-                              className="icon icon-trash"
-                            />
-                            <Modal
-                              animation={false}
-                              autoFocus={true}
-                              backdrop={true}
-                              bsClass="modal"
-                              dialogComponentClass={[Function]}
-                              enforceFocus={true}
-                              keyboard={true}
-                              manager={
-                                ModalManager {
-                                  "containers": Array [],
-                                  "data": Array [],
-                                  "handleContainerOverflow": true,
-                                  "hideSiblingNodes": true,
-                                  "modals": Array [],
-                                }
-                              }
-                              onHide={[Function]}
-                              renderBackdrop={[Function]}
-                              restoreFocus={true}
-                              show={false}
-                            >
-                              <Modal
-                                autoFocus={true}
-                                backdrop={true}
-                                backdropClassName="modal-backdrop"
-                                backdropTransitionTimeout={150}
-                                containerClassName="modal-open"
-                                dialogTransitionTimeout={300}
-                                enforceFocus={true}
-                                keyboard={true}
-                                manager={
-                                  ModalManager {
-                                    "containers": Array [],
-                                    "data": Array [],
-                                    "handleContainerOverflow": true,
-                                    "hideSiblingNodes": true,
-                                    "modals": Array [],
-                                  }
-                                }
-                                onEntering={[Function]}
-                                onExited={[Function]}
-                                onHide={[Function]}
-                                renderBackdrop={[Function]}
-                                restoreFocus={true}
-                                show={false}
-                              />
-                            </Modal>
-                          </span>
-                        </div>
-                      </FlowLayout>
-                    </button>
-                  </Button>
-                </Confirm>
-              </td>
-            </tr>
-          </tbody>
-        </table>
-      </div>
-    </div>
-  </DocumentTitle>
-</OrganizationRepositories>
+                <span
+                  className="icon icon-trash"
+                />
+              </Button>
+            </Confirm>
+          </Box>
+        </WithTheme(Styled(SpreadLayout))>
+      </Box>
+    </Styled(div)>
+  </Styled(div)>
+</div>
 `;
 
-exports[`OrganizationRepositories render() without any providers is loading when initially rendering 1`] = `
-<DocumentTitle
-  title="Repositories"
->
-  <div>
-    <div
-      className="pull-right"
-    >
+exports[`OrganizationRepositories renders with github provider 1`] = `
+<div>
+  <SettingsPageHeading
+    action={
       <DropdownLink
         alwaysRenderMenu={true}
         anchorRight={true}
@@ -484,124 +121,143 @@ exports[`OrganizationRepositories render() without any providers is loading when
         className="btn btn-primary btn-sm"
         disabled={false}
         title="Add Repository"
-      />
-    </div>
-    <h3
-      className="m-b-2"
-    >
-      Repositories
-    </h3>
-    <div
-      className="well blankslate align-center p-x-2 p-y-1"
-    >
-      <div
-        className="icon icon-lg icon-git-commit"
-      />
-      <h3>
-        Sentry is better with commit data
-      </h3>
-      <p>
-        Adding one or more repositories will enable enhanced releases and the ability to resolve Sentry Issues via git message.
-      </p>
-      <p
-        className="m-b-1"
       >
+        <MenuItem
+          noAnchor={true}
+        >
+          <AddRepositoryLink
+            orgId="org-slug"
+            provider={
+              Object {
+                "config": Array [
+                  Object {
+                    "help": "Enter your repository name, including the owner.",
+                    "label": "Repository Name",
+                    "name": "name",
+                    "placeholder": "e.g. getsentry/sentry",
+                    "required": true,
+                    "type": "text",
+                  },
+                ],
+                "id": "github",
+                "name": "GitHub",
+              }
+            }
+          />
+        </MenuItem>
+      </DropdownLink>
+    }
+    label="Repositories"
+  />
+  <div
+    className="m-b-2"
+  >
+    <p>
+      Connecting a repository allows Sentry to capture commit data via webhooks. This enables features like suggested assignees and resolving issues via commit message. Once you've connected a repository, you can associate commits with releases via the API.
+       
+      <span>
+        <span>
+          See our 
+        </span>
         <a
-          className="btn btn-default"
           href="https://docs.sentry.io/learn/releases/"
         >
-          Learn more
+          <span>
+            documentation
+          </span>
         </a>
-      </p>
-    </div>
+        <span>
+           for more details.
+        </span>
+      </span>
+    </p>
   </div>
-</DocumentTitle>
+  <div
+    className="well blankslate align-center p-x-2 p-y-1"
+  >
+    <div
+      className="icon icon-lg icon-git-commit"
+    />
+    <h3>
+      Sentry is better with commit data
+    </h3>
+    <p>
+      Adding one or more repositories will enable enhanced releases and the ability to resolve Sentry Issues via git message.
+    </p>
+    <p
+      className="m-b-1"
+    >
+      <a
+        className="btn btn-default"
+        href="https://docs.sentry.io/learn/releases/"
+      >
+        Learn more
+      </a>
+    </p>
+  </div>
+</div>
 `;
 
-exports[`OrganizationRepositories render() without any providers renders 1`] = `
-<OrganizationRepositories
-  params={
-    Object {
-      "orgId": "org-slug",
+exports[`OrganizationRepositories renders without providers 1`] = `
+<div>
+  <SettingsPageHeading
+    action={
+      <DropdownLink
+        alwaysRenderMenu={true}
+        anchorRight={true}
+        caret={true}
+        className="btn btn-primary btn-sm"
+        disabled={false}
+        title="Add Repository"
+      />
     }
-  }
->
-  <DocumentTitle
-    title="Repositories"
+    label="Repositories"
+  />
+  <div
+    className="m-b-2"
   >
-    <div>
-      <div
-        className="pull-right"
-      >
-        <DropdownLink
-          alwaysRenderMenu={true}
-          anchorRight={true}
-          caret={true}
-          className="btn btn-primary btn-sm"
-          disabled={false}
-          title="Add Repository"
+    <p>
+      Connecting a repository allows Sentry to capture commit data via webhooks. This enables features like suggested assignees and resolving issues via commit message. Once you've connected a repository, you can associate commits with releases via the API.
+       
+      <span>
+        <span>
+          See our 
+        </span>
+        <a
+          href="https://docs.sentry.io/learn/releases/"
         >
-          <DropdownMenu
-            keepMenuOpen={false}
-          >
-            <span
-              className="dropdown pull-right anchor-right open"
-            >
-              <a
-                className="dropdown-actor btn btn-primary btn-sm dropdown-menu-right dropdown-toggle hover"
-                onClick={[Function]}
-                onMouseEnter={[Function]}
-                onMouseLeave={[Function]}
-              >
-                <div
-                  className="dropdown-actor-title"
-                >
-                  <span>
-                    Add Repository
-                  </span>
-                  <i
-                    className="icon-arrow-down"
-                  />
-                </div>
-              </a>
-              <ul
-                className="dropdown-menu"
-                onClick={[Function]}
-                onMouseLeave={[Function]}
-              />
-            </span>
-          </DropdownMenu>
-        </DropdownLink>
-      </div>
-      <h3
-        className="m-b-2"
-      >
-        Repositories
-      </h3>
-      <div
-        className="well blankslate align-center p-x-2 p-y-1"
+          <span>
+            documentation
+          </span>
+        </a>
+        <span>
+           for more details.
+        </span>
+      </span>
+    </p>
+  </div>
+  <div
+    className="well blankslate align-center p-x-2 p-y-1"
+  >
+    <div
+      className="icon icon-lg icon-git-commit"
+    />
+    <h3>
+      Sentry is better with commit data
+    </h3>
+    <p>
+      Adding one or more repositories will enable enhanced releases and the ability to resolve Sentry Issues via git message.
+    </p>
+    <p
+      className="m-b-1"
+    >
+      <a
+        className="btn btn-default"
+        href="https://docs.sentry.io/learn/releases/"
       >
-        <div
-          className="icon icon-lg icon-git-commit"
-        />
-        <h3>
-          Sentry is better with commit data
-        </h3>
-        <p>
-          Adding one or more repositories will enable enhanced releases and the ability to resolve Sentry Issues via git message.
-        </p>
-        <p
-          className="m-b-1"
-        >
-          <a
-            className="btn btn-default"
-            href="https://docs.sentry.io/learn/releases/"
-          >
-            Learn more
-          </a>
-        </p>
-      </div>
-    </div>
-  </DocumentTitle>
-</OrganizationRepositories>
+        Learn more
+      </a>
+    </p>
+  </div>
+</div>
 `;
diff --git a/tests/js/spec/views/__snapshots__/organizationRepositoriesView.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationRepositoriesView.spec.jsx.snap
new file mode 100644
index 0000000000..5af521de38
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/organizationRepositoriesView.spec.jsx.snap
@@ -0,0 +1,29 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`OrganizationRepositoriesView render() without any providers is loading when initially rendering 1`] = `
+<DocumentTitle
+  title="Repositories"
+>
+  <LazyLoad
+    component={[Function]}
+    error={false}
+    errors={Object {}}
+    itemList={Array []}
+    loading={false}
+    onAddRepo={[Function]}
+    onCancelDelete={[Function]}
+    onDeleteRepo={[Function]}
+    params={
+      Object {
+        "orgId": "org-slug",
+      }
+    }
+    remainingRequests={0}
+    repoConfig={
+      Object {
+        "providers": Array [],
+      }
+    }
+  />
+</DocumentTitle>
+`;
diff --git a/tests/js/spec/views/groupActivity/index.spec.jsx b/tests/js/spec/views/groupActivity/index.spec.jsx
index b055857a96..407571a8be 100644
--- a/tests/js/spec/views/groupActivity/index.spec.jsx
+++ b/tests/js/spec/views/groupActivity/index.spec.jsx
@@ -23,7 +23,7 @@ describe('GroupActivity', function() {
     let wrapper = shallow(<GroupActivity group={{id: '1337', activity: []}} />, {
       context: {
         group: {id: '1337'},
-        project: {id: 'foo'},
+        project: {id: 'foo', slug: 'foo', name: 'Foo'},
         team: {id: '1'},
         organization: {id: 'bar'},
       },
@@ -38,7 +38,7 @@ describe('GroupActivity', function() {
       instance = shallow(<GroupActivity group={{id: '1337', activity: []}} />, {
         context: {
           group: {id: '1337'},
-          project: {id: 'foo'},
+          project: {id: 'foo', slug: 'foo', name: 'Foo'},
           team: {id: '1'},
           organization: {id: 'bar'},
         },
diff --git a/tests/js/spec/views/groupDetails/__snapshots__/actions.spec.jsx.snap b/tests/js/spec/views/groupDetails/__snapshots__/actions.spec.jsx.snap
index e52aa15af2..7b737c4850 100644
--- a/tests/js/spec/views/groupDetails/__snapshots__/actions.spec.jsx.snap
+++ b/tests/js/spec/views/groupDetails/__snapshots__/actions.spec.jsx.snap
@@ -52,6 +52,7 @@ exports[`GroupActions render() renders correctly 1`] = `
     project={
       Object {
         "id": "2448",
+        "name": "project name",
         "slug": "project",
       }
     }
diff --git a/tests/js/spec/views/groupDetails/actions.spec.jsx b/tests/js/spec/views/groupDetails/actions.spec.jsx
index 87c62e7023..58e2ebd2ce 100644
--- a/tests/js/spec/views/groupDetails/actions.spec.jsx
+++ b/tests/js/spec/views/groupDetails/actions.spec.jsx
@@ -32,6 +32,7 @@ describe('GroupActions', function() {
           },
           project: {
             id: '2448',
+            name: 'project name',
             slug: 'project',
           },
           team: {
diff --git a/tests/js/spec/views/groupDetails/seenBy.spec.jsx b/tests/js/spec/views/groupDetails/seenBy.spec.jsx
index 3a988fb4bb..696769c6eb 100644
--- a/tests/js/spec/views/groupDetails/seenBy.spec.jsx
+++ b/tests/js/spec/views/groupDetails/seenBy.spec.jsx
@@ -22,7 +22,11 @@ describe('GroupSeenBy', function() {
       let wrapper = shallow(<GroupSeenBy />, {
         context: {
           group: {id: '1337'},
-          project: {id: '2448'},
+          project: {
+            id: '2448',
+            name: 'project name',
+            slug: 'project-name',
+          },
           team: {id: '3559'},
         },
       });
@@ -39,7 +43,11 @@ describe('GroupSeenBy', function() {
               {id: 2, email: 'john@example.com'},
             ],
           },
-          project: {id: '2448'},
+          project: {
+            id: '2448',
+            name: 'project name',
+            slug: 'project-name',
+          },
           team: {id: '3559'},
         },
       });
diff --git a/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
index 59d79dc2fd..bfd1a6a4c8 100644
--- a/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
@@ -83,7 +83,7 @@ exports[`Configure should render correctly render() should render platform docs
         }
       >
         <DocumentTitle
-          title="undefined / undefined"
+          title="undefined / Test Project"
         >
           <ProjectDocsContext>
             <LoadingIndicator>
diff --git a/tests/js/spec/views/onboarding/configure/index.spec.jsx b/tests/js/spec/views/onboarding/configure/index.spec.jsx
index 1c62468ff0..8ca9941943 100644
--- a/tests/js/spec/views/onboarding/configure/index.spec.jsx
+++ b/tests/js/spec/views/onboarding/configure/index.spec.jsx
@@ -91,6 +91,7 @@ describe('Configure should render correctly', function() {
                 hasAccess: true,
                 projects: [
                   {
+                    name: 'Test Project',
                     slug: 'testProject',
                     id: 'testProject',
                   },
diff --git a/tests/js/spec/views/organizationAccessRequests.spec.jsx b/tests/js/spec/views/organizationAccessRequests.spec.jsx
index 5772b476be..1ec4482c4a 100644
--- a/tests/js/spec/views/organizationAccessRequests.spec.jsx
+++ b/tests/js/spec/views/organizationAccessRequests.spec.jsx
@@ -1,8 +1,8 @@
 import React from 'react';
 import {shallow, mount} from 'enzyme';
 
-import OrganizationAccessRequests
-  from 'app/views/settings/organization/members/organizationAccessRequests';
+import OrganizationAccessRequests from 'app/views/settings/organization/members/organizationAccessRequests';
+import {ThemeProvider} from 'emotion-theming';
 
 describe('OrganizationAccessRequests', function() {
   beforeEach(function() {});
@@ -33,11 +33,11 @@ describe('OrganizationAccessRequests', function() {
               roleName: '',
               user: {
                 id: '',
-                name: 'sentry@test.com'
-              }
+                name: 'sentry@test.com',
+              },
             },
-            team: TestStubs.Team()
-          }
+            team: TestStubs.Team(),
+          },
         ]}
         onApprove={() => {}}
         onDeny={() => {}}
@@ -49,62 +49,72 @@ describe('OrganizationAccessRequests', function() {
   it('can approve', function() {
     let mock = jest.fn();
     let wrapper = mount(
-      <OrganizationAccessRequests
-        params={{apiKey: 1, orgId: 'org-slug'}}
-        accessRequestBusy={new Map()}
-        requestList={[
-          {
-            id: 'id',
-            member: {
-              id: 'memberid',
-              email: '',
-              name: '',
-              roleName: '',
-              user: {
-                id: '',
-                name: 'sentry@test.com'
-              }
+      <ThemeProvider theme={{}}>
+        <OrganizationAccessRequests
+          params={{apiKey: 1, orgId: 'org-slug'}}
+          accessRequestBusy={new Map()}
+          requestList={[
+            {
+              id: 'id',
+              member: {
+                id: 'memberid',
+                email: '',
+                name: '',
+                roleName: '',
+                user: {
+                  id: '',
+                  name: 'sentry@test.com',
+                },
+              },
+              team: TestStubs.Team(),
             },
-            team: TestStubs.Team()
-          }
-        ]}
-        onApprove={mock}
-        onDeny={() => {}}
-      />
+          ]}
+          onApprove={mock}
+          onDeny={() => {}}
+        />
+      </ThemeProvider>
     );
 
-    wrapper.find('Button').first().simulate('click');
+    wrapper
+      .find('Button')
+      .first()
+      .simulate('click');
     expect(mock).toHaveBeenCalled();
   });
 
   it('can deny', function() {
     let mock = jest.fn();
     let wrapper = mount(
-      <OrganizationAccessRequests
-        params={{apiKey: 1, orgId: 'org-slug'}}
-        accessRequestBusy={new Map()}
-        requestList={[
-          {
-            id: 'id',
-            member: {
-              id: 'memberid',
-              email: '',
-              name: '',
-              roleName: '',
-              user: {
-                id: '',
-                name: 'sentry@test.com'
-              }
+      <ThemeProvider theme={{}}>
+        <OrganizationAccessRequests
+          params={{apiKey: 1, orgId: 'org-slug'}}
+          accessRequestBusy={new Map()}
+          requestList={[
+            {
+              id: 'id',
+              member: {
+                id: 'memberid',
+                email: '',
+                name: '',
+                roleName: '',
+                user: {
+                  id: '',
+                  name: 'sentry@test.com',
+                },
+              },
+              team: TestStubs.Team(),
             },
-            team: TestStubs.Team()
-          }
-        ]}
-        onApprove={() => {}}
-        onDeny={mock}
-      />
+          ]}
+          onApprove={() => {}}
+          onDeny={mock}
+        />
+      </ThemeProvider>
     );
 
-    wrapper.find('Button').last().simulate('click');
+    wrapper
+      .find('Button')
+      .last()
+      .simulate('click');
     expect(mock).toHaveBeenCalled();
   });
 });
diff --git a/tests/js/spec/views/organizationApiKeysList.spec.jsx b/tests/js/spec/views/organizationApiKeysList.spec.jsx
new file mode 100644
index 0000000000..4b01383ad6
--- /dev/null
+++ b/tests/js/spec/views/organizationApiKeysList.spec.jsx
@@ -0,0 +1,59 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import OrganizationApiKeysList from 'app/views/settings/organization/apiKeys/organizationApiKeysList';
+
+const childContextTypes = {
+  organization: React.PropTypes.object,
+  router: React.PropTypes.object,
+  location: React.PropTypes.object,
+};
+
+const routes = [
+  {path: '/'},
+  {path: '/:orgId/'},
+  {path: '/organizations/:orgId/'},
+  {path: 'api-keys/', name: 'API Key'},
+];
+
+describe('OrganizationApiKeysList', function() {
+  beforeEach(function() {});
+
+  it('renders', function() {
+    let wrapper = mount(
+      <OrganizationApiKeysList
+        params={{orgId: 'org-slug'}}
+        routes={routes}
+        keys={[TestStubs.ApiKey()]}
+      />
+    );
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('opens a modal when trying to delete a key', function() {
+    let wrapper = mount(
+      <OrganizationApiKeysList
+        params={{orgId: 'org-slug'}}
+        routes={routes}
+        keys={[TestStubs.ApiKey()]}
+      />,
+      {
+        context: {
+          router: TestStubs.router(),
+          organization: TestStubs.Organization(),
+          location: TestStubs.location(),
+        },
+        childContextTypes,
+      }
+    );
+
+    wrapper.update();
+    // Click remove button
+    wrapper.find('.icon-trash').simulate('click');
+    wrapper.update();
+
+    // expect a modal
+    let modal = wrapper.find('Modal');
+    expect(modal.first().prop('show')).toBe(true);
+  });
+});
diff --git a/tests/js/spec/views/organizationApiKeysView.spec.jsx b/tests/js/spec/views/organizationApiKeysView.spec.jsx
index ff5c98b1f0..f50f2cff7d 100644
--- a/tests/js/spec/views/organizationApiKeysView.spec.jsx
+++ b/tests/js/spec/views/organizationApiKeysView.spec.jsx
@@ -10,6 +10,13 @@ const childContextTypes = {
   location: React.PropTypes.object,
 };
 
+const routes = [
+  {path: '/'},
+  {path: '/:orgId/'},
+  {path: '/organizations/:orgId/'},
+  {path: 'api-keys/', name: 'API Key'},
+];
+
 describe('OrganizationApiKeysView', function() {
   beforeEach(function() {
     Client.clearMockResponses();
@@ -23,44 +30,53 @@ describe('OrganizationApiKeysView', function() {
       method: 'GET',
       body: TestStubs.ApiKey(),
     });
-  });
-
-  it('renders', function() {
-    let wrapper = mount(<OrganizationApiKeysView params={{orgId: 'org-slug'}} />, {
-      context: {
-        router: TestStubs.router(),
-        organization: TestStubs.Organization(),
-        location: TestStubs.location(),
-      },
-      childContextTypes,
+    Client.addMockResponse({
+      url: '/organizations/org-slug/api-keys/1/',
+      method: 'DELETE',
     });
-    expect(wrapper.state('loading')).toBe(false);
-    expect(wrapper).toMatchSnapshot();
   });
 
-  it('can delete a key', function() {
-    let wrapper = mount(<OrganizationApiKeysView params={{orgId: 'org-slug'}} />, {
-      context: {
-        router: TestStubs.router(),
-        organization: TestStubs.Organization(),
-        location: TestStubs.location(),
-      },
-      childContextTypes,
-    });
-    OrganizationApiKeysView.handleRemove = jest.fn();
-    expect(OrganizationApiKeysView.handleRemove).not.toHaveBeenCalled();
+  it('fetches api keys', function() {
+    let wrapper = mount(
+      <OrganizationApiKeysView
+        location={TestStubs.location()}
+        params={{orgId: 'org-slug'}}
+        routes={routes}
+      />,
+      {
+        context: {
+          router: TestStubs.router(),
+          organization: TestStubs.Organization(),
+          location: TestStubs.location(),
+        },
+        childContextTypes,
+      }
+    );
 
-    // Click remove button
-    wrapper.find('.icon-trash').simulate('click');
-    wrapper.update();
+    expect(wrapper.state('keys')).toEqual([TestStubs.ApiKey()]);
+  });
 
-    // expect a modal
-    let modal = wrapper.find('Modal');
-    expect(modal.first().prop('show')).toBe(true);
+  it('can delete a key', function() {
+    let wrapper = mount(
+      <OrganizationApiKeysView
+        location={TestStubs.location()}
+        params={{orgId: 'org-slug'}}
+        routes={routes}
+      />,
+      {
+        context: {
+          router: TestStubs.router(),
+          organization: TestStubs.Organization(),
+          location: TestStubs.location(),
+        },
+        childContextTypes,
+      }
+    );
+    // OrganizationApiKeysView.handleRemove = jest.fn();
+    // expect(OrganizationApiKeysView.handleRemove).not.toHaveBeenCalled();
 
-    // TODO
-    // wrapper.find('Modal').last().find('Button').last().simulate('click');
+    wrapper.instance().handleRemove(1);
 
-    // expect(OrganizationApiKeysView.handleRemove).toHaveBeenCalled();
+    expect(wrapper.state('keys')).toEqual([]);
   });
 });
diff --git a/tests/js/spec/views/organizationAuthList.spec.jsx b/tests/js/spec/views/organizationAuthList.spec.jsx
new file mode 100644
index 0000000000..858769d8cd
--- /dev/null
+++ b/tests/js/spec/views/organizationAuthList.spec.jsx
@@ -0,0 +1,27 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+
+import OrganizationAuthList
+  from 'app/views/settings/organization/auth/organizationAuthList';
+
+jest.mock('jquery');
+
+describe('OrganizationAuthList', function() {
+  it('renders with no providers', function() {
+    let wrapper = shallow(<OrganizationAuthList providerList={[]} />);
+
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('renders', function() {
+    let wrapper = shallow(
+      <OrganizationAuthList
+        orgId="org-slug"
+        onSendReminders={() => {}}
+        providerList={TestStubs.AuthProviders()}
+      />
+    );
+
+    expect(wrapper).toMatchSnapshot();
+  });
+});
diff --git a/tests/js/spec/views/organizationAuthProvider.spec.jsx b/tests/js/spec/views/organizationAuthProvider.spec.jsx
new file mode 100644
index 0000000000..1792a00628
--- /dev/null
+++ b/tests/js/spec/views/organizationAuthProvider.spec.jsx
@@ -0,0 +1,122 @@
+import React from 'react';
+import {shallow, mount} from 'enzyme';
+
+import {Client} from 'app/api';
+import OrganizationAuthProvider from 'app/views/settings/organization/auth/organizationAuthProvider';
+
+jest.mock('jquery');
+
+describe('OrganizationAuthProvider', function() {
+  beforeEach(function() {
+    Client.clearMockResponses();
+    Client.addMockResponse({
+      url: '/organizations/org-slug/auth-provider/',
+      method: 'GET',
+      body: TestStubs.AuthProvider(),
+    });
+    Client.addMockResponse({
+      url: '/organizations/org-slug/auth-providers/',
+      method: 'GET',
+      body: [TestStubs.AuthProvider()],
+    });
+  });
+
+  it('renders with no provider', function() {
+    let wrapper = shallow(
+      <OrganizationAuthProvider
+        orgId="org-slug"
+        onSendReminders={() => {}}
+        provider={null}
+      />
+    );
+
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('renders', function() {
+    let wrapper = shallow(
+      <OrganizationAuthProvider
+        orgId="org-slug"
+        onSendReminders={() => {}}
+        provider={TestStubs.AuthProvider()}
+      />
+    );
+
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('renders with Unlinked members ', function() {
+    let wrapper = shallow(
+      <OrganizationAuthProvider
+        orgId="org-slug"
+        onSendReminders={() => {}}
+        provider={{
+          ...TestStubs.AuthProvider(),
+          pending_links_count: 4,
+        }}
+      />
+    );
+
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('renders with provider template', function() {
+    let wrapper = shallow(
+      <OrganizationAuthProvider
+        orgId="org-slug"
+        onSendReminders={() => {}}
+        provider={{
+          ...TestStubs.AuthProvider(),
+          content: '<strong>Test</strong>',
+        }}
+      />
+    );
+
+    expect(wrapper.find('.box-content')).toMatchSnapshot();
+  });
+
+  it('renders with Require Link and Default Role as admin', function() {
+    let wrapper = mount(
+      <OrganizationAuthProvider
+        orgId="org-slug"
+        onSendReminders={() => {}}
+        provider={{
+          ...TestStubs.AuthProvider(),
+          require_link: true,
+          default_role: 'admin',
+        }}
+      />
+    );
+
+    expect(
+      wrapper
+        .find('BooleanField')
+        .find('input')
+        .prop('checked')
+    ).toBe(true);
+    expect(
+      wrapper
+        .find('Select2Field')
+        .find('select')
+        .prop('value')
+    ).toBe('admin');
+  });
+
+  it('can disable provider', function() {
+    let mock = jest.fn();
+    let wrapper = mount(
+      <OrganizationAuthProvider
+        orgId="org-slug"
+        onSendReminders={() => {}}
+        onDisableProvider={mock}
+        provider={TestStubs.AuthProvider()}
+      />
+    );
+
+    let disableButton = wrapper.find('.form-actions').find('Button');
+
+    disableButton.simulate('click');
+
+    expect(mock).toHaveBeenCalledWith('dummy');
+  });
+});
diff --git a/tests/js/spec/views/organizationAuthView.spec.jsx b/tests/js/spec/views/organizationAuthView.spec.jsx
new file mode 100644
index 0000000000..267a599155
--- /dev/null
+++ b/tests/js/spec/views/organizationAuthView.spec.jsx
@@ -0,0 +1,28 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+
+import {Client} from 'app/api';
+import OrganizationAuthView
+  from 'app/views/settings/organization/auth/organizationAuthProvider';
+
+describe('OrganizationAuthView', function() {
+  beforeEach(function() {
+    Client.clearMockResponses();
+    Client.addMockResponse({
+      url: '/organizations/org-slug/auth-provider/',
+      method: 'GET',
+      body: TestStubs.AuthProvider()
+    });
+    Client.addMockResponse({
+      url: '/organizations/org-slug/auth-providers/',
+      method: 'GET',
+      body: [TestStubs.AuthProvider()]
+    });
+  });
+
+  it('renders from api', function() {
+    let wrapper = shallow(<OrganizationAuthView orgId="org-slug" />);
+
+    expect(wrapper).toMatchSnapshot();
+  });
+});
diff --git a/tests/js/spec/views/organizationMemberRow.spec.jsx b/tests/js/spec/views/organizationMemberRow.spec.jsx
index b365badfe5..90315e2a56 100644
--- a/tests/js/spec/views/organizationMemberRow.spec.jsx
+++ b/tests/js/spec/views/organizationMemberRow.spec.jsx
@@ -30,6 +30,7 @@ describe('OrganizationMemberRow', function() {
   };
 
   let defaultProps = {
+    routes: [],
     orgId: 'org-slug',
     orgName: 'Organization Name',
     status: '',
@@ -222,8 +223,6 @@ describe('OrganizationMemberRow', function() {
 
     it('has button to leave organization and no button to remove', function() {
       let wrapper = shallow(<OrganizationMemberRow {...props} memberCanLeave={true} />);
-
-      expect(findWithText(wrapper.find('Button'), 'Details')).toHaveLength(1);
       expect(findWithText(wrapper.find('Button'), 'Leave')).toHaveLength(1);
       expect(findWithText(wrapper.find('Button'), 'Remove')).toHaveLength(0);
     });
diff --git a/tests/js/spec/views/organizationMembersView.spec.jsx b/tests/js/spec/views/organizationMembersView.spec.jsx
index 1994dc6474..5c9a69beed 100644
--- a/tests/js/spec/views/organizationMembersView.spec.jsx
+++ b/tests/js/spec/views/organizationMembersView.spec.jsx
@@ -4,8 +4,7 @@ import React from 'react';
 import {Client} from 'app/api';
 import {mount} from 'enzyme';
 import ConfigStore from 'app/stores/configStore';
-import OrganizationMembersView
-  from 'app/views/settings/organization/members/organizationMembersView';
+import OrganizationMembersView from 'app/views/settings/organization/members/organizationMembersView';
 
 jest.mock('app/api');
 
@@ -15,6 +14,7 @@ describe('OrganizationMembersView', function() {
     orgId: 'org-slug',
     orgName: 'Organization Name',
     status: '',
+    routes: [],
     requireLink: false,
     memberCanLeave: false,
     canAddMembers: false,
@@ -22,7 +22,7 @@ describe('OrganizationMembersView', function() {
     currentUser,
     onSendInvite: () => {},
     onRemove: () => {},
-    onLeave: () => {}
+    onLeave: () => {},
   };
 
   beforeAll(function() {
@@ -38,12 +38,12 @@ describe('OrganizationMembersView', function() {
     Client.addMockResponse({
       url: '/organizations/org-id/members/',
       method: 'GET',
-      body: TestStubs.Members()
+      body: TestStubs.Members(),
     });
     Client.addMockResponse({
       url: '/organizations/org-id/access-requests/',
       method: 'GET',
-      body: []
+      body: [],
     });
   });
 
@@ -54,8 +54,8 @@ describe('OrganizationMembersView', function() {
         method: 'GET',
         body: {
           ...TestStubs.AuthProvider(),
-          require_link: true
-        }
+          require_link: true,
+        },
       });
     });
 
@@ -64,17 +64,17 @@ describe('OrganizationMembersView', function() {
         <OrganizationMembersView
           {...defaultProps}
           params={{
-            orgId: 'org-id'
+            orgId: 'org-id',
           }}
         />,
         {
           childContextTypes: {
-            router: PropTypes.object
+            router: PropTypes.object,
           },
           context: {
             organization: TestStubs.Organization(),
-            router: TestStubs.router()
-          }
+            router: TestStubs.router(),
+          },
         }
       );
 
@@ -89,8 +89,8 @@ describe('OrganizationMembersView', function() {
         method: 'GET',
         body: {
           ...TestStubs.AuthProvider(),
-          require_link: false
-        }
+          require_link: false,
+        },
       });
     });
 
@@ -99,17 +99,17 @@ describe('OrganizationMembersView', function() {
         <OrganizationMembersView
           {...defaultProps}
           params={{
-            orgId: 'org-id'
+            orgId: 'org-id',
           }}
         />,
         {
           childContextTypes: {
-            router: PropTypes.object
+            router: PropTypes.object,
           },
           context: {
             organization: TestStubs.Organization(),
-            router: TestStubs.router()
-          }
+            router: TestStubs.router(),
+          },
         }
       );
 
diff --git a/tests/js/spec/views/organizationRepositories.spec.jsx b/tests/js/spec/views/organizationRepositories.spec.jsx
index 4c05bd1e5e..320dca6791 100644
--- a/tests/js/spec/views/organizationRepositories.spec.jsx
+++ b/tests/js/spec/views/organizationRepositories.spec.jsx
@@ -1,100 +1,44 @@
 import React from 'react';
-import {mount, shallow} from 'enzyme';
+import {shallow} from 'enzyme';
 
 import {Client} from 'app/api';
-import OrganizationRepositories from 'app/views/organizationRepositories';
-
-const childContextTypes = {
-  organization: React.PropTypes.object,
-  location: React.PropTypes.object,
-};
+import OrganizationRepositories from 'app/views/settings/organization/repositories/organizationRepositories';
 
 describe('OrganizationRepositories', function() {
-  beforeEach(function() {
-    Client.clearMockResponses();
+  it('renders without providers', function() {
+    let wrapper = shallow(
+      <OrganizationRepositories
+        params={{orgId: 'org-slug'}}
+        itemList={[]}
+        repoConfig={{}}
+      />
+    );
+    expect(wrapper).toMatchSnapshot();
   });
 
-  describe('render()', function() {
-    describe('without any providers', function() {
-      beforeEach(function() {
-        Client.addMockResponse({
-          url: '/organizations/org-slug/repos/',
-          body: [],
-        });
-        Client.addMockResponse({
-          url: '/organizations/org-slug/config/repos/',
-          body: {providers: []},
-        });
-      });
-
-      it('is loading when initially rendering', function() {
-        let wrapper = shallow(<OrganizationRepositories params={{orgId: 'org-slug'}} />, {
-          context: {
-            router: TestStubs.router(),
-            organization: TestStubs.Organization(),
-            location: TestStubs.location(),
-          },
-          childContextTypes,
-        });
-        expect(wrapper).toMatchSnapshot();
-      });
-
-      it('renders', function() {
-        let wrapper = mount(<OrganizationRepositories params={{orgId: 'org-slug'}} />, {
-          context: {
-            router: TestStubs.router(),
-            organization: TestStubs.Organization(),
-            location: TestStubs.location(),
-          },
-          childContextTypes,
-        });
-        wrapper.find('.dropdown-actor').simulate('click');
-        expect(wrapper.state('loading')).toBe(false);
-        expect(wrapper).toMatchSnapshot();
-      });
-    });
+  it('renders with github provider', function() {
+    let wrapper = shallow(
+      <OrganizationRepositories
+        params={{orgId: 'org-slug'}}
+        repoConfig={{providers: [TestStubs.GitHubRepositoryProvider()]}}
+        itemList={[]}
+      />
+    );
+    expect(wrapper).toMatchSnapshot();
+  });
 
-    describe('with a provider', function() {
-      beforeEach(function() {
-        Client.addMockResponse({
-          url: '/organizations/org-slug/config/repos/',
-          body: {providers: [TestStubs.GitHubRepositoryProvider()]},
-        });
-      });
-      it('renders', function() {
-        Client.addMockResponse({
-          url: '/organizations/org-slug/repos/',
-          body: [],
-        });
-        let wrapper = mount(<OrganizationRepositories params={{orgId: 'org-slug'}} />, {
-          context: {
-            router: TestStubs.router(),
-            organization: TestStubs.Organization(),
-            location: TestStubs.location(),
-          },
-          childContextTypes,
-        });
-        wrapper.find('.dropdown-actor').simulate('click');
-        expect(wrapper.state('loading')).toBe(false);
-        expect(wrapper).toMatchSnapshot();
-      });
-      it('renders with a repository', function() {
-        Client.addMockResponse({
-          url: '/organizations/org-slug/repos/',
-          body: [TestStubs.Repository()],
-        });
-        let wrapper = mount(<OrganizationRepositories params={{orgId: 'org-slug'}} />, {
-          context: {
-            router: TestStubs.router(),
-            organization: TestStubs.Organization(),
-            location: TestStubs.location(),
-          },
-          childContextTypes,
-        });
-        wrapper.find('.dropdown-actor').simulate('click');
-        expect(wrapper.state('loading')).toBe(false);
-        expect(wrapper).toMatchSnapshot();
-      });
+  it('renders with a repository', function() {
+    Client.addMockResponse({
+      url: '/organizations/org-slug/repos/',
+      body: [TestStubs.Repository()],
     });
+    let wrapper = shallow(
+      <OrganizationRepositories
+        params={{orgId: 'org-slug'}}
+        repoConfig={{providers: [TestStubs.GitHubRepositoryProvider()]}}
+        itemList={[TestStubs.Repository()]}
+      />
+    );
+    expect(wrapper).toMatchSnapshot();
   });
 });
diff --git a/tests/js/spec/views/organizationRepositoriesView.spec.jsx b/tests/js/spec/views/organizationRepositoriesView.spec.jsx
new file mode 100644
index 0000000000..346ceff3e1
--- /dev/null
+++ b/tests/js/spec/views/organizationRepositoriesView.spec.jsx
@@ -0,0 +1,43 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+
+import {Client} from 'app/api';
+import OrganizationRepositories from 'app/views/organizationRepositoriesView';
+
+const childContextTypes = {
+  organization: React.PropTypes.object,
+  location: React.PropTypes.object,
+};
+
+describe('OrganizationRepositoriesView', function() {
+  beforeEach(function() {
+    Client.clearMockResponses();
+  });
+
+  describe('render()', function() {
+    describe('without any providers', function() {
+      beforeEach(function() {
+        Client.addMockResponse({
+          url: '/organizations/org-slug/repos/',
+          body: [],
+        });
+        Client.addMockResponse({
+          url: '/organizations/org-slug/config/repos/',
+          body: {providers: []},
+        });
+      });
+
+      it('is loading when initially rendering', function() {
+        let wrapper = shallow(<OrganizationRepositories params={{orgId: 'org-slug'}} />, {
+          context: {
+            router: TestStubs.router(),
+            organization: TestStubs.Organization(),
+            location: TestStubs.location(),
+          },
+          childContextTypes,
+        });
+        expect(wrapper).toMatchSnapshot();
+      });
+    });
+  });
+});
diff --git a/tests/js/spec/views/providerItem.jsx b/tests/js/spec/views/providerItem.jsx
new file mode 100644
index 0000000000..5afbbf6dee
--- /dev/null
+++ b/tests/js/spec/views/providerItem.jsx
@@ -0,0 +1,21 @@
+import React from 'react';
+import {shallow, mount} from 'enzyme';
+
+import ProviderItem from 'app/views/settings/organization/auth/providerItem';
+
+describe('ProviderItem', function() {
+  it('renders', function() {
+    let wrapper = shallow(
+      <ProviderItem providerKey="dummy" providerName="Dummy" onConfigure={() => {}} />
+    );
+
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('calls configure callback', function() {
+    let mock = jest.fn();
+    mount(<ProviderItem providerKey="dummy" providerName="Dummy" onConfigure={mock} />);
+
+    expect(mock).toHaveBeenCalledWith('dummy');
+  });
+});
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index 8d2751df93..04d5ab00f9 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -38,6 +38,7 @@ describe('Stream', function() {
     context = {
       project: {
         id: '3559',
+        name: 'Foo Project',
         slug: 'foo-project',
         firstEvent: true,
       },
diff --git a/tests/js/spec/views/teamSettings.spec.jsx b/tests/js/spec/views/teamSettings.spec.jsx
index 49cdef1b35..934aee19cd 100644
--- a/tests/js/spec/views/teamSettings.spec.jsx
+++ b/tests/js/spec/views/teamSettings.spec.jsx
@@ -1,7 +1,13 @@
 import React from 'react';
 import {shallow} from 'enzyme';
 
-import TeamSettings from 'app/views/teamSettings';
+import TeamSettings from 'app/views/settings/team/teamSettings.old';
+
+const childContextTypes = {
+  organization: React.PropTypes.object,
+  router: React.PropTypes.object,
+  location: React.PropTypes.object,
+};
 
 describe('TeamSettings', function() {
   describe('render()', function() {
@@ -9,6 +15,7 @@ describe('TeamSettings', function() {
       let team = TestStubs.Team();
       let wrapper = shallow(
         <TeamSettings
+          routes={[]}
           params={{orgId: 'org', teamId: team.slug}}
           team={team}
           onTeamChange={() => {}}
@@ -17,8 +24,11 @@ describe('TeamSettings', function() {
           context: {
             router: TestStubs.router(),
           },
+          childContextTypes,
         }
       );
+
+      wrapper.update();
       expect(wrapper).toMatchSnapshot();
     });
   });
diff --git a/webpack.config.js b/webpack.config.js
index 43b7e4e8e5..2f65b31cb3 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -200,7 +200,7 @@ var appConfig = {
     library: 'exports',
     sourceMapFilename: '[name].js.map',
   },
-  devtool: IS_PRODUCTION ? '#source-map' : '#cheap-source-map',
+  devtool: IS_PRODUCTION ? '#source-map' : '#cheap-module-eval-source-map',
 };
 
 /**
diff --git a/yarn.lock b/yarn.lock
index 9323160388..8f1fd8fb83 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -2,6 +2,21 @@
 # yarn lockfile v1
 
 
+"@babel/helper-module-imports@7.0.0-beta.32":
+  version "7.0.0-beta.32"
+  resolved "https://registry.yarnpkg.com/@babel/helper-module-imports/-/helper-module-imports-7.0.0-beta.32.tgz#8126fc024107c226879841b973677a4f4e510a03"
+  dependencies:
+    "@babel/types" "7.0.0-beta.32"
+    lodash "^4.2.0"
+
+"@babel/types@7.0.0-beta.32":
+  version "7.0.0-beta.32"
+  resolved "https://registry.yarnpkg.com/@babel/types/-/types-7.0.0-beta.32.tgz#c317d0ecc89297b80bbcb2f50608e31f6452a5ff"
+  dependencies:
+    esutils "^2.0.2"
+    lodash "^4.2.0"
+    to-fast-properties "^2.0.0"
+
 "@hypnosphi/fuse.js@^3.0.9":
   version "3.0.9"
   resolved "https://registry.yarnpkg.com/@hypnosphi/fuse.js/-/fuse.js-3.0.9.tgz#ea99f6121b4a8f065b4c71f85595db2714498807"
@@ -485,6 +500,10 @@ asynckit@^0.4.0:
   version "0.4.0"
   resolved "https://registry.yarnpkg.com/asynckit/-/asynckit-0.4.0.tgz#c79ed97f7f34cb8f2ba1bc9790bcc366474b4b79"
 
+atob@~1.1.0:
+  version "1.1.3"
+  resolved "https://registry.yarnpkg.com/atob/-/atob-1.1.3.tgz#95f13629b12c3a51a5d215abdce2aa9f32f80773"
+
 autoprefixer@^6.3.1:
   version "6.7.7"
   resolved "https://registry.yarnpkg.com/autoprefixer/-/autoprefixer-6.7.7.tgz#1dbd1c835658e35ce3f9984099db00585c782014"
@@ -790,6 +809,12 @@ babel-loader@^7.0.0, babel-loader@^7.1.2:
     loader-utils "^1.0.2"
     mkdirp "^0.5.1"
 
+babel-macros@^1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/babel-macros/-/babel-macros-1.2.0.tgz#39e47ed6d286d4a98f1948d8bab45dac17e4e2d4"
+  dependencies:
+    cosmiconfig "3.1.0"
+
 babel-messages@^6.23.0, babel-messages@^6.8.0:
   version "6.23.0"
   resolved "https://registry.yarnpkg.com/babel-messages/-/babel-messages-6.23.0.tgz#f3cdf4703858035b2a2951c6ec5edf6c62f2630e"
@@ -814,6 +839,19 @@ babel-plugin-dynamic-import-node@1.0.2, babel-plugin-dynamic-import-node@^1.0.2:
     babel-template "^6.24.1"
     babel-types "^6.24.1"
 
+babel-plugin-emotion@^8.0.12, babel-plugin-emotion@^8.0.2-11:
+  version "8.0.12"
+  resolved "https://registry.yarnpkg.com/babel-plugin-emotion/-/babel-plugin-emotion-8.0.12.tgz#2ed844001416b0ae2ff787a06b1804ec5f531c89"
+  dependencies:
+    "@babel/helper-module-imports" "7.0.0-beta.32"
+    babel-macros "^1.2.0"
+    babel-plugin-syntax-jsx "^6.18.0"
+    convert-source-map "^1.5.0"
+    emotion-utils "^8.0.12"
+    find-root "^1.1.0"
+    source-map "^0.5.7"
+    touch "^1.0.0"
+
 babel-plugin-idx@^1.5.1:
   version "1.5.1"
   resolved "https://registry.yarnpkg.com/babel-plugin-idx/-/babel-plugin-idx-1.5.1.tgz#29eff29f91b22e1f0a314827a94695bd6fbc8e00"
@@ -926,7 +964,7 @@ babel-plugin-syntax-class-properties@^6.8.0:
   version "6.13.0"
   resolved "https://registry.yarnpkg.com/babel-plugin-syntax-class-properties/-/babel-plugin-syntax-class-properties-6.13.0.tgz#d7eb23b79a317f8543962c505b827c7d6cac27de"
 
-babel-plugin-syntax-decorators@^6.13.0:
+babel-plugin-syntax-decorators@^6.1.18, babel-plugin-syntax-decorators@^6.13.0:
   version "6.13.0"
   resolved "https://registry.yarnpkg.com/babel-plugin-syntax-decorators/-/babel-plugin-syntax-decorators-6.13.0.tgz#312563b4dbde3cc806cee3e416cceeaddd11ac0b"
 
@@ -954,7 +992,7 @@ babel-plugin-syntax-function-bind@^6.8.0:
   version "6.13.0"
   resolved "https://registry.yarnpkg.com/babel-plugin-syntax-function-bind/-/babel-plugin-syntax-function-bind-6.13.0.tgz#48c495f177bdf31a981e732f55adc0bdd2601f46"
 
-babel-plugin-syntax-jsx@^6.3.13, babel-plugin-syntax-jsx@^6.8.0:
+babel-plugin-syntax-jsx@^6.18.0, babel-plugin-syntax-jsx@^6.3.13, babel-plugin-syntax-jsx@^6.8.0:
   version "6.18.0"
   resolved "https://registry.yarnpkg.com/babel-plugin-syntax-jsx/-/babel-plugin-syntax-jsx-6.18.0.tgz#0af32a9a6e13ca7a3fd5069e62d7b0f58d0d8946"
 
@@ -1006,6 +1044,14 @@ babel-plugin-transform-class-properties@6.24.1, babel-plugin-transform-class-pro
     babel-runtime "^6.22.0"
     babel-template "^6.24.1"
 
+babel-plugin-transform-decorators-legacy@^1.3.4:
+  version "1.3.4"
+  resolved "https://registry.yarnpkg.com/babel-plugin-transform-decorators-legacy/-/babel-plugin-transform-decorators-legacy-1.3.4.tgz#741b58f6c5bce9e6027e0882d9c994f04f366925"
+  dependencies:
+    babel-plugin-syntax-decorators "^6.1.18"
+    babel-runtime "^6.2.0"
+    babel-template "^6.3.0"
+
 babel-plugin-transform-decorators@^6.24.1:
   version "6.24.1"
   resolved "https://registry.yarnpkg.com/babel-plugin-transform-decorators/-/babel-plugin-transform-decorators-6.24.1.tgz#788013d8f8c6b5222bdf7b344390dfd77569e24d"
@@ -2181,6 +2227,37 @@ commondir@^1.0.1:
   version "1.0.1"
   resolved "https://registry.yarnpkg.com/commondir/-/commondir-1.0.1.tgz#ddd800da0c66127393cca5950ea968a3aaf1253b"
 
+component-clone@0.2.2:
+  version "0.2.2"
+  resolved "https://registry.yarnpkg.com/component-clone/-/component-clone-0.2.2.tgz#c7f5979822880fad8cfb0962ba29186d061ee04f"
+  dependencies:
+    component-type "*"
+
+component-emitter@1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/component-emitter/-/component-emitter-1.2.0.tgz#ccd113a86388d06482d03de3fc7df98526ba8efe"
+
+component-raf@1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/component-raf/-/component-raf-1.2.0.tgz#b2bc72d43f1b014fde7a4b3c447c764bc73ccbaa"
+
+component-tween@1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/component-tween/-/component-tween-1.2.0.tgz#cc39ce5dbab05b52825f41d1947638a0b01b2b8a"
+  dependencies:
+    component-clone "0.2.2"
+    component-emitter "1.2.0"
+    component-type "1.1.0"
+    ease-component "1.0.0"
+
+component-type@*:
+  version "1.2.1"
+  resolved "https://registry.yarnpkg.com/component-type/-/component-type-1.2.1.tgz#8a47901700238e4fc32269771230226f24b415a9"
+
+component-type@1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/component-type/-/component-type-1.1.0.tgz#95b666aad53e5c8d1f2be135c45b5d499197c0c5"
+
 compressible@~2.0.11:
   version "2.0.11"
   resolved "https://registry.yarnpkg.com/compressible/-/compressible-2.0.11.tgz#16718a75de283ed8e604041625a2064586797d8a"
@@ -2295,6 +2372,15 @@ core-util-is@~1.0.0:
   version "1.0.2"
   resolved "https://registry.yarnpkg.com/core-util-is/-/core-util-is-1.0.2.tgz#b5fd54220aa2bc5ab57aab7140c940754503c1a7"
 
+cosmiconfig@3.1.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/cosmiconfig/-/cosmiconfig-3.1.0.tgz#640a94bf9847f321800403cd273af60665c73397"
+  dependencies:
+    is-directory "^0.3.1"
+    js-yaml "^3.9.0"
+    parse-json "^3.0.0"
+    require-from-string "^2.0.1"
+
 cosmiconfig@^2.1.0, cosmiconfig@^2.1.1:
   version "2.2.2"
   resolved "https://registry.yarnpkg.com/cosmiconfig/-/cosmiconfig-2.2.2.tgz#6173cebd56fac042c1f4390edf7af6c07c7cb892"
@@ -2437,6 +2523,15 @@ css-what@2.1:
   version "2.1.0"
   resolved "https://registry.yarnpkg.com/css-what/-/css-what-2.1.0.tgz#9467d032c38cfaefb9f2d79501253062f87fa1bd"
 
+css@^2.2.1:
+  version "2.2.1"
+  resolved "https://registry.yarnpkg.com/css/-/css-2.2.1.tgz#73a4c81de85db664d4ee674f7d47085e3b2d55dc"
+  dependencies:
+    inherits "^2.0.1"
+    source-map "^0.1.38"
+    source-map-resolve "^0.3.0"
+    urix "^0.1.0"
+
 cssesc@^0.1.0:
   version "0.1.0"
   resolved "https://registry.yarnpkg.com/cssesc/-/cssesc-0.1.0.tgz#c814903e45623371a0477b40109aaafbeeaddbb4"
@@ -2737,6 +2832,10 @@ dot-prop@^4.1.0:
   dependencies:
     is-obj "^1.0.0"
 
+ease-component@1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/ease-component/-/ease-component-1.0.0.tgz#b375726db0b5b04595b77440396fec7daa5d77c9"
+
 ecc-jsbn@~0.1.1:
   version "0.1.1"
   resolved "https://registry.yarnpkg.com/ecc-jsbn/-/ecc-jsbn-0.1.1.tgz#0fc73a9ed5f0d53c38193398523ef7e543777505"
@@ -2767,6 +2866,25 @@ emojis-list@^2.0.0:
   version "2.1.0"
   resolved "https://registry.yarnpkg.com/emojis-list/-/emojis-list-2.1.0.tgz#4daa4d9db00f9819880c79fa457ae5b09a1fd389"
 
+emotion-theming@^8.0.2-10:
+  version "8.0.12"
+  resolved "https://registry.yarnpkg.com/emotion-theming/-/emotion-theming-8.0.12.tgz#7773fc448d717cc39d6eddb458d31fad39703d00"
+  dependencies:
+    hoist-non-react-statics "^2.3.1"
+
+emotion-utils@^8.0.12:
+  version "8.0.12"
+  resolved "https://registry.yarnpkg.com/emotion-utils/-/emotion-utils-8.0.12.tgz#5e0fd72db3008f26ce4f80b1972df08841df2168"
+
+emotion@^8.0.2-12:
+  version "8.0.12"
+  resolved "https://registry.yarnpkg.com/emotion/-/emotion-8.0.12.tgz#03de11ce26b1b2401c334b94d438652124c514c6"
+  dependencies:
+    babel-plugin-emotion "^8.0.12"
+    emotion-utils "^8.0.12"
+    stylis "^3.3.2"
+    stylis-rule-sheet "^0.0.5"
+
 encodeurl@~1.0.1:
   version "1.0.1"
   resolved "https://registry.yarnpkg.com/encodeurl/-/encodeurl-1.0.1.tgz#79e3d58655346909fe6f0f45a5de68103b294d20"
@@ -2831,7 +2949,7 @@ errno@^0.1.1, errno@^0.1.3, errno@^0.1.4:
   dependencies:
     prr "~0.0.0"
 
-error-ex@^1.2.0:
+error-ex@^1.2.0, error-ex@^1.3.1:
   version "1.3.1"
   resolved "https://registry.yarnpkg.com/error-ex/-/error-ex-1.3.1.tgz#f855a86ce61adc4e8621c3cda21e7a7612c3a8dc"
   dependencies:
@@ -3316,6 +3434,18 @@ fbjs@^0.8.12, fbjs@^0.8.4, fbjs@^0.8.9:
     setimmediate "^1.0.5"
     ua-parser-js "^0.7.9"
 
+fbjs@^0.8.16:
+  version "0.8.16"
+  resolved "https://registry.yarnpkg.com/fbjs/-/fbjs-0.8.16.tgz#5e67432f550dc41b572bf55847b8aca64e5337db"
+  dependencies:
+    core-js "^1.0.0"
+    isomorphic-fetch "^2.1.1"
+    loose-envify "^1.0.0"
+    object-assign "^4.1.0"
+    promise "^7.1.1"
+    setimmediate "^1.0.5"
+    ua-parser-js "^0.7.9"
+
 figures@^2.0.0:
   version "2.0.0"
   resolved "https://registry.yarnpkg.com/figures/-/figures-2.0.0.tgz#3ab1a2d2a62c8bfb431a0c94cb797a2fce27c962"
@@ -3386,6 +3516,10 @@ find-root@^0.1.1:
   version "0.1.2"
   resolved "https://registry.yarnpkg.com/find-root/-/find-root-0.1.2.tgz#98d2267cff1916ccaf2743b3a0eea81d79d7dcd1"
 
+find-root@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/find-root/-/find-root-1.1.0.tgz#abcfc8ba76f708c42a97b3d685b7e9450bfb9ce4"
+
 find-up@^1.0.0:
   version "1.1.2"
   resolved "https://registry.yarnpkg.com/find-up/-/find-up-1.1.2.tgz#6b2e9822b1a2ce0a60ab64d610eccad53cb24d0f"
@@ -3646,6 +3780,14 @@ graceful-fs@^4.1.11, graceful-fs@^4.1.2:
   version "4.1.11"
   resolved "https://registry.yarnpkg.com/graceful-fs/-/graceful-fs-4.1.11.tgz#0e8bdfe4d1ddb8854d64e04ea7c00e2a026e5658"
 
+grid-emotion@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/grid-emotion/-/grid-emotion-2.1.0.tgz#5e62a8468f9cff4e50680afb9be9322a68336385"
+  dependencies:
+    prop-types "^15.6.0"
+    styled-system "^1.0.2"
+    tag-hoc "^1.0.0"
+
 growly@^1.3.0:
   version "1.3.0"
   resolved "https://registry.yarnpkg.com/growly/-/growly-1.3.0.tgz#f10748cbe76af964b7c96c93c6bcc28af120c081"
@@ -3759,6 +3901,10 @@ hoist-non-react-statics@1.x.x, hoist-non-react-statics@^1.2.0:
   version "1.2.0"
   resolved "https://registry.yarnpkg.com/hoist-non-react-statics/-/hoist-non-react-statics-1.2.0.tgz#aa448cf0986d55cc40773b17174b7dd066cb7cfb"
 
+hoist-non-react-statics@^2.3.1:
+  version "2.3.1"
+  resolved "https://registry.yarnpkg.com/hoist-non-react-statics/-/hoist-non-react-statics-2.3.1.tgz#343db84c6018c650778898240135a1420ee22ce0"
+
 home-or-tmp@^2.0.0:
   version "2.0.0"
   resolved "https://registry.yarnpkg.com/home-or-tmp/-/home-or-tmp-2.0.0.tgz#e36c3f2d2cae7d746a857e38d18d5f32a7882db8"
@@ -4403,7 +4549,7 @@ jest-config@^21.2.1:
     jest-validate "^21.2.1"
     pretty-format "^21.2.1"
 
-jest-diff@^21.2.1:
+jest-diff@^21.0.2, jest-diff@^21.2.1:
   version "21.2.1"
   resolved "https://registry.yarnpkg.com/jest-diff/-/jest-diff-21.2.1.tgz#46cccb6cab2d02ce98bc314011764bb95b065b4f"
   dependencies:
@@ -4435,6 +4581,16 @@ jest-get-type@^21.2.0:
   version "21.2.0"
   resolved "https://registry.yarnpkg.com/jest-get-type/-/jest-get-type-21.2.0.tgz#f6376ab9db4b60d81e39f30749c6c466f40d4a23"
 
+jest-glamor-react@^3.1.2:
+  version "3.2.2"
+  resolved "https://registry.yarnpkg.com/jest-glamor-react/-/jest-glamor-react-3.2.2.tgz#aa3f12c6f6efc2eb6895e510ccfe871b5f7dfab5"
+  dependencies:
+    chalk "^1.1.3"
+    css "^2.2.1"
+    jest-diff "^21.0.2"
+    jest-snapshot "^21.0.2"
+    strip-ansi "^3.0.1"
+
 jest-haste-map@^21.2.0:
   version "21.2.0"
   resolved "https://registry.yarnpkg.com/jest-haste-map/-/jest-haste-map-21.2.0.tgz#1363f0a8bb4338f24f001806571eff7a4b2ff3d8"
@@ -4534,7 +4690,7 @@ jest-runtime@^21.2.1:
     write-file-atomic "^2.1.0"
     yargs "^9.0.0"
 
-jest-snapshot@^21.2.1:
+jest-snapshot@^21.0.2, jest-snapshot@^21.2.1:
   version "21.2.1"
   resolved "https://registry.yarnpkg.com/jest-snapshot/-/jest-snapshot-21.2.1.tgz#29e49f16202416e47343e757e5eff948c07fd7b0"
   dependencies:
@@ -4588,7 +4744,7 @@ js-tokens@^3.0.0, js-tokens@^3.0.2:
   version "3.0.2"
   resolved "https://registry.yarnpkg.com/js-tokens/-/js-tokens-3.0.2.tgz#9866df395102130e38f7f996bceb65443209c25b"
 
-js-yaml@^3.4.3, js-yaml@^3.7.0, js-yaml@^3.9.1:
+js-yaml@^3.4.3, js-yaml@^3.7.0, js-yaml@^3.9.0, js-yaml@^3.9.1:
   version "3.10.0"
   resolved "https://registry.yarnpkg.com/js-yaml/-/js-yaml-3.10.0.tgz#2e78441646bd4682e963f22b6e92823c309c62dc"
   dependencies:
@@ -5190,10 +5346,20 @@ mkdirp@0.5.x, "mkdirp@>=0.5 0", mkdirp@^0.5.0, mkdirp@^0.5.1, mkdirp@~0.5.0, mkd
   dependencies:
     minimist "0.0.8"
 
+mobx-react@^4.2.2:
+  version "4.3.5"
+  resolved "https://registry.yarnpkg.com/mobx-react/-/mobx-react-4.3.5.tgz#76853f2f2ef4a6f960c374bcd9f01e875929c04c"
+  dependencies:
+    hoist-non-react-statics "^2.3.1"
+
 mobx@^2.3.4:
   version "2.7.0"
   resolved "https://registry.yarnpkg.com/mobx/-/mobx-2.7.0.tgz#cf3d82d18c0ca7f458d8f2a240817b3dc7e54a01"
 
+mobx@^3.2.2:
+  version "3.4.0"
+  resolved "https://registry.yarnpkg.com/mobx/-/mobx-3.4.0.tgz#b97f98d973d1be26d185d3cfc78053dd4829ec95"
+
 mockdate@2.0.2:
   version "2.0.2"
   resolved "https://registry.yarnpkg.com/mockdate/-/mockdate-2.0.2.tgz#5ae0c0eaf8fe23e009cd01f9889b42c4f634af12"
@@ -5382,6 +5548,12 @@ nopt@^4.0.1:
     abbrev "1"
     osenv "^0.1.4"
 
+nopt@~1.0.10:
+  version "1.0.10"
+  resolved "https://registry.yarnpkg.com/nopt/-/nopt-1.0.10.tgz#6ddd21bd2a31417b92727dd585f8a6f37608ebee"
+  dependencies:
+    abbrev "1"
+
 normalize-package-data@^2.3.2, normalize-package-data@^2.3.4:
   version "2.4.0"
   resolved "https://registry.yarnpkg.com/normalize-package-data/-/normalize-package-data-2.4.0.tgz#12f95a307d58352075a04907b84ac8be98ac012f"
@@ -5651,6 +5823,12 @@ parse-json@^2.2.0:
   dependencies:
     error-ex "^1.2.0"
 
+parse-json@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/parse-json/-/parse-json-3.0.0.tgz#fa6f47b18e23826ead32f263e744d0e1e847fb13"
+  dependencies:
+    error-ex "^1.3.1"
+
 parse5@^1.5.1:
   version "1.5.1"
   resolved "https://registry.yarnpkg.com/parse5/-/parse5-1.5.1.tgz#9b7f3b0de32be78dc2401b17573ccaf0f6f59d94"
@@ -6157,6 +6335,14 @@ prop-types@^15.5.10, prop-types@^15.5.4, prop-types@^15.5.6, prop-types@^15.5.7,
     fbjs "^0.8.9"
     loose-envify "^1.3.1"
 
+prop-types@^15.6.0:
+  version "15.6.0"
+  resolved "https://registry.yarnpkg.com/prop-types/-/prop-types-15.6.0.tgz#ceaf083022fc46b4a35f69e13ef75aed0d639856"
+  dependencies:
+    fbjs "^0.8.16"
+    loose-envify "^1.3.1"
+    object-assign "^4.1.1"
+
 proxy-addr@~1.1.4:
   version "1.1.5"
   resolved "https://registry.yarnpkg.com/proxy-addr/-/proxy-addr-1.1.5.tgz#71c0ee3b102de3f202f3b64f608d173fcba1a918"
@@ -6377,6 +6563,13 @@ react-dom@15.3.2:
   version "15.3.2"
   resolved "https://registry.yarnpkg.com/react-dom/-/react-dom-15.3.2.tgz#c46b0aa5380d7b838e7a59c4a7beff2ed315531f"
 
+"react-emotion@^8.0.2-12 ":
+  version "8.0.12"
+  resolved "https://registry.yarnpkg.com/react-emotion/-/react-emotion-8.0.12.tgz#3dd94c151197e2e3399e34e3e118df141b5ebb7b"
+  dependencies:
+    babel-plugin-emotion "^8.0.12"
+    emotion-utils "^8.0.12"
+
 react-hot-loader@^3.0.0-beta.7:
   version "3.0.0-beta.7"
   resolved "https://registry.yarnpkg.com/react-hot-loader/-/react-hot-loader-3.0.0-beta.7.tgz#d5847b8165d731c4d5b30d86d5d4716227a0fa83"
@@ -6846,6 +7039,10 @@ require-from-string@^1.1.0:
   version "1.2.1"
   resolved "https://registry.yarnpkg.com/require-from-string/-/require-from-string-1.2.1.tgz#529c9ccef27380adfec9a2f965b649bbee636418"
 
+require-from-string@^2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/require-from-string/-/require-from-string-2.0.1.tgz#c545233e9d7da6616e9d59adfb39fc9f588676ff"
+
 require-main-filename@^1.0.1:
   version "1.0.1"
   resolved "https://registry.yarnpkg.com/require-main-filename/-/require-main-filename-1.0.1.tgz#97f717b69d48784f5f526a6c5aa8ffdda055a4d1"
@@ -6865,6 +7062,10 @@ resolve-from@^1.0.0:
   version "1.0.1"
   resolved "https://registry.yarnpkg.com/resolve-from/-/resolve-from-1.0.1.tgz#26cbfe935d1aeeeabb29bc3fe5aeb01e93d44226"
 
+resolve-url@~0.2.1:
+  version "0.2.1"
+  resolved "https://registry.yarnpkg.com/resolve-url/-/resolve-url-0.2.1.tgz#2c637fe77c893afd2a663fe21aa9080068e2052a"
+
 resolve@1.1.7:
   version "1.1.7"
   resolved "https://registry.yarnpkg.com/resolve/-/resolve-1.1.7.tgz#203114d82ad2c5ed9e8e0411b3932875e889e97b"
@@ -6957,6 +7158,19 @@ schema-utils@^0.3.0:
   dependencies:
     ajv "^5.0.0"
 
+scroll-to-element@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/scroll-to-element/-/scroll-to-element-2.0.0.tgz#3467330e3384743b7295ac64b30279990c5ac164"
+  dependencies:
+    scroll-to "0.0.2"
+
+scroll-to@0.0.2:
+  version "0.0.2"
+  resolved "https://registry.yarnpkg.com/scroll-to/-/scroll-to-0.0.2.tgz#936d398a9133660a2492145c2c0081dfcb0728f3"
+  dependencies:
+    component-raf "1.2.0"
+    component-tween "1.2.0"
+
 select-hose@^2.0.0:
   version "2.0.0"
   resolved "https://registry.yarnpkg.com/select-hose/-/select-hose-2.0.0.tgz#625d8658f865af43ec962bfc376a37359a4994ca"
@@ -7155,22 +7369,45 @@ source-list-map@^2.0.0:
   version "2.0.0"
   resolved "https://registry.yarnpkg.com/source-list-map/-/source-list-map-2.0.0.tgz#aaa47403f7b245a92fbc97ea08f250d6087ed085"
 
+source-map-resolve@^0.3.0:
+  version "0.3.1"
+  resolved "https://registry.yarnpkg.com/source-map-resolve/-/source-map-resolve-0.3.1.tgz#610f6122a445b8dd51535a2a71b783dfc1248761"
+  dependencies:
+    atob "~1.1.0"
+    resolve-url "~0.2.1"
+    source-map-url "~0.3.0"
+    urix "~0.1.0"
+
 source-map-support@^0.4.15, source-map-support@^0.4.2:
   version "0.4.15"
   resolved "https://registry.yarnpkg.com/source-map-support/-/source-map-support-0.4.15.tgz#03202df65c06d2bd8c7ec2362a193056fef8d3b1"
   dependencies:
     source-map "^0.5.6"
 
+source-map-url@~0.3.0:
+  version "0.3.0"
+  resolved "https://registry.yarnpkg.com/source-map-url/-/source-map-url-0.3.0.tgz#7ecaf13b57bcd09da8a40c5d269db33799d4aaf9"
+
 source-map@0.5.6, source-map@^0.5.0, source-map@^0.5.3, source-map@^0.5.6, source-map@~0.5.0, source-map@~0.5.1, source-map@~0.5.3:
   version "0.5.6"
   resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.5.6.tgz#75ce38f52bf0733c5a7f0c118d81334a2bb5f412"
 
+source-map@^0.1.38:
+  version "0.1.43"
+  resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.1.43.tgz#c24bc146ca517c1471f5dacbe2571b2b7f9e3346"
+  dependencies:
+    amdefine ">=0.0.4"
+
 source-map@^0.4.2, source-map@^0.4.4:
   version "0.4.4"
   resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.4.4.tgz#eba4f5da9c0dc999de68032d8b4f76173652036b"
   dependencies:
     amdefine ">=0.0.4"
 
+source-map@^0.5.7:
+  version "0.5.7"
+  resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.5.7.tgz#8a039d2d1021d22d1ea14c80d8ea468ba2ef3fcc"
+
 source-map@~0.2.0:
   version "0.2.0"
   resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.2.0.tgz#dab73fbcfc2ba819b4de03bd6f6eaa48164b3f9d"
@@ -7378,6 +7615,20 @@ style-loader@^0.17.0:
   dependencies:
     loader-utils "^1.0.2"
 
+styled-system@^1.0.2:
+  version "1.0.8"
+  resolved "https://registry.yarnpkg.com/styled-system/-/styled-system-1.0.8.tgz#a5a08ab26a8cc27e7a22e743d623211b82482b5e"
+  dependencies:
+    prop-types "^15.6.0"
+
+stylis-rule-sheet@^0.0.5:
+  version "0.0.5"
+  resolved "https://registry.yarnpkg.com/stylis-rule-sheet/-/stylis-rule-sheet-0.0.5.tgz#ebae935cc1f6fb31b9b62dba47f2ea8b833dad9f"
+
+stylis@^3.3.2:
+  version "3.4.5"
+  resolved "https://registry.yarnpkg.com/stylis/-/stylis-3.4.5.tgz#d7b9595fc18e7b9c8775eca8270a9a1d3e59806e"
+
 substyle@^6.0.0:
   version "6.0.0"
   resolved "https://registry.yarnpkg.com/substyle/-/substyle-6.0.0.tgz#c648b2b5078773c814d809f4bf26763e7962add0"
@@ -7439,6 +7690,10 @@ table@^4.0.1:
     slice-ansi "1.0.0"
     string-width "^2.1.1"
 
+tag-hoc@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/tag-hoc/-/tag-hoc-1.0.0.tgz#36ddc5f8831c40926ea520743cbddcc34f3c3ed9"
+
 tapable@^0.1.8:
   version "0.1.10"
   resolved "https://registry.yarnpkg.com/tapable/-/tapable-0.1.10.tgz#29c35707c2b70e50d07482b5d202e8ed446dafd4"
@@ -7536,6 +7791,16 @@ to-fast-properties@^1.0.1, to-fast-properties@^1.0.3:
   version "1.0.3"
   resolved "https://registry.yarnpkg.com/to-fast-properties/-/to-fast-properties-1.0.3.tgz#b83571fa4d8c25b82e231b06e3a3055de4ca1a47"
 
+to-fast-properties@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/to-fast-properties/-/to-fast-properties-2.0.0.tgz#dc5e698cbd079265bc73e0377681a4e4e83f616e"
+
+touch@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/touch/-/touch-1.0.0.tgz#449cbe2dbae5a8c8038e30d71fa0ff464947c4de"
+  dependencies:
+    nopt "~1.0.10"
+
 tough-cookie@>=2.3.0, tough-cookie@^2.3.2, tough-cookie@~2.3.0:
   version "2.3.2"
   resolved "https://registry.yarnpkg.com/tough-cookie/-/tough-cookie-2.3.2.tgz#f081f76e4c85720e6c37a5faced737150d84072a"
@@ -7664,6 +7929,10 @@ unpipe@~1.0.0:
   version "1.0.0"
   resolved "https://registry.yarnpkg.com/unpipe/-/unpipe-1.0.0.tgz#b2bf4ee8514aae6165b4817829d21b2ef49904ec"
 
+urix@^0.1.0, urix@~0.1.0:
+  version "0.1.0"
+  resolved "https://registry.yarnpkg.com/urix/-/urix-0.1.0.tgz#da937f7a62e21fec1fd18d49b35c2935067a6c72"
+
 url-loader@0.5.6:
   version "0.5.6"
   resolved "https://registry.yarnpkg.com/url-loader/-/url-loader-0.5.6.tgz#644521a5dc66b8729caab1b6ba9e580e021ded45"
