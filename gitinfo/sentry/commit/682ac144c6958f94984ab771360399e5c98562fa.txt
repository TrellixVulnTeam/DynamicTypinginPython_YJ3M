commit 682ac144c6958f94984ab771360399e5c98562fa
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Mar 12 13:08:01 2020 -0700

    chore(ts): Convert sidebarDropdown (#17615)

diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx
deleted file mode 100644
index e750dec34c..0000000000
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx
+++ /dev/null
@@ -1,243 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from '@emotion/styled';
-
-import {logout} from 'app/actionCreators/account';
-import {t} from 'app/locale';
-import Avatar from 'app/components/avatar';
-import ConfigStore from 'app/stores/configStore';
-import DropdownMenu from 'app/components/dropdownMenu';
-import Hook from 'app/components/hook';
-import IdBadge from 'app/components/idBadge';
-import InlineSvg from 'app/components/inlineSvg';
-import Link from 'app/components/links/link';
-import SentryTypes from 'app/sentryTypes';
-import SidebarDropdownMenu from 'app/components/sidebar/sidebarDropdownMenu.styled';
-import SidebarMenuItem, {menuItemStyles} from 'app/components/sidebar/sidebarMenuItem';
-import SidebarOrgSummary from 'app/components/sidebar/sidebarOrgSummary';
-import TextOverflow from 'app/components/textOverflow';
-import withApi from 'app/utils/withApi';
-
-import Divider from './divider.styled';
-import SwitchOrganization from './switchOrganization';
-
-const SidebarDropdown = withApi(
-  class SidebarDropdown extends React.Component {
-    static propTypes = {
-      api: PropTypes.object,
-      orientation: PropTypes.oneOf(['top', 'left']),
-      collapsed: PropTypes.bool,
-      org: SentryTypes.Organization,
-      user: SentryTypes.User,
-      config: SentryTypes.Config,
-      onClick: PropTypes.func,
-    };
-
-    static defaultProps = {
-      onClick: () => {},
-    };
-
-    handleLogout = () => {
-      logout(this.props.api).then(() => (window.location = '/auth/login'));
-    };
-
-    render() {
-      const {org, orientation, collapsed, config, user, onClick} = this.props;
-      const hasOrganization = !!org;
-      const hasUser = !!user;
-
-      // If there is no org in context, we use an org from `withLatestContext`
-      // (which uses an org from organizations index endpoint versus details endpoint)
-      // and does not have `access`
-      const hasOrgRead = org && org.access && org.access.indexOf('org:read') > -1;
-      const hasMemberRead = org && org.access && org.access.indexOf('member:read') > -1;
-      const hasTeamRead = org && org.access && org.access.indexOf('team:read') > -1;
-      const canCreateOrg = ConfigStore.get('features').has('organizations:create');
-
-      // Avatar to use: Organization --> user --> Sentry
-      const avatar =
-        hasOrganization || hasUser ? (
-          <StyledAvatar
-            onClick={onClick}
-            collapsed={collapsed}
-            organization={org}
-            user={!org ? user : null}
-            size={32}
-            round={false}
-          />
-        ) : (
-          <SentryLink to="/">
-            <InlineSvg css={{fontSize: 32}} src="icon-sentry" />
-          </SentryLink>
-        );
-
-      return (
-        <DropdownMenu>
-          {({isOpen, getRootProps, getActorProps, getMenuProps}) => (
-            <SidebarDropdownRoot {...getRootProps()}>
-              <SidebarDropdownActor
-                type="button"
-                data-test-id="sidebar-dropdown"
-                {...getActorProps()}
-              >
-                {avatar}
-                {!collapsed && orientation !== 'top' && (
-                  <OrgAndUserWrapper>
-                    <OrgOrUserName>
-                      {hasOrganization ? org.name : user.name}{' '}
-                      <i className="icon-arrow-down" />
-                    </OrgOrUserName>
-                    <UserNameOrEmail>
-                      {hasOrganization ? user.name : user.email}
-                    </UserNameOrEmail>
-                  </OrgAndUserWrapper>
-                )}
-              </SidebarDropdownActor>
-
-              {isOpen && (
-                <OrgAndUserMenu {...getMenuProps()}>
-                  {hasOrganization && (
-                    <React.Fragment>
-                      <SidebarOrgSummary organization={org} />
-                      {hasOrgRead && (
-                        <SidebarMenuItem to={`/settings/${org.slug}/`}>
-                          {t('Organization settings')}
-                        </SidebarMenuItem>
-                      )}
-                      {hasMemberRead && (
-                        <SidebarMenuItem to={`/settings/${org.slug}/members/`}>
-                          {t('Members')}
-                        </SidebarMenuItem>
-                      )}
-
-                      {hasTeamRead && (
-                        <SidebarMenuItem to={`/settings/${org.slug}/teams/`}>
-                          {t('Teams')}
-                        </SidebarMenuItem>
-                      )}
-
-                      <Hook
-                        name="sidebar:organization-dropdown-menu"
-                        organization={org}
-                      />
-
-                      {!config.singleOrganization && (
-                        <SidebarMenuItem>
-                          <SwitchOrganization canCreateOrganization={canCreateOrg} />
-                        </SidebarMenuItem>
-                      )}
-
-                      <Divider />
-                    </React.Fragment>
-                  )}
-
-                  {!!user && (
-                    <React.Fragment>
-                      <UserSummary to="/settings/account/details/">
-                        <UserBadgeNoOverflow user={user} avatarSize={32} />
-                      </UserSummary>
-
-                      <div>
-                        <SidebarMenuItem to="/settings/account/">
-                          {t('User settings')}
-                        </SidebarMenuItem>
-                        <SidebarMenuItem to="/settings/account/api/">
-                          {t('API keys')}
-                        </SidebarMenuItem>
-                        {user.isSuperuser && (
-                          <SidebarMenuItem to="/manage/">{t('Admin')}</SidebarMenuItem>
-                        )}
-                        <SidebarMenuItem
-                          data-test-id="sidebarSignout"
-                          onClick={this.handleLogout}
-                        >
-                          {t('Sign out')}
-                        </SidebarMenuItem>
-                      </div>
-                    </React.Fragment>
-                  )}
-                </OrgAndUserMenu>
-              )}
-            </SidebarDropdownRoot>
-          )}
-        </DropdownMenu>
-      );
-    }
-  }
-);
-
-export default SidebarDropdown;
-
-const SentryLink = styled(Link)`
-  color: ${p => p.theme.white};
-  &:hover {
-    color: ${p => p.theme.white};
-  }
-`;
-
-const UserSummary = styled(Link)`
-  ${menuItemStyles}
-  padding: 10px 15px;
-`;
-
-const UserBadgeNoOverflow = styled(IdBadge)`
-  overflow: hidden;
-`;
-
-const SidebarDropdownRoot = styled('div')`
-  position: relative;
-`;
-
-// So that long org names and user names do not overflow
-const OrgAndUserWrapper = styled('div')`
-  overflow: hidden;
-  text-align: left;
-`;
-const OrgOrUserName = styled(TextOverflow)`
-  font-size: 16px;
-  line-height: 1.2;
-  font-weight: bold;
-  color: ${p => p.theme.white};
-  text-shadow: 0 0 6px rgba(255, 255, 255, 0);
-  transition: 0.15s text-shadow linear;
-`;
-
-const UserNameOrEmail = styled(TextOverflow)`
-  font-size: 14px;
-  line-height: 16px;
-  transition: 0.15s color linear;
-`;
-
-const SidebarDropdownActor = styled('button')`
-  display: flex;
-  align-items: flex-start;
-  cursor: pointer;
-  border: none;
-  padding: 0;
-  background: none;
-  width: 100%;
-
-  &:hover {
-    ${OrgOrUserName} {
-      text-shadow: 0 0 6px rgba(255, 255, 255, 0.1);
-    }
-    ${UserNameOrEmail} {
-      color: ${p => p.theme.gray1};
-    }
-  }
-`;
-
-const StyledAvatar = styled(Avatar)`
-  margin-top: 2px;
-  margin-bottom: 2px;
-  margin-right: ${p => (p.collapsed ? '0' : '12px')};
-  box-shadow: 0 2px 0 rgba(0, 0, 0, 0.08);
-  border-radius: 6px; /* Fixes background bleeding on corners */
-`;
-
-const OrgAndUserMenu = styled('div')`
-  ${SidebarDropdownMenu};
-  top: 42px;
-  min-width: 180px;
-  z-index: ${p => p.theme.zIndex.orgAndUserMenu};
-`;
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.tsx b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.tsx
new file mode 100644
index 0000000000..ae16f3df0e
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.tsx
@@ -0,0 +1,228 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {logout} from 'app/actionCreators/account';
+import {t} from 'app/locale';
+import Avatar from 'app/components/avatar';
+import ConfigStore from 'app/stores/configStore';
+import DropdownMenu from 'app/components/dropdownMenu';
+import Hook from 'app/components/hook';
+import IdBadge from 'app/components/idBadge';
+import InlineSvg from 'app/components/inlineSvg';
+import Link from 'app/components/links/link';
+import SidebarDropdownMenu from 'app/components/sidebar/sidebarDropdownMenu.styled';
+import SidebarMenuItem, {menuItemStyles} from 'app/components/sidebar/sidebarMenuItem';
+import SidebarOrgSummary from 'app/components/sidebar/sidebarOrgSummary';
+import TextOverflow from 'app/components/textOverflow';
+import withApi from 'app/utils/withApi';
+import {Organization, User, Config} from 'app/types';
+import {Client} from 'app/api';
+import {SidebarOrientation} from 'app/components/sidebar/types';
+import space from 'app/styles/space';
+
+import SwitchOrganization from './switchOrganization';
+import Divider from './divider.styled';
+
+type Props = {
+  api: Client;
+  orientation: SidebarOrientation;
+  collapsed: boolean;
+  org: Organization;
+  user: User;
+  config: Config;
+};
+
+const SidebarDropdown = ({api, org, orientation, collapsed, config, user}: Props) => {
+  const handleLogout = async () => {
+    await logout(api);
+    window.location.assign('/auth/login');
+  };
+
+  const hasOrganization = !!org;
+  const hasUser = !!user;
+
+  // If there is no org in context, we use an org from `withLatestContext`
+  // (which uses an org from organizations index endpoint versus details endpoint)
+  // and does not have `access`
+  const hasOrgRead = org && org.access && org.access.indexOf('org:read') > -1;
+  const hasMemberRead = org && org.access && org.access.indexOf('member:read') > -1;
+  const hasTeamRead = org && org.access && org.access.indexOf('team:read') > -1;
+  const canCreateOrg = ConfigStore.get('features').has('organizations:create');
+
+  // Avatar to use: Organization --> user --> Sentry
+  const avatar =
+    hasOrganization || hasUser ? (
+      <StyledAvatar
+        collapsed={collapsed}
+        organization={org}
+        user={!org ? user : undefined}
+        size={32}
+        round={false}
+      />
+    ) : (
+      <SentryLink to="/">
+        <InlineSvg css={{fontSize: 32}} src="icon-sentry" />
+      </SentryLink>
+    );
+
+  return (
+    <DropdownMenu>
+      {({isOpen, getRootProps, getActorProps, getMenuProps}) => (
+        <SidebarDropdownRoot {...getRootProps()}>
+          <SidebarDropdownActor
+            type="button"
+            data-test-id="sidebar-dropdown"
+            {...getActorProps({})}
+          >
+            {avatar}
+            {!collapsed && orientation !== 'top' && (
+              <OrgAndUserWrapper>
+                <OrgOrUserName>
+                  {hasOrganization ? org.name : user.name}{' '}
+                  <i className="icon-arrow-down" />
+                </OrgOrUserName>
+                <UserNameOrEmail>
+                  {hasOrganization ? user.name : user.email}
+                </UserNameOrEmail>
+              </OrgAndUserWrapper>
+            )}
+          </SidebarDropdownActor>
+
+          {isOpen && (
+            <OrgAndUserMenu {...getMenuProps({})}>
+              {hasOrganization && (
+                <React.Fragment>
+                  <SidebarOrgSummary organization={org} />
+                  {hasOrgRead && (
+                    <SidebarMenuItem to={`/settings/${org.slug}/`}>
+                      {t('Organization settings')}
+                    </SidebarMenuItem>
+                  )}
+                  {hasMemberRead && (
+                    <SidebarMenuItem to={`/settings/${org.slug}/members/`}>
+                      {t('Members')}
+                    </SidebarMenuItem>
+                  )}
+
+                  {hasTeamRead && (
+                    <SidebarMenuItem to={`/settings/${org.slug}/teams/`}>
+                      {t('Teams')}
+                    </SidebarMenuItem>
+                  )}
+
+                  <Hook name="sidebar:organization-dropdown-menu" organization={org} />
+
+                  {!config.singleOrganization && (
+                    <SidebarMenuItem>
+                      <SwitchOrganization canCreateOrganization={canCreateOrg} />
+                    </SidebarMenuItem>
+                  )}
+
+                  <Divider />
+                </React.Fragment>
+              )}
+
+              {!!user && (
+                <React.Fragment>
+                  <UserSummary to="/settings/account/details/">
+                    <UserBadgeNoOverflow user={user} avatarSize={32} />
+                  </UserSummary>
+
+                  <div>
+                    <SidebarMenuItem to="/settings/account/">
+                      {t('User settings')}
+                    </SidebarMenuItem>
+                    <SidebarMenuItem to="/settings/account/api/">
+                      {t('API keys')}
+                    </SidebarMenuItem>
+                    {user.isSuperuser && (
+                      <SidebarMenuItem to="/manage/">{t('Admin')}</SidebarMenuItem>
+                    )}
+                    <SidebarMenuItem data-test-id="sidebarSignout" onClick={handleLogout}>
+                      {t('Sign out')}
+                    </SidebarMenuItem>
+                  </div>
+                </React.Fragment>
+              )}
+            </OrgAndUserMenu>
+          )}
+        </SidebarDropdownRoot>
+      )}
+    </DropdownMenu>
+  );
+};
+
+export default withApi(SidebarDropdown);
+
+const SentryLink = styled(Link)`
+  color: ${p => p.theme.white};
+  &:hover {
+    color: ${p => p.theme.white};
+  }
+`;
+
+const UserSummary = styled(Link)`
+  ${menuItemStyles}
+  padding: 10px 15px;
+`;
+
+const UserBadgeNoOverflow = styled(IdBadge)`
+  overflow: hidden;
+`;
+
+const SidebarDropdownRoot = styled('div')`
+  position: relative;
+`;
+
+// So that long org names and user names do not overflow
+const OrgAndUserWrapper = styled('div')`
+  overflow: hidden;
+  text-align: left;
+`;
+const OrgOrUserName = styled(TextOverflow)`
+  font-size: ${p => p.theme.fontSizeLarge};
+  line-height: 1.2;
+  font-weight: bold;
+  color: ${p => p.theme.white};
+  text-shadow: 0 0 6px rgba(255, 255, 255, 0);
+  transition: 0.15s text-shadow linear;
+`;
+
+const UserNameOrEmail = styled(TextOverflow)`
+  font-size: ${p => p.theme.fontSizeMedium};
+  line-height: 16px;
+  transition: 0.15s color linear;
+`;
+
+const SidebarDropdownActor = styled('button')`
+  display: flex;
+  align-items: flex-start;
+  cursor: pointer;
+  border: none;
+  padding: 0;
+  background: none;
+  width: 100%;
+
+  &:hover {
+    ${OrgOrUserName} {
+      text-shadow: 0 0 6px rgba(255, 255, 255, 0.1);
+    }
+    ${UserNameOrEmail} {
+      color: ${p => p.theme.gray1};
+    }
+  }
+`;
+
+const StyledAvatar = styled(Avatar)<{collapsed: boolean}>`
+  margin: ${space(0.25)} 0;
+  margin-right: ${p => (p.collapsed ? '0' : space(1.5))};
+  box-shadow: 0 2px 0 rgba(0, 0, 0, 0.08);
+  border-radius: 6px; /* Fixes background bleeding on corners */
+`;
+
+const OrgAndUserMenu = styled('div')`
+  ${SidebarDropdownMenu};
+  top: 42px;
+  min-width: 180px;
+  z-index: ${p => p.theme.zIndex.orgAndUserMenu};
+`;
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/switchOrganization.jsx b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/switchOrganization.jsx
deleted file mode 100644
index 744112a6cc..0000000000
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/switchOrganization.jsx
+++ /dev/null
@@ -1,137 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from '@emotion/styled';
-
-import {t} from 'app/locale';
-import DropdownMenu from 'app/components/dropdownMenu';
-import {IconAdd} from 'app/icons/iconAdd';
-import SentryTypes from 'app/sentryTypes';
-import withOrganizations from 'app/utils/withOrganizations';
-import SidebarOrgSummary from 'app/components/sidebar/sidebarOrgSummary';
-import SidebarMenuItem from 'app/components/sidebar/sidebarMenuItem';
-import SidebarDropdownMenu from 'app/components/sidebar/sidebarDropdownMenu.styled';
-
-import Divider from './divider.styled';
-
-/**
- * Switch Organization Menu Label + Sub Menu
- */
-class SwitchOrganization extends React.Component {
-  static propTypes = {
-    organizations: PropTypes.arrayOf(SentryTypes.Organization),
-    canCreateOrganization: PropTypes.bool,
-  };
-
-  render() {
-    const {organizations, canCreateOrganization} = this.props;
-    const hasOrganizations = organizations && !!organizations.length;
-
-    return (
-      <DropdownMenu isNestedDropdown>
-        {({isOpen, getMenuProps, getActorProps}) => (
-          <React.Fragment>
-            <SwitchOrganizationMenuActor
-              data-test-id="sidebar-switch-org"
-              {...getActorProps()}
-              onClick={e => {
-                // This overwrites `DropdownMenu.getActorProps.onClick` which normally handles clicks on actor
-                // to toggle visibility of menu. Instead, do nothing because it is nested and we only want it
-                // to appear when hovered on. Will also stop menu from closing when clicked on (which seems to be common
-                // behavior);
-
-                // Stop propagation so that dropdown menu doesn't close here
-                e.stopPropagation();
-              }}
-            >
-              {t('Switch organization')}
-
-              <SubMenuCaret>
-                <i className="icon-arrow-right" />
-              </SubMenuCaret>
-            </SwitchOrganizationMenuActor>
-
-            {isOpen && (
-              <SwitchOrganizationMenu
-                data-test-id="sidebar-switch-org-menu"
-                {...getMenuProps()}
-              >
-                <OrganizationList>
-                  {organizations.map(organization => {
-                    const url = `/organizations/${organization.slug}/`;
-
-                    return (
-                      <SidebarMenuItem key={organization.slug} to={url}>
-                        <SidebarOrgSummary organization={organization} />
-                      </SidebarMenuItem>
-                    );
-                  })}
-                </OrganizationList>
-                {hasOrganizations && canCreateOrganization && (
-                  <Divider css={{marginTop: 0}} />
-                )}
-                {canCreateOrganization && (
-                  <SidebarMenuItem
-                    data-test-id="sidebar-create-org"
-                    to="/organizations/new/"
-                    style={{alignItems: 'center'}}
-                  >
-                    <MenuItemLabelWithIcon>
-                      <StyledIconAdd />
-                      <span>{t('Create a new organization')}</span>
-                    </MenuItemLabelWithIcon>
-                  </SidebarMenuItem>
-                )}
-              </SwitchOrganizationMenu>
-            )}
-          </React.Fragment>
-        )}
-      </DropdownMenu>
-    );
-  }
-}
-const SwitchOrganizationContainer = withOrganizations(SwitchOrganization);
-
-export {SwitchOrganization};
-export default SwitchOrganizationContainer;
-
-const StyledIconAdd = styled(IconAdd)`
-  margin-right: 8px;
-  color: ${p => p.theme.gray2};
-`;
-
-const MenuItemLabelWithIcon = styled('span')`
-  line-height: 1;
-  display: flex;
-  align-items: center;
-  padding: 8px 0;
-`;
-
-const SubMenuCaret = styled('span')`
-  color: ${p => p.theme.gray2};
-  transition: 0.1s color linear;
-
-  &:hover,
-  &:active {
-    color: ${p => p.theme.gray3};
-  }
-`;
-
-// Menu Item in dropdown to "Switch organization"
-const SwitchOrganizationMenuActor = styled('span')`
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-  margin: 0 -${p => p.theme.sidebar.menuSpacing};
-  padding: 0 ${p => p.theme.sidebar.menuSpacing};
-`;
-
-const SwitchOrganizationMenu = styled('div')`
-  ${SidebarDropdownMenu};
-  top: 0;
-  left: 256px;
-`;
-
-const OrganizationList = styled('div')`
-  max-height: 350px;
-  overflow-y: auto;
-`;
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/switchOrganization.tsx b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/switchOrganization.tsx
new file mode 100644
index 0000000000..e04939fed0
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/switchOrganization.tsx
@@ -0,0 +1,130 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import DropdownMenu from 'app/components/dropdownMenu';
+import {IconAdd} from 'app/icons/iconAdd';
+import withOrganizations from 'app/utils/withOrganizations';
+import SidebarOrgSummary from 'app/components/sidebar/sidebarOrgSummary';
+import SidebarMenuItem from 'app/components/sidebar/sidebarMenuItem';
+import SidebarDropdownMenu from 'app/components/sidebar/sidebarDropdownMenu.styled';
+import {OrganizationSummary} from 'app/types';
+import space from 'app/styles/space';
+
+import Divider from './divider.styled';
+
+type Props = {
+  organizations: OrganizationSummary[];
+  canCreateOrganization: boolean;
+};
+/**
+ * Switch Organization Menu Label + Sub Menu
+ */
+const SwitchOrganization = ({organizations, canCreateOrganization}: Props) => (
+  <DropdownMenu isNestedDropdown>
+    {({isOpen, getMenuProps, getActorProps}) => (
+      <React.Fragment>
+        <SwitchOrganizationMenuActor
+          data-test-id="sidebar-switch-org"
+          {...getActorProps({})}
+          onClick={e => {
+            // This overwrites `DropdownMenu.getActorProps.onClick` which normally handles clicks on actor
+            // to toggle visibility of menu. Instead, do nothing because it is nested and we only want it
+            // to appear when hovered on. Will also stop menu from closing when clicked on (which seems to be common
+            // behavior);
+
+            // Stop propagation so that dropdown menu doesn't close here
+            e.stopPropagation();
+          }}
+        >
+          {t('Switch organization')}
+
+          <SubMenuCaret>
+            <i className="icon-arrow-right" />
+          </SubMenuCaret>
+        </SwitchOrganizationMenuActor>
+
+        {isOpen && (
+          <SwitchOrganizationMenu
+            data-test-id="sidebar-switch-org-menu"
+            {...getMenuProps({})}
+          >
+            <OrganizationList>
+              {organizations.map(organization => {
+                const url = `/organizations/${organization.slug}/`;
+
+                return (
+                  <SidebarMenuItem key={organization.slug} to={url}>
+                    <SidebarOrgSummary organization={organization} />
+                  </SidebarMenuItem>
+                );
+              })}
+            </OrganizationList>
+            {organizations && !!organizations.length && canCreateOrganization && (
+              <Divider css={{marginTop: 0}} />
+            )}
+            {canCreateOrganization && (
+              <SidebarMenuItem
+                data-test-id="sidebar-create-org"
+                to="/organizations/new/"
+                style={{alignItems: 'center'}}
+              >
+                <MenuItemLabelWithIcon>
+                  <StyledIconAdd />
+                  <span>{t('Create a new organization')}</span>
+                </MenuItemLabelWithIcon>
+              </SidebarMenuItem>
+            )}
+          </SwitchOrganizationMenu>
+        )}
+      </React.Fragment>
+    )}
+  </DropdownMenu>
+);
+
+const SwitchOrganizationContainer = withOrganizations(SwitchOrganization);
+
+export {SwitchOrganization};
+export default SwitchOrganizationContainer;
+
+const StyledIconAdd = styled(IconAdd)`
+  margin-right: ${space(1)};
+  color: ${p => p.theme.gray2};
+`;
+
+const MenuItemLabelWithIcon = styled('span')`
+  line-height: 1;
+  display: flex;
+  align-items: center;
+  padding: ${space(1)} 0;
+`;
+
+const SubMenuCaret = styled('span')`
+  color: ${p => p.theme.gray2};
+  transition: 0.1s color linear;
+
+  &:hover,
+  &:active {
+    color: ${p => p.theme.gray3};
+  }
+`;
+
+// Menu Item in dropdown to "Switch organization"
+const SwitchOrganizationMenuActor = styled('span')`
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  margin: 0 -${p => p.theme.sidebar.menuSpacing};
+  padding: 0 ${p => p.theme.sidebar.menuSpacing};
+`;
+
+const SwitchOrganizationMenu = styled('div')`
+  ${SidebarDropdownMenu};
+  top: 0;
+  left: 256px;
+`;
+
+const OrganizationList = styled('div')`
+  max-height: 350px;
+  overflow-y: auto;
+`;
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarOrgSummary.tsx b/src/sentry/static/sentry/app/components/sidebar/sidebarOrgSummary.tsx
index 4413d64a0a..0652e8bbaa 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarOrgSummary.tsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarOrgSummary.tsx
@@ -2,17 +2,17 @@ import React from 'react';
 import styled from '@emotion/styled';
 
 import OrganizationAvatar from 'app/components/avatar/organizationAvatar';
-import SentryTypes from 'app/sentryTypes';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
-import {Organization} from 'app/types';
+import {Organization, OrganizationSummary} from 'app/types';
 import {tn} from 'app/locale';
 
 type Props = {
-  organization: Organization;
+  organization: OrganizationSummary;
 };
 
 const SidebarOrgSummary = ({organization}: Props) => {
-  const projects = organization.projects && organization.projects.length;
+  const fullOrg = organization as Organization;
+  const projects = fullOrg.projects && fullOrg.projects.length;
   const extra: string[] = [];
 
   if (projects) {
@@ -31,10 +31,6 @@ const SidebarOrgSummary = ({organization}: Props) => {
   );
 };
 
-SidebarOrgSummary.propTypes = {
-  organization: SentryTypes.Organization,
-};
-
 const OrgSummary = styled('div')`
   display: flex;
   padding: 10px 15px;
diff --git a/src/sentry/static/sentry/app/components/sidebar/types.tsx b/src/sentry/static/sentry/app/components/sidebar/types.tsx
new file mode 100644
index 0000000000..41f12a1074
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/sidebar/types.tsx
@@ -0,0 +1,3 @@
+export type SidebarOrientation = 'top' | 'left';
+
+export type SidebarPanelKey = 'broadcasts' | 'onboarding';
diff --git a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
index 1d09824aef..61f1fcfd23 100644
--- a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
@@ -8,7 +8,7 @@ exports[`Sidebar SidebarDropdown can open "Switch Organization" sub-menu 1`] = `
   onMouseLeave={[Function]}
 >
   <div
-    className="css-pm8679-SwitchOrganizationMenu-SidebarDropdownMenu ejspo4a4"
+    className="css-pm8679-SwitchOrganizationMenu-SidebarDropdownMenu ev3suul4"
     data-test-id="sidebar-switch-org-menu"
     onClick={[Function]}
     onMouseEnter={[Function]}
@@ -16,7 +16,7 @@ exports[`Sidebar SidebarDropdown can open "Switch Organization" sub-menu 1`] = `
   >
     <OrganizationList>
       <div
-        className="css-1tlc4cl-OrganizationList ejspo4a5"
+        className="css-1tlc4cl-OrganizationList ev3suul5"
       />
     </OrganizationList>
     <SidebarMenuItem
@@ -89,14 +89,14 @@ exports[`Sidebar SidebarDropdown can open "Switch Organization" sub-menu 1`] = `
                   >
                     <MenuItemLabelWithIcon>
                       <span
-                        className="css-1l4bf1b-MenuItemLabelWithIcon ejspo4a1"
+                        className="css-8m01f9-MenuItemLabelWithIcon ev3suul1"
                       >
                         <StyledIconAdd>
                           <ForwardRef(IconAdd)
-                            className="css-4qjexj-StyledIconAdd ejspo4a0"
+                            className="css-4qjexj-StyledIconAdd ev3suul0"
                           >
                             <svg
-                              className="css-4qjexj-StyledIconAdd ejspo4a0"
+                              className="css-4qjexj-StyledIconAdd ev3suul0"
                               fill="currentColor"
                               height="16px"
                               viewBox="0 0 16 16"
@@ -137,7 +137,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
   onMouseLeave={[Function]}
 >
   <div
-    className="css-4razvn-OrgAndUserMenu-SidebarDropdownMenu e1fowdfw9"
+    className="css-4razvn-OrgAndUserMenu-SidebarDropdownMenu e10773n39"
     onClick={[Function]}
     onMouseEnter={[Function]}
     onMouseLeave={[Function]}
@@ -474,7 +474,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
                         }
                       >
                         <span
-                          className="css-lpolsh-SwitchOrganizationMenuActor ejspo4a3"
+                          className="css-lpolsh-SwitchOrganizationMenuActor ev3suul3"
                           data-test-id="sidebar-switch-org"
                           onClick={[Function]}
                           onKeyDown={[Function]}
@@ -489,7 +489,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
                           Switch organization
                           <SubMenuCaret>
                             <span
-                              className="css-3ur4f5-SubMenuCaret ejspo4a2"
+                              className="css-3ur4f5-SubMenuCaret ev3suul2"
                             >
                               <i
                                 className="icon-arrow-right"
@@ -516,17 +516,17 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
       to="/settings/account/details/"
     >
       <Link
-        className="css-j625pk-UserSummary e1fowdfw1"
+        className="css-j625pk-UserSummary e10773n31"
         to="/settings/account/details/"
       >
         <Link
-          className="css-j625pk-UserSummary e1fowdfw1"
+          className="css-j625pk-UserSummary e10773n31"
           onlyActiveOnIndex={false}
           style={Object {}}
           to="/settings/account/details/"
         >
           <a
-            className="css-j625pk-UserSummary e1fowdfw1"
+            className="css-j625pk-UserSummary e10773n31"
             onClick={[Function]}
             style={Object {}}
           >
@@ -552,7 +552,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
             >
               <IdBadge
                 avatarSize={32}
-                className="css-1b4dtj5-UserBadgeNoOverflow e1fowdfw2"
+                className="css-1b4dtj5-UserBadgeNoOverflow e10773n32"
                 user={
                   Object {
                     "email": "foo@example.com",
@@ -580,7 +580,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
                   >
                     <UserBadge
                       avatarSize={32}
-                      className="css-1b4dtj5-UserBadgeNoOverflow e1fowdfw2"
+                      className="css-1b4dtj5-UserBadgeNoOverflow e10773n32"
                       user={
                         Object {
                           "email": "foo@example.com",
@@ -600,10 +600,10 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
                       }
                     >
                       <StyledUserBadge
-                        className="css-1b4dtj5-UserBadgeNoOverflow e1fowdfw2"
+                        className="css-1b4dtj5-UserBadgeNoOverflow e10773n32"
                       >
                         <div
-                          className="e1fowdfw2 css-qu415y-StyledUserBadge-UserBadgeNoOverflow e31z2f80"
+                          className="e10773n32 css-qu415y-StyledUserBadge-UserBadgeNoOverflow e31z2f80"
                         >
                           <StyledAvatar
                             gravatar={false}
@@ -6148,7 +6148,7 @@ exports[`Sidebar renders without org and router 1`] = `
   onMouseLeave={[Function]}
 >
   <div
-    className="css-4razvn-OrgAndUserMenu-SidebarDropdownMenu e1fowdfw9"
+    className="css-4razvn-OrgAndUserMenu-SidebarDropdownMenu e10773n39"
     onClick={[Function]}
     onMouseEnter={[Function]}
     onMouseLeave={[Function]}
@@ -6157,17 +6157,17 @@ exports[`Sidebar renders without org and router 1`] = `
       to="/settings/account/details/"
     >
       <Link
-        className="css-j625pk-UserSummary e1fowdfw1"
+        className="css-j625pk-UserSummary e10773n31"
         to="/settings/account/details/"
       >
         <Link
-          className="css-j625pk-UserSummary e1fowdfw1"
+          className="css-j625pk-UserSummary e10773n31"
           onlyActiveOnIndex={false}
           style={Object {}}
           to="/settings/account/details/"
         >
           <a
-            className="css-j625pk-UserSummary e1fowdfw1"
+            className="css-j625pk-UserSummary e10773n31"
             onClick={[Function]}
             style={Object {}}
           >
@@ -6193,7 +6193,7 @@ exports[`Sidebar renders without org and router 1`] = `
             >
               <IdBadge
                 avatarSize={32}
-                className="css-1b4dtj5-UserBadgeNoOverflow e1fowdfw2"
+                className="css-1b4dtj5-UserBadgeNoOverflow e10773n32"
                 user={
                   Object {
                     "email": "foo@example.com",
@@ -6221,7 +6221,7 @@ exports[`Sidebar renders without org and router 1`] = `
                   >
                     <UserBadge
                       avatarSize={32}
-                      className="css-1b4dtj5-UserBadgeNoOverflow e1fowdfw2"
+                      className="css-1b4dtj5-UserBadgeNoOverflow e10773n32"
                       user={
                         Object {
                           "email": "foo@example.com",
@@ -6241,10 +6241,10 @@ exports[`Sidebar renders without org and router 1`] = `
                       }
                     >
                       <StyledUserBadge
-                        className="css-1b4dtj5-UserBadgeNoOverflow e1fowdfw2"
+                        className="css-1b4dtj5-UserBadgeNoOverflow e10773n32"
                       >
                         <div
-                          className="e1fowdfw2 css-qu415y-StyledUserBadge-UserBadgeNoOverflow e31z2f80"
+                          className="e10773n32 css-qu415y-StyledUserBadge-UserBadgeNoOverflow e31z2f80"
                         >
                           <StyledAvatar
                             gravatar={false}
