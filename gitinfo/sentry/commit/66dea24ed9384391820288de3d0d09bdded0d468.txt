commit 66dea24ed9384391820288de3d0d09bdded0d468
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Jan 24 12:57:20 2019 -0800

    feat: Persist global selections in local storage (#11659)
    
    Persist latest project, environment and time selections in local storage.
    These will be applied unless a querystring is provided.

diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/constants.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/constants.jsx
index 554fd5c3e8..fe2f8362f0 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/constants.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/constants.jsx
@@ -15,3 +15,5 @@ export const DATE_TIME = {
 };
 
 export const DATE_TIME_KEYS = Object.values(DATE_TIME);
+
+export const LOCAL_STORAGE_KEY = 'global-selection';
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.jsx
index d4aeca73e5..0e7111652c 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.jsx
@@ -9,7 +9,6 @@ import {
 } from 'app/components/organizations/globalSelectionHeader/constants';
 import {callIfFunction} from 'app/utils/callIfFunction';
 import {defined} from 'app/utils';
-import {getLocalDateObject} from 'app/utils/dates';
 import {isEqualWithDates} from 'app/utils/isEqualWithDates';
 import {
   updateDateTime,
@@ -26,6 +25,8 @@ import SentryTypes from 'app/sentryTypes';
 import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 
+import {getStateFromQuery} from './utils';
+
 class GlobalSelectionHeader extends React.Component {
   static propTypes = {
     organization: SentryTypes.Organization,
@@ -76,46 +77,6 @@ class GlobalSelectionHeader extends React.Component {
     resetParamsOnChange: [],
   };
 
-  // Parses URL query parameters for values relevant to global selection header
-  static getStateFromRouter(props) {
-    const {query} = props.location;
-    let start = query[URL_PARAM.START] !== 'null' && query[URL_PARAM.START];
-    let end = query[URL_PARAM.END] !== 'null' && query[URL_PARAM.END];
-    let project = query[URL_PARAM.PROJECT];
-    let environment = query[URL_PARAM.ENVIRONMENT];
-    let period = query[URL_PARAM.PERIOD];
-    let utc = query[URL_PARAM.UTC];
-
-    const hasAbsolute = !!start && !!end;
-
-    if (defined(project) && Array.isArray(project)) {
-      project = project.map(p => parseInt(p, 10));
-    } else if (defined(project)) {
-      const projectIdInt = parseInt(project, 10);
-      project = isNaN(projectIdInt) ? [] : [projectIdInt];
-    }
-
-    if (defined(environment) && !Array.isArray(environment)) {
-      environment = [environment];
-    }
-
-    if (hasAbsolute) {
-      start = getLocalDateObject(start);
-      end = getLocalDateObject(end);
-    }
-
-    return {
-      project,
-      environment,
-      period: period || null,
-      start: start || null,
-      end: end || null,
-
-      // params from URL will be a string
-      utc: typeof utc !== 'undefined' ? utc === 'true' : null,
-    };
-  }
-
   constructor(props) {
     super(props);
     this.state = {};
@@ -128,7 +89,7 @@ class GlobalSelectionHeader extends React.Component {
 
     const hasMultipleProjectFeature = this.hasMultipleProjectSelection();
 
-    const stateFromRouter = GlobalSelectionHeader.getStateFromRouter(this.props);
+    const stateFromRouter = getStateFromQuery(this.props.location.query);
     // We should update store if there are any relevant URL parameters when component
     // is mounted
     if (Object.values(stateFromRouter).some(i => !!i)) {
@@ -159,7 +120,7 @@ class GlobalSelectionHeader extends React.Component {
       // update URL parameters to reflect current store
       const {datetime, environments, projects} = this.props.selection;
 
-      if (hasMultipleProjectFeature) {
+      if (hasMultipleProjectFeature || projects.length === 1) {
         updateParams(
           {project: projects, environment: environments, ...datetime},
           this.getRouter()
@@ -235,14 +196,9 @@ class GlobalSelectionHeader extends React.Component {
       return;
     }
 
-    const {
-      project,
-      environment,
-      period,
-      start,
-      end,
-      utc,
-    } = GlobalSelectionHeader.getStateFromRouter(nextProps);
+    const {project, environment, period, start, end, utc} = getStateFromQuery(
+      nextProps.location.query
+    );
 
     if (start || end || period || utc) {
       // Don't attempt to update date if all of these values are empty
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx
new file mode 100644
index 0000000000..e64377bcc3
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx
@@ -0,0 +1,42 @@
+import {defined} from 'app/utils';
+import {getLocalDateObject} from 'app/utils/dates';
+import {URL_PARAM} from './constants';
+
+// Parses URL query parameters for values relevant to global selection header
+export function getStateFromQuery(query) {
+  let start = query[URL_PARAM.START] !== 'null' && query[URL_PARAM.START];
+  let end = query[URL_PARAM.END] !== 'null' && query[URL_PARAM.END];
+  let project = query[URL_PARAM.PROJECT];
+  let environment = query[URL_PARAM.ENVIRONMENT];
+  let period = query[URL_PARAM.PERIOD];
+  let utc = query[URL_PARAM.UTC];
+
+  const hasAbsolute = !!start && !!end;
+
+  if (defined(project) && Array.isArray(project)) {
+    project = project.map(p => parseInt(p, 10));
+  } else if (defined(project)) {
+    const projectIdInt = parseInt(project, 10);
+    project = isNaN(projectIdInt) ? [] : [projectIdInt];
+  }
+
+  if (defined(environment) && !Array.isArray(environment)) {
+    environment = [environment];
+  }
+
+  if (hasAbsolute) {
+    start = getLocalDateObject(start);
+    end = getLocalDateObject(end);
+  }
+
+  return {
+    project,
+    environment,
+    period: period || null,
+    start: start || null,
+    end: end || null,
+
+    // params from URL will be a string
+    utc: typeof utc !== 'undefined' ? utc === 'true' : null,
+  };
+}
diff --git a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
index 16b7d48bcf..8c67269c52 100644
--- a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
+++ b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
@@ -1,11 +1,17 @@
-import {isEqual} from 'lodash';
+import {isEqual, pick} from 'lodash';
 import Reflux from 'reflux';
 
-import {DATE_TIME} from 'app/components/organizations/globalSelectionHeader/constants';
+import {
+  DATE_TIME,
+  URL_PARAM,
+  LOCAL_STORAGE_KEY,
+} from 'app/components/organizations/globalSelectionHeader/constants';
+import {getStateFromQuery} from 'app/components/organizations/globalSelectionHeader/utils';
 import {DEFAULT_STATS_PERIOD} from 'app/constants';
 import {isEqualWithDates} from 'app/utils/isEqualWithDates';
 import ConfigStore from 'app/stores/configStore';
 import GlobalSelectionActions from 'app/actions/globalSelectionActions';
+import localStorage from 'app/utils/localStorage';
 
 const getDefaultSelection = () => {
   const user = ConfigStore.get('user');
@@ -22,9 +28,23 @@ const getDefaultSelection = () => {
   };
 };
 
+const isValidSelection = (selection, organization) => {
+  const allowedProjects = new Set(
+    organization.projects.filter(project => project.isMember).map(p => parseInt(p.id, 10))
+  );
+  if (
+    Array.isArray(selection.projects) &&
+    selection.projects.some(project => !allowedProjects.has(project))
+  ) {
+    return false;
+  }
+
+  return true;
+};
+
 const GlobalSelectionStore = Reflux.createStore({
   init() {
-    this.reset();
+    this.reset(this.selection);
     this.listenTo(GlobalSelectionActions.updateProjects, this.updateProjects);
     this.listenTo(GlobalSelectionActions.updateDateTime, this.updateDateTime);
     this.listenTo(GlobalSelectionActions.updateEnvironments, this.updateEnvironments);
@@ -34,6 +54,47 @@ const GlobalSelectionStore = Reflux.createStore({
     this.selection = state || getDefaultSelection();
   },
 
+  /**
+   * Initializes the global selection store
+   * If there are query params apply these, otherwise check local storage
+  */
+  loadInitialData(organization, queryParams) {
+    this.organization = organization;
+    const query = pick(queryParams, Object.values(URL_PARAM));
+    const hasQuery = Object.keys(query).length > 0;
+
+    let globalSelection = getDefaultSelection();
+
+    if (hasQuery) {
+      const parsed = getStateFromQuery(queryParams);
+      globalSelection = {
+        projects: parsed.project || [],
+        environments: parsed.environment || [],
+        datetime: {
+          [DATE_TIME.START]: parsed.start || null,
+          [DATE_TIME.END]: parsed.end || null,
+          [DATE_TIME.PERIOD]: parsed.period || null,
+          [DATE_TIME.UTC]: parsed.utc || undefined,
+        },
+      };
+    } else {
+      try {
+        const localStorageKey = `${LOCAL_STORAGE_KEY}:${organization.slug}`;
+        const storedValue = JSON.parse(localStorage.getItem(localStorageKey));
+        if (storedValue) {
+          globalSelection = storedValue;
+        }
+      } catch (ex) {
+        // use default if invalid
+      }
+    }
+
+    if (isValidSelection(globalSelection, organization)) {
+      this.selection = globalSelection;
+      this.trigger(this.selection);
+    }
+  },
+
   get() {
     return this.selection;
   },
@@ -47,6 +108,7 @@ const GlobalSelectionStore = Reflux.createStore({
       ...this.selection,
       projects,
     };
+    this.updateLocalStorage();
     this.trigger(this.selection);
   },
 
@@ -62,6 +124,7 @@ const GlobalSelectionStore = Reflux.createStore({
         ...datetime,
       },
     };
+    this.updateLocalStorage();
     this.trigger(this.selection);
   },
 
@@ -74,8 +137,21 @@ const GlobalSelectionStore = Reflux.createStore({
       ...this.selection,
       environments,
     };
+    this.updateLocalStorage();
     this.trigger(this.selection);
   },
+
+  updateLocalStorage() {
+    try {
+      if (!this.organization) {
+        throw new Error('No organization loaded');
+      }
+      const localStorageKey = `${LOCAL_STORAGE_KEY}:${this.organization.slug}`;
+      localStorage.setItem(localStorageKey, JSON.stringify(this.selection));
+    } catch (ex) {
+      // Do nothing
+    }
+  },
 });
 
 export default GlobalSelectionStore;
diff --git a/src/sentry/static/sentry/app/views/organizationContext.jsx b/src/sentry/static/sentry/app/views/organizationContext.jsx
index 8fc85d0198..558711a988 100644
--- a/src/sentry/static/sentry/app/views/organizationContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationContext.jsx
@@ -20,6 +20,7 @@ import SentryTypes from 'app/sentryTypes';
 import Sidebar from 'app/components/sidebar';
 import TeamStore from 'app/stores/teamStore';
 import space from 'app/styles/space';
+import GlobalSelectionStore from 'app/stores/globalSelectionStore';
 
 let ERROR_TYPES = {
   ORG_NOT_FOUND: 'ORG_NOT_FOUND',
@@ -94,6 +95,7 @@ const OrganizationContext = createReactClass({
 
         TeamStore.loadInitialData(data.teams);
         ProjectsStore.loadInitialData(data.projects);
+        GlobalSelectionStore.loadInitialData(data, this.props.location.query);
 
         this.setState({
           organization: data,
diff --git a/tests/js/spec/stores/globalSelectionStore.spec.jsx b/tests/js/spec/stores/globalSelectionStore.spec.jsx
index 460c4d2a6e..2ef7b753f6 100644
--- a/tests/js/spec/stores/globalSelectionStore.spec.jsx
+++ b/tests/js/spec/stores/globalSelectionStore.spec.jsx
@@ -5,7 +5,23 @@ import {
   updateEnvironments,
 } from 'app/actionCreators/globalSelection';
 
+jest.mock('app/utils/localStorage', () => {
+  return {
+    getItem: () => JSON.stringify({projects: [5], environments: ['staging']}),
+    setItem: jest.fn(),
+  };
+});
+
 describe('GlobalSelectionStore', function() {
+  const organization = TestStubs.Organization({
+    features: ['global-views'],
+    projects: [TestStubs.Project({id: '5'})],
+  });
+
+  afterEach(function() {
+    GlobalSelectionStore.reset();
+  });
+
   it('get()', function() {
     expect(GlobalSelectionStore.get()).toEqual({
       projects: [],
@@ -39,4 +55,32 @@ describe('GlobalSelectionStore', function() {
     await tick();
     expect(GlobalSelectionStore.get().environments).toEqual(['alpha']);
   });
+
+  it('loadInitialData() - queryParams', async function() {
+    GlobalSelectionStore.loadInitialData(organization, {
+      project: '5',
+      environment: ['staging'],
+    });
+
+    await tick();
+
+    expect(GlobalSelectionStore.get().projects).toEqual([5]);
+    expect(GlobalSelectionStore.get().environments).toEqual(['staging']);
+  });
+
+  it('loadInitialData() - localStorage', async function() {
+    GlobalSelectionStore.loadInitialData(organization, {});
+    await tick();
+
+    expect(GlobalSelectionStore.get().projects).toEqual([5]);
+    expect(GlobalSelectionStore.get().environments).toEqual(['staging']);
+  });
+
+  it('loadInitialData() - defaults used if invalid', async function() {
+    GlobalSelectionStore.loadInitialData(organization, {project: [2]});
+    await tick();
+
+    expect(GlobalSelectionStore.get().projects).toEqual([]);
+    expect(GlobalSelectionStore.get().environments).toEqual([]);
+  });
 });
diff --git a/tests/js/spec/views/organizationContext.spec.jsx b/tests/js/spec/views/organizationContext.spec.jsx
index c871f9a298..b33c107716 100644
--- a/tests/js/spec/views/organizationContext.spec.jsx
+++ b/tests/js/spec/views/organizationContext.spec.jsx
@@ -6,6 +6,7 @@ import ConfigStore from 'app/stores/configStore';
 import OrganizationContext from 'app/views/organizationContext';
 import ProjectsStore from 'app/stores/projectsStore';
 import TeamStore from 'app/stores/teamStore';
+import GlobalSelectionStore from 'app/stores/globalSelectionStore';
 
 jest.mock('app/stores/configStore', () => ({
   get: jest.fn(),
@@ -32,8 +33,12 @@ describe('OrganizationContext', function() {
     });
     jest.spyOn(TeamStore, 'loadInitialData');
     jest.spyOn(ProjectsStore, 'loadInitialData');
+    jest.spyOn(GlobalSelectionStore, 'loadInitialData');
+
     wrapper = mount(
-      <OrganizationContext params={{orgId: 'org-slug'}}>{<div />}</OrganizationContext>
+      <OrganizationContext params={{orgId: 'org-slug'}} location={{query: {}}}>
+        {<div />}
+      </OrganizationContext>
     );
   });
 
@@ -54,6 +59,7 @@ describe('OrganizationContext', function() {
 
     expect(TeamStore.loadInitialData).toHaveBeenCalledWith(org.teams);
     expect(ProjectsStore.loadInitialData).toHaveBeenCalledWith(org.projects);
+    expect(GlobalSelectionStore.loadInitialData).toHaveBeenCalledWith(org, {});
   });
 
   it('resets TeamStore when unmounting', function() {
@@ -91,7 +97,9 @@ describe('OrganizationContext', function() {
       statusCode: 403,
     });
     wrapper = mount(
-      <OrganizationContext params={{orgId: 'org-slug'}}>{<div />}</OrganizationContext>
+      <OrganizationContext params={{orgId: 'org-slug'}} location={{}}>
+        {<div />}
+      </OrganizationContext>
     );
 
     expect(wrapper.find('LoadingError')).toHaveLength(1);
@@ -106,7 +114,9 @@ describe('OrganizationContext', function() {
       statusCode: 403,
     });
     wrapper = mount(
-      <OrganizationContext params={{orgId: 'org-slug'}}>{<div />}</OrganizationContext>
+      <OrganizationContext params={{orgId: 'org-slug'}} location={{}}>
+        {<div />}
+      </OrganizationContext>
     );
 
     expect(openSudo).toHaveBeenCalled();
diff --git a/tests/js/spec/views/organizationsDetails.spec.jsx b/tests/js/spec/views/organizationsDetails.spec.jsx
index d91ca6679b..68d34a8929 100644
--- a/tests/js/spec/views/organizationsDetails.spec.jsx
+++ b/tests/js/spec/views/organizationsDetails.spec.jsx
@@ -26,7 +26,7 @@ describe('OrganizationDetails', function() {
           }),
         });
         let tree = render(
-          <OrganizationDetails params={{orgId: 'org-slug'}} />,
+          <OrganizationDetails params={{orgId: 'org-slug'}} location={{}} />,
           TestStubs.routerContext()
         );
         expect(tree).toMatchSnapshot();
@@ -45,7 +45,7 @@ describe('OrganizationDetails', function() {
           }),
         });
         let tree = render(
-          <OrganizationDetails params={{orgId: 'org-slug'}} />,
+          <OrganizationDetails params={{orgId: 'org-slug'}} location={{}} />,
           TestStubs.routerContext()
         );
         expect(tree).toMatchSnapshot();
@@ -68,7 +68,7 @@ describe('OrganizationDetails', function() {
 
       it('should render a deletion in progress prompt', function() {
         let tree = render(
-          <OrganizationDetails params={{orgId: 'org-slug'}} />,
+          <OrganizationDetails params={{orgId: 'org-slug'}} location={{}} />,
           TestStubs.routerContext()
         );
         expect(tree).toMatchSnapshot();
