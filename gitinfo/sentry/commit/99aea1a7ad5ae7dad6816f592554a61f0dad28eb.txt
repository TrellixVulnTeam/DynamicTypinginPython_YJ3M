commit 99aea1a7ad5ae7dad6816f592554a61f0dad28eb
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Apr 4 13:51:11 2019 -0700

    feat(ui): Log all API errors to Sentry (#12641)
    
    * Generate a `RequestError` on API request errors (e.g. non-2xx status codes)
      * Log *all* of these as "warnings" in Santry
    * `api.requestPromise` will reject with the same error and stacktrace as `api.request` and should be grouped in the same issue.
      * We can make a saved search™™™™ for a `RequestError` that are `handled:0` so locate codepaths that need to handle promise rejections (either by ignoring or providing user-friendly error messages)
    * Removes `logAjaxError` - it was capturing a message instead of an error, which didn't include a stacktrace, so has limited value over these errors.
    
    Fixes JAVASCRIPT-5VS
    Fixes JAVASCRIPT-62H

diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 236332d15b..627a4a3fdd 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -10,6 +10,7 @@ import {
 import {metric} from 'app/utils/analytics';
 import {openSudo, redirectToProject} from 'app/actionCreators/modal';
 import GroupActions from 'app/actions/groupActions';
+import RequestError from 'app/utils/requestError';
 import {uniqueId} from 'app/utils/guid';
 import * as tracing from 'app/utils/tracing';
 
@@ -197,6 +198,8 @@ export class Client {
       }
     }
 
+    const errorObject = new RequestError(options.method, path);
+
     this.activeRequests[id] = new Request(
       $.ajax({
         url: fullUrl,
@@ -209,12 +212,12 @@ export class Client {
           'X-Span-ID': tracing.getSpanId(),
         },
         success: (...args) => {
-          const [, , xhr] = args || [];
+          const [resp] = args || [];
           metric.measure({
             name: 'app.api.request-success',
             start: `api-request-start-${id}`,
             data: {
-              status: xhr && xhr.status,
+              status: resp && resp.status,
             },
           });
           if (!isUndefined(options.success)) {
@@ -222,14 +225,28 @@ export class Client {
           }
         },
         error: (...args) => {
-          const [, , xhr] = args || [];
+          const [resp] = args || [];
           metric.measure({
             name: 'app.api.request-error',
             start: `api-request-start-${id}`,
             data: {
-              status: xhr && xhr.status,
+              status: resp && resp.status,
             },
           });
+
+          Sentry.withScope(scope => {
+            // `requestPromise` can pass its error object
+            const errorObjectToUse = options.requestError || errorObject;
+
+            errorObjectToUse.setResponse(resp);
+            errorObjectToUse.removeFrames(4);
+
+            // Setting this to warning because we are going to capture all failed requests
+            scope.setLevel('warning');
+            scope.setTag('http.statusCode', resp.status);
+            Sentry.captureException(errorObjectToUse);
+          });
+
           this.handleRequestError(
             {
               id,
@@ -249,23 +266,23 @@ export class Client {
   requestPromise(path, {includeAllArgs, ...options} = {}) {
     // Create an error object here before we make any async calls so
     // that we have a helpful stacktrace if it errors
-    const error = new Error(`${options.method || 'GET'} "${path}"`);
+    //
+    // This *should* get logged to Sentry only if the promise rejection is not handled
+    // (since SDK captures unhandled rejections). Ideally we explicitly ignore rejection
+    // or handle with a user friendly error message
+    const requestError = new RequestError(options.method, path);
 
     return new Promise((resolve, reject) => {
       this.request(path, {
         ...options,
+        requestError,
         success: (data, ...args) => {
           includeAllArgs ? resolve([data, ...args]) : resolve(data);
         },
         error: (resp, ...args) => {
-          // Update error message with response status code
-          error.message = `${error.message} -> ${(resp && resp.status) || 'n/a'}`;
-          error.resp = resp;
-
-          // Drop the Client.requestPromise frame so stacktrace starts at `requestPromise` callsite
-          const lines = error.stack.split('\n');
-          error.stack = [lines[0], ...lines.slice(2)].join('\n');
-          reject(error);
+          // Since this method calls `this.request`, and its error handler
+          // modifies the error object, we don't update it
+          reject(requestError);
         },
       });
     });
diff --git a/src/sentry/static/sentry/app/components/stream/processingIssueList.jsx b/src/sentry/static/sentry/app/components/stream/processingIssueList.jsx
index 9ebd002f47..54e4a38531 100644
--- a/src/sentry/static/sentry/app/components/stream/processingIssueList.jsx
+++ b/src/sentry/static/sentry/app/components/stream/processingIssueList.jsx
@@ -3,7 +3,6 @@ import {isEqual} from 'lodash';
 import PropTypes from 'prop-types';
 
 import {Client} from 'app/api';
-import {logAjaxError} from 'app/utils/logging';
 import {fetchProcessingIssues} from 'app/actionCreators/processingIssues';
 import ProcessingIssueHint from 'app/components/stream/processingIssueHint';
 import SentryTypes from 'app/sentryTypes';
@@ -58,7 +57,6 @@ class ProcessingIssueList extends React.Component {
       },
       error => {
         // this is okay. it's just a ui hint
-        logAjaxError(error);
       }
     );
   }
diff --git a/src/sentry/static/sentry/app/utils/logging.jsx b/src/sentry/static/sentry/app/utils/logging.jsx
index 1e93db7f07..f8d010de46 100644
--- a/src/sentry/static/sentry/app/utils/logging.jsx
+++ b/src/sentry/static/sentry/app/utils/logging.jsx
@@ -2,27 +2,12 @@ import * as Sentry from '@sentry/browser';
 
 export function logException(ex, context) {
   Sentry.withScope(scope => {
-    scope.setExtra('context', context);
+    if (context) {
+      scope.setExtra('context', context);
+    }
+
     Sentry.captureException(ex);
   });
   /*eslint no-console:0*/
   window.console && console.error && console.error(ex);
 }
-
-export function logAjaxError(error, context) {
-  // Promises will reject with an error instead of response
-  const resp = error instanceof Error ? error.resp : error;
-  const errorString = resp.responseJSON
-    ? resp.responseJSON.detail || JSON.stringify(resp.responseJSON, null, 2)
-    : resp.responseText
-    ? resp.responseText.substr(0, 255)
-    : '<unknown response>'; // occassionally responseText is undefined
-
-  const message = `HTTP ${resp.status}: ${errorString}`;
-  Sentry.withScope(scope => {
-    scope.setExtra('context', context);
-    Sentry.captureMessage(message);
-  });
-  /*eslint no-console:0*/
-  window.console && console.error && console.error(message);
-}
diff --git a/src/sentry/static/sentry/app/utils/requestError.jsx b/src/sentry/static/sentry/app/utils/requestError.jsx
new file mode 100644
index 0000000000..03d869bfd6
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/requestError.jsx
@@ -0,0 +1,44 @@
+export default class RequestError extends Error {
+  constructor(method, path) {
+    super(`${method || 'GET'} ${path}`);
+    this.name = new.target.prototype.constructor.name;
+    Object.setPrototypeOf(this, new.target.prototype);
+  }
+
+  /**
+   * Updates Error with XHR response
+   */
+  setResponse(resp) {
+    this.resp = resp;
+
+    if (resp) {
+      this.setMessage(
+        `${this.message} ${resp.status !== 'undefined' ? resp.status : 'n/a'}`
+      );
+
+      // Some callback handlers expect these properties on the error object
+      if (resp.responseJSON) {
+        this.responseJSON = resp.responseJSON;
+        this.status = resp.status;
+      }
+    }
+  }
+
+  setMessage(message) {
+    this.message = message;
+  }
+
+  removeFrames(numLinesToRemove) {
+    // Drop some frames so stacktrace starts at callsite
+    //
+    // Note that babel will add a call to support extending Error object
+
+    // Old browsers may not have stacktrace
+    if (!this.stack) {
+      return;
+    }
+
+    const lines = this.stack.split('\n');
+    this.stack = [lines[0], ...lines.slice(numLinesToRemove)].join('\n');
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index 02003c0c7d..ff709798b1 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -31,7 +31,6 @@ import StreamSidebar from 'app/views/stream/sidebar';
 import ProcessingIssueList from 'app/components/stream/processingIssueList';
 import {analytics} from 'app/utils/analytics';
 import {getUtcDateString} from 'app/utils/dates';
-import {logAjaxError} from 'app/utils/logging';
 import parseApiError from 'app/utils/parseApiError';
 import parseLinkHeader from 'app/utils/parseLinkHeader';
 import utils from 'app/utils';
@@ -587,7 +586,6 @@ const OrganizationStream = createReactClass({
         }
       },
       error => {
-        logAjaxError(error);
         this.fetchData();
       }
     );
diff --git a/src/sentry/static/sentry/app/views/stream/stream.jsx b/src/sentry/static/sentry/app/views/stream/stream.jsx
index 163d8bb12c..4e3d5c9f86 100644
--- a/src/sentry/static/sentry/app/views/stream/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream/stream.jsx
@@ -11,7 +11,6 @@ import qs from 'query-string';
 
 import {Panel, PanelBody} from 'app/components/panels';
 import {analytics} from 'app/utils/analytics';
-import {logAjaxError} from 'app/utils/logging';
 import {
   setActiveEnvironment,
   setActiveEnvironmentName,
@@ -230,8 +229,7 @@ const Stream = createReactClass({
         this.setState(newState, needsData ? this.fetchData : null);
       },
       error => {
-        // XXX(dcramer): fail gracefully by still loading the stream
-        logAjaxError(error);
+        // Fail gracefully by still loading the stream
         this.setState({
           loading: false,
           isDefaultSearch: null,
diff --git a/tests/js/spec/utils/logging.spec.jsx b/tests/js/spec/utils/logging.spec.jsx
deleted file mode 100644
index 03e6d7508e..0000000000
--- a/tests/js/spec/utils/logging.spec.jsx
+++ /dev/null
@@ -1,68 +0,0 @@
-import {logAjaxError} from 'app/utils/logging';
-import * as Sentry from '@sentry/browser';
-
-describe('logging', function() {
-  describe('logAjaxError()', function() {
-    beforeEach(function() {
-      jest.spyOn(console, 'error').mockImplementation(() => {});
-      Sentry.captureMessage.mockReset();
-    });
-
-    afterEach(function() {
-      window.console.error.mockRestore();
-    });
-
-    it('should handle (Sentry) JSON responses', function() {
-      logAjaxError(
-        {
-          status: 500,
-          responseJSON: {detail: 'A bad thing happened'},
-        },
-        {foo: 'bar'} /* context */
-      );
-
-      expect(Sentry.captureMessage).toHaveBeenCalled();
-      expect(Sentry.captureMessage.mock.calls[0][0]).toEqual(
-        'HTTP 500: A bad thing happened'
-      );
-    });
-
-    it('handles error objects', function() {
-      const error = new Error('An error');
-      error.resp = {
-        status: 500,
-        responseJSON: {detail: 'A bad thing happened'},
-      };
-      logAjaxError(error, {foo: 'bar'} /* context */);
-
-      expect(Sentry.captureMessage).toHaveBeenCalled();
-      expect(Sentry.captureMessage.mock.calls[0][0]).toEqual(
-        'HTTP 500: A bad thing happened'
-      );
-    });
-
-    it('should handle text/html responses', function() {
-      logAjaxError(
-        {
-          status: 401,
-          responseText: 'You are not authenticated',
-        },
-        {foo: 'bar'} /* context */
-      );
-
-      expect(Sentry.captureMessage).toHaveBeenCalled();
-      expect(Sentry.captureMessage.mock.calls[0][0]).toEqual(
-        'HTTP 401: You are not authenticated'
-      );
-    });
-
-    it('should handle responseJSON/responseText undefined (bad content type?)', function() {
-      logAjaxError({status: 404}, {foo: 'bar'} /* context */);
-
-      expect(Sentry.captureMessage).toHaveBeenCalled();
-      expect(Sentry.captureMessage.mock.calls[0][0]).toEqual(
-        'HTTP 404: <unknown response>'
-      );
-    });
-  });
-});
