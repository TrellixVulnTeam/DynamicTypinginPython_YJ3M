commit 0444c6bd451e8c25a8f84b24d0fc6f25f289b35f
Author: MeredithAnya <meredith@getsentry.com>
Date:   Thu Aug 8 13:46:59 2019 -0700

    ref(app-platform): Render client secret for internal apps (#14323)

diff --git a/src/sentry/api/serializers/models/sentry_app.py b/src/sentry/api/serializers/models/sentry_app.py
index a86bd7457b..6d8861468c 100644
--- a/src/sentry/api/serializers/models/sentry_app.py
+++ b/src/sentry/api/serializers/models/sentry_app.py
@@ -30,14 +30,13 @@ class SentryAppSerializer(Serializer):
         if is_active_superuser(env.request) or (
             hasattr(user, 'get_orgs') and obj.owner in user.get_orgs()
         ):
-            if not obj.is_internal:
-                data.update({
-                    'clientId': obj.application.client_id,
-                    'clientSecret': obj.application.client_secret,
-                    'owner': {
-                        'id': obj.owner.id,
-                        'slug': obj.owner.slug,
-                    },
-                })
+            data.update({
+                'clientId': obj.application.client_id,
+                'clientSecret': obj.application.client_secret,
+                'owner': {
+                    'id': obj.owner.id,
+                    'slug': obj.owner.slug,
+                },
+            })
 
         return data
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
index 109b8bb8e0..abf7f0d1fd 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
@@ -208,51 +208,51 @@ export default class SentryApplicationDetails extends AsyncView {
 
           <PermissionsObserver scopes={scopes} events={events} />
 
+          {app && app.status === 'internal' && (
+            <Panel>
+              <PanelHeader hasButtons>
+                {t('Tokens')}
+                <Button
+                  size="xsmall"
+                  icon="icon-circle-add"
+                  onClick={evt => this.onAddToken(evt)}
+                  data-test-id="token-add"
+                >
+                  {t('New Token')}
+                </Button>
+              </PanelHeader>
+              <PanelBody>{this.renderTokens()}</PanelBody>
+            </Panel>
+          )}
+
           {app && (
-            <React.Fragment>
-              {app.status === 'internal' ? (
-                <Panel>
-                  <PanelHeader hasButtons>
-                    {t('Tokens')}
-                    <Button
-                      size="xsmall"
-                      icon="icon-circle-add"
-                      onClick={evt => this.onAddToken(evt)}
-                      data-test-id="token-add"
-                    >
-                      {t('New Token')}
-                    </Button>
-                  </PanelHeader>
-                  <PanelBody>{this.renderTokens()}</PanelBody>
-                </Panel>
-              ) : (
-                <Panel>
-                  <PanelHeader>{t('Credentials')}</PanelHeader>
-                  <PanelBody>
-                    <FormField name="clientId" label="Client ID" overflow>
-                      {({value}) => {
-                        return (
-                          <TextCopyInput>
-                            {getDynamicText({value, fixed: 'PERCY_CLIENT_ID'})}
-                          </TextCopyInput>
-                        );
-                      }}
-                    </FormField>
-                    <FormField overflow name="clientSecret" label="Client Secret">
-                      {({value}) => {
-                        return value ? (
-                          <TextCopyInput>
-                            {getDynamicText({value, fixed: 'PERCY_CLIENT_SECRET'})}
-                          </TextCopyInput>
-                        ) : (
-                          <em>hidden</em>
-                        );
-                      }}
-                    </FormField>
-                  </PanelBody>
-                </Panel>
-              )}
-            </React.Fragment>
+            <Panel>
+              <PanelHeader>{t('Credentials')}</PanelHeader>
+              <PanelBody>
+                {app.status !== 'internal' && (
+                  <FormField name="clientId" label="Client ID" overflow>
+                    {({value}) => {
+                      return (
+                        <TextCopyInput>
+                          {getDynamicText({value, fixed: 'PERCY_CLIENT_ID'})}
+                        </TextCopyInput>
+                      );
+                    }}
+                  </FormField>
+                )}
+                <FormField overflow name="clientSecret" label="Client Secret">
+                  {({value}) => {
+                    return value ? (
+                      <TextCopyInput>
+                        {getDynamicText({value, fixed: 'PERCY_CLIENT_SECRET'})}
+                      </TextCopyInput>
+                    ) : (
+                      <em>hidden</em>
+                    );
+                  }}
+                </FormField>
+              </PanelBody>
+            </Panel>
           )}
         </Form>
       </div>
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
index 3bb9f72f0c..54ece6ac57 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
@@ -192,11 +192,16 @@ describe('Sentry Application Details', function() {
       expect(
         wrapper
           .find('PanelHeader')
-          .last()
+          .at(3)
           .text()
       ).toContain('Tokens');
       expect(wrapper.find('TokenItem').exists()).toBe(true);
     });
+
+    it('shows just clientSecret', function() {
+      expect(wrapper.find('#clientSecret').exists()).toBe(true);
+      expect(wrapper.find('#clientId').exists()).toBe(false);
+    });
   });
 
   describe('Editing internal app tokens', () => {
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index 4aab163f61..057e8f5806 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -106,7 +106,13 @@ class GetSentryAppsTest(SentryAppsTest):
             'isAlertable': self.internal_app.is_alertable,
             'verifyInstall': self.internal_app.verify_install,
             'overview': self.internal_app.overview,
-            'schema': {}
+            'schema': {},
+            'clientId': self.internal_app.application.client_id,
+            'clientSecret': self.internal_app.application.client_secret,
+            'owner': {
+                'id': self.internal_org.id,
+                'slug': self.internal_org.slug,
+            }
         } in json.loads(response.content)
 
         response_uuids = set(o['uuid'] for o in response.data)
@@ -142,6 +148,12 @@ class GetSentryAppsTest(SentryAppsTest):
             'verifyInstall': self.internal_app.verify_install,
             'overview': self.internal_app.overview,
             'schema': {},
+            'clientId': self.internal_app.application.client_id,
+            'clientSecret': self.internal_app.application.client_secret,
+            'owner': {
+                'id': self.internal_org.id,
+                'slug': self.internal_org.slug,
+            }
         } in json.loads(response.content)
 
         response_uuids = set(o['uuid'] for o in response.data)
