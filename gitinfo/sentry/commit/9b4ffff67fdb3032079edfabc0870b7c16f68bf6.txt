commit 9b4ffff67fdb3032079edfabc0870b7c16f68bf6
Author: Jan Michael Auer <jan.auer@sentry.io>
Date:   Mon Sep 9 10:28:54 2019 +0200

    fix(quotas): Fix quota refunds with RedisCluster (#14611)

diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
index 38d039db6a..06e5d9a126 100644
--- a/src/sentry/quotas/redis.py
+++ b/src/sentry/quotas/redis.py
@@ -69,6 +69,12 @@ class RedisQuota(Quota):
         except Exception as e:
             raise InvalidConfiguration(six.text_type(e))
 
+    def __get_redis_client(self, routing_key):
+        if self.is_redis_cluster:
+            return self.cluster
+        else:
+            return self.cluster.get_local_client_for_key(routing_key)
+
     def __get_redis_key(self, quota, timestamp, shift, organization_id):
         if self.is_redis_cluster:
             # new style redis cluster format which always has the organization id in
@@ -162,7 +168,7 @@ class RedisQuota(Quota):
         if not quotas:
             return
 
-        client = self.cluster.get_local_client_for_key(six.text_type(project.organization_id))
+        client = self.__get_redis_client(six.text_type(project.organization_id))
         pipe = client.pipeline()
 
         for quota in quotas:
@@ -202,11 +208,8 @@ class RedisQuota(Quota):
             expiry = self.get_next_period_start(quota.window, shift, timestamp) + self.grace
             args.extend((quota.limit, int(expiry)))
 
-        if self.is_redis_cluster:
-            rejections = is_rate_limited(self.cluster, keys, args)
-        else:
-            client = self.cluster.get_local_client_for_key(six.text_type(project.organization_id))
-            rejections = is_rate_limited(client, keys, args)
+        client = self.__get_redis_client(six.text_type(project.organization_id))
+        rejections = is_rate_limited(client, keys, args)
 
         if any(rejections):
             enforce = False
