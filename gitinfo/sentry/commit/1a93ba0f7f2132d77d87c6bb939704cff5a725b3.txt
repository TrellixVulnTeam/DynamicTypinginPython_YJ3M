commit 1a93ba0f7f2132d77d87c6bb939704cff5a725b3
Author: josh <josh@jrl.ninja>
Date:   Fri Jan 24 19:59:34 2020 +0000

    ref: remove unused social auth backends (#16602)

diff --git a/conftest.py b/conftest.py
index 851d7475c2..6289e081ce 100644
--- a/conftest.py
+++ b/conftest.py
@@ -46,8 +46,6 @@ def install_sentry_plugins():
     settings.BITBUCKET_CONSUMER_SECRET = "123"
     settings.GITHUB_APP_ID = "abc"
     settings.GITHUB_API_SECRET = "123"
-    settings.GITHUB_APPS_APP_ID = "abc"
-    settings.GITHUB_APPS_API_SECRET = "123"
     # this isn't the real secret
     settings.SENTRY_OPTIONS["github.integration-hook-secret"] = "b3002c3e321d4b7880360d397db2ccfd"
 
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 61b7a37a24..63a056b76a 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -390,13 +390,11 @@ LOGIN_URL = reverse_lazy("sentry-login")
 
 AUTHENTICATION_BACKENDS = (
     "sentry.utils.auth.EmailAuthBackend",
-    # TODO(dcramer): we can't remove these until we rewrite more of social auth
+    # The following authentication backends are used by social auth only.
+    # We don't use them for user authentication.
+    "social_auth.backends.asana.AsanaBackend",
     "social_auth.backends.github.GithubBackend",
-    "social_auth.backends.github_apps.GithubAppsBackend",
     "social_auth.backends.bitbucket.BitbucketBackend",
-    "social_auth.backends.trello.TrelloBackend",
-    "social_auth.backends.asana.AsanaBackend",
-    "social_auth.backends.slack.SlackBackend",
     "social_auth.backends.visualstudio.VisualStudioBackend",
 )
 
@@ -413,16 +411,6 @@ AUTH_PASSWORD_VALIDATORS = [
 
 SOCIAL_AUTH_USER_MODEL = AUTH_USER_MODEL = "sentry.User"
 
-SOCIAL_AUTH_AUTHENTICATION_BACKENDS = (
-    "social_auth.backends.github.GithubBackend",
-    "social_auth.backends.bitbucket.BitbucketBackend",
-    "social_auth.backends.trello.TrelloBackend",
-    "social_auth.backends.asana.AsanaBackend",
-    "social_auth.backends.slack.SlackBackend",
-    "social_auth.backends.github_apps.GithubAppsBackend",
-    "social_auth.backends.visualstudio.VisualStudioBackend",
-)
-
 SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"
 SESSION_COOKIE_NAME = "sentrysid"
 SESSION_SERIALIZER = "django.contrib.sessions.serializers.PickleSerializer"
@@ -433,15 +421,12 @@ GOOGLE_OAUTH2_CLIENT_SECRET = ""
 GITHUB_APP_ID = ""
 GITHUB_API_SECRET = ""
 
-GITHUB_APPS_APP_ID = ""
-GITHUB_APPS_API_SECRET = ""
-
-TRELLO_API_KEY = ""
-TRELLO_API_SECRET = ""
-
 BITBUCKET_CONSUMER_KEY = ""
 BITBUCKET_CONSUMER_SECRET = ""
 
+ASANA_CLIENT_ID = ""
+ASANA_CLIENT_SECRET = ""
+
 VISUALSTUDIO_APP_ID = ""
 VISUALSTUDIO_APP_SECRET = ""
 VISUALSTUDIO_CLIENT_SECRET = ""
@@ -466,11 +451,8 @@ INITIAL_CUSTOM_USER_MIGRATION = "0108_fix_user"
 # Auth engines and the settings required for them to be listed
 AUTH_PROVIDERS = {
     "github": ("GITHUB_APP_ID", "GITHUB_API_SECRET"),
-    "github_apps": ("GITHUB_APPS_APP_ID", "GITHUB_APPS_API_SECRET"),
-    "trello": ("TRELLO_API_KEY", "TRELLO_API_SECRET"),
     "bitbucket": ("BITBUCKET_CONSUMER_KEY", "BITBUCKET_CONSUMER_SECRET"),
     "asana": ("ASANA_CLIENT_ID", "ASANA_CLIENT_SECRET"),
-    "slack": ("SLACK_CLIENT_ID", "SLACK_CLIENT_SECRET"),
     "visualstudio": (
         "VISUALSTUDIO_APP_ID",
         "VISUALSTUDIO_APP_SECRET",
@@ -480,11 +462,8 @@ AUTH_PROVIDERS = {
 
 AUTH_PROVIDER_LABELS = {
     "github": "GitHub",
-    "github_apps": "GitHub Apps",
-    "trello": "Trello",
     "bitbucket": "Bitbucket",
     "asana": "Asana",
-    "slack": "Slack",
     "visualstudio": "Visual Studio",
 }
 
diff --git a/src/social_auth/backends/__init__.py b/src/social_auth/backends/__init__.py
index 4679a6938a..f79ddbbbf7 100644
--- a/src/social_auth/backends/__init__.py
+++ b/src/social_auth/backends/__init__.py
@@ -720,7 +720,7 @@ def get_backends(force_load=False):
 
     if not BACKENDSCACHE or force_load:
         with _import_lock:
-            for auth_backend in setting("SOCIAL_AUTH_AUTHENTICATION_BACKENDS"):
+            for auth_backend in setting("AUTHENTICATION_BACKENDS"):
                 mod, cls_name = auth_backend.rsplit(".", 1)
                 module = __import__(mod, {}, {}, ["BACKENDS", cls_name])
                 backend = getattr(module, cls_name)
diff --git a/src/social_auth/backends/github_apps.py b/src/social_auth/backends/github_apps.py
deleted file mode 100644
index ee6434dcc8..0000000000
--- a/src/social_auth/backends/github_apps.py
+++ /dev/null
@@ -1,17 +0,0 @@
-from __future__ import absolute_import
-
-from social_auth.backends.github import GithubBackend, GithubAuth
-
-
-class GithubAppsBackend(GithubBackend):
-    name = "github_apps"
-
-
-class GithubAppsAuth(GithubAuth):
-    AUTH_BACKEND = GithubAppsBackend
-    SETTINGS_KEY_NAME = "GITHUB_APPS_APP_ID"
-    SETTINGS_SECRET_NAME = "GITHUB_APPS_API_SECRET"
-    REDIRECT_STATE = False
-
-
-BACKENDS = {"github_apps": GithubAppsAuth}
diff --git a/src/social_auth/backends/slack.py b/src/social_auth/backends/slack.py
deleted file mode 100644
index d22123b7b6..0000000000
--- a/src/social_auth/backends/slack.py
+++ /dev/null
@@ -1,61 +0,0 @@
-"""
-Obtain
-SLACK_CLIENT_ID & SLACK_CLIENT_SECRET
-and put into sentry.conf.py
-"""
-from __future__ import absolute_import
-
-import requests
-
-from social_auth.backends import BaseOAuth2, OAuthBackend
-
-SLACK_TOKEN_EXCHANGE_URL = "https://slack.com/api/oauth.access"
-SLACK_AUTHORIZATION_URL = "https://slack.com/oauth/authorize"
-SLACK_USER_DETAILS_URL = "https://slack.com/api/auth.test"
-
-
-class SlackBackend(OAuthBackend):
-    """Slack OAuth authentication backend"""
-
-    name = "slack"
-    EXTRA_DATA = [
-        ("email", "email"),
-        ("name", "full_name"),
-        ("id", "id"),
-        ("refresh_token", "refresh_token"),
-    ]
-
-    def get_user_details(self, response):
-        """Return user details from Slack account"""
-
-        return {
-            "email": response.get("email"),
-            "id": response.get("id"),
-            "full_name": response.get("name"),
-        }
-
-
-class SlackAuth(BaseOAuth2):
-    """Slack OAuth authentication mechanism"""
-
-    AUTHORIZATION_URL = SLACK_AUTHORIZATION_URL
-    ACCESS_TOKEN_URL = SLACK_TOKEN_EXCHANGE_URL
-    AUTH_BACKEND = SlackBackend
-    SETTINGS_KEY_NAME = "SLACK_CLIENT_ID"
-    SETTINGS_SECRET_NAME = "SLACK_CLIENT_SECRET"
-    REDIRECT_STATE = False
-    DEFAULT_SCOPE = ["incoming-webhook"]
-
-    def user_data(self, access_token, *args, **kwargs):
-        """Loads user data from service"""
-        try:
-            resp = requests.get(SLACK_USER_DETAILS_URL, params={"token": access_token})
-            resp.raise_for_status()
-            content = resp.json()
-            return {"id": content["user_id"], "name": content["user"]}
-        except ValueError:
-            return None
-
-
-# Backend definition
-BACKENDS = {"slack": SlackAuth}
diff --git a/src/social_auth/backends/trello.py b/src/social_auth/backends/trello.py
deleted file mode 100644
index 2985c6611b..0000000000
--- a/src/social_auth/backends/trello.py
+++ /dev/null
@@ -1,95 +0,0 @@
-"""
-Obtain
-TRELLO_CONSUMER_KEY & TRELLO_CONSUMER_SECRET
-at https://trello.com/1/appKey/generate
-and put into settings.py
-
-Also you can put something like
-TRELLO_AUTH_EXTRA_ARGUMENTS = {
-    'name': '7WebPages Time Tracker',
-    'expiration': 'never'
-}
-
-into settings.py
-"""
-from __future__ import absolute_import
-
-import simplejson
-
-from six.moves.urllib.parse import urlencode
-from social_auth.backends import ConsumerBasedOAuth, OAuthBackend
-from social_auth.utils import dsa_urlopen, backend_setting
-
-
-TRELLO_REQUEST_TOKEN_URL = "https://trello.com/1/OAuthGetRequestToken"
-TRELLO_ACCESS_TOKEN_URL = "https://trello.com/1/OAuthGetAccessToken"
-TRELLO_AUTHORIZATION_URL = "https://trello.com/1/OAuthAuthorizeToken"
-TRELLO_USER_DETAILS_URL = "https://api.trello.com/1/members/me/"
-
-
-class TrelloBackend(OAuthBackend):
-    """Trello OAuth authentication backend"""
-
-    name = "trello"
-    EXTRA_DATA = [("username", "username"), ("email", "email"), ("fullName", "full_name")]
-
-    def get_user_details(self, response):
-        """Return user details from Trello account"""
-        name_arr = response.get("fullName").split()
-        first_name = None
-        last_name = None
-
-        if len(name_arr) > 0:
-            first_name = name_arr[0]
-        if len(name_arr) > 1:
-            last_name = name_arr[1]
-
-        return {
-            "username": response.get("username"),
-            "email": response.get("email"),
-            "first_name": first_name,
-            "last_name": last_name,
-        }
-
-    def get_user_id(self, details, response):
-        """Return the user id, Trello only provides username as a unique
-        identifier"""
-        return response["username"]
-
-    @classmethod
-    def tokens(cls, instance):
-        """Return the tokens needed to authenticate the access to any API the
-        service might provide. Trello uses a pair of OAuthToken consisting
-        on a oauth_token and oauth_token_secret.
-
-        instance must be a UserSocialAuth instance.
-        """
-        token = super(TrelloBackend, cls).tokens(instance)
-        if token and "access_token" in token:
-            token = dict(tok.split("=") for tok in token["access_token"].split("&"))
-        return token
-
-
-class TrelloAuth(ConsumerBasedOAuth):
-    """Trello OAuth authentication mechanism"""
-
-    AUTHORIZATION_URL = TRELLO_AUTHORIZATION_URL
-    REQUEST_TOKEN_URL = TRELLO_REQUEST_TOKEN_URL
-    ACCESS_TOKEN_URL = TRELLO_ACCESS_TOKEN_URL
-    AUTH_BACKEND = TrelloBackend
-    SETTINGS_KEY_NAME = "TRELLO_CONSUMER_KEY"
-    SETTINGS_SECRET_NAME = "TRELLO_CONSUMER_SECRET"
-
-    def user_data(self, access_token, *args, **kwargs):
-        """Loads user data from service"""
-        token = access_token.key
-        params = {"token": token, "key": backend_setting(self, self.SETTINGS_KEY_NAME)}
-        url = TRELLO_USER_DETAILS_URL + "?" + urlencode(params)
-        try:
-            return simplejson.load(dsa_urlopen(url))
-        except ValueError:
-            return None
-
-
-# Backend definition
-BACKENDS = {"trello": TrelloAuth}
