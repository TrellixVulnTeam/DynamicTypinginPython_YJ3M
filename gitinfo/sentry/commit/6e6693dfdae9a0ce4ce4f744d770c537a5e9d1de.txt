commit 6e6693dfdae9a0ce4ce4f744d770c537a5e9d1de
Author: Jan Michael Auer <account@jauer.org>
Date:   Mon Feb 12 17:25:52 2018 +0100

    fix: Return all DIFs when uploading fat objects (#7226)
    
    * fix: Return all DIFs when uploading fat objects
    
    * test: Update tests to new DIF assemble response

diff --git a/src/sentry/api/bases/chunk.py b/src/sentry/api/bases/chunk.py
index 39524a5fe9..42967266d4 100644
--- a/src/sentry/api/bases/chunk.py
+++ b/src/sentry/api/bases/chunk.py
@@ -70,14 +70,20 @@ class ChunkAssembleMixin(object):
                 None,
                 self._check_chunk_ownership(organization, file_blobs, chunks)
             )
-        # It is possible to have multiple files in the db because
-        # we do not have a unique on the checksum
-        for file in files:
-            # We need to fetch all blobs
-            file_blobs = file.blobs.all()
-            rv = self._check_chunk_ownership(organization, file_blobs, chunks, file)
-            if rv is not None:
-                return (file, rv)
+        # It is possible to have multiple identical files in the DB for every
+        # architecture inside a FatObject. We can safely assume here that if
+        # there are multiple matching files, their blobs will be the same and
+        # we only have to check ownership for one representative.
+        files = list(files)
+        file = files[0]
+
+        # We need to fetch all blobs
+        file_blobs = file.blobs.all()
+        rv = self._check_chunk_ownership(organization, file_blobs, chunks, file)
+        if rv is not None:
+            return (files, rv)
+
+        return (None, None)
 
     def _create_file_for_assembling(self, name, checksum, chunks):
         # If we have all chunks and the file wasn't found before
diff --git a/src/sentry/api/endpoints/dif_files.py b/src/sentry/api/endpoints/dif_files.py
index 7413520f28..b7e43def02 100644
--- a/src/sentry/api/endpoints/dif_files.py
+++ b/src/sentry/api/endpoints/dif_files.py
@@ -15,16 +15,19 @@ from sentry.models import File, ChunkFileState, ProjectDSymFile
 class DifAssembleEndpoint(ChunkAssembleMixin, ProjectEndpoint):
     permission_classes = (ProjectReleasePermission, )
 
-    def _add_project_dsym_to_reponse(self, found_file, response):
-        if found_file is not None:
-            if found_file.headers.get('error', None) is not None:
-                response['error'] = found_file.headers.get('error')
+    def _add_project_dsym_to_reponse(self, found_files, response):
+        for found_file in found_files or []:
+            error = found_file.headers.get('error', None)
+            if error is not None:
+                response.setdefault('errors', []).append(error)
+                response['state'] = ChunkFileState.ERROR
 
             dsym = ProjectDSymFile.objects.filter(
                 file=found_file
             ).first()
+
             if dsym is not None:
-                response['dif'] = serialize(dsym)
+                response.setdefault('difs', []).append(serialize(dsym))
 
         return response
 
@@ -72,7 +75,7 @@ class DifAssembleEndpoint(ChunkAssembleMixin, ProjectEndpoint):
             chunks = file_to_assemble.get('chunks', [])
 
             try:
-                found_file, response = self._check_file_blobs(
+                found_files, response = self._check_file_blobs(
                     project.organization, checksum, chunks)
                 # This either returns a file OK because we already own all chunks
                 # OR we return not_found with the missing chunks (or not owned)
@@ -80,7 +83,7 @@ class DifAssembleEndpoint(ChunkAssembleMixin, ProjectEndpoint):
                     # We also found a file, we try to fetch project dsym to return more
                     # information in the request
                     file_response[checksum] = self._add_project_dsym_to_reponse(
-                        found_file, response)
+                        found_files, response)
                     continue
             except File.DoesNotExist:
                 pass
diff --git a/tests/sentry/api/endpoints/test_dif_assemble.py b/tests/sentry/api/endpoints/test_dif_assemble.py
index 2cebdcf9d8..fc45020aff 100644
--- a/tests/sentry/api/endpoints/test_dif_assemble.py
+++ b/tests/sentry/api/endpoints/test_dif_assemble.py
@@ -274,7 +274,7 @@ class DifAssembleEndpoint(APITestCase):
         )
 
         assert response.status_code == 200, response.content
-        assert response.data[total_checksum]['dif']['cpuName'] == 'x86_64'
+        assert response.data[total_checksum]['difs'][0]['cpuName'] == 'x86_64'
 
     def test_dif_error_reponse(self):
         sym_file = 'fail'
@@ -312,4 +312,4 @@ class DifAssembleEndpoint(APITestCase):
         )
 
         assert response.status_code == 200, response.content
-        assert response.data[total_checksum]['error'] == 'Invalid object file'
+        assert response.data[total_checksum]['errors'][0] == 'Invalid object file'
