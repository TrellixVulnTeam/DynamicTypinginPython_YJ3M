commit 4fc0697ca58c84566a54865be8111b82e6b1aab5
Author: Matej Minar <matej.minar@sentry.io>
Date:   Fri Apr 10 20:34:03 2020 +0200

    feat(ui): Add ability to switch health/events chart on release v2 detail (#18207)
    
    * feat(ui): Add ability to switch between health and events chart on release v2 detail
    
    * final improvements
    
    * changed events label in Y-Axis picker

diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/discoverChartContainer.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/discoverChartContainer.tsx
deleted file mode 100644
index a6ee603ebc..0000000000
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/discoverChartContainer.tsx
+++ /dev/null
@@ -1,140 +0,0 @@
-import React from 'react';
-import {Location} from 'history';
-import * as ReactRouter from 'react-router';
-import styled from '@emotion/styled';
-import isEqual from 'lodash/isEqual';
-
-import {Organization, GlobalSelection} from 'app/types';
-import space from 'app/styles/space';
-import {t} from 'app/locale';
-import {Client} from 'app/api';
-import {formatVersion} from 'app/utils/formatters';
-import EventView from 'app/utils/discover/eventView';
-import {EventsChart} from 'app/views/events/eventsChart';
-import {fetchTotalCount} from 'app/actionCreators/events';
-import {getUtcDateString} from 'app/utils/dates';
-import {Panel} from 'app/components/panels';
-import getDynamicText from 'app/utils/getDynamicText';
-import {
-  ChartControls,
-  InlineContainer,
-  SectionHeading,
-  SectionValue,
-} from 'app/components/charts/styles';
-
-type Props = {
-  organization: Organization;
-  selection: GlobalSelection;
-  api: Client;
-  location: Location;
-  router: ReactRouter.InjectedRouter;
-  version: string;
-};
-
-type State = {
-  totalEvents: null | number;
-};
-
-class DiscoverChartContainer extends React.Component<Props, State> {
-  state: State = {
-    totalEvents: null,
-  };
-
-  componentDidMount() {
-    this.fetchTotalCount();
-  }
-
-  componentDidUpdate(prevProps: Props) {
-    const {version, organization, selection} = this.props;
-    if (
-      prevProps.version !== version ||
-      !isEqual(prevProps.organization, organization) ||
-      !isEqual(prevProps.selection, selection)
-    ) {
-      this.fetchTotalCount();
-    }
-  }
-
-  async fetchTotalCount() {
-    const {api, organization, location} = this.props;
-
-    const totalEvents = await fetchTotalCount(
-      api,
-      organization.slug,
-      this.getEventView().getEventsAPIPayload(location)
-    );
-    this.setState({totalEvents});
-  }
-
-  getEventView(): EventView {
-    const {selection, version} = this.props;
-    const {projects, environments, datetime} = selection;
-    const {start, end, period} = datetime;
-
-    const discoverQuery = {
-      id: undefined,
-      version: 2,
-      name: `${t('Release')} ${formatVersion(version)}`,
-      fields: ['title', 'count()', 'event.type', 'issue', 'last_seen()'],
-      query: `release:${version} !event.type:transaction`,
-      orderby: '-last_seen',
-      range: period,
-      environments,
-      projects,
-      start: start ? getUtcDateString(start) : undefined,
-      end: end ? getUtcDateString(end) : undefined,
-    } as const;
-
-    return EventView.fromSavedQuery(discoverQuery);
-  }
-
-  render() {
-    const {totalEvents} = this.state;
-    const {organization, location, api, router, selection} = this.props;
-    const {projects, environments, datetime} = selection;
-    const {start, end, period, utc} = datetime;
-    const eventView = this.getEventView();
-
-    return (
-      <StyledPanel>
-        {getDynamicText({
-          value: (
-            <React.Fragment>
-              <EventsChart
-                router={router}
-                organization={organization}
-                showLegend
-                yAxis={eventView.getYAxis()}
-                query={eventView.getEventsAPIPayload(location).query}
-                api={api}
-                projects={projects}
-                environments={environments}
-                start={start}
-                end={end}
-                period={period}
-                utc={utc}
-                disablePrevious
-                currentSeriesName={t('Events')}
-              />
-              <ChartControls>
-                <InlineContainer>
-                  <SectionHeading>{t('Total Events')}</SectionHeading>
-                  <SectionValue>
-                    {totalEvents === null ? '\u2015' : totalEvents.toLocaleString()}
-                  </SectionValue>
-                </InlineContainer>
-              </ChartControls>
-            </React.Fragment>
-          ),
-          fixed: 'events chart',
-        })}
-      </StyledPanel>
-    );
-  }
-}
-
-const StyledPanel = styled(Panel)`
-  margin-bottom: ${space(3)};
-`;
-
-export default DiscoverChartContainer;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChart.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/healthChart.tsx
similarity index 96%
rename from src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChart.tsx
rename to src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/healthChart.tsx
index 42cb361db5..4725ef586c 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChart.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/healthChart.tsx
@@ -19,7 +19,7 @@ type Props = {
   yAxis: YAxis;
 };
 
-class ReleaseChart extends React.Component<Props> {
+class HealthChart extends React.Component<Props> {
   shouldComponentUpdate(nextProps: Props) {
     if (nextProps.reloading || !nextProps.timeseriesData) {
       return false;
@@ -78,7 +78,7 @@ class ReleaseChart extends React.Component<Props> {
 
     const legend = {
       right: 16,
-      top: 4,
+      top: 12,
       selectedMode: false,
       icon: 'circle',
       itemHeight: 8,
@@ -116,4 +116,4 @@ class ReleaseChart extends React.Component<Props> {
   }
 }
 
-export default ReleaseChart;
+export default HealthChart;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/healthChartContainer.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/healthChartContainer.tsx
new file mode 100644
index 0000000000..5050fa99ed
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/healthChartContainer.tsx
@@ -0,0 +1,75 @@
+import React from 'react';
+import * as ReactRouter from 'react-router';
+
+import ChartZoom from 'app/components/charts/chartZoom';
+import ReleaseSeries from 'app/components/charts/releaseSeries';
+import {IconWarning} from 'app/icons';
+import theme from 'app/utils/theme';
+import {GlobalSelection} from 'app/types';
+import TransitionChart from 'app/components/charts/transitionChart';
+import TransparentLoadingMask from 'app/components/charts/components/transparentLoadingMask';
+import ErrorPanel from 'app/components/charts/components/errorPanel';
+
+import HealthChart from './healthChart';
+import {YAxis} from './releaseChartControls';
+import {ReleaseStatsRequestRenderProps} from '../releaseStatsRequest';
+
+type Props = Omit<
+  ReleaseStatsRequestRenderProps,
+  'crashFreeTimeBreakdown' | 'chartSummary'
+> & {
+  selection: GlobalSelection;
+  yAxis: YAxis;
+  router: ReactRouter.InjectedRouter;
+};
+
+const ReleaseChartContainer = ({
+  loading,
+  errored,
+  reloading,
+  chartData,
+  selection,
+  yAxis,
+  router,
+}: Props) => {
+  const {datetime, projects} = selection;
+  const {utc, period, start, end} = datetime;
+
+  return (
+    <React.Fragment>
+      <ChartZoom router={router} period={period} utc={utc} start={start} end={end}>
+        {zoomRenderProps => (
+          <ReleaseSeries utc={utc} projects={projects}>
+            {({releaseSeries}) => {
+              if (errored) {
+                return (
+                  <ErrorPanel>
+                    <IconWarning color={theme.gray2} size="lg" />
+                  </ErrorPanel>
+                );
+              }
+
+              return (
+                <TransitionChart loading={loading} reloading={reloading}>
+                  <React.Fragment>
+                    <TransparentLoadingMask visible={reloading} />
+                    <HealthChart
+                      utc={utc}
+                      releaseSeries={releaseSeries}
+                      timeseriesData={chartData}
+                      zoomRenderProps={zoomRenderProps}
+                      reloading={reloading}
+                      yAxis={yAxis}
+                    />
+                  </React.Fragment>
+                </TransitionChart>
+              );
+            }}
+          </ReleaseSeries>
+        )}
+      </ChartZoom>
+    </React.Fragment>
+  );
+};
+
+export default ReleaseChartContainer;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/index.tsx
index 6dd0a26bbd..c0cba41c88 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/index.tsx
@@ -1,89 +1,92 @@
 import React from 'react';
-import styled from '@emotion/styled';
 import * as ReactRouter from 'react-router';
+import {Location} from 'history';
 
-import ChartZoom from 'app/components/charts/chartZoom';
-import ReleaseSeries from 'app/components/charts/releaseSeries';
-import {IconWarning} from 'app/icons';
-import theme from 'app/utils/theme';
-import {GlobalSelection} from 'app/types';
-import TransitionChart from 'app/components/charts/transitionChart';
+import {GlobalSelection, Organization} from 'app/types';
 import {Panel} from 'app/components/panels';
-import TransparentLoadingMask from 'app/components/charts/components/transparentLoadingMask';
-import ErrorPanel from 'app/components/charts/components/errorPanel';
-import space from 'app/styles/space';
+import {Client} from 'app/api';
+import {EventsChart} from 'app/views/events/eventsChart';
+import {t} from 'app/locale';
 
-import ReleaseChart from './releaseChart';
 import ReleaseChartControls, {YAxis} from './releaseChartControls';
-import {ReleaseStatsRequestRenderProps} from './releaseStatsRequest';
+import {ReleaseStatsRequestRenderProps} from '../releaseStatsRequest';
+import HealthChartContainer from './healthChartContainer';
+import {getReleaseEventView} from './utils';
 
 type Props = Omit<ReleaseStatsRequestRenderProps, 'crashFreeTimeBreakdown'> & {
   selection: GlobalSelection;
   yAxis: YAxis;
   onYAxisChange: (yAxis: YAxis) => void;
   router: ReactRouter.InjectedRouter;
+  organization: Organization;
+  hasHealthData: boolean;
+  location: Location;
+  api: Client;
+  version: string;
+  hasDiscover: boolean;
 };
 
 const ReleaseChartContainer = ({
-  selection,
   loading,
   errored,
   reloading,
   chartData,
   chartSummary,
+  selection,
   yAxis,
   onYAxisChange,
   router,
+  organization,
+  hasHealthData,
+  location,
+  api,
+  version,
+  hasDiscover,
 }: Props) => {
-  const {datetime, projects} = selection;
-  const {utc, period, start, end} = datetime;
+  const {projects, environments, datetime} = selection;
+  const {start, end, period, utc} = datetime;
+  const eventView = getReleaseEventView(selection, version);
 
   return (
     <Panel>
-      <ChartWrapper>
-        <ChartZoom router={router} period={period} utc={utc} start={start} end={end}>
-          {zoomRenderProps => (
-            <ReleaseSeries utc={utc} projects={projects}>
-              {({releaseSeries}) => {
-                if (errored) {
-                  return (
-                    <ErrorPanel>
-                      <IconWarning color={theme.gray2} size="lg" />
-                    </ErrorPanel>
-                  );
-                }
+      {hasDiscover && yAxis === YAxis.EVENTS ? (
+        <EventsChart
+          router={router}
+          organization={organization}
+          showLegend
+          yAxis={eventView.getYAxis()}
+          query={eventView.getEventsAPIPayload(location).query}
+          api={api}
+          projects={projects}
+          environments={environments}
+          start={start}
+          end={end}
+          period={period}
+          utc={utc}
+          disablePrevious
+          currentSeriesName={t('Events')}
+        />
+      ) : (
+        <HealthChartContainer
+          loading={loading}
+          errored={errored}
+          reloading={reloading}
+          chartData={chartData}
+          selection={selection}
+          yAxis={yAxis}
+          router={router}
+        />
+      )}
 
-                return (
-                  <TransitionChart loading={loading} reloading={reloading}>
-                    <React.Fragment>
-                      <TransparentLoadingMask visible={reloading} />
-                      <ReleaseChart
-                        utc={utc}
-                        releaseSeries={releaseSeries}
-                        timeseriesData={chartData}
-                        zoomRenderProps={zoomRenderProps}
-                        reloading={reloading}
-                        yAxis={yAxis}
-                      />
-                    </React.Fragment>
-                  </TransitionChart>
-                );
-              }}
-            </ReleaseSeries>
-          )}
-        </ChartZoom>
-      </ChartWrapper>
       <ReleaseChartControls
         summary={chartSummary}
         yAxis={yAxis}
         onYAxisChange={onYAxisChange}
+        hasDiscover={hasDiscover}
+        hasHealthData={hasHealthData}
       />
     </Panel>
   );
 };
 
-const ChartWrapper = styled('div')`
-  padding: ${space(1)} ${space(2)};
-`;
-
 export default ReleaseChartContainer;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChartControls.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChartControls.tsx
index 47010e66cc..704b5dbde8 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChartControls.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChartControls.tsx
@@ -10,39 +10,62 @@ import {
 import OptionSelector from 'app/components/charts/optionSelector';
 import styled from 'app/styled';
 import space from 'app/styles/space';
+import {SelectValue} from 'app/types';
 
 export enum YAxis {
   SESSIONS = 'sessions',
   USERS = 'users',
   CRASH_FREE = 'crashFree',
   SESSION_DURATION = 'sessionDuration',
+  EVENTS = 'events',
 }
 
 type Props = {
   summary: React.ReactNode;
   yAxis: YAxis;
   onYAxisChange: (value: YAxis) => void;
+  hasHealthData: boolean;
+  hasDiscover: boolean;
 };
 
-const ReleaseChartControls = ({summary, yAxis, onYAxisChange}: Props) => {
-  const yAxisOptions = [
-    {
-      value: YAxis.SESSIONS,
-      label: t('Session Count'),
-    },
-    {
-      value: YAxis.SESSION_DURATION,
-      label: t('Session Duration'),
-    },
-    {
-      value: YAxis.USERS,
-      label: t('User Count'),
-    },
-    {
-      value: YAxis.CRASH_FREE,
-      label: t('Crash Free Rate'),
-    },
-  ];
+const ReleaseChartControls = ({
+  summary,
+  yAxis,
+  onYAxisChange,
+  hasHealthData,
+  hasDiscover,
+}: Props) => {
+  const yAxisOptions: SelectValue<YAxis>[] = [];
+
+  if (hasHealthData) {
+    yAxisOptions.push(
+      ...[
+        {
+          value: YAxis.SESSIONS,
+          label: t('Session Count'),
+        },
+        {
+          value: YAxis.SESSION_DURATION,
+          label: t('Session Duration'),
+        },
+        {
+          value: YAxis.USERS,
+          label: t('User Count'),
+        },
+        {
+          value: YAxis.CRASH_FREE,
+          label: t('Crash Free Rate'),
+        },
+      ]
+    );
+  }
+
+  if (hasDiscover) {
+    yAxisOptions.push({
+      value: YAxis.EVENTS,
+      label: t('Event Count'),
+    });
+  }
 
   const getSummaryHeading = () => {
     switch (yAxis) {
@@ -52,6 +75,8 @@ const ReleaseChartControls = ({summary, yAxis, onYAxisChange}: Props) => {
         return t('Average Rate');
       case YAxis.SESSION_DURATION:
         return t('Average Duration');
+      case YAxis.EVENTS:
+        return t('Total Events');
       case YAxis.SESSIONS:
       default:
         return t('Total Sessions');
@@ -65,13 +90,15 @@ const ReleaseChartControls = ({summary, yAxis, onYAxisChange}: Props) => {
         <SectionValue key="total-value">{summary}</SectionValue>
       </InlineContainer>
 
-      <OptionSelector
-        title={t('Y-Axis')}
-        selected={yAxis}
-        options={yAxisOptions}
-        onChange={onYAxisChange as (value: string) => void}
-        menuWidth="150px"
-      />
+      {yAxisOptions.length > 1 && (
+        <OptionSelector
+          title={t('Y-Axis')}
+          selected={yAxis}
+          options={yAxisOptions}
+          onChange={onYAxisChange as (value: string) => void}
+          menuWidth="150px"
+        />
+      )}
     </StyledChartControls>
   );
 };
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/utils.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/utils.tsx
index 2a23bc18a6..52472de6f6 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/utils.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/utils.tsx
@@ -1,4 +1,9 @@
 import {getDiffInMinutes, DateTimeObject} from 'app/components/charts/utils';
+import EventView from 'app/utils/discover/eventView';
+import {GlobalSelection} from 'app/types';
+import {formatVersion} from 'app/utils/formatters';
+import {getUtcDateString} from 'app/utils/dates';
+import {t} from 'app/locale';
 
 // In minutes
 const FOURTEEN_DAYS = 20160;
@@ -12,3 +17,27 @@ export function getInterval(datetimeObj: DateTimeObject) {
     return '1h';
   }
 }
+
+export function getReleaseEventView(
+  selection: GlobalSelection,
+  version: string
+): EventView {
+  const {projects, environments, datetime} = selection;
+  const {start, end, period} = datetime;
+
+  const discoverQuery = {
+    id: undefined,
+    version: 2,
+    name: `${t('Release')} ${formatVersion(version)}`,
+    fields: ['title', 'count()', 'event.type', 'issue', 'last_seen()'],
+    query: `release:${version} !event.type:transaction`,
+    orderby: '-last_seen',
+    range: period,
+    environments,
+    projects,
+    start: start ? getUtcDateString(start) : undefined,
+    end: end ? getUtcDateString(end) : undefined,
+  } as const;
+
+  return EventView.fromSavedQuery(discoverQuery);
+}
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx
index fd807772ac..26597cc3c8 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx
@@ -12,16 +12,14 @@ import {Client} from 'app/api';
 import withApi from 'app/utils/withApi';
 import {formatVersion} from 'app/utils/formatters';
 import routeTitleGen from 'app/utils/routeTitle';
-import Feature from 'app/components/acl/feature';
 
-import ReleaseChartContainer from './chart';
+import ReleaseChart from './chart/';
 import Issues from './issues';
 import CommitAuthorBreakdown from './commitAuthorBreakdown';
 import ProjectReleaseDetails from './projectReleaseDetails';
 import TotalCrashFreeUsers from './totalCrashFreeUsers';
-import ReleaseStatsRequest from './chart/releaseStatsRequest';
+import ReleaseStatsRequest from './releaseStatsRequest';
 import {YAxis} from './chart/releaseChartControls';
-import DiscoverChartContainer from './chart/discoverChartContainer';
 
 import {ReleaseContext} from '..';
 
@@ -55,21 +53,30 @@ class ReleaseOverview extends AsyncView<Props> {
     });
   };
 
-  getYAxis(): YAxis {
+  getYAxis(hasHealthData: boolean): YAxis {
     const {yAxis} = this.props.location.query;
 
-    return typeof yAxis === 'string' ? (yAxis as YAxis) : YAxis.SESSIONS;
+    if (typeof yAxis === 'string') {
+      return yAxis as YAxis;
+    }
+
+    if (hasHealthData) {
+      return YAxis.SESSIONS;
+    }
+
+    return YAxis.EVENTS;
   }
 
   render() {
     const {organization, selection, location, api, router} = this.props;
-    const yAxis = this.getYAxis();
 
     return (
       <ReleaseContext.Consumer>
         {({release, project}) => {
           const {commitCount, version} = release;
           const {hasHealthData} = project.healthData || {};
+          const hasDiscover = organization.features.includes('discover-basic');
+          const yAxis = this.getYAxis(hasHealthData);
 
           return (
             <ReleaseStatsRequest
@@ -80,30 +87,25 @@ class ReleaseOverview extends AsyncView<Props> {
               selection={selection}
               location={location}
               yAxis={yAxis}
-              disable={!hasHealthData}
+              disable={!hasHealthData && !hasDiscover}
             >
               {({crashFreeTimeBreakdown, ...releaseStatsProps}) => (
                 <ContentBox>
                   <Main>
-                    {hasHealthData ? (
-                      <ReleaseChartContainer
-                        onYAxisChange={this.handleYAxisChange}
+                    {(hasDiscover || hasHealthData) && (
+                      <ReleaseChart
+                        {...releaseStatsProps}
                         selection={selection}
                         yAxis={yAxis}
+                        onYAxisChange={this.handleYAxisChange}
                         router={router}
-                        {...releaseStatsProps}
+                        organization={organization}
+                        hasHealthData={hasHealthData}
+                        location={location}
+                        api={api}
+                        version={version}
+                        hasDiscover={hasDiscover}
                       />
-                    ) : (
-                      <Feature features={['discover-basic']}>
-                        <DiscoverChartContainer
-                          organization={organization}
-                          selection={selection}
-                          location={location}
-                          api={api}
-                          router={router}
-                          version={version}
-                        />
-                      </Feature>
                     )}
 
                     <Issues
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseStatsRequest.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/releaseStatsRequest.tsx
similarity index 86%
rename from src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseStatsRequest.tsx
rename to src/sentry/static/sentry/app/views/releasesV2/detail/overview/releaseStatsRequest.tsx
index ac8ebf1554..06d2a49037 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseStatsRequest.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/releaseStatsRequest.tsx
@@ -15,10 +15,11 @@ import {percent, defined} from 'app/utils';
 import {Series} from 'app/types/echarts';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import {getExactDuration} from 'app/utils/formatters';
+import {fetchTotalCount} from 'app/actionCreators/events';
 
-import {YAxis} from './releaseChartControls';
-import {getInterval} from './utils';
-import {displayCrashFreePercent, getCrashFreePercent} from '../../../utils';
+import {YAxis} from './chart/releaseChartControls';
+import {getInterval, getReleaseEventView} from './chart/utils';
+import {displayCrashFreePercent, getCrashFreePercent} from '../../utils';
 
 const omitIgnoredProps = (props: Props) =>
   omitBy(props, (_, key) =>
@@ -98,6 +99,8 @@ class ReleaseStatsRequest extends React.Component<Props, State> {
     try {
       if (yAxis === YAxis.CRASH_FREE) {
         data = await this.fetchRateData();
+      } else if (yAxis === YAxis.EVENTS) {
+        data = await this.fetchEventData();
       } else {
         // session duration uses same endpoint as sessions
         data = await this.fetchCountData(
@@ -166,6 +169,40 @@ class ReleaseStatsRequest extends React.Component<Props, State> {
     return {...transformedData, crashFreeTimeBreakdown: userResponse.usersBreakdown};
   };
 
+  fetchEventData = async () => {
+    const {api, orgId, location, selection, version} = this.props;
+    const {crashFreeTimeBreakdown} = this.state.data || {};
+    let userResponse, eventsCountResponse;
+
+    // we don't need to fetch crashFreeTimeBreakdown every time, because it does not change
+    if (crashFreeTimeBreakdown) {
+      eventsCountResponse = await fetchTotalCount(
+        api,
+        orgId,
+        getReleaseEventView(selection, version).getEventsAPIPayload(location)
+      );
+    } else {
+      [userResponse, eventsCountResponse] = await Promise.all([
+        api.requestPromise(this.statsPath, {
+          query: {
+            ...this.baseQueryParams,
+            type: YAxis.USERS,
+          },
+        }),
+        fetchTotalCount(
+          api,
+          orgId,
+          getReleaseEventView(selection, version).getEventsAPIPayload(location)
+        ),
+      ]);
+    }
+
+    const breakdown = userResponse?.usersBreakdown ?? crashFreeTimeBreakdown;
+    const chartSummary = eventsCountResponse.toLocaleString();
+
+    return {chartData: [], crashFreeTimeBreakdown: breakdown, chartSummary};
+  };
+
   get statsPath() {
     const {orgId, projectSlug, version} = this.props;
 
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/releaseStat.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/releaseStat.tsx
index 867d7b9222..ebc570fa25 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/releaseStat.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/releaseStat.tsx
@@ -27,6 +27,7 @@ const Label = styled('div')`
   text-transform: uppercase;
   color: ${p => p.theme.gray2};
   line-height: 1.3;
+  margin-bottom: ${space(0.25)};
 `;
 const Value = styled('div')`
   font-size: ${p => p.theme.fontSizeExtraLarge};
diff --git a/src/sentry/static/sentry/app/views/releasesV2/utils/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/utils/index.tsx
index f14b8ab6cd..dd8641638a 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/utils/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/utils/index.tsx
@@ -18,6 +18,10 @@ export const displayCrashFreePercent = (
   decimalThreshold = 95,
   decimalPlaces = 3
 ): string => {
+  if (isNaN(percent)) {
+    return '\u2015';
+  }
+
   if (percent < 1 && percent > 0) {
     return `<1%`;
   }
