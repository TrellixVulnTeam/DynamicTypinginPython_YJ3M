commit a1eaf96376bb39783136734d597978f69006b479
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 14 23:25:26 2012 -0800

    Improving documentation for install (quickstart now) and upgrade

diff --git a/docs/config/index.rst b/docs/config/index.rst
index 29d4bedcfa..0f667486cb 100644
--- a/docs/config/index.rst
+++ b/docs/config/index.rst
@@ -233,30 +233,6 @@ by visiting the plugin configuration page for that project.
 Services
 --------
 
-.. data:: sentry.conf.RUN_DIR
-    :noindex:
-
-    The location to store PID files for services.
-
-    Defaults to ``%SENTRY%/run/``.
-
-    ::
-
-        SENTRY_RUN_DIR = '/var/run/'
-
-.. data:: sentry.conf.LOG_FILE
-    :noindex:
-
-
-    The location to store log files for services.
-
-    Defaults to ``%SENTRY%/log/``.
-
-    ::
-
-        SENTRY_LOG_DIR = '/var/log/'
-
-
 Web Server
 ~~~~~~~~~~
 
diff --git a/docs/index.rst b/docs/index.rst
index b0be60e6cb..fbc59c7bed 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -12,7 +12,8 @@ Users Guide
 .. toctree::
    :maxdepth: 2
 
-   install/index
+   quickstart/index
+   upgrading/index
    config/index
    queue/index
    cli/index
diff --git a/docs/install/index.rst b/docs/install/index.rst
deleted file mode 100644
index 5600a8650c..0000000000
--- a/docs/install/index.rst
+++ /dev/null
@@ -1,148 +0,0 @@
-Install
-=======
-
-Sentry requires at least Django 1.2 (it will generally take care of this by itself),
-and Python 2.5. Currently Sentry does not work with Python 3.
-
-If you haven't already, start by downloading Sentry. The easiest way is with *pip*::
-
-	pip install sentry --upgrade
-
-Or with *setuptools*::
-
-	easy_install -U sentry
-
-You now have two choices:
-
-1. **(Recommended)** Run the server in a separate web instance to isolate your application.
-
-   The recommended setup for apps which have any kind of quality of service requirements.
-   Your Sentry server (web) application will run in its own environment which ensures the
-   most compatibility with your application, as well as ensuring it does not impact your
-   primary application servers.
-
-2. Run an integrated setup where your webapp runs both the Sentry client and server.
-
-   If you run on a single web server, or don't expect high load, this is the quickest
-   configuration to get up and running.
-
-Upgrading
----------
-
-**Always upgrade the Sentry server before upgrading your clients** unless
-the client states otherwise.
-
-Upgrading Sentry simply requires you to run migrations and restart your web services. We recommend
-you run the migrations from a separate install so that they can be completed before updating the
-code which runs the webserver.
-
-To run the migrations, simply run ``sentry upgrade`` in your environment.
-
-Upgrading from 1.x
-~~~~~~~~~~~~~~~~~~
-
-If you are upgrading Sentry from a 1.x version, you should take note that the database migrations
-are much more significant than they were in the past. We recommend performing them **before**
-upgrading the actual Sentry server.
-
-This includes several new tables (such as Project), and alters on almost all existing tables. It
-also means it needs to backfill the project_id column on all related tables.
-
-You should also read over the installation guide again, as some things have likely changed.
-
-Running a Sentry Server
------------------------
-
-The recommended configuration of Sentry involves setting up a separate web server to handle your error
-logging. This means that any number of Sentry clients simply pass on this information to your primary Sentry
-server. If you run into a situation where one of Sentry's requirements conflict with your own, or you simply
-need to ensure quality of service within your project, this is for you.
-
-.. note:: Currently the standalone Sentry server does not run on Windows.
-
-Initializing the Configuration
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-The first thing you're going to need to do is initialize your configuration (likely because you'll want to switch
-off of sqlite, which is the default database).
-
-To do this, you'll use the "init" command. You can specify an alternative configuration
-path as the argument to init, otherwise it will use the default of ``~/.sentry/sentry.conf.py``.
-
-::
-
-    # the path is optional
-    sentry init /etc/sentry.conf.py
-
-Running migrations
-~~~~~~~~~~~~~~~~~~
-
-Schema changes are handled via the ``upgrade`` command::
-
-    sentry upgrade
-
-The Built-in Server
-~~~~~~~~~~~~~~~~~~~
-
-Sentry provides a built-in webserver (powered by eventlet) to get you off the ground quickly.
-
-The CLI runner has three commands for controlling processes: start, stop, and restart. For example,
-to start the HTTP server, you can simply use "sentry start"::
-
-	# Sentry's server runs on port 9000 by default. Make sure your ``SENTRY_SERVERS`` settings reflects
-	# the correct host and port!
-	sentry start --config=/etc/sentry.conf.py
-
-The configuration for the server is based on ``sentry.conf.server``, which contains a basic Django project configuration, as well
-as the default Sentry configuration values. It will use SQLite for the database.::
-
-    # ~/.sentry/sentry.conf.py
-
-    DATABASES = {
-        'default': {
-            'ENGINE': 'django.db.backends.postgresql_psycopg2',
-            'NAME': 'sentry',
-            'USER': 'postgres',
-            'PASSWORD': '',
-            'HOST': '',
-            'PORT': '',
-        }
-    }
-
-    SENTRY_LOG_DIR= '/var/log/'
-    SENTRY_RUN_DIR= '/var/run/'
-    SENTRY_WEB_HOST = '0.0.0.0'
-    SENTRY_WEB_PORT = 9000
-    SENTRY_KEY = '0123456789abcde'
-
-By default, Sentry will look for ``~/.sentry/sentry.conf.py`` and load it if it exists, and ``--config`` is not passed. You
-may also set the ``SENTRY_CONFIG`` environment variable to override the default value of --config.
-
-Configuring a Proxy
-~~~~~~~~~~~~~~~~~~~
-
-By default, Sentry runs on port 9000. Even if you change this, under normal conditions you won't be able to bind to
-port 80. To get around this (and to avoid running Sentry as a privileged user, which you shouldn't), we recommend
-you setup a simple web proxy.
-
-Proxying with Apache
-````````````````````
-
-Apache requires the use of mod_proxy for forwarding requests::
-
-    ProxyPass / http://localhost:9000/
-    ProxyPassReverse / http://localhost:9000/
-
-Proxying with Nginx
-```````````````````
-
-You'll use the builtin HttpProxyModule within Nginx to handle proxying::
-
-    location / {
-      proxy_pass         http://localhost:9000;
-      proxy_redirect     off;
-
-      proxy_set_header   Host             $host;
-      proxy_set_header   X-Real-IP        $remote_addr;
-      proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
-    }
diff --git a/docs/quickstart/index.rst b/docs/quickstart/index.rst
new file mode 100644
index 0000000000..23ddfb322a
--- /dev/null
+++ b/docs/quickstart/index.rst
@@ -0,0 +1,163 @@
+Quickstart
+==========
+
+Sentry requires at least Django 1.2 (it will generally take care of this by itself),
+and Python 2.5. Currently Sentry does not work with Python 3.
+
+The recommended configuration of Sentry involves setting up a separate web server to handle your error
+logging. This means that any number of Sentry clients simply pass on this information to your primary Sentry
+server.
+
+This guide will step you through setting up a virtualenv, installing the required packages,
+and configuring the basic web service.
+
+Setting up a ``virtualenv``
+---------------------------
+
+The first thing you'll need is the Python ``virtualenv`` package. You probably already
+have this, but if not, you can install it with::
+
+  easy_install -U virtualenv
+
+Once that's done, choose a location for the environment, and create it with the ``virtualenv``
+command. For our guide, we're going to choose ``/www/sentry/``::
+
+  virtualenv /www/sentry/
+
+Finally, activate your virtualenv::
+
+  source /www/sentry/bin/activate
+
+.. note:: Activating the environment adjusts your PATH, so that things like easy_install now
+          install into the virtualenv by default.
+
+Install Sentry
+--------------
+
+Once you've got the environment setup, you can install Sentry and all it's dependencies with
+the same command you used to grab virtualenv::
+
+  easy_install -U sentry
+
+Don't be worried by the amount of dependencies Sentry has. We have a philosophy of using the right tools for
+the job, and not reinventing them if they already exist.
+
+Once everything's installed, you should be able to execute the Sentry CLI, via ``sentry``, and get something
+like the following::
+
+  $ sentry
+  usage: sentry [--config=/path/to/settings.py] [command] [options]
+
+Initializing the Configuration
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Now you're going to want to initialize your configuration from a template, likely because you'll want to switch
+off of sqlite, which is the default database.
+
+To do this, you'll use the ``init`` command. You can specify an alternative configuration
+path as the argument to init, otherwise it will use the default of ``~/.sentry/sentry.conf.py``.
+
+::
+
+    # the path is optional
+    sentry init /etc/sentry.conf.py
+
+The configuration for the server is based on ``sentry.conf.server``, which contains a basic Django project
+configuration, as well as the default Sentry configuration values. It will use SQLite for the database.::
+
+    # ~/.sentry/sentry.conf.py
+
+    DATABASES = {
+        'default': {
+            'ENGINE': 'django.db.backends.postgresql_psycopg2',  # We suggest PostgreSQL for optimal performance
+            'NAME': 'sentry',
+            'USER': 'postgres',
+            'PASSWORD': '',
+            'HOST': '',
+            'PORT': '',
+        }
+    }
+
+    SENTRY_WEB_HOST = '0.0.0.0'
+    SENTRY_WEB_PORT = 9000
+
+    # SENTRY_KEY is a unique randomly generated secret key for your server, and it
+    # acts as a signing token
+    SENTRY_KEY = '0123456789abcde'
+
+Running Migrations
+~~~~~~~~~~~~~~~~~~
+
+If you changed from the default SQLite database, make sure you start by creating the database Sentry
+is expecting. Once done, you can create the initial database using the ``upgrade`` command::
+
+    sentry upgrade
+
+All schema changes and database upgrades are handled via the ``upgrade`` command, and this is the first
+thing you'll want to run when upgrading to future versions of Sentry.
+
+.. note:: Internally, this uses `South <south.aeracode.org>`_ to manage migrations.
+
+Starting the Web Service
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+Sentry provides a built-in webserver (powered by gunicorn and eventlet) to get you off the ground quickly.
+
+To start the webserver, you simply use ``sentry start``. If you opted to use an alternative configuration path
+you can pass that via the --config option.
+
+  # Sentry's server runs on port 9000 by default. Make sure your client reflects
+  # the correct host and port!
+  sentry --config=/etc/sentry.conf.py start
+
+You should now be able to test the web service by visiting `http://localhost:9000/`.
+
+Configuring a Proxy
+~~~~~~~~~~~~~~~~~~~
+
+By default, Sentry runs on port 9000. Even if you change this, under normal conditions you won't be able to bind to
+port 80. To get around this (and to avoid running Sentry as a privileged user, which you shouldn't), we recommend
+you setup a simple web proxy.
+
+Proxying with Apache
+````````````````````
+
+Apache requires the use of mod_proxy for forwarding requests::
+
+    ProxyPass / http://localhost:9000/
+    ProxyPassReverse / http://localhost:9000/
+
+Proxying with Nginx
+```````````````````
+
+You'll use the builtin HttpProxyModule within Nginx to handle proxying::
+
+    location / {
+      proxy_pass         http://localhost:9000;
+      proxy_redirect     off;
+
+      proxy_set_header   Host             $host;
+      proxy_set_header   X-Real-IP        $remote_addr;
+      proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
+    }
+
+Running Sentry as a Service
+~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+We recommend using whatever software you are most familiar with for managing Sentry processes. For us, that software
+of choice is `Supervisor <http://supervisord.org/>`_.
+
+Configure ``supervisord``
+`````````````````````````
+
+Configuring Supervisor couldn't be more simple. Just point it to the ``sentry`` executable in your virtualenv's bin/
+folder and you're good to go.
+
+::
+
+  [program:sentry-web]
+  directory=/www/sentry/
+  command=/www/sentry/bin/sentry start http
+  autostart=true
+  autorestart=true
+  redirect_stderr=true
\ No newline at end of file
diff --git a/docs/upgrading/index.rst b/docs/upgrading/index.rst
new file mode 100644
index 0000000000..b8565407f4
--- /dev/null
+++ b/docs/upgrading/index.rst
@@ -0,0 +1,31 @@
+Upgrading
+=========
+
+**Always upgrade the Sentry server before upgrading your clients** unless
+the client states otherwise.
+
+Upgrading Sentry simply requires you to run migrations and restart your web services. We recommend
+you run the migrations from a separate install so that they can be completed before updating the
+code which runs the webserver.
+
+Generally, you'll start by installing the upgraded Sentry package::
+
+    easy_install -U sentry
+
+Continue by running all required migrations, with the upgrade command::
+
+    sentry upgrade
+
+Finally, restart any Sentry services you had running.
+
+Upgrading from 1.x
+~~~~~~~~~~~~~~~~~~
+
+If you are upgrading Sentry from a 1.x version, you should take note that the database migrations
+are much more significant than they were in the past. We recommend performing them **before**
+upgrading the actual Sentry server.
+
+This includes several new tables (such as Project), and alters on almost all existing tables. It
+also means it needs to backfill the project_id column on all related tables.
+
+You should also read over the installation guide again, as some things have likely changed.
\ No newline at end of file
