commit b2fc0d975a665e495eadc2a392c62d7fec7f6bf3
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Feb 13 14:48:27 2013 -0800

    Switch alerting variance to median absolute deviation

diff --git a/src/sentry/tasks/check_alerts.py b/src/sentry/tasks/check_alerts.py
index 53393c0385..f998385d97 100644
--- a/src/sentry/tasks/check_alerts.py
+++ b/src/sentry/tasks/check_alerts.py
@@ -33,12 +33,12 @@ Alert expiration threshold MUST be > MINUTE_NORMALIZATION.
 """
 from __future__ import division
 
-import math
 from datetime import timedelta
 from celery.task import periodic_task, task
 from celery.task.schedules import crontab
 from django.utils import timezone
 from sentry.constants import MINUTE_NORMALIZATION
+from sentry.utils import math
 
 
 def fsteps(start, stop, steps):
@@ -48,16 +48,6 @@ def fsteps(start, stop, steps):
         start += step
 
 
-def meanstdv(x):
-    n, mean, std = len(x), 0, 0
-    for a in x:
-        mean = mean + a
-    mean = mean / float(n)
-    for a in x:
-        std = std + (a - mean) ** 2
-    std = math.sqrt(std / float(n - 1))
-    return mean, std
-
 
 @periodic_task(ignore_result=True, run_every=crontab(minute='*'))
 def check_alerts(**kwargs):
@@ -127,8 +117,9 @@ def check_project_alerts(project_id, when, count, **kwargs):
     if len(data) != intervals:
         return
 
-    mean, stddev = meanstdv(data)
-    previous = (mean + stddev * 2) / MINUTE_NORMALIZATION
+    mean = math.mean(data)
+    variance = math.mad(data)
+    previous = (mean + variance * 2) / MINUTE_NORMALIZATION
 
     pct_increase = count / previous * 100
     if pct_increase > threshold:
diff --git a/src/sentry/utils/math.py b/src/sentry/utils/math.py
new file mode 100644
index 0000000000..e413bea30c
--- /dev/null
+++ b/src/sentry/utils/math.py
@@ -0,0 +1,37 @@
+"""
+sentry.utils.math
+~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, division
+
+import math
+
+def mean(values):
+    return sum(values) / len(values)
+
+
+def stddev(values, mean_=None):
+    if mean_ is None:
+        mean_ = mean(values)
+
+    n = 0
+    for val in values:
+        n += (val - mean_) ** 2
+    n = math.sqrt(n / float(len(values) - 1))
+    return n
+
+
+def median(values):
+    values = sorted(values)
+    size = len(values)
+    if size % 2 == 1:
+        return values[int((size - 1) / 2)]
+    return (values[int(size / 2 - 1)] + values[int(size / 2)]) / 2
+
+
+def mad(values, K=1.4826):
+    # http://en.wikipedia.org/wiki/Median_absolute_deviation
+    return K * median([abs(val - median(values)) for val in values])
