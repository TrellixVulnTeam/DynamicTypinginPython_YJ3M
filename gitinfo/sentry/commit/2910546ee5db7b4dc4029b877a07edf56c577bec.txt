commit 2910546ee5db7b4dc4029b877a07edf56c577bec
Author: evanh <evanh@users.noreply.github.com>
Date:   Fri Feb 7 09:21:54 2020 -0500

    feat(discover2) Add issue as a field/filter in discover (#16822)
    
    Hide the issue.id in the fields selection, and add issue, which corresponds to
    the short ID of an issue. Surface those in the table, as well as allow filtering
    on the short ID.

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index f17d2cb6df..01ad6a2556 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -20,6 +20,7 @@ from sentry.snuba import discover
 from sentry.utils import snuba
 from sentry.utils.http import absolute_uri
 from sentry.models.project import Project
+from sentry.models.group import Group
 
 logger = logging.getLogger(__name__)
 
@@ -123,9 +124,10 @@ class OrganizationEventsV2Endpoint(OrganizationEventsEndpointBase):
         except OrganizationEventsError as exc:
             raise ParseError(detail=six.text_type(exc))
         except NoProjects:
-
             return Response([])
 
+        params["organization_id"] = organization.id
+
         has_global_views = features.has(
             "organizations:global-views", organization, actor=request.user
         )
@@ -229,9 +231,23 @@ class OrganizationEventsV2Endpoint(OrganizationEventsEndpointBase):
                 if tests["trace"]:
                     row["trace"] = uuid.UUID(row["trace"]).hex
 
+        fields = request.GET.getlist("field")
+        issues = {}
+        if "issue" in fields:  # Look up the short ID and return that in the results
+            issue_ids = set(row["issue.id"] for row in results)
+            issues = {
+                i.id: i.qualified_short_id
+                for i in Group.objects.filter(
+                    id__in=issue_ids, project_id__in=project_ids, project__organization=organization
+                )
+            }
+            for result in results:
+                if "issue.id" in result:
+                    result["issue"] = issues[result["issue.id"]]
+
         if not ("project.id" in first_row or "projectid" in first_row):
             return results
-        fields = request.GET.getlist("field")
+
         projects = {
             p["id"]: p["slug"]
             for p in Project.objects.filter(organization=organization, id__in=project_ids).values(
diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 0aad694a25..a728f4a310 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -16,6 +16,7 @@ from sentry_relay.consts import SPAN_STATUS_NAME_TO_CODE
 
 from sentry import eventstore
 from sentry.models import Project
+from sentry.models.group import Group
 from sentry.search.utils import (
     parse_datetime_range,
     parse_datetime_string,
@@ -790,6 +791,17 @@ def get_filter(query=None, params=None):
             elif name == "issue.id" and term.value.value != "":
                 # A blank term value means that this is a has filter
                 kwargs["group_ids"].extend(to_list(term.value.value))
+            elif name == "issue" and term.value.value != "":
+                if params and "organization_id" in params:
+                    try:
+                        group = Group.objects.by_qualified_short_id(
+                            params["organization_id"], term.value.value
+                        )
+                        kwargs["group_ids"].extend(to_list(group.id))
+                    except Exception:
+                        raise InvalidSearchQuery(
+                            u"Invalid value '{}' for 'issue:' filter".format(term.value.value)
+                        )
             elif name in FIELD_ALIASES:
                 converted_filter = convert_aggregate_filter_to_snuba_query(term, True)
                 if converted_filter:
@@ -828,6 +840,7 @@ FIELD_ALIASES = {
     "last_seen": {"aggregations": [["max", "timestamp", "last_seen"]]},
     "latest_event": {"aggregations": [["argMax", ["id", "timestamp"], "latest_event"]]},
     "project": {"fields": ["project.id"]},
+    "issue": {"fields": ["issue.id"]},
     "user": {"fields": ["user.id", "user.username", "user.email", "user.ip"]},
     # Long term these will become more complex functions but these are
     # field aliases.
diff --git a/src/sentry/static/sentry/app/views/discover/data.tsx b/src/sentry/static/sentry/app/views/discover/data.tsx
index 52954679fe..a141d011c3 100644
--- a/src/sentry/static/sentry/app/views/discover/data.tsx
+++ b/src/sentry/static/sentry/app/views/discover/data.tsx
@@ -90,7 +90,7 @@ export const COLUMNS = [
   {name: 'stack.stack_level', type: TYPES.NUMBER},
 ];
 
-export const NON_SNUBA_FIELDS = ['project.name'];
+export const NON_SNUBA_FIELDS = ['project.name', 'issue'];
 
 export const NON_CONDITIONS_FIELDS = [...NON_SNUBA_FIELDS, 'project.id'];
 
diff --git a/src/sentry/static/sentry/app/views/discover/queryBuilder.tsx b/src/sentry/static/sentry/app/views/discover/queryBuilder.tsx
index 323b6f1382..53a10769d0 100644
--- a/src/sentry/static/sentry/app/views/discover/queryBuilder.tsx
+++ b/src/sentry/static/sentry/app/views/discover/queryBuilder.tsx
@@ -21,7 +21,7 @@ const API_LIMIT = 10000;
 
 const DEFAULTS = {
   projects: [],
-  fields: ['id', 'issue.id', 'project.name', 'platform', 'timestamp'],
+  fields: ['id', 'issue', 'project.name', 'platform', 'timestamp'],
   conditions: [],
   aggregations: [],
   orderby: '-timestamp',
diff --git a/src/sentry/static/sentry/app/views/eventsV2/data.tsx b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
index 8051270a6a..b31287b7e6 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/data.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
@@ -9,6 +9,7 @@ import getDynamicText from 'app/utils/getDynamicText';
 import pinIcon from 'app/../images/graph/icon-location-filled.svg';
 import {Organization, NewQuery} from 'app/types';
 import Duration from 'app/components/duration';
+import ShortId from 'app/components/shortId';
 import floatFormat from 'app/utils/floatFormat';
 
 import {Container, NumberContainer, OverflowLink, StyledDateTime} from './styles';
@@ -195,6 +196,7 @@ type SpecialFields = {
   user: SpecialField;
   last_seen: SpecialField;
   'issue.id': SpecialField;
+  issue: SpecialField;
 };
 
 /**
@@ -216,6 +218,19 @@ export const SPECIAL_FIELDS: SpecialFields = {
       );
     },
   },
+  issue: {
+    sortField: 'issue',
+    renderFunc: (data, {organization}) => {
+      const target = `/organizations/${organization.slug}/issues/${data['issue.id']}/`;
+      return (
+        <Container>
+          <OverflowLink to={target} aria-label={data['issue.id']}>
+            <ShortId shortId={`${data.issue}`} />
+          </OverflowLink>
+        </Container>
+      );
+    },
+  },
   project: {
     sortField: null,
     renderFunc: (data, {organization}) => {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
index 7691e3fcd6..56e4487816 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
@@ -80,7 +80,7 @@ export const FIELDS = {
   project: 'string',
   environment: 'string',
   release: 'string',
-  'issue.id': 'string',
+  issue: 'string',
 
   message: 'string',
   location: 'string',
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index a5e1b45507..18b72e45b1 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -1011,7 +1011,7 @@ class GetSnubaQueryArgsTest(TestCase):
         with pytest.raises(InvalidSearchQuery):
             get_filter("(user.email:foo@example.com OR user.email:bar@example.com")
 
-    def test_issue_filter(self):
+    def test_issue_id_filter(self):
         filter = get_filter("issue.id:1")
         assert not filter.conditions
         assert filter.filter_keys == {"group_id": [1]}
@@ -1027,6 +1027,12 @@ class GetSnubaQueryArgsTest(TestCase):
         assert filter.filter_keys == {"group_id": [1]}
         assert filter.group_ids == [1]
 
+    def test_issue_filter(self):
+        with pytest.raises(InvalidSearchQuery) as err:
+            get_filter("issue:1", {"organization_id": 1})
+        assert "Invalid value '" in six.text_type(err)
+        assert "' for 'issue:' filter" in six.text_type(err)
+
     def test_environment_param(self):
         params = {"environment": ["", "prod"]}
         filter = get_filter("", params)
@@ -1182,11 +1188,12 @@ class ResolveFieldListTest(unittest.TestCase):
         assert result["groupby"] == []
 
     def test_field_alias_expansion(self):
-        fields = ["title", "last_seen", "latest_event", "project", "user", "message"]
+        fields = ["title", "last_seen", "latest_event", "project", "issue", "user", "message"]
         result = resolve_field_list(fields, {})
         assert result["selected_columns"] == [
             "title",
             "project.id",
+            "issue.id",
             "user.id",
             "user.username",
             "user.email",
@@ -1200,6 +1207,7 @@ class ResolveFieldListTest(unittest.TestCase):
         assert result["groupby"] == [
             "title",
             "project.id",
+            "issue.id",
             "user.id",
             "user.username",
             "user.email",
diff --git a/tests/sentry/discover/test_utils.py b/tests/sentry/discover/test_utils.py
index 9dacca6254..85796651ac 100644
--- a/tests/sentry/discover/test_utils.py
+++ b/tests/sentry/discover/test_utils.py
@@ -67,9 +67,13 @@ class TransformAliasesAndQueryTest(SnubaTestCase, TestCase):
             orderby=["time"],
             rollup=3600,
         )
-        data = result["data"]
-        assert isinstance(data[-1]["time"], int)
-        assert data[-1]["count"] == 1
+
+        # If the date range spans across two hours, then one row will have results
+        # and the other one won't.
+        for row in result["data"]:
+            assert isinstance(row["time"], int)
+            if "count" in row:
+                assert row["count"] == 1
 
     def test_conversion_of_release_filter_key(self):
         result = transform_aliases_and_query(
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 81b2e70522..dd25416d8e 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -953,3 +953,97 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
         assert len(response.data["data"]) == 1
         assert response.data["meta"]["trace"] == "string"
         assert response.data["data"][0]["trace"] == data["contexts"]["trace"]["trace_id"]
+
+    def test_issue_in_columns(self):
+        self.login_as(user=self.user)
+
+        project1 = self.create_project()
+        project2 = self.create_project()
+        event1 = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "transaction": "/example",
+                "message": "how to make fast",
+                "timestamp": self.two_min_ago,
+                "fingerprint": ["group_1"],
+            },
+            project_id=project1.id,
+        )
+        event2 = self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "transaction": "/example",
+                "message": "how to make fast",
+                "timestamp": self.two_min_ago,
+                "fingerprint": ["group_1"],
+            },
+            project_id=project2.id,
+        )
+
+        with self.feature(
+            {"organizations:discover-basic": True, "organizations:global-views": True}
+        ):
+            response = self.client.get(
+                self.url, format="json", data={"field": ["id", "issue"], "orderby": ["id"]}
+            )
+
+        assert response.status_code == 200, response.content
+        data = response.data["data"]
+        assert len(data) == 2
+        assert data[0]["id"] == event1.event_id
+        assert data[0]["issue.id"] == event1.group_id
+        assert data[0]["issue"] == event1.group.qualified_short_id
+        assert data[1]["id"] == event2.event_id
+        assert data[1]["issue.id"] == event2.group_id
+        assert data[1]["issue"] == event2.group.qualified_short_id
+
+    def test_issue_in_search_and_columns(self):
+        self.login_as(user=self.user)
+
+        project1 = self.create_project()
+        project2 = self.create_project()
+        event1 = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "transaction": "/example",
+                "message": "how to make fast",
+                "timestamp": self.two_min_ago,
+                "fingerprint": ["group_1"],
+            },
+            project_id=project1.id,
+        )
+        self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "transaction": "/example",
+                "message": "how to make fast",
+                "timestamp": self.two_min_ago,
+                "fingerprint": ["group_1"],
+            },
+            project_id=project2.id,
+        )
+
+        tests = [
+            ("issue", "issue:%s" % event1.group.qualified_short_id),
+            ("issue.id", "issue:%s" % event1.group.qualified_short_id),
+            ("issue", "issue.id:%s" % event1.group_id),
+            ("issue.id", "issue.id:%s" % event1.group_id),
+        ]
+
+        with self.feature(
+            {"organizations:discover-basic": True, "organizations:global-views": True}
+        ):
+            for testdata in tests:
+                response = self.client.get(
+                    self.url, format="json", data={"field": [testdata[0]], "query": testdata[1]}
+                )
+
+                assert response.status_code == 200, response.content
+                data = response.data["data"]
+                assert len(data) == 1
+                assert data[0]["id"] == event1.event_id
+                assert data[0]["issue.id"] == event1.group_id
+                if testdata[0] == "issue":
+                    assert data[0]["issue"] == event1.group.qualified_short_id
+                else:
+                    assert data[0].get("issue", None) is None
