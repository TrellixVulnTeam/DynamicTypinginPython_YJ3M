commit 223c15dc197eeb2ef1941e62b4bb86c0de556050
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Jul 18 11:28:03 2018 -0700

    fix(stream): Fix direct event search to include matched env (#9061)
    
    When using stream search to search for an eventId, if direct result was found and the event matches as specific environment, set matched environment as active
    environment before redirecting to found group

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index d9385e3443..2fd8f9425a 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -323,6 +323,8 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
                             event_id=query, project_id=project.id)
                     except Event.DoesNotExist:
                         pass
+                    else:
+                        Event.objects.bind_nodes([matching_event], 'data')
 
             # If the query looks like a short id, we want to provide some
             # information about where that is.  Note that this can return
@@ -337,10 +339,18 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
                     matching_group = None
 
             if matching_group is not None:
+                matching_event_environment = None
+
+                try:
+                    matching_event_environment = matching_event.get_environment().name if matching_event else None
+                except Environment.DoesNotExist:
+                    pass
+
                 response = Response(
                     serialize(
                         [matching_group], request.user, serializer(
                             matching_event_id=getattr(matching_event, 'id', None),
+                            matching_event_environment=matching_event_environment,
                         )
                     )
                 )
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index c42d2a8d15..f4228eddd8 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -371,7 +371,7 @@ class StreamGroupSerializer(GroupSerializer):
         '24h': StatsPeriod(24, timedelta(hours=1)),
     }
 
-    def __init__(self, environment_func=None, stats_period=None, matching_event_id=None):
+    def __init__(self, environment_func=None, stats_period=None, matching_event_id=None, matching_event_environment=None):
         super(StreamGroupSerializer, self).__init__(environment_func)
 
         if stats_period is not None:
@@ -379,6 +379,7 @@ class StreamGroupSerializer(GroupSerializer):
 
         self.stats_period = stats_period
         self.matching_event_id = matching_event_id
+        self.matching_event_environment = matching_event_environment
 
     def get_attrs(self, item_list, user):
         attrs = super(StreamGroupSerializer, self).get_attrs(item_list, user)
@@ -426,6 +427,9 @@ class StreamGroupSerializer(GroupSerializer):
         if self.matching_event_id:
             result['matchingEventId'] = self.matching_event_id
 
+        if self.matching_event_environment:
+            result['matchingEventEnvironment'] = self.matching_event_environment
+
         return result
 
 
diff --git a/src/sentry/static/sentry/app/actionCreators/environments.jsx b/src/sentry/static/sentry/app/actionCreators/environments.jsx
index 6aa296dab8..34f4767f8f 100644
--- a/src/sentry/static/sentry/app/actionCreators/environments.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/environments.jsx
@@ -1,9 +1,17 @@
 import EnvironmentActions from 'app/actions/environmentActions';
+import EnvironmentStore from 'app/stores/environmentStore';
 
 export function setActiveEnvironment(environment) {
   EnvironmentActions.setActive(environment);
 }
 
+export function setActiveEnvironmentName(name) {
+  let environment = EnvironmentStore.getByName(name);
+
+  if (!environment) return;
+  setActiveEnvironment(environment);
+}
+
 export function clearActiveEnvironment() {
   EnvironmentActions.clearActive();
 }
diff --git a/src/sentry/static/sentry/app/views/stream/stream.jsx b/src/sentry/static/sentry/app/views/stream/stream.jsx
index 3967443621..4dca34dcba 100644
--- a/src/sentry/static/sentry/app/views/stream/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream/stream.jsx
@@ -1,36 +1,39 @@
+import {Link, browserHistory} from 'react-router';
+import {omit, isEqual} from 'lodash';
+import Cookies from 'js-cookie';
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
-import {Link, browserHistory} from 'react-router';
-import Cookies from 'js-cookie';
 import classNames from 'classnames';
+import createReactClass from 'create-react-class';
 import qs from 'query-string';
-import {omit, isEqual} from 'lodash';
 
-import analytics from 'app/utils/analytics';
-import SentryTypes from 'app/sentryTypes';
+import {Panel, PanelBody} from 'app/components/panels';
+import {logAjaxError} from 'app/utils/logging';
+import {
+  setActiveEnvironment,
+  setActiveEnvironmentName,
+} from 'app/actionCreators/environments';
+import {t, tn, tct} from 'app/locale';
 import ApiMixin from 'app/mixins/apiMixin';
 import ConfigStore from 'app/stores/configStore';
-import GroupStore from 'app/stores/groupStore';
 import EnvironmentStore from 'app/stores/environmentStore';
 import ErrorRobot from 'app/components/errorRobot';
+import GroupStore from 'app/stores/groupStore';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
-import ProjectState from 'app/mixins/projectState';
 import Pagination from 'app/components/pagination';
-import StreamGroup from 'app/components/stream/group';
+import ProjectState from 'app/mixins/projectState';
+import SentryTypes from 'app/sentryTypes';
 import StreamActions from 'app/views/stream/actions';
 import StreamFilters from 'app/views/stream/filters';
+import StreamGroup from 'app/components/stream/group';
 import StreamSidebar from 'app/views/stream/sidebar';
 import TimeSince from 'app/components/timeSince';
-import utils from 'app/utils';
-import queryString from 'app/utils/queryString';
-import {logAjaxError} from 'app/utils/logging';
+import analytics from 'app/utils/analytics';
 import parseLinkHeader from 'app/utils/parseLinkHeader';
-import {t, tn, tct} from 'app/locale';
-import {setActiveEnvironment} from 'app/actionCreators/environments';
-import {Panel, PanelBody} from 'app/components/panels';
+import queryString from 'app/utils/queryString';
+import utils from 'app/utils';
 
 const MAX_ITEMS = 25;
 const DEFAULT_SORT = 'date';
@@ -384,15 +387,21 @@ const Stream = createReactClass({
         // the current props one as the shortIdLookup can return results for
         // different projects.
         if (jqXHR.getResponseHeader('X-Sentry-Direct-Hit') === '1') {
-          if (data[0].matchingEventId) {
-            return void browserHistory.push(
-              `/${this.props.params.orgId}/${data[0].project.slug}/issues/${data[0]
-                .id}/events/${data[0].matchingEventId}/`
-            );
+          if (data && data[0].matchingEventId) {
+            let {project, id, matchingEventId, matchingEventEnvironment} = data[0];
+            let redirect = `/${this.props.params
+              .orgId}/${project.slug}/issues/${id}/events/${matchingEventId}/`;
+            // Also direct to the environment of this specific event if this
+            // key exists. We need to explicitly check against undefined becasue
+            // an environment name may be an empty string, which is perfectly valid.
+            if (typeof matchingEventEnvironment !== 'undefined') {
+              setActiveEnvironmentName(matchingEventEnvironment);
+              redirect = `${redirect}?${qs.stringify({
+                environment: matchingEventEnvironment,
+              })}`;
+            }
+            return void browserHistory.push(redirect);
           }
-          return void browserHistory.push(
-            `/${this.props.params.orgId}/${data[0].project.slug}/issues/${data[0].id}/`
-          );
         }
 
         this._streamManager.push(data);
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 6b49f21c5b..83fed5c4a2 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -197,12 +197,30 @@ class GroupListTest(APITestCase):
         )
 
         self.login_as(user=self.user)
+
         response = self.client.get('{}?query={}'.format(self.path, 'c' * 32), format='json')
         assert response.status_code == 200
         assert len(response.data) == 1
         assert response.data[0]['id'] == six.text_type(group.id)
         assert response.data[0]['matchingEventId'] == event.id
 
+    def test_lookup_by_event_with_matching_environment(self):
+        project = self.project
+        project.update_option('sentry:resolve_age', 1)
+        self.create_environment(name="test", project=project)
+        group = self.create_group(checksum='a' * 32)
+        self.create_group(checksum='b' * 32)
+        event_id = 'c' * 32
+        event = self.create_event(project_id=self.project.id, group=group, event_id=event_id, tags={'environment': 'test'})
+        self.login_as(user=self.user)
+
+        response = self.client.get('{}?query={}&environment=test'.format(self.path, 'c' * 32), format='json')
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == six.text_type(group.id)
+        assert response.data[0]['matchingEventId'] == event.id
+        assert response.data[0]['matchingEventEnvironment'] == 'test'
+
     def test_lookup_by_event_id_with_whitespace(self):
         project = self.project
         project.update_option('sentry:resolve_age', 1)
