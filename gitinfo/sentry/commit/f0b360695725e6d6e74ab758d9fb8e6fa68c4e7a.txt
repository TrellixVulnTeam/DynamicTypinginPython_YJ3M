commit f0b360695725e6d6e74ab758d9fb8e6fa68c4e7a
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Aug 20 10:45:31 2018 -0700

    fix(discover): Better error message for no projects (#9351)

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index 788b2a411b..012a5d7aed 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -81,8 +81,8 @@ export default class OrganizationDiscover extends React.Component {
           )}`,
         });
       },
-      () => {
-        addErrorMessage(t('An error occurred'));
+      errMessage => {
+        addErrorMessage(errMessage);
         this.setState({result: null, isFetchingQuery: false});
       }
     );
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
index d11102e0a1..9d505076f5 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
@@ -3,6 +3,7 @@
 import moment from 'moment-timezone';
 
 import {Client} from 'app/api';
+import {t} from 'app/locale';
 import {COLUMNS, PROMOTED_TAGS} from './data';
 import {isValidAggregation} from './aggregations/utils';
 
@@ -168,10 +169,21 @@ export default function createQueryBuilder(initial = {}, organization) {
     const api = new Client();
     const endpoint = `/organizations/${organization.slug}/discover/`;
 
-    return api.requestPromise(endpoint, {
-      method: 'POST',
-      data: data || getExternal(),
-    });
+    data = data || getExternal();
+
+    // Reject immediately if no projects are available
+    if (!data.projects.length) {
+      return Promise.reject(t('No projects selected'));
+    }
+
+    return api
+      .requestPromise(endpoint, {
+        method: 'POST',
+        data,
+      })
+      .catch(() => {
+        throw new Error(t('An error occurred'));
+      });
   }
 
   /**
diff --git a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
index 5518c696d0..5ea963c501 100644
--- a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
@@ -88,6 +88,42 @@ describe('Query Builder', function() {
     });
   });
 
+  describe('fetch()', function() {
+    let queryBuilder, discoverMock;
+
+    beforeEach(function() {
+      queryBuilder = createQueryBuilder(
+        {},
+        TestStubs.Organization({projects: [TestStubs.Project()]})
+      );
+      discoverMock = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/discover/',
+        method: 'POST',
+      });
+    });
+
+    afterEach(function() {
+      MockApiClient.clearMockResponses();
+    });
+
+    it('makes request', async function() {
+      const data = {projects: [1], fields: ['event_id']};
+      await queryBuilder.fetch(data);
+      expect(discoverMock).toHaveBeenCalledWith(
+        '/organizations/org-slug/discover/',
+        expect.objectContaining({
+          data,
+        })
+      );
+    });
+
+    it('handles no projects', async function() {
+      const result = queryBuilder.fetch({projects: []});
+      await expect(result).rejects.toEqual('No projects selected');
+      expect(discoverMock).not.toHaveBeenCalled();
+    });
+  });
+
   describe('updateField()', function() {
     let queryBuilder;
     beforeEach(function() {
