commit b1c836b543717e7a1c261b1b29a0547fabdb311d
Author: Dena Mwangi <dena@getsentry.com>
Date:   Tue Sep 12 09:48:20 2017 -0700

    Onboarding widget (#6069)
    
    ref: Update onboarding widget
    
    Shorten list of tasks, add detailed descriptions on mouse over  and update project chooser component to redirect if there are no projects or only one project exists.

diff --git a/src/sentry/static/sentry/app/components/onboardingWizard/confirmation.jsx b/src/sentry/static/sentry/app/components/onboardingWizard/confirmation.jsx
new file mode 100644
index 0000000000..fdb91caa23
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/onboardingWizard/confirmation.jsx
@@ -0,0 +1,34 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import {t} from '../../locale';
+
+const Confirmation = React.createClass({
+  propTypes: {
+    onSkip: PropTypes.func.isRequired,
+    dismiss: PropTypes.func.isRequired
+  },
+
+  skip: function(e) {
+    e.preventDefault();
+    this.props.onSkip();
+  },
+
+  render: function() {
+    return (
+      <div className="ob-confirmation" onClick={this.props.dismiss}>
+        <h3>{t('Need help?')}</h3>
+        <p>
+          <a href="mailto:support@sentry.io?subject=Help with onboarding">
+            {t('Ask us!')}
+          </a>
+          {' '}
+          Â·
+          {' '}
+          <a onClick={this.skip}>{t('Skip')}</a>
+        </p>
+      </div>
+    );
+  }
+});
+
+export default Confirmation;
diff --git a/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx b/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx
new file mode 100644
index 0000000000..3a468970ef
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx
@@ -0,0 +1,135 @@
+import moment from 'moment';
+import PropTypes from 'prop-types';
+import React from 'react';
+import classNames from 'classnames';
+import {t, tct} from '../../locale';
+
+import OrganizationState from '../../mixins/organizationState';
+import Confirmation from './confirmation';
+
+const TodoItem = React.createClass({
+  propTypes: {
+    task: PropTypes.object.isRequired,
+    onSkip: PropTypes.func.isRequired
+  },
+
+  mixins: [OrganizationState],
+
+  getInitialState: function() {
+    return {
+      showConfirmation: false,
+      isExpanded: false
+    };
+  },
+
+  toggleDescription() {
+    this.setState({isExpanded: !this.state.isExpanded});
+  },
+
+  toggleConfirmation: function() {
+    this.setState({showConfirmation: !this.state.showConfirmation});
+  },
+
+  formatDescription: function() {
+    return (
+      <p>
+        {this.props.task.description}
+        {' '}
+        {this.state.isExpanded && '. ' + this.props.task.detailedDescription}
+      </p>
+    );
+  },
+
+  learnMoreUrlCreator: function() {
+    let org = this.getOrganization();
+    let learnMoreUrl;
+    if (this.props.task.featureLocation === 'project') {
+      learnMoreUrl = `/organizations/${org.slug}/projects/choose/?onboarding=1&task=${this.props.task.task}`;
+    } else if (this.props.task.featureLocation === 'organization') {
+      learnMoreUrl = `/organizations/${org.slug}/${this.props.task.location}`;
+    } else if (this.props.task.featureLocation === 'absolute') {
+      learnMoreUrl = this.props.task.location;
+    } else {
+      Raven.captureMessage('No learnMoreUrl created for this featureLocation ', {
+        extra: {props: this.props, state: this.state}
+      });
+    }
+    return learnMoreUrl;
+  },
+
+  skip: function(task) {
+    this.props.onSkip(task);
+    this.setState({showConfirmation: false});
+  },
+
+  render: function() {
+    let learnMoreUrl = this.learnMoreUrlCreator();
+    let description;
+
+    switch (this.props.task.status) {
+      case 'complete':
+        description = tct('[user] completed [dateCompleted]', {
+          user: this.props.task.user,
+          dateCompleted: moment(this.props.task.dateCompleted).fromNow()
+        });
+        break;
+      case 'pending':
+        description = tct('[user] kicked off [dateCompleted]', {
+          user: this.props.task.user,
+          dateCompleted: moment(this.props.task.dateCompleted).fromNow()
+        });
+        break;
+      case 'skipped':
+        description = tct('[user] skipped [dateCompleted]', {
+          user: this.props.task.user,
+          dateCompleted: moment(this.props.task.dateCompleted).fromNow()
+        });
+        break;
+      default:
+        description = this.formatDescription();
+    }
+
+    let classes = classNames(this.props.className, this.props.task.status, {
+      blur: this.state.showConfirmation
+    });
+
+    let showSkipButton =
+      this.props.task.skippable &&
+      this.props.task.status != 'skipped' &&
+      this.props.task.status != 'complete' &&
+      !this.state.showConfirmation;
+
+    return (
+      <li
+        className={classes}
+        onMouseOver={this.toggleDescription}
+        onMouseOut={this.toggleDescription}>
+        {this.props.task.status == 'pending' && <div className="pending-bar" />}
+        <div className="todo-content">
+          <div className="ob-checkbox">
+            {this.props.task.status == 'complete' && <span className="icon-checkmark" />}
+            {this.props.task.status == 'skipped' && <span className="icon-x" />}
+            {this.props.task.status == 'pending' && <span className="icon-ellipsis" />}
+          </div>
+          <a href={learnMoreUrl}><h4>{this.props.task.title}</h4></a>
+          <div>
+            {description}
+          </div>
+
+          {showSkipButton &&
+            <a className="skip-btn btn btn-default" onClick={this.toggleConfirmation}>
+              {t('Skip')}
+            </a>}
+        </div>
+        {this.state.showConfirmation &&
+          <Confirmation
+            task={this.props.task.task}
+            onSkip={() => this.skip(this.props.task.task)}
+            dismiss={this.toggleConfirmation}
+          />}
+      </li>
+    );
+  }
+});
+
+export default TodoItem;
diff --git a/src/sentry/static/sentry/app/components/onboardingWizard/todos.jsx b/src/sentry/static/sentry/app/components/onboardingWizard/todos.jsx
new file mode 100644
index 0000000000..b420114e8b
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/onboardingWizard/todos.jsx
@@ -0,0 +1,191 @@
+import React from 'react';
+import {t} from '../../locale';
+
+import ApiMixin from '../../mixins/apiMixin';
+import OrganizationState from '../../mixins/organizationState';
+import TodoItem from './toDoItem';
+
+const TodoList = React.createClass({
+  mixins: [ApiMixin, OrganizationState],
+  statics: {
+    TASKS: [
+      {
+        task: 1,
+        title: t('Create a project'),
+        description: t('Create your first Sentry project'),
+        detailedDescription: t(
+          'Follow our quick and easy steps to set up a project and start sending errors'
+        ),
+        skippable: false,
+        prereq: [],
+        featureLocation: 'organization',
+        location: 'projects/new/'
+      },
+      {
+        task: 2,
+        title: t('Send your first event'),
+        description: t("Install Sentry's client"),
+        detailedDescription: t('Choose your platform and send an event'),
+        skippable: false,
+        prereq: [1],
+        featureLocation: 'project',
+        location: 'settings/install/'
+      },
+      {
+        task: 3,
+        title: t('Invite team member'),
+        description: t('Bring your team aboard'),
+        detailedDescription: t(
+          `Let Sentry help your team triage and assign issues. Improve your workflow
+          by unlocking suggested owners, mentions, and assignment`
+        ),
+        skippable: true,
+        prereq: [],
+        featureLocation: 'organization',
+        location: 'members/'
+      },
+      {
+        task: 4,
+        title: t('Add a second platform'),
+        description: t('Add Sentry to a second platform'),
+        detailedDescription: t(
+          'Cross platform functionality to support both your frontend and backend.'
+        ),
+        skippable: true,
+        prereq: [1, 2],
+        featureLocation: 'organization',
+        location: 'projects/new/'
+      },
+      {
+        task: 5,
+        title: t('Add user context'),
+        description: t('Know who is being affected by crashes'),
+        detailedDescription: t(
+          `Unlock features that let you 
+          drill down into the number of users affected by an issue as well as get a broader sense about the quality of the application.`
+        ),
+        skippable: true,
+        prereq: [1, 2],
+        featureLocation: 'absolute',
+        location: 'https://docs.sentry.io/hosted/learn/context/#capturing-the-user'
+      },
+      {
+        task: 6,
+        title: t('Set up release tracking'),
+        description: t('See what releases are generating errors'),
+        detailedDescription: t(
+          `Set up commits for additional context when determining the cause of an issue 
+          e.g. suggested owners and resolve issues via commit messages`
+        ),
+        skippable: true,
+        prereq: [1, 2],
+        featureLocation: 'project',
+        location: 'settings/release-tracking/'
+      },
+      {
+        task: 7,
+        title: t('Upload sourcemaps'),
+        description: t('Deminify javascript stacktraces'),
+        detailedDescription: t(
+          `View source code context obtained from stack traces in their
+          original untransformed form, which is particularly useful for debugging minified code`
+        ),
+        skippable: true,
+        prereq: [1, 2], // Is one of the platforms javascript?
+        featureLocation: 'absolute',
+        location: 'https://docs.sentry.io/hosted/clients/javascript/sourcemaps/'
+      }
+      // {
+      //   'task': 8,
+      //   'title': 'User crash reports',
+      //   'description': 'Collect user feedback when your application crashes',
+      //   'skippable': false,
+      //   'prereq': [1, 2, 5],
+      //   'featureLocation': 'project',
+      //   'location': 'settings/user-reports/'
+      // },
+      // {
+      //   task: 9,
+      //   title: t('Set up issue tracking'),
+      //   description: t('Link to Sentry issues within your issue tracker'),
+      //   skippable: true,
+      //   prereq: [1, 2],
+      //   featureLocation: 'project',
+      //   location: 'settings/issue-tracking/'
+      // }
+      // {
+      //   task: 10,
+      //   title: t('Set up an alerts service'),
+      //   description: t('Receive Sentry alerts in Slack or HipChat'),
+      //   skippable: true,
+      //   prereq: [1, 2],
+      //   featureLocation: 'project',
+      //   location: 'settings/alerts/'
+      // }
+    ]
+  },
+
+  getInitialState() {
+    return {
+      tasks: [],
+      seeAll: false // Show all tasks, included those completed
+    };
+  },
+
+  componentWillMount() {
+    // Map server task state (who finished what) to TodoList.TASK objects
+    let org = this.getOrganization();
+    let tasks = TodoList.TASKS.map(task => {
+      for (let server_task of org.onboardingTasks) {
+        if (server_task.task == task.task) {
+          Object.assign(task, server_task);
+          break;
+        }
+      }
+      return task;
+    });
+    this.setState({tasks});
+  },
+
+  skipTask(skipped_task) {
+    let org = this.getOrganization();
+    this.api.request('/organizations/' + org.slug + '/onboarding-tasks/', {
+      method: 'POST',
+      data: {task: skipped_task, status: 'skipped'},
+      success: () => {
+        let new_state = this.state.tasks.map(task => {
+          if (task.task == skipped_task) {
+            task.status = 'skipped';
+          }
+          return task;
+        });
+        this.setState({tasks: new_state});
+      }
+    });
+    this.getOnboardingTasks();
+  },
+
+  click(e) {
+    e.stopPropagation();
+  },
+
+  render() {
+    let nextTasks = this.state.tasks;
+
+    let todoListTasks = nextTasks.map(task => {
+      return <TodoItem key={task.task} task={task} onSkip={this.skipTask} />;
+    });
+
+    return (
+      <div>
+        <div onClick={this.click} className="onboarding-wrapper">
+          <ul className="list-unstyled">
+            {todoListTasks}
+          </ul>
+        </div>
+      </div>
+    );
+  }
+});
+
+export default TodoList;
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index 752d0a256c..3b7d56eb18 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -12,7 +12,7 @@ import UserNav from './userNav';
 import requiredAdminActions from '../requiredAdminActions';
 import OrganizationSelector from './organizationSelector';
 import SidebarPanel from '../sidebarPanel';
-import TodoList from '../todos';
+import TodoList from '../onboardingWizard/todos';
 import IssueList from '../issueList';
 import ConfigStore from '../../stores/configStore';
 
diff --git a/src/sentry/static/sentry/app/components/todos.jsx b/src/sentry/static/sentry/app/components/todos.jsx
deleted file mode 100644
index 001f1eb18a..0000000000
--- a/src/sentry/static/sentry/app/components/todos.jsx
+++ /dev/null
@@ -1,312 +0,0 @@
-import moment from 'moment';
-import PropTypes from 'prop-types';
-import React from 'react';
-import {t, tct} from '../locale';
-
-import ApiMixin from '../mixins/apiMixin';
-import OrganizationState from '../mixins/organizationState';
-
-const TodoItem = React.createClass({
-  propTypes: {
-    task: PropTypes.object,
-    onSkip: PropTypes.func.isRequired
-  },
-
-  mixins: [OrganizationState],
-
-  getInitialState: function() {
-    return {
-      showConfirmation: false
-    };
-  },
-
-  toggleConfirmation: function() {
-    this.setState({showConfirmation: !this.state.showConfirmation});
-  },
-
-  skip: function(task) {
-    this.props.onSkip(task);
-    this.setState({showConfirmation: false});
-  },
-
-  render: function() {
-    let org = this.getOrganization();
-
-    let classNames = '';
-    let description;
-
-    switch (this.props.task.status) {
-      case 'complete':
-        classNames += ' checked';
-        description = tct('[user] completed [dateCompleted]', {
-          user: this.props.task.user,
-          dateCompleted: moment(this.props.task.dateCompleted).fromNow()
-        });
-        break;
-      case 'pending':
-        classNames += ' pending';
-        description = tct('[user] kicked off [dateCompleted]', {
-          user: this.props.task.user,
-          dateCompleted: moment(this.props.task.dateCompleted).fromNow()
-        });
-        break;
-      case 'skipped':
-        classNames += ' skipped';
-        description = tct('[user] skipped [dateCompleted]', {
-          user: this.props.task.user,
-          dateCompleted: moment(this.props.task.dateCompleted).fromNow()
-        });
-        break;
-      default:
-        description = this.props.task.description;
-    }
-
-    if (this.state.showConfirmation) {
-      classNames += ' blur';
-    }
-
-    let learnMoreUrl = '';
-    if (this.props.task.featureLocation === 'project') {
-      learnMoreUrl =
-        '/organizations/' +
-        org.slug +
-        '/projects/choose/?onboarding=1&task=' +
-        this.props.task.task;
-    } else if (this.props.task.featureLocation === 'organization') {
-      learnMoreUrl = '/organizations/' + org.slug + '/' + this.props.task.location;
-    } else if (this.props.task.featureLocation === 'absolute') {
-      learnMoreUrl = this.props.task.location;
-    }
-
-    let showSkipButton =
-      this.props.task.skippable &&
-      this.props.task.status != 'skipped' &&
-      this.props.task.status != 'complete' &&
-      !this.state.showConfirmation;
-
-    return (
-      <li className={classNames}>
-        {this.props.task.status == 'pending' && <div className="pending-bar" />}
-        <div className="todo-content">
-          <div className="ob-checkbox">
-            {this.props.task.status == 'complete' && <span className="icon-checkmark" />}
-            {this.props.task.status == 'skipped' && <span className="icon-x" />}
-            {this.props.task.status == 'pending' && <span className="icon-ellipsis" />}
-          </div>
-          <a href={learnMoreUrl}><h4>{this.props.task.title}</h4></a>
-          <p>
-            {description}
-          </p>
-          {showSkipButton &&
-            <a className="skip-btn btn btn-default" onClick={this.toggleConfirmation}>
-              {t('Skip')}
-            </a>}
-        </div>
-        {this.state.showConfirmation &&
-          <Confirmation
-            task={this.props.task.task}
-            onSkip={this.skip}
-            dismiss={this.toggleConfirmation}
-          />}
-      </li>
-    );
-  }
-});
-
-const Confirmation = React.createClass({
-  propTypes: {
-    task: PropTypes.number,
-    onSkip: PropTypes.func.isRequired,
-    dismiss: PropTypes.func.isRequired
-  },
-
-  skip: function(e) {
-    e.preventDefault();
-    this.props.onSkip(this.props.task);
-  },
-
-  dismiss: function() {
-    this.props.dismiss();
-  },
-
-  render: function() {
-    return (
-      <div className="ob-confirmation" onClick={this.dismiss}>
-        <h3>{t('Need help?')}</h3>
-        <p>
-          <a href="mailto:support@sentry.io?subject=Help with onboarding">
-            {t('Ask us!')}
-          </a>
-          {' '}
-          Â·
-          {' '}
-          <a onClick={this.skip}>{t('Skip')}</a>
-        </p>
-      </div>
-    );
-  }
-});
-
-const TodoList = React.createClass({
-  mixins: [ApiMixin, OrganizationState],
-
-  statics: {
-    TASKS: [
-      {
-        task: 1,
-        title: t('Create a project'),
-        description: t('Create your first Sentry project'),
-        skippable: false,
-        prereq: [],
-        featureLocation: 'organization',
-        location: 'projects/new/'
-      },
-      {
-        task: 2,
-        title: t('Send your first event'),
-        description: t("Install Sentry's client and send an event"),
-        skippable: false,
-        prereq: [1],
-        featureLocation: 'project',
-        location: 'settings/install/'
-      },
-      {
-        task: 3,
-        title: t('Invite team member'),
-        description: t('Bring your team aboard'),
-        skippable: true,
-        prereq: [],
-        featureLocation: 'organization',
-        location: 'members/'
-      },
-      {
-        task: 4,
-        title: t('Add a second platform'),
-        description: t('Add Sentry to a second platform'),
-        skippable: true,
-        prereq: [1, 2],
-        featureLocation: 'organization',
-        location: 'projects/new/'
-      },
-      {
-        task: 5,
-        title: t('Add user context'),
-        description: t('Know who is being affected by crashes'),
-        skippable: true,
-        prereq: [1, 2],
-        featureLocation: 'absolute',
-        location: 'https://docs.sentry.io/hosted/learn/context/#capturing-the-user'
-      },
-      {
-        task: 6,
-        title: t('Set up release tracking'),
-        description: t('See what releases are generating errors.'),
-        skippable: true,
-        prereq: [1, 2],
-        featureLocation: 'project',
-        location: 'settings/release-tracking/'
-      },
-      {
-        task: 7,
-        title: t('Upload sourcemaps'),
-        description: t('Deminify javascript stacktraces'),
-        skippable: true,
-        prereq: [1, 2], // Is one of the platforms javascript?
-        featureLocation: 'absolute',
-        location: 'https://docs.sentry.io/hosted/clients/javascript/sourcemaps/'
-      },
-      // {
-      //   'task': 8,
-      //   'title': 'User crash reports',
-      //   'description': 'Collect user feedback when your application crashes',
-      //   'skippable': false,
-      //   'prereq': [1, 2, 5]
-      //   'featureLocation': 'project',
-      //   'location': 'settings/user-reports/'
-      // },
-      {
-        task: 9,
-        title: t('Set up issue tracking'),
-        description: t('Link to Sentry issues within your issue tracker'),
-        skippable: true,
-        prereq: [1, 2],
-        featureLocation: 'project',
-        location: 'settings/issue-tracking/'
-      },
-      {
-        task: 10,
-        title: t('Set up an alerts service'),
-        description: t('Receive Sentry alerts in Slack or HipChat'),
-        skippable: true,
-        prereq: [1, 2],
-        featureLocation: 'project',
-        location: 'settings/alerts/'
-      }
-    ]
-  },
-
-  getInitialState() {
-    return {
-      tasks: [],
-      seeAll: false // Show all tasks, included those completed
-    };
-  },
-
-  componentWillMount() {
-    // Map server task state (who finished what) to TodoList.TASK objects
-    let org = this.getOrganization();
-    let tasks = TodoList.TASKS.map(task => {
-      for (let server_task of org.onboardingTasks) {
-        if (server_task.task == task.task) {
-          Object.assign(task, server_task);
-          break;
-        }
-      }
-      return task;
-    });
-    this.setState({tasks});
-  },
-
-  skipTask(skipped_task) {
-    let org = this.getOrganization();
-    this.api.request('/organizations/' + org.slug + '/onboarding-tasks/', {
-      method: 'POST',
-      data: {task: skipped_task, status: 'skipped'},
-      success: () => {
-        let new_state = this.state.tasks.map(task => {
-          if (task.task == skipped_task) {
-            task.status = 'skipped';
-          }
-          return task;
-        });
-        this.setState({tasks: new_state});
-      }
-    });
-    this.getOnboardingTasks();
-  },
-
-  click(e) {
-    // e.preventDefault();
-    e.stopPropagation();
-  },
-
-  render() {
-    let nextTasks = this.state.tasks;
-
-    let todo_list = nextTasks.map(task => {
-      return <TodoItem key={task.task} task={task} onSkip={this.skipTask} />;
-    }, this);
-
-    return (
-      <div>
-        <div onClick={this.click} className="onboarding-wrapper">
-          <ul className="list-unstyled">
-            {todo_list}
-          </ul>
-        </div>
-      </div>
-    );
-  }
-});
-
-export default TodoList;
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index da7db82a30..362e1d8102 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -49,26 +49,26 @@ jQuery.ajaxSetup({
 // way we can call into scoped objects
 
 export default {
-  jQuery: jQuery,
-  moment: moment,
-  Raven: Raven,
-  React: React,
+  jQuery,
+  moment,
+  Raven,
+  React,
   ReactDOM: {
     findDOMNode: ReactDOM.findDOMNode,
     render: ReactDOM.render
   },
-  PropTypes: PropTypes,
+  PropTypes,
   ReactDOMServer: {
-    renderToStaticMarkup: renderToStaticMarkup
+    renderToStaticMarkup
   },
   ReactBootstrap: {
     Modal: ReactBootstrapModal
   },
-  Reflux: Reflux,
-  Router: Router,
+  Reflux,
+  Router,
 
   Sentry: {
-    api: api,
+    api,
     routes: require('./routes').default,
     forms: {
       // we dont yet export all form field classes as they're not
@@ -121,7 +121,7 @@ export default {
     Sidebar: require('./components/sidebar').default,
     StackedBarChart: require('./components/stackedBarChart').default,
     TimeSince: require('./components/timeSince').default,
-    TodoList: require('./components/todos').default,
+    TodoList: require('./components/onboardingWizard/todos').default,
     U2fEnrollment: require('./components/u2fenrollment').default,
     U2fSign: require('./components/u2fsign').default,
     Badge: require('./components/badge').default,
diff --git a/src/sentry/static/sentry/app/views/projectChooser.jsx b/src/sentry/static/sentry/app/views/projectChooser.jsx
index 89996ade37..cede2d17e4 100644
--- a/src/sentry/static/sentry/app/views/projectChooser.jsx
+++ b/src/sentry/static/sentry/app/views/projectChooser.jsx
@@ -1,43 +1,62 @@
 import React from 'react';
+import {browserHistory} from 'react-router';
 import $ from 'jquery';
 import {t} from '../locale';
 
 import OrganizationState from '../mixins/organizationState';
-import TodoList from '../components/todos';
+import TodoList from '../components/onboardingWizard/todos';
 
 const ProjectChooser = React.createClass({
   mixins: [OrganizationState],
 
   componentWillMount() {
     $(document.body).addClass('narrow');
+    this.redirectNoMultipleProjects();
   },
 
   componentWillUnmount() {
     $(document.body).removeClass('narrow');
   },
 
-  render() {
+  redirectNoMultipleProjects() {
     let org = this.getOrganization();
+    let teams = org.teams.filter(team => team.projects.length > 0);
+    let projects = [].concat.apply([], teams.map(team => team.projects));
+    let task = TodoList.TASKS.filter(
+      task_inst => task_inst.task == this.props.location.query.task
+    )[0];
 
-    // Expect onboarding=1 and task=<task id> parameters and task.featureLocation == 'project'
-    // TODO throw up report dialog if not true
+    if (projects.length === 0) {
+      browserHistory.push(`/organizations/${org.slug}/projects/new/`);
+    } else if (projects.length === 1) {
+      let project = projects[0];
+      browserHistory.push(`/${org.slug}/${project.slug}/${task.location}`);
+    }
+  },
+
+  render() {
+    let org = this.getOrganization();
+    let teams = org.teams.filter(team => team.projects.length > 0);
     let task = TodoList.TASKS.filter(
       task_inst => task_inst.task == this.props.location.query.task
     )[0];
+
+    // Expect onboarding=1 and task=<task id> parameters and task.featureLocation == 'project'
+    // TODO throw up report dialog if not true
     if (task.featureLocation != 'project') {
       throw new Error('User arrived on project chooser without a valid task id.');
     }
-    let teamProjectList = org.teams.map((team, i) => {
+    let teamProjectList = teams.map((team, i) => {
       // Get list of projects per team
       let projectList = team.projects.map(project => {
         return (
           <tr key={project.id}>
             <td>
-              <h5>
+              <h4>
                 <a href={`/${org.slug}/${project.slug}/${task.location}`}>
                   {project.name}
                 </a>
-              </h5>
+              </h4>
             </td>
           </tr>
         );
@@ -47,7 +66,7 @@ const ProjectChooser = React.createClass({
         <div className="box" key={i}>
           <div key={team.id}>
             <div className="box-header" key={team.id}>
-              <h3>{team.name}</h3>
+              <h2>{team.name}</h2>
             </div>
             <div className="box-content">
               <table className="table">
