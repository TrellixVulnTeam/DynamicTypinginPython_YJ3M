commit 734a7b5d8cd4670fb4ad998e62ac3a779414454f
Author: Stephen Cefali <scefali@sentry.io>
Date:   Thu Aug 8 10:52:55 2019 -0700

    Feat (app-platform) separate integrations (#14296)

diff --git a/src/sentry/mediators/sentry_apps/updater.py b/src/sentry/mediators/sentry_apps/updater.py
index 98b52ab904..553dda1d74 100644
--- a/src/sentry/mediators/sentry_apps/updater.py
+++ b/src/sentry/mediators/sentry_apps/updater.py
@@ -97,9 +97,9 @@ class Updater(Mediator):
 
     @if_param('verify_install')
     def _update_verify_install(self):
-        if self.sentry_app.is_internal:
+        if self.sentry_app.is_internal and self.verify_install:
             raise APIError(
-                u'Internal integrations do not require installation verification.',
+                u'Internal integrations cannot have verify_install=True.',
             )
         self.sentry_app.verify_install = self.verify_install
 
diff --git a/src/sentry/static/sentry/app/data/forms/sentryApplication.jsx b/src/sentry/static/sentry/app/data/forms/sentryApplication.jsx
index d0b796f30a..e55d933713 100644
--- a/src/sentry/static/sentry/app/data/forms/sentryApplication.jsx
+++ b/src/sentry/static/sentry/app/data/forms/sentryApplication.jsx
@@ -1,119 +1,109 @@
 import React from 'react';
-import {t, tct} from 'app/locale';
+import {tct} from 'app/locale';
 
-const INTERNAL_OPTION_DISABLED_REASON = t(
-  "This option can't be changed once selected. Please make a new integration if you no longer want it to be internal."
-);
-const VERIFY_INSTALL_OPTION_DISABLED_REASON = t(
-  'Internal integrations do not require installation verification.'
-);
-
-const forms = [
+const publicFormFields = [
   {
-    // Form "section"/"panel"
-    title: 'Integration Details',
-    fields: [
-      {
-        name: 'isInternal',
-        label: 'Internal',
-        type: 'boolean',
-        disabled: ({statusDisabled}) => statusDisabled,
-        disabledReason: INTERNAL_OPTION_DISABLED_REASON,
-        help:
-          'If enabled, your integration will automatically be installed and for use within your organization only.',
-      },
-      {
-        name: 'name',
-        type: 'string',
-        required: true,
-        placeholder: 'e.g. My Integration',
-        label: 'Name',
-        help: 'Human readable name of your Integration.',
-      },
-      {
-        name: 'author',
-        type: 'string',
-        required: true,
-        placeholder: 'Acme Software',
-        label: 'Author',
-        help: 'The company or person who built and maintains this Integration.',
-      },
-      {
-        name: 'webhookUrl',
-        type: 'string',
-        required: true,
-        label: 'Webhook URL',
-        placeholder: 'e.g. https://example.com/sentry/webhook/',
-        help:
-          'The URL Sentry will send requests to for events such as installation changes and any Resource Subscriptions the Integration subscribes to.',
-      },
-      {
-        name: 'redirectUrl',
-        type: 'string',
-        label: 'Redirect URL',
-        placeholder: 'e.g. https://example.com/sentry/setup/',
-        help: 'The URL Sentry will redirect users to after installation.',
-      },
-      {
-        name: 'verifyInstall',
-        label: 'Verify Installation',
-        type: 'boolean',
-        disabled: ({changeVerifyDisabled}) => changeVerifyDisabled,
-        disabledReason: VERIFY_INSTALL_OPTION_DISABLED_REASON,
-        help:
-          'If enabled, installations will need to be verified before becoming installed.',
-      },
-      {
-        name: 'isAlertable',
-        type: 'boolean',
-        label: 'Alert Rule Action',
-        help: tct(
-          'If enabled, this integration will be an action under alert rules in Sentry. The notification destination is the Webhook URL specified above. More on actions [learn_more:Here].',
-          {
-            learn_more: (
-              <a href="https://docs.sentry.io/product/notifications/#actions" />
-            ),
-          }
-        ),
-      },
+    name: 'name',
+    type: 'string',
+    required: true,
+    placeholder: 'e.g. My Integration',
+    label: 'Name',
+    help: 'Human readable name of your Integration.',
+  },
+  {
+    name: 'author',
+    type: 'string',
+    required: true,
+    placeholder: 'e.g. Acme Software',
+    label: 'Author',
+    help: 'The company or person who built and maintains this Integration.',
+  },
+  {
+    name: 'webhookUrl',
+    type: 'string',
+    required: true,
+    label: 'Webhook URL',
+    placeholder: 'e.g. https://example.com/sentry/webhook/',
+    help:
+      'The URL Sentry will send requests to for events such as installation changes and any Resource Subscriptions the Integration subscribes to.',
+  },
+  {
+    name: 'redirectUrl',
+    type: 'string',
+    label: 'Redirect URL',
+    placeholder: 'e.g. https://example.com/sentry/setup/',
+    help: 'The URL Sentry will redirect users to after installation.',
+  },
+  {
+    name: 'verifyInstall',
+    label: 'Verify Installation',
+    type: 'boolean',
+    help: 'If enabled, installations will need to be verified before becoming installed.',
+  },
+  {
+    name: 'isAlertable',
+    type: 'boolean',
+    label: 'Alert Rule Action',
+    help: tct(
+      'If enabled, this integration will be an action under alert rules in Sentry. The notification destination is the Webhook URL specified above. More on actions [learn_more:Here].',
       {
-        name: 'schema',
-        type: 'textarea',
-        label: 'Schema',
-        autosize: true,
-        help: 'Schema for your UI components',
-        getValue: val => {
-          return val === '' ? {} : JSON.parse(val);
-        },
-        setValue: val => {
-          const schema = JSON.stringify(val, null, 2);
-          if (schema === '{}') {
-            return '';
-          }
-          return schema;
-        },
-        validate: ({id, form}) => {
-          if (!form.schema) {
-            return [];
-          }
+        learn_more: <a href="https://docs.sentry.io/product/notifications/#actions" />,
+      }
+    ),
+  },
+  {
+    name: 'schema',
+    type: 'textarea',
+    label: 'Schema',
+    autosize: true,
+    help: 'Schema for your UI components',
+    getValue: val => {
+      return val === '' ? {} : JSON.parse(val);
+    },
+    setValue: val => {
+      const schema = JSON.stringify(val, null, 2);
+      if (schema === '{}') {
+        return '';
+      }
+      return schema;
+    },
+    validate: ({id, form}) => {
+      if (!form.schema) {
+        return [];
+      }
 
-          try {
-            JSON.parse(form.schema);
-          } catch (e) {
-            return [[id, 'Invalid JSON']];
-          }
-          return [];
-        },
-      },
-      {
-        name: 'overview',
-        type: 'textarea',
-        label: 'Overview',
-        autosize: true,
-        help: 'Description of your Integration and its functionality.',
-      },
-    ],
+      try {
+        JSON.parse(form.schema);
+      } catch (e) {
+        return [[id, 'Invalid JSON']];
+      }
+      return [];
+    },
+  },
+  {
+    name: 'overview',
+    type: 'textarea',
+    label: 'Overview',
+    autosize: true,
+    help: 'Description of your Integration and its functionality.',
   },
 ];
 
-export default forms;
+export const publicIntegrationForms = [
+  {
+    title: 'Public Integration Details',
+    fields: publicFormFields,
+  },
+];
+
+// remove fields not needed for internal integrations
+const internalFormFields = publicFormFields.filter(
+  formField => !['redirectUrl', 'verifyInstall'].includes(formField.name)
+);
+
+export const internalIntegrationForms = [
+  {
+    title: 'Internal Integration Details',
+    fields: internalFormFields,
+  },
+];
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 941335ffd7..2d422e2973 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -645,8 +645,16 @@ function routes() {
           component={errorHandler(LazyLoad)}
         />
         <Route
-          name="New Integration"
-          path="new/"
+          name="New Public Integration"
+          path="new-public/"
+          componentPromise={() =>
+            import(/* webpackChunkName: "sentryApplicationDetails" */ 'app/views/settings/organizationDeveloperSettings/sentryApplicationDetails')
+          }
+          component={errorHandler(LazyLoad)}
+        />
+        <Route
+          name="New Internal Integration"
+          path="new-internal/"
           componentPromise={() =>
             import(/* webpackChunkName: "sentryApplicationDetails" */ 'app/views/settings/organizationDeveloperSettings/sentryApplicationDetails')
           }
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
index c9ae4c6f9b..273b340f95 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
@@ -175,9 +175,6 @@ class OrganizationIntegrations extends AsyncComponent {
         key={`sentry-app-row-${key}`}
         data-test-id="internal-integration-row"
         api={this.api}
-        showPublishStatus
-        isInternal
-        hideButtons
         onRemoveApp={() => this.onRemoveInternalApp(app)}
         organization={organization}
         app={app}
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/index.jsx
index 98c516fcdf..07041abd6e 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/index.jsx
@@ -38,21 +38,93 @@ class OrganizationDeveloperSettings extends AsyncView {
     publishRequestSentryApp(this.api, app);
   };
 
-  renderBody() {
+  renderApplicationRow = app => {
     const {organization} = this.props;
+    return (
+      <SentryApplicationRow
+        key={app.uuid}
+        app={app}
+        organization={organization}
+        onRemoveApp={this.removeApp}
+        onPublishRequest={this.publishRequest}
+        showInstallationStatus={false}
+      />
+    );
+  };
+
+  renderInternalIntegrations() {
+    const {orgId} = this.props.params;
+    const integrations = this.state.applications.filter(app => app.status === 'internal');
+    const isEmpty = integrations.length === 0;
+
+    const action = (
+      <Button
+        priority="primary"
+        size="small"
+        to={`/settings/${orgId}/developer-settings/new-internal/`}
+        icon="icon-circle-add"
+      >
+        {t('New Internal Integration')}
+      </Button>
+    );
+
+    return (
+      <Panel>
+        <PanelHeader hasButtons={true}>
+          {t('Internal Integrations')}
+          {action}
+        </PanelHeader>
+        <PanelBody>
+          {!isEmpty ? (
+            integrations.map(this.renderApplicationRow)
+          ) : (
+            <EmptyMessage>
+              {t('No internal integrations have been created yet.')}
+            </EmptyMessage>
+          )}
+        </PanelBody>
+      </Panel>
+    );
+  }
+
+  renderExernalIntegrations() {
     const {orgId} = this.props.params;
+    const integrations = this.state.applications.filter(app => app.status !== 'internal');
+    const isEmpty = integrations.length === 0;
+
     const action = (
       <Button
         priority="primary"
         size="small"
-        to={`/settings/${orgId}/developer-settings/new/`}
+        to={`/settings/${orgId}/developer-settings/new-public/`}
         icon="icon-circle-add"
       >
-        {t('Create New Integration')}
+        {t('New Public Integration')}
       </Button>
     );
 
-    const isEmpty = this.state.applications.length === 0;
+    return (
+      <Panel>
+        <PanelHeader hasButtons={true}>
+          {t('Public Integrations')}
+          {action}
+        </PanelHeader>
+        <PanelBody>
+          {!isEmpty ? (
+            integrations.map(this.renderApplicationRow)
+          ) : (
+            <EmptyMessage>
+              {t('No public integrations have been created yet.')}
+            </EmptyMessage>
+          )}
+        </PanelBody>
+      </Panel>
+    );
+  }
+
+  renderBody() {
+    const {organization} = this.props;
+
     if (!organization.features.includes('sentry-apps')) {
       return (
         <div>
@@ -72,33 +144,14 @@ class OrganizationDeveloperSettings extends AsyncView {
 
     return (
       <div>
-        <SettingsPageHeader title={t('Developer Settings')} action={action} />
+        <SettingsPageHeader title={t('Developer Settings')} />
         <AlertLink to="https://docs.sentry.io/workflow/integrations/integration-platform/">
           {t(
             'Have questions about the Integration Platform? Learn more about it in our docs.'
           )}
         </AlertLink>
-        <Panel>
-          <PanelHeader>{t('Integrations')}</PanelHeader>
-          <PanelBody>
-            {!isEmpty ? (
-              this.state.applications.map(app => {
-                return (
-                  <SentryApplicationRow
-                    key={app.uuid}
-                    app={app}
-                    organization={organization}
-                    onRemoveApp={this.removeApp}
-                    onPublishRequest={this.publishRequest}
-                    showPublishStatus={true}
-                  />
-                );
-              })
-            ) : (
-              <EmptyMessage>{t('No integrations have been created yet.')}</EmptyMessage>
-            )}
-          </PanelBody>
-        </Panel>
+        {this.renderExernalIntegrations()}
+        {this.renderInternalIntegrations()}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
index edd69e2e73..109b8bb8e0 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
@@ -13,7 +13,10 @@ import JsonForm from 'app/views/settings/components/forms/jsonForm';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import PermissionsObserver from 'app/views/settings/organizationDeveloperSettings/permissionsObserver';
 import TextCopyInput from 'app/views/settings/components/forms/textCopyInput';
-import sentryApplicationForm from 'app/data/forms/sentryApplication';
+import {
+  publicIntegrationForms,
+  internalIntegrationForms,
+} from 'app/data/forms/sentryApplication';
 import getDynamicText from 'app/utils/getDynamicText';
 
 import DateTime from 'app/components/dateTime';
@@ -99,16 +102,14 @@ export default class SentryApplicationDetails extends AsyncView {
     browserHistory.push(`/settings/${orgId}/developer-settings/`);
   };
 
-  onFieldChange = (name, value) => {
-    if (name === 'isInternal') {
-      if (value === true) {
-        //cannot have verifyInstall=true for internal apps
-        this.form.setValue('verifyInstall', false);
-      }
-      //trigger an update so we can change if verifyInstall is disabled or not
-      this.forceUpdate();
+  get isInternal() {
+    const {app} = this.state;
+    if (app) {
+      // if we are editing an existing app, check the status of the app
+      return app.status === 'internal';
     }
-  };
+    return this.props.route.path === 'new-internal/';
+  }
 
   onAddToken = async evt => {
     evt.preventDefault();
@@ -171,12 +172,19 @@ export default class SentryApplicationDetails extends AsyncView {
     const {app} = this.state;
     const scopes = (app && [...app.scopes]) || [];
     const events = (app && this.normalize(app.events)) || [];
-    const statusDisabled = app && app.status === 'internal' ? true : false;
-    // if the app is created and it is internal, don't need to check the form value
-    const changeVerifyDisabled =
-      statusDisabled || this.form.getValue('isInternal') ? true : false;
     const method = app ? 'PUT' : 'POST';
     const endpoint = app ? `/sentry-apps/${app.slug}/` : '/sentry-apps/';
+
+    const forms = this.isInternal ? internalIntegrationForms : publicIntegrationForms;
+    let verifyInstall;
+    if (this.isInternal) {
+      //force verifyInstall to false for all internal apps
+      verifyInstall = false;
+    } else {
+      //use the existing value for verifyInstall if the app exists, otherwise default to true
+      verifyInstall = app ? app.verifyInstall : true;
+    }
+
     return (
       <div>
         <SettingsPageHeader title={this.getTitle()} />
@@ -187,21 +195,16 @@ export default class SentryApplicationDetails extends AsyncView {
           initialData={{
             organization: orgId,
             isAlertable: false,
-            isInternal: app && app.status === 'internal' ? true : false,
-            verifyInstall: (app && app.verifyInstall) || false,
+            isInternal: this.isInternal,
             schema: {},
             scopes: [],
             ...app,
+            verifyInstall, //need to overwrite the value in app for internal if it is true
           }}
           model={this.form}
           onSubmitSuccess={this.onSubmitSuccess}
-          onFieldChange={this.onFieldChange}
         >
-          <JsonForm
-            additionalFieldProps={{statusDisabled, changeVerifyDisabled}}
-            location={this.props.location}
-            forms={sentryApplicationForm}
-          />
+          <JsonForm location={this.props.location} forms={forms} />
 
           <PermissionsObserver scopes={scopes} events={events} />
 
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.jsx
index 306ce4ebce..35fcad68c5 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.jsx
@@ -27,26 +27,22 @@ export default class SentryApplicationRow extends React.PureComponent {
     onUninstall: PropTypes.func,
     onRemoveApp: PropTypes.func,
     onPublishRequest: PropTypes.func,
-    showPublishStatus: PropTypes.bool,
-    isInternal: PropTypes.bool,
-    hideButtons: PropTypes.bool,
+    showInstallationStatus: PropTypes.bool, //false if we are on the developer settings page where we don't show installation status
   };
 
   static defaultProps = {
-    showPublishStatus: false,
-    isInternal: false,
-    hideButtons: false,
+    showInstallationStatus: true,
   };
 
+  get isInternal() {
+    return this.props.app.status === 'internal';
+  }
+
   renderUnpublishedAdminButtons() {
     const {app} = this.props;
     return (
       <ButtonHolder>
-        {app.status === 'internal'
-          ? this.renderDisabledPublishRequestButton(
-              'Internal integrations cannot be published'
-            )
-          : this.renderPublishRequest(app)}
+        {this.isInternal ? null : this.renderPublishRequest(app)}
         {this.renderRemoveApp(app)}
       </ButtonHolder>
     );
@@ -143,21 +139,31 @@ export default class SentryApplicationRow extends React.PureComponent {
     );
   }
 
+  hideStatus() {
+    //no publishing for internal apps so hide the status on the developer settings page
+    return this.isInternal && !this.props.showInstallationStatus;
+  }
+
   renderStatus() {
-    const {app, showPublishStatus, isInternal} = this.props;
+    const {app, showInstallationStatus} = this.props;
+    const isInternal = this.isInternal;
     const isInstalled = this.isInstalled;
-    if (isInternal) {
-      return <Status enabled isInternal={isInternal} />;
+    if (this.hideStatus()) {
+      return null;
     }
-    if (showPublishStatus) {
-      return <PublishStatus status={app.status} />;
+    if (showInstallationStatus) {
+      //if internal and we show installation status, we don't show the learn more
+      if (isInternal) {
+        return <Status enabled isInternal={isInternal} />;
+      }
+      return (
+        <React.Fragment>
+          <Status enabled={isInstalled} isInternal={false} />
+          <StyledLink onClick={this.openLearnMore}>{t('Learn More')}</StyledLink>
+        </React.Fragment>
+      );
     }
-    return (
-      <React.Fragment>
-        <Status enabled={isInstalled} isInternal={false} />
-        <StyledLink onClick={this.openLearnMore}>{t('Learn More')}</StyledLink>
-      </React.Fragment>
-    );
+    return <PublishStatus status={app.status} />;
   }
 
   get isInstalled() {
@@ -203,32 +209,41 @@ export default class SentryApplicationRow extends React.PureComponent {
     );
   }
 
+  linkToEdit() {
+    const {app, showInstallationStatus} = this.props;
+    // show the link if the app is internal or we are on the developer settings page
+    return app.status === 'internal' || !showInstallationStatus;
+  }
+
   renderButtons() {
-    const {app, showPublishStatus, hideButtons} = this.props;
+    const {app, showInstallationStatus} = this.props;
     const isInstalled = this.isInstalled;
 
-    if (hideButtons) {
-      return null;
-    }
-    if (showPublishStatus) {
-      return app.status === 'published'
-        ? this.renderPublishedAppButtons()
-        : this.renderUnpublishedAppButtons();
+    //showInstallationStatus = true on integrations page
+    if (showInstallationStatus) {
+      //no installation buttons to show if internal
+      if (this.isInternal) {
+        return null;
+      }
+      //if installed, render the uninstall button and if installed, render install button
+      return isInstalled ? this.renderUninstallButton() : this.renderInstallButton();
     }
-    //if installed, render the uninstall button and if installed, render uninstall
-    return isInstalled ? this.renderUninstallButton() : this.renderInstallButton();
+
+    return app.status === 'published'
+      ? this.renderPublishedAppButtons()
+      : this.renderUnpublishedAppButtons();
   }
 
   render() {
-    const {app, organization, showPublishStatus} = this.props;
+    const {app, organization} = this.props;
 
     return (
       <SentryAppItem data-test-id={app.slug}>
         <StyledFlex>
           <PluginIcon size={36} pluginId={app.slug} />
           <SentryAppBox>
-            <SentryAppName>
-              {showPublishStatus ? (
+            <SentryAppName hideStatus={this.hideStatus()}>
+              {this.linkToEdit() ? (
                 <SentryAppLink
                   to={`/settings/${organization.slug}/developer-settings/${app.slug}/`}
                 >
@@ -272,6 +287,7 @@ const SentryAppDetails = styled(Flex)`
 
 const SentryAppName = styled('div')`
   font-weight: bold;
+  margin-top: ${p => (p.hideStatus ? '10px' : '0px')};
 `;
 
 const StyledLink = styled(Link)`
diff --git a/tests/acceptance/test_organization_developer_settings.py b/tests/acceptance/test_organization_developer_settings.py
index f16f5f58a2..88da865c05 100644
--- a/tests/acceptance/test_organization_developer_settings.py
+++ b/tests/acceptance/test_organization_developer_settings.py
@@ -10,6 +10,13 @@ class OrganizationDeveloperSettingsNewAcceptanceTest(AcceptanceTestCase):
 
     def setUp(self):
         super(OrganizationDeveloperSettingsNewAcceptanceTest, self).setUp()
+        self.team = self.create_team(organization=self.organization, name='Tesla Motors')
+        self.project = self.create_project(
+            organization=self.organization,
+            teams=[self.team],
+            name='Model S',
+        )
+
         self.login_as(self.user)
         self.org_developer_settings_path = u'/settings/{}/developer-settings/'.format(
             self.organization.slug)
@@ -18,11 +25,28 @@ class OrganizationDeveloperSettingsNewAcceptanceTest(AcceptanceTestCase):
         self.browser.get(url)
         self.browser.wait_until_not('.loading-indicator')
 
-    def test_create_new_integration(self):
+    def test_create_new_public_integration(self):
+        with self.feature('organizations:sentry-apps'):
+            self.load_page(self.org_developer_settings_path)
+
+            self.browser.click('[aria-label="New Public Integration"]')
+
+            self.browser.element('input[name="name"]').send_keys('Tesla')
+            self.browser.element('input[name="author"]').send_keys('Elon Musk')
+            self.browser.element('input[name="webhookUrl"]').send_keys(
+                'https://example.com/webhook')
+
+            self.browser.click('[aria-label="Save Changes"]')
+
+            self.browser.wait_until('.ref-success')
+
+            assert self.browser.find_element_by_link_text('Tesla')
+
+    def test_create_new_internal_integration(self):
         with self.feature('organizations:sentry-apps'):
             self.load_page(self.org_developer_settings_path)
 
-            self.browser.click('[aria-label="Create New Integration"]')
+            self.browser.click('[aria-label="New Internal Integration"]')
 
             self.browser.element('input[name="name"]').send_keys('Tesla')
             self.browser.element('input[name="author"]').send_keys('Elon Musk')
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx
index 6a9eb2ed41..d250319a23 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx
@@ -48,7 +48,8 @@ describe('Organization Developer Settings', function() {
 
     it('displays empty state', () => {
       expect(wrapper.exists('EmptyMessage')).toBe(true);
-      expect(wrapper.text()).toMatch('No integrations have been created yet');
+      expect(wrapper.text()).toMatch('No internal integrations have been created yet');
+      expect(wrapper.text()).toMatch('No public integrations have been created yet');
     });
   });
 
@@ -68,6 +69,10 @@ describe('Organization Developer Settings', function() {
       );
     });
 
+    it('internal integration list is empty', () => {
+      expect(wrapper.text()).toMatch('No internal integrations have been created yet');
+    });
+
     it('displays all Apps owned by the Org', () => {
       expect(wrapper.find('SentryApplicationRow').prop('app').name).toBe('Sample App');
       expect(wrapper.find('PublishStatus').prop('status')).toBe('unpublished');
@@ -90,7 +95,7 @@ describe('Organization Developer Settings', function() {
         .simulate('click');
       await tick();
       wrapper.update();
-      expect(wrapper.text()).toMatch('No integrations have been created yet');
+      expect(wrapper.text()).toMatch('No public integrations have been created yet');
     });
 
     it('can make a request to publish an integration', async () => {
@@ -148,12 +153,16 @@ describe('Organization Developer Settings', function() {
       routerContext
     );
 
+    it('public integration list is empty', () => {
+      expect(wrapper.text()).toMatch('No public integrations have been created yet');
+    });
+
     it('allows deleting', () => {
       expect(wrapper.find('[icon="icon-trash"]').prop('disabled')).toEqual(false);
     });
 
-    it('publish button is disabled', () => {
-      expect(wrapper.find(publishButtonSelector).prop('disabled')).toEqual(true);
+    it('publish button does not exist', () => {
+      expect(wrapper.exists(publishButtonSelector)).toBe(false);
     });
   });
 
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
index 7a4f1817b1..3bb9f72f0c 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
@@ -15,6 +15,9 @@ describe('Sentry Application Details', function() {
   let createAppRequest;
   let editAppRequest;
 
+  const verifyInstallToggle = 'Switch[name="verifyInstall"]';
+  const redirectUrlInput = 'Input[name="redirectUrl"]';
+
   beforeEach(() => {
     Client.clearMockResponses();
 
@@ -22,7 +25,7 @@ describe('Sentry Application Details', function() {
     orgId = org.slug;
   });
 
-  describe('Creating a new Sentry App', () => {
+  describe('Creating a new public Sentry App', () => {
     beforeEach(() => {
       createAppRequest = Client.addMockResponse({
         url: '/sentry-apps/',
@@ -31,11 +34,16 @@ describe('Sentry Application Details', function() {
       });
 
       wrapper = mount(
-        <SentryApplicationDetails params={{orgId}} />,
+        <SentryApplicationDetails params={{orgId}} route={{path: 'new-public/'}} />,
         TestStubs.routerContext()
       );
     });
 
+    it('has inputs for redirectUrl and verifyInstall', () => {
+      expect(wrapper.exists(verifyInstallToggle)).toBeTruthy();
+      expect(wrapper.exists(redirectUrlInput)).toBeTruthy();
+    });
+
     it('it shows empty scopes and no credentials', function() {
       // new app starts off with no scopes selected
       expect(wrapper.find('PermissionsObserver').prop('scopes')).toEqual([]);
@@ -44,16 +52,6 @@ describe('Sentry Application Details', function() {
       ).toBeDefined();
     });
 
-    it('disables verifyInstall if isInternal is enabled', function() {
-      const verifyInstallToggle = 'Switch[name="verifyInstall"]';
-
-      wrapper.find(verifyInstallToggle).simulate('click');
-      wrapper.find('Switch[name="isInternal"]').simulate('click');
-
-      expect(wrapper.find(verifyInstallToggle).prop('isDisabled')).toBe(true);
-      expect(wrapper.find(verifyInstallToggle).prop('isActive')).toBe(false);
-    });
-
     it('saves', function() {
       wrapper
         .find('Input[name="name"]')
@@ -68,7 +66,7 @@ describe('Sentry Application Details', function() {
         .simulate('change', {target: {value: 'https://webhook.com'}});
 
       wrapper
-        .find('Input[name="redirectUrl"]')
+        .find(redirectUrlInput)
         .simulate('change', {target: {value: 'https://webhook.com/setup'}});
 
       wrapper.find('TextArea[name="schema"]').simulate('change', {target: {value: '{}'}});
@@ -94,7 +92,7 @@ describe('Sentry Application Details', function() {
         scopes: observable(['member:read', 'member:admin', 'event:read', 'event:admin']),
         events: observable(['issue']),
         isInternal: false,
-        verifyInstall: false,
+        verifyInstall: true,
         isAlertable: true,
         schema: {},
       };
@@ -109,7 +107,20 @@ describe('Sentry Application Details', function() {
     });
   });
 
-  describe('Renders for non-internal apps', function() {
+  describe('Creating a new internal Sentry App', () => {
+    beforeEach(() => {
+      wrapper = mount(
+        <SentryApplicationDetails params={{orgId}} route={{path: 'new-internal/'}} />,
+        TestStubs.routerContext()
+      );
+    });
+    it('no inputs for redirectUrl and verifyInstall', () => {
+      expect(wrapper.exists(verifyInstallToggle)).toBeFalsy();
+      expect(wrapper.exists(redirectUrlInput)).toBeFalsy();
+    });
+  });
+
+  describe('Renders public app', function() {
     beforeEach(() => {
       sentryApp = TestStubs.SentryApp();
       sentryApp.events = ['issue'];
@@ -130,6 +141,11 @@ describe('Sentry Application Details', function() {
       );
     });
 
+    it('has inputs for redirectUrl and verifyInstall', () => {
+      expect(wrapper.exists(verifyInstallToggle)).toBeTruthy();
+      expect(wrapper.exists(redirectUrlInput)).toBeTruthy();
+    });
+
     it('it shows application data', function() {
       // data should be filled out
       expect(wrapper.find('PermissionsObserver').prop('scopes')).toEqual([
@@ -137,7 +153,7 @@ describe('Sentry Application Details', function() {
       ]);
     });
 
-    it('renders clientId and clientSecret for non-internal apps', function() {
+    it('renders clientId and clientSecret for public apps', function() {
       expect(wrapper.find('#clientId').exists()).toBe(true);
       expect(wrapper.find('#clientSecret').exists()).toBe(true);
     });
@@ -166,14 +182,12 @@ describe('Sentry Application Details', function() {
         TestStubs.routerContext()
       );
     });
-    it('has internal option disabled', function() {
-      expect(
-        wrapper
-          .find('Field[name="isInternal"]')
-          .find('FieldControl')
-          .prop('disabled')
-      ).toBe(true);
+
+    it('no inputs for redirectUrl and verifyInstall', () => {
+      expect(wrapper.exists(verifyInstallToggle)).toBeFalsy();
+      expect(wrapper.exists(redirectUrlInput)).toBeFalsy();
     });
+
     it('shows tokens', function() {
       expect(
         wrapper
@@ -241,7 +255,7 @@ describe('Sentry Application Details', function() {
     });
   });
 
-  describe('Editing an existing Sentry App', () => {
+  describe('Editing an existing public Sentry App', () => {
     beforeEach(() => {
       sentryApp = TestStubs.SentryApp();
       sentryApp.events = ['issue'];
@@ -270,7 +284,7 @@ describe('Sentry Application Details', function() {
 
     it('it updates app with correct data', function() {
       wrapper
-        .find('Input[name="redirectUrl"]')
+        .find(redirectUrlInput)
         .simulate('change', {target: {value: 'https://hello.com/'}});
 
       wrapper.find('TextArea[name="schema"]').simulate('change', {target: {value: '{}'}});
diff --git a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
index 26daf2bca0..978e335e72 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
@@ -76,8 +76,6 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
         "webhookUrl": "https://example.com/webhook",
       }
     }
-    hideButtons={false}
-    isInternal={false}
     key="123456123456123456123456"
     onInstall={[Function]}
     onUninstall={[Function]}
@@ -109,7 +107,7 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
         "teams": Array [],
       }
     }
-    showPublishStatus={false}
+    showInstallationStatus={true}
   >
     <SentryAppItem
       data-test-id="sample-app"
@@ -155,9 +153,11 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
                       className="css-161g25b-SentryAppBox eac2pqx2"
                       is={null}
                     >
-                      <SentryAppName>
+                      <SentryAppName
+                        hideStatus={false}
+                      >
                         <div
-                          className="css-uiwo8x-SentryAppName eac2pqx4"
+                          className="css-4cu42i-SentryAppName eac2pqx4"
                         >
                           Sample App
                         </div>
