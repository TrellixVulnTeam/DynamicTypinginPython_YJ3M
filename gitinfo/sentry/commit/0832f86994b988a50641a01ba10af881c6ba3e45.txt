commit 0832f86994b988a50641a01ba10af881c6ba3e45
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Fri Jul 13 09:15:09 2018 -0700

    feat(integrations): Add issue create and link for GitHub Enterprise (#8956)

diff --git a/src/sentry/integrations/github_enterprise/integration.py b/src/sentry/integrations/github_enterprise/integration.py
index 347e88625b..678ce63dca 100644
--- a/src/sentry/integrations/github_enterprise/integration.py
+++ b/src/sentry/integrations/github_enterprise/integration.py
@@ -15,6 +15,7 @@ from sentry.integrations.repositories import RepositoryMixin
 from sentry.pipeline import NestedPipelineView, PipelineView
 from sentry.utils.http import absolute_uri
 from sentry.integrations.github.integration import GitHubIntegrationProvider
+from sentry.integrations.github.issues import GitHubIssueBasic
 from sentry.integrations.github.utils import get_jwt
 
 from .repository import GitHubEnterpriseRepositoryProvider
@@ -41,7 +42,7 @@ API_ERRORS = {
 }
 
 
-class GitHubEnterpriseIntegration(Integration, RepositoryMixin):
+class GitHubEnterpriseIntegration(Integration, GitHubIssueBasic, RepositoryMixin):
     def get_client(self):
         return GitHubEnterpriseAppsClient(
             base_url=self.model.metadata['domain_name'],
diff --git a/tests/sentry/integrations/github_enterprise/test_issues.py b/tests/sentry/integrations/github_enterprise/test_issues.py
new file mode 100644
index 0000000000..e4f3f02576
--- /dev/null
+++ b/tests/sentry/integrations/github_enterprise/test_issues.py
@@ -0,0 +1,185 @@
+from __future__ import absolute_import
+
+import responses
+
+from mock import patch
+from exam import fixture
+from django.test import RequestFactory
+
+from sentry.integrations.github_enterprise.integration import GitHubEnterpriseIntegration
+from sentry.models import Integration, ExternalIssue
+from sentry.testutils import TestCase
+from sentry.utils import json
+
+
+class GitHubEnterpriseIssueBasicTest(TestCase):
+    @fixture
+    def request(self):
+        return RequestFactory()
+
+    def setUp(self):
+        self.user = self.create_user()
+        self.organization = self.create_organization(owner=self.user)
+        self.model = Integration.objects.create(
+            provider='github_enterprise',
+            external_id='github_external_id',
+            name='getsentry',
+            metadata={
+                'domain_name': '35.232.149.196',
+                'installation': {
+                    'id': 2,
+                    'private_key': 'private_key'}}
+        )
+        self.model.add_organization(self.organization.id)
+        self.integration = GitHubEnterpriseIntegration(self.model, self.organization.id)
+
+    @responses.activate
+    @patch('sentry.integrations.github_enterprise.client.get_jwt', return_value='jwt_token_1')
+    def test_get_allowed_assignees(self, mock_get_jwt):
+        responses.add(
+            responses.POST,
+            'https://35.232.149.196/api/v3/installations/github_external_id/access_tokens',
+            json={'token': 'token_1', 'expires_at': '2018-10-11T22:14:10Z'}
+        )
+
+        responses.add(
+            responses.GET,
+            'https://35.232.149.196/api/v3/repos/getsentry/sentry/assignees',
+            json=[{'login': 'MeredithAnya'}]
+        )
+
+        repo = 'getsentry/sentry'
+        assert self.integration.get_allowed_assignees(repo) == (
+            ('', 'Unassigned'),
+            ('MeredithAnya', 'MeredithAnya')
+        )
+
+        request = responses.calls[0].request
+        assert request.headers['Authorization'] == 'Bearer jwt_token_1'
+
+        request = responses.calls[1].request
+        assert request.headers['Authorization'] == 'token token_1'
+
+    @responses.activate
+    @patch('sentry.integrations.github_enterprise.client.get_jwt', return_value='jwt_token_1')
+    def test_create_issue(self, mock_get_jwt):
+        responses.add(
+            responses.POST,
+            'https://35.232.149.196/api/v3/installations/github_external_id/access_tokens',
+            json={'token': 'token_1', 'expires_at': '2018-10-11T22:14:10Z'}
+        )
+
+        responses.add(
+            responses.POST,
+            'https://35.232.149.196/api/v3/repos/getsentry/sentry/issues',
+            json={'number': 321, 'title': 'hello', 'body': 'This is the description'}
+        )
+
+        form_data = {
+            'repo': 'getsentry/sentry',
+            'title': 'hello',
+            'description': 'This is the description',
+        }
+
+        assert self.integration.create_issue(form_data) == {
+            'key': 321,
+            'description': 'This is the description',
+            'title': 'hello',
+            'repo': 'getsentry/sentry',
+        }
+        request = responses.calls[0].request
+        assert request.headers['Authorization'] == 'Bearer jwt_token_1'
+
+        request = responses.calls[1].request
+        assert request.headers['Authorization'] == 'token token_1'
+        payload = json.loads(request.body)
+        assert payload == {'body': 'This is the description', 'assignee': None, 'title': 'hello'}
+
+    @responses.activate
+    @patch('sentry.integrations.github_enterprise.client.get_jwt', return_value='jwt_token_1')
+    def test_get_repo_issues(self, mock_get_jwt):
+        responses.add(
+            responses.POST,
+            'https://35.232.149.196/api/v3/installations/github_external_id/access_tokens',
+            json={'token': 'token_1', 'expires_at': '2018-10-11T22:14:10Z'}
+        )
+
+        responses.add(
+            responses.GET,
+            'https://35.232.149.196/api/v3/repos/getsentry/sentry/issues',
+            json=[{'number': 321, 'title': 'hello', 'body': 'This is the description'}]
+        )
+        repo = 'getsentry/sentry'
+        assert self.integration.get_repo_issues(repo) == ((321, '#321 hello'),)
+
+        request = responses.calls[0].request
+        assert request.headers['Authorization'] == 'Bearer jwt_token_1'
+
+        request = responses.calls[1].request
+        assert request.headers['Authorization'] == 'token token_1'
+
+    @responses.activate
+    @patch('sentry.integrations.github_enterprise.client.get_jwt', return_value='jwt_token_1')
+    def test_link_issue(self, mock_get_jwt):
+        issue_id = 321
+        responses.add(
+            responses.POST,
+            'https://35.232.149.196/api/v3/installations/github_external_id/access_tokens',
+            json={'token': 'token_1', 'expires_at': '2018-10-11T22:14:10Z'}
+        )
+
+        responses.add(
+            responses.GET,
+            'https://35.232.149.196/api/v3/repos/getsentry/sentry/issues/321',
+            json={'number': issue_id, 'title': 'hello', 'body': 'This is the description'}
+        )
+
+        data = {
+            'repo': 'getsentry/sentry',
+            'externalIssue': issue_id,
+            'comment': 'hello',
+        }
+
+        assert self.integration.get_issue(issue_id, data=data) == {
+            'key': issue_id,
+            'description': 'This is the description',
+            'title': 'hello',
+            'repo': 'getsentry/sentry',
+        }
+        request = responses.calls[0].request
+        assert request.headers['Authorization'] == 'Bearer jwt_token_1'
+
+        request = responses.calls[1].request
+        assert request.headers['Authorization'] == 'token token_1'
+
+    @responses.activate
+    @patch('sentry.integrations.github_enterprise.client.get_jwt', return_value='jwt_token_1')
+    def after_link_issue(self, mock_get_jwt):
+        responses.add(
+            responses.POST,
+            'https://35.232.149.196/api/v3/installations/github_external_id/access_tokens',
+            json={'token': 'token_1', 'expires_at': '2018-10-11T22:14:10Z'}
+        )
+
+        responses.add(
+            responses.POST,
+            'https://35.232.149.196/api/v3/repos/getsentry/sentry/issues/321/comments',
+            json={'body': 'hello'}
+        )
+
+        data = {'comment': 'hello'}
+        external_issue = ExternalIssue.objects.create(
+            organization_id=self.organization.id,
+            integration_id=self.model.id,
+            key='hello#321',
+        )
+
+        self.integration.after_link_issue(external_issue, data=data)
+
+        request = responses.calls[0].request
+        assert request.headers['Authorization'] == 'Bearer jwt_token_1'
+
+        request = responses.calls[1].request
+        assert request.headers['Authorization'] == 'token token_1'
+        payload = json.loads(request.body)
+        assert payload == {'body': 'hello'}
