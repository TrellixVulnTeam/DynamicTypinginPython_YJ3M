commit bac1b2dcb499f8d701c16a39e6c8ac89b8a2a5fb
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Apr 14 09:54:56 2017 -0700

    [api] handle mismatched oauth scope sets in authorize

diff --git a/src/sentry/web/frontend/oauth_authorize.py b/src/sentry/web/frontend/oauth_authorize.py
index f86ebc2a8a..cf9abbd80c 100644
--- a/src/sentry/web/frontend/oauth_authorize.py
+++ b/src/sentry/web/frontend/oauth_authorize.py
@@ -133,7 +133,7 @@ class OAuthAuthorizeView(BaseView):
             matched_sets = set()
             for scope_set in settings.SENTRY_SCOPE_SETS:
                 for scope, description in scope_set:
-                    if scope_set in matched_sets:
+                    if scope_set in matched_sets and scope in pending_scopes:
                         pending_scopes.remove(scope)
                     elif scope in pending_scopes:
                         permissions.append(description)
diff --git a/tests/sentry/web/frontend/test_oauth_authorize.py b/tests/sentry/web/frontend/test_oauth_authorize.py
index d9945ce73a..cd5c22befa 100644
--- a/tests/sentry/web/frontend/test_oauth_authorize.py
+++ b/tests/sentry/web/frontend/test_oauth_authorize.py
@@ -225,6 +225,25 @@ class OAuthAuthorizeCodeTest(TestCase):
         authorization = ApiAuthorization.objects.get(id=authorization.id)
         assert sorted(authorization.get_scopes()) == ['org:read', 'org:write']
 
+    def test_approve_flow_non_scope_set(self):
+        self.login_as(self.user)
+
+        ApiAuthorization.objects.create(
+            user=self.user,
+            application=self.application,
+        )
+
+        resp = self.client.get('{}?response_type=code&client_id={}&scope=member:read member:admin'.format(
+            self.path,
+            self.application.client_id,
+        ))
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/oauth-authorize.html')
+        assert resp.context['application'] == self.application
+        assert resp.context['scopes'] == ['member:read', 'member:admin']
+        assert resp.context['permissions'] == ['Read, write, and admin access to organization members.']
+
 
 class OAuthAuthorizeTokenTest(TestCase):
     @fixture
