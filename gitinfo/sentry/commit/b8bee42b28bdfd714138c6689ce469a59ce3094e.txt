commit b8bee42b28bdfd714138c6689ce469a59ce3094e
Author: Ryan Skonnord <ryan.skonnord@sentry.io>
Date:   Tue May 19 09:47:40 2020 -0700

    ref(api): Add to instrumentation spans in base Endpoint class (#18895)
    
    Update existing spans' names for naming convention and display the
    Endpoint subclass as the description. Break the call to the response
    handler from the "request" span into a new one. Add new instrumentation
    to pagination.

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index b048fda5d6..3e571deba0 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -150,7 +150,7 @@ class Endpoint(APIView):
         Identical to rest framework's dispatch except we add the ability
         to convert arguments (for common URL params).
         """
-        with sentry_sdk.start_span(op="PERF: base.dispatch - setup"):
+        with sentry_sdk.start_span(op="base.dispatch.setup", description=type(self).__name__):
             self.args = args
             self.kwargs = kwargs
             request = self.initialize_request(request, *args, **kwargs)
@@ -163,7 +163,9 @@ class Endpoint(APIView):
         request._metric_tags = {}
 
         if settings.SENTRY_API_RESPONSE_DELAY:
-            with sentry_sdk.start_span(op="PERF: base.dispatch - sleep") as span:
+            with sentry_sdk.start_span(
+                op="base.dispatch.sleep", description=type(self).__name__,
+            ) as span:
                 span.set_data("SENTRY_API_RESPONSE_DELAY", settings.SENTRY_API_RESPONSE_DELAY)
                 time.sleep(settings.SENTRY_API_RESPONSE_DELAY / 1000.0)
 
@@ -174,7 +176,7 @@ class Endpoint(APIView):
             origin = None
 
         try:
-            with sentry_sdk.start_span(op="PERF: base.dispatch - request") as span:
+            with sentry_sdk.start_span(op="base.dispatch.request", description=type(self).__name__):
                 if origin and request.auth:
                     allowed_origins = request.auth.get_allowed_origins()
                     if not is_valid_origin(origin, allowed=allowed_origins):
@@ -198,6 +200,10 @@ class Endpoint(APIView):
                     # setup default access
                     request.access = access.from_request(request)
 
+            with sentry_sdk.start_span(
+                op="base.dispatch.execute",
+                description="{}.{}".format(type(self).__name__, handler.__name__),
+            ):
                 response = handler(request, *args, **kwargs)
 
         except Exception as exc:
@@ -263,13 +269,20 @@ class Endpoint(APIView):
             paginator = paginator_cls(**paginator_kwargs)
 
         try:
-            cursor_result = paginator.get_result(limit=per_page, cursor=input_cursor)
+            with sentry_sdk.start_span(
+                op="base.paginate.get_result", description=type(self).__name__,
+            ) as span:
+                span.set_data("Limit", per_page)
+                cursor_result = paginator.get_result(limit=per_page, cursor=input_cursor)
         except BadPaginationError as e:
             return ParseError(detail=six.text_type(e))
 
         # map results based on callback
         if on_results:
-            results = on_results(cursor_result.results)
+            with sentry_sdk.start_span(
+                op="base.paginate.on_results", description=type(self).__name__,
+            ):
+                results = on_results(cursor_result.results)
         else:
             results = cursor_result.results
 
