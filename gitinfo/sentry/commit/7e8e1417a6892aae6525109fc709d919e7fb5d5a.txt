commit 7e8e1417a6892aae6525109fc709d919e7fb5d5a
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Aug 9 11:23:53 2019 -0700

    feat(eventstore): Implement eventstore.get_events() (#14222)
    
    Also updates the EventIdLookupEndpoint to use Eventstore with Snuba
    backend instead of Postgres Event table.
    
    Depends on https://github.com/getsentry/sentry/pull/14173

diff --git a/src/sentry/api/endpoints/organization_eventid.py b/src/sentry/api/endpoints/organization_eventid.py
index 28e5c4b9c4..27dfb7dfcd 100644
--- a/src/sentry/api/endpoints/organization_eventid.py
+++ b/src/sentry/api/endpoints/organization_eventid.py
@@ -4,20 +4,20 @@ import six
 
 from rest_framework.response import Response
 
+from sentry import eventstore
 from sentry.api.base import DocSection
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
-from sentry.models import Project, Event, EventMapping
+from sentry.models import Project
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 
 @scenario('ResolveEventId')
 def resolve_event_id_scenario(runner):
-    event = Event.objects.filter(project_id=runner.default_project.id).first()
     runner.request(
         method='GET',
-        path='/organizations/%s/eventids/%s/' % (runner.org.slug, event.event_id, )
+        path='/organizations/%s/eventids/%s/' % (runner.org.slug, runner.default_event.event_id, )
     )
 
 
@@ -47,33 +47,22 @@ class EventIdLookupEndpoint(OrganizationEndpoint):
                 'id', 'slug'))
 
         try:
-            event = Event.objects.filter(event_id=event_id,
-                                         project_id__in=project_slugs_by_id.keys())[0]
+            event = eventstore.get_events(filter_keys={
+                'project_id': project_slugs_by_id.keys(),
+                'event_id': event_id,
+            }, limit=1)[0]
         except IndexError:
-            try:
-                event_mapping = EventMapping.objects.filter(event_id=event_id,
-                                                            project_id__in=project_slugs_by_id.keys())[0]
-
-            except IndexError:
-                raise ResourceDoesNotExist()
-
+            raise ResourceDoesNotExist()
+        else:
             return Response(
                 {
                     'organizationSlug': organization.slug,
-                    'projectSlug': project_slugs_by_id[event_mapping.project_id],
-                    'groupId': six.text_type(event_mapping.group_id),
+                    'projectSlug': project_slugs_by_id[event.project_id],
+                    'groupId': six.text_type(event.group_id),
+                    'eventId': six.text_type(event.id),
+                    'event': serialize(
+                        event,
+                        request.user,
+                    ),
                 }
             )
-
-        return Response(
-            {
-                'organizationSlug': organization.slug,
-                'projectSlug': project_slugs_by_id[event.project_id],
-                'groupId': six.text_type(event.group_id),
-                'eventId': six.text_type(event.id),
-                'event': serialize(
-                    event,
-                    request.user,
-                ),
-            }
-        )
diff --git a/src/sentry/db/models/manager.py b/src/sentry/db/models/manager.py
index 99244136a0..11452a0b2e 100644
--- a/src/sentry/db/models/manager.py
+++ b/src/sentry/db/models/manager.py
@@ -310,6 +310,7 @@ class BaseManager(Manager):
 
 
 class SnubaEventManager:
+    # TODO: Remove in favor of eventstore.get_event_by_id
     def from_event_id(self, id_or_event_id, project_id):
         """
         Get a SnubaEvent by either its id primary key or its hex event_id.
diff --git a/src/sentry/eventstore/snuba/backend.py b/src/sentry/eventstore/snuba/backend.py
index 5513d51de6..cba588861c 100644
--- a/src/sentry/eventstore/snuba/backend.py
+++ b/src/sentry/eventstore/snuba/backend.py
@@ -1,14 +1,52 @@
 from __future__ import absolute_import
 
+from sentry.utils import snuba
 from sentry.models import SnubaEvent
 from sentry.eventstore.base import EventStorage
 
+DEFAULT_ORDERBY = ['-timestamp', '-event_id']
+DEFAULT_LIMIT = 100
+DEFAULT_OFFSET = 0
+
 
 class SnubaEventStorage(EventStorage):
     """
     Eventstore backend backed by Snuba
     """
 
+    def get_events(
+        self,
+        start=None,
+        end=None,
+        additional_columns=None,
+        conditions=None,
+        filter_keys=None,
+        orderby=DEFAULT_ORDERBY,
+        limit=DEFAULT_LIMIT,
+        offset=DEFAULT_OFFSET,
+    ):
+        """
+        Get events from Snuba.
+        """
+        cols = self.__get_columns(additional_columns)
+
+        result = snuba.raw_query(
+            start=start,
+            end=end,
+            selected_columns=cols,
+            conditions=conditions,
+            filter_keys=filter_keys,
+            orderby=orderby,
+            limit=limit,
+            offset=offset,
+            referrer='eventstore.get_events',
+        )
+
+        if 'error' not in result:
+            return [SnubaEvent(evt) for evt in result['data']]
+
+        return []
+
     def get_event_by_id(self, project_id, event_id, additional_columns=None):
         """
         Get an event given a project ID and event ID
diff --git a/tests/sentry/eventstore/snuba/test_backend.py b/tests/sentry/eventstore/snuba/test_backend.py
index ef13c11352..8ea97e4017 100644
--- a/tests/sentry/eventstore/snuba/test_backend.py
+++ b/tests/sentry/eventstore/snuba/test_backend.py
@@ -3,15 +3,16 @@ from __future__ import absolute_import
 from datetime import timedelta
 from django.utils import timezone
 
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, SnubaTestCase
 from sentry.eventstore.snuba.backend import SnubaEventStorage
 
 
-class SnubaEventStorageTest(TestCase):
+class SnubaEventStorageTest(TestCase, SnubaTestCase):
     def setUp(self):
+        super(SnubaEventStorageTest, self).setUp()
         self.min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
         self.two_min_ago = (timezone.now() - timedelta(minutes=2)).isoformat()[:19]
-        self.store_event(
+        self.event1 = self.store_event(
             data={
                 'event_id': 'a' * 32,
                 'type': 'default',
@@ -47,6 +48,19 @@ class SnubaEventStorageTest(TestCase):
 
         self.eventstore = SnubaEventStorage()
 
+    def test_get_events(self):
+        events = self.eventstore.get_events(filter_keys={'project_id': [self.project.id]})
+        assert len(events) == 3
+        # Default sort is timestamp desc, event_id desc
+        assert events[0].id == 'c' * 32
+        assert events[1].id == 'b' * 32
+        assert events[2].id == 'a' * 32
+
+        # No events found
+        project = self.create_project()
+        events = self.eventstore.get_events(filter_keys={'project_id': [project.id]})
+        assert events == []
+
     def test_get_event_by_id(self):
         # Get event with default columns
         event = self.eventstore.get_event_by_id(self.project.id, 'a' * 32)
diff --git a/tests/sentry/api/endpoints/test_organization_eventid.py b/tests/snuba/api/endpoints/test_organization_eventid.py
similarity index 66%
rename from tests/sentry/api/endpoints/test_organization_eventid.py
rename to tests/snuba/api/endpoints/test_organization_eventid.py
index a0555dbd55..2bccc0383c 100644
--- a/tests/sentry/api/endpoints/test_organization_eventid.py
+++ b/tests/snuba/api/endpoints/test_organization_eventid.py
@@ -1,18 +1,33 @@
 from __future__ import absolute_import
 
+import six
+from datetime import timedelta
+from django.utils import timezone
+
 from django.core.urlresolvers import reverse
 
-import six
 
-from sentry.testutils import APITestCase
+from sentry.testutils import APITestCase, SnubaTestCase
 
 
-class EventIdLookupEndpointTest(APITestCase):
+class EventIdLookupEndpointTest(APITestCase, SnubaTestCase):
     def setUp(self):
+        super(EventIdLookupEndpointTest, self).setUp()
+        min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
         self.org = self.create_organization(owner=self.user)
         self.project = self.create_project(organization=self.org)
-        self.group = self.create_group(checksum='a' * 32, project=self.project)
-        self.event = self.create_event('b' * 32, group=self.group)
+
+        self.event = self.store_event(
+            data={
+                'event_id': 'b' * 32,
+                'message': 'oh no',
+                'timestamp': min_ago,
+                'fingerprint': ['group-1']
+            },
+            project_id=self.project.id,
+        )
+
+        self.group = self.event.group
         self.login_as(user=self.user)
 
     def test_simple(self):
@@ -28,8 +43,8 @@ class EventIdLookupEndpointTest(APITestCase):
         assert response.data['organizationSlug'] == self.org.slug
         assert response.data['projectSlug'] == self.project.slug
         assert response.data['groupId'] == six.text_type(self.group.id)
-        assert response.data['eventId'] == six.text_type(self.event.id)
-        assert response.data['event']['id'] == six.text_type(self.event.id)
+        assert response.data['eventId'] == six.text_type(self.event.event_id)
+        assert response.data['event']['id'] == six.text_type(self.event.event_id)
 
     def test_missing_eventid(self):
         url = reverse(
