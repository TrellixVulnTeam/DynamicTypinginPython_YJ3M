commit 47ee39faae8587fe475ad62ef0af67440688ba6c
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Wed Oct 23 17:17:01 2019 -0400

    fix(discover2): The cursor url param for pagination persists through searches when they should not. (#15242)

diff --git a/src/sentry/static/sentry/app/views/events/utils/getParams.jsx b/src/sentry/static/sentry/app/views/events/utils/getParams.tsx
similarity index 82%
rename from src/sentry/static/sentry/app/views/events/utils/getParams.jsx
rename to src/sentry/static/sentry/app/views/events/utils/getParams.tsx
index a573f3a6e1..9fa0b86c15 100644
--- a/src/sentry/static/sentry/app/views/events/utils/getParams.jsx
+++ b/src/sentry/static/sentry/app/views/events/utils/getParams.tsx
@@ -9,13 +9,22 @@ const getUtcValue = utc => {
   return utc;
 };
 
+interface Params {
+  start?: string;
+  end?: string;
+  period?: string;
+  statsPeriod?: string;
+  utc?: string;
+  [others: string]: string | string[] | undefined | null;
+}
+
 // Filters out params with null values and returns a default
 // `statsPeriod` when necessary.
 //
 // Accepts `period` and `statsPeriod` but will only return `statsPeriod`
 //
 // TODO(billy): Make period parameter name consistent
-export function getParams(params = {}) {
+export function getParams(params: Params): {[key: string]: string | string[]} {
   const {start, end, period, statsPeriod, utc, ...otherParams} = params;
 
   // `statsPeriod` takes precendence for now
diff --git a/src/sentry/static/sentry/app/views/eventsV2/events.tsx b/src/sentry/static/sentry/app/views/eventsV2/events.tsx
index dc02ca904c..4ef28216f8 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/events.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/events.tsx
@@ -2,6 +2,7 @@ import React from 'react';
 import styled from 'react-emotion';
 import * as ReactRouter from 'react-router';
 import {Location} from 'history';
+import {omit} from 'lodash';
 
 import {Organization} from 'app/types';
 import space from 'app/styles/space';
@@ -31,12 +32,18 @@ type EventsProps = {
 export default class Events extends React.Component<EventsProps> {
   handleSearch = query => {
     const {router, location} = this.props;
+
+    const queryParams = getParams({
+      ...(location.query || {}),
+      query,
+    });
+
+    // do not propagate pagination when making a new search
+    const searchQueryParams = omit(queryParams, 'cursor');
+
     router.push({
       pathname: location.pathname,
-      query: getParams({
-        ...(location.query || {}),
-        query,
-      }),
+      query: searchQueryParams,
     });
   };
 
diff --git a/tests/js/spec/views/eventsV2/index.spec.jsx b/tests/js/spec/views/eventsV2/index.spec.jsx
index aafc23ece1..bef78d7c69 100644
--- a/tests/js/spec/views/eventsV2/index.spec.jsx
+++ b/tests/js/spec/views/eventsV2/index.spec.jsx
@@ -1,6 +1,8 @@
 import React from 'react';
 import {mountWithTheme} from 'sentry-test/enzyme';
 
+import {initializeOrg} from 'sentry-test/initializeOrg';
+
 import {EventsV2} from 'app/views/eventsV2';
 
 const FIELDS = [
@@ -20,7 +22,7 @@ const FIELDS = [
 
 const generateFields = () => {
   return {
-    alias: FIELDS.map(i => i.title),
+    fieldnames: FIELDS.map(i => i.title),
     field: FIELDS.map(i => i.field),
   };
 };
@@ -199,4 +201,56 @@ describe('EventsV2', function() {
     const modal = wrapper.find('EventDetails');
     expect(modal).toHaveLength(1);
   });
+
+  it('pagination cursor should be cleared when making a search', function() {
+    const organization = TestStubs.Organization({
+      features,
+      projects: [TestStubs.Project()],
+    });
+
+    const initialData = initializeOrg({
+      organization,
+      router: {
+        location: {query: {...generateFields(), cursor: '0%3A50%3A0'}},
+      },
+    });
+
+    const wrapper = mountWithTheme(
+      <EventsV2
+        organization={organization}
+        params={{orgId: organization.slug}}
+        location={initialData.router.location}
+        router={initialData.router}
+      />,
+      initialData.routerContext
+    );
+
+    // ensure cursor query string is initially present in the location
+
+    expect(initialData.router.location).toEqual({
+      query: {
+        ...generateFields(),
+        cursor: '0%3A50%3A0',
+      },
+    });
+
+    // perform a search
+
+    const search = wrapper.find('#smart-search-input').first();
+
+    search.simulate('change', {target: {value: 'geo:canada'}}).simulate('submit', {
+      preventDefault() {},
+    });
+
+    // cursor query string should be omitted from the query string
+
+    expect(initialData.router.push).toHaveBeenCalledWith({
+      pathname: undefined,
+      query: {
+        ...generateFields(),
+        query: 'geo:canada',
+        statsPeriod: '14d',
+      },
+    });
+  });
 });
