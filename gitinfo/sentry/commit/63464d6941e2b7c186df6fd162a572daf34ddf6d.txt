commit 63464d6941e2b7c186df6fd162a572daf34ddf6d
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Tue May 22 11:12:50 2018 -0700

    fix(api): Allow users who aren't owners of orgs to delete their accounts (#8486)

diff --git a/src/sentry/api/endpoints/user_details.py b/src/sentry/api/endpoints/user_details.py
index 2ce464037c..ea0abe5791 100644
--- a/src/sentry/api/endpoints/user_details.py
+++ b/src/sentry/api/endpoints/user_details.py
@@ -100,7 +100,7 @@ class AdminUserSerializer(BaseUserSerializer):
 
 
 class OrganizationsSerializer(serializers.Serializer):
-    organizations = ListField(child=serializers.CharField(), required=True)
+    organizations = ListField(child=serializers.CharField(required=False), required=True)
 
 
 class UserDetailsEndpoint(UserEndpoint):
diff --git a/src/sentry/api/serializers/rest_framework/list.py b/src/sentry/api/serializers/rest_framework/list.py
index 003dbb1a44..79a34d5ed4 100644
--- a/src/sentry/api/serializers/rest_framework/list.py
+++ b/src/sentry/api/serializers/rest_framework/list.py
@@ -44,7 +44,9 @@ class ListField(WritableField):
         return ', '.join(errors)
 
     def validate(self, value):
-        if not value and self.required:
+        # Allow empty lists when required=True unless child is also marked as required
+        if (value is None and self.required) or \
+                (not value and self.required and self.child and self.child.required):
             raise ValidationError(self.error_messages['required'])
 
         if not isinstance(value, list):
diff --git a/tests/sentry/api/endpoints/test_user_details.py b/tests/sentry/api/endpoints/test_user_details.py
index 122560e232..bed8dcd2ca 100644
--- a/tests/sentry/api/endpoints/test_user_details.py
+++ b/tests/sentry/api/endpoints/test_user_details.py
@@ -240,3 +240,41 @@ class UserUpdateTest(APITestCase):
         assert Organization.objects.get(id=not_owned_org.id).status == OrganizationStatus.ACTIVE
 
         assert response.status_code == 204
+
+    def test_close_account_no_orgs(self):
+        self.login_as(user=self.user)
+        org_single_owner = self.create_organization(name="A", owner=self.user)
+        user2 = self.create_user(email="user2@example.com")
+        org_with_other_owner = self.create_organization(name="B", owner=self.user)
+        org_as_other_owner = self.create_organization(name="C", owner=user2)
+        not_owned_org = self.create_organization(name="D", owner=user2)
+
+        self.create_member(
+            user=user2,
+            organization=org_with_other_owner,
+            role='owner',
+        )
+
+        self.create_member(
+            user=self.user,
+            organization=org_as_other_owner,
+            role='owner',
+        )
+
+        url = reverse(
+            'sentry-api-0-user-details', kwargs={
+                'user_id': self.user.id,
+            }
+        )
+
+        response = self.client.delete(url, data={
+            'organizations': []
+        })
+        assert response.status_code == 204
+
+        # deletes org_single_owner even though it wasn't specified in array
+        # because it has a single owner
+        assert Organization.objects.get(
+            id=org_single_owner.id).status == OrganizationStatus.PENDING_DELETION
+        # should NOT delete `not_owned_org`
+        assert Organization.objects.get(id=not_owned_org.id).status == OrganizationStatus.ACTIVE
