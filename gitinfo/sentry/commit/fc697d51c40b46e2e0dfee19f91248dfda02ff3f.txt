commit fc697d51c40b46e2e0dfee19f91248dfda02ff3f
Author: Mark Story <mark@sentry.io>
Date:   Tue Mar 3 13:22:54 2020 -0500

    fix(discover) Improve table resizing behavior (#17413)
    
    Improve the resizing of the results table in a few ways:
    
    * The last column is now always set to auto-fill. This prevents
      underflow situations where a query with narrow columns is loaded into
      a wider screen. It also prevents results from being resized so that
      they don't fill 100% of the available space.
    * Fixed the active state of the resize bar in firefox. Preventing the
      default there stops the `:active` style from being applied.
    * Made the resize bar hit area 1px wider on each side.
    * Double clicking the resize handle will convert a column to auto-fill
      making it easier to get back to an auto layout table.
    * Account for 0 length column tables.

diff --git a/src/sentry/static/sentry/app/components/gridEditable/index.tsx b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
index c36d153d28..488d3f8e86 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/index.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
@@ -181,8 +181,27 @@ class GridEditable<
     });
   }
 
+  onResetColumnSize = (e: React.MouseEvent, i: number) => {
+    e.stopPropagation();
+
+    const nextColumnOrder = [...this.props.columnOrder];
+    nextColumnOrder[i] = {
+      ...nextColumnOrder[i],
+      width: COL_WIDTH_UNDEFINED,
+    };
+    this.setGridTemplateColumns(nextColumnOrder);
+
+    const onResizeColumn = this.props.grid.onResizeColumn;
+    if (onResizeColumn) {
+      onResizeColumn(i, {
+        ...nextColumnOrder[i],
+        width: COL_WIDTH_UNDEFINED,
+      });
+    }
+  };
+
   onResizeMouseDown = (e: React.MouseEvent, i: number = -1) => {
-    e.preventDefault();
+    e.stopPropagation();
 
     // Block right-click and other funky stuff
     if (i === -1 || e.type === 'contextmenu') {
@@ -307,6 +326,7 @@ class GridEditable<
     if (!grid) {
       return;
     }
+
     const prependColumns = this.props.grid.prependColumnWidths || [];
     const prepend = prependColumns.join(' ');
     const widths = columnOrder.map(item => {
@@ -319,6 +339,12 @@ class GridEditable<
       return `${COL_WIDTH_MINIMUM}px`;
     });
 
+    // The last column has no resizer and should always be a flexible column
+    // to prevent underflows.
+    if (widths.length > 0) {
+      widths[widths.length - 1] = `minmax(${COL_WIDTH_MINIMUM}px, auto)`;
+    }
+
     grid.style.gridTemplateColumns = `${prepend} ${widths.join(' ')}`;
   }
 
@@ -442,12 +468,14 @@ class GridEditable<
             }}
           >
             {grid.renderHeadCell ? grid.renderHeadCell(column, i) : column.name}
-            <GridResizer
-              isLast={i === numColumn - 1}
-              dataRows={!error && !isLoading && data ? data.length : 0}
-              onMouseDown={e => this.onResizeMouseDown(e, i)}
-              onContextMenu={this.onResizeMouseDown}
-            />
+            {i !== numColumn - 1 && (
+              <GridResizer
+                dataRows={!error && !isLoading && data ? data.length : 0}
+                onMouseDown={e => this.onResizeMouseDown(e, i)}
+                onDoubleClick={e => this.onResetColumnSize(e, i)}
+                onContextMenu={this.onResizeMouseDown}
+              />
+            )}
           </GridHeadCell>
         ))}
       </GridRow>
diff --git a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
index 0c734e0de2..34c702b894 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
@@ -320,14 +320,13 @@ export const GridBodyCellStatus = props => (
  * We have a fat GridResizer and we use the ::after pseudo-element to draw
  * a thin 1px border.
  *
- * The right-most GridResizer has a width of 2px and no right padding to make it
- * more obvious as it is usually sitting next to the border for <Panel>
+ * The right most cell does not have a resizer as resizing from that side does strange things.
  */
-export const GridResizer = styled('div')<{dataRows: number; isLast?: boolean}>`
+export const GridResizer = styled('div')<{dataRows: number}>`
   position: absolute;
   top: 0px;
-  right: ${p => (p.isLast ? '0px' : '-5px')};
-  width: ${p => (p.isLast ? '6px' : '9px')};
+  right: -6px;
+  width: 11px;
 
   height: ${p => {
     const numOfRows = p.dataRows;
@@ -341,8 +340,8 @@ export const GridResizer = styled('div')<{dataRows: number; isLast?: boolean}>`
     return height;
   }}px;
 
-  padding-left: 4px;
-  padding-right: ${p => (p.isLast ? '0px' : '4px')};
+  padding-left: 5px;
+  padding-right: 5px;
 
   cursor: col-resize;
   z-index: ${Z_INDEX_GRID_RESIZER};
