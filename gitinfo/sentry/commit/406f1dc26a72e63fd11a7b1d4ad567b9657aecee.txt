commit 406f1dc26a72e63fd11a7b1d4ad567b9657aecee
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Aug 19 16:07:36 2019 -0400

    feat(ui): Add recent searches to search bar in Events (#14420)
    
    This adds recent searches to the Events search bar

diff --git a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
index 07e69cadf6..f0f76d64b0 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
@@ -4,7 +4,6 @@ import React from 'react';
 import Reflux from 'reflux';
 import * as Sentry from '@sentry/browser';
 import _ from 'lodash';
-import classNames from 'classnames';
 import createReactClass from 'create-react-class';
 import styled, {css} from 'react-emotion';
 
@@ -104,9 +103,7 @@ class SmartSearchBar extends React.Component {
   static propTypes = {
     api: PropTypes.object,
 
-    organization: SentryTypes.Organization,
-
-    orgId: PropTypes.string,
+    organization: SentryTypes.Organization.isRequired,
 
     // Class name for search dropdown
     dropdownClassName: PropTypes.string,
@@ -138,7 +135,13 @@ class SmartSearchBar extends React.Component {
     maxSearchItems: PropTypes.number,
 
     // List user's recent searches
-    displayRecentSearches: PropTypes.bool,
+    hasRecentSearches: PropTypes.bool,
+
+    // Has search builder UI
+    hasSearchBuilder: PropTypes.bool,
+
+    // Can create a saved search
+    canCreateSavedSearch: PropTypes.bool,
 
     /**
      * If this is defined, attempt to save search term scoped to the user and the current org
@@ -266,7 +269,13 @@ class SmartSearchBar extends React.Component {
   };
 
   doSearch = async () => {
-    const {onSearch, onSavedRecentSearch, api, orgId, savedSearchType} = this.props;
+    const {
+      onSearch,
+      onSavedRecentSearch,
+      api,
+      organization,
+      savedSearchType,
+    } = this.props;
     this.blur();
     const query = removeSpace(this.state.query);
     onSearch(query);
@@ -275,7 +284,7 @@ class SmartSearchBar extends React.Component {
     // Do not save empty string queries (i.e. if they clear search)
     if (typeof savedSearchType !== 'undefined' && query) {
       try {
-        await saveRecentSearch(api, orgId, savedSearchType, query);
+        await saveRecentSearch(api, organization.slug, savedSearchType, query);
 
         if (onSavedRecentSearch) {
           onSavedRecentSearch(query);
@@ -404,9 +413,9 @@ class SmartSearchBar extends React.Component {
    */
   getRecentSearches = _.debounce(
     async () => {
-      const {savedSearchType, displayRecentSearches, onGetRecentSearches} = this.props;
+      const {savedSearchType, hasRecentSearches, onGetRecentSearches} = this.props;
       // `savedSearchType` can be 0
-      if (!defined(savedSearchType) || !displayRecentSearches) {
+      if (!defined(savedSearchType) || !hasRecentSearches) {
         return [];
       }
 
@@ -418,11 +427,11 @@ class SmartSearchBar extends React.Component {
   );
 
   fetchRecentSearches = async fullQuery => {
-    const {api, orgId, savedSearchType} = this.props;
+    const {api, organization, savedSearchType} = this.props;
 
     const recentSearches = await fetchRecentSearches(
       api,
-      orgId,
+      organization.slug,
       savedSearchType,
       fullQuery
     );
@@ -572,12 +581,12 @@ class SmartSearchBar extends React.Component {
    * @param {String} type Defines the type/state of the dropdown menu items
    */
   updateAutoCompleteState = (searchItems, recentSearchItems, tagName, type) => {
-    const {displayRecentSearches, maxSearchItems} = this.props;
+    const {hasRecentSearches, maxSearchItems} = this.props;
 
     this.setState(
       createSearchGroups(
         searchItems,
-        displayRecentSearches ? recentSearchItems : null,
+        hasRecentSearches ? recentSearchItems : null,
         tagName,
         type,
         maxSearchItems
@@ -777,8 +786,10 @@ class SmartSearchBar extends React.Component {
     const {
       className,
       dropdownClassName,
-      hasPinnedSearch,
       organization,
+      hasPinnedSearch,
+      hasSearchBuilder,
+      canCreateSavedSearch,
       pinnedSearch,
       placeholder,
       disabled,
@@ -789,53 +800,62 @@ class SmartSearchBar extends React.Component {
     const pinIconSrc = !!pinnedSearch ? 'icon-pin-filled' : 'icon-pin';
     const hasQuery = !!this.state.query;
 
-    if (hasPinnedSearch) {
-      return (
-        <Container isDisabled={disabled} isOpen={this.state.dropdownVisible}>
-          <StyledForm onSubmit={this.onSubmit}>
-            <StyledInput
-              type="text"
-              placeholder={placeholder}
-              name="query"
-              innerRef={this.searchInput}
-              autoComplete="off"
-              value={this.state.query}
-              onFocus={this.onQueryFocus}
-              onBlur={this.onQueryBlur}
-              onKeyUp={this.onKeyUp}
-              onKeyDown={this.onKeyDown}
-              onChange={this.onQueryChange}
-              onClick={this.onInputClick}
-              disabled={disabled}
-            />
-            {(this.state.loading || this.state.searchItems.length > 0) && (
-              <DropdownWrapper visible={this.state.dropdownVisible}>
-                <SearchDropdown
-                  className={dropdownClassName}
-                  items={this.state.searchItems}
-                  onClick={this.onAutoComplete}
-                  loading={this.state.loading}
-                  searchSubstring={this.state.searchTerm}
-                />
-              </DropdownWrapper>
-            )}
-          </StyledForm>
-          <ButtonBar>
-            {this.state.query !== '' && (
-              <InputButton
-                type="button"
-                title={t('Clear search')}
-                borderless
-                aria-label="Clear search"
-                size="zero"
-                tooltipProps={{
-                  containerDisplayMode: 'inline-flex',
-                }}
-                onClick={this.clearSearch}
-              >
-                <InlineSvg src="icon-close" size="11" />
-              </InputButton>
-            )}
+    return (
+      <Container
+        className={className}
+        isDisabled={disabled}
+        isOpen={this.state.dropdownVisible}
+      >
+        <SearchLabel htmlFor="smart-search-input" aria-label={t('Search events')}>
+          <SearchSvg src="icon-search" />
+        </SearchLabel>
+
+        <StyledForm onSubmit={this.onSubmit}>
+          <StyledInput
+            type="text"
+            placeholder={placeholder}
+            id="smart-search-input"
+            name="query"
+            innerRef={this.searchInput}
+            autoComplete="off"
+            value={this.state.query}
+            onFocus={this.onQueryFocus}
+            onBlur={this.onQueryBlur}
+            onKeyUp={this.onKeyUp}
+            onKeyDown={this.onKeyDown}
+            onChange={this.onQueryChange}
+            onClick={this.onInputClick}
+            disabled={disabled}
+          />
+          {(this.state.loading || this.state.searchItems.length > 0) && (
+            <DropdownWrapper visible={this.state.dropdownVisible}>
+              <SearchDropdown
+                className={dropdownClassName}
+                items={this.state.searchItems}
+                onClick={this.onAutoComplete}
+                loading={this.state.loading}
+                searchSubstring={this.state.searchTerm}
+              />
+            </DropdownWrapper>
+          )}
+        </StyledForm>
+        <ButtonBar>
+          {this.state.query !== '' && (
+            <InputButton
+              type="button"
+              title={t('Clear search')}
+              borderless
+              aria-label="Clear search"
+              size="zero"
+              tooltipProps={{
+                containerDisplayMode: 'inline-flex',
+              }}
+              onClick={this.clearSearch}
+            >
+              <InlineSvg src="icon-close" size="11" />
+            </InputButton>
+          )}
+          {hasPinnedSearch && (
             <InputButton
               type="button"
               title={pinTooltip}
@@ -852,6 +872,8 @@ class SmartSearchBar extends React.Component {
             >
               <InlineSvg src={pinIconSrc} />
             </InputButton>
+          )}
+          {canCreateSavedSearch && (
             <CreateSavedSearchButton
               query={this.state.query}
               organization={organization}
@@ -862,6 +884,8 @@ class SmartSearchBar extends React.Component {
                 collapseIntoEllipsisMenu: 2,
               })}
             />
+          )}
+          {hasSearchBuilder && (
             <SearchBuilderButton
               title={t('Toggle search builder')}
               borderless
@@ -875,6 +899,9 @@ class SmartSearchBar extends React.Component {
             >
               <InlineSvg src="icon-sliders" size="13" />
             </SearchBuilderButton>
+          )}
+
+          {(hasPinnedSearch || canCreateSavedSearch || hasSearchBuilder) && (
             <StyledDropdownLink
               anchorRight={true}
               caret={false}
@@ -892,72 +919,37 @@ class SmartSearchBar extends React.Component {
                 </EllipsisButton>
               }
             >
-              <DropdownElement
-                showBelowMediaQuery={1}
-                data-test-id="pin-icon"
-                onClick={this.onTogglePinnedSearch}
-              >
-                <MenuIcon src={pinIconSrc} size="13" />
-                {!!pinnedSearch ? 'Unpin Search' : 'Pin Search'}
-              </DropdownElement>
-              <CreateSavedSearchButton
-                query={this.state.query}
-                organization={organization}
-                disabled={!hasQuery}
-                buttonClassName={getDropdownElementStyles({
-                  showBelowMediaQuery: 2,
-                  last: false,
-                })}
-              />
-              <DropdownElement showBelowMediaQuery={2} last onClick={onSidebarToggle}>
-                <MenuIcon src="icon-sliders" size="12" />
-                Toggle sidebar
-              </DropdownElement>
+              {hasPinnedSearch && (
+                <DropdownElement
+                  showBelowMediaQuery={1}
+                  data-test-id="pin-icon"
+                  onClick={this.onTogglePinnedSearch}
+                >
+                  <MenuIcon src={pinIconSrc} size="13" />
+                  {!!pinnedSearch ? 'Unpin Search' : 'Pin Search'}
+                </DropdownElement>
+              )}
+              {canCreateSavedSearch && (
+                <CreateSavedSearchButton
+                  query={this.state.query}
+                  organization={organization}
+                  disabled={!hasQuery}
+                  buttonClassName={getDropdownElementStyles({
+                    showBelowMediaQuery: 2,
+                    last: false,
+                  })}
+                />
+              )}
+              {hasSearchBuilder && (
+                <DropdownElement showBelowMediaQuery={2} last onClick={onSidebarToggle}>
+                  <MenuIcon src="icon-sliders" size="12" />
+                  Toggle sidebar
+                </DropdownElement>
+              )}
             </StyledDropdownLink>
-          </ButtonBar>
-        </Container>
-      );
-    }
-    const classes = classNames('search', {disabled}, className);
-
-    return (
-      <div className={classes}>
-        <form className="form-horizontal" onSubmit={this.onSubmit}>
-          <input
-            type="text"
-            className="search-input form-control"
-            placeholder={placeholder}
-            name="query"
-            ref={this.searchInput}
-            autoComplete="off"
-            value={this.state.query}
-            onFocus={this.onQueryFocus}
-            onBlur={this.onQueryBlur}
-            onKeyUp={this.onKeyUp}
-            onKeyDown={this.onKeyDown}
-            onChange={this.onQueryChange}
-            onClick={this.onInputClick}
-            disabled={disabled}
-          />
-          <span className="icon-search" />
-          {this.state.query !== '' && (
-            <a className="search-clear-form" onClick={this.clearSearch}>
-              <span className="icon-circle-cross" />
-            </a>
           )}
-          {(this.state.loading || this.state.searchItems.length > 0) && (
-            <DropdownWrapper visible={this.state.dropdownVisible}>
-              <SearchDropdown
-                className={dropdownClassName}
-                items={this.state.searchItems}
-                onClick={this.onAutoComplete}
-                loading={this.state.loading}
-                searchSubstring={this.state.searchTerm}
-              />
-            </DropdownWrapper>
-          )}
-        </form>
-      </div>
+        </ButtonBar>
+      </Container>
     );
   }
 }
@@ -996,14 +988,13 @@ const Container = styled('div')`
   border: 1px solid ${p => p.theme.borderLight};
   border-radius: ${p =>
     p.isOpen
-      ? `0 ${p.theme.borderRadius} 0 0`
-      : `0 ${p.theme.borderRadius} ${p.theme.borderRadius} 0`};
+      ? `${p.theme.borderRadius} ${p.theme.borderRadius} 0 0`
+      : p.theme.borderRadius};
   /* match button height */
   height: 40px;
   box-shadow: inset ${p => p.theme.dropShadowLight};
   background: #fff;
 
-  flex-grow: 1;
   position: relative;
 
   z-index: ${p => p.theme.zIndex.dropdown};
@@ -1072,7 +1063,7 @@ const StyledDropdownLink = styled(DropdownLink)`
 `;
 
 const DropdownElement = styled('a')`
-  ${p => getDropdownElementStyles(p)}
+  ${getDropdownElementStyles}
 `;
 
 const MenuIcon = styled(InlineSvg)`
@@ -1090,6 +1081,19 @@ const EllipsisIcon = styled(InlineSvg)`
   transform: rotate(90deg);
 `;
 
+const SearchLabel = styled('label')`
+  display: flex;
+  align-items: center;
+  margin: 0;
+  padding-left: ${space(1)};
+  color: ${p => p.theme.gray2};
+`;
+
+const SearchSvg = styled(InlineSvg)`
+  margin-top: ${space(0.25)};
+  margin-left: ${space(0.25)};
+`;
+
 function getTitleForType(type) {
   if (type === 'tag-value') {
     return t('Tag Values');
@@ -1179,7 +1183,7 @@ function createSearchGroups(
  *
  * @return {Array} Returns a tuple of [groupIndex, childrenIndex]
  */
-function findSearchItemByIndex(items, index, total) {
+function findSearchItemByIndex(items, index, _total) {
   let _index = index;
   let foundSearchItem;
   items.find(({children}, i) => {
diff --git a/src/sentry/static/sentry/app/icons/icon-search.svg b/src/sentry/static/sentry/app/icons/icon-search.svg
index 9231095790..60856e090f 100644
--- a/src/sentry/static/sentry/app/icons/icon-search.svg
+++ b/src/sentry/static/sentry/app/icons/icon-search.svg
@@ -1,4 +1,4 @@
-<svg viewBox="0 0 14 14">
+<svg viewBox="0 0 13 13">
   <g stroke="none" fill="currentColor">
     <path d="M8.3099521,6.89573854 L11.7071068,10.2928932 C12.0976311,10.6834175 12.0976311,11.3165825 11.7071068,11.7071068 C11.3165825,12.0976311 10.6834175,12.0976311 10.2928932,11.7071068 L6.89573854,8.3099521 C6.20201398,8.74709153 5.38054196,9 4.5,9 C2.01471863,9 0,6.98528137 0,4.5 C0,2.01471863 2.01471863,0 4.5,0 C6.98528137,0 9,2.01471863 9,4.5 C9,5.38054196 8.74709153,6.20201398 8.3099521,6.89573854 L8.3099521,6.89573854 Z M4.5,7 C5.88071187,7 7,5.88071187 7,4.5 C7,3.11928813 5.88071187,2 4.5,2 C3.11928813,2 2,3.11928813 2,4.5 C2,5.88071187 3.11928813,7 4.5,7 Z" />
   </g>
diff --git a/src/sentry/static/sentry/app/views/events/searchBar.jsx b/src/sentry/static/sentry/app/views/events/searchBar.jsx
index a5d679f9ba..631188ee90 100644
--- a/src/sentry/static/sentry/app/views/events/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/events/searchBar.jsx
@@ -3,7 +3,7 @@ import {flatten, memoize} from 'lodash';
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'app/constants';
+import {NEGATION_OPERATOR, SEARCH_TYPES, SEARCH_WILDCARD} from 'app/constants';
 import {addErrorMessage} from 'app/actionCreators/indicator';
 import {defined} from 'app/utils';
 import {fetchOrganizationTags, fetchTagValues} from 'app/actionCreators/tags';
@@ -31,25 +31,25 @@ class SearchBar extends React.PureComponent {
     organization: SentryTypes.Organization,
   };
 
-  constructor() {
-    super();
+  state = {
+    tags: {},
+  };
 
-    this.state = {
-      tags: {},
-    };
+  componentDidMount() {
+    this.fetchData();
   }
 
-  componentDidMount() {
+  fetchData = async () => {
     const {api, organization} = this.props;
-    fetchOrganizationTags(api, organization.slug).then(
-      results => {
-        this.setState({
-          tags: this.getAllTags(results.map(({key}) => key)),
-        });
-      },
-      () => addErrorMessage(t('There was a problem fetching tags'))
-    );
-  }
+    try {
+      const tags = await fetchOrganizationTags(api, organization.slug);
+      this.setState({
+        tags: this.getAllTags(tags.map(({key}) => key)),
+      });
+    } catch (_) {
+      addErrorMessage(t('There was a problem fetching tags'));
+    }
+  };
 
   /**
    * Returns array of tag values that substring match `query`; invokes `callback`
@@ -83,6 +83,8 @@ class SearchBar extends React.PureComponent {
     return (
       <SmartSearchBar
         {...this.props}
+        hasRecentSearches
+        savedSearchType={SEARCH_TYPES.EVENT}
         onGetTagValues={this.getEventFieldValues}
         supportedTags={this.state.tags}
         prepareQuery={this.prepareQuery}
diff --git a/src/sentry/static/sentry/app/views/issueList/filters.jsx b/src/sentry/static/sentry/app/views/issueList/filters.jsx
index 4f1e96dfb3..ef1422e9e8 100644
--- a/src/sentry/static/sentry/app/views/issueList/filters.jsx
+++ b/src/sentry/static/sentry/app/views/issueList/filters.jsx
@@ -99,7 +99,7 @@ class IssueListFilters extends React.Component {
           />
 
           <IssueListSearchBar
-            orgId={organization.slug}
+            organization={organization}
             query={query || ''}
             onSearch={onSearch}
             disabled={isSearchDisabled}
diff --git a/src/sentry/static/sentry/app/views/issueList/searchBar.jsx b/src/sentry/static/sentry/app/views/issueList/searchBar.jsx
index 086151a333..b9e881a69a 100644
--- a/src/sentry/static/sentry/app/views/issueList/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/issueList/searchBar.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import styled from 'react-emotion';
 
 import {SEARCH_TYPES} from 'app/constants';
 import {fetchRecentSearches} from 'app/actionCreators/savedSearches';
@@ -47,7 +48,6 @@ class IssueListSearchBar extends React.Component {
     ...SmartSearchBar.propTypes,
 
     savedSearch: SentryTypes.SavedSearch,
-    organization: SentryTypes.Organization.isRequired,
     tagValueLoader: PropTypes.func.isRequired,
     onSidebarToggle: PropTypes.func,
   };
@@ -98,8 +98,13 @@ class IssueListSearchBar extends React.Component {
   };
 
   getRecentSearches = async fullQuery => {
-    const {api, orgId} = this.props;
-    const recent = await fetchRecentSearches(api, orgId, SEARCH_TYPES.ISSUE, fullQuery);
+    const {api, organization} = this.props;
+    const recent = await fetchRecentSearches(
+      api,
+      organization.slug,
+      SEARCH_TYPES.ISSUE,
+      fullQuery
+    );
     return (recent && recent.map(({query}) => query)) || [];
   };
 
@@ -117,22 +122,30 @@ class IssueListSearchBar extends React.Component {
     } = this.props;
 
     return (
-      <React.Fragment>
-        <SmartSearchBar
-          onGetTagValues={this.getTagValues}
-          defaultSearchItems={this.state.defaultSearchItems}
-          maxSearchItems={5}
-          hasPinnedSearch={true}
-          savedSearchType={SEARCH_TYPES.ISSUE}
-          displayRecentSearches={true}
-          onSavedRecentSearch={this.handleSavedRecentSearch}
-          onSidebarToggle={onSidebarToggle}
-          pinnedSearch={savedSearch && savedSearch.isPinned ? savedSearch : null}
-          {...props}
-        />
-      </React.Fragment>
+      <SmartSearchBarNoLeftCorners
+        hasPinnedSearch
+        hasRecentSearches
+        hasSearchBuilder
+        canCreateSavedSearch
+        maxSearchItems={5}
+        savedSearchType={SEARCH_TYPES.ISSUE}
+        onGetTagValues={this.getTagValues}
+        defaultSearchItems={this.state.defaultSearchItems}
+        onSavedRecentSearch={this.handleSavedRecentSearch}
+        onSidebarToggle={onSidebarToggle}
+        pinnedSearch={savedSearch && savedSearch.isPinned ? savedSearch : null}
+        {...props}
+      />
     );
   }
 }
 
+const SmartSearchBarNoLeftCorners = styled(SmartSearchBar)`
+  border-radius: ${p =>
+    p.isOpen
+      ? `0 ${p.theme.borderRadius} 0 0`
+      : `0 ${p.theme.borderRadius} ${p.theme.borderRadius} 0`};
+  flex-grow: 1;
+`;
+
 export default withApi(withOrganization(IssueListSearchBar));
diff --git a/tests/js/spec/components/smartSearchBar.spec.jsx b/tests/js/spec/components/smartSearchBar.spec.jsx
index a01e58261b..9381cea34a 100644
--- a/tests/js/spec/components/smartSearchBar.spec.jsx
+++ b/tests/js/spec/components/smartSearchBar.spec.jsx
@@ -47,6 +47,10 @@ describe('SmartSearchBar', function() {
 
     options = TestStubs.routerContext([{organization}]);
 
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/recent-searches/',
+      body: [],
+    });
     environmentTagValuesMock = MockApiClient.addMockResponse({
       url: '/projects/123/456/tags/environment/values/',
       body: [],
@@ -60,7 +64,11 @@ describe('SmartSearchBar', function() {
   describe('componentWillReceiveProps()', function() {
     it('should add a space when setting state.query', function() {
       const searchBar = shallow(
-        <SmartSearchBar supportedTags={supportedTags} query="one" />,
+        <SmartSearchBar
+          organization={organization}
+          supportedTags={supportedTags}
+          query="one"
+        />,
         options
       );
 
@@ -69,7 +77,11 @@ describe('SmartSearchBar', function() {
 
     it('should update state.query if props.query is updated from outside', function() {
       const searchBar = shallow(
-        <SmartSearchBar supportedTags={supportedTags} query="one" />,
+        <SmartSearchBar
+          organization={organization}
+          supportedTags={supportedTags}
+          query="one"
+        />,
         options
       );
 
@@ -80,7 +92,11 @@ describe('SmartSearchBar', function() {
 
     it('should not reset user input if a noop props change happens', function() {
       const searchBar = shallow(
-        <SmartSearchBar supportedTags={supportedTags} query="one" />,
+        <SmartSearchBar
+          organization={organization}
+          supportedTags={supportedTags}
+          query="one"
+        />,
         options
       );
       searchBar.setState({query: 'two'});
@@ -92,7 +108,11 @@ describe('SmartSearchBar', function() {
 
     it('should reset user input if a meaningful props change happens', function() {
       const searchBar = shallow(
-        <SmartSearchBar supportedTags={supportedTags} query="one" />,
+        <SmartSearchBar
+          organization={organization}
+          supportedTags={supportedTags}
+          query="one"
+        />,
         options
       );
       searchBar.setState({query: 'two'});
@@ -137,8 +157,7 @@ describe('SmartSearchBar', function() {
   describe('clearSearch()', function() {
     it('clears the query', function() {
       const props = {
-        orgId: '123',
-        projectId: '456',
+        organization,
         query: 'is:unresolved ruby',
         defaultQuery: 'is:unresolved',
         supportedTags,
@@ -152,8 +171,7 @@ describe('SmartSearchBar', function() {
 
     it('calls onSearch()', async function() {
       const props = {
-        orgId: '123',
-        projectId: '456',
+        organization,
         query: 'is:unresolved ruby',
         defaultQuery: 'is:unresolved',
         supportedTags,
@@ -170,8 +188,7 @@ describe('SmartSearchBar', function() {
     it('displays the drop down', function() {
       const searchBar = shallow(
         <SmartSearchBar
-          orgId="123"
-          projectId="456"
+          organization={organization}
           supportedTags={supportedTags}
           onGetTagValues={tagValuesMock}
         />,
@@ -187,8 +204,7 @@ describe('SmartSearchBar', function() {
     it('displays dropdown in hasPinnedSearch mode', function() {
       const searchBar = shallow(
         <SmartSearchBar
-          orgId="123"
-          projectId="456"
+          organization={organization}
           supportedTags={supportedTags}
           onGetTagValues={tagValuesMock}
           hasPinnedSearch
@@ -206,7 +222,7 @@ describe('SmartSearchBar', function() {
   describe('onQueryBlur()', function() {
     it('hides the drop down', function() {
       const searchBar = shallow(
-        <SmartSearchBar orgId="123" projectId="456" supportedTags={supportedTags} />,
+        <SmartSearchBar organization={organization} supportedTags={supportedTags} />,
         options
       ).instance();
       searchBar.state.dropdownVisible = true;
@@ -222,8 +238,8 @@ describe('SmartSearchBar', function() {
   describe('onKeyUp()', function() {
     describe('escape', function() {
       it('blurs the input', function() {
-        const wrapper = shallow(
-          <SmartSearchBar orgId="123" projectId="456" supportedTags={supportedTags} />,
+        const wrapper = mount(
+          <SmartSearchBar organization={organization} supportedTags={supportedTags} />,
           options
         );
         wrapper.setState({dropdownVisible: true});
@@ -245,8 +261,6 @@ describe('SmartSearchBar', function() {
         <SmartSearchBar
           onSearch={stubbedOnSearch}
           organization={organization}
-          orgId="123"
-          projectId="456"
           query="is:unresolved"
           supportedTags={supportedTags}
         />,
@@ -264,15 +278,13 @@ describe('SmartSearchBar', function() {
       jest.useRealTimers();
       const props = {
         organization,
-        orgId: '123',
-        projectId: '456',
         query: 'is:unresolved',
         supportedTags,
         onSearch: jest.fn(),
       };
       const wrapper = mount(<SmartSearchBar {...props} />, options);
 
-      wrapper.find('.search-clear-form').simulate('click');
+      wrapper.find('button[aria-label="Clear search"]').simulate('click');
 
       await tick();
       expect(props.onSearch).toHaveBeenCalledWith('');
@@ -284,8 +296,6 @@ describe('SmartSearchBar', function() {
         <SmartSearchBar
           onSearch={stubbedOnSearch}
           organization={organization}
-          orgId="123"
-          projectId="456"
           query="is:unresolved"
           supportedTags={supportedTags}
           hasPinnedSearch
@@ -301,8 +311,6 @@ describe('SmartSearchBar', function() {
 
   it('handles an empty query', function() {
     const props = {
-      orgId: '123',
-      projectId: '456',
       query: '',
       defaultQuery: 'is:unresolved',
       organization,
@@ -318,8 +326,6 @@ describe('SmartSearchBar', function() {
     });
     it('sets state when empty', function() {
       const props = {
-        orgId: '123',
-        projectId: '456',
         query: '',
         organization,
         supportedTags,
@@ -333,8 +339,6 @@ describe('SmartSearchBar', function() {
 
     it('sets state when incomplete tag', async function() {
       const props = {
-        orgId: '123',
-        projectId: '456',
         query: 'fu',
         organization,
         supportedTags,
@@ -354,8 +358,6 @@ describe('SmartSearchBar', function() {
 
     it('sets state when incomplete tag has negation operator', async function() {
       const props = {
-        orgId: '123',
-        projectId: '456',
         query: '!fu',
         organization,
         supportedTags,
@@ -375,8 +377,6 @@ describe('SmartSearchBar', function() {
 
     it('sets state when incomplete tag as second input', async function() {
       const props = {
-        orgId: '123',
-        projectId: '456',
         query: 'is:unresolved fu',
         organization,
         supportedTags,
@@ -397,8 +397,6 @@ describe('SmartSearchBar', function() {
 
     it('does not request values when tag is environments', function() {
       const props = {
-        orgId: '123',
-        projectId: '456',
         query: 'environment:production',
         excludeEnvironment: true,
         organization,
@@ -417,8 +415,6 @@ describe('SmartSearchBar', function() {
         body: [],
       });
       const props = {
-        orgId: '123',
-        projectId: '456',
         query: 'timesSeen:',
         organization,
         supportedTags,
@@ -455,8 +451,6 @@ describe('SmartSearchBar', function() {
         <SmartSearchBar
           api={new Client()}
           organization={organization}
-          orgId={organization.slug}
-          projectId="456"
           query=""
           supportedTags={supportedTags}
           savedSearchType={0}
@@ -475,8 +469,6 @@ describe('SmartSearchBar', function() {
         <SmartSearchBar
           api={new Client()}
           organization={organization}
-          orgId={organization.slug}
-          projectId="456"
           query="is:unresolved"
           supportedTags={supportedTags}
           savedSearchType={0}
@@ -497,8 +489,6 @@ describe('SmartSearchBar', function() {
         <SmartSearchBar
           api={new Client()}
           organization={organization}
-          orgId={organization.slug}
-          projectId="456"
           query="is:unresolved"
           supportedTags={supportedTags}
           savedSearchType={0}
diff --git a/tests/js/spec/views/events/events.spec.jsx b/tests/js/spec/views/events/events.spec.jsx
index a4303c6fcc..3f74fc8c4a 100644
--- a/tests/js/spec/views/events/events.spec.jsx
+++ b/tests/js/spec/views/events/events.spec.jsx
@@ -48,6 +48,10 @@ describe('EventsErrors', function() {
   let eventsMetaMock;
 
   beforeAll(function() {
+    MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/recent-searches/`,
+      body: [],
+    });
     MockApiClient.addMockResponse({
       url: `/organizations/${organization.slug}/environments/`,
       body: TestStubs.Environments(),
diff --git a/tests/js/spec/views/events/searchBar.spec.jsx b/tests/js/spec/views/events/searchBar.spec.jsx
index c58d258dac..45a614cf25 100644
--- a/tests/js/spec/views/events/searchBar.spec.jsx
+++ b/tests/js/spec/views/events/searchBar.spec.jsx
@@ -39,6 +39,11 @@ describe('SearchBar', function() {
 
     options = TestStubs.routerContext();
 
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/recent-searches/',
+      body: [],
+    });
+
     tagValuesMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/tags/gpu/values/',
       body: [{count: 2, name: 'Nvidia 1080ti'}],
diff --git a/tests/js/spec/views/issueList/searchBar.spec.jsx b/tests/js/spec/views/issueList/searchBar.spec.jsx
index 80148173cf..f859e1066e 100644
--- a/tests/js/spec/views/issueList/searchBar.spec.jsx
+++ b/tests/js/spec/views/issueList/searchBar.spec.jsx
@@ -6,11 +6,14 @@ import IssueListSearchBar from 'app/views/issueList/searchBar';
 import TagStore from 'app/stores/tagStore';
 
 describe('IssueListSearchBar', function() {
-  let options;
   let tagValuePromise;
   let supportedTags;
   let recentSearchMock;
 
+  const {routerContext, organization} = initializeOrg({
+    organization: {access: [], features: []},
+  });
+
   const clickInput = searchBar => searchBar.find('input[name="query"]').simulate('click');
 
   beforeEach(function() {
@@ -18,10 +21,6 @@ describe('IssueListSearchBar', function() {
     TagStore.onLoadTagsSuccess(TestStubs.Tags());
     supportedTags = TagStore.getAllTags();
 
-    options = TestStubs.routerContext([
-      {organization: {id: '123', access: [], features: []}},
-    ]);
-
     tagValuePromise = Promise.resolve([]);
 
     recentSearchMock = MockApiClient.addMockResponse({
@@ -51,13 +50,13 @@ describe('IssueListSearchBar', function() {
         return tagValuePromise;
       };
       const props = {
-        orgId: 'org-slug',
+        organization,
         query: 'url:"fu"',
         tagValueLoader: loader,
         supportedTags,
         onSearch: jest.fn(),
       };
-      const searchBar = mount(<IssueListSearchBar {...props} />, options);
+      const searchBar = mount(<IssueListSearchBar {...props} />, routerContext);
       clickInput(searchBar);
       jest.advanceTimersByTime(301);
       expect(searchBar.find('SearchDropdown').prop('searchSubstring')).toEqual('"fu"');
@@ -72,7 +71,7 @@ describe('IssueListSearchBar', function() {
       };
 
       const props = {
-        orgId: 'org-slug',
+        organization,
         projectId: '456',
         query: 'url:"http://example.com"',
         tagValueLoader: loader,
@@ -80,7 +79,7 @@ describe('IssueListSearchBar', function() {
         onSearch: jest.fn(),
       };
 
-      const searchBar = mount(<IssueListSearchBar {...props} />, options);
+      const searchBar = mount(<IssueListSearchBar {...props} />, routerContext);
       clickInput(searchBar);
       expect(searchBar.state.searchTerm).toEqual();
       expect(searchBar.find('SearchDropdown').prop('searchSubstring')).toEqual(
@@ -95,14 +94,14 @@ describe('IssueListSearchBar', function() {
       const loader = jest.fn(x => x);
 
       const props = {
-        orgId: 'org-slug',
+        organization,
         projectId: '456',
         query: 'timesSeen:',
         tagValueLoader: loader,
         supportedTags,
         onSearch: jest.fn(),
       };
-      const searchBar = mount(<IssueListSearchBar {...props} />, options);
+      const searchBar = mount(<IssueListSearchBar {...props} />, routerContext);
       clickInput(searchBar);
       jest.advanceTimersByTime(301);
       expect(loader).not.toHaveBeenCalled();
@@ -124,13 +123,13 @@ describe('IssueListSearchBar', function() {
       };
       const onSearch = jest.fn();
       const props = {
-        orgId: 'org-slug',
+        organization,
         query: 'url:"fu"',
         onSearch,
         tagValueLoader: loader,
         supportedTags,
       };
-      const searchBar = mount(<IssueListSearchBar {...props} />, options);
+      const searchBar = mount(<IssueListSearchBar {...props} />, routerContext);
       clickInput(searchBar);
       jest.advanceTimersByTime(301);
       expect(searchBar.find('SearchDropdown').prop('searchSubstring')).toEqual('"fu"');
@@ -155,7 +154,7 @@ describe('IssueListSearchBar', function() {
 
     it('queries for recent searches', async function() {
       const props = {
-        orgId: 'org-slug',
+        organization,
         query: 'timesSeen:',
         tagValueLoader: () => {},
         savedSearchType: 0,
@@ -163,7 +162,7 @@ describe('IssueListSearchBar', function() {
         supportedTags,
       };
       jest.useRealTimers();
-      const wrapper = mount(<IssueListSearchBar {...props} />, options);
+      const wrapper = mount(<IssueListSearchBar {...props} />, routerContext);
 
       wrapper.find('input').simulate('change', {target: {value: 'is:'}});
       await tick();
@@ -183,7 +182,7 @@ describe('IssueListSearchBar', function() {
 
     it('cycles through keyboard navigation for selection', async function() {
       const props = {
-        orgId: 'org-slug',
+        organization,
         query: 'timesSeen:',
         tagValueLoader: () => {},
         savedSearchType: 0,
@@ -191,7 +190,7 @@ describe('IssueListSearchBar', function() {
         supportedTags,
       };
       jest.useRealTimers();
-      const wrapper = mount(<IssueListSearchBar {...props} />, options);
+      const wrapper = mount(<IssueListSearchBar {...props} />, routerContext);
 
       wrapper.find('input').simulate('change', {target: {value: 'is:'}});
       await tick();
@@ -220,9 +219,6 @@ describe('IssueListSearchBar', function() {
   describe('Pinned Searches', function() {
     let pinSearch;
     let unpinSearch;
-    const {organization, routerContext} = initializeOrg({
-      organization: {access: [], features: []},
-    });
 
     beforeEach(function() {
       MockApiClient.clearMockResponses();
@@ -245,7 +241,6 @@ describe('IssueListSearchBar', function() {
 
     it('has pin icon', function() {
       const props = {
-        orgId: organization.slug,
         query: 'url:"fu"',
         onSearch: jest.fn(),
         tagValueLoader: () => Promise.resolve([]),
@@ -258,7 +253,6 @@ describe('IssueListSearchBar', function() {
 
     it('pins a search from the searchbar', function() {
       const props = {
-        orgId: organization.slug,
         query: 'url:"fu"',
         onSearch: jest.fn(),
         tagValueLoader: () => Promise.resolve([]),
@@ -282,7 +276,6 @@ describe('IssueListSearchBar', function() {
 
     it('unpins a search from the searchbar', function() {
       const props = {
-        orgId: organization.slug,
         query: 'url:"fu"',
         onSearch: jest.fn(),
         tagValueLoader: () => Promise.resolve([]),
