commit 3c2956da52e9524ba49998fa848c0085c674ff46
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Jan 4 12:52:14 2018 -0800

    fix(ui): Fix Select2Field for new settings, fix default role field (#6857)
    
    * fix(ui): Fix Select2Field for new settings, fix default role field
    
    * select2 disabled css expects "form-control" on container
    
    * fix default role access
    
    * change hover state to be handled by styled component instead of react state

diff --git a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
index 2c6eea2b4f..c3306f29d0 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
@@ -40,9 +40,12 @@ const forms = [
         required: true,
         label: 'Default Role',
         // seems weird to have choices in initial form data
-        choices: ({data}) => data.availableRoles.map(r => [r.id, r.name]),
+        choices: ({initialData} = {}) =>
+          (initialData.availableRoles &&
+            initialData.availableRoles.map(r => [r.id, r.name])) ||
+          [],
         help: 'The default role new members will receive.',
-        getValue: (val, {access}) => (access.has('org:admin') ? val : undefined),
+        disabled: ({access}) => !access.has('org:admin'),
       },
       {
         name: 'openMembership',
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
index e89b32f320..95b92067df 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
@@ -25,16 +25,12 @@ export default class FieldFromConfig extends React.Component {
       help: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
       extraHelp: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
       visible: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
+      disabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
       getValue: PropTypes.func,
       setValue: PropTypes.func,
     }).isRequired,
   };
 
-  static defaultProps = {
-    formData: {},
-    formErrors: {},
-  };
-
   render() {
     let {field, ...otherProps} = this.props;
 
@@ -44,21 +40,6 @@ export default class FieldFromConfig extends React.Component {
       ...field,
     };
 
-    // let props = Object.assign(Object.assign({}, field), {
-    // value: this.props.formData[field.name],
-    // onChange: this.props.onChange,
-    // label: field.label + (required ? '*' : ''),
-    // required,
-    // error: (this.props.formErrors || {})[field.name],
-    // disabled: field.readonly,
-    // key: field.name,
-    // formState: this.props.formState,
-    // help:
-    // defined(field.help) && field.help !== '' ? (
-    // <span dangerouslySetInnerHTML={{__html: field.help}} />
-    // ) : null,
-    // });
-
     switch (field.type) {
       case 'secret':
         return <PasswordField {...props} />;
@@ -83,6 +64,7 @@ export default class FieldFromConfig extends React.Component {
         return <TextareaField {...props} />;
       case 'choice':
       case 'select':
+      case 'array':
         // the chrome required tip winds up in weird places
         // for select2 elements, so just make it look like
         // it's required (with *) and rely on server validation
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldWrapper.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldWrapper.jsx
index 3899f76cbb..7fc9f02455 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldWrapper.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldWrapper.jsx
@@ -2,12 +2,23 @@ import React from 'react';
 import styled, {css} from 'react-emotion';
 import {Flex} from 'grid-emotion';
 
+import SettingsInputField from '../styled/input';
+import SettingsTextAreaField from '../styled/textarea';
+
 const FormFieldWrapper = styled(({highlighted, ...props}) => <Flex {...props} />)`
   padding: 15px 20px;
   border-bottom: 1px solid ${p => p.theme.borderLight};
   align-items: center;
   transition: background 0.15s;
 
+  &:hover {
+    ${SettingsInputField}, ${SettingsTextAreaField} {
+      ${p => css`
+        background: ${p.error ? '#fff' : p.theme.offWhite};
+      `};
+    }
+  }
+
   ${p =>
     p.highlighted
       ? css`
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
index d03478102d..e0a5ea5c4a 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
@@ -66,7 +66,7 @@ class FormField extends React.Component {
 
     label: PropTypes.string,
     defaultValue: PropTypes.any,
-    disabled: PropTypes.bool,
+    disabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
     disabledReason: PropTypes.string,
     help: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
     required: PropTypes.bool,
@@ -139,22 +139,6 @@ class FormField extends React.Component {
     this.input = ref;
   };
 
-  /**
-   * Set field's hover state and propagate callbacks
-   */
-  handleHover = (mouseOver, ...args) => {
-    let {name, onMouseOver, onMouseOut} = this.props;
-    let model = this.getModel();
-
-    model.setFieldState(name, FormState.HOVER, mouseOver);
-    if (onMouseOver) {
-      onMouseOver(...args);
-    }
-    if (onMouseOut) {
-      onMouseOut(...args);
-    }
-  };
-
   /**
    * Update field value in form model
    */
@@ -215,13 +199,10 @@ class FormField extends React.Component {
     } = this.props;
     let id = this.getId();
     let model = this.getModel();
+    let isDisabled = typeof disabled === 'function' ? disabled(this.props) : disabled;
 
     return (
-      <FormFieldWrapper
-        highlighted={highlighted}
-        onMouseOver={e => this.handleHover(true, e)}
-        onMouseOut={e => this.handleHover(false, e)}
-      >
+      <FormFieldWrapper highlighted={highlighted}>
         <FormFieldDescription>
           {label && (
             <FormFieldLabel>
@@ -242,19 +223,20 @@ class FormField extends React.Component {
                   {...{
                     ...this.props,
                     id,
-                    hover: model.getFieldState(this.props.name, FormState.HOVER),
                     onKeyDown: this.handleKeyDown,
                     onChange: this.handleChange,
                     onBlur: this.handleBlur,
                     value,
                     error,
+                    disabled: isDisabled,
                   }}
+                  initialData={model.initialData}
                 />
               );
             }}
           </Observer>
 
-          {disabled &&
+          {isDisabled &&
             disabledReason && (
               <span className="disabled-indicator tip" title={disabledReason}>
                 <span className="icon-question" />
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
index d76a357b51..e180b47281 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
@@ -19,6 +19,7 @@ class JsonForm extends React.Component {
         fields: PropTypes.arrayOf(FieldFromConfig.propTypes.field),
       })
     ).isRequired,
+    access: PropTypes.object,
   };
 
   static contextTypes = {
@@ -53,7 +54,7 @@ class JsonForm extends React.Component {
   }
 
   render() {
-    let {forms, ...otherProps} = this.props;
+    let {forms, access, ...otherProps} = this.props;
 
     return (
       <Box>
@@ -64,6 +65,7 @@ class JsonForm extends React.Component {
               <PanelBody>
                 {fields.map(field => (
                   <FieldFromConfig
+                    access={access}
                     key={field.name}
                     {...otherProps}
                     field={field}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/select2Field.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/select2Field.jsx
index dd818d1b52..2d731ce363 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/select2Field.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/select2Field.jsx
@@ -7,7 +7,7 @@ import InputField from './inputField';
 export default class Select2Field extends React.Component {
   static propTypes = {
     ...InputField.propTypes,
-    choices: PropTypes.array.isRequired,
+    choices: PropTypes.oneOfType([PropTypes.array, PropTypes.func]).isRequired,
     allowClear: PropTypes.bool,
     allowEmpty: PropTypes.bool,
     multiple: PropTypes.bool,
@@ -24,11 +24,9 @@ export default class Select2Field extends React.Component {
   };
 
   componentWillUnmount() {
-    if (this.select) {
-      jQuery(this.select)
-        .off('change')
-        .select2('destroy');
-    }
+    if (!this.select) return;
+
+    this.select = null;
   }
 
   onChange = (onBlur, onChange, e) => {
@@ -50,15 +48,23 @@ export default class Select2Field extends React.Component {
     }
   };
 
+  // Note: mouse hovers will trigger re-render, and re-mounts the native `select` element
+  // This will cause an infinite loop because hover state causes re-render, and then we call $.select2, which
+  // genenerates a new element which will then cause a new hover event.
+  //
+  // HOWEVER we need this behavior because we may re-render from an event and during reconciliation we'll have
+  // an additional native `select` (e.g. when we save an org setting field)
+  //
+  // Handle this right now by disabling hover state completely
   handleSelectMount = (onBlur, onChange, ref) => {
-    if (ref) {
+    if (ref && !this.select) {
       jQuery(ref)
         .select2(this.getSelect2Options())
         .on('change', this.onChange.bind(this, onBlur, onChange));
-    } else {
+    } else if (!ref) {
       jQuery(this.select)
-        .select2('destroy')
-        .off('change');
+        .off('change')
+        .select2('destroy');
     }
 
     this.select = ref;
@@ -77,22 +83,32 @@ export default class Select2Field extends React.Component {
     return (
       <InputField
         {...this.props}
-        field={({onChange, onBlur, ...props}) => (
-          <select
-            ref={ref => this.handleSelectMount(onBlur, onChange, ref)}
-            style={{width: '100%'}}
-            onChange={() => {}}
-            value={props.value}
-          >
-            {(props.choices || []).map(choice => {
-              return (
-                <option key={choice[0]} value={choice[0]}>
-                  {choice[1]}
-                </option>
-              );
-            })}
-          </select>
-        )}
+        field={({onChange, onBlur, disabled, ...props}) => {
+          let choices = props.choices || [];
+
+          if (typeof props.choices === 'function') {
+            choices = props.choices(props);
+          }
+
+          return (
+            <select
+              disabled={disabled}
+              className="form-control"
+              ref={ref => this.handleSelectMount(onBlur, onChange, ref)}
+              style={{width: '100%'}}
+              onChange={() => {}}
+              value={props.value}
+            >
+              {choices.map(choice => {
+                return (
+                  <option key={choice[0]} value={choice[0]}>
+                    {choice[1]}
+                  </option>
+                );
+              })}
+            </select>
+          );
+        }}
       />
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/styled/styles.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/styled/styles.jsx
index e84b0408fe..1f3659ebb5 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/styled/styles.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/styled/styles.jsx
@@ -17,23 +17,16 @@ const inputStyles = props => css`
   }
 
   ${p => {
-    if (props.hover) {
+    if (props.error) {
       return css`
-        background: ${props.error ? '#fff' : props.theme.offWhite};
-      `;
-    }
-    return '';
-  }} ${p => {
-      if (props.error) {
-        return css`
     background: #f7f7f9;
     &:hover, &:focus {
       background: #f7f7f9};
     }
     `;
-      }
-      return '';
-    }} &::placeholder {
+    }
+    return '';
+  }} &::placeholder {
     color: ${props.theme.gray2};
   }
 `;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
index 29c9804793..bd55632b4d 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
@@ -29,7 +29,7 @@ const NewOrganizationSettingsForm = createReactClass({
   mixins: [ApiMixin],
 
   render() {
-    let {initialData, orgId, onSave} = this.props;
+    let {initialData, orgId, onSave, access} = this.props;
 
     return (
       <Form
@@ -59,7 +59,11 @@ const NewOrganizationSettingsForm = createReactClass({
         onSubmitError={() => addErrorMessage('Unable to save change', TOAST_DURATION)}
       >
         <Box>
-          <JsonForm location={this.props.location} forms={organizationSettingsFields} />
+          <JsonForm
+            access={access}
+            location={this.props.location}
+            forms={organizationSettingsFields}
+          />
         </Box>
       </Form>
     );
