commit ffb1cd129e68bf2e9930320e840fd1fe2cb584c0
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Mar 25 20:50:33 2012 -0700

    Add project to filters to correct FilterValue query

diff --git a/sentry/filters/base.py b/sentry/filters/base.py
index 5f8370fea9..a11fac86f6 100644
--- a/sentry/filters/base.py
+++ b/sentry/filters/base.py
@@ -36,8 +36,9 @@ class Filter(object):
     show_label = True
     types = [Group, Event]
 
-    def __init__(self, request):
+    def __init__(self, request, project):
         self.request = request
+        self.project = project
 
     def is_set(self):
         return bool(self.get_value())
@@ -61,7 +62,7 @@ class Filter(object):
         return '?' + query_dict.urlencode()
 
     def get_choices(self):
-        return SortedDict((l, l) for l in FilterValue.objects.filter(key=self.column)\
+        return SortedDict((l, l) for l in FilterValue.objects.filter(project=self.project, key=self.column)\
                                                      .values_list('value', flat=True)\
                                                      .order_by('value'))
 
diff --git a/sentry/web/frontend/events.py b/sentry/web/frontend/events.py
index 3a56186d0b..375254f6c4 100644
--- a/sentry/web/frontend/events.py
+++ b/sentry/web/frontend/events.py
@@ -6,6 +6,7 @@ sentry.web.frontend.events
 :license: BSD, see LICENSE for more details.
 """
 import datetime
+import logging
 
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
@@ -26,7 +27,11 @@ from sentry.web.forms import ReplayForm
 def event_list(request, project):
     filters = []
     for cls in Filter.objects.filter(Event):
-        filters.append(cls(request))
+        try:
+            filters.append(cls(request, project))
+        except Exception, e:
+            logger = logging.getLogger('sentry.filters')
+            logger.exception('Error initializing filter %r: %s', cls, e)
 
     try:
         page = int(request.GET.get('p', 1))
@@ -37,9 +42,13 @@ def event_list(request, project):
 
     # TODO: implement separate API for messages
     for filter_ in filters:
-        if not filter_.is_set():
-            continue
-        event_list = filter_.get_query_set(event_list)
+        try:
+            if not filter_.is_set():
+                continue
+            event_list = filter_.get_query_set(event_list)
+        except Exception, e:
+            logger = logging.getLogger('sentry.filters')
+            logger.exception('Error processing filter %r: %s', cls, e)
 
     offset = (page - 1) * settings.MESSAGES_PER_PAGE
     limit = page * settings.MESSAGES_PER_PAGE
diff --git a/sentry/web/frontend/groups.py b/sentry/web/frontend/groups.py
index a001368923..53024396a5 100644
--- a/sentry/web/frontend/groups.py
+++ b/sentry/web/frontend/groups.py
@@ -49,7 +49,11 @@ def _get_rendered_interfaces(event):
 def _get_group_list(request, project, view=None):
     filters = []
     for cls in Filter.objects.filter(Group):
-        filters.append(cls(request))
+        try:
+            filters.append(cls(request, project))
+        except Exception, e:
+            logger = logging.getLogger('sentry.filters')
+            logger.exception('Error initializing filter %r: %s', cls, e)
 
     event_list = Group.objects
     if request.GET.get('bookmarks'):
@@ -64,9 +68,13 @@ def _get_group_list(request, project, view=None):
         event_list = event_list.filter(views=view)
 
     for filter_ in filters:
-        if not filter_.is_set():
-            continue
-        event_list = filter_.get_query_set(event_list)
+        try:
+            if not filter_.is_set():
+                continue
+            event_list = filter_.get_query_set(event_list)
+        except Exception, e:
+            logger = logging.getLogger('sentry.filters')
+            logger.exception('Error processing filter %r: %s', cls, e)
 
     sort = request.GET.get('sort')
     if sort not in SORT_OPTIONS:
