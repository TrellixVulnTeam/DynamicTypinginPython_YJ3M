commit f1db03ea8f25b6085ca08a3d12dc5a83225afb70
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Wed Jan 23 11:16:37 2019 +0100

    fix: Skip broken tags in save() and plugins (#11643)
    
    * fix: Skip broken tags in save() and plugins
    
    * fix: Use setdefault_path
    
    * fix: Do not index null tags
    
    * fix: Skip null values in tags
    
    * fix: kwarg for setdefault_path

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 181f6f5f68..b5e3b72273 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -83,11 +83,21 @@ SECURITY_REPORT_INTERFACES = (
 ENABLE_RUST = os.environ.get("SENTRY_USE_RUST_NORMALIZER", "false").lower() in ("1", "true")
 
 
+def pop_tag(data, key):
+    data['tags'] = [kv for kv in data['tags'] if kv is None or kv[0] != key]
+
+
 def set_tag(data, key, value):
-    data['tags'] = [(k, v) for k, v in data['tags'] if k != key]
+    pop_tag(data, key)
     data['tags'].append((key, value))
 
 
+def get_tag(data, key):
+    for k, v in get_path(data, 'tags', filter=True):
+        if k == key:
+            return v
+
+
 def get_event_metadata_compat(data, fallback_message):
     """This is a fallback path to getting the event metadata.  This is used
     by some code paths that could potentially deal with old sentry events that
@@ -911,42 +921,38 @@ class EventManager(object):
         # into tags (logger, level, environment, transaction).  These are
         # different from legacy attributes which are normalized into tags
         # ahead of time (site, server_name).
-        tags = dict(data.get('tags') or [])
-        tags['level'] = level
+        setdefault_path(data, 'tags', value=[])
+        set_tag(data, 'level', level)
         if logger_name:
-            tags['logger'] = logger_name
+            set_tag(data, 'logger', logger_name)
         if environment:
-            tags['environment'] = trim(environment, MAX_TAG_VALUE_LENGTH)
+            set_tag(data, 'environment', trim(environment, MAX_TAG_VALUE_LENGTH))
         if transaction_name:
-            tags['transaction'] = trim(transaction_name, MAX_TAG_VALUE_LENGTH)
+            set_tag(data, 'transaction', trim(transaction_name, MAX_TAG_VALUE_LENGTH))
 
         if release:
             # dont allow a conflicting 'release' tag
-            if 'release' in tags:
-                del tags['release']
+            pop_tag(data, 'release')
             release = Release.get_or_create(
                 project=project,
                 version=release,
                 date_added=date,
             )
-
-            tags['sentry:release'] = release.version
+            set_tag(data, 'sentry:release', release.version)
 
         if dist and release:
             dist = release.add_dist(dist, date)
             # dont allow a conflicting 'dist' tag
-            if 'dist' in tags:
-                del tags['dist']
-            tags['sentry:dist'] = dist.name
+            pop_tag(data, 'dist')
+            set_tag(data, 'sentry:dist', dist.name)
         else:
             dist = None
 
         event_user = self._get_event_user(project, data)
         if event_user:
             # dont allow a conflicting 'user' tag
-            if 'user' in tags:
-                del tags['user']
-            tags['sentry:user'] = event_user.tag_value
+            pop_tag(data, 'user')
+            set_tag(data, 'sentry:user', event_user.tag_value)
 
         # At this point we want to normalize the in_app values in case the
         # clients did not set this appropriately so far.
@@ -957,20 +963,17 @@ class EventManager(object):
             if added_tags:
                 # plugins should not override user provided tags
                 for key, value in added_tags:
-                    tags.setdefault(key, value)
+                    if get_tag(data, key) is None:
+                        set_tag(data, key, value)
 
         for path, iface in six.iteritems(event.interfaces):
             for k, v in iface.iter_tags():
-                tags[k] = v
+                set_tag(data, k, v)
             # Get rid of ephemeral interface data
             if iface.ephemeral:
                 data.pop(iface.path, None)
 
-        # tags are stored as a tuple
-        tags = tags.items()
-
-        # Put the actual tags and fingerprint back
-        data['tags'] = tags
+        # Put the actual fingerprint back
         data['fingerprint'] = fingerprint
 
         hashes = event.get_hashes()
@@ -1166,7 +1169,7 @@ class EventManager(object):
                 group_id=group.id,
                 environment_id=environment.id,
                 event_id=event.id,
-                tags=tags,
+                tags=event.tags,
                 date_added=event.datetime,
             )
 
@@ -1196,7 +1199,12 @@ class EventManager(object):
                     }
                 )
 
-        safe_execute(Group.objects.add_tags, group, environment, tags, _with_transaction=False)
+        safe_execute(
+            Group.objects.add_tags,
+            group,
+            environment,
+            data['tags'],
+            _with_transaction=False)
 
         if not raw:
             if not project.first_event:
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 4df9449df7..c7365b9908 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -206,7 +206,8 @@ class Event(Model):
 
     def get_tags(self):
         try:
-            return sorted((t, v) for t, v in self.data.get('tags') or ())
+            return sorted((t, v) for t, v in get_path(
+                self.data, 'tags', filter=True) or () if v is not None)
         except ValueError:
             # at one point Sentry allowed invalid tag sets such as (foo, bar)
             # vs ((tag, foo), (tag, bar))
diff --git a/tests/sentry/event_manager/test_event_manager.py b/tests/sentry/event_manager/test_event_manager.py
index 09b5eaef83..9680904ef1 100644
--- a/tests/sentry/event_manager/test_event_manager.py
+++ b/tests/sentry/event_manager/test_event_manager.py
@@ -14,7 +14,7 @@ from time import time
 
 from sentry.app import tsdb
 from sentry.constants import VERSION_LENGTH
-from sentry.event_manager import HashDiscarded, EventManager, EventUser
+from sentry.event_manager import HashDiscarded, EventManager, EventUser, ENABLE_RUST
 from sentry.event_hashing import md5_from_hash
 from sentry.models import (
     Activity, Environment, Event, ExternalIssue, Group, GroupEnvironment,
@@ -899,6 +899,18 @@ class EventManagerTest(TransactionTestCase):
         event = manager.save(self.project.id)
         assert dict(event.tags).get('environment') is None
 
+    def test_invalid_tags(self):
+        manager = EventManager(make_event(**{
+            'tags': [42],
+        }))
+        manager.normalize()
+        if ENABLE_RUST:
+            assert None in manager.get_data().get('tags', [])
+        assert 42 not in manager.get_data().get('tags', [])
+        event = manager.save(self.project.id)
+        assert 42 not in event.tags
+        assert None not in event.tags
+
     @mock.patch('sentry.event_manager.eventstream.insert')
     def test_group_environment(self, eventstream_insert):
         release_version = '1.0'
