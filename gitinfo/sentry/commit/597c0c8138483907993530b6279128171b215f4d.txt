commit 597c0c8138483907993530b6279128171b215f4d
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Mar 28 16:29:00 2016 -0700

    Add tag values CSV export for groups

diff --git a/src/sentry/web/frontend/group_tag_export.py b/src/sentry/web/frontend/group_tag_export.py
new file mode 100644
index 0000000000..afd1da631c
--- /dev/null
+++ b/src/sentry/web/frontend/group_tag_export.py
@@ -0,0 +1,74 @@
+from __future__ import absolute_import
+
+import csv
+
+from django.http import Http404, StreamingHttpResponse
+from django.utils.text import slugify
+
+from sentry.models import (
+    GroupTagValue, TagKey, TagKeyStatus, Group, get_group_with_redirect
+)
+from sentry.web.frontend.base import ProjectView
+
+
+# csv.writer doesn't provide a non-file interface
+# https://docs.djangoproject.com/en/1.9/howto/outputting-csv/#streaming-large-csv-files
+class Echo(object):
+    def write(self, value):
+        return value
+
+
+class GroupTagExportView(ProjectView):
+    required_scope = 'event:read'
+
+    def get(self, request, organization, project, team, group_id, key):
+        try:
+            # TODO(tkaemming): This should *actually* redirect, see similar
+            # comment in ``GroupEndpoint.convert_args``.
+            group, _ = get_group_with_redirect(
+                group_id,
+                queryset=Group.objects.filter(project=project),
+            )
+        except Group.DoesNotExist:
+            raise Http404
+
+        if TagKey.is_reserved_key(key):
+            lookup_key = 'sentry:{0}'.format(key)
+        else:
+            lookup_key = key
+
+        # validate existance as it may be deleted
+        try:
+            TagKey.objects.get(
+                project=group.project_id,
+                key=lookup_key,
+                status=TagKeyStatus.VISIBLE,
+            )
+        except TagKey.DoesNotExist:
+            raise Http404
+
+        queryset = GroupTagValue.objects.filter(
+            group=group,
+            key=lookup_key,
+        )
+
+        def row_iter():
+            yield ('value', 'times_seen', 'last_seen', 'first_seen')
+            for row in queryset.iterator():
+                yield (
+                    row.value.encode('utf-8'),
+                    str(row.times_seen),
+                    row.last_seen.strftime('%Y-%m-%dT%H:%M:%S.%fZ'),
+                    row.first_seen.strftime('%Y-%m-%dT%H:%M:%S.%fZ'),
+                )
+
+        pseudo_buffer = Echo()
+        writer = csv.writer(pseudo_buffer)
+        response = StreamingHttpResponse(
+            (writer.writerow(r) for r in row_iter()),
+            content_type='text/csv'
+        )
+        response['Content-Disposition'] = 'attachment; filename="{}-{}.csv"'.format(
+            group.qualified_short_id or group.id, slugify(key)
+        )
+        return response
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index e424513cc8..24c297c645 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -34,6 +34,7 @@ from sentry.web.frontend.enable_project_key import EnableProjectKeyView
 from sentry.web.frontend.error_page_embed import ErrorPageEmbedView
 from sentry.web.frontend.group_event_json import GroupEventJsonView
 from sentry.web.frontend.group_plugin_action import GroupPluginActionView
+from sentry.web.frontend.group_tag_export import GroupTagExportView
 from sentry.web.frontend.home import HomeView
 from sentry.web.frontend.mailgun_inbound_webhook import \
     MailgunInboundWebhookView
@@ -385,6 +386,8 @@ urlpatterns += patterns(
         name='sentry-replay'),
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/(?:group|issues)/(?P<group_id>\d+)/events/(?P<event_id_or_latest>(\d+|latest))/json/$', GroupEventJsonView.as_view(),
         name='sentry-group-event-json'),
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/issues/(?P<group_id>\d+)/tags/(?P<key>[^\/]+)/export/$', GroupTagExportView.as_view(),
+        name='sentry-group-tag-export'),
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/issues/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)/', GroupPluginActionView.as_view(),
         name='sentry-group-plugin-action'),
 
diff --git a/tests/sentry/web/frontend/test_group_tag_export.py b/tests/sentry/web/frontend/test_group_tag_export.py
new file mode 100644
index 0000000000..84e54877fb
--- /dev/null
+++ b/tests/sentry/web/frontend/test_group_tag_export.py
@@ -0,0 +1,53 @@
+from __future__ import absolute_import
+
+from datetime import timedelta
+from django.utils import timezone
+
+from sentry.models import GroupTagValue, TagKey, TagValue
+from sentry.testutils import TestCase
+
+
+class GroupTagExportTest(TestCase):
+    def test_simple(self):
+        key, value = 'foo', 'bar'
+
+        project = self.create_project()
+        group = self.create_group(project=project)
+        TagKey.objects.create(project=project, key=key)
+        TagValue.objects.create(
+            project=project,
+            key=key,
+            value=value,
+        )
+        group_tag_value = GroupTagValue.objects.create(
+            project=project,
+            group=group,
+            key=key,
+            value=value,
+            times_seen=1,
+            first_seen=timezone.now() - timedelta(hours=1),
+            last_seen=timezone.now(),
+        )
+
+        self.login_as(user=self.user)
+
+        url = '/{}/{}/issues/{}/tags/{}/export/'.format(
+            project.organization.slug, project.slug, group.id, key
+        )
+
+        response = self.client.get(url)
+
+        assert response.status_code == 200
+        assert response.streaming
+        assert response['Content-Type'] == 'text/csv'
+        rows = list(response.streaming_content)
+        for idx, row in enumerate(rows):
+            assert row.endswith('\r\n')
+            bits = row[:-2].split(',')
+            if idx == 0:
+                assert bits == ['value', 'times_seen', 'last_seen', 'first_seen']
+            else:
+                assert bits[0] == value
+                assert bits[1] == '1'
+                assert bits[2] == group_tag_value.last_seen.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
+                assert bits[3] == group_tag_value.first_seen.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
