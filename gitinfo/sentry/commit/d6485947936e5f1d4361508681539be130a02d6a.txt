commit d6485947936e5f1d4361508681539be130a02d6a
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Fri May 15 14:45:15 2020 +0200

    feat(pii): added selectors descriptions (#18859)

diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx
index 31bff9b26c..ad685d6130 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx
@@ -83,7 +83,7 @@ class DataPrivacyRulesContent extends React.Component<Props, State> {
             return (
               <ListItem key={id}>
                 <TextOverflow>
-                  {`[${methodLabel}] [${typelabel}] ${t('from')} [${source}]`}
+                  {`[${methodLabel.label}] [${typelabel}] ${t('from')} [${source}]`}
                 </TextOverflow>
                 <Button
                   size="small"
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx
index 5400d3a680..5abaa4f4c7 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx
@@ -6,12 +6,12 @@ import space from 'app/styles/space';
 import {t} from 'app/locale';
 import TextField from 'app/components/forms/textField';
 
-import {getRuleTypeLabel, getMethodTypeLabel} from './utils';
 import {RuleType, MethodType} from './types';
 import DataPrivacyRulesFormSource from './dataPrivacyRulesFormSource';
 import DataPrivacyRulesFormField from './dataPrivacyRulesFormField';
 import DataPrivacyRulesFormSelectControl from './dataPrivacyRulesFormSelectControl';
 import DataPrivacyRulesFormEventId from './dataPrivacyRulesFormEventId';
+import {getMethodTypeLabel, getRuleTypeLabel} from './utils';
 
 type Rule = {
   id: number;
@@ -54,7 +54,7 @@ const DataPrivacyRulesForm = ({
           placeholder={t('Select method')}
           name="method"
           options={sortBy(Object.values(MethodType)).map(value => ({
-            label: getMethodTypeLabel(value),
+            ...getMethodTypeLabel(value),
             value,
           }))}
           value={method}
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSelectControl.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSelectControl.tsx
index eaa64af3a6..5ea122c52e 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSelectControl.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSelectControl.tsx
@@ -1,6 +1,12 @@
 import React from 'react';
+import styled from '@emotion/styled';
+import {css} from '@emotion/core';
+// eslint import checks can't find types in the flow code.
+// eslint-disable-next-line import/named
+import {components, OptionProps} from 'react-select';
 
 import SelectControl from 'app/components/forms/selectControl';
+import space from 'app/styles/space';
 
 type SelectControlProps = React.ComponentProps<typeof SelectControl>;
 
@@ -35,6 +41,24 @@ class DataPrivacyRulesPanelFormSelectControl extends React.Component<Props> {
           }),
         }}
         ref={this.selectRef}
+        components={{
+          Option: ({
+            data: {label, description, ...data},
+            isSelected,
+            ...props
+          }: OptionProps<{
+            label: React.ReactNode;
+            value: string;
+            description?: string;
+          }>) => (
+            <components.Option isSelected={isSelected} data={data} {...props}>
+              <Wrapper isSelected={isSelected}>
+                <div>{label}</div>
+                {description && <Description>{`(${description})`}</Description>}
+              </Wrapper>
+            </components.Option>
+          ),
+        }}
         openOnFocus
         required
       />
@@ -43,3 +67,22 @@ class DataPrivacyRulesPanelFormSelectControl extends React.Component<Props> {
 }
 
 export default DataPrivacyRulesPanelFormSelectControl;
+
+const Description = styled('div')`
+  color: ${p => p.theme.gray2};
+`;
+
+const Wrapper = styled('div')<{isSelected?: boolean}>`
+  display: grid;
+  grid-template-columns: 1fr auto;
+  grid-gap: ${space(1)};
+  ${p =>
+    p.isSelected &&
+    css`
+      ${Description} {
+        :not(:hover) {
+          color: ${p.theme.white};
+        }
+      }
+    `}
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/utils.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/utils.tsx
index 588bbbbe1a..1dcfee04a3 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/utils.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/utils.tsx
@@ -2,8 +2,8 @@ import {t} from 'app/locale';
 
 import {RuleType, MethodType} from './types';
 
-function getRuleTypeLabel(labelType: RuleType): string {
-  switch (labelType) {
+function getRuleTypeLabel(type: RuleType) {
+  switch (type) {
     case RuleType.ANYTHING:
       return t('Anything');
     case RuleType.IMEI:
@@ -35,18 +35,32 @@ function getRuleTypeLabel(labelType: RuleType): string {
   }
 }
 
-function getMethodTypeLabel(labelType: MethodType): string {
-  switch (labelType) {
+function getMethodTypeLabel(type: MethodType) {
+  switch (type) {
     case MethodType.MASK:
-      return t('Mask');
+      return {
+        label: t('Mask'),
+        description: t('Replace with ****'),
+      };
     case MethodType.HASH:
-      return t('Hash');
+      return {
+        label: t('Hash'),
+        description: t('Replace with DEADBEEF'),
+      };
     case MethodType.REMOVE:
-      return t('Remove');
+      return {
+        label: t('Remove'),
+        description: t('Replace with null'),
+      };
     case MethodType.REPLACE:
-      return t('Replace');
+      return {
+        label: t('Replace'),
+        description: t('Replace with [Filtered]'),
+      };
     default:
-      return '';
+      return {
+        label: '',
+      };
   }
 }
 
