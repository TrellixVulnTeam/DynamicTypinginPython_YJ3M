commit 1689eca6cc51f136bda1077ca0cabdcef96ebaf1
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Feb 22 12:33:17 2018 -0800

    ref(environments): Refactor project dashboard event list (#7298)
    
    Reduces some additional calls to the issues endpoint on environment toggle

diff --git a/src/sentry/static/sentry/app/views/projectDashboard.jsx b/src/sentry/static/sentry/app/views/projectDashboard.jsx
index ab1ae0476c..24e0a42959 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard.jsx
@@ -1,4 +1,3 @@
-import jQuery from 'jquery';
 import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
@@ -93,42 +92,6 @@ const ProjectDashboard = createReactClass({
     }
   },
 
-  getTrendingIssuesEndpoint(dateSince) {
-    let {params} = this.props;
-    let {activeEnvironment} = this.state;
-
-    let qs = {
-      sort: 'priority',
-      query: 'is:unresolved',
-      since: dateSince,
-    };
-
-    if (activeEnvironment) {
-      qs.environment = activeEnvironment.name;
-      qs.query = `${qs.query} environment:${activeEnvironment.name}`;
-    }
-
-    return `/projects/${params.orgId}/${params.projectId}/issues/?${jQuery.param(qs)}`;
-  },
-
-  getNewIssuesEndpoint(dateSince) {
-    let {params} = this.props;
-    let {activeEnvironment} = this.state;
-
-    let qs = {
-      sort: 'new',
-      query: 'is:unresolved',
-      since: dateSince,
-    };
-
-    if (activeEnvironment) {
-      qs.environment = activeEnvironment.name;
-      qs.query = `${qs.query} environment:${activeEnvironment.name}`;
-    }
-
-    return `/projects/${params.orgId}/${params.projectId}/issues/?${jQuery.param(qs)}`;
-  },
-
   onLatestContextChange(context) {
     if (this.state.hasEnvironmentsFeature) {
       this.setState({
@@ -193,14 +156,18 @@ const ProjectDashboard = createReactClass({
         <div className="row">
           <div className="col-md-6">
             <EventList
-              title={t('Trending Issues')}
-              endpoint={this.getTrendingIssuesEndpoint(dateSince)}
+              type="priority"
+              environment={this.state.activeEnvironment}
+              dateSince={dateSince}
+              params={this.props.params}
             />
           </div>
           <div className="col-md-6">
             <EventList
-              title={t('New Issues')}
-              endpoint={this.getNewIssuesEndpoint(dateSince)}
+              type="new"
+              environment={this.state.activeEnvironment}
+              dateSince={dateSince}
+              params={this.props.params}
             />
           </div>
         </div>
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx b/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
index 633bf40a70..01f41b5e5c 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
@@ -1,6 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
+import jQuery from 'jquery';
 import ApiMixin from '../../mixins/apiMixin';
 import LoadingError from '../../components/loadingError';
 import LoadingIndicator from '../../components/loadingIndicator';
@@ -12,8 +13,9 @@ const EventList = createReactClass({
   displayName: 'EventList',
 
   propTypes: {
-    title: PropTypes.string.isRequired,
-    endpoint: PropTypes.string.isRequired,
+    type: PropTypes.oneOf(['new', 'priority']).isRequired,
+    environment: PropTypes.object,
+    dateSince: PropTypes.number,
   },
 
   mixins: [ApiMixin],
@@ -32,7 +34,7 @@ const EventList = createReactClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    if (nextProps.endpoint !== this.props.endpoint) {
+    if (nextProps.environment !== this.props.environment) {
       this.setState(
         {
           loading: true,
@@ -43,22 +45,40 @@ const EventList = createReactClass({
     }
   },
 
-  fetchData() {
-    let minutes;
+  getEndpoint() {
+    const {params, type, environment} = this.props;
+
+    let qs = {
+      sort: type,
+      query: 'is:unresolved',
+      since: this.props.dateSince,
+    };
+
+    if (environment) {
+      qs.environment = environment.name;
+      qs.query = `${qs.query} environment:${environment.name}`;
+    }
+
+    return `/projects/${params.orgId}/${params.projectId}/issues/?${jQuery.param(qs)}`;
+  },
+
+  getMinutes() {
     switch (this.state.statsPeriod) {
       case '15m':
-        minutes = '15';
-        break;
+        return '15';
       case '60m':
-        minutes = '60';
-        break;
+        return '60';
       case '24h':
       default:
-        minutes = '1440';
-        break;
+        return '1440';
     }
+  },
+
+  fetchData() {
+    const endpoint = this.getEndpoint();
+    const minutes = this.getMinutes();
 
-    this.api.request(this.props.endpoint, {
+    this.api.request(endpoint, {
       query: {
         limit: 5,
         minutes,
@@ -95,7 +115,9 @@ const EventList = createReactClass({
         <div className="box-header clearfix">
           <div className="row">
             <div className="col-xs-8">
-              <h3>{this.props.title}</h3>
+              <h3>
+                {this.props.type === 'new' ? t('New issues') : t('Trending issues')}
+              </h3>
             </div>
             <div className="col-xs-2 align-right">{t('Events')}</div>
             <div className="col-xs-2 align-right">{t('Users')}</div>
