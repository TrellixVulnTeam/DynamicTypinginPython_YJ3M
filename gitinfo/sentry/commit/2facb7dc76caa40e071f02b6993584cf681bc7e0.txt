commit 2facb7dc76caa40e071f02b6993584cf681bc7e0
Author: Eric Feng <ehfeng@users.noreply.github.com>
Date:   Wed Aug 9 10:44:43 2017 -0700

    Triggered sample (#5808)
    
    * getting an endpoint working
    
    * platform-specific sample errors
    
    * syntax nit
    
    * Purple sample issues
    
    * mocking out constants for tests
    
    * adding building of _platform.json to test-acceptance
    
    * adding platform assets to all tests
    
    * moving all makefile platform asset steps into a single one
    
    * only triggered sample tag from the create sample endpoint
    
    * fixing jess comment
    
    * fixing acceptance test makefile
    
    * jess comments fix
    
    * unnecessary else statement
    
    * sample_name in None case should be language or default
    
    * removing unused variable and import

diff --git a/Makefile b/Makefile
index b9e1a5d6e8..dbe3cdfb50 100644
--- a/Makefile
+++ b/Makefile
@@ -93,6 +93,11 @@ update-submodules:
 	git submodule update
 	@echo ""
 
+build-platform-assets:
+	@echo "--> Building platform assets"
+	sentry init
+	@echo "from sentry.utils.integrationdocs import sync_docs; sync_docs()" | sentry exec
+
 test: develop lint test-js test-python test-cli
 
 testloop: develop
@@ -117,7 +122,7 @@ test-js:
 	@npm run snapshot
 	@echo ""
 
-test-python:
+test-python: build-platform-assets
 	@echo "--> Running Python tests"
 	py.test tests/integration tests/sentry || exit 1
 	@echo ""
@@ -130,14 +135,14 @@ test-network:
 	py.test tests/network
 	@echo ""
 
-test-acceptance:
+test-acceptance: build-platform-assets
 	@echo "--> Building static assets"
 	@${NPM_ROOT}/.bin/webpack
 	@echo "--> Running acceptance tests"
 	py.test tests/acceptance
 	@echo ""
 
-test-python-coverage:
+test-python-coverage: build-platform-assets
 	@echo "--> Running Python tests"
 	SOUTH_TESTS_MIGRATE=1 coverage run --source=src/sentry -m py.test tests/integration tests/sentry
 	@echo ""
diff --git a/src/sentry/api/endpoints/project_create_sample.py b/src/sentry/api/endpoints/project_create_sample.py
new file mode 100644
index 0000000000..0c5b212f55
--- /dev/null
+++ b/src/sentry/api/endpoints/project_create_sample.py
@@ -0,0 +1,20 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases.project import ProjectEndpoint, ProjectPermission
+from sentry.api.serializers import serialize
+from sentry.utils.samples import create_sample_event
+
+
+class ProjectCreateSampleEndpoint(ProjectEndpoint):
+    permission_classes = (ProjectPermission, )
+
+    def post(self, request, project):
+        event = create_sample_event(
+            project, platform=project.platform, default='javascript', level=0
+        )
+
+        data = serialize(event, request.user)
+
+        return Response(data)
diff --git a/src/sentry/api/endpoints/team_project_index.py b/src/sentry/api/endpoints/team_project_index.py
index 02caca22ff..daf94be184 100644
--- a/src/sentry/api/endpoints/team_project_index.py
+++ b/src/sentry/api/endpoints/team_project_index.py
@@ -10,7 +10,6 @@ from sentry.api.serializers import serialize
 from sentry.models import Project, ProjectStatus, AuditLogEntryEvent
 from sentry.signals import project_created
 from sentry.utils.apidocs import scenario, attach_scenarios
-from sentry.utils.samples import create_sample_event
 
 
 @scenario('ListTeamProjects')
@@ -131,7 +130,5 @@ class TeamProjectIndexEndpoint(TeamEndpoint):
 
             project_created.send(project=project, user=request.user, sender=self)
 
-            create_sample_event(project, platform='javascript')
-
             return Response(serialize(project, request.user), status=201)
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 722a21c0a2..92289d71a4 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -92,6 +92,7 @@ class ProjectSerializer(Serializer):
             'firstEvent': obj.first_event,
             'features': feature_list,
             'status': status_label,
+            'platform': obj.platform,
         }
 
 
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index f58c924766..4261a218c2 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -63,6 +63,7 @@ from .endpoints.organization_teams import OrganizationTeamsEndpoint
 from .endpoints.organization_user_issues import OrganizationUserIssuesEndpoint
 from .endpoints.organization_user_issues_search import OrganizationUserIssuesSearchEndpoint
 from .endpoints.project_details import ProjectDetailsEndpoint
+from .endpoints.project_create_sample import ProjectCreateSampleEndpoint
 from .endpoints.project_docs import ProjectDocsEndpoint
 from .endpoints.project_docs_platform import ProjectDocsPlatformEndpoint
 from .endpoints.project_environments import ProjectEnvironmentsEndpoint
@@ -381,6 +382,11 @@ urlpatterns = patterns(
         ProjectDetailsEndpoint.as_view(),
         name='sentry-api-0-project-details'
     ),
+    url(
+        r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/create-sample/$',
+        ProjectCreateSampleEndpoint.as_view(),
+        name='sentry-api-0-project-create-sample'
+    ),
     url(
         r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/docs/$',
         ProjectDocsEndpoint.as_view(),
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 997adfd3ec..d92588e8c7 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -86,6 +86,7 @@ RESERVED_ORGANIZATION_SLUGS = frozenset(
 )
 
 LOG_LEVELS = {
+    logging.NOTSET: 'sample',
     logging.DEBUG: 'debug',
     logging.INFO: 'info',
     logging.WARNING: 'warning',
@@ -228,6 +229,8 @@ def _load_platform_data():
         if integrations:
             for integration in integrations:
                 integration_id = integration.pop('id')
+                if integration['type'] != 'language':
+                    integration['language'] = platform['id']
                 INTEGRATION_ID_TO_PLATFORM_DATA[integration_id] = integration
 
 
diff --git a/src/sentry/static/sentry/app/views/onboarding/utils.js b/src/sentry/static/sentry/app/views/onboarding/utils.js
index 50a4b2b2b0..6afb0ae712 100644
--- a/src/sentry/static/sentry/app/views/onboarding/utils.js
+++ b/src/sentry/static/sentry/app/views/onboarding/utils.js
@@ -99,7 +99,8 @@ const stepDescriptions = {
 };
 
 function getPlatformName(platform) {
-  return flattenedPlatforms.find(({id}) => platform == id).name;
+  let platformData = flattenedPlatforms.find(({id}) => platform == id);
+  return platformData && platformData.name;
 }
 
 export {
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index f86e341b1a..5fabd32936 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -537,6 +537,20 @@ const Stream = React.createClass({
     browserHistory.pushState(null, path, queryParams);
   },
 
+  createSampleEvent() {
+    let params = this.props.params;
+    let url = `/projects/${params.orgId}/${params.projectId}/create-sample/`;
+    this.api.request(url, {
+      method: 'POST',
+      success: data => {
+        browserHistory.pushState(
+          null,
+          `/${params.orgId}/${params.projectId}/issues/${data.groupID}/`
+        );
+      }
+    });
+  },
+
   renderProcessingIssuesHint() {
     let pi = this.state.processingIssues;
     if (!pi || this.showingProcessingIssues()) {
@@ -626,14 +640,24 @@ const Stream = React.createClass({
     let sampleLink = null;
     if (this.state.groupIds.length > 0) {
       let sampleIssueId = this.state.groupIds[0];
+
       sampleLink = (
         <p>
           <Link to={`/${org.slug}/${project.slug}/issues/${sampleIssueId}/?sample`}>
-            {t('Or see a sample Javascript event')}
+            {tct('Or see your sample event')}
           </Link>
         </p>
       );
+    } else {
+      sampleLink = (
+        <p>
+          <a onClick={this.createSampleEvent.bind(this, project.platform)}>
+            {t('Create a sample event')}
+          </a>
+        </p>
+      );
     }
+
     return (
       <div className="box awaiting-events">
         <div className="wrap">
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index d2d531c573..c751a8e2b9 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -3517,6 +3517,9 @@ div.qrcode {
 &.level-fatal .error-level {
   background: @red;
 }
+&.level-sample .error-level {
+  background: @purple;
+}
 
 /**
  * Truncate component.
diff --git a/src/sentry/utils/samples.py b/src/sentry/utils/samples.py
index 84930f13cb..373d574d37 100644
--- a/src/sentry/utils/samples.py
+++ b/src/sentry/utils/samples.py
@@ -13,7 +13,7 @@ from datetime import datetime, timedelta
 
 import six
 
-from sentry.constants import DATA_ROOT
+from sentry.constants import DATA_ROOT, INTEGRATION_ID_TO_PLATFORM_DATA
 from sentry.event_manager import EventManager
 from sentry.interfaces.user import User as UserInterface
 from sentry.utils import json
@@ -100,14 +100,19 @@ def load_data(platform, default=None, timestamp=None, sample_name=None):
     #     event so it's not an empty project.
     #   * When a user clicks Test Configuration from notification plugin settings page,
     #     a fake event is generated to go through the pipeline.
-    sample_name = sample_name or platform
-
     data = None
-    for platform in (platform, default):
+    language = None
+    platform_data = INTEGRATION_ID_TO_PLATFORM_DATA.get(platform)
+
+    if platform_data is not None and platform_data['type'] != 'language':
+        language = platform_data['language']
+
+    for platform in (platform, language, default):
         if platform is None:
             continue
 
-        json_path = os.path.join(DATA_ROOT, 'samples', '%s.json' % (sample_name.encode('utf-8'), ))
+        sample_name = sample_name or INTEGRATION_ID_TO_PLATFORM_DATA[platform]['name']
+        json_path = os.path.join(DATA_ROOT, 'samples', '%s.json' % (platform.encode('utf-8'), ))
 
         if not os.path.exists(json_path):
             continue
diff --git a/src/sentry/web/forms/add_project.py b/src/sentry/web/forms/add_project.py
index 18d35b0074..43b1279cc6 100644
--- a/src/sentry/web/forms/add_project.py
+++ b/src/sentry/web/forms/add_project.py
@@ -5,7 +5,6 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry.models import AuditLogEntry, AuditLogEntryEvent, Project
 from sentry.signals import project_created
-from sentry.utils.samples import create_sample_event
 
 BLANK_CHOICE = [("", "")]
 
@@ -47,6 +46,4 @@ class AddProjectForm(forms.ModelForm):
 
         project_created.send(project=project, user=actor, sender=self)
 
-        create_sample_event(project, platform='javascript')
-
         return project
diff --git a/tests/sentry/api/endpoints/test_project_create_sample.py b/tests/sentry/api/endpoints/test_project_create_sample.py
new file mode 100644
index 0000000000..896ffbf160
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_create_sample.py
@@ -0,0 +1,42 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+import json
+
+from sentry.testutils import APITestCase
+
+
+class ProjectCreateSampleTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+        team = self.create_team()
+        project = self.create_project(team=team, name='foo')
+
+        url = reverse(
+            'sentry-api-0-project-create-sample',
+            kwargs={
+                'organization_slug': project.organization.slug,
+                'project_slug': project.slug,
+            }
+        )
+        response = self.client.post(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert 'groupID' in json.loads(response.content)
+
+    def test_project_platform(self):
+        self.login_as(user=self.user)
+        team = self.create_team()
+        project = self.create_project(team=team, name='foo', platform='javascript-react')
+
+        url = reverse(
+            'sentry-api-0-project-create-sample',
+            kwargs={
+                'organization_slug': project.organization.slug,
+                'project_slug': project.slug,
+            }
+        )
+        response = self.client.post(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert 'groupID' in json.loads(response.content)
diff --git a/tests/sentry/test_constants.py b/tests/sentry/test_constants.py
index 29dbead58b..a5805885fb 100644
--- a/tests/sentry/test_constants.py
+++ b/tests/sentry/test_constants.py
@@ -13,6 +13,7 @@ class ConstantsTest(TestCase):
         'java-log4j': {},
         'java-log4j2': {},
         'java-android': {},
+        'javascript': {},
     }
 
     def test_marketing_slug_to_integration_id(self):
