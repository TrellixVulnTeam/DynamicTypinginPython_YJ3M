commit 1fff78dd1a24a7bbb02e19568a48086b5da6c68f
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Nov 30 13:18:02 2018 -0800

    feat(org-events): Autocomplete Search UI (APP-779) (#10689)
    
    * ref(ui): Refactor stream search bar to not depend on TagStore
    
    * ignore defaultSearchItems, allow setting for max items to display, allow max-height on search dropdown so that we can scroll through all tag keys
    
    * fix maxSearchItems
    
    * skip filter if empty query
    
    * fix exception msg
    
    * change maxSearchItems default props
    
    * fix searchdropdown having stale search term when query is cleared
    
    * perf optimizations
    
    * rename fetchOrganizationTagValues
    
    * update tests
    
    * fix empty search items if query is empty

diff --git a/src/sentry/static/sentry/app/actionCreators/events.jsx b/src/sentry/static/sentry/app/actionCreators/events.jsx
index 4f50dcfc36..99bf93e0c6 100644
--- a/src/sentry/static/sentry/app/actionCreators/events.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/events.jsx
@@ -117,3 +117,16 @@ export const doEventsRequest = (
     data: results.reduce((acc, {data}) => acc.concat(data), []),
   }));
 };
+
+/**
+ * Get all available values for a given event field name
+ * This includes tags as well.
+ */
+export function fetchEventFieldValues(api, orgId, tag, query) {
+  return api.requestPromise(`/organizations/${orgId}/tags/${tag}/values/`, {
+    data: {
+      query,
+    },
+    method: 'GET',
+  });
+}
diff --git a/src/sentry/static/sentry/app/actionCreators/tags.jsx b/src/sentry/static/sentry/app/actionCreators/tags.jsx
index 27021e3072..caeb0fb6f9 100644
--- a/src/sentry/static/sentry/app/actionCreators/tags.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/tags.jsx
@@ -4,14 +4,12 @@ import TagStore from 'app/stores/tagStore';
 import TagActions from 'app/actions/tagActions';
 import AlertActions from 'app/actions/alertActions';
 
-const api = new Client();
-
 const MAX_TAGS = 500;
 
 export function fetchTags(orgId, projectId) {
   TagStore.reset();
   TagActions.loadTags();
-
+  const api = new Client();
   api.request(`/projects/${orgId}/${projectId}/tags/`, {
     success: tags => {
       let trimmedTags = tags.slice(0, MAX_TAGS);
@@ -27,3 +25,9 @@ export function fetchTags(orgId, projectId) {
     error: TagActions.loadTagsError,
   });
 }
+
+export function fetchOrganizationTags(api, orgId) {
+  return api.requestPromise(`/organizations/${orgId}/tags/`, {
+    method: 'GET',
+  });
+}
diff --git a/src/sentry/static/sentry/app/components/smartSearchBar.jsx b/src/sentry/static/sentry/app/components/smartSearchBar.jsx
index c81055004a..a41599ff57 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar.jsx
@@ -28,15 +28,30 @@ export function removeSpace(query = '') {
 }
 class SmartSearchBar extends React.Component {
   static propTypes = {
+    // Class name for search dropdown
+    dropdownClassName: PropTypes.string,
+
     defaultQuery: PropTypes.string,
+
     query: PropTypes.string,
+
+    // Search items to display when there's no tag key
     defaultSearchItems: PropTypes.array.isRequired,
+
+    // Disabled control (e.g. read-only)
     disabled: PropTypes.bool,
+
+    // Input placeholder
     placeholder: PropTypes.string,
 
     // Map of tags
     supportedTags: PropTypes.object,
 
+    // Maximum number of search items to display
+    // or a falsey value for no maximum
+    maxSearchItems: PropTypes.number,
+
+    // Callback that returns a promise of an array of strings
     onGetTagValues: PropTypes.func,
 
     onSearch: PropTypes.func,
@@ -162,9 +177,13 @@ class SmartSearchBar extends React.Component {
    */
   getTagKeys = function(query) {
     const {supportedTags} = this.props;
-    const tagKeys = Object.keys(supportedTags)
-      .map(key => `${key}:`)
-      .filter(key => key.indexOf(query) > -1);
+
+    // Return all if query is empty
+    let tagKeys = Object.keys(supportedTags).map(key => `${key}:`);
+
+    if (query) {
+      tagKeys = tagKeys.filter(key => key.indexOf(query) > -1);
+    }
 
     // If the environment feature is active and excludeEnvironment = true
     // then remove the environment key
@@ -237,11 +256,23 @@ class SmartSearchBar extends React.Component {
       (terms.length === 1 && terms[0] === this.props.defaultQuery) || // default term
       /^\s+$/.test(query.slice(cursor - 1, cursor + 1))
     ) {
+      let {defaultSearchItems} = this.props;
+
+      if (!defaultSearchItems.length) {
+        // Update searchTerm, otherwise <SearchDropdown> will have wrong state
+        // (e.g. if you delete a query, the last letter will be highlighted if `searchTerm`
+        // does not get updated)
+        this.setState({
+          searchTerm: query,
+        });
+        return void this.updateAutoCompleteState(this.getTagKeys(''), '');
+      }
+
       // cursor on whitespace
       // show default "help" search terms
       return void this.setState({
         searchTerm: '',
-        searchItems: this.props.defaultSearchItems,
+        searchItems: defaultSearchItems,
         activeSearchItem: 0,
       });
     }
@@ -261,14 +292,18 @@ class SmartSearchBar extends React.Component {
       this.updateAutoCompleteState(autoCompleteItems, matchValue);
     } else {
       let {supportedTags} = this.props;
+
+      // TODO(billy): Better parsing for these examples
+      // sentry:release:
+      // url:"http://with/colon"
       tagName = last.slice(0, index);
       query = last.slice(index + 1);
 
       // filter existing items immediately, until API can return
       // with actual tag value results
-      let filteredSearchItems = this.state.searchItems.filter(
-        item => query && item.value.indexOf(query) !== -1
-      );
+      let filteredSearchItems = !query
+        ? this.state.searchItems
+        : this.state.searchItems.filter(item => item.value.indexOf(query) !== -1);
 
       this.setState({
         searchTerm: query,
@@ -297,8 +332,10 @@ class SmartSearchBar extends React.Component {
     return this.state.searchItems === this.props.defaultSearchItems;
   };
 
-  updateAutoCompleteState = (autoCompleteItems, tagName) => {
-    autoCompleteItems = autoCompleteItems.map(item => {
+  updateAutoCompleteState = (searchItems, tagName) => {
+    let {maxSearchItems} = this.props;
+
+    searchItems = searchItems.map(item => {
       let out = {
         desc: item,
         value: item,
@@ -324,12 +361,16 @@ class SmartSearchBar extends React.Component {
       return out;
     });
 
-    if (autoCompleteItems.length > 0 && !this.isDefaultDropdown()) {
-      autoCompleteItems[0].active = true;
+    if (searchItems.length > 0 && !this.isDefaultDropdown()) {
+      searchItems[0].active = true;
+    }
+
+    if (maxSearchItems && maxSearchItems > 0) {
+      searchItems = searchItems.slice(0, maxSearchItems);
     }
 
     this.setState({
-      searchItems: autoCompleteItems.slice(0, 5), // only show 5
+      searchItems,
       activeSearchItem: 0,
     });
   };
@@ -406,7 +447,7 @@ class SmartSearchBar extends React.Component {
   };
 
   render() {
-    let {className, disabled} = this.props;
+    let {className, dropdownClassName, disabled} = this.props;
 
     return (
       <div
@@ -449,6 +490,7 @@ class SmartSearchBar extends React.Component {
           {(this.state.loading || this.state.searchItems.length > 0) && (
             <DropdownWrapper visible={this.state.dropdownVisible}>
               <SearchDropdown
+                className={dropdownClassName}
                 items={this.state.searchItems}
                 onClick={this.onAutoComplete}
                 loading={this.state.loading}
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
index 16a2fff150..7ea4ddd69b 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
@@ -7,7 +7,6 @@ import {Panel} from 'app/components/panels';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import Pagination from 'app/components/pagination';
-import SearchBar from 'app/components/searchBar';
 import SentryTypes from 'app/sentryTypes';
 import withOrganization from 'app/utils/withOrganization';
 import BetaTag from 'app/components/betaTag';
@@ -15,6 +14,7 @@ import BetaTag from 'app/components/betaTag';
 import {getParams} from './utils/getParams';
 import EventsChart from './eventsChart';
 import EventsTable from './eventsTable';
+import SearchBar from './searchBar';
 
 class OrganizationEvents extends AsyncView {
   static propTypes = {
@@ -90,9 +90,9 @@ class OrganizationEvents extends AsyncView {
             {t('Events')} <BetaTag />
           </HeaderTitle>
           <StyledSearchBar
-            query={location.query && location.query.query}
-            placeholder={t('Search for events, users, tags, and everything else.')}
+            query={(location.query && location.query.query) || ''}
             onSearch={this.handleSearch}
+            organization={organization}
           />
         </Flex>
 
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx b/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx
new file mode 100644
index 0000000000..1bd94c4d61
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx
@@ -0,0 +1,83 @@
+import {css} from 'react-emotion';
+import {flatten, memoize} from 'lodash';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {COLUMNS} from 'app/views/organizationDiscover/data';
+import {defined} from 'app/utils';
+import {fetchEventFieldValues} from 'app/actionCreators/events';
+import {fetchOrganizationTags} from 'app/actionCreators/tags';
+import SentryTypes from 'app/sentryTypes';
+import SmartSearchBar from 'app/components/smartSearchBar';
+import withApi from 'app/utils/withApi';
+
+const tagToObjectReducer = (acc, name) => {
+  acc[name] = {
+    key: name,
+    name,
+  };
+  return acc;
+};
+
+const TAGS = COLUMNS.map(({name}) => name);
+
+class SearchBar extends React.PureComponent {
+  static propTypes = {
+    api: PropTypes.object,
+    organization: SentryTypes.Organization,
+  };
+
+  constructor() {
+    super();
+
+    this.state = {
+      tags: {},
+    };
+  }
+
+  componentDidMount() {
+    let {api, organization} = this.props;
+    fetchOrganizationTags(api, organization.slug).then(results => {
+      this.setState({
+        tags: this.getAllTags(results.map(({key}) => key)),
+      });
+    });
+  }
+
+  /**
+   * Returns array of tag values that substring match `query`; invokes `callback`
+   * with data when ready
+   */
+  getEventFieldValues = memoize((tag, query) => {
+    let {api, organization} = this.props;
+
+    return fetchEventFieldValues(api, organization.slug, tag.key, query).then(
+      results => flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),
+      () => {
+        throw new Error('Unable to fetch event field values');
+      }
+    );
+  }, ({key}, query) => `${key}-${query}`);
+
+  getAllTags = (orgTags = []) =>
+    TAGS.concat(orgTags)
+      .sort()
+      .reduce(tagToObjectReducer, {});
+
+  render() {
+    return (
+      <SmartSearchBar
+        {...this.props}
+        onGetTagValues={this.getEventFieldValues}
+        supportedTags={this.state.tags}
+        excludeEnvironment
+        dropdownClassName={css`
+          max-height: 300px;
+          overflow-y: auto;
+        `}
+      />
+    );
+  }
+}
+
+export default withApi(SearchBar);
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index 341c5ac765..715a709137 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -85,6 +85,7 @@ class SearchBar extends React.Component {
         onGetTagValues={this.getTagValues}
         supportedTags={TagStore.getAllTags()}
         defaultSearchItems={SEARCH_ITEMS}
+        maxSearchItems={5}
       />
     );
   }
diff --git a/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx b/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
index e0c9724049..c2b7c9591a 100644
--- a/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
@@ -41,7 +41,7 @@ class SearchDropdown extends React.PureComponent {
 
   render() {
     return (
-      <div className="search-dropdown">
+      <div className={classNames('search-dropdown', this.props.className)}>
         <ul className="search-helper search-autocomplete-list">
           {this.props.loading ? (
             <li key="loading" className="search-autocomplete-item">
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/organizationEvents/events.spec.jsx
index e34a961e7e..d7aaaa59fe 100644
--- a/tests/js/spec/views/organizationEvents/events.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/events.spec.jsx
@@ -12,6 +12,11 @@ describe('OrganizationEventsErrors', function() {
   let eventsStatsMock;
 
   beforeEach(function() {
+    // Search bar makes this request when mounted
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/tags/',
+      body: [{count: 1, tag: 'transaction'}, {count: 2, tag: 'mechanism'}],
+    });
     eventsMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events/',
       body: (url, opts) => [TestStubs.OrganizationEvent(opts.query)],
diff --git a/tests/js/spec/views/organizationEvents/searchBar.spec.jsx b/tests/js/spec/views/organizationEvents/searchBar.spec.jsx
new file mode 100644
index 0000000000..fe56a08c49
--- /dev/null
+++ b/tests/js/spec/views/organizationEvents/searchBar.spec.jsx
@@ -0,0 +1,121 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import SearchBar from 'app/views/organizationEvents/searchBar';
+import TagStore from 'app/stores/tagStore';
+
+const focusInput = el => el.find('input[name="query"]').simulate('focus');
+const selectFirstAutocompleteItem = el => {
+  focusInput(el);
+
+  el
+    .find('.search-autocomplete-item')
+    .first()
+    .simulate('click');
+  const input = el.find('input');
+  input
+    .getDOMNode()
+    .setSelectionRange(input.prop('value').length, input.prop('value').length);
+  return el;
+};
+const setQuery = (el, query) => {
+  el
+    .find('input')
+    .simulate('change', {target: {value: query}})
+    .getDOMNode()
+    .setSelectionRange(query.length, query.length);
+};
+
+describe('SearchBar', function() {
+  let options;
+  let tagValuesMock;
+  let tagKeysMock;
+  let organization = TestStubs.Organization();
+  let props = {
+    organization,
+  };
+
+  beforeEach(function() {
+    TagStore.reset();
+    TagStore.onLoadTagsSuccess(TestStubs.Tags());
+
+    options = TestStubs.routerContext();
+
+    tagValuesMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/tags/gpu/values/',
+      body: [{count: 2, name: 'Nvidia 1080ti'}],
+    });
+    tagKeysMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/tags/',
+      body: [{count: 3, key: 'gpu'}, {count: 3, key: 'mytag'}],
+    });
+  });
+
+  afterEach(function() {
+    MockApiClient.clearMockResponses();
+  });
+
+  it('fetches organization tags on mount', async function() {
+    let wrapper = await mount(<SearchBar {...props} />, options);
+    expect(tagKeysMock).toHaveBeenCalledTimes(1);
+    wrapper.update();
+    expect(wrapper.find('SmartSearchBar').prop('supportedTags')).toEqual(
+      expect.objectContaining({
+        gpu: {key: 'gpu', name: 'gpu'},
+        mytag: {key: 'mytag', name: 'mytag'},
+      })
+    );
+  });
+
+  it('searches and selects an event field value', async function() {
+    let wrapper = await mount(<SearchBar {...props} />, options);
+    setQuery(wrapper, 'gpu:');
+
+    expect(tagValuesMock).toHaveBeenCalledWith(
+      '/organizations/org-slug/tags/gpu/values/',
+      expect.objectContaining({data: {query: ''}})
+    );
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('SearchDropdown').prop('searchSubstring')).toEqual('');
+    expect(wrapper.find('SearchDropdown').prop('items')).toEqual([
+      expect.objectContaining({
+        value: '"Nvidia 1080ti"',
+      }),
+    ]);
+
+    selectFirstAutocompleteItem(wrapper);
+    wrapper.update();
+    expect(wrapper.find('input').prop('value')).toBe('gpu:"Nvidia 1080ti" ');
+  });
+
+  it('does not requery for event field values if query does not change', async function() {
+    let wrapper = await mount(<SearchBar {...props} />, options);
+    setQuery(wrapper, 'gpu:');
+
+    expect(tagValuesMock).toHaveBeenCalledTimes(1);
+
+    // Click will fire "updateAutocompleteItems"
+    wrapper.find('input').simulate('click');
+
+    await tick();
+    wrapper.update();
+    expect(tagValuesMock).toHaveBeenCalledTimes(1);
+  });
+
+  it('removes highlight when query is empty', async function() {
+    let wrapper = await mount(<SearchBar {...props} />, options);
+    setQuery(wrapper, 'gpu');
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('.search-description strong').text()).toBe('gpu');
+
+    // Should have nothing highlighted
+    setQuery(wrapper, '');
+    expect(wrapper.find('.search-description strong')).toHaveLength(0);
+  });
+});
