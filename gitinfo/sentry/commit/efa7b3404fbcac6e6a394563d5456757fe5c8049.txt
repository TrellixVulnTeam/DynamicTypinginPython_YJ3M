commit efa7b3404fbcac6e6a394563d5456757fe5c8049
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon Jul 2 11:00:23 2018 -0700

    feat(integrations): Vsts Config UI (#8850)
    
    * Added project config fields similar to jira.
    
    * Added statuses but just picking the first project.:
    
    * removed default project
    
    * Added simple test

diff --git a/src/sentry/integrations/vsts/client.py b/src/sentry/integrations/vsts/client.py
index 9d7e99fe12..ddfb2858ff 100644
--- a/src/sentry/integrations/vsts/client.py
+++ b/src/sentry/integrations/vsts/client.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import
 
 from sentry.integrations.client import ApiClient, OAuth2RefreshMixin
-
 UNSET = object()
 
 FIELD_MAP = {
@@ -21,10 +20,12 @@ class VstsApiPath(object):
     repositories = u'https://{account_name}/DefaultCollection/{project}_apis/git/repositories/{repo_id}'
     work_items = u'https://{account_name}/DefaultCollection/_apis/wit/workitems/{id}'
     work_items_create = u'https://{account_name}/{project}/_apis/wit/workitems/${type}'
+    work_items_types_states = u'https://{account_name}/{project}/_apis/wit/workitemtypes/{type}/states'
 
 
 class VstsApiClient(ApiClient, OAuth2RefreshMixin):
     api_version = '4.1'
+    api_version_preview = '-preview.1'  # in another pr vsts-assignee #8783
 
     def __init__(self, identity, oauth_redirect_url, *args, **kwargs):
         super(VstsApiClient, self).__init__(*args, **kwargs)
@@ -33,10 +34,11 @@ class VstsApiClient(ApiClient, OAuth2RefreshMixin):
         if 'access_token' not in self.identity.data:
             raise ValueError('Vsts Identity missing access token')
 
-    def request(self, method, path, data=None, params=None):
+    def request(self, method, path, data=None, params=None, api_preview=False):
         self.check_auth(redirect_url=self.oauth_redirect_url)
+        api_version = self.api_version if api_preview is False else self.api_version + self.api_version_preview
         headers = {
-            'Accept': 'application/json; api-version={}'.format(self.api_version),
+            'Accept': 'application/json; api-version={}'.format(api_version),
             'Content-Type': 'application/json-patch+json' if method == 'PATCH' else 'application/json',
             'X-HTTP-Method-Override': method,
             'X-TFS-FedAuthRedirect': 'Suppress',
@@ -132,6 +134,30 @@ class VstsApiClient(ApiClient, OAuth2RefreshMixin):
             ),
         )
 
+    def get_work_item_states(self, instance, project=None):
+        if project is None:
+            # TODO(lb): I'm pulling from the first project.
+            # Not sure what else to do here unless I can prompt the user
+            project = self.get_projects(instance)['value'][0]['id']
+        return self.get(
+            VstsApiPath.work_items_types_states.format(
+                account_name=instance,
+                project=project,
+                # TODO(lb): might want to make this custom like jira at some point
+                type='Bug',
+            ),
+            api_preview=True,
+        )
+
+    def get_work_item_types(self, instance, process_id):
+        return self.get(
+            VstsApiPath.work_item_types.format(
+                account_name=instance,
+                process_id=process_id,
+            ),
+            api_preview=True,
+        )
+
     def get_repo(self, instance, name_or_id, project=None):
         return self.get(
             VstsApiPath.repositories.format(
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index e4a2b08087..1703623b23 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -39,46 +39,68 @@ class VstsIntegration(Integration, VstsIssueSync):
 
     def get_project_config(self):
         client = self.get_client()
-        disabled = False
+        instance = self.model.metadata['domain_name']
+
         try:
-            projects = client.get_projects(self.model.metadata['domain_name'])
+            # NOTE(lb): vsts get workitem states does not give an id.
+            work_item_states = client.get_work_item_states(instance)['value']
+            statuses = [(c['name'], c['name']) for c in work_item_states]
+            disabled = False
         except ApiError:
-            # TODO(LB): Disable for now. Need to decide what to do with this in the future
-            # should a message be shown to the user?
-            #  If INVALID_ACCESS_TOKEN ask the user to reinstall integration?
-
-            project_choices = []
+            # TODO(epurkhsier): Maybe disabling the inputs for the resolve
+            # statuses is a little heavy handed. Is there something better we
+            # can fall back to?
+            statuses = []
             disabled = True
-        else:
-            project_choices = [(project['id'], project['name']) for project in projects['value']]
-
-        try:
-            # TODO(LB): Will not work in the UI until the serliazer sends a `project_id` to get_installation()
-            # serializers and UI are being refactored and it's not worth trying to fix
-            # the old system. Revisit
-            default_project = self.project_integration.config.get('default_project')
-        except Exception:
-            default_project = None
-
-        initial_project = ('', '')
-        if default_project is not None:
-            for project_id, project_name in project_choices:
-                if default_project == project_id:
-                    initial_project = (project_id, project_name)
-                    break
 
         return [
             {
-                'name': 'default_project',
+                'name': 'resolve_status',
+                'type': 'choice',
+                'allowEmpty': True,
+                'disabled': disabled,
+                'choices': statuses,
+                'label': _('Visual Studio Team Services Resolved Status'),
+                'placeholder': _('Select a Status'),
+                'help': _('Declares what the linked Visual Studio Team Services ticket workflow status should be transitioned to when the Sentry issue is resolved.'),
+            },
+            {
+                'name': 'resolve_when',
+                'type': 'choice',
+                'allowEmpty': True,
+                'disabled': disabled,
+                'choices': statuses,
+                'label': _('Resolve in Sentry When'),
+                'placeholder': _('Select a Status'),
+                'help': _('When a Visual Studio Team Services ticket is transitioned to this status, trigger resolution of the Sentry issue.'),
+            },
+            {
+                'name': 'regression_status',
                 'type': 'choice',
                 'allowEmpty': True,
                 'disabled': disabled,
-                'required': True,
-                'choices': project_choices,
-                'initial': initial_project,
-                'label': _('Default Project Name'),
-                'placeholder': _('MyProject'),
-                'help': _('Enter the Visual Studio Team Services project name that you wish to use as a default for new work items'),
+                'choices': statuses,
+                'label': _('Visual Studio Team Services Regression Status'),
+                'placeholder': _('Select a Status'),
+                'help': _('Declares what the linked Visual Studio Team Services ticket workflow status should be transitioned to when the Sentry issue has a regression.'),
+            },
+            {
+                'name': 'sync_comments',
+                'type': 'boolean',
+                'label': _('Post Comments to Visual Studio Team Services'),
+                'help': _('Synchronize comments from Sentry issues to linked Visual Studio Team Services tickets.'),
+            },
+            {
+                'name': 'sync_forward_assignment',
+                'type': 'boolean',
+                'label': _('Synchronize Assignment to Visual Studio Team Services'),
+                'help': _('When assigning something in Sentry, the linked Visual Studio Team Services ticket will have the associated Visual Studio Team Services user assigned.'),
+            },
+            {
+                'name': 'sync_reverse_assignment',
+                'type': 'boolean',
+                'label': _('Synchronize Assignment to Sentry'),
+                'help': _('When assigning a user to a Linked Visual Studio Team Services ticket, the associated Sentry user will be assigned to the Sentry issue.'),
             },
         ]
 
diff --git a/tests/sentry/integrations/vsts/test_integration.py b/tests/sentry/integrations/vsts/test_integration.py
index 5e529f70d4..d56ccc56fe 100644
--- a/tests/sentry/integrations/vsts/test_integration.py
+++ b/tests/sentry/integrations/vsts/test_integration.py
@@ -135,30 +135,12 @@ class VstsIntegrationTest(APITestCase):
     @responses.activate
     def test_get_project_config(self):
         fields = self.integration.get_project_config()
-        assert len(fields) == 1
-        project_field = fields[0]
-        assert project_field['name'] == 'default_project'
-        assert project_field['disabled'] is False
-        assert project_field['choices'] == self.projects
-        assert project_field['initial'] == ('', '')
-
-    @responses.activate
-    def test_get_project_config_initial(self):
-        self.integration.project_integration.config = {'default_project': self.projects[1][0]}
-        self.integration.project_integration.save()
-        fields = self.integration.get_project_config()
-        assert len(fields) == 1
-        project_field = fields[0]
-        assert project_field['name'] == 'default_project'
-        assert project_field['disabled'] is False
-        assert project_field['choices'] == self.projects
-        assert project_field['initial'] == self.projects[1]
-
-    def test_get_project_config_failure(self):
-        fields = self.integration.get_project_config()
-        assert len(fields) == 1
-        project_field = fields[0]
-        assert project_field['name'] == 'default_project'
-        assert project_field['disabled'] is True
-        assert project_field['choices'] == []
-        assert project_field['initial'] == ('', '')
+        assert len(fields) == 6
+        names = [
+            'resolve_status',
+            'resolve_when',
+            'regression_status',
+            'sync_comments',
+            'sync_forward_assignment',
+            'sync_reverse_assignment']
+        assert [field['name'] for field in fields] == names
