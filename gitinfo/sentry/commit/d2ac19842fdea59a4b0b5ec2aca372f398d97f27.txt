commit d2ac19842fdea59a4b0b5ec2aca372f398d97f27
Author: ted kaemming <ted@kaemming.com>
Date:   Tue May 16 10:54:32 2017 -0700

    Add `InsufficientContext` and expected errors to similarity. (#5387)
    
    This reverts 368868d6cb9627c59abf6eca45d1c0d0c2e0605c. (GH-5379)

diff --git a/src/sentry/similarity.py b/src/sentry/similarity.py
index 9978c690d3..43362a47d0 100644
--- a/src/sentry/similarity.py
+++ b/src/sentry/similarity.py
@@ -8,6 +8,7 @@ import time
 from collections import Sequence
 
 import mmh3
+import six
 from django.conf import settings
 
 from sentry.utils import redis
@@ -16,7 +17,6 @@ from sentry.utils.dates import to_timestamp
 from sentry.utils.iterators import shingle
 from sentry.utils.redis import load_script
 
-
 index = load_script('similarity/index.lua')
 
 
@@ -199,19 +199,32 @@ FRAME_FILENAME_KEY = b'\x12'
 FRAME_SIGNATURE_KEY = b'\x13'
 
 
+class InsufficientContext(Exception):
+    """\
+    Exception raised when a signature cannot be generated for a frame due to
+    insufficient context.
+    """
+
+
 def get_frame_signature(frame, lines=5):
     """\
     Creates a "signature" for a frame from the surrounding context lines,
     reading up to ``lines`` values from each side.
     """
+    try:
+        attributes = (frame.get('pre_context') or [])[-lines:] + \
+            [frame['context_line']] + \
+            (frame.get('post_context') or [])[:lines]
+    except KeyError as error:
+        six.raise_from(
+            InsufficientContext(),
+            error,
+        )
+
     return struct.pack(
         '>i',
         mmh3.hash(
-            u'\n'.join(
-                (frame.get('pre_context') or [])[-lines:] +
-                [frame['context_line']] +
-                (frame.get('post_context') or [])[:lines]
-            ).encode('utf8')
+            u'\n'.join(attributes).encode('utf8')
         ),
     )
 
@@ -303,8 +316,10 @@ class ExceptionFeature(object):
         for exception in exceptions:
             try:
                 yield self.function(exception)
+            except InsufficientContext as error:
+                logger.debug('Could not extract characteristic(s) from exception in %r due to expected error: %r', event, error)
             except Exception as error:
-                pass
+                logger.exception('Could not extract characteristic(s) from exception in %r due to error: %r', event, error)
 
 
 class MessageFeature(object):
diff --git a/tests/sentry/test_similarity.py b/tests/sentry/test_similarity.py
index 08ccb3a95c..a871d15f5a 100644
--- a/tests/sentry/test_similarity.py
+++ b/tests/sentry/test_similarity.py
@@ -5,9 +5,10 @@ import time
 import msgpack
 import pytest
 
+from sentry.models import Event
 from sentry.similarity import (
-    MinHashIndex, get_exception_frames, get_frame_signature,
-    serialize_frame,
+    ExceptionFeature, InsufficientContext, MinHashIndex, get_exception_frames,
+    get_frame_signature, serialize_frame
 )
 from sentry.testutils import TestCase
 from sentry.utils import redis
@@ -107,6 +108,69 @@ def test_get_frame_signature():
         'post_context': [u'\N{BLACK SNOWMAN}'],
     })
 
+    with pytest.raises(InsufficientContext):
+        get_frame_signature({})
+
+    with pytest.raises(InsufficientContext):
+        get_frame_signature({
+            'pre_context': ['pre'],
+            'post_context': ['post'],
+        })
+
+
+def test_exception_feature():
+    good_frame = {
+        'function': 'name',
+        'module': 'module',
+    }
+
+    bad_frame = {}
+
+    assert serialize_frame(good_frame)
+    with pytest.raises(InsufficientContext):
+        serialize_frame(bad_frame)
+
+    feature = ExceptionFeature(
+        lambda exception: map(
+            serialize_frame,
+            get_exception_frames(exception),
+        ),
+    )
+
+    def build_event(frames):
+        return Event(
+            data={
+                'sentry.interfaces.Exception': {
+                    'values': [
+                        {
+                            'stacktrace': {
+                                'frames': frames,
+                            },
+                        },
+                    ],
+                },
+            },
+        )
+
+    assert list(
+        feature.extract(
+            build_event([
+                good_frame,
+            ]),
+        )
+    ) == [
+        [serialize_frame(good_frame)],
+    ]
+
+    assert list(
+        feature.extract(
+            build_event([
+                good_frame,
+                bad_frame,
+            ]),
+        )
+    ) == []
+
 
 class MinHashIndexTestCase(TestCase):
     def test_index(self):
