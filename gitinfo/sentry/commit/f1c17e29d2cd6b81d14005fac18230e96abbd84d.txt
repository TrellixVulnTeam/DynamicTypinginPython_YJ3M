commit f1c17e29d2cd6b81d14005fac18230e96abbd84d
Author: Alex Hofsteede <alex@hofsteede.com>
Date:   Tue Oct 10 12:37:51 2017 -0500

    Clean up logic around exception type/value (#6296)
    
    Only if value is a string, can we split() it. Otherwise if it is not
    None we can json.dumps() it. Added test.
    
    Should fix SENTRY-3XB https://sentry.io/sentry/sentry/issues/317019975/

diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index b3e03210ad..f9ea76b0ae 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -63,13 +63,14 @@ class SingleException(Interface):
 
         type = data.get('type')
         value = data.get('value')
-        if not type and ':' in value.split(' ', 1)[0]:
-            type, value = value.split(':', 1)
-            # in case of TypeError: foo (no space)
-            value = value.strip()
-
-        if value is not None and not isinstance(value, six.string_types):
+        if isinstance(value, six.string_types):
+            if type is None and ':' in value.split(' ', 1)[0]:
+                type, value = value.split(':', 1)
+                # in case of TypeError: foo (no space)
+                value = value.strip()
+        elif value is not None:
             value = json.dumps(value)
+
         value = trim(value, 4096)
 
         mechanism = data.get('mechanism')
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index a428f1e190..c77184009a 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -71,6 +71,14 @@ class ExceptionTest(TestCase):
         assert inst.values[0].value == 'hello world'
         assert inst.values[0].module == 'foo.bar'
 
+    def test_non_string_value_with_no_type(self):
+        inst = Exception.to_python(
+            {
+                'value': {'foo': 'bar'},
+            }
+        )
+        assert inst.values[0].value == '{"foo":"bar"}'
+
     def test_serialize_unserialize_behavior(self):
         result = type(self.interface).to_python(self.interface.to_json())
         assert result.to_json() == self.interface.to_json()
