commit b19aa76f4b2a43184be6de9ba670c3df77a9810b
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Nov 28 15:04:30 2016 -0800

    [vcs] add repository management (#4495)

diff --git a/CHANGES b/CHANGES
index 879b1690f0..cacc0b2869 100644
--- a/CHANGES
+++ b/CHANGES
@@ -19,11 +19,24 @@ Version 8.11 (Unreleased)
 - Added export action to group tag details.
 - Improved display of user tags.
 - Added 'transaction' tag which automatically populates from explicit culprits.
+- Added beginnings of repository management to UI (behind `organizations:repos` feature).
 
 Schema Changes
 ~~~~~~~~~~~~~~
 
 - Added ``User.session_nonce`` column.
+- Added ``CommitFileChange`` model.
+- Added ``Repository.url`` column.
+- Added ``Repository.provider`` column.
+- Added ``Repository.config`` column.
+- Added ``Repository.external_id`` column.
+- Added ``Repository.status`` column.
+
+API Changes
+~~~~~~~~~~~
+
+- Added ``/organizations/{org}/config/repos/`` endpoint.
+- Added ``/organizations/{org}/repos/{repo}/`` endpoint.
 
 Version 8.10
 ------------
@@ -44,8 +57,8 @@ Version 8.10
 API Changes
 ~~~~~~~~~~~
 
-- Add ``/organizations/{org}/repositories/`` endpoint.
-- Add ``/organizations/{org}/repositories/{repo}/commits/`` endpoint.
+- Add ``/organizations/{org}/repos/`` endpoint.
+- Add ``/organizations/{org}/repos/{repo}/commits/`` endpoint.
 - Add ``/projects/{org}/{project}/releases/{version}/commits/`` endpoint.
 - SSO restrictions are now applied across session-based API authentication.
 
diff --git a/src/sentry/api/endpoints/organization_config_repositories.py b/src/sentry/api/endpoints/organization_config_repositories.py
new file mode 100644
index 0000000000..7b1df7db83
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_config_repositories.py
@@ -0,0 +1,24 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.plugins import bindings
+
+
+class OrganizationConfigRepositoriesEndpoint(OrganizationEndpoint):
+    def get(self, request, organization):
+        provider_bindings = bindings.get('repository.provider')
+
+        providers = []
+        for provider_id in provider_bindings:
+            provider = provider_bindings.get(provider_id)(id=provider_id)
+            providers.append({
+                'id': provider_id,
+                'name': provider.name,
+                'config': provider.get_config(),
+            })
+
+        return Response({
+            'providers': providers,
+        })
diff --git a/src/sentry/api/endpoints/organization_repositories.py b/src/sentry/api/endpoints/organization_repositories.py
index d36b7e583f..8ceac41a69 100644
--- a/src/sentry/api/endpoints/organization_repositories.py
+++ b/src/sentry/api/endpoints/organization_repositories.py
@@ -1,10 +1,14 @@
 from __future__ import absolute_import
 
+from rest_framework.response import Response
+
 from sentry.api.base import DocSection
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
+from sentry.constants import ObjectStatus
 from sentry.models import Repository
+from sentry.plugins import bindings
 
 
 class OrganizationRepositoriesEndpoint(OrganizationEndpoint):
@@ -24,6 +28,18 @@ class OrganizationRepositoriesEndpoint(OrganizationEndpoint):
             organization_id=organization.id,
         )
 
+        status = request.GET.get('status', 'active')
+        if status == 'active':
+            queryset = queryset.filter(
+                status=ObjectStatus.VISIBLE,
+            )
+        elif status == 'deleted':
+            queryset = queryset.exclude(
+                status=ObjectStatus.VISIBLE,
+            )
+        elif status:
+            queryset = queryset.none()
+
         return self.paginate(
             request=request,
             queryset=queryset,
@@ -31,3 +47,18 @@ class OrganizationRepositoriesEndpoint(OrganizationEndpoint):
             on_results=lambda x: serialize(x, request.user),
             paginator_cls=OffsetPaginator,
         )
+
+    def post(self, request, organization):
+        if not request.user.is_authenticated():
+            return Response(status=401)
+
+        provider_id = request.DATA.get('provider')
+        try:
+            provider_cls = bindings.get('repository.provider').get(provider_id)
+        except KeyError:
+            return Response({
+                'error_type': 'validation',
+            }, status=400)
+
+        provider = provider_cls(id=provider_id)
+        return provider.dispatch(request, organization)
diff --git a/src/sentry/api/endpoints/organization_repository_details.py b/src/sentry/api/endpoints/organization_repository_details.py
new file mode 100644
index 0000000000..c0128693ab
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_repository_details.py
@@ -0,0 +1,94 @@
+from __future__ import absolute_import
+
+import logging
+
+from rest_framework import serializers
+from rest_framework.response import Response
+from uuid import uuid4
+
+from sentry.api.base import DocSection
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.serializers import serialize
+from sentry.constants import ObjectStatus
+from sentry.models import Repository
+from sentry.tasks.deletion import generic_delete
+
+delete_logger = logging.getLogger('sentry.deletions.api')
+
+
+class RepositorySerializer(serializers.Serializer):
+    status = serializers.ChoiceField(choices=(
+        ('visible', 'visible'),
+    ))
+
+
+class OrganizationRepositoryDetailsEndpoint(OrganizationEndpoint):
+    doc_section = DocSection.ORGANIZATIONS
+
+    def put(self, request, organization, repo_id):
+        if not request.user.is_authenticated():
+            return Response(status=401)
+
+        try:
+            repo = Repository.objects.get(
+                id=repo_id,
+                organization_id=organization.id,
+            )
+        except Repository.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        if repo.status == ObjectStatus.DELETION_IN_PROGRESS:
+            return Response(status=400)
+
+        serializer = RepositorySerializer(data=request.DATA, partial=True)
+
+        if serializer.is_valid():
+            result = serializer.object
+            if result.get('status'):
+                if result['status'] == 'visible':
+                    repo.update(status=ObjectStatus.VISIBLE)
+                else:
+                    raise NotImplementedError
+
+        return Response(serialize(repo, request.user))
+
+    def delete(self, request, organization, repo_id):
+        if not request.user.is_authenticated():
+            return Response(status=401)
+
+        try:
+            repo = Repository.objects.get(
+                id=repo_id,
+                organization_id=organization.id,
+            )
+        except Repository.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        updated = Repository.objects.filter(
+            id=repo.id,
+            status=ObjectStatus.VISIBLE,
+        ).update(status=ObjectStatus.PENDING_DELETION)
+        if updated:
+            repo.status = ObjectStatus.PENDING_DELETION
+
+            transaction_id = uuid4().hex
+            countdown = 86400
+
+            generic_delete.apply_async(
+                kwargs={
+                    'app_label': Repository._meta.app_label,
+                    'model_name': Repository._meta.model_name,
+                    'object_id': organization.id,
+                    'transaction_id': transaction_id,
+                    'actor_id': request.user.id,
+                },
+                countdown=countdown,
+            )
+
+            delete_logger.info('object.delete.queued', extra={
+                'object_id': repo.id,
+                'transaction_id': transaction_id,
+                'model': Repository.__name__,
+            })
+        return Response(serialize(repo, request.user), status=202)
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index c7d46e476b..b35b8d737b 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -57,6 +57,8 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
         ).select_related('user'))
 
         feature_list = []
+        if features.has('organizations:repos', obj, actor=user):
+            feature_list.append('repos')
         if features.has('organizations:sso', obj, actor=user):
             feature_list.append('sso')
         if features.has('organizations:callsigns', obj, actor=user):
diff --git a/src/sentry/api/serializers/models/repository.py b/src/sentry/api/serializers/models/repository.py
index 26426f1e80..59702d428d 100644
--- a/src/sentry/api/serializers/models/repository.py
+++ b/src/sentry/api/serializers/models/repository.py
@@ -9,8 +9,21 @@ from sentry.models import Repository
 @register(Repository)
 class RepositorySerializer(Serializer):
     def serialize(self, obj, attrs, user):
+        if obj.provider:
+            provider = {
+                'id': obj.provider,
+                'name': obj.get_provider().name,
+            }
+        else:
+            provider = {
+                'id': 'unknown',
+                'name': 'Unknown Provider',
+            }
         return {
             'id': six.text_type(obj.id),
             'name': obj.name,
+            'url': obj.url,
+            'provider': provider,
+            'status': obj.get_status_display(),
             'dateCreated': obj.date_added,
         }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 9efe4ac245..26a340834d 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -41,7 +41,9 @@ from .endpoints.organization_onboarding_tasks import OrganizationOnboardingTaskE
 from .endpoints.organization_index import OrganizationIndexEndpoint
 from .endpoints.organization_projects import OrganizationProjectsEndpoint
 from .endpoints.organization_repositories import OrganizationRepositoriesEndpoint
+from .endpoints.organization_config_repositories import OrganizationConfigRepositoriesEndpoint
 from .endpoints.organization_repository_commits import OrganizationRepositoryCommitsEndpoint
+from .endpoints.organization_repository_details import OrganizationRepositoryDetailsEndpoint
 from .endpoints.organization_stats import OrganizationStatsEndpoint
 from .endpoints.organization_teams import OrganizationTeamsEndpoint
 from .endpoints.organization_user_issues_search import OrganizationUserIssuesSearchEndpoint
@@ -154,6 +156,9 @@ urlpatterns = patterns(
     url(r'^organizations/(?P<organization_slug>[^\/]+)/audit-logs/$',
         OrganizationAuditLogsEndpoint.as_view(),
         name='sentry-api-0-organization-audit-logs'),
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/config/repos/$',
+        OrganizationConfigRepositoriesEndpoint.as_view(),
+        name='sentry-api-0-organization-config-repositories'),
     url(r'^organizations/(?P<organization_slug>[^\/]+)/issues/new/$',
         OrganizationIssuesNewEndpoint.as_view(),
         name='sentry-api-0-organization-issues-new'),
@@ -184,6 +189,9 @@ urlpatterns = patterns(
     url(r'^organizations/(?P<organization_slug>[^\/]+)/repos/$',
         OrganizationRepositoriesEndpoint.as_view(),
         name='sentry-api-0-organization-repositories'),
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/repos/(?P<repo_id>[^\/]+)/$',
+        OrganizationRepositoryDetailsEndpoint.as_view(),
+        name='sentry-api-0-organization-repository-details'),
     url(r'^organizations/(?P<organization_slug>[^\/]+)/repos/(?P<repo_id>[^\/]+)/commits/$',
         OrganizationRepositoryCommitsEndpoint.as_view(),
         name='sentry-api-0-organization-repository-commits'),
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index f3614cd4cf..a67b3adbad 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -678,6 +678,7 @@ SENTRY_FEATURES = {
     'auth:register': True,
     'organizations:api-keys': True,
     'organizations:create': True,
+    'organizations:repos': False,
     'organizations:sso': True,
     'organizations:callsigns': False,
     'projects:global-events': False,
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 10c76c99e8..0e566c289c 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -216,3 +216,19 @@ MAX_SYM = 256
 KNOWN_DSYM_TYPES = {
     'application/x-mach-binary': 'macho'
 }
+
+
+class ObjectStatus(object):
+    VISIBLE = 0
+    HIDDEN = 1
+    PENDING_DELETION = 2
+    DELETION_IN_PROGRESS = 3
+
+    @classmethod
+    def as_choices(cls):
+        return (
+            (cls.VISIBLE, 'visible'),
+            (cls.HIDDEN, 'hidden'),
+            (cls.PENDING_DELETION, 'pending_deletion'),
+            (cls.DELETION_IN_PROGRESS, 'deletion_in_progress'),
+        )
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index e2162003fb..e0d1af5318 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -12,6 +12,7 @@ default_manager.add('organizations:create')
 default_manager.add('organizations:sso', OrganizationFeature)  # NOQA
 default_manager.add('organizations:onboarding', OrganizationFeature)  # NOQA
 default_manager.add('organizations:callsigns', OrganizationFeature)  # NOQA
+default_manager.add('organizations:repos', OrganizationFeature)  # NOQA
 default_manager.add('projects:global-events', ProjectFeature)  # NOQA
 default_manager.add('projects:quotas', ProjectFeature)  # NOQA
 default_manager.add('projects:plugins', ProjectPluginFeature)  # NOQA
diff --git a/src/sentry/models/commitfilechange.py b/src/sentry/models/commitfilechange.py
new file mode 100644
index 0000000000..00ef3cf7ba
--- /dev/null
+++ b/src/sentry/models/commitfilechange.py
@@ -0,0 +1,29 @@
+from __future__ import absolute_import, print_function
+
+from django.db import models
+
+from sentry.db.models import (
+    BoundedPositiveIntegerField, FlexibleForeignKey, Model, sane_repr
+)
+
+
+class CommitFileChange(Model):
+    __core__ = False
+
+    organization_id = BoundedPositiveIntegerField(db_index=True)
+    commit = FlexibleForeignKey('sentry.Commit')
+    filename = models.CharField(max_length=255)
+    type = models.CharField(max_length=1, choices=(
+        ('A', 'Added'),
+        ('D', 'Deleted'),
+        ('M', 'Modified'),
+    ))
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_commitfilechange'
+        unique_together = (
+            ('commit', 'filename'),
+        )
+
+    __repr__ = sane_repr('commit_id', 'filename')
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index ec0db608e5..6d103a59f9 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -18,6 +18,7 @@ from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.app import locks
+from sentry.constants import ObjectStatus
 from sentry.db.models import (
     BaseManager, BoundedPositiveIntegerField, FlexibleForeignKey, Model,
     sane_repr
@@ -29,11 +30,7 @@ from sentry.utils.retries import TimedRetryPolicy
 
 
 # TODO(dcramer): pull in enum library
-class ProjectStatus(object):
-    VISIBLE = 0
-    HIDDEN = 1
-    PENDING_DELETION = 2
-    DELETION_IN_PROGRESS = 3
+ProjectStatus = ObjectStatus
 
 
 class ProjectManager(BaseManager):
@@ -85,9 +82,9 @@ class Project(Model):
     public = models.BooleanField(default=False)
     date_added = models.DateTimeField(default=timezone.now)
     status = BoundedPositiveIntegerField(default=0, choices=(
-        (ProjectStatus.VISIBLE, _('Active')),
-        (ProjectStatus.PENDING_DELETION, _('Pending Deletion')),
-        (ProjectStatus.DELETION_IN_PROGRESS, _('Deletion in Progress')),
+        (ObjectStatus.VISIBLE, _('Active')),
+        (ObjectStatus.PENDING_DELETION, _('Pending Deletion')),
+        (ObjectStatus.DELETION_IN_PROGRESS, _('Deletion in Progress')),
     ), db_index=True)
     # projects that were created before this field was present
     # will have their first_event field set to date_added
diff --git a/src/sentry/models/repository.py b/src/sentry/models/repository.py
index 06dd0efe38..b7b84d88e0 100644
--- a/src/sentry/models/repository.py
+++ b/src/sentry/models/repository.py
@@ -2,10 +2,13 @@ from __future__ import absolute_import, print_function
 
 from django.db import models
 from django.utils import timezone
+from jsonfield import JSONField
 
+from sentry.constants import ObjectStatus
 from sentry.db.models import (
     BoundedPositiveIntegerField, Model, sane_repr
 )
+from sentry.signals import pending_delete
 
 
 class Repository(Model):
@@ -13,11 +16,38 @@ class Repository(Model):
 
     organization_id = BoundedPositiveIntegerField(db_index=True)
     name = models.CharField(max_length=200)
+    url = models.URLField(null=True)
+    provider = models.CharField(max_length=64, null=True)
+    external_id = models.CharField(max_length=64, null=True)
+    config = JSONField(default=lambda: {})
+    status = BoundedPositiveIntegerField(
+        default=ObjectStatus.VISIBLE,
+        choices=ObjectStatus.as_choices(),
+        db_index=True,
+    )
     date_added = models.DateTimeField(default=timezone.now)
 
     class Meta:
         app_label = 'sentry'
         db_table = 'sentry_repository'
-        unique_together = (('organization_id', 'name'),)
+        unique_together = (
+            ('organization_id', 'name'),
+            ('organization_id', 'provider', 'external_id')
+        )
 
-    __repr__ = sane_repr('organization_id', 'name')
+    __repr__ = sane_repr('organization_id', 'name', 'provider')
+
+    def get_provider(self):
+        from sentry.plugins import bindings
+        provider_cls = bindings.get('repository.provider').get(self.provider)
+        return provider_cls(self.provider)
+
+
+def on_delete(instance, actor, **kwargs):
+    instance.get_provider().delete_repository(
+        repo=instance,
+        actor=actor,
+    )
+
+
+pending_delete.connect(on_delete, sender=Repository, weak=False)
diff --git a/src/sentry/plugins/base/__init__.py b/src/sentry/plugins/base/__init__.py
index 3035118d19..20296686ee 100644
--- a/src/sentry/plugins/base/__init__.py
+++ b/src/sentry/plugins/base/__init__.py
@@ -7,12 +7,15 @@ sentry.plugins.base
 """
 from __future__ import absolute_import, print_function
 
-from sentry.plugins.base.manager import PluginManager
-from sentry.plugins.base.notifier import *  # NOQA
-from sentry.plugins.base.response import *  # NOQA
-from sentry.plugins.base.structs import *  # NOQA
-from sentry.plugins.base.v1 import *  # NOQA
-from sentry.plugins.base.v2 import *  # NOQA
+from .bindings import BindingManager
+from .manager import PluginManager
+from .notifier import *  # NOQA
+from .response import *  # NOQA
+from .structs import *  # NOQA
+from .v1 import *  # NOQA
+from .v2 import *  # NOQA
+
+bindings = BindingManager()
 
 plugins = PluginManager()
 register = plugins.register
diff --git a/src/sentry/plugins/base/bindings.py b/src/sentry/plugins/base/bindings.py
new file mode 100644
index 0000000000..b31c539419
--- /dev/null
+++ b/src/sentry/plugins/base/bindings.py
@@ -0,0 +1,45 @@
+from __future__ import absolute_import, print_function
+
+import six
+
+from sentry.plugins import providers
+
+
+class ProviderManager(object):
+    type = None
+
+    def __init__(self):
+        self._items = {}
+
+    def __iter__(self):
+        return iter(self._items)
+
+    def add(self, item, id):
+        if self.type and not issubclass(item, self.type):
+            raise ValueError('Invalid type for provider: {}'.format(
+                type(item),
+            ))
+
+        self._items[id] = item
+
+    def get(self, id):
+        return self._items[id]
+
+
+class RepositoryProviderManager(ProviderManager):
+    type = providers.RepositoryProvider
+
+
+class BindingManager(object):
+    BINDINGS = {
+        'repository.provider': RepositoryProviderManager,
+    }
+
+    def __init__(self):
+        self._bindings = {k: v() for k, v in six.iteritems(self.BINDINGS)}
+
+    def add(self, name, binding, **kwargs):
+        self._bindings[name].add(binding, **kwargs)
+
+    def get(self, name):
+        return self._bindings[name]
diff --git a/src/sentry/plugins/base/manager.py b/src/sentry/plugins/base/manager.py
index d492e5cbc9..a5f2e28484 100644
--- a/src/sentry/plugins/base/manager.py
+++ b/src/sentry/plugins/base/manager.py
@@ -37,6 +37,12 @@ class PluginManager(InstanceManager):
                 continue
             yield plugin
 
+    def exists(self, slug):
+        for plugin in self.all(version=None):
+            if plugin.slug == slug:
+                return True
+        return False
+
     def for_project(self, project, version=1):
         for plugin in self.all(version=version):
             if not safe_execute(plugin.is_enabled, project,
@@ -51,10 +57,7 @@ class PluginManager(InstanceManager):
             yield plugin
 
     def get(self, slug):
-        for plugin in self.all(version=1):
-            if plugin.slug == slug:
-                return plugin
-        for plugin in self.all(version=2):
+        for plugin in self.all(version=None):
             if plugin.slug == slug:
                 return plugin
         raise KeyError(slug)
diff --git a/src/sentry/plugins/bases/issue2.py b/src/sentry/plugins/bases/issue2.py
index ecd0f534a7..641eaa7396 100644
--- a/src/sentry/plugins/bases/issue2.py
+++ b/src/sentry/plugins/bases/issue2.py
@@ -11,7 +11,8 @@ from django.core.urlresolvers import reverse
 from django.utils.html import format_html
 
 from sentry.api.serializers.models.plugin import PluginSerializer
-from sentry.exceptions import InvalidIdentity, PluginError
+# api compat
+from sentry.exceptions import PluginError  # NOQA
 from sentry.models import Activity, Event, GroupMeta
 from sentry.plugins import Plugin
 from sentry.plugins.endpoints import PluginGroupEndpoint
@@ -182,28 +183,6 @@ class IssueTrackingPlugin2(Plugin):
                     errors[field['name']] = u'%s is a required field.' % field['label']
         return errors
 
-    def handle_api_error(self, error):
-        context = {
-            'error_type': 'unknown',
-        }
-        if isinstance(error, InvalidIdentity):
-            context.update({
-                'error_type': 'auth',
-                'auth_url': reverse('socialauth_associate', args=[self.auth_provider])
-            })
-            status = 400
-        elif isinstance(error, PluginError):
-            # TODO(dcramer): we should have a proper validation error
-            context.update({
-                'error_type': 'validation',
-                'errors': {'__all__': error.message},
-            })
-            status = 400
-        else:
-            self.logger.exception(six.text_type(error))
-            status = 500
-        return Response(context, status=status)
-
     def view_create(self, request, group, **kwargs):
         auth_errors = self.check_config_and_auth(request, group)
         if auth_errors:
diff --git a/src/sentry/plugins/config.py b/src/sentry/plugins/config.py
index e97b7c869f..0f30a54bd2 100644
--- a/src/sentry/plugins/config.py
+++ b/src/sentry/plugins/config.py
@@ -4,13 +4,98 @@ __all__ = ['PluginConfigMixin']
 
 import six
 
+from collections import OrderedDict
+from django import forms
+from rest_framework import serializers
+
 from sentry.exceptions import PluginError
 from sentry.utils.forms import form_to_config
 
+from .providers import ProviderMixin
 from .validators import DEFAULT_VALIDATORS
 
+VALIDATOR_ERRORS = (
+    forms.ValidationError,
+    serializers.ValidationError,
+    PluginError,
+)
+
+ERR_FIELD_REQUIRED = 'This field is required.'
+
+
+# TODO(dcramer): replace one-off validation code with standardized validator
+# (e.g. project_plugin_details.py)
+class ConfigValidator(object):
+    def __init__(self, config, data=None, initial=None, context=None):
+        self.errors = {}
+        self.result = {}
+        self.context = context or {}
+
+        self.config = OrderedDict((
+            (f['name'], f) for f in config
+        ))
+
+        self._data = data or {}
+        self._initial = initial or {}
+        self._validated = False
+
+    def is_valid(self):
+        data = self._data
+        initial = self._initial
+        cleaned = self.result
+        errors = self.errors
+        for field in six.itervalues(self.config):
+            key = field['name']
+            value = data.get(key, initial.get(key))
+
+            if field.get('required') and not value:
+                errors[key] = ERR_FIELD_REQUIRED
+
+            try:
+                value = self.validate_field(
+                    name=key,
+                    value=value,
+                )
+            except (forms.ValidationError, serializers.ValidationError, PluginError) as e:
+                errors[key] = e.message
+
+            if not errors.get(key):
+                cleaned[key] = value
+
+        self._validated = True
+        return not errors
+
+    def validate_field(self, name, value):
+        """
+        ```
+        if name == 'foo' and value != 'bar':
+            raise PluginError('foo must be bar')
+        return value
+        ```
+        """
+        field = self.config[name]
+        if value is None:
+            if field.get('required'):
+                raise PluginError('Field is required')
+            return value
+
+        if isinstance(value, six.string_types):
+            value = value.strip()
+            # TODO(dcramer): probably should do something with default
+            # validations here, though many things will end up bring string
+            # based
+            if not value and field.get('required'):
+                raise PluginError('Field is required')
 
-class PluginConfigMixin(object):
+        for validator in DEFAULT_VALIDATORS.get(field['type'], ()):
+            value = validator(value=value)
+
+        for validator in field.get('validators', ()):
+            value = validator(value=value, **self.context)
+        return value
+
+
+class PluginConfigMixin(ProviderMixin):
     asset_key = None
     assets = []
 
@@ -86,3 +171,6 @@ class PluginConfigMixin(object):
 
     def get_project_urls(self):
         return []
+
+    def setup(self, bindings):
+        pass
diff --git a/src/sentry/plugins/providers/__init__.py b/src/sentry/plugins/providers/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/plugins/providers/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/plugins/providers/base.py b/src/sentry/plugins/providers/base.py
new file mode 100644
index 0000000000..7fdf3704c9
--- /dev/null
+++ b/src/sentry/plugins/providers/base.py
@@ -0,0 +1,62 @@
+from __future__ import absolute_import
+
+import six
+
+from django.core.urlresolvers import reverse
+from rest_framework.response import Response
+from social_auth.models import UserSocialAuth
+
+from sentry.exceptions import InvalidIdentity, PluginError
+
+
+class ProviderMixin(object):
+    auth_provider = None
+    logger = None
+
+    def needs_auth(self, user, **kwargs):
+        """
+        Return ``True`` if the authenticated user needs to associate an auth
+        service before performing actions with this provider.
+        """
+        if self.auth_provider is None:
+            return False
+
+        if not user.is_authenticated():
+            return True
+
+        return not UserSocialAuth.objects.filter(
+            user=user,
+            provider=self.auth_provider,
+        ).exists()
+
+    def get_auth(self, user):
+        if self.auth_provider is None:
+            return None
+
+        return UserSocialAuth.objects.filter(
+            user=user,
+            provider=self.auth_provider,
+        ).first()
+
+    def handle_api_error(self, error):
+        context = {
+            'error_type': 'unknown',
+        }
+        if isinstance(error, InvalidIdentity):
+            context.update({
+                'error_type': 'auth',
+                'auth_url': reverse('socialauth_associate', args=[self.auth_provider])
+            })
+            status = 400
+        elif isinstance(error, PluginError):
+            # TODO(dcramer): we should have a proper validation error
+            context.update({
+                'error_type': 'validation',
+                'errors': {'__all__': error.message},
+            })
+            status = 400
+        else:
+            if self.logger:
+                self.logger.exception(six.text_type(error))
+            status = 500
+        return Response(context, status=status)
diff --git a/src/sentry/plugins/providers/dummy/__init__.py b/src/sentry/plugins/providers/dummy/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/plugins/providers/dummy/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/plugins/providers/dummy/repository.py b/src/sentry/plugins/providers/dummy/repository.py
new file mode 100644
index 0000000000..9a6e31688c
--- /dev/null
+++ b/src/sentry/plugins/providers/dummy/repository.py
@@ -0,0 +1,22 @@
+from __future__ import absolute_import
+
+from sentry.plugins.providers.repository import RepositoryProvider
+
+
+class DummyRepositoryProvider(RepositoryProvider):
+    name = 'Example'
+
+    def get_config(self):
+        return [{
+            'name': 'name',
+            'label': 'Repository Name',
+            'type': 'text',
+            'placeholder': 'e.g. getsentry/sentry',
+            'help': 'Enter your repository name.',
+            'required': True,
+        }]
+
+    def create_repository(self, organization, data, actor=None):
+        return {
+            'name': data['name'],
+        }
diff --git a/src/sentry/plugins/providers/repository.py b/src/sentry/plugins/providers/repository.py
new file mode 100644
index 0000000000..435861b93d
--- /dev/null
+++ b/src/sentry/plugins/providers/repository.py
@@ -0,0 +1,76 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from rest_framework.response import Response
+
+from sentry.api.serializers import serialize
+from sentry.models import Repository
+from sentry.plugins.config import ConfigValidator
+
+from .base import ProviderMixin
+
+
+class RepositoryProvider(ProviderMixin):
+    name = None
+
+    def __init__(self, id):
+        self.id = id
+
+    def dispatch(self, request, organization, **kwargs):
+        if self.needs_auth(request.user):
+            # TODO(dcramer): this should be a 401
+            return Response({
+                'error_type': 'auth',
+                'title': self.name,
+                'auth_url': reverse('socialauth_associate', args=[self.auth_provider]),
+            }, status=400)
+
+        try:
+            fields = self.get_config()
+        except Exception as e:
+            return self.handle_api_error(e)
+
+        if request.method == 'GET':
+            return Response(fields)
+
+        validator = ConfigValidator(fields, request.DATA)
+        if not validator.is_valid():
+            return Response({
+                'error_type': 'validation',
+                'errors': validator.errors,
+            }, status=400)
+
+        try:
+            config = self.validate_config(organization, validator.result,
+                                          actor=request.user)
+        except Exception as e:
+            return self.handle_api_error(e)
+
+        result = self.create_repository(
+            organization=organization,
+            data=config,
+            actor=request.user,
+        )
+
+        repo = Repository.objects.create(
+            organization_id=organization.id,
+            name=result['name'],
+            external_id=result.get('external_id'),
+            url=result.get('url'),
+            config=result.get('config') or {},
+            provider=self.id,
+        )
+
+        return Response(serialize(repo, request.user), status=201)
+
+    def get_config(self):
+        raise NotImplementedError
+
+    def validate_config(self, organization, config, actor=None):
+        return config
+
+    def create_repository(self, organization, data, actor=None):
+        raise NotImplementedError
+
+    def delete_repository(self, repo, actor=None):
+        pass
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 764504f07d..ab83c50564 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -17,7 +17,7 @@ from sentry.utils.warnings import DeprecatedSettingWarning
 
 def register_plugins(settings):
     from pkg_resources import iter_entry_points
-    from sentry.plugins import register
+    from sentry.plugins import bindings, plugins
     # entry_points={
     #    'sentry.plugins': [
     #         'phabricator = sentry_phabricator.plugins:PhabricatorPlugin'
@@ -31,7 +31,10 @@ def register_plugins(settings):
             import traceback
             click.echo("Failed to load plugin %r:\n%s" % (ep.name, traceback.format_exc()), err=True)
         else:
-            register(plugin)
+            plugins.register(plugin)
+
+    for plugin in plugins.all(version=None):
+        plugin.setup(bindings)
 
 
 def initialize_receivers():
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index 1a3d1d2017..307ee69f6e 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -34,7 +34,7 @@ event_accepted = BetterSignal(providing_args=["ip", "data", "project"])
 event_dropped = BetterSignal(providing_args=["ip", "data", "project"])
 event_filtered = BetterSignal(providing_args=["ip", "data", "project"])
 event_received = BetterSignal(providing_args=["ip", "project"])
-pending_delete = BetterSignal(providing_args=["instance"])
+pending_delete = BetterSignal(providing_args=['instance', 'actor'])
 event_processed = BetterSignal(providing_args=['project', 'group', 'event'])
 
 # Organization Onboarding Signals
diff --git a/src/sentry/south_migrations/0277_auto__add_commitfilechange__add_unique_commitfilechange_commit_filenam.py b/src/sentry/south_migrations/0277_auto__add_commitfilechange__add_unique_commitfilechange_commit_filenam.py
new file mode 100644
index 0000000000..197da6223b
--- /dev/null
+++ b/src/sentry/south_migrations/0277_auto__add_commitfilechange__add_unique_commitfilechange_commit_filenam.py
@@ -0,0 +1,750 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Adding model 'CommitFileChange'
+        db.create_table('sentry_commitfilechange', (
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('organization_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
+            ('commit', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.Commit'])),
+            ('filename', self.gf('django.db.models.fields.CharField')(max_length=255)),
+            ('type', self.gf('django.db.models.fields.CharField')(max_length=1)),
+        ))
+        db.send_create_signal('sentry', ['CommitFileChange'])
+
+        # Adding unique constraint on 'CommitFileChange', fields ['commit', 'filename']
+        db.create_unique('sentry_commitfilechange', ['commit_id', 'filename'])
+
+        # Adding field 'Repository.url'
+        db.add_column('sentry_repository', 'url',
+                      self.gf('django.db.models.fields.URLField')(max_length=200, null=True),
+                      keep_default=False)
+
+        # Adding field 'Repository.provider'
+        db.add_column('sentry_repository', 'provider',
+                      self.gf('django.db.models.fields.CharField')(max_length=64, null=True),
+                      keep_default=False)
+
+        # Adding field 'Repository.external_id'
+        db.add_column('sentry_repository', 'external_id',
+                      self.gf('django.db.models.fields.CharField')(max_length=64, null=True),
+                      keep_default=False)
+
+        # Adding field 'Repository.config'
+        db.add_column('sentry_repository', 'config',
+                      self.gf('jsonfield.fields.JSONField')(default={}),
+                      keep_default=False)
+
+        # Adding field 'Repository.status'
+        db.add_column('sentry_repository', 'status',
+                      self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0, db_index=True),
+                      keep_default=False)
+
+        # Adding unique constraint on 'Repository', fields ['organization_id', 'provider', 'external_id']
+        db.create_unique('sentry_repository', ['organization_id', 'provider', 'external_id'])
+
+
+    def backwards(self, orm):
+        # Removing unique constraint on 'Repository', fields ['organization_id', 'provider', 'external_id']
+        db.delete_unique('sentry_repository', ['organization_id', 'provider', 'external_id'])
+
+        # Removing unique constraint on 'CommitFileChange', fields ['commit', 'filename']
+        db.delete_unique('sentry_commitfilechange', ['commit_id', 'filename'])
+
+        # Deleting model 'CommitFileChange'
+        db.delete_table('sentry_commitfilechange')
+
+        # Deleting field 'Repository.url'
+        db.delete_column('sentry_repository', 'url')
+
+        # Deleting field 'Repository.provider'
+        db.delete_column('sentry_repository', 'provider')
+
+        # Deleting field 'Repository.external_id'
+        db.delete_column('sentry_repository', 'external_id')
+
+        # Deleting field 'Repository.config'
+        db.delete_column('sentry_repository', 'config')
+
+        # Deleting field 'Repository.status'
+        db.delete_column('sentry_repository', 'status')
+
+
+    models = {
+        'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.apikey': {
+            'Meta': {'object_name': 'ApiKey'},
+            'allowed_origins': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'default': "'Default'", 'max_length': '64', 'blank': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Organization']"}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.apitoken': {
+            'Meta': {'object_name': 'ApiToken'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiKey']", 'null': 'True'}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'token': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.auditlogentry': {
+            'Meta': {'object_name': 'AuditLogEntry'},
+            'actor': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_actors'", 'null': 'True', 'to': "orm['sentry.User']"}),
+            'actor_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiKey']", 'null': 'True', 'blank': 'True'}),
+            'actor_label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'target_object': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'target_user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_targets'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.authenticator': {
+            'Meta': {'unique_together': "(('user', 'type'),)", 'object_name': 'Authenticator', 'db_table': "'auth_authenticator'"},
+            'config': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {}),
+            'created_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'last_used_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.authidentity': {
+            'Meta': {'unique_together': "(('auth_provider', 'ident'), ('auth_provider', 'user'))", 'object_name': 'AuthIdentity'},
+            'auth_provider': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.AuthProvider']"}),
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'last_synced': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_verified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.authprovider': {
+            'Meta': {'object_name': 'AuthProvider'},
+            'config': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'default_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'default_role': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'default_teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_sync': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']", 'unique': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'sync_time': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.broadcast': {
+            'Meta': {'object_name': 'Broadcast'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 11, 29, 0, 0)', 'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
+            'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
+            'title': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'upstream_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.broadcastseen': {
+            'Meta': {'unique_together': "(('broadcast', 'user'),)", 'object_name': 'BroadcastSeen'},
+            'broadcast': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Broadcast']"}),
+            'date_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.commit': {
+            'Meta': {'unique_together': "(('repository_id', 'key'),)", 'object_name': 'Commit', 'index_together': "(('repository_id', 'date_added'),)"},
+            'author': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.CommitAuthor']", 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'message': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'repository_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.commitauthor': {
+            'Meta': {'unique_together': "(('organization_id', 'email'),)", 'object_name': 'CommitAuthor'},
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
+        },
+        'sentry.commitfilechange': {
+            'Meta': {'unique_together': "(('commit', 'filename'),)", 'object_name': 'CommitFileChange'},
+            'commit': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Commit']"}),
+            'filename': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '1'})
+        },
+        'sentry.counter': {
+            'Meta': {'object_name': 'Counter', 'db_table': "'sentry_projectcounter'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'unique': 'True'}),
+            'value': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.dsymbundle': {
+            'Meta': {'object_name': 'DSymBundle'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymObject']"}),
+            'sdk': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymSDK']"})
+        },
+        'sentry.dsymobject': {
+            'Meta': {'object_name': 'DSymObject'},
+            'cpu_name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object_path': ('django.db.models.fields.TextField', [], {'db_index': 'True'}),
+            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '36', 'db_index': 'True'}),
+            'vmaddr': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'vmsize': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'})
+        },
+        'sentry.dsymsdk': {
+            'Meta': {'object_name': 'DSymSDK', 'index_together': "[('version_major', 'version_minor', 'version_patchlevel', 'version_build')]"},
+            'dsym_type': ('django.db.models.fields.CharField', [], {'max_length': '20', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'sdk_name': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
+            'version_build': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'version_major': ('django.db.models.fields.IntegerField', [], {}),
+            'version_minor': ('django.db.models.fields.IntegerField', [], {}),
+            'version_patchlevel': ('django.db.models.fields.IntegerField', [], {})
+        },
+        'sentry.dsymsymbol': {
+            'Meta': {'unique_together': "[('object', 'address')]", 'object_name': 'DSymSymbol'},
+            'address': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymObject']"}),
+            'symbol': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.environment': {
+            'Meta': {'unique_together': "(('project_id', 'name'),)", 'object_name': 'Environment'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project_id', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group_id', 'datetime'),)"},
+            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'time_spent': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'null': 'True'})
+        },
+        'sentry.eventmapping': {
+            'Meta': {'unique_together': "(('project_id', 'event_id'),)", 'object_name': 'EventMapping'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.eventtag': {
+            'Meta': {'unique_together': "(('event_id', 'key_id', 'value_id'),)", 'object_name': 'EventTag', 'index_together': "(('project_id', 'key_id', 'value_id'), ('group_id', 'key_id', 'value_id'))"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'value_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.eventuser': {
+            'Meta': {'unique_together': "(('project', 'ident'), ('project', 'hash'))", 'object_name': 'EventUser', 'index_together': "(('project', 'email'), ('project', 'username'), ('project', 'ip_address'))"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'username': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
+        },
+        'sentry.file': {
+            'Meta': {'object_name': 'File'},
+            'blob': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'legacy_blob'", 'null': 'True', 'to': "orm['sentry.FileBlob']"}),
+            'blobs': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.FileBlob']", 'through': "orm['sentry.FileBlobIndex']", 'symmetrical': 'False'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'headers': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.fileblob': {
+            'Meta': {'object_name': 'FileBlob'},
+            'checksum': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '40'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'})
+        },
+        'sentry.fileblobindex': {
+            'Meta': {'unique_together': "(('file', 'blob', 'offset'),)", 'object_name': 'FileBlobIndex'},
+            'blob': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.FileBlob']"}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'offset': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.globaldsymfile': {
+            'Meta': {'object_name': 'GlobalDSymFile'},
+            'cpu_name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object_name': ('django.db.models.fields.TextField', [], {}),
+            'uuid': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '36'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'short_id'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'", 'index_together': "(('project', 'first_release'),)"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']", 'null': 'True', 'on_delete': 'models.PROTECT'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'short_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'time_spent_total': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupassignee': {
+            'Meta': {'object_name': 'GroupAssignee', 'db_table': "'sentry_groupasignee'"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'unique': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_assignee_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupemailthread': {
+            'Meta': {'unique_together': "(('email', 'group'), ('email', 'msgid'))", 'object_name': 'GroupEmailThread'},
+            'date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'msgid': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.grouphash': {
+            'Meta': {'unique_together': "(('project', 'hash'),)", 'object_name': 'GroupHash'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.groupredirect': {
+            'Meta': {'object_name': 'GroupRedirect'},
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'previous_group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'unique': 'True'})
+        },
+        'sentry.grouprelease': {
+            'Meta': {'unique_together': "(('group_id', 'release_id', 'environment'),)", 'object_name': 'GroupRelease'},
+            'environment': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '64'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'release_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
+        },
+        'sentry.groupresolution': {
+            'Meta': {'object_name': 'GroupResolution'},
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'unique': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouprulestatus': {
+            'Meta': {'unique_together': "(('rule', 'group'),)", 'object_name': 'GroupRuleStatus'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_active': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'rule': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Rule']"}),
+            'status': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'})
+        },
+        'sentry.groupseen': {
+            'Meta': {'unique_together': "(('user', 'group'),)", 'object_name': 'GroupSeen'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'db_index': 'False'})
+        },
+        'sentry.groupsnooze': {
+            'Meta': {'object_name': 'GroupSnooze'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'unique': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'until': ('django.db.models.fields.DateTimeField', [], {})
+        },
+        'sentry.groupsubscription': {
+            'Meta': {'unique_together': "(('group', 'user'),)", 'object_name': 'GroupSubscription'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'subscription_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'subscription_set'", 'to': "orm['sentry.Project']"}),
+            'reason': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.grouptagkey': {
+            'Meta': {'unique_together': "(('project', 'group', 'key'),)", 'object_name': 'GroupTagKey'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouptagvalue': {
+            'Meta': {'unique_together': "(('group', 'key', 'value'),)", 'object_name': 'GroupTagValue', 'db_table': "'sentry_messagefiltervalue'", 'index_together': "(('project', 'key', 'value', 'last_seen'),)"},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'null': 'True', 'to': "orm['sentry.Project']"}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'unique': 'True'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'last_updated': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.organization': {
+            'Meta': {'object_name': 'Organization'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'default_role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'org_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMember']", 'to': "orm['sentry.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.organizationaccessrequest': {
+            'Meta': {'unique_together': "(('team', 'member'),)", 'object_name': 'OrganizationAccessRequest'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'member': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.organizationmember': {
+            'Meta': {'unique_together': "(('organization', 'user'), ('organization', 'email'))", 'object_name': 'OrganizationMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'has_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Organization']"}),
+            'role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
+            'teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMemberTeam']", 'blank': 'True'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '64', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50', 'blank': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'sentry_orgmember_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.organizationmemberteam': {
+            'Meta': {'unique_together': "(('team', 'organizationmember'),)", 'object_name': 'OrganizationMemberTeam', 'db_table': "'sentry_organizationmember_teams'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'organizationmember': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.organizationonboardingtask': {
+            'Meta': {'unique_together': "(('organization', 'task'),)", 'object_name': 'OrganizationOnboardingTask'},
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_completed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'task': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.organizationoption': {
+            'Meta': {'unique_together': "(('organization', 'key'),)", 'object_name': 'OrganizationOption', 'db_table': "'sentry_organizationoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.project': {
+            'Meta': {'unique_together': "(('team', 'slug'), ('organization', 'slug'))", 'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'first_event': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'forced_color': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.projectbookmark': {
+            'Meta': {'unique_together': "(('project_id', 'user'),)", 'object_name': 'ProjectBookmark'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.projectdsymfile': {
+            'Meta': {'unique_together': "(('project', 'uuid'),)", 'object_name': 'ProjectDSymFile'},
+            'cpu_name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object_name': ('django.db.models.fields.TextField', [], {}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '36'})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'roles': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.projectplatform': {
+            'Meta': {'unique_together': "(('project_id', 'platform'),)", 'object_name': 'ProjectPlatform'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.release': {
+            'Meta': {'unique_together': "(('project', 'version'),)", 'object_name': 'Release'},
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_released': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'date_started': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'new_groups': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'ref': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'version': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.releasecommit': {
+            'Meta': {'unique_together': "(('release', 'commit'), ('release', 'order'))", 'object_name': 'ReleaseCommit'},
+            'commit': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Commit']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'order': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.releaseenvironment': {
+            'Meta': {'unique_together': "(('project_id', 'release_id', 'environment_id'),)", 'object_name': 'ReleaseEnvironment', 'db_table': "'sentry_environmentrelease'"},
+            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'release_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
+        },
+        'sentry.releasefile': {
+            'Meta': {'unique_together': "(('release', 'ident'),)", 'object_name': 'ReleaseFile'},
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'name': ('django.db.models.fields.TextField', [], {}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.repository': {
+            'Meta': {'unique_together': "(('organization_id', 'name'), ('organization_id', 'provider', 'external_id'))", 'object_name': 'Repository'},
+            'config': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'})
+        },
+        'sentry.rule': {
+            'Meta': {'object_name': 'Rule'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.savedsearch': {
+            'Meta': {'unique_together': "(('project', 'name'),)", 'object_name': 'SavedSearch'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_default': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'query': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.savedsearchuserdefault': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'SavedSearchUserDefault', 'db_table': "'sentry_savedsearch_userdefault'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'savedsearch': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.SavedSearch']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.tagkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'TagKey', 'db_table': "'sentry_filterkey'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.tagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'TagValue', 'db_table': "'sentry_filtervalue'"},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.team': {
+            'Meta': {'unique_together': "(('organization', 'slug'),)", 'object_name': 'Team'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_password_expired': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_password_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_column': "'first_name'", 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'session_nonce': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
+        },
+        'sentry.useravatar': {
+            'Meta': {'object_name': 'UserAvatar'},
+            'avatar_type': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']", 'unique': 'True', 'null': 'True', 'on_delete': 'models.SET_NULL'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32', 'db_index': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'avatar'", 'unique': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.useremail': {
+            'Meta': {'unique_together': "(('user', 'email'),)", 'object_name': 'UserEmail'},
+            'date_hash_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_verified': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'emails'", 'to': "orm['sentry.User']"}),
+            'validation_hash': ('django.db.models.fields.CharField', [], {'default': "u'nWSQmbINKkiwvRzlFaq4iWFfAr22O7g3'", 'max_length': '32'})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.userreport': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'UserReport', 'index_together': "(('project', 'event_id'), ('project', 'date_added'))"},
+            'comments': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        }
+    }
+
+    complete_apps = ['sentry']
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
index b6d0eeeed8..2781a68ede 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
@@ -80,6 +80,9 @@ const HomeSidebar = React.createClass({
               {access.has('org:write') &&
                 <ListLink to={`/organizations/${orgId}/rate-limits/`}>{t('Rate Limits')}</ListLink>
               }
+              {features.has('repos') && access.has('org:write') &&
+                <ListLink to={`/organizations/${orgId}/repos/`}>{t('Repositories')}</ListLink>
+              }
               {access.has('org:write') &&
                 <li><a href={`/organizations/${orgId}/settings/`}>{t('Settings')}</a></li>
               }
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 328e306231..cfdaeb50b1 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -28,6 +28,7 @@ import OrganizationAuditLog from './views/organizationAuditLog';
 import OrganizationDashboard from './views/organizationDashboard';
 import OrganizationDetails from './views/organizationDetails';
 import OrganizationRateLimits from './views/organizationRateLimits';
+import OrganizationRepositories from './views/organizationRepositories';
 import OrganizationStats from './views/organizationStats';
 import OrganizationTeams from './views/organizationTeams';
 import AllTeamsList from './views/organizationTeams/allTeamsList';
@@ -109,6 +110,7 @@ function routes() {
         <IndexRoute component={errorHandler(OrganizationDashboard)}/>
 
         <Route path="/organizations/:orgId/audit-log/" component={errorHandler(OrganizationAuditLog)} />
+        <Route path="/organizations/:orgId/repos/" component={errorHandler(OrganizationRepositories)} />
         <Route path="/organizations/:orgId/teams/" component={errorHandler(OrganizationTeams)} />
         <Route path="/organizations/:orgId/teams/:teamId/" component={errorHandler(TeamDetails)}>
           <IndexRedirect to="settings/" />
diff --git a/src/sentry/static/sentry/app/views/organizationRepositories.jsx b/src/sentry/static/sentry/app/views/organizationRepositories.jsx
new file mode 100644
index 0000000000..ee62358e32
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationRepositories.jsx
@@ -0,0 +1,368 @@
+import React from 'react';
+import Modal from 'react-bootstrap/lib/Modal';
+
+import ApiMixin from '../mixins/apiMixin';
+import {FormState} from '../components/forms';
+import DropdownLink from '../components/dropdownLink';
+import IndicatorStore from '../stores/indicatorStore';
+import LoadingIndicator from '../components/loadingIndicator';
+import MenuItem from '../components/menuItem';
+import OrganizationHomeContainer from '../components/organizations/homeContainer';
+import PluginComponentBase from '../components/bases/pluginComponentBase';
+import {t, tct} from '../locale';
+import {sortArray} from '../utils';
+
+const UNKNOWN_ERROR = {
+  error_type: 'unknown',
+};
+
+class AddRepositoryLink extends PluginComponentBase {
+  constructor(props) {
+    super(props);
+
+    Object.assign(this.state, {
+      isModalOpen: false,
+      fieldList: null,
+      loading: true,
+      state: FormState.LOADING,
+      error: {},
+      formData: {},
+    });
+
+    ['onOpen',
+     'onCancel',
+     'onSubmit',
+     'changeField'].map(method => this[method] = this[method].bind(this));
+  }
+
+  onOpen() {
+    this.setState({isModalOpen: true});
+  }
+
+  onCancel() {
+    this.setState({isModalOpen: false});
+  }
+
+  onSubmit() {
+    // TODO(dcramer): set form saving state
+    this.setState({
+      state: FormState.SAVING,
+    }, () => {
+      this.api.request(`/organizations/${this.props.orgId}/repos/`, {
+        data: {
+          provider: this.props.provider.id,
+          ...this.state.formData,
+        },
+        method: 'POST',
+        success: this.onSaveSuccess.bind(this, data => {
+          this.setState({isModalOpen: false});
+          this.props.onSuccess(data);
+        }),
+        error: this.onSaveError.bind(this, error => {
+          this.setState({
+            error: (error.responseJSON || UNKNOWN_ERROR) || UNKNOWN_ERROR,
+            state: FormState.error,
+          });
+        }),
+        complete: this.onSaveComplete
+      });
+    });
+  }
+
+  changeField(name, value) {
+    let formData = this.state.formData;
+    formData[name] = value;
+    this.setState({[name]: formData});
+  }
+
+  renderForm() {
+    let errors = this.state.error.errors || {};
+    let provider = this.props.provider;
+    return (
+      <form onSubmit={this.onSubmit}>
+        {errors.__all__ &&
+          <div className="alert alert-error alert-block" key="_errors">
+            <p>{errors.__all__}</p>
+          </div>
+        }
+        {provider.config.map((field) => {
+          return (
+            <div key={field.name}>
+              {this.renderField({
+                config: field,
+                formData: this.state.formData,
+                formErrors: errors,
+                onChange: this.changeField.bind(this, field.name)
+              })}
+            </div>
+          );
+        })}
+      </form>
+    );
+  }
+
+  renderBody() {
+    let error = this.state.error;
+    if (error.error_type === 'auth') {
+      let authUrl = error.auth_url;
+      if (authUrl.indexOf('?') === -1) {
+        authUrl += '?next=' + encodeURIComponent(document.location.pathname);
+      } else {
+        authUrl += '&next=' + encodeURIComponent(document.location.pathname);
+      }
+      return (
+        <div>
+          <div className="alert alert-warning m-b-1">
+            {'You need to associate an identity with ' + error.title +
+             ' before you can create issues with this service.'}
+          </div>
+          <a className="btn btn-primary" href={authUrl}>
+            Associate Identity
+          </a>
+        </div>
+      );
+    } else if (error.error_type && error.error_type !== 'validation') {
+      return (
+        <div className="alert alert-error alert-block">
+          <p>
+            {error.message ?
+              error.message
+            :
+              tct('An unknown error occurred. Need help with this? [link:Contact support]', {
+                link: <a href="https://sentry.io/support/"/>
+              })
+            }
+          </p>
+        </div>
+      );
+    }
+    return this.renderForm();
+  }
+
+  renderModal() {
+    let state = this.state.state;
+    return (
+      <Modal show={this.state.isModalOpen} animation={false}>
+        <div className="modal-header">
+          <h4>{t('Add Repository')}</h4>
+        </div>
+        <div className="modal-body">
+          {this.renderBody()}
+        </div>
+        <div className="modal-footer">
+          <button type="button" className="btn btn-default"
+                  onClick={this.onCancel}
+                  disabled={state === FormState.SAVING}>{t('Cancel')}</button>
+          <button type="button" className="btn btn-primary"
+                  onClick={this.onSubmit}
+                  disabled={state === FormState.SAVING}>{t('Save Changes')}</button>
+        </div>
+      </Modal>
+    );
+  }
+
+  render() {
+    let provider = this.props.provider;
+    return (
+      <a onClick={this.onOpen}>
+        {provider.name}
+        {this.renderModal()}
+      </a>
+    );
+  }
+}
+
+AddRepositoryLink.propTypes = {
+  provider: React.PropTypes.object.isRequired,
+};
+
+const OrganizationRepositories = React.createClass({
+  mixins: [
+    ApiMixin,
+  ],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      itemList: null,
+      repoConfig: null,
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    this.api.request(`/organizations/${this.props.params.orgId}/repos/?status=`, {
+      method: 'GET',
+      success: (data) => {
+        this.setState({
+          itemList: data,
+          loading: !this.state.repoConfig,
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: !this.state.repoConfig,
+          error: true,
+        });
+      }
+    });
+    this.api.request(`/organizations/${this.props.params.orgId}/config/repos/`, {
+      method: 'GET',
+      success: (data) => {
+        this.setState({
+          repoConfig: data,
+          loading: !this.state.itemList,
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: !this.state.itemList,
+          error: true,
+        });
+      }
+    });
+  },
+
+  deleteRepo(repo) {
+    if (!confirm(t('Are you sure you want to remove this repository?')))
+      return;
+
+    let indicator = IndicatorStore.add(t('Saving changes..'));
+    this.api.request(`/organizations/${this.props.params.orgId}/repos/${repo.id}/`, {
+      method: 'DELETE',
+      success: (data) => {
+        let itemList = this.state.itemList;
+        itemList.forEach((item) => {
+          if (item.id === data.id) {
+            item.status = data.status;
+          }
+        });
+        this.setState({
+          itemList: itemList,
+        });
+      },
+      error: () => {
+        IndicatorStore.add(t('An error occurred.'), 'error', {
+          duration: 3000
+        });
+      },
+      complete: () => {
+        IndicatorStore.remove(indicator);
+      }
+    });
+  },
+
+  cancelDelete(repo) {
+    let indicator = IndicatorStore.add(t('Saving changes..'));
+    this.api.request(`/organizations/${this.props.params.orgId}/repos/${repo.id}/`, {
+      method: 'PUT',
+      data: {status: 'visible'},
+      success: (data) => {
+        let itemList = this.state.itemList;
+        itemList.forEach((item) => {
+          if (item.id === data.id) {
+            item.status = data.status;
+          }
+        });
+        this.setState({
+          itemList: itemList,
+        });
+      },
+      error: () => {
+        IndicatorStore.add(t('An error occurred.'), 'error', {
+          duration: 3000
+        });
+      },
+      complete: () => {
+        IndicatorStore.remove(indicator);
+      }
+    });
+  },
+
+  onAddRepo(repo) {
+    let itemList = this.state.itemList;
+    itemList.push(repo);
+    this.setState({
+      itemList: sortArray(itemList, item => item.name),
+    });
+  },
+
+  getStatusLabel(repo) {
+    switch (repo.status) {
+      case 'pending_deletion':
+        return 'Deletion Queued';
+      case 'deletion_in_progress':
+        return 'Deletion in Progress';
+      case 'hidden':
+        return 'Disabled';
+      default:
+        return null;
+    }
+  },
+
+  render() {
+    if (this.state.loading)
+      return <LoadingIndicator />;
+
+    let orgId = this.props.params.orgId;
+
+    return (
+      <OrganizationHomeContainer>
+        <table className="table table-bordered">
+          <tbody>
+            {this.state.itemList.map((repo) => {
+              return (
+                <tr key={repo.id}>
+                  <td>
+                    <strong>{repo.name}</strong>
+                    {repo.status !== 'visible' &&
+                      <small> &mdash; {this.getStatusLabel(repo)}</small>
+                    }
+                    {repo.status === 'pending_deletion' &&
+                      <small> (<a onClick={this.cancelDelete.bind(this, repo)}>{t('Cancel')}</a>)</small>
+                    }<br />
+                    <small>{repo.provider.name}</small>
+                    {repo.url &&
+                      <small> &mdash; <a href={repo.url}>{repo.url}</a></small>
+                    }
+                  </td>
+                  <td style={{width: 60}}>
+                    {repo.status === 'visible' ?
+                      <button onClick={this.deleteRepo.bind(this, repo)}
+                              className="btn btn-default btn-xs">
+                        <span className="icon icon-trash" />
+                      </button>
+                    :
+                      <button onClick={this.deleteRepo.bind(this, repo)}
+                              disabled={true}
+                              className="btn btn-default btn-xs btn-disabled">
+                        <span className="icon icon-trash" />
+                      </button>
+                    }
+                  </td>
+                </tr>
+              );
+            })}
+          </tbody>
+        </table>
+        <DropdownLink
+            className="btn btn-primary btn-sm"
+            title={t('Add Repository')}>
+          {this.state.repoConfig.providers.map((provider) => {
+            return (
+              <MenuItem noAnchor={true} key={provider.id}>
+                <AddRepositoryLink provider={provider} orgId={orgId} onSuccess={this.onAddRepo} />
+              </MenuItem>
+            );
+          })}
+        </DropdownLink>
+      </OrganizationHomeContainer>
+    );
+  }
+});
+
+export default OrganizationRepositories;
diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index c387930d33..1345ec2ca5 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -10,6 +10,9 @@ from __future__ import absolute_import
 
 import logging
 
+from django.db.models import get_model
+
+from sentry.constants import ObjectStatus
 from sentry.exceptions import DeleteAborted
 from sentry.signals import pending_delete
 from sentry.tasks.base import instrumented_task, retry
@@ -24,7 +27,7 @@ logger = logging.getLogger('sentry.deletions.async')
 def delete_organization(object_id, transaction_id=None, continuous=True, **kwargs):
     from sentry.models import (
         Organization, OrganizationMember, OrganizationStatus, Team, TeamStatus,
-        Commit, CommitAuthor, Repository
+        Commit, CommitAuthor, CommitFileChange, Repository
     )
 
     try:
@@ -49,7 +52,9 @@ def delete_organization(object_id, transaction_id=None, continuous=True, **kwarg
             )
         return
 
-    model_list = (OrganizationMember, Commit, CommitAuthor, Repository)
+    model_list = (
+        OrganizationMember, CommitFileChange, Commit, CommitAuthor, Repository,
+    )
 
     has_more = delete_objects(
         model_list,
@@ -308,6 +313,42 @@ def delete_tag_key(object_id, transaction_id=None, continuous=True, **kwargs):
     })
 
 
+@instrumented_task(name='sentry.tasks.deletion.generic_delete', queue='cleanup',
+                   default_retry_delay=60 * 5, max_retries=None)
+@retry(exclude=(DeleteAborted,))
+def generic_delete(app_label, model_name, object_id, transaction_id=None,
+                   continuous=True, actor_id=None, **kwargs):
+    from sentry.models import User
+
+    model = get_model(app_label, model_name)
+
+    try:
+        instance = model.objects.get(id=object_id)
+    except model.DoesNotExist:
+        return
+
+    if instance.status == ObjectStatus.VISIBLE:
+        raise DeleteAborted
+
+    if instance.status == ObjectStatus.PENDING_DELETION:
+        if actor_id:
+            actor = User.objects.get(id=actor_id)
+        else:
+            actor = None
+        instance.update(status=ObjectStatus.DELETION_IN_PROGRESS)
+        pending_delete.send(sender=model, instance=instance, actor=actor)
+
+    # TODO(dcramer): it'd be nice if we could collect relations here and
+    # cascade efficiently
+    instance_id = instance.id
+    instance.delete()
+    logger.info('object.delete.executed', extra={
+        'object_id': instance_id,
+        'transaction_id': transaction_id,
+        'model': model.__name__,
+    })
+
+
 def delete_events(relation, transaction_id=None, limit=10000, chunk_limit=100, logger=None):
     from sentry.app import nodestore
     from sentry.models import Event, EventTag
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index 47cbaa8a23..6289119e44 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -135,6 +135,11 @@ def pytest_configure(config):
 
     plugins.register(TestIssuePlugin2)
 
+    from sentry.plugins import bindings
+    from sentry.plugins.providers.dummy import DummyRepositoryProvider
+
+    bindings.add('repository.provider', DummyRepositoryProvider, id='dummy')
+
     from sentry.utils.redis import clusters
 
     with clusters.get('default').all() as client:
diff --git a/tests/sentry/api/endpoints/test_organization_config_repositories.py b/tests/sentry/api/endpoints/test_organization_config_repositories.py
new file mode 100644
index 0000000000..276c7e7b82
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_config_repositories.py
@@ -0,0 +1,22 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase
+
+
+class OrganizationConfigRepositoriesTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        org = self.create_organization(owner=self.user, name='baz')
+
+        url = reverse('sentry-api-0-organization-config-repositories', args=[org.slug])
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data['providers']) == 1
+        provider = response.data['providers'][0]
+        assert provider['id'] == 'dummy'
+        assert provider['name'] == 'Example'
+        assert provider['config']
diff --git a/tests/sentry/api/endpoints/test_organization_repositories.py b/tests/sentry/api/endpoints/test_organization_repositories.py
index b9a753090f..c98c14ffff 100644
--- a/tests/sentry/api/endpoints/test_organization_repositories.py
+++ b/tests/sentry/api/endpoints/test_organization_repositories.py
@@ -8,7 +8,7 @@ from sentry.models import Repository
 from sentry.testutils import APITestCase
 
 
-class OrganizationRepositoriesTest(APITestCase):
+class OrganizationRepositoriesListTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
 
@@ -24,3 +24,23 @@ class OrganizationRepositoriesTest(APITestCase):
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
         assert response.data[0]['id'] == six.text_type(repo.id)
+
+
+class OrganizationRepositoriesCreateTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        org = self.create_organization(owner=self.user, name='baz')
+
+        url = reverse('sentry-api-0-organization-repositories', args=[org.slug])
+        response = self.client.post(url, data={
+            'provider': 'dummy',
+            'name': 'getsentry/sentry',
+        })
+
+        assert response.status_code == 201, (response.status_code, response.content)
+        assert response.data['id']
+
+        repo = Repository.objects.get(id=response.data['id'])
+        assert repo.provider == 'dummy'
+        assert repo.name == 'getsentry/sentry'
diff --git a/tests/sentry/api/endpoints/test_organization_repository_details.py b/tests/sentry/api/endpoints/test_organization_repository_details.py
new file mode 100644
index 0000000000..f57ddbc5e0
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_repository_details.py
@@ -0,0 +1,28 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.constants import ObjectStatus
+from sentry.models import Repository
+from sentry.testutils import APITestCase
+
+
+class OrganizationRepositoryDeleteTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        org = self.create_organization(owner=self.user, name='baz')
+        repo = Repository.objects.create(
+            name='example',
+            organization_id=org.id,
+        )
+
+        url = reverse('sentry-api-0-organization-repository-details', args=[
+            org.slug, repo.id,
+        ])
+        response = self.client.delete(url)
+
+        assert response.status_code == 202, (response.status_code, response.content)
+
+        repo = Repository.objects.get(id=repo.id)
+        assert repo.status == ObjectStatus.PENDING_DELETION
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index 43bdae9966..4ed4704c5d 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -1,5 +1,8 @@
 from __future__ import absolute_import
 
+import pytest
+
+from sentry.constants import ObjectStatus
 from sentry.exceptions import DeleteAborted
 from sentry.models import (
     Event, EventMapping, EventTag,
@@ -10,7 +13,7 @@ from sentry.models import (
 )
 from sentry.tasks.deletion import (
     delete_group, delete_organization, delete_project, delete_tag_key,
-    delete_team
+    delete_team, generic_delete
 )
 from sentry.testutils import TestCase
 
@@ -226,3 +229,27 @@ class DeleteGroupTest(TestCase):
         ).exists()
         assert not EventTag.objects.filter(event_id=event.id).exists()
         assert not GroupRedirect.objects.filter(group_id=group.id).exists()
+
+
+class GenericDeleteTest(TestCase):
+    def test_does_not_delete_visible(self):
+        project = self.create_project(
+            status=ObjectStatus.VISIBLE,
+        )
+
+        with self.tasks():
+            with pytest.raises(DeleteAborted):
+                generic_delete('sentry', 'project', object_id=project.id)
+
+        project = Project.objects.get(id=project.id)
+        assert project.status == ObjectStatus.VISIBLE
+
+    def test_deletes(self):
+        project = self.create_project(
+            status=ObjectStatus.PENDING_DELETION,
+        )
+
+        with self.tasks():
+            generic_delete('sentry', 'project', object_id=project.id)
+
+        assert not Project.objects.filter(id=project.id).exists()
