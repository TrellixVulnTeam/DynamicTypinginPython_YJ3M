commit 8865cbf79191450d7f6da164ed88bdf64966105e
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Thu Jan 10 09:34:29 2019 -0800

    feat(require-2fa): restrict sso with require 2fa  (#11140)

diff --git a/src/sentry/api/endpoints/organization_auth_providers.py b/src/sentry/api/endpoints/organization_auth_providers.py
index 6008c7f406..8ea8d9ab07 100644
--- a/src/sentry/api/endpoints/organization_auth_providers.py
+++ b/src/sentry/api/endpoints/organization_auth_providers.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import
 from rest_framework.response import Response
 
 from sentry.auth import manager
-from sentry.auth.providers.saml2 import SAML2Provider
 from sentry.api.bases.organization import OrganizationEndpoint, OrganizationAuthProviderPermission
 from sentry.api.serializers import serialize
 
@@ -25,7 +24,6 @@ class OrganizationAuthProvidersEndpoint(OrganizationEndpoint):
                 'key': k,
                 'name': v.name,
                 'requiredFeature': v.required_feature,
-                'disables2FA': issubclass(v, SAML2Provider),
             })
 
         return Response(serialize(provider_list, request.user))
diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index aad2de86bd..df89c8f354 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -14,7 +14,6 @@ from sentry.api.fields import AvatarField
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models import organization as org_serializers
 from sentry.api.serializers.rest_framework import ListField
-from sentry.auth.providers.saml2 import SAML2Provider
 from sentry.constants import LEGACY_RATE_LIMIT_OPTIONS, RESERVED_ORGANIZATION_SLUGS
 from sentry.models import (
     AuditLogEntryEvent, Authenticator, AuthProvider, Organization, OrganizationAvatar,
@@ -25,8 +24,9 @@ from sentry.utils.apidocs import scenario, attach_scenarios
 from sentry.utils.cache import memoize
 
 ERR_DEFAULT_ORG = 'You cannot remove the default organization.'
-
 ERR_NO_USER = 'This request requires an authenticated user.'
+ERR_NO_2FA = 'Cannot require two-factor authentication without personal two-factor enabled.'
+ERR_SSO_ENABLED = 'Cannot require two-factor authentication with SSO enabled'
 
 ORG_OPTIONS = (
     # serializer field name, option key name, type, default value
@@ -103,13 +103,9 @@ class OrganizationSerializer(serializers.Serializer):
             key__in=LEGACY_RATE_LIMIT_OPTIONS,
         ).exists()
 
-    def _has_saml_enabled(self):
+    def _has_sso_enabled(self):
         org = self.context['organization']
-        try:
-            provider = AuthProvider.objects.get(organization=org).get_provider()
-        except AuthProvider.DoesNotExist:
-            return False
-        return isinstance(provider, SAML2Provider)
+        return AuthProvider.objects.filter(organization=org).exists()
 
     def validate_slug(self, attrs, source):
         value = attrs[source]
@@ -149,11 +145,10 @@ class OrganizationSerializer(serializers.Serializer):
         user = self.context['user']
         has_2fa = Authenticator.objects.user_has_2fa(user)
         if value and not has_2fa:
-            raise serializers.ValidationError(
-                'Cannot require two-factor authentication without personal two-factor enabled.')
-        if value and self._has_saml_enabled():
-            raise serializers.ValidationError(
-                'Cannot require two-factor authentication with SAML SSO enabled')
+            raise serializers.ValidationError(ERR_NO_2FA)
+
+        if value and self._has_sso_enabled():
+            raise serializers.ValidationError(ERR_SSO_ENABLED)
         return attrs
 
     def validate_trustedRelays(self, attrs, source):
diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index 29a029b3e7..6603049dc7 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -23,6 +23,7 @@ from sentry.models import (
 from sentry.signals import sso_enabled
 from sentry.tasks.auth import email_missing_links
 from sentry.utils import auth, metrics
+from sentry.utils.audit import create_audit_entry
 from sentry.utils.redis import clusters
 from sentry.utils.hashlib import md5_text
 from sentry.utils.http import absolute_uri
@@ -33,6 +34,8 @@ import sentry.utils.json as json
 
 from . import manager
 
+logger = logging.getLogger('sentry.auth')
+
 OK_LINK_IDENTITY = _('You have successfully linked your account to your SSO provider.')
 
 OK_SETUP_SSO = _(
@@ -767,6 +770,10 @@ class AuthHelper(object):
         except OrganizationMember.DoesNotExist:
             return self.error(ERR_UID_MISMATCH)
 
+        # disable require 2FA for the organization
+        # since only SSO or require 2FA can be enabled
+        self.disable_2fa_required()
+
         self.auth_provider = AuthProvider.objects.create(
             organization=self.organization,
             provider=self.provider.key,
@@ -849,3 +856,29 @@ class AuthHelper(object):
 
     def fetch_state(self, key=None):
         return self.state.data if key is None else self.state.data.get(key)
+
+    def disable_2fa_required(self):
+        require_2fa = self.organization.flags.require_2fa
+
+        if not require_2fa or not require_2fa.is_set:
+            return
+
+        self.organization.update(
+            flags=F('flags').bitand(~Organization.flags.require_2fa)
+        )
+
+        logger.info(
+            'Require 2fa disabled during sso setup',
+            extra={
+                'organization_id': self.organization.id,
+            }
+        )
+        create_audit_entry(
+            request=self.request,
+            organization=self.organization,
+            target_object=self.organization.id,
+            event=AuditLogEntryEvent.ORG_EDIT,
+            data={
+                'require_2fa': u'to False when enabling SSO'
+            },
+        )
diff --git a/src/sentry/auth/providers/saml2.py b/src/sentry/auth/providers/saml2.py
index bb90d6b55b..5a2fb2f3c5 100644
--- a/src/sentry/auth/providers/saml2.py
+++ b/src/sentry/auth/providers/saml2.py
@@ -1,11 +1,8 @@
 from __future__ import absolute_import, print_function
 
-import logging
-
 from django.contrib import messages
 from django.contrib.auth import logout
 from django.core.urlresolvers import reverse
-from django.db import models
 
 from django.http import HttpResponse, HttpResponseServerError
 from django.utils.decorators import method_decorator
@@ -18,15 +15,12 @@ from sentry import options
 from sentry.auth import Provider, AuthView
 from sentry.auth.exceptions import IdentityNotValid
 from sentry.models import (
-    AuditLogEntryEvent, AuthProvider, Organization, OrganizationStatus
+    AuthProvider, Organization, OrganizationStatus
 )
-from sentry.utils.audit import create_audit_entry
 from sentry.utils.auth import get_login_url
 from sentry.utils.http import absolute_uri
 from sentry.web.frontend.base import BaseView
 
-logger = logging.getLogger('sentry.auth')
-
 
 try:
     from onelogin.saml2.auth import OneLogin_Saml2_Auth, OneLogin_Saml2_Settings
@@ -82,11 +76,9 @@ class SAML2LoginView(AuthView):
         provider = helper.provider
 
         # During the setup pipeline, the provider will not have been configured yet,
-        # so build the config first from the state. Then disable require 2FA for the
-        # orgnization, since only SAML or require 2FA can be enabled.
+        # so build the config first from the state.
         if not provider.config:
             provider.config = provider.build_config(helper.fetch_state())
-            disable_2fa_required(request, helper.organization)
 
         saml_config = build_saml_config(provider.config, helper.organization.slug)
         auth = build_auth(request, saml_config)
@@ -399,27 +391,3 @@ def build_auth(request, saml_config):
     }
 
     return OneLogin_Saml2_Auth(saml_request, saml_config)
-
-
-def disable_2fa_required(request, organization):
-    require_2fa = organization.flags.require_2fa
-    if require_2fa and require_2fa.is_set:
-        organization.update(
-            flags=models.F('flags').bitand(~Organization.flags.require_2fa)
-        )
-
-        logger.info(
-            'Require 2fa disabled during saml sso setup',
-            extra={
-                'organization_id': organization.id,
-            }
-        )
-        create_audit_entry(
-            request=request,
-            organization=organization,
-            target_object=organization.id,
-            event=AuditLogEntryEvent.ORG_EDIT,
-            data={
-                'require_2fa': u'to False when enabling SAML SSO'
-            },
-        )
diff --git a/src/sentry/static/sentry/app/views/settings/organizationAuth/organizationAuthList.jsx b/src/sentry/static/sentry/app/views/settings/organizationAuth/organizationAuthList.jsx
index 6cfcc0e365..2cc31749cd 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationAuth/organizationAuthList.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationAuth/organizationAuthList.jsx
@@ -43,9 +43,8 @@ class OrganizationAuthList extends React.Component {
 
     const warn2FADisable =
       organization.require2FA &&
-      providerList.some(
-        ({requiredFeature, disables2FA}) =>
-          disables2FA && features.includes(descopeFeatureName(requiredFeature))
+      providerList.some(({requiredFeature}) =>
+        features.includes(descopeFeatureName(requiredFeature))
       );
 
     return (
@@ -68,9 +67,7 @@ class OrganizationAuthList extends React.Component {
 
             {warn2FADisable && (
               <PanelAlert m={0} mb={0} type="warning">
-                {t(
-                  'Require 2FA will be disabled if you enable SAML-based SSO (Okta, OneLogin, Auth0, etc.)'
-                )}
+                {t('Require 2FA will be disabled if you enable SSO.')}
               </PanelAlert>
             )}
 
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 1b8f8b43ac..4601aa40b9 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -474,12 +474,14 @@ class TwoFactorAPITestCase(APITestCase):
     def assert_can_enable_org_2fa(self, organization, user, status_code=200):
         self.__helper_enable_organization_2fa(organization, user, status_code)
 
-    def assert_cannot_enable_org_2fa(self, organization, user, status_code):
-        self.__helper_enable_organization_2fa(organization, user, status_code)
+    def assert_cannot_enable_org_2fa(self, organization, user, status_code, err_msg=None):
+        self.__helper_enable_organization_2fa(organization, user, status_code, err_msg)
 
-    def __helper_enable_organization_2fa(self, organization, user, status_code):
+    def __helper_enable_organization_2fa(self, organization, user, status_code, err_msg=None):
         response = self.api_enable_org_2fa(organization, user)
-        assert response.status_code == status_code, response.content
+        assert response.status_code == status_code
+        if err_msg:
+            assert err_msg in response.content
         organization = Organization.objects.get(id=organization.id)
 
         if status_code >= 200 and status_code < 300:
diff --git a/tests/js/fixtures/authProviders.js b/tests/js/fixtures/authProviders.js
index c83e23c7b0..f8536c61ff 100644
--- a/tests/js/fixtures/authProviders.js
+++ b/tests/js/fixtures/authProviders.js
@@ -1,13 +1,11 @@
 export function AuthProviders(params = []) {
   return [
     {
-      disables2FA: false,
       key: 'dummy',
       name: 'Dummy',
       requiredFeature: 'organizations:sso-basic',
     },
     {
-      disables2FA: true,
       key: 'dummy2',
       name: 'Dummy SAML',
       requiredFeature: 'organizations:sso-saml2',
diff --git a/tests/js/spec/views/settings/__snapshots__/organizationAuthList.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/organizationAuthList.spec.jsx.snap
index b1876b0579..ff0cbf6c0c 100644
--- a/tests/js/spec/views/settings/__snapshots__/organizationAuthList.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/organizationAuthList.spec.jsx.snap
@@ -72,7 +72,6 @@ exports[`OrganizationAuthList renders 1`] = `
           onConfigure={[Function]}
           provider={
             Object {
-              "disables2FA": false,
               "key": "dummy",
               "name": "Dummy",
               "requiredFeature": "organizations:sso-basic",
@@ -84,7 +83,6 @@ exports[`OrganizationAuthList renders 1`] = `
           onConfigure={[Function]}
           provider={
             Object {
-              "disables2FA": true,
               "key": "dummy2",
               "name": "Dummy SAML",
               "requiredFeature": "organizations:sso-saml2",
diff --git a/tests/js/spec/views/settings/organizationAuthList.spec.jsx b/tests/js/spec/views/settings/organizationAuthList.spec.jsx
index 33f45d0a6b..a263e1d321 100644
--- a/tests/js/spec/views/settings/organizationAuthList.spec.jsx
+++ b/tests/js/spec/views/settings/organizationAuthList.spec.jsx
@@ -48,9 +48,27 @@ describe('OrganizationAuthList', function() {
 
   describe('with 2fa warning', function() {
     const require2fa = {require2FA: true};
+    const withSSO = {features: ['sso-basic']};
     const withSAML = {features: ['sso-saml2']};
 
     it('renders', function() {
+      let context = TestStubs.routerContext([
+        {organization: TestStubs.Organization({...require2fa, ...withSSO})},
+      ]);
+
+      let wrapper = shallow(
+        <OrganizationAuthList
+          orgId="org-slug"
+          onSendReminders={() => {}}
+          providerList={TestStubs.AuthProviders()}
+        />,
+        context
+      );
+
+      expect(wrapper.find('PanelAlert[type="warning"]').exists()).toBe(true);
+    });
+
+    it('renders with saml available', function() {
       let context = TestStubs.routerContext([
         {organization: TestStubs.Organization({...require2fa, ...withSAML})},
       ]);
@@ -67,7 +85,7 @@ describe('OrganizationAuthList', function() {
       expect(wrapper.find('PanelAlert[type="warning"]').exists()).toBe(true);
     });
 
-    it('does not render warning without saml available', function() {
+    it('does not render without sso available', function() {
       let context = TestStubs.routerContext([
         {organization: TestStubs.Organization({...require2fa})},
       ]);
@@ -84,7 +102,24 @@ describe('OrganizationAuthList', function() {
       expect(wrapper.find('PanelAlert[type="warning"]').exists()).toBe(false);
     });
 
-    it('does not render without require 2fa enabled', function() {
+    it('does not render with sso and require 2fa disabled', function() {
+      let context = TestStubs.routerContext([
+        {organization: TestStubs.Organization({...withSSO})},
+      ]);
+
+      let wrapper = shallow(
+        <OrganizationAuthList
+          orgId="org-slug"
+          onSendReminders={() => {}}
+          providerList={TestStubs.AuthProviders()}
+        />,
+        context
+      );
+
+      expect(wrapper.find('PanelAlert[type="warning"]').exists()).toBe(false);
+    });
+
+    it('does not render with saml and require 2fa disabled', function() {
       let context = TestStubs.routerContext([
         {organization: TestStubs.Organization({...withSAML})},
       ]);
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index c3c3f92b3a..3c6869a134 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -9,6 +9,7 @@ from mock import patch
 from exam import fixture
 from pprint import pprint
 
+from sentry.api.endpoints.organization_details import ERR_NO_2FA, ERR_SSO_ENABLED
 from sentry.constants import RESERVED_ORGANIZATION_SLUGS
 from sentry.models import (
     AuditLogEntry,
@@ -579,12 +580,13 @@ class OrganizationDeleteTest(APITestCase):
 
 class OrganizationSettings2FATest(TwoFactorAPITestCase):
     def setUp(self):
+        # 2FA enforced org
         self.org_2fa = self.create_organization(owner=self.create_user())
         self.enable_org_2fa(self.org_2fa)
         self.no_2fa_user = self.create_user()
         self.create_member(organization=self.org_2fa, user=self.no_2fa_user, role="member")
 
-        # 2FA not enforced org and members
+        # 2FA not enforced org
         self.owner = self.create_user()
         self.organization = self.create_organization(owner=self.owner)
         self.manager = self.create_user()
@@ -592,6 +594,12 @@ class OrganizationSettings2FATest(TwoFactorAPITestCase):
         self.org_user = self.create_user()
         self.create_member(organization=self.organization, user=self.org_user, role="member")
 
+        # 2FA enrolled user
+        self.has_2fa = self.create_user()
+        TotpInterface().enroll(self.has_2fa)
+        self.create_member(organization=self.organization, user=self.has_2fa, role="manager")
+        assert Authenticator.objects.user_has_2fa(self.has_2fa)
+
     @fixture
     def path(self):
         return reverse('sentry-api-0-organization-details', kwargs={
@@ -612,23 +620,29 @@ class OrganizationSettings2FATest(TwoFactorAPITestCase):
 
     def test_cannot_enforce_2fa_without_2fa_enabled(self):
         assert not Authenticator.objects.user_has_2fa(self.owner)
-        self.assert_cannot_enable_org_2fa(self.organization, self.owner, 400)
+        self.assert_cannot_enable_org_2fa(self.organization, self.owner, 400, ERR_NO_2FA)
 
-    def test_cannot_enforce_2fa_with_saml_enabled(self):
+    def test_cannot_enforce_2fa_with_sso_enabled(self):
         self.auth_provider = AuthProvider.objects.create(
-            provider='saml2',
-            organization=self.org_2fa,
+            provider='github',
+            organization=self.organization,
         )
-        self.assert_cannot_enable_org_2fa(self.organization, self.owner, 400)
+        # bypass SSO login
+        self.auth_provider.flags.allow_unlinked = True
+        self.auth_provider.save()
 
-    def test_can_enforce_2fa_with_non_saml_sso_enabled(self):
-        org = self.create_organization(owner=self.owner)
-        TotpInterface().enroll(self.owner)
+        self.assert_cannot_enable_org_2fa(self.organization, self.has_2fa, 400, ERR_SSO_ENABLED)
+
+    def test_cannot_enforce_2fa_with_saml_enabled(self):
         self.auth_provider = AuthProvider.objects.create(
-            provider='github',
-            organization=org,
+            provider='saml2',
+            organization=self.organization,
         )
-        self.assert_can_enable_org_2fa(self.organization, self.owner)
+        # bypass SSO login
+        self.auth_provider.flags.allow_unlinked = True
+        self.auth_provider.save()
+
+        self.assert_cannot_enable_org_2fa(self.organization, self.has_2fa, 400, ERR_SSO_ENABLED)
 
     def test_owner_can_set_2fa_single_member(self):
         org = self.create_organization(owner=self.owner)
diff --git a/tests/sentry/web/frontend/test_auth_saml2.py b/tests/sentry/web/frontend/test_auth_saml2.py
index 357af6287c..2dd8584b2b 100644
--- a/tests/sentry/web/frontend/test_auth_saml2.py
+++ b/tests/sentry/web/frontend/test_auth_saml2.py
@@ -131,7 +131,7 @@ class AuthSAML2Test(AuthProviderTestCase):
         assert auth.status_code == 200
         assert auth.context['existing_user'] == self.user
 
-    @mock.patch('sentry.auth.providers.saml2.logger')
+    @mock.patch('sentry.auth.helper.logger')
     def test_auth_setup(self, auth_log):
         self.auth_provider.delete()
         self.login_as(self.user)
@@ -162,9 +162,9 @@ class AuthSAML2Test(AuthProviderTestCase):
             event=AuditLogEntryEvent.ORG_EDIT,
             actor=self.user
         )
-        assert 'require_2fa to False when enabling SAML SSO' in event.get_note()
+        assert 'require_2fa to False when enabling SSO' in event.get_note()
         auth_log.info.assert_called_once_with(
-            'Require 2fa disabled during saml sso setup',
+            'Require 2fa disabled during sso setup',
             extra={
                 'organization_id': self.org.id
             }
diff --git a/tests/sentry/web/frontend/test_organization_auth_settings.py b/tests/sentry/web/frontend/test_organization_auth_settings.py
index 943cc29c82..6f12714886 100644
--- a/tests/sentry/web/frontend/test_organization_auth_settings.py
+++ b/tests/sentry/web/frontend/test_organization_auth_settings.py
@@ -1,9 +1,13 @@
 from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
+from django.db import models
 from mock import patch
 
-from sentry.models import AuthIdentity, AuthProvider, OrganizationMember
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, AuthIdentity, AuthProvider,
+    Organization, OrganizationMember, TotpInterface
+)
 from sentry.testutils import AuthProviderTestCase, PermissionTestCase
 
 
@@ -64,38 +68,42 @@ class OrganizationAuthSettingsPermissionTest(PermissionTestCase):
 
 
 class OrganizationAuthSettingsTest(AuthProviderTestCase):
-    def test_can_start_auth_flow(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-
-        path = reverse('sentry-organization-auth-provider-settings', args=[organization.slug])
-
-        self.login_as(self.user)
-
-        with self.feature('organizations:sso-basic'):
-            resp = self.client.post(path, {'provider': 'dummy', 'init': True})
+    def enroll_user_and_require_2fa(self, user, organization):
+        TotpInterface().enroll(user)
+        organization.update(
+            flags=models.F('flags').bitor(Organization.flags.require_2fa)
+        )
+        assert organization.flags.require_2fa.is_set
 
-        assert resp.status_code == 200
-        assert resp.content.decode('utf-8') == self.provider.TEMPLATE
+    def assert_require_2fa_disabled(self, user, organization, logger):
+        organization = Organization.objects.get(id=organization.id)
+        assert not organization.flags.require_2fa.is_set
 
-    def test_basic_flow(self):
-        user = self.create_user('bar@example.com')
-        organization = self.create_organization(name='foo', owner=user)
+        event = AuditLogEntry.objects.get(
+            target_object=organization.id,
+            event=AuditLogEntryEvent.ORG_EDIT,
+            actor=user
+        )
+        assert 'require_2fa to False when enabling SSO' in event.get_note()
+        logger.info.assert_called_once_with(
+            'Require 2fa disabled during sso setup',
+            extra={
+                'organization_id': organization.id
+            }
+        )
 
+    def assert_basic_flow(self, user, organization):
         configure_path = reverse(
             'sentry-organization-auth-provider-settings',
             args=[
                 organization.slug])
 
-        self.login_as(user)
-
         with self.feature('organizations:sso-basic'):
             resp = self.client.post(configure_path, {'provider': 'dummy', 'init': True})
-
             assert resp.status_code == 200
             assert self.provider.TEMPLATE in resp.content.decode('utf-8')
 
             path = reverse('sentry-auth-sso')
-
             resp = self.client.post(path, {'email': user.email})
 
         assert resp.status_code == 302
@@ -105,11 +113,9 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
             organization=organization,
             provider='dummy',
         )
-
         auth_identity = AuthIdentity.objects.get(
             auth_provider=auth_provider,
         )
-
         assert user == auth_identity.user
 
         member = OrganizationMember.objects.get(
@@ -120,6 +126,46 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
         assert getattr(member.flags, 'sso:linked')
         assert not getattr(member.flags, 'sso:invalid')
 
+    def test_can_start_auth_flow(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+
+        path = reverse('sentry-organization-auth-provider-settings', args=[organization.slug])
+
+        self.login_as(self.user)
+
+        with self.feature('organizations:sso-basic'):
+            resp = self.client.post(path, {'provider': 'dummy', 'init': True})
+
+        assert resp.status_code == 200
+        assert resp.content.decode('utf-8') == self.provider.TEMPLATE
+
+    @patch('sentry.auth.helper.logger')
+    def test_basic_flow(self, logger):
+        user = self.create_user('bar@example.com')
+        organization = self.create_organization(name='foo', owner=user)
+
+        self.login_as(user)
+        self.assert_basic_flow(user, organization)
+
+        # disable require 2fa logs not called
+        assert not AuditLogEntry.objects.filter(
+            target_object=organization.id,
+            event=AuditLogEntryEvent.ORG_EDIT,
+            actor=user
+        ).exists()
+        assert not logger.info.called
+
+    @patch('sentry.auth.helper.logger')
+    def test_basic_flow__disable_require_2fa(self, logger):
+        user = self.create_user('bar@example.com')
+        organization = self.create_organization(name='foo', owner=user)
+
+        self.login_as(user)
+        self.enroll_user_and_require_2fa(user, organization)
+
+        self.assert_basic_flow(user, organization)
+        self.assert_require_2fa_disabled(user, organization, logger)
+
     @patch('sentry.web.frontend.organization_auth_settings.email_unlink_notifications')
     def test_disable_provider(self, email_unlink_notifications):
         self.user.update(is_managed=True)
